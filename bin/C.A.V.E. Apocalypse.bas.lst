------- FILE d:\Firmaplus\Firmaplus_intern\Atari\PlusROM\Projekte-batariBasic\CaveApocalypse\C.A.V.E. Apocalypse.bas.asm LEVEL 1 PASS 3
      1  5000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  5000 ????
      3  5000 ????				      processor	6502
------- FILE vcs.h LEVEL 2 PASS 3
      0  5000 ????				      include	"vcs.h"
      1  5000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  5000 ????
      3  5000 ????						; VCS.H
      4  5000 ????						; Version 1.05, 13/November/2003
      5  5000 ????
      6  5000 ????	       00 69	   VERSION_VCS =	105
      7  5000 ????
      8  5000 ????						; THIS IS A PRELIMINARY RELEASE OF *THE* "STANDARD" VCS.H
      9  5000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
     10  5000 ????						; PLEASE DO *NOT* REDISTRIBUTE THIS FILE!
     11  5000 ????						;
     12  5000 ????						; This file defines hardware registers and memory mapping for the
     13  5000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     14  5000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     15  5000 ????						; available at at http://www.atari2600.org/dasm
     16  5000 ????						;
     17  5000 ????						; Many thanks to the original author(s) of this file, and to everyone who has
     18  5000 ????						; contributed to understanding the Atari 2600.  If you take issue with the
     19  5000 ????						; contents, or naming of registers, please write to me (atari2600@taswegian.com)
     20  5000 ????						; with your views.  Please contribute, if you think you can improve this
     21  5000 ????						; file!
     22  5000 ????						;
     23  5000 ????						; Latest Revisions...
     24  5000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     25  5000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     26  5000 ????						;			    This will allow conditional code to verify VCS.H being
     27  5000 ????						;			    used for code assembly.
     28  5000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     29  5000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     30  5000 ????						;			 mirrored reading/writing differences.	This is more a 
     31  5000 ????						;			 readability issue, and binary compatibility with disassembled
     32  5000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     33  5000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     34  5000 ????						;			 which was broken by the use of segments in this file, as
     35  5000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     36  5000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     37  5000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     38  5000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     39  5000 ????						;						   it is safe to leave it undefined, and the base address will
     40  5000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     41  5000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     42  5000 ????						;			  - register definitions are now generated through assignment
     43  5000 ????						;			    in uninitialised segments.	This allows a changeable base
     44  5000 ????						;			    address architecture.
     45  5000 ????						; 1.0	22/MAR/2003		Initial release
     46  5000 ????
     47  5000 ????
     48  5000 ????						;-------------------------------------------------------------------------------
     49  5000 ????
     50  5000 ????						; TIA_BASE_ADDRESS
     51  5000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     52  5000 ????						; Normally 0, the base address should (externally, before including this file)
     53  5000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     54  5000 ????						; The reason is that this bankswitching scheme treats any access to locations
     55  5000 ????						; < $40 as a bankswitch.
     56  5000 ????
     57  5000 ????			  -	      IFNCONST	TIA_BASE_ADDRESS
     58  5000 ????			  -TIA_BASE_ADDRESS =	0
     59  5000 ????				      ENDIF
     60  5000 ????
     61  5000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     62  5000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     63  5000 ????						; *OR* by declaring the label before including this file, eg:
     64  5000 ????						; TIA_BASE_ADDRESS = $40
     65  5000 ????						;   include "vcs.h"
     66  5000 ????
     67  5000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     68  5000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     69  5000 ????						; for the mirrored ROM hardware registers.
     70  5000 ????
     71  5000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     72  5000 ????						; using the -D command-line switch, as required.  If the addresses are not defined, 
     73  5000 ????						; they defaut to the TIA_BASE_ADDRESS.
     74  5000 ????
     75  5000 ????			  -	      IFNCONST	TIA_BASE_READ_ADDRESS
     76  5000 ????			  -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     77  5000 ????				      ENDIF
     78  5000 ????
     79  5000 ????			  -	      IFNCONST	TIA_BASE_WRITE_ADDRESS
     80  5000 ????			  -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     81  5000 ????				      ENDIF
     82  5000 ????
     83  5000 ????						;-------------------------------------------------------------------------------
     84  5000 ????
     85 U002d ????				      SEG.U	TIA_REGISTERS_WRITE
     86 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     87 U0000
     88 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     89 U0000
     90 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     91 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     92 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     93 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     94 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     95 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     96 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     97 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     98 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     99 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
    100 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
    101 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    102 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    103 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    104 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    105 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    106 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    107 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    108 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    109 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    110 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    111 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    112 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    113 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    114 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    115 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    116 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    117 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    118 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    119 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    120 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    121 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    122 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    123 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    124 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    125 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    126 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    127 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    128 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    129 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    130 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    131 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    132 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    133 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    134 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    135 U002d
    136 U002d							;-------------------------------------------------------------------------------
    137 U002d
    138 U000e ????				      SEG.U	TIA_REGISTERS_READ
    139 U0000					      ORG	TIA_BASE_READ_ADDRESS
    140 U0000
    141 U0000							;											bit 7	 bit 6
    142 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    143 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    144 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    145 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    146 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    147 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    148 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    149 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    150 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    151 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    152 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    153 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    154 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    155 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    156 U000e
    157 U000e							;-------------------------------------------------------------------------------
    158 U000e
    159 U0298 ????				      SEG.U	RIOT
    160 U0280					      ORG	$280
    161 U0280
    162 U0280							; RIOT MEMORY MAP
    163 U0280
    164 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    165 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    166 U0281
    167 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    168 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    169 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    170 U0284		       00	   INTIM      ds	1	; $284		Timer output
    171 U0285
    172 U0285		       00	   TIMINT     ds	1	; $285
    173 U0286
    174 U0286							; Unused/undefined registers ($285-$294)
    175 U0286
    176 U0286		       00		      ds	1	; $286
    177 U0287		       00		      ds	1	; $287
    178 U0288		       00		      ds	1	; $288
    179 U0289		       00		      ds	1	; $289
    180 U028a		       00		      ds	1	; $28A
    181 U028b		       00		      ds	1	; $28B
    182 U028c		       00		      ds	1	; $28C
    183 U028d		       00		      ds	1	; $28D
    184 U028e		       00		      ds	1	; $28E
    185 U028f		       00		      ds	1	; $28F
    186 U0290		       00		      ds	1	; $290
    187 U0291		       00		      ds	1	; $291
    188 U0292		       00		      ds	1	; $292
    189 U0293		       00		      ds	1	; $293
    190 U0294
    191 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    192 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    193 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    194 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    195 U0298
    196 U0298							;-------------------------------------------------------------------------------
    197 U0298							; The following required for back-compatibility with code which does not use
    198 U0298							; segments.
    199 U0298
    200  5000 ????				      SEG
    201  5000 ????
    202  5000 ????						; EOF
------- FILE d:\Firmaplus\Firmaplus_intern\Atari\PlusROM\Projekte-batariBasic\CaveApocalypse\C.A.V.E. Apocalypse.bas.asm
------- FILE macro.h LEVEL 2 PASS 3
      0  5000 ????				      include	"macro.h"
      1  5000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  5000 ????
      3  5000 ????						; MACRO.H
      4  5000 ????						; Version 1.05, 13/NOVEMBER/2003
      5  5000 ????
      6  5000 ????	       00 69	   VERSION_MACRO =	105
      7  5000 ????
      8  5000 ????						;
      9  5000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
     10  5000 ????						; PLEASE DO *NOT* REDISTRIBUTE MODIFIED VERSIONS OF THIS FILE!
     11  5000 ????						;
     12  5000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     13  5000 ????						; It is distributed as a companion machine-specific support package
     14  5000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     15  5000 ????						; available at at http://www.atari2600.org/dasm
     16  5000 ????						;
     17  5000 ????						; Many thanks to the people who have contributed.  If you take issue with the
     18  5000 ????						; contents, or would like to add something, please write to me
     19  5000 ????						; (atari2600@taswegian.com) with your contribution.
     20  5000 ????						;
     21  5000 ????						; Latest Revisions...
     22  5000 ????						;
     23  5000 ????						; 1.05  14/NOV/2003	  - Added VERSION_MACRO equate (which will reflect 100x version #)
     24  5000 ????						;			    This will allow conditional code to verify MACRO.H being
     25  5000 ????						;			    used for code assembly.
     26  5000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     27  5000 ????						;
     28  5000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     29  5000 ????						;
     30  5000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     31  5000 ????						;			   (standardised macro for vertical synch code)
     32  5000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added. 
     33  5000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     34  5000 ????						; 1.0	22/MAR/2003		Initial release
     35  5000 ????
     36  5000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage, 
     37  5000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     38  5000 ????						;   If you do not allow illegal opcode usage, you must include this file 
     39  5000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     40  5000 ????						;   registers and require them to be defined first).
     41  5000 ????
     42  5000 ????						; Available macros...
     43  5000 ????						;   SLEEP n		 - sleep for n cycles
     44  5000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     45  5000 ????						;   CLEAN_START	 - set machine to known state on startup
     46  5000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     47  5000 ????
     48  5000 ????						;-------------------------------------------------------------------------------
     49  5000 ????						; SLEEP duration
     50  5000 ????						; Original author: Thomas Jentzsch
     51  5000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     52  5000 ????						; useful for code where precise timing is required.
     53  5000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     54  5000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     55  5000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     56  5000 ????
     57  5000 ????				      MAC	sleep
     58  5000 ????			   .CYCLES    SET	{1}
     59  5000 ????
     60  5000 ????				      IF	.CYCLES < 2
     61  5000 ????				      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     62  5000 ????				      ERR
     63  5000 ????				      ENDIF
     64  5000 ????
     65  5000 ????				      IF	.CYCLES & 1
     66  5000 ????				      IFNCONST	NO_ILLEGAL_OPCODES
     67  5000 ????				      nop	0
     68  5000 ????				      ELSE
     69  5000 ????				      bit	VSYNC
     70  5000 ????				      ENDIF
     71  5000 ????			   .CYCLES    SET	.CYCLES - 3
     72  5000 ????				      ENDIF
     73  5000 ????
     74  5000 ????				      REPEAT	.CYCLES / 2
     75  5000 ????				      nop
     76  5000 ????				      REPEND
     77  5000 ????				      ENDM		;usage: SLEEP n (n>1)
     78  5000 ????
     79  5000 ????						;-------------------------------------------------------------------------------
     80  5000 ????						; VERTICAL_SYNC
     81  5000 ????						; Original author: Manuel Polik
     82  5000 ????						; Inserts the code required for a proper 3 scannline 
     83  5000 ????						; vertical sync sequence
     84  5000 ????						;
     85  5000 ????						; Note: Alters the accumulator
     86  5000 ????						;
     87  5000 ????						; IN:
     88  5000 ????						; OUT: A = 1
     89  5000 ????
     90  5000 ????				      MAC	vertical_sync
     91  5000 ????				      LDA	#$02	; A = VSYNC enable
     92  5000 ????				      STA	WSYNC	; Finish current line
     93  5000 ????				      STA	VSYNC	; Start vertical sync
     94  5000 ????				      STA	WSYNC	; 1st line vertical sync
     95  5000 ????				      STA	WSYNC	; 2nd line vertical sync
     96  5000 ????				      LSR		; A = VSYNC disable
     97  5000 ????				      STA	WSYNC	; 3rd line vertical sync
     98  5000 ????				      STA	VSYNC	; Stop vertical sync
     99  5000 ????				      ENDM
    100  5000 ????
    101  5000 ????						;-------------------------------------------------------------------------------
    102  5000 ????						; CLEAN_START
    103  5000 ????						; Original author: Andrew Davie
    104  5000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
    105  5000 ????						; Sets stack pointer to $FF, and all registers to 0
    106  5000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    107  5000 ????						; Use as very first section of code on boot (ie: at reset)
    108  5000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    109  5000 ????
    110  5000 ????				      MAC	clean_start
    111  5000 ????				      sei
    112  5000 ????				      cld
    113  5000 ????
    114  5000 ????				      ldx	#0
    115  5000 ????				      txa
    116  5000 ????				      tay
    117  5000 ????			   .CLEAR_STACK dex
    118  5000 ????				      txs
    119  5000 ????				      pha
    120  5000 ????				      bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    121  5000 ????
    122  5000 ????				      ENDM
    123  5000 ????
    124  5000 ????						;-------------------------------------------------------
    125  5000 ????						; SET_POINTER
    126  5000 ????						; Original author: Manuel Rotschkar
    127  5000 ????						;
    128  5000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    129  5000 ????						;
    130  5000 ????						; Usage: SET_POINTER pointer, address
    131  5000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    132  5000 ????						;
    133  5000 ????						; Note: Alters the accumulator, NZ flags
    134  5000 ????						; IN 1: 2 byte RAM location reserved for pointer
    135  5000 ????						; IN 2: absolute address
    136  5000 ????
    137  5000 ????				      MAC	set_pointer
    138  5000 ????			   .POINTER   SET	{1}
    139  5000 ????			   .ADDRESS   SET	{2}
    140  5000 ????
    141  5000 ????				      LDA	#<.ADDRESS	; Get Lowbyte of Address
    142  5000 ????				      STA	.POINTER	; Store in pointer
    143  5000 ????				      LDA	#>.ADDRESS	; Get Hibyte of Address
    144  5000 ????				      STA	.POINTER+1	; Store in pointer+1
    145  5000 ????
    146  5000 ????				      ENDM
    147  5000 ????
    148  5000 ????						; EOF
------- FILE d:\Firmaplus\Firmaplus_intern\Atari\PlusROM\Projekte-batariBasic\CaveApocalypse\C.A.V.E. Apocalypse.bas.asm
------- FILE 2600basic.h LEVEL 2 PASS 3
      0  5000 ????				      include	"2600basic.h"
      1  5000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  5000 ????
      3  5000 ????				      processor	6502
------- FILE vcs.h LEVEL 3 PASS 3
      0  5000 ????				      include	"vcs.h"
      1  5000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  5000 ????
      3  5000 ????						; VCS.H
      4  5000 ????						; Version 1.05, 13/November/2003
      5  5000 ????
      6  5000 ????	       00 69	   VERSION_VCS =	105
      7  5000 ????
      8  5000 ????						; THIS IS A PRELIMINARY RELEASE OF *THE* "STANDARD" VCS.H
      9  5000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
     10  5000 ????						; PLEASE DO *NOT* REDISTRIBUTE THIS FILE!
     11  5000 ????						;
     12  5000 ????						; This file defines hardware registers and memory mapping for the
     13  5000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     14  5000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     15  5000 ????						; available at at http://www.atari2600.org/dasm
     16  5000 ????						;
     17  5000 ????						; Many thanks to the original author(s) of this file, and to everyone who has
     18  5000 ????						; contributed to understanding the Atari 2600.  If you take issue with the
     19  5000 ????						; contents, or naming of registers, please write to me (atari2600@taswegian.com)
     20  5000 ????						; with your views.  Please contribute, if you think you can improve this
     21  5000 ????						; file!
     22  5000 ????						;
     23  5000 ????						; Latest Revisions...
     24  5000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     25  5000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     26  5000 ????						;			    This will allow conditional code to verify VCS.H being
     27  5000 ????						;			    used for code assembly.
     28  5000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     29  5000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     30  5000 ????						;			 mirrored reading/writing differences.	This is more a 
     31  5000 ????						;			 readability issue, and binary compatibility with disassembled
     32  5000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     33  5000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     34  5000 ????						;			 which was broken by the use of segments in this file, as
     35  5000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     36  5000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     37  5000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     38  5000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     39  5000 ????						;						   it is safe to leave it undefined, and the base address will
     40  5000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     41  5000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     42  5000 ????						;			  - register definitions are now generated through assignment
     43  5000 ????						;			    in uninitialised segments.	This allows a changeable base
     44  5000 ????						;			    address architecture.
     45  5000 ????						; 1.0	22/MAR/2003		Initial release
     46  5000 ????
     47  5000 ????
     48  5000 ????						;-------------------------------------------------------------------------------
     49  5000 ????
     50  5000 ????						; TIA_BASE_ADDRESS
     51  5000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     52  5000 ????						; Normally 0, the base address should (externally, before including this file)
     53  5000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     54  5000 ????						; The reason is that this bankswitching scheme treats any access to locations
     55  5000 ????						; < $40 as a bankswitch.
     56  5000 ????
     57  5000 ????			  -	      IFNCONST	TIA_BASE_ADDRESS
     58  5000 ????			  -TIA_BASE_ADDRESS =	0
     59  5000 ????				      ENDIF
     60  5000 ????
     61  5000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     62  5000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     63  5000 ????						; *OR* by declaring the label before including this file, eg:
     64  5000 ????						; TIA_BASE_ADDRESS = $40
     65  5000 ????						;   include "vcs.h"
     66  5000 ????
     67  5000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     68  5000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     69  5000 ????						; for the mirrored ROM hardware registers.
     70  5000 ????
     71  5000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     72  5000 ????						; using the -D command-line switch, as required.  If the addresses are not defined, 
     73  5000 ????						; they defaut to the TIA_BASE_ADDRESS.
     74  5000 ????
     75  5000 ????			  -	      IFNCONST	TIA_BASE_READ_ADDRESS
     76  5000 ????			  -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     77  5000 ????				      ENDIF
     78  5000 ????
     79  5000 ????			  -	      IFNCONST	TIA_BASE_WRITE_ADDRESS
     80  5000 ????			  -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     81  5000 ????				      ENDIF
     82  5000 ????
     83  5000 ????						;-------------------------------------------------------------------------------
     84  5000 ????
     85 U002d					      SEG.U	TIA_REGISTERS_WRITE
     86 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     87 U0000
     88 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     89 U0000
     90 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     91 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     92 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     93 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     94 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     95 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     96 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     97 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     98 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     99 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
    100 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
    101 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    102 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    103 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    104 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    105 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    106 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    107 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    108 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    109 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    110 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    111 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    112 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    113 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    114 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    115 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    116 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    117 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    118 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    119 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    120 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    121 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    122 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    123 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    124 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    125 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    126 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    127 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    128 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    129 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    130 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    131 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    132 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    133 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    134 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    135 U002d
    136 U002d							;-------------------------------------------------------------------------------
    137 U002d
    138 U000e					      SEG.U	TIA_REGISTERS_READ
    139 U0000					      ORG	TIA_BASE_READ_ADDRESS
    140 U0000
    141 U0000							;											bit 7	 bit 6
    142 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    143 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    144 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    145 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    146 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    147 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    148 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    149 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    150 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    151 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    152 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    153 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    154 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    155 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    156 U000e
    157 U000e							;-------------------------------------------------------------------------------
    158 U000e
    159 U0298					      SEG.U	RIOT
    160 U0280					      ORG	$280
    161 U0280
    162 U0280							; RIOT MEMORY MAP
    163 U0280
    164 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    165 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    166 U0281
    167 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    168 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    169 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    170 U0284		       00	   INTIM      ds	1	; $284		Timer output
    171 U0285
    172 U0285		       00	   TIMINT     ds	1	; $285
    173 U0286
    174 U0286							; Unused/undefined registers ($285-$294)
    175 U0286
    176 U0286		       00		      ds	1	; $286
    177 U0287		       00		      ds	1	; $287
    178 U0288		       00		      ds	1	; $288
    179 U0289		       00		      ds	1	; $289
    180 U028a		       00		      ds	1	; $28A
    181 U028b		       00		      ds	1	; $28B
    182 U028c		       00		      ds	1	; $28C
    183 U028d		       00		      ds	1	; $28D
    184 U028e		       00		      ds	1	; $28E
    185 U028f		       00		      ds	1	; $28F
    186 U0290		       00		      ds	1	; $290
    187 U0291		       00		      ds	1	; $291
    188 U0292		       00		      ds	1	; $292
    189 U0293		       00		      ds	1	; $293
    190 U0294
    191 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    192 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    193 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    194 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    195 U0298
    196 U0298							;-------------------------------------------------------------------------------
    197 U0298							; The following required for back-compatibility with code which does not use
    198 U0298							; segments.
    199 U0298
    200  5000 ????				      SEG
    201  5000 ????
    202  5000 ????						; EOF
------- FILE 2600basic.h
------- FILE macro.h LEVEL 3 PASS 3
      0  5000 ????				      include	"macro.h"
      1  5000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  5000 ????
      3  5000 ????						; MACRO.H
      4  5000 ????						; Version 1.05, 13/NOVEMBER/2003
      5  5000 ????
      6  5000 ????	       00 69	   VERSION_MACRO =	105
      7  5000 ????
      8  5000 ????						;
      9  5000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
     10  5000 ????						; PLEASE DO *NOT* REDISTRIBUTE MODIFIED VERSIONS OF THIS FILE!
     11  5000 ????						;
     12  5000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     13  5000 ????						; It is distributed as a companion machine-specific support package
     14  5000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     15  5000 ????						; available at at http://www.atari2600.org/dasm
     16  5000 ????						;
     17  5000 ????						; Many thanks to the people who have contributed.  If you take issue with the
     18  5000 ????						; contents, or would like to add something, please write to me
     19  5000 ????						; (atari2600@taswegian.com) with your contribution.
     20  5000 ????						;
     21  5000 ????						; Latest Revisions...
     22  5000 ????						;
     23  5000 ????						; 1.05  14/NOV/2003	  - Added VERSION_MACRO equate (which will reflect 100x version #)
     24  5000 ????						;			    This will allow conditional code to verify MACRO.H being
     25  5000 ????						;			    used for code assembly.
     26  5000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     27  5000 ????						;
     28  5000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     29  5000 ????						;
     30  5000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     31  5000 ????						;			   (standardised macro for vertical synch code)
     32  5000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added. 
     33  5000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     34  5000 ????						; 1.0	22/MAR/2003		Initial release
     35  5000 ????
     36  5000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage, 
     37  5000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     38  5000 ????						;   If you do not allow illegal opcode usage, you must include this file 
     39  5000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     40  5000 ????						;   registers and require them to be defined first).
     41  5000 ????
     42  5000 ????						; Available macros...
     43  5000 ????						;   SLEEP n		 - sleep for n cycles
     44  5000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     45  5000 ????						;   CLEAN_START	 - set machine to known state on startup
     46  5000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     47  5000 ????
     48  5000 ????						;-------------------------------------------------------------------------------
     49  5000 ????						; SLEEP duration
     50  5000 ????						; Original author: Thomas Jentzsch
     51  5000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     52  5000 ????						; useful for code where precise timing is required.
     53  5000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     54  5000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     55  5000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     56  5000 ????
     57  5000 ????				      MAC	sleep
     58  5000 ????			   .CYCLES    SET	{1}
     59  5000 ????
     60  5000 ????				      IF	.CYCLES < 2
     61  5000 ????				      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     62  5000 ????				      ERR
     63  5000 ????				      ENDIF
     64  5000 ????
     65  5000 ????				      IF	.CYCLES & 1
     66  5000 ????				      IFNCONST	NO_ILLEGAL_OPCODES
     67  5000 ????				      nop	0
     68  5000 ????				      ELSE
     69  5000 ????				      bit	VSYNC
     70  5000 ????				      ENDIF
     71  5000 ????			   .CYCLES    SET	.CYCLES - 3
     72  5000 ????				      ENDIF
     73  5000 ????
     74  5000 ????				      REPEAT	.CYCLES / 2
     75  5000 ????				      nop
     76  5000 ????				      REPEND
     77  5000 ????				      ENDM		;usage: SLEEP n (n>1)
     78  5000 ????
     79  5000 ????						;-------------------------------------------------------------------------------
     80  5000 ????						; VERTICAL_SYNC
     81  5000 ????						; Original author: Manuel Polik
     82  5000 ????						; Inserts the code required for a proper 3 scannline 
     83  5000 ????						; vertical sync sequence
     84  5000 ????						;
     85  5000 ????						; Note: Alters the accumulator
     86  5000 ????						;
     87  5000 ????						; IN:
     88  5000 ????						; OUT: A = 1
     89  5000 ????
     90  5000 ????				      MAC	vertical_sync
     91  5000 ????				      LDA	#$02	; A = VSYNC enable
     92  5000 ????				      STA	WSYNC	; Finish current line
     93  5000 ????				      STA	VSYNC	; Start vertical sync
     94  5000 ????				      STA	WSYNC	; 1st line vertical sync
     95  5000 ????				      STA	WSYNC	; 2nd line vertical sync
     96  5000 ????				      LSR		; A = VSYNC disable
     97  5000 ????				      STA	WSYNC	; 3rd line vertical sync
     98  5000 ????				      STA	VSYNC	; Stop vertical sync
     99  5000 ????				      ENDM
    100  5000 ????
    101  5000 ????						;-------------------------------------------------------------------------------
    102  5000 ????						; CLEAN_START
    103  5000 ????						; Original author: Andrew Davie
    104  5000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
    105  5000 ????						; Sets stack pointer to $FF, and all registers to 0
    106  5000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    107  5000 ????						; Use as very first section of code on boot (ie: at reset)
    108  5000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    109  5000 ????
    110  5000 ????				      MAC	clean_start
    111  5000 ????				      sei
    112  5000 ????				      cld
    113  5000 ????
    114  5000 ????				      ldx	#0
    115  5000 ????				      txa
    116  5000 ????				      tay
    117  5000 ????			   .CLEAR_STACK dex
    118  5000 ????				      txs
    119  5000 ????				      pha
    120  5000 ????				      bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    121  5000 ????
    122  5000 ????				      ENDM
    123  5000 ????
    124  5000 ????						;-------------------------------------------------------
    125  5000 ????						; SET_POINTER
    126  5000 ????						; Original author: Manuel Rotschkar
    127  5000 ????						;
    128  5000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    129  5000 ????						;
    130  5000 ????						; Usage: SET_POINTER pointer, address
    131  5000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    132  5000 ????						;
    133  5000 ????						; Note: Alters the accumulator, NZ flags
    134  5000 ????						; IN 1: 2 byte RAM location reserved for pointer
    135  5000 ????						; IN 2: absolute address
    136  5000 ????
    137  5000 ????				      MAC	set_pointer
    138  5000 ????			   .POINTER   SET	{1}
    139  5000 ????			   .ADDRESS   SET	{2}
    140  5000 ????
    141  5000 ????				      LDA	#<.ADDRESS	; Get Lowbyte of Address
    142  5000 ????				      STA	.POINTER	; Store in pointer
    143  5000 ????				      LDA	#>.ADDRESS	; Get Hibyte of Address
    144  5000 ????				      STA	.POINTER+1	; Store in pointer+1
    145  5000 ????
    146  5000 ????				      ENDM
    147  5000 ????
    148  5000 ????						; EOF
------- FILE 2600basic.h
------- FILE 2600basic_variable_redefs.h LEVEL 3 PASS 3
      0  5000 ????				      include	"2600basic_variable_redefs.h"
      1  5000 ????						; This file contains variable mapping and other information for the current project.
      2  5000 ????
      3  5000 ????	       00 fc	   text_strings_length =	.skipL0689-text_strings
      4  5000 ????
      5  5000 ????	       00 23	   bscode_length =	35
      6  5000 ????	       00 11	   _SD_Helicopter_Explosion_length =	.skipL0650-_SD_Helicopter_Explosion
      7  5000 ????
      8  5000 ????	       00 1d	   _SD_Touch_Enemy_length =	.skipL0649-_SD_Touch_Enemy
      9  5000 ????
     10  5000 ????	       00 21	   _SD_Shoot_Enemy_length =	.skipL0648-_SD_Shoot_Enemy
     11  5000 ????
     12  5000 ????	       00 45	   _SD_Shoot_Miss_length =	.skipL0647-_SD_Shoot_Miss
     13  5000 ????
     14  5000 ????	       00 35	   _SD_Shot_Wall_length =	.skipL0646-_SD_Shot_Wall
     15  5000 ????
     16  5000 ????	       f0 5f	   w_Bit0_room_type_top =	w_BitOp_room_type
     17  5000 ????
     18  5000 ????	       f0 df	   r_Bit0_room_type_top =	r_BitOp_room_type
     19  5000 ????
     20  5000 ????	       f0 6f	   w_extra_wall_startpos_2_y =	w111
     21  5000 ????
     22  5000 ????	       f0 ef	   r_extra_wall_startpos_2_y =	r111
     23  5000 ????
     24  5000 ????	       f0 6e	   w_extra_wall_startpos_2_x =	w110
     25  5000 ????
     26  5000 ????	       f0 ee	   r_extra_wall_startpos_2_x =	r110
     27  5000 ????
     28  5000 ????	       f0 6d	   w_extra_wall_startpos_1_y =	w109
     29  5000 ????
     30  5000 ????	       f0 ed	   r_extra_wall_startpos_1_y =	r109
     31  5000 ????
     32  5000 ????	       f0 6c	   w_extra_wall_startpos_1_x =	w108
     33  5000 ????
     34  5000 ????	       f0 ec	   r_extra_wall_startpos_1_x =	r108
     35  5000 ????
     36  5000 ????	       f0 6b	   w_extra_wall_height =	w107
     37  5000 ????
     38  5000 ????	       f0 eb	   r_extra_wall_height =	r107
     39  5000 ????
     40  5000 ????	       f0 6a	   w_extra_wall_width =	w106
     41  5000 ????
     42  5000 ????	       f0 ea	   r_extra_wall_width =	r106
     43  5000 ????
     44  5000 ????	       f0 69	   w_extra_wall_type_and_range =	w105
     45  5000 ????
     46  5000 ????	       f0 e9	   r_extra_wall_type_and_range =	r105
     47  5000 ????
     48  5000 ????	       f0 68	   w_roommate_startpos_y =	w104
     49  5000 ????
     50  5000 ????	       f0 e8	   r_roommate_startpos_y =	r104
     51  5000 ????
     52  5000 ????	       f0 67	   w_roommate_startpos_x =	w103
     53  5000 ????
     54  5000 ????	       f0 e7	   r_roommate_startpos_x =	r103
     55  5000 ????
     56  5000 ????	       f0 66	   w_roommate_type_and_range =	w102
     57  5000 ????
     58  5000 ????	       f0 e6	   r_roommate_type_and_range =	r102
     59  5000 ????
     60  5000 ????	       f0 65	   w_room_color_bottom =	w101
     61  5000 ????
     62  5000 ????	       f0 e5	   r_room_color_bottom =	r101
     63  5000 ????
     64  5000 ????	       f0 64	   w_room_color_waste4 =	w100
     65  5000 ????
     66  5000 ????	       f0 e4	   r_room_color_waste3 =	r100
     67  5000 ????
     68  5000 ????	       f0 63	   w_room_color_waste2 =	w099
     69  5000 ????
     70  5000 ????	       f0 e3	   r_room_color_waste2 =	r099
     71  5000 ????
     72  5000 ????	       f0 62	   w_room_color_waste1 =	w098
     73  5000 ????
     74  5000 ????	       f0 e2	   r_room_color_waste1 =	r098
     75  5000 ????
     76  5000 ????	       f0 61	   w_room_color_middle =	w097
     77  5000 ????
     78  5000 ????	       f0 e1	   r_room_color_middle =	r097
     79  5000 ????
     80  5000 ????	       f0 60	   w_room_color_top =	w096
     81  5000 ????
     82  5000 ????	       f0 e0	   r_room_color_top =	r096
     83  5000 ????
     84  5000 ????	       f0 5f	   w_BitOp_room_type =	w095
     85  5000 ????
     86  5000 ????	       f0 df	   r_BitOp_room_type =	r095
     87  5000 ????
     88  5000 ????	       f0 5e	   w_men_to_rescue_in_this_level =	w094
     89  5000 ????
     90  5000 ????	       f0 de	   r_men_to_rescue_in_this_level =	r094
     91  5000 ????
     92  5000 ????	       f0 5d	   w_level_bonus_bcd_points =	w093
     93  5000 ????
     94  5000 ????	       f0 dd	   r_level_bonus_bcd_points =	r093
     95  5000 ????
     96  5000 ????	       f0 5d	   w_room_definition_start =	w093
     97  5000 ????
     98  5000 ????	       00 d3	   Game_Status =	var47
     99  5000 ????
    100  5000 ????	       00 b4	   next_shoot_rand =	var16
    101  5000 ????
    102  5000 ????	       00 b2	   enemy_game_state =	var14
    103  5000 ????
    104  5000 ????	       00 b1	   bonus_bcd_counter =	var13
    105  5000 ????
    106  5000 ????	       00 b0	   TextIndex  =	var12
    107  5000 ????
    108  5000 ????	       00 b0	   men_to_rescue =	var12
    109  5000 ????
    110  5000 ????	       00 af	   ball_shoot_y =	var11
    111  5000 ????
    112  5000 ????	       00 ae	   ball_shoot_x =	var10
    113  5000 ????
    114  5000 ????	       00 ad	   has_private_levels =	var9
    115  5000 ????
    116  5000 ????	       00 ac	   max_priv_level_bcd3 =	var8
    117  5000 ????
    118  5000 ????	       00 ab	   max_priv_level_bcd2 =	var7
    119  5000 ????
    120  5000 ????	       00 aa	   max_priv_level_bcd1 =	var6
    121  5000 ????
    122  5000 ????	       00 a9	   max_pub_level_bcd3 =	var5
    123  5000 ????
    124  5000 ????	       00 a8	   max_pub_level_bcd2 =	var4
    125  5000 ????
    126  5000 ????	       00 a7	   max_pub_level_bcd1 =	var3
    127  5000 ????
    128  5000 ????	       00 a6	   gamenumber =	var2
    129  5000 ????
    130  5000 ????	       00 a5	   new_room_player1x =	var1
    131  5000 ????
    132  5000 ????	       00 a4	   new_room_player1y =	var0
    133  5000 ????
    134  5000 ????	       00 ed	   rand16     =	z
    135  5000 ????
    136  5000 ????	       00 ec	   _Bit7_FireB_Restrainer =	y
    137  5000 ????
    138  5000 ????	       00 ec	   _Bit6_Flip_P1 =	y
    139  5000 ????
    140  5000 ????	       00 ec	   _Bit5_Request_Pending =	y
    141  5000 ????
    142  5000 ????	       00 ec	   _Bit4_Wall_Dir =	y
    143  5000 ????
    144  5000 ????	       00 ec	   _Bit3_Safe_Point_reached =	y
    145  5000 ????
    146  5000 ????	       00 ec	   _Bit2_roommate_Dir =	y
    147  5000 ????
    148  5000 ????	       00 ec	   _Bit0_Rotor_Sound_On =	y
    149  5000 ????
    150  5000 ????	       00 ec	   _Bit_Game_State =	y
    151  5000 ????
    152  5000 ????	       00 86	   P1y_position =	player1y
    153  5000 ????	       00 e9	   P1y_velocity =	v
    154  5000 ????	       00 91	   M0y_position =	missile0y
    155  5000 ????	       00 e6	   M0y_velocity =	s
    156  5000 ????	       00 af	   Bally_position =	ball_shoot_y
    157  5000 ????	       00 e3	   Bally_velocity =	p
    158  5000 ????	       00 e2	   _Ch1_Duration =	o
    159  5000 ????
    160  5000 ????	       00 e1	   Safe_Point_P1_y =	n
    161  5000 ????
    162  5000 ????	       00 e0	   Safe_Point_P1_x =	m
    163  5000 ????
    164  5000 ????	       00 df	   _Bit1_Safe_Point_P1_Flip =	l
    165  5000 ????
    166  5000 ????	       00 df	   _Bit0_New_Room_P1_Flip =	l
    167  5000 ????
    168  5000 ????	       00 df	   _BitOp_Flip_positions =	l
    169  5000 ????
    170  5000 ????	       00 de	   roommate_type =	k
    171  5000 ????
    172  5000 ????	       00 dd	   roommate_move_x =	j
    173  5000 ????
    174  5000 ????	       00 dc	   extra_wall_move_x =	i
    175  5000 ????
    176  5000 ????	       00 db	   _Ch0_Counter =	h
    177  5000 ????
    178  5000 ????	       00 da	   _Ch0_Duration =	g
    179  5000 ????
    180  5000 ????	       00 d9	   _Ch0_Sound =	f
    181  5000 ????
    182  5000 ????	       00 d8	   _Bit3_P1_Dir_Right =	e
    183  5000 ????
    184  5000 ????	       00 d8	   _Bit2_P1_Dir_Left =	e
    185  5000 ????
    186  5000 ????	       00 d8	   _Bit1_P1_Dir_Down =	e
    187  5000 ????
    188  5000 ????	       00 d8	   _Bit0_P1_Dir_Up =	e
    189  5000 ????
    190  5000 ????	       00 d8	   _BitOp_P1_Dir =	e
    191  5000 ????
    192  5000 ????	       00 d7	   _Bit3_M0_Dir_Right =	d
    193  5000 ????
    194  5000 ????	       00 d7	   _Bit2_M0_Dir_Left =	d
    195  5000 ????
    196  5000 ????	       00 d7	   _Bit1_M0_Dir_Down =	d
    197  5000 ????
    198  5000 ????	       00 d7	   _Bit0_M0_Dir_Up =	d
    199  5000 ????
    200  5000 ????	       00 d7	   _BitOp_M0_Dir =	d
    201  5000 ????
    202  5000 ????	       00 d6	   _Bit3_Ball_Shot_Dir_Right2 =	c
    203  5000 ????
    204  5000 ????	       00 d6	   _Bit2_Ball_Shot_Dir_Right1 =	c
    205  5000 ????
    206  5000 ????	       00 d6	   _Bit1_Ball_Shot_Dir_Left2 =	c
    207  5000 ????
    208  5000 ????	       00 d6	   _Bit0_Ball_Shot_Dir_Left1 =	c
    209  5000 ????
    210  5000 ????	       00 d6	   _BitOp_Ball_Shot_Dir =	c
    211  5000 ????
    212  5000 ????	       00 d5	   frame_counter =	b
    213  5000 ????
    214  5000 ????	       00 d4	   delay_counter =	a
    215  5000 ????
    216  5000 ????	       00 95	   _sc3       =	score + 2
    217  5000 ????
    218  5000 ????	       00 94	   _sc2       =	score + 1
    219  5000 ????
    220  5000 ????	       00 93	   _sc1       =	score
    221  5000 ????
    222  5000 ????	       00 fe	   _FE	      =	$FE
    223  5000 ????
    224  5000 ????	       00 fc	   _FC	      =	$FC
    225  5000 ????
    226  5000 ????	       00 fa	   _FA	      =	$FA
    227  5000 ????
    228  5000 ????	       00 f8	   _F8	      =	$F8
    229  5000 ????
    230  5000 ????	       00 f6	   _F6	      =	$F6
    231  5000 ????
    232  5000 ????	       00 f4	   _F4	      =	$F4
    233  5000 ????
    234  5000 ????	       00 f2	   _F2	      =	$F2
    235  5000 ????
    236  5000 ????	       00 f0	   _F0	      =	$F0
    237  5000 ????
    238  5000 ????	       00 ee	   _EE	      =	$EE
    239  5000 ????
    240  5000 ????	       00 ec	   _EC	      =	$EC
    241  5000 ????
    242  5000 ????	       00 ea	   _EA	      =	$EA
    243  5000 ????
    244  5000 ????	       00 e8	   _E8	      =	$E8
    245  5000 ????
    246  5000 ????	       00 e6	   _E6	      =	$E6
    247  5000 ????
    248  5000 ????	       00 e4	   _E4	      =	$E4
    249  5000 ????
    250  5000 ????	       00 e2	   _E2	      =	$E2
    251  5000 ????
    252  5000 ????	       00 e0	   _E0	      =	$E0
    253  5000 ????
    254  5000 ????	       00 de	   _DE	      =	$DE
    255  5000 ????
    256  5000 ????	       00 dc	   _DC	      =	$DC
    257  5000 ????
    258  5000 ????	       00 da	   _DA	      =	$DA
    259  5000 ????
    260  5000 ????	       00 d8	   _D8	      =	$D8
    261  5000 ????
    262  5000 ????	       00 d6	   _D6	      =	$D6
    263  5000 ????
    264  5000 ????	       00 d4	   _D4	      =	$D4
    265  5000 ????
    266  5000 ????	       00 d2	   _D2	      =	$D2
    267  5000 ????
    268  5000 ????	       00 d0	   _D0	      =	$D0
    269  5000 ????
    270  5000 ????	       00 ce	   _CE	      =	$CE
    271  5000 ????
    272  5000 ????	       00 cc	   _CC	      =	$CC
    273  5000 ????
    274  5000 ????	       00 ca	   _CA	      =	$CA
    275  5000 ????
    276  5000 ????	       00 c8	   _C8	      =	$C8
    277  5000 ????
    278  5000 ????	       00 c6	   _C6	      =	$C6
    279  5000 ????
    280  5000 ????	       00 c4	   _C4	      =	$C4
    281  5000 ????
    282  5000 ????	       00 c2	   _C2	      =	$C2
    283  5000 ????
    284  5000 ????	       00 c0	   _C0	      =	$C0
    285  5000 ????
    286  5000 ????	       00 be	   _BE	      =	$BE
    287  5000 ????
    288  5000 ????	       00 bc	   _BC	      =	$BC
    289  5000 ????
    290  5000 ????	       00 ba	   _BA	      =	$BA
    291  5000 ????
    292  5000 ????	       00 b8	   _B8	      =	$B8
    293  5000 ????
    294  5000 ????	       00 b6	   _B6	      =	$B6
    295  5000 ????
    296  5000 ????	       00 b4	   _B4	      =	$B4
    297  5000 ????
    298  5000 ????	       00 b2	   _B2	      =	$B2
    299  5000 ????
    300  5000 ????	       00 b0	   _B0	      =	$B0
    301  5000 ????
    302  5000 ????	       00 ae	   _AE	      =	$AE
    303  5000 ????
    304  5000 ????	       00 ac	   _AC	      =	$AC
    305  5000 ????
    306  5000 ????	       00 aa	   _AA	      =	$AA
    307  5000 ????
    308  5000 ????	       00 a8	   _A8	      =	$A8
    309  5000 ????
    310  5000 ????	       00 a6	   _A6	      =	$A6
    311  5000 ????
    312  5000 ????	       00 a4	   _A4	      =	$A4
    313  5000 ????
    314  5000 ????	       00 a2	   _A2	      =	$A2
    315  5000 ????
    316  5000 ????	       00 a0	   _A0	      =	$A0
    317  5000 ????
    318  5000 ????	       00 9e	   _9E	      =	$9E
    319  5000 ????
    320  5000 ????	       00 9c	   _9C	      =	$9C
    321  5000 ????
    322  5000 ????	       00 9a	   _9A	      =	$9A
    323  5000 ????
    324  5000 ????	       00 98	   _98	      =	$98
    325  5000 ????
    326  5000 ????	       00 96	   _96	      =	$96
    327  5000 ????
    328  5000 ????	       00 94	   _94	      =	$94
    329  5000 ????
    330  5000 ????	       00 92	   _92	      =	$92
    331  5000 ????
    332  5000 ????	       00 90	   _90	      =	$90
    333  5000 ????
    334  5000 ????	       00 8e	   _8E	      =	$8E
    335  5000 ????
    336  5000 ????	       00 8c	   _8C	      =	$8C
    337  5000 ????
    338  5000 ????	       00 8a	   _8A	      =	$8A
    339  5000 ????
    340  5000 ????	       00 88	   _88	      =	$88
    341  5000 ????
    342  5000 ????	       00 86	   _86	      =	$86
    343  5000 ????
    344  5000 ????	       00 84	   _84	      =	$84
    345  5000 ????
    346  5000 ????	       00 82	   _82	      =	$82
    347  5000 ????
    348  5000 ????	       00 80	   _80	      =	$80
    349  5000 ????
    350  5000 ????	       00 7e	   _7E	      =	$7E
    351  5000 ????
    352  5000 ????	       00 7c	   _7C	      =	$7C
    353  5000 ????
    354  5000 ????	       00 7a	   _7A	      =	$7A
    355  5000 ????
    356  5000 ????	       00 78	   _78	      =	$78
    357  5000 ????
    358  5000 ????	       00 76	   _76	      =	$76
    359  5000 ????
    360  5000 ????	       00 74	   _74	      =	$74
    361  5000 ????
    362  5000 ????	       00 72	   _72	      =	$72
    363  5000 ????
    364  5000 ????	       00 70	   _70	      =	$70
    365  5000 ????
    366  5000 ????	       00 6e	   _6E	      =	$6E
    367  5000 ????
    368  5000 ????	       00 6c	   _6C	      =	$6C
    369  5000 ????
    370  5000 ????	       00 6a	   _6A	      =	$6A
    371  5000 ????
    372  5000 ????	       00 68	   _68	      =	$68
    373  5000 ????
    374  5000 ????	       00 66	   _66	      =	$66
    375  5000 ????
    376  5000 ????	       00 64	   _64	      =	$64
    377  5000 ????
    378  5000 ????	       00 62	   _62	      =	$62
    379  5000 ????
    380  5000 ????	       00 60	   _60	      =	$60
    381  5000 ????
    382  5000 ????	       00 5e	   _5E	      =	$5E
    383  5000 ????
    384  5000 ????	       00 5c	   _5C	      =	$5C
    385  5000 ????
    386  5000 ????	       00 5a	   _5A	      =	$5A
    387  5000 ????
    388  5000 ????	       00 58	   _58	      =	$58
    389  5000 ????
    390  5000 ????	       00 56	   _56	      =	$56
    391  5000 ????
    392  5000 ????	       00 54	   _54	      =	$54
    393  5000 ????
    394  5000 ????	       00 52	   _52	      =	$52
    395  5000 ????
    396  5000 ????	       00 50	   _50	      =	$50
    397  5000 ????
    398  5000 ????	       00 4e	   _4E	      =	$4E
    399  5000 ????
    400  5000 ????	       00 4c	   _4C	      =	$4C
    401  5000 ????
    402  5000 ????	       00 4a	   _4A	      =	$4A
    403  5000 ????
    404  5000 ????	       00 48	   _48	      =	$48
    405  5000 ????
    406  5000 ????	       00 46	   _46	      =	$46
    407  5000 ????
    408  5000 ????	       00 44	   _44	      =	$44
    409  5000 ????
    410  5000 ????	       00 42	   _42	      =	$42
    411  5000 ????
    412  5000 ????	       00 40	   _40	      =	$40
    413  5000 ????
    414  5000 ????	       00 3e	   _3E	      =	$3E
    415  5000 ????
    416  5000 ????	       00 3c	   _3C	      =	$3C
    417  5000 ????
    418  5000 ????	       00 3a	   _3A	      =	$3A
    419  5000 ????
    420  5000 ????	       00 38	   _38	      =	$38
    421  5000 ????
    422  5000 ????	       00 36	   _36	      =	$36
    423  5000 ????
    424  5000 ????	       00 34	   _34	      =	$34
    425  5000 ????
    426  5000 ????	       00 32	   _32	      =	$32
    427  5000 ????
    428  5000 ????	       00 30	   _30	      =	$30
    429  5000 ????
    430  5000 ????	       00 2e	   _2E	      =	$2E
    431  5000 ????
    432  5000 ????	       00 2c	   _2C	      =	$2C
    433  5000 ????
    434  5000 ????	       00 2a	   _2A	      =	$2A
    435  5000 ????
    436  5000 ????	       00 28	   _28	      =	$28
    437  5000 ????
    438  5000 ????	       00 26	   _26	      =	$26
    439  5000 ????
    440  5000 ????	       00 24	   _24	      =	$24
    441  5000 ????
    442  5000 ????	       00 22	   _22	      =	$22
    443  5000 ????
    444  5000 ????	       00 20	   _20	      =	$20
    445  5000 ????
    446  5000 ????	       00 1e	   _1E	      =	$1E
    447  5000 ????
    448  5000 ????	       00 1c	   _1C	      =	$1C
    449  5000 ????
    450  5000 ????	       00 1a	   _1A	      =	$1A
    451  5000 ????
    452  5000 ????	       00 18	   _18	      =	$18
    453  5000 ????
    454  5000 ????	       00 16	   _16	      =	$16
    455  5000 ????
    456  5000 ????	       00 14	   _14	      =	$14
    457  5000 ????
    458  5000 ????	       00 12	   _12	      =	$12
    459  5000 ????
    460  5000 ????	       00 10	   _10	      =	$10
    461  5000 ????
    462  5000 ????	       00 0e	   _0E	      =	$0E
    463  5000 ????
    464  5000 ????	       00 0c	   _0C	      =	$0C
    465  5000 ????
    466  5000 ????	       00 0a	   _0A	      =	$0A
    467  5000 ????
    468  5000 ????	       00 08	   _08	      =	$08
    469  5000 ????
    470  5000 ????	       00 06	   _06	      =	$06
    471  5000 ????
    472  5000 ????	       00 04	   _04	      =	$04
    473  5000 ????
    474  5000 ????	       00 02	   _02	      =	$02
    475  5000 ????
    476  5000 ????	       00 00	   _00	      =	$00
    477  5000 ????
    478  5000 ????	       00 09	   req_load_menu =	9
    479  5000 ????
    480  5000 ????	       00 08	   req_safe_point =	8
    481  5000 ????
    482  5000 ????	       00 07	   req_level_reset =	7
    483  5000 ????
    484  5000 ????	       00 06	   req_move_down =	6
    485  5000 ????
    486  5000 ????	       00 05	   req_move_right =	5
    487  5000 ????
    488  5000 ????	       00 04	   req_move_up =	4
    489  5000 ????
    490  5000 ????	       00 03	   req_move_left =	3
    491  5000 ????
    492  5000 ????	       00 02	   req_game_over =	2
    493  5000 ????
    494  5000 ????	       00 01	   req_level_up =	1
    495  5000 ????
    496  5000 ????	       00 00	   req_load   =	0
    497  5000 ????
    498  5000 ????	       00 03	   game_state_heli_explosion =	3
    499  5000 ????
    500  5000 ????	       00 02	   game_state_level_finished =	2
    501  5000 ????
    502  5000 ????	       00 01	   game_state_game_over =	1
    503  5000 ????
    504  5000 ????	       00 00	   game_state_run =	0
    505  5000 ????
    506  5000 ????	       00 06	   response_menu_size =	6
    507  5000 ????
    508  5000 ????	       00 1e	   response_size_minus_1 =	30
    509  5000 ????
    510  5000 ????	       00 94	   _M_Edge_Right =	148
    511  5000 ????
    512  5000 ????	       00 0e	   _M_Edge_Left =	14
    513  5000 ????
    514  5000 ????	       00 58	   _M_Edge_Bottom =	88
    515  5000 ????
    516  5000 ????	       00 02	   _M_Edge_Top =	2
    517  5000 ????
    518  5000 ????	       00 4c	   player_max_y =	76
    519  5000 ????
    520  5000 ????	       00 02	   player_min_y =	2
    521  5000 ????
    522  5000 ????	       00 86	   player_max_x =	134
    523  5000 ????
    524  5000 ????	       00 0a	   player_min_x =	10
    525  5000 ????
    526  5000 ????	       00 08	   textbkcolor =	$08
    527  5000 ????
    528  5000 ????	       00 08	   scorebkcolor =	$08
    529  5000 ????
    530  5000 ????	       00 01	   pfscore    =	1
    531  5000 ????
    532  5000 ????	       00 04	   pfres      =	4
    533  5000 ????
    534  5000 ????	       00 01	   superchip  =	1
    535  5000 ????	       00 03	   bs_mask    =	3
    536  5000 ????	       00 10	   bankswitch =	16
    537  5000 ????	       1f f6	   bankswitch_hotspot =	$1FF6
    538  5000 ????	       00 01	   PFcolors   =	1
    539  5000 ????	       00 01	   player1colors =	1
------- FILE 2600basic.h
      7  5000 ????
      8  5000 ????	       00 80	   player0x   =	$80
      9  5000 ????	       00 81	   player1x   =	$81
     10  5000 ????	       00 82	   missile0x  =	$82
     11  5000 ????	       00 83	   missile1x  =	$83
     12  5000 ????	       00 84	   ballx      =	$84
     13  5000 ????
     14  5000 ????	       00 85	   objecty    =	$85
     15  5000 ????	       00 85	   player0y   =	$85
     16  5000 ????	       00 86	   player1y   =	$86
     17  5000 ????	       00 87	   missile1height =	$87
     18  5000 ????	       00 88	   missile1y  =	$88
     19  5000 ????	       00 89	   bally      =	$89
     20  5000 ????
     21  5000 ????	       00 87	   player1color =	$87	; replaces missile 1
     22  5000 ????
     23  5000 ????	       00 8a	   player0pointer =	$8A	;uses $8A-$8B
     24  5000 ????	       00 8a	   player0pointerlo =	$8A
     25  5000 ????	       00 8b	   player0pointerhi =	$8B
     26  5000 ????	       00 8c	   player1pointer =	$8C	; $8C-$8D
     27  5000 ????	       00 8c	   player1pointerlo =	$8C
     28  5000 ????	       00 8d	   player1pointerhi =	$8D
     29  5000 ????
     30  5000 ????	       00 8e	   player0height =	$8E
     31  5000 ????	       00 8f	   player1height =	$8F
     32  5000 ????	       00 90	   missile0height =	$90
     33  5000 ????	       00 91	   missile0y  =	$91
     34  5000 ????	       00 92	   ballheight =	$92
     35  5000 ????
     36  5000 ????	       00 90	   currentpaddle =	$90	; replaces missile 0 (and can't be used with playercolor)
     37  5000 ????	       00 91	   paddle     =	$91	; replaces missile 0
     38  5000 ????	       00 82	   player0colorstore =	$82	; replaces missile 0
     39  5000 ????	       00 90	   player0color =	$90	; replaces missile 0
     40  5000 ????
     41  5000 ????	       00 93	   score      =	$93	; $93-$95
     42  5000 ????	       00 96	   scorepointers =	$96	; $96-$9B = 6 bytes
     43  5000 ????	       00 9c	   temp1      =	$9C	;used by kernel.  can be used in program too, but
     44  5000 ????	       00 9d	   temp2      =	$9D	;are obliterated when drawscreen is called.
     45  5000 ????	       00 9e	   temp3      =	$9E
     46  5000 ????	       00 9f	   temp4      =	$9F
     47  5000 ????	       00 a0	   temp5      =	$A0
     48  5000 ????	       00 a1	   temp6      =	$A1
     49  5000 ????
     50  5000 ????	       00 a2	   rand       =	$A2
     51  5000 ????	       00 a3	   scorecolor =	$A3
     52  5000 ????
     53  5000 ????	       00 a4	   var0       =	$A4
     54  5000 ????	       00 a5	   var1       =	$A5
     55  5000 ????	       00 a6	   var2       =	$A6
     56  5000 ????	       00 a7	   var3       =	$A7
     57  5000 ????	       00 a8	   var4       =	$A8
     58  5000 ????	       00 a9	   var5       =	$A9
     59  5000 ????	       00 aa	   var6       =	$AA
     60  5000 ????	       00 ab	   var7       =	$AB
     61  5000 ????	       00 ac	   var8       =	$AC
     62  5000 ????	       00 ad	   var9       =	$AD
     63  5000 ????	       00 ae	   var10      =	$AE
     64  5000 ????	       00 af	   var11      =	$AF
     65  5000 ????	       00 b0	   var12      =	$B0
     66  5000 ????	       00 b1	   var13      =	$B1
     67  5000 ????	       00 b2	   var14      =	$B2
     68  5000 ????	       00 b3	   var15      =	$B3
     69  5000 ????	       00 b4	   var16      =	$B4
     70  5000 ????	       00 b5	   var17      =	$B5
     71  5000 ????	       00 b6	   var18      =	$B6
     72  5000 ????	       00 b7	   var19      =	$B7
     73  5000 ????	       00 b8	   var20      =	$B8
     74  5000 ????	       00 b9	   var21      =	$B9
     75  5000 ????	       00 ba	   var22      =	$BA
     76  5000 ????	       00 bb	   var23      =	$BB
     77  5000 ????	       00 bc	   var24      =	$BC
     78  5000 ????	       00 bd	   var25      =	$BD
     79  5000 ????	       00 be	   var26      =	$BE
     80  5000 ????	       00 bf	   var27      =	$BF
     81  5000 ????	       00 c0	   var28      =	$C0
     82  5000 ????	       00 c1	   var29      =	$C1
     83  5000 ????	       00 c2	   var30      =	$C2
     84  5000 ????	       00 c3	   var31      =	$C3
     85  5000 ????	       00 c4	   var32      =	$C4
     86  5000 ????	       00 c5	   var33      =	$C5
     87  5000 ????	       00 c6	   var34      =	$C6
     88  5000 ????	       00 c7	   var35      =	$C7
     89  5000 ????	       00 c8	   var36      =	$C8
     90  5000 ????	       00 c9	   var37      =	$C9
     91  5000 ????	       00 ca	   var38      =	$CA
     92  5000 ????	       00 cb	   var39      =	$CB
     93  5000 ????	       00 cc	   var40      =	$CC
     94  5000 ????	       00 cd	   var41      =	$CD
     95  5000 ????	       00 ce	   var42      =	$CE
     96  5000 ????	       00 cf	   var43      =	$CF
     97  5000 ????	       00 d0	   var44      =	$D0
     98  5000 ????	       00 d1	   var45      =	$D1
     99  5000 ????	       00 d2	   var46      =	$D2
    100  5000 ????	       00 d3	   var47      =	$D3
    101  5000 ????
    102  5000 ????	       00 d4	   A	      =	$d4
    103  5000 ????	       00 d4	   a	      =	$d4
    104  5000 ????	       00 d5	   B	      =	$d5
    105  5000 ????	       00 d5	   b	      =	$d5
    106  5000 ????	       00 d6	   C	      =	$d6
    107  5000 ????	       00 d6	   c	      =	$d6
    108  5000 ????	       00 d7	   D	      =	$d7
    109  5000 ????	       00 d7	   d	      =	$d7
    110  5000 ????	       00 d8	   E	      =	$d8
    111  5000 ????	       00 d8	   e	      =	$d8
    112  5000 ????	       00 d9	   F	      =	$d9
    113  5000 ????	       00 d9	   f	      =	$d9
    114  5000 ????	       00 da	   G	      =	$da
    115  5000 ????	       00 da	   g	      =	$da
    116  5000 ????	       00 db	   H	      =	$db
    117  5000 ????	       00 db	   h	      =	$db
    118  5000 ????	       00 dc	   I	      =	$dc
    119  5000 ????	       00 dc	   i	      =	$dc
    120  5000 ????	       00 dd	   J	      =	$dd
    121  5000 ????	       00 dd	   j	      =	$dd
    122  5000 ????	       00 de	   K	      =	$de
    123  5000 ????	       00 de	   k	      =	$de
    124  5000 ????	       00 df	   L	      =	$df
    125  5000 ????	       00 df	   l	      =	$df
    126  5000 ????	       00 e0	   M	      =	$e0
    127  5000 ????	       00 e0	   m	      =	$e0
    128  5000 ????	       00 e1	   N	      =	$e1
    129  5000 ????	       00 e1	   n	      =	$e1
    130  5000 ????	       00 e2	   O	      =	$e2
    131  5000 ????	       00 e2	   o	      =	$e2
    132  5000 ????	       00 e3	   P	      =	$e3
    133  5000 ????	       00 e3	   p	      =	$e3
    134  5000 ????	       00 e4	   Q	      =	$e4
    135  5000 ????	       00 e4	   q	      =	$e4
    136  5000 ????	       00 e5	   R	      =	$e5
    137  5000 ????	       00 e5	   r	      =	$e5
    138  5000 ????	       00 e6	   S	      =	$e6
    139  5000 ????	       00 e6	   s	      =	$e6
    140  5000 ????	       00 e7	   T	      =	$e7
    141  5000 ????	       00 e7	   t	      =	$e7
    142  5000 ????	       00 e8	   U	      =	$e8
    143  5000 ????	       00 e8	   u	      =	$e8
    144  5000 ????	       00 e9	   V	      =	$e9
    145  5000 ????	       00 e9	   v	      =	$e9
    146  5000 ????	       00 ea	   W	      =	$ea
    147  5000 ????	       00 ea	   w	      =	$ea
    148  5000 ????	       00 eb	   X	      =	$eb
    149  5000 ????	       00 eb	   x	      =	$eb
    150  5000 ????	       00 ec	   Y	      =	$ec
    151  5000 ????	       00 ec	   y	      =	$ec
    152  5000 ????	       00 ed	   Z	      =	$ed
    153  5000 ????	       00 ed	   z	      =	$ed
    154  5000 ????
    155  5000 ????	       00 ee	   temp7      =	$ee	; This is used to aid in bankswitching
    156  5000 ????	       00 ef	   playfieldpos =	$ef
    157  5000 ????
    158  5000 ????						; available for other uses, or if unused, provide more stack space
    159  5000 ????
    160  5000 ????	       00 f0	   aux1       =	$f0
    161  5000 ????	       00 f1	   aux2       =	$f1
    162  5000 ????	       00 f2	   aux3       =	$f2
    163  5000 ????	       00 f3	   aux4       =	$f3
    164  5000 ????	       00 f4	   aux5       =	$f4
    165  5000 ????	       00 f5	   aux6       =	$f5
    166  5000 ????
    167  5000 ????						; playfield color/height pointers
    168  5000 ????	       00 f0	   pfcolortable =	$f0	; and $d5
    169  5000 ????	       00 f0	   pfheighttable =	$f0	; and $d5
    170  5000 ????						; the above pointers are the same because if color and height are both used together,
    171  5000 ????						; they must used absolute indexed and cannot use pointers
    172  5000 ????
    173  5000 ????	       00 f2	   lifepointer =	$f2	; pointer to "lives" shape
    174  5000 ????						; upper 3 bits of $f2 contain the number of lives
    175  5000 ????	       00 f4	   lifecolor  =	$f4
    176  5000 ????	       00 f3	   lives      =	$f3	; # lives >> 5
    177  5000 ????	       00 f5	   statusbarlength =	$f5	; only uses upper 5 bits; other bits free
    178  5000 ????
    179  5000 ????	       00 f2	   pfscore1   =	$f2	; optional playfield bytes in score
    180  5000 ????	       00 f3	   pfscore2   =	$f3
    181  5000 ????	       00 f4	   pfscorecolor =	$f4
    182  5000 ????
    183  5000 ????	       00 f6	   stack1     =	$f6
    184  5000 ????	       00 f7	   stack2     =	$f7
    185  5000 ????	       00 f8	   stack3     =	$f8
    186  5000 ????	       00 f9	   stack4     =	$f9
    187  5000 ????						; the stack bytes above may be used in the kernel
    188  5000 ????						; stack = F6-F7, F8-F9, FA-FB, FC-FD, FE-FF
    189  5000 ????
    190  5000 ????				      MAC	return
    191  5000 ????				      ifnconst	bankswitch
    192  5000 ????				      rts
    193  5000 ????				      else
    194  5000 ????				      jmp	BS_return
    195  5000 ????				      endif
    196  5000 ????				      ENDM		; auto-return from either a regular or bankswitched module
    197  5000 ????
    198  5000 ????				      ifconst	superchip
    199  5000 ????	       10 d0	   playfieldbase =	$10D0
------- FILE superchip.h LEVEL 3 PASS 3
      0  5000 ????				      include	superchip.h
      1  5000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  5000 ????
      3  5000 ????	       f0 00	   write_RAM  =	$F000
      4  5000 ????	       f0 00	   wRAM       =	$F000
      5  5000 ????	       f0 00	   w000       =	$F000
      6  5000 ????	       f0 01	   w001       =	$F001
      7  5000 ????	       f0 02	   w002       =	$F002
      8  5000 ????	       f0 03	   w003       =	$F003
      9  5000 ????	       f0 04	   w004       =	$F004
     10  5000 ????	       f0 05	   w005       =	$F005
     11  5000 ????	       f0 06	   w006       =	$F006
     12  5000 ????	       f0 07	   w007       =	$F007
     13  5000 ????	       f0 08	   w008       =	$F008
     14  5000 ????	       f0 09	   w009       =	$F009
     15  5000 ????	       f0 0a	   w010       =	$F00A
     16  5000 ????	       f0 0b	   w011       =	$F00B
     17  5000 ????	       f0 0c	   w012       =	$F00C
     18  5000 ????	       f0 0d	   w013       =	$F00D
     19  5000 ????	       f0 0e	   w014       =	$F00E
     20  5000 ????	       f0 0f	   w015       =	$F00F
     21  5000 ????	       f0 10	   w016       =	$F010
     22  5000 ????	       f0 11	   w017       =	$F011
     23  5000 ????	       f0 12	   w018       =	$F012
     24  5000 ????	       f0 13	   w019       =	$F013
     25  5000 ????	       f0 14	   w020       =	$F014
     26  5000 ????	       f0 15	   w021       =	$F015
     27  5000 ????	       f0 16	   w022       =	$F016
     28  5000 ????	       f0 17	   w023       =	$F017
     29  5000 ????	       f0 18	   w024       =	$F018
     30  5000 ????	       f0 19	   w025       =	$F019
     31  5000 ????	       f0 1a	   w026       =	$F01A
     32  5000 ????	       f0 1b	   w027       =	$F01B
     33  5000 ????	       f0 1c	   w028       =	$F01C
     34  5000 ????	       f0 1d	   w029       =	$F01D
     35  5000 ????	       f0 1e	   w030       =	$F01E
     36  5000 ????	       f0 1f	   w031       =	$F01F
     37  5000 ????	       f0 20	   w032       =	$F020
     38  5000 ????	       f0 21	   w033       =	$F021
     39  5000 ????	       f0 22	   w034       =	$F022
     40  5000 ????	       f0 23	   w035       =	$F023
     41  5000 ????	       f0 24	   w036       =	$F024
     42  5000 ????	       f0 25	   w037       =	$F025
     43  5000 ????	       f0 26	   w038       =	$F026
     44  5000 ????	       f0 27	   w039       =	$F027
     45  5000 ????	       f0 28	   w040       =	$F028
     46  5000 ????	       f0 29	   w041       =	$F029
     47  5000 ????	       f0 2a	   w042       =	$F02A
     48  5000 ????	       f0 2b	   w043       =	$F02B
     49  5000 ????	       f0 2c	   w044       =	$F02C
     50  5000 ????	       f0 2d	   w045       =	$F02D
     51  5000 ????	       f0 2e	   w046       =	$F02E
     52  5000 ????	       f0 2f	   w047       =	$F02F
     53  5000 ????	       f0 30	   w048       =	$F030
     54  5000 ????	       f0 31	   w049       =	$F031
     55  5000 ????	       f0 32	   w050       =	$F032
     56  5000 ????	       f0 33	   w051       =	$F033
     57  5000 ????	       f0 34	   w052       =	$F034
     58  5000 ????	       f0 35	   w053       =	$F035
     59  5000 ????	       f0 36	   w054       =	$F036
     60  5000 ????	       f0 37	   w055       =	$F037
     61  5000 ????	       f0 38	   w056       =	$F038
     62  5000 ????	       f0 39	   w057       =	$F039
     63  5000 ????	       f0 3a	   w058       =	$F03A
     64  5000 ????	       f0 3b	   w059       =	$F03B
     65  5000 ????	       f0 3c	   w060       =	$F03C
     66  5000 ????	       f0 3d	   w061       =	$F03D
     67  5000 ????	       f0 3e	   w062       =	$F03E
     68  5000 ????	       f0 3f	   w063       =	$F03F
     69  5000 ????	       f0 40	   w064       =	$F040
     70  5000 ????	       f0 41	   w065       =	$F041
     71  5000 ????	       f0 42	   w066       =	$F042
     72  5000 ????	       f0 43	   w067       =	$F043
     73  5000 ????	       f0 44	   w068       =	$F044
     74  5000 ????	       f0 45	   w069       =	$F045
     75  5000 ????	       f0 46	   w070       =	$F046
     76  5000 ????	       f0 47	   w071       =	$F047
     77  5000 ????	       f0 48	   w072       =	$F048
     78  5000 ????	       f0 49	   w073       =	$F049
     79  5000 ????	       f0 4a	   w074       =	$F04A
     80  5000 ????	       f0 4b	   w075       =	$F04B
     81  5000 ????	       f0 4c	   w076       =	$F04C
     82  5000 ????	       f0 4d	   w077       =	$F04D
     83  5000 ????	       f0 4e	   w078       =	$F04E
     84  5000 ????	       f0 4f	   w079       =	$F04F
     85  5000 ????	       f0 50	   w080       =	$F050
     86  5000 ????	       f0 51	   w081       =	$F051
     87  5000 ????	       f0 52	   w082       =	$F052
     88  5000 ????	       f0 53	   w083       =	$F053
     89  5000 ????	       f0 54	   w084       =	$F054
     90  5000 ????	       f0 55	   w085       =	$F055
     91  5000 ????	       f0 56	   w086       =	$F056
     92  5000 ????	       f0 57	   w087       =	$F057
     93  5000 ????	       f0 58	   w088       =	$F058
     94  5000 ????	       f0 59	   w089       =	$F059
     95  5000 ????	       f0 5a	   w090       =	$F05A
     96  5000 ????	       f0 5b	   w091       =	$F05B
     97  5000 ????	       f0 5c	   w092       =	$F05C
     98  5000 ????	       f0 5d	   w093       =	$F05D
     99  5000 ????	       f0 5e	   w094       =	$F05E
    100  5000 ????	       f0 5f	   w095       =	$F05F
    101  5000 ????	       f0 60	   w096       =	$F060
    102  5000 ????	       f0 61	   w097       =	$F061
    103  5000 ????	       f0 62	   w098       =	$F062
    104  5000 ????	       f0 63	   w099       =	$F063
    105  5000 ????	       f0 64	   w100       =	$F064
    106  5000 ????	       f0 65	   w101       =	$F065
    107  5000 ????	       f0 66	   w102       =	$F066
    108  5000 ????	       f0 67	   w103       =	$F067
    109  5000 ????	       f0 68	   w104       =	$F068
    110  5000 ????	       f0 69	   w105       =	$F069
    111  5000 ????	       f0 6a	   w106       =	$F06A
    112  5000 ????	       f0 6b	   w107       =	$F06B
    113  5000 ????	       f0 6c	   w108       =	$F06C
    114  5000 ????	       f0 6d	   w109       =	$F06D
    115  5000 ????	       f0 6e	   w110       =	$F06E
    116  5000 ????	       f0 6f	   w111       =	$F06F
    117  5000 ????	       f0 70	   w112       =	$F070
    118  5000 ????	       f0 71	   w113       =	$F071
    119  5000 ????	       f0 72	   w114       =	$F072
    120  5000 ????	       f0 73	   w115       =	$F073
    121  5000 ????	       f0 74	   w116       =	$F074
    122  5000 ????	       f0 75	   w117       =	$F075
    123  5000 ????	       f0 76	   w118       =	$F076
    124  5000 ????	       f0 77	   w119       =	$F077
    125  5000 ????	       f0 78	   w120       =	$F078
    126  5000 ????	       f0 79	   w121       =	$F079
    127  5000 ????	       f0 7a	   w122       =	$F07A
    128  5000 ????	       f0 7b	   w123       =	$F07B
    129  5000 ????	       f0 7c	   w124       =	$F07C
    130  5000 ????	       f0 7d	   w125       =	$F07D
    131  5000 ????	       f0 7e	   w126       =	$F07E
    132  5000 ????	       f0 7f	   w127       =	$F07F
    133  5000 ????
    134  5000 ????	       f0 80	   read_RAM   =	$F080
    135  5000 ????	       f0 80	   rRAM       =	$F080
    136  5000 ????	       f0 80	   r000       =	$F080
    137  5000 ????	       f0 81	   r001       =	$F081
    138  5000 ????	       f0 82	   r002       =	$F082
    139  5000 ????	       f0 83	   r003       =	$F083
    140  5000 ????	       f0 84	   r004       =	$F084
    141  5000 ????	       f0 85	   r005       =	$F085
    142  5000 ????	       f0 86	   r006       =	$F086
    143  5000 ????	       f0 87	   r007       =	$F087
    144  5000 ????	       f0 88	   r008       =	$F088
    145  5000 ????	       f0 89	   r009       =	$F089
    146  5000 ????	       f0 8a	   r010       =	$F08A
    147  5000 ????	       f0 8b	   r011       =	$F08B
    148  5000 ????	       f0 8c	   r012       =	$F08C
    149  5000 ????	       f0 8d	   r013       =	$F08D
    150  5000 ????	       f0 8e	   r014       =	$F08E
    151  5000 ????	       f0 8f	   r015       =	$F08F
    152  5000 ????	       f0 90	   r016       =	$F090
    153  5000 ????	       f0 91	   r017       =	$F091
    154  5000 ????	       f0 92	   r018       =	$F092
    155  5000 ????	       f0 93	   r019       =	$F093
    156  5000 ????	       f0 94	   r020       =	$F094
    157  5000 ????	       f0 95	   r021       =	$F095
    158  5000 ????	       f0 96	   r022       =	$F096
    159  5000 ????	       f0 97	   r023       =	$F097
    160  5000 ????	       f0 98	   r024       =	$F098
    161  5000 ????	       f0 99	   r025       =	$F099
    162  5000 ????	       f0 9a	   r026       =	$F09A
    163  5000 ????	       f0 9b	   r027       =	$F09B
    164  5000 ????	       f0 9c	   r028       =	$F09C
    165  5000 ????	       f0 9d	   r029       =	$F09D
    166  5000 ????	       f0 9e	   r030       =	$F09E
    167  5000 ????	       f0 9f	   r031       =	$F09F
    168  5000 ????	       f0 a0	   r032       =	$F0A0
    169  5000 ????	       f0 a1	   r033       =	$F0A1
    170  5000 ????	       f0 a2	   r034       =	$F0A2
    171  5000 ????	       f0 a3	   r035       =	$F0A3
    172  5000 ????	       f0 a4	   r036       =	$F0A4
    173  5000 ????	       f0 a5	   r037       =	$F0A5
    174  5000 ????	       f0 a6	   r038       =	$F0A6
    175  5000 ????	       f0 a7	   r039       =	$F0A7
    176  5000 ????	       f0 a8	   r040       =	$F0A8
    177  5000 ????	       f0 a9	   r041       =	$F0A9
    178  5000 ????	       f0 aa	   r042       =	$F0AA
    179  5000 ????	       f0 ab	   r043       =	$F0AB
    180  5000 ????	       f0 ac	   r044       =	$F0AC
    181  5000 ????	       f0 ad	   r045       =	$F0AD
    182  5000 ????	       f0 ae	   r046       =	$F0AE
    183  5000 ????	       f0 af	   r047       =	$F0AF
    184  5000 ????	       f0 b0	   r048       =	$F0B0
    185  5000 ????	       f0 b1	   r049       =	$F0B1
    186  5000 ????	       f0 b2	   r050       =	$F0B2
    187  5000 ????	       f0 b3	   r051       =	$F0B3
    188  5000 ????	       f0 b4	   r052       =	$F0B4
    189  5000 ????	       f0 b5	   r053       =	$F0B5
    190  5000 ????	       f0 b6	   r054       =	$F0B6
    191  5000 ????	       f0 b7	   r055       =	$F0B7
    192  5000 ????	       f0 b8	   r056       =	$F0B8
    193  5000 ????	       f0 b9	   r057       =	$F0B9
    194  5000 ????	       f0 ba	   r058       =	$F0BA
    195  5000 ????	       f0 bb	   r059       =	$F0BB
    196  5000 ????	       f0 bc	   r060       =	$F0BC
    197  5000 ????	       f0 bd	   r061       =	$F0BD
    198  5000 ????	       f0 be	   r062       =	$F0BE
    199  5000 ????	       f0 bf	   r063       =	$F0BF
    200  5000 ????	       f0 c0	   r064       =	$F0C0
    201  5000 ????	       f0 c1	   r065       =	$F0C1
    202  5000 ????	       f0 c2	   r066       =	$F0C2
    203  5000 ????	       f0 c3	   r067       =	$F0C3
    204  5000 ????	       f0 c4	   r068       =	$F0C4
    205  5000 ????	       f0 c5	   r069       =	$F0C5
    206  5000 ????	       f0 c6	   r070       =	$F0C6
    207  5000 ????	       f0 c7	   r071       =	$F0C7
    208  5000 ????	       f0 c8	   r072       =	$F0C8
    209  5000 ????	       f0 c9	   r073       =	$F0C9
    210  5000 ????	       f0 ca	   r074       =	$F0CA
    211  5000 ????	       f0 cb	   r075       =	$F0CB
    212  5000 ????	       f0 cc	   r076       =	$F0CC
    213  5000 ????	       f0 cd	   r077       =	$F0CD
    214  5000 ????	       f0 ce	   r078       =	$F0CE
    215  5000 ????	       f0 cf	   r079       =	$F0CF
    216  5000 ????	       f0 d0	   r080       =	$F0D0
    217  5000 ????	       f0 d1	   r081       =	$F0D1
    218  5000 ????	       f0 d2	   r082       =	$F0D2
    219  5000 ????	       f0 d3	   r083       =	$F0D3
    220  5000 ????	       f0 d4	   r084       =	$F0D4
    221  5000 ????	       f0 d5	   r085       =	$F0D5
    222  5000 ????	       f0 d6	   r086       =	$F0D6
    223  5000 ????	       f0 d7	   r087       =	$F0D7
    224  5000 ????	       f0 d8	   r088       =	$F0D8
    225  5000 ????	       f0 d9	   r089       =	$F0D9
    226  5000 ????	       f0 da	   r090       =	$F0DA
    227  5000 ????	       f0 db	   r091       =	$F0DB
    228  5000 ????	       f0 dc	   r092       =	$F0DC
    229  5000 ????	       f0 dd	   r093       =	$F0DD
    230  5000 ????	       f0 de	   r094       =	$F0DE
    231  5000 ????	       f0 df	   r095       =	$F0DF
    232  5000 ????	       f0 e0	   r096       =	$F0E0
    233  5000 ????	       f0 e1	   r097       =	$F0E1
    234  5000 ????	       f0 e2	   r098       =	$F0E2
    235  5000 ????	       f0 e3	   r099       =	$F0E3
    236  5000 ????	       f0 e4	   r100       =	$F0E4
    237  5000 ????	       f0 e5	   r101       =	$F0E5
    238  5000 ????	       f0 e6	   r102       =	$F0E6
    239  5000 ????	       f0 e7	   r103       =	$F0E7
    240  5000 ????	       f0 e8	   r104       =	$F0E8
    241  5000 ????	       f0 e9	   r105       =	$F0E9
    242  5000 ????	       f0 ea	   r106       =	$F0EA
    243  5000 ????	       f0 eb	   r107       =	$F0EB
    244  5000 ????	       f0 ec	   r108       =	$F0EC
    245  5000 ????	       f0 ed	   r109       =	$F0ED
    246  5000 ????	       f0 ee	   r110       =	$F0EE
    247  5000 ????	       f0 ef	   r111       =	$F0EF
    248  5000 ????	       f0 f0	   r112       =	$F0F0
    249  5000 ????	       f0 f1	   r113       =	$F0F1
    250  5000 ????	       f0 f2	   r114       =	$F0F2
    251  5000 ????	       f0 f3	   r115       =	$F0F3
    252  5000 ????	       f0 f4	   r116       =	$F0F4
    253  5000 ????	       f0 f5	   r117       =	$F0F5
    254  5000 ????	       f0 f6	   r118       =	$F0F6
    255  5000 ????	       f0 f7	   r119       =	$F0F7
    256  5000 ????	       f0 f8	   r120       =	$F0F8
    257  5000 ????	       f0 f9	   r121       =	$F0F9
    258  5000 ????	       f0 fa	   r122       =	$F0FA
    259  5000 ????	       f0 fb	   r123       =	$F0FB
    260  5000 ????	       f0 fc	   r124       =	$F0FC
    261  5000 ????	       f0 fd	   r125       =	$F0FD
    262  5000 ????	       f0 fe	   r126       =	$F0FE
    263  5000 ????	       f0 ff	   r127       =	$F0FF
------- FILE 2600basic.h
    201  5000 ????			  -	      else
    202  5000 ????			  -playfieldbase =	$A4
    203  5000 ????				      endif
    204  5000 ????
    205  5000 ????				      ifnconst	pfhalfwidth
    206  5000 ????	       00 04	   pfwidth    =	4
    207  5000 ????	       00 0e	   PF1L       =	PF1
    208  5000 ????	       00 0f	   PF2L       =	PF2
    209  5000 ????	       00 0e	   PF1R       =	PF1
    210  5000 ????	       00 0f	   PF2R       =	PF2
    211  5000 ????	       00 00	   pfadjust   =	0
    212  5000 ????			  -	      else
    213  5000 ????			  -pfwidth    =	2
    214  5000 ????			  -	      ifconst	pfcenter
    215  5000 ????			  -PF1L       =	$3F	; no effect
    216  5000 ????			  -PF2L       =	PF2
    217  5000 ????			  -PF1R       =	$3F
    218  5000 ????			  -PF2R       =	PF2	; no effect
    219  5000 ????			  -pfadjust   =	1
    220  5000 ????			  -	      else
    221  5000 ????			  -PF1L       =	PF1
    222  5000 ????			  -PF2L       =	PF2
    223  5000 ????			  -PF1R       =	$3F	; no effect
    224  5000 ????			  -PF2R       =	$3F	; no effect
    225  5000 ????			  -pfadjust   =	0
    226  5000 ????			  -	      endif
    227  5000 ????				      endif
    228  5000 ????
    229  5000 ????						; define playfield start based on height
    230  5000 ????			  -	      ifnconst	pfres
    231  5000 ????			  -playfield  =	playfieldbase
    232  5000 ????				      else
    233  5000 ????	       10 f0	   playfield  =	playfieldbase-(pfres-12*(4/pfwidth))*pfwidth
    234  5000 ????				      endif
------- FILE d:\Firmaplus\Firmaplus_intern\Atari\PlusROM\Projekte-batariBasic\CaveApocalypse\C.A.V.E. Apocalypse.bas.asm
------- FILE 2600basic_variable_redefs.h LEVEL 2 PASS 3
      0  5000 ????				      include	"2600basic_variable_redefs.h"
      1  5000 ????						; This file contains variable mapping and other information for the current project.
      2  5000 ????
      3  5000 ????	       00 fc	   text_strings_length =	.skipL0689-text_strings
      4  5000 ????
      5  5000 ????	       00 23	   bscode_length =	35
      6  5000 ????	       00 11	   _SD_Helicopter_Explosion_length =	.skipL0650-_SD_Helicopter_Explosion
      7  5000 ????
      8  5000 ????	       00 1d	   _SD_Touch_Enemy_length =	.skipL0649-_SD_Touch_Enemy
      9  5000 ????
     10  5000 ????	       00 21	   _SD_Shoot_Enemy_length =	.skipL0648-_SD_Shoot_Enemy
     11  5000 ????
     12  5000 ????	       00 45	   _SD_Shoot_Miss_length =	.skipL0647-_SD_Shoot_Miss
     13  5000 ????
     14  5000 ????	       00 35	   _SD_Shot_Wall_length =	.skipL0646-_SD_Shot_Wall
     15  5000 ????
     16  5000 ????	       f0 5f	   w_Bit0_room_type_top =	w_BitOp_room_type
     17  5000 ????
     18  5000 ????	       f0 df	   r_Bit0_room_type_top =	r_BitOp_room_type
     19  5000 ????
     20  5000 ????	       f0 6f	   w_extra_wall_startpos_2_y =	w111
     21  5000 ????
     22  5000 ????	       f0 ef	   r_extra_wall_startpos_2_y =	r111
     23  5000 ????
     24  5000 ????	       f0 6e	   w_extra_wall_startpos_2_x =	w110
     25  5000 ????
     26  5000 ????	       f0 ee	   r_extra_wall_startpos_2_x =	r110
     27  5000 ????
     28  5000 ????	       f0 6d	   w_extra_wall_startpos_1_y =	w109
     29  5000 ????
     30  5000 ????	       f0 ed	   r_extra_wall_startpos_1_y =	r109
     31  5000 ????
     32  5000 ????	       f0 6c	   w_extra_wall_startpos_1_x =	w108
     33  5000 ????
     34  5000 ????	       f0 ec	   r_extra_wall_startpos_1_x =	r108
     35  5000 ????
     36  5000 ????	       f0 6b	   w_extra_wall_height =	w107
     37  5000 ????
     38  5000 ????	       f0 eb	   r_extra_wall_height =	r107
     39  5000 ????
     40  5000 ????	       f0 6a	   w_extra_wall_width =	w106
     41  5000 ????
     42  5000 ????	       f0 ea	   r_extra_wall_width =	r106
     43  5000 ????
     44  5000 ????	       f0 69	   w_extra_wall_type_and_range =	w105
     45  5000 ????
     46  5000 ????	       f0 e9	   r_extra_wall_type_and_range =	r105
     47  5000 ????
     48  5000 ????	       f0 68	   w_roommate_startpos_y =	w104
     49  5000 ????
     50  5000 ????	       f0 e8	   r_roommate_startpos_y =	r104
     51  5000 ????
     52  5000 ????	       f0 67	   w_roommate_startpos_x =	w103
     53  5000 ????
     54  5000 ????	       f0 e7	   r_roommate_startpos_x =	r103
     55  5000 ????
     56  5000 ????	       f0 66	   w_roommate_type_and_range =	w102
     57  5000 ????
     58  5000 ????	       f0 e6	   r_roommate_type_and_range =	r102
     59  5000 ????
     60  5000 ????	       f0 65	   w_room_color_bottom =	w101
     61  5000 ????
     62  5000 ????	       f0 e5	   r_room_color_bottom =	r101
     63  5000 ????
     64  5000 ????	       f0 64	   w_room_color_waste4 =	w100
     65  5000 ????
     66  5000 ????	       f0 e4	   r_room_color_waste3 =	r100
     67  5000 ????
     68  5000 ????	       f0 63	   w_room_color_waste2 =	w099
     69  5000 ????
     70  5000 ????	       f0 e3	   r_room_color_waste2 =	r099
     71  5000 ????
     72  5000 ????	       f0 62	   w_room_color_waste1 =	w098
     73  5000 ????
     74  5000 ????	       f0 e2	   r_room_color_waste1 =	r098
     75  5000 ????
     76  5000 ????	       f0 61	   w_room_color_middle =	w097
     77  5000 ????
     78  5000 ????	       f0 e1	   r_room_color_middle =	r097
     79  5000 ????
     80  5000 ????	       f0 60	   w_room_color_top =	w096
     81  5000 ????
     82  5000 ????	       f0 e0	   r_room_color_top =	r096
     83  5000 ????
     84  5000 ????	       f0 5f	   w_BitOp_room_type =	w095
     85  5000 ????
     86  5000 ????	       f0 df	   r_BitOp_room_type =	r095
     87  5000 ????
     88  5000 ????	       f0 5e	   w_men_to_rescue_in_this_level =	w094
     89  5000 ????
     90  5000 ????	       f0 de	   r_men_to_rescue_in_this_level =	r094
     91  5000 ????
     92  5000 ????	       f0 5d	   w_level_bonus_bcd_points =	w093
     93  5000 ????
     94  5000 ????	       f0 dd	   r_level_bonus_bcd_points =	r093
     95  5000 ????
     96  5000 ????	       f0 5d	   w_room_definition_start =	w093
     97  5000 ????
     98  5000 ????	       00 d3	   Game_Status =	var47
     99  5000 ????
    100  5000 ????	       00 b4	   next_shoot_rand =	var16
    101  5000 ????
    102  5000 ????	       00 b2	   enemy_game_state =	var14
    103  5000 ????
    104  5000 ????	       00 b1	   bonus_bcd_counter =	var13
    105  5000 ????
    106  5000 ????	       00 b0	   TextIndex  =	var12
    107  5000 ????
    108  5000 ????	       00 b0	   men_to_rescue =	var12
    109  5000 ????
    110  5000 ????	       00 af	   ball_shoot_y =	var11
    111  5000 ????
    112  5000 ????	       00 ae	   ball_shoot_x =	var10
    113  5000 ????
    114  5000 ????	       00 ad	   has_private_levels =	var9
    115  5000 ????
    116  5000 ????	       00 ac	   max_priv_level_bcd3 =	var8
    117  5000 ????
    118  5000 ????	       00 ab	   max_priv_level_bcd2 =	var7
    119  5000 ????
    120  5000 ????	       00 aa	   max_priv_level_bcd1 =	var6
    121  5000 ????
    122  5000 ????	       00 a9	   max_pub_level_bcd3 =	var5
    123  5000 ????
    124  5000 ????	       00 a8	   max_pub_level_bcd2 =	var4
    125  5000 ????
    126  5000 ????	       00 a7	   max_pub_level_bcd1 =	var3
    127  5000 ????
    128  5000 ????	       00 a6	   gamenumber =	var2
    129  5000 ????
    130  5000 ????	       00 a5	   new_room_player1x =	var1
    131  5000 ????
    132  5000 ????	       00 a4	   new_room_player1y =	var0
    133  5000 ????
    134  5000 ????	       00 ed	   rand16     =	z
    135  5000 ????
    136  5000 ????	       00 ec	   _Bit7_FireB_Restrainer =	y
    137  5000 ????
    138  5000 ????	       00 ec	   _Bit6_Flip_P1 =	y
    139  5000 ????
    140  5000 ????	       00 ec	   _Bit5_Request_Pending =	y
    141  5000 ????
    142  5000 ????	       00 ec	   _Bit4_Wall_Dir =	y
    143  5000 ????
    144  5000 ????	       00 ec	   _Bit3_Safe_Point_reached =	y
    145  5000 ????
    146  5000 ????	       00 ec	   _Bit2_roommate_Dir =	y
    147  5000 ????
    148  5000 ????	       00 ec	   _Bit0_Rotor_Sound_On =	y
    149  5000 ????
    150  5000 ????	       00 ec	   _Bit_Game_State =	y
    151  5000 ????
    152  5000 ????	       00 86	   P1y_position =	player1y
    153  5000 ????	       00 e9	   P1y_velocity =	v
    154  5000 ????	       00 91	   M0y_position =	missile0y
    155  5000 ????	       00 e6	   M0y_velocity =	s
    156  5000 ????	       00 af	   Bally_position =	ball_shoot_y
    157  5000 ????	       00 e3	   Bally_velocity =	p
    158  5000 ????	       00 e2	   _Ch1_Duration =	o
    159  5000 ????
    160  5000 ????	       00 e1	   Safe_Point_P1_y =	n
    161  5000 ????
    162  5000 ????	       00 e0	   Safe_Point_P1_x =	m
    163  5000 ????
    164  5000 ????	       00 df	   _Bit1_Safe_Point_P1_Flip =	l
    165  5000 ????
    166  5000 ????	       00 df	   _Bit0_New_Room_P1_Flip =	l
    167  5000 ????
    168  5000 ????	       00 df	   _BitOp_Flip_positions =	l
    169  5000 ????
    170  5000 ????	       00 de	   roommate_type =	k
    171  5000 ????
    172  5000 ????	       00 dd	   roommate_move_x =	j
    173  5000 ????
    174  5000 ????	       00 dc	   extra_wall_move_x =	i
    175  5000 ????
    176  5000 ????	       00 db	   _Ch0_Counter =	h
    177  5000 ????
    178  5000 ????	       00 da	   _Ch0_Duration =	g
    179  5000 ????
    180  5000 ????	       00 d9	   _Ch0_Sound =	f
    181  5000 ????
    182  5000 ????	       00 d8	   _Bit3_P1_Dir_Right =	e
    183  5000 ????
    184  5000 ????	       00 d8	   _Bit2_P1_Dir_Left =	e
    185  5000 ????
    186  5000 ????	       00 d8	   _Bit1_P1_Dir_Down =	e
    187  5000 ????
    188  5000 ????	       00 d8	   _Bit0_P1_Dir_Up =	e
    189  5000 ????
    190  5000 ????	       00 d8	   _BitOp_P1_Dir =	e
    191  5000 ????
    192  5000 ????	       00 d7	   _Bit3_M0_Dir_Right =	d
    193  5000 ????
    194  5000 ????	       00 d7	   _Bit2_M0_Dir_Left =	d
    195  5000 ????
    196  5000 ????	       00 d7	   _Bit1_M0_Dir_Down =	d
    197  5000 ????
    198  5000 ????	       00 d7	   _Bit0_M0_Dir_Up =	d
    199  5000 ????
    200  5000 ????	       00 d7	   _BitOp_M0_Dir =	d
    201  5000 ????
    202  5000 ????	       00 d6	   _Bit3_Ball_Shot_Dir_Right2 =	c
    203  5000 ????
    204  5000 ????	       00 d6	   _Bit2_Ball_Shot_Dir_Right1 =	c
    205  5000 ????
    206  5000 ????	       00 d6	   _Bit1_Ball_Shot_Dir_Left2 =	c
    207  5000 ????
    208  5000 ????	       00 d6	   _Bit0_Ball_Shot_Dir_Left1 =	c
    209  5000 ????
    210  5000 ????	       00 d6	   _BitOp_Ball_Shot_Dir =	c
    211  5000 ????
    212  5000 ????	       00 d5	   frame_counter =	b
    213  5000 ????
    214  5000 ????	       00 d4	   delay_counter =	a
    215  5000 ????
    216  5000 ????	       00 95	   _sc3       =	score + 2
    217  5000 ????
    218  5000 ????	       00 94	   _sc2       =	score + 1
    219  5000 ????
    220  5000 ????	       00 93	   _sc1       =	score
    221  5000 ????
    222  5000 ????	       00 fe	   _FE	      =	$FE
    223  5000 ????
    224  5000 ????	       00 fc	   _FC	      =	$FC
    225  5000 ????
    226  5000 ????	       00 fa	   _FA	      =	$FA
    227  5000 ????
    228  5000 ????	       00 f8	   _F8	      =	$F8
    229  5000 ????
    230  5000 ????	       00 f6	   _F6	      =	$F6
    231  5000 ????
    232  5000 ????	       00 f4	   _F4	      =	$F4
    233  5000 ????
    234  5000 ????	       00 f2	   _F2	      =	$F2
    235  5000 ????
    236  5000 ????	       00 f0	   _F0	      =	$F0
    237  5000 ????
    238  5000 ????	       00 ee	   _EE	      =	$EE
    239  5000 ????
    240  5000 ????	       00 ec	   _EC	      =	$EC
    241  5000 ????
    242  5000 ????	       00 ea	   _EA	      =	$EA
    243  5000 ????
    244  5000 ????	       00 e8	   _E8	      =	$E8
    245  5000 ????
    246  5000 ????	       00 e6	   _E6	      =	$E6
    247  5000 ????
    248  5000 ????	       00 e4	   _E4	      =	$E4
    249  5000 ????
    250  5000 ????	       00 e2	   _E2	      =	$E2
    251  5000 ????
    252  5000 ????	       00 e0	   _E0	      =	$E0
    253  5000 ????
    254  5000 ????	       00 de	   _DE	      =	$DE
    255  5000 ????
    256  5000 ????	       00 dc	   _DC	      =	$DC
    257  5000 ????
    258  5000 ????	       00 da	   _DA	      =	$DA
    259  5000 ????
    260  5000 ????	       00 d8	   _D8	      =	$D8
    261  5000 ????
    262  5000 ????	       00 d6	   _D6	      =	$D6
    263  5000 ????
    264  5000 ????	       00 d4	   _D4	      =	$D4
    265  5000 ????
    266  5000 ????	       00 d2	   _D2	      =	$D2
    267  5000 ????
    268  5000 ????	       00 d0	   _D0	      =	$D0
    269  5000 ????
    270  5000 ????	       00 ce	   _CE	      =	$CE
    271  5000 ????
    272  5000 ????	       00 cc	   _CC	      =	$CC
    273  5000 ????
    274  5000 ????	       00 ca	   _CA	      =	$CA
    275  5000 ????
    276  5000 ????	       00 c8	   _C8	      =	$C8
    277  5000 ????
    278  5000 ????	       00 c6	   _C6	      =	$C6
    279  5000 ????
    280  5000 ????	       00 c4	   _C4	      =	$C4
    281  5000 ????
    282  5000 ????	       00 c2	   _C2	      =	$C2
    283  5000 ????
    284  5000 ????	       00 c0	   _C0	      =	$C0
    285  5000 ????
    286  5000 ????	       00 be	   _BE	      =	$BE
    287  5000 ????
    288  5000 ????	       00 bc	   _BC	      =	$BC
    289  5000 ????
    290  5000 ????	       00 ba	   _BA	      =	$BA
    291  5000 ????
    292  5000 ????	       00 b8	   _B8	      =	$B8
    293  5000 ????
    294  5000 ????	       00 b6	   _B6	      =	$B6
    295  5000 ????
    296  5000 ????	       00 b4	   _B4	      =	$B4
    297  5000 ????
    298  5000 ????	       00 b2	   _B2	      =	$B2
    299  5000 ????
    300  5000 ????	       00 b0	   _B0	      =	$B0
    301  5000 ????
    302  5000 ????	       00 ae	   _AE	      =	$AE
    303  5000 ????
    304  5000 ????	       00 ac	   _AC	      =	$AC
    305  5000 ????
    306  5000 ????	       00 aa	   _AA	      =	$AA
    307  5000 ????
    308  5000 ????	       00 a8	   _A8	      =	$A8
    309  5000 ????
    310  5000 ????	       00 a6	   _A6	      =	$A6
    311  5000 ????
    312  5000 ????	       00 a4	   _A4	      =	$A4
    313  5000 ????
    314  5000 ????	       00 a2	   _A2	      =	$A2
    315  5000 ????
    316  5000 ????	       00 a0	   _A0	      =	$A0
    317  5000 ????
    318  5000 ????	       00 9e	   _9E	      =	$9E
    319  5000 ????
    320  5000 ????	       00 9c	   _9C	      =	$9C
    321  5000 ????
    322  5000 ????	       00 9a	   _9A	      =	$9A
    323  5000 ????
    324  5000 ????	       00 98	   _98	      =	$98
    325  5000 ????
    326  5000 ????	       00 96	   _96	      =	$96
    327  5000 ????
    328  5000 ????	       00 94	   _94	      =	$94
    329  5000 ????
    330  5000 ????	       00 92	   _92	      =	$92
    331  5000 ????
    332  5000 ????	       00 90	   _90	      =	$90
    333  5000 ????
    334  5000 ????	       00 8e	   _8E	      =	$8E
    335  5000 ????
    336  5000 ????	       00 8c	   _8C	      =	$8C
    337  5000 ????
    338  5000 ????	       00 8a	   _8A	      =	$8A
    339  5000 ????
    340  5000 ????	       00 88	   _88	      =	$88
    341  5000 ????
    342  5000 ????	       00 86	   _86	      =	$86
    343  5000 ????
    344  5000 ????	       00 84	   _84	      =	$84
    345  5000 ????
    346  5000 ????	       00 82	   _82	      =	$82
    347  5000 ????
    348  5000 ????	       00 80	   _80	      =	$80
    349  5000 ????
    350  5000 ????	       00 7e	   _7E	      =	$7E
    351  5000 ????
    352  5000 ????	       00 7c	   _7C	      =	$7C
    353  5000 ????
    354  5000 ????	       00 7a	   _7A	      =	$7A
    355  5000 ????
    356  5000 ????	       00 78	   _78	      =	$78
    357  5000 ????
    358  5000 ????	       00 76	   _76	      =	$76
    359  5000 ????
    360  5000 ????	       00 74	   _74	      =	$74
    361  5000 ????
    362  5000 ????	       00 72	   _72	      =	$72
    363  5000 ????
    364  5000 ????	       00 70	   _70	      =	$70
    365  5000 ????
    366  5000 ????	       00 6e	   _6E	      =	$6E
    367  5000 ????
    368  5000 ????	       00 6c	   _6C	      =	$6C
    369  5000 ????
    370  5000 ????	       00 6a	   _6A	      =	$6A
    371  5000 ????
    372  5000 ????	       00 68	   _68	      =	$68
    373  5000 ????
    374  5000 ????	       00 66	   _66	      =	$66
    375  5000 ????
    376  5000 ????	       00 64	   _64	      =	$64
    377  5000 ????
    378  5000 ????	       00 62	   _62	      =	$62
    379  5000 ????
    380  5000 ????	       00 60	   _60	      =	$60
    381  5000 ????
    382  5000 ????	       00 5e	   _5E	      =	$5E
    383  5000 ????
    384  5000 ????	       00 5c	   _5C	      =	$5C
    385  5000 ????
    386  5000 ????	       00 5a	   _5A	      =	$5A
    387  5000 ????
    388  5000 ????	       00 58	   _58	      =	$58
    389  5000 ????
    390  5000 ????	       00 56	   _56	      =	$56
    391  5000 ????
    392  5000 ????	       00 54	   _54	      =	$54
    393  5000 ????
    394  5000 ????	       00 52	   _52	      =	$52
    395  5000 ????
    396  5000 ????	       00 50	   _50	      =	$50
    397  5000 ????
    398  5000 ????	       00 4e	   _4E	      =	$4E
    399  5000 ????
    400  5000 ????	       00 4c	   _4C	      =	$4C
    401  5000 ????
    402  5000 ????	       00 4a	   _4A	      =	$4A
    403  5000 ????
    404  5000 ????	       00 48	   _48	      =	$48
    405  5000 ????
    406  5000 ????	       00 46	   _46	      =	$46
    407  5000 ????
    408  5000 ????	       00 44	   _44	      =	$44
    409  5000 ????
    410  5000 ????	       00 42	   _42	      =	$42
    411  5000 ????
    412  5000 ????	       00 40	   _40	      =	$40
    413  5000 ????
    414  5000 ????	       00 3e	   _3E	      =	$3E
    415  5000 ????
    416  5000 ????	       00 3c	   _3C	      =	$3C
    417  5000 ????
    418  5000 ????	       00 3a	   _3A	      =	$3A
    419  5000 ????
    420  5000 ????	       00 38	   _38	      =	$38
    421  5000 ????
    422  5000 ????	       00 36	   _36	      =	$36
    423  5000 ????
    424  5000 ????	       00 34	   _34	      =	$34
    425  5000 ????
    426  5000 ????	       00 32	   _32	      =	$32
    427  5000 ????
    428  5000 ????	       00 30	   _30	      =	$30
    429  5000 ????
    430  5000 ????	       00 2e	   _2E	      =	$2E
    431  5000 ????
    432  5000 ????	       00 2c	   _2C	      =	$2C
    433  5000 ????
    434  5000 ????	       00 2a	   _2A	      =	$2A
    435  5000 ????
    436  5000 ????	       00 28	   _28	      =	$28
    437  5000 ????
    438  5000 ????	       00 26	   _26	      =	$26
    439  5000 ????
    440  5000 ????	       00 24	   _24	      =	$24
    441  5000 ????
    442  5000 ????	       00 22	   _22	      =	$22
    443  5000 ????
    444  5000 ????	       00 20	   _20	      =	$20
    445  5000 ????
    446  5000 ????	       00 1e	   _1E	      =	$1E
    447  5000 ????
    448  5000 ????	       00 1c	   _1C	      =	$1C
    449  5000 ????
    450  5000 ????	       00 1a	   _1A	      =	$1A
    451  5000 ????
    452  5000 ????	       00 18	   _18	      =	$18
    453  5000 ????
    454  5000 ????	       00 16	   _16	      =	$16
    455  5000 ????
    456  5000 ????	       00 14	   _14	      =	$14
    457  5000 ????
    458  5000 ????	       00 12	   _12	      =	$12
    459  5000 ????
    460  5000 ????	       00 10	   _10	      =	$10
    461  5000 ????
    462  5000 ????	       00 0e	   _0E	      =	$0E
    463  5000 ????
    464  5000 ????	       00 0c	   _0C	      =	$0C
    465  5000 ????
    466  5000 ????	       00 0a	   _0A	      =	$0A
    467  5000 ????
    468  5000 ????	       00 08	   _08	      =	$08
    469  5000 ????
    470  5000 ????	       00 06	   _06	      =	$06
    471  5000 ????
    472  5000 ????	       00 04	   _04	      =	$04
    473  5000 ????
    474  5000 ????	       00 02	   _02	      =	$02
    475  5000 ????
    476  5000 ????	       00 00	   _00	      =	$00
    477  5000 ????
    478  5000 ????	       00 09	   req_load_menu =	9
    479  5000 ????
    480  5000 ????	       00 08	   req_safe_point =	8
    481  5000 ????
    482  5000 ????	       00 07	   req_level_reset =	7
    483  5000 ????
    484  5000 ????	       00 06	   req_move_down =	6
    485  5000 ????
    486  5000 ????	       00 05	   req_move_right =	5
    487  5000 ????
    488  5000 ????	       00 04	   req_move_up =	4
    489  5000 ????
    490  5000 ????	       00 03	   req_move_left =	3
    491  5000 ????
    492  5000 ????	       00 02	   req_game_over =	2
    493  5000 ????
    494  5000 ????	       00 01	   req_level_up =	1
    495  5000 ????
    496  5000 ????	       00 00	   req_load   =	0
    497  5000 ????
    498  5000 ????	       00 03	   game_state_heli_explosion =	3
    499  5000 ????
    500  5000 ????	       00 02	   game_state_level_finished =	2
    501  5000 ????
    502  5000 ????	       00 01	   game_state_game_over =	1
    503  5000 ????
    504  5000 ????	       00 00	   game_state_run =	0
    505  5000 ????
    506  5000 ????	       00 06	   response_menu_size =	6
    507  5000 ????
    508  5000 ????	       00 1e	   response_size_minus_1 =	30
    509  5000 ????
    510  5000 ????	       00 94	   _M_Edge_Right =	148
    511  5000 ????
    512  5000 ????	       00 0e	   _M_Edge_Left =	14
    513  5000 ????
    514  5000 ????	       00 58	   _M_Edge_Bottom =	88
    515  5000 ????
    516  5000 ????	       00 02	   _M_Edge_Top =	2
    517  5000 ????
    518  5000 ????	       00 4c	   player_max_y =	76
    519  5000 ????
    520  5000 ????	       00 02	   player_min_y =	2
    521  5000 ????
    522  5000 ????	       00 86	   player_max_x =	134
    523  5000 ????
    524  5000 ????	       00 0a	   player_min_x =	10
    525  5000 ????
    526  5000 ????	       00 08	   textbkcolor =	$08
    527  5000 ????
    528  5000 ????	       00 08	   scorebkcolor =	$08
    529  5000 ????
    530  5000 ????	       00 01	   pfscore    =	1
    531  5000 ????
    532  5000 ????	       00 04	   pfres      =	4
    533  5000 ????
    534  5000 ????	       00 01	   superchip  =	1
    535  5000 ????	       00 03	   bs_mask    =	3
    536  5000 ????	       00 10	   bankswitch =	16
    537  5000 ????	       1f f6	   bankswitch_hotspot =	$1FF6
    538  5000 ????	       00 01	   PFcolors   =	1
    539  5000 ????	       00 01	   player1colors =	1
------- FILE d:\Firmaplus\Firmaplus_intern\Atari\PlusROM\Projekte-batariBasic\CaveApocalypse\C.A.V.E. Apocalypse.bas.asm
      8  5000 ????				      ifconst	bankswitch
      9  5000 ????			  -	      if	bankswitch == 8
     10  5000 ????			  -	      ORG	$1000
     11  5000 ????			  -	      RORG	$D000
     12  5000 ????				      endif
     13  5000 ????				      if	bankswitch == 16
     14  1000					      ORG	$1000
     15  1000					      RORG	$9000
     16  1000					      endif
     17  1000				  -	      if	bankswitch == 32
     18  1000				  -	      ORG	$1000
     19  1000				  -	      RORG	$1000
     20  1000					      endif
     21  1000				  -	      if	bankswitch == 64
     22  1000				  -	      ORG	$1000
     23  1000				  -	      RORG	$1000
     24  1000					      endif
     25  1000				  -	      else
     26  1000				  -	      ORG	$F000
     27  1000					      endif
     28  1000					      repeat	256
     29  1000		       ff		      .byte.b	$ff
     28  1000					      repend
     29  1001		       ff		      .byte.b	$ff
     28  1001					      repend
     29  1002		       ff		      .byte.b	$ff
     28  1002					      repend
     29  1003		       ff		      .byte.b	$ff
     28  1003					      repend
     29  1004		       ff		      .byte.b	$ff
     28  1004					      repend
     29  1005		       ff		      .byte.b	$ff
     28  1005					      repend
     29  1006		       ff		      .byte.b	$ff
     28  1006					      repend
     29  1007		       ff		      .byte.b	$ff
     28  1007					      repend
     29  1008		       ff		      .byte.b	$ff
     28  1008					      repend
     29  1009		       ff		      .byte.b	$ff
     28  1009					      repend
     29  100a		       ff		      .byte.b	$ff
     28  100a					      repend
     29  100b		       ff		      .byte.b	$ff
     28  100b					      repend
     29  100c		       ff		      .byte.b	$ff
     28  100c					      repend
     29  100d		       ff		      .byte.b	$ff
     28  100d					      repend
     29  100e		       ff		      .byte.b	$ff
     28  100e					      repend
     29  100f		       ff		      .byte.b	$ff
     28  100f					      repend
     29  1010		       ff		      .byte.b	$ff
     28  1010					      repend
     29  1011		       ff		      .byte.b	$ff
     28  1011					      repend
     29  1012		       ff		      .byte.b	$ff
     28  1012					      repend
     29  1013		       ff		      .byte.b	$ff
     28  1013					      repend
     29  1014		       ff		      .byte.b	$ff
     28  1014					      repend
     29  1015		       ff		      .byte.b	$ff
     28  1015					      repend
     29  1016		       ff		      .byte.b	$ff
     28  1016					      repend
     29  1017		       ff		      .byte.b	$ff
     28  1017					      repend
     29  1018		       ff		      .byte.b	$ff
     28  1018					      repend
     29  1019		       ff		      .byte.b	$ff
     28  1019					      repend
     29  101a		       ff		      .byte.b	$ff
     28  101a					      repend
     29  101b		       ff		      .byte.b	$ff
     28  101b					      repend
     29  101c		       ff		      .byte.b	$ff
     28  101c					      repend
     29  101d		       ff		      .byte.b	$ff
     28  101d					      repend
     29  101e		       ff		      .byte.b	$ff
     28  101e					      repend
     29  101f		       ff		      .byte.b	$ff
     28  101f					      repend
     29  1020		       ff		      .byte.b	$ff
     28  1020					      repend
     29  1021		       ff		      .byte.b	$ff
     28  1021					      repend
     29  1022		       ff		      .byte.b	$ff
     28  1022					      repend
     29  1023		       ff		      .byte.b	$ff
     28  1023					      repend
     29  1024		       ff		      .byte.b	$ff
     28  1024					      repend
     29  1025		       ff		      .byte.b	$ff
     28  1025					      repend
     29  1026		       ff		      .byte.b	$ff
     28  1026					      repend
     29  1027		       ff		      .byte.b	$ff
     28  1027					      repend
     29  1028		       ff		      .byte.b	$ff
     28  1028					      repend
     29  1029		       ff		      .byte.b	$ff
     28  1029					      repend
     29  102a		       ff		      .byte.b	$ff
     28  102a					      repend
     29  102b		       ff		      .byte.b	$ff
     28  102b					      repend
     29  102c		       ff		      .byte.b	$ff
     28  102c					      repend
     29  102d		       ff		      .byte.b	$ff
     28  102d					      repend
     29  102e		       ff		      .byte.b	$ff
     28  102e					      repend
     29  102f		       ff		      .byte.b	$ff
     28  102f					      repend
     29  1030		       ff		      .byte.b	$ff
     28  1030					      repend
     29  1031		       ff		      .byte.b	$ff
     28  1031					      repend
     29  1032		       ff		      .byte.b	$ff
     28  1032					      repend
     29  1033		       ff		      .byte.b	$ff
     28  1033					      repend
     29  1034		       ff		      .byte.b	$ff
     28  1034					      repend
     29  1035		       ff		      .byte.b	$ff
     28  1035					      repend
     29  1036		       ff		      .byte.b	$ff
     28  1036					      repend
     29  1037		       ff		      .byte.b	$ff
     28  1037					      repend
     29  1038		       ff		      .byte.b	$ff
     28  1038					      repend
     29  1039		       ff		      .byte.b	$ff
     28  1039					      repend
     29  103a		       ff		      .byte.b	$ff
     28  103a					      repend
     29  103b		       ff		      .byte.b	$ff
     28  103b					      repend
     29  103c		       ff		      .byte.b	$ff
     28  103c					      repend
     29  103d		       ff		      .byte.b	$ff
     28  103d					      repend
     29  103e		       ff		      .byte.b	$ff
     28  103e					      repend
     29  103f		       ff		      .byte.b	$ff
     28  103f					      repend
     29  1040		       ff		      .byte.b	$ff
     28  1040					      repend
     29  1041		       ff		      .byte.b	$ff
     28  1041					      repend
     29  1042		       ff		      .byte.b	$ff
     28  1042					      repend
     29  1043		       ff		      .byte.b	$ff
     28  1043					      repend
     29  1044		       ff		      .byte.b	$ff
     28  1044					      repend
     29  1045		       ff		      .byte.b	$ff
     28  1045					      repend
     29  1046		       ff		      .byte.b	$ff
     28  1046					      repend
     29  1047		       ff		      .byte.b	$ff
     28  1047					      repend
     29  1048		       ff		      .byte.b	$ff
     28  1048					      repend
     29  1049		       ff		      .byte.b	$ff
     28  1049					      repend
     29  104a		       ff		      .byte.b	$ff
     28  104a					      repend
     29  104b		       ff		      .byte.b	$ff
     28  104b					      repend
     29  104c		       ff		      .byte.b	$ff
     28  104c					      repend
     29  104d		       ff		      .byte.b	$ff
     28  104d					      repend
     29  104e		       ff		      .byte.b	$ff
     28  104e					      repend
     29  104f		       ff		      .byte.b	$ff
     28  104f					      repend
     29  1050		       ff		      .byte.b	$ff
     28  1050					      repend
     29  1051		       ff		      .byte.b	$ff
     28  1051					      repend
     29  1052		       ff		      .byte.b	$ff
     28  1052					      repend
     29  1053		       ff		      .byte.b	$ff
     28  1053					      repend
     29  1054		       ff		      .byte.b	$ff
     28  1054					      repend
     29  1055		       ff		      .byte.b	$ff
     28  1055					      repend
     29  1056		       ff		      .byte.b	$ff
     28  1056					      repend
     29  1057		       ff		      .byte.b	$ff
     28  1057					      repend
     29  1058		       ff		      .byte.b	$ff
     28  1058					      repend
     29  1059		       ff		      .byte.b	$ff
     28  1059					      repend
     29  105a		       ff		      .byte.b	$ff
     28  105a					      repend
     29  105b		       ff		      .byte.b	$ff
     28  105b					      repend
     29  105c		       ff		      .byte.b	$ff
     28  105c					      repend
     29  105d		       ff		      .byte.b	$ff
     28  105d					      repend
     29  105e		       ff		      .byte.b	$ff
     28  105e					      repend
     29  105f		       ff		      .byte.b	$ff
     28  105f					      repend
     29  1060		       ff		      .byte.b	$ff
     28  1060					      repend
     29  1061		       ff		      .byte.b	$ff
     28  1061					      repend
     29  1062		       ff		      .byte.b	$ff
     28  1062					      repend
     29  1063		       ff		      .byte.b	$ff
     28  1063					      repend
     29  1064		       ff		      .byte.b	$ff
     28  1064					      repend
     29  1065		       ff		      .byte.b	$ff
     28  1065					      repend
     29  1066		       ff		      .byte.b	$ff
     28  1066					      repend
     29  1067		       ff		      .byte.b	$ff
     28  1067					      repend
     29  1068		       ff		      .byte.b	$ff
     28  1068					      repend
     29  1069		       ff		      .byte.b	$ff
     28  1069					      repend
     29  106a		       ff		      .byte.b	$ff
     28  106a					      repend
     29  106b		       ff		      .byte.b	$ff
     28  106b					      repend
     29  106c		       ff		      .byte.b	$ff
     28  106c					      repend
     29  106d		       ff		      .byte.b	$ff
     28  106d					      repend
     29  106e		       ff		      .byte.b	$ff
     28  106e					      repend
     29  106f		       ff		      .byte.b	$ff
     28  106f					      repend
     29  1070		       ff		      .byte.b	$ff
     28  1070					      repend
     29  1071		       ff		      .byte.b	$ff
     28  1071					      repend
     29  1072		       ff		      .byte.b	$ff
     28  1072					      repend
     29  1073		       ff		      .byte.b	$ff
     28  1073					      repend
     29  1074		       ff		      .byte.b	$ff
     28  1074					      repend
     29  1075		       ff		      .byte.b	$ff
     28  1075					      repend
     29  1076		       ff		      .byte.b	$ff
     28  1076					      repend
     29  1077		       ff		      .byte.b	$ff
     28  1077					      repend
     29  1078		       ff		      .byte.b	$ff
     28  1078					      repend
     29  1079		       ff		      .byte.b	$ff
     28  1079					      repend
     29  107a		       ff		      .byte.b	$ff
     28  107a					      repend
     29  107b		       ff		      .byte.b	$ff
     28  107b					      repend
     29  107c		       ff		      .byte.b	$ff
     28  107c					      repend
     29  107d		       ff		      .byte.b	$ff
     28  107d					      repend
     29  107e		       ff		      .byte.b	$ff
     28  107e					      repend
     29  107f		       ff		      .byte.b	$ff
     28  107f					      repend
     29  1080		       ff		      .byte.b	$ff
     28  1080					      repend
     29  1081		       ff		      .byte.b	$ff
     28  1081					      repend
     29  1082		       ff		      .byte.b	$ff
     28  1082					      repend
     29  1083		       ff		      .byte.b	$ff
     28  1083					      repend
     29  1084		       ff		      .byte.b	$ff
     28  1084					      repend
     29  1085		       ff		      .byte.b	$ff
     28  1085					      repend
     29  1086		       ff		      .byte.b	$ff
     28  1086					      repend
     29  1087		       ff		      .byte.b	$ff
     28  1087					      repend
     29  1088		       ff		      .byte.b	$ff
     28  1088					      repend
     29  1089		       ff		      .byte.b	$ff
     28  1089					      repend
     29  108a		       ff		      .byte.b	$ff
     28  108a					      repend
     29  108b		       ff		      .byte.b	$ff
     28  108b					      repend
     29  108c		       ff		      .byte.b	$ff
     28  108c					      repend
     29  108d		       ff		      .byte.b	$ff
     28  108d					      repend
     29  108e		       ff		      .byte.b	$ff
     28  108e					      repend
     29  108f		       ff		      .byte.b	$ff
     28  108f					      repend
     29  1090		       ff		      .byte.b	$ff
     28  1090					      repend
     29  1091		       ff		      .byte.b	$ff
     28  1091					      repend
     29  1092		       ff		      .byte.b	$ff
     28  1092					      repend
     29  1093		       ff		      .byte.b	$ff
     28  1093					      repend
     29  1094		       ff		      .byte.b	$ff
     28  1094					      repend
     29  1095		       ff		      .byte.b	$ff
     28  1095					      repend
     29  1096		       ff		      .byte.b	$ff
     28  1096					      repend
     29  1097		       ff		      .byte.b	$ff
     28  1097					      repend
     29  1098		       ff		      .byte.b	$ff
     28  1098					      repend
     29  1099		       ff		      .byte.b	$ff
     28  1099					      repend
     29  109a		       ff		      .byte.b	$ff
     28  109a					      repend
     29  109b		       ff		      .byte.b	$ff
     28  109b					      repend
     29  109c		       ff		      .byte.b	$ff
     28  109c					      repend
     29  109d		       ff		      .byte.b	$ff
     28  109d					      repend
     29  109e		       ff		      .byte.b	$ff
     28  109e					      repend
     29  109f		       ff		      .byte.b	$ff
     28  109f					      repend
     29  10a0		       ff		      .byte.b	$ff
     28  10a0					      repend
     29  10a1		       ff		      .byte.b	$ff
     28  10a1					      repend
     29  10a2		       ff		      .byte.b	$ff
     28  10a2					      repend
     29  10a3		       ff		      .byte.b	$ff
     28  10a3					      repend
     29  10a4		       ff		      .byte.b	$ff
     28  10a4					      repend
     29  10a5		       ff		      .byte.b	$ff
     28  10a5					      repend
     29  10a6		       ff		      .byte.b	$ff
     28  10a6					      repend
     29  10a7		       ff		      .byte.b	$ff
     28  10a7					      repend
     29  10a8		       ff		      .byte.b	$ff
     28  10a8					      repend
     29  10a9		       ff		      .byte.b	$ff
     28  10a9					      repend
     29  10aa		       ff		      .byte.b	$ff
     28  10aa					      repend
     29  10ab		       ff		      .byte.b	$ff
     28  10ab					      repend
     29  10ac		       ff		      .byte.b	$ff
     28  10ac					      repend
     29  10ad		       ff		      .byte.b	$ff
     28  10ad					      repend
     29  10ae		       ff		      .byte.b	$ff
     28  10ae					      repend
     29  10af		       ff		      .byte.b	$ff
     28  10af					      repend
     29  10b0		       ff		      .byte.b	$ff
     28  10b0					      repend
     29  10b1		       ff		      .byte.b	$ff
     28  10b1					      repend
     29  10b2		       ff		      .byte.b	$ff
     28  10b2					      repend
     29  10b3		       ff		      .byte.b	$ff
     28  10b3					      repend
     29  10b4		       ff		      .byte.b	$ff
     28  10b4					      repend
     29  10b5		       ff		      .byte.b	$ff
     28  10b5					      repend
     29  10b6		       ff		      .byte.b	$ff
     28  10b6					      repend
     29  10b7		       ff		      .byte.b	$ff
     28  10b7					      repend
     29  10b8		       ff		      .byte.b	$ff
     28  10b8					      repend
     29  10b9		       ff		      .byte.b	$ff
     28  10b9					      repend
     29  10ba		       ff		      .byte.b	$ff
     28  10ba					      repend
     29  10bb		       ff		      .byte.b	$ff
     28  10bb					      repend
     29  10bc		       ff		      .byte.b	$ff
     28  10bc					      repend
     29  10bd		       ff		      .byte.b	$ff
     28  10bd					      repend
     29  10be		       ff		      .byte.b	$ff
     28  10be					      repend
     29  10bf		       ff		      .byte.b	$ff
     28  10bf					      repend
     29  10c0		       ff		      .byte.b	$ff
     28  10c0					      repend
     29  10c1		       ff		      .byte.b	$ff
     28  10c1					      repend
     29  10c2		       ff		      .byte.b	$ff
     28  10c2					      repend
     29  10c3		       ff		      .byte.b	$ff
     28  10c3					      repend
     29  10c4		       ff		      .byte.b	$ff
     28  10c4					      repend
     29  10c5		       ff		      .byte.b	$ff
     28  10c5					      repend
     29  10c6		       ff		      .byte.b	$ff
     28  10c6					      repend
     29  10c7		       ff		      .byte.b	$ff
     28  10c7					      repend
     29  10c8		       ff		      .byte.b	$ff
     28  10c8					      repend
     29  10c9		       ff		      .byte.b	$ff
     28  10c9					      repend
     29  10ca		       ff		      .byte.b	$ff
     28  10ca					      repend
     29  10cb		       ff		      .byte.b	$ff
     28  10cb					      repend
     29  10cc		       ff		      .byte.b	$ff
     28  10cc					      repend
     29  10cd		       ff		      .byte.b	$ff
     28  10cd					      repend
     29  10ce		       ff		      .byte.b	$ff
     28  10ce					      repend
     29  10cf		       ff		      .byte.b	$ff
     28  10cf					      repend
     29  10d0		       ff		      .byte.b	$ff
     28  10d0					      repend
     29  10d1		       ff		      .byte.b	$ff
     28  10d1					      repend
     29  10d2		       ff		      .byte.b	$ff
     28  10d2					      repend
     29  10d3		       ff		      .byte.b	$ff
     28  10d3					      repend
     29  10d4		       ff		      .byte.b	$ff
     28  10d4					      repend
     29  10d5		       ff		      .byte.b	$ff
     28  10d5					      repend
     29  10d6		       ff		      .byte.b	$ff
     28  10d6					      repend
     29  10d7		       ff		      .byte.b	$ff
     28  10d7					      repend
     29  10d8		       ff		      .byte.b	$ff
     28  10d8					      repend
     29  10d9		       ff		      .byte.b	$ff
     28  10d9					      repend
     29  10da		       ff		      .byte.b	$ff
     28  10da					      repend
     29  10db		       ff		      .byte.b	$ff
     28  10db					      repend
     29  10dc		       ff		      .byte.b	$ff
     28  10dc					      repend
     29  10dd		       ff		      .byte.b	$ff
     28  10dd					      repend
     29  10de		       ff		      .byte.b	$ff
     28  10de					      repend
     29  10df		       ff		      .byte.b	$ff
     28  10df					      repend
     29  10e0		       ff		      .byte.b	$ff
     28  10e0					      repend
     29  10e1		       ff		      .byte.b	$ff
     28  10e1					      repend
     29  10e2		       ff		      .byte.b	$ff
     28  10e2					      repend
     29  10e3		       ff		      .byte.b	$ff
     28  10e3					      repend
     29  10e4		       ff		      .byte.b	$ff
     28  10e4					      repend
     29  10e5		       ff		      .byte.b	$ff
     28  10e5					      repend
     29  10e6		       ff		      .byte.b	$ff
     28  10e6					      repend
     29  10e7		       ff		      .byte.b	$ff
     28  10e7					      repend
     29  10e8		       ff		      .byte.b	$ff
     28  10e8					      repend
     29  10e9		       ff		      .byte.b	$ff
     28  10e9					      repend
     29  10ea		       ff		      .byte.b	$ff
     28  10ea					      repend
     29  10eb		       ff		      .byte.b	$ff
     28  10eb					      repend
     29  10ec		       ff		      .byte.b	$ff
     28  10ec					      repend
     29  10ed		       ff		      .byte.b	$ff
     28  10ed					      repend
     29  10ee		       ff		      .byte.b	$ff
     28  10ee					      repend
     29  10ef		       ff		      .byte.b	$ff
     28  10ef					      repend
     29  10f0		       ff		      .byte.b	$ff
     28  10f0					      repend
     29  10f1		       ff		      .byte.b	$ff
     28  10f1					      repend
     29  10f2		       ff		      .byte.b	$ff
     28  10f2					      repend
     29  10f3		       ff		      .byte.b	$ff
     28  10f3					      repend
     29  10f4		       ff		      .byte.b	$ff
     28  10f4					      repend
     29  10f5		       ff		      .byte.b	$ff
     28  10f5					      repend
     29  10f6		       ff		      .byte.b	$ff
     28  10f6					      repend
     29  10f7		       ff		      .byte.b	$ff
     28  10f7					      repend
     29  10f8		       ff		      .byte.b	$ff
     28  10f8					      repend
     29  10f9		       ff		      .byte.b	$ff
     28  10f9					      repend
     29  10fa		       ff		      .byte.b	$ff
     28  10fa					      repend
     29  10fb		       ff		      .byte.b	$ff
     28  10fb					      repend
     29  10fc		       ff		      .byte.b	$ff
     28  10fc					      repend
     29  10fd		       ff		      .byte.b	$ff
     28  10fd					      repend
     29  10fe		       ff		      .byte.b	$ff
     28  10fe					      repend
     29  10ff		       ff		      .byte.b	$ff
     30  1100					      repend
     31  1100				   game
     32  1100				   .L00 		;  inline PlusROM_functions.asm
     33  1100
------- FILE PlusROM_functions.asm LEVEL 2 PASS 3
      0  1100					      include	PlusROM_functions.asm
      1  1100		       00 01	   PlusROM_functions =	1
      2  1100		       1f f0	   WriteToBuffer =	$1ff0
      3  1100		       1f f1	   WriteSendBuffer =	$1ff1
      4  1100		       1f f2	   ReceiveBuffer =	$1ff2
      5  1100		       1f f3	   ReceiveBufferSize =	$1ff3
      6  1100
      7  1100					      MAC	set_plusrom_api
      8  1100				   OLD_RORG   =	*
      9  1100					      REND
     10  1100				   PlusROM_API
     11  1100					      .byte	{1}, 0, {2}, 0
     12  1100					      ECHO	"Size of PlusROM API definition: ", [( * - PlusROM_API )]d
     13  1100					      RORG	(OLD_RORG + ( * - PlusROM_API ))
     14  1100					      ENDM		; {1} = path, {2} = domain
     15  1100
------- FILE d:\Firmaplus\Firmaplus_intern\Atari\PlusROM\Projekte-batariBasic\CaveApocalypse\C.A.V.E. Apocalypse.bas.asm
     35  1100
     36  1100				   .
     37  1100							; 
     38  1100
     39  1100				   .L01 		;  set kernel_options pfcolors player1colors
     40  1100
     41  1100				   .L02 		;  set romsize 16kSC
     42  1100
     43  1100				   .L03 		;  set smartbranching on
     44  1100
     45  1100				   .
     46  1100							; 
     47  1100
     48  1100				   .
     49  1100							; 
     50  1100
     51  1100				   .
     52  1100							; 
     53  1100
     54  1100				   .L04 		;  const pfres = 4
     55  1100
     56  1100				   .L05 		;  const pfscore = 1
     57  1100
     58  1100				   .L06 		;  const scorebkcolor = $08
     59  1100
     60  1100				   .L07 		;  const textbkcolor = $08
     61  1100
     62  1100				   .
     63  1100							; 
     64  1100
     65  1100				   .L08 		;  rem gravity is acceleration (https://atariage.com/forums/topic/226881-gravity/?do=findComment&comment=3017307)
     66  1100
     67  1100				   .L09 		;  rem by AA user bogax (https://atariage.com/forums/profile/22687-bogax/)
     68  1100
     69  1100				   .L010		;  rem the smallest fraction is 1/256 rounded up here to 0.004
     70  1100
     71  1100				   .L011		;  rem assuming gravity is applied each drawscreen this should
     72  1100
     73  1100				   .L012		;  rem work out to ~7 pixels in 1 second, 28 pixels in 2 seconds
     74  1100
     75  1100				   .L013		;  rem 63 pixels in 3 seconds
     76  1100
     77  1100							;.gravity_player1.0.004.
     78  1100				   .L014		;  def gravity_player1 = 0.004
     79  1100
     80  1100							;.gravity_ball.0.008.
     81  1100				   .L015		;  def gravity_ball = 0.008
     82  1100
     83  1100							;.gravity_missile0.0.024.
     84  1100				   .L016		;  def gravity_missile0 = 0.024
     85  1100
     86  1100				   .
     87  1100							; 
     88  1100
     89  1100				   .L017		;  const player_min_x	=  10
     90  1100
     91  1100				   .L018		;  const player_max_x	=  134
     92  1100
     93  1100				   .L019		;  const player_min_y	=  2
     94  1100
     95  1100				   .L020		;  const player_max_y	=  76
     96  1100
     97  1100				   .L021		;  const _M_Edge_Top  =  2
     98  1100
     99  1100				   .L022		;  const _M_Edge_Bottom  =  88
    100  1100
    101  1100				   .L023		;  const _M_Edge_Left	=  14
    102  1100
    103  1100				   .L024		;  const _M_Edge_Right  =  148
    104  1100
    105  1100				   .
    106  1100							; 
    107  1100
    108  1100				   .L025		;  const response_size_minus_1  =  30
    109  1100
    110  1100				   .L026		;  const response_menu_size  =  6
    111  1100
    112  1100				   .
    113  1100							; 
    114  1100
    115  1100				   .L027		;  const game_state_run  =  0
    116  1100
    117  1100				   .L028		;  const game_state_game_over	=  1
    118  1100
    119  1100				   .L029		;  const game_state_level_finished  =	2
    120  1100
    121  1100				   .L030		;  const game_state_heli_explosion  =	3
    122  1100
    123  1100				   .
    124  1100							; 
    125  1100
    126  1100							;.bonus_level_timer.100.
    127  1100				   .L031		;  def bonus_level_timer = 100
    128  1100
    129  1100							;.bonus_level_lives.200.
    130  1100				   .L032		;  def bonus_level_lives = 200
    131  1100
    132  1100							;.bonus_hit_wall.10.
    133  1100				   .L033		;  def bonus_hit_wall = 10
    134  1100
    135  1100							;.bonus_hit_active_wall.30.
    136  1100				   .L034		;  def bonus_hit_active_wall = 30
    137  1100
    138  1100							;.bonus_hit_air_missile.40.
    139  1100				   .L035		;  def bonus_hit_air_missile = 40
    140  1100
    141  1100							;.bonus_hit_tank.60.
    142  1100				   .L036		;  def bonus_hit_tank = 60
    143  1100
    144  1100							;.bonus_man_rescue.150.
    145  1100				   .L037		;  def bonus_man_rescue = 150
    146  1100
    147  1100				   .
    148  1100							; 
    149  1100
    150  1100				   .
    151  1100							; 
    152  1100
    153  1100				   .
    154  1100							; 
    155  1100
    156  1100				   .
    157  1100							; 
    158  1100
    159  1100				   .L038		;  const req_load  =  0
    160  1100
    161  1100				   .L039		;  const req_level_up	=  1
    162  1100
    163  1100				   .L040		;  const req_game_over  =  2
    164  1100
    165  1100				   .L041		;  const req_move_left  =  3
    166  1100
    167  1100				   .L042		;  const req_move_up  =  4
    168  1100
    169  1100				   .L043		;  const req_move_right  =  5
    170  1100
    171  1100				   .L044		;  const req_move_down  =  6
    172  1100
    173  1100				   .L045		;  const req_level_reset  =  7
    174  1100
    175  1100				   .L046		;  const req_safe_point  =  8
    176  1100
    177  1100				   .L047		;  const req_load_menu  =  9
    178  1100
    179  1100				   .
    180  1100							; 
    181  1100
    182  1100				   .L048		;  const _00  =  $00
    183  1100
    184  1100				   .L049		;  const _02  =  $02
    185  1100
    186  1100				   .L050		;  const _04  =  $04
    187  1100
    188  1100				   .L051		;  const _06  =  $06
    189  1100
    190  1100				   .L052		;  const _08  =  $08
    191  1100
    192  1100				   .L053		;  const _0A  =  $0A
    193  1100
    194  1100				   .L054		;  const _0C  =  $0C
    195  1100
    196  1100				   .L055		;  const _0E  =  $0E
    197  1100
    198  1100				   .L056		;  const _10  =  $10
    199  1100
    200  1100				   .L057		;  const _12  =  $12
    201  1100
    202  1100				   .L058		;  const _14  =  $14
    203  1100
    204  1100				   .L059		;  const _16  =  $16
    205  1100
    206  1100				   .L060		;  const _18  =  $18
    207  1100
    208  1100				   .L061		;  const _1A  =  $1A
    209  1100
    210  1100				   .L062		;  const _1C  =  $1C
    211  1100
    212  1100				   .L063		;  const _1E  =  $1E
    213  1100
    214  1100				   .L064		;  const _20  =  $20
    215  1100
    216  1100				   .L065		;  const _22  =  $22
    217  1100
    218  1100				   .L066		;  const _24  =  $24
    219  1100
    220  1100				   .L067		;  const _26  =  $26
    221  1100
    222  1100				   .L068		;  const _28  =  $28
    223  1100
    224  1100				   .L069		;  const _2A  =  $2A
    225  1100
    226  1100				   .L070		;  const _2C  =  $2C
    227  1100
    228  1100				   .L071		;  const _2E  =  $2E
    229  1100
    230  1100				   .L072		;  const _30  =  $30
    231  1100
    232  1100				   .L073		;  const _32  =  $32
    233  1100
    234  1100				   .L074		;  const _34  =  $34
    235  1100
    236  1100				   .L075		;  const _36  =  $36
    237  1100
    238  1100				   .L076		;  const _38  =  $38
    239  1100
    240  1100				   .L077		;  const _3A  =  $3A
    241  1100
    242  1100				   .L078		;  const _3C  =  $3C
    243  1100
    244  1100				   .L079		;  const _3E  =  $3E
    245  1100
    246  1100				   .L080		;  const _40  =  $40
    247  1100
    248  1100				   .L081		;  const _42  =  $42
    249  1100
    250  1100				   .L082		;  const _44  =  $44
    251  1100
    252  1100				   .L083		;  const _46  =  $46
    253  1100
    254  1100				   .L084		;  const _48  =  $48
    255  1100
    256  1100				   .L085		;  const _4A  =  $4A
    257  1100
    258  1100				   .L086		;  const _4C  =  $4C
    259  1100
    260  1100				   .L087		;  const _4E  =  $4E
    261  1100
    262  1100				   .L088		;  const _50  =  $50
    263  1100
    264  1100				   .L089		;  const _52  =  $52
    265  1100
    266  1100				   .L090		;  const _54  =  $54
    267  1100
    268  1100				   .L091		;  const _56  =  $56
    269  1100
    270  1100				   .L092		;  const _58  =  $58
    271  1100
    272  1100				   .L093		;  const _5A  =  $5A
    273  1100
    274  1100				   .L094		;  const _5C  =  $5C
    275  1100
    276  1100				   .L095		;  const _5E  =  $5E
    277  1100
    278  1100				   .L096		;  const _60  =  $60
    279  1100
    280  1100				   .L097		;  const _62  =  $62
    281  1100
    282  1100				   .L098		;  const _64  =  $64
    283  1100
    284  1100				   .L099		;  const _66  =  $66
    285  1100
    286  1100				   .L0100		;  const _68  =  $68
    287  1100
    288  1100				   .L0101		;  const _6A  =  $6A
    289  1100
    290  1100				   .L0102		;  const _6C  =  $6C
    291  1100
    292  1100				   .L0103		;  const _6E  =  $6E
    293  1100
    294  1100				   .L0104		;  const _70  =  $70
    295  1100
    296  1100				   .L0105		;  const _72  =  $72
    297  1100
    298  1100				   .L0106		;  const _74  =  $74
    299  1100
    300  1100				   .L0107		;  const _76  =  $76
    301  1100
    302  1100				   .L0108		;  const _78  =  $78
    303  1100
    304  1100				   .L0109		;  const _7A  =  $7A
    305  1100
    306  1100				   .L0110		;  const _7C  =  $7C
    307  1100
    308  1100				   .L0111		;  const _7E  =  $7E
    309  1100
    310  1100				   .L0112		;  const _80  =  $80
    311  1100
    312  1100				   .L0113		;  const _82  =  $82
    313  1100
    314  1100				   .L0114		;  const _84  =  $84
    315  1100
    316  1100				   .L0115		;  const _86  =  $86
    317  1100
    318  1100				   .L0116		;  const _88  =  $88
    319  1100
    320  1100				   .L0117		;  const _8A  =  $8A
    321  1100
    322  1100				   .L0118		;  const _8C  =  $8C
    323  1100
    324  1100				   .L0119		;  const _8E  =  $8E
    325  1100
    326  1100				   .L0120		;  const _90  =  $90
    327  1100
    328  1100				   .L0121		;  const _92  =  $92
    329  1100
    330  1100				   .L0122		;  const _94  =  $94
    331  1100
    332  1100				   .L0123		;  const _96  =  $96
    333  1100
    334  1100				   .L0124		;  const _98  =  $98
    335  1100
    336  1100				   .L0125		;  const _9A  =  $9A
    337  1100
    338  1100				   .L0126		;  const _9C  =  $9C
    339  1100
    340  1100				   .L0127		;  const _9E  =  $9E
    341  1100
    342  1100				   .L0128		;  const _A0  =  $A0
    343  1100
    344  1100				   .L0129		;  const _A2  =  $A2
    345  1100
    346  1100				   .L0130		;  const _A4  =  $A4
    347  1100
    348  1100				   .L0131		;  const _A6  =  $A6
    349  1100
    350  1100				   .L0132		;  const _A8  =  $A8
    351  1100
    352  1100				   .L0133		;  const _AA  =  $AA
    353  1100
    354  1100				   .L0134		;  const _AC  =  $AC
    355  1100
    356  1100				   .L0135		;  const _AE  =  $AE
    357  1100
    358  1100				   .L0136		;  const _B0  =  $B0
    359  1100
    360  1100				   .L0137		;  const _B2  =  $B2
    361  1100
    362  1100				   .L0138		;  const _B4  =  $B4
    363  1100
    364  1100				   .L0139		;  const _B6  =  $B6
    365  1100
    366  1100				   .L0140		;  const _B8  =  $B8
    367  1100
    368  1100				   .L0141		;  const _BA  =  $BA
    369  1100
    370  1100				   .L0142		;  const _BC  =  $BC
    371  1100
    372  1100				   .L0143		;  const _BE  =  $BE
    373  1100
    374  1100				   .L0144		;  const _C0  =  $C0
    375  1100
    376  1100				   .L0145		;  const _C2  =  $C2
    377  1100
    378  1100				   .L0146		;  const _C4  =  $C4
    379  1100
    380  1100				   .L0147		;  const _C6  =  $C6
    381  1100
    382  1100				   .L0148		;  const _C8  =  $C8
    383  1100
    384  1100				   .L0149		;  const _CA  =  $CA
    385  1100
    386  1100				   .L0150		;  const _CC  =  $CC
    387  1100
    388  1100				   .L0151		;  const _CE  =  $CE
    389  1100
    390  1100				   .L0152		;  const _D0  =  $D0
    391  1100
    392  1100				   .L0153		;  const _D2  =  $D2
    393  1100
    394  1100				   .L0154		;  const _D4  =  $D4
    395  1100
    396  1100				   .L0155		;  const _D6  =  $D6
    397  1100
    398  1100				   .L0156		;  const _D8  =  $D8
    399  1100
    400  1100				   .L0157		;  const _DA  =  $DA
    401  1100
    402  1100				   .L0158		;  const _DC  =  $DC
    403  1100
    404  1100				   .L0159		;  const _DE  =  $DE
    405  1100
    406  1100				   .L0160		;  const _E0  =  $E0
    407  1100
    408  1100				   .L0161		;  const _E2  =  $E2
    409  1100
    410  1100				   .L0162		;  const _E4  =  $E4
    411  1100
    412  1100				   .L0163		;  const _E6  =  $E6
    413  1100
    414  1100				   .L0164		;  const _E8  =  $E8
    415  1100
    416  1100				   .L0165		;  const _EA  =  $EA
    417  1100
    418  1100				   .L0166		;  const _EC  =  $EC
    419  1100
    420  1100				   .L0167		;  const _EE  =  $EE
    421  1100
    422  1100				   .L0168		;  const _F0  =  $F0
    423  1100
    424  1100				   .L0169		;  const _F2  =  $F2
    425  1100
    426  1100				   .L0170		;  const _F4  =  $F4
    427  1100
    428  1100				   .L0171		;  const _F6  =  $F6
    429  1100
    430  1100				   .L0172		;  const _F8  =  $F8
    431  1100
    432  1100				   .L0173		;  const _FA  =  $FA
    433  1100
    434  1100				   .L0174		;  const _FC  =  $FC
    435  1100
    436  1100				   .L0175		;  const _FE  =  $FE
    437  1100
    438  1100				   .
    439  1100							; 
    440  1100
    441  1100				   .
    442  1100							; 
    443  1100
    444  1100				   .
    445  1100							; 
    446  1100
    447  1100				   .
    448  1100							; 
    449  1100
    450  1100				   .
    451  1100							; 
    452  1100
    453  1100				   .
    454  1100							; 
    455  1100
    456  1100				   .
    457  1100							; 
    458  1100
    459  1100				   .
    460  1100							; 
    461  1100
    462  1100				   .
    463  1100							; 
    464  1100
    465  1100				   .
    466  1100							; 
    467  1100
    468  1100				   .
    469  1100							; 
    470  1100
    471  1100				   .
    472  1100							; 
    473  1100
    474  1100				   .
    475  1100							; 
    476  1100
    477  1100				   .
    478  1100							; 
    479  1100
    480  1100				   .
    481  1100							; 
    482  1100
    483  1100				   .
    484  1100							; 
    485  1100
    486  1100				   .
    487  1100							; 
    488  1100
    489  1100				   .
    490  1100							; 
    491  1100
    492  1100				   .
    493  1100							; 
    494  1100
    495  1100				   .
    496  1100							; 
    497  1100
    498  1100				   .
    499  1100							; 
    500  1100
    501  1100				   .
    502  1100							; 
    503  1100
    504  1100				   .
    505  1100							; 
    506  1100
    507  1100				   .
    508  1100							; 
    509  1100
    510  1100				   .
    511  1100							; 
    512  1100
    513  1100				   .
    514  1100							; 
    515  1100
    516  1100				   .
    517  1100							; 
    518  1100
    519  1100				   .
    520  1100							; 
    521  1100
    522  1100				   .
    523  1100							; 
    524  1100
    525  1100				   .
    526  1100							; 
    527  1100
    528  1100				   .
    529  1100							; 
    530  1100
    531  1100				   .
    532  1100							; 
    533  1100
    534  1100				   .
    535  1100							; 
    536  1100
    537  1100				   .
    538  1100							; 
    539  1100
    540  1100				   .
    541  1100							; 
    542  1100
    543  1100				   .
    544  1100							; 
    545  1100
    546  1100				   .
    547  1100							; 
    548  1100
    549  1100				   .
    550  1100							; 
    551  1100
    552  1100				   .
    553  1100							; 
    554  1100
    555  1100				   .
    556  1100							; 
    557  1100
    558  1100				   .
    559  1100							; 
    560  1100
    561  1100				   .
    562  1100							; 
    563  1100
    564  1100				   .
    565  1100							; 
    566  1100
    567  1100				   .
    568  1100							; 
    569  1100
    570  1100				   .
    571  1100							; 
    572  1100
    573  1100				   .
    574  1100							; 
    575  1100
    576  1100				   .
    577  1100							; 
    578  1100
    579  1100				   .
    580  1100							; 
    581  1100
    582  1100				   .
    583  1100							; 
    584  1100
    585  1100				   .
    586  1100							; 
    587  1100
    588  1100				   .
    589  1100							; 
    590  1100
    591  1100				   .
    592  1100							; 
    593  1100
    594  1100				   .
    595  1100							; 
    596  1100
    597  1100				   .
    598  1100							; 
    599  1100
    600  1100				   .
    601  1100							; 
    602  1100
    603  1100				   .
    604  1100							; 
    605  1100
    606  1100				   .
    607  1100							; 
    608  1100
    609  1100				   .
    610  1100							; 
    611  1100
    612  1100				   .
    613  1100							; 
    614  1100
    615  1100				   .
    616  1100							; 
    617  1100
    618  1100				   .
    619  1100							; 
    620  1100
    621  1100				   .
    622  1100							; 
    623  1100
    624  1100				   .
    625  1100							; 
    626  1100
    627  1100				   .
    628  1100							; 
    629  1100
    630  1100				   .
    631  1100							; 
    632  1100
    633  1100				   .
    634  1100							; 
    635  1100
    636  1100				   .
    637  1100							; 
    638  1100
    639  1100				   .
    640  1100							; 
    641  1100
    642  1100				   .
    643  1100							; 
    644  1100
    645  1100				   .
    646  1100							; 
    647  1100
    648  1100				   .
    649  1100							; 
    650  1100
    651  1100				   .
    652  1100							; 
    653  1100
    654  1100				   .
    655  1100							; 
    656  1100
    657  1100				   .
    658  1100							; 
    659  1100
    660  1100				   .
    661  1100							; 
    662  1100
    663  1100				   .
    664  1100							; 
    665  1100
    666  1100				   .
    667  1100							; 
    668  1100
    669  1100				   .
    670  1100							; 
    671  1100
    672  1100				   .
    673  1100							; 
    674  1100
    675  1100				   .
    676  1100							; 
    677  1100
    678  1100				   .
    679  1100							; 
    680  1100
    681  1100				   .
    682  1100							; 
    683  1100
    684  1100				   .
    685  1100							; 
    686  1100
    687  1100				   .
    688  1100							; 
    689  1100
    690  1100				   .
    691  1100							; 
    692  1100
    693  1100				   .
    694  1100							; 
    695  1100
    696  1100				   .
    697  1100							; 
    698  1100
    699  1100				   .
    700  1100							; 
    701  1100
    702  1100				   .
    703  1100							; 
    704  1100
    705  1100				   .
    706  1100							; 
    707  1100
    708  1100				   .
    709  1100							; 
    710  1100
    711  1100				   .
    712  1100							; 
    713  1100
    714  1100				   .
    715  1100							; 
    716  1100
    717  1100				   .
    718  1100							; 
    719  1100
    720  1100				   .
    721  1100							; 
    722  1100
    723  1100				   .
    724  1100							; 
    725  1100
    726  1100				   .
    727  1100							; 
    728  1100
    729  1100				   .
    730  1100							; 
    731  1100
    732  1100				   .
    733  1100							; 
    734  1100
    735  1100				   .
    736  1100							; 
    737  1100
    738  1100				   .
    739  1100							; 
    740  1100
    741  1100				   .
    742  1100							; 
    743  1100
    744  1100				   .
    745  1100							; 
    746  1100
    747  1100				   .
    748  1100							; 
    749  1100
    750  1100				   .
    751  1100							; 
    752  1100
    753  1100				   .
    754  1100							; 
    755  1100
    756  1100				   .
    757  1100							; 
    758  1100
    759  1100				   .
    760  1100							; 
    761  1100
    762  1100				   .
    763  1100							; 
    764  1100
    765  1100				   .
    766  1100							; 
    767  1100
    768  1100				   .
    769  1100							; 
    770  1100
    771  1100				   .
    772  1100							; 
    773  1100
    774  1100				   .
    775  1100							; 
    776  1100
    777  1100				   .
    778  1100							; 
    779  1100
    780  1100				   .
    781  1100							; 
    782  1100
    783  1100				   .
    784  1100							; 
    785  1100
    786  1100				   .
    787  1100							; 
    788  1100
    789  1100				   .
    790  1100							; 
    791  1100
    792  1100				   .
    793  1100							; 
    794  1100
    795  1100				   .
    796  1100							; 
    797  1100
    798  1100				   .
    799  1100							; 
    800  1100
    801  1100				   .
    802  1100							; 
    803  1100
    804  1100				   .
    805  1100							; 
    806  1100
    807  1100				   .
    808  1100							; 
    809  1100
    810  1100				   .
    811  1100							; 
    812  1100
    813  1100				   .
    814  1100							; 
    815  1100
    816  1100				   .
    817  1100							; 
    818  1100
    819  1100				   .
    820  1100							; 
    821  1100
    822  1100				   .
    823  1100							; 
    824  1100
    825  1100				   .
    826  1100							; 
    827  1100
    828  1100				   .
    829  1100							; 
    830  1100
    831  1100				   .
    832  1100							; 
    833  1100
    834  1100				   .
    835  1100							; 
    836  1100
    837  1100				   .
    838  1100							; 
    839  1100
    840  1100				   .
    841  1100							; 
    842  1100
    843  1100				   .
    844  1100							; 
    845  1100
    846  1100				   .
    847  1100							; 
    848  1100
    849  1100				   .
    850  1100							; 
    851  1100
    852  1100				   .
    853  1100							; 
    854  1100
    855  1100				   .
    856  1100							; 
    857  1100
    858  1100				   .
    859  1100							; 
    860  1100
    861  1100				   .
    862  1100							; 
    863  1100
    864  1100				   .
    865  1100							; 
    866  1100
    867  1100				   .
    868  1100							; 
    869  1100
    870  1100				   .
    871  1100							; 
    872  1100
    873  1100				   .
    874  1100							; 
    875  1100
    876  1100				   .L0176		;  dim _sc1  =  score
    877  1100
    878  1100				   .L0177		;  dim _sc2  =  score + 1
    879  1100
    880  1100				   .L0178		;  dim _sc3  =  score + 2
    881  1100
    882  1100				   .
    883  1100							; 
    884  1100
    885  1100				   .
    886  1100							; 
    887  1100
    888  1100				   .L0179		;  dim delay_counter  =  a
    889  1100
    890  1100				   .L0180		;  dim frame_counter  =  b
    891  1100
    892  1100				   .
    893  1100							; 
    894  1100
    895  1100				   .L0181		;  dim _BitOp_Ball_Shot_Dir  =  c
    896  1100
    897  1100				   .L0182		;  dim _Bit0_Ball_Shot_Dir_Left1  =  c
    898  1100
    899  1100				   .L0183		;  dim _Bit1_Ball_Shot_Dir_Left2  =  c
    900  1100
    901  1100				   .L0184		;  dim _Bit2_Ball_Shot_Dir_Right1  =  c
    902  1100
    903  1100				   .L0185		;  dim _Bit3_Ball_Shot_Dir_Right2  =  c
    904  1100
    905  1100				   .
    906  1100							; 
    907  1100
    908  1100				   .L0186		;  dim _BitOp_M0_Dir  =  d
    909  1100
    910  1100				   .L0187		;  dim _Bit0_M0_Dir_Up  =  d
    911  1100
    912  1100				   .L0188		;  dim _Bit1_M0_Dir_Down  =  d
    913  1100
    914  1100				   .L0189		;  dim _Bit2_M0_Dir_Left  =  d
    915  1100
    916  1100				   .L0190		;  dim _Bit3_M0_Dir_Right  =  d
    917  1100
    918  1100				   .
    919  1100							; 
    920  1100
    921  1100				   .L0191		;  dim _BitOp_P1_Dir  =  e
    922  1100
    923  1100				   .L0192		;  dim _Bit0_P1_Dir_Up  =  e
    924  1100
    925  1100				   .L0193		;  dim _Bit1_P1_Dir_Down  =  e
    926  1100
    927  1100				   .L0194		;  dim _Bit2_P1_Dir_Left  =  e
    928  1100
    929  1100				   .L0195		;  dim _Bit3_P1_Dir_Right  =  e
    930  1100
    931  1100				   .
    932  1100							; 
    933  1100
    934  1100				   .
    935  1100							; 
    936  1100
    937  1100				   .L0196		;  dim _Ch0_Sound  =  f
    938  1100
    939  1100				   .L0197		;  dim _Ch0_Duration  =  g
    940  1100
    941  1100				   .L0198		;  dim _Ch0_Counter  =  h
    942  1100
    943  1100				   .
    944  1100							; 
    945  1100
    946  1100				   .L0199		;  dim extra_wall_move_x  =  i
    947  1100
    948  1100				   .L0200		;  dim roommate_move_x  =  j
    949  1100
    950  1100				   .L0201		;  dim roommate_type  =  k
    951  1100
    952  1100				   .
    953  1100							; 
    954  1100
    955  1100				   .L0202		;  dim _BitOp_Flip_positions  =  l
    956  1100
    957  1100				   .L0203		;  dim _Bit0_New_Room_P1_Flip	=  l
    958  1100
    959  1100				   .L0204		;  dim _Bit1_Safe_Point_P1_Flip  =  l
    960  1100
    961  1100				   .L0205		;  dim Safe_Point_P1_x  =  m
    962  1100
    963  1100				   .L0206		;  dim Safe_Point_P1_y  =  n
    964  1100
    965  1100				   .
    966  1100							; 
    967  1100
    968  1100				   .L0207		;  dim _Ch1_Duration  =  o
    969  1100
    970  1100				   .
    971  1100							; 
    972  1100
    973  1100				   .
    974  1100							; 
    975  1100
    976  1100				   .L0208		;  rem 16 bit velocity
    977  1100
    978  1100				   .L0209		;  dim Bally_velocity	=  p.q
    979  1100
    980  1100				   .L0210		;  rem 16 bit ball y position
    981  1100
    982  1100				   .L0211		;  dim Bally_position	=  ball_shoot_y.r
    983  1100
    984  1100				   .
    985  1100							; 
    986  1100
    987  1100				   .L0212		;  rem 16 bit velocity
    988  1100
    989  1100				   .L0213		;  dim M0y_velocity  =  s.t
    990  1100
    991  1100				   .L0214		;  rem 16 bit missile0 y position
    992  1100
    993  1100				   .L0215		;  dim M0y_position  =  missile0y.u
    994  1100
    995  1100				   .
    996  1100							; 
    997  1100
    998  1100				   .L0216		;  rem 16 bit velocity
    999  1100
   1000  1100				   .L0217		;  dim P1y_velocity  =  v.w
   1001  1100
   1002  1100				   .L0218		;  rem 16 bit player1 y position
   1003  1100
   1004  1100				   .L0219		;  dim P1y_position  =  player1y.x
   1005  1100
   1006  1100				   .
   1007  1100							; 
   1008  1100
   1009  1100				   .L0220		;  rem Various game states
   1010  1100
   1011  1100				   .L0221		;  dim _Bit_Game_State  =  y
   1012  1100
   1013  1100				   .L0222		;  dim _Bit0_Rotor_Sound_On  =  y
   1014  1100
   1015  1100				   .
   1016  1100							; 
   1017  1100
   1018  1100				   .L0223		;  dim _Bit2_roommate_Dir  =  y
   1019  1100
   1020  1100				   .L0224		;  dim _Bit3_Safe_Point_reached  =  y
   1021  1100
   1022  1100				   .L0225		;  dim _Bit4_Wall_Dir	=  y
   1023  1100
   1024  1100				   .L0226		;  dim _Bit5_Request_Pending  =  y
   1025  1100
   1026  1100				   .L0227		;  dim _Bit6_Flip_P1  =  y
   1027  1100
   1028  1100				   .L0228		;  dim _Bit7_FireB_Restrainer	=  y
   1029  1100
   1030  1100				   .
   1031  1100							; 
   1032  1100
   1033  1100				   .L0229		;  dim rand16	=  z
   1034  1100
   1035  1100				   .
   1036  1100							; 
   1037  1100
   1038  1100				   .
   1039  1100							; 
   1040  1100
   1041  1100				   .L0230		;  dim new_room_player1y  =  var0
   1042  1100
   1043  1100				   .L0231		;  dim new_room_player1x  =  var1
   1044  1100
   1045  1100				   .L0232		;  dim gamenumber  =  var2
   1046  1100
   1047  1100				   .
   1048  1100							; 
   1049  1100
   1050  1100				   .L0233		;  dim max_pub_level_bcd1  =  var3
   1051  1100
   1052  1100				   .L0234		;  dim max_pub_level_bcd2  =  var4
   1053  1100
   1054  1100				   .L0235		;  dim max_pub_level_bcd3  =  var5
   1055  1100
   1056  1100				   .L0236		;  dim max_priv_level_bcd1  =	var6
   1057  1100
   1058  1100				   .L0237		;  dim max_priv_level_bcd2  =	var7
   1059  1100
   1060  1100				   .L0238		;  dim max_priv_level_bcd3  =	var8
   1061  1100
   1062  1100				   .
   1063  1100							; 
   1064  1100
   1065  1100				   .L0239		;  dim has_private_levels  =  var9
   1066  1100
   1067  1100				   .L0240		;  dim ball_shoot_x  =  var10
   1068  1100
   1069  1100				   .L0241		;  dim ball_shoot_y  =  var11
   1070  1100
   1071  1100				   .
   1072  1100							; 
   1073  1100
   1074  1100				   .L0242		;  dim men_to_rescue  =  var12
   1075  1100
   1076  1100				   .L0243		;  dim TextIndex  =  var12
   1077  1100
   1078  1100				   .
   1079  1100							; 
   1080  1100
   1081  1100				   .L0244		;  dim bonus_bcd_counter  =  var13
   1082  1100
   1083  1100				   .
   1084  1100							; 
   1085  1100
   1086  1100				   .L0245		;  dim enemy_game_state  =  var14
   1087  1100
   1088  1100				   .
   1089  1100							; 
   1090  1100
   1091  1100				   .L0246		;  dim next_shoot_rand  =  var16
   1092  1100
   1093  1100				   .
   1094  1100							; 
   1095  1100
   1096  1100				   .L0247		;  dim Game_Status  =	var47
   1097  1100
   1098  1100				   .
   1099  1100							; 
   1100  1100
   1101  1100				   .
   1102  1100							; 
   1103  1100
   1104  1100				   .
   1105  1100							; 
   1106  1100
   1107  1100				   .
   1108  1100							; 
   1109  1100
   1110  1100				   .
   1111  1100							; 
   1112  1100
   1113  1100				   .
   1114  1100							; 
   1115  1100
   1116  1100				   .
   1117  1100							; 
   1118  1100
   1119  1100				   .
   1120  1100							; 
   1121  1100
   1122  1100				   .
   1123  1100							; 
   1124  1100
   1125  1100				   .
   1126  1100							; 
   1127  1100
   1128  1100				   .
   1129  1100							; 
   1130  1100
   1131  1100				   .L0248		;  dim w_room_definition_start  =  w093
   1132  1100
   1133  1100				   .
   1134  1100							; 
   1135  1100
   1136  1100				   .L0249		;  dim r_level_bonus_bcd_points  =  r093
   1137  1100
   1138  1100				   .L0250		;  dim w_level_bonus_bcd_points  =  w093
   1139  1100
   1140  1100				   .L0251		;  dim r_men_to_rescue_in_this_level =  r094
   1141  1100
   1142  1100				   .L0252		;  dim w_men_to_rescue_in_this_level =  w094
   1143  1100
   1144  1100				   .L0253		;  dim r_BitOp_room_type  =  r095
   1145  1100
   1146  1100				   .L0254		;  dim w_BitOp_room_type  =  w095
   1147  1100
   1148  1100				   .L0255		;  dim r_room_color_top  =  r096
   1149  1100
   1150  1100				   .L0256		;  dim w_room_color_top  =  w096
   1151  1100
   1152  1100				   .L0257		;  dim r_room_color_middle  =	r097
   1153  1100
   1154  1100				   .L0258		;  dim w_room_color_middle  =	w097
   1155  1100
   1156  1100				   .L0259		;  dim r_room_color_waste1  =	r098
   1157  1100
   1158  1100				   .L0260		;  dim w_room_color_waste1  =	w098
   1159  1100
   1160  1100				   .L0261		;  dim r_room_color_waste2  =	r099
   1161  1100
   1162  1100				   .L0262		;  dim w_room_color_waste2  =	w099
   1163  1100
   1164  1100				   .L0263		;  dim r_room_color_waste3  =	r100
   1165  1100
   1166  1100				   .L0264		;  dim w_room_color_waste4  =	w100
   1167  1100
   1168  1100				   .L0265		;  dim r_room_color_bottom  =	r101
   1169  1100
   1170  1100				   .L0266		;  dim w_room_color_bottom  =	w101
   1171  1100
   1172  1100				   .L0267		;  dim r_roommate_type_and_range  =  r102
   1173  1100
   1174  1100				   .L0268		;  dim w_roommate_type_and_range  =  w102
   1175  1100
   1176  1100				   .L0269		;  dim r_roommate_startpos_x  =  r103
   1177  1100
   1178  1100				   .L0270		;  dim w_roommate_startpos_x  =  w103
   1179  1100
   1180  1100				   .L0271		;  dim r_roommate_startpos_y  =  r104
   1181  1100
   1182  1100				   .L0272		;  dim w_roommate_startpos_y  =  w104
   1183  1100
   1184  1100				   .L0273		;  dim r_extra_wall_type_and_range  =	r105
   1185  1100
   1186  1100				   .L0274		;  dim w_extra_wall_type_and_range  =	w105
   1187  1100
   1188  1100				   .L0275		;  dim r_extra_wall_width  =  r106
   1189  1100
   1190  1100				   .L0276		;  dim w_extra_wall_width  =  w106
   1191  1100
   1192  1100				   .L0277		;  dim r_extra_wall_height  =	r107
   1193  1100
   1194  1100				   .L0278		;  dim w_extra_wall_height  =	w107
   1195  1100
   1196  1100				   .L0279		;  dim r_extra_wall_startpos_1_x  =  r108
   1197  1100
   1198  1100				   .L0280		;  dim w_extra_wall_startpos_1_x  =  w108
   1199  1100
   1200  1100				   .L0281		;  dim r_extra_wall_startpos_1_y  =  r109
   1201  1100
   1202  1100				   .L0282		;  dim w_extra_wall_startpos_1_y  =  w109
   1203  1100
   1204  1100				   .L0283		;  dim r_extra_wall_startpos_2_x  =  r110
   1205  1100
   1206  1100				   .L0284		;  dim w_extra_wall_startpos_2_x  =  w110
   1207  1100
   1208  1100				   .L0285		;  dim r_extra_wall_startpos_2_y  =  r111
   1209  1100
   1210  1100				   .L0286		;  dim w_extra_wall_startpos_2_y  =  w111
   1211  1100
   1212  1100				   .
   1213  1100							; 
   1214  1100
   1215  1100				   .L0287		;  dim r_Bit0_room_type_top  =  r_BitOp_room_type
   1216  1100
   1217  1100				   .L0288		;  dim w_Bit0_room_type_top  =  w_BitOp_room_type
   1218  1100
   1219  1100				   .
   1220  1100							; 
   1221  1100
   1222  1100				   .
   1223  1100							; 
   1224  1100
   1225  1100				   .
   1226  1100							; 
   1227  1100
   1228  1100				   .
   1229  1100							; 
   1230  1100
   1231  1100				   .
   1232  1100							; 
   1233  1100
   1234  1100				   ._Start
   1235  1100							; _Start
   1236  1100
   1237  1100				   .L0289		;  asm
   1238  1100
   1239  1100		       a9 00		      lda	#0
   1240  1102
   1241  1102		       a2 4a		      ldx	#74
   1242  1104
   1243  1104				   .clear_ram
   1244  1104
   1245  1104		       ca		      dex
   1246  1105
   1247  1105		       95 a4		      sta	var0,x
   1248  1107
   1249  1107		       d0 fb		      bne	.clear_ram
   1250  1109
   1251  1109				   .
   1252  1109							; 
   1253  1109
   1254  1109				   .L0290		;  WriteSendBuffer  =	req_load_menu  :  _Bit5_Request_Pending{5}  =  1  :  COLUP0  =	_1C  :	scorecolor  =  _0E
   1255  1109
   1256  1109		       a9 09		      LDA	#req_load_menu
   1257  110b		       8d f1 1f 	      STA	WriteSendBuffer
   1258  110e		       a5 ec		      LDA	_Bit5_Request_Pending
   1259  1110		       09 20		      ORA	#32
   1260  1112		       85 ec		      STA	_Bit5_Request_Pending
   1261  1114		       a9 1c		      LDA	#_1C
   1262  1116		       85 06		      STA	COLUP0
   1263  1118		       a9 0e		      LDA	#_0E
   1264  111a		       85 a3		      STA	scorecolor
   1265  111c				   .L0291		;  score  =  1
   1266  111c
   1267  111c		       a9 01		      LDA	#$01
   1268  111e		       85 95		      STA	score+2
   1269  1120		       a9 00		      LDA	#$00
   1270  1122		       85 94		      STA	score+1
   1271  1124		       a9 00		      LDA	#$00
   1272  1126		       85 93		      STA	score
   1273  1128				   .L0292		;  gamenumber	=  1  :  missile0height  =  1  :  _Ch1_Duration  =  1
   1274  1128
   1275  1128		       a9 01		      LDA	#1
   1276  112a		       85 a6		      STA	gamenumber
   1277  112c		       85 90		      STA	missile0height
   1278  112e		       85 e2		      STA	_Ch1_Duration
   1279  1130				   .L0293		;  _Bit7_FireB_Restrainer{7}  =  1
   1280  1130
   1281  1130		       a5 ec		      LDA	_Bit7_FireB_Restrainer
   1282  1132		       09 80		      ORA	#128
   1283  1134		       85 ec		      STA	_Bit7_FireB_Restrainer
   1284  1136				   .L0294		;  new_room_player1y  =  player_min_y	:  Safe_Point_P1_y  =  player_min_y
   1285  1136
   1286  1136		       a9 02		      LDA	#player_min_y
   1287  1138		       85 a4		      STA	new_room_player1y
   1288  113a		       85 e1		      STA	Safe_Point_P1_y
   1289  113c				   .L0295		;  new_room_player1x  =  30  :  player1x  =  30  :  Safe_Point_P1_x  =  30
   1290  113c
   1291  113c		       a9 1e		      LDA	#30
   1292  113e		       85 a5		      STA	new_room_player1x
   1293  1140		       85 81		      STA	player1x
   1294  1142		       85 e0		      STA	Safe_Point_P1_x
   1295  1144				   .L0296		;  AUDF1  =  31
   1296  1144
   1297  1144		       a9 1f		      LDA	#31
   1298  1146		       85 18		      STA	AUDF1
   1299  1148				   .L0297		;  AUDV0  =  0  :  AUDV1  =  0  :  AUDC1  =  0  :  frame_counter  =  0  :  player0x  =  0  :  bally  =  0  :  player1y  =  0
   1300  1148
   1301  1148		       a9 00		      LDA	#0
   1302  114a		       85 19		      STA	AUDV0
   1303  114c		       85 1a		      STA	AUDV1
   1304  114e		       85 16		      STA	AUDC1
   1305  1150		       85 d5		      STA	frame_counter
   1306  1152		       85 80		      STA	player0x
   1307  1154		       85 89		      STA	bally
   1308  1156		       85 86		      STA	player1y
   1309  1158				   .L0298		;  missile0x  =  200  :  missile0y  =	200  :	w_extra_wall_startpos_1_x  =  200  :  w_roommate_startpos_y  =	200  :	player0y  =  200
   1310  1158
   1311  1158		       a9 c8		      LDA	#200
   1312  115a		       85 82		      STA	missile0x
   1313  115c		       85 91		      STA	missile0y
   1314  115e		       8d 6c f0 	      STA	w_extra_wall_startpos_1_x
   1315  1161		       8d 68 f0 	      STA	w_roommate_startpos_y
   1316  1164		       85 85		      STA	player0y
   1317  1166				   .
   1318  1166							; 
   1319  1166
   1320  1166				   .
   1321  1166							; 
   1322  1166
   1323  1166				   .
   1324  1166							; 
   1325  1166
   1326  1166				   .
   1327  1166							; 
   1328  1166
   1329  1166				   .
   1330  1166							; 
   1331  1166
   1332  1166				   .L0299		;  pfclear
   1333  1166
   1334  1166		       a9 00		      LDA	#0
   1335  1168		       85 ee		      sta	temp7
   1336  116a		       a9 91		      lda	#>(ret_point1-1)
   1337  116c		       48		      pha
   1338  116d		       a9 7f		      lda	#<(ret_point1-1)
   1339  116f		       48		      pha
   1340  1170		       a9 f2		      lda	#>(pfclear-1)
   1341  1172		       48		      pha
   1342  1173		       a9 ee		      lda	#<(pfclear-1)
   1343  1175		       48		      pha
   1344  1176		       a5 ee		      lda	temp7
   1345  1178		       48		      pha
   1346  1179		       8a		      txa
   1347  117a		       48		      pha
   1348  117b		       a2 04		      ldx	#4
   1349  117d		       4c e8 ff 	      jmp	BS_jsr
   1350  1180				   ret_point1
   1351  1180				   .L0300		;  gosub _Set_Player_1_Colors
   1352  1180
   1353  1180		       20 a3 9c 	      jsr	._Set_Player_1_Colors
   1354  1183
   1355  1183				   .
   1356  1183							; 
   1357  1183
   1358  1183				   .L0301		;  goto _titlescreen_menu bank2
   1359  1183
   1360  1183		       85 ee		      sta	temp7
   1361  1185		       a9 b0		      lda	#>(._titlescreen_menu-1)
   1362  1187		       48		      pha
   1363  1188		       a9 ff		      lda	#<(._titlescreen_menu-1)
   1364  118a		       48		      pha
   1365  118b		       a5 ee		      lda	temp7
   1366  118d		       48		      pha
   1367  118e		       8a		      txa
   1368  118f		       48		      pha
   1369  1190		       a2 02		      ldx	#2
   1370  1192		       4c e8 ff 	      jmp	BS_jsr
   1371  1195				   .
   1372  1195							; 
   1373  1195
   1374  1195				   .
   1375  1195							; 
   1376  1195
   1377  1195				   .
   1378  1195							; 
   1379  1195
   1380  1195				   .
   1381  1195							; 
   1382  1195
   1383  1195				   .__Main_Loop
   1384  1195							; __Main_Loop
   1385  1195
   1386  1195				   .L0302		;  if switchreset then goto _Reset_To_Start
   1387  1195
   1388  1195		       a9 01		      lda	#1
   1389  1197		       2c 82 02 	      bit	SWCHB
   1390  119a		       d0 03		      BNE	.skipL0302
   1391  119c				   .condpart0
   1392  119c		       4c 8f 9e 	      jmp	._Reset_To_Start
   1393  119f
   1394  119f				   .skipL0302
   1395  119f				   .
   1396  119f							; 
   1397  119f
   1398  119f				   .L0303		;  COLUPF  =  r_room_color_top
   1399  119f
   1400  119f		       ad e0 f0 	      LDA	r_room_color_top
   1401  11a2		       85 08		      STA	COLUPF
   1402  11a4				   .L0304		;  NUSIZ1  =  $05
   1403  11a4
   1404  11a4		       a9 05		      LDA	#$05
   1405  11a6		       85 05		      STA	NUSIZ1
   1406  11a8				   .L0305		;  NUSIZ0  =  $10
   1407  11a8
   1408  11a8		       a9 10		      LDA	#$10
   1409  11aa		       85 04		      STA	NUSIZ0
   1410  11ac				   .L0306		;  COLUBK  =  _00
   1411  11ac
   1412  11ac		       a9 00		      LDA	#_00
   1413  11ae		       85 09		      STA	COLUBK
   1414  11b0				   .L0307		;  TextColor  =  $0E
   1415  11b0
   1416  11b0		       a9 0e		      LDA	#$0E
   1417  11b2		       85 f5		      STA	TextColor
   1418  11b4				   .
   1419  11b4							; 
   1420  11b4
   1421  11b4				   .L0308		;  if Game_Status  <>	3 then _player_alive
   1422  11b4
   1423  11b4		       a5 d3		      LDA	Game_Status
   1424  11b6		       c9 03		      CMP	#3
   1425  11b8					      if	((* - ._player_alive) < 127) && ((* - ._player_alive) > -128)
   1426  11b8		       d0 22		      BNE	._player_alive
   1427  11ba				  -	      else
   1428  11ba				  -	      beq	.0skip_player_alive
   1429  11ba				  -	      jmp	._player_alive
   1430  11ba				  -.0skip_player_alive
   1431  11ba					      endif
   1432  11ba				   .
   1433  11ba							; 
   1434  11ba
   1435  11ba				   .L0309		;  temp4  =  frame_counter  /	8
   1436  11ba
   1437  11ba		       a5 d5		      LDA	frame_counter
   1438  11bc		       4a		      lsr
   1439  11bd		       4a		      lsr
   1440  11be		       4a		      lsr
   1441  11bf		       85 9f		      STA	temp4
   1442  11c1				   .L0310		;  on temp4 goto _explosion_4_p1 _explosion_4_p1 _explosion_3_p1 _explosion_2_p1 _explosion_2_p1 _explosion_1_p1 _explosion_1_p1 _explosion_0_p1
   1443  11c1
   1444  11c1		       a6 9f		      LDX	temp4
   1445  11c3		       bd cc 91 	      LDA	.L0310jumptablehi,x
   1446  11c6		       48		      PHA
   1447  11c7		       bd d4 91 	      LDA	.L0310jumptablelo,x
   1448  11ca		       48		      PHA
   1449  11cb		       60		      RTS
   1450  11cc				   .L0310jumptablehi
   1451  11cc		       92		      .byte.b	>(._explosion_4_p1-1)
   1452  11cd		       92		      .byte.b	>(._explosion_4_p1-1)
   1453  11ce		       92		      .byte.b	>(._explosion_3_p1-1)
   1454  11cf		       92		      .byte.b	>(._explosion_2_p1-1)
   1455  11d0		       92		      .byte.b	>(._explosion_2_p1-1)
   1456  11d1		       92		      .byte.b	>(._explosion_1_p1-1)
   1457  11d2		       92		      .byte.b	>(._explosion_1_p1-1)
   1458  11d3		       91		      .byte.b	>(._explosion_0_p1-1)
   1459  11d4				   .L0310jumptablelo
   1460  11d4		       3b		      .byte.b	<(._explosion_4_p1-1)
   1461  11d5		       3b		      .byte.b	<(._explosion_4_p1-1)
   1462  11d6		       2c		      .byte.b	<(._explosion_3_p1-1)
   1463  11d7		       1d		      .byte.b	<(._explosion_2_p1-1)
   1464  11d8		       1d		      .byte.b	<(._explosion_2_p1-1)
   1465  11d9		       0e		      .byte.b	<(._explosion_1_p1-1)
   1466  11da		       0e		      .byte.b	<(._explosion_1_p1-1)
   1467  11db		       ff		      .byte.b	<(._explosion_0_p1-1)
   1468  11dc				   .
   1469  11dc							; 
   1470  11dc
   1471  11dc				   .
   1472  11dc							; 
   1473  11dc
   1474  11dc				   ._player_alive
   1475  11dc							; _player_alive
   1476  11dc
   1477  11dc				   .L0311		;  if !frame_counter{2} then _player_second_frame
   1478  11dc
   1479  11dc		       a5 d5		      LDA	frame_counter
   1480  11de		       29 04		      AND	#4
   1481  11e0					      if	((* - ._player_second_frame) < 127) && ((* - ._player_second_frame) > -128)
   1482  11e0		       f0 0f		      BEQ	._player_second_frame
   1483  11e2				  -	      else
   1484  11e2				  -	      bne	.1skip_player_second_frame
   1485  11e2				  -	      jmp	._player_second_frame
   1486  11e2				  -.1skip_player_second_frame
   1487  11e2					      endif
   1488  11e2				   .L0312		;  player1: 
   1489  11e2
   1490  11e2		       a2 14		      LDX	#<playerL0312_1
   1491  11e4		       86 8c		      STX	player1pointerlo
   1492  11e6		       a9 fc		      LDA	#>playerL0312_1
   1493  11e8		       85 8d		      STA	player1pointerhi
   1494  11ea		       a9 07		      LDA	#7
   1495  11ec		       85 8f		      STA	player1height
   1496  11ee				   .L0313		;  goto _roommate_def_start
   1497  11ee
   1498  11ee		       4c 56 92 	      jmp	._roommate_def_start
   1499  11f1
   1500  11f1				   ._player_second_frame
   1501  11f1							; _player_second_frame
   1502  11f1
   1503  11f1				   .L0314		;  player1:
   1504  11f1
   1505  11f1		       a2 1c		      LDX	#<playerL0314_1
   1506  11f3		       86 8c		      STX	player1pointerlo
   1507  11f5		       a9 fc		      LDA	#>playerL0314_1
   1508  11f7		       85 8d		      STA	player1pointerhi
   1509  11f9		       a9 07		      LDA	#7
   1510  11fb		       85 8f		      STA	player1height
   1511  11fd				   .L0315		;  goto _roommate_def_start
   1512  11fd
   1513  11fd		       4c 56 92 	      jmp	._roommate_def_start
   1514  1200
   1515  1200				   .
   1516  1200							; 
   1517  1200
   1518  1200				   ._explosion_0_p1
   1519  1200							; _explosion_0_p1
   1520  1200
   1521  1200				   .L0316		;  player1: 
   1522  1200
   1523  1200		       a2 24		      LDX	#<playerL0316_1
   1524  1202		       86 8c		      STX	player1pointerlo
   1525  1204		       a9 fc		      LDA	#>playerL0316_1
   1526  1206		       85 8d		      STA	player1pointerhi
   1527  1208		       a9 07		      LDA	#7
   1528  120a		       85 8f		      STA	player1height
   1529  120c				   .L0317		;  goto _End_Explosion_Definition
   1530  120c
   1531  120c		       4c 48 92 	      jmp	._End_Explosion_Definition
   1532  120f
   1533  120f				   ._explosion_1_p1
   1534  120f							; _explosion_1_p1
   1535  120f
   1536  120f				   .L0318		;  player1: 
   1537  120f
   1538  120f		       a2 2c		      LDX	#<playerL0318_1
   1539  1211		       86 8c		      STX	player1pointerlo
   1540  1213		       a9 fc		      LDA	#>playerL0318_1
   1541  1215		       85 8d		      STA	player1pointerhi
   1542  1217		       a9 07		      LDA	#7
   1543  1219		       85 8f		      STA	player1height
   1544  121b				   .L0319		;  goto _End_Explosion_Definition
   1545  121b
   1546  121b		       4c 48 92 	      jmp	._End_Explosion_Definition
   1547  121e
   1548  121e				   ._explosion_2_p1
   1549  121e							; _explosion_2_p1
   1550  121e
   1551  121e				   .L0320		;  player1: 
   1552  121e
   1553  121e		       a2 34		      LDX	#<playerL0320_1
   1554  1220		       86 8c		      STX	player1pointerlo
   1555  1222		       a9 fc		      LDA	#>playerL0320_1
   1556  1224		       85 8d		      STA	player1pointerhi
   1557  1226		       a9 07		      LDA	#7
   1558  1228		       85 8f		      STA	player1height
   1559  122a				   .L0321		;  goto _End_Explosion_Definition
   1560  122a
   1561  122a		       4c 48 92 	      jmp	._End_Explosion_Definition
   1562  122d
   1563  122d				   ._explosion_3_p1
   1564  122d							; _explosion_3_p1
   1565  122d
   1566  122d				   .L0322		;  player1: 
   1567  122d
   1568  122d		       a2 3c		      LDX	#<playerL0322_1
   1569  122f		       86 8c		      STX	player1pointerlo
   1570  1231		       a9 fc		      LDA	#>playerL0322_1
   1571  1233		       85 8d		      STA	player1pointerhi
   1572  1235		       a9 08		      LDA	#8
   1573  1237		       85 8f		      STA	player1height
   1574  1239				   .L0323		;  goto _End_Explosion_Definition
   1575  1239
   1576  1239		       4c 48 92 	      jmp	._End_Explosion_Definition
   1577  123c
   1578  123c				   ._explosion_4_p1
   1579  123c							; _explosion_4_p1
   1580  123c
   1581  123c				   .L0324		;  player1:
   1582  123c
   1583  123c		       a2 45		      LDX	#<playerL0324_1
   1584  123e		       86 8c		      STX	player1pointerlo
   1585  1240		       a9 fc		      LDA	#>playerL0324_1
   1586  1242		       85 8d		      STA	player1pointerhi
   1587  1244		       a9 09		      LDA	#9
   1588  1246		       85 8f		      STA	player1height
   1589  1248				   .
   1590  1248							; 
   1591  1248
   1592  1248				   ._End_Explosion_Definition
   1593  1248							; _End_Explosion_Definition
   1594  1248
   1595  1248				   .L0325		;  if frame_counter then _roommate_def_start
   1596  1248
   1597  1248		       a5 d5		      LDA	frame_counter
   1598  124a					      if	((* - ._roommate_def_start) < 127) && ((* - ._roommate_def_start) > -128)
   1599  124a		       d0 0a		      BNE	._roommate_def_start
   1600  124c				  -	      else
   1601  124c				  -	      beq	.2skip_roommate_def_start
   1602  124c				  -	      jmp	._roommate_def_start
   1603  124c				  -.2skip_roommate_def_start
   1604  124c					      endif
   1605  124c				   .L0326		;  Game_Status  =  game_state_run
   1606  124c
   1607  124c		       a9 00		      LDA	#game_state_run
   1608  124e		       85 d3		      STA	Game_Status
   1609  1250				   .L0327		;  gosub _Set_Player_1_Colors
   1610  1250
   1611  1250		       20 a3 9c 	      jsr	._Set_Player_1_Colors
   1612  1253
   1613  1253				   .L0328		;  goto _Decrease_live_counter
   1614  1253
   1615  1253		       4c e9 9c 	      jmp	._Decrease_live_counter
   1616  1256
   1617  1256				   .
   1618  1256							; 
   1619  1256
   1620  1256				   .
   1621  1256							; 
   1622  1256
   1623  1256				   .
   1624  1256							; 
   1625  1256
   1626  1256				   ._roommate_def_start
   1627  1256							; _roommate_def_start
   1628  1256
   1629  1256				   .L0329		;  on roommate_type goto _roommate_Enemy_def _roommate_Air_Missile_def _roommate_Fuel_def _roommate_Soldier_def
   1630  1256
   1631  1256		       a6 de		      LDX	roommate_type
   1632  1258		       bd 61 92 	      LDA	.L0329jumptablehi,x
   1633  125b		       48		      PHA
   1634  125c		       bd 65 92 	      LDA	.L0329jumptablelo,x
   1635  125f		       48		      PHA
   1636  1260		       60		      RTS
   1637  1261				   .L0329jumptablehi
   1638  1261		       92		      .byte.b	>(._roommate_Enemy_def-1)
   1639  1262		       93		      .byte.b	>(._roommate_Air_Missile_def-1)
   1640  1263		       93		      .byte.b	>(._roommate_Fuel_def-1)
   1641  1264		       93		      .byte.b	>(._roommate_Soldier_def-1)
   1642  1265				   .L0329jumptablelo
   1643  1265		       68		      .byte.b	<(._roommate_Enemy_def-1)
   1644  1266		       21		      .byte.b	<(._roommate_Air_Missile_def-1)
   1645  1267		       a2		      .byte.b	<(._roommate_Fuel_def-1)
   1646  1268		       b1		      .byte.b	<(._roommate_Soldier_def-1)
   1647  1269				   .
   1648  1269							; 
   1649  1269
   1650  1269				   ._roommate_Enemy_def
   1651  1269							; _roommate_Enemy_def
   1652  1269
   1653  1269				   .L0330		;  if !enemy_game_state then _enemy_alive
   1654  1269
   1655  1269		       a5 b2		      LDA	enemy_game_state
   1656  126b					      if	((* - ._enemy_alive) < 127) && ((* - ._enemy_alive) > -128)
   1657  126b		       f0 22		      BEQ	._enemy_alive
   1658  126d				  -	      else
   1659  126d				  -	      bne	.3skip_enemy_alive
   1660  126d				  -	      jmp	._enemy_alive
   1661  126d				  -.3skip_enemy_alive
   1662  126d					      endif
   1663  126d				   .
   1664  126d							; 
   1665  126d
   1666  126d				   .L0331		;  temp4  =  frame_counter  /	8
   1667  126d
   1668  126d		       a5 d5		      LDA	frame_counter
   1669  126f		       4a		      lsr
   1670  1270		       4a		      lsr
   1671  1271		       4a		      lsr
   1672  1272		       85 9f		      STA	temp4
   1673  1274				   .
   1674  1274							; 
   1675  1274
   1676  1274				   .
   1677  1274							; 
   1678  1274
   1679  1274				   .
   1680  1274							; 
   1681  1274
   1682  1274				   .L0332		;  on temp4 goto _enemy_expl_0 _enemy_expl_1 _enemy_expl_2 _enemy_expl_3 _enemy_expl_4 _enemy_expl_4 _enemy_expl_4 _enemy_expl_4
   1683  1274
   1684  1274		       a6 9f		      LDX	temp4
   1685  1276		       bd 7f 92 	      LDA	.L0332jumptablehi,x
   1686  1279		       48		      PHA
   1687  127a		       bd 87 92 	      LDA	.L0332jumptablelo,x
   1688  127d		       48		      PHA
   1689  127e		       60		      RTS
   1690  127f				   .L0332jumptablehi
   1691  127f		       92		      .byte.b	>(._enemy_expl_0-1)
   1692  1280		       92		      .byte.b	>(._enemy_expl_1-1)
   1693  1281		       92		      .byte.b	>(._enemy_expl_2-1)
   1694  1282		       92		      .byte.b	>(._enemy_expl_3-1)
   1695  1283		       92		      .byte.b	>(._enemy_expl_4-1)
   1696  1284		       92		      .byte.b	>(._enemy_expl_4-1)
   1697  1285		       92		      .byte.b	>(._enemy_expl_4-1)
   1698  1286		       92		      .byte.b	>(._enemy_expl_4-1)
   1699  1287				   .L0332jumptablelo
   1700  1287		       b2		      .byte.b	<(._enemy_expl_0-1)
   1701  1288		       c5		      .byte.b	<(._enemy_expl_1-1)
   1702  1289		       d8		      .byte.b	<(._enemy_expl_2-1)
   1703  128a		       eb		      .byte.b	<(._enemy_expl_3-1)
   1704  128b		       fe		      .byte.b	<(._enemy_expl_4-1)
   1705  128c		       fe		      .byte.b	<(._enemy_expl_4-1)
   1706  128d		       fe		      .byte.b	<(._enemy_expl_4-1)
   1707  128e		       fe		      .byte.b	<(._enemy_expl_4-1)
   1708  128f				   .
   1709  128f							; 
   1710  128f
   1711  128f				   ._enemy_alive
   1712  128f							; _enemy_alive
   1713  128f
   1714  128f				   .L0333		;  if !frame_counter{2} then _enemy_second_frame
   1715  128f
   1716  128f		       a5 d5		      LDA	frame_counter
   1717  1291		       29 04		      AND	#4
   1718  1293					      if	((* - ._enemy_second_frame) < 127) && ((* - ._enemy_second_frame) > -128)
   1719  1293		       f0 0f		      BEQ	._enemy_second_frame
   1720  1295				  -	      else
   1721  1295				  -	      bne	.4skip_enemy_second_frame
   1722  1295				  -	      jmp	._enemy_second_frame
   1723  1295				  -.4skip_enemy_second_frame
   1724  1295					      endif
   1725  1295				   .L0334		;  player0: 
   1726  1295
   1727  1295		       a2 4f		      LDX	#<playerL0334_0
   1728  1297		       86 8a		      STX	player0pointerlo
   1729  1299		       a9 fc		      LDA	#>playerL0334_0
   1730  129b		       85 8b		      STA	player0pointerhi
   1731  129d		       a9 06		      LDA	#6
   1732  129f		       85 8e		      STA	player0height
   1733  12a1				   .L0335		;  goto _roommate_End_def
   1734  12a1
   1735  12a1		       4c d6 93 	      jmp	._roommate_End_def
   1736  12a4
   1737  12a4				   .
   1738  12a4							; 
   1739  12a4
   1740  12a4				   ._enemy_second_frame
   1741  12a4							; _enemy_second_frame
   1742  12a4
   1743  12a4				   .L0336		;  player0: 
   1744  12a4
   1745  12a4		       a2 56		      LDX	#<playerL0336_0
   1746  12a6		       86 8a		      STX	player0pointerlo
   1747  12a8		       a9 fc		      LDA	#>playerL0336_0
   1748  12aa		       85 8b		      STA	player0pointerhi
   1749  12ac		       a9 06		      LDA	#6
   1750  12ae		       85 8e		      STA	player0height
   1751  12b0				   .L0337		;  goto _roommate_End_def
   1752  12b0
   1753  12b0		       4c d6 93 	      jmp	._roommate_End_def
   1754  12b3
   1755  12b3				   .
   1756  12b3							; 
   1757  12b3
   1758  12b3				   ._enemy_expl_0
   1759  12b3							; _enemy_expl_0
   1760  12b3
   1761  12b3				   .L0338		;  player0: 
   1762  12b3
   1763  12b3		       a2 5d		      LDX	#<playerL0338_0
   1764  12b5		       86 8a		      STX	player0pointerlo
   1765  12b7		       a9 fc		      LDA	#>playerL0338_0
   1766  12b9		       85 8b		      STA	player0pointerhi
   1767  12bb		       a9 0a		      LDA	#10
   1768  12bd		       85 8e		      STA	player0height
   1769  12bf				   .L0339		;  COLUP0  =  _04
   1770  12bf
   1771  12bf		       a9 04		      LDA	#_04
   1772  12c1		       85 06		      STA	COLUP0
   1773  12c3				   .L0340		;  goto _roommate_explosion_End_def
   1774  12c3
   1775  12c3		       4c 0f 93 	      jmp	._roommate_explosion_End_def
   1776  12c6
   1777  12c6				   ._enemy_expl_1
   1778  12c6							; _enemy_expl_1
   1779  12c6
   1780  12c6				   .L0341		;  player0: 
   1781  12c6
   1782  12c6		       a2 68		      LDX	#<playerL0341_0
   1783  12c8		       86 8a		      STX	player0pointerlo
   1784  12ca		       a9 fc		      LDA	#>playerL0341_0
   1785  12cc		       85 8b		      STA	player0pointerhi
   1786  12ce		       a9 07		      LDA	#7
   1787  12d0		       85 8e		      STA	player0height
   1788  12d2				   .L0342		;  COLUP0  =  _42
   1789  12d2
   1790  12d2		       a9 42		      LDA	#_42
   1791  12d4		       85 06		      STA	COLUP0
   1792  12d6				   .L0343		;  goto _roommate_explosion_End_def
   1793  12d6
   1794  12d6		       4c 0f 93 	      jmp	._roommate_explosion_End_def
   1795  12d9
   1796  12d9				   ._enemy_expl_2
   1797  12d9							; _enemy_expl_2
   1798  12d9
   1799  12d9				   .L0344		;  player0: 
   1800  12d9
   1801  12d9		       a2 70		      LDX	#<playerL0344_0
   1802  12db		       86 8a		      STX	player0pointerlo
   1803  12dd		       a9 fc		      LDA	#>playerL0344_0
   1804  12df		       85 8b		      STA	player0pointerhi
   1805  12e1		       a9 06		      LDA	#6
   1806  12e3		       85 8e		      STA	player0height
   1807  12e5				   .L0345		;  COLUP0  =  _46
   1808  12e5
   1809  12e5		       a9 46		      LDA	#_46
   1810  12e7		       85 06		      STA	COLUP0
   1811  12e9				   .L0346		;  goto _roommate_explosion_End_def
   1812  12e9
   1813  12e9		       4c 0f 93 	      jmp	._roommate_explosion_End_def
   1814  12ec
   1815  12ec				   ._enemy_expl_3
   1816  12ec							; _enemy_expl_3
   1817  12ec
   1818  12ec				   .L0347		;  player0: 
   1819  12ec
   1820  12ec		       a2 77		      LDX	#<playerL0347_0
   1821  12ee		       86 8a		      STX	player0pointerlo
   1822  12f0		       a9 fc		      LDA	#>playerL0347_0
   1823  12f2		       85 8b		      STA	player0pointerhi
   1824  12f4		       a9 08		      LDA	#8
   1825  12f6		       85 8e		      STA	player0height
   1826  12f8				   .L0348		;  COLUP0  =  _4A
   1827  12f8
   1828  12f8		       a9 4a		      LDA	#_4A
   1829  12fa		       85 06		      STA	COLUP0
   1830  12fc				   .L0349		;  goto _roommate_explosion_End_def
   1831  12fc
   1832  12fc		       4c 0f 93 	      jmp	._roommate_explosion_End_def
   1833  12ff
   1834  12ff				   ._enemy_expl_4
   1835  12ff							; _enemy_expl_4
   1836  12ff
   1837  12ff				   .L0350		;  player0:
   1838  12ff
   1839  12ff		       a2 80		      LDX	#<playerL0350_0
   1840  1301		       86 8a		      STX	player0pointerlo
   1841  1303		       a9 fc		      LDA	#>playerL0350_0
   1842  1305		       85 8b		      STA	player0pointerhi
   1843  1307		       a9 08		      LDA	#8
   1844  1309		       85 8e		      STA	player0height
   1845  130b				   .L0351		;  COLUP0  =  _4E
   1846  130b
   1847  130b		       a9 4e		      LDA	#_4E
   1848  130d		       85 06		      STA	COLUP0
   1849  130f				   .
   1850  130f							; 
   1851  130f
   1852  130f				   ._roommate_explosion_End_def
   1853  130f							; _roommate_explosion_End_def
   1854  130f
   1855  130f				   .
   1856  130f							; 
   1857  130f
   1858  130f				   .
   1859  130f							; 
   1860  130f
   1861  130f				   .L0352		;  if !frame_counter then enemy_game_state  =	0 :  COLUP0  =	_1C  :	player0y  =  200
   1862  130f
   1863  130f		       a5 d5		      LDA	frame_counter
   1864  1311		       d0 0c		      BNE	.skipL0352
   1865  1313				   .condpart1
   1866  1313		       a9 00		      LDA	#0
   1867  1315		       85 b2		      STA	enemy_game_state
   1868  1317		       a9 1c		      LDA	#_1C
   1869  1319		       85 06		      STA	COLUP0
   1870  131b		       a9 c8		      LDA	#200
   1871  131d		       85 85		      STA	player0y
   1872  131f				   .skipL0352
   1873  131f				   .L0353		;  goto _roommate_End_def
   1874  131f
   1875  131f		       4c d6 93 	      jmp	._roommate_End_def
   1876  1322
   1877  1322				   .
   1878  1322							; 
   1879  1322
   1880  1322				   .
   1881  1322							; 
   1882  1322
   1883  1322				   ._roommate_Air_Missile_def
   1884  1322							; _roommate_Air_Missile_def
   1885  1322
   1886  1322				   .L0354		;  if !enemy_game_state then _Air_Missile_alive
   1887  1322
   1888  1322		       a5 b2		      LDA	enemy_game_state
   1889  1324					      if	((* - ._Air_Missile_alive) < 127) && ((* - ._Air_Missile_alive) > -128)
   1890  1324		       f0 22		      BEQ	._Air_Missile_alive
   1891  1326				  -	      else
   1892  1326				  -	      bne	.5skip_Air_Missile_alive
   1893  1326				  -	      jmp	._Air_Missile_alive
   1894  1326				  -.5skip_Air_Missile_alive
   1895  1326					      endif
   1896  1326				   .
   1897  1326							; 
   1898  1326
   1899  1326				   .L0355		;  temp4  =  frame_counter  /	8
   1900  1326
   1901  1326		       a5 d5		      LDA	frame_counter
   1902  1328		       4a		      lsr
   1903  1329		       4a		      lsr
   1904  132a		       4a		      lsr
   1905  132b		       85 9f		      STA	temp4
   1906  132d				   .
   1907  132d							; 
   1908  132d
   1909  132d				   .
   1910  132d							; 
   1911  132d
   1912  132d				   .
   1913  132d							; 
   1914  132d
   1915  132d				   .L0356		;  on temp4 goto _enemy_air_expl_0 _enemy_air_expl_1 _enemy_air_expl_2 _enemy_air_expl_2 _enemy_air_expl_3 _enemy_air_expl_3 _enemy_air_expl_3 _enemy_air_expl_3
   1916  132d
   1917  132d		       a6 9f		      LDX	temp4
   1918  132f		       bd 38 93 	      LDA	.L0356jumptablehi,x
   1919  1332		       48		      PHA
   1920  1333		       bd 40 93 	      LDA	.L0356jumptablelo,x
   1921  1336		       48		      PHA
   1922  1337		       60		      RTS
   1923  1338				   .L0356jumptablehi
   1924  1338		       93		      .byte.b	>(._enemy_air_expl_0-1)
   1925  1339		       93		      .byte.b	>(._enemy_air_expl_1-1)
   1926  133a		       93		      .byte.b	>(._enemy_air_expl_2-1)
   1927  133b		       93		      .byte.b	>(._enemy_air_expl_2-1)
   1928  133c		       93		      .byte.b	>(._enemy_air_expl_3-1)
   1929  133d		       93		      .byte.b	>(._enemy_air_expl_3-1)
   1930  133e		       93		      .byte.b	>(._enemy_air_expl_3-1)
   1931  133f		       93		      .byte.b	>(._enemy_air_expl_3-1)
   1932  1340				   .L0356jumptablelo
   1933  1340		       56		      .byte.b	<(._enemy_air_expl_0-1)
   1934  1341		       69		      .byte.b	<(._enemy_air_expl_1-1)
   1935  1342		       7c		      .byte.b	<(._enemy_air_expl_2-1)
   1936  1343		       7c		      .byte.b	<(._enemy_air_expl_2-1)
   1937  1344		       8f		      .byte.b	<(._enemy_air_expl_3-1)
   1938  1345		       8f		      .byte.b	<(._enemy_air_expl_3-1)
   1939  1346		       8f		      .byte.b	<(._enemy_air_expl_3-1)
   1940  1347		       8f		      .byte.b	<(._enemy_air_expl_3-1)
   1941  1348				   .
   1942  1348							; 
   1943  1348
   1944  1348				   ._Air_Missile_alive
   1945  1348							; _Air_Missile_alive
   1946  1348
   1947  1348				   .L0357		;  player0: 
   1948  1348
   1949  1348		       a2 89		      LDX	#<playerL0357_0
   1950  134a		       86 8a		      STX	player0pointerlo
   1951  134c		       a9 fc		      LDA	#>playerL0357_0
   1952  134e		       85 8b		      STA	player0pointerhi
   1953  1350		       a9 0b		      LDA	#11
   1954  1352		       85 8e		      STA	player0height
   1955  1354				   .L0358		;  goto _roommate_End_def
   1956  1354
   1957  1354		       4c d6 93 	      jmp	._roommate_End_def
   1958  1357
   1959  1357				   .
   1960  1357							; 
   1961  1357
   1962  1357				   ._enemy_air_expl_0
   1963  1357							; _enemy_air_expl_0
   1964  1357
   1965  1357				   .L0359		;  player0: 
   1966  1357
   1967  1357		       a2 95		      LDX	#<playerL0359_0
   1968  1359		       86 8a		      STX	player0pointerlo
   1969  135b		       a9 fc		      LDA	#>playerL0359_0
   1970  135d		       85 8b		      STA	player0pointerhi
   1971  135f		       a9 0b		      LDA	#11
   1972  1361		       85 8e		      STA	player0height
   1973  1363				   .L0360		;  COLUP0  =  _04
   1974  1363
   1975  1363		       a9 04		      LDA	#_04
   1976  1365		       85 06		      STA	COLUP0
   1977  1367				   .L0361		;  goto _roommate_explosion_End_def
   1978  1367
   1979  1367		       4c 0f 93 	      jmp	._roommate_explosion_End_def
   1980  136a
   1981  136a				   ._enemy_air_expl_1
   1982  136a							; _enemy_air_expl_1
   1983  136a
   1984  136a				   .L0362		;  player0: 
   1985  136a
   1986  136a		       a2 a1		      LDX	#<playerL0362_0
   1987  136c		       86 8a		      STX	player0pointerlo
   1988  136e		       a9 fc		      LDA	#>playerL0362_0
   1989  1370		       85 8b		      STA	player0pointerhi
   1990  1372		       a9 08		      LDA	#8
   1991  1374		       85 8e		      STA	player0height
   1992  1376				   .L0363		;  COLUP0  =  _44
   1993  1376
   1994  1376		       a9 44		      LDA	#_44
   1995  1378		       85 06		      STA	COLUP0
   1996  137a				   .L0364		;  goto _roommate_explosion_End_def
   1997  137a
   1998  137a		       4c 0f 93 	      jmp	._roommate_explosion_End_def
   1999  137d
   2000  137d				   ._enemy_air_expl_2
   2001  137d							; _enemy_air_expl_2
   2002  137d
   2003  137d				   .L0365		;  player0: 
   2004  137d
   2005  137d		       a2 aa		      LDX	#<playerL0365_0
   2006  137f		       86 8a		      STX	player0pointerlo
   2007  1381		       a9 fc		      LDA	#>playerL0365_0
   2008  1383		       85 8b		      STA	player0pointerhi
   2009  1385		       a9 0b		      LDA	#11
   2010  1387		       85 8e		      STA	player0height
   2011  1389				   .L0366		;  COLUP0  =  _4A
   2012  1389
   2013  1389		       a9 4a		      LDA	#_4A
   2014  138b		       85 06		      STA	COLUP0
   2015  138d				   .L0367		;  goto _roommate_explosion_End_def
   2016  138d
   2017  138d		       4c 0f 93 	      jmp	._roommate_explosion_End_def
   2018  1390
   2019  1390				   ._enemy_air_expl_3
   2020  1390							; _enemy_air_expl_3
   2021  1390
   2022  1390				   .L0368		;  player0: 
   2023  1390
   2024  1390		       a2 b6		      LDX	#<playerL0368_0
   2025  1392		       86 8a		      STX	player0pointerlo
   2026  1394		       a9 fc		      LDA	#>playerL0368_0
   2027  1396		       85 8b		      STA	player0pointerhi
   2028  1398		       a9 0b		      LDA	#11
   2029  139a		       85 8e		      STA	player0height
   2030  139c				   .L0369		;  COLUP0  =  _4E
   2031  139c
   2032  139c		       a9 4e		      LDA	#_4E
   2033  139e		       85 06		      STA	COLUP0
   2034  13a0				   .L0370		;  goto _roommate_explosion_End_def
   2035  13a0
   2036  13a0		       4c 0f 93 	      jmp	._roommate_explosion_End_def
   2037  13a3
   2038  13a3				   .
   2039  13a3							; 
   2040  13a3
   2041  13a3				   .
   2042  13a3							; 
   2043  13a3
   2044  13a3				   .
   2045  13a3							; 
   2046  13a3
   2047  13a3				   ._roommate_Fuel_def
   2048  13a3							; _roommate_Fuel_def
   2049  13a3
   2050  13a3				   .L0371		;  player0: 
   2051  13a3
   2052  13a3		       a2 c2		      LDX	#<playerL0371_0
   2053  13a5		       86 8a		      STX	player0pointerlo
   2054  13a7		       a9 fc		      LDA	#>playerL0371_0
   2055  13a9		       85 8b		      STA	player0pointerhi
   2056  13ab		       a9 18		      LDA	#24
   2057  13ad		       85 8e		      STA	player0height
   2058  13af				   .L0372		;  goto _roommate_End_def
   2059  13af
   2060  13af		       4c d6 93 	      jmp	._roommate_End_def
   2061  13b2
   2062  13b2				   .
   2063  13b2							; 
   2064  13b2
   2065  13b2				   ._roommate_Soldier_def
   2066  13b2							; _roommate_Soldier_def
   2067  13b2
   2068  13b2				   .L0373		;  if frame_counter{2} then player0: 
   2069  13b2
   2070  13b2		       a5 d5		      LDA	frame_counter
   2071  13b4		       29 04		      AND	#4
   2072  13b6		       f0 0c		      BEQ	.skipL0373
   2073  13b8				   .condpart2
   2074  13b8		       a2 db		      LDX	#<player2then_0
   2075  13ba		       86 8a		      STX	player0pointerlo
   2076  13bc		       a9 fc		      LDA	#>player2then_0
   2077  13be		       85 8b		      STA	player0pointerhi
   2078  13c0		       a9 03		      LDA	#3
   2079  13c2		       85 8e		      STA	player0height
   2080  13c4				   .skipL0373
   2081  13c4				   .L0374		;  if !frame_counter{2} then player0: 
   2082  13c4
   2083  13c4		       a5 d5		      LDA	frame_counter
   2084  13c6		       29 04		      AND	#4
   2085  13c8		       d0 0c		      BNE	.skipL0374
   2086  13ca				   .condpart3
   2087  13ca		       a2 df		      LDX	#<player3then_0
   2088  13cc		       86 8a		      STX	player0pointerlo
   2089  13ce		       a9 fc		      LDA	#>player3then_0
   2090  13d0		       85 8b		      STA	player0pointerhi
   2091  13d2		       a9 03		      LDA	#3
   2092  13d4		       85 8e		      STA	player0height
   2093  13d6				   .skipL0374
   2094  13d6				   ._roommate_End_def
   2095  13d6							; _roommate_End_def
   2096  13d6
   2097  13d6				   .
   2098  13d6							; 
   2099  13d6
   2100  13d6				   .
   2101  13d6							; 
   2102  13d6
   2103  13d6				   .L0375		;  if !frame_counter{4} then _Skip_Wall_Movement
   2104  13d6
   2105  13d6		       a5 d5		      LDA	frame_counter
   2106  13d8		       29 10		      AND	#16
   2107  13da					      if	((* - ._Skip_Wall_Movement) < 127) && ((* - ._Skip_Wall_Movement) > -128)
   2108  13da		       f0 35		      BEQ	._Skip_Wall_Movement
   2109  13dc				  -	      else
   2110  13dc				  -	      bne	.6skip_Skip_Wall_Movement
   2111  13dc				  -	      jmp	._Skip_Wall_Movement
   2112  13dc				  -.6skip_Skip_Wall_Movement
   2113  13dc					      endif
   2114  13dc				   .L0376		;  if r_extra_wall_type_and_range{1}  ||  r_extra_wall_type_and_range	<  2 then _Finish_Interior_Movement
   2115  13dc
   2116  13dc		       ad e9 f0 	      LDA	r_extra_wall_type_and_range
   2117  13df		       29 02		      AND	#2
   2118  13e1					      if	((* - ._Finish_Interior_Movement) < 127) && ((* - ._Finish_Interior_Movement) > -128)
   2119  13e1		       d0 5d		      BNE	._Finish_Interior_Movement
   2120  13e3				  -	      else
   2121  13e3				  -	      beq	.7skip_Finish_Interior_Movement
   2122  13e3				  -	      jmp	._Finish_Interior_Movement
   2123  13e3				  -.7skip_Finish_Interior_Movement
   2124  13e3					      endif
   2125  13e3		       ad e9 f0 	      LDA	r_extra_wall_type_and_range
   2126  13e6		       c9 02		      CMP	#2
   2127  13e8					      if	((* - ._Finish_Interior_Movement) < 127) && ((* - ._Finish_Interior_Movement) > -128)
   2128  13e8		       90 56		      bcc	._Finish_Interior_Movement
   2129  13ea				  -	      else
   2130  13ea				  -	      bcs	.8skip_Finish_Interior_Movement
   2131  13ea				  -	      jmp	._Finish_Interior_Movement
   2132  13ea				  -.8skip_Finish_Interior_Movement
   2133  13ea					      endif
   2134  13ea				   .L0377		;  if _Bit4_Wall_Dir{4} then extra_wall_move_x  =  extra_wall_move_x  -  1 else extra_wall_move_x  =  extra_wall_move_x  +  1
   2135  13ea
   2136  13ea		       a5 ec		      LDA	_Bit4_Wall_Dir
   2137  13ec		       29 10		      AND	#16
   2138  13ee		       f0 05		      BEQ	.skipL0377
   2139  13f0				   .condpart4
   2140  13f0		       c6 dc		      DEC	extra_wall_move_x
   2141  13f2		       4c f7 93 	      jmp	.skipelse0
   2142  13f5				   .skipL0377
   2143  13f5		       e6 dc		      INC	extra_wall_move_x
   2144  13f7				   .skipelse0
   2145  13f7				   .L0378		;  if extra_wall_move_x  =  r_extra_wall_type_and_range then _Bit4_Wall_Dir{4}  =  1
   2146  13f7
   2147  13f7		       a5 dc		      LDA	extra_wall_move_x
   2148  13f9		       cd e9 f0 	      CMP	r_extra_wall_type_and_range
   2149  13fc		       d0 06		      BNE	.skipL0378
   2150  13fe				   .condpart5
   2151  13fe		       a5 ec		      LDA	_Bit4_Wall_Dir
   2152  1400		       09 10		      ORA	#16
   2153  1402		       85 ec		      STA	_Bit4_Wall_Dir
   2154  1404				   .skipL0378
   2155  1404				   .L0379		;  if !extra_wall_move_x then _Bit4_Wall_Dir{4}  =  0
   2156  1404
   2157  1404		       a5 dc		      LDA	extra_wall_move_x
   2158  1406		       d0 06		      BNE	.skipL0379
   2159  1408				   .condpart6
   2160  1408		       a5 ec		      LDA	_Bit4_Wall_Dir
   2161  140a		       29 ef		      AND	#239
   2162  140c		       85 ec		      STA	_Bit4_Wall_Dir
   2163  140e				   .skipL0379
   2164  140e				   .L0380		;  goto _Finish_Interior_Movement
   2165  140e
   2166  140e		       4c 40 94 	      jmp	._Finish_Interior_Movement
   2167  1411
   2168  1411				   ._Skip_Wall_Movement
   2169  1411							; _Skip_Wall_Movement
   2170  1411
   2171  1411				   .
   2172  1411							; 
   2173  1411
   2174  1411				   .L0381		;  if r_roommate_type_and_range  <  4	||  enemy_game_state then _Finish_Interior_Movement
   2175  1411
   2176  1411		       ad e6 f0 	      LDA	r_roommate_type_and_range
   2177  1414		       c9 04		      CMP	#4
   2178  1416					      if	((* - ._Finish_Interior_Movement) < 127) && ((* - ._Finish_Interior_Movement) > -128)
   2179  1416		       90 28		      bcc	._Finish_Interior_Movement
   2180  1418				  -	      else
   2181  1418				  -	      bcs	.9skip_Finish_Interior_Movement
   2182  1418				  -	      jmp	._Finish_Interior_Movement
   2183  1418				  -.9skip_Finish_Interior_Movement
   2184  1418					      endif
   2185  1418		       a5 b2		      LDA	enemy_game_state
   2186  141a					      if	((* - ._Finish_Interior_Movement) < 127) && ((* - ._Finish_Interior_Movement) > -128)
   2187  141a		       d0 24		      BNE	._Finish_Interior_Movement
   2188  141c				  -	      else
   2189  141c				  -	      beq	.10skip_Finish_Interior_Movement
   2190  141c				  -	      jmp	._Finish_Interior_Movement
   2191  141c				  -.10skip_Finish_Interior_Movement
   2192  141c					      endif
   2193  141c				   .L0382		;  if _Bit2_roommate_Dir{2} then roommate_move_x  =  roommate_move_x  -  1 else roommate_move_x  =  roommate_move_x  +  1
   2194  141c
   2195  141c		       a5 ec		      LDA	_Bit2_roommate_Dir
   2196  141e		       29 04		      AND	#4
   2197  1420		       f0 05		      BEQ	.skipL0382
   2198  1422				   .condpart7
   2199  1422		       c6 dd		      DEC	roommate_move_x
   2200  1424		       4c 29 94 	      jmp	.skipelse1
   2201  1427				   .skipL0382
   2202  1427		       e6 dd		      INC	roommate_move_x
   2203  1429				   .skipelse1
   2204  1429				   .L0383		;  if roommate_move_x	=  r_roommate_type_and_range then _Bit2_roommate_Dir{2}  =  1
   2205  1429
   2206  1429		       a5 dd		      LDA	roommate_move_x
   2207  142b		       cd e6 f0 	      CMP	r_roommate_type_and_range
   2208  142e		       d0 06		      BNE	.skipL0383
   2209  1430				   .condpart8
   2210  1430		       a5 ec		      LDA	_Bit2_roommate_Dir
   2211  1432		       09 04		      ORA	#4
   2212  1434		       85 ec		      STA	_Bit2_roommate_Dir
   2213  1436				   .skipL0383
   2214  1436				   .L0384		;  if !roommate_move_x then _Bit2_roommate_Dir{2}  =  0
   2215  1436
   2216  1436		       a5 dd		      LDA	roommate_move_x
   2217  1438		       d0 06		      BNE	.skipL0384
   2218  143a				   .condpart9
   2219  143a		       a5 ec		      LDA	_Bit2_roommate_Dir
   2220  143c		       29 fb		      AND	#251
   2221  143e		       85 ec		      STA	_Bit2_roommate_Dir
   2222  1440				   .skipL0384
   2223  1440				   .
   2224  1440							; 
   2225  1440
   2226  1440				   ._Finish_Interior_Movement
   2227  1440							; _Finish_Interior_Movement
   2228  1440
   2229  1440				   .
   2230  1440							; 
   2231  1440
   2232  1440				   .L0385		;  frame_counter  =  frame_counter  -	1
   2233  1440
   2234  1440		       c6 d5		      DEC	frame_counter
   2235  1442				   .
   2236  1442							; 
   2237  1442
   2238  1442				   .
   2239  1442							; 
   2240  1442
   2241  1442				   .L0386		;  if r_extra_wall_startpos_1_x  =  200 then _Skip_extra_Wall
   2242  1442
   2243  1442		       ad ec f0 	      LDA	r_extra_wall_startpos_1_x
   2244  1445		       c9 c8		      CMP	#200
   2245  1447					      if	((* - ._Skip_extra_Wall) < 127) && ((* - ._Skip_extra_Wall) > -128)
   2246  1447		       f0 62		      BEQ	._Skip_extra_Wall
   2247  1449				  -	      else
   2248  1449				  -	      bne	.11skip_Skip_extra_Wall
   2249  1449				  -	      jmp	._Skip_extra_Wall
   2250  1449				  -.11skip_Skip_extra_Wall
   2251  1449					      endif
   2252  1449				   .L0387		;  if _BitOp_Ball_Shot_Dir  &&  frame_counter{0} then _Skip_extra_Wall
   2253  1449
   2254  1449		       a5 d6		      LDA	_BitOp_Ball_Shot_Dir
   2255  144b		       f0 05		      BEQ	.skipL0387
   2256  144d				   .condpart10
   2257  144d		       a5 d5		      LDA	frame_counter
   2258  144f		       4a		      LSR
   2259  1450					      if	((* - ._Skip_extra_Wall) < 127) && ((* - ._Skip_extra_Wall) > -128)
   2260  1450		       b0 59		      bcs	._Skip_extra_Wall
   2261  1452				  -	      else
   2262  1452				  -	      bcc	.12skip_Skip_extra_Wall
   2263  1452				  -	      jmp	._Skip_extra_Wall
   2264  1452				  -.12skip_Skip_extra_Wall
   2265  1452					      endif
   2266  1452				   .skipL0387
   2267  1452				   .L0388		;  if !r_extra_wall_width  &&	frame_counter{1} then _Set_Second_Wall_pos
   2268  1452
   2269  1452		       ad ea f0 	      LDA	r_extra_wall_width
   2270  1455		       d0 06		      BNE	.skipL0388
   2271  1457				   .condpart11
   2272  1457		       a5 d5		      LDA	frame_counter
   2273  1459		       29 02		      AND	#2
   2274  145b					      if	((* - ._Set_Second_Wall_pos) < 127) && ((* - ._Set_Second_Wall_pos) > -128)
   2275  145b		       d0 32		      BNE	._Set_Second_Wall_pos
   2276  145d				  -	      else
   2277  145d				  -	      beq	.13skip_Set_Second_Wall_pos
   2278  145d				  -	      jmp	._Set_Second_Wall_pos
   2279  145d				  -.13skip_Set_Second_Wall_pos
   2280  145d					      endif
   2281  145d				   .skipL0388
   2282  145d				   .L0389		;  if r_extra_wall_type_and_range{1}  &&  frame_counter  <  r_extra_wall_type_and_range then _Set_Second_Wall_pos
   2283  145d
   2284  145d		       ad e9 f0 	      LDA	r_extra_wall_type_and_range
   2285  1460		       29 02		      AND	#2
   2286  1462		       f0 07		      BEQ	.skipL0389
   2287  1464				   .condpart12
   2288  1464		       a5 d5		      LDA	frame_counter
   2289  1466		       cd e9 f0 	      CMP	r_extra_wall_type_and_range
   2290  1469					      if	((* - ._Set_Second_Wall_pos) < 127) && ((* - ._Set_Second_Wall_pos) > -128)
   2291  1469		       90 24		      bcc	._Set_Second_Wall_pos
   2292  146b				  -	      else
   2293  146b				  -	      bcs	.14skip_Set_Second_Wall_pos
   2294  146b				  -	      jmp	._Set_Second_Wall_pos
   2295  146b				  -.14skip_Set_Second_Wall_pos
   2296  146b					      endif
   2297  146b				   .skipL0389
   2298  146b				   .L0390		;  if r_extra_wall_startpos_2_x  <>  200  &&  !r_extra_wall_type_and_range{1}	&&  frame_counter{1} then _Set_Second_Wall_pos
   2299  146b
   2300  146b		       ad ee f0 	      LDA	r_extra_wall_startpos_2_x
   2301  146e		       c9 c8		      CMP	#200
   2302  1470		       f0 0d		      BEQ	.skipL0390
   2303  1472				   .condpart13
   2304  1472		       ad e9 f0 	      LDA	r_extra_wall_type_and_range
   2305  1475		       29 02		      AND	#2
   2306  1477		       d0 06		      BNE	.skip13then
   2307  1479				   .condpart14
   2308  1479		       a5 d5		      LDA	frame_counter
   2309  147b		       29 02		      AND	#2
   2310  147d					      if	((* - ._Set_Second_Wall_pos) < 127) && ((* - ._Set_Second_Wall_pos) > -128)
   2311  147d		       d0 10		      BNE	._Set_Second_Wall_pos
   2312  147f				  -	      else
   2313  147f				  -	      beq	.15skip_Set_Second_Wall_pos
   2314  147f				  -	      jmp	._Set_Second_Wall_pos
   2315  147f				  -.15skip_Set_Second_Wall_pos
   2316  147f					      endif
   2317  147f				   .skip13then
   2318  147f				   .skipL0390
   2319  147f				   .L0391		;  bally  =  r_extra_wall_startpos_1_y  :  ballx  =  r_extra_wall_startpos_1_x  +  extra_wall_move_x
   2320  147f
   2321  147f		       ad ed f0 	      LDA	r_extra_wall_startpos_1_y
   2322  1482		       85 89		      STA	bally
   2323  1484		       ad ec f0 	      LDA	r_extra_wall_startpos_1_x
   2324  1487		       18		      CLC
   2325  1488		       65 dc		      ADC	extra_wall_move_x
   2326  148a		       85 84		      STA	ballx
   2327  148c				   .L0392		;  goto _Skip_Second_Wall_pos
   2328  148c
   2329  148c		       4c 9c 94 	      jmp	._Skip_Second_Wall_pos
   2330  148f
   2331  148f				   ._Set_Second_Wall_pos
   2332  148f							; _Set_Second_Wall_pos
   2333  148f
   2334  148f				   .L0393		;  bally  =  r_extra_wall_startpos_2_y  :  ballx  =  r_extra_wall_startpos_2_x  +  extra_wall_move_x
   2335  148f
   2336  148f		       ad ef f0 	      LDA	r_extra_wall_startpos_2_y
   2337  1492		       85 89		      STA	bally
   2338  1494		       ad ee f0 	      LDA	r_extra_wall_startpos_2_x
   2339  1497		       18		      CLC
   2340  1498		       65 dc		      ADC	extra_wall_move_x
   2341  149a		       85 84		      STA	ballx
   2342  149c				   ._Skip_Second_Wall_pos
   2343  149c							; _Skip_Second_Wall_pos
   2344  149c
   2345  149c				   .
   2346  149c							; 
   2347  149c
   2348  149c				   .L0394		;  ballheight	=  r_extra_wall_height
   2349  149c
   2350  149c		       ad eb f0 	      LDA	r_extra_wall_height
   2351  149f		       85 92		      STA	ballheight
   2352  14a1				   .L0395		;  CTRLPF  =  r_extra_wall_width  |  1
   2353  14a1
   2354  14a1		       ad ea f0 	      LDA	r_extra_wall_width
   2355  14a4		       09 01		      ORA	#1
   2356  14a6		       85 0a		      STA	CTRLPF
   2357  14a8				   .L0396		;  goto _Skip_ball_shot
   2358  14a8
   2359  14a8		       4c bf 94 	      jmp	._Skip_ball_shot
   2360  14ab
   2361  14ab				   ._Skip_extra_Wall
   2362  14ab							; _Skip_extra_Wall
   2363  14ab
   2364  14ab				   .
   2365  14ab							; 
   2366  14ab
   2367  14ab				   .L0397		;  if !_BitOp_Ball_Shot_Dir then _Skip_ball_shot
   2368  14ab
   2369  14ab		       a5 d6		      LDA	_BitOp_Ball_Shot_Dir
   2370  14ad					      if	((* - ._Skip_ball_shot) < 127) && ((* - ._Skip_ball_shot) > -128)
   2371  14ad		       f0 10		      BEQ	._Skip_ball_shot
   2372  14af				  -	      else
   2373  14af				  -	      bne	.16skip_Skip_ball_shot
   2374  14af				  -	      jmp	._Skip_ball_shot
   2375  14af				  -.16skip_Skip_ball_shot
   2376  14af					      endif
   2377  14af				   .L0398		;  ballx  =  ball_shoot_x
   2378  14af
   2379  14af		       a5 ae		      LDA	ball_shoot_x
   2380  14b1		       85 84		      STA	ballx
   2381  14b3				   .L0399		;  bally  =  ball_shoot_y
   2382  14b3
   2383  14b3		       a5 af		      LDA	ball_shoot_y
   2384  14b5		       85 89		      STA	bally
   2385  14b7				   .L0400		;  ballheight	=  1
   2386  14b7
   2387  14b7		       a9 01		      LDA	#1
   2388  14b9		       85 92		      STA	ballheight
   2389  14bb				   .L0401		;  CTRLPF  =  %00010001
   2390  14bb
   2391  14bb		       a9 11		      LDA	#%00010001
   2392  14bd		       85 0a		      STA	CTRLPF
   2393  14bf				   ._Skip_ball_shot
   2394  14bf							; _Skip_ball_shot
   2395  14bf
   2396  14bf				   .
   2397  14bf							; 
   2398  14bf
   2399  14bf				   .
   2400  14bf							; 
   2401  14bf
   2402  14bf				   .L0402		;  if r_roommate_startpos_y  =  200 then _Skip_enemy
   2403  14bf
   2404  14bf		       ad e8 f0 	      LDA	r_roommate_startpos_y
   2405  14c2		       c9 c8		      CMP	#200
   2406  14c4					      if	((* - ._Skip_enemy) < 127) && ((* - ._Skip_enemy) > -128)
   2407  14c4		       f0 0d		      BEQ	._Skip_enemy
   2408  14c6				  -	      else
   2409  14c6				  -	      bne	.17skip_Skip_enemy
   2410  14c6				  -	      jmp	._Skip_enemy
   2411  14c6				  -.17skip_Skip_enemy
   2412  14c6					      endif
   2413  14c6				   .L0403		;  player0x  =  r_roommate_startpos_x	+  roommate_move_x
   2414  14c6
   2415  14c6		       ad e7 f0 	      LDA	r_roommate_startpos_x
   2416  14c9		       18		      CLC
   2417  14ca		       65 dd		      ADC	roommate_move_x
   2418  14cc		       85 80		      STA	player0x
   2419  14ce				   .L0404		;  player0y  =  r_roommate_startpos_y
   2420  14ce
   2421  14ce		       ad e8 f0 	      LDA	r_roommate_startpos_y
   2422  14d1		       85 85		      STA	player0y
   2423  14d3				   ._Skip_enemy
   2424  14d3							; _Skip_enemy
   2425  14d3
   2426  14d3				   .
   2427  14d3							; 
   2428  14d3
   2429  14d3				   .
   2430  14d3							; 
   2431  14d3
   2432  14d3				   .
   2433  14d3							; 
   2434  14d3
   2435  14d3				   .
   2436  14d3							; 
   2437  14d3
   2438  14d3				   .L0405		;  if delay_counter then delay_counter  =  delay_counter  -  1  :  temp4  =  SWCHA  :	goto _skip_game_action
   2439  14d3
   2440  14d3		       a5 d4		      LDA	delay_counter
   2441  14d5		       f0 0a		      BEQ	.skipL0405
   2442  14d7				   .condpart15
   2443  14d7		       c6 d4		      DEC	delay_counter
   2444  14d9		       ad 80 02 	      LDA	SWCHA
   2445  14dc		       85 9f		      STA	temp4
   2446  14de		       4c 4c 9a 	      jmp	._skip_game_action
   2447  14e1
   2448  14e1				   .skipL0405
   2449  14e1				   .
   2450  14e1							; 
   2451  14e1
   2452  14e1				   .L0406		;  if _Bit5_Request_Pending{5}  &&  ReceiveBufferSize	>  response_size_minus_1 then goto _Change_Room
   2453  14e1
   2454  14e1		       a5 ec		      LDA	_Bit5_Request_Pending
   2455  14e3		       29 20		      AND	#32
   2456  14e5		       f0 0a		      BEQ	.skipL0406
   2457  14e7				   .condpart16
   2458  14e7		       a9 1e		      LDA	#response_size_minus_1
   2459  14e9		       cd f3 1f 	      CMP	ReceiveBufferSize
   2460  14ec		       b0 03		      BCS	.skip16then
   2461  14ee				   .condpart17
   2462  14ee		       4c 2c 9e 	      jmp	._Change_Room
   2463  14f1
   2464  14f1				   .skip16then
   2465  14f1				   .skipL0406
   2466  14f1				   .
   2467  14f1							; 
   2468  14f1
   2469  14f1				   .L0407		;  if _Bit5_Request_Pending{5} then temp4  =  SWCHA  :  goto _skip_game_action
   2470  14f1
   2471  14f1		       a5 ec		      LDA	_Bit5_Request_Pending
   2472  14f3		       29 20		      AND	#32
   2473  14f5		       f0 08		      BEQ	.skipL0407
   2474  14f7				   .condpart18
   2475  14f7		       ad 80 02 	      LDA	SWCHA
   2476  14fa		       85 9f		      STA	temp4
   2477  14fc		       4c 4c 9a 	      jmp	._skip_game_action
   2478  14ff
   2479  14ff				   .skipL0407
   2480  14ff				   .
   2481  14ff							; 
   2482  14ff
   2483  14ff				   .
   2484  14ff							; 
   2485  14ff
   2486  14ff				   .L0408		;  on Game_Status goto _game_action _game_over_action _Level_Finished_loop _skip_game_action
   2487  14ff
   2488  14ff		       a6 d3		      LDX	Game_Status
   2489  1501		       bd 0a 95 	      LDA	.L0408jumptablehi,x
   2490  1504		       48		      PHA
   2491  1505		       bd 0e 95 	      LDA	.L0408jumptablelo,x
   2492  1508		       48		      PHA
   2493  1509		       60		      RTS
   2494  150a				   .L0408jumptablehi
   2495  150a		       95		      .byte.b	>(._game_action-1)
   2496  150b		       9c		      .byte.b	>(._game_over_action-1)
   2497  150c		       9c		      .byte.b	>(._Level_Finished_loop-1)
   2498  150d		       9a		      .byte.b	>(._skip_game_action-1)
   2499  150e				   .L0408jumptablelo
   2500  150e		       11		      .byte.b	<(._game_action-1)
   2501  150f		       21		      .byte.b	<(._game_over_action-1)
   2502  1510		       2b		      .byte.b	<(._Level_Finished_loop-1)
   2503  1511		       4b		      .byte.b	<(._skip_game_action-1)
   2504  1512				   .
   2505  1512							; 
   2506  1512
   2507  1512				   ._game_action
   2508  1512							; _game_action
   2509  1512
   2510  1512				   .
   2511  1512							; 
   2512  1512
   2513  1512				   .L0409		;  if frame_counter then _Skip_dec_bonus_and_fuel
   2514  1512
   2515  1512		       a5 d5		      LDA	frame_counter
   2516  1514					      if	((* - ._Skip_dec_bonus_and_fuel) < 127) && ((* - ._Skip_dec_bonus_and_fuel) > -128)
   2517  1514		       d0 17		      BNE	._Skip_dec_bonus_and_fuel
   2518  1516				  -	      else
   2519  1516				  -	      beq	.18skip_Skip_dec_bonus_and_fuel
   2520  1516				  -	      jmp	._Skip_dec_bonus_and_fuel
   2521  1516				  -.18skip_Skip_dec_bonus_and_fuel
   2522  1516					      endif
   2523  1516				   .L0410		;  if bonus_bcd_counter then dec bonus_bcd_counter  =	bonus_bcd_counter  -  1
   2524  1516
   2525  1516		       a5 b1		      LDA	bonus_bcd_counter
   2526  1518		       f0 09		      BEQ	.skipL0410
   2527  151a				   .condpart19
   2528  151a		       f8		      SED
   2529  151b		       a5 b1		      LDA	bonus_bcd_counter
   2530  151d		       38		      SEC
   2531  151e		       e9 01		      SBC	#1
   2532  1520		       85 b1		      STA	bonus_bcd_counter
   2533  1522		       d8		      CLD
   2534  1523				   .skipL0410
   2535  1523				   .
   2536  1523							; 
   2537  1523
   2538  1523				   .L0411		;  if !bonus_bcd_counter{0} then pfscore2  =  pfscore2  /  2
   2539  1523
   2540  1523		       a5 b1		      LDA	bonus_bcd_counter
   2541  1525		       4a		      LSR
   2542  1526		       b0 05		      BCS	.skipL0411
   2543  1528				   .condpart20
   2544  1528		       a5 f3		      LDA	pfscore2
   2545  152a		       4a		      lsr
   2546  152b		       85 f3		      STA	pfscore2
   2547  152d				   .skipL0411
   2548  152d				   .
   2549  152d							; 
   2550  152d
   2551  152d				   ._Skip_dec_bonus_and_fuel
   2552  152d							; _Skip_dec_bonus_and_fuel
   2553  152d
   2554  152d				   .
   2555  152d							; 
   2556  152d
   2557  152d				   .L0412		;  if !pfscore2  &&  !_Ch0_Sound then _Ch0_Sound  =  4  :  _Ch0_Duration  =  1  :  _Ch0_Counter  =  0
   2558  152d
   2559  152d		       a5 f3		      LDA	pfscore2
   2560  152f		       d0 10		      BNE	.skipL0412
   2561  1531				   .condpart21
   2562  1531		       a5 d9		      LDA	_Ch0_Sound
   2563  1533		       d0 0c		      BNE	.skip21then
   2564  1535				   .condpart22
   2565  1535		       a9 04		      LDA	#4
   2566  1537		       85 d9		      STA	_Ch0_Sound
   2567  1539		       a9 01		      LDA	#1
   2568  153b		       85 da		      STA	_Ch0_Duration
   2569  153d		       a9 00		      LDA	#0
   2570  153f		       85 db		      STA	_Ch0_Counter
   2571  1541				   .skip21then
   2572  1541				   .skipL0412
   2573  1541				   .
   2574  1541							; 
   2575  1541
   2576  1541				   .
   2577  1541							; 
   2578  1541
   2579  1541				   .L0413		;  if player0y  =  200  ||  enemy_game_state then goto __Skip_Enemy_Fire
   2580  1541
   2581  1541		       a5 85		      LDA	player0y
   2582  1543		       c9 c8		      CMP	#200
   2583  1545		       d0 03		      BNE	.skipL0413
   2584  1547				   .condpart23
   2585  1547		       4c 4e 95 	      jmp	.condpart24
   2586  154a				   .skipL0413
   2587  154a		       a5 b2		      LDA	enemy_game_state
   2588  154c		       f0 03		      BEQ	.skip9OR
   2589  154e				   .condpart24
   2590  154e		       4c 00 96 	      jmp	.__Skip_Enemy_Fire
   2591  1551
   2592  1551				   .skip9OR
   2593  1551				   .L0414		;  if _BitOp_Ball_Shot_Dir  ||  roommate_type then goto __Skip_Enemy_Fire
   2594  1551
   2595  1551		       a5 d6		      LDA	_BitOp_Ball_Shot_Dir
   2596  1553		       f0 03		      BEQ	.skipL0414
   2597  1555				   .condpart25
   2598  1555		       4c 5c 95 	      jmp	.condpart26
   2599  1558				   .skipL0414
   2600  1558		       a5 de		      LDA	roommate_type
   2601  155a		       f0 03		      BEQ	.skip10OR
   2602  155c				   .condpart26
   2603  155c		       4c 00 96 	      jmp	.__Skip_Enemy_Fire
   2604  155f
   2605  155f				   .skip10OR
   2606  155f				   .L0415		;  temp4  =  frame_counter  &	127
   2607  155f
   2608  155f		       a5 d5		      LDA	frame_counter
   2609  1561		       29 7f		      AND	#127
   2610  1563		       85 9f		      STA	temp4
   2611  1565				   .L0416		;  if temp4  <>  next_shoot_rand then goto __Skip_Enemy_Fire
   2612  1565
   2613  1565		       a5 9f		      LDA	temp4
   2614  1567		       c5 b4		      CMP	next_shoot_rand
   2615  1569		       f0 03		      BEQ	.skipL0416
   2616  156b				   .condpart27
   2617  156b		       4c 00 96 	      jmp	.__Skip_Enemy_Fire
   2618  156e
   2619  156e				   .skipL0416
   2620  156e				   .
   2621  156e							; 
   2622  156e
   2623  156e				   .L0417		;  next_shoot_rand  =	 (  rand16  &  127 ) 
   2624  156e
   2625  156e							; complex statement detected
   2626  156e		       85 ee		      sta	temp7
   2627  1570		       a9 95		      lda	#>(ret_point2-1)
   2628  1572		       48		      pha
   2629  1573		       a9 85		      lda	#<(ret_point2-1)
   2630  1575		       48		      pha
   2631  1576		       a9 f4		      lda	#>(randomize-1)
   2632  1578		       48		      pha
   2633  1579		       a9 d5		      lda	#<(randomize-1)
   2634  157b		       48		      pha
   2635  157c		       a5 ee		      lda	temp7
   2636  157e		       48		      pha
   2637  157f		       8a		      txa
   2638  1580		       48		      pha
   2639  1581		       a2 04		      ldx	#4
   2640  1583		       4c e8 ff 	      jmp	BS_jsr
   2641  1586				   ret_point2
   2642  1586		       29 7f		      AND	#127
   2643  1588		       85 b4		      STA	next_shoot_rand
   2644  158a				   .L0418		;  _BitOp_Ball_Shot_Dir  =  0	:  Bally_velocity  =  0.0  :  q  =  0
   2645  158a
   2646  158a		       a9 00		      LDA	#0
   2647  158c		       85 d6		      STA	_BitOp_Ball_Shot_Dir
   2648  158e		       a2 00		      LDX	#0
   2649  1590		       86 e4		      STX	q
   2650  1592		       a9 00		      LDA	#0
   2651  1594		       85 e3		      STA	Bally_velocity
   2652  1596		       a9 00		      LDA	#0
   2653  1598		       85 e4		      STA	q
   2654  159a				   .
   2655  159a							; 
   2656  159a
   2657  159a				   .L0419		;  ball_shoot_x  =  player0x  +  4  :	ball_shoot_y  =  player0y  -  5
   2658  159a
   2659  159a		       a5 80		      LDA	player0x
   2660  159c		       18		      CLC
   2661  159d		       69 04		      ADC	#4
   2662  159f		       85 ae		      STA	ball_shoot_x
   2663  15a1		       a5 85		      LDA	player0y
   2664  15a3		       38		      SEC
   2665  15a4		       e9 05		      SBC	#5
   2666  15a6		       85 af		      STA	ball_shoot_y
   2667  15a8				   .
   2668  15a8							; 
   2669  15a8
   2670  15a8				   .
   2671  15a8							; 
   2672  15a8
   2673  15a8				   .L0420		;  if _Ch0_Sound  <>  3 then _Ch0_Sound  =  2	:  _Ch0_Duration  =  1	:  _Ch0_Counter  =  0
   2674  15a8
   2675  15a8		       a5 d9		      LDA	_Ch0_Sound
   2676  15aa		       c9 03		      CMP	#3
   2677  15ac		       f0 0c		      BEQ	.skipL0420
   2678  15ae				   .condpart28
   2679  15ae		       a9 02		      LDA	#2
   2680  15b0		       85 d9		      STA	_Ch0_Sound
   2681  15b2		       a9 01		      LDA	#1
   2682  15b4		       85 da		      STA	_Ch0_Duration
   2683  15b6		       a9 00		      LDA	#0
   2684  15b8		       85 db		      STA	_Ch0_Counter
   2685  15ba				   .skipL0420
   2686  15ba				   .
   2687  15ba							; 
   2688  15ba
   2689  15ba				   .L0421		;  if player1x  >  player0x then _Bit2_Ball_Shot_Dir_Right1{2}  =  1 else _Bit0_Ball_Shot_Dir_Left1{0}  =  1
   2690  15ba
   2691  15ba		       a5 80		      LDA	player0x
   2692  15bc		       c5 81		      CMP	player1x
   2693  15be		       b0 09		      BCS	.skipL0421
   2694  15c0				   .condpart29
   2695  15c0		       a5 d6		      LDA	_Bit2_Ball_Shot_Dir_Right1
   2696  15c2		       09 04		      ORA	#4
   2697  15c4		       85 d6		      STA	_Bit2_Ball_Shot_Dir_Right1
   2698  15c6		       4c cf 95 	      jmp	.skipelse2
   2699  15c9				   .skipL0421
   2700  15c9		       a5 d6		      LDA	_Bit0_Ball_Shot_Dir_Left1
   2701  15cb		       09 01		      ORA	#1
   2702  15cd		       85 d6		      STA	_Bit0_Ball_Shot_Dir_Left1
   2703  15cf				   .skipelse2
   2704  15cf				   .L0422		;  if !_Bit2_Ball_Shot_Dir_Right1{2} then __Skip_Additional_Right
   2705  15cf
   2706  15cf		       a5 d6		      LDA	_Bit2_Ball_Shot_Dir_Right1
   2707  15d1		       29 04		      AND	#4
   2708  15d3					      if	((* - .__Skip_Additional_Right) < 127) && ((* - .__Skip_Additional_Right) > -128)
   2709  15d3		       f0 13		      BEQ	.__Skip_Additional_Right
   2710  15d5				  -	      else
   2711  15d5				  -	      bne	.19skip__Skip_Additional_Right
   2712  15d5				  -	      jmp	.__Skip_Additional_Right
   2713  15d5				  -.19skip__Skip_Additional_Right
   2714  15d5					      endif
   2715  15d5				   .L0423		;  temp4  =  player1x	-  player0x
   2716  15d5
   2717  15d5		       a5 81		      LDA	player1x
   2718  15d7		       38		      SEC
   2719  15d8		       e5 80		      SBC	player0x
   2720  15da		       85 9f		      STA	temp4
   2721  15dc				   .L0424		;  if temp4  >  25 then _Bit3_Ball_Shot_Dir_Right2{3}	=  1
   2722  15dc
   2723  15dc		       a9 19		      LDA	#25
   2724  15de		       c5 9f		      CMP	temp4
   2725  15e0		       b0 06		      BCS	.skipL0424
   2726  15e2				   .condpart30
   2727  15e2		       a5 d6		      LDA	_Bit3_Ball_Shot_Dir_Right2
   2728  15e4		       09 08		      ORA	#8
   2729  15e6		       85 d6		      STA	_Bit3_Ball_Shot_Dir_Right2
   2730  15e8				   .skipL0424
   2731  15e8				   .__Skip_Additional_Right
   2732  15e8							; __Skip_Additional_Right
   2733  15e8
   2734  15e8				   .L0425		;  if !_Bit0_Ball_Shot_Dir_Left1{0} then __Skip_Enemy_Fire
   2735  15e8
   2736  15e8		       a5 d6		      LDA	_Bit0_Ball_Shot_Dir_Left1
   2737  15ea		       4a		      LSR
   2738  15eb					      if	((* - .__Skip_Enemy_Fire) < 127) && ((* - .__Skip_Enemy_Fire) > -128)
   2739  15eb		       90 13		      bcc	.__Skip_Enemy_Fire
   2740  15ed				  -	      else
   2741  15ed				  -	      bcs	.20skip__Skip_Enemy_Fire
   2742  15ed				  -	      jmp	.__Skip_Enemy_Fire
   2743  15ed				  -.20skip__Skip_Enemy_Fire
   2744  15ed					      endif
   2745  15ed				   .L0426		;  temp4  =  player0x	-  player1x
   2746  15ed
   2747  15ed		       a5 80		      LDA	player0x
   2748  15ef		       38		      SEC
   2749  15f0		       e5 81		      SBC	player1x
   2750  15f2		       85 9f		      STA	temp4
   2751  15f4				   .L0427		;  if temp4  >  25 then _Bit1_Ball_Shot_Dir_Left2{1}  =  1
   2752  15f4
   2753  15f4		       a9 19		      LDA	#25
   2754  15f6		       c5 9f		      CMP	temp4
   2755  15f8		       b0 06		      BCS	.skipL0427
   2756  15fa				   .condpart31
   2757  15fa		       a5 d6		      LDA	_Bit1_Ball_Shot_Dir_Left2
   2758  15fc		       09 02		      ORA	#2
   2759  15fe		       85 d6		      STA	_Bit1_Ball_Shot_Dir_Left2
   2760  1600				   .skipL0427
   2761  1600				   .
   2762  1600							; 
   2763  1600
   2764  1600				   .__Skip_Enemy_Fire
   2765  1600							; __Skip_Enemy_Fire
   2766  1600
   2767  1600				   .
   2768  1600							; 
   2769  1600
   2770  1600				   .
   2771  1600							; 
   2772  1600
   2773  1600				   .
   2774  1600							; 
   2775  1600
   2776  1600				   .L0428		;  if !_BitOp_Ball_Shot_Dir then goto __Skip_Enemy_Missile
   2777  1600
   2778  1600		       a5 d6		      LDA	_BitOp_Ball_Shot_Dir
   2779  1602		       d0 03		      BNE	.skipL0428
   2780  1604				   .condpart32
   2781  1604		       4c 78 96 	      jmp	.__Skip_Enemy_Missile
   2782  1607
   2783  1607				   .skipL0428
   2784  1607				   .
   2785  1607							; 
   2786  1607
   2787  1607				   .
   2788  1607							; 
   2789  1607
   2790  1607				   .L0429		;  if ball_shoot_y  >	player1y then ball_shoot_y  =  ball_shoot_y  -	1
   2791  1607
   2792  1607		       a5 86		      LDA	player1y
   2793  1609		       c5 af		      CMP	ball_shoot_y
   2794  160b		       b0 02		      BCS	.skipL0429
   2795  160d				   .condpart33
   2796  160d		       c6 af		      DEC	ball_shoot_y
   2797  160f				   .skipL0429
   2798  160f				   .L0430		;  if _Bit0_Ball_Shot_Dir_Left1{0}  &&  frame_counter{0} then ball_shoot_x  =	ball_shoot_x  -  1  :  if _Bit1_Ball_Shot_Dir_Left2{1} then ball_shoot_x  =  ball_shoot_x  -  1
   2799  160f
   2800  160f		       a5 d6		      LDA	_Bit0_Ball_Shot_Dir_Left1
   2801  1611		       4a		      LSR
   2802  1612		       90 0f		      BCC	.skipL0430
   2803  1614				   .condpart34
   2804  1614		       a5 d5		      LDA	frame_counter
   2805  1616		       4a		      LSR
   2806  1617		       90 0a		      BCC	.skip34then
   2807  1619				   .condpart35
   2808  1619		       c6 ae		      DEC	ball_shoot_x
   2809  161b		       a5 d6		      LDA	_Bit1_Ball_Shot_Dir_Left2
   2810  161d		       29 02		      AND	#2
   2811  161f		       f0 02		      BEQ	.skip35then
   2812  1621				   .condpart36
   2813  1621		       c6 ae		      DEC	ball_shoot_x
   2814  1623				   .skip35then
   2815  1623				   .skip34then
   2816  1623				   .skipL0430
   2817  1623				   .L0431		;  if _Bit2_Ball_Shot_Dir_Right1{2}  &&  frame_counter{0} then ball_shoot_x  =  ball_shoot_x  +  1  :	if _Bit3_Ball_Shot_Dir_Right2{3} then ball_shoot_x  =  ball_shoot_x  +	1
   2818  1623
   2819  1623		       a5 d6		      LDA	_Bit2_Ball_Shot_Dir_Right1
   2820  1625		       29 04		      AND	#4
   2821  1627		       f0 0f		      BEQ	.skipL0431
   2822  1629				   .condpart37
   2823  1629		       a5 d5		      LDA	frame_counter
   2824  162b		       4a		      LSR
   2825  162c		       90 0a		      BCC	.skip37then
   2826  162e				   .condpart38
   2827  162e		       e6 ae		      INC	ball_shoot_x
   2828  1630		       a5 d6		      LDA	_Bit3_Ball_Shot_Dir_Right2
   2829  1632		       29 08		      AND	#8
   2830  1634		       f0 02		      BEQ	.skip38then
   2831  1636				   .condpart39
   2832  1636		       e6 ae		      INC	ball_shoot_x
   2833  1638				   .skip38then
   2834  1638				   .skip37then
   2835  1638				   .skipL0431
   2836  1638				   .
   2837  1638							; 
   2838  1638
   2839  1638				   .L0432		;  rem apply gravity
   2840  1638
   2841  1638				   .L0433		;  Bally_velocity  =  Bally_velocity  +  gravity_ball
   2842  1638
   2843  1638		       a5 e4		      LDA	q
   2844  163a		       18		      CLC
   2845  163b		       69 02		      ADC	#2
   2846  163d		       85 e4		      STA	q
   2847  163f		       a5 e3		      LDA	Bally_velocity
   2848  1641		       69 00		      ADC	#0
   2849  1643		       85 e3		      STA	Bally_velocity
   2850  1645				   .L0434		;  Bally_position  =  Bally_position  +  Bally_velocity
   2851  1645
   2852  1645		       a5 e5		      LDA	r
   2853  1647		       18		      CLC
   2854  1648		       65 e4		      ADC	q
   2855  164a		       85 e5		      STA	r
   2856  164c		       a5 af		      LDA	Bally_position
   2857  164e		       65 e3		      ADC	Bally_velocity
   2858  1650		       85 af		      STA	Bally_position
   2859  1652				   .
   2860  1652							; 
   2861  1652
   2862  1652				   .
   2863  1652							; 
   2864  1652
   2865  1652				   .
   2866  1652							; 
   2867  1652
   2868  1652				   .L0435		;  if ball_shoot_y  <	_M_Edge_Top then __Delete_Enemy_Missile
   2869  1652
   2870  1652		       a5 af		      LDA	ball_shoot_y
   2871  1654		       c9 02		      CMP	#_M_Edge_Top
   2872  1656					      if	((* - .__Delete_Enemy_Missile) < 127) && ((* - .__Delete_Enemy_Missile) > -128)
   2873  1656		       90 16		      bcc	.__Delete_Enemy_Missile
   2874  1658				  -	      else
   2875  1658				  -	      bcs	.21skip__Delete_Enemy_Missile
   2876  1658				  -	      jmp	.__Delete_Enemy_Missile
   2877  1658				  -.21skip__Delete_Enemy_Missile
   2878  1658					      endif
   2879  1658				   .L0436		;  if ball_shoot_y  >	_M_Edge_Bottom then __Delete_Enemy_Missile
   2880  1658
   2881  1658		       a9 58		      LDA	#_M_Edge_Bottom
   2882  165a		       c5 af		      CMP	ball_shoot_y
   2883  165c					      if	((* - .__Delete_Enemy_Missile) < 127) && ((* - .__Delete_Enemy_Missile) > -128)
   2884  165c		       90 10		      bcc	.__Delete_Enemy_Missile
   2885  165e				  -	      else
   2886  165e				  -	      bcs	.22skip__Delete_Enemy_Missile
   2887  165e				  -	      jmp	.__Delete_Enemy_Missile
   2888  165e				  -.22skip__Delete_Enemy_Missile
   2889  165e					      endif
   2890  165e				   .L0437		;  if ball_shoot_x  <	_M_Edge_Left then __Delete_Enemy_Missile
   2891  165e
   2892  165e		       a5 ae		      LDA	ball_shoot_x
   2893  1660		       c9 0e		      CMP	#_M_Edge_Left
   2894  1662					      if	((* - .__Delete_Enemy_Missile) < 127) && ((* - .__Delete_Enemy_Missile) > -128)
   2895  1662		       90 0a		      bcc	.__Delete_Enemy_Missile
   2896  1664				  -	      else
   2897  1664				  -	      bcs	.23skip__Delete_Enemy_Missile
   2898  1664				  -	      jmp	.__Delete_Enemy_Missile
   2899  1664				  -.23skip__Delete_Enemy_Missile
   2900  1664					      endif
   2901  1664				   .L0438		;  if ball_shoot_x  >	_M_Edge_Right then __Delete_Enemy_Missile
   2902  1664
   2903  1664		       a9 94		      LDA	#_M_Edge_Right
   2904  1666		       c5 ae		      CMP	ball_shoot_x
   2905  1668					      if	((* - .__Delete_Enemy_Missile) < 127) && ((* - .__Delete_Enemy_Missile) > -128)
   2906  1668		       90 04		      bcc	.__Delete_Enemy_Missile
   2907  166a				  -	      else
   2908  166a				  -	      bcs	.24skip__Delete_Enemy_Missile
   2909  166a				  -	      jmp	.__Delete_Enemy_Missile
   2910  166a				  -.24skip__Delete_Enemy_Missile
   2911  166a					      endif
   2912  166a				   .
   2913  166a							; 
   2914  166a
   2915  166a				   .
   2916  166a							; 
   2917  166a
   2918  166a				   .L0439		;  if !collision(playfield,ball) then __Skip_Enemy_Missile
   2919  166a
   2920  166a		       24 06		      bit	CXBLPF
   2921  166c					      if	((* - .__Skip_Enemy_Missile) < 127) && ((* - .__Skip_Enemy_Missile) > -128)
   2922  166c		       10 0a		      bpl	.__Skip_Enemy_Missile
   2923  166e				  -	      else
   2924  166e				  -	      bmi	.25skip__Skip_Enemy_Missile
   2925  166e				  -	      jmp	.__Skip_Enemy_Missile
   2926  166e				  -.25skip__Skip_Enemy_Missile
   2927  166e					      endif
   2928  166e				   .
   2929  166e							; 
   2930  166e
   2931  166e				   .__Delete_Enemy_Missile
   2932  166e							; __Delete_Enemy_Missile
   2933  166e
   2934  166e				   .
   2935  166e							; 
   2936  166e
   2937  166e				   .
   2938  166e							; 
   2939  166e
   2940  166e				   .L0440		;  _BitOp_Ball_Shot_Dir  =  0	:  ballx  =  200  :  bally  =  200
   2941  166e
   2942  166e		       a9 00		      LDA	#0
   2943  1670		       85 d6		      STA	_BitOp_Ball_Shot_Dir
   2944  1672		       a9 c8		      LDA	#200
   2945  1674		       85 84		      STA	ballx
   2946  1676		       85 89		      STA	bally
   2947  1678				   .
   2948  1678							; 
   2949  1678
   2950  1678				   .__Skip_Enemy_Missile
   2951  1678							; __Skip_Enemy_Missile
   2952  1678
   2953  1678				   .
   2954  1678							; 
   2955  1678
   2956  1678				   .
   2957  1678							; 
   2958  1678
   2959  1678				   .
   2960  1678							; 
   2961  1678
   2962  1678				   .
   2963  1678							; 
   2964  1678
   2965  1678				   .
   2966  1678							; 
   2967  1678
   2968  1678				   .L0441		;  if !joy0fire then _Bit7_FireB_Restrainer{7}  =  0  :  goto __Skip_Fire
   2969  1678
   2970  1678		       24 0c		      bit	INPT4
   2971  167a		       10 09		      BPL	.skipL0441
   2972  167c				   .condpart40
   2973  167c		       a5 ec		      LDA	_Bit7_FireB_Restrainer
   2974  167e		       29 7f		      AND	#127
   2975  1680		       85 ec		      STA	_Bit7_FireB_Restrainer
   2976  1682		       4c 03 97 	      jmp	.__Skip_Fire
   2977  1685
   2978  1685				   .skipL0441
   2979  1685				   .L0442		;  if _Bit7_FireB_Restrainer{7} then __Skip_Fire
   2980  1685
   2981  1685		       24 ec		      BIT	_Bit7_FireB_Restrainer
   2982  1687					      if	((* - .__Skip_Fire) < 127) && ((* - .__Skip_Fire) > -128)
   2983  1687		       30 7a		      bmi	.__Skip_Fire
   2984  1689				  -	      else
   2985  1689				  -	      bpl	.26skip__Skip_Fire
   2986  1689				  -	      jmp	.__Skip_Fire
   2987  1689				  -.26skip__Skip_Fire
   2988  1689					      endif
   2989  1689				   .
   2990  1689							; 
   2991  1689
   2992  1689				   .
   2993  1689							; 
   2994  1689
   2995  1689				   .L0443		;  if _BitOp_M0_Dir  ||  _Bit0_P1_Dir_Up{0} then __Skip_Fire
   2996  1689
   2997  1689		       a5 d7		      LDA	_BitOp_M0_Dir
   2998  168b					      if	((* - .__Skip_Fire) < 127) && ((* - .__Skip_Fire) > -128)
   2999  168b		       d0 76		      BNE	.__Skip_Fire
   3000  168d				  -	      else
   3001  168d				  -	      beq	.27skip__Skip_Fire
   3002  168d				  -	      jmp	.__Skip_Fire
   3003  168d				  -.27skip__Skip_Fire
   3004  168d					      endif
   3005  168d		       a5 d8		      LDA	_Bit0_P1_Dir_Up
   3006  168f		       4a		      LSR
   3007  1690					      if	((* - .__Skip_Fire) < 127) && ((* - .__Skip_Fire) > -128)
   3008  1690		       b0 71		      bcs	.__Skip_Fire
   3009  1692				  -	      else
   3010  1692				  -	      bcc	.28skip__Skip_Fire
   3011  1692				  -	      jmp	.__Skip_Fire
   3012  1692				  -.28skip__Skip_Fire
   3013  1692					      endif
   3014  1692				   .
   3015  1692							; 
   3016  1692
   3017  1692				   .
   3018  1692							; 
   3019  1692
   3020  1692				   .
   3021  1692							; 
   3022  1692
   3023  1692				   .L0444		;  _BitOp_M0_Dir  =  _BitOp_P1_Dir
   3024  1692
   3025  1692		       a5 d8		      LDA	_BitOp_P1_Dir
   3026  1694		       85 d7		      STA	_BitOp_M0_Dir
   3027  1696				   .
   3028  1696							; 
   3029  1696
   3030  1696				   .L0445		;  if _BitOp_M0_Dir then _Skip_correct_initial_M0_Dir
   3031  1696
   3032  1696		       a5 d7		      LDA	_BitOp_M0_Dir
   3033  1698					      if	((* - ._Skip_correct_initial_M0_Dir) < 127) && ((* - ._Skip_correct_initial_M0_Dir) > -128)
   3034  1698		       d0 0f		      BNE	._Skip_correct_initial_M0_Dir
   3035  169a				  -	      else
   3036  169a				  -	      beq	.29skip_Skip_correct_initial_M0_Dir
   3037  169a				  -	      jmp	._Skip_correct_initial_M0_Dir
   3038  169a				  -.29skip_Skip_correct_initial_M0_Dir
   3039  169a					      endif
   3040  169a				   .L0446		;  if _Bit6_Flip_P1{6} then _BitOp_M0_Dir  =  4 else _BitOp_M0_Dir  =	8
   3041  169a
   3042  169a		       24 ec		      BIT	_Bit6_Flip_P1
   3043  169c		       50 07		      BVC	.skipL0446
   3044  169e				   .condpart41
   3045  169e		       a9 04		      LDA	#4
   3046  16a0		       85 d7		      STA	_BitOp_M0_Dir
   3047  16a2		       4c a9 96 	      jmp	.skipelse3
   3048  16a5				   .skipL0446
   3049  16a5		       a9 08		      LDA	#8
   3050  16a7		       85 d7		      STA	_BitOp_M0_Dir
   3051  16a9				   .skipelse3
   3052  16a9				   ._Skip_correct_initial_M0_Dir
   3053  16a9							; _Skip_correct_initial_M0_Dir
   3054  16a9
   3055  16a9				   .
   3056  16a9							; 
   3057  16a9
   3058  16a9				   .
   3059  16a9							; 
   3060  16a9
   3061  16a9				   .L0447		;  M0y_velocity  =  0.0  :  u	=  0
   3062  16a9
   3063  16a9		       a2 00		      LDX	#0
   3064  16ab		       86 e7		      STX	t
   3065  16ad		       a9 00		      LDA	#0
   3066  16af		       85 e6		      STA	M0y_velocity
   3067  16b1		       a9 00		      LDA	#0
   3068  16b3		       85 e8		      STA	u
   3069  16b5				   .
   3070  16b5							; 
   3071  16b5
   3072  16b5				   .
   3073  16b5							; 
   3074  16b5
   3075  16b5				   .L0448		;  if _Bit1_M0_Dir_Down{1} then missile0x  =  player1x  +  9  :  missile0y  =	player1y  -  1
   3076  16b5
   3077  16b5		       a5 d7		      LDA	_Bit1_M0_Dir_Down
   3078  16b7		       29 02		      AND	#2
   3079  16b9		       f0 0e		      BEQ	.skipL0448
   3080  16bb				   .condpart42
   3081  16bb		       a5 81		      LDA	player1x
   3082  16bd		       18		      CLC
   3083  16be		       69 09		      ADC	#9
   3084  16c0		       85 82		      STA	missile0x
   3085  16c2		       a5 86		      LDA	player1y
   3086  16c4		       38		      SEC
   3087  16c5		       e9 01		      SBC	#1
   3088  16c7		       85 91		      STA	missile0y
   3089  16c9				   .skipL0448
   3090  16c9				   .L0449		;  if _Bit2_M0_Dir_Left{2} then missile0x  =  player1x  +  2  :  missile0y  =	player1y  -  3
   3091  16c9
   3092  16c9		       a5 d7		      LDA	_Bit2_M0_Dir_Left
   3093  16cb		       29 04		      AND	#4
   3094  16cd		       f0 0e		      BEQ	.skipL0449
   3095  16cf				   .condpart43
   3096  16cf		       a5 81		      LDA	player1x
   3097  16d1		       18		      CLC
   3098  16d2		       69 02		      ADC	#2
   3099  16d4		       85 82		      STA	missile0x
   3100  16d6		       a5 86		      LDA	player1y
   3101  16d8		       38		      SEC
   3102  16d9		       e9 03		      SBC	#3
   3103  16db		       85 91		      STA	missile0y
   3104  16dd				   .skipL0449
   3105  16dd				   .L0450		;  if _Bit3_M0_Dir_Right{3} then missile0x  =	player1x  +  16  :  missile0y  =  player1y  -  3
   3106  16dd
   3107  16dd		       a5 d7		      LDA	_Bit3_M0_Dir_Right
   3108  16df		       29 08		      AND	#8
   3109  16e1		       f0 0e		      BEQ	.skipL0450
   3110  16e3				   .condpart44
   3111  16e3		       a5 81		      LDA	player1x
   3112  16e5		       18		      CLC
   3113  16e6		       69 10		      ADC	#16
   3114  16e8		       85 82		      STA	missile0x
   3115  16ea		       a5 86		      LDA	player1y
   3116  16ec		       38		      SEC
   3117  16ed		       e9 03		      SBC	#3
   3118  16ef		       85 91		      STA	missile0y
   3119  16f1				   .skipL0450
   3120  16f1				   .
   3121  16f1							; 
   3122  16f1
   3123  16f1				   .
   3124  16f1							; 
   3125  16f1
   3126  16f1				   .L0451		;  if _Ch0_Sound  <>  3 then _Ch0_Sound  =  2	:  _Ch0_Duration  =  1	:  _Ch0_Counter  =  0
   3127  16f1
   3128  16f1		       a5 d9		      LDA	_Ch0_Sound
   3129  16f3		       c9 03		      CMP	#3
   3130  16f5		       f0 0c		      BEQ	.skipL0451
   3131  16f7				   .condpart45
   3132  16f7		       a9 02		      LDA	#2
   3133  16f9		       85 d9		      STA	_Ch0_Sound
   3134  16fb		       a9 01		      LDA	#1
   3135  16fd		       85 da		      STA	_Ch0_Duration
   3136  16ff		       a9 00		      LDA	#0
   3137  1701		       85 db		      STA	_Ch0_Counter
   3138  1703				   .skipL0451
   3139  1703				   .
   3140  1703							; 
   3141  1703
   3142  1703				   .__Skip_Fire
   3143  1703							; __Skip_Fire
   3144  1703
   3145  1703				   .
   3146  1703							; 
   3147  1703
   3148  1703				   .
   3149  1703							; 
   3150  1703
   3151  1703				   .
   3152  1703							; 
   3153  1703
   3154  1703				   .
   3155  1703							; 
   3156  1703
   3157  1703				   .L0452		;  if !_BitOp_M0_Dir then goto __Skip_Missile
   3158  1703
   3159  1703		       a5 d7		      LDA	_BitOp_M0_Dir
   3160  1705		       d0 03		      BNE	.skipL0452
   3161  1707				   .condpart46
   3162  1707		       4c 80 97 	      jmp	.__Skip_Missile
   3163  170a
   3164  170a				   .skipL0452
   3165  170a				   .
   3166  170a							; 
   3167  170a
   3168  170a				   .
   3169  170a							; 
   3170  170a
   3171  170a				   .L0453		;  if _Bit1_M0_Dir_Down{1} then missile0y  =  missile0y  +  2
   3172  170a
   3173  170a		       a5 d7		      LDA	_Bit1_M0_Dir_Down
   3174  170c		       29 02		      AND	#2
   3175  170e		       f0 07		      BEQ	.skipL0453
   3176  1710				   .condpart47
   3177  1710		       a5 91		      LDA	missile0y
   3178  1712		       18		      CLC
   3179  1713		       69 02		      ADC	#2
   3180  1715		       85 91		      STA	missile0y
   3181  1717				   .skipL0453
   3182  1717				   .L0454		;  if _Bit2_M0_Dir_Left{2} then missile0x  =  missile0x  -  2
   3183  1717
   3184  1717		       a5 d7		      LDA	_Bit2_M0_Dir_Left
   3185  1719		       29 04		      AND	#4
   3186  171b		       f0 07		      BEQ	.skipL0454
   3187  171d				   .condpart48
   3188  171d		       a5 82		      LDA	missile0x
   3189  171f		       38		      SEC
   3190  1720		       e9 02		      SBC	#2
   3191  1722		       85 82		      STA	missile0x
   3192  1724				   .skipL0454
   3193  1724				   .L0455		;  if _Bit3_M0_Dir_Right{3} then missile0x  =	missile0x  +  2
   3194  1724
   3195  1724		       a5 d7		      LDA	_Bit3_M0_Dir_Right
   3196  1726		       29 08		      AND	#8
   3197  1728		       f0 07		      BEQ	.skipL0455
   3198  172a				   .condpart49
   3199  172a		       a5 82		      LDA	missile0x
   3200  172c		       18		      CLC
   3201  172d		       69 02		      ADC	#2
   3202  172f		       85 82		      STA	missile0x
   3203  1731				   .skipL0455
   3204  1731				   .
   3205  1731							; 
   3206  1731
   3207  1731				   .L0456		;  rem apply gravity
   3208  1731
   3209  1731				   .L0457		;  M0y_velocity  =  M0y_velocity  +  gravity_missile0
   3210  1731
   3211  1731		       a5 e7		      LDA	t
   3212  1733		       18		      CLC
   3213  1734		       69 06		      ADC	#6
   3214  1736		       85 e7		      STA	t
   3215  1738		       a5 e6		      LDA	M0y_velocity
   3216  173a		       69 00		      ADC	#0
   3217  173c		       85 e6		      STA	M0y_velocity
   3218  173e				   .L0458		;  M0y_position  =  M0y_position  +  M0y_velocity
   3219  173e
   3220  173e		       a5 e8		      LDA	u
   3221  1740		       18		      CLC
   3222  1741		       65 e7		      ADC	t
   3223  1743		       85 e8		      STA	u
   3224  1745		       a5 91		      LDA	M0y_position
   3225  1747		       65 e6		      ADC	M0y_velocity
   3226  1749		       85 91		      STA	M0y_position
   3227  174b				   .
   3228  174b							; 
   3229  174b
   3230  174b				   .
   3231  174b							; 
   3232  174b
   3233  174b				   .
   3234  174b							; 
   3235  174b
   3236  174b				   .L0459		;  if missile0y  <  _M_Edge_Top then goto __Delete_Missile
   3237  174b
   3238  174b		       a5 91		      LDA	missile0y
   3239  174d		       c9 02		      CMP	#_M_Edge_Top
   3240  174f		       b0 03		      BCS	.skipL0459
   3241  1751				   .condpart50
   3242  1751		       4c 76 97 	      jmp	.__Delete_Missile
   3243  1754
   3244  1754				   .skipL0459
   3245  1754				   .L0460		;  if missile0y  >  _M_Edge_Bottom then goto __Delete_Missile
   3246  1754
   3247  1754		       a9 58		      LDA	#_M_Edge_Bottom
   3248  1756		       c5 91		      CMP	missile0y
   3249  1758		       b0 03		      BCS	.skipL0460
   3250  175a				   .condpart51
   3251  175a		       4c 76 97 	      jmp	.__Delete_Missile
   3252  175d
   3253  175d				   .skipL0460
   3254  175d				   .L0461		;  if missile0x  <  _M_Edge_Left then goto __Delete_Missile
   3255  175d
   3256  175d		       a5 82		      LDA	missile0x
   3257  175f		       c9 0e		      CMP	#_M_Edge_Left
   3258  1761		       b0 03		      BCS	.skipL0461
   3259  1763				   .condpart52
   3260  1763		       4c 76 97 	      jmp	.__Delete_Missile
   3261  1766
   3262  1766				   .skipL0461
   3263  1766				   .L0462		;  if missile0x  >  _M_Edge_Right then goto __Delete_Missile
   3264  1766
   3265  1766		       a9 94		      LDA	#_M_Edge_Right
   3266  1768		       c5 82		      CMP	missile0x
   3267  176a		       b0 03		      BCS	.skipL0462
   3268  176c				   .condpart53
   3269  176c		       4c 76 97 	      jmp	.__Delete_Missile
   3270  176f
   3271  176f				   .skipL0462
   3272  176f				   .
   3273  176f							; 
   3274  176f
   3275  176f				   .
   3276  176f							; 
   3277  176f
   3278  176f				   .L0463		;  if !collision(playfield,missile0) then goto __Skip_Missile
   3279  176f
   3280  176f		       24 04		      bit	CXM0FB
   3281  1771		       30 03		      BMI	.skipL0463
   3282  1773				   .condpart54
   3283  1773		       4c 80 97 	      jmp	.__Skip_Missile
   3284  1776
   3285  1776				   .skipL0463
   3286  1776				   .
   3287  1776							; 
   3288  1776
   3289  1776				   .
   3290  1776							; 
   3291  1776
   3292  1776				   .
   3293  1776							; 
   3294  1776
   3295  1776				   .
   3296  1776							; 
   3297  1776
   3298  1776				   .__Delete_Missile
   3299  1776							; __Delete_Missile
   3300  1776
   3301  1776				   .
   3302  1776							; 
   3303  1776
   3304  1776				   .
   3305  1776							; 
   3306  1776
   3307  1776				   .L0464		;  _BitOp_M0_Dir  =  0  :  missile0x  =  200  :  missile0y  =	200
   3308  1776
   3309  1776		       a9 00		      LDA	#0
   3310  1778		       85 d7		      STA	_BitOp_M0_Dir
   3311  177a		       a9 c8		      LDA	#200
   3312  177c		       85 82		      STA	missile0x
   3313  177e		       85 91		      STA	missile0y
   3314  1780				   .
   3315  1780							; 
   3316  1780
   3317  1780				   .__Skip_Missile
   3318  1780							; __Skip_Missile
   3319  1780
   3320  1780				   .
   3321  1780							; 
   3322  1780
   3323  1780				   .
   3324  1780							; 
   3325  1780
   3326  1780				   .
   3327  1780							; 
   3328  1780
   3329  1780				   .
   3330  1780							; 
   3331  1780
   3332  1780				   .L0465		;  if !collision(player0,missile0) then __Skip_Shot_Enemy
   3333  1780
   3334  1780		       24 00		      bit	CXM0P
   3335  1782					      if	((* - .__Skip_Shot_Enemy) < 127) && ((* - .__Skip_Shot_Enemy) > -128)
   3336  1782		       50 58		      bvc	.__Skip_Shot_Enemy
   3337  1784				  -	      else
   3338  1784				  -	      bvs	.30skip__Skip_Shot_Enemy
   3339  1784				  -	      jmp	.__Skip_Shot_Enemy
   3340  1784				  -.30skip__Skip_Shot_Enemy
   3341  1784					      endif
   3342  1784				   .
   3343  1784							; 
   3344  1784
   3345  1784				   .
   3346  1784							; 
   3347  1784
   3348  1784				   .L0466		;  _BitOp_M0_Dir  =  0  :  missile0x  =  200  :  missile0y  =	200
   3349  1784
   3350  1784		       a9 00		      LDA	#0
   3351  1786		       85 d7		      STA	_BitOp_M0_Dir
   3352  1788		       a9 c8		      LDA	#200
   3353  178a		       85 82		      STA	missile0x
   3354  178c		       85 91		      STA	missile0y
   3355  178e				   .
   3356  178e							; 
   3357  178e
   3358  178e				   .L0467		;  if roommate_type  >  1 then __Skip_Shot_Enemy
   3359  178e
   3360  178e		       a9 01		      LDA	#1
   3361  1790		       c5 de		      CMP	roommate_type
   3362  1792					      if	((* - .__Skip_Shot_Enemy) < 127) && ((* - .__Skip_Shot_Enemy) > -128)
   3363  1792		       90 48		      bcc	.__Skip_Shot_Enemy
   3364  1794				  -	      else
   3365  1794				  -	      bcs	.31skip__Skip_Shot_Enemy
   3366  1794				  -	      jmp	.__Skip_Shot_Enemy
   3367  1794				  -.31skip__Skip_Shot_Enemy
   3368  1794					      endif
   3369  1794				   .
   3370  1794							; 
   3371  1794
   3372  1794				   .L0468		;  _Ch0_Sound	=  1  :  _Ch0_Duration	=  1  :  _Ch0_Counter  =  0
   3373  1794
   3374  1794		       a9 01		      LDA	#1
   3375  1796		       85 d9		      STA	_Ch0_Sound
   3376  1798		       85 da		      STA	_Ch0_Duration
   3377  179a		       a9 00		      LDA	#0
   3378  179c		       85 db		      STA	_Ch0_Counter
   3379  179e				   .
   3380  179e							; 
   3381  179e
   3382  179e				   .
   3383  179e							; 
   3384  179e
   3385  179e				   .L0469		;  enemy_game_state  =  1  :  frame_counter  =  39  :	w_roommate_startpos_y  =  200
   3386  179e
   3387  179e		       a9 01		      LDA	#1
   3388  17a0		       85 b2		      STA	enemy_game_state
   3389  17a2		       a9 27		      LDA	#39
   3390  17a4		       85 d5		      STA	frame_counter
   3391  17a6		       a9 c8		      LDA	#200
   3392  17a8		       8d 68 f0 	      STA	w_roommate_startpos_y
   3393  17ab				   .
   3394  17ab							; 
   3395  17ab
   3396  17ab				   .L0470		;  if roommate_type then score  =  score  +  bonus_hit_air_missile else score	=  score  +  bonus_hit_tank
   3397  17ab
   3398  17ab		       a5 de		      LDA	roommate_type
   3399  17ad		       f0 18		      BEQ	.skipL0470
   3400  17af				   .condpart55
   3401  17af		       f8		      SED
   3402  17b0		       18		      CLC
   3403  17b1		       a5 95		      LDA	score+2
   3404  17b3		       69 40		      ADC	#$40
   3405  17b5		       85 95		      STA	score+2
   3406  17b7		       a5 94		      LDA	score+1
   3407  17b9		       69 00		      ADC	#$00
   3408  17bb		       85 94		      STA	score+1
   3409  17bd		       a5 93		      LDA	score
   3410  17bf		       69 00		      ADC	#$00
   3411  17c1		       85 93		      STA	score
   3412  17c3		       d8		      CLD
   3413  17c4		       4c dc 97 	      jmp	.skipelse4
   3414  17c7				   .skipL0470
   3415  17c7		       f8		      SED
   3416  17c8		       18		      CLC
   3417  17c9		       a5 95		      LDA	score+2
   3418  17cb		       69 60		      ADC	#$60
   3419  17cd		       85 95		      STA	score+2
   3420  17cf		       a5 94		      LDA	score+1
   3421  17d1		       69 00		      ADC	#$00
   3422  17d3		       85 94		      STA	score+1
   3423  17d5		       a5 93		      LDA	score
   3424  17d7		       69 00		      ADC	#$00
   3425  17d9		       85 93		      STA	score
   3426  17db		       d8		      CLD
   3427  17dc				   .skipelse4
   3428  17dc				   .
   3429  17dc							; 
   3430  17dc
   3431  17dc				   .__Skip_Shot_Enemy
   3432  17dc							; __Skip_Shot_Enemy
   3433  17dc
   3434  17dc				   .
   3435  17dc							; 
   3436  17dc
   3437  17dc				   .
   3438  17dc							; 
   3439  17dc
   3440  17dc				   .
   3441  17dc							; 
   3442  17dc
   3443  17dc				   .
   3444  17dc							; 
   3445  17dc
   3446  17dc				   .L0471		;  if !collision(ball,missile0) then __Skip_Shot_Extra_Wall
   3447  17dc
   3448  17dc		       24 04		      bit	CXM0FB
   3449  17de					      if	((* - .__Skip_Shot_Extra_Wall) < 127) && ((* - .__Skip_Shot_Extra_Wall) > -128)
   3450  17de		       50 61		      bvc	.__Skip_Shot_Extra_Wall
   3451  17e0				  -	      else
   3452  17e0				  -	      bvs	.32skip__Skip_Shot_Extra_Wall
   3453  17e0				  -	      jmp	.__Skip_Shot_Extra_Wall
   3454  17e0				  -.32skip__Skip_Shot_Extra_Wall
   3455  17e0					      endif
   3456  17e0				   .
   3457  17e0							; 
   3458  17e0
   3459  17e0				   .
   3460  17e0							; 
   3461  17e0
   3462  17e0				   .L0472		;  _BitOp_M0_Dir  =  0  :  missile0x  =  200  :  missile0y  =	200
   3463  17e0
   3464  17e0		       a9 00		      LDA	#0
   3465  17e2		       85 d7		      STA	_BitOp_M0_Dir
   3466  17e4		       a9 c8		      LDA	#200
   3467  17e6		       85 82		      STA	missile0x
   3468  17e8		       85 91		      STA	missile0y
   3469  17ea				   .
   3470  17ea							; 
   3471  17ea
   3472  17ea				   .L0473		;  if _BitOp_Ball_Shot_Dir then _BitOp_Ball_Shot_Dir  =  0  :	bally  =  0
   3473  17ea
   3474  17ea		       a5 d6		      LDA	_BitOp_Ball_Shot_Dir
   3475  17ec		       f0 06		      BEQ	.skipL0473
   3476  17ee				   .condpart56
   3477  17ee		       a9 00		      LDA	#0
   3478  17f0		       85 d6		      STA	_BitOp_Ball_Shot_Dir
   3479  17f2		       85 89		      STA	bally
   3480  17f4				   .skipL0473
   3481  17f4				   .
   3482  17f4							; 
   3483  17f4
   3484  17f4				   .
   3485  17f4							; 
   3486  17f4
   3487  17f4				   .L0474		;  if r_extra_wall_type_and_range{0} then __Skip_Shot_Extra_Wall
   3488  17f4
   3489  17f4		       ad e9 f0 	      LDA	r_extra_wall_type_and_range
   3490  17f7		       4a		      LSR
   3491  17f8					      if	((* - .__Skip_Shot_Extra_Wall) < 127) && ((* - .__Skip_Shot_Extra_Wall) > -128)
   3492  17f8		       b0 47		      bcs	.__Skip_Shot_Extra_Wall
   3493  17fa				  -	      else
   3494  17fa				  -	      bcc	.33skip__Skip_Shot_Extra_Wall
   3495  17fa				  -	      jmp	.__Skip_Shot_Extra_Wall
   3496  17fa				  -.33skip__Skip_Shot_Extra_Wall
   3497  17fa					      endif
   3498  17fa				   .
   3499  17fa							; 
   3500  17fa
   3501  17fa				   .L0475		;  _Ch0_Sound	=  1  :  _Ch0_Duration	=  1  :  _Ch0_Counter  =  0
   3502  17fa
   3503  17fa		       a9 01		      LDA	#1
   3504  17fc		       85 d9		      STA	_Ch0_Sound
   3505  17fe		       85 da		      STA	_Ch0_Duration
   3506  1800		       a9 00		      LDA	#0
   3507  1802		       85 db		      STA	_Ch0_Counter
   3508  1804				   .L0476		;  bally  =  0  :  w_extra_wall_startpos_1_x  =  200  :  if r_extra_wall_type_and_range  >  2 then score  =  score  +	bonus_hit_active_wall else score  =  score  +  bonus_hit_wall
   3509  1804
   3510  1804		       a9 00		      LDA	#0
   3511  1806		       85 89		      STA	bally
   3512  1808		       a9 c8		      LDA	#200
   3513  180a		       8d 6c f0 	      STA	w_extra_wall_startpos_1_x
   3514  180d		       a9 02		      LDA	#2
   3515  180f		       cd e9 f0 	      CMP	r_extra_wall_type_and_range
   3516  1812		       b0 18		      BCS	.skipL0476
   3517  1814				   .condpart57
   3518  1814		       f8		      SED
   3519  1815		       18		      CLC
   3520  1816		       a5 95		      LDA	score+2
   3521  1818		       69 30		      ADC	#$30
   3522  181a		       85 95		      STA	score+2
   3523  181c		       a5 94		      LDA	score+1
   3524  181e		       69 00		      ADC	#$00
   3525  1820		       85 94		      STA	score+1
   3526  1822		       a5 93		      LDA	score
   3527  1824		       69 00		      ADC	#$00
   3528  1826		       85 93		      STA	score
   3529  1828		       d8		      CLD
   3530  1829		       4c 41 98 	      jmp	.skipelse5
   3531  182c				   .skipL0476
   3532  182c		       f8		      SED
   3533  182d		       18		      CLC
   3534  182e		       a5 95		      LDA	score+2
   3535  1830		       69 10		      ADC	#$10
   3536  1832		       85 95		      STA	score+2
   3537  1834		       a5 94		      LDA	score+1
   3538  1836		       69 00		      ADC	#$00
   3539  1838		       85 94		      STA	score+1
   3540  183a		       a5 93		      LDA	score
   3541  183c		       69 00		      ADC	#$00
   3542  183e		       85 93		      STA	score
   3543  1840		       d8		      CLD
   3544  1841				   .skipelse5
   3545  1841				   .
   3546  1841							; 
   3547  1841
   3548  1841				   .__Skip_Shot_Extra_Wall
   3549  1841							; __Skip_Shot_Extra_Wall
   3550  1841
   3551  1841				   .
   3552  1841							; 
   3553  1841
   3554  1841				   .
   3555  1841							; 
   3556  1841
   3557  1841				   .
   3558  1841							; 
   3559  1841
   3560  1841				   .L0477		;  if !collision(player1,player0) then goto __Skip_P1_Touched_P0
   3561  1841
   3562  1841		       24 07		      bit	CXPPMM
   3563  1843		       30 03		      BMI	.skipL0477
   3564  1845				   .condpart58
   3565  1845		       4c de 98 	      jmp	.__Skip_P1_Touched_P0
   3566  1848
   3567  1848				   .skipL0477
   3568  1848				   .
   3569  1848							; 
   3570  1848
   3571  1848				   .
   3572  1848							; 
   3573  1848
   3574  1848				   .L0478		;  if roommate_type  <  2 then player0y  =  200  :  w_roommate_startpos_y  =  200  :  goto _Set_Explosion
   3575  1848
   3576  1848		       a5 de		      LDA	roommate_type
   3577  184a		       c9 02		      CMP	#2
   3578  184c		       b0 0a		      BCS	.skipL0478
   3579  184e				   .condpart59
   3580  184e		       a9 c8		      LDA	#200
   3581  1850		       85 85		      STA	player0y
   3582  1852		       8d 68 f0 	      STA	w_roommate_startpos_y
   3583  1855		       4c b8 9c 	      jmp	._Set_Explosion
   3584  1858
   3585  1858				   .skipL0478
   3586  1858				   .
   3587  1858							; 
   3588  1858
   3589  1858				   .
   3590  1858							; 
   3591  1858
   3592  1858				   .L0479		;  if _Ch0_Sound  <>  3 then _Ch0_Sound  =  3	:  _Ch0_Duration  =  1	:  _Ch0_Counter  =  0
   3593  1858
   3594  1858		       a5 d9		      LDA	_Ch0_Sound
   3595  185a		       c9 03		      CMP	#3
   3596  185c		       f0 0c		      BEQ	.skipL0479
   3597  185e				   .condpart60
   3598  185e		       a9 03		      LDA	#3
   3599  1860		       85 d9		      STA	_Ch0_Sound
   3600  1862		       a9 01		      LDA	#1
   3601  1864		       85 da		      STA	_Ch0_Duration
   3602  1866		       a9 00		      LDA	#0
   3603  1868		       85 db		      STA	_Ch0_Counter
   3604  186a				   .skipL0479
   3605  186a				   .L0480		;  if roommate_type  =  3 then men_to_rescue  =  men_to_rescue  -  12	:  player0y  =	200  :	w_roommate_startpos_y  =  200  :  score  =  score  +  bonus_man_rescue	:  if !men_to_rescue then goto _Level_Completed
   3606  186a
   3607  186a		       a5 de		      LDA	roommate_type
   3608  186c		       c9 03		      CMP	#3
   3609  186e		       d0 2a		      BNE	.skipL0480
   3610  1870				   .condpart61
   3611  1870		       a5 b0		      LDA	men_to_rescue
   3612  1872		       38		      SEC
   3613  1873		       e9 0c		      SBC	#12
   3614  1875		       85 b0		      STA	men_to_rescue
   3615  1877		       a9 c8		      LDA	#200
   3616  1879		       85 85		      STA	player0y
   3617  187b		       8d 68 f0 	      STA	w_roommate_startpos_y
   3618  187e		       f8		      SED
   3619  187f		       18		      CLC
   3620  1880		       a5 95		      LDA	score+2
   3621  1882		       69 50		      ADC	#$50
   3622  1884		       85 95		      STA	score+2
   3623  1886		       a5 94		      LDA	score+1
   3624  1888		       69 01		      ADC	#$01
   3625  188a		       85 94		      STA	score+1
   3626  188c		       a5 93		      LDA	score
   3627  188e		       69 00		      ADC	#$00
   3628  1890		       85 93		      STA	score
   3629  1892		       d8		      CLD
   3630  1893		       a5 b0		      LDA	men_to_rescue
   3631  1895		       d0 03		      BNE	.skip61then
   3632  1897				   .condpart62
   3633  1897		       4c 87 9d 	      jmp	._Level_Completed
   3634  189a
   3635  189a				   .skip61then
   3636  189a				   .skipL0480
   3637  189a				   .L0481		;  if roommate_type  =  2 then P1y_velocity  =  0.0  :  x  =  0  :  pfscore2  =  pfscore2  *  2  |  1	:  player1y  =	player1y  -  1	:  if !_Bit3_Safe_Point_reached{3} then WriteSendBuffer  =  req_safe_point  :  _Bit3_Safe_Point_reached{3}  =  1  :  Safe_Point_P1_x  =  player1x  :  Safe_Point_P1_y  =  player1y  :  _Bit1_Safe_Point_P1_Flip{1}  =  _Bit6_Flip_P1{6}
   3638  189a
   3639  189a		       a5 de		      LDA	roommate_type
   3640  189c		       c9 02		      CMP	#2
   3641  189e		       d0 3e		      BNE	.skipL0481
   3642  18a0				   .condpart63
   3643  18a0		       a2 00		      LDX	#0
   3644  18a2		       86 ea		      STX	w
   3645  18a4		       a9 00		      LDA	#0
   3646  18a6		       85 e9		      STA	P1y_velocity
   3647  18a8		       a9 00		      LDA	#0
   3648  18aa		       85 eb		      STA	x
   3649  18ac							; complex statement detected
   3650  18ac		       a5 f3		      LDA	pfscore2
   3651  18ae		       0a		      asl
   3652  18af		       09 01		      ORA	#1
   3653  18b1		       85 f3		      STA	pfscore2
   3654  18b3		       c6 86		      DEC	player1y
   3655  18b5		       a5 ec		      LDA	_Bit3_Safe_Point_reached
   3656  18b7		       29 08		      AND	#8
   3657  18b9		       d0 23		      BNE	.skip63then
   3658  18bb				   .condpart64
   3659  18bb		       a9 08		      LDA	#req_safe_point
   3660  18bd		       8d f1 1f 	      STA	WriteSendBuffer
   3661  18c0		       a5 ec		      LDA	_Bit3_Safe_Point_reached
   3662  18c2		       09 08		      ORA	#8
   3663  18c4		       85 ec		      STA	_Bit3_Safe_Point_reached
   3664  18c6		       a5 81		      LDA	player1x
   3665  18c8		       85 e0		      STA	Safe_Point_P1_x
   3666  18ca		       a5 86		      LDA	player1y
   3667  18cc		       85 e1		      STA	Safe_Point_P1_y
   3668  18ce		       a5 ec		      LDA	_Bit6_Flip_P1
   3669  18d0		       29 40		      AND	#64
   3670  18d2		       08		      PHP
   3671  18d3		       a5 df		      LDA	_Bit1_Safe_Point_P1_Flip
   3672  18d5		       29 fd		      AND	#253
   3673  18d7		       28		      PLP
   3674  18d8		       f0 02		      .byte.b	$F0, $02
   3675  18da		       09 02		      ORA	#2
   3676  18dc		       85 df		      STA	_Bit1_Safe_Point_P1_Flip
   3677  18de				   .skip63then
   3678  18de				   .skipL0481
   3679  18de				   .__Skip_P1_Touched_P0
   3680  18de							; __Skip_P1_Touched_P0
   3681  18de
   3682  18de				   .
   3683  18de							; 
   3684  18de
   3685  18de				   .
   3686  18de							; 
   3687  18de
   3688  18de				   .
   3689  18de							; 
   3690  18de
   3691  18de				   .L0482		;  if collision(player1,ball)	||  collision(player1,playfield) then goto _Set_Explosion
   3692  18de
   3693  18de		       24 03		      bit	CXP1FB
   3694  18e0		       50 03		      BVC	.skipL0482
   3695  18e2				   .condpart65
   3696  18e2		       4c e9 98 	      jmp	.condpart66
   3697  18e5				   .skipL0482
   3698  18e5		       24 03		      bit	CXP1FB
   3699  18e7		       10 03		      BPL	.skip14OR
   3700  18e9				   .condpart66
   3701  18e9		       4c b8 9c 	      jmp	._Set_Explosion
   3702  18ec
   3703  18ec				   .skip14OR
   3704  18ec				   .
   3705  18ec							; 
   3706  18ec
   3707  18ec				   .
   3708  18ec							; 
   3709  18ec
   3710  18ec				   .L0483		;  temp4  =  _BitOp_P1_Dir
   3711  18ec
   3712  18ec		       a5 d8		      LDA	_BitOp_P1_Dir
   3713  18ee		       85 9f		      STA	temp4
   3714  18f0				   .L0484		;  _BitOp_P1_Dir  =  0
   3715  18f0
   3716  18f0		       a9 00		      LDA	#0
   3717  18f2		       85 d8		      STA	_BitOp_P1_Dir
   3718  18f4				   .L0485		;  if !joy0up	||  !pfscore2 then _skip_joystick_up
   3719  18f4
   3720  18f4		       a9 10		      lda	#$10
   3721  18f6		       2c 80 02 	      bit	SWCHA
   3722  18f9					      if	((* - ._skip_joystick_up) < 127) && ((* - ._skip_joystick_up) > -128)
   3723  18f9		       d0 28		      BNE	._skip_joystick_up
   3724  18fb				  -	      else
   3725  18fb				  -	      beq	.34skip_skip_joystick_up
   3726  18fb				  -	      jmp	._skip_joystick_up
   3727  18fb				  -.34skip_skip_joystick_up
   3728  18fb					      endif
   3729  18fb		       a5 f3		      LDA	pfscore2
   3730  18fd					      if	((* - ._skip_joystick_up) < 127) && ((* - ._skip_joystick_up) > -128)
   3731  18fd		       f0 24		      BEQ	._skip_joystick_up
   3732  18ff				  -	      else
   3733  18ff				  -	      bne	.35skip_skip_joystick_up
   3734  18ff				  -	      jmp	._skip_joystick_up
   3735  18ff				  -.35skip_skip_joystick_up
   3736  18ff					      endif
   3737  18ff				   .L0486		;  if temp4{0}  ||  !gamenumber{0} then player1y  =  player1y	-  1
   3738  18ff
   3739  18ff		       a5 9f		      LDA	temp4
   3740  1901		       4a		      LSR
   3741  1902		       90 03		      BCC	.skipL0486
   3742  1904				   .condpart67
   3743  1904		       4c 0c 99 	      jmp	.condpart68
   3744  1907				   .skipL0486
   3745  1907		       a5 a6		      LDA	gamenumber
   3746  1909		       4a		      LSR
   3747  190a		       b0 02		      BCS	.skip16OR
   3748  190c				   .condpart68
   3749  190c		       c6 86		      DEC	player1y
   3750  190e				   .skip16OR
   3751  190e				   .L0487		;  P1y_velocity  =  0.0  :  x	=  0  :  _Bit0_P1_Dir_Up{0}  =	1  :  goto skip_gravity
   3752  190e
   3753  190e		       a2 00		      LDX	#0
   3754  1910		       86 ea		      STX	w
   3755  1912		       a9 00		      LDA	#0
   3756  1914		       85 e9		      STA	P1y_velocity
   3757  1916		       a9 00		      LDA	#0
   3758  1918		       85 eb		      STA	x
   3759  191a		       a5 d8		      LDA	_Bit0_P1_Dir_Up
   3760  191c		       09 01		      ORA	#1
   3761  191e		       85 d8		      STA	_Bit0_P1_Dir_Up
   3762  1920		       4c 56 99 	      jmp	.skip_gravity
   3763  1923
   3764  1923				   ._skip_joystick_up
   3765  1923							; _skip_joystick_up
   3766  1923
   3767  1923				   .
   3768  1923							; 
   3769  1923
   3770  1923				   .
   3771  1923							; 
   3772  1923
   3773  1923				   .L0488		;  if joy0down then player1y  =  player1y  +  1  :  _Bit1_P1_Dir_Down{1}  =  1
   3774  1923
   3775  1923		       a9 20		      lda	#$20
   3776  1925		       2c 80 02 	      bit	SWCHA
   3777  1928		       d0 08		      BNE	.skipL0488
   3778  192a				   .condpart69
   3779  192a		       e6 86		      INC	player1y
   3780  192c		       a5 d8		      LDA	_Bit1_P1_Dir_Down
   3781  192e		       09 02		      ORA	#2
   3782  1930		       85 d8		      STA	_Bit1_P1_Dir_Down
   3783  1932				   .skipL0488
   3784  1932				   .
   3785  1932							; 
   3786  1932
   3787  1932				   .L0489		;  if frame_counter{0}  &&  gamenumber{0} then skip_gravity
   3788  1932
   3789  1932		       a5 d5		      LDA	frame_counter
   3790  1934		       4a		      LSR
   3791  1935		       90 05		      BCC	.skipL0489
   3792  1937				   .condpart70
   3793  1937		       a5 a6		      LDA	gamenumber
   3794  1939		       4a		      LSR
   3795  193a					      if	((* - .skip_gravity) < 127) && ((* - .skip_gravity) > -128)
   3796  193a		       b0 1a		      bcs	.skip_gravity
   3797  193c				  -	      else
   3798  193c				  -	      bcc	.36skipskip_gravity
   3799  193c				  -	      jmp	.skip_gravity
   3800  193c				  -.36skipskip_gravity
   3801  193c					      endif
   3802  193c				   .skipL0489
   3803  193c				   .L0490		;  rem apply gravity
   3804  193c
   3805  193c				   .L0491		;  P1y_velocity  =  P1y_velocity  +  gravity_player1
   3806  193c
   3807  193c		       a5 ea		      LDA	w
   3808  193e		       18		      CLC
   3809  193f		       69 01		      ADC	#1
   3810  1941		       85 ea		      STA	w
   3811  1943		       a5 e9		      LDA	P1y_velocity
   3812  1945		       69 00		      ADC	#0
   3813  1947		       85 e9		      STA	P1y_velocity
   3814  1949				   .L0492		;  P1y_position  =  P1y_position  +  P1y_velocity
   3815  1949
   3816  1949		       a5 eb		      LDA	x
   3817  194b		       18		      CLC
   3818  194c		       65 ea		      ADC	w
   3819  194e		       85 eb		      STA	x
   3820  1950		       a5 86		      LDA	P1y_position
   3821  1952		       65 e9		      ADC	P1y_velocity
   3822  1954		       85 86		      STA	P1y_position
   3823  1956				   .
   3824  1956							; 
   3825  1956
   3826  1956				   .skip_gravity
   3827  1956							; skip_gravity
   3828  1956
   3829  1956				   .
   3830  1956							; 
   3831  1956
   3832  1956				   .L0493		;  if !joy0left then _skip_joystick_left
   3833  1956
   3834  1956		       2c 80 02 	      bit	SWCHA
   3835  1959					      if	((* - ._skip_joystick_left) < 127) && ((* - ._skip_joystick_left) > -128)
   3836  1959		       70 1f		      bvs	._skip_joystick_left
   3837  195b				  -	      else
   3838  195b				  -	      bvc	.37skip_skip_joystick_left
   3839  195b				  -	      jmp	._skip_joystick_left
   3840  195b				  -.37skip_skip_joystick_left
   3841  195b					      endif
   3842  195b				   .L0494		;  if temp4{2}  ||  !gamenumber{0} then player1x  =  player1x	-  1
   3843  195b
   3844  195b		       a5 9f		      LDA	temp4
   3845  195d		       29 04		      AND	#4
   3846  195f		       f0 03		      BEQ	.skipL0494
   3847  1961				   .condpart71
   3848  1961		       4c 69 99 	      jmp	.condpart72
   3849  1964				   .skipL0494
   3850  1964		       a5 a6		      LDA	gamenumber
   3851  1966		       4a		      LSR
   3852  1967		       b0 02		      BCS	.skip18OR
   3853  1969				   .condpart72
   3854  1969		       c6 81		      DEC	player1x
   3855  196b				   .skip18OR
   3856  196b				   .L0495		;  _Bit6_Flip_P1{6}  =  1  :  _Bit2_P1_Dir_Left{2}  =	1  :  goto _skip_move
   3857  196b
   3858  196b		       a5 ec		      LDA	_Bit6_Flip_P1
   3859  196d		       09 40		      ORA	#64
   3860  196f		       85 ec		      STA	_Bit6_Flip_P1
   3861  1971		       a5 d8		      LDA	_Bit2_P1_Dir_Left
   3862  1973		       09 04		      ORA	#4
   3863  1975		       85 d8		      STA	_Bit2_P1_Dir_Left
   3864  1977		       4c 9b 99 	      jmp	._skip_move
   3865  197a
   3866  197a				   ._skip_joystick_left
   3867  197a							; _skip_joystick_left
   3868  197a
   3869  197a				   .
   3870  197a							; 
   3871  197a
   3872  197a				   .L0496		;  if !joy0right then _skip_move
   3873  197a
   3874  197a		       2c 80 02 	      bit	SWCHA
   3875  197d					      if	((* - ._skip_move) < 127) && ((* - ._skip_move) > -128)
   3876  197d		       30 1c		      bmi	._skip_move
   3877  197f				  -	      else
   3878  197f				  -	      bpl	.38skip_skip_move
   3879  197f				  -	      jmp	._skip_move
   3880  197f				  -.38skip_skip_move
   3881  197f					      endif
   3882  197f				   .L0497		;  if temp4{3}  ||  !gamenumber{0} then player1x  =  player1x	+  1
   3883  197f
   3884  197f		       a5 9f		      LDA	temp4
   3885  1981		       29 08		      AND	#8
   3886  1983		       f0 03		      BEQ	.skipL0497
   3887  1985				   .condpart73
   3888  1985		       4c 8d 99 	      jmp	.condpart74
   3889  1988				   .skipL0497
   3890  1988		       a5 a6		      LDA	gamenumber
   3891  198a		       4a		      LSR
   3892  198b		       b0 02		      BCS	.skip19OR
   3893  198d				   .condpart74
   3894  198d		       e6 81		      INC	player1x
   3895  198f				   .skip19OR
   3896  198f				   .L0498		;  _Bit6_Flip_P1{6}  =  0  :  _Bit3_P1_Dir_Right{3}  =  1
   3897  198f
   3898  198f		       a5 ec		      LDA	_Bit6_Flip_P1
   3899  1991		       29 bf		      AND	#191
   3900  1993		       85 ec		      STA	_Bit6_Flip_P1
   3901  1995		       a5 d8		      LDA	_Bit3_P1_Dir_Right
   3902  1997		       09 08		      ORA	#8
   3903  1999		       85 d8		      STA	_Bit3_P1_Dir_Right
   3904  199b				   .
   3905  199b							; 
   3906  199b
   3907  199b				   ._skip_move
   3908  199b							; _skip_move
   3909  199b
   3910  199b				   .
   3911  199b							; 
   3912  199b
   3913  199b				   .
   3914  199b							; 
   3915  199b
   3916  199b				   .L0499		;  if player1y  <  player_min_y  &&  r_Bit0_room_type_top{0} then player1y  =	player_min_y
   3917  199b
   3918  199b		       a5 86		      LDA	player1y
   3919  199d		       c9 02		      CMP	#player_min_y
   3920  199f		       b0 0a		      BCS	.skipL0499
   3921  19a1				   .condpart75
   3922  19a1		       ad df f0 	      LDA	r_Bit0_room_type_top
   3923  19a4		       4a		      LSR
   3924  19a5		       90 04		      BCC	.skip75then
   3925  19a7				   .condpart76
   3926  19a7		       a9 02		      LDA	#player_min_y
   3927  19a9		       85 86		      STA	player1y
   3928  19ab				   .skip75then
   3929  19ab				   .skipL0499
   3930  19ab				   .
   3931  19ab							; 
   3932  19ab
   3933  19ab				   .
   3934  19ab							; 
   3935  19ab
   3936  19ab				   .L0500		;  if player1x  <  player_min_x then _Bit0_New_Room_P1_Flip{0}  =  _Bit6_Flip_P1{6}  :  new_room_player1y  =  player1y  :  new_room_player1x  =  player_max_x	:  gosub _Add_Room_State  :  WriteSendBuffer  =  req_move_left	:  goto _skip_game_action
   3937  19ab
   3938  19ab		       a5 81		      LDA	player1x
   3939  19ad		       c9 0a		      CMP	#player_min_x
   3940  19af		       b0 23		      BCS	.skipL0500
   3941  19b1				   .condpart77
   3942  19b1		       a5 ec		      LDA	_Bit6_Flip_P1
   3943  19b3		       29 40		      AND	#64
   3944  19b5		       08		      PHP
   3945  19b6		       a5 df		      LDA	_Bit0_New_Room_P1_Flip
   3946  19b8		       29 fe		      AND	#254
   3947  19ba		       28		      PLP
   3948  19bb		       f0 02		      .byte.b	$F0, $02
   3949  19bd		       09 01		      ORA	#1
   3950  19bf		       85 df		      STA	_Bit0_New_Room_P1_Flip
   3951  19c1		       a5 86		      LDA	player1y
   3952  19c3		       85 a4		      STA	new_room_player1y
   3953  19c5		       a9 86		      LDA	#player_max_x
   3954  19c7		       85 a5		      STA	new_room_player1x
   3955  19c9		       20 dd 9d 	      jsr	._Add_Room_State
   3956  19cc		       a9 03		      LDA	#req_move_left
   3957  19ce		       8d f1 1f 	      STA	WriteSendBuffer
   3958  19d1		       4c 4c 9a 	      jmp	._skip_game_action
   3959  19d4
   3960  19d4				   .skipL0500
   3961  19d4				   .L0501		;  if player1y  <  player_min_y then _Bit0_New_Room_P1_Flip{0}  =  _Bit6_Flip_P1{6}  :  new_room_player1x  =  player1x  :  new_room_player1y  =  player_max_y	:  gosub _Add_Room_State  :  WriteSendBuffer  =  req_move_up  :  goto _skip_game_action
   3962  19d4
   3963  19d4		       a5 86		      LDA	player1y
   3964  19d6		       c9 02		      CMP	#player_min_y
   3965  19d8		       b0 23		      BCS	.skipL0501
   3966  19da				   .condpart78
   3967  19da		       a5 ec		      LDA	_Bit6_Flip_P1
   3968  19dc		       29 40		      AND	#64
   3969  19de		       08		      PHP
   3970  19df		       a5 df		      LDA	_Bit0_New_Room_P1_Flip
   3971  19e1		       29 fe		      AND	#254
   3972  19e3		       28		      PLP
   3973  19e4		       f0 02		      .byte.b	$F0, $02
   3974  19e6		       09 01		      ORA	#1
   3975  19e8		       85 df		      STA	_Bit0_New_Room_P1_Flip
   3976  19ea		       a5 81		      LDA	player1x
   3977  19ec		       85 a5		      STA	new_room_player1x
   3978  19ee		       a9 4c		      LDA	#player_max_y
   3979  19f0		       85 a4		      STA	new_room_player1y
   3980  19f2		       20 dd 9d 	      jsr	._Add_Room_State
   3981  19f5		       a9 04		      LDA	#req_move_up
   3982  19f7		       8d f1 1f 	      STA	WriteSendBuffer
   3983  19fa		       4c 4c 9a 	      jmp	._skip_game_action
   3984  19fd
   3985  19fd				   .skipL0501
   3986  19fd				   .L0502		;  if player1x  >  player_max_x then _Bit0_New_Room_P1_Flip{0}  =  _Bit6_Flip_P1{6}  :  new_room_player1y  =  player1y  :  new_room_player1x  =  player_min_x	:  gosub _Add_Room_State  :  WriteSendBuffer  =  req_move_right  :  goto _skip_game_action
   3987  19fd
   3988  19fd		       a9 86		      LDA	#player_max_x
   3989  19ff		       c5 81		      CMP	player1x
   3990  1a01		       b0 23		      BCS	.skipL0502
   3991  1a03				   .condpart79
   3992  1a03		       a5 ec		      LDA	_Bit6_Flip_P1
   3993  1a05		       29 40		      AND	#64
   3994  1a07		       08		      PHP
   3995  1a08		       a5 df		      LDA	_Bit0_New_Room_P1_Flip
   3996  1a0a		       29 fe		      AND	#254
   3997  1a0c		       28		      PLP
   3998  1a0d		       f0 02		      .byte.b	$F0, $02
   3999  1a0f		       09 01		      ORA	#1
   4000  1a11		       85 df		      STA	_Bit0_New_Room_P1_Flip
   4001  1a13		       a5 86		      LDA	player1y
   4002  1a15		       85 a4		      STA	new_room_player1y
   4003  1a17		       a9 0a		      LDA	#player_min_x
   4004  1a19		       85 a5		      STA	new_room_player1x
   4005  1a1b		       20 dd 9d 	      jsr	._Add_Room_State
   4006  1a1e		       a9 05		      LDA	#req_move_right
   4007  1a20		       8d f1 1f 	      STA	WriteSendBuffer
   4008  1a23		       4c 4c 9a 	      jmp	._skip_game_action
   4009  1a26
   4010  1a26				   .skipL0502
   4011  1a26				   .L0503		;  if player1y  >  player_max_y then _Bit0_New_Room_P1_Flip{0}  =  _Bit6_Flip_P1{6}  :  new_room_player1x  =  player1x  :  new_room_player1y  =  player_min_y	:  gosub _Add_Room_State  :  WriteSendBuffer  =  req_move_down
   4012  1a26
   4013  1a26		       a9 4c		      LDA	#player_max_y
   4014  1a28		       c5 86		      CMP	player1y
   4015  1a2a		       b0 20		      BCS	.skipL0503
   4016  1a2c				   .condpart80
   4017  1a2c		       a5 ec		      LDA	_Bit6_Flip_P1
   4018  1a2e		       29 40		      AND	#64
   4019  1a30		       08		      PHP
   4020  1a31		       a5 df		      LDA	_Bit0_New_Room_P1_Flip
   4021  1a33		       29 fe		      AND	#254
   4022  1a35		       28		      PLP
   4023  1a36		       f0 02		      .byte.b	$F0, $02
   4024  1a38		       09 01		      ORA	#1
   4025  1a3a		       85 df		      STA	_Bit0_New_Room_P1_Flip
   4026  1a3c		       a5 81		      LDA	player1x
   4027  1a3e		       85 a5		      STA	new_room_player1x
   4028  1a40		       a9 02		      LDA	#player_min_y
   4029  1a42		       85 a4		      STA	new_room_player1y
   4030  1a44		       20 dd 9d 	      jsr	._Add_Room_State
   4031  1a47		       a9 06		      LDA	#req_move_down
   4032  1a49		       8d f1 1f 	      STA	WriteSendBuffer
   4033  1a4c				   .skipL0503
   4034  1a4c				   .
   4035  1a4c							; 
   4036  1a4c
   4037  1a4c				   ._skip_game_action
   4038  1a4c							; _skip_game_action
   4039  1a4c
   4040  1a4c				   .
   4041  1a4c							; 
   4042  1a4c
   4043  1a4c				   .
   4044  1a4c							; 
   4045  1a4c
   4046  1a4c				   .L0504		;  if !_Ch0_Sound then goto __Skip_Ch_0
   4047  1a4c
   4048  1a4c		       a5 d9		      LDA	_Ch0_Sound
   4049  1a4e		       d0 03		      BNE	.skipL0504
   4050  1a50				   .condpart81
   4051  1a50		       4c a2 9b 	      jmp	.__Skip_Ch_0
   4052  1a53
   4053  1a53				   .skipL0504
   4054  1a53				   .
   4055  1a53							; 
   4056  1a53
   4057  1a53				   .
   4058  1a53							; 
   4059  1a53
   4060  1a53				   .L0505		;  _Ch0_Duration  =  _Ch0_Duration  -	1
   4061  1a53
   4062  1a53		       c6 da		      DEC	_Ch0_Duration
   4063  1a55				   .
   4064  1a55							; 
   4065  1a55
   4066  1a55				   .
   4067  1a55							; 
   4068  1a55
   4069  1a55				   .
   4070  1a55							; 
   4071  1a55
   4072  1a55				   .L0506		;  if _Ch0_Duration then goto __Skip_Ch_0
   4073  1a55
   4074  1a55		       a5 da		      LDA	_Ch0_Duration
   4075  1a57		       f0 03		      BEQ	.skipL0506
   4076  1a59				   .condpart82
   4077  1a59		       4c a2 9b 	      jmp	.__Skip_Ch_0
   4078  1a5c
   4079  1a5c				   .skipL0506
   4080  1a5c				   .
   4081  1a5c							; 
   4082  1a5c
   4083  1a5c				   .
   4084  1a5c							; 
   4085  1a5c
   4086  1a5c				   .
   4087  1a5c							; 
   4088  1a5c
   4089  1a5c				   .
   4090  1a5c							; 
   4091  1a5c
   4092  1a5c				   .L0507		;  if _Ch0_Sound  <>  1 then goto __Skip_Ch0_Sound_001
   4093  1a5c
   4094  1a5c		       a5 d9		      LDA	_Ch0_Sound
   4095  1a5e		       c9 01		      CMP	#1
   4096  1a60		       f0 03		      BEQ	.skipL0507
   4097  1a62				   .condpart83
   4098  1a62		       4c aa 9a 	      jmp	.__Skip_Ch0_Sound_001
   4099  1a65
   4100  1a65				   .skipL0507
   4101  1a65				   .
   4102  1a65							; 
   4103  1a65
   4104  1a65				   .
   4105  1a65							; 
   4106  1a65
   4107  1a65				   .L0508		;  temp4  =  _SD_Shot_Wall[_Ch0_Counter]
   4108  1a65
   4109  1a65		       a6 db		      LDX	_Ch0_Counter
   4110  1a67		       bd a2 9e 	      LDA	_SD_Shot_Wall,x
   4111  1a6a		       85 9f		      STA	temp4
   4112  1a6c				   .
   4113  1a6c							; 
   4114  1a6c
   4115  1a6c				   .
   4116  1a6c							; 
   4117  1a6c
   4118  1a6c				   .L0509		;  if temp4  =  255 then goto __Clear_Ch_0
   4119  1a6c
   4120  1a6c		       a5 9f		      LDA	temp4
   4121  1a6e		       c9 ff		      CMP	#255
   4122  1a70		       d0 03		      BNE	.skipL0509
   4123  1a72				   .condpart84
   4124  1a72		       4c 9c 9b 	      jmp	.__Clear_Ch_0
   4125  1a75
   4126  1a75				   .skipL0509
   4127  1a75				   .
   4128  1a75							; 
   4129  1a75
   4130  1a75				   .
   4131  1a75							; 
   4132  1a75
   4133  1a75				   .L0510		;  _Ch0_Counter  =  _Ch0_Counter  +  1
   4134  1a75
   4135  1a75		       e6 db		      INC	_Ch0_Counter
   4136  1a77				   .L0511		;  temp5  =  _SD_Shot_Wall[_Ch0_Counter]  :  _Ch0_Counter  =  _Ch0_Counter  +	1
   4137  1a77
   4138  1a77		       a6 db		      LDX	_Ch0_Counter
   4139  1a79		       bd a2 9e 	      LDA	_SD_Shot_Wall,x
   4140  1a7c		       85 a0		      STA	temp5
   4141  1a7e		       e6 db		      INC	_Ch0_Counter
   4142  1a80				   .L0512		;  temp6  =  _SD_Shot_Wall[_Ch0_Counter]  :  _Ch0_Counter  =  _Ch0_Counter  +	1
   4143  1a80
   4144  1a80		       a6 db		      LDX	_Ch0_Counter
   4145  1a82		       bd a2 9e 	      LDA	_SD_Shot_Wall,x
   4146  1a85		       85 a1		      STA	temp6
   4147  1a87		       e6 db		      INC	_Ch0_Counter
   4148  1a89				   .L0513		;  if _Ch0_Counter{0} then COLUBK  =  _E0
   4149  1a89
   4150  1a89		       a5 db		      LDA	_Ch0_Counter
   4151  1a8b		       4a		      LSR
   4152  1a8c		       90 04		      BCC	.skipL0513
   4153  1a8e				   .condpart85
   4154  1a8e		       a9 e0		      LDA	#_E0
   4155  1a90		       85 09		      STA	COLUBK
   4156  1a92				   .skipL0513
   4157  1a92				   .
   4158  1a92							; 
   4159  1a92
   4160  1a92				   .
   4161  1a92							; 
   4162  1a92
   4163  1a92				   .L0514		;  AUDV0  =  temp4
   4164  1a92
   4165  1a92		       a5 9f		      LDA	temp4
   4166  1a94		       85 19		      STA	AUDV0
   4167  1a96				   .L0515		;  AUDC0  =  temp5
   4168  1a96
   4169  1a96		       a5 a0		      LDA	temp5
   4170  1a98		       85 15		      STA	AUDC0
   4171  1a9a				   .L0516		;  AUDF0  =  temp6
   4172  1a9a
   4173  1a9a		       a5 a1		      LDA	temp6
   4174  1a9c		       85 17		      STA	AUDF0
   4175  1a9e				   .
   4176  1a9e							; 
   4177  1a9e
   4178  1a9e				   .
   4179  1a9e							; 
   4180  1a9e
   4181  1a9e				   .L0517		;  _Ch0_Duration  =  _SD_Shot_Wall[_Ch0_Counter]  :  _Ch0_Counter  =  _Ch0_Counter  +	1
   4182  1a9e
   4183  1a9e		       a6 db		      LDX	_Ch0_Counter
   4184  1aa0		       bd a2 9e 	      LDA	_SD_Shot_Wall,x
   4185  1aa3		       85 da		      STA	_Ch0_Duration
   4186  1aa5		       e6 db		      INC	_Ch0_Counter
   4187  1aa7				   .
   4188  1aa7							; 
   4189  1aa7
   4190  1aa7				   .
   4191  1aa7							; 
   4192  1aa7
   4193  1aa7				   .L0518		;  goto __Skip_Ch_0
   4194  1aa7
   4195  1aa7		       4c a2 9b 	      jmp	.__Skip_Ch_0
   4196  1aaa
   4197  1aaa				   .
   4198  1aaa							; 
   4199  1aaa
   4200  1aaa				   .__Skip_Ch0_Sound_001
   4201  1aaa							; __Skip_Ch0_Sound_001
   4202  1aaa
   4203  1aaa				   .
   4204  1aaa							; 
   4205  1aaa
   4206  1aaa				   .
   4207  1aaa							; 
   4208  1aaa
   4209  1aaa				   .
   4210  1aaa							; 
   4211  1aaa
   4212  1aaa				   .
   4213  1aaa							; 
   4214  1aaa
   4215  1aaa				   .L0519		;  if _Ch0_Sound  <>  2 then goto __Skip_Ch0_Sound_002
   4216  1aaa
   4217  1aaa		       a5 d9		      LDA	_Ch0_Sound
   4218  1aac		       c9 02		      CMP	#2
   4219  1aae		       f0 03		      BEQ	.skipL0519
   4220  1ab0				   .condpart86
   4221  1ab0		       4c ef 9a 	      jmp	.__Skip_Ch0_Sound_002
   4222  1ab3
   4223  1ab3				   .skipL0519
   4224  1ab3				   .
   4225  1ab3							; 
   4226  1ab3
   4227  1ab3				   .
   4228  1ab3							; 
   4229  1ab3
   4230  1ab3				   .L0520		;  temp4  =  _SD_Shoot_Miss[_Ch0_Counter]
   4231  1ab3
   4232  1ab3		       a6 db		      LDX	_Ch0_Counter
   4233  1ab5		       bd da 9e 	      LDA	_SD_Shoot_Miss,x
   4234  1ab8		       85 9f		      STA	temp4
   4235  1aba				   .
   4236  1aba							; 
   4237  1aba
   4238  1aba				   .
   4239  1aba							; 
   4240  1aba
   4241  1aba				   .L0521		;  if temp4  =  255 then goto __Clear_Ch_0
   4242  1aba
   4243  1aba		       a5 9f		      LDA	temp4
   4244  1abc		       c9 ff		      CMP	#255
   4245  1abe		       d0 03		      BNE	.skipL0521
   4246  1ac0				   .condpart87
   4247  1ac0		       4c 9c 9b 	      jmp	.__Clear_Ch_0
   4248  1ac3
   4249  1ac3				   .skipL0521
   4250  1ac3				   .
   4251  1ac3							; 
   4252  1ac3
   4253  1ac3				   .
   4254  1ac3							; 
   4255  1ac3
   4256  1ac3				   .L0522		;  _Ch0_Counter  =  _Ch0_Counter  +  1
   4257  1ac3
   4258  1ac3		       e6 db		      INC	_Ch0_Counter
   4259  1ac5				   .L0523		;  temp5  =  _SD_Shoot_Miss[_Ch0_Counter]  :  _Ch0_Counter  =	_Ch0_Counter  +  1
   4260  1ac5
   4261  1ac5		       a6 db		      LDX	_Ch0_Counter
   4262  1ac7		       bd da 9e 	      LDA	_SD_Shoot_Miss,x
   4263  1aca		       85 a0		      STA	temp5
   4264  1acc		       e6 db		      INC	_Ch0_Counter
   4265  1ace				   .L0524		;  temp6  =  _SD_Shoot_Miss[_Ch0_Counter]  :  _Ch0_Counter  =	_Ch0_Counter  +  1
   4266  1ace
   4267  1ace		       a6 db		      LDX	_Ch0_Counter
   4268  1ad0		       bd da 9e 	      LDA	_SD_Shoot_Miss,x
   4269  1ad3		       85 a1		      STA	temp6
   4270  1ad5		       e6 db		      INC	_Ch0_Counter
   4271  1ad7				   .
   4272  1ad7							; 
   4273  1ad7
   4274  1ad7				   .
   4275  1ad7							; 
   4276  1ad7
   4277  1ad7				   .L0525		;  AUDV0  =  temp4
   4278  1ad7
   4279  1ad7		       a5 9f		      LDA	temp4
   4280  1ad9		       85 19		      STA	AUDV0
   4281  1adb				   .L0526		;  AUDC0  =  temp5
   4282  1adb
   4283  1adb		       a5 a0		      LDA	temp5
   4284  1add		       85 15		      STA	AUDC0
   4285  1adf				   .L0527		;  AUDF0  =  temp6
   4286  1adf
   4287  1adf		       a5 a1		      LDA	temp6
   4288  1ae1		       85 17		      STA	AUDF0
   4289  1ae3				   .
   4290  1ae3							; 
   4291  1ae3
   4292  1ae3				   .
   4293  1ae3							; 
   4294  1ae3
   4295  1ae3				   .L0528		;  _Ch0_Duration  =  _SD_Shoot_Miss[_Ch0_Counter]  :  _Ch0_Counter  =	_Ch0_Counter  +  1
   4296  1ae3
   4297  1ae3		       a6 db		      LDX	_Ch0_Counter
   4298  1ae5		       bd da 9e 	      LDA	_SD_Shoot_Miss,x
   4299  1ae8		       85 da		      STA	_Ch0_Duration
   4300  1aea		       e6 db		      INC	_Ch0_Counter
   4301  1aec				   .
   4302  1aec							; 
   4303  1aec
   4304  1aec				   .
   4305  1aec							; 
   4306  1aec
   4307  1aec				   .L0529		;  goto __Skip_Ch_0
   4308  1aec
   4309  1aec		       4c a2 9b 	      jmp	.__Skip_Ch_0
   4310  1aef
   4311  1aef				   .
   4312  1aef							; 
   4313  1aef
   4314  1aef				   .__Skip_Ch0_Sound_002
   4315  1aef							; __Skip_Ch0_Sound_002
   4316  1aef
   4317  1aef				   .
   4318  1aef							; 
   4319  1aef
   4320  1aef				   .
   4321  1aef							; 
   4322  1aef
   4323  1aef				   .
   4324  1aef							; 
   4325  1aef
   4326  1aef				   .
   4327  1aef							; 
   4328  1aef
   4329  1aef				   .L0530		;  if _Ch0_Sound  <>  3 then goto __Skip_Ch0_Sound_003
   4330  1aef
   4331  1aef		       a5 d9		      LDA	_Ch0_Sound
   4332  1af1		       c9 03		      CMP	#3
   4333  1af3		       f0 03		      BEQ	.skipL0530
   4334  1af5				   .condpart88
   4335  1af5		       4c 34 9b 	      jmp	.__Skip_Ch0_Sound_003
   4336  1af8
   4337  1af8				   .skipL0530
   4338  1af8				   .
   4339  1af8							; 
   4340  1af8
   4341  1af8				   .
   4342  1af8							; 
   4343  1af8
   4344  1af8				   .L0531		;  temp4  =  _SD_Shoot_Enemy[_Ch0_Counter]
   4345  1af8
   4346  1af8		       a6 db		      LDX	_Ch0_Counter
   4347  1afa		       bd 22 9f 	      LDA	_SD_Shoot_Enemy,x
   4348  1afd		       85 9f		      STA	temp4
   4349  1aff				   .
   4350  1aff							; 
   4351  1aff
   4352  1aff				   .
   4353  1aff							; 
   4354  1aff
   4355  1aff				   .L0532		;  if temp4  =  255 then goto __Clear_Ch_0
   4356  1aff
   4357  1aff		       a5 9f		      LDA	temp4
   4358  1b01		       c9 ff		      CMP	#255
   4359  1b03		       d0 03		      BNE	.skipL0532
   4360  1b05				   .condpart89
   4361  1b05		       4c 9c 9b 	      jmp	.__Clear_Ch_0
   4362  1b08
   4363  1b08				   .skipL0532
   4364  1b08				   .
   4365  1b08							; 
   4366  1b08
   4367  1b08				   .
   4368  1b08							; 
   4369  1b08
   4370  1b08				   .L0533		;  _Ch0_Counter  =  _Ch0_Counter  +  1
   4371  1b08
   4372  1b08		       e6 db		      INC	_Ch0_Counter
   4373  1b0a				   .L0534		;  temp5  =  _SD_Shoot_Enemy[_Ch0_Counter]  :	_Ch0_Counter  =  _Ch0_Counter  +  1
   4374  1b0a
   4375  1b0a		       a6 db		      LDX	_Ch0_Counter
   4376  1b0c		       bd 22 9f 	      LDA	_SD_Shoot_Enemy,x
   4377  1b0f		       85 a0		      STA	temp5
   4378  1b11		       e6 db		      INC	_Ch0_Counter
   4379  1b13				   .L0535		;  temp6  =  _SD_Shoot_Enemy[_Ch0_Counter]  :	_Ch0_Counter  =  _Ch0_Counter  +  1
   4380  1b13
   4381  1b13		       a6 db		      LDX	_Ch0_Counter
   4382  1b15		       bd 22 9f 	      LDA	_SD_Shoot_Enemy,x
   4383  1b18		       85 a1		      STA	temp6
   4384  1b1a		       e6 db		      INC	_Ch0_Counter
   4385  1b1c				   .
   4386  1b1c							; 
   4387  1b1c
   4388  1b1c				   .
   4389  1b1c							; 
   4390  1b1c
   4391  1b1c				   .L0536		;  AUDV0  =  temp4
   4392  1b1c
   4393  1b1c		       a5 9f		      LDA	temp4
   4394  1b1e		       85 19		      STA	AUDV0
   4395  1b20				   .L0537		;  AUDC0  =  temp5
   4396  1b20
   4397  1b20		       a5 a0		      LDA	temp5
   4398  1b22		       85 15		      STA	AUDC0
   4399  1b24				   .L0538		;  AUDF0  =  temp6
   4400  1b24
   4401  1b24		       a5 a1		      LDA	temp6
   4402  1b26		       85 17		      STA	AUDF0
   4403  1b28				   .
   4404  1b28							; 
   4405  1b28
   4406  1b28				   .
   4407  1b28							; 
   4408  1b28
   4409  1b28				   .L0539		;  _Ch0_Duration  =  _SD_Shoot_Enemy[_Ch0_Counter]  :	_Ch0_Counter  =  _Ch0_Counter  +  1
   4410  1b28
   4411  1b28		       a6 db		      LDX	_Ch0_Counter
   4412  1b2a		       bd 22 9f 	      LDA	_SD_Shoot_Enemy,x
   4413  1b2d		       85 da		      STA	_Ch0_Duration
   4414  1b2f		       e6 db		      INC	_Ch0_Counter
   4415  1b31				   .
   4416  1b31							; 
   4417  1b31
   4418  1b31				   .
   4419  1b31							; 
   4420  1b31
   4421  1b31				   .L0540		;  goto __Skip_Ch_0
   4422  1b31
   4423  1b31		       4c a2 9b 	      jmp	.__Skip_Ch_0
   4424  1b34
   4425  1b34				   .
   4426  1b34							; 
   4427  1b34
   4428  1b34				   .__Skip_Ch0_Sound_003
   4429  1b34							; __Skip_Ch0_Sound_003
   4430  1b34
   4431  1b34				   .
   4432  1b34							; 
   4433  1b34
   4434  1b34				   .
   4435  1b34							; 
   4436  1b34
   4437  1b34				   .
   4438  1b34							; 
   4439  1b34
   4440  1b34				   .
   4441  1b34							; 
   4442  1b34
   4443  1b34				   .L0541		;  if _Ch0_Sound  <>  4 then goto __Skip_Ch0_Sound_004
   4444  1b34
   4445  1b34		       a5 d9		      LDA	_Ch0_Sound
   4446  1b36		       c9 04		      CMP	#4
   4447  1b38		       f0 03		      BEQ	.skipL0541
   4448  1b3a				   .condpart90
   4449  1b3a		       4c 79 9b 	      jmp	.__Skip_Ch0_Sound_004
   4450  1b3d
   4451  1b3d				   .skipL0541
   4452  1b3d				   .
   4453  1b3d							; 
   4454  1b3d
   4455  1b3d				   .
   4456  1b3d							; 
   4457  1b3d
   4458  1b3d				   .L0542		;  temp4  =  _SD_Touch_Enemy[_Ch0_Counter]
   4459  1b3d
   4460  1b3d		       a6 db		      LDX	_Ch0_Counter
   4461  1b3f		       bd 46 9f 	      LDA	_SD_Touch_Enemy,x
   4462  1b42		       85 9f		      STA	temp4
   4463  1b44				   .
   4464  1b44							; 
   4465  1b44
   4466  1b44				   .
   4467  1b44							; 
   4468  1b44
   4469  1b44				   .L0543		;  if temp4  =  255 then goto __Clear_Ch_0
   4470  1b44
   4471  1b44		       a5 9f		      LDA	temp4
   4472  1b46		       c9 ff		      CMP	#255
   4473  1b48		       d0 03		      BNE	.skipL0543
   4474  1b4a				   .condpart91
   4475  1b4a		       4c 9c 9b 	      jmp	.__Clear_Ch_0
   4476  1b4d
   4477  1b4d				   .skipL0543
   4478  1b4d				   .
   4479  1b4d							; 
   4480  1b4d
   4481  1b4d				   .
   4482  1b4d							; 
   4483  1b4d
   4484  1b4d				   .L0544		;  _Ch0_Counter  =  _Ch0_Counter  +  1
   4485  1b4d
   4486  1b4d		       e6 db		      INC	_Ch0_Counter
   4487  1b4f				   .L0545		;  temp5  =  _SD_Touch_Enemy[_Ch0_Counter]  :	_Ch0_Counter  =  _Ch0_Counter  +  1
   4488  1b4f
   4489  1b4f		       a6 db		      LDX	_Ch0_Counter
   4490  1b51		       bd 46 9f 	      LDA	_SD_Touch_Enemy,x
   4491  1b54		       85 a0		      STA	temp5
   4492  1b56		       e6 db		      INC	_Ch0_Counter
   4493  1b58				   .L0546		;  temp6  =  _SD_Touch_Enemy[_Ch0_Counter]  :	_Ch0_Counter  =  _Ch0_Counter  +  1
   4494  1b58
   4495  1b58		       a6 db		      LDX	_Ch0_Counter
   4496  1b5a		       bd 46 9f 	      LDA	_SD_Touch_Enemy,x
   4497  1b5d		       85 a1		      STA	temp6
   4498  1b5f		       e6 db		      INC	_Ch0_Counter
   4499  1b61				   .
   4500  1b61							; 
   4501  1b61
   4502  1b61				   .
   4503  1b61							; 
   4504  1b61
   4505  1b61				   .L0547		;  AUDV0  =  temp4
   4506  1b61
   4507  1b61		       a5 9f		      LDA	temp4
   4508  1b63		       85 19		      STA	AUDV0
   4509  1b65				   .L0548		;  AUDC0  =  temp5
   4510  1b65
   4511  1b65		       a5 a0		      LDA	temp5
   4512  1b67		       85 15		      STA	AUDC0
   4513  1b69				   .L0549		;  AUDF0  =  temp6
   4514  1b69
   4515  1b69		       a5 a1		      LDA	temp6
   4516  1b6b		       85 17		      STA	AUDF0
   4517  1b6d				   .
   4518  1b6d							; 
   4519  1b6d
   4520  1b6d				   .
   4521  1b6d							; 
   4522  1b6d
   4523  1b6d				   .L0550		;  _Ch0_Duration  =  _SD_Touch_Enemy[_Ch0_Counter]  :	_Ch0_Counter  =  _Ch0_Counter  +  1
   4524  1b6d
   4525  1b6d		       a6 db		      LDX	_Ch0_Counter
   4526  1b6f		       bd 46 9f 	      LDA	_SD_Touch_Enemy,x
   4527  1b72		       85 da		      STA	_Ch0_Duration
   4528  1b74		       e6 db		      INC	_Ch0_Counter
   4529  1b76				   .
   4530  1b76							; 
   4531  1b76
   4532  1b76				   .
   4533  1b76							; 
   4534  1b76
   4535  1b76				   .L0551		;  goto __Skip_Ch_0
   4536  1b76
   4537  1b76		       4c a2 9b 	      jmp	.__Skip_Ch_0
   4538  1b79
   4539  1b79				   .
   4540  1b79							; 
   4541  1b79
   4542  1b79				   .__Skip_Ch0_Sound_004
   4543  1b79							; __Skip_Ch0_Sound_004
   4544  1b79
   4545  1b79				   .
   4546  1b79							; 
   4547  1b79
   4548  1b79				   .
   4549  1b79							; 
   4550  1b79
   4551  1b79				   .
   4552  1b79							; 
   4553  1b79
   4554  1b79				   .
   4555  1b79							; 
   4556  1b79
   4557  1b79				   .L0552		;  if _Ch0_Sound  <>  5 then goto __Skip_Ch0_Sound_005
   4558  1b79
   4559  1b79		       a5 d9		      LDA	_Ch0_Sound
   4560  1b7b		       c9 05		      CMP	#5
   4561  1b7d		       f0 03		      BEQ	.skipL0552
   4562  1b7f				   .condpart92
   4563  1b7f		       4c 9c 9b 	      jmp	.__Skip_Ch0_Sound_005
   4564  1b82
   4565  1b82				   .skipL0552
   4566  1b82				   .
   4567  1b82							; 
   4568  1b82
   4569  1b82				   .L0553		;  temp4  =  _SD_Helicopter_Explosion[_Ch0_Counter]
   4570  1b82
   4571  1b82		       a6 db		      LDX	_Ch0_Counter
   4572  1b84		       bd 66 9f 	      LDA	_SD_Helicopter_Explosion,x
   4573  1b87		       85 9f		      STA	temp4
   4574  1b89				   .L0554		;  if temp4  =  255 then __Clear_Ch_0
   4575  1b89
   4576  1b89		       a5 9f		      LDA	temp4
   4577  1b8b		       c9 ff		      CMP	#255
   4578  1b8d					      if	((* - .__Clear_Ch_0) < 127) && ((* - .__Clear_Ch_0) > -128)
   4579  1b8d		       f0 0d		      BEQ	.__Clear_Ch_0
   4580  1b8f				  -	      else
   4581  1b8f				  -	      bne	.39skip__Clear_Ch_0
   4582  1b8f				  -	      jmp	.__Clear_Ch_0
   4583  1b8f				  -.39skip__Clear_Ch_0
   4584  1b8f					      endif
   4585  1b8f				   .
   4586  1b8f							; 
   4587  1b8f
   4588  1b8f				   .L0555		;  AUDV0  =  temp4
   4589  1b8f
   4590  1b8f		       a5 9f		      LDA	temp4
   4591  1b91		       85 19		      STA	AUDV0
   4592  1b93				   .
   4593  1b93							; 
   4594  1b93
   4595  1b93				   .
   4596  1b93							; 
   4597  1b93
   4598  1b93				   .L0556		;  _Ch0_Duration  =  8  :  _Ch0_Counter  =  _Ch0_Counter  +  1
   4599  1b93
   4600  1b93		       a9 08		      LDA	#8
   4601  1b95		       85 da		      STA	_Ch0_Duration
   4602  1b97		       e6 db		      INC	_Ch0_Counter
   4603  1b99				   .
   4604  1b99							; 
   4605  1b99
   4606  1b99				   .L0557		;  goto __Skip_Ch_0
   4607  1b99
   4608  1b99		       4c a2 9b 	      jmp	.__Skip_Ch_0
   4609  1b9c
   4610  1b9c				   .
   4611  1b9c							; 
   4612  1b9c
   4613  1b9c				   .__Skip_Ch0_Sound_005
   4614  1b9c							; __Skip_Ch0_Sound_005
   4615  1b9c
   4616  1b9c				   .
   4617  1b9c							; 
   4618  1b9c
   4619  1b9c				   .
   4620  1b9c							; 
   4621  1b9c
   4622  1b9c				   .__Clear_Ch_0
   4623  1b9c							; __Clear_Ch_0
   4624  1b9c
   4625  1b9c				   .L0558		;  _Ch0_Sound	=  0  :  AUDV0	=  0
   4626  1b9c
   4627  1b9c		       a9 00		      LDA	#0
   4628  1b9e		       85 d9		      STA	_Ch0_Sound
   4629  1ba0		       85 19		      STA	AUDV0
   4630  1ba2				   .
   4631  1ba2							; 
   4632  1ba2
   4633  1ba2				   .
   4634  1ba2							; 
   4635  1ba2
   4636  1ba2				   .__Skip_Ch_0
   4637  1ba2							; __Skip_Ch_0
   4638  1ba2
   4639  1ba2				   .
   4640  1ba2							; 
   4641  1ba2
   4642  1ba2				   .
   4643  1ba2							; 
   4644  1ba2
   4645  1ba2				   .
   4646  1ba2							; 
   4647  1ba2
   4648  1ba2				   .L0559		;  if Game_Status then AUDV1  =  0  :	goto __Skip_Ch_1
   4649  1ba2
   4650  1ba2		       a5 d3		      LDA	Game_Status
   4651  1ba4		       f0 07		      BEQ	.skipL0559
   4652  1ba6				   .condpart93
   4653  1ba6		       a9 00		      LDA	#0
   4654  1ba8		       85 1a		      STA	AUDV1
   4655  1baa		       4c f5 9b 	      jmp	.__Skip_Ch_1
   4656  1bad
   4657  1bad				   .skipL0559
   4658  1bad				   .
   4659  1bad							; 
   4660  1bad
   4661  1bad				   .
   4662  1bad							; 
   4663  1bad
   4664  1bad				   .
   4665  1bad							; 
   4666  1bad
   4667  1bad				   .
   4668  1bad							; 
   4669  1bad
   4670  1bad				   .L0560		;  _Ch1_Duration  =  _Ch1_Duration  -	1
   4671  1bad
   4672  1bad		       c6 e2		      DEC	_Ch1_Duration
   4673  1baf				   .
   4674  1baf							; 
   4675  1baf
   4676  1baf				   .
   4677  1baf							; 
   4678  1baf
   4679  1baf				   .
   4680  1baf							; 
   4681  1baf
   4682  1baf				   .
   4683  1baf							; 
   4684  1baf
   4685  1baf				   .L0561		;  if _Ch1_Duration then __Skip_Ch_1
   4686  1baf
   4687  1baf		       a5 e2		      LDA	_Ch1_Duration
   4688  1bb1					      if	((* - .__Skip_Ch_1) < 127) && ((* - .__Skip_Ch_1) > -128)
   4689  1bb1		       d0 42		      BNE	.__Skip_Ch_1
   4690  1bb3				  -	      else
   4691  1bb3				  -	      beq	.40skip__Skip_Ch_1
   4692  1bb3				  -	      jmp	.__Skip_Ch_1
   4693  1bb3				  -.40skip__Skip_Ch_1
   4694  1bb3					      endif
   4695  1bb3				   .
   4696  1bb3							; 
   4697  1bb3
   4698  1bb3				   .L0562		;  if _Bit0_Rotor_Sound_On{0} then _Ch1_Duration  =  1  :  AUDV1  =  8  :  goto __Flip_Rotor_Sound
   4699  1bb3
   4700  1bb3		       a5 ec		      LDA	_Bit0_Rotor_Sound_On
   4701  1bb5		       4a		      LSR
   4702  1bb6		       90 0b		      BCC	.skipL0562
   4703  1bb8				   .condpart94
   4704  1bb8		       a9 01		      LDA	#1
   4705  1bba		       85 e2		      STA	_Ch1_Duration
   4706  1bbc		       a9 08		      LDA	#8
   4707  1bbe		       85 1a		      STA	AUDV1
   4708  1bc0		       4c ef 9b 	      jmp	.__Flip_Rotor_Sound
   4709  1bc3
   4710  1bc3				   .skipL0562
   4711  1bc3				   .L0563		;  AUDV1  =  0
   4712  1bc3
   4713  1bc3		       a9 00		      LDA	#0
   4714  1bc5		       85 1a		      STA	AUDV1
   4715  1bc7				   .L0564		;  if ! _BitOp_P1_Dir then _Ch1_Duration  =  16  :  goto __Flip_Rotor_Sound
   4716  1bc7
   4717  1bc7		       a5 d8		      LDA	_BitOp_P1_Dir
   4718  1bc9		       d0 07		      BNE	.skipL0564
   4719  1bcb				   .condpart95
   4720  1bcb		       a9 10		      LDA	#16
   4721  1bcd		       85 e2		      STA	_Ch1_Duration
   4722  1bcf		       4c ef 9b 	      jmp	.__Flip_Rotor_Sound
   4723  1bd2
   4724  1bd2				   .skipL0564
   4725  1bd2				   .L0565		;  if _Bit0_P1_Dir_Up{0} then _Ch1_Duration  =  10  :	goto __Flip_Rotor_Sound
   4726  1bd2
   4727  1bd2		       a5 d8		      LDA	_Bit0_P1_Dir_Up
   4728  1bd4		       4a		      LSR
   4729  1bd5		       90 07		      BCC	.skipL0565
   4730  1bd7				   .condpart96
   4731  1bd7		       a9 0a		      LDA	#10
   4732  1bd9		       85 e2		      STA	_Ch1_Duration
   4733  1bdb		       4c ef 9b 	      jmp	.__Flip_Rotor_Sound
   4734  1bde
   4735  1bde				   .skipL0565
   4736  1bde				   .L0566		;  if _Bit1_P1_Dir_Down{1} then _Ch1_Duration	=  18  :  goto __Flip_Rotor_Sound
   4737  1bde
   4738  1bde		       a5 d8		      LDA	_Bit1_P1_Dir_Down
   4739  1be0		       29 02		      AND	#2
   4740  1be2		       f0 07		      BEQ	.skipL0566
   4741  1be4				   .condpart97
   4742  1be4		       a9 12		      LDA	#18
   4743  1be6		       85 e2		      STA	_Ch1_Duration
   4744  1be8		       4c ef 9b 	      jmp	.__Flip_Rotor_Sound
   4745  1beb
   4746  1beb				   .skipL0566
   4747  1beb				   .L0567		;  _Ch1_Duration  =  12
   4748  1beb
   4749  1beb		       a9 0c		      LDA	#12
   4750  1bed		       85 e2		      STA	_Ch1_Duration
   4751  1bef				   .
   4752  1bef							; 
   4753  1bef
   4754  1bef				   .__Flip_Rotor_Sound
   4755  1bef							; __Flip_Rotor_Sound
   4756  1bef
   4757  1bef				   .L0568		;  _Bit0_Rotor_Sound_On  =  _Bit0_Rotor_Sound_On  ^  1
   4758  1bef
   4759  1bef		       a5 ec		      LDA	_Bit0_Rotor_Sound_On
   4760  1bf1		       49 01		      EOR	#1
   4761  1bf3		       85 ec		      STA	_Bit0_Rotor_Sound_On
   4762  1bf5				   .
   4763  1bf5							; 
   4764  1bf5
   4765  1bf5				   .
   4766  1bf5							; 
   4767  1bf5
   4768  1bf5				   .
   4769  1bf5							; 
   4770  1bf5
   4771  1bf5				   .
   4772  1bf5							; 
   4773  1bf5
   4774  1bf5				   .
   4775  1bf5							; 
   4776  1bf5
   4777  1bf5				   .
   4778  1bf5							; 
   4779  1bf5
   4780  1bf5				   .__Skip_Ch_1
   4781  1bf5							; __Skip_Ch_1
   4782  1bf5
   4783  1bf5				   .
   4784  1bf5							; 
   4785  1bf5
   4786  1bf5				   .
   4787  1bf5							; 
   4788  1bf5
   4789  1bf5				   .
   4790  1bf5							; 
   4791  1bf5
   4792  1bf5				   .
   4793  1bf5							; 
   4794  1bf5
   4795  1bf5				   .
   4796  1bf5							; 
   4797  1bf5
   4798  1bf5				   .
   4799  1bf5							; 
   4800  1bf5
   4801  1bf5				   .
   4802  1bf5							; 
   4803  1bf5
   4804  1bf5				   .
   4805  1bf5							; 
   4806  1bf5
   4807  1bf5				   .L0569		;  if _Bit6_Flip_P1{6} then REFP1  =  8
   4808  1bf5
   4809  1bf5		       24 ec		      BIT	_Bit6_Flip_P1
   4810  1bf7		       50 04		      BVC	.skipL0569
   4811  1bf9				   .condpart98
   4812  1bf9		       a9 08		      LDA	#8
   4813  1bfb		       85 0c		      STA	REFP1
   4814  1bfd				   .skipL0569
   4815  1bfd				   .L0570		;  if _Bit2_roommate_Dir{2} then REFP0  =  8
   4816  1bfd
   4817  1bfd		       a5 ec		      LDA	_Bit2_roommate_Dir
   4818  1bff		       29 04		      AND	#4
   4819  1c01		       f0 04		      BEQ	.skipL0570
   4820  1c03				   .condpart99
   4821  1c03		       a9 08		      LDA	#8
   4822  1c05		       85 0b		      STA	REFP0
   4823  1c07				   .skipL0570
   4824  1c07				   .
   4825  1c07							; 
   4826  1c07
   4827  1c07				   .L0571		;  drawscreen
   4828  1c07
   4829  1c07		       85 ee		      sta	temp7
   4830  1c09		       a9 9c		      lda	#>(ret_point3-1)
   4831  1c0b		       48		      pha
   4832  1c0c		       a9 1e		      lda	#<(ret_point3-1)
   4833  1c0e		       48		      pha
   4834  1c0f		       a9 f4		      lda	#>(drawscreen-1)
   4835  1c11		       48		      pha
   4836  1c12		       a9 e5		      lda	#<(drawscreen-1)
   4837  1c14		       48		      pha
   4838  1c15		       a5 ee		      lda	temp7
   4839  1c17		       48		      pha
   4840  1c18		       8a		      txa
   4841  1c19		       48		      pha
   4842  1c1a		       a2 04		      ldx	#4
   4843  1c1c		       4c e8 ff 	      jmp	BS_jsr
   4844  1c1f				   ret_point3
   4845  1c1f				   .
   4846  1c1f							; 
   4847  1c1f
   4848  1c1f				   .L0572		;  goto __Main_Loop
   4849  1c1f
   4850  1c1f		       4c 95 91 	      jmp	.__Main_Loop
   4851  1c22
   4852  1c22				   .
   4853  1c22							; 
   4854  1c22
   4855  1c22				   .
   4856  1c22							; 
   4857  1c22
   4858  1c22				   .
   4859  1c22							; 
   4860  1c22
   4861  1c22				   .
   4862  1c22							; 
   4863  1c22
   4864  1c22				   ._game_over_action
   4865  1c22							; _game_over_action
   4866  1c22
   4867  1c22				   .L0573		;  if joy0fire then goto _Reset_To_Start
   4868  1c22
   4869  1c22		       24 0c		      bit	INPT4
   4870  1c24		       30 03		      BMI	.skipL0573
   4871  1c26				   .condpart100
   4872  1c26		       4c 8f 9e 	      jmp	._Reset_To_Start
   4873  1c29
   4874  1c29				   .skipL0573
   4875  1c29				   .L0574		;  goto _skip_game_action
   4876  1c29
   4877  1c29		       4c 4c 9a 	      jmp	._skip_game_action
   4878  1c2c
   4879  1c2c				   .
   4880  1c2c							; 
   4881  1c2c
   4882  1c2c				   ._Level_Finished_loop
   4883  1c2c							; _Level_Finished_loop
   4884  1c2c
   4885  1c2c				   .
   4886  1c2c							; 
   4887  1c2c
   4888  1c2c				   .L0575		;  if pfscore2 then pfscore2  =  pfscore2  /  2  :  score  =  score  +  bonus_level_timer  :  goto _bonus_sound_delay
   4889  1c2c
   4890  1c2c		       a5 f3		      LDA	pfscore2
   4891  1c2e		       f0 17		      BEQ	.skipL0575
   4892  1c30				   .condpart101
   4893  1c30		       a5 f3		      LDA	pfscore2
   4894  1c32		       4a		      lsr
   4895  1c33		       85 f3		      STA	pfscore2
   4896  1c35		       f8		      SED
   4897  1c36		       18		      CLC
   4898  1c37		       a5 94		      LDA	score+1
   4899  1c39		       69 01		      ADC	#$01
   4900  1c3b		       85 94		      STA	score+1
   4901  1c3d		       a5 93		      LDA	score
   4902  1c3f		       69 00		      ADC	#$00
   4903  1c41		       85 93		      STA	score
   4904  1c43		       d8		      CLD
   4905  1c44		       4c 90 9c 	      jmp	._bonus_sound_delay
   4906  1c47
   4907  1c47				   .skipL0575
   4908  1c47				   .
   4909  1c47							; 
   4910  1c47
   4911  1c47				   .
   4912  1c47							; 
   4913  1c47
   4914  1c47				   .L0576		;  if pfscore1 then pfscore1  =  pfscore1  /  4  :  score  =  score  +  bonus_level_lives  :  goto _bonus_sound_delay
   4915  1c47
   4916  1c47		       a5 f2		      LDA	pfscore1
   4917  1c49		       f0 18		      BEQ	.skipL0576
   4918  1c4b				   .condpart102
   4919  1c4b		       a5 f2		      LDA	pfscore1
   4920  1c4d		       4a		      lsr
   4921  1c4e		       4a		      lsr
   4922  1c4f		       85 f2		      STA	pfscore1
   4923  1c51		       f8		      SED
   4924  1c52		       18		      CLC
   4925  1c53		       a5 94		      LDA	score+1
   4926  1c55		       69 02		      ADC	#$02
   4927  1c57		       85 94		      STA	score+1
   4928  1c59		       a5 93		      LDA	score
   4929  1c5b		       69 00		      ADC	#$00
   4930  1c5d		       85 93		      STA	score
   4931  1c5f		       d8		      CLD
   4932  1c60		       4c 90 9c 	      jmp	._bonus_sound_delay
   4933  1c63
   4934  1c63				   .skipL0576
   4935  1c63				   .L0577		;  if ! _Bit3_Safe_Point_reached{3} then WriteToBuffer  =  _sc1  :  WriteToBuffer  =  _sc2  :	WriteToBuffer  =  _sc3	:  WriteSendBuffer  =  req_level_up  :	_Bit3_Safe_Point_reached{3}  =	1
   4936  1c63
   4937  1c63		       a5 ec		      LDA	_Bit3_Safe_Point_reached
   4938  1c65		       29 08		      AND	#8
   4939  1c67		       d0 1a		      BNE	.skipL0577
   4940  1c69				   .condpart103
   4941  1c69		       a5 93		      LDA	_sc1
   4942  1c6b		       8d f0 1f 	      STA	WriteToBuffer
   4943  1c6e		       a5 94		      LDA	_sc2
   4944  1c70		       8d f0 1f 	      STA	WriteToBuffer
   4945  1c73		       a5 95		      LDA	_sc3
   4946  1c75		       8d f0 1f 	      STA	WriteToBuffer
   4947  1c78		       a9 01		      LDA	#req_level_up
   4948  1c7a		       8d f1 1f 	      STA	WriteSendBuffer
   4949  1c7d		       a5 ec		      LDA	_Bit3_Safe_Point_reached
   4950  1c7f		       09 08		      ORA	#8
   4951  1c81		       85 ec		      STA	_Bit3_Safe_Point_reached
   4952  1c83				   .skipL0577
   4953  1c83				   .
   4954  1c83							; 
   4955  1c83
   4956  1c83				   .L0578		;  if joy0fire then goto _Level_Up else goto _skip_game_action
   4957  1c83
   4958  1c83		       24 0c		      bit	INPT4
   4959  1c85		       30 06		      BMI	.skipL0578
   4960  1c87				   .condpart104
   4961  1c87		       4c 58 9d 	      jmp	._Level_Up
   4962  1c8a		       4c 90 9c 	      jmp	.skipelse6
   4963  1c8d				   .skipL0578
   4964  1c8d		       4c 4c 9a 	      jmp	._skip_game_action
   4965  1c90
   4966  1c90				   .skipelse6
   4967  1c90				   ._bonus_sound_delay
   4968  1c90							; _bonus_sound_delay
   4969  1c90
   4970  1c90				   .L0579		;  _Ch0_Sound	=  3  :  _Ch0_Duration	=  1  :  _Ch0_Counter  =  0
   4971  1c90
   4972  1c90		       a9 03		      LDA	#3
   4973  1c92		       85 d9		      STA	_Ch0_Sound
   4974  1c94		       a9 01		      LDA	#1
   4975  1c96		       85 da		      STA	_Ch0_Duration
   4976  1c98		       a9 00		      LDA	#0
   4977  1c9a		       85 db		      STA	_Ch0_Counter
   4978  1c9c				   .L0580		;  delay_counter  =  25
   4979  1c9c
   4980  1c9c		       a9 19		      LDA	#25
   4981  1c9e		       85 d4		      STA	delay_counter
   4982  1ca0				   .L0581		;  goto _skip_game_action
   4983  1ca0
   4984  1ca0		       4c 4c 9a 	      jmp	._skip_game_action
   4985  1ca3
   4986  1ca3				   .
   4987  1ca3							; 
   4988  1ca3
   4989  1ca3				   ._Set_Player_1_Colors
   4990  1ca3							; _Set_Player_1_Colors
   4991  1ca3
   4992  1ca3				   .L0582		;  player1color:
   4993  1ca3
   4994  1ca3		       a2 e3		      LDX	#<playercolorL0582_1
   4995  1ca5		       86 87		      STX	player1color
   4996  1ca7		       a9 fc		      LDA	#>playercolorL0582_1
   4997  1ca9		       85 88		      STA	player1color+1
   4998  1cab				   .L0583		;  return
   4999  1cab
   5000  1cab		       ba		      tsx
   5001  1cac		       b5 02		      lda	2,x	; check return address
   5002  1cae		       49 9c		      eor	#(>*)	; vs. current PCH
   5003  1cb0		       29 e0		      and	#$E0	;  mask off all but top 3 bits
   5004  1cb2		       f0 03		      beq	*+5	; if equal, do normal return
   5005  1cb4		       4c da ff 	      JMP	BS_return
   5006  1cb7		       60		      RTS
   5007  1cb8				   .
   5008  1cb8							; 
   5009  1cb8
   5010  1cb8				   ._Set_Explosion
   5011  1cb8							; _Set_Explosion
   5012  1cb8
   5013  1cb8				   .L0584		;  if _BitOp_Ball_Shot_Dir then _BitOp_Ball_Shot_Dir  =  0  :	bally  =  0
   5014  1cb8
   5015  1cb8		       a5 d6		      LDA	_BitOp_Ball_Shot_Dir
   5016  1cba		       f0 06		      BEQ	.skipL0584
   5017  1cbc				   .condpart105
   5018  1cbc		       a9 00		      LDA	#0
   5019  1cbe		       85 d6		      STA	_BitOp_Ball_Shot_Dir
   5020  1cc0		       85 89		      STA	bally
   5021  1cc2				   .skipL0584
   5022  1cc2				   .L0585		;  _Ch0_Sound	=  5  :  _Ch0_Duration	=  1  :  _Ch0_Counter  =  0  :	frame_counter  =  63
   5023  1cc2
   5024  1cc2		       a9 05		      LDA	#5
   5025  1cc4		       85 d9		      STA	_Ch0_Sound
   5026  1cc6		       a9 01		      LDA	#1
   5027  1cc8		       85 da		      STA	_Ch0_Duration
   5028  1cca		       a9 00		      LDA	#0
   5029  1ccc		       85 db		      STA	_Ch0_Counter
   5030  1cce		       a9 3f		      LDA	#63
   5031  1cd0		       85 d5		      STA	frame_counter
   5032  1cd2				   .L0586		;  AUDF0  =  $1f  :  AUDC0  =	8
   5033  1cd2
   5034  1cd2		       a9 1f		      LDA	#$1f
   5035  1cd4		       85 17		      STA	AUDF0
   5036  1cd6		       a9 08		      LDA	#8
   5037  1cd8		       85 15		      STA	AUDC0
   5038  1cda				   .L0587		;  player1color:
   5039  1cda
   5040  1cda		       a2 eb		      LDX	#<playercolorL0587_1
   5041  1cdc		       86 87		      STX	player1color
   5042  1cde		       a9 fc		      LDA	#>playercolorL0587_1
   5043  1ce0		       85 88		      STA	player1color+1
   5044  1ce2				   .
   5045  1ce2							; 
   5046  1ce2
   5047  1ce2				   .L0588		;  Game_Status  =  game_state_heli_explosion
   5048  1ce2
   5049  1ce2		       a9 03		      LDA	#game_state_heli_explosion
   5050  1ce4		       85 d3		      STA	Game_Status
   5051  1ce6				   .L0589		;  goto _skip_game_action
   5052  1ce6
   5053  1ce6		       4c 4c 9a 	      jmp	._skip_game_action
   5054  1ce9
   5055  1ce9				   .
   5056  1ce9							; 
   5057  1ce9
   5058  1ce9				   ._Decrease_live_counter
   5059  1ce9							; _Decrease_live_counter
   5060  1ce9
   5061  1ce9				   .L0590		;  pfscore1  =  pfscore1  /  4
   5062  1ce9
   5063  1ce9		       a5 f2		      LDA	pfscore1
   5064  1ceb		       4a		      lsr
   5065  1cec		       4a		      lsr
   5066  1ced		       85 f2		      STA	pfscore1
   5067  1cef				   .L0591		;  player1y  =  200
   5068  1cef
   5069  1cef		       a9 c8		      LDA	#200
   5070  1cf1		       85 86		      STA	player1y
   5071  1cf3				   .L0592		;  if !pfscore1 then goto _Set_Game_Over else goto _Reset_Level
   5072  1cf3
   5073  1cf3		       a5 f2		      LDA	pfscore1
   5074  1cf5		       d0 06		      BNE	.skipL0592
   5075  1cf7				   .condpart106
   5076  1cf7		       4c 00 9d 	      jmp	._Set_Game_Over
   5077  1cfa		       4c 00 9d 	      jmp	.skipelse7
   5078  1cfd				   .skipL0592
   5079  1cfd		       4c 1b 9d 	      jmp	._Reset_Level
   5080  1d00
   5081  1d00				   .skipelse7
   5082  1d00				   .
   5083  1d00							; 
   5084  1d00
   5085  1d00				   ._Set_Game_Over
   5086  1d00							; _Set_Game_Over
   5087  1d00
   5088  1d00				   .L0593		;  WriteToBuffer  =  _sc1
   5089  1d00
   5090  1d00		       a5 93		      LDA	_sc1
   5091  1d02		       8d f0 1f 	      STA	WriteToBuffer
   5092  1d05				   .L0594		;  WriteToBuffer  =  _sc2
   5093  1d05
   5094  1d05		       a5 94		      LDA	_sc2
   5095  1d07		       8d f0 1f 	      STA	WriteToBuffer
   5096  1d0a				   .L0595		;  WriteToBuffer  =  _sc3
   5097  1d0a
   5098  1d0a		       a5 95		      LDA	_sc3
   5099  1d0c		       8d f0 1f 	      STA	WriteToBuffer
   5100  1d0f				   .L0596		;  WriteSendBuffer  =	req_game_over
   5101  1d0f
   5102  1d0f		       a9 02		      LDA	#req_game_over
   5103  1d11		       8d f1 1f 	      STA	WriteSendBuffer
   5104  1d14				   .L0597		;  Game_Status  =  game_state_game_over
   5105  1d14
   5106  1d14		       a9 01		      LDA	#game_state_game_over
   5107  1d16		       85 d3		      STA	Game_Status
   5108  1d18				   .L0598		;  goto _skip_game_action
   5109  1d18
   5110  1d18		       4c 4c 9a 	      jmp	._skip_game_action
   5111  1d1b
   5112  1d1b				   .
   5113  1d1b							; 
   5114  1d1b
   5115  1d1b				   ._Reset_Level
   5116  1d1b							; _Reset_Level
   5117  1d1b
   5118  1d1b				   .L0599		;  gosub _Add_Room_State
   5119  1d1b
   5120  1d1b		       20 dd 9d 	      jsr	._Add_Room_State
   5121  1d1e
   5122  1d1e				   .L0600		;  WriteSendBuffer  =	req_level_reset
   5123  1d1e
   5124  1d1e		       a9 07		      LDA	#req_level_reset
   5125  1d20		       8d f1 1f 	      STA	WriteSendBuffer
   5126  1d23				   .L0601		;  _Bit0_New_Room_P1_Flip{0}  =  _Bit1_Safe_Point_P1_Flip{1}
   5127  1d23
   5128  1d23		       a5 df		      LDA	_Bit1_Safe_Point_P1_Flip
   5129  1d25		       29 02		      AND	#2
   5130  1d27		       08		      PHP
   5131  1d28		       a5 df		      LDA	_Bit0_New_Room_P1_Flip
   5132  1d2a		       29 fe		      AND	#254
   5133  1d2c		       28		      PLP
   5134  1d2d		       f0 02		      .byte.b	$F0, $02
   5135  1d2f		       09 01		      ORA	#1
   5136  1d31		       85 df		      STA	_Bit0_New_Room_P1_Flip
   5137  1d33				   .L0602		;  delay_counter  =  60
   5138  1d33
   5139  1d33		       a9 3c		      LDA	#60
   5140  1d35		       85 d4		      STA	delay_counter
   5141  1d37				   .
   5142  1d37							; 
   5143  1d37
   5144  1d37				   ._Common_Reset
   5145  1d37							; _Common_Reset
   5146  1d37
   5147  1d37				   .L0603		;  _Bit5_Request_Pending{5}  =  1
   5148  1d37
   5149  1d37		       a5 ec		      LDA	_Bit5_Request_Pending
   5150  1d39		       09 20		      ORA	#32
   5151  1d3b		       85 ec		      STA	_Bit5_Request_Pending
   5152  1d3d				   .L0604		;  pfscore2  =  255
   5153  1d3d
   5154  1d3d		       a9 ff		      LDA	#255
   5155  1d3f		       85 f3		      STA	pfscore2
   5156  1d41				   .L0605		;  P1y_velocity  =  0.0  :  x	=  0
   5157  1d41
   5158  1d41		       a2 00		      LDX	#0
   5159  1d43		       86 ea		      STX	w
   5160  1d45		       a9 00		      LDA	#0
   5161  1d47		       85 e9		      STA	P1y_velocity
   5162  1d49		       a9 00		      LDA	#0
   5163  1d4b		       85 eb		      STA	x
   5164  1d4d				   .L0606		;  new_room_player1x  =  Safe_Point_P1_x
   5165  1d4d
   5166  1d4d		       a5 e0		      LDA	Safe_Point_P1_x
   5167  1d4f		       85 a5		      STA	new_room_player1x
   5168  1d51				   .L0607		;  new_room_player1y  =  Safe_Point_P1_y
   5169  1d51
   5170  1d51		       a5 e1		      LDA	Safe_Point_P1_y
   5171  1d53		       85 a4		      STA	new_room_player1y
   5172  1d55				   .L0608		;  goto _skip_game_action
   5173  1d55
   5174  1d55		       4c 4c 9a 	      jmp	._skip_game_action
   5175  1d58
   5176  1d58				   .
   5177  1d58							; 
   5178  1d58
   5179  1d58				   ._Level_Up
   5180  1d58							; _Level_Up
   5181  1d58
   5182  1d58				   .L0609		;  Game_Status  =  game_state_run
   5183  1d58
   5184  1d58		       a9 00		      LDA	#game_state_run
   5185  1d5a		       85 d3		      STA	Game_Status
   5186  1d5c				   .L0610		;  _Bit7_FireB_Restrainer{7}  =  1  :	_Bit5_Request_Pending{5}  =  1
   5187  1d5c
   5188  1d5c		       a5 ec		      LDA	_Bit7_FireB_Restrainer
   5189  1d5e		       09 80		      ORA	#128
   5190  1d60		       85 ec		      STA	_Bit7_FireB_Restrainer
   5191  1d62		       a5 ec		      LDA	_Bit5_Request_Pending
   5192  1d64		       09 20		      ORA	#32
   5193  1d66		       85 ec		      STA	_Bit5_Request_Pending
   5194  1d68				   .L0611		;  score  =  0  :  _BitOp_Flip_positions  =  0
   5195  1d68
   5196  1d68		       a9 00		      LDA	#$00
   5197  1d6a		       85 95		      STA	score+2
   5198  1d6c		       a9 00		      LDA	#$00
   5199  1d6e		       85 94		      STA	score+1
   5200  1d70		       a9 00		      LDA	#$00
   5201  1d72		       85 93		      STA	score
   5202  1d74		       a9 00		      LDA	#0
   5203  1d76		       85 df		      STA	_BitOp_Flip_positions
   5204  1d78				   .L0612		;  Safe_Point_P1_x  =	30
   5205  1d78
   5206  1d78		       a9 1e		      LDA	#30
   5207  1d7a		       85 e0		      STA	Safe_Point_P1_x
   5208  1d7c				   .L0613		;  Safe_Point_P1_y  =	player_min_y
   5209  1d7c
   5210  1d7c		       a9 02		      LDA	#player_min_y
   5211  1d7e		       85 e1		      STA	Safe_Point_P1_y
   5212  1d80				   .L0614		;  pfscore1  =  %00101010
   5213  1d80
   5214  1d80		       a9 2a		      LDA	#%00101010
   5215  1d82		       85 f2		      STA	pfscore1
   5216  1d84				   .L0615		;  goto _Common_Reset
   5217  1d84
   5218  1d84		       4c 37 9d 	      jmp	._Common_Reset
   5219  1d87
   5220  1d87				   .
   5221  1d87							; 
   5222  1d87
   5223  1d87				   ._Level_Completed
   5224  1d87							; _Level_Completed
   5225  1d87
   5226  1d87				   .L0616		;  Game_Status  =  game_state_level_finished
   5227  1d87
   5228  1d87		       a9 02		      LDA	#game_state_level_finished
   5229  1d89		       85 d3		      STA	Game_Status
   5230  1d8b				   .L0617		;  temp4  =  frame_counter  /	2
   5231  1d8b
   5232  1d8b		       a5 d5		      LDA	frame_counter
   5233  1d8d		       4a		      lsr
   5234  1d8e		       85 9f		      STA	temp4
   5235  1d90				   .L0618		;  temp5  =  temp4  &	$0F  :	if temp5  >  9 then temp4  =  temp4  +	6
   5236  1d90
   5237  1d90		       a5 9f		      LDA	temp4
   5238  1d92		       29 0f		      AND	#$0F
   5239  1d94		       85 a0		      STA	temp5
   5240  1d96		       a9 09		      LDA	#9
   5241  1d98		       c5 a0		      CMP	temp5
   5242  1d9a		       b0 07		      BCS	.skipL0618
   5243  1d9c				   .condpart107
   5244  1d9c		       a5 9f		      LDA	temp4
   5245  1d9e		       18		      CLC
   5246  1d9f		       69 06		      ADC	#6
   5247  1da1		       85 9f		      STA	temp4
   5248  1da3				   .skipL0618
   5249  1da3				   .L0619		;  temp5  =  temp4  &	$F0  :	if temp5  >  $90 then temp4  =	temp4  +  $60
   5250  1da3
   5251  1da3		       a5 9f		      LDA	temp4
   5252  1da5		       29 f0		      AND	#$F0
   5253  1da7		       85 a0		      STA	temp5
   5254  1da9		       a9 90		      LDA	#$90
   5255  1dab		       c5 a0		      CMP	temp5
   5256  1dad		       b0 07		      BCS	.skipL0619
   5257  1daf				   .condpart108
   5258  1daf		       a5 9f		      LDA	temp4
   5259  1db1		       18		      CLC
   5260  1db2		       69 60		      ADC	#$60
   5261  1db4		       85 9f		      STA	temp4
   5262  1db6				   .skipL0619
   5263  1db6				   .L0620		;  score  =  score  +	temp4
   5264  1db6
   5265  1db6		       f8		      SED
   5266  1db7		       18		      CLC
   5267  1db8		       a5 95		      LDA	score+2
   5268  1dba		       65 9f		      ADC	temp4
   5269  1dbc
   5270  1dbc		       85 95		      STA	score+2
   5271  1dbe		       a5 94		      LDA	score+1
   5272  1dc0		       69 00		      ADC	#$00
   5273  1dc2		       85 94		      STA	score+1
   5274  1dc4		       a5 93		      LDA	score
   5275  1dc6		       69 00		      ADC	#$00
   5276  1dc8		       85 93		      STA	score
   5277  1dca		       d8		      CLD
   5278  1dcb				   .L0621		;  asm
   5279  1dcb
   5280  1dcb		       f8		      sed
   5281  1dcc
   5282  1dcc		       18		      clc
   5283  1dcd
   5284  1dcd		       a5 94		      lda	_sc2
   5285  1dcf
   5286  1dcf		       65 b1		      adc	bonus_bcd_counter
   5287  1dd1
   5288  1dd1		       85 94		      sta	_sc2
   5289  1dd3
   5290  1dd3		       a5 93		      lda	_sc1
   5291  1dd5
   5292  1dd5		       69 00		      adc	#0
   5293  1dd7
   5294  1dd7		       85 93		      sta	_sc1
   5295  1dd9
   5296  1dd9		       d8		      cld
   5297  1dda
   5298  1dda				   .L0622		;  goto _skip_game_action
   5299  1dda
   5300  1dda		       4c 4c 9a 	      jmp	._skip_game_action
   5301  1ddd
   5302  1ddd				   .
   5303  1ddd							; 
   5304  1ddd
   5305  1ddd				   .
   5306  1ddd							; 
   5307  1ddd
   5308  1ddd				   .
   5309  1ddd							; 
   5310  1ddd
   5311  1ddd				   ._Add_Room_State
   5312  1ddd							; _Add_Room_State
   5313  1ddd
   5314  1ddd				   .L0623		;  _Bit5_Request_Pending{5}  =  1
   5315  1ddd
   5316  1ddd		       a5 ec		      LDA	_Bit5_Request_Pending
   5317  1ddf		       09 20		      ORA	#32
   5318  1de1		       85 ec		      STA	_Bit5_Request_Pending
   5319  1de3				   .L0624		;  WriteToBuffer  =  r102
   5320  1de3
   5321  1de3		       ad e6 f0 	      LDA	r102
   5322  1de6		       8d f0 1f 	      STA	WriteToBuffer
   5323  1de9				   .L0625		;  WriteToBuffer  =  r103
   5324  1de9
   5325  1de9		       ad e7 f0 	      LDA	r103
   5326  1dec		       8d f0 1f 	      STA	WriteToBuffer
   5327  1def				   .L0626		;  WriteToBuffer  =  r104
   5328  1def
   5329  1def		       ad e8 f0 	      LDA	r104
   5330  1df2		       8d f0 1f 	      STA	WriteToBuffer
   5331  1df5				   .L0627		;  WriteToBuffer  =  r105
   5332  1df5
   5333  1df5		       ad e9 f0 	      LDA	r105
   5334  1df8		       8d f0 1f 	      STA	WriteToBuffer
   5335  1dfb				   .L0628		;  WriteToBuffer  =  r106
   5336  1dfb
   5337  1dfb		       ad ea f0 	      LDA	r106
   5338  1dfe		       8d f0 1f 	      STA	WriteToBuffer
   5339  1e01				   .L0629		;  WriteToBuffer  =  r107
   5340  1e01
   5341  1e01		       ad eb f0 	      LDA	r107
   5342  1e04		       8d f0 1f 	      STA	WriteToBuffer
   5343  1e07				   .L0630		;  WriteToBuffer  =  r108
   5344  1e07
   5345  1e07		       ad ec f0 	      LDA	r108
   5346  1e0a		       8d f0 1f 	      STA	WriteToBuffer
   5347  1e0d				   .L0631		;  WriteToBuffer  =  r109
   5348  1e0d
   5349  1e0d		       ad ed f0 	      LDA	r109
   5350  1e10		       8d f0 1f 	      STA	WriteToBuffer
   5351  1e13				   .L0632		;  WriteToBuffer  =  r110
   5352  1e13
   5353  1e13		       ad ee f0 	      LDA	r110
   5354  1e16		       8d f0 1f 	      STA	WriteToBuffer
   5355  1e19				   .L0633		;  WriteToBuffer  =  r111
   5356  1e19
   5357  1e19		       ad ef f0 	      LDA	r111
   5358  1e1c		       8d f0 1f 	      STA	WriteToBuffer
   5359  1e1f				   .L0634		;  return
   5360  1e1f
   5361  1e1f		       ba		      tsx
   5362  1e20		       b5 02		      lda	2,x	; check return address
   5363  1e22		       49 9e		      eor	#(>*)	; vs. current PCH
   5364  1e24		       29 e0		      and	#$E0	;  mask off all but top 3 bits
   5365  1e26		       f0 03		      beq	*+5	; if equal, do normal return
   5366  1e28		       4c da ff 	      JMP	BS_return
   5367  1e2b		       60		      RTS
   5368  1e2c				   .
   5369  1e2c							; 
   5370  1e2c
   5371  1e2c				   .
   5372  1e2c							; 
   5373  1e2c
   5374  1e2c				   .
   5375  1e2c							; 
   5376  1e2c
   5377  1e2c				   .
   5378  1e2c							; 
   5379  1e2c
   5380  1e2c				   ._Change_Room
   5381  1e2c							; _Change_Room
   5382  1e2c
   5383  1e2c				   .L0635		;  delay_counter  =  2
   5384  1e2c
   5385  1e2c		       a9 02		      LDA	#2
   5386  1e2e		       85 d4		      STA	delay_counter
   5387  1e30				   .L0636		;  player0y  =  200  :  ball_shoot_x  =  200  :  ball_shoot_y	=  200	:  missile0x  =  200  :  missile0y  =  200  :  enemy_game_state  =  0
   5388  1e30
   5389  1e30		       a9 c8		      LDA	#200
   5390  1e32		       85 85		      STA	player0y
   5391  1e34		       85 ae		      STA	ball_shoot_x
   5392  1e36		       85 af		      STA	ball_shoot_y
   5393  1e38		       85 82		      STA	missile0x
   5394  1e3a		       85 91		      STA	missile0y
   5395  1e3c		       a9 00		      LDA	#0
   5396  1e3e		       85 b2		      STA	enemy_game_state
   5397  1e40				   .
   5398  1e40							; 
   5399  1e40
   5400  1e40				   .
   5401  1e40							; 
   5402  1e40
   5403  1e40				   .L0637		;  _Bit_Game_State  =	_Bit_Game_State  &  %11000011
   5404  1e40
   5405  1e40		       a5 ec		      LDA	_Bit_Game_State
   5406  1e42		       29 c3		      AND	#%11000011
   5407  1e44		       85 ec		      STA	_Bit_Game_State
   5408  1e46				   .L0638		;  player1y  =  new_room_player1y  :  player1x  =  new_room_player1x  :  _Bit6_Flip_P1{6}  =  _Bit0_New_Room_P1_Flip{0}
   5409  1e46
   5410  1e46		       a5 a4		      LDA	new_room_player1y
   5411  1e48		       85 86		      STA	player1y
   5412  1e4a		       a5 a5		      LDA	new_room_player1x
   5413  1e4c		       85 81		      STA	player1x
   5414  1e4e		       a5 df		      LDA	_Bit0_New_Room_P1_Flip
   5415  1e50		       29 01		      AND	#1
   5416  1e52		       08		      PHP
   5417  1e53		       a5 ec		      LDA	_Bit6_Flip_P1
   5418  1e55		       29 bf		      AND	#191
   5419  1e57		       28		      PLP
   5420  1e58		       f0 02		      .byte.b	$F0, $02
   5421  1e5a		       09 40		      ORA	#64
   5422  1e5c		       85 ec		      STA	_Bit6_Flip_P1
   5423  1e5e				   .L0639		;  asm
   5424  1e5e
   5425  1e5e		       a9 00		      LDA	#0
   5426  1e60
   5427  1e60		       85 89		      STA	bally
   5428  1e62
   5429  1e62		       85 d7		      STA	_BitOp_M0_Dir	; delete enemy and player shot
   5430  1e64
   5431  1e64		       85 d6		      STA	_BitOp_Ball_Shot_Dir
   5432  1e66
   5433  1e66		       85 dc		      STA	extra_wall_move_x
   5434  1e68
   5435  1e68		       85 dd		      STA	roommate_move_x
   5436  1e6a
   5437  1e6a		       aa		      TAX
   5438  1e6b
   5439  1e6b				   .copy_loop
   5440  1e6b
   5441  1e6b		       ad f2 1f 	      LDA	ReceiveBuffer	; 4
   5442  1e6e
   5443  1e6e		       9d 5d f0 	      STA	w_room_definition_start,x	; 5   @9
   5444  1e71
   5445  1e71		       e8		      INX		; 2   @11
   5446  1e72
   5447  1e72		       ad f3 1f 	      LDA	ReceiveBufferSize	; 4   @15
   5448  1e75
   5449  1e75		       d0 f4		      BNE	.copy_loop	; 2/3 @18
   5450  1e77
   5451  1e77				   .L0640		;  roommate_type  =  r_roommate_type_and_range  &  3
   5452  1e77
   5453  1e77		       ad e6 f0 	      LDA	r_roommate_type_and_range
   5454  1e7a		       29 03		      AND	#3
   5455  1e7c		       85 de		      STA	roommate_type
   5456  1e7e				   .L0641		;  if !men_to_rescue then men_to_rescue  =  r_men_to_rescue_in_this_level  :  bonus_bcd_counter  =  r_level_bonus_bcd_points
   5457  1e7e
   5458  1e7e		       a5 b0		      LDA	men_to_rescue
   5459  1e80		       d0 0a		      BNE	.skipL0641
   5460  1e82				   .condpart109
   5461  1e82		       ad de f0 	      LDA	r_men_to_rescue_in_this_level
   5462  1e85		       85 b0		      STA	men_to_rescue
   5463  1e87		       ad dd f0 	      LDA	r_level_bonus_bcd_points
   5464  1e8a		       85 b1		      STA	bonus_bcd_counter
   5465  1e8c				   .skipL0641
   5466  1e8c				   .L0642		;  goto _skip_game_action
   5467  1e8c
   5468  1e8c		       4c 4c 9a 	      jmp	._skip_game_action
   5469  1e8f
   5470  1e8f				   .
   5471  1e8f							; 
   5472  1e8f
   5473  1e8f				   .
   5474  1e8f							; 
   5475  1e8f
   5476  1e8f				   ._Reset_To_Start
   5477  1e8f							; _Reset_To_Start
   5478  1e8f
   5479  1e8f				   .
   5480  1e8f							; 
   5481  1e8f
   5482  1e8f				   .L0643		;  if ReceiveBufferSize  =  0 then goto _Start
   5483  1e8f
   5484  1e8f		       ad f3 1f 	      LDA	ReceiveBufferSize
   5485  1e92		       c9 00		      CMP	#0
   5486  1e94		       d0 03		      BNE	.skipL0643
   5487  1e96				   .condpart110
   5488  1e96		       4c 00 91 	      jmp	._Start
   5489  1e99
   5490  1e99				   .skipL0643
   5491  1e99				   .L0644		;  asm
   5492  1e99
   5493  1e99		       ad f2 1f 	      LDA	ReceiveBuffer	; 4
   5494  1e9c
   5495  1e9c				   .L0645		;  goto _Reset_To_Start
   5496  1e9c
   5497  1e9c		       4c 8f 9e 	      jmp	._Reset_To_Start
   5498  1e9f
   5499  1e9f				   .
   5500  1e9f							; 
   5501  1e9f
   5502  1e9f				   .
   5503  1e9f							; 
   5504  1e9f
   5505  1e9f				   .
   5506  1e9f							; 
   5507  1e9f
   5508  1e9f				   .
   5509  1e9f							; 
   5510  1e9f
   5511  1e9f				   .
   5512  1e9f							; 
   5513  1e9f
   5514  1e9f				   .
   5515  1e9f							; 
   5516  1e9f
   5517  1e9f				   .L0646		;  data _SD_Shot_Wall
   5518  1e9f
   5519  1e9f		       4c d7 9e 	      JMP	.skipL0646
   5520  1ea2				   _SD_Shot_Wall
   5521  1ea2		       08 08 00 	      .byte.b	8,8,0
   5522  1ea5
   5523  1ea5		       01		      .byte.b	1
   5524  1ea6
   5525  1ea6		       08 08 01 	      .byte.b	8,8,1
   5526  1ea9
   5527  1ea9		       01		      .byte.b	1
   5528  1eaa
   5529  1eaa		       08 0e 01 	      .byte.b	8,14,1
   5530  1ead
   5531  1ead		       01		      .byte.b	1
   5532  1eae
   5533  1eae		       08 08 00 	      .byte.b	8,8,0
   5534  1eb1
   5535  1eb1		       01		      .byte.b	1
   5536  1eb2
   5537  1eb2		       08 08 02 	      .byte.b	8,8,2
   5538  1eb5
   5539  1eb5		       01		      .byte.b	1
   5540  1eb6
   5541  1eb6		       08 0e 02 	      .byte.b	8,14,2
   5542  1eb9
   5543  1eb9		       01		      .byte.b	1
   5544  1eba
   5545  1eba		       08 08 01 	      .byte.b	8,8,1
   5546  1ebd
   5547  1ebd		       01		      .byte.b	1
   5548  1ebe
   5549  1ebe		       07 08 03 	      .byte.b	7,8,3
   5550  1ec1
   5551  1ec1		       01		      .byte.b	1
   5552  1ec2
   5553  1ec2		       06 08 02 	      .byte.b	6,8,2
   5554  1ec5
   5555  1ec5		       01		      .byte.b	1
   5556  1ec6
   5557  1ec6		       05 08 04 	      .byte.b	5,8,4
   5558  1ec9
   5559  1ec9		       01		      .byte.b	1
   5560  1eca
   5561  1eca		       04 08 03 	      .byte.b	4,8,3
   5562  1ecd
   5563  1ecd		       01		      .byte.b	1
   5564  1ece
   5565  1ece		       03 08 05 	      .byte.b	3,8,5
   5566  1ed1
   5567  1ed1		       01		      .byte.b	1
   5568  1ed2
   5569  1ed2		       02 0e 04 	      .byte.b	2,14,4
   5570  1ed5
   5571  1ed5		       04		      .byte.b	4
   5572  1ed6
   5573  1ed6		       ff		      .byte.b	255
   5574  1ed7
   5575  1ed7				   .skipL0646
   5576  1ed7				   .
   5577  1ed7							; 
   5578  1ed7
   5579  1ed7				   .
   5580  1ed7							; 
   5581  1ed7
   5582  1ed7				   .L0647		;  data _SD_Shoot_Miss
   5583  1ed7
   5584  1ed7		       4c 1f 9f 	      JMP	.skipL0647
   5585  1eda				   _SD_Shoot_Miss
   5586  1eda		       08 0f 00 	      .byte.b	8,15,0
   5587  1edd
   5588  1edd		       01		      .byte.b	1
   5589  1ede
   5590  1ede		       0c 0f 01 	      .byte.b	12,15,1
   5591  1ee1
   5592  1ee1		       01		      .byte.b	1
   5593  1ee2
   5594  1ee2		       08 07 14 	      .byte.b	8,7,20
   5595  1ee5
   5596  1ee5		       01		      .byte.b	1
   5597  1ee6
   5598  1ee6		       0a 0f 03 	      .byte.b	10,15,3
   5599  1ee9
   5600  1ee9		       01		      .byte.b	1
   5601  1eea
   5602  1eea		       08 07 16 	      .byte.b	8,7,22
   5603  1eed
   5604  1eed		       01		      .byte.b	1
   5605  1eee
   5606  1eee		       0a 0f 05 	      .byte.b	10,15,5
   5607  1ef1
   5608  1ef1		       01		      .byte.b	1
   5609  1ef2
   5610  1ef2		       08 0f 06 	      .byte.b	8,15,6
   5611  1ef5
   5612  1ef5		       01		      .byte.b	1
   5613  1ef6
   5614  1ef6		       0a 07 18 	      .byte.b	10,7,24
   5615  1ef9
   5616  1ef9		       01		      .byte.b	1
   5617  1efa
   5618  1efa		       08 0f 08 	      .byte.b	8,15,8
   5619  1efd
   5620  1efd		       01		      .byte.b	1
   5621  1efe
   5622  1efe		       09 07 1b 	      .byte.b	9,7,27
   5623  1f01
   5624  1f01		       01		      .byte.b	1
   5625  1f02
   5626  1f02		       08 0f 0a 	      .byte.b	8,15,10
   5627  1f05
   5628  1f05		       01		      .byte.b	1
   5629  1f06
   5630  1f06		       07 0e 0b 	      .byte.b	7,14,11
   5631  1f09
   5632  1f09		       01		      .byte.b	1
   5633  1f0a
   5634  1f0a		       06 0f 0c 	      .byte.b	6,15,12
   5635  1f0d
   5636  1f0d		       01		      .byte.b	1
   5637  1f0e
   5638  1f0e		       05 06 0d 	      .byte.b	5,6,13
   5639  1f11
   5640  1f11		       01		      .byte.b	1
   5641  1f12
   5642  1f12		       04 0f 0e 	      .byte.b	4,15,14
   5643  1f15
   5644  1f15		       01		      .byte.b	1
   5645  1f16
   5646  1f16		       03 06 1b 	      .byte.b	3,6,27
   5647  1f19
   5648  1f19		       01		      .byte.b	1
   5649  1f1a
   5650  1f1a		       02 06 1e 	      .byte.b	2,6,30
   5651  1f1d
   5652  1f1d		       08		      .byte.b	8
   5653  1f1e
   5654  1f1e		       ff		      .byte.b	255
   5655  1f1f
   5656  1f1f				   .skipL0647
   5657  1f1f				   .
   5658  1f1f							; 
   5659  1f1f
   5660  1f1f				   .
   5661  1f1f							; 
   5662  1f1f
   5663  1f1f				   .L0648		;  data _SD_Shoot_Enemy
   5664  1f1f
   5665  1f1f		       4c 43 9f 	      JMP	.skipL0648
   5666  1f22				   _SD_Shoot_Enemy
   5667  1f22		       0c 04 17 	      .byte.b	12,4,23
   5668  1f25
   5669  1f25		       04		      .byte.b	4
   5670  1f26
   5671  1f26		       0a 04 1d 	      .byte.b	10,4,29
   5672  1f29
   5673  1f29		       04		      .byte.b	4
   5674  1f2a
   5675  1f2a		       08 04 17 	      .byte.b	8,4,23
   5676  1f2d
   5677  1f2d		       04		      .byte.b	4
   5678  1f2e
   5679  1f2e		       06 04 1d 	      .byte.b	6,4,29
   5680  1f31
   5681  1f31		       04		      .byte.b	4
   5682  1f32
   5683  1f32		       04 04 17 	      .byte.b	4,4,23
   5684  1f35
   5685  1f35		       04		      .byte.b	4
   5686  1f36
   5687  1f36		       03 04 1d 	      .byte.b	3,4,29
   5688  1f39
   5689  1f39		       04		      .byte.b	4
   5690  1f3a
   5691  1f3a		       02 04 17 	      .byte.b	2,4,23
   5692  1f3d
   5693  1f3d		       01		      .byte.b	1
   5694  1f3e
   5695  1f3e		       01 04 1d 	      .byte.b	1,4,29
   5696  1f41
   5697  1f41		       01		      .byte.b	1
   5698  1f42
   5699  1f42		       ff		      .byte.b	255
   5700  1f43
   5701  1f43				   .skipL0648
   5702  1f43				   .
   5703  1f43							; 
   5704  1f43
   5705  1f43				   .
   5706  1f43							; 
   5707  1f43
   5708  1f43				   .L0649		;  data _SD_Touch_Enemy
   5709  1f43
   5710  1f43		       4c 63 9f 	      JMP	.skipL0649
   5711  1f46				   _SD_Touch_Enemy
   5712  1f46		       02 07 0b 	      .byte.b	2,7,11
   5713  1f49
   5714  1f49		       02		      .byte.b	2
   5715  1f4a
   5716  1f4a		       0a 07 0c 	      .byte.b	10,7,12
   5717  1f4d
   5718  1f4d		       02		      .byte.b	2
   5719  1f4e
   5720  1f4e		       08 07 0d 	      .byte.b	8,7,13
   5721  1f51
   5722  1f51		       02		      .byte.b	2
   5723  1f52
   5724  1f52		       08 07 0e 	      .byte.b	8,7,14
   5725  1f55
   5726  1f55		       02		      .byte.b	2
   5727  1f56
   5728  1f56		       08 07 15 	      .byte.b	8,7,21
   5729  1f59
   5730  1f59		       08		      .byte.b	8
   5731  1f5a
   5732  1f5a		       04 07 16 	      .byte.b	4,7,22
   5733  1f5d
   5734  1f5d		       02		      .byte.b	2
   5735  1f5e
   5736  1f5e		       02 07 17 	      .byte.b	2,7,23
   5737  1f61
   5738  1f61		       01		      .byte.b	1
   5739  1f62
   5740  1f62		       ff		      .byte.b	255
   5741  1f63
   5742  1f63				   .skipL0649
   5743  1f63				   .
   5744  1f63							; 
   5745  1f63
   5746  1f63				   .
   5747  1f63							; 
   5748  1f63
   5749  1f63				   .L0650		;  data _SD_Helicopter_Explosion
   5750  1f63
   5751  1f63		       4c 77 9f 	      JMP	.skipL0650
   5752  1f66				   _SD_Helicopter_Explosion
   5753  1f66		       0f 0c 0a 08*	      .byte.b	15, 12, 10, 8, 10, 8, 8, 6, 4, 4, 8, 8, 6, 4, 2, 3, 255
   5754  1f77
   5755  1f77				   .skipL0650
   5756  1f77				   .
   5757  1f77							; 
   5758  1f77
   5759  1f77				   .
   5760  1f77							; 
   5761  1f77
   5762  1f77				   .
   5763  1f77							; 
   5764  1f77
   5765  1f77				   .
   5766  1f77							; 
   5767  1f77
   5768  1f77				   .
   5769  1f77							; 
   5770  1f77
   5771  1f77				   .
   5772  1f77							; 
   5773  1f77
   5774  1f77				   .
   5775  1f77							; 
   5776  1f77
   5777  1f77				   .L0651		;  bank 2
   5778  1f77
   5779  1f77					      if	ECHO1
      90 bytes of ROM space left in bank 1
   5780  1f77					      echo	"    ",[(start_bank1 - *)]d , "bytes of ROM space left in bank 1")
   5781  1f77					      endif
   5782  1f77		       00 01	   ECHO1      =	1
   5783  1fd1					      ORG	$1FF4-bscode_length
   5784  1fd1					      RORG	$9FF4-bscode_length
   5785  1fd1		       a2 ff	   start_bank1 ldx	#$ff
   5786  1fd3				  -	      ifconst	FASTFETCH	; using DPC+
   5787  1fd3				  -	      stx	FASTFETCH
   5788  1fd3					      endif
   5789  1fd3		       9a		      txs
   5790  1fd4				  -	      if	bankswitch == 64
   5791  1fd4				  -	      lda	#(((>(start-1)) & $0F) | $F0)
   5792  1fd4					      else
   5793  1fd4		       a9 f2		      lda	#>(start-1)
   5794  1fd6					      endif
   5795  1fd6		       48		      pha
   5796  1fd7		       a9 b0		      lda	#<(start-1)
   5797  1fd9		       48		      pha
   5798  1fda		       48		      pha
   5799  1fdb		       8a		      txa
   5800  1fdc		       48		      pha
   5801  1fdd		       ba		      tsx
   5802  1fde					      if	bankswitch != 64
   5803  1fde		       b5 04		      lda	4,x	; get high byte of return address
   5804  1fe0		       2a		      rol
   5805  1fe1		       2a		      rol
   5806  1fe2		       2a		      rol
   5807  1fe3		       2a		      rol
   5808  1fe4		       29 03		      and	#bs_mask	;1 3 or 7 for F8/F6/F4
   5809  1fe6		       aa		      tax
   5810  1fe7		       e8		      inx
   5811  1fe8				  -	      else
   5812  1fe8				  -	      lda	4,x	; get high byte of return address
   5813  1fe8				  -	      tay
   5814  1fe8				  -	      ora	#$10	; change our bank nibble into a valid rom mirror
   5815  1fe8				  -	      sta	4,x
   5816  1fe8				  -	      tya
   5817  1fe8				  -	      lsr
   5818  1fe8				  -	      lsr
   5819  1fe8				  -	      lsr
   5820  1fe8				  -	      lsr
   5821  1fe8				  -	      tax
   5822  1fe8				  -	      inx
   5823  1fe8					      endif
   5824  1fe8		       bd f5 1f 	      lda	bankswitch_hotspot-1,x
   5825  1feb		       68		      pla
   5826  1fec		       aa		      tax
   5827  1fed		       68		      pla
   5828  1fee		       60		      rts
   5829  1fef				  -	      if	((* & $1FFF) > ((bankswitch_hotspot & $1FFF) - 1))
   5830  1fef				  -	      echo	"WARNING: size parameter in banksw.asm too small - the program probably will not work."
   5831  1fef				  -	      echo	"Change to",[(*-begin_bscode+1)&$FF]d,"and try again."
   5832  1fef					      endif
   5833  1ffc					      ORG	$1FFC
   5834  1ffc					      RORG	$9FFC
   5835  1ffc		       d1 9f		      .word.w	(start_bank1 & $ffff)
   5836  1ffe		       d1 9f		      .word.w	(start_bank1 & $ffff)
   5837  2000					      ORG	$2000
   5838  2000					      RORG	$B000
   5839  2000					      repeat	256
   5840  2000		       ff		      .byte.b	$ff
   5839  2000					      repend
   5840  2001		       ff		      .byte.b	$ff
   5839  2001					      repend
   5840  2002		       ff		      .byte.b	$ff
   5839  2002					      repend
   5840  2003		       ff		      .byte.b	$ff
   5839  2003					      repend
   5840  2004		       ff		      .byte.b	$ff
   5839  2004					      repend
   5840  2005		       ff		      .byte.b	$ff
   5839  2005					      repend
   5840  2006		       ff		      .byte.b	$ff
   5839  2006					      repend
   5840  2007		       ff		      .byte.b	$ff
   5839  2007					      repend
   5840  2008		       ff		      .byte.b	$ff
   5839  2008					      repend
   5840  2009		       ff		      .byte.b	$ff
   5839  2009					      repend
   5840  200a		       ff		      .byte.b	$ff
   5839  200a					      repend
   5840  200b		       ff		      .byte.b	$ff
   5839  200b					      repend
   5840  200c		       ff		      .byte.b	$ff
   5839  200c					      repend
   5840  200d		       ff		      .byte.b	$ff
   5839  200d					      repend
   5840  200e		       ff		      .byte.b	$ff
   5839  200e					      repend
   5840  200f		       ff		      .byte.b	$ff
   5839  200f					      repend
   5840  2010		       ff		      .byte.b	$ff
   5839  2010					      repend
   5840  2011		       ff		      .byte.b	$ff
   5839  2011					      repend
   5840  2012		       ff		      .byte.b	$ff
   5839  2012					      repend
   5840  2013		       ff		      .byte.b	$ff
   5839  2013					      repend
   5840  2014		       ff		      .byte.b	$ff
   5839  2014					      repend
   5840  2015		       ff		      .byte.b	$ff
   5839  2015					      repend
   5840  2016		       ff		      .byte.b	$ff
   5839  2016					      repend
   5840  2017		       ff		      .byte.b	$ff
   5839  2017					      repend
   5840  2018		       ff		      .byte.b	$ff
   5839  2018					      repend
   5840  2019		       ff		      .byte.b	$ff
   5839  2019					      repend
   5840  201a		       ff		      .byte.b	$ff
   5839  201a					      repend
   5840  201b		       ff		      .byte.b	$ff
   5839  201b					      repend
   5840  201c		       ff		      .byte.b	$ff
   5839  201c					      repend
   5840  201d		       ff		      .byte.b	$ff
   5839  201d					      repend
   5840  201e		       ff		      .byte.b	$ff
   5839  201e					      repend
   5840  201f		       ff		      .byte.b	$ff
   5839  201f					      repend
   5840  2020		       ff		      .byte.b	$ff
   5839  2020					      repend
   5840  2021		       ff		      .byte.b	$ff
   5839  2021					      repend
   5840  2022		       ff		      .byte.b	$ff
   5839  2022					      repend
   5840  2023		       ff		      .byte.b	$ff
   5839  2023					      repend
   5840  2024		       ff		      .byte.b	$ff
   5839  2024					      repend
   5840  2025		       ff		      .byte.b	$ff
   5839  2025					      repend
   5840  2026		       ff		      .byte.b	$ff
   5839  2026					      repend
   5840  2027		       ff		      .byte.b	$ff
   5839  2027					      repend
   5840  2028		       ff		      .byte.b	$ff
   5839  2028					      repend
   5840  2029		       ff		      .byte.b	$ff
   5839  2029					      repend
   5840  202a		       ff		      .byte.b	$ff
   5839  202a					      repend
   5840  202b		       ff		      .byte.b	$ff
   5839  202b					      repend
   5840  202c		       ff		      .byte.b	$ff
   5839  202c					      repend
   5840  202d		       ff		      .byte.b	$ff
   5839  202d					      repend
   5840  202e		       ff		      .byte.b	$ff
   5839  202e					      repend
   5840  202f		       ff		      .byte.b	$ff
   5839  202f					      repend
   5840  2030		       ff		      .byte.b	$ff
   5839  2030					      repend
   5840  2031		       ff		      .byte.b	$ff
   5839  2031					      repend
   5840  2032		       ff		      .byte.b	$ff
   5839  2032					      repend
   5840  2033		       ff		      .byte.b	$ff
   5839  2033					      repend
   5840  2034		       ff		      .byte.b	$ff
   5839  2034					      repend
   5840  2035		       ff		      .byte.b	$ff
   5839  2035					      repend
   5840  2036		       ff		      .byte.b	$ff
   5839  2036					      repend
   5840  2037		       ff		      .byte.b	$ff
   5839  2037					      repend
   5840  2038		       ff		      .byte.b	$ff
   5839  2038					      repend
   5840  2039		       ff		      .byte.b	$ff
   5839  2039					      repend
   5840  203a		       ff		      .byte.b	$ff
   5839  203a					      repend
   5840  203b		       ff		      .byte.b	$ff
   5839  203b					      repend
   5840  203c		       ff		      .byte.b	$ff
   5839  203c					      repend
   5840  203d		       ff		      .byte.b	$ff
   5839  203d					      repend
   5840  203e		       ff		      .byte.b	$ff
   5839  203e					      repend
   5840  203f		       ff		      .byte.b	$ff
   5839  203f					      repend
   5840  2040		       ff		      .byte.b	$ff
   5839  2040					      repend
   5840  2041		       ff		      .byte.b	$ff
   5839  2041					      repend
   5840  2042		       ff		      .byte.b	$ff
   5839  2042					      repend
   5840  2043		       ff		      .byte.b	$ff
   5839  2043					      repend
   5840  2044		       ff		      .byte.b	$ff
   5839  2044					      repend
   5840  2045		       ff		      .byte.b	$ff
   5839  2045					      repend
   5840  2046		       ff		      .byte.b	$ff
   5839  2046					      repend
   5840  2047		       ff		      .byte.b	$ff
   5839  2047					      repend
   5840  2048		       ff		      .byte.b	$ff
   5839  2048					      repend
   5840  2049		       ff		      .byte.b	$ff
   5839  2049					      repend
   5840  204a		       ff		      .byte.b	$ff
   5839  204a					      repend
   5840  204b		       ff		      .byte.b	$ff
   5839  204b					      repend
   5840  204c		       ff		      .byte.b	$ff
   5839  204c					      repend
   5840  204d		       ff		      .byte.b	$ff
   5839  204d					      repend
   5840  204e		       ff		      .byte.b	$ff
   5839  204e					      repend
   5840  204f		       ff		      .byte.b	$ff
   5839  204f					      repend
   5840  2050		       ff		      .byte.b	$ff
   5839  2050					      repend
   5840  2051		       ff		      .byte.b	$ff
   5839  2051					      repend
   5840  2052		       ff		      .byte.b	$ff
   5839  2052					      repend
   5840  2053		       ff		      .byte.b	$ff
   5839  2053					      repend
   5840  2054		       ff		      .byte.b	$ff
   5839  2054					      repend
   5840  2055		       ff		      .byte.b	$ff
   5839  2055					      repend
   5840  2056		       ff		      .byte.b	$ff
   5839  2056					      repend
   5840  2057		       ff		      .byte.b	$ff
   5839  2057					      repend
   5840  2058		       ff		      .byte.b	$ff
   5839  2058					      repend
   5840  2059		       ff		      .byte.b	$ff
   5839  2059					      repend
   5840  205a		       ff		      .byte.b	$ff
   5839  205a					      repend
   5840  205b		       ff		      .byte.b	$ff
   5839  205b					      repend
   5840  205c		       ff		      .byte.b	$ff
   5839  205c					      repend
   5840  205d		       ff		      .byte.b	$ff
   5839  205d					      repend
   5840  205e		       ff		      .byte.b	$ff
   5839  205e					      repend
   5840  205f		       ff		      .byte.b	$ff
   5839  205f					      repend
   5840  2060		       ff		      .byte.b	$ff
   5839  2060					      repend
   5840  2061		       ff		      .byte.b	$ff
   5839  2061					      repend
   5840  2062		       ff		      .byte.b	$ff
   5839  2062					      repend
   5840  2063		       ff		      .byte.b	$ff
   5839  2063					      repend
   5840  2064		       ff		      .byte.b	$ff
   5839  2064					      repend
   5840  2065		       ff		      .byte.b	$ff
   5839  2065					      repend
   5840  2066		       ff		      .byte.b	$ff
   5839  2066					      repend
   5840  2067		       ff		      .byte.b	$ff
   5839  2067					      repend
   5840  2068		       ff		      .byte.b	$ff
   5839  2068					      repend
   5840  2069		       ff		      .byte.b	$ff
   5839  2069					      repend
   5840  206a		       ff		      .byte.b	$ff
   5839  206a					      repend
   5840  206b		       ff		      .byte.b	$ff
   5839  206b					      repend
   5840  206c		       ff		      .byte.b	$ff
   5839  206c					      repend
   5840  206d		       ff		      .byte.b	$ff
   5839  206d					      repend
   5840  206e		       ff		      .byte.b	$ff
   5839  206e					      repend
   5840  206f		       ff		      .byte.b	$ff
   5839  206f					      repend
   5840  2070		       ff		      .byte.b	$ff
   5839  2070					      repend
   5840  2071		       ff		      .byte.b	$ff
   5839  2071					      repend
   5840  2072		       ff		      .byte.b	$ff
   5839  2072					      repend
   5840  2073		       ff		      .byte.b	$ff
   5839  2073					      repend
   5840  2074		       ff		      .byte.b	$ff
   5839  2074					      repend
   5840  2075		       ff		      .byte.b	$ff
   5839  2075					      repend
   5840  2076		       ff		      .byte.b	$ff
   5839  2076					      repend
   5840  2077		       ff		      .byte.b	$ff
   5839  2077					      repend
   5840  2078		       ff		      .byte.b	$ff
   5839  2078					      repend
   5840  2079		       ff		      .byte.b	$ff
   5839  2079					      repend
   5840  207a		       ff		      .byte.b	$ff
   5839  207a					      repend
   5840  207b		       ff		      .byte.b	$ff
   5839  207b					      repend
   5840  207c		       ff		      .byte.b	$ff
   5839  207c					      repend
   5840  207d		       ff		      .byte.b	$ff
   5839  207d					      repend
   5840  207e		       ff		      .byte.b	$ff
   5839  207e					      repend
   5840  207f		       ff		      .byte.b	$ff
   5839  207f					      repend
   5840  2080		       ff		      .byte.b	$ff
   5839  2080					      repend
   5840  2081		       ff		      .byte.b	$ff
   5839  2081					      repend
   5840  2082		       ff		      .byte.b	$ff
   5839  2082					      repend
   5840  2083		       ff		      .byte.b	$ff
   5839  2083					      repend
   5840  2084		       ff		      .byte.b	$ff
   5839  2084					      repend
   5840  2085		       ff		      .byte.b	$ff
   5839  2085					      repend
   5840  2086		       ff		      .byte.b	$ff
   5839  2086					      repend
   5840  2087		       ff		      .byte.b	$ff
   5839  2087					      repend
   5840  2088		       ff		      .byte.b	$ff
   5839  2088					      repend
   5840  2089		       ff		      .byte.b	$ff
   5839  2089					      repend
   5840  208a		       ff		      .byte.b	$ff
   5839  208a					      repend
   5840  208b		       ff		      .byte.b	$ff
   5839  208b					      repend
   5840  208c		       ff		      .byte.b	$ff
   5839  208c					      repend
   5840  208d		       ff		      .byte.b	$ff
   5839  208d					      repend
   5840  208e		       ff		      .byte.b	$ff
   5839  208e					      repend
   5840  208f		       ff		      .byte.b	$ff
   5839  208f					      repend
   5840  2090		       ff		      .byte.b	$ff
   5839  2090					      repend
   5840  2091		       ff		      .byte.b	$ff
   5839  2091					      repend
   5840  2092		       ff		      .byte.b	$ff
   5839  2092					      repend
   5840  2093		       ff		      .byte.b	$ff
   5839  2093					      repend
   5840  2094		       ff		      .byte.b	$ff
   5839  2094					      repend
   5840  2095		       ff		      .byte.b	$ff
   5839  2095					      repend
   5840  2096		       ff		      .byte.b	$ff
   5839  2096					      repend
   5840  2097		       ff		      .byte.b	$ff
   5839  2097					      repend
   5840  2098		       ff		      .byte.b	$ff
   5839  2098					      repend
   5840  2099		       ff		      .byte.b	$ff
   5839  2099					      repend
   5840  209a		       ff		      .byte.b	$ff
   5839  209a					      repend
   5840  209b		       ff		      .byte.b	$ff
   5839  209b					      repend
   5840  209c		       ff		      .byte.b	$ff
   5839  209c					      repend
   5840  209d		       ff		      .byte.b	$ff
   5839  209d					      repend
   5840  209e		       ff		      .byte.b	$ff
   5839  209e					      repend
   5840  209f		       ff		      .byte.b	$ff
   5839  209f					      repend
   5840  20a0		       ff		      .byte.b	$ff
   5839  20a0					      repend
   5840  20a1		       ff		      .byte.b	$ff
   5839  20a1					      repend
   5840  20a2		       ff		      .byte.b	$ff
   5839  20a2					      repend
   5840  20a3		       ff		      .byte.b	$ff
   5839  20a3					      repend
   5840  20a4		       ff		      .byte.b	$ff
   5839  20a4					      repend
   5840  20a5		       ff		      .byte.b	$ff
   5839  20a5					      repend
   5840  20a6		       ff		      .byte.b	$ff
   5839  20a6					      repend
   5840  20a7		       ff		      .byte.b	$ff
   5839  20a7					      repend
   5840  20a8		       ff		      .byte.b	$ff
   5839  20a8					      repend
   5840  20a9		       ff		      .byte.b	$ff
   5839  20a9					      repend
   5840  20aa		       ff		      .byte.b	$ff
   5839  20aa					      repend
   5840  20ab		       ff		      .byte.b	$ff
   5839  20ab					      repend
   5840  20ac		       ff		      .byte.b	$ff
   5839  20ac					      repend
   5840  20ad		       ff		      .byte.b	$ff
   5839  20ad					      repend
   5840  20ae		       ff		      .byte.b	$ff
   5839  20ae					      repend
   5840  20af		       ff		      .byte.b	$ff
   5839  20af					      repend
   5840  20b0		       ff		      .byte.b	$ff
   5839  20b0					      repend
   5840  20b1		       ff		      .byte.b	$ff
   5839  20b1					      repend
   5840  20b2		       ff		      .byte.b	$ff
   5839  20b2					      repend
   5840  20b3		       ff		      .byte.b	$ff
   5839  20b3					      repend
   5840  20b4		       ff		      .byte.b	$ff
   5839  20b4					      repend
   5840  20b5		       ff		      .byte.b	$ff
   5839  20b5					      repend
   5840  20b6		       ff		      .byte.b	$ff
   5839  20b6					      repend
   5840  20b7		       ff		      .byte.b	$ff
   5839  20b7					      repend
   5840  20b8		       ff		      .byte.b	$ff
   5839  20b8					      repend
   5840  20b9		       ff		      .byte.b	$ff
   5839  20b9					      repend
   5840  20ba		       ff		      .byte.b	$ff
   5839  20ba					      repend
   5840  20bb		       ff		      .byte.b	$ff
   5839  20bb					      repend
   5840  20bc		       ff		      .byte.b	$ff
   5839  20bc					      repend
   5840  20bd		       ff		      .byte.b	$ff
   5839  20bd					      repend
   5840  20be		       ff		      .byte.b	$ff
   5839  20be					      repend
   5840  20bf		       ff		      .byte.b	$ff
   5839  20bf					      repend
   5840  20c0		       ff		      .byte.b	$ff
   5839  20c0					      repend
   5840  20c1		       ff		      .byte.b	$ff
   5839  20c1					      repend
   5840  20c2		       ff		      .byte.b	$ff
   5839  20c2					      repend
   5840  20c3		       ff		      .byte.b	$ff
   5839  20c3					      repend
   5840  20c4		       ff		      .byte.b	$ff
   5839  20c4					      repend
   5840  20c5		       ff		      .byte.b	$ff
   5839  20c5					      repend
   5840  20c6		       ff		      .byte.b	$ff
   5839  20c6					      repend
   5840  20c7		       ff		      .byte.b	$ff
   5839  20c7					      repend
   5840  20c8		       ff		      .byte.b	$ff
   5839  20c8					      repend
   5840  20c9		       ff		      .byte.b	$ff
   5839  20c9					      repend
   5840  20ca		       ff		      .byte.b	$ff
   5839  20ca					      repend
   5840  20cb		       ff		      .byte.b	$ff
   5839  20cb					      repend
   5840  20cc		       ff		      .byte.b	$ff
   5839  20cc					      repend
   5840  20cd		       ff		      .byte.b	$ff
   5839  20cd					      repend
   5840  20ce		       ff		      .byte.b	$ff
   5839  20ce					      repend
   5840  20cf		       ff		      .byte.b	$ff
   5839  20cf					      repend
   5840  20d0		       ff		      .byte.b	$ff
   5839  20d0					      repend
   5840  20d1		       ff		      .byte.b	$ff
   5839  20d1					      repend
   5840  20d2		       ff		      .byte.b	$ff
   5839  20d2					      repend
   5840  20d3		       ff		      .byte.b	$ff
   5839  20d3					      repend
   5840  20d4		       ff		      .byte.b	$ff
   5839  20d4					      repend
   5840  20d5		       ff		      .byte.b	$ff
   5839  20d5					      repend
   5840  20d6		       ff		      .byte.b	$ff
   5839  20d6					      repend
   5840  20d7		       ff		      .byte.b	$ff
   5839  20d7					      repend
   5840  20d8		       ff		      .byte.b	$ff
   5839  20d8					      repend
   5840  20d9		       ff		      .byte.b	$ff
   5839  20d9					      repend
   5840  20da		       ff		      .byte.b	$ff
   5839  20da					      repend
   5840  20db		       ff		      .byte.b	$ff
   5839  20db					      repend
   5840  20dc		       ff		      .byte.b	$ff
   5839  20dc					      repend
   5840  20dd		       ff		      .byte.b	$ff
   5839  20dd					      repend
   5840  20de		       ff		      .byte.b	$ff
   5839  20de					      repend
   5840  20df		       ff		      .byte.b	$ff
   5839  20df					      repend
   5840  20e0		       ff		      .byte.b	$ff
   5839  20e0					      repend
   5840  20e1		       ff		      .byte.b	$ff
   5839  20e1					      repend
   5840  20e2		       ff		      .byte.b	$ff
   5839  20e2					      repend
   5840  20e3		       ff		      .byte.b	$ff
   5839  20e3					      repend
   5840  20e4		       ff		      .byte.b	$ff
   5839  20e4					      repend
   5840  20e5		       ff		      .byte.b	$ff
   5839  20e5					      repend
   5840  20e6		       ff		      .byte.b	$ff
   5839  20e6					      repend
   5840  20e7		       ff		      .byte.b	$ff
   5839  20e7					      repend
   5840  20e8		       ff		      .byte.b	$ff
   5839  20e8					      repend
   5840  20e9		       ff		      .byte.b	$ff
   5839  20e9					      repend
   5840  20ea		       ff		      .byte.b	$ff
   5839  20ea					      repend
   5840  20eb		       ff		      .byte.b	$ff
   5839  20eb					      repend
   5840  20ec		       ff		      .byte.b	$ff
   5839  20ec					      repend
   5840  20ed		       ff		      .byte.b	$ff
   5839  20ed					      repend
   5840  20ee		       ff		      .byte.b	$ff
   5839  20ee					      repend
   5840  20ef		       ff		      .byte.b	$ff
   5839  20ef					      repend
   5840  20f0		       ff		      .byte.b	$ff
   5839  20f0					      repend
   5840  20f1		       ff		      .byte.b	$ff
   5839  20f1					      repend
   5840  20f2		       ff		      .byte.b	$ff
   5839  20f2					      repend
   5840  20f3		       ff		      .byte.b	$ff
   5839  20f3					      repend
   5840  20f4		       ff		      .byte.b	$ff
   5839  20f4					      repend
   5840  20f5		       ff		      .byte.b	$ff
   5839  20f5					      repend
   5840  20f6		       ff		      .byte.b	$ff
   5839  20f6					      repend
   5840  20f7		       ff		      .byte.b	$ff
   5839  20f7					      repend
   5840  20f8		       ff		      .byte.b	$ff
   5839  20f8					      repend
   5840  20f9		       ff		      .byte.b	$ff
   5839  20f9					      repend
   5840  20fa		       ff		      .byte.b	$ff
   5839  20fa					      repend
   5840  20fb		       ff		      .byte.b	$ff
   5839  20fb					      repend
   5840  20fc		       ff		      .byte.b	$ff
   5839  20fc					      repend
   5840  20fd		       ff		      .byte.b	$ff
   5839  20fd					      repend
   5840  20fe		       ff		      .byte.b	$ff
   5839  20fe					      repend
   5840  20ff		       ff		      .byte.b	$ff
   5841  2100					      repend
   5842  2100				   .
   5843  2100							; 
   5844  2100
   5845  2100				   ._titlescreen_menu
   5846  2100							; _titlescreen_menu
   5847  2100
   5848  2100				   .L0652		;  COLUBK  =  _00
   5849  2100
   5850  2100		       a9 00		      LDA	#_00
   5851  2102		       85 09		      STA	COLUBK
   5852  2104				   .
   5853  2104							; 
   5854  2104
   5855  2104				   .L0653		;  gosub titledrawscreen
   5856  2104
   5857  2104		       20 df b2 	      jsr	.titledrawscreen
   5858  2107
   5859  2107				   .
   5860  2107							; 
   5861  2107
   5862  2107				   .L0654		;  if delay_counter then delay_counter  =  delay_counter  -  1  :  goto _titlescreen_menu
   5863  2107
   5864  2107		       a5 d4		      LDA	delay_counter
   5865  2109		       f0 05		      BEQ	.skipL0654
   5866  210b				   .condpart111
   5867  210b		       c6 d4		      DEC	delay_counter
   5868  210d		       4c 00 b1 	      jmp	._titlescreen_menu
   5869  2110
   5870  2110				   .skipL0654
   5871  2110				   .
   5872  2110							; 
   5873  2110
   5874  2110				   .L0655		;  if ReceiveBufferSize  <  response_menu_size then _Skip_Read_Menu_Response
   5875  2110
   5876  2110		       ad f3 1f 	      LDA	ReceiveBufferSize
   5877  2113		       c9 06		      CMP	#response_menu_size
   5878  2115					      if	((* - ._Skip_Read_Menu_Response) < 127) && ((* - ._Skip_Read_Menu_Response) > -128)
   5879  2115		       90 32		      bcc	._Skip_Read_Menu_Response
   5880  2117				  -	      else
   5881  2117				  -	      bcs	.41skip_Skip_Read_Menu_Response
   5882  2117				  -	      jmp	._Skip_Read_Menu_Response
   5883  2117				  -.41skip_Skip_Read_Menu_Response
   5884  2117					      endif
   5885  2117				   .L0656		;  _Bit5_Request_Pending{5}  =  0
   5886  2117
   5887  2117		       a5 ec		      LDA	_Bit5_Request_Pending
   5888  2119		       29 df		      AND	#223
   5889  211b		       85 ec		      STA	_Bit5_Request_Pending
   5890  211d				   .L0657		;  max_pub_level_bcd1	=  ReceiveBuffer
   5891  211d
   5892  211d		       ad f2 1f 	      LDA	ReceiveBuffer
   5893  2120		       85 a7		      STA	max_pub_level_bcd1
   5894  2122				   .L0658		;  max_pub_level_bcd2	=  ReceiveBuffer
   5895  2122
   5896  2122		       ad f2 1f 	      LDA	ReceiveBuffer
   5897  2125		       85 a8		      STA	max_pub_level_bcd2
   5898  2127				   .L0659		;  max_pub_level_bcd3	=  ReceiveBuffer
   5899  2127
   5900  2127		       ad f2 1f 	      LDA	ReceiveBuffer
   5901  212a		       85 a9		      STA	max_pub_level_bcd3
   5902  212c				   .L0660		;  max_priv_level_bcd1  =  ReceiveBuffer
   5903  212c
   5904  212c		       ad f2 1f 	      LDA	ReceiveBuffer
   5905  212f		       85 aa		      STA	max_priv_level_bcd1
   5906  2131				   .L0661		;  max_priv_level_bcd2  =  ReceiveBuffer
   5907  2131
   5908  2131		       ad f2 1f 	      LDA	ReceiveBuffer
   5909  2134		       85 ab		      STA	max_priv_level_bcd2
   5910  2136				   .L0662		;  max_priv_level_bcd3  =  ReceiveBuffer
   5911  2136
   5912  2136		       ad f2 1f 	      LDA	ReceiveBuffer
   5913  2139		       85 ac		      STA	max_priv_level_bcd3
   5914  213b				   .L0663		;  has_private_levels	=  max_priv_level_bcd1	|  max_priv_level_bcd2	|  max_priv_level_bcd3
   5915  213b
   5916  213b							; complex statement detected
   5917  213b		       a5 aa		      LDA	max_priv_level_bcd1
   5918  213d		       48		      PHA
   5919  213e		       a5 ab		      LDA	max_priv_level_bcd2
   5920  2140		       05 ac		      ORA	max_priv_level_bcd3
   5921  2142		       ba		      TSX
   5922  2143		       e8		      INX
   5923  2144		       9a		      TXS
   5924  2145		       15 00		      ORA	$00,x
   5925  2147		       85 ad		      STA	has_private_levels
   5926  2149				   ._Skip_Read_Menu_Response
   5927  2149							; _Skip_Read_Menu_Response
   5928  2149
   5929  2149				   .
   5930  2149							; 
   5931  2149
   5932  2149				   .L0664		;  if _Bit5_Request_Pending{5} then _titlescreen_menu
   5933  2149
   5934  2149		       a5 ec		      LDA	_Bit5_Request_Pending
   5935  214b		       29 20		      AND	#32
   5936  214d					      if	((* - ._titlescreen_menu) < 127) && ((* - ._titlescreen_menu) > -128)
   5937  214d		       d0 b1		      BNE	._titlescreen_menu
   5938  214f				  -	      else
   5939  214f				  -	      beq	.42skip_titlescreen_menu
   5940  214f				  -	      jmp	._titlescreen_menu
   5941  214f				  -.42skip_titlescreen_menu
   5942  214f					      endif
   5943  214f				   .
   5944  214f							; 
   5945  214f
   5946  214f				   .L0665		;  if joy0left then score  =  score  -  100  :  delay_counter	=  5
   5947  214f
   5948  214f		       2c 80 02 	      bit	SWCHA
   5949  2152		       70 19		      BVS	.skipL0665
   5950  2154				   .condpart112
   5951  2154		       f8		      SED
   5952  2155		       38		      SEC
   5953  2156		       a5 95		      LDA	score+2
   5954  2158		       e9 00		      SBC	#$00
   5955  215a		       85 95		      STA	score+2
   5956  215c		       a5 94		      LDA	score+1
   5957  215e		       e9 01		      SBC	#$01
   5958  2160		       85 94		      STA	score+1
   5959  2162		       a5 93		      LDA	score
   5960  2164		       e9 00		      SBC	#$00
   5961  2166		       85 93		      STA	score
   5962  2168		       d8		      CLD
   5963  2169		       a9 05		      LDA	#5
   5964  216b		       85 d4		      STA	delay_counter
   5965  216d				   .skipL0665
   5966  216d				   .L0666		;  if joy0down then score  =  score  -  1  :  delay_counter  =  5
   5967  216d
   5968  216d		       a9 20		      lda	#$20
   5969  216f		       2c 80 02 	      bit	SWCHA
   5970  2172		       d0 19		      BNE	.skipL0666
   5971  2174				   .condpart113
   5972  2174		       f8		      SED
   5973  2175		       38		      SEC
   5974  2176		       a5 95		      LDA	score+2
   5975  2178		       e9 01		      SBC	#$01
   5976  217a		       85 95		      STA	score+2
   5977  217c		       a5 94		      LDA	score+1
   5978  217e		       e9 00		      SBC	#$00
   5979  2180		       85 94		      STA	score+1
   5980  2182		       a5 93		      LDA	score
   5981  2184		       e9 00		      SBC	#$00
   5982  2186		       85 93		      STA	score
   5983  2188		       d8		      CLD
   5984  2189		       a9 05		      LDA	#5
   5985  218b		       85 d4		      STA	delay_counter
   5986  218d				   .skipL0666
   5987  218d				   .L0667		;  if joy0right then score  =	score  +  100  :  delay_counter  =  5
   5988  218d
   5989  218d		       2c 80 02 	      bit	SWCHA
   5990  2190		       30 13		      BMI	.skipL0667
   5991  2192				   .condpart114
   5992  2192		       f8		      SED
   5993  2193		       18		      CLC
   5994  2194		       a5 94		      LDA	score+1
   5995  2196		       69 01		      ADC	#$01
   5996  2198		       85 94		      STA	score+1
   5997  219a		       a5 93		      LDA	score
   5998  219c		       69 00		      ADC	#$00
   5999  219e		       85 93		      STA	score
   6000  21a0		       d8		      CLD
   6001  21a1		       a9 05		      LDA	#5
   6002  21a3		       85 d4		      STA	delay_counter
   6003  21a5				   .skipL0667
   6004  21a5				   .L0668		;  if joy0up then score  =  score  +  1  :  delay_counter  =  5
   6005  21a5
   6006  21a5		       a9 10		      lda	#$10
   6007  21a7		       2c 80 02 	      bit	SWCHA
   6008  21aa		       d0 19		      BNE	.skipL0668
   6009  21ac				   .condpart115
   6010  21ac		       f8		      SED
   6011  21ad		       18		      CLC
   6012  21ae		       a5 95		      LDA	score+2
   6013  21b0		       69 01		      ADC	#$01
   6014  21b2		       85 95		      STA	score+2
   6015  21b4		       a5 94		      LDA	score+1
   6016  21b6		       69 00		      ADC	#$00
   6017  21b8		       85 94		      STA	score+1
   6018  21ba		       a5 93		      LDA	score
   6019  21bc		       69 00		      ADC	#$00
   6020  21be		       85 93		      STA	score
   6021  21c0		       d8		      CLD
   6022  21c1		       a9 05		      LDA	#5
   6023  21c3		       85 d4		      STA	delay_counter
   6024  21c5				   .skipL0668
   6025  21c5				   .
   6026  21c5							; 
   6027  21c5
   6028  21c5				   .
   6029  21c5							; 
   6030  21c5
   6031  21c5				   .L0669		;  if gamenumber  >  4 then _User_Level_Compare
   6032  21c5
   6033  21c5		       a9 04		      LDA	#4
   6034  21c7		       c5 a6		      CMP	gamenumber
   6035  21c9					      if	((* - ._User_Level_Compare) < 127) && ((* - ._User_Level_Compare) > -128)
   6036  21c9		       90 13		      bcc	._User_Level_Compare
   6037  21cb				  -	      else
   6038  21cb				  -	      bcs	.43skip_User_Level_Compare
   6039  21cb				  -	      jmp	._User_Level_Compare
   6040  21cb				  -.43skip_User_Level_Compare
   6041  21cb					      endif
   6042  21cb				   .
   6043  21cb							; 
   6044  21cb
   6045  21cb				   .L0670		;  asm
   6046  21cb
   6047  21cb		       f8		      sed		; Set the Decimal Mode Flag
   6048  21cc
   6049  21cc		       a5 a9		      lda	max_pub_level_bcd3	; Load the Accumulator
   6050  21ce
   6051  21ce		       c5 95		      cmp	_sc3	; Compare Memory and the Accumulator
   6052  21d0
   6053  21d0		       a5 a8		      lda	max_pub_level_bcd2	; Load the Accumulator
   6054  21d2
   6055  21d2		       e5 94		      sbc	_sc2	; Subtract With Carry
   6056  21d4
   6057  21d4		       a5 a7		      lda	max_pub_level_bcd1	; Load the Accumulator
   6058  21d6
   6059  21d6		       e5 93		      sbc	_sc1	; Subtract With Carry
   6060  21d8
   6061  21d8		       d8		      cld		; Clear the Decimal Flag
   6062  21d9
   6063  21d9		       b0 1f		      bcs	._Skip_Level_Reset	; Branch if Carry Set
   6064  21db
   6065  21db							; (goto label if carry is set)
   6066  21db
   6067  21db		       4c ee b1 	      jmp	._Level_Reset
   6068  21de
   6069  21de
   6070  21de
   6071  21de				   ._User_Level_Compare
   6072  21de
   6073  21de		       f8		      sed		; Set the Decimal Mode Flag
   6074  21df
   6075  21df		       a5 ac		      lda	max_priv_level_bcd3	; Load the Accumulator
   6076  21e1
   6077  21e1		       c5 95		      cmp	_sc3	; Compare Memory and the Accumulator
   6078  21e3
   6079  21e3		       a5 ab		      lda	max_priv_level_bcd2	; Load the Accumulator
   6080  21e5
   6081  21e5		       e5 94		      sbc	_sc2	; Subtract With Carry
   6082  21e7
   6083  21e7		       a5 aa		      lda	max_priv_level_bcd1	; Load the Accumulator
   6084  21e9
   6085  21e9		       e5 93		      sbc	_sc1	; Subtract With Carry
   6086  21eb
   6087  21eb		       d8		      cld		; Clear the Decimal Flag
   6088  21ec
   6089  21ec		       b0 0c		      bcs	._Skip_Level_Reset	; Branch if Carry Set
   6090  21ee
   6091  21ee							; (goto label if carry is set)
   6092  21ee
   6093  21ee
   6094  21ee
   6095  21ee				   ._Level_Reset
   6096  21ee							; _Level_Reset
   6097  21ee
   6098  21ee				   .L0671		;  score  =  1
   6099  21ee
   6100  21ee		       a9 01		      LDA	#$01
   6101  21f0		       85 95		      STA	score+2
   6102  21f2		       a9 00		      LDA	#$00
   6103  21f4		       85 94		      STA	score+1
   6104  21f6		       a9 00		      LDA	#$00
   6105  21f8		       85 93		      STA	score
   6106  21fa				   .
   6107  21fa							; 
   6108  21fa
   6109  21fa				   ._Skip_Level_Reset
   6110  21fa							; _Skip_Level_Reset
   6111  21fa
   6112  21fa				   .L0672		;  if gamenumber  <  5  &&  _sc1  =  0  &&  _sc2  =  0  &&  _sc3  =  0 then _sc1  =  max_pub_level_bcd1  :  _sc2  =  max_pub_level_bcd2  :  _sc3  =  max_pub_level_bcd3
   6113  21fa
   6114  21fa		       a5 a6		      LDA	gamenumber
   6115  21fc		       c9 05		      CMP	#5
   6116  21fe		       b0 1e		      BCS	.skipL0672
   6117  2200				   .condpart116
   6118  2200		       a5 93		      LDA	_sc1
   6119  2202		       c9 00		      CMP	#0
   6120  2204		       d0 18		      BNE	.skip116then
   6121  2206				   .condpart117
   6122  2206		       a5 94		      LDA	_sc2
   6123  2208		       c9 00		      CMP	#0
   6124  220a		       d0 12		      BNE	.skip117then
   6125  220c				   .condpart118
   6126  220c		       a5 95		      LDA	_sc3
   6127  220e		       c9 00		      CMP	#0
   6128  2210		       d0 0c		      BNE	.skip118then
   6129  2212				   .condpart119
   6130  2212		       a5 a7		      LDA	max_pub_level_bcd1
   6131  2214		       85 93		      STA	_sc1
   6132  2216		       a5 a8		      LDA	max_pub_level_bcd2
   6133  2218		       85 94		      STA	_sc2
   6134  221a		       a5 a9		      LDA	max_pub_level_bcd3
   6135  221c		       85 95		      STA	_sc3
   6136  221e				   .skip118then
   6137  221e				   .skip117then
   6138  221e				   .skip116then
   6139  221e				   .skipL0672
   6140  221e				   .L0673		;  if gamenumber  >  4  &&  _sc1  =  0  &&  _sc2  =  0  &&  _sc3  =  0 then _sc1  =  max_priv_level_bcd1  :  _sc2  =  max_priv_level_bcd2  :  _sc3  =	max_priv_level_bcd3
   6141  221e
   6142  221e		       a9 04		      LDA	#4
   6143  2220		       c5 a6		      CMP	gamenumber
   6144  2222		       b0 1e		      BCS	.skipL0673
   6145  2224				   .condpart120
   6146  2224		       a5 93		      LDA	_sc1
   6147  2226		       c9 00		      CMP	#0
   6148  2228		       d0 18		      BNE	.skip120then
   6149  222a				   .condpart121
   6150  222a		       a5 94		      LDA	_sc2
   6151  222c		       c9 00		      CMP	#0
   6152  222e		       d0 12		      BNE	.skip121then
   6153  2230				   .condpart122
   6154  2230		       a5 95		      LDA	_sc3
   6155  2232		       c9 00		      CMP	#0
   6156  2234		       d0 0c		      BNE	.skip122then
   6157  2236				   .condpart123
   6158  2236		       a5 aa		      LDA	max_priv_level_bcd1
   6159  2238		       85 93		      STA	_sc1
   6160  223a		       a5 ab		      LDA	max_priv_level_bcd2
   6161  223c		       85 94		      STA	_sc2
   6162  223e		       a5 ac		      LDA	max_priv_level_bcd3
   6163  2240		       85 95		      STA	_sc3
   6164  2242				   .skip122then
   6165  2242				   .skip121then
   6166  2242				   .skip120then
   6167  2242				   .skipL0673
   6168  2242				   .
   6169  2242							; 
   6170  2242
   6171  2242				   .L0674		;  if has_private_levels then temp4  =  8 else temp4  =  4
   6172  2242
   6173  2242		       a5 ad		      LDA	has_private_levels
   6174  2244		       f0 07		      BEQ	.skipL0674
   6175  2246				   .condpart124
   6176  2246		       a9 08		      LDA	#8
   6177  2248		       85 9f		      STA	temp4
   6178  224a		       4c 51 b2 	      jmp	.skipelse8
   6179  224d				   .skipL0674
   6180  224d		       a9 04		      LDA	#4
   6181  224f		       85 9f		      STA	temp4
   6182  2251				   .skipelse8
   6183  2251				   .L0675		;  if switchselect then gamenumber  =	gamenumber  +  1  :  delay_counter  =  20  :  if gamenumber  >	temp4 then gamenumber  =  1
   6184  2251
   6185  2251		       a9 02		      lda	#2
   6186  2253		       2c 82 02 	      bit	SWCHB
   6187  2256		       d0 10		      BNE	.skipL0675
   6188  2258				   .condpart125
   6189  2258		       e6 a6		      INC	gamenumber
   6190  225a		       a9 14		      LDA	#20
   6191  225c		       85 d4		      STA	delay_counter
   6192  225e		       a5 9f		      LDA	temp4
   6193  2260		       c5 a6		      CMP	gamenumber
   6194  2262		       b0 04		      BCS	.skip125then
   6195  2264				   .condpart126
   6196  2264		       a9 01		      LDA	#1
   6197  2266		       85 a6		      STA	gamenumber
   6198  2268				   .skip125then
   6199  2268				   .skipL0675
   6200  2268				   .L0676		;  if !joy0fire then _Bit7_FireB_Restrainer{7}  =  0  :  goto _titlescreen_menu
   6201  2268
   6202  2268		       24 0c		      bit	INPT4
   6203  226a		       10 09		      BPL	.skipL0676
   6204  226c				   .condpart127
   6205  226c		       a5 ec		      LDA	_Bit7_FireB_Restrainer
   6206  226e		       29 7f		      AND	#127
   6207  2270		       85 ec		      STA	_Bit7_FireB_Restrainer
   6208  2272		       4c 00 b1 	      jmp	._titlescreen_menu
   6209  2275
   6210  2275				   .skipL0676
   6211  2275				   .L0677		;  if _Bit7_FireB_Restrainer{7} then goto _titlescreen_menu
   6212  2275
   6213  2275		       24 ec		      BIT	_Bit7_FireB_Restrainer
   6214  2277		       10 03		      BPL	.skipL0677
   6215  2279				   .condpart128
   6216  2279		       4c 00 b1 	      jmp	._titlescreen_menu
   6217  227c
   6218  227c				   .skipL0677
   6219  227c				   .
   6220  227c							; 
   6221  227c
   6222  227c				   .
   6223  227c							; 
   6224  227c
   6225  227c				   .
   6226  227c							; 
   6227  227c
   6228  227c				   .L0678		;  WriteToBuffer  =  _sc1  :  WriteToBuffer  =  _sc2  :  WriteToBuffer  =  _sc3  :  WriteToBuffer  =  gamenumber  :  WriteSendBuffer  =  req_load  :  _Bit5_Request_Pending{5}  =  1
   6229  227c
   6230  227c		       a5 93		      LDA	_sc1
   6231  227e		       8d f0 1f 	      STA	WriteToBuffer
   6232  2281		       a5 94		      LDA	_sc2
   6233  2283		       8d f0 1f 	      STA	WriteToBuffer
   6234  2286		       a5 95		      LDA	_sc3
   6235  2288		       8d f0 1f 	      STA	WriteToBuffer
   6236  228b		       a5 a6		      LDA	gamenumber
   6237  228d		       8d f0 1f 	      STA	WriteToBuffer
   6238  2290		       a9 00		      LDA	#req_load
   6239  2292		       8d f1 1f 	      STA	WriteSendBuffer
   6240  2295		       a5 ec		      LDA	_Bit5_Request_Pending
   6241  2297		       09 20		      ORA	#32
   6242  2299		       85 ec		      STA	_Bit5_Request_Pending
   6243  229b				   .
   6244  229b							; 
   6245  229b
   6246  229b				   .L0679		;  _Bit7_FireB_Restrainer{7}  =  1
   6247  229b
   6248  229b		       a5 ec		      LDA	_Bit7_FireB_Restrainer
   6249  229d		       09 80		      ORA	#128
   6250  229f		       85 ec		      STA	_Bit7_FireB_Restrainer
   6251  22a1				   .
   6252  22a1							; 
   6253  22a1
   6254  22a1				   .L0680		;  player1y  =  player_min_y  :  Game_Status  =  game_state_run
   6255  22a1
   6256  22a1		       a9 02		      LDA	#player_min_y
   6257  22a3		       85 86		      STA	player1y
   6258  22a5		       a9 00		      LDA	#game_state_run
   6259  22a7		       85 d3		      STA	Game_Status
   6260  22a9				   .L0681		;  score  =  0  :  men_to_rescue  =  0
   6261  22a9
   6262  22a9		       a9 00		      LDA	#$00
   6263  22ab		       85 95		      STA	score+2
   6264  22ad		       a9 00		      LDA	#$00
   6265  22af		       85 94		      STA	score+1
   6266  22b1		       a9 00		      LDA	#$00
   6267  22b3		       85 93		      STA	score
   6268  22b5		       a9 00		      LDA	#0
   6269  22b7		       85 b0		      STA	men_to_rescue
   6270  22b9				   .L0682		;  pfscore1  =  %00101010  :  pfscore2  =  255  :  pfscorecolor  =  _1C
   6271  22b9
   6272  22b9		       a9 2a		      LDA	#%00101010
   6273  22bb		       85 f2		      STA	pfscore1
   6274  22bd		       a9 ff		      LDA	#255
   6275  22bf		       85 f3		      STA	pfscore2
   6276  22c1		       a9 1c		      LDA	#_1C
   6277  22c3		       85 f4		      STA	pfscorecolor
   6278  22c5				   .
   6279  22c5							; 
   6280  22c5
   6281  22c5				   .
   6282  22c5							; 
   6283  22c5
   6284  22c5				   .
   6285  22c5							; 
   6286  22c5
   6287  22c5				   .L0683		;  asm
   6288  22c5
   6289  22c5		       a9 f0		      lda	#>(r_room_color_middle-132+pfres*pfwidth)
   6290  22c7
   6291  22c7		       85 f1		      sta	pfcolortable+1
   6292  22c9
   6293  22c9		       a9 6d		      lda	#<(r_room_color_middle-132+pfres*pfwidth)
   6294  22cb
   6295  22cb		       85 f0		      sta	pfcolortable
   6296  22cd
   6297  22cd				   .L0684		;  goto __Skip_Ch_1 bank1
   6298  22cd
   6299  22cd		       85 ee		      sta	temp7
   6300  22cf		       a9 9b		      lda	#>(.__Skip_Ch_1-1)
   6301  22d1		       48		      pha
   6302  22d2		       a9 f4		      lda	#<(.__Skip_Ch_1-1)
   6303  22d4		       48		      pha
   6304  22d5		       a5 ee		      lda	temp7
   6305  22d7		       48		      pha
   6306  22d8		       8a		      txa
   6307  22d9		       48		      pha
   6308  22da		       a2 01		      ldx	#1
   6309  22dc		       4c e8 ff 	      jmp	BS_jsr
   6310  22df				   .
   6311  22df							; 
   6312  22df
   6313  22df				   .L0685		;  asm
   6314  22df
------- FILE titlescreen/asm/titlescreen.asm LEVEL 2 PASS 3
      0  22df					      include	"titlescreen/asm/titlescreen.asm"
      1  22df
------- FILE titlescreen/asm/layoutmacros.asm LEVEL 3 PASS 3
      0  22df					      include	"titlescreen/asm/layoutmacros.asm"
      1  22df
      2  22df							; the macro's used in the "titlescreen_layout.asm" file
      3  22df
      4  22df					      MAC	draw_96x2_1
      5  22df				   mk_96x2_1_on =	1
      6  22df					      jsr	draw_bmp_96x2_1
      7  22df					      ENDM
      8  22df
      9  22df					      MAC	draw_96x2_2
     10  22df				   mk_96x2_2_on =	1
     11  22df					      jsr	draw_bmp_96x2_2
     12  22df					      ENDM
     13  22df
     14  22df					      MAC	draw_96x2_3
     15  22df				   mk_96x2_3_on =	1
     16  22df					      jsr	draw_bmp_96x2_3
     17  22df					      ENDM
     18  22df
     19  22df					      MAC	draw_96x2_4
     20  22df				   mk_96x2_4_on =	1
     21  22df					      jsr	draw_bmp_96x2_4
     22  22df					      ENDM
     23  22df
     24  22df					      MAC	draw_96x2_5
     25  22df				   mk_96x2_5_on =	1
     26  22df					      jsr	draw_bmp_96x2_5
     27  22df					      ENDM
     28  22df
     29  22df					      MAC	draw_96x2_6
     30  22df				   mk_96x2_6_on =	1
     31  22df					      jsr	draw_bmp_96x2_6
     32  22df					      ENDM
     33  22df
     34  22df					      MAC	draw_96x2_7
     35  22df				   mk_96x2_7_on =	1
     36  22df					      jsr	draw_bmp_96x2_7
     37  22df					      ENDM
     38  22df
     39  22df					      MAC	draw_96x2_8
     40  22df				   mk_96x2_8_on =	1
     41  22df					      jsr	draw_bmp_96x2_8
     42  22df					      ENDM
     43  22df
     44  22df					      MAC	draw_48x1_1
     45  22df				   mk_48x1_X_on =	1
     46  22df				   mk_48x1_1_on =	1
     47  22df					      jsr	draw_bmp_48x1_1
     48  22df					      ENDM
     49  22df
     50  22df					      MAC	draw_48x1_2
     51  22df				   mk_48x1_X_on =	1
     52  22df				   mk_48x1_2_on =	1
     53  22df					      jsr	draw_bmp_48x1_2
     54  22df					      ENDM
     55  22df
     56  22df					      MAC	draw_48x1_3
     57  22df				   mk_48x1_X_on =	1
     58  22df				   mk_48x1_3_on =	1
     59  22df					      jsr	draw_bmp_48x1_3
     60  22df					      ENDM
     61  22df
     62  22df					      MAC	draw_48x1_4
     63  22df				   mk_48x1_X_on =	1
     64  22df				   mk_48x1_4_on =	1
     65  22df					      jsr	draw_bmp_48x1_4
     66  22df					      ENDM
     67  22df
     68  22df					      MAC	draw_48x1_5
     69  22df				   mk_48x1_X_on =	1
     70  22df				   mk_48x1_5_on =	1
     71  22df					      jsr	draw_bmp_48x1_5
     72  22df					      ENDM
     73  22df
     74  22df					      MAC	draw_48x1_6
     75  22df				   mk_48x1_X_on =	1
     76  22df				   mk_48x1_6_on =	1
     77  22df					      jsr	draw_bmp_48x1_6
     78  22df					      ENDM
     79  22df
     80  22df					      MAC	draw_48x1_7
     81  22df				   mk_48x1_X_on =	1
     82  22df				   mk_48x1_7_on =	1
     83  22df					      jsr	draw_bmp_48x1_7
     84  22df					      ENDM
     85  22df
     86  22df					      MAC	draw_48x1_8
     87  22df				   mk_48x1_X_on =	1
     88  22df				   mk_48x1_8_on =	1
     89  22df					      jsr	draw_bmp_48x1_8
     90  22df					      ENDM
     91  22df
     92  22df
     93  22df					      MAC	draw_48x2_1
     94  22df				   mk_48x2_X_on =	1
     95  22df				   mk_48x2_1_on =	1
     96  22df					      jsr	draw_bmp_48x2_1
     97  22df					      ENDM
     98  22df
     99  22df					      MAC	draw_48x2_2
    100  22df				   mk_48x2_X_on =	1
    101  22df				   mk_48x2_2_on =	1
    102  22df					      jsr	draw_bmp_48x2_2
    103  22df					      ENDM
    104  22df
    105  22df					      MAC	draw_48x2_3
    106  22df				   mk_48x2_X_on =	1
    107  22df				   mk_48x2_3_on =	1
    108  22df					      jsr	draw_bmp_48x2_3
    109  22df					      ENDM
    110  22df
    111  22df					      MAC	draw_48x2_4
    112  22df				   mk_48x2_X_on =	1
    113  22df				   mk_48x2_4_on =	1
    114  22df					      jsr	draw_bmp_48x2_4
    115  22df					      ENDM
    116  22df
    117  22df					      MAC	draw_48x2_5
    118  22df				   mk_48x2_X_on =	1
    119  22df				   mk_48x2_5_on =	1
    120  22df					      jsr	draw_bmp_48x2_5
    121  22df					      ENDM
    122  22df
    123  22df					      MAC	draw_48x2_6
    124  22df				   mk_48x2_X_on =	1
    125  22df				   mk_48x2_6_on =	1
    126  22df					      jsr	draw_bmp_48x2_6
    127  22df					      ENDM
    128  22df
    129  22df					      MAC	draw_48x2_7
    130  22df				   mk_48x2_X_on =	1
    131  22df				   mk_48x2_7_on =	1
    132  22df					      jsr	draw_bmp_48x2_7
    133  22df					      ENDM
    134  22df
    135  22df					      MAC	draw_48x2_8
    136  22df				   mk_48x2_X_on =	1
    137  22df				   mk_48x2_8_on =	1
    138  22df					      jsr	draw_bmp_48x2_8
    139  22df					      ENDM
    140  22df
    141  22df					      MAC	draw_player
    142  22df				   mk_player_on =	1
    143  22df					      jsr	draw_player_display
    144  22df					      ENDM
    145  22df
    146  22df					      MAC	draw_score
    147  22df				   mk_score_on =	1
    148  22df				   mk_48x1_X_on =	1
    149  22df					      jsr	draw_score_display
    150  22df					      ENDM
    151  22df
    152  22df					      MAC	draw_gameselect
    153  22df				   mk_gameselect_on =	1
    154  22df				   mk_48x1_X_on =	1
    155  22df					      jsr	draw_gameselect_display
    156  22df					      ENDM
    157  22df
    158  22df					      MAC	draw_space
    159  22df					      ldy	#{1}
    160  22df				   .loop
    161  22df					      sta	WSYNC
    162  22df					      dey
    163  22df					      bne	.loop
    164  22df					      ENDM
    165  22df
------- FILE titlescreen/asm/titlescreen.asm
------- FILE titlescreen/asm/dpcfix.asm LEVEL 3 PASS 3
      0  22df					      include	"titlescreen/asm/dpcfix.asm"
      1  22df							; reassign variables that DPC+ doesn't have
      2  22df
      3  22df				  -	      ifnconst	aux2
      4  22df				  -aux2       =	player2x
      5  22df					      endif
      6  22df				  -	      ifnconst	aux4
      7  22df				  -aux4       =	player4x
      8  22df					      endif
      9  22df				  -	      ifnconst	aux5
     10  22df				  -aux5       =	player5x
     11  22df					      endif
     12  22df				  -	      ifnconst	aux6
     13  22df				  -aux6       =	player6x
     14  22df					      endif
     15  22df
     16  22df				  -	      ifnconst	player0pointer
     17  22df				  -player0pointer =	player2y
     18  22df					      endif
     19  22df				  -	      ifnconst	player1pointer
     20  22df				  -player1pointer =	player2height	; to player3height
     21  22df					      endif
     22  22df				  -	      ifnconst	player1color
     23  22df				  -player1color =	player4height	; to player5height
     24  22df					      endif
     25  22df				  -	      ifnconst	scorepointers
     26  22df				  -scorepointers =	player6height	; to NUSIZ8
     27  22df					      endif
------- FILE titlescreen/asm/titlescreen.asm
------- FILE titlescreen/titlescreen_layout.asm LEVEL 3 PASS 3
      0  22df					      include	"titlescreen/titlescreen_layout.asm"
      1  22df
      2  22df							; To use a minikernel, just list it below. They'll be drawn on the screen in
      3  22df							; in the order they were listed.
      4  22df							;
      5  22df							; If a minikernel isn't listed, it won't be compiled into your program, and
      6  22df							; it won't use any rom space.
      7  22df
      8  22df					      MAC	titlescreenlayout
      9  22df					      draw_96x2_1
     10  22df					      draw_gameselect
     11  22df					      draw_48x2_1
     12  22df					      draw_score
     13  22df					      ENDM
     14  22df
     15  22df							; minikernel choices are:
     16  22df							;
     17  22df							; draw_48x1_1, draw_48x1_2, draw_48x1_3
     18  22df							;	The first, second, and third 48-wide single-line bitmap minikernels
     19  22df							;
     20  22df							; draw_48x2_1, draw_48x2_2, draw_48x2_3
     21  22df							;	The first, second, and third 48-wide double-line bitmap minikernels
     22  22df							;
     23  22df							; draw_96x2_1, draw_96x2_2, draw_96x2_3
     24  22df							;	The first, second, and third 96-wide double-line bitmap minikernels
     25  22df							;
     26  22df							; draw_gameselect
     27  22df							;	The game selection display minikernel
     28  22df							;
     29  22df							; draw_score
     30  22df							;	A minikernel that draws the score
     31  22df							;
     32  22df							; draw_space 10
     33  22df							;	A minikernel used to add blank space between other minikernels
------- FILE titlescreen/asm/titlescreen.asm
      5  22df
      6  22df				   .titledrawscreen
      7  22df				   title_eat_overscan
      8  22df							;bB runs in overscan. Wait for the overscan to run out...
      9  22df		       18		      clc
     10  22e0		       ad 84 02 	      lda	INTIM
     11  22e3		       30 fa		      bmi	title_eat_overscan
     12  22e5		       4c e8 b2 	      jmp	title_do_vertical_sync
     13  22e8
     14  22e8				   title_do_vertical_sync
     15  22e8		       a9 02		      lda	#2
     16  22ea		       85 02		      sta	WSYNC	;one line with VSYNC
     17  22ec		       85 00		      sta	VSYNC	;enable VSYNC
     18  22ee		       85 02		      sta	WSYNC	;one line with VSYNC
     19  22f0		       85 02		      sta	WSYNC	;one line with VSYNC
     20  22f2		       a9 00		      lda	#0
     21  22f4		       85 02		      sta	WSYNC	;one line with VSYNC
     22  22f6		       85 00		      sta	VSYNC	;turn off VSYNC
     23  22f8
     24  22f8							;lda #42+128
     25  22f8					      ifnconst	vblank_time
     26  22f8		       a9 aa		      lda	#42+128
     27  22fa				  -	      else
     28  22fa				  -	      lda	#vblank_time+128
     29  22fa					      endif
     30  22fa
     31  22fa		       8d 96 02 	      sta	TIM64T
     32  22fd
     33  22fd		       00 82	   titleframe =	missile0x
     34  22fd		       e6 82		      inc	titleframe	; increment the frame counter
     35  22ff
     36  22ff				  -	      ifconst	.title_vblank
     37  22ff				  -	      jsr	.title_vblank
     38  22ff					      endif
     39  22ff
     40  22ff				   title_vblank_loop
     41  22ff		       ad 84 02 	      lda	INTIM
     42  2302		       30 fb		      bmi	title_vblank_loop
     43  2304		       a9 00		      lda	#0
     44  2306		       85 02		      sta	WSYNC
     45  2308		       85 01		      sta	VBLANK
     46  230a		       85 1d		      sta	ENAM0
     47  230c		       85 1f		      sta	ENABL
     48  230e
     49  230e				   title_playfield
     50  230e
     51  230e							; ======== BEGIN of the custom kernel!!!!! All of the work is done in the playfield.
     52  230e
     53  230e		       a9 e6		      lda	#230
     54  2310		       8d 96 02 	      sta	TIM64T
     55  2313
     56  2313		       a9 01		      lda	#1
     57  2315		       85 0a		      sta	CTRLPF
     58  2317		       18		      clc
     59  2318
     60  2318		       a9 00		      lda	#0
     61  231a		       85 0b		      sta	REFP0
     62  231c		       85 0c		      sta	REFP1
     63  231e		       85 02		      sta	WSYNC
     64  2320		       ad 58 b3 	      lda	titlescreencolor
     65  2323		       85 09		      sta	COLUBK
     66  2325
      0  2325					      titlescreenlayout
      0  2325					      draw_96x2_1
      1  2325		       00 01	   mk_96x2_1_on =	1
      2  2325		       20 f1 b4 	      jsr	draw_bmp_96x2_1
      0  2328					      draw_gameselect
      1  2328		       00 01	   mk_gameselect_on =	1
      2  2328		       00 01	   mk_48x1_X_on =	1
      3  2328		       20 53 b7 	      jsr	draw_gameselect_display
      0  232b					      draw_48x2_1
      1  232b		       00 01	   mk_48x2_X_on =	1
      2  232b		       00 01	   mk_48x2_1_on =	1
      3  232b		       20 5d b3 	      jsr	draw_bmp_48x2_1
      0  232e					      draw_score
      1  232e		       00 01	   mk_score_on =	1
      2  232e		       00 01	   mk_48x1_X_on =	1
      3  232e		       20 71 b6 	      jsr	draw_score_display
     68  2331
     69  2331		       4c c9 b7 	      jmp	PFWAIT	; kernel is done. Finish off the screen
     70  2334
------- FILE titlescreen/asm/position48.asm LEVEL 3 PASS 3
      0  2334					      include	"titlescreen/asm/position48.asm"
      1  2334
      2  2334				   position48
      3  2334
      4  2334							;postion P0 and P1
      5  2334
      6  2334		       85 02		      sta	WSYNC
      7  2336
      8  2336		       a9 90		      lda	#$90	;2
      9  2338		       85 20		      sta	HMP0	;3
     10  233a		       a9 a0		      lda	#$A0	;2
     11  233c		       85 21		      sta	HMP1	;3
     12  233e
     13  233e		       e6 9c		      inc	temp1
     14  2340		       c6 9c		      dec	temp1
     15  2342		       e6 9c		      inc	temp1
     16  2344		       c6 9c		      dec	temp1
     17  2346		       e6 9c		      inc	temp1
      0  2348					      sleep	2
      1  2348				   .CYCLES    SET	2
      2  2348
      3  2348				  -	      IF	.CYCLES < 2
      4  2348				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  2348				  -	      ERR
      6  2348					      ENDIF
      7  2348
      8  2348				  -	      IF	.CYCLES & 1
      9  2348				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  2348				  -	      nop	0
     11  2348				  -	      ELSE
     12  2348				  -	      bit	VSYNC
     13  2348				  -	      ENDIF
     14  2348				  -.CYCLES    SET	.CYCLES - 3
     15  2348					      ENDIF
     16  2348
     17  2348					      REPEAT	.CYCLES / 2
     18  2348		       ea		      nop
     19  2349					      REPEND
     19  2349		       85 10		      sta	RESP0	;  +3
     20  234b		       85 11		      sta	RESP1	;  +3
     21  234d		       c6 9c		      dec	temp1	;  +5
     22  234f		       e6 9c		      inc	temp1	;  +5
     23  2351		       c6 9c		      dec	temp1	;  +5
     24  2353		       e6 9c		      inc	temp1	;  +5
     25  2355		       c6 9c		      dec	temp1	;  +5
      0  2357					      sleep	3
      1  2357				   .CYCLES    SET	3
      2  2357
      3  2357				  -	      IF	.CYCLES < 2
      4  2357				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  2357				  -	      ERR
      6  2357					      ENDIF
      7  2357
      8  2357					      IF	.CYCLES & 1
      9  2357					      IFNCONST	NO_ILLEGAL_OPCODES
     10  2357		       04 00		      nop	0
     11  2359				  -	      ELSE
     12  2359				  -	      bit	VSYNC
     13  2359					      ENDIF
     14  2359				   .CYCLES    SET	.CYCLES - 3
     15  2359					      ENDIF
     16  2359
     17  2359				  -	      REPEAT	.CYCLES / 2
     18  2359				  -	      nop
     19  2359					      REPEND
     27  2359		       85 2a		      sta	HMOVE	; +76
     28  235b		       60		      RTS
     29  235c
------- FILE titlescreen/asm/titlescreen.asm
------- FILE titlescreen/titlescreen_color.asm LEVEL 3 PASS 3
      0  235c					      include	"titlescreen/titlescreen_color.asm"
      1  235c
      2  235c							; This is where the titlescreen background color gets set.
      3  235c							; You can also do a "dim titlescreencolor=[letter]" in bB
      4  235c							; if you want to change the color on the fly.
      5  235c
      6  235c				  -	      ifnconst	titlescreencolor
      7  235c				  -titlescreencolor
      8  235c					      endif
      9  235c		       00		      .byte.b	$00
     10  235d
------- FILE titlescreen/asm/titlescreen.asm
     73  235d
     74  235d				  -	      ifconst	mk_48x1_1_on
     75  235d				  -	      include	"titlescreen/asm/48x1_1_kernel.asm"
     76  235d					      endif		;mk_48x1_1_on
     77  235d
     78  235d				  -	      ifconst	mk_48x1_2_on
     79  235d				  -	      include	"titlescreen/asm/48x1_2_kernel.asm"
     80  235d					      endif		;mk_48x1_2_on
     81  235d
     82  235d				  -	      ifconst	mk_48x1_3_on
     83  235d				  -	      include	"titlescreen/asm/48x1_3_kernel.asm"
     84  235d					      endif		;mk_48x1_3_on
     85  235d
     86  235d				  -	      ifconst	mk_48x1_4_on
     87  235d				  -	      include	"titlescreen/asm/48x1_4_kernel.asm"
     88  235d					      endif		;mk_48x1_4_on
     89  235d
     90  235d				  -	      ifconst	mk_48x1_5_on
     91  235d				  -	      include	"titlescreen/asm/48x1_5_kernel.asm"
     92  235d					      endif		;mk_48x1_5_on
     93  235d
     94  235d				  -	      ifconst	mk_48x1_6_on
     95  235d				  -	      include	"titlescreen/asm/48x1_6_kernel.asm"
     96  235d					      endif		;mk_48x1_6_on
     97  235d
     98  235d				  -	      ifconst	mk_48x1_7_on
     99  235d				  -	      include	"titlescreen/asm/48x1_7_kernel.asm"
    100  235d					      endif		;mk_48x1_7_on
    101  235d
    102  235d				  -	      ifconst	mk_48x1_8_on
    103  235d				  -	      include	"titlescreen/asm/48x1_8_kernel.asm"
    104  235d					      endif		;mk_48x1_8_on
    105  235d
    106  235d					      ifconst	mk_48x2_1_on
------- FILE titlescreen/asm/48x2_1_kernel.asm LEVEL 3 PASS 3
      0  235d					      include	"titlescreen/asm/48x2_1_kernel.asm"
      1  235d
      2  235d				   draw_bmp_48x2_1
      3  235d
      4  235d		       a9 de		      lda	#<(bmp_48x2_1_colors-1+bmp_48x2_1_height-bmp_48x2_1_window)
      5  235f				  -	      ifconst	bmp_48x2_1_index
      6  235f				  -	      sec
      7  235f				  -	      sbc	bmp_48x2_1_index
      8  235f					      endif
      9  235f		       85 f4		      sta	aux5+0
     10  2361		       a9 b7		      lda	#>(bmp_48x2_1_colors-1+bmp_48x2_1_height-bmp_48x2_1_window)
     11  2363		       85 f5		      sta	aux5+1
     12  2365
     13  2365		       a0 0b		      ldy	#11
     14  2367				   bmp_48x2_1_pointersetup
     15  2367		       b9 9c b3 	      lda	bmp_48x2_1_values,y
     16  236a		       99 96 00 	      sta	scorepointers,y
     17  236d		       88		      dey
     18  236e		       b9 9c b3 	      lda	bmp_48x2_1_values,y
     19  2371				  -	      ifconst	bmp_48x2_1_index
     20  2371				  -	      sec
     21  2371				  -	      sbc	bmp_48x2_1_index
     22  2371					      endif
     23  2371		       99 96 00 	      sta	scorepointers,y
     24  2374		       88		      dey
     25  2375		       10 f0		      bpl	bmp_48x2_1_pointersetup
     26  2377
     27  2377
     28  2377		       a0 04		      ldy	#(bmp_48x2_1_window-1)
     29  2379		       84 f1		      sty	aux2
     30  237b
     31  237b		       c8		      iny
     32  237c		       b1 f4		      lda	(aux5),y
     33  237e		       88		      dey
     34  237f
     35  237f		       85 06		      sta	COLUP0	;3
     36  2381		       85 07		      sta	COLUP1	;3
     37  2383		       85 2b		      sta	HMCLR	;3
     38  2385
     39  2385		       ad 58 b3 	      lda	titlescreencolor
     40  2388		       85 08		      sta	COLUPF
     41  238a
     42  238a					      ifconst	bmp_48x2_1_background
     43  238a		       ad e6 b7 	      lda	bmp_48x2_1_background
     44  238d				  -	      else
     45  238d				  -	      lda	titlescreencolor
     46  238d					      endif
     47  238d		       85 f3		      sta	aux4
     48  238f					      ifconst	bmp_48x2_1_PF1
     49  238f		       ad e4 b7 	      lda	bmp_48x2_1_PF1
     50  2392				  -	      else
     51  2392				  -	      lda	#0
     52  2392				  -	      nop
     53  2392					      endif
     54  2392		       85 0e		      sta	PF1
     55  2394
     56  2394					      ifconst	bmp_48x2_1_PF2
     57  2394		       ad e5 b7 	      lda	bmp_48x2_1_PF2
     58  2397				  -	      else
     59  2397				  -	      lda	#0
     60  2397				  -	      nop
     61  2397					      endif
     62  2397		       85 0f		      sta	PF2
     63  2399
     64  2399		       4c 46 b4 	      jmp	draw_bmp_48x2_X
     65  239c
     66  239c				   bmp_48x2_1_values
     67  239c		       e7 b7		      .word.w	(bmp_48x2_1_00+#bmp_48x2_1_height-#bmp_48x2_1_window)
     68  239e		       ed b7		      .word.w	(bmp_48x2_1_01+#bmp_48x2_1_height-#bmp_48x2_1_window)
     69  23a0		       f3 b7		      .word.w	(bmp_48x2_1_02+#bmp_48x2_1_height-#bmp_48x2_1_window)
     70  23a2		       f9 b7		      .word.w	(bmp_48x2_1_03+#bmp_48x2_1_height-#bmp_48x2_1_window)
     71  23a4		       00 b8		      .word.w	(bmp_48x2_1_04+#bmp_48x2_1_height-#bmp_48x2_1_window)
     72  23a6		       06 b8		      .word.w	(bmp_48x2_1_05+#bmp_48x2_1_height-#bmp_48x2_1_window)
     73  23a8
------- FILE titlescreen/asm/titlescreen.asm
    108  23a8					      endif		;mk_48x2_1_on
    109  23a8
    110  23a8				  -	      ifconst	mk_48x2_2_on
    111  23a8				  -	      include	"titlescreen/asm/48x2_2_kernel.asm"
    112  23a8					      endif		;mk_48x2_2_on
    113  23a8
    114  23a8				  -	      ifconst	mk_48x2_3_on
    115  23a8				  -	      include	"titlescreen/asm/48x2_3_kernel.asm"
    116  23a8					      endif		;mk_48x2_3_on
    117  23a8
    118  23a8				  -	      ifconst	mk_48x2_4_on
    119  23a8				  -	      include	"titlescreen/asm/48x2_4_kernel.asm"
    120  23a8					      endif		;mk_48x2_4_on
    121  23a8
    122  23a8				  -	      ifconst	mk_48x2_5_on
    123  23a8				  -	      include	"titlescreen/asm/48x2_5_kernel.asm"
    124  23a8					      endif		;mk_48x2_5_on
    125  23a8
    126  23a8				  -	      ifconst	mk_48x2_6_on
    127  23a8				  -	      include	"titlescreen/asm/48x2_6_kernel.asm"
    128  23a8					      endif		;mk_48x2_6_on
    129  23a8
    130  23a8				  -	      ifconst	mk_48x2_7_on
    131  23a8				  -	      include	"titlescreen/asm/48x2_7_kernel.asm"
    132  23a8					      endif		;mk_48x2_7_on
    133  23a8
    134  23a8				  -	      ifconst	mk_48x2_8_on
    135  23a8				  -	      include	"titlescreen/asm/48x2_8_kernel.asm"
    136  23a8					      endif		;mk_48x2_8_on
    137  23a8
    138  23a8					      ifconst	mk_48x1_X_on
------- FILE titlescreen/asm/48x1_X_kernel.asm LEVEL 3 PASS 3
      0  23a8					      include	"titlescreen/asm/48x1_X_kernel.asm"
      1  23a8				   draw_bmp_48x1_X
      2  23a8
      3  23a8		       a9 03		      lda	#3
      4  23aa		       85 04		      sta	NUSIZ0	;3=Player and Missile are drawn twice 32 clocks apart
      5  23ac		       85 05		      sta	NUSIZ1	;3=Player and Missile are drawn twice 32 clocks apart
      6  23ae
      7  23ae		       ba		      tsx
      8  23af		       86 f6		      stx	stack1	;save the stack pointer
      9  23b1
     10  23b1		       20 34 b3 	      jsr	position48
     11  23b4
     12  23b4		       a9 03		      lda	#3	;2
     13  23b6		       85 25		      sta	VDELP0	;3
     14  23b8		       85 26		      sta	VDELP1	;3
     15  23ba
     16  23ba		       a9 01		      lda	#1	;2
     17  23bc		       85 0a		      sta	CTRLPF	;3
     18  23be
     19  23be							;enough cycles have passed for the HMOV, so we can clear HMCLR
     20  23be		       85 2b		      sta	HMCLR
     21  23c0
     22  23c0		       85 02		      sta	WSYNC
     23  23c2
     24  23c2		       e6 9c		      inc	temp1	;5
     25  23c4		       c6 9c		      dec	temp1	;5
     26  23c6		       e6 9c		      inc	temp1	;5
     27  23c8		       c6 9c		      dec	temp1	;5
     28  23ca		       e6 9c		      inc	temp1	;5
     29  23cc		       c6 9c		      dec	temp1	;5
     30  23ce		       e6 9c		      inc	temp1	;5
     31  23d0		       c6 9c		      dec	temp1	;5
     32  23d2		       e6 9c		      inc	temp1	;5
     33  23d4		       c6 9c		      dec	temp1	;5
     34  23d6
      0  23d6					      sleep	5
      1  23d6				   .CYCLES    SET	5
      2  23d6
      3  23d6				  -	      IF	.CYCLES < 2
      4  23d6				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  23d6				  -	      ERR
      6  23d6					      ENDIF
      7  23d6
      8  23d6					      IF	.CYCLES & 1
      9  23d6					      IFNCONST	NO_ILLEGAL_OPCODES
     10  23d6		       04 00		      nop	0
     11  23d8				  -	      ELSE
     12  23d8				  -	      bit	VSYNC
     13  23d8					      ENDIF
     14  23d8				   .CYCLES    SET	.CYCLES - 3
     15  23d8					      ENDIF
     16  23d8
     17  23d8					      REPEAT	.CYCLES / 2
     18  23d8		       ea		      nop
     19  23d9					      REPEND
     36  23d9
     37  23d9		       c8		      iny
     38  23da
     39  23da		       4c 00 b4 	      jmp	pf48x1_X_loop_entry
     40  23dd
     41  23dd					      if	>. != >[.+$2a]
     42  2400		       00 00 00 00*	      align	256
     43  2400					      endif
     44  2400
     45  2400				   pf48x1_X_loop_entry
     46  2400				   pf48x1_X_loop
     47  2400		       88		      dey		;2
     48  2401		       84 f1		      sty	aux2	;3
     49  2403		       b1 96		      lda	(scorepointers+0),y	;5
     50  2405		       85 1b		      sta	GRP0	;3
     51  2407
     52  2407		       b1 98		      lda	(scorepointers+2),y	;5
     53  2409		       85 1c		      sta	GRP1	;3
     54  240b		       b1 9a		      lda	(scorepointers+4),y	;5
     55  240d		       85 1b		      sta	GRP0	;3
     56  240f
      0  240f					      sleep	2	; I could make this indirect, if we want to burn more rom
      1  240f				   .CYCLES    SET	2
      2  240f
      3  240f				  -	      IF	.CYCLES < 2
      4  240f				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  240f				  -	      ERR
      6  240f					      ENDIF
      7  240f
      8  240f				  -	      IF	.CYCLES & 1
      9  240f				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  240f				  -	      nop	0
     11  240f				  -	      ELSE
     12  240f				  -	      bit	VSYNC
     13  240f				  -	      ENDIF
     14  240f				  -.CYCLES    SET	.CYCLES - 3
     15  240f					      ENDIF
     16  240f
     17  240f					      REPEAT	.CYCLES / 2
     18  240f		       ea		      nop
     19  2410					      REPEND
     58  2410		       a5 f3		      lda	aux4	;3
     59  2412		       85 08		      sta	COLUPF	;3 this is a big fat waste...
     60  2414
     61  2414		       b3 a0		      lax	(scorepointers+10),y	;5
     62  2416		       b1 9e		      lda	(scorepointers+8),y	;5
     63  2418		       85 f7		      sta	stack2	;3
     64  241a		       b1 9c		      lda	(scorepointers+6),y	;5
     65  241c		       a4 f7		      ldy	stack2	;3
     66  241e
     67  241e		       85 1c		      sta	GRP1	;3
     68  2420		       84 1b		      sty	GRP0	;3
     69  2422		       86 1c		      stx	GRP1	;3
     70  2424		       84 1b		      sty	GRP0	;3
     71  2426
     72  2426		       a4 f1		      ldy	aux2	;3
     73  2428		       d0 d6		      bne	pf48x1_X_loop	;2/3
     74  242a
     75  242a				   pf48x1_X_codeend
     76  242a							;echo "critical code in 48x1 is ",(pf48x1_X_codeend-pf48x1_X_loop), " bytes long."
     77  242a
     78  242a		       a9 00		      lda	#0
     79  242c		       85 1b		      sta	GRP0
     80  242e		       85 1c		      sta	GRP1
     81  2430		       85 1b		      sta	GRP0
     82  2432		       85 1c		      sta	GRP1
     83  2434		       85 1f		      sta	ENABL
     84  2436		       85 1d		      sta	ENAM0
     85  2438		       85 25		      sta	VDELP0
     86  243a		       85 26		      sta	VDELP1
     87  243c		       85 0d		      sta	PF0
     88  243e		       85 0e		      sta	PF1
     89  2440		       85 0f		      sta	PF2
     90  2442
     91  2442		       a6 f6		      ldx	stack1	;restore the stack pointer
     92  2444		       9a		      txs
     93  2445		       60		      rts
------- FILE titlescreen/asm/titlescreen.asm
    140  2446					      endif		;mk_48x1_X_on
    141  2446
    142  2446					      ifconst	mk_48x2_X_on
------- FILE titlescreen/asm/48x2_X_kernel.asm LEVEL 3 PASS 3
      0  2446					      include	"titlescreen/asm/48x2_X_kernel.asm"
      1  2446				   draw_bmp_48x2_X
      2  2446
      3  2446		       a9 00		      lda	#0
      4  2448		       85 1b		      sta	GRP0
      5  244a		       85 1c		      sta	GRP1
      6  244c
      7  244c		       a9 03		      lda	#3
      8  244e		       85 04		      sta	NUSIZ0	;3=Player and Missile are drawn twice 32 clocks apart
      9  2450		       85 05		      sta	NUSIZ1	;3=Player and Missile are drawn twice 32 clocks apart
     10  2452
     11  2452		       ba		      tsx
     12  2453		       86 f6		      stx	stack1	;save the stack pointer
     13  2455
     14  2455		       20 34 b3 	      jsr	position48
     15  2458
     16  2458		       a9 03		      lda	#3	;2
     17  245a		       85 25		      sta	VDELP0	;3
     18  245c		       85 26		      sta	VDELP1	;3
     19  245e
     20  245e		       a9 01		      lda	#1	;2
     21  2460		       85 0a		      sta	CTRLPF	;3
     22  2462
     23  2462							;enough cycles have passed for the HMOV, so we can clear HMCLR
     24  2462		       85 2b		      sta	HMCLR
     25  2464		       85 02		      sta	WSYNC
     26  2466
     27  2466
     28  2466							;sleep (63)		;63
     29  2466		       e6 9c		      inc	temp1
     30  2468		       c6 9c		      dec	temp1
     31  246a		       e6 9c		      inc	temp1
     32  246c		       c6 9c		      dec	temp1
     33  246e		       e6 9c		      inc	temp1
     34  2470		       c6 9c		      dec	temp1
     35  2472		       e6 9c		      inc	temp1
     36  2474		       c6 9c		      dec	temp1
     37  2476		       e6 9c		      inc	temp1
     38  2478		       c6 9c		      dec	temp1
     39  247a		       e6 9c		      inc	temp1
     40  247c		       c6 9c		      dec	temp1
      0  247e					      sleep	3
      1  247e				   .CYCLES    SET	3
      2  247e
      3  247e				  -	      IF	.CYCLES < 2
      4  247e				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  247e				  -	      ERR
      6  247e					      ENDIF
      7  247e
      8  247e					      IF	.CYCLES & 1
      9  247e					      IFNCONST	NO_ILLEGAL_OPCODES
     10  247e		       04 00		      nop	0
     11  2480				  -	      ELSE
     12  2480				  -	      bit	VSYNC
     13  2480					      ENDIF
     14  2480				   .CYCLES    SET	.CYCLES - 3
     15  2480					      ENDIF
     16  2480
     17  2480				  -	      REPEAT	.CYCLES / 2
     18  2480				  -	      nop
     19  2480					      REPEND
     42  2480
     43  2480		       a5 f3		      lda	aux4	;3
     44  2482		       85 08		      sta	COLUPF	;3
     45  2484
     46  2484		       4c 87 b4 	      jmp	pf48x2_X_loop	;3
     47  2487
     48  2487				  -	      if	>. != >[.+$52]
     49  2487				  -	      align	256
     50  2487					      endif
     51  2487
     52  2487				   pf48x2_X_loop
     53  2487
     54  2487		       b1 96		      lda	(scorepointers+0),y	;5
     55  2489		       85 1b		      sta	GRP0	;3
     56  248b		       b1 98		      lda	(scorepointers+2),y	;5
     57  248d		       85 1c		      sta	GRP1	;3
     58  248f		       b1 9a		      lda	(scorepointers+4),y	;5
     59  2491		       85 1b		      sta	GRP0	;3
     60  2493
     61  2493		       b3 a0		      lax	(scorepointers+10),y	;5
     62  2495		       b1 9e		      lda	(scorepointers+8),y	;5
     63  2497		       85 f7		      sta	stack2	;3
     64  2499		       b1 9c		      lda	(scorepointers+6),y	;5
     65  249b		       a4 f7		      ldy	stack2	;3
     66  249d
     67  249d		       85 1c		      sta	GRP1	;3
     68  249f		       84 1b		      sty	GRP0	;3
     69  24a1		       86 1c		      stx	GRP1	;3
     70  24a3		       84 1b		      sty	GRP0	;3
     71  24a5
     72  24a5		       a4 f1		      ldy	aux2	;3
     73  24a7
     74  24a7		       b1 f4		      lda	(aux5),y	;5
     75  24a9		       85 91		      sta	missile0y	;3
     76  24ab
      0  24ab					      sleep	3
      1  24ab				   .CYCLES    SET	3
      2  24ab
      3  24ab				  -	      IF	.CYCLES < 2
      4  24ab				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  24ab				  -	      ERR
      6  24ab					      ENDIF
      7  24ab
      8  24ab					      IF	.CYCLES & 1
      9  24ab					      IFNCONST	NO_ILLEGAL_OPCODES
     10  24ab		       04 00		      nop	0
     11  24ad				  -	      ELSE
     12  24ad				  -	      bit	VSYNC
     13  24ad					      ENDIF
     14  24ad				   .CYCLES    SET	.CYCLES - 3
     15  24ad					      ENDIF
     16  24ad
     17  24ad				  -	      REPEAT	.CYCLES / 2
     18  24ad				  -	      nop
     19  24ad					      REPEND
     78  24ad
     79  24ad		       c6 f1		      dec	aux2	;5
     80  24af
     81  24af
     82  24af		       b1 96		      lda	(scorepointers+0),y	;5
     83  24b1		       85 1b		      sta	GRP0	;3
     84  24b3		       b1 98		      lda	(scorepointers+2),y	;5
     85  24b5		       85 1c		      sta	GRP1	;3
     86  24b7		       b1 9a		      lda	(scorepointers+4),y	;5
     87  24b9		       85 1b		      sta	GRP0	;3
     88  24bb
     89  24bb		       b3 a0		      lax	(scorepointers+10),y	;5
     90  24bd		       b1 9e		      lda	(scorepointers+8),y	;5
     91  24bf		       85 f7		      sta	stack2	;3
     92  24c1		       b1 9c		      lda	(scorepointers+6),y	;5
     93  24c3		       a4 f7		      ldy	stack2	;3
     94  24c5
     95  24c5		       85 1c		      sta	GRP1	;3
     96  24c7		       84 1b		      sty	GRP0	;3
     97  24c9		       86 1c		      stx	GRP1	;3
     98  24cb		       84 1b		      sty	GRP0	;3
     99  24cd
      0  24cd					      sleep	4
      1  24cd				   .CYCLES    SET	4
      2  24cd
      3  24cd				  -	      IF	.CYCLES < 2
      4  24cd				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  24cd				  -	      ERR
      6  24cd					      ENDIF
      7  24cd
      8  24cd				  -	      IF	.CYCLES & 1
      9  24cd				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  24cd				  -	      nop	0
     11  24cd				  -	      ELSE
     12  24cd				  -	      bit	VSYNC
     13  24cd				  -	      ENDIF
     14  24cd				  -.CYCLES    SET	.CYCLES - 3
     15  24cd					      ENDIF
     16  24cd
     17  24cd					      REPEAT	.CYCLES / 2
     18  24cd		       ea		      nop
     17  24cd					      REPEND
     18  24ce		       ea		      nop
     19  24cf					      REPEND
    101  24cf
    102  24cf		       a5 91		      lda	missile0y
    103  24d1		       85 07		      sta	COLUP1
    104  24d3		       85 06		      sta	COLUP0
    105  24d5
    106  24d5		       a4 f1		      ldy	aux2	;3
    107  24d7		       10 ae		      bpl	pf48x2_X_loop	;2/3
    108  24d9
    109  24d9
    110  24d9				   pf48x2_X_codeend
    111  24d9							;echo "critical code in 48x2 is ",(pf48x2_X_codeend-pf48x2_X_loop), " bytes long."
    112  24d9
    113  24d9		       a9 00		      lda	#0
    114  24db		       85 1b		      sta	GRP0
    115  24dd		       85 1c		      sta	GRP1
    116  24df		       85 1b		      sta	GRP0
    117  24e1		       85 1c		      sta	GRP1
    118  24e3		       85 25		      sta	VDELP0
    119  24e5		       85 26		      sta	VDELP1
    120  24e7		       85 0d		      sta	PF0
    121  24e9		       85 0e		      sta	PF1
    122  24eb		       85 0f		      sta	PF2
    123  24ed
    124  24ed		       a6 f6		      ldx	stack1	;restore the stack pointer
    125  24ef		       9a		      txs
    126  24f0		       60		      rts
------- FILE titlescreen/asm/titlescreen.asm
    144  24f1					      endif		;mk_48x2_X_on
    145  24f1
    146  24f1
    147  24f1					      ifconst	mk_96x2_1_on
------- FILE titlescreen/asm/96x2_1_kernel.asm LEVEL 3 PASS 3
      0  24f1					      include	"titlescreen/asm/96x2_1_kernel.asm"
      1  24f1				   draw_bmp_96x2_1
      2  24f1
      3  24f1				  -	      ifconst	bmp_96x2_1_index
      4  24f1				  -	      lda	#(bmp_96x2_1_height-1)
      5  24f1				  -	      sec
      6  24f1				  -	      sbc	bmp_96x2_1_index
      7  24f1				  -	      tay
      8  24f1				  -	      sbc	#bmp_96x2_1_window
      9  24f1				  -	      sta	temp1
     10  24f1					      else
     11  24f1		       a0 3b		      ldy	#(bmp_96x2_1_window-1)
     12  24f3		       a9 ff		      lda	#255
     13  24f5		       85 9c		      sta	temp1
     14  24f7					      endif
     15  24f7
     16  24f7		       a9 03		      lda	#3
     17  24f9		       85 04		      sta	NUSIZ0	;3=Player and Missile are drawn twice 32 clocks apart
     18  24fb		       85 05		      sta	NUSIZ1	;3=Player and Missile are drawn twice 32 clocks apart
     19  24fd		       a9 00		      lda	#0
     20  24ff
     21  24ff		       b9 0d b8 	      lda	bmp_96x2_1_colors,y	;4
     22  2502				  -	      ifconst	bmp_96x2_1_fade
     23  2502				  -	      and	bmp_96x2_1_fade
     24  2502					      endif
     25  2502		       85 06		      sta	COLUP0	;3
     26  2504		       85 07		      sta	COLUP1	;3
     27  2506		       85 2b		      sta	HMCLR	;3
     28  2508
     29  2508		       a5 82		      lda	titleframe
     30  250a		       29 01		      and	#1
     31  250c		       f0 03		      beq	jmp_pf96x2_1_frame0
     32  250e		       4c b8 b5 	      jmp	pf96x2_1_frame1
     33  2511				   jmp_pf96x2_1_frame0
     34  2511		       4c 14 b5 	      jmp	pf96x2_1_frame0
     35  2514
     36  2514				   pf96x2_1_frame0
     37  2514							;postion P0 and P1
     38  2514		       85 02		      sta	WSYNC
     39  2516		       a9 e0		      lda	#%11100000
     40  2518		       85 20		      sta	HMP0
     41  251a		       a9 10		      lda	#%00010000
     42  251c		       85 21		      sta	HMP1
     43  251e		       85 02		      sta	WSYNC
      0  2520					      sleep	28
      1  2520				   .CYCLES    SET	28
      2  2520
      3  2520				  -	      IF	.CYCLES < 2
      4  2520				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  2520				  -	      ERR
      6  2520					      ENDIF
      7  2520
      8  2520				  -	      IF	.CYCLES & 1
      9  2520				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  2520				  -	      nop	0
     11  2520				  -	      ELSE
     12  2520				  -	      bit	VSYNC
     13  2520				  -	      ENDIF
     14  2520				  -.CYCLES    SET	.CYCLES - 3
     15  2520					      ENDIF
     16  2520
     17  2520					      REPEAT	.CYCLES / 2
     18  2520		       ea		      nop
     17  2520					      REPEND
     18  2521		       ea		      nop
     17  2521					      REPEND
     18  2522		       ea		      nop
     17  2522					      REPEND
     18  2523		       ea		      nop
     17  2523					      REPEND
     18  2524		       ea		      nop
     17  2524					      REPEND
     18  2525		       ea		      nop
     17  2525					      REPEND
     18  2526		       ea		      nop
     17  2526					      REPEND
     18  2527		       ea		      nop
     17  2527					      REPEND
     18  2528		       ea		      nop
     17  2528					      REPEND
     18  2529		       ea		      nop
     17  2529					      REPEND
     18  252a		       ea		      nop
     17  252a					      REPEND
     18  252b		       ea		      nop
     17  252b					      REPEND
     18  252c		       ea		      nop
     17  252c					      REPEND
     18  252d		       ea		      nop
     19  252e					      REPEND
     45  252e		       85 10		      sta	RESP0
      0  2530					      sleep	14
      1  2530				   .CYCLES    SET	14
      2  2530
      3  2530				  -	      IF	.CYCLES < 2
      4  2530				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  2530				  -	      ERR
      6  2530					      ENDIF
      7  2530
      8  2530				  -	      IF	.CYCLES & 1
      9  2530				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  2530				  -	      nop	0
     11  2530				  -	      ELSE
     12  2530				  -	      bit	VSYNC
     13  2530				  -	      ENDIF
     14  2530				  -.CYCLES    SET	.CYCLES - 3
     15  2530					      ENDIF
     16  2530
     17  2530					      REPEAT	.CYCLES / 2
     18  2530		       ea		      nop
     17  2530					      REPEND
     18  2531		       ea		      nop
     17  2531					      REPEND
     18  2532		       ea		      nop
     17  2532					      REPEND
     18  2533		       ea		      nop
     17  2533					      REPEND
     18  2534		       ea		      nop
     17  2534					      REPEND
     18  2535		       ea		      nop
     17  2535					      REPEND
     18  2536		       ea		      nop
     19  2537					      REPEND
     47  2537		       85 11		      sta	RESP1
     48  2539		       85 02		      sta	WSYNC
     49  253b		       85 2a		      sta	HMOVE
     50  253d
     51  253d		       85 02		      sta	WSYNC
     52  253f		       85 2b		      sta	HMCLR
     53  2541		       85 02		      sta	WSYNC
     54  2543
      0  2543					      sleep	4
      1  2543				   .CYCLES    SET	4
      2  2543
      3  2543				  -	      IF	.CYCLES < 2
      4  2543				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  2543				  -	      ERR
      6  2543					      ENDIF
      7  2543
      8  2543				  -	      IF	.CYCLES & 1
      9  2543				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  2543				  -	      nop	0
     11  2543				  -	      ELSE
     12  2543				  -	      bit	VSYNC
     13  2543				  -	      ENDIF
     14  2543				  -.CYCLES    SET	.CYCLES - 3
     15  2543					      ENDIF
     16  2543
     17  2543					      REPEAT	.CYCLES / 2
     18  2543		       ea		      nop
     17  2543					      REPEND
     18  2544		       ea		      nop
     19  2545					      REPEND
     56  2545		       4c 48 b5 	      jmp	pfline_96x2_1_frame0
     57  2548							;align so our branch doesn't unexpectedly cross a page...
     58  2548				  -	      if	>. != >[.+$70]
     59  2548				  -	      align	256
     60  2548					      endif
     61  2548
     62  2548				   pfline_96x2_1_frame0
     63  2548		       a9 80		      lda	#$80	;2
     64  254a		       85 20		      sta	HMP0	;3
     65  254c		       85 21		      sta	HMP1	;3
     66  254e
     67  254e		       b9 b4 b9 	      lda	bmp_96x2_1_06,y	;4
     68  2551		       85 1c		      sta	GRP1	;3
     69  2553
     70  2553		       b9 49 b8 	      lda	bmp_96x2_1_00,y
     71  2556		       85 1b		      sta	GRP0
     72  2558		       b9 c1 b8 	      lda	bmp_96x2_1_02,y
     73  255b		       85 1b		      sta	GRP0
     74  255d		       b9 3c b9 	      lda	bmp_96x2_1_04,y
     75  2560		       85 1b		      sta	GRP0
     76  2562
      0  2562					      sleep	2
      1  2562				   .CYCLES    SET	2
      2  2562
      3  2562				  -	      IF	.CYCLES < 2
      4  2562				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  2562				  -	      ERR
      6  2562					      ENDIF
      7  2562
      8  2562				  -	      IF	.CYCLES & 1
      9  2562				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  2562				  -	      nop	0
     11  2562				  -	      ELSE
     12  2562				  -	      bit	VSYNC
     13  2562				  -	      ENDIF
     14  2562				  -.CYCLES    SET	.CYCLES - 3
     15  2562					      ENDIF
     16  2562
     17  2562					      REPEAT	.CYCLES / 2
     18  2562		       ea		      nop
     19  2563					      REPEND
     78  2563
     79  2563		       b9 3c ba 	      lda	bmp_96x2_1_08,y
     80  2566		       85 1c		      sta	GRP1
     81  2568		       b9 b4 ba 	      lda	bmp_96x2_1_10,y
     82  256b		       85 1c		      sta	GRP1
     83  256d
     84  256d		       b9 85 b8 	      lda	bmp_96x2_1_01,y
     85  2570		       85 1b		      sta	GRP0
     86  2572
      0  2572					      sleep	8
      1  2572				   .CYCLES    SET	8
      2  2572
      3  2572				  -	      IF	.CYCLES < 2
      4  2572				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  2572				  -	      ERR
      6  2572					      ENDIF
      7  2572
      8  2572				  -	      IF	.CYCLES & 1
      9  2572				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  2572				  -	      nop	0
     11  2572				  -	      ELSE
     12  2572				  -	      bit	VSYNC
     13  2572				  -	      ENDIF
     14  2572				  -.CYCLES    SET	.CYCLES - 3
     15  2572					      ENDIF
     16  2572
     17  2572					      REPEAT	.CYCLES / 2
     18  2572		       ea		      nop
     17  2572					      REPEND
     18  2573		       ea		      nop
     17  2573					      REPEND
     18  2574		       ea		      nop
     17  2574					      REPEND
     18  2575		       ea		      nop
     19  2576					      REPEND
     88  2576
     89  2576							;sta WSYNC	;=0
     90  2576		       85 2a		      sta	HMOVE	;3 - NORMAL HMOVE
     91  2578
     92  2578		       b9 0c b8 	      lda	bmp_96x2_1_colors-1,y	;4 - get the title color early and store it for later
     93  257b				  -	      ifconst	bmp_96x2_1_fade
     94  257b				  -	      and	bmp_96x2_1_fade
     95  257b					      else
      0  257b					      sleep	3
      1  257b				   .CYCLES    SET	3
      2  257b
      3  257b				  -	      IF	.CYCLES < 2
      4  257b				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  257b				  -	      ERR
      6  257b					      ENDIF
      7  257b
      8  257b					      IF	.CYCLES & 1
      9  257b					      IFNCONST	NO_ILLEGAL_OPCODES
     10  257b		       04 00		      nop	0
     11  257d				  -	      ELSE
     12  257d				  -	      bit	VSYNC
     13  257d					      ENDIF
     14  257d				   .CYCLES    SET	.CYCLES - 3
     15  257d					      ENDIF
     16  257d
     17  257d				  -	      REPEAT	.CYCLES / 2
     18  257d				  -	      nop
     19  257d					      REPEND
     97  257d					      endif
     98  257d		       aa		      tax
     99  257e
    100  257e		       a9 00		      lda	#0	;2
    101  2580		       85 20		      sta	HMP0	;3
    102  2582		       85 21		      sta	HMP1	;3
    103  2584
      0  2584					      sleep	7
      1  2584				   .CYCLES    SET	7
      2  2584
      3  2584				  -	      IF	.CYCLES < 2
      4  2584				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  2584				  -	      ERR
      6  2584					      ENDIF
      7  2584
      8  2584					      IF	.CYCLES & 1
      9  2584					      IFNCONST	NO_ILLEGAL_OPCODES
     10  2584		       04 00		      nop	0
     11  2586				  -	      ELSE
     12  2586				  -	      bit	VSYNC
     13  2586					      ENDIF
     14  2586				   .CYCLES    SET	.CYCLES - 3
     15  2586					      ENDIF
     16  2586
     17  2586					      REPEAT	.CYCLES / 2
     18  2586		       ea		      nop
     17  2586					      REPEND
     18  2587		       ea		      nop
     19  2588					      REPEND
    105  2588
    106  2588		       b9 00 ba 	      lda	bmp_96x2_1_07,y
    107  258b		       85 1c		      sta	GRP1
    108  258d
    109  258d		       b9 00 b9 	      lda	bmp_96x2_1_03,y	;5
    110  2590		       85 1b		      sta	GRP0	;3 =  8
    111  2592		       b9 78 b9 	      lda	bmp_96x2_1_05,y	;5
    112  2595		       85 1b		      sta	GRP0	;3 =  8
    113  2597
      0  2597					      sleep	2
      1  2597				   .CYCLES    SET	2
      2  2597
      3  2597				  -	      IF	.CYCLES < 2
      4  2597				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  2597				  -	      ERR
      6  2597					      ENDIF
      7  2597
      8  2597				  -	      IF	.CYCLES & 1
      9  2597				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  2597				  -	      nop	0
     11  2597				  -	      ELSE
     12  2597				  -	      bit	VSYNC
     13  2597				  -	      ENDIF
     14  2597				  -.CYCLES    SET	.CYCLES - 3
     15  2597					      ENDIF
     16  2597
     17  2597					      REPEAT	.CYCLES / 2
     18  2597		       ea		      nop
     19  2598					      REPEND
    115  2598
    116  2598		       b9 78 ba 	      lda	bmp_96x2_1_09,y	;5
    117  259b		       85 1c		      sta	GRP1	;3 =  8
    118  259d		       b9 00 bb 	      lda	bmp_96x2_1_11,y	;5
    119  25a0		       85 1c		      sta	GRP1	;3 =  8
    120  25a2
      0  25a2					      sleep	2
      1  25a2				   .CYCLES    SET	2
      2  25a2
      3  25a2				  -	      IF	.CYCLES < 2
      4  25a2				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  25a2				  -	      ERR
      6  25a2					      ENDIF
      7  25a2
      8  25a2				  -	      IF	.CYCLES & 1
      9  25a2				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  25a2				  -	      nop	0
     11  25a2				  -	      ELSE
     12  25a2				  -	      bit	VSYNC
     13  25a2				  -	      ENDIF
     14  25a2				  -.CYCLES    SET	.CYCLES - 3
     15  25a2					      ENDIF
     16  25a2
     17  25a2					      REPEAT	.CYCLES / 2
     18  25a2		       ea		      nop
     19  25a3					      REPEND
    122  25a3		       86 07		      stx	COLUP1
    123  25a5		       86 06		      stx	COLUP0
    124  25a7
    125  25a7		       85 2a		      sta	HMOVE	;3 - CYCLE 74 HMOVE
      0  25a9					      sleep	2
      1  25a9				   .CYCLES    SET	2
      2  25a9
      3  25a9				  -	      IF	.CYCLES < 2
      4  25a9				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  25a9				  -	      ERR
      6  25a9					      ENDIF
      7  25a9
      8  25a9				  -	      IF	.CYCLES & 1
      9  25a9				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  25a9				  -	      nop	0
     11  25a9				  -	      ELSE
     12  25a9				  -	      bit	VSYNC
     13  25a9				  -	      ENDIF
     14  25a9				  -.CYCLES    SET	.CYCLES - 3
     15  25a9					      ENDIF
     16  25a9
     17  25a9					      REPEAT	.CYCLES / 2
     18  25a9		       ea		      nop
     19  25aa					      REPEND
    127  25aa		       88		      dey
    128  25ab
    129  25ab		       c4 9c		      cpy	temp1	;3
    130  25ad		       d0 99		      bne	pfline_96x2_1_frame0	;2/3
    131  25af
    132  25af				   pf96x2_1_0codeend
    133  25af							;echo "critical code #1 in 96x2_1 is ",(pf96x2_1_0codeend-pfline_96x2_1_frame0), " bytes long."
    134  25af
    135  25af		       a9 00		      lda	#0
    136  25b1		       85 1b		      sta	GRP0
    137  25b3		       85 1c		      sta	GRP1
    138  25b5		       4c 6e b6 	      jmp	pfdone_96x2_1
    139  25b8
    140  25b8
    141  25b8				   pf96x2_1_frame1
    142  25b8
    143  25b8							;postion P0 and P1
    144  25b8		       85 02		      sta	WSYNC
    145  25ba		       a9 20		      lda	#%00100000
    146  25bc		       85 20		      sta	HMP0
    147  25be		       a9 00		      lda	#0
    148  25c0		       a9 f0		      lda	#%11110000
    149  25c2		       85 21		      sta	HMP1
    150  25c4		       85 02		      sta	WSYNC
      0  25c6					      sleep	32
      1  25c6				   .CYCLES    SET	32
      2  25c6
      3  25c6				  -	      IF	.CYCLES < 2
      4  25c6				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  25c6				  -	      ERR
      6  25c6					      ENDIF
      7  25c6
      8  25c6				  -	      IF	.CYCLES & 1
      9  25c6				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  25c6				  -	      nop	0
     11  25c6				  -	      ELSE
     12  25c6				  -	      bit	VSYNC
     13  25c6				  -	      ENDIF
     14  25c6				  -.CYCLES    SET	.CYCLES - 3
     15  25c6					      ENDIF
     16  25c6
     17  25c6					      REPEAT	.CYCLES / 2
     18  25c6		       ea		      nop
     17  25c6					      REPEND
     18  25c7		       ea		      nop
     17  25c7					      REPEND
     18  25c8		       ea		      nop
     17  25c8					      REPEND
     18  25c9		       ea		      nop
     17  25c9					      REPEND
     18  25ca		       ea		      nop
     17  25ca					      REPEND
     18  25cb		       ea		      nop
     17  25cb					      REPEND
     18  25cc		       ea		      nop
     17  25cc					      REPEND
     18  25cd		       ea		      nop
     17  25cd					      REPEND
     18  25ce		       ea		      nop
     17  25ce					      REPEND
     18  25cf		       ea		      nop
     17  25cf					      REPEND
     18  25d0		       ea		      nop
     17  25d0					      REPEND
     18  25d1		       ea		      nop
     17  25d1					      REPEND
     18  25d2		       ea		      nop
     17  25d2					      REPEND
     18  25d3		       ea		      nop
     17  25d3					      REPEND
     18  25d4		       ea		      nop
     17  25d4					      REPEND
     18  25d5		       ea		      nop
     19  25d6					      REPEND
    152  25d6		       85 10		      sta	RESP0
      0  25d8					      sleep	12
      1  25d8				   .CYCLES    SET	12
      2  25d8
      3  25d8				  -	      IF	.CYCLES < 2
      4  25d8				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  25d8				  -	      ERR
      6  25d8					      ENDIF
      7  25d8
      8  25d8				  -	      IF	.CYCLES & 1
      9  25d8				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  25d8				  -	      nop	0
     11  25d8				  -	      ELSE
     12  25d8				  -	      bit	VSYNC
     13  25d8				  -	      ENDIF
     14  25d8				  -.CYCLES    SET	.CYCLES - 3
     15  25d8					      ENDIF
     16  25d8
     17  25d8					      REPEAT	.CYCLES / 2
     18  25d8		       ea		      nop
     17  25d8					      REPEND
     18  25d9		       ea		      nop
     17  25d9					      REPEND
     18  25da		       ea		      nop
     17  25da					      REPEND
     18  25db		       ea		      nop
     17  25db					      REPEND
     18  25dc		       ea		      nop
     17  25dc					      REPEND
     18  25dd		       ea		      nop
     19  25de					      REPEND
    154  25de		       85 11		      sta	RESP1
    155  25e0		       85 02		      sta	WSYNC
    156  25e2		       85 2a		      sta	HMOVE
    157  25e4
    158  25e4		       85 02		      sta	WSYNC
    159  25e6		       85 2b		      sta	HMCLR
    160  25e8
    161  25e8
    162  25e8
    163  25e8		       85 02		      sta	WSYNC
      0  25ea					      sleep	3
      1  25ea				   .CYCLES    SET	3
      2  25ea
      3  25ea				  -	      IF	.CYCLES < 2
      4  25ea				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  25ea				  -	      ERR
      6  25ea					      ENDIF
      7  25ea
      8  25ea					      IF	.CYCLES & 1
      9  25ea					      IFNCONST	NO_ILLEGAL_OPCODES
     10  25ea		       04 00		      nop	0
     11  25ec				  -	      ELSE
     12  25ec				  -	      bit	VSYNC
     13  25ec					      ENDIF
     14  25ec				   .CYCLES    SET	.CYCLES - 3
     15  25ec					      ENDIF
     16  25ec
     17  25ec				  -	      REPEAT	.CYCLES / 2
     18  25ec				  -	      nop
     19  25ec					      REPEND
    165  25ec		       4c 00 b6 	      jmp	pfline_96x2_1_frame1
    166  25ef
    167  25ef							;align so our branch doesn't unexpectedly cross a page...
    168  25ef					      if	>. != >[.+$70]
    169  2600		       00 00 00 00*	      align	256
    170  2600					      endif
    171  2600
    172  2600				   pfline_96x2_1_frame1
    173  2600
    174  2600		       85 2a		      sta	HMOVE
    175  2602
    176  2602		       b9 00 ba 	      lda	bmp_96x2_1_07,y	;4
    177  2605		       85 1c		      sta	GRP1	;3
    178  2607
    179  2607		       a9 00		      lda	#$0	;2
    180  2609		       85 20		      sta	HMP0	;3
    181  260b		       85 21		      sta	HMP1	;3
    182  260d
    183  260d		       b9 85 b8 	      lda	bmp_96x2_1_01,y
    184  2610		       8d 1b 00 	      sta.w	GRP0
    185  2613		       b9 00 b9 	      lda	bmp_96x2_1_03,y
    186  2616		       85 1b		      sta	GRP0
    187  2618		       b9 78 b9 	      lda	bmp_96x2_1_05,y
    188  261b		       85 1b		      sta	GRP0
    189  261d
      0  261d					      sleep	2
      1  261d				   .CYCLES    SET	2
      2  261d
      3  261d				  -	      IF	.CYCLES < 2
      4  261d				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  261d				  -	      ERR
      6  261d					      ENDIF
      7  261d
      8  261d				  -	      IF	.CYCLES & 1
      9  261d				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  261d				  -	      nop	0
     11  261d				  -	      ELSE
     12  261d				  -	      bit	VSYNC
     13  261d				  -	      ENDIF
     14  261d				  -.CYCLES    SET	.CYCLES - 3
     15  261d					      ENDIF
     16  261d
     17  261d					      REPEAT	.CYCLES / 2
     18  261d		       ea		      nop
     19  261e					      REPEND
    191  261e
    192  261e		       b9 78 ba 	      lda	bmp_96x2_1_09,y
    193  2621		       85 1c		      sta	GRP1
    194  2623		       b9 00 bb 	      lda	bmp_96x2_1_11,y
    195  2626		       85 1c		      sta	GRP1
    196  2628
    197  2628		       b9 49 b8 	      lda	bmp_96x2_1_00,y
    198  262b		       85 1b		      sta	GRP0
    199  262d
    200  262d		       8d 2a 00 	      sta.w	HMOVE	;3 - cycle 74
    201  2630
    202  2630							;sta WSYNC	;=0 -----------------------------------------
    203  2630
    204  2630		       b9 b4 b9 	      lda	bmp_96x2_1_06,y
    205  2633		       85 1c		      sta	GRP1
    206  2635
      0  2635					      sleep	8
      1  2635				   .CYCLES    SET	8
      2  2635
      3  2635				  -	      IF	.CYCLES < 2
      4  2635				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  2635				  -	      ERR
      6  2635					      ENDIF
      7  2635
      8  2635				  -	      IF	.CYCLES & 1
      9  2635				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  2635				  -	      nop	0
     11  2635				  -	      ELSE
     12  2635				  -	      bit	VSYNC
     13  2635				  -	      ENDIF
     14  2635				  -.CYCLES    SET	.CYCLES - 3
     15  2635					      ENDIF
     16  2635
     17  2635					      REPEAT	.CYCLES / 2
     18  2635		       ea		      nop
     17  2635					      REPEND
     18  2636		       ea		      nop
     17  2636					      REPEND
     18  2637		       ea		      nop
     17  2637					      REPEND
     18  2638		       ea		      nop
     19  2639					      REPEND
    208  2639
    209  2639		       b9 0c b8 	      lda	bmp_96x2_1_colors-1,y	;get the title color early and store it for later
    210  263c		       aa		      tax		;2
    211  263d
      0  263d					      sleep	3
      1  263d				   .CYCLES    SET	3
      2  263d
      3  263d				  -	      IF	.CYCLES < 2
      4  263d				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  263d				  -	      ERR
      6  263d					      ENDIF
      7  263d
      8  263d					      IF	.CYCLES & 1
      9  263d					      IFNCONST	NO_ILLEGAL_OPCODES
     10  263d		       04 00		      nop	0
     11  263f				  -	      ELSE
     12  263f				  -	      bit	VSYNC
     13  263f					      ENDIF
     14  263f				   .CYCLES    SET	.CYCLES - 3
     15  263f					      ENDIF
     16  263f
     17  263f				  -	      REPEAT	.CYCLES / 2
     18  263f				  -	      nop
     19  263f					      REPEND
    213  263f
    214  263f		       a9 80		      lda	#$80	;2
    215  2641		       85 20		      sta	HMP0	;3
    216  2643		       85 21		      sta	HMP1	;3
    217  2645
    218  2645
    219  2645		       b9 c1 b8 	      lda	bmp_96x2_1_02,y	;5
    220  2648		       85 1b		      sta	GRP0	;3 =  8
    221  264a
    222  264a		       b9 3c b9 	      lda	bmp_96x2_1_04,y	;5
    223  264d		       85 1b		      sta	GRP0	;3 =  8
    224  264f
      0  264f					      sleep	2
      1  264f				   .CYCLES    SET	2
      2  264f
      3  264f				  -	      IF	.CYCLES < 2
      4  264f				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  264f				  -	      ERR
      6  264f					      ENDIF
      7  264f
      8  264f				  -	      IF	.CYCLES & 1
      9  264f				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  264f				  -	      nop	0
     11  264f				  -	      ELSE
     12  264f				  -	      bit	VSYNC
     13  264f				  -	      ENDIF
     14  264f				  -.CYCLES    SET	.CYCLES - 3
     15  264f					      ENDIF
     16  264f
     17  264f					      REPEAT	.CYCLES / 2
     18  264f		       ea		      nop
     19  2650					      REPEND
    226  2650
    227  2650		       b9 3c ba 	      lda	bmp_96x2_1_08,y	;5
    228  2653		       85 1c		      sta	GRP1	;3 =  8
    229  2655
    230  2655		       b9 b4 ba 	      lda	bmp_96x2_1_10,y	;5
    231  2658		       85 1c		      sta	GRP1	;3 =  8
    232  265a
      0  265a					      sleep	4
      1  265a				   .CYCLES    SET	4
      2  265a
      3  265a				  -	      IF	.CYCLES < 2
      4  265a				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  265a				  -	      ERR
      6  265a					      ENDIF
      7  265a
      8  265a				  -	      IF	.CYCLES & 1
      9  265a				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  265a				  -	      nop	0
     11  265a				  -	      ELSE
     12  265a				  -	      bit	VSYNC
     13  265a				  -	      ENDIF
     14  265a				  -.CYCLES    SET	.CYCLES - 3
     15  265a					      ENDIF
     16  265a
     17  265a					      REPEAT	.CYCLES / 2
     18  265a		       ea		      nop
     17  265a					      REPEND
     18  265b		       ea		      nop
     19  265c					      REPEND
    234  265c
    235  265c		       88		      dey
    236  265d
    237  265d		       8a		      txa
    238  265e				  -	      ifconst	bmp_96x2_1_fade
    239  265e				  -	      and	bmp_96x2_1_fade
    240  265e					      else
      0  265e					      sleep	3
      1  265e				   .CYCLES    SET	3
      2  265e
      3  265e				  -	      IF	.CYCLES < 2
      4  265e				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  265e				  -	      ERR
      6  265e					      ENDIF
      7  265e
      8  265e					      IF	.CYCLES & 1
      9  265e					      IFNCONST	NO_ILLEGAL_OPCODES
     10  265e		       04 00		      nop	0
     11  2660				  -	      ELSE
     12  2660				  -	      bit	VSYNC
     13  2660					      ENDIF
     14  2660				   .CYCLES    SET	.CYCLES - 3
     15  2660					      ENDIF
     16  2660
     17  2660				  -	      REPEAT	.CYCLES / 2
     18  2660				  -	      nop
     19  2660					      REPEND
    242  2660					      endif
    243  2660		       85 07		      sta	COLUP1	;3
    244  2662		       85 06		      sta	COLUP0	;3
    245  2664
    246  2664		       c4 9c		      cpy	temp1	;2
    247  2666		       d0 98		      bne	pfline_96x2_1_frame1	;2/3
    248  2668
    249  2668				   pf96x2_1_1codeend
    250  2668							;echo "critical code #2 in 96x2_1 is ",(pf96x2_1_1codeend-pfline_96x2_1_frame1), " bytes long."
    251  2668
    252  2668		       a9 00		      lda	#0
    253  266a		       85 1b		      sta	GRP0
    254  266c		       85 1c		      sta	GRP1
    255  266e
    256  266e				   pfdone_96x2_1
    257  266e		       85 02		      sta	WSYNC	; debug
    258  2670
    259  2670		       60		      rts
------- FILE titlescreen/asm/titlescreen.asm
    149  2671					      endif		;mk_96x2_1_on
    150  2671
    151  2671				  -	      ifconst	mk_96x2_2_on
    152  2671				  -	      include	"titlescreen/asm/96x2_2_kernel.asm"
    153  2671					      endif		;mk_96x2_2_on
    154  2671
    155  2671				  -	      ifconst	mk_96x2_3_on
    156  2671				  -	      include	"titlescreen/asm/96x2_3_kernel.asm"
    157  2671					      endif		;mk_96x2_3_on
    158  2671
    159  2671				  -	      ifconst	mk_96x2_4_on
    160  2671				  -	      include	"titlescreen/asm/96x2_4_kernel.asm"
    161  2671					      endif		;mk_96x2_4_on
    162  2671
    163  2671				  -	      ifconst	mk_96x2_5_on
    164  2671				  -	      include	"titlescreen/asm/96x2_5_kernel.asm"
    165  2671					      endif		;mk_96x2_5_on
    166  2671
    167  2671				  -	      ifconst	mk_96x2_6_on
    168  2671				  -	      include	"titlescreen/asm/96x2_6_kernel.asm"
    169  2671					      endif		;mk_96x2_6_on
    170  2671
    171  2671				  -	      ifconst	mk_96x2_7_on
    172  2671				  -	      include	"titlescreen/asm/96x2_7_kernel.asm"
    173  2671					      endif		;mk_96x2_7_on
    174  2671
    175  2671				  -	      ifconst	mk_96x2_8_on
    176  2671				  -	      include	"titlescreen/asm/96x2_8_kernel.asm"
    177  2671					      endif		;mk_96x2_8_on
    178  2671
    179  2671					      ifconst	mk_score_on
------- FILE titlescreen/asm/score_kernel.asm LEVEL 3 PASS 3
      0  2671					      include	"titlescreen/asm/score_kernel.asm"
      1  2671							; The batari Basic score kernel
      2  2671							; This minikernel is not under the same license as the rest of the
      3  2671							; titlescreen code. Refer to the bB license before you use this in
      4  2671							; a non-bB program.
      5  2671
      6  2671				   draw_score_display
      7  2671
      8  2671		       a7 93		      lax	score+0
      9  2673		       20 43 b7 	      jsr	miniscorepointerset
     10  2676		       84 9e		      sty	scorepointers+8
     11  2678		       86 96		      stx	scorepointers+0
     12  267a		       a7 94		      lax	score+1
     13  267c		       20 43 b7 	      jsr	miniscorepointerset
     14  267f		       84 9a		      sty	scorepointers+4
     15  2681		       86 9c		      stx	scorepointers+6
     16  2683		       a7 95		      lax	score+2
     17  2685		       20 43 b7 	      jsr	miniscorepointerset
     18  2688		       84 a0		      sty	scorepointers+10
     19  268a		       86 98		      stx	scorepointers+2
     20  268c
     21  268c		       85 2b		      sta	HMCLR
     22  268e		       ba		      tsx
     23  268f		       86 f6		      stx	stack1
     24  2691							;ldx #$20
     25  2691		       a2 60		      ldx	#$60
     26  2693		       86 20		      stx	HMP0
     27  2695
     28  2695		       a2 00		      ldx	#0
     29  2697		       85 02		      sta	WSYNC	;   0
     30  2699		       86 1b		      STx	GRP0	; 3 3
     31  269b		       86 1c		      STx	GRP1	; 3 6 seems to be needed because of vdel
     32  269d
      0  269d					      sleep	7	; 7 13
      1  269d				   .CYCLES    SET	7
      2  269d
      3  269d				  -	      IF	.CYCLES < 2
      4  269d				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  269d				  -	      ERR
      6  269d					      ENDIF
      7  269d
      8  269d					      IF	.CYCLES & 1
      9  269d					      IFNCONST	NO_ILLEGAL_OPCODES
     10  269d		       04 00		      nop	0
     11  269f				  -	      ELSE
     12  269f				  -	      bit	VSYNC
     13  269f					      ENDIF
     14  269f				   .CYCLES    SET	.CYCLES - 3
     15  269f					      ENDIF
     16  269f
     17  269f					      REPEAT	.CYCLES / 2
     18  269f		       ea		      nop
     17  269f					      REPEND
     18  26a0		       ea		      nop
     19  26a1					      REPEND
     34  26a1
     35  26a1		       a9 bb		      lda	#>miniscoretable	; 2 15
     36  26a3		       95 97		      sta	scorepointers+1,x	; 4 19
     37  26a5		       95 99		      sta	scorepointers+3,x	; 4 23
     38  26a7		       95 9b		      sta	scorepointers+5,x	; 4 27
     39  26a9		       95 9d		      sta	scorepointers+7,x	; 4 31
     40  26ab		       95 9f		      sta	scorepointers+9,x	; 4 35
     41  26ad		       95 a1		      sta	scorepointers+11,x	; 4 39
     42  26af
     43  26af		       a0 07		      LDY	#7	; 2 41
     44  26b1		       85 10		      STA	RESP0	; 3 44
     45  26b3		       85 11		      STA	RESP1	; 3 47
     46  26b5
     47  26b5		       a9 03		      LDA	#$03	; 2 49
     48  26b7		       85 04		      STA	NUSIZ0	; 3 52
     49  26b9		       95 05		      STA	NUSIZ1,x	; 4 56
     50  26bb		       85 25		      STA	VDELP0	; 3 59
     51  26bd		       85 26		      STA	VDELP1	; 3 62
     52  26bf							;LDA #$30		; 2 64
     53  26bf		       a9 70		      LDA	#$70	; 2 64
     54  26c1		       85 21		      STA	HMP1	; 3 67
     55  26c3		       a5 a3		      LDA	scorecolor	; 3 70
     56  26c5		       85 2a		      STA	HMOVE	; cycle 73 ?
     57  26c7				  -	      ifconst	score_kernel_fade
     58  26c7				  -	      and	score_kernel_fade
     59  26c7					      endif
     60  26c7
     61  26c7		       85 06		      STA	COLUP0
     62  26c9		       85 07		      STA	COLUP1
     63  26cb				  -	      ifconst	scorefade
     64  26cb				  -	      STA	stack2	; scorefade
     65  26cb					      endif
     66  26cb		       b1 96		      lda	(scorepointers),y
     67  26cd		       85 1b		      sta	GRP0
     68  26cf		       b1 9e		      lda	(scorepointers+8),y
     69  26d1		       85 02		      sta	WSYNC
      0  26d3					      sleep	2
      1  26d3				   .CYCLES    SET	2
      2  26d3
      3  26d3				  -	      IF	.CYCLES < 2
      4  26d3				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  26d3				  -	      ERR
      6  26d3					      ENDIF
      7  26d3
      8  26d3				  -	      IF	.CYCLES & 1
      9  26d3				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  26d3				  -	      nop	0
     11  26d3				  -	      ELSE
     12  26d3				  -	      bit	VSYNC
     13  26d3				  -	      ENDIF
     14  26d3				  -.CYCLES    SET	.CYCLES - 3
     15  26d3					      ENDIF
     16  26d3
     17  26d3					      REPEAT	.CYCLES / 2
     18  26d3		       ea		      nop
     19  26d4					      REPEND
     71  26d4		       4c 0b b7 	      jmp	beginscoreloop
     72  26d7
     73  26d7					      if	((<*)>$28)
     74  2700		       00 00 00 00*	      align	256	; kludge that potentially wastes space!  should be fixed!
     75  2700					      endif
     76  2700
     77  2700				   scoreloop2
     78  2700				  -	      ifconst	scorefade
     79  2700				  -	      lda	stack2
     80  2700				  -	      sta	COLUP0
     81  2700				  -	      sta	COLUP1
     82  2700					      else
      0  2700					      sleep	9
      1  2700				   .CYCLES    SET	9
      2  2700
      3  2700				  -	      IF	.CYCLES < 2
      4  2700				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  2700				  -	      ERR
      6  2700					      ENDIF
      7  2700
      8  2700					      IF	.CYCLES & 1
      9  2700					      IFNCONST	NO_ILLEGAL_OPCODES
     10  2700		       04 00		      nop	0
     11  2702				  -	      ELSE
     12  2702				  -	      bit	VSYNC
     13  2702					      ENDIF
     14  2702				   .CYCLES    SET	.CYCLES - 3
     15  2702					      ENDIF
     16  2702
     17  2702					      REPEAT	.CYCLES / 2
     18  2702		       ea		      nop
     17  2702					      REPEND
     18  2703		       ea		      nop
     17  2703					      REPEND
     18  2704		       ea		      nop
     19  2705					      REPEND
     84  2705					      endif
     85  2705		       b1 96		      lda	(scorepointers),y	;+5  68  204
     86  2707		       85 1b		      sta	GRP0	;+3  71  213	   D1	  --	  --	 --
     87  2709		       b1 9e		      lda	(scorepointers+$8),y	;+5   5   15
     88  270b							; cycle 0
     89  270b				   beginscoreloop
     90  270b		       85 1c		      sta	GRP1	;+3   8   24	   D1	  D1	  D2	 --
     91  270d		       b1 9c		      lda	(scorepointers+$6),y	;+5  13   39
     92  270f		       85 1b		      sta	GRP0	;+3  16   48	   D3	  D1	  D2	 D2
     93  2711		       b3 98		      lax	(scorepointers+$2),y	;+5  29   87
     94  2713		       9a		      txs
     95  2714		       b3 9a		      lax	(scorepointers+$4),y	;+5  36  108
     96  2716
     97  2716				  -	      ifconst	scorefade
     98  2716				  -	      dec	stack2
     99  2716					      else
      0  2716					      sleep	5
      1  2716				   .CYCLES    SET	5
      2  2716
      3  2716				  -	      IF	.CYCLES < 2
      4  2716				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  2716				  -	      ERR
      6  2716					      ENDIF
      7  2716
      8  2716					      IF	.CYCLES & 1
      9  2716					      IFNCONST	NO_ILLEGAL_OPCODES
     10  2716		       04 00		      nop	0
     11  2718				  -	      ELSE
     12  2718				  -	      bit	VSYNC
     13  2718					      ENDIF
     14  2718				   .CYCLES    SET	.CYCLES - 3
     15  2718					      ENDIF
     16  2718
     17  2718					      REPEAT	.CYCLES / 2
     18  2718		       ea		      nop
     19  2719					      REPEND
    101  2719					      endif
      0  2719					      sleep	2
      1  2719				   .CYCLES    SET	2
      2  2719
      3  2719				  -	      IF	.CYCLES < 2
      4  2719				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  2719				  -	      ERR
      6  2719					      ENDIF
      7  2719
      8  2719				  -	      IF	.CYCLES & 1
      9  2719				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  2719				  -	      nop	0
     11  2719				  -	      ELSE
     12  2719				  -	      bit	VSYNC
     13  2719				  -	      ENDIF
     14  2719				  -.CYCLES    SET	.CYCLES - 3
     15  2719					      ENDIF
     16  2719
     17  2719					      REPEAT	.CYCLES / 2
     18  2719		       ea		      nop
     19  271a					      REPEND
    103  271a
    104  271a		       b1 a0		      lda	(scorepointers+$A),y	;+5  21   63 DIGIT 6
    105  271c		       86 1c		      stx	GRP1	;+3  44  132	   D3	  D3	  D4	 D2!
    106  271e		       ba		      tsx
    107  271f		       86 1b		      stx	GRP0	;+3  47  141	   D5	  D3!	  D4	 D4
    108  2721		       85 1c		      sta	GRP1	;+3  50  150	   D5	  D5	  D6	 D4!
    109  2723
    110  2723		       84 1b		      sty	GRP0	;+3  53  159	   D4*	  D5!	  D6	 D6
    111  2725		       88		      dey
    112  2726		       10 d8		      bpl	scoreloop2	;+2  60  180
    113  2728				   scoreloop2end
    114  2728
    115  2728							;echo "critical size: ",(scoreloop2end-scoreloop2)
    116  2728
    117  2728
    118  2728		       a6 f6		      ldx	stack1
    119  272a		       9a		      txs
    120  272b
    121  272b		       a9 00		      LDA	#0
    122  272d		       85 0e		      sta	PF1
    123  272f		       85 1b		      STA	GRP0
    124  2731		       85 1c		      STA	GRP1
    125  2733		       85 25		      STA	VDELP0
    126  2735		       85 26		      STA	VDELP1
    127  2737		       85 04		      STA	NUSIZ0
    128  2739		       85 05		      STA	NUSIZ1
    129  273b
    130  273b							; clear out the score pointers in case they're stolen DPC variables...
    131  273b		       a2 0b		      ldx	#11
    132  273d				   clearscoreploop
    133  273d		       95 96		      sta	scorepointers,x
    134  273f		       ca		      dex
    135  2740		       10 fb		      bpl	clearscoreploop
    136  2742
    137  2742
    138  2742							;;ldy temp3
    139  2742							;ldy scorepointers+8
    140  2742							;sty scorepointers+3
    141  2742
    142  2742							;;ldy temp5
    143  2742							;ldy scorepointers+10
    144  2742							;sty scorepointers+5
    145  2742		       60		      rts
    146  2743
    147  2743				   miniscorepointerset
    148  2743		       29 0f		      and	#$0F
    149  2745		       0a		      asl
    150  2746		       0a		      asl
    151  2747		       0a		      asl
    152  2748		       69 3d		      adc	#<miniscoretable
    153  274a		       a8		      tay
    154  274b		       8a		      txa
    155  274c		       29 f0		      and	#$F0
    156  274e		       4a		      lsr
    157  274f		       69 3d		      adc	#<miniscoretable
    158  2751		       aa		      tax
    159  2752		       60		      rts
    160  2753
------- FILE titlescreen/asm/titlescreen.asm
    181  2753					      endif		;mk_score_on
    182  2753
    183  2753					      ifconst	mk_gameselect_on
------- FILE titlescreen/asm/gameselect_kernel.asm LEVEL 3 PASS 3
      0  2753					      include	"titlescreen/asm/gameselect_kernel.asm"
      1  2753
      2  2753				   draw_gameselect_display
      3  2753		       a9 00		      lda	#0
      4  2755		       85 1b		      sta	GRP0
      5  2757		       85 1c		      sta	GRP1
      6  2759
      7  2759		       a0 04		      ldy	#4
      8  275b		       84 f1		      sty	aux2
      9  275d
     10  275d		       ad 8d bb 	      lda	bmp_gameselect_color
     11  2760		       85 06		      sta	COLUP0
     12  2762		       85 07		      sta	COLUP1
     13  2764
     14  2764							;change gamenumber to a BCD number and stick it in temp5
     15  2764		       a5 a6		      lda	gamenumber
     16  2766		       85 9e		      sta	temp3
     17  2768		       a9 00		      lda	#0
     18  276a		       85 9f		      sta	temp4
     19  276c		       a2 08		      ldx	#8
     20  276e		       18		      clc
     21  276f		       f8		      sed
     22  2770				   converttobcd
     23  2770		       06 9e		      asl	temp3
     24  2772		       a5 9f		      lda	temp4
     25  2774		       65 9f		      adc	temp4
     26  2776		       85 9f		      sta	temp4
     27  2778		       ca		      dex
     28  2779		       d0 f5		      bne	converttobcd
     29  277b		       d8		      cld
     30  277c
     31  277c		       a5 9f		      lda	temp4
     32  277e		       29 0f		      and	#$0f
     33  2780		       85 9e		      sta	temp3
     34  2782		       0a		      asl
     35  2783		       0a		      asl
     36  2784		       18		      clc
     37  2785		       65 9e		      adc	temp3	; *5
     38  2787		       18		      clc
     39  2788		       69 a2		      adc	#<(font_gameselect_img)
     40  278a		       85 a0		      sta	scorepointers+10
     41  278c
     42  278c		       a5 9f		      lda	temp4
     43  278e		       29 f0		      and	#$f0
     44  2790		       4a		      lsr
     45  2791		       4a		      lsr
     46  2792		       85 9e		      sta	temp3
     47  2794		       4a		      lsr
     48  2795		       4a		      lsr
     49  2796		       18		      clc
     50  2797		       65 9e		      adc	temp3	; *5
     51  2799		       18		      clc
     52  279a		       69 a2		      adc	#<(font_gameselect_img)
     53  279c		       85 9e		      sta	scorepointers+8
     54  279e
     55  279e
     56  279e							;setup score pointers to point at my bitmap slices instead
     57  279e		       a9 8e		      lda	#<(bmp_gameselect_CHAR0)
     58  27a0		       85 96		      sta	scorepointers+0
     59  27a2		       a9 bb		      lda	#>(bmp_gameselect_CHAR0)
     60  27a4		       85 97		      sta	scorepointers+1
     61  27a6		       a9 93		      lda	#<(bmp_gameselect_CHAR1)
     62  27a8		       85 98		      sta	scorepointers+2
     63  27aa		       a9 bb		      lda	#>(bmp_gameselect_CHAR1)
     64  27ac		       85 99		      sta	scorepointers+3
     65  27ae		       a9 98		      lda	#<(bmp_gameselect_CHAR2)
     66  27b0		       85 9a		      sta	scorepointers+4
     67  27b2		       a9 bb		      lda	#>(bmp_gameselect_CHAR2)
     68  27b4		       85 9b		      sta	scorepointers+5
     69  27b6		       a9 9d		      lda	#<(bmp_gameselect_CHAR3)
     70  27b8		       85 9c		      sta	scorepointers+6
     71  27ba		       a9 bb		      lda	#>(bmp_gameselect_CHAR3)
     72  27bc		       85 9d		      sta	scorepointers+7
     73  27be
     74  27be		       a9 bb		      lda	#>(font_gameselect_img)
     75  27c0		       85 9f		      sta	scorepointers+9
     76  27c2
     77  27c2		       a9 bb		      lda	#>(font_gameselect_img)
     78  27c4		       85 a1		      sta	scorepointers+11
     79  27c6
     80  27c6		       4c a8 b3 	      jmp	draw_bmp_48x1_X
------- FILE titlescreen/asm/titlescreen.asm
    185  27c9					      endif		;mk_gameselect_on
    186  27c9
    187  27c9				   PFWAIT
    188  27c9		       ad 84 02 	      lda	INTIM
    189  27cc		       d0 fb		      bne	PFWAIT
    190  27ce		       85 02		      sta	WSYNC
    191  27d0
    192  27d0				   OVERSCAN
    193  27d0					      ifnconst	overscan_time
    194  27d0		       a9 a2		      lda	#34+128
    195  27d2				  -	      else
    196  27d2				  -	      lda	#overscan_time+128-5
    197  27d2					      endif
    198  27d2		       8d 96 02 	      sta	TIM64T
    199  27d5
    200  27d5							;fix height variables we borrowed, so DPC doesn't crash on drawscreen...
    201  27d5				  -	      ifconst	player9height
    202  27d5				  -	      ldy	#8
    203  27d5				  -	      lda	#0
    204  27d5				  -	      sta	player0height
    205  27d5				  -.playerheightfixloop
    206  27d5				  -	      sta	player1height,y
    207  27d5				  -	      ifconst	_NUSIZ1
    208  27d5				  -	      sta	_NUSIZ1,y
    209  27d5				  -	      endif
    210  27d5				  -	      dey
    211  27d5				  -	      bpl	.playerheightfixloop
    212  27d5					      endif
    213  27d5
    214  27d5		       a9 c2		      lda	#%11000010
    215  27d7		       85 02		      sta	WSYNC
    216  27d9		       85 01		      sta	VBLANK
      0  27db					      RETURN
      1  27db				  -	      ifnconst	bankswitch
      2  27db				  -	      rts
      3  27db					      else
      4  27db		       4c da ff 	      jmp	BS_return
      5  27de					      endif
    218  27de
    219  27de				  -	      ifconst	mk_48x1_1_on
    220  27de				  -	      include	"titlescreen/48x1_1_image.asm"
    221  27de					      endif
    222  27de				  -	      ifconst	mk_48x1_2_on
    223  27de				  -	      include	"titlescreen/48x1_2_image.asm"
    224  27de					      endif
    225  27de				  -	      ifconst	mk_48x1_3_on
    226  27de				  -	      include	"titlescreen/48x1_3_image.asm"
    227  27de					      endif
    228  27de				  -	      ifconst	mk_48x1_4_on
    229  27de				  -	      include	"titlescreen/48x1_4_image.asm"
    230  27de					      endif
    231  27de				  -	      ifconst	mk_48x1_5_on
    232  27de				  -	      include	"titlescreen/48x1_5_image.asm"
    233  27de					      endif
    234  27de				  -	      ifconst	mk_48x1_6_on
    235  27de				  -	      include	"titlescreen/48x1_6_image.asm"
    236  27de					      endif
    237  27de				  -	      ifconst	mk_48x1_7_on
    238  27de				  -	      include	"titlescreen/48x1_7_image.asm"
    239  27de					      endif
    240  27de				  -	      ifconst	mk_48x1_8_on
    241  27de				  -	      include	"titlescreen/48x1_8_image.asm"
    242  27de					      endif
    243  27de
    244  27de
    245  27de					      ifconst	mk_48x2_1_on
------- FILE titlescreen/48x2_1_image.asm LEVEL 3 PASS 3
      0  27de					      include	"titlescreen/48x2_1_image.asm"
      1  27de
      2  27de							;*** The height of the displayed data...
      3  27de		       00 05	   bmp_48x2_1_window =	5
      4  27de
      5  27de							;*** The height of the bitmap data. This can be larger than
      6  27de							;*** the displayed data height, if you're scrolling or animating
      7  27de							;*** the data...
      8  27de		       00 05	   bmp_48x2_1_height =	5
      9  27de
     10  27de				  -	      if	>. != >[.+(bmp_48x2_1_height)]
     11  27de				  -	      align	256
     12  27de					      endif
     13  27de		       00		      BYTE.b	0	; leave this here!
     14  27df
     15  27df
     16  27df							;*** The color of each line in the bitmap, in reverse order...
     17  27df				   bmp_48x2_1_colors
     18  27df		       84		      BYTE.b	_84
     19  27e0		       88		      BYTE.b	_88
     20  27e1		       48		      BYTE.b	_48
     21  27e2		       46		      BYTE.b	_46
     22  27e3		       44		      BYTE.b	_44
     23  27e4
     24  27e4				  -	      ifnconst	bmp_48x2_1_PF1
     25  27e4				  -bmp_48x2_1_PF1
     26  27e4					      endif
     27  27e4		       00		      BYTE.b	%00000000
     28  27e5				  -	      ifnconst	bmp_48x2_1_PF2
     29  27e5				  -bmp_48x2_1_PF2
     30  27e5					      endif
     31  27e5		       00		      BYTE.b	%00000000
     32  27e6				  -	      ifnconst	bmp_48x2_1_background
     33  27e6				  -bmp_48x2_1_background
     34  27e6					      endif
     35  27e6		       c2		      BYTE.b	$c2
     36  27e7
     37  27e7				  -	      if	>. != >[.+bmp_48x2_1_height]
     38  27e7				  -	      align	256
     39  27e7					      endif
     40  27e7
     41  27e7
     42  27e7				   bmp_48x2_1_00
     43  27e7		       ee		      BYTE.b	%11101110
     44  27e8		       88		      BYTE.b	%10001000
     45  27e9		       8c		      BYTE.b	%10001100
     46  27ea		       88		      BYTE.b	%10001000
     47  27eb		       8e		      BYTE.b	%10001110
     48  27ec		       88		      BYTE.b	%10001000
     49  27ed
     50  27ed				  -	      if	>. != >[.+(bmp_48x2_1_height)]
     51  27ed				  -	      align	256
     52  27ed					      endif
     53  27ed
     54  27ed				   bmp_48x2_1_01
     55  27ed		       4e		      BYTE.b	%01001110
     56  27ee		       48		      BYTE.b	%01001000
     57  27ef		       ac		      BYTE.b	%10101100
     58  27f0		       a8		      BYTE.b	%10101000
     59  27f1		       ae		      BYTE.b	%10101110
     60  27f2		       48		      BYTE.b	%01001000
     61  27f3
     62  27f3				  -	      if	>. != >[.+(bmp_48x2_1_height)]
     63  27f3				  -	      align	256
     64  27f3					      endif
     65  27f3
     66  27f3				   bmp_48x2_1_02
     67  27f3		       e0		      BYTE.b	%11100000
     68  27f4		       80		      BYTE.b	%10000000
     69  27f5		       80		      BYTE.b	%10000000
     70  27f6		       80		      BYTE.b	%10000000
     71  27f7		       80		      BYTE.b	%10000000
     72  27f8		       80		      BYTE.b	%10000000
     73  27f9
     74  27f9				  -	      if	>. != >[.+(bmp_48x2_1_height)]
     75  27f9				  -	      align	256
     76  27f9					      endif
     77  27f9
     78  27f9				   bmp_48x2_1_03
     79  27f9		       00		      BYTE.b	%00000000
     80  27fa		       00		      BYTE.b	%00000000
     81  27fb		       00		      BYTE.b	%00000000
     82  27fc		       00		      BYTE.b	%00000000
     83  27fd		       00		      BYTE.b	%00000000
     84  27fe		       00		      BYTE.b	%00000000
     85  27ff
     86  27ff					      if	>. != >[.+(bmp_48x2_1_height)]
     87  2800		       00		      align	256
     88  2800					      endif
     89  2800
     90  2800				   bmp_48x2_1_04
     91  2800		       00		      BYTE.b	%00000000
     92  2801		       00		      BYTE.b	%00000000
     93  2802		       00		      BYTE.b	%00000000
     94  2803		       00		      BYTE.b	%00000000
     95  2804		       00		      BYTE.b	%00000000
     96  2805		       00		      BYTE.b	%00000000
     97  2806
     98  2806				  -	      if	>. != >[.+(bmp_48x2_1_height)]
     99  2806				  -	      align	256
    100  2806					      endif
    101  2806
    102  2806				   bmp_48x2_1_05
    103  2806		       00		      BYTE.b	%00000000
    104  2807		       00		      BYTE.b	%00000000
    105  2808		       00		      BYTE.b	%00000000
    106  2809		       00		      BYTE.b	%00000000
    107  280a		       00		      BYTE.b	%00000000
    108  280b		       00		      BYTE.b	%00000000
    109  280c
------- FILE titlescreen/asm/titlescreen.asm
    247  280c					      endif
    248  280c				  -	      ifconst	mk_48x2_2_on
    249  280c				  -	      include	"titlescreen/48x2_2_image.asm"
    250  280c					      endif
    251  280c				  -	      ifconst	mk_48x2_3_on
    252  280c				  -	      include	"titlescreen/48x2_3_image.asm"
    253  280c					      endif
    254  280c				  -	      ifconst	mk_48x2_4_on
    255  280c				  -	      include	"titlescreen/48x2_4_image.asm"
    256  280c					      endif
    257  280c				  -	      ifconst	mk_48x2_5_on
    258  280c				  -	      include	"titlescreen/48x2_5_image.asm"
    259  280c					      endif
    260  280c				  -	      ifconst	mk_48x2_6_on
    261  280c				  -	      include	"titlescreen/48x2_6_image.asm"
    262  280c					      endif
    263  280c				  -	      ifconst	mk_48x2_7_on
    264  280c				  -	      include	"titlescreen/48x2_7_image.asm"
    265  280c					      endif
    266  280c
    267  280c				  -	      ifconst	mk_48x2_8_on
    268  280c				  -	      include	"titlescreen/48x2_8_image.asm"
    269  280c					      endif
    270  280c
    271  280c
    272  280c					      ifconst	mk_96x2_1_on
------- FILE titlescreen/96x2_1_image.asm LEVEL 3 PASS 3
      0  280c					      include	"titlescreen/96x2_1_image.asm"
      1  280c
      2  280c							;*** The height of the displayed data...
      3  280c		       00 3c	   bmp_96x2_1_window =	60
      4  280c
      5  280c							;*** The height of the bitmap data. This can be larger than
      6  280c							;*** the displayed data height, if you're scrolling or animating
      7  280c							;*** the data...
      8  280c		       00 3c	   bmp_96x2_1_height =	60
      9  280c
     10  280c
     11  280c				  -	      if	>. != >[.+(bmp_96x2_1_height)]
     12  280c				  -	      align	256
     13  280c					      endif
     14  280c		       00		      BYTE.b	$00	; leave this here!
     15  280d
     16  280d
     17  280d							;*** The color of each line in the bitmap, in reverse order...
     18  280d				   bmp_96x2_1_colors
     19  280d		       0e		      BYTE.b	$0E
     20  280e		       0e		      BYTE.b	$0E
     21  280f		       0e		      BYTE.b	$0E
     22  2810		       0e		      BYTE.b	$0E
     23  2811		       0e		      BYTE.b	$0E
     24  2812		       0e		      BYTE.b	$0E
     25  2813		       0e		      BYTE.b	$0E
     26  2814		       0e		      BYTE.b	$0E
     27  2815		       0e		      BYTE.b	$0E
     28  2816		       0e		      BYTE.b	$0E
     29  2817		       0e		      BYTE.b	$0E
     30  2818		       0e		      BYTE.b	$0E
     31  2819		       0e		      BYTE.b	$0E
     32  281a		       0e		      BYTE.b	$0E
     33  281b		       0e		      BYTE.b	$0E
     34  281c		       0e		      BYTE.b	$0E
     35  281d		       0e		      BYTE.b	$0E
     36  281e		       0e		      BYTE.b	$0E
     37  281f		       0e		      BYTE.b	$0E
     38  2820		       0e		      BYTE.b	$0E
     39  2821		       0e		      BYTE.b	$0E
     40  2822		       0e		      BYTE.b	$0E
     41  2823		       0e		      BYTE.b	$0E
     42  2824		       0e		      BYTE.b	$0E
     43  2825		       0e		      BYTE.b	$0E
     44  2826		       0e		      BYTE.b	$0E
     45  2827		       0e		      BYTE.b	$0E
     46  2828		       0e		      BYTE.b	$0E
     47  2829		       0e		      BYTE.b	$0E
     48  282a		       0e		      BYTE.b	$0E
     49  282b		       0e		      BYTE.b	$0E
     50  282c		       0e		      BYTE.b	$0E
     51  282d		       0e		      BYTE.b	$0E
     52  282e		       0e		      BYTE.b	$0E
     53  282f		       0e		      BYTE.b	$0E
     54  2830		       0e		      BYTE.b	$0E
     55  2831		       0e		      BYTE.b	$0E
     56  2832		       82		      BYTE.b	_82
     57  2833		       82		      BYTE.b	_82
     58  2834		       84		      BYTE.b	_84
     59  2835		       84		      BYTE.b	_84
     60  2836		       88		      BYTE.b	_88
     61  2837		       8a		      BYTE.b	_8A
     62  2838		       8c		      BYTE.b	_8C
     63  2839		       8c		      BYTE.b	_8C
     64  283a		       4a		      BYTE.b	_4A
     65  283b		       4a		      BYTE.b	_4A
     66  283c		       4a		      BYTE.b	_4A
     67  283d		       48		      BYTE.b	_48
     68  283e		       48		      BYTE.b	_48
     69  283f		       48		      BYTE.b	_48
     70  2840		       46		      BYTE.b	_46
     71  2841		       46		      BYTE.b	_46
     72  2842		       46		      BYTE.b	_46
     73  2843		       44		      BYTE.b	_44
     74  2844		       44		      BYTE.b	_44
     75  2845		       44		      BYTE.b	_44
     76  2846		       42		      BYTE.b	_42
     77  2847		       42		      BYTE.b	_42
     78  2848		       42		      BYTE.b	_42
     79  2849
     80  2849
     81  2849				  -	      if	>. != >[.+(bmp_96x2_1_height)]
     82  2849				  -	      align	256
     83  2849					      endif
     84  2849
     85  2849				   bmp_96x2_1_00
     86  2849		       00		      BYTE.b	%00000000
     87  284a		       00		      BYTE.b	%00000000
     88  284b		       00		      BYTE.b	%00000000
     89  284c		       00		      BYTE.b	%00000000
     90  284d		       00		      BYTE.b	%00000000
     91  284e		       00		      BYTE.b	%00000000
     92  284f		       00		      BYTE.b	%00000000
     93  2850		       00		      BYTE.b	%00000000
     94  2851		       00		      BYTE.b	%00000000
     95  2852		       00		      BYTE.b	%00000000
     96  2853		       00		      BYTE.b	%00000000
     97  2854		       00		      BYTE.b	%00000000
     98  2855		       00		      BYTE.b	%00000000
     99  2856		       00		      BYTE.b	%00000000
    100  2857		       00		      BYTE.b	%00000000
    101  2858		       00		      BYTE.b	%00000000
    102  2859		       00		      BYTE.b	%00000000
    103  285a		       00		      BYTE.b	%00000000
    104  285b		       00		      BYTE.b	%00000000
    105  285c		       00		      BYTE.b	%00000000
    106  285d		       00		      BYTE.b	%00000000
    107  285e		       00		      BYTE.b	%00000000
    108  285f		       00		      BYTE.b	%00000000
    109  2860		       00		      BYTE.b	%00000000
    110  2861		       00		      BYTE.b	%00000000
    111  2862		       00		      BYTE.b	%00000000
    112  2863		       00		      BYTE.b	%00000000
    113  2864		       00		      BYTE.b	%00000000
    114  2865		       00		      BYTE.b	%00000000
    115  2866		       00		      BYTE.b	%00000000
    116  2867		       00		      BYTE.b	%00000000
    117  2868		       00		      BYTE.b	%00000000
    118  2869		       00		      BYTE.b	%00000000
    119  286a		       00		      BYTE.b	%00000000
    120  286b		       00		      BYTE.b	%00000000
    121  286c		       00		      BYTE.b	%00000000
    122  286d		       00		      BYTE.b	%00000000
    123  286e		       00		      BYTE.b	%00000000
    124  286f		       00		      BYTE.b	%00000000
    125  2870		       00		      BYTE.b	%00000000
    126  2871		       00		      BYTE.b	%00000000
    127  2872		       00		      BYTE.b	%00000000
    128  2873		       00		      BYTE.b	%00000000
    129  2874		       00		      BYTE.b	%00000000
    130  2875		       00		      BYTE.b	%00000000
    131  2876		       00		      BYTE.b	%00000000
    132  2877		       00		      BYTE.b	%00000000
    133  2878		       00		      BYTE.b	%00000000
    134  2879		       00		      BYTE.b	%00000000
    135  287a		       00		      BYTE.b	%00000000
    136  287b		       00		      BYTE.b	%00000000
    137  287c		       00		      BYTE.b	%00000000
    138  287d		       00		      BYTE.b	%00000000
    139  287e		       00		      BYTE.b	%00000000
    140  287f		       00		      BYTE.b	%00000000
    141  2880		       00		      BYTE.b	%00000000
    142  2881		       00		      BYTE.b	%00000000
    143  2882		       00		      BYTE.b	%00000000
    144  2883		       00		      BYTE.b	%00000000
    145  2884		       00		      BYTE.b	%00000000
    146  2885
    147  2885				  -	      if	>. != >[.+(bmp_96x2_1_height)]
    148  2885				  -	      align	256
    149  2885					      endif
    150  2885
    151  2885				   bmp_96x2_1_01
    152  2885		       0d		      BYTE.b	%00001101
    153  2886		       0d		      BYTE.b	%00001101
    154  2887		       00		      BYTE.b	%00000000
    155  2888		       00		      BYTE.b	%00000000
    156  2889		       00		      BYTE.b	%00000000
    157  288a		       00		      BYTE.b	%00000000
    158  288b		       00		      BYTE.b	%00000000
    159  288c		       01		      BYTE.b	%00000001
    160  288d		       06		      BYTE.b	%00000110
    161  288e		       0e		      BYTE.b	%00001110
    162  288f		       0f		      BYTE.b	%00001111
    163  2890		       0f		      BYTE.b	%00001111
    164  2891		       0e		      BYTE.b	%00001110
    165  2892		       06		      BYTE.b	%00000110
    166  2893		       02		      BYTE.b	%00000010
    167  2894		       01		      BYTE.b	%00000001
    168  2895		       00		      BYTE.b	%00000000
    169  2896		       00		      BYTE.b	%00000000
    170  2897		       00		      BYTE.b	%00000000
    171  2898		       00		      BYTE.b	%00000000
    172  2899		       00		      BYTE.b	%00000000
    173  289a		       00		      BYTE.b	%00000000
    174  289b		       00		      BYTE.b	%00000000
    175  289c		       00		      BYTE.b	%00000000
    176  289d		       00		      BYTE.b	%00000000
    177  289e		       00		      BYTE.b	%00000000
    178  289f		       00		      BYTE.b	%00000000
    179  28a0		       00		      BYTE.b	%00000000
    180  28a1		       00		      BYTE.b	%00000000
    181  28a2		       00		      BYTE.b	%00000000
    182  28a3		       00		      BYTE.b	%00000000
    183  28a4		       00		      BYTE.b	%00000000
    184  28a5		       00		      BYTE.b	%00000000
    185  28a6		       00		      BYTE.b	%00000000
    186  28a7		       00		      BYTE.b	%00000000
    187  28a8		       1f		      BYTE.b	%00011111
    188  28a9		       00		      BYTE.b	%00000000
    189  28aa		       00		      BYTE.b	%00000000
    190  28ab		       00		      BYTE.b	%00000000
    191  28ac		       00		      BYTE.b	%00000000
    192  28ad		       01		      BYTE.b	%00000001
    193  28ae		       01		      BYTE.b	%00000001
    194  28af		       00		      BYTE.b	%00000000
    195  28b0		       01		      BYTE.b	%00000001
    196  28b1		       00		      BYTE.b	%00000000
    197  28b2		       00		      BYTE.b	%00000000
    198  28b3		       03		      BYTE.b	%00000011
    199  28b4		       03		      BYTE.b	%00000011
    200  28b5		       0f		      BYTE.b	%00001111
    201  28b6		       0f		      BYTE.b	%00001111
    202  28b7		       3c		      BYTE.b	%00111100
    203  28b8		       3c		      BYTE.b	%00111100
    204  28b9		       3c		      BYTE.b	%00111100
    205  28ba		       3c		      BYTE.b	%00111100
    206  28bb		       3c		      BYTE.b	%00111100
    207  28bc		       0f		      BYTE.b	%00001111
    208  28bd		       0f		      BYTE.b	%00001111
    209  28be		       03		      BYTE.b	%00000011
    210  28bf		       03		      BYTE.b	%00000011
    211  28c0		       00		      BYTE.b	%00000000
    212  28c1
    213  28c1				  -	      if	>. != >[.+(bmp_96x2_1_height)]
    214  28c1				  -	      align	256
    215  28c1					      endif
    216  28c1
    217  28c1				   bmp_96x2_1_02
    218  28c1		       fe		      BYTE.b	%11111110
    219  28c2		       e0		      BYTE.b	%11100000
    220  28c3		       12		      BYTE.b	%00010010
    221  28c4		       1f		      BYTE.b	%00011111
    222  28c5		       0f		      BYTE.b	%00001111
    223  28c6		       12		      BYTE.b	%00010010
    224  28c7		       60		      BYTE.b	%01100000
    225  28c8		       80		      BYTE.b	%10000000
    226  28c9		       1f		      BYTE.b	%00011111
    227  28ca		       6f		      BYTE.b	%01101111
    228  28cb		       81		      BYTE.b	%10000001
    229  28cc		       80		      BYTE.b	%10000000
    230  28cd		       00		      BYTE.b	%00000000
    231  28ce		       00		      BYTE.b	%00000000
    232  28cf		       00		      BYTE.b	%00000000
    233  28d0		       8c		      BYTE.b	%10001100
    234  28d1		       62		      BYTE.b	%01100010
    235  28d2		       11		      BYTE.b	%00010001
    236  28d3		       0c		      BYTE.b	%00001100
    237  28d4		       02		      BYTE.b	%00000010
    238  28d5		       01		      BYTE.b	%00000001
    239  28d6		       00		      BYTE.b	%00000000
    240  28d7		       00		      BYTE.b	%00000000
    241  28d8		       00		      BYTE.b	%00000000
    242  28d9		       00		      BYTE.b	%00000000
    243  28da		       00		      BYTE.b	%00000000
    244  28db		       00		      BYTE.b	%00000000
    245  28dc		       00		      BYTE.b	%00000000
    246  28dd		       00		      BYTE.b	%00000000
    247  28de		       00		      BYTE.b	%00000000
    248  28df		       00		      BYTE.b	%00000000
    249  28e0		       00		      BYTE.b	%00000000
    250  28e1		       00		      BYTE.b	%00000000
    251  28e2		       00		      BYTE.b	%00000000
    252  28e3		       00		      BYTE.b	%00000000
    253  28e4		       ff		      BYTE.b	%11111111
    254  28e5		       00		      BYTE.b	%00000000
    255  28e6		       00		      BYTE.b	%00000000
    256  28e7		       04		      BYTE.b	%00000100
    257  28e8		       f4		      BYTE.b	%11110100
    258  28e9		       37		      BYTE.b	%00110111
    259  28ea		       94		      BYTE.b	%10010100
    260  28eb		       f4		      BYTE.b	%11110100
    261  28ec		       16		      BYTE.b	%00010110
    262  28ed		       e7		      BYTE.b	%11100111
    263  28ee		       00		      BYTE.b	%00000000
    264  28ef		       fc		      BYTE.b	%11111100
    265  28f0		       fc		      BYTE.b	%11111100
    266  28f1		       0f		      BYTE.b	%00001111
    267  28f2		       0f		      BYTE.b	%00001111
    268  28f3		       00		      BYTE.b	%00000000
    269  28f4		       00		      BYTE.b	%00000000
    270  28f5		       00		      BYTE.b	%00000000
    271  28f6		       00		      BYTE.b	%00000000
    272  28f7		       00		      BYTE.b	%00000000
    273  28f8		       0f		      BYTE.b	%00001111
    274  28f9		       0f		      BYTE.b	%00001111
    275  28fa		       fc		      BYTE.b	%11111100
    276  28fb		       fc		      BYTE.b	%11111100
    277  28fc		       00		      BYTE.b	%00000000
    278  28fd
    279  28fd					      if	>. != >[.+(bmp_96x2_1_height)]
    280  2900		       00 00 00 	      align	256
    281  2900					      endif
    282  2900
    283  2900				   bmp_96x2_1_03
    284  2900		       03		      BYTE.b	%00000011
    285  2901		       0c		      BYTE.b	%00001100
    286  2902		       0c		      BYTE.b	%00001100
    287  2903		       83		      BYTE.b	%10000011
    288  2904		       f0		      BYTE.b	%11110000
    289  2905		       00		      BYTE.b	%00000000
    290  2906		       00		      BYTE.b	%00000000
    291  2907		       00		      BYTE.b	%00000000
    292  2908		       e0		      BYTE.b	%11100000
    293  2909		       ff		      BYTE.b	%11111111
    294  290a		       ff		      BYTE.b	%11111111
    295  290b		       7e		      BYTE.b	%01111110
    296  290c		       0e		      BYTE.b	%00001110
    297  290d		       0f		      BYTE.b	%00001111
    298  290e		       1f		      BYTE.b	%00011111
    299  290f		       13		      BYTE.b	%00010011
    300  2910		       0d		      BYTE.b	%00001101
    301  2911		       8c		      BYTE.b	%10001100
    302  2912		       0c		      BYTE.b	%00001100
    303  2913		       10		      BYTE.b	%00010000
    304  2914		       f0		      BYTE.b	%11110000
    305  2915		       62		      BYTE.b	%01100010
    306  2916		       11		      BYTE.b	%00010001
    307  2917		       0c		      BYTE.b	%00001100
    308  2918		       02		      BYTE.b	%00000010
    309  2919		       01		      BYTE.b	%00000001
    310  291a		       00		      BYTE.b	%00000000
    311  291b		       00		      BYTE.b	%00000000
    312  291c		       00		      BYTE.b	%00000000
    313  291d		       00		      BYTE.b	%00000000
    314  291e		       00		      BYTE.b	%00000000
    315  291f		       00		      BYTE.b	%00000000
    316  2920		       00		      BYTE.b	%00000000
    317  2921		       00		      BYTE.b	%00000000
    318  2922		       00		      BYTE.b	%00000000
    319  2923		       ff		      BYTE.b	%11111111
    320  2924		       00		      BYTE.b	%00000000
    321  2925		       00		      BYTE.b	%00000000
    322  2926		       00		      BYTE.b	%00000000
    323  2927		       0e		      BYTE.b	%00001110
    324  2928		       93		      BYTE.b	%10010011
    325  2929		       d1		      BYTE.b	%11010001
    326  292a		       51		      BYTE.b	%01010001
    327  292b		       59		      BYTE.b	%01011001
    328  292c		       8e		      BYTE.b	%10001110
    329  292d		       00		      BYTE.b	%00000000
    330  292e		       6f		      BYTE.b	%01101111
    331  292f		       6f		      BYTE.b	%01101111
    332  2930		       0f		      BYTE.b	%00001111
    333  2931		       0f		      BYTE.b	%00001111
    334  2932		       0f		      BYTE.b	%00001111
    335  2933		       0f		      BYTE.b	%00001111
    336  2934		       0f		      BYTE.b	%00001111
    337  2935		       0f		      BYTE.b	%00001111
    338  2936		       0f		      BYTE.b	%00001111
    339  2937		       03		      BYTE.b	%00000011
    340  2938		       03		      BYTE.b	%00000011
    341  2939		       00		      BYTE.b	%00000000
    342  293a		       00		      BYTE.b	%00000000
    343  293b		       00		      BYTE.b	%00000000
    344  293c
    345  293c				  -	      if	>. != >[.+(bmp_96x2_1_height)]
    346  293c				  -	      align	256
    347  293c					      endif
    348  293c
    349  293c				   bmp_96x2_1_04
    350  293c		       80		      BYTE.b	%10000000
    351  293d		       00		      BYTE.b	%00000000
    352  293e		       03		      BYTE.b	%00000011
    353  293f		       f3		      BYTE.b	%11110011
    354  2940		       00		      BYTE.b	%00000000
    355  2941		       00		      BYTE.b	%00000000
    356  2942		       00		      BYTE.b	%00000000
    357  2943		       00		      BYTE.b	%00000000
    358  2944		       02		      BYTE.b	%00000010
    359  2945		       81		      BYTE.b	%10000001
    360  2946		       92		      BYTE.b	%10010010
    361  2947		       73		      BYTE.b	%01110011
    362  2948		       73		      BYTE.b	%01110011
    363  2949		       93		      BYTE.b	%10010011
    364  294a		       83		      BYTE.b	%10000011
    365  294b		       e0		      BYTE.b	%11100000
    366  294c		       ff		      BYTE.b	%11111111
    367  294d		       1f		      BYTE.b	%00011111
    368  294e		       0f		      BYTE.b	%00001111
    369  294f		       03		      BYTE.b	%00000011
    370  2950		       02		      BYTE.b	%00000010
    371  2951		       0f		      BYTE.b	%00001111
    372  2952		       8f		      BYTE.b	%10001111
    373  2953		       0f		      BYTE.b	%00001111
    374  2954		       0f		      BYTE.b	%00001111
    375  2955		       8f		      BYTE.b	%10001111
    376  2956		       6f		      BYTE.b	%01101111
    377  2957		       0f		      BYTE.b	%00001111
    378  2958		       1f		      BYTE.b	%00011111
    379  2959		       00		      BYTE.b	%00000000
    380  295a		       03		      BYTE.b	%00000011
    381  295b		       03		      BYTE.b	%00000011
    382  295c		       01		      BYTE.b	%00000001
    383  295d		       01		      BYTE.b	%00000001
    384  295e		       00		      BYTE.b	%00000000
    385  295f		       dd		      BYTE.b	%11011101
    386  2960		       0d		      BYTE.b	%00001101
    387  2961		       00		      BYTE.b	%00000000
    388  2962		       00		      BYTE.b	%00000000
    389  2963		       38		      BYTE.b	%00111000
    390  2964		       4d		      BYTE.b	%01001101
    391  2965		       41		      BYTE.b	%01000001
    392  2966		       40		      BYTE.b	%01000000
    393  2967		       65		      BYTE.b	%01100101
    394  2968		       38		      BYTE.b	%00111000
    395  2969		       00		      BYTE.b	%00000000
    396  296a		       03		      BYTE.b	%00000011
    397  296b		       03		      BYTE.b	%00000011
    398  296c		       03		      BYTE.b	%00000011
    399  296d		       03		      BYTE.b	%00000011
    400  296e		       ff		      BYTE.b	%11111111
    401  296f		       ff		      BYTE.b	%11111111
    402  2970		       03		      BYTE.b	%00000011
    403  2971		       03		      BYTE.b	%00000011
    404  2972		       03		      BYTE.b	%00000011
    405  2973		       cf		      BYTE.b	%11001111
    406  2974		       cf		      BYTE.b	%11001111
    407  2975		       fc		      BYTE.b	%11111100
    408  2976		       fc		      BYTE.b	%11111100
    409  2977		       00		      BYTE.b	%00000000
    410  2978
    411  2978				  -	      if	>. != >[.+(bmp_96x2_1_height)]
    412  2978				  -	      align	256
    413  2978					      endif
    414  2978
    415  2978				   bmp_96x2_1_05
    416  2978		       00		      BYTE.b	%00000000
    417  2979		       00		      BYTE.b	%00000000
    418  297a		       9e		      BYTE.b	%10011110
    419  297b		       ff		      BYTE.b	%11111111
    420  297c		       00		      BYTE.b	%00000000
    421  297d		       00		      BYTE.b	%00000000
    422  297e		       00		      BYTE.b	%00000000
    423  297f		       00		      BYTE.b	%00000000
    424  2980		       6c		      BYTE.b	%01101100
    425  2981		       91		      BYTE.b	%10010001
    426  2982		       6d		      BYTE.b	%01101101
    427  2983		       fd		      BYTE.b	%11111101
    428  2984		       fd		      BYTE.b	%11111101
    429  2985		       fc		      BYTE.b	%11111100
    430  2986		       fc		      BYTE.b	%11111100
    431  2987		       01		      BYTE.b	%00000001
    432  2988		       ff		      BYTE.b	%11111111
    433  2989		       ff		      BYTE.b	%11111111
    434  298a		       ff		      BYTE.b	%11111111
    435  298b		       ff		      BYTE.b	%11111111
    436  298c		       00		      BYTE.b	%00000000
    437  298d		       fe		      BYTE.b	%11111110
    438  298e		       fe		      BYTE.b	%11111110
    439  298f		       fe		      BYTE.b	%11111110
    440  2990		       fe		      BYTE.b	%11111110
    441  2991		       fe		      BYTE.b	%11111110
    442  2992		       fe		      BYTE.b	%11111110
    443  2993		       fe		      BYTE.b	%11111110
    444  2994		       fe		      BYTE.b	%11111110
    445  2995		       00		      BYTE.b	%00000000
    446  2996		       f0		      BYTE.b	%11110000
    447  2997		       f0		      BYTE.b	%11110000
    448  2998		       e0		      BYTE.b	%11100000
    449  2999		       e0		      BYTE.b	%11100000
    450  299a		       00		      BYTE.b	%00000000
    451  299b		       f7		      BYTE.b	%11110111
    452  299c		       f6		      BYTE.b	%11110110
    453  299d		       00		      BYTE.b	%00000000
    454  299e		       00		      BYTE.b	%00000000
    455  299f		       f3		      BYTE.b	%11110011
    456  29a0		       36		      BYTE.b	%00110110
    457  29a1		       94		      BYTE.b	%10010100
    458  29a2		       f4		      BYTE.b	%11110100
    459  29a3		       14		      BYTE.b	%00010100
    460  29a4		       e2		      BYTE.b	%11100010
    461  29a5		       00		      BYTE.b	%00000000
    462  29a6		       d8		      BYTE.b	%11011000
    463  29a7		       d8		      BYTE.b	%11011000
    464  29a8		       c0		      BYTE.b	%11000000
    465  29a9		       c0		      BYTE.b	%11000000
    466  29aa		       c0		      BYTE.b	%11000000
    467  29ab		       c3		      BYTE.b	%11000011
    468  29ac		       c3		      BYTE.b	%11000011
    469  29ad		       c3		      BYTE.b	%11000011
    470  29ae		       c3		      BYTE.b	%11000011
    471  29af		       03		      BYTE.b	%00000011
    472  29b0		       03		      BYTE.b	%00000011
    473  29b1		       03		      BYTE.b	%00000011
    474  29b2		       00		      BYTE.b	%00000000
    475  29b3		       00		      BYTE.b	%00000000
    476  29b4
    477  29b4				  -	      if	>. != >[.+(bmp_96x2_1_height)]
    478  29b4				  -	      align	256
    479  29b4					      endif
    480  29b4
    481  29b4				   bmp_96x2_1_06
    482  29b4		       00		      BYTE.b	%00000000
    483  29b5		       00		      BYTE.b	%00000000
    484  29b6		       00		      BYTE.b	%00000000
    485  29b7		       e0		      BYTE.b	%11100000
    486  29b8		       10		      BYTE.b	%00010000
    487  29b9		       0c		      BYTE.b	%00001100
    488  29ba		       02		      BYTE.b	%00000010
    489  29bb		       01		      BYTE.b	%00000001
    490  29bc		       01		      BYTE.b	%00000001
    491  29bd		       90		      BYTE.b	%10010000
    492  29be		       90		      BYTE.b	%10010000
    493  29bf		       90		      BYTE.b	%10010000
    494  29c0		       8f		      BYTE.b	%10001111
    495  29c1		       10		      BYTE.b	%00010000
    496  29c2		       6f		      BYTE.b	%01101111
    497  29c3		       9f		      BYTE.b	%10011111
    498  29c4		       ff		      BYTE.b	%11111111
    499  29c5		       fe		      BYTE.b	%11111110
    500  29c6		       fd		      BYTE.b	%11111101
    501  29c7		       e1		      BYTE.b	%11100001
    502  29c8		       00		      BYTE.b	%00000000
    503  29c9		       6d		      BYTE.b	%01101101
    504  29ca		       12		      BYTE.b	%00010010
    505  29cb		       6d		      BYTE.b	%01101101
    506  29cc		       7f		      BYTE.b	%01111111
    507  29cd		       7f		      BYTE.b	%01111111
    508  29ce		       7f		      BYTE.b	%01111111
    509  29cf		       7f		      BYTE.b	%01111111
    510  29d0		       0c		      BYTE.b	%00001100
    511  29d1		       00		      BYTE.b	%00000000
    512  29d2		       00		      BYTE.b	%00000000
    513  29d3		       00		      BYTE.b	%00000000
    514  29d4		       00		      BYTE.b	%00000000
    515  29d5		       00		      BYTE.b	%00000000
    516  29d6		       00		      BYTE.b	%00000000
    517  29d7		       7f		      BYTE.b	%01111111
    518  29d8		       00		      BYTE.b	%00000000
    519  29d9		       0e		      BYTE.b	%00001110
    520  29da		       01		      BYTE.b	%00000001
    521  29db		       81		      BYTE.b	%10000001
    522  29dc		       4f		      BYTE.b	%01001111
    523  29dd		       1b		      BYTE.b	%00011011
    524  29de		       11		      BYTE.b	%00010001
    525  29df		       11		      BYTE.b	%00010001
    526  29e0		       00		      BYTE.b	%00000000
    527  29e1		       0c		      BYTE.b	%00001100
    528  29e2		       0c		      BYTE.b	%00001100
    529  29e3		       3f		      BYTE.b	%00111111
    530  29e4		       3f		      BYTE.b	%00111111
    531  29e5		       ff		      BYTE.b	%11111111
    532  29e6		       ff		      BYTE.b	%11111111
    533  29e7		       f3		      BYTE.b	%11110011
    534  29e8		       f3		      BYTE.b	%11110011
    535  29e9		       c0		      BYTE.b	%11000000
    536  29ea		       c0		      BYTE.b	%11000000
    537  29eb		       c0		      BYTE.b	%11000000
    538  29ec		       c0		      BYTE.b	%11000000
    539  29ed		       c0		      BYTE.b	%11000000
    540  29ee		       00		      BYTE.b	%00000000
    541  29ef		       00		      BYTE.b	%00000000
    542  29f0
    543  29f0					      if	>. != >[.+(bmp_96x2_1_height)]
    544  2a00		       00 00 00 00*	      align	256
    545  2a00					      endif
    546  2a00
    547  2a00				   bmp_96x2_1_07
    548  2a00		       00		      BYTE.b	%00000000
    549  2a01		       00		      BYTE.b	%00000000
    550  2a02		       00		      BYTE.b	%00000000
    551  2a03		       00		      BYTE.b	%00000000
    552  2a04		       00		      BYTE.b	%00000000
    553  2a05		       00		      BYTE.b	%00000000
    554  2a06		       00		      BYTE.b	%00000000
    555  2a07		       80		      BYTE.b	%10000000
    556  2a08		       80		      BYTE.b	%10000000
    557  2a09		       60		      BYTE.b	%01100000
    558  2a0a		       10		      BYTE.b	%00010000
    559  2a0b		       0e		      BYTE.b	%00001110
    560  2a0c		       fe		      BYTE.b	%11111110
    561  2a0d		       1f		      BYTE.b	%00011111
    562  2a0e		       f0		      BYTE.b	%11110000
    563  2a0f		       ef		      BYTE.b	%11101111
    564  2a10		       9e		      BYTE.b	%10011110
    565  2a11		       7e		      BYTE.b	%01111110
    566  2a12		       fc		      BYTE.b	%11111100
    567  2a13		       e0		      BYTE.b	%11100000
    568  2a14		       00		      BYTE.b	%00000000
    569  2a15		       80		      BYTE.b	%10000000
    570  2a16		       00		      BYTE.b	%00000000
    571  2a17		       90		      BYTE.b	%10010000
    572  2a18		       9c		      BYTE.b	%10011100
    573  2a19		       9c		      BYTE.b	%10011100
    574  2a1a		       90		      BYTE.b	%10010000
    575  2a1b		       80		      BYTE.b	%10000000
    576  2a1c		       00		      BYTE.b	%00000000
    577  2a1d		       00		      BYTE.b	%00000000
    578  2a1e		       00		      BYTE.b	%00000000
    579  2a1f		       00		      BYTE.b	%00000000
    580  2a20		       00		      BYTE.b	%00000000
    581  2a21		       00		      BYTE.b	%00000000
    582  2a22		       00		      BYTE.b	%00000000
    583  2a23		       ff		      BYTE.b	%11111111
    584  2a24		       00		      BYTE.b	%00000000
    585  2a25		       40		      BYTE.b	%01000000
    586  2a26		       41		      BYTE.b	%01000001
    587  2a27		       79		      BYTE.b	%01111001
    588  2a28		       4c		      BYTE.b	%01001100
    589  2a29		       45		      BYTE.b	%01000101
    590  2a2a		       65		      BYTE.b	%01100101
    591  2a2b		       78		      BYTE.b	%01111000
    592  2a2c		       00		      BYTE.b	%00000000
    593  2a2d		       01		      BYTE.b	%00000001
    594  2a2e		       0d		      BYTE.b	%00001101
    595  2a2f		       0d		      BYTE.b	%00001101
    596  2a30		       01		      BYTE.b	%00000001
    597  2a31		       c1		      BYTE.b	%11000001
    598  2a32		       c1		      BYTE.b	%11000001
    599  2a33		       e1		      BYTE.b	%11100001
    600  2a34		       e1		      BYTE.b	%11100001
    601  2a35		       e1		      BYTE.b	%11100001
    602  2a36		       e1		      BYTE.b	%11100001
    603  2a37		       e1		      BYTE.b	%11100001
    604  2a38		       e1		      BYTE.b	%11100001
    605  2a39		       e1		      BYTE.b	%11100001
    606  2a3a		       00		      BYTE.b	%00000000
    607  2a3b		       00		      BYTE.b	%00000000
    608  2a3c
    609  2a3c				  -	      if	>. != >[.+(bmp_96x2_1_height)]
    610  2a3c				  -	      align	256
    611  2a3c					      endif
    612  2a3c
    613  2a3c				   bmp_96x2_1_08
    614  2a3c		       00		      BYTE.b	%00000000
    615  2a3d		       00		      BYTE.b	%00000000
    616  2a3e		       00		      BYTE.b	%00000000
    617  2a3f		       00		      BYTE.b	%00000000
    618  2a40		       00		      BYTE.b	%00000000
    619  2a41		       00		      BYTE.b	%00000000
    620  2a42		       00		      BYTE.b	%00000000
    621  2a43		       00		      BYTE.b	%00000000
    622  2a44		       00		      BYTE.b	%00000000
    623  2a45		       00		      BYTE.b	%00000000
    624  2a46		       00		      BYTE.b	%00000000
    625  2a47		       7f		      BYTE.b	%01111111
    626  2a48		       00		      BYTE.b	%00000000
    627  2a49		       ff		      BYTE.b	%11111111
    628  2a4a		       00		      BYTE.b	%00000000
    629  2a4b		       fe		      BYTE.b	%11111110
    630  2a4c		       7f		      BYTE.b	%01111111
    631  2a4d		       01		      BYTE.b	%00000001
    632  2a4e		       00		      BYTE.b	%00000000
    633  2a4f		       00		      BYTE.b	%00000000
    634  2a50		       00		      BYTE.b	%00000000
    635  2a51		       00		      BYTE.b	%00000000
    636  2a52		       00		      BYTE.b	%00000000
    637  2a53		       00		      BYTE.b	%00000000
    638  2a54		       00		      BYTE.b	%00000000
    639  2a55		       00		      BYTE.b	%00000000
    640  2a56		       00		      BYTE.b	%00000000
    641  2a57		       00		      BYTE.b	%00000000
    642  2a58		       00		      BYTE.b	%00000000
    643  2a59		       00		      BYTE.b	%00000000
    644  2a5a		       00		      BYTE.b	%00000000
    645  2a5b		       00		      BYTE.b	%00000000
    646  2a5c		       00		      BYTE.b	%00000000
    647  2a5d		       00		      BYTE.b	%00000000
    648  2a5e		       00		      BYTE.b	%00000000
    649  2a5f		       ff		      BYTE.b	%11111111
    650  2a60		       00		      BYTE.b	%00000000
    651  2a61		       00		      BYTE.b	%00000000
    652  2a62		       e3		      BYTE.b	%11100011
    653  2a63		       16		      BYTE.b	%00010110
    654  2a64		       37		      BYTE.b	%00110111
    655  2a65		       e5		      BYTE.b	%11100101
    656  2a66		       14		      BYTE.b	%00010100
    657  2a67		       e3		      BYTE.b	%11100011
    658  2a68		       00		      BYTE.b	%00000000
    659  2a69		       ff		      BYTE.b	%11111111
    660  2a6a		       ff		      BYTE.b	%11111111
    661  2a6b		       e0		      BYTE.b	%11100000
    662  2a6c		       e0		      BYTE.b	%11100000
    663  2a6d		       e0		      BYTE.b	%11100000
    664  2a6e		       e0		      BYTE.b	%11100000
    665  2a6f		       ff		      BYTE.b	%11111111
    666  2a70		       ff		      BYTE.b	%11111111
    667  2a71		       e0		      BYTE.b	%11100000
    668  2a72		       e0		      BYTE.b	%11100000
    669  2a73		       e0		      BYTE.b	%11100000
    670  2a74		       ff		      BYTE.b	%11111111
    671  2a75		       ff		      BYTE.b	%11111111
    672  2a76		       00		      BYTE.b	%00000000
    673  2a77		       00		      BYTE.b	%00000000
    674  2a78
    675  2a78				  -	      if	>. != >[.+(bmp_96x2_1_height)]
    676  2a78				  -	      align	256
    677  2a78					      endif
    678  2a78
    679  2a78				   bmp_96x2_1_09
    680  2a78		       00		      BYTE.b	%00000000
    681  2a79		       00		      BYTE.b	%00000000
    682  2a7a		       00		      BYTE.b	%00000000
    683  2a7b		       00		      BYTE.b	%00000000
    684  2a7c		       00		      BYTE.b	%00000000
    685  2a7d		       00		      BYTE.b	%00000000
    686  2a7e		       00		      BYTE.b	%00000000
    687  2a7f		       00		      BYTE.b	%00000000
    688  2a80		       7c		      BYTE.b	%01111100
    689  2a81		       7c		      BYTE.b	%01111100
    690  2a82		       7e		      BYTE.b	%01111110
    691  2a83		       ff		      BYTE.b	%11111111
    692  2a84		       0f		      BYTE.b	%00001111
    693  2a85		       e0		      BYTE.b	%11100000
    694  2a86		       0c		      BYTE.b	%00001100
    695  2a87		       0c		      BYTE.b	%00001100
    696  2a88		       82		      BYTE.b	%10000010
    697  2a89		       81		      BYTE.b	%10000001
    698  2a8a		       61		      BYTE.b	%01100001
    699  2a8b		       10		      BYTE.b	%00010000
    700  2a8c		       0d		      BYTE.b	%00001101
    701  2a8d		       0d		      BYTE.b	%00001101
    702  2a8e		       01		      BYTE.b	%00000001
    703  2a8f		       03		      BYTE.b	%00000011
    704  2a90		       03		      BYTE.b	%00000011
    705  2a91		       01		      BYTE.b	%00000001
    706  2a92		       01		      BYTE.b	%00000001
    707  2a93		       01		      BYTE.b	%00000001
    708  2a94		       01		      BYTE.b	%00000001
    709  2a95		       01		      BYTE.b	%00000001
    710  2a96		       00		      BYTE.b	%00000000
    711  2a97		       00		      BYTE.b	%00000000
    712  2a98		       00		      BYTE.b	%00000000
    713  2a99		       00		      BYTE.b	%00000000
    714  2a9a		       00		      BYTE.b	%00000000
    715  2a9b		       e0		      BYTE.b	%11100000
    716  2a9c		       00		      BYTE.b	%00000000
    717  2a9d		       00		      BYTE.b	%00000000
    718  2a9e		       80		      BYTE.b	%10000000
    719  2a9f		       c0		      BYTE.b	%11000000
    720  2aa0		       20		      BYTE.b	%00100000
    721  2aa1		       80		      BYTE.b	%10000000
    722  2aa2		       c0		      BYTE.b	%11000000
    723  2aa3		       80		      BYTE.b	%10000000
    724  2aa4		       00		      BYTE.b	%00000000
    725  2aa5		       f8		      BYTE.b	%11111000
    726  2aa6		       fb		      BYTE.b	%11111011
    727  2aa7		       03		      BYTE.b	%00000011
    728  2aa8		       00		      BYTE.b	%00000000
    729  2aa9		       00		      BYTE.b	%00000000
    730  2aaa		       00		      BYTE.b	%00000000
    731  2aab		       80		      BYTE.b	%10000000
    732  2aac		       80		      BYTE.b	%10000000
    733  2aad		       00		      BYTE.b	%00000000
    734  2aae		       00		      BYTE.b	%00000000
    735  2aaf		       00		      BYTE.b	%00000000
    736  2ab0		       f8		      BYTE.b	%11111000
    737  2ab1		       f8		      BYTE.b	%11111000
    738  2ab2		       00		      BYTE.b	%00000000
    739  2ab3		       00		      BYTE.b	%00000000
    740  2ab4
    741  2ab4				  -	      if	>. != >[.+(bmp_96x2_1_height)]
    742  2ab4				  -	      align	256
    743  2ab4					      endif
    744  2ab4
    745  2ab4				   bmp_96x2_1_10
    746  2ab4		       00		      BYTE.b	%00000000
    747  2ab5		       00		      BYTE.b	%00000000
    748  2ab6		       00		      BYTE.b	%00000000
    749  2ab7		       00		      BYTE.b	%00000000
    750  2ab8		       00		      BYTE.b	%00000000
    751  2ab9		       00		      BYTE.b	%00000000
    752  2aba		       00		      BYTE.b	%00000000
    753  2abb		       00		      BYTE.b	%00000000
    754  2abc		       00		      BYTE.b	%00000000
    755  2abd		       00		      BYTE.b	%00000000
    756  2abe		       00		      BYTE.b	%00000000
    757  2abf		       80		      BYTE.b	%10000000
    758  2ac0		       e0		      BYTE.b	%11100000
    759  2ac1		       70		      BYTE.b	%01110000
    760  2ac2		       1e		      BYTE.b	%00011110
    761  2ac3		       0e		      BYTE.b	%00001110
    762  2ac4		       0e		      BYTE.b	%00001110
    763  2ac5		       8c		      BYTE.b	%10001100
    764  2ac6		       90		      BYTE.b	%10010000
    765  2ac7		       70		      BYTE.b	%01110000
    766  2ac8		       f0		      BYTE.b	%11110000
    767  2ac9		       f0		      BYTE.b	%11110000
    768  2aca		       f0		      BYTE.b	%11110000
    769  2acb		       f0		      BYTE.b	%11110000
    770  2acc		       f0		      BYTE.b	%11110000
    771  2acd		       f0		      BYTE.b	%11110000
    772  2ace		       f0		      BYTE.b	%11110000
    773  2acf		       fc		      BYTE.b	%11111100
    774  2ad0		       fc		      BYTE.b	%11111100
    775  2ad1		       fc		      BYTE.b	%11111100
    776  2ad2		       7c		      BYTE.b	%01111100
    777  2ad3		       7c		      BYTE.b	%01111100
    778  2ad4		       7e		      BYTE.b	%01111110
    779  2ad5		       1e		      BYTE.b	%00011110
    780  2ad6		       00		      BYTE.b	%00000000
    781  2ad7		       00		      BYTE.b	%00000000
    782  2ad8		       00		      BYTE.b	%00000000
    783  2ad9		       00		      BYTE.b	%00000000
    784  2ada		       00		      BYTE.b	%00000000
    785  2adb		       00		      BYTE.b	%00000000
    786  2adc		       00		      BYTE.b	%00000000
    787  2add		       00		      BYTE.b	%00000000
    788  2ade		       00		      BYTE.b	%00000000
    789  2adf		       00		      BYTE.b	%00000000
    790  2ae0		       00		      BYTE.b	%00000000
    791  2ae1		       00		      BYTE.b	%00000000
    792  2ae2		       00		      BYTE.b	%00000000
    793  2ae3		       00		      BYTE.b	%00000000
    794  2ae4		       00		      BYTE.b	%00000000
    795  2ae5		       00		      BYTE.b	%00000000
    796  2ae6		       00		      BYTE.b	%00000000
    797  2ae7		       00		      BYTE.b	%00000000
    798  2ae8		       00		      BYTE.b	%00000000
    799  2ae9		       00		      BYTE.b	%00000000
    800  2aea		       00		      BYTE.b	%00000000
    801  2aeb		       00		      BYTE.b	%00000000
    802  2aec		       00		      BYTE.b	%00000000
    803  2aed		       00		      BYTE.b	%00000000
    804  2aee		       00		      BYTE.b	%00000000
    805  2aef		       00		      BYTE.b	%00000000
    806  2af0
    807  2af0					      if	>. != >[.+(bmp_96x2_1_height)]
    808  2b00		       00 00 00 00*	      align	256
    809  2b00					      endif
    810  2b00
    811  2b00				   bmp_96x2_1_11
    812  2b00		       00		      BYTE.b	%00000000
    813  2b01		       00		      BYTE.b	%00000000
    814  2b02		       00		      BYTE.b	%00000000
    815  2b03		       00		      BYTE.b	%00000000
    816  2b04		       00		      BYTE.b	%00000000
    817  2b05		       00		      BYTE.b	%00000000
    818  2b06		       00		      BYTE.b	%00000000
    819  2b07		       00		      BYTE.b	%00000000
    820  2b08		       00		      BYTE.b	%00000000
    821  2b09		       00		      BYTE.b	%00000000
    822  2b0a		       00		      BYTE.b	%00000000
    823  2b0b		       00		      BYTE.b	%00000000
    824  2b0c		       00		      BYTE.b	%00000000
    825  2b0d		       00		      BYTE.b	%00000000
    826  2b0e		       00		      BYTE.b	%00000000
    827  2b0f		       00		      BYTE.b	%00000000
    828  2b10		       00		      BYTE.b	%00000000
    829  2b11		       00		      BYTE.b	%00000000
    830  2b12		       00		      BYTE.b	%00000000
    831  2b13		       00		      BYTE.b	%00000000
    832  2b14		       00		      BYTE.b	%00000000
    833  2b15		       00		      BYTE.b	%00000000
    834  2b16		       00		      BYTE.b	%00000000
    835  2b17		       00		      BYTE.b	%00000000
    836  2b18		       00		      BYTE.b	%00000000
    837  2b19		       00		      BYTE.b	%00000000
    838  2b1a		       00		      BYTE.b	%00000000
    839  2b1b		       00		      BYTE.b	%00000000
    840  2b1c		       00		      BYTE.b	%00000000
    841  2b1d		       00		      BYTE.b	%00000000
    842  2b1e		       00		      BYTE.b	%00000000
    843  2b1f		       00		      BYTE.b	%00000000
    844  2b20		       00		      BYTE.b	%00000000
    845  2b21		       00		      BYTE.b	%00000000
    846  2b22		       00		      BYTE.b	%00000000
    847  2b23		       00		      BYTE.b	%00000000
    848  2b24		       00		      BYTE.b	%00000000
    849  2b25		       00		      BYTE.b	%00000000
    850  2b26		       00		      BYTE.b	%00000000
    851  2b27		       00		      BYTE.b	%00000000
    852  2b28		       00		      BYTE.b	%00000000
    853  2b29		       00		      BYTE.b	%00000000
    854  2b2a		       00		      BYTE.b	%00000000
    855  2b2b		       00		      BYTE.b	%00000000
    856  2b2c		       00		      BYTE.b	%00000000
    857  2b2d		       00		      BYTE.b	%00000000
    858  2b2e		       00		      BYTE.b	%00000000
    859  2b2f		       00		      BYTE.b	%00000000
    860  2b30		       00		      BYTE.b	%00000000
    861  2b31		       00		      BYTE.b	%00000000
    862  2b32		       00		      BYTE.b	%00000000
    863  2b33		       00		      BYTE.b	%00000000
    864  2b34		       00		      BYTE.b	%00000000
    865  2b35		       00		      BYTE.b	%00000000
    866  2b36		       00		      BYTE.b	%00000000
    867  2b37		       00		      BYTE.b	%00000000
    868  2b38		       00		      BYTE.b	%00000000
    869  2b39		       00		      BYTE.b	%00000000
    870  2b3a		       00		      BYTE.b	%00000000
    871  2b3b		       00		      BYTE.b	%00000000
    872  2b3c
------- FILE titlescreen/asm/titlescreen.asm
    274  2b3c					      endif
    275  2b3c				  -	      ifconst	mk_96x2_2_on
    276  2b3c				  -	      include	"titlescreen/96x2_2_image.asm"
    277  2b3c					      endif
    278  2b3c				  -	      ifconst	mk_96x2_3_on
    279  2b3c				  -	      include	"titlescreen/96x2_3_image.asm"
    280  2b3c					      endif
    281  2b3c				  -	      ifconst	mk_96x2_4_on
    282  2b3c				  -	      include	"titlescreen/96x2_4_image.asm"
    283  2b3c					      endif
    284  2b3c				  -	      ifconst	mk_96x2_5_on
    285  2b3c				  -	      include	"titlescreen/96x2_5_image.asm"
    286  2b3c					      endif
    287  2b3c				  -	      ifconst	mk_96x2_6_on
    288  2b3c				  -	      include	"titlescreen/96x2_6_image.asm"
    289  2b3c					      endif
    290  2b3c				  -	      ifconst	mk_96x2_7_on
    291  2b3c				  -	      include	"titlescreen/96x2_7_image.asm"
    292  2b3c					      endif
    293  2b3c				  -	      ifconst	mk_96x2_8_on
    294  2b3c				  -	      include	"titlescreen/96x2_8_image.asm"
    295  2b3c					      endif
    296  2b3c
    297  2b3c				  -	      ifconst	mk_player_on
    298  2b3c				  -	      include	"titlescreen/player_image.asm"
    299  2b3c					      endif
    300  2b3c
    301  2b3c					      ifconst	mk_score_on
------- FILE titlescreen/score_image.asm LEVEL 3 PASS 3
      0  2b3c					      include	"titlescreen/score_image.asm"
      1  2b3c							; feel free to modify the score graphics - just keep each digit 8 high
      2  2b3c							; if you're looking to want to modify any one font, pick on the
      3  2b3c
      4  2b3c				  -	      ifnconst	scorecolor
      5  2b3c				  -scorecolor
      6  2b3c					      endif
      7  2b3c							; ** change this value for a different scorecolor under DPC+
      8  2b3c							;    for other kernels, just use the scorecolor variable
      9  2b3c		       0f		      .byte.b	$0f
     10  2b3d
     11  2b3d				  -	      ifnconst	NOFONT
     12  2b3d				  -NOFONT     =	0
     13  2b3d					      endif
     14  2b3d				  -	      ifnconst	STOCK
     15  2b3d				  -STOCK      =	1	;_FONTNAME
     16  2b3d					      endif
     17  2b3d				  -	      ifnconst	NEWCENTURY
     18  2b3d				  -NEWCENTURY =	2	;_FONTNAME
     19  2b3d					      endif
     20  2b3d				  -	      ifnconst	WHIMSEY
     21  2b3d				  -WHIMSEY    =	3	;_FONTNAME
     22  2b3d					      endif
     23  2b3d				  -	      ifnconst	ALARMCLOCK
     24  2b3d				  -ALARMCLOCK =	4	;_FONTNAME
     25  2b3d					      endif
     26  2b3d				  -	      ifnconst	HANDWRITTEN
     27  2b3d				  -HANDWRITTEN =	5	;_FONTNAME
     28  2b3d					      endif
     29  2b3d				  -	      ifnconst	INTERRUPTED
     30  2b3d				  -INTERRUPTED =	6	;_FONTNAME
     31  2b3d					      endif
     32  2b3d				  -	      ifnconst	TINY
     33  2b3d				  -TINY       =	7	;_FONTNAME
     34  2b3d					      endif
     35  2b3d				  -	      ifnconst	RETROPUTER
     36  2b3d				  -RETROPUTER =	8	;_FONTNAME
     37  2b3d					      endif
     38  2b3d				  -	      ifnconst	CURVES
     39  2b3d				  -CURVES     =	9	;_FONTNAME
     40  2b3d					      endif
     41  2b3d				  -	      ifnconst	HUSKY
     42  2b3d				  -HUSKY      =	10	;_FONTNAME
     43  2b3d					      endif
     44  2b3d				  -	      ifnconst	SNAKE
     45  2b3d				  -SNAKE      =	11	;_FONTNAME
     46  2b3d					      endif
     47  2b3d				  -	      ifnconst	PLOK
     48  2b3d				  -PLOK       =	13	;_FONTNAME
     49  2b3d					      endif
     50  2b3d
     51  2b3d				  -	      ifnconst	SYMBOLS
     52  2b3d				  -SYMBOLS    =	0	;_FONTNAME
     53  2b3d					      endif
     54  2b3d
     55  2b3d							; ### setup some defaults
     56  2b3d				  -	      ifnconst	fontstyle
     57  2b3d				  -fontstyle  =	STOCK
     58  2b3d					      endif
     59  2b3d
     60  2b3d							;fix up the table alignment, if necessary
     61  2b3d				  -	      if	>. != >[.+81]
     62  2b3d				  -	      align	256
     63  2b3d					      endif
     64  2b3d
     65  2b3d
     66  2b3d				   miniscoretable
     67  2b3d
     68  2b3d					      if	fontstyle == STOCK
     69  2b3d
     70  2b3d							;byte %00000000 ; STOCK
     71  2b3d
     72  2b3d		       3c		      .byte.b	%00111100	; STOCK
     73  2b3e		       66		      .byte.b	%01100110	; STOCK
     74  2b3f		       66		      .byte.b	%01100110	; STOCK
     75  2b40		       66		      .byte.b	%01100110	; STOCK
     76  2b41		       66		      .byte.b	%01100110	; STOCK
     77  2b42		       66		      .byte.b	%01100110	; STOCK
     78  2b43		       66		      .byte.b	%01100110	; STOCK
     79  2b44		       3c		      .byte.b	%00111100	; STOCK
     80  2b45
     81  2b45							;byte %00000000 ; STOCK
     82  2b45
     83  2b45		       7e		      .byte.b	%01111110	; STOCK
     84  2b46		       18		      .byte.b	%00011000	; STOCK
     85  2b47		       18		      .byte.b	%00011000	; STOCK
     86  2b48		       18		      .byte.b	%00011000	; STOCK
     87  2b49		       18		      .byte.b	%00011000	; STOCK
     88  2b4a		       38		      .byte.b	%00111000	; STOCK
     89  2b4b		       18		      .byte.b	%00011000	; STOCK
     90  2b4c		       08		      .byte.b	%00001000	; STOCK
     91  2b4d
     92  2b4d							;byte %00000000 ; STOCK
     93  2b4d
     94  2b4d		       7e		      .byte.b	%01111110	; STOCK
     95  2b4e		       60		      .byte.b	%01100000	; STOCK
     96  2b4f		       60		      .byte.b	%01100000	; STOCK
     97  2b50		       3c		      .byte.b	%00111100	; STOCK
     98  2b51		       06		      .byte.b	%00000110	; STOCK
     99  2b52		       06		      .byte.b	%00000110	; STOCK
    100  2b53		       46		      .byte.b	%01000110	; STOCK
    101  2b54		       3c		      .byte.b	%00111100	; STOCK
    102  2b55
    103  2b55							;byte %00000000 ; STOCK
    104  2b55
    105  2b55		       3c		      .byte.b	%00111100	; STOCK
    106  2b56		       46		      .byte.b	%01000110	; STOCK
    107  2b57		       06		      .byte.b	%00000110	; STOCK
    108  2b58		       06		      .byte.b	%00000110	; STOCK
    109  2b59		       1c		      .byte.b	%00011100	; STOCK
    110  2b5a		       06		      .byte.b	%00000110	; STOCK
    111  2b5b		       46		      .byte.b	%01000110	; STOCK
    112  2b5c		       3c		      .byte.b	%00111100	; STOCK
    113  2b5d
    114  2b5d							;byte %00000000 ; STOCK
    115  2b5d
    116  2b5d		       0c		      .byte.b	%00001100	; STOCK
    117  2b5e		       0c		      .byte.b	%00001100	; STOCK
    118  2b5f		       7e		      .byte.b	%01111110	; STOCK
    119  2b60		       4c		      .byte.b	%01001100	; STOCK
    120  2b61		       4c		      .byte.b	%01001100	; STOCK
    121  2b62		       2c		      .byte.b	%00101100	; STOCK
    122  2b63		       1c		      .byte.b	%00011100	; STOCK
    123  2b64		       0c		      .byte.b	%00001100	; STOCK
    124  2b65
    125  2b65							;byte %00000000 ; STOCK
    126  2b65
    127  2b65		       3c		      .byte.b	%00111100	; STOCK
    128  2b66		       46		      .byte.b	%01000110	; STOCK
    129  2b67		       06		      .byte.b	%00000110	; STOCK
    130  2b68		       06		      .byte.b	%00000110	; STOCK
    131  2b69		       3c		      .byte.b	%00111100	; STOCK
    132  2b6a		       60		      .byte.b	%01100000	; STOCK
    133  2b6b		       60		      .byte.b	%01100000	; STOCK
    134  2b6c		       7e		      .byte.b	%01111110	; STOCK
    135  2b6d
    136  2b6d							;byte %00000000 ; STOCK
    137  2b6d
    138  2b6d		       3c		      .byte.b	%00111100	; STOCK
    139  2b6e		       66		      .byte.b	%01100110	; STOCK
    140  2b6f		       66		      .byte.b	%01100110	; STOCK
    141  2b70		       66		      .byte.b	%01100110	; STOCK
    142  2b71		       7c		      .byte.b	%01111100	; STOCK
    143  2b72		       60		      .byte.b	%01100000	; STOCK
    144  2b73		       62		      .byte.b	%01100010	; STOCK
    145  2b74		       3c		      .byte.b	%00111100	; STOCK
    146  2b75
    147  2b75							;byte %00000000 ; STOCK
    148  2b75
    149  2b75		       30		      .byte.b	%00110000	; STOCK
    150  2b76		       30		      .byte.b	%00110000	; STOCK
    151  2b77		       30		      .byte.b	%00110000	; STOCK
    152  2b78		       18		      .byte.b	%00011000	; STOCK
    153  2b79		       0c		      .byte.b	%00001100	; STOCK
    154  2b7a		       06		      .byte.b	%00000110	; STOCK
    155  2b7b		       42		      .byte.b	%01000010	; STOCK
    156  2b7c		       3e		      .byte.b	%00111110	; STOCK
    157  2b7d
    158  2b7d							;byte %00000000 ; STOCK
    159  2b7d
    160  2b7d		       3c		      .byte.b	%00111100	; STOCK
    161  2b7e		       66		      .byte.b	%01100110	; STOCK
    162  2b7f		       66		      .byte.b	%01100110	; STOCK
    163  2b80		       66		      .byte.b	%01100110	; STOCK
    164  2b81		       3c		      .byte.b	%00111100	; STOCK
    165  2b82		       66		      .byte.b	%01100110	; STOCK
    166  2b83		       66		      .byte.b	%01100110	; STOCK
    167  2b84		       3c		      .byte.b	%00111100	; STOCK
    168  2b85
    169  2b85							;byte %00000000 ; STOCK
    170  2b85
    171  2b85		       3c		      .byte.b	%00111100	; STOCK
    172  2b86		       46		      .byte.b	%01000110	; STOCK
    173  2b87		       06		      .byte.b	%00000110	; STOCK
    174  2b88		       3e		      .byte.b	%00111110	; STOCK
    175  2b89		       66		      .byte.b	%01100110	; STOCK
    176  2b8a		       66		      .byte.b	%01100110	; STOCK
    177  2b8b		       66		      .byte.b	%01100110	; STOCK
    178  2b8c		       3c		      .byte.b	%00111100	; STOCK
    179  2b8d
    180  2b8d					      endif		; STOCK
    181  2b8d
    182  2b8d				  -	      if	fontstyle == NEWCENTURY
    183  2b8d				  -			;byte %00000000 ; NEWCENTURY
    184  2b8d				  -
    185  2b8d				  -	      .byte	%00111100	; NEWCENTURY
    186  2b8d				  -	      .byte	%01000010	; NEWCENTURY
    187  2b8d				  -	      .byte	%01000010	; NEWCENTURY
    188  2b8d				  -	      .byte	%01000010	; NEWCENTURY
    189  2b8d				  -	      .byte	%00100100	; NEWCENTURY
    190  2b8d				  -	      .byte	%00100100	; NEWCENTURY
    191  2b8d				  -	      .byte	%00100100	; NEWCENTURY
    192  2b8d				  -	      .byte	%00011000	; NEWCENTURY
    193  2b8d				  -
    194  2b8d				  -			;byte %00000000 ; NEWCENTURY
    195  2b8d				  -
    196  2b8d				  -	      .byte	%00001000	; NEWCENTURY
    197  2b8d				  -	      .byte	%00001000	; NEWCENTURY
    198  2b8d				  -	      .byte	%00001000	; NEWCENTURY
    199  2b8d				  -	      .byte	%00001000	; NEWCENTURY
    200  2b8d				  -	      .byte	%00001000	; NEWCENTURY
    201  2b8d				  -	      .byte	%00001000	; NEWCENTURY
    202  2b8d				  -	      .byte	%00001000	; NEWCENTURY
    203  2b8d				  -	      .byte	%00001000	; NEWCENTURY
    204  2b8d				  -
    205  2b8d				  -			;byte %00000000 ; NEWCENTURY
    206  2b8d				  -
    207  2b8d				  -	      .byte	%01111110	; NEWCENTURY
    208  2b8d				  -	      .byte	%01000000	; NEWCENTURY
    209  2b8d				  -	      .byte	%01000000	; NEWCENTURY
    210  2b8d				  -	      .byte	%00100000	; NEWCENTURY
    211  2b8d				  -	      .byte	%00011100	; NEWCENTURY
    212  2b8d				  -	      .byte	%00000010	; NEWCENTURY
    213  2b8d				  -	      .byte	%00000010	; NEWCENTURY
    214  2b8d				  -	      .byte	%00011100	; NEWCENTURY
    215  2b8d				  -
    216  2b8d				  -			;byte %00000000 ; NEWCENTURY
    217  2b8d				  -
    218  2b8d				  -	      .byte	%01111100	; NEWCENTURY
    219  2b8d				  -	      .byte	%00000010	; NEWCENTURY
    220  2b8d				  -	      .byte	%00000010	; NEWCENTURY
    221  2b8d				  -	      .byte	%00000010	; NEWCENTURY
    222  2b8d				  -	      .byte	%00111100	; NEWCENTURY
    223  2b8d				  -	      .byte	%00000010	; NEWCENTURY
    224  2b8d				  -	      .byte	%00000010	; NEWCENTURY
    225  2b8d				  -	      .byte	%00011100	; NEWCENTURY
    226  2b8d				  -
    227  2b8d				  -			;byte %00000000 ; NEWCENTURY
    228  2b8d				  -
    229  2b8d				  -	      .byte	%00000010	; NEWCENTURY
    230  2b8d				  -	      .byte	%00000010	; NEWCENTURY
    231  2b8d				  -	      .byte	%00000010	; NEWCENTURY
    232  2b8d				  -	      .byte	%00111110	; NEWCENTURY
    233  2b8d				  -	      .byte	%00100010	; NEWCENTURY
    234  2b8d				  -	      .byte	%00100010	; NEWCENTURY
    235  2b8d				  -	      .byte	%00010010	; NEWCENTURY
    236  2b8d				  -	      .byte	%00010010	; NEWCENTURY
    237  2b8d				  -
    238  2b8d				  -			;byte %00000000 ; NEWCENTURY
    239  2b8d				  -
    240  2b8d				  -	      .byte	%01111100	; NEWCENTURY
    241  2b8d				  -	      .byte	%00000010	; NEWCENTURY
    242  2b8d				  -	      .byte	%00000010	; NEWCENTURY
    243  2b8d				  -	      .byte	%00000010	; NEWCENTURY
    244  2b8d				  -	      .byte	%01111100	; NEWCENTURY
    245  2b8d				  -	      .byte	%01000000	; NEWCENTURY
    246  2b8d				  -	      .byte	%01000000	; NEWCENTURY
    247  2b8d				  -	      .byte	%01111000	; NEWCENTURY
    248  2b8d				  -
    249  2b8d				  -			;byte %00000000 ; NEWCENTURY
    250  2b8d				  -
    251  2b8d				  -	      .byte	%00111100	; NEWCENTURY
    252  2b8d				  -	      .byte	%01000010	; NEWCENTURY
    253  2b8d				  -	      .byte	%01000010	; NEWCENTURY
    254  2b8d				  -	      .byte	%01000010	; NEWCENTURY
    255  2b8d				  -	      .byte	%01111100	; NEWCENTURY
    256  2b8d				  -	      .byte	%01000000	; NEWCENTURY
    257  2b8d				  -	      .byte	%01000000	; NEWCENTURY
    258  2b8d				  -	      .byte	%00110000	; NEWCENTURY
    259  2b8d				  -
    260  2b8d				  -			;byte %00000000 ; NEWCENTURY
    261  2b8d				  -
    262  2b8d				  -	      .byte	%00010000	; NEWCENTURY
    263  2b8d				  -	      .byte	%00010000	; NEWCENTURY
    264  2b8d				  -	      .byte	%00001000	; NEWCENTURY
    265  2b8d				  -	      .byte	%00001000	; NEWCENTURY
    266  2b8d				  -	      .byte	%00000100	; NEWCENTURY
    267  2b8d				  -	      .byte	%00000100	; NEWCENTURY
    268  2b8d				  -	      .byte	%00000010	; NEWCENTURY
    269  2b8d				  -	      .byte	%00011110	; NEWCENTURY
    270  2b8d				  -
    271  2b8d				  -			;byte %00000000 ; NEWCENTURY
    272  2b8d				  -
    273  2b8d				  -	      .byte	%00111100	; NEWCENTURY
    274  2b8d				  -	      .byte	%01000010	; NEWCENTURY
    275  2b8d				  -	      .byte	%01000010	; NEWCENTURY
    276  2b8d				  -	      .byte	%01000010	; NEWCENTURY
    277  2b8d				  -	      .byte	%00111100	; NEWCENTURY
    278  2b8d				  -	      .byte	%00100100	; NEWCENTURY
    279  2b8d				  -	      .byte	%00100100	; NEWCENTURY
    280  2b8d				  -	      .byte	%00011000	; NEWCENTURY
    281  2b8d				  -
    282  2b8d				  -			;byte %00000000 ; NEWCENTURY
    283  2b8d				  -
    284  2b8d				  -	      .byte	%00111100	; NEWCENTURY
    285  2b8d				  -	      .byte	%00000010	; NEWCENTURY
    286  2b8d				  -	      .byte	%00000010	; NEWCENTURY
    287  2b8d				  -	      .byte	%00000010	; NEWCENTURY
    288  2b8d				  -	      .byte	%00001110	; NEWCENTURY
    289  2b8d				  -	      .byte	%00010010	; NEWCENTURY
    290  2b8d				  -	      .byte	%00010010	; NEWCENTURY
    291  2b8d				  -	      .byte	%00001100	; NEWCENTURY
    292  2b8d				  -
    293  2b8d					      endif		; NEWCENTURY
    294  2b8d
    295  2b8d				  -	      if	fontstyle == WHIMSEY
    296  2b8d				  -			;byte %00000000 ; WHIMSEY
    297  2b8d				  -
    298  2b8d				  -	      .byte	%00111100	; WHIMSEY
    299  2b8d				  -	      .byte	%01111110	; WHIMSEY
    300  2b8d				  -	      .byte	%01111110	; WHIMSEY
    301  2b8d				  -	      .byte	%01111110	; WHIMSEY
    302  2b8d				  -	      .byte	%01110110	; WHIMSEY
    303  2b8d				  -	      .byte	%01110110	; WHIMSEY
    304  2b8d				  -	      .byte	%01110110	; WHIMSEY
    305  2b8d				  -	      .byte	%00111100	; WHIMSEY
    306  2b8d				  -
    307  2b8d				  -			;byte %00000000 ; WHIMSEY
    308  2b8d				  -
    309  2b8d				  -	      .byte	%01111110	; WHIMSEY
    310  2b8d				  -	      .byte	%01111110	; WHIMSEY
    311  2b8d				  -	      .byte	%01111110	; WHIMSEY
    312  2b8d				  -	      .byte	%00011000	; WHIMSEY
    313  2b8d				  -	      .byte	%00011000	; WHIMSEY
    314  2b8d				  -	      .byte	%00011000	; WHIMSEY
    315  2b8d				  -	      .byte	%01111000	; WHIMSEY
    316  2b8d				  -	      .byte	%00011000	; WHIMSEY
    317  2b8d				  -
    318  2b8d				  -			;byte %00000000 ; WHIMSEY
    319  2b8d				  -
    320  2b8d				  -	      .byte	%01111110	; WHIMSEY
    321  2b8d				  -	      .byte	%01111110	; WHIMSEY
    322  2b8d				  -	      .byte	%01111110	; WHIMSEY
    323  2b8d				  -	      .byte	%01111000	; WHIMSEY
    324  2b8d				  -	      .byte	%00111100	; WHIMSEY
    325  2b8d				  -	      .byte	%00001110	; WHIMSEY
    326  2b8d				  -	      .byte	%01100110	; WHIMSEY
    327  2b8d				  -	      .byte	%00111100	; WHIMSEY
    328  2b8d				  -
    329  2b8d				  -			;byte %00000000 ; WHIMSEY
    330  2b8d				  -
    331  2b8d				  -	      .byte	%00111100	; WHIMSEY
    332  2b8d				  -	      .byte	%01111110	; WHIMSEY
    333  2b8d				  -	      .byte	%01111110	; WHIMSEY
    334  2b8d				  -	      .byte	%01101110	; WHIMSEY
    335  2b8d				  -	      .byte	%00001110	; WHIMSEY
    336  2b8d				  -	      .byte	%00111100	; WHIMSEY
    337  2b8d				  -	      .byte	%00011100	; WHIMSEY
    338  2b8d				  -	      .byte	%01111110	; WHIMSEY
    339  2b8d				  -
    340  2b8d				  -			;byte %00000000 ; WHIMSEY
    341  2b8d				  -
    342  2b8d				  -	      .byte	%00011100	; WHIMSEY
    343  2b8d				  -	      .byte	%00011100	; WHIMSEY
    344  2b8d				  -	      .byte	%01111110	; WHIMSEY
    345  2b8d				  -	      .byte	%01011100	; WHIMSEY
    346  2b8d				  -	      .byte	%01011100	; WHIMSEY
    347  2b8d				  -	      .byte	%00011100	; WHIMSEY
    348  2b8d				  -	      .byte	%00011100	; WHIMSEY
    349  2b8d				  -	      .byte	%00011100	; WHIMSEY
    350  2b8d				  -
    351  2b8d				  -			;byte %00000000 ; WHIMSEY
    352  2b8d				  -
    353  2b8d				  -	      .byte	%00111100	; WHIMSEY
    354  2b8d				  -	      .byte	%01111110	; WHIMSEY
    355  2b8d				  -	      .byte	%01111110	; WHIMSEY
    356  2b8d				  -	      .byte	%01101110	; WHIMSEY
    357  2b8d				  -	      .byte	%00001110	; WHIMSEY
    358  2b8d				  -	      .byte	%01111100	; WHIMSEY
    359  2b8d				  -	      .byte	%01110000	; WHIMSEY
    360  2b8d				  -	      .byte	%01111110	; WHIMSEY
    361  2b8d				  -
    362  2b8d				  -			;byte %00000000 ; WHIMSEY
    363  2b8d				  -
    364  2b8d				  -	      .byte	%00111100	; WHIMSEY
    365  2b8d				  -	      .byte	%01111110	; WHIMSEY
    366  2b8d				  -	      .byte	%01111110	; WHIMSEY
    367  2b8d				  -	      .byte	%01110110	; WHIMSEY
    368  2b8d				  -	      .byte	%01110110	; WHIMSEY
    369  2b8d				  -	      .byte	%01111100	; WHIMSEY
    370  2b8d				  -	      .byte	%01110000	; WHIMSEY
    371  2b8d				  -	      .byte	%00111110	; WHIMSEY
    372  2b8d				  -
    373  2b8d				  -			;byte %00000000 ; WHIMSEY
    374  2b8d				  -
    375  2b8d				  -	      .byte	%01111000	; WHIMSEY
    376  2b8d				  -	      .byte	%01111000	; WHIMSEY
    377  2b8d				  -	      .byte	%01111000	; WHIMSEY
    378  2b8d				  -	      .byte	%00111100	; WHIMSEY
    379  2b8d				  -	      .byte	%00011100	; WHIMSEY
    380  2b8d				  -	      .byte	%00001110	; WHIMSEY
    381  2b8d				  -	      .byte	%00001110	; WHIMSEY
    382  2b8d				  -	      .byte	%01111110	; WHIMSEY
    383  2b8d				  -
    384  2b8d				  -			;byte %00000000 ; WHIMSEY
    385  2b8d				  -
    386  2b8d				  -	      .byte	%00111100	; WHIMSEY
    387  2b8d				  -	      .byte	%01111110	; WHIMSEY
    388  2b8d				  -	      .byte	%01111110	; WHIMSEY
    389  2b8d				  -	      .byte	%01110110	; WHIMSEY
    390  2b8d				  -	      .byte	%01110110	; WHIMSEY
    391  2b8d				  -	      .byte	%00111100	; WHIMSEY
    392  2b8d				  -	      .byte	%01110110	; WHIMSEY
    393  2b8d				  -	      .byte	%00111100	; WHIMSEY
    394  2b8d				  -
    395  2b8d				  -			;byte %00000000 ; WHIMSEY
    396  2b8d				  -
    397  2b8d				  -	      .byte	%00111100	; WHIMSEY
    398  2b8d				  -	      .byte	%01111110	; WHIMSEY
    399  2b8d				  -	      .byte	%01111110	; WHIMSEY
    400  2b8d				  -	      .byte	%01110110	; WHIMSEY
    401  2b8d				  -	      .byte	%00000110	; WHIMSEY
    402  2b8d				  -	      .byte	%00111110	; WHIMSEY
    403  2b8d				  -	      .byte	%01110110	; WHIMSEY
    404  2b8d				  -	      .byte	%00111100	; WHIMSEY
    405  2b8d				  -
    406  2b8d					      endif		; WHIMSEY
    407  2b8d
    408  2b8d				  -	      if	fontstyle == ALARMCLOCK
    409  2b8d				  -
    410  2b8d				  -			;byte %00000000 ; ALARMCLOCK
    411  2b8d				  -
    412  2b8d				  -	      .byte	%00111100	; ALARMCLOCK
    413  2b8d				  -	      .byte	%01000010	; ALARMCLOCK
    414  2b8d				  -	      .byte	%01000010	; ALARMCLOCK
    415  2b8d				  -	      .byte	%01000010	; ALARMCLOCK
    416  2b8d				  -	      .byte	%00000000	; ALARMCLOCK
    417  2b8d				  -	      .byte	%01000010	; ALARMCLOCK
    418  2b8d				  -	      .byte	%01000010	; ALARMCLOCK
    419  2b8d				  -	      .byte	%00111100	; ALARMCLOCK
    420  2b8d				  -
    421  2b8d				  -			;byte %00000000 ; ALARMCLOCK
    422  2b8d				  -
    423  2b8d				  -	      .byte	%00000000	; ALARMCLOCK
    424  2b8d				  -	      .byte	%00000010	; ALARMCLOCK
    425  2b8d				  -	      .byte	%00000010	; ALARMCLOCK
    426  2b8d				  -	      .byte	%00000010	; ALARMCLOCK
    427  2b8d				  -	      .byte	%00000000	; ALARMCLOCK
    428  2b8d				  -	      .byte	%00000010	; ALARMCLOCK
    429  2b8d				  -	      .byte	%00000010	; ALARMCLOCK
    430  2b8d				  -	      .byte	%00000000	; ALARMCLOCK
    431  2b8d				  -
    432  2b8d				  -			;byte %00000000 ; ALARMCLOCK
    433  2b8d				  -
    434  2b8d				  -	      .byte	%00111100	; ALARMCLOCK
    435  2b8d				  -	      .byte	%01000000	; ALARMCLOCK
    436  2b8d				  -	      .byte	%01000000	; ALARMCLOCK
    437  2b8d				  -	      .byte	%01000000	; ALARMCLOCK
    438  2b8d				  -	      .byte	%00111100	; ALARMCLOCK
    439  2b8d				  -	      .byte	%00000010	; ALARMCLOCK
    440  2b8d				  -	      .byte	%00000010	; ALARMCLOCK
    441  2b8d				  -	      .byte	%00111100	; ALARMCLOCK
    442  2b8d				  -
    443  2b8d				  -			;byte %00000000 ; ALARMCLOCK
    444  2b8d				  -
    445  2b8d				  -	      .byte	%00111100	; ALARMCLOCK
    446  2b8d				  -	      .byte	%00000010	; ALARMCLOCK
    447  2b8d				  -	      .byte	%00000010	; ALARMCLOCK
    448  2b8d				  -	      .byte	%00000010	; ALARMCLOCK
    449  2b8d				  -	      .byte	%00111100	; ALARMCLOCK
    450  2b8d				  -	      .byte	%00000010	; ALARMCLOCK
    451  2b8d				  -	      .byte	%00000010	; ALARMCLOCK
    452  2b8d				  -	      .byte	%00111100	; ALARMCLOCK
    453  2b8d				  -
    454  2b8d				  -			;byte %00000000 ; ALARMCLOCK
    455  2b8d				  -
    456  2b8d				  -	      .byte	%00000000	; ALARMCLOCK
    457  2b8d				  -	      .byte	%00000010	; ALARMCLOCK
    458  2b8d				  -	      .byte	%00000010	; ALARMCLOCK
    459  2b8d				  -	      .byte	%00000010	; ALARMCLOCK
    460  2b8d				  -	      .byte	%00111100	; ALARMCLOCK
    461  2b8d				  -	      .byte	%01000010	; ALARMCLOCK
    462  2b8d				  -	      .byte	%01000010	; ALARMCLOCK
    463  2b8d				  -	      .byte	%00000000	; ALARMCLOCK
    464  2b8d				  -
    465  2b8d				  -			;byte %00000000 ; ALARMCLOCK
    466  2b8d				  -
    467  2b8d				  -	      .byte	%00111100	; ALARMCLOCK
    468  2b8d				  -	      .byte	%00000010	; ALARMCLOCK
    469  2b8d				  -	      .byte	%00000010	; ALARMCLOCK
    470  2b8d				  -	      .byte	%00000010	; ALARMCLOCK
    471  2b8d				  -	      .byte	%00111100	; ALARMCLOCK
    472  2b8d				  -	      .byte	%01000000	; ALARMCLOCK
    473  2b8d				  -	      .byte	%01000000	; ALARMCLOCK
    474  2b8d				  -	      .byte	%00111100	; ALARMCLOCK
    475  2b8d				  -
    476  2b8d				  -			;byte %00000000 ; ALARMCLOCK
    477  2b8d				  -
    478  2b8d				  -	      .byte	%00111100	; ALARMCLOCK
    479  2b8d				  -	      .byte	%01000010	; ALARMCLOCK
    480  2b8d				  -	      .byte	%01000010	; ALARMCLOCK
    481  2b8d				  -	      .byte	%01000010	; ALARMCLOCK
    482  2b8d				  -	      .byte	%00111100	; ALARMCLOCK
    483  2b8d				  -	      .byte	%01000000	; ALARMCLOCK
    484  2b8d				  -	      .byte	%01000000	; ALARMCLOCK
    485  2b8d				  -	      .byte	%00111100	; ALARMCLOCK
    486  2b8d				  -
    487  2b8d				  -			;byte %00000000 ; ALARMCLOCK
    488  2b8d				  -
    489  2b8d				  -	      .byte	%00000000	; ALARMCLOCK
    490  2b8d				  -	      .byte	%00000010	; ALARMCLOCK
    491  2b8d				  -	      .byte	%00000010	; ALARMCLOCK
    492  2b8d				  -	      .byte	%00000010	; ALARMCLOCK
    493  2b8d				  -	      .byte	%00000000	; ALARMCLOCK
    494  2b8d				  -	      .byte	%00000010	; ALARMCLOCK
    495  2b8d				  -	      .byte	%00000010	; ALARMCLOCK
    496  2b8d				  -	      .byte	%00111100	; ALARMCLOCK
    497  2b8d				  -
    498  2b8d				  -			;byte %00000000 ; ALARMCLOCK
    499  2b8d				  -
    500  2b8d				  -	      .byte	%00111100	; ALARMCLOCK
    501  2b8d				  -	      .byte	%01000010	; ALARMCLOCK
    502  2b8d				  -	      .byte	%01000010	; ALARMCLOCK
    503  2b8d				  -	      .byte	%01000010	; ALARMCLOCK
    504  2b8d				  -	      .byte	%00111100	; ALARMCLOCK
    505  2b8d				  -	      .byte	%01000010	; ALARMCLOCK
    506  2b8d				  -	      .byte	%01000010	; ALARMCLOCK
    507  2b8d				  -	      .byte	%00111100	; ALARMCLOCK
    508  2b8d				  -
    509  2b8d				  -			;byte %00000000 ; ALARMCLOCK
    510  2b8d				  -
    511  2b8d				  -	      .byte	%00111100	; ALARMCLOCK
    512  2b8d				  -	      .byte	%00000010	; ALARMCLOCK
    513  2b8d				  -	      .byte	%00000010	; ALARMCLOCK
    514  2b8d				  -	      .byte	%00000010	; ALARMCLOCK
    515  2b8d				  -	      .byte	%00111100	; ALARMCLOCK
    516  2b8d				  -	      .byte	%01000010	; ALARMCLOCK
    517  2b8d				  -	      .byte	%01000010	; ALARMCLOCK
    518  2b8d				  -	      .byte	%00111100	; ALARMCLOCK
    519  2b8d				  -
    520  2b8d				  -
    521  2b8d					      endif		; ALARMCLOCK
    522  2b8d
    523  2b8d				  -	      if	fontstyle == HANDWRITTEN
    524  2b8d				  -
    525  2b8d				  -			;byte %00000000 ; HANDWRITTEN
    526  2b8d				  -
    527  2b8d				  -	      .byte	%00110000	; HANDWRITTEN
    528  2b8d				  -	      .byte	%01001000	; HANDWRITTEN
    529  2b8d				  -	      .byte	%01001000	; HANDWRITTEN
    530  2b8d				  -	      .byte	%01001000	; HANDWRITTEN
    531  2b8d				  -	      .byte	%00100100	; HANDWRITTEN
    532  2b8d				  -	      .byte	%00100100	; HANDWRITTEN
    533  2b8d				  -	      .byte	%00010010	; HANDWRITTEN
    534  2b8d				  -	      .byte	%00001100	; HANDWRITTEN
    535  2b8d				  -
    536  2b8d				  -			;byte %00000000 ; HANDWRITTEN
    537  2b8d				  -
    538  2b8d				  -	      .byte	%00010000	; HANDWRITTEN
    539  2b8d				  -	      .byte	%00010000	; HANDWRITTEN
    540  2b8d				  -	      .byte	%00010000	; HANDWRITTEN
    541  2b8d				  -	      .byte	%00001000	; HANDWRITTEN
    542  2b8d				  -	      .byte	%00001000	; HANDWRITTEN
    543  2b8d				  -	      .byte	%00001000	; HANDWRITTEN
    544  2b8d				  -	      .byte	%00000100	; HANDWRITTEN
    545  2b8d				  -	      .byte	%00000100	; HANDWRITTEN
    546  2b8d				  -
    547  2b8d				  -			;byte %00000000 ; HANDWRITTEN
    548  2b8d				  -
    549  2b8d				  -	      .byte	%01110000	; HANDWRITTEN
    550  2b8d				  -	      .byte	%01001100	; HANDWRITTEN
    551  2b8d				  -	      .byte	%01000000	; HANDWRITTEN
    552  2b8d				  -	      .byte	%00100000	; HANDWRITTEN
    553  2b8d				  -	      .byte	%00011000	; HANDWRITTEN
    554  2b8d				  -	      .byte	%00000100	; HANDWRITTEN
    555  2b8d				  -	      .byte	%00100010	; HANDWRITTEN
    556  2b8d				  -	      .byte	%00011100	; HANDWRITTEN
    557  2b8d				  -
    558  2b8d				  -			;byte %00000000 ; HANDWRITTEN
    559  2b8d				  -
    560  2b8d				  -	      .byte	%00110000	; HANDWRITTEN
    561  2b8d				  -	      .byte	%01001000	; HANDWRITTEN
    562  2b8d				  -	      .byte	%00000100	; HANDWRITTEN
    563  2b8d				  -	      .byte	%00000100	; HANDWRITTEN
    564  2b8d				  -	      .byte	%00011000	; HANDWRITTEN
    565  2b8d				  -	      .byte	%00000100	; HANDWRITTEN
    566  2b8d				  -	      .byte	%00100010	; HANDWRITTEN
    567  2b8d				  -	      .byte	%00011100	; HANDWRITTEN
    568  2b8d				  -
    569  2b8d				  -			;byte %00000000 ; HANDWRITTEN
    570  2b8d				  -
    571  2b8d				  -	      .byte	%00010000	; HANDWRITTEN
    572  2b8d				  -	      .byte	%00010000	; HANDWRITTEN
    573  2b8d				  -	      .byte	%00001000	; HANDWRITTEN
    574  2b8d				  -	      .byte	%01111000	; HANDWRITTEN
    575  2b8d				  -	      .byte	%01000100	; HANDWRITTEN
    576  2b8d				  -	      .byte	%00100100	; HANDWRITTEN
    577  2b8d				  -	      .byte	%00010010	; HANDWRITTEN
    578  2b8d				  -	      .byte	%00000010	; HANDWRITTEN
    579  2b8d				  -
    580  2b8d				  -			;byte %00000000 ; HANDWRITTEN
    581  2b8d				  -
    582  2b8d				  -	      .byte	%00110000	; HANDWRITTEN
    583  2b8d				  -	      .byte	%01001000	; HANDWRITTEN
    584  2b8d				  -	      .byte	%00000100	; HANDWRITTEN
    585  2b8d				  -	      .byte	%00000100	; HANDWRITTEN
    586  2b8d				  -	      .byte	%00011000	; HANDWRITTEN
    587  2b8d				  -	      .byte	%00100000	; HANDWRITTEN
    588  2b8d				  -	      .byte	%00010010	; HANDWRITTEN
    589  2b8d				  -	      .byte	%00001100	; HANDWRITTEN
    590  2b8d				  -
    591  2b8d				  -			;byte %00000000 ; HANDWRITTEN
    592  2b8d				  -
    593  2b8d				  -	      .byte	%00010000	; HANDWRITTEN
    594  2b8d				  -	      .byte	%00101000	; HANDWRITTEN
    595  2b8d				  -	      .byte	%00100100	; HANDWRITTEN
    596  2b8d				  -	      .byte	%00100100	; HANDWRITTEN
    597  2b8d				  -	      .byte	%00011000	; HANDWRITTEN
    598  2b8d				  -	      .byte	%00010000	; HANDWRITTEN
    599  2b8d				  -	      .byte	%00001000	; HANDWRITTEN
    600  2b8d				  -	      .byte	%00000110	; HANDWRITTEN
    601  2b8d				  -
    602  2b8d				  -			;byte %00000000 ; HANDWRITTEN
    603  2b8d				  -
    604  2b8d				  -	      .byte	%00010000	; HANDWRITTEN
    605  2b8d				  -	      .byte	%00010000	; HANDWRITTEN
    606  2b8d				  -	      .byte	%00010000	; HANDWRITTEN
    607  2b8d				  -	      .byte	%00001000	; HANDWRITTEN
    608  2b8d				  -	      .byte	%00000100	; HANDWRITTEN
    609  2b8d				  -	      .byte	%00000100	; HANDWRITTEN
    610  2b8d				  -	      .byte	%00110010	; HANDWRITTEN
    611  2b8d				  -	      .byte	%00001110	; HANDWRITTEN
    612  2b8d				  -
    613  2b8d				  -			;byte %00000000 ; HANDWRITTEN
    614  2b8d				  -
    615  2b8d				  -	      .byte	%00110000	; HANDWRITTEN
    616  2b8d				  -	      .byte	%01001000	; HANDWRITTEN
    617  2b8d				  -	      .byte	%01000100	; HANDWRITTEN
    618  2b8d				  -	      .byte	%00100100	; HANDWRITTEN
    619  2b8d				  -	      .byte	%00011100	; HANDWRITTEN
    620  2b8d				  -	      .byte	%00010010	; HANDWRITTEN
    621  2b8d				  -	      .byte	%00001010	; HANDWRITTEN
    622  2b8d				  -	      .byte	%00000110	; HANDWRITTEN
    623  2b8d				  -
    624  2b8d				  -			;byte %00000000 ; HANDWRITTEN
    625  2b8d				  -
    626  2b8d				  -	      .byte	%00010000	; HANDWRITTEN
    627  2b8d				  -	      .byte	%00010000	; HANDWRITTEN
    628  2b8d				  -	      .byte	%00001000	; HANDWRITTEN
    629  2b8d				  -	      .byte	%00001000	; HANDWRITTEN
    630  2b8d				  -	      .byte	%00011100	; HANDWRITTEN
    631  2b8d				  -	      .byte	%00100100	; HANDWRITTEN
    632  2b8d				  -	      .byte	%00010010	; HANDWRITTEN
    633  2b8d				  -	      .byte	%00001100	; HANDWRITTEN
    634  2b8d				  -
    635  2b8d					      endif		; HANDWRITTEN
    636  2b8d
    637  2b8d				  -	      if	fontstyle == INTERRUPTED
    638  2b8d				  -
    639  2b8d				  -			;byte %00000000 ; INTERRUPTED
    640  2b8d				  -
    641  2b8d				  -	      .byte	%00110100	; INTERRUPTED
    642  2b8d				  -	      .byte	%01100110	; INTERRUPTED
    643  2b8d				  -	      .byte	%01100110	; INTERRUPTED
    644  2b8d				  -	      .byte	%01100110	; INTERRUPTED
    645  2b8d				  -	      .byte	%01100110	; INTERRUPTED
    646  2b8d				  -	      .byte	%01100110	; INTERRUPTED
    647  2b8d				  -	      .byte	%01100110	; INTERRUPTED
    648  2b8d				  -	      .byte	%00110100	; INTERRUPTED
    649  2b8d				  -
    650  2b8d				  -			;byte %00000000 ; INTERRUPTED
    651  2b8d				  -
    652  2b8d				  -	      .byte	%00111100	; INTERRUPTED
    653  2b8d				  -	      .byte	%00000000	; INTERRUPTED
    654  2b8d				  -	      .byte	%00011000	; INTERRUPTED
    655  2b8d				  -	      .byte	%00011000	; INTERRUPTED
    656  2b8d				  -	      .byte	%00011000	; INTERRUPTED
    657  2b8d				  -	      .byte	%00011000	; INTERRUPTED
    658  2b8d				  -	      .byte	%00011000	; INTERRUPTED
    659  2b8d				  -	      .byte	%00111000	; INTERRUPTED
    660  2b8d				  -
    661  2b8d				  -			;byte %00000000 ; INTERRUPTED
    662  2b8d				  -
    663  2b8d				  -	      .byte	%01101110	; INTERRUPTED
    664  2b8d				  -	      .byte	%01100000	; INTERRUPTED
    665  2b8d				  -	      .byte	%00110000	; INTERRUPTED
    666  2b8d				  -	      .byte	%00011000	; INTERRUPTED
    667  2b8d				  -	      .byte	%00001100	; INTERRUPTED
    668  2b8d				  -	      .byte	%00000110	; INTERRUPTED
    669  2b8d				  -	      .byte	%01000110	; INTERRUPTED
    670  2b8d				  -	      .byte	%00111100	; INTERRUPTED
    671  2b8d				  -
    672  2b8d				  -			;byte %00000000 ; INTERRUPTED
    673  2b8d				  -
    674  2b8d				  -	      .byte	%01111100	; INTERRUPTED
    675  2b8d				  -	      .byte	%00000110	; INTERRUPTED
    676  2b8d				  -	      .byte	%00000110	; INTERRUPTED
    677  2b8d				  -	      .byte	%00000110	; INTERRUPTED
    678  2b8d				  -	      .byte	%01110110	; INTERRUPTED
    679  2b8d				  -	      .byte	%00000110	; INTERRUPTED
    680  2b8d				  -	      .byte	%00000110	; INTERRUPTED
    681  2b8d				  -	      .byte	%01110100	; INTERRUPTED
    682  2b8d				  -
    683  2b8d				  -			;byte %00000000 ; INTERRUPTED
    684  2b8d				  -
    685  2b8d				  -	      .byte	%00000110	; INTERRUPTED
    686  2b8d				  -	      .byte	%00000110	; INTERRUPTED
    687  2b8d				  -	      .byte	%00000110	; INTERRUPTED
    688  2b8d				  -	      .byte	%00000110	; INTERRUPTED
    689  2b8d				  -	      .byte	%01110110	; INTERRUPTED
    690  2b8d				  -	      .byte	%01100110	; INTERRUPTED
    691  2b8d				  -	      .byte	%01100110	; INTERRUPTED
    692  2b8d				  -	      .byte	%01100110	; INTERRUPTED
    693  2b8d				  -
    694  2b8d				  -			;byte %00000000 ; INTERRUPTED
    695  2b8d				  -
    696  2b8d				  -	      .byte	%01111100	; INTERRUPTED
    697  2b8d				  -	      .byte	%00000110	; INTERRUPTED
    698  2b8d				  -	      .byte	%00000110	; INTERRUPTED
    699  2b8d				  -	      .byte	%00000110	; INTERRUPTED
    700  2b8d				  -	      .byte	%01111100	; INTERRUPTED
    701  2b8d				  -	      .byte	%01100000	; INTERRUPTED
    702  2b8d				  -	      .byte	%01100000	; INTERRUPTED
    703  2b8d				  -	      .byte	%01101110	; INTERRUPTED
    704  2b8d				  -
    705  2b8d				  -			;byte %00000000 ; INTERRUPTED
    706  2b8d				  -
    707  2b8d				  -	      .byte	%00101100	; INTERRUPTED
    708  2b8d				  -	      .byte	%01100110	; INTERRUPTED
    709  2b8d				  -	      .byte	%01100110	; INTERRUPTED
    710  2b8d				  -	      .byte	%01100110	; INTERRUPTED
    711  2b8d				  -	      .byte	%01101100	; INTERRUPTED
    712  2b8d				  -	      .byte	%01100000	; INTERRUPTED
    713  2b8d				  -	      .byte	%00110000	; INTERRUPTED
    714  2b8d				  -	      .byte	%00011100	; INTERRUPTED
    715  2b8d				  -
    716  2b8d				  -			;byte %00000000 ; INTERRUPTED
    717  2b8d				  -
    718  2b8d				  -	      .byte	%00011000	; INTERRUPTED
    719  2b8d				  -	      .byte	%00011000	; INTERRUPTED
    720  2b8d				  -	      .byte	%00011000	; INTERRUPTED
    721  2b8d				  -	      .byte	%00011100	; INTERRUPTED
    722  2b8d				  -	      .byte	%00001110	; INTERRUPTED
    723  2b8d				  -	      .byte	%00000110	; INTERRUPTED
    724  2b8d				  -	      .byte	%00000000	; INTERRUPTED
    725  2b8d				  -	      .byte	%01111110	; INTERRUPTED
    726  2b8d				  -
    727  2b8d				  -			;byte %00000000 ; INTERRUPTED
    728  2b8d				  -
    729  2b8d				  -	      .byte	%00110100	; INTERRUPTED
    730  2b8d				  -	      .byte	%01100110	; INTERRUPTED
    731  2b8d				  -	      .byte	%01100110	; INTERRUPTED
    732  2b8d				  -	      .byte	%01100110	; INTERRUPTED
    733  2b8d				  -	      .byte	%00110100	; INTERRUPTED
    734  2b8d				  -	      .byte	%01100110	; INTERRUPTED
    735  2b8d				  -	      .byte	%01100110	; INTERRUPTED
    736  2b8d				  -	      .byte	%00110100	; INTERRUPTED
    737  2b8d				  -
    738  2b8d				  -			;byte %00000000 ; INTERRUPTED
    739  2b8d				  -
    740  2b8d				  -	      .byte	%00111000	; INTERRUPTED
    741  2b8d				  -	      .byte	%00001100	; INTERRUPTED
    742  2b8d				  -	      .byte	%00000110	; INTERRUPTED
    743  2b8d				  -	      .byte	%00110110	; INTERRUPTED
    744  2b8d				  -	      .byte	%01100110	; INTERRUPTED
    745  2b8d				  -	      .byte	%01100110	; INTERRUPTED
    746  2b8d				  -	      .byte	%01100110	; INTERRUPTED
    747  2b8d				  -	      .byte	%00110100	; INTERRUPTED
    748  2b8d				  -
    749  2b8d					      endif		; INTERRUPTED
    750  2b8d
    751  2b8d
    752  2b8d				  -	      if	fontstyle == TINY
    753  2b8d				  -
    754  2b8d				  -			;byte %00000000 ; TINY
    755  2b8d				  -
    756  2b8d				  -	      .byte	%00000000	; TINY
    757  2b8d				  -	      .byte	%00111000	; TINY
    758  2b8d				  -	      .byte	%00101000	; TINY
    759  2b8d				  -	      .byte	%00101000	; TINY
    760  2b8d				  -	      .byte	%00101000	; TINY
    761  2b8d				  -	      .byte	%00111000	; TINY
    762  2b8d				  -	      .byte	%00000000	; TINY
    763  2b8d				  -	      .byte	%00000000	; TINY
    764  2b8d				  -
    765  2b8d				  -			;byte %00000000 ; TINY
    766  2b8d				  -
    767  2b8d				  -	      .byte	%00000000	; TINY
    768  2b8d				  -	      .byte	%00010000	; TINY
    769  2b8d				  -	      .byte	%00010000	; TINY
    770  2b8d				  -	      .byte	%00010000	; TINY
    771  2b8d				  -	      .byte	%00010000	; TINY
    772  2b8d				  -	      .byte	%00010000	; TINY
    773  2b8d				  -	      .byte	%00000000	; TINY
    774  2b8d				  -	      .byte	%00000000	; TINY
    775  2b8d				  -
    776  2b8d				  -			;byte %00000000 ; TINY
    777  2b8d				  -
    778  2b8d				  -	      .byte	%00000000	; TINY
    779  2b8d				  -	      .byte	%00111000	; TINY
    780  2b8d				  -	      .byte	%00100000	; TINY
    781  2b8d				  -	      .byte	%00111000	; TINY
    782  2b8d				  -	      .byte	%00001000	; TINY
    783  2b8d				  -	      .byte	%00111000	; TINY
    784  2b8d				  -	      .byte	%00000000	; TINY
    785  2b8d				  -	      .byte	%00000000	; TINY
    786  2b8d				  -
    787  2b8d				  -			;byte %00000000 ; TINY
    788  2b8d				  -
    789  2b8d				  -	      .byte	%00000000	; TINY
    790  2b8d				  -	      .byte	%00111000	; TINY
    791  2b8d				  -	      .byte	%00001000	; TINY
    792  2b8d				  -	      .byte	%00111000	; TINY
    793  2b8d				  -	      .byte	%00001000	; TINY
    794  2b8d				  -	      .byte	%00111000	; TINY
    795  2b8d				  -	      .byte	%00000000	; TINY
    796  2b8d				  -	      .byte	%00000000	; TINY
    797  2b8d				  -
    798  2b8d				  -			;byte %00000000 ; TINY
    799  2b8d				  -
    800  2b8d				  -	      .byte	%00000000	; TINY
    801  2b8d				  -	      .byte	%00001000	; TINY
    802  2b8d				  -	      .byte	%00001000	; TINY
    803  2b8d				  -	      .byte	%00111000	; TINY
    804  2b8d				  -	      .byte	%00101000	; TINY
    805  2b8d				  -	      .byte	%00101000	; TINY
    806  2b8d				  -	      .byte	%00000000	; TINY
    807  2b8d				  -	      .byte	%00000000	; TINY
    808  2b8d				  -
    809  2b8d				  -			;byte %00000000 ; TINY
    810  2b8d				  -
    811  2b8d				  -	      .byte	%00000000	; TINY
    812  2b8d				  -	      .byte	%00111000	; TINY
    813  2b8d				  -	      .byte	%00001000	; TINY
    814  2b8d				  -	      .byte	%00111000	; TINY
    815  2b8d				  -	      .byte	%00100000	; TINY
    816  2b8d				  -	      .byte	%00111000	; TINY
    817  2b8d				  -	      .byte	%00000000	; TINY
    818  2b8d				  -	      .byte	%00000000	; TINY
    819  2b8d				  -
    820  2b8d				  -			;byte %00000000 ; TINY
    821  2b8d				  -
    822  2b8d				  -	      .byte	%00000000	; TINY
    823  2b8d				  -	      .byte	%00111000	; TINY
    824  2b8d				  -	      .byte	%00101000	; TINY
    825  2b8d				  -	      .byte	%00111000	; TINY
    826  2b8d				  -	      .byte	%00100000	; TINY
    827  2b8d				  -	      .byte	%00111000	; TINY
    828  2b8d				  -	      .byte	%00000000	; TINY
    829  2b8d				  -	      .byte	%00000000	; TINY
    830  2b8d				  -
    831  2b8d				  -			;byte %00000000 ; TINY
    832  2b8d				  -
    833  2b8d				  -	      .byte	%00000000	; TINY
    834  2b8d				  -	      .byte	%00001000	; TINY
    835  2b8d				  -	      .byte	%00001000	; TINY
    836  2b8d				  -	      .byte	%00001000	; TINY
    837  2b8d				  -	      .byte	%00001000	; TINY
    838  2b8d				  -	      .byte	%00111000	; TINY
    839  2b8d				  -	      .byte	%00000000	; TINY
    840  2b8d				  -	      .byte	%00000000	; TINY
    841  2b8d				  -
    842  2b8d				  -			;byte %00000000 ; TINY
    843  2b8d				  -
    844  2b8d				  -	      .byte	%00000000	; TINY
    845  2b8d				  -	      .byte	%00111000	; TINY
    846  2b8d				  -	      .byte	%00101000	; TINY
    847  2b8d				  -	      .byte	%00111000	; TINY
    848  2b8d				  -	      .byte	%00101000	; TINY
    849  2b8d				  -	      .byte	%00111000	; TINY
    850  2b8d				  -	      .byte	%00000000	; TINY
    851  2b8d				  -	      .byte	%00000000	; TINY
    852  2b8d				  -
    853  2b8d				  -			;byte %00000000 ; TINY
    854  2b8d				  -
    855  2b8d				  -	      .byte	%00000000	; TINY
    856  2b8d				  -	      .byte	%00001000	; TINY
    857  2b8d				  -	      .byte	%00001000	; TINY
    858  2b8d				  -	      .byte	%00111000	; TINY
    859  2b8d				  -	      .byte	%00101000	; TINY
    860  2b8d				  -	      .byte	%00111000	; TINY
    861  2b8d				  -	      .byte	%00000000	; TINY
    862  2b8d				  -	      .byte	%00000000	; TINY
    863  2b8d				  -
    864  2b8d					      endif		; TINY
    865  2b8d
    866  2b8d				  -	      if	fontstyle == RETROPUTER
    867  2b8d				  -
    868  2b8d				  -			;byte %00000000 ; RETROPUTER
    869  2b8d				  -
    870  2b8d				  -	      .byte	%01111110	; RETROPUTER
    871  2b8d				  -	      .byte	%01000110	; RETROPUTER
    872  2b8d				  -	      .byte	%01000110	; RETROPUTER
    873  2b8d				  -	      .byte	%01000110	; RETROPUTER
    874  2b8d				  -	      .byte	%01100010	; RETROPUTER
    875  2b8d				  -	      .byte	%01100010	; RETROPUTER
    876  2b8d				  -	      .byte	%01100010	; RETROPUTER
    877  2b8d				  -	      .byte	%01111110	; RETROPUTER
    878  2b8d				  -
    879  2b8d				  -			;byte %00000000 ; RETROPUTER
    880  2b8d				  -
    881  2b8d				  -	      .byte	%00111000	; RETROPUTER
    882  2b8d				  -	      .byte	%00111000	; RETROPUTER
    883  2b8d				  -	      .byte	%00111000	; RETROPUTER
    884  2b8d				  -	      .byte	%00111000	; RETROPUTER
    885  2b8d				  -	      .byte	%00011000	; RETROPUTER
    886  2b8d				  -	      .byte	%00011000	; RETROPUTER
    887  2b8d				  -	      .byte	%00011000	; RETROPUTER
    888  2b8d				  -	      .byte	%00011000	; RETROPUTER
    889  2b8d				  -
    890  2b8d				  -			;byte %00000000 ; RETROPUTER
    891  2b8d				  -
    892  2b8d				  -	      .byte	%01111110	; RETROPUTER
    893  2b8d				  -	      .byte	%01100000	; RETROPUTER
    894  2b8d				  -	      .byte	%01100000	; RETROPUTER
    895  2b8d				  -	      .byte	%01100000	; RETROPUTER
    896  2b8d				  -	      .byte	%00111110	; RETROPUTER
    897  2b8d				  -	      .byte	%00000010	; RETROPUTER
    898  2b8d				  -	      .byte	%01000010	; RETROPUTER
    899  2b8d				  -	      .byte	%01111110	; RETROPUTER
    900  2b8d				  -
    901  2b8d				  -			;byte %00000000 ; RETROPUTER
    902  2b8d				  -
    903  2b8d				  -	      .byte	%01111110	; RETROPUTER
    904  2b8d				  -	      .byte	%01000110	; RETROPUTER
    905  2b8d				  -	      .byte	%00000110	; RETROPUTER
    906  2b8d				  -	      .byte	%00000110	; RETROPUTER
    907  2b8d				  -	      .byte	%00111110	; RETROPUTER
    908  2b8d				  -	      .byte	%00000010	; RETROPUTER
    909  2b8d				  -	      .byte	%01000010	; RETROPUTER
    910  2b8d				  -	      .byte	%01111110	; RETROPUTER
    911  2b8d				  -
    912  2b8d				  -			;byte %00000000 ; RETROPUTER
    913  2b8d				  -
    914  2b8d				  -	      .byte	%00001100	; RETROPUTER
    915  2b8d				  -	      .byte	%00001100	; RETROPUTER
    916  2b8d				  -	      .byte	%00001100	; RETROPUTER
    917  2b8d				  -	      .byte	%01111110	; RETROPUTER
    918  2b8d				  -	      .byte	%01000100	; RETROPUTER
    919  2b8d				  -	      .byte	%01000100	; RETROPUTER
    920  2b8d				  -	      .byte	%01000100	; RETROPUTER
    921  2b8d				  -	      .byte	%00000100	; RETROPUTER
    922  2b8d				  -
    923  2b8d				  -			;byte %00000000 ; RETROPUTER
    924  2b8d				  -
    925  2b8d				  -	      .byte	%01111110	; RETROPUTER
    926  2b8d				  -	      .byte	%01000110	; RETROPUTER
    927  2b8d				  -	      .byte	%00000110	; RETROPUTER
    928  2b8d				  -	      .byte	%00000110	; RETROPUTER
    929  2b8d				  -	      .byte	%01111100	; RETROPUTER
    930  2b8d				  -	      .byte	%01000000	; RETROPUTER
    931  2b8d				  -	      .byte	%01000000	; RETROPUTER
    932  2b8d				  -	      .byte	%01111110	; RETROPUTER
    933  2b8d				  -
    934  2b8d				  -			;byte %00000000 ; RETROPUTER
    935  2b8d				  -
    936  2b8d				  -	      .byte	%01111110	; RETROPUTER
    937  2b8d				  -	      .byte	%01000110	; RETROPUTER
    938  2b8d				  -	      .byte	%01000110	; RETROPUTER
    939  2b8d				  -	      .byte	%01000110	; RETROPUTER
    940  2b8d				  -	      .byte	%01111100	; RETROPUTER
    941  2b8d				  -	      .byte	%01000000	; RETROPUTER
    942  2b8d				  -	      .byte	%01000010	; RETROPUTER
    943  2b8d				  -	      .byte	%01111110	; RETROPUTER
    944  2b8d				  -
    945  2b8d				  -			;byte %00000000 ; RETROPUTER
    946  2b8d				  -
    947  2b8d				  -	      .byte	%00001100	; RETROPUTER
    948  2b8d				  -	      .byte	%00001100	; RETROPUTER
    949  2b8d				  -	      .byte	%00001100	; RETROPUTER
    950  2b8d				  -	      .byte	%00001100	; RETROPUTER
    951  2b8d				  -	      .byte	%00000100	; RETROPUTER
    952  2b8d				  -	      .byte	%00000010	; RETROPUTER
    953  2b8d				  -	      .byte	%01000010	; RETROPUTER
    954  2b8d				  -	      .byte	%01111110	; RETROPUTER
    955  2b8d				  -
    956  2b8d				  -			;byte %00000000 ; RETROPUTER
    957  2b8d				  -
    958  2b8d				  -	      .byte	%01111110	; RETROPUTER
    959  2b8d				  -	      .byte	%01000110	; RETROPUTER
    960  2b8d				  -	      .byte	%01000110	; RETROPUTER
    961  2b8d				  -	      .byte	%01000110	; RETROPUTER
    962  2b8d				  -	      .byte	%01111110	; RETROPUTER
    963  2b8d				  -	      .byte	%01000010	; RETROPUTER
    964  2b8d				  -	      .byte	%01000010	; RETROPUTER
    965  2b8d				  -	      .byte	%01111110	; RETROPUTER
    966  2b8d				  -
    967  2b8d				  -			;byte %00000000 ; RETROPUTER
    968  2b8d				  -
    969  2b8d				  -	      .byte	%00000110	; RETROPUTER
    970  2b8d				  -	      .byte	%00000110	; RETROPUTER
    971  2b8d				  -	      .byte	%00000110	; RETROPUTER
    972  2b8d				  -	      .byte	%00000010	; RETROPUTER
    973  2b8d				  -	      .byte	%01111110	; RETROPUTER
    974  2b8d				  -	      .byte	%01000010	; RETROPUTER
    975  2b8d				  -	      .byte	%01000010	; RETROPUTER
    976  2b8d				  -	      .byte	%01111110	; RETROPUTER
    977  2b8d				  -
    978  2b8d					      endif		; RETROPUTER
    979  2b8d
    980  2b8d				  -	      if	fontstyle == CURVES
    981  2b8d				  -
    982  2b8d				  -			;byte %00000000 ; CURVES
    983  2b8d				  -
    984  2b8d				  -	      .byte	%00111100	; CURVES
    985  2b8d				  -	      .byte	%01111110	; CURVES
    986  2b8d				  -	      .byte	%01100110	; CURVES
    987  2b8d				  -	      .byte	%01100110	; CURVES
    988  2b8d				  -	      .byte	%01100110	; CURVES
    989  2b8d				  -	      .byte	%01100110	; CURVES
    990  2b8d				  -	      .byte	%01111110	; CURVES
    991  2b8d				  -	      .byte	%00111100	; CURVES
    992  2b8d				  -
    993  2b8d				  -			;byte %00000000 ; CURVES
    994  2b8d				  -
    995  2b8d				  -	      .byte	%00011000	; CURVES
    996  2b8d				  -	      .byte	%00011000	; CURVES
    997  2b8d				  -	      .byte	%00011000	; CURVES
    998  2b8d				  -	      .byte	%00011000	; CURVES
    999  2b8d				  -	      .byte	%00011000	; CURVES
   1000  2b8d				  -	      .byte	%00011000	; CURVES
   1001  2b8d				  -	      .byte	%01111000	; CURVES
   1002  2b8d				  -	      .byte	%01110000	; CURVES
   1003  2b8d				  -
   1004  2b8d				  -			;byte %00000000 ; CURVES
   1005  2b8d				  -
   1006  2b8d				  -	      .byte	%01111110	; CURVES
   1007  2b8d				  -	      .byte	%01111110	; CURVES
   1008  2b8d				  -	      .byte	%01100000	; CURVES
   1009  2b8d				  -	      .byte	%01111100	; CURVES
   1010  2b8d				  -	      .byte	%00111110	; CURVES
   1011  2b8d				  -	      .byte	%00000110	; CURVES
   1012  2b8d				  -	      .byte	%01111110	; CURVES
   1013  2b8d				  -	      .byte	%01111100	; CURVES
   1014  2b8d				  -
   1015  2b8d				  -			;byte %00000000 ; CURVES
   1016  2b8d				  -
   1017  2b8d				  -	      .byte	%01111100	; CURVES
   1018  2b8d				  -	      .byte	%01111110	; CURVES
   1019  2b8d				  -	      .byte	%00001110	; CURVES
   1020  2b8d				  -	      .byte	%00111100	; CURVES
   1021  2b8d				  -	      .byte	%00111100	; CURVES
   1022  2b8d				  -	      .byte	%00001110	; CURVES
   1023  2b8d				  -	      .byte	%01111110	; CURVES
   1024  2b8d				  -	      .byte	%01111100	; CURVES
   1025  2b8d				  -
   1026  2b8d				  -			;byte %00000000 ; CURVES
   1027  2b8d				  -
   1028  2b8d				  -	      .byte	%00000110	; CURVES
   1029  2b8d				  -	      .byte	%00000110	; CURVES
   1030  2b8d				  -	      .byte	%00111110	; CURVES
   1031  2b8d				  -	      .byte	%01111110	; CURVES
   1032  2b8d				  -	      .byte	%01100110	; CURVES
   1033  2b8d				  -	      .byte	%01100110	; CURVES
   1034  2b8d				  -	      .byte	%01100110	; CURVES
   1035  2b8d				  -	      .byte	%01100110	; CURVES
   1036  2b8d				  -
   1037  2b8d				  -			;byte %00000000 ; CURVES
   1038  2b8d				  -
   1039  2b8d				  -	      .byte	%01111100	; CURVES
   1040  2b8d				  -	      .byte	%01111110	; CURVES
   1041  2b8d				  -	      .byte	%00000110	; CURVES
   1042  2b8d				  -	      .byte	%01111110	; CURVES
   1043  2b8d				  -	      .byte	%01111100	; CURVES
   1044  2b8d				  -	      .byte	%01100000	; CURVES
   1045  2b8d				  -	      .byte	%01111110	; CURVES
   1046  2b8d				  -	      .byte	%01111110	; CURVES
   1047  2b8d				  -
   1048  2b8d				  -			;byte %00000000 ; CURVES
   1049  2b8d				  -
   1050  2b8d				  -	      .byte	%00111100	; CURVES
   1051  2b8d				  -	      .byte	%01111110	; CURVES
   1052  2b8d				  -	      .byte	%01100110	; CURVES
   1053  2b8d				  -	      .byte	%01111110	; CURVES
   1054  2b8d				  -	      .byte	%01111100	; CURVES
   1055  2b8d				  -	      .byte	%01100000	; CURVES
   1056  2b8d				  -	      .byte	%01111110	; CURVES
   1057  2b8d				  -	      .byte	%00111110	; CURVES
   1058  2b8d				  -
   1059  2b8d				  -			;byte %00000000 ; CURVES
   1060  2b8d				  -
   1061  2b8d				  -	      .byte	%00000110	; CURVES
   1062  2b8d				  -	      .byte	%00000110	; CURVES
   1063  2b8d				  -	      .byte	%00000110	; CURVES
   1064  2b8d				  -	      .byte	%00000110	; CURVES
   1065  2b8d				  -	      .byte	%00000110	; CURVES
   1066  2b8d				  -	      .byte	%01100110	; CURVES
   1067  2b8d				  -	      .byte	%01111110	; CURVES
   1068  2b8d				  -	      .byte	%00111100	; CURVES
   1069  2b8d				  -
   1070  2b8d				  -			;byte %00000000 ; CURVES
   1071  2b8d				  -
   1072  2b8d				  -	      .byte	%00111100	; CURVES
   1073  2b8d				  -	      .byte	%01111110	; CURVES
   1074  2b8d				  -	      .byte	%01100110	; CURVES
   1075  2b8d				  -	      .byte	%01111110	; CURVES
   1076  2b8d				  -	      .byte	%00111100	; CURVES
   1077  2b8d				  -	      .byte	%01100110	; CURVES
   1078  2b8d				  -	      .byte	%01111110	; CURVES
   1079  2b8d				  -	      .byte	%00111100	; CURVES
   1080  2b8d				  -
   1081  2b8d				  -			;byte %00000000 ; CURVES
   1082  2b8d				  -
   1083  2b8d				  -	      .byte	%01111100	; CURVES
   1084  2b8d				  -	      .byte	%01111110	; CURVES
   1085  2b8d				  -	      .byte	%00000110	; CURVES
   1086  2b8d				  -	      .byte	%00111110	; CURVES
   1087  2b8d				  -	      .byte	%01111110	; CURVES
   1088  2b8d				  -	      .byte	%01100110	; CURVES
   1089  2b8d				  -	      .byte	%01111110	; CURVES
   1090  2b8d				  -	      .byte	%00111100	; CURVES
   1091  2b8d				  -
   1092  2b8d					      endif		; CURVES
   1093  2b8d
   1094  2b8d
   1095  2b8d				  -	      if	fontstyle == HUSKY
   1096  2b8d				  -
   1097  2b8d				  -			;byte %00000000 ; HUSKY
   1098  2b8d				  -
   1099  2b8d				  -	      .byte	%01111100	; HUSKY
   1100  2b8d				  -	      .byte	%11111110	; HUSKY
   1101  2b8d				  -	      .byte	%11101110	; HUSKY
   1102  2b8d				  -	      .byte	%11101110	; HUSKY
   1103  2b8d				  -	      .byte	%11101110	; HUSKY
   1104  2b8d				  -	      .byte	%11101110	; HUSKY
   1105  2b8d				  -	      .byte	%11111110	; HUSKY
   1106  2b8d				  -	      .byte	%01111100	; HUSKY
   1107  2b8d				  -
   1108  2b8d				  -			;byte %00000000 ; HUSKY
   1109  2b8d				  -
   1110  2b8d				  -	      .byte	%00111000	; HUSKY
   1111  2b8d				  -	      .byte	%00111000	; HUSKY
   1112  2b8d				  -	      .byte	%00111000	; HUSKY
   1113  2b8d				  -	      .byte	%00111000	; HUSKY
   1114  2b8d				  -	      .byte	%00111000	; HUSKY
   1115  2b8d				  -	      .byte	%00111000	; HUSKY
   1116  2b8d				  -	      .byte	%00111000	; HUSKY
   1117  2b8d				  -	      .byte	%00111000	; HUSKY
   1118  2b8d				  -
   1119  2b8d				  -			;byte %00000000 ; HUSKY
   1120  2b8d				  -
   1121  2b8d				  -	      .byte	%11111110	; HUSKY
   1122  2b8d				  -	      .byte	%11111110	; HUSKY
   1123  2b8d				  -	      .byte	%11100000	; HUSKY
   1124  2b8d				  -	      .byte	%11111100	; HUSKY
   1125  2b8d				  -	      .byte	%01111110	; HUSKY
   1126  2b8d				  -	      .byte	%00001110	; HUSKY
   1127  2b8d				  -	      .byte	%11111110	; HUSKY
   1128  2b8d				  -	      .byte	%11111100	; HUSKY
   1129  2b8d				  -
   1130  2b8d				  -			;byte %00000000 ; HUSKY
   1131  2b8d				  -
   1132  2b8d				  -	      .byte	%11111100	; HUSKY
   1133  2b8d				  -	      .byte	%11111110	; HUSKY
   1134  2b8d				  -	      .byte	%00001110	; HUSKY
   1135  2b8d				  -	      .byte	%11111100	; HUSKY
   1136  2b8d				  -	      .byte	%11111100	; HUSKY
   1137  2b8d				  -	      .byte	%00001110	; HUSKY
   1138  2b8d				  -	      .byte	%11111110	; HUSKY
   1139  2b8d				  -	      .byte	%11111100	; HUSKY
   1140  2b8d				  -
   1141  2b8d				  -			;byte %00000000 ; HUSKY
   1142  2b8d				  -
   1143  2b8d				  -	      .byte	%00011100	; HUSKY
   1144  2b8d				  -	      .byte	%00011100	; HUSKY
   1145  2b8d				  -	      .byte	%11111110	; HUSKY
   1146  2b8d				  -	      .byte	%11111110	; HUSKY
   1147  2b8d				  -	      .byte	%11011100	; HUSKY
   1148  2b8d				  -	      .byte	%11011100	; HUSKY
   1149  2b8d				  -	      .byte	%00011100	; HUSKY
   1150  2b8d				  -	      .byte	%00011100	; HUSKY
   1151  2b8d				  -
   1152  2b8d				  -			;byte %00000000 ; HUSKY
   1153  2b8d				  -
   1154  2b8d				  -	      .byte	%11111100	; HUSKY
   1155  2b8d				  -	      .byte	%11111110	; HUSKY
   1156  2b8d				  -	      .byte	%00001110	; HUSKY
   1157  2b8d				  -	      .byte	%11111110	; HUSKY
   1158  2b8d				  -	      .byte	%11111100	; HUSKY
   1159  2b8d				  -	      .byte	%11100000	; HUSKY
   1160  2b8d				  -	      .byte	%11111110	; HUSKY
   1161  2b8d				  -	      .byte	%11111110	; HUSKY
   1162  2b8d				  -
   1163  2b8d				  -			;byte %00000000 ; HUSKY
   1164  2b8d				  -
   1165  2b8d				  -	      .byte	%01111100	; HUSKY
   1166  2b8d				  -	      .byte	%11111110	; HUSKY
   1167  2b8d				  -	      .byte	%11101110	; HUSKY
   1168  2b8d				  -	      .byte	%11111110	; HUSKY
   1169  2b8d				  -	      .byte	%11111100	; HUSKY
   1170  2b8d				  -	      .byte	%11100000	; HUSKY
   1171  2b8d				  -	      .byte	%11111110	; HUSKY
   1172  2b8d				  -	      .byte	%01111110	; HUSKY
   1173  2b8d				  -
   1174  2b8d				  -			;byte %00000000 ; HUSKY
   1175  2b8d				  -
   1176  2b8d				  -	      .byte	%00111000	; HUSKY
   1177  2b8d				  -	      .byte	%00111000	; HUSKY
   1178  2b8d				  -	      .byte	%00111000	; HUSKY
   1179  2b8d				  -	      .byte	%00111000	; HUSKY
   1180  2b8d				  -	      .byte	%00011100	; HUSKY
   1181  2b8d				  -	      .byte	%00001110	; HUSKY
   1182  2b8d				  -	      .byte	%11111110	; HUSKY
   1183  2b8d				  -	      .byte	%11111110	; HUSKY
   1184  2b8d				  -
   1185  2b8d				  -			;byte %00000000 ; HUSKY
   1186  2b8d				  -
   1187  2b8d				  -	      .byte	%01111100	; HUSKY
   1188  2b8d				  -	      .byte	%11111110	; HUSKY
   1189  2b8d				  -	      .byte	%11101110	; HUSKY
   1190  2b8d				  -	      .byte	%11111110	; HUSKY
   1191  2b8d				  -	      .byte	%01111100	; HUSKY
   1192  2b8d				  -	      .byte	%11101110	; HUSKY
   1193  2b8d				  -	      .byte	%11111110	; HUSKY
   1194  2b8d				  -	      .byte	%01111100	; HUSKY
   1195  2b8d				  -
   1196  2b8d				  -			;byte %00000000 ; HUSKY
   1197  2b8d				  -
   1198  2b8d				  -	      .byte	%11111100	; HUSKY
   1199  2b8d				  -	      .byte	%11111110	; HUSKY
   1200  2b8d				  -	      .byte	%00001110	; HUSKY
   1201  2b8d				  -	      .byte	%01111110	; HUSKY
   1202  2b8d				  -	      .byte	%11111110	; HUSKY
   1203  2b8d				  -	      .byte	%11101110	; HUSKY
   1204  2b8d				  -	      .byte	%11111110	; HUSKY
   1205  2b8d				  -	      .byte	%01111100	; HUSKY
   1206  2b8d				  -
   1207  2b8d					      endif		; HUSKY
   1208  2b8d
   1209  2b8d
   1210  2b8d				  -	      if	fontstyle == SNAKE
   1211  2b8d				  -
   1212  2b8d				  -			;byte %00000000 ; SNAKE
   1213  2b8d				  -
   1214  2b8d				  -	      .byte	%01111110	; SNAKE
   1215  2b8d				  -	      .byte	%01000010	; SNAKE
   1216  2b8d				  -	      .byte	%01000010	; SNAKE
   1217  2b8d				  -	      .byte	%01000010	; SNAKE
   1218  2b8d				  -	      .byte	%01000010	; SNAKE
   1219  2b8d				  -	      .byte	%01000010	; SNAKE
   1220  2b8d				  -	      .byte	%01000010	; SNAKE
   1221  2b8d				  -	      .byte	%01111110	; SNAKE
   1222  2b8d				  -
   1223  2b8d				  -			;byte %00000000 ; SNAKE
   1224  2b8d				  -
   1225  2b8d				  -	      .byte	%00111000	; SNAKE
   1226  2b8d				  -	      .byte	%00101000	; SNAKE
   1227  2b8d				  -	      .byte	%00001000	; SNAKE
   1228  2b8d				  -	      .byte	%00001000	; SNAKE
   1229  2b8d				  -	      .byte	%00001000	; SNAKE
   1230  2b8d				  -	      .byte	%00001000	; SNAKE
   1231  2b8d				  -	      .byte	%00001000	; SNAKE
   1232  2b8d				  -	      .byte	%00111000	; SNAKE
   1233  2b8d				  -
   1234  2b8d				  -			;byte %00000000 ; SNAKE
   1235  2b8d				  -
   1236  2b8d				  -	      .byte	%01111110	; SNAKE
   1237  2b8d				  -	      .byte	%01000010	; SNAKE
   1238  2b8d				  -	      .byte	%01000110	; SNAKE
   1239  2b8d				  -	      .byte	%01000000	; SNAKE
   1240  2b8d				  -	      .byte	%01111110	; SNAKE
   1241  2b8d				  -	      .byte	%00000010	; SNAKE
   1242  2b8d				  -	      .byte	%01000010	; SNAKE
   1243  2b8d				  -	      .byte	%01111110	; SNAKE
   1244  2b8d				  -
   1245  2b8d				  -			;byte %00000000 ; SNAKE
   1246  2b8d				  -
   1247  2b8d				  -	      .byte	%01111110	; SNAKE
   1248  2b8d				  -	      .byte	%01000010	; SNAKE
   1249  2b8d				  -	      .byte	%01100010	; SNAKE
   1250  2b8d				  -	      .byte	%00000010	; SNAKE
   1251  2b8d				  -	      .byte	%01111110	; SNAKE
   1252  2b8d				  -	      .byte	%00000010	; SNAKE
   1253  2b8d				  -	      .byte	%01000010	; SNAKE
   1254  2b8d				  -	      .byte	%01111110	; SNAKE
   1255  2b8d				  -
   1256  2b8d				  -			;byte %00000000 ; SNAKE
   1257  2b8d				  -
   1258  2b8d				  -	      .byte	%00001110	; SNAKE
   1259  2b8d				  -	      .byte	%00001010	; SNAKE
   1260  2b8d				  -	      .byte	%00000010	; SNAKE
   1261  2b8d				  -	      .byte	%01111110	; SNAKE
   1262  2b8d				  -	      .byte	%01000010	; SNAKE
   1263  2b8d				  -	      .byte	%01000010	; SNAKE
   1264  2b8d				  -	      .byte	%01000010	; SNAKE
   1265  2b8d				  -	      .byte	%01100110	; SNAKE
   1266  2b8d				  -
   1267  2b8d				  -			;byte %00000000 ; SNAKE
   1268  2b8d				  -
   1269  2b8d				  -	      .byte	%01111110	; SNAKE
   1270  2b8d				  -	      .byte	%01000010	; SNAKE
   1271  2b8d				  -	      .byte	%01100010	; SNAKE
   1272  2b8d				  -	      .byte	%00000010	; SNAKE
   1273  2b8d				  -	      .byte	%01111110	; SNAKE
   1274  2b8d				  -	      .byte	%01000000	; SNAKE
   1275  2b8d				  -	      .byte	%01000010	; SNAKE
   1276  2b8d				  -	      .byte	%01111110	; SNAKE
   1277  2b8d				  -
   1278  2b8d				  -			;byte %00000000 ; SNAKE
   1279  2b8d				  -
   1280  2b8d				  -	      .byte	%01111110	; SNAKE
   1281  2b8d				  -	      .byte	%01000010	; SNAKE
   1282  2b8d				  -	      .byte	%01000010	; SNAKE
   1283  2b8d				  -	      .byte	%01111110	; SNAKE
   1284  2b8d				  -	      .byte	%01000000	; SNAKE
   1285  2b8d				  -	      .byte	%01000110	; SNAKE
   1286  2b8d				  -	      .byte	%01000010	; SNAKE
   1287  2b8d				  -	      .byte	%01111110	; SNAKE
   1288  2b8d				  -
   1289  2b8d				  -			;byte %00000000 ; SNAKE
   1290  2b8d				  -
   1291  2b8d				  -	      .byte	%00000110	; SNAKE
   1292  2b8d				  -	      .byte	%00000010	; SNAKE
   1293  2b8d				  -	      .byte	%00000010	; SNAKE
   1294  2b8d				  -	      .byte	%00000010	; SNAKE
   1295  2b8d				  -	      .byte	%00000010	; SNAKE
   1296  2b8d				  -	      .byte	%01100010	; SNAKE
   1297  2b8d				  -	      .byte	%01000010	; SNAKE
   1298  2b8d				  -	      .byte	%01111110	; SNAKE
   1299  2b8d				  -
   1300  2b8d				  -			;byte %00000000 ; SNAKE
   1301  2b8d				  -
   1302  2b8d				  -	      .byte	%01111110	; SNAKE
   1303  2b8d				  -	      .byte	%01000010	; SNAKE
   1304  2b8d				  -	      .byte	%01000010	; SNAKE
   1305  2b8d				  -	      .byte	%01000010	; SNAKE
   1306  2b8d				  -	      .byte	%01111110	; SNAKE
   1307  2b8d				  -	      .byte	%01000010	; SNAKE
   1308  2b8d				  -	      .byte	%01000010	; SNAKE
   1309  2b8d				  -	      .byte	%01111110	; SNAKE
   1310  2b8d				  -
   1311  2b8d				  -			;byte %00000000 ; SNAKE
   1312  2b8d				  -
   1313  2b8d				  -	      .byte	%00001110	; SNAKE
   1314  2b8d				  -	      .byte	%00001010	; SNAKE
   1315  2b8d				  -	      .byte	%00000010	; SNAKE
   1316  2b8d				  -	      .byte	%00000010	; SNAKE
   1317  2b8d				  -	      .byte	%01111110	; SNAKE
   1318  2b8d				  -	      .byte	%01000010	; SNAKE
   1319  2b8d				  -	      .byte	%01000010	; SNAKE
   1320  2b8d				  -	      .byte	%01111110	; SNAKE
   1321  2b8d				  -
   1322  2b8d				  -
   1323  2b8d					      endif		; SNAKE
   1324  2b8d
   1325  2b8d				  -	      if	fontstyle == PLOK
   1326  2b8d				  -
   1327  2b8d				  -			;byte %00000000 ; PLOK
   1328  2b8d				  -
   1329  2b8d				  -	      .byte	%00000000	; PLOK
   1330  2b8d				  -	      .byte	%00111000	; PLOK
   1331  2b8d				  -	      .byte	%01100100	; PLOK
   1332  2b8d				  -	      .byte	%01100010	; PLOK
   1333  2b8d				  -	      .byte	%01100010	; PLOK
   1334  2b8d				  -	      .byte	%00110110	; PLOK
   1335  2b8d				  -	      .byte	%00011100	; PLOK
   1336  2b8d				  -	      .byte	%00000000	; PLOK
   1337  2b8d				  -
   1338  2b8d				  -			;byte %00000000 ; PLOK
   1339  2b8d				  -
   1340  2b8d				  -	      .byte	%00000000	; PLOK
   1341  2b8d				  -	      .byte	%00010000	; PLOK
   1342  2b8d				  -	      .byte	%00011100	; PLOK
   1343  2b8d				  -	      .byte	%00011100	; PLOK
   1344  2b8d				  -	      .byte	%00011000	; PLOK
   1345  2b8d				  -	      .byte	%00111000	; PLOK
   1346  2b8d				  -	      .byte	%00011000	; PLOK
   1347  2b8d				  -	      .byte	%00000000	; PLOK
   1348  2b8d				  -
   1349  2b8d				  -			;byte %00000000 ; PLOK
   1350  2b8d				  -
   1351  2b8d				  -	      .byte	%00000000	; PLOK
   1352  2b8d				  -	      .byte	%00001110	; PLOK
   1353  2b8d				  -	      .byte	%01111110	; PLOK
   1354  2b8d				  -	      .byte	%00011000	; PLOK
   1355  2b8d				  -	      .byte	%00001100	; PLOK
   1356  2b8d				  -	      .byte	%00000110	; PLOK
   1357  2b8d				  -	      .byte	%00111100	; PLOK
   1358  2b8d				  -	      .byte	%00000000	; PLOK
   1359  2b8d				  -
   1360  2b8d				  -			;byte %00000000 ; PLOK
   1361  2b8d				  -
   1362  2b8d				  -	      .byte	%00000000	; PLOK
   1363  2b8d				  -	      .byte	%00111100	; PLOK
   1364  2b8d				  -	      .byte	%01101110	; PLOK
   1365  2b8d				  -	      .byte	%00001110	; PLOK
   1366  2b8d				  -	      .byte	%00011100	; PLOK
   1367  2b8d				  -	      .byte	%00000110	; PLOK
   1368  2b8d				  -	      .byte	%01111100	; PLOK
   1369  2b8d				  -	      .byte	%00000000	; PLOK
   1370  2b8d				  -
   1371  2b8d				  -			;byte %00000000 ; PLOK
   1372  2b8d				  -
   1373  2b8d				  -	      .byte	%00000000	; PLOK
   1374  2b8d				  -	      .byte	%00011000	; PLOK
   1375  2b8d				  -	      .byte	%01111110	; PLOK
   1376  2b8d				  -	      .byte	%01101100	; PLOK
   1377  2b8d				  -	      .byte	%00100100	; PLOK
   1378  2b8d				  -	      .byte	%00110000	; PLOK
   1379  2b8d				  -	      .byte	%00110000	; PLOK
   1380  2b8d				  -	      .byte	%00000000	; PLOK
   1381  2b8d				  -
   1382  2b8d				  -			;byte %00000000 ; PLOK
   1383  2b8d				  -
   1384  2b8d				  -	      .byte	%00000000	; PLOK
   1385  2b8d				  -	      .byte	%00111100	; PLOK
   1386  2b8d				  -	      .byte	%01001110	; PLOK
   1387  2b8d				  -	      .byte	%00011100	; PLOK
   1388  2b8d				  -	      .byte	%01100000	; PLOK
   1389  2b8d				  -	      .byte	%01111100	; PLOK
   1390  2b8d				  -	      .byte	%00011100	; PLOK
   1391  2b8d				  -	      .byte	%00000000	; PLOK
   1392  2b8d				  -
   1393  2b8d				  -			;byte %00000000 ; PLOK
   1394  2b8d				  -
   1395  2b8d				  -	      .byte	%00000000	; PLOK
   1396  2b8d				  -	      .byte	%00111100	; PLOK
   1397  2b8d				  -	      .byte	%01000110	; PLOK
   1398  2b8d				  -	      .byte	%01101100	; PLOK
   1399  2b8d				  -	      .byte	%01110000	; PLOK
   1400  2b8d				  -	      .byte	%00111000	; PLOK
   1401  2b8d				  -	      .byte	%00010000	; PLOK
   1402  2b8d				  -	      .byte	%00000000	; PLOK
   1403  2b8d				  -
   1404  2b8d				  -			;byte %00000000 ; PLOK
   1405  2b8d				  -
   1406  2b8d				  -	      .byte	%00000000	; PLOK
   1407  2b8d				  -	      .byte	%00111100	; PLOK
   1408  2b8d				  -	      .byte	%00011100	; PLOK
   1409  2b8d				  -	      .byte	%00001100	; PLOK
   1410  2b8d				  -	      .byte	%00000110	; PLOK
   1411  2b8d				  -	      .byte	%01111110	; PLOK
   1412  2b8d				  -	      .byte	%00110000	; PLOK
   1413  2b8d				  -	      .byte	%00000000	; PLOK
   1414  2b8d				  -
   1415  2b8d				  -			;byte %00000000 ; PLOK
   1416  2b8d				  -
   1417  2b8d				  -	      .byte	%00000000	; PLOK
   1418  2b8d				  -	      .byte	%00111100	; PLOK
   1419  2b8d				  -	      .byte	%01001110	; PLOK
   1420  2b8d				  -	      .byte	%01101110	; PLOK
   1421  2b8d				  -	      .byte	%00111100	; PLOK
   1422  2b8d				  -	      .byte	%01100100	; PLOK
   1423  2b8d				  -	      .byte	%00111000	; PLOK
   1424  2b8d				  -	      .byte	%00000000	; PLOK
   1425  2b8d				  -
   1426  2b8d				  -			;byte %00000000 ; PLOK
   1427  2b8d				  -
   1428  2b8d				  -	      .byte	%00000000	; PLOK
   1429  2b8d				  -	      .byte	%00011000	; PLOK
   1430  2b8d				  -	      .byte	%00001100	; PLOK
   1431  2b8d				  -	      .byte	%00011100	; PLOK
   1432  2b8d				  -	      .byte	%00100110	; PLOK
   1433  2b8d				  -	      .byte	%01001110	; PLOK
   1434  2b8d				  -	      .byte	%00111100	; PLOK
   1435  2b8d				  -	      .byte	%00000000	; PLOK
   1436  2b8d				  -
   1437  2b8d					      endif		; PLOK
   1438  2b8d
   1439  2b8d							; ### any characters that aren't font specific follow...
   1440  2b8d
   1441  2b8d				  -	      ifconst	fontcharSPACE
   1442  2b8d				  -			;byte %00000000 ; SYMBOLS
   1443  2b8d				  -
   1444  2b8d				  -	      .byte	%00000000	; SYMBOLS
   1445  2b8d				  -	      .byte	%00000000	; SYMBOLS
   1446  2b8d				  -	      .byte	%00000000	; SYMBOLS
   1447  2b8d				  -	      .byte	%00000000	; SYMBOLS
   1448  2b8d				  -	      .byte	%00000000	; SYMBOLS
   1449  2b8d				  -	      .byte	%00000000	; SYMBOLS
   1450  2b8d				  -	      .byte	%00000000	; SYMBOLS
   1451  2b8d				  -	      .byte	%00000000	; SYMBOLS
   1452  2b8d				  -
   1453  2b8d				  -			;byte %00000000 ; SYMBOLS
   1454  2b8d					      endif		; fontcharSPACE
   1455  2b8d
   1456  2b8d				  -	      ifconst	fontcharDOLLAR
   1457  2b8d				  -			;byte %00000000 ; SYMBOLS
   1458  2b8d				  -
   1459  2b8d				  -	      .byte	%00000000	; SYMBOLS
   1460  2b8d				  -	      .byte	%00010000	; SYMBOLS
   1461  2b8d				  -	      .byte	%01111100	; SYMBOLS
   1462  2b8d				  -	      .byte	%00010010	; SYMBOLS
   1463  2b8d				  -	      .byte	%01111100	; SYMBOLS
   1464  2b8d				  -	      .byte	%10010000	; SYMBOLS
   1465  2b8d				  -	      .byte	%01111100	; SYMBOLS
   1466  2b8d				  -	      .byte	%00010000	; SYMBOLS
   1467  2b8d				  -
   1468  2b8d				  -			;byte %00000000 ; SYMBOLS
   1469  2b8d				  -
   1470  2b8d					      endif		; fontcharDOLLAR
   1471  2b8d
   1472  2b8d				  -	      ifconst	fontcharPOUND
   1473  2b8d				  -			;byte %00000000 ; SYMBOLS
   1474  2b8d				  -
   1475  2b8d				  -	      .byte	%01111110	; SYMBOLS
   1476  2b8d				  -	      .byte	%01000000	; SYMBOLS
   1477  2b8d				  -	      .byte	%00100000	; SYMBOLS
   1478  2b8d				  -	      .byte	%00100000	; SYMBOLS
   1479  2b8d				  -	      .byte	%01111000	; SYMBOLS
   1480  2b8d				  -	      .byte	%00100000	; SYMBOLS
   1481  2b8d				  -	      .byte	%00100010	; SYMBOLS
   1482  2b8d				  -	      .byte	%00011100	; SYMBOLS
   1483  2b8d				  -
   1484  2b8d				  -			;byte %00000000 ; SYMBOLS
   1485  2b8d				  -
   1486  2b8d					      endif		; fontcharPOUND
   1487  2b8d
   1488  2b8d
   1489  2b8d				  -	      ifconst	fontcharMRHAPPY
   1490  2b8d				  -			;byte %00000000 ; SYMBOLS
   1491  2b8d				  -
   1492  2b8d				  -	      .byte	%00111100	; SYMBOLS
   1493  2b8d				  -	      .byte	%01100110	; SYMBOLS
   1494  2b8d				  -	      .byte	%01011010	; SYMBOLS
   1495  2b8d				  -	      .byte	%01111110	; SYMBOLS
   1496  2b8d				  -	      .byte	%01111110	; SYMBOLS
   1497  2b8d				  -	      .byte	%01011010	; SYMBOLS
   1498  2b8d				  -	      .byte	%01111110	; SYMBOLS
   1499  2b8d				  -	      .byte	%00111100	; SYMBOLS
   1500  2b8d				  -
   1501  2b8d				  -			;byte %00000000 ; SYMBOLS
   1502  2b8d				  -
   1503  2b8d					      endif		; fontcharMRHAPPY
   1504  2b8d
   1505  2b8d				  -	      ifconst	fontcharMRSAD
   1506  2b8d				  -			;byte %00000000 ; SYMBOLS
   1507  2b8d				  -
   1508  2b8d				  -	      .byte	%00111100	; SYMBOLS
   1509  2b8d				  -	      .byte	%01011010	; SYMBOLS
   1510  2b8d				  -	      .byte	%01100110	; SYMBOLS
   1511  2b8d				  -	      .byte	%01111110	; SYMBOLS
   1512  2b8d				  -	      .byte	%01111110	; SYMBOLS
   1513  2b8d				  -	      .byte	%01011010	; SYMBOLS
   1514  2b8d				  -	      .byte	%01111110	; SYMBOLS
   1515  2b8d				  -	      .byte	%00111100	; SYMBOLS
   1516  2b8d				  -
   1517  2b8d				  -			;byte %00000000 ; SYMBOLS
   1518  2b8d				  -
   1519  2b8d					      endif		; fontcharMRSAD
   1520  2b8d
   1521  2b8d
   1522  2b8d				  -	      ifconst	fontcharCOPYRIGHT
   1523  2b8d				  -			;byte %00000000 ; SYMBOLS
   1524  2b8d				  -
   1525  2b8d				  -	      .byte	%00000000	; SYMBOLS
   1526  2b8d				  -	      .byte	%00111000	; SYMBOLS
   1527  2b8d				  -	      .byte	%01000100	; SYMBOLS
   1528  2b8d				  -	      .byte	%10111010	; SYMBOLS
   1529  2b8d				  -	      .byte	%10100010	; SYMBOLS
   1530  2b8d				  -	      .byte	%10111010	; SYMBOLS
   1531  2b8d				  -	      .byte	%01000100	; SYMBOLS
   1532  2b8d				  -	      .byte	%00111000	; SYMBOLS
   1533  2b8d				  -
   1534  2b8d				  -			;byte %00000000 ; SYMBOLS
   1535  2b8d				  -
   1536  2b8d					      endif		; fontcharCOPYRIGHT
   1537  2b8d
   1538  2b8d
   1539  2b8d				  -	      ifconst	fontcharFUJI
   1540  2b8d				  -
   1541  2b8d				  -			;byte %00000000 ; ** these commented-out blanks are for the preview generation program
   1542  2b8d				  -
   1543  2b8d				  -	      .byte	%01110000	; SYMBOLS
   1544  2b8d				  -	      .byte	%01111001	; SYMBOLS
   1545  2b8d				  -	      .byte	%00011101	; SYMBOLS
   1546  2b8d				  -	      .byte	%00001101	; SYMBOLS
   1547  2b8d				  -	      .byte	%00001101	; SYMBOLS
   1548  2b8d				  -	      .byte	%00001101	; SYMBOLS
   1549  2b8d				  -	      .byte	%00001101	; SYMBOLS
   1550  2b8d				  -	      .byte	%00000000	; SYMBOLS
   1551  2b8d				  -
   1552  2b8d				  -			;byte %00000000 ; SYMBOLS
   1553  2b8d				  -
   1554  2b8d				  -	      .byte	%00001110	; SYMBOLS
   1555  2b8d				  -	      .byte	%10011110	; SYMBOLS
   1556  2b8d				  -	      .byte	%10111000	; SYMBOLS
   1557  2b8d				  -	      .byte	%10110000	; SYMBOLS
   1558  2b8d				  -	      .byte	%10110000	; SYMBOLS
   1559  2b8d				  -	      .byte	%10110000	; SYMBOLS
   1560  2b8d				  -	      .byte	%10110000	; SYMBOLS
   1561  2b8d				  -	      .byte	%00000000	; SYMBOLS
   1562  2b8d				  -
   1563  2b8d				  -			;byte %00000000 ; SYMBOLS
   1564  2b8d				  -
   1565  2b8d					      endif		; fontcharFUJI
   1566  2b8d
   1567  2b8d
   1568  2b8d				  -	      ifconst	fontcharHEART
   1569  2b8d				  -			;byte %00000000 ; SYMBOLS
   1570  2b8d				  -
   1571  2b8d				  -	      .byte	%00010000	; SYMBOLS
   1572  2b8d				  -	      .byte	%00111000	; SYMBOLS
   1573  2b8d				  -	      .byte	%01111100	; SYMBOLS
   1574  2b8d				  -	      .byte	%01111100	; SYMBOLS
   1575  2b8d				  -	      .byte	%11111110	; SYMBOLS
   1576  2b8d				  -	      .byte	%11111110	; SYMBOLS
   1577  2b8d				  -	      .byte	%11101110	; SYMBOLS
   1578  2b8d				  -	      .byte	%01000100	; SYMBOLS
   1579  2b8d				  -
   1580  2b8d				  -			;byte %00000000 ; SYMBOLS
   1581  2b8d				  -
   1582  2b8d					      endif		; fontcharHEART
   1583  2b8d
   1584  2b8d				  -	      ifconst	fontcharDIAMOND
   1585  2b8d				  -			;byte %00000000 ; SYMBOLS
   1586  2b8d				  -
   1587  2b8d				  -	      .byte	%00010000	; SYMBOLS
   1588  2b8d				  -	      .byte	%00111000	; SYMBOLS
   1589  2b8d				  -	      .byte	%01111100	; SYMBOLS
   1590  2b8d				  -	      .byte	%11111110	; SYMBOLS
   1591  2b8d				  -	      .byte	%11111110	; SYMBOLS
   1592  2b8d				  -	      .byte	%01111100	; SYMBOLS
   1593  2b8d				  -	      .byte	%00111000	; SYMBOLS
   1594  2b8d				  -	      .byte	%00010000	; SYMBOLS
   1595  2b8d				  -
   1596  2b8d				  -			;byte %00000000 ; SYMBOLS
   1597  2b8d				  -
   1598  2b8d					      endif		; fontcharDIAMOND
   1599  2b8d
   1600  2b8d				  -	      ifconst	fontcharSPADE
   1601  2b8d				  -			;byte %00000000 ; SYMBOLS
   1602  2b8d				  -
   1603  2b8d				  -	      .byte	%00111000	; SYMBOLS
   1604  2b8d				  -	      .byte	%00010000	; SYMBOLS
   1605  2b8d				  -	      .byte	%01010100	; SYMBOLS
   1606  2b8d				  -	      .byte	%11111110	; SYMBOLS
   1607  2b8d				  -	      .byte	%11111110	; SYMBOLS
   1608  2b8d				  -	      .byte	%01111100	; SYMBOLS
   1609  2b8d				  -	      .byte	%00111000	; SYMBOLS
   1610  2b8d				  -	      .byte	%00010000	; SYMBOLS
   1611  2b8d				  -
   1612  2b8d				  -			;byte %00000000 ; SYMBOLS
   1613  2b8d				  -
   1614  2b8d					      endif		; fontcharSPADE
   1615  2b8d
   1616  2b8d				  -	      ifconst	fontcharCLUB
   1617  2b8d				  -			;byte %00000000 ; SYMBOLS
   1618  2b8d				  -
   1619  2b8d				  -	      .byte	%00111000	; SYMBOLS
   1620  2b8d				  -	      .byte	%00010000	; SYMBOLS
   1621  2b8d				  -	      .byte	%11010110	; SYMBOLS
   1622  2b8d				  -	      .byte	%11111110	; SYMBOLS
   1623  2b8d				  -	      .byte	%11010110	; SYMBOLS
   1624  2b8d				  -	      .byte	%00111000	; SYMBOLS
   1625  2b8d				  -	      .byte	%00111000	; SYMBOLS
   1626  2b8d				  -	      .byte	%00000000	; SYMBOLS
   1627  2b8d				  -
   1628  2b8d				  -			;byte %00000000 ; SYMBOLS
   1629  2b8d				  -
   1630  2b8d					      endif		; fontcharCLUB
   1631  2b8d
   1632  2b8d
   1633  2b8d				  -	      ifconst	fontcharCOLON
   1634  2b8d				  -			;byte %00000000 ; SYMBOLS
   1635  2b8d				  -
   1636  2b8d				  -	      .byte	%00000000	; SYMBOLS
   1637  2b8d				  -	      .byte	%00011000	; SYMBOLS
   1638  2b8d				  -	      .byte	%00011000	; SYMBOLS
   1639  2b8d				  -	      .byte	%00000000	; SYMBOLS
   1640  2b8d				  -	      .byte	%00000000	; SYMBOLS
   1641  2b8d				  -	      .byte	%00011000	; SYMBOLS
   1642  2b8d				  -	      .byte	%00011000	; SYMBOLS
   1643  2b8d				  -	      .byte	%00000000	; SYMBOLS
   1644  2b8d				  -
   1645  2b8d				  -			;byte %00000000 ; SYMBOLS
   1646  2b8d				  -
   1647  2b8d					      endif		; fontcharCOLON
   1648  2b8d
   1649  2b8d
   1650  2b8d				  -	      ifconst	fontcharBLOCK
   1651  2b8d				  -
   1652  2b8d				  -			;byte %00000000 ; SYMBOLS
   1653  2b8d				  -
   1654  2b8d				  -	      .byte	%11111111	; SYMBOLS
   1655  2b8d				  -	      .byte	%11111111	; SYMBOLS
   1656  2b8d				  -	      .byte	%11111111	; SYMBOLS
   1657  2b8d				  -	      .byte	%11111111	; SYMBOLS
   1658  2b8d				  -	      .byte	%11111111	; SYMBOLS
   1659  2b8d				  -	      .byte	%11111111	; SYMBOLS
   1660  2b8d				  -	      .byte	%11111111	; SYMBOLS
   1661  2b8d				  -	      .byte	%11111111	; SYMBOLS
   1662  2b8d				  -
   1663  2b8d				  -			;byte %00000000 ; SYMBOLS
   1664  2b8d				  -
   1665  2b8d					      endif		; fontcharBLOCK
   1666  2b8d
   1667  2b8d				  -	      ifconst	fontcharUNDERLINE
   1668  2b8d				  -
   1669  2b8d				  -			;byte %00000000 ; SYMBOLS
   1670  2b8d				  -
   1671  2b8d				  -	      .byte	%11111111	; SYMBOLS
   1672  2b8d				  -	      .byte	%00000000	; SYMBOLS
   1673  2b8d				  -	      .byte	%00000000	; SYMBOLS
   1674  2b8d				  -	      .byte	%00000000	; SYMBOLS
   1675  2b8d				  -	      .byte	%00000000	; SYMBOLS
   1676  2b8d				  -	      .byte	%00000000	; SYMBOLS
   1677  2b8d				  -	      .byte	%00000000	; SYMBOLS
   1678  2b8d				  -	      .byte	%00000000	; SYMBOLS
   1679  2b8d				  -
   1680  2b8d				  -			;byte %00000000 ; SYMBOLS
   1681  2b8d				  -
   1682  2b8d					      endif		; fontcharUNDERLINE
   1683  2b8d
   1684  2b8d				  -	      ifconst	fontcharARISIDE
   1685  2b8d				  -			;byte %00000000 ; SYMBOLS
   1686  2b8d				  -
   1687  2b8d				  -	      .byte	%00000000	; SYMBOLS
   1688  2b8d				  -	      .byte	%00101010	; SYMBOLS
   1689  2b8d				  -	      .byte	%00101010	; SYMBOLS
   1690  2b8d				  -	      .byte	%00101100	; SYMBOLS
   1691  2b8d				  -	      .byte	%01111111	; SYMBOLS
   1692  2b8d				  -	      .byte	%00110111	; SYMBOLS
   1693  2b8d				  -	      .byte	%00000010	; SYMBOLS
   1694  2b8d				  -	      .byte	%00000001	; SYMBOLS
   1695  2b8d				  -
   1696  2b8d				  -			;byte %00000000 ; SYMBOLS
   1697  2b8d				  -
   1698  2b8d					      endif		; fontcharARISIDE
   1699  2b8d
   1700  2b8d				  -	      ifconst	fontcharARIFACE
   1701  2b8d				  -			;byte %00000000 ; SYMBOLS
   1702  2b8d				  -
   1703  2b8d				  -	      .byte	%00001000	; SYMBOLS
   1704  2b8d				  -	      .byte	%00011100	; SYMBOLS
   1705  2b8d				  -	      .byte	%00111110	; SYMBOLS
   1706  2b8d				  -	      .byte	%00101010	; SYMBOLS
   1707  2b8d				  -	      .byte	%00011100	; SYMBOLS
   1708  2b8d				  -	      .byte	%01010100	; SYMBOLS
   1709  2b8d				  -	      .byte	%00100100	; SYMBOLS
   1710  2b8d				  -	      .byte	%00000010	; SYMBOLS
   1711  2b8d				  -
   1712  2b8d				  -			;byte %00000000 ; SYMBOLS
   1713  2b8d				  -
   1714  2b8d				  -
   1715  2b8d					      endif		; fontcharARIRACE
   1716  2b8d
------- FILE titlescreen/asm/titlescreen.asm
    303  2b8d					      endif
    304  2b8d
    305  2b8d					      ifconst	mk_gameselect_on
------- FILE titlescreen/gameselect_image.asm LEVEL 3 PASS 3
      0  2b8d					      include	"titlescreen/gameselect_image.asm"
      1  2b8d				  -	      ifnconst	bmp_gameselect_color
      2  2b8d				  -bmp_gameselect_color
      3  2b8d					      endif
      4  2b8d		       0f		      .byte.b	$0f
      5  2b8e
      6  2b8e				  -	      if	>. != >[.+5]
      7  2b8e				  -	      align	256
      8  2b8e					      endif
      9  2b8e				   bmp_gameselect_CHAR0
     10  2b8e
     11  2b8e		       7a		      .byte.b	%01111010
     12  2b8f		       8a		      .byte.b	%10001010
     13  2b90		       bb		      .byte.b	%10111011
     14  2b91		       82		      .byte.b	%10000010
     15  2b92		       79		      .byte.b	%01111001
     16  2b93
     17  2b93				  -	      if	>. != >[.+5]
     18  2b93				  -	      align	256
     19  2b93					      endif
     20  2b93				   bmp_gameselect_CHAR1
     21  2b93
     22  2b93		       51		      .byte.b	%01010001
     23  2b94		       51		      .byte.b	%01010001
     24  2b95		       d5		      .byte.b	%11010101
     25  2b96		       5b		      .byte.b	%01011011
     26  2b97		       91		      .byte.b	%10010001
     27  2b98
     28  2b98				  -	      if	>. != >[.+5]
     29  2b98				  -	      align	256
     30  2b98					      endif
     31  2b98				   bmp_gameselect_CHAR2
     32  2b98		       78		      .byte.b	%01111000
     33  2b99		       40		      .byte.b	%01000000
     34  2b9a		       70		      .byte.b	%01110000
     35  2b9b		       40		      .byte.b	%01000000
     36  2b9c		       78		      .byte.b	%01111000
     37  2b9d
     38  2b9d				  -	      if	>. != >[.+5]
     39  2b9d				  -	      align	256
     40  2b9d					      endif
     41  2b9d				   bmp_gameselect_CHAR3
     42  2b9d		       00		      .byte.b	%00000000
     43  2b9e		       00		      .byte.b	%00000000
     44  2b9f		       00		      .byte.b	%00000000
     45  2ba0		       00		      .byte.b	%00000000
     46  2ba1		       00		      .byte.b	%00000000
     47  2ba2
     48  2ba2				  -	      if	>. != >[.+80]
     49  2ba2				  -	      align	256
     50  2ba2					      endif
     51  2ba2
     52  2ba2				   font_gameselect_img
     53  2ba2		       3c		      .byte.b	%00111100
     54  2ba3		       66		      .byte.b	%01100110
     55  2ba4		       66		      .byte.b	%01100110
     56  2ba5		       66		      .byte.b	%01100110
     57  2ba6		       3c		      .byte.b	%00111100
     58  2ba7
     59  2ba7		       3c		      .byte.b	%00111100
     60  2ba8		       18		      .byte.b	%00011000
     61  2ba9		       18		      .byte.b	%00011000
     62  2baa		       18		      .byte.b	%00011000
     63  2bab		       38		      .byte.b	%00111000
     64  2bac
     65  2bac		       7e		      .byte.b	%01111110
     66  2bad		       60		      .byte.b	%01100000
     67  2bae		       3c		      .byte.b	%00111100
     68  2baf		       06		      .byte.b	%00000110
     69  2bb0		       7c		      .byte.b	%01111100
     70  2bb1
     71  2bb1		       7c		      .byte.b	%01111100
     72  2bb2		       06		      .byte.b	%00000110
     73  2bb3		       1c		      .byte.b	%00011100
     74  2bb4		       06		      .byte.b	%00000110
     75  2bb5		       7c		      .byte.b	%01111100
     76  2bb6
     77  2bb6		       06		      .byte.b	%00000110
     78  2bb7		       06		      .byte.b	%00000110
     79  2bb8		       7e		      .byte.b	%01111110
     80  2bb9		       66		      .byte.b	%01100110
     81  2bba		       66		      .byte.b	%01100110
     82  2bbb
     83  2bbb		       7c		      .byte.b	%01111100
     84  2bbc		       06		      .byte.b	%00000110
     85  2bbd		       7c		      .byte.b	%01111100
     86  2bbe		       60		      .byte.b	%01100000
     87  2bbf		       7e		      .byte.b	%01111110
     88  2bc0
     89  2bc0		       3c		      .byte.b	%00111100
     90  2bc1		       66		      .byte.b	%01100110
     91  2bc2		       7c		      .byte.b	%01111100
     92  2bc3		       60		      .byte.b	%01100000
     93  2bc4		       3c		      .byte.b	%00111100
     94  2bc5
     95  2bc5		       18		      .byte.b	%00011000
     96  2bc6		       18		      .byte.b	%00011000
     97  2bc7		       0c		      .byte.b	%00001100
     98  2bc8		       06		      .byte.b	%00000110
     99  2bc9		       7e		      .byte.b	%01111110
    100  2bca
    101  2bca		       3c		      .byte.b	%00111100
    102  2bcb		       66		      .byte.b	%01100110
    103  2bcc		       3c		      .byte.b	%00111100
    104  2bcd		       66		      .byte.b	%01100110
    105  2bce		       3c		      .byte.b	%00111100
    106  2bcf
    107  2bcf		       3c		      .byte.b	%00111100
    108  2bd0		       06		      .byte.b	%00000110
    109  2bd1		       3e		      .byte.b	%00111110
    110  2bd2		       66		      .byte.b	%01100110
    111  2bd3		       3c		      .byte.b	%00111100
    112  2bd4
    113  2bd4				  -	      ifnconst	gamenumber
    114  2bd4				  -gamenumber
    115  2bd4					      endif
    116  2bd4		       00		      .byte.b	0
    117  2bd5
------- FILE titlescreen/asm/titlescreen.asm
    307  2bd5					      endif
    308  2bd5
    309  2bd5				  -	      ifconst	mk_player_on
    310  2bd5				  -	      include	"titlescreen/asm/player_kernel.asm"
    311  2bd5					      endif		;mk_player_on
    312  2bd5
    313  2bd5
------- FILE d:\Firmaplus\Firmaplus_intern\Atari\PlusROM\Projekte-batariBasic\CaveApocalypse\C.A.V.E. Apocalypse.bas.asm
   6316  2bd5
   6317  2bd5				   .
   6318  2bd5							; 
   6319  2bd5
   6320  2bd5				   .
   6321  2bd5							; 
   6322  2bd5
   6323  2bd5				   .
   6324  2bd5							; 
   6325  2bd5
   6326  2bd5				   .
   6327  2bd5							; 
   6328  2bd5
   6329  2bd5				   .
   6330  2bd5							; 
   6331  2bd5
   6332  2bd5				   .L0686		;  bank 3
   6333  2bd5
   6334  2bd5					      if	ECHO2
      1020 bytes of ROM space left in bank 2
   6335  2bd5					      echo	"    ",[(start_bank2 - *)]d , "bytes of ROM space left in bank 2")
   6336  2bd5					      endif
   6337  2bd5		       00 01	   ECHO2      =	1
   6338  2fd1					      ORG	$2FF4-bscode_length
   6339  2fd1					      RORG	$BFF4-bscode_length
   6340  2fd1		       a2 ff	   start_bank2 ldx	#$ff
   6341  2fd3				  -	      ifconst	FASTFETCH	; using DPC+
   6342  2fd3				  -	      stx	FASTFETCH
   6343  2fd3					      endif
   6344  2fd3		       9a		      txs
   6345  2fd4				  -	      if	bankswitch == 64
   6346  2fd4				  -	      lda	#(((>(start-1)) & $0F) | $F0)
   6347  2fd4					      else
   6348  2fd4		       a9 f2		      lda	#>(start-1)
   6349  2fd6					      endif
   6350  2fd6		       48		      pha
   6351  2fd7		       a9 b0		      lda	#<(start-1)
   6352  2fd9		       48		      pha
   6353  2fda		       48		      pha
   6354  2fdb		       8a		      txa
   6355  2fdc		       48		      pha
   6356  2fdd		       ba		      tsx
   6357  2fde					      if	bankswitch != 64
   6358  2fde		       b5 04		      lda	4,x	; get high byte of return address
   6359  2fe0		       2a		      rol
   6360  2fe1		       2a		      rol
   6361  2fe2		       2a		      rol
   6362  2fe3		       2a		      rol
   6363  2fe4		       29 03		      and	#bs_mask	;1 3 or 7 for F8/F6/F4
   6364  2fe6		       aa		      tax
   6365  2fe7		       e8		      inx
   6366  2fe8				  -	      else
   6367  2fe8				  -	      lda	4,x	; get high byte of return address
   6368  2fe8				  -	      tay
   6369  2fe8				  -	      ora	#$10	; change our bank nibble into a valid rom mirror
   6370  2fe8				  -	      sta	4,x
   6371  2fe8				  -	      tya
   6372  2fe8				  -	      lsr
   6373  2fe8				  -	      lsr
   6374  2fe8				  -	      lsr
   6375  2fe8				  -	      lsr
   6376  2fe8				  -	      tax
   6377  2fe8				  -	      inx
   6378  2fe8					      endif
   6379  2fe8		       bd f5 1f 	      lda	bankswitch_hotspot-1,x
   6380  2feb		       68		      pla
   6381  2fec		       aa		      tax
   6382  2fed		       68		      pla
   6383  2fee		       60		      rts
   6384  2fef				  -	      if	((* & $1FFF) > ((bankswitch_hotspot & $1FFF) - 1))
   6385  2fef				  -	      echo	"WARNING: size parameter in banksw.asm too small - the program probably will not work."
   6386  2fef				  -	      echo	"Change to",[(*-begin_bscode+1)&$FF]d,"and try again."
   6387  2fef					      endif
   6388  2ffc					      ORG	$2FFC
   6389  2ffc					      RORG	$BFFC
   6390  2ffc		       d1 bf		      .word.w	(start_bank2 & $ffff)
   6391  2ffe		       d1 bf		      .word.w	(start_bank2 & $ffff)
   6392  3000					      ORG	$3000
   6393  3000					      RORG	$D000
   6394  3000					      repeat	256
   6395  3000		       ff		      .byte.b	$ff
   6394  3000					      repend
   6395  3001		       ff		      .byte.b	$ff
   6394  3001					      repend
   6395  3002		       ff		      .byte.b	$ff
   6394  3002					      repend
   6395  3003		       ff		      .byte.b	$ff
   6394  3003					      repend
   6395  3004		       ff		      .byte.b	$ff
   6394  3004					      repend
   6395  3005		       ff		      .byte.b	$ff
   6394  3005					      repend
   6395  3006		       ff		      .byte.b	$ff
   6394  3006					      repend
   6395  3007		       ff		      .byte.b	$ff
   6394  3007					      repend
   6395  3008		       ff		      .byte.b	$ff
   6394  3008					      repend
   6395  3009		       ff		      .byte.b	$ff
   6394  3009					      repend
   6395  300a		       ff		      .byte.b	$ff
   6394  300a					      repend
   6395  300b		       ff		      .byte.b	$ff
   6394  300b					      repend
   6395  300c		       ff		      .byte.b	$ff
   6394  300c					      repend
   6395  300d		       ff		      .byte.b	$ff
   6394  300d					      repend
   6395  300e		       ff		      .byte.b	$ff
   6394  300e					      repend
   6395  300f		       ff		      .byte.b	$ff
   6394  300f					      repend
   6395  3010		       ff		      .byte.b	$ff
   6394  3010					      repend
   6395  3011		       ff		      .byte.b	$ff
   6394  3011					      repend
   6395  3012		       ff		      .byte.b	$ff
   6394  3012					      repend
   6395  3013		       ff		      .byte.b	$ff
   6394  3013					      repend
   6395  3014		       ff		      .byte.b	$ff
   6394  3014					      repend
   6395  3015		       ff		      .byte.b	$ff
   6394  3015					      repend
   6395  3016		       ff		      .byte.b	$ff
   6394  3016					      repend
   6395  3017		       ff		      .byte.b	$ff
   6394  3017					      repend
   6395  3018		       ff		      .byte.b	$ff
   6394  3018					      repend
   6395  3019		       ff		      .byte.b	$ff
   6394  3019					      repend
   6395  301a		       ff		      .byte.b	$ff
   6394  301a					      repend
   6395  301b		       ff		      .byte.b	$ff
   6394  301b					      repend
   6395  301c		       ff		      .byte.b	$ff
   6394  301c					      repend
   6395  301d		       ff		      .byte.b	$ff
   6394  301d					      repend
   6395  301e		       ff		      .byte.b	$ff
   6394  301e					      repend
   6395  301f		       ff		      .byte.b	$ff
   6394  301f					      repend
   6395  3020		       ff		      .byte.b	$ff
   6394  3020					      repend
   6395  3021		       ff		      .byte.b	$ff
   6394  3021					      repend
   6395  3022		       ff		      .byte.b	$ff
   6394  3022					      repend
   6395  3023		       ff		      .byte.b	$ff
   6394  3023					      repend
   6395  3024		       ff		      .byte.b	$ff
   6394  3024					      repend
   6395  3025		       ff		      .byte.b	$ff
   6394  3025					      repend
   6395  3026		       ff		      .byte.b	$ff
   6394  3026					      repend
   6395  3027		       ff		      .byte.b	$ff
   6394  3027					      repend
   6395  3028		       ff		      .byte.b	$ff
   6394  3028					      repend
   6395  3029		       ff		      .byte.b	$ff
   6394  3029					      repend
   6395  302a		       ff		      .byte.b	$ff
   6394  302a					      repend
   6395  302b		       ff		      .byte.b	$ff
   6394  302b					      repend
   6395  302c		       ff		      .byte.b	$ff
   6394  302c					      repend
   6395  302d		       ff		      .byte.b	$ff
   6394  302d					      repend
   6395  302e		       ff		      .byte.b	$ff
   6394  302e					      repend
   6395  302f		       ff		      .byte.b	$ff
   6394  302f					      repend
   6395  3030		       ff		      .byte.b	$ff
   6394  3030					      repend
   6395  3031		       ff		      .byte.b	$ff
   6394  3031					      repend
   6395  3032		       ff		      .byte.b	$ff
   6394  3032					      repend
   6395  3033		       ff		      .byte.b	$ff
   6394  3033					      repend
   6395  3034		       ff		      .byte.b	$ff
   6394  3034					      repend
   6395  3035		       ff		      .byte.b	$ff
   6394  3035					      repend
   6395  3036		       ff		      .byte.b	$ff
   6394  3036					      repend
   6395  3037		       ff		      .byte.b	$ff
   6394  3037					      repend
   6395  3038		       ff		      .byte.b	$ff
   6394  3038					      repend
   6395  3039		       ff		      .byte.b	$ff
   6394  3039					      repend
   6395  303a		       ff		      .byte.b	$ff
   6394  303a					      repend
   6395  303b		       ff		      .byte.b	$ff
   6394  303b					      repend
   6395  303c		       ff		      .byte.b	$ff
   6394  303c					      repend
   6395  303d		       ff		      .byte.b	$ff
   6394  303d					      repend
   6395  303e		       ff		      .byte.b	$ff
   6394  303e					      repend
   6395  303f		       ff		      .byte.b	$ff
   6394  303f					      repend
   6395  3040		       ff		      .byte.b	$ff
   6394  3040					      repend
   6395  3041		       ff		      .byte.b	$ff
   6394  3041					      repend
   6395  3042		       ff		      .byte.b	$ff
   6394  3042					      repend
   6395  3043		       ff		      .byte.b	$ff
   6394  3043					      repend
   6395  3044		       ff		      .byte.b	$ff
   6394  3044					      repend
   6395  3045		       ff		      .byte.b	$ff
   6394  3045					      repend
   6395  3046		       ff		      .byte.b	$ff
   6394  3046					      repend
   6395  3047		       ff		      .byte.b	$ff
   6394  3047					      repend
   6395  3048		       ff		      .byte.b	$ff
   6394  3048					      repend
   6395  3049		       ff		      .byte.b	$ff
   6394  3049					      repend
   6395  304a		       ff		      .byte.b	$ff
   6394  304a					      repend
   6395  304b		       ff		      .byte.b	$ff
   6394  304b					      repend
   6395  304c		       ff		      .byte.b	$ff
   6394  304c					      repend
   6395  304d		       ff		      .byte.b	$ff
   6394  304d					      repend
   6395  304e		       ff		      .byte.b	$ff
   6394  304e					      repend
   6395  304f		       ff		      .byte.b	$ff
   6394  304f					      repend
   6395  3050		       ff		      .byte.b	$ff
   6394  3050					      repend
   6395  3051		       ff		      .byte.b	$ff
   6394  3051					      repend
   6395  3052		       ff		      .byte.b	$ff
   6394  3052					      repend
   6395  3053		       ff		      .byte.b	$ff
   6394  3053					      repend
   6395  3054		       ff		      .byte.b	$ff
   6394  3054					      repend
   6395  3055		       ff		      .byte.b	$ff
   6394  3055					      repend
   6395  3056		       ff		      .byte.b	$ff
   6394  3056					      repend
   6395  3057		       ff		      .byte.b	$ff
   6394  3057					      repend
   6395  3058		       ff		      .byte.b	$ff
   6394  3058					      repend
   6395  3059		       ff		      .byte.b	$ff
   6394  3059					      repend
   6395  305a		       ff		      .byte.b	$ff
   6394  305a					      repend
   6395  305b		       ff		      .byte.b	$ff
   6394  305b					      repend
   6395  305c		       ff		      .byte.b	$ff
   6394  305c					      repend
   6395  305d		       ff		      .byte.b	$ff
   6394  305d					      repend
   6395  305e		       ff		      .byte.b	$ff
   6394  305e					      repend
   6395  305f		       ff		      .byte.b	$ff
   6394  305f					      repend
   6395  3060		       ff		      .byte.b	$ff
   6394  3060					      repend
   6395  3061		       ff		      .byte.b	$ff
   6394  3061					      repend
   6395  3062		       ff		      .byte.b	$ff
   6394  3062					      repend
   6395  3063		       ff		      .byte.b	$ff
   6394  3063					      repend
   6395  3064		       ff		      .byte.b	$ff
   6394  3064					      repend
   6395  3065		       ff		      .byte.b	$ff
   6394  3065					      repend
   6395  3066		       ff		      .byte.b	$ff
   6394  3066					      repend
   6395  3067		       ff		      .byte.b	$ff
   6394  3067					      repend
   6395  3068		       ff		      .byte.b	$ff
   6394  3068					      repend
   6395  3069		       ff		      .byte.b	$ff
   6394  3069					      repend
   6395  306a		       ff		      .byte.b	$ff
   6394  306a					      repend
   6395  306b		       ff		      .byte.b	$ff
   6394  306b					      repend
   6395  306c		       ff		      .byte.b	$ff
   6394  306c					      repend
   6395  306d		       ff		      .byte.b	$ff
   6394  306d					      repend
   6395  306e		       ff		      .byte.b	$ff
   6394  306e					      repend
   6395  306f		       ff		      .byte.b	$ff
   6394  306f					      repend
   6395  3070		       ff		      .byte.b	$ff
   6394  3070					      repend
   6395  3071		       ff		      .byte.b	$ff
   6394  3071					      repend
   6395  3072		       ff		      .byte.b	$ff
   6394  3072					      repend
   6395  3073		       ff		      .byte.b	$ff
   6394  3073					      repend
   6395  3074		       ff		      .byte.b	$ff
   6394  3074					      repend
   6395  3075		       ff		      .byte.b	$ff
   6394  3075					      repend
   6395  3076		       ff		      .byte.b	$ff
   6394  3076					      repend
   6395  3077		       ff		      .byte.b	$ff
   6394  3077					      repend
   6395  3078		       ff		      .byte.b	$ff
   6394  3078					      repend
   6395  3079		       ff		      .byte.b	$ff
   6394  3079					      repend
   6395  307a		       ff		      .byte.b	$ff
   6394  307a					      repend
   6395  307b		       ff		      .byte.b	$ff
   6394  307b					      repend
   6395  307c		       ff		      .byte.b	$ff
   6394  307c					      repend
   6395  307d		       ff		      .byte.b	$ff
   6394  307d					      repend
   6395  307e		       ff		      .byte.b	$ff
   6394  307e					      repend
   6395  307f		       ff		      .byte.b	$ff
   6394  307f					      repend
   6395  3080		       ff		      .byte.b	$ff
   6394  3080					      repend
   6395  3081		       ff		      .byte.b	$ff
   6394  3081					      repend
   6395  3082		       ff		      .byte.b	$ff
   6394  3082					      repend
   6395  3083		       ff		      .byte.b	$ff
   6394  3083					      repend
   6395  3084		       ff		      .byte.b	$ff
   6394  3084					      repend
   6395  3085		       ff		      .byte.b	$ff
   6394  3085					      repend
   6395  3086		       ff		      .byte.b	$ff
   6394  3086					      repend
   6395  3087		       ff		      .byte.b	$ff
   6394  3087					      repend
   6395  3088		       ff		      .byte.b	$ff
   6394  3088					      repend
   6395  3089		       ff		      .byte.b	$ff
   6394  3089					      repend
   6395  308a		       ff		      .byte.b	$ff
   6394  308a					      repend
   6395  308b		       ff		      .byte.b	$ff
   6394  308b					      repend
   6395  308c		       ff		      .byte.b	$ff
   6394  308c					      repend
   6395  308d		       ff		      .byte.b	$ff
   6394  308d					      repend
   6395  308e		       ff		      .byte.b	$ff
   6394  308e					      repend
   6395  308f		       ff		      .byte.b	$ff
   6394  308f					      repend
   6395  3090		       ff		      .byte.b	$ff
   6394  3090					      repend
   6395  3091		       ff		      .byte.b	$ff
   6394  3091					      repend
   6395  3092		       ff		      .byte.b	$ff
   6394  3092					      repend
   6395  3093		       ff		      .byte.b	$ff
   6394  3093					      repend
   6395  3094		       ff		      .byte.b	$ff
   6394  3094					      repend
   6395  3095		       ff		      .byte.b	$ff
   6394  3095					      repend
   6395  3096		       ff		      .byte.b	$ff
   6394  3096					      repend
   6395  3097		       ff		      .byte.b	$ff
   6394  3097					      repend
   6395  3098		       ff		      .byte.b	$ff
   6394  3098					      repend
   6395  3099		       ff		      .byte.b	$ff
   6394  3099					      repend
   6395  309a		       ff		      .byte.b	$ff
   6394  309a					      repend
   6395  309b		       ff		      .byte.b	$ff
   6394  309b					      repend
   6395  309c		       ff		      .byte.b	$ff
   6394  309c					      repend
   6395  309d		       ff		      .byte.b	$ff
   6394  309d					      repend
   6395  309e		       ff		      .byte.b	$ff
   6394  309e					      repend
   6395  309f		       ff		      .byte.b	$ff
   6394  309f					      repend
   6395  30a0		       ff		      .byte.b	$ff
   6394  30a0					      repend
   6395  30a1		       ff		      .byte.b	$ff
   6394  30a1					      repend
   6395  30a2		       ff		      .byte.b	$ff
   6394  30a2					      repend
   6395  30a3		       ff		      .byte.b	$ff
   6394  30a3					      repend
   6395  30a4		       ff		      .byte.b	$ff
   6394  30a4					      repend
   6395  30a5		       ff		      .byte.b	$ff
   6394  30a5					      repend
   6395  30a6		       ff		      .byte.b	$ff
   6394  30a6					      repend
   6395  30a7		       ff		      .byte.b	$ff
   6394  30a7					      repend
   6395  30a8		       ff		      .byte.b	$ff
   6394  30a8					      repend
   6395  30a9		       ff		      .byte.b	$ff
   6394  30a9					      repend
   6395  30aa		       ff		      .byte.b	$ff
   6394  30aa					      repend
   6395  30ab		       ff		      .byte.b	$ff
   6394  30ab					      repend
   6395  30ac		       ff		      .byte.b	$ff
   6394  30ac					      repend
   6395  30ad		       ff		      .byte.b	$ff
   6394  30ad					      repend
   6395  30ae		       ff		      .byte.b	$ff
   6394  30ae					      repend
   6395  30af		       ff		      .byte.b	$ff
   6394  30af					      repend
   6395  30b0		       ff		      .byte.b	$ff
   6394  30b0					      repend
   6395  30b1		       ff		      .byte.b	$ff
   6394  30b1					      repend
   6395  30b2		       ff		      .byte.b	$ff
   6394  30b2					      repend
   6395  30b3		       ff		      .byte.b	$ff
   6394  30b3					      repend
   6395  30b4		       ff		      .byte.b	$ff
   6394  30b4					      repend
   6395  30b5		       ff		      .byte.b	$ff
   6394  30b5					      repend
   6395  30b6		       ff		      .byte.b	$ff
   6394  30b6					      repend
   6395  30b7		       ff		      .byte.b	$ff
   6394  30b7					      repend
   6395  30b8		       ff		      .byte.b	$ff
   6394  30b8					      repend
   6395  30b9		       ff		      .byte.b	$ff
   6394  30b9					      repend
   6395  30ba		       ff		      .byte.b	$ff
   6394  30ba					      repend
   6395  30bb		       ff		      .byte.b	$ff
   6394  30bb					      repend
   6395  30bc		       ff		      .byte.b	$ff
   6394  30bc					      repend
   6395  30bd		       ff		      .byte.b	$ff
   6394  30bd					      repend
   6395  30be		       ff		      .byte.b	$ff
   6394  30be					      repend
   6395  30bf		       ff		      .byte.b	$ff
   6394  30bf					      repend
   6395  30c0		       ff		      .byte.b	$ff
   6394  30c0					      repend
   6395  30c1		       ff		      .byte.b	$ff
   6394  30c1					      repend
   6395  30c2		       ff		      .byte.b	$ff
   6394  30c2					      repend
   6395  30c3		       ff		      .byte.b	$ff
   6394  30c3					      repend
   6395  30c4		       ff		      .byte.b	$ff
   6394  30c4					      repend
   6395  30c5		       ff		      .byte.b	$ff
   6394  30c5					      repend
   6395  30c6		       ff		      .byte.b	$ff
   6394  30c6					      repend
   6395  30c7		       ff		      .byte.b	$ff
   6394  30c7					      repend
   6395  30c8		       ff		      .byte.b	$ff
   6394  30c8					      repend
   6395  30c9		       ff		      .byte.b	$ff
   6394  30c9					      repend
   6395  30ca		       ff		      .byte.b	$ff
   6394  30ca					      repend
   6395  30cb		       ff		      .byte.b	$ff
   6394  30cb					      repend
   6395  30cc		       ff		      .byte.b	$ff
   6394  30cc					      repend
   6395  30cd		       ff		      .byte.b	$ff
   6394  30cd					      repend
   6395  30ce		       ff		      .byte.b	$ff
   6394  30ce					      repend
   6395  30cf		       ff		      .byte.b	$ff
   6394  30cf					      repend
   6395  30d0		       ff		      .byte.b	$ff
   6394  30d0					      repend
   6395  30d1		       ff		      .byte.b	$ff
   6394  30d1					      repend
   6395  30d2		       ff		      .byte.b	$ff
   6394  30d2					      repend
   6395  30d3		       ff		      .byte.b	$ff
   6394  30d3					      repend
   6395  30d4		       ff		      .byte.b	$ff
   6394  30d4					      repend
   6395  30d5		       ff		      .byte.b	$ff
   6394  30d5					      repend
   6395  30d6		       ff		      .byte.b	$ff
   6394  30d6					      repend
   6395  30d7		       ff		      .byte.b	$ff
   6394  30d7					      repend
   6395  30d8		       ff		      .byte.b	$ff
   6394  30d8					      repend
   6395  30d9		       ff		      .byte.b	$ff
   6394  30d9					      repend
   6395  30da		       ff		      .byte.b	$ff
   6394  30da					      repend
   6395  30db		       ff		      .byte.b	$ff
   6394  30db					      repend
   6395  30dc		       ff		      .byte.b	$ff
   6394  30dc					      repend
   6395  30dd		       ff		      .byte.b	$ff
   6394  30dd					      repend
   6395  30de		       ff		      .byte.b	$ff
   6394  30de					      repend
   6395  30df		       ff		      .byte.b	$ff
   6394  30df					      repend
   6395  30e0		       ff		      .byte.b	$ff
   6394  30e0					      repend
   6395  30e1		       ff		      .byte.b	$ff
   6394  30e1					      repend
   6395  30e2		       ff		      .byte.b	$ff
   6394  30e2					      repend
   6395  30e3		       ff		      .byte.b	$ff
   6394  30e3					      repend
   6395  30e4		       ff		      .byte.b	$ff
   6394  30e4					      repend
   6395  30e5		       ff		      .byte.b	$ff
   6394  30e5					      repend
   6395  30e6		       ff		      .byte.b	$ff
   6394  30e6					      repend
   6395  30e7		       ff		      .byte.b	$ff
   6394  30e7					      repend
   6395  30e8		       ff		      .byte.b	$ff
   6394  30e8					      repend
   6395  30e9		       ff		      .byte.b	$ff
   6394  30e9					      repend
   6395  30ea		       ff		      .byte.b	$ff
   6394  30ea					      repend
   6395  30eb		       ff		      .byte.b	$ff
   6394  30eb					      repend
   6395  30ec		       ff		      .byte.b	$ff
   6394  30ec					      repend
   6395  30ed		       ff		      .byte.b	$ff
   6394  30ed					      repend
   6395  30ee		       ff		      .byte.b	$ff
   6394  30ee					      repend
   6395  30ef		       ff		      .byte.b	$ff
   6394  30ef					      repend
   6395  30f0		       ff		      .byte.b	$ff
   6394  30f0					      repend
   6395  30f1		       ff		      .byte.b	$ff
   6394  30f1					      repend
   6395  30f2		       ff		      .byte.b	$ff
   6394  30f2					      repend
   6395  30f3		       ff		      .byte.b	$ff
   6394  30f3					      repend
   6395  30f4		       ff		      .byte.b	$ff
   6394  30f4					      repend
   6395  30f5		       ff		      .byte.b	$ff
   6394  30f5					      repend
   6395  30f6		       ff		      .byte.b	$ff
   6394  30f6					      repend
   6395  30f7		       ff		      .byte.b	$ff
   6394  30f7					      repend
   6395  30f8		       ff		      .byte.b	$ff
   6394  30f8					      repend
   6395  30f9		       ff		      .byte.b	$ff
   6394  30f9					      repend
   6395  30fa		       ff		      .byte.b	$ff
   6394  30fa					      repend
   6395  30fb		       ff		      .byte.b	$ff
   6394  30fb					      repend
   6395  30fc		       ff		      .byte.b	$ff
   6394  30fc					      repend
   6395  30fd		       ff		      .byte.b	$ff
   6394  30fd					      repend
   6395  30fe		       ff		      .byte.b	$ff
   6394  30fe					      repend
   6395  30ff		       ff		      .byte.b	$ff
   6396  3100					      repend
   6397  3100				   .
   6398  3100							; 
   6399  3100
   6400  3100				   .
   6401  3100							; 
   6402  3100
   6403  3100				   .
   6404  3100							; 
   6405  3100
   6406  3100				   .
   6407  3100							; 
   6408  3100
   6409  3100				   .
   6410  3100							; 
   6411  3100
   6412  3100				   .L0687		;  bank 4
   6413  3100
   6414  3100					      if	ECHO3
      3793 bytes of ROM space left in bank 3
   6415  3100					      echo	"    ",[(start_bank3 - *)]d , "bytes of ROM space left in bank 3")
   6416  3100					      endif
   6417  3100		       00 01	   ECHO3      =	1
   6418  3fd1					      ORG	$3FF4-bscode_length
   6419  3fd1					      RORG	$DFF4-bscode_length
   6420  3fd1		       a2 ff	   start_bank3 ldx	#$ff
   6421  3fd3				  -	      ifconst	FASTFETCH	; using DPC+
   6422  3fd3				  -	      stx	FASTFETCH
   6423  3fd3					      endif
   6424  3fd3		       9a		      txs
   6425  3fd4				  -	      if	bankswitch == 64
   6426  3fd4				  -	      lda	#(((>(start-1)) & $0F) | $F0)
   6427  3fd4					      else
   6428  3fd4		       a9 f2		      lda	#>(start-1)
   6429  3fd6					      endif
   6430  3fd6		       48		      pha
   6431  3fd7		       a9 b0		      lda	#<(start-1)
   6432  3fd9		       48		      pha
   6433  3fda		       48		      pha
   6434  3fdb		       8a		      txa
   6435  3fdc		       48		      pha
   6436  3fdd		       ba		      tsx
   6437  3fde					      if	bankswitch != 64
   6438  3fde		       b5 04		      lda	4,x	; get high byte of return address
   6439  3fe0		       2a		      rol
   6440  3fe1		       2a		      rol
   6441  3fe2		       2a		      rol
   6442  3fe3		       2a		      rol
   6443  3fe4		       29 03		      and	#bs_mask	;1 3 or 7 for F8/F6/F4
   6444  3fe6		       aa		      tax
   6445  3fe7		       e8		      inx
   6446  3fe8				  -	      else
   6447  3fe8				  -	      lda	4,x	; get high byte of return address
   6448  3fe8				  -	      tay
   6449  3fe8				  -	      ora	#$10	; change our bank nibble into a valid rom mirror
   6450  3fe8				  -	      sta	4,x
   6451  3fe8				  -	      tya
   6452  3fe8				  -	      lsr
   6453  3fe8				  -	      lsr
   6454  3fe8				  -	      lsr
   6455  3fe8				  -	      lsr
   6456  3fe8				  -	      tax
   6457  3fe8				  -	      inx
   6458  3fe8					      endif
   6459  3fe8		       bd f5 1f 	      lda	bankswitch_hotspot-1,x
   6460  3feb		       68		      pla
   6461  3fec		       aa		      tax
   6462  3fed		       68		      pla
   6463  3fee		       60		      rts
   6464  3fef				  -	      if	((* & $1FFF) > ((bankswitch_hotspot & $1FFF) - 1))
   6465  3fef				  -	      echo	"WARNING: size parameter in banksw.asm too small - the program probably will not work."
   6466  3fef				  -	      echo	"Change to",[(*-begin_bscode+1)&$FF]d,"and try again."
   6467  3fef					      endif
   6468  3ffc					      ORG	$3FFC
   6469  3ffc					      RORG	$DFFC
   6470  3ffc		       d1 df		      .word.w	(start_bank3 & $ffff)
   6471  3ffe		       d1 df		      .word.w	(start_bank3 & $ffff)
   6472  4000					      ORG	$4000
   6473  4000					      RORG	$F000
   6474  4000					      repeat	256
   6475  4000		       ff		      .byte.b	$ff
   6474  4000					      repend
   6475  4001		       ff		      .byte.b	$ff
   6474  4001					      repend
   6475  4002		       ff		      .byte.b	$ff
   6474  4002					      repend
   6475  4003		       ff		      .byte.b	$ff
   6474  4003					      repend
   6475  4004		       ff		      .byte.b	$ff
   6474  4004					      repend
   6475  4005		       ff		      .byte.b	$ff
   6474  4005					      repend
   6475  4006		       ff		      .byte.b	$ff
   6474  4006					      repend
   6475  4007		       ff		      .byte.b	$ff
   6474  4007					      repend
   6475  4008		       ff		      .byte.b	$ff
   6474  4008					      repend
   6475  4009		       ff		      .byte.b	$ff
   6474  4009					      repend
   6475  400a		       ff		      .byte.b	$ff
   6474  400a					      repend
   6475  400b		       ff		      .byte.b	$ff
   6474  400b					      repend
   6475  400c		       ff		      .byte.b	$ff
   6474  400c					      repend
   6475  400d		       ff		      .byte.b	$ff
   6474  400d					      repend
   6475  400e		       ff		      .byte.b	$ff
   6474  400e					      repend
   6475  400f		       ff		      .byte.b	$ff
   6474  400f					      repend
   6475  4010		       ff		      .byte.b	$ff
   6474  4010					      repend
   6475  4011		       ff		      .byte.b	$ff
   6474  4011					      repend
   6475  4012		       ff		      .byte.b	$ff
   6474  4012					      repend
   6475  4013		       ff		      .byte.b	$ff
   6474  4013					      repend
   6475  4014		       ff		      .byte.b	$ff
   6474  4014					      repend
   6475  4015		       ff		      .byte.b	$ff
   6474  4015					      repend
   6475  4016		       ff		      .byte.b	$ff
   6474  4016					      repend
   6475  4017		       ff		      .byte.b	$ff
   6474  4017					      repend
   6475  4018		       ff		      .byte.b	$ff
   6474  4018					      repend
   6475  4019		       ff		      .byte.b	$ff
   6474  4019					      repend
   6475  401a		       ff		      .byte.b	$ff
   6474  401a					      repend
   6475  401b		       ff		      .byte.b	$ff
   6474  401b					      repend
   6475  401c		       ff		      .byte.b	$ff
   6474  401c					      repend
   6475  401d		       ff		      .byte.b	$ff
   6474  401d					      repend
   6475  401e		       ff		      .byte.b	$ff
   6474  401e					      repend
   6475  401f		       ff		      .byte.b	$ff
   6474  401f					      repend
   6475  4020		       ff		      .byte.b	$ff
   6474  4020					      repend
   6475  4021		       ff		      .byte.b	$ff
   6474  4021					      repend
   6475  4022		       ff		      .byte.b	$ff
   6474  4022					      repend
   6475  4023		       ff		      .byte.b	$ff
   6474  4023					      repend
   6475  4024		       ff		      .byte.b	$ff
   6474  4024					      repend
   6475  4025		       ff		      .byte.b	$ff
   6474  4025					      repend
   6475  4026		       ff		      .byte.b	$ff
   6474  4026					      repend
   6475  4027		       ff		      .byte.b	$ff
   6474  4027					      repend
   6475  4028		       ff		      .byte.b	$ff
   6474  4028					      repend
   6475  4029		       ff		      .byte.b	$ff
   6474  4029					      repend
   6475  402a		       ff		      .byte.b	$ff
   6474  402a					      repend
   6475  402b		       ff		      .byte.b	$ff
   6474  402b					      repend
   6475  402c		       ff		      .byte.b	$ff
   6474  402c					      repend
   6475  402d		       ff		      .byte.b	$ff
   6474  402d					      repend
   6475  402e		       ff		      .byte.b	$ff
   6474  402e					      repend
   6475  402f		       ff		      .byte.b	$ff
   6474  402f					      repend
   6475  4030		       ff		      .byte.b	$ff
   6474  4030					      repend
   6475  4031		       ff		      .byte.b	$ff
   6474  4031					      repend
   6475  4032		       ff		      .byte.b	$ff
   6474  4032					      repend
   6475  4033		       ff		      .byte.b	$ff
   6474  4033					      repend
   6475  4034		       ff		      .byte.b	$ff
   6474  4034					      repend
   6475  4035		       ff		      .byte.b	$ff
   6474  4035					      repend
   6475  4036		       ff		      .byte.b	$ff
   6474  4036					      repend
   6475  4037		       ff		      .byte.b	$ff
   6474  4037					      repend
   6475  4038		       ff		      .byte.b	$ff
   6474  4038					      repend
   6475  4039		       ff		      .byte.b	$ff
   6474  4039					      repend
   6475  403a		       ff		      .byte.b	$ff
   6474  403a					      repend
   6475  403b		       ff		      .byte.b	$ff
   6474  403b					      repend
   6475  403c		       ff		      .byte.b	$ff
   6474  403c					      repend
   6475  403d		       ff		      .byte.b	$ff
   6474  403d					      repend
   6475  403e		       ff		      .byte.b	$ff
   6474  403e					      repend
   6475  403f		       ff		      .byte.b	$ff
   6474  403f					      repend
   6475  4040		       ff		      .byte.b	$ff
   6474  4040					      repend
   6475  4041		       ff		      .byte.b	$ff
   6474  4041					      repend
   6475  4042		       ff		      .byte.b	$ff
   6474  4042					      repend
   6475  4043		       ff		      .byte.b	$ff
   6474  4043					      repend
   6475  4044		       ff		      .byte.b	$ff
   6474  4044					      repend
   6475  4045		       ff		      .byte.b	$ff
   6474  4045					      repend
   6475  4046		       ff		      .byte.b	$ff
   6474  4046					      repend
   6475  4047		       ff		      .byte.b	$ff
   6474  4047					      repend
   6475  4048		       ff		      .byte.b	$ff
   6474  4048					      repend
   6475  4049		       ff		      .byte.b	$ff
   6474  4049					      repend
   6475  404a		       ff		      .byte.b	$ff
   6474  404a					      repend
   6475  404b		       ff		      .byte.b	$ff
   6474  404b					      repend
   6475  404c		       ff		      .byte.b	$ff
   6474  404c					      repend
   6475  404d		       ff		      .byte.b	$ff
   6474  404d					      repend
   6475  404e		       ff		      .byte.b	$ff
   6474  404e					      repend
   6475  404f		       ff		      .byte.b	$ff
   6474  404f					      repend
   6475  4050		       ff		      .byte.b	$ff
   6474  4050					      repend
   6475  4051		       ff		      .byte.b	$ff
   6474  4051					      repend
   6475  4052		       ff		      .byte.b	$ff
   6474  4052					      repend
   6475  4053		       ff		      .byte.b	$ff
   6474  4053					      repend
   6475  4054		       ff		      .byte.b	$ff
   6474  4054					      repend
   6475  4055		       ff		      .byte.b	$ff
   6474  4055					      repend
   6475  4056		       ff		      .byte.b	$ff
   6474  4056					      repend
   6475  4057		       ff		      .byte.b	$ff
   6474  4057					      repend
   6475  4058		       ff		      .byte.b	$ff
   6474  4058					      repend
   6475  4059		       ff		      .byte.b	$ff
   6474  4059					      repend
   6475  405a		       ff		      .byte.b	$ff
   6474  405a					      repend
   6475  405b		       ff		      .byte.b	$ff
   6474  405b					      repend
   6475  405c		       ff		      .byte.b	$ff
   6474  405c					      repend
   6475  405d		       ff		      .byte.b	$ff
   6474  405d					      repend
   6475  405e		       ff		      .byte.b	$ff
   6474  405e					      repend
   6475  405f		       ff		      .byte.b	$ff
   6474  405f					      repend
   6475  4060		       ff		      .byte.b	$ff
   6474  4060					      repend
   6475  4061		       ff		      .byte.b	$ff
   6474  4061					      repend
   6475  4062		       ff		      .byte.b	$ff
   6474  4062					      repend
   6475  4063		       ff		      .byte.b	$ff
   6474  4063					      repend
   6475  4064		       ff		      .byte.b	$ff
   6474  4064					      repend
   6475  4065		       ff		      .byte.b	$ff
   6474  4065					      repend
   6475  4066		       ff		      .byte.b	$ff
   6474  4066					      repend
   6475  4067		       ff		      .byte.b	$ff
   6474  4067					      repend
   6475  4068		       ff		      .byte.b	$ff
   6474  4068					      repend
   6475  4069		       ff		      .byte.b	$ff
   6474  4069					      repend
   6475  406a		       ff		      .byte.b	$ff
   6474  406a					      repend
   6475  406b		       ff		      .byte.b	$ff
   6474  406b					      repend
   6475  406c		       ff		      .byte.b	$ff
   6474  406c					      repend
   6475  406d		       ff		      .byte.b	$ff
   6474  406d					      repend
   6475  406e		       ff		      .byte.b	$ff
   6474  406e					      repend
   6475  406f		       ff		      .byte.b	$ff
   6474  406f					      repend
   6475  4070		       ff		      .byte.b	$ff
   6474  4070					      repend
   6475  4071		       ff		      .byte.b	$ff
   6474  4071					      repend
   6475  4072		       ff		      .byte.b	$ff
   6474  4072					      repend
   6475  4073		       ff		      .byte.b	$ff
   6474  4073					      repend
   6475  4074		       ff		      .byte.b	$ff
   6474  4074					      repend
   6475  4075		       ff		      .byte.b	$ff
   6474  4075					      repend
   6475  4076		       ff		      .byte.b	$ff
   6474  4076					      repend
   6475  4077		       ff		      .byte.b	$ff
   6474  4077					      repend
   6475  4078		       ff		      .byte.b	$ff
   6474  4078					      repend
   6475  4079		       ff		      .byte.b	$ff
   6474  4079					      repend
   6475  407a		       ff		      .byte.b	$ff
   6474  407a					      repend
   6475  407b		       ff		      .byte.b	$ff
   6474  407b					      repend
   6475  407c		       ff		      .byte.b	$ff
   6474  407c					      repend
   6475  407d		       ff		      .byte.b	$ff
   6474  407d					      repend
   6475  407e		       ff		      .byte.b	$ff
   6474  407e					      repend
   6475  407f		       ff		      .byte.b	$ff
   6474  407f					      repend
   6475  4080		       ff		      .byte.b	$ff
   6474  4080					      repend
   6475  4081		       ff		      .byte.b	$ff
   6474  4081					      repend
   6475  4082		       ff		      .byte.b	$ff
   6474  4082					      repend
   6475  4083		       ff		      .byte.b	$ff
   6474  4083					      repend
   6475  4084		       ff		      .byte.b	$ff
   6474  4084					      repend
   6475  4085		       ff		      .byte.b	$ff
   6474  4085					      repend
   6475  4086		       ff		      .byte.b	$ff
   6474  4086					      repend
   6475  4087		       ff		      .byte.b	$ff
   6474  4087					      repend
   6475  4088		       ff		      .byte.b	$ff
   6474  4088					      repend
   6475  4089		       ff		      .byte.b	$ff
   6474  4089					      repend
   6475  408a		       ff		      .byte.b	$ff
   6474  408a					      repend
   6475  408b		       ff		      .byte.b	$ff
   6474  408b					      repend
   6475  408c		       ff		      .byte.b	$ff
   6474  408c					      repend
   6475  408d		       ff		      .byte.b	$ff
   6474  408d					      repend
   6475  408e		       ff		      .byte.b	$ff
   6474  408e					      repend
   6475  408f		       ff		      .byte.b	$ff
   6474  408f					      repend
   6475  4090		       ff		      .byte.b	$ff
   6474  4090					      repend
   6475  4091		       ff		      .byte.b	$ff
   6474  4091					      repend
   6475  4092		       ff		      .byte.b	$ff
   6474  4092					      repend
   6475  4093		       ff		      .byte.b	$ff
   6474  4093					      repend
   6475  4094		       ff		      .byte.b	$ff
   6474  4094					      repend
   6475  4095		       ff		      .byte.b	$ff
   6474  4095					      repend
   6475  4096		       ff		      .byte.b	$ff
   6474  4096					      repend
   6475  4097		       ff		      .byte.b	$ff
   6474  4097					      repend
   6475  4098		       ff		      .byte.b	$ff
   6474  4098					      repend
   6475  4099		       ff		      .byte.b	$ff
   6474  4099					      repend
   6475  409a		       ff		      .byte.b	$ff
   6474  409a					      repend
   6475  409b		       ff		      .byte.b	$ff
   6474  409b					      repend
   6475  409c		       ff		      .byte.b	$ff
   6474  409c					      repend
   6475  409d		       ff		      .byte.b	$ff
   6474  409d					      repend
   6475  409e		       ff		      .byte.b	$ff
   6474  409e					      repend
   6475  409f		       ff		      .byte.b	$ff
   6474  409f					      repend
   6475  40a0		       ff		      .byte.b	$ff
   6474  40a0					      repend
   6475  40a1		       ff		      .byte.b	$ff
   6474  40a1					      repend
   6475  40a2		       ff		      .byte.b	$ff
   6474  40a2					      repend
   6475  40a3		       ff		      .byte.b	$ff
   6474  40a3					      repend
   6475  40a4		       ff		      .byte.b	$ff
   6474  40a4					      repend
   6475  40a5		       ff		      .byte.b	$ff
   6474  40a5					      repend
   6475  40a6		       ff		      .byte.b	$ff
   6474  40a6					      repend
   6475  40a7		       ff		      .byte.b	$ff
   6474  40a7					      repend
   6475  40a8		       ff		      .byte.b	$ff
   6474  40a8					      repend
   6475  40a9		       ff		      .byte.b	$ff
   6474  40a9					      repend
   6475  40aa		       ff		      .byte.b	$ff
   6474  40aa					      repend
   6475  40ab		       ff		      .byte.b	$ff
   6474  40ab					      repend
   6475  40ac		       ff		      .byte.b	$ff
   6474  40ac					      repend
   6475  40ad		       ff		      .byte.b	$ff
   6474  40ad					      repend
   6475  40ae		       ff		      .byte.b	$ff
   6474  40ae					      repend
   6475  40af		       ff		      .byte.b	$ff
   6474  40af					      repend
   6475  40b0		       ff		      .byte.b	$ff
   6474  40b0					      repend
   6475  40b1		       ff		      .byte.b	$ff
   6474  40b1					      repend
   6475  40b2		       ff		      .byte.b	$ff
   6474  40b2					      repend
   6475  40b3		       ff		      .byte.b	$ff
   6474  40b3					      repend
   6475  40b4		       ff		      .byte.b	$ff
   6474  40b4					      repend
   6475  40b5		       ff		      .byte.b	$ff
   6474  40b5					      repend
   6475  40b6		       ff		      .byte.b	$ff
   6474  40b6					      repend
   6475  40b7		       ff		      .byte.b	$ff
   6474  40b7					      repend
   6475  40b8		       ff		      .byte.b	$ff
   6474  40b8					      repend
   6475  40b9		       ff		      .byte.b	$ff
   6474  40b9					      repend
   6475  40ba		       ff		      .byte.b	$ff
   6474  40ba					      repend
   6475  40bb		       ff		      .byte.b	$ff
   6474  40bb					      repend
   6475  40bc		       ff		      .byte.b	$ff
   6474  40bc					      repend
   6475  40bd		       ff		      .byte.b	$ff
   6474  40bd					      repend
   6475  40be		       ff		      .byte.b	$ff
   6474  40be					      repend
   6475  40bf		       ff		      .byte.b	$ff
   6474  40bf					      repend
   6475  40c0		       ff		      .byte.b	$ff
   6474  40c0					      repend
   6475  40c1		       ff		      .byte.b	$ff
   6474  40c1					      repend
   6475  40c2		       ff		      .byte.b	$ff
   6474  40c2					      repend
   6475  40c3		       ff		      .byte.b	$ff
   6474  40c3					      repend
   6475  40c4		       ff		      .byte.b	$ff
   6474  40c4					      repend
   6475  40c5		       ff		      .byte.b	$ff
   6474  40c5					      repend
   6475  40c6		       ff		      .byte.b	$ff
   6474  40c6					      repend
   6475  40c7		       ff		      .byte.b	$ff
   6474  40c7					      repend
   6475  40c8		       ff		      .byte.b	$ff
   6474  40c8					      repend
   6475  40c9		       ff		      .byte.b	$ff
   6474  40c9					      repend
   6475  40ca		       ff		      .byte.b	$ff
   6474  40ca					      repend
   6475  40cb		       ff		      .byte.b	$ff
   6474  40cb					      repend
   6475  40cc		       ff		      .byte.b	$ff
   6474  40cc					      repend
   6475  40cd		       ff		      .byte.b	$ff
   6474  40cd					      repend
   6475  40ce		       ff		      .byte.b	$ff
   6474  40ce					      repend
   6475  40cf		       ff		      .byte.b	$ff
   6474  40cf					      repend
   6475  40d0		       ff		      .byte.b	$ff
   6474  40d0					      repend
   6475  40d1		       ff		      .byte.b	$ff
   6474  40d1					      repend
   6475  40d2		       ff		      .byte.b	$ff
   6474  40d2					      repend
   6475  40d3		       ff		      .byte.b	$ff
   6474  40d3					      repend
   6475  40d4		       ff		      .byte.b	$ff
   6474  40d4					      repend
   6475  40d5		       ff		      .byte.b	$ff
   6474  40d5					      repend
   6475  40d6		       ff		      .byte.b	$ff
   6474  40d6					      repend
   6475  40d7		       ff		      .byte.b	$ff
   6474  40d7					      repend
   6475  40d8		       ff		      .byte.b	$ff
   6474  40d8					      repend
   6475  40d9		       ff		      .byte.b	$ff
   6474  40d9					      repend
   6475  40da		       ff		      .byte.b	$ff
   6474  40da					      repend
   6475  40db		       ff		      .byte.b	$ff
   6474  40db					      repend
   6475  40dc		       ff		      .byte.b	$ff
   6474  40dc					      repend
   6475  40dd		       ff		      .byte.b	$ff
   6474  40dd					      repend
   6475  40de		       ff		      .byte.b	$ff
   6474  40de					      repend
   6475  40df		       ff		      .byte.b	$ff
   6474  40df					      repend
   6475  40e0		       ff		      .byte.b	$ff
   6474  40e0					      repend
   6475  40e1		       ff		      .byte.b	$ff
   6474  40e1					      repend
   6475  40e2		       ff		      .byte.b	$ff
   6474  40e2					      repend
   6475  40e3		       ff		      .byte.b	$ff
   6474  40e3					      repend
   6475  40e4		       ff		      .byte.b	$ff
   6474  40e4					      repend
   6475  40e5		       ff		      .byte.b	$ff
   6474  40e5					      repend
   6475  40e6		       ff		      .byte.b	$ff
   6474  40e6					      repend
   6475  40e7		       ff		      .byte.b	$ff
   6474  40e7					      repend
   6475  40e8		       ff		      .byte.b	$ff
   6474  40e8					      repend
   6475  40e9		       ff		      .byte.b	$ff
   6474  40e9					      repend
   6475  40ea		       ff		      .byte.b	$ff
   6474  40ea					      repend
   6475  40eb		       ff		      .byte.b	$ff
   6474  40eb					      repend
   6475  40ec		       ff		      .byte.b	$ff
   6474  40ec					      repend
   6475  40ed		       ff		      .byte.b	$ff
   6474  40ed					      repend
   6475  40ee		       ff		      .byte.b	$ff
   6474  40ee					      repend
   6475  40ef		       ff		      .byte.b	$ff
   6474  40ef					      repend
   6475  40f0		       ff		      .byte.b	$ff
   6474  40f0					      repend
   6475  40f1		       ff		      .byte.b	$ff
   6474  40f1					      repend
   6475  40f2		       ff		      .byte.b	$ff
   6474  40f2					      repend
   6475  40f3		       ff		      .byte.b	$ff
   6474  40f3					      repend
   6475  40f4		       ff		      .byte.b	$ff
   6474  40f4					      repend
   6475  40f5		       ff		      .byte.b	$ff
   6474  40f5					      repend
   6475  40f6		       ff		      .byte.b	$ff
   6474  40f6					      repend
   6475  40f7		       ff		      .byte.b	$ff
   6474  40f7					      repend
   6475  40f8		       ff		      .byte.b	$ff
   6474  40f8					      repend
   6475  40f9		       ff		      .byte.b	$ff
   6474  40f9					      repend
   6475  40fa		       ff		      .byte.b	$ff
   6474  40fa					      repend
   6475  40fb		       ff		      .byte.b	$ff
   6474  40fb					      repend
   6475  40fc		       ff		      .byte.b	$ff
   6474  40fc					      repend
   6475  40fd		       ff		      .byte.b	$ff
   6474  40fd					      repend
   6475  40fe		       ff		      .byte.b	$ff
   6474  40fe					      repend
   6475  40ff		       ff		      .byte.b	$ff
   6476  4100					      repend
   6477  4100							; Provided under the CC0 license. See the included LICENSE.txt for details.
   6478  4100
   6479  4100							; This is a 2-line kernel!
   6480  4100					      ifnconst	vertical_reflect
   6481  4100				   kernel
   6482  4100					      endif
   6483  4100		       85 02		      sta	WSYNC
   6484  4102		       a9 ff		      lda	#255
   6485  4104		       8d 96 02 	      sta	TIM64T
   6486  4107
   6487  4107		       a9 01		      lda	#1
   6488  4109		       85 27		      sta	VDELBL
   6489  410b		       85 25		      sta	VDELP0
   6490  410d		       a6 92		      ldx	ballheight
   6491  410f		       e8		      inx
   6492  4110		       e8		      inx
   6493  4111		       86 9f		      stx	temp4
   6494  4113		       a5 86		      lda	player1y
   6495  4115		       85 9e		      sta	temp3
   6496  4117
   6497  4117				  -	      ifconst	shakescreen
   6498  4117				  -	      jsr	doshakescreen
   6499  4117					      else
   6500  4117		       a6 90		      ldx	missile0height
   6501  4119		       e8		      inx
   6502  411a					      endif
   6503  411a
   6504  411a		       e8		      inx
   6505  411b		       86 f6		      stx	stack1
   6506  411d
   6507  411d		       a5 89		      lda	bally
   6508  411f		       85 f7		      sta	stack2
   6509  4121
   6510  4121		       a5 85		      lda	player0y
   6511  4123		       a2 00		      ldx	#0
   6512  4125		       85 02		      sta	WSYNC
   6513  4127		       86 1b		      stx	GRP0
   6514  4129		       86 1c		      stx	GRP1
   6515  412b		       86 0e		      stx	PF1L
   6516  412d		       86 0f		      stx	PF2
   6517  412f		       86 2c		      stx	CXCLR
   6518  4131				  -	      ifconst	readpaddle
   6519  4131				  -	      stx	paddle
   6520  4131					      else
      0  4131					      sleep	3
      1  4131				   .CYCLES    SET	3
      2  4131
      3  4131				  -	      IF	.CYCLES < 2
      4  4131				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  4131				  -	      ERR
      6  4131					      ENDIF
      7  4131
      8  4131					      IF	.CYCLES & 1
      9  4131					      IFNCONST	NO_ILLEGAL_OPCODES
     10  4131		       04 00		      nop	0
     11  4133				  -	      ELSE
     12  4133				  -	      bit	VSYNC
     13  4133					      ENDIF
     14  4133				   .CYCLES    SET	.CYCLES - 3
     15  4133					      ENDIF
     16  4133
     17  4133				  -	      REPEAT	.CYCLES / 2
     18  4133				  -	      nop
     19  4133					      REPEND
   6522  4133					      endif
   6523  4133
   6524  4133		       95 9d		      sta	temp2,x
   6525  4135
   6526  4135							;store these so they can be retrieved later
   6527  4135				  -	      ifnconst	pfres
   6528  4135				  -	      ldx	#128-44+(4-pfwidth)*12
   6529  4135					      else
   6530  4135		       a2 74		      ldx	#132-pfres*pfwidth
   6531  4137					      endif
   6532  4137
   6533  4137		       c6 85		      dec	player0y
   6534  4139
   6535  4139		       a5 91		      lda	missile0y
   6536  413b		       85 a0		      sta	temp5
   6537  413d		       a5 88		      lda	missile1y
   6538  413f		       85 a1		      sta	temp6
   6539  4141
   6540  4141		       a5 ef		      lda	playfieldpos
   6541  4143		       85 9c		      sta	temp1
   6542  4145
   6543  4145				  -	      ifconst	pfrowheight
   6544  4145				  -	      lda	#pfrowheight+2
   6545  4145					      else
   6546  4145				  -	      ifnconst	pfres
   6547  4145				  -	      lda	#10
   6548  4145					      else
   6549  4145		       a9 1a		      lda	#(96/pfres)+2	; try to come close to the real size
   6550  4147					      endif
   6551  4147					      endif
   6552  4147		       18		      clc
   6553  4148		       e5 ef		      sbc	playfieldpos
   6554  414a		       85 ef		      sta	playfieldpos
   6555  414c		       4c 78 f1 	      jmp	.startkernel
   6556  414f
   6557  414f				   .skipDrawP0
   6558  414f		       a9 00		      lda	#0
   6559  4151		       a8		      tay
   6560  4152		       4c aa f1 	      jmp	.continueP0
   6561  4155
   6562  4155				   .skipDrawP1
   6563  4155		       a9 00		      lda	#0
   6564  4157		       a8		      tay
   6565  4158		       4c 82 f1 	      jmp	.continueP1
   6566  415b
   6567  415b				   .kerloop		; enter at cycle 59??
   6568  415b
   6569  415b				   continuekernel
      0  415b					      sleep	2
      1  415b				   .CYCLES    SET	2
      2  415b
      3  415b				  -	      IF	.CYCLES < 2
      4  415b				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  415b				  -	      ERR
      6  415b					      ENDIF
      7  415b
      8  415b				  -	      IF	.CYCLES & 1
      9  415b				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  415b				  -	      nop	0
     11  415b				  -	      ELSE
     12  415b				  -	      bit	VSYNC
     13  415b				  -	      ENDIF
     14  415b				  -.CYCLES    SET	.CYCLES - 3
     15  415b					      ENDIF
     16  415b
     17  415b					      REPEAT	.CYCLES / 2
     18  415b		       ea		      nop
     19  415c					      REPEND
   6571  415c				   continuekernel2
   6572  415c		       a5 92		      lda	ballheight
   6573  415e
   6574  415e					      ifconst	pfres
   6575  415e		       bc 7c 10 	      ldy	playfield+pfres*pfwidth-132,x
   6576  4161		       84 0e		      sty	PF1L	;3
   6577  4163		       bc 7d 10 	      ldy	playfield+pfres*pfwidth-131-pfadjust,x
   6578  4166		       84 0f		      sty	PF2L	;3
   6579  4168		       bc 7f 10 	      ldy	playfield+pfres*pfwidth-129,x
   6580  416b		       84 0e		      sty	PF1R	; 3 too early?
   6581  416d		       bc 7e 10 	      ldy	playfield+pfres*pfwidth-130-pfadjust,x
   6582  4170		       84 0f		      sty	PF2R	;3
   6583  4172				  -	      else
   6584  4172				  -	      ldy	playfield-48+pfwidth*12+44-128,x
   6585  4172				  -	      sty	PF1L	;3
   6586  4172				  -	      ldy	playfield-48+pfwidth*12+45-128-pfadjust,x	;4
   6587  4172				  -	      sty	PF2L	;3
   6588  4172				  -	      ldy	playfield-48+pfwidth*12+47-128,x	;4
   6589  4172				  -	      sty	PF1R	; 3 too early?
   6590  4172				  -	      ldy	playfield-48+pfwidth*12+46-128-pfadjust,x	;4
   6591  4172				  -	      sty	PF2R	;3
   6592  4172					      endif
   6593  4172
   6594  4172							; should be playfield+$38 for width=2
   6595  4172
   6596  4172		       c7 89		      dcp	bally
   6597  4174		       2a		      rol
   6598  4175		       2a		      rol
   6599  4176							; rol
   6600  4176							; rol
   6601  4176				   goback
   6602  4176		       85 1f		      sta	ENABL
   6603  4178				   .startkernel
   6604  4178		       a5 8f		      lda	player1height	;3
   6605  417a		       c7 86		      dcp	player1y	;5
   6606  417c		       90 d7		      bcc	.skipDrawP1	;2
   6607  417e		       a4 86		      ldy	player1y	;3
   6608  4180		       b1 8c		      lda	(player1pointer),y	;5; player0pointer must be selected carefully by the compiler
   6609  4182							; so it doesn't cross a page boundary!
   6610  4182
   6611  4182				   .continueP1
   6612  4182		       85 1c		      sta	GRP1	;3
   6613  4184
   6614  4184				  -	      ifnconst	player1colors
   6615  4184				  -	      lda	missile1height	;3
   6616  4184				  -	      dcp	missile1y	;5
   6617  4184				  -	      rol		;2
   6618  4184				  -	      rol		;2
   6619  4184				  -	      sta	ENAM1	;3
   6620  4184					      else
   6621  4184		       b1 87		      lda	(player1color),y
   6622  4186		       85 07		      sta	COLUP1
   6623  4188					      ifnconst	playercolors
      0  4188					      sleep	7
      1  4188				   .CYCLES    SET	7
      2  4188
      3  4188				  -	      IF	.CYCLES < 2
      4  4188				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  4188				  -	      ERR
      6  4188					      ENDIF
      7  4188
      8  4188					      IF	.CYCLES & 1
      9  4188					      IFNCONST	NO_ILLEGAL_OPCODES
     10  4188		       04 00		      nop	0
     11  418a				  -	      ELSE
     12  418a				  -	      bit	VSYNC
     13  418a					      ENDIF
     14  418a				   .CYCLES    SET	.CYCLES - 3
     15  418a					      ENDIF
     16  418a
     17  418a					      REPEAT	.CYCLES / 2
     18  418a		       ea		      nop
     17  418a					      REPEND
     18  418b		       ea		      nop
     19  418c					      REPEND
   6625  418c				  -	      else
   6626  418c				  -	      lda.w	player0colorstore
   6627  418c				  -	      sta	COLUP0
   6628  418c					      endif
   6629  418c					      endif
   6630  418c
   6631  418c					      ifconst	pfres
   6632  418c		       bd 7c 10 	      lda	playfield+pfres*pfwidth-132,x
   6633  418f		       85 0e		      sta	PF1L	;3
   6634  4191		       bd 7d 10 	      lda	playfield+pfres*pfwidth-131-pfadjust,x
   6635  4194		       85 0f		      sta	PF2L	;3
   6636  4196		       bd 7f 10 	      lda	playfield+pfres*pfwidth-129,x
   6637  4199		       85 0e		      sta	PF1R	; 3 too early?
   6638  419b		       bd 7e 10 	      lda	playfield+pfres*pfwidth-130-pfadjust,x
   6639  419e		       85 0f		      sta	PF2R	;3
   6640  41a0				  -	      else
   6641  41a0				  -	      lda	playfield-48+pfwidth*12+44-128,x	;4
   6642  41a0				  -	      sta	PF1L	;3
   6643  41a0				  -	      lda	playfield-48+pfwidth*12+45-128-pfadjust,x	;4
   6644  41a0				  -	      sta	PF2L	;3
   6645  41a0				  -	      lda	playfield-48+pfwidth*12+47-128,x	;4
   6646  41a0				  -	      sta	PF1R	; 3 too early?
   6647  41a0				  -	      lda	playfield-48+pfwidth*12+46-128-pfadjust,x	;4
   6648  41a0				  -	      sta	PF2R	;3
   6649  41a0					      endif
   6650  41a0							; sleep 3
   6651  41a0
   6652  41a0		       a5 8e		      lda	player0height
   6653  41a2		       c7 85		      dcp	player0y
   6654  41a4		       90 a9		      bcc	.skipDrawP0
   6655  41a6		       a4 85		      ldy	player0y
   6656  41a8		       b1 8a		      lda	(player0pointer),y
   6657  41aa				   .continueP0
   6658  41aa		       85 1b		      sta	GRP0
   6659  41ac
   6660  41ac					      ifnconst	no_blank_lines
   6661  41ac					      ifnconst	playercolors
   6662  41ac		       a5 90		      lda	missile0height	;3
   6663  41ae		       c7 91		      dcp	missile0y	;5
   6664  41b0		       e5 f6		      sbc	stack1
   6665  41b2		       85 1d		      sta	ENAM0	;3
   6666  41b4				  -	      else
   6667  41b4				  -	      lda	(player0color),y
   6668  41b4				  -	      sta	player0colorstore
   6669  41b4				  -	      sleep	6
   6670  41b4					      endif
   6671  41b4		       c6 9c		      dec	temp1
   6672  41b6		       d0 a3		      bne	continuekernel
   6673  41b8				  -	      else
   6674  41b8				  -	      dec	temp1
   6675  41b8				  -	      beq	altkernel2
   6676  41b8				  -	      ifconst	readpaddle
   6677  41b8				  -	      ldy	currentpaddle
   6678  41b8				  -	      lda	INPT0,y
   6679  41b8				  -	      bpl	noreadpaddle
   6680  41b8				  -	      inc	paddle
   6681  41b8				  -	      jmp	continuekernel2
   6682  41b8				  -noreadpaddle
   6683  41b8				  -	      sleep	2
   6684  41b8				  -	      jmp	continuekernel
   6685  41b8				  -	      else
   6686  41b8				  -	      ifnconst	playercolors
   6687  41b8				  -	      ifconst	PFcolors
   6688  41b8				  -	      txa
   6689  41b8				  -	      tay
   6690  41b8				  -	      lda	(pfcolortable),y
   6691  41b8				  -	      ifnconst	backgroundchange
   6692  41b8				  -	      sta	COLUPF
   6693  41b8				  -	      else
   6694  41b8				  -	      sta	COLUBK
   6695  41b8				  -	      endif
   6696  41b8				  -	      jmp	continuekernel
   6697  41b8				  -	      else
   6698  41b8				  -	      ifconst	kernelmacrodef
   6699  41b8				  -	      kernelmacro
   6700  41b8				  -	      else
   6701  41b8				  -	      sleep	12
   6702  41b8				  -	      endif
   6703  41b8				  -	      endif
   6704  41b8				  -	      else
   6705  41b8				  -	      lda	(player0color),y
   6706  41b8				  -	      sta	player0colorstore
   6707  41b8				  -	      sleep	4
   6708  41b8				  -	      endif
   6709  41b8				  -	      jmp	continuekernel
   6710  41b8				  -	      endif
   6711  41b8				  -altkernel2
   6712  41b8				  -	      txa
   6713  41b8				  -	      ifnconst	vertical_reflect
   6714  41b8				  -	      sbx	#256-pfwidth
   6715  41b8				  -	      else
   6716  41b8				  -	      sbx	#256-pfwidth/2
   6717  41b8				  -	      endif
   6718  41b8				  -	      bmi	lastkernelline
   6719  41b8				  -	      ifconst	pfrowheight
   6720  41b8				  -	      lda	#pfrowheight
   6721  41b8				  -	      else
   6722  41b8				  -	      ifnconst	pfres
   6723  41b8				  -	      lda	#8
   6724  41b8				  -	      else
   6725  41b8				  -	      lda	#(96/pfres)	; try to come close to the real size
   6726  41b8				  -	      endif
   6727  41b8				  -	      endif
   6728  41b8				  -	      sta	temp1
   6729  41b8				  -	      jmp	continuekernel
   6730  41b8					      endif
   6731  41b8
   6732  41b8				   altkernel
   6733  41b8
   6734  41b8				  -	      ifconst	PFmaskvalue
   6735  41b8				  -	      lda	#PFmaskvalue
   6736  41b8					      else
   6737  41b8		       a9 00		      lda	#0
   6738  41ba					      endif
   6739  41ba		       85 0e		      sta	PF1L
   6740  41bc		       85 0f		      sta	PF2
   6741  41be
   6742  41be
   6743  41be							;sleep 3
   6744  41be
   6745  41be							;28 cycles to fix things
   6746  41be							;minus 11=17
   6747  41be
   6748  41be							; lax temp4
   6749  41be							; clc
   6750  41be		       8a		      txa
   6751  41bf					      ifnconst	vertical_reflect
   6752  41bf		       cb fc		      sbx	#256-pfwidth
   6753  41c1				  -	      else
   6754  41c1				  -	      sbx	#256-pfwidth/2
   6755  41c1					      endif
   6756  41c1
   6757  41c1		       30 12		      bmi	lastkernelline
   6758  41c3
   6759  41c3				  -	      ifconst	PFcolorandheight
   6760  41c3				  -	      ifconst	pfres
   6761  41c3				  -	      ldy	playfieldcolorandheight-131+pfres*pfwidth,x
   6762  41c3				  -	      else
   6763  41c3				  -	      ldy	playfieldcolorandheight-87,x
   6764  41c3				  -	      endif
   6765  41c3				  -	      ifnconst	backgroundchange
   6766  41c3				  -	      sty	COLUPF
   6767  41c3				  -	      else
   6768  41c3				  -	      sty	COLUBK
   6769  41c3				  -	      endif
   6770  41c3				  -	      ifconst	pfres
   6771  41c3				  -	      lda	playfieldcolorandheight-132+pfres*pfwidth,x
   6772  41c3				  -	      else
   6773  41c3				  -	      lda	playfieldcolorandheight-88,x
   6774  41c3				  -	      endif
   6775  41c3				  -	      sta.w	temp1
   6776  41c3					      endif
   6777  41c3				  -	      ifconst	PFheights
   6778  41c3				  -	      lsr
   6779  41c3				  -	      lsr
   6780  41c3				  -	      tay
   6781  41c3				  -	      lda	(pfheighttable),y
   6782  41c3				  -	      sta.w	temp1
   6783  41c3					      endif
   6784  41c3					      ifconst	PFcolors
   6785  41c3		       a8		      tay
   6786  41c4		       b1 f0		      lda	(pfcolortable),y
   6787  41c6					      ifnconst	backgroundchange
   6788  41c6		       85 08		      sta	COLUPF
   6789  41c8				  -	      else
   6790  41c8				  -	      sta	COLUBK
   6791  41c8					      endif
   6792  41c8				  -	      ifconst	pfrowheight
   6793  41c8				  -	      lda	#pfrowheight
   6794  41c8					      else
   6795  41c8				  -	      ifnconst	pfres
   6796  41c8				  -	      lda	#8
   6797  41c8					      else
   6798  41c8		       a9 18		      lda	#(96/pfres)	; try to come close to the real size
   6799  41ca					      endif
   6800  41ca					      endif
   6801  41ca		       85 9c		      sta	temp1
   6802  41cc					      endif
   6803  41cc					      ifnconst	PFcolorandheight
   6804  41cc				  -	      ifnconst	PFcolors
   6805  41cc				  -	      ifnconst	PFheights
   6806  41cc				  -	      ifnconst	no_blank_lines
   6807  41cc				  -			; read paddle 0
   6808  41cc				  -			; lo-res paddle read
   6809  41cc				  -			; bit INPT0
   6810  41cc				  -			; bmi paddleskipread
   6811  41cc				  -			; inc paddle0
   6812  41cc				  -			;donepaddleskip
   6813  41cc				  -	      sleep	10
   6814  41cc				  -	      ifconst	pfrowheight
   6815  41cc				  -	      lda	#pfrowheight
   6816  41cc				  -	      else
   6817  41cc				  -	      ifnconst	pfres
   6818  41cc				  -	      lda	#8
   6819  41cc				  -	      else
   6820  41cc				  -	      lda	#(96/pfres)	; try to come close to the real size
   6821  41cc				  -	      endif
   6822  41cc				  -	      endif
   6823  41cc				  -	      sta	temp1
   6824  41cc				  -	      endif
   6825  41cc				  -	      endif
   6826  41cc					      endif
   6827  41cc					      endif
   6828  41cc
   6829  41cc
   6830  41cc		       a5 92		      lda	ballheight
   6831  41ce		       c7 89		      dcp	bally
   6832  41d0		       e5 9f		      sbc	temp4
   6833  41d2
   6834  41d2
   6835  41d2		       4c 76 f1 	      jmp	goback
   6836  41d5
   6837  41d5
   6838  41d5					      ifnconst	no_blank_lines
   6839  41d5				   lastkernelline
   6840  41d5				  -	      ifnconst	PFcolors
   6841  41d5				  -	      sleep	10
   6842  41d5					      else
   6843  41d5		       a0 7c		      ldy	#124
   6844  41d7		       b1 f0		      lda	(pfcolortable),y
   6845  41d9		       85 08		      sta	COLUPF
   6846  41db					      endif
   6847  41db
   6848  41db				  -	      ifconst	PFheights
   6849  41db				  -	      ldx	#1
   6850  41db				  -			;sleep 4
   6851  41db				  -	      sleep	3	; this was over 1 cycle
   6852  41db					      else
   6853  41db		       a6 ef		      ldx	playfieldpos
   6854  41dd							;sleep 3
      0  41dd					      sleep	2	; this was over 1 cycle
      1  41dd				   .CYCLES    SET	2
      2  41dd
      3  41dd				  -	      IF	.CYCLES < 2
      4  41dd				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  41dd				  -	      ERR
      6  41dd					      ENDIF
      7  41dd
      8  41dd				  -	      IF	.CYCLES & 1
      9  41dd				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  41dd				  -	      nop	0
     11  41dd				  -	      ELSE
     12  41dd				  -	      bit	VSYNC
     13  41dd				  -	      ENDIF
     14  41dd				  -.CYCLES    SET	.CYCLES - 3
     15  41dd					      ENDIF
     16  41dd
     17  41dd					      REPEAT	.CYCLES / 2
     18  41dd		       ea		      nop
     19  41de					      REPEND
   6856  41de					      endif
   6857  41de
   6858  41de		       4c 1b f2 	      jmp	enterlastkernel
   6859  41e1
   6860  41e1				  -	      else
   6861  41e1				  -lastkernelline
   6862  41e1				  -
   6863  41e1				  -	      ifconst	PFheights
   6864  41e1				  -	      ldx	#1
   6865  41e1				  -			;sleep 5
   6866  41e1				  -	      sleep	4	; this was over 1 cycle
   6867  41e1				  -	      else
   6868  41e1				  -	      ldx	playfieldpos
   6869  41e1				  -			;sleep 4
   6870  41e1				  -	      sleep	3	; this was over 1 cycle
   6871  41e1				  -	      endif
   6872  41e1				  -
   6873  41e1				  -	      cpx	#0
   6874  41e1				  -	      bne	.enterfromNBL
   6875  41e1				  -	      jmp	no_blank_lines_bailout
   6876  41e1					      endif
   6877  41e1
   6878  41e1					      if	((<*)>$d5)
   6879  4200		       00 00 00 00*	      align	256
   6880  4200					      endif
   6881  4200							; this is a kludge to prevent page wrapping - fix!!!
   6882  4200
   6883  4200				   .skipDrawlastP1
   6884  4200		       a9 00		      lda	#0
   6885  4202		       a8		      tay		; added so we don't cross a page
   6886  4203		       4c 2d f2 	      jmp	.continuelastP1
   6887  4206
   6888  4206				   .endkerloop		; enter at cycle 59??
   6889  4206
   6890  4206		       ea		      nop
   6891  4207
   6892  4207				   .enterfromNBL
   6893  4207					      ifconst	pfres
   6894  4207		       ac fc 10 	      ldy.w	playfield+pfres*pfwidth-4
   6895  420a		       84 0e		      sty	PF1L	;3
   6896  420c		       ac fd 10 	      ldy.w	playfield+pfres*pfwidth-3-pfadjust
   6897  420f		       84 0f		      sty	PF2L	;3
   6898  4211		       ac ff 10 	      ldy.w	playfield+pfres*pfwidth-1
   6899  4214		       84 0e		      sty	PF1R	; possibly too early?
   6900  4216		       ac fe 10 	      ldy.w	playfield+pfres*pfwidth-2-pfadjust
   6901  4219		       84 0f		      sty	PF2R	;3
   6902  421b				  -	      else
   6903  421b				  -	      ldy.w	playfield-48+pfwidth*12+44
   6904  421b				  -	      sty	PF1L	;3
   6905  421b				  -	      ldy.w	playfield-48+pfwidth*12+45-pfadjust
   6906  421b				  -	      sty	PF2L	;3
   6907  421b				  -	      ldy.w	playfield-48+pfwidth*12+47
   6908  421b				  -	      sty	PF1R	; possibly too early?
   6909  421b				  -	      ldy.w	playfield-48+pfwidth*12+46-pfadjust
   6910  421b				  -	      sty	PF2R	;3
   6911  421b					      endif
   6912  421b
   6913  421b				   enterlastkernel
   6914  421b		       a5 92		      lda	ballheight
   6915  421d
   6916  421d							; tya
   6917  421d		       c7 89		      dcp	bally
   6918  421f							; sleep 4
   6919  421f
   6920  421f							; sbc stack3
   6921  421f		       2a		      rol
   6922  4220		       2a		      rol
   6923  4221		       85 1f		      sta	ENABL
   6924  4223
   6925  4223		       a5 8f		      lda	player1height	;3
   6926  4225		       c7 86		      dcp	player1y	;5
   6927  4227		       90 d7		      bcc	.skipDrawlastP1
   6928  4229		       a4 86		      ldy	player1y	;3
   6929  422b		       b1 8c		      lda	(player1pointer),y	;5; player0pointer must be selected carefully by the compiler
   6930  422d							; so it doesn't cross a page boundary!
   6931  422d
   6932  422d				   .continuelastP1
   6933  422d		       85 1c		      sta	GRP1	;3
   6934  422f
   6935  422f				  -	      ifnconst	player1colors
   6936  422f				  -	      lda	missile1height	;3
   6937  422f				  -	      dcp	missile1y	;5
   6938  422f					      else
   6939  422f		       b1 87		      lda	(player1color),y
   6940  4231		       85 07		      sta	COLUP1
   6941  4233					      endif
   6942  4233
   6943  4233		       ca		      dex
   6944  4234							;dec temp4 ; might try putting this above PF writes
   6945  4234		       f0 36		      beq	endkernel
   6946  4236
   6947  4236
   6948  4236					      ifconst	pfres
   6949  4236		       ac fc 10 	      ldy.w	playfield+pfres*pfwidth-4
   6950  4239		       84 0e		      sty	PF1L	;3
   6951  423b		       ac fd 10 	      ldy.w	playfield+pfres*pfwidth-3-pfadjust
   6952  423e		       84 0f		      sty	PF2L	;3
   6953  4240		       ac ff 10 	      ldy.w	playfield+pfres*pfwidth-1
   6954  4243		       84 0e		      sty	PF1R	; possibly too early?
   6955  4245		       ac fe 10 	      ldy.w	playfield+pfres*pfwidth-2-pfadjust
   6956  4248		       84 0f		      sty	PF2R	;3
   6957  424a				  -	      else
   6958  424a				  -	      ldy.w	playfield-48+pfwidth*12+44
   6959  424a				  -	      sty	PF1L	;3
   6960  424a				  -	      ldy.w	playfield-48+pfwidth*12+45-pfadjust
   6961  424a				  -	      sty	PF2L	;3
   6962  424a				  -	      ldy.w	playfield-48+pfwidth*12+47
   6963  424a				  -	      sty	PF1R	; possibly too early?
   6964  424a				  -	      ldy.w	playfield-48+pfwidth*12+46-pfadjust
   6965  424a				  -	      sty	PF2R	;3
   6966  424a					      endif
   6967  424a
   6968  424a				  -	      ifnconst	player1colors
   6969  424a				  -	      rol		;2
   6970  424a				  -	      rol		;2
   6971  424a				  -	      sta	ENAM1	;3
   6972  424a					      else
   6973  424a					      ifnconst	playercolors
      0  424a					      sleep	7
      1  424a				   .CYCLES    SET	7
      2  424a
      3  424a				  -	      IF	.CYCLES < 2
      4  424a				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  424a				  -	      ERR
      6  424a					      ENDIF
      7  424a
      8  424a					      IF	.CYCLES & 1
      9  424a					      IFNCONST	NO_ILLEGAL_OPCODES
     10  424a		       04 00		      nop	0
     11  424c				  -	      ELSE
     12  424c				  -	      bit	VSYNC
     13  424c					      ENDIF
     14  424c				   .CYCLES    SET	.CYCLES - 3
     15  424c					      ENDIF
     16  424c
     17  424c					      REPEAT	.CYCLES / 2
     18  424c		       ea		      nop
     17  424c					      REPEND
     18  424d		       ea		      nop
     19  424e					      REPEND
   6975  424e				  -	      else
   6976  424e				  -	      lda.w	player0colorstore
   6977  424e				  -	      sta	COLUP0
   6978  424e					      endif
   6979  424e					      endif
   6980  424e
   6981  424e		       ad 8e 00 	      lda.w	player0height
   6982  4251		       c7 85		      dcp	player0y
   6983  4253		       90 11		      bcc	.skipDrawlastP0
   6984  4255		       a4 85		      ldy	player0y
   6985  4257		       b1 8a		      lda	(player0pointer),y
   6986  4259				   .continuelastP0
   6987  4259		       85 1b		      sta	GRP0
   6988  425b
   6989  425b
   6990  425b
   6991  425b					      ifnconst	no_blank_lines
   6992  425b		       a5 90		      lda	missile0height	;3
   6993  425d		       c7 91		      dcp	missile0y	;5
   6994  425f		       e5 f6		      sbc	stack1
   6995  4261		       85 1d		      sta	ENAM0	;3
   6996  4263		       4c 06 f2 	      jmp	.endkerloop
   6997  4266				  -	      else
   6998  4266				  -	      ifconst	readpaddle
   6999  4266				  -	      ldy	currentpaddle
   7000  4266				  -	      lda	INPT0,y
   7001  4266				  -	      bpl	noreadpaddle2
   7002  4266				  -	      inc	paddle
   7003  4266				  -	      jmp	.endkerloop
   7004  4266				  -noreadpaddle2
   7005  4266				  -	      sleep	4
   7006  4266				  -	      jmp	.endkerloop
   7007  4266				  -	      else		; no_blank_lines and no paddle reading
   7008  4266				  -	      pla
   7009  4266				  -	      pha		; 14 cycles in 4 bytes
   7010  4266				  -	      pla
   7011  4266				  -	      pha
   7012  4266				  -			; sleep 14
   7013  4266				  -	      jmp	.endkerloop
   7014  4266				  -	      endif
   7015  4266					      endif
   7016  4266
   7017  4266
   7018  4266							; ifconst donepaddleskip
   7019  4266							;paddleskipread
   7020  4266							; this is kind of lame, since it requires 4 cycles from a page boundary crossing
   7021  4266							; plus we get a lo-res paddle read
   7022  4266							; bmi donepaddleskip
   7023  4266							; endif
   7024  4266
   7025  4266				   .skipDrawlastP0
   7026  4266		       a9 00		      lda	#0
   7027  4268		       a8		      tay
   7028  4269		       4c 59 f2 	      jmp	.continuelastP0
   7029  426c
   7030  426c				  -	      ifconst	no_blank_lines
   7031  426c				  -no_blank_lines_bailout
   7032  426c				  -	      ldx	#0
   7033  426c					      endif
   7034  426c
   7035  426c				   endkernel
   7036  426c							; 6 digit score routine
   7037  426c		       86 0e		      stx	PF1
   7038  426e		       86 0f		      stx	PF2
   7039  4270		       86 0d		      stx	PF0
   7040  4272		       18		      clc
   7041  4273
   7042  4273				  -	      ifconst	pfrowheight
   7043  4273				  -	      lda	#pfrowheight+2
   7044  4273					      else
   7045  4273				  -	      ifnconst	pfres
   7046  4273				  -	      lda	#10
   7047  4273					      else
   7048  4273		       a9 1a		      lda	#(96/pfres)+2	; try to come close to the real size
   7049  4275					      endif
   7050  4275					      endif
   7051  4275
   7052  4275		       e5 ef		      sbc	playfieldpos
   7053  4277		       85 ef		      sta	playfieldpos
   7054  4279		       8a		      txa
   7055  427a
   7056  427a				  -	      ifconst	shakescreen
   7057  427a				  -	      bit	shakescreen
   7058  427a				  -	      bmi	noshakescreen2
   7059  427a				  -	      ldx	#$3D
   7060  427a				  -noshakescreen2
   7061  427a					      endif
   7062  427a
   7063  427a		       95 02		      sta	WSYNC,x
   7064  427c
   7065  427c							; STA WSYNC ;first one, need one more
   7066  427c		       85 0b		      sta	REFP0
   7067  427e		       85 0c		      sta	REFP1
   7068  4280		       85 1b		      STA	GRP0
   7069  4282		       85 1c		      STA	GRP1
   7070  4284							; STA PF1
   7071  4284							; STA PF2
   7072  4284		       85 2b		      sta	HMCLR
   7073  4286		       85 1d		      sta	ENAM0
   7074  4288		       85 1e		      sta	ENAM1
   7075  428a		       85 1f		      sta	ENABL
   7076  428c
   7077  428c		       a5 9d		      lda	temp2	;restore variables that were obliterated by kernel
   7078  428e		       85 85		      sta	player0y
   7079  4290		       a5 9e		      lda	temp3
   7080  4292		       85 86		      sta	player1y
   7081  4294				  -	      ifnconst	player1colors
   7082  4294				  -	      lda	temp6
   7083  4294				  -	      sta	missile1y
   7084  4294					      endif
   7085  4294					      ifnconst	playercolors
   7086  4294					      ifnconst	readpaddle
   7087  4294		       a5 a0		      lda	temp5
   7088  4296		       85 91		      sta	missile0y
   7089  4298					      endif
   7090  4298					      endif
   7091  4298		       a5 f7		      lda	stack2
   7092  429a		       85 89		      sta	bally
   7093  429c
   7094  429c							; strangely, this isn't required any more. might have
   7095  429c							; resulted from the no_blank_lines score bounce fix
   7096  429c							;ifconst no_blank_lines
   7097  429c							;sta WSYNC
   7098  429c							;endif
   7099  429c
   7100  429c		       ad 84 02 	      lda	INTIM
   7101  429f		       18		      clc
   7102  42a0					      ifnconst	vblank_time
   7103  42a0		       69 8e		      adc	#43+12+87
   7104  42a2				  -	      else
   7105  42a2				  -	      adc	#vblank_time+12+87
   7106  42a2				  -
   7107  42a2					      endif
   7108  42a2							; sta WSYNC
   7109  42a2		       8d 96 02 	      sta	TIM64T
   7110  42a5
   7111  42a5					      ifconst	minikernel
   7112  42a5		       20 86 f5 	      jsr	minikernel
   7113  42a8					      endif
   7114  42a8
   7115  42a8							; now reassign temp vars for score pointers
   7116  42a8
   7117  42a8							; score pointers contain:
   7118  42a8							; score1-5: lo1,lo2,lo3,lo4,lo5,lo6
   7119  42a8							; swap lo2->temp1
   7120  42a8							; swap lo4->temp3
   7121  42a8							; swap lo6->temp5
   7122  42a8				  -	      ifnconst	noscore
   7123  42a8				  -	      lda	scorepointers+1
   7124  42a8				  -			; ldy temp1
   7125  42a8				  -	      sta	temp1
   7126  42a8				  -			; sty scorepointers+1
   7127  42a8				  -
   7128  42a8				  -	      lda	scorepointers+3
   7129  42a8				  -			; ldy temp3
   7130  42a8				  -	      sta	temp3
   7131  42a8				  -			; sty scorepointers+3
   7132  42a8				  -
   7133  42a8				  -
   7134  42a8				  -	      sta	HMCLR
   7135  42a8				  -	      tsx
   7136  42a8				  -	      stx	stack1
   7137  42a8				  -	      ldx	#$E0
   7138  42a8				  -	      stx	HMP0
   7139  42a8				  -
   7140  42a8				  -	      LDA	scorecolor
   7141  42a8				  -	      STA	COLUP0
   7142  42a8				  -	      STA	COLUP1
   7143  42a8				  -	      ifconst	scorefade
   7144  42a8				  -	      STA	stack2
   7145  42a8				  -	      endif
   7146  42a8				  -	      ifconst	pfscore
   7147  42a8				  -	      lda	pfscorecolor
   7148  42a8				  -	      sta	COLUPF
   7149  42a8				  -	      endif
   7150  42a8				  -	      sta	WSYNC
   7151  42a8				  -	      ldx	#0
   7152  42a8				  -	      STx	GRP0
   7153  42a8				  -	      STx	GRP1	; seems to be needed because of vdel
   7154  42a8				  -
   7155  42a8				  -	      lda	scorepointers+5
   7156  42a8				  -			; ldy temp5
   7157  42a8				  -	      sta	temp5,x
   7158  42a8				  -			; sty scorepointers+5
   7159  42a8				  -	      lda	#>scoretable
   7160  42a8				  -	      sta	scorepointers+1
   7161  42a8				  -	      sta	scorepointers+3
   7162  42a8				  -	      sta	scorepointers+5
   7163  42a8				  -	      sta	temp2
   7164  42a8				  -	      sta	temp4
   7165  42a8				  -	      sta	temp6
   7166  42a8				  -	      LDY	#7
   7167  42a8				  -	      STY	VDELP0
   7168  42a8				  -	      STA	RESP0
   7169  42a8				  -	      STA	RESP1
   7170  42a8				  -
   7171  42a8				  -
   7172  42a8				  -	      LDA	#$03
   7173  42a8				  -	      STA	NUSIZ0
   7174  42a8				  -	      STA	NUSIZ1
   7175  42a8				  -	      STA	VDELP1
   7176  42a8				  -	      LDA	#$F0
   7177  42a8				  -	      STA	HMP1
   7178  42a8				  -	      lda	(scorepointers),y
   7179  42a8				  -	      sta	GRP0
   7180  42a8				  -	      STA	HMOVE	; cycle 73 ?
   7181  42a8				  -	      jmp	beginscore
   7182  42a8				  -
   7183  42a8				  -
   7184  42a8				  -	      if	((<*)>$d4)
   7185  42a8				  -	      align	256	; kludge that potentially wastes space! should be fixed!
   7186  42a8				  -	      endif
   7187  42a8				  -
   7188  42a8				  -loop2
   7189  42a8				  -	      lda	(scorepointers),y	;+5 68 204
   7190  42a8				  -	      sta	GRP0	;+3 71 213 D1 -- -- --
   7191  42a8				  -	      ifconst	pfscore
   7192  42a8				  -	      lda.w	pfscore1
   7193  42a8				  -	      sta	PF1
   7194  42a8				  -	      else
   7195  42a8				  -	      ifconst	scorefade
   7196  42a8				  -	      sleep	2
   7197  42a8				  -	      dec	stack2	; decrement the temporary scorecolor
   7198  42a8				  -	      else
   7199  42a8				  -	      sleep	7
   7200  42a8				  -	      endif
   7201  42a8				  -	      endif
   7202  42a8				  -			; cycle 0
   7203  42a8				  -beginscore
   7204  42a8				  -	      lda	(scorepointers+$8),y	;+5 5 15
   7205  42a8				  -	      sta	GRP1	;+3 8 24 D1 D1 D2 --
   7206  42a8				  -	      lda	(scorepointers+$6),y	;+5 13 39
   7207  42a8				  -	      sta	GRP0	;+3 16 48 D3 D1 D2 D2
   7208  42a8				  -	      lax	(scorepointers+$2),y	;+5 29 87
   7209  42a8				  -	      txs
   7210  42a8				  -	      lax	(scorepointers+$4),y	;+5 36 108
   7211  42a8				  -	      ifconst	scorefade
   7212  42a8				  -	      lda	stack2
   7213  42a8				  -	      else
   7214  42a8				  -	      sleep	3
   7215  42a8				  -	      endif
   7216  42a8				  -
   7217  42a8				  -	      ifconst	pfscore
   7218  42a8				  -	      lda	pfscore2
   7219  42a8				  -	      sta	PF1
   7220  42a8				  -	      else
   7221  42a8				  -	      ifconst	scorefade
   7222  42a8				  -	      sta	COLUP0
   7223  42a8				  -	      sta	COLUP1
   7224  42a8				  -	      else
   7225  42a8				  -	      sleep	6
   7226  42a8				  -	      endif
   7227  42a8				  -	      endif
   7228  42a8				  -
   7229  42a8				  -	      lda	(scorepointers+$A),y	;+5 21 63
   7230  42a8				  -	      stx	GRP1	;+3 44 132 D3 D3 D4 D2!
   7231  42a8				  -	      tsx
   7232  42a8				  -	      stx	GRP0	;+3 47 141 D5 D3! D4 D4
   7233  42a8				  -	      sta	GRP1	;+3 50 150 D5 D5 D6 D4!
   7234  42a8				  -	      sty	GRP0	;+3 53 159 D4* D5! D6 D6
   7235  42a8				  -	      dey
   7236  42a8				  -	      bpl	loop2	;+2 60 180
   7237  42a8				  -
   7238  42a8				  -	      ldx	stack1
   7239  42a8				  -	      txs
   7240  42a8				  -			; lda scorepointers+1
   7241  42a8				  -	      ldy	temp1
   7242  42a8				  -			; sta temp1
   7243  42a8				  -	      sty	scorepointers+1
   7244  42a8				  -
   7245  42a8				  -	      LDA	#0
   7246  42a8				  -	      sta	PF1
   7247  42a8				  -	      STA	GRP0
   7248  42a8				  -	      STA	GRP1
   7249  42a8				  -	      STA	VDELP0
   7250  42a8				  -	      STA	VDELP1	;do we need these
   7251  42a8				  -	      STA	NUSIZ0
   7252  42a8				  -	      STA	NUSIZ1
   7253  42a8				  -
   7254  42a8				  -			; lda scorepointers+3
   7255  42a8				  -	      ldy	temp3
   7256  42a8				  -			; sta temp3
   7257  42a8				  -	      sty	scorepointers+3
   7258  42a8				  -
   7259  42a8				  -			; lda scorepointers+5
   7260  42a8				  -	      ldy	temp5
   7261  42a8				  -			; sta temp5
   7262  42a8				  -	      sty	scorepointers+5
   7263  42a8					      endif		;noscore
   7264  42a8				  -	      ifconst	readpaddle
   7265  42a8				  -	      lda	#%11000010
   7266  42a8					      else
   7267  42a8				  -	      ifconst	qtcontroller
   7268  42a8				  -	      lda	qtcontroller
   7269  42a8				  -	      lsr		; bit 0 in carry
   7270  42a8				  -	      lda	#4
   7271  42a8				  -	      ror		; carry into top of A
   7272  42a8					      else
   7273  42a8		       a9 02		      lda	#2
   7274  42aa					      endif		; qtcontroller
   7275  42aa					      endif		; readpaddle
   7276  42aa		       85 02		      sta	WSYNC
   7277  42ac		       85 01		      sta	VBLANK
      0  42ae					      RETURN
      1  42ae				  -	      ifnconst	bankswitch
      2  42ae				  -	      rts
      3  42ae					      else
      4  42ae		       4c da ff 	      jmp	BS_return
      5  42b1					      endif
   7279  42b1				  -	      ifconst	shakescreen
   7280  42b1				  -doshakescreen
   7281  42b1				  -	      bit	shakescreen
   7282  42b1				  -	      bmi	noshakescreen
   7283  42b1				  -	      sta	WSYNC
   7284  42b1				  -noshakescreen
   7285  42b1				  -	      ldx	missile0height
   7286  42b1				  -	      inx
   7287  42b1				  -	      rts
   7288  42b1					      endif
   7289  42b1
   7290  42b1							; Provided under the CC0 license. See the included LICENSE.txt for details.
   7291  42b1
   7292  42b1				   start
   7293  42b1		       78		      sei
   7294  42b2		       d8		      cld
   7295  42b3		       a0 00		      ldy	#0
   7296  42b5		       a5 d0		      lda	$D0
   7297  42b7		       c9 2c		      cmp	#$2C	;check RAM location #1
   7298  42b9		       d0 07		      bne	MachineIs2600
   7299  42bb		       a5 d1		      lda	$D1
   7300  42bd		       c9 a9		      cmp	#$A9	;check RAM location #2
   7301  42bf		       d0 01		      bne	MachineIs2600
   7302  42c1		       88		      dey
   7303  42c2				   MachineIs2600
   7304  42c2		       a2 00		      ldx	#0
   7305  42c4		       8a		      txa
   7306  42c5				   clearmem
   7307  42c5		       e8		      inx
   7308  42c6		       9a		      txs
   7309  42c7		       48		      pha
   7310  42c8		       d0 fb		      bne	clearmem
   7311  42ca		       84 9c		      sty	temp1
   7312  42cc					      ifnconst	multisprite
   7313  42cc				  -	      ifconst	pfrowheight
   7314  42cc				  -	      lda	#pfrowheight
   7315  42cc					      else
   7316  42cc					      ifconst	pfres
   7317  42cc		       a9 18		      lda	#(96/pfres)
   7318  42ce				  -	      else
   7319  42ce				  -	      lda	#8
   7320  42ce					      endif
   7321  42ce					      endif
   7322  42ce		       85 ef		      sta	playfieldpos
   7323  42d0					      endif
   7324  42d0		       a2 05		      ldx	#5
   7325  42d2				   initscore
   7326  42d2		       a9 71		      lda	#<scoretable
   7327  42d4		       95 96		      sta	scorepointers,x
   7328  42d6		       ca		      dex
   7329  42d7		       10 f9		      bpl	initscore
   7330  42d9		       a9 01		      lda	#1
   7331  42db		       85 0a		      sta	CTRLPF
   7332  42dd		       0d 84 02 	      ora	INTIM
   7333  42e0		       85 a2		      sta	rand
   7334  42e2
   7335  42e2				  -	      ifconst	multisprite
   7336  42e2				  -	      jsr	multisprite_setup
   7337  42e2					      endif
   7338  42e2
   7339  42e2				  -	      ifnconst	bankswitch
   7340  42e2				  -	      jmp	game
   7341  42e2					      else
   7342  42e2		       a9 90		      lda	#>(game-1)
   7343  42e4		       48		      pha
   7344  42e5		       a9 ff		      lda	#<(game-1)
   7345  42e7		       48		      pha
   7346  42e8		       48		      pha
   7347  42e9		       48		      pha
   7348  42ea		       a2 01		      ldx	#1
   7349  42ec		       4c e8 ff 	      jmp	BS_jsr
   7350  42ef					      endif
   7351  42ef							; Provided under the CC0 license. See the included LICENSE.txt for details.
   7352  42ef
   7353  42ef							; playfield drawing routines
   7354  42ef							; you get a 32x12 bitmapped display in a single color :)
   7355  42ef							; 0-31 and 0-11
   7356  42ef
   7357  42ef				   pfclear		; clears playfield - or fill with pattern
   7358  42ef					      ifconst	pfres
   7359  42ef		       a2 0f		      ldx	#pfres*pfwidth-1
   7360  42f1				  -	      else
   7361  42f1				  -	      ldx	#47-(4-pfwidth)*12	; will this work?
   7362  42f1					      endif
   7363  42f1				   pfclear_loop
   7364  42f1				  -	      ifnconst	superchip
   7365  42f1				  -	      sta	playfield,x
   7366  42f1					      else
   7367  42f1		       9d 70 10 	      sta	playfield-128,x
   7368  42f4					      endif
   7369  42f4		       ca		      dex
   7370  42f5		       10 fa		      bpl	pfclear_loop
      0  42f7					      RETURN
      1  42f7				  -	      ifnconst	bankswitch
      2  42f7				  -	      rts
      3  42f7					      else
      4  42f7		       4c da ff 	      jmp	BS_return
      5  42fa					      endif
   7372  42fa
   7373  42fa				   setuppointers
   7374  42fa		       86 9d		      stx	temp2	; store on.off.flip value
   7375  42fc		       aa		      tax		; put x-value in x 
   7376  42fd		       4a		      lsr
   7377  42fe		       4a		      lsr
   7378  42ff		       4a		      lsr		; divide x pos by 8 
   7379  4300		       85 9c		      sta	temp1
   7380  4302		       98		      tya
   7381  4303		       0a		      asl
   7382  4304					      if	pfwidth=4
   7383  4304		       0a		      asl		; multiply y pos by 4
   7384  4305					      endif		; else multiply by 2
   7385  4305		       18		      clc
   7386  4306		       65 9c		      adc	temp1	; add them together to get actual memory location offset
   7387  4308		       a8		      tay		; put the value in y
   7388  4309		       a5 9d		      lda	temp2	; restore on.off.flip value
   7389  430b		       60		      rts
   7390  430c
   7391  430c				   pfread
   7392  430c							;x=xvalue, y=yvalue
   7393  430c		       20 fa f2 	      jsr	setuppointers
   7394  430f		       bd a4 f3 	      lda	setbyte,x
   7395  4312		       39 f0 10 	      and	playfield,y
   7396  4315		       5d a4 f3 	      eor	setbyte,x
   7397  4318							; beq readzero
   7398  4318							; lda #1
   7399  4318							; readzero
      0  4318					      RETURN
      1  4318				  -	      ifnconst	bankswitch
      2  4318				  -	      rts
      3  4318					      else
      4  4318		       4c da ff 	      jmp	BS_return
      5  431b					      endif
   7401  431b
   7402  431b				   pfpixel
   7403  431b							;x=xvalue, y=yvalue, a=0,1,2
   7404  431b		       20 fa f2 	      jsr	setuppointers
   7405  431e
   7406  431e					      ifconst	bankswitch
   7407  431e		       a5 9d		      lda	temp2	; load on.off.flip value (0,1, or 2)
   7408  4320		       f0 0f		      beq	pixelon_r	; if "on" go to on
   7409  4322		       4a		      lsr
   7410  4323		       b0 18		      bcs	pixeloff_r	; value is 1 if true
   7411  4325		       b9 f0 10 	      lda	playfield,y	; if here, it's "flip"
   7412  4328		       5d a4 f3 	      eor	setbyte,x
   7413  432b					      ifconst	superchip
   7414  432b		       99 70 10 	      sta	playfield-128,y
   7415  432e				  -	      else
   7416  432e				  -	      sta	playfield,y
   7417  432e					      endif
      0  432e					      RETURN
      1  432e				  -	      ifnconst	bankswitch
      2  432e				  -	      rts
      3  432e					      else
      4  432e		       4c da ff 	      jmp	BS_return
      5  4331					      endif
   7419  4331				   pixelon_r
   7420  4331		       b9 f0 10 	      lda	playfield,y
   7421  4334		       1d a4 f3 	      ora	setbyte,x
   7422  4337					      ifconst	superchip
   7423  4337		       99 70 10 	      sta	playfield-128,y
   7424  433a				  -	      else
   7425  433a				  -	      sta	playfield,y
   7426  433a					      endif
      0  433a					      RETURN
      1  433a				  -	      ifnconst	bankswitch
      2  433a				  -	      rts
      3  433a					      else
      4  433a		       4c da ff 	      jmp	BS_return
      5  433d					      endif
   7428  433d				   pixeloff_r
   7429  433d		       bd a4 f3 	      lda	setbyte,x
   7430  4340		       49 ff		      eor	#$ff
   7431  4342		       39 f0 10 	      and	playfield,y
   7432  4345					      ifconst	superchip
   7433  4345		       99 70 10 	      sta	playfield-128,y
   7434  4348				  -	      else
   7435  4348				  -	      sta	playfield,y
   7436  4348					      endif
      0  4348					      RETURN
      1  4348				  -	      ifnconst	bankswitch
      2  4348				  -	      rts
      3  4348					      else
      4  4348		       4c da ff 	      jmp	BS_return
      5  434b					      endif
   7438  434b
   7439  434b				  -	      else
   7440  434b				  -	      jmp	plotpoint
   7441  434b					      endif
   7442  434b
   7443  434b				   pfhline
   7444  434b							;x=xvalue, y=yvalue, a=0,1,2, temp3=endx
   7445  434b		       20 fa f2 	      jsr	setuppointers
   7446  434e		       4c 58 f3 	      jmp	noinc
   7447  4351				   keepgoing
   7448  4351		       e8		      inx
   7449  4352		       8a		      txa
   7450  4353		       29 07		      and	#7
   7451  4355		       d0 01		      bne	noinc
   7452  4357		       c8		      iny
   7453  4358				   noinc
   7454  4358		       20 7d f3 	      jsr	plotpoint
   7455  435b		       e4 9e		      cpx	temp3
   7456  435d		       30 f2		      bmi	keepgoing
      0  435f					      RETURN
      1  435f				  -	      ifnconst	bankswitch
      2  435f				  -	      rts
      3  435f					      else
      4  435f		       4c da ff 	      jmp	BS_return
      5  4362					      endif
   7458  4362
   7459  4362				   pfvline
   7460  4362							;x=xvalue, y=yvalue, a=0,1,2, temp3=endx
   7461  4362		       20 fa f2 	      jsr	setuppointers
   7462  4365		       84 9c		      sty	temp1	; store memory location offset
   7463  4367		       e6 9e		      inc	temp3	; increase final x by 1 
   7464  4369		       a5 9e		      lda	temp3
   7465  436b		       0a		      asl
   7466  436c					      if	pfwidth=4
   7467  436c		       0a		      asl		; multiply by 4
   7468  436d					      endif		; else multiply by 2
   7469  436d		       85 9e		      sta	temp3	; store it
   7470  436f							; Thanks to Michael Rideout for fixing a bug in this code
   7471  436f							; right now, temp1=y=starting memory location, temp3=final
   7472  436f							; x should equal original x value
   7473  436f				   keepgoingy
   7474  436f		       20 7d f3 	      jsr	plotpoint
   7475  4372		       c8		      iny
   7476  4373		       c8		      iny
   7477  4374					      if	pfwidth=4
   7478  4374		       c8		      iny
   7479  4375		       c8		      iny
   7480  4376					      endif
   7481  4376		       c4 9e		      cpy	temp3
   7482  4378		       30 f5		      bmi	keepgoingy
      0  437a					      RETURN
      1  437a				  -	      ifnconst	bankswitch
      2  437a				  -	      rts
      3  437a					      else
      4  437a		       4c da ff 	      jmp	BS_return
      5  437d					      endif
   7484  437d
   7485  437d				   plotpoint
   7486  437d		       a5 9d		      lda	temp2	; load on.off.flip value (0,1, or 2)
   7487  437f		       f0 0d		      beq	pixelon	; if "on" go to on
   7488  4381		       4a		      lsr
   7489  4382		       b0 14		      bcs	pixeloff	; value is 1 if true
   7490  4384		       b9 f0 10 	      lda	playfield,y	; if here, it's "flip"
   7491  4387		       5d a4 f3 	      eor	setbyte,x
   7492  438a					      ifconst	superchip
   7493  438a		       99 70 10 	      sta	playfield-128,y
   7494  438d				  -	      else
   7495  438d				  -	      sta	playfield,y
   7496  438d					      endif
   7497  438d		       60		      rts
   7498  438e				   pixelon
   7499  438e		       b9 f0 10 	      lda	playfield,y
   7500  4391		       1d a4 f3 	      ora	setbyte,x
   7501  4394					      ifconst	superchip
   7502  4394		       99 70 10 	      sta	playfield-128,y
   7503  4397				  -	      else
   7504  4397				  -	      sta	playfield,y
   7505  4397					      endif
   7506  4397		       60		      rts
   7507  4398				   pixeloff
   7508  4398		       bd a4 f3 	      lda	setbyte,x
   7509  439b		       49 ff		      eor	#$ff
   7510  439d		       39 f0 10 	      and	playfield,y
   7511  43a0					      ifconst	superchip
   7512  43a0		       99 70 10 	      sta	playfield-128,y
   7513  43a3				  -	      else
   7514  43a3				  -	      sta	playfield,y
   7515  43a3					      endif
   7516  43a3		       60		      rts
   7517  43a4
   7518  43a4				   setbyte
   7519  43a4					      ifnconst	pfcenter
   7520  43a4		       80		      .byte.b	$80
   7521  43a5		       40		      .byte.b	$40
   7522  43a6		       20		      .byte.b	$20
   7523  43a7		       10		      .byte.b	$10
   7524  43a8		       08		      .byte.b	$08
   7525  43a9		       04		      .byte.b	$04
   7526  43aa		       02		      .byte.b	$02
   7527  43ab		       01		      .byte.b	$01
   7528  43ac					      endif
   7529  43ac		       01		      .byte.b	$01
   7530  43ad		       02		      .byte.b	$02
   7531  43ae		       04		      .byte.b	$04
   7532  43af		       08		      .byte.b	$08
   7533  43b0		       10		      .byte.b	$10
   7534  43b1		       20		      .byte.b	$20
   7535  43b2		       40		      .byte.b	$40
   7536  43b3		       80		      .byte.b	$80
   7537  43b4		       80		      .byte.b	$80
   7538  43b5		       40		      .byte.b	$40
   7539  43b6		       20		      .byte.b	$20
   7540  43b7		       10		      .byte.b	$10
   7541  43b8		       08		      .byte.b	$08
   7542  43b9		       04		      .byte.b	$04
   7543  43ba		       02		      .byte.b	$02
   7544  43bb		       01		      .byte.b	$01
   7545  43bc		       01		      .byte.b	$01
   7546  43bd		       02		      .byte.b	$02
   7547  43be		       04		      .byte.b	$04
   7548  43bf		       08		      .byte.b	$08
   7549  43c0		       10		      .byte.b	$10
   7550  43c1		       20		      .byte.b	$20
   7551  43c2		       40		      .byte.b	$40
   7552  43c3		       80		      .byte.b	$80
   7553  43c4							; Provided under the CC0 license. See the included LICENSE.txt for details.
   7554  43c4
   7555  43c4				   pfscroll		;(a=0 left, 1 right, 2 up, 4 down, 6=upup, 12=downdown)
   7556  43c4		       d0 2a		      bne	notleft
   7557  43c6							;left
   7558  43c6					      ifconst	pfres
   7559  43c6		       a2 10		      ldx	#pfres*4
   7560  43c8				  -	      else
   7561  43c8				  -	      ldx	#48
   7562  43c8					      endif
   7563  43c8				   leftloop
   7564  43c8		       bd ef 10 	      lda	playfield-1,x
   7565  43cb		       4a		      lsr
   7566  43cc
   7567  43cc					      ifconst	superchip
   7568  43cc		       bd ee 10 	      lda	playfield-2,x
   7569  43cf		       2a		      rol
   7570  43d0		       9d 6e 10 	      sta	playfield-130,x
   7571  43d3		       bd ed 10 	      lda	playfield-3,x
   7572  43d6		       6a		      ror
   7573  43d7		       9d 6d 10 	      sta	playfield-131,x
   7574  43da		       bd ec 10 	      lda	playfield-4,x
   7575  43dd		       2a		      rol
   7576  43de		       9d 6c 10 	      sta	playfield-132,x
   7577  43e1		       bd ef 10 	      lda	playfield-1,x
   7578  43e4		       6a		      ror
   7579  43e5		       9d 6f 10 	      sta	playfield-129,x
   7580  43e8				  -	      else
   7581  43e8				  -	      rol	playfield-2,x
   7582  43e8				  -	      ror	playfield-3,x
   7583  43e8				  -	      rol	playfield-4,x
   7584  43e8				  -	      ror	playfield-1,x
   7585  43e8					      endif
   7586  43e8
   7587  43e8		       8a		      txa
   7588  43e9		       cb 04		      sbx	#4
   7589  43eb		       d0 db		      bne	leftloop
      0  43ed					      RETURN
      1  43ed				  -	      ifnconst	bankswitch
      2  43ed				  -	      rts
      3  43ed					      else
      4  43ed		       4c da ff 	      jmp	BS_return
      5  43f0					      endif
   7591  43f0
   7592  43f0				   notleft
   7593  43f0		       4a		      lsr
   7594  43f1		       90 2a		      bcc	notright
   7595  43f3							;right
   7596  43f3
   7597  43f3					      ifconst	pfres
   7598  43f3		       a2 10		      ldx	#pfres*4
   7599  43f5				  -	      else
   7600  43f5				  -	      ldx	#48
   7601  43f5					      endif
   7602  43f5				   rightloop
   7603  43f5		       bd ec 10 	      lda	playfield-4,x
   7604  43f8		       4a		      lsr
   7605  43f9					      ifconst	superchip
   7606  43f9		       bd ed 10 	      lda	playfield-3,x
   7607  43fc		       2a		      rol
   7608  43fd		       9d 6d 10 	      sta	playfield-131,x
   7609  4400		       bd ee 10 	      lda	playfield-2,x
   7610  4403		       6a		      ror
   7611  4404		       9d 6e 10 	      sta	playfield-130,x
   7612  4407		       bd ef 10 	      lda	playfield-1,x
   7613  440a		       2a		      rol
   7614  440b		       9d 6f 10 	      sta	playfield-129,x
   7615  440e		       bd ec 10 	      lda	playfield-4,x
   7616  4411		       6a		      ror
   7617  4412		       9d 6c 10 	      sta	playfield-132,x
   7618  4415				  -	      else
   7619  4415				  -	      rol	playfield-3,x
   7620  4415				  -	      ror	playfield-2,x
   7621  4415				  -	      rol	playfield-1,x
   7622  4415				  -	      ror	playfield-4,x
   7623  4415					      endif
   7624  4415		       8a		      txa
   7625  4416		       cb 04		      sbx	#4
   7626  4418		       d0 db		      bne	rightloop
      0  441a					      RETURN
      1  441a				  -	      ifnconst	bankswitch
      2  441a				  -	      rts
      3  441a					      else
      4  441a		       4c da ff 	      jmp	BS_return
      5  441d					      endif
   7628  441d
   7629  441d				   notright
   7630  441d		       4a		      lsr
   7631  441e		       90 5b		      bcc	notup
   7632  4420							;up
   7633  4420		       4a		      lsr
   7634  4421		       90 02		      bcc	onedecup
   7635  4423		       c6 ef		      dec	playfieldpos
   7636  4425				   onedecup
   7637  4425		       c6 ef		      dec	playfieldpos
   7638  4427		       f0 02		      beq	shiftdown
   7639  4429		       10 4d		      bpl	noshiftdown2
   7640  442b				   shiftdown
   7641  442b				  -	      ifconst	pfrowheight
   7642  442b				  -	      lda	#pfrowheight
   7643  442b					      else
   7644  442b				  -	      ifnconst	pfres
   7645  442b				  -	      lda	#8
   7646  442b					      else
   7647  442b		       a9 18		      lda	#(96/pfres)	; try to come close to the real size
   7648  442d					      endif
   7649  442d					      endif
   7650  442d
   7651  442d		       85 ef		      sta	playfieldpos
   7652  442f		       ad f3 10 	      lda	playfield+3
   7653  4432		       85 9f		      sta	temp4
   7654  4434		       ad f2 10 	      lda	playfield+2
   7655  4437		       85 9e		      sta	temp3
   7656  4439		       ad f1 10 	      lda	playfield+1
   7657  443c		       85 9d		      sta	temp2
   7658  443e		       ad f0 10 	      lda	playfield
   7659  4441		       85 9c		      sta	temp1
   7660  4443		       a2 00		      ldx	#0
   7661  4445				   up2
   7662  4445		       bd f4 10 	      lda	playfield+4,x
   7663  4448					      ifconst	superchip
   7664  4448		       9d 70 10 	      sta	playfield-128,x
   7665  444b		       bd f5 10 	      lda	playfield+5,x
   7666  444e		       9d 71 10 	      sta	playfield-127,x
   7667  4451		       bd f6 10 	      lda	playfield+6,x
   7668  4454		       9d 72 10 	      sta	playfield-126,x
   7669  4457		       bd f7 10 	      lda	playfield+7,x
   7670  445a		       9d 73 10 	      sta	playfield-125,x
   7671  445d				  -	      else
   7672  445d				  -	      sta	playfield,x
   7673  445d				  -	      lda	playfield+5,x
   7674  445d				  -	      sta	playfield+1,x
   7675  445d				  -	      lda	playfield+6,x
   7676  445d				  -	      sta	playfield+2,x
   7677  445d				  -	      lda	playfield+7,x
   7678  445d				  -	      sta	playfield+3,x
   7679  445d					      endif
   7680  445d		       8a		      txa
   7681  445e		       cb fc		      sbx	#252
   7682  4460					      ifconst	pfres
   7683  4460		       e0 0c		      cpx	#(pfres-1)*4
   7684  4462				  -	      else
   7685  4462				  -	      cpx	#44
   7686  4462					      endif
   7687  4462		       d0 e1		      bne	up2
   7688  4464
   7689  4464		       a5 9f		      lda	temp4
   7690  4466
   7691  4466					      ifconst	superchip
   7692  4466					      ifconst	pfres
   7693  4466		       8d 7f 10 	      sta	playfield+pfres*4-129
   7694  4469		       a5 9e		      lda	temp3
   7695  446b		       8d 7e 10 	      sta	playfield+pfres*4-130
   7696  446e		       a5 9d		      lda	temp2
   7697  4470		       8d 7d 10 	      sta	playfield+pfres*4-131
   7698  4473		       a5 9c		      lda	temp1
   7699  4475		       8d 7c 10 	      sta	playfield+pfres*4-132
   7700  4478				  -	      else
   7701  4478				  -	      sta	playfield+47-128
   7702  4478				  -	      lda	temp3
   7703  4478				  -	      sta	playfield+46-128
   7704  4478				  -	      lda	temp2
   7705  4478				  -	      sta	playfield+45-128
   7706  4478				  -	      lda	temp1
   7707  4478				  -	      sta	playfield+44-128
   7708  4478					      endif
   7709  4478				  -	      else
   7710  4478				  -	      ifconst	pfres
   7711  4478				  -	      sta	playfield+pfres*4-1
   7712  4478				  -	      lda	temp3
   7713  4478				  -	      sta	playfield+pfres*4-2
   7714  4478				  -	      lda	temp2
   7715  4478				  -	      sta	playfield+pfres*4-3
   7716  4478				  -	      lda	temp1
   7717  4478				  -	      sta	playfield+pfres*4-4
   7718  4478				  -	      else
   7719  4478				  -	      sta	playfield+47
   7720  4478				  -	      lda	temp3
   7721  4478				  -	      sta	playfield+46
   7722  4478				  -	      lda	temp2
   7723  4478				  -	      sta	playfield+45
   7724  4478				  -	      lda	temp1
   7725  4478				  -	      sta	playfield+44
   7726  4478				  -	      endif
   7727  4478					      endif
   7728  4478				   noshiftdown2
      0  4478					      RETURN
      1  4478				  -	      ifnconst	bankswitch
      2  4478				  -	      rts
      3  4478					      else
      4  4478		       4c da ff 	      jmp	BS_return
      5  447b					      endif
   7730  447b
   7731  447b
   7732  447b				   notup
   7733  447b							;down
   7734  447b		       4a		      lsr
   7735  447c		       b0 02		      bcs	oneincup
   7736  447e		       e6 ef		      inc	playfieldpos
   7737  4480				   oneincup
   7738  4480		       e6 ef		      inc	playfieldpos
   7739  4482		       a5 ef		      lda	playfieldpos
   7740  4484
   7741  4484				  -	      ifconst	pfrowheight
   7742  4484				  -	      cmp	#pfrowheight+1
   7743  4484					      else
   7744  4484				  -	      ifnconst	pfres
   7745  4484				  -	      cmp	#9
   7746  4484					      else
   7747  4484		       c9 19		      cmp	#(96/pfres)+1	; try to come close to the real size
   7748  4486					      endif
   7749  4486					      endif
   7750  4486
   7751  4486		       90 4b		      bcc	noshiftdown
   7752  4488		       a9 01		      lda	#1
   7753  448a		       85 ef		      sta	playfieldpos
   7754  448c
   7755  448c					      ifconst	pfres
   7756  448c		       ad ff 10 	      lda	playfield+pfres*4-1
   7757  448f		       85 9f		      sta	temp4
   7758  4491		       ad fe 10 	      lda	playfield+pfres*4-2
   7759  4494		       85 9e		      sta	temp3
   7760  4496		       ad fd 10 	      lda	playfield+pfres*4-3
   7761  4499		       85 9d		      sta	temp2
   7762  449b		       ad fc 10 	      lda	playfield+pfres*4-4
   7763  449e				  -	      else
   7764  449e				  -	      lda	playfield+47
   7765  449e				  -	      sta	temp4
   7766  449e				  -	      lda	playfield+46
   7767  449e				  -	      sta	temp3
   7768  449e				  -	      lda	playfield+45
   7769  449e				  -	      sta	temp2
   7770  449e				  -	      lda	playfield+44
   7771  449e					      endif
   7772  449e
   7773  449e		       85 9c		      sta	temp1
   7774  44a0
   7775  44a0					      ifconst	pfres
   7776  44a0		       a2 0c		      ldx	#(pfres-1)*4
   7777  44a2				  -	      else
   7778  44a2				  -	      ldx	#44
   7779  44a2					      endif
   7780  44a2				   down2
   7781  44a2		       bd ef 10 	      lda	playfield-1,x
   7782  44a5					      ifconst	superchip
   7783  44a5		       9d 73 10 	      sta	playfield-125,x
   7784  44a8		       bd ee 10 	      lda	playfield-2,x
   7785  44ab		       9d 72 10 	      sta	playfield-126,x
   7786  44ae		       bd ed 10 	      lda	playfield-3,x
   7787  44b1		       9d 71 10 	      sta	playfield-127,x
   7788  44b4		       bd ec 10 	      lda	playfield-4,x
   7789  44b7		       9d 70 10 	      sta	playfield-128,x
   7790  44ba				  -	      else
   7791  44ba				  -	      sta	playfield+3,x
   7792  44ba				  -	      lda	playfield-2,x
   7793  44ba				  -	      sta	playfield+2,x
   7794  44ba				  -	      lda	playfield-3,x
   7795  44ba				  -	      sta	playfield+1,x
   7796  44ba				  -	      lda	playfield-4,x
   7797  44ba				  -	      sta	playfield,x
   7798  44ba					      endif
   7799  44ba		       8a		      txa
   7800  44bb		       cb 04		      sbx	#4
   7801  44bd		       d0 e3		      bne	down2
   7802  44bf
   7803  44bf		       a5 9f		      lda	temp4
   7804  44c1					      ifconst	superchip
   7805  44c1		       8d 73 10 	      sta	playfield-125
   7806  44c4		       a5 9e		      lda	temp3
   7807  44c6		       8d 72 10 	      sta	playfield-126
   7808  44c9		       a5 9d		      lda	temp2
   7809  44cb		       8d 71 10 	      sta	playfield-127
   7810  44ce		       a5 9c		      lda	temp1
   7811  44d0		       8d 70 10 	      sta	playfield-128
   7812  44d3				  -	      else
   7813  44d3				  -	      sta	playfield+3
   7814  44d3				  -	      lda	temp3
   7815  44d3				  -	      sta	playfield+2
   7816  44d3				  -	      lda	temp2
   7817  44d3				  -	      sta	playfield+1
   7818  44d3				  -	      lda	temp1
   7819  44d3				  -	      sta	playfield
   7820  44d3					      endif
   7821  44d3				   noshiftdown
      0  44d3					      RETURN
      1  44d3				  -	      ifnconst	bankswitch
      2  44d3				  -	      rts
      3  44d3					      else
      4  44d3		       4c da ff 	      jmp	BS_return
      5  44d6					      endif
   7823  44d6							; Provided under the CC0 license. See the included LICENSE.txt for details.
   7824  44d6
   7825  44d6							;standard routines needed for pretty much all games
   7826  44d6							; just the random number generator is left - maybe we should remove this asm file altogether?
   7827  44d6							; repositioning code and score pointer setup moved to overscan
   7828  44d6							; read switches, joysticks now compiler generated (more efficient)
   7829  44d6
   7830  44d6				   randomize
   7831  44d6		       a5 a2		      lda	rand
   7832  44d8		       4a		      lsr
   7833  44d9					      ifconst	rand16
   7834  44d9		       26 ed		      rol	rand16
   7835  44db					      endif
   7836  44db		       90 02		      bcc	noeor
   7837  44dd		       49 b4		      eor	#$B4
   7838  44df				   noeor
   7839  44df		       85 a2		      sta	rand
   7840  44e1					      ifconst	rand16
   7841  44e1		       45 ed		      eor	rand16
   7842  44e3					      endif
      0  44e3					      RETURN
      1  44e3				  -	      ifnconst	bankswitch
      2  44e3				  -	      rts
      3  44e3					      else
      4  44e3		       4c da ff 	      jmp	BS_return
      5  44e6					      endif
   7844  44e6							; Provided under the CC0 license. See the included LICENSE.txt for details.
   7845  44e6
   7846  44e6				   drawscreen
   7847  44e6				  -	      ifconst	debugscore
   7848  44e6				  -	      ldx	#14
   7849  44e6				  -	      lda	INTIM	; display # cycles left in the score
   7850  44e6				  -
   7851  44e6				  -	      ifconst	mincycles
   7852  44e6				  -	      lda	mincycles
   7853  44e6				  -	      cmp	INTIM
   7854  44e6				  -	      lda	mincycles
   7855  44e6				  -	      bcc	nochange
   7856  44e6				  -	      lda	INTIM
   7857  44e6				  -	      sta	mincycles
   7858  44e6				  -nochange
   7859  44e6				  -	      endif
   7860  44e6				  -
   7861  44e6				  -			; cmp #$2B
   7862  44e6				  -			; bcs no_cycles_left
   7863  44e6				  -	      bmi	cycles_left
   7864  44e6				  -	      ldx	#64
   7865  44e6				  -	      eor	#$ff	;make negative
   7866  44e6				  -cycles_left
   7867  44e6				  -	      stx	scorecolor
   7868  44e6				  -	      and	#$7f	; clear sign bit
   7869  44e6				  -	      tax
   7870  44e6				  -	      lda	scorebcd,x
   7871  44e6				  -	      sta	score+2
   7872  44e6				  -	      lda	scorebcd1,x
   7873  44e6				  -	      sta	score+1
   7874  44e6				  -	      jmp	done_debugscore
   7875  44e6				  -scorebcd
   7876  44e6				  -	      .byte	$00, $64, $28, $92, $56, $20, $84, $48, $12, $76, $40
   7877  44e6				  -	      .byte	$04, $68, $32, $96, $60, $24, $88, $52, $16, $80, $44
   7878  44e6				  -	      .byte	$08, $72, $36, $00, $64, $28, $92, $56, $20, $84, $48
   7879  44e6				  -	      .byte	$12, $76, $40, $04, $68, $32, $96, $60, $24, $88
   7880  44e6				  -scorebcd1
   7881  44e6				  -	      .byte	0, 0, 1, 1, 2, 3, 3, 4, 5, 5, 6
   7882  44e6				  -	      .byte	7, 7, 8, 8, 9, $10, $10, $11, $12, $12, $13
   7883  44e6				  -	      .byte	$14, $14, $15, $16, $16, $17, $17, $18, $19, $19, $20
   7884  44e6				  -	      .byte	$21, $21, $22, $23, $23, $24, $24, $25, $26, $26
   7885  44e6				  -done_debugscore
   7886  44e6					      endif
   7887  44e6
   7888  44e6				  -	      ifconst	debugcycles
   7889  44e6				  -	      lda	INTIM	; if we go over, it mucks up the background color
   7890  44e6				  -			; cmp #$2B
   7891  44e6				  -			; BCC overscan
   7892  44e6				  -	      bmi	overscan
   7893  44e6				  -	      sta	COLUBK
   7894  44e6				  -	      bcs	doneoverscan
   7895  44e6					      endif
   7896  44e6
   7897  44e6				   overscan
   7898  44e6				  -	      ifconst	interlaced
   7899  44e6				  -	      PHP
   7900  44e6				  -	      PLA
   7901  44e6				  -	      EOR	#4	; flip interrupt bit
   7902  44e6				  -	      PHA
   7903  44e6				  -	      PLP
   7904  44e6				  -	      AND	#4	; isolate the interrupt bit
   7905  44e6				  -	      TAX		; save it for later
   7906  44e6					      endif
   7907  44e6
   7908  44e6				   overscanloop
   7909  44e6		       ad 84 02 	      lda	INTIM	;wait for sync
   7910  44e9		       30 fb		      bmi	overscanloop
   7911  44eb				   doneoverscan
   7912  44eb
   7913  44eb							;do VSYNC
   7914  44eb
   7915  44eb				  -	      ifconst	interlaced
   7916  44eb				  -	      CPX	#4
   7917  44eb				  -	      BNE	oddframevsync
   7918  44eb					      endif
   7919  44eb
   7920  44eb		       a9 02		      lda	#2
   7921  44ed		       85 02		      sta	WSYNC
   7922  44ef		       85 00		      sta	VSYNC
   7923  44f1		       85 02		      STA	WSYNC
   7924  44f3		       85 02		      STA	WSYNC
   7925  44f5		       4a		      lsr
   7926  44f6		       85 02		      STA	WSYNC
   7927  44f8		       85 00		      STA	VSYNC
   7928  44fa		       85 01		      sta	VBLANK
   7929  44fc					      ifnconst	overscan_time
   7930  44fc		       a9 a5		      lda	#37+128
   7931  44fe				  -	      else
   7932  44fe				  -	      lda	#overscan_time+128
   7933  44fe					      endif
   7934  44fe		       8d 96 02 	      sta	TIM64T
   7935  4501
   7936  4501				  -	      ifconst	interlaced
   7937  4501				  -	      jmp	postsync
   7938  4501				  -
   7939  4501				  -oddframevsync
   7940  4501				  -	      sta	WSYNC
   7941  4501				  -
   7942  4501				  -	      LDA	($80,X)	; 11 waste
   7943  4501				  -	      LDA	($80,X)	; 11 waste
   7944  4501				  -	      LDA	($80,X)	; 11 waste
   7945  4501				  -
   7946  4501				  -	      lda	#2
   7947  4501				  -	      sta	VSYNC
   7948  4501				  -	      sta	WSYNC
   7949  4501				  -	      sta	WSYNC
   7950  4501				  -	      sta	WSYNC
   7951  4501				  -
   7952  4501				  -	      LDA	($80,X)	; 11 waste
   7953  4501				  -	      LDA	($80,X)	; 11 waste
   7954  4501				  -	      LDA	($80,X)	; 11 waste
   7955  4501				  -
   7956  4501				  -	      lda	#0
   7957  4501				  -	      sta	VSYNC
   7958  4501				  -	      sta	VBLANK
   7959  4501				  -	      ifnconst	overscan_time
   7960  4501				  -	      lda	#37+128
   7961  4501				  -	      else
   7962  4501				  -	      lda	#overscan_time+128
   7963  4501				  -	      endif
   7964  4501				  -	      sta	TIM64T
   7965  4501				  -
   7966  4501				  -postsync
   7967  4501					      endif
   7968  4501
   7969  4501				  -	      ifconst	legacy
   7970  4501				  -	      if	legacy < 100
   7971  4501				  -	      ldx	#4
   7972  4501				  -adjustloop
   7973  4501				  -	      lda	player0x,x
   7974  4501				  -	      sec
   7975  4501				  -	      sbc	#14	;?
   7976  4501				  -	      sta	player0x,x
   7977  4501				  -	      dex
   7978  4501				  -	      bpl	adjustloop
   7979  4501				  -	      endif
   7980  4501					      endif
   7981  4501				  -	      if	((<*)>$e9)&&((<*)<$fa)
   7982  4501				  -	      repeat	($fa-(<*))
   7983  4501				  -	      nop
   7984  4501				  -	      repend
   7985  4501					      endif
   7986  4501		       85 02		      sta	WSYNC
   7987  4503		       a2 04		      ldx	#4
      0  4505					      SLEEP	3
      1  4505				   .CYCLES    SET	3
      2  4505
      3  4505				  -	      IF	.CYCLES < 2
      4  4505				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  4505				  -	      ERR
      6  4505					      ENDIF
      7  4505
      8  4505					      IF	.CYCLES & 1
      9  4505					      IFNCONST	NO_ILLEGAL_OPCODES
     10  4505		       04 00		      nop	0
     11  4507				  -	      ELSE
     12  4507				  -	      bit	VSYNC
     13  4507					      ENDIF
     14  4507				   .CYCLES    SET	.CYCLES - 3
     15  4507					      ENDIF
     16  4507
     17  4507				  -	      REPEAT	.CYCLES / 2
     18  4507				  -	      nop
     19  4507					      REPEND
   7989  4507				   HorPosLoop		; 5
   7990  4507		       b5 80		      lda	player0x,X	;+4 9
   7991  4509		       38		      sec		;+2 11
   7992  450a				   DivideLoop
   7993  450a		       e9 0f		      sbc	#15
   7994  450c		       b0 fc		      bcs	DivideLoop	;+4 15
   7995  450e		       95 9c		      sta	temp1,X	;+4 19
   7996  4510		       95 10		      sta	RESP0,X	;+4 23
   7997  4512		       85 02		      sta	WSYNC
   7998  4514		       ca		      dex
   7999  4515		       10 f0		      bpl	HorPosLoop	;+5 5
   8000  4517							; 4
   8001  4517
   8002  4517		       a2 04		      ldx	#4
   8003  4519		       b4 9c		      ldy	temp1,X
   8004  451b		       b9 77 f4 	      lda	repostable-256,Y
   8005  451e		       95 20		      sta	HMP0,X	;+14 18
   8006  4520
   8007  4520		       ca		      dex
   8008  4521		       b4 9c		      ldy	temp1,X
   8009  4523		       b9 77 f4 	      lda	repostable-256,Y
   8010  4526		       95 20		      sta	HMP0,X	;+14 32
   8011  4528
   8012  4528		       ca		      dex
   8013  4529		       b4 9c		      ldy	temp1,X
   8014  452b		       b9 77 f4 	      lda	repostable-256,Y
   8015  452e		       95 20		      sta	HMP0,X	;+14 46
   8016  4530
   8017  4530		       ca		      dex
   8018  4531		       b4 9c		      ldy	temp1,X
   8019  4533		       b9 77 f4 	      lda	repostable-256,Y
   8020  4536		       95 20		      sta	HMP0,X	;+14 60
   8021  4538
   8022  4538		       ca		      dex
   8023  4539		       b4 9c		      ldy	temp1,X
   8024  453b		       b9 77 f4 	      lda	repostable-256,Y
   8025  453e		       95 20		      sta	HMP0,X	;+14 74
   8026  4540
   8027  4540		       85 02		      sta	WSYNC
   8028  4542
   8029  4542		       85 2a		      sta	HMOVE	;+3 3
   8030  4544
   8031  4544
   8032  4544				  -	      ifconst	legacy
   8033  4544				  -	      if	legacy < 100
   8034  4544				  -	      ldx	#4
   8035  4544				  -adjustloop2
   8036  4544				  -	      lda	player0x,x
   8037  4544				  -	      clc
   8038  4544				  -	      adc	#14	;?
   8039  4544				  -	      sta	player0x,x
   8040  4544				  -	      dex
   8041  4544				  -	      bpl	adjustloop2
   8042  4544				  -	      endif
   8043  4544					      endif
   8044  4544
   8045  4544
   8046  4544
   8047  4544
   8048  4544							;set score pointers
   8049  4544		       a7 95		      lax	score+2
   8050  4546		       20 77 f5 	      jsr	scorepointerset
   8051  4549		       84 9b		      sty	scorepointers+5
   8052  454b		       86 98		      stx	scorepointers+2
   8053  454d		       a7 94		      lax	score+1
   8054  454f		       20 77 f5 	      jsr	scorepointerset
   8055  4552		       84 9a		      sty	scorepointers+4
   8056  4554		       86 97		      stx	scorepointers+1
   8057  4556		       a7 93		      lax	score
   8058  4558		       20 77 f5 	      jsr	scorepointerset
   8059  455b		       84 99		      sty	scorepointers+3
   8060  455d		       86 96		      stx	scorepointers
   8061  455f
   8062  455f				   vblk
   8063  455f							; run possible vblank bB code
   8064  455f				  -	      ifconst	vblank_bB_code
   8065  455f				  -	      jsr	vblank_bB_code
   8066  455f					      endif
   8067  455f				   vblk2
   8068  455f		       ad 84 02 	      LDA	INTIM
   8069  4562		       30 fb		      bmi	vblk2
   8070  4564		       4c 00 f1 	      jmp	kernel
   8071  4567
   8072  4567
   8073  4567		       80 70 60 50*	      .byte.b	$80,$70,$60,$50,$40,$30,$20,$10,$00
   8074  4570		       f0 e0 d0 c0*	      .byte.b	$F0,$E0,$D0,$C0,$B0,$A0,$90
   8075  4577				   repostable
   8076  4577
   8077  4577				   scorepointerset
   8078  4577		       29 0f		      and	#$0F
   8079  4579		       0a		      asl
   8080  457a		       0a		      asl
   8081  457b		       0a		      asl
   8082  457c		       69 71		      adc	#<scoretable
   8083  457e		       a8		      tay
   8084  457f		       8a		      txa
   8085  4580							; and #$F0
   8086  4580							; lsr
   8087  4580		       4b f0		      asr	#$F0
   8088  4582		       69 71		      adc	#<scoretable
   8089  4584		       aa		      tax
   8090  4585		       60		      rts
   8091  4586							;bB.asm
   8092  4586							; bB.asm file is split here
   8093  4586				   .
   8094  4586							; 
   8095  4586
   8096  4586				   .L0688		;  asm
   8097  4586
------- FILE text12/text12a.asm LEVEL 2 PASS 3
      0  4586					      include	"text12/text12a.asm"
      1  4586				  -	      ifconst	SpriteGfxIndex
      2  4586				  -TextDataPtr =	SpriteGfxIndex
      3  4586					      else
      4  4586		       00 f6	   TextDataPtr =	stack1
      5  4586					      endif
      6  4586		       00 f5	   TextColor  =	statusbarlength
      7  4586		       00 01	   noscore    =	1
      8  4586					      ifconst	fontstyle
      9  4586				  -	      ifconst	SQUISH
     10  4586				  -	      if	fontstyle == SQUISH
     11  4586				  -scorecount =	4
     12  4586				  -	      endif
     13  4586					      endif
     14  4586					      endif
     15  4586
     16  4586				  -	      ifnconst	scorecount
     17  4586				  -scorecount =	7
     18  4586					      endif
     19  4586
     20  4586				  -	      ifnconst	textbkcolor
     21  4586				  -textbkcolor =	0
     22  4586					      endif
     23  4586
     24  4586
     25  4586
     26  4586				   minikernel
     27  4586
     28  4586		       85 02		      sta	WSYNC	; 3	 (0)
     29  4588					      ifconst	scorebkcolor
     30  4588					      ifnconst	noscoretxt
     31  4588		       a9 08		      lda	#scorebkcolor
     32  458a		       85 09		      sta	COLUBK
     33  458c					      endif
     34  458c					      endif
     35  458c		       a2 00		      ldx	#0	; 2	 (2)
     36  458e		       86 1b		      stx	GRP0	; 3	 (5)
     37  4590		       86 1c		      stx	GRP1	; 3	 (8)
     38  4592		       a0 d0		      ldy	#$D0	; 2	 (10)
     39  4594		       84 20		      sty	HMP0	; 3	 (13)
     40  4596		       a5 97		      lda	scorepointers+1
     41  4598		       85 9c		      sta	temp1
     42  459a		       a5 99		      lda	scorepointers+3
     43  459c		       85 9e		      sta	temp3
     44  459e		       a5 9b		      lda	scorepointers+5
     45  45a0		       85 a0		      sta	temp5
     46  45a2		       ba		      tsx
     47  45a3		       86 ee		      stx	temp7
     48  45a5		       a0 01		      ldy	#1
     49  45a7		       84 25		      sty	VDELP0
     50  45a9		       84 26		      sty	VDELP1
     51  45ab		       a5 a3		      lda	scorecolor
     52  45ad
     53  45ad		       85 02		      sta	WSYNC	; 3	 (0)
     54  45af					      ifnconst	noscoretxt
      0  45af					      sleep	3	; 3	 (3)
      1  45af				   .CYCLES    SET	3
      2  45af
      3  45af				  -	      IF	.CYCLES < 2
      4  45af				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  45af				  -	      ERR
      6  45af					      ENDIF
      7  45af
      8  45af					      IF	.CYCLES & 1
      9  45af					      IFNCONST	NO_ILLEGAL_OPCODES
     10  45af		       04 00		      nop	0
     11  45b1				  -	      ELSE
     12  45b1				  -	      bit	VSYNC
     13  45b1					      ENDIF
     14  45b1				   .CYCLES    SET	.CYCLES - 3
     15  45b1					      ENDIF
     16  45b1
     17  45b1				  -	      REPEAT	.CYCLES / 2
     18  45b1				  -	      nop
     19  45b1					      REPEND
     56  45b1					      endif
     57  45b1		       85 06		      sta	COLUP0	; 3	 (6)
     58  45b3		       85 07		      sta	COLUP1	; 3	 (9)
     59  45b5				  -	      ifconst	scorefade
     60  45b5				  -	      STA	stack2	; 3	 (12)
     61  45b5				  -	      sleep	3	; 3	 (15)
     62  45b5					      else
     63  45b5					      ifconst	pfscore
     64  45b5		       a5 f4		      lda	pfscorecolor	; 3	 (12)
     65  45b7		       85 08		      sta	COLUPF	; 3	 (15)
     66  45b9				  -	      else
     67  45b9				  -	      sleep	6
     68  45b9					      endif
     69  45b9					      endif
     70  45b9		       a9 03		      lda	#3	; 2	 (17)
     71  45bb		       85 04		      sta	NUSIZ0	; 3	 (20)
     72  45bd		       85 05		      sta	NUSIZ1	; 3	 (23*)
     73  45bf
     74  45bf		       a9 ff		      lda	#>scoretable	; 2	 (25)
     75  45c1		       85 97		      sta	scorepointers+1	; 3	 (28)
     76  45c3		       85 99		      sta	scorepointers+3	; 3	 (31)
     77  45c5		       85 9b		      sta	scorepointers+5	; 3	 (34)
     78  45c7		       85 9d		      sta	temp2	; 3	 (37)
     79  45c9		       85 9f		      sta	temp4	; 3	 (40)
     80  45cb		       85 10		      sta	RESP0	; 3	 (43)
     81  45cd		       85 11		      sta	RESP1	; 3	 (46)
     82  45cf		       85 a1		      sta	temp6	; 3	 (49)
     83  45d1		       a0 e0		      ldy	#$E0	; 2	 (51)
     84  45d3		       84 21		      sty	HMP1	; 3	 (54)
     85  45d5		       a0 07		      ldy	#scorecount	; 2	 (56)
     86  45d7		       b1 96		      lda	(scorepointers),y	; 5	 (61)
     87  45d9		       85 1b		      sta	GRP0	; 3	 (64)
     88  45db					      ifconst	pfscore
     89  45db		       a5 f2		      lda	pfscore1	; 3	 (67)
     90  45dd		       85 0e		      sta	PF1	; 3	 (70)
     91  45df				  -	      else
     92  45df				  -	      sleep	6	; 6	 (70)
     93  45df					      endif
     94  45df		       85 2a		      sta	HMOVE	; 3	 (73)
     95  45e1				   posthmove
     96  45e1					      ifnconst	noscoretxt
     97  45e1		       4c 09 f6 	      jmp	begintextscore	; 3	(76/0)
     98  45e4
     99  45e4
    100  45e4					      if	>. != >[.+score_loop_height]
    101  4600		       00 00 00 00*	      align	256
    102  4600					      endif
    103  4600
    104  4600				   textscoreloop
    105  4600		       b1 96		      lda	(scorepointers),y	; 5	 (66)
    106  4602		       85 1b		      sta	GRP0	; 3	 (69)
    107  4604					      ifconst	pfscore
    108  4604		       ad f2 00 	      lda.w	pfscore1	; 4	 (73)
    109  4607		       85 0e		      sta	PF1	; 3	 (76/0)
    110  4609				  -	      else
    111  4609				  -	      ifconst	scorefade
    112  4609				  -	      sleep	2	; 2	 (71)
    113  4609				  -	      dec	stack2	; 5	 (76/0)
    114  4609				  -	      else
    115  4609				  -	      sleep	7	; 7	 (76/0)
    116  4609				  -	      endif
    117  4609					      endif
    118  4609							; cycle 0
    119  4609				   begintextscore
    120  4609		       b1 9e		      lda	(scorepointers+$8),y	; 5	 (5)
    121  460b		       85 1c		      sta	GRP1	; 3	 (8)
    122  460d		       b1 9c		      lda	(scorepointers+$6),y	; 5	 (13)
    123  460f		       85 1b		      sta	GRP0	; 3	 (16)
    124  4611		       b3 98		      lax	(scorepointers+$2),y	; 5	 (21)
    125  4613		       9a		      txs		; 2	 (23*)
    126  4614		       b3 9a		      lax	(scorepointers+$4),y	; 5	 (28)
    127  4616				  -	      ifconst	scorefade
    128  4616				  -	      lda	stack2	; 3	 (31)
    129  4616					      else
      0  4616					      sleep	3	; 3	 (31)
      1  4616				   .CYCLES    SET	3
      2  4616
      3  4616				  -	      IF	.CYCLES < 2
      4  4616				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  4616				  -	      ERR
      6  4616					      ENDIF
      7  4616
      8  4616					      IF	.CYCLES & 1
      9  4616					      IFNCONST	NO_ILLEGAL_OPCODES
     10  4616		       04 00		      nop	0
     11  4618				  -	      ELSE
     12  4618				  -	      bit	VSYNC
     13  4618					      ENDIF
     14  4618				   .CYCLES    SET	.CYCLES - 3
     15  4618					      ENDIF
     16  4618
     17  4618				  -	      REPEAT	.CYCLES / 2
     18  4618				  -	      nop
     19  4618					      REPEND
    131  4618					      endif
    132  4618
    133  4618					      ifconst	pfscore
    134  4618		       a5 f3		      lda	pfscore2	; 3	 (34)
    135  461a		       85 0e		      sta	PF1	; 3	 (37)
    136  461c				  -	      else
    137  461c				  -	      ifconst	scorefade
    138  461c				  -	      sta	COLUP0	; 3	 (34)
    139  461c				  -	      sta	COLUP1	; 3	 (37)
    140  461c				  -	      else
    141  461c				  -	      sleep	6	; 6	 (37)
    142  461c				  -	      endif
    143  461c					      endif
    144  461c
    145  461c		       b1 a0		      lda	(scorepointers+$A),y	; 5	 (42)
    146  461e		       86 1c		      stx	GRP1	; 3	 (45)
    147  4620		       ba		      tsx		; 2	 (47)
    148  4621		       86 1b		      stx	GRP0	; 3	 (50)
    149  4623		       85 1c		      sta	GRP1	; 3	 (53)
    150  4625		       84 1b		      sty	GRP0	; 3	 (56)
    151  4627		       88		      dey		; 2	 (58)
    152  4628		       10 d6		      bpl	textscoreloop	; 3	 (61)
    153  462a					      endif
    154  462a
    155  462a		       00 2a	   score_loop_height =	* - textscoreloop
    156  462a
    157  462a		       a6 ee		      ldx	temp7	; 63
    158  462c		       9a		      txs		; 65
    159  462d		       a0 00		      ldy	#0	; 2	 (67)
    160  462f		       84 0e		      sty	PF1	; 3	 (70)
    161  4631		       84 1b		      sty	GRP0	; 3	 (73)
    162  4633		       84 1c		      sty	GRP1	; 3	 (76/0)
    163  4635		       84 1b		      sty	GRP0	; 3	 (3)
    164  4637		       a9 08		      lda	#textbkcolor
    165  4639		       85 09		      sta	COLUBK	; 3	 (6)
    166  463b
    167  463b				  -	      ifconst	extendedtxt
    168  463b				  -	      sty	stack2	; 3	 (9)
    169  463b				  -	      sty	temp7	; 3	 (12)
    170  463b				  -	      lax	TextIndex	; 3	 (15)
    171  463b				  -	      asl		; 2	 (17)
    172  463b				  -	      rol	stack2	; 5	 (22)
    173  463b				  -	      asl		; 2	 (24*)
    174  463b				  -	      rol	stack2	; 5	 (29)
    175  463b				  -	      asl		; 2	 (31)
    176  463b				  -	      rol	stack2	; 5	 (36)
    177  463b				  -	      sta	stack1	; 3	 (39)
    178  463b				  -	      txa		; 2	 (41)
    179  463b				  -	      asl		; 2	 (43)
    180  463b				  -	      rol	temp7	; 5	 (48)
    181  463b				  -	      asl		; 2	 (50)
    182  463b				  -	      rol	temp7	; 5	 (55)
    183  463b				  -	      clc		; 2	 (57)
    184  463b				  -	      adc	stack1	; 3	 (60)
    185  463b				  -	      sta	temp1	; 3	 (63)
    186  463b				  -	      lda	stack2	; 3	 (66)
    187  463b				  -	      adc	temp7	; 3	 (69) ; use existing carry from last operation
    188  463b					      endif
    189  463b
    190  463b				  -	      ifconst	extendedtxt
    191  463b				  -	      adc	#>text_strings	; carry already clear
    192  463b					      else
    193  463b		       a9 fb		      lda	#>text_strings
    194  463d					      endif
    195  463d		       85 f7		      sta	TextDataPtr+1
    196  463f		       a9 02		      lda	#<text_strings
    197  4641		       85 f6		      sta	TextDataPtr
    198  4643
    199  4643				  -	      ifconst	textbank
    200  4643				  -	      sta	temp7
    201  4643				  -	      lda	#>(textkernel-1)
    202  4643				  -	      pha
    203  4643				  -	      lda	#<(textkernel-1)
    204  4643				  -	      pha
    205  4643				  -	      lda	temp7
    206  4643				  -	      pha		; *** save A
    207  4643				  -	      txa
    208  4643				  -	      pha		; *** save X
    209  4643				  -	      ldx	#textbank
    210  4643				  -	      jmp	BS_jsr
    211  4643					      else
    212  4643		       4c 47 f6 	      jmp	textkernel
    213  4646					      endif
    214  4646
    215  4646				   posttextkernel
    216  4646
    217  4646		       60		      rts
------- FILE d:\Firmaplus\Firmaplus_intern\Atari\PlusROM\Projekte-batariBasic\CaveApocalypse\C.A.V.E. Apocalypse.bas.asm
   8099  4647
------- FILE text12/text12b.asm LEVEL 2 PASS 3
      0  4647					      include	"text12/text12b.asm"
      1  4647					      ifconst	bs_mask
      2  4647				  -	      ifconst	FASTFETCH	; using DPC+
      3  4647				  -KERNELBANK =	1
      4  4647					      else
      5  4647		       00 04	   KERNELBANK =	(bs_mask + 1)
      6  4647					      endif
      7  4647					      endif
      8  4647
      9  4647
     10  4647				   textkernel
     11  4647		       a5 f5		      lda	TextColor
     12  4649		       85 06		      sta	COLUP0
     13  464b		       85 07		      sta	COLUP1
     14  464d		       a9 0b		      lda	#11
     15  464f		       aa		      tax
     16  4650		       18		      clc
     17  4651				  -	      ifconst	extendedtxt
     18  4651				  -	      adc	temp1
     19  4651					      else
     20  4651		       65 b0		      adc	TextIndex
     21  4653					      endif
     22  4653		       a8		      tay
     23  4654				   TextPointersLoop
     24  4654		       b1 f6		      lda	(TextDataPtr),y
     25  4656		       95 96		      sta	scorepointers,x
     26  4658		       88		      dey
     27  4659		       ca		      dex
     28  465a		       10 f8		      bpl	TextPointersLoop
     29  465c
     30  465c		       a6 96		      ldx	scorepointers+0
     31  465e		       bd 00 f9 	      lda	left_text,x
     32  4661		       a6 97		      ldx	scorepointers+1
     33  4663		       1d 00 fa 	      ora	right_text,x
     34  4666		       a0 00		      ldy	#0
     35  4668
     36  4668				   firstbreak
     37  4668							; Text line 1 / 5
     38  4668
     39  4668							;line 1
     40  4668		       85 02		      sta	WSYNC	; 3	 (0)
     41  466a		       a0 08		      ldy	#textbkcolor	; 2	 (2)
     42  466c		       84 06		      sty	COLUP0	; 3	 (5)
     43  466e		       84 07		      sty	COLUP1	; 3	 (8)
     44  4670		       85 1b		      sta	GRP0	; 3	 (11)
     45  4672
     46  4672		       a6 98		      ldx	scorepointers+2	; 3	 (14)
     47  4674		       bd 00 f9 	      lda	left_text,x	; 4	 (18)
     48  4677		       a6 99		      ldx	scorepointers+3	; 3	 (21)
     49  4679		       1d 00 fa 	      ora	right_text,x	; 4	 (25*)
     50  467c		       85 1c		      sta	GRP1	; 3	 (28)
     51  467e
     52  467e		       a6 9a		      ldx	scorepointers+4	; 3	 (31)
     53  4680		       bd 00 f9 	      lda	left_text,x	; 4	 (35)
     54  4683		       a6 9b		      ldx	scorepointers+5	; 3	 (38)
     55  4685		       1d 00 fa 	      ora	right_text,x	; 4	 (42)
     56  4688		       85 1b		      sta	GRP0	; 3	 (45)
     57  468a
     58  468a		       a6 9c		      ldx	scorepointers+6	; 3	 (48) 3 in A
     59  468c		       bd 00 f9 	      lda	left_text,x	; 4	 (52)
     60  468f		       a6 9d		      ldx	scorepointers+7	; 3	 (55)
     61  4691		       1d 00 fa 	      ora	right_text,x	; 4	 (59)
     62  4694
     63  4694		       a4 f5		      ldy	TextColor	; 3	 (62)
     64  4696		       84 07		      sty	COLUP1	; 3	 (65)
     65  4698
     66  4698							;line 2
     67  4698		       85 02		      sta	WSYNC	; 3	 (0)
     68  469a		       84 06		      sty	COLUP0	; 3	 (3)
     69  469c		       a8		      tay		; 2	 (5) 3 in Y
     70  469d
     71  469d		       a6 9e		      ldx	scorepointers+8	; 3	 (8) 4
     72  469f		       bd 00 f9 	      lda	left_text,x	; 4	 (12)
     73  46a2		       a6 9f		      ldx	scorepointers+9	; 3	 (15)
     74  46a4		       1d 00 fa 	      ora	right_text,x	; 4	 (19)
     75  46a7		       85 f6		      sta	stack1	; 3	 (22)
     76  46a9
     77  46a9		       a6 a0		      ldx	scorepointers+10	; 3	 (25*) 5 in A
     78  46ab		       bd 00 f9 	      lda	left_text,x	; 4	 (29)
     79  46ae		       a6 a1		      ldx	scorepointers+11	; 3	 (32)
     80  46b0		       1d 00 fa 	      ora	right_text,x	; 4	 (36)
     81  46b3
     82  46b3		       a6 f6		      ldx	stack1	; 3	 (39) 4 in X
     83  46b5					      ifnconst	noscoretxt
      0  46b5					      sleep	5	; 7	 (46)
      1  46b5				   .CYCLES    SET	5
      2  46b5
      3  46b5				  -	      IF	.CYCLES < 2
      4  46b5				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  46b5				  -	      ERR
      6  46b5					      ENDIF
      7  46b5
      8  46b5					      IF	.CYCLES & 1
      9  46b5					      IFNCONST	NO_ILLEGAL_OPCODES
     10  46b5		       04 00		      nop	0
     11  46b7				  -	      ELSE
     12  46b7				  -	      bit	VSYNC
     13  46b7					      ENDIF
     14  46b7				   .CYCLES    SET	.CYCLES - 3
     15  46b7					      ENDIF
     16  46b7
     17  46b7					      REPEAT	.CYCLES / 2
     18  46b7		       ea		      nop
     19  46b8					      REPEND
     85  46b8				  -	      else
     86  46b8				  -	      sleep	2
     87  46b8					      endif
     88  46b8		       84 1c		      sty	GRP1	; 3	 (49) 3 -> [GRP1] ; 2 -> GRP0
     89  46ba		       86 1b		      stx	GRP0	; 3	 (52) 4 -> [GRP0] ; 3 -> GRP1
     90  46bc		       85 1c		      sta	GRP1	; 3	 (55) 5 -> [GRP1] ; 4 -> GRP0
     91  46be		       85 1b		      sta	GRP0	; 3	 (58) 5 -> GRP1
     92  46c0
     93  46c0		       a0 02		      ldy	#2	; 2	 (60)
     94  46c2		       a6 96		      ldx	scorepointers+0	; 3	 (63)
     95  46c4		       bd 01 f9 	      lda	left_text+1,x	; 4	 (67)
     96  46c7		       a6 97		      ldx	scorepointers+1	; 3	 (70)
     97  46c9		       1d 01 fa 	      ora	right_text+1,x	; 4	 (74)
     98  46cc							;    sleep 4
     99  46cc
    100  46cc							; Text line 2 / 5
    101  46cc				   endl1
    102  46cc							;line 1
    103  46cc		       85 02		      sta	WSYNC	; 3	 (0)
    104  46ce		       a0 08		      ldy	#textbkcolor	; 2	 (2)
    105  46d0		       84 06		      sty	COLUP0	; 3	 (5)
    106  46d2		       84 07		      sty	COLUP1	; 3	 (8)
    107  46d4		       85 1b		      sta	GRP0	; 3	 (11)
    108  46d6
    109  46d6		       a6 98		      ldx	scorepointers+2	; 3	 (9)
    110  46d8		       bd 01 f9 	      lda	left_text+1,x	; 4	 (13)
    111  46db		       a6 99		      ldx	scorepointers+3	; 3	 (16)
    112  46dd		       1d 01 fa 	      ora	right_text+1,x	; 4	 (20)
    113  46e0		       85 1c		      sta	GRP1	; 3	 (23*)
    114  46e2
    115  46e2		       a6 9a		      ldx	scorepointers+4	; 3	 (26)
    116  46e4		       bd 01 f9 	      lda	left_text+1,x	; 4	 (30)
    117  46e7		       a6 9b		      ldx	scorepointers+5	; 3	 (33)
    118  46e9		       1d 01 fa 	      ora	right_text+1,x	; 4	 (37)
    119  46ec		       85 1b		      sta	GRP0	; 3	 (40)
    120  46ee
    121  46ee		       a6 9c		      ldx	scorepointers+6	; 3	 (43) 3 in A
    122  46f0		       bd 01 f9 	      lda	left_text+1,x	; 4	 (47)
    123  46f3		       a6 9d		      ldx	scorepointers+7	; 3	 (50)
    124  46f5		       1d 01 fa 	      ora	right_text+1,x	; 4	 (54)
    125  46f8
    126  46f8		       a4 f5		      ldy	TextColor	; 2	 (56)
    127  46fa		       84 07		      sty	COLUP1	; 3	 (59)
    128  46fc
    129  46fc							;line 2
    130  46fc		       85 02		      sta	WSYNC	; 3	 (0)
    131  46fe		       84 06		      sty	COLUP0	; 3	 (3)
    132  4700		       a8		      tay		; 2	 (5) 3 in Y
    133  4701
    134  4701		       a6 9e		      ldx	scorepointers+8	; 3	 (8) 4
    135  4703		       bd 01 f9 	      lda	left_text+1,x	; 4	 (12)
    136  4706		       a6 9f		      ldx	scorepointers+9	; 3	 (15)
    137  4708		       1d 01 fa 	      ora	right_text+1,x	; 4	 (19)
    138  470b		       85 f6		      sta	stack1	; 3	 (22)
    139  470d
    140  470d		       a6 a0		      ldx	scorepointers+10	; 3	 (25*) 5 in A
    141  470f		       bd 01 f9 	      lda	left_text+1,x	; 4	 (29)
    142  4712		       a6 a1		      ldx	scorepointers+11	; 3	 (32)
    143  4714		       1d 01 fa 	      ora	right_text+1,x	; 4	 (36)
    144  4717
    145  4717		       a6 f6		      ldx	stack1	; 3	 (39) 4 in X
    146  4719					      ifnconst	noscoretxt
      0  4719					      sleep	5	; 7	 (46)
      1  4719				   .CYCLES    SET	5
      2  4719
      3  4719				  -	      IF	.CYCLES < 2
      4  4719				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  4719				  -	      ERR
      6  4719					      ENDIF
      7  4719
      8  4719					      IF	.CYCLES & 1
      9  4719					      IFNCONST	NO_ILLEGAL_OPCODES
     10  4719		       04 00		      nop	0
     11  471b				  -	      ELSE
     12  471b				  -	      bit	VSYNC
     13  471b					      ENDIF
     14  471b				   .CYCLES    SET	.CYCLES - 3
     15  471b					      ENDIF
     16  471b
     17  471b					      REPEAT	.CYCLES / 2
     18  471b		       ea		      nop
     19  471c					      REPEND
    148  471c				  -	      else
    149  471c				  -	      sleep	2
    150  471c					      endif
    151  471c		       84 1c		      sty	GRP1	; 3	 (49) 3 -> [GRP1] ; 2 -> GRP0
    152  471e		       86 1b		      stx	GRP0	; 3	 (52) 4 -> [GRP0] ; 3 -> GRP1
    153  4720		       85 1c		      sta	GRP1	; 3	 (55) 5 -> [GRP1] ; 4 -> GRP0
    154  4722		       85 1b		      sta	GRP0	; 3	 (58) 5 -> GRP1
    155  4724
    156  4724		       a0 02		      ldy	#2	; 2	 (56)
    157  4726		       a6 96		      ldx	scorepointers+0	; 3	 (59)
    158  4728		       bd 02 f9 	      lda	left_text+2,x	; 4	 (63)
    159  472b		       a6 97		      ldx	scorepointers+1	; 3	 (66)
    160  472d		       1d 02 fa 	      ora	right_text+2,x	; 4	 (70)
    161  4730							;    sleep 4
    162  4730
    163  4730							; Text line 3 / 5
    164  4730				   endl2
    165  4730							;line 1
    166  4730		       85 02		      sta	WSYNC	; 3	 (0)
    167  4732		       a0 08		      ldy	#textbkcolor	; 2	 (2)
    168  4734		       84 06		      sty	COLUP0	; 3	 (5)
    169  4736		       84 07		      sty	COLUP1	; 3	 (8)
    170  4738		       85 1b		      sta	GRP0	; 3	 (11)
    171  473a
    172  473a		       a6 98		      ldx	scorepointers+2	; 3	 (9)
    173  473c		       bd 02 f9 	      lda	left_text+2,x	; 4	 (13)
    174  473f		       a6 99		      ldx	scorepointers+3	; 3	 (16)
    175  4741		       1d 02 fa 	      ora	right_text+2,x	; 4	 (20)
    176  4744		       85 1c		      sta	GRP1	; 3	 (23*)
    177  4746
    178  4746		       a6 9a		      ldx	scorepointers+4	; 3	 (26)
    179  4748		       bd 02 f9 	      lda	left_text+2,x	; 4	 (30)
    180  474b		       a6 9b		      ldx	scorepointers+5	; 3	 (33)
    181  474d		       1d 02 fa 	      ora	right_text+2,x	; 4	 (37)
    182  4750		       85 1b		      sta	GRP0	; 3	 (40)
    183  4752
    184  4752		       a6 9c		      ldx	scorepointers+6	; 3	 (43) 3 in A
    185  4754		       bd 02 f9 	      lda	left_text+2,x	; 4	 (47)
    186  4757		       a6 9d		      ldx	scorepointers+7	; 3	 (50)
    187  4759		       1d 02 fa 	      ora	right_text+2,x	; 4	 (54)
    188  475c
    189  475c		       a4 f5		      ldy	TextColor	; 2	 (56)
    190  475e		       84 07		      sty	COLUP1	; 3	 (59)
    191  4760
    192  4760							;line 2
    193  4760		       85 02		      sta	WSYNC	; 3	 (0)
    194  4762		       84 06		      sty	COLUP0	; 3	 (3)
    195  4764		       a8		      tay		; 2	 (5) 3 in Y
    196  4765
    197  4765		       a6 9e		      ldx	scorepointers+8	; 3	 (8) 4
    198  4767		       bd 02 f9 	      lda	left_text+2,x	; 4	 (12)
    199  476a		       a6 9f		      ldx	scorepointers+9	; 3	 (15)
    200  476c		       1d 02 fa 	      ora	right_text+2,x	; 4	 (19)
    201  476f		       85 f6		      sta	stack1	; 3	 (22)
    202  4771
    203  4771		       a6 a0		      ldx	scorepointers+10	; 3	 (25*) 5 in A
    204  4773		       bd 02 f9 	      lda	left_text+2,x	; 4	 (29)
    205  4776		       a6 a1		      ldx	scorepointers+11	; 3	 (32)
    206  4778		       1d 02 fa 	      ora	right_text+2,x	; 4	 (36)
    207  477b
    208  477b		       a6 f6		      ldx	stack1	; 3	 (39) 4 in X
    209  477d					      ifnconst	noscoretxt
      0  477d					      sleep	5	; 7	 (46)
      1  477d				   .CYCLES    SET	5
      2  477d
      3  477d				  -	      IF	.CYCLES < 2
      4  477d				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  477d				  -	      ERR
      6  477d					      ENDIF
      7  477d
      8  477d					      IF	.CYCLES & 1
      9  477d					      IFNCONST	NO_ILLEGAL_OPCODES
     10  477d		       04 00		      nop	0
     11  477f				  -	      ELSE
     12  477f				  -	      bit	VSYNC
     13  477f					      ENDIF
     14  477f				   .CYCLES    SET	.CYCLES - 3
     15  477f					      ENDIF
     16  477f
     17  477f					      REPEAT	.CYCLES / 2
     18  477f		       ea		      nop
     19  4780					      REPEND
    211  4780				  -	      else
    212  4780				  -	      sleep	2
    213  4780					      endif
    214  4780		       84 1c		      sty	GRP1	; 3	 (45) 3 -> [GRP1] ; 2 -> GRP0
    215  4782		       86 1b		      stx	GRP0	; 3	 (48) 4 -> [GRP0] ; 3 -> GRP1
    216  4784		       85 1c		      sta	GRP1	; 3	 (51) 5 -> [GRP1] ; 4 -> GRP0
    217  4786		       85 1b		      sta	GRP0	; 3	 (54) 5 -> GRP1
    218  4788
    219  4788		       a0 02		      ldy	#2	; 2	 (56)
    220  478a		       a6 96		      ldx	scorepointers+0	; 3	 (59)
    221  478c		       bd 03 f9 	      lda	left_text+3,x	; 4	 (63)
    222  478f		       a6 97		      ldx	scorepointers+1	; 3	 (66)
    223  4791		       1d 03 fa 	      ora	right_text+3,x	; 4	 (70)
    224  4794							;    sleep 2
    225  4794
    226  4794							; Text line 4 / 5
    227  4794
    228  4794							;line 1
    229  4794		       85 02		      sta	WSYNC	; 3	 (0)
    230  4796		       a0 08		      ldy	#textbkcolor	; 2	 (2)
    231  4798		       84 06		      sty	COLUP0	; 3	 (5)
    232  479a		       84 07		      sty	COLUP1	; 3	 (8)
    233  479c		       85 1b		      sta	GRP0	; 3	 (11)
    234  479e
    235  479e		       a6 98		      ldx	scorepointers+2	; 3	 (9)
    236  47a0		       bd 03 f9 	      lda	left_text+3,x	; 4	 (13)
    237  47a3		       a6 99		      ldx	scorepointers+3	; 3	 (16)
    238  47a5		       1d 03 fa 	      ora	right_text+3,x	; 4	 (20)
    239  47a8		       85 1c		      sta	GRP1	; 3	 (23*)
    240  47aa
    241  47aa		       a6 9a		      ldx	scorepointers+4	; 3	 (26)
    242  47ac		       bd 03 f9 	      lda	left_text+3,x	; 4	 (30)
    243  47af		       a6 9b		      ldx	scorepointers+5	; 3	 (33)
    244  47b1		       1d 03 fa 	      ora	right_text+3,x	; 4	 (37)
    245  47b4		       85 1b		      sta	GRP0	; 3	 (40)
    246  47b6
    247  47b6		       a6 9c		      ldx	scorepointers+6	; 3	 (43) 3 in A
    248  47b8		       bd 03 f9 	      lda	left_text+3,x	; 4	 (47)
    249  47bb		       a6 9d		      ldx	scorepointers+7	; 3	 (50)
    250  47bd		       1d 03 fa 	      ora	right_text+3,x	; 4	 (54)
    251  47c0
    252  47c0		       a4 f5		      ldy	TextColor	; 2	 (56)
    253  47c2		       84 07		      sty	COLUP1	; 3	 (59)
    254  47c4
    255  47c4							;line 2
    256  47c4		       85 02		      sta	WSYNC	; 3	 (0)
    257  47c6		       84 06		      sty	COLUP0	; 3	 (3)
    258  47c8		       a8		      tay		; 2	 (5) 3 in Y
    259  47c9
    260  47c9		       a6 9e		      ldx	scorepointers+8	; 3	 (8) 4
    261  47cb		       bd 03 f9 	      lda	left_text+3,x	; 4	 (12)
    262  47ce		       a6 9f		      ldx	scorepointers+9	; 3	 (15)
    263  47d0		       1d 03 fa 	      ora	right_text+3,x	; 4	 (19)
    264  47d3		       85 f6		      sta	stack1	; 3	 (22)
    265  47d5
    266  47d5		       a6 a0		      ldx	scorepointers+10	; 3	 (25*) 5 in A
    267  47d7		       bd 03 f9 	      lda	left_text+3,x	; 4	 (29)
    268  47da		       a6 a1		      ldx	scorepointers+11	; 3	 (32)
    269  47dc		       1d 03 fa 	      ora	right_text+3,x	; 4	 (36)
    270  47df
    271  47df		       a6 f6		      ldx	stack1	; 3	 (39) 4 in X
    272  47e1					      ifnconst	noscoretxt
      0  47e1					      sleep	5	; 7	 (46)
      1  47e1				   .CYCLES    SET	5
      2  47e1
      3  47e1				  -	      IF	.CYCLES < 2
      4  47e1				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  47e1				  -	      ERR
      6  47e1					      ENDIF
      7  47e1
      8  47e1					      IF	.CYCLES & 1
      9  47e1					      IFNCONST	NO_ILLEGAL_OPCODES
     10  47e1		       04 00		      nop	0
     11  47e3				  -	      ELSE
     12  47e3				  -	      bit	VSYNC
     13  47e3					      ENDIF
     14  47e3				   .CYCLES    SET	.CYCLES - 3
     15  47e3					      ENDIF
     16  47e3
     17  47e3					      REPEAT	.CYCLES / 2
     18  47e3		       ea		      nop
     19  47e4					      REPEND
    274  47e4				  -	      else
    275  47e4				  -	      sleep	2
    276  47e4					      endif
    277  47e4		       84 1c		      sty	GRP1	; 3	 (45) 3 -> [GRP1] ; 2 -> GRP0
    278  47e6		       86 1b		      stx	GRP0	; 3	 (48) 4 -> [GRP0] ; 3 -> GRP1
    279  47e8		       85 1c		      sta	GRP1	; 3	 (51) 5 -> [GRP1] ; 4 -> GRP0
    280  47ea		       85 1b		      sta	GRP0	; 3	 (54) 5 -> GRP1
    281  47ec
    282  47ec		       a0 02		      ldy	#2	; 2	 (56)
    283  47ee		       a6 96		      ldx	scorepointers+0	; 3	 (59)
    284  47f0		       bd 04 f9 	      lda	left_text+4,x	; 4	 (63)
    285  47f3		       a6 97		      ldx	scorepointers+1	; 3	 (66)
    286  47f5		       1d 04 fa 	      ora	right_text+4,x	; 4	 (70)
    287  47f8							;    sleep 2
    288  47f8
    289  47f8							; Text line 5 / 5
    290  47f8
    291  47f8							;line 1
    292  47f8		       85 02		      sta	WSYNC	; 3	 (0)
    293  47fa		       a0 08		      ldy	#textbkcolor	; 2	 (2)
    294  47fc		       84 06		      sty	COLUP0	; 3	 (5)
    295  47fe		       84 07		      sty	COLUP1	; 3	 (8)
    296  4800		       85 1b		      sta	GRP0	; 3	 (11)
    297  4802
    298  4802		       a6 98		      ldx	scorepointers+2	; 3	 (9)
    299  4804		       bd 04 f9 	      lda	left_text+4,x	; 4	 (13)
    300  4807		       a6 99		      ldx	scorepointers+3	; 3	 (16)
    301  4809		       1d 04 fa 	      ora	right_text+4,x	; 4	 (20)
    302  480c		       85 1c		      sta	GRP1	; 3	 (23*)
    303  480e
    304  480e		       a6 9a		      ldx	scorepointers+4	; 3	 (26)
    305  4810		       bd 04 f9 	      lda	left_text+4,x	; 4	 (30)
    306  4813		       a6 9b		      ldx	scorepointers+5	; 3	 (33)
    307  4815		       1d 04 fa 	      ora	right_text+4,x	; 4	 (37)
    308  4818		       85 1b		      sta	GRP0	; 3	 (40)
    309  481a
    310  481a		       a6 9c		      ldx	scorepointers+6	; 3	 (43) 3 in A
    311  481c		       bd 04 f9 	      lda	left_text+4,x	; 4	 (47)
    312  481f		       a6 9d		      ldx	scorepointers+7	; 3	 (50)
    313  4821		       1d 04 fa 	      ora	right_text+4,x	; 4	 (54)
    314  4824
    315  4824		       a4 f5		      ldy	TextColor	; 2	 (56)
    316  4826		       84 07		      sty	COLUP1	; 3	 (59)
    317  4828
    318  4828							;line 2
    319  4828		       85 02		      sta	WSYNC	; 3	 (0)
    320  482a		       84 06		      sty	COLUP0	; 3	 (3)
    321  482c		       a8		      tay		; 2	 (5) 3 in Y
    322  482d
    323  482d		       a6 9e		      ldx	scorepointers+8	; 3	 (8) 4
    324  482f		       bd 04 f9 	      lda	left_text+4,x	; 4	 (12)
    325  4832		       a6 9f		      ldx	scorepointers+9	; 3	 (15)
    326  4834		       1d 04 fa 	      ora	right_text+4,x	; 4	 (19)
    327  4837		       85 f6		      sta	stack1	; 3	 (22)
    328  4839
    329  4839		       a6 a0		      ldx	scorepointers+10	; 3	 (25*) 5 in A
    330  483b		       bd 04 f9 	      lda	left_text+4,x	; 4	 (29)
    331  483e		       a6 a1		      ldx	scorepointers+11	; 3	 (32)
    332  4840		       1d 04 fa 	      ora	right_text+4,x	; 4	 (36)
    333  4843
    334  4843		       a6 f6		      ldx	stack1	; 3	 (39) 4 in X
    335  4845					      ifnconst	noscoretxt
      0  4845					      sleep	5	; 7	 (46)
      1  4845				   .CYCLES    SET	5
      2  4845
      3  4845				  -	      IF	.CYCLES < 2
      4  4845				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  4845				  -	      ERR
      6  4845					      ENDIF
      7  4845
      8  4845					      IF	.CYCLES & 1
      9  4845					      IFNCONST	NO_ILLEGAL_OPCODES
     10  4845		       04 00		      nop	0
     11  4847				  -	      ELSE
     12  4847				  -	      bit	VSYNC
     13  4847					      ENDIF
     14  4847				   .CYCLES    SET	.CYCLES - 3
     15  4847					      ENDIF
     16  4847
     17  4847					      REPEAT	.CYCLES / 2
     18  4847		       ea		      nop
     19  4848					      REPEND
    337  4848				  -	      else
    338  4848				  -	      sleep	2
    339  4848					      endif
    340  4848		       84 1c		      sty	GRP1	; 3	 (45) 3 -> [GRP1] ; 2 -> GRP0
    341  484a		       86 1b		      stx	GRP0	; 3	 (48) 4 -> [GRP0] ; 3 -> GRP1
    342  484c		       85 1c		      sta	GRP1	; 3	 (51) 5 -> [GRP1] ; 4 -> GRP0
    343  484e		       85 1b		      sta	GRP0	; 3	 (54) 5 -> GRP1
    344  4850
    345  4850		       a9 00		      lda	#0
    346  4852		       85 1b		      sta	GRP0
    347  4854		       85 1c		      sta	GRP1
    348  4856		       85 1b		      sta	GRP0
    349  4858		       85 04		      sta	NUSIZ0
    350  485a		       85 05		      sta	NUSIZ1
    351  485c		       85 25		      sta	VDELP0
    352  485e		       85 26		      sta	VDELP1
    353  4860
    354  4860				  -	      ifconst	textbank
    355  4860				  -	      sta	temp7
    356  4860				  -	      lda	#>(posttextkernel-1)
    357  4860				  -	      pha
    358  4860				  -	      lda	#<(posttextkernel-1)
    359  4860				  -	      pha
    360  4860				  -	      lda	temp7
    361  4860				  -	      pha		; *** save A
    362  4860				  -	      txa
    363  4860				  -	      pha		; *** save X
    364  4860				  -	      ldx	#KERNELBANK
    365  4860				  -	      jmp	BS_jsr
    366  4860					      else
    367  4860		       4c 46 f6 	      jmp	posttextkernel
    368  4863					      endif
    369  4863
    370  4863					      if	>. != >[.+text_data_height]
    371  4900		       00 00 00 00*	      align	256
    372  4900					      endif
    373  4900
    374  4900				   text_data
    375  4900
    376  4900				   left_text
    377  4900
    378  4900		       00 00	   __A	      =	* - text_data	; baseline (0)
    379  4900		       20		      .byte.b	%00100000
    380  4901		       50		      .byte.b	%01010000
    381  4902		       70		      .byte.b	%01110000
    382  4903		       50		      .byte.b	%01010000
    383  4904		       50		      .byte.b	%01010000
    384  4905
    385  4905		       00 05	   __B	      =	* - text_data
    386  4905		       60		      .byte.b	%01100000
    387  4906		       50		      .byte.b	%01010000
    388  4907		       60		      .byte.b	%01100000
    389  4908		       50		      .byte.b	%01010000
    390  4909		       60		      .byte.b	%01100000
    391  490a
    392  490a		       00 0a	   __C	      =	* - text_data
    393  490a		       30		      .byte.b	%00110000
    394  490b		       40		      .byte.b	%01000000
    395  490c		       40		      .byte.b	%01000000
    396  490d		       40		      .byte.b	%01000000
    397  490e		       30		      .byte.b	%00110000
    398  490f
    399  490f		       00 0f	   __D	      =	* - text_data
    400  490f		       60		      .byte.b	%01100000
    401  4910		       50		      .byte.b	%01010000
    402  4911		       50		      .byte.b	%01010000
    403  4912		       50		      .byte.b	%01010000
    404  4913		       60		      .byte.b	%01100000
    405  4914
    406  4914		       00 14	   __E	      =	* - text_data
    407  4914		       70		      .byte.b	%01110000
    408  4915		       40		      .byte.b	%01000000
    409  4916		       60		      .byte.b	%01100000
    410  4917		       40		      .byte.b	%01000000
    411  4918		       70		      .byte.b	%01110000
    412  4919
    413  4919		       00 19	   __F	      =	* - text_data
    414  4919		       70		      .byte.b	%01110000
    415  491a		       40		      .byte.b	%01000000
    416  491b		       60		      .byte.b	%01100000
    417  491c		       40		      .byte.b	%01000000
    418  491d		       40		      .byte.b	%01000000
    419  491e
    420  491e		       00 1e	   __G	      =	* - text_data
    421  491e		       30		      .byte.b	%00110000
    422  491f		       40		      .byte.b	%01000000
    423  4920		       50		      .byte.b	%01010000
    424  4921		       50		      .byte.b	%01010000
    425  4922		       20		      .byte.b	%00100000
    426  4923
    427  4923		       00 23	   __H	      =	* - text_data
    428  4923		       50		      .byte.b	%01010000
    429  4924		       50		      .byte.b	%01010000
    430  4925		       70		      .byte.b	%01110000
    431  4926		       50		      .byte.b	%01010000
    432  4927		       50		      .byte.b	%01010000
    433  4928
    434  4928		       00 28	   __I	      =	* - text_data
    435  4928		       70		      .byte.b	%01110000
    436  4929		       20		      .byte.b	%00100000
    437  492a		       20		      .byte.b	%00100000
    438  492b		       20		      .byte.b	%00100000
    439  492c		       70		      .byte.b	%01110000
    440  492d
    441  492d		       00 2d	   __J	      =	* - text_data
    442  492d		       10		      .byte.b	%00010000
    443  492e		       10		      .byte.b	%00010000
    444  492f		       10		      .byte.b	%00010000
    445  4930		       50		      .byte.b	%01010000
    446  4931		       20		      .byte.b	%00100000
    447  4932
    448  4932		       00 32	   __K	      =	* - text_data
    449  4932		       50		      .byte.b	%01010000
    450  4933		       50		      .byte.b	%01010000
    451  4934		       60		      .byte.b	%01100000
    452  4935		       50		      .byte.b	%01010000
    453  4936		       50		      .byte.b	%01010000
    454  4937
    455  4937		       00 37	   __L	      =	* - text_data
    456  4937		       40		      .byte.b	%01000000
    457  4938		       40		      .byte.b	%01000000
    458  4939		       40		      .byte.b	%01000000
    459  493a		       40		      .byte.b	%01000000
    460  493b		       70		      .byte.b	%01110000
    461  493c
    462  493c		       00 3c	   __M	      =	* - text_data
    463  493c		       50		      .byte.b	%01010000
    464  493d		       70		      .byte.b	%01110000
    465  493e		       70		      .byte.b	%01110000
    466  493f		       50		      .byte.b	%01010000
    467  4940		       50		      .byte.b	%01010000
    468  4941
    469  4941		       00 41	   __N	      =	* - text_data
    470  4941		       60		      .byte.b	%01100000
    471  4942		       50		      .byte.b	%01010000
    472  4943		       50		      .byte.b	%01010000
    473  4944		       50		      .byte.b	%01010000
    474  4945		       50		      .byte.b	%01010000
    475  4946
    476  4946		       00 46	   __O	      =	* - text_data
    477  4946		       20		      .byte.b	%00100000
    478  4947		       50		      .byte.b	%01010000
    479  4948		       50		      .byte.b	%01010000
    480  4949		       50		      .byte.b	%01010000
    481  494a		       20		      .byte.b	%00100000
    482  494b
    483  494b		       00 4b	   __P	      =	* - text_data
    484  494b		       60		      .byte.b	%01100000
    485  494c		       50		      .byte.b	%01010000
    486  494d		       60		      .byte.b	%01100000
    487  494e		       40		      .byte.b	%01000000
    488  494f		       40		      .byte.b	%01000000
    489  4950
    490  4950		       00 50	   __Q	      =	* - text_data
    491  4950		       20		      .byte.b	%00100000
    492  4951		       50		      .byte.b	%01010000
    493  4952		       50		      .byte.b	%01010000
    494  4953		       50		      .byte.b	%01010000
    495  4954		       30		      .byte.b	%00110000
    496  4955
    497  4955		       00 55	   __R	      =	* - text_data
    498  4955		       60		      .byte.b	%01100000
    499  4956		       50		      .byte.b	%01010000
    500  4957		       60		      .byte.b	%01100000
    501  4958		       50		      .byte.b	%01010000
    502  4959		       50		      .byte.b	%01010000
    503  495a
    504  495a		       00 5a	   __S	      =	* - text_data
    505  495a		       30		      .byte.b	%00110000
    506  495b		       40		      .byte.b	%01000000
    507  495c		       20		      .byte.b	%00100000
    508  495d		       10		      .byte.b	%00010000
    509  495e		       60		      .byte.b	%01100000
    510  495f
    511  495f		       00 5f	   __T	      =	* - text_data
    512  495f		       70		      .byte.b	%01110000
    513  4960		       20		      .byte.b	%00100000
    514  4961		       20		      .byte.b	%00100000
    515  4962		       20		      .byte.b	%00100000
    516  4963		       20		      .byte.b	%00100000
    517  4964
    518  4964		       00 64	   __U	      =	* - text_data
    519  4964		       50		      .byte.b	%01010000
    520  4965		       50		      .byte.b	%01010000
    521  4966		       50		      .byte.b	%01010000
    522  4967		       50		      .byte.b	%01010000
    523  4968		       70		      .byte.b	%01110000
    524  4969
    525  4969		       00 69	   __V	      =	* - text_data
    526  4969		       50		      .byte.b	%01010000
    527  496a		       50		      .byte.b	%01010000
    528  496b		       50		      .byte.b	%01010000
    529  496c		       50		      .byte.b	%01010000
    530  496d		       20		      .byte.b	%00100000
    531  496e
    532  496e		       00 6e	   __W	      =	* - text_data
    533  496e		       50		      .byte.b	%01010000
    534  496f		       50		      .byte.b	%01010000
    535  4970		       70		      .byte.b	%01110000
    536  4971		       70		      .byte.b	%01110000
    537  4972		       50		      .byte.b	%01010000
    538  4973
    539  4973		       00 73	   __X	      =	* - text_data
    540  4973		       50		      .byte.b	%01010000
    541  4974		       50		      .byte.b	%01010000
    542  4975		       20		      .byte.b	%00100000
    543  4976		       50		      .byte.b	%01010000
    544  4977		       50		      .byte.b	%01010000
    545  4978
    546  4978		       00 78	   __Y	      =	* - text_data
    547  4978		       50		      .byte.b	%01010000
    548  4979		       50		      .byte.b	%01010000
    549  497a		       20		      .byte.b	%00100000
    550  497b		       20		      .byte.b	%00100000
    551  497c		       20		      .byte.b	%00100000
    552  497d
    553  497d		       00 7d	   __Z	      =	* - text_data
    554  497d		       70		      .byte.b	%01110000
    555  497e		       10		      .byte.b	%00010000
    556  497f		       20		      .byte.b	%00100000
    557  4980		       40		      .byte.b	%01000000
    558  4981		       70		      .byte.b	%01110000
    559  4982
    560  4982		       00 82	   __0	      =	* - text_data
    561  4982		       70		      .byte.b	%01110000
    562  4983		       50		      .byte.b	%01010000
    563  4984		       50		      .byte.b	%01010000
    564  4985		       50		      .byte.b	%01010000
    565  4986		       70		      .byte.b	%01110000
    566  4987
    567  4987		       00 87	   __1	      =	* - text_data
    568  4987		       20		      .byte.b	%00100000
    569  4988		       60		      .byte.b	%01100000
    570  4989		       20		      .byte.b	%00100000
    571  498a		       20		      .byte.b	%00100000
    572  498b		       70		      .byte.b	%01110000
    573  498c
    574  498c		       00 8c	   __2	      =	* - text_data
    575  498c		       60		      .byte.b	%01100000
    576  498d		       10		      .byte.b	%00010000
    577  498e		       20		      .byte.b	%00100000
    578  498f		       40		      .byte.b	%01000000
    579  4990		       70		      .byte.b	%01110000
    580  4991
    581  4991		       00 91	   __3	      =	* - text_data
    582  4991		       60		      .byte.b	%01100000
    583  4992		       10		      .byte.b	%00010000
    584  4993		       20		      .byte.b	%00100000
    585  4994		       10		      .byte.b	%00010000
    586  4995		       60		      .byte.b	%01100000
    587  4996
    588  4996		       00 96	   __4	      =	* - text_data
    589  4996		       50		      .byte.b	%01010000
    590  4997		       50		      .byte.b	%01010000
    591  4998		       70		      .byte.b	%01110000
    592  4999		       10		      .byte.b	%00010000
    593  499a		       10		      .byte.b	%00010000
    594  499b
    595  499b		       00 9b	   __5	      =	* - text_data
    596  499b		       70		      .byte.b	%01110000
    597  499c		       40		      .byte.b	%01000000
    598  499d		       60		      .byte.b	%01100000
    599  499e		       10		      .byte.b	%00010000
    600  499f		       60		      .byte.b	%01100000
    601  49a0
    602  49a0		       00 a0	   __6	      =	* - text_data
    603  49a0		       30		      .byte.b	%00110000
    604  49a1		       40		      .byte.b	%01000000
    605  49a2		       60		      .byte.b	%01100000
    606  49a3		       50		      .byte.b	%01010000
    607  49a4		       20		      .byte.b	%00100000
    608  49a5
    609  49a5		       00 a5	   __7	      =	* - text_data
    610  49a5		       70		      .byte.b	%01110000
    611  49a6		       10		      .byte.b	%00010000
    612  49a7		       20		      .byte.b	%00100000
    613  49a8		       40		      .byte.b	%01000000
    614  49a9		       40		      .byte.b	%01000000
    615  49aa
    616  49aa		       00 aa	   __8	      =	* - text_data
    617  49aa		       20		      .byte.b	%00100000
    618  49ab		       50		      .byte.b	%01010000
    619  49ac		       20		      .byte.b	%00100000
    620  49ad		       50		      .byte.b	%01010000
    621  49ae		       20		      .byte.b	%00100000
    622  49af
    623  49af		       00 af	   __9	      =	* - text_data
    624  49af		       20		      .byte.b	%00100000
    625  49b0		       50		      .byte.b	%01010000
    626  49b1		       30		      .byte.b	%00110000
    627  49b2		       10		      .byte.b	%00010000
    628  49b3		       60		      .byte.b	%01100000
    629  49b4
    630  49b4		       00 b4	   _sp	      =	* - text_data
    631  49b4		       00		      .byte.b	%00000000
    632  49b5		       00		      .byte.b	%00000000
    633  49b6		       00		      .byte.b	%00000000
    634  49b7		       00		      .byte.b	%00000000
    635  49b8		       00		      .byte.b	%00000000
    636  49b9
    637  49b9		       00 b9	   _pd	      =	* - text_data
    638  49b9		       00		      .byte.b	%00000000
    639  49ba		       00		      .byte.b	%00000000
    640  49bb		       00		      .byte.b	%00000000
    641  49bc		       00		      .byte.b	%00000000
    642  49bd		       20		      .byte.b	%00100000
    643  49be
    644  49be		       00 be	   _qu	      =	* - text_data
    645  49be		       60		      .byte.b	%01100000
    646  49bf		       10		      .byte.b	%00010000
    647  49c0		       20		      .byte.b	%00100000
    648  49c1		       00		      .byte.b	%00000000
    649  49c2		       20		      .byte.b	%00100000
    650  49c3
    651  49c3		       00 c3	   _ex	      =	* - text_data
    652  49c3		       20		      .byte.b	%00100000
    653  49c4		       20		      .byte.b	%00100000
    654  49c5		       20		      .byte.b	%00100000
    655  49c6		       00		      .byte.b	%00000000
    656  49c7		       20		      .byte.b	%00100000
    657  49c8
    658  49c8		       00 c8	   _cm	      =	* - text_data
    659  49c8		       00		      .byte.b	%00000000
    660  49c9		       00		      .byte.b	%00000000
    661  49ca		       00		      .byte.b	%00000000
    662  49cb		       20		      .byte.b	%00100000
    663  49cc		       40		      .byte.b	%01000000
    664  49cd
    665  49cd		       00 cd	   _hy	      =	* - text_data
    666  49cd		       00		      .byte.b	%00000000
    667  49ce		       00		      .byte.b	%00000000
    668  49cf		       70		      .byte.b	%01110000
    669  49d0		       00		      .byte.b	%00000000
    670  49d1		       00		      .byte.b	%00000000
    671  49d2
    672  49d2		       00 d2	   _pl	      =	* - text_data
    673  49d2		       20		      .byte.b	%00100000
    674  49d3		       20		      .byte.b	%00100000
    675  49d4		       70		      .byte.b	%01110000
    676  49d5		       20		      .byte.b	%00100000
    677  49d6		       20		      .byte.b	%00100000
    678  49d7
    679  49d7		       00 d7	   _ap	      =	* - text_data
    680  49d7		       20		      .byte.b	%00100000
    681  49d8		       40		      .byte.b	%01000000
    682  49d9		       00		      .byte.b	%00000000
    683  49da		       00		      .byte.b	%00000000
    684  49db		       00		      .byte.b	%00000000
    685  49dc
    686  49dc		       00 dc	   _lp	      =	* - text_data
    687  49dc		       20		      .byte.b	%00100000
    688  49dd		       40		      .byte.b	%01000000
    689  49de		       40		      .byte.b	%01000000
    690  49df		       40		      .byte.b	%01000000
    691  49e0		       20		      .byte.b	%00100000
    692  49e1
    693  49e1		       00 e1	   _rp	      =	* - text_data
    694  49e1		       20		      .byte.b	%00100000
    695  49e2		       10		      .byte.b	%00010000
    696  49e3		       10		      .byte.b	%00010000
    697  49e4		       10		      .byte.b	%00010000
    698  49e5		       20		      .byte.b	%00100000
    699  49e6
    700  49e6		       00 e6	   _co	      =	* - text_data
    701  49e6		       00		      .byte.b	%00000000
    702  49e7		       40		      .byte.b	%01000000
    703  49e8		       00		      .byte.b	%00000000
    704  49e9		       40		      .byte.b	%01000000
    705  49ea		       00		      .byte.b	%00000000
    706  49eb
    707  49eb		       00 eb	   _sl	      =	* - text_data
    708  49eb		       10		      .byte.b	%00010000
    709  49ec		       10		      .byte.b	%00010000
    710  49ed		       20		      .byte.b	%00100000
    711  49ee		       40		      .byte.b	%01000000
    712  49ef		       40		      .byte.b	%01000000
    713  49f0
    714  49f0		       00 f0	   _eq	      =	* - text_data
    715  49f0		       00		      .byte.b	%00000000
    716  49f1		       70		      .byte.b	%01110000
    717  49f2		       00		      .byte.b	%00000000
    718  49f3		       70		      .byte.b	%01110000
    719  49f4		       00		      .byte.b	%00000000
    720  49f5
    721  49f5		       00 f5	   _qt	      =	* - text_data
    722  49f5		       50		      .byte.b	%01010000
    723  49f6		       50		      .byte.b	%01010000
    724  49f7		       00		      .byte.b	%00000000
    725  49f8		       00		      .byte.b	%00000000
    726  49f9		       00		      .byte.b	%00000000
    727  49fa
    728  49fa		       00 fa	   _po	      =	* - text_data
    729  49fa				   _ht
    730  49fa		       50		      .byte.b	%01010000
    731  49fb		       f0		      .byte.b	%11110000
    732  49fc		       50		      .byte.b	%01010000
    733  49fd		       f0		      .byte.b	%11110000
    734  49fe		       50		      .byte.b	%01010000
    735  49ff
    736  49ff
    737  49ff		       00 ff	   text_data_height =	* - text_data
    738  49ff
    739  49ff					      if	>. != >[.+text_data_height]
    740  4a00		       00		      align	256
    741  4a00					      endif
    742  4a00
    743  4a00				   right_text
    744  4a00
    745  4a00							; A
    746  4a00		       02		      .byte.b	%00000010
    747  4a01		       05		      .byte.b	%00000101
    748  4a02		       07		      .byte.b	%00000111
    749  4a03		       05		      .byte.b	%00000101
    750  4a04		       05		      .byte.b	%00000101
    751  4a05
    752  4a05
    753  4a05							; B
    754  4a05		       06		      .byte.b	%00000110
    755  4a06		       05		      .byte.b	%00000101
    756  4a07		       06		      .byte.b	%00000110
    757  4a08		       05		      .byte.b	%00000101
    758  4a09		       06		      .byte.b	%00000110
    759  4a0a
    760  4a0a							; C
    761  4a0a		       03		      .byte.b	%00000011
    762  4a0b		       04		      .byte.b	%00000100
    763  4a0c		       04		      .byte.b	%00000100
    764  4a0d		       04		      .byte.b	%00000100
    765  4a0e		       03		      .byte.b	%00000011
    766  4a0f
    767  4a0f							; D
    768  4a0f		       06		      .byte.b	%00000110
    769  4a10		       05		      .byte.b	%00000101
    770  4a11		       05		      .byte.b	%00000101
    771  4a12		       05		      .byte.b	%00000101
    772  4a13		       06		      .byte.b	%00000110
    773  4a14
    774  4a14							; E
    775  4a14		       07		      .byte.b	%00000111
    776  4a15		       04		      .byte.b	%00000100
    777  4a16		       06		      .byte.b	%00000110
    778  4a17		       04		      .byte.b	%00000100
    779  4a18		       07		      .byte.b	%00000111
    780  4a19
    781  4a19							; F
    782  4a19		       07		      .byte.b	%00000111
    783  4a1a		       04		      .byte.b	%00000100
    784  4a1b		       06		      .byte.b	%00000110
    785  4a1c		       04		      .byte.b	%00000100
    786  4a1d		       04		      .byte.b	%00000100
    787  4a1e
    788  4a1e							; G
    789  4a1e		       03		      .byte.b	%00000011
    790  4a1f		       04		      .byte.b	%00000100
    791  4a20		       05		      .byte.b	%00000101
    792  4a21		       05		      .byte.b	%00000101
    793  4a22		       02		      .byte.b	%00000010
    794  4a23
    795  4a23							; H
    796  4a23		       05		      .byte.b	%00000101
    797  4a24		       05		      .byte.b	%00000101
    798  4a25		       07		      .byte.b	%00000111
    799  4a26		       05		      .byte.b	%00000101
    800  4a27		       05		      .byte.b	%00000101
    801  4a28
    802  4a28							; I
    803  4a28		       07		      .byte.b	%00000111
    804  4a29		       02		      .byte.b	%00000010
    805  4a2a		       02		      .byte.b	%00000010
    806  4a2b		       02		      .byte.b	%00000010
    807  4a2c		       07		      .byte.b	%00000111
    808  4a2d
    809  4a2d							; J
    810  4a2d		       01		      .byte.b	%00000001
    811  4a2e		       01		      .byte.b	%00000001
    812  4a2f		       01		      .byte.b	%00000001
    813  4a30		       05		      .byte.b	%00000101
    814  4a31		       02		      .byte.b	%00000010
    815  4a32
    816  4a32							; K
    817  4a32		       05		      .byte.b	%00000101
    818  4a33		       05		      .byte.b	%00000101
    819  4a34		       06		      .byte.b	%00000110
    820  4a35		       05		      .byte.b	%00000101
    821  4a36		       05		      .byte.b	%00000101
    822  4a37
    823  4a37							; L
    824  4a37		       04		      .byte.b	%00000100
    825  4a38		       04		      .byte.b	%00000100
    826  4a39		       04		      .byte.b	%00000100
    827  4a3a		       04		      .byte.b	%00000100
    828  4a3b		       07		      .byte.b	%00000111
    829  4a3c
    830  4a3c							; M
    831  4a3c		       05		      .byte.b	%00000101
    832  4a3d		       07		      .byte.b	%00000111
    833  4a3e		       07		      .byte.b	%00000111
    834  4a3f		       05		      .byte.b	%00000101
    835  4a40		       05		      .byte.b	%00000101
    836  4a41
    837  4a41							; N
    838  4a41		       06		      .byte.b	%00000110
    839  4a42		       05		      .byte.b	%00000101
    840  4a43		       05		      .byte.b	%00000101
    841  4a44		       05		      .byte.b	%00000101
    842  4a45		       05		      .byte.b	%00000101
    843  4a46
    844  4a46							; O
    845  4a46		       02		      .byte.b	%00000010
    846  4a47		       05		      .byte.b	%00000101
    847  4a48		       05		      .byte.b	%00000101
    848  4a49		       05		      .byte.b	%00000101
    849  4a4a		       02		      .byte.b	%00000010
    850  4a4b
    851  4a4b							; P
    852  4a4b		       06		      .byte.b	%00000110
    853  4a4c		       05		      .byte.b	%00000101
    854  4a4d		       06		      .byte.b	%00000110
    855  4a4e		       04		      .byte.b	%00000100
    856  4a4f		       04		      .byte.b	%00000100
    857  4a50
    858  4a50							; Q
    859  4a50		       02		      .byte.b	%00000010
    860  4a51		       05		      .byte.b	%00000101
    861  4a52		       05		      .byte.b	%00000101
    862  4a53		       05		      .byte.b	%00000101
    863  4a54		       03		      .byte.b	%00000011
    864  4a55
    865  4a55							; R
    866  4a55		       06		      .byte.b	%00000110
    867  4a56		       05		      .byte.b	%00000101
    868  4a57		       06		      .byte.b	%00000110
    869  4a58		       05		      .byte.b	%00000101
    870  4a59		       05		      .byte.b	%00000101
    871  4a5a
    872  4a5a							; S
    873  4a5a		       03		      .byte.b	%00000011
    874  4a5b		       04		      .byte.b	%00000100
    875  4a5c		       02		      .byte.b	%00000010
    876  4a5d		       01		      .byte.b	%00000001
    877  4a5e		       06		      .byte.b	%00000110
    878  4a5f
    879  4a5f							; T
    880  4a5f		       07		      .byte.b	%00000111
    881  4a60		       02		      .byte.b	%00000010
    882  4a61		       02		      .byte.b	%00000010
    883  4a62		       02		      .byte.b	%00000010
    884  4a63		       02		      .byte.b	%00000010
    885  4a64
    886  4a64							; U
    887  4a64		       05		      .byte.b	%00000101
    888  4a65		       05		      .byte.b	%00000101
    889  4a66		       05		      .byte.b	%00000101
    890  4a67		       05		      .byte.b	%00000101
    891  4a68		       07		      .byte.b	%00000111
    892  4a69
    893  4a69							; V
    894  4a69		       05		      .byte.b	%00000101
    895  4a6a		       05		      .byte.b	%00000101
    896  4a6b		       05		      .byte.b	%00000101
    897  4a6c		       05		      .byte.b	%00000101
    898  4a6d		       02		      .byte.b	%00000010
    899  4a6e
    900  4a6e							; W
    901  4a6e		       05		      .byte.b	%00000101
    902  4a6f		       05		      .byte.b	%00000101
    903  4a70		       07		      .byte.b	%00000111
    904  4a71		       07		      .byte.b	%00000111
    905  4a72		       05		      .byte.b	%00000101
    906  4a73
    907  4a73							; X
    908  4a73		       05		      .byte.b	%00000101
    909  4a74		       05		      .byte.b	%00000101
    910  4a75		       02		      .byte.b	%00000010
    911  4a76		       05		      .byte.b	%00000101
    912  4a77		       05		      .byte.b	%00000101
    913  4a78
    914  4a78							; Y
    915  4a78		       05		      .byte.b	%00000101
    916  4a79		       05		      .byte.b	%00000101
    917  4a7a		       02		      .byte.b	%00000010
    918  4a7b		       02		      .byte.b	%00000010
    919  4a7c		       02		      .byte.b	%00000010
    920  4a7d
    921  4a7d							; Z
    922  4a7d		       07		      .byte.b	%00000111
    923  4a7e		       01		      .byte.b	%00000001
    924  4a7f		       02		      .byte.b	%00000010
    925  4a80		       04		      .byte.b	%00000100
    926  4a81		       07		      .byte.b	%00000111
    927  4a82
    928  4a82							; 0
    929  4a82		       07		      .byte.b	%00000111
    930  4a83		       05		      .byte.b	%00000101
    931  4a84		       05		      .byte.b	%00000101
    932  4a85		       05		      .byte.b	%00000101
    933  4a86		       07		      .byte.b	%00000111
    934  4a87
    935  4a87							; 1
    936  4a87		       02		      .byte.b	%00000010
    937  4a88		       06		      .byte.b	%00000110
    938  4a89		       02		      .byte.b	%00000010
    939  4a8a		       02		      .byte.b	%00000010
    940  4a8b		       07		      .byte.b	%00000111
    941  4a8c
    942  4a8c							; 2
    943  4a8c		       06		      .byte.b	%00000110
    944  4a8d		       01		      .byte.b	%00000001
    945  4a8e		       02		      .byte.b	%00000010
    946  4a8f		       04		      .byte.b	%00000100
    947  4a90		       07		      .byte.b	%00000111
    948  4a91
    949  4a91							; 3
    950  4a91		       06		      .byte.b	%00000110
    951  4a92		       01		      .byte.b	%00000001
    952  4a93		       02		      .byte.b	%00000010
    953  4a94		       01		      .byte.b	%00000001
    954  4a95		       06		      .byte.b	%00000110
    955  4a96
    956  4a96							; 4
    957  4a96		       05		      .byte.b	%00000101
    958  4a97		       05		      .byte.b	%00000101
    959  4a98		       07		      .byte.b	%00000111
    960  4a99		       01		      .byte.b	%00000001
    961  4a9a		       01		      .byte.b	%00000001
    962  4a9b
    963  4a9b							; 5
    964  4a9b		       07		      .byte.b	%00000111
    965  4a9c		       04		      .byte.b	%00000100
    966  4a9d		       06		      .byte.b	%00000110
    967  4a9e		       01		      .byte.b	%00000001
    968  4a9f		       06		      .byte.b	%00000110
    969  4aa0
    970  4aa0							; 6
    971  4aa0		       03		      .byte.b	%00000011
    972  4aa1		       04		      .byte.b	%00000100
    973  4aa2		       06		      .byte.b	%00000110
    974  4aa3		       05		      .byte.b	%00000101
    975  4aa4		       02		      .byte.b	%00000010
    976  4aa5
    977  4aa5							; 7
    978  4aa5		       07		      .byte.b	%00000111
    979  4aa6		       01		      .byte.b	%00000001
    980  4aa7		       02		      .byte.b	%00000010
    981  4aa8		       04		      .byte.b	%00000100
    982  4aa9		       04		      .byte.b	%00000100
    983  4aaa
    984  4aaa							; 8
    985  4aaa		       02		      .byte.b	%00000010
    986  4aab		       05		      .byte.b	%00000101
    987  4aac		       02		      .byte.b	%00000010
    988  4aad		       05		      .byte.b	%00000101
    989  4aae		       02		      .byte.b	%00000010
    990  4aaf
    991  4aaf							; 9
    992  4aaf		       02		      .byte.b	%00000010
    993  4ab0		       05		      .byte.b	%00000101
    994  4ab1		       03		      .byte.b	%00000011
    995  4ab2		       01		      .byte.b	%00000001
    996  4ab3		       06		      .byte.b	%00000110
    997  4ab4
    998  4ab4							; space
    999  4ab4		       00		      .byte.b	%00000000
   1000  4ab5		       00		      .byte.b	%00000000
   1001  4ab6		       00		      .byte.b	%00000000
   1002  4ab7		       00		      .byte.b	%00000000
   1003  4ab8		       00		      .byte.b	%00000000
   1004  4ab9
   1005  4ab9							; period
   1006  4ab9		       00		      .byte.b	%00000000
   1007  4aba		       00		      .byte.b	%00000000
   1008  4abb		       00		      .byte.b	%00000000
   1009  4abc		       00		      .byte.b	%00000000
   1010  4abd		       02		      .byte.b	%00000010
   1011  4abe
   1012  4abe							; question mark
   1013  4abe		       06		      .byte.b	%00000110
   1014  4abf		       01		      .byte.b	%00000001
   1015  4ac0		       02		      .byte.b	%00000010
   1016  4ac1		       00		      .byte.b	%00000000
   1017  4ac2		       02		      .byte.b	%00000010
   1018  4ac3
   1019  4ac3							; exclamation point
   1020  4ac3		       02		      .byte.b	%00000010
   1021  4ac4		       02		      .byte.b	%00000010
   1022  4ac5		       02		      .byte.b	%00000010
   1023  4ac6		       00		      .byte.b	%00000000
   1024  4ac7		       02		      .byte.b	%00000010
   1025  4ac8
   1026  4ac8							; comma
   1027  4ac8		       00		      .byte.b	%00000000
   1028  4ac9		       00		      .byte.b	%00000000
   1029  4aca		       00		      .byte.b	%00000000
   1030  4acb		       02		      .byte.b	%00000010
   1031  4acc		       04		      .byte.b	%00000100
   1032  4acd
   1033  4acd							; hyphen
   1034  4acd		       00		      .byte.b	%00000000
   1035  4ace		       00		      .byte.b	%00000000
   1036  4acf		       07		      .byte.b	%00000111
   1037  4ad0		       00		      .byte.b	%00000000
   1038  4ad1		       00		      .byte.b	%00000000
   1039  4ad2
   1040  4ad2							; plus
   1041  4ad2		       02		      .byte.b	%00000010
   1042  4ad3		       02		      .byte.b	%00000010
   1043  4ad4		       07		      .byte.b	%00000111
   1044  4ad5		       02		      .byte.b	%00000010
   1045  4ad6		       02		      .byte.b	%00000010
   1046  4ad7
   1047  4ad7							; apostrophe
   1048  4ad7		       02		      .byte.b	%00000010
   1049  4ad8		       04		      .byte.b	%00000100
   1050  4ad9		       00		      .byte.b	%00000000
   1051  4ada		       00		      .byte.b	%00000000
   1052  4adb		       00		      .byte.b	%00000000
   1053  4adc
   1054  4adc							; left parenthesis
   1055  4adc		       02		      .byte.b	%00000010
   1056  4add		       04		      .byte.b	%00000100
   1057  4ade		       04		      .byte.b	%00000100
   1058  4adf		       04		      .byte.b	%00000100
   1059  4ae0		       02		      .byte.b	%00000010
   1060  4ae1
   1061  4ae1							; right parenthesis
   1062  4ae1		       02		      .byte.b	%00000010
   1063  4ae2		       01		      .byte.b	%00000001
   1064  4ae3		       01		      .byte.b	%00000001
   1065  4ae4		       01		      .byte.b	%00000001
   1066  4ae5		       02		      .byte.b	%00000010
   1067  4ae6
   1068  4ae6							; colon
   1069  4ae6		       00		      .byte.b	%00000000
   1070  4ae7		       04		      .byte.b	%00000100
   1071  4ae8		       00		      .byte.b	%00000000
   1072  4ae9		       04		      .byte.b	%00000100
   1073  4aea		       00		      .byte.b	%00000000
   1074  4aeb
   1075  4aeb							;slash
   1076  4aeb		       01		      .byte.b	%00000001
   1077  4aec		       01		      .byte.b	%00000001
   1078  4aed		       02		      .byte.b	%00000010
   1079  4aee		       04		      .byte.b	%00000100
   1080  4aef		       04		      .byte.b	%00000100
   1081  4af0
   1082  4af0							; equal
   1083  4af0		       00		      .byte.b	%00000000
   1084  4af1		       07		      .byte.b	%00000111
   1085  4af2		       00		      .byte.b	%00000000
   1086  4af3		       07		      .byte.b	%00000111
   1087  4af4		       00		      .byte.b	%00000000
   1088  4af5
   1089  4af5							; quote
   1090  4af5		       05		      .byte.b	%00000101
   1091  4af6		       05		      .byte.b	%00000101
   1092  4af7		       00		      .byte.b	%00000000
   1093  4af8		       00		      .byte.b	%00000000
   1094  4af9		       00		      .byte.b	%00000000
   1095  4afa
   1096  4afa							; pound sign
   1097  4afa		       05		      .byte.b	%00000101
   1098  4afb		       0f		      .byte.b	%00001111
   1099  4afc		       05		      .byte.b	%00000101
   1100  4afd		       0f		      .byte.b	%00001111
   1101  4afe		       05		      .byte.b	%00000101
------- FILE d:\Firmaplus\Firmaplus_intern\Atari\PlusROM\Projekte-batariBasic\CaveApocalypse\C.A.V.E. Apocalypse.bas.asm
   8101  4aff
   8102  4aff				   .
   8103  4aff							; 
   8104  4aff
   8105  4aff				   .L0689		;  data text_strings
   8106  4aff
   8107  4aff		       4c fe fb 	      JMP	.skipL0689
   8108  4b02				   text_strings
   8109  4b02		       00 37 37 b4*	      .byte.b	__A, __L, __L, _sp, __M, __E, __N, _sp, __S, __A, __V, __E	; __R, __E, __S, __C, __U, __E, __D
   8110  4b0e
   8111  4b0e		       b4 8c b4 3c*	      .byte.b	_sp, __2, _sp, __M, __E, __N, _sp, __L, __E, __F, __T, _sp
   8112  4b1a
   8113  4b1a		       b4 96 b4 3c*	      .byte.b	_sp, __4, _sp, __M, __E, __N, _sp, __L, __E, __F, __T, _sp
   8114  4b26
   8115  4b26		       b4 a0 b4 3c*	      .byte.b	_sp, __6, _sp, __M, __E, __N, _sp, __L, __E, __F, __T, _sp
   8116  4b32
   8117  4b32		       b4 aa b4 3c*	      .byte.b	_sp, __8, _sp, __M, __E, __N, _sp, __L, __E, __F, __T, _sp
   8118  4b3e
   8119  4b3e		       87 82 b4 3c*	      .byte.b	__1, __0, _sp, __M, __E, __N, _sp, __L, __E, __F, __T, _sp
   8120  4b4a
   8121  4b4a		       87 8c b4 3c*	      .byte.b	__1, __2, _sp, __M, __E, __N, _sp, __L, __E, __F, __T, _sp
   8122  4b56
   8123  4b56		       87 96 b4 3c*	      .byte.b	__1, __4, _sp, __M, __E, __N, _sp, __L, __E, __F, __T, _sp
   8124  4b62
   8125  4b62		       87 a0 b4 3c*	      .byte.b	__1, __6, _sp, __M, __E, __N, _sp, __L, __E, __F, __T, _sp
   8126  4b6e
   8127  4b6e		       87 aa b4 3c*	      .byte.b	__1, __8, _sp, __M, __E, __N, _sp, __L, __E, __F, __T, _sp
   8128  4b7a
   8129  4b7a		       8c 82 b4 3c*	      .byte.b	__2, __0, _sp, __M, __E, __N, _sp, __L, __E, __F, __T, _sp
   8130  4b86
   8131  4b86		       8c 8c b4 3c*	      .byte.b	__2, __2, _sp, __M, __E, __N, _sp, __L, __E, __F, __T, _sp
   8132  4b92
   8133  4b92		       8c 96 b4 3c*	      .byte.b	__2, __4, _sp, __M, __E, __N, _sp, __L, __E, __F, __T, _sp
   8134  4b9e
   8135  4b9e		       8c a0 b4 3c*	      .byte.b	__2, __6, _sp, __M, __E, __N, _sp, __L, __E, __F, __T, _sp
   8136  4baa
   8137  4baa		       8c aa b4 3c*	      .byte.b	__2, __8, _sp, __M, __E, __N, _sp, __L, __E, __F, __T, _sp
   8138  4bb6
   8139  4bb6		       91 82 b4 3c*	      .byte.b	__3, __0, _sp, __M, __E, __N, _sp, __L, __E, __F, __T, _sp
   8140  4bc2
   8141  4bc2		       91 8c b4 3c*	      .byte.b	__3, __2, _sp, __M, __E, __N, _sp, __L, __E, __F, __T, _sp
   8142  4bce
   8143  4bce		       91 96 b4 3c*	      .byte.b	__3, __4, _sp, __M, __E, __N, _sp, __L, __E, __F, __T, _sp
   8144  4bda
   8145  4bda		       91 a0 b4 3c*	      .byte.b	__3, __6, _sp, __M, __E, __N, _sp, __L, __E, __F, __T, _sp
   8146  4be6
   8147  4be6		       91 aa b4 3c*	      .byte.b	__3, __8, _sp, __M, __E, __N, _sp, __L, __E, __F, __T, _sp
   8148  4bf2
   8149  4bf2		       96 82 b4 3c*	      .byte.b	__4, __0, _sp, __M, __E, __N, _sp, __L, __E, __F, __T, _sp
   8150  4bfe
   8151  4bfe				   .skipL0689
   8152  4bfe				   .
   8153  4bfe							; 
   8154  4bfe
   8155  4bfe				   .
   8156  4bfe							; 
   8157  4bfe
   8158  4bfe				   .
   8159  4bfe							; 
   8160  4bfe
   8161  4bfe				   .L0690		;  asm
   8162  4bfe
      0  4bfe					      SET_PLUSROM_API	"a.php", "ca.firmaplus.de"
      1  4bfe		       fb fe	   OLD_RORG   =	*
      2  4bfe					      REND
      3  4bfe				   PlusROM_API
      4  4bfe		       61 2e 70 68*	      .byte.b	"a.php", 0, "ca.firmaplus.de", 0
 Size of PlusROM API definition:  22
      5  4bfe					      ECHO	"Size of PlusROM API definition: ", [( * - PlusROM_API )]d
      6  4c14					      RORG	(OLD_RORG + ( * - PlusROM_API ))
   8164  4c14
   8165  4c14				   .
   8166  4c14							; 
   8167  4c14
   8168  4c14				  -	      if	(<*) > (<(*+7))
   8169  4c14				  -	      repeat	($100-<*)
   8170  4c14				  -	      .byte	0
   8171  4c14				  -	      repend
   8172  4c14					      endif
   8173  4c14				   playerL0312_1
   8174  4c14		       1b		      .byte.b	%00011011
   8175  4c15		       0e		      .byte.b	%00001110
   8176  4c16		       1f		      .byte.b	%00011111
   8177  4c17		       bd		      .byte.b	%10111101
   8178  4c18		       f9		      .byte.b	%11111001
   8179  4c19		       9e		      .byte.b	%10011110
   8180  4c1a		       08		      .byte.b	%00001000
   8181  4c1b		       7c		      .byte.b	%01111100
   8182  4c1c				  -	      if	(<*) > (<(*+7))
   8183  4c1c				  -	      repeat	($100-<*)
   8184  4c1c				  -	      .byte	0
   8185  4c1c				  -	      repend
   8186  4c1c					      endif
   8187  4c1c				   playerL0314_1
   8188  4c1c		       1b		      .byte.b	%00011011
   8189  4c1d		       0e		      .byte.b	%00001110
   8190  4c1e		       1f		      .byte.b	%00011111
   8191  4c1f		       bd		      .byte.b	%10111101
   8192  4c20		       f9		      .byte.b	%11111001
   8193  4c21		       9e		      .byte.b	%10011110
   8194  4c22		       08		      .byte.b	%00001000
   8195  4c23		       1f		      .byte.b	%00011111
   8196  4c24				  -	      if	(<*) > (<(*+7))
   8197  4c24				  -	      repeat	($100-<*)
   8198  4c24				  -	      .byte	0
   8199  4c24				  -	      repend
   8200  4c24					      endif
   8201  4c24				   playerL0316_1
   8202  4c24		       00		      .byte.b	%00000000
   8203  4c25		       4a		      .byte.b	%01001010
   8204  4c26		       3c		      .byte.b	%00111100
   8205  4c27		       3c		      .byte.b	%00111100
   8206  4c28		       3c		      .byte.b	%00111100
   8207  4c29		       3c		      .byte.b	%00111100
   8208  4c2a		       52		      .byte.b	%01010010
   8209  4c2b		       00		      .byte.b	%00000000
   8210  4c2c				  -	      if	(<*) > (<(*+7))
   8211  4c2c				  -	      repeat	($100-<*)
   8212  4c2c				  -	      .byte	0
   8213  4c2c				  -	      repend
   8214  4c2c					      endif
   8215  4c2c				   playerL0318_1
   8216  4c2c		       7e		      .byte.b	%01111110
   8217  4c2d		       df		      .byte.b	%11011111
   8218  4c2e		       ff		      .byte.b	%11111111
   8219  4c2f		       fe		      .byte.b	%11111110
   8220  4c30		       ff		      .byte.b	%11111111
   8221  4c31		       fd		      .byte.b	%11111101
   8222  4c32		       ff		      .byte.b	%11111111
   8223  4c33		       7a		      .byte.b	%01111010
   8224  4c34				  -	      if	(<*) > (<(*+7))
   8225  4c34				  -	      repeat	($100-<*)
   8226  4c34				  -	      .byte	0
   8227  4c34				  -	      repend
   8228  4c34					      endif
   8229  4c34				   playerL0320_1
   8230  4c34		       00		      .byte.b	%00000000
   8231  4c35		       18		      .byte.b	%00011000
   8232  4c36		       3c		      .byte.b	%00111100
   8233  4c37		       3c		      .byte.b	%00111100
   8234  4c38		       2c		      .byte.b	%00101100
   8235  4c39		       3c		      .byte.b	%00111100
   8236  4c3a		       18		      .byte.b	%00011000
   8237  4c3b		       00		      .byte.b	%00000000
   8238  4c3c				  -	      if	(<*) > (<(*+8))
   8239  4c3c				  -	      repeat	($100-<*)
   8240  4c3c				  -	      .byte	0
   8241  4c3c				  -	      repend
   8242  4c3c					      endif
   8243  4c3c				   playerL0322_1
   8244  4c3c		       00		      .byte.b	%00000000
   8245  4c3d		       00		      .byte.b	%00000000
   8246  4c3e		       00		      .byte.b	%00000000
   8247  4c3f		       14		      .byte.b	%00010100
   8248  4c40		       00		      .byte.b	%00000000
   8249  4c41		       2a		      .byte.b	%00101010
   8250  4c42		       04		      .byte.b	%00000100
   8251  4c43		       10		      .byte.b	%00010000
   8252  4c44		       00		      .byte.b	%00000000
   8253  4c45				  -	      if	(<*) > (<(*+9))
   8254  4c45				  -	      repeat	($100-<*)
   8255  4c45				  -	      .byte	0
   8256  4c45				  -	      repend
   8257  4c45					      endif
   8258  4c45				   playerL0324_1
   8259  4c45		       00		      .byte.b	%00000000
   8260  4c46		       00		      .byte.b	%00000000
   8261  4c47		       00		      .byte.b	%00000000
   8262  4c48		       08		      .byte.b	%00001000
   8263  4c49		       24		      .byte.b	%00100100
   8264  4c4a		       40		      .byte.b	%01000000
   8265  4c4b		       89		      .byte.b	%10001001
   8266  4c4c		       40		      .byte.b	%01000000
   8267  4c4d		       42		      .byte.b	%01000010
   8268  4c4e		       2c		      .byte.b	%00101100
   8269  4c4f				  -	      if	(<*) > (<(*+6))
   8270  4c4f				  -	      repeat	($100-<*)
   8271  4c4f				  -	      .byte	0
   8272  4c4f				  -	      repend
   8273  4c4f					      endif
   8274  4c4f				   playerL0334_0
   8275  4c4f		       55		      .byte.b	%01010101
   8276  4c50		       aa		      .byte.b	%10101010
   8277  4c51		       ff		      .byte.b	%11111111
   8278  4c52		       3c		      .byte.b	%00111100
   8279  4c53		       18		      .byte.b	%00011000
   8280  4c54		       08		      .byte.b	%00001000
   8281  4c55		       04		      .byte.b	%00000100
   8282  4c56				  -	      if	(<*) > (<(*+6))
   8283  4c56				  -	      repeat	($100-<*)
   8284  4c56				  -	      .byte	0
   8285  4c56				  -	      repend
   8286  4c56					      endif
   8287  4c56				   playerL0336_0
   8288  4c56		       aa		      .byte.b	%10101010
   8289  4c57		       55		      .byte.b	%01010101
   8290  4c58		       ff		      .byte.b	%11111111
   8291  4c59		       3c		      .byte.b	%00111100
   8292  4c5a		       18		      .byte.b	%00011000
   8293  4c5b		       08		      .byte.b	%00001000
   8294  4c5c		       04		      .byte.b	%00000100
   8295  4c5d				  -	      if	(<*) > (<(*+10))
   8296  4c5d				  -	      repeat	($100-<*)
   8297  4c5d				  -	      .byte	0
   8298  4c5d				  -	      repend
   8299  4c5d					      endif
   8300  4c5d				   playerL0338_0
   8301  4c5d		       00		      .byte.b	%00000000
   8302  4c5e		       00		      .byte.b	%00000000
   8303  4c5f		       00		      .byte.b	%00000000
   8304  4c60		       00		      .byte.b	%00000000
   8305  4c61		       00		      .byte.b	%00000000
   8306  4c62		       08		      .byte.b	%00001000
   8307  4c63		       02		      .byte.b	%00000010
   8308  4c64		       24		      .byte.b	%00100100
   8309  4c65		       90		      .byte.b	%10010000
   8310  4c66		       41		      .byte.b	%01000001
   8311  4c67		       28		      .byte.b	%00101000
   8312  4c68				  -	      if	(<*) > (<(*+7))
   8313  4c68				  -	      repeat	($100-<*)
   8314  4c68				  -	      .byte	0
   8315  4c68				  -	      repend
   8316  4c68					      endif
   8317  4c68				   playerL0341_0
   8318  4c68		       00		      .byte.b	%00000000
   8319  4c69		       00		      .byte.b	%00000000
   8320  4c6a		       00		      .byte.b	%00000000
   8321  4c6b		       14		      .byte.b	%00010100
   8322  4c6c		       40		      .byte.b	%01000000
   8323  4c6d		       00		      .byte.b	%00000000
   8324  4c6e		       24		      .byte.b	%00100100
   8325  4c6f		       10		      .byte.b	%00010000
   8326  4c70				  -	      if	(<*) > (<(*+6))
   8327  4c70				  -	      repeat	($100-<*)
   8328  4c70				  -	      .byte	0
   8329  4c70				  -	      repend
   8330  4c70					      endif
   8331  4c70				   playerL0344_0
   8332  4c70		       00		      .byte.b	%00000000
   8333  4c71		       00		      .byte.b	%00000000
   8334  4c72		       3c		      .byte.b	%00111100
   8335  4c73		       76		      .byte.b	%01110110
   8336  4c74		       7e		      .byte.b	%01111110
   8337  4c75		       5e		      .byte.b	%01011110
   8338  4c76		       2c		      .byte.b	%00101100
   8339  4c77				  -	      if	(<*) > (<(*+8))
   8340  4c77				  -	      repeat	($100-<*)
   8341  4c77				  -	      .byte	0
   8342  4c77				  -	      repend
   8343  4c77					      endif
   8344  4c77				   playerL0347_0
   8345  4c77		       7d		      .byte.b	%01111101
   8346  4c78		       7e		      .byte.b	%01111110
   8347  4c79		       ff		      .byte.b	%11111111
   8348  4c7a		       ff		      .byte.b	%11111111
   8349  4c7b		       ff		      .byte.b	%11111111
   8350  4c7c		       6f		      .byte.b	%01101111
   8351  4c7d		       3e		      .byte.b	%00111110
   8352  4c7e		       59		      .byte.b	%01011001
   8353  4c7f		       88		      .byte.b	%10001000
   8354  4c80				  -	      if	(<*) > (<(*+8))
   8355  4c80				  -	      repeat	($100-<*)
   8356  4c80				  -	      .byte	0
   8357  4c80				  -	      repend
   8358  4c80					      endif
   8359  4c80				   playerL0350_0
   8360  4c80		       aa		      .byte.b	%10101010
   8361  4c81		       55		      .byte.b	%01010101
   8362  4c82		       ff		      .byte.b	%11111111
   8363  4c83		       00		      .byte.b	%00000000
   8364  4c84		       40		      .byte.b	%01000000
   8365  4c85		       60		      .byte.b	%01100000
   8366  4c86		       70		      .byte.b	%01110000
   8367  4c87		       78		      .byte.b	%01111000
   8368  4c88		       40		      .byte.b	%01000000
   8369  4c89				  -	      if	(<*) > (<(*+11))
   8370  4c89				  -	      repeat	($100-<*)
   8371  4c89				  -	      .byte	0
   8372  4c89				  -	      repend
   8373  4c89					      endif
   8374  4c89				   playerL0357_0
   8375  4c89		       a0		      .byte.b	%10100000
   8376  4c8a		       40		      .byte.b	%01000000
   8377  4c8b		       e0		      .byte.b	%11100000
   8378  4c8c		       a0		      .byte.b	%10100000
   8379  4c8d		       40		      .byte.b	%01000000
   8380  4c8e		       00		      .byte.b	%00000000
   8381  4c8f		       00		      .byte.b	%00000000
   8382  4c90		       05		      .byte.b	%00000101
   8383  4c91		       02		      .byte.b	%00000010
   8384  4c92		       07		      .byte.b	%00000111
   8385  4c93		       05		      .byte.b	%00000101
   8386  4c94		       02		      .byte.b	%00000010
   8387  4c95				  -	      if	(<*) > (<(*+11))
   8388  4c95				  -	      repeat	($100-<*)
   8389  4c95				  -	      .byte	0
   8390  4c95				  -	      repend
   8391  4c95					      endif
   8392  4c95				   playerL0359_0
   8393  4c95		       10		      .byte.b	%00010000
   8394  4c96		       04		      .byte.b	%00000100
   8395  4c97		       01		      .byte.b	%00000001
   8396  4c98		       00		      .byte.b	%00000000
   8397  4c99		       00		      .byte.b	%00000000
   8398  4c9a		       02		      .byte.b	%00000010
   8399  4c9b		       00		      .byte.b	%00000000
   8400  4c9c		       00		      .byte.b	%00000000
   8401  4c9d		       40		      .byte.b	%01000000
   8402  4c9e		       00		      .byte.b	%00000000
   8403  4c9f		       81		      .byte.b	%10000001
   8404  4ca0		       28		      .byte.b	%00101000
   8405  4ca1				  -	      if	(<*) > (<(*+8))
   8406  4ca1				  -	      repeat	($100-<*)
   8407  4ca1				  -	      .byte	0
   8408  4ca1				  -	      repend
   8409  4ca1					      endif
   8410  4ca1				   playerL0362_0
   8411  4ca1		       28		      .byte.b	%00101000
   8412  4ca2		       00		      .byte.b	%00000000
   8413  4ca3		       01		      .byte.b	%00000001
   8414  4ca4		       00		      .byte.b	%00000000
   8415  4ca5		       20		      .byte.b	%00100000
   8416  4ca6		       80		      .byte.b	%10000000
   8417  4ca7		       20		      .byte.b	%00100000
   8418  4ca8		       00		      .byte.b	%00000000
   8419  4ca9		       00		      .byte.b	%00000000
   8420  4caa				  -	      if	(<*) > (<(*+11))
   8421  4caa				  -	      repeat	($100-<*)
   8422  4caa				  -	      .byte	0
   8423  4caa				  -	      repend
   8424  4caa					      endif
   8425  4caa				   playerL0365_0
   8426  4caa		       7e		      .byte.b	%01111110
   8427  4cab		       ff		      .byte.b	%11111111
   8428  4cac		       df		      .byte.b	%11011111
   8429  4cad		       ff		      .byte.b	%11111111
   8430  4cae		       ff		      .byte.b	%11111111
   8431  4caf		       ff		      .byte.b	%11111111
   8432  4cb0		       ff		      .byte.b	%11111111
   8433  4cb1		       ff		      .byte.b	%11111111
   8434  4cb2		       ff		      .byte.b	%11111111
   8435  4cb3		       fd		      .byte.b	%11111101
   8436  4cb4		       fb		      .byte.b	%11111011
   8437  4cb5		       7e		      .byte.b	%01111110
   8438  4cb6				  -	      if	(<*) > (<(*+11))
   8439  4cb6				  -	      repeat	($100-<*)
   8440  4cb6				  -	      .byte	0
   8441  4cb6				  -	      repend
   8442  4cb6					      endif
   8443  4cb6				   playerL0368_0
   8444  4cb6		       48		      .byte.b	%01001000
   8445  4cb7		       50		      .byte.b	%01010000
   8446  4cb8		       e0		      .byte.b	%11100000
   8447  4cb9		       f8		      .byte.b	%11111000
   8448  4cba		       e0		      .byte.b	%11100000
   8449  4cbb		       50		      .byte.b	%01010000
   8450  4cbc		       48		      .byte.b	%01001000
   8451  4cbd		       07		      .byte.b	%00000111
   8452  4cbe		       1f		      .byte.b	%00011111
   8453  4cbf		       07		      .byte.b	%00000111
   8454  4cc0		       0a		      .byte.b	%00001010
   8455  4cc1		       12		      .byte.b	%00010010
   8456  4cc2				  -	      if	(<*) > (<(*+24))
   8457  4cc2				  -	      repeat	($100-<*)
   8458  4cc2				  -	      .byte	0
   8459  4cc2				  -	      repend
   8460  4cc2					      endif
   8461  4cc2				   playerL0371_0
   8462  4cc2		       3c		      .byte.b	%00111100
   8463  4cc3		       20		      .byte.b	%00100000
   8464  4cc4		       20		      .byte.b	%00100000
   8465  4cc5		       20		      .byte.b	%00100000
   8466  4cc6		       20		      .byte.b	%00100000
   8467  4cc7		       00		      .byte.b	%00000000
   8468  4cc8		       3c		      .byte.b	%00111100
   8469  4cc9		       20		      .byte.b	%00100000
   8470  4cca		       38		      .byte.b	%00111000
   8471  4ccb		       20		      .byte.b	%00100000
   8472  4ccc		       3c		      .byte.b	%00111100
   8473  4ccd		       00		      .byte.b	%00000000
   8474  4cce		       18		      .byte.b	%00011000
   8475  4ccf		       24		      .byte.b	%00100100
   8476  4cd0		       24		      .byte.b	%00100100
   8477  4cd1		       24		      .byte.b	%00100100
   8478  4cd2		       24		      .byte.b	%00100100
   8479  4cd3		       00		      .byte.b	%00000000
   8480  4cd4		       20		      .byte.b	%00100000
   8481  4cd5		       20		      .byte.b	%00100000
   8482  4cd6		       38		      .byte.b	%00111000
   8483  4cd7		       20		      .byte.b	%00100000
   8484  4cd8		       bd		      .byte.b	%10111101
   8485  4cd9		       81		      .byte.b	%10000001
   8486  4cda		       ff		      .byte.b	%11111111
   8487  4cdb				  -	      if	(<*) > (<(*+3))
   8488  4cdb				  -	      repeat	($100-<*)
   8489  4cdb				  -	      .byte	0
   8490  4cdb				  -	      repend
   8491  4cdb					      endif
   8492  4cdb				   player2then_0
   8493  4cdb		       a6		      .byte.b	%10100110
   8494  4cdc		       42		      .byte.b	%01000010
   8495  4cdd		       63		      .byte.b	%01100011
   8496  4cde		       42		      .byte.b	%01000010
   8497  4cdf				  -	      if	(<*) > (<(*+3))
   8498  4cdf				  -	      repeat	($100-<*)
   8499  4cdf				  -	      .byte	0
   8500  4cdf				  -	      repend
   8501  4cdf					      endif
   8502  4cdf				   player3then_0
   8503  4cdf		       c5		      .byte.b	%11000101
   8504  4ce0		       42		      .byte.b	%01000010
   8505  4ce1		       63		      .byte.b	%01100011
   8506  4ce2		       42		      .byte.b	%01000010
   8507  4ce3				  -	      if	(<*) > (<(*+7))
   8508  4ce3				  -	      repeat	($100-<*)
   8509  4ce3				  -	      .byte	0
   8510  4ce3				  -	      repend
   8511  4ce3					      endif
   8512  4ce3				   playercolorL0582_1
   8513  4ce3		       1e		      .byte.b	_1E
   8514  4ce4		       82		      .byte.b	_82
   8515  4ce5		       84		      .byte.b	_84
   8516  4ce6		       46		      .byte.b	_46
   8517  4ce7		       44		      .byte.b	_44
   8518  4ce8		       42		      .byte.b	_42
   8519  4ce9		       12		      .byte.b	_12
   8520  4cea		       08		      .byte.b	_08
   8521  4ceb				  -	      if	(<*) > (<(*+9))
   8522  4ceb				  -	      repeat	($100-<*)
   8523  4ceb				  -	      .byte	0
   8524  4ceb				  -	      repend
   8525  4ceb					      endif
   8526  4ceb				   playercolorL0587_1
   8527  4ceb		       42		      .byte.b	_42
   8528  4cec		       44		      .byte.b	_44
   8529  4ced		       44		      .byte.b	_44
   8530  4cee		       46		      .byte.b	_46
   8531  4cef		       46		      .byte.b	_46
   8532  4cf0		       44		      .byte.b	_44
   8533  4cf1		       44		      .byte.b	_44
   8534  4cf2		       42		      .byte.b	_42
   8535  4cf3		       02		      .byte.b	_02
   8536  4cf4		       02		      .byte.b	_02
   8537  4cf5					      if	ECHOFIRST
      636 bytes of ROM space left in bank 4
   8538  4cf5					      echo	"    ",[(scoretable - *)]d , "bytes of ROM space left in bank 4")
   8539  4cf5					      endif
   8540  4cf5		       00 01	   ECHOFIRST  =	1
   8541  4cf5
   8542  4cf5
   8543  4cf5							; Provided under the CC0 license. See the included LICENSE.txt for details.
   8544  4cf5
   8545  4cf5							; feel free to modify the score graphics - just keep each digit 8 high
   8546  4cf5							; and keep the conditional compilation stuff intact
   8547  4cf5				  -	      ifconst	ROM2k
   8548  4cf5				  -	      ifconst	PlusROM_functions
   8549  4cf5				  -	      ORG	$F7AC-16
   8550  4cf5				  -	      else
   8551  4cf5				  -	      ORG	$F7AC-8
   8552  4cf5				  -	      endif
   8553  4cf5					      else
   8554  4cf5					      ifconst	bankswitch
   8555  4cf5				  -	      if	bankswitch == 8
   8556  4cf5				  -	      ORG	$2F94-bscode_length
   8557  4cf5				  -	      RORG	$FF94-bscode_length
   8558  4cf5					      endif
   8559  4cf5					      if	bankswitch == 16
   8560  4f71					      ORG	$4F94-bscode_length
   8561  4f71					      RORG	$FF94-bscode_length
   8562  4f71					      endif
   8563  4f71				  -	      if	bankswitch == 32
   8564  4f71				  -	      ORG	$8F94-bscode_length
   8565  4f71				  -	      RORG	$FF94-bscode_length
   8566  4f71					      endif
   8567  4f71				  -	      if	bankswitch == 64
   8568  4f71				  -	      ORG	$10F80-bscode_length
   8569  4f71				  -	      RORG	$1FF80-bscode_length
   8570  4f71					      endif
   8571  4f71				  -	      else
   8572  4f71				  -	      ifconst	PlusROM_functions
   8573  4f71				  -	      ORG	$FF98
   8574  4f71				  -	      else
   8575  4f71				  -	      ORG	$FF9C
   8576  4f71				  -	      endif
   8577  4f71					      endif
   8578  4f71					      endif
   8579  4f71
   8580  4f71							; font equates
   8581  4f71		       00 01	   .21stcentury =	1
   8582  4f71		       00 02	   alarmclock =	2
   8583  4f71		       00 03	   handwritten =	3
   8584  4f71		       00 04	   interrupted =	4
   8585  4f71		       00 05	   retroputer =	5
   8586  4f71		       00 06	   whimsey    =	6
   8587  4f71		       00 07	   tiny       =	7
   8588  4f71		       00 08	   hex	      =	8
   8589  4f71
   8590  4f71				  -	      ifconst	font
   8591  4f71				  -	      if	font == hex
   8592  4f71				  -	      ORG	. - 48
   8593  4f71				  -	      endif
   8594  4f71					      endif
   8595  4f71
   8596  4f71				   scoretable
   8597  4f71
   8598  4f71				  -	      ifconst	font
   8599  4f71				  -	      if	font == .21stcentury
   8600  4f71				  -	      include	"score_graphics.asm.21stcentury"
   8601  4f71				  -	      endif
   8602  4f71				  -	      if	font == alarmclock
   8603  4f71				  -	      include	"score_graphics.asm.alarmclock"
   8604  4f71				  -	      endif
   8605  4f71				  -	      if	font == handwritten
   8606  4f71				  -	      include	"score_graphics.asm.handwritten"
   8607  4f71				  -	      endif
   8608  4f71				  -	      if	font == interrupted
   8609  4f71				  -	      include	"score_graphics.asm.interrupted"
   8610  4f71				  -	      endif
   8611  4f71				  -	      if	font == retroputer
   8612  4f71				  -	      include	"score_graphics.asm.retroputer"
   8613  4f71				  -	      endif
   8614  4f71				  -	      if	font == whimsey
   8615  4f71				  -	      include	"score_graphics.asm.whimsey"
   8616  4f71				  -	      endif
   8617  4f71				  -	      if	font == tiny
   8618  4f71				  -	      include	"score_graphics.asm.tiny"
   8619  4f71				  -	      endif
   8620  4f71				  -	      if	font == hex
   8621  4f71				  -	      include	"score_graphics.asm.hex"
   8622  4f71				  -	      endif
   8623  4f71					      else		; default font
   8624  4f71
   8625  4f71		       3c		      .byte.b	%00111100
   8626  4f72		       66		      .byte.b	%01100110
   8627  4f73		       66		      .byte.b	%01100110
   8628  4f74		       66		      .byte.b	%01100110
   8629  4f75		       66		      .byte.b	%01100110
   8630  4f76		       66		      .byte.b	%01100110
   8631  4f77		       66		      .byte.b	%01100110
   8632  4f78		       3c		      .byte.b	%00111100
   8633  4f79
   8634  4f79		       7e		      .byte.b	%01111110
   8635  4f7a		       18		      .byte.b	%00011000
   8636  4f7b		       18		      .byte.b	%00011000
   8637  4f7c		       18		      .byte.b	%00011000
   8638  4f7d		       18		      .byte.b	%00011000
   8639  4f7e		       38		      .byte.b	%00111000
   8640  4f7f		       18		      .byte.b	%00011000
   8641  4f80		       08		      .byte.b	%00001000
   8642  4f81
   8643  4f81		       7e		      .byte.b	%01111110
   8644  4f82		       60		      .byte.b	%01100000
   8645  4f83		       60		      .byte.b	%01100000
   8646  4f84		       3c		      .byte.b	%00111100
   8647  4f85		       06		      .byte.b	%00000110
   8648  4f86		       06		      .byte.b	%00000110
   8649  4f87		       46		      .byte.b	%01000110
   8650  4f88		       3c		      .byte.b	%00111100
   8651  4f89
   8652  4f89		       3c		      .byte.b	%00111100
   8653  4f8a		       46		      .byte.b	%01000110
   8654  4f8b		       06		      .byte.b	%00000110
   8655  4f8c		       06		      .byte.b	%00000110
   8656  4f8d		       1c		      .byte.b	%00011100
   8657  4f8e		       06		      .byte.b	%00000110
   8658  4f8f		       46		      .byte.b	%01000110
   8659  4f90		       3c		      .byte.b	%00111100
   8660  4f91
   8661  4f91		       0c		      .byte.b	%00001100
   8662  4f92		       0c		      .byte.b	%00001100
   8663  4f93		       7e		      .byte.b	%01111110
   8664  4f94		       4c		      .byte.b	%01001100
   8665  4f95		       4c		      .byte.b	%01001100
   8666  4f96		       2c		      .byte.b	%00101100
   8667  4f97		       1c		      .byte.b	%00011100
   8668  4f98		       0c		      .byte.b	%00001100
   8669  4f99
   8670  4f99		       3c		      .byte.b	%00111100
   8671  4f9a		       46		      .byte.b	%01000110
   8672  4f9b		       06		      .byte.b	%00000110
   8673  4f9c		       06		      .byte.b	%00000110
   8674  4f9d		       3c		      .byte.b	%00111100
   8675  4f9e		       60		      .byte.b	%01100000
   8676  4f9f		       60		      .byte.b	%01100000
   8677  4fa0		       7e		      .byte.b	%01111110
   8678  4fa1
   8679  4fa1		       3c		      .byte.b	%00111100
   8680  4fa2		       66		      .byte.b	%01100110
   8681  4fa3		       66		      .byte.b	%01100110
   8682  4fa4		       66		      .byte.b	%01100110
   8683  4fa5		       7c		      .byte.b	%01111100
   8684  4fa6		       60		      .byte.b	%01100000
   8685  4fa7		       62		      .byte.b	%01100010
   8686  4fa8		       3c		      .byte.b	%00111100
   8687  4fa9
   8688  4fa9		       30		      .byte.b	%00110000
   8689  4faa		       30		      .byte.b	%00110000
   8690  4fab		       30		      .byte.b	%00110000
   8691  4fac		       18		      .byte.b	%00011000
   8692  4fad		       0c		      .byte.b	%00001100
   8693  4fae		       06		      .byte.b	%00000110
   8694  4faf		       42		      .byte.b	%01000010
   8695  4fb0		       3e		      .byte.b	%00111110
   8696  4fb1
   8697  4fb1		       3c		      .byte.b	%00111100
   8698  4fb2		       66		      .byte.b	%01100110
   8699  4fb3		       66		      .byte.b	%01100110
   8700  4fb4		       66		      .byte.b	%01100110
   8701  4fb5		       3c		      .byte.b	%00111100
   8702  4fb6		       66		      .byte.b	%01100110
   8703  4fb7		       66		      .byte.b	%01100110
   8704  4fb8		       3c		      .byte.b	%00111100
   8705  4fb9
   8706  4fb9		       3c		      .byte.b	%00111100
   8707  4fba		       46		      .byte.b	%01000110
   8708  4fbb		       06		      .byte.b	%00000110
   8709  4fbc		       3e		      .byte.b	%00111110
   8710  4fbd		       66		      .byte.b	%01100110
   8711  4fbe		       66		      .byte.b	%01100110
   8712  4fbf		       66		      .byte.b	%01100110
   8713  4fc0		       3c		      .byte.b	%00111100
   8714  4fc1
   8715  4fc1					      ifnconst	DPC_kernel_options
   8716  4fc1
   8717  4fc1		       00		      .byte.b	%00000000
   8718  4fc2		       00		      .byte.b	%00000000
   8719  4fc3		       00		      .byte.b	%00000000
   8720  4fc4		       00		      .byte.b	%00000000
   8721  4fc5		       00		      .byte.b	%00000000
   8722  4fc6		       00		      .byte.b	%00000000
   8723  4fc7		       00		      .byte.b	%00000000
   8724  4fc8		       00		      .byte.b	%00000000
   8725  4fc9
   8726  4fc9					      endif
   8727  4fc9
   8728  4fc9					      endif
   8729  4fc9
   8730  4fc9				  -	      ifconst	ROM2k
   8731  4fc9				  -	      ifconst	PlusROM_functions
   8732  4fc9				  -	      ORG	$F7F0
   8733  4fc9				  -	      .byte	0	; WriteToBuffer
   8734  4fc9				  -	      .byte	0	; WriteSendBuffer
   8735  4fc9				  -	      .byte	0	; ReceiveBuffer
   8736  4fc9				  -	      .byte	$ff	; ReceiveBufferSize (none zero for detection of PlusROM support)
   8737  4fc9				  -	      ORG	$F7FA
   8738  4fc9				  -	      else
   8739  4fc9				  -	      ORG	$F7FC
   8740  4fc9				  -	      endif
   8741  4fc9					      else
   8742  4fc9					      ifconst	bankswitch
   8743  4fc9				  -	      if	bankswitch == 8
   8744  4fc9				  -	      ORG	$2FF4-bscode_length
   8745  4fc9				  -	      RORG	$FFF4-bscode_length
   8746  4fc9					      endif
   8747  4fc9					      if	bankswitch == 16
   8748  4fd1					      ORG	$4FF4-bscode_length
   8749  4fd1					      RORG	$FFF4-bscode_length
   8750  4fd1					      endif
   8751  4fd1				  -	      if	bankswitch == 32
   8752  4fd1				  -	      ORG	$8FF4-bscode_length
   8753  4fd1				  -	      RORG	$FFF4-bscode_length
   8754  4fd1					      endif
   8755  4fd1				  -	      if	bankswitch == 64
   8756  4fd1				  -	      ORG	$10FE0-bscode_length
   8757  4fd1				  -	      RORG	$1FFE0-bscode_length
   8758  4fd1					      endif
   8759  4fd1				  -	      else
   8760  4fd1				  -	      ifconst	PlusROM_functions
   8761  4fd1				  -	      ORG	$FFF0
   8762  4fd1				  -	      .byte	0	; WriteToBuffer
   8763  4fd1				  -	      .byte	0	; WriteSendBuffer
   8764  4fd1				  -	      .byte	0	; ReceiveBuffer
   8765  4fd1				  -	      .byte	$ff	; ReceiveBufferSize (none zero for detection of PlusROM support)
   8766  4fd1				  -	      ORG	$FFFA
   8767  4fd1				  -	      else
   8768  4fd1				  -	      ORG	$FFFC
   8769  4fd1				  -	      endif
   8770  4fd1					      endif
   8771  4fd1					      endif
   8772  4fd1							; Provided under the CC0 license. See the included LICENSE.txt for details.
   8773  4fd1
   8774  4fd1							; every bank has this stuff at the same place
   8775  4fd1							; this code can switch to/from any bank at any entry point
   8776  4fd1							; and can preserve register values
   8777  4fd1							; note: lines not starting with a space are not placed in all banks
   8778  4fd1							;
   8779  4fd1							; line below tells the compiler how long this is - do not remove
   8780  4fd1							;size=35
   8781  4fd1
   8782  4fd1				   begin_bscode
   8783  4fd1		       a2 ff		      ldx	#$ff
   8784  4fd3				  -	      ifconst	FASTFETCH	; using DPC+
   8785  4fd3				  -	      stx	FASTFETCH
   8786  4fd3					      endif
   8787  4fd3		       9a		      txs
   8788  4fd4				  -	      if	bankswitch == 64
   8789  4fd4				  -	      lda	#(((>(start-1)) & $0F) | $F0)
   8790  4fd4					      else
   8791  4fd4		       a9 f2		      lda	#>(start-1)
   8792  4fd6					      endif
   8793  4fd6		       48		      pha
   8794  4fd7		       a9 b0		      lda	#<(start-1)
   8795  4fd9		       48		      pha
   8796  4fda
   8797  4fda				   BS_return
   8798  4fda		       48		      pha
   8799  4fdb		       8a		      txa
   8800  4fdc		       48		      pha
   8801  4fdd		       ba		      tsx
   8802  4fde
   8803  4fde					      if	bankswitch != 64
   8804  4fde		       b5 04		      lda	4,x	; get high byte of return address
   8805  4fe0
   8806  4fe0		       2a		      rol
   8807  4fe1		       2a		      rol
   8808  4fe2		       2a		      rol
   8809  4fe3		       2a		      rol
   8810  4fe4		       29 03		      and	#bs_mask	;1 3 or 7 for F8/F6/F4
   8811  4fe6		       aa		      tax
   8812  4fe7		       e8		      inx
   8813  4fe8				  -	      else
   8814  4fe8				  -	      lda	4,x	; get high byte of return address
   8815  4fe8				  -	      tay
   8816  4fe8				  -	      ora	#$10	; change our bank nibble into a valid rom mirror
   8817  4fe8				  -	      sta	4,x
   8818  4fe8				  -	      tya
   8819  4fe8				  -	      lsr
   8820  4fe8				  -	      lsr
   8821  4fe8				  -	      lsr
   8822  4fe8				  -	      lsr
   8823  4fe8				  -	      tax
   8824  4fe8				  -	      inx
   8825  4fe8					      endif
   8826  4fe8
   8827  4fe8				   BS_jsr
   8828  4fe8		       bd f5 1f 	      lda	bankswitch_hotspot-1,x
   8829  4feb		       68		      pla
   8830  4fec		       aa		      tax
   8831  4fed		       68		      pla
   8832  4fee		       60		      rts
   8833  4fef				  -	      if	((* & $1FFF) > ((bankswitch_hotspot & $1FFF) - 1))
   8834  4fef				  -	      echo	"WARNING: size parameter in banksw.asm too small - the program probably will not work."
   8835  4fef				  -	      echo	"Change to",[(*-begin_bscode+1)&$FF]d,"and try again."
   8836  4fef					      endif
   8837  4fef							; Provided under the CC0 license. See the included LICENSE.txt for details.
   8838  4fef
   8839  4fef					      ifconst	bankswitch
   8840  4fef				  -	      if	bankswitch == 8
   8841  4fef				  -	      ifconst	PlusROM_functions
   8842  4fef				  -	      ORG	$2FF0
   8843  4fef				  -	      RORG	$FFF0
   8844  4fef				  -	      .byte	0	; WriteToBuffer
   8845  4fef				  -	      .byte	0	; WriteSendBuffer
   8846  4fef				  -	      .byte	0	; ReceiveBuffer
   8847  4fef				  -	      .byte	$ff	; ReceiveBufferSize (none zero for detection of PlusROM support)
   8848  4fef				  -	      ORG	$2FFA
   8849  4fef				  -	      RORG	$FFFA
   8850  4fef				  -	      .word	(PlusROM_API)
   8851  4fef				  -	      else
   8852  4fef				  -	      ORG	$2FFC
   8853  4fef				  -	      RORG	$FFFC
   8854  4fef				  -	      endif
   8855  4fef					      endif
   8856  4fef					      if	bankswitch == 16
   8857  4fef					      ifconst	PlusROM_functions
   8858  4ff0					      ORG	$4FF0
   8859  4ff0					      RORG	$FFF0
   8860  4ff0		       00		      .byte.b	0	; WriteToBuffer
   8861  4ff1		       00		      .byte.b	0	; WriteSendBuffer
   8862  4ff2		       00		      .byte.b	0	; ReceiveBuffer
   8863  4ff3		       ff		      .byte.b	$ff	; ReceiveBufferSize (none zero for detection of PlusROM support)
   8864  4ffa					      ORG	$4FFA
   8865  4ffa					      RORG	$FFFA
   8866  4ffa		       fe 4b		      .word.w	(PlusROM_API)
   8867  4ffc				  -	      else
   8868  4ffc				  -	      ORG	$4FFC
   8869  4ffc				  -	      RORG	$FFFC
   8870  4ffc					      endif
   8871  4ffc					      endif
   8872  4ffc				  -	      if	bankswitch == 32
   8873  4ffc				  -	      ifconst	PlusROM_functions
   8874  4ffc				  -	      ORG	$8FF0
   8875  4ffc				  -	      RORG	$FFF0
   8876  4ffc				  -	      .byte	0	; WriteToBuffer
   8877  4ffc				  -	      .byte	0	; WriteSendBuffer
   8878  4ffc				  -	      .byte	0	; ReceiveBuffer
   8879  4ffc				  -	      .byte	$ff	; ReceiveBufferSize (none zero for detection of PlusROM support)
   8880  4ffc				  -	      ORG	$8FFA
   8881  4ffc				  -	      RORG	$FFFA
   8882  4ffc				  -	      .word	(PlusROM_API)
   8883  4ffc				  -	      else
   8884  4ffc				  -	      ORG	$8FFC
   8885  4ffc				  -	      RORG	$FFFC
   8886  4ffc				  -	      endif
   8887  4ffc					      endif
   8888  4ffc				  -	      if	bankswitch == 64
   8889  4ffc				  -	      ORG	$10FF0
   8890  4ffc				  -	      RORG	$1FFF0
   8891  4ffc				  -	      lda	$ffe0	; we use wasted space to assist stella with EF format auto-detection
   8892  4ffc				  -	      ORG	$10FF8
   8893  4ffc				  -	      RORG	$1FFF8
   8894  4ffc				  -	      ifconst	superchip
   8895  4ffc				  -	      .byte	"E","F","S","C"
   8896  4ffc				  -	      else
   8897  4ffc				  -	      .byte	"E","F","E","F"
   8898  4ffc				  -	      endif
   8899  4ffc				  -	      ORG	$10FFC
   8900  4ffc				  -	      RORG	$1FFFC
   8901  4ffc					      endif
   8902  4ffc				  -	      else
   8903  4ffc				  -	      ifconst	ROM2k
   8904  4ffc				  -	      ifconst	PlusROM_functions
   8905  4ffc				  -	      ORG	$F7FA
   8906  4ffc				  -	      .word	(PlusROM_API)
   8907  4ffc				  -	      else
   8908  4ffc				  -	      ORG	$F7FC
   8909  4ffc				  -	      endif
   8910  4ffc				  -	      else
   8911  4ffc				  -	      ifconst	PlusROM_functions
   8912  4ffc				  -	      ORG	$FFFA
   8913  4ffc				  -	      .word	(PlusROM_API)
   8914  4ffc				  -	      else
   8915  4ffc				  -	      ORG	$FFFC
   8916  4ffc				  -	      endif
   8917  4ffc				  -	      endif
   8918  4ffc					      endif
   8919  4ffc		       b1 f2		      .word.w	(start & $ffff)
   8920  4ffe		       b1 f2		      .word.w	(start & $ffff)
