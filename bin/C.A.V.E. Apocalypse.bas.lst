------- FILE d:\Firmaplus\Firmaplus_intern\Atari\PlusROM\Projekte-batariBasic\CaveApocalypse\C.A.V.E. Apocalypse.bas.asm LEVEL 1 PASS 3
      1  3000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  3000 ????
      3  3000 ????				      processor	6502
------- FILE vcs.h LEVEL 2 PASS 3
      0  3000 ????				      include	"vcs.h"
      1  3000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  3000 ????
      3  3000 ????						; VCS.H
      4  3000 ????						; Version 1.05, 13/November/2003
      5  3000 ????
      6  3000 ????	       00 69	   VERSION_VCS =	105
      7  3000 ????
      8  3000 ????						; THIS IS A PRELIMINARY RELEASE OF *THE* "STANDARD" VCS.H
      9  3000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
     10  3000 ????						; PLEASE DO *NOT* REDISTRIBUTE THIS FILE!
     11  3000 ????						;
     12  3000 ????						; This file defines hardware registers and memory mapping for the
     13  3000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     14  3000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     15  3000 ????						; available at at http://www.atari2600.org/dasm
     16  3000 ????						;
     17  3000 ????						; Many thanks to the original author(s) of this file, and to everyone who has
     18  3000 ????						; contributed to understanding the Atari 2600.  If you take issue with the
     19  3000 ????						; contents, or naming of registers, please write to me (atari2600@taswegian.com)
     20  3000 ????						; with your views.  Please contribute, if you think you can improve this
     21  3000 ????						; file!
     22  3000 ????						;
     23  3000 ????						; Latest Revisions...
     24  3000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     25  3000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     26  3000 ????						;			    This will allow conditional code to verify VCS.H being
     27  3000 ????						;			    used for code assembly.
     28  3000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     29  3000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     30  3000 ????						;			 mirrored reading/writing differences.	This is more a 
     31  3000 ????						;			 readability issue, and binary compatibility with disassembled
     32  3000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     33  3000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     34  3000 ????						;			 which was broken by the use of segments in this file, as
     35  3000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     36  3000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     37  3000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     38  3000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     39  3000 ????						;						   it is safe to leave it undefined, and the base address will
     40  3000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     41  3000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     42  3000 ????						;			  - register definitions are now generated through assignment
     43  3000 ????						;			    in uninitialised segments.	This allows a changeable base
     44  3000 ????						;			    address architecture.
     45  3000 ????						; 1.0	22/MAR/2003		Initial release
     46  3000 ????
     47  3000 ????
     48  3000 ????						;-------------------------------------------------------------------------------
     49  3000 ????
     50  3000 ????						; TIA_BASE_ADDRESS
     51  3000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     52  3000 ????						; Normally 0, the base address should (externally, before including this file)
     53  3000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     54  3000 ????						; The reason is that this bankswitching scheme treats any access to locations
     55  3000 ????						; < $40 as a bankswitch.
     56  3000 ????
     57  3000 ????			  -	      IFNCONST	TIA_BASE_ADDRESS
     58  3000 ????			  -TIA_BASE_ADDRESS =	0
     59  3000 ????				      ENDIF
     60  3000 ????
     61  3000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     62  3000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     63  3000 ????						; *OR* by declaring the label before including this file, eg:
     64  3000 ????						; TIA_BASE_ADDRESS = $40
     65  3000 ????						;   include "vcs.h"
     66  3000 ????
     67  3000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     68  3000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     69  3000 ????						; for the mirrored ROM hardware registers.
     70  3000 ????
     71  3000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     72  3000 ????						; using the -D command-line switch, as required.  If the addresses are not defined, 
     73  3000 ????						; they defaut to the TIA_BASE_ADDRESS.
     74  3000 ????
     75  3000 ????			  -	      IFNCONST	TIA_BASE_READ_ADDRESS
     76  3000 ????			  -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     77  3000 ????				      ENDIF
     78  3000 ????
     79  3000 ????			  -	      IFNCONST	TIA_BASE_WRITE_ADDRESS
     80  3000 ????			  -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     81  3000 ????				      ENDIF
     82  3000 ????
     83  3000 ????						;-------------------------------------------------------------------------------
     84  3000 ????
     85 U002d ????				      SEG.U	TIA_REGISTERS_WRITE
     86 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     87 U0000
     88 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     89 U0000
     90 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     91 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     92 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     93 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     94 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     95 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     96 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     97 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     98 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     99 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
    100 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
    101 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    102 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    103 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    104 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    105 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    106 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    107 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    108 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    109 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    110 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    111 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    112 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    113 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    114 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    115 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    116 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    117 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    118 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    119 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    120 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    121 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    122 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    123 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    124 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    125 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    126 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    127 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    128 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    129 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    130 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    131 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    132 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    133 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    134 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    135 U002d
    136 U002d							;-------------------------------------------------------------------------------
    137 U002d
    138 U000e ????				      SEG.U	TIA_REGISTERS_READ
    139 U0000					      ORG	TIA_BASE_READ_ADDRESS
    140 U0000
    141 U0000							;											bit 7	 bit 6
    142 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    143 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    144 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    145 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    146 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    147 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    148 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    149 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    150 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    151 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    152 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    153 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    154 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    155 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    156 U000e
    157 U000e							;-------------------------------------------------------------------------------
    158 U000e
    159 U0298 ????				      SEG.U	RIOT
    160 U0280					      ORG	$280
    161 U0280
    162 U0280							; RIOT MEMORY MAP
    163 U0280
    164 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    165 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    166 U0281
    167 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    168 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    169 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    170 U0284		       00	   INTIM      ds	1	; $284		Timer output
    171 U0285
    172 U0285		       00	   TIMINT     ds	1	; $285
    173 U0286
    174 U0286							; Unused/undefined registers ($285-$294)
    175 U0286
    176 U0286		       00		      ds	1	; $286
    177 U0287		       00		      ds	1	; $287
    178 U0288		       00		      ds	1	; $288
    179 U0289		       00		      ds	1	; $289
    180 U028a		       00		      ds	1	; $28A
    181 U028b		       00		      ds	1	; $28B
    182 U028c		       00		      ds	1	; $28C
    183 U028d		       00		      ds	1	; $28D
    184 U028e		       00		      ds	1	; $28E
    185 U028f		       00		      ds	1	; $28F
    186 U0290		       00		      ds	1	; $290
    187 U0291		       00		      ds	1	; $291
    188 U0292		       00		      ds	1	; $292
    189 U0293		       00		      ds	1	; $293
    190 U0294
    191 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    192 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    193 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    194 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    195 U0298
    196 U0298							;-------------------------------------------------------------------------------
    197 U0298							; The following required for back-compatibility with code which does not use
    198 U0298							; segments.
    199 U0298
    200  3000 ????				      SEG
    201  3000 ????
    202  3000 ????						; EOF
------- FILE d:\Firmaplus\Firmaplus_intern\Atari\PlusROM\Projekte-batariBasic\CaveApocalypse\C.A.V.E. Apocalypse.bas.asm
------- FILE macro.h LEVEL 2 PASS 3
      0  3000 ????				      include	"macro.h"
      1  3000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  3000 ????
      3  3000 ????						; MACRO.H
      4  3000 ????						; Version 1.05, 13/NOVEMBER/2003
      5  3000 ????
      6  3000 ????	       00 69	   VERSION_MACRO =	105
      7  3000 ????
      8  3000 ????						;
      9  3000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
     10  3000 ????						; PLEASE DO *NOT* REDISTRIBUTE MODIFIED VERSIONS OF THIS FILE!
     11  3000 ????						;
     12  3000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     13  3000 ????						; It is distributed as a companion machine-specific support package
     14  3000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     15  3000 ????						; available at at http://www.atari2600.org/dasm
     16  3000 ????						;
     17  3000 ????						; Many thanks to the people who have contributed.  If you take issue with the
     18  3000 ????						; contents, or would like to add something, please write to me
     19  3000 ????						; (atari2600@taswegian.com) with your contribution.
     20  3000 ????						;
     21  3000 ????						; Latest Revisions...
     22  3000 ????						;
     23  3000 ????						; 1.05  14/NOV/2003	  - Added VERSION_MACRO equate (which will reflect 100x version #)
     24  3000 ????						;			    This will allow conditional code to verify MACRO.H being
     25  3000 ????						;			    used for code assembly.
     26  3000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     27  3000 ????						;
     28  3000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     29  3000 ????						;
     30  3000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     31  3000 ????						;			   (standardised macro for vertical synch code)
     32  3000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added. 
     33  3000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     34  3000 ????						; 1.0	22/MAR/2003		Initial release
     35  3000 ????
     36  3000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage, 
     37  3000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     38  3000 ????						;   If you do not allow illegal opcode usage, you must include this file 
     39  3000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     40  3000 ????						;   registers and require them to be defined first).
     41  3000 ????
     42  3000 ????						; Available macros...
     43  3000 ????						;   SLEEP n		 - sleep for n cycles
     44  3000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     45  3000 ????						;   CLEAN_START	 - set machine to known state on startup
     46  3000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     47  3000 ????
     48  3000 ????						;-------------------------------------------------------------------------------
     49  3000 ????						; SLEEP duration
     50  3000 ????						; Original author: Thomas Jentzsch
     51  3000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     52  3000 ????						; useful for code where precise timing is required.
     53  3000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     54  3000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     55  3000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     56  3000 ????
     57  3000 ????				      MAC	sleep
     58  3000 ????			   .CYCLES    SET	{1}
     59  3000 ????
     60  3000 ????				      IF	.CYCLES < 2
     61  3000 ????				      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     62  3000 ????				      ERR
     63  3000 ????				      ENDIF
     64  3000 ????
     65  3000 ????				      IF	.CYCLES & 1
     66  3000 ????				      IFNCONST	NO_ILLEGAL_OPCODES
     67  3000 ????				      nop	0
     68  3000 ????				      ELSE
     69  3000 ????				      bit	VSYNC
     70  3000 ????				      ENDIF
     71  3000 ????			   .CYCLES    SET	.CYCLES - 3
     72  3000 ????				      ENDIF
     73  3000 ????
     74  3000 ????				      REPEAT	.CYCLES / 2
     75  3000 ????				      nop
     76  3000 ????				      REPEND
     77  3000 ????				      ENDM		;usage: SLEEP n (n>1)
     78  3000 ????
     79  3000 ????						;-------------------------------------------------------------------------------
     80  3000 ????						; VERTICAL_SYNC
     81  3000 ????						; Original author: Manuel Polik
     82  3000 ????						; Inserts the code required for a proper 3 scannline 
     83  3000 ????						; vertical sync sequence
     84  3000 ????						;
     85  3000 ????						; Note: Alters the accumulator
     86  3000 ????						;
     87  3000 ????						; IN:
     88  3000 ????						; OUT: A = 1
     89  3000 ????
     90  3000 ????				      MAC	vertical_sync
     91  3000 ????				      LDA	#$02	; A = VSYNC enable
     92  3000 ????				      STA	WSYNC	; Finish current line
     93  3000 ????				      STA	VSYNC	; Start vertical sync
     94  3000 ????				      STA	WSYNC	; 1st line vertical sync
     95  3000 ????				      STA	WSYNC	; 2nd line vertical sync
     96  3000 ????				      LSR		; A = VSYNC disable
     97  3000 ????				      STA	WSYNC	; 3rd line vertical sync
     98  3000 ????				      STA	VSYNC	; Stop vertical sync
     99  3000 ????				      ENDM
    100  3000 ????
    101  3000 ????						;-------------------------------------------------------------------------------
    102  3000 ????						; CLEAN_START
    103  3000 ????						; Original author: Andrew Davie
    104  3000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
    105  3000 ????						; Sets stack pointer to $FF, and all registers to 0
    106  3000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    107  3000 ????						; Use as very first section of code on boot (ie: at reset)
    108  3000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    109  3000 ????
    110  3000 ????				      MAC	clean_start
    111  3000 ????				      sei
    112  3000 ????				      cld
    113  3000 ????
    114  3000 ????				      ldx	#0
    115  3000 ????				      txa
    116  3000 ????				      tay
    117  3000 ????			   .CLEAR_STACK dex
    118  3000 ????				      txs
    119  3000 ????				      pha
    120  3000 ????				      bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    121  3000 ????
    122  3000 ????				      ENDM
    123  3000 ????
    124  3000 ????						;-------------------------------------------------------
    125  3000 ????						; SET_POINTER
    126  3000 ????						; Original author: Manuel Rotschkar
    127  3000 ????						;
    128  3000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    129  3000 ????						;
    130  3000 ????						; Usage: SET_POINTER pointer, address
    131  3000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    132  3000 ????						;
    133  3000 ????						; Note: Alters the accumulator, NZ flags
    134  3000 ????						; IN 1: 2 byte RAM location reserved for pointer
    135  3000 ????						; IN 2: absolute address
    136  3000 ????
    137  3000 ????				      MAC	set_pointer
    138  3000 ????			   .POINTER   SET	{1}
    139  3000 ????			   .ADDRESS   SET	{2}
    140  3000 ????
    141  3000 ????				      LDA	#<.ADDRESS	; Get Lowbyte of Address
    142  3000 ????				      STA	.POINTER	; Store in pointer
    143  3000 ????				      LDA	#>.ADDRESS	; Get Hibyte of Address
    144  3000 ????				      STA	.POINTER+1	; Store in pointer+1
    145  3000 ????
    146  3000 ????				      ENDM
    147  3000 ????
    148  3000 ????						; EOF
------- FILE d:\Firmaplus\Firmaplus_intern\Atari\PlusROM\Projekte-batariBasic\CaveApocalypse\C.A.V.E. Apocalypse.bas.asm
------- FILE 2600basic.h LEVEL 2 PASS 3
      0  3000 ????				      include	"2600basic.h"
      1  3000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  3000 ????
      3  3000 ????				      processor	6502
------- FILE vcs.h LEVEL 3 PASS 3
      0  3000 ????				      include	"vcs.h"
      1  3000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  3000 ????
      3  3000 ????						; VCS.H
      4  3000 ????						; Version 1.05, 13/November/2003
      5  3000 ????
      6  3000 ????	       00 69	   VERSION_VCS =	105
      7  3000 ????
      8  3000 ????						; THIS IS A PRELIMINARY RELEASE OF *THE* "STANDARD" VCS.H
      9  3000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
     10  3000 ????						; PLEASE DO *NOT* REDISTRIBUTE THIS FILE!
     11  3000 ????						;
     12  3000 ????						; This file defines hardware registers and memory mapping for the
     13  3000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     14  3000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     15  3000 ????						; available at at http://www.atari2600.org/dasm
     16  3000 ????						;
     17  3000 ????						; Many thanks to the original author(s) of this file, and to everyone who has
     18  3000 ????						; contributed to understanding the Atari 2600.  If you take issue with the
     19  3000 ????						; contents, or naming of registers, please write to me (atari2600@taswegian.com)
     20  3000 ????						; with your views.  Please contribute, if you think you can improve this
     21  3000 ????						; file!
     22  3000 ????						;
     23  3000 ????						; Latest Revisions...
     24  3000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     25  3000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     26  3000 ????						;			    This will allow conditional code to verify VCS.H being
     27  3000 ????						;			    used for code assembly.
     28  3000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     29  3000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     30  3000 ????						;			 mirrored reading/writing differences.	This is more a 
     31  3000 ????						;			 readability issue, and binary compatibility with disassembled
     32  3000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     33  3000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     34  3000 ????						;			 which was broken by the use of segments in this file, as
     35  3000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     36  3000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     37  3000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     38  3000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     39  3000 ????						;						   it is safe to leave it undefined, and the base address will
     40  3000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     41  3000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     42  3000 ????						;			  - register definitions are now generated through assignment
     43  3000 ????						;			    in uninitialised segments.	This allows a changeable base
     44  3000 ????						;			    address architecture.
     45  3000 ????						; 1.0	22/MAR/2003		Initial release
     46  3000 ????
     47  3000 ????
     48  3000 ????						;-------------------------------------------------------------------------------
     49  3000 ????
     50  3000 ????						; TIA_BASE_ADDRESS
     51  3000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     52  3000 ????						; Normally 0, the base address should (externally, before including this file)
     53  3000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     54  3000 ????						; The reason is that this bankswitching scheme treats any access to locations
     55  3000 ????						; < $40 as a bankswitch.
     56  3000 ????
     57  3000 ????			  -	      IFNCONST	TIA_BASE_ADDRESS
     58  3000 ????			  -TIA_BASE_ADDRESS =	0
     59  3000 ????				      ENDIF
     60  3000 ????
     61  3000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     62  3000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     63  3000 ????						; *OR* by declaring the label before including this file, eg:
     64  3000 ????						; TIA_BASE_ADDRESS = $40
     65  3000 ????						;   include "vcs.h"
     66  3000 ????
     67  3000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     68  3000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     69  3000 ????						; for the mirrored ROM hardware registers.
     70  3000 ????
     71  3000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     72  3000 ????						; using the -D command-line switch, as required.  If the addresses are not defined, 
     73  3000 ????						; they defaut to the TIA_BASE_ADDRESS.
     74  3000 ????
     75  3000 ????			  -	      IFNCONST	TIA_BASE_READ_ADDRESS
     76  3000 ????			  -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     77  3000 ????				      ENDIF
     78  3000 ????
     79  3000 ????			  -	      IFNCONST	TIA_BASE_WRITE_ADDRESS
     80  3000 ????			  -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     81  3000 ????				      ENDIF
     82  3000 ????
     83  3000 ????						;-------------------------------------------------------------------------------
     84  3000 ????
     85 U002d					      SEG.U	TIA_REGISTERS_WRITE
     86 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     87 U0000
     88 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     89 U0000
     90 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     91 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     92 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     93 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     94 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     95 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     96 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     97 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     98 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     99 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
    100 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
    101 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    102 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    103 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    104 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    105 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    106 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    107 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    108 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    109 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    110 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    111 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    112 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    113 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    114 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    115 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    116 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    117 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    118 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    119 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    120 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    121 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    122 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    123 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    124 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    125 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    126 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    127 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    128 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    129 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    130 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    131 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    132 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    133 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    134 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    135 U002d
    136 U002d							;-------------------------------------------------------------------------------
    137 U002d
    138 U000e					      SEG.U	TIA_REGISTERS_READ
    139 U0000					      ORG	TIA_BASE_READ_ADDRESS
    140 U0000
    141 U0000							;											bit 7	 bit 6
    142 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    143 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    144 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    145 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    146 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    147 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    148 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    149 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    150 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    151 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    152 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    153 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    154 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    155 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    156 U000e
    157 U000e							;-------------------------------------------------------------------------------
    158 U000e
    159 U0298					      SEG.U	RIOT
    160 U0280					      ORG	$280
    161 U0280
    162 U0280							; RIOT MEMORY MAP
    163 U0280
    164 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    165 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    166 U0281
    167 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    168 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    169 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    170 U0284		       00	   INTIM      ds	1	; $284		Timer output
    171 U0285
    172 U0285		       00	   TIMINT     ds	1	; $285
    173 U0286
    174 U0286							; Unused/undefined registers ($285-$294)
    175 U0286
    176 U0286		       00		      ds	1	; $286
    177 U0287		       00		      ds	1	; $287
    178 U0288		       00		      ds	1	; $288
    179 U0289		       00		      ds	1	; $289
    180 U028a		       00		      ds	1	; $28A
    181 U028b		       00		      ds	1	; $28B
    182 U028c		       00		      ds	1	; $28C
    183 U028d		       00		      ds	1	; $28D
    184 U028e		       00		      ds	1	; $28E
    185 U028f		       00		      ds	1	; $28F
    186 U0290		       00		      ds	1	; $290
    187 U0291		       00		      ds	1	; $291
    188 U0292		       00		      ds	1	; $292
    189 U0293		       00		      ds	1	; $293
    190 U0294
    191 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    192 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    193 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    194 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    195 U0298
    196 U0298							;-------------------------------------------------------------------------------
    197 U0298							; The following required for back-compatibility with code which does not use
    198 U0298							; segments.
    199 U0298
    200  3000 ????				      SEG
    201  3000 ????
    202  3000 ????						; EOF
------- FILE 2600basic.h
------- FILE macro.h LEVEL 3 PASS 3
      0  3000 ????				      include	"macro.h"
      1  3000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  3000 ????
      3  3000 ????						; MACRO.H
      4  3000 ????						; Version 1.05, 13/NOVEMBER/2003
      5  3000 ????
      6  3000 ????	       00 69	   VERSION_MACRO =	105
      7  3000 ????
      8  3000 ????						;
      9  3000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
     10  3000 ????						; PLEASE DO *NOT* REDISTRIBUTE MODIFIED VERSIONS OF THIS FILE!
     11  3000 ????						;
     12  3000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     13  3000 ????						; It is distributed as a companion machine-specific support package
     14  3000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     15  3000 ????						; available at at http://www.atari2600.org/dasm
     16  3000 ????						;
     17  3000 ????						; Many thanks to the people who have contributed.  If you take issue with the
     18  3000 ????						; contents, or would like to add something, please write to me
     19  3000 ????						; (atari2600@taswegian.com) with your contribution.
     20  3000 ????						;
     21  3000 ????						; Latest Revisions...
     22  3000 ????						;
     23  3000 ????						; 1.05  14/NOV/2003	  - Added VERSION_MACRO equate (which will reflect 100x version #)
     24  3000 ????						;			    This will allow conditional code to verify MACRO.H being
     25  3000 ????						;			    used for code assembly.
     26  3000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     27  3000 ????						;
     28  3000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     29  3000 ????						;
     30  3000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     31  3000 ????						;			   (standardised macro for vertical synch code)
     32  3000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added. 
     33  3000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     34  3000 ????						; 1.0	22/MAR/2003		Initial release
     35  3000 ????
     36  3000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage, 
     37  3000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     38  3000 ????						;   If you do not allow illegal opcode usage, you must include this file 
     39  3000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     40  3000 ????						;   registers and require them to be defined first).
     41  3000 ????
     42  3000 ????						; Available macros...
     43  3000 ????						;   SLEEP n		 - sleep for n cycles
     44  3000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     45  3000 ????						;   CLEAN_START	 - set machine to known state on startup
     46  3000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     47  3000 ????
     48  3000 ????						;-------------------------------------------------------------------------------
     49  3000 ????						; SLEEP duration
     50  3000 ????						; Original author: Thomas Jentzsch
     51  3000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     52  3000 ????						; useful for code where precise timing is required.
     53  3000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     54  3000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     55  3000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     56  3000 ????
     57  3000 ????				      MAC	sleep
     58  3000 ????			   .CYCLES    SET	{1}
     59  3000 ????
     60  3000 ????				      IF	.CYCLES < 2
     61  3000 ????				      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     62  3000 ????				      ERR
     63  3000 ????				      ENDIF
     64  3000 ????
     65  3000 ????				      IF	.CYCLES & 1
     66  3000 ????				      IFNCONST	NO_ILLEGAL_OPCODES
     67  3000 ????				      nop	0
     68  3000 ????				      ELSE
     69  3000 ????				      bit	VSYNC
     70  3000 ????				      ENDIF
     71  3000 ????			   .CYCLES    SET	.CYCLES - 3
     72  3000 ????				      ENDIF
     73  3000 ????
     74  3000 ????				      REPEAT	.CYCLES / 2
     75  3000 ????				      nop
     76  3000 ????				      REPEND
     77  3000 ????				      ENDM		;usage: SLEEP n (n>1)
     78  3000 ????
     79  3000 ????						;-------------------------------------------------------------------------------
     80  3000 ????						; VERTICAL_SYNC
     81  3000 ????						; Original author: Manuel Polik
     82  3000 ????						; Inserts the code required for a proper 3 scannline 
     83  3000 ????						; vertical sync sequence
     84  3000 ????						;
     85  3000 ????						; Note: Alters the accumulator
     86  3000 ????						;
     87  3000 ????						; IN:
     88  3000 ????						; OUT: A = 1
     89  3000 ????
     90  3000 ????				      MAC	vertical_sync
     91  3000 ????				      LDA	#$02	; A = VSYNC enable
     92  3000 ????				      STA	WSYNC	; Finish current line
     93  3000 ????				      STA	VSYNC	; Start vertical sync
     94  3000 ????				      STA	WSYNC	; 1st line vertical sync
     95  3000 ????				      STA	WSYNC	; 2nd line vertical sync
     96  3000 ????				      LSR		; A = VSYNC disable
     97  3000 ????				      STA	WSYNC	; 3rd line vertical sync
     98  3000 ????				      STA	VSYNC	; Stop vertical sync
     99  3000 ????				      ENDM
    100  3000 ????
    101  3000 ????						;-------------------------------------------------------------------------------
    102  3000 ????						; CLEAN_START
    103  3000 ????						; Original author: Andrew Davie
    104  3000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
    105  3000 ????						; Sets stack pointer to $FF, and all registers to 0
    106  3000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    107  3000 ????						; Use as very first section of code on boot (ie: at reset)
    108  3000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    109  3000 ????
    110  3000 ????				      MAC	clean_start
    111  3000 ????				      sei
    112  3000 ????				      cld
    113  3000 ????
    114  3000 ????				      ldx	#0
    115  3000 ????				      txa
    116  3000 ????				      tay
    117  3000 ????			   .CLEAR_STACK dex
    118  3000 ????				      txs
    119  3000 ????				      pha
    120  3000 ????				      bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    121  3000 ????
    122  3000 ????				      ENDM
    123  3000 ????
    124  3000 ????						;-------------------------------------------------------
    125  3000 ????						; SET_POINTER
    126  3000 ????						; Original author: Manuel Rotschkar
    127  3000 ????						;
    128  3000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    129  3000 ????						;
    130  3000 ????						; Usage: SET_POINTER pointer, address
    131  3000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    132  3000 ????						;
    133  3000 ????						; Note: Alters the accumulator, NZ flags
    134  3000 ????						; IN 1: 2 byte RAM location reserved for pointer
    135  3000 ????						; IN 2: absolute address
    136  3000 ????
    137  3000 ????				      MAC	set_pointer
    138  3000 ????			   .POINTER   SET	{1}
    139  3000 ????			   .ADDRESS   SET	{2}
    140  3000 ????
    141  3000 ????				      LDA	#<.ADDRESS	; Get Lowbyte of Address
    142  3000 ????				      STA	.POINTER	; Store in pointer
    143  3000 ????				      LDA	#>.ADDRESS	; Get Hibyte of Address
    144  3000 ????				      STA	.POINTER+1	; Store in pointer+1
    145  3000 ????
    146  3000 ????				      ENDM
    147  3000 ????
    148  3000 ????						; EOF
------- FILE 2600basic.h
------- FILE 2600basic_variable_redefs.h LEVEL 3 PASS 3
      0  3000 ????				      include	"2600basic_variable_redefs.h"
      1  3000 ????						; This file contains variable mapping and other information for the current project.
      2  3000 ????
      3  3000 ????	       00 23	   bscode_length =	35
      4  3000 ????	       00 1d	   _SD_Touch_Enemy_length =	.skipL0529-_SD_Touch_Enemy
      5  3000 ????
      6  3000 ????	       00 21	   _SD_Shoot_Enemy_length =	.skipL0528-_SD_Shoot_Enemy
      7  3000 ????
      8  3000 ????	       00 45	   _SD_Shoot_Miss_length =	.skipL0527-_SD_Shoot_Miss
      9  3000 ????
     10  3000 ????	       00 35	   _SD_Shot_Wall_length =	.skipL0526-_SD_Shot_Wall
     11  3000 ????
     12  3000 ????	       f0 6f	   w_extra_wall_startpos_y =	w111
     13  3000 ????
     14  3000 ????	       f0 ef	   r_extra_wall_startpos_y =	r111
     15  3000 ????
     16  3000 ????	       f0 6e	   w_extra_wall_startpos_x =	w110
     17  3000 ????
     18  3000 ????	       f0 ee	   r_extra_wall_startpos_x =	r110
     19  3000 ????
     20  3000 ????	       f0 6d	   w_extra_wall_height =	w109
     21  3000 ????
     22  3000 ????	       f0 ed	   r_extra_wall_height =	r109
     23  3000 ????
     24  3000 ????	       f0 6c	   w_extra_wall_width =	w108
     25  3000 ????
     26  3000 ????	       f0 ec	   r_extra_wall_width =	r108
     27  3000 ????
     28  3000 ????	       f0 6b	   w_extra_wall_type_and_range =	w107
     29  3000 ????
     30  3000 ????	       f0 eb	   r_extra_wall_type_and_range =	r107
     31  3000 ????
     32  3000 ????	       f0 6a	   w_roommate_startpos_y =	w106
     33  3000 ????
     34  3000 ????	       f0 ea	   r_roommate_startpos_y =	r106
     35  3000 ????
     36  3000 ????	       f0 69	   w_roommate_startpos_x =	w105
     37  3000 ????
     38  3000 ????	       f0 e9	   r_roommate_startpos_x =	r105
     39  3000 ????
     40  3000 ????	       f0 68	   w_roommate_type_and_range =	w104
     41  3000 ????
     42  3000 ????	       f0 e8	   r_roommate_type_and_range =	r104
     43  3000 ????
     44  3000 ????	       f0 67	   w_room_color_bottom =	w103
     45  3000 ????
     46  3000 ????	       f0 e7	   r_room_color_bottom =	r103
     47  3000 ????
     48  3000 ????	       f0 63	   w_room_color_middle =	w099
     49  3000 ????
     50  3000 ????	       f0 e3	   r_room_color_middle =	r099
     51  3000 ????
     52  3000 ????	       f0 62	   w_room_color_top =	w098
     53  3000 ????
     54  3000 ????	       f0 e2	   r_room_color_top =	r098
     55  3000 ????
     56  3000 ????	       f0 e1	   r_Bit0_room_type_top =	r097
     57  3000 ????
     58  3000 ????	       f0 e1	   w_BitOp_room_type =	r097
     59  3000 ????
     60  3000 ????	       f0 e1	   r_BitOp_room_type =	r097
     61  3000 ????
     62  3000 ????	       f0 61	   w_room_definition_start =	w097
     63  3000 ????
     64  3000 ????	       00 af	   ball_shoot_y =	var11
     65  3000 ????
     66  3000 ????	       00 ae	   ball_shoot_x =	var10
     67  3000 ????
     68  3000 ????	       00 ad	   has_private_levels =	var9
     69  3000 ????
     70  3000 ????	       00 ac	   max_priv_level_bcd3 =	var8
     71  3000 ????
     72  3000 ????	       00 ab	   max_priv_level_bcd2 =	var7
     73  3000 ????
     74  3000 ????	       00 aa	   max_priv_level_bcd1 =	var6
     75  3000 ????
     76  3000 ????	       00 a9	   max_pub_level_bcd3 =	var5
     77  3000 ????
     78  3000 ????	       00 a8	   max_pub_level_bcd2 =	var4
     79  3000 ????
     80  3000 ????	       00 a7	   max_pub_level_bcd1 =	var3
     81  3000 ????
     82  3000 ????	       00 a6	   gamenumber =	var2
     83  3000 ????
     84  3000 ????	       00 a5	   new_room_player1x =	var1
     85  3000 ????
     86  3000 ????	       00 a4	   new_room_player1y =	var0
     87  3000 ????
     88  3000 ????	       00 ec	   _Bit7_M0_Moving =	y
     89  3000 ????
     90  3000 ????	       00 ec	   _Bit6_Flip_P1 =	y
     91  3000 ????
     92  3000 ????	       00 ec	   _Bit5_Request_Pending =	y
     93  3000 ????
     94  3000 ????	       00 ec	   _Bit4_Game_Over =	y
     95  3000 ????
     96  3000 ????	       00 ec	   _Bit3_Ball_Shot_Moving =	y
     97  3000 ????
     98  3000 ????	       00 ec	   _Bit2_Level_finished =	y
     99  3000 ????
    100  3000 ????	       00 ec	   _Bit1_Wall_Dir =	y
    101  3000 ????
    102  3000 ????	       00 ec	   _Bit0_roommate_Dir =	y
    103  3000 ????
    104  3000 ????	       00 ec	   _Bit_Game_State =	y
    105  3000 ????
    106  3000 ????	       00 86	   P1y_position =	player1y
    107  3000 ????	       00 e9	   P1y_velocity =	v
    108  3000 ????	       00 91	   M0y_position =	missile0y
    109  3000 ????	       00 e6	   M0y_velocity =	s
    110  3000 ????	       00 af	   Bally_position =	ball_shoot_y
    111  3000 ????	       00 e3	   Bally_velocity =	p
    112  3000 ????	       00 e1	   Safe_Point_P1_y =	n
    113  3000 ????
    114  3000 ????	       00 e0	   Safe_Point_P1_x =	m
    115  3000 ????
    116  3000 ????	       00 df	   _Bit2_New_Room_Flip_P1 =	l
    117  3000 ????
    118  3000 ????	       00 df	   _Bit1_Safe_Point_P1_Flip =	l
    119  3000 ????
    120  3000 ????	       00 df	   _Bit0_Safe_Point_reached =	l
    121  3000 ????
    122  3000 ????	       00 df	   _BitOp_Safe_Point_New_Room =	l
    123  3000 ????
    124  3000 ????	       00 de	   roommate_type =	k
    125  3000 ????
    126  3000 ????	       00 dd	   roommate_move_x =	j
    127  3000 ????
    128  3000 ????	       00 dc	   extra_wall_move_x =	i
    129  3000 ????
    130  3000 ????	       00 db	   _Ch0_Counter =	h
    131  3000 ????
    132  3000 ????	       00 da	   _Ch0_Duration =	g
    133  3000 ????
    134  3000 ????	       00 d9	   _Ch0_Sound =	f
    135  3000 ????
    136  3000 ????	       00 d8	   _Bit3_P1_Dir_Right =	e
    137  3000 ????
    138  3000 ????	       00 d8	   _Bit2_P1_Dir_Left =	e
    139  3000 ????
    140  3000 ????	       00 d8	   _Bit1_P1_Dir_Down =	e
    141  3000 ????
    142  3000 ????	       00 d8	   _Bit0_P1_Dir_Up =	e
    143  3000 ????
    144  3000 ????	       00 d8	   _BitOp_P1_Dir =	e
    145  3000 ????
    146  3000 ????	       00 d7	   _Bit3_M0_Dir_Right =	d
    147  3000 ????
    148  3000 ????	       00 d7	   _Bit2_M0_Dir_Left =	d
    149  3000 ????
    150  3000 ????	       00 d7	   _Bit1_M0_Dir_Down =	d
    151  3000 ????
    152  3000 ????	       00 d7	   _Bit0_M0_Dir_Up =	d
    153  3000 ????
    154  3000 ????	       00 d7	   _BitOp_M0_Dir =	d
    155  3000 ????
    156  3000 ????	       00 d6	   _Bit3_Ball_Shot_Dir_Right2 =	c
    157  3000 ????
    158  3000 ????	       00 d6	   _Bit2_Ball_Shot_Dir_Right1 =	c
    159  3000 ????
    160  3000 ????	       00 d6	   _Bit1_Ball_Shot_Dir_Left2 =	c
    161  3000 ????
    162  3000 ????	       00 d6	   _Bit0_Ball_Shot_Dir_Left1 =	c
    163  3000 ????
    164  3000 ????	       00 d6	   _BitOp_Ball_Shot_Dir =	c
    165  3000 ????
    166  3000 ????	       00 d5	   frame_counter =	b
    167  3000 ????
    168  3000 ????	       00 d4	   delay_counter =	a
    169  3000 ????
    170  3000 ????	       00 95	   _sc3       =	score + 2
    171  3000 ????
    172  3000 ????	       00 94	   _sc2       =	score + 1
    173  3000 ????
    174  3000 ????	       00 93	   _sc1       =	score
    175  3000 ????
    176  3000 ????	       00 fe	   _FE	      =	$FE
    177  3000 ????
    178  3000 ????	       00 fc	   _FC	      =	$FC
    179  3000 ????
    180  3000 ????	       00 fa	   _FA	      =	$FA
    181  3000 ????
    182  3000 ????	       00 f8	   _F8	      =	$F8
    183  3000 ????
    184  3000 ????	       00 f6	   _F6	      =	$F6
    185  3000 ????
    186  3000 ????	       00 f4	   _F4	      =	$F4
    187  3000 ????
    188  3000 ????	       00 f2	   _F2	      =	$F2
    189  3000 ????
    190  3000 ????	       00 f0	   _F0	      =	$F0
    191  3000 ????
    192  3000 ????	       00 ee	   _EE	      =	$EE
    193  3000 ????
    194  3000 ????	       00 ec	   _EC	      =	$EC
    195  3000 ????
    196  3000 ????	       00 ea	   _EA	      =	$EA
    197  3000 ????
    198  3000 ????	       00 e8	   _E8	      =	$E8
    199  3000 ????
    200  3000 ????	       00 e6	   _E6	      =	$E6
    201  3000 ????
    202  3000 ????	       00 e4	   _E4	      =	$E4
    203  3000 ????
    204  3000 ????	       00 e2	   _E2	      =	$E2
    205  3000 ????
    206  3000 ????	       00 e0	   _E0	      =	$E0
    207  3000 ????
    208  3000 ????	       00 de	   _DE	      =	$DE
    209  3000 ????
    210  3000 ????	       00 dc	   _DC	      =	$DC
    211  3000 ????
    212  3000 ????	       00 da	   _DA	      =	$DA
    213  3000 ????
    214  3000 ????	       00 d8	   _D8	      =	$D8
    215  3000 ????
    216  3000 ????	       00 d6	   _D6	      =	$D6
    217  3000 ????
    218  3000 ????	       00 d4	   _D4	      =	$D4
    219  3000 ????
    220  3000 ????	       00 d2	   _D2	      =	$D2
    221  3000 ????
    222  3000 ????	       00 d0	   _D0	      =	$D0
    223  3000 ????
    224  3000 ????	       00 ce	   _CE	      =	$CE
    225  3000 ????
    226  3000 ????	       00 cc	   _CC	      =	$CC
    227  3000 ????
    228  3000 ????	       00 ca	   _CA	      =	$CA
    229  3000 ????
    230  3000 ????	       00 c8	   _C8	      =	$C8
    231  3000 ????
    232  3000 ????	       00 c6	   _C6	      =	$C6
    233  3000 ????
    234  3000 ????	       00 c4	   _C4	      =	$C4
    235  3000 ????
    236  3000 ????	       00 c2	   _C2	      =	$C2
    237  3000 ????
    238  3000 ????	       00 c0	   _C0	      =	$C0
    239  3000 ????
    240  3000 ????	       00 be	   _BE	      =	$BE
    241  3000 ????
    242  3000 ????	       00 bc	   _BC	      =	$BC
    243  3000 ????
    244  3000 ????	       00 ba	   _BA	      =	$BA
    245  3000 ????
    246  3000 ????	       00 b8	   _B8	      =	$B8
    247  3000 ????
    248  3000 ????	       00 b6	   _B6	      =	$B6
    249  3000 ????
    250  3000 ????	       00 b4	   _B4	      =	$B4
    251  3000 ????
    252  3000 ????	       00 b2	   _B2	      =	$B2
    253  3000 ????
    254  3000 ????	       00 b0	   _B0	      =	$B0
    255  3000 ????
    256  3000 ????	       00 ae	   _AE	      =	$AE
    257  3000 ????
    258  3000 ????	       00 ac	   _AC	      =	$AC
    259  3000 ????
    260  3000 ????	       00 aa	   _AA	      =	$AA
    261  3000 ????
    262  3000 ????	       00 a8	   _A8	      =	$A8
    263  3000 ????
    264  3000 ????	       00 a6	   _A6	      =	$A6
    265  3000 ????
    266  3000 ????	       00 a4	   _A4	      =	$A4
    267  3000 ????
    268  3000 ????	       00 a2	   _A2	      =	$A2
    269  3000 ????
    270  3000 ????	       00 a0	   _A0	      =	$A0
    271  3000 ????
    272  3000 ????	       00 9e	   _9E	      =	$9E
    273  3000 ????
    274  3000 ????	       00 9c	   _9C	      =	$9C
    275  3000 ????
    276  3000 ????	       00 9a	   _9A	      =	$9A
    277  3000 ????
    278  3000 ????	       00 98	   _98	      =	$98
    279  3000 ????
    280  3000 ????	       00 96	   _96	      =	$96
    281  3000 ????
    282  3000 ????	       00 94	   _94	      =	$94
    283  3000 ????
    284  3000 ????	       00 92	   _92	      =	$92
    285  3000 ????
    286  3000 ????	       00 90	   _90	      =	$90
    287  3000 ????
    288  3000 ????	       00 8e	   _8E	      =	$8E
    289  3000 ????
    290  3000 ????	       00 8c	   _8C	      =	$8C
    291  3000 ????
    292  3000 ????	       00 8a	   _8A	      =	$8A
    293  3000 ????
    294  3000 ????	       00 88	   _88	      =	$88
    295  3000 ????
    296  3000 ????	       00 86	   _86	      =	$86
    297  3000 ????
    298  3000 ????	       00 84	   _84	      =	$84
    299  3000 ????
    300  3000 ????	       00 82	   _82	      =	$82
    301  3000 ????
    302  3000 ????	       00 80	   _80	      =	$80
    303  3000 ????
    304  3000 ????	       00 7e	   _7E	      =	$7E
    305  3000 ????
    306  3000 ????	       00 7c	   _7C	      =	$7C
    307  3000 ????
    308  3000 ????	       00 7a	   _7A	      =	$7A
    309  3000 ????
    310  3000 ????	       00 78	   _78	      =	$78
    311  3000 ????
    312  3000 ????	       00 76	   _76	      =	$76
    313  3000 ????
    314  3000 ????	       00 74	   _74	      =	$74
    315  3000 ????
    316  3000 ????	       00 72	   _72	      =	$72
    317  3000 ????
    318  3000 ????	       00 70	   _70	      =	$70
    319  3000 ????
    320  3000 ????	       00 6e	   _6E	      =	$6E
    321  3000 ????
    322  3000 ????	       00 6c	   _6C	      =	$6C
    323  3000 ????
    324  3000 ????	       00 6a	   _6A	      =	$6A
    325  3000 ????
    326  3000 ????	       00 68	   _68	      =	$68
    327  3000 ????
    328  3000 ????	       00 66	   _66	      =	$66
    329  3000 ????
    330  3000 ????	       00 64	   _64	      =	$64
    331  3000 ????
    332  3000 ????	       00 62	   _62	      =	$62
    333  3000 ????
    334  3000 ????	       00 60	   _60	      =	$60
    335  3000 ????
    336  3000 ????	       00 5e	   _5E	      =	$5E
    337  3000 ????
    338  3000 ????	       00 5c	   _5C	      =	$5C
    339  3000 ????
    340  3000 ????	       00 5a	   _5A	      =	$5A
    341  3000 ????
    342  3000 ????	       00 58	   _58	      =	$58
    343  3000 ????
    344  3000 ????	       00 56	   _56	      =	$56
    345  3000 ????
    346  3000 ????	       00 54	   _54	      =	$54
    347  3000 ????
    348  3000 ????	       00 52	   _52	      =	$52
    349  3000 ????
    350  3000 ????	       00 50	   _50	      =	$50
    351  3000 ????
    352  3000 ????	       00 4e	   _4E	      =	$4E
    353  3000 ????
    354  3000 ????	       00 4c	   _4C	      =	$4C
    355  3000 ????
    356  3000 ????	       00 4a	   _4A	      =	$4A
    357  3000 ????
    358  3000 ????	       00 48	   _48	      =	$48
    359  3000 ????
    360  3000 ????	       00 46	   _46	      =	$46
    361  3000 ????
    362  3000 ????	       00 44	   _44	      =	$44
    363  3000 ????
    364  3000 ????	       00 42	   _42	      =	$42
    365  3000 ????
    366  3000 ????	       00 40	   _40	      =	$40
    367  3000 ????
    368  3000 ????	       00 3e	   _3E	      =	$3E
    369  3000 ????
    370  3000 ????	       00 3c	   _3C	      =	$3C
    371  3000 ????
    372  3000 ????	       00 3a	   _3A	      =	$3A
    373  3000 ????
    374  3000 ????	       00 38	   _38	      =	$38
    375  3000 ????
    376  3000 ????	       00 36	   _36	      =	$36
    377  3000 ????
    378  3000 ????	       00 34	   _34	      =	$34
    379  3000 ????
    380  3000 ????	       00 32	   _32	      =	$32
    381  3000 ????
    382  3000 ????	       00 30	   _30	      =	$30
    383  3000 ????
    384  3000 ????	       00 2e	   _2E	      =	$2E
    385  3000 ????
    386  3000 ????	       00 2c	   _2C	      =	$2C
    387  3000 ????
    388  3000 ????	       00 2a	   _2A	      =	$2A
    389  3000 ????
    390  3000 ????	       00 28	   _28	      =	$28
    391  3000 ????
    392  3000 ????	       00 26	   _26	      =	$26
    393  3000 ????
    394  3000 ????	       00 24	   _24	      =	$24
    395  3000 ????
    396  3000 ????	       00 22	   _22	      =	$22
    397  3000 ????
    398  3000 ????	       00 20	   _20	      =	$20
    399  3000 ????
    400  3000 ????	       00 1e	   _1E	      =	$1E
    401  3000 ????
    402  3000 ????	       00 1c	   _1C	      =	$1C
    403  3000 ????
    404  3000 ????	       00 1a	   _1A	      =	$1A
    405  3000 ????
    406  3000 ????	       00 18	   _18	      =	$18
    407  3000 ????
    408  3000 ????	       00 16	   _16	      =	$16
    409  3000 ????
    410  3000 ????	       00 14	   _14	      =	$14
    411  3000 ????
    412  3000 ????	       00 12	   _12	      =	$12
    413  3000 ????
    414  3000 ????	       00 10	   _10	      =	$10
    415  3000 ????
    416  3000 ????	       00 0e	   _0E	      =	$0E
    417  3000 ????
    418  3000 ????	       00 0c	   _0C	      =	$0C
    419  3000 ????
    420  3000 ????	       00 0a	   _0A	      =	$0A
    421  3000 ????
    422  3000 ????	       00 08	   _08	      =	$08
    423  3000 ????
    424  3000 ????	       00 06	   _06	      =	$06
    425  3000 ????
    426  3000 ????	       00 04	   _04	      =	$04
    427  3000 ????
    428  3000 ????	       00 02	   _02	      =	$02
    429  3000 ????
    430  3000 ????	       00 00	   _00	      =	$00
    431  3000 ????
    432  3000 ????	       00 09	   req_load_menu =	9
    433  3000 ????
    434  3000 ????	       00 08	   req_safe_point =	8
    435  3000 ????
    436  3000 ????	       00 07	   req_level_reset =	7
    437  3000 ????
    438  3000 ????	       00 06	   req_move_down =	6
    439  3000 ????
    440  3000 ????	       00 05	   req_move_right =	5
    441  3000 ????
    442  3000 ????	       00 04	   req_move_up =	4
    443  3000 ????
    444  3000 ????	       00 03	   req_move_left =	3
    445  3000 ????
    446  3000 ????	       00 02	   req_game_over =	2
    447  3000 ????
    448  3000 ????	       00 01	   req_level_up =	1
    449  3000 ????
    450  3000 ????	       00 00	   req_load   =	0
    451  3000 ????
    452  3000 ????	       00 06	   response_menu_size =	6
    453  3000 ????
    454  3000 ????	       00 1a	   response_size_minus_1 =	26
    455  3000 ????
    456  3000 ????	       00 08	   scback     =	#$08
    457  3000 ????
    458  3000 ????	       00 94	   _M_Edge_Right =	148
    459  3000 ????
    460  3000 ????	       00 0e	   _M_Edge_Left =	14
    461  3000 ????
    462  3000 ????	       00 58	   _M_Edge_Bottom =	88
    463  3000 ????
    464  3000 ????	       00 02	   _M_Edge_Top =	2
    465  3000 ????
    466  3000 ????	       00 4c	   player_max_y =	76
    467  3000 ????
    468  3000 ????	       00 02	   player_min_y =	2
    469  3000 ????
    470  3000 ????	       00 86	   player_max_x =	134
    471  3000 ????
    472  3000 ????	       00 0a	   player_min_x =	10
    473  3000 ????
    474  3000 ????	       00 01	   pfscore    =	1
    475  3000 ????
    476  3000 ????	       00 04	   pfres      =	4
    477  3000 ????
    478  3000 ????	       00 01	   superchip  =	1
    479  3000 ????	       00 01	   bs_mask    =	1
    480  3000 ????	       00 08	   bankswitch =	8
    481  3000 ????	       1f f8	   bankswitch_hotspot =	$1FF8
    482  3000 ????	       00 01	   PFcolors   =	1
    483  3000 ????	       00 01	   player1colors =	1
------- FILE 2600basic.h
      7  3000 ????
      8  3000 ????	       00 80	   player0x   =	$80
      9  3000 ????	       00 81	   player1x   =	$81
     10  3000 ????	       00 82	   missile0x  =	$82
     11  3000 ????	       00 83	   missile1x  =	$83
     12  3000 ????	       00 84	   ballx      =	$84
     13  3000 ????
     14  3000 ????	       00 85	   objecty    =	$85
     15  3000 ????	       00 85	   player0y   =	$85
     16  3000 ????	       00 86	   player1y   =	$86
     17  3000 ????	       00 87	   missile1height =	$87
     18  3000 ????	       00 88	   missile1y  =	$88
     19  3000 ????	       00 89	   bally      =	$89
     20  3000 ????
     21  3000 ????	       00 87	   player1color =	$87	; replaces missile 1
     22  3000 ????
     23  3000 ????	       00 8a	   player0pointer =	$8A	;uses $8A-$8B
     24  3000 ????	       00 8a	   player0pointerlo =	$8A
     25  3000 ????	       00 8b	   player0pointerhi =	$8B
     26  3000 ????	       00 8c	   player1pointer =	$8C	; $8C-$8D
     27  3000 ????	       00 8c	   player1pointerlo =	$8C
     28  3000 ????	       00 8d	   player1pointerhi =	$8D
     29  3000 ????
     30  3000 ????	       00 8e	   player0height =	$8E
     31  3000 ????	       00 8f	   player1height =	$8F
     32  3000 ????	       00 90	   missile0height =	$90
     33  3000 ????	       00 91	   missile0y  =	$91
     34  3000 ????	       00 92	   ballheight =	$92
     35  3000 ????
     36  3000 ????	       00 90	   currentpaddle =	$90	; replaces missile 0 (and can't be used with playercolor)
     37  3000 ????	       00 91	   paddle     =	$91	; replaces missile 0
     38  3000 ????	       00 82	   player0colorstore =	$82	; replaces missile 0
     39  3000 ????	       00 90	   player0color =	$90	; replaces missile 0
     40  3000 ????
     41  3000 ????	       00 93	   score      =	$93	; $93-$95
     42  3000 ????	       00 96	   scorepointers =	$96	; $96-$9B = 6 bytes
     43  3000 ????	       00 9c	   temp1      =	$9C	;used by kernel.  can be used in program too, but
     44  3000 ????	       00 9d	   temp2      =	$9D	;are obliterated when drawscreen is called.
     45  3000 ????	       00 9e	   temp3      =	$9E
     46  3000 ????	       00 9f	   temp4      =	$9F
     47  3000 ????	       00 a0	   temp5      =	$A0
     48  3000 ????	       00 a1	   temp6      =	$A1
     49  3000 ????
     50  3000 ????	       00 a2	   rand       =	$A2
     51  3000 ????	       00 a3	   scorecolor =	$A3
     52  3000 ????
     53  3000 ????	       00 a4	   var0       =	$A4
     54  3000 ????	       00 a5	   var1       =	$A5
     55  3000 ????	       00 a6	   var2       =	$A6
     56  3000 ????	       00 a7	   var3       =	$A7
     57  3000 ????	       00 a8	   var4       =	$A8
     58  3000 ????	       00 a9	   var5       =	$A9
     59  3000 ????	       00 aa	   var6       =	$AA
     60  3000 ????	       00 ab	   var7       =	$AB
     61  3000 ????	       00 ac	   var8       =	$AC
     62  3000 ????	       00 ad	   var9       =	$AD
     63  3000 ????	       00 ae	   var10      =	$AE
     64  3000 ????	       00 af	   var11      =	$AF
     65  3000 ????	       00 b0	   var12      =	$B0
     66  3000 ????	       00 b1	   var13      =	$B1
     67  3000 ????	       00 b2	   var14      =	$B2
     68  3000 ????	       00 b3	   var15      =	$B3
     69  3000 ????	       00 b4	   var16      =	$B4
     70  3000 ????	       00 b5	   var17      =	$B5
     71  3000 ????	       00 b6	   var18      =	$B6
     72  3000 ????	       00 b7	   var19      =	$B7
     73  3000 ????	       00 b8	   var20      =	$B8
     74  3000 ????	       00 b9	   var21      =	$B9
     75  3000 ????	       00 ba	   var22      =	$BA
     76  3000 ????	       00 bb	   var23      =	$BB
     77  3000 ????	       00 bc	   var24      =	$BC
     78  3000 ????	       00 bd	   var25      =	$BD
     79  3000 ????	       00 be	   var26      =	$BE
     80  3000 ????	       00 bf	   var27      =	$BF
     81  3000 ????	       00 c0	   var28      =	$C0
     82  3000 ????	       00 c1	   var29      =	$C1
     83  3000 ????	       00 c2	   var30      =	$C2
     84  3000 ????	       00 c3	   var31      =	$C3
     85  3000 ????	       00 c4	   var32      =	$C4
     86  3000 ????	       00 c5	   var33      =	$C5
     87  3000 ????	       00 c6	   var34      =	$C6
     88  3000 ????	       00 c7	   var35      =	$C7
     89  3000 ????	       00 c8	   var36      =	$C8
     90  3000 ????	       00 c9	   var37      =	$C9
     91  3000 ????	       00 ca	   var38      =	$CA
     92  3000 ????	       00 cb	   var39      =	$CB
     93  3000 ????	       00 cc	   var40      =	$CC
     94  3000 ????	       00 cd	   var41      =	$CD
     95  3000 ????	       00 ce	   var42      =	$CE
     96  3000 ????	       00 cf	   var43      =	$CF
     97  3000 ????	       00 d0	   var44      =	$D0
     98  3000 ????	       00 d1	   var45      =	$D1
     99  3000 ????	       00 d2	   var46      =	$D2
    100  3000 ????	       00 d3	   var47      =	$D3
    101  3000 ????
    102  3000 ????	       00 d4	   A	      =	$d4
    103  3000 ????	       00 d4	   a	      =	$d4
    104  3000 ????	       00 d5	   B	      =	$d5
    105  3000 ????	       00 d5	   b	      =	$d5
    106  3000 ????	       00 d6	   C	      =	$d6
    107  3000 ????	       00 d6	   c	      =	$d6
    108  3000 ????	       00 d7	   D	      =	$d7
    109  3000 ????	       00 d7	   d	      =	$d7
    110  3000 ????	       00 d8	   E	      =	$d8
    111  3000 ????	       00 d8	   e	      =	$d8
    112  3000 ????	       00 d9	   F	      =	$d9
    113  3000 ????	       00 d9	   f	      =	$d9
    114  3000 ????	       00 da	   G	      =	$da
    115  3000 ????	       00 da	   g	      =	$da
    116  3000 ????	       00 db	   H	      =	$db
    117  3000 ????	       00 db	   h	      =	$db
    118  3000 ????	       00 dc	   I	      =	$dc
    119  3000 ????	       00 dc	   i	      =	$dc
    120  3000 ????	       00 dd	   J	      =	$dd
    121  3000 ????	       00 dd	   j	      =	$dd
    122  3000 ????	       00 de	   K	      =	$de
    123  3000 ????	       00 de	   k	      =	$de
    124  3000 ????	       00 df	   L	      =	$df
    125  3000 ????	       00 df	   l	      =	$df
    126  3000 ????	       00 e0	   M	      =	$e0
    127  3000 ????	       00 e0	   m	      =	$e0
    128  3000 ????	       00 e1	   N	      =	$e1
    129  3000 ????	       00 e1	   n	      =	$e1
    130  3000 ????	       00 e2	   O	      =	$e2
    131  3000 ????	       00 e2	   o	      =	$e2
    132  3000 ????	       00 e3	   P	      =	$e3
    133  3000 ????	       00 e3	   p	      =	$e3
    134  3000 ????	       00 e4	   Q	      =	$e4
    135  3000 ????	       00 e4	   q	      =	$e4
    136  3000 ????	       00 e5	   R	      =	$e5
    137  3000 ????	       00 e5	   r	      =	$e5
    138  3000 ????	       00 e6	   S	      =	$e6
    139  3000 ????	       00 e6	   s	      =	$e6
    140  3000 ????	       00 e7	   T	      =	$e7
    141  3000 ????	       00 e7	   t	      =	$e7
    142  3000 ????	       00 e8	   U	      =	$e8
    143  3000 ????	       00 e8	   u	      =	$e8
    144  3000 ????	       00 e9	   V	      =	$e9
    145  3000 ????	       00 e9	   v	      =	$e9
    146  3000 ????	       00 ea	   W	      =	$ea
    147  3000 ????	       00 ea	   w	      =	$ea
    148  3000 ????	       00 eb	   X	      =	$eb
    149  3000 ????	       00 eb	   x	      =	$eb
    150  3000 ????	       00 ec	   Y	      =	$ec
    151  3000 ????	       00 ec	   y	      =	$ec
    152  3000 ????	       00 ed	   Z	      =	$ed
    153  3000 ????	       00 ed	   z	      =	$ed
    154  3000 ????
    155  3000 ????	       00 ee	   temp7      =	$ee	; This is used to aid in bankswitching
    156  3000 ????	       00 ef	   playfieldpos =	$ef
    157  3000 ????
    158  3000 ????						; available for other uses, or if unused, provide more stack space
    159  3000 ????
    160  3000 ????	       00 f0	   aux1       =	$f0
    161  3000 ????	       00 f1	   aux2       =	$f1
    162  3000 ????	       00 f2	   aux3       =	$f2
    163  3000 ????	       00 f3	   aux4       =	$f3
    164  3000 ????	       00 f4	   aux5       =	$f4
    165  3000 ????	       00 f5	   aux6       =	$f5
    166  3000 ????
    167  3000 ????						; playfield color/height pointers
    168  3000 ????	       00 f0	   pfcolortable =	$f0	; and $d5
    169  3000 ????	       00 f0	   pfheighttable =	$f0	; and $d5
    170  3000 ????						; the above pointers are the same because if color and height are both used together,
    171  3000 ????						; they must used absolute indexed and cannot use pointers
    172  3000 ????
    173  3000 ????	       00 f2	   lifepointer =	$f2	; pointer to "lives" shape
    174  3000 ????						; upper 3 bits of $f2 contain the number of lives
    175  3000 ????	       00 f4	   lifecolor  =	$f4
    176  3000 ????	       00 f3	   lives      =	$f3	; # lives >> 5
    177  3000 ????	       00 f5	   statusbarlength =	$f5	; only uses upper 5 bits; other bits free
    178  3000 ????
    179  3000 ????	       00 f2	   pfscore1   =	$f2	; optional playfield bytes in score
    180  3000 ????	       00 f3	   pfscore2   =	$f3
    181  3000 ????	       00 f4	   pfscorecolor =	$f4
    182  3000 ????
    183  3000 ????	       00 f6	   stack1     =	$f6
    184  3000 ????	       00 f7	   stack2     =	$f7
    185  3000 ????	       00 f8	   stack3     =	$f8
    186  3000 ????	       00 f9	   stack4     =	$f9
    187  3000 ????						; the stack bytes above may be used in the kernel
    188  3000 ????						; stack = F6-F7, F8-F9, FA-FB, FC-FD, FE-FF
    189  3000 ????
    190  3000 ????				      MAC	return
    191  3000 ????				      ifnconst	bankswitch
    192  3000 ????				      rts
    193  3000 ????				      else
    194  3000 ????				      jmp	BS_return
    195  3000 ????				      endif
    196  3000 ????				      ENDM		; auto-return from either a regular or bankswitched module
    197  3000 ????
    198  3000 ????				      ifconst	superchip
    199  3000 ????	       10 d0	   playfieldbase =	$10D0
------- FILE superchip.h LEVEL 3 PASS 3
      0  3000 ????				      include	superchip.h
      1  3000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  3000 ????
      3  3000 ????	       f0 00	   write_RAM  =	$F000
      4  3000 ????	       f0 00	   wRAM       =	$F000
      5  3000 ????	       f0 00	   w000       =	$F000
      6  3000 ????	       f0 01	   w001       =	$F001
      7  3000 ????	       f0 02	   w002       =	$F002
      8  3000 ????	       f0 03	   w003       =	$F003
      9  3000 ????	       f0 04	   w004       =	$F004
     10  3000 ????	       f0 05	   w005       =	$F005
     11  3000 ????	       f0 06	   w006       =	$F006
     12  3000 ????	       f0 07	   w007       =	$F007
     13  3000 ????	       f0 08	   w008       =	$F008
     14  3000 ????	       f0 09	   w009       =	$F009
     15  3000 ????	       f0 0a	   w010       =	$F00A
     16  3000 ????	       f0 0b	   w011       =	$F00B
     17  3000 ????	       f0 0c	   w012       =	$F00C
     18  3000 ????	       f0 0d	   w013       =	$F00D
     19  3000 ????	       f0 0e	   w014       =	$F00E
     20  3000 ????	       f0 0f	   w015       =	$F00F
     21  3000 ????	       f0 10	   w016       =	$F010
     22  3000 ????	       f0 11	   w017       =	$F011
     23  3000 ????	       f0 12	   w018       =	$F012
     24  3000 ????	       f0 13	   w019       =	$F013
     25  3000 ????	       f0 14	   w020       =	$F014
     26  3000 ????	       f0 15	   w021       =	$F015
     27  3000 ????	       f0 16	   w022       =	$F016
     28  3000 ????	       f0 17	   w023       =	$F017
     29  3000 ????	       f0 18	   w024       =	$F018
     30  3000 ????	       f0 19	   w025       =	$F019
     31  3000 ????	       f0 1a	   w026       =	$F01A
     32  3000 ????	       f0 1b	   w027       =	$F01B
     33  3000 ????	       f0 1c	   w028       =	$F01C
     34  3000 ????	       f0 1d	   w029       =	$F01D
     35  3000 ????	       f0 1e	   w030       =	$F01E
     36  3000 ????	       f0 1f	   w031       =	$F01F
     37  3000 ????	       f0 20	   w032       =	$F020
     38  3000 ????	       f0 21	   w033       =	$F021
     39  3000 ????	       f0 22	   w034       =	$F022
     40  3000 ????	       f0 23	   w035       =	$F023
     41  3000 ????	       f0 24	   w036       =	$F024
     42  3000 ????	       f0 25	   w037       =	$F025
     43  3000 ????	       f0 26	   w038       =	$F026
     44  3000 ????	       f0 27	   w039       =	$F027
     45  3000 ????	       f0 28	   w040       =	$F028
     46  3000 ????	       f0 29	   w041       =	$F029
     47  3000 ????	       f0 2a	   w042       =	$F02A
     48  3000 ????	       f0 2b	   w043       =	$F02B
     49  3000 ????	       f0 2c	   w044       =	$F02C
     50  3000 ????	       f0 2d	   w045       =	$F02D
     51  3000 ????	       f0 2e	   w046       =	$F02E
     52  3000 ????	       f0 2f	   w047       =	$F02F
     53  3000 ????	       f0 30	   w048       =	$F030
     54  3000 ????	       f0 31	   w049       =	$F031
     55  3000 ????	       f0 32	   w050       =	$F032
     56  3000 ????	       f0 33	   w051       =	$F033
     57  3000 ????	       f0 34	   w052       =	$F034
     58  3000 ????	       f0 35	   w053       =	$F035
     59  3000 ????	       f0 36	   w054       =	$F036
     60  3000 ????	       f0 37	   w055       =	$F037
     61  3000 ????	       f0 38	   w056       =	$F038
     62  3000 ????	       f0 39	   w057       =	$F039
     63  3000 ????	       f0 3a	   w058       =	$F03A
     64  3000 ????	       f0 3b	   w059       =	$F03B
     65  3000 ????	       f0 3c	   w060       =	$F03C
     66  3000 ????	       f0 3d	   w061       =	$F03D
     67  3000 ????	       f0 3e	   w062       =	$F03E
     68  3000 ????	       f0 3f	   w063       =	$F03F
     69  3000 ????	       f0 40	   w064       =	$F040
     70  3000 ????	       f0 41	   w065       =	$F041
     71  3000 ????	       f0 42	   w066       =	$F042
     72  3000 ????	       f0 43	   w067       =	$F043
     73  3000 ????	       f0 44	   w068       =	$F044
     74  3000 ????	       f0 45	   w069       =	$F045
     75  3000 ????	       f0 46	   w070       =	$F046
     76  3000 ????	       f0 47	   w071       =	$F047
     77  3000 ????	       f0 48	   w072       =	$F048
     78  3000 ????	       f0 49	   w073       =	$F049
     79  3000 ????	       f0 4a	   w074       =	$F04A
     80  3000 ????	       f0 4b	   w075       =	$F04B
     81  3000 ????	       f0 4c	   w076       =	$F04C
     82  3000 ????	       f0 4d	   w077       =	$F04D
     83  3000 ????	       f0 4e	   w078       =	$F04E
     84  3000 ????	       f0 4f	   w079       =	$F04F
     85  3000 ????	       f0 50	   w080       =	$F050
     86  3000 ????	       f0 51	   w081       =	$F051
     87  3000 ????	       f0 52	   w082       =	$F052
     88  3000 ????	       f0 53	   w083       =	$F053
     89  3000 ????	       f0 54	   w084       =	$F054
     90  3000 ????	       f0 55	   w085       =	$F055
     91  3000 ????	       f0 56	   w086       =	$F056
     92  3000 ????	       f0 57	   w087       =	$F057
     93  3000 ????	       f0 58	   w088       =	$F058
     94  3000 ????	       f0 59	   w089       =	$F059
     95  3000 ????	       f0 5a	   w090       =	$F05A
     96  3000 ????	       f0 5b	   w091       =	$F05B
     97  3000 ????	       f0 5c	   w092       =	$F05C
     98  3000 ????	       f0 5d	   w093       =	$F05D
     99  3000 ????	       f0 5e	   w094       =	$F05E
    100  3000 ????	       f0 5f	   w095       =	$F05F
    101  3000 ????	       f0 60	   w096       =	$F060
    102  3000 ????	       f0 61	   w097       =	$F061
    103  3000 ????	       f0 62	   w098       =	$F062
    104  3000 ????	       f0 63	   w099       =	$F063
    105  3000 ????	       f0 64	   w100       =	$F064
    106  3000 ????	       f0 65	   w101       =	$F065
    107  3000 ????	       f0 66	   w102       =	$F066
    108  3000 ????	       f0 67	   w103       =	$F067
    109  3000 ????	       f0 68	   w104       =	$F068
    110  3000 ????	       f0 69	   w105       =	$F069
    111  3000 ????	       f0 6a	   w106       =	$F06A
    112  3000 ????	       f0 6b	   w107       =	$F06B
    113  3000 ????	       f0 6c	   w108       =	$F06C
    114  3000 ????	       f0 6d	   w109       =	$F06D
    115  3000 ????	       f0 6e	   w110       =	$F06E
    116  3000 ????	       f0 6f	   w111       =	$F06F
    117  3000 ????	       f0 70	   w112       =	$F070
    118  3000 ????	       f0 71	   w113       =	$F071
    119  3000 ????	       f0 72	   w114       =	$F072
    120  3000 ????	       f0 73	   w115       =	$F073
    121  3000 ????	       f0 74	   w116       =	$F074
    122  3000 ????	       f0 75	   w117       =	$F075
    123  3000 ????	       f0 76	   w118       =	$F076
    124  3000 ????	       f0 77	   w119       =	$F077
    125  3000 ????	       f0 78	   w120       =	$F078
    126  3000 ????	       f0 79	   w121       =	$F079
    127  3000 ????	       f0 7a	   w122       =	$F07A
    128  3000 ????	       f0 7b	   w123       =	$F07B
    129  3000 ????	       f0 7c	   w124       =	$F07C
    130  3000 ????	       f0 7d	   w125       =	$F07D
    131  3000 ????	       f0 7e	   w126       =	$F07E
    132  3000 ????	       f0 7f	   w127       =	$F07F
    133  3000 ????
    134  3000 ????	       f0 80	   read_RAM   =	$F080
    135  3000 ????	       f0 80	   rRAM       =	$F080
    136  3000 ????	       f0 80	   r000       =	$F080
    137  3000 ????	       f0 81	   r001       =	$F081
    138  3000 ????	       f0 82	   r002       =	$F082
    139  3000 ????	       f0 83	   r003       =	$F083
    140  3000 ????	       f0 84	   r004       =	$F084
    141  3000 ????	       f0 85	   r005       =	$F085
    142  3000 ????	       f0 86	   r006       =	$F086
    143  3000 ????	       f0 87	   r007       =	$F087
    144  3000 ????	       f0 88	   r008       =	$F088
    145  3000 ????	       f0 89	   r009       =	$F089
    146  3000 ????	       f0 8a	   r010       =	$F08A
    147  3000 ????	       f0 8b	   r011       =	$F08B
    148  3000 ????	       f0 8c	   r012       =	$F08C
    149  3000 ????	       f0 8d	   r013       =	$F08D
    150  3000 ????	       f0 8e	   r014       =	$F08E
    151  3000 ????	       f0 8f	   r015       =	$F08F
    152  3000 ????	       f0 90	   r016       =	$F090
    153  3000 ????	       f0 91	   r017       =	$F091
    154  3000 ????	       f0 92	   r018       =	$F092
    155  3000 ????	       f0 93	   r019       =	$F093
    156  3000 ????	       f0 94	   r020       =	$F094
    157  3000 ????	       f0 95	   r021       =	$F095
    158  3000 ????	       f0 96	   r022       =	$F096
    159  3000 ????	       f0 97	   r023       =	$F097
    160  3000 ????	       f0 98	   r024       =	$F098
    161  3000 ????	       f0 99	   r025       =	$F099
    162  3000 ????	       f0 9a	   r026       =	$F09A
    163  3000 ????	       f0 9b	   r027       =	$F09B
    164  3000 ????	       f0 9c	   r028       =	$F09C
    165  3000 ????	       f0 9d	   r029       =	$F09D
    166  3000 ????	       f0 9e	   r030       =	$F09E
    167  3000 ????	       f0 9f	   r031       =	$F09F
    168  3000 ????	       f0 a0	   r032       =	$F0A0
    169  3000 ????	       f0 a1	   r033       =	$F0A1
    170  3000 ????	       f0 a2	   r034       =	$F0A2
    171  3000 ????	       f0 a3	   r035       =	$F0A3
    172  3000 ????	       f0 a4	   r036       =	$F0A4
    173  3000 ????	       f0 a5	   r037       =	$F0A5
    174  3000 ????	       f0 a6	   r038       =	$F0A6
    175  3000 ????	       f0 a7	   r039       =	$F0A7
    176  3000 ????	       f0 a8	   r040       =	$F0A8
    177  3000 ????	       f0 a9	   r041       =	$F0A9
    178  3000 ????	       f0 aa	   r042       =	$F0AA
    179  3000 ????	       f0 ab	   r043       =	$F0AB
    180  3000 ????	       f0 ac	   r044       =	$F0AC
    181  3000 ????	       f0 ad	   r045       =	$F0AD
    182  3000 ????	       f0 ae	   r046       =	$F0AE
    183  3000 ????	       f0 af	   r047       =	$F0AF
    184  3000 ????	       f0 b0	   r048       =	$F0B0
    185  3000 ????	       f0 b1	   r049       =	$F0B1
    186  3000 ????	       f0 b2	   r050       =	$F0B2
    187  3000 ????	       f0 b3	   r051       =	$F0B3
    188  3000 ????	       f0 b4	   r052       =	$F0B4
    189  3000 ????	       f0 b5	   r053       =	$F0B5
    190  3000 ????	       f0 b6	   r054       =	$F0B6
    191  3000 ????	       f0 b7	   r055       =	$F0B7
    192  3000 ????	       f0 b8	   r056       =	$F0B8
    193  3000 ????	       f0 b9	   r057       =	$F0B9
    194  3000 ????	       f0 ba	   r058       =	$F0BA
    195  3000 ????	       f0 bb	   r059       =	$F0BB
    196  3000 ????	       f0 bc	   r060       =	$F0BC
    197  3000 ????	       f0 bd	   r061       =	$F0BD
    198  3000 ????	       f0 be	   r062       =	$F0BE
    199  3000 ????	       f0 bf	   r063       =	$F0BF
    200  3000 ????	       f0 c0	   r064       =	$F0C0
    201  3000 ????	       f0 c1	   r065       =	$F0C1
    202  3000 ????	       f0 c2	   r066       =	$F0C2
    203  3000 ????	       f0 c3	   r067       =	$F0C3
    204  3000 ????	       f0 c4	   r068       =	$F0C4
    205  3000 ????	       f0 c5	   r069       =	$F0C5
    206  3000 ????	       f0 c6	   r070       =	$F0C6
    207  3000 ????	       f0 c7	   r071       =	$F0C7
    208  3000 ????	       f0 c8	   r072       =	$F0C8
    209  3000 ????	       f0 c9	   r073       =	$F0C9
    210  3000 ????	       f0 ca	   r074       =	$F0CA
    211  3000 ????	       f0 cb	   r075       =	$F0CB
    212  3000 ????	       f0 cc	   r076       =	$F0CC
    213  3000 ????	       f0 cd	   r077       =	$F0CD
    214  3000 ????	       f0 ce	   r078       =	$F0CE
    215  3000 ????	       f0 cf	   r079       =	$F0CF
    216  3000 ????	       f0 d0	   r080       =	$F0D0
    217  3000 ????	       f0 d1	   r081       =	$F0D1
    218  3000 ????	       f0 d2	   r082       =	$F0D2
    219  3000 ????	       f0 d3	   r083       =	$F0D3
    220  3000 ????	       f0 d4	   r084       =	$F0D4
    221  3000 ????	       f0 d5	   r085       =	$F0D5
    222  3000 ????	       f0 d6	   r086       =	$F0D6
    223  3000 ????	       f0 d7	   r087       =	$F0D7
    224  3000 ????	       f0 d8	   r088       =	$F0D8
    225  3000 ????	       f0 d9	   r089       =	$F0D9
    226  3000 ????	       f0 da	   r090       =	$F0DA
    227  3000 ????	       f0 db	   r091       =	$F0DB
    228  3000 ????	       f0 dc	   r092       =	$F0DC
    229  3000 ????	       f0 dd	   r093       =	$F0DD
    230  3000 ????	       f0 de	   r094       =	$F0DE
    231  3000 ????	       f0 df	   r095       =	$F0DF
    232  3000 ????	       f0 e0	   r096       =	$F0E0
    233  3000 ????	       f0 e1	   r097       =	$F0E1
    234  3000 ????	       f0 e2	   r098       =	$F0E2
    235  3000 ????	       f0 e3	   r099       =	$F0E3
    236  3000 ????	       f0 e4	   r100       =	$F0E4
    237  3000 ????	       f0 e5	   r101       =	$F0E5
    238  3000 ????	       f0 e6	   r102       =	$F0E6
    239  3000 ????	       f0 e7	   r103       =	$F0E7
    240  3000 ????	       f0 e8	   r104       =	$F0E8
    241  3000 ????	       f0 e9	   r105       =	$F0E9
    242  3000 ????	       f0 ea	   r106       =	$F0EA
    243  3000 ????	       f0 eb	   r107       =	$F0EB
    244  3000 ????	       f0 ec	   r108       =	$F0EC
    245  3000 ????	       f0 ed	   r109       =	$F0ED
    246  3000 ????	       f0 ee	   r110       =	$F0EE
    247  3000 ????	       f0 ef	   r111       =	$F0EF
    248  3000 ????	       f0 f0	   r112       =	$F0F0
    249  3000 ????	       f0 f1	   r113       =	$F0F1
    250  3000 ????	       f0 f2	   r114       =	$F0F2
    251  3000 ????	       f0 f3	   r115       =	$F0F3
    252  3000 ????	       f0 f4	   r116       =	$F0F4
    253  3000 ????	       f0 f5	   r117       =	$F0F5
    254  3000 ????	       f0 f6	   r118       =	$F0F6
    255  3000 ????	       f0 f7	   r119       =	$F0F7
    256  3000 ????	       f0 f8	   r120       =	$F0F8
    257  3000 ????	       f0 f9	   r121       =	$F0F9
    258  3000 ????	       f0 fa	   r122       =	$F0FA
    259  3000 ????	       f0 fb	   r123       =	$F0FB
    260  3000 ????	       f0 fc	   r124       =	$F0FC
    261  3000 ????	       f0 fd	   r125       =	$F0FD
    262  3000 ????	       f0 fe	   r126       =	$F0FE
    263  3000 ????	       f0 ff	   r127       =	$F0FF
------- FILE 2600basic.h
    201  3000 ????			  -	      else
    202  3000 ????			  -playfieldbase =	$A4
    203  3000 ????				      endif
    204  3000 ????
    205  3000 ????				      ifnconst	pfhalfwidth
    206  3000 ????	       00 04	   pfwidth    =	4
    207  3000 ????	       00 0e	   PF1L       =	PF1
    208  3000 ????	       00 0f	   PF2L       =	PF2
    209  3000 ????	       00 0e	   PF1R       =	PF1
    210  3000 ????	       00 0f	   PF2R       =	PF2
    211  3000 ????	       00 00	   pfadjust   =	0
    212  3000 ????			  -	      else
    213  3000 ????			  -pfwidth    =	2
    214  3000 ????			  -	      ifconst	pfcenter
    215  3000 ????			  -PF1L       =	$3F	; no effect
    216  3000 ????			  -PF2L       =	PF2
    217  3000 ????			  -PF1R       =	$3F
    218  3000 ????			  -PF2R       =	PF2	; no effect
    219  3000 ????			  -pfadjust   =	1
    220  3000 ????			  -	      else
    221  3000 ????			  -PF1L       =	PF1
    222  3000 ????			  -PF2L       =	PF2
    223  3000 ????			  -PF1R       =	$3F	; no effect
    224  3000 ????			  -PF2R       =	$3F	; no effect
    225  3000 ????			  -pfadjust   =	0
    226  3000 ????			  -	      endif
    227  3000 ????				      endif
    228  3000 ????
    229  3000 ????						; define playfield start based on height
    230  3000 ????			  -	      ifnconst	pfres
    231  3000 ????			  -playfield  =	playfieldbase
    232  3000 ????				      else
    233  3000 ????	       10 f0	   playfield  =	playfieldbase-(pfres-12*(4/pfwidth))*pfwidth
    234  3000 ????				      endif
------- FILE d:\Firmaplus\Firmaplus_intern\Atari\PlusROM\Projekte-batariBasic\CaveApocalypse\C.A.V.E. Apocalypse.bas.asm
------- FILE 2600basic_variable_redefs.h LEVEL 2 PASS 3
      0  3000 ????				      include	"2600basic_variable_redefs.h"
      1  3000 ????						; This file contains variable mapping and other information for the current project.
      2  3000 ????
      3  3000 ????	       00 23	   bscode_length =	35
      4  3000 ????	       00 1d	   _SD_Touch_Enemy_length =	.skipL0529-_SD_Touch_Enemy
      5  3000 ????
      6  3000 ????	       00 21	   _SD_Shoot_Enemy_length =	.skipL0528-_SD_Shoot_Enemy
      7  3000 ????
      8  3000 ????	       00 45	   _SD_Shoot_Miss_length =	.skipL0527-_SD_Shoot_Miss
      9  3000 ????
     10  3000 ????	       00 35	   _SD_Shot_Wall_length =	.skipL0526-_SD_Shot_Wall
     11  3000 ????
     12  3000 ????	       f0 6f	   w_extra_wall_startpos_y =	w111
     13  3000 ????
     14  3000 ????	       f0 ef	   r_extra_wall_startpos_y =	r111
     15  3000 ????
     16  3000 ????	       f0 6e	   w_extra_wall_startpos_x =	w110
     17  3000 ????
     18  3000 ????	       f0 ee	   r_extra_wall_startpos_x =	r110
     19  3000 ????
     20  3000 ????	       f0 6d	   w_extra_wall_height =	w109
     21  3000 ????
     22  3000 ????	       f0 ed	   r_extra_wall_height =	r109
     23  3000 ????
     24  3000 ????	       f0 6c	   w_extra_wall_width =	w108
     25  3000 ????
     26  3000 ????	       f0 ec	   r_extra_wall_width =	r108
     27  3000 ????
     28  3000 ????	       f0 6b	   w_extra_wall_type_and_range =	w107
     29  3000 ????
     30  3000 ????	       f0 eb	   r_extra_wall_type_and_range =	r107
     31  3000 ????
     32  3000 ????	       f0 6a	   w_roommate_startpos_y =	w106
     33  3000 ????
     34  3000 ????	       f0 ea	   r_roommate_startpos_y =	r106
     35  3000 ????
     36  3000 ????	       f0 69	   w_roommate_startpos_x =	w105
     37  3000 ????
     38  3000 ????	       f0 e9	   r_roommate_startpos_x =	r105
     39  3000 ????
     40  3000 ????	       f0 68	   w_roommate_type_and_range =	w104
     41  3000 ????
     42  3000 ????	       f0 e8	   r_roommate_type_and_range =	r104
     43  3000 ????
     44  3000 ????	       f0 67	   w_room_color_bottom =	w103
     45  3000 ????
     46  3000 ????	       f0 e7	   r_room_color_bottom =	r103
     47  3000 ????
     48  3000 ????	       f0 63	   w_room_color_middle =	w099
     49  3000 ????
     50  3000 ????	       f0 e3	   r_room_color_middle =	r099
     51  3000 ????
     52  3000 ????	       f0 62	   w_room_color_top =	w098
     53  3000 ????
     54  3000 ????	       f0 e2	   r_room_color_top =	r098
     55  3000 ????
     56  3000 ????	       f0 e1	   r_Bit0_room_type_top =	r097
     57  3000 ????
     58  3000 ????	       f0 e1	   w_BitOp_room_type =	r097
     59  3000 ????
     60  3000 ????	       f0 e1	   r_BitOp_room_type =	r097
     61  3000 ????
     62  3000 ????	       f0 61	   w_room_definition_start =	w097
     63  3000 ????
     64  3000 ????	       00 af	   ball_shoot_y =	var11
     65  3000 ????
     66  3000 ????	       00 ae	   ball_shoot_x =	var10
     67  3000 ????
     68  3000 ????	       00 ad	   has_private_levels =	var9
     69  3000 ????
     70  3000 ????	       00 ac	   max_priv_level_bcd3 =	var8
     71  3000 ????
     72  3000 ????	       00 ab	   max_priv_level_bcd2 =	var7
     73  3000 ????
     74  3000 ????	       00 aa	   max_priv_level_bcd1 =	var6
     75  3000 ????
     76  3000 ????	       00 a9	   max_pub_level_bcd3 =	var5
     77  3000 ????
     78  3000 ????	       00 a8	   max_pub_level_bcd2 =	var4
     79  3000 ????
     80  3000 ????	       00 a7	   max_pub_level_bcd1 =	var3
     81  3000 ????
     82  3000 ????	       00 a6	   gamenumber =	var2
     83  3000 ????
     84  3000 ????	       00 a5	   new_room_player1x =	var1
     85  3000 ????
     86  3000 ????	       00 a4	   new_room_player1y =	var0
     87  3000 ????
     88  3000 ????	       00 ec	   _Bit7_M0_Moving =	y
     89  3000 ????
     90  3000 ????	       00 ec	   _Bit6_Flip_P1 =	y
     91  3000 ????
     92  3000 ????	       00 ec	   _Bit5_Request_Pending =	y
     93  3000 ????
     94  3000 ????	       00 ec	   _Bit4_Game_Over =	y
     95  3000 ????
     96  3000 ????	       00 ec	   _Bit3_Ball_Shot_Moving =	y
     97  3000 ????
     98  3000 ????	       00 ec	   _Bit2_Level_finished =	y
     99  3000 ????
    100  3000 ????	       00 ec	   _Bit1_Wall_Dir =	y
    101  3000 ????
    102  3000 ????	       00 ec	   _Bit0_roommate_Dir =	y
    103  3000 ????
    104  3000 ????	       00 ec	   _Bit_Game_State =	y
    105  3000 ????
    106  3000 ????	       00 86	   P1y_position =	player1y
    107  3000 ????	       00 e9	   P1y_velocity =	v
    108  3000 ????	       00 91	   M0y_position =	missile0y
    109  3000 ????	       00 e6	   M0y_velocity =	s
    110  3000 ????	       00 af	   Bally_position =	ball_shoot_y
    111  3000 ????	       00 e3	   Bally_velocity =	p
    112  3000 ????	       00 e1	   Safe_Point_P1_y =	n
    113  3000 ????
    114  3000 ????	       00 e0	   Safe_Point_P1_x =	m
    115  3000 ????
    116  3000 ????	       00 df	   _Bit2_New_Room_Flip_P1 =	l
    117  3000 ????
    118  3000 ????	       00 df	   _Bit1_Safe_Point_P1_Flip =	l
    119  3000 ????
    120  3000 ????	       00 df	   _Bit0_Safe_Point_reached =	l
    121  3000 ????
    122  3000 ????	       00 df	   _BitOp_Safe_Point_New_Room =	l
    123  3000 ????
    124  3000 ????	       00 de	   roommate_type =	k
    125  3000 ????
    126  3000 ????	       00 dd	   roommate_move_x =	j
    127  3000 ????
    128  3000 ????	       00 dc	   extra_wall_move_x =	i
    129  3000 ????
    130  3000 ????	       00 db	   _Ch0_Counter =	h
    131  3000 ????
    132  3000 ????	       00 da	   _Ch0_Duration =	g
    133  3000 ????
    134  3000 ????	       00 d9	   _Ch0_Sound =	f
    135  3000 ????
    136  3000 ????	       00 d8	   _Bit3_P1_Dir_Right =	e
    137  3000 ????
    138  3000 ????	       00 d8	   _Bit2_P1_Dir_Left =	e
    139  3000 ????
    140  3000 ????	       00 d8	   _Bit1_P1_Dir_Down =	e
    141  3000 ????
    142  3000 ????	       00 d8	   _Bit0_P1_Dir_Up =	e
    143  3000 ????
    144  3000 ????	       00 d8	   _BitOp_P1_Dir =	e
    145  3000 ????
    146  3000 ????	       00 d7	   _Bit3_M0_Dir_Right =	d
    147  3000 ????
    148  3000 ????	       00 d7	   _Bit2_M0_Dir_Left =	d
    149  3000 ????
    150  3000 ????	       00 d7	   _Bit1_M0_Dir_Down =	d
    151  3000 ????
    152  3000 ????	       00 d7	   _Bit0_M0_Dir_Up =	d
    153  3000 ????
    154  3000 ????	       00 d7	   _BitOp_M0_Dir =	d
    155  3000 ????
    156  3000 ????	       00 d6	   _Bit3_Ball_Shot_Dir_Right2 =	c
    157  3000 ????
    158  3000 ????	       00 d6	   _Bit2_Ball_Shot_Dir_Right1 =	c
    159  3000 ????
    160  3000 ????	       00 d6	   _Bit1_Ball_Shot_Dir_Left2 =	c
    161  3000 ????
    162  3000 ????	       00 d6	   _Bit0_Ball_Shot_Dir_Left1 =	c
    163  3000 ????
    164  3000 ????	       00 d6	   _BitOp_Ball_Shot_Dir =	c
    165  3000 ????
    166  3000 ????	       00 d5	   frame_counter =	b
    167  3000 ????
    168  3000 ????	       00 d4	   delay_counter =	a
    169  3000 ????
    170  3000 ????	       00 95	   _sc3       =	score + 2
    171  3000 ????
    172  3000 ????	       00 94	   _sc2       =	score + 1
    173  3000 ????
    174  3000 ????	       00 93	   _sc1       =	score
    175  3000 ????
    176  3000 ????	       00 fe	   _FE	      =	$FE
    177  3000 ????
    178  3000 ????	       00 fc	   _FC	      =	$FC
    179  3000 ????
    180  3000 ????	       00 fa	   _FA	      =	$FA
    181  3000 ????
    182  3000 ????	       00 f8	   _F8	      =	$F8
    183  3000 ????
    184  3000 ????	       00 f6	   _F6	      =	$F6
    185  3000 ????
    186  3000 ????	       00 f4	   _F4	      =	$F4
    187  3000 ????
    188  3000 ????	       00 f2	   _F2	      =	$F2
    189  3000 ????
    190  3000 ????	       00 f0	   _F0	      =	$F0
    191  3000 ????
    192  3000 ????	       00 ee	   _EE	      =	$EE
    193  3000 ????
    194  3000 ????	       00 ec	   _EC	      =	$EC
    195  3000 ????
    196  3000 ????	       00 ea	   _EA	      =	$EA
    197  3000 ????
    198  3000 ????	       00 e8	   _E8	      =	$E8
    199  3000 ????
    200  3000 ????	       00 e6	   _E6	      =	$E6
    201  3000 ????
    202  3000 ????	       00 e4	   _E4	      =	$E4
    203  3000 ????
    204  3000 ????	       00 e2	   _E2	      =	$E2
    205  3000 ????
    206  3000 ????	       00 e0	   _E0	      =	$E0
    207  3000 ????
    208  3000 ????	       00 de	   _DE	      =	$DE
    209  3000 ????
    210  3000 ????	       00 dc	   _DC	      =	$DC
    211  3000 ????
    212  3000 ????	       00 da	   _DA	      =	$DA
    213  3000 ????
    214  3000 ????	       00 d8	   _D8	      =	$D8
    215  3000 ????
    216  3000 ????	       00 d6	   _D6	      =	$D6
    217  3000 ????
    218  3000 ????	       00 d4	   _D4	      =	$D4
    219  3000 ????
    220  3000 ????	       00 d2	   _D2	      =	$D2
    221  3000 ????
    222  3000 ????	       00 d0	   _D0	      =	$D0
    223  3000 ????
    224  3000 ????	       00 ce	   _CE	      =	$CE
    225  3000 ????
    226  3000 ????	       00 cc	   _CC	      =	$CC
    227  3000 ????
    228  3000 ????	       00 ca	   _CA	      =	$CA
    229  3000 ????
    230  3000 ????	       00 c8	   _C8	      =	$C8
    231  3000 ????
    232  3000 ????	       00 c6	   _C6	      =	$C6
    233  3000 ????
    234  3000 ????	       00 c4	   _C4	      =	$C4
    235  3000 ????
    236  3000 ????	       00 c2	   _C2	      =	$C2
    237  3000 ????
    238  3000 ????	       00 c0	   _C0	      =	$C0
    239  3000 ????
    240  3000 ????	       00 be	   _BE	      =	$BE
    241  3000 ????
    242  3000 ????	       00 bc	   _BC	      =	$BC
    243  3000 ????
    244  3000 ????	       00 ba	   _BA	      =	$BA
    245  3000 ????
    246  3000 ????	       00 b8	   _B8	      =	$B8
    247  3000 ????
    248  3000 ????	       00 b6	   _B6	      =	$B6
    249  3000 ????
    250  3000 ????	       00 b4	   _B4	      =	$B4
    251  3000 ????
    252  3000 ????	       00 b2	   _B2	      =	$B2
    253  3000 ????
    254  3000 ????	       00 b0	   _B0	      =	$B0
    255  3000 ????
    256  3000 ????	       00 ae	   _AE	      =	$AE
    257  3000 ????
    258  3000 ????	       00 ac	   _AC	      =	$AC
    259  3000 ????
    260  3000 ????	       00 aa	   _AA	      =	$AA
    261  3000 ????
    262  3000 ????	       00 a8	   _A8	      =	$A8
    263  3000 ????
    264  3000 ????	       00 a6	   _A6	      =	$A6
    265  3000 ????
    266  3000 ????	       00 a4	   _A4	      =	$A4
    267  3000 ????
    268  3000 ????	       00 a2	   _A2	      =	$A2
    269  3000 ????
    270  3000 ????	       00 a0	   _A0	      =	$A0
    271  3000 ????
    272  3000 ????	       00 9e	   _9E	      =	$9E
    273  3000 ????
    274  3000 ????	       00 9c	   _9C	      =	$9C
    275  3000 ????
    276  3000 ????	       00 9a	   _9A	      =	$9A
    277  3000 ????
    278  3000 ????	       00 98	   _98	      =	$98
    279  3000 ????
    280  3000 ????	       00 96	   _96	      =	$96
    281  3000 ????
    282  3000 ????	       00 94	   _94	      =	$94
    283  3000 ????
    284  3000 ????	       00 92	   _92	      =	$92
    285  3000 ????
    286  3000 ????	       00 90	   _90	      =	$90
    287  3000 ????
    288  3000 ????	       00 8e	   _8E	      =	$8E
    289  3000 ????
    290  3000 ????	       00 8c	   _8C	      =	$8C
    291  3000 ????
    292  3000 ????	       00 8a	   _8A	      =	$8A
    293  3000 ????
    294  3000 ????	       00 88	   _88	      =	$88
    295  3000 ????
    296  3000 ????	       00 86	   _86	      =	$86
    297  3000 ????
    298  3000 ????	       00 84	   _84	      =	$84
    299  3000 ????
    300  3000 ????	       00 82	   _82	      =	$82
    301  3000 ????
    302  3000 ????	       00 80	   _80	      =	$80
    303  3000 ????
    304  3000 ????	       00 7e	   _7E	      =	$7E
    305  3000 ????
    306  3000 ????	       00 7c	   _7C	      =	$7C
    307  3000 ????
    308  3000 ????	       00 7a	   _7A	      =	$7A
    309  3000 ????
    310  3000 ????	       00 78	   _78	      =	$78
    311  3000 ????
    312  3000 ????	       00 76	   _76	      =	$76
    313  3000 ????
    314  3000 ????	       00 74	   _74	      =	$74
    315  3000 ????
    316  3000 ????	       00 72	   _72	      =	$72
    317  3000 ????
    318  3000 ????	       00 70	   _70	      =	$70
    319  3000 ????
    320  3000 ????	       00 6e	   _6E	      =	$6E
    321  3000 ????
    322  3000 ????	       00 6c	   _6C	      =	$6C
    323  3000 ????
    324  3000 ????	       00 6a	   _6A	      =	$6A
    325  3000 ????
    326  3000 ????	       00 68	   _68	      =	$68
    327  3000 ????
    328  3000 ????	       00 66	   _66	      =	$66
    329  3000 ????
    330  3000 ????	       00 64	   _64	      =	$64
    331  3000 ????
    332  3000 ????	       00 62	   _62	      =	$62
    333  3000 ????
    334  3000 ????	       00 60	   _60	      =	$60
    335  3000 ????
    336  3000 ????	       00 5e	   _5E	      =	$5E
    337  3000 ????
    338  3000 ????	       00 5c	   _5C	      =	$5C
    339  3000 ????
    340  3000 ????	       00 5a	   _5A	      =	$5A
    341  3000 ????
    342  3000 ????	       00 58	   _58	      =	$58
    343  3000 ????
    344  3000 ????	       00 56	   _56	      =	$56
    345  3000 ????
    346  3000 ????	       00 54	   _54	      =	$54
    347  3000 ????
    348  3000 ????	       00 52	   _52	      =	$52
    349  3000 ????
    350  3000 ????	       00 50	   _50	      =	$50
    351  3000 ????
    352  3000 ????	       00 4e	   _4E	      =	$4E
    353  3000 ????
    354  3000 ????	       00 4c	   _4C	      =	$4C
    355  3000 ????
    356  3000 ????	       00 4a	   _4A	      =	$4A
    357  3000 ????
    358  3000 ????	       00 48	   _48	      =	$48
    359  3000 ????
    360  3000 ????	       00 46	   _46	      =	$46
    361  3000 ????
    362  3000 ????	       00 44	   _44	      =	$44
    363  3000 ????
    364  3000 ????	       00 42	   _42	      =	$42
    365  3000 ????
    366  3000 ????	       00 40	   _40	      =	$40
    367  3000 ????
    368  3000 ????	       00 3e	   _3E	      =	$3E
    369  3000 ????
    370  3000 ????	       00 3c	   _3C	      =	$3C
    371  3000 ????
    372  3000 ????	       00 3a	   _3A	      =	$3A
    373  3000 ????
    374  3000 ????	       00 38	   _38	      =	$38
    375  3000 ????
    376  3000 ????	       00 36	   _36	      =	$36
    377  3000 ????
    378  3000 ????	       00 34	   _34	      =	$34
    379  3000 ????
    380  3000 ????	       00 32	   _32	      =	$32
    381  3000 ????
    382  3000 ????	       00 30	   _30	      =	$30
    383  3000 ????
    384  3000 ????	       00 2e	   _2E	      =	$2E
    385  3000 ????
    386  3000 ????	       00 2c	   _2C	      =	$2C
    387  3000 ????
    388  3000 ????	       00 2a	   _2A	      =	$2A
    389  3000 ????
    390  3000 ????	       00 28	   _28	      =	$28
    391  3000 ????
    392  3000 ????	       00 26	   _26	      =	$26
    393  3000 ????
    394  3000 ????	       00 24	   _24	      =	$24
    395  3000 ????
    396  3000 ????	       00 22	   _22	      =	$22
    397  3000 ????
    398  3000 ????	       00 20	   _20	      =	$20
    399  3000 ????
    400  3000 ????	       00 1e	   _1E	      =	$1E
    401  3000 ????
    402  3000 ????	       00 1c	   _1C	      =	$1C
    403  3000 ????
    404  3000 ????	       00 1a	   _1A	      =	$1A
    405  3000 ????
    406  3000 ????	       00 18	   _18	      =	$18
    407  3000 ????
    408  3000 ????	       00 16	   _16	      =	$16
    409  3000 ????
    410  3000 ????	       00 14	   _14	      =	$14
    411  3000 ????
    412  3000 ????	       00 12	   _12	      =	$12
    413  3000 ????
    414  3000 ????	       00 10	   _10	      =	$10
    415  3000 ????
    416  3000 ????	       00 0e	   _0E	      =	$0E
    417  3000 ????
    418  3000 ????	       00 0c	   _0C	      =	$0C
    419  3000 ????
    420  3000 ????	       00 0a	   _0A	      =	$0A
    421  3000 ????
    422  3000 ????	       00 08	   _08	      =	$08
    423  3000 ????
    424  3000 ????	       00 06	   _06	      =	$06
    425  3000 ????
    426  3000 ????	       00 04	   _04	      =	$04
    427  3000 ????
    428  3000 ????	       00 02	   _02	      =	$02
    429  3000 ????
    430  3000 ????	       00 00	   _00	      =	$00
    431  3000 ????
    432  3000 ????	       00 09	   req_load_menu =	9
    433  3000 ????
    434  3000 ????	       00 08	   req_safe_point =	8
    435  3000 ????
    436  3000 ????	       00 07	   req_level_reset =	7
    437  3000 ????
    438  3000 ????	       00 06	   req_move_down =	6
    439  3000 ????
    440  3000 ????	       00 05	   req_move_right =	5
    441  3000 ????
    442  3000 ????	       00 04	   req_move_up =	4
    443  3000 ????
    444  3000 ????	       00 03	   req_move_left =	3
    445  3000 ????
    446  3000 ????	       00 02	   req_game_over =	2
    447  3000 ????
    448  3000 ????	       00 01	   req_level_up =	1
    449  3000 ????
    450  3000 ????	       00 00	   req_load   =	0
    451  3000 ????
    452  3000 ????	       00 06	   response_menu_size =	6
    453  3000 ????
    454  3000 ????	       00 1a	   response_size_minus_1 =	26
    455  3000 ????
    456  3000 ????	       00 08	   scback     =	#$08
    457  3000 ????
    458  3000 ????	       00 94	   _M_Edge_Right =	148
    459  3000 ????
    460  3000 ????	       00 0e	   _M_Edge_Left =	14
    461  3000 ????
    462  3000 ????	       00 58	   _M_Edge_Bottom =	88
    463  3000 ????
    464  3000 ????	       00 02	   _M_Edge_Top =	2
    465  3000 ????
    466  3000 ????	       00 4c	   player_max_y =	76
    467  3000 ????
    468  3000 ????	       00 02	   player_min_y =	2
    469  3000 ????
    470  3000 ????	       00 86	   player_max_x =	134
    471  3000 ????
    472  3000 ????	       00 0a	   player_min_x =	10
    473  3000 ????
    474  3000 ????	       00 01	   pfscore    =	1
    475  3000 ????
    476  3000 ????	       00 04	   pfres      =	4
    477  3000 ????
    478  3000 ????	       00 01	   superchip  =	1
    479  3000 ????	       00 01	   bs_mask    =	1
    480  3000 ????	       00 08	   bankswitch =	8
    481  3000 ????	       1f f8	   bankswitch_hotspot =	$1FF8
    482  3000 ????	       00 01	   PFcolors   =	1
    483  3000 ????	       00 01	   player1colors =	1
------- FILE d:\Firmaplus\Firmaplus_intern\Atari\PlusROM\Projekte-batariBasic\CaveApocalypse\C.A.V.E. Apocalypse.bas.asm
      8  3000 ????				      ifconst	bankswitch
      9  3000 ????				      if	bankswitch == 8
     10  1000					      ORG	$1000
     11  1000					      RORG	$D000
     12  1000					      endif
     13  1000				  -	      if	bankswitch == 16
     14  1000				  -	      ORG	$1000
     15  1000				  -	      RORG	$9000
     16  1000					      endif
     17  1000				  -	      if	bankswitch == 32
     18  1000				  -	      ORG	$1000
     19  1000				  -	      RORG	$1000
     20  1000					      endif
     21  1000				  -	      if	bankswitch == 64
     22  1000				  -	      ORG	$1000
     23  1000				  -	      RORG	$1000
     24  1000					      endif
     25  1000				  -	      else
     26  1000				  -	      ORG	$F000
     27  1000					      endif
     28  1000					      repeat	256
     29  1000		       ff		      .byte.b	$ff
     28  1000					      repend
     29  1001		       ff		      .byte.b	$ff
     28  1001					      repend
     29  1002		       ff		      .byte.b	$ff
     28  1002					      repend
     29  1003		       ff		      .byte.b	$ff
     28  1003					      repend
     29  1004		       ff		      .byte.b	$ff
     28  1004					      repend
     29  1005		       ff		      .byte.b	$ff
     28  1005					      repend
     29  1006		       ff		      .byte.b	$ff
     28  1006					      repend
     29  1007		       ff		      .byte.b	$ff
     28  1007					      repend
     29  1008		       ff		      .byte.b	$ff
     28  1008					      repend
     29  1009		       ff		      .byte.b	$ff
     28  1009					      repend
     29  100a		       ff		      .byte.b	$ff
     28  100a					      repend
     29  100b		       ff		      .byte.b	$ff
     28  100b					      repend
     29  100c		       ff		      .byte.b	$ff
     28  100c					      repend
     29  100d		       ff		      .byte.b	$ff
     28  100d					      repend
     29  100e		       ff		      .byte.b	$ff
     28  100e					      repend
     29  100f		       ff		      .byte.b	$ff
     28  100f					      repend
     29  1010		       ff		      .byte.b	$ff
     28  1010					      repend
     29  1011		       ff		      .byte.b	$ff
     28  1011					      repend
     29  1012		       ff		      .byte.b	$ff
     28  1012					      repend
     29  1013		       ff		      .byte.b	$ff
     28  1013					      repend
     29  1014		       ff		      .byte.b	$ff
     28  1014					      repend
     29  1015		       ff		      .byte.b	$ff
     28  1015					      repend
     29  1016		       ff		      .byte.b	$ff
     28  1016					      repend
     29  1017		       ff		      .byte.b	$ff
     28  1017					      repend
     29  1018		       ff		      .byte.b	$ff
     28  1018					      repend
     29  1019		       ff		      .byte.b	$ff
     28  1019					      repend
     29  101a		       ff		      .byte.b	$ff
     28  101a					      repend
     29  101b		       ff		      .byte.b	$ff
     28  101b					      repend
     29  101c		       ff		      .byte.b	$ff
     28  101c					      repend
     29  101d		       ff		      .byte.b	$ff
     28  101d					      repend
     29  101e		       ff		      .byte.b	$ff
     28  101e					      repend
     29  101f		       ff		      .byte.b	$ff
     28  101f					      repend
     29  1020		       ff		      .byte.b	$ff
     28  1020					      repend
     29  1021		       ff		      .byte.b	$ff
     28  1021					      repend
     29  1022		       ff		      .byte.b	$ff
     28  1022					      repend
     29  1023		       ff		      .byte.b	$ff
     28  1023					      repend
     29  1024		       ff		      .byte.b	$ff
     28  1024					      repend
     29  1025		       ff		      .byte.b	$ff
     28  1025					      repend
     29  1026		       ff		      .byte.b	$ff
     28  1026					      repend
     29  1027		       ff		      .byte.b	$ff
     28  1027					      repend
     29  1028		       ff		      .byte.b	$ff
     28  1028					      repend
     29  1029		       ff		      .byte.b	$ff
     28  1029					      repend
     29  102a		       ff		      .byte.b	$ff
     28  102a					      repend
     29  102b		       ff		      .byte.b	$ff
     28  102b					      repend
     29  102c		       ff		      .byte.b	$ff
     28  102c					      repend
     29  102d		       ff		      .byte.b	$ff
     28  102d					      repend
     29  102e		       ff		      .byte.b	$ff
     28  102e					      repend
     29  102f		       ff		      .byte.b	$ff
     28  102f					      repend
     29  1030		       ff		      .byte.b	$ff
     28  1030					      repend
     29  1031		       ff		      .byte.b	$ff
     28  1031					      repend
     29  1032		       ff		      .byte.b	$ff
     28  1032					      repend
     29  1033		       ff		      .byte.b	$ff
     28  1033					      repend
     29  1034		       ff		      .byte.b	$ff
     28  1034					      repend
     29  1035		       ff		      .byte.b	$ff
     28  1035					      repend
     29  1036		       ff		      .byte.b	$ff
     28  1036					      repend
     29  1037		       ff		      .byte.b	$ff
     28  1037					      repend
     29  1038		       ff		      .byte.b	$ff
     28  1038					      repend
     29  1039		       ff		      .byte.b	$ff
     28  1039					      repend
     29  103a		       ff		      .byte.b	$ff
     28  103a					      repend
     29  103b		       ff		      .byte.b	$ff
     28  103b					      repend
     29  103c		       ff		      .byte.b	$ff
     28  103c					      repend
     29  103d		       ff		      .byte.b	$ff
     28  103d					      repend
     29  103e		       ff		      .byte.b	$ff
     28  103e					      repend
     29  103f		       ff		      .byte.b	$ff
     28  103f					      repend
     29  1040		       ff		      .byte.b	$ff
     28  1040					      repend
     29  1041		       ff		      .byte.b	$ff
     28  1041					      repend
     29  1042		       ff		      .byte.b	$ff
     28  1042					      repend
     29  1043		       ff		      .byte.b	$ff
     28  1043					      repend
     29  1044		       ff		      .byte.b	$ff
     28  1044					      repend
     29  1045		       ff		      .byte.b	$ff
     28  1045					      repend
     29  1046		       ff		      .byte.b	$ff
     28  1046					      repend
     29  1047		       ff		      .byte.b	$ff
     28  1047					      repend
     29  1048		       ff		      .byte.b	$ff
     28  1048					      repend
     29  1049		       ff		      .byte.b	$ff
     28  1049					      repend
     29  104a		       ff		      .byte.b	$ff
     28  104a					      repend
     29  104b		       ff		      .byte.b	$ff
     28  104b					      repend
     29  104c		       ff		      .byte.b	$ff
     28  104c					      repend
     29  104d		       ff		      .byte.b	$ff
     28  104d					      repend
     29  104e		       ff		      .byte.b	$ff
     28  104e					      repend
     29  104f		       ff		      .byte.b	$ff
     28  104f					      repend
     29  1050		       ff		      .byte.b	$ff
     28  1050					      repend
     29  1051		       ff		      .byte.b	$ff
     28  1051					      repend
     29  1052		       ff		      .byte.b	$ff
     28  1052					      repend
     29  1053		       ff		      .byte.b	$ff
     28  1053					      repend
     29  1054		       ff		      .byte.b	$ff
     28  1054					      repend
     29  1055		       ff		      .byte.b	$ff
     28  1055					      repend
     29  1056		       ff		      .byte.b	$ff
     28  1056					      repend
     29  1057		       ff		      .byte.b	$ff
     28  1057					      repend
     29  1058		       ff		      .byte.b	$ff
     28  1058					      repend
     29  1059		       ff		      .byte.b	$ff
     28  1059					      repend
     29  105a		       ff		      .byte.b	$ff
     28  105a					      repend
     29  105b		       ff		      .byte.b	$ff
     28  105b					      repend
     29  105c		       ff		      .byte.b	$ff
     28  105c					      repend
     29  105d		       ff		      .byte.b	$ff
     28  105d					      repend
     29  105e		       ff		      .byte.b	$ff
     28  105e					      repend
     29  105f		       ff		      .byte.b	$ff
     28  105f					      repend
     29  1060		       ff		      .byte.b	$ff
     28  1060					      repend
     29  1061		       ff		      .byte.b	$ff
     28  1061					      repend
     29  1062		       ff		      .byte.b	$ff
     28  1062					      repend
     29  1063		       ff		      .byte.b	$ff
     28  1063					      repend
     29  1064		       ff		      .byte.b	$ff
     28  1064					      repend
     29  1065		       ff		      .byte.b	$ff
     28  1065					      repend
     29  1066		       ff		      .byte.b	$ff
     28  1066					      repend
     29  1067		       ff		      .byte.b	$ff
     28  1067					      repend
     29  1068		       ff		      .byte.b	$ff
     28  1068					      repend
     29  1069		       ff		      .byte.b	$ff
     28  1069					      repend
     29  106a		       ff		      .byte.b	$ff
     28  106a					      repend
     29  106b		       ff		      .byte.b	$ff
     28  106b					      repend
     29  106c		       ff		      .byte.b	$ff
     28  106c					      repend
     29  106d		       ff		      .byte.b	$ff
     28  106d					      repend
     29  106e		       ff		      .byte.b	$ff
     28  106e					      repend
     29  106f		       ff		      .byte.b	$ff
     28  106f					      repend
     29  1070		       ff		      .byte.b	$ff
     28  1070					      repend
     29  1071		       ff		      .byte.b	$ff
     28  1071					      repend
     29  1072		       ff		      .byte.b	$ff
     28  1072					      repend
     29  1073		       ff		      .byte.b	$ff
     28  1073					      repend
     29  1074		       ff		      .byte.b	$ff
     28  1074					      repend
     29  1075		       ff		      .byte.b	$ff
     28  1075					      repend
     29  1076		       ff		      .byte.b	$ff
     28  1076					      repend
     29  1077		       ff		      .byte.b	$ff
     28  1077					      repend
     29  1078		       ff		      .byte.b	$ff
     28  1078					      repend
     29  1079		       ff		      .byte.b	$ff
     28  1079					      repend
     29  107a		       ff		      .byte.b	$ff
     28  107a					      repend
     29  107b		       ff		      .byte.b	$ff
     28  107b					      repend
     29  107c		       ff		      .byte.b	$ff
     28  107c					      repend
     29  107d		       ff		      .byte.b	$ff
     28  107d					      repend
     29  107e		       ff		      .byte.b	$ff
     28  107e					      repend
     29  107f		       ff		      .byte.b	$ff
     28  107f					      repend
     29  1080		       ff		      .byte.b	$ff
     28  1080					      repend
     29  1081		       ff		      .byte.b	$ff
     28  1081					      repend
     29  1082		       ff		      .byte.b	$ff
     28  1082					      repend
     29  1083		       ff		      .byte.b	$ff
     28  1083					      repend
     29  1084		       ff		      .byte.b	$ff
     28  1084					      repend
     29  1085		       ff		      .byte.b	$ff
     28  1085					      repend
     29  1086		       ff		      .byte.b	$ff
     28  1086					      repend
     29  1087		       ff		      .byte.b	$ff
     28  1087					      repend
     29  1088		       ff		      .byte.b	$ff
     28  1088					      repend
     29  1089		       ff		      .byte.b	$ff
     28  1089					      repend
     29  108a		       ff		      .byte.b	$ff
     28  108a					      repend
     29  108b		       ff		      .byte.b	$ff
     28  108b					      repend
     29  108c		       ff		      .byte.b	$ff
     28  108c					      repend
     29  108d		       ff		      .byte.b	$ff
     28  108d					      repend
     29  108e		       ff		      .byte.b	$ff
     28  108e					      repend
     29  108f		       ff		      .byte.b	$ff
     28  108f					      repend
     29  1090		       ff		      .byte.b	$ff
     28  1090					      repend
     29  1091		       ff		      .byte.b	$ff
     28  1091					      repend
     29  1092		       ff		      .byte.b	$ff
     28  1092					      repend
     29  1093		       ff		      .byte.b	$ff
     28  1093					      repend
     29  1094		       ff		      .byte.b	$ff
     28  1094					      repend
     29  1095		       ff		      .byte.b	$ff
     28  1095					      repend
     29  1096		       ff		      .byte.b	$ff
     28  1096					      repend
     29  1097		       ff		      .byte.b	$ff
     28  1097					      repend
     29  1098		       ff		      .byte.b	$ff
     28  1098					      repend
     29  1099		       ff		      .byte.b	$ff
     28  1099					      repend
     29  109a		       ff		      .byte.b	$ff
     28  109a					      repend
     29  109b		       ff		      .byte.b	$ff
     28  109b					      repend
     29  109c		       ff		      .byte.b	$ff
     28  109c					      repend
     29  109d		       ff		      .byte.b	$ff
     28  109d					      repend
     29  109e		       ff		      .byte.b	$ff
     28  109e					      repend
     29  109f		       ff		      .byte.b	$ff
     28  109f					      repend
     29  10a0		       ff		      .byte.b	$ff
     28  10a0					      repend
     29  10a1		       ff		      .byte.b	$ff
     28  10a1					      repend
     29  10a2		       ff		      .byte.b	$ff
     28  10a2					      repend
     29  10a3		       ff		      .byte.b	$ff
     28  10a3					      repend
     29  10a4		       ff		      .byte.b	$ff
     28  10a4					      repend
     29  10a5		       ff		      .byte.b	$ff
     28  10a5					      repend
     29  10a6		       ff		      .byte.b	$ff
     28  10a6					      repend
     29  10a7		       ff		      .byte.b	$ff
     28  10a7					      repend
     29  10a8		       ff		      .byte.b	$ff
     28  10a8					      repend
     29  10a9		       ff		      .byte.b	$ff
     28  10a9					      repend
     29  10aa		       ff		      .byte.b	$ff
     28  10aa					      repend
     29  10ab		       ff		      .byte.b	$ff
     28  10ab					      repend
     29  10ac		       ff		      .byte.b	$ff
     28  10ac					      repend
     29  10ad		       ff		      .byte.b	$ff
     28  10ad					      repend
     29  10ae		       ff		      .byte.b	$ff
     28  10ae					      repend
     29  10af		       ff		      .byte.b	$ff
     28  10af					      repend
     29  10b0		       ff		      .byte.b	$ff
     28  10b0					      repend
     29  10b1		       ff		      .byte.b	$ff
     28  10b1					      repend
     29  10b2		       ff		      .byte.b	$ff
     28  10b2					      repend
     29  10b3		       ff		      .byte.b	$ff
     28  10b3					      repend
     29  10b4		       ff		      .byte.b	$ff
     28  10b4					      repend
     29  10b5		       ff		      .byte.b	$ff
     28  10b5					      repend
     29  10b6		       ff		      .byte.b	$ff
     28  10b6					      repend
     29  10b7		       ff		      .byte.b	$ff
     28  10b7					      repend
     29  10b8		       ff		      .byte.b	$ff
     28  10b8					      repend
     29  10b9		       ff		      .byte.b	$ff
     28  10b9					      repend
     29  10ba		       ff		      .byte.b	$ff
     28  10ba					      repend
     29  10bb		       ff		      .byte.b	$ff
     28  10bb					      repend
     29  10bc		       ff		      .byte.b	$ff
     28  10bc					      repend
     29  10bd		       ff		      .byte.b	$ff
     28  10bd					      repend
     29  10be		       ff		      .byte.b	$ff
     28  10be					      repend
     29  10bf		       ff		      .byte.b	$ff
     28  10bf					      repend
     29  10c0		       ff		      .byte.b	$ff
     28  10c0					      repend
     29  10c1		       ff		      .byte.b	$ff
     28  10c1					      repend
     29  10c2		       ff		      .byte.b	$ff
     28  10c2					      repend
     29  10c3		       ff		      .byte.b	$ff
     28  10c3					      repend
     29  10c4		       ff		      .byte.b	$ff
     28  10c4					      repend
     29  10c5		       ff		      .byte.b	$ff
     28  10c5					      repend
     29  10c6		       ff		      .byte.b	$ff
     28  10c6					      repend
     29  10c7		       ff		      .byte.b	$ff
     28  10c7					      repend
     29  10c8		       ff		      .byte.b	$ff
     28  10c8					      repend
     29  10c9		       ff		      .byte.b	$ff
     28  10c9					      repend
     29  10ca		       ff		      .byte.b	$ff
     28  10ca					      repend
     29  10cb		       ff		      .byte.b	$ff
     28  10cb					      repend
     29  10cc		       ff		      .byte.b	$ff
     28  10cc					      repend
     29  10cd		       ff		      .byte.b	$ff
     28  10cd					      repend
     29  10ce		       ff		      .byte.b	$ff
     28  10ce					      repend
     29  10cf		       ff		      .byte.b	$ff
     28  10cf					      repend
     29  10d0		       ff		      .byte.b	$ff
     28  10d0					      repend
     29  10d1		       ff		      .byte.b	$ff
     28  10d1					      repend
     29  10d2		       ff		      .byte.b	$ff
     28  10d2					      repend
     29  10d3		       ff		      .byte.b	$ff
     28  10d3					      repend
     29  10d4		       ff		      .byte.b	$ff
     28  10d4					      repend
     29  10d5		       ff		      .byte.b	$ff
     28  10d5					      repend
     29  10d6		       ff		      .byte.b	$ff
     28  10d6					      repend
     29  10d7		       ff		      .byte.b	$ff
     28  10d7					      repend
     29  10d8		       ff		      .byte.b	$ff
     28  10d8					      repend
     29  10d9		       ff		      .byte.b	$ff
     28  10d9					      repend
     29  10da		       ff		      .byte.b	$ff
     28  10da					      repend
     29  10db		       ff		      .byte.b	$ff
     28  10db					      repend
     29  10dc		       ff		      .byte.b	$ff
     28  10dc					      repend
     29  10dd		       ff		      .byte.b	$ff
     28  10dd					      repend
     29  10de		       ff		      .byte.b	$ff
     28  10de					      repend
     29  10df		       ff		      .byte.b	$ff
     28  10df					      repend
     29  10e0		       ff		      .byte.b	$ff
     28  10e0					      repend
     29  10e1		       ff		      .byte.b	$ff
     28  10e1					      repend
     29  10e2		       ff		      .byte.b	$ff
     28  10e2					      repend
     29  10e3		       ff		      .byte.b	$ff
     28  10e3					      repend
     29  10e4		       ff		      .byte.b	$ff
     28  10e4					      repend
     29  10e5		       ff		      .byte.b	$ff
     28  10e5					      repend
     29  10e6		       ff		      .byte.b	$ff
     28  10e6					      repend
     29  10e7		       ff		      .byte.b	$ff
     28  10e7					      repend
     29  10e8		       ff		      .byte.b	$ff
     28  10e8					      repend
     29  10e9		       ff		      .byte.b	$ff
     28  10e9					      repend
     29  10ea		       ff		      .byte.b	$ff
     28  10ea					      repend
     29  10eb		       ff		      .byte.b	$ff
     28  10eb					      repend
     29  10ec		       ff		      .byte.b	$ff
     28  10ec					      repend
     29  10ed		       ff		      .byte.b	$ff
     28  10ed					      repend
     29  10ee		       ff		      .byte.b	$ff
     28  10ee					      repend
     29  10ef		       ff		      .byte.b	$ff
     28  10ef					      repend
     29  10f0		       ff		      .byte.b	$ff
     28  10f0					      repend
     29  10f1		       ff		      .byte.b	$ff
     28  10f1					      repend
     29  10f2		       ff		      .byte.b	$ff
     28  10f2					      repend
     29  10f3		       ff		      .byte.b	$ff
     28  10f3					      repend
     29  10f4		       ff		      .byte.b	$ff
     28  10f4					      repend
     29  10f5		       ff		      .byte.b	$ff
     28  10f5					      repend
     29  10f6		       ff		      .byte.b	$ff
     28  10f6					      repend
     29  10f7		       ff		      .byte.b	$ff
     28  10f7					      repend
     29  10f8		       ff		      .byte.b	$ff
     28  10f8					      repend
     29  10f9		       ff		      .byte.b	$ff
     28  10f9					      repend
     29  10fa		       ff		      .byte.b	$ff
     28  10fa					      repend
     29  10fb		       ff		      .byte.b	$ff
     28  10fb					      repend
     29  10fc		       ff		      .byte.b	$ff
     28  10fc					      repend
     29  10fd		       ff		      .byte.b	$ff
     28  10fd					      repend
     29  10fe		       ff		      .byte.b	$ff
     28  10fe					      repend
     29  10ff		       ff		      .byte.b	$ff
     30  1100					      repend
     31  1100				   game
     32  1100				   .L00 		;  inline PlusROM_functions.asm
     33  1100
------- FILE PlusROM_functions.asm LEVEL 2 PASS 3
      0  1100					      include	PlusROM_functions.asm
      1  1100		       00 01	   PlusROM_functions =	1
      2  1100		       1f f0	   WriteToBuffer =	$1ff0
      3  1100		       1f f1	   WriteSendBuffer =	$1ff1
      4  1100		       1f f2	   ReceiveBuffer =	$1ff2
      5  1100		       1f f3	   ReceiveBufferSize =	$1ff3
      6  1100
      7  1100					      MAC	set_plusrom_api
      8  1100				   PlusROM_API
      9  1100					      .byte	{1}, 0, {2}, 0
     10  1100					      ENDM		; {1} = path, {2} = domain
     11  1100
------- FILE d:\Firmaplus\Firmaplus_intern\Atari\PlusROM\Projekte-batariBasic\CaveApocalypse\C.A.V.E. Apocalypse.bas.asm
     35  1100
     36  1100				   .
     37  1100							; 
     38  1100
     39  1100				   .L01 		;  set kernel_options pfcolors player1colors
     40  1100
     41  1100				   .L02 		;  set romsize 8kSC
     42  1100
     43  1100				   .L03 		;  set smartbranching on
     44  1100
     45  1100				   .
     46  1100							; 
     47  1100
     48  1100				   .L04 		;  const pfres = 4
     49  1100
     50  1100				   .L05 		;  const pfscore  =  1
     51  1100
     52  1100				   .
     53  1100							; 
     54  1100
     55  1100				   .L06 		;  rem gravity is acceleration (https://atariage.com/forums/topic/226881-gravity/?do=findComment&comment=3017307)
     56  1100
     57  1100				   .L07 		;  rem by AA user bogax (https://atariage.com/forums/profile/22687-bogax/)
     58  1100
     59  1100				   .L08 		;  rem the smallest fraction is 1/256 rounded up here to 0.004
     60  1100
     61  1100				   .L09 		;  rem assuming gravity is applied each drawscreen this should
     62  1100
     63  1100				   .L010		;  rem work out to ~7 pixels in 1 second, 28 pixels in 2 seconds
     64  1100
     65  1100				   .L011		;  rem 63 pixels in 3 seconds
     66  1100
     67  1100							;.gravity_player1.0.004.
     68  1100				   .L012		;  def gravity_player1 = 0.004
     69  1100
     70  1100							;.gravity_missile0.0.008.
     71  1100				   .L013		;  def gravity_missile0 = 0.008
     72  1100
     73  1100				   .
     74  1100							; 
     75  1100
     76  1100				   .L014		;  const player_min_x	=  10
     77  1100
     78  1100				   .L015		;  const player_max_x	=  134
     79  1100
     80  1100				   .L016		;  const player_min_y	=  2
     81  1100
     82  1100				   .L017		;  const player_max_y	=  76
     83  1100
     84  1100				   .L018		;  const _M_Edge_Top  =  2
     85  1100
     86  1100				   .L019		;  const _M_Edge_Bottom  =  88
     87  1100
     88  1100				   .L020		;  const _M_Edge_Left	=  14
     89  1100
     90  1100				   .L021		;  const _M_Edge_Right  =  148
     91  1100
     92  1100				   .
     93  1100							; 
     94  1100
     95  1100				   .L022		;  const scback  =  #$08
     96  1100
     97  1100				   .
     98  1100							; 
     99  1100
    100  1100				   .L023		;  const response_size_minus_1  =  26
    101  1100
    102  1100				   .L024		;  const response_menu_size  =  6
    103  1100
    104  1100				   .
    105  1100							; 
    106  1100
    107  1100				   .
    108  1100							; 
    109  1100
    110  1100				   .
    111  1100							; 
    112  1100
    113  1100				   .
    114  1100							; 
    115  1100
    116  1100				   .L025		;  const req_load  =  0
    117  1100
    118  1100				   .L026		;  const req_level_up	=  1
    119  1100
    120  1100				   .L027		;  const req_game_over  =  2
    121  1100
    122  1100				   .L028		;  const req_move_left  =  3
    123  1100
    124  1100				   .L029		;  const req_move_up  =  4
    125  1100
    126  1100				   .L030		;  const req_move_right  =  5
    127  1100
    128  1100				   .L031		;  const req_move_down  =  6
    129  1100
    130  1100				   .L032		;  const req_level_reset  =  7
    131  1100
    132  1100				   .L033		;  const req_safe_point  =  8
    133  1100
    134  1100				   .L034		;  const req_load_menu  =  9
    135  1100
    136  1100				   .
    137  1100							; 
    138  1100
    139  1100				   .L035		;  const _00  =  $00
    140  1100
    141  1100				   .L036		;  const _02  =  $02
    142  1100
    143  1100				   .L037		;  const _04  =  $04
    144  1100
    145  1100				   .L038		;  const _06  =  $06
    146  1100
    147  1100				   .L039		;  const _08  =  $08
    148  1100
    149  1100				   .L040		;  const _0A  =  $0A
    150  1100
    151  1100				   .L041		;  const _0C  =  $0C
    152  1100
    153  1100				   .L042		;  const _0E  =  $0E
    154  1100
    155  1100				   .L043		;  const _10  =  $10
    156  1100
    157  1100				   .L044		;  const _12  =  $12
    158  1100
    159  1100				   .L045		;  const _14  =  $14
    160  1100
    161  1100				   .L046		;  const _16  =  $16
    162  1100
    163  1100				   .L047		;  const _18  =  $18
    164  1100
    165  1100				   .L048		;  const _1A  =  $1A
    166  1100
    167  1100				   .L049		;  const _1C  =  $1C
    168  1100
    169  1100				   .L050		;  const _1E  =  $1E
    170  1100
    171  1100				   .L051		;  const _20  =  $20
    172  1100
    173  1100				   .L052		;  const _22  =  $22
    174  1100
    175  1100				   .L053		;  const _24  =  $24
    176  1100
    177  1100				   .L054		;  const _26  =  $26
    178  1100
    179  1100				   .L055		;  const _28  =  $28
    180  1100
    181  1100				   .L056		;  const _2A  =  $2A
    182  1100
    183  1100				   .L057		;  const _2C  =  $2C
    184  1100
    185  1100				   .L058		;  const _2E  =  $2E
    186  1100
    187  1100				   .L059		;  const _30  =  $30
    188  1100
    189  1100				   .L060		;  const _32  =  $32
    190  1100
    191  1100				   .L061		;  const _34  =  $34
    192  1100
    193  1100				   .L062		;  const _36  =  $36
    194  1100
    195  1100				   .L063		;  const _38  =  $38
    196  1100
    197  1100				   .L064		;  const _3A  =  $3A
    198  1100
    199  1100				   .L065		;  const _3C  =  $3C
    200  1100
    201  1100				   .L066		;  const _3E  =  $3E
    202  1100
    203  1100				   .L067		;  const _40  =  $40
    204  1100
    205  1100				   .L068		;  const _42  =  $42
    206  1100
    207  1100				   .L069		;  const _44  =  $44
    208  1100
    209  1100				   .L070		;  const _46  =  $46
    210  1100
    211  1100				   .L071		;  const _48  =  $48
    212  1100
    213  1100				   .L072		;  const _4A  =  $4A
    214  1100
    215  1100				   .L073		;  const _4C  =  $4C
    216  1100
    217  1100				   .L074		;  const _4E  =  $4E
    218  1100
    219  1100				   .L075		;  const _50  =  $50
    220  1100
    221  1100				   .L076		;  const _52  =  $52
    222  1100
    223  1100				   .L077		;  const _54  =  $54
    224  1100
    225  1100				   .L078		;  const _56  =  $56
    226  1100
    227  1100				   .L079		;  const _58  =  $58
    228  1100
    229  1100				   .L080		;  const _5A  =  $5A
    230  1100
    231  1100				   .L081		;  const _5C  =  $5C
    232  1100
    233  1100				   .L082		;  const _5E  =  $5E
    234  1100
    235  1100				   .L083		;  const _60  =  $60
    236  1100
    237  1100				   .L084		;  const _62  =  $62
    238  1100
    239  1100				   .L085		;  const _64  =  $64
    240  1100
    241  1100				   .L086		;  const _66  =  $66
    242  1100
    243  1100				   .L087		;  const _68  =  $68
    244  1100
    245  1100				   .L088		;  const _6A  =  $6A
    246  1100
    247  1100				   .L089		;  const _6C  =  $6C
    248  1100
    249  1100				   .L090		;  const _6E  =  $6E
    250  1100
    251  1100				   .L091		;  const _70  =  $70
    252  1100
    253  1100				   .L092		;  const _72  =  $72
    254  1100
    255  1100				   .L093		;  const _74  =  $74
    256  1100
    257  1100				   .L094		;  const _76  =  $76
    258  1100
    259  1100				   .L095		;  const _78  =  $78
    260  1100
    261  1100				   .L096		;  const _7A  =  $7A
    262  1100
    263  1100				   .L097		;  const _7C  =  $7C
    264  1100
    265  1100				   .L098		;  const _7E  =  $7E
    266  1100
    267  1100				   .L099		;  const _80  =  $80
    268  1100
    269  1100				   .L0100		;  const _82  =  $82
    270  1100
    271  1100				   .L0101		;  const _84  =  $84
    272  1100
    273  1100				   .L0102		;  const _86  =  $86
    274  1100
    275  1100				   .L0103		;  const _88  =  $88
    276  1100
    277  1100				   .L0104		;  const _8A  =  $8A
    278  1100
    279  1100				   .L0105		;  const _8C  =  $8C
    280  1100
    281  1100				   .L0106		;  const _8E  =  $8E
    282  1100
    283  1100				   .L0107		;  const _90  =  $90
    284  1100
    285  1100				   .L0108		;  const _92  =  $92
    286  1100
    287  1100				   .L0109		;  const _94  =  $94
    288  1100
    289  1100				   .L0110		;  const _96  =  $96
    290  1100
    291  1100				   .L0111		;  const _98  =  $98
    292  1100
    293  1100				   .L0112		;  const _9A  =  $9A
    294  1100
    295  1100				   .L0113		;  const _9C  =  $9C
    296  1100
    297  1100				   .L0114		;  const _9E  =  $9E
    298  1100
    299  1100				   .L0115		;  const _A0  =  $A0
    300  1100
    301  1100				   .L0116		;  const _A2  =  $A2
    302  1100
    303  1100				   .L0117		;  const _A4  =  $A4
    304  1100
    305  1100				   .L0118		;  const _A6  =  $A6
    306  1100
    307  1100				   .L0119		;  const _A8  =  $A8
    308  1100
    309  1100				   .L0120		;  const _AA  =  $AA
    310  1100
    311  1100				   .L0121		;  const _AC  =  $AC
    312  1100
    313  1100				   .L0122		;  const _AE  =  $AE
    314  1100
    315  1100				   .L0123		;  const _B0  =  $B0
    316  1100
    317  1100				   .L0124		;  const _B2  =  $B2
    318  1100
    319  1100				   .L0125		;  const _B4  =  $B4
    320  1100
    321  1100				   .L0126		;  const _B6  =  $B6
    322  1100
    323  1100				   .L0127		;  const _B8  =  $B8
    324  1100
    325  1100				   .L0128		;  const _BA  =  $BA
    326  1100
    327  1100				   .L0129		;  const _BC  =  $BC
    328  1100
    329  1100				   .L0130		;  const _BE  =  $BE
    330  1100
    331  1100				   .L0131		;  const _C0  =  $C0
    332  1100
    333  1100				   .L0132		;  const _C2  =  $C2
    334  1100
    335  1100				   .L0133		;  const _C4  =  $C4
    336  1100
    337  1100				   .L0134		;  const _C6  =  $C6
    338  1100
    339  1100				   .L0135		;  const _C8  =  $C8
    340  1100
    341  1100				   .L0136		;  const _CA  =  $CA
    342  1100
    343  1100				   .L0137		;  const _CC  =  $CC
    344  1100
    345  1100				   .L0138		;  const _CE  =  $CE
    346  1100
    347  1100				   .L0139		;  const _D0  =  $D0
    348  1100
    349  1100				   .L0140		;  const _D2  =  $D2
    350  1100
    351  1100				   .L0141		;  const _D4  =  $D4
    352  1100
    353  1100				   .L0142		;  const _D6  =  $D6
    354  1100
    355  1100				   .L0143		;  const _D8  =  $D8
    356  1100
    357  1100				   .L0144		;  const _DA  =  $DA
    358  1100
    359  1100				   .L0145		;  const _DC  =  $DC
    360  1100
    361  1100				   .L0146		;  const _DE  =  $DE
    362  1100
    363  1100				   .L0147		;  const _E0  =  $E0
    364  1100
    365  1100				   .L0148		;  const _E2  =  $E2
    366  1100
    367  1100				   .L0149		;  const _E4  =  $E4
    368  1100
    369  1100				   .L0150		;  const _E6  =  $E6
    370  1100
    371  1100				   .L0151		;  const _E8  =  $E8
    372  1100
    373  1100				   .L0152		;  const _EA  =  $EA
    374  1100
    375  1100				   .L0153		;  const _EC  =  $EC
    376  1100
    377  1100				   .L0154		;  const _EE  =  $EE
    378  1100
    379  1100				   .L0155		;  const _F0  =  $F0
    380  1100
    381  1100				   .L0156		;  const _F2  =  $F2
    382  1100
    383  1100				   .L0157		;  const _F4  =  $F4
    384  1100
    385  1100				   .L0158		;  const _F6  =  $F6
    386  1100
    387  1100				   .L0159		;  const _F8  =  $F8
    388  1100
    389  1100				   .L0160		;  const _FA  =  $FA
    390  1100
    391  1100				   .L0161		;  const _FC  =  $FC
    392  1100
    393  1100				   .L0162		;  const _FE  =  $FE
    394  1100
    395  1100				   .
    396  1100							; 
    397  1100
    398  1100				   .
    399  1100							; 
    400  1100
    401  1100				   .
    402  1100							; 
    403  1100
    404  1100				   .
    405  1100							; 
    406  1100
    407  1100				   .
    408  1100							; 
    409  1100
    410  1100				   .
    411  1100							; 
    412  1100
    413  1100				   .
    414  1100							; 
    415  1100
    416  1100				   .
    417  1100							; 
    418  1100
    419  1100				   .
    420  1100							; 
    421  1100
    422  1100				   .
    423  1100							; 
    424  1100
    425  1100				   .
    426  1100							; 
    427  1100
    428  1100				   .
    429  1100							; 
    430  1100
    431  1100				   .
    432  1100							; 
    433  1100
    434  1100				   .
    435  1100							; 
    436  1100
    437  1100				   .
    438  1100							; 
    439  1100
    440  1100				   .
    441  1100							; 
    442  1100
    443  1100				   .
    444  1100							; 
    445  1100
    446  1100				   .
    447  1100							; 
    448  1100
    449  1100				   .
    450  1100							; 
    451  1100
    452  1100				   .
    453  1100							; 
    454  1100
    455  1100				   .
    456  1100							; 
    457  1100
    458  1100				   .
    459  1100							; 
    460  1100
    461  1100				   .
    462  1100							; 
    463  1100
    464  1100				   .
    465  1100							; 
    466  1100
    467  1100				   .
    468  1100							; 
    469  1100
    470  1100				   .
    471  1100							; 
    472  1100
    473  1100				   .
    474  1100							; 
    475  1100
    476  1100				   .
    477  1100							; 
    478  1100
    479  1100				   .
    480  1100							; 
    481  1100
    482  1100				   .
    483  1100							; 
    484  1100
    485  1100				   .
    486  1100							; 
    487  1100
    488  1100				   .
    489  1100							; 
    490  1100
    491  1100				   .
    492  1100							; 
    493  1100
    494  1100				   .
    495  1100							; 
    496  1100
    497  1100				   .
    498  1100							; 
    499  1100
    500  1100				   .
    501  1100							; 
    502  1100
    503  1100				   .
    504  1100							; 
    505  1100
    506  1100				   .
    507  1100							; 
    508  1100
    509  1100				   .
    510  1100							; 
    511  1100
    512  1100				   .
    513  1100							; 
    514  1100
    515  1100				   .
    516  1100							; 
    517  1100
    518  1100				   .
    519  1100							; 
    520  1100
    521  1100				   .
    522  1100							; 
    523  1100
    524  1100				   .
    525  1100							; 
    526  1100
    527  1100				   .
    528  1100							; 
    529  1100
    530  1100				   .
    531  1100							; 
    532  1100
    533  1100				   .
    534  1100							; 
    535  1100
    536  1100				   .
    537  1100							; 
    538  1100
    539  1100				   .
    540  1100							; 
    541  1100
    542  1100				   .
    543  1100							; 
    544  1100
    545  1100				   .
    546  1100							; 
    547  1100
    548  1100				   .
    549  1100							; 
    550  1100
    551  1100				   .
    552  1100							; 
    553  1100
    554  1100				   .
    555  1100							; 
    556  1100
    557  1100				   .
    558  1100							; 
    559  1100
    560  1100				   .
    561  1100							; 
    562  1100
    563  1100				   .
    564  1100							; 
    565  1100
    566  1100				   .
    567  1100							; 
    568  1100
    569  1100				   .
    570  1100							; 
    571  1100
    572  1100				   .
    573  1100							; 
    574  1100
    575  1100				   .
    576  1100							; 
    577  1100
    578  1100				   .
    579  1100							; 
    580  1100
    581  1100				   .
    582  1100							; 
    583  1100
    584  1100				   .
    585  1100							; 
    586  1100
    587  1100				   .
    588  1100							; 
    589  1100
    590  1100				   .
    591  1100							; 
    592  1100
    593  1100				   .
    594  1100							; 
    595  1100
    596  1100				   .
    597  1100							; 
    598  1100
    599  1100				   .
    600  1100							; 
    601  1100
    602  1100				   .
    603  1100							; 
    604  1100
    605  1100				   .
    606  1100							; 
    607  1100
    608  1100				   .
    609  1100							; 
    610  1100
    611  1100				   .
    612  1100							; 
    613  1100
    614  1100				   .
    615  1100							; 
    616  1100
    617  1100				   .
    618  1100							; 
    619  1100
    620  1100				   .
    621  1100							; 
    622  1100
    623  1100				   .
    624  1100							; 
    625  1100
    626  1100				   .
    627  1100							; 
    628  1100
    629  1100				   .
    630  1100							; 
    631  1100
    632  1100				   .
    633  1100							; 
    634  1100
    635  1100				   .
    636  1100							; 
    637  1100
    638  1100				   .
    639  1100							; 
    640  1100
    641  1100				   .
    642  1100							; 
    643  1100
    644  1100				   .
    645  1100							; 
    646  1100
    647  1100				   .
    648  1100							; 
    649  1100
    650  1100				   .
    651  1100							; 
    652  1100
    653  1100				   .
    654  1100							; 
    655  1100
    656  1100				   .
    657  1100							; 
    658  1100
    659  1100				   .
    660  1100							; 
    661  1100
    662  1100				   .
    663  1100							; 
    664  1100
    665  1100				   .
    666  1100							; 
    667  1100
    668  1100				   .
    669  1100							; 
    670  1100
    671  1100				   .
    672  1100							; 
    673  1100
    674  1100				   .
    675  1100							; 
    676  1100
    677  1100				   .
    678  1100							; 
    679  1100
    680  1100				   .
    681  1100							; 
    682  1100
    683  1100				   .
    684  1100							; 
    685  1100
    686  1100				   .
    687  1100							; 
    688  1100
    689  1100				   .
    690  1100							; 
    691  1100
    692  1100				   .
    693  1100							; 
    694  1100
    695  1100				   .
    696  1100							; 
    697  1100
    698  1100				   .
    699  1100							; 
    700  1100
    701  1100				   .
    702  1100							; 
    703  1100
    704  1100				   .
    705  1100							; 
    706  1100
    707  1100				   .
    708  1100							; 
    709  1100
    710  1100				   .
    711  1100							; 
    712  1100
    713  1100				   .
    714  1100							; 
    715  1100
    716  1100				   .
    717  1100							; 
    718  1100
    719  1100				   .
    720  1100							; 
    721  1100
    722  1100				   .
    723  1100							; 
    724  1100
    725  1100				   .
    726  1100							; 
    727  1100
    728  1100				   .
    729  1100							; 
    730  1100
    731  1100				   .
    732  1100							; 
    733  1100
    734  1100				   .
    735  1100							; 
    736  1100
    737  1100				   .
    738  1100							; 
    739  1100
    740  1100				   .
    741  1100							; 
    742  1100
    743  1100				   .
    744  1100							; 
    745  1100
    746  1100				   .
    747  1100							; 
    748  1100
    749  1100				   .
    750  1100							; 
    751  1100
    752  1100				   .
    753  1100							; 
    754  1100
    755  1100				   .
    756  1100							; 
    757  1100
    758  1100				   .
    759  1100							; 
    760  1100
    761  1100				   .
    762  1100							; 
    763  1100
    764  1100				   .
    765  1100							; 
    766  1100
    767  1100				   .
    768  1100							; 
    769  1100
    770  1100				   .
    771  1100							; 
    772  1100
    773  1100				   .
    774  1100							; 
    775  1100
    776  1100				   .
    777  1100							; 
    778  1100
    779  1100				   .
    780  1100							; 
    781  1100
    782  1100				   .
    783  1100							; 
    784  1100
    785  1100				   .
    786  1100							; 
    787  1100
    788  1100				   .
    789  1100							; 
    790  1100
    791  1100				   .
    792  1100							; 
    793  1100
    794  1100				   .
    795  1100							; 
    796  1100
    797  1100				   .
    798  1100							; 
    799  1100
    800  1100				   .
    801  1100							; 
    802  1100
    803  1100				   .
    804  1100							; 
    805  1100
    806  1100				   .
    807  1100							; 
    808  1100
    809  1100				   .
    810  1100							; 
    811  1100
    812  1100				   .
    813  1100							; 
    814  1100
    815  1100				   .
    816  1100							; 
    817  1100
    818  1100				   .
    819  1100							; 
    820  1100
    821  1100				   .
    822  1100							; 
    823  1100
    824  1100				   .
    825  1100							; 
    826  1100
    827  1100				   .
    828  1100							; 
    829  1100
    830  1100				   .
    831  1100							; 
    832  1100
    833  1100				   .L0163		;  dim _sc1  =  score
    834  1100
    835  1100				   .L0164		;  dim _sc2  =  score + 1
    836  1100
    837  1100				   .L0165		;  dim _sc3  =  score + 2
    838  1100
    839  1100				   .
    840  1100							; 
    841  1100
    842  1100				   .
    843  1100							; 
    844  1100
    845  1100				   .L0166		;  dim delay_counter  =  a
    846  1100
    847  1100				   .L0167		;  dim frame_counter  =  b
    848  1100
    849  1100				   .
    850  1100							; 
    851  1100
    852  1100				   .L0168		;  dim _BitOp_Ball_Shot_Dir  =  c
    853  1100
    854  1100				   .L0169		;  dim _Bit0_Ball_Shot_Dir_Left1  =  c
    855  1100
    856  1100				   .L0170		;  dim _Bit1_Ball_Shot_Dir_Left2  =  c
    857  1100
    858  1100				   .L0171		;  dim _Bit2_Ball_Shot_Dir_Right1  =  c
    859  1100
    860  1100				   .L0172		;  dim _Bit3_Ball_Shot_Dir_Right2  =  c
    861  1100
    862  1100				   .
    863  1100							; 
    864  1100
    865  1100				   .L0173		;  dim _BitOp_M0_Dir  =  d
    866  1100
    867  1100				   .L0174		;  dim _Bit0_M0_Dir_Up  =  d
    868  1100
    869  1100				   .L0175		;  dim _Bit1_M0_Dir_Down  =  d
    870  1100
    871  1100				   .L0176		;  dim _Bit2_M0_Dir_Left  =  d
    872  1100
    873  1100				   .L0177		;  dim _Bit3_M0_Dir_Right  =  d
    874  1100
    875  1100				   .
    876  1100							; 
    877  1100
    878  1100				   .L0178		;  dim _BitOp_P1_Dir  =  e
    879  1100
    880  1100				   .L0179		;  dim _Bit0_P1_Dir_Up  =  e
    881  1100
    882  1100				   .L0180		;  dim _Bit1_P1_Dir_Down  =  e
    883  1100
    884  1100				   .L0181		;  dim _Bit2_P1_Dir_Left  =  e
    885  1100
    886  1100				   .L0182		;  dim _Bit3_P1_Dir_Right  =  e
    887  1100
    888  1100				   .
    889  1100							; 
    890  1100
    891  1100				   .
    892  1100							; 
    893  1100
    894  1100				   .L0183		;  dim _Ch0_Sound  =  f
    895  1100
    896  1100				   .L0184		;  dim _Ch0_Duration  =  g
    897  1100
    898  1100				   .L0185		;  dim _Ch0_Counter  =  h
    899  1100
    900  1100				   .
    901  1100							; 
    902  1100
    903  1100				   .L0186		;  dim extra_wall_move_x  =  i
    904  1100
    905  1100				   .L0187		;  dim roommate_move_x  =  j
    906  1100
    907  1100				   .L0188		;  dim roommate_type  =  k
    908  1100
    909  1100				   .
    910  1100							; 
    911  1100
    912  1100				   .L0189		;  dim _BitOp_Safe_Point_New_Room  =  l
    913  1100
    914  1100				   .L0190		;  dim _Bit0_Safe_Point_reached  =  l
    915  1100
    916  1100				   .L0191		;  dim _Bit1_Safe_Point_P1_Flip  =  l
    917  1100
    918  1100				   .L0192		;  dim _Bit2_New_Room_Flip_P1	=  l
    919  1100
    920  1100				   .L0193		;  dim Safe_Point_P1_x  =  m
    921  1100
    922  1100				   .L0194		;  dim Safe_Point_P1_y  =  n
    923  1100
    924  1100				   .
    925  1100							; 
    926  1100
    927  1100				   .L0195		;  rem 16 bit velocity
    928  1100
    929  1100				   .L0196		;  dim Bally_velocity	=  p.q
    930  1100
    931  1100				   .L0197		;  rem 16 bit ball y position
    932  1100
    933  1100				   .L0198		;  dim Bally_position	=  ball_shoot_y.r
    934  1100
    935  1100				   .
    936  1100							; 
    937  1100
    938  1100				   .L0199		;  rem 16 bit velocity
    939  1100
    940  1100				   .L0200		;  dim M0y_velocity  =  s.t
    941  1100
    942  1100				   .L0201		;  rem 16 bit missile0 y position
    943  1100
    944  1100				   .L0202		;  dim M0y_position  =  missile0y.u
    945  1100
    946  1100				   .
    947  1100							; 
    948  1100
    949  1100				   .L0203		;  rem 16 bit velocity
    950  1100
    951  1100				   .L0204		;  dim P1y_velocity  =  v.w
    952  1100
    953  1100				   .L0205		;  rem 16 bit player1 y position
    954  1100
    955  1100				   .L0206		;  dim P1y_position  =  player1y.x
    956  1100
    957  1100				   .
    958  1100							; 
    959  1100
    960  1100				   .L0207		;  rem Various game states
    961  1100
    962  1100				   .L0208		;  dim _Bit_Game_State  =  y
    963  1100
    964  1100				   .L0209		;  dim _Bit0_roommate_Dir  =  y
    965  1100
    966  1100				   .L0210		;  dim _Bit1_Wall_Dir	=  y
    967  1100
    968  1100				   .L0211		;  dim _Bit2_Level_finished  =  y
    969  1100
    970  1100				   .L0212		;  dim _Bit3_Ball_Shot_Moving	=  y
    971  1100
    972  1100				   .L0213		;  dim _Bit4_Game_Over  =  y
    973  1100
    974  1100				   .L0214		;  dim _Bit5_Request_Pending  =  y
    975  1100
    976  1100				   .L0215		;  dim _Bit6_Flip_P1  =  y
    977  1100
    978  1100				   .L0216		;  dim _Bit7_M0_Moving  =  y
    979  1100
    980  1100				   .
    981  1100							; 
    982  1100
    983  1100				   .L0217		;  dim new_room_player1y  =  var0
    984  1100
    985  1100				   .L0218		;  dim new_room_player1x  =  var1
    986  1100
    987  1100				   .L0219		;  dim gamenumber  =  var2
    988  1100
    989  1100				   .
    990  1100							; 
    991  1100
    992  1100				   .L0220		;  dim max_pub_level_bcd1  =  var3
    993  1100
    994  1100				   .L0221		;  dim max_pub_level_bcd2  =  var4
    995  1100
    996  1100				   .L0222		;  dim max_pub_level_bcd3  =  var5
    997  1100
    998  1100				   .L0223		;  dim max_priv_level_bcd1  =	var6
    999  1100
   1000  1100				   .L0224		;  dim max_priv_level_bcd2  =	var7
   1001  1100
   1002  1100				   .L0225		;  dim max_priv_level_bcd3  =	var8
   1003  1100
   1004  1100				   .
   1005  1100							; 
   1006  1100
   1007  1100				   .L0226		;  dim has_private_levels  =  var9
   1008  1100
   1009  1100				   .L0227		;  dim ball_shoot_x  =  var10
   1010  1100
   1011  1100				   .L0228		;  dim ball_shoot_y  =  var11
   1012  1100
   1013  1100				   .
   1014  1100							; 
   1015  1100
   1016  1100				   .
   1017  1100							; 
   1018  1100
   1019  1100				   .
   1020  1100							; 
   1021  1100
   1022  1100				   .
   1023  1100							; 
   1024  1100
   1025  1100				   .
   1026  1100							; 
   1027  1100
   1028  1100				   .L0229		;  dim w_room_definition_start  =  w097
   1029  1100
   1030  1100				   .
   1031  1100							; 
   1032  1100
   1033  1100				   .L0230		;  dim r_BitOp_room_type  =  r097
   1034  1100
   1035  1100				   .L0231		;  dim w_BitOp_room_type  =  r097
   1036  1100
   1037  1100				   .L0232		;  dim r_Bit0_room_type_top  =  r097
   1038  1100
   1039  1100				   .L0233		;  dim r_room_color_top  =  r098
   1040  1100
   1041  1100				   .L0234		;  dim w_room_color_top  =  w098
   1042  1100
   1043  1100				   .L0235		;  dim r_room_color_middle  =	r099
   1044  1100
   1045  1100				   .L0236		;  dim w_room_color_middle  =	w099
   1046  1100
   1047  1100				   .L0237		;  dim r_room_color_bottom  =	r103
   1048  1100
   1049  1100				   .L0238		;  dim w_room_color_bottom  =	w103
   1050  1100
   1051  1100				   .L0239		;  dim r_roommate_type_and_range  =  r104
   1052  1100
   1053  1100				   .L0240		;  dim w_roommate_type_and_range  =  w104
   1054  1100
   1055  1100				   .L0241		;  dim r_roommate_startpos_x  =  r105
   1056  1100
   1057  1100				   .L0242		;  dim w_roommate_startpos_x  =  w105
   1058  1100
   1059  1100				   .L0243		;  dim r_roommate_startpos_y  =  r106
   1060  1100
   1061  1100				   .L0244		;  dim w_roommate_startpos_y  =  w106
   1062  1100
   1063  1100				   .L0245		;  dim r_extra_wall_type_and_range  =	r107
   1064  1100
   1065  1100				   .L0246		;  dim w_extra_wall_type_and_range  =	w107
   1066  1100
   1067  1100				   .L0247		;  dim r_extra_wall_width  =  r108
   1068  1100
   1069  1100				   .L0248		;  dim w_extra_wall_width  =  w108
   1070  1100
   1071  1100				   .L0249		;  dim r_extra_wall_height  =	r109
   1072  1100
   1073  1100				   .L0250		;  dim w_extra_wall_height  =	w109
   1074  1100
   1075  1100				   .L0251		;  dim r_extra_wall_startpos_x  =  r110
   1076  1100
   1077  1100				   .L0252		;  dim w_extra_wall_startpos_x  =  w110
   1078  1100
   1079  1100				   .L0253		;  dim r_extra_wall_startpos_y  =  r111
   1080  1100
   1081  1100				   .L0254		;  dim w_extra_wall_startpos_y  =  w111
   1082  1100
   1083  1100				   .
   1084  1100							; 
   1085  1100
   1086  1100				   .
   1087  1100							; 
   1088  1100
   1089  1100				   ._Start
   1090  1100							; _Start
   1091  1100
   1092  1100				   .L0255		;  asm
   1093  1100
   1094  1100		       a9 00		      lda	#0
   1095  1102
   1096  1102		       a2 4b		      ldx	#75
   1097  1104
   1098  1104				   .clear_ram
   1099  1104
   1100  1104		       ca		      dex
   1101  1105
   1102  1105		       95 a4		      sta	var0,x
   1103  1107
   1104  1107		       d0 fb		      bne	.clear_ram
   1105  1109
   1106  1109				   .
   1107  1109							; 
   1108  1109
   1109  1109				   .L0256		;  WriteSendBuffer  =	req_load_menu  :  _Bit5_Request_Pending{5}  =  1  :  COLUP0  =	_1C  :	scorecolor  =  _0E
   1110  1109
   1111  1109		       a9 09		      LDA	#req_load_menu
   1112  110b		       8d f1 1f 	      STA	WriteSendBuffer
   1113  110e		       a5 ec		      LDA	_Bit5_Request_Pending
   1114  1110		       09 20		      ORA	#32
   1115  1112		       85 ec		      STA	_Bit5_Request_Pending
   1116  1114		       a9 1c		      LDA	#_1C
   1117  1116		       85 06		      STA	COLUP0
   1118  1118		       a9 0e		      LDA	#_0E
   1119  111a		       85 a3		      STA	scorecolor
   1120  111c				   .L0257		;  gamenumber	=  1  :  score	=  1  :  missile0height  =  1
   1121  111c
   1122  111c		       a9 01		      LDA	#1
   1123  111e		       85 a6		      STA	gamenumber
   1124  1120		       a9 01		      LDA	#$01
   1125  1122		       85 95		      STA	score+2
   1126  1124		       a9 00		      LDA	#$00
   1127  1126		       85 94		      STA	score+1
   1128  1128		       a9 00		      LDA	#$00
   1129  112a		       85 93		      STA	score
   1130  112c		       a9 01		      LDA	#1
   1131  112e		       85 90		      STA	missile0height
   1132  1130				   .L0258		;  new_room_player1y  =  player_min_y	:  Safe_Point_P1_y  =  player_min_y
   1133  1130
   1134  1130		       a9 02		      LDA	#player_min_y
   1135  1132		       85 a4		      STA	new_room_player1y
   1136  1134		       85 e1		      STA	Safe_Point_P1_y
   1137  1136				   .L0259		;  new_room_player1x  =  30  :  player1x  =  30  :  Safe_Point_P1_x  =  30
   1138  1136
   1139  1136		       a9 1e		      LDA	#30
   1140  1138		       85 a5		      STA	new_room_player1x
   1141  113a		       85 81		      STA	player1x
   1142  113c		       85 e0		      STA	Safe_Point_P1_x
   1143  113e				   .L0260		;  AUDV0  =  0  :  AUDV1  =  0  :  frame_counter  =  0  :  player0x  =  0  :  bally  =  0  :  player1y  =  0
   1144  113e
   1145  113e		       a9 00		      LDA	#0
   1146  1140		       85 19		      STA	AUDV0
   1147  1142		       85 1a		      STA	AUDV1
   1148  1144		       85 d5		      STA	frame_counter
   1149  1146		       85 80		      STA	player0x
   1150  1148		       85 89		      STA	bally
   1151  114a		       85 86		      STA	player1y
   1152  114c				   .L0261		;  missile0x  =  200  :  missile0y  =	200  :	w_extra_wall_startpos_x  =  200  :  w_roommate_startpos_y  =  200  :  player0y	=  200
   1153  114c
   1154  114c		       a9 c8		      LDA	#200
   1155  114e		       85 82		      STA	missile0x
   1156  1150		       85 91		      STA	missile0y
   1157  1152		       8d 6e f0 	      STA	w_extra_wall_startpos_x
   1158  1155		       8d 6a f0 	      STA	w_roommate_startpos_y
   1159  1158		       85 85		      STA	player0y
   1160  115a				   .
   1161  115a							; 
   1162  115a
   1163  115a				   .
   1164  115a							; 
   1165  115a
   1166  115a				   .L0262		;  pfclear
   1167  115a
   1168  115a		       a9 00		      LDA	#0
   1169  115c		       85 ee		      sta	temp7
   1170  115e		       a9 d1		      lda	#>(ret_point1-1)
   1171  1160		       48		      pha
   1172  1161		       a9 73		      lda	#<(ret_point1-1)
   1173  1163		       48		      pha
   1174  1164		       a9 f3		      lda	#>(pfclear-1)
   1175  1166		       48		      pha
   1176  1167		       a9 8f		      lda	#<(pfclear-1)
   1177  1169		       48		      pha
   1178  116a		       a5 ee		      lda	temp7
   1179  116c		       48		      pha
   1180  116d		       8a		      txa
   1181  116e		       48		      pha
   1182  116f		       a2 02		      ldx	#2
   1183  1171		       4c e8 ff 	      jmp	BS_jsr
   1184  1174				   ret_point1
   1185  1174				   .L0263		;  player1color:
   1186  1174
   1187  1174		       a2 dc		      LDX	#<playercolorL0263_1
   1188  1176		       86 87		      STX	player1color
   1189  1178		       a9 fe		      LDA	#>playercolorL0263_1
   1190  117a		       85 88		      STA	player1color+1
   1191  117c				   .
   1192  117c							; 
   1193  117c
   1194  117c				   .
   1195  117c							; 
   1196  117c
   1197  117c				   .
   1198  117c							; 
   1199  117c
   1200  117c				   .
   1201  117c							; 
   1202  117c
   1203  117c				   ._titlescreen_menu
   1204  117c							; _titlescreen_menu
   1205  117c
   1206  117c				   .L0264		;  COLUBK  =  _00
   1207  117c
   1208  117c		       a9 00		      LDA	#_00
   1209  117e		       85 09		      STA	COLUBK
   1210  1180				   .
   1211  1180							; 
   1212  1180
   1213  1180				   .L0265		;  gosub titledrawscreen bank2
   1214  1180
   1215  1180		       85 ee		      sta	temp7
   1216  1182		       a9 d1		      lda	#>(ret_point2-1)
   1217  1184		       48		      pha
   1218  1185		       a9 97		      lda	#<(ret_point2-1)
   1219  1187		       48		      pha
   1220  1188		       a9 f6		      lda	#>(.titledrawscreen-1)
   1221  118a		       48		      pha
   1222  118b		       a9 22		      lda	#<(.titledrawscreen-1)
   1223  118d		       48		      pha
   1224  118e		       a5 ee		      lda	temp7
   1225  1190		       48		      pha
   1226  1191		       8a		      txa
   1227  1192		       48		      pha
   1228  1193		       a2 02		      ldx	#2
   1229  1195		       4c e8 ff 	      jmp	BS_jsr
   1230  1198				   ret_point2
   1231  1198				   .
   1232  1198							; 
   1233  1198
   1234  1198				   .L0266		;  if delay_counter  >  0 then delay_counter  =  delay_counter  -  1  :  goto _titlescreen_menu
   1235  1198
   1236  1198		       a9 00		      LDA	#0
   1237  119a		       c5 d4		      CMP	delay_counter
   1238  119c		       b0 05		      BCS	.skipL0266
   1239  119e				   .condpart0
   1240  119e		       c6 d4		      DEC	delay_counter
   1241  11a0		       4c 7c d1 	      jmp	._titlescreen_menu
   1242  11a3
   1243  11a3				   .skipL0266
   1244  11a3				   .
   1245  11a3							; 
   1246  11a3
   1247  11a3				   .L0267		;  if ReceiveBufferSize  <  response_menu_size then _Skip_Read_Menu_Response
   1248  11a3
   1249  11a3		       ad f3 1f 	      LDA	ReceiveBufferSize
   1250  11a6		       c9 06		      CMP	#response_menu_size
   1251  11a8					      if	((* - ._Skip_Read_Menu_Response) < 127) && ((* - ._Skip_Read_Menu_Response) > -128)
   1252  11a8		       90 32		      bcc	._Skip_Read_Menu_Response
   1253  11aa				  -	      else
   1254  11aa				  -	      bcs	.0skip_Skip_Read_Menu_Response
   1255  11aa				  -	      jmp	._Skip_Read_Menu_Response
   1256  11aa				  -.0skip_Skip_Read_Menu_Response
   1257  11aa					      endif
   1258  11aa				   .L0268		;  _Bit5_Request_Pending{5}  =  0
   1259  11aa
   1260  11aa		       a5 ec		      LDA	_Bit5_Request_Pending
   1261  11ac		       29 df		      AND	#223
   1262  11ae		       85 ec		      STA	_Bit5_Request_Pending
   1263  11b0				   .L0269		;  max_pub_level_bcd1	=  ReceiveBuffer
   1264  11b0
   1265  11b0		       ad f2 1f 	      LDA	ReceiveBuffer
   1266  11b3		       85 a7		      STA	max_pub_level_bcd1
   1267  11b5				   .L0270		;  max_pub_level_bcd2	=  ReceiveBuffer
   1268  11b5
   1269  11b5		       ad f2 1f 	      LDA	ReceiveBuffer
   1270  11b8		       85 a8		      STA	max_pub_level_bcd2
   1271  11ba				   .L0271		;  max_pub_level_bcd3	=  ReceiveBuffer
   1272  11ba
   1273  11ba		       ad f2 1f 	      LDA	ReceiveBuffer
   1274  11bd		       85 a9		      STA	max_pub_level_bcd3
   1275  11bf				   .L0272		;  max_priv_level_bcd1  =  ReceiveBuffer
   1276  11bf
   1277  11bf		       ad f2 1f 	      LDA	ReceiveBuffer
   1278  11c2		       85 aa		      STA	max_priv_level_bcd1
   1279  11c4				   .L0273		;  max_priv_level_bcd2  =  ReceiveBuffer
   1280  11c4
   1281  11c4		       ad f2 1f 	      LDA	ReceiveBuffer
   1282  11c7		       85 ab		      STA	max_priv_level_bcd2
   1283  11c9				   .L0274		;  max_priv_level_bcd3  =  ReceiveBuffer
   1284  11c9
   1285  11c9		       ad f2 1f 	      LDA	ReceiveBuffer
   1286  11cc		       85 ac		      STA	max_priv_level_bcd3
   1287  11ce				   .L0275		;  has_private_levels	=  max_priv_level_bcd1	|  max_priv_level_bcd2	|  max_priv_level_bcd3
   1288  11ce
   1289  11ce							; complex statement detected
   1290  11ce		       a5 aa		      LDA	max_priv_level_bcd1
   1291  11d0		       48		      PHA
   1292  11d1		       a5 ab		      LDA	max_priv_level_bcd2
   1293  11d3		       05 ac		      ORA	max_priv_level_bcd3
   1294  11d5		       ba		      TSX
   1295  11d6		       e8		      INX
   1296  11d7		       9a		      TXS
   1297  11d8		       15 00		      ORA	$00,x
   1298  11da		       85 ad		      STA	has_private_levels
   1299  11dc				   ._Skip_Read_Menu_Response
   1300  11dc							; _Skip_Read_Menu_Response
   1301  11dc
   1302  11dc				   .
   1303  11dc							; 
   1304  11dc
   1305  11dc				   .L0276		;  if _Bit5_Request_Pending{5} then _titlescreen_menu
   1306  11dc
   1307  11dc		       a5 ec		      LDA	_Bit5_Request_Pending
   1308  11de		       29 20		      AND	#32
   1309  11e0					      if	((* - ._titlescreen_menu) < 127) && ((* - ._titlescreen_menu) > -128)
   1310  11e0		       d0 9a		      BNE	._titlescreen_menu
   1311  11e2				  -	      else
   1312  11e2				  -	      beq	.1skip_titlescreen_menu
   1313  11e2				  -	      jmp	._titlescreen_menu
   1314  11e2				  -.1skip_titlescreen_menu
   1315  11e2					      endif
   1316  11e2				   .
   1317  11e2							; 
   1318  11e2
   1319  11e2				   .L0277		;  if joy0left then score  =  score  -  100  :  delay_counter	=  5
   1320  11e2
   1321  11e2		       2c 80 02 	      bit	SWCHA
   1322  11e5		       70 19		      BVS	.skipL0277
   1323  11e7				   .condpart1
   1324  11e7		       f8		      SED
   1325  11e8		       38		      SEC
   1326  11e9		       a5 95		      LDA	score+2
   1327  11eb		       e9 00		      SBC	#$00
   1328  11ed		       85 95		      STA	score+2
   1329  11ef		       a5 94		      LDA	score+1
   1330  11f1		       e9 01		      SBC	#$01
   1331  11f3		       85 94		      STA	score+1
   1332  11f5		       a5 93		      LDA	score
   1333  11f7		       e9 00		      SBC	#$00
   1334  11f9		       85 93		      STA	score
   1335  11fb		       d8		      CLD
   1336  11fc		       a9 05		      LDA	#5
   1337  11fe		       85 d4		      STA	delay_counter
   1338  1200				   .skipL0277
   1339  1200				   .L0278		;  if joy0down then score  =  score  -  1  :  delay_counter  =  5
   1340  1200
   1341  1200		       a9 20		      lda	#$20
   1342  1202		       2c 80 02 	      bit	SWCHA
   1343  1205		       d0 19		      BNE	.skipL0278
   1344  1207				   .condpart2
   1345  1207		       f8		      SED
   1346  1208		       38		      SEC
   1347  1209		       a5 95		      LDA	score+2
   1348  120b		       e9 01		      SBC	#$01
   1349  120d		       85 95		      STA	score+2
   1350  120f		       a5 94		      LDA	score+1
   1351  1211		       e9 00		      SBC	#$00
   1352  1213		       85 94		      STA	score+1
   1353  1215		       a5 93		      LDA	score
   1354  1217		       e9 00		      SBC	#$00
   1355  1219		       85 93		      STA	score
   1356  121b		       d8		      CLD
   1357  121c		       a9 05		      LDA	#5
   1358  121e		       85 d4		      STA	delay_counter
   1359  1220				   .skipL0278
   1360  1220				   .L0279		;  if joy0right then score  =	score  +  100  :  delay_counter  =  5
   1361  1220
   1362  1220		       2c 80 02 	      bit	SWCHA
   1363  1223		       30 13		      BMI	.skipL0279
   1364  1225				   .condpart3
   1365  1225		       f8		      SED
   1366  1226		       18		      CLC
   1367  1227		       a5 94		      LDA	score+1
   1368  1229		       69 01		      ADC	#$01
   1369  122b		       85 94		      STA	score+1
   1370  122d		       a5 93		      LDA	score
   1371  122f		       69 00		      ADC	#$00
   1372  1231		       85 93		      STA	score
   1373  1233		       d8		      CLD
   1374  1234		       a9 05		      LDA	#5
   1375  1236		       85 d4		      STA	delay_counter
   1376  1238				   .skipL0279
   1377  1238				   .L0280		;  if joy0up then score  =  score  +  1  :  delay_counter  =  5
   1378  1238
   1379  1238		       a9 10		      lda	#$10
   1380  123a		       2c 80 02 	      bit	SWCHA
   1381  123d		       d0 19		      BNE	.skipL0280
   1382  123f				   .condpart4
   1383  123f		       f8		      SED
   1384  1240		       18		      CLC
   1385  1241		       a5 95		      LDA	score+2
   1386  1243		       69 01		      ADC	#$01
   1387  1245		       85 95		      STA	score+2
   1388  1247		       a5 94		      LDA	score+1
   1389  1249		       69 00		      ADC	#$00
   1390  124b		       85 94		      STA	score+1
   1391  124d		       a5 93		      LDA	score
   1392  124f		       69 00		      ADC	#$00
   1393  1251		       85 93		      STA	score
   1394  1253		       d8		      CLD
   1395  1254		       a9 05		      LDA	#5
   1396  1256		       85 d4		      STA	delay_counter
   1397  1258				   .skipL0280
   1398  1258				   .
   1399  1258							; 
   1400  1258
   1401  1258				   .
   1402  1258							; 
   1403  1258
   1404  1258				   .L0281		;  if gamenumber  >  2 then _User_Level_Compare
   1405  1258
   1406  1258		       a9 02		      LDA	#2
   1407  125a		       c5 a6		      CMP	gamenumber
   1408  125c					      if	((* - ._User_Level_Compare) < 127) && ((* - ._User_Level_Compare) > -128)
   1409  125c		       90 13		      bcc	._User_Level_Compare
   1410  125e				  -	      else
   1411  125e				  -	      bcs	.2skip_User_Level_Compare
   1412  125e				  -	      jmp	._User_Level_Compare
   1413  125e				  -.2skip_User_Level_Compare
   1414  125e					      endif
   1415  125e				   .
   1416  125e							; 
   1417  125e
   1418  125e				   .L0282		;  asm
   1419  125e
   1420  125e		       f8		      sed		; Set the Decimal Mode Flag
   1421  125f
   1422  125f		       a5 a9		      lda	max_pub_level_bcd3	; Load the Accumulator
   1423  1261
   1424  1261		       c5 95		      cmp	_sc3	; Compare Memory and the Accumulator
   1425  1263
   1426  1263		       a5 a8		      lda	max_pub_level_bcd2	; Load the Accumulator
   1427  1265
   1428  1265		       e5 94		      sbc	_sc2	; Subtract With Carry
   1429  1267
   1430  1267		       a5 a7		      lda	max_pub_level_bcd1	; Load the Accumulator
   1431  1269
   1432  1269		       e5 93		      sbc	_sc1	; Subtract With Carry
   1433  126b
   1434  126b		       d8		      cld		; Clear the Decimal Flag
   1435  126c
   1436  126c		       b0 1f		      bcs	._Skip_Level_Reset	; Branch if Carry Set
   1437  126e
   1438  126e							; (goto label if carry is set)
   1439  126e
   1440  126e		       4c 81 d2 	      jmp	._Level_Reset
   1441  1271
   1442  1271
   1443  1271
   1444  1271				   ._User_Level_Compare
   1445  1271
   1446  1271		       f8		      sed		; Set the Decimal Mode Flag
   1447  1272
   1448  1272		       a5 ac		      lda	max_priv_level_bcd3	; Load the Accumulator
   1449  1274
   1450  1274		       c5 95		      cmp	_sc3	; Compare Memory and the Accumulator
   1451  1276
   1452  1276		       a5 ab		      lda	max_priv_level_bcd2	; Load the Accumulator
   1453  1278
   1454  1278		       e5 94		      sbc	_sc2	; Subtract With Carry
   1455  127a
   1456  127a		       a5 aa		      lda	max_priv_level_bcd1	; Load the Accumulator
   1457  127c
   1458  127c		       e5 93		      sbc	_sc1	; Subtract With Carry
   1459  127e
   1460  127e		       d8		      cld		; Clear the Decimal Flag
   1461  127f
   1462  127f		       b0 0c		      bcs	._Skip_Level_Reset	; Branch if Carry Set
   1463  1281
   1464  1281							; (goto label if carry is set)
   1465  1281
   1466  1281
   1467  1281
   1468  1281				   ._Level_Reset
   1469  1281							; _Level_Reset
   1470  1281
   1471  1281				   .L0283		;  score  =  1
   1472  1281
   1473  1281		       a9 01		      LDA	#$01
   1474  1283		       85 95		      STA	score+2
   1475  1285		       a9 00		      LDA	#$00
   1476  1287		       85 94		      STA	score+1
   1477  1289		       a9 00		      LDA	#$00
   1478  128b		       85 93		      STA	score
   1479  128d				   .
   1480  128d							; 
   1481  128d
   1482  128d				   ._Skip_Level_Reset
   1483  128d							; _Skip_Level_Reset
   1484  128d
   1485  128d				   .L0284		;  if _sc1  =	0  &&  _sc2  =	0  &&  _sc3  =	0 then _sc1  =	max_pub_level_bcd1  :  _sc2  =	max_pub_level_bcd2  :  _sc3  =	max_pub_level_bcd3
   1486  128d
   1487  128d		       a5 93		      LDA	_sc1
   1488  128f		       c9 00		      CMP	#0
   1489  1291		       d0 18		      BNE	.skipL0284
   1490  1293				   .condpart5
   1491  1293		       a5 94		      LDA	_sc2
   1492  1295		       c9 00		      CMP	#0
   1493  1297		       d0 12		      BNE	.skip5then
   1494  1299				   .condpart6
   1495  1299		       a5 95		      LDA	_sc3
   1496  129b		       c9 00		      CMP	#0
   1497  129d		       d0 0c		      BNE	.skip6then
   1498  129f				   .condpart7
   1499  129f		       a5 a7		      LDA	max_pub_level_bcd1
   1500  12a1		       85 93		      STA	_sc1
   1501  12a3		       a5 a8		      LDA	max_pub_level_bcd2
   1502  12a5		       85 94		      STA	_sc2
   1503  12a7		       a5 a9		      LDA	max_pub_level_bcd3
   1504  12a9		       85 95		      STA	_sc3
   1505  12ab				   .skip6then
   1506  12ab				   .skip5then
   1507  12ab				   .skipL0284
   1508  12ab				   .
   1509  12ab							; 
   1510  12ab
   1511  12ab				   .L0285		;  if switchselect then gamenumber  =	gamenumber  +  1  :  delay_counter  =  20  :  if gamenumber  >	4  &&  has_private_levels then gamenumber  =  1 else if gamenumber  >  2  &&  !has_private_levels then gamenumber  =  1
   1512  12ab
   1513  12ab		       a9 02		      lda	#2
   1514  12ad		       2c 82 02 	      bit	SWCHB
   1515  12b0		       d0 17		      BNE	.skipL0285
   1516  12b2				   .condpart8
   1517  12b2		       e6 a6		      INC	gamenumber
   1518  12b4		       a9 14		      LDA	#20
   1519  12b6		       85 d4		      STA	delay_counter
   1520  12b8		       a9 04		      LDA	#4
   1521  12ba		       c5 a6		      CMP	gamenumber
   1522  12bc		       b0 0b		      BCS	.skip8then
   1523  12be				   .condpart9
   1524  12be		       a5 ad		      LDA	has_private_levels
   1525  12c0		       f0 07		      BEQ	.skip9then
   1526  12c2				   .condpart10
   1527  12c2		       a9 01		      LDA	#1
   1528  12c4		       85 a6		      STA	gamenumber
   1529  12c6		       4c d7 d2 	      jmp	.skipelse0
   1530  12c9				   .skip9then
   1531  12c9				   .skip8then
   1532  12c9				   .skipL0285
   1533  12c9		       a9 02		      LDA	#2
   1534  12cb		       c5 a6		      CMP	gamenumber
   1535  12cd		       b0 08		      BCS	.skipelse
   1536  12cf				   .condpart11
   1537  12cf		       a5 ad		      LDA	has_private_levels
   1538  12d1		       d0 04		      BNE	.skip11then
   1539  12d3				   .condpart12
   1540  12d3		       a9 01		      LDA	#1
   1541  12d5		       85 a6		      STA	gamenumber
   1542  12d7				   .skip11then
   1543  12d7				   .skipelse
   1544  12d7				   .skipelse0
   1545  12d7				   .L0286		;  if !joy0fire then goto _titlescreen_menu
   1546  12d7
   1547  12d7		       24 0c		      bit	INPT4
   1548  12d9		       10 03		      BPL	.skipL0286
   1549  12db				   .condpart13
   1550  12db		       4c 7c d1 	      jmp	._titlescreen_menu
   1551  12de
   1552  12de				   .skipL0286
   1553  12de				   .
   1554  12de							; 
   1555  12de
   1556  12de				   .L0287		;  WriteToBuffer  =  _sc1  :  WriteToBuffer  =  _sc2  :  WriteToBuffer  =  _sc3  :  WriteToBuffer  =  gamenumber  :  WriteSendBuffer  =  req_load  :  _Bit5_Request_Pending{5}  =  1
   1557  12de
   1558  12de		       a5 93		      LDA	_sc1
   1559  12e0		       8d f0 1f 	      STA	WriteToBuffer
   1560  12e3		       a5 94		      LDA	_sc2
   1561  12e5		       8d f0 1f 	      STA	WriteToBuffer
   1562  12e8		       a5 95		      LDA	_sc3
   1563  12ea		       8d f0 1f 	      STA	WriteToBuffer
   1564  12ed		       a5 a6		      LDA	gamenumber
   1565  12ef		       8d f0 1f 	      STA	WriteToBuffer
   1566  12f2		       a9 00		      LDA	#req_load
   1567  12f4		       8d f1 1f 	      STA	WriteSendBuffer
   1568  12f7		       a5 ec		      LDA	_Bit5_Request_Pending
   1569  12f9		       09 20		      ORA	#32
   1570  12fb		       85 ec		      STA	_Bit5_Request_Pending
   1571  12fd				   .
   1572  12fd							; 
   1573  12fd
   1574  12fd				   .L0288		;  player1y  =  player_min_y  :  score  =  0  :  _Bit4_Game_Over{4}  =  0
   1575  12fd
   1576  12fd		       a9 02		      LDA	#player_min_y
   1577  12ff		       85 86		      STA	player1y
   1578  1301		       a9 00		      LDA	#$00
   1579  1303		       85 95		      STA	score+2
   1580  1305		       a9 00		      LDA	#$00
   1581  1307		       85 94		      STA	score+1
   1582  1309		       a9 00		      LDA	#$00
   1583  130b		       85 93		      STA	score
   1584  130d		       a5 ec		      LDA	_Bit4_Game_Over
   1585  130f		       29 ef		      AND	#239
   1586  1311		       85 ec		      STA	_Bit4_Game_Over
   1587  1313				   .L0289		;  pfscore1  =  %00101010  :  pfscore2  =  255  :  pfscorecolor  =  _1C
   1588  1313
   1589  1313		       a9 2a		      LDA	#%00101010
   1590  1315		       85 f2		      STA	pfscore1
   1591  1317		       a9 ff		      LDA	#255
   1592  1319		       85 f3		      STA	pfscore2
   1593  131b		       a9 1c		      LDA	#_1C
   1594  131d		       85 f4		      STA	pfscorecolor
   1595  131f				   .
   1596  131f							; 
   1597  131f
   1598  131f				   .
   1599  131f							; 
   1600  131f
   1601  131f				   .L0290		;  asm
   1602  131f
   1603  131f		       a9 f0		      lda	#>(r_room_color_middle-132+pfres*pfwidth)
   1604  1321
   1605  1321		       85 f1		      sta	pfcolortable+1
   1606  1323
   1607  1323		       a9 6f		      lda	#<(r_room_color_middle-132+pfres*pfwidth)
   1608  1325
   1609  1325		       85 f0		      sta	pfcolortable
   1610  1327
   1611  1327				   .
   1612  1327							; 
   1613  1327
   1614  1327				   .
   1615  1327							; 
   1616  1327
   1617  1327				   .
   1618  1327							; 
   1619  1327
   1620  1327				   .
   1621  1327							; 
   1622  1327
   1623  1327				   .
   1624  1327							; 
   1625  1327
   1626  1327				   .
   1627  1327							; 
   1628  1327
   1629  1327				   .__Main_Loop
   1630  1327							; __Main_Loop
   1631  1327
   1632  1327				   .L0291		;  COLUPF  =  r_room_color_top
   1633  1327
   1634  1327		       ad e2 f0 	      LDA	r_room_color_top
   1635  132a		       85 08		      STA	COLUPF
   1636  132c				   .L0292		;  NUSIZ1  =  $05
   1637  132c
   1638  132c		       a9 05		      LDA	#$05
   1639  132e		       85 05		      STA	NUSIZ1
   1640  1330				   .L0293		;  NUSIZ0  =  $10
   1641  1330
   1642  1330		       a9 10		      LDA	#$10
   1643  1332		       85 04		      STA	NUSIZ0
   1644  1334				   .L0294		;  COLUBK  =  _00
   1645  1334
   1646  1334		       a9 00		      LDA	#_00
   1647  1336		       85 09		      STA	COLUBK
   1648  1338				   .
   1649  1338							; 
   1650  1338
   1651  1338				   .L0295		;  if switchreset then goto _Start
   1652  1338
   1653  1338		       a9 01		      lda	#1
   1654  133a		       2c 82 02 	      bit	SWCHB
   1655  133d		       d0 03		      BNE	.skipL0295
   1656  133f				   .condpart14
   1657  133f		       4c 00 d1 	      jmp	._Start
   1658  1342
   1659  1342				   .skipL0295
   1660  1342				   .
   1661  1342							; 
   1662  1342
   1663  1342				   .L0296		;  if frame_counter{2} then player1: 
   1664  1342
   1665  1342		       a5 d5		      LDA	frame_counter
   1666  1344		       29 04		      AND	#4
   1667  1346		       f0 0c		      BEQ	.skipL0296
   1668  1348				   .condpart15
   1669  1348		       a2 e4		      LDX	#<player15then_1
   1670  134a		       86 8c		      STX	player1pointerlo
   1671  134c		       a9 fe		      LDA	#>player15then_1
   1672  134e		       85 8d		      STA	player1pointerhi
   1673  1350		       a9 07		      LDA	#7
   1674  1352		       85 8f		      STA	player1height
   1675  1354				   .skipL0296
   1676  1354				   .L0297		;  if ! frame_counter{2} then player1:
   1677  1354
   1678  1354		       a5 d5		      LDA	frame_counter
   1679  1356		       29 04		      AND	#4
   1680  1358		       d0 0c		      BNE	.skipL0297
   1681  135a				   .condpart16
   1682  135a		       a2 ec		      LDX	#<player16then_1
   1683  135c		       86 8c		      STX	player1pointerlo
   1684  135e		       a9 fe		      LDA	#>player16then_1
   1685  1360		       85 8d		      STA	player1pointerhi
   1686  1362		       a9 07		      LDA	#7
   1687  1364		       85 8f		      STA	player1height
   1688  1366				   .skipL0297
   1689  1366				   .
   1690  1366							; 
   1691  1366
   1692  1366				   .L0298		;  on roommate_type goto _roommate_Enemy_def _roommate_Air_Missile_def _roommate_Fuel_def _roommate_Soldier_def
   1693  1366
   1694  1366		       a6 de		      LDX	roommate_type
   1695  1368		       bd 71 d3 	      LDA	.L0298jumptablehi,x
   1696  136b		       48		      PHA
   1697  136c		       bd 75 d3 	      LDA	.L0298jumptablelo,x
   1698  136f		       48		      PHA
   1699  1370		       60		      RTS
   1700  1371				   .L0298jumptablehi
   1701  1371		       d3		      .byte.b	>(._roommate_Enemy_def-1)
   1702  1372		       d3		      .byte.b	>(._roommate_Air_Missile_def-1)
   1703  1373		       d3		      .byte.b	>(._roommate_Fuel_def-1)
   1704  1374		       d3		      .byte.b	>(._roommate_Soldier_def-1)
   1705  1375				   .L0298jumptablelo
   1706  1375		       78		      .byte.b	<(._roommate_Enemy_def-1)
   1707  1376		       9f		      .byte.b	<(._roommate_Air_Missile_def-1)
   1708  1377		       ae		      .byte.b	<(._roommate_Fuel_def-1)
   1709  1378		       bd		      .byte.b	<(._roommate_Soldier_def-1)
   1710  1379				   .
   1711  1379							; 
   1712  1379
   1713  1379				   ._roommate_Enemy_def
   1714  1379							; _roommate_Enemy_def
   1715  1379
   1716  1379				   .L0299		;  if frame_counter{2} then player0: 
   1717  1379
   1718  1379		       a5 d5		      LDA	frame_counter
   1719  137b		       29 04		      AND	#4
   1720  137d		       f0 0c		      BEQ	.skipL0299
   1721  137f				   .condpart17
   1722  137f		       a2 f4		      LDX	#<player17then_0
   1723  1381		       86 8a		      STX	player0pointerlo
   1724  1383		       a9 fe		      LDA	#>player17then_0
   1725  1385		       85 8b		      STA	player0pointerhi
   1726  1387		       a9 06		      LDA	#6
   1727  1389		       85 8e		      STA	player0height
   1728  138b				   .skipL0299
   1729  138b				   .L0300		;  if !frame_counter{2} then player0: 
   1730  138b
   1731  138b		       a5 d5		      LDA	frame_counter
   1732  138d		       29 04		      AND	#4
   1733  138f		       d0 0c		      BNE	.skipL0300
   1734  1391				   .condpart18
   1735  1391		       a2 00		      LDX	#<player18then_0
   1736  1393		       86 8a		      STX	player0pointerlo
   1737  1395		       a9 ff		      LDA	#>player18then_0
   1738  1397		       85 8b		      STA	player0pointerhi
   1739  1399		       a9 06		      LDA	#6
   1740  139b		       85 8e		      STA	player0height
   1741  139d				   .skipL0300
   1742  139d				   .L0301		;  goto _roommate_End_def
   1743  139d
   1744  139d		       4c e2 d3 	      jmp	._roommate_End_def
   1745  13a0
   1746  13a0				   .
   1747  13a0							; 
   1748  13a0
   1749  13a0				   ._roommate_Air_Missile_def
   1750  13a0							; _roommate_Air_Missile_def
   1751  13a0
   1752  13a0				   .L0302		;  player0: 
   1753  13a0
   1754  13a0		       a2 07		      LDX	#<playerL0302_0
   1755  13a2		       86 8a		      STX	player0pointerlo
   1756  13a4		       a9 ff		      LDA	#>playerL0302_0
   1757  13a6		       85 8b		      STA	player0pointerhi
   1758  13a8		       a9 0b		      LDA	#11
   1759  13aa		       85 8e		      STA	player0height
   1760  13ac				   .L0303		;  goto _roommate_End_def
   1761  13ac
   1762  13ac		       4c e2 d3 	      jmp	._roommate_End_def
   1763  13af
   1764  13af				   .
   1765  13af							; 
   1766  13af
   1767  13af				   ._roommate_Fuel_def
   1768  13af							; _roommate_Fuel_def
   1769  13af
   1770  13af				   .L0304		;  player0: 
   1771  13af
   1772  13af		       a2 13		      LDX	#<playerL0304_0
   1773  13b1		       86 8a		      STX	player0pointerlo
   1774  13b3		       a9 ff		      LDA	#>playerL0304_0
   1775  13b5		       85 8b		      STA	player0pointerhi
   1776  13b7		       a9 18		      LDA	#24
   1777  13b9		       85 8e		      STA	player0height
   1778  13bb				   .L0305		;  goto _roommate_End_def
   1779  13bb
   1780  13bb		       4c e2 d3 	      jmp	._roommate_End_def
   1781  13be
   1782  13be				   .
   1783  13be							; 
   1784  13be
   1785  13be				   ._roommate_Soldier_def
   1786  13be							; _roommate_Soldier_def
   1787  13be
   1788  13be				   .L0306		;  if frame_counter{2} then player0: 
   1789  13be
   1790  13be		       a5 d5		      LDA	frame_counter
   1791  13c0		       29 04		      AND	#4
   1792  13c2		       f0 0c		      BEQ	.skipL0306
   1793  13c4				   .condpart19
   1794  13c4		       a2 2c		      LDX	#<player19then_0
   1795  13c6		       86 8a		      STX	player0pointerlo
   1796  13c8		       a9 ff		      LDA	#>player19then_0
   1797  13ca		       85 8b		      STA	player0pointerhi
   1798  13cc		       a9 03		      LDA	#3
   1799  13ce		       85 8e		      STA	player0height
   1800  13d0				   .skipL0306
   1801  13d0				   .L0307		;  if !frame_counter{2} then player0: 
   1802  13d0
   1803  13d0		       a5 d5		      LDA	frame_counter
   1804  13d2		       29 04		      AND	#4
   1805  13d4		       d0 0c		      BNE	.skipL0307
   1806  13d6				   .condpart20
   1807  13d6		       a2 30		      LDX	#<player20then_0
   1808  13d8		       86 8a		      STX	player0pointerlo
   1809  13da		       a9 ff		      LDA	#>player20then_0
   1810  13dc		       85 8b		      STA	player0pointerhi
   1811  13de		       a9 03		      LDA	#3
   1812  13e0		       85 8e		      STA	player0height
   1813  13e2				   .skipL0307
   1814  13e2				   ._roommate_End_def
   1815  13e2							; _roommate_End_def
   1816  13e2
   1817  13e2				   .
   1818  13e2							; 
   1819  13e2
   1820  13e2				   .
   1821  13e2							; 
   1822  13e2
   1823  13e2				   .L0308		;  if !frame_counter{4} then _Skip_Wall_Movement
   1824  13e2
   1825  13e2		       a5 d5		      LDA	frame_counter
   1826  13e4		       29 10		      AND	#16
   1827  13e6					      if	((* - ._Skip_Wall_Movement) < 127) && ((* - ._Skip_Wall_Movement) > -128)
   1828  13e6		       f0 35		      BEQ	._Skip_Wall_Movement
   1829  13e8				  -	      else
   1830  13e8				  -	      bne	.3skip_Skip_Wall_Movement
   1831  13e8				  -	      jmp	._Skip_Wall_Movement
   1832  13e8				  -.3skip_Skip_Wall_Movement
   1833  13e8					      endif
   1834  13e8				   .L0309		;  if r_extra_wall_type_and_range{1}  ||  r_extra_wall_type_and_range	<  2 then _Finish_Interior_Movement
   1835  13e8
   1836  13e8		       ad eb f0 	      LDA	r_extra_wall_type_and_range
   1837  13eb		       29 02		      AND	#2
   1838  13ed					      if	((* - ._Finish_Interior_Movement) < 127) && ((* - ._Finish_Interior_Movement) > -128)
   1839  13ed		       d0 58		      BNE	._Finish_Interior_Movement
   1840  13ef				  -	      else
   1841  13ef				  -	      beq	.4skip_Finish_Interior_Movement
   1842  13ef				  -	      jmp	._Finish_Interior_Movement
   1843  13ef				  -.4skip_Finish_Interior_Movement
   1844  13ef					      endif
   1845  13ef		       ad eb f0 	      LDA	r_extra_wall_type_and_range
   1846  13f2		       c9 02		      CMP	#2
   1847  13f4					      if	((* - ._Finish_Interior_Movement) < 127) && ((* - ._Finish_Interior_Movement) > -128)
   1848  13f4		       90 51		      bcc	._Finish_Interior_Movement
   1849  13f6				  -	      else
   1850  13f6				  -	      bcs	.5skip_Finish_Interior_Movement
   1851  13f6				  -	      jmp	._Finish_Interior_Movement
   1852  13f6				  -.5skip_Finish_Interior_Movement
   1853  13f6					      endif
   1854  13f6				   .L0310		;  if _Bit1_Wall_Dir{1} then extra_wall_move_x  =  extra_wall_move_x  -  1 else extra_wall_move_x  =  extra_wall_move_x  +  1
   1855  13f6
   1856  13f6		       a5 ec		      LDA	_Bit1_Wall_Dir
   1857  13f8		       29 02		      AND	#2
   1858  13fa		       f0 05		      BEQ	.skipL0310
   1859  13fc				   .condpart21
   1860  13fc		       c6 dc		      DEC	extra_wall_move_x
   1861  13fe		       4c 03 d4 	      jmp	.skipelse1
   1862  1401				   .skipL0310
   1863  1401		       e6 dc		      INC	extra_wall_move_x
   1864  1403				   .skipelse1
   1865  1403				   .L0311		;  if extra_wall_move_x  =  r_extra_wall_type_and_range then _Bit1_Wall_Dir{1}  =  1
   1866  1403
   1867  1403		       a5 dc		      LDA	extra_wall_move_x
   1868  1405		       cd eb f0 	      CMP	r_extra_wall_type_and_range
   1869  1408		       d0 06		      BNE	.skipL0311
   1870  140a				   .condpart22
   1871  140a		       a5 ec		      LDA	_Bit1_Wall_Dir
   1872  140c		       09 02		      ORA	#2
   1873  140e		       85 ec		      STA	_Bit1_Wall_Dir
   1874  1410				   .skipL0311
   1875  1410				   .L0312		;  if !extra_wall_move_x then _Bit1_Wall_Dir{1}  =  0
   1876  1410
   1877  1410		       a5 dc		      LDA	extra_wall_move_x
   1878  1412		       d0 06		      BNE	.skipL0312
   1879  1414				   .condpart23
   1880  1414		       a5 ec		      LDA	_Bit1_Wall_Dir
   1881  1416		       29 fd		      AND	#253
   1882  1418		       85 ec		      STA	_Bit1_Wall_Dir
   1883  141a				   .skipL0312
   1884  141a				   .L0313		;  goto _Finish_Interior_Movement
   1885  141a
   1886  141a		       4c 47 d4 	      jmp	._Finish_Interior_Movement
   1887  141d
   1888  141d				   ._Skip_Wall_Movement
   1889  141d							; _Skip_Wall_Movement
   1890  141d
   1891  141d				   .
   1892  141d							; 
   1893  141d
   1894  141d				   .L0314		;  if r_roommate_type_and_range  <  4 then _Finish_Interior_Movement
   1895  141d
   1896  141d		       ad e8 f0 	      LDA	r_roommate_type_and_range
   1897  1420		       c9 04		      CMP	#4
   1898  1422					      if	((* - ._Finish_Interior_Movement) < 127) && ((* - ._Finish_Interior_Movement) > -128)
   1899  1422		       90 23		      bcc	._Finish_Interior_Movement
   1900  1424				  -	      else
   1901  1424				  -	      bcs	.6skip_Finish_Interior_Movement
   1902  1424				  -	      jmp	._Finish_Interior_Movement
   1903  1424				  -.6skip_Finish_Interior_Movement
   1904  1424					      endif
   1905  1424				   .L0315		;  if _Bit0_roommate_Dir{0} then roommate_move_x  =  roommate_move_x  -  1 else roommate_move_x  =  roommate_move_x  +  1
   1906  1424
   1907  1424		       a5 ec		      LDA	_Bit0_roommate_Dir
   1908  1426		       4a		      LSR
   1909  1427		       90 05		      BCC	.skipL0315
   1910  1429				   .condpart24
   1911  1429		       c6 dd		      DEC	roommate_move_x
   1912  142b		       4c 30 d4 	      jmp	.skipelse2
   1913  142e				   .skipL0315
   1914  142e		       e6 dd		      INC	roommate_move_x
   1915  1430				   .skipelse2
   1916  1430				   .L0316		;  if roommate_move_x	=  r_roommate_type_and_range then _Bit0_roommate_Dir{0}  =  1
   1917  1430
   1918  1430		       a5 dd		      LDA	roommate_move_x
   1919  1432		       cd e8 f0 	      CMP	r_roommate_type_and_range
   1920  1435		       d0 06		      BNE	.skipL0316
   1921  1437				   .condpart25
   1922  1437		       a5 ec		      LDA	_Bit0_roommate_Dir
   1923  1439		       09 01		      ORA	#1
   1924  143b		       85 ec		      STA	_Bit0_roommate_Dir
   1925  143d				   .skipL0316
   1926  143d				   .L0317		;  if !roommate_move_x then _Bit0_roommate_Dir{0}  =  0
   1927  143d
   1928  143d		       a5 dd		      LDA	roommate_move_x
   1929  143f		       d0 06		      BNE	.skipL0317
   1930  1441				   .condpart26
   1931  1441		       a5 ec		      LDA	_Bit0_roommate_Dir
   1932  1443		       29 fe		      AND	#254
   1933  1445		       85 ec		      STA	_Bit0_roommate_Dir
   1934  1447				   .skipL0317
   1935  1447				   .
   1936  1447							; 
   1937  1447
   1938  1447				   ._Finish_Interior_Movement
   1939  1447							; _Finish_Interior_Movement
   1940  1447
   1941  1447				   .
   1942  1447							; 
   1943  1447
   1944  1447				   .L0318		;  frame_counter  =  frame_counter  +	1
   1945  1447
   1946  1447		       e6 d5		      INC	frame_counter
   1947  1449				   .
   1948  1449							; 
   1949  1449
   1950  1449				   .
   1951  1449							; 
   1952  1449
   1953  1449				   .L0319		;  if r_extra_wall_startpos_x	=  200 then _Skip_extra_Wall
   1954  1449
   1955  1449		       ad ee f0 	      LDA	r_extra_wall_startpos_x
   1956  144c		       c9 c8		      CMP	#200
   1957  144e					      if	((* - ._Skip_extra_Wall) < 127) && ((* - ._Skip_extra_Wall) > -128)
   1958  144e		       f0 3c		      BEQ	._Skip_extra_Wall
   1959  1450				  -	      else
   1960  1450				  -	      bne	.7skip_Skip_extra_Wall
   1961  1450				  -	      jmp	._Skip_extra_Wall
   1962  1450				  -.7skip_Skip_extra_Wall
   1963  1450					      endif
   1964  1450				   .L0320		;  if _Bit3_Ball_Shot_Moving{3}  &&  frame_counter{0} then _Skip_extra_Wall
   1965  1450
   1966  1450		       a5 ec		      LDA	_Bit3_Ball_Shot_Moving
   1967  1452		       29 08		      AND	#8
   1968  1454		       f0 05		      BEQ	.skipL0320
   1969  1456				   .condpart27
   1970  1456		       a5 d5		      LDA	frame_counter
   1971  1458		       4a		      LSR
   1972  1459					      if	((* - ._Skip_extra_Wall) < 127) && ((* - ._Skip_extra_Wall) > -128)
   1973  1459		       b0 31		      bcs	._Skip_extra_Wall
   1974  145b				  -	      else
   1975  145b				  -	      bcc	.8skip_Skip_extra_Wall
   1976  145b				  -	      jmp	._Skip_extra_Wall
   1977  145b				  -.8skip_Skip_extra_Wall
   1978  145b					      endif
   1979  145b				   .skipL0320
   1980  145b				   .L0321		;  ballx  =  r_extra_wall_startpos_x  +  extra_wall_move_x
   1981  145b
   1982  145b		       ad ee f0 	      LDA	r_extra_wall_startpos_x
   1983  145e		       18		      CLC
   1984  145f		       65 dc		      ADC	extra_wall_move_x
   1985  1461		       85 84		      STA	ballx
   1986  1463				   .L0322		;  if r_extra_wall_type_and_range{1}  &&  frame_counter  <  r_extra_wall_type_and_range then bally  =	0 else bally  =  r_extra_wall_startpos_y
   1987  1463
   1988  1463		       ad eb f0 	      LDA	r_extra_wall_type_and_range
   1989  1466		       29 02		      AND	#2
   1990  1468		       f0 0e		      BEQ	.skipL0322
   1991  146a				   .condpart28
   1992  146a		       a5 d5		      LDA	frame_counter
   1993  146c		       cd eb f0 	      CMP	r_extra_wall_type_and_range
   1994  146f		       b0 07		      BCS	.skip28then
   1995  1471				   .condpart29
   1996  1471		       a9 00		      LDA	#0
   1997  1473		       85 89		      STA	bally
   1998  1475		       4c 7d d4 	      jmp	.skipelse3
   1999  1478				   .skip28then
   2000  1478				   .skipL0322
   2001  1478		       ad ef f0 	      LDA	r_extra_wall_startpos_y
   2002  147b		       85 89		      STA	bally
   2003  147d				   .skipelse3
   2004  147d				   .L0323		;  ballheight	=  r_extra_wall_height
   2005  147d
   2006  147d		       ad ed f0 	      LDA	r_extra_wall_height
   2007  1480		       85 92		      STA	ballheight
   2008  1482				   .L0324		;  CTRLPF  =  r_extra_wall_width  |  1
   2009  1482
   2010  1482		       ad ec f0 	      LDA	r_extra_wall_width
   2011  1485		       09 01		      ORA	#1
   2012  1487		       85 0a		      STA	CTRLPF
   2013  1489				   .L0325		;  goto _Skip_ball_shot
   2014  1489
   2015  1489		       4c a2 d4 	      jmp	._Skip_ball_shot
   2016  148c
   2017  148c				   ._Skip_extra_Wall
   2018  148c							; _Skip_extra_Wall
   2019  148c
   2020  148c				   .
   2021  148c							; 
   2022  148c
   2023  148c				   .L0326		;  if !_Bit3_Ball_Shot_Moving{3} then _Skip_ball_shot
   2024  148c
   2025  148c		       a5 ec		      LDA	_Bit3_Ball_Shot_Moving
   2026  148e		       29 08		      AND	#8
   2027  1490					      if	((* - ._Skip_ball_shot) < 127) && ((* - ._Skip_ball_shot) > -128)
   2028  1490		       f0 10		      BEQ	._Skip_ball_shot
   2029  1492				  -	      else
   2030  1492				  -	      bne	.9skip_Skip_ball_shot
   2031  1492				  -	      jmp	._Skip_ball_shot
   2032  1492				  -.9skip_Skip_ball_shot
   2033  1492					      endif
   2034  1492				   .L0327		;  ballx  =  ball_shoot_x
   2035  1492
   2036  1492		       a5 ae		      LDA	ball_shoot_x
   2037  1494		       85 84		      STA	ballx
   2038  1496				   .L0328		;  bally  =  ball_shoot_y
   2039  1496
   2040  1496		       a5 af		      LDA	ball_shoot_y
   2041  1498		       85 89		      STA	bally
   2042  149a				   .L0329		;  ballheight	=  1
   2043  149a
   2044  149a		       a9 01		      LDA	#1
   2045  149c		       85 92		      STA	ballheight
   2046  149e				   .L0330		;  CTRLPF  =  %00010001
   2047  149e
   2048  149e		       a9 11		      LDA	#%00010001
   2049  14a0		       85 0a		      STA	CTRLPF
   2050  14a2				   ._Skip_ball_shot
   2051  14a2							; _Skip_ball_shot
   2052  14a2
   2053  14a2				   .
   2054  14a2							; 
   2055  14a2
   2056  14a2				   .
   2057  14a2							; 
   2058  14a2
   2059  14a2				   .L0331		;  if r_roommate_startpos_y  =  200 then _Skip_enemy
   2060  14a2
   2061  14a2		       ad ea f0 	      LDA	r_roommate_startpos_y
   2062  14a5		       c9 c8		      CMP	#200
   2063  14a7					      if	((* - ._Skip_enemy) < 127) && ((* - ._Skip_enemy) > -128)
   2064  14a7		       f0 0d		      BEQ	._Skip_enemy
   2065  14a9				  -	      else
   2066  14a9				  -	      bne	.10skip_Skip_enemy
   2067  14a9				  -	      jmp	._Skip_enemy
   2068  14a9				  -.10skip_Skip_enemy
   2069  14a9					      endif
   2070  14a9				   .L0332		;  player0x  =  r_roommate_startpos_x	+  roommate_move_x
   2071  14a9
   2072  14a9		       ad e9 f0 	      LDA	r_roommate_startpos_x
   2073  14ac		       18		      CLC
   2074  14ad		       65 dd		      ADC	roommate_move_x
   2075  14af		       85 80		      STA	player0x
   2076  14b1				   .L0333		;  player0y  =  r_roommate_startpos_y
   2077  14b1
   2078  14b1		       ad ea f0 	      LDA	r_roommate_startpos_y
   2079  14b4		       85 85		      STA	player0y
   2080  14b6				   ._Skip_enemy
   2081  14b6							; _Skip_enemy
   2082  14b6
   2083  14b6				   .
   2084  14b6							; 
   2085  14b6
   2086  14b6				   .
   2087  14b6							; 
   2088  14b6
   2089  14b6				   .
   2090  14b6							; 
   2091  14b6
   2092  14b6				   .
   2093  14b6							; 
   2094  14b6
   2095  14b6				   .L0334		;  if delay_counter  >  0 then delay_counter  =  delay_counter  -  1  :  goto _skip_game_action
   2096  14b6
   2097  14b6		       a9 00		      LDA	#0
   2098  14b8		       c5 d4		      CMP	delay_counter
   2099  14ba		       b0 05		      BCS	.skipL0334
   2100  14bc				   .condpart30
   2101  14bc		       c6 d4		      DEC	delay_counter
   2102  14be		       4c da d9 	      jmp	._skip_game_action
   2103  14c1
   2104  14c1				   .skipL0334
   2105  14c1				   .
   2106  14c1							; 
   2107  14c1
   2108  14c1				   .L0335		;  if ReceiveBufferSize  >  response_size_minus_1 then goto _Change_Room
   2109  14c1
   2110  14c1		       a9 1a		      LDA	#response_size_minus_1
   2111  14c3		       cd f3 1f 	      CMP	ReceiveBufferSize
   2112  14c6		       b0 03		      BCS	.skipL0335
   2113  14c8				   .condpart31
   2114  14c8		       4c 06 dc 	      jmp	._Change_Room
   2115  14cb
   2116  14cb				   .skipL0335
   2117  14cb				   .
   2118  14cb							; 
   2119  14cb
   2120  14cb				   .L0336		;  if _Bit5_Request_Pending{5}  ||  _Bit4_Game_Over{4} then goto _skip_game_action
   2121  14cb
   2122  14cb		       a5 ec		      LDA	_Bit5_Request_Pending
   2123  14cd		       29 20		      AND	#32
   2124  14cf		       f0 03		      BEQ	.skipL0336
   2125  14d1				   .condpart32
   2126  14d1		       4c da d4 	      jmp	.condpart33
   2127  14d4				   .skipL0336
   2128  14d4		       a5 ec		      LDA	_Bit4_Game_Over
   2129  14d6		       29 10		      AND	#16
   2130  14d8		       f0 03		      BEQ	.skip7OR
   2131  14da				   .condpart33
   2132  14da		       4c da d9 	      jmp	._skip_game_action
   2133  14dd
   2134  14dd				   .skip7OR
   2135  14dd				   .
   2136  14dd							; 
   2137  14dd
   2138  14dd				   .L0337		;  if !_Bit2_Level_finished{2} then _game_action
   2139  14dd
   2140  14dd		       a5 ec		      LDA	_Bit2_Level_finished
   2141  14df		       29 04		      AND	#4
   2142  14e1					      if	((* - ._game_action) < 127) && ((* - ._game_action) > -128)
   2143  14e1		       f0 5d		      BEQ	._game_action
   2144  14e3				  -	      else
   2145  14e3				  -	      bne	.11skip_game_action
   2146  14e3				  -	      jmp	._game_action
   2147  14e3				  -.11skip_game_action
   2148  14e3					      endif
   2149  14e3				   .
   2150  14e3							; 
   2151  14e3
   2152  14e3				   .
   2153  14e3							; 
   2154  14e3
   2155  14e3				   .L0338		;  if pfscore2 then pfscore2  =  pfscore2  /  2  :  score  =  score  +  100  :  goto _bonus_sound_delay
   2156  14e3
   2157  14e3		       a5 f3		      LDA	pfscore2
   2158  14e5		       f0 17		      BEQ	.skipL0338
   2159  14e7				   .condpart34
   2160  14e7		       a5 f3		      LDA	pfscore2
   2161  14e9		       4a		      lsr
   2162  14ea		       85 f3		      STA	pfscore2
   2163  14ec		       f8		      SED
   2164  14ed		       18		      CLC
   2165  14ee		       a5 94		      LDA	score+1
   2166  14f0		       69 01		      ADC	#$01
   2167  14f2		       85 94		      STA	score+1
   2168  14f4		       a5 93		      LDA	score
   2169  14f6		       69 00		      ADC	#$00
   2170  14f8		       85 93		      STA	score
   2171  14fa		       d8		      CLD
   2172  14fb		       4c 2d d5 	      jmp	._bonus_sound_delay
   2173  14fe
   2174  14fe				   .skipL0338
   2175  14fe				   .
   2176  14fe							; 
   2177  14fe
   2178  14fe				   .
   2179  14fe							; 
   2180  14fe
   2181  14fe				   .L0339		;  if pfscore1 then pfscore1  =  pfscore1  /  4  :  score  =  score  +  200  :  goto _bonus_sound_delay
   2182  14fe
   2183  14fe		       a5 f2		      LDA	pfscore1
   2184  1500		       f0 18		      BEQ	.skipL0339
   2185  1502				   .condpart35
   2186  1502		       a5 f2		      LDA	pfscore1
   2187  1504		       4a		      lsr
   2188  1505		       4a		      lsr
   2189  1506		       85 f2		      STA	pfscore1
   2190  1508		       f8		      SED
   2191  1509		       18		      CLC
   2192  150a		       a5 94		      LDA	score+1
   2193  150c		       69 02		      ADC	#$02
   2194  150e		       85 94		      STA	score+1
   2195  1510		       a5 93		      LDA	score
   2196  1512		       69 00		      ADC	#$00
   2197  1514		       85 93		      STA	score
   2198  1516		       d8		      CLD
   2199  1517		       4c 2d d5 	      jmp	._bonus_sound_delay
   2200  151a
   2201  151a				   .skipL0339
   2202  151a				   .L0340		;  if joy0fire then _Bit2_Level_finished{2}  =  0  :  goto _Level_Up else goto _skip_game_action
   2203  151a
   2204  151a		       24 0c		      bit	INPT4
   2205  151c		       30 0c		      BMI	.skipL0340
   2206  151e				   .condpart36
   2207  151e		       a5 ec		      LDA	_Bit2_Level_finished
   2208  1520		       29 fb		      AND	#251
   2209  1522		       85 ec		      STA	_Bit2_Level_finished
   2210  1524		       4c 90 db 	      jmp	._Level_Up
   2211  1527		       4c 2d d5 	      jmp	.skipelse4
   2212  152a				   .skipL0340
   2213  152a		       4c da d9 	      jmp	._skip_game_action
   2214  152d
   2215  152d				   .skipelse4
   2216  152d				   ._bonus_sound_delay
   2217  152d							; _bonus_sound_delay
   2218  152d
   2219  152d				   .L0341		;  _Ch0_Sound	=  3  :  _Ch0_Duration	=  1  :  _Ch0_Counter  =  0
   2220  152d
   2221  152d		       a9 03		      LDA	#3
   2222  152f		       85 d9		      STA	_Ch0_Sound
   2223  1531		       a9 01		      LDA	#1
   2224  1533		       85 da		      STA	_Ch0_Duration
   2225  1535		       a9 00		      LDA	#0
   2226  1537		       85 db		      STA	_Ch0_Counter
   2227  1539				   .L0342		;  delay_counter  =  25
   2228  1539
   2229  1539		       a9 19		      LDA	#25
   2230  153b		       85 d4		      STA	delay_counter
   2231  153d				   .
   2232  153d							; 
   2233  153d
   2234  153d				   .L0343		;  goto _skip_game_action
   2235  153d
   2236  153d		       4c da d9 	      jmp	._skip_game_action
   2237  1540
   2238  1540				   .
   2239  1540							; 
   2240  1540
   2241  1540				   .
   2242  1540							; 
   2243  1540
   2244  1540				   ._game_action
   2245  1540							; _game_action
   2246  1540
   2247  1540				   .
   2248  1540							; 
   2249  1540
   2250  1540				   .L0344		;  if frame_counter then _Skip_dec_game_counter
   2251  1540
   2252  1540		       a5 d5		      LDA	frame_counter
   2253  1542					      if	((* - ._Skip_dec_game_counter) < 127) && ((* - ._Skip_dec_game_counter) > -128)
   2254  1542		       d0 2b		      BNE	._Skip_dec_game_counter
   2255  1544				  -	      else
   2256  1544				  -	      beq	.12skip_Skip_dec_game_counter
   2257  1544				  -	      jmp	._Skip_dec_game_counter
   2258  1544				  -.12skip_Skip_dec_game_counter
   2259  1544					      endif
   2260  1544				   .
   2261  1544							; 
   2262  1544
   2263  1544				   .L0345		;  if !pfscore2 then _Decrease_live_counter
   2264  1544
   2265  1544		       a5 f3		      LDA	pfscore2
   2266  1546					      if	((* - ._Decrease_live_counter) < 127) && ((* - ._Decrease_live_counter) > -128)
   2267  1546		       f0 08		      BEQ	._Decrease_live_counter
   2268  1548				  -	      else
   2269  1548				  -	      bne	.13skip_Decrease_live_counter
   2270  1548				  -	      jmp	._Decrease_live_counter
   2271  1548				  -.13skip_Decrease_live_counter
   2272  1548					      endif
   2273  1548				   .L0346		;  pfscore2  =  pfscore2  /  2
   2274  1548
   2275  1548		       a5 f3		      LDA	pfscore2
   2276  154a		       4a		      lsr
   2277  154b		       85 f3		      STA	pfscore2
   2278  154d				   .L0347		;  goto _Skip_dec_game_counter
   2279  154d
   2280  154d		       4c 6f d5 	      jmp	._Skip_dec_game_counter
   2281  1550
   2282  1550				   ._Decrease_live_counter
   2283  1550							; _Decrease_live_counter
   2284  1550
   2285  1550				   .L0348		;  pfscore1  =  pfscore1  /  4
   2286  1550
   2287  1550		       a5 f2		      LDA	pfscore1
   2288  1552		       4a		      lsr
   2289  1553		       4a		      lsr
   2290  1554		       85 f2		      STA	pfscore1
   2291  1556				   .
   2292  1556							; 
   2293  1556
   2294  1556				   .L0349		;  _Ch0_Sound	=  4  :  _Ch0_Duration	=  1  :  _Ch0_Counter  =  0
   2295  1556
   2296  1556		       a9 04		      LDA	#4
   2297  1558		       85 d9		      STA	_Ch0_Sound
   2298  155a		       a9 01		      LDA	#1
   2299  155c		       85 da		      STA	_Ch0_Duration
   2300  155e		       a9 00		      LDA	#0
   2301  1560		       85 db		      STA	_Ch0_Counter
   2302  1562				   .L0350		;  if !pfscore1 then goto _Set_Game_Over else goto _Reset_Level
   2303  1562
   2304  1562		       a5 f2		      LDA	pfscore1
   2305  1564		       d0 06		      BNE	.skipL0350
   2306  1566				   .condpart37
   2307  1566		       4c 39 db 	      jmp	._Set_Game_Over
   2308  1569		       4c 6f d5 	      jmp	.skipelse5
   2309  156c				   .skipL0350
   2310  156c		       4c 56 db 	      jmp	._Reset_Level
   2311  156f
   2312  156f				   .skipelse5
   2313  156f				   ._Skip_dec_game_counter
   2314  156f							; _Skip_dec_game_counter
   2315  156f
   2316  156f				   .
   2317  156f							; 
   2318  156f
   2319  156f				   .
   2320  156f							; 
   2321  156f
   2322  156f				   .
   2323  156f							; 
   2324  156f
   2325  156f				   .L0351		;  if player0y  =  200 then goto __Skip_Enemy_Fire
   2326  156f
   2327  156f		       a5 85		      LDA	player0y
   2328  1571		       c9 c8		      CMP	#200
   2329  1573		       d0 03		      BNE	.skipL0351
   2330  1575				   .condpart38
   2331  1575		       4c 04 d6 	      jmp	.__Skip_Enemy_Fire
   2332  1578
   2333  1578				   .skipL0351
   2334  1578				   .L0352		;  if _Bit3_Ball_Shot_Moving{3}  ||  roommate_type then goto __Skip_Enemy_Fire
   2335  1578
   2336  1578		       a5 ec		      LDA	_Bit3_Ball_Shot_Moving
   2337  157a		       29 08		      AND	#8
   2338  157c		       f0 03		      BEQ	.skipL0352
   2339  157e				   .condpart39
   2340  157e		       4c 85 d5 	      jmp	.condpart40
   2341  1581				   .skipL0352
   2342  1581		       a5 de		      LDA	roommate_type
   2343  1583		       f0 03		      BEQ	.skip8OR
   2344  1585				   .condpart40
   2345  1585		       4c 04 d6 	      jmp	.__Skip_Enemy_Fire
   2346  1588
   2347  1588				   .skip8OR
   2348  1588				   .
   2349  1588							; 
   2350  1588
   2351  1588				   .L0353		;  _Bit3_Ball_Shot_Moving{3}  =  1  :	_BitOp_Ball_Shot_Dir  =  0  :  Bally_velocity  =  0.0  :  q  =	0
   2352  1588
   2353  1588		       a5 ec		      LDA	_Bit3_Ball_Shot_Moving
   2354  158a		       09 08		      ORA	#8
   2355  158c		       85 ec		      STA	_Bit3_Ball_Shot_Moving
   2356  158e		       a9 00		      LDA	#0
   2357  1590		       85 d6		      STA	_BitOp_Ball_Shot_Dir
   2358  1592		       a2 00		      LDX	#0
   2359  1594		       86 e4		      STX	q
   2360  1596		       a9 00		      LDA	#0
   2361  1598		       85 e3		      STA	Bally_velocity
   2362  159a		       a9 00		      LDA	#0
   2363  159c		       85 e4		      STA	q
   2364  159e				   .
   2365  159e							; 
   2366  159e
   2367  159e				   .L0354		;  ball_shoot_x  =  player0x  +  4  :	ball_shoot_y  =  player0y  -  5
   2368  159e
   2369  159e		       a5 80		      LDA	player0x
   2370  15a0		       18		      CLC
   2371  15a1		       69 04		      ADC	#4
   2372  15a3		       85 ae		      STA	ball_shoot_x
   2373  15a5		       a5 85		      LDA	player0y
   2374  15a7		       38		      SEC
   2375  15a8		       e9 05		      SBC	#5
   2376  15aa		       85 af		      STA	ball_shoot_y
   2377  15ac				   .
   2378  15ac							; 
   2379  15ac
   2380  15ac				   .
   2381  15ac							; 
   2382  15ac
   2383  15ac				   .L0355		;  if _Ch0_Sound  <>  3 then _Ch0_Sound  =  2	:  _Ch0_Duration  =  1	:  _Ch0_Counter  =  0
   2384  15ac
   2385  15ac		       a5 d9		      LDA	_Ch0_Sound
   2386  15ae		       c9 03		      CMP	#3
   2387  15b0		       f0 0c		      BEQ	.skipL0355
   2388  15b2				   .condpart41
   2389  15b2		       a9 02		      LDA	#2
   2390  15b4		       85 d9		      STA	_Ch0_Sound
   2391  15b6		       a9 01		      LDA	#1
   2392  15b8		       85 da		      STA	_Ch0_Duration
   2393  15ba		       a9 00		      LDA	#0
   2394  15bc		       85 db		      STA	_Ch0_Counter
   2395  15be				   .skipL0355
   2396  15be				   .
   2397  15be							; 
   2398  15be
   2399  15be				   .L0356		;  if player1x  >  player0x then _Bit2_Ball_Shot_Dir_Right1{2}  =  1 else _Bit0_Ball_Shot_Dir_Left1{0}  =  1
   2400  15be
   2401  15be		       a5 80		      LDA	player0x
   2402  15c0		       c5 81		      CMP	player1x
   2403  15c2		       b0 09		      BCS	.skipL0356
   2404  15c4				   .condpart42
   2405  15c4		       a5 d6		      LDA	_Bit2_Ball_Shot_Dir_Right1
   2406  15c6		       09 04		      ORA	#4
   2407  15c8		       85 d6		      STA	_Bit2_Ball_Shot_Dir_Right1
   2408  15ca		       4c d3 d5 	      jmp	.skipelse6
   2409  15cd				   .skipL0356
   2410  15cd		       a5 d6		      LDA	_Bit0_Ball_Shot_Dir_Left1
   2411  15cf		       09 01		      ORA	#1
   2412  15d1		       85 d6		      STA	_Bit0_Ball_Shot_Dir_Left1
   2413  15d3				   .skipelse6
   2414  15d3				   .L0357		;  if !_Bit2_Ball_Shot_Dir_Right1{2} then __Skip_Additional_Right
   2415  15d3
   2416  15d3		       a5 d6		      LDA	_Bit2_Ball_Shot_Dir_Right1
   2417  15d5		       29 04		      AND	#4
   2418  15d7					      if	((* - .__Skip_Additional_Right) < 127) && ((* - .__Skip_Additional_Right) > -128)
   2419  15d7		       f0 13		      BEQ	.__Skip_Additional_Right
   2420  15d9				  -	      else
   2421  15d9				  -	      bne	.14skip__Skip_Additional_Right
   2422  15d9				  -	      jmp	.__Skip_Additional_Right
   2423  15d9				  -.14skip__Skip_Additional_Right
   2424  15d9					      endif
   2425  15d9				   .L0358		;  temp4  =  player1x	-  player0x
   2426  15d9
   2427  15d9		       a5 81		      LDA	player1x
   2428  15db		       38		      SEC
   2429  15dc		       e5 80		      SBC	player0x
   2430  15de		       85 9f		      STA	temp4
   2431  15e0				   .L0359		;  if temp4  >  25 then _Bit3_Ball_Shot_Dir_Right2{3}	=  1
   2432  15e0
   2433  15e0		       a9 19		      LDA	#25
   2434  15e2		       c5 9f		      CMP	temp4
   2435  15e4		       b0 06		      BCS	.skipL0359
   2436  15e6				   .condpart43
   2437  15e6		       a5 d6		      LDA	_Bit3_Ball_Shot_Dir_Right2
   2438  15e8		       09 08		      ORA	#8
   2439  15ea		       85 d6		      STA	_Bit3_Ball_Shot_Dir_Right2
   2440  15ec				   .skipL0359
   2441  15ec				   .__Skip_Additional_Right
   2442  15ec							; __Skip_Additional_Right
   2443  15ec
   2444  15ec				   .L0360		;  if !_Bit0_Ball_Shot_Dir_Left1{0} then __Skip_Enemy_Fire
   2445  15ec
   2446  15ec		       a5 d6		      LDA	_Bit0_Ball_Shot_Dir_Left1
   2447  15ee		       4a		      LSR
   2448  15ef					      if	((* - .__Skip_Enemy_Fire) < 127) && ((* - .__Skip_Enemy_Fire) > -128)
   2449  15ef		       90 13		      bcc	.__Skip_Enemy_Fire
   2450  15f1				  -	      else
   2451  15f1				  -	      bcs	.15skip__Skip_Enemy_Fire
   2452  15f1				  -	      jmp	.__Skip_Enemy_Fire
   2453  15f1				  -.15skip__Skip_Enemy_Fire
   2454  15f1					      endif
   2455  15f1				   .L0361		;  temp4  =  player0x	-  player1x
   2456  15f1
   2457  15f1		       a5 80		      LDA	player0x
   2458  15f3		       38		      SEC
   2459  15f4		       e5 81		      SBC	player1x
   2460  15f6		       85 9f		      STA	temp4
   2461  15f8				   .L0362		;  if temp4  >  25 then _Bit1_Ball_Shot_Dir_Left2{1}  =  1
   2462  15f8
   2463  15f8		       a9 19		      LDA	#25
   2464  15fa		       c5 9f		      CMP	temp4
   2465  15fc		       b0 06		      BCS	.skipL0362
   2466  15fe				   .condpart44
   2467  15fe		       a5 d6		      LDA	_Bit1_Ball_Shot_Dir_Left2
   2468  1600		       09 02		      ORA	#2
   2469  1602		       85 d6		      STA	_Bit1_Ball_Shot_Dir_Left2
   2470  1604				   .skipL0362
   2471  1604				   .
   2472  1604							; 
   2473  1604
   2474  1604				   .__Skip_Enemy_Fire
   2475  1604							; __Skip_Enemy_Fire
   2476  1604
   2477  1604				   .
   2478  1604							; 
   2479  1604
   2480  1604				   .
   2481  1604							; 
   2482  1604
   2483  1604				   .
   2484  1604							; 
   2485  1604
   2486  1604				   .L0363		;  if !_Bit3_Ball_Shot_Moving{3} then goto __Skip_Enemy_Missile
   2487  1604
   2488  1604		       a5 ec		      LDA	_Bit3_Ball_Shot_Moving
   2489  1606		       29 08		      AND	#8
   2490  1608		       d0 03		      BNE	.skipL0363
   2491  160a				   .condpart45
   2492  160a		       4c 80 d6 	      jmp	.__Skip_Enemy_Missile
   2493  160d
   2494  160d				   .skipL0363
   2495  160d				   .
   2496  160d							; 
   2497  160d
   2498  160d				   .
   2499  160d							; 
   2500  160d
   2501  160d				   .L0364		;  if ball_shoot_y  >	player1y then ball_shoot_y  =  ball_shoot_y  -	1
   2502  160d
   2503  160d		       a5 86		      LDA	player1y
   2504  160f		       c5 af		      CMP	ball_shoot_y
   2505  1611		       b0 02		      BCS	.skipL0364
   2506  1613				   .condpart46
   2507  1613		       c6 af		      DEC	ball_shoot_y
   2508  1615				   .skipL0364
   2509  1615				   .L0365		;  if _Bit0_Ball_Shot_Dir_Left1{0}  &&  frame_counter{0} then ball_shoot_x  =	ball_shoot_x  -  1  :  if _Bit1_Ball_Shot_Dir_Left2{1} then ball_shoot_x  =  ball_shoot_x  -  1
   2510  1615
   2511  1615		       a5 d6		      LDA	_Bit0_Ball_Shot_Dir_Left1
   2512  1617		       4a		      LSR
   2513  1618		       90 0f		      BCC	.skipL0365
   2514  161a				   .condpart47
   2515  161a		       a5 d5		      LDA	frame_counter
   2516  161c		       4a		      LSR
   2517  161d		       90 0a		      BCC	.skip47then
   2518  161f				   .condpart48
   2519  161f		       c6 ae		      DEC	ball_shoot_x
   2520  1621		       a5 d6		      LDA	_Bit1_Ball_Shot_Dir_Left2
   2521  1623		       29 02		      AND	#2
   2522  1625		       f0 02		      BEQ	.skip48then
   2523  1627				   .condpart49
   2524  1627		       c6 ae		      DEC	ball_shoot_x
   2525  1629				   .skip48then
   2526  1629				   .skip47then
   2527  1629				   .skipL0365
   2528  1629				   .L0366		;  if _Bit2_Ball_Shot_Dir_Right1{2}  &&  frame_counter{0} then ball_shoot_x  =  ball_shoot_x  +  1  :	if _Bit3_Ball_Shot_Dir_Right2{3} then ball_shoot_x  =  ball_shoot_x  +	1
   2529  1629
   2530  1629		       a5 d6		      LDA	_Bit2_Ball_Shot_Dir_Right1
   2531  162b		       29 04		      AND	#4
   2532  162d		       f0 0f		      BEQ	.skipL0366
   2533  162f				   .condpart50
   2534  162f		       a5 d5		      LDA	frame_counter
   2535  1631		       4a		      LSR
   2536  1632		       90 0a		      BCC	.skip50then
   2537  1634				   .condpart51
   2538  1634		       e6 ae		      INC	ball_shoot_x
   2539  1636		       a5 d6		      LDA	_Bit3_Ball_Shot_Dir_Right2
   2540  1638		       29 08		      AND	#8
   2541  163a		       f0 02		      BEQ	.skip51then
   2542  163c				   .condpart52
   2543  163c		       e6 ae		      INC	ball_shoot_x
   2544  163e				   .skip51then
   2545  163e				   .skip50then
   2546  163e				   .skipL0366
   2547  163e				   .
   2548  163e							; 
   2549  163e
   2550  163e				   .L0367		;  rem apply gravity
   2551  163e
   2552  163e				   .L0368		;  Bally_velocity  =  Bally_velocity  +  gravity_missile0
   2553  163e
   2554  163e		       a5 e4		      LDA	q
   2555  1640		       18		      CLC
   2556  1641		       69 02		      ADC	#2
   2557  1643		       85 e4		      STA	q
   2558  1645		       a5 e3		      LDA	Bally_velocity
   2559  1647		       69 00		      ADC	#0
   2560  1649		       85 e3		      STA	Bally_velocity
   2561  164b				   .L0369		;  Bally_position  =  Bally_position  +  Bally_velocity
   2562  164b
   2563  164b		       a5 e5		      LDA	r
   2564  164d		       18		      CLC
   2565  164e		       65 e4		      ADC	q
   2566  1650		       85 e5		      STA	r
   2567  1652		       a5 af		      LDA	Bally_position
   2568  1654		       65 e3		      ADC	Bally_velocity
   2569  1656		       85 af		      STA	Bally_position
   2570  1658				   .
   2571  1658							; 
   2572  1658
   2573  1658				   .
   2574  1658							; 
   2575  1658
   2576  1658				   .
   2577  1658							; 
   2578  1658
   2579  1658				   .L0370		;  if ball_shoot_y  <	_M_Edge_Top then __Delete_Enemy_Missile
   2580  1658
   2581  1658		       a5 af		      LDA	ball_shoot_y
   2582  165a		       c9 02		      CMP	#_M_Edge_Top
   2583  165c					      if	((* - .__Delete_Enemy_Missile) < 127) && ((* - .__Delete_Enemy_Missile) > -128)
   2584  165c		       90 16		      bcc	.__Delete_Enemy_Missile
   2585  165e				  -	      else
   2586  165e				  -	      bcs	.16skip__Delete_Enemy_Missile
   2587  165e				  -	      jmp	.__Delete_Enemy_Missile
   2588  165e				  -.16skip__Delete_Enemy_Missile
   2589  165e					      endif
   2590  165e				   .L0371		;  if ball_shoot_y  >	_M_Edge_Bottom then __Delete_Enemy_Missile
   2591  165e
   2592  165e		       a9 58		      LDA	#_M_Edge_Bottom
   2593  1660		       c5 af		      CMP	ball_shoot_y
   2594  1662					      if	((* - .__Delete_Enemy_Missile) < 127) && ((* - .__Delete_Enemy_Missile) > -128)
   2595  1662		       90 10		      bcc	.__Delete_Enemy_Missile
   2596  1664				  -	      else
   2597  1664				  -	      bcs	.17skip__Delete_Enemy_Missile
   2598  1664				  -	      jmp	.__Delete_Enemy_Missile
   2599  1664				  -.17skip__Delete_Enemy_Missile
   2600  1664					      endif
   2601  1664				   .L0372		;  if ball_shoot_x  <	_M_Edge_Left then __Delete_Enemy_Missile
   2602  1664
   2603  1664		       a5 ae		      LDA	ball_shoot_x
   2604  1666		       c9 0e		      CMP	#_M_Edge_Left
   2605  1668					      if	((* - .__Delete_Enemy_Missile) < 127) && ((* - .__Delete_Enemy_Missile) > -128)
   2606  1668		       90 0a		      bcc	.__Delete_Enemy_Missile
   2607  166a				  -	      else
   2608  166a				  -	      bcs	.18skip__Delete_Enemy_Missile
   2609  166a				  -	      jmp	.__Delete_Enemy_Missile
   2610  166a				  -.18skip__Delete_Enemy_Missile
   2611  166a					      endif
   2612  166a				   .L0373		;  if ball_shoot_x  >	_M_Edge_Right then __Delete_Enemy_Missile
   2613  166a
   2614  166a		       a9 94		      LDA	#_M_Edge_Right
   2615  166c		       c5 ae		      CMP	ball_shoot_x
   2616  166e					      if	((* - .__Delete_Enemy_Missile) < 127) && ((* - .__Delete_Enemy_Missile) > -128)
   2617  166e		       90 04		      bcc	.__Delete_Enemy_Missile
   2618  1670				  -	      else
   2619  1670				  -	      bcs	.19skip__Delete_Enemy_Missile
   2620  1670				  -	      jmp	.__Delete_Enemy_Missile
   2621  1670				  -.19skip__Delete_Enemy_Missile
   2622  1670					      endif
   2623  1670				   .
   2624  1670							; 
   2625  1670
   2626  1670				   .
   2627  1670							; 
   2628  1670
   2629  1670				   .L0374		;  if !collision(playfield,ball) then __Skip_Enemy_Missile
   2630  1670
   2631  1670		       24 06		      bit	CXBLPF
   2632  1672					      if	((* - .__Skip_Enemy_Missile) < 127) && ((* - .__Skip_Enemy_Missile) > -128)
   2633  1672		       10 0c		      bpl	.__Skip_Enemy_Missile
   2634  1674				  -	      else
   2635  1674				  -	      bmi	.20skip__Skip_Enemy_Missile
   2636  1674				  -	      jmp	.__Skip_Enemy_Missile
   2637  1674				  -.20skip__Skip_Enemy_Missile
   2638  1674					      endif
   2639  1674				   .
   2640  1674							; 
   2641  1674
   2642  1674				   .__Delete_Enemy_Missile
   2643  1674							; __Delete_Enemy_Missile
   2644  1674
   2645  1674				   .
   2646  1674							; 
   2647  1674
   2648  1674				   .
   2649  1674							; 
   2650  1674
   2651  1674				   .L0375		;  _Bit3_Ball_Shot_Moving{3}  =  0  :	ballx  =  200  :  bally  =  200
   2652  1674
   2653  1674		       a5 ec		      LDA	_Bit3_Ball_Shot_Moving
   2654  1676		       29 f7		      AND	#247
   2655  1678		       85 ec		      STA	_Bit3_Ball_Shot_Moving
   2656  167a		       a9 c8		      LDA	#200
   2657  167c		       85 84		      STA	ballx
   2658  167e		       85 89		      STA	bally
   2659  1680				   .
   2660  1680							; 
   2661  1680
   2662  1680				   .__Skip_Enemy_Missile
   2663  1680							; __Skip_Enemy_Missile
   2664  1680
   2665  1680				   .
   2666  1680							; 
   2667  1680
   2668  1680				   .
   2669  1680							; 
   2670  1680
   2671  1680				   .
   2672  1680							; 
   2673  1680
   2674  1680				   .
   2675  1680							; 
   2676  1680
   2677  1680				   .
   2678  1680							; 
   2679  1680
   2680  1680				   .L0376		;  if !joy0fire then goto __Skip_Fire
   2681  1680
   2682  1680		       24 0c		      bit	INPT4
   2683  1682		       10 03		      BPL	.skipL0376
   2684  1684				   .condpart53
   2685  1684		       4c 0d d7 	      jmp	.__Skip_Fire
   2686  1687
   2687  1687				   .skipL0376
   2688  1687				   .
   2689  1687							; 
   2690  1687
   2691  1687				   .
   2692  1687							; 
   2693  1687
   2694  1687				   .L0377		;  if _Bit7_M0_Moving{7}  ||  _Bit0_P1_Dir_Up{0} then goto __Skip_Fire
   2695  1687
   2696  1687		       24 ec		      BIT	_Bit7_M0_Moving
   2697  1689		       10 03		      BPL	.skipL0377
   2698  168b				   .condpart54
   2699  168b		       4c 93 d6 	      jmp	.condpart55
   2700  168e				   .skipL0377
   2701  168e		       a5 d8		      LDA	_Bit0_P1_Dir_Up
   2702  1690		       4a		      LSR
   2703  1691		       90 03		      BCC	.skip11OR
   2704  1693				   .condpart55
   2705  1693		       4c 0d d7 	      jmp	.__Skip_Fire
   2706  1696
   2707  1696				   .skip11OR
   2708  1696				   .
   2709  1696							; 
   2710  1696
   2711  1696				   .
   2712  1696							; 
   2713  1696
   2714  1696				   .
   2715  1696							; 
   2716  1696
   2717  1696				   .L0378		;  _BitOp_M0_Dir  =  _BitOp_P1_Dir
   2718  1696
   2719  1696		       a5 d8		      LDA	_BitOp_P1_Dir
   2720  1698		       85 d7		      STA	_BitOp_M0_Dir
   2721  169a				   .
   2722  169a							; 
   2723  169a
   2724  169a				   .L0379		;  if _BitOp_M0_Dir then _Skip_correct_initial_M0_Dir
   2725  169a
   2726  169a		       a5 d7		      LDA	_BitOp_M0_Dir
   2727  169c					      if	((* - ._Skip_correct_initial_M0_Dir) < 127) && ((* - ._Skip_correct_initial_M0_Dir) > -128)
   2728  169c		       d0 0f		      BNE	._Skip_correct_initial_M0_Dir
   2729  169e				  -	      else
   2730  169e				  -	      beq	.21skip_Skip_correct_initial_M0_Dir
   2731  169e				  -	      jmp	._Skip_correct_initial_M0_Dir
   2732  169e				  -.21skip_Skip_correct_initial_M0_Dir
   2733  169e					      endif
   2734  169e				   .L0380		;  if _Bit6_Flip_P1{6} then _BitOp_M0_Dir  =  4 else _BitOp_M0_Dir  =	8
   2735  169e
   2736  169e		       24 ec		      BIT	_Bit6_Flip_P1
   2737  16a0		       50 07		      BVC	.skipL0380
   2738  16a2				   .condpart56
   2739  16a2		       a9 04		      LDA	#4
   2740  16a4		       85 d7		      STA	_BitOp_M0_Dir
   2741  16a6		       4c ad d6 	      jmp	.skipelse7
   2742  16a9				   .skipL0380
   2743  16a9		       a9 08		      LDA	#8
   2744  16ab		       85 d7		      STA	_BitOp_M0_Dir
   2745  16ad				   .skipelse7
   2746  16ad				   ._Skip_correct_initial_M0_Dir
   2747  16ad							; _Skip_correct_initial_M0_Dir
   2748  16ad
   2749  16ad				   .
   2750  16ad							; 
   2751  16ad
   2752  16ad				   .
   2753  16ad							; 
   2754  16ad
   2755  16ad				   .L0381		;  _Bit7_M0_Moving{7}	=  1
   2756  16ad
   2757  16ad		       a5 ec		      LDA	_Bit7_M0_Moving
   2758  16af		       09 80		      ORA	#128
   2759  16b1		       85 ec		      STA	_Bit7_M0_Moving
   2760  16b3				   .
   2761  16b3							; 
   2762  16b3
   2763  16b3				   .
   2764  16b3							; 
   2765  16b3
   2766  16b3				   .L0382		;  M0y_velocity  =  0.0  :  u	=  0
   2767  16b3
   2768  16b3		       a2 00		      LDX	#0
   2769  16b5		       86 e7		      STX	t
   2770  16b7		       a9 00		      LDA	#0
   2771  16b9		       85 e6		      STA	M0y_velocity
   2772  16bb		       a9 00		      LDA	#0
   2773  16bd		       85 e8		      STA	u
   2774  16bf				   .
   2775  16bf							; 
   2776  16bf
   2777  16bf				   .
   2778  16bf							; 
   2779  16bf
   2780  16bf				   .L0383		;  if _Bit1_M0_Dir_Down{1} then missile0x  =  player1x  +  9  :  missile0y  =	player1y  -  1
   2781  16bf
   2782  16bf		       a5 d7		      LDA	_Bit1_M0_Dir_Down
   2783  16c1		       29 02		      AND	#2
   2784  16c3		       f0 0e		      BEQ	.skipL0383
   2785  16c5				   .condpart57
   2786  16c5		       a5 81		      LDA	player1x
   2787  16c7		       18		      CLC
   2788  16c8		       69 09		      ADC	#9
   2789  16ca		       85 82		      STA	missile0x
   2790  16cc		       a5 86		      LDA	player1y
   2791  16ce		       38		      SEC
   2792  16cf		       e9 01		      SBC	#1
   2793  16d1		       85 91		      STA	missile0y
   2794  16d3				   .skipL0383
   2795  16d3				   .L0384		;  if _Bit2_M0_Dir_Left{2} then missile0x  =  player1x  +  2  :  missile0y  =	player1y  -  3
   2796  16d3
   2797  16d3		       a5 d7		      LDA	_Bit2_M0_Dir_Left
   2798  16d5		       29 04		      AND	#4
   2799  16d7		       f0 0e		      BEQ	.skipL0384
   2800  16d9				   .condpart58
   2801  16d9		       a5 81		      LDA	player1x
   2802  16db		       18		      CLC
   2803  16dc		       69 02		      ADC	#2
   2804  16de		       85 82		      STA	missile0x
   2805  16e0		       a5 86		      LDA	player1y
   2806  16e2		       38		      SEC
   2807  16e3		       e9 03		      SBC	#3
   2808  16e5		       85 91		      STA	missile0y
   2809  16e7				   .skipL0384
   2810  16e7				   .L0385		;  if _Bit3_M0_Dir_Right{3} then missile0x  =	player1x  +  16  :  missile0y  =  player1y  -  3
   2811  16e7
   2812  16e7		       a5 d7		      LDA	_Bit3_M0_Dir_Right
   2813  16e9		       29 08		      AND	#8
   2814  16eb		       f0 0e		      BEQ	.skipL0385
   2815  16ed				   .condpart59
   2816  16ed		       a5 81		      LDA	player1x
   2817  16ef		       18		      CLC
   2818  16f0		       69 10		      ADC	#16
   2819  16f2		       85 82		      STA	missile0x
   2820  16f4		       a5 86		      LDA	player1y
   2821  16f6		       38		      SEC
   2822  16f7		       e9 03		      SBC	#3
   2823  16f9		       85 91		      STA	missile0y
   2824  16fb				   .skipL0385
   2825  16fb				   .
   2826  16fb							; 
   2827  16fb
   2828  16fb				   .
   2829  16fb							; 
   2830  16fb
   2831  16fb				   .L0386		;  if _Ch0_Sound  <>  3 then _Ch0_Sound  =  2	:  _Ch0_Duration  =  1	:  _Ch0_Counter  =  0
   2832  16fb
   2833  16fb		       a5 d9		      LDA	_Ch0_Sound
   2834  16fd		       c9 03		      CMP	#3
   2835  16ff		       f0 0c		      BEQ	.skipL0386
   2836  1701				   .condpart60
   2837  1701		       a9 02		      LDA	#2
   2838  1703		       85 d9		      STA	_Ch0_Sound
   2839  1705		       a9 01		      LDA	#1
   2840  1707		       85 da		      STA	_Ch0_Duration
   2841  1709		       a9 00		      LDA	#0
   2842  170b		       85 db		      STA	_Ch0_Counter
   2843  170d				   .skipL0386
   2844  170d				   .
   2845  170d							; 
   2846  170d
   2847  170d				   .__Skip_Fire
   2848  170d							; __Skip_Fire
   2849  170d
   2850  170d				   .
   2851  170d							; 
   2852  170d
   2853  170d				   .
   2854  170d							; 
   2855  170d
   2856  170d				   .
   2857  170d							; 
   2858  170d
   2859  170d				   .
   2860  170d							; 
   2861  170d
   2862  170d				   .L0387		;  if !_Bit7_M0_Moving{7} then goto __Skip_Missile
   2863  170d
   2864  170d		       24 ec		      BIT	_Bit7_M0_Moving
   2865  170f		       30 03		      BMI	.skipL0387
   2866  1711				   .condpart61
   2867  1711		       4c 8c d7 	      jmp	.__Skip_Missile
   2868  1714
   2869  1714				   .skipL0387
   2870  1714				   .
   2871  1714							; 
   2872  1714
   2873  1714				   .
   2874  1714							; 
   2875  1714
   2876  1714				   .L0388		;  if _Bit1_M0_Dir_Down{1} then missile0y  =  missile0y  +  2
   2877  1714
   2878  1714		       a5 d7		      LDA	_Bit1_M0_Dir_Down
   2879  1716		       29 02		      AND	#2
   2880  1718		       f0 07		      BEQ	.skipL0388
   2881  171a				   .condpart62
   2882  171a		       a5 91		      LDA	missile0y
   2883  171c		       18		      CLC
   2884  171d		       69 02		      ADC	#2
   2885  171f		       85 91		      STA	missile0y
   2886  1721				   .skipL0388
   2887  1721				   .L0389		;  if _Bit2_M0_Dir_Left{2} then missile0x  =  missile0x  -  2
   2888  1721
   2889  1721		       a5 d7		      LDA	_Bit2_M0_Dir_Left
   2890  1723		       29 04		      AND	#4
   2891  1725		       f0 07		      BEQ	.skipL0389
   2892  1727				   .condpart63
   2893  1727		       a5 82		      LDA	missile0x
   2894  1729		       38		      SEC
   2895  172a		       e9 02		      SBC	#2
   2896  172c		       85 82		      STA	missile0x
   2897  172e				   .skipL0389
   2898  172e				   .L0390		;  if _Bit3_M0_Dir_Right{3} then missile0x  =	missile0x  +  2
   2899  172e
   2900  172e		       a5 d7		      LDA	_Bit3_M0_Dir_Right
   2901  1730		       29 08		      AND	#8
   2902  1732		       f0 07		      BEQ	.skipL0390
   2903  1734				   .condpart64
   2904  1734		       a5 82		      LDA	missile0x
   2905  1736		       18		      CLC
   2906  1737		       69 02		      ADC	#2
   2907  1739		       85 82		      STA	missile0x
   2908  173b				   .skipL0390
   2909  173b				   .
   2910  173b							; 
   2911  173b
   2912  173b				   .L0391		;  rem apply gravity
   2913  173b
   2914  173b				   .L0392		;  M0y_velocity  =  M0y_velocity  +  gravity_missile0
   2915  173b
   2916  173b		       a5 e7		      LDA	t
   2917  173d		       18		      CLC
   2918  173e		       69 02		      ADC	#2
   2919  1740		       85 e7		      STA	t
   2920  1742		       a5 e6		      LDA	M0y_velocity
   2921  1744		       69 00		      ADC	#0
   2922  1746		       85 e6		      STA	M0y_velocity
   2923  1748				   .L0393		;  M0y_position  =  M0y_position  +  M0y_velocity
   2924  1748
   2925  1748		       a5 e8		      LDA	u
   2926  174a		       18		      CLC
   2927  174b		       65 e7		      ADC	t
   2928  174d		       85 e8		      STA	u
   2929  174f		       a5 91		      LDA	M0y_position
   2930  1751		       65 e6		      ADC	M0y_velocity
   2931  1753		       85 91		      STA	M0y_position
   2932  1755				   .
   2933  1755							; 
   2934  1755
   2935  1755				   .
   2936  1755							; 
   2937  1755
   2938  1755				   .
   2939  1755							; 
   2940  1755
   2941  1755				   .L0394		;  if missile0y  <  _M_Edge_Top then goto __Delete_Missile
   2942  1755
   2943  1755		       a5 91		      LDA	missile0y
   2944  1757		       c9 02		      CMP	#_M_Edge_Top
   2945  1759		       b0 03		      BCS	.skipL0394
   2946  175b				   .condpart65
   2947  175b		       4c 80 d7 	      jmp	.__Delete_Missile
   2948  175e
   2949  175e				   .skipL0394
   2950  175e				   .L0395		;  if missile0y  >  _M_Edge_Bottom then goto __Delete_Missile
   2951  175e
   2952  175e		       a9 58		      LDA	#_M_Edge_Bottom
   2953  1760		       c5 91		      CMP	missile0y
   2954  1762		       b0 03		      BCS	.skipL0395
   2955  1764				   .condpart66
   2956  1764		       4c 80 d7 	      jmp	.__Delete_Missile
   2957  1767
   2958  1767				   .skipL0395
   2959  1767				   .L0396		;  if missile0x  <  _M_Edge_Left then goto __Delete_Missile
   2960  1767
   2961  1767		       a5 82		      LDA	missile0x
   2962  1769		       c9 0e		      CMP	#_M_Edge_Left
   2963  176b		       b0 03		      BCS	.skipL0396
   2964  176d				   .condpart67
   2965  176d		       4c 80 d7 	      jmp	.__Delete_Missile
   2966  1770
   2967  1770				   .skipL0396
   2968  1770				   .L0397		;  if missile0x  >  _M_Edge_Right then goto __Delete_Missile
   2969  1770
   2970  1770		       a9 94		      LDA	#_M_Edge_Right
   2971  1772		       c5 82		      CMP	missile0x
   2972  1774		       b0 03		      BCS	.skipL0397
   2973  1776				   .condpart68
   2974  1776		       4c 80 d7 	      jmp	.__Delete_Missile
   2975  1779
   2976  1779				   .skipL0397
   2977  1779				   .
   2978  1779							; 
   2979  1779
   2980  1779				   .
   2981  1779							; 
   2982  1779
   2983  1779				   .L0398		;  if !collision(playfield,missile0) then goto __Skip_Missile
   2984  1779
   2985  1779		       24 04		      bit	CXM0FB
   2986  177b		       30 03		      BMI	.skipL0398
   2987  177d				   .condpart69
   2988  177d		       4c 8c d7 	      jmp	.__Skip_Missile
   2989  1780
   2990  1780				   .skipL0398
   2991  1780				   .
   2992  1780							; 
   2993  1780
   2994  1780				   .
   2995  1780							; 
   2996  1780
   2997  1780				   .
   2998  1780							; 
   2999  1780
   3000  1780				   .
   3001  1780							; 
   3002  1780
   3003  1780				   .__Delete_Missile
   3004  1780							; __Delete_Missile
   3005  1780
   3006  1780				   .
   3007  1780							; 
   3008  1780
   3009  1780				   .
   3010  1780							; 
   3011  1780
   3012  1780				   .L0399		;  _Bit7_M0_Moving{7}	=  0  :  missile0x  =  200  :  missile0y  =  200
   3013  1780
   3014  1780		       a5 ec		      LDA	_Bit7_M0_Moving
   3015  1782		       29 7f		      AND	#127
   3016  1784		       85 ec		      STA	_Bit7_M0_Moving
   3017  1786		       a9 c8		      LDA	#200
   3018  1788		       85 82		      STA	missile0x
   3019  178a		       85 91		      STA	missile0y
   3020  178c				   .
   3021  178c							; 
   3022  178c
   3023  178c				   .__Skip_Missile
   3024  178c							; __Skip_Missile
   3025  178c
   3026  178c				   .
   3027  178c							; 
   3028  178c
   3029  178c				   .
   3030  178c							; 
   3031  178c
   3032  178c				   .
   3033  178c							; 
   3034  178c
   3035  178c				   .
   3036  178c							; 
   3037  178c
   3038  178c				   .L0400		;  if !collision(player0,missile0) then __Skip_Shot_Enemy
   3039  178c
   3040  178c		       24 00		      bit	CXM0P
   3041  178e					      if	((* - .__Skip_Shot_Enemy) < 127) && ((* - .__Skip_Shot_Enemy) > -128)
   3042  178e		       50 38		      bvc	.__Skip_Shot_Enemy
   3043  1790				  -	      else
   3044  1790				  -	      bvs	.22skip__Skip_Shot_Enemy
   3045  1790				  -	      jmp	.__Skip_Shot_Enemy
   3046  1790				  -.22skip__Skip_Shot_Enemy
   3047  1790					      endif
   3048  1790				   .
   3049  1790							; 
   3050  1790
   3051  1790				   .
   3052  1790							; 
   3053  1790
   3054  1790				   .L0401		;  _Bit7_M0_Moving{7}	=  0  :  missile0x  =  200  :  missile0y  =  200
   3055  1790
   3056  1790		       a5 ec		      LDA	_Bit7_M0_Moving
   3057  1792		       29 7f		      AND	#127
   3058  1794		       85 ec		      STA	_Bit7_M0_Moving
   3059  1796		       a9 c8		      LDA	#200
   3060  1798		       85 82		      STA	missile0x
   3061  179a		       85 91		      STA	missile0y
   3062  179c				   .
   3063  179c							; 
   3064  179c
   3065  179c				   .L0402		;  if roommate_type  >  1 then __Skip_Shot_Enemy
   3066  179c
   3067  179c		       a9 01		      LDA	#1
   3068  179e		       c5 de		      CMP	roommate_type
   3069  17a0					      if	((* - .__Skip_Shot_Enemy) < 127) && ((* - .__Skip_Shot_Enemy) > -128)
   3070  17a0		       90 26		      bcc	.__Skip_Shot_Enemy
   3071  17a2				  -	      else
   3072  17a2				  -	      bcs	.23skip__Skip_Shot_Enemy
   3073  17a2				  -	      jmp	.__Skip_Shot_Enemy
   3074  17a2				  -.23skip__Skip_Shot_Enemy
   3075  17a2					      endif
   3076  17a2				   .
   3077  17a2							; 
   3078  17a2
   3079  17a2				   .L0403		;  _Ch0_Sound	=  1  :  _Ch0_Duration	=  1  :  _Ch0_Counter  =  0
   3080  17a2
   3081  17a2		       a9 01		      LDA	#1
   3082  17a4		       85 d9		      STA	_Ch0_Sound
   3083  17a6		       85 da		      STA	_Ch0_Duration
   3084  17a8		       a9 00		      LDA	#0
   3085  17aa		       85 db		      STA	_Ch0_Counter
   3086  17ac				   .
   3087  17ac							; 
   3088  17ac
   3089  17ac				   .
   3090  17ac							; 
   3091  17ac
   3092  17ac				   .L0404		;  player0y  =  200  :  w_roommate_startpos_y	=  200	:  score  =  score  +  40
   3093  17ac
   3094  17ac		       a9 c8		      LDA	#200
   3095  17ae		       85 85		      STA	player0y
   3096  17b0		       8d 6a f0 	      STA	w_roommate_startpos_y
   3097  17b3		       f8		      SED
   3098  17b4		       18		      CLC
   3099  17b5		       a5 95		      LDA	score+2
   3100  17b7		       69 40		      ADC	#$40
   3101  17b9		       85 95		      STA	score+2
   3102  17bb		       a5 94		      LDA	score+1
   3103  17bd		       69 00		      ADC	#$00
   3104  17bf		       85 94		      STA	score+1
   3105  17c1		       a5 93		      LDA	score
   3106  17c3		       69 00		      ADC	#$00
   3107  17c5		       85 93		      STA	score
   3108  17c7		       d8		      CLD
   3109  17c8				   .
   3110  17c8							; 
   3111  17c8
   3112  17c8				   .__Skip_Shot_Enemy
   3113  17c8							; __Skip_Shot_Enemy
   3114  17c8
   3115  17c8				   .
   3116  17c8							; 
   3117  17c8
   3118  17c8				   .
   3119  17c8							; 
   3120  17c8
   3121  17c8				   .
   3122  17c8							; 
   3123  17c8
   3124  17c8				   .
   3125  17c8							; 
   3126  17c8
   3127  17c8				   .L0405		;  if !collision(ball,missile0) then __Skip_Shot_Extra_Wall
   3128  17c8
   3129  17c8		       24 04		      bit	CXM0FB
   3130  17ca					      if	((* - .__Skip_Shot_Extra_Wall) < 127) && ((* - .__Skip_Shot_Extra_Wall) > -128)
   3131  17ca		       50 46		      bvc	.__Skip_Shot_Extra_Wall
   3132  17cc				  -	      else
   3133  17cc				  -	      bvs	.24skip__Skip_Shot_Extra_Wall
   3134  17cc				  -	      jmp	.__Skip_Shot_Extra_Wall
   3135  17cc				  -.24skip__Skip_Shot_Extra_Wall
   3136  17cc					      endif
   3137  17cc				   .
   3138  17cc							; 
   3139  17cc
   3140  17cc				   .
   3141  17cc							; 
   3142  17cc
   3143  17cc				   .L0406		;  _Bit7_M0_Moving{7}	=  0  :  missile0x  =  200  :  missile0y  =  200
   3144  17cc
   3145  17cc		       a5 ec		      LDA	_Bit7_M0_Moving
   3146  17ce		       29 7f		      AND	#127
   3147  17d0		       85 ec		      STA	_Bit7_M0_Moving
   3148  17d2		       a9 c8		      LDA	#200
   3149  17d4		       85 82		      STA	missile0x
   3150  17d6		       85 91		      STA	missile0y
   3151  17d8				   .
   3152  17d8							; 
   3153  17d8
   3154  17d8				   .L0407		;  _Bit3_Ball_Shot_Moving{3}  =  0  :	ball_shoot_x  =  200  :  ball_shoot_y  =  200
   3155  17d8
   3156  17d8		       a5 ec		      LDA	_Bit3_Ball_Shot_Moving
   3157  17da		       29 f7		      AND	#247
   3158  17dc		       85 ec		      STA	_Bit3_Ball_Shot_Moving
   3159  17de		       a9 c8		      LDA	#200
   3160  17e0		       85 ae		      STA	ball_shoot_x
   3161  17e2		       85 af		      STA	ball_shoot_y
   3162  17e4				   .
   3163  17e4							; 
   3164  17e4
   3165  17e4				   .
   3166  17e4							; 
   3167  17e4
   3168  17e4				   .L0408		;  if r_extra_wall_type_and_range{0} then __Skip_Shot_Extra_Wall
   3169  17e4
   3170  17e4		       ad eb f0 	      LDA	r_extra_wall_type_and_range
   3171  17e7		       4a		      LSR
   3172  17e8					      if	((* - .__Skip_Shot_Extra_Wall) < 127) && ((* - .__Skip_Shot_Extra_Wall) > -128)
   3173  17e8		       b0 28		      bcs	.__Skip_Shot_Extra_Wall
   3174  17ea				  -	      else
   3175  17ea				  -	      bcc	.25skip__Skip_Shot_Extra_Wall
   3176  17ea				  -	      jmp	.__Skip_Shot_Extra_Wall
   3177  17ea				  -.25skip__Skip_Shot_Extra_Wall
   3178  17ea					      endif
   3179  17ea				   .
   3180  17ea							; 
   3181  17ea
   3182  17ea				   .L0409		;  _Ch0_Sound	=  1  :  _Ch0_Duration	=  1  :  _Ch0_Counter  =  0
   3183  17ea
   3184  17ea		       a9 01		      LDA	#1
   3185  17ec		       85 d9		      STA	_Ch0_Sound
   3186  17ee		       85 da		      STA	_Ch0_Duration
   3187  17f0		       a9 00		      LDA	#0
   3188  17f2		       85 db		      STA	_Ch0_Counter
   3189  17f4				   .L0410		;  bally  =  0  :  w_extra_wall_startpos_x  =	200  :	score  =  score  +  10
   3190  17f4
   3191  17f4		       a9 00		      LDA	#0
   3192  17f6		       85 89		      STA	bally
   3193  17f8		       a9 c8		      LDA	#200
   3194  17fa		       8d 6e f0 	      STA	w_extra_wall_startpos_x
   3195  17fd		       f8		      SED
   3196  17fe		       18		      CLC
   3197  17ff		       a5 95		      LDA	score+2
   3198  1801		       69 10		      ADC	#$10
   3199  1803		       85 95		      STA	score+2
   3200  1805		       a5 94		      LDA	score+1
   3201  1807		       69 00		      ADC	#$00
   3202  1809		       85 94		      STA	score+1
   3203  180b		       a5 93		      LDA	score
   3204  180d		       69 00		      ADC	#$00
   3205  180f		       85 93		      STA	score
   3206  1811		       d8		      CLD
   3207  1812				   .
   3208  1812							; 
   3209  1812
   3210  1812				   .__Skip_Shot_Extra_Wall
   3211  1812							; __Skip_Shot_Extra_Wall
   3212  1812
   3213  1812				   .
   3214  1812							; 
   3215  1812
   3216  1812				   .
   3217  1812							; 
   3218  1812
   3219  1812				   .
   3220  1812							; 
   3221  1812
   3222  1812				   .L0411		;  if !collision(player1,player0) then goto __Skip_P1_Touched_P0
   3223  1812
   3224  1812		       24 07		      bit	CXPPMM
   3225  1814		       30 03		      BMI	.skipL0411
   3226  1816				   .condpart70
   3227  1816		       4c a2 d8 	      jmp	.__Skip_P1_Touched_P0
   3228  1819
   3229  1819				   .skipL0411
   3230  1819				   .
   3231  1819							; 
   3232  1819
   3233  1819				   .
   3234  1819							; 
   3235  1819
   3236  1819				   .L0412		;  if roommate_type  <  2 then goto _Decrease_live_counter
   3237  1819
   3238  1819		       a5 de		      LDA	roommate_type
   3239  181b		       c9 02		      CMP	#2
   3240  181d		       b0 03		      BCS	.skipL0412
   3241  181f				   .condpart71
   3242  181f		       4c 50 d5 	      jmp	._Decrease_live_counter
   3243  1822
   3244  1822				   .skipL0412
   3245  1822				   .
   3246  1822							; 
   3247  1822
   3248  1822				   .
   3249  1822							; 
   3250  1822
   3251  1822				   .L0413		;  if _Ch0_Sound  <>  3 then _Ch0_Sound  =  3	:  _Ch0_Duration  =  1	:  _Ch0_Counter  =  0
   3252  1822
   3253  1822		       a5 d9		      LDA	_Ch0_Sound
   3254  1824		       c9 03		      CMP	#3
   3255  1826		       f0 0c		      BEQ	.skipL0413
   3256  1828				   .condpart72
   3257  1828		       a9 03		      LDA	#3
   3258  182a		       85 d9		      STA	_Ch0_Sound
   3259  182c		       a9 01		      LDA	#1
   3260  182e		       85 da		      STA	_Ch0_Duration
   3261  1830		       a9 00		      LDA	#0
   3262  1832		       85 db		      STA	_Ch0_Counter
   3263  1834				   .skipL0413
   3264  1834				   .L0414		;  if roommate_type  =  3 then _Bit2_Level_finished{2}  =  1  :  player0y  =  200  :  w_roommate_startpos_y  =  200  :  score	=  score  +  frame_counter  :  goto _skip_game_action
   3265  1834
   3266  1834		       a5 de		      LDA	roommate_type
   3267  1836		       c9 03		      CMP	#3
   3268  1838		       d0 25		      BNE	.skipL0414
   3269  183a				   .condpart73
   3270  183a		       a5 ec		      LDA	_Bit2_Level_finished
   3271  183c		       09 04		      ORA	#4
   3272  183e		       85 ec		      STA	_Bit2_Level_finished
   3273  1840		       a9 c8		      LDA	#200
   3274  1842		       85 85		      STA	player0y
   3275  1844		       8d 6a f0 	      STA	w_roommate_startpos_y
   3276  1847		       f8		      SED
   3277  1848		       18		      CLC
   3278  1849		       a5 95		      LDA	score+2
   3279  184b		       65 d5		      ADC	frame_counter
   3280  184d		       85 95		      STA	score+2
   3281  184f		       a5 94		      LDA	score+1
   3282  1851		       69 00		      ADC	#0
   3283  1853		       85 94		      STA	score+1
   3284  1855		       a5 93		      LDA	score
   3285  1857		       69 00		      ADC	#0
   3286  1859		       85 93		      STA	score
   3287  185b		       d8		      CLD
   3288  185c		       4c da d9 	      jmp	._skip_game_action
   3289  185f
   3290  185f				   .skipL0414
   3291  185f				   .L0415		;  if roommate_type  =  2 then P1y_velocity  =  0.0  :  x  =  0  :  pfscore2  =  pfscore2  *  2  |  1	:  player1y  =	player1y  -  1	:  if !_Bit0_Safe_Point_reached{0} then WriteSendBuffer  =  req_safe_point  :  _Bit0_Safe_Point_reached{0}  =  1  :  Safe_Point_P1_x  =  player1x  :  Safe_Point_P1_y  =  player1y  :  _Bit1_Safe_Point_P1_Flip{1}  =  _Bit6_Flip_P1{6}
   3292  185f
   3293  185f		       a5 de		      LDA	roommate_type
   3294  1861		       c9 02		      CMP	#2
   3295  1863		       d0 3d		      BNE	.skipL0415
   3296  1865				   .condpart74
   3297  1865		       a2 00		      LDX	#0
   3298  1867		       86 ea		      STX	w
   3299  1869		       a9 00		      LDA	#0
   3300  186b		       85 e9		      STA	P1y_velocity
   3301  186d		       a9 00		      LDA	#0
   3302  186f		       85 eb		      STA	x
   3303  1871							; complex statement detected
   3304  1871		       a5 f3		      LDA	pfscore2
   3305  1873		       0a		      asl
   3306  1874		       09 01		      ORA	#1
   3307  1876		       85 f3		      STA	pfscore2
   3308  1878		       c6 86		      DEC	player1y
   3309  187a		       a5 df		      LDA	_Bit0_Safe_Point_reached
   3310  187c		       4a		      LSR
   3311  187d		       b0 23		      BCS	.skip74then
   3312  187f				   .condpart75
   3313  187f		       a9 08		      LDA	#req_safe_point
   3314  1881		       8d f1 1f 	      STA	WriteSendBuffer
   3315  1884		       a5 df		      LDA	_Bit0_Safe_Point_reached
   3316  1886		       09 01		      ORA	#1
   3317  1888		       85 df		      STA	_Bit0_Safe_Point_reached
   3318  188a		       a5 81		      LDA	player1x
   3319  188c		       85 e0		      STA	Safe_Point_P1_x
   3320  188e		       a5 86		      LDA	player1y
   3321  1890		       85 e1		      STA	Safe_Point_P1_y
   3322  1892		       a5 ec		      LDA	_Bit6_Flip_P1
   3323  1894		       29 40		      AND	#64
   3324  1896		       08		      PHP
   3325  1897		       a5 df		      LDA	_Bit1_Safe_Point_P1_Flip
   3326  1899		       29 fd		      AND	#253
   3327  189b		       28		      PLP
   3328  189c		       f0 02		      .byte.b	$F0, $02
   3329  189e		       09 02		      ORA	#2
   3330  18a0		       85 df		      STA	_Bit1_Safe_Point_P1_Flip
   3331  18a2				   .skip74then
   3332  18a2				   .skipL0415
   3333  18a2				   .__Skip_P1_Touched_P0
   3334  18a2							; __Skip_P1_Touched_P0
   3335  18a2
   3336  18a2				   .
   3337  18a2							; 
   3338  18a2
   3339  18a2				   .
   3340  18a2							; 
   3341  18a2
   3342  18a2				   .
   3343  18a2							; 
   3344  18a2
   3345  18a2				   .L0416		;  if collision(player1,ball)	||  collision(player1,playfield) then goto _Decrease_live_counter
   3346  18a2
   3347  18a2		       24 03		      bit	CXP1FB
   3348  18a4		       50 03		      BVC	.skipL0416
   3349  18a6				   .condpart76
   3350  18a6		       4c ad d8 	      jmp	.condpart77
   3351  18a9				   .skipL0416
   3352  18a9		       24 03		      bit	CXP1FB
   3353  18ab		       10 03		      BPL	.skip12OR
   3354  18ad				   .condpart77
   3355  18ad		       4c 50 d5 	      jmp	._Decrease_live_counter
   3356  18b0
   3357  18b0				   .skip12OR
   3358  18b0				   .
   3359  18b0							; 
   3360  18b0
   3361  18b0				   .
   3362  18b0							; 
   3363  18b0
   3364  18b0				   .L0417		;  _BitOp_P1_Dir  =  _BitOp_P1_Dir  &	$F0
   3365  18b0
   3366  18b0		       a5 d8		      LDA	_BitOp_P1_Dir
   3367  18b2		       29 f0		      AND	#$F0
   3368  18b4		       85 d8		      STA	_BitOp_P1_Dir
   3369  18b6				   .
   3370  18b6							; 
   3371  18b6
   3372  18b6				   .L0418		;  if joy0up then P1y_velocity  =  0.0  :  x  =  0  :	player1y  =  player1y  -  1  :	_Bit0_P1_Dir_Up{0}  =  1  :  goto skip_gravity
   3373  18b6
   3374  18b6		       a9 10		      lda	#$10
   3375  18b8		       2c 80 02 	      bit	SWCHA
   3376  18bb		       d0 17		      BNE	.skipL0418
   3377  18bd				   .condpart78
   3378  18bd		       a2 00		      LDX	#0
   3379  18bf		       86 ea		      STX	w
   3380  18c1		       a9 00		      LDA	#0
   3381  18c3		       85 e9		      STA	P1y_velocity
   3382  18c5		       a9 00		      LDA	#0
   3383  18c7		       85 eb		      STA	x
   3384  18c9		       c6 86		      DEC	player1y
   3385  18cb		       a5 d8		      LDA	_Bit0_P1_Dir_Up
   3386  18cd		       09 01		      ORA	#1
   3387  18cf		       85 d8		      STA	_Bit0_P1_Dir_Up
   3388  18d1		       4c fd d8 	      jmp	.skip_gravity
   3389  18d4
   3390  18d4				   .skipL0418
   3391  18d4				   .L0419		;  if joy0down then player1y  =  player1y  +  1  :  _Bit1_P1_Dir_Down{1}  =  1
   3392  18d4
   3393  18d4		       a9 20		      lda	#$20
   3394  18d6		       2c 80 02 	      bit	SWCHA
   3395  18d9		       d0 08		      BNE	.skipL0419
   3396  18db				   .condpart79
   3397  18db		       e6 86		      INC	player1y
   3398  18dd		       a5 d8		      LDA	_Bit1_P1_Dir_Down
   3399  18df		       09 02		      ORA	#2
   3400  18e1		       85 d8		      STA	_Bit1_P1_Dir_Down
   3401  18e3				   .skipL0419
   3402  18e3				   .
   3403  18e3							; 
   3404  18e3
   3405  18e3				   .L0420		;  rem apply gravity
   3406  18e3
   3407  18e3				   .L0421		;  P1y_velocity  =  P1y_velocity  +  gravity_player1
   3408  18e3
   3409  18e3		       a5 ea		      LDA	w
   3410  18e5		       18		      CLC
   3411  18e6		       69 01		      ADC	#1
   3412  18e8		       85 ea		      STA	w
   3413  18ea		       a5 e9		      LDA	P1y_velocity
   3414  18ec		       69 00		      ADC	#0
   3415  18ee		       85 e9		      STA	P1y_velocity
   3416  18f0				   .L0422		;  P1y_position  =  P1y_position  +  P1y_velocity
   3417  18f0
   3418  18f0		       a5 eb		      LDA	x
   3419  18f2		       18		      CLC
   3420  18f3		       65 ea		      ADC	w
   3421  18f5		       85 eb		      STA	x
   3422  18f7		       a5 86		      LDA	P1y_position
   3423  18f9		       65 e9		      ADC	P1y_velocity
   3424  18fb		       85 86		      STA	P1y_position
   3425  18fd				   .
   3426  18fd							; 
   3427  18fd
   3428  18fd				   .skip_gravity
   3429  18fd							; skip_gravity
   3430  18fd
   3431  18fd				   .
   3432  18fd							; 
   3433  18fd
   3434  18fd				   .L0423		;  if joy0left then _Bit6_Flip_P1{6}  =  1  :	_Bit2_P1_Dir_Left{2}  =  1  :  player1x  =  player1x  -  1  :  goto _skip_move
   3435  18fd
   3436  18fd		       2c 80 02 	      bit	SWCHA
   3437  1900		       70 11		      BVS	.skipL0423
   3438  1902				   .condpart80
   3439  1902		       a5 ec		      LDA	_Bit6_Flip_P1
   3440  1904		       09 40		      ORA	#64
   3441  1906		       85 ec		      STA	_Bit6_Flip_P1
   3442  1908		       a5 d8		      LDA	_Bit2_P1_Dir_Left
   3443  190a		       09 04		      ORA	#4
   3444  190c		       85 d8		      STA	_Bit2_P1_Dir_Left
   3445  190e		       c6 81		      DEC	player1x
   3446  1910		       4c 26 d9 	      jmp	._skip_move
   3447  1913
   3448  1913				   .skipL0423
   3449  1913				   .L0424		;  if joy0right then _Bit6_Flip_P1{6}	=  0  :  _Bit3_P1_Dir_Right{3}	=  1  :  player1x  =  player1x	+  1
   3450  1913
   3451  1913		       2c 80 02 	      bit	SWCHA
   3452  1916		       30 0e		      BMI	.skipL0424
   3453  1918				   .condpart81
   3454  1918		       a5 ec		      LDA	_Bit6_Flip_P1
   3455  191a		       29 bf		      AND	#191
   3456  191c		       85 ec		      STA	_Bit6_Flip_P1
   3457  191e		       a5 d8		      LDA	_Bit3_P1_Dir_Right
   3458  1920		       09 08		      ORA	#8
   3459  1922		       85 d8		      STA	_Bit3_P1_Dir_Right
   3460  1924		       e6 81		      INC	player1x
   3461  1926				   .skipL0424
   3462  1926				   ._skip_move
   3463  1926							; _skip_move
   3464  1926
   3465  1926				   .
   3466  1926							; 
   3467  1926
   3468  1926				   .
   3469  1926							; 
   3470  1926
   3471  1926				   .L0425		;  if player1y  <  player_min_y  &&  r_Bit0_room_type_top{0} then player1y  =	player_min_y  :  goto _skip_game_action
   3472  1926
   3473  1926		       a5 86		      LDA	player1y
   3474  1928		       c9 02		      CMP	#player_min_y
   3475  192a		       b0 0d		      BCS	.skipL0425
   3476  192c				   .condpart82
   3477  192c		       ad e1 f0 	      LDA	r_Bit0_room_type_top
   3478  192f		       4a		      LSR
   3479  1930		       90 07		      BCC	.skip82then
   3480  1932				   .condpart83
   3481  1932		       a9 02		      LDA	#player_min_y
   3482  1934		       85 86		      STA	player1y
   3483  1936		       4c da d9 	      jmp	._skip_game_action
   3484  1939
   3485  1939				   .skip82then
   3486  1939				   .skipL0425
   3487  1939				   .
   3488  1939							; 
   3489  1939
   3490  1939				   .L0426		;  if player1x  <  player_min_x then _Bit2_New_Room_Flip_P1{2}  =  _Bit6_Flip_P1{6}  :  new_room_player1y  =  player1y  :  new_room_player1x  =  player_max_x	:  gosub _Add_Room_State  :  WriteSendBuffer  =  req_move_left	:  goto _skip_game_action
   3491  1939
   3492  1939		       a5 81		      LDA	player1x
   3493  193b		       c9 0a		      CMP	#player_min_x
   3494  193d		       b0 23		      BCS	.skipL0426
   3495  193f				   .condpart84
   3496  193f		       a5 ec		      LDA	_Bit6_Flip_P1
   3497  1941		       29 40		      AND	#64
   3498  1943		       08		      PHP
   3499  1944		       a5 df		      LDA	_Bit2_New_Room_Flip_P1
   3500  1946		       29 fb		      AND	#251
   3501  1948		       28		      PLP
   3502  1949		       f0 02		      .byte.b	$F0, $02
   3503  194b		       09 04		      ORA	#4
   3504  194d		       85 df		      STA	_Bit2_New_Room_Flip_P1
   3505  194f		       a5 86		      LDA	player1y
   3506  1951		       85 a4		      STA	new_room_player1y
   3507  1953		       a9 86		      LDA	#player_max_x
   3508  1955		       85 a5		      STA	new_room_player1x
   3509  1957		       20 c3 db 	      jsr	._Add_Room_State
   3510  195a		       a9 03		      LDA	#req_move_left
   3511  195c		       8d f1 1f 	      STA	WriteSendBuffer
   3512  195f		       4c da d9 	      jmp	._skip_game_action
   3513  1962
   3514  1962				   .skipL0426
   3515  1962				   .L0427		;  if player1y  <  player_min_y then _Bit2_New_Room_Flip_P1{2}  =  _Bit6_Flip_P1{6}  :  new_room_player1x  =  player1x  :  new_room_player1y  =  player_max_y	:  gosub _Add_Room_State  :  WriteSendBuffer  =  req_move_up  :  goto _skip_game_action
   3516  1962
   3517  1962		       a5 86		      LDA	player1y
   3518  1964		       c9 02		      CMP	#player_min_y
   3519  1966		       b0 23		      BCS	.skipL0427
   3520  1968				   .condpart85
   3521  1968		       a5 ec		      LDA	_Bit6_Flip_P1
   3522  196a		       29 40		      AND	#64
   3523  196c		       08		      PHP
   3524  196d		       a5 df		      LDA	_Bit2_New_Room_Flip_P1
   3525  196f		       29 fb		      AND	#251
   3526  1971		       28		      PLP
   3527  1972		       f0 02		      .byte.b	$F0, $02
   3528  1974		       09 04		      ORA	#4
   3529  1976		       85 df		      STA	_Bit2_New_Room_Flip_P1
   3530  1978		       a5 81		      LDA	player1x
   3531  197a		       85 a5		      STA	new_room_player1x
   3532  197c		       a9 4c		      LDA	#player_max_y
   3533  197e		       85 a4		      STA	new_room_player1y
   3534  1980		       20 c3 db 	      jsr	._Add_Room_State
   3535  1983		       a9 04		      LDA	#req_move_up
   3536  1985		       8d f1 1f 	      STA	WriteSendBuffer
   3537  1988		       4c da d9 	      jmp	._skip_game_action
   3538  198b
   3539  198b				   .skipL0427
   3540  198b				   .L0428		;  if player1x  >  player_max_x then _Bit2_New_Room_Flip_P1{2}  =  _Bit6_Flip_P1{6}  :  new_room_player1y  =  player1y  :  new_room_player1x  =  player_min_x	:  gosub _Add_Room_State  :  WriteSendBuffer  =  req_move_right  :  goto _skip_game_action
   3541  198b
   3542  198b		       a9 86		      LDA	#player_max_x
   3543  198d		       c5 81		      CMP	player1x
   3544  198f		       b0 23		      BCS	.skipL0428
   3545  1991				   .condpart86
   3546  1991		       a5 ec		      LDA	_Bit6_Flip_P1
   3547  1993		       29 40		      AND	#64
   3548  1995		       08		      PHP
   3549  1996		       a5 df		      LDA	_Bit2_New_Room_Flip_P1
   3550  1998		       29 fb		      AND	#251
   3551  199a		       28		      PLP
   3552  199b		       f0 02		      .byte.b	$F0, $02
   3553  199d		       09 04		      ORA	#4
   3554  199f		       85 df		      STA	_Bit2_New_Room_Flip_P1
   3555  19a1		       a5 86		      LDA	player1y
   3556  19a3		       85 a4		      STA	new_room_player1y
   3557  19a5		       a9 0a		      LDA	#player_min_x
   3558  19a7		       85 a5		      STA	new_room_player1x
   3559  19a9		       20 c3 db 	      jsr	._Add_Room_State
   3560  19ac		       a9 05		      LDA	#req_move_right
   3561  19ae		       8d f1 1f 	      STA	WriteSendBuffer
   3562  19b1		       4c da d9 	      jmp	._skip_game_action
   3563  19b4
   3564  19b4				   .skipL0428
   3565  19b4				   .L0429		;  if player1y  >  player_max_y then _Bit2_New_Room_Flip_P1{2}  =  _Bit6_Flip_P1{6}  :  new_room_player1x  =  player1x  :  new_room_player1y  =  player_min_y	:  gosub _Add_Room_State  :  WriteSendBuffer  =  req_move_down
   3566  19b4
   3567  19b4		       a9 4c		      LDA	#player_max_y
   3568  19b6		       c5 86		      CMP	player1y
   3569  19b8		       b0 20		      BCS	.skipL0429
   3570  19ba				   .condpart87
   3571  19ba		       a5 ec		      LDA	_Bit6_Flip_P1
   3572  19bc		       29 40		      AND	#64
   3573  19be		       08		      PHP
   3574  19bf		       a5 df		      LDA	_Bit2_New_Room_Flip_P1
   3575  19c1		       29 fb		      AND	#251
   3576  19c3		       28		      PLP
   3577  19c4		       f0 02		      .byte.b	$F0, $02
   3578  19c6		       09 04		      ORA	#4
   3579  19c8		       85 df		      STA	_Bit2_New_Room_Flip_P1
   3580  19ca		       a5 81		      LDA	player1x
   3581  19cc		       85 a5		      STA	new_room_player1x
   3582  19ce		       a9 02		      LDA	#player_min_y
   3583  19d0		       85 a4		      STA	new_room_player1y
   3584  19d2		       20 c3 db 	      jsr	._Add_Room_State
   3585  19d5		       a9 06		      LDA	#req_move_down
   3586  19d7		       8d f1 1f 	      STA	WriteSendBuffer
   3587  19da				   .skipL0429
   3588  19da				   .
   3589  19da							; 
   3590  19da
   3591  19da				   ._skip_game_action
   3592  19da							; _skip_game_action
   3593  19da
   3594  19da				   .
   3595  19da							; 
   3596  19da
   3597  19da				   .
   3598  19da							; 
   3599  19da
   3600  19da				   .L0430		;  if !_Ch0_Sound then goto __Skip_Ch_0
   3601  19da
   3602  19da		       a5 d9		      LDA	_Ch0_Sound
   3603  19dc		       d0 03		      BNE	.skipL0430
   3604  19de				   .condpart88
   3605  19de		       4c 0d db 	      jmp	.__Skip_Ch_0
   3606  19e1
   3607  19e1				   .skipL0430
   3608  19e1				   .
   3609  19e1							; 
   3610  19e1
   3611  19e1				   .
   3612  19e1							; 
   3613  19e1
   3614  19e1				   .L0431		;  _Ch0_Duration  =  _Ch0_Duration  -	1
   3615  19e1
   3616  19e1		       c6 da		      DEC	_Ch0_Duration
   3617  19e3				   .
   3618  19e3							; 
   3619  19e3
   3620  19e3				   .
   3621  19e3							; 
   3622  19e3
   3623  19e3				   .
   3624  19e3							; 
   3625  19e3
   3626  19e3				   .L0432		;  if _Ch0_Duration then goto __Skip_Ch_0
   3627  19e3
   3628  19e3		       a5 da		      LDA	_Ch0_Duration
   3629  19e5		       f0 03		      BEQ	.skipL0432
   3630  19e7				   .condpart89
   3631  19e7		       4c 0d db 	      jmp	.__Skip_Ch_0
   3632  19ea
   3633  19ea				   .skipL0432
   3634  19ea				   .
   3635  19ea							; 
   3636  19ea
   3637  19ea				   .
   3638  19ea							; 
   3639  19ea
   3640  19ea				   .
   3641  19ea							; 
   3642  19ea
   3643  19ea				   .
   3644  19ea							; 
   3645  19ea
   3646  19ea				   .L0433		;  if _Ch0_Sound  <>  1 then goto __Skip_Ch0_Sound_001
   3647  19ea
   3648  19ea		       a5 d9		      LDA	_Ch0_Sound
   3649  19ec		       c9 01		      CMP	#1
   3650  19ee		       f0 03		      BEQ	.skipL0433
   3651  19f0				   .condpart90
   3652  19f0		       4c 38 da 	      jmp	.__Skip_Ch0_Sound_001
   3653  19f3
   3654  19f3				   .skipL0433
   3655  19f3				   .
   3656  19f3							; 
   3657  19f3
   3658  19f3				   .
   3659  19f3							; 
   3660  19f3
   3661  19f3				   .L0434		;  temp4  =  _SD_Shot_Wall[_Ch0_Counter]
   3662  19f3
   3663  19f3		       a6 db		      LDX	_Ch0_Counter
   3664  19f5		       bd 5c dc 	      LDA	_SD_Shot_Wall,x
   3665  19f8		       85 9f		      STA	temp4
   3666  19fa				   .
   3667  19fa							; 
   3668  19fa
   3669  19fa				   .
   3670  19fa							; 
   3671  19fa
   3672  19fa				   .L0435		;  if temp4  =  255 then goto __Clear_Ch_0
   3673  19fa
   3674  19fa		       a5 9f		      LDA	temp4
   3675  19fc		       c9 ff		      CMP	#255
   3676  19fe		       d0 03		      BNE	.skipL0435
   3677  1a00				   .condpart91
   3678  1a00		       4c 07 db 	      jmp	.__Clear_Ch_0
   3679  1a03
   3680  1a03				   .skipL0435
   3681  1a03				   .
   3682  1a03							; 
   3683  1a03
   3684  1a03				   .
   3685  1a03							; 
   3686  1a03
   3687  1a03				   .L0436		;  _Ch0_Counter  =  _Ch0_Counter  +  1
   3688  1a03
   3689  1a03		       e6 db		      INC	_Ch0_Counter
   3690  1a05				   .L0437		;  temp5  =  _SD_Shot_Wall[_Ch0_Counter]  :  _Ch0_Counter  =  _Ch0_Counter  +	1
   3691  1a05
   3692  1a05		       a6 db		      LDX	_Ch0_Counter
   3693  1a07		       bd 5c dc 	      LDA	_SD_Shot_Wall,x
   3694  1a0a		       85 a0		      STA	temp5
   3695  1a0c		       e6 db		      INC	_Ch0_Counter
   3696  1a0e				   .L0438		;  temp6  =  _SD_Shot_Wall[_Ch0_Counter]  :  _Ch0_Counter  =  _Ch0_Counter  +	1
   3697  1a0e
   3698  1a0e		       a6 db		      LDX	_Ch0_Counter
   3699  1a10		       bd 5c dc 	      LDA	_SD_Shot_Wall,x
   3700  1a13		       85 a1		      STA	temp6
   3701  1a15		       e6 db		      INC	_Ch0_Counter
   3702  1a17				   .L0439		;  if _Ch0_Counter{0} then COLUBK  =  _E0
   3703  1a17
   3704  1a17		       a5 db		      LDA	_Ch0_Counter
   3705  1a19		       4a		      LSR
   3706  1a1a		       90 04		      BCC	.skipL0439
   3707  1a1c				   .condpart92
   3708  1a1c		       a9 e0		      LDA	#_E0
   3709  1a1e		       85 09		      STA	COLUBK
   3710  1a20				   .skipL0439
   3711  1a20				   .
   3712  1a20							; 
   3713  1a20
   3714  1a20				   .
   3715  1a20							; 
   3716  1a20
   3717  1a20				   .L0440		;  AUDV0  =  temp4
   3718  1a20
   3719  1a20		       a5 9f		      LDA	temp4
   3720  1a22		       85 19		      STA	AUDV0
   3721  1a24				   .L0441		;  AUDC0  =  temp5
   3722  1a24
   3723  1a24		       a5 a0		      LDA	temp5
   3724  1a26		       85 15		      STA	AUDC0
   3725  1a28				   .L0442		;  AUDF0  =  temp6
   3726  1a28
   3727  1a28		       a5 a1		      LDA	temp6
   3728  1a2a		       85 17		      STA	AUDF0
   3729  1a2c				   .
   3730  1a2c							; 
   3731  1a2c
   3732  1a2c				   .
   3733  1a2c							; 
   3734  1a2c
   3735  1a2c				   .L0443		;  _Ch0_Duration  =  _SD_Shot_Wall[_Ch0_Counter]  :  _Ch0_Counter  =  _Ch0_Counter  +	1
   3736  1a2c
   3737  1a2c		       a6 db		      LDX	_Ch0_Counter
   3738  1a2e		       bd 5c dc 	      LDA	_SD_Shot_Wall,x
   3739  1a31		       85 da		      STA	_Ch0_Duration
   3740  1a33		       e6 db		      INC	_Ch0_Counter
   3741  1a35				   .
   3742  1a35							; 
   3743  1a35
   3744  1a35				   .
   3745  1a35							; 
   3746  1a35
   3747  1a35				   .L0444		;  goto __Skip_Ch_0
   3748  1a35
   3749  1a35		       4c 0d db 	      jmp	.__Skip_Ch_0
   3750  1a38
   3751  1a38				   .
   3752  1a38							; 
   3753  1a38
   3754  1a38				   .__Skip_Ch0_Sound_001
   3755  1a38							; __Skip_Ch0_Sound_001
   3756  1a38
   3757  1a38				   .
   3758  1a38							; 
   3759  1a38
   3760  1a38				   .
   3761  1a38							; 
   3762  1a38
   3763  1a38				   .
   3764  1a38							; 
   3765  1a38
   3766  1a38				   .
   3767  1a38							; 
   3768  1a38
   3769  1a38				   .L0445		;  if _Ch0_Sound  <>  2 then goto __Skip_Ch0_Sound_002
   3770  1a38
   3771  1a38		       a5 d9		      LDA	_Ch0_Sound
   3772  1a3a		       c9 02		      CMP	#2
   3773  1a3c		       f0 03		      BEQ	.skipL0445
   3774  1a3e				   .condpart93
   3775  1a3e		       4c 7d da 	      jmp	.__Skip_Ch0_Sound_002
   3776  1a41
   3777  1a41				   .skipL0445
   3778  1a41				   .
   3779  1a41							; 
   3780  1a41
   3781  1a41				   .
   3782  1a41							; 
   3783  1a41
   3784  1a41				   .L0446		;  temp4  =  _SD_Shoot_Miss[_Ch0_Counter]
   3785  1a41
   3786  1a41		       a6 db		      LDX	_Ch0_Counter
   3787  1a43		       bd 94 dc 	      LDA	_SD_Shoot_Miss,x
   3788  1a46		       85 9f		      STA	temp4
   3789  1a48				   .
   3790  1a48							; 
   3791  1a48
   3792  1a48				   .
   3793  1a48							; 
   3794  1a48
   3795  1a48				   .L0447		;  if temp4  =  255 then goto __Clear_Ch_0
   3796  1a48
   3797  1a48		       a5 9f		      LDA	temp4
   3798  1a4a		       c9 ff		      CMP	#255
   3799  1a4c		       d0 03		      BNE	.skipL0447
   3800  1a4e				   .condpart94
   3801  1a4e		       4c 07 db 	      jmp	.__Clear_Ch_0
   3802  1a51
   3803  1a51				   .skipL0447
   3804  1a51				   .
   3805  1a51							; 
   3806  1a51
   3807  1a51				   .
   3808  1a51							; 
   3809  1a51
   3810  1a51				   .L0448		;  _Ch0_Counter  =  _Ch0_Counter  +  1
   3811  1a51
   3812  1a51		       e6 db		      INC	_Ch0_Counter
   3813  1a53				   .L0449		;  temp5  =  _SD_Shoot_Miss[_Ch0_Counter]  :  _Ch0_Counter  =	_Ch0_Counter  +  1
   3814  1a53
   3815  1a53		       a6 db		      LDX	_Ch0_Counter
   3816  1a55		       bd 94 dc 	      LDA	_SD_Shoot_Miss,x
   3817  1a58		       85 a0		      STA	temp5
   3818  1a5a		       e6 db		      INC	_Ch0_Counter
   3819  1a5c				   .L0450		;  temp6  =  _SD_Shoot_Miss[_Ch0_Counter]  :  _Ch0_Counter  =	_Ch0_Counter  +  1
   3820  1a5c
   3821  1a5c		       a6 db		      LDX	_Ch0_Counter
   3822  1a5e		       bd 94 dc 	      LDA	_SD_Shoot_Miss,x
   3823  1a61		       85 a1		      STA	temp6
   3824  1a63		       e6 db		      INC	_Ch0_Counter
   3825  1a65				   .
   3826  1a65							; 
   3827  1a65
   3828  1a65				   .
   3829  1a65							; 
   3830  1a65
   3831  1a65				   .L0451		;  AUDV0  =  temp4
   3832  1a65
   3833  1a65		       a5 9f		      LDA	temp4
   3834  1a67		       85 19		      STA	AUDV0
   3835  1a69				   .L0452		;  AUDC0  =  temp5
   3836  1a69
   3837  1a69		       a5 a0		      LDA	temp5
   3838  1a6b		       85 15		      STA	AUDC0
   3839  1a6d				   .L0453		;  AUDF0  =  temp6
   3840  1a6d
   3841  1a6d		       a5 a1		      LDA	temp6
   3842  1a6f		       85 17		      STA	AUDF0
   3843  1a71				   .
   3844  1a71							; 
   3845  1a71
   3846  1a71				   .
   3847  1a71							; 
   3848  1a71
   3849  1a71				   .L0454		;  _Ch0_Duration  =  _SD_Shoot_Miss[_Ch0_Counter]  :  _Ch0_Counter  =	_Ch0_Counter  +  1
   3850  1a71
   3851  1a71		       a6 db		      LDX	_Ch0_Counter
   3852  1a73		       bd 94 dc 	      LDA	_SD_Shoot_Miss,x
   3853  1a76		       85 da		      STA	_Ch0_Duration
   3854  1a78		       e6 db		      INC	_Ch0_Counter
   3855  1a7a				   .
   3856  1a7a							; 
   3857  1a7a
   3858  1a7a				   .
   3859  1a7a							; 
   3860  1a7a
   3861  1a7a				   .L0455		;  goto __Skip_Ch_0
   3862  1a7a
   3863  1a7a		       4c 0d db 	      jmp	.__Skip_Ch_0
   3864  1a7d
   3865  1a7d				   .
   3866  1a7d							; 
   3867  1a7d
   3868  1a7d				   .__Skip_Ch0_Sound_002
   3869  1a7d							; __Skip_Ch0_Sound_002
   3870  1a7d
   3871  1a7d				   .
   3872  1a7d							; 
   3873  1a7d
   3874  1a7d				   .
   3875  1a7d							; 
   3876  1a7d
   3877  1a7d				   .
   3878  1a7d							; 
   3879  1a7d
   3880  1a7d				   .
   3881  1a7d							; 
   3882  1a7d
   3883  1a7d				   .L0456		;  if _Ch0_Sound  <>  3 then goto __Skip_Ch0_Sound_003
   3884  1a7d
   3885  1a7d		       a5 d9		      LDA	_Ch0_Sound
   3886  1a7f		       c9 03		      CMP	#3
   3887  1a81		       f0 03		      BEQ	.skipL0456
   3888  1a83				   .condpart95
   3889  1a83		       4c c2 da 	      jmp	.__Skip_Ch0_Sound_003
   3890  1a86
   3891  1a86				   .skipL0456
   3892  1a86				   .
   3893  1a86							; 
   3894  1a86
   3895  1a86				   .
   3896  1a86							; 
   3897  1a86
   3898  1a86				   .L0457		;  temp4  =  _SD_Shoot_Enemy[_Ch0_Counter]
   3899  1a86
   3900  1a86		       a6 db		      LDX	_Ch0_Counter
   3901  1a88		       bd dc dc 	      LDA	_SD_Shoot_Enemy,x
   3902  1a8b		       85 9f		      STA	temp4
   3903  1a8d				   .
   3904  1a8d							; 
   3905  1a8d
   3906  1a8d				   .
   3907  1a8d							; 
   3908  1a8d
   3909  1a8d				   .L0458		;  if temp4  =  255 then goto __Clear_Ch_0
   3910  1a8d
   3911  1a8d		       a5 9f		      LDA	temp4
   3912  1a8f		       c9 ff		      CMP	#255
   3913  1a91		       d0 03		      BNE	.skipL0458
   3914  1a93				   .condpart96
   3915  1a93		       4c 07 db 	      jmp	.__Clear_Ch_0
   3916  1a96
   3917  1a96				   .skipL0458
   3918  1a96				   .
   3919  1a96							; 
   3920  1a96
   3921  1a96				   .
   3922  1a96							; 
   3923  1a96
   3924  1a96				   .L0459		;  _Ch0_Counter  =  _Ch0_Counter  +  1
   3925  1a96
   3926  1a96		       e6 db		      INC	_Ch0_Counter
   3927  1a98				   .L0460		;  temp5  =  _SD_Shoot_Enemy[_Ch0_Counter]  :	_Ch0_Counter  =  _Ch0_Counter  +  1
   3928  1a98
   3929  1a98		       a6 db		      LDX	_Ch0_Counter
   3930  1a9a		       bd dc dc 	      LDA	_SD_Shoot_Enemy,x
   3931  1a9d		       85 a0		      STA	temp5
   3932  1a9f		       e6 db		      INC	_Ch0_Counter
   3933  1aa1				   .L0461		;  temp6  =  _SD_Shoot_Enemy[_Ch0_Counter]  :	_Ch0_Counter  =  _Ch0_Counter  +  1
   3934  1aa1
   3935  1aa1		       a6 db		      LDX	_Ch0_Counter
   3936  1aa3		       bd dc dc 	      LDA	_SD_Shoot_Enemy,x
   3937  1aa6		       85 a1		      STA	temp6
   3938  1aa8		       e6 db		      INC	_Ch0_Counter
   3939  1aaa				   .
   3940  1aaa							; 
   3941  1aaa
   3942  1aaa				   .
   3943  1aaa							; 
   3944  1aaa
   3945  1aaa				   .L0462		;  AUDV0  =  temp4
   3946  1aaa
   3947  1aaa		       a5 9f		      LDA	temp4
   3948  1aac		       85 19		      STA	AUDV0
   3949  1aae				   .L0463		;  AUDC0  =  temp5
   3950  1aae
   3951  1aae		       a5 a0		      LDA	temp5
   3952  1ab0		       85 15		      STA	AUDC0
   3953  1ab2				   .L0464		;  AUDF0  =  temp6
   3954  1ab2
   3955  1ab2		       a5 a1		      LDA	temp6
   3956  1ab4		       85 17		      STA	AUDF0
   3957  1ab6				   .
   3958  1ab6							; 
   3959  1ab6
   3960  1ab6				   .
   3961  1ab6							; 
   3962  1ab6
   3963  1ab6				   .L0465		;  _Ch0_Duration  =  _SD_Shoot_Enemy[_Ch0_Counter]  :	_Ch0_Counter  =  _Ch0_Counter  +  1
   3964  1ab6
   3965  1ab6		       a6 db		      LDX	_Ch0_Counter
   3966  1ab8		       bd dc dc 	      LDA	_SD_Shoot_Enemy,x
   3967  1abb		       85 da		      STA	_Ch0_Duration
   3968  1abd		       e6 db		      INC	_Ch0_Counter
   3969  1abf				   .
   3970  1abf							; 
   3971  1abf
   3972  1abf				   .
   3973  1abf							; 
   3974  1abf
   3975  1abf				   .L0466		;  goto __Skip_Ch_0
   3976  1abf
   3977  1abf		       4c 0d db 	      jmp	.__Skip_Ch_0
   3978  1ac2
   3979  1ac2				   .
   3980  1ac2							; 
   3981  1ac2
   3982  1ac2				   .__Skip_Ch0_Sound_003
   3983  1ac2							; __Skip_Ch0_Sound_003
   3984  1ac2
   3985  1ac2				   .
   3986  1ac2							; 
   3987  1ac2
   3988  1ac2				   .
   3989  1ac2							; 
   3990  1ac2
   3991  1ac2				   .
   3992  1ac2							; 
   3993  1ac2
   3994  1ac2				   .
   3995  1ac2							; 
   3996  1ac2
   3997  1ac2				   .L0467		;  if _Ch0_Sound  <>  4 then goto __Skip_Ch0_Sound_004
   3998  1ac2
   3999  1ac2		       a5 d9		      LDA	_Ch0_Sound
   4000  1ac4		       c9 04		      CMP	#4
   4001  1ac6		       f0 03		      BEQ	.skipL0467
   4002  1ac8				   .condpart97
   4003  1ac8		       4c 07 db 	      jmp	.__Skip_Ch0_Sound_004
   4004  1acb
   4005  1acb				   .skipL0467
   4006  1acb				   .
   4007  1acb							; 
   4008  1acb
   4009  1acb				   .
   4010  1acb							; 
   4011  1acb
   4012  1acb				   .L0468		;  temp4  =  _SD_Touch_Enemy[_Ch0_Counter]
   4013  1acb
   4014  1acb		       a6 db		      LDX	_Ch0_Counter
   4015  1acd		       bd 00 dd 	      LDA	_SD_Touch_Enemy,x
   4016  1ad0		       85 9f		      STA	temp4
   4017  1ad2				   .
   4018  1ad2							; 
   4019  1ad2
   4020  1ad2				   .
   4021  1ad2							; 
   4022  1ad2
   4023  1ad2				   .L0469		;  if temp4  =  255 then goto __Clear_Ch_0
   4024  1ad2
   4025  1ad2		       a5 9f		      LDA	temp4
   4026  1ad4		       c9 ff		      CMP	#255
   4027  1ad6		       d0 03		      BNE	.skipL0469
   4028  1ad8				   .condpart98
   4029  1ad8		       4c 07 db 	      jmp	.__Clear_Ch_0
   4030  1adb
   4031  1adb				   .skipL0469
   4032  1adb				   .
   4033  1adb							; 
   4034  1adb
   4035  1adb				   .
   4036  1adb							; 
   4037  1adb
   4038  1adb				   .L0470		;  _Ch0_Counter  =  _Ch0_Counter  +  1
   4039  1adb
   4040  1adb		       e6 db		      INC	_Ch0_Counter
   4041  1add				   .L0471		;  temp5  =  _SD_Touch_Enemy[_Ch0_Counter]  :	_Ch0_Counter  =  _Ch0_Counter  +  1
   4042  1add
   4043  1add		       a6 db		      LDX	_Ch0_Counter
   4044  1adf		       bd 00 dd 	      LDA	_SD_Touch_Enemy,x
   4045  1ae2		       85 a0		      STA	temp5
   4046  1ae4		       e6 db		      INC	_Ch0_Counter
   4047  1ae6				   .L0472		;  temp6  =  _SD_Touch_Enemy[_Ch0_Counter]  :	_Ch0_Counter  =  _Ch0_Counter  +  1
   4048  1ae6
   4049  1ae6		       a6 db		      LDX	_Ch0_Counter
   4050  1ae8		       bd 00 dd 	      LDA	_SD_Touch_Enemy,x
   4051  1aeb		       85 a1		      STA	temp6
   4052  1aed		       e6 db		      INC	_Ch0_Counter
   4053  1aef				   .
   4054  1aef							; 
   4055  1aef
   4056  1aef				   .
   4057  1aef							; 
   4058  1aef
   4059  1aef				   .L0473		;  AUDV0  =  temp4
   4060  1aef
   4061  1aef		       a5 9f		      LDA	temp4
   4062  1af1		       85 19		      STA	AUDV0
   4063  1af3				   .L0474		;  AUDC0  =  temp5
   4064  1af3
   4065  1af3		       a5 a0		      LDA	temp5
   4066  1af5		       85 15		      STA	AUDC0
   4067  1af7				   .L0475		;  AUDF0  =  temp6
   4068  1af7
   4069  1af7		       a5 a1		      LDA	temp6
   4070  1af9		       85 17		      STA	AUDF0
   4071  1afb				   .
   4072  1afb							; 
   4073  1afb
   4074  1afb				   .
   4075  1afb							; 
   4076  1afb
   4077  1afb				   .L0476		;  _Ch0_Duration  =  _SD_Touch_Enemy[_Ch0_Counter]  :	_Ch0_Counter  =  _Ch0_Counter  +  1
   4078  1afb
   4079  1afb		       a6 db		      LDX	_Ch0_Counter
   4080  1afd		       bd 00 dd 	      LDA	_SD_Touch_Enemy,x
   4081  1b00		       85 da		      STA	_Ch0_Duration
   4082  1b02		       e6 db		      INC	_Ch0_Counter
   4083  1b04				   .
   4084  1b04							; 
   4085  1b04
   4086  1b04				   .
   4087  1b04							; 
   4088  1b04
   4089  1b04				   .L0477		;  goto __Skip_Ch_0
   4090  1b04
   4091  1b04		       4c 0d db 	      jmp	.__Skip_Ch_0
   4092  1b07
   4093  1b07				   .
   4094  1b07							; 
   4095  1b07
   4096  1b07				   .__Skip_Ch0_Sound_004
   4097  1b07							; __Skip_Ch0_Sound_004
   4098  1b07
   4099  1b07				   .
   4100  1b07							; 
   4101  1b07
   4102  1b07				   .
   4103  1b07							; 
   4104  1b07
   4105  1b07				   .__Clear_Ch_0
   4106  1b07							; __Clear_Ch_0
   4107  1b07
   4108  1b07				   .L0478		;  _Ch0_Sound	=  0  :  AUDV0	=  0
   4109  1b07
   4110  1b07		       a9 00		      LDA	#0
   4111  1b09		       85 d9		      STA	_Ch0_Sound
   4112  1b0b		       85 19		      STA	AUDV0
   4113  1b0d				   .
   4114  1b0d							; 
   4115  1b0d
   4116  1b0d				   .
   4117  1b0d							; 
   4118  1b0d
   4119  1b0d				   .__Skip_Ch_0
   4120  1b0d							; __Skip_Ch_0
   4121  1b0d
   4122  1b0d				   .
   4123  1b0d							; 
   4124  1b0d
   4125  1b0d				   .
   4126  1b0d							; 
   4127  1b0d
   4128  1b0d				   .
   4129  1b0d							; 
   4130  1b0d
   4131  1b0d				   .
   4132  1b0d							; 
   4133  1b0d
   4134  1b0d				   .L0479		;  if _Bit6_Flip_P1{6} then REFP1  =  8
   4135  1b0d
   4136  1b0d		       24 ec		      BIT	_Bit6_Flip_P1
   4137  1b0f		       50 04		      BVC	.skipL0479
   4138  1b11				   .condpart99
   4139  1b11		       a9 08		      LDA	#8
   4140  1b13		       85 0c		      STA	REFP1
   4141  1b15				   .skipL0479
   4142  1b15				   .L0480		;  if _Bit0_roommate_Dir{0} then REFP0  =  8
   4143  1b15
   4144  1b15		       a5 ec		      LDA	_Bit0_roommate_Dir
   4145  1b17		       4a		      LSR
   4146  1b18		       90 04		      BCC	.skipL0480
   4147  1b1a				   .condpart100
   4148  1b1a		       a9 08		      LDA	#8
   4149  1b1c		       85 0b		      STA	REFP0
   4150  1b1e				   .skipL0480
   4151  1b1e				   .
   4152  1b1e							; 
   4153  1b1e
   4154  1b1e				   .L0481		;  drawscreen
   4155  1b1e
   4156  1b1e		       85 ee		      sta	temp7
   4157  1b20		       a9 db		      lda	#>(ret_point3-1)
   4158  1b22		       48		      pha
   4159  1b23		       a9 35		      lda	#<(ret_point3-1)
   4160  1b25		       48		      pha
   4161  1b26		       a9 f5		      lda	#>(drawscreen-1)
   4162  1b28		       48		      pha
   4163  1b29		       a9 82		      lda	#<(drawscreen-1)
   4164  1b2b		       48		      pha
   4165  1b2c		       a5 ee		      lda	temp7
   4166  1b2e		       48		      pha
   4167  1b2f		       8a		      txa
   4168  1b30		       48		      pha
   4169  1b31		       a2 02		      ldx	#2
   4170  1b33		       4c e8 ff 	      jmp	BS_jsr
   4171  1b36				   ret_point3
   4172  1b36				   .
   4173  1b36							; 
   4174  1b36
   4175  1b36				   .L0482		;  goto __Main_Loop
   4176  1b36
   4177  1b36		       4c 27 d3 	      jmp	.__Main_Loop
   4178  1b39
   4179  1b39				   .
   4180  1b39							; 
   4181  1b39
   4182  1b39				   .
   4183  1b39							; 
   4184  1b39
   4185  1b39				   .
   4186  1b39							; 
   4187  1b39
   4188  1b39				   .
   4189  1b39							; 
   4190  1b39
   4191  1b39				   .
   4192  1b39							; 
   4193  1b39
   4194  1b39				   ._Set_Game_Over
   4195  1b39							; _Set_Game_Over
   4196  1b39
   4197  1b39				   .L0483		;  WriteToBuffer  =  _sc1
   4198  1b39
   4199  1b39		       a5 93		      LDA	_sc1
   4200  1b3b		       8d f0 1f 	      STA	WriteToBuffer
   4201  1b3e				   .L0484		;  WriteToBuffer  =  _sc2
   4202  1b3e
   4203  1b3e		       a5 94		      LDA	_sc2
   4204  1b40		       8d f0 1f 	      STA	WriteToBuffer
   4205  1b43				   .L0485		;  WriteToBuffer  =  _sc3
   4206  1b43
   4207  1b43		       a5 95		      LDA	_sc3
   4208  1b45		       8d f0 1f 	      STA	WriteToBuffer
   4209  1b48				   .L0486		;  WriteSendBuffer  =	req_game_over
   4210  1b48
   4211  1b48		       a9 02		      LDA	#req_game_over
   4212  1b4a		       8d f1 1f 	      STA	WriteSendBuffer
   4213  1b4d				   .L0487		;  _Bit4_Game_Over{4}	=  1
   4214  1b4d
   4215  1b4d		       a5 ec		      LDA	_Bit4_Game_Over
   4216  1b4f		       09 10		      ORA	#16
   4217  1b51		       85 ec		      STA	_Bit4_Game_Over
   4218  1b53				   .L0488		;  goto _skip_game_action
   4219  1b53
   4220  1b53		       4c da d9 	      jmp	._skip_game_action
   4221  1b56
   4222  1b56				   .
   4223  1b56							; 
   4224  1b56
   4225  1b56				   ._Reset_Level
   4226  1b56							; _Reset_Level
   4227  1b56
   4228  1b56				   .L0489		;  WriteSendBuffer  =	req_level_reset
   4229  1b56
   4230  1b56		       a9 07		      LDA	#req_level_reset
   4231  1b58		       8d f1 1f 	      STA	WriteSendBuffer
   4232  1b5b				   .L0490		;  _Bit2_New_Room_Flip_P1{2}  =  _Bit1_Safe_Point_P1_Flip{1}
   4233  1b5b
   4234  1b5b		       a5 df		      LDA	_Bit1_Safe_Point_P1_Flip
   4235  1b5d		       29 02		      AND	#2
   4236  1b5f		       08		      PHP
   4237  1b60		       a5 df		      LDA	_Bit2_New_Room_Flip_P1
   4238  1b62		       29 fb		      AND	#251
   4239  1b64		       28		      PLP
   4240  1b65		       f0 02		      .byte.b	$F0, $02
   4241  1b67		       09 04		      ORA	#4
   4242  1b69		       85 df		      STA	_Bit2_New_Room_Flip_P1
   4243  1b6b				   .
   4244  1b6b							; 
   4245  1b6b
   4246  1b6b				   ._Common_Reset
   4247  1b6b							; _Common_Reset
   4248  1b6b
   4249  1b6b				   .L0491		;  delay_counter  =  60
   4250  1b6b
   4251  1b6b		       a9 3c		      LDA	#60
   4252  1b6d		       85 d4		      STA	delay_counter
   4253  1b6f				   .L0492		;  _Bit5_Request_Pending{5}  =  1
   4254  1b6f
   4255  1b6f		       a5 ec		      LDA	_Bit5_Request_Pending
   4256  1b71		       09 20		      ORA	#32
   4257  1b73		       85 ec		      STA	_Bit5_Request_Pending
   4258  1b75				   .L0493		;  pfscore2  =  255
   4259  1b75
   4260  1b75		       a9 ff		      LDA	#255
   4261  1b77		       85 f3		      STA	pfscore2
   4262  1b79				   .L0494		;  P1y_velocity  =  0.0  :  x	=  0
   4263  1b79
   4264  1b79		       a2 00		      LDX	#0
   4265  1b7b		       86 ea		      STX	w
   4266  1b7d		       a9 00		      LDA	#0
   4267  1b7f		       85 e9		      STA	P1y_velocity
   4268  1b81		       a9 00		      LDA	#0
   4269  1b83		       85 eb		      STA	x
   4270  1b85				   .L0495		;  new_room_player1x  =  Safe_Point_P1_x
   4271  1b85
   4272  1b85		       a5 e0		      LDA	Safe_Point_P1_x
   4273  1b87		       85 a5		      STA	new_room_player1x
   4274  1b89				   .L0496		;  new_room_player1y  =  Safe_Point_P1_y
   4275  1b89
   4276  1b89		       a5 e1		      LDA	Safe_Point_P1_y
   4277  1b8b		       85 a4		      STA	new_room_player1y
   4278  1b8d				   .L0497		;  goto _skip_game_action
   4279  1b8d
   4280  1b8d		       4c da d9 	      jmp	._skip_game_action
   4281  1b90
   4282  1b90				   .
   4283  1b90							; 
   4284  1b90
   4285  1b90				   ._Level_Up
   4286  1b90							; _Level_Up
   4287  1b90
   4288  1b90				   .L0498		;  WriteToBuffer  =  _sc1
   4289  1b90
   4290  1b90		       a5 93		      LDA	_sc1
   4291  1b92		       8d f0 1f 	      STA	WriteToBuffer
   4292  1b95				   .L0499		;  WriteToBuffer  =  _sc2
   4293  1b95
   4294  1b95		       a5 94		      LDA	_sc2
   4295  1b97		       8d f0 1f 	      STA	WriteToBuffer
   4296  1b9a				   .L0500		;  WriteToBuffer  =  _sc3
   4297  1b9a
   4298  1b9a		       a5 95		      LDA	_sc3
   4299  1b9c		       8d f0 1f 	      STA	WriteToBuffer
   4300  1b9f				   .L0501		;  WriteSendBuffer  =	req_level_up
   4301  1b9f
   4302  1b9f		       a9 01		      LDA	#req_level_up
   4303  1ba1		       8d f1 1f 	      STA	WriteSendBuffer
   4304  1ba4				   .L0502		;  _BitOp_Safe_Point_New_Room	=  0
   4305  1ba4
   4306  1ba4		       a9 00		      LDA	#0
   4307  1ba6		       85 df		      STA	_BitOp_Safe_Point_New_Room
   4308  1ba8				   .L0503		;  Safe_Point_P1_x  =	30
   4309  1ba8
   4310  1ba8		       a9 1e		      LDA	#30
   4311  1baa		       85 e0		      STA	Safe_Point_P1_x
   4312  1bac				   .L0504		;  Safe_Point_P1_y  =	player_min_y
   4313  1bac
   4314  1bac		       a9 02		      LDA	#player_min_y
   4315  1bae		       85 e1		      STA	Safe_Point_P1_y
   4316  1bb0				   .L0505		;  pfscore1  =  %00101010
   4317  1bb0
   4318  1bb0		       a9 2a		      LDA	#%00101010
   4319  1bb2		       85 f2		      STA	pfscore1
   4320  1bb4				   .L0506		;  score  =  0
   4321  1bb4
   4322  1bb4		       a9 00		      LDA	#$00
   4323  1bb6		       85 95		      STA	score+2
   4324  1bb8		       a9 00		      LDA	#$00
   4325  1bba		       85 94		      STA	score+1
   4326  1bbc		       a9 00		      LDA	#$00
   4327  1bbe		       85 93		      STA	score
   4328  1bc0				   .L0507		;  goto _Common_Reset
   4329  1bc0
   4330  1bc0		       4c 6b db 	      jmp	._Common_Reset
   4331  1bc3
   4332  1bc3				   .
   4333  1bc3							; 
   4334  1bc3
   4335  1bc3				   .
   4336  1bc3							; 
   4337  1bc3
   4338  1bc3				   .
   4339  1bc3							; 
   4340  1bc3
   4341  1bc3				   ._Add_Room_State
   4342  1bc3							; _Add_Room_State
   4343  1bc3
   4344  1bc3				   .L0508		;  _Bit5_Request_Pending{5}  =  1
   4345  1bc3
   4346  1bc3		       a5 ec		      LDA	_Bit5_Request_Pending
   4347  1bc5		       09 20		      ORA	#32
   4348  1bc7		       85 ec		      STA	_Bit5_Request_Pending
   4349  1bc9				   .L0509		;  WriteToBuffer  =  r104
   4350  1bc9
   4351  1bc9		       ad e8 f0 	      LDA	r104
   4352  1bcc		       8d f0 1f 	      STA	WriteToBuffer
   4353  1bcf				   .L0510		;  WriteToBuffer  =  r105
   4354  1bcf
   4355  1bcf		       ad e9 f0 	      LDA	r105
   4356  1bd2		       8d f0 1f 	      STA	WriteToBuffer
   4357  1bd5				   .L0511		;  WriteToBuffer  =  r106
   4358  1bd5
   4359  1bd5		       ad ea f0 	      LDA	r106
   4360  1bd8		       8d f0 1f 	      STA	WriteToBuffer
   4361  1bdb				   .L0512		;  WriteToBuffer  =  r107
   4362  1bdb
   4363  1bdb		       ad eb f0 	      LDA	r107
   4364  1bde		       8d f0 1f 	      STA	WriteToBuffer
   4365  1be1				   .L0513		;  WriteToBuffer  =  r108
   4366  1be1
   4367  1be1		       ad ec f0 	      LDA	r108
   4368  1be4		       8d f0 1f 	      STA	WriteToBuffer
   4369  1be7				   .L0514		;  WriteToBuffer  =  r109
   4370  1be7
   4371  1be7		       ad ed f0 	      LDA	r109
   4372  1bea		       8d f0 1f 	      STA	WriteToBuffer
   4373  1bed				   .L0515		;  WriteToBuffer  =  r110
   4374  1bed
   4375  1bed		       ad ee f0 	      LDA	r110
   4376  1bf0		       8d f0 1f 	      STA	WriteToBuffer
   4377  1bf3				   .L0516		;  WriteToBuffer  =  r111
   4378  1bf3
   4379  1bf3		       ad ef f0 	      LDA	r111
   4380  1bf6		       8d f0 1f 	      STA	WriteToBuffer
   4381  1bf9				   .L0517		;  return
   4382  1bf9
   4383  1bf9		       ba		      tsx
   4384  1bfa		       b5 02		      lda	2,x	; check return address
   4385  1bfc		       49 db		      eor	#(>*)	; vs. current PCH
   4386  1bfe		       29 e0		      and	#$E0	;  mask off all but top 3 bits
   4387  1c00		       f0 03		      beq	*+5	; if equal, do normal return
   4388  1c02		       4c da ff 	      JMP	BS_return
   4389  1c05		       60		      RTS
   4390  1c06				   .
   4391  1c06							; 
   4392  1c06
   4393  1c06				   .
   4394  1c06							; 
   4395  1c06
   4396  1c06				   .
   4397  1c06							; 
   4398  1c06
   4399  1c06				   .
   4400  1c06							; 
   4401  1c06
   4402  1c06				   ._Change_Room
   4403  1c06							; _Change_Room
   4404  1c06
   4405  1c06				   .L0518		;  delay_counter  =  2
   4406  1c06
   4407  1c06		       a9 02		      LDA	#2
   4408  1c08		       85 d4		      STA	delay_counter
   4409  1c0a				   .L0519		;  player0y  =  200  :  ball_shoot_x  =  200  :  ball_shoot_y	=  200	:  missile0x  =  200  :  missile0y  =  200
   4410  1c0a
   4411  1c0a		       a9 c8		      LDA	#200
   4412  1c0c		       85 85		      STA	player0y
   4413  1c0e		       85 ae		      STA	ball_shoot_x
   4414  1c10		       85 af		      STA	ball_shoot_y
   4415  1c12		       85 82		      STA	missile0x
   4416  1c14		       85 91		      STA	missile0y
   4417  1c16				   .
   4418  1c16							; 
   4419  1c16
   4420  1c16				   .
   4421  1c16							; 
   4422  1c16
   4423  1c16				   .L0520		;  _Bit_Game_State  =	_Bit_Game_State  &  %01010100
   4424  1c16
   4425  1c16		       a5 ec		      LDA	_Bit_Game_State
   4426  1c18		       29 54		      AND	#%01010100
   4427  1c1a		       85 ec		      STA	_Bit_Game_State
   4428  1c1c				   .L0521		;  _Bit0_Safe_Point_reached{0}  =  0
   4429  1c1c
   4430  1c1c		       a5 df		      LDA	_Bit0_Safe_Point_reached
   4431  1c1e		       29 fe		      AND	#254
   4432  1c20		       85 df		      STA	_Bit0_Safe_Point_reached
   4433  1c22				   .L0522		;  player1y  =  new_room_player1y  :  player1x  =  new_room_player1x  :  _Bit6_Flip_P1{6}  =  _Bit2_New_Room_Flip_P1{2}
   4434  1c22
   4435  1c22		       a5 a4		      LDA	new_room_player1y
   4436  1c24		       85 86		      STA	player1y
   4437  1c26		       a5 a5		      LDA	new_room_player1x
   4438  1c28		       85 81		      STA	player1x
   4439  1c2a		       a5 df		      LDA	_Bit2_New_Room_Flip_P1
   4440  1c2c		       29 04		      AND	#4
   4441  1c2e		       08		      PHP
   4442  1c2f		       a5 ec		      LDA	_Bit6_Flip_P1
   4443  1c31		       29 bf		      AND	#191
   4444  1c33		       28		      PLP
   4445  1c34		       f0 02		      .byte.b	$F0, $02
   4446  1c36		       09 40		      ORA	#64
   4447  1c38		       85 ec		      STA	_Bit6_Flip_P1
   4448  1c3a				   .L0523		;  asm
   4449  1c3a
   4450  1c3a		       a9 00		      LDA	#0
   4451  1c3c
   4452  1c3c		       85 89		      STA	bally
   4453  1c3e
   4454  1c3e		       85 dc		      STA	extra_wall_move_x
   4455  1c40
   4456  1c40		       85 dd		      STA	roommate_move_x
   4457  1c42
   4458  1c42		       aa		      TAX
   4459  1c43
   4460  1c43				   .copy_loop
   4461  1c43
   4462  1c43		       ad f2 1f 	      LDA	ReceiveBuffer	; 4
   4463  1c46
   4464  1c46		       9d 61 f0 	      STA	w_room_definition_start,x	; 5   @9
   4465  1c49
   4466  1c49		       e8		      INX		; 2   @11
   4467  1c4a
   4468  1c4a		       ad f3 1f 	      LDA	ReceiveBufferSize	; 4   @15
   4469  1c4d
   4470  1c4d		       d0 f4		      BNE	.copy_loop	; 2/3 @18
   4471  1c4f
   4472  1c4f				   .L0524		;  roommate_type  =  r_roommate_type_and_range  &  3
   4473  1c4f
   4474  1c4f		       ad e8 f0 	      LDA	r_roommate_type_and_range
   4475  1c52		       29 03		      AND	#3
   4476  1c54		       85 de		      STA	roommate_type
   4477  1c56				   .L0525		;  goto _skip_game_action
   4478  1c56
   4479  1c56		       4c da d9 	      jmp	._skip_game_action
   4480  1c59
   4481  1c59				   .
   4482  1c59							; 
   4483  1c59
   4484  1c59				   .
   4485  1c59							; 
   4486  1c59
   4487  1c59				   .
   4488  1c59							; 
   4489  1c59
   4490  1c59				   .
   4491  1c59							; 
   4492  1c59
   4493  1c59				   .
   4494  1c59							; 
   4495  1c59
   4496  1c59				   .
   4497  1c59							; 
   4498  1c59
   4499  1c59				   .L0526		;  data _SD_Shot_Wall
   4500  1c59
   4501  1c59		       4c 91 dc 	      JMP	.skipL0526
   4502  1c5c				   _SD_Shot_Wall
   4503  1c5c		       08 08 00 	      .byte.b	8,8,0
   4504  1c5f
   4505  1c5f		       01		      .byte.b	1
   4506  1c60
   4507  1c60		       08 08 01 	      .byte.b	8,8,1
   4508  1c63
   4509  1c63		       01		      .byte.b	1
   4510  1c64
   4511  1c64		       08 0e 01 	      .byte.b	8,14,1
   4512  1c67
   4513  1c67		       01		      .byte.b	1
   4514  1c68
   4515  1c68		       08 08 00 	      .byte.b	8,8,0
   4516  1c6b
   4517  1c6b		       01		      .byte.b	1
   4518  1c6c
   4519  1c6c		       08 08 02 	      .byte.b	8,8,2
   4520  1c6f
   4521  1c6f		       01		      .byte.b	1
   4522  1c70
   4523  1c70		       08 0e 02 	      .byte.b	8,14,2
   4524  1c73
   4525  1c73		       01		      .byte.b	1
   4526  1c74
   4527  1c74		       08 08 01 	      .byte.b	8,8,1
   4528  1c77
   4529  1c77		       01		      .byte.b	1
   4530  1c78
   4531  1c78		       07 08 03 	      .byte.b	7,8,3
   4532  1c7b
   4533  1c7b		       01		      .byte.b	1
   4534  1c7c
   4535  1c7c		       06 08 02 	      .byte.b	6,8,2
   4536  1c7f
   4537  1c7f		       01		      .byte.b	1
   4538  1c80
   4539  1c80		       05 08 04 	      .byte.b	5,8,4
   4540  1c83
   4541  1c83		       01		      .byte.b	1
   4542  1c84
   4543  1c84		       04 08 03 	      .byte.b	4,8,3
   4544  1c87
   4545  1c87		       01		      .byte.b	1
   4546  1c88
   4547  1c88		       03 08 05 	      .byte.b	3,8,5
   4548  1c8b
   4549  1c8b		       01		      .byte.b	1
   4550  1c8c
   4551  1c8c		       02 0e 04 	      .byte.b	2,14,4
   4552  1c8f
   4553  1c8f		       04		      .byte.b	4
   4554  1c90
   4555  1c90		       ff		      .byte.b	255
   4556  1c91
   4557  1c91				   .skipL0526
   4558  1c91				   .
   4559  1c91							; 
   4560  1c91
   4561  1c91				   .
   4562  1c91							; 
   4563  1c91
   4564  1c91				   .L0527		;  data _SD_Shoot_Miss
   4565  1c91
   4566  1c91		       4c d9 dc 	      JMP	.skipL0527
   4567  1c94				   _SD_Shoot_Miss
   4568  1c94		       08 0f 00 	      .byte.b	8,15,0
   4569  1c97
   4570  1c97		       01		      .byte.b	1
   4571  1c98
   4572  1c98		       0c 0f 01 	      .byte.b	12,15,1
   4573  1c9b
   4574  1c9b		       01		      .byte.b	1
   4575  1c9c
   4576  1c9c		       08 07 14 	      .byte.b	8,7,20
   4577  1c9f
   4578  1c9f		       01		      .byte.b	1
   4579  1ca0
   4580  1ca0		       0a 0f 03 	      .byte.b	10,15,3
   4581  1ca3
   4582  1ca3		       01		      .byte.b	1
   4583  1ca4
   4584  1ca4		       08 07 16 	      .byte.b	8,7,22
   4585  1ca7
   4586  1ca7		       01		      .byte.b	1
   4587  1ca8
   4588  1ca8		       0a 0f 05 	      .byte.b	10,15,5
   4589  1cab
   4590  1cab		       01		      .byte.b	1
   4591  1cac
   4592  1cac		       08 0f 06 	      .byte.b	8,15,6
   4593  1caf
   4594  1caf		       01		      .byte.b	1
   4595  1cb0
   4596  1cb0		       0a 07 18 	      .byte.b	10,7,24
   4597  1cb3
   4598  1cb3		       01		      .byte.b	1
   4599  1cb4
   4600  1cb4		       08 0f 08 	      .byte.b	8,15,8
   4601  1cb7
   4602  1cb7		       01		      .byte.b	1
   4603  1cb8
   4604  1cb8		       09 07 1b 	      .byte.b	9,7,27
   4605  1cbb
   4606  1cbb		       01		      .byte.b	1
   4607  1cbc
   4608  1cbc		       08 0f 0a 	      .byte.b	8,15,10
   4609  1cbf
   4610  1cbf		       01		      .byte.b	1
   4611  1cc0
   4612  1cc0		       07 0e 0b 	      .byte.b	7,14,11
   4613  1cc3
   4614  1cc3		       01		      .byte.b	1
   4615  1cc4
   4616  1cc4		       06 0f 0c 	      .byte.b	6,15,12
   4617  1cc7
   4618  1cc7		       01		      .byte.b	1
   4619  1cc8
   4620  1cc8		       05 06 0d 	      .byte.b	5,6,13
   4621  1ccb
   4622  1ccb		       01		      .byte.b	1
   4623  1ccc
   4624  1ccc		       04 0f 0e 	      .byte.b	4,15,14
   4625  1ccf
   4626  1ccf		       01		      .byte.b	1
   4627  1cd0
   4628  1cd0		       03 06 1b 	      .byte.b	3,6,27
   4629  1cd3
   4630  1cd3		       01		      .byte.b	1
   4631  1cd4
   4632  1cd4		       02 06 1e 	      .byte.b	2,6,30
   4633  1cd7
   4634  1cd7		       08		      .byte.b	8
   4635  1cd8
   4636  1cd8		       ff		      .byte.b	255
   4637  1cd9
   4638  1cd9				   .skipL0527
   4639  1cd9				   .
   4640  1cd9							; 
   4641  1cd9
   4642  1cd9				   .
   4643  1cd9							; 
   4644  1cd9
   4645  1cd9				   .L0528		;  data _SD_Shoot_Enemy
   4646  1cd9
   4647  1cd9		       4c fd dc 	      JMP	.skipL0528
   4648  1cdc				   _SD_Shoot_Enemy
   4649  1cdc		       0c 04 17 	      .byte.b	12,4,23
   4650  1cdf
   4651  1cdf		       04		      .byte.b	4
   4652  1ce0
   4653  1ce0		       0a 04 1d 	      .byte.b	10,4,29
   4654  1ce3
   4655  1ce3		       04		      .byte.b	4
   4656  1ce4
   4657  1ce4		       08 04 17 	      .byte.b	8,4,23
   4658  1ce7
   4659  1ce7		       04		      .byte.b	4
   4660  1ce8
   4661  1ce8		       06 04 1d 	      .byte.b	6,4,29
   4662  1ceb
   4663  1ceb		       04		      .byte.b	4
   4664  1cec
   4665  1cec		       04 04 17 	      .byte.b	4,4,23
   4666  1cef
   4667  1cef		       04		      .byte.b	4
   4668  1cf0
   4669  1cf0		       03 04 1d 	      .byte.b	3,4,29
   4670  1cf3
   4671  1cf3		       04		      .byte.b	4
   4672  1cf4
   4673  1cf4		       02 04 17 	      .byte.b	2,4,23
   4674  1cf7
   4675  1cf7		       01		      .byte.b	1
   4676  1cf8
   4677  1cf8		       01 04 1d 	      .byte.b	1,4,29
   4678  1cfb
   4679  1cfb		       01		      .byte.b	1
   4680  1cfc
   4681  1cfc		       ff		      .byte.b	255
   4682  1cfd
   4683  1cfd				   .skipL0528
   4684  1cfd				   .
   4685  1cfd							; 
   4686  1cfd
   4687  1cfd				   .
   4688  1cfd							; 
   4689  1cfd
   4690  1cfd				   .L0529		;  data _SD_Touch_Enemy
   4691  1cfd
   4692  1cfd		       4c 1d dd 	      JMP	.skipL0529
   4693  1d00				   _SD_Touch_Enemy
   4694  1d00		       02 07 0b 	      .byte.b	2,7,11
   4695  1d03
   4696  1d03		       02		      .byte.b	2
   4697  1d04
   4698  1d04		       0a 07 0c 	      .byte.b	10,7,12
   4699  1d07
   4700  1d07		       02		      .byte.b	2
   4701  1d08
   4702  1d08		       08 07 0d 	      .byte.b	8,7,13
   4703  1d0b
   4704  1d0b		       02		      .byte.b	2
   4705  1d0c
   4706  1d0c		       08 07 0e 	      .byte.b	8,7,14
   4707  1d0f
   4708  1d0f		       02		      .byte.b	2
   4709  1d10
   4710  1d10		       08 07 15 	      .byte.b	8,7,21
   4711  1d13
   4712  1d13		       08		      .byte.b	8
   4713  1d14
   4714  1d14		       04 07 16 	      .byte.b	4,7,22
   4715  1d17
   4716  1d17		       02		      .byte.b	2
   4717  1d18
   4718  1d18		       02 07 17 	      .byte.b	2,7,23
   4719  1d1b
   4720  1d1b		       01		      .byte.b	1
   4721  1d1c
   4722  1d1c		       ff		      .byte.b	255
   4723  1d1d
   4724  1d1d				   .skipL0529
   4725  1d1d				   .
   4726  1d1d							; 
   4727  1d1d
   4728  1d1d				   .
   4729  1d1d							; 
   4730  1d1d
   4731  1d1d				   .
   4732  1d1d							; 
   4733  1d1d
   4734  1d1d				   .
   4735  1d1d							; 
   4736  1d1d
   4737  1d1d				   .L0530		;  asm
   4738  1d1d
      0  1d1d					      SET_PLUSROM_API	"a.php", "ca.firmaplus.de"
      1  1d1d				   PlusROM_API
      2  1d1d		       61 2e 70 68*	      .byte.b	"a.php", 0, "ca.firmaplus.de", 0
   4740  1d33
   4741  1d33				   .
   4742  1d33							; 
   4743  1d33
   4744  1d33				   .
   4745  1d33							; 
   4746  1d33
   4747  1d33				   .
   4748  1d33							; 
   4749  1d33
   4750  1d33				   .
   4751  1d33							; 
   4752  1d33
   4753  1d33				   .
   4754  1d33							; 
   4755  1d33
   4756  1d33				   .L0531		;  bank 2
   4757  1d33
   4758  1d33					      if	ECHO1
      670 bytes of ROM space left in bank 1
   4759  1d33					      echo	"    ",[(start_bank1 - *)]d , "bytes of ROM space left in bank 1")
   4760  1d33					      endif
   4761  1d33		       00 01	   ECHO1      =	1
   4762  1fd1					      ORG	$1FF4-bscode_length
   4763  1fd1					      RORG	$DFF4-bscode_length
   4764  1fd1		       a2 ff	   start_bank1 ldx	#$ff
   4765  1fd3				  -	      ifconst	FASTFETCH	; using DPC+
   4766  1fd3				  -	      stx	FASTFETCH
   4767  1fd3					      endif
   4768  1fd3		       9a		      txs
   4769  1fd4				  -	      if	bankswitch == 64
   4770  1fd4				  -	      lda	#(((>(start-1)) & $0F) | $F0)
   4771  1fd4					      else
   4772  1fd4		       a9 f3		      lda	#>(start-1)
   4773  1fd6					      endif
   4774  1fd6		       48		      pha
   4775  1fd7		       a9 51		      lda	#<(start-1)
   4776  1fd9		       48		      pha
   4777  1fda		       48		      pha
   4778  1fdb		       8a		      txa
   4779  1fdc		       48		      pha
   4780  1fdd		       ba		      tsx
   4781  1fde					      if	bankswitch != 64
   4782  1fde		       b5 04		      lda	4,x	; get high byte of return address
   4783  1fe0		       2a		      rol
   4784  1fe1		       2a		      rol
   4785  1fe2		       2a		      rol
   4786  1fe3		       2a		      rol
   4787  1fe4		       29 01		      and	#bs_mask	;1 3 or 7 for F8/F6/F4
   4788  1fe6		       aa		      tax
   4789  1fe7		       e8		      inx
   4790  1fe8				  -	      else
   4791  1fe8				  -	      lda	4,x	; get high byte of return address
   4792  1fe8				  -	      tay
   4793  1fe8				  -	      ora	#$10	; change our bank nibble into a valid rom mirror
   4794  1fe8				  -	      sta	4,x
   4795  1fe8				  -	      tya
   4796  1fe8				  -	      lsr
   4797  1fe8				  -	      lsr
   4798  1fe8				  -	      lsr
   4799  1fe8				  -	      lsr
   4800  1fe8				  -	      tax
   4801  1fe8				  -	      inx
   4802  1fe8					      endif
   4803  1fe8		       bd f7 1f 	      lda	bankswitch_hotspot-1,x
   4804  1feb		       68		      pla
   4805  1fec		       aa		      tax
   4806  1fed		       68		      pla
   4807  1fee		       60		      rts
   4808  1fef				  -	      if	((* & $1FFF) > ((bankswitch_hotspot & $1FFF) - 1))
   4809  1fef				  -	      echo	"WARNING: size parameter in banksw.asm too small - the program probably will not work."
   4810  1fef				  -	      echo	"Change to",[(*-begin_bscode+1)&$FF]d,"and try again."
   4811  1fef					      endif
   4812  1ffc					      ORG	$1FFC
   4813  1ffc					      RORG	$DFFC
   4814  1ffc		       d1 df		      .word.w	(start_bank1 & $ffff)
   4815  1ffe		       d1 df		      .word.w	(start_bank1 & $ffff)
   4816  2000					      ORG	$2000
   4817  2000					      RORG	$F000
   4818  2000					      repeat	256
   4819  2000		       ff		      .byte.b	$ff
   4818  2000					      repend
   4819  2001		       ff		      .byte.b	$ff
   4818  2001					      repend
   4819  2002		       ff		      .byte.b	$ff
   4818  2002					      repend
   4819  2003		       ff		      .byte.b	$ff
   4818  2003					      repend
   4819  2004		       ff		      .byte.b	$ff
   4818  2004					      repend
   4819  2005		       ff		      .byte.b	$ff
   4818  2005					      repend
   4819  2006		       ff		      .byte.b	$ff
   4818  2006					      repend
   4819  2007		       ff		      .byte.b	$ff
   4818  2007					      repend
   4819  2008		       ff		      .byte.b	$ff
   4818  2008					      repend
   4819  2009		       ff		      .byte.b	$ff
   4818  2009					      repend
   4819  200a		       ff		      .byte.b	$ff
   4818  200a					      repend
   4819  200b		       ff		      .byte.b	$ff
   4818  200b					      repend
   4819  200c		       ff		      .byte.b	$ff
   4818  200c					      repend
   4819  200d		       ff		      .byte.b	$ff
   4818  200d					      repend
   4819  200e		       ff		      .byte.b	$ff
   4818  200e					      repend
   4819  200f		       ff		      .byte.b	$ff
   4818  200f					      repend
   4819  2010		       ff		      .byte.b	$ff
   4818  2010					      repend
   4819  2011		       ff		      .byte.b	$ff
   4818  2011					      repend
   4819  2012		       ff		      .byte.b	$ff
   4818  2012					      repend
   4819  2013		       ff		      .byte.b	$ff
   4818  2013					      repend
   4819  2014		       ff		      .byte.b	$ff
   4818  2014					      repend
   4819  2015		       ff		      .byte.b	$ff
   4818  2015					      repend
   4819  2016		       ff		      .byte.b	$ff
   4818  2016					      repend
   4819  2017		       ff		      .byte.b	$ff
   4818  2017					      repend
   4819  2018		       ff		      .byte.b	$ff
   4818  2018					      repend
   4819  2019		       ff		      .byte.b	$ff
   4818  2019					      repend
   4819  201a		       ff		      .byte.b	$ff
   4818  201a					      repend
   4819  201b		       ff		      .byte.b	$ff
   4818  201b					      repend
   4819  201c		       ff		      .byte.b	$ff
   4818  201c					      repend
   4819  201d		       ff		      .byte.b	$ff
   4818  201d					      repend
   4819  201e		       ff		      .byte.b	$ff
   4818  201e					      repend
   4819  201f		       ff		      .byte.b	$ff
   4818  201f					      repend
   4819  2020		       ff		      .byte.b	$ff
   4818  2020					      repend
   4819  2021		       ff		      .byte.b	$ff
   4818  2021					      repend
   4819  2022		       ff		      .byte.b	$ff
   4818  2022					      repend
   4819  2023		       ff		      .byte.b	$ff
   4818  2023					      repend
   4819  2024		       ff		      .byte.b	$ff
   4818  2024					      repend
   4819  2025		       ff		      .byte.b	$ff
   4818  2025					      repend
   4819  2026		       ff		      .byte.b	$ff
   4818  2026					      repend
   4819  2027		       ff		      .byte.b	$ff
   4818  2027					      repend
   4819  2028		       ff		      .byte.b	$ff
   4818  2028					      repend
   4819  2029		       ff		      .byte.b	$ff
   4818  2029					      repend
   4819  202a		       ff		      .byte.b	$ff
   4818  202a					      repend
   4819  202b		       ff		      .byte.b	$ff
   4818  202b					      repend
   4819  202c		       ff		      .byte.b	$ff
   4818  202c					      repend
   4819  202d		       ff		      .byte.b	$ff
   4818  202d					      repend
   4819  202e		       ff		      .byte.b	$ff
   4818  202e					      repend
   4819  202f		       ff		      .byte.b	$ff
   4818  202f					      repend
   4819  2030		       ff		      .byte.b	$ff
   4818  2030					      repend
   4819  2031		       ff		      .byte.b	$ff
   4818  2031					      repend
   4819  2032		       ff		      .byte.b	$ff
   4818  2032					      repend
   4819  2033		       ff		      .byte.b	$ff
   4818  2033					      repend
   4819  2034		       ff		      .byte.b	$ff
   4818  2034					      repend
   4819  2035		       ff		      .byte.b	$ff
   4818  2035					      repend
   4819  2036		       ff		      .byte.b	$ff
   4818  2036					      repend
   4819  2037		       ff		      .byte.b	$ff
   4818  2037					      repend
   4819  2038		       ff		      .byte.b	$ff
   4818  2038					      repend
   4819  2039		       ff		      .byte.b	$ff
   4818  2039					      repend
   4819  203a		       ff		      .byte.b	$ff
   4818  203a					      repend
   4819  203b		       ff		      .byte.b	$ff
   4818  203b					      repend
   4819  203c		       ff		      .byte.b	$ff
   4818  203c					      repend
   4819  203d		       ff		      .byte.b	$ff
   4818  203d					      repend
   4819  203e		       ff		      .byte.b	$ff
   4818  203e					      repend
   4819  203f		       ff		      .byte.b	$ff
   4818  203f					      repend
   4819  2040		       ff		      .byte.b	$ff
   4818  2040					      repend
   4819  2041		       ff		      .byte.b	$ff
   4818  2041					      repend
   4819  2042		       ff		      .byte.b	$ff
   4818  2042					      repend
   4819  2043		       ff		      .byte.b	$ff
   4818  2043					      repend
   4819  2044		       ff		      .byte.b	$ff
   4818  2044					      repend
   4819  2045		       ff		      .byte.b	$ff
   4818  2045					      repend
   4819  2046		       ff		      .byte.b	$ff
   4818  2046					      repend
   4819  2047		       ff		      .byte.b	$ff
   4818  2047					      repend
   4819  2048		       ff		      .byte.b	$ff
   4818  2048					      repend
   4819  2049		       ff		      .byte.b	$ff
   4818  2049					      repend
   4819  204a		       ff		      .byte.b	$ff
   4818  204a					      repend
   4819  204b		       ff		      .byte.b	$ff
   4818  204b					      repend
   4819  204c		       ff		      .byte.b	$ff
   4818  204c					      repend
   4819  204d		       ff		      .byte.b	$ff
   4818  204d					      repend
   4819  204e		       ff		      .byte.b	$ff
   4818  204e					      repend
   4819  204f		       ff		      .byte.b	$ff
   4818  204f					      repend
   4819  2050		       ff		      .byte.b	$ff
   4818  2050					      repend
   4819  2051		       ff		      .byte.b	$ff
   4818  2051					      repend
   4819  2052		       ff		      .byte.b	$ff
   4818  2052					      repend
   4819  2053		       ff		      .byte.b	$ff
   4818  2053					      repend
   4819  2054		       ff		      .byte.b	$ff
   4818  2054					      repend
   4819  2055		       ff		      .byte.b	$ff
   4818  2055					      repend
   4819  2056		       ff		      .byte.b	$ff
   4818  2056					      repend
   4819  2057		       ff		      .byte.b	$ff
   4818  2057					      repend
   4819  2058		       ff		      .byte.b	$ff
   4818  2058					      repend
   4819  2059		       ff		      .byte.b	$ff
   4818  2059					      repend
   4819  205a		       ff		      .byte.b	$ff
   4818  205a					      repend
   4819  205b		       ff		      .byte.b	$ff
   4818  205b					      repend
   4819  205c		       ff		      .byte.b	$ff
   4818  205c					      repend
   4819  205d		       ff		      .byte.b	$ff
   4818  205d					      repend
   4819  205e		       ff		      .byte.b	$ff
   4818  205e					      repend
   4819  205f		       ff		      .byte.b	$ff
   4818  205f					      repend
   4819  2060		       ff		      .byte.b	$ff
   4818  2060					      repend
   4819  2061		       ff		      .byte.b	$ff
   4818  2061					      repend
   4819  2062		       ff		      .byte.b	$ff
   4818  2062					      repend
   4819  2063		       ff		      .byte.b	$ff
   4818  2063					      repend
   4819  2064		       ff		      .byte.b	$ff
   4818  2064					      repend
   4819  2065		       ff		      .byte.b	$ff
   4818  2065					      repend
   4819  2066		       ff		      .byte.b	$ff
   4818  2066					      repend
   4819  2067		       ff		      .byte.b	$ff
   4818  2067					      repend
   4819  2068		       ff		      .byte.b	$ff
   4818  2068					      repend
   4819  2069		       ff		      .byte.b	$ff
   4818  2069					      repend
   4819  206a		       ff		      .byte.b	$ff
   4818  206a					      repend
   4819  206b		       ff		      .byte.b	$ff
   4818  206b					      repend
   4819  206c		       ff		      .byte.b	$ff
   4818  206c					      repend
   4819  206d		       ff		      .byte.b	$ff
   4818  206d					      repend
   4819  206e		       ff		      .byte.b	$ff
   4818  206e					      repend
   4819  206f		       ff		      .byte.b	$ff
   4818  206f					      repend
   4819  2070		       ff		      .byte.b	$ff
   4818  2070					      repend
   4819  2071		       ff		      .byte.b	$ff
   4818  2071					      repend
   4819  2072		       ff		      .byte.b	$ff
   4818  2072					      repend
   4819  2073		       ff		      .byte.b	$ff
   4818  2073					      repend
   4819  2074		       ff		      .byte.b	$ff
   4818  2074					      repend
   4819  2075		       ff		      .byte.b	$ff
   4818  2075					      repend
   4819  2076		       ff		      .byte.b	$ff
   4818  2076					      repend
   4819  2077		       ff		      .byte.b	$ff
   4818  2077					      repend
   4819  2078		       ff		      .byte.b	$ff
   4818  2078					      repend
   4819  2079		       ff		      .byte.b	$ff
   4818  2079					      repend
   4819  207a		       ff		      .byte.b	$ff
   4818  207a					      repend
   4819  207b		       ff		      .byte.b	$ff
   4818  207b					      repend
   4819  207c		       ff		      .byte.b	$ff
   4818  207c					      repend
   4819  207d		       ff		      .byte.b	$ff
   4818  207d					      repend
   4819  207e		       ff		      .byte.b	$ff
   4818  207e					      repend
   4819  207f		       ff		      .byte.b	$ff
   4818  207f					      repend
   4819  2080		       ff		      .byte.b	$ff
   4818  2080					      repend
   4819  2081		       ff		      .byte.b	$ff
   4818  2081					      repend
   4819  2082		       ff		      .byte.b	$ff
   4818  2082					      repend
   4819  2083		       ff		      .byte.b	$ff
   4818  2083					      repend
   4819  2084		       ff		      .byte.b	$ff
   4818  2084					      repend
   4819  2085		       ff		      .byte.b	$ff
   4818  2085					      repend
   4819  2086		       ff		      .byte.b	$ff
   4818  2086					      repend
   4819  2087		       ff		      .byte.b	$ff
   4818  2087					      repend
   4819  2088		       ff		      .byte.b	$ff
   4818  2088					      repend
   4819  2089		       ff		      .byte.b	$ff
   4818  2089					      repend
   4819  208a		       ff		      .byte.b	$ff
   4818  208a					      repend
   4819  208b		       ff		      .byte.b	$ff
   4818  208b					      repend
   4819  208c		       ff		      .byte.b	$ff
   4818  208c					      repend
   4819  208d		       ff		      .byte.b	$ff
   4818  208d					      repend
   4819  208e		       ff		      .byte.b	$ff
   4818  208e					      repend
   4819  208f		       ff		      .byte.b	$ff
   4818  208f					      repend
   4819  2090		       ff		      .byte.b	$ff
   4818  2090					      repend
   4819  2091		       ff		      .byte.b	$ff
   4818  2091					      repend
   4819  2092		       ff		      .byte.b	$ff
   4818  2092					      repend
   4819  2093		       ff		      .byte.b	$ff
   4818  2093					      repend
   4819  2094		       ff		      .byte.b	$ff
   4818  2094					      repend
   4819  2095		       ff		      .byte.b	$ff
   4818  2095					      repend
   4819  2096		       ff		      .byte.b	$ff
   4818  2096					      repend
   4819  2097		       ff		      .byte.b	$ff
   4818  2097					      repend
   4819  2098		       ff		      .byte.b	$ff
   4818  2098					      repend
   4819  2099		       ff		      .byte.b	$ff
   4818  2099					      repend
   4819  209a		       ff		      .byte.b	$ff
   4818  209a					      repend
   4819  209b		       ff		      .byte.b	$ff
   4818  209b					      repend
   4819  209c		       ff		      .byte.b	$ff
   4818  209c					      repend
   4819  209d		       ff		      .byte.b	$ff
   4818  209d					      repend
   4819  209e		       ff		      .byte.b	$ff
   4818  209e					      repend
   4819  209f		       ff		      .byte.b	$ff
   4818  209f					      repend
   4819  20a0		       ff		      .byte.b	$ff
   4818  20a0					      repend
   4819  20a1		       ff		      .byte.b	$ff
   4818  20a1					      repend
   4819  20a2		       ff		      .byte.b	$ff
   4818  20a2					      repend
   4819  20a3		       ff		      .byte.b	$ff
   4818  20a3					      repend
   4819  20a4		       ff		      .byte.b	$ff
   4818  20a4					      repend
   4819  20a5		       ff		      .byte.b	$ff
   4818  20a5					      repend
   4819  20a6		       ff		      .byte.b	$ff
   4818  20a6					      repend
   4819  20a7		       ff		      .byte.b	$ff
   4818  20a7					      repend
   4819  20a8		       ff		      .byte.b	$ff
   4818  20a8					      repend
   4819  20a9		       ff		      .byte.b	$ff
   4818  20a9					      repend
   4819  20aa		       ff		      .byte.b	$ff
   4818  20aa					      repend
   4819  20ab		       ff		      .byte.b	$ff
   4818  20ab					      repend
   4819  20ac		       ff		      .byte.b	$ff
   4818  20ac					      repend
   4819  20ad		       ff		      .byte.b	$ff
   4818  20ad					      repend
   4819  20ae		       ff		      .byte.b	$ff
   4818  20ae					      repend
   4819  20af		       ff		      .byte.b	$ff
   4818  20af					      repend
   4819  20b0		       ff		      .byte.b	$ff
   4818  20b0					      repend
   4819  20b1		       ff		      .byte.b	$ff
   4818  20b1					      repend
   4819  20b2		       ff		      .byte.b	$ff
   4818  20b2					      repend
   4819  20b3		       ff		      .byte.b	$ff
   4818  20b3					      repend
   4819  20b4		       ff		      .byte.b	$ff
   4818  20b4					      repend
   4819  20b5		       ff		      .byte.b	$ff
   4818  20b5					      repend
   4819  20b6		       ff		      .byte.b	$ff
   4818  20b6					      repend
   4819  20b7		       ff		      .byte.b	$ff
   4818  20b7					      repend
   4819  20b8		       ff		      .byte.b	$ff
   4818  20b8					      repend
   4819  20b9		       ff		      .byte.b	$ff
   4818  20b9					      repend
   4819  20ba		       ff		      .byte.b	$ff
   4818  20ba					      repend
   4819  20bb		       ff		      .byte.b	$ff
   4818  20bb					      repend
   4819  20bc		       ff		      .byte.b	$ff
   4818  20bc					      repend
   4819  20bd		       ff		      .byte.b	$ff
   4818  20bd					      repend
   4819  20be		       ff		      .byte.b	$ff
   4818  20be					      repend
   4819  20bf		       ff		      .byte.b	$ff
   4818  20bf					      repend
   4819  20c0		       ff		      .byte.b	$ff
   4818  20c0					      repend
   4819  20c1		       ff		      .byte.b	$ff
   4818  20c1					      repend
   4819  20c2		       ff		      .byte.b	$ff
   4818  20c2					      repend
   4819  20c3		       ff		      .byte.b	$ff
   4818  20c3					      repend
   4819  20c4		       ff		      .byte.b	$ff
   4818  20c4					      repend
   4819  20c5		       ff		      .byte.b	$ff
   4818  20c5					      repend
   4819  20c6		       ff		      .byte.b	$ff
   4818  20c6					      repend
   4819  20c7		       ff		      .byte.b	$ff
   4818  20c7					      repend
   4819  20c8		       ff		      .byte.b	$ff
   4818  20c8					      repend
   4819  20c9		       ff		      .byte.b	$ff
   4818  20c9					      repend
   4819  20ca		       ff		      .byte.b	$ff
   4818  20ca					      repend
   4819  20cb		       ff		      .byte.b	$ff
   4818  20cb					      repend
   4819  20cc		       ff		      .byte.b	$ff
   4818  20cc					      repend
   4819  20cd		       ff		      .byte.b	$ff
   4818  20cd					      repend
   4819  20ce		       ff		      .byte.b	$ff
   4818  20ce					      repend
   4819  20cf		       ff		      .byte.b	$ff
   4818  20cf					      repend
   4819  20d0		       ff		      .byte.b	$ff
   4818  20d0					      repend
   4819  20d1		       ff		      .byte.b	$ff
   4818  20d1					      repend
   4819  20d2		       ff		      .byte.b	$ff
   4818  20d2					      repend
   4819  20d3		       ff		      .byte.b	$ff
   4818  20d3					      repend
   4819  20d4		       ff		      .byte.b	$ff
   4818  20d4					      repend
   4819  20d5		       ff		      .byte.b	$ff
   4818  20d5					      repend
   4819  20d6		       ff		      .byte.b	$ff
   4818  20d6					      repend
   4819  20d7		       ff		      .byte.b	$ff
   4818  20d7					      repend
   4819  20d8		       ff		      .byte.b	$ff
   4818  20d8					      repend
   4819  20d9		       ff		      .byte.b	$ff
   4818  20d9					      repend
   4819  20da		       ff		      .byte.b	$ff
   4818  20da					      repend
   4819  20db		       ff		      .byte.b	$ff
   4818  20db					      repend
   4819  20dc		       ff		      .byte.b	$ff
   4818  20dc					      repend
   4819  20dd		       ff		      .byte.b	$ff
   4818  20dd					      repend
   4819  20de		       ff		      .byte.b	$ff
   4818  20de					      repend
   4819  20df		       ff		      .byte.b	$ff
   4818  20df					      repend
   4819  20e0		       ff		      .byte.b	$ff
   4818  20e0					      repend
   4819  20e1		       ff		      .byte.b	$ff
   4818  20e1					      repend
   4819  20e2		       ff		      .byte.b	$ff
   4818  20e2					      repend
   4819  20e3		       ff		      .byte.b	$ff
   4818  20e3					      repend
   4819  20e4		       ff		      .byte.b	$ff
   4818  20e4					      repend
   4819  20e5		       ff		      .byte.b	$ff
   4818  20e5					      repend
   4819  20e6		       ff		      .byte.b	$ff
   4818  20e6					      repend
   4819  20e7		       ff		      .byte.b	$ff
   4818  20e7					      repend
   4819  20e8		       ff		      .byte.b	$ff
   4818  20e8					      repend
   4819  20e9		       ff		      .byte.b	$ff
   4818  20e9					      repend
   4819  20ea		       ff		      .byte.b	$ff
   4818  20ea					      repend
   4819  20eb		       ff		      .byte.b	$ff
   4818  20eb					      repend
   4819  20ec		       ff		      .byte.b	$ff
   4818  20ec					      repend
   4819  20ed		       ff		      .byte.b	$ff
   4818  20ed					      repend
   4819  20ee		       ff		      .byte.b	$ff
   4818  20ee					      repend
   4819  20ef		       ff		      .byte.b	$ff
   4818  20ef					      repend
   4819  20f0		       ff		      .byte.b	$ff
   4818  20f0					      repend
   4819  20f1		       ff		      .byte.b	$ff
   4818  20f1					      repend
   4819  20f2		       ff		      .byte.b	$ff
   4818  20f2					      repend
   4819  20f3		       ff		      .byte.b	$ff
   4818  20f3					      repend
   4819  20f4		       ff		      .byte.b	$ff
   4818  20f4					      repend
   4819  20f5		       ff		      .byte.b	$ff
   4818  20f5					      repend
   4819  20f6		       ff		      .byte.b	$ff
   4818  20f6					      repend
   4819  20f7		       ff		      .byte.b	$ff
   4818  20f7					      repend
   4819  20f8		       ff		      .byte.b	$ff
   4818  20f8					      repend
   4819  20f9		       ff		      .byte.b	$ff
   4818  20f9					      repend
   4819  20fa		       ff		      .byte.b	$ff
   4818  20fa					      repend
   4819  20fb		       ff		      .byte.b	$ff
   4818  20fb					      repend
   4819  20fc		       ff		      .byte.b	$ff
   4818  20fc					      repend
   4819  20fd		       ff		      .byte.b	$ff
   4818  20fd					      repend
   4819  20fe		       ff		      .byte.b	$ff
   4818  20fe					      repend
   4819  20ff		       ff		      .byte.b	$ff
   4820  2100					      repend
   4821  2100							; Provided under the CC0 license. See the included LICENSE.txt for details.
   4822  2100
   4823  2100							; This is a 2-line kernel!
   4824  2100					      ifnconst	vertical_reflect
   4825  2100				   kernel
   4826  2100					      endif
   4827  2100		       85 02		      sta	WSYNC
   4828  2102		       a9 ff		      lda	#255
   4829  2104		       8d 96 02 	      sta	TIM64T
   4830  2107
   4831  2107		       a9 01		      lda	#1
   4832  2109		       85 27		      sta	VDELBL
   4833  210b		       85 25		      sta	VDELP0
   4834  210d		       a6 92		      ldx	ballheight
   4835  210f		       e8		      inx
   4836  2110		       e8		      inx
   4837  2111		       86 9f		      stx	temp4
   4838  2113		       a5 86		      lda	player1y
   4839  2115		       85 9e		      sta	temp3
   4840  2117
   4841  2117				  -	      ifconst	shakescreen
   4842  2117				  -	      jsr	doshakescreen
   4843  2117					      else
   4844  2117		       a6 90		      ldx	missile0height
   4845  2119		       e8		      inx
   4846  211a					      endif
   4847  211a
   4848  211a		       e8		      inx
   4849  211b		       86 f6		      stx	stack1
   4850  211d
   4851  211d		       a5 89		      lda	bally
   4852  211f		       85 f7		      sta	stack2
   4853  2121
   4854  2121		       a5 85		      lda	player0y
   4855  2123		       a2 00		      ldx	#0
   4856  2125		       85 02		      sta	WSYNC
   4857  2127		       86 1b		      stx	GRP0
   4858  2129		       86 1c		      stx	GRP1
   4859  212b		       86 0e		      stx	PF1L
   4860  212d		       86 0f		      stx	PF2
   4861  212f		       86 2c		      stx	CXCLR
   4862  2131				  -	      ifconst	readpaddle
   4863  2131				  -	      stx	paddle
   4864  2131					      else
      0  2131					      sleep	3
      1  2131				   .CYCLES    SET	3
      2  2131
      3  2131				  -	      IF	.CYCLES < 2
      4  2131				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  2131				  -	      ERR
      6  2131					      ENDIF
      7  2131
      8  2131					      IF	.CYCLES & 1
      9  2131					      IFNCONST	NO_ILLEGAL_OPCODES
     10  2131		       04 00		      nop	0
     11  2133				  -	      ELSE
     12  2133				  -	      bit	VSYNC
     13  2133					      ENDIF
     14  2133				   .CYCLES    SET	.CYCLES - 3
     15  2133					      ENDIF
     16  2133
     17  2133				  -	      REPEAT	.CYCLES / 2
     18  2133				  -	      nop
     19  2133					      REPEND
   4866  2133					      endif
   4867  2133
   4868  2133		       95 9d		      sta	temp2,x
   4869  2135
   4870  2135							;store these so they can be retrieved later
   4871  2135				  -	      ifnconst	pfres
   4872  2135				  -	      ldx	#128-44+(4-pfwidth)*12
   4873  2135					      else
   4874  2135		       a2 74		      ldx	#132-pfres*pfwidth
   4875  2137					      endif
   4876  2137
   4877  2137		       c6 85		      dec	player0y
   4878  2139
   4879  2139		       a5 91		      lda	missile0y
   4880  213b		       85 a0		      sta	temp5
   4881  213d		       a5 88		      lda	missile1y
   4882  213f		       85 a1		      sta	temp6
   4883  2141
   4884  2141		       a5 ef		      lda	playfieldpos
   4885  2143		       85 9c		      sta	temp1
   4886  2145
   4887  2145				  -	      ifconst	pfrowheight
   4888  2145				  -	      lda	#pfrowheight+2
   4889  2145					      else
   4890  2145				  -	      ifnconst	pfres
   4891  2145				  -	      lda	#10
   4892  2145					      else
   4893  2145		       a9 1a		      lda	#(96/pfres)+2	; try to come close to the real size
   4894  2147					      endif
   4895  2147					      endif
   4896  2147		       18		      clc
   4897  2148		       e5 ef		      sbc	playfieldpos
   4898  214a		       85 ef		      sta	playfieldpos
   4899  214c		       4c 78 f1 	      jmp	.startkernel
   4900  214f
   4901  214f				   .skipDrawP0
   4902  214f		       a9 00		      lda	#0
   4903  2151		       a8		      tay
   4904  2152		       4c aa f1 	      jmp	.continueP0
   4905  2155
   4906  2155				   .skipDrawP1
   4907  2155		       a9 00		      lda	#0
   4908  2157		       a8		      tay
   4909  2158		       4c 82 f1 	      jmp	.continueP1
   4910  215b
   4911  215b				   .kerloop		; enter at cycle 59??
   4912  215b
   4913  215b				   continuekernel
      0  215b					      sleep	2
      1  215b				   .CYCLES    SET	2
      2  215b
      3  215b				  -	      IF	.CYCLES < 2
      4  215b				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  215b				  -	      ERR
      6  215b					      ENDIF
      7  215b
      8  215b				  -	      IF	.CYCLES & 1
      9  215b				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  215b				  -	      nop	0
     11  215b				  -	      ELSE
     12  215b				  -	      bit	VSYNC
     13  215b				  -	      ENDIF
     14  215b				  -.CYCLES    SET	.CYCLES - 3
     15  215b					      ENDIF
     16  215b
     17  215b					      REPEAT	.CYCLES / 2
     18  215b		       ea		      nop
     19  215c					      REPEND
   4915  215c				   continuekernel2
   4916  215c		       a5 92		      lda	ballheight
   4917  215e
   4918  215e					      ifconst	pfres
   4919  215e		       bc 7c 10 	      ldy	playfield+pfres*pfwidth-132,x
   4920  2161		       84 0e		      sty	PF1L	;3
   4921  2163		       bc 7d 10 	      ldy	playfield+pfres*pfwidth-131-pfadjust,x
   4922  2166		       84 0f		      sty	PF2L	;3
   4923  2168		       bc 7f 10 	      ldy	playfield+pfres*pfwidth-129,x
   4924  216b		       84 0e		      sty	PF1R	; 3 too early?
   4925  216d		       bc 7e 10 	      ldy	playfield+pfres*pfwidth-130-pfadjust,x
   4926  2170		       84 0f		      sty	PF2R	;3
   4927  2172				  -	      else
   4928  2172				  -	      ldy	playfield-48+pfwidth*12+44-128,x
   4929  2172				  -	      sty	PF1L	;3
   4930  2172				  -	      ldy	playfield-48+pfwidth*12+45-128-pfadjust,x	;4
   4931  2172				  -	      sty	PF2L	;3
   4932  2172				  -	      ldy	playfield-48+pfwidth*12+47-128,x	;4
   4933  2172				  -	      sty	PF1R	; 3 too early?
   4934  2172				  -	      ldy	playfield-48+pfwidth*12+46-128-pfadjust,x	;4
   4935  2172				  -	      sty	PF2R	;3
   4936  2172					      endif
   4937  2172
   4938  2172							; should be playfield+$38 for width=2
   4939  2172
   4940  2172		       c7 89		      dcp	bally
   4941  2174		       2a		      rol
   4942  2175		       2a		      rol
   4943  2176							; rol
   4944  2176							; rol
   4945  2176				   goback
   4946  2176		       85 1f		      sta	ENABL
   4947  2178				   .startkernel
   4948  2178		       a5 8f		      lda	player1height	;3
   4949  217a		       c7 86		      dcp	player1y	;5
   4950  217c		       90 d7		      bcc	.skipDrawP1	;2
   4951  217e		       a4 86		      ldy	player1y	;3
   4952  2180		       b1 8c		      lda	(player1pointer),y	;5; player0pointer must be selected carefully by the compiler
   4953  2182							; so it doesn't cross a page boundary!
   4954  2182
   4955  2182				   .continueP1
   4956  2182		       85 1c		      sta	GRP1	;3
   4957  2184
   4958  2184				  -	      ifnconst	player1colors
   4959  2184				  -	      lda	missile1height	;3
   4960  2184				  -	      dcp	missile1y	;5
   4961  2184				  -	      rol		;2
   4962  2184				  -	      rol		;2
   4963  2184				  -	      sta	ENAM1	;3
   4964  2184					      else
   4965  2184		       b1 87		      lda	(player1color),y
   4966  2186		       85 07		      sta	COLUP1
   4967  2188					      ifnconst	playercolors
      0  2188					      sleep	7
      1  2188				   .CYCLES    SET	7
      2  2188
      3  2188				  -	      IF	.CYCLES < 2
      4  2188				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  2188				  -	      ERR
      6  2188					      ENDIF
      7  2188
      8  2188					      IF	.CYCLES & 1
      9  2188					      IFNCONST	NO_ILLEGAL_OPCODES
     10  2188		       04 00		      nop	0
     11  218a				  -	      ELSE
     12  218a				  -	      bit	VSYNC
     13  218a					      ENDIF
     14  218a				   .CYCLES    SET	.CYCLES - 3
     15  218a					      ENDIF
     16  218a
     17  218a					      REPEAT	.CYCLES / 2
     18  218a		       ea		      nop
     17  218a					      REPEND
     18  218b		       ea		      nop
     19  218c					      REPEND
   4969  218c				  -	      else
   4970  218c				  -	      lda.w	player0colorstore
   4971  218c				  -	      sta	COLUP0
   4972  218c					      endif
   4973  218c					      endif
   4974  218c
   4975  218c					      ifconst	pfres
   4976  218c		       bd 7c 10 	      lda	playfield+pfres*pfwidth-132,x
   4977  218f		       85 0e		      sta	PF1L	;3
   4978  2191		       bd 7d 10 	      lda	playfield+pfres*pfwidth-131-pfadjust,x
   4979  2194		       85 0f		      sta	PF2L	;3
   4980  2196		       bd 7f 10 	      lda	playfield+pfres*pfwidth-129,x
   4981  2199		       85 0e		      sta	PF1R	; 3 too early?
   4982  219b		       bd 7e 10 	      lda	playfield+pfres*pfwidth-130-pfadjust,x
   4983  219e		       85 0f		      sta	PF2R	;3
   4984  21a0				  -	      else
   4985  21a0				  -	      lda	playfield-48+pfwidth*12+44-128,x	;4
   4986  21a0				  -	      sta	PF1L	;3
   4987  21a0				  -	      lda	playfield-48+pfwidth*12+45-128-pfadjust,x	;4
   4988  21a0				  -	      sta	PF2L	;3
   4989  21a0				  -	      lda	playfield-48+pfwidth*12+47-128,x	;4
   4990  21a0				  -	      sta	PF1R	; 3 too early?
   4991  21a0				  -	      lda	playfield-48+pfwidth*12+46-128-pfadjust,x	;4
   4992  21a0				  -	      sta	PF2R	;3
   4993  21a0					      endif
   4994  21a0							; sleep 3
   4995  21a0
   4996  21a0		       a5 8e		      lda	player0height
   4997  21a2		       c7 85		      dcp	player0y
   4998  21a4		       90 a9		      bcc	.skipDrawP0
   4999  21a6		       a4 85		      ldy	player0y
   5000  21a8		       b1 8a		      lda	(player0pointer),y
   5001  21aa				   .continueP0
   5002  21aa		       85 1b		      sta	GRP0
   5003  21ac
   5004  21ac					      ifnconst	no_blank_lines
   5005  21ac					      ifnconst	playercolors
   5006  21ac		       a5 90		      lda	missile0height	;3
   5007  21ae		       c7 91		      dcp	missile0y	;5
   5008  21b0		       e5 f6		      sbc	stack1
   5009  21b2		       85 1d		      sta	ENAM0	;3
   5010  21b4				  -	      else
   5011  21b4				  -	      lda	(player0color),y
   5012  21b4				  -	      sta	player0colorstore
   5013  21b4				  -	      sleep	6
   5014  21b4					      endif
   5015  21b4		       c6 9c		      dec	temp1
   5016  21b6		       d0 a3		      bne	continuekernel
   5017  21b8				  -	      else
   5018  21b8				  -	      dec	temp1
   5019  21b8				  -	      beq	altkernel2
   5020  21b8				  -	      ifconst	readpaddle
   5021  21b8				  -	      ldy	currentpaddle
   5022  21b8				  -	      lda	INPT0,y
   5023  21b8				  -	      bpl	noreadpaddle
   5024  21b8				  -	      inc	paddle
   5025  21b8				  -	      jmp	continuekernel2
   5026  21b8				  -noreadpaddle
   5027  21b8				  -	      sleep	2
   5028  21b8				  -	      jmp	continuekernel
   5029  21b8				  -	      else
   5030  21b8				  -	      ifnconst	playercolors
   5031  21b8				  -	      ifconst	PFcolors
   5032  21b8				  -	      txa
   5033  21b8				  -	      tay
   5034  21b8				  -	      lda	(pfcolortable),y
   5035  21b8				  -	      ifnconst	backgroundchange
   5036  21b8				  -	      sta	COLUPF
   5037  21b8				  -	      else
   5038  21b8				  -	      sta	COLUBK
   5039  21b8				  -	      endif
   5040  21b8				  -	      jmp	continuekernel
   5041  21b8				  -	      else
   5042  21b8				  -	      ifconst	kernelmacrodef
   5043  21b8				  -	      kernelmacro
   5044  21b8				  -	      else
   5045  21b8				  -	      sleep	12
   5046  21b8				  -	      endif
   5047  21b8				  -	      endif
   5048  21b8				  -	      else
   5049  21b8				  -	      lda	(player0color),y
   5050  21b8				  -	      sta	player0colorstore
   5051  21b8				  -	      sleep	4
   5052  21b8				  -	      endif
   5053  21b8				  -	      jmp	continuekernel
   5054  21b8				  -	      endif
   5055  21b8				  -altkernel2
   5056  21b8				  -	      txa
   5057  21b8				  -	      ifnconst	vertical_reflect
   5058  21b8				  -	      sbx	#256-pfwidth
   5059  21b8				  -	      else
   5060  21b8				  -	      sbx	#256-pfwidth/2
   5061  21b8				  -	      endif
   5062  21b8				  -	      bmi	lastkernelline
   5063  21b8				  -	      ifconst	pfrowheight
   5064  21b8				  -	      lda	#pfrowheight
   5065  21b8				  -	      else
   5066  21b8				  -	      ifnconst	pfres
   5067  21b8				  -	      lda	#8
   5068  21b8				  -	      else
   5069  21b8				  -	      lda	#(96/pfres)	; try to come close to the real size
   5070  21b8				  -	      endif
   5071  21b8				  -	      endif
   5072  21b8				  -	      sta	temp1
   5073  21b8				  -	      jmp	continuekernel
   5074  21b8					      endif
   5075  21b8
   5076  21b8				   altkernel
   5077  21b8
   5078  21b8				  -	      ifconst	PFmaskvalue
   5079  21b8				  -	      lda	#PFmaskvalue
   5080  21b8					      else
   5081  21b8		       a9 00		      lda	#0
   5082  21ba					      endif
   5083  21ba		       85 0e		      sta	PF1L
   5084  21bc		       85 0f		      sta	PF2
   5085  21be
   5086  21be
   5087  21be							;sleep 3
   5088  21be
   5089  21be							;28 cycles to fix things
   5090  21be							;minus 11=17
   5091  21be
   5092  21be							; lax temp4
   5093  21be							; clc
   5094  21be		       8a		      txa
   5095  21bf					      ifnconst	vertical_reflect
   5096  21bf		       cb fc		      sbx	#256-pfwidth
   5097  21c1				  -	      else
   5098  21c1				  -	      sbx	#256-pfwidth/2
   5099  21c1					      endif
   5100  21c1
   5101  21c1		       30 12		      bmi	lastkernelline
   5102  21c3
   5103  21c3				  -	      ifconst	PFcolorandheight
   5104  21c3				  -	      ifconst	pfres
   5105  21c3				  -	      ldy	playfieldcolorandheight-131+pfres*pfwidth,x
   5106  21c3				  -	      else
   5107  21c3				  -	      ldy	playfieldcolorandheight-87,x
   5108  21c3				  -	      endif
   5109  21c3				  -	      ifnconst	backgroundchange
   5110  21c3				  -	      sty	COLUPF
   5111  21c3				  -	      else
   5112  21c3				  -	      sty	COLUBK
   5113  21c3				  -	      endif
   5114  21c3				  -	      ifconst	pfres
   5115  21c3				  -	      lda	playfieldcolorandheight-132+pfres*pfwidth,x
   5116  21c3				  -	      else
   5117  21c3				  -	      lda	playfieldcolorandheight-88,x
   5118  21c3				  -	      endif
   5119  21c3				  -	      sta.w	temp1
   5120  21c3					      endif
   5121  21c3				  -	      ifconst	PFheights
   5122  21c3				  -	      lsr
   5123  21c3				  -	      lsr
   5124  21c3				  -	      tay
   5125  21c3				  -	      lda	(pfheighttable),y
   5126  21c3				  -	      sta.w	temp1
   5127  21c3					      endif
   5128  21c3					      ifconst	PFcolors
   5129  21c3		       a8		      tay
   5130  21c4		       b1 f0		      lda	(pfcolortable),y
   5131  21c6					      ifnconst	backgroundchange
   5132  21c6		       85 08		      sta	COLUPF
   5133  21c8				  -	      else
   5134  21c8				  -	      sta	COLUBK
   5135  21c8					      endif
   5136  21c8				  -	      ifconst	pfrowheight
   5137  21c8				  -	      lda	#pfrowheight
   5138  21c8					      else
   5139  21c8				  -	      ifnconst	pfres
   5140  21c8				  -	      lda	#8
   5141  21c8					      else
   5142  21c8		       a9 18		      lda	#(96/pfres)	; try to come close to the real size
   5143  21ca					      endif
   5144  21ca					      endif
   5145  21ca		       85 9c		      sta	temp1
   5146  21cc					      endif
   5147  21cc					      ifnconst	PFcolorandheight
   5148  21cc				  -	      ifnconst	PFcolors
   5149  21cc				  -	      ifnconst	PFheights
   5150  21cc				  -	      ifnconst	no_blank_lines
   5151  21cc				  -			; read paddle 0
   5152  21cc				  -			; lo-res paddle read
   5153  21cc				  -			; bit INPT0
   5154  21cc				  -			; bmi paddleskipread
   5155  21cc				  -			; inc paddle0
   5156  21cc				  -			;donepaddleskip
   5157  21cc				  -	      sleep	10
   5158  21cc				  -	      ifconst	pfrowheight
   5159  21cc				  -	      lda	#pfrowheight
   5160  21cc				  -	      else
   5161  21cc				  -	      ifnconst	pfres
   5162  21cc				  -	      lda	#8
   5163  21cc				  -	      else
   5164  21cc				  -	      lda	#(96/pfres)	; try to come close to the real size
   5165  21cc				  -	      endif
   5166  21cc				  -	      endif
   5167  21cc				  -	      sta	temp1
   5168  21cc				  -	      endif
   5169  21cc				  -	      endif
   5170  21cc					      endif
   5171  21cc					      endif
   5172  21cc
   5173  21cc
   5174  21cc		       a5 92		      lda	ballheight
   5175  21ce		       c7 89		      dcp	bally
   5176  21d0		       e5 9f		      sbc	temp4
   5177  21d2
   5178  21d2
   5179  21d2		       4c 76 f1 	      jmp	goback
   5180  21d5
   5181  21d5
   5182  21d5					      ifnconst	no_blank_lines
   5183  21d5				   lastkernelline
   5184  21d5				  -	      ifnconst	PFcolors
   5185  21d5				  -	      sleep	10
   5186  21d5					      else
   5187  21d5		       a0 7c		      ldy	#124
   5188  21d7		       b1 f0		      lda	(pfcolortable),y
   5189  21d9		       85 08		      sta	COLUPF
   5190  21db					      endif
   5191  21db
   5192  21db				  -	      ifconst	PFheights
   5193  21db				  -	      ldx	#1
   5194  21db				  -			;sleep 4
   5195  21db				  -	      sleep	3	; this was over 1 cycle
   5196  21db					      else
   5197  21db		       a6 ef		      ldx	playfieldpos
   5198  21dd							;sleep 3
      0  21dd					      sleep	2	; this was over 1 cycle
      1  21dd				   .CYCLES    SET	2
      2  21dd
      3  21dd				  -	      IF	.CYCLES < 2
      4  21dd				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  21dd				  -	      ERR
      6  21dd					      ENDIF
      7  21dd
      8  21dd				  -	      IF	.CYCLES & 1
      9  21dd				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  21dd				  -	      nop	0
     11  21dd				  -	      ELSE
     12  21dd				  -	      bit	VSYNC
     13  21dd				  -	      ENDIF
     14  21dd				  -.CYCLES    SET	.CYCLES - 3
     15  21dd					      ENDIF
     16  21dd
     17  21dd					      REPEAT	.CYCLES / 2
     18  21dd		       ea		      nop
     19  21de					      REPEND
   5200  21de					      endif
   5201  21de
   5202  21de		       4c 1b f2 	      jmp	enterlastkernel
   5203  21e1
   5204  21e1				  -	      else
   5205  21e1				  -lastkernelline
   5206  21e1				  -
   5207  21e1				  -	      ifconst	PFheights
   5208  21e1				  -	      ldx	#1
   5209  21e1				  -			;sleep 5
   5210  21e1				  -	      sleep	4	; this was over 1 cycle
   5211  21e1				  -	      else
   5212  21e1				  -	      ldx	playfieldpos
   5213  21e1				  -			;sleep 4
   5214  21e1				  -	      sleep	3	; this was over 1 cycle
   5215  21e1				  -	      endif
   5216  21e1				  -
   5217  21e1				  -	      cpx	#0
   5218  21e1				  -	      bne	.enterfromNBL
   5219  21e1				  -	      jmp	no_blank_lines_bailout
   5220  21e1					      endif
   5221  21e1
   5222  21e1					      if	((<*)>$d5)
   5223  2200		       00 00 00 00*	      align	256
   5224  2200					      endif
   5225  2200							; this is a kludge to prevent page wrapping - fix!!!
   5226  2200
   5227  2200				   .skipDrawlastP1
   5228  2200		       a9 00		      lda	#0
   5229  2202		       a8		      tay		; added so we don't cross a page
   5230  2203		       4c 2d f2 	      jmp	.continuelastP1
   5231  2206
   5232  2206				   .endkerloop		; enter at cycle 59??
   5233  2206
   5234  2206		       ea		      nop
   5235  2207
   5236  2207				   .enterfromNBL
   5237  2207					      ifconst	pfres
   5238  2207		       ac fc 10 	      ldy.w	playfield+pfres*pfwidth-4
   5239  220a		       84 0e		      sty	PF1L	;3
   5240  220c		       ac fd 10 	      ldy.w	playfield+pfres*pfwidth-3-pfadjust
   5241  220f		       84 0f		      sty	PF2L	;3
   5242  2211		       ac ff 10 	      ldy.w	playfield+pfres*pfwidth-1
   5243  2214		       84 0e		      sty	PF1R	; possibly too early?
   5244  2216		       ac fe 10 	      ldy.w	playfield+pfres*pfwidth-2-pfadjust
   5245  2219		       84 0f		      sty	PF2R	;3
   5246  221b				  -	      else
   5247  221b				  -	      ldy.w	playfield-48+pfwidth*12+44
   5248  221b				  -	      sty	PF1L	;3
   5249  221b				  -	      ldy.w	playfield-48+pfwidth*12+45-pfadjust
   5250  221b				  -	      sty	PF2L	;3
   5251  221b				  -	      ldy.w	playfield-48+pfwidth*12+47
   5252  221b				  -	      sty	PF1R	; possibly too early?
   5253  221b				  -	      ldy.w	playfield-48+pfwidth*12+46-pfadjust
   5254  221b				  -	      sty	PF2R	;3
   5255  221b					      endif
   5256  221b
   5257  221b				   enterlastkernel
   5258  221b		       a5 92		      lda	ballheight
   5259  221d
   5260  221d							; tya
   5261  221d		       c7 89		      dcp	bally
   5262  221f							; sleep 4
   5263  221f
   5264  221f							; sbc stack3
   5265  221f		       2a		      rol
   5266  2220		       2a		      rol
   5267  2221		       85 1f		      sta	ENABL
   5268  2223
   5269  2223		       a5 8f		      lda	player1height	;3
   5270  2225		       c7 86		      dcp	player1y	;5
   5271  2227		       90 d7		      bcc	.skipDrawlastP1
   5272  2229		       a4 86		      ldy	player1y	;3
   5273  222b		       b1 8c		      lda	(player1pointer),y	;5; player0pointer must be selected carefully by the compiler
   5274  222d							; so it doesn't cross a page boundary!
   5275  222d
   5276  222d				   .continuelastP1
   5277  222d		       85 1c		      sta	GRP1	;3
   5278  222f
   5279  222f				  -	      ifnconst	player1colors
   5280  222f				  -	      lda	missile1height	;3
   5281  222f				  -	      dcp	missile1y	;5
   5282  222f					      else
   5283  222f		       b1 87		      lda	(player1color),y
   5284  2231		       85 07		      sta	COLUP1
   5285  2233					      endif
   5286  2233
   5287  2233		       ca		      dex
   5288  2234							;dec temp4 ; might try putting this above PF writes
   5289  2234		       f0 36		      beq	endkernel
   5290  2236
   5291  2236
   5292  2236					      ifconst	pfres
   5293  2236		       ac fc 10 	      ldy.w	playfield+pfres*pfwidth-4
   5294  2239		       84 0e		      sty	PF1L	;3
   5295  223b		       ac fd 10 	      ldy.w	playfield+pfres*pfwidth-3-pfadjust
   5296  223e		       84 0f		      sty	PF2L	;3
   5297  2240		       ac ff 10 	      ldy.w	playfield+pfres*pfwidth-1
   5298  2243		       84 0e		      sty	PF1R	; possibly too early?
   5299  2245		       ac fe 10 	      ldy.w	playfield+pfres*pfwidth-2-pfadjust
   5300  2248		       84 0f		      sty	PF2R	;3
   5301  224a				  -	      else
   5302  224a				  -	      ldy.w	playfield-48+pfwidth*12+44
   5303  224a				  -	      sty	PF1L	;3
   5304  224a				  -	      ldy.w	playfield-48+pfwidth*12+45-pfadjust
   5305  224a				  -	      sty	PF2L	;3
   5306  224a				  -	      ldy.w	playfield-48+pfwidth*12+47
   5307  224a				  -	      sty	PF1R	; possibly too early?
   5308  224a				  -	      ldy.w	playfield-48+pfwidth*12+46-pfadjust
   5309  224a				  -	      sty	PF2R	;3
   5310  224a					      endif
   5311  224a
   5312  224a				  -	      ifnconst	player1colors
   5313  224a				  -	      rol		;2
   5314  224a				  -	      rol		;2
   5315  224a				  -	      sta	ENAM1	;3
   5316  224a					      else
   5317  224a					      ifnconst	playercolors
      0  224a					      sleep	7
      1  224a				   .CYCLES    SET	7
      2  224a
      3  224a				  -	      IF	.CYCLES < 2
      4  224a				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  224a				  -	      ERR
      6  224a					      ENDIF
      7  224a
      8  224a					      IF	.CYCLES & 1
      9  224a					      IFNCONST	NO_ILLEGAL_OPCODES
     10  224a		       04 00		      nop	0
     11  224c				  -	      ELSE
     12  224c				  -	      bit	VSYNC
     13  224c					      ENDIF
     14  224c				   .CYCLES    SET	.CYCLES - 3
     15  224c					      ENDIF
     16  224c
     17  224c					      REPEAT	.CYCLES / 2
     18  224c		       ea		      nop
     17  224c					      REPEND
     18  224d		       ea		      nop
     19  224e					      REPEND
   5319  224e				  -	      else
   5320  224e				  -	      lda.w	player0colorstore
   5321  224e				  -	      sta	COLUP0
   5322  224e					      endif
   5323  224e					      endif
   5324  224e
   5325  224e		       ad 8e 00 	      lda.w	player0height
   5326  2251		       c7 85		      dcp	player0y
   5327  2253		       90 11		      bcc	.skipDrawlastP0
   5328  2255		       a4 85		      ldy	player0y
   5329  2257		       b1 8a		      lda	(player0pointer),y
   5330  2259				   .continuelastP0
   5331  2259		       85 1b		      sta	GRP0
   5332  225b
   5333  225b
   5334  225b
   5335  225b					      ifnconst	no_blank_lines
   5336  225b		       a5 90		      lda	missile0height	;3
   5337  225d		       c7 91		      dcp	missile0y	;5
   5338  225f		       e5 f6		      sbc	stack1
   5339  2261		       85 1d		      sta	ENAM0	;3
   5340  2263		       4c 06 f2 	      jmp	.endkerloop
   5341  2266				  -	      else
   5342  2266				  -	      ifconst	readpaddle
   5343  2266				  -	      ldy	currentpaddle
   5344  2266				  -	      lda	INPT0,y
   5345  2266				  -	      bpl	noreadpaddle2
   5346  2266				  -	      inc	paddle
   5347  2266				  -	      jmp	.endkerloop
   5348  2266				  -noreadpaddle2
   5349  2266				  -	      sleep	4
   5350  2266				  -	      jmp	.endkerloop
   5351  2266				  -	      else		; no_blank_lines and no paddle reading
   5352  2266				  -	      pla
   5353  2266				  -	      pha		; 14 cycles in 4 bytes
   5354  2266				  -	      pla
   5355  2266				  -	      pha
   5356  2266				  -			; sleep 14
   5357  2266				  -	      jmp	.endkerloop
   5358  2266				  -	      endif
   5359  2266					      endif
   5360  2266
   5361  2266
   5362  2266							; ifconst donepaddleskip
   5363  2266							;paddleskipread
   5364  2266							; this is kind of lame, since it requires 4 cycles from a page boundary crossing
   5365  2266							; plus we get a lo-res paddle read
   5366  2266							; bmi donepaddleskip
   5367  2266							; endif
   5368  2266
   5369  2266				   .skipDrawlastP0
   5370  2266		       a9 00		      lda	#0
   5371  2268		       a8		      tay
   5372  2269		       4c 59 f2 	      jmp	.continuelastP0
   5373  226c
   5374  226c				  -	      ifconst	no_blank_lines
   5375  226c				  -no_blank_lines_bailout
   5376  226c				  -	      ldx	#0
   5377  226c					      endif
   5378  226c
   5379  226c				   endkernel
   5380  226c							; 6 digit score routine
   5381  226c		       86 0e		      stx	PF1
   5382  226e		       86 0f		      stx	PF2
   5383  2270		       86 0d		      stx	PF0
   5384  2272		       18		      clc
   5385  2273
   5386  2273				  -	      ifconst	pfrowheight
   5387  2273				  -	      lda	#pfrowheight+2
   5388  2273					      else
   5389  2273				  -	      ifnconst	pfres
   5390  2273				  -	      lda	#10
   5391  2273					      else
   5392  2273		       a9 1a		      lda	#(96/pfres)+2	; try to come close to the real size
   5393  2275					      endif
   5394  2275					      endif
   5395  2275
   5396  2275		       e5 ef		      sbc	playfieldpos
   5397  2277		       85 ef		      sta	playfieldpos
   5398  2279		       8a		      txa
   5399  227a
   5400  227a				  -	      ifconst	shakescreen
   5401  227a				  -	      bit	shakescreen
   5402  227a				  -	      bmi	noshakescreen2
   5403  227a				  -	      ldx	#$3D
   5404  227a				  -noshakescreen2
   5405  227a					      endif
   5406  227a
   5407  227a		       95 02		      sta	WSYNC,x
   5408  227c
   5409  227c							; STA WSYNC ;first one, need one more
   5410  227c		       85 0b		      sta	REFP0
   5411  227e		       85 0c		      sta	REFP1
   5412  2280		       85 1b		      STA	GRP0
   5413  2282		       85 1c		      STA	GRP1
   5414  2284							; STA PF1
   5415  2284							; STA PF2
   5416  2284		       85 2b		      sta	HMCLR
   5417  2286		       85 1d		      sta	ENAM0
   5418  2288		       85 1e		      sta	ENAM1
   5419  228a		       85 1f		      sta	ENABL
   5420  228c
   5421  228c		       a5 9d		      lda	temp2	;restore variables that were obliterated by kernel
   5422  228e		       85 85		      sta	player0y
   5423  2290		       a5 9e		      lda	temp3
   5424  2292		       85 86		      sta	player1y
   5425  2294				  -	      ifnconst	player1colors
   5426  2294				  -	      lda	temp6
   5427  2294				  -	      sta	missile1y
   5428  2294					      endif
   5429  2294					      ifnconst	playercolors
   5430  2294					      ifnconst	readpaddle
   5431  2294		       a5 a0		      lda	temp5
   5432  2296		       85 91		      sta	missile0y
   5433  2298					      endif
   5434  2298					      endif
   5435  2298		       a5 f7		      lda	stack2
   5436  229a		       85 89		      sta	bally
   5437  229c
   5438  229c							; strangely, this isn't required any more. might have
   5439  229c							; resulted from the no_blank_lines score bounce fix
   5440  229c							;ifconst no_blank_lines
   5441  229c							;sta WSYNC
   5442  229c							;endif
   5443  229c
   5444  229c		       ad 84 02 	      lda	INTIM
   5445  229f		       18		      clc
   5446  22a0					      ifnconst	vblank_time
   5447  22a0		       69 8e		      adc	#43+12+87
   5448  22a2				  -	      else
   5449  22a2				  -	      adc	#vblank_time+12+87
   5450  22a2				  -
   5451  22a2					      endif
   5452  22a2							; sta WSYNC
   5453  22a2		       8d 96 02 	      sta	TIM64T
   5454  22a5
   5455  22a5					      ifconst	minikernel
   5456  22a5		       20 d5 fe 	      jsr	minikernel
   5457  22a8					      endif
   5458  22a8
   5459  22a8							; now reassign temp vars for score pointers
   5460  22a8
   5461  22a8							; score pointers contain:
   5462  22a8							; score1-5: lo1,lo2,lo3,lo4,lo5,lo6
   5463  22a8							; swap lo2->temp1
   5464  22a8							; swap lo4->temp3
   5465  22a8							; swap lo6->temp5
   5466  22a8					      ifnconst	noscore
   5467  22a8		       a5 97		      lda	scorepointers+1
   5468  22aa							; ldy temp1
   5469  22aa		       85 9c		      sta	temp1
   5470  22ac							; sty scorepointers+1
   5471  22ac
   5472  22ac		       a5 99		      lda	scorepointers+3
   5473  22ae							; ldy temp3
   5474  22ae		       85 9e		      sta	temp3
   5475  22b0							; sty scorepointers+3
   5476  22b0
   5477  22b0
   5478  22b0		       85 2b		      sta	HMCLR
   5479  22b2		       ba		      tsx
   5480  22b3		       86 f6		      stx	stack1
   5481  22b5		       a2 e0		      ldx	#$E0
   5482  22b7		       86 20		      stx	HMP0
   5483  22b9
   5484  22b9		       a5 a3		      LDA	scorecolor
   5485  22bb		       85 06		      STA	COLUP0
   5486  22bd		       85 07		      STA	COLUP1
   5487  22bf				  -	      ifconst	scorefade
   5488  22bf				  -	      STA	stack2
   5489  22bf					      endif
   5490  22bf					      ifconst	pfscore
   5491  22bf		       a5 f4		      lda	pfscorecolor
   5492  22c1		       85 08		      sta	COLUPF
   5493  22c3					      endif
   5494  22c3		       85 02		      sta	WSYNC
   5495  22c5		       a2 00		      ldx	#0
   5496  22c7		       86 1b		      STx	GRP0
   5497  22c9		       86 1c		      STx	GRP1	; seems to be needed because of vdel
   5498  22cb
   5499  22cb		       a5 9b		      lda	scorepointers+5
   5500  22cd							; ldy temp5
   5501  22cd		       95 a0		      sta	temp5,x
   5502  22cf							; sty scorepointers+5
   5503  22cf		       a9 ff		      lda	#>scoretable
   5504  22d1		       85 97		      sta	scorepointers+1
   5505  22d3		       85 99		      sta	scorepointers+3
   5506  22d5		       85 9b		      sta	scorepointers+5
   5507  22d7		       85 9d		      sta	temp2
   5508  22d9		       85 9f		      sta	temp4
   5509  22db		       85 a1		      sta	temp6
   5510  22dd		       a0 07		      LDY	#7
   5511  22df		       84 25		      STY	VDELP0
   5512  22e1		       85 10		      STA	RESP0
   5513  22e3		       85 11		      STA	RESP1
   5514  22e5
   5515  22e5
   5516  22e5		       a9 03		      LDA	#$03
   5517  22e7		       85 04		      STA	NUSIZ0
   5518  22e9		       85 05		      STA	NUSIZ1
   5519  22eb		       85 26		      STA	VDELP1
   5520  22ed		       a9 f0		      LDA	#$F0
   5521  22ef		       85 21		      STA	HMP1
   5522  22f1		       b1 96		      lda	(scorepointers),y
   5523  22f3		       85 1b		      sta	GRP0
   5524  22f5		       85 2a		      STA	HMOVE	; cycle 73 ?
   5525  22f7		       4c 09 f3 	      jmp	beginscore
   5526  22fa
   5527  22fa
   5528  22fa					      if	((<*)>$d4)
   5529  2300		       00 00 00 00*	      align	256	; kludge that potentially wastes space! should be fixed!
   5530  2300					      endif
   5531  2300
   5532  2300				   loop2
   5533  2300		       b1 96		      lda	(scorepointers),y	;+5 68 204
   5534  2302		       85 1b		      sta	GRP0	;+3 71 213 D1 -- -- --
   5535  2304					      ifconst	pfscore
   5536  2304		       ad f2 00 	      lda.w	pfscore1
   5537  2307		       85 0e		      sta	PF1
   5538  2309				  -	      else
   5539  2309				  -	      ifconst	scorefade
   5540  2309				  -	      sleep	2
   5541  2309				  -	      dec	stack2	; decrement the temporary scorecolor
   5542  2309				  -	      else
   5543  2309				  -	      sleep	7
   5544  2309				  -	      endif
   5545  2309					      endif
   5546  2309							; cycle 0
   5547  2309				   beginscore
   5548  2309		       b1 9e		      lda	(scorepointers+$8),y	;+5 5 15
   5549  230b		       85 1c		      sta	GRP1	;+3 8 24 D1 D1 D2 --
   5550  230d		       b1 9c		      lda	(scorepointers+$6),y	;+5 13 39
   5551  230f		       85 1b		      sta	GRP0	;+3 16 48 D3 D1 D2 D2
   5552  2311		       b3 98		      lax	(scorepointers+$2),y	;+5 29 87
   5553  2313		       9a		      txs
   5554  2314		       b3 9a		      lax	(scorepointers+$4),y	;+5 36 108
   5555  2316				  -	      ifconst	scorefade
   5556  2316				  -	      lda	stack2
   5557  2316					      else
      0  2316					      sleep	3
      1  2316				   .CYCLES    SET	3
      2  2316
      3  2316				  -	      IF	.CYCLES < 2
      4  2316				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  2316				  -	      ERR
      6  2316					      ENDIF
      7  2316
      8  2316					      IF	.CYCLES & 1
      9  2316					      IFNCONST	NO_ILLEGAL_OPCODES
     10  2316		       04 00		      nop	0
     11  2318				  -	      ELSE
     12  2318				  -	      bit	VSYNC
     13  2318					      ENDIF
     14  2318				   .CYCLES    SET	.CYCLES - 3
     15  2318					      ENDIF
     16  2318
     17  2318				  -	      REPEAT	.CYCLES / 2
     18  2318				  -	      nop
     19  2318					      REPEND
   5559  2318					      endif
   5560  2318
   5561  2318					      ifconst	pfscore
   5562  2318		       a5 f3		      lda	pfscore2
   5563  231a		       85 0e		      sta	PF1
   5564  231c				  -	      else
   5565  231c				  -	      ifconst	scorefade
   5566  231c				  -	      sta	COLUP0
   5567  231c				  -	      sta	COLUP1
   5568  231c				  -	      else
   5569  231c				  -	      sleep	6
   5570  231c				  -	      endif
   5571  231c					      endif
   5572  231c
   5573  231c		       b1 a0		      lda	(scorepointers+$A),y	;+5 21 63
   5574  231e		       86 1c		      stx	GRP1	;+3 44 132 D3 D3 D4 D2!
   5575  2320		       ba		      tsx
   5576  2321		       86 1b		      stx	GRP0	;+3 47 141 D5 D3! D4 D4
   5577  2323		       85 1c		      sta	GRP1	;+3 50 150 D5 D5 D6 D4!
   5578  2325		       84 1b		      sty	GRP0	;+3 53 159 D4* D5! D6 D6
   5579  2327		       88		      dey
   5580  2328		       10 d6		      bpl	loop2	;+2 60 180
   5581  232a
   5582  232a		       a6 f6		      ldx	stack1
   5583  232c		       9a		      txs
   5584  232d							; lda scorepointers+1
   5585  232d		       a4 9c		      ldy	temp1
   5586  232f							; sta temp1
   5587  232f		       84 97		      sty	scorepointers+1
   5588  2331
   5589  2331		       a9 00		      LDA	#0
   5590  2333		       85 0e		      sta	PF1
   5591  2335		       85 1b		      STA	GRP0
   5592  2337		       85 1c		      STA	GRP1
   5593  2339		       85 25		      STA	VDELP0
   5594  233b		       85 26		      STA	VDELP1	;do we need these
   5595  233d		       85 04		      STA	NUSIZ0
   5596  233f		       85 05		      STA	NUSIZ1
   5597  2341
   5598  2341							; lda scorepointers+3
   5599  2341		       a4 9e		      ldy	temp3
   5600  2343							; sta temp3
   5601  2343		       84 99		      sty	scorepointers+3
   5602  2345
   5603  2345							; lda scorepointers+5
   5604  2345		       a4 a0		      ldy	temp5
   5605  2347							; sta temp5
   5606  2347		       84 9b		      sty	scorepointers+5
   5607  2349					      endif		;noscore
   5608  2349		       a9 c2		      LDA	#%11000010
   5609  234b		       85 02		      sta	WSYNC
   5610  234d		       85 01		      STA	VBLANK
      0  234f					      RETURN
      1  234f				  -	      ifnconst	bankswitch
      2  234f				  -	      rts
      3  234f					      else
      4  234f		       4c da ff 	      jmp	BS_return
      5  2352					      endif
   5612  2352
   5613  2352				  -	      ifconst	shakescreen
   5614  2352				  -doshakescreen
   5615  2352				  -	      bit	shakescreen
   5616  2352				  -	      bmi	noshakescreen
   5617  2352				  -	      sta	WSYNC
   5618  2352				  -noshakescreen
   5619  2352				  -	      ldx	missile0height
   5620  2352				  -	      inx
   5621  2352				  -	      rts
   5622  2352					      endif
   5623  2352
   5624  2352							; Provided under the CC0 license. See the included LICENSE.txt for details.
   5625  2352
   5626  2352				   start
   5627  2352		       78		      sei
   5628  2353		       d8		      cld
   5629  2354		       a0 00		      ldy	#0
   5630  2356		       a5 d0		      lda	$D0
   5631  2358		       c9 2c		      cmp	#$2C	;check RAM location #1
   5632  235a		       d0 07		      bne	MachineIs2600
   5633  235c		       a5 d1		      lda	$D1
   5634  235e		       c9 a9		      cmp	#$A9	;check RAM location #2
   5635  2360		       d0 01		      bne	MachineIs2600
   5636  2362		       88		      dey
   5637  2363				   MachineIs2600
   5638  2363		       a2 00		      ldx	#0
   5639  2365		       8a		      txa
   5640  2366				   clearmem
   5641  2366		       e8		      inx
   5642  2367		       9a		      txs
   5643  2368		       48		      pha
   5644  2369		       d0 fb		      bne	clearmem
   5645  236b		       84 9c		      sty	temp1
   5646  236d					      ifnconst	multisprite
   5647  236d				  -	      ifconst	pfrowheight
   5648  236d				  -	      lda	#pfrowheight
   5649  236d					      else
   5650  236d					      ifconst	pfres
   5651  236d		       a9 18		      lda	#(96/pfres)
   5652  236f				  -	      else
   5653  236f				  -	      lda	#8
   5654  236f					      endif
   5655  236f					      endif
   5656  236f		       85 ef		      sta	playfieldpos
   5657  2371					      endif
   5658  2371		       a2 05		      ldx	#5
   5659  2373				   initscore
   5660  2373		       a9 71		      lda	#<scoretable
   5661  2375		       95 96		      sta	scorepointers,x
   5662  2377		       ca		      dex
   5663  2378		       10 f9		      bpl	initscore
   5664  237a		       a9 01		      lda	#1
   5665  237c		       85 0a		      sta	CTRLPF
   5666  237e		       0d 84 02 	      ora	INTIM
   5667  2381		       85 a2		      sta	rand
   5668  2383
   5669  2383				  -	      ifconst	multisprite
   5670  2383				  -	      jsr	multisprite_setup
   5671  2383					      endif
   5672  2383
   5673  2383				  -	      ifnconst	bankswitch
   5674  2383				  -	      jmp	game
   5675  2383					      else
   5676  2383		       a9 d0		      lda	#>(game-1)
   5677  2385		       48		      pha
   5678  2386		       a9 ff		      lda	#<(game-1)
   5679  2388		       48		      pha
   5680  2389		       48		      pha
   5681  238a		       48		      pha
   5682  238b		       a2 01		      ldx	#1
   5683  238d		       4c e8 ff 	      jmp	BS_jsr
   5684  2390					      endif
   5685  2390							; Provided under the CC0 license. See the included LICENSE.txt for details.
   5686  2390
   5687  2390							; playfield drawing routines
   5688  2390							; you get a 32x12 bitmapped display in a single color :)
   5689  2390							; 0-31 and 0-11
   5690  2390
   5691  2390				   pfclear		; clears playfield - or fill with pattern
   5692  2390					      ifconst	pfres
   5693  2390		       a2 0f		      ldx	#pfres*pfwidth-1
   5694  2392				  -	      else
   5695  2392				  -	      ldx	#47-(4-pfwidth)*12	; will this work?
   5696  2392					      endif
   5697  2392				   pfclear_loop
   5698  2392				  -	      ifnconst	superchip
   5699  2392				  -	      sta	playfield,x
   5700  2392					      else
   5701  2392		       9d 70 10 	      sta	playfield-128,x
   5702  2395					      endif
   5703  2395		       ca		      dex
   5704  2396		       10 fa		      bpl	pfclear_loop
      0  2398					      RETURN
      1  2398				  -	      ifnconst	bankswitch
      2  2398				  -	      rts
      3  2398					      else
      4  2398		       4c da ff 	      jmp	BS_return
      5  239b					      endif
   5706  239b
   5707  239b				   setuppointers
   5708  239b		       86 9d		      stx	temp2	; store on.off.flip value
   5709  239d		       aa		      tax		; put x-value in x 
   5710  239e		       4a		      lsr
   5711  239f		       4a		      lsr
   5712  23a0		       4a		      lsr		; divide x pos by 8 
   5713  23a1		       85 9c		      sta	temp1
   5714  23a3		       98		      tya
   5715  23a4		       0a		      asl
   5716  23a5					      if	pfwidth=4
   5717  23a5		       0a		      asl		; multiply y pos by 4
   5718  23a6					      endif		; else multiply by 2
   5719  23a6		       18		      clc
   5720  23a7		       65 9c		      adc	temp1	; add them together to get actual memory location offset
   5721  23a9		       a8		      tay		; put the value in y
   5722  23aa		       a5 9d		      lda	temp2	; restore on.off.flip value
   5723  23ac		       60		      rts
   5724  23ad
   5725  23ad				   pfread
   5726  23ad							;x=xvalue, y=yvalue
   5727  23ad		       20 9b f3 	      jsr	setuppointers
   5728  23b0		       bd 45 f4 	      lda	setbyte,x
   5729  23b3		       39 f0 10 	      and	playfield,y
   5730  23b6		       5d 45 f4 	      eor	setbyte,x
   5731  23b9							; beq readzero
   5732  23b9							; lda #1
   5733  23b9							; readzero
      0  23b9					      RETURN
      1  23b9				  -	      ifnconst	bankswitch
      2  23b9				  -	      rts
      3  23b9					      else
      4  23b9		       4c da ff 	      jmp	BS_return
      5  23bc					      endif
   5735  23bc
   5736  23bc				   pfpixel
   5737  23bc							;x=xvalue, y=yvalue, a=0,1,2
   5738  23bc		       20 9b f3 	      jsr	setuppointers
   5739  23bf
   5740  23bf					      ifconst	bankswitch
   5741  23bf		       a5 9d		      lda	temp2	; load on.off.flip value (0,1, or 2)
   5742  23c1		       f0 0f		      beq	pixelon_r	; if "on" go to on
   5743  23c3		       4a		      lsr
   5744  23c4		       b0 18		      bcs	pixeloff_r	; value is 1 if true
   5745  23c6		       b9 f0 10 	      lda	playfield,y	; if here, it's "flip"
   5746  23c9		       5d 45 f4 	      eor	setbyte,x
   5747  23cc					      ifconst	superchip
   5748  23cc		       99 70 10 	      sta	playfield-128,y
   5749  23cf				  -	      else
   5750  23cf				  -	      sta	playfield,y
   5751  23cf					      endif
      0  23cf					      RETURN
      1  23cf				  -	      ifnconst	bankswitch
      2  23cf				  -	      rts
      3  23cf					      else
      4  23cf		       4c da ff 	      jmp	BS_return
      5  23d2					      endif
   5753  23d2				   pixelon_r
   5754  23d2		       b9 f0 10 	      lda	playfield,y
   5755  23d5		       1d 45 f4 	      ora	setbyte,x
   5756  23d8					      ifconst	superchip
   5757  23d8		       99 70 10 	      sta	playfield-128,y
   5758  23db				  -	      else
   5759  23db				  -	      sta	playfield,y
   5760  23db					      endif
      0  23db					      RETURN
      1  23db				  -	      ifnconst	bankswitch
      2  23db				  -	      rts
      3  23db					      else
      4  23db		       4c da ff 	      jmp	BS_return
      5  23de					      endif
   5762  23de				   pixeloff_r
   5763  23de		       bd 45 f4 	      lda	setbyte,x
   5764  23e1		       49 ff		      eor	#$ff
   5765  23e3		       39 f0 10 	      and	playfield,y
   5766  23e6					      ifconst	superchip
   5767  23e6		       99 70 10 	      sta	playfield-128,y
   5768  23e9				  -	      else
   5769  23e9				  -	      sta	playfield,y
   5770  23e9					      endif
      0  23e9					      RETURN
      1  23e9				  -	      ifnconst	bankswitch
      2  23e9				  -	      rts
      3  23e9					      else
      4  23e9		       4c da ff 	      jmp	BS_return
      5  23ec					      endif
   5772  23ec
   5773  23ec				  -	      else
   5774  23ec				  -	      jmp	plotpoint
   5775  23ec					      endif
   5776  23ec
   5777  23ec				   pfhline
   5778  23ec							;x=xvalue, y=yvalue, a=0,1,2, temp3=endx
   5779  23ec		       20 9b f3 	      jsr	setuppointers
   5780  23ef		       4c f9 f3 	      jmp	noinc
   5781  23f2				   keepgoing
   5782  23f2		       e8		      inx
   5783  23f3		       8a		      txa
   5784  23f4		       29 07		      and	#7
   5785  23f6		       d0 01		      bne	noinc
   5786  23f8		       c8		      iny
   5787  23f9				   noinc
   5788  23f9		       20 1e f4 	      jsr	plotpoint
   5789  23fc		       e4 9e		      cpx	temp3
   5790  23fe		       30 f2		      bmi	keepgoing
      0  2400					      RETURN
      1  2400				  -	      ifnconst	bankswitch
      2  2400				  -	      rts
      3  2400					      else
      4  2400		       4c da ff 	      jmp	BS_return
      5  2403					      endif
   5792  2403
   5793  2403				   pfvline
   5794  2403							;x=xvalue, y=yvalue, a=0,1,2, temp3=endx
   5795  2403		       20 9b f3 	      jsr	setuppointers
   5796  2406		       84 9c		      sty	temp1	; store memory location offset
   5797  2408		       e6 9e		      inc	temp3	; increase final x by 1 
   5798  240a		       a5 9e		      lda	temp3
   5799  240c		       0a		      asl
   5800  240d					      if	pfwidth=4
   5801  240d		       0a		      asl		; multiply by 4
   5802  240e					      endif		; else multiply by 2
   5803  240e		       85 9e		      sta	temp3	; store it
   5804  2410							; Thanks to Michael Rideout for fixing a bug in this code
   5805  2410							; right now, temp1=y=starting memory location, temp3=final
   5806  2410							; x should equal original x value
   5807  2410				   keepgoingy
   5808  2410		       20 1e f4 	      jsr	plotpoint
   5809  2413		       c8		      iny
   5810  2414		       c8		      iny
   5811  2415					      if	pfwidth=4
   5812  2415		       c8		      iny
   5813  2416		       c8		      iny
   5814  2417					      endif
   5815  2417		       c4 9e		      cpy	temp3
   5816  2419		       30 f5		      bmi	keepgoingy
      0  241b					      RETURN
      1  241b				  -	      ifnconst	bankswitch
      2  241b				  -	      rts
      3  241b					      else
      4  241b		       4c da ff 	      jmp	BS_return
      5  241e					      endif
   5818  241e
   5819  241e				   plotpoint
   5820  241e		       a5 9d		      lda	temp2	; load on.off.flip value (0,1, or 2)
   5821  2420		       f0 0d		      beq	pixelon	; if "on" go to on
   5822  2422		       4a		      lsr
   5823  2423		       b0 14		      bcs	pixeloff	; value is 1 if true
   5824  2425		       b9 f0 10 	      lda	playfield,y	; if here, it's "flip"
   5825  2428		       5d 45 f4 	      eor	setbyte,x
   5826  242b					      ifconst	superchip
   5827  242b		       99 70 10 	      sta	playfield-128,y
   5828  242e				  -	      else
   5829  242e				  -	      sta	playfield,y
   5830  242e					      endif
   5831  242e		       60		      rts
   5832  242f				   pixelon
   5833  242f		       b9 f0 10 	      lda	playfield,y
   5834  2432		       1d 45 f4 	      ora	setbyte,x
   5835  2435					      ifconst	superchip
   5836  2435		       99 70 10 	      sta	playfield-128,y
   5837  2438				  -	      else
   5838  2438				  -	      sta	playfield,y
   5839  2438					      endif
   5840  2438		       60		      rts
   5841  2439				   pixeloff
   5842  2439		       bd 45 f4 	      lda	setbyte,x
   5843  243c		       49 ff		      eor	#$ff
   5844  243e		       39 f0 10 	      and	playfield,y
   5845  2441					      ifconst	superchip
   5846  2441		       99 70 10 	      sta	playfield-128,y
   5847  2444				  -	      else
   5848  2444				  -	      sta	playfield,y
   5849  2444					      endif
   5850  2444		       60		      rts
   5851  2445
   5852  2445				   setbyte
   5853  2445					      ifnconst	pfcenter
   5854  2445		       80		      .byte.b	$80
   5855  2446		       40		      .byte.b	$40
   5856  2447		       20		      .byte.b	$20
   5857  2448		       10		      .byte.b	$10
   5858  2449		       08		      .byte.b	$08
   5859  244a		       04		      .byte.b	$04
   5860  244b		       02		      .byte.b	$02
   5861  244c		       01		      .byte.b	$01
   5862  244d					      endif
   5863  244d		       01		      .byte.b	$01
   5864  244e		       02		      .byte.b	$02
   5865  244f		       04		      .byte.b	$04
   5866  2450		       08		      .byte.b	$08
   5867  2451		       10		      .byte.b	$10
   5868  2452		       20		      .byte.b	$20
   5869  2453		       40		      .byte.b	$40
   5870  2454		       80		      .byte.b	$80
   5871  2455		       80		      .byte.b	$80
   5872  2456		       40		      .byte.b	$40
   5873  2457		       20		      .byte.b	$20
   5874  2458		       10		      .byte.b	$10
   5875  2459		       08		      .byte.b	$08
   5876  245a		       04		      .byte.b	$04
   5877  245b		       02		      .byte.b	$02
   5878  245c		       01		      .byte.b	$01
   5879  245d		       01		      .byte.b	$01
   5880  245e		       02		      .byte.b	$02
   5881  245f		       04		      .byte.b	$04
   5882  2460		       08		      .byte.b	$08
   5883  2461		       10		      .byte.b	$10
   5884  2462		       20		      .byte.b	$20
   5885  2463		       40		      .byte.b	$40
   5886  2464		       80		      .byte.b	$80
   5887  2465							; Provided under the CC0 license. See the included LICENSE.txt for details.
   5888  2465
   5889  2465				   pfscroll		;(a=0 left, 1 right, 2 up, 4 down, 6=upup, 12=downdown)
   5890  2465		       d0 2a		      bne	notleft
   5891  2467							;left
   5892  2467					      ifconst	pfres
   5893  2467		       a2 10		      ldx	#pfres*4
   5894  2469				  -	      else
   5895  2469				  -	      ldx	#48
   5896  2469					      endif
   5897  2469				   leftloop
   5898  2469		       bd ef 10 	      lda	playfield-1,x
   5899  246c		       4a		      lsr
   5900  246d
   5901  246d					      ifconst	superchip
   5902  246d		       bd ee 10 	      lda	playfield-2,x
   5903  2470		       2a		      rol
   5904  2471		       9d 6e 10 	      sta	playfield-130,x
   5905  2474		       bd ed 10 	      lda	playfield-3,x
   5906  2477		       6a		      ror
   5907  2478		       9d 6d 10 	      sta	playfield-131,x
   5908  247b		       bd ec 10 	      lda	playfield-4,x
   5909  247e		       2a		      rol
   5910  247f		       9d 6c 10 	      sta	playfield-132,x
   5911  2482		       bd ef 10 	      lda	playfield-1,x
   5912  2485		       6a		      ror
   5913  2486		       9d 6f 10 	      sta	playfield-129,x
   5914  2489				  -	      else
   5915  2489				  -	      rol	playfield-2,x
   5916  2489				  -	      ror	playfield-3,x
   5917  2489				  -	      rol	playfield-4,x
   5918  2489				  -	      ror	playfield-1,x
   5919  2489					      endif
   5920  2489
   5921  2489		       8a		      txa
   5922  248a		       cb 04		      sbx	#4
   5923  248c		       d0 db		      bne	leftloop
      0  248e					      RETURN
      1  248e				  -	      ifnconst	bankswitch
      2  248e				  -	      rts
      3  248e					      else
      4  248e		       4c da ff 	      jmp	BS_return
      5  2491					      endif
   5925  2491
   5926  2491				   notleft
   5927  2491		       4a		      lsr
   5928  2492		       90 2a		      bcc	notright
   5929  2494							;right
   5930  2494
   5931  2494					      ifconst	pfres
   5932  2494		       a2 10		      ldx	#pfres*4
   5933  2496				  -	      else
   5934  2496				  -	      ldx	#48
   5935  2496					      endif
   5936  2496				   rightloop
   5937  2496		       bd ec 10 	      lda	playfield-4,x
   5938  2499		       4a		      lsr
   5939  249a					      ifconst	superchip
   5940  249a		       bd ed 10 	      lda	playfield-3,x
   5941  249d		       2a		      rol
   5942  249e		       9d 6d 10 	      sta	playfield-131,x
   5943  24a1		       bd ee 10 	      lda	playfield-2,x
   5944  24a4		       6a		      ror
   5945  24a5		       9d 6e 10 	      sta	playfield-130,x
   5946  24a8		       bd ef 10 	      lda	playfield-1,x
   5947  24ab		       2a		      rol
   5948  24ac		       9d 6f 10 	      sta	playfield-129,x
   5949  24af		       bd ec 10 	      lda	playfield-4,x
   5950  24b2		       6a		      ror
   5951  24b3		       9d 6c 10 	      sta	playfield-132,x
   5952  24b6				  -	      else
   5953  24b6				  -	      rol	playfield-3,x
   5954  24b6				  -	      ror	playfield-2,x
   5955  24b6				  -	      rol	playfield-1,x
   5956  24b6				  -	      ror	playfield-4,x
   5957  24b6					      endif
   5958  24b6		       8a		      txa
   5959  24b7		       cb 04		      sbx	#4
   5960  24b9		       d0 db		      bne	rightloop
      0  24bb					      RETURN
      1  24bb				  -	      ifnconst	bankswitch
      2  24bb				  -	      rts
      3  24bb					      else
      4  24bb		       4c da ff 	      jmp	BS_return
      5  24be					      endif
   5962  24be
   5963  24be				   notright
   5964  24be		       4a		      lsr
   5965  24bf		       90 5b		      bcc	notup
   5966  24c1							;up
   5967  24c1		       4a		      lsr
   5968  24c2		       90 02		      bcc	onedecup
   5969  24c4		       c6 ef		      dec	playfieldpos
   5970  24c6				   onedecup
   5971  24c6		       c6 ef		      dec	playfieldpos
   5972  24c8		       f0 02		      beq	shiftdown
   5973  24ca		       10 4d		      bpl	noshiftdown2
   5974  24cc				   shiftdown
   5975  24cc				  -	      ifconst	pfrowheight
   5976  24cc				  -	      lda	#pfrowheight
   5977  24cc					      else
   5978  24cc				  -	      ifnconst	pfres
   5979  24cc				  -	      lda	#8
   5980  24cc					      else
   5981  24cc		       a9 18		      lda	#(96/pfres)	; try to come close to the real size
   5982  24ce					      endif
   5983  24ce					      endif
   5984  24ce
   5985  24ce		       85 ef		      sta	playfieldpos
   5986  24d0		       ad f3 10 	      lda	playfield+3
   5987  24d3		       85 9f		      sta	temp4
   5988  24d5		       ad f2 10 	      lda	playfield+2
   5989  24d8		       85 9e		      sta	temp3
   5990  24da		       ad f1 10 	      lda	playfield+1
   5991  24dd		       85 9d		      sta	temp2
   5992  24df		       ad f0 10 	      lda	playfield
   5993  24e2		       85 9c		      sta	temp1
   5994  24e4		       a2 00		      ldx	#0
   5995  24e6				   up2
   5996  24e6		       bd f4 10 	      lda	playfield+4,x
   5997  24e9					      ifconst	superchip
   5998  24e9		       9d 70 10 	      sta	playfield-128,x
   5999  24ec		       bd f5 10 	      lda	playfield+5,x
   6000  24ef		       9d 71 10 	      sta	playfield-127,x
   6001  24f2		       bd f6 10 	      lda	playfield+6,x
   6002  24f5		       9d 72 10 	      sta	playfield-126,x
   6003  24f8		       bd f7 10 	      lda	playfield+7,x
   6004  24fb		       9d 73 10 	      sta	playfield-125,x
   6005  24fe				  -	      else
   6006  24fe				  -	      sta	playfield,x
   6007  24fe				  -	      lda	playfield+5,x
   6008  24fe				  -	      sta	playfield+1,x
   6009  24fe				  -	      lda	playfield+6,x
   6010  24fe				  -	      sta	playfield+2,x
   6011  24fe				  -	      lda	playfield+7,x
   6012  24fe				  -	      sta	playfield+3,x
   6013  24fe					      endif
   6014  24fe		       8a		      txa
   6015  24ff		       cb fc		      sbx	#252
   6016  2501					      ifconst	pfres
   6017  2501		       e0 0c		      cpx	#(pfres-1)*4
   6018  2503				  -	      else
   6019  2503				  -	      cpx	#44
   6020  2503					      endif
   6021  2503		       d0 e1		      bne	up2
   6022  2505
   6023  2505		       a5 9f		      lda	temp4
   6024  2507
   6025  2507					      ifconst	superchip
   6026  2507					      ifconst	pfres
   6027  2507		       8d 7f 10 	      sta	playfield+pfres*4-129
   6028  250a		       a5 9e		      lda	temp3
   6029  250c		       8d 7e 10 	      sta	playfield+pfres*4-130
   6030  250f		       a5 9d		      lda	temp2
   6031  2511		       8d 7d 10 	      sta	playfield+pfres*4-131
   6032  2514		       a5 9c		      lda	temp1
   6033  2516		       8d 7c 10 	      sta	playfield+pfres*4-132
   6034  2519				  -	      else
   6035  2519				  -	      sta	playfield+47-128
   6036  2519				  -	      lda	temp3
   6037  2519				  -	      sta	playfield+46-128
   6038  2519				  -	      lda	temp2
   6039  2519				  -	      sta	playfield+45-128
   6040  2519				  -	      lda	temp1
   6041  2519				  -	      sta	playfield+44-128
   6042  2519					      endif
   6043  2519				  -	      else
   6044  2519				  -	      ifconst	pfres
   6045  2519				  -	      sta	playfield+pfres*4-1
   6046  2519				  -	      lda	temp3
   6047  2519				  -	      sta	playfield+pfres*4-2
   6048  2519				  -	      lda	temp2
   6049  2519				  -	      sta	playfield+pfres*4-3
   6050  2519				  -	      lda	temp1
   6051  2519				  -	      sta	playfield+pfres*4-4
   6052  2519				  -	      else
   6053  2519				  -	      sta	playfield+47
   6054  2519				  -	      lda	temp3
   6055  2519				  -	      sta	playfield+46
   6056  2519				  -	      lda	temp2
   6057  2519				  -	      sta	playfield+45
   6058  2519				  -	      lda	temp1
   6059  2519				  -	      sta	playfield+44
   6060  2519				  -	      endif
   6061  2519					      endif
   6062  2519				   noshiftdown2
      0  2519					      RETURN
      1  2519				  -	      ifnconst	bankswitch
      2  2519				  -	      rts
      3  2519					      else
      4  2519		       4c da ff 	      jmp	BS_return
      5  251c					      endif
   6064  251c
   6065  251c
   6066  251c				   notup
   6067  251c							;down
   6068  251c		       4a		      lsr
   6069  251d		       b0 02		      bcs	oneincup
   6070  251f		       e6 ef		      inc	playfieldpos
   6071  2521				   oneincup
   6072  2521		       e6 ef		      inc	playfieldpos
   6073  2523		       a5 ef		      lda	playfieldpos
   6074  2525
   6075  2525				  -	      ifconst	pfrowheight
   6076  2525				  -	      cmp	#pfrowheight+1
   6077  2525					      else
   6078  2525				  -	      ifnconst	pfres
   6079  2525				  -	      cmp	#9
   6080  2525					      else
   6081  2525		       c9 19		      cmp	#(96/pfres)+1	; try to come close to the real size
   6082  2527					      endif
   6083  2527					      endif
   6084  2527
   6085  2527		       90 4b		      bcc	noshiftdown
   6086  2529		       a9 01		      lda	#1
   6087  252b		       85 ef		      sta	playfieldpos
   6088  252d
   6089  252d					      ifconst	pfres
   6090  252d		       ad ff 10 	      lda	playfield+pfres*4-1
   6091  2530		       85 9f		      sta	temp4
   6092  2532		       ad fe 10 	      lda	playfield+pfres*4-2
   6093  2535		       85 9e		      sta	temp3
   6094  2537		       ad fd 10 	      lda	playfield+pfres*4-3
   6095  253a		       85 9d		      sta	temp2
   6096  253c		       ad fc 10 	      lda	playfield+pfres*4-4
   6097  253f				  -	      else
   6098  253f				  -	      lda	playfield+47
   6099  253f				  -	      sta	temp4
   6100  253f				  -	      lda	playfield+46
   6101  253f				  -	      sta	temp3
   6102  253f				  -	      lda	playfield+45
   6103  253f				  -	      sta	temp2
   6104  253f				  -	      lda	playfield+44
   6105  253f					      endif
   6106  253f
   6107  253f		       85 9c		      sta	temp1
   6108  2541
   6109  2541					      ifconst	pfres
   6110  2541		       a2 0c		      ldx	#(pfres-1)*4
   6111  2543				  -	      else
   6112  2543				  -	      ldx	#44
   6113  2543					      endif
   6114  2543				   down2
   6115  2543		       bd ef 10 	      lda	playfield-1,x
   6116  2546					      ifconst	superchip
   6117  2546		       9d 73 10 	      sta	playfield-125,x
   6118  2549		       bd ee 10 	      lda	playfield-2,x
   6119  254c		       9d 72 10 	      sta	playfield-126,x
   6120  254f		       bd ed 10 	      lda	playfield-3,x
   6121  2552		       9d 71 10 	      sta	playfield-127,x
   6122  2555		       bd ec 10 	      lda	playfield-4,x
   6123  2558		       9d 70 10 	      sta	playfield-128,x
   6124  255b				  -	      else
   6125  255b				  -	      sta	playfield+3,x
   6126  255b				  -	      lda	playfield-2,x
   6127  255b				  -	      sta	playfield+2,x
   6128  255b				  -	      lda	playfield-3,x
   6129  255b				  -	      sta	playfield+1,x
   6130  255b				  -	      lda	playfield-4,x
   6131  255b				  -	      sta	playfield,x
   6132  255b					      endif
   6133  255b		       8a		      txa
   6134  255c		       cb 04		      sbx	#4
   6135  255e		       d0 e3		      bne	down2
   6136  2560
   6137  2560		       a5 9f		      lda	temp4
   6138  2562					      ifconst	superchip
   6139  2562		       8d 73 10 	      sta	playfield-125
   6140  2565		       a5 9e		      lda	temp3
   6141  2567		       8d 72 10 	      sta	playfield-126
   6142  256a		       a5 9d		      lda	temp2
   6143  256c		       8d 71 10 	      sta	playfield-127
   6144  256f		       a5 9c		      lda	temp1
   6145  2571		       8d 70 10 	      sta	playfield-128
   6146  2574				  -	      else
   6147  2574				  -	      sta	playfield+3
   6148  2574				  -	      lda	temp3
   6149  2574				  -	      sta	playfield+2
   6150  2574				  -	      lda	temp2
   6151  2574				  -	      sta	playfield+1
   6152  2574				  -	      lda	temp1
   6153  2574				  -	      sta	playfield
   6154  2574					      endif
   6155  2574				   noshiftdown
      0  2574					      RETURN
      1  2574				  -	      ifnconst	bankswitch
      2  2574				  -	      rts
      3  2574					      else
      4  2574		       4c da ff 	      jmp	BS_return
      5  2577					      endif
   6157  2577							; Provided under the CC0 license. See the included LICENSE.txt for details.
   6158  2577
   6159  2577							;standard routines needed for pretty much all games
   6160  2577							; just the random number generator is left - maybe we should remove this asm file altogether?
   6161  2577							; repositioning code and score pointer setup moved to overscan
   6162  2577							; read switches, joysticks now compiler generated (more efficient)
   6163  2577
   6164  2577				   randomize
   6165  2577		       a5 a2		      lda	rand
   6166  2579		       4a		      lsr
   6167  257a				  -	      ifconst	rand16
   6168  257a				  -	      rol	rand16
   6169  257a					      endif
   6170  257a		       90 02		      bcc	noeor
   6171  257c		       49 b4		      eor	#$B4
   6172  257e				   noeor
   6173  257e		       85 a2		      sta	rand
   6174  2580				  -	      ifconst	rand16
   6175  2580				  -	      eor	rand16
   6176  2580					      endif
      0  2580					      RETURN
      1  2580				  -	      ifnconst	bankswitch
      2  2580				  -	      rts
      3  2580					      else
      4  2580		       4c da ff 	      jmp	BS_return
      5  2583					      endif
   6178  2583							; Provided under the CC0 license. See the included LICENSE.txt for details.
   6179  2583
   6180  2583				   drawscreen
   6181  2583				  -	      ifconst	debugscore
   6182  2583				  -	      ldx	#14
   6183  2583				  -	      lda	INTIM	; display # cycles left in the score
   6184  2583				  -
   6185  2583				  -	      ifconst	mincycles
   6186  2583				  -	      lda	mincycles
   6187  2583				  -	      cmp	INTIM
   6188  2583				  -	      lda	mincycles
   6189  2583				  -	      bcc	nochange
   6190  2583				  -	      lda	INTIM
   6191  2583				  -	      sta	mincycles
   6192  2583				  -nochange
   6193  2583				  -	      endif
   6194  2583				  -
   6195  2583				  -			; cmp #$2B
   6196  2583				  -			; bcs no_cycles_left
   6197  2583				  -	      bmi	cycles_left
   6198  2583				  -	      ldx	#64
   6199  2583				  -	      eor	#$ff	;make negative
   6200  2583				  -cycles_left
   6201  2583				  -	      stx	scorecolor
   6202  2583				  -	      and	#$7f	; clear sign bit
   6203  2583				  -	      tax
   6204  2583				  -	      lda	scorebcd,x
   6205  2583				  -	      sta	score+2
   6206  2583				  -	      lda	scorebcd1,x
   6207  2583				  -	      sta	score+1
   6208  2583				  -	      jmp	done_debugscore
   6209  2583				  -scorebcd
   6210  2583				  -	      .byte	$00, $64, $28, $92, $56, $20, $84, $48, $12, $76, $40
   6211  2583				  -	      .byte	$04, $68, $32, $96, $60, $24, $88, $52, $16, $80, $44
   6212  2583				  -	      .byte	$08, $72, $36, $00, $64, $28, $92, $56, $20, $84, $48
   6213  2583				  -	      .byte	$12, $76, $40, $04, $68, $32, $96, $60, $24, $88
   6214  2583				  -scorebcd1
   6215  2583				  -	      .byte	0, 0, 1, 1, 2, 3, 3, 4, 5, 5, 6
   6216  2583				  -	      .byte	7, 7, 8, 8, 9, $10, $10, $11, $12, $12, $13
   6217  2583				  -	      .byte	$14, $14, $15, $16, $16, $17, $17, $18, $19, $19, $20
   6218  2583				  -	      .byte	$21, $21, $22, $23, $23, $24, $24, $25, $26, $26
   6219  2583				  -done_debugscore
   6220  2583					      endif
   6221  2583
   6222  2583				  -	      ifconst	debugcycles
   6223  2583				  -	      lda	INTIM	; if we go over, it mucks up the background color
   6224  2583				  -			; cmp #$2B
   6225  2583				  -			; BCC overscan
   6226  2583				  -	      bmi	overscan
   6227  2583				  -	      sta	COLUBK
   6228  2583				  -	      bcs	doneoverscan
   6229  2583					      endif
   6230  2583
   6231  2583				   overscan
   6232  2583				  -	      ifconst	interlaced
   6233  2583				  -	      PHP
   6234  2583				  -	      PLA
   6235  2583				  -	      EOR	#4	; flip interrupt bit
   6236  2583				  -	      PHA
   6237  2583				  -	      PLP
   6238  2583				  -	      AND	#4	; isolate the interrupt bit
   6239  2583				  -	      TAX		; save it for later
   6240  2583					      endif
   6241  2583
   6242  2583				   overscanloop
   6243  2583		       ad 84 02 	      lda	INTIM	;wait for sync
   6244  2586		       30 fb		      bmi	overscanloop
   6245  2588				   doneoverscan
   6246  2588
   6247  2588							;do VSYNC
   6248  2588
   6249  2588				  -	      ifconst	interlaced
   6250  2588				  -	      CPX	#4
   6251  2588				  -	      BNE	oddframevsync
   6252  2588					      endif
   6253  2588
   6254  2588		       a9 02		      lda	#2
   6255  258a		       85 02		      sta	WSYNC
   6256  258c		       85 00		      sta	VSYNC
   6257  258e		       85 02		      STA	WSYNC
   6258  2590		       85 02		      STA	WSYNC
   6259  2592		       4a		      lsr
   6260  2593		       85 02		      STA	WSYNC
   6261  2595		       85 00		      STA	VSYNC
   6262  2597		       85 01		      sta	VBLANK
   6263  2599					      ifnconst	overscan_time
   6264  2599		       a9 a5		      lda	#37+128
   6265  259b				  -	      else
   6266  259b				  -	      lda	#overscan_time+128
   6267  259b					      endif
   6268  259b		       8d 96 02 	      sta	TIM64T
   6269  259e
   6270  259e				  -	      ifconst	interlaced
   6271  259e				  -	      jmp	postsync
   6272  259e				  -
   6273  259e				  -oddframevsync
   6274  259e				  -	      sta	WSYNC
   6275  259e				  -
   6276  259e				  -	      LDA	($80,X)	; 11 waste
   6277  259e				  -	      LDA	($80,X)	; 11 waste
   6278  259e				  -	      LDA	($80,X)	; 11 waste
   6279  259e				  -
   6280  259e				  -	      lda	#2
   6281  259e				  -	      sta	VSYNC
   6282  259e				  -	      sta	WSYNC
   6283  259e				  -	      sta	WSYNC
   6284  259e				  -	      sta	WSYNC
   6285  259e				  -
   6286  259e				  -	      LDA	($80,X)	; 11 waste
   6287  259e				  -	      LDA	($80,X)	; 11 waste
   6288  259e				  -	      LDA	($80,X)	; 11 waste
   6289  259e				  -
   6290  259e				  -	      lda	#0
   6291  259e				  -	      sta	VSYNC
   6292  259e				  -	      sta	VBLANK
   6293  259e				  -	      ifnconst	overscan_time
   6294  259e				  -	      lda	#37+128
   6295  259e				  -	      else
   6296  259e				  -	      lda	#overscan_time+128
   6297  259e				  -	      endif
   6298  259e				  -	      sta	TIM64T
   6299  259e				  -
   6300  259e				  -postsync
   6301  259e					      endif
   6302  259e
   6303  259e				  -	      ifconst	legacy
   6304  259e				  -	      if	legacy < 100
   6305  259e				  -	      ldx	#4
   6306  259e				  -adjustloop
   6307  259e				  -	      lda	player0x,x
   6308  259e				  -	      sec
   6309  259e				  -	      sbc	#14	;?
   6310  259e				  -	      sta	player0x,x
   6311  259e				  -	      dex
   6312  259e				  -	      bpl	adjustloop
   6313  259e				  -	      endif
   6314  259e					      endif
   6315  259e				  -	      if	((<*)>$e9)&&((<*)<$fa)
   6316  259e				  -	      repeat	($fa-(<*))
   6317  259e				  -	      nop
   6318  259e				  -	      repend
   6319  259e					      endif
   6320  259e		       85 02		      sta	WSYNC
   6321  25a0		       a2 04		      ldx	#4
      0  25a2					      SLEEP	3
      1  25a2				   .CYCLES    SET	3
      2  25a2
      3  25a2				  -	      IF	.CYCLES < 2
      4  25a2				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  25a2				  -	      ERR
      6  25a2					      ENDIF
      7  25a2
      8  25a2					      IF	.CYCLES & 1
      9  25a2					      IFNCONST	NO_ILLEGAL_OPCODES
     10  25a2		       04 00		      nop	0
     11  25a4				  -	      ELSE
     12  25a4				  -	      bit	VSYNC
     13  25a4					      ENDIF
     14  25a4				   .CYCLES    SET	.CYCLES - 3
     15  25a4					      ENDIF
     16  25a4
     17  25a4				  -	      REPEAT	.CYCLES / 2
     18  25a4				  -	      nop
     19  25a4					      REPEND
   6323  25a4				   HorPosLoop		; 5
   6324  25a4		       b5 80		      lda	player0x,X	;+4 9
   6325  25a6		       38		      sec		;+2 11
   6326  25a7				   DivideLoop
   6327  25a7		       e9 0f		      sbc	#15
   6328  25a9		       b0 fc		      bcs	DivideLoop	;+4 15
   6329  25ab		       95 9c		      sta	temp1,X	;+4 19
   6330  25ad		       95 10		      sta	RESP0,X	;+4 23
   6331  25af		       85 02		      sta	WSYNC
   6332  25b1		       ca		      dex
   6333  25b2		       10 f0		      bpl	HorPosLoop	;+5 5
   6334  25b4							; 4
   6335  25b4
   6336  25b4		       a2 04		      ldx	#4
   6337  25b6		       b4 9c		      ldy	temp1,X
   6338  25b8		       b9 14 f5 	      lda	repostable-256,Y
   6339  25bb		       95 20		      sta	HMP0,X	;+14 18
   6340  25bd
   6341  25bd		       ca		      dex
   6342  25be		       b4 9c		      ldy	temp1,X
   6343  25c0		       b9 14 f5 	      lda	repostable-256,Y
   6344  25c3		       95 20		      sta	HMP0,X	;+14 32
   6345  25c5
   6346  25c5		       ca		      dex
   6347  25c6		       b4 9c		      ldy	temp1,X
   6348  25c8		       b9 14 f5 	      lda	repostable-256,Y
   6349  25cb		       95 20		      sta	HMP0,X	;+14 46
   6350  25cd
   6351  25cd		       ca		      dex
   6352  25ce		       b4 9c		      ldy	temp1,X
   6353  25d0		       b9 14 f5 	      lda	repostable-256,Y
   6354  25d3		       95 20		      sta	HMP0,X	;+14 60
   6355  25d5
   6356  25d5		       ca		      dex
   6357  25d6		       b4 9c		      ldy	temp1,X
   6358  25d8		       b9 14 f5 	      lda	repostable-256,Y
   6359  25db		       95 20		      sta	HMP0,X	;+14 74
   6360  25dd
   6361  25dd		       85 02		      sta	WSYNC
   6362  25df
   6363  25df		       85 2a		      sta	HMOVE	;+3 3
   6364  25e1
   6365  25e1
   6366  25e1				  -	      ifconst	legacy
   6367  25e1				  -	      if	legacy < 100
   6368  25e1				  -	      ldx	#4
   6369  25e1				  -adjustloop2
   6370  25e1				  -	      lda	player0x,x
   6371  25e1				  -	      clc
   6372  25e1				  -	      adc	#14	;?
   6373  25e1				  -	      sta	player0x,x
   6374  25e1				  -	      dex
   6375  25e1				  -	      bpl	adjustloop2
   6376  25e1				  -	      endif
   6377  25e1					      endif
   6378  25e1
   6379  25e1
   6380  25e1
   6381  25e1
   6382  25e1							;set score pointers
   6383  25e1		       a7 95		      lax	score+2
   6384  25e3		       20 14 f6 	      jsr	scorepointerset
   6385  25e6		       84 9b		      sty	scorepointers+5
   6386  25e8		       86 98		      stx	scorepointers+2
   6387  25ea		       a7 94		      lax	score+1
   6388  25ec		       20 14 f6 	      jsr	scorepointerset
   6389  25ef		       84 9a		      sty	scorepointers+4
   6390  25f1		       86 97		      stx	scorepointers+1
   6391  25f3		       a7 93		      lax	score
   6392  25f5		       20 14 f6 	      jsr	scorepointerset
   6393  25f8		       84 99		      sty	scorepointers+3
   6394  25fa		       86 96		      stx	scorepointers
   6395  25fc
   6396  25fc				   vblk
   6397  25fc							; run possible vblank bB code
   6398  25fc				  -	      ifconst	vblank_bB_code
   6399  25fc				  -	      jsr	vblank_bB_code
   6400  25fc					      endif
   6401  25fc				   vblk2
   6402  25fc		       ad 84 02 	      LDA	INTIM
   6403  25ff		       30 fb		      bmi	vblk2
   6404  2601		       4c 00 f1 	      jmp	kernel
   6405  2604
   6406  2604
   6407  2604		       80 70 60 50*	      .byte.b	$80,$70,$60,$50,$40,$30,$20,$10,$00
   6408  260d		       f0 e0 d0 c0*	      .byte.b	$F0,$E0,$D0,$C0,$B0,$A0,$90
   6409  2614				   repostable
   6410  2614
   6411  2614				   scorepointerset
   6412  2614		       29 0f		      and	#$0F
   6413  2616		       0a		      asl
   6414  2617		       0a		      asl
   6415  2618		       0a		      asl
   6416  2619		       69 71		      adc	#<scoretable
   6417  261b		       a8		      tay
   6418  261c		       8a		      txa
   6419  261d							; and #$F0
   6420  261d							; lsr
   6421  261d		       4b f0		      asr	#$F0
   6422  261f		       69 71		      adc	#<scoretable
   6423  2621		       aa		      tax
   6424  2622		       60		      rts
   6425  2623							;bB.asm
   6426  2623							; bB.asm file is split here
   6427  2623				   .
   6428  2623							; 
   6429  2623
   6430  2623				   .L0532		;  asm
   6431  2623
------- FILE titlescreen/asm/titlescreen.asm LEVEL 2 PASS 3
      0  2623					      include	"titlescreen/asm/titlescreen.asm"
      1  2623
------- FILE titlescreen/asm/layoutmacros.asm LEVEL 3 PASS 3
      0  2623					      include	"titlescreen/asm/layoutmacros.asm"
      1  2623
      2  2623							; the macro's used in the "titlescreen_layout.asm" file
      3  2623
      4  2623					      MAC	draw_96x2_1
      5  2623				   mk_96x2_1_on =	1
      6  2623					      jsr	draw_bmp_96x2_1
      7  2623					      ENDM
      8  2623
      9  2623					      MAC	draw_96x2_2
     10  2623				   mk_96x2_2_on =	1
     11  2623					      jsr	draw_bmp_96x2_2
     12  2623					      ENDM
     13  2623
     14  2623					      MAC	draw_96x2_3
     15  2623				   mk_96x2_3_on =	1
     16  2623					      jsr	draw_bmp_96x2_3
     17  2623					      ENDM
     18  2623
     19  2623					      MAC	draw_96x2_4
     20  2623				   mk_96x2_4_on =	1
     21  2623					      jsr	draw_bmp_96x2_4
     22  2623					      ENDM
     23  2623
     24  2623					      MAC	draw_96x2_5
     25  2623				   mk_96x2_5_on =	1
     26  2623					      jsr	draw_bmp_96x2_5
     27  2623					      ENDM
     28  2623
     29  2623					      MAC	draw_96x2_6
     30  2623				   mk_96x2_6_on =	1
     31  2623					      jsr	draw_bmp_96x2_6
     32  2623					      ENDM
     33  2623
     34  2623					      MAC	draw_96x2_7
     35  2623				   mk_96x2_7_on =	1
     36  2623					      jsr	draw_bmp_96x2_7
     37  2623					      ENDM
     38  2623
     39  2623					      MAC	draw_96x2_8
     40  2623				   mk_96x2_8_on =	1
     41  2623					      jsr	draw_bmp_96x2_8
     42  2623					      ENDM
     43  2623
     44  2623					      MAC	draw_48x1_1
     45  2623				   mk_48x1_X_on =	1
     46  2623				   mk_48x1_1_on =	1
     47  2623					      jsr	draw_bmp_48x1_1
     48  2623					      ENDM
     49  2623
     50  2623					      MAC	draw_48x1_2
     51  2623				   mk_48x1_X_on =	1
     52  2623				   mk_48x1_2_on =	1
     53  2623					      jsr	draw_bmp_48x1_2
     54  2623					      ENDM
     55  2623
     56  2623					      MAC	draw_48x1_3
     57  2623				   mk_48x1_X_on =	1
     58  2623				   mk_48x1_3_on =	1
     59  2623					      jsr	draw_bmp_48x1_3
     60  2623					      ENDM
     61  2623
     62  2623					      MAC	draw_48x1_4
     63  2623				   mk_48x1_X_on =	1
     64  2623				   mk_48x1_4_on =	1
     65  2623					      jsr	draw_bmp_48x1_4
     66  2623					      ENDM
     67  2623
     68  2623					      MAC	draw_48x1_5
     69  2623				   mk_48x1_X_on =	1
     70  2623				   mk_48x1_5_on =	1
     71  2623					      jsr	draw_bmp_48x1_5
     72  2623					      ENDM
     73  2623
     74  2623					      MAC	draw_48x1_6
     75  2623				   mk_48x1_X_on =	1
     76  2623				   mk_48x1_6_on =	1
     77  2623					      jsr	draw_bmp_48x1_6
     78  2623					      ENDM
     79  2623
     80  2623					      MAC	draw_48x1_7
     81  2623				   mk_48x1_X_on =	1
     82  2623				   mk_48x1_7_on =	1
     83  2623					      jsr	draw_bmp_48x1_7
     84  2623					      ENDM
     85  2623
     86  2623					      MAC	draw_48x1_8
     87  2623				   mk_48x1_X_on =	1
     88  2623				   mk_48x1_8_on =	1
     89  2623					      jsr	draw_bmp_48x1_8
     90  2623					      ENDM
     91  2623
     92  2623
     93  2623					      MAC	draw_48x2_1
     94  2623				   mk_48x2_X_on =	1
     95  2623				   mk_48x2_1_on =	1
     96  2623					      jsr	draw_bmp_48x2_1
     97  2623					      ENDM
     98  2623
     99  2623					      MAC	draw_48x2_2
    100  2623				   mk_48x2_X_on =	1
    101  2623				   mk_48x2_2_on =	1
    102  2623					      jsr	draw_bmp_48x2_2
    103  2623					      ENDM
    104  2623
    105  2623					      MAC	draw_48x2_3
    106  2623				   mk_48x2_X_on =	1
    107  2623				   mk_48x2_3_on =	1
    108  2623					      jsr	draw_bmp_48x2_3
    109  2623					      ENDM
    110  2623
    111  2623					      MAC	draw_48x2_4
    112  2623				   mk_48x2_X_on =	1
    113  2623				   mk_48x2_4_on =	1
    114  2623					      jsr	draw_bmp_48x2_4
    115  2623					      ENDM
    116  2623
    117  2623					      MAC	draw_48x2_5
    118  2623				   mk_48x2_X_on =	1
    119  2623				   mk_48x2_5_on =	1
    120  2623					      jsr	draw_bmp_48x2_5
    121  2623					      ENDM
    122  2623
    123  2623					      MAC	draw_48x2_6
    124  2623				   mk_48x2_X_on =	1
    125  2623				   mk_48x2_6_on =	1
    126  2623					      jsr	draw_bmp_48x2_6
    127  2623					      ENDM
    128  2623
    129  2623					      MAC	draw_48x2_7
    130  2623				   mk_48x2_X_on =	1
    131  2623				   mk_48x2_7_on =	1
    132  2623					      jsr	draw_bmp_48x2_7
    133  2623					      ENDM
    134  2623
    135  2623					      MAC	draw_48x2_8
    136  2623				   mk_48x2_X_on =	1
    137  2623				   mk_48x2_8_on =	1
    138  2623					      jsr	draw_bmp_48x2_8
    139  2623					      ENDM
    140  2623
    141  2623					      MAC	draw_player
    142  2623				   mk_player_on =	1
    143  2623					      jsr	draw_player_display
    144  2623					      ENDM
    145  2623
    146  2623					      MAC	draw_score
    147  2623				   mk_score_on =	1
    148  2623				   mk_48x1_X_on =	1
    149  2623					      jsr	draw_score_display
    150  2623					      ENDM
    151  2623
    152  2623					      MAC	draw_gameselect
    153  2623				   mk_gameselect_on =	1
    154  2623				   mk_48x1_X_on =	1
    155  2623					      jsr	draw_gameselect_display
    156  2623					      ENDM
    157  2623
    158  2623					      MAC	draw_space
    159  2623					      ldy	#{1}
    160  2623				   .loop
    161  2623					      sta	WSYNC
    162  2623					      dey
    163  2623					      bne	.loop
    164  2623					      ENDM
    165  2623
------- FILE titlescreen/asm/titlescreen.asm
------- FILE titlescreen/asm/dpcfix.asm LEVEL 3 PASS 3
      0  2623					      include	"titlescreen/asm/dpcfix.asm"
      1  2623							; reassign variables that DPC+ doesn't have
      2  2623
      3  2623				  -	      ifnconst	aux2
      4  2623				  -aux2       =	player2x
      5  2623					      endif
      6  2623				  -	      ifnconst	aux4
      7  2623				  -aux4       =	player4x
      8  2623					      endif
      9  2623				  -	      ifnconst	aux5
     10  2623				  -aux5       =	player5x
     11  2623					      endif
     12  2623				  -	      ifnconst	aux6
     13  2623				  -aux6       =	player6x
     14  2623					      endif
     15  2623
     16  2623				  -	      ifnconst	player0pointer
     17  2623				  -player0pointer =	player2y
     18  2623					      endif
     19  2623				  -	      ifnconst	player1pointer
     20  2623				  -player1pointer =	player2height	; to player3height
     21  2623					      endif
     22  2623				  -	      ifnconst	player1color
     23  2623				  -player1color =	player4height	; to player5height
     24  2623					      endif
     25  2623				  -	      ifnconst	scorepointers
     26  2623				  -scorepointers =	player6height	; to NUSIZ8
     27  2623					      endif
------- FILE titlescreen/asm/titlescreen.asm
------- FILE titlescreen/titlescreen_layout.asm LEVEL 3 PASS 3
      0  2623					      include	"titlescreen/titlescreen_layout.asm"
      1  2623
      2  2623							; To use a minikernel, just list it below. They'll be drawn on the screen in
      3  2623							; in the order they were listed.
      4  2623							;
      5  2623							; If a minikernel isn't listed, it won't be compiled into your program, and
      6  2623							; it won't use any rom space.
      7  2623
      8  2623					      MAC	titlescreenlayout
      9  2623					      draw_96x2_1
     10  2623					      draw_gameselect
     11  2623					      draw_48x2_1
     12  2623					      draw_score
     13  2623					      ENDM
     14  2623
     15  2623							; minikernel choices are:
     16  2623							;
     17  2623							; draw_48x1_1, draw_48x1_2, draw_48x1_3
     18  2623							;	The first, second, and third 48-wide single-line bitmap minikernels
     19  2623							;
     20  2623							; draw_48x2_1, draw_48x2_2, draw_48x2_3
     21  2623							;	The first, second, and third 48-wide double-line bitmap minikernels
     22  2623							;
     23  2623							; draw_96x2_1, draw_96x2_2, draw_96x2_3
     24  2623							;	The first, second, and third 96-wide double-line bitmap minikernels
     25  2623							;
     26  2623							; draw_gameselect
     27  2623							;	The game selection display minikernel
     28  2623							;
     29  2623							; draw_score
     30  2623							;	A minikernel that draws the score
     31  2623							;
     32  2623							; draw_space 10
     33  2623							;	A minikernel used to add blank space between other minikernels
------- FILE titlescreen/asm/titlescreen.asm
      5  2623
      6  2623				   .titledrawscreen
      7  2623				   title_eat_overscan
      8  2623							;bB runs in overscan. Wait for the overscan to run out...
      9  2623		       18		      clc
     10  2624		       ad 84 02 	      lda	INTIM
     11  2627		       30 fa		      bmi	title_eat_overscan
     12  2629		       4c 2c f6 	      jmp	title_do_vertical_sync
     13  262c
     14  262c				   title_do_vertical_sync
     15  262c		       a9 02		      lda	#2
     16  262e		       85 02		      sta	WSYNC	;one line with VSYNC
     17  2630		       85 00		      sta	VSYNC	;enable VSYNC
     18  2632		       85 02		      sta	WSYNC	;one line with VSYNC
     19  2634		       85 02		      sta	WSYNC	;one line with VSYNC
     20  2636		       a9 00		      lda	#0
     21  2638		       85 02		      sta	WSYNC	;one line with VSYNC
     22  263a		       85 00		      sta	VSYNC	;turn off VSYNC
     23  263c
     24  263c							;lda #42+128
     25  263c					      ifnconst	vblank_time
     26  263c		       a9 aa		      lda	#42+128
     27  263e				  -	      else
     28  263e				  -	      lda	#vblank_time+128
     29  263e					      endif
     30  263e
     31  263e		       8d 96 02 	      sta	TIM64T
     32  2641
     33  2641		       00 82	   titleframe =	missile0x
     34  2641		       e6 82		      inc	titleframe	; increment the frame counter
     35  2643
     36  2643				  -	      ifconst	.title_vblank
     37  2643				  -	      jsr	.title_vblank
     38  2643					      endif
     39  2643
     40  2643				   title_vblank_loop
     41  2643		       ad 84 02 	      lda	INTIM
     42  2646		       30 fb		      bmi	title_vblank_loop
     43  2648		       a9 00		      lda	#0
     44  264a		       85 02		      sta	WSYNC
     45  264c		       85 01		      sta	VBLANK
     46  264e		       85 1d		      sta	ENAM0
     47  2650		       85 1f		      sta	ENABL
     48  2652
     49  2652				   title_playfield
     50  2652
     51  2652							; ======== BEGIN of the custom kernel!!!!! All of the work is done in the playfield.
     52  2652
     53  2652		       a9 e6		      lda	#230
     54  2654		       8d 96 02 	      sta	TIM64T
     55  2657
     56  2657		       a9 01		      lda	#1
     57  2659		       85 0a		      sta	CTRLPF
     58  265b		       18		      clc
     59  265c
     60  265c		       a9 00		      lda	#0
     61  265e		       85 0b		      sta	REFP0
     62  2660		       85 0c		      sta	REFP1
     63  2662		       85 02		      sta	WSYNC
     64  2664		       ad a0 f6 	      lda	titlescreencolor
     65  2667		       85 09		      sta	COLUBK
     66  2669
      0  2669					      titlescreenlayout
      0  2669					      draw_96x2_1
      1  2669		       00 01	   mk_96x2_1_on =	1
      2  2669		       20 12 f8 	      jsr	draw_bmp_96x2_1
      0  266c					      draw_gameselect
      1  266c		       00 01	   mk_gameselect_on =	1
      2  266c		       00 01	   mk_48x1_X_on =	1
      3  266c		       20 53 fa 	      jsr	draw_gameselect_display
      0  266f					      draw_48x2_1
      1  266f		       00 01	   mk_48x2_X_on =	1
      2  266f		       00 01	   mk_48x2_1_on =	1
      3  266f		       20 a1 f6 	      jsr	draw_bmp_48x2_1
      0  2672					      draw_score
      1  2672		       00 01	   mk_score_on =	1
      2  2672		       00 01	   mk_48x1_X_on =	1
      3  2672		       20 81 f9 	      jsr	draw_score_display
     68  2675
     69  2675		       4c c9 fa 	      jmp	PFWAIT	; kernel is done. Finish off the screen
     70  2678
------- FILE titlescreen/asm/position48.asm LEVEL 3 PASS 3
      0  2678					      include	"titlescreen/asm/position48.asm"
      1  2678
      2  2678				   position48
      3  2678
      4  2678							;postion P0 and P1
      5  2678
      6  2678		       85 02		      sta	WSYNC
      7  267a
      8  267a		       a9 90		      lda	#$90	;2
      9  267c		       85 20		      sta	HMP0	;3
     10  267e		       a9 a0		      lda	#$A0	;2
     11  2680		       85 21		      sta	HMP1	;3
     12  2682
     13  2682		       e6 9c		      inc	temp1
     14  2684		       c6 9c		      dec	temp1
     15  2686		       e6 9c		      inc	temp1
     16  2688		       c6 9c		      dec	temp1
     17  268a		       e6 9c		      inc	temp1
      0  268c					      sleep	2
      1  268c				   .CYCLES    SET	2
      2  268c
      3  268c				  -	      IF	.CYCLES < 2
      4  268c				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  268c				  -	      ERR
      6  268c					      ENDIF
      7  268c
      8  268c				  -	      IF	.CYCLES & 1
      9  268c				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  268c				  -	      nop	0
     11  268c				  -	      ELSE
     12  268c				  -	      bit	VSYNC
     13  268c				  -	      ENDIF
     14  268c				  -.CYCLES    SET	.CYCLES - 3
     15  268c					      ENDIF
     16  268c
     17  268c					      REPEAT	.CYCLES / 2
     18  268c		       ea		      nop
     19  268d					      REPEND
     19  268d		       85 10		      sta	RESP0	;  +3
     20  268f		       85 11		      sta	RESP1	;  +3
     21  2691		       c6 9c		      dec	temp1	;  +5
     22  2693		       e6 9c		      inc	temp1	;  +5
     23  2695		       c6 9c		      dec	temp1	;  +5
     24  2697		       e6 9c		      inc	temp1	;  +5
     25  2699		       c6 9c		      dec	temp1	;  +5
      0  269b					      sleep	3
      1  269b				   .CYCLES    SET	3
      2  269b
      3  269b				  -	      IF	.CYCLES < 2
      4  269b				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  269b				  -	      ERR
      6  269b					      ENDIF
      7  269b
      8  269b					      IF	.CYCLES & 1
      9  269b					      IFNCONST	NO_ILLEGAL_OPCODES
     10  269b		       04 00		      nop	0
     11  269d				  -	      ELSE
     12  269d				  -	      bit	VSYNC
     13  269d					      ENDIF
     14  269d				   .CYCLES    SET	.CYCLES - 3
     15  269d					      ENDIF
     16  269d
     17  269d				  -	      REPEAT	.CYCLES / 2
     18  269d				  -	      nop
     19  269d					      REPEND
     27  269d		       85 2a		      sta	HMOVE	; +76
     28  269f		       60		      RTS
     29  26a0
------- FILE titlescreen/asm/titlescreen.asm
------- FILE titlescreen/titlescreen_color.asm LEVEL 3 PASS 3
      0  26a0					      include	"titlescreen/titlescreen_color.asm"
      1  26a0
      2  26a0							; This is where the titlescreen background color gets set.
      3  26a0							; You can also do a "dim titlescreencolor=[letter]" in bB
      4  26a0							; if you want to change the color on the fly.
      5  26a0
      6  26a0				  -	      ifnconst	titlescreencolor
      7  26a0				  -titlescreencolor
      8  26a0					      endif
      9  26a0		       00		      .byte.b	$00
     10  26a1
------- FILE titlescreen/asm/titlescreen.asm
     73  26a1
     74  26a1				  -	      ifconst	mk_48x1_1_on
     75  26a1				  -	      include	"titlescreen/asm/48x1_1_kernel.asm"
     76  26a1					      endif		;mk_48x1_1_on
     77  26a1
     78  26a1				  -	      ifconst	mk_48x1_2_on
     79  26a1				  -	      include	"titlescreen/asm/48x1_2_kernel.asm"
     80  26a1					      endif		;mk_48x1_2_on
     81  26a1
     82  26a1				  -	      ifconst	mk_48x1_3_on
     83  26a1				  -	      include	"titlescreen/asm/48x1_3_kernel.asm"
     84  26a1					      endif		;mk_48x1_3_on
     85  26a1
     86  26a1				  -	      ifconst	mk_48x1_4_on
     87  26a1				  -	      include	"titlescreen/asm/48x1_4_kernel.asm"
     88  26a1					      endif		;mk_48x1_4_on
     89  26a1
     90  26a1				  -	      ifconst	mk_48x1_5_on
     91  26a1				  -	      include	"titlescreen/asm/48x1_5_kernel.asm"
     92  26a1					      endif		;mk_48x1_5_on
     93  26a1
     94  26a1				  -	      ifconst	mk_48x1_6_on
     95  26a1				  -	      include	"titlescreen/asm/48x1_6_kernel.asm"
     96  26a1					      endif		;mk_48x1_6_on
     97  26a1
     98  26a1				  -	      ifconst	mk_48x1_7_on
     99  26a1				  -	      include	"titlescreen/asm/48x1_7_kernel.asm"
    100  26a1					      endif		;mk_48x1_7_on
    101  26a1
    102  26a1				  -	      ifconst	mk_48x1_8_on
    103  26a1				  -	      include	"titlescreen/asm/48x1_8_kernel.asm"
    104  26a1					      endif		;mk_48x1_8_on
    105  26a1
    106  26a1					      ifconst	mk_48x2_1_on
------- FILE titlescreen/asm/48x2_1_kernel.asm LEVEL 3 PASS 3
      0  26a1					      include	"titlescreen/asm/48x2_1_kernel.asm"
      1  26a1
      2  26a1				   draw_bmp_48x2_1
      3  26a1
      4  26a1		       a9 de		      lda	#<(bmp_48x2_1_colors-1+bmp_48x2_1_height-bmp_48x2_1_window)
      5  26a3				  -	      ifconst	bmp_48x2_1_index
      6  26a3				  -	      sec
      7  26a3				  -	      sbc	bmp_48x2_1_index
      8  26a3					      endif
      9  26a3		       85 f4		      sta	aux5+0
     10  26a5		       a9 fa		      lda	#>(bmp_48x2_1_colors-1+bmp_48x2_1_height-bmp_48x2_1_window)
     11  26a7		       85 f5		      sta	aux5+1
     12  26a9
     13  26a9		       a0 0b		      ldy	#11
     14  26ab				   bmp_48x2_1_pointersetup
     15  26ab		       b9 e0 f6 	      lda	bmp_48x2_1_values,y
     16  26ae		       99 96 00 	      sta	scorepointers,y
     17  26b1		       88		      dey
     18  26b2		       b9 e0 f6 	      lda	bmp_48x2_1_values,y
     19  26b5				  -	      ifconst	bmp_48x2_1_index
     20  26b5				  -	      sec
     21  26b5				  -	      sbc	bmp_48x2_1_index
     22  26b5					      endif
     23  26b5		       99 96 00 	      sta	scorepointers,y
     24  26b8		       88		      dey
     25  26b9		       10 f0		      bpl	bmp_48x2_1_pointersetup
     26  26bb
     27  26bb
     28  26bb		       a0 04		      ldy	#(bmp_48x2_1_window-1)
     29  26bd		       84 f1		      sty	aux2
     30  26bf
     31  26bf		       c8		      iny
     32  26c0		       b1 f4		      lda	(aux5),y
     33  26c2		       88		      dey
     34  26c3
     35  26c3		       85 06		      sta	COLUP0	;3
     36  26c5		       85 07		      sta	COLUP1	;3
     37  26c7		       85 2b		      sta	HMCLR	;3
     38  26c9
     39  26c9		       ad a0 f6 	      lda	titlescreencolor
     40  26cc		       85 08		      sta	COLUPF
     41  26ce
     42  26ce					      ifconst	bmp_48x2_1_background
     43  26ce		       ad e6 fa 	      lda	bmp_48x2_1_background
     44  26d1				  -	      else
     45  26d1				  -	      lda	titlescreencolor
     46  26d1					      endif
     47  26d1		       85 f3		      sta	aux4
     48  26d3					      ifconst	bmp_48x2_1_PF1
     49  26d3		       ad e4 fa 	      lda	bmp_48x2_1_PF1
     50  26d6				  -	      else
     51  26d6				  -	      lda	#0
     52  26d6				  -	      nop
     53  26d6					      endif
     54  26d6		       85 0e		      sta	PF1
     55  26d8
     56  26d8					      ifconst	bmp_48x2_1_PF2
     57  26d8		       ad e5 fa 	      lda	bmp_48x2_1_PF2
     58  26db				  -	      else
     59  26db				  -	      lda	#0
     60  26db				  -	      nop
     61  26db					      endif
     62  26db		       85 0f		      sta	PF2
     63  26dd
     64  26dd		       4c 67 f7 	      jmp	draw_bmp_48x2_X
     65  26e0
     66  26e0				   bmp_48x2_1_values
     67  26e0		       e7 fa		      .word.w	(bmp_48x2_1_00+#bmp_48x2_1_height-#bmp_48x2_1_window)
     68  26e2		       ed fa		      .word.w	(bmp_48x2_1_01+#bmp_48x2_1_height-#bmp_48x2_1_window)
     69  26e4		       f3 fa		      .word.w	(bmp_48x2_1_02+#bmp_48x2_1_height-#bmp_48x2_1_window)
     70  26e6		       f9 fa		      .word.w	(bmp_48x2_1_03+#bmp_48x2_1_height-#bmp_48x2_1_window)
     71  26e8		       00 fb		      .word.w	(bmp_48x2_1_04+#bmp_48x2_1_height-#bmp_48x2_1_window)
     72  26ea		       06 fb		      .word.w	(bmp_48x2_1_05+#bmp_48x2_1_height-#bmp_48x2_1_window)
     73  26ec
------- FILE titlescreen/asm/titlescreen.asm
    108  26ec					      endif		;mk_48x2_1_on
    109  26ec
    110  26ec				  -	      ifconst	mk_48x2_2_on
    111  26ec				  -	      include	"titlescreen/asm/48x2_2_kernel.asm"
    112  26ec					      endif		;mk_48x2_2_on
    113  26ec
    114  26ec				  -	      ifconst	mk_48x2_3_on
    115  26ec				  -	      include	"titlescreen/asm/48x2_3_kernel.asm"
    116  26ec					      endif		;mk_48x2_3_on
    117  26ec
    118  26ec				  -	      ifconst	mk_48x2_4_on
    119  26ec				  -	      include	"titlescreen/asm/48x2_4_kernel.asm"
    120  26ec					      endif		;mk_48x2_4_on
    121  26ec
    122  26ec				  -	      ifconst	mk_48x2_5_on
    123  26ec				  -	      include	"titlescreen/asm/48x2_5_kernel.asm"
    124  26ec					      endif		;mk_48x2_5_on
    125  26ec
    126  26ec				  -	      ifconst	mk_48x2_6_on
    127  26ec				  -	      include	"titlescreen/asm/48x2_6_kernel.asm"
    128  26ec					      endif		;mk_48x2_6_on
    129  26ec
    130  26ec				  -	      ifconst	mk_48x2_7_on
    131  26ec				  -	      include	"titlescreen/asm/48x2_7_kernel.asm"
    132  26ec					      endif		;mk_48x2_7_on
    133  26ec
    134  26ec				  -	      ifconst	mk_48x2_8_on
    135  26ec				  -	      include	"titlescreen/asm/48x2_8_kernel.asm"
    136  26ec					      endif		;mk_48x2_8_on
    137  26ec
    138  26ec					      ifconst	mk_48x1_X_on
------- FILE titlescreen/asm/48x1_X_kernel.asm LEVEL 3 PASS 3
      0  26ec					      include	"titlescreen/asm/48x1_X_kernel.asm"
      1  26ec				   draw_bmp_48x1_X
      2  26ec
      3  26ec		       a9 03		      lda	#3
      4  26ee		       85 04		      sta	NUSIZ0	;3=Player and Missile are drawn twice 32 clocks apart
      5  26f0		       85 05		      sta	NUSIZ1	;3=Player and Missile are drawn twice 32 clocks apart
      6  26f2
      7  26f2		       ba		      tsx
      8  26f3		       86 f6		      stx	stack1	;save the stack pointer
      9  26f5
     10  26f5		       20 78 f6 	      jsr	position48
     11  26f8
     12  26f8		       a9 03		      lda	#3	;2
     13  26fa		       85 25		      sta	VDELP0	;3
     14  26fc		       85 26		      sta	VDELP1	;3
     15  26fe
     16  26fe		       a9 01		      lda	#1	;2
     17  2700		       85 0a		      sta	CTRLPF	;3
     18  2702
     19  2702							;enough cycles have passed for the HMOV, so we can clear HMCLR
     20  2702		       85 2b		      sta	HMCLR
     21  2704
     22  2704		       85 02		      sta	WSYNC
     23  2706
     24  2706		       e6 9c		      inc	temp1	;5
     25  2708		       c6 9c		      dec	temp1	;5
     26  270a		       e6 9c		      inc	temp1	;5
     27  270c		       c6 9c		      dec	temp1	;5
     28  270e		       e6 9c		      inc	temp1	;5
     29  2710		       c6 9c		      dec	temp1	;5
     30  2712		       e6 9c		      inc	temp1	;5
     31  2714		       c6 9c		      dec	temp1	;5
     32  2716		       e6 9c		      inc	temp1	;5
     33  2718		       c6 9c		      dec	temp1	;5
     34  271a
      0  271a					      sleep	5
      1  271a				   .CYCLES    SET	5
      2  271a
      3  271a				  -	      IF	.CYCLES < 2
      4  271a				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  271a				  -	      ERR
      6  271a					      ENDIF
      7  271a
      8  271a					      IF	.CYCLES & 1
      9  271a					      IFNCONST	NO_ILLEGAL_OPCODES
     10  271a		       04 00		      nop	0
     11  271c				  -	      ELSE
     12  271c				  -	      bit	VSYNC
     13  271c					      ENDIF
     14  271c				   .CYCLES    SET	.CYCLES - 3
     15  271c					      ENDIF
     16  271c
     17  271c					      REPEAT	.CYCLES / 2
     18  271c		       ea		      nop
     19  271d					      REPEND
     36  271d
     37  271d		       c8		      iny
     38  271e
     39  271e		       4c 21 f7 	      jmp	pf48x1_X_loop_entry
     40  2721
     41  2721				  -	      if	>. != >[.+$2a]
     42  2721				  -	      align	256
     43  2721					      endif
     44  2721
     45  2721				   pf48x1_X_loop_entry
     46  2721				   pf48x1_X_loop
     47  2721		       88		      dey		;2
     48  2722		       84 f1		      sty	aux2	;3
     49  2724		       b1 96		      lda	(scorepointers+0),y	;5
     50  2726		       85 1b		      sta	GRP0	;3
     51  2728
     52  2728		       b1 98		      lda	(scorepointers+2),y	;5
     53  272a		       85 1c		      sta	GRP1	;3
     54  272c		       b1 9a		      lda	(scorepointers+4),y	;5
     55  272e		       85 1b		      sta	GRP0	;3
     56  2730
      0  2730					      sleep	2	; I could make this indirect, if we want to burn more rom
      1  2730				   .CYCLES    SET	2
      2  2730
      3  2730				  -	      IF	.CYCLES < 2
      4  2730				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  2730				  -	      ERR
      6  2730					      ENDIF
      7  2730
      8  2730				  -	      IF	.CYCLES & 1
      9  2730				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  2730				  -	      nop	0
     11  2730				  -	      ELSE
     12  2730				  -	      bit	VSYNC
     13  2730				  -	      ENDIF
     14  2730				  -.CYCLES    SET	.CYCLES - 3
     15  2730					      ENDIF
     16  2730
     17  2730					      REPEAT	.CYCLES / 2
     18  2730		       ea		      nop
     19  2731					      REPEND
     58  2731		       a5 f3		      lda	aux4	;3
     59  2733		       85 08		      sta	COLUPF	;3 this is a big fat waste...
     60  2735
     61  2735		       b3 a0		      lax	(scorepointers+10),y	;5
     62  2737		       b1 9e		      lda	(scorepointers+8),y	;5
     63  2739		       85 f7		      sta	stack2	;3
     64  273b		       b1 9c		      lda	(scorepointers+6),y	;5
     65  273d		       a4 f7		      ldy	stack2	;3
     66  273f
     67  273f		       85 1c		      sta	GRP1	;3
     68  2741		       84 1b		      sty	GRP0	;3
     69  2743		       86 1c		      stx	GRP1	;3
     70  2745		       84 1b		      sty	GRP0	;3
     71  2747
     72  2747		       a4 f1		      ldy	aux2	;3
     73  2749		       d0 d6		      bne	pf48x1_X_loop	;2/3
     74  274b
     75  274b				   pf48x1_X_codeend
     76  274b							;echo "critical code in 48x1 is ",(pf48x1_X_codeend-pf48x1_X_loop), " bytes long."
     77  274b
     78  274b		       a9 00		      lda	#0
     79  274d		       85 1b		      sta	GRP0
     80  274f		       85 1c		      sta	GRP1
     81  2751		       85 1b		      sta	GRP0
     82  2753		       85 1c		      sta	GRP1
     83  2755		       85 1f		      sta	ENABL
     84  2757		       85 1d		      sta	ENAM0
     85  2759		       85 25		      sta	VDELP0
     86  275b		       85 26		      sta	VDELP1
     87  275d		       85 0d		      sta	PF0
     88  275f		       85 0e		      sta	PF1
     89  2761		       85 0f		      sta	PF2
     90  2763
     91  2763		       a6 f6		      ldx	stack1	;restore the stack pointer
     92  2765		       9a		      txs
     93  2766		       60		      rts
------- FILE titlescreen/asm/titlescreen.asm
    140  2767					      endif		;mk_48x1_X_on
    141  2767
    142  2767					      ifconst	mk_48x2_X_on
------- FILE titlescreen/asm/48x2_X_kernel.asm LEVEL 3 PASS 3
      0  2767					      include	"titlescreen/asm/48x2_X_kernel.asm"
      1  2767				   draw_bmp_48x2_X
      2  2767
      3  2767		       a9 00		      lda	#0
      4  2769		       85 1b		      sta	GRP0
      5  276b		       85 1c		      sta	GRP1
      6  276d
      7  276d		       a9 03		      lda	#3
      8  276f		       85 04		      sta	NUSIZ0	;3=Player and Missile are drawn twice 32 clocks apart
      9  2771		       85 05		      sta	NUSIZ1	;3=Player and Missile are drawn twice 32 clocks apart
     10  2773
     11  2773		       ba		      tsx
     12  2774		       86 f6		      stx	stack1	;save the stack pointer
     13  2776
     14  2776		       20 78 f6 	      jsr	position48
     15  2779
     16  2779		       a9 03		      lda	#3	;2
     17  277b		       85 25		      sta	VDELP0	;3
     18  277d		       85 26		      sta	VDELP1	;3
     19  277f
     20  277f		       a9 01		      lda	#1	;2
     21  2781		       85 0a		      sta	CTRLPF	;3
     22  2783
     23  2783							;enough cycles have passed for the HMOV, so we can clear HMCLR
     24  2783		       85 2b		      sta	HMCLR
     25  2785		       85 02		      sta	WSYNC
     26  2787
     27  2787
     28  2787							;sleep (63)		;63
     29  2787		       e6 9c		      inc	temp1
     30  2789		       c6 9c		      dec	temp1
     31  278b		       e6 9c		      inc	temp1
     32  278d		       c6 9c		      dec	temp1
     33  278f		       e6 9c		      inc	temp1
     34  2791		       c6 9c		      dec	temp1
     35  2793		       e6 9c		      inc	temp1
     36  2795		       c6 9c		      dec	temp1
     37  2797		       e6 9c		      inc	temp1
     38  2799		       c6 9c		      dec	temp1
     39  279b		       e6 9c		      inc	temp1
     40  279d		       c6 9c		      dec	temp1
      0  279f					      sleep	3
      1  279f				   .CYCLES    SET	3
      2  279f
      3  279f				  -	      IF	.CYCLES < 2
      4  279f				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  279f				  -	      ERR
      6  279f					      ENDIF
      7  279f
      8  279f					      IF	.CYCLES & 1
      9  279f					      IFNCONST	NO_ILLEGAL_OPCODES
     10  279f		       04 00		      nop	0
     11  27a1				  -	      ELSE
     12  27a1				  -	      bit	VSYNC
     13  27a1					      ENDIF
     14  27a1				   .CYCLES    SET	.CYCLES - 3
     15  27a1					      ENDIF
     16  27a1
     17  27a1				  -	      REPEAT	.CYCLES / 2
     18  27a1				  -	      nop
     19  27a1					      REPEND
     42  27a1
     43  27a1		       a5 f3		      lda	aux4	;3
     44  27a3		       85 08		      sta	COLUPF	;3
     45  27a5
     46  27a5		       4c a8 f7 	      jmp	pf48x2_X_loop	;3
     47  27a8
     48  27a8				  -	      if	>. != >[.+$52]
     49  27a8				  -	      align	256
     50  27a8					      endif
     51  27a8
     52  27a8				   pf48x2_X_loop
     53  27a8
     54  27a8		       b1 96		      lda	(scorepointers+0),y	;5
     55  27aa		       85 1b		      sta	GRP0	;3
     56  27ac		       b1 98		      lda	(scorepointers+2),y	;5
     57  27ae		       85 1c		      sta	GRP1	;3
     58  27b0		       b1 9a		      lda	(scorepointers+4),y	;5
     59  27b2		       85 1b		      sta	GRP0	;3
     60  27b4
     61  27b4		       b3 a0		      lax	(scorepointers+10),y	;5
     62  27b6		       b1 9e		      lda	(scorepointers+8),y	;5
     63  27b8		       85 f7		      sta	stack2	;3
     64  27ba		       b1 9c		      lda	(scorepointers+6),y	;5
     65  27bc		       a4 f7		      ldy	stack2	;3
     66  27be
     67  27be		       85 1c		      sta	GRP1	;3
     68  27c0		       84 1b		      sty	GRP0	;3
     69  27c2		       86 1c		      stx	GRP1	;3
     70  27c4		       84 1b		      sty	GRP0	;3
     71  27c6
     72  27c6		       a4 f1		      ldy	aux2	;3
     73  27c8
     74  27c8		       b1 f4		      lda	(aux5),y	;5
     75  27ca		       85 91		      sta	missile0y	;3
     76  27cc
      0  27cc					      sleep	3
      1  27cc				   .CYCLES    SET	3
      2  27cc
      3  27cc				  -	      IF	.CYCLES < 2
      4  27cc				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  27cc				  -	      ERR
      6  27cc					      ENDIF
      7  27cc
      8  27cc					      IF	.CYCLES & 1
      9  27cc					      IFNCONST	NO_ILLEGAL_OPCODES
     10  27cc		       04 00		      nop	0
     11  27ce				  -	      ELSE
     12  27ce				  -	      bit	VSYNC
     13  27ce					      ENDIF
     14  27ce				   .CYCLES    SET	.CYCLES - 3
     15  27ce					      ENDIF
     16  27ce
     17  27ce				  -	      REPEAT	.CYCLES / 2
     18  27ce				  -	      nop
     19  27ce					      REPEND
     78  27ce
     79  27ce		       c6 f1		      dec	aux2	;5
     80  27d0
     81  27d0
     82  27d0		       b1 96		      lda	(scorepointers+0),y	;5
     83  27d2		       85 1b		      sta	GRP0	;3
     84  27d4		       b1 98		      lda	(scorepointers+2),y	;5
     85  27d6		       85 1c		      sta	GRP1	;3
     86  27d8		       b1 9a		      lda	(scorepointers+4),y	;5
     87  27da		       85 1b		      sta	GRP0	;3
     88  27dc
     89  27dc		       b3 a0		      lax	(scorepointers+10),y	;5
     90  27de		       b1 9e		      lda	(scorepointers+8),y	;5
     91  27e0		       85 f7		      sta	stack2	;3
     92  27e2		       b1 9c		      lda	(scorepointers+6),y	;5
     93  27e4		       a4 f7		      ldy	stack2	;3
     94  27e6
     95  27e6		       85 1c		      sta	GRP1	;3
     96  27e8		       84 1b		      sty	GRP0	;3
     97  27ea		       86 1c		      stx	GRP1	;3
     98  27ec		       84 1b		      sty	GRP0	;3
     99  27ee
      0  27ee					      sleep	4
      1  27ee				   .CYCLES    SET	4
      2  27ee
      3  27ee				  -	      IF	.CYCLES < 2
      4  27ee				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  27ee				  -	      ERR
      6  27ee					      ENDIF
      7  27ee
      8  27ee				  -	      IF	.CYCLES & 1
      9  27ee				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  27ee				  -	      nop	0
     11  27ee				  -	      ELSE
     12  27ee				  -	      bit	VSYNC
     13  27ee				  -	      ENDIF
     14  27ee				  -.CYCLES    SET	.CYCLES - 3
     15  27ee					      ENDIF
     16  27ee
     17  27ee					      REPEAT	.CYCLES / 2
     18  27ee		       ea		      nop
     17  27ee					      REPEND
     18  27ef		       ea		      nop
     19  27f0					      REPEND
    101  27f0
    102  27f0		       a5 91		      lda	missile0y
    103  27f2		       85 07		      sta	COLUP1
    104  27f4		       85 06		      sta	COLUP0
    105  27f6
    106  27f6		       a4 f1		      ldy	aux2	;3
    107  27f8		       10 ae		      bpl	pf48x2_X_loop	;2/3
    108  27fa
    109  27fa
    110  27fa				   pf48x2_X_codeend
    111  27fa							;echo "critical code in 48x2 is ",(pf48x2_X_codeend-pf48x2_X_loop), " bytes long."
    112  27fa
    113  27fa		       a9 00		      lda	#0
    114  27fc		       85 1b		      sta	GRP0
    115  27fe		       85 1c		      sta	GRP1
    116  2800		       85 1b		      sta	GRP0
    117  2802		       85 1c		      sta	GRP1
    118  2804		       85 25		      sta	VDELP0
    119  2806		       85 26		      sta	VDELP1
    120  2808		       85 0d		      sta	PF0
    121  280a		       85 0e		      sta	PF1
    122  280c		       85 0f		      sta	PF2
    123  280e
    124  280e		       a6 f6		      ldx	stack1	;restore the stack pointer
    125  2810		       9a		      txs
    126  2811		       60		      rts
------- FILE titlescreen/asm/titlescreen.asm
    144  2812					      endif		;mk_48x2_X_on
    145  2812
    146  2812
    147  2812					      ifconst	mk_96x2_1_on
------- FILE titlescreen/asm/96x2_1_kernel.asm LEVEL 3 PASS 3
      0  2812					      include	"titlescreen/asm/96x2_1_kernel.asm"
      1  2812				   draw_bmp_96x2_1
      2  2812
      3  2812				  -	      ifconst	bmp_96x2_1_index
      4  2812				  -	      lda	#(bmp_96x2_1_height-1)
      5  2812				  -	      sec
      6  2812				  -	      sbc	bmp_96x2_1_index
      7  2812				  -	      tay
      8  2812				  -	      sbc	#bmp_96x2_1_window
      9  2812				  -	      sta	temp1
     10  2812					      else
     11  2812		       a0 3b		      ldy	#(bmp_96x2_1_window-1)
     12  2814		       a9 ff		      lda	#255
     13  2816		       85 9c		      sta	temp1
     14  2818					      endif
     15  2818
     16  2818		       a9 03		      lda	#3
     17  281a		       85 04		      sta	NUSIZ0	;3=Player and Missile are drawn twice 32 clocks apart
     18  281c		       85 05		      sta	NUSIZ1	;3=Player and Missile are drawn twice 32 clocks apart
     19  281e		       a9 00		      lda	#0
     20  2820
     21  2820		       b9 0d fb 	      lda	bmp_96x2_1_colors,y	;4
     22  2823				  -	      ifconst	bmp_96x2_1_fade
     23  2823				  -	      and	bmp_96x2_1_fade
     24  2823					      endif
     25  2823		       85 06		      sta	COLUP0	;3
     26  2825		       85 07		      sta	COLUP1	;3
     27  2827		       85 2b		      sta	HMCLR	;3
     28  2829
     29  2829		       a5 82		      lda	titleframe
     30  282b		       29 01		      and	#1
     31  282d		       f0 03		      beq	jmp_pf96x2_1_frame0
     32  282f		       4c d9 f8 	      jmp	pf96x2_1_frame1
     33  2832				   jmp_pf96x2_1_frame0
     34  2832		       4c 35 f8 	      jmp	pf96x2_1_frame0
     35  2835
     36  2835				   pf96x2_1_frame0
     37  2835							;postion P0 and P1
     38  2835		       85 02		      sta	WSYNC
     39  2837		       a9 e0		      lda	#%11100000
     40  2839		       85 20		      sta	HMP0
     41  283b		       a9 10		      lda	#%00010000
     42  283d		       85 21		      sta	HMP1
     43  283f		       85 02		      sta	WSYNC
      0  2841					      sleep	28
      1  2841				   .CYCLES    SET	28
      2  2841
      3  2841				  -	      IF	.CYCLES < 2
      4  2841				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  2841				  -	      ERR
      6  2841					      ENDIF
      7  2841
      8  2841				  -	      IF	.CYCLES & 1
      9  2841				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  2841				  -	      nop	0
     11  2841				  -	      ELSE
     12  2841				  -	      bit	VSYNC
     13  2841				  -	      ENDIF
     14  2841				  -.CYCLES    SET	.CYCLES - 3
     15  2841					      ENDIF
     16  2841
     17  2841					      REPEAT	.CYCLES / 2
     18  2841		       ea		      nop
     17  2841					      REPEND
     18  2842		       ea		      nop
     17  2842					      REPEND
     18  2843		       ea		      nop
     17  2843					      REPEND
     18  2844		       ea		      nop
     17  2844					      REPEND
     18  2845		       ea		      nop
     17  2845					      REPEND
     18  2846		       ea		      nop
     17  2846					      REPEND
     18  2847		       ea		      nop
     17  2847					      REPEND
     18  2848		       ea		      nop
     17  2848					      REPEND
     18  2849		       ea		      nop
     17  2849					      REPEND
     18  284a		       ea		      nop
     17  284a					      REPEND
     18  284b		       ea		      nop
     17  284b					      REPEND
     18  284c		       ea		      nop
     17  284c					      REPEND
     18  284d		       ea		      nop
     17  284d					      REPEND
     18  284e		       ea		      nop
     19  284f					      REPEND
     45  284f		       85 10		      sta	RESP0
      0  2851					      sleep	14
      1  2851				   .CYCLES    SET	14
      2  2851
      3  2851				  -	      IF	.CYCLES < 2
      4  2851				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  2851				  -	      ERR
      6  2851					      ENDIF
      7  2851
      8  2851				  -	      IF	.CYCLES & 1
      9  2851				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  2851				  -	      nop	0
     11  2851				  -	      ELSE
     12  2851				  -	      bit	VSYNC
     13  2851				  -	      ENDIF
     14  2851				  -.CYCLES    SET	.CYCLES - 3
     15  2851					      ENDIF
     16  2851
     17  2851					      REPEAT	.CYCLES / 2
     18  2851		       ea		      nop
     17  2851					      REPEND
     18  2852		       ea		      nop
     17  2852					      REPEND
     18  2853		       ea		      nop
     17  2853					      REPEND
     18  2854		       ea		      nop
     17  2854					      REPEND
     18  2855		       ea		      nop
     17  2855					      REPEND
     18  2856		       ea		      nop
     17  2856					      REPEND
     18  2857		       ea		      nop
     19  2858					      REPEND
     47  2858		       85 11		      sta	RESP1
     48  285a		       85 02		      sta	WSYNC
     49  285c		       85 2a		      sta	HMOVE
     50  285e
     51  285e		       85 02		      sta	WSYNC
     52  2860		       85 2b		      sta	HMCLR
     53  2862		       85 02		      sta	WSYNC
     54  2864
      0  2864					      sleep	4
      1  2864				   .CYCLES    SET	4
      2  2864
      3  2864				  -	      IF	.CYCLES < 2
      4  2864				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  2864				  -	      ERR
      6  2864					      ENDIF
      7  2864
      8  2864				  -	      IF	.CYCLES & 1
      9  2864				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  2864				  -	      nop	0
     11  2864				  -	      ELSE
     12  2864				  -	      bit	VSYNC
     13  2864				  -	      ENDIF
     14  2864				  -.CYCLES    SET	.CYCLES - 3
     15  2864					      ENDIF
     16  2864
     17  2864					      REPEAT	.CYCLES / 2
     18  2864		       ea		      nop
     17  2864					      REPEND
     18  2865		       ea		      nop
     19  2866					      REPEND
     56  2866		       4c 69 f8 	      jmp	pfline_96x2_1_frame0
     57  2869							;align so our branch doesn't unexpectedly cross a page...
     58  2869				  -	      if	>. != >[.+$70]
     59  2869				  -	      align	256
     60  2869					      endif
     61  2869
     62  2869				   pfline_96x2_1_frame0
     63  2869		       a9 80		      lda	#$80	;2
     64  286b		       85 20		      sta	HMP0	;3
     65  286d		       85 21		      sta	HMP1	;3
     66  286f
     67  286f		       b9 b4 fc 	      lda	bmp_96x2_1_06,y	;4
     68  2872		       85 1c		      sta	GRP1	;3
     69  2874
     70  2874		       b9 49 fb 	      lda	bmp_96x2_1_00,y
     71  2877		       85 1b		      sta	GRP0
     72  2879		       b9 c1 fb 	      lda	bmp_96x2_1_02,y
     73  287c		       85 1b		      sta	GRP0
     74  287e		       b9 3c fc 	      lda	bmp_96x2_1_04,y
     75  2881		       85 1b		      sta	GRP0
     76  2883
      0  2883					      sleep	2
      1  2883				   .CYCLES    SET	2
      2  2883
      3  2883				  -	      IF	.CYCLES < 2
      4  2883				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  2883				  -	      ERR
      6  2883					      ENDIF
      7  2883
      8  2883				  -	      IF	.CYCLES & 1
      9  2883				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  2883				  -	      nop	0
     11  2883				  -	      ELSE
     12  2883				  -	      bit	VSYNC
     13  2883				  -	      ENDIF
     14  2883				  -.CYCLES    SET	.CYCLES - 3
     15  2883					      ENDIF
     16  2883
     17  2883					      REPEAT	.CYCLES / 2
     18  2883		       ea		      nop
     19  2884					      REPEND
     78  2884
     79  2884		       b9 3c fd 	      lda	bmp_96x2_1_08,y
     80  2887		       85 1c		      sta	GRP1
     81  2889		       b9 b4 fd 	      lda	bmp_96x2_1_10,y
     82  288c		       85 1c		      sta	GRP1
     83  288e
     84  288e		       b9 85 fb 	      lda	bmp_96x2_1_01,y
     85  2891		       85 1b		      sta	GRP0
     86  2893
      0  2893					      sleep	8
      1  2893				   .CYCLES    SET	8
      2  2893
      3  2893				  -	      IF	.CYCLES < 2
      4  2893				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  2893				  -	      ERR
      6  2893					      ENDIF
      7  2893
      8  2893				  -	      IF	.CYCLES & 1
      9  2893				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  2893				  -	      nop	0
     11  2893				  -	      ELSE
     12  2893				  -	      bit	VSYNC
     13  2893				  -	      ENDIF
     14  2893				  -.CYCLES    SET	.CYCLES - 3
     15  2893					      ENDIF
     16  2893
     17  2893					      REPEAT	.CYCLES / 2
     18  2893		       ea		      nop
     17  2893					      REPEND
     18  2894		       ea		      nop
     17  2894					      REPEND
     18  2895		       ea		      nop
     17  2895					      REPEND
     18  2896		       ea		      nop
     19  2897					      REPEND
     88  2897
     89  2897							;sta WSYNC	;=0
     90  2897		       85 2a		      sta	HMOVE	;3 - NORMAL HMOVE
     91  2899
     92  2899		       b9 0c fb 	      lda	bmp_96x2_1_colors-1,y	;4 - get the title color early and store it for later
     93  289c				  -	      ifconst	bmp_96x2_1_fade
     94  289c				  -	      and	bmp_96x2_1_fade
     95  289c					      else
      0  289c					      sleep	3
      1  289c				   .CYCLES    SET	3
      2  289c
      3  289c				  -	      IF	.CYCLES < 2
      4  289c				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  289c				  -	      ERR
      6  289c					      ENDIF
      7  289c
      8  289c					      IF	.CYCLES & 1
      9  289c					      IFNCONST	NO_ILLEGAL_OPCODES
     10  289c		       04 00		      nop	0
     11  289e				  -	      ELSE
     12  289e				  -	      bit	VSYNC
     13  289e					      ENDIF
     14  289e				   .CYCLES    SET	.CYCLES - 3
     15  289e					      ENDIF
     16  289e
     17  289e				  -	      REPEAT	.CYCLES / 2
     18  289e				  -	      nop
     19  289e					      REPEND
     97  289e					      endif
     98  289e		       aa		      tax
     99  289f
    100  289f		       a9 00		      lda	#0	;2
    101  28a1		       85 20		      sta	HMP0	;3
    102  28a3		       85 21		      sta	HMP1	;3
    103  28a5
      0  28a5					      sleep	7
      1  28a5				   .CYCLES    SET	7
      2  28a5
      3  28a5				  -	      IF	.CYCLES < 2
      4  28a5				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  28a5				  -	      ERR
      6  28a5					      ENDIF
      7  28a5
      8  28a5					      IF	.CYCLES & 1
      9  28a5					      IFNCONST	NO_ILLEGAL_OPCODES
     10  28a5		       04 00		      nop	0
     11  28a7				  -	      ELSE
     12  28a7				  -	      bit	VSYNC
     13  28a7					      ENDIF
     14  28a7				   .CYCLES    SET	.CYCLES - 3
     15  28a7					      ENDIF
     16  28a7
     17  28a7					      REPEAT	.CYCLES / 2
     18  28a7		       ea		      nop
     17  28a7					      REPEND
     18  28a8		       ea		      nop
     19  28a9					      REPEND
    105  28a9
    106  28a9		       b9 00 fd 	      lda	bmp_96x2_1_07,y
    107  28ac		       85 1c		      sta	GRP1
    108  28ae
    109  28ae		       b9 00 fc 	      lda	bmp_96x2_1_03,y	;5
    110  28b1		       85 1b		      sta	GRP0	;3 =  8
    111  28b3		       b9 78 fc 	      lda	bmp_96x2_1_05,y	;5
    112  28b6		       85 1b		      sta	GRP0	;3 =  8
    113  28b8
      0  28b8					      sleep	2
      1  28b8				   .CYCLES    SET	2
      2  28b8
      3  28b8				  -	      IF	.CYCLES < 2
      4  28b8				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  28b8				  -	      ERR
      6  28b8					      ENDIF
      7  28b8
      8  28b8				  -	      IF	.CYCLES & 1
      9  28b8				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  28b8				  -	      nop	0
     11  28b8				  -	      ELSE
     12  28b8				  -	      bit	VSYNC
     13  28b8				  -	      ENDIF
     14  28b8				  -.CYCLES    SET	.CYCLES - 3
     15  28b8					      ENDIF
     16  28b8
     17  28b8					      REPEAT	.CYCLES / 2
     18  28b8		       ea		      nop
     19  28b9					      REPEND
    115  28b9
    116  28b9		       b9 78 fd 	      lda	bmp_96x2_1_09,y	;5
    117  28bc		       85 1c		      sta	GRP1	;3 =  8
    118  28be		       b9 00 fe 	      lda	bmp_96x2_1_11,y	;5
    119  28c1		       85 1c		      sta	GRP1	;3 =  8
    120  28c3
      0  28c3					      sleep	2
      1  28c3				   .CYCLES    SET	2
      2  28c3
      3  28c3				  -	      IF	.CYCLES < 2
      4  28c3				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  28c3				  -	      ERR
      6  28c3					      ENDIF
      7  28c3
      8  28c3				  -	      IF	.CYCLES & 1
      9  28c3				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  28c3				  -	      nop	0
     11  28c3				  -	      ELSE
     12  28c3				  -	      bit	VSYNC
     13  28c3				  -	      ENDIF
     14  28c3				  -.CYCLES    SET	.CYCLES - 3
     15  28c3					      ENDIF
     16  28c3
     17  28c3					      REPEAT	.CYCLES / 2
     18  28c3		       ea		      nop
     19  28c4					      REPEND
    122  28c4		       86 07		      stx	COLUP1
    123  28c6		       86 06		      stx	COLUP0
    124  28c8
    125  28c8		       85 2a		      sta	HMOVE	;3 - CYCLE 74 HMOVE
      0  28ca					      sleep	2
      1  28ca				   .CYCLES    SET	2
      2  28ca
      3  28ca				  -	      IF	.CYCLES < 2
      4  28ca				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  28ca				  -	      ERR
      6  28ca					      ENDIF
      7  28ca
      8  28ca				  -	      IF	.CYCLES & 1
      9  28ca				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  28ca				  -	      nop	0
     11  28ca				  -	      ELSE
     12  28ca				  -	      bit	VSYNC
     13  28ca				  -	      ENDIF
     14  28ca				  -.CYCLES    SET	.CYCLES - 3
     15  28ca					      ENDIF
     16  28ca
     17  28ca					      REPEAT	.CYCLES / 2
     18  28ca		       ea		      nop
     19  28cb					      REPEND
    127  28cb		       88		      dey
    128  28cc
    129  28cc		       c4 9c		      cpy	temp1	;3
    130  28ce		       d0 99		      bne	pfline_96x2_1_frame0	;2/3
    131  28d0
    132  28d0				   pf96x2_1_0codeend
    133  28d0							;echo "critical code #1 in 96x2_1 is ",(pf96x2_1_0codeend-pfline_96x2_1_frame0), " bytes long."
    134  28d0
    135  28d0		       a9 00		      lda	#0
    136  28d2		       85 1b		      sta	GRP0
    137  28d4		       85 1c		      sta	GRP1
    138  28d6		       4c 7e f9 	      jmp	pfdone_96x2_1
    139  28d9
    140  28d9
    141  28d9				   pf96x2_1_frame1
    142  28d9
    143  28d9							;postion P0 and P1
    144  28d9		       85 02		      sta	WSYNC
    145  28db		       a9 20		      lda	#%00100000
    146  28dd		       85 20		      sta	HMP0
    147  28df		       a9 00		      lda	#0
    148  28e1		       a9 f0		      lda	#%11110000
    149  28e3		       85 21		      sta	HMP1
    150  28e5		       85 02		      sta	WSYNC
      0  28e7					      sleep	32
      1  28e7				   .CYCLES    SET	32
      2  28e7
      3  28e7				  -	      IF	.CYCLES < 2
      4  28e7				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  28e7				  -	      ERR
      6  28e7					      ENDIF
      7  28e7
      8  28e7				  -	      IF	.CYCLES & 1
      9  28e7				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  28e7				  -	      nop	0
     11  28e7				  -	      ELSE
     12  28e7				  -	      bit	VSYNC
     13  28e7				  -	      ENDIF
     14  28e7				  -.CYCLES    SET	.CYCLES - 3
     15  28e7					      ENDIF
     16  28e7
     17  28e7					      REPEAT	.CYCLES / 2
     18  28e7		       ea		      nop
     17  28e7					      REPEND
     18  28e8		       ea		      nop
     17  28e8					      REPEND
     18  28e9		       ea		      nop
     17  28e9					      REPEND
     18  28ea		       ea		      nop
     17  28ea					      REPEND
     18  28eb		       ea		      nop
     17  28eb					      REPEND
     18  28ec		       ea		      nop
     17  28ec					      REPEND
     18  28ed		       ea		      nop
     17  28ed					      REPEND
     18  28ee		       ea		      nop
     17  28ee					      REPEND
     18  28ef		       ea		      nop
     17  28ef					      REPEND
     18  28f0		       ea		      nop
     17  28f0					      REPEND
     18  28f1		       ea		      nop
     17  28f1					      REPEND
     18  28f2		       ea		      nop
     17  28f2					      REPEND
     18  28f3		       ea		      nop
     17  28f3					      REPEND
     18  28f4		       ea		      nop
     17  28f4					      REPEND
     18  28f5		       ea		      nop
     17  28f5					      REPEND
     18  28f6		       ea		      nop
     19  28f7					      REPEND
    152  28f7		       85 10		      sta	RESP0
      0  28f9					      sleep	12
      1  28f9				   .CYCLES    SET	12
      2  28f9
      3  28f9				  -	      IF	.CYCLES < 2
      4  28f9				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  28f9				  -	      ERR
      6  28f9					      ENDIF
      7  28f9
      8  28f9				  -	      IF	.CYCLES & 1
      9  28f9				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  28f9				  -	      nop	0
     11  28f9				  -	      ELSE
     12  28f9				  -	      bit	VSYNC
     13  28f9				  -	      ENDIF
     14  28f9				  -.CYCLES    SET	.CYCLES - 3
     15  28f9					      ENDIF
     16  28f9
     17  28f9					      REPEAT	.CYCLES / 2
     18  28f9		       ea		      nop
     17  28f9					      REPEND
     18  28fa		       ea		      nop
     17  28fa					      REPEND
     18  28fb		       ea		      nop
     17  28fb					      REPEND
     18  28fc		       ea		      nop
     17  28fc					      REPEND
     18  28fd		       ea		      nop
     17  28fd					      REPEND
     18  28fe		       ea		      nop
     19  28ff					      REPEND
    154  28ff		       85 11		      sta	RESP1
    155  2901		       85 02		      sta	WSYNC
    156  2903		       85 2a		      sta	HMOVE
    157  2905
    158  2905		       85 02		      sta	WSYNC
    159  2907		       85 2b		      sta	HMCLR
    160  2909
    161  2909
    162  2909
    163  2909		       85 02		      sta	WSYNC
      0  290b					      sleep	3
      1  290b				   .CYCLES    SET	3
      2  290b
      3  290b				  -	      IF	.CYCLES < 2
      4  290b				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  290b				  -	      ERR
      6  290b					      ENDIF
      7  290b
      8  290b					      IF	.CYCLES & 1
      9  290b					      IFNCONST	NO_ILLEGAL_OPCODES
     10  290b		       04 00		      nop	0
     11  290d				  -	      ELSE
     12  290d				  -	      bit	VSYNC
     13  290d					      ENDIF
     14  290d				   .CYCLES    SET	.CYCLES - 3
     15  290d					      ENDIF
     16  290d
     17  290d				  -	      REPEAT	.CYCLES / 2
     18  290d				  -	      nop
     19  290d					      REPEND
    165  290d		       4c 10 f9 	      jmp	pfline_96x2_1_frame1
    166  2910
    167  2910							;align so our branch doesn't unexpectedly cross a page...
    168  2910				  -	      if	>. != >[.+$70]
    169  2910				  -	      align	256
    170  2910					      endif
    171  2910
    172  2910				   pfline_96x2_1_frame1
    173  2910
    174  2910		       85 2a		      sta	HMOVE
    175  2912
    176  2912		       b9 00 fd 	      lda	bmp_96x2_1_07,y	;4
    177  2915		       85 1c		      sta	GRP1	;3
    178  2917
    179  2917		       a9 00		      lda	#$0	;2
    180  2919		       85 20		      sta	HMP0	;3
    181  291b		       85 21		      sta	HMP1	;3
    182  291d
    183  291d		       b9 85 fb 	      lda	bmp_96x2_1_01,y
    184  2920		       8d 1b 00 	      sta.w	GRP0
    185  2923		       b9 00 fc 	      lda	bmp_96x2_1_03,y
    186  2926		       85 1b		      sta	GRP0
    187  2928		       b9 78 fc 	      lda	bmp_96x2_1_05,y
    188  292b		       85 1b		      sta	GRP0
    189  292d
      0  292d					      sleep	2
      1  292d				   .CYCLES    SET	2
      2  292d
      3  292d				  -	      IF	.CYCLES < 2
      4  292d				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  292d				  -	      ERR
      6  292d					      ENDIF
      7  292d
      8  292d				  -	      IF	.CYCLES & 1
      9  292d				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  292d				  -	      nop	0
     11  292d				  -	      ELSE
     12  292d				  -	      bit	VSYNC
     13  292d				  -	      ENDIF
     14  292d				  -.CYCLES    SET	.CYCLES - 3
     15  292d					      ENDIF
     16  292d
     17  292d					      REPEAT	.CYCLES / 2
     18  292d		       ea		      nop
     19  292e					      REPEND
    191  292e
    192  292e		       b9 78 fd 	      lda	bmp_96x2_1_09,y
    193  2931		       85 1c		      sta	GRP1
    194  2933		       b9 00 fe 	      lda	bmp_96x2_1_11,y
    195  2936		       85 1c		      sta	GRP1
    196  2938
    197  2938		       b9 49 fb 	      lda	bmp_96x2_1_00,y
    198  293b		       85 1b		      sta	GRP0
    199  293d
    200  293d		       8d 2a 00 	      sta.w	HMOVE	;3 - cycle 74
    201  2940
    202  2940							;sta WSYNC	;=0 -----------------------------------------
    203  2940
    204  2940		       b9 b4 fc 	      lda	bmp_96x2_1_06,y
    205  2943		       85 1c		      sta	GRP1
    206  2945
      0  2945					      sleep	8
      1  2945				   .CYCLES    SET	8
      2  2945
      3  2945				  -	      IF	.CYCLES < 2
      4  2945				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  2945				  -	      ERR
      6  2945					      ENDIF
      7  2945
      8  2945				  -	      IF	.CYCLES & 1
      9  2945				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  2945				  -	      nop	0
     11  2945				  -	      ELSE
     12  2945				  -	      bit	VSYNC
     13  2945				  -	      ENDIF
     14  2945				  -.CYCLES    SET	.CYCLES - 3
     15  2945					      ENDIF
     16  2945
     17  2945					      REPEAT	.CYCLES / 2
     18  2945		       ea		      nop
     17  2945					      REPEND
     18  2946		       ea		      nop
     17  2946					      REPEND
     18  2947		       ea		      nop
     17  2947					      REPEND
     18  2948		       ea		      nop
     19  2949					      REPEND
    208  2949
    209  2949		       b9 0c fb 	      lda	bmp_96x2_1_colors-1,y	;get the title color early and store it for later
    210  294c		       aa		      tax		;2
    211  294d
      0  294d					      sleep	3
      1  294d				   .CYCLES    SET	3
      2  294d
      3  294d				  -	      IF	.CYCLES < 2
      4  294d				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  294d				  -	      ERR
      6  294d					      ENDIF
      7  294d
      8  294d					      IF	.CYCLES & 1
      9  294d					      IFNCONST	NO_ILLEGAL_OPCODES
     10  294d		       04 00		      nop	0
     11  294f				  -	      ELSE
     12  294f				  -	      bit	VSYNC
     13  294f					      ENDIF
     14  294f				   .CYCLES    SET	.CYCLES - 3
     15  294f					      ENDIF
     16  294f
     17  294f				  -	      REPEAT	.CYCLES / 2
     18  294f				  -	      nop
     19  294f					      REPEND
    213  294f
    214  294f		       a9 80		      lda	#$80	;2
    215  2951		       85 20		      sta	HMP0	;3
    216  2953		       85 21		      sta	HMP1	;3
    217  2955
    218  2955
    219  2955		       b9 c1 fb 	      lda	bmp_96x2_1_02,y	;5
    220  2958		       85 1b		      sta	GRP0	;3 =  8
    221  295a
    222  295a		       b9 3c fc 	      lda	bmp_96x2_1_04,y	;5
    223  295d		       85 1b		      sta	GRP0	;3 =  8
    224  295f
      0  295f					      sleep	2
      1  295f				   .CYCLES    SET	2
      2  295f
      3  295f				  -	      IF	.CYCLES < 2
      4  295f				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  295f				  -	      ERR
      6  295f					      ENDIF
      7  295f
      8  295f				  -	      IF	.CYCLES & 1
      9  295f				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  295f				  -	      nop	0
     11  295f				  -	      ELSE
     12  295f				  -	      bit	VSYNC
     13  295f				  -	      ENDIF
     14  295f				  -.CYCLES    SET	.CYCLES - 3
     15  295f					      ENDIF
     16  295f
     17  295f					      REPEAT	.CYCLES / 2
     18  295f		       ea		      nop
     19  2960					      REPEND
    226  2960
    227  2960		       b9 3c fd 	      lda	bmp_96x2_1_08,y	;5
    228  2963		       85 1c		      sta	GRP1	;3 =  8
    229  2965
    230  2965		       b9 b4 fd 	      lda	bmp_96x2_1_10,y	;5
    231  2968		       85 1c		      sta	GRP1	;3 =  8
    232  296a
      0  296a					      sleep	4
      1  296a				   .CYCLES    SET	4
      2  296a
      3  296a				  -	      IF	.CYCLES < 2
      4  296a				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  296a				  -	      ERR
      6  296a					      ENDIF
      7  296a
      8  296a				  -	      IF	.CYCLES & 1
      9  296a				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  296a				  -	      nop	0
     11  296a				  -	      ELSE
     12  296a				  -	      bit	VSYNC
     13  296a				  -	      ENDIF
     14  296a				  -.CYCLES    SET	.CYCLES - 3
     15  296a					      ENDIF
     16  296a
     17  296a					      REPEAT	.CYCLES / 2
     18  296a		       ea		      nop
     17  296a					      REPEND
     18  296b		       ea		      nop
     19  296c					      REPEND
    234  296c
    235  296c		       88		      dey
    236  296d
    237  296d		       8a		      txa
    238  296e				  -	      ifconst	bmp_96x2_1_fade
    239  296e				  -	      and	bmp_96x2_1_fade
    240  296e					      else
      0  296e					      sleep	3
      1  296e				   .CYCLES    SET	3
      2  296e
      3  296e				  -	      IF	.CYCLES < 2
      4  296e				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  296e				  -	      ERR
      6  296e					      ENDIF
      7  296e
      8  296e					      IF	.CYCLES & 1
      9  296e					      IFNCONST	NO_ILLEGAL_OPCODES
     10  296e		       04 00		      nop	0
     11  2970				  -	      ELSE
     12  2970				  -	      bit	VSYNC
     13  2970					      ENDIF
     14  2970				   .CYCLES    SET	.CYCLES - 3
     15  2970					      ENDIF
     16  2970
     17  2970				  -	      REPEAT	.CYCLES / 2
     18  2970				  -	      nop
     19  2970					      REPEND
    242  2970					      endif
    243  2970		       85 07		      sta	COLUP1	;3
    244  2972		       85 06		      sta	COLUP0	;3
    245  2974
    246  2974		       c4 9c		      cpy	temp1	;2
    247  2976		       d0 98		      bne	pfline_96x2_1_frame1	;2/3
    248  2978
    249  2978				   pf96x2_1_1codeend
    250  2978							;echo "critical code #2 in 96x2_1 is ",(pf96x2_1_1codeend-pfline_96x2_1_frame1), " bytes long."
    251  2978
    252  2978		       a9 00		      lda	#0
    253  297a		       85 1b		      sta	GRP0
    254  297c		       85 1c		      sta	GRP1
    255  297e
    256  297e				   pfdone_96x2_1
    257  297e		       85 02		      sta	WSYNC	; debug
    258  2980
    259  2980		       60		      rts
------- FILE titlescreen/asm/titlescreen.asm
    149  2981					      endif		;mk_96x2_1_on
    150  2981
    151  2981				  -	      ifconst	mk_96x2_2_on
    152  2981				  -	      include	"titlescreen/asm/96x2_2_kernel.asm"
    153  2981					      endif		;mk_96x2_2_on
    154  2981
    155  2981				  -	      ifconst	mk_96x2_3_on
    156  2981				  -	      include	"titlescreen/asm/96x2_3_kernel.asm"
    157  2981					      endif		;mk_96x2_3_on
    158  2981
    159  2981				  -	      ifconst	mk_96x2_4_on
    160  2981				  -	      include	"titlescreen/asm/96x2_4_kernel.asm"
    161  2981					      endif		;mk_96x2_4_on
    162  2981
    163  2981				  -	      ifconst	mk_96x2_5_on
    164  2981				  -	      include	"titlescreen/asm/96x2_5_kernel.asm"
    165  2981					      endif		;mk_96x2_5_on
    166  2981
    167  2981				  -	      ifconst	mk_96x2_6_on
    168  2981				  -	      include	"titlescreen/asm/96x2_6_kernel.asm"
    169  2981					      endif		;mk_96x2_6_on
    170  2981
    171  2981				  -	      ifconst	mk_96x2_7_on
    172  2981				  -	      include	"titlescreen/asm/96x2_7_kernel.asm"
    173  2981					      endif		;mk_96x2_7_on
    174  2981
    175  2981				  -	      ifconst	mk_96x2_8_on
    176  2981				  -	      include	"titlescreen/asm/96x2_8_kernel.asm"
    177  2981					      endif		;mk_96x2_8_on
    178  2981
    179  2981					      ifconst	mk_score_on
------- FILE titlescreen/asm/score_kernel.asm LEVEL 3 PASS 3
      0  2981					      include	"titlescreen/asm/score_kernel.asm"
      1  2981							; The batari Basic score kernel
      2  2981							; This minikernel is not under the same license as the rest of the
      3  2981							; titlescreen code. Refer to the bB license before you use this in
      4  2981							; a non-bB program.
      5  2981
      6  2981				   draw_score_display
      7  2981
      8  2981		       a7 93		      lax	score+0
      9  2983		       20 43 fa 	      jsr	miniscorepointerset
     10  2986		       84 9e		      sty	scorepointers+8
     11  2988		       86 96		      stx	scorepointers+0
     12  298a		       a7 94		      lax	score+1
     13  298c		       20 43 fa 	      jsr	miniscorepointerset
     14  298f		       84 9a		      sty	scorepointers+4
     15  2991		       86 9c		      stx	scorepointers+6
     16  2993		       a7 95		      lax	score+2
     17  2995		       20 43 fa 	      jsr	miniscorepointerset
     18  2998		       84 a0		      sty	scorepointers+10
     19  299a		       86 98		      stx	scorepointers+2
     20  299c
     21  299c		       85 2b		      sta	HMCLR
     22  299e		       ba		      tsx
     23  299f		       86 f6		      stx	stack1
     24  29a1							;ldx #$20
     25  29a1		       a2 60		      ldx	#$60
     26  29a3		       86 20		      stx	HMP0
     27  29a5
     28  29a5		       a2 00		      ldx	#0
     29  29a7		       85 02		      sta	WSYNC	;   0
     30  29a9		       86 1b		      STx	GRP0	; 3 3
     31  29ab		       86 1c		      STx	GRP1	; 3 6 seems to be needed because of vdel
     32  29ad
      0  29ad					      sleep	7	; 7 13
      1  29ad				   .CYCLES    SET	7
      2  29ad
      3  29ad				  -	      IF	.CYCLES < 2
      4  29ad				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  29ad				  -	      ERR
      6  29ad					      ENDIF
      7  29ad
      8  29ad					      IF	.CYCLES & 1
      9  29ad					      IFNCONST	NO_ILLEGAL_OPCODES
     10  29ad		       04 00		      nop	0
     11  29af				  -	      ELSE
     12  29af				  -	      bit	VSYNC
     13  29af					      ENDIF
     14  29af				   .CYCLES    SET	.CYCLES - 3
     15  29af					      ENDIF
     16  29af
     17  29af					      REPEAT	.CYCLES / 2
     18  29af		       ea		      nop
     17  29af					      REPEND
     18  29b0		       ea		      nop
     19  29b1					      REPEND
     34  29b1
     35  29b1		       a9 fe		      lda	#>miniscoretable	; 2 15
     36  29b3		       95 97		      sta	scorepointers+1,x	; 4 19
     37  29b5		       95 99		      sta	scorepointers+3,x	; 4 23
     38  29b7		       95 9b		      sta	scorepointers+5,x	; 4 27
     39  29b9		       95 9d		      sta	scorepointers+7,x	; 4 31
     40  29bb		       95 9f		      sta	scorepointers+9,x	; 4 35
     41  29bd		       95 a1		      sta	scorepointers+11,x	; 4 39
     42  29bf
     43  29bf		       a0 07		      LDY	#7	; 2 41
     44  29c1		       85 10		      STA	RESP0	; 3 44
     45  29c3		       85 11		      STA	RESP1	; 3 47
     46  29c5
     47  29c5		       a9 03		      LDA	#$03	; 2 49
     48  29c7		       85 04		      STA	NUSIZ0	; 3 52
     49  29c9		       95 05		      STA	NUSIZ1,x	; 4 56
     50  29cb		       85 25		      STA	VDELP0	; 3 59
     51  29cd		       85 26		      STA	VDELP1	; 3 62
     52  29cf							;LDA #$30		; 2 64
     53  29cf		       a9 70		      LDA	#$70	; 2 64
     54  29d1		       85 21		      STA	HMP1	; 3 67
     55  29d3		       a5 a3		      LDA	scorecolor	; 3 70
     56  29d5		       85 2a		      STA	HMOVE	; cycle 73 ?
     57  29d7				  -	      ifconst	score_kernel_fade
     58  29d7				  -	      and	score_kernel_fade
     59  29d7					      endif
     60  29d7
     61  29d7		       85 06		      STA	COLUP0
     62  29d9		       85 07		      STA	COLUP1
     63  29db				  -	      ifconst	scorefade
     64  29db				  -	      STA	stack2	; scorefade
     65  29db					      endif
     66  29db		       b1 96		      lda	(scorepointers),y
     67  29dd		       85 1b		      sta	GRP0
     68  29df		       b1 9e		      lda	(scorepointers+8),y
     69  29e1		       85 02		      sta	WSYNC
      0  29e3					      sleep	2
      1  29e3				   .CYCLES    SET	2
      2  29e3
      3  29e3				  -	      IF	.CYCLES < 2
      4  29e3				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  29e3				  -	      ERR
      6  29e3					      ENDIF
      7  29e3
      8  29e3				  -	      IF	.CYCLES & 1
      9  29e3				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  29e3				  -	      nop	0
     11  29e3				  -	      ELSE
     12  29e3				  -	      bit	VSYNC
     13  29e3				  -	      ENDIF
     14  29e3				  -.CYCLES    SET	.CYCLES - 3
     15  29e3					      ENDIF
     16  29e3
     17  29e3					      REPEAT	.CYCLES / 2
     18  29e3		       ea		      nop
     19  29e4					      REPEND
     71  29e4		       4c 0b fa 	      jmp	beginscoreloop
     72  29e7
     73  29e7					      if	((<*)>$28)
     74  2a00		       00 00 00 00*	      align	256	; kludge that potentially wastes space!  should be fixed!
     75  2a00					      endif
     76  2a00
     77  2a00				   scoreloop2
     78  2a00				  -	      ifconst	scorefade
     79  2a00				  -	      lda	stack2
     80  2a00				  -	      sta	COLUP0
     81  2a00				  -	      sta	COLUP1
     82  2a00					      else
      0  2a00					      sleep	9
      1  2a00				   .CYCLES    SET	9
      2  2a00
      3  2a00				  -	      IF	.CYCLES < 2
      4  2a00				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  2a00				  -	      ERR
      6  2a00					      ENDIF
      7  2a00
      8  2a00					      IF	.CYCLES & 1
      9  2a00					      IFNCONST	NO_ILLEGAL_OPCODES
     10  2a00		       04 00		      nop	0
     11  2a02				  -	      ELSE
     12  2a02				  -	      bit	VSYNC
     13  2a02					      ENDIF
     14  2a02				   .CYCLES    SET	.CYCLES - 3
     15  2a02					      ENDIF
     16  2a02
     17  2a02					      REPEAT	.CYCLES / 2
     18  2a02		       ea		      nop
     17  2a02					      REPEND
     18  2a03		       ea		      nop
     17  2a03					      REPEND
     18  2a04		       ea		      nop
     19  2a05					      REPEND
     84  2a05					      endif
     85  2a05		       b1 96		      lda	(scorepointers),y	;+5  68  204
     86  2a07		       85 1b		      sta	GRP0	;+3  71  213	   D1	  --	  --	 --
     87  2a09		       b1 9e		      lda	(scorepointers+$8),y	;+5   5   15
     88  2a0b							; cycle 0
     89  2a0b				   beginscoreloop
     90  2a0b		       85 1c		      sta	GRP1	;+3   8   24	   D1	  D1	  D2	 --
     91  2a0d		       b1 9c		      lda	(scorepointers+$6),y	;+5  13   39
     92  2a0f		       85 1b		      sta	GRP0	;+3  16   48	   D3	  D1	  D2	 D2
     93  2a11		       b3 98		      lax	(scorepointers+$2),y	;+5  29   87
     94  2a13		       9a		      txs
     95  2a14		       b3 9a		      lax	(scorepointers+$4),y	;+5  36  108
     96  2a16
     97  2a16				  -	      ifconst	scorefade
     98  2a16				  -	      dec	stack2
     99  2a16					      else
      0  2a16					      sleep	5
      1  2a16				   .CYCLES    SET	5
      2  2a16
      3  2a16				  -	      IF	.CYCLES < 2
      4  2a16				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  2a16				  -	      ERR
      6  2a16					      ENDIF
      7  2a16
      8  2a16					      IF	.CYCLES & 1
      9  2a16					      IFNCONST	NO_ILLEGAL_OPCODES
     10  2a16		       04 00		      nop	0
     11  2a18				  -	      ELSE
     12  2a18				  -	      bit	VSYNC
     13  2a18					      ENDIF
     14  2a18				   .CYCLES    SET	.CYCLES - 3
     15  2a18					      ENDIF
     16  2a18
     17  2a18					      REPEAT	.CYCLES / 2
     18  2a18		       ea		      nop
     19  2a19					      REPEND
    101  2a19					      endif
      0  2a19					      sleep	2
      1  2a19				   .CYCLES    SET	2
      2  2a19
      3  2a19				  -	      IF	.CYCLES < 2
      4  2a19				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  2a19				  -	      ERR
      6  2a19					      ENDIF
      7  2a19
      8  2a19				  -	      IF	.CYCLES & 1
      9  2a19				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  2a19				  -	      nop	0
     11  2a19				  -	      ELSE
     12  2a19				  -	      bit	VSYNC
     13  2a19				  -	      ENDIF
     14  2a19				  -.CYCLES    SET	.CYCLES - 3
     15  2a19					      ENDIF
     16  2a19
     17  2a19					      REPEAT	.CYCLES / 2
     18  2a19		       ea		      nop
     19  2a1a					      REPEND
    103  2a1a
    104  2a1a		       b1 a0		      lda	(scorepointers+$A),y	;+5  21   63 DIGIT 6
    105  2a1c		       86 1c		      stx	GRP1	;+3  44  132	   D3	  D3	  D4	 D2!
    106  2a1e		       ba		      tsx
    107  2a1f		       86 1b		      stx	GRP0	;+3  47  141	   D5	  D3!	  D4	 D4
    108  2a21		       85 1c		      sta	GRP1	;+3  50  150	   D5	  D5	  D6	 D4!
    109  2a23
    110  2a23		       84 1b		      sty	GRP0	;+3  53  159	   D4*	  D5!	  D6	 D6
    111  2a25		       88		      dey
    112  2a26		       10 d8		      bpl	scoreloop2	;+2  60  180
    113  2a28				   scoreloop2end
    114  2a28
    115  2a28							;echo "critical size: ",(scoreloop2end-scoreloop2)
    116  2a28
    117  2a28
    118  2a28		       a6 f6		      ldx	stack1
    119  2a2a		       9a		      txs
    120  2a2b
    121  2a2b		       a9 00		      LDA	#0
    122  2a2d		       85 0e		      sta	PF1
    123  2a2f		       85 1b		      STA	GRP0
    124  2a31		       85 1c		      STA	GRP1
    125  2a33		       85 25		      STA	VDELP0
    126  2a35		       85 26		      STA	VDELP1
    127  2a37		       85 04		      STA	NUSIZ0
    128  2a39		       85 05		      STA	NUSIZ1
    129  2a3b
    130  2a3b							; clear out the score pointers in case they're stolen DPC variables...
    131  2a3b		       a2 0b		      ldx	#11
    132  2a3d				   clearscoreploop
    133  2a3d		       95 96		      sta	scorepointers,x
    134  2a3f		       ca		      dex
    135  2a40		       10 fb		      bpl	clearscoreploop
    136  2a42
    137  2a42
    138  2a42							;;ldy temp3
    139  2a42							;ldy scorepointers+8
    140  2a42							;sty scorepointers+3
    141  2a42
    142  2a42							;;ldy temp5
    143  2a42							;ldy scorepointers+10
    144  2a42							;sty scorepointers+5
    145  2a42		       60		      rts
    146  2a43
    147  2a43				   miniscorepointerset
    148  2a43		       29 0f		      and	#$0F
    149  2a45		       0a		      asl
    150  2a46		       0a		      asl
    151  2a47		       0a		      asl
    152  2a48		       69 3d		      adc	#<miniscoretable
    153  2a4a		       a8		      tay
    154  2a4b		       8a		      txa
    155  2a4c		       29 f0		      and	#$F0
    156  2a4e		       4a		      lsr
    157  2a4f		       69 3d		      adc	#<miniscoretable
    158  2a51		       aa		      tax
    159  2a52		       60		      rts
    160  2a53
------- FILE titlescreen/asm/titlescreen.asm
    181  2a53					      endif		;mk_score_on
    182  2a53
    183  2a53					      ifconst	mk_gameselect_on
------- FILE titlescreen/asm/gameselect_kernel.asm LEVEL 3 PASS 3
      0  2a53					      include	"titlescreen/asm/gameselect_kernel.asm"
      1  2a53
      2  2a53				   draw_gameselect_display
      3  2a53		       a9 00		      lda	#0
      4  2a55		       85 1b		      sta	GRP0
      5  2a57		       85 1c		      sta	GRP1
      6  2a59
      7  2a59		       a0 04		      ldy	#4
      8  2a5b		       84 f1		      sty	aux2
      9  2a5d
     10  2a5d		       ad 8d fe 	      lda	bmp_gameselect_color
     11  2a60		       85 06		      sta	COLUP0
     12  2a62		       85 07		      sta	COLUP1
     13  2a64
     14  2a64							;change gamenumber to a BCD number and stick it in temp5
     15  2a64		       a5 a6		      lda	gamenumber
     16  2a66		       85 9e		      sta	temp3
     17  2a68		       a9 00		      lda	#0
     18  2a6a		       85 9f		      sta	temp4
     19  2a6c		       a2 08		      ldx	#8
     20  2a6e		       18		      clc
     21  2a6f		       f8		      sed
     22  2a70				   converttobcd
     23  2a70		       06 9e		      asl	temp3
     24  2a72		       a5 9f		      lda	temp4
     25  2a74		       65 9f		      adc	temp4
     26  2a76		       85 9f		      sta	temp4
     27  2a78		       ca		      dex
     28  2a79		       d0 f5		      bne	converttobcd
     29  2a7b		       d8		      cld
     30  2a7c
     31  2a7c		       a5 9f		      lda	temp4
     32  2a7e		       29 0f		      and	#$0f
     33  2a80		       85 9e		      sta	temp3
     34  2a82		       0a		      asl
     35  2a83		       0a		      asl
     36  2a84		       18		      clc
     37  2a85		       65 9e		      adc	temp3	; *5
     38  2a87		       18		      clc
     39  2a88		       69 a2		      adc	#<(font_gameselect_img)
     40  2a8a		       85 a0		      sta	scorepointers+10
     41  2a8c
     42  2a8c		       a5 9f		      lda	temp4
     43  2a8e		       29 f0		      and	#$f0
     44  2a90		       4a		      lsr
     45  2a91		       4a		      lsr
     46  2a92		       85 9e		      sta	temp3
     47  2a94		       4a		      lsr
     48  2a95		       4a		      lsr
     49  2a96		       18		      clc
     50  2a97		       65 9e		      adc	temp3	; *5
     51  2a99		       18		      clc
     52  2a9a		       69 a2		      adc	#<(font_gameselect_img)
     53  2a9c		       85 9e		      sta	scorepointers+8
     54  2a9e
     55  2a9e
     56  2a9e							;setup score pointers to point at my bitmap slices instead
     57  2a9e		       a9 8e		      lda	#<(bmp_gameselect_CHAR0)
     58  2aa0		       85 96		      sta	scorepointers+0
     59  2aa2		       a9 fe		      lda	#>(bmp_gameselect_CHAR0)
     60  2aa4		       85 97		      sta	scorepointers+1
     61  2aa6		       a9 93		      lda	#<(bmp_gameselect_CHAR1)
     62  2aa8		       85 98		      sta	scorepointers+2
     63  2aaa		       a9 fe		      lda	#>(bmp_gameselect_CHAR1)
     64  2aac		       85 99		      sta	scorepointers+3
     65  2aae		       a9 98		      lda	#<(bmp_gameselect_CHAR2)
     66  2ab0		       85 9a		      sta	scorepointers+4
     67  2ab2		       a9 fe		      lda	#>(bmp_gameselect_CHAR2)
     68  2ab4		       85 9b		      sta	scorepointers+5
     69  2ab6		       a9 9d		      lda	#<(bmp_gameselect_CHAR3)
     70  2ab8		       85 9c		      sta	scorepointers+6
     71  2aba		       a9 fe		      lda	#>(bmp_gameselect_CHAR3)
     72  2abc		       85 9d		      sta	scorepointers+7
     73  2abe
     74  2abe		       a9 fe		      lda	#>(font_gameselect_img)
     75  2ac0		       85 9f		      sta	scorepointers+9
     76  2ac2
     77  2ac2		       a9 fe		      lda	#>(font_gameselect_img)
     78  2ac4		       85 a1		      sta	scorepointers+11
     79  2ac6
     80  2ac6		       4c ec f6 	      jmp	draw_bmp_48x1_X
------- FILE titlescreen/asm/titlescreen.asm
    185  2ac9					      endif		;mk_gameselect_on
    186  2ac9
    187  2ac9				   PFWAIT
    188  2ac9		       ad 84 02 	      lda	INTIM
    189  2acc		       d0 fb		      bne	PFWAIT
    190  2ace		       85 02		      sta	WSYNC
    191  2ad0
    192  2ad0				   OVERSCAN
    193  2ad0					      ifnconst	overscan_time
    194  2ad0		       a9 a2		      lda	#34+128
    195  2ad2				  -	      else
    196  2ad2				  -	      lda	#overscan_time+128-5
    197  2ad2					      endif
    198  2ad2		       8d 96 02 	      sta	TIM64T
    199  2ad5
    200  2ad5							;fix height variables we borrowed, so DPC doesn't crash on drawscreen...
    201  2ad5				  -	      ifconst	player9height
    202  2ad5				  -	      ldy	#8
    203  2ad5				  -	      lda	#0
    204  2ad5				  -	      sta	player0height
    205  2ad5				  -.playerheightfixloop
    206  2ad5				  -	      sta	player1height,y
    207  2ad5				  -	      ifconst	_NUSIZ1
    208  2ad5				  -	      sta	_NUSIZ1,y
    209  2ad5				  -	      endif
    210  2ad5				  -	      dey
    211  2ad5				  -	      bpl	.playerheightfixloop
    212  2ad5					      endif
    213  2ad5
    214  2ad5		       a9 c2		      lda	#%11000010
    215  2ad7		       85 02		      sta	WSYNC
    216  2ad9		       85 01		      sta	VBLANK
      0  2adb					      RETURN
      1  2adb				  -	      ifnconst	bankswitch
      2  2adb				  -	      rts
      3  2adb					      else
      4  2adb		       4c da ff 	      jmp	BS_return
      5  2ade					      endif
    218  2ade
    219  2ade				  -	      ifconst	mk_48x1_1_on
    220  2ade				  -	      include	"titlescreen/48x1_1_image.asm"
    221  2ade					      endif
    222  2ade				  -	      ifconst	mk_48x1_2_on
    223  2ade				  -	      include	"titlescreen/48x1_2_image.asm"
    224  2ade					      endif
    225  2ade				  -	      ifconst	mk_48x1_3_on
    226  2ade				  -	      include	"titlescreen/48x1_3_image.asm"
    227  2ade					      endif
    228  2ade				  -	      ifconst	mk_48x1_4_on
    229  2ade				  -	      include	"titlescreen/48x1_4_image.asm"
    230  2ade					      endif
    231  2ade				  -	      ifconst	mk_48x1_5_on
    232  2ade				  -	      include	"titlescreen/48x1_5_image.asm"
    233  2ade					      endif
    234  2ade				  -	      ifconst	mk_48x1_6_on
    235  2ade				  -	      include	"titlescreen/48x1_6_image.asm"
    236  2ade					      endif
    237  2ade				  -	      ifconst	mk_48x1_7_on
    238  2ade				  -	      include	"titlescreen/48x1_7_image.asm"
    239  2ade					      endif
    240  2ade				  -	      ifconst	mk_48x1_8_on
    241  2ade				  -	      include	"titlescreen/48x1_8_image.asm"
    242  2ade					      endif
    243  2ade
    244  2ade
    245  2ade					      ifconst	mk_48x2_1_on
------- FILE titlescreen/48x2_1_image.asm LEVEL 3 PASS 3
      0  2ade					      include	"titlescreen/48x2_1_image.asm"
      1  2ade
      2  2ade							;*** The height of the displayed data...
      3  2ade		       00 05	   bmp_48x2_1_window =	5
      4  2ade
      5  2ade							;*** The height of the bitmap data. This can be larger than
      6  2ade							;*** the displayed data height, if you're scrolling or animating
      7  2ade							;*** the data...
      8  2ade		       00 05	   bmp_48x2_1_height =	5
      9  2ade
     10  2ade				  -	      if	>. != >[.+(bmp_48x2_1_height)]
     11  2ade				  -	      align	256
     12  2ade					      endif
     13  2ade		       00		      BYTE.b	0	; leave this here!
     14  2adf
     15  2adf
     16  2adf							;*** The color of each line in the bitmap, in reverse order...
     17  2adf				   bmp_48x2_1_colors
     18  2adf		       84		      BYTE.b	_84
     19  2ae0		       88		      BYTE.b	_88
     20  2ae1		       48		      BYTE.b	_48
     21  2ae2		       46		      BYTE.b	_46
     22  2ae3		       44		      BYTE.b	_44
     23  2ae4
     24  2ae4				  -	      ifnconst	bmp_48x2_1_PF1
     25  2ae4				  -bmp_48x2_1_PF1
     26  2ae4					      endif
     27  2ae4		       00		      BYTE.b	%00000000
     28  2ae5				  -	      ifnconst	bmp_48x2_1_PF2
     29  2ae5				  -bmp_48x2_1_PF2
     30  2ae5					      endif
     31  2ae5		       00		      BYTE.b	%00000000
     32  2ae6				  -	      ifnconst	bmp_48x2_1_background
     33  2ae6				  -bmp_48x2_1_background
     34  2ae6					      endif
     35  2ae6		       c2		      BYTE.b	$c2
     36  2ae7
     37  2ae7				  -	      if	>. != >[.+bmp_48x2_1_height]
     38  2ae7				  -	      align	256
     39  2ae7					      endif
     40  2ae7
     41  2ae7
     42  2ae7				   bmp_48x2_1_00
     43  2ae7		       ee		      BYTE.b	%11101110
     44  2ae8		       88		      BYTE.b	%10001000
     45  2ae9		       8c		      BYTE.b	%10001100
     46  2aea		       88		      BYTE.b	%10001000
     47  2aeb		       8e		      BYTE.b	%10001110
     48  2aec		       88		      BYTE.b	%10001000
     49  2aed
     50  2aed				  -	      if	>. != >[.+(bmp_48x2_1_height)]
     51  2aed				  -	      align	256
     52  2aed					      endif
     53  2aed
     54  2aed				   bmp_48x2_1_01
     55  2aed		       4e		      BYTE.b	%01001110
     56  2aee		       48		      BYTE.b	%01001000
     57  2aef		       ac		      BYTE.b	%10101100
     58  2af0		       a8		      BYTE.b	%10101000
     59  2af1		       ae		      BYTE.b	%10101110
     60  2af2		       48		      BYTE.b	%01001000
     61  2af3
     62  2af3				  -	      if	>. != >[.+(bmp_48x2_1_height)]
     63  2af3				  -	      align	256
     64  2af3					      endif
     65  2af3
     66  2af3				   bmp_48x2_1_02
     67  2af3		       e0		      BYTE.b	%11100000
     68  2af4		       80		      BYTE.b	%10000000
     69  2af5		       80		      BYTE.b	%10000000
     70  2af6		       80		      BYTE.b	%10000000
     71  2af7		       80		      BYTE.b	%10000000
     72  2af8		       80		      BYTE.b	%10000000
     73  2af9
     74  2af9				  -	      if	>. != >[.+(bmp_48x2_1_height)]
     75  2af9				  -	      align	256
     76  2af9					      endif
     77  2af9
     78  2af9				   bmp_48x2_1_03
     79  2af9		       00		      BYTE.b	%00000000
     80  2afa		       00		      BYTE.b	%00000000
     81  2afb		       00		      BYTE.b	%00000000
     82  2afc		       00		      BYTE.b	%00000000
     83  2afd		       00		      BYTE.b	%00000000
     84  2afe		       00		      BYTE.b	%00000000
     85  2aff
     86  2aff					      if	>. != >[.+(bmp_48x2_1_height)]
     87  2b00		       00		      align	256
     88  2b00					      endif
     89  2b00
     90  2b00				   bmp_48x2_1_04
     91  2b00		       00		      BYTE.b	%00000000
     92  2b01		       00		      BYTE.b	%00000000
     93  2b02		       00		      BYTE.b	%00000000
     94  2b03		       00		      BYTE.b	%00000000
     95  2b04		       00		      BYTE.b	%00000000
     96  2b05		       00		      BYTE.b	%00000000
     97  2b06
     98  2b06				  -	      if	>. != >[.+(bmp_48x2_1_height)]
     99  2b06				  -	      align	256
    100  2b06					      endif
    101  2b06
    102  2b06				   bmp_48x2_1_05
    103  2b06		       00		      BYTE.b	%00000000
    104  2b07		       00		      BYTE.b	%00000000
    105  2b08		       00		      BYTE.b	%00000000
    106  2b09		       00		      BYTE.b	%00000000
    107  2b0a		       00		      BYTE.b	%00000000
    108  2b0b		       00		      BYTE.b	%00000000
    109  2b0c
------- FILE titlescreen/asm/titlescreen.asm
    247  2b0c					      endif
    248  2b0c				  -	      ifconst	mk_48x2_2_on
    249  2b0c				  -	      include	"titlescreen/48x2_2_image.asm"
    250  2b0c					      endif
    251  2b0c				  -	      ifconst	mk_48x2_3_on
    252  2b0c				  -	      include	"titlescreen/48x2_3_image.asm"
    253  2b0c					      endif
    254  2b0c				  -	      ifconst	mk_48x2_4_on
    255  2b0c				  -	      include	"titlescreen/48x2_4_image.asm"
    256  2b0c					      endif
    257  2b0c				  -	      ifconst	mk_48x2_5_on
    258  2b0c				  -	      include	"titlescreen/48x2_5_image.asm"
    259  2b0c					      endif
    260  2b0c				  -	      ifconst	mk_48x2_6_on
    261  2b0c				  -	      include	"titlescreen/48x2_6_image.asm"
    262  2b0c					      endif
    263  2b0c				  -	      ifconst	mk_48x2_7_on
    264  2b0c				  -	      include	"titlescreen/48x2_7_image.asm"
    265  2b0c					      endif
    266  2b0c
    267  2b0c				  -	      ifconst	mk_48x2_8_on
    268  2b0c				  -	      include	"titlescreen/48x2_8_image.asm"
    269  2b0c					      endif
    270  2b0c
    271  2b0c
    272  2b0c					      ifconst	mk_96x2_1_on
------- FILE titlescreen/96x2_1_image.asm LEVEL 3 PASS 3
      0  2b0c					      include	"titlescreen/96x2_1_image.asm"
      1  2b0c
      2  2b0c							;*** The height of the displayed data...
      3  2b0c		       00 3c	   bmp_96x2_1_window =	60
      4  2b0c
      5  2b0c							;*** The height of the bitmap data. This can be larger than
      6  2b0c							;*** the displayed data height, if you're scrolling or animating
      7  2b0c							;*** the data...
      8  2b0c		       00 3c	   bmp_96x2_1_height =	60
      9  2b0c
     10  2b0c
     11  2b0c				  -	      if	>. != >[.+(bmp_96x2_1_height)]
     12  2b0c				  -	      align	256
     13  2b0c					      endif
     14  2b0c		       00		      BYTE.b	$00	; leave this here!
     15  2b0d
     16  2b0d
     17  2b0d							;*** The color of each line in the bitmap, in reverse order...
     18  2b0d				   bmp_96x2_1_colors
     19  2b0d		       0e		      BYTE.b	$0E
     20  2b0e		       0e		      BYTE.b	$0E
     21  2b0f		       0e		      BYTE.b	$0E
     22  2b10		       0e		      BYTE.b	$0E
     23  2b11		       0e		      BYTE.b	$0E
     24  2b12		       0e		      BYTE.b	$0E
     25  2b13		       0e		      BYTE.b	$0E
     26  2b14		       0e		      BYTE.b	$0E
     27  2b15		       0e		      BYTE.b	$0E
     28  2b16		       0e		      BYTE.b	$0E
     29  2b17		       0e		      BYTE.b	$0E
     30  2b18		       0e		      BYTE.b	$0E
     31  2b19		       0e		      BYTE.b	$0E
     32  2b1a		       0e		      BYTE.b	$0E
     33  2b1b		       0e		      BYTE.b	$0E
     34  2b1c		       0e		      BYTE.b	$0E
     35  2b1d		       0e		      BYTE.b	$0E
     36  2b1e		       0e		      BYTE.b	$0E
     37  2b1f		       0e		      BYTE.b	$0E
     38  2b20		       0e		      BYTE.b	$0E
     39  2b21		       0e		      BYTE.b	$0E
     40  2b22		       0e		      BYTE.b	$0E
     41  2b23		       0e		      BYTE.b	$0E
     42  2b24		       0e		      BYTE.b	$0E
     43  2b25		       0e		      BYTE.b	$0E
     44  2b26		       0e		      BYTE.b	$0E
     45  2b27		       0e		      BYTE.b	$0E
     46  2b28		       0e		      BYTE.b	$0E
     47  2b29		       0e		      BYTE.b	$0E
     48  2b2a		       82		      BYTE.b	_82
     49  2b2b		       82		      BYTE.b	_82
     50  2b2c		       82		      BYTE.b	_82
     51  2b2d		       82		      BYTE.b	_82
     52  2b2e		       82		      BYTE.b	_82
     53  2b2f		       82		      BYTE.b	_82
     54  2b30		       84		      BYTE.b	_84
     55  2b31		       84		      BYTE.b	_84
     56  2b32		       88		      BYTE.b	_88
     57  2b33		       88		      BYTE.b	_88
     58  2b34		       8a		      BYTE.b	_8A
     59  2b35		       8a		      BYTE.b	_8A
     60  2b36		       8a		      BYTE.b	_8A
     61  2b37		       8c		      BYTE.b	_8C
     62  2b38		       8c		      BYTE.b	_8C
     63  2b39		       8c		      BYTE.b	_8C
     64  2b3a		       8c		      BYTE.b	_8C
     65  2b3b		       0e		      BYTE.b	$0E
     66  2b3c		       0e		      BYTE.b	$0E
     67  2b3d		       4a		      BYTE.b	_4A
     68  2b3e		       4a		      BYTE.b	_4A
     69  2b3f		       4a		      BYTE.b	_4A
     70  2b40		       48		      BYTE.b	_48
     71  2b41		       48		      BYTE.b	_48
     72  2b42		       48		      BYTE.b	_48
     73  2b43		       46		      BYTE.b	_46
     74  2b44		       46		      BYTE.b	_46
     75  2b45		       44		      BYTE.b	_44
     76  2b46		       44		      BYTE.b	_44
     77  2b47		       42		      BYTE.b	_42
     78  2b48		       42		      BYTE.b	_42
     79  2b49
     80  2b49
     81  2b49				  -	      if	>. != >[.+(bmp_96x2_1_height)]
     82  2b49				  -	      align	256
     83  2b49					      endif
     84  2b49
     85  2b49				   bmp_96x2_1_00
     86  2b49		       44		      BYTE.b	%01000100
     87  2b4a		       92		      BYTE.b	%10010010
     88  2b4b		       ba		      BYTE.b	%10111010
     89  2b4c		       92		      BYTE.b	%10010010
     90  2b4d		       44		      BYTE.b	%01000100
     91  2b4e		       00		      BYTE.b	%00000000
     92  2b4f		       00		      BYTE.b	%00000000
     93  2b50		       00		      BYTE.b	%00000000
     94  2b51		       00		      BYTE.b	%00000000
     95  2b52		       00		      BYTE.b	%00000000
     96  2b53		       00		      BYTE.b	%00000000
     97  2b54		       00		      BYTE.b	%00000000
     98  2b55		       00		      BYTE.b	%00000000
     99  2b56		       00		      BYTE.b	%00000000
    100  2b57		       00		      BYTE.b	%00000000
    101  2b58		       00		      BYTE.b	%00000000
    102  2b59		       00		      BYTE.b	%00000000
    103  2b5a		       00		      BYTE.b	%00000000
    104  2b5b		       00		      BYTE.b	%00000000
    105  2b5c		       00		      BYTE.b	%00000000
    106  2b5d		       00		      BYTE.b	%00000000
    107  2b5e		       00		      BYTE.b	%00000000
    108  2b5f		       00		      BYTE.b	%00000000
    109  2b60		       00		      BYTE.b	%00000000
    110  2b61		       00		      BYTE.b	%00000000
    111  2b62		       00		      BYTE.b	%00000000
    112  2b63		       00		      BYTE.b	%00000000
    113  2b64		       00		      BYTE.b	%00000000
    114  2b65		       00		      BYTE.b	%00000000
    115  2b66		       00		      BYTE.b	%00000000
    116  2b67		       00		      BYTE.b	%00000000
    117  2b68		       00		      BYTE.b	%00000000
    118  2b69		       00		      BYTE.b	%00000000
    119  2b6a		       00		      BYTE.b	%00000000
    120  2b6b		       00		      BYTE.b	%00000000
    121  2b6c		       00		      BYTE.b	%00000000
    122  2b6d		       00		      BYTE.b	%00000000
    123  2b6e		       00		      BYTE.b	%00000000
    124  2b6f		       00		      BYTE.b	%00000000
    125  2b70		       00		      BYTE.b	%00000000
    126  2b71		       00		      BYTE.b	%00000000
    127  2b72		       00		      BYTE.b	%00000000
    128  2b73		       00		      BYTE.b	%00000000
    129  2b74		       00		      BYTE.b	%00000000
    130  2b75		       00		      BYTE.b	%00000000
    131  2b76		       00		      BYTE.b	%00000000
    132  2b77		       00		      BYTE.b	%00000000
    133  2b78		       00		      BYTE.b	%00000000
    134  2b79		       3e		      BYTE.b	%00111110
    135  2b7a		       7f		      BYTE.b	%01111111
    136  2b7b		       ff		      BYTE.b	%11111111
    137  2b7c		       f1		      BYTE.b	%11110001
    138  2b7d		       e0		      BYTE.b	%11100000
    139  2b7e		       e0		      BYTE.b	%11100000
    140  2b7f		       f0		      BYTE.b	%11110000
    141  2b80		       70		      BYTE.b	%01110000
    142  2b81		       3c		      BYTE.b	%00111100
    143  2b82		       3f		      BYTE.b	%00111111
    144  2b83		       1f		      BYTE.b	%00011111
    145  2b84		       07		      BYTE.b	%00000111
    146  2b85
    147  2b85				  -	      if	>. != >[.+(bmp_96x2_1_height)]
    148  2b85				  -	      align	256
    149  2b85					      endif
    150  2b85
    151  2b85				   bmp_96x2_1_01
    152  2b85		       00		      BYTE.b	%00000000
    153  2b86		       00		      BYTE.b	%00000000
    154  2b87		       00		      BYTE.b	%00000000
    155  2b88		       00		      BYTE.b	%00000000
    156  2b89		       00		      BYTE.b	%00000000
    157  2b8a		       00		      BYTE.b	%00000000
    158  2b8b		       0f		      BYTE.b	%00001111
    159  2b8c		       1f		      BYTE.b	%00011111
    160  2b8d		       3f		      BYTE.b	%00111111
    161  2b8e		       7f		      BYTE.b	%01111111
    162  2b8f		       7f		      BYTE.b	%01111111
    163  2b90		       30		      BYTE.b	%00110000
    164  2b91		       30		      BYTE.b	%00110000
    165  2b92		       18		      BYTE.b	%00011000
    166  2b93		       0c		      BYTE.b	%00001100
    167  2b94		       07		      BYTE.b	%00000111
    168  2b95		       03		      BYTE.b	%00000011
    169  2b96		       00		      BYTE.b	%00000000
    170  2b97		       00		      BYTE.b	%00000000
    171  2b98		       00		      BYTE.b	%00000000
    172  2b99		       00		      BYTE.b	%00000000
    173  2b9a		       00		      BYTE.b	%00000000
    174  2b9b		       00		      BYTE.b	%00000000
    175  2b9c		       00		      BYTE.b	%00000000
    176  2b9d		       00		      BYTE.b	%00000000
    177  2b9e		       7f		      BYTE.b	%01111111
    178  2b9f		       ff		      BYTE.b	%11111111
    179  2ba0		       00		      BYTE.b	%00000000
    180  2ba1		       00		      BYTE.b	%00000000
    181  2ba2		       00		      BYTE.b	%00000000
    182  2ba3		       00		      BYTE.b	%00000000
    183  2ba4		       00		      BYTE.b	%00000000
    184  2ba5		       00		      BYTE.b	%00000000
    185  2ba6		       c0		      BYTE.b	%11000000
    186  2ba7		       e1		      BYTE.b	%11100001
    187  2ba8		       ff		      BYTE.b	%11111111
    188  2ba9		       7f		      BYTE.b	%01111111
    189  2baa		       7f		      BYTE.b	%01111111
    190  2bab		       33		      BYTE.b	%00110011
    191  2bac		       1b		      BYTE.b	%00011011
    192  2bad		       1f		      BYTE.b	%00011111
    193  2bae		       0f		      BYTE.b	%00001111
    194  2baf		       0f		      BYTE.b	%00001111
    195  2bb0		       07		      BYTE.b	%00000111
    196  2bb1		       03		      BYTE.b	%00000011
    197  2bb2		       00		      BYTE.b	%00000000
    198  2bb3		       00		      BYTE.b	%00000000
    199  2bb4		       00		      BYTE.b	%00000000
    200  2bb5		       0c		      BYTE.b	%00001100
    201  2bb6		       0c		      BYTE.b	%00001100
    202  2bb7		       c0		      BYTE.b	%11000000
    203  2bb8		       c0		      BYTE.b	%11000000
    204  2bb9		       c0		      BYTE.b	%11000000
    205  2bba		       00		      BYTE.b	%00000000
    206  2bbb		       00		      BYTE.b	%00000000
    207  2bbc		       00		      BYTE.b	%00000000
    208  2bbd		       c0		      BYTE.b	%11000000
    209  2bbe		       c0		      BYTE.b	%11000000
    210  2bbf		       c0		      BYTE.b	%11000000
    211  2bc0		       c0		      BYTE.b	%11000000
    212  2bc1
    213  2bc1				  -	      if	>. != >[.+(bmp_96x2_1_height)]
    214  2bc1				  -	      align	256
    215  2bc1					      endif
    216  2bc1
    217  2bc1				   bmp_96x2_1_02
    218  2bc1		       07		      BYTE.b	%00000111
    219  2bc2		       1f		      BYTE.b	%00011111
    220  2bc3		       1c		      BYTE.b	%00011100
    221  2bc4		       00		      BYTE.b	%00000000
    222  2bc5		       00		      BYTE.b	%00000000
    223  2bc6		       ff		      BYTE.b	%11111111
    224  2bc7		       ff		      BYTE.b	%11111111
    225  2bc8		       ff		      BYTE.b	%11111111
    226  2bc9		       ff		      BYTE.b	%11111111
    227  2bca		       ff		      BYTE.b	%11111111
    228  2bcb		       ff		      BYTE.b	%11111111
    229  2bcc		       03		      BYTE.b	%00000011
    230  2bcd		       01		      BYTE.b	%00000001
    231  2bce		       01		      BYTE.b	%00000001
    232  2bcf		       00		      BYTE.b	%00000000
    233  2bd0		       00		      BYTE.b	%00000000
    234  2bd1		       e0		      BYTE.b	%11100000
    235  2bd2		       ff		      BYTE.b	%11111111
    236  2bd3		       1f		      BYTE.b	%00011111
    237  2bd4		       03		      BYTE.b	%00000011
    238  2bd5		       00		      BYTE.b	%00000000
    239  2bd6		       00		      BYTE.b	%00000000
    240  2bd7		       00		      BYTE.b	%00000000
    241  2bd8		       00		      BYTE.b	%00000000
    242  2bd9		       00		      BYTE.b	%00000000
    243  2bda		       ff		      BYTE.b	%11111111
    244  2bdb		       ff		      BYTE.b	%11111111
    245  2bdc		       00		      BYTE.b	%00000000
    246  2bdd		       00		      BYTE.b	%00000000
    247  2bde		       1c		      BYTE.b	%00011100
    248  2bdf		       1c		      BYTE.b	%00011100
    249  2be0		       1c		      BYTE.b	%00011100
    250  2be1		       1c		      BYTE.b	%00011100
    251  2be2		       df		      BYTE.b	%11011111
    252  2be3		       df		      BYTE.b	%11011111
    253  2be4		       df		      BYTE.b	%11011111
    254  2be5		       9c		      BYTE.b	%10011100
    255  2be6		       9c		      BYTE.b	%10011100
    256  2be7		       9f		      BYTE.b	%10011111
    257  2be8		       9f		      BYTE.b	%10011111
    258  2be9		       9f		      BYTE.b	%10011111
    259  2bea		       00		      BYTE.b	%00000000
    260  2beb		       00		      BYTE.b	%00000000
    261  2bec		       00		      BYTE.b	%00000000
    262  2bed		       00		      BYTE.b	%00000000
    263  2bee		       00		      BYTE.b	%00000000
    264  2bef		       00		      BYTE.b	%00000000
    265  2bf0		       00		      BYTE.b	%00000000
    266  2bf1		       30		      BYTE.b	%00110000
    267  2bf2		       38		      BYTE.b	%00111000
    268  2bf3		       3f		      BYTE.b	%00111111
    269  2bf4		       1f		      BYTE.b	%00011111
    270  2bf5		       1f		      BYTE.b	%00011111
    271  2bf6		       0c		      BYTE.b	%00001100
    272  2bf7		       06		      BYTE.b	%00000110
    273  2bf8		       07		      BYTE.b	%00000111
    274  2bf9		       03		      BYTE.b	%00000011
    275  2bfa		       03		      BYTE.b	%00000011
    276  2bfb		       01		      BYTE.b	%00000001
    277  2bfc		       00		      BYTE.b	%00000000
    278  2bfd
    279  2bfd					      if	>. != >[.+(bmp_96x2_1_height)]
    280  2c00		       00 00 00 	      align	256
    281  2c00					      endif
    282  2c00
    283  2c00				   bmp_96x2_1_03
    284  2c00		       ff		      BYTE.b	%11111111
    285  2c01		       ff		      BYTE.b	%11111111
    286  2c02		       e0		      BYTE.b	%11100000
    287  2c03		       e0		      BYTE.b	%11100000
    288  2c04		       fc		      BYTE.b	%11111100
    289  2c05		       ff		      BYTE.b	%11111111
    290  2c06		       ff		      BYTE.b	%11111111
    291  2c07		       80		      BYTE.b	%10000000
    292  2c08		       00		      BYTE.b	%00000000
    293  2c09		       00		      BYTE.b	%00000000
    294  2c0a		       00		      BYTE.b	%00000000
    295  2c0b		       00		      BYTE.b	%00000000
    296  2c0c		       80		      BYTE.b	%10000000
    297  2c0d		       80		      BYTE.b	%10000000
    298  2c0e		       c0		      BYTE.b	%11000000
    299  2c0f		       c0		      BYTE.b	%11000000
    300  2c10		       60		      BYTE.b	%01100000
    301  2c11		       ff		      BYTE.b	%11111111
    302  2c12		       ff		      BYTE.b	%11111111
    303  2c13		       ff		      BYTE.b	%11111111
    304  2c14		       1f		      BYTE.b	%00011111
    305  2c15		       07		      BYTE.b	%00000111
    306  2c16		       01		      BYTE.b	%00000001
    307  2c17		       00		      BYTE.b	%00000000
    308  2c18		       00		      BYTE.b	%00000000
    309  2c19		       ff		      BYTE.b	%11111111
    310  2c1a		       ff		      BYTE.b	%11111111
    311  2c1b		       00		      BYTE.b	%00000000
    312  2c1c		       00		      BYTE.b	%00000000
    313  2c1d		       00		      BYTE.b	%00000000
    314  2c1e		       00		      BYTE.b	%00000000
    315  2c1f		       00		      BYTE.b	%00000000
    316  2c20		       00		      BYTE.b	%00000000
    317  2c21		       83		      BYTE.b	%10000011
    318  2c22		       c7		      BYTE.b	%11000111
    319  2c23		       ef		      BYTE.b	%11101111
    320  2c24		       ee		      BYTE.b	%11101110
    321  2c25		       ee		      BYTE.b	%11101110
    322  2c26		       ef		      BYTE.b	%11101111
    323  2c27		       c7		      BYTE.b	%11000111
    324  2c28		       c3		      BYTE.b	%11000011
    325  2c29		       00		      BYTE.b	%00000000
    326  2c2a		       00		      BYTE.b	%00000000
    327  2c2b		       00		      BYTE.b	%00000000
    328  2c2c		       00		      BYTE.b	%00000000
    329  2c2d		       00		      BYTE.b	%00000000
    330  2c2e		       00		      BYTE.b	%00000000
    331  2c2f		       00		      BYTE.b	%00000000
    332  2c30		       31		      BYTE.b	%00110001
    333  2c31		       71		      BYTE.b	%01110001
    334  2c32		       f0		      BYTE.b	%11110000
    335  2c33		       e0		      BYTE.b	%11100000
    336  2c34		       e0		      BYTE.b	%11100000
    337  2c35		       e0		      BYTE.b	%11100000
    338  2c36		       e0		      BYTE.b	%11100000
    339  2c37		       e0		      BYTE.b	%11100000
    340  2c38		       c0		      BYTE.b	%11000000
    341  2c39		       c0		      BYTE.b	%11000000
    342  2c3a		       c0		      BYTE.b	%11000000
    343  2c3b		       c0		      BYTE.b	%11000000
    344  2c3c
    345  2c3c				  -	      if	>. != >[.+(bmp_96x2_1_height)]
    346  2c3c				  -	      align	256
    347  2c3c					      endif
    348  2c3c
    349  2c3c				   bmp_96x2_1_04
    350  2c3c		       ff		      BYTE.b	%11111111
    351  2c3d		       ff		      BYTE.b	%11111111
    352  2c3e		       01		      BYTE.b	%00000001
    353  2c3f		       01		      BYTE.b	%00000001
    354  2c40		       01		      BYTE.b	%00000001
    355  2c41		       ff		      BYTE.b	%11111111
    356  2c42		       ff		      BYTE.b	%11111111
    357  2c43		       01		      BYTE.b	%00000001
    358  2c44		       00		      BYTE.b	%00000000
    359  2c45		       00		      BYTE.b	%00000000
    360  2c46		       00		      BYTE.b	%00000000
    361  2c47		       00		      BYTE.b	%00000000
    362  2c48		       00		      BYTE.b	%00000000
    363  2c49		       00		      BYTE.b	%00000000
    364  2c4a		       00		      BYTE.b	%00000000
    365  2c4b		       00		      BYTE.b	%00000000
    366  2c4c		       01		      BYTE.b	%00000001
    367  2c4d		       ff		      BYTE.b	%11111111
    368  2c4e		       ff		      BYTE.b	%11111111
    369  2c4f		       ff		      BYTE.b	%11111111
    370  2c50		       ff		      BYTE.b	%11111111
    371  2c51		       ff		      BYTE.b	%11111111
    372  2c52		       ff		      BYTE.b	%11111111
    373  2c53		       07		      BYTE.b	%00000111
    374  2c54		       00		      BYTE.b	%00000000
    375  2c55		       ff		      BYTE.b	%11111111
    376  2c56		       ff		      BYTE.b	%11111111
    377  2c57		       00		      BYTE.b	%00000000
    378  2c58		       00		      BYTE.b	%00000000
    379  2c59		       00		      BYTE.b	%00000000
    380  2c5a		       00		      BYTE.b	%00000000
    381  2c5b		       00		      BYTE.b	%00000000
    382  2c5c		       00		      BYTE.b	%00000000
    383  2c5d		       83		      BYTE.b	%10000011
    384  2c5e		       c7		      BYTE.b	%11000111
    385  2c5f		       ef		      BYTE.b	%11101111
    386  2c60		       ee		      BYTE.b	%11101110
    387  2c61		       ee		      BYTE.b	%11101110
    388  2c62		       e7		      BYTE.b	%11100111
    389  2c63		       c7		      BYTE.b	%11000111
    390  2c64		       c3		      BYTE.b	%11000011
    391  2c65		       00		      BYTE.b	%00000000
    392  2c66		       00		      BYTE.b	%00000000
    393  2c67		       00		      BYTE.b	%00000000
    394  2c68		       00		      BYTE.b	%00000000
    395  2c69		       00		      BYTE.b	%00000000
    396  2c6a		       00		      BYTE.b	%00000000
    397  2c6b		       00		      BYTE.b	%00000000
    398  2c6c		       80		      BYTE.b	%10000000
    399  2c6d		       80		      BYTE.b	%10000000
    400  2c6e		       01		      BYTE.b	%00000001
    401  2c6f		       01		      BYTE.b	%00000001
    402  2c70		       01		      BYTE.b	%00000001
    403  2c71		       03		      BYTE.b	%00000011
    404  2c72		       03		      BYTE.b	%00000011
    405  2c73		       03		      BYTE.b	%00000011
    406  2c74		       03		      BYTE.b	%00000011
    407  2c75		       07		      BYTE.b	%00000111
    408  2c76		       07		      BYTE.b	%00000111
    409  2c77		       07		      BYTE.b	%00000111
    410  2c78
    411  2c78				  -	      if	>. != >[.+(bmp_96x2_1_height)]
    412  2c78				  -	      align	256
    413  2c78					      endif
    414  2c78
    415  2c78				   bmp_96x2_1_05
    416  2c78		       fc		      BYTE.b	%11111100
    417  2c79		       fc		      BYTE.b	%11111100
    418  2c7a		       c0		      BYTE.b	%11000000
    419  2c7b		       c0		      BYTE.b	%11000000
    420  2c7c		       c0		      BYTE.b	%11000000
    421  2c7d		       f0		      BYTE.b	%11110000
    422  2c7e		       fe		      BYTE.b	%11111110
    423  2c7f		       ff		      BYTE.b	%11111111
    424  2c80		       ff		      BYTE.b	%11111111
    425  2c81		       ff		      BYTE.b	%11111111
    426  2c82		       ff		      BYTE.b	%11111111
    427  2c83		       ff		      BYTE.b	%11111111
    428  2c84		       ff		      BYTE.b	%11111111
    429  2c85		       ff		      BYTE.b	%11111111
    430  2c86		       ff		      BYTE.b	%11111111
    431  2c87		       ff		      BYTE.b	%11111111
    432  2c88		       ff		      BYTE.b	%11111111
    433  2c89		       ff		      BYTE.b	%11111111
    434  2c8a		       ff		      BYTE.b	%11111111
    435  2c8b		       ff		      BYTE.b	%11111111
    436  2c8c		       ff		      BYTE.b	%11111111
    437  2c8d		       ff		      BYTE.b	%11111111
    438  2c8e		       ff		      BYTE.b	%11111111
    439  2c8f		       ff		      BYTE.b	%11111111
    440  2c90		       fc		      BYTE.b	%11111100
    441  2c91		       ff		      BYTE.b	%11111111
    442  2c92		       ff		      BYTE.b	%11111111
    443  2c93		       00		      BYTE.b	%00000000
    444  2c94		       00		      BYTE.b	%00000000
    445  2c95		       00		      BYTE.b	%00000000
    446  2c96		       00		      BYTE.b	%00000000
    447  2c97		       00		      BYTE.b	%00000000
    448  2c98		       00		      BYTE.b	%00000000
    449  2c99		       c7		      BYTE.b	%11000111
    450  2c9a		       ef		      BYTE.b	%11101111
    451  2c9b		       ef		      BYTE.b	%11101111
    452  2c9c		       0e		      BYTE.b	%00001110
    453  2c9d		       0e		      BYTE.b	%00001110
    454  2c9e		       ef		      BYTE.b	%11101111
    455  2c9f		       e7		      BYTE.b	%11100111
    456  2ca0		       c1		      BYTE.b	%11000001
    457  2ca1		       00		      BYTE.b	%00000000
    458  2ca2		       00		      BYTE.b	%00000000
    459  2ca3		       00		      BYTE.b	%00000000
    460  2ca4		       00		      BYTE.b	%00000000
    461  2ca5		       00		      BYTE.b	%00000000
    462  2ca6		       00		      BYTE.b	%00000000
    463  2ca7		       00		      BYTE.b	%00000000
    464  2ca8		       c0		      BYTE.b	%11000000
    465  2ca9		       e0		      BYTE.b	%11100000
    466  2caa		       e0		      BYTE.b	%11100000
    467  2cab		       e0		      BYTE.b	%11100000
    468  2cac		       f0		      BYTE.b	%11110000
    469  2cad		       b0		      BYTE.b	%10110000
    470  2cae		       b8		      BYTE.b	%10111000
    471  2caf		       38		      BYTE.b	%00111000
    472  2cb0		       1c		      BYTE.b	%00011100
    473  2cb1		       1c		      BYTE.b	%00011100
    474  2cb2		       1e		      BYTE.b	%00011110
    475  2cb3		       0e		      BYTE.b	%00001110
    476  2cb4
    477  2cb4				  -	      if	>. != >[.+(bmp_96x2_1_height)]
    478  2cb4				  -	      align	256
    479  2cb4					      endif
    480  2cb4
    481  2cb4				   bmp_96x2_1_06
    482  2cb4		       00		      BYTE.b	%00000000
    483  2cb5		       00		      BYTE.b	%00000000
    484  2cb6		       00		      BYTE.b	%00000000
    485  2cb7		       00		      BYTE.b	%00000000
    486  2cb8		       00		      BYTE.b	%00000000
    487  2cb9		       00		      BYTE.b	%00000000
    488  2cba		       00		      BYTE.b	%00000000
    489  2cbb		       80		      BYTE.b	%10000000
    490  2cbc		       e0		      BYTE.b	%11100000
    491  2cbd		       f0		      BYTE.b	%11110000
    492  2cbe		       fc		      BYTE.b	%11111100
    493  2cbf		       ff		      BYTE.b	%11111111
    494  2cc0		       ff		      BYTE.b	%11111111
    495  2cc1		       ff		      BYTE.b	%11111111
    496  2cc2		       ff		      BYTE.b	%11111111
    497  2cc3		       ff		      BYTE.b	%11111111
    498  2cc4		       ff		      BYTE.b	%11111111
    499  2cc5		       ff		      BYTE.b	%11111111
    500  2cc6		       f8		      BYTE.b	%11111000
    501  2cc7		       f8		      BYTE.b	%11111000
    502  2cc8		       f0		      BYTE.b	%11110000
    503  2cc9		       f0		      BYTE.b	%11110000
    504  2cca		       f0		      BYTE.b	%11110000
    505  2ccb		       80		      BYTE.b	%10000000
    506  2ccc		       00		      BYTE.b	%00000000
    507  2ccd		       ff		      BYTE.b	%11111111
    508  2cce		       ff		      BYTE.b	%11111111
    509  2ccf		       00		      BYTE.b	%00000000
    510  2cd0		       00		      BYTE.b	%00000000
    511  2cd1		       00		      BYTE.b	%00000000
    512  2cd2		       00		      BYTE.b	%00000000
    513  2cd3		       00		      BYTE.b	%00000000
    514  2cd4		       00		      BYTE.b	%00000000
    515  2cd5		       b7		      BYTE.b	%10110111
    516  2cd6		       f7		      BYTE.b	%11110111
    517  2cd7		       f7		      BYTE.b	%11110111
    518  2cd8		       77		      BYTE.b	%01110111
    519  2cd9		       77		      BYTE.b	%01110111
    520  2cda		       f7		      BYTE.b	%11110111
    521  2cdb		       f7		      BYTE.b	%11110111
    522  2cdc		       e7		      BYTE.b	%11100111
    523  2cdd		       07		      BYTE.b	%00000111
    524  2cde		       07		      BYTE.b	%00000111
    525  2cdf		       07		      BYTE.b	%00000111
    526  2ce0		       07		      BYTE.b	%00000111
    527  2ce1		       07		      BYTE.b	%00000111
    528  2ce2		       00		      BYTE.b	%00000000
    529  2ce3		       00		      BYTE.b	%00000000
    530  2ce4		       60		      BYTE.b	%01100000
    531  2ce5		       61		      BYTE.b	%01100001
    532  2ce6		       01		      BYTE.b	%00000001
    533  2ce7		       01		      BYTE.b	%00000001
    534  2ce8		       01		      BYTE.b	%00000001
    535  2ce9		       01		      BYTE.b	%00000001
    536  2cea		       01		      BYTE.b	%00000001
    537  2ceb		       01		      BYTE.b	%00000001
    538  2cec		       01		      BYTE.b	%00000001
    539  2ced		       01		      BYTE.b	%00000001
    540  2cee		       01		      BYTE.b	%00000001
    541  2cef		       01		      BYTE.b	%00000001
    542  2cf0
    543  2cf0					      if	>. != >[.+(bmp_96x2_1_height)]
    544  2d00		       00 00 00 00*	      align	256
    545  2d00					      endif
    546  2d00
    547  2d00				   bmp_96x2_1_07
    548  2d00		       00		      BYTE.b	%00000000
    549  2d01		       00		      BYTE.b	%00000000
    550  2d02		       00		      BYTE.b	%00000000
    551  2d03		       00		      BYTE.b	%00000000
    552  2d04		       00		      BYTE.b	%00000000
    553  2d05		       00		      BYTE.b	%00000000
    554  2d06		       00		      BYTE.b	%00000000
    555  2d07		       00		      BYTE.b	%00000000
    556  2d08		       00		      BYTE.b	%00000000
    557  2d09		       00		      BYTE.b	%00000000
    558  2d0a		       00		      BYTE.b	%00000000
    559  2d0b		       00		      BYTE.b	%00000000
    560  2d0c		       ff		      BYTE.b	%11111111
    561  2d0d		       ff		      BYTE.b	%11111111
    562  2d0e		       ff		      BYTE.b	%11111111
    563  2d0f		       ff		      BYTE.b	%11111111
    564  2d10		       ff		      BYTE.b	%11111111
    565  2d11		       ff		      BYTE.b	%11111111
    566  2d12		       00		      BYTE.b	%00000000
    567  2d13		       00		      BYTE.b	%00000000
    568  2d14		       00		      BYTE.b	%00000000
    569  2d15		       00		      BYTE.b	%00000000
    570  2d16		       00		      BYTE.b	%00000000
    571  2d17		       00		      BYTE.b	%00000000
    572  2d18		       00		      BYTE.b	%00000000
    573  2d19		       ff		      BYTE.b	%11111111
    574  2d1a		       ff		      BYTE.b	%11111111
    575  2d1b		       00		      BYTE.b	%00000000
    576  2d1c		       00		      BYTE.b	%00000000
    577  2d1d		       38		      BYTE.b	%00111000
    578  2d1e		       38		      BYTE.b	%00111000
    579  2d1f		       3c		      BYTE.b	%00111100
    580  2d20		       1c		      BYTE.b	%00011100
    581  2d21		       1e		      BYTE.b	%00011110
    582  2d22		       1e		      BYTE.b	%00011110
    583  2d23		       1f		      BYTE.b	%00011111
    584  2d24		       1f		      BYTE.b	%00011111
    585  2d25		       3f		      BYTE.b	%00111111
    586  2d26		       33		      BYTE.b	%00110011
    587  2d27		       73		      BYTE.b	%01110011
    588  2d28		       71		      BYTE.b	%01110001
    589  2d29		       00		      BYTE.b	%00000000
    590  2d2a		       00		      BYTE.b	%00000000
    591  2d2b		       00		      BYTE.b	%00000000
    592  2d2c		       00		      BYTE.b	%00000000
    593  2d2d		       00		      BYTE.b	%00000000
    594  2d2e		       00		      BYTE.b	%00000000
    595  2d2f		       00		      BYTE.b	%00000000
    596  2d30		       fe		      BYTE.b	%11111110
    597  2d31		       fe		      BYTE.b	%11111110
    598  2d32		       fe		      BYTE.b	%11111110
    599  2d33		       c0		      BYTE.b	%11000000
    600  2d34		       fe		      BYTE.b	%11111110
    601  2d35		       fe		      BYTE.b	%11111110
    602  2d36		       fe		      BYTE.b	%11111110
    603  2d37		       c0		      BYTE.b	%11000000
    604  2d38		       c0		      BYTE.b	%11000000
    605  2d39		       fe		      BYTE.b	%11111110
    606  2d3a		       fe		      BYTE.b	%11111110
    607  2d3b		       fe		      BYTE.b	%11111110
    608  2d3c
    609  2d3c				  -	      if	>. != >[.+(bmp_96x2_1_height)]
    610  2d3c				  -	      align	256
    611  2d3c					      endif
    612  2d3c
    613  2d3c				   bmp_96x2_1_08
    614  2d3c		       00		      BYTE.b	%00000000
    615  2d3d		       00		      BYTE.b	%00000000
    616  2d3e		       00		      BYTE.b	%00000000
    617  2d3f		       00		      BYTE.b	%00000000
    618  2d40		       00		      BYTE.b	%00000000
    619  2d41		       00		      BYTE.b	%00000000
    620  2d42		       00		      BYTE.b	%00000000
    621  2d43		       00		      BYTE.b	%00000000
    622  2d44		       00		      BYTE.b	%00000000
    623  2d45		       00		      BYTE.b	%00000000
    624  2d46		       00		      BYTE.b	%00000000
    625  2d47		       00		      BYTE.b	%00000000
    626  2d48		       e0		      BYTE.b	%11100000
    627  2d49		       ff		      BYTE.b	%11111111
    628  2d4a		       ff		      BYTE.b	%11111111
    629  2d4b		       ff		      BYTE.b	%11111111
    630  2d4c		       ff		      BYTE.b	%11111111
    631  2d4d		       fc		      BYTE.b	%11111100
    632  2d4e		       00		      BYTE.b	%00000000
    633  2d4f		       00		      BYTE.b	%00000000
    634  2d50		       00		      BYTE.b	%00000000
    635  2d51		       00		      BYTE.b	%00000000
    636  2d52		       00		      BYTE.b	%00000000
    637  2d53		       00		      BYTE.b	%00000000
    638  2d54		       00		      BYTE.b	%00000000
    639  2d55		       ff		      BYTE.b	%11111111
    640  2d56		       ff		      BYTE.b	%11111111
    641  2d57		       00		      BYTE.b	%00000000
    642  2d58		       00		      BYTE.b	%00000000
    643  2d59		       38		      BYTE.b	%00111000
    644  2d5a		       38		      BYTE.b	%00111000
    645  2d5b		       38		      BYTE.b	%00111000
    646  2d5c		       38		      BYTE.b	%00111000
    647  2d5d		       3f		      BYTE.b	%00111111
    648  2d5e		       3f		      BYTE.b	%00111111
    649  2d5f		       3f		      BYTE.b	%00111111
    650  2d60		       39		      BYTE.b	%00111001
    651  2d61		       b9		      BYTE.b	%10111001
    652  2d62		       bf		      BYTE.b	%10111111
    653  2d63		       ff		      BYTE.b	%11111111
    654  2d64		       ff		      BYTE.b	%11111111
    655  2d65		       00		      BYTE.b	%00000000
    656  2d66		       00		      BYTE.b	%00000000
    657  2d67		       00		      BYTE.b	%00000000
    658  2d68		       00		      BYTE.b	%00000000
    659  2d69		       00		      BYTE.b	%00000000
    660  2d6a		       00		      BYTE.b	%00000000
    661  2d6b		       00		      BYTE.b	%00000000
    662  2d6c		       30		      BYTE.b	%00110000
    663  2d6d		       30		      BYTE.b	%00110000
    664  2d6e		       00		      BYTE.b	%00000000
    665  2d6f		       00		      BYTE.b	%00000000
    666  2d70		       00		      BYTE.b	%00000000
    667  2d71		       00		      BYTE.b	%00000000
    668  2d72		       00		      BYTE.b	%00000000
    669  2d73		       00		      BYTE.b	%00000000
    670  2d74		       00		      BYTE.b	%00000000
    671  2d75		       00		      BYTE.b	%00000000
    672  2d76		       00		      BYTE.b	%00000000
    673  2d77		       00		      BYTE.b	%00000000
    674  2d78
    675  2d78				  -	      if	>. != >[.+(bmp_96x2_1_height)]
    676  2d78				  -	      align	256
    677  2d78					      endif
    678  2d78
    679  2d78				   bmp_96x2_1_09
    680  2d78		       00		      BYTE.b	%00000000
    681  2d79		       00		      BYTE.b	%00000000
    682  2d7a		       00		      BYTE.b	%00000000
    683  2d7b		       00		      BYTE.b	%00000000
    684  2d7c		       00		      BYTE.b	%00000000
    685  2d7d		       00		      BYTE.b	%00000000
    686  2d7e		       00		      BYTE.b	%00000000
    687  2d7f		       00		      BYTE.b	%00000000
    688  2d80		       00		      BYTE.b	%00000000
    689  2d81		       00		      BYTE.b	%00000000
    690  2d82		       00		      BYTE.b	%00000000
    691  2d83		       00		      BYTE.b	%00000000
    692  2d84		       00		      BYTE.b	%00000000
    693  2d85		       ff		      BYTE.b	%11111111
    694  2d86		       ff		      BYTE.b	%11111111
    695  2d87		       ff		      BYTE.b	%11111111
    696  2d88		       ff		      BYTE.b	%11111111
    697  2d89		       00		      BYTE.b	%00000000
    698  2d8a		       00		      BYTE.b	%00000000
    699  2d8b		       00		      BYTE.b	%00000000
    700  2d8c		       00		      BYTE.b	%00000000
    701  2d8d		       00		      BYTE.b	%00000000
    702  2d8e		       00		      BYTE.b	%00000000
    703  2d8f		       00		      BYTE.b	%00000000
    704  2d90		       00		      BYTE.b	%00000000
    705  2d91		       ff		      BYTE.b	%11111111
    706  2d92		       ff		      BYTE.b	%11111111
    707  2d93		       00		      BYTE.b	%00000000
    708  2d94		       00		      BYTE.b	%00000000
    709  2d95		       00		      BYTE.b	%00000000
    710  2d96		       00		      BYTE.b	%00000000
    711  2d97		       00		      BYTE.b	%00000000
    712  2d98		       00		      BYTE.b	%00000000
    713  2d99		       0f		      BYTE.b	%00001111
    714  2d9a		       8f		      BYTE.b	%10001111
    715  2d9b		       c3		      BYTE.b	%11000011
    716  2d9c		       c7		      BYTE.b	%11000111
    717  2d9d		       ce		      BYTE.b	%11001110
    718  2d9e		       cf		      BYTE.b	%11001111
    719  2d9f		       8f		      BYTE.b	%10001111
    720  2da0		       87		      BYTE.b	%10000111
    721  2da1		       00		      BYTE.b	%00000000
    722  2da2		       00		      BYTE.b	%00000000
    723  2da3		       00		      BYTE.b	%00000000
    724  2da4		       00		      BYTE.b	%00000000
    725  2da5		       00		      BYTE.b	%00000000
    726  2da6		       00		      BYTE.b	%00000000
    727  2da7		       00		      BYTE.b	%00000000
    728  2da8		       00		      BYTE.b	%00000000
    729  2da9		       00		      BYTE.b	%00000000
    730  2daa		       00		      BYTE.b	%00000000
    731  2dab		       00		      BYTE.b	%00000000
    732  2dac		       00		      BYTE.b	%00000000
    733  2dad		       00		      BYTE.b	%00000000
    734  2dae		       00		      BYTE.b	%00000000
    735  2daf		       00		      BYTE.b	%00000000
    736  2db0		       00		      BYTE.b	%00000000
    737  2db1		       00		      BYTE.b	%00000000
    738  2db2		       00		      BYTE.b	%00000000
    739  2db3		       00		      BYTE.b	%00000000
    740  2db4
    741  2db4				  -	      if	>. != >[.+(bmp_96x2_1_height)]
    742  2db4				  -	      align	256
    743  2db4					      endif
    744  2db4
    745  2db4				   bmp_96x2_1_10
    746  2db4		       00		      BYTE.b	%00000000
    747  2db5		       00		      BYTE.b	%00000000
    748  2db6		       00		      BYTE.b	%00000000
    749  2db7		       00		      BYTE.b	%00000000
    750  2db8		       00		      BYTE.b	%00000000
    751  2db9		       00		      BYTE.b	%00000000
    752  2dba		       00		      BYTE.b	%00000000
    753  2dbb		       00		      BYTE.b	%00000000
    754  2dbc		       00		      BYTE.b	%00000000
    755  2dbd		       01		      BYTE.b	%00000001
    756  2dbe		       07		      BYTE.b	%00000111
    757  2dbf		       0f		      BYTE.b	%00001111
    758  2dc0		       1f		      BYTE.b	%00011111
    759  2dc1		       ff		      BYTE.b	%11111111
    760  2dc2		       ff		      BYTE.b	%11111111
    761  2dc3		       ff		      BYTE.b	%11111111
    762  2dc4		       ff		      BYTE.b	%11111111
    763  2dc5		       1f		      BYTE.b	%00011111
    764  2dc6		       1f		      BYTE.b	%00011111
    765  2dc7		       0f		      BYTE.b	%00001111
    766  2dc8		       0f		      BYTE.b	%00001111
    767  2dc9		       07		      BYTE.b	%00000111
    768  2dca		       03		      BYTE.b	%00000011
    769  2dcb		       03		      BYTE.b	%00000011
    770  2dcc		       01		      BYTE.b	%00000001
    771  2dcd		       01		      BYTE.b	%00000001
    772  2dce		       80		      BYTE.b	%10000000
    773  2dcf		       00		      BYTE.b	%00000000
    774  2dd0		       00		      BYTE.b	%00000000
    775  2dd1		       00		      BYTE.b	%00000000
    776  2dd2		       00		      BYTE.b	%00000000
    777  2dd3		       00		      BYTE.b	%00000000
    778  2dd4		       00		      BYTE.b	%00000000
    779  2dd5		       87		      BYTE.b	%10000111
    780  2dd6		       cf		      BYTE.b	%11001111
    781  2dd7		       df		      BYTE.b	%11011111
    782  2dd8		       9d		      BYTE.b	%10011101
    783  2dd9		       1e		      BYTE.b	%00011110
    784  2dda		       df		      BYTE.b	%11011111
    785  2ddb		       cf		      BYTE.b	%11001111
    786  2ddc		       c7		      BYTE.b	%11000111
    787  2ddd		       00		      BYTE.b	%00000000
    788  2dde		       00		      BYTE.b	%00000000
    789  2ddf		       00		      BYTE.b	%00000000
    790  2de0		       00		      BYTE.b	%00000000
    791  2de1		       00		      BYTE.b	%00000000
    792  2de2		       00		      BYTE.b	%00000000
    793  2de3		       00		      BYTE.b	%00000000
    794  2de4		       00		      BYTE.b	%00000000
    795  2de5		       00		      BYTE.b	%00000000
    796  2de6		       00		      BYTE.b	%00000000
    797  2de7		       00		      BYTE.b	%00000000
    798  2de8		       00		      BYTE.b	%00000000
    799  2de9		       00		      BYTE.b	%00000000
    800  2dea		       00		      BYTE.b	%00000000
    801  2deb		       00		      BYTE.b	%00000000
    802  2dec		       00		      BYTE.b	%00000000
    803  2ded		       00		      BYTE.b	%00000000
    804  2dee		       00		      BYTE.b	%00000000
    805  2def		       00		      BYTE.b	%00000000
    806  2df0
    807  2df0					      if	>. != >[.+(bmp_96x2_1_height)]
    808  2e00		       00 00 00 00*	      align	256
    809  2e00					      endif
    810  2e00
    811  2e00				   bmp_96x2_1_11
    812  2e00		       00		      BYTE.b	%00000000
    813  2e01		       00		      BYTE.b	%00000000
    814  2e02		       00		      BYTE.b	%00000000
    815  2e03		       00		      BYTE.b	%00000000
    816  2e04		       00		      BYTE.b	%00000000
    817  2e05		       00		      BYTE.b	%00000000
    818  2e06		       00		      BYTE.b	%00000000
    819  2e07		       40		      BYTE.b	%01000000
    820  2e08		       fc		      BYTE.b	%11111100
    821  2e09		       fc		      BYTE.b	%11111100
    822  2e0a		       f8		      BYTE.b	%11111000
    823  2e0b		       f8		      BYTE.b	%11111000
    824  2e0c		       fc		      BYTE.b	%11111100
    825  2e0d		       fe		      BYTE.b	%11111110
    826  2e0e		       ff		      BYTE.b	%11111111
    827  2e0f		       ff		      BYTE.b	%11111111
    828  2e10		       fe		      BYTE.b	%11111110
    829  2e11		       fe		      BYTE.b	%11111110
    830  2e12		       fc		      BYTE.b	%11111100
    831  2e13		       fc		      BYTE.b	%11111100
    832  2e14		       f8		      BYTE.b	%11111000
    833  2e15		       fc		      BYTE.b	%11111100
    834  2e16		       fc		      BYTE.b	%11111100
    835  2e17		       fc		      BYTE.b	%11111100
    836  2e18		       fe		      BYTE.b	%11111110
    837  2e19		       fe		      BYTE.b	%11111110
    838  2e1a		       fe		      BYTE.b	%11111110
    839  2e1b		       7f		      BYTE.b	%01111111
    840  2e1c		       7f		      BYTE.b	%01111111
    841  2e1d		       3f		      BYTE.b	%00111111
    842  2e1e		       1f		      BYTE.b	%00011111
    843  2e1f		       00		      BYTE.b	%00000000
    844  2e20		       00		      BYTE.b	%00000000
    845  2e21		       c0		      BYTE.b	%11000000
    846  2e22		       e0		      BYTE.b	%11100000
    847  2e23		       80		      BYTE.b	%10000000
    848  2e24		       c0		      BYTE.b	%11000000
    849  2e25		       e0		      BYTE.b	%11100000
    850  2e26		       e0		      BYTE.b	%11100000
    851  2e27		       e0		      BYTE.b	%11100000
    852  2e28		       c0		      BYTE.b	%11000000
    853  2e29		       00		      BYTE.b	%00000000
    854  2e2a		       00		      BYTE.b	%00000000
    855  2e2b		       00		      BYTE.b	%00000000
    856  2e2c		       00		      BYTE.b	%00000000
    857  2e2d		       00		      BYTE.b	%00000000
    858  2e2e		       00		      BYTE.b	%00000000
    859  2e2f		       00		      BYTE.b	%00000000
    860  2e30		       00		      BYTE.b	%00000000
    861  2e31		       00		      BYTE.b	%00000000
    862  2e32		       00		      BYTE.b	%00000000
    863  2e33		       00		      BYTE.b	%00000000
    864  2e34		       00		      BYTE.b	%00000000
    865  2e35		       00		      BYTE.b	%00000000
    866  2e36		       00		      BYTE.b	%00000000
    867  2e37		       00		      BYTE.b	%00000000
    868  2e38		       00		      BYTE.b	%00000000
    869  2e39		       00		      BYTE.b	%00000000
    870  2e3a		       00		      BYTE.b	%00000000
    871  2e3b		       00		      BYTE.b	%00000000
------- FILE titlescreen/asm/titlescreen.asm
    274  2e3c					      endif
    275  2e3c				  -	      ifconst	mk_96x2_2_on
    276  2e3c				  -	      include	"titlescreen/96x2_2_image.asm"
    277  2e3c					      endif
    278  2e3c				  -	      ifconst	mk_96x2_3_on
    279  2e3c				  -	      include	"titlescreen/96x2_3_image.asm"
    280  2e3c					      endif
    281  2e3c				  -	      ifconst	mk_96x2_4_on
    282  2e3c				  -	      include	"titlescreen/96x2_4_image.asm"
    283  2e3c					      endif
    284  2e3c				  -	      ifconst	mk_96x2_5_on
    285  2e3c				  -	      include	"titlescreen/96x2_5_image.asm"
    286  2e3c					      endif
    287  2e3c				  -	      ifconst	mk_96x2_6_on
    288  2e3c				  -	      include	"titlescreen/96x2_6_image.asm"
    289  2e3c					      endif
    290  2e3c				  -	      ifconst	mk_96x2_7_on
    291  2e3c				  -	      include	"titlescreen/96x2_7_image.asm"
    292  2e3c					      endif
    293  2e3c				  -	      ifconst	mk_96x2_8_on
    294  2e3c				  -	      include	"titlescreen/96x2_8_image.asm"
    295  2e3c					      endif
    296  2e3c
    297  2e3c				  -	      ifconst	mk_player_on
    298  2e3c				  -	      include	"titlescreen/player_image.asm"
    299  2e3c					      endif
    300  2e3c
    301  2e3c					      ifconst	mk_score_on
------- FILE titlescreen/score_image.asm LEVEL 3 PASS 3
      0  2e3c					      include	"titlescreen/score_image.asm"
      1  2e3c							; feel free to modify the score graphics - just keep each digit 8 high
      2  2e3c							; if you're looking to want to modify any one font, pick on the
      3  2e3c
      4  2e3c				  -	      ifnconst	scorecolor
      5  2e3c				  -scorecolor
      6  2e3c					      endif
      7  2e3c							; ** change this value for a different scorecolor under DPC+
      8  2e3c							;    for other kernels, just use the scorecolor variable
      9  2e3c		       0f		      .byte.b	$0f
     10  2e3d
     11  2e3d				  -	      ifnconst	NOFONT
     12  2e3d				  -NOFONT     =	0
     13  2e3d					      endif
     14  2e3d				  -	      ifnconst	STOCK
     15  2e3d				  -STOCK      =	1	;_FONTNAME
     16  2e3d					      endif
     17  2e3d				  -	      ifnconst	NEWCENTURY
     18  2e3d				  -NEWCENTURY =	2	;_FONTNAME
     19  2e3d					      endif
     20  2e3d				  -	      ifnconst	WHIMSEY
     21  2e3d				  -WHIMSEY    =	3	;_FONTNAME
     22  2e3d					      endif
     23  2e3d				  -	      ifnconst	ALARMCLOCK
     24  2e3d				  -ALARMCLOCK =	4	;_FONTNAME
     25  2e3d					      endif
     26  2e3d				  -	      ifnconst	HANDWRITTEN
     27  2e3d				  -HANDWRITTEN =	5	;_FONTNAME
     28  2e3d					      endif
     29  2e3d				  -	      ifnconst	INTERRUPTED
     30  2e3d				  -INTERRUPTED =	6	;_FONTNAME
     31  2e3d					      endif
     32  2e3d				  -	      ifnconst	TINY
     33  2e3d				  -TINY       =	7	;_FONTNAME
     34  2e3d					      endif
     35  2e3d				  -	      ifnconst	RETROPUTER
     36  2e3d				  -RETROPUTER =	8	;_FONTNAME
     37  2e3d					      endif
     38  2e3d				  -	      ifnconst	CURVES
     39  2e3d				  -CURVES     =	9	;_FONTNAME
     40  2e3d					      endif
     41  2e3d				  -	      ifnconst	HUSKY
     42  2e3d				  -HUSKY      =	10	;_FONTNAME
     43  2e3d					      endif
     44  2e3d				  -	      ifnconst	SNAKE
     45  2e3d				  -SNAKE      =	11	;_FONTNAME
     46  2e3d					      endif
     47  2e3d				  -	      ifnconst	PLOK
     48  2e3d				  -PLOK       =	13	;_FONTNAME
     49  2e3d					      endif
     50  2e3d
     51  2e3d				  -	      ifnconst	SYMBOLS
     52  2e3d				  -SYMBOLS    =	0	;_FONTNAME
     53  2e3d					      endif
     54  2e3d
     55  2e3d							; ### setup some defaults
     56  2e3d				  -	      ifnconst	fontstyle
     57  2e3d				  -fontstyle  =	STOCK
     58  2e3d					      endif
     59  2e3d
     60  2e3d							;fix up the table alignment, if necessary
     61  2e3d				  -	      if	>. != >[.+81]
     62  2e3d				  -	      align	256
     63  2e3d					      endif
     64  2e3d
     65  2e3d
     66  2e3d				   miniscoretable
     67  2e3d
     68  2e3d					      if	fontstyle == STOCK
     69  2e3d
     70  2e3d							;byte %00000000 ; STOCK
     71  2e3d
     72  2e3d		       3c		      .byte.b	%00111100	; STOCK
     73  2e3e		       66		      .byte.b	%01100110	; STOCK
     74  2e3f		       66		      .byte.b	%01100110	; STOCK
     75  2e40		       66		      .byte.b	%01100110	; STOCK
     76  2e41		       66		      .byte.b	%01100110	; STOCK
     77  2e42		       66		      .byte.b	%01100110	; STOCK
     78  2e43		       66		      .byte.b	%01100110	; STOCK
     79  2e44		       3c		      .byte.b	%00111100	; STOCK
     80  2e45
     81  2e45							;byte %00000000 ; STOCK
     82  2e45
     83  2e45		       7e		      .byte.b	%01111110	; STOCK
     84  2e46		       18		      .byte.b	%00011000	; STOCK
     85  2e47		       18		      .byte.b	%00011000	; STOCK
     86  2e48		       18		      .byte.b	%00011000	; STOCK
     87  2e49		       18		      .byte.b	%00011000	; STOCK
     88  2e4a		       38		      .byte.b	%00111000	; STOCK
     89  2e4b		       18		      .byte.b	%00011000	; STOCK
     90  2e4c		       08		      .byte.b	%00001000	; STOCK
     91  2e4d
     92  2e4d							;byte %00000000 ; STOCK
     93  2e4d
     94  2e4d		       7e		      .byte.b	%01111110	; STOCK
     95  2e4e		       60		      .byte.b	%01100000	; STOCK
     96  2e4f		       60		      .byte.b	%01100000	; STOCK
     97  2e50		       3c		      .byte.b	%00111100	; STOCK
     98  2e51		       06		      .byte.b	%00000110	; STOCK
     99  2e52		       06		      .byte.b	%00000110	; STOCK
    100  2e53		       46		      .byte.b	%01000110	; STOCK
    101  2e54		       3c		      .byte.b	%00111100	; STOCK
    102  2e55
    103  2e55							;byte %00000000 ; STOCK
    104  2e55
    105  2e55		       3c		      .byte.b	%00111100	; STOCK
    106  2e56		       46		      .byte.b	%01000110	; STOCK
    107  2e57		       06		      .byte.b	%00000110	; STOCK
    108  2e58		       06		      .byte.b	%00000110	; STOCK
    109  2e59		       1c		      .byte.b	%00011100	; STOCK
    110  2e5a		       06		      .byte.b	%00000110	; STOCK
    111  2e5b		       46		      .byte.b	%01000110	; STOCK
    112  2e5c		       3c		      .byte.b	%00111100	; STOCK
    113  2e5d
    114  2e5d							;byte %00000000 ; STOCK
    115  2e5d
    116  2e5d		       0c		      .byte.b	%00001100	; STOCK
    117  2e5e		       0c		      .byte.b	%00001100	; STOCK
    118  2e5f		       7e		      .byte.b	%01111110	; STOCK
    119  2e60		       4c		      .byte.b	%01001100	; STOCK
    120  2e61		       4c		      .byte.b	%01001100	; STOCK
    121  2e62		       2c		      .byte.b	%00101100	; STOCK
    122  2e63		       1c		      .byte.b	%00011100	; STOCK
    123  2e64		       0c		      .byte.b	%00001100	; STOCK
    124  2e65
    125  2e65							;byte %00000000 ; STOCK
    126  2e65
    127  2e65		       3c		      .byte.b	%00111100	; STOCK
    128  2e66		       46		      .byte.b	%01000110	; STOCK
    129  2e67		       06		      .byte.b	%00000110	; STOCK
    130  2e68		       06		      .byte.b	%00000110	; STOCK
    131  2e69		       3c		      .byte.b	%00111100	; STOCK
    132  2e6a		       60		      .byte.b	%01100000	; STOCK
    133  2e6b		       60		      .byte.b	%01100000	; STOCK
    134  2e6c		       7e		      .byte.b	%01111110	; STOCK
    135  2e6d
    136  2e6d							;byte %00000000 ; STOCK
    137  2e6d
    138  2e6d		       3c		      .byte.b	%00111100	; STOCK
    139  2e6e		       66		      .byte.b	%01100110	; STOCK
    140  2e6f		       66		      .byte.b	%01100110	; STOCK
    141  2e70		       66		      .byte.b	%01100110	; STOCK
    142  2e71		       7c		      .byte.b	%01111100	; STOCK
    143  2e72		       60		      .byte.b	%01100000	; STOCK
    144  2e73		       62		      .byte.b	%01100010	; STOCK
    145  2e74		       3c		      .byte.b	%00111100	; STOCK
    146  2e75
    147  2e75							;byte %00000000 ; STOCK
    148  2e75
    149  2e75		       30		      .byte.b	%00110000	; STOCK
    150  2e76		       30		      .byte.b	%00110000	; STOCK
    151  2e77		       30		      .byte.b	%00110000	; STOCK
    152  2e78		       18		      .byte.b	%00011000	; STOCK
    153  2e79		       0c		      .byte.b	%00001100	; STOCK
    154  2e7a		       06		      .byte.b	%00000110	; STOCK
    155  2e7b		       42		      .byte.b	%01000010	; STOCK
    156  2e7c		       3e		      .byte.b	%00111110	; STOCK
    157  2e7d
    158  2e7d							;byte %00000000 ; STOCK
    159  2e7d
    160  2e7d		       3c		      .byte.b	%00111100	; STOCK
    161  2e7e		       66		      .byte.b	%01100110	; STOCK
    162  2e7f		       66		      .byte.b	%01100110	; STOCK
    163  2e80		       66		      .byte.b	%01100110	; STOCK
    164  2e81		       3c		      .byte.b	%00111100	; STOCK
    165  2e82		       66		      .byte.b	%01100110	; STOCK
    166  2e83		       66		      .byte.b	%01100110	; STOCK
    167  2e84		       3c		      .byte.b	%00111100	; STOCK
    168  2e85
    169  2e85							;byte %00000000 ; STOCK
    170  2e85
    171  2e85		       3c		      .byte.b	%00111100	; STOCK
    172  2e86		       46		      .byte.b	%01000110	; STOCK
    173  2e87		       06		      .byte.b	%00000110	; STOCK
    174  2e88		       3e		      .byte.b	%00111110	; STOCK
    175  2e89		       66		      .byte.b	%01100110	; STOCK
    176  2e8a		       66		      .byte.b	%01100110	; STOCK
    177  2e8b		       66		      .byte.b	%01100110	; STOCK
    178  2e8c		       3c		      .byte.b	%00111100	; STOCK
    179  2e8d
    180  2e8d					      endif		; STOCK
    181  2e8d
    182  2e8d				  -	      if	fontstyle == NEWCENTURY
    183  2e8d				  -			;byte %00000000 ; NEWCENTURY
    184  2e8d				  -
    185  2e8d				  -	      .byte	%00111100	; NEWCENTURY
    186  2e8d				  -	      .byte	%01000010	; NEWCENTURY
    187  2e8d				  -	      .byte	%01000010	; NEWCENTURY
    188  2e8d				  -	      .byte	%01000010	; NEWCENTURY
    189  2e8d				  -	      .byte	%00100100	; NEWCENTURY
    190  2e8d				  -	      .byte	%00100100	; NEWCENTURY
    191  2e8d				  -	      .byte	%00100100	; NEWCENTURY
    192  2e8d				  -	      .byte	%00011000	; NEWCENTURY
    193  2e8d				  -
    194  2e8d				  -			;byte %00000000 ; NEWCENTURY
    195  2e8d				  -
    196  2e8d				  -	      .byte	%00001000	; NEWCENTURY
    197  2e8d				  -	      .byte	%00001000	; NEWCENTURY
    198  2e8d				  -	      .byte	%00001000	; NEWCENTURY
    199  2e8d				  -	      .byte	%00001000	; NEWCENTURY
    200  2e8d				  -	      .byte	%00001000	; NEWCENTURY
    201  2e8d				  -	      .byte	%00001000	; NEWCENTURY
    202  2e8d				  -	      .byte	%00001000	; NEWCENTURY
    203  2e8d				  -	      .byte	%00001000	; NEWCENTURY
    204  2e8d				  -
    205  2e8d				  -			;byte %00000000 ; NEWCENTURY
    206  2e8d				  -
    207  2e8d				  -	      .byte	%01111110	; NEWCENTURY
    208  2e8d				  -	      .byte	%01000000	; NEWCENTURY
    209  2e8d				  -	      .byte	%01000000	; NEWCENTURY
    210  2e8d				  -	      .byte	%00100000	; NEWCENTURY
    211  2e8d				  -	      .byte	%00011100	; NEWCENTURY
    212  2e8d				  -	      .byte	%00000010	; NEWCENTURY
    213  2e8d				  -	      .byte	%00000010	; NEWCENTURY
    214  2e8d				  -	      .byte	%00011100	; NEWCENTURY
    215  2e8d				  -
    216  2e8d				  -			;byte %00000000 ; NEWCENTURY
    217  2e8d				  -
    218  2e8d				  -	      .byte	%01111100	; NEWCENTURY
    219  2e8d				  -	      .byte	%00000010	; NEWCENTURY
    220  2e8d				  -	      .byte	%00000010	; NEWCENTURY
    221  2e8d				  -	      .byte	%00000010	; NEWCENTURY
    222  2e8d				  -	      .byte	%00111100	; NEWCENTURY
    223  2e8d				  -	      .byte	%00000010	; NEWCENTURY
    224  2e8d				  -	      .byte	%00000010	; NEWCENTURY
    225  2e8d				  -	      .byte	%00011100	; NEWCENTURY
    226  2e8d				  -
    227  2e8d				  -			;byte %00000000 ; NEWCENTURY
    228  2e8d				  -
    229  2e8d				  -	      .byte	%00000010	; NEWCENTURY
    230  2e8d				  -	      .byte	%00000010	; NEWCENTURY
    231  2e8d				  -	      .byte	%00000010	; NEWCENTURY
    232  2e8d				  -	      .byte	%00111110	; NEWCENTURY
    233  2e8d				  -	      .byte	%00100010	; NEWCENTURY
    234  2e8d				  -	      .byte	%00100010	; NEWCENTURY
    235  2e8d				  -	      .byte	%00010010	; NEWCENTURY
    236  2e8d				  -	      .byte	%00010010	; NEWCENTURY
    237  2e8d				  -
    238  2e8d				  -			;byte %00000000 ; NEWCENTURY
    239  2e8d				  -
    240  2e8d				  -	      .byte	%01111100	; NEWCENTURY
    241  2e8d				  -	      .byte	%00000010	; NEWCENTURY
    242  2e8d				  -	      .byte	%00000010	; NEWCENTURY
    243  2e8d				  -	      .byte	%00000010	; NEWCENTURY
    244  2e8d				  -	      .byte	%01111100	; NEWCENTURY
    245  2e8d				  -	      .byte	%01000000	; NEWCENTURY
    246  2e8d				  -	      .byte	%01000000	; NEWCENTURY
    247  2e8d				  -	      .byte	%01111000	; NEWCENTURY
    248  2e8d				  -
    249  2e8d				  -			;byte %00000000 ; NEWCENTURY
    250  2e8d				  -
    251  2e8d				  -	      .byte	%00111100	; NEWCENTURY
    252  2e8d				  -	      .byte	%01000010	; NEWCENTURY
    253  2e8d				  -	      .byte	%01000010	; NEWCENTURY
    254  2e8d				  -	      .byte	%01000010	; NEWCENTURY
    255  2e8d				  -	      .byte	%01111100	; NEWCENTURY
    256  2e8d				  -	      .byte	%01000000	; NEWCENTURY
    257  2e8d				  -	      .byte	%01000000	; NEWCENTURY
    258  2e8d				  -	      .byte	%00110000	; NEWCENTURY
    259  2e8d				  -
    260  2e8d				  -			;byte %00000000 ; NEWCENTURY
    261  2e8d				  -
    262  2e8d				  -	      .byte	%00010000	; NEWCENTURY
    263  2e8d				  -	      .byte	%00010000	; NEWCENTURY
    264  2e8d				  -	      .byte	%00001000	; NEWCENTURY
    265  2e8d				  -	      .byte	%00001000	; NEWCENTURY
    266  2e8d				  -	      .byte	%00000100	; NEWCENTURY
    267  2e8d				  -	      .byte	%00000100	; NEWCENTURY
    268  2e8d				  -	      .byte	%00000010	; NEWCENTURY
    269  2e8d				  -	      .byte	%00011110	; NEWCENTURY
    270  2e8d				  -
    271  2e8d				  -			;byte %00000000 ; NEWCENTURY
    272  2e8d				  -
    273  2e8d				  -	      .byte	%00111100	; NEWCENTURY
    274  2e8d				  -	      .byte	%01000010	; NEWCENTURY
    275  2e8d				  -	      .byte	%01000010	; NEWCENTURY
    276  2e8d				  -	      .byte	%01000010	; NEWCENTURY
    277  2e8d				  -	      .byte	%00111100	; NEWCENTURY
    278  2e8d				  -	      .byte	%00100100	; NEWCENTURY
    279  2e8d				  -	      .byte	%00100100	; NEWCENTURY
    280  2e8d				  -	      .byte	%00011000	; NEWCENTURY
    281  2e8d				  -
    282  2e8d				  -			;byte %00000000 ; NEWCENTURY
    283  2e8d				  -
    284  2e8d				  -	      .byte	%00111100	; NEWCENTURY
    285  2e8d				  -	      .byte	%00000010	; NEWCENTURY
    286  2e8d				  -	      .byte	%00000010	; NEWCENTURY
    287  2e8d				  -	      .byte	%00000010	; NEWCENTURY
    288  2e8d				  -	      .byte	%00001110	; NEWCENTURY
    289  2e8d				  -	      .byte	%00010010	; NEWCENTURY
    290  2e8d				  -	      .byte	%00010010	; NEWCENTURY
    291  2e8d				  -	      .byte	%00001100	; NEWCENTURY
    292  2e8d				  -
    293  2e8d					      endif		; NEWCENTURY
    294  2e8d
    295  2e8d				  -	      if	fontstyle == WHIMSEY
    296  2e8d				  -			;byte %00000000 ; WHIMSEY
    297  2e8d				  -
    298  2e8d				  -	      .byte	%00111100	; WHIMSEY
    299  2e8d				  -	      .byte	%01111110	; WHIMSEY
    300  2e8d				  -	      .byte	%01111110	; WHIMSEY
    301  2e8d				  -	      .byte	%01111110	; WHIMSEY
    302  2e8d				  -	      .byte	%01110110	; WHIMSEY
    303  2e8d				  -	      .byte	%01110110	; WHIMSEY
    304  2e8d				  -	      .byte	%01110110	; WHIMSEY
    305  2e8d				  -	      .byte	%00111100	; WHIMSEY
    306  2e8d				  -
    307  2e8d				  -			;byte %00000000 ; WHIMSEY
    308  2e8d				  -
    309  2e8d				  -	      .byte	%01111110	; WHIMSEY
    310  2e8d				  -	      .byte	%01111110	; WHIMSEY
    311  2e8d				  -	      .byte	%01111110	; WHIMSEY
    312  2e8d				  -	      .byte	%00011000	; WHIMSEY
    313  2e8d				  -	      .byte	%00011000	; WHIMSEY
    314  2e8d				  -	      .byte	%00011000	; WHIMSEY
    315  2e8d				  -	      .byte	%01111000	; WHIMSEY
    316  2e8d				  -	      .byte	%00011000	; WHIMSEY
    317  2e8d				  -
    318  2e8d				  -			;byte %00000000 ; WHIMSEY
    319  2e8d				  -
    320  2e8d				  -	      .byte	%01111110	; WHIMSEY
    321  2e8d				  -	      .byte	%01111110	; WHIMSEY
    322  2e8d				  -	      .byte	%01111110	; WHIMSEY
    323  2e8d				  -	      .byte	%01111000	; WHIMSEY
    324  2e8d				  -	      .byte	%00111100	; WHIMSEY
    325  2e8d				  -	      .byte	%00001110	; WHIMSEY
    326  2e8d				  -	      .byte	%01100110	; WHIMSEY
    327  2e8d				  -	      .byte	%00111100	; WHIMSEY
    328  2e8d				  -
    329  2e8d				  -			;byte %00000000 ; WHIMSEY
    330  2e8d				  -
    331  2e8d				  -	      .byte	%00111100	; WHIMSEY
    332  2e8d				  -	      .byte	%01111110	; WHIMSEY
    333  2e8d				  -	      .byte	%01111110	; WHIMSEY
    334  2e8d				  -	      .byte	%01101110	; WHIMSEY
    335  2e8d				  -	      .byte	%00001110	; WHIMSEY
    336  2e8d				  -	      .byte	%00111100	; WHIMSEY
    337  2e8d				  -	      .byte	%00011100	; WHIMSEY
    338  2e8d				  -	      .byte	%01111110	; WHIMSEY
    339  2e8d				  -
    340  2e8d				  -			;byte %00000000 ; WHIMSEY
    341  2e8d				  -
    342  2e8d				  -	      .byte	%00011100	; WHIMSEY
    343  2e8d				  -	      .byte	%00011100	; WHIMSEY
    344  2e8d				  -	      .byte	%01111110	; WHIMSEY
    345  2e8d				  -	      .byte	%01011100	; WHIMSEY
    346  2e8d				  -	      .byte	%01011100	; WHIMSEY
    347  2e8d				  -	      .byte	%00011100	; WHIMSEY
    348  2e8d				  -	      .byte	%00011100	; WHIMSEY
    349  2e8d				  -	      .byte	%00011100	; WHIMSEY
    350  2e8d				  -
    351  2e8d				  -			;byte %00000000 ; WHIMSEY
    352  2e8d				  -
    353  2e8d				  -	      .byte	%00111100	; WHIMSEY
    354  2e8d				  -	      .byte	%01111110	; WHIMSEY
    355  2e8d				  -	      .byte	%01111110	; WHIMSEY
    356  2e8d				  -	      .byte	%01101110	; WHIMSEY
    357  2e8d				  -	      .byte	%00001110	; WHIMSEY
    358  2e8d				  -	      .byte	%01111100	; WHIMSEY
    359  2e8d				  -	      .byte	%01110000	; WHIMSEY
    360  2e8d				  -	      .byte	%01111110	; WHIMSEY
    361  2e8d				  -
    362  2e8d				  -			;byte %00000000 ; WHIMSEY
    363  2e8d				  -
    364  2e8d				  -	      .byte	%00111100	; WHIMSEY
    365  2e8d				  -	      .byte	%01111110	; WHIMSEY
    366  2e8d				  -	      .byte	%01111110	; WHIMSEY
    367  2e8d				  -	      .byte	%01110110	; WHIMSEY
    368  2e8d				  -	      .byte	%01110110	; WHIMSEY
    369  2e8d				  -	      .byte	%01111100	; WHIMSEY
    370  2e8d				  -	      .byte	%01110000	; WHIMSEY
    371  2e8d				  -	      .byte	%00111110	; WHIMSEY
    372  2e8d				  -
    373  2e8d				  -			;byte %00000000 ; WHIMSEY
    374  2e8d				  -
    375  2e8d				  -	      .byte	%01111000	; WHIMSEY
    376  2e8d				  -	      .byte	%01111000	; WHIMSEY
    377  2e8d				  -	      .byte	%01111000	; WHIMSEY
    378  2e8d				  -	      .byte	%00111100	; WHIMSEY
    379  2e8d				  -	      .byte	%00011100	; WHIMSEY
    380  2e8d				  -	      .byte	%00001110	; WHIMSEY
    381  2e8d				  -	      .byte	%00001110	; WHIMSEY
    382  2e8d				  -	      .byte	%01111110	; WHIMSEY
    383  2e8d				  -
    384  2e8d				  -			;byte %00000000 ; WHIMSEY
    385  2e8d				  -
    386  2e8d				  -	      .byte	%00111100	; WHIMSEY
    387  2e8d				  -	      .byte	%01111110	; WHIMSEY
    388  2e8d				  -	      .byte	%01111110	; WHIMSEY
    389  2e8d				  -	      .byte	%01110110	; WHIMSEY
    390  2e8d				  -	      .byte	%01110110	; WHIMSEY
    391  2e8d				  -	      .byte	%00111100	; WHIMSEY
    392  2e8d				  -	      .byte	%01110110	; WHIMSEY
    393  2e8d				  -	      .byte	%00111100	; WHIMSEY
    394  2e8d				  -
    395  2e8d				  -			;byte %00000000 ; WHIMSEY
    396  2e8d				  -
    397  2e8d				  -	      .byte	%00111100	; WHIMSEY
    398  2e8d				  -	      .byte	%01111110	; WHIMSEY
    399  2e8d				  -	      .byte	%01111110	; WHIMSEY
    400  2e8d				  -	      .byte	%01110110	; WHIMSEY
    401  2e8d				  -	      .byte	%00000110	; WHIMSEY
    402  2e8d				  -	      .byte	%00111110	; WHIMSEY
    403  2e8d				  -	      .byte	%01110110	; WHIMSEY
    404  2e8d				  -	      .byte	%00111100	; WHIMSEY
    405  2e8d				  -
    406  2e8d					      endif		; WHIMSEY
    407  2e8d
    408  2e8d				  -	      if	fontstyle == ALARMCLOCK
    409  2e8d				  -
    410  2e8d				  -			;byte %00000000 ; ALARMCLOCK
    411  2e8d				  -
    412  2e8d				  -	      .byte	%00111100	; ALARMCLOCK
    413  2e8d				  -	      .byte	%01000010	; ALARMCLOCK
    414  2e8d				  -	      .byte	%01000010	; ALARMCLOCK
    415  2e8d				  -	      .byte	%01000010	; ALARMCLOCK
    416  2e8d				  -	      .byte	%00000000	; ALARMCLOCK
    417  2e8d				  -	      .byte	%01000010	; ALARMCLOCK
    418  2e8d				  -	      .byte	%01000010	; ALARMCLOCK
    419  2e8d				  -	      .byte	%00111100	; ALARMCLOCK
    420  2e8d				  -
    421  2e8d				  -			;byte %00000000 ; ALARMCLOCK
    422  2e8d				  -
    423  2e8d				  -	      .byte	%00000000	; ALARMCLOCK
    424  2e8d				  -	      .byte	%00000010	; ALARMCLOCK
    425  2e8d				  -	      .byte	%00000010	; ALARMCLOCK
    426  2e8d				  -	      .byte	%00000010	; ALARMCLOCK
    427  2e8d				  -	      .byte	%00000000	; ALARMCLOCK
    428  2e8d				  -	      .byte	%00000010	; ALARMCLOCK
    429  2e8d				  -	      .byte	%00000010	; ALARMCLOCK
    430  2e8d				  -	      .byte	%00000000	; ALARMCLOCK
    431  2e8d				  -
    432  2e8d				  -			;byte %00000000 ; ALARMCLOCK
    433  2e8d				  -
    434  2e8d				  -	      .byte	%00111100	; ALARMCLOCK
    435  2e8d				  -	      .byte	%01000000	; ALARMCLOCK
    436  2e8d				  -	      .byte	%01000000	; ALARMCLOCK
    437  2e8d				  -	      .byte	%01000000	; ALARMCLOCK
    438  2e8d				  -	      .byte	%00111100	; ALARMCLOCK
    439  2e8d				  -	      .byte	%00000010	; ALARMCLOCK
    440  2e8d				  -	      .byte	%00000010	; ALARMCLOCK
    441  2e8d				  -	      .byte	%00111100	; ALARMCLOCK
    442  2e8d				  -
    443  2e8d				  -			;byte %00000000 ; ALARMCLOCK
    444  2e8d				  -
    445  2e8d				  -	      .byte	%00111100	; ALARMCLOCK
    446  2e8d				  -	      .byte	%00000010	; ALARMCLOCK
    447  2e8d				  -	      .byte	%00000010	; ALARMCLOCK
    448  2e8d				  -	      .byte	%00000010	; ALARMCLOCK
    449  2e8d				  -	      .byte	%00111100	; ALARMCLOCK
    450  2e8d				  -	      .byte	%00000010	; ALARMCLOCK
    451  2e8d				  -	      .byte	%00000010	; ALARMCLOCK
    452  2e8d				  -	      .byte	%00111100	; ALARMCLOCK
    453  2e8d				  -
    454  2e8d				  -			;byte %00000000 ; ALARMCLOCK
    455  2e8d				  -
    456  2e8d				  -	      .byte	%00000000	; ALARMCLOCK
    457  2e8d				  -	      .byte	%00000010	; ALARMCLOCK
    458  2e8d				  -	      .byte	%00000010	; ALARMCLOCK
    459  2e8d				  -	      .byte	%00000010	; ALARMCLOCK
    460  2e8d				  -	      .byte	%00111100	; ALARMCLOCK
    461  2e8d				  -	      .byte	%01000010	; ALARMCLOCK
    462  2e8d				  -	      .byte	%01000010	; ALARMCLOCK
    463  2e8d				  -	      .byte	%00000000	; ALARMCLOCK
    464  2e8d				  -
    465  2e8d				  -			;byte %00000000 ; ALARMCLOCK
    466  2e8d				  -
    467  2e8d				  -	      .byte	%00111100	; ALARMCLOCK
    468  2e8d				  -	      .byte	%00000010	; ALARMCLOCK
    469  2e8d				  -	      .byte	%00000010	; ALARMCLOCK
    470  2e8d				  -	      .byte	%00000010	; ALARMCLOCK
    471  2e8d				  -	      .byte	%00111100	; ALARMCLOCK
    472  2e8d				  -	      .byte	%01000000	; ALARMCLOCK
    473  2e8d				  -	      .byte	%01000000	; ALARMCLOCK
    474  2e8d				  -	      .byte	%00111100	; ALARMCLOCK
    475  2e8d				  -
    476  2e8d				  -			;byte %00000000 ; ALARMCLOCK
    477  2e8d				  -
    478  2e8d				  -	      .byte	%00111100	; ALARMCLOCK
    479  2e8d				  -	      .byte	%01000010	; ALARMCLOCK
    480  2e8d				  -	      .byte	%01000010	; ALARMCLOCK
    481  2e8d				  -	      .byte	%01000010	; ALARMCLOCK
    482  2e8d				  -	      .byte	%00111100	; ALARMCLOCK
    483  2e8d				  -	      .byte	%01000000	; ALARMCLOCK
    484  2e8d				  -	      .byte	%01000000	; ALARMCLOCK
    485  2e8d				  -	      .byte	%00111100	; ALARMCLOCK
    486  2e8d				  -
    487  2e8d				  -			;byte %00000000 ; ALARMCLOCK
    488  2e8d				  -
    489  2e8d				  -	      .byte	%00000000	; ALARMCLOCK
    490  2e8d				  -	      .byte	%00000010	; ALARMCLOCK
    491  2e8d				  -	      .byte	%00000010	; ALARMCLOCK
    492  2e8d				  -	      .byte	%00000010	; ALARMCLOCK
    493  2e8d				  -	      .byte	%00000000	; ALARMCLOCK
    494  2e8d				  -	      .byte	%00000010	; ALARMCLOCK
    495  2e8d				  -	      .byte	%00000010	; ALARMCLOCK
    496  2e8d				  -	      .byte	%00111100	; ALARMCLOCK
    497  2e8d				  -
    498  2e8d				  -			;byte %00000000 ; ALARMCLOCK
    499  2e8d				  -
    500  2e8d				  -	      .byte	%00111100	; ALARMCLOCK
    501  2e8d				  -	      .byte	%01000010	; ALARMCLOCK
    502  2e8d				  -	      .byte	%01000010	; ALARMCLOCK
    503  2e8d				  -	      .byte	%01000010	; ALARMCLOCK
    504  2e8d				  -	      .byte	%00111100	; ALARMCLOCK
    505  2e8d				  -	      .byte	%01000010	; ALARMCLOCK
    506  2e8d				  -	      .byte	%01000010	; ALARMCLOCK
    507  2e8d				  -	      .byte	%00111100	; ALARMCLOCK
    508  2e8d				  -
    509  2e8d				  -			;byte %00000000 ; ALARMCLOCK
    510  2e8d				  -
    511  2e8d				  -	      .byte	%00111100	; ALARMCLOCK
    512  2e8d				  -	      .byte	%00000010	; ALARMCLOCK
    513  2e8d				  -	      .byte	%00000010	; ALARMCLOCK
    514  2e8d				  -	      .byte	%00000010	; ALARMCLOCK
    515  2e8d				  -	      .byte	%00111100	; ALARMCLOCK
    516  2e8d				  -	      .byte	%01000010	; ALARMCLOCK
    517  2e8d				  -	      .byte	%01000010	; ALARMCLOCK
    518  2e8d				  -	      .byte	%00111100	; ALARMCLOCK
    519  2e8d				  -
    520  2e8d				  -
    521  2e8d					      endif		; ALARMCLOCK
    522  2e8d
    523  2e8d				  -	      if	fontstyle == HANDWRITTEN
    524  2e8d				  -
    525  2e8d				  -			;byte %00000000 ; HANDWRITTEN
    526  2e8d				  -
    527  2e8d				  -	      .byte	%00110000	; HANDWRITTEN
    528  2e8d				  -	      .byte	%01001000	; HANDWRITTEN
    529  2e8d				  -	      .byte	%01001000	; HANDWRITTEN
    530  2e8d				  -	      .byte	%01001000	; HANDWRITTEN
    531  2e8d				  -	      .byte	%00100100	; HANDWRITTEN
    532  2e8d				  -	      .byte	%00100100	; HANDWRITTEN
    533  2e8d				  -	      .byte	%00010010	; HANDWRITTEN
    534  2e8d				  -	      .byte	%00001100	; HANDWRITTEN
    535  2e8d				  -
    536  2e8d				  -			;byte %00000000 ; HANDWRITTEN
    537  2e8d				  -
    538  2e8d				  -	      .byte	%00010000	; HANDWRITTEN
    539  2e8d				  -	      .byte	%00010000	; HANDWRITTEN
    540  2e8d				  -	      .byte	%00010000	; HANDWRITTEN
    541  2e8d				  -	      .byte	%00001000	; HANDWRITTEN
    542  2e8d				  -	      .byte	%00001000	; HANDWRITTEN
    543  2e8d				  -	      .byte	%00001000	; HANDWRITTEN
    544  2e8d				  -	      .byte	%00000100	; HANDWRITTEN
    545  2e8d				  -	      .byte	%00000100	; HANDWRITTEN
    546  2e8d				  -
    547  2e8d				  -			;byte %00000000 ; HANDWRITTEN
    548  2e8d				  -
    549  2e8d				  -	      .byte	%01110000	; HANDWRITTEN
    550  2e8d				  -	      .byte	%01001100	; HANDWRITTEN
    551  2e8d				  -	      .byte	%01000000	; HANDWRITTEN
    552  2e8d				  -	      .byte	%00100000	; HANDWRITTEN
    553  2e8d				  -	      .byte	%00011000	; HANDWRITTEN
    554  2e8d				  -	      .byte	%00000100	; HANDWRITTEN
    555  2e8d				  -	      .byte	%00100010	; HANDWRITTEN
    556  2e8d				  -	      .byte	%00011100	; HANDWRITTEN
    557  2e8d				  -
    558  2e8d				  -			;byte %00000000 ; HANDWRITTEN
    559  2e8d				  -
    560  2e8d				  -	      .byte	%00110000	; HANDWRITTEN
    561  2e8d				  -	      .byte	%01001000	; HANDWRITTEN
    562  2e8d				  -	      .byte	%00000100	; HANDWRITTEN
    563  2e8d				  -	      .byte	%00000100	; HANDWRITTEN
    564  2e8d				  -	      .byte	%00011000	; HANDWRITTEN
    565  2e8d				  -	      .byte	%00000100	; HANDWRITTEN
    566  2e8d				  -	      .byte	%00100010	; HANDWRITTEN
    567  2e8d				  -	      .byte	%00011100	; HANDWRITTEN
    568  2e8d				  -
    569  2e8d				  -			;byte %00000000 ; HANDWRITTEN
    570  2e8d				  -
    571  2e8d				  -	      .byte	%00010000	; HANDWRITTEN
    572  2e8d				  -	      .byte	%00010000	; HANDWRITTEN
    573  2e8d				  -	      .byte	%00001000	; HANDWRITTEN
    574  2e8d				  -	      .byte	%01111000	; HANDWRITTEN
    575  2e8d				  -	      .byte	%01000100	; HANDWRITTEN
    576  2e8d				  -	      .byte	%00100100	; HANDWRITTEN
    577  2e8d				  -	      .byte	%00010010	; HANDWRITTEN
    578  2e8d				  -	      .byte	%00000010	; HANDWRITTEN
    579  2e8d				  -
    580  2e8d				  -			;byte %00000000 ; HANDWRITTEN
    581  2e8d				  -
    582  2e8d				  -	      .byte	%00110000	; HANDWRITTEN
    583  2e8d				  -	      .byte	%01001000	; HANDWRITTEN
    584  2e8d				  -	      .byte	%00000100	; HANDWRITTEN
    585  2e8d				  -	      .byte	%00000100	; HANDWRITTEN
    586  2e8d				  -	      .byte	%00011000	; HANDWRITTEN
    587  2e8d				  -	      .byte	%00100000	; HANDWRITTEN
    588  2e8d				  -	      .byte	%00010010	; HANDWRITTEN
    589  2e8d				  -	      .byte	%00001100	; HANDWRITTEN
    590  2e8d				  -
    591  2e8d				  -			;byte %00000000 ; HANDWRITTEN
    592  2e8d				  -
    593  2e8d				  -	      .byte	%00010000	; HANDWRITTEN
    594  2e8d				  -	      .byte	%00101000	; HANDWRITTEN
    595  2e8d				  -	      .byte	%00100100	; HANDWRITTEN
    596  2e8d				  -	      .byte	%00100100	; HANDWRITTEN
    597  2e8d				  -	      .byte	%00011000	; HANDWRITTEN
    598  2e8d				  -	      .byte	%00010000	; HANDWRITTEN
    599  2e8d				  -	      .byte	%00001000	; HANDWRITTEN
    600  2e8d				  -	      .byte	%00000110	; HANDWRITTEN
    601  2e8d				  -
    602  2e8d				  -			;byte %00000000 ; HANDWRITTEN
    603  2e8d				  -
    604  2e8d				  -	      .byte	%00010000	; HANDWRITTEN
    605  2e8d				  -	      .byte	%00010000	; HANDWRITTEN
    606  2e8d				  -	      .byte	%00010000	; HANDWRITTEN
    607  2e8d				  -	      .byte	%00001000	; HANDWRITTEN
    608  2e8d				  -	      .byte	%00000100	; HANDWRITTEN
    609  2e8d				  -	      .byte	%00000100	; HANDWRITTEN
    610  2e8d				  -	      .byte	%00110010	; HANDWRITTEN
    611  2e8d				  -	      .byte	%00001110	; HANDWRITTEN
    612  2e8d				  -
    613  2e8d				  -			;byte %00000000 ; HANDWRITTEN
    614  2e8d				  -
    615  2e8d				  -	      .byte	%00110000	; HANDWRITTEN
    616  2e8d				  -	      .byte	%01001000	; HANDWRITTEN
    617  2e8d				  -	      .byte	%01000100	; HANDWRITTEN
    618  2e8d				  -	      .byte	%00100100	; HANDWRITTEN
    619  2e8d				  -	      .byte	%00011100	; HANDWRITTEN
    620  2e8d				  -	      .byte	%00010010	; HANDWRITTEN
    621  2e8d				  -	      .byte	%00001010	; HANDWRITTEN
    622  2e8d				  -	      .byte	%00000110	; HANDWRITTEN
    623  2e8d				  -
    624  2e8d				  -			;byte %00000000 ; HANDWRITTEN
    625  2e8d				  -
    626  2e8d				  -	      .byte	%00010000	; HANDWRITTEN
    627  2e8d				  -	      .byte	%00010000	; HANDWRITTEN
    628  2e8d				  -	      .byte	%00001000	; HANDWRITTEN
    629  2e8d				  -	      .byte	%00001000	; HANDWRITTEN
    630  2e8d				  -	      .byte	%00011100	; HANDWRITTEN
    631  2e8d				  -	      .byte	%00100100	; HANDWRITTEN
    632  2e8d				  -	      .byte	%00010010	; HANDWRITTEN
    633  2e8d				  -	      .byte	%00001100	; HANDWRITTEN
    634  2e8d				  -
    635  2e8d					      endif		; HANDWRITTEN
    636  2e8d
    637  2e8d				  -	      if	fontstyle == INTERRUPTED
    638  2e8d				  -
    639  2e8d				  -			;byte %00000000 ; INTERRUPTED
    640  2e8d				  -
    641  2e8d				  -	      .byte	%00110100	; INTERRUPTED
    642  2e8d				  -	      .byte	%01100110	; INTERRUPTED
    643  2e8d				  -	      .byte	%01100110	; INTERRUPTED
    644  2e8d				  -	      .byte	%01100110	; INTERRUPTED
    645  2e8d				  -	      .byte	%01100110	; INTERRUPTED
    646  2e8d				  -	      .byte	%01100110	; INTERRUPTED
    647  2e8d				  -	      .byte	%01100110	; INTERRUPTED
    648  2e8d				  -	      .byte	%00110100	; INTERRUPTED
    649  2e8d				  -
    650  2e8d				  -			;byte %00000000 ; INTERRUPTED
    651  2e8d				  -
    652  2e8d				  -	      .byte	%00111100	; INTERRUPTED
    653  2e8d				  -	      .byte	%00000000	; INTERRUPTED
    654  2e8d				  -	      .byte	%00011000	; INTERRUPTED
    655  2e8d				  -	      .byte	%00011000	; INTERRUPTED
    656  2e8d				  -	      .byte	%00011000	; INTERRUPTED
    657  2e8d				  -	      .byte	%00011000	; INTERRUPTED
    658  2e8d				  -	      .byte	%00011000	; INTERRUPTED
    659  2e8d				  -	      .byte	%00111000	; INTERRUPTED
    660  2e8d				  -
    661  2e8d				  -			;byte %00000000 ; INTERRUPTED
    662  2e8d				  -
    663  2e8d				  -	      .byte	%01101110	; INTERRUPTED
    664  2e8d				  -	      .byte	%01100000	; INTERRUPTED
    665  2e8d				  -	      .byte	%00110000	; INTERRUPTED
    666  2e8d				  -	      .byte	%00011000	; INTERRUPTED
    667  2e8d				  -	      .byte	%00001100	; INTERRUPTED
    668  2e8d				  -	      .byte	%00000110	; INTERRUPTED
    669  2e8d				  -	      .byte	%01000110	; INTERRUPTED
    670  2e8d				  -	      .byte	%00111100	; INTERRUPTED
    671  2e8d				  -
    672  2e8d				  -			;byte %00000000 ; INTERRUPTED
    673  2e8d				  -
    674  2e8d				  -	      .byte	%01111100	; INTERRUPTED
    675  2e8d				  -	      .byte	%00000110	; INTERRUPTED
    676  2e8d				  -	      .byte	%00000110	; INTERRUPTED
    677  2e8d				  -	      .byte	%00000110	; INTERRUPTED
    678  2e8d				  -	      .byte	%01110110	; INTERRUPTED
    679  2e8d				  -	      .byte	%00000110	; INTERRUPTED
    680  2e8d				  -	      .byte	%00000110	; INTERRUPTED
    681  2e8d				  -	      .byte	%01110100	; INTERRUPTED
    682  2e8d				  -
    683  2e8d				  -			;byte %00000000 ; INTERRUPTED
    684  2e8d				  -
    685  2e8d				  -	      .byte	%00000110	; INTERRUPTED
    686  2e8d				  -	      .byte	%00000110	; INTERRUPTED
    687  2e8d				  -	      .byte	%00000110	; INTERRUPTED
    688  2e8d				  -	      .byte	%00000110	; INTERRUPTED
    689  2e8d				  -	      .byte	%01110110	; INTERRUPTED
    690  2e8d				  -	      .byte	%01100110	; INTERRUPTED
    691  2e8d				  -	      .byte	%01100110	; INTERRUPTED
    692  2e8d				  -	      .byte	%01100110	; INTERRUPTED
    693  2e8d				  -
    694  2e8d				  -			;byte %00000000 ; INTERRUPTED
    695  2e8d				  -
    696  2e8d				  -	      .byte	%01111100	; INTERRUPTED
    697  2e8d				  -	      .byte	%00000110	; INTERRUPTED
    698  2e8d				  -	      .byte	%00000110	; INTERRUPTED
    699  2e8d				  -	      .byte	%00000110	; INTERRUPTED
    700  2e8d				  -	      .byte	%01111100	; INTERRUPTED
    701  2e8d				  -	      .byte	%01100000	; INTERRUPTED
    702  2e8d				  -	      .byte	%01100000	; INTERRUPTED
    703  2e8d				  -	      .byte	%01101110	; INTERRUPTED
    704  2e8d				  -
    705  2e8d				  -			;byte %00000000 ; INTERRUPTED
    706  2e8d				  -
    707  2e8d				  -	      .byte	%00101100	; INTERRUPTED
    708  2e8d				  -	      .byte	%01100110	; INTERRUPTED
    709  2e8d				  -	      .byte	%01100110	; INTERRUPTED
    710  2e8d				  -	      .byte	%01100110	; INTERRUPTED
    711  2e8d				  -	      .byte	%01101100	; INTERRUPTED
    712  2e8d				  -	      .byte	%01100000	; INTERRUPTED
    713  2e8d				  -	      .byte	%00110000	; INTERRUPTED
    714  2e8d				  -	      .byte	%00011100	; INTERRUPTED
    715  2e8d				  -
    716  2e8d				  -			;byte %00000000 ; INTERRUPTED
    717  2e8d				  -
    718  2e8d				  -	      .byte	%00011000	; INTERRUPTED
    719  2e8d				  -	      .byte	%00011000	; INTERRUPTED
    720  2e8d				  -	      .byte	%00011000	; INTERRUPTED
    721  2e8d				  -	      .byte	%00011100	; INTERRUPTED
    722  2e8d				  -	      .byte	%00001110	; INTERRUPTED
    723  2e8d				  -	      .byte	%00000110	; INTERRUPTED
    724  2e8d				  -	      .byte	%00000000	; INTERRUPTED
    725  2e8d				  -	      .byte	%01111110	; INTERRUPTED
    726  2e8d				  -
    727  2e8d				  -			;byte %00000000 ; INTERRUPTED
    728  2e8d				  -
    729  2e8d				  -	      .byte	%00110100	; INTERRUPTED
    730  2e8d				  -	      .byte	%01100110	; INTERRUPTED
    731  2e8d				  -	      .byte	%01100110	; INTERRUPTED
    732  2e8d				  -	      .byte	%01100110	; INTERRUPTED
    733  2e8d				  -	      .byte	%00110100	; INTERRUPTED
    734  2e8d				  -	      .byte	%01100110	; INTERRUPTED
    735  2e8d				  -	      .byte	%01100110	; INTERRUPTED
    736  2e8d				  -	      .byte	%00110100	; INTERRUPTED
    737  2e8d				  -
    738  2e8d				  -			;byte %00000000 ; INTERRUPTED
    739  2e8d				  -
    740  2e8d				  -	      .byte	%00111000	; INTERRUPTED
    741  2e8d				  -	      .byte	%00001100	; INTERRUPTED
    742  2e8d				  -	      .byte	%00000110	; INTERRUPTED
    743  2e8d				  -	      .byte	%00110110	; INTERRUPTED
    744  2e8d				  -	      .byte	%01100110	; INTERRUPTED
    745  2e8d				  -	      .byte	%01100110	; INTERRUPTED
    746  2e8d				  -	      .byte	%01100110	; INTERRUPTED
    747  2e8d				  -	      .byte	%00110100	; INTERRUPTED
    748  2e8d				  -
    749  2e8d					      endif		; INTERRUPTED
    750  2e8d
    751  2e8d
    752  2e8d				  -	      if	fontstyle == TINY
    753  2e8d				  -
    754  2e8d				  -			;byte %00000000 ; TINY
    755  2e8d				  -
    756  2e8d				  -	      .byte	%00000000	; TINY
    757  2e8d				  -	      .byte	%00111000	; TINY
    758  2e8d				  -	      .byte	%00101000	; TINY
    759  2e8d				  -	      .byte	%00101000	; TINY
    760  2e8d				  -	      .byte	%00101000	; TINY
    761  2e8d				  -	      .byte	%00111000	; TINY
    762  2e8d				  -	      .byte	%00000000	; TINY
    763  2e8d				  -	      .byte	%00000000	; TINY
    764  2e8d				  -
    765  2e8d				  -			;byte %00000000 ; TINY
    766  2e8d				  -
    767  2e8d				  -	      .byte	%00000000	; TINY
    768  2e8d				  -	      .byte	%00010000	; TINY
    769  2e8d				  -	      .byte	%00010000	; TINY
    770  2e8d				  -	      .byte	%00010000	; TINY
    771  2e8d				  -	      .byte	%00010000	; TINY
    772  2e8d				  -	      .byte	%00010000	; TINY
    773  2e8d				  -	      .byte	%00000000	; TINY
    774  2e8d				  -	      .byte	%00000000	; TINY
    775  2e8d				  -
    776  2e8d				  -			;byte %00000000 ; TINY
    777  2e8d				  -
    778  2e8d				  -	      .byte	%00000000	; TINY
    779  2e8d				  -	      .byte	%00111000	; TINY
    780  2e8d				  -	      .byte	%00100000	; TINY
    781  2e8d				  -	      .byte	%00111000	; TINY
    782  2e8d				  -	      .byte	%00001000	; TINY
    783  2e8d				  -	      .byte	%00111000	; TINY
    784  2e8d				  -	      .byte	%00000000	; TINY
    785  2e8d				  -	      .byte	%00000000	; TINY
    786  2e8d				  -
    787  2e8d				  -			;byte %00000000 ; TINY
    788  2e8d				  -
    789  2e8d				  -	      .byte	%00000000	; TINY
    790  2e8d				  -	      .byte	%00111000	; TINY
    791  2e8d				  -	      .byte	%00001000	; TINY
    792  2e8d				  -	      .byte	%00111000	; TINY
    793  2e8d				  -	      .byte	%00001000	; TINY
    794  2e8d				  -	      .byte	%00111000	; TINY
    795  2e8d				  -	      .byte	%00000000	; TINY
    796  2e8d				  -	      .byte	%00000000	; TINY
    797  2e8d				  -
    798  2e8d				  -			;byte %00000000 ; TINY
    799  2e8d				  -
    800  2e8d				  -	      .byte	%00000000	; TINY
    801  2e8d				  -	      .byte	%00001000	; TINY
    802  2e8d				  -	      .byte	%00001000	; TINY
    803  2e8d				  -	      .byte	%00111000	; TINY
    804  2e8d				  -	      .byte	%00101000	; TINY
    805  2e8d				  -	      .byte	%00101000	; TINY
    806  2e8d				  -	      .byte	%00000000	; TINY
    807  2e8d				  -	      .byte	%00000000	; TINY
    808  2e8d				  -
    809  2e8d				  -			;byte %00000000 ; TINY
    810  2e8d				  -
    811  2e8d				  -	      .byte	%00000000	; TINY
    812  2e8d				  -	      .byte	%00111000	; TINY
    813  2e8d				  -	      .byte	%00001000	; TINY
    814  2e8d				  -	      .byte	%00111000	; TINY
    815  2e8d				  -	      .byte	%00100000	; TINY
    816  2e8d				  -	      .byte	%00111000	; TINY
    817  2e8d				  -	      .byte	%00000000	; TINY
    818  2e8d				  -	      .byte	%00000000	; TINY
    819  2e8d				  -
    820  2e8d				  -			;byte %00000000 ; TINY
    821  2e8d				  -
    822  2e8d				  -	      .byte	%00000000	; TINY
    823  2e8d				  -	      .byte	%00111000	; TINY
    824  2e8d				  -	      .byte	%00101000	; TINY
    825  2e8d				  -	      .byte	%00111000	; TINY
    826  2e8d				  -	      .byte	%00100000	; TINY
    827  2e8d				  -	      .byte	%00111000	; TINY
    828  2e8d				  -	      .byte	%00000000	; TINY
    829  2e8d				  -	      .byte	%00000000	; TINY
    830  2e8d				  -
    831  2e8d				  -			;byte %00000000 ; TINY
    832  2e8d				  -
    833  2e8d				  -	      .byte	%00000000	; TINY
    834  2e8d				  -	      .byte	%00001000	; TINY
    835  2e8d				  -	      .byte	%00001000	; TINY
    836  2e8d				  -	      .byte	%00001000	; TINY
    837  2e8d				  -	      .byte	%00001000	; TINY
    838  2e8d				  -	      .byte	%00111000	; TINY
    839  2e8d				  -	      .byte	%00000000	; TINY
    840  2e8d				  -	      .byte	%00000000	; TINY
    841  2e8d				  -
    842  2e8d				  -			;byte %00000000 ; TINY
    843  2e8d				  -
    844  2e8d				  -	      .byte	%00000000	; TINY
    845  2e8d				  -	      .byte	%00111000	; TINY
    846  2e8d				  -	      .byte	%00101000	; TINY
    847  2e8d				  -	      .byte	%00111000	; TINY
    848  2e8d				  -	      .byte	%00101000	; TINY
    849  2e8d				  -	      .byte	%00111000	; TINY
    850  2e8d				  -	      .byte	%00000000	; TINY
    851  2e8d				  -	      .byte	%00000000	; TINY
    852  2e8d				  -
    853  2e8d				  -			;byte %00000000 ; TINY
    854  2e8d				  -
    855  2e8d				  -	      .byte	%00000000	; TINY
    856  2e8d				  -	      .byte	%00001000	; TINY
    857  2e8d				  -	      .byte	%00001000	; TINY
    858  2e8d				  -	      .byte	%00111000	; TINY
    859  2e8d				  -	      .byte	%00101000	; TINY
    860  2e8d				  -	      .byte	%00111000	; TINY
    861  2e8d				  -	      .byte	%00000000	; TINY
    862  2e8d				  -	      .byte	%00000000	; TINY
    863  2e8d				  -
    864  2e8d					      endif		; TINY
    865  2e8d
    866  2e8d				  -	      if	fontstyle == RETROPUTER
    867  2e8d				  -
    868  2e8d				  -			;byte %00000000 ; RETROPUTER
    869  2e8d				  -
    870  2e8d				  -	      .byte	%01111110	; RETROPUTER
    871  2e8d				  -	      .byte	%01000110	; RETROPUTER
    872  2e8d				  -	      .byte	%01000110	; RETROPUTER
    873  2e8d				  -	      .byte	%01000110	; RETROPUTER
    874  2e8d				  -	      .byte	%01100010	; RETROPUTER
    875  2e8d				  -	      .byte	%01100010	; RETROPUTER
    876  2e8d				  -	      .byte	%01100010	; RETROPUTER
    877  2e8d				  -	      .byte	%01111110	; RETROPUTER
    878  2e8d				  -
    879  2e8d				  -			;byte %00000000 ; RETROPUTER
    880  2e8d				  -
    881  2e8d				  -	      .byte	%00111000	; RETROPUTER
    882  2e8d				  -	      .byte	%00111000	; RETROPUTER
    883  2e8d				  -	      .byte	%00111000	; RETROPUTER
    884  2e8d				  -	      .byte	%00111000	; RETROPUTER
    885  2e8d				  -	      .byte	%00011000	; RETROPUTER
    886  2e8d				  -	      .byte	%00011000	; RETROPUTER
    887  2e8d				  -	      .byte	%00011000	; RETROPUTER
    888  2e8d				  -	      .byte	%00011000	; RETROPUTER
    889  2e8d				  -
    890  2e8d				  -			;byte %00000000 ; RETROPUTER
    891  2e8d				  -
    892  2e8d				  -	      .byte	%01111110	; RETROPUTER
    893  2e8d				  -	      .byte	%01100000	; RETROPUTER
    894  2e8d				  -	      .byte	%01100000	; RETROPUTER
    895  2e8d				  -	      .byte	%01100000	; RETROPUTER
    896  2e8d				  -	      .byte	%00111110	; RETROPUTER
    897  2e8d				  -	      .byte	%00000010	; RETROPUTER
    898  2e8d				  -	      .byte	%01000010	; RETROPUTER
    899  2e8d				  -	      .byte	%01111110	; RETROPUTER
    900  2e8d				  -
    901  2e8d				  -			;byte %00000000 ; RETROPUTER
    902  2e8d				  -
    903  2e8d				  -	      .byte	%01111110	; RETROPUTER
    904  2e8d				  -	      .byte	%01000110	; RETROPUTER
    905  2e8d				  -	      .byte	%00000110	; RETROPUTER
    906  2e8d				  -	      .byte	%00000110	; RETROPUTER
    907  2e8d				  -	      .byte	%00111110	; RETROPUTER
    908  2e8d				  -	      .byte	%00000010	; RETROPUTER
    909  2e8d				  -	      .byte	%01000010	; RETROPUTER
    910  2e8d				  -	      .byte	%01111110	; RETROPUTER
    911  2e8d				  -
    912  2e8d				  -			;byte %00000000 ; RETROPUTER
    913  2e8d				  -
    914  2e8d				  -	      .byte	%00001100	; RETROPUTER
    915  2e8d				  -	      .byte	%00001100	; RETROPUTER
    916  2e8d				  -	      .byte	%00001100	; RETROPUTER
    917  2e8d				  -	      .byte	%01111110	; RETROPUTER
    918  2e8d				  -	      .byte	%01000100	; RETROPUTER
    919  2e8d				  -	      .byte	%01000100	; RETROPUTER
    920  2e8d				  -	      .byte	%01000100	; RETROPUTER
    921  2e8d				  -	      .byte	%00000100	; RETROPUTER
    922  2e8d				  -
    923  2e8d				  -			;byte %00000000 ; RETROPUTER
    924  2e8d				  -
    925  2e8d				  -	      .byte	%01111110	; RETROPUTER
    926  2e8d				  -	      .byte	%01000110	; RETROPUTER
    927  2e8d				  -	      .byte	%00000110	; RETROPUTER
    928  2e8d				  -	      .byte	%00000110	; RETROPUTER
    929  2e8d				  -	      .byte	%01111100	; RETROPUTER
    930  2e8d				  -	      .byte	%01000000	; RETROPUTER
    931  2e8d				  -	      .byte	%01000000	; RETROPUTER
    932  2e8d				  -	      .byte	%01111110	; RETROPUTER
    933  2e8d				  -
    934  2e8d				  -			;byte %00000000 ; RETROPUTER
    935  2e8d				  -
    936  2e8d				  -	      .byte	%01111110	; RETROPUTER
    937  2e8d				  -	      .byte	%01000110	; RETROPUTER
    938  2e8d				  -	      .byte	%01000110	; RETROPUTER
    939  2e8d				  -	      .byte	%01000110	; RETROPUTER
    940  2e8d				  -	      .byte	%01111100	; RETROPUTER
    941  2e8d				  -	      .byte	%01000000	; RETROPUTER
    942  2e8d				  -	      .byte	%01000010	; RETROPUTER
    943  2e8d				  -	      .byte	%01111110	; RETROPUTER
    944  2e8d				  -
    945  2e8d				  -			;byte %00000000 ; RETROPUTER
    946  2e8d				  -
    947  2e8d				  -	      .byte	%00001100	; RETROPUTER
    948  2e8d				  -	      .byte	%00001100	; RETROPUTER
    949  2e8d				  -	      .byte	%00001100	; RETROPUTER
    950  2e8d				  -	      .byte	%00001100	; RETROPUTER
    951  2e8d				  -	      .byte	%00000100	; RETROPUTER
    952  2e8d				  -	      .byte	%00000010	; RETROPUTER
    953  2e8d				  -	      .byte	%01000010	; RETROPUTER
    954  2e8d				  -	      .byte	%01111110	; RETROPUTER
    955  2e8d				  -
    956  2e8d				  -			;byte %00000000 ; RETROPUTER
    957  2e8d				  -
    958  2e8d				  -	      .byte	%01111110	; RETROPUTER
    959  2e8d				  -	      .byte	%01000110	; RETROPUTER
    960  2e8d				  -	      .byte	%01000110	; RETROPUTER
    961  2e8d				  -	      .byte	%01000110	; RETROPUTER
    962  2e8d				  -	      .byte	%01111110	; RETROPUTER
    963  2e8d				  -	      .byte	%01000010	; RETROPUTER
    964  2e8d				  -	      .byte	%01000010	; RETROPUTER
    965  2e8d				  -	      .byte	%01111110	; RETROPUTER
    966  2e8d				  -
    967  2e8d				  -			;byte %00000000 ; RETROPUTER
    968  2e8d				  -
    969  2e8d				  -	      .byte	%00000110	; RETROPUTER
    970  2e8d				  -	      .byte	%00000110	; RETROPUTER
    971  2e8d				  -	      .byte	%00000110	; RETROPUTER
    972  2e8d				  -	      .byte	%00000010	; RETROPUTER
    973  2e8d				  -	      .byte	%01111110	; RETROPUTER
    974  2e8d				  -	      .byte	%01000010	; RETROPUTER
    975  2e8d				  -	      .byte	%01000010	; RETROPUTER
    976  2e8d				  -	      .byte	%01111110	; RETROPUTER
    977  2e8d				  -
    978  2e8d					      endif		; RETROPUTER
    979  2e8d
    980  2e8d				  -	      if	fontstyle == CURVES
    981  2e8d				  -
    982  2e8d				  -			;byte %00000000 ; CURVES
    983  2e8d				  -
    984  2e8d				  -	      .byte	%00111100	; CURVES
    985  2e8d				  -	      .byte	%01111110	; CURVES
    986  2e8d				  -	      .byte	%01100110	; CURVES
    987  2e8d				  -	      .byte	%01100110	; CURVES
    988  2e8d				  -	      .byte	%01100110	; CURVES
    989  2e8d				  -	      .byte	%01100110	; CURVES
    990  2e8d				  -	      .byte	%01111110	; CURVES
    991  2e8d				  -	      .byte	%00111100	; CURVES
    992  2e8d				  -
    993  2e8d				  -			;byte %00000000 ; CURVES
    994  2e8d				  -
    995  2e8d				  -	      .byte	%00011000	; CURVES
    996  2e8d				  -	      .byte	%00011000	; CURVES
    997  2e8d				  -	      .byte	%00011000	; CURVES
    998  2e8d				  -	      .byte	%00011000	; CURVES
    999  2e8d				  -	      .byte	%00011000	; CURVES
   1000  2e8d				  -	      .byte	%00011000	; CURVES
   1001  2e8d				  -	      .byte	%01111000	; CURVES
   1002  2e8d				  -	      .byte	%01110000	; CURVES
   1003  2e8d				  -
   1004  2e8d				  -			;byte %00000000 ; CURVES
   1005  2e8d				  -
   1006  2e8d				  -	      .byte	%01111110	; CURVES
   1007  2e8d				  -	      .byte	%01111110	; CURVES
   1008  2e8d				  -	      .byte	%01100000	; CURVES
   1009  2e8d				  -	      .byte	%01111100	; CURVES
   1010  2e8d				  -	      .byte	%00111110	; CURVES
   1011  2e8d				  -	      .byte	%00000110	; CURVES
   1012  2e8d				  -	      .byte	%01111110	; CURVES
   1013  2e8d				  -	      .byte	%01111100	; CURVES
   1014  2e8d				  -
   1015  2e8d				  -			;byte %00000000 ; CURVES
   1016  2e8d				  -
   1017  2e8d				  -	      .byte	%01111100	; CURVES
   1018  2e8d				  -	      .byte	%01111110	; CURVES
   1019  2e8d				  -	      .byte	%00001110	; CURVES
   1020  2e8d				  -	      .byte	%00111100	; CURVES
   1021  2e8d				  -	      .byte	%00111100	; CURVES
   1022  2e8d				  -	      .byte	%00001110	; CURVES
   1023  2e8d				  -	      .byte	%01111110	; CURVES
   1024  2e8d				  -	      .byte	%01111100	; CURVES
   1025  2e8d				  -
   1026  2e8d				  -			;byte %00000000 ; CURVES
   1027  2e8d				  -
   1028  2e8d				  -	      .byte	%00000110	; CURVES
   1029  2e8d				  -	      .byte	%00000110	; CURVES
   1030  2e8d				  -	      .byte	%00111110	; CURVES
   1031  2e8d				  -	      .byte	%01111110	; CURVES
   1032  2e8d				  -	      .byte	%01100110	; CURVES
   1033  2e8d				  -	      .byte	%01100110	; CURVES
   1034  2e8d				  -	      .byte	%01100110	; CURVES
   1035  2e8d				  -	      .byte	%01100110	; CURVES
   1036  2e8d				  -
   1037  2e8d				  -			;byte %00000000 ; CURVES
   1038  2e8d				  -
   1039  2e8d				  -	      .byte	%01111100	; CURVES
   1040  2e8d				  -	      .byte	%01111110	; CURVES
   1041  2e8d				  -	      .byte	%00000110	; CURVES
   1042  2e8d				  -	      .byte	%01111110	; CURVES
   1043  2e8d				  -	      .byte	%01111100	; CURVES
   1044  2e8d				  -	      .byte	%01100000	; CURVES
   1045  2e8d				  -	      .byte	%01111110	; CURVES
   1046  2e8d				  -	      .byte	%01111110	; CURVES
   1047  2e8d				  -
   1048  2e8d				  -			;byte %00000000 ; CURVES
   1049  2e8d				  -
   1050  2e8d				  -	      .byte	%00111100	; CURVES
   1051  2e8d				  -	      .byte	%01111110	; CURVES
   1052  2e8d				  -	      .byte	%01100110	; CURVES
   1053  2e8d				  -	      .byte	%01111110	; CURVES
   1054  2e8d				  -	      .byte	%01111100	; CURVES
   1055  2e8d				  -	      .byte	%01100000	; CURVES
   1056  2e8d				  -	      .byte	%01111110	; CURVES
   1057  2e8d				  -	      .byte	%00111110	; CURVES
   1058  2e8d				  -
   1059  2e8d				  -			;byte %00000000 ; CURVES
   1060  2e8d				  -
   1061  2e8d				  -	      .byte	%00000110	; CURVES
   1062  2e8d				  -	      .byte	%00000110	; CURVES
   1063  2e8d				  -	      .byte	%00000110	; CURVES
   1064  2e8d				  -	      .byte	%00000110	; CURVES
   1065  2e8d				  -	      .byte	%00000110	; CURVES
   1066  2e8d				  -	      .byte	%01100110	; CURVES
   1067  2e8d				  -	      .byte	%01111110	; CURVES
   1068  2e8d				  -	      .byte	%00111100	; CURVES
   1069  2e8d				  -
   1070  2e8d				  -			;byte %00000000 ; CURVES
   1071  2e8d				  -
   1072  2e8d				  -	      .byte	%00111100	; CURVES
   1073  2e8d				  -	      .byte	%01111110	; CURVES
   1074  2e8d				  -	      .byte	%01100110	; CURVES
   1075  2e8d				  -	      .byte	%01111110	; CURVES
   1076  2e8d				  -	      .byte	%00111100	; CURVES
   1077  2e8d				  -	      .byte	%01100110	; CURVES
   1078  2e8d				  -	      .byte	%01111110	; CURVES
   1079  2e8d				  -	      .byte	%00111100	; CURVES
   1080  2e8d				  -
   1081  2e8d				  -			;byte %00000000 ; CURVES
   1082  2e8d				  -
   1083  2e8d				  -	      .byte	%01111100	; CURVES
   1084  2e8d				  -	      .byte	%01111110	; CURVES
   1085  2e8d				  -	      .byte	%00000110	; CURVES
   1086  2e8d				  -	      .byte	%00111110	; CURVES
   1087  2e8d				  -	      .byte	%01111110	; CURVES
   1088  2e8d				  -	      .byte	%01100110	; CURVES
   1089  2e8d				  -	      .byte	%01111110	; CURVES
   1090  2e8d				  -	      .byte	%00111100	; CURVES
   1091  2e8d				  -
   1092  2e8d					      endif		; CURVES
   1093  2e8d
   1094  2e8d
   1095  2e8d				  -	      if	fontstyle == HUSKY
   1096  2e8d				  -
   1097  2e8d				  -			;byte %00000000 ; HUSKY
   1098  2e8d				  -
   1099  2e8d				  -	      .byte	%01111100	; HUSKY
   1100  2e8d				  -	      .byte	%11111110	; HUSKY
   1101  2e8d				  -	      .byte	%11101110	; HUSKY
   1102  2e8d				  -	      .byte	%11101110	; HUSKY
   1103  2e8d				  -	      .byte	%11101110	; HUSKY
   1104  2e8d				  -	      .byte	%11101110	; HUSKY
   1105  2e8d				  -	      .byte	%11111110	; HUSKY
   1106  2e8d				  -	      .byte	%01111100	; HUSKY
   1107  2e8d				  -
   1108  2e8d				  -			;byte %00000000 ; HUSKY
   1109  2e8d				  -
   1110  2e8d				  -	      .byte	%00111000	; HUSKY
   1111  2e8d				  -	      .byte	%00111000	; HUSKY
   1112  2e8d				  -	      .byte	%00111000	; HUSKY
   1113  2e8d				  -	      .byte	%00111000	; HUSKY
   1114  2e8d				  -	      .byte	%00111000	; HUSKY
   1115  2e8d				  -	      .byte	%00111000	; HUSKY
   1116  2e8d				  -	      .byte	%00111000	; HUSKY
   1117  2e8d				  -	      .byte	%00111000	; HUSKY
   1118  2e8d				  -
   1119  2e8d				  -			;byte %00000000 ; HUSKY
   1120  2e8d				  -
   1121  2e8d				  -	      .byte	%11111110	; HUSKY
   1122  2e8d				  -	      .byte	%11111110	; HUSKY
   1123  2e8d				  -	      .byte	%11100000	; HUSKY
   1124  2e8d				  -	      .byte	%11111100	; HUSKY
   1125  2e8d				  -	      .byte	%01111110	; HUSKY
   1126  2e8d				  -	      .byte	%00001110	; HUSKY
   1127  2e8d				  -	      .byte	%11111110	; HUSKY
   1128  2e8d				  -	      .byte	%11111100	; HUSKY
   1129  2e8d				  -
   1130  2e8d				  -			;byte %00000000 ; HUSKY
   1131  2e8d				  -
   1132  2e8d				  -	      .byte	%11111100	; HUSKY
   1133  2e8d				  -	      .byte	%11111110	; HUSKY
   1134  2e8d				  -	      .byte	%00001110	; HUSKY
   1135  2e8d				  -	      .byte	%11111100	; HUSKY
   1136  2e8d				  -	      .byte	%11111100	; HUSKY
   1137  2e8d				  -	      .byte	%00001110	; HUSKY
   1138  2e8d				  -	      .byte	%11111110	; HUSKY
   1139  2e8d				  -	      .byte	%11111100	; HUSKY
   1140  2e8d				  -
   1141  2e8d				  -			;byte %00000000 ; HUSKY
   1142  2e8d				  -
   1143  2e8d				  -	      .byte	%00011100	; HUSKY
   1144  2e8d				  -	      .byte	%00011100	; HUSKY
   1145  2e8d				  -	      .byte	%11111110	; HUSKY
   1146  2e8d				  -	      .byte	%11111110	; HUSKY
   1147  2e8d				  -	      .byte	%11011100	; HUSKY
   1148  2e8d				  -	      .byte	%11011100	; HUSKY
   1149  2e8d				  -	      .byte	%00011100	; HUSKY
   1150  2e8d				  -	      .byte	%00011100	; HUSKY
   1151  2e8d				  -
   1152  2e8d				  -			;byte %00000000 ; HUSKY
   1153  2e8d				  -
   1154  2e8d				  -	      .byte	%11111100	; HUSKY
   1155  2e8d				  -	      .byte	%11111110	; HUSKY
   1156  2e8d				  -	      .byte	%00001110	; HUSKY
   1157  2e8d				  -	      .byte	%11111110	; HUSKY
   1158  2e8d				  -	      .byte	%11111100	; HUSKY
   1159  2e8d				  -	      .byte	%11100000	; HUSKY
   1160  2e8d				  -	      .byte	%11111110	; HUSKY
   1161  2e8d				  -	      .byte	%11111110	; HUSKY
   1162  2e8d				  -
   1163  2e8d				  -			;byte %00000000 ; HUSKY
   1164  2e8d				  -
   1165  2e8d				  -	      .byte	%01111100	; HUSKY
   1166  2e8d				  -	      .byte	%11111110	; HUSKY
   1167  2e8d				  -	      .byte	%11101110	; HUSKY
   1168  2e8d				  -	      .byte	%11111110	; HUSKY
   1169  2e8d				  -	      .byte	%11111100	; HUSKY
   1170  2e8d				  -	      .byte	%11100000	; HUSKY
   1171  2e8d				  -	      .byte	%11111110	; HUSKY
   1172  2e8d				  -	      .byte	%01111110	; HUSKY
   1173  2e8d				  -
   1174  2e8d				  -			;byte %00000000 ; HUSKY
   1175  2e8d				  -
   1176  2e8d				  -	      .byte	%00111000	; HUSKY
   1177  2e8d				  -	      .byte	%00111000	; HUSKY
   1178  2e8d				  -	      .byte	%00111000	; HUSKY
   1179  2e8d				  -	      .byte	%00111000	; HUSKY
   1180  2e8d				  -	      .byte	%00011100	; HUSKY
   1181  2e8d				  -	      .byte	%00001110	; HUSKY
   1182  2e8d				  -	      .byte	%11111110	; HUSKY
   1183  2e8d				  -	      .byte	%11111110	; HUSKY
   1184  2e8d				  -
   1185  2e8d				  -			;byte %00000000 ; HUSKY
   1186  2e8d				  -
   1187  2e8d				  -	      .byte	%01111100	; HUSKY
   1188  2e8d				  -	      .byte	%11111110	; HUSKY
   1189  2e8d				  -	      .byte	%11101110	; HUSKY
   1190  2e8d				  -	      .byte	%11111110	; HUSKY
   1191  2e8d				  -	      .byte	%01111100	; HUSKY
   1192  2e8d				  -	      .byte	%11101110	; HUSKY
   1193  2e8d				  -	      .byte	%11111110	; HUSKY
   1194  2e8d				  -	      .byte	%01111100	; HUSKY
   1195  2e8d				  -
   1196  2e8d				  -			;byte %00000000 ; HUSKY
   1197  2e8d				  -
   1198  2e8d				  -	      .byte	%11111100	; HUSKY
   1199  2e8d				  -	      .byte	%11111110	; HUSKY
   1200  2e8d				  -	      .byte	%00001110	; HUSKY
   1201  2e8d				  -	      .byte	%01111110	; HUSKY
   1202  2e8d				  -	      .byte	%11111110	; HUSKY
   1203  2e8d				  -	      .byte	%11101110	; HUSKY
   1204  2e8d				  -	      .byte	%11111110	; HUSKY
   1205  2e8d				  -	      .byte	%01111100	; HUSKY
   1206  2e8d				  -
   1207  2e8d					      endif		; HUSKY
   1208  2e8d
   1209  2e8d
   1210  2e8d				  -	      if	fontstyle == SNAKE
   1211  2e8d				  -
   1212  2e8d				  -			;byte %00000000 ; SNAKE
   1213  2e8d				  -
   1214  2e8d				  -	      .byte	%01111110	; SNAKE
   1215  2e8d				  -	      .byte	%01000010	; SNAKE
   1216  2e8d				  -	      .byte	%01000010	; SNAKE
   1217  2e8d				  -	      .byte	%01000010	; SNAKE
   1218  2e8d				  -	      .byte	%01000010	; SNAKE
   1219  2e8d				  -	      .byte	%01000010	; SNAKE
   1220  2e8d				  -	      .byte	%01000010	; SNAKE
   1221  2e8d				  -	      .byte	%01111110	; SNAKE
   1222  2e8d				  -
   1223  2e8d				  -			;byte %00000000 ; SNAKE
   1224  2e8d				  -
   1225  2e8d				  -	      .byte	%00111000	; SNAKE
   1226  2e8d				  -	      .byte	%00101000	; SNAKE
   1227  2e8d				  -	      .byte	%00001000	; SNAKE
   1228  2e8d				  -	      .byte	%00001000	; SNAKE
   1229  2e8d				  -	      .byte	%00001000	; SNAKE
   1230  2e8d				  -	      .byte	%00001000	; SNAKE
   1231  2e8d				  -	      .byte	%00001000	; SNAKE
   1232  2e8d				  -	      .byte	%00111000	; SNAKE
   1233  2e8d				  -
   1234  2e8d				  -			;byte %00000000 ; SNAKE
   1235  2e8d				  -
   1236  2e8d				  -	      .byte	%01111110	; SNAKE
   1237  2e8d				  -	      .byte	%01000010	; SNAKE
   1238  2e8d				  -	      .byte	%01000110	; SNAKE
   1239  2e8d				  -	      .byte	%01000000	; SNAKE
   1240  2e8d				  -	      .byte	%01111110	; SNAKE
   1241  2e8d				  -	      .byte	%00000010	; SNAKE
   1242  2e8d				  -	      .byte	%01000010	; SNAKE
   1243  2e8d				  -	      .byte	%01111110	; SNAKE
   1244  2e8d				  -
   1245  2e8d				  -			;byte %00000000 ; SNAKE
   1246  2e8d				  -
   1247  2e8d				  -	      .byte	%01111110	; SNAKE
   1248  2e8d				  -	      .byte	%01000010	; SNAKE
   1249  2e8d				  -	      .byte	%01100010	; SNAKE
   1250  2e8d				  -	      .byte	%00000010	; SNAKE
   1251  2e8d				  -	      .byte	%01111110	; SNAKE
   1252  2e8d				  -	      .byte	%00000010	; SNAKE
   1253  2e8d				  -	      .byte	%01000010	; SNAKE
   1254  2e8d				  -	      .byte	%01111110	; SNAKE
   1255  2e8d				  -
   1256  2e8d				  -			;byte %00000000 ; SNAKE
   1257  2e8d				  -
   1258  2e8d				  -	      .byte	%00001110	; SNAKE
   1259  2e8d				  -	      .byte	%00001010	; SNAKE
   1260  2e8d				  -	      .byte	%00000010	; SNAKE
   1261  2e8d				  -	      .byte	%01111110	; SNAKE
   1262  2e8d				  -	      .byte	%01000010	; SNAKE
   1263  2e8d				  -	      .byte	%01000010	; SNAKE
   1264  2e8d				  -	      .byte	%01000010	; SNAKE
   1265  2e8d				  -	      .byte	%01100110	; SNAKE
   1266  2e8d				  -
   1267  2e8d				  -			;byte %00000000 ; SNAKE
   1268  2e8d				  -
   1269  2e8d				  -	      .byte	%01111110	; SNAKE
   1270  2e8d				  -	      .byte	%01000010	; SNAKE
   1271  2e8d				  -	      .byte	%01100010	; SNAKE
   1272  2e8d				  -	      .byte	%00000010	; SNAKE
   1273  2e8d				  -	      .byte	%01111110	; SNAKE
   1274  2e8d				  -	      .byte	%01000000	; SNAKE
   1275  2e8d				  -	      .byte	%01000010	; SNAKE
   1276  2e8d				  -	      .byte	%01111110	; SNAKE
   1277  2e8d				  -
   1278  2e8d				  -			;byte %00000000 ; SNAKE
   1279  2e8d				  -
   1280  2e8d				  -	      .byte	%01111110	; SNAKE
   1281  2e8d				  -	      .byte	%01000010	; SNAKE
   1282  2e8d				  -	      .byte	%01000010	; SNAKE
   1283  2e8d				  -	      .byte	%01111110	; SNAKE
   1284  2e8d				  -	      .byte	%01000000	; SNAKE
   1285  2e8d				  -	      .byte	%01000110	; SNAKE
   1286  2e8d				  -	      .byte	%01000010	; SNAKE
   1287  2e8d				  -	      .byte	%01111110	; SNAKE
   1288  2e8d				  -
   1289  2e8d				  -			;byte %00000000 ; SNAKE
   1290  2e8d				  -
   1291  2e8d				  -	      .byte	%00000110	; SNAKE
   1292  2e8d				  -	      .byte	%00000010	; SNAKE
   1293  2e8d				  -	      .byte	%00000010	; SNAKE
   1294  2e8d				  -	      .byte	%00000010	; SNAKE
   1295  2e8d				  -	      .byte	%00000010	; SNAKE
   1296  2e8d				  -	      .byte	%01100010	; SNAKE
   1297  2e8d				  -	      .byte	%01000010	; SNAKE
   1298  2e8d				  -	      .byte	%01111110	; SNAKE
   1299  2e8d				  -
   1300  2e8d				  -			;byte %00000000 ; SNAKE
   1301  2e8d				  -
   1302  2e8d				  -	      .byte	%01111110	; SNAKE
   1303  2e8d				  -	      .byte	%01000010	; SNAKE
   1304  2e8d				  -	      .byte	%01000010	; SNAKE
   1305  2e8d				  -	      .byte	%01000010	; SNAKE
   1306  2e8d				  -	      .byte	%01111110	; SNAKE
   1307  2e8d				  -	      .byte	%01000010	; SNAKE
   1308  2e8d				  -	      .byte	%01000010	; SNAKE
   1309  2e8d				  -	      .byte	%01111110	; SNAKE
   1310  2e8d				  -
   1311  2e8d				  -			;byte %00000000 ; SNAKE
   1312  2e8d				  -
   1313  2e8d				  -	      .byte	%00001110	; SNAKE
   1314  2e8d				  -	      .byte	%00001010	; SNAKE
   1315  2e8d				  -	      .byte	%00000010	; SNAKE
   1316  2e8d				  -	      .byte	%00000010	; SNAKE
   1317  2e8d				  -	      .byte	%01111110	; SNAKE
   1318  2e8d				  -	      .byte	%01000010	; SNAKE
   1319  2e8d				  -	      .byte	%01000010	; SNAKE
   1320  2e8d				  -	      .byte	%01111110	; SNAKE
   1321  2e8d				  -
   1322  2e8d				  -
   1323  2e8d					      endif		; SNAKE
   1324  2e8d
   1325  2e8d				  -	      if	fontstyle == PLOK
   1326  2e8d				  -
   1327  2e8d				  -			;byte %00000000 ; PLOK
   1328  2e8d				  -
   1329  2e8d				  -	      .byte	%00000000	; PLOK
   1330  2e8d				  -	      .byte	%00111000	; PLOK
   1331  2e8d				  -	      .byte	%01100100	; PLOK
   1332  2e8d				  -	      .byte	%01100010	; PLOK
   1333  2e8d				  -	      .byte	%01100010	; PLOK
   1334  2e8d				  -	      .byte	%00110110	; PLOK
   1335  2e8d				  -	      .byte	%00011100	; PLOK
   1336  2e8d				  -	      .byte	%00000000	; PLOK
   1337  2e8d				  -
   1338  2e8d				  -			;byte %00000000 ; PLOK
   1339  2e8d				  -
   1340  2e8d				  -	      .byte	%00000000	; PLOK
   1341  2e8d				  -	      .byte	%00010000	; PLOK
   1342  2e8d				  -	      .byte	%00011100	; PLOK
   1343  2e8d				  -	      .byte	%00011100	; PLOK
   1344  2e8d				  -	      .byte	%00011000	; PLOK
   1345  2e8d				  -	      .byte	%00111000	; PLOK
   1346  2e8d				  -	      .byte	%00011000	; PLOK
   1347  2e8d				  -	      .byte	%00000000	; PLOK
   1348  2e8d				  -
   1349  2e8d				  -			;byte %00000000 ; PLOK
   1350  2e8d				  -
   1351  2e8d				  -	      .byte	%00000000	; PLOK
   1352  2e8d				  -	      .byte	%00001110	; PLOK
   1353  2e8d				  -	      .byte	%01111110	; PLOK
   1354  2e8d				  -	      .byte	%00011000	; PLOK
   1355  2e8d				  -	      .byte	%00001100	; PLOK
   1356  2e8d				  -	      .byte	%00000110	; PLOK
   1357  2e8d				  -	      .byte	%00111100	; PLOK
   1358  2e8d				  -	      .byte	%00000000	; PLOK
   1359  2e8d				  -
   1360  2e8d				  -			;byte %00000000 ; PLOK
   1361  2e8d				  -
   1362  2e8d				  -	      .byte	%00000000	; PLOK
   1363  2e8d				  -	      .byte	%00111100	; PLOK
   1364  2e8d				  -	      .byte	%01101110	; PLOK
   1365  2e8d				  -	      .byte	%00001110	; PLOK
   1366  2e8d				  -	      .byte	%00011100	; PLOK
   1367  2e8d				  -	      .byte	%00000110	; PLOK
   1368  2e8d				  -	      .byte	%01111100	; PLOK
   1369  2e8d				  -	      .byte	%00000000	; PLOK
   1370  2e8d				  -
   1371  2e8d				  -			;byte %00000000 ; PLOK
   1372  2e8d				  -
   1373  2e8d				  -	      .byte	%00000000	; PLOK
   1374  2e8d				  -	      .byte	%00011000	; PLOK
   1375  2e8d				  -	      .byte	%01111110	; PLOK
   1376  2e8d				  -	      .byte	%01101100	; PLOK
   1377  2e8d				  -	      .byte	%00100100	; PLOK
   1378  2e8d				  -	      .byte	%00110000	; PLOK
   1379  2e8d				  -	      .byte	%00110000	; PLOK
   1380  2e8d				  -	      .byte	%00000000	; PLOK
   1381  2e8d				  -
   1382  2e8d				  -			;byte %00000000 ; PLOK
   1383  2e8d				  -
   1384  2e8d				  -	      .byte	%00000000	; PLOK
   1385  2e8d				  -	      .byte	%00111100	; PLOK
   1386  2e8d				  -	      .byte	%01001110	; PLOK
   1387  2e8d				  -	      .byte	%00011100	; PLOK
   1388  2e8d				  -	      .byte	%01100000	; PLOK
   1389  2e8d				  -	      .byte	%01111100	; PLOK
   1390  2e8d				  -	      .byte	%00011100	; PLOK
   1391  2e8d				  -	      .byte	%00000000	; PLOK
   1392  2e8d				  -
   1393  2e8d				  -			;byte %00000000 ; PLOK
   1394  2e8d				  -
   1395  2e8d				  -	      .byte	%00000000	; PLOK
   1396  2e8d				  -	      .byte	%00111100	; PLOK
   1397  2e8d				  -	      .byte	%01000110	; PLOK
   1398  2e8d				  -	      .byte	%01101100	; PLOK
   1399  2e8d				  -	      .byte	%01110000	; PLOK
   1400  2e8d				  -	      .byte	%00111000	; PLOK
   1401  2e8d				  -	      .byte	%00010000	; PLOK
   1402  2e8d				  -	      .byte	%00000000	; PLOK
   1403  2e8d				  -
   1404  2e8d				  -			;byte %00000000 ; PLOK
   1405  2e8d				  -
   1406  2e8d				  -	      .byte	%00000000	; PLOK
   1407  2e8d				  -	      .byte	%00111100	; PLOK
   1408  2e8d				  -	      .byte	%00011100	; PLOK
   1409  2e8d				  -	      .byte	%00001100	; PLOK
   1410  2e8d				  -	      .byte	%00000110	; PLOK
   1411  2e8d				  -	      .byte	%01111110	; PLOK
   1412  2e8d				  -	      .byte	%00110000	; PLOK
   1413  2e8d				  -	      .byte	%00000000	; PLOK
   1414  2e8d				  -
   1415  2e8d				  -			;byte %00000000 ; PLOK
   1416  2e8d				  -
   1417  2e8d				  -	      .byte	%00000000	; PLOK
   1418  2e8d				  -	      .byte	%00111100	; PLOK
   1419  2e8d				  -	      .byte	%01001110	; PLOK
   1420  2e8d				  -	      .byte	%01101110	; PLOK
   1421  2e8d				  -	      .byte	%00111100	; PLOK
   1422  2e8d				  -	      .byte	%01100100	; PLOK
   1423  2e8d				  -	      .byte	%00111000	; PLOK
   1424  2e8d				  -	      .byte	%00000000	; PLOK
   1425  2e8d				  -
   1426  2e8d				  -			;byte %00000000 ; PLOK
   1427  2e8d				  -
   1428  2e8d				  -	      .byte	%00000000	; PLOK
   1429  2e8d				  -	      .byte	%00011000	; PLOK
   1430  2e8d				  -	      .byte	%00001100	; PLOK
   1431  2e8d				  -	      .byte	%00011100	; PLOK
   1432  2e8d				  -	      .byte	%00100110	; PLOK
   1433  2e8d				  -	      .byte	%01001110	; PLOK
   1434  2e8d				  -	      .byte	%00111100	; PLOK
   1435  2e8d				  -	      .byte	%00000000	; PLOK
   1436  2e8d				  -
   1437  2e8d					      endif		; PLOK
   1438  2e8d
   1439  2e8d							; ### any characters that aren't font specific follow...
   1440  2e8d
   1441  2e8d				  -	      ifconst	fontcharSPACE
   1442  2e8d				  -			;byte %00000000 ; SYMBOLS
   1443  2e8d				  -
   1444  2e8d				  -	      .byte	%00000000	; SYMBOLS
   1445  2e8d				  -	      .byte	%00000000	; SYMBOLS
   1446  2e8d				  -	      .byte	%00000000	; SYMBOLS
   1447  2e8d				  -	      .byte	%00000000	; SYMBOLS
   1448  2e8d				  -	      .byte	%00000000	; SYMBOLS
   1449  2e8d				  -	      .byte	%00000000	; SYMBOLS
   1450  2e8d				  -	      .byte	%00000000	; SYMBOLS
   1451  2e8d				  -	      .byte	%00000000	; SYMBOLS
   1452  2e8d				  -
   1453  2e8d				  -			;byte %00000000 ; SYMBOLS
   1454  2e8d					      endif		; fontcharSPACE
   1455  2e8d
   1456  2e8d				  -	      ifconst	fontcharDOLLAR
   1457  2e8d				  -			;byte %00000000 ; SYMBOLS
   1458  2e8d				  -
   1459  2e8d				  -	      .byte	%00000000	; SYMBOLS
   1460  2e8d				  -	      .byte	%00010000	; SYMBOLS
   1461  2e8d				  -	      .byte	%01111100	; SYMBOLS
   1462  2e8d				  -	      .byte	%00010010	; SYMBOLS
   1463  2e8d				  -	      .byte	%01111100	; SYMBOLS
   1464  2e8d				  -	      .byte	%10010000	; SYMBOLS
   1465  2e8d				  -	      .byte	%01111100	; SYMBOLS
   1466  2e8d				  -	      .byte	%00010000	; SYMBOLS
   1467  2e8d				  -
   1468  2e8d				  -			;byte %00000000 ; SYMBOLS
   1469  2e8d				  -
   1470  2e8d					      endif		; fontcharDOLLAR
   1471  2e8d
   1472  2e8d				  -	      ifconst	fontcharPOUND
   1473  2e8d				  -			;byte %00000000 ; SYMBOLS
   1474  2e8d				  -
   1475  2e8d				  -	      .byte	%01111110	; SYMBOLS
   1476  2e8d				  -	      .byte	%01000000	; SYMBOLS
   1477  2e8d				  -	      .byte	%00100000	; SYMBOLS
   1478  2e8d				  -	      .byte	%00100000	; SYMBOLS
   1479  2e8d				  -	      .byte	%01111000	; SYMBOLS
   1480  2e8d				  -	      .byte	%00100000	; SYMBOLS
   1481  2e8d				  -	      .byte	%00100010	; SYMBOLS
   1482  2e8d				  -	      .byte	%00011100	; SYMBOLS
   1483  2e8d				  -
   1484  2e8d				  -			;byte %00000000 ; SYMBOLS
   1485  2e8d				  -
   1486  2e8d					      endif		; fontcharPOUND
   1487  2e8d
   1488  2e8d
   1489  2e8d				  -	      ifconst	fontcharMRHAPPY
   1490  2e8d				  -			;byte %00000000 ; SYMBOLS
   1491  2e8d				  -
   1492  2e8d				  -	      .byte	%00111100	; SYMBOLS
   1493  2e8d				  -	      .byte	%01100110	; SYMBOLS
   1494  2e8d				  -	      .byte	%01011010	; SYMBOLS
   1495  2e8d				  -	      .byte	%01111110	; SYMBOLS
   1496  2e8d				  -	      .byte	%01111110	; SYMBOLS
   1497  2e8d				  -	      .byte	%01011010	; SYMBOLS
   1498  2e8d				  -	      .byte	%01111110	; SYMBOLS
   1499  2e8d				  -	      .byte	%00111100	; SYMBOLS
   1500  2e8d				  -
   1501  2e8d				  -			;byte %00000000 ; SYMBOLS
   1502  2e8d				  -
   1503  2e8d					      endif		; fontcharMRHAPPY
   1504  2e8d
   1505  2e8d				  -	      ifconst	fontcharMRSAD
   1506  2e8d				  -			;byte %00000000 ; SYMBOLS
   1507  2e8d				  -
   1508  2e8d				  -	      .byte	%00111100	; SYMBOLS
   1509  2e8d				  -	      .byte	%01011010	; SYMBOLS
   1510  2e8d				  -	      .byte	%01100110	; SYMBOLS
   1511  2e8d				  -	      .byte	%01111110	; SYMBOLS
   1512  2e8d				  -	      .byte	%01111110	; SYMBOLS
   1513  2e8d				  -	      .byte	%01011010	; SYMBOLS
   1514  2e8d				  -	      .byte	%01111110	; SYMBOLS
   1515  2e8d				  -	      .byte	%00111100	; SYMBOLS
   1516  2e8d				  -
   1517  2e8d				  -			;byte %00000000 ; SYMBOLS
   1518  2e8d				  -
   1519  2e8d					      endif		; fontcharMRSAD
   1520  2e8d
   1521  2e8d
   1522  2e8d				  -	      ifconst	fontcharCOPYRIGHT
   1523  2e8d				  -			;byte %00000000 ; SYMBOLS
   1524  2e8d				  -
   1525  2e8d				  -	      .byte	%00000000	; SYMBOLS
   1526  2e8d				  -	      .byte	%00111000	; SYMBOLS
   1527  2e8d				  -	      .byte	%01000100	; SYMBOLS
   1528  2e8d				  -	      .byte	%10111010	; SYMBOLS
   1529  2e8d				  -	      .byte	%10100010	; SYMBOLS
   1530  2e8d				  -	      .byte	%10111010	; SYMBOLS
   1531  2e8d				  -	      .byte	%01000100	; SYMBOLS
   1532  2e8d				  -	      .byte	%00111000	; SYMBOLS
   1533  2e8d				  -
   1534  2e8d				  -			;byte %00000000 ; SYMBOLS
   1535  2e8d				  -
   1536  2e8d					      endif		; fontcharCOPYRIGHT
   1537  2e8d
   1538  2e8d
   1539  2e8d				  -	      ifconst	fontcharFUJI
   1540  2e8d				  -
   1541  2e8d				  -			;byte %00000000 ; ** these commented-out blanks are for the preview generation program
   1542  2e8d				  -
   1543  2e8d				  -	      .byte	%01110000	; SYMBOLS
   1544  2e8d				  -	      .byte	%01111001	; SYMBOLS
   1545  2e8d				  -	      .byte	%00011101	; SYMBOLS
   1546  2e8d				  -	      .byte	%00001101	; SYMBOLS
   1547  2e8d				  -	      .byte	%00001101	; SYMBOLS
   1548  2e8d				  -	      .byte	%00001101	; SYMBOLS
   1549  2e8d				  -	      .byte	%00001101	; SYMBOLS
   1550  2e8d				  -	      .byte	%00000000	; SYMBOLS
   1551  2e8d				  -
   1552  2e8d				  -			;byte %00000000 ; SYMBOLS
   1553  2e8d				  -
   1554  2e8d				  -	      .byte	%00001110	; SYMBOLS
   1555  2e8d				  -	      .byte	%10011110	; SYMBOLS
   1556  2e8d				  -	      .byte	%10111000	; SYMBOLS
   1557  2e8d				  -	      .byte	%10110000	; SYMBOLS
   1558  2e8d				  -	      .byte	%10110000	; SYMBOLS
   1559  2e8d				  -	      .byte	%10110000	; SYMBOLS
   1560  2e8d				  -	      .byte	%10110000	; SYMBOLS
   1561  2e8d				  -	      .byte	%00000000	; SYMBOLS
   1562  2e8d				  -
   1563  2e8d				  -			;byte %00000000 ; SYMBOLS
   1564  2e8d				  -
   1565  2e8d					      endif		; fontcharFUJI
   1566  2e8d
   1567  2e8d
   1568  2e8d				  -	      ifconst	fontcharHEART
   1569  2e8d				  -			;byte %00000000 ; SYMBOLS
   1570  2e8d				  -
   1571  2e8d				  -	      .byte	%00010000	; SYMBOLS
   1572  2e8d				  -	      .byte	%00111000	; SYMBOLS
   1573  2e8d				  -	      .byte	%01111100	; SYMBOLS
   1574  2e8d				  -	      .byte	%01111100	; SYMBOLS
   1575  2e8d				  -	      .byte	%11111110	; SYMBOLS
   1576  2e8d				  -	      .byte	%11111110	; SYMBOLS
   1577  2e8d				  -	      .byte	%11101110	; SYMBOLS
   1578  2e8d				  -	      .byte	%01000100	; SYMBOLS
   1579  2e8d				  -
   1580  2e8d				  -			;byte %00000000 ; SYMBOLS
   1581  2e8d				  -
   1582  2e8d					      endif		; fontcharHEART
   1583  2e8d
   1584  2e8d				  -	      ifconst	fontcharDIAMOND
   1585  2e8d				  -			;byte %00000000 ; SYMBOLS
   1586  2e8d				  -
   1587  2e8d				  -	      .byte	%00010000	; SYMBOLS
   1588  2e8d				  -	      .byte	%00111000	; SYMBOLS
   1589  2e8d				  -	      .byte	%01111100	; SYMBOLS
   1590  2e8d				  -	      .byte	%11111110	; SYMBOLS
   1591  2e8d				  -	      .byte	%11111110	; SYMBOLS
   1592  2e8d				  -	      .byte	%01111100	; SYMBOLS
   1593  2e8d				  -	      .byte	%00111000	; SYMBOLS
   1594  2e8d				  -	      .byte	%00010000	; SYMBOLS
   1595  2e8d				  -
   1596  2e8d				  -			;byte %00000000 ; SYMBOLS
   1597  2e8d				  -
   1598  2e8d					      endif		; fontcharDIAMOND
   1599  2e8d
   1600  2e8d				  -	      ifconst	fontcharSPADE
   1601  2e8d				  -			;byte %00000000 ; SYMBOLS
   1602  2e8d				  -
   1603  2e8d				  -	      .byte	%00111000	; SYMBOLS
   1604  2e8d				  -	      .byte	%00010000	; SYMBOLS
   1605  2e8d				  -	      .byte	%01010100	; SYMBOLS
   1606  2e8d				  -	      .byte	%11111110	; SYMBOLS
   1607  2e8d				  -	      .byte	%11111110	; SYMBOLS
   1608  2e8d				  -	      .byte	%01111100	; SYMBOLS
   1609  2e8d				  -	      .byte	%00111000	; SYMBOLS
   1610  2e8d				  -	      .byte	%00010000	; SYMBOLS
   1611  2e8d				  -
   1612  2e8d				  -			;byte %00000000 ; SYMBOLS
   1613  2e8d				  -
   1614  2e8d					      endif		; fontcharSPADE
   1615  2e8d
   1616  2e8d				  -	      ifconst	fontcharCLUB
   1617  2e8d				  -			;byte %00000000 ; SYMBOLS
   1618  2e8d				  -
   1619  2e8d				  -	      .byte	%00111000	; SYMBOLS
   1620  2e8d				  -	      .byte	%00010000	; SYMBOLS
   1621  2e8d				  -	      .byte	%11010110	; SYMBOLS
   1622  2e8d				  -	      .byte	%11111110	; SYMBOLS
   1623  2e8d				  -	      .byte	%11010110	; SYMBOLS
   1624  2e8d				  -	      .byte	%00111000	; SYMBOLS
   1625  2e8d				  -	      .byte	%00111000	; SYMBOLS
   1626  2e8d				  -	      .byte	%00000000	; SYMBOLS
   1627  2e8d				  -
   1628  2e8d				  -			;byte %00000000 ; SYMBOLS
   1629  2e8d				  -
   1630  2e8d					      endif		; fontcharCLUB
   1631  2e8d
   1632  2e8d
   1633  2e8d				  -	      ifconst	fontcharCOLON
   1634  2e8d				  -			;byte %00000000 ; SYMBOLS
   1635  2e8d				  -
   1636  2e8d				  -	      .byte	%00000000	; SYMBOLS
   1637  2e8d				  -	      .byte	%00011000	; SYMBOLS
   1638  2e8d				  -	      .byte	%00011000	; SYMBOLS
   1639  2e8d				  -	      .byte	%00000000	; SYMBOLS
   1640  2e8d				  -	      .byte	%00000000	; SYMBOLS
   1641  2e8d				  -	      .byte	%00011000	; SYMBOLS
   1642  2e8d				  -	      .byte	%00011000	; SYMBOLS
   1643  2e8d				  -	      .byte	%00000000	; SYMBOLS
   1644  2e8d				  -
   1645  2e8d				  -			;byte %00000000 ; SYMBOLS
   1646  2e8d				  -
   1647  2e8d					      endif		; fontcharCOLON
   1648  2e8d
   1649  2e8d
   1650  2e8d				  -	      ifconst	fontcharBLOCK
   1651  2e8d				  -
   1652  2e8d				  -			;byte %00000000 ; SYMBOLS
   1653  2e8d				  -
   1654  2e8d				  -	      .byte	%11111111	; SYMBOLS
   1655  2e8d				  -	      .byte	%11111111	; SYMBOLS
   1656  2e8d				  -	      .byte	%11111111	; SYMBOLS
   1657  2e8d				  -	      .byte	%11111111	; SYMBOLS
   1658  2e8d				  -	      .byte	%11111111	; SYMBOLS
   1659  2e8d				  -	      .byte	%11111111	; SYMBOLS
   1660  2e8d				  -	      .byte	%11111111	; SYMBOLS
   1661  2e8d				  -	      .byte	%11111111	; SYMBOLS
   1662  2e8d				  -
   1663  2e8d				  -			;byte %00000000 ; SYMBOLS
   1664  2e8d				  -
   1665  2e8d					      endif		; fontcharBLOCK
   1666  2e8d
   1667  2e8d				  -	      ifconst	fontcharUNDERLINE
   1668  2e8d				  -
   1669  2e8d				  -			;byte %00000000 ; SYMBOLS
   1670  2e8d				  -
   1671  2e8d				  -	      .byte	%11111111	; SYMBOLS
   1672  2e8d				  -	      .byte	%00000000	; SYMBOLS
   1673  2e8d				  -	      .byte	%00000000	; SYMBOLS
   1674  2e8d				  -	      .byte	%00000000	; SYMBOLS
   1675  2e8d				  -	      .byte	%00000000	; SYMBOLS
   1676  2e8d				  -	      .byte	%00000000	; SYMBOLS
   1677  2e8d				  -	      .byte	%00000000	; SYMBOLS
   1678  2e8d				  -	      .byte	%00000000	; SYMBOLS
   1679  2e8d				  -
   1680  2e8d				  -			;byte %00000000 ; SYMBOLS
   1681  2e8d				  -
   1682  2e8d					      endif		; fontcharUNDERLINE
   1683  2e8d
   1684  2e8d				  -	      ifconst	fontcharARISIDE
   1685  2e8d				  -			;byte %00000000 ; SYMBOLS
   1686  2e8d				  -
   1687  2e8d				  -	      .byte	%00000000	; SYMBOLS
   1688  2e8d				  -	      .byte	%00101010	; SYMBOLS
   1689  2e8d				  -	      .byte	%00101010	; SYMBOLS
   1690  2e8d				  -	      .byte	%00101100	; SYMBOLS
   1691  2e8d				  -	      .byte	%01111111	; SYMBOLS
   1692  2e8d				  -	      .byte	%00110111	; SYMBOLS
   1693  2e8d				  -	      .byte	%00000010	; SYMBOLS
   1694  2e8d				  -	      .byte	%00000001	; SYMBOLS
   1695  2e8d				  -
   1696  2e8d				  -			;byte %00000000 ; SYMBOLS
   1697  2e8d				  -
   1698  2e8d					      endif		; fontcharARISIDE
   1699  2e8d
   1700  2e8d				  -	      ifconst	fontcharARIFACE
   1701  2e8d				  -			;byte %00000000 ; SYMBOLS
   1702  2e8d				  -
   1703  2e8d				  -	      .byte	%00001000	; SYMBOLS
   1704  2e8d				  -	      .byte	%00011100	; SYMBOLS
   1705  2e8d				  -	      .byte	%00111110	; SYMBOLS
   1706  2e8d				  -	      .byte	%00101010	; SYMBOLS
   1707  2e8d				  -	      .byte	%00011100	; SYMBOLS
   1708  2e8d				  -	      .byte	%01010100	; SYMBOLS
   1709  2e8d				  -	      .byte	%00100100	; SYMBOLS
   1710  2e8d				  -	      .byte	%00000010	; SYMBOLS
   1711  2e8d				  -
   1712  2e8d				  -			;byte %00000000 ; SYMBOLS
   1713  2e8d				  -
   1714  2e8d				  -
   1715  2e8d					      endif		; fontcharARIRACE
   1716  2e8d
------- FILE titlescreen/asm/titlescreen.asm
    303  2e8d					      endif
    304  2e8d
    305  2e8d					      ifconst	mk_gameselect_on
------- FILE titlescreen/gameselect_image.asm LEVEL 3 PASS 3
      0  2e8d					      include	"titlescreen/gameselect_image.asm"
      1  2e8d				  -	      ifnconst	bmp_gameselect_color
      2  2e8d				  -bmp_gameselect_color
      3  2e8d					      endif
      4  2e8d		       0f		      .byte.b	$0f
      5  2e8e
      6  2e8e				  -	      if	>. != >[.+5]
      7  2e8e				  -	      align	256
      8  2e8e					      endif
      9  2e8e				   bmp_gameselect_CHAR0
     10  2e8e
     11  2e8e		       7a		      .byte.b	%01111010
     12  2e8f		       8a		      .byte.b	%10001010
     13  2e90		       bb		      .byte.b	%10111011
     14  2e91		       82		      .byte.b	%10000010
     15  2e92		       79		      .byte.b	%01111001
     16  2e93
     17  2e93				  -	      if	>. != >[.+5]
     18  2e93				  -	      align	256
     19  2e93					      endif
     20  2e93				   bmp_gameselect_CHAR1
     21  2e93
     22  2e93		       51		      .byte.b	%01010001
     23  2e94		       51		      .byte.b	%01010001
     24  2e95		       d5		      .byte.b	%11010101
     25  2e96		       5b		      .byte.b	%01011011
     26  2e97		       91		      .byte.b	%10010001
     27  2e98
     28  2e98				  -	      if	>. != >[.+5]
     29  2e98				  -	      align	256
     30  2e98					      endif
     31  2e98				   bmp_gameselect_CHAR2
     32  2e98		       78		      .byte.b	%01111000
     33  2e99		       40		      .byte.b	%01000000
     34  2e9a		       70		      .byte.b	%01110000
     35  2e9b		       40		      .byte.b	%01000000
     36  2e9c		       78		      .byte.b	%01111000
     37  2e9d
     38  2e9d				  -	      if	>. != >[.+5]
     39  2e9d				  -	      align	256
     40  2e9d					      endif
     41  2e9d				   bmp_gameselect_CHAR3
     42  2e9d		       00		      .byte.b	%00000000
     43  2e9e		       00		      .byte.b	%00000000
     44  2e9f		       00		      .byte.b	%00000000
     45  2ea0		       00		      .byte.b	%00000000
     46  2ea1		       00		      .byte.b	%00000000
     47  2ea2
     48  2ea2				  -	      if	>. != >[.+80]
     49  2ea2				  -	      align	256
     50  2ea2					      endif
     51  2ea2
     52  2ea2				   font_gameselect_img
     53  2ea2		       3c		      .byte.b	%00111100
     54  2ea3		       66		      .byte.b	%01100110
     55  2ea4		       66		      .byte.b	%01100110
     56  2ea5		       66		      .byte.b	%01100110
     57  2ea6		       3c		      .byte.b	%00111100
     58  2ea7
     59  2ea7		       3c		      .byte.b	%00111100
     60  2ea8		       18		      .byte.b	%00011000
     61  2ea9		       18		      .byte.b	%00011000
     62  2eaa		       18		      .byte.b	%00011000
     63  2eab		       38		      .byte.b	%00111000
     64  2eac
     65  2eac		       7e		      .byte.b	%01111110
     66  2ead		       60		      .byte.b	%01100000
     67  2eae		       3c		      .byte.b	%00111100
     68  2eaf		       06		      .byte.b	%00000110
     69  2eb0		       7c		      .byte.b	%01111100
     70  2eb1
     71  2eb1		       7c		      .byte.b	%01111100
     72  2eb2		       06		      .byte.b	%00000110
     73  2eb3		       1c		      .byte.b	%00011100
     74  2eb4		       06		      .byte.b	%00000110
     75  2eb5		       7c		      .byte.b	%01111100
     76  2eb6
     77  2eb6		       06		      .byte.b	%00000110
     78  2eb7		       06		      .byte.b	%00000110
     79  2eb8		       7e		      .byte.b	%01111110
     80  2eb9		       66		      .byte.b	%01100110
     81  2eba		       66		      .byte.b	%01100110
     82  2ebb
     83  2ebb		       7c		      .byte.b	%01111100
     84  2ebc		       06		      .byte.b	%00000110
     85  2ebd		       7c		      .byte.b	%01111100
     86  2ebe		       60		      .byte.b	%01100000
     87  2ebf		       7e		      .byte.b	%01111110
     88  2ec0
     89  2ec0		       3c		      .byte.b	%00111100
     90  2ec1		       66		      .byte.b	%01100110
     91  2ec2		       7c		      .byte.b	%01111100
     92  2ec3		       60		      .byte.b	%01100000
     93  2ec4		       3c		      .byte.b	%00111100
     94  2ec5
     95  2ec5		       18		      .byte.b	%00011000
     96  2ec6		       18		      .byte.b	%00011000
     97  2ec7		       0c		      .byte.b	%00001100
     98  2ec8		       06		      .byte.b	%00000110
     99  2ec9		       7e		      .byte.b	%01111110
    100  2eca
    101  2eca		       3c		      .byte.b	%00111100
    102  2ecb		       66		      .byte.b	%01100110
    103  2ecc		       3c		      .byte.b	%00111100
    104  2ecd		       66		      .byte.b	%01100110
    105  2ece		       3c		      .byte.b	%00111100
    106  2ecf
    107  2ecf		       3c		      .byte.b	%00111100
    108  2ed0		       06		      .byte.b	%00000110
    109  2ed1		       3e		      .byte.b	%00111110
    110  2ed2		       66		      .byte.b	%01100110
    111  2ed3		       3c		      .byte.b	%00111100
    112  2ed4
    113  2ed4				  -	      ifnconst	gamenumber
    114  2ed4				  -gamenumber
    115  2ed4					      endif
    116  2ed4		       00		      .byte.b	0
    117  2ed5
------- FILE titlescreen/asm/titlescreen.asm
    307  2ed5					      endif
    308  2ed5
    309  2ed5				  -	      ifconst	mk_player_on
    310  2ed5				  -	      include	"titlescreen/asm/player_kernel.asm"
    311  2ed5					      endif		;mk_player_on
    312  2ed5
    313  2ed5
------- FILE d:\Firmaplus\Firmaplus_intern\Atari\PlusROM\Projekte-batariBasic\CaveApocalypse\C.A.V.E. Apocalypse.bas.asm
   6433  2ed5
   6434  2ed5				   .
   6435  2ed5							; 
   6436  2ed5
   6437  2ed5				   .L0533		;  asm
   6438  2ed5
   6439  2ed5				   minikernel
   6440  2ed5
   6441  2ed5		       85 02		      sta	WSYNC
   6442  2ed7
   6443  2ed7		       a5 08		      lda	scback
   6444  2ed9
   6445  2ed9		       85 09		      sta	COLUBK
   6446  2edb
   6447  2edb		       60		      rts
   6448  2edc
   6449  2edc				  -	      if	(<*) > (<(*+7))
   6450  2edc				  -	      repeat	($100-<*)
   6451  2edc				  -	      .byte	0
   6452  2edc				  -	      repend
   6453  2edc					      endif
   6454  2edc				   playercolorL0263_1
   6455  2edc		       1e		      .byte.b	_1E
   6456  2edd		       82		      .byte.b	_82
   6457  2ede		       84		      .byte.b	_84
   6458  2edf		       46		      .byte.b	_46
   6459  2ee0		       44		      .byte.b	_44
   6460  2ee1		       42		      .byte.b	_42
   6461  2ee2		       12		      .byte.b	_12
   6462  2ee3		       08		      .byte.b	_08
   6463  2ee4				  -	      if	(<*) > (<(*+7))
   6464  2ee4				  -	      repeat	($100-<*)
   6465  2ee4				  -	      .byte	0
   6466  2ee4				  -	      repend
   6467  2ee4					      endif
   6468  2ee4				   player15then_1
   6469  2ee4		       1b		      .byte.b	%00011011
   6470  2ee5		       0e		      .byte.b	%00001110
   6471  2ee6		       1f		      .byte.b	%00011111
   6472  2ee7		       bd		      .byte.b	%10111101
   6473  2ee8		       f9		      .byte.b	%11111001
   6474  2ee9		       9e		      .byte.b	%10011110
   6475  2eea		       08		      .byte.b	%00001000
   6476  2eeb		       7c		      .byte.b	%01111100
   6477  2eec				  -	      if	(<*) > (<(*+7))
   6478  2eec				  -	      repeat	($100-<*)
   6479  2eec				  -	      .byte	0
   6480  2eec				  -	      repend
   6481  2eec					      endif
   6482  2eec				   player16then_1
   6483  2eec		       1b		      .byte.b	%00011011
   6484  2eed		       0e		      .byte.b	%00001110
   6485  2eee		       1f		      .byte.b	%00011111
   6486  2eef		       bd		      .byte.b	%10111101
   6487  2ef0		       f9		      .byte.b	%11111001
   6488  2ef1		       9e		      .byte.b	%10011110
   6489  2ef2		       08		      .byte.b	%00001000
   6490  2ef3		       1f		      .byte.b	%00011111
   6491  2ef4				  -	      if	(<*) > (<(*+6))
   6492  2ef4				  -	      repeat	($100-<*)
   6493  2ef4				  -	      .byte	0
   6494  2ef4				  -	      repend
   6495  2ef4					      endif
   6496  2ef4				   player17then_0
   6497  2ef4		       55		      .byte.b	%01010101
   6498  2ef5		       aa		      .byte.b	%10101010
   6499  2ef6		       ff		      .byte.b	%11111111
   6500  2ef7		       3c		      .byte.b	%00111100
   6501  2ef8		       18		      .byte.b	%00011000
   6502  2ef9		       08		      .byte.b	%00001000
   6503  2efa		       04		      .byte.b	%00000100
   6504  2efb					      if	(<*) > (<(*+6))
   6505  2efb					      repeat	($100-<*)
   6506  2efb		       00		      .byte.b	0
   6505  2efb					      repend
   6506  2efc		       00		      .byte.b	0
   6505  2efc					      repend
   6506  2efd		       00		      .byte.b	0
   6505  2efd					      repend
   6506  2efe		       00		      .byte.b	0
   6505  2efe					      repend
   6506  2eff		       00		      .byte.b	0
   6507  2f00					      repend
   6508  2f00					      endif
   6509  2f00				   player18then_0
   6510  2f00		       aa		      .byte.b	%10101010
   6511  2f01		       55		      .byte.b	%01010101
   6512  2f02		       ff		      .byte.b	%11111111
   6513  2f03		       3c		      .byte.b	%00111100
   6514  2f04		       18		      .byte.b	%00011000
   6515  2f05		       08		      .byte.b	%00001000
   6516  2f06		       04		      .byte.b	%00000100
   6517  2f07				  -	      if	(<*) > (<(*+11))
   6518  2f07				  -	      repeat	($100-<*)
   6519  2f07				  -	      .byte	0
   6520  2f07				  -	      repend
   6521  2f07					      endif
   6522  2f07				   playerL0302_0
   6523  2f07		       a0		      .byte.b	%10100000
   6524  2f08		       40		      .byte.b	%01000000
   6525  2f09		       e0		      .byte.b	%11100000
   6526  2f0a		       a0		      .byte.b	%10100000
   6527  2f0b		       40		      .byte.b	%01000000
   6528  2f0c		       00		      .byte.b	%00000000
   6529  2f0d		       00		      .byte.b	%00000000
   6530  2f0e		       05		      .byte.b	%00000101
   6531  2f0f		       02		      .byte.b	%00000010
   6532  2f10		       07		      .byte.b	%00000111
   6533  2f11		       05		      .byte.b	%00000101
   6534  2f12		       02		      .byte.b	%00000010
   6535  2f13				  -	      if	(<*) > (<(*+24))
   6536  2f13				  -	      repeat	($100-<*)
   6537  2f13				  -	      .byte	0
   6538  2f13				  -	      repend
   6539  2f13					      endif
   6540  2f13				   playerL0304_0
   6541  2f13		       3c		      .byte.b	%00111100
   6542  2f14		       20		      .byte.b	%00100000
   6543  2f15		       20		      .byte.b	%00100000
   6544  2f16		       20		      .byte.b	%00100000
   6545  2f17		       20		      .byte.b	%00100000
   6546  2f18		       00		      .byte.b	%00000000
   6547  2f19		       3c		      .byte.b	%00111100
   6548  2f1a		       20		      .byte.b	%00100000
   6549  2f1b		       38		      .byte.b	%00111000
   6550  2f1c		       20		      .byte.b	%00100000
   6551  2f1d		       3c		      .byte.b	%00111100
   6552  2f1e		       00		      .byte.b	%00000000
   6553  2f1f		       18		      .byte.b	%00011000
   6554  2f20		       24		      .byte.b	%00100100
   6555  2f21		       24		      .byte.b	%00100100
   6556  2f22		       24		      .byte.b	%00100100
   6557  2f23		       24		      .byte.b	%00100100
   6558  2f24		       00		      .byte.b	%00000000
   6559  2f25		       20		      .byte.b	%00100000
   6560  2f26		       20		      .byte.b	%00100000
   6561  2f27		       38		      .byte.b	%00111000
   6562  2f28		       20		      .byte.b	%00100000
   6563  2f29		       bd		      .byte.b	%10111101
   6564  2f2a		       81		      .byte.b	%10000001
   6565  2f2b		       ff		      .byte.b	%11111111
   6566  2f2c				  -	      if	(<*) > (<(*+3))
   6567  2f2c				  -	      repeat	($100-<*)
   6568  2f2c				  -	      .byte	0
   6569  2f2c				  -	      repend
   6570  2f2c					      endif
   6571  2f2c				   player19then_0
   6572  2f2c		       a6		      .byte.b	%10100110
   6573  2f2d		       42		      .byte.b	%01000010
   6574  2f2e		       63		      .byte.b	%01100011
   6575  2f2f		       42		      .byte.b	%01000010
   6576  2f30				  -	      if	(<*) > (<(*+3))
   6577  2f30				  -	      repeat	($100-<*)
   6578  2f30				  -	      .byte	0
   6579  2f30				  -	      repend
   6580  2f30					      endif
   6581  2f30				   player20then_0
   6582  2f30		       c5		      .byte.b	%11000101
   6583  2f31		       42		      .byte.b	%01000010
   6584  2f32		       63		      .byte.b	%01100011
   6585  2f33		       42		      .byte.b	%01000010
   6586  2f34					      if	ECHOFIRST
      61 bytes of ROM space left in bank 2
   6587  2f34					      echo	"    ",[(scoretable - *)]d , "bytes of ROM space left in bank 2")
   6588  2f34					      endif
   6589  2f34		       00 01	   ECHOFIRST  =	1
   6590  2f34
   6591  2f34
   6592  2f34							; Provided under the CC0 license. See the included LICENSE.txt for details.
   6593  2f34
   6594  2f34							; feel free to modify the score graphics - just keep each digit 8 high
   6595  2f34							; and keep the conditional compilation stuff intact
   6596  2f34				  -	      ifconst	ROM2k
   6597  2f34				  -	      ifconst	PlusROM_functions
   6598  2f34				  -	      ORG	$F7AC-16
   6599  2f34				  -	      else
   6600  2f34				  -	      ORG	$F7AC-8
   6601  2f34				  -	      endif
   6602  2f34					      else
   6603  2f34					      ifconst	bankswitch
   6604  2f34					      if	bankswitch == 8
   6605  2f71					      ORG	$2F94-bscode_length
   6606  2f71					      RORG	$FF94-bscode_length
   6607  2f71					      endif
   6608  2f71				  -	      if	bankswitch == 16
   6609  2f71				  -	      ORG	$4F94-bscode_length
   6610  2f71				  -	      RORG	$FF94-bscode_length
   6611  2f71					      endif
   6612  2f71				  -	      if	bankswitch == 32
   6613  2f71				  -	      ORG	$8F94-bscode_length
   6614  2f71				  -	      RORG	$FF94-bscode_length
   6615  2f71					      endif
   6616  2f71				  -	      if	bankswitch == 64
   6617  2f71				  -	      ORG	$10F80-bscode_length
   6618  2f71				  -	      RORG	$1FF80-bscode_length
   6619  2f71					      endif
   6620  2f71				  -	      else
   6621  2f71				  -	      ifconst	PlusROM_functions
   6622  2f71				  -	      ORG	$FF98
   6623  2f71				  -	      else
   6624  2f71				  -	      ORG	$FF9C
   6625  2f71				  -	      endif
   6626  2f71					      endif
   6627  2f71					      endif
   6628  2f71
   6629  2f71							; font equates
   6630  2f71		       00 01	   .21stcentury =	1
   6631  2f71		       00 02	   alarmclock =	2
   6632  2f71		       00 03	   handwritten =	3
   6633  2f71		       00 04	   interrupted =	4
   6634  2f71		       00 05	   retroputer =	5
   6635  2f71		       00 06	   whimsey    =	6
   6636  2f71		       00 07	   tiny       =	7
   6637  2f71		       00 08	   hex	      =	8
   6638  2f71
   6639  2f71				  -	      ifconst	font
   6640  2f71				  -	      if	font == hex
   6641  2f71				  -	      ORG	. - 48
   6642  2f71				  -	      endif
   6643  2f71					      endif
   6644  2f71
   6645  2f71				   scoretable
   6646  2f71
   6647  2f71				  -	      ifconst	font
   6648  2f71				  -	      if	font == .21stcentury
   6649  2f71				  -	      include	"score_graphics.asm.21stcentury"
   6650  2f71				  -	      endif
   6651  2f71				  -	      if	font == alarmclock
   6652  2f71				  -	      include	"score_graphics.asm.alarmclock"
   6653  2f71				  -	      endif
   6654  2f71				  -	      if	font == handwritten
   6655  2f71				  -	      include	"score_graphics.asm.handwritten"
   6656  2f71				  -	      endif
   6657  2f71				  -	      if	font == interrupted
   6658  2f71				  -	      include	"score_graphics.asm.interrupted"
   6659  2f71				  -	      endif
   6660  2f71				  -	      if	font == retroputer
   6661  2f71				  -	      include	"score_graphics.asm.retroputer"
   6662  2f71				  -	      endif
   6663  2f71				  -	      if	font == whimsey
   6664  2f71				  -	      include	"score_graphics.asm.whimsey"
   6665  2f71				  -	      endif
   6666  2f71				  -	      if	font == tiny
   6667  2f71				  -	      include	"score_graphics.asm.tiny"
   6668  2f71				  -	      endif
   6669  2f71				  -	      if	font == hex
   6670  2f71				  -	      include	"score_graphics.asm.hex"
   6671  2f71				  -	      endif
   6672  2f71					      else		; default font
   6673  2f71
   6674  2f71		       3c		      .byte.b	%00111100
   6675  2f72		       66		      .byte.b	%01100110
   6676  2f73		       66		      .byte.b	%01100110
   6677  2f74		       66		      .byte.b	%01100110
   6678  2f75		       66		      .byte.b	%01100110
   6679  2f76		       66		      .byte.b	%01100110
   6680  2f77		       66		      .byte.b	%01100110
   6681  2f78		       3c		      .byte.b	%00111100
   6682  2f79
   6683  2f79		       7e		      .byte.b	%01111110
   6684  2f7a		       18		      .byte.b	%00011000
   6685  2f7b		       18		      .byte.b	%00011000
   6686  2f7c		       18		      .byte.b	%00011000
   6687  2f7d		       18		      .byte.b	%00011000
   6688  2f7e		       38		      .byte.b	%00111000
   6689  2f7f		       18		      .byte.b	%00011000
   6690  2f80		       08		      .byte.b	%00001000
   6691  2f81
   6692  2f81		       7e		      .byte.b	%01111110
   6693  2f82		       60		      .byte.b	%01100000
   6694  2f83		       60		      .byte.b	%01100000
   6695  2f84		       3c		      .byte.b	%00111100
   6696  2f85		       06		      .byte.b	%00000110
   6697  2f86		       06		      .byte.b	%00000110
   6698  2f87		       46		      .byte.b	%01000110
   6699  2f88		       3c		      .byte.b	%00111100
   6700  2f89
   6701  2f89		       3c		      .byte.b	%00111100
   6702  2f8a		       46		      .byte.b	%01000110
   6703  2f8b		       06		      .byte.b	%00000110
   6704  2f8c		       06		      .byte.b	%00000110
   6705  2f8d		       1c		      .byte.b	%00011100
   6706  2f8e		       06		      .byte.b	%00000110
   6707  2f8f		       46		      .byte.b	%01000110
   6708  2f90		       3c		      .byte.b	%00111100
   6709  2f91
   6710  2f91		       0c		      .byte.b	%00001100
   6711  2f92		       0c		      .byte.b	%00001100
   6712  2f93		       7e		      .byte.b	%01111110
   6713  2f94		       4c		      .byte.b	%01001100
   6714  2f95		       4c		      .byte.b	%01001100
   6715  2f96		       2c		      .byte.b	%00101100
   6716  2f97		       1c		      .byte.b	%00011100
   6717  2f98		       0c		      .byte.b	%00001100
   6718  2f99
   6719  2f99		       3c		      .byte.b	%00111100
   6720  2f9a		       46		      .byte.b	%01000110
   6721  2f9b		       06		      .byte.b	%00000110
   6722  2f9c		       06		      .byte.b	%00000110
   6723  2f9d		       3c		      .byte.b	%00111100
   6724  2f9e		       60		      .byte.b	%01100000
   6725  2f9f		       60		      .byte.b	%01100000
   6726  2fa0		       7e		      .byte.b	%01111110
   6727  2fa1
   6728  2fa1		       3c		      .byte.b	%00111100
   6729  2fa2		       66		      .byte.b	%01100110
   6730  2fa3		       66		      .byte.b	%01100110
   6731  2fa4		       66		      .byte.b	%01100110
   6732  2fa5		       7c		      .byte.b	%01111100
   6733  2fa6		       60		      .byte.b	%01100000
   6734  2fa7		       62		      .byte.b	%01100010
   6735  2fa8		       3c		      .byte.b	%00111100
   6736  2fa9
   6737  2fa9		       30		      .byte.b	%00110000
   6738  2faa		       30		      .byte.b	%00110000
   6739  2fab		       30		      .byte.b	%00110000
   6740  2fac		       18		      .byte.b	%00011000
   6741  2fad		       0c		      .byte.b	%00001100
   6742  2fae		       06		      .byte.b	%00000110
   6743  2faf		       42		      .byte.b	%01000010
   6744  2fb0		       3e		      .byte.b	%00111110
   6745  2fb1
   6746  2fb1		       3c		      .byte.b	%00111100
   6747  2fb2		       66		      .byte.b	%01100110
   6748  2fb3		       66		      .byte.b	%01100110
   6749  2fb4		       66		      .byte.b	%01100110
   6750  2fb5		       3c		      .byte.b	%00111100
   6751  2fb6		       66		      .byte.b	%01100110
   6752  2fb7		       66		      .byte.b	%01100110
   6753  2fb8		       3c		      .byte.b	%00111100
   6754  2fb9
   6755  2fb9		       3c		      .byte.b	%00111100
   6756  2fba		       46		      .byte.b	%01000110
   6757  2fbb		       06		      .byte.b	%00000110
   6758  2fbc		       3e		      .byte.b	%00111110
   6759  2fbd		       66		      .byte.b	%01100110
   6760  2fbe		       66		      .byte.b	%01100110
   6761  2fbf		       66		      .byte.b	%01100110
   6762  2fc0		       3c		      .byte.b	%00111100
   6763  2fc1
   6764  2fc1					      ifnconst	DPC_kernel_options
   6765  2fc1
   6766  2fc1		       00		      .byte.b	%00000000
   6767  2fc2		       00		      .byte.b	%00000000
   6768  2fc3		       00		      .byte.b	%00000000
   6769  2fc4		       00		      .byte.b	%00000000
   6770  2fc5		       00		      .byte.b	%00000000
   6771  2fc6		       00		      .byte.b	%00000000
   6772  2fc7		       00		      .byte.b	%00000000
   6773  2fc8		       00		      .byte.b	%00000000
   6774  2fc9
   6775  2fc9					      endif
   6776  2fc9
   6777  2fc9					      endif
   6778  2fc9
   6779  2fc9				  -	      ifconst	ROM2k
   6780  2fc9				  -	      ifconst	PlusROM_functions
   6781  2fc9				  -	      ORG	$F7F0
   6782  2fc9				  -	      .byte	0	; WriteToBuffer
   6783  2fc9				  -	      .byte	0	; WriteSendBuffer
   6784  2fc9				  -	      .byte	0	; ReceiveBuffer
   6785  2fc9				  -	      .byte	$ff	; ReceiveBufferSize (none zero for detection of PlusROM support)
   6786  2fc9				  -	      ORG	$F7FA
   6787  2fc9				  -	      else
   6788  2fc9				  -	      ORG	$F7FC
   6789  2fc9				  -	      endif
   6790  2fc9					      else
   6791  2fc9					      ifconst	bankswitch
   6792  2fc9					      if	bankswitch == 8
   6793  2fd1					      ORG	$2FF4-bscode_length
   6794  2fd1					      RORG	$FFF4-bscode_length
   6795  2fd1					      endif
   6796  2fd1				  -	      if	bankswitch == 16
   6797  2fd1				  -	      ORG	$4FF4-bscode_length
   6798  2fd1				  -	      RORG	$FFF4-bscode_length
   6799  2fd1					      endif
   6800  2fd1				  -	      if	bankswitch == 32
   6801  2fd1				  -	      ORG	$8FF4-bscode_length
   6802  2fd1				  -	      RORG	$FFF4-bscode_length
   6803  2fd1					      endif
   6804  2fd1				  -	      if	bankswitch == 64
   6805  2fd1				  -	      ORG	$10FE0-bscode_length
   6806  2fd1				  -	      RORG	$1FFE0-bscode_length
   6807  2fd1					      endif
   6808  2fd1				  -	      else
   6809  2fd1				  -	      ifconst	PlusROM_functions
   6810  2fd1				  -	      ORG	$FFF0
   6811  2fd1				  -	      .byte	0	; WriteToBuffer
   6812  2fd1				  -	      .byte	0	; WriteSendBuffer
   6813  2fd1				  -	      .byte	0	; ReceiveBuffer
   6814  2fd1				  -	      .byte	$ff	; ReceiveBufferSize (none zero for detection of PlusROM support)
   6815  2fd1				  -	      ORG	$FFFA
   6816  2fd1				  -	      else
   6817  2fd1				  -	      ORG	$FFFC
   6818  2fd1				  -	      endif
   6819  2fd1					      endif
   6820  2fd1					      endif
   6821  2fd1							; Provided under the CC0 license. See the included LICENSE.txt for details.
   6822  2fd1
   6823  2fd1							; every bank has this stuff at the same place
   6824  2fd1							; this code can switch to/from any bank at any entry point
   6825  2fd1							; and can preserve register values
   6826  2fd1							; note: lines not starting with a space are not placed in all banks
   6827  2fd1							;
   6828  2fd1							; line below tells the compiler how long this is - do not remove
   6829  2fd1							;size=35
   6830  2fd1
   6831  2fd1				   begin_bscode
   6832  2fd1		       a2 ff		      ldx	#$ff
   6833  2fd3				  -	      ifconst	FASTFETCH	; using DPC+
   6834  2fd3				  -	      stx	FASTFETCH
   6835  2fd3					      endif
   6836  2fd3		       9a		      txs
   6837  2fd4				  -	      if	bankswitch == 64
   6838  2fd4				  -	      lda	#(((>(start-1)) & $0F) | $F0)
   6839  2fd4					      else
   6840  2fd4		       a9 f3		      lda	#>(start-1)
   6841  2fd6					      endif
   6842  2fd6		       48		      pha
   6843  2fd7		       a9 51		      lda	#<(start-1)
   6844  2fd9		       48		      pha
   6845  2fda
   6846  2fda				   BS_return
   6847  2fda		       48		      pha
   6848  2fdb		       8a		      txa
   6849  2fdc		       48		      pha
   6850  2fdd		       ba		      tsx
   6851  2fde
   6852  2fde					      if	bankswitch != 64
   6853  2fde		       b5 04		      lda	4,x	; get high byte of return address
   6854  2fe0
   6855  2fe0		       2a		      rol
   6856  2fe1		       2a		      rol
   6857  2fe2		       2a		      rol
   6858  2fe3		       2a		      rol
   6859  2fe4		       29 01		      and	#bs_mask	;1 3 or 7 for F8/F6/F4
   6860  2fe6		       aa		      tax
   6861  2fe7		       e8		      inx
   6862  2fe8				  -	      else
   6863  2fe8				  -	      lda	4,x	; get high byte of return address
   6864  2fe8				  -	      tay
   6865  2fe8				  -	      ora	#$10	; change our bank nibble into a valid rom mirror
   6866  2fe8				  -	      sta	4,x
   6867  2fe8				  -	      tya
   6868  2fe8				  -	      lsr
   6869  2fe8				  -	      lsr
   6870  2fe8				  -	      lsr
   6871  2fe8				  -	      lsr
   6872  2fe8				  -	      tax
   6873  2fe8				  -	      inx
   6874  2fe8					      endif
   6875  2fe8
   6876  2fe8				   BS_jsr
   6877  2fe8		       bd f7 1f 	      lda	bankswitch_hotspot-1,x
   6878  2feb		       68		      pla
   6879  2fec		       aa		      tax
   6880  2fed		       68		      pla
   6881  2fee		       60		      rts
   6882  2fef				  -	      if	((* & $1FFF) > ((bankswitch_hotspot & $1FFF) - 1))
   6883  2fef				  -	      echo	"WARNING: size parameter in banksw.asm too small - the program probably will not work."
   6884  2fef				  -	      echo	"Change to",[(*-begin_bscode+1)&$FF]d,"and try again."
   6885  2fef					      endif
   6886  2fef							; Provided under the CC0 license. See the included LICENSE.txt for details.
   6887  2fef
   6888  2fef					      ifconst	bankswitch
   6889  2fef					      if	bankswitch == 8
   6890  2fef					      ifconst	PlusROM_functions
   6891  2ff0					      ORG	$2FF0
   6892  2ff0					      RORG	$FFF0
   6893  2ff0		       00		      .byte.b	0	; WriteToBuffer
   6894  2ff1		       00		      .byte.b	0	; WriteSendBuffer
   6895  2ff2		       00		      .byte.b	0	; ReceiveBuffer
   6896  2ff3		       ff		      .byte.b	$ff	; ReceiveBufferSize (none zero for detection of PlusROM support)
   6897  2ffa					      ORG	$2FFA
   6898  2ffa					      RORG	$FFFA
   6899  2ffa		       1d 1d		      .word.w	(PlusROM_API-$C000)
   6900  2ffc				  -	      else
   6901  2ffc				  -	      ORG	$2FFC
   6902  2ffc				  -	      RORG	$FFFC
   6903  2ffc					      endif
   6904  2ffc					      endif
   6905  2ffc				  -	      if	bankswitch == 16
   6906  2ffc				  -	      ifconst	PlusROM_functions
   6907  2ffc				  -	      ORG	$4FF0
   6908  2ffc				  -	      RORG	$FFF0
   6909  2ffc				  -	      .byte	0	; WriteToBuffer
   6910  2ffc				  -	      .byte	0	; WriteSendBuffer
   6911  2ffc				  -	      .byte	0	; ReceiveBuffer
   6912  2ffc				  -	      .byte	$ff	; ReceiveBufferSize (none zero for detection of PlusROM support)
   6913  2ffc				  -	      ORG	$4FFA
   6914  2ffc				  -	      RORG	$FFFA
   6915  2ffc				  -	      .word	(PlusROM_API-$9000)
   6916  2ffc				  -	      else
   6917  2ffc				  -	      ORG	$4FFC
   6918  2ffc				  -	      RORG	$FFFC
   6919  2ffc				  -	      endif
   6920  2ffc					      endif
   6921  2ffc				  -	      if	bankswitch == 32
   6922  2ffc				  -	      ifconst	PlusROM_functions
   6923  2ffc				  -	      ORG	$8FF0
   6924  2ffc				  -	      RORG	$FFF0
   6925  2ffc				  -	      .byte	0	; WriteToBuffer
   6926  2ffc				  -	      .byte	0	; WriteSendBuffer
   6927  2ffc				  -	      .byte	0	; ReceiveBuffer
   6928  2ffc				  -	      .byte	$ff	; ReceiveBufferSize (none zero for detection of PlusROM support)
   6929  2ffc				  -	      ORG	$8FFA
   6930  2ffc				  -	      RORG	$FFFA
   6931  2ffc				  -	      .word	(PlusROM_API-$5000)
   6932  2ffc				  -	      else
   6933  2ffc				  -	      ORG	$8FFC
   6934  2ffc				  -	      RORG	$FFFC
   6935  2ffc				  -	      endif
   6936  2ffc					      endif
   6937  2ffc				  -	      if	bankswitch == 64
   6938  2ffc				  -	      ORG	$10FF0
   6939  2ffc				  -	      RORG	$1FFF0
   6940  2ffc				  -	      lda	$ffe0	; we use wasted space to assist stella with EF format auto-detection
   6941  2ffc				  -	      ORG	$10FF8
   6942  2ffc				  -	      RORG	$1FFF8
   6943  2ffc				  -	      ifconst	superchip
   6944  2ffc				  -	      .byte	"E","F","S","C"
   6945  2ffc				  -	      else
   6946  2ffc				  -	      .byte	"E","F","E","F"
   6947  2ffc				  -	      endif
   6948  2ffc				  -	      ORG	$10FFC
   6949  2ffc				  -	      RORG	$1FFFC
   6950  2ffc					      endif
   6951  2ffc				  -	      else
   6952  2ffc				  -	      ifconst	ROM2k
   6953  2ffc				  -	      ifconst	PlusROM_functions
   6954  2ffc				  -	      ORG	$F7FA
   6955  2ffc				  -	      .word	(PlusROM_API-$E000)
   6956  2ffc				  -	      else
   6957  2ffc				  -	      ORG	$F7FC
   6958  2ffc				  -	      endif
   6959  2ffc				  -	      else
   6960  2ffc				  -	      ifconst	PlusROM_functions
   6961  2ffc				  -	      ORG	$FFFA
   6962  2ffc				  -	      .word	(PlusROM_API-$E000)
   6963  2ffc				  -	      else
   6964  2ffc				  -	      ORG	$FFFC
   6965  2ffc				  -	      endif
   6966  2ffc				  -	      endif
   6967  2ffc					      endif
   6968  2ffc		       52 f3		      .word.w	(start & $ffff)
   6969  2ffe		       52 f3		      .word.w	(start & $ffff)
