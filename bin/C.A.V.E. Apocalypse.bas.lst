------- FILE d:\Firmaplus\Firmaplus_intern\Atari\PlusROM\Projekte-batariBasic\CaveApocalypse\C.A.V.E. Apocalypse.bas.asm LEVEL 1 PASS 3
      1  5000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  5000 ????
      3  5000 ????				      processor	6502
------- FILE vcs.h LEVEL 2 PASS 3
      0  5000 ????				      include	"vcs.h"
      1  5000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  5000 ????
      3  5000 ????						; VCS.H
      4  5000 ????						; Version 1.05, 13/November/2003
      5  5000 ????
      6  5000 ????	       00 69	   VERSION_VCS =	105
      7  5000 ????
      8  5000 ????						; THIS IS A PRELIMINARY RELEASE OF *THE* "STANDARD" VCS.H
      9  5000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
     10  5000 ????						; PLEASE DO *NOT* REDISTRIBUTE THIS FILE!
     11  5000 ????						;
     12  5000 ????						; This file defines hardware registers and memory mapping for the
     13  5000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     14  5000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     15  5000 ????						; available at at http://www.atari2600.org/dasm
     16  5000 ????						;
     17  5000 ????						; Many thanks to the original author(s) of this file, and to everyone who has
     18  5000 ????						; contributed to understanding the Atari 2600.  If you take issue with the
     19  5000 ????						; contents, or naming of registers, please write to me (atari2600@taswegian.com)
     20  5000 ????						; with your views.  Please contribute, if you think you can improve this
     21  5000 ????						; file!
     22  5000 ????						;
     23  5000 ????						; Latest Revisions...
     24  5000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     25  5000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     26  5000 ????						;			    This will allow conditional code to verify VCS.H being
     27  5000 ????						;			    used for code assembly.
     28  5000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     29  5000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     30  5000 ????						;			 mirrored reading/writing differences.	This is more a 
     31  5000 ????						;			 readability issue, and binary compatibility with disassembled
     32  5000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     33  5000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     34  5000 ????						;			 which was broken by the use of segments in this file, as
     35  5000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     36  5000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     37  5000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     38  5000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     39  5000 ????						;						   it is safe to leave it undefined, and the base address will
     40  5000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     41  5000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     42  5000 ????						;			  - register definitions are now generated through assignment
     43  5000 ????						;			    in uninitialised segments.	This allows a changeable base
     44  5000 ????						;			    address architecture.
     45  5000 ????						; 1.0	22/MAR/2003		Initial release
     46  5000 ????
     47  5000 ????
     48  5000 ????						;-------------------------------------------------------------------------------
     49  5000 ????
     50  5000 ????						; TIA_BASE_ADDRESS
     51  5000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     52  5000 ????						; Normally 0, the base address should (externally, before including this file)
     53  5000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     54  5000 ????						; The reason is that this bankswitching scheme treats any access to locations
     55  5000 ????						; < $40 as a bankswitch.
     56  5000 ????
     57  5000 ????			  -	      IFNCONST	TIA_BASE_ADDRESS
     58  5000 ????			  -TIA_BASE_ADDRESS =	0
     59  5000 ????				      ENDIF
     60  5000 ????
     61  5000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     62  5000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     63  5000 ????						; *OR* by declaring the label before including this file, eg:
     64  5000 ????						; TIA_BASE_ADDRESS = $40
     65  5000 ????						;   include "vcs.h"
     66  5000 ????
     67  5000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     68  5000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     69  5000 ????						; for the mirrored ROM hardware registers.
     70  5000 ????
     71  5000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     72  5000 ????						; using the -D command-line switch, as required.  If the addresses are not defined, 
     73  5000 ????						; they defaut to the TIA_BASE_ADDRESS.
     74  5000 ????
     75  5000 ????			  -	      IFNCONST	TIA_BASE_READ_ADDRESS
     76  5000 ????			  -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     77  5000 ????				      ENDIF
     78  5000 ????
     79  5000 ????			  -	      IFNCONST	TIA_BASE_WRITE_ADDRESS
     80  5000 ????			  -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     81  5000 ????				      ENDIF
     82  5000 ????
     83  5000 ????						;-------------------------------------------------------------------------------
     84  5000 ????
     85 U002d ????				      SEG.U	TIA_REGISTERS_WRITE
     86 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     87 U0000
     88 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     89 U0000
     90 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     91 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     92 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     93 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     94 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     95 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     96 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     97 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     98 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     99 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
    100 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
    101 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    102 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    103 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    104 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    105 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    106 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    107 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    108 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    109 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    110 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    111 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    112 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    113 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    114 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    115 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    116 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    117 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    118 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    119 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    120 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    121 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    122 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    123 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    124 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    125 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    126 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    127 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    128 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    129 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    130 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    131 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    132 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    133 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    134 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    135 U002d
    136 U002d							;-------------------------------------------------------------------------------
    137 U002d
    138 U000e ????				      SEG.U	TIA_REGISTERS_READ
    139 U0000					      ORG	TIA_BASE_READ_ADDRESS
    140 U0000
    141 U0000							;											bit 7	 bit 6
    142 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    143 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    144 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    145 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    146 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    147 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    148 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    149 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    150 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    151 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    152 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    153 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    154 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    155 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    156 U000e
    157 U000e							;-------------------------------------------------------------------------------
    158 U000e
    159 U0298 ????				      SEG.U	RIOT
    160 U0280					      ORG	$280
    161 U0280
    162 U0280							; RIOT MEMORY MAP
    163 U0280
    164 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    165 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    166 U0281
    167 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    168 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    169 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    170 U0284		       00	   INTIM      ds	1	; $284		Timer output
    171 U0285
    172 U0285		       00	   TIMINT     ds	1	; $285
    173 U0286
    174 U0286							; Unused/undefined registers ($285-$294)
    175 U0286
    176 U0286		       00		      ds	1	; $286
    177 U0287		       00		      ds	1	; $287
    178 U0288		       00		      ds	1	; $288
    179 U0289		       00		      ds	1	; $289
    180 U028a		       00		      ds	1	; $28A
    181 U028b		       00		      ds	1	; $28B
    182 U028c		       00		      ds	1	; $28C
    183 U028d		       00		      ds	1	; $28D
    184 U028e		       00		      ds	1	; $28E
    185 U028f		       00		      ds	1	; $28F
    186 U0290		       00		      ds	1	; $290
    187 U0291		       00		      ds	1	; $291
    188 U0292		       00		      ds	1	; $292
    189 U0293		       00		      ds	1	; $293
    190 U0294
    191 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    192 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    193 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    194 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    195 U0298
    196 U0298							;-------------------------------------------------------------------------------
    197 U0298							; The following required for back-compatibility with code which does not use
    198 U0298							; segments.
    199 U0298
    200  5000 ????				      SEG
    201  5000 ????
    202  5000 ????						; EOF
------- FILE d:\Firmaplus\Firmaplus_intern\Atari\PlusROM\Projekte-batariBasic\CaveApocalypse\C.A.V.E. Apocalypse.bas.asm
------- FILE macro.h LEVEL 2 PASS 3
      0  5000 ????				      include	"macro.h"
      1  5000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  5000 ????
      3  5000 ????						; MACRO.H
      4  5000 ????						; Version 1.05, 13/NOVEMBER/2003
      5  5000 ????
      6  5000 ????	       00 69	   VERSION_MACRO =	105
      7  5000 ????
      8  5000 ????						;
      9  5000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
     10  5000 ????						; PLEASE DO *NOT* REDISTRIBUTE MODIFIED VERSIONS OF THIS FILE!
     11  5000 ????						;
     12  5000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     13  5000 ????						; It is distributed as a companion machine-specific support package
     14  5000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     15  5000 ????						; available at at http://www.atari2600.org/dasm
     16  5000 ????						;
     17  5000 ????						; Many thanks to the people who have contributed.  If you take issue with the
     18  5000 ????						; contents, or would like to add something, please write to me
     19  5000 ????						; (atari2600@taswegian.com) with your contribution.
     20  5000 ????						;
     21  5000 ????						; Latest Revisions...
     22  5000 ????						;
     23  5000 ????						; 1.05  14/NOV/2003	  - Added VERSION_MACRO equate (which will reflect 100x version #)
     24  5000 ????						;			    This will allow conditional code to verify MACRO.H being
     25  5000 ????						;			    used for code assembly.
     26  5000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     27  5000 ????						;
     28  5000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     29  5000 ????						;
     30  5000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     31  5000 ????						;			   (standardised macro for vertical synch code)
     32  5000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added. 
     33  5000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     34  5000 ????						; 1.0	22/MAR/2003		Initial release
     35  5000 ????
     36  5000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage, 
     37  5000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     38  5000 ????						;   If you do not allow illegal opcode usage, you must include this file 
     39  5000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     40  5000 ????						;   registers and require them to be defined first).
     41  5000 ????
     42  5000 ????						; Available macros...
     43  5000 ????						;   SLEEP n		 - sleep for n cycles
     44  5000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     45  5000 ????						;   CLEAN_START	 - set machine to known state on startup
     46  5000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     47  5000 ????
     48  5000 ????						;-------------------------------------------------------------------------------
     49  5000 ????						; SLEEP duration
     50  5000 ????						; Original author: Thomas Jentzsch
     51  5000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     52  5000 ????						; useful for code where precise timing is required.
     53  5000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     54  5000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     55  5000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     56  5000 ????
     57  5000 ????				      MAC	sleep
     58  5000 ????			   .CYCLES    SET	{1}
     59  5000 ????
     60  5000 ????				      IF	.CYCLES < 2
     61  5000 ????				      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     62  5000 ????				      ERR
     63  5000 ????				      ENDIF
     64  5000 ????
     65  5000 ????				      IF	.CYCLES & 1
     66  5000 ????				      IFNCONST	NO_ILLEGAL_OPCODES
     67  5000 ????				      nop	0
     68  5000 ????				      ELSE
     69  5000 ????				      bit	VSYNC
     70  5000 ????				      ENDIF
     71  5000 ????			   .CYCLES    SET	.CYCLES - 3
     72  5000 ????				      ENDIF
     73  5000 ????
     74  5000 ????				      REPEAT	.CYCLES / 2
     75  5000 ????				      nop
     76  5000 ????				      REPEND
     77  5000 ????				      ENDM		;usage: SLEEP n (n>1)
     78  5000 ????
     79  5000 ????						;-------------------------------------------------------------------------------
     80  5000 ????						; VERTICAL_SYNC
     81  5000 ????						; Original author: Manuel Polik
     82  5000 ????						; Inserts the code required for a proper 3 scannline 
     83  5000 ????						; vertical sync sequence
     84  5000 ????						;
     85  5000 ????						; Note: Alters the accumulator
     86  5000 ????						;
     87  5000 ????						; IN:
     88  5000 ????						; OUT: A = 1
     89  5000 ????
     90  5000 ????				      MAC	vertical_sync
     91  5000 ????				      LDA	#$02	; A = VSYNC enable
     92  5000 ????				      STA	WSYNC	; Finish current line
     93  5000 ????				      STA	VSYNC	; Start vertical sync
     94  5000 ????				      STA	WSYNC	; 1st line vertical sync
     95  5000 ????				      STA	WSYNC	; 2nd line vertical sync
     96  5000 ????				      LSR		; A = VSYNC disable
     97  5000 ????				      STA	WSYNC	; 3rd line vertical sync
     98  5000 ????				      STA	VSYNC	; Stop vertical sync
     99  5000 ????				      ENDM
    100  5000 ????
    101  5000 ????						;-------------------------------------------------------------------------------
    102  5000 ????						; CLEAN_START
    103  5000 ????						; Original author: Andrew Davie
    104  5000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
    105  5000 ????						; Sets stack pointer to $FF, and all registers to 0
    106  5000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    107  5000 ????						; Use as very first section of code on boot (ie: at reset)
    108  5000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    109  5000 ????
    110  5000 ????				      MAC	clean_start
    111  5000 ????				      sei
    112  5000 ????				      cld
    113  5000 ????
    114  5000 ????				      ldx	#0
    115  5000 ????				      txa
    116  5000 ????				      tay
    117  5000 ????			   .CLEAR_STACK dex
    118  5000 ????				      txs
    119  5000 ????				      pha
    120  5000 ????				      bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    121  5000 ????
    122  5000 ????				      ENDM
    123  5000 ????
    124  5000 ????						;-------------------------------------------------------
    125  5000 ????						; SET_POINTER
    126  5000 ????						; Original author: Manuel Rotschkar
    127  5000 ????						;
    128  5000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    129  5000 ????						;
    130  5000 ????						; Usage: SET_POINTER pointer, address
    131  5000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    132  5000 ????						;
    133  5000 ????						; Note: Alters the accumulator, NZ flags
    134  5000 ????						; IN 1: 2 byte RAM location reserved for pointer
    135  5000 ????						; IN 2: absolute address
    136  5000 ????
    137  5000 ????				      MAC	set_pointer
    138  5000 ????			   .POINTER   SET	{1}
    139  5000 ????			   .ADDRESS   SET	{2}
    140  5000 ????
    141  5000 ????				      LDA	#<.ADDRESS	; Get Lowbyte of Address
    142  5000 ????				      STA	.POINTER	; Store in pointer
    143  5000 ????				      LDA	#>.ADDRESS	; Get Hibyte of Address
    144  5000 ????				      STA	.POINTER+1	; Store in pointer+1
    145  5000 ????
    146  5000 ????				      ENDM
    147  5000 ????
    148  5000 ????						; EOF
------- FILE d:\Firmaplus\Firmaplus_intern\Atari\PlusROM\Projekte-batariBasic\CaveApocalypse\C.A.V.E. Apocalypse.bas.asm
------- FILE 2600basic.h LEVEL 2 PASS 3
      0  5000 ????				      include	"2600basic.h"
      1  5000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  5000 ????
      3  5000 ????				      processor	6502
------- FILE vcs.h LEVEL 3 PASS 3
      0  5000 ????				      include	"vcs.h"
      1  5000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  5000 ????
      3  5000 ????						; VCS.H
      4  5000 ????						; Version 1.05, 13/November/2003
      5  5000 ????
      6  5000 ????	       00 69	   VERSION_VCS =	105
      7  5000 ????
      8  5000 ????						; THIS IS A PRELIMINARY RELEASE OF *THE* "STANDARD" VCS.H
      9  5000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
     10  5000 ????						; PLEASE DO *NOT* REDISTRIBUTE THIS FILE!
     11  5000 ????						;
     12  5000 ????						; This file defines hardware registers and memory mapping for the
     13  5000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     14  5000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     15  5000 ????						; available at at http://www.atari2600.org/dasm
     16  5000 ????						;
     17  5000 ????						; Many thanks to the original author(s) of this file, and to everyone who has
     18  5000 ????						; contributed to understanding the Atari 2600.  If you take issue with the
     19  5000 ????						; contents, or naming of registers, please write to me (atari2600@taswegian.com)
     20  5000 ????						; with your views.  Please contribute, if you think you can improve this
     21  5000 ????						; file!
     22  5000 ????						;
     23  5000 ????						; Latest Revisions...
     24  5000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     25  5000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     26  5000 ????						;			    This will allow conditional code to verify VCS.H being
     27  5000 ????						;			    used for code assembly.
     28  5000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     29  5000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     30  5000 ????						;			 mirrored reading/writing differences.	This is more a 
     31  5000 ????						;			 readability issue, and binary compatibility with disassembled
     32  5000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     33  5000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     34  5000 ????						;			 which was broken by the use of segments in this file, as
     35  5000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     36  5000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     37  5000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     38  5000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     39  5000 ????						;						   it is safe to leave it undefined, and the base address will
     40  5000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     41  5000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     42  5000 ????						;			  - register definitions are now generated through assignment
     43  5000 ????						;			    in uninitialised segments.	This allows a changeable base
     44  5000 ????						;			    address architecture.
     45  5000 ????						; 1.0	22/MAR/2003		Initial release
     46  5000 ????
     47  5000 ????
     48  5000 ????						;-------------------------------------------------------------------------------
     49  5000 ????
     50  5000 ????						; TIA_BASE_ADDRESS
     51  5000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     52  5000 ????						; Normally 0, the base address should (externally, before including this file)
     53  5000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     54  5000 ????						; The reason is that this bankswitching scheme treats any access to locations
     55  5000 ????						; < $40 as a bankswitch.
     56  5000 ????
     57  5000 ????			  -	      IFNCONST	TIA_BASE_ADDRESS
     58  5000 ????			  -TIA_BASE_ADDRESS =	0
     59  5000 ????				      ENDIF
     60  5000 ????
     61  5000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     62  5000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     63  5000 ????						; *OR* by declaring the label before including this file, eg:
     64  5000 ????						; TIA_BASE_ADDRESS = $40
     65  5000 ????						;   include "vcs.h"
     66  5000 ????
     67  5000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     68  5000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     69  5000 ????						; for the mirrored ROM hardware registers.
     70  5000 ????
     71  5000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     72  5000 ????						; using the -D command-line switch, as required.  If the addresses are not defined, 
     73  5000 ????						; they defaut to the TIA_BASE_ADDRESS.
     74  5000 ????
     75  5000 ????			  -	      IFNCONST	TIA_BASE_READ_ADDRESS
     76  5000 ????			  -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     77  5000 ????				      ENDIF
     78  5000 ????
     79  5000 ????			  -	      IFNCONST	TIA_BASE_WRITE_ADDRESS
     80  5000 ????			  -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     81  5000 ????				      ENDIF
     82  5000 ????
     83  5000 ????						;-------------------------------------------------------------------------------
     84  5000 ????
     85 U002d					      SEG.U	TIA_REGISTERS_WRITE
     86 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     87 U0000
     88 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     89 U0000
     90 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     91 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     92 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     93 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     94 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     95 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     96 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     97 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     98 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     99 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
    100 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
    101 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    102 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    103 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    104 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    105 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    106 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    107 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    108 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    109 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    110 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    111 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    112 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    113 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    114 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    115 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    116 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    117 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    118 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    119 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    120 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    121 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    122 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    123 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    124 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    125 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    126 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    127 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    128 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    129 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    130 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    131 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    132 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    133 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    134 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    135 U002d
    136 U002d							;-------------------------------------------------------------------------------
    137 U002d
    138 U000e					      SEG.U	TIA_REGISTERS_READ
    139 U0000					      ORG	TIA_BASE_READ_ADDRESS
    140 U0000
    141 U0000							;											bit 7	 bit 6
    142 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    143 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    144 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    145 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    146 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    147 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    148 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    149 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    150 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    151 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    152 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    153 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    154 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    155 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    156 U000e
    157 U000e							;-------------------------------------------------------------------------------
    158 U000e
    159 U0298					      SEG.U	RIOT
    160 U0280					      ORG	$280
    161 U0280
    162 U0280							; RIOT MEMORY MAP
    163 U0280
    164 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    165 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    166 U0281
    167 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    168 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    169 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    170 U0284		       00	   INTIM      ds	1	; $284		Timer output
    171 U0285
    172 U0285		       00	   TIMINT     ds	1	; $285
    173 U0286
    174 U0286							; Unused/undefined registers ($285-$294)
    175 U0286
    176 U0286		       00		      ds	1	; $286
    177 U0287		       00		      ds	1	; $287
    178 U0288		       00		      ds	1	; $288
    179 U0289		       00		      ds	1	; $289
    180 U028a		       00		      ds	1	; $28A
    181 U028b		       00		      ds	1	; $28B
    182 U028c		       00		      ds	1	; $28C
    183 U028d		       00		      ds	1	; $28D
    184 U028e		       00		      ds	1	; $28E
    185 U028f		       00		      ds	1	; $28F
    186 U0290		       00		      ds	1	; $290
    187 U0291		       00		      ds	1	; $291
    188 U0292		       00		      ds	1	; $292
    189 U0293		       00		      ds	1	; $293
    190 U0294
    191 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    192 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    193 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    194 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    195 U0298
    196 U0298							;-------------------------------------------------------------------------------
    197 U0298							; The following required for back-compatibility with code which does not use
    198 U0298							; segments.
    199 U0298
    200  5000 ????				      SEG
    201  5000 ????
    202  5000 ????						; EOF
------- FILE 2600basic.h
------- FILE macro.h LEVEL 3 PASS 3
      0  5000 ????				      include	"macro.h"
      1  5000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  5000 ????
      3  5000 ????						; MACRO.H
      4  5000 ????						; Version 1.05, 13/NOVEMBER/2003
      5  5000 ????
      6  5000 ????	       00 69	   VERSION_MACRO =	105
      7  5000 ????
      8  5000 ????						;
      9  5000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
     10  5000 ????						; PLEASE DO *NOT* REDISTRIBUTE MODIFIED VERSIONS OF THIS FILE!
     11  5000 ????						;
     12  5000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     13  5000 ????						; It is distributed as a companion machine-specific support package
     14  5000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     15  5000 ????						; available at at http://www.atari2600.org/dasm
     16  5000 ????						;
     17  5000 ????						; Many thanks to the people who have contributed.  If you take issue with the
     18  5000 ????						; contents, or would like to add something, please write to me
     19  5000 ????						; (atari2600@taswegian.com) with your contribution.
     20  5000 ????						;
     21  5000 ????						; Latest Revisions...
     22  5000 ????						;
     23  5000 ????						; 1.05  14/NOV/2003	  - Added VERSION_MACRO equate (which will reflect 100x version #)
     24  5000 ????						;			    This will allow conditional code to verify MACRO.H being
     25  5000 ????						;			    used for code assembly.
     26  5000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     27  5000 ????						;
     28  5000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     29  5000 ????						;
     30  5000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     31  5000 ????						;			   (standardised macro for vertical synch code)
     32  5000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added. 
     33  5000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     34  5000 ????						; 1.0	22/MAR/2003		Initial release
     35  5000 ????
     36  5000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage, 
     37  5000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     38  5000 ????						;   If you do not allow illegal opcode usage, you must include this file 
     39  5000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     40  5000 ????						;   registers and require them to be defined first).
     41  5000 ????
     42  5000 ????						; Available macros...
     43  5000 ????						;   SLEEP n		 - sleep for n cycles
     44  5000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     45  5000 ????						;   CLEAN_START	 - set machine to known state on startup
     46  5000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     47  5000 ????
     48  5000 ????						;-------------------------------------------------------------------------------
     49  5000 ????						; SLEEP duration
     50  5000 ????						; Original author: Thomas Jentzsch
     51  5000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     52  5000 ????						; useful for code where precise timing is required.
     53  5000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     54  5000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     55  5000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     56  5000 ????
     57  5000 ????				      MAC	sleep
     58  5000 ????			   .CYCLES    SET	{1}
     59  5000 ????
     60  5000 ????				      IF	.CYCLES < 2
     61  5000 ????				      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     62  5000 ????				      ERR
     63  5000 ????				      ENDIF
     64  5000 ????
     65  5000 ????				      IF	.CYCLES & 1
     66  5000 ????				      IFNCONST	NO_ILLEGAL_OPCODES
     67  5000 ????				      nop	0
     68  5000 ????				      ELSE
     69  5000 ????				      bit	VSYNC
     70  5000 ????				      ENDIF
     71  5000 ????			   .CYCLES    SET	.CYCLES - 3
     72  5000 ????				      ENDIF
     73  5000 ????
     74  5000 ????				      REPEAT	.CYCLES / 2
     75  5000 ????				      nop
     76  5000 ????				      REPEND
     77  5000 ????				      ENDM		;usage: SLEEP n (n>1)
     78  5000 ????
     79  5000 ????						;-------------------------------------------------------------------------------
     80  5000 ????						; VERTICAL_SYNC
     81  5000 ????						; Original author: Manuel Polik
     82  5000 ????						; Inserts the code required for a proper 3 scannline 
     83  5000 ????						; vertical sync sequence
     84  5000 ????						;
     85  5000 ????						; Note: Alters the accumulator
     86  5000 ????						;
     87  5000 ????						; IN:
     88  5000 ????						; OUT: A = 1
     89  5000 ????
     90  5000 ????				      MAC	vertical_sync
     91  5000 ????				      LDA	#$02	; A = VSYNC enable
     92  5000 ????				      STA	WSYNC	; Finish current line
     93  5000 ????				      STA	VSYNC	; Start vertical sync
     94  5000 ????				      STA	WSYNC	; 1st line vertical sync
     95  5000 ????				      STA	WSYNC	; 2nd line vertical sync
     96  5000 ????				      LSR		; A = VSYNC disable
     97  5000 ????				      STA	WSYNC	; 3rd line vertical sync
     98  5000 ????				      STA	VSYNC	; Stop vertical sync
     99  5000 ????				      ENDM
    100  5000 ????
    101  5000 ????						;-------------------------------------------------------------------------------
    102  5000 ????						; CLEAN_START
    103  5000 ????						; Original author: Andrew Davie
    104  5000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
    105  5000 ????						; Sets stack pointer to $FF, and all registers to 0
    106  5000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    107  5000 ????						; Use as very first section of code on boot (ie: at reset)
    108  5000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    109  5000 ????
    110  5000 ????				      MAC	clean_start
    111  5000 ????				      sei
    112  5000 ????				      cld
    113  5000 ????
    114  5000 ????				      ldx	#0
    115  5000 ????				      txa
    116  5000 ????				      tay
    117  5000 ????			   .CLEAR_STACK dex
    118  5000 ????				      txs
    119  5000 ????				      pha
    120  5000 ????				      bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    121  5000 ????
    122  5000 ????				      ENDM
    123  5000 ????
    124  5000 ????						;-------------------------------------------------------
    125  5000 ????						; SET_POINTER
    126  5000 ????						; Original author: Manuel Rotschkar
    127  5000 ????						;
    128  5000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    129  5000 ????						;
    130  5000 ????						; Usage: SET_POINTER pointer, address
    131  5000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    132  5000 ????						;
    133  5000 ????						; Note: Alters the accumulator, NZ flags
    134  5000 ????						; IN 1: 2 byte RAM location reserved for pointer
    135  5000 ????						; IN 2: absolute address
    136  5000 ????
    137  5000 ????				      MAC	set_pointer
    138  5000 ????			   .POINTER   SET	{1}
    139  5000 ????			   .ADDRESS   SET	{2}
    140  5000 ????
    141  5000 ????				      LDA	#<.ADDRESS	; Get Lowbyte of Address
    142  5000 ????				      STA	.POINTER	; Store in pointer
    143  5000 ????				      LDA	#>.ADDRESS	; Get Hibyte of Address
    144  5000 ????				      STA	.POINTER+1	; Store in pointer+1
    145  5000 ????
    146  5000 ????				      ENDM
    147  5000 ????
    148  5000 ????						; EOF
------- FILE 2600basic.h
------- FILE 2600basic_variable_redefs.h LEVEL 3 PASS 3
      0  5000 ????				      include	"2600basic_variable_redefs.h"
      1  5000 ????						; This file contains variable mapping and other information for the current project.
      2  5000 ????
      3  5000 ????	       00 fc	   text_strings_length =	.skipL0631-text_strings
      4  5000 ????
      5  5000 ????	       00 23	   bscode_length =	35
      6  5000 ????	       00 1d	   _SD_Touch_Enemy_length =	.skipL0592-_SD_Touch_Enemy
      7  5000 ????
      8  5000 ????	       00 21	   _SD_Shoot_Enemy_length =	.skipL0591-_SD_Shoot_Enemy
      9  5000 ????
     10  5000 ????	       00 45	   _SD_Shoot_Miss_length =	.skipL0590-_SD_Shoot_Miss
     11  5000 ????
     12  5000 ????	       00 35	   _SD_Shot_Wall_length =	.skipL0589-_SD_Shot_Wall
     13  5000 ????
     14  5000 ????	       f0 5f	   w_Bit0_room_type_top =	w_BitOp_room_type
     15  5000 ????
     16  5000 ????	       f0 df	   r_Bit0_room_type_top =	r_BitOp_room_type
     17  5000 ????
     18  5000 ????	       f0 6f	   w_extra_wall_startpos_2_y =	w111
     19  5000 ????
     20  5000 ????	       f0 ef	   r_extra_wall_startpos_2_y =	r111
     21  5000 ????
     22  5000 ????	       f0 6e	   w_extra_wall_startpos_2_x =	w110
     23  5000 ????
     24  5000 ????	       f0 ee	   r_extra_wall_startpos_2_x =	r110
     25  5000 ????
     26  5000 ????	       f0 6d	   w_extra_wall_startpos_1_y =	w109
     27  5000 ????
     28  5000 ????	       f0 ed	   r_extra_wall_startpos_1_y =	r109
     29  5000 ????
     30  5000 ????	       f0 6c	   w_extra_wall_startpos_1_x =	w108
     31  5000 ????
     32  5000 ????	       f0 ec	   r_extra_wall_startpos_1_x =	r108
     33  5000 ????
     34  5000 ????	       f0 6b	   w_extra_wall_height =	w107
     35  5000 ????
     36  5000 ????	       f0 eb	   r_extra_wall_height =	r107
     37  5000 ????
     38  5000 ????	       f0 6a	   w_extra_wall_width =	w106
     39  5000 ????
     40  5000 ????	       f0 ea	   r_extra_wall_width =	r106
     41  5000 ????
     42  5000 ????	       f0 69	   w_extra_wall_type_and_range =	w105
     43  5000 ????
     44  5000 ????	       f0 e9	   r_extra_wall_type_and_range =	r105
     45  5000 ????
     46  5000 ????	       f0 68	   w_roommate_startpos_y =	w104
     47  5000 ????
     48  5000 ????	       f0 e8	   r_roommate_startpos_y =	r104
     49  5000 ????
     50  5000 ????	       f0 67	   w_roommate_startpos_x =	w103
     51  5000 ????
     52  5000 ????	       f0 e7	   r_roommate_startpos_x =	r103
     53  5000 ????
     54  5000 ????	       f0 66	   w_roommate_type_and_range =	w102
     55  5000 ????
     56  5000 ????	       f0 e6	   r_roommate_type_and_range =	r102
     57  5000 ????
     58  5000 ????	       f0 65	   w_room_color_bottom =	w101
     59  5000 ????
     60  5000 ????	       f0 e5	   r_room_color_bottom =	r101
     61  5000 ????
     62  5000 ????	       f0 64	   w_room_color_waste4 =	w100
     63  5000 ????
     64  5000 ????	       f0 e4	   r_room_color_waste3 =	r100
     65  5000 ????
     66  5000 ????	       f0 63	   w_room_color_waste2 =	w099
     67  5000 ????
     68  5000 ????	       f0 e3	   r_room_color_waste2 =	r099
     69  5000 ????
     70  5000 ????	       f0 62	   w_room_color_waste1 =	w098
     71  5000 ????
     72  5000 ????	       f0 e2	   r_room_color_waste1 =	r098
     73  5000 ????
     74  5000 ????	       f0 61	   w_room_color_middle =	w097
     75  5000 ????
     76  5000 ????	       f0 e1	   r_room_color_middle =	r097
     77  5000 ????
     78  5000 ????	       f0 60	   w_room_color_top =	w096
     79  5000 ????
     80  5000 ????	       f0 e0	   r_room_color_top =	r096
     81  5000 ????
     82  5000 ????	       f0 5f	   w_BitOp_room_type =	w095
     83  5000 ????
     84  5000 ????	       f0 df	   r_BitOp_room_type =	r095
     85  5000 ????
     86  5000 ????	       f0 5e	   w_men_to_rescue_in_this_level =	w094
     87  5000 ????
     88  5000 ????	       f0 de	   r_men_to_rescue_in_this_level =	r094
     89  5000 ????
     90  5000 ????	       f0 5d	   w_level_bonus_bcd_points =	w093
     91  5000 ????
     92  5000 ????	       f0 dd	   r_level_bonus_bcd_points =	r093
     93  5000 ????
     94  5000 ????	       f0 5d	   w_room_definition_start =	w093
     95  5000 ????
     96  5000 ????	       00 d3	   Game_Status =	var47
     97  5000 ????
     98  5000 ????	       00 b4	   next_shoot_rand =	var16
     99  5000 ????
    100  5000 ????	       00 b1	   bonus_bcd_counter =	var13
    101  5000 ????
    102  5000 ????	       00 b0	   TextIndex  =	var12
    103  5000 ????
    104  5000 ????	       00 b0	   men_to_rescue =	var12
    105  5000 ????
    106  5000 ????	       00 af	   ball_shoot_y =	var11
    107  5000 ????
    108  5000 ????	       00 ae	   ball_shoot_x =	var10
    109  5000 ????
    110  5000 ????	       00 ad	   has_private_levels =	var9
    111  5000 ????
    112  5000 ????	       00 ac	   max_priv_level_bcd3 =	var8
    113  5000 ????
    114  5000 ????	       00 ab	   max_priv_level_bcd2 =	var7
    115  5000 ????
    116  5000 ????	       00 aa	   max_priv_level_bcd1 =	var6
    117  5000 ????
    118  5000 ????	       00 a9	   max_pub_level_bcd3 =	var5
    119  5000 ????
    120  5000 ????	       00 a8	   max_pub_level_bcd2 =	var4
    121  5000 ????
    122  5000 ????	       00 a7	   max_pub_level_bcd1 =	var3
    123  5000 ????
    124  5000 ????	       00 a6	   gamenumber =	var2
    125  5000 ????
    126  5000 ????	       00 a5	   new_room_player1x =	var1
    127  5000 ????
    128  5000 ????	       00 a4	   new_room_player1y =	var0
    129  5000 ????
    130  5000 ????	       00 ed	   rand16     =	z
    131  5000 ????
    132  5000 ????	       00 ec	   _Bit7_FireB_Restrainer =	y
    133  5000 ????
    134  5000 ????	       00 ec	   _Bit6_Flip_P1 =	y
    135  5000 ????
    136  5000 ????	       00 ec	   _Bit5_Request_Pending =	y
    137  5000 ????
    138  5000 ????	       00 ec	   _Bit4_Wall_Dir =	y
    139  5000 ????
    140  5000 ????	       00 ec	   _Bit3_Safe_Point_reached =	y
    141  5000 ????
    142  5000 ????	       00 ec	   _Bit2_roommate_Dir =	y
    143  5000 ????
    144  5000 ????	       00 ec	   _Bit0_Rotor_Sound_On =	y
    145  5000 ????
    146  5000 ????	       00 ec	   _Bit_Game_State =	y
    147  5000 ????
    148  5000 ????	       00 86	   P1y_position =	player1y
    149  5000 ????	       00 e9	   P1y_velocity =	v
    150  5000 ????	       00 91	   M0y_position =	missile0y
    151  5000 ????	       00 e6	   M0y_velocity =	s
    152  5000 ????	       00 af	   Bally_position =	ball_shoot_y
    153  5000 ????	       00 e3	   Bally_velocity =	p
    154  5000 ????	       00 e2	   _Ch1_Duration =	o
    155  5000 ????
    156  5000 ????	       00 e1	   Safe_Point_P1_y =	n
    157  5000 ????
    158  5000 ????	       00 e0	   Safe_Point_P1_x =	m
    159  5000 ????
    160  5000 ????	       00 df	   _Bit1_Safe_Point_P1_Flip =	l
    161  5000 ????
    162  5000 ????	       00 df	   _Bit0_New_Room_P1_Flip =	l
    163  5000 ????
    164  5000 ????	       00 df	   _BitOp_Flip_positions =	l
    165  5000 ????
    166  5000 ????	       00 de	   roommate_type =	k
    167  5000 ????
    168  5000 ????	       00 dd	   roommate_move_x =	j
    169  5000 ????
    170  5000 ????	       00 dc	   extra_wall_move_x =	i
    171  5000 ????
    172  5000 ????	       00 db	   _Ch0_Counter =	h
    173  5000 ????
    174  5000 ????	       00 da	   _Ch0_Duration =	g
    175  5000 ????
    176  5000 ????	       00 d9	   _Ch0_Sound =	f
    177  5000 ????
    178  5000 ????	       00 d8	   _Bit3_P1_Dir_Right =	e
    179  5000 ????
    180  5000 ????	       00 d8	   _Bit2_P1_Dir_Left =	e
    181  5000 ????
    182  5000 ????	       00 d8	   _Bit1_P1_Dir_Down =	e
    183  5000 ????
    184  5000 ????	       00 d8	   _Bit0_P1_Dir_Up =	e
    185  5000 ????
    186  5000 ????	       00 d8	   _BitOp_P1_Dir =	e
    187  5000 ????
    188  5000 ????	       00 d7	   _Bit3_M0_Dir_Right =	d
    189  5000 ????
    190  5000 ????	       00 d7	   _Bit2_M0_Dir_Left =	d
    191  5000 ????
    192  5000 ????	       00 d7	   _Bit1_M0_Dir_Down =	d
    193  5000 ????
    194  5000 ????	       00 d7	   _Bit0_M0_Dir_Up =	d
    195  5000 ????
    196  5000 ????	       00 d7	   _BitOp_M0_Dir =	d
    197  5000 ????
    198  5000 ????	       00 d6	   _Bit3_Ball_Shot_Dir_Right2 =	c
    199  5000 ????
    200  5000 ????	       00 d6	   _Bit2_Ball_Shot_Dir_Right1 =	c
    201  5000 ????
    202  5000 ????	       00 d6	   _Bit1_Ball_Shot_Dir_Left2 =	c
    203  5000 ????
    204  5000 ????	       00 d6	   _Bit0_Ball_Shot_Dir_Left1 =	c
    205  5000 ????
    206  5000 ????	       00 d6	   _BitOp_Ball_Shot_Dir =	c
    207  5000 ????
    208  5000 ????	       00 d5	   frame_counter =	b
    209  5000 ????
    210  5000 ????	       00 d4	   delay_counter =	a
    211  5000 ????
    212  5000 ????	       00 95	   _sc3       =	score + 2
    213  5000 ????
    214  5000 ????	       00 94	   _sc2       =	score + 1
    215  5000 ????
    216  5000 ????	       00 93	   _sc1       =	score
    217  5000 ????
    218  5000 ????	       00 fe	   _FE	      =	$FE
    219  5000 ????
    220  5000 ????	       00 fc	   _FC	      =	$FC
    221  5000 ????
    222  5000 ????	       00 fa	   _FA	      =	$FA
    223  5000 ????
    224  5000 ????	       00 f8	   _F8	      =	$F8
    225  5000 ????
    226  5000 ????	       00 f6	   _F6	      =	$F6
    227  5000 ????
    228  5000 ????	       00 f4	   _F4	      =	$F4
    229  5000 ????
    230  5000 ????	       00 f2	   _F2	      =	$F2
    231  5000 ????
    232  5000 ????	       00 f0	   _F0	      =	$F0
    233  5000 ????
    234  5000 ????	       00 ee	   _EE	      =	$EE
    235  5000 ????
    236  5000 ????	       00 ec	   _EC	      =	$EC
    237  5000 ????
    238  5000 ????	       00 ea	   _EA	      =	$EA
    239  5000 ????
    240  5000 ????	       00 e8	   _E8	      =	$E8
    241  5000 ????
    242  5000 ????	       00 e6	   _E6	      =	$E6
    243  5000 ????
    244  5000 ????	       00 e4	   _E4	      =	$E4
    245  5000 ????
    246  5000 ????	       00 e2	   _E2	      =	$E2
    247  5000 ????
    248  5000 ????	       00 e0	   _E0	      =	$E0
    249  5000 ????
    250  5000 ????	       00 de	   _DE	      =	$DE
    251  5000 ????
    252  5000 ????	       00 dc	   _DC	      =	$DC
    253  5000 ????
    254  5000 ????	       00 da	   _DA	      =	$DA
    255  5000 ????
    256  5000 ????	       00 d8	   _D8	      =	$D8
    257  5000 ????
    258  5000 ????	       00 d6	   _D6	      =	$D6
    259  5000 ????
    260  5000 ????	       00 d4	   _D4	      =	$D4
    261  5000 ????
    262  5000 ????	       00 d2	   _D2	      =	$D2
    263  5000 ????
    264  5000 ????	       00 d0	   _D0	      =	$D0
    265  5000 ????
    266  5000 ????	       00 ce	   _CE	      =	$CE
    267  5000 ????
    268  5000 ????	       00 cc	   _CC	      =	$CC
    269  5000 ????
    270  5000 ????	       00 ca	   _CA	      =	$CA
    271  5000 ????
    272  5000 ????	       00 c8	   _C8	      =	$C8
    273  5000 ????
    274  5000 ????	       00 c6	   _C6	      =	$C6
    275  5000 ????
    276  5000 ????	       00 c4	   _C4	      =	$C4
    277  5000 ????
    278  5000 ????	       00 c2	   _C2	      =	$C2
    279  5000 ????
    280  5000 ????	       00 c0	   _C0	      =	$C0
    281  5000 ????
    282  5000 ????	       00 be	   _BE	      =	$BE
    283  5000 ????
    284  5000 ????	       00 bc	   _BC	      =	$BC
    285  5000 ????
    286  5000 ????	       00 ba	   _BA	      =	$BA
    287  5000 ????
    288  5000 ????	       00 b8	   _B8	      =	$B8
    289  5000 ????
    290  5000 ????	       00 b6	   _B6	      =	$B6
    291  5000 ????
    292  5000 ????	       00 b4	   _B4	      =	$B4
    293  5000 ????
    294  5000 ????	       00 b2	   _B2	      =	$B2
    295  5000 ????
    296  5000 ????	       00 b0	   _B0	      =	$B0
    297  5000 ????
    298  5000 ????	       00 ae	   _AE	      =	$AE
    299  5000 ????
    300  5000 ????	       00 ac	   _AC	      =	$AC
    301  5000 ????
    302  5000 ????	       00 aa	   _AA	      =	$AA
    303  5000 ????
    304  5000 ????	       00 a8	   _A8	      =	$A8
    305  5000 ????
    306  5000 ????	       00 a6	   _A6	      =	$A6
    307  5000 ????
    308  5000 ????	       00 a4	   _A4	      =	$A4
    309  5000 ????
    310  5000 ????	       00 a2	   _A2	      =	$A2
    311  5000 ????
    312  5000 ????	       00 a0	   _A0	      =	$A0
    313  5000 ????
    314  5000 ????	       00 9e	   _9E	      =	$9E
    315  5000 ????
    316  5000 ????	       00 9c	   _9C	      =	$9C
    317  5000 ????
    318  5000 ????	       00 9a	   _9A	      =	$9A
    319  5000 ????
    320  5000 ????	       00 98	   _98	      =	$98
    321  5000 ????
    322  5000 ????	       00 96	   _96	      =	$96
    323  5000 ????
    324  5000 ????	       00 94	   _94	      =	$94
    325  5000 ????
    326  5000 ????	       00 92	   _92	      =	$92
    327  5000 ????
    328  5000 ????	       00 90	   _90	      =	$90
    329  5000 ????
    330  5000 ????	       00 8e	   _8E	      =	$8E
    331  5000 ????
    332  5000 ????	       00 8c	   _8C	      =	$8C
    333  5000 ????
    334  5000 ????	       00 8a	   _8A	      =	$8A
    335  5000 ????
    336  5000 ????	       00 88	   _88	      =	$88
    337  5000 ????
    338  5000 ????	       00 86	   _86	      =	$86
    339  5000 ????
    340  5000 ????	       00 84	   _84	      =	$84
    341  5000 ????
    342  5000 ????	       00 82	   _82	      =	$82
    343  5000 ????
    344  5000 ????	       00 80	   _80	      =	$80
    345  5000 ????
    346  5000 ????	       00 7e	   _7E	      =	$7E
    347  5000 ????
    348  5000 ????	       00 7c	   _7C	      =	$7C
    349  5000 ????
    350  5000 ????	       00 7a	   _7A	      =	$7A
    351  5000 ????
    352  5000 ????	       00 78	   _78	      =	$78
    353  5000 ????
    354  5000 ????	       00 76	   _76	      =	$76
    355  5000 ????
    356  5000 ????	       00 74	   _74	      =	$74
    357  5000 ????
    358  5000 ????	       00 72	   _72	      =	$72
    359  5000 ????
    360  5000 ????	       00 70	   _70	      =	$70
    361  5000 ????
    362  5000 ????	       00 6e	   _6E	      =	$6E
    363  5000 ????
    364  5000 ????	       00 6c	   _6C	      =	$6C
    365  5000 ????
    366  5000 ????	       00 6a	   _6A	      =	$6A
    367  5000 ????
    368  5000 ????	       00 68	   _68	      =	$68
    369  5000 ????
    370  5000 ????	       00 66	   _66	      =	$66
    371  5000 ????
    372  5000 ????	       00 64	   _64	      =	$64
    373  5000 ????
    374  5000 ????	       00 62	   _62	      =	$62
    375  5000 ????
    376  5000 ????	       00 60	   _60	      =	$60
    377  5000 ????
    378  5000 ????	       00 5e	   _5E	      =	$5E
    379  5000 ????
    380  5000 ????	       00 5c	   _5C	      =	$5C
    381  5000 ????
    382  5000 ????	       00 5a	   _5A	      =	$5A
    383  5000 ????
    384  5000 ????	       00 58	   _58	      =	$58
    385  5000 ????
    386  5000 ????	       00 56	   _56	      =	$56
    387  5000 ????
    388  5000 ????	       00 54	   _54	      =	$54
    389  5000 ????
    390  5000 ????	       00 52	   _52	      =	$52
    391  5000 ????
    392  5000 ????	       00 50	   _50	      =	$50
    393  5000 ????
    394  5000 ????	       00 4e	   _4E	      =	$4E
    395  5000 ????
    396  5000 ????	       00 4c	   _4C	      =	$4C
    397  5000 ????
    398  5000 ????	       00 4a	   _4A	      =	$4A
    399  5000 ????
    400  5000 ????	       00 48	   _48	      =	$48
    401  5000 ????
    402  5000 ????	       00 46	   _46	      =	$46
    403  5000 ????
    404  5000 ????	       00 44	   _44	      =	$44
    405  5000 ????
    406  5000 ????	       00 42	   _42	      =	$42
    407  5000 ????
    408  5000 ????	       00 40	   _40	      =	$40
    409  5000 ????
    410  5000 ????	       00 3e	   _3E	      =	$3E
    411  5000 ????
    412  5000 ????	       00 3c	   _3C	      =	$3C
    413  5000 ????
    414  5000 ????	       00 3a	   _3A	      =	$3A
    415  5000 ????
    416  5000 ????	       00 38	   _38	      =	$38
    417  5000 ????
    418  5000 ????	       00 36	   _36	      =	$36
    419  5000 ????
    420  5000 ????	       00 34	   _34	      =	$34
    421  5000 ????
    422  5000 ????	       00 32	   _32	      =	$32
    423  5000 ????
    424  5000 ????	       00 30	   _30	      =	$30
    425  5000 ????
    426  5000 ????	       00 2e	   _2E	      =	$2E
    427  5000 ????
    428  5000 ????	       00 2c	   _2C	      =	$2C
    429  5000 ????
    430  5000 ????	       00 2a	   _2A	      =	$2A
    431  5000 ????
    432  5000 ????	       00 28	   _28	      =	$28
    433  5000 ????
    434  5000 ????	       00 26	   _26	      =	$26
    435  5000 ????
    436  5000 ????	       00 24	   _24	      =	$24
    437  5000 ????
    438  5000 ????	       00 22	   _22	      =	$22
    439  5000 ????
    440  5000 ????	       00 20	   _20	      =	$20
    441  5000 ????
    442  5000 ????	       00 1e	   _1E	      =	$1E
    443  5000 ????
    444  5000 ????	       00 1c	   _1C	      =	$1C
    445  5000 ????
    446  5000 ????	       00 1a	   _1A	      =	$1A
    447  5000 ????
    448  5000 ????	       00 18	   _18	      =	$18
    449  5000 ????
    450  5000 ????	       00 16	   _16	      =	$16
    451  5000 ????
    452  5000 ????	       00 14	   _14	      =	$14
    453  5000 ????
    454  5000 ????	       00 12	   _12	      =	$12
    455  5000 ????
    456  5000 ????	       00 10	   _10	      =	$10
    457  5000 ????
    458  5000 ????	       00 0e	   _0E	      =	$0E
    459  5000 ????
    460  5000 ????	       00 0c	   _0C	      =	$0C
    461  5000 ????
    462  5000 ????	       00 0a	   _0A	      =	$0A
    463  5000 ????
    464  5000 ????	       00 08	   _08	      =	$08
    465  5000 ????
    466  5000 ????	       00 06	   _06	      =	$06
    467  5000 ????
    468  5000 ????	       00 04	   _04	      =	$04
    469  5000 ????
    470  5000 ????	       00 02	   _02	      =	$02
    471  5000 ????
    472  5000 ????	       00 00	   _00	      =	$00
    473  5000 ????
    474  5000 ????	       00 09	   req_load_menu =	9
    475  5000 ????
    476  5000 ????	       00 08	   req_safe_point =	8
    477  5000 ????
    478  5000 ????	       00 07	   req_level_reset =	7
    479  5000 ????
    480  5000 ????	       00 06	   req_move_down =	6
    481  5000 ????
    482  5000 ????	       00 05	   req_move_right =	5
    483  5000 ????
    484  5000 ????	       00 04	   req_move_up =	4
    485  5000 ????
    486  5000 ????	       00 03	   req_move_left =	3
    487  5000 ????
    488  5000 ????	       00 02	   req_game_over =	2
    489  5000 ????
    490  5000 ????	       00 01	   req_level_up =	1
    491  5000 ????
    492  5000 ????	       00 00	   req_load   =	0
    493  5000 ????
    494  5000 ????	       00 03	   game_state_heli_explosion =	3
    495  5000 ????
    496  5000 ????	       00 02	   game_state_level_finished =	2
    497  5000 ????
    498  5000 ????	       00 01	   game_state_game_over =	1
    499  5000 ????
    500  5000 ????	       00 00	   game_state_run =	0
    501  5000 ????
    502  5000 ????	       00 06	   response_menu_size =	6
    503  5000 ????
    504  5000 ????	       00 1e	   response_size_minus_1 =	30
    505  5000 ????
    506  5000 ????	       00 94	   _M_Edge_Right =	148
    507  5000 ????
    508  5000 ????	       00 0e	   _M_Edge_Left =	14
    509  5000 ????
    510  5000 ????	       00 58	   _M_Edge_Bottom =	88
    511  5000 ????
    512  5000 ????	       00 02	   _M_Edge_Top =	2
    513  5000 ????
    514  5000 ????	       00 4c	   player_max_y =	76
    515  5000 ????
    516  5000 ????	       00 02	   player_min_y =	2
    517  5000 ????
    518  5000 ????	       00 86	   player_max_x =	134
    519  5000 ????
    520  5000 ????	       00 0a	   player_min_x =	10
    521  5000 ????
    522  5000 ????	       00 08	   textbkcolor =	$08
    523  5000 ????
    524  5000 ????	       00 08	   scorebkcolor =	$08
    525  5000 ????
    526  5000 ????	       00 01	   pfscore    =	1
    527  5000 ????
    528  5000 ????	       00 04	   pfres      =	4
    529  5000 ????
    530  5000 ????	       00 01	   superchip  =	1
    531  5000 ????	       00 03	   bs_mask    =	3
    532  5000 ????	       00 10	   bankswitch =	16
    533  5000 ????	       1f f6	   bankswitch_hotspot =	$1FF6
    534  5000 ????	       00 01	   PFcolors   =	1
    535  5000 ????	       00 01	   player1colors =	1
------- FILE 2600basic.h
      7  5000 ????
      8  5000 ????	       00 80	   player0x   =	$80
      9  5000 ????	       00 81	   player1x   =	$81
     10  5000 ????	       00 82	   missile0x  =	$82
     11  5000 ????	       00 83	   missile1x  =	$83
     12  5000 ????	       00 84	   ballx      =	$84
     13  5000 ????
     14  5000 ????	       00 85	   objecty    =	$85
     15  5000 ????	       00 85	   player0y   =	$85
     16  5000 ????	       00 86	   player1y   =	$86
     17  5000 ????	       00 87	   missile1height =	$87
     18  5000 ????	       00 88	   missile1y  =	$88
     19  5000 ????	       00 89	   bally      =	$89
     20  5000 ????
     21  5000 ????	       00 87	   player1color =	$87	; replaces missile 1
     22  5000 ????
     23  5000 ????	       00 8a	   player0pointer =	$8A	;uses $8A-$8B
     24  5000 ????	       00 8a	   player0pointerlo =	$8A
     25  5000 ????	       00 8b	   player0pointerhi =	$8B
     26  5000 ????	       00 8c	   player1pointer =	$8C	; $8C-$8D
     27  5000 ????	       00 8c	   player1pointerlo =	$8C
     28  5000 ????	       00 8d	   player1pointerhi =	$8D
     29  5000 ????
     30  5000 ????	       00 8e	   player0height =	$8E
     31  5000 ????	       00 8f	   player1height =	$8F
     32  5000 ????	       00 90	   missile0height =	$90
     33  5000 ????	       00 91	   missile0y  =	$91
     34  5000 ????	       00 92	   ballheight =	$92
     35  5000 ????
     36  5000 ????	       00 90	   currentpaddle =	$90	; replaces missile 0 (and can't be used with playercolor)
     37  5000 ????	       00 91	   paddle     =	$91	; replaces missile 0
     38  5000 ????	       00 82	   player0colorstore =	$82	; replaces missile 0
     39  5000 ????	       00 90	   player0color =	$90	; replaces missile 0
     40  5000 ????
     41  5000 ????	       00 93	   score      =	$93	; $93-$95
     42  5000 ????	       00 96	   scorepointers =	$96	; $96-$9B = 6 bytes
     43  5000 ????	       00 9c	   temp1      =	$9C	;used by kernel.  can be used in program too, but
     44  5000 ????	       00 9d	   temp2      =	$9D	;are obliterated when drawscreen is called.
     45  5000 ????	       00 9e	   temp3      =	$9E
     46  5000 ????	       00 9f	   temp4      =	$9F
     47  5000 ????	       00 a0	   temp5      =	$A0
     48  5000 ????	       00 a1	   temp6      =	$A1
     49  5000 ????
     50  5000 ????	       00 a2	   rand       =	$A2
     51  5000 ????	       00 a3	   scorecolor =	$A3
     52  5000 ????
     53  5000 ????	       00 a4	   var0       =	$A4
     54  5000 ????	       00 a5	   var1       =	$A5
     55  5000 ????	       00 a6	   var2       =	$A6
     56  5000 ????	       00 a7	   var3       =	$A7
     57  5000 ????	       00 a8	   var4       =	$A8
     58  5000 ????	       00 a9	   var5       =	$A9
     59  5000 ????	       00 aa	   var6       =	$AA
     60  5000 ????	       00 ab	   var7       =	$AB
     61  5000 ????	       00 ac	   var8       =	$AC
     62  5000 ????	       00 ad	   var9       =	$AD
     63  5000 ????	       00 ae	   var10      =	$AE
     64  5000 ????	       00 af	   var11      =	$AF
     65  5000 ????	       00 b0	   var12      =	$B0
     66  5000 ????	       00 b1	   var13      =	$B1
     67  5000 ????	       00 b2	   var14      =	$B2
     68  5000 ????	       00 b3	   var15      =	$B3
     69  5000 ????	       00 b4	   var16      =	$B4
     70  5000 ????	       00 b5	   var17      =	$B5
     71  5000 ????	       00 b6	   var18      =	$B6
     72  5000 ????	       00 b7	   var19      =	$B7
     73  5000 ????	       00 b8	   var20      =	$B8
     74  5000 ????	       00 b9	   var21      =	$B9
     75  5000 ????	       00 ba	   var22      =	$BA
     76  5000 ????	       00 bb	   var23      =	$BB
     77  5000 ????	       00 bc	   var24      =	$BC
     78  5000 ????	       00 bd	   var25      =	$BD
     79  5000 ????	       00 be	   var26      =	$BE
     80  5000 ????	       00 bf	   var27      =	$BF
     81  5000 ????	       00 c0	   var28      =	$C0
     82  5000 ????	       00 c1	   var29      =	$C1
     83  5000 ????	       00 c2	   var30      =	$C2
     84  5000 ????	       00 c3	   var31      =	$C3
     85  5000 ????	       00 c4	   var32      =	$C4
     86  5000 ????	       00 c5	   var33      =	$C5
     87  5000 ????	       00 c6	   var34      =	$C6
     88  5000 ????	       00 c7	   var35      =	$C7
     89  5000 ????	       00 c8	   var36      =	$C8
     90  5000 ????	       00 c9	   var37      =	$C9
     91  5000 ????	       00 ca	   var38      =	$CA
     92  5000 ????	       00 cb	   var39      =	$CB
     93  5000 ????	       00 cc	   var40      =	$CC
     94  5000 ????	       00 cd	   var41      =	$CD
     95  5000 ????	       00 ce	   var42      =	$CE
     96  5000 ????	       00 cf	   var43      =	$CF
     97  5000 ????	       00 d0	   var44      =	$D0
     98  5000 ????	       00 d1	   var45      =	$D1
     99  5000 ????	       00 d2	   var46      =	$D2
    100  5000 ????	       00 d3	   var47      =	$D3
    101  5000 ????
    102  5000 ????	       00 d4	   A	      =	$d4
    103  5000 ????	       00 d4	   a	      =	$d4
    104  5000 ????	       00 d5	   B	      =	$d5
    105  5000 ????	       00 d5	   b	      =	$d5
    106  5000 ????	       00 d6	   C	      =	$d6
    107  5000 ????	       00 d6	   c	      =	$d6
    108  5000 ????	       00 d7	   D	      =	$d7
    109  5000 ????	       00 d7	   d	      =	$d7
    110  5000 ????	       00 d8	   E	      =	$d8
    111  5000 ????	       00 d8	   e	      =	$d8
    112  5000 ????	       00 d9	   F	      =	$d9
    113  5000 ????	       00 d9	   f	      =	$d9
    114  5000 ????	       00 da	   G	      =	$da
    115  5000 ????	       00 da	   g	      =	$da
    116  5000 ????	       00 db	   H	      =	$db
    117  5000 ????	       00 db	   h	      =	$db
    118  5000 ????	       00 dc	   I	      =	$dc
    119  5000 ????	       00 dc	   i	      =	$dc
    120  5000 ????	       00 dd	   J	      =	$dd
    121  5000 ????	       00 dd	   j	      =	$dd
    122  5000 ????	       00 de	   K	      =	$de
    123  5000 ????	       00 de	   k	      =	$de
    124  5000 ????	       00 df	   L	      =	$df
    125  5000 ????	       00 df	   l	      =	$df
    126  5000 ????	       00 e0	   M	      =	$e0
    127  5000 ????	       00 e0	   m	      =	$e0
    128  5000 ????	       00 e1	   N	      =	$e1
    129  5000 ????	       00 e1	   n	      =	$e1
    130  5000 ????	       00 e2	   O	      =	$e2
    131  5000 ????	       00 e2	   o	      =	$e2
    132  5000 ????	       00 e3	   P	      =	$e3
    133  5000 ????	       00 e3	   p	      =	$e3
    134  5000 ????	       00 e4	   Q	      =	$e4
    135  5000 ????	       00 e4	   q	      =	$e4
    136  5000 ????	       00 e5	   R	      =	$e5
    137  5000 ????	       00 e5	   r	      =	$e5
    138  5000 ????	       00 e6	   S	      =	$e6
    139  5000 ????	       00 e6	   s	      =	$e6
    140  5000 ????	       00 e7	   T	      =	$e7
    141  5000 ????	       00 e7	   t	      =	$e7
    142  5000 ????	       00 e8	   U	      =	$e8
    143  5000 ????	       00 e8	   u	      =	$e8
    144  5000 ????	       00 e9	   V	      =	$e9
    145  5000 ????	       00 e9	   v	      =	$e9
    146  5000 ????	       00 ea	   W	      =	$ea
    147  5000 ????	       00 ea	   w	      =	$ea
    148  5000 ????	       00 eb	   X	      =	$eb
    149  5000 ????	       00 eb	   x	      =	$eb
    150  5000 ????	       00 ec	   Y	      =	$ec
    151  5000 ????	       00 ec	   y	      =	$ec
    152  5000 ????	       00 ed	   Z	      =	$ed
    153  5000 ????	       00 ed	   z	      =	$ed
    154  5000 ????
    155  5000 ????	       00 ee	   temp7      =	$ee	; This is used to aid in bankswitching
    156  5000 ????	       00 ef	   playfieldpos =	$ef
    157  5000 ????
    158  5000 ????						; available for other uses, or if unused, provide more stack space
    159  5000 ????
    160  5000 ????	       00 f0	   aux1       =	$f0
    161  5000 ????	       00 f1	   aux2       =	$f1
    162  5000 ????	       00 f2	   aux3       =	$f2
    163  5000 ????	       00 f3	   aux4       =	$f3
    164  5000 ????	       00 f4	   aux5       =	$f4
    165  5000 ????	       00 f5	   aux6       =	$f5
    166  5000 ????
    167  5000 ????						; playfield color/height pointers
    168  5000 ????	       00 f0	   pfcolortable =	$f0	; and $d5
    169  5000 ????	       00 f0	   pfheighttable =	$f0	; and $d5
    170  5000 ????						; the above pointers are the same because if color and height are both used together,
    171  5000 ????						; they must used absolute indexed and cannot use pointers
    172  5000 ????
    173  5000 ????	       00 f2	   lifepointer =	$f2	; pointer to "lives" shape
    174  5000 ????						; upper 3 bits of $f2 contain the number of lives
    175  5000 ????	       00 f4	   lifecolor  =	$f4
    176  5000 ????	       00 f3	   lives      =	$f3	; # lives >> 5
    177  5000 ????	       00 f5	   statusbarlength =	$f5	; only uses upper 5 bits; other bits free
    178  5000 ????
    179  5000 ????	       00 f2	   pfscore1   =	$f2	; optional playfield bytes in score
    180  5000 ????	       00 f3	   pfscore2   =	$f3
    181  5000 ????	       00 f4	   pfscorecolor =	$f4
    182  5000 ????
    183  5000 ????	       00 f6	   stack1     =	$f6
    184  5000 ????	       00 f7	   stack2     =	$f7
    185  5000 ????	       00 f8	   stack3     =	$f8
    186  5000 ????	       00 f9	   stack4     =	$f9
    187  5000 ????						; the stack bytes above may be used in the kernel
    188  5000 ????						; stack = F6-F7, F8-F9, FA-FB, FC-FD, FE-FF
    189  5000 ????
    190  5000 ????				      MAC	return
    191  5000 ????				      ifnconst	bankswitch
    192  5000 ????				      rts
    193  5000 ????				      else
    194  5000 ????				      jmp	BS_return
    195  5000 ????				      endif
    196  5000 ????				      ENDM		; auto-return from either a regular or bankswitched module
    197  5000 ????
    198  5000 ????				      ifconst	superchip
    199  5000 ????	       10 d0	   playfieldbase =	$10D0
------- FILE superchip.h LEVEL 3 PASS 3
      0  5000 ????				      include	superchip.h
      1  5000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  5000 ????
      3  5000 ????	       f0 00	   write_RAM  =	$F000
      4  5000 ????	       f0 00	   wRAM       =	$F000
      5  5000 ????	       f0 00	   w000       =	$F000
      6  5000 ????	       f0 01	   w001       =	$F001
      7  5000 ????	       f0 02	   w002       =	$F002
      8  5000 ????	       f0 03	   w003       =	$F003
      9  5000 ????	       f0 04	   w004       =	$F004
     10  5000 ????	       f0 05	   w005       =	$F005
     11  5000 ????	       f0 06	   w006       =	$F006
     12  5000 ????	       f0 07	   w007       =	$F007
     13  5000 ????	       f0 08	   w008       =	$F008
     14  5000 ????	       f0 09	   w009       =	$F009
     15  5000 ????	       f0 0a	   w010       =	$F00A
     16  5000 ????	       f0 0b	   w011       =	$F00B
     17  5000 ????	       f0 0c	   w012       =	$F00C
     18  5000 ????	       f0 0d	   w013       =	$F00D
     19  5000 ????	       f0 0e	   w014       =	$F00E
     20  5000 ????	       f0 0f	   w015       =	$F00F
     21  5000 ????	       f0 10	   w016       =	$F010
     22  5000 ????	       f0 11	   w017       =	$F011
     23  5000 ????	       f0 12	   w018       =	$F012
     24  5000 ????	       f0 13	   w019       =	$F013
     25  5000 ????	       f0 14	   w020       =	$F014
     26  5000 ????	       f0 15	   w021       =	$F015
     27  5000 ????	       f0 16	   w022       =	$F016
     28  5000 ????	       f0 17	   w023       =	$F017
     29  5000 ????	       f0 18	   w024       =	$F018
     30  5000 ????	       f0 19	   w025       =	$F019
     31  5000 ????	       f0 1a	   w026       =	$F01A
     32  5000 ????	       f0 1b	   w027       =	$F01B
     33  5000 ????	       f0 1c	   w028       =	$F01C
     34  5000 ????	       f0 1d	   w029       =	$F01D
     35  5000 ????	       f0 1e	   w030       =	$F01E
     36  5000 ????	       f0 1f	   w031       =	$F01F
     37  5000 ????	       f0 20	   w032       =	$F020
     38  5000 ????	       f0 21	   w033       =	$F021
     39  5000 ????	       f0 22	   w034       =	$F022
     40  5000 ????	       f0 23	   w035       =	$F023
     41  5000 ????	       f0 24	   w036       =	$F024
     42  5000 ????	       f0 25	   w037       =	$F025
     43  5000 ????	       f0 26	   w038       =	$F026
     44  5000 ????	       f0 27	   w039       =	$F027
     45  5000 ????	       f0 28	   w040       =	$F028
     46  5000 ????	       f0 29	   w041       =	$F029
     47  5000 ????	       f0 2a	   w042       =	$F02A
     48  5000 ????	       f0 2b	   w043       =	$F02B
     49  5000 ????	       f0 2c	   w044       =	$F02C
     50  5000 ????	       f0 2d	   w045       =	$F02D
     51  5000 ????	       f0 2e	   w046       =	$F02E
     52  5000 ????	       f0 2f	   w047       =	$F02F
     53  5000 ????	       f0 30	   w048       =	$F030
     54  5000 ????	       f0 31	   w049       =	$F031
     55  5000 ????	       f0 32	   w050       =	$F032
     56  5000 ????	       f0 33	   w051       =	$F033
     57  5000 ????	       f0 34	   w052       =	$F034
     58  5000 ????	       f0 35	   w053       =	$F035
     59  5000 ????	       f0 36	   w054       =	$F036
     60  5000 ????	       f0 37	   w055       =	$F037
     61  5000 ????	       f0 38	   w056       =	$F038
     62  5000 ????	       f0 39	   w057       =	$F039
     63  5000 ????	       f0 3a	   w058       =	$F03A
     64  5000 ????	       f0 3b	   w059       =	$F03B
     65  5000 ????	       f0 3c	   w060       =	$F03C
     66  5000 ????	       f0 3d	   w061       =	$F03D
     67  5000 ????	       f0 3e	   w062       =	$F03E
     68  5000 ????	       f0 3f	   w063       =	$F03F
     69  5000 ????	       f0 40	   w064       =	$F040
     70  5000 ????	       f0 41	   w065       =	$F041
     71  5000 ????	       f0 42	   w066       =	$F042
     72  5000 ????	       f0 43	   w067       =	$F043
     73  5000 ????	       f0 44	   w068       =	$F044
     74  5000 ????	       f0 45	   w069       =	$F045
     75  5000 ????	       f0 46	   w070       =	$F046
     76  5000 ????	       f0 47	   w071       =	$F047
     77  5000 ????	       f0 48	   w072       =	$F048
     78  5000 ????	       f0 49	   w073       =	$F049
     79  5000 ????	       f0 4a	   w074       =	$F04A
     80  5000 ????	       f0 4b	   w075       =	$F04B
     81  5000 ????	       f0 4c	   w076       =	$F04C
     82  5000 ????	       f0 4d	   w077       =	$F04D
     83  5000 ????	       f0 4e	   w078       =	$F04E
     84  5000 ????	       f0 4f	   w079       =	$F04F
     85  5000 ????	       f0 50	   w080       =	$F050
     86  5000 ????	       f0 51	   w081       =	$F051
     87  5000 ????	       f0 52	   w082       =	$F052
     88  5000 ????	       f0 53	   w083       =	$F053
     89  5000 ????	       f0 54	   w084       =	$F054
     90  5000 ????	       f0 55	   w085       =	$F055
     91  5000 ????	       f0 56	   w086       =	$F056
     92  5000 ????	       f0 57	   w087       =	$F057
     93  5000 ????	       f0 58	   w088       =	$F058
     94  5000 ????	       f0 59	   w089       =	$F059
     95  5000 ????	       f0 5a	   w090       =	$F05A
     96  5000 ????	       f0 5b	   w091       =	$F05B
     97  5000 ????	       f0 5c	   w092       =	$F05C
     98  5000 ????	       f0 5d	   w093       =	$F05D
     99  5000 ????	       f0 5e	   w094       =	$F05E
    100  5000 ????	       f0 5f	   w095       =	$F05F
    101  5000 ????	       f0 60	   w096       =	$F060
    102  5000 ????	       f0 61	   w097       =	$F061
    103  5000 ????	       f0 62	   w098       =	$F062
    104  5000 ????	       f0 63	   w099       =	$F063
    105  5000 ????	       f0 64	   w100       =	$F064
    106  5000 ????	       f0 65	   w101       =	$F065
    107  5000 ????	       f0 66	   w102       =	$F066
    108  5000 ????	       f0 67	   w103       =	$F067
    109  5000 ????	       f0 68	   w104       =	$F068
    110  5000 ????	       f0 69	   w105       =	$F069
    111  5000 ????	       f0 6a	   w106       =	$F06A
    112  5000 ????	       f0 6b	   w107       =	$F06B
    113  5000 ????	       f0 6c	   w108       =	$F06C
    114  5000 ????	       f0 6d	   w109       =	$F06D
    115  5000 ????	       f0 6e	   w110       =	$F06E
    116  5000 ????	       f0 6f	   w111       =	$F06F
    117  5000 ????	       f0 70	   w112       =	$F070
    118  5000 ????	       f0 71	   w113       =	$F071
    119  5000 ????	       f0 72	   w114       =	$F072
    120  5000 ????	       f0 73	   w115       =	$F073
    121  5000 ????	       f0 74	   w116       =	$F074
    122  5000 ????	       f0 75	   w117       =	$F075
    123  5000 ????	       f0 76	   w118       =	$F076
    124  5000 ????	       f0 77	   w119       =	$F077
    125  5000 ????	       f0 78	   w120       =	$F078
    126  5000 ????	       f0 79	   w121       =	$F079
    127  5000 ????	       f0 7a	   w122       =	$F07A
    128  5000 ????	       f0 7b	   w123       =	$F07B
    129  5000 ????	       f0 7c	   w124       =	$F07C
    130  5000 ????	       f0 7d	   w125       =	$F07D
    131  5000 ????	       f0 7e	   w126       =	$F07E
    132  5000 ????	       f0 7f	   w127       =	$F07F
    133  5000 ????
    134  5000 ????	       f0 80	   read_RAM   =	$F080
    135  5000 ????	       f0 80	   rRAM       =	$F080
    136  5000 ????	       f0 80	   r000       =	$F080
    137  5000 ????	       f0 81	   r001       =	$F081
    138  5000 ????	       f0 82	   r002       =	$F082
    139  5000 ????	       f0 83	   r003       =	$F083
    140  5000 ????	       f0 84	   r004       =	$F084
    141  5000 ????	       f0 85	   r005       =	$F085
    142  5000 ????	       f0 86	   r006       =	$F086
    143  5000 ????	       f0 87	   r007       =	$F087
    144  5000 ????	       f0 88	   r008       =	$F088
    145  5000 ????	       f0 89	   r009       =	$F089
    146  5000 ????	       f0 8a	   r010       =	$F08A
    147  5000 ????	       f0 8b	   r011       =	$F08B
    148  5000 ????	       f0 8c	   r012       =	$F08C
    149  5000 ????	       f0 8d	   r013       =	$F08D
    150  5000 ????	       f0 8e	   r014       =	$F08E
    151  5000 ????	       f0 8f	   r015       =	$F08F
    152  5000 ????	       f0 90	   r016       =	$F090
    153  5000 ????	       f0 91	   r017       =	$F091
    154  5000 ????	       f0 92	   r018       =	$F092
    155  5000 ????	       f0 93	   r019       =	$F093
    156  5000 ????	       f0 94	   r020       =	$F094
    157  5000 ????	       f0 95	   r021       =	$F095
    158  5000 ????	       f0 96	   r022       =	$F096
    159  5000 ????	       f0 97	   r023       =	$F097
    160  5000 ????	       f0 98	   r024       =	$F098
    161  5000 ????	       f0 99	   r025       =	$F099
    162  5000 ????	       f0 9a	   r026       =	$F09A
    163  5000 ????	       f0 9b	   r027       =	$F09B
    164  5000 ????	       f0 9c	   r028       =	$F09C
    165  5000 ????	       f0 9d	   r029       =	$F09D
    166  5000 ????	       f0 9e	   r030       =	$F09E
    167  5000 ????	       f0 9f	   r031       =	$F09F
    168  5000 ????	       f0 a0	   r032       =	$F0A0
    169  5000 ????	       f0 a1	   r033       =	$F0A1
    170  5000 ????	       f0 a2	   r034       =	$F0A2
    171  5000 ????	       f0 a3	   r035       =	$F0A3
    172  5000 ????	       f0 a4	   r036       =	$F0A4
    173  5000 ????	       f0 a5	   r037       =	$F0A5
    174  5000 ????	       f0 a6	   r038       =	$F0A6
    175  5000 ????	       f0 a7	   r039       =	$F0A7
    176  5000 ????	       f0 a8	   r040       =	$F0A8
    177  5000 ????	       f0 a9	   r041       =	$F0A9
    178  5000 ????	       f0 aa	   r042       =	$F0AA
    179  5000 ????	       f0 ab	   r043       =	$F0AB
    180  5000 ????	       f0 ac	   r044       =	$F0AC
    181  5000 ????	       f0 ad	   r045       =	$F0AD
    182  5000 ????	       f0 ae	   r046       =	$F0AE
    183  5000 ????	       f0 af	   r047       =	$F0AF
    184  5000 ????	       f0 b0	   r048       =	$F0B0
    185  5000 ????	       f0 b1	   r049       =	$F0B1
    186  5000 ????	       f0 b2	   r050       =	$F0B2
    187  5000 ????	       f0 b3	   r051       =	$F0B3
    188  5000 ????	       f0 b4	   r052       =	$F0B4
    189  5000 ????	       f0 b5	   r053       =	$F0B5
    190  5000 ????	       f0 b6	   r054       =	$F0B6
    191  5000 ????	       f0 b7	   r055       =	$F0B7
    192  5000 ????	       f0 b8	   r056       =	$F0B8
    193  5000 ????	       f0 b9	   r057       =	$F0B9
    194  5000 ????	       f0 ba	   r058       =	$F0BA
    195  5000 ????	       f0 bb	   r059       =	$F0BB
    196  5000 ????	       f0 bc	   r060       =	$F0BC
    197  5000 ????	       f0 bd	   r061       =	$F0BD
    198  5000 ????	       f0 be	   r062       =	$F0BE
    199  5000 ????	       f0 bf	   r063       =	$F0BF
    200  5000 ????	       f0 c0	   r064       =	$F0C0
    201  5000 ????	       f0 c1	   r065       =	$F0C1
    202  5000 ????	       f0 c2	   r066       =	$F0C2
    203  5000 ????	       f0 c3	   r067       =	$F0C3
    204  5000 ????	       f0 c4	   r068       =	$F0C4
    205  5000 ????	       f0 c5	   r069       =	$F0C5
    206  5000 ????	       f0 c6	   r070       =	$F0C6
    207  5000 ????	       f0 c7	   r071       =	$F0C7
    208  5000 ????	       f0 c8	   r072       =	$F0C8
    209  5000 ????	       f0 c9	   r073       =	$F0C9
    210  5000 ????	       f0 ca	   r074       =	$F0CA
    211  5000 ????	       f0 cb	   r075       =	$F0CB
    212  5000 ????	       f0 cc	   r076       =	$F0CC
    213  5000 ????	       f0 cd	   r077       =	$F0CD
    214  5000 ????	       f0 ce	   r078       =	$F0CE
    215  5000 ????	       f0 cf	   r079       =	$F0CF
    216  5000 ????	       f0 d0	   r080       =	$F0D0
    217  5000 ????	       f0 d1	   r081       =	$F0D1
    218  5000 ????	       f0 d2	   r082       =	$F0D2
    219  5000 ????	       f0 d3	   r083       =	$F0D3
    220  5000 ????	       f0 d4	   r084       =	$F0D4
    221  5000 ????	       f0 d5	   r085       =	$F0D5
    222  5000 ????	       f0 d6	   r086       =	$F0D6
    223  5000 ????	       f0 d7	   r087       =	$F0D7
    224  5000 ????	       f0 d8	   r088       =	$F0D8
    225  5000 ????	       f0 d9	   r089       =	$F0D9
    226  5000 ????	       f0 da	   r090       =	$F0DA
    227  5000 ????	       f0 db	   r091       =	$F0DB
    228  5000 ????	       f0 dc	   r092       =	$F0DC
    229  5000 ????	       f0 dd	   r093       =	$F0DD
    230  5000 ????	       f0 de	   r094       =	$F0DE
    231  5000 ????	       f0 df	   r095       =	$F0DF
    232  5000 ????	       f0 e0	   r096       =	$F0E0
    233  5000 ????	       f0 e1	   r097       =	$F0E1
    234  5000 ????	       f0 e2	   r098       =	$F0E2
    235  5000 ????	       f0 e3	   r099       =	$F0E3
    236  5000 ????	       f0 e4	   r100       =	$F0E4
    237  5000 ????	       f0 e5	   r101       =	$F0E5
    238  5000 ????	       f0 e6	   r102       =	$F0E6
    239  5000 ????	       f0 e7	   r103       =	$F0E7
    240  5000 ????	       f0 e8	   r104       =	$F0E8
    241  5000 ????	       f0 e9	   r105       =	$F0E9
    242  5000 ????	       f0 ea	   r106       =	$F0EA
    243  5000 ????	       f0 eb	   r107       =	$F0EB
    244  5000 ????	       f0 ec	   r108       =	$F0EC
    245  5000 ????	       f0 ed	   r109       =	$F0ED
    246  5000 ????	       f0 ee	   r110       =	$F0EE
    247  5000 ????	       f0 ef	   r111       =	$F0EF
    248  5000 ????	       f0 f0	   r112       =	$F0F0
    249  5000 ????	       f0 f1	   r113       =	$F0F1
    250  5000 ????	       f0 f2	   r114       =	$F0F2
    251  5000 ????	       f0 f3	   r115       =	$F0F3
    252  5000 ????	       f0 f4	   r116       =	$F0F4
    253  5000 ????	       f0 f5	   r117       =	$F0F5
    254  5000 ????	       f0 f6	   r118       =	$F0F6
    255  5000 ????	       f0 f7	   r119       =	$F0F7
    256  5000 ????	       f0 f8	   r120       =	$F0F8
    257  5000 ????	       f0 f9	   r121       =	$F0F9
    258  5000 ????	       f0 fa	   r122       =	$F0FA
    259  5000 ????	       f0 fb	   r123       =	$F0FB
    260  5000 ????	       f0 fc	   r124       =	$F0FC
    261  5000 ????	       f0 fd	   r125       =	$F0FD
    262  5000 ????	       f0 fe	   r126       =	$F0FE
    263  5000 ????	       f0 ff	   r127       =	$F0FF
------- FILE 2600basic.h
    201  5000 ????			  -	      else
    202  5000 ????			  -playfieldbase =	$A4
    203  5000 ????				      endif
    204  5000 ????
    205  5000 ????				      ifnconst	pfhalfwidth
    206  5000 ????	       00 04	   pfwidth    =	4
    207  5000 ????	       00 0e	   PF1L       =	PF1
    208  5000 ????	       00 0f	   PF2L       =	PF2
    209  5000 ????	       00 0e	   PF1R       =	PF1
    210  5000 ????	       00 0f	   PF2R       =	PF2
    211  5000 ????	       00 00	   pfadjust   =	0
    212  5000 ????			  -	      else
    213  5000 ????			  -pfwidth    =	2
    214  5000 ????			  -	      ifconst	pfcenter
    215  5000 ????			  -PF1L       =	$3F	; no effect
    216  5000 ????			  -PF2L       =	PF2
    217  5000 ????			  -PF1R       =	$3F
    218  5000 ????			  -PF2R       =	PF2	; no effect
    219  5000 ????			  -pfadjust   =	1
    220  5000 ????			  -	      else
    221  5000 ????			  -PF1L       =	PF1
    222  5000 ????			  -PF2L       =	PF2
    223  5000 ????			  -PF1R       =	$3F	; no effect
    224  5000 ????			  -PF2R       =	$3F	; no effect
    225  5000 ????			  -pfadjust   =	0
    226  5000 ????			  -	      endif
    227  5000 ????				      endif
    228  5000 ????
    229  5000 ????						; define playfield start based on height
    230  5000 ????			  -	      ifnconst	pfres
    231  5000 ????			  -playfield  =	playfieldbase
    232  5000 ????				      else
    233  5000 ????	       10 f0	   playfield  =	playfieldbase-(pfres-12*(4/pfwidth))*pfwidth
    234  5000 ????				      endif
------- FILE d:\Firmaplus\Firmaplus_intern\Atari\PlusROM\Projekte-batariBasic\CaveApocalypse\C.A.V.E. Apocalypse.bas.asm
------- FILE 2600basic_variable_redefs.h LEVEL 2 PASS 3
      0  5000 ????				      include	"2600basic_variable_redefs.h"
      1  5000 ????						; This file contains variable mapping and other information for the current project.
      2  5000 ????
      3  5000 ????	       00 fc	   text_strings_length =	.skipL0631-text_strings
      4  5000 ????
      5  5000 ????	       00 23	   bscode_length =	35
      6  5000 ????	       00 1d	   _SD_Touch_Enemy_length =	.skipL0592-_SD_Touch_Enemy
      7  5000 ????
      8  5000 ????	       00 21	   _SD_Shoot_Enemy_length =	.skipL0591-_SD_Shoot_Enemy
      9  5000 ????
     10  5000 ????	       00 45	   _SD_Shoot_Miss_length =	.skipL0590-_SD_Shoot_Miss
     11  5000 ????
     12  5000 ????	       00 35	   _SD_Shot_Wall_length =	.skipL0589-_SD_Shot_Wall
     13  5000 ????
     14  5000 ????	       f0 5f	   w_Bit0_room_type_top =	w_BitOp_room_type
     15  5000 ????
     16  5000 ????	       f0 df	   r_Bit0_room_type_top =	r_BitOp_room_type
     17  5000 ????
     18  5000 ????	       f0 6f	   w_extra_wall_startpos_2_y =	w111
     19  5000 ????
     20  5000 ????	       f0 ef	   r_extra_wall_startpos_2_y =	r111
     21  5000 ????
     22  5000 ????	       f0 6e	   w_extra_wall_startpos_2_x =	w110
     23  5000 ????
     24  5000 ????	       f0 ee	   r_extra_wall_startpos_2_x =	r110
     25  5000 ????
     26  5000 ????	       f0 6d	   w_extra_wall_startpos_1_y =	w109
     27  5000 ????
     28  5000 ????	       f0 ed	   r_extra_wall_startpos_1_y =	r109
     29  5000 ????
     30  5000 ????	       f0 6c	   w_extra_wall_startpos_1_x =	w108
     31  5000 ????
     32  5000 ????	       f0 ec	   r_extra_wall_startpos_1_x =	r108
     33  5000 ????
     34  5000 ????	       f0 6b	   w_extra_wall_height =	w107
     35  5000 ????
     36  5000 ????	       f0 eb	   r_extra_wall_height =	r107
     37  5000 ????
     38  5000 ????	       f0 6a	   w_extra_wall_width =	w106
     39  5000 ????
     40  5000 ????	       f0 ea	   r_extra_wall_width =	r106
     41  5000 ????
     42  5000 ????	       f0 69	   w_extra_wall_type_and_range =	w105
     43  5000 ????
     44  5000 ????	       f0 e9	   r_extra_wall_type_and_range =	r105
     45  5000 ????
     46  5000 ????	       f0 68	   w_roommate_startpos_y =	w104
     47  5000 ????
     48  5000 ????	       f0 e8	   r_roommate_startpos_y =	r104
     49  5000 ????
     50  5000 ????	       f0 67	   w_roommate_startpos_x =	w103
     51  5000 ????
     52  5000 ????	       f0 e7	   r_roommate_startpos_x =	r103
     53  5000 ????
     54  5000 ????	       f0 66	   w_roommate_type_and_range =	w102
     55  5000 ????
     56  5000 ????	       f0 e6	   r_roommate_type_and_range =	r102
     57  5000 ????
     58  5000 ????	       f0 65	   w_room_color_bottom =	w101
     59  5000 ????
     60  5000 ????	       f0 e5	   r_room_color_bottom =	r101
     61  5000 ????
     62  5000 ????	       f0 64	   w_room_color_waste4 =	w100
     63  5000 ????
     64  5000 ????	       f0 e4	   r_room_color_waste3 =	r100
     65  5000 ????
     66  5000 ????	       f0 63	   w_room_color_waste2 =	w099
     67  5000 ????
     68  5000 ????	       f0 e3	   r_room_color_waste2 =	r099
     69  5000 ????
     70  5000 ????	       f0 62	   w_room_color_waste1 =	w098
     71  5000 ????
     72  5000 ????	       f0 e2	   r_room_color_waste1 =	r098
     73  5000 ????
     74  5000 ????	       f0 61	   w_room_color_middle =	w097
     75  5000 ????
     76  5000 ????	       f0 e1	   r_room_color_middle =	r097
     77  5000 ????
     78  5000 ????	       f0 60	   w_room_color_top =	w096
     79  5000 ????
     80  5000 ????	       f0 e0	   r_room_color_top =	r096
     81  5000 ????
     82  5000 ????	       f0 5f	   w_BitOp_room_type =	w095
     83  5000 ????
     84  5000 ????	       f0 df	   r_BitOp_room_type =	r095
     85  5000 ????
     86  5000 ????	       f0 5e	   w_men_to_rescue_in_this_level =	w094
     87  5000 ????
     88  5000 ????	       f0 de	   r_men_to_rescue_in_this_level =	r094
     89  5000 ????
     90  5000 ????	       f0 5d	   w_level_bonus_bcd_points =	w093
     91  5000 ????
     92  5000 ????	       f0 dd	   r_level_bonus_bcd_points =	r093
     93  5000 ????
     94  5000 ????	       f0 5d	   w_room_definition_start =	w093
     95  5000 ????
     96  5000 ????	       00 d3	   Game_Status =	var47
     97  5000 ????
     98  5000 ????	       00 b4	   next_shoot_rand =	var16
     99  5000 ????
    100  5000 ????	       00 b1	   bonus_bcd_counter =	var13
    101  5000 ????
    102  5000 ????	       00 b0	   TextIndex  =	var12
    103  5000 ????
    104  5000 ????	       00 b0	   men_to_rescue =	var12
    105  5000 ????
    106  5000 ????	       00 af	   ball_shoot_y =	var11
    107  5000 ????
    108  5000 ????	       00 ae	   ball_shoot_x =	var10
    109  5000 ????
    110  5000 ????	       00 ad	   has_private_levels =	var9
    111  5000 ????
    112  5000 ????	       00 ac	   max_priv_level_bcd3 =	var8
    113  5000 ????
    114  5000 ????	       00 ab	   max_priv_level_bcd2 =	var7
    115  5000 ????
    116  5000 ????	       00 aa	   max_priv_level_bcd1 =	var6
    117  5000 ????
    118  5000 ????	       00 a9	   max_pub_level_bcd3 =	var5
    119  5000 ????
    120  5000 ????	       00 a8	   max_pub_level_bcd2 =	var4
    121  5000 ????
    122  5000 ????	       00 a7	   max_pub_level_bcd1 =	var3
    123  5000 ????
    124  5000 ????	       00 a6	   gamenumber =	var2
    125  5000 ????
    126  5000 ????	       00 a5	   new_room_player1x =	var1
    127  5000 ????
    128  5000 ????	       00 a4	   new_room_player1y =	var0
    129  5000 ????
    130  5000 ????	       00 ed	   rand16     =	z
    131  5000 ????
    132  5000 ????	       00 ec	   _Bit7_FireB_Restrainer =	y
    133  5000 ????
    134  5000 ????	       00 ec	   _Bit6_Flip_P1 =	y
    135  5000 ????
    136  5000 ????	       00 ec	   _Bit5_Request_Pending =	y
    137  5000 ????
    138  5000 ????	       00 ec	   _Bit4_Wall_Dir =	y
    139  5000 ????
    140  5000 ????	       00 ec	   _Bit3_Safe_Point_reached =	y
    141  5000 ????
    142  5000 ????	       00 ec	   _Bit2_roommate_Dir =	y
    143  5000 ????
    144  5000 ????	       00 ec	   _Bit0_Rotor_Sound_On =	y
    145  5000 ????
    146  5000 ????	       00 ec	   _Bit_Game_State =	y
    147  5000 ????
    148  5000 ????	       00 86	   P1y_position =	player1y
    149  5000 ????	       00 e9	   P1y_velocity =	v
    150  5000 ????	       00 91	   M0y_position =	missile0y
    151  5000 ????	       00 e6	   M0y_velocity =	s
    152  5000 ????	       00 af	   Bally_position =	ball_shoot_y
    153  5000 ????	       00 e3	   Bally_velocity =	p
    154  5000 ????	       00 e2	   _Ch1_Duration =	o
    155  5000 ????
    156  5000 ????	       00 e1	   Safe_Point_P1_y =	n
    157  5000 ????
    158  5000 ????	       00 e0	   Safe_Point_P1_x =	m
    159  5000 ????
    160  5000 ????	       00 df	   _Bit1_Safe_Point_P1_Flip =	l
    161  5000 ????
    162  5000 ????	       00 df	   _Bit0_New_Room_P1_Flip =	l
    163  5000 ????
    164  5000 ????	       00 df	   _BitOp_Flip_positions =	l
    165  5000 ????
    166  5000 ????	       00 de	   roommate_type =	k
    167  5000 ????
    168  5000 ????	       00 dd	   roommate_move_x =	j
    169  5000 ????
    170  5000 ????	       00 dc	   extra_wall_move_x =	i
    171  5000 ????
    172  5000 ????	       00 db	   _Ch0_Counter =	h
    173  5000 ????
    174  5000 ????	       00 da	   _Ch0_Duration =	g
    175  5000 ????
    176  5000 ????	       00 d9	   _Ch0_Sound =	f
    177  5000 ????
    178  5000 ????	       00 d8	   _Bit3_P1_Dir_Right =	e
    179  5000 ????
    180  5000 ????	       00 d8	   _Bit2_P1_Dir_Left =	e
    181  5000 ????
    182  5000 ????	       00 d8	   _Bit1_P1_Dir_Down =	e
    183  5000 ????
    184  5000 ????	       00 d8	   _Bit0_P1_Dir_Up =	e
    185  5000 ????
    186  5000 ????	       00 d8	   _BitOp_P1_Dir =	e
    187  5000 ????
    188  5000 ????	       00 d7	   _Bit3_M0_Dir_Right =	d
    189  5000 ????
    190  5000 ????	       00 d7	   _Bit2_M0_Dir_Left =	d
    191  5000 ????
    192  5000 ????	       00 d7	   _Bit1_M0_Dir_Down =	d
    193  5000 ????
    194  5000 ????	       00 d7	   _Bit0_M0_Dir_Up =	d
    195  5000 ????
    196  5000 ????	       00 d7	   _BitOp_M0_Dir =	d
    197  5000 ????
    198  5000 ????	       00 d6	   _Bit3_Ball_Shot_Dir_Right2 =	c
    199  5000 ????
    200  5000 ????	       00 d6	   _Bit2_Ball_Shot_Dir_Right1 =	c
    201  5000 ????
    202  5000 ????	       00 d6	   _Bit1_Ball_Shot_Dir_Left2 =	c
    203  5000 ????
    204  5000 ????	       00 d6	   _Bit0_Ball_Shot_Dir_Left1 =	c
    205  5000 ????
    206  5000 ????	       00 d6	   _BitOp_Ball_Shot_Dir =	c
    207  5000 ????
    208  5000 ????	       00 d5	   frame_counter =	b
    209  5000 ????
    210  5000 ????	       00 d4	   delay_counter =	a
    211  5000 ????
    212  5000 ????	       00 95	   _sc3       =	score + 2
    213  5000 ????
    214  5000 ????	       00 94	   _sc2       =	score + 1
    215  5000 ????
    216  5000 ????	       00 93	   _sc1       =	score
    217  5000 ????
    218  5000 ????	       00 fe	   _FE	      =	$FE
    219  5000 ????
    220  5000 ????	       00 fc	   _FC	      =	$FC
    221  5000 ????
    222  5000 ????	       00 fa	   _FA	      =	$FA
    223  5000 ????
    224  5000 ????	       00 f8	   _F8	      =	$F8
    225  5000 ????
    226  5000 ????	       00 f6	   _F6	      =	$F6
    227  5000 ????
    228  5000 ????	       00 f4	   _F4	      =	$F4
    229  5000 ????
    230  5000 ????	       00 f2	   _F2	      =	$F2
    231  5000 ????
    232  5000 ????	       00 f0	   _F0	      =	$F0
    233  5000 ????
    234  5000 ????	       00 ee	   _EE	      =	$EE
    235  5000 ????
    236  5000 ????	       00 ec	   _EC	      =	$EC
    237  5000 ????
    238  5000 ????	       00 ea	   _EA	      =	$EA
    239  5000 ????
    240  5000 ????	       00 e8	   _E8	      =	$E8
    241  5000 ????
    242  5000 ????	       00 e6	   _E6	      =	$E6
    243  5000 ????
    244  5000 ????	       00 e4	   _E4	      =	$E4
    245  5000 ????
    246  5000 ????	       00 e2	   _E2	      =	$E2
    247  5000 ????
    248  5000 ????	       00 e0	   _E0	      =	$E0
    249  5000 ????
    250  5000 ????	       00 de	   _DE	      =	$DE
    251  5000 ????
    252  5000 ????	       00 dc	   _DC	      =	$DC
    253  5000 ????
    254  5000 ????	       00 da	   _DA	      =	$DA
    255  5000 ????
    256  5000 ????	       00 d8	   _D8	      =	$D8
    257  5000 ????
    258  5000 ????	       00 d6	   _D6	      =	$D6
    259  5000 ????
    260  5000 ????	       00 d4	   _D4	      =	$D4
    261  5000 ????
    262  5000 ????	       00 d2	   _D2	      =	$D2
    263  5000 ????
    264  5000 ????	       00 d0	   _D0	      =	$D0
    265  5000 ????
    266  5000 ????	       00 ce	   _CE	      =	$CE
    267  5000 ????
    268  5000 ????	       00 cc	   _CC	      =	$CC
    269  5000 ????
    270  5000 ????	       00 ca	   _CA	      =	$CA
    271  5000 ????
    272  5000 ????	       00 c8	   _C8	      =	$C8
    273  5000 ????
    274  5000 ????	       00 c6	   _C6	      =	$C6
    275  5000 ????
    276  5000 ????	       00 c4	   _C4	      =	$C4
    277  5000 ????
    278  5000 ????	       00 c2	   _C2	      =	$C2
    279  5000 ????
    280  5000 ????	       00 c0	   _C0	      =	$C0
    281  5000 ????
    282  5000 ????	       00 be	   _BE	      =	$BE
    283  5000 ????
    284  5000 ????	       00 bc	   _BC	      =	$BC
    285  5000 ????
    286  5000 ????	       00 ba	   _BA	      =	$BA
    287  5000 ????
    288  5000 ????	       00 b8	   _B8	      =	$B8
    289  5000 ????
    290  5000 ????	       00 b6	   _B6	      =	$B6
    291  5000 ????
    292  5000 ????	       00 b4	   _B4	      =	$B4
    293  5000 ????
    294  5000 ????	       00 b2	   _B2	      =	$B2
    295  5000 ????
    296  5000 ????	       00 b0	   _B0	      =	$B0
    297  5000 ????
    298  5000 ????	       00 ae	   _AE	      =	$AE
    299  5000 ????
    300  5000 ????	       00 ac	   _AC	      =	$AC
    301  5000 ????
    302  5000 ????	       00 aa	   _AA	      =	$AA
    303  5000 ????
    304  5000 ????	       00 a8	   _A8	      =	$A8
    305  5000 ????
    306  5000 ????	       00 a6	   _A6	      =	$A6
    307  5000 ????
    308  5000 ????	       00 a4	   _A4	      =	$A4
    309  5000 ????
    310  5000 ????	       00 a2	   _A2	      =	$A2
    311  5000 ????
    312  5000 ????	       00 a0	   _A0	      =	$A0
    313  5000 ????
    314  5000 ????	       00 9e	   _9E	      =	$9E
    315  5000 ????
    316  5000 ????	       00 9c	   _9C	      =	$9C
    317  5000 ????
    318  5000 ????	       00 9a	   _9A	      =	$9A
    319  5000 ????
    320  5000 ????	       00 98	   _98	      =	$98
    321  5000 ????
    322  5000 ????	       00 96	   _96	      =	$96
    323  5000 ????
    324  5000 ????	       00 94	   _94	      =	$94
    325  5000 ????
    326  5000 ????	       00 92	   _92	      =	$92
    327  5000 ????
    328  5000 ????	       00 90	   _90	      =	$90
    329  5000 ????
    330  5000 ????	       00 8e	   _8E	      =	$8E
    331  5000 ????
    332  5000 ????	       00 8c	   _8C	      =	$8C
    333  5000 ????
    334  5000 ????	       00 8a	   _8A	      =	$8A
    335  5000 ????
    336  5000 ????	       00 88	   _88	      =	$88
    337  5000 ????
    338  5000 ????	       00 86	   _86	      =	$86
    339  5000 ????
    340  5000 ????	       00 84	   _84	      =	$84
    341  5000 ????
    342  5000 ????	       00 82	   _82	      =	$82
    343  5000 ????
    344  5000 ????	       00 80	   _80	      =	$80
    345  5000 ????
    346  5000 ????	       00 7e	   _7E	      =	$7E
    347  5000 ????
    348  5000 ????	       00 7c	   _7C	      =	$7C
    349  5000 ????
    350  5000 ????	       00 7a	   _7A	      =	$7A
    351  5000 ????
    352  5000 ????	       00 78	   _78	      =	$78
    353  5000 ????
    354  5000 ????	       00 76	   _76	      =	$76
    355  5000 ????
    356  5000 ????	       00 74	   _74	      =	$74
    357  5000 ????
    358  5000 ????	       00 72	   _72	      =	$72
    359  5000 ????
    360  5000 ????	       00 70	   _70	      =	$70
    361  5000 ????
    362  5000 ????	       00 6e	   _6E	      =	$6E
    363  5000 ????
    364  5000 ????	       00 6c	   _6C	      =	$6C
    365  5000 ????
    366  5000 ????	       00 6a	   _6A	      =	$6A
    367  5000 ????
    368  5000 ????	       00 68	   _68	      =	$68
    369  5000 ????
    370  5000 ????	       00 66	   _66	      =	$66
    371  5000 ????
    372  5000 ????	       00 64	   _64	      =	$64
    373  5000 ????
    374  5000 ????	       00 62	   _62	      =	$62
    375  5000 ????
    376  5000 ????	       00 60	   _60	      =	$60
    377  5000 ????
    378  5000 ????	       00 5e	   _5E	      =	$5E
    379  5000 ????
    380  5000 ????	       00 5c	   _5C	      =	$5C
    381  5000 ????
    382  5000 ????	       00 5a	   _5A	      =	$5A
    383  5000 ????
    384  5000 ????	       00 58	   _58	      =	$58
    385  5000 ????
    386  5000 ????	       00 56	   _56	      =	$56
    387  5000 ????
    388  5000 ????	       00 54	   _54	      =	$54
    389  5000 ????
    390  5000 ????	       00 52	   _52	      =	$52
    391  5000 ????
    392  5000 ????	       00 50	   _50	      =	$50
    393  5000 ????
    394  5000 ????	       00 4e	   _4E	      =	$4E
    395  5000 ????
    396  5000 ????	       00 4c	   _4C	      =	$4C
    397  5000 ????
    398  5000 ????	       00 4a	   _4A	      =	$4A
    399  5000 ????
    400  5000 ????	       00 48	   _48	      =	$48
    401  5000 ????
    402  5000 ????	       00 46	   _46	      =	$46
    403  5000 ????
    404  5000 ????	       00 44	   _44	      =	$44
    405  5000 ????
    406  5000 ????	       00 42	   _42	      =	$42
    407  5000 ????
    408  5000 ????	       00 40	   _40	      =	$40
    409  5000 ????
    410  5000 ????	       00 3e	   _3E	      =	$3E
    411  5000 ????
    412  5000 ????	       00 3c	   _3C	      =	$3C
    413  5000 ????
    414  5000 ????	       00 3a	   _3A	      =	$3A
    415  5000 ????
    416  5000 ????	       00 38	   _38	      =	$38
    417  5000 ????
    418  5000 ????	       00 36	   _36	      =	$36
    419  5000 ????
    420  5000 ????	       00 34	   _34	      =	$34
    421  5000 ????
    422  5000 ????	       00 32	   _32	      =	$32
    423  5000 ????
    424  5000 ????	       00 30	   _30	      =	$30
    425  5000 ????
    426  5000 ????	       00 2e	   _2E	      =	$2E
    427  5000 ????
    428  5000 ????	       00 2c	   _2C	      =	$2C
    429  5000 ????
    430  5000 ????	       00 2a	   _2A	      =	$2A
    431  5000 ????
    432  5000 ????	       00 28	   _28	      =	$28
    433  5000 ????
    434  5000 ????	       00 26	   _26	      =	$26
    435  5000 ????
    436  5000 ????	       00 24	   _24	      =	$24
    437  5000 ????
    438  5000 ????	       00 22	   _22	      =	$22
    439  5000 ????
    440  5000 ????	       00 20	   _20	      =	$20
    441  5000 ????
    442  5000 ????	       00 1e	   _1E	      =	$1E
    443  5000 ????
    444  5000 ????	       00 1c	   _1C	      =	$1C
    445  5000 ????
    446  5000 ????	       00 1a	   _1A	      =	$1A
    447  5000 ????
    448  5000 ????	       00 18	   _18	      =	$18
    449  5000 ????
    450  5000 ????	       00 16	   _16	      =	$16
    451  5000 ????
    452  5000 ????	       00 14	   _14	      =	$14
    453  5000 ????
    454  5000 ????	       00 12	   _12	      =	$12
    455  5000 ????
    456  5000 ????	       00 10	   _10	      =	$10
    457  5000 ????
    458  5000 ????	       00 0e	   _0E	      =	$0E
    459  5000 ????
    460  5000 ????	       00 0c	   _0C	      =	$0C
    461  5000 ????
    462  5000 ????	       00 0a	   _0A	      =	$0A
    463  5000 ????
    464  5000 ????	       00 08	   _08	      =	$08
    465  5000 ????
    466  5000 ????	       00 06	   _06	      =	$06
    467  5000 ????
    468  5000 ????	       00 04	   _04	      =	$04
    469  5000 ????
    470  5000 ????	       00 02	   _02	      =	$02
    471  5000 ????
    472  5000 ????	       00 00	   _00	      =	$00
    473  5000 ????
    474  5000 ????	       00 09	   req_load_menu =	9
    475  5000 ????
    476  5000 ????	       00 08	   req_safe_point =	8
    477  5000 ????
    478  5000 ????	       00 07	   req_level_reset =	7
    479  5000 ????
    480  5000 ????	       00 06	   req_move_down =	6
    481  5000 ????
    482  5000 ????	       00 05	   req_move_right =	5
    483  5000 ????
    484  5000 ????	       00 04	   req_move_up =	4
    485  5000 ????
    486  5000 ????	       00 03	   req_move_left =	3
    487  5000 ????
    488  5000 ????	       00 02	   req_game_over =	2
    489  5000 ????
    490  5000 ????	       00 01	   req_level_up =	1
    491  5000 ????
    492  5000 ????	       00 00	   req_load   =	0
    493  5000 ????
    494  5000 ????	       00 03	   game_state_heli_explosion =	3
    495  5000 ????
    496  5000 ????	       00 02	   game_state_level_finished =	2
    497  5000 ????
    498  5000 ????	       00 01	   game_state_game_over =	1
    499  5000 ????
    500  5000 ????	       00 00	   game_state_run =	0
    501  5000 ????
    502  5000 ????	       00 06	   response_menu_size =	6
    503  5000 ????
    504  5000 ????	       00 1e	   response_size_minus_1 =	30
    505  5000 ????
    506  5000 ????	       00 94	   _M_Edge_Right =	148
    507  5000 ????
    508  5000 ????	       00 0e	   _M_Edge_Left =	14
    509  5000 ????
    510  5000 ????	       00 58	   _M_Edge_Bottom =	88
    511  5000 ????
    512  5000 ????	       00 02	   _M_Edge_Top =	2
    513  5000 ????
    514  5000 ????	       00 4c	   player_max_y =	76
    515  5000 ????
    516  5000 ????	       00 02	   player_min_y =	2
    517  5000 ????
    518  5000 ????	       00 86	   player_max_x =	134
    519  5000 ????
    520  5000 ????	       00 0a	   player_min_x =	10
    521  5000 ????
    522  5000 ????	       00 08	   textbkcolor =	$08
    523  5000 ????
    524  5000 ????	       00 08	   scorebkcolor =	$08
    525  5000 ????
    526  5000 ????	       00 01	   pfscore    =	1
    527  5000 ????
    528  5000 ????	       00 04	   pfres      =	4
    529  5000 ????
    530  5000 ????	       00 01	   superchip  =	1
    531  5000 ????	       00 03	   bs_mask    =	3
    532  5000 ????	       00 10	   bankswitch =	16
    533  5000 ????	       1f f6	   bankswitch_hotspot =	$1FF6
    534  5000 ????	       00 01	   PFcolors   =	1
    535  5000 ????	       00 01	   player1colors =	1
------- FILE d:\Firmaplus\Firmaplus_intern\Atari\PlusROM\Projekte-batariBasic\CaveApocalypse\C.A.V.E. Apocalypse.bas.asm
      8  5000 ????				      ifconst	bankswitch
      9  5000 ????			  -	      if	bankswitch == 8
     10  5000 ????			  -	      ORG	$1000
     11  5000 ????			  -	      RORG	$D000
     12  5000 ????				      endif
     13  5000 ????				      if	bankswitch == 16
     14  1000					      ORG	$1000
     15  1000					      RORG	$9000
     16  1000					      endif
     17  1000				  -	      if	bankswitch == 32
     18  1000				  -	      ORG	$1000
     19  1000				  -	      RORG	$1000
     20  1000					      endif
     21  1000				  -	      if	bankswitch == 64
     22  1000				  -	      ORG	$1000
     23  1000				  -	      RORG	$1000
     24  1000					      endif
     25  1000				  -	      else
     26  1000				  -	      ORG	$F000
     27  1000					      endif
     28  1000					      repeat	256
     29  1000		       ff		      .byte.b	$ff
     28  1000					      repend
     29  1001		       ff		      .byte.b	$ff
     28  1001					      repend
     29  1002		       ff		      .byte.b	$ff
     28  1002					      repend
     29  1003		       ff		      .byte.b	$ff
     28  1003					      repend
     29  1004		       ff		      .byte.b	$ff
     28  1004					      repend
     29  1005		       ff		      .byte.b	$ff
     28  1005					      repend
     29  1006		       ff		      .byte.b	$ff
     28  1006					      repend
     29  1007		       ff		      .byte.b	$ff
     28  1007					      repend
     29  1008		       ff		      .byte.b	$ff
     28  1008					      repend
     29  1009		       ff		      .byte.b	$ff
     28  1009					      repend
     29  100a		       ff		      .byte.b	$ff
     28  100a					      repend
     29  100b		       ff		      .byte.b	$ff
     28  100b					      repend
     29  100c		       ff		      .byte.b	$ff
     28  100c					      repend
     29  100d		       ff		      .byte.b	$ff
     28  100d					      repend
     29  100e		       ff		      .byte.b	$ff
     28  100e					      repend
     29  100f		       ff		      .byte.b	$ff
     28  100f					      repend
     29  1010		       ff		      .byte.b	$ff
     28  1010					      repend
     29  1011		       ff		      .byte.b	$ff
     28  1011					      repend
     29  1012		       ff		      .byte.b	$ff
     28  1012					      repend
     29  1013		       ff		      .byte.b	$ff
     28  1013					      repend
     29  1014		       ff		      .byte.b	$ff
     28  1014					      repend
     29  1015		       ff		      .byte.b	$ff
     28  1015					      repend
     29  1016		       ff		      .byte.b	$ff
     28  1016					      repend
     29  1017		       ff		      .byte.b	$ff
     28  1017					      repend
     29  1018		       ff		      .byte.b	$ff
     28  1018					      repend
     29  1019		       ff		      .byte.b	$ff
     28  1019					      repend
     29  101a		       ff		      .byte.b	$ff
     28  101a					      repend
     29  101b		       ff		      .byte.b	$ff
     28  101b					      repend
     29  101c		       ff		      .byte.b	$ff
     28  101c					      repend
     29  101d		       ff		      .byte.b	$ff
     28  101d					      repend
     29  101e		       ff		      .byte.b	$ff
     28  101e					      repend
     29  101f		       ff		      .byte.b	$ff
     28  101f					      repend
     29  1020		       ff		      .byte.b	$ff
     28  1020					      repend
     29  1021		       ff		      .byte.b	$ff
     28  1021					      repend
     29  1022		       ff		      .byte.b	$ff
     28  1022					      repend
     29  1023		       ff		      .byte.b	$ff
     28  1023					      repend
     29  1024		       ff		      .byte.b	$ff
     28  1024					      repend
     29  1025		       ff		      .byte.b	$ff
     28  1025					      repend
     29  1026		       ff		      .byte.b	$ff
     28  1026					      repend
     29  1027		       ff		      .byte.b	$ff
     28  1027					      repend
     29  1028		       ff		      .byte.b	$ff
     28  1028					      repend
     29  1029		       ff		      .byte.b	$ff
     28  1029					      repend
     29  102a		       ff		      .byte.b	$ff
     28  102a					      repend
     29  102b		       ff		      .byte.b	$ff
     28  102b					      repend
     29  102c		       ff		      .byte.b	$ff
     28  102c					      repend
     29  102d		       ff		      .byte.b	$ff
     28  102d					      repend
     29  102e		       ff		      .byte.b	$ff
     28  102e					      repend
     29  102f		       ff		      .byte.b	$ff
     28  102f					      repend
     29  1030		       ff		      .byte.b	$ff
     28  1030					      repend
     29  1031		       ff		      .byte.b	$ff
     28  1031					      repend
     29  1032		       ff		      .byte.b	$ff
     28  1032					      repend
     29  1033		       ff		      .byte.b	$ff
     28  1033					      repend
     29  1034		       ff		      .byte.b	$ff
     28  1034					      repend
     29  1035		       ff		      .byte.b	$ff
     28  1035					      repend
     29  1036		       ff		      .byte.b	$ff
     28  1036					      repend
     29  1037		       ff		      .byte.b	$ff
     28  1037					      repend
     29  1038		       ff		      .byte.b	$ff
     28  1038					      repend
     29  1039		       ff		      .byte.b	$ff
     28  1039					      repend
     29  103a		       ff		      .byte.b	$ff
     28  103a					      repend
     29  103b		       ff		      .byte.b	$ff
     28  103b					      repend
     29  103c		       ff		      .byte.b	$ff
     28  103c					      repend
     29  103d		       ff		      .byte.b	$ff
     28  103d					      repend
     29  103e		       ff		      .byte.b	$ff
     28  103e					      repend
     29  103f		       ff		      .byte.b	$ff
     28  103f					      repend
     29  1040		       ff		      .byte.b	$ff
     28  1040					      repend
     29  1041		       ff		      .byte.b	$ff
     28  1041					      repend
     29  1042		       ff		      .byte.b	$ff
     28  1042					      repend
     29  1043		       ff		      .byte.b	$ff
     28  1043					      repend
     29  1044		       ff		      .byte.b	$ff
     28  1044					      repend
     29  1045		       ff		      .byte.b	$ff
     28  1045					      repend
     29  1046		       ff		      .byte.b	$ff
     28  1046					      repend
     29  1047		       ff		      .byte.b	$ff
     28  1047					      repend
     29  1048		       ff		      .byte.b	$ff
     28  1048					      repend
     29  1049		       ff		      .byte.b	$ff
     28  1049					      repend
     29  104a		       ff		      .byte.b	$ff
     28  104a					      repend
     29  104b		       ff		      .byte.b	$ff
     28  104b					      repend
     29  104c		       ff		      .byte.b	$ff
     28  104c					      repend
     29  104d		       ff		      .byte.b	$ff
     28  104d					      repend
     29  104e		       ff		      .byte.b	$ff
     28  104e					      repend
     29  104f		       ff		      .byte.b	$ff
     28  104f					      repend
     29  1050		       ff		      .byte.b	$ff
     28  1050					      repend
     29  1051		       ff		      .byte.b	$ff
     28  1051					      repend
     29  1052		       ff		      .byte.b	$ff
     28  1052					      repend
     29  1053		       ff		      .byte.b	$ff
     28  1053					      repend
     29  1054		       ff		      .byte.b	$ff
     28  1054					      repend
     29  1055		       ff		      .byte.b	$ff
     28  1055					      repend
     29  1056		       ff		      .byte.b	$ff
     28  1056					      repend
     29  1057		       ff		      .byte.b	$ff
     28  1057					      repend
     29  1058		       ff		      .byte.b	$ff
     28  1058					      repend
     29  1059		       ff		      .byte.b	$ff
     28  1059					      repend
     29  105a		       ff		      .byte.b	$ff
     28  105a					      repend
     29  105b		       ff		      .byte.b	$ff
     28  105b					      repend
     29  105c		       ff		      .byte.b	$ff
     28  105c					      repend
     29  105d		       ff		      .byte.b	$ff
     28  105d					      repend
     29  105e		       ff		      .byte.b	$ff
     28  105e					      repend
     29  105f		       ff		      .byte.b	$ff
     28  105f					      repend
     29  1060		       ff		      .byte.b	$ff
     28  1060					      repend
     29  1061		       ff		      .byte.b	$ff
     28  1061					      repend
     29  1062		       ff		      .byte.b	$ff
     28  1062					      repend
     29  1063		       ff		      .byte.b	$ff
     28  1063					      repend
     29  1064		       ff		      .byte.b	$ff
     28  1064					      repend
     29  1065		       ff		      .byte.b	$ff
     28  1065					      repend
     29  1066		       ff		      .byte.b	$ff
     28  1066					      repend
     29  1067		       ff		      .byte.b	$ff
     28  1067					      repend
     29  1068		       ff		      .byte.b	$ff
     28  1068					      repend
     29  1069		       ff		      .byte.b	$ff
     28  1069					      repend
     29  106a		       ff		      .byte.b	$ff
     28  106a					      repend
     29  106b		       ff		      .byte.b	$ff
     28  106b					      repend
     29  106c		       ff		      .byte.b	$ff
     28  106c					      repend
     29  106d		       ff		      .byte.b	$ff
     28  106d					      repend
     29  106e		       ff		      .byte.b	$ff
     28  106e					      repend
     29  106f		       ff		      .byte.b	$ff
     28  106f					      repend
     29  1070		       ff		      .byte.b	$ff
     28  1070					      repend
     29  1071		       ff		      .byte.b	$ff
     28  1071					      repend
     29  1072		       ff		      .byte.b	$ff
     28  1072					      repend
     29  1073		       ff		      .byte.b	$ff
     28  1073					      repend
     29  1074		       ff		      .byte.b	$ff
     28  1074					      repend
     29  1075		       ff		      .byte.b	$ff
     28  1075					      repend
     29  1076		       ff		      .byte.b	$ff
     28  1076					      repend
     29  1077		       ff		      .byte.b	$ff
     28  1077					      repend
     29  1078		       ff		      .byte.b	$ff
     28  1078					      repend
     29  1079		       ff		      .byte.b	$ff
     28  1079					      repend
     29  107a		       ff		      .byte.b	$ff
     28  107a					      repend
     29  107b		       ff		      .byte.b	$ff
     28  107b					      repend
     29  107c		       ff		      .byte.b	$ff
     28  107c					      repend
     29  107d		       ff		      .byte.b	$ff
     28  107d					      repend
     29  107e		       ff		      .byte.b	$ff
     28  107e					      repend
     29  107f		       ff		      .byte.b	$ff
     28  107f					      repend
     29  1080		       ff		      .byte.b	$ff
     28  1080					      repend
     29  1081		       ff		      .byte.b	$ff
     28  1081					      repend
     29  1082		       ff		      .byte.b	$ff
     28  1082					      repend
     29  1083		       ff		      .byte.b	$ff
     28  1083					      repend
     29  1084		       ff		      .byte.b	$ff
     28  1084					      repend
     29  1085		       ff		      .byte.b	$ff
     28  1085					      repend
     29  1086		       ff		      .byte.b	$ff
     28  1086					      repend
     29  1087		       ff		      .byte.b	$ff
     28  1087					      repend
     29  1088		       ff		      .byte.b	$ff
     28  1088					      repend
     29  1089		       ff		      .byte.b	$ff
     28  1089					      repend
     29  108a		       ff		      .byte.b	$ff
     28  108a					      repend
     29  108b		       ff		      .byte.b	$ff
     28  108b					      repend
     29  108c		       ff		      .byte.b	$ff
     28  108c					      repend
     29  108d		       ff		      .byte.b	$ff
     28  108d					      repend
     29  108e		       ff		      .byte.b	$ff
     28  108e					      repend
     29  108f		       ff		      .byte.b	$ff
     28  108f					      repend
     29  1090		       ff		      .byte.b	$ff
     28  1090					      repend
     29  1091		       ff		      .byte.b	$ff
     28  1091					      repend
     29  1092		       ff		      .byte.b	$ff
     28  1092					      repend
     29  1093		       ff		      .byte.b	$ff
     28  1093					      repend
     29  1094		       ff		      .byte.b	$ff
     28  1094					      repend
     29  1095		       ff		      .byte.b	$ff
     28  1095					      repend
     29  1096		       ff		      .byte.b	$ff
     28  1096					      repend
     29  1097		       ff		      .byte.b	$ff
     28  1097					      repend
     29  1098		       ff		      .byte.b	$ff
     28  1098					      repend
     29  1099		       ff		      .byte.b	$ff
     28  1099					      repend
     29  109a		       ff		      .byte.b	$ff
     28  109a					      repend
     29  109b		       ff		      .byte.b	$ff
     28  109b					      repend
     29  109c		       ff		      .byte.b	$ff
     28  109c					      repend
     29  109d		       ff		      .byte.b	$ff
     28  109d					      repend
     29  109e		       ff		      .byte.b	$ff
     28  109e					      repend
     29  109f		       ff		      .byte.b	$ff
     28  109f					      repend
     29  10a0		       ff		      .byte.b	$ff
     28  10a0					      repend
     29  10a1		       ff		      .byte.b	$ff
     28  10a1					      repend
     29  10a2		       ff		      .byte.b	$ff
     28  10a2					      repend
     29  10a3		       ff		      .byte.b	$ff
     28  10a3					      repend
     29  10a4		       ff		      .byte.b	$ff
     28  10a4					      repend
     29  10a5		       ff		      .byte.b	$ff
     28  10a5					      repend
     29  10a6		       ff		      .byte.b	$ff
     28  10a6					      repend
     29  10a7		       ff		      .byte.b	$ff
     28  10a7					      repend
     29  10a8		       ff		      .byte.b	$ff
     28  10a8					      repend
     29  10a9		       ff		      .byte.b	$ff
     28  10a9					      repend
     29  10aa		       ff		      .byte.b	$ff
     28  10aa					      repend
     29  10ab		       ff		      .byte.b	$ff
     28  10ab					      repend
     29  10ac		       ff		      .byte.b	$ff
     28  10ac					      repend
     29  10ad		       ff		      .byte.b	$ff
     28  10ad					      repend
     29  10ae		       ff		      .byte.b	$ff
     28  10ae					      repend
     29  10af		       ff		      .byte.b	$ff
     28  10af					      repend
     29  10b0		       ff		      .byte.b	$ff
     28  10b0					      repend
     29  10b1		       ff		      .byte.b	$ff
     28  10b1					      repend
     29  10b2		       ff		      .byte.b	$ff
     28  10b2					      repend
     29  10b3		       ff		      .byte.b	$ff
     28  10b3					      repend
     29  10b4		       ff		      .byte.b	$ff
     28  10b4					      repend
     29  10b5		       ff		      .byte.b	$ff
     28  10b5					      repend
     29  10b6		       ff		      .byte.b	$ff
     28  10b6					      repend
     29  10b7		       ff		      .byte.b	$ff
     28  10b7					      repend
     29  10b8		       ff		      .byte.b	$ff
     28  10b8					      repend
     29  10b9		       ff		      .byte.b	$ff
     28  10b9					      repend
     29  10ba		       ff		      .byte.b	$ff
     28  10ba					      repend
     29  10bb		       ff		      .byte.b	$ff
     28  10bb					      repend
     29  10bc		       ff		      .byte.b	$ff
     28  10bc					      repend
     29  10bd		       ff		      .byte.b	$ff
     28  10bd					      repend
     29  10be		       ff		      .byte.b	$ff
     28  10be					      repend
     29  10bf		       ff		      .byte.b	$ff
     28  10bf					      repend
     29  10c0		       ff		      .byte.b	$ff
     28  10c0					      repend
     29  10c1		       ff		      .byte.b	$ff
     28  10c1					      repend
     29  10c2		       ff		      .byte.b	$ff
     28  10c2					      repend
     29  10c3		       ff		      .byte.b	$ff
     28  10c3					      repend
     29  10c4		       ff		      .byte.b	$ff
     28  10c4					      repend
     29  10c5		       ff		      .byte.b	$ff
     28  10c5					      repend
     29  10c6		       ff		      .byte.b	$ff
     28  10c6					      repend
     29  10c7		       ff		      .byte.b	$ff
     28  10c7					      repend
     29  10c8		       ff		      .byte.b	$ff
     28  10c8					      repend
     29  10c9		       ff		      .byte.b	$ff
     28  10c9					      repend
     29  10ca		       ff		      .byte.b	$ff
     28  10ca					      repend
     29  10cb		       ff		      .byte.b	$ff
     28  10cb					      repend
     29  10cc		       ff		      .byte.b	$ff
     28  10cc					      repend
     29  10cd		       ff		      .byte.b	$ff
     28  10cd					      repend
     29  10ce		       ff		      .byte.b	$ff
     28  10ce					      repend
     29  10cf		       ff		      .byte.b	$ff
     28  10cf					      repend
     29  10d0		       ff		      .byte.b	$ff
     28  10d0					      repend
     29  10d1		       ff		      .byte.b	$ff
     28  10d1					      repend
     29  10d2		       ff		      .byte.b	$ff
     28  10d2					      repend
     29  10d3		       ff		      .byte.b	$ff
     28  10d3					      repend
     29  10d4		       ff		      .byte.b	$ff
     28  10d4					      repend
     29  10d5		       ff		      .byte.b	$ff
     28  10d5					      repend
     29  10d6		       ff		      .byte.b	$ff
     28  10d6					      repend
     29  10d7		       ff		      .byte.b	$ff
     28  10d7					      repend
     29  10d8		       ff		      .byte.b	$ff
     28  10d8					      repend
     29  10d9		       ff		      .byte.b	$ff
     28  10d9					      repend
     29  10da		       ff		      .byte.b	$ff
     28  10da					      repend
     29  10db		       ff		      .byte.b	$ff
     28  10db					      repend
     29  10dc		       ff		      .byte.b	$ff
     28  10dc					      repend
     29  10dd		       ff		      .byte.b	$ff
     28  10dd					      repend
     29  10de		       ff		      .byte.b	$ff
     28  10de					      repend
     29  10df		       ff		      .byte.b	$ff
     28  10df					      repend
     29  10e0		       ff		      .byte.b	$ff
     28  10e0					      repend
     29  10e1		       ff		      .byte.b	$ff
     28  10e1					      repend
     29  10e2		       ff		      .byte.b	$ff
     28  10e2					      repend
     29  10e3		       ff		      .byte.b	$ff
     28  10e3					      repend
     29  10e4		       ff		      .byte.b	$ff
     28  10e4					      repend
     29  10e5		       ff		      .byte.b	$ff
     28  10e5					      repend
     29  10e6		       ff		      .byte.b	$ff
     28  10e6					      repend
     29  10e7		       ff		      .byte.b	$ff
     28  10e7					      repend
     29  10e8		       ff		      .byte.b	$ff
     28  10e8					      repend
     29  10e9		       ff		      .byte.b	$ff
     28  10e9					      repend
     29  10ea		       ff		      .byte.b	$ff
     28  10ea					      repend
     29  10eb		       ff		      .byte.b	$ff
     28  10eb					      repend
     29  10ec		       ff		      .byte.b	$ff
     28  10ec					      repend
     29  10ed		       ff		      .byte.b	$ff
     28  10ed					      repend
     29  10ee		       ff		      .byte.b	$ff
     28  10ee					      repend
     29  10ef		       ff		      .byte.b	$ff
     28  10ef					      repend
     29  10f0		       ff		      .byte.b	$ff
     28  10f0					      repend
     29  10f1		       ff		      .byte.b	$ff
     28  10f1					      repend
     29  10f2		       ff		      .byte.b	$ff
     28  10f2					      repend
     29  10f3		       ff		      .byte.b	$ff
     28  10f3					      repend
     29  10f4		       ff		      .byte.b	$ff
     28  10f4					      repend
     29  10f5		       ff		      .byte.b	$ff
     28  10f5					      repend
     29  10f6		       ff		      .byte.b	$ff
     28  10f6					      repend
     29  10f7		       ff		      .byte.b	$ff
     28  10f7					      repend
     29  10f8		       ff		      .byte.b	$ff
     28  10f8					      repend
     29  10f9		       ff		      .byte.b	$ff
     28  10f9					      repend
     29  10fa		       ff		      .byte.b	$ff
     28  10fa					      repend
     29  10fb		       ff		      .byte.b	$ff
     28  10fb					      repend
     29  10fc		       ff		      .byte.b	$ff
     28  10fc					      repend
     29  10fd		       ff		      .byte.b	$ff
     28  10fd					      repend
     29  10fe		       ff		      .byte.b	$ff
     28  10fe					      repend
     29  10ff		       ff		      .byte.b	$ff
     30  1100					      repend
     31  1100				   game
     32  1100				   .L00 		;  inline PlusROM_functions.asm
     33  1100
------- FILE PlusROM_functions.asm LEVEL 2 PASS 3
      0  1100					      include	PlusROM_functions.asm
      1  1100		       00 01	   PlusROM_functions =	1
      2  1100		       1f f0	   WriteToBuffer =	$1ff0
      3  1100		       1f f1	   WriteSendBuffer =	$1ff1
      4  1100		       1f f2	   ReceiveBuffer =	$1ff2
      5  1100		       1f f3	   ReceiveBufferSize =	$1ff3
      6  1100
      7  1100					      MAC	set_plusrom_api
      8  1100				   OLD_RORG   =	*
      9  1100					      REND
     10  1100				   PlusROM_API
     11  1100					      .byte	{1}, 0, {2}, 0
     12  1100					      ECHO	"Size of PlusROM API definition: ", [( * - PlusROM_API )]d
     13  1100					      RORG	(OLD_RORG + ( * - PlusROM_API ))
     14  1100					      ENDM		; {1} = path, {2} = domain
     15  1100
------- FILE d:\Firmaplus\Firmaplus_intern\Atari\PlusROM\Projekte-batariBasic\CaveApocalypse\C.A.V.E. Apocalypse.bas.asm
     35  1100
     36  1100				   .
     37  1100							; 
     38  1100
     39  1100				   .L01 		;  set kernel_options pfcolors player1colors
     40  1100
     41  1100				   .L02 		;  set romsize 16kSC
     42  1100
     43  1100				   .L03 		;  set smartbranching on
     44  1100
     45  1100				   .
     46  1100							; 
     47  1100
     48  1100				   .
     49  1100							; 
     50  1100
     51  1100				   .
     52  1100							; 
     53  1100
     54  1100				   .L04 		;  const pfres = 4
     55  1100
     56  1100				   .L05 		;  const pfscore = 1
     57  1100
     58  1100				   .L06 		;  const scorebkcolor = $08
     59  1100
     60  1100				   .L07 		;  const textbkcolor = $08
     61  1100
     62  1100				   .
     63  1100							; 
     64  1100
     65  1100				   .L08 		;  rem gravity is acceleration (https://atariage.com/forums/topic/226881-gravity/?do=findComment&comment=3017307)
     66  1100
     67  1100				   .L09 		;  rem by AA user bogax (https://atariage.com/forums/profile/22687-bogax/)
     68  1100
     69  1100				   .L010		;  rem the smallest fraction is 1/256 rounded up here to 0.004
     70  1100
     71  1100				   .L011		;  rem assuming gravity is applied each drawscreen this should
     72  1100
     73  1100				   .L012		;  rem work out to ~7 pixels in 1 second, 28 pixels in 2 seconds
     74  1100
     75  1100				   .L013		;  rem 63 pixels in 3 seconds
     76  1100
     77  1100							;.gravity_player1.0.004.
     78  1100				   .L014		;  def gravity_player1 = 0.004
     79  1100
     80  1100							;.gravity_ball.0.008.
     81  1100				   .L015		;  def gravity_ball = 0.008
     82  1100
     83  1100							;.gravity_missile0.0.024.
     84  1100				   .L016		;  def gravity_missile0 = 0.024
     85  1100
     86  1100				   .
     87  1100							; 
     88  1100
     89  1100				   .L017		;  const player_min_x	=  10
     90  1100
     91  1100				   .L018		;  const player_max_x	=  134
     92  1100
     93  1100				   .L019		;  const player_min_y	=  2
     94  1100
     95  1100				   .L020		;  const player_max_y	=  76
     96  1100
     97  1100				   .L021		;  const _M_Edge_Top  =  2
     98  1100
     99  1100				   .L022		;  const _M_Edge_Bottom  =  88
    100  1100
    101  1100				   .L023		;  const _M_Edge_Left	=  14
    102  1100
    103  1100				   .L024		;  const _M_Edge_Right  =  148
    104  1100
    105  1100				   .
    106  1100							; 
    107  1100
    108  1100				   .L025		;  const response_size_minus_1  =  30
    109  1100
    110  1100				   .L026		;  const response_menu_size  =  6
    111  1100
    112  1100				   .
    113  1100							; 
    114  1100
    115  1100				   .L027		;  const game_state_run  =  0
    116  1100
    117  1100				   .L028		;  const game_state_game_over	=  1
    118  1100
    119  1100				   .L029		;  const game_state_level_finished  =	2
    120  1100
    121  1100				   .L030		;  const game_state_heli_explosion  =	3
    122  1100
    123  1100				   .
    124  1100							; 
    125  1100
    126  1100							;.bonus_level_timer.100.
    127  1100				   .L031		;  def bonus_level_timer = 100
    128  1100
    129  1100							;.bonus_level_lives.200.
    130  1100				   .L032		;  def bonus_level_lives = 200
    131  1100
    132  1100							;.bonus_hit_wall.10.
    133  1100				   .L033		;  def bonus_hit_wall = 10
    134  1100
    135  1100							;.bonus_hit_active_wall.30.
    136  1100				   .L034		;  def bonus_hit_active_wall = 30
    137  1100
    138  1100							;.bonus_hit_air_missile.40.
    139  1100				   .L035		;  def bonus_hit_air_missile = 40
    140  1100
    141  1100							;.bonus_hit_tank.60.
    142  1100				   .L036		;  def bonus_hit_tank = 60
    143  1100
    144  1100							;.bonus_man_rescue.150.
    145  1100				   .L037		;  def bonus_man_rescue = 150
    146  1100
    147  1100				   .
    148  1100							; 
    149  1100
    150  1100				   .
    151  1100							; 
    152  1100
    153  1100				   .
    154  1100							; 
    155  1100
    156  1100				   .
    157  1100							; 
    158  1100
    159  1100				   .L038		;  const req_load  =  0
    160  1100
    161  1100				   .L039		;  const req_level_up	=  1
    162  1100
    163  1100				   .L040		;  const req_game_over  =  2
    164  1100
    165  1100				   .L041		;  const req_move_left  =  3
    166  1100
    167  1100				   .L042		;  const req_move_up  =  4
    168  1100
    169  1100				   .L043		;  const req_move_right  =  5
    170  1100
    171  1100				   .L044		;  const req_move_down  =  6
    172  1100
    173  1100				   .L045		;  const req_level_reset  =  7
    174  1100
    175  1100				   .L046		;  const req_safe_point  =  8
    176  1100
    177  1100				   .L047		;  const req_load_menu  =  9
    178  1100
    179  1100				   .
    180  1100							; 
    181  1100
    182  1100				   .L048		;  const _00  =  $00
    183  1100
    184  1100				   .L049		;  const _02  =  $02
    185  1100
    186  1100				   .L050		;  const _04  =  $04
    187  1100
    188  1100				   .L051		;  const _06  =  $06
    189  1100
    190  1100				   .L052		;  const _08  =  $08
    191  1100
    192  1100				   .L053		;  const _0A  =  $0A
    193  1100
    194  1100				   .L054		;  const _0C  =  $0C
    195  1100
    196  1100				   .L055		;  const _0E  =  $0E
    197  1100
    198  1100				   .L056		;  const _10  =  $10
    199  1100
    200  1100				   .L057		;  const _12  =  $12
    201  1100
    202  1100				   .L058		;  const _14  =  $14
    203  1100
    204  1100				   .L059		;  const _16  =  $16
    205  1100
    206  1100				   .L060		;  const _18  =  $18
    207  1100
    208  1100				   .L061		;  const _1A  =  $1A
    209  1100
    210  1100				   .L062		;  const _1C  =  $1C
    211  1100
    212  1100				   .L063		;  const _1E  =  $1E
    213  1100
    214  1100				   .L064		;  const _20  =  $20
    215  1100
    216  1100				   .L065		;  const _22  =  $22
    217  1100
    218  1100				   .L066		;  const _24  =  $24
    219  1100
    220  1100				   .L067		;  const _26  =  $26
    221  1100
    222  1100				   .L068		;  const _28  =  $28
    223  1100
    224  1100				   .L069		;  const _2A  =  $2A
    225  1100
    226  1100				   .L070		;  const _2C  =  $2C
    227  1100
    228  1100				   .L071		;  const _2E  =  $2E
    229  1100
    230  1100				   .L072		;  const _30  =  $30
    231  1100
    232  1100				   .L073		;  const _32  =  $32
    233  1100
    234  1100				   .L074		;  const _34  =  $34
    235  1100
    236  1100				   .L075		;  const _36  =  $36
    237  1100
    238  1100				   .L076		;  const _38  =  $38
    239  1100
    240  1100				   .L077		;  const _3A  =  $3A
    241  1100
    242  1100				   .L078		;  const _3C  =  $3C
    243  1100
    244  1100				   .L079		;  const _3E  =  $3E
    245  1100
    246  1100				   .L080		;  const _40  =  $40
    247  1100
    248  1100				   .L081		;  const _42  =  $42
    249  1100
    250  1100				   .L082		;  const _44  =  $44
    251  1100
    252  1100				   .L083		;  const _46  =  $46
    253  1100
    254  1100				   .L084		;  const _48  =  $48
    255  1100
    256  1100				   .L085		;  const _4A  =  $4A
    257  1100
    258  1100				   .L086		;  const _4C  =  $4C
    259  1100
    260  1100				   .L087		;  const _4E  =  $4E
    261  1100
    262  1100				   .L088		;  const _50  =  $50
    263  1100
    264  1100				   .L089		;  const _52  =  $52
    265  1100
    266  1100				   .L090		;  const _54  =  $54
    267  1100
    268  1100				   .L091		;  const _56  =  $56
    269  1100
    270  1100				   .L092		;  const _58  =  $58
    271  1100
    272  1100				   .L093		;  const _5A  =  $5A
    273  1100
    274  1100				   .L094		;  const _5C  =  $5C
    275  1100
    276  1100				   .L095		;  const _5E  =  $5E
    277  1100
    278  1100				   .L096		;  const _60  =  $60
    279  1100
    280  1100				   .L097		;  const _62  =  $62
    281  1100
    282  1100				   .L098		;  const _64  =  $64
    283  1100
    284  1100				   .L099		;  const _66  =  $66
    285  1100
    286  1100				   .L0100		;  const _68  =  $68
    287  1100
    288  1100				   .L0101		;  const _6A  =  $6A
    289  1100
    290  1100				   .L0102		;  const _6C  =  $6C
    291  1100
    292  1100				   .L0103		;  const _6E  =  $6E
    293  1100
    294  1100				   .L0104		;  const _70  =  $70
    295  1100
    296  1100				   .L0105		;  const _72  =  $72
    297  1100
    298  1100				   .L0106		;  const _74  =  $74
    299  1100
    300  1100				   .L0107		;  const _76  =  $76
    301  1100
    302  1100				   .L0108		;  const _78  =  $78
    303  1100
    304  1100				   .L0109		;  const _7A  =  $7A
    305  1100
    306  1100				   .L0110		;  const _7C  =  $7C
    307  1100
    308  1100				   .L0111		;  const _7E  =  $7E
    309  1100
    310  1100				   .L0112		;  const _80  =  $80
    311  1100
    312  1100				   .L0113		;  const _82  =  $82
    313  1100
    314  1100				   .L0114		;  const _84  =  $84
    315  1100
    316  1100				   .L0115		;  const _86  =  $86
    317  1100
    318  1100				   .L0116		;  const _88  =  $88
    319  1100
    320  1100				   .L0117		;  const _8A  =  $8A
    321  1100
    322  1100				   .L0118		;  const _8C  =  $8C
    323  1100
    324  1100				   .L0119		;  const _8E  =  $8E
    325  1100
    326  1100				   .L0120		;  const _90  =  $90
    327  1100
    328  1100				   .L0121		;  const _92  =  $92
    329  1100
    330  1100				   .L0122		;  const _94  =  $94
    331  1100
    332  1100				   .L0123		;  const _96  =  $96
    333  1100
    334  1100				   .L0124		;  const _98  =  $98
    335  1100
    336  1100				   .L0125		;  const _9A  =  $9A
    337  1100
    338  1100				   .L0126		;  const _9C  =  $9C
    339  1100
    340  1100				   .L0127		;  const _9E  =  $9E
    341  1100
    342  1100				   .L0128		;  const _A0  =  $A0
    343  1100
    344  1100				   .L0129		;  const _A2  =  $A2
    345  1100
    346  1100				   .L0130		;  const _A4  =  $A4
    347  1100
    348  1100				   .L0131		;  const _A6  =  $A6
    349  1100
    350  1100				   .L0132		;  const _A8  =  $A8
    351  1100
    352  1100				   .L0133		;  const _AA  =  $AA
    353  1100
    354  1100				   .L0134		;  const _AC  =  $AC
    355  1100
    356  1100				   .L0135		;  const _AE  =  $AE
    357  1100
    358  1100				   .L0136		;  const _B0  =  $B0
    359  1100
    360  1100				   .L0137		;  const _B2  =  $B2
    361  1100
    362  1100				   .L0138		;  const _B4  =  $B4
    363  1100
    364  1100				   .L0139		;  const _B6  =  $B6
    365  1100
    366  1100				   .L0140		;  const _B8  =  $B8
    367  1100
    368  1100				   .L0141		;  const _BA  =  $BA
    369  1100
    370  1100				   .L0142		;  const _BC  =  $BC
    371  1100
    372  1100				   .L0143		;  const _BE  =  $BE
    373  1100
    374  1100				   .L0144		;  const _C0  =  $C0
    375  1100
    376  1100				   .L0145		;  const _C2  =  $C2
    377  1100
    378  1100				   .L0146		;  const _C4  =  $C4
    379  1100
    380  1100				   .L0147		;  const _C6  =  $C6
    381  1100
    382  1100				   .L0148		;  const _C8  =  $C8
    383  1100
    384  1100				   .L0149		;  const _CA  =  $CA
    385  1100
    386  1100				   .L0150		;  const _CC  =  $CC
    387  1100
    388  1100				   .L0151		;  const _CE  =  $CE
    389  1100
    390  1100				   .L0152		;  const _D0  =  $D0
    391  1100
    392  1100				   .L0153		;  const _D2  =  $D2
    393  1100
    394  1100				   .L0154		;  const _D4  =  $D4
    395  1100
    396  1100				   .L0155		;  const _D6  =  $D6
    397  1100
    398  1100				   .L0156		;  const _D8  =  $D8
    399  1100
    400  1100				   .L0157		;  const _DA  =  $DA
    401  1100
    402  1100				   .L0158		;  const _DC  =  $DC
    403  1100
    404  1100				   .L0159		;  const _DE  =  $DE
    405  1100
    406  1100				   .L0160		;  const _E0  =  $E0
    407  1100
    408  1100				   .L0161		;  const _E2  =  $E2
    409  1100
    410  1100				   .L0162		;  const _E4  =  $E4
    411  1100
    412  1100				   .L0163		;  const _E6  =  $E6
    413  1100
    414  1100				   .L0164		;  const _E8  =  $E8
    415  1100
    416  1100				   .L0165		;  const _EA  =  $EA
    417  1100
    418  1100				   .L0166		;  const _EC  =  $EC
    419  1100
    420  1100				   .L0167		;  const _EE  =  $EE
    421  1100
    422  1100				   .L0168		;  const _F0  =  $F0
    423  1100
    424  1100				   .L0169		;  const _F2  =  $F2
    425  1100
    426  1100				   .L0170		;  const _F4  =  $F4
    427  1100
    428  1100				   .L0171		;  const _F6  =  $F6
    429  1100
    430  1100				   .L0172		;  const _F8  =  $F8
    431  1100
    432  1100				   .L0173		;  const _FA  =  $FA
    433  1100
    434  1100				   .L0174		;  const _FC  =  $FC
    435  1100
    436  1100				   .L0175		;  const _FE  =  $FE
    437  1100
    438  1100				   .
    439  1100							; 
    440  1100
    441  1100				   .
    442  1100							; 
    443  1100
    444  1100				   .
    445  1100							; 
    446  1100
    447  1100				   .
    448  1100							; 
    449  1100
    450  1100				   .
    451  1100							; 
    452  1100
    453  1100				   .
    454  1100							; 
    455  1100
    456  1100				   .
    457  1100							; 
    458  1100
    459  1100				   .
    460  1100							; 
    461  1100
    462  1100				   .
    463  1100							; 
    464  1100
    465  1100				   .
    466  1100							; 
    467  1100
    468  1100				   .
    469  1100							; 
    470  1100
    471  1100				   .
    472  1100							; 
    473  1100
    474  1100				   .
    475  1100							; 
    476  1100
    477  1100				   .
    478  1100							; 
    479  1100
    480  1100				   .
    481  1100							; 
    482  1100
    483  1100				   .
    484  1100							; 
    485  1100
    486  1100				   .
    487  1100							; 
    488  1100
    489  1100				   .
    490  1100							; 
    491  1100
    492  1100				   .
    493  1100							; 
    494  1100
    495  1100				   .
    496  1100							; 
    497  1100
    498  1100				   .
    499  1100							; 
    500  1100
    501  1100				   .
    502  1100							; 
    503  1100
    504  1100				   .
    505  1100							; 
    506  1100
    507  1100				   .
    508  1100							; 
    509  1100
    510  1100				   .
    511  1100							; 
    512  1100
    513  1100				   .
    514  1100							; 
    515  1100
    516  1100				   .
    517  1100							; 
    518  1100
    519  1100				   .
    520  1100							; 
    521  1100
    522  1100				   .
    523  1100							; 
    524  1100
    525  1100				   .
    526  1100							; 
    527  1100
    528  1100				   .
    529  1100							; 
    530  1100
    531  1100				   .
    532  1100							; 
    533  1100
    534  1100				   .
    535  1100							; 
    536  1100
    537  1100				   .
    538  1100							; 
    539  1100
    540  1100				   .
    541  1100							; 
    542  1100
    543  1100				   .
    544  1100							; 
    545  1100
    546  1100				   .
    547  1100							; 
    548  1100
    549  1100				   .
    550  1100							; 
    551  1100
    552  1100				   .
    553  1100							; 
    554  1100
    555  1100				   .
    556  1100							; 
    557  1100
    558  1100				   .
    559  1100							; 
    560  1100
    561  1100				   .
    562  1100							; 
    563  1100
    564  1100				   .
    565  1100							; 
    566  1100
    567  1100				   .
    568  1100							; 
    569  1100
    570  1100				   .
    571  1100							; 
    572  1100
    573  1100				   .
    574  1100							; 
    575  1100
    576  1100				   .
    577  1100							; 
    578  1100
    579  1100				   .
    580  1100							; 
    581  1100
    582  1100				   .
    583  1100							; 
    584  1100
    585  1100				   .
    586  1100							; 
    587  1100
    588  1100				   .
    589  1100							; 
    590  1100
    591  1100				   .
    592  1100							; 
    593  1100
    594  1100				   .
    595  1100							; 
    596  1100
    597  1100				   .
    598  1100							; 
    599  1100
    600  1100				   .
    601  1100							; 
    602  1100
    603  1100				   .
    604  1100							; 
    605  1100
    606  1100				   .
    607  1100							; 
    608  1100
    609  1100				   .
    610  1100							; 
    611  1100
    612  1100				   .
    613  1100							; 
    614  1100
    615  1100				   .
    616  1100							; 
    617  1100
    618  1100				   .
    619  1100							; 
    620  1100
    621  1100				   .
    622  1100							; 
    623  1100
    624  1100				   .
    625  1100							; 
    626  1100
    627  1100				   .
    628  1100							; 
    629  1100
    630  1100				   .
    631  1100							; 
    632  1100
    633  1100				   .
    634  1100							; 
    635  1100
    636  1100				   .
    637  1100							; 
    638  1100
    639  1100				   .
    640  1100							; 
    641  1100
    642  1100				   .
    643  1100							; 
    644  1100
    645  1100				   .
    646  1100							; 
    647  1100
    648  1100				   .
    649  1100							; 
    650  1100
    651  1100				   .
    652  1100							; 
    653  1100
    654  1100				   .
    655  1100							; 
    656  1100
    657  1100				   .
    658  1100							; 
    659  1100
    660  1100				   .
    661  1100							; 
    662  1100
    663  1100				   .
    664  1100							; 
    665  1100
    666  1100				   .
    667  1100							; 
    668  1100
    669  1100				   .
    670  1100							; 
    671  1100
    672  1100				   .
    673  1100							; 
    674  1100
    675  1100				   .
    676  1100							; 
    677  1100
    678  1100				   .
    679  1100							; 
    680  1100
    681  1100				   .
    682  1100							; 
    683  1100
    684  1100				   .
    685  1100							; 
    686  1100
    687  1100				   .
    688  1100							; 
    689  1100
    690  1100				   .
    691  1100							; 
    692  1100
    693  1100				   .
    694  1100							; 
    695  1100
    696  1100				   .
    697  1100							; 
    698  1100
    699  1100				   .
    700  1100							; 
    701  1100
    702  1100				   .
    703  1100							; 
    704  1100
    705  1100				   .
    706  1100							; 
    707  1100
    708  1100				   .
    709  1100							; 
    710  1100
    711  1100				   .
    712  1100							; 
    713  1100
    714  1100				   .
    715  1100							; 
    716  1100
    717  1100				   .
    718  1100							; 
    719  1100
    720  1100				   .
    721  1100							; 
    722  1100
    723  1100				   .
    724  1100							; 
    725  1100
    726  1100				   .
    727  1100							; 
    728  1100
    729  1100				   .
    730  1100							; 
    731  1100
    732  1100				   .
    733  1100							; 
    734  1100
    735  1100				   .
    736  1100							; 
    737  1100
    738  1100				   .
    739  1100							; 
    740  1100
    741  1100				   .
    742  1100							; 
    743  1100
    744  1100				   .
    745  1100							; 
    746  1100
    747  1100				   .
    748  1100							; 
    749  1100
    750  1100				   .
    751  1100							; 
    752  1100
    753  1100				   .
    754  1100							; 
    755  1100
    756  1100				   .
    757  1100							; 
    758  1100
    759  1100				   .
    760  1100							; 
    761  1100
    762  1100				   .
    763  1100							; 
    764  1100
    765  1100				   .
    766  1100							; 
    767  1100
    768  1100				   .
    769  1100							; 
    770  1100
    771  1100				   .
    772  1100							; 
    773  1100
    774  1100				   .
    775  1100							; 
    776  1100
    777  1100				   .
    778  1100							; 
    779  1100
    780  1100				   .
    781  1100							; 
    782  1100
    783  1100				   .
    784  1100							; 
    785  1100
    786  1100				   .
    787  1100							; 
    788  1100
    789  1100				   .
    790  1100							; 
    791  1100
    792  1100				   .
    793  1100							; 
    794  1100
    795  1100				   .
    796  1100							; 
    797  1100
    798  1100				   .
    799  1100							; 
    800  1100
    801  1100				   .
    802  1100							; 
    803  1100
    804  1100				   .
    805  1100							; 
    806  1100
    807  1100				   .
    808  1100							; 
    809  1100
    810  1100				   .
    811  1100							; 
    812  1100
    813  1100				   .
    814  1100							; 
    815  1100
    816  1100				   .
    817  1100							; 
    818  1100
    819  1100				   .
    820  1100							; 
    821  1100
    822  1100				   .
    823  1100							; 
    824  1100
    825  1100				   .
    826  1100							; 
    827  1100
    828  1100				   .
    829  1100							; 
    830  1100
    831  1100				   .
    832  1100							; 
    833  1100
    834  1100				   .
    835  1100							; 
    836  1100
    837  1100				   .
    838  1100							; 
    839  1100
    840  1100				   .
    841  1100							; 
    842  1100
    843  1100				   .
    844  1100							; 
    845  1100
    846  1100				   .
    847  1100							; 
    848  1100
    849  1100				   .
    850  1100							; 
    851  1100
    852  1100				   .
    853  1100							; 
    854  1100
    855  1100				   .
    856  1100							; 
    857  1100
    858  1100				   .
    859  1100							; 
    860  1100
    861  1100				   .
    862  1100							; 
    863  1100
    864  1100				   .
    865  1100							; 
    866  1100
    867  1100				   .
    868  1100							; 
    869  1100
    870  1100				   .
    871  1100							; 
    872  1100
    873  1100				   .
    874  1100							; 
    875  1100
    876  1100				   .L0176		;  dim _sc1  =  score
    877  1100
    878  1100				   .L0177		;  dim _sc2  =  score + 1
    879  1100
    880  1100				   .L0178		;  dim _sc3  =  score + 2
    881  1100
    882  1100				   .
    883  1100							; 
    884  1100
    885  1100				   .
    886  1100							; 
    887  1100
    888  1100				   .L0179		;  dim delay_counter  =  a
    889  1100
    890  1100				   .L0180		;  dim frame_counter  =  b
    891  1100
    892  1100				   .
    893  1100							; 
    894  1100
    895  1100				   .L0181		;  dim _BitOp_Ball_Shot_Dir  =  c
    896  1100
    897  1100				   .L0182		;  dim _Bit0_Ball_Shot_Dir_Left1  =  c
    898  1100
    899  1100				   .L0183		;  dim _Bit1_Ball_Shot_Dir_Left2  =  c
    900  1100
    901  1100				   .L0184		;  dim _Bit2_Ball_Shot_Dir_Right1  =  c
    902  1100
    903  1100				   .L0185		;  dim _Bit3_Ball_Shot_Dir_Right2  =  c
    904  1100
    905  1100				   .
    906  1100							; 
    907  1100
    908  1100				   .L0186		;  dim _BitOp_M0_Dir  =  d
    909  1100
    910  1100				   .L0187		;  dim _Bit0_M0_Dir_Up  =  d
    911  1100
    912  1100				   .L0188		;  dim _Bit1_M0_Dir_Down  =  d
    913  1100
    914  1100				   .L0189		;  dim _Bit2_M0_Dir_Left  =  d
    915  1100
    916  1100				   .L0190		;  dim _Bit3_M0_Dir_Right  =  d
    917  1100
    918  1100				   .
    919  1100							; 
    920  1100
    921  1100				   .L0191		;  dim _BitOp_P1_Dir  =  e
    922  1100
    923  1100				   .L0192		;  dim _Bit0_P1_Dir_Up  =  e
    924  1100
    925  1100				   .L0193		;  dim _Bit1_P1_Dir_Down  =  e
    926  1100
    927  1100				   .L0194		;  dim _Bit2_P1_Dir_Left  =  e
    928  1100
    929  1100				   .L0195		;  dim _Bit3_P1_Dir_Right  =  e
    930  1100
    931  1100				   .
    932  1100							; 
    933  1100
    934  1100				   .
    935  1100							; 
    936  1100
    937  1100				   .L0196		;  dim _Ch0_Sound  =  f
    938  1100
    939  1100				   .L0197		;  dim _Ch0_Duration  =  g
    940  1100
    941  1100				   .L0198		;  dim _Ch0_Counter  =  h
    942  1100
    943  1100				   .
    944  1100							; 
    945  1100
    946  1100				   .L0199		;  dim extra_wall_move_x  =  i
    947  1100
    948  1100				   .L0200		;  dim roommate_move_x  =  j
    949  1100
    950  1100				   .L0201		;  dim roommate_type  =  k
    951  1100
    952  1100				   .
    953  1100							; 
    954  1100
    955  1100				   .L0202		;  dim _BitOp_Flip_positions  =  l
    956  1100
    957  1100				   .L0203		;  dim _Bit0_New_Room_P1_Flip	=  l
    958  1100
    959  1100				   .L0204		;  dim _Bit1_Safe_Point_P1_Flip  =  l
    960  1100
    961  1100				   .L0205		;  dim Safe_Point_P1_x  =  m
    962  1100
    963  1100				   .L0206		;  dim Safe_Point_P1_y  =  n
    964  1100
    965  1100				   .
    966  1100							; 
    967  1100
    968  1100				   .L0207		;  dim _Ch1_Duration  =  o
    969  1100
    970  1100				   .
    971  1100							; 
    972  1100
    973  1100				   .
    974  1100							; 
    975  1100
    976  1100				   .L0208		;  rem 16 bit velocity
    977  1100
    978  1100				   .L0209		;  dim Bally_velocity	=  p.q
    979  1100
    980  1100				   .L0210		;  rem 16 bit ball y position
    981  1100
    982  1100				   .L0211		;  dim Bally_position	=  ball_shoot_y.r
    983  1100
    984  1100				   .
    985  1100							; 
    986  1100
    987  1100				   .L0212		;  rem 16 bit velocity
    988  1100
    989  1100				   .L0213		;  dim M0y_velocity  =  s.t
    990  1100
    991  1100				   .L0214		;  rem 16 bit missile0 y position
    992  1100
    993  1100				   .L0215		;  dim M0y_position  =  missile0y.u
    994  1100
    995  1100				   .
    996  1100							; 
    997  1100
    998  1100				   .L0216		;  rem 16 bit velocity
    999  1100
   1000  1100				   .L0217		;  dim P1y_velocity  =  v.w
   1001  1100
   1002  1100				   .L0218		;  rem 16 bit player1 y position
   1003  1100
   1004  1100				   .L0219		;  dim P1y_position  =  player1y.x
   1005  1100
   1006  1100				   .
   1007  1100							; 
   1008  1100
   1009  1100				   .L0220		;  rem Various game states
   1010  1100
   1011  1100				   .L0221		;  dim _Bit_Game_State  =  y
   1012  1100
   1013  1100				   .L0222		;  dim _Bit0_Rotor_Sound_On  =  y
   1014  1100
   1015  1100				   .
   1016  1100							; 
   1017  1100
   1018  1100				   .L0223		;  dim _Bit2_roommate_Dir  =  y
   1019  1100
   1020  1100				   .L0224		;  dim _Bit3_Safe_Point_reached  =  y
   1021  1100
   1022  1100				   .L0225		;  dim _Bit4_Wall_Dir	=  y
   1023  1100
   1024  1100				   .L0226		;  dim _Bit5_Request_Pending  =  y
   1025  1100
   1026  1100				   .L0227		;  dim _Bit6_Flip_P1  =  y
   1027  1100
   1028  1100				   .L0228		;  dim _Bit7_FireB_Restrainer	=  y
   1029  1100
   1030  1100				   .
   1031  1100							; 
   1032  1100
   1033  1100				   .L0229		;  dim rand16	=  z
   1034  1100
   1035  1100				   .
   1036  1100							; 
   1037  1100
   1038  1100				   .
   1039  1100							; 
   1040  1100
   1041  1100				   .L0230		;  dim new_room_player1y  =  var0
   1042  1100
   1043  1100				   .L0231		;  dim new_room_player1x  =  var1
   1044  1100
   1045  1100				   .L0232		;  dim gamenumber  =  var2
   1046  1100
   1047  1100				   .
   1048  1100							; 
   1049  1100
   1050  1100				   .L0233		;  dim max_pub_level_bcd1  =  var3
   1051  1100
   1052  1100				   .L0234		;  dim max_pub_level_bcd2  =  var4
   1053  1100
   1054  1100				   .L0235		;  dim max_pub_level_bcd3  =  var5
   1055  1100
   1056  1100				   .L0236		;  dim max_priv_level_bcd1  =	var6
   1057  1100
   1058  1100				   .L0237		;  dim max_priv_level_bcd2  =	var7
   1059  1100
   1060  1100				   .L0238		;  dim max_priv_level_bcd3  =	var8
   1061  1100
   1062  1100				   .
   1063  1100							; 
   1064  1100
   1065  1100				   .L0239		;  dim has_private_levels  =  var9
   1066  1100
   1067  1100				   .L0240		;  dim ball_shoot_x  =  var10
   1068  1100
   1069  1100				   .L0241		;  dim ball_shoot_y  =  var11
   1070  1100
   1071  1100				   .
   1072  1100							; 
   1073  1100
   1074  1100				   .L0242		;  dim men_to_rescue  =  var12
   1075  1100
   1076  1100				   .L0243		;  dim TextIndex  =  var12
   1077  1100
   1078  1100				   .
   1079  1100							; 
   1080  1100
   1081  1100				   .L0244		;  dim bonus_bcd_counter  =  var13
   1082  1100
   1083  1100				   .
   1084  1100							; 
   1085  1100
   1086  1100				   .
   1087  1100							; 
   1088  1100
   1089  1100				   .
   1090  1100							; 
   1091  1100
   1092  1100				   .L0245		;  dim next_shoot_rand  =  var16
   1093  1100
   1094  1100				   .
   1095  1100							; 
   1096  1100
   1097  1100				   .L0246		;  dim Game_Status  =	var47
   1098  1100
   1099  1100				   .
   1100  1100							; 
   1101  1100
   1102  1100				   .
   1103  1100							; 
   1104  1100
   1105  1100				   .
   1106  1100							; 
   1107  1100
   1108  1100				   .
   1109  1100							; 
   1110  1100
   1111  1100				   .
   1112  1100							; 
   1113  1100
   1114  1100				   .
   1115  1100							; 
   1116  1100
   1117  1100				   .
   1118  1100							; 
   1119  1100
   1120  1100				   .
   1121  1100							; 
   1122  1100
   1123  1100				   .
   1124  1100							; 
   1125  1100
   1126  1100				   .
   1127  1100							; 
   1128  1100
   1129  1100				   .
   1130  1100							; 
   1131  1100
   1132  1100				   .L0247		;  dim w_room_definition_start  =  w093
   1133  1100
   1134  1100				   .
   1135  1100							; 
   1136  1100
   1137  1100				   .L0248		;  dim r_level_bonus_bcd_points  =  r093
   1138  1100
   1139  1100				   .L0249		;  dim w_level_bonus_bcd_points  =  w093
   1140  1100
   1141  1100				   .L0250		;  dim r_men_to_rescue_in_this_level =  r094
   1142  1100
   1143  1100				   .L0251		;  dim w_men_to_rescue_in_this_level =  w094
   1144  1100
   1145  1100				   .L0252		;  dim r_BitOp_room_type  =  r095
   1146  1100
   1147  1100				   .L0253		;  dim w_BitOp_room_type  =  w095
   1148  1100
   1149  1100				   .L0254		;  dim r_room_color_top  =  r096
   1150  1100
   1151  1100				   .L0255		;  dim w_room_color_top  =  w096
   1152  1100
   1153  1100				   .L0256		;  dim r_room_color_middle  =	r097
   1154  1100
   1155  1100				   .L0257		;  dim w_room_color_middle  =	w097
   1156  1100
   1157  1100				   .L0258		;  dim r_room_color_waste1  =	r098
   1158  1100
   1159  1100				   .L0259		;  dim w_room_color_waste1  =	w098
   1160  1100
   1161  1100				   .L0260		;  dim r_room_color_waste2  =	r099
   1162  1100
   1163  1100				   .L0261		;  dim w_room_color_waste2  =	w099
   1164  1100
   1165  1100				   .L0262		;  dim r_room_color_waste3  =	r100
   1166  1100
   1167  1100				   .L0263		;  dim w_room_color_waste4  =	w100
   1168  1100
   1169  1100				   .L0264		;  dim r_room_color_bottom  =	r101
   1170  1100
   1171  1100				   .L0265		;  dim w_room_color_bottom  =	w101
   1172  1100
   1173  1100				   .L0266		;  dim r_roommate_type_and_range  =  r102
   1174  1100
   1175  1100				   .L0267		;  dim w_roommate_type_and_range  =  w102
   1176  1100
   1177  1100				   .L0268		;  dim r_roommate_startpos_x  =  r103
   1178  1100
   1179  1100				   .L0269		;  dim w_roommate_startpos_x  =  w103
   1180  1100
   1181  1100				   .L0270		;  dim r_roommate_startpos_y  =  r104
   1182  1100
   1183  1100				   .L0271		;  dim w_roommate_startpos_y  =  w104
   1184  1100
   1185  1100				   .L0272		;  dim r_extra_wall_type_and_range  =	r105
   1186  1100
   1187  1100				   .L0273		;  dim w_extra_wall_type_and_range  =	w105
   1188  1100
   1189  1100				   .L0274		;  dim r_extra_wall_width  =  r106
   1190  1100
   1191  1100				   .L0275		;  dim w_extra_wall_width  =  w106
   1192  1100
   1193  1100				   .L0276		;  dim r_extra_wall_height  =	r107
   1194  1100
   1195  1100				   .L0277		;  dim w_extra_wall_height  =	w107
   1196  1100
   1197  1100				   .L0278		;  dim r_extra_wall_startpos_1_x  =  r108
   1198  1100
   1199  1100				   .L0279		;  dim w_extra_wall_startpos_1_x  =  w108
   1200  1100
   1201  1100				   .L0280		;  dim r_extra_wall_startpos_1_y  =  r109
   1202  1100
   1203  1100				   .L0281		;  dim w_extra_wall_startpos_1_y  =  w109
   1204  1100
   1205  1100				   .L0282		;  dim r_extra_wall_startpos_2_x  =  r110
   1206  1100
   1207  1100				   .L0283		;  dim w_extra_wall_startpos_2_x  =  w110
   1208  1100
   1209  1100				   .L0284		;  dim r_extra_wall_startpos_2_y  =  r111
   1210  1100
   1211  1100				   .L0285		;  dim w_extra_wall_startpos_2_y  =  w111
   1212  1100
   1213  1100				   .
   1214  1100							; 
   1215  1100
   1216  1100				   .L0286		;  dim r_Bit0_room_type_top  =  r_BitOp_room_type
   1217  1100
   1218  1100				   .L0287		;  dim w_Bit0_room_type_top  =  w_BitOp_room_type
   1219  1100
   1220  1100				   .
   1221  1100							; 
   1222  1100
   1223  1100				   .
   1224  1100							; 
   1225  1100
   1226  1100				   .
   1227  1100							; 
   1228  1100
   1229  1100				   .
   1230  1100							; 
   1231  1100
   1232  1100				   .
   1233  1100							; 
   1234  1100
   1235  1100				   ._Start
   1236  1100							; _Start
   1237  1100
   1238  1100				   .L0288		;  asm
   1239  1100
   1240  1100		       a9 00		      lda	#0
   1241  1102
   1242  1102		       a2 4a		      ldx	#74
   1243  1104
   1244  1104				   .clear_ram
   1245  1104
   1246  1104		       ca		      dex
   1247  1105
   1248  1105		       95 a4		      sta	var0,x
   1249  1107
   1250  1107		       d0 fb		      bne	.clear_ram
   1251  1109
   1252  1109				   .
   1253  1109							; 
   1254  1109
   1255  1109				   .L0289		;  WriteSendBuffer  =	req_load_menu  :  _Bit5_Request_Pending{5}  =  1  :  COLUP0  =	_1C  :	scorecolor  =  _0E
   1256  1109
   1257  1109		       a9 09		      LDA	#req_load_menu
   1258  110b		       8d f1 1f 	      STA	WriteSendBuffer
   1259  110e		       a5 ec		      LDA	_Bit5_Request_Pending
   1260  1110		       09 20		      ORA	#32
   1261  1112		       85 ec		      STA	_Bit5_Request_Pending
   1262  1114		       a9 1c		      LDA	#_1C
   1263  1116		       85 06		      STA	COLUP0
   1264  1118		       a9 0e		      LDA	#_0E
   1265  111a		       85 a3		      STA	scorecolor
   1266  111c				   .L0290		;  score  =  1
   1267  111c
   1268  111c		       a9 01		      LDA	#$01
   1269  111e		       85 95		      STA	score+2
   1270  1120		       a9 00		      LDA	#$00
   1271  1122		       85 94		      STA	score+1
   1272  1124		       a9 00		      LDA	#$00
   1273  1126		       85 93		      STA	score
   1274  1128				   .L0291		;  gamenumber	=  1  :  missile0height  =  1  :  _Ch1_Duration  =  1
   1275  1128
   1276  1128		       a9 01		      LDA	#1
   1277  112a		       85 a6		      STA	gamenumber
   1278  112c		       85 90		      STA	missile0height
   1279  112e		       85 e2		      STA	_Ch1_Duration
   1280  1130				   .L0292		;  _Bit7_FireB_Restrainer{7}  =  1
   1281  1130
   1282  1130		       a5 ec		      LDA	_Bit7_FireB_Restrainer
   1283  1132		       09 80		      ORA	#128
   1284  1134		       85 ec		      STA	_Bit7_FireB_Restrainer
   1285  1136				   .L0293		;  new_room_player1y  =  player_min_y	:  Safe_Point_P1_y  =  player_min_y
   1286  1136
   1287  1136		       a9 02		      LDA	#player_min_y
   1288  1138		       85 a4		      STA	new_room_player1y
   1289  113a		       85 e1		      STA	Safe_Point_P1_y
   1290  113c				   .L0294		;  new_room_player1x  =  30  :  player1x  =  30  :  Safe_Point_P1_x  =  30
   1291  113c
   1292  113c		       a9 1e		      LDA	#30
   1293  113e		       85 a5		      STA	new_room_player1x
   1294  1140		       85 81		      STA	player1x
   1295  1142		       85 e0		      STA	Safe_Point_P1_x
   1296  1144				   .L0295		;  AUDF1  =  31
   1297  1144
   1298  1144		       a9 1f		      LDA	#31
   1299  1146		       85 18		      STA	AUDF1
   1300  1148				   .L0296		;  AUDV0  =  0  :  AUDV1  =  0  :  AUDC1  =  0  :  frame_counter  =  0  :  player0x  =  0  :  bally  =  0  :  player1y  =  0
   1301  1148
   1302  1148		       a9 00		      LDA	#0
   1303  114a		       85 19		      STA	AUDV0
   1304  114c		       85 1a		      STA	AUDV1
   1305  114e		       85 16		      STA	AUDC1
   1306  1150		       85 d5		      STA	frame_counter
   1307  1152		       85 80		      STA	player0x
   1308  1154		       85 89		      STA	bally
   1309  1156		       85 86		      STA	player1y
   1310  1158				   .L0297		;  missile0x  =  200  :  missile0y  =	200  :	w_extra_wall_startpos_1_x  =  200  :  w_roommate_startpos_y  =	200  :	player0y  =  200
   1311  1158
   1312  1158		       a9 c8		      LDA	#200
   1313  115a		       85 82		      STA	missile0x
   1314  115c		       85 91		      STA	missile0y
   1315  115e		       8d 6c f0 	      STA	w_extra_wall_startpos_1_x
   1316  1161		       8d 68 f0 	      STA	w_roommate_startpos_y
   1317  1164		       85 85		      STA	player0y
   1318  1166				   .
   1319  1166							; 
   1320  1166
   1321  1166				   .
   1322  1166							; 
   1323  1166
   1324  1166				   .
   1325  1166							; 
   1326  1166
   1327  1166				   .
   1328  1166							; 
   1329  1166
   1330  1166				   .
   1331  1166							; 
   1332  1166
   1333  1166				   .L0298		;  pfclear
   1334  1166
   1335  1166		       a9 00		      LDA	#0
   1336  1168		       85 ee		      sta	temp7
   1337  116a		       a9 91		      lda	#>(ret_point1-1)
   1338  116c		       48		      pha
   1339  116d		       a9 7f		      lda	#<(ret_point1-1)
   1340  116f		       48		      pha
   1341  1170		       a9 f2		      lda	#>(pfclear-1)
   1342  1172		       48		      pha
   1343  1173		       a9 ee		      lda	#<(pfclear-1)
   1344  1175		       48		      pha
   1345  1176		       a5 ee		      lda	temp7
   1346  1178		       48		      pha
   1347  1179		       8a		      txa
   1348  117a		       48		      pha
   1349  117b		       a2 04		      ldx	#4
   1350  117d		       4c e8 ff 	      jmp	BS_jsr
   1351  1180				   ret_point1
   1352  1180				   .L0299		;  player1color:
   1353  1180
   1354  1180		       a2 14		      LDX	#<playercolorL0299_1
   1355  1182		       86 87		      STX	player1color
   1356  1184		       a9 fc		      LDA	#>playercolorL0299_1
   1357  1186		       85 88		      STA	player1color+1
   1358  1188				   .
   1359  1188							; 
   1360  1188
   1361  1188				   .L0300		;  goto _titlescreen_menu bank2
   1362  1188
   1363  1188		       85 ee		      sta	temp7
   1364  118a		       a9 b0		      lda	#>(._titlescreen_menu-1)
   1365  118c		       48		      pha
   1366  118d		       a9 ff		      lda	#<(._titlescreen_menu-1)
   1367  118f		       48		      pha
   1368  1190		       a5 ee		      lda	temp7
   1369  1192		       48		      pha
   1370  1193		       8a		      txa
   1371  1194		       48		      pha
   1372  1195		       a2 02		      ldx	#2
   1373  1197		       4c e8 ff 	      jmp	BS_jsr
   1374  119a				   .
   1375  119a							; 
   1376  119a
   1377  119a				   .
   1378  119a							; 
   1379  119a
   1380  119a				   .
   1381  119a							; 
   1382  119a
   1383  119a				   .
   1384  119a							; 
   1385  119a
   1386  119a				   .__Main_Loop
   1387  119a							; __Main_Loop
   1388  119a
   1389  119a				   .L0301		;  if switchreset then goto _Reset_To_Start
   1390  119a
   1391  119a		       a9 01		      lda	#1
   1392  119c		       2c 82 02 	      bit	SWCHB
   1393  119f		       d0 03		      BNE	.skipL0301
   1394  11a1				   .condpart0
   1395  11a1		       4c 19 9d 	      jmp	._Reset_To_Start
   1396  11a4
   1397  11a4				   .skipL0301
   1398  11a4				   .
   1399  11a4							; 
   1400  11a4
   1401  11a4				   .L0302		;  COLUPF  =  r_room_color_top
   1402  11a4
   1403  11a4		       ad e0 f0 	      LDA	r_room_color_top
   1404  11a7		       85 08		      STA	COLUPF
   1405  11a9				   .L0303		;  NUSIZ1  =  $05
   1406  11a9
   1407  11a9		       a9 05		      LDA	#$05
   1408  11ab		       85 05		      STA	NUSIZ1
   1409  11ad				   .L0304		;  NUSIZ0  =  $10
   1410  11ad
   1411  11ad		       a9 10		      LDA	#$10
   1412  11af		       85 04		      STA	NUSIZ0
   1413  11b1				   .L0305		;  COLUBK  =  _00
   1414  11b1
   1415  11b1		       a9 00		      LDA	#_00
   1416  11b3		       85 09		      STA	COLUBK
   1417  11b5				   .L0306		;  TextColor  =  $0E
   1418  11b5
   1419  11b5		       a9 0e		      LDA	#$0E
   1420  11b7		       85 f5		      STA	TextColor
   1421  11b9				   .
   1422  11b9							; 
   1423  11b9
   1424  11b9				   .L0307		;  if frame_counter{2} then player1: 
   1425  11b9
   1426  11b9		       a5 d5		      LDA	frame_counter
   1427  11bb		       29 04		      AND	#4
   1428  11bd		       f0 0c		      BEQ	.skipL0307
   1429  11bf				   .condpart1
   1430  11bf		       a2 1c		      LDX	#<player1then_1
   1431  11c1		       86 8c		      STX	player1pointerlo
   1432  11c3		       a9 fc		      LDA	#>player1then_1
   1433  11c5		       85 8d		      STA	player1pointerhi
   1434  11c7		       a9 07		      LDA	#7
   1435  11c9		       85 8f		      STA	player1height
   1436  11cb				   .skipL0307
   1437  11cb				   .L0308		;  if ! frame_counter{2} then player1:
   1438  11cb
   1439  11cb		       a5 d5		      LDA	frame_counter
   1440  11cd		       29 04		      AND	#4
   1441  11cf		       d0 0c		      BNE	.skipL0308
   1442  11d1				   .condpart2
   1443  11d1		       a2 24		      LDX	#<player2then_1
   1444  11d3		       86 8c		      STX	player1pointerlo
   1445  11d5		       a9 fc		      LDA	#>player2then_1
   1446  11d7		       85 8d		      STA	player1pointerhi
   1447  11d9		       a9 07		      LDA	#7
   1448  11db		       85 8f		      STA	player1height
   1449  11dd				   .skipL0308
   1450  11dd				   .
   1451  11dd							; 
   1452  11dd
   1453  11dd				   .L0309		;  on roommate_type goto _roommate_Enemy_def _roommate_Air_Missile_def _roommate_Fuel_def _roommate_Soldier_def
   1454  11dd
   1455  11dd		       a6 de		      LDX	roommate_type
   1456  11df		       bd e8 91 	      LDA	.L0309jumptablehi,x
   1457  11e2		       48		      PHA
   1458  11e3		       bd ec 91 	      LDA	.L0309jumptablelo,x
   1459  11e6		       48		      PHA
   1460  11e7		       60		      RTS
   1461  11e8				   .L0309jumptablehi
   1462  11e8		       91		      .byte.b	>(._roommate_Enemy_def-1)
   1463  11e9		       92		      .byte.b	>(._roommate_Air_Missile_def-1)
   1464  11ea		       92		      .byte.b	>(._roommate_Fuel_def-1)
   1465  11eb		       92		      .byte.b	>(._roommate_Soldier_def-1)
   1466  11ec				   .L0309jumptablelo
   1467  11ec		       ef		      .byte.b	<(._roommate_Enemy_def-1)
   1468  11ed		       16		      .byte.b	<(._roommate_Air_Missile_def-1)
   1469  11ee		       25		      .byte.b	<(._roommate_Fuel_def-1)
   1470  11ef		       34		      .byte.b	<(._roommate_Soldier_def-1)
   1471  11f0				   .
   1472  11f0							; 
   1473  11f0
   1474  11f0				   ._roommate_Enemy_def
   1475  11f0							; _roommate_Enemy_def
   1476  11f0
   1477  11f0				   .L0310		;  if frame_counter{2} then player0: 
   1478  11f0
   1479  11f0		       a5 d5		      LDA	frame_counter
   1480  11f2		       29 04		      AND	#4
   1481  11f4		       f0 0c		      BEQ	.skipL0310
   1482  11f6				   .condpart3
   1483  11f6		       a2 2c		      LDX	#<player3then_0
   1484  11f8		       86 8a		      STX	player0pointerlo
   1485  11fa		       a9 fc		      LDA	#>player3then_0
   1486  11fc		       85 8b		      STA	player0pointerhi
   1487  11fe		       a9 06		      LDA	#6
   1488  1200		       85 8e		      STA	player0height
   1489  1202				   .skipL0310
   1490  1202				   .L0311		;  if !frame_counter{2} then player0: 
   1491  1202
   1492  1202		       a5 d5		      LDA	frame_counter
   1493  1204		       29 04		      AND	#4
   1494  1206		       d0 0c		      BNE	.skipL0311
   1495  1208				   .condpart4
   1496  1208		       a2 33		      LDX	#<player4then_0
   1497  120a		       86 8a		      STX	player0pointerlo
   1498  120c		       a9 fc		      LDA	#>player4then_0
   1499  120e		       85 8b		      STA	player0pointerhi
   1500  1210		       a9 06		      LDA	#6
   1501  1212		       85 8e		      STA	player0height
   1502  1214				   .skipL0311
   1503  1214				   .L0312		;  goto _roommate_End_def
   1504  1214
   1505  1214		       4c 59 92 	      jmp	._roommate_End_def
   1506  1217
   1507  1217				   .
   1508  1217							; 
   1509  1217
   1510  1217				   ._roommate_Air_Missile_def
   1511  1217							; _roommate_Air_Missile_def
   1512  1217
   1513  1217				   .L0313		;  player0: 
   1514  1217
   1515  1217		       a2 3a		      LDX	#<playerL0313_0
   1516  1219		       86 8a		      STX	player0pointerlo
   1517  121b		       a9 fc		      LDA	#>playerL0313_0
   1518  121d		       85 8b		      STA	player0pointerhi
   1519  121f		       a9 0b		      LDA	#11
   1520  1221		       85 8e		      STA	player0height
   1521  1223				   .L0314		;  goto _roommate_End_def
   1522  1223
   1523  1223		       4c 59 92 	      jmp	._roommate_End_def
   1524  1226
   1525  1226				   .
   1526  1226							; 
   1527  1226
   1528  1226				   ._roommate_Fuel_def
   1529  1226							; _roommate_Fuel_def
   1530  1226
   1531  1226				   .L0315		;  player0: 
   1532  1226
   1533  1226		       a2 46		      LDX	#<playerL0315_0
   1534  1228		       86 8a		      STX	player0pointerlo
   1535  122a		       a9 fc		      LDA	#>playerL0315_0
   1536  122c		       85 8b		      STA	player0pointerhi
   1537  122e		       a9 18		      LDA	#24
   1538  1230		       85 8e		      STA	player0height
   1539  1232				   .L0316		;  goto _roommate_End_def
   1540  1232
   1541  1232		       4c 59 92 	      jmp	._roommate_End_def
   1542  1235
   1543  1235				   .
   1544  1235							; 
   1545  1235
   1546  1235				   ._roommate_Soldier_def
   1547  1235							; _roommate_Soldier_def
   1548  1235
   1549  1235				   .L0317		;  if frame_counter{2} then player0: 
   1550  1235
   1551  1235		       a5 d5		      LDA	frame_counter
   1552  1237		       29 04		      AND	#4
   1553  1239		       f0 0c		      BEQ	.skipL0317
   1554  123b				   .condpart5
   1555  123b		       a2 5f		      LDX	#<player5then_0
   1556  123d		       86 8a		      STX	player0pointerlo
   1557  123f		       a9 fc		      LDA	#>player5then_0
   1558  1241		       85 8b		      STA	player0pointerhi
   1559  1243		       a9 03		      LDA	#3
   1560  1245		       85 8e		      STA	player0height
   1561  1247				   .skipL0317
   1562  1247				   .L0318		;  if !frame_counter{2} then player0: 
   1563  1247
   1564  1247		       a5 d5		      LDA	frame_counter
   1565  1249		       29 04		      AND	#4
   1566  124b		       d0 0c		      BNE	.skipL0318
   1567  124d				   .condpart6
   1568  124d		       a2 63		      LDX	#<player6then_0
   1569  124f		       86 8a		      STX	player0pointerlo
   1570  1251		       a9 fc		      LDA	#>player6then_0
   1571  1253		       85 8b		      STA	player0pointerhi
   1572  1255		       a9 03		      LDA	#3
   1573  1257		       85 8e		      STA	player0height
   1574  1259				   .skipL0318
   1575  1259				   ._roommate_End_def
   1576  1259							; _roommate_End_def
   1577  1259
   1578  1259				   .
   1579  1259							; 
   1580  1259
   1581  1259				   .
   1582  1259							; 
   1583  1259
   1584  1259				   .L0319		;  if !frame_counter{4} then _Skip_Wall_Movement
   1585  1259
   1586  1259		       a5 d5		      LDA	frame_counter
   1587  125b		       29 10		      AND	#16
   1588  125d					      if	((* - ._Skip_Wall_Movement) < 127) && ((* - ._Skip_Wall_Movement) > -128)
   1589  125d		       f0 35		      BEQ	._Skip_Wall_Movement
   1590  125f				  -	      else
   1591  125f				  -	      bne	.0skip_Skip_Wall_Movement
   1592  125f				  -	      jmp	._Skip_Wall_Movement
   1593  125f				  -.0skip_Skip_Wall_Movement
   1594  125f					      endif
   1595  125f				   .L0320		;  if r_extra_wall_type_and_range{1}  ||  r_extra_wall_type_and_range	<  2 then _Finish_Interior_Movement
   1596  125f
   1597  125f		       ad e9 f0 	      LDA	r_extra_wall_type_and_range
   1598  1262		       29 02		      AND	#2
   1599  1264					      if	((* - ._Finish_Interior_Movement) < 127) && ((* - ._Finish_Interior_Movement) > -128)
   1600  1264		       d0 59		      BNE	._Finish_Interior_Movement
   1601  1266				  -	      else
   1602  1266				  -	      beq	.1skip_Finish_Interior_Movement
   1603  1266				  -	      jmp	._Finish_Interior_Movement
   1604  1266				  -.1skip_Finish_Interior_Movement
   1605  1266					      endif
   1606  1266		       ad e9 f0 	      LDA	r_extra_wall_type_and_range
   1607  1269		       c9 02		      CMP	#2
   1608  126b					      if	((* - ._Finish_Interior_Movement) < 127) && ((* - ._Finish_Interior_Movement) > -128)
   1609  126b		       90 52		      bcc	._Finish_Interior_Movement
   1610  126d				  -	      else
   1611  126d				  -	      bcs	.2skip_Finish_Interior_Movement
   1612  126d				  -	      jmp	._Finish_Interior_Movement
   1613  126d				  -.2skip_Finish_Interior_Movement
   1614  126d					      endif
   1615  126d				   .L0321		;  if _Bit4_Wall_Dir{4} then extra_wall_move_x  =  extra_wall_move_x  -  1 else extra_wall_move_x  =  extra_wall_move_x  +  1
   1616  126d
   1617  126d		       a5 ec		      LDA	_Bit4_Wall_Dir
   1618  126f		       29 10		      AND	#16
   1619  1271		       f0 05		      BEQ	.skipL0321
   1620  1273				   .condpart7
   1621  1273		       c6 dc		      DEC	extra_wall_move_x
   1622  1275		       4c 7a 92 	      jmp	.skipelse0
   1623  1278				   .skipL0321
   1624  1278		       e6 dc		      INC	extra_wall_move_x
   1625  127a				   .skipelse0
   1626  127a				   .L0322		;  if extra_wall_move_x  =  r_extra_wall_type_and_range then _Bit4_Wall_Dir{4}  =  1
   1627  127a
   1628  127a		       a5 dc		      LDA	extra_wall_move_x
   1629  127c		       cd e9 f0 	      CMP	r_extra_wall_type_and_range
   1630  127f		       d0 06		      BNE	.skipL0322
   1631  1281				   .condpart8
   1632  1281		       a5 ec		      LDA	_Bit4_Wall_Dir
   1633  1283		       09 10		      ORA	#16
   1634  1285		       85 ec		      STA	_Bit4_Wall_Dir
   1635  1287				   .skipL0322
   1636  1287				   .L0323		;  if !extra_wall_move_x then _Bit4_Wall_Dir{4}  =  0
   1637  1287
   1638  1287		       a5 dc		      LDA	extra_wall_move_x
   1639  1289		       d0 06		      BNE	.skipL0323
   1640  128b				   .condpart9
   1641  128b		       a5 ec		      LDA	_Bit4_Wall_Dir
   1642  128d		       29 ef		      AND	#239
   1643  128f		       85 ec		      STA	_Bit4_Wall_Dir
   1644  1291				   .skipL0323
   1645  1291				   .L0324		;  goto _Finish_Interior_Movement
   1646  1291
   1647  1291		       4c bf 92 	      jmp	._Finish_Interior_Movement
   1648  1294
   1649  1294				   ._Skip_Wall_Movement
   1650  1294							; _Skip_Wall_Movement
   1651  1294
   1652  1294				   .
   1653  1294							; 
   1654  1294
   1655  1294				   .L0325		;  if r_roommate_type_and_range  <  4 then _Finish_Interior_Movement
   1656  1294
   1657  1294		       ad e6 f0 	      LDA	r_roommate_type_and_range
   1658  1297		       c9 04		      CMP	#4
   1659  1299					      if	((* - ._Finish_Interior_Movement) < 127) && ((* - ._Finish_Interior_Movement) > -128)
   1660  1299		       90 24		      bcc	._Finish_Interior_Movement
   1661  129b				  -	      else
   1662  129b				  -	      bcs	.3skip_Finish_Interior_Movement
   1663  129b				  -	      jmp	._Finish_Interior_Movement
   1664  129b				  -.3skip_Finish_Interior_Movement
   1665  129b					      endif
   1666  129b				   .L0326		;  if _Bit2_roommate_Dir{2} then roommate_move_x  =  roommate_move_x  -  1 else roommate_move_x  =  roommate_move_x  +  1
   1667  129b
   1668  129b		       a5 ec		      LDA	_Bit2_roommate_Dir
   1669  129d		       29 04		      AND	#4
   1670  129f		       f0 05		      BEQ	.skipL0326
   1671  12a1				   .condpart10
   1672  12a1		       c6 dd		      DEC	roommate_move_x
   1673  12a3		       4c a8 92 	      jmp	.skipelse1
   1674  12a6				   .skipL0326
   1675  12a6		       e6 dd		      INC	roommate_move_x
   1676  12a8				   .skipelse1
   1677  12a8				   .L0327		;  if roommate_move_x	=  r_roommate_type_and_range then _Bit2_roommate_Dir{2}  =  1
   1678  12a8
   1679  12a8		       a5 dd		      LDA	roommate_move_x
   1680  12aa		       cd e6 f0 	      CMP	r_roommate_type_and_range
   1681  12ad		       d0 06		      BNE	.skipL0327
   1682  12af				   .condpart11
   1683  12af		       a5 ec		      LDA	_Bit2_roommate_Dir
   1684  12b1		       09 04		      ORA	#4
   1685  12b3		       85 ec		      STA	_Bit2_roommate_Dir
   1686  12b5				   .skipL0327
   1687  12b5				   .L0328		;  if !roommate_move_x then _Bit2_roommate_Dir{2}  =  0
   1688  12b5
   1689  12b5		       a5 dd		      LDA	roommate_move_x
   1690  12b7		       d0 06		      BNE	.skipL0328
   1691  12b9				   .condpart12
   1692  12b9		       a5 ec		      LDA	_Bit2_roommate_Dir
   1693  12bb		       29 fb		      AND	#251
   1694  12bd		       85 ec		      STA	_Bit2_roommate_Dir
   1695  12bf				   .skipL0328
   1696  12bf				   .
   1697  12bf							; 
   1698  12bf
   1699  12bf				   ._Finish_Interior_Movement
   1700  12bf							; _Finish_Interior_Movement
   1701  12bf
   1702  12bf				   .
   1703  12bf							; 
   1704  12bf
   1705  12bf				   .L0329		;  frame_counter  =  frame_counter  -	1
   1706  12bf
   1707  12bf		       c6 d5		      DEC	frame_counter
   1708  12c1				   .
   1709  12c1							; 
   1710  12c1
   1711  12c1				   .
   1712  12c1							; 
   1713  12c1
   1714  12c1				   .L0330		;  if r_extra_wall_startpos_1_x  =  200 then _Skip_extra_Wall
   1715  12c1
   1716  12c1		       ad ec f0 	      LDA	r_extra_wall_startpos_1_x
   1717  12c4		       c9 c8		      CMP	#200
   1718  12c6					      if	((* - ._Skip_extra_Wall) < 127) && ((* - ._Skip_extra_Wall) > -128)
   1719  12c6		       f0 62		      BEQ	._Skip_extra_Wall
   1720  12c8				  -	      else
   1721  12c8				  -	      bne	.4skip_Skip_extra_Wall
   1722  12c8				  -	      jmp	._Skip_extra_Wall
   1723  12c8				  -.4skip_Skip_extra_Wall
   1724  12c8					      endif
   1725  12c8				   .L0331		;  if _BitOp_Ball_Shot_Dir  &&  frame_counter{0} then _Skip_extra_Wall
   1726  12c8
   1727  12c8		       a5 d6		      LDA	_BitOp_Ball_Shot_Dir
   1728  12ca		       f0 05		      BEQ	.skipL0331
   1729  12cc				   .condpart13
   1730  12cc		       a5 d5		      LDA	frame_counter
   1731  12ce		       4a		      LSR
   1732  12cf					      if	((* - ._Skip_extra_Wall) < 127) && ((* - ._Skip_extra_Wall) > -128)
   1733  12cf		       b0 59		      bcs	._Skip_extra_Wall
   1734  12d1				  -	      else
   1735  12d1				  -	      bcc	.5skip_Skip_extra_Wall
   1736  12d1				  -	      jmp	._Skip_extra_Wall
   1737  12d1				  -.5skip_Skip_extra_Wall
   1738  12d1					      endif
   1739  12d1				   .skipL0331
   1740  12d1				   .L0332		;  if !r_extra_wall_width  &&	frame_counter{1} then _Set_Second_Wall_pos
   1741  12d1
   1742  12d1		       ad ea f0 	      LDA	r_extra_wall_width
   1743  12d4		       d0 06		      BNE	.skipL0332
   1744  12d6				   .condpart14
   1745  12d6		       a5 d5		      LDA	frame_counter
   1746  12d8		       29 02		      AND	#2
   1747  12da					      if	((* - ._Set_Second_Wall_pos) < 127) && ((* - ._Set_Second_Wall_pos) > -128)
   1748  12da		       d0 32		      BNE	._Set_Second_Wall_pos
   1749  12dc				  -	      else
   1750  12dc				  -	      beq	.6skip_Set_Second_Wall_pos
   1751  12dc				  -	      jmp	._Set_Second_Wall_pos
   1752  12dc				  -.6skip_Set_Second_Wall_pos
   1753  12dc					      endif
   1754  12dc				   .skipL0332
   1755  12dc				   .L0333		;  if r_extra_wall_type_and_range{1}  &&  frame_counter  <  r_extra_wall_type_and_range then _Set_Second_Wall_pos
   1756  12dc
   1757  12dc		       ad e9 f0 	      LDA	r_extra_wall_type_and_range
   1758  12df		       29 02		      AND	#2
   1759  12e1		       f0 07		      BEQ	.skipL0333
   1760  12e3				   .condpart15
   1761  12e3		       a5 d5		      LDA	frame_counter
   1762  12e5		       cd e9 f0 	      CMP	r_extra_wall_type_and_range
   1763  12e8					      if	((* - ._Set_Second_Wall_pos) < 127) && ((* - ._Set_Second_Wall_pos) > -128)
   1764  12e8		       90 24		      bcc	._Set_Second_Wall_pos
   1765  12ea				  -	      else
   1766  12ea				  -	      bcs	.7skip_Set_Second_Wall_pos
   1767  12ea				  -	      jmp	._Set_Second_Wall_pos
   1768  12ea				  -.7skip_Set_Second_Wall_pos
   1769  12ea					      endif
   1770  12ea				   .skipL0333
   1771  12ea				   .L0334		;  if r_extra_wall_startpos_2_x  <>  200  &&  !r_extra_wall_type_and_range{1}	&&  frame_counter{1} then _Set_Second_Wall_pos
   1772  12ea
   1773  12ea		       ad ee f0 	      LDA	r_extra_wall_startpos_2_x
   1774  12ed		       c9 c8		      CMP	#200
   1775  12ef		       f0 0d		      BEQ	.skipL0334
   1776  12f1				   .condpart16
   1777  12f1		       ad e9 f0 	      LDA	r_extra_wall_type_and_range
   1778  12f4		       29 02		      AND	#2
   1779  12f6		       d0 06		      BNE	.skip16then
   1780  12f8				   .condpart17
   1781  12f8		       a5 d5		      LDA	frame_counter
   1782  12fa		       29 02		      AND	#2
   1783  12fc					      if	((* - ._Set_Second_Wall_pos) < 127) && ((* - ._Set_Second_Wall_pos) > -128)
   1784  12fc		       d0 10		      BNE	._Set_Second_Wall_pos
   1785  12fe				  -	      else
   1786  12fe				  -	      beq	.8skip_Set_Second_Wall_pos
   1787  12fe				  -	      jmp	._Set_Second_Wall_pos
   1788  12fe				  -.8skip_Set_Second_Wall_pos
   1789  12fe					      endif
   1790  12fe				   .skip16then
   1791  12fe				   .skipL0334
   1792  12fe				   .L0335		;  bally  =  r_extra_wall_startpos_1_y  :  ballx  =  r_extra_wall_startpos_1_x  +  extra_wall_move_x
   1793  12fe
   1794  12fe		       ad ed f0 	      LDA	r_extra_wall_startpos_1_y
   1795  1301		       85 89		      STA	bally
   1796  1303		       ad ec f0 	      LDA	r_extra_wall_startpos_1_x
   1797  1306		       18		      CLC
   1798  1307		       65 dc		      ADC	extra_wall_move_x
   1799  1309		       85 84		      STA	ballx
   1800  130b				   .L0336		;  goto _Skip_Second_Wall_pos
   1801  130b
   1802  130b		       4c 1b 93 	      jmp	._Skip_Second_Wall_pos
   1803  130e
   1804  130e				   ._Set_Second_Wall_pos
   1805  130e							; _Set_Second_Wall_pos
   1806  130e
   1807  130e				   .L0337		;  bally  =  r_extra_wall_startpos_2_y  :  ballx  =  r_extra_wall_startpos_2_x  +  extra_wall_move_x
   1808  130e
   1809  130e		       ad ef f0 	      LDA	r_extra_wall_startpos_2_y
   1810  1311		       85 89		      STA	bally
   1811  1313		       ad ee f0 	      LDA	r_extra_wall_startpos_2_x
   1812  1316		       18		      CLC
   1813  1317		       65 dc		      ADC	extra_wall_move_x
   1814  1319		       85 84		      STA	ballx
   1815  131b				   ._Skip_Second_Wall_pos
   1816  131b							; _Skip_Second_Wall_pos
   1817  131b
   1818  131b				   .
   1819  131b							; 
   1820  131b
   1821  131b				   .L0338		;  ballheight	=  r_extra_wall_height
   1822  131b
   1823  131b		       ad eb f0 	      LDA	r_extra_wall_height
   1824  131e		       85 92		      STA	ballheight
   1825  1320				   .L0339		;  CTRLPF  =  r_extra_wall_width  |  1
   1826  1320
   1827  1320		       ad ea f0 	      LDA	r_extra_wall_width
   1828  1323		       09 01		      ORA	#1
   1829  1325		       85 0a		      STA	CTRLPF
   1830  1327				   .L0340		;  goto _Skip_ball_shot
   1831  1327
   1832  1327		       4c 3e 93 	      jmp	._Skip_ball_shot
   1833  132a
   1834  132a				   ._Skip_extra_Wall
   1835  132a							; _Skip_extra_Wall
   1836  132a
   1837  132a				   .
   1838  132a							; 
   1839  132a
   1840  132a				   .L0341		;  if !_BitOp_Ball_Shot_Dir then _Skip_ball_shot
   1841  132a
   1842  132a		       a5 d6		      LDA	_BitOp_Ball_Shot_Dir
   1843  132c					      if	((* - ._Skip_ball_shot) < 127) && ((* - ._Skip_ball_shot) > -128)
   1844  132c		       f0 10		      BEQ	._Skip_ball_shot
   1845  132e				  -	      else
   1846  132e				  -	      bne	.9skip_Skip_ball_shot
   1847  132e				  -	      jmp	._Skip_ball_shot
   1848  132e				  -.9skip_Skip_ball_shot
   1849  132e					      endif
   1850  132e				   .L0342		;  ballx  =  ball_shoot_x
   1851  132e
   1852  132e		       a5 ae		      LDA	ball_shoot_x
   1853  1330		       85 84		      STA	ballx
   1854  1332				   .L0343		;  bally  =  ball_shoot_y
   1855  1332
   1856  1332		       a5 af		      LDA	ball_shoot_y
   1857  1334		       85 89		      STA	bally
   1858  1336				   .L0344		;  ballheight	=  1
   1859  1336
   1860  1336		       a9 01		      LDA	#1
   1861  1338		       85 92		      STA	ballheight
   1862  133a				   .L0345		;  CTRLPF  =  %00010001
   1863  133a
   1864  133a		       a9 11		      LDA	#%00010001
   1865  133c		       85 0a		      STA	CTRLPF
   1866  133e				   ._Skip_ball_shot
   1867  133e							; _Skip_ball_shot
   1868  133e
   1869  133e				   .
   1870  133e							; 
   1871  133e
   1872  133e				   .
   1873  133e							; 
   1874  133e
   1875  133e				   .L0346		;  if r_roommate_startpos_y  =  200 then _Skip_enemy
   1876  133e
   1877  133e		       ad e8 f0 	      LDA	r_roommate_startpos_y
   1878  1341		       c9 c8		      CMP	#200
   1879  1343					      if	((* - ._Skip_enemy) < 127) && ((* - ._Skip_enemy) > -128)
   1880  1343		       f0 0d		      BEQ	._Skip_enemy
   1881  1345				  -	      else
   1882  1345				  -	      bne	.10skip_Skip_enemy
   1883  1345				  -	      jmp	._Skip_enemy
   1884  1345				  -.10skip_Skip_enemy
   1885  1345					      endif
   1886  1345				   .L0347		;  player0x  =  r_roommate_startpos_x	+  roommate_move_x
   1887  1345
   1888  1345		       ad e7 f0 	      LDA	r_roommate_startpos_x
   1889  1348		       18		      CLC
   1890  1349		       65 dd		      ADC	roommate_move_x
   1891  134b		       85 80		      STA	player0x
   1892  134d				   .L0348		;  player0y  =  r_roommate_startpos_y
   1893  134d
   1894  134d		       ad e8 f0 	      LDA	r_roommate_startpos_y
   1895  1350		       85 85		      STA	player0y
   1896  1352				   ._Skip_enemy
   1897  1352							; _Skip_enemy
   1898  1352
   1899  1352				   .
   1900  1352							; 
   1901  1352
   1902  1352				   .
   1903  1352							; 
   1904  1352
   1905  1352				   .
   1906  1352							; 
   1907  1352
   1908  1352				   .
   1909  1352							; 
   1910  1352
   1911  1352				   .L0349		;  if delay_counter then delay_counter  =  delay_counter  -  1  :  temp4  =  SWCHA  :	goto _skip_game_action
   1912  1352
   1913  1352		       a5 d4		      LDA	delay_counter
   1914  1354		       f0 0a		      BEQ	.skipL0349
   1915  1356				   .condpart18
   1916  1356		       c6 d4		      DEC	delay_counter
   1917  1358		       ad 80 02 	      LDA	SWCHA
   1918  135b		       85 9f		      STA	temp4
   1919  135d		       4c be 98 	      jmp	._skip_game_action
   1920  1360
   1921  1360				   .skipL0349
   1922  1360				   .
   1923  1360							; 
   1924  1360
   1925  1360				   .L0350		;  if _Bit5_Request_Pending{5}  &&  ReceiveBufferSize	>  response_size_minus_1 then goto _Change_Room
   1926  1360
   1927  1360		       a5 ec		      LDA	_Bit5_Request_Pending
   1928  1362		       29 20		      AND	#32
   1929  1364		       f0 0a		      BEQ	.skipL0350
   1930  1366				   .condpart19
   1931  1366		       a9 1e		      LDA	#response_size_minus_1
   1932  1368		       cd f3 1f 	      CMP	ReceiveBufferSize
   1933  136b		       b0 03		      BCS	.skip19then
   1934  136d				   .condpart20
   1935  136d		       4c ba 9c 	      jmp	._Change_Room
   1936  1370
   1937  1370				   .skip19then
   1938  1370				   .skipL0350
   1939  1370				   .
   1940  1370							; 
   1941  1370
   1942  1370				   .L0351		;  if _Bit5_Request_Pending{5} then temp4  =  SWCHA  :  goto _skip_game_action
   1943  1370
   1944  1370		       a5 ec		      LDA	_Bit5_Request_Pending
   1945  1372		       29 20		      AND	#32
   1946  1374		       f0 08		      BEQ	.skipL0351
   1947  1376				   .condpart21
   1948  1376		       ad 80 02 	      LDA	SWCHA
   1949  1379		       85 9f		      STA	temp4
   1950  137b		       4c be 98 	      jmp	._skip_game_action
   1951  137e
   1952  137e				   .skipL0351
   1953  137e				   .
   1954  137e							; 
   1955  137e
   1956  137e				   .
   1957  137e							; 
   1958  137e
   1959  137e				   .L0352		;  on Game_Status goto _game_action _game_over_action _Level_Finished_loop _Explosion_loop
   1960  137e
   1961  137e		       a6 d3		      LDX	Game_Status
   1962  1380		       bd 89 93 	      LDA	.L0352jumptablehi,x
   1963  1383		       48		      PHA
   1964  1384		       bd 8d 93 	      LDA	.L0352jumptablelo,x
   1965  1387		       48		      PHA
   1966  1388		       60		      RTS
   1967  1389				   .L0352jumptablehi
   1968  1389		       93		      .byte.b	>(._game_action-1)
   1969  138a		       9a		      .byte.b	>(._game_over_action-1)
   1970  138b		       9a		      .byte.b	>(._Level_Finished_loop-1)
   1971  138c		       9a		      .byte.b	>(._Explosion_loop-1)
   1972  138d				   .L0352jumptablelo
   1973  138d		       90		      .byte.b	<(._game_action-1)
   1974  138e		       70		      .byte.b	<(._game_over_action-1)
   1975  138f		       7a		      .byte.b	<(._Level_Finished_loop-1)
   1976  1390		       f1		      .byte.b	<(._Explosion_loop-1)
   1977  1391				   .
   1978  1391							; 
   1979  1391
   1980  1391				   ._game_action
   1981  1391							; _game_action
   1982  1391
   1983  1391				   .
   1984  1391							; 
   1985  1391
   1986  1391				   .L0353		;  if frame_counter then _Skip_dec_bonus_and_fuel
   1987  1391
   1988  1391		       a5 d5		      LDA	frame_counter
   1989  1393					      if	((* - ._Skip_dec_bonus_and_fuel) < 127) && ((* - ._Skip_dec_bonus_and_fuel) > -128)
   1990  1393		       d0 17		      BNE	._Skip_dec_bonus_and_fuel
   1991  1395				  -	      else
   1992  1395				  -	      beq	.11skip_Skip_dec_bonus_and_fuel
   1993  1395				  -	      jmp	._Skip_dec_bonus_and_fuel
   1994  1395				  -.11skip_Skip_dec_bonus_and_fuel
   1995  1395					      endif
   1996  1395				   .L0354		;  if bonus_bcd_counter then dec bonus_bcd_counter  =	bonus_bcd_counter  -  1
   1997  1395
   1998  1395		       a5 b1		      LDA	bonus_bcd_counter
   1999  1397		       f0 09		      BEQ	.skipL0354
   2000  1399				   .condpart22
   2001  1399		       f8		      SED
   2002  139a		       a5 b1		      LDA	bonus_bcd_counter
   2003  139c		       38		      SEC
   2004  139d		       e9 01		      SBC	#1
   2005  139f		       85 b1		      STA	bonus_bcd_counter
   2006  13a1		       d8		      CLD
   2007  13a2				   .skipL0354
   2008  13a2				   .
   2009  13a2							; 
   2010  13a2
   2011  13a2				   .L0355		;  if !bonus_bcd_counter{0} then pfscore2  =  pfscore2  /  2
   2012  13a2
   2013  13a2		       a5 b1		      LDA	bonus_bcd_counter
   2014  13a4		       4a		      LSR
   2015  13a5		       b0 05		      BCS	.skipL0355
   2016  13a7				   .condpart23
   2017  13a7		       a5 f3		      LDA	pfscore2
   2018  13a9		       4a		      lsr
   2019  13aa		       85 f3		      STA	pfscore2
   2020  13ac				   .skipL0355
   2021  13ac				   .
   2022  13ac							; 
   2023  13ac
   2024  13ac				   ._Skip_dec_bonus_and_fuel
   2025  13ac							; _Skip_dec_bonus_and_fuel
   2026  13ac
   2027  13ac				   .
   2028  13ac							; 
   2029  13ac
   2030  13ac				   .L0356		;  if !pfscore2  &&  !_Ch0_Sound then _Ch0_Sound  =  4  :  _Ch0_Duration  =  1  :  _Ch0_Counter  =  0
   2031  13ac
   2032  13ac		       a5 f3		      LDA	pfscore2
   2033  13ae		       d0 10		      BNE	.skipL0356
   2034  13b0				   .condpart24
   2035  13b0		       a5 d9		      LDA	_Ch0_Sound
   2036  13b2		       d0 0c		      BNE	.skip24then
   2037  13b4				   .condpart25
   2038  13b4		       a9 04		      LDA	#4
   2039  13b6		       85 d9		      STA	_Ch0_Sound
   2040  13b8		       a9 01		      LDA	#1
   2041  13ba		       85 da		      STA	_Ch0_Duration
   2042  13bc		       a9 00		      LDA	#0
   2043  13be		       85 db		      STA	_Ch0_Counter
   2044  13c0				   .skip24then
   2045  13c0				   .skipL0356
   2046  13c0				   .
   2047  13c0							; 
   2048  13c0
   2049  13c0				   .
   2050  13c0							; 
   2051  13c0
   2052  13c0				   .L0357		;  if player0y  =  200 then goto __Skip_Enemy_Fire
   2053  13c0
   2054  13c0		       a5 85		      LDA	player0y
   2055  13c2		       c9 c8		      CMP	#200
   2056  13c4		       d0 03		      BNE	.skipL0357
   2057  13c6				   .condpart26
   2058  13c6		       4c 78 94 	      jmp	.__Skip_Enemy_Fire
   2059  13c9
   2060  13c9				   .skipL0357
   2061  13c9				   .L0358		;  if _BitOp_Ball_Shot_Dir  ||  roommate_type then goto __Skip_Enemy_Fire
   2062  13c9
   2063  13c9		       a5 d6		      LDA	_BitOp_Ball_Shot_Dir
   2064  13cb		       f0 03		      BEQ	.skipL0358
   2065  13cd				   .condpart27
   2066  13cd		       4c d4 93 	      jmp	.condpart28
   2067  13d0				   .skipL0358
   2068  13d0		       a5 de		      LDA	roommate_type
   2069  13d2		       f0 03		      BEQ	.skip8OR
   2070  13d4				   .condpart28
   2071  13d4		       4c 78 94 	      jmp	.__Skip_Enemy_Fire
   2072  13d7
   2073  13d7				   .skip8OR
   2074  13d7				   .L0359		;  temp4  =  frame_counter  &	127
   2075  13d7
   2076  13d7		       a5 d5		      LDA	frame_counter
   2077  13d9		       29 7f		      AND	#127
   2078  13db		       85 9f		      STA	temp4
   2079  13dd				   .L0360		;  if temp4  <>  next_shoot_rand then goto __Skip_Enemy_Fire
   2080  13dd
   2081  13dd		       a5 9f		      LDA	temp4
   2082  13df		       c5 b4		      CMP	next_shoot_rand
   2083  13e1		       f0 03		      BEQ	.skipL0360
   2084  13e3				   .condpart29
   2085  13e3		       4c 78 94 	      jmp	.__Skip_Enemy_Fire
   2086  13e6
   2087  13e6				   .skipL0360
   2088  13e6				   .
   2089  13e6							; 
   2090  13e6
   2091  13e6				   .L0361		;  next_shoot_rand  =	 (  rand16  &  127 ) 
   2092  13e6
   2093  13e6							; complex statement detected
   2094  13e6		       85 ee		      sta	temp7
   2095  13e8		       a9 93		      lda	#>(ret_point2-1)
   2096  13ea		       48		      pha
   2097  13eb		       a9 fd		      lda	#<(ret_point2-1)
   2098  13ed		       48		      pha
   2099  13ee		       a9 f4		      lda	#>(randomize-1)
   2100  13f0		       48		      pha
   2101  13f1		       a9 d5		      lda	#<(randomize-1)
   2102  13f3		       48		      pha
   2103  13f4		       a5 ee		      lda	temp7
   2104  13f6		       48		      pha
   2105  13f7		       8a		      txa
   2106  13f8		       48		      pha
   2107  13f9		       a2 04		      ldx	#4
   2108  13fb		       4c e8 ff 	      jmp	BS_jsr
   2109  13fe				   ret_point2
   2110  13fe		       29 7f		      AND	#127
   2111  1400		       85 b4		      STA	next_shoot_rand
   2112  1402				   .L0362		;  _BitOp_Ball_Shot_Dir  =  0	:  Bally_velocity  =  0.0  :  q  =  0
   2113  1402
   2114  1402		       a9 00		      LDA	#0
   2115  1404		       85 d6		      STA	_BitOp_Ball_Shot_Dir
   2116  1406		       a2 00		      LDX	#0
   2117  1408		       86 e4		      STX	q
   2118  140a		       a9 00		      LDA	#0
   2119  140c		       85 e3		      STA	Bally_velocity
   2120  140e		       a9 00		      LDA	#0
   2121  1410		       85 e4		      STA	q
   2122  1412				   .
   2123  1412							; 
   2124  1412
   2125  1412				   .L0363		;  ball_shoot_x  =  player0x  +  4  :	ball_shoot_y  =  player0y  -  5
   2126  1412
   2127  1412		       a5 80		      LDA	player0x
   2128  1414		       18		      CLC
   2129  1415		       69 04		      ADC	#4
   2130  1417		       85 ae		      STA	ball_shoot_x
   2131  1419		       a5 85		      LDA	player0y
   2132  141b		       38		      SEC
   2133  141c		       e9 05		      SBC	#5
   2134  141e		       85 af		      STA	ball_shoot_y
   2135  1420				   .
   2136  1420							; 
   2137  1420
   2138  1420				   .
   2139  1420							; 
   2140  1420
   2141  1420				   .L0364		;  if _Ch0_Sound  <>  3 then _Ch0_Sound  =  2	:  _Ch0_Duration  =  1	:  _Ch0_Counter  =  0
   2142  1420
   2143  1420		       a5 d9		      LDA	_Ch0_Sound
   2144  1422		       c9 03		      CMP	#3
   2145  1424		       f0 0c		      BEQ	.skipL0364
   2146  1426				   .condpart30
   2147  1426		       a9 02		      LDA	#2
   2148  1428		       85 d9		      STA	_Ch0_Sound
   2149  142a		       a9 01		      LDA	#1
   2150  142c		       85 da		      STA	_Ch0_Duration
   2151  142e		       a9 00		      LDA	#0
   2152  1430		       85 db		      STA	_Ch0_Counter
   2153  1432				   .skipL0364
   2154  1432				   .
   2155  1432							; 
   2156  1432
   2157  1432				   .L0365		;  if player1x  >  player0x then _Bit2_Ball_Shot_Dir_Right1{2}  =  1 else _Bit0_Ball_Shot_Dir_Left1{0}  =  1
   2158  1432
   2159  1432		       a5 80		      LDA	player0x
   2160  1434		       c5 81		      CMP	player1x
   2161  1436		       b0 09		      BCS	.skipL0365
   2162  1438				   .condpart31
   2163  1438		       a5 d6		      LDA	_Bit2_Ball_Shot_Dir_Right1
   2164  143a		       09 04		      ORA	#4
   2165  143c		       85 d6		      STA	_Bit2_Ball_Shot_Dir_Right1
   2166  143e		       4c 47 94 	      jmp	.skipelse2
   2167  1441				   .skipL0365
   2168  1441		       a5 d6		      LDA	_Bit0_Ball_Shot_Dir_Left1
   2169  1443		       09 01		      ORA	#1
   2170  1445		       85 d6		      STA	_Bit0_Ball_Shot_Dir_Left1
   2171  1447				   .skipelse2
   2172  1447				   .L0366		;  if !_Bit2_Ball_Shot_Dir_Right1{2} then __Skip_Additional_Right
   2173  1447
   2174  1447		       a5 d6		      LDA	_Bit2_Ball_Shot_Dir_Right1
   2175  1449		       29 04		      AND	#4
   2176  144b					      if	((* - .__Skip_Additional_Right) < 127) && ((* - .__Skip_Additional_Right) > -128)
   2177  144b		       f0 13		      BEQ	.__Skip_Additional_Right
   2178  144d				  -	      else
   2179  144d				  -	      bne	.12skip__Skip_Additional_Right
   2180  144d				  -	      jmp	.__Skip_Additional_Right
   2181  144d				  -.12skip__Skip_Additional_Right
   2182  144d					      endif
   2183  144d				   .L0367		;  temp4  =  player1x	-  player0x
   2184  144d
   2185  144d		       a5 81		      LDA	player1x
   2186  144f		       38		      SEC
   2187  1450		       e5 80		      SBC	player0x
   2188  1452		       85 9f		      STA	temp4
   2189  1454				   .L0368		;  if temp4  >  25 then _Bit3_Ball_Shot_Dir_Right2{3}	=  1
   2190  1454
   2191  1454		       a9 19		      LDA	#25
   2192  1456		       c5 9f		      CMP	temp4
   2193  1458		       b0 06		      BCS	.skipL0368
   2194  145a				   .condpart32
   2195  145a		       a5 d6		      LDA	_Bit3_Ball_Shot_Dir_Right2
   2196  145c		       09 08		      ORA	#8
   2197  145e		       85 d6		      STA	_Bit3_Ball_Shot_Dir_Right2
   2198  1460				   .skipL0368
   2199  1460				   .__Skip_Additional_Right
   2200  1460							; __Skip_Additional_Right
   2201  1460
   2202  1460				   .L0369		;  if !_Bit0_Ball_Shot_Dir_Left1{0} then __Skip_Enemy_Fire
   2203  1460
   2204  1460		       a5 d6		      LDA	_Bit0_Ball_Shot_Dir_Left1
   2205  1462		       4a		      LSR
   2206  1463					      if	((* - .__Skip_Enemy_Fire) < 127) && ((* - .__Skip_Enemy_Fire) > -128)
   2207  1463		       90 13		      bcc	.__Skip_Enemy_Fire
   2208  1465				  -	      else
   2209  1465				  -	      bcs	.13skip__Skip_Enemy_Fire
   2210  1465				  -	      jmp	.__Skip_Enemy_Fire
   2211  1465				  -.13skip__Skip_Enemy_Fire
   2212  1465					      endif
   2213  1465				   .L0370		;  temp4  =  player0x	-  player1x
   2214  1465
   2215  1465		       a5 80		      LDA	player0x
   2216  1467		       38		      SEC
   2217  1468		       e5 81		      SBC	player1x
   2218  146a		       85 9f		      STA	temp4
   2219  146c				   .L0371		;  if temp4  >  25 then _Bit1_Ball_Shot_Dir_Left2{1}  =  1
   2220  146c
   2221  146c		       a9 19		      LDA	#25
   2222  146e		       c5 9f		      CMP	temp4
   2223  1470		       b0 06		      BCS	.skipL0371
   2224  1472				   .condpart33
   2225  1472		       a5 d6		      LDA	_Bit1_Ball_Shot_Dir_Left2
   2226  1474		       09 02		      ORA	#2
   2227  1476		       85 d6		      STA	_Bit1_Ball_Shot_Dir_Left2
   2228  1478				   .skipL0371
   2229  1478				   .
   2230  1478							; 
   2231  1478
   2232  1478				   .__Skip_Enemy_Fire
   2233  1478							; __Skip_Enemy_Fire
   2234  1478
   2235  1478				   .
   2236  1478							; 
   2237  1478
   2238  1478				   .
   2239  1478							; 
   2240  1478
   2241  1478				   .
   2242  1478							; 
   2243  1478
   2244  1478				   .L0372		;  if !_BitOp_Ball_Shot_Dir then goto __Skip_Enemy_Missile
   2245  1478
   2246  1478		       a5 d6		      LDA	_BitOp_Ball_Shot_Dir
   2247  147a		       d0 03		      BNE	.skipL0372
   2248  147c				   .condpart34
   2249  147c		       4c f0 94 	      jmp	.__Skip_Enemy_Missile
   2250  147f
   2251  147f				   .skipL0372
   2252  147f				   .
   2253  147f							; 
   2254  147f
   2255  147f				   .
   2256  147f							; 
   2257  147f
   2258  147f				   .L0373		;  if ball_shoot_y  >	player1y then ball_shoot_y  =  ball_shoot_y  -	1
   2259  147f
   2260  147f		       a5 86		      LDA	player1y
   2261  1481		       c5 af		      CMP	ball_shoot_y
   2262  1483		       b0 02		      BCS	.skipL0373
   2263  1485				   .condpart35
   2264  1485		       c6 af		      DEC	ball_shoot_y
   2265  1487				   .skipL0373
   2266  1487				   .L0374		;  if _Bit0_Ball_Shot_Dir_Left1{0}  &&  frame_counter{0} then ball_shoot_x  =	ball_shoot_x  -  1  :  if _Bit1_Ball_Shot_Dir_Left2{1} then ball_shoot_x  =  ball_shoot_x  -  1
   2267  1487
   2268  1487		       a5 d6		      LDA	_Bit0_Ball_Shot_Dir_Left1
   2269  1489		       4a		      LSR
   2270  148a		       90 0f		      BCC	.skipL0374
   2271  148c				   .condpart36
   2272  148c		       a5 d5		      LDA	frame_counter
   2273  148e		       4a		      LSR
   2274  148f		       90 0a		      BCC	.skip36then
   2275  1491				   .condpart37
   2276  1491		       c6 ae		      DEC	ball_shoot_x
   2277  1493		       a5 d6		      LDA	_Bit1_Ball_Shot_Dir_Left2
   2278  1495		       29 02		      AND	#2
   2279  1497		       f0 02		      BEQ	.skip37then
   2280  1499				   .condpart38
   2281  1499		       c6 ae		      DEC	ball_shoot_x
   2282  149b				   .skip37then
   2283  149b				   .skip36then
   2284  149b				   .skipL0374
   2285  149b				   .L0375		;  if _Bit2_Ball_Shot_Dir_Right1{2}  &&  frame_counter{0} then ball_shoot_x  =  ball_shoot_x  +  1  :	if _Bit3_Ball_Shot_Dir_Right2{3} then ball_shoot_x  =  ball_shoot_x  +	1
   2286  149b
   2287  149b		       a5 d6		      LDA	_Bit2_Ball_Shot_Dir_Right1
   2288  149d		       29 04		      AND	#4
   2289  149f		       f0 0f		      BEQ	.skipL0375
   2290  14a1				   .condpart39
   2291  14a1		       a5 d5		      LDA	frame_counter
   2292  14a3		       4a		      LSR
   2293  14a4		       90 0a		      BCC	.skip39then
   2294  14a6				   .condpart40
   2295  14a6		       e6 ae		      INC	ball_shoot_x
   2296  14a8		       a5 d6		      LDA	_Bit3_Ball_Shot_Dir_Right2
   2297  14aa		       29 08		      AND	#8
   2298  14ac		       f0 02		      BEQ	.skip40then
   2299  14ae				   .condpart41
   2300  14ae		       e6 ae		      INC	ball_shoot_x
   2301  14b0				   .skip40then
   2302  14b0				   .skip39then
   2303  14b0				   .skipL0375
   2304  14b0				   .
   2305  14b0							; 
   2306  14b0
   2307  14b0				   .L0376		;  rem apply gravity
   2308  14b0
   2309  14b0				   .L0377		;  Bally_velocity  =  Bally_velocity  +  gravity_ball
   2310  14b0
   2311  14b0		       a5 e4		      LDA	q
   2312  14b2		       18		      CLC
   2313  14b3		       69 02		      ADC	#2
   2314  14b5		       85 e4		      STA	q
   2315  14b7		       a5 e3		      LDA	Bally_velocity
   2316  14b9		       69 00		      ADC	#0
   2317  14bb		       85 e3		      STA	Bally_velocity
   2318  14bd				   .L0378		;  Bally_position  =  Bally_position  +  Bally_velocity
   2319  14bd
   2320  14bd		       a5 e5		      LDA	r
   2321  14bf		       18		      CLC
   2322  14c0		       65 e4		      ADC	q
   2323  14c2		       85 e5		      STA	r
   2324  14c4		       a5 af		      LDA	Bally_position
   2325  14c6		       65 e3		      ADC	Bally_velocity
   2326  14c8		       85 af		      STA	Bally_position
   2327  14ca				   .
   2328  14ca							; 
   2329  14ca
   2330  14ca				   .
   2331  14ca							; 
   2332  14ca
   2333  14ca				   .
   2334  14ca							; 
   2335  14ca
   2336  14ca				   .L0379		;  if ball_shoot_y  <	_M_Edge_Top then __Delete_Enemy_Missile
   2337  14ca
   2338  14ca		       a5 af		      LDA	ball_shoot_y
   2339  14cc		       c9 02		      CMP	#_M_Edge_Top
   2340  14ce					      if	((* - .__Delete_Enemy_Missile) < 127) && ((* - .__Delete_Enemy_Missile) > -128)
   2341  14ce		       90 16		      bcc	.__Delete_Enemy_Missile
   2342  14d0				  -	      else
   2343  14d0				  -	      bcs	.14skip__Delete_Enemy_Missile
   2344  14d0				  -	      jmp	.__Delete_Enemy_Missile
   2345  14d0				  -.14skip__Delete_Enemy_Missile
   2346  14d0					      endif
   2347  14d0				   .L0380		;  if ball_shoot_y  >	_M_Edge_Bottom then __Delete_Enemy_Missile
   2348  14d0
   2349  14d0		       a9 58		      LDA	#_M_Edge_Bottom
   2350  14d2		       c5 af		      CMP	ball_shoot_y
   2351  14d4					      if	((* - .__Delete_Enemy_Missile) < 127) && ((* - .__Delete_Enemy_Missile) > -128)
   2352  14d4		       90 10		      bcc	.__Delete_Enemy_Missile
   2353  14d6				  -	      else
   2354  14d6				  -	      bcs	.15skip__Delete_Enemy_Missile
   2355  14d6				  -	      jmp	.__Delete_Enemy_Missile
   2356  14d6				  -.15skip__Delete_Enemy_Missile
   2357  14d6					      endif
   2358  14d6				   .L0381		;  if ball_shoot_x  <	_M_Edge_Left then __Delete_Enemy_Missile
   2359  14d6
   2360  14d6		       a5 ae		      LDA	ball_shoot_x
   2361  14d8		       c9 0e		      CMP	#_M_Edge_Left
   2362  14da					      if	((* - .__Delete_Enemy_Missile) < 127) && ((* - .__Delete_Enemy_Missile) > -128)
   2363  14da		       90 0a		      bcc	.__Delete_Enemy_Missile
   2364  14dc				  -	      else
   2365  14dc				  -	      bcs	.16skip__Delete_Enemy_Missile
   2366  14dc				  -	      jmp	.__Delete_Enemy_Missile
   2367  14dc				  -.16skip__Delete_Enemy_Missile
   2368  14dc					      endif
   2369  14dc				   .L0382		;  if ball_shoot_x  >	_M_Edge_Right then __Delete_Enemy_Missile
   2370  14dc
   2371  14dc		       a9 94		      LDA	#_M_Edge_Right
   2372  14de		       c5 ae		      CMP	ball_shoot_x
   2373  14e0					      if	((* - .__Delete_Enemy_Missile) < 127) && ((* - .__Delete_Enemy_Missile) > -128)
   2374  14e0		       90 04		      bcc	.__Delete_Enemy_Missile
   2375  14e2				  -	      else
   2376  14e2				  -	      bcs	.17skip__Delete_Enemy_Missile
   2377  14e2				  -	      jmp	.__Delete_Enemy_Missile
   2378  14e2				  -.17skip__Delete_Enemy_Missile
   2379  14e2					      endif
   2380  14e2				   .
   2381  14e2							; 
   2382  14e2
   2383  14e2				   .
   2384  14e2							; 
   2385  14e2
   2386  14e2				   .L0383		;  if !collision(playfield,ball) then __Skip_Enemy_Missile
   2387  14e2
   2388  14e2		       24 06		      bit	CXBLPF
   2389  14e4					      if	((* - .__Skip_Enemy_Missile) < 127) && ((* - .__Skip_Enemy_Missile) > -128)
   2390  14e4		       10 0a		      bpl	.__Skip_Enemy_Missile
   2391  14e6				  -	      else
   2392  14e6				  -	      bmi	.18skip__Skip_Enemy_Missile
   2393  14e6				  -	      jmp	.__Skip_Enemy_Missile
   2394  14e6				  -.18skip__Skip_Enemy_Missile
   2395  14e6					      endif
   2396  14e6				   .
   2397  14e6							; 
   2398  14e6
   2399  14e6				   .__Delete_Enemy_Missile
   2400  14e6							; __Delete_Enemy_Missile
   2401  14e6
   2402  14e6				   .
   2403  14e6							; 
   2404  14e6
   2405  14e6				   .
   2406  14e6							; 
   2407  14e6
   2408  14e6				   .L0384		;  _BitOp_Ball_Shot_Dir  =  0	:  ballx  =  200  :  bally  =  200
   2409  14e6
   2410  14e6		       a9 00		      LDA	#0
   2411  14e8		       85 d6		      STA	_BitOp_Ball_Shot_Dir
   2412  14ea		       a9 c8		      LDA	#200
   2413  14ec		       85 84		      STA	ballx
   2414  14ee		       85 89		      STA	bally
   2415  14f0				   .
   2416  14f0							; 
   2417  14f0
   2418  14f0				   .__Skip_Enemy_Missile
   2419  14f0							; __Skip_Enemy_Missile
   2420  14f0
   2421  14f0				   .
   2422  14f0							; 
   2423  14f0
   2424  14f0				   .
   2425  14f0							; 
   2426  14f0
   2427  14f0				   .
   2428  14f0							; 
   2429  14f0
   2430  14f0				   .
   2431  14f0							; 
   2432  14f0
   2433  14f0				   .
   2434  14f0							; 
   2435  14f0
   2436  14f0				   .L0385		;  if !joy0fire then _Bit7_FireB_Restrainer{7}  =  0  :  goto __Skip_Fire
   2437  14f0
   2438  14f0		       24 0c		      bit	INPT4
   2439  14f2		       10 09		      BPL	.skipL0385
   2440  14f4				   .condpart42
   2441  14f4		       a5 ec		      LDA	_Bit7_FireB_Restrainer
   2442  14f6		       29 7f		      AND	#127
   2443  14f8		       85 ec		      STA	_Bit7_FireB_Restrainer
   2444  14fa		       4c 7b 95 	      jmp	.__Skip_Fire
   2445  14fd
   2446  14fd				   .skipL0385
   2447  14fd				   .L0386		;  if _Bit7_FireB_Restrainer{7} then __Skip_Fire
   2448  14fd
   2449  14fd		       24 ec		      BIT	_Bit7_FireB_Restrainer
   2450  14ff					      if	((* - .__Skip_Fire) < 127) && ((* - .__Skip_Fire) > -128)
   2451  14ff		       30 7a		      bmi	.__Skip_Fire
   2452  1501				  -	      else
   2453  1501				  -	      bpl	.19skip__Skip_Fire
   2454  1501				  -	      jmp	.__Skip_Fire
   2455  1501				  -.19skip__Skip_Fire
   2456  1501					      endif
   2457  1501				   .
   2458  1501							; 
   2459  1501
   2460  1501				   .
   2461  1501							; 
   2462  1501
   2463  1501				   .L0387		;  if _BitOp_M0_Dir  ||  _Bit0_P1_Dir_Up{0} then __Skip_Fire
   2464  1501
   2465  1501		       a5 d7		      LDA	_BitOp_M0_Dir
   2466  1503					      if	((* - .__Skip_Fire) < 127) && ((* - .__Skip_Fire) > -128)
   2467  1503		       d0 76		      BNE	.__Skip_Fire
   2468  1505				  -	      else
   2469  1505				  -	      beq	.20skip__Skip_Fire
   2470  1505				  -	      jmp	.__Skip_Fire
   2471  1505				  -.20skip__Skip_Fire
   2472  1505					      endif
   2473  1505		       a5 d8		      LDA	_Bit0_P1_Dir_Up
   2474  1507		       4a		      LSR
   2475  1508					      if	((* - .__Skip_Fire) < 127) && ((* - .__Skip_Fire) > -128)
   2476  1508		       b0 71		      bcs	.__Skip_Fire
   2477  150a				  -	      else
   2478  150a				  -	      bcc	.21skip__Skip_Fire
   2479  150a				  -	      jmp	.__Skip_Fire
   2480  150a				  -.21skip__Skip_Fire
   2481  150a					      endif
   2482  150a				   .
   2483  150a							; 
   2484  150a
   2485  150a				   .
   2486  150a							; 
   2487  150a
   2488  150a				   .
   2489  150a							; 
   2490  150a
   2491  150a				   .L0388		;  _BitOp_M0_Dir  =  _BitOp_P1_Dir
   2492  150a
   2493  150a		       a5 d8		      LDA	_BitOp_P1_Dir
   2494  150c		       85 d7		      STA	_BitOp_M0_Dir
   2495  150e				   .
   2496  150e							; 
   2497  150e
   2498  150e				   .L0389		;  if _BitOp_M0_Dir then _Skip_correct_initial_M0_Dir
   2499  150e
   2500  150e		       a5 d7		      LDA	_BitOp_M0_Dir
   2501  1510					      if	((* - ._Skip_correct_initial_M0_Dir) < 127) && ((* - ._Skip_correct_initial_M0_Dir) > -128)
   2502  1510		       d0 0f		      BNE	._Skip_correct_initial_M0_Dir
   2503  1512				  -	      else
   2504  1512				  -	      beq	.22skip_Skip_correct_initial_M0_Dir
   2505  1512				  -	      jmp	._Skip_correct_initial_M0_Dir
   2506  1512				  -.22skip_Skip_correct_initial_M0_Dir
   2507  1512					      endif
   2508  1512				   .L0390		;  if _Bit6_Flip_P1{6} then _BitOp_M0_Dir  =  4 else _BitOp_M0_Dir  =	8
   2509  1512
   2510  1512		       24 ec		      BIT	_Bit6_Flip_P1
   2511  1514		       50 07		      BVC	.skipL0390
   2512  1516				   .condpart43
   2513  1516		       a9 04		      LDA	#4
   2514  1518		       85 d7		      STA	_BitOp_M0_Dir
   2515  151a		       4c 21 95 	      jmp	.skipelse3
   2516  151d				   .skipL0390
   2517  151d		       a9 08		      LDA	#8
   2518  151f		       85 d7		      STA	_BitOp_M0_Dir
   2519  1521				   .skipelse3
   2520  1521				   ._Skip_correct_initial_M0_Dir
   2521  1521							; _Skip_correct_initial_M0_Dir
   2522  1521
   2523  1521				   .
   2524  1521							; 
   2525  1521
   2526  1521				   .
   2527  1521							; 
   2528  1521
   2529  1521				   .L0391		;  M0y_velocity  =  0.0  :  u	=  0
   2530  1521
   2531  1521		       a2 00		      LDX	#0
   2532  1523		       86 e7		      STX	t
   2533  1525		       a9 00		      LDA	#0
   2534  1527		       85 e6		      STA	M0y_velocity
   2535  1529		       a9 00		      LDA	#0
   2536  152b		       85 e8		      STA	u
   2537  152d				   .
   2538  152d							; 
   2539  152d
   2540  152d				   .
   2541  152d							; 
   2542  152d
   2543  152d				   .L0392		;  if _Bit1_M0_Dir_Down{1} then missile0x  =  player1x  +  9  :  missile0y  =	player1y  -  1
   2544  152d
   2545  152d		       a5 d7		      LDA	_Bit1_M0_Dir_Down
   2546  152f		       29 02		      AND	#2
   2547  1531		       f0 0e		      BEQ	.skipL0392
   2548  1533				   .condpart44
   2549  1533		       a5 81		      LDA	player1x
   2550  1535		       18		      CLC
   2551  1536		       69 09		      ADC	#9
   2552  1538		       85 82		      STA	missile0x
   2553  153a		       a5 86		      LDA	player1y
   2554  153c		       38		      SEC
   2555  153d		       e9 01		      SBC	#1
   2556  153f		       85 91		      STA	missile0y
   2557  1541				   .skipL0392
   2558  1541				   .L0393		;  if _Bit2_M0_Dir_Left{2} then missile0x  =  player1x  +  2  :  missile0y  =	player1y  -  3
   2559  1541
   2560  1541		       a5 d7		      LDA	_Bit2_M0_Dir_Left
   2561  1543		       29 04		      AND	#4
   2562  1545		       f0 0e		      BEQ	.skipL0393
   2563  1547				   .condpart45
   2564  1547		       a5 81		      LDA	player1x
   2565  1549		       18		      CLC
   2566  154a		       69 02		      ADC	#2
   2567  154c		       85 82		      STA	missile0x
   2568  154e		       a5 86		      LDA	player1y
   2569  1550		       38		      SEC
   2570  1551		       e9 03		      SBC	#3
   2571  1553		       85 91		      STA	missile0y
   2572  1555				   .skipL0393
   2573  1555				   .L0394		;  if _Bit3_M0_Dir_Right{3} then missile0x  =	player1x  +  16  :  missile0y  =  player1y  -  3
   2574  1555
   2575  1555		       a5 d7		      LDA	_Bit3_M0_Dir_Right
   2576  1557		       29 08		      AND	#8
   2577  1559		       f0 0e		      BEQ	.skipL0394
   2578  155b				   .condpart46
   2579  155b		       a5 81		      LDA	player1x
   2580  155d		       18		      CLC
   2581  155e		       69 10		      ADC	#16
   2582  1560		       85 82		      STA	missile0x
   2583  1562		       a5 86		      LDA	player1y
   2584  1564		       38		      SEC
   2585  1565		       e9 03		      SBC	#3
   2586  1567		       85 91		      STA	missile0y
   2587  1569				   .skipL0394
   2588  1569				   .
   2589  1569							; 
   2590  1569
   2591  1569				   .
   2592  1569							; 
   2593  1569
   2594  1569				   .L0395		;  if _Ch0_Sound  <>  3 then _Ch0_Sound  =  2	:  _Ch0_Duration  =  1	:  _Ch0_Counter  =  0
   2595  1569
   2596  1569		       a5 d9		      LDA	_Ch0_Sound
   2597  156b		       c9 03		      CMP	#3
   2598  156d		       f0 0c		      BEQ	.skipL0395
   2599  156f				   .condpart47
   2600  156f		       a9 02		      LDA	#2
   2601  1571		       85 d9		      STA	_Ch0_Sound
   2602  1573		       a9 01		      LDA	#1
   2603  1575		       85 da		      STA	_Ch0_Duration
   2604  1577		       a9 00		      LDA	#0
   2605  1579		       85 db		      STA	_Ch0_Counter
   2606  157b				   .skipL0395
   2607  157b				   .
   2608  157b							; 
   2609  157b
   2610  157b				   .__Skip_Fire
   2611  157b							; __Skip_Fire
   2612  157b
   2613  157b				   .
   2614  157b							; 
   2615  157b
   2616  157b				   .
   2617  157b							; 
   2618  157b
   2619  157b				   .
   2620  157b							; 
   2621  157b
   2622  157b				   .
   2623  157b							; 
   2624  157b
   2625  157b				   .L0396		;  if !_BitOp_M0_Dir then goto __Skip_Missile
   2626  157b
   2627  157b		       a5 d7		      LDA	_BitOp_M0_Dir
   2628  157d		       d0 03		      BNE	.skipL0396
   2629  157f				   .condpart48
   2630  157f		       4c f8 95 	      jmp	.__Skip_Missile
   2631  1582
   2632  1582				   .skipL0396
   2633  1582				   .
   2634  1582							; 
   2635  1582
   2636  1582				   .
   2637  1582							; 
   2638  1582
   2639  1582				   .L0397		;  if _Bit1_M0_Dir_Down{1} then missile0y  =  missile0y  +  2
   2640  1582
   2641  1582		       a5 d7		      LDA	_Bit1_M0_Dir_Down
   2642  1584		       29 02		      AND	#2
   2643  1586		       f0 07		      BEQ	.skipL0397
   2644  1588				   .condpart49
   2645  1588		       a5 91		      LDA	missile0y
   2646  158a		       18		      CLC
   2647  158b		       69 02		      ADC	#2
   2648  158d		       85 91		      STA	missile0y
   2649  158f				   .skipL0397
   2650  158f				   .L0398		;  if _Bit2_M0_Dir_Left{2} then missile0x  =  missile0x  -  2
   2651  158f
   2652  158f		       a5 d7		      LDA	_Bit2_M0_Dir_Left
   2653  1591		       29 04		      AND	#4
   2654  1593		       f0 07		      BEQ	.skipL0398
   2655  1595				   .condpart50
   2656  1595		       a5 82		      LDA	missile0x
   2657  1597		       38		      SEC
   2658  1598		       e9 02		      SBC	#2
   2659  159a		       85 82		      STA	missile0x
   2660  159c				   .skipL0398
   2661  159c				   .L0399		;  if _Bit3_M0_Dir_Right{3} then missile0x  =	missile0x  +  2
   2662  159c
   2663  159c		       a5 d7		      LDA	_Bit3_M0_Dir_Right
   2664  159e		       29 08		      AND	#8
   2665  15a0		       f0 07		      BEQ	.skipL0399
   2666  15a2				   .condpart51
   2667  15a2		       a5 82		      LDA	missile0x
   2668  15a4		       18		      CLC
   2669  15a5		       69 02		      ADC	#2
   2670  15a7		       85 82		      STA	missile0x
   2671  15a9				   .skipL0399
   2672  15a9				   .
   2673  15a9							; 
   2674  15a9
   2675  15a9				   .L0400		;  rem apply gravity
   2676  15a9
   2677  15a9				   .L0401		;  M0y_velocity  =  M0y_velocity  +  gravity_missile0
   2678  15a9
   2679  15a9		       a5 e7		      LDA	t
   2680  15ab		       18		      CLC
   2681  15ac		       69 06		      ADC	#6
   2682  15ae		       85 e7		      STA	t
   2683  15b0		       a5 e6		      LDA	M0y_velocity
   2684  15b2		       69 00		      ADC	#0
   2685  15b4		       85 e6		      STA	M0y_velocity
   2686  15b6				   .L0402		;  M0y_position  =  M0y_position  +  M0y_velocity
   2687  15b6
   2688  15b6		       a5 e8		      LDA	u
   2689  15b8		       18		      CLC
   2690  15b9		       65 e7		      ADC	t
   2691  15bb		       85 e8		      STA	u
   2692  15bd		       a5 91		      LDA	M0y_position
   2693  15bf		       65 e6		      ADC	M0y_velocity
   2694  15c1		       85 91		      STA	M0y_position
   2695  15c3				   .
   2696  15c3							; 
   2697  15c3
   2698  15c3				   .
   2699  15c3							; 
   2700  15c3
   2701  15c3				   .
   2702  15c3							; 
   2703  15c3
   2704  15c3				   .L0403		;  if missile0y  <  _M_Edge_Top then goto __Delete_Missile
   2705  15c3
   2706  15c3		       a5 91		      LDA	missile0y
   2707  15c5		       c9 02		      CMP	#_M_Edge_Top
   2708  15c7		       b0 03		      BCS	.skipL0403
   2709  15c9				   .condpart52
   2710  15c9		       4c ee 95 	      jmp	.__Delete_Missile
   2711  15cc
   2712  15cc				   .skipL0403
   2713  15cc				   .L0404		;  if missile0y  >  _M_Edge_Bottom then goto __Delete_Missile
   2714  15cc
   2715  15cc		       a9 58		      LDA	#_M_Edge_Bottom
   2716  15ce		       c5 91		      CMP	missile0y
   2717  15d0		       b0 03		      BCS	.skipL0404
   2718  15d2				   .condpart53
   2719  15d2		       4c ee 95 	      jmp	.__Delete_Missile
   2720  15d5
   2721  15d5				   .skipL0404
   2722  15d5				   .L0405		;  if missile0x  <  _M_Edge_Left then goto __Delete_Missile
   2723  15d5
   2724  15d5		       a5 82		      LDA	missile0x
   2725  15d7		       c9 0e		      CMP	#_M_Edge_Left
   2726  15d9		       b0 03		      BCS	.skipL0405
   2727  15db				   .condpart54
   2728  15db		       4c ee 95 	      jmp	.__Delete_Missile
   2729  15de
   2730  15de				   .skipL0405
   2731  15de				   .L0406		;  if missile0x  >  _M_Edge_Right then goto __Delete_Missile
   2732  15de
   2733  15de		       a9 94		      LDA	#_M_Edge_Right
   2734  15e0		       c5 82		      CMP	missile0x
   2735  15e2		       b0 03		      BCS	.skipL0406
   2736  15e4				   .condpart55
   2737  15e4		       4c ee 95 	      jmp	.__Delete_Missile
   2738  15e7
   2739  15e7				   .skipL0406
   2740  15e7				   .
   2741  15e7							; 
   2742  15e7
   2743  15e7				   .
   2744  15e7							; 
   2745  15e7
   2746  15e7				   .L0407		;  if !collision(playfield,missile0) then goto __Skip_Missile
   2747  15e7
   2748  15e7		       24 04		      bit	CXM0FB
   2749  15e9		       30 03		      BMI	.skipL0407
   2750  15eb				   .condpart56
   2751  15eb		       4c f8 95 	      jmp	.__Skip_Missile
   2752  15ee
   2753  15ee				   .skipL0407
   2754  15ee				   .
   2755  15ee							; 
   2756  15ee
   2757  15ee				   .
   2758  15ee							; 
   2759  15ee
   2760  15ee				   .
   2761  15ee							; 
   2762  15ee
   2763  15ee				   .
   2764  15ee							; 
   2765  15ee
   2766  15ee				   .__Delete_Missile
   2767  15ee							; __Delete_Missile
   2768  15ee
   2769  15ee				   .
   2770  15ee							; 
   2771  15ee
   2772  15ee				   .
   2773  15ee							; 
   2774  15ee
   2775  15ee				   .L0408		;  _BitOp_M0_Dir  =  0  :  missile0x  =  200  :  missile0y  =	200
   2776  15ee
   2777  15ee		       a9 00		      LDA	#0
   2778  15f0		       85 d7		      STA	_BitOp_M0_Dir
   2779  15f2		       a9 c8		      LDA	#200
   2780  15f4		       85 82		      STA	missile0x
   2781  15f6		       85 91		      STA	missile0y
   2782  15f8				   .
   2783  15f8							; 
   2784  15f8
   2785  15f8				   .__Skip_Missile
   2786  15f8							; __Skip_Missile
   2787  15f8
   2788  15f8				   .
   2789  15f8							; 
   2790  15f8
   2791  15f8				   .
   2792  15f8							; 
   2793  15f8
   2794  15f8				   .
   2795  15f8							; 
   2796  15f8
   2797  15f8				   .
   2798  15f8							; 
   2799  15f8
   2800  15f8				   .L0409		;  if !collision(player0,missile0) then __Skip_Shot_Enemy
   2801  15f8
   2802  15f8		       24 00		      bit	CXM0P
   2803  15fa					      if	((* - .__Skip_Shot_Enemy) < 127) && ((* - .__Skip_Shot_Enemy) > -128)
   2804  15fa		       50 52		      bvc	.__Skip_Shot_Enemy
   2805  15fc				  -	      else
   2806  15fc				  -	      bvs	.23skip__Skip_Shot_Enemy
   2807  15fc				  -	      jmp	.__Skip_Shot_Enemy
   2808  15fc				  -.23skip__Skip_Shot_Enemy
   2809  15fc					      endif
   2810  15fc				   .
   2811  15fc							; 
   2812  15fc
   2813  15fc				   .
   2814  15fc							; 
   2815  15fc
   2816  15fc				   .L0410		;  _BitOp_M0_Dir  =  0  :  missile0x  =  200  :  missile0y  =	200
   2817  15fc
   2818  15fc		       a9 00		      LDA	#0
   2819  15fe		       85 d7		      STA	_BitOp_M0_Dir
   2820  1600		       a9 c8		      LDA	#200
   2821  1602		       85 82		      STA	missile0x
   2822  1604		       85 91		      STA	missile0y
   2823  1606				   .
   2824  1606							; 
   2825  1606
   2826  1606				   .L0411		;  if roommate_type  >  1 then __Skip_Shot_Enemy
   2827  1606
   2828  1606		       a9 01		      LDA	#1
   2829  1608		       c5 de		      CMP	roommate_type
   2830  160a					      if	((* - .__Skip_Shot_Enemy) < 127) && ((* - .__Skip_Shot_Enemy) > -128)
   2831  160a		       90 42		      bcc	.__Skip_Shot_Enemy
   2832  160c				  -	      else
   2833  160c				  -	      bcs	.24skip__Skip_Shot_Enemy
   2834  160c				  -	      jmp	.__Skip_Shot_Enemy
   2835  160c				  -.24skip__Skip_Shot_Enemy
   2836  160c					      endif
   2837  160c				   .
   2838  160c							; 
   2839  160c
   2840  160c				   .L0412		;  _Ch0_Sound	=  1  :  _Ch0_Duration	=  1  :  _Ch0_Counter  =  0
   2841  160c
   2842  160c		       a9 01		      LDA	#1
   2843  160e		       85 d9		      STA	_Ch0_Sound
   2844  1610		       85 da		      STA	_Ch0_Duration
   2845  1612		       a9 00		      LDA	#0
   2846  1614		       85 db		      STA	_Ch0_Counter
   2847  1616				   .
   2848  1616							; 
   2849  1616
   2850  1616				   .
   2851  1616							; 
   2852  1616
   2853  1616				   .L0413		;  player0y  =  200  :  w_roommate_startpos_y	=  200	:  if roommate_type then score	=  score  +  bonus_hit_air_missile else score  =  score  +  bonus_hit_tank
   2854  1616
   2855  1616		       a9 c8		      LDA	#200
   2856  1618		       85 85		      STA	player0y
   2857  161a		       8d 68 f0 	      STA	w_roommate_startpos_y
   2858  161d		       a5 de		      LDA	roommate_type
   2859  161f		       f0 18		      BEQ	.skipL0413
   2860  1621				   .condpart57
   2861  1621		       f8		      SED
   2862  1622		       18		      CLC
   2863  1623		       a5 95		      LDA	score+2
   2864  1625		       69 40		      ADC	#$40
   2865  1627		       85 95		      STA	score+2
   2866  1629		       a5 94		      LDA	score+1
   2867  162b		       69 00		      ADC	#$00
   2868  162d		       85 94		      STA	score+1
   2869  162f		       a5 93		      LDA	score
   2870  1631		       69 00		      ADC	#$00
   2871  1633		       85 93		      STA	score
   2872  1635		       d8		      CLD
   2873  1636		       4c 4e 96 	      jmp	.skipelse4
   2874  1639				   .skipL0413
   2875  1639		       f8		      SED
   2876  163a		       18		      CLC
   2877  163b		       a5 95		      LDA	score+2
   2878  163d		       69 60		      ADC	#$60
   2879  163f		       85 95		      STA	score+2
   2880  1641		       a5 94		      LDA	score+1
   2881  1643		       69 00		      ADC	#$00
   2882  1645		       85 94		      STA	score+1
   2883  1647		       a5 93		      LDA	score
   2884  1649		       69 00		      ADC	#$00
   2885  164b		       85 93		      STA	score
   2886  164d		       d8		      CLD
   2887  164e				   .skipelse4
   2888  164e				   .
   2889  164e							; 
   2890  164e
   2891  164e				   .__Skip_Shot_Enemy
   2892  164e							; __Skip_Shot_Enemy
   2893  164e
   2894  164e				   .
   2895  164e							; 
   2896  164e
   2897  164e				   .
   2898  164e							; 
   2899  164e
   2900  164e				   .
   2901  164e							; 
   2902  164e
   2903  164e				   .
   2904  164e							; 
   2905  164e
   2906  164e				   .L0414		;  if !collision(ball,missile0) then __Skip_Shot_Extra_Wall
   2907  164e
   2908  164e		       24 04		      bit	CXM0FB
   2909  1650					      if	((* - .__Skip_Shot_Extra_Wall) < 127) && ((* - .__Skip_Shot_Extra_Wall) > -128)
   2910  1650		       50 61		      bvc	.__Skip_Shot_Extra_Wall
   2911  1652				  -	      else
   2912  1652				  -	      bvs	.25skip__Skip_Shot_Extra_Wall
   2913  1652				  -	      jmp	.__Skip_Shot_Extra_Wall
   2914  1652				  -.25skip__Skip_Shot_Extra_Wall
   2915  1652					      endif
   2916  1652				   .
   2917  1652							; 
   2918  1652
   2919  1652				   .
   2920  1652							; 
   2921  1652
   2922  1652				   .L0415		;  _BitOp_M0_Dir  =  0  :  missile0x  =  200  :  missile0y  =	200
   2923  1652
   2924  1652		       a9 00		      LDA	#0
   2925  1654		       85 d7		      STA	_BitOp_M0_Dir
   2926  1656		       a9 c8		      LDA	#200
   2927  1658		       85 82		      STA	missile0x
   2928  165a		       85 91		      STA	missile0y
   2929  165c				   .
   2930  165c							; 
   2931  165c
   2932  165c				   .L0416		;  if _BitOp_Ball_Shot_Dir then _BitOp_Ball_Shot_Dir  =  0  :	bally  =  0
   2933  165c
   2934  165c		       a5 d6		      LDA	_BitOp_Ball_Shot_Dir
   2935  165e		       f0 06		      BEQ	.skipL0416
   2936  1660				   .condpart58
   2937  1660		       a9 00		      LDA	#0
   2938  1662		       85 d6		      STA	_BitOp_Ball_Shot_Dir
   2939  1664		       85 89		      STA	bally
   2940  1666				   .skipL0416
   2941  1666				   .
   2942  1666							; 
   2943  1666
   2944  1666				   .
   2945  1666							; 
   2946  1666
   2947  1666				   .L0417		;  if r_extra_wall_type_and_range{0} then __Skip_Shot_Extra_Wall
   2948  1666
   2949  1666		       ad e9 f0 	      LDA	r_extra_wall_type_and_range
   2950  1669		       4a		      LSR
   2951  166a					      if	((* - .__Skip_Shot_Extra_Wall) < 127) && ((* - .__Skip_Shot_Extra_Wall) > -128)
   2952  166a		       b0 47		      bcs	.__Skip_Shot_Extra_Wall
   2953  166c				  -	      else
   2954  166c				  -	      bcc	.26skip__Skip_Shot_Extra_Wall
   2955  166c				  -	      jmp	.__Skip_Shot_Extra_Wall
   2956  166c				  -.26skip__Skip_Shot_Extra_Wall
   2957  166c					      endif
   2958  166c				   .
   2959  166c							; 
   2960  166c
   2961  166c				   .L0418		;  _Ch0_Sound	=  1  :  _Ch0_Duration	=  1  :  _Ch0_Counter  =  0
   2962  166c
   2963  166c		       a9 01		      LDA	#1
   2964  166e		       85 d9		      STA	_Ch0_Sound
   2965  1670		       85 da		      STA	_Ch0_Duration
   2966  1672		       a9 00		      LDA	#0
   2967  1674		       85 db		      STA	_Ch0_Counter
   2968  1676				   .L0419		;  bally  =  0  :  w_extra_wall_startpos_1_x  =  200  :  if r_extra_wall_type_and_range  >  2 then score  =  score  +	bonus_hit_active_wall else score  =  score  +  bonus_hit_wall
   2969  1676
   2970  1676		       a9 00		      LDA	#0
   2971  1678		       85 89		      STA	bally
   2972  167a		       a9 c8		      LDA	#200
   2973  167c		       8d 6c f0 	      STA	w_extra_wall_startpos_1_x
   2974  167f		       a9 02		      LDA	#2
   2975  1681		       cd e9 f0 	      CMP	r_extra_wall_type_and_range
   2976  1684		       b0 18		      BCS	.skipL0419
   2977  1686				   .condpart59
   2978  1686		       f8		      SED
   2979  1687		       18		      CLC
   2980  1688		       a5 95		      LDA	score+2
   2981  168a		       69 30		      ADC	#$30
   2982  168c		       85 95		      STA	score+2
   2983  168e		       a5 94		      LDA	score+1
   2984  1690		       69 00		      ADC	#$00
   2985  1692		       85 94		      STA	score+1
   2986  1694		       a5 93		      LDA	score
   2987  1696		       69 00		      ADC	#$00
   2988  1698		       85 93		      STA	score
   2989  169a		       d8		      CLD
   2990  169b		       4c b3 96 	      jmp	.skipelse5
   2991  169e				   .skipL0419
   2992  169e		       f8		      SED
   2993  169f		       18		      CLC
   2994  16a0		       a5 95		      LDA	score+2
   2995  16a2		       69 10		      ADC	#$10
   2996  16a4		       85 95		      STA	score+2
   2997  16a6		       a5 94		      LDA	score+1
   2998  16a8		       69 00		      ADC	#$00
   2999  16aa		       85 94		      STA	score+1
   3000  16ac		       a5 93		      LDA	score
   3001  16ae		       69 00		      ADC	#$00
   3002  16b0		       85 93		      STA	score
   3003  16b2		       d8		      CLD
   3004  16b3				   .skipelse5
   3005  16b3				   .
   3006  16b3							; 
   3007  16b3
   3008  16b3				   .__Skip_Shot_Extra_Wall
   3009  16b3							; __Skip_Shot_Extra_Wall
   3010  16b3
   3011  16b3				   .
   3012  16b3							; 
   3013  16b3
   3014  16b3				   .
   3015  16b3							; 
   3016  16b3
   3017  16b3				   .
   3018  16b3							; 
   3019  16b3
   3020  16b3				   .L0420		;  if !collision(player1,player0) then goto __Skip_P1_Touched_P0
   3021  16b3
   3022  16b3		       24 07		      bit	CXPPMM
   3023  16b5		       30 03		      BMI	.skipL0420
   3024  16b7				   .condpart60
   3025  16b7		       4c 50 97 	      jmp	.__Skip_P1_Touched_P0
   3026  16ba
   3027  16ba				   .skipL0420
   3028  16ba				   .
   3029  16ba							; 
   3030  16ba
   3031  16ba				   .
   3032  16ba							; 
   3033  16ba
   3034  16ba				   .L0421		;  if roommate_type  <  2 then player0y  =  200  :  w_roommate_startpos_y  =  200  :  goto _Set_Explosion
   3035  16ba
   3036  16ba		       a5 de		      LDA	roommate_type
   3037  16bc		       c9 02		      CMP	#2
   3038  16be		       b0 0a		      BCS	.skipL0421
   3039  16c0				   .condpart61
   3040  16c0		       a9 c8		      LDA	#200
   3041  16c2		       85 85		      STA	player0y
   3042  16c4		       8d 68 f0 	      STA	w_roommate_startpos_y
   3043  16c7		       4c 58 9b 	      jmp	._Set_Explosion
   3044  16ca
   3045  16ca				   .skipL0421
   3046  16ca				   .
   3047  16ca							; 
   3048  16ca
   3049  16ca				   .
   3050  16ca							; 
   3051  16ca
   3052  16ca				   .L0422		;  if _Ch0_Sound  <>  3 then _Ch0_Sound  =  3	:  _Ch0_Duration  =  1	:  _Ch0_Counter  =  0
   3053  16ca
   3054  16ca		       a5 d9		      LDA	_Ch0_Sound
   3055  16cc		       c9 03		      CMP	#3
   3056  16ce		       f0 0c		      BEQ	.skipL0422
   3057  16d0				   .condpart62
   3058  16d0		       a9 03		      LDA	#3
   3059  16d2		       85 d9		      STA	_Ch0_Sound
   3060  16d4		       a9 01		      LDA	#1
   3061  16d6		       85 da		      STA	_Ch0_Duration
   3062  16d8		       a9 00		      LDA	#0
   3063  16da		       85 db		      STA	_Ch0_Counter
   3064  16dc				   .skipL0422
   3065  16dc				   .L0423		;  if roommate_type  =  3 then men_to_rescue  =  men_to_rescue  -  12	:  player0y  =	200  :	w_roommate_startpos_y  =  200  :  score  =  score  +  bonus_man_rescue	:  if !men_to_rescue then goto _Level_Completed
   3066  16dc
   3067  16dc		       a5 de		      LDA	roommate_type
   3068  16de		       c9 03		      CMP	#3
   3069  16e0		       d0 2a		      BNE	.skipL0423
   3070  16e2				   .condpart63
   3071  16e2		       a5 b0		      LDA	men_to_rescue
   3072  16e4		       38		      SEC
   3073  16e5		       e9 0c		      SBC	#12
   3074  16e7		       85 b0		      STA	men_to_rescue
   3075  16e9		       a9 c8		      LDA	#200
   3076  16eb		       85 85		      STA	player0y
   3077  16ed		       8d 68 f0 	      STA	w_roommate_startpos_y
   3078  16f0		       f8		      SED
   3079  16f1		       18		      CLC
   3080  16f2		       a5 95		      LDA	score+2
   3081  16f4		       69 50		      ADC	#$50
   3082  16f6		       85 95		      STA	score+2
   3083  16f8		       a5 94		      LDA	score+1
   3084  16fa		       69 01		      ADC	#$01
   3085  16fc		       85 94		      STA	score+1
   3086  16fe		       a5 93		      LDA	score
   3087  1700		       69 00		      ADC	#$00
   3088  1702		       85 93		      STA	score
   3089  1704		       d8		      CLD
   3090  1705		       a5 b0		      LDA	men_to_rescue
   3091  1707		       d0 03		      BNE	.skip63then
   3092  1709				   .condpart64
   3093  1709		       4c 15 9c 	      jmp	._Level_Completed
   3094  170c
   3095  170c				   .skip63then
   3096  170c				   .skipL0423
   3097  170c				   .L0424		;  if roommate_type  =  2 then P1y_velocity  =  0.0  :  x  =  0  :  pfscore2  =  pfscore2  *  2  |  1	:  player1y  =	player1y  -  1	:  if !_Bit3_Safe_Point_reached{3} then WriteSendBuffer  =  req_safe_point  :  _Bit3_Safe_Point_reached{3}  =  1  :  Safe_Point_P1_x  =  player1x  :  Safe_Point_P1_y  =  player1y  :  _Bit1_Safe_Point_P1_Flip{1}  =  _Bit6_Flip_P1{6}
   3098  170c
   3099  170c		       a5 de		      LDA	roommate_type
   3100  170e		       c9 02		      CMP	#2
   3101  1710		       d0 3e		      BNE	.skipL0424
   3102  1712				   .condpart65
   3103  1712		       a2 00		      LDX	#0
   3104  1714		       86 ea		      STX	w
   3105  1716		       a9 00		      LDA	#0
   3106  1718		       85 e9		      STA	P1y_velocity
   3107  171a		       a9 00		      LDA	#0
   3108  171c		       85 eb		      STA	x
   3109  171e							; complex statement detected
   3110  171e		       a5 f3		      LDA	pfscore2
   3111  1720		       0a		      asl
   3112  1721		       09 01		      ORA	#1
   3113  1723		       85 f3		      STA	pfscore2
   3114  1725		       c6 86		      DEC	player1y
   3115  1727		       a5 ec		      LDA	_Bit3_Safe_Point_reached
   3116  1729		       29 08		      AND	#8
   3117  172b		       d0 23		      BNE	.skip65then
   3118  172d				   .condpart66
   3119  172d		       a9 08		      LDA	#req_safe_point
   3120  172f		       8d f1 1f 	      STA	WriteSendBuffer
   3121  1732		       a5 ec		      LDA	_Bit3_Safe_Point_reached
   3122  1734		       09 08		      ORA	#8
   3123  1736		       85 ec		      STA	_Bit3_Safe_Point_reached
   3124  1738		       a5 81		      LDA	player1x
   3125  173a		       85 e0		      STA	Safe_Point_P1_x
   3126  173c		       a5 86		      LDA	player1y
   3127  173e		       85 e1		      STA	Safe_Point_P1_y
   3128  1740		       a5 ec		      LDA	_Bit6_Flip_P1
   3129  1742		       29 40		      AND	#64
   3130  1744		       08		      PHP
   3131  1745		       a5 df		      LDA	_Bit1_Safe_Point_P1_Flip
   3132  1747		       29 fd		      AND	#253
   3133  1749		       28		      PLP
   3134  174a		       f0 02		      .byte.b	$F0, $02
   3135  174c		       09 02		      ORA	#2
   3136  174e		       85 df		      STA	_Bit1_Safe_Point_P1_Flip
   3137  1750				   .skip65then
   3138  1750				   .skipL0424
   3139  1750				   .__Skip_P1_Touched_P0
   3140  1750							; __Skip_P1_Touched_P0
   3141  1750
   3142  1750				   .
   3143  1750							; 
   3144  1750
   3145  1750				   .
   3146  1750							; 
   3147  1750
   3148  1750				   .
   3149  1750							; 
   3150  1750
   3151  1750				   .L0425		;  if collision(player1,ball)	||  collision(player1,playfield) then goto _Set_Explosion
   3152  1750
   3153  1750		       24 03		      bit	CXP1FB
   3154  1752		       50 03		      BVC	.skipL0425
   3155  1754				   .condpart67
   3156  1754		       4c 5b 97 	      jmp	.condpart68
   3157  1757				   .skipL0425
   3158  1757		       24 03		      bit	CXP1FB
   3159  1759		       10 03		      BPL	.skip12OR
   3160  175b				   .condpart68
   3161  175b		       4c 58 9b 	      jmp	._Set_Explosion
   3162  175e
   3163  175e				   .skip12OR
   3164  175e				   .
   3165  175e							; 
   3166  175e
   3167  175e				   .
   3168  175e							; 
   3169  175e
   3170  175e				   .L0426		;  temp4  =  _BitOp_P1_Dir
   3171  175e
   3172  175e		       a5 d8		      LDA	_BitOp_P1_Dir
   3173  1760		       85 9f		      STA	temp4
   3174  1762				   .L0427		;  _BitOp_P1_Dir  =  0
   3175  1762
   3176  1762		       a9 00		      LDA	#0
   3177  1764		       85 d8		      STA	_BitOp_P1_Dir
   3178  1766				   .L0428		;  if !joy0up	||  !pfscore2 then _skip_joystick_up
   3179  1766
   3180  1766		       a9 10		      lda	#$10
   3181  1768		       2c 80 02 	      bit	SWCHA
   3182  176b					      if	((* - ._skip_joystick_up) < 127) && ((* - ._skip_joystick_up) > -128)
   3183  176b		       d0 28		      BNE	._skip_joystick_up
   3184  176d				  -	      else
   3185  176d				  -	      beq	.27skip_skip_joystick_up
   3186  176d				  -	      jmp	._skip_joystick_up
   3187  176d				  -.27skip_skip_joystick_up
   3188  176d					      endif
   3189  176d		       a5 f3		      LDA	pfscore2
   3190  176f					      if	((* - ._skip_joystick_up) < 127) && ((* - ._skip_joystick_up) > -128)
   3191  176f		       f0 24		      BEQ	._skip_joystick_up
   3192  1771				  -	      else
   3193  1771				  -	      bne	.28skip_skip_joystick_up
   3194  1771				  -	      jmp	._skip_joystick_up
   3195  1771				  -.28skip_skip_joystick_up
   3196  1771					      endif
   3197  1771				   .L0429		;  if temp4{0}  ||  !gamenumber{0} then player1y  =  player1y	-  1
   3198  1771
   3199  1771		       a5 9f		      LDA	temp4
   3200  1773		       4a		      LSR
   3201  1774		       90 03		      BCC	.skipL0429
   3202  1776				   .condpart69
   3203  1776		       4c 7e 97 	      jmp	.condpart70
   3204  1779				   .skipL0429
   3205  1779		       a5 a6		      LDA	gamenumber
   3206  177b		       4a		      LSR
   3207  177c		       b0 02		      BCS	.skip14OR
   3208  177e				   .condpart70
   3209  177e		       c6 86		      DEC	player1y
   3210  1780				   .skip14OR
   3211  1780				   .L0430		;  P1y_velocity  =  0.0  :  x	=  0  :  _Bit0_P1_Dir_Up{0}  =	1  :  goto skip_gravity
   3212  1780
   3213  1780		       a2 00		      LDX	#0
   3214  1782		       86 ea		      STX	w
   3215  1784		       a9 00		      LDA	#0
   3216  1786		       85 e9		      STA	P1y_velocity
   3217  1788		       a9 00		      LDA	#0
   3218  178a		       85 eb		      STA	x
   3219  178c		       a5 d8		      LDA	_Bit0_P1_Dir_Up
   3220  178e		       09 01		      ORA	#1
   3221  1790		       85 d8		      STA	_Bit0_P1_Dir_Up
   3222  1792		       4c c8 97 	      jmp	.skip_gravity
   3223  1795
   3224  1795				   ._skip_joystick_up
   3225  1795							; _skip_joystick_up
   3226  1795
   3227  1795				   .
   3228  1795							; 
   3229  1795
   3230  1795				   .
   3231  1795							; 
   3232  1795
   3233  1795				   .L0431		;  if joy0down then player1y  =  player1y  +  1  :  _Bit1_P1_Dir_Down{1}  =  1
   3234  1795
   3235  1795		       a9 20		      lda	#$20
   3236  1797		       2c 80 02 	      bit	SWCHA
   3237  179a		       d0 08		      BNE	.skipL0431
   3238  179c				   .condpart71
   3239  179c		       e6 86		      INC	player1y
   3240  179e		       a5 d8		      LDA	_Bit1_P1_Dir_Down
   3241  17a0		       09 02		      ORA	#2
   3242  17a2		       85 d8		      STA	_Bit1_P1_Dir_Down
   3243  17a4				   .skipL0431
   3244  17a4				   .
   3245  17a4							; 
   3246  17a4
   3247  17a4				   .L0432		;  if frame_counter{0}  &&  gamenumber{0} then skip_gravity
   3248  17a4
   3249  17a4		       a5 d5		      LDA	frame_counter
   3250  17a6		       4a		      LSR
   3251  17a7		       90 05		      BCC	.skipL0432
   3252  17a9				   .condpart72
   3253  17a9		       a5 a6		      LDA	gamenumber
   3254  17ab		       4a		      LSR
   3255  17ac					      if	((* - .skip_gravity) < 127) && ((* - .skip_gravity) > -128)
   3256  17ac		       b0 1a		      bcs	.skip_gravity
   3257  17ae				  -	      else
   3258  17ae				  -	      bcc	.29skipskip_gravity
   3259  17ae				  -	      jmp	.skip_gravity
   3260  17ae				  -.29skipskip_gravity
   3261  17ae					      endif
   3262  17ae				   .skipL0432
   3263  17ae				   .L0433		;  rem apply gravity
   3264  17ae
   3265  17ae				   .L0434		;  P1y_velocity  =  P1y_velocity  +  gravity_player1
   3266  17ae
   3267  17ae		       a5 ea		      LDA	w
   3268  17b0		       18		      CLC
   3269  17b1		       69 01		      ADC	#1
   3270  17b3		       85 ea		      STA	w
   3271  17b5		       a5 e9		      LDA	P1y_velocity
   3272  17b7		       69 00		      ADC	#0
   3273  17b9		       85 e9		      STA	P1y_velocity
   3274  17bb				   .L0435		;  P1y_position  =  P1y_position  +  P1y_velocity
   3275  17bb
   3276  17bb		       a5 eb		      LDA	x
   3277  17bd		       18		      CLC
   3278  17be		       65 ea		      ADC	w
   3279  17c0		       85 eb		      STA	x
   3280  17c2		       a5 86		      LDA	P1y_position
   3281  17c4		       65 e9		      ADC	P1y_velocity
   3282  17c6		       85 86		      STA	P1y_position
   3283  17c8				   .
   3284  17c8							; 
   3285  17c8
   3286  17c8				   .skip_gravity
   3287  17c8							; skip_gravity
   3288  17c8
   3289  17c8				   .
   3290  17c8							; 
   3291  17c8
   3292  17c8				   .L0436		;  if !joy0left then _skip_joystick_left
   3293  17c8
   3294  17c8		       2c 80 02 	      bit	SWCHA
   3295  17cb					      if	((* - ._skip_joystick_left) < 127) && ((* - ._skip_joystick_left) > -128)
   3296  17cb		       70 1f		      bvs	._skip_joystick_left
   3297  17cd				  -	      else
   3298  17cd				  -	      bvc	.30skip_skip_joystick_left
   3299  17cd				  -	      jmp	._skip_joystick_left
   3300  17cd				  -.30skip_skip_joystick_left
   3301  17cd					      endif
   3302  17cd				   .L0437		;  if temp4{2}  ||  !gamenumber{0} then player1x  =  player1x	-  1
   3303  17cd
   3304  17cd		       a5 9f		      LDA	temp4
   3305  17cf		       29 04		      AND	#4
   3306  17d1		       f0 03		      BEQ	.skipL0437
   3307  17d3				   .condpart73
   3308  17d3		       4c db 97 	      jmp	.condpart74
   3309  17d6				   .skipL0437
   3310  17d6		       a5 a6		      LDA	gamenumber
   3311  17d8		       4a		      LSR
   3312  17d9		       b0 02		      BCS	.skip16OR
   3313  17db				   .condpart74
   3314  17db		       c6 81		      DEC	player1x
   3315  17dd				   .skip16OR
   3316  17dd				   .L0438		;  _Bit6_Flip_P1{6}  =  1  :  _Bit2_P1_Dir_Left{2}  =	1  :  goto _skip_move
   3317  17dd
   3318  17dd		       a5 ec		      LDA	_Bit6_Flip_P1
   3319  17df		       09 40		      ORA	#64
   3320  17e1		       85 ec		      STA	_Bit6_Flip_P1
   3321  17e3		       a5 d8		      LDA	_Bit2_P1_Dir_Left
   3322  17e5		       09 04		      ORA	#4
   3323  17e7		       85 d8		      STA	_Bit2_P1_Dir_Left
   3324  17e9		       4c 0d 98 	      jmp	._skip_move
   3325  17ec
   3326  17ec				   ._skip_joystick_left
   3327  17ec							; _skip_joystick_left
   3328  17ec
   3329  17ec				   .
   3330  17ec							; 
   3331  17ec
   3332  17ec				   .L0439		;  if !joy0right then _skip_move
   3333  17ec
   3334  17ec		       2c 80 02 	      bit	SWCHA
   3335  17ef					      if	((* - ._skip_move) < 127) && ((* - ._skip_move) > -128)
   3336  17ef		       30 1c		      bmi	._skip_move
   3337  17f1				  -	      else
   3338  17f1				  -	      bpl	.31skip_skip_move
   3339  17f1				  -	      jmp	._skip_move
   3340  17f1				  -.31skip_skip_move
   3341  17f1					      endif
   3342  17f1				   .L0440		;  if temp4{3}  ||  !gamenumber{0} then player1x  =  player1x	+  1
   3343  17f1
   3344  17f1		       a5 9f		      LDA	temp4
   3345  17f3		       29 08		      AND	#8
   3346  17f5		       f0 03		      BEQ	.skipL0440
   3347  17f7				   .condpart75
   3348  17f7		       4c ff 97 	      jmp	.condpart76
   3349  17fa				   .skipL0440
   3350  17fa		       a5 a6		      LDA	gamenumber
   3351  17fc		       4a		      LSR
   3352  17fd		       b0 02		      BCS	.skip17OR
   3353  17ff				   .condpart76
   3354  17ff		       e6 81		      INC	player1x
   3355  1801				   .skip17OR
   3356  1801				   .L0441		;  _Bit6_Flip_P1{6}  =  0  :  _Bit3_P1_Dir_Right{3}  =  1
   3357  1801
   3358  1801		       a5 ec		      LDA	_Bit6_Flip_P1
   3359  1803		       29 bf		      AND	#191
   3360  1805		       85 ec		      STA	_Bit6_Flip_P1
   3361  1807		       a5 d8		      LDA	_Bit3_P1_Dir_Right
   3362  1809		       09 08		      ORA	#8
   3363  180b		       85 d8		      STA	_Bit3_P1_Dir_Right
   3364  180d				   .
   3365  180d							; 
   3366  180d
   3367  180d				   ._skip_move
   3368  180d							; _skip_move
   3369  180d
   3370  180d				   .
   3371  180d							; 
   3372  180d
   3373  180d				   .
   3374  180d							; 
   3375  180d
   3376  180d				   .L0442		;  if player1y  <  player_min_y  &&  r_Bit0_room_type_top{0} then player1y  =	player_min_y
   3377  180d
   3378  180d		       a5 86		      LDA	player1y
   3379  180f		       c9 02		      CMP	#player_min_y
   3380  1811		       b0 0a		      BCS	.skipL0442
   3381  1813				   .condpart77
   3382  1813		       ad df f0 	      LDA	r_Bit0_room_type_top
   3383  1816		       4a		      LSR
   3384  1817		       90 04		      BCC	.skip77then
   3385  1819				   .condpart78
   3386  1819		       a9 02		      LDA	#player_min_y
   3387  181b		       85 86		      STA	player1y
   3388  181d				   .skip77then
   3389  181d				   .skipL0442
   3390  181d				   .
   3391  181d							; 
   3392  181d
   3393  181d				   .
   3394  181d							; 
   3395  181d
   3396  181d				   .L0443		;  if player1x  <  player_min_x then _Bit0_New_Room_P1_Flip{0}  =  _Bit6_Flip_P1{6}  :  new_room_player1y  =  player1y  :  new_room_player1x  =  player_max_x	:  gosub _Add_Room_State  :  WriteSendBuffer  =  req_move_left	:  goto _skip_game_action
   3397  181d
   3398  181d		       a5 81		      LDA	player1x
   3399  181f		       c9 0a		      CMP	#player_min_x
   3400  1821		       b0 23		      BCS	.skipL0443
   3401  1823				   .condpart79
   3402  1823		       a5 ec		      LDA	_Bit6_Flip_P1
   3403  1825		       29 40		      AND	#64
   3404  1827		       08		      PHP
   3405  1828		       a5 df		      LDA	_Bit0_New_Room_P1_Flip
   3406  182a		       29 fe		      AND	#254
   3407  182c		       28		      PLP
   3408  182d		       f0 02		      .byte.b	$F0, $02
   3409  182f		       09 01		      ORA	#1
   3410  1831		       85 df		      STA	_Bit0_New_Room_P1_Flip
   3411  1833		       a5 86		      LDA	player1y
   3412  1835		       85 a4		      STA	new_room_player1y
   3413  1837		       a9 86		      LDA	#player_max_x
   3414  1839		       85 a5		      STA	new_room_player1x
   3415  183b		       20 6b 9c 	      jsr	._Add_Room_State
   3416  183e		       a9 03		      LDA	#req_move_left
   3417  1840		       8d f1 1f 	      STA	WriteSendBuffer
   3418  1843		       4c be 98 	      jmp	._skip_game_action
   3419  1846
   3420  1846				   .skipL0443
   3421  1846				   .L0444		;  if player1y  <  player_min_y then _Bit0_New_Room_P1_Flip{0}  =  _Bit6_Flip_P1{6}  :  new_room_player1x  =  player1x  :  new_room_player1y  =  player_max_y	:  gosub _Add_Room_State  :  WriteSendBuffer  =  req_move_up  :  goto _skip_game_action
   3422  1846
   3423  1846		       a5 86		      LDA	player1y
   3424  1848		       c9 02		      CMP	#player_min_y
   3425  184a		       b0 23		      BCS	.skipL0444
   3426  184c				   .condpart80
   3427  184c		       a5 ec		      LDA	_Bit6_Flip_P1
   3428  184e		       29 40		      AND	#64
   3429  1850		       08		      PHP
   3430  1851		       a5 df		      LDA	_Bit0_New_Room_P1_Flip
   3431  1853		       29 fe		      AND	#254
   3432  1855		       28		      PLP
   3433  1856		       f0 02		      .byte.b	$F0, $02
   3434  1858		       09 01		      ORA	#1
   3435  185a		       85 df		      STA	_Bit0_New_Room_P1_Flip
   3436  185c		       a5 81		      LDA	player1x
   3437  185e		       85 a5		      STA	new_room_player1x
   3438  1860		       a9 4c		      LDA	#player_max_y
   3439  1862		       85 a4		      STA	new_room_player1y
   3440  1864		       20 6b 9c 	      jsr	._Add_Room_State
   3441  1867		       a9 04		      LDA	#req_move_up
   3442  1869		       8d f1 1f 	      STA	WriteSendBuffer
   3443  186c		       4c be 98 	      jmp	._skip_game_action
   3444  186f
   3445  186f				   .skipL0444
   3446  186f				   .L0445		;  if player1x  >  player_max_x then _Bit0_New_Room_P1_Flip{0}  =  _Bit6_Flip_P1{6}  :  new_room_player1y  =  player1y  :  new_room_player1x  =  player_min_x	:  gosub _Add_Room_State  :  WriteSendBuffer  =  req_move_right  :  goto _skip_game_action
   3447  186f
   3448  186f		       a9 86		      LDA	#player_max_x
   3449  1871		       c5 81		      CMP	player1x
   3450  1873		       b0 23		      BCS	.skipL0445
   3451  1875				   .condpart81
   3452  1875		       a5 ec		      LDA	_Bit6_Flip_P1
   3453  1877		       29 40		      AND	#64
   3454  1879		       08		      PHP
   3455  187a		       a5 df		      LDA	_Bit0_New_Room_P1_Flip
   3456  187c		       29 fe		      AND	#254
   3457  187e		       28		      PLP
   3458  187f		       f0 02		      .byte.b	$F0, $02
   3459  1881		       09 01		      ORA	#1
   3460  1883		       85 df		      STA	_Bit0_New_Room_P1_Flip
   3461  1885		       a5 86		      LDA	player1y
   3462  1887		       85 a4		      STA	new_room_player1y
   3463  1889		       a9 0a		      LDA	#player_min_x
   3464  188b		       85 a5		      STA	new_room_player1x
   3465  188d		       20 6b 9c 	      jsr	._Add_Room_State
   3466  1890		       a9 05		      LDA	#req_move_right
   3467  1892		       8d f1 1f 	      STA	WriteSendBuffer
   3468  1895		       4c be 98 	      jmp	._skip_game_action
   3469  1898
   3470  1898				   .skipL0445
   3471  1898				   .L0446		;  if player1y  >  player_max_y then _Bit0_New_Room_P1_Flip{0}  =  _Bit6_Flip_P1{6}  :  new_room_player1x  =  player1x  :  new_room_player1y  =  player_min_y	:  gosub _Add_Room_State  :  WriteSendBuffer  =  req_move_down
   3472  1898
   3473  1898		       a9 4c		      LDA	#player_max_y
   3474  189a		       c5 86		      CMP	player1y
   3475  189c		       b0 20		      BCS	.skipL0446
   3476  189e				   .condpart82
   3477  189e		       a5 ec		      LDA	_Bit6_Flip_P1
   3478  18a0		       29 40		      AND	#64
   3479  18a2		       08		      PHP
   3480  18a3		       a5 df		      LDA	_Bit0_New_Room_P1_Flip
   3481  18a5		       29 fe		      AND	#254
   3482  18a7		       28		      PLP
   3483  18a8		       f0 02		      .byte.b	$F0, $02
   3484  18aa		       09 01		      ORA	#1
   3485  18ac		       85 df		      STA	_Bit0_New_Room_P1_Flip
   3486  18ae		       a5 81		      LDA	player1x
   3487  18b0		       85 a5		      STA	new_room_player1x
   3488  18b2		       a9 02		      LDA	#player_min_y
   3489  18b4		       85 a4		      STA	new_room_player1y
   3490  18b6		       20 6b 9c 	      jsr	._Add_Room_State
   3491  18b9		       a9 06		      LDA	#req_move_down
   3492  18bb		       8d f1 1f 	      STA	WriteSendBuffer
   3493  18be				   .skipL0446
   3494  18be				   .
   3495  18be							; 
   3496  18be
   3497  18be				   ._skip_game_action
   3498  18be							; _skip_game_action
   3499  18be
   3500  18be				   .
   3501  18be							; 
   3502  18be
   3503  18be				   .
   3504  18be							; 
   3505  18be
   3506  18be				   .L0447		;  if !_Ch0_Sound then goto __Skip_Ch_0
   3507  18be
   3508  18be		       a5 d9		      LDA	_Ch0_Sound
   3509  18c0		       d0 03		      BNE	.skipL0447
   3510  18c2				   .condpart83
   3511  18c2		       4c f1 99 	      jmp	.__Skip_Ch_0
   3512  18c5
   3513  18c5				   .skipL0447
   3514  18c5				   .
   3515  18c5							; 
   3516  18c5
   3517  18c5				   .
   3518  18c5							; 
   3519  18c5
   3520  18c5				   .L0448		;  _Ch0_Duration  =  _Ch0_Duration  -	1
   3521  18c5
   3522  18c5		       c6 da		      DEC	_Ch0_Duration
   3523  18c7				   .
   3524  18c7							; 
   3525  18c7
   3526  18c7				   .
   3527  18c7							; 
   3528  18c7
   3529  18c7				   .
   3530  18c7							; 
   3531  18c7
   3532  18c7				   .L0449		;  if _Ch0_Duration then goto __Skip_Ch_0
   3533  18c7
   3534  18c7		       a5 da		      LDA	_Ch0_Duration
   3535  18c9		       f0 03		      BEQ	.skipL0449
   3536  18cb				   .condpart84
   3537  18cb		       4c f1 99 	      jmp	.__Skip_Ch_0
   3538  18ce
   3539  18ce				   .skipL0449
   3540  18ce				   .
   3541  18ce							; 
   3542  18ce
   3543  18ce				   .
   3544  18ce							; 
   3545  18ce
   3546  18ce				   .
   3547  18ce							; 
   3548  18ce
   3549  18ce				   .
   3550  18ce							; 
   3551  18ce
   3552  18ce				   .L0450		;  if _Ch0_Sound  <>  1 then goto __Skip_Ch0_Sound_001
   3553  18ce
   3554  18ce		       a5 d9		      LDA	_Ch0_Sound
   3555  18d0		       c9 01		      CMP	#1
   3556  18d2		       f0 03		      BEQ	.skipL0450
   3557  18d4				   .condpart85
   3558  18d4		       4c 1c 99 	      jmp	.__Skip_Ch0_Sound_001
   3559  18d7
   3560  18d7				   .skipL0450
   3561  18d7				   .
   3562  18d7							; 
   3563  18d7
   3564  18d7				   .
   3565  18d7							; 
   3566  18d7
   3567  18d7				   .L0451		;  temp4  =  _SD_Shot_Wall[_Ch0_Counter]
   3568  18d7
   3569  18d7		       a6 db		      LDX	_Ch0_Counter
   3570  18d9		       bd 2c 9d 	      LDA	_SD_Shot_Wall,x
   3571  18dc		       85 9f		      STA	temp4
   3572  18de				   .
   3573  18de							; 
   3574  18de
   3575  18de				   .
   3576  18de							; 
   3577  18de
   3578  18de				   .L0452		;  if temp4  =  255 then goto __Clear_Ch_0
   3579  18de
   3580  18de		       a5 9f		      LDA	temp4
   3581  18e0		       c9 ff		      CMP	#255
   3582  18e2		       d0 03		      BNE	.skipL0452
   3583  18e4				   .condpart86
   3584  18e4		       4c eb 99 	      jmp	.__Clear_Ch_0
   3585  18e7
   3586  18e7				   .skipL0452
   3587  18e7				   .
   3588  18e7							; 
   3589  18e7
   3590  18e7				   .
   3591  18e7							; 
   3592  18e7
   3593  18e7				   .L0453		;  _Ch0_Counter  =  _Ch0_Counter  +  1
   3594  18e7
   3595  18e7		       e6 db		      INC	_Ch0_Counter
   3596  18e9				   .L0454		;  temp5  =  _SD_Shot_Wall[_Ch0_Counter]  :  _Ch0_Counter  =  _Ch0_Counter  +	1
   3597  18e9
   3598  18e9		       a6 db		      LDX	_Ch0_Counter
   3599  18eb		       bd 2c 9d 	      LDA	_SD_Shot_Wall,x
   3600  18ee		       85 a0		      STA	temp5
   3601  18f0		       e6 db		      INC	_Ch0_Counter
   3602  18f2				   .L0455		;  temp6  =  _SD_Shot_Wall[_Ch0_Counter]  :  _Ch0_Counter  =  _Ch0_Counter  +	1
   3603  18f2
   3604  18f2		       a6 db		      LDX	_Ch0_Counter
   3605  18f4		       bd 2c 9d 	      LDA	_SD_Shot_Wall,x
   3606  18f7		       85 a1		      STA	temp6
   3607  18f9		       e6 db		      INC	_Ch0_Counter
   3608  18fb				   .L0456		;  if _Ch0_Counter{0} then COLUBK  =  _E0
   3609  18fb
   3610  18fb		       a5 db		      LDA	_Ch0_Counter
   3611  18fd		       4a		      LSR
   3612  18fe		       90 04		      BCC	.skipL0456
   3613  1900				   .condpart87
   3614  1900		       a9 e0		      LDA	#_E0
   3615  1902		       85 09		      STA	COLUBK
   3616  1904				   .skipL0456
   3617  1904				   .
   3618  1904							; 
   3619  1904
   3620  1904				   .
   3621  1904							; 
   3622  1904
   3623  1904				   .L0457		;  AUDV0  =  temp4
   3624  1904
   3625  1904		       a5 9f		      LDA	temp4
   3626  1906		       85 19		      STA	AUDV0
   3627  1908				   .L0458		;  AUDC0  =  temp5
   3628  1908
   3629  1908		       a5 a0		      LDA	temp5
   3630  190a		       85 15		      STA	AUDC0
   3631  190c				   .L0459		;  AUDF0  =  temp6
   3632  190c
   3633  190c		       a5 a1		      LDA	temp6
   3634  190e		       85 17		      STA	AUDF0
   3635  1910				   .
   3636  1910							; 
   3637  1910
   3638  1910				   .
   3639  1910							; 
   3640  1910
   3641  1910				   .L0460		;  _Ch0_Duration  =  _SD_Shot_Wall[_Ch0_Counter]  :  _Ch0_Counter  =  _Ch0_Counter  +	1
   3642  1910
   3643  1910		       a6 db		      LDX	_Ch0_Counter
   3644  1912		       bd 2c 9d 	      LDA	_SD_Shot_Wall,x
   3645  1915		       85 da		      STA	_Ch0_Duration
   3646  1917		       e6 db		      INC	_Ch0_Counter
   3647  1919				   .
   3648  1919							; 
   3649  1919
   3650  1919				   .
   3651  1919							; 
   3652  1919
   3653  1919				   .L0461		;  goto __Skip_Ch_0
   3654  1919
   3655  1919		       4c f1 99 	      jmp	.__Skip_Ch_0
   3656  191c
   3657  191c				   .
   3658  191c							; 
   3659  191c
   3660  191c				   .__Skip_Ch0_Sound_001
   3661  191c							; __Skip_Ch0_Sound_001
   3662  191c
   3663  191c				   .
   3664  191c							; 
   3665  191c
   3666  191c				   .
   3667  191c							; 
   3668  191c
   3669  191c				   .
   3670  191c							; 
   3671  191c
   3672  191c				   .
   3673  191c							; 
   3674  191c
   3675  191c				   .L0462		;  if _Ch0_Sound  <>  2 then goto __Skip_Ch0_Sound_002
   3676  191c
   3677  191c		       a5 d9		      LDA	_Ch0_Sound
   3678  191e		       c9 02		      CMP	#2
   3679  1920		       f0 03		      BEQ	.skipL0462
   3680  1922				   .condpart88
   3681  1922		       4c 61 99 	      jmp	.__Skip_Ch0_Sound_002
   3682  1925
   3683  1925				   .skipL0462
   3684  1925				   .
   3685  1925							; 
   3686  1925
   3687  1925				   .
   3688  1925							; 
   3689  1925
   3690  1925				   .L0463		;  temp4  =  _SD_Shoot_Miss[_Ch0_Counter]
   3691  1925
   3692  1925		       a6 db		      LDX	_Ch0_Counter
   3693  1927		       bd 64 9d 	      LDA	_SD_Shoot_Miss,x
   3694  192a		       85 9f		      STA	temp4
   3695  192c				   .
   3696  192c							; 
   3697  192c
   3698  192c				   .
   3699  192c							; 
   3700  192c
   3701  192c				   .L0464		;  if temp4  =  255 then goto __Clear_Ch_0
   3702  192c
   3703  192c		       a5 9f		      LDA	temp4
   3704  192e		       c9 ff		      CMP	#255
   3705  1930		       d0 03		      BNE	.skipL0464
   3706  1932				   .condpart89
   3707  1932		       4c eb 99 	      jmp	.__Clear_Ch_0
   3708  1935
   3709  1935				   .skipL0464
   3710  1935				   .
   3711  1935							; 
   3712  1935
   3713  1935				   .
   3714  1935							; 
   3715  1935
   3716  1935				   .L0465		;  _Ch0_Counter  =  _Ch0_Counter  +  1
   3717  1935
   3718  1935		       e6 db		      INC	_Ch0_Counter
   3719  1937				   .L0466		;  temp5  =  _SD_Shoot_Miss[_Ch0_Counter]  :  _Ch0_Counter  =	_Ch0_Counter  +  1
   3720  1937
   3721  1937		       a6 db		      LDX	_Ch0_Counter
   3722  1939		       bd 64 9d 	      LDA	_SD_Shoot_Miss,x
   3723  193c		       85 a0		      STA	temp5
   3724  193e		       e6 db		      INC	_Ch0_Counter
   3725  1940				   .L0467		;  temp6  =  _SD_Shoot_Miss[_Ch0_Counter]  :  _Ch0_Counter  =	_Ch0_Counter  +  1
   3726  1940
   3727  1940		       a6 db		      LDX	_Ch0_Counter
   3728  1942		       bd 64 9d 	      LDA	_SD_Shoot_Miss,x
   3729  1945		       85 a1		      STA	temp6
   3730  1947		       e6 db		      INC	_Ch0_Counter
   3731  1949				   .
   3732  1949							; 
   3733  1949
   3734  1949				   .
   3735  1949							; 
   3736  1949
   3737  1949				   .L0468		;  AUDV0  =  temp4
   3738  1949
   3739  1949		       a5 9f		      LDA	temp4
   3740  194b		       85 19		      STA	AUDV0
   3741  194d				   .L0469		;  AUDC0  =  temp5
   3742  194d
   3743  194d		       a5 a0		      LDA	temp5
   3744  194f		       85 15		      STA	AUDC0
   3745  1951				   .L0470		;  AUDF0  =  temp6
   3746  1951
   3747  1951		       a5 a1		      LDA	temp6
   3748  1953		       85 17		      STA	AUDF0
   3749  1955				   .
   3750  1955							; 
   3751  1955
   3752  1955				   .
   3753  1955							; 
   3754  1955
   3755  1955				   .L0471		;  _Ch0_Duration  =  _SD_Shoot_Miss[_Ch0_Counter]  :  _Ch0_Counter  =	_Ch0_Counter  +  1
   3756  1955
   3757  1955		       a6 db		      LDX	_Ch0_Counter
   3758  1957		       bd 64 9d 	      LDA	_SD_Shoot_Miss,x
   3759  195a		       85 da		      STA	_Ch0_Duration
   3760  195c		       e6 db		      INC	_Ch0_Counter
   3761  195e				   .
   3762  195e							; 
   3763  195e
   3764  195e				   .
   3765  195e							; 
   3766  195e
   3767  195e				   .L0472		;  goto __Skip_Ch_0
   3768  195e
   3769  195e		       4c f1 99 	      jmp	.__Skip_Ch_0
   3770  1961
   3771  1961				   .
   3772  1961							; 
   3773  1961
   3774  1961				   .__Skip_Ch0_Sound_002
   3775  1961							; __Skip_Ch0_Sound_002
   3776  1961
   3777  1961				   .
   3778  1961							; 
   3779  1961
   3780  1961				   .
   3781  1961							; 
   3782  1961
   3783  1961				   .
   3784  1961							; 
   3785  1961
   3786  1961				   .
   3787  1961							; 
   3788  1961
   3789  1961				   .L0473		;  if _Ch0_Sound  <>  3 then goto __Skip_Ch0_Sound_003
   3790  1961
   3791  1961		       a5 d9		      LDA	_Ch0_Sound
   3792  1963		       c9 03		      CMP	#3
   3793  1965		       f0 03		      BEQ	.skipL0473
   3794  1967				   .condpart90
   3795  1967		       4c a6 99 	      jmp	.__Skip_Ch0_Sound_003
   3796  196a
   3797  196a				   .skipL0473
   3798  196a				   .
   3799  196a							; 
   3800  196a
   3801  196a				   .
   3802  196a							; 
   3803  196a
   3804  196a				   .L0474		;  temp4  =  _SD_Shoot_Enemy[_Ch0_Counter]
   3805  196a
   3806  196a		       a6 db		      LDX	_Ch0_Counter
   3807  196c		       bd ac 9d 	      LDA	_SD_Shoot_Enemy,x
   3808  196f		       85 9f		      STA	temp4
   3809  1971				   .
   3810  1971							; 
   3811  1971
   3812  1971				   .
   3813  1971							; 
   3814  1971
   3815  1971				   .L0475		;  if temp4  =  255 then goto __Clear_Ch_0
   3816  1971
   3817  1971		       a5 9f		      LDA	temp4
   3818  1973		       c9 ff		      CMP	#255
   3819  1975		       d0 03		      BNE	.skipL0475
   3820  1977				   .condpart91
   3821  1977		       4c eb 99 	      jmp	.__Clear_Ch_0
   3822  197a
   3823  197a				   .skipL0475
   3824  197a				   .
   3825  197a							; 
   3826  197a
   3827  197a				   .
   3828  197a							; 
   3829  197a
   3830  197a				   .L0476		;  _Ch0_Counter  =  _Ch0_Counter  +  1
   3831  197a
   3832  197a		       e6 db		      INC	_Ch0_Counter
   3833  197c				   .L0477		;  temp5  =  _SD_Shoot_Enemy[_Ch0_Counter]  :	_Ch0_Counter  =  _Ch0_Counter  +  1
   3834  197c
   3835  197c		       a6 db		      LDX	_Ch0_Counter
   3836  197e		       bd ac 9d 	      LDA	_SD_Shoot_Enemy,x
   3837  1981		       85 a0		      STA	temp5
   3838  1983		       e6 db		      INC	_Ch0_Counter
   3839  1985				   .L0478		;  temp6  =  _SD_Shoot_Enemy[_Ch0_Counter]  :	_Ch0_Counter  =  _Ch0_Counter  +  1
   3840  1985
   3841  1985		       a6 db		      LDX	_Ch0_Counter
   3842  1987		       bd ac 9d 	      LDA	_SD_Shoot_Enemy,x
   3843  198a		       85 a1		      STA	temp6
   3844  198c		       e6 db		      INC	_Ch0_Counter
   3845  198e				   .
   3846  198e							; 
   3847  198e
   3848  198e				   .
   3849  198e							; 
   3850  198e
   3851  198e				   .L0479		;  AUDV0  =  temp4
   3852  198e
   3853  198e		       a5 9f		      LDA	temp4
   3854  1990		       85 19		      STA	AUDV0
   3855  1992				   .L0480		;  AUDC0  =  temp5
   3856  1992
   3857  1992		       a5 a0		      LDA	temp5
   3858  1994		       85 15		      STA	AUDC0
   3859  1996				   .L0481		;  AUDF0  =  temp6
   3860  1996
   3861  1996		       a5 a1		      LDA	temp6
   3862  1998		       85 17		      STA	AUDF0
   3863  199a				   .
   3864  199a							; 
   3865  199a
   3866  199a				   .
   3867  199a							; 
   3868  199a
   3869  199a				   .L0482		;  _Ch0_Duration  =  _SD_Shoot_Enemy[_Ch0_Counter]  :	_Ch0_Counter  =  _Ch0_Counter  +  1
   3870  199a
   3871  199a		       a6 db		      LDX	_Ch0_Counter
   3872  199c		       bd ac 9d 	      LDA	_SD_Shoot_Enemy,x
   3873  199f		       85 da		      STA	_Ch0_Duration
   3874  19a1		       e6 db		      INC	_Ch0_Counter
   3875  19a3				   .
   3876  19a3							; 
   3877  19a3
   3878  19a3				   .
   3879  19a3							; 
   3880  19a3
   3881  19a3				   .L0483		;  goto __Skip_Ch_0
   3882  19a3
   3883  19a3		       4c f1 99 	      jmp	.__Skip_Ch_0
   3884  19a6
   3885  19a6				   .
   3886  19a6							; 
   3887  19a6
   3888  19a6				   .__Skip_Ch0_Sound_003
   3889  19a6							; __Skip_Ch0_Sound_003
   3890  19a6
   3891  19a6				   .
   3892  19a6							; 
   3893  19a6
   3894  19a6				   .
   3895  19a6							; 
   3896  19a6
   3897  19a6				   .
   3898  19a6							; 
   3899  19a6
   3900  19a6				   .
   3901  19a6							; 
   3902  19a6
   3903  19a6				   .L0484		;  if _Ch0_Sound  <>  4 then goto __Skip_Ch0_Sound_004
   3904  19a6
   3905  19a6		       a5 d9		      LDA	_Ch0_Sound
   3906  19a8		       c9 04		      CMP	#4
   3907  19aa		       f0 03		      BEQ	.skipL0484
   3908  19ac				   .condpart92
   3909  19ac		       4c eb 99 	      jmp	.__Skip_Ch0_Sound_004
   3910  19af
   3911  19af				   .skipL0484
   3912  19af				   .
   3913  19af							; 
   3914  19af
   3915  19af				   .
   3916  19af							; 
   3917  19af
   3918  19af				   .L0485		;  temp4  =  _SD_Touch_Enemy[_Ch0_Counter]
   3919  19af
   3920  19af		       a6 db		      LDX	_Ch0_Counter
   3921  19b1		       bd d0 9d 	      LDA	_SD_Touch_Enemy,x
   3922  19b4		       85 9f		      STA	temp4
   3923  19b6				   .
   3924  19b6							; 
   3925  19b6
   3926  19b6				   .
   3927  19b6							; 
   3928  19b6
   3929  19b6				   .L0486		;  if temp4  =  255 then goto __Clear_Ch_0
   3930  19b6
   3931  19b6		       a5 9f		      LDA	temp4
   3932  19b8		       c9 ff		      CMP	#255
   3933  19ba		       d0 03		      BNE	.skipL0486
   3934  19bc				   .condpart93
   3935  19bc		       4c eb 99 	      jmp	.__Clear_Ch_0
   3936  19bf
   3937  19bf				   .skipL0486
   3938  19bf				   .
   3939  19bf							; 
   3940  19bf
   3941  19bf				   .
   3942  19bf							; 
   3943  19bf
   3944  19bf				   .L0487		;  _Ch0_Counter  =  _Ch0_Counter  +  1
   3945  19bf
   3946  19bf		       e6 db		      INC	_Ch0_Counter
   3947  19c1				   .L0488		;  temp5  =  _SD_Touch_Enemy[_Ch0_Counter]  :	_Ch0_Counter  =  _Ch0_Counter  +  1
   3948  19c1
   3949  19c1		       a6 db		      LDX	_Ch0_Counter
   3950  19c3		       bd d0 9d 	      LDA	_SD_Touch_Enemy,x
   3951  19c6		       85 a0		      STA	temp5
   3952  19c8		       e6 db		      INC	_Ch0_Counter
   3953  19ca				   .L0489		;  temp6  =  _SD_Touch_Enemy[_Ch0_Counter]  :	_Ch0_Counter  =  _Ch0_Counter  +  1
   3954  19ca
   3955  19ca		       a6 db		      LDX	_Ch0_Counter
   3956  19cc		       bd d0 9d 	      LDA	_SD_Touch_Enemy,x
   3957  19cf		       85 a1		      STA	temp6
   3958  19d1		       e6 db		      INC	_Ch0_Counter
   3959  19d3				   .
   3960  19d3							; 
   3961  19d3
   3962  19d3				   .
   3963  19d3							; 
   3964  19d3
   3965  19d3				   .L0490		;  AUDV0  =  temp4
   3966  19d3
   3967  19d3		       a5 9f		      LDA	temp4
   3968  19d5		       85 19		      STA	AUDV0
   3969  19d7				   .L0491		;  AUDC0  =  temp5
   3970  19d7
   3971  19d7		       a5 a0		      LDA	temp5
   3972  19d9		       85 15		      STA	AUDC0
   3973  19db				   .L0492		;  AUDF0  =  temp6
   3974  19db
   3975  19db		       a5 a1		      LDA	temp6
   3976  19dd		       85 17		      STA	AUDF0
   3977  19df				   .
   3978  19df							; 
   3979  19df
   3980  19df				   .
   3981  19df							; 
   3982  19df
   3983  19df				   .L0493		;  _Ch0_Duration  =  _SD_Touch_Enemy[_Ch0_Counter]  :	_Ch0_Counter  =  _Ch0_Counter  +  1
   3984  19df
   3985  19df		       a6 db		      LDX	_Ch0_Counter
   3986  19e1		       bd d0 9d 	      LDA	_SD_Touch_Enemy,x
   3987  19e4		       85 da		      STA	_Ch0_Duration
   3988  19e6		       e6 db		      INC	_Ch0_Counter
   3989  19e8				   .
   3990  19e8							; 
   3991  19e8
   3992  19e8				   .
   3993  19e8							; 
   3994  19e8
   3995  19e8				   .L0494		;  goto __Skip_Ch_0
   3996  19e8
   3997  19e8		       4c f1 99 	      jmp	.__Skip_Ch_0
   3998  19eb
   3999  19eb				   .
   4000  19eb							; 
   4001  19eb
   4002  19eb				   .__Skip_Ch0_Sound_004
   4003  19eb							; __Skip_Ch0_Sound_004
   4004  19eb
   4005  19eb				   .
   4006  19eb							; 
   4007  19eb
   4008  19eb				   .
   4009  19eb							; 
   4010  19eb
   4011  19eb				   .__Clear_Ch_0
   4012  19eb							; __Clear_Ch_0
   4013  19eb
   4014  19eb				   .L0495		;  _Ch0_Sound	=  0  :  AUDV0	=  0
   4015  19eb
   4016  19eb		       a9 00		      LDA	#0
   4017  19ed		       85 d9		      STA	_Ch0_Sound
   4018  19ef		       85 19		      STA	AUDV0
   4019  19f1				   .
   4020  19f1							; 
   4021  19f1
   4022  19f1				   .
   4023  19f1							; 
   4024  19f1
   4025  19f1				   .__Skip_Ch_0
   4026  19f1							; __Skip_Ch_0
   4027  19f1
   4028  19f1				   .
   4029  19f1							; 
   4030  19f1
   4031  19f1				   .
   4032  19f1							; 
   4033  19f1
   4034  19f1				   .
   4035  19f1							; 
   4036  19f1
   4037  19f1				   .L0496		;  if Game_Status then AUDV1  =  0  :	goto __Skip_Ch_1
   4038  19f1
   4039  19f1		       a5 d3		      LDA	Game_Status
   4040  19f3		       f0 07		      BEQ	.skipL0496
   4041  19f5				   .condpart94
   4042  19f5		       a9 00		      LDA	#0
   4043  19f7		       85 1a		      STA	AUDV1
   4044  19f9		       4c 44 9a 	      jmp	.__Skip_Ch_1
   4045  19fc
   4046  19fc				   .skipL0496
   4047  19fc				   .
   4048  19fc							; 
   4049  19fc
   4050  19fc				   .
   4051  19fc							; 
   4052  19fc
   4053  19fc				   .
   4054  19fc							; 
   4055  19fc
   4056  19fc				   .
   4057  19fc							; 
   4058  19fc
   4059  19fc				   .L0497		;  _Ch1_Duration  =  _Ch1_Duration  -	1
   4060  19fc
   4061  19fc		       c6 e2		      DEC	_Ch1_Duration
   4062  19fe				   .
   4063  19fe							; 
   4064  19fe
   4065  19fe				   .
   4066  19fe							; 
   4067  19fe
   4068  19fe				   .
   4069  19fe							; 
   4070  19fe
   4071  19fe				   .
   4072  19fe							; 
   4073  19fe
   4074  19fe				   .L0498		;  if _Ch1_Duration then __Skip_Ch_1
   4075  19fe
   4076  19fe		       a5 e2		      LDA	_Ch1_Duration
   4077  1a00					      if	((* - .__Skip_Ch_1) < 127) && ((* - .__Skip_Ch_1) > -128)
   4078  1a00		       d0 42		      BNE	.__Skip_Ch_1
   4079  1a02				  -	      else
   4080  1a02				  -	      beq	.32skip__Skip_Ch_1
   4081  1a02				  -	      jmp	.__Skip_Ch_1
   4082  1a02				  -.32skip__Skip_Ch_1
   4083  1a02					      endif
   4084  1a02				   .
   4085  1a02							; 
   4086  1a02
   4087  1a02				   .L0499		;  if _Bit0_Rotor_Sound_On{0} then _Ch1_Duration  =  1  :  AUDV1  =  8  :  goto __Flip_Rotor_Sound
   4088  1a02
   4089  1a02		       a5 ec		      LDA	_Bit0_Rotor_Sound_On
   4090  1a04		       4a		      LSR
   4091  1a05		       90 0b		      BCC	.skipL0499
   4092  1a07				   .condpart95
   4093  1a07		       a9 01		      LDA	#1
   4094  1a09		       85 e2		      STA	_Ch1_Duration
   4095  1a0b		       a9 08		      LDA	#8
   4096  1a0d		       85 1a		      STA	AUDV1
   4097  1a0f		       4c 3e 9a 	      jmp	.__Flip_Rotor_Sound
   4098  1a12
   4099  1a12				   .skipL0499
   4100  1a12				   .L0500		;  AUDV1  =  0
   4101  1a12
   4102  1a12		       a9 00		      LDA	#0
   4103  1a14		       85 1a		      STA	AUDV1
   4104  1a16				   .L0501		;  if ! _BitOp_P1_Dir then _Ch1_Duration  =  16  :  goto __Flip_Rotor_Sound
   4105  1a16
   4106  1a16		       a5 d8		      LDA	_BitOp_P1_Dir
   4107  1a18		       d0 07		      BNE	.skipL0501
   4108  1a1a				   .condpart96
   4109  1a1a		       a9 10		      LDA	#16
   4110  1a1c		       85 e2		      STA	_Ch1_Duration
   4111  1a1e		       4c 3e 9a 	      jmp	.__Flip_Rotor_Sound
   4112  1a21
   4113  1a21				   .skipL0501
   4114  1a21				   .L0502		;  if _Bit0_P1_Dir_Up{0} then _Ch1_Duration  =  10  :	goto __Flip_Rotor_Sound
   4115  1a21
   4116  1a21		       a5 d8		      LDA	_Bit0_P1_Dir_Up
   4117  1a23		       4a		      LSR
   4118  1a24		       90 07		      BCC	.skipL0502
   4119  1a26				   .condpart97
   4120  1a26		       a9 0a		      LDA	#10
   4121  1a28		       85 e2		      STA	_Ch1_Duration
   4122  1a2a		       4c 3e 9a 	      jmp	.__Flip_Rotor_Sound
   4123  1a2d
   4124  1a2d				   .skipL0502
   4125  1a2d				   .L0503		;  if _Bit1_P1_Dir_Down{1} then _Ch1_Duration	=  18  :  goto __Flip_Rotor_Sound
   4126  1a2d
   4127  1a2d		       a5 d8		      LDA	_Bit1_P1_Dir_Down
   4128  1a2f		       29 02		      AND	#2
   4129  1a31		       f0 07		      BEQ	.skipL0503
   4130  1a33				   .condpart98
   4131  1a33		       a9 12		      LDA	#18
   4132  1a35		       85 e2		      STA	_Ch1_Duration
   4133  1a37		       4c 3e 9a 	      jmp	.__Flip_Rotor_Sound
   4134  1a3a
   4135  1a3a				   .skipL0503
   4136  1a3a				   .L0504		;  _Ch1_Duration  =  12
   4137  1a3a
   4138  1a3a		       a9 0c		      LDA	#12
   4139  1a3c		       85 e2		      STA	_Ch1_Duration
   4140  1a3e				   .
   4141  1a3e							; 
   4142  1a3e
   4143  1a3e				   .__Flip_Rotor_Sound
   4144  1a3e							; __Flip_Rotor_Sound
   4145  1a3e
   4146  1a3e				   .L0505		;  _Bit0_Rotor_Sound_On  =  _Bit0_Rotor_Sound_On  ^  1
   4147  1a3e
   4148  1a3e		       a5 ec		      LDA	_Bit0_Rotor_Sound_On
   4149  1a40		       49 01		      EOR	#1
   4150  1a42		       85 ec		      STA	_Bit0_Rotor_Sound_On
   4151  1a44				   .
   4152  1a44							; 
   4153  1a44
   4154  1a44				   .
   4155  1a44							; 
   4156  1a44
   4157  1a44				   .
   4158  1a44							; 
   4159  1a44
   4160  1a44				   .
   4161  1a44							; 
   4162  1a44
   4163  1a44				   .
   4164  1a44							; 
   4165  1a44
   4166  1a44				   .
   4167  1a44							; 
   4168  1a44
   4169  1a44				   .__Skip_Ch_1
   4170  1a44							; __Skip_Ch_1
   4171  1a44
   4172  1a44				   .
   4173  1a44							; 
   4174  1a44
   4175  1a44				   .
   4176  1a44							; 
   4177  1a44
   4178  1a44				   .
   4179  1a44							; 
   4180  1a44
   4181  1a44				   .
   4182  1a44							; 
   4183  1a44
   4184  1a44				   .
   4185  1a44							; 
   4186  1a44
   4187  1a44				   .
   4188  1a44							; 
   4189  1a44
   4190  1a44				   .
   4191  1a44							; 
   4192  1a44
   4193  1a44				   .
   4194  1a44							; 
   4195  1a44
   4196  1a44				   .L0506		;  if _Bit6_Flip_P1{6} then REFP1  =  8
   4197  1a44
   4198  1a44		       24 ec		      BIT	_Bit6_Flip_P1
   4199  1a46		       50 04		      BVC	.skipL0506
   4200  1a48				   .condpart99
   4201  1a48		       a9 08		      LDA	#8
   4202  1a4a		       85 0c		      STA	REFP1
   4203  1a4c				   .skipL0506
   4204  1a4c				   .L0507		;  if _Bit2_roommate_Dir{2} then REFP0  =  8
   4205  1a4c
   4206  1a4c		       a5 ec		      LDA	_Bit2_roommate_Dir
   4207  1a4e		       29 04		      AND	#4
   4208  1a50		       f0 04		      BEQ	.skipL0507
   4209  1a52				   .condpart100
   4210  1a52		       a9 08		      LDA	#8
   4211  1a54		       85 0b		      STA	REFP0
   4212  1a56				   .skipL0507
   4213  1a56				   .
   4214  1a56							; 
   4215  1a56
   4216  1a56				   .L0508		;  drawscreen
   4217  1a56
   4218  1a56		       85 ee		      sta	temp7
   4219  1a58		       a9 9a		      lda	#>(ret_point3-1)
   4220  1a5a		       48		      pha
   4221  1a5b		       a9 6d		      lda	#<(ret_point3-1)
   4222  1a5d		       48		      pha
   4223  1a5e		       a9 f4		      lda	#>(drawscreen-1)
   4224  1a60		       48		      pha
   4225  1a61		       a9 e5		      lda	#<(drawscreen-1)
   4226  1a63		       48		      pha
   4227  1a64		       a5 ee		      lda	temp7
   4228  1a66		       48		      pha
   4229  1a67		       8a		      txa
   4230  1a68		       48		      pha
   4231  1a69		       a2 04		      ldx	#4
   4232  1a6b		       4c e8 ff 	      jmp	BS_jsr
   4233  1a6e				   ret_point3
   4234  1a6e				   .
   4235  1a6e							; 
   4236  1a6e
   4237  1a6e				   .L0509		;  goto __Main_Loop
   4238  1a6e
   4239  1a6e		       4c 9a 91 	      jmp	.__Main_Loop
   4240  1a71
   4241  1a71				   .
   4242  1a71							; 
   4243  1a71
   4244  1a71				   .
   4245  1a71							; 
   4246  1a71
   4247  1a71				   .
   4248  1a71							; 
   4249  1a71
   4250  1a71				   .
   4251  1a71							; 
   4252  1a71
   4253  1a71				   ._game_over_action
   4254  1a71							; _game_over_action
   4255  1a71
   4256  1a71				   .L0510		;  if joy0fire then goto _Reset_To_Start
   4257  1a71
   4258  1a71		       24 0c		      bit	INPT4
   4259  1a73		       30 03		      BMI	.skipL0510
   4260  1a75				   .condpart101
   4261  1a75		       4c 19 9d 	      jmp	._Reset_To_Start
   4262  1a78
   4263  1a78				   .skipL0510
   4264  1a78				   .L0511		;  goto _skip_game_action
   4265  1a78
   4266  1a78		       4c be 98 	      jmp	._skip_game_action
   4267  1a7b
   4268  1a7b				   .
   4269  1a7b							; 
   4270  1a7b
   4271  1a7b				   ._Level_Finished_loop
   4272  1a7b							; _Level_Finished_loop
   4273  1a7b
   4274  1a7b				   .
   4275  1a7b							; 
   4276  1a7b
   4277  1a7b				   .L0512		;  if pfscore2 then pfscore2  =  pfscore2  /  2  :  score  =  score  +  bonus_level_timer  :  goto _bonus_sound_delay
   4278  1a7b
   4279  1a7b		       a5 f3		      LDA	pfscore2
   4280  1a7d		       f0 17		      BEQ	.skipL0512
   4281  1a7f				   .condpart102
   4282  1a7f		       a5 f3		      LDA	pfscore2
   4283  1a81		       4a		      lsr
   4284  1a82		       85 f3		      STA	pfscore2
   4285  1a84		       f8		      SED
   4286  1a85		       18		      CLC
   4287  1a86		       a5 94		      LDA	score+1
   4288  1a88		       69 01		      ADC	#$01
   4289  1a8a		       85 94		      STA	score+1
   4290  1a8c		       a5 93		      LDA	score
   4291  1a8e		       69 00		      ADC	#$00
   4292  1a90		       85 93		      STA	score
   4293  1a92		       d8		      CLD
   4294  1a93		       4c df 9a 	      jmp	._bonus_sound_delay
   4295  1a96
   4296  1a96				   .skipL0512
   4297  1a96				   .
   4298  1a96							; 
   4299  1a96
   4300  1a96				   .
   4301  1a96							; 
   4302  1a96
   4303  1a96				   .L0513		;  if pfscore1 then pfscore1  =  pfscore1  /  4  :  score  =  score  +  bonus_level_lives  :  goto _bonus_sound_delay
   4304  1a96
   4305  1a96		       a5 f2		      LDA	pfscore1
   4306  1a98		       f0 18		      BEQ	.skipL0513
   4307  1a9a				   .condpart103
   4308  1a9a		       a5 f2		      LDA	pfscore1
   4309  1a9c		       4a		      lsr
   4310  1a9d		       4a		      lsr
   4311  1a9e		       85 f2		      STA	pfscore1
   4312  1aa0		       f8		      SED
   4313  1aa1		       18		      CLC
   4314  1aa2		       a5 94		      LDA	score+1
   4315  1aa4		       69 02		      ADC	#$02
   4316  1aa6		       85 94		      STA	score+1
   4317  1aa8		       a5 93		      LDA	score
   4318  1aaa		       69 00		      ADC	#$00
   4319  1aac		       85 93		      STA	score
   4320  1aae		       d8		      CLD
   4321  1aaf		       4c df 9a 	      jmp	._bonus_sound_delay
   4322  1ab2
   4323  1ab2				   .skipL0513
   4324  1ab2				   .L0514		;  if ! _Bit3_Safe_Point_reached{3} then WriteToBuffer  =  _sc1  :  WriteToBuffer  =  _sc2  :	WriteToBuffer  =  _sc3	:  WriteSendBuffer  =  req_level_up  :	_Bit3_Safe_Point_reached{3}  =	1
   4325  1ab2
   4326  1ab2		       a5 ec		      LDA	_Bit3_Safe_Point_reached
   4327  1ab4		       29 08		      AND	#8
   4328  1ab6		       d0 1a		      BNE	.skipL0514
   4329  1ab8				   .condpart104
   4330  1ab8		       a5 93		      LDA	_sc1
   4331  1aba		       8d f0 1f 	      STA	WriteToBuffer
   4332  1abd		       a5 94		      LDA	_sc2
   4333  1abf		       8d f0 1f 	      STA	WriteToBuffer
   4334  1ac2		       a5 95		      LDA	_sc3
   4335  1ac4		       8d f0 1f 	      STA	WriteToBuffer
   4336  1ac7		       a9 01		      LDA	#req_level_up
   4337  1ac9		       8d f1 1f 	      STA	WriteSendBuffer
   4338  1acc		       a5 ec		      LDA	_Bit3_Safe_Point_reached
   4339  1ace		       09 08		      ORA	#8
   4340  1ad0		       85 ec		      STA	_Bit3_Safe_Point_reached
   4341  1ad2				   .skipL0514
   4342  1ad2				   .
   4343  1ad2							; 
   4344  1ad2
   4345  1ad2				   .L0515		;  if joy0fire then goto _Level_Up else goto _skip_game_action
   4346  1ad2
   4347  1ad2		       24 0c		      bit	INPT4
   4348  1ad4		       30 06		      BMI	.skipL0515
   4349  1ad6				   .condpart105
   4350  1ad6		       4c e6 9b 	      jmp	._Level_Up
   4351  1ad9		       4c df 9a 	      jmp	.skipelse6
   4352  1adc				   .skipL0515
   4353  1adc		       4c be 98 	      jmp	._skip_game_action
   4354  1adf
   4355  1adf				   .skipelse6
   4356  1adf				   ._bonus_sound_delay
   4357  1adf							; _bonus_sound_delay
   4358  1adf
   4359  1adf				   .L0516		;  _Ch0_Sound	=  3  :  _Ch0_Duration	=  1  :  _Ch0_Counter  =  0
   4360  1adf
   4361  1adf		       a9 03		      LDA	#3
   4362  1ae1		       85 d9		      STA	_Ch0_Sound
   4363  1ae3		       a9 01		      LDA	#1
   4364  1ae5		       85 da		      STA	_Ch0_Duration
   4365  1ae7		       a9 00		      LDA	#0
   4366  1ae9		       85 db		      STA	_Ch0_Counter
   4367  1aeb				   .L0517		;  delay_counter  =  25
   4368  1aeb
   4369  1aeb		       a9 19		      LDA	#25
   4370  1aed		       85 d4		      STA	delay_counter
   4371  1aef				   .L0518		;  goto _skip_game_action
   4372  1aef
   4373  1aef		       4c be 98 	      jmp	._skip_game_action
   4374  1af2
   4375  1af2				   .
   4376  1af2							; 
   4377  1af2
   4378  1af2				   ._Explosion_loop
   4379  1af2							; _Explosion_loop
   4380  1af2
   4381  1af2				   .L0519		;  temp4  =  frame_counter  /	8
   4382  1af2
   4383  1af2		       a5 d5		      LDA	frame_counter
   4384  1af4		       4a		      lsr
   4385  1af5		       4a		      lsr
   4386  1af6		       4a		      lsr
   4387  1af7		       85 9f		      STA	temp4
   4388  1af9				   .
   4389  1af9							; 
   4390  1af9
   4391  1af9				   .L0520		;  on temp4 goto _explosion_3_p1 _explosion_2_p1 _explosion_1_p1 _explosion_0_p1
   4392  1af9
   4393  1af9		       a6 9f		      LDX	temp4
   4394  1afb		       bd 04 9b 	      LDA	.L0520jumptablehi,x
   4395  1afe		       48		      PHA
   4396  1aff		       bd 08 9b 	      LDA	.L0520jumptablelo,x
   4397  1b02		       48		      PHA
   4398  1b03		       60		      RTS
   4399  1b04				   .L0520jumptablehi
   4400  1b04		       9b		      .byte.b	>(._explosion_3_p1-1)
   4401  1b05		       9b		      .byte.b	>(._explosion_2_p1-1)
   4402  1b06		       9b		      .byte.b	>(._explosion_1_p1-1)
   4403  1b07		       9b		      .byte.b	>(._explosion_0_p1-1)
   4404  1b08				   .L0520jumptablelo
   4405  1b08		       38		      .byte.b	<(._explosion_3_p1-1)
   4406  1b09		       29		      .byte.b	<(._explosion_2_p1-1)
   4407  1b0a		       1a		      .byte.b	<(._explosion_1_p1-1)
   4408  1b0b		       0b		      .byte.b	<(._explosion_0_p1-1)
   4409  1b0c				   .
   4410  1b0c							; 
   4411  1b0c
   4412  1b0c				   ._explosion_0_p1
   4413  1b0c							; _explosion_0_p1
   4414  1b0c
   4415  1b0c				   .L0521		;  player1: 
   4416  1b0c
   4417  1b0c		       a2 67		      LDX	#<playerL0521_1
   4418  1b0e		       86 8c		      STX	player1pointerlo
   4419  1b10		       a9 fc		      LDA	#>playerL0521_1
   4420  1b12		       85 8d		      STA	player1pointerhi
   4421  1b14		       a9 07		      LDA	#7
   4422  1b16		       85 8f		      STA	player1height
   4423  1b18				   .L0522		;  goto _End_Explosion_Definition
   4424  1b18
   4425  1b18		       4c 45 9b 	      jmp	._End_Explosion_Definition
   4426  1b1b
   4427  1b1b				   ._explosion_1_p1
   4428  1b1b							; _explosion_1_p1
   4429  1b1b
   4430  1b1b				   .L0523		;  player1: 
   4431  1b1b
   4432  1b1b		       a2 6f		      LDX	#<playerL0523_1
   4433  1b1d		       86 8c		      STX	player1pointerlo
   4434  1b1f		       a9 fc		      LDA	#>playerL0523_1
   4435  1b21		       85 8d		      STA	player1pointerhi
   4436  1b23		       a9 07		      LDA	#7
   4437  1b25		       85 8f		      STA	player1height
   4438  1b27				   .L0524		;  goto _End_Explosion_Definition
   4439  1b27
   4440  1b27		       4c 45 9b 	      jmp	._End_Explosion_Definition
   4441  1b2a
   4442  1b2a				   ._explosion_2_p1
   4443  1b2a							; _explosion_2_p1
   4444  1b2a
   4445  1b2a				   .L0525		;  player1: 
   4446  1b2a
   4447  1b2a		       a2 77		      LDX	#<playerL0525_1
   4448  1b2c		       86 8c		      STX	player1pointerlo
   4449  1b2e		       a9 fc		      LDA	#>playerL0525_1
   4450  1b30		       85 8d		      STA	player1pointerhi
   4451  1b32		       a9 07		      LDA	#7
   4452  1b34		       85 8f		      STA	player1height
   4453  1b36				   .L0526		;  goto _End_Explosion_Definition
   4454  1b36
   4455  1b36		       4c 45 9b 	      jmp	._End_Explosion_Definition
   4456  1b39
   4457  1b39				   ._explosion_3_p1
   4458  1b39							; _explosion_3_p1
   4459  1b39
   4460  1b39				   .L0527		;  player1: 
   4461  1b39
   4462  1b39		       a2 7f		      LDX	#<playerL0527_1
   4463  1b3b		       86 8c		      STX	player1pointerlo
   4464  1b3d		       a9 fc		      LDA	#>playerL0527_1
   4465  1b3f		       85 8d		      STA	player1pointerhi
   4466  1b41		       a9 07		      LDA	#7
   4467  1b43		       85 8f		      STA	player1height
   4468  1b45				   .
   4469  1b45							; 
   4470  1b45
   4471  1b45				   ._End_Explosion_Definition
   4472  1b45							; _End_Explosion_Definition
   4473  1b45
   4474  1b45				   .L0528		;  if frame_counter  =  0 then Game_Status  =	game_state_run	:  goto _Decrease_live_counter else goto _skip_game_action
   4475  1b45
   4476  1b45		       a5 d5		      LDA	frame_counter
   4477  1b47		       c9 00		      CMP	#0
   4478  1b49		       d0 0a		      BNE	.skipL0528
   4479  1b4b				   .condpart106
   4480  1b4b		       a9 00		      LDA	#game_state_run
   4481  1b4d		       85 d3		      STA	Game_Status
   4482  1b4f		       4c 77 9b 	      jmp	._Decrease_live_counter
   4483  1b52		       4c 58 9b 	      jmp	.skipelse7
   4484  1b55				   .skipL0528
   4485  1b55		       4c be 98 	      jmp	._skip_game_action
   4486  1b58
   4487  1b58				   .skipelse7
   4488  1b58				   .
   4489  1b58							; 
   4490  1b58
   4491  1b58				   ._Set_Explosion
   4492  1b58							; _Set_Explosion
   4493  1b58
   4494  1b58				   .L0529		;  if _BitOp_Ball_Shot_Dir then _BitOp_Ball_Shot_Dir  =  0  :	bally  =  0
   4495  1b58
   4496  1b58		       a5 d6		      LDA	_BitOp_Ball_Shot_Dir
   4497  1b5a		       f0 06		      BEQ	.skipL0529
   4498  1b5c				   .condpart107
   4499  1b5c		       a9 00		      LDA	#0
   4500  1b5e		       85 d6		      STA	_BitOp_Ball_Shot_Dir
   4501  1b60		       85 89		      STA	bally
   4502  1b62				   .skipL0529
   4503  1b62				   .L0530		;  _Ch0_Sound	=  1  :  _Ch0_Duration	=  1  :  _Ch0_Counter  =  0  :	frame_counter  =  31
   4504  1b62
   4505  1b62		       a9 01		      LDA	#1
   4506  1b64		       85 d9		      STA	_Ch0_Sound
   4507  1b66		       85 da		      STA	_Ch0_Duration
   4508  1b68		       a9 00		      LDA	#0
   4509  1b6a		       85 db		      STA	_Ch0_Counter
   4510  1b6c		       a9 1f		      LDA	#31
   4511  1b6e		       85 d5		      STA	frame_counter
   4512  1b70				   .L0531		;  Game_Status  =  game_state_heli_explosion
   4513  1b70
   4514  1b70		       a9 03		      LDA	#game_state_heli_explosion
   4515  1b72		       85 d3		      STA	Game_Status
   4516  1b74				   .L0532		;  goto _skip_game_action
   4517  1b74
   4518  1b74		       4c be 98 	      jmp	._skip_game_action
   4519  1b77
   4520  1b77				   .
   4521  1b77							; 
   4522  1b77
   4523  1b77				   ._Decrease_live_counter
   4524  1b77							; _Decrease_live_counter
   4525  1b77
   4526  1b77				   .L0533		;  pfscore1  =  pfscore1  /  4
   4527  1b77
   4528  1b77		       a5 f2		      LDA	pfscore1
   4529  1b79		       4a		      lsr
   4530  1b7a		       4a		      lsr
   4531  1b7b		       85 f2		      STA	pfscore1
   4532  1b7d				   .L0534		;  player1y  =  200
   4533  1b7d
   4534  1b7d		       a9 c8		      LDA	#200
   4535  1b7f		       85 86		      STA	player1y
   4536  1b81				   .L0535		;  if !pfscore1 then goto _Set_Game_Over else goto _Reset_Level
   4537  1b81
   4538  1b81		       a5 f2		      LDA	pfscore1
   4539  1b83		       d0 06		      BNE	.skipL0535
   4540  1b85				   .condpart108
   4541  1b85		       4c 8e 9b 	      jmp	._Set_Game_Over
   4542  1b88		       4c 8e 9b 	      jmp	.skipelse8
   4543  1b8b				   .skipL0535
   4544  1b8b		       4c a9 9b 	      jmp	._Reset_Level
   4545  1b8e
   4546  1b8e				   .skipelse8
   4547  1b8e				   .
   4548  1b8e							; 
   4549  1b8e
   4550  1b8e				   ._Set_Game_Over
   4551  1b8e							; _Set_Game_Over
   4552  1b8e
   4553  1b8e				   .L0536		;  WriteToBuffer  =  _sc1
   4554  1b8e
   4555  1b8e		       a5 93		      LDA	_sc1
   4556  1b90		       8d f0 1f 	      STA	WriteToBuffer
   4557  1b93				   .L0537		;  WriteToBuffer  =  _sc2
   4558  1b93
   4559  1b93		       a5 94		      LDA	_sc2
   4560  1b95		       8d f0 1f 	      STA	WriteToBuffer
   4561  1b98				   .L0538		;  WriteToBuffer  =  _sc3
   4562  1b98
   4563  1b98		       a5 95		      LDA	_sc3
   4564  1b9a		       8d f0 1f 	      STA	WriteToBuffer
   4565  1b9d				   .L0539		;  WriteSendBuffer  =	req_game_over
   4566  1b9d
   4567  1b9d		       a9 02		      LDA	#req_game_over
   4568  1b9f		       8d f1 1f 	      STA	WriteSendBuffer
   4569  1ba2				   .L0540		;  Game_Status  =  game_state_game_over
   4570  1ba2
   4571  1ba2		       a9 01		      LDA	#game_state_game_over
   4572  1ba4		       85 d3		      STA	Game_Status
   4573  1ba6				   .L0541		;  goto _skip_game_action
   4574  1ba6
   4575  1ba6		       4c be 98 	      jmp	._skip_game_action
   4576  1ba9
   4577  1ba9				   .
   4578  1ba9							; 
   4579  1ba9
   4580  1ba9				   ._Reset_Level
   4581  1ba9							; _Reset_Level
   4582  1ba9
   4583  1ba9				   .L0542		;  gosub _Add_Room_State
   4584  1ba9
   4585  1ba9		       20 6b 9c 	      jsr	._Add_Room_State
   4586  1bac
   4587  1bac				   .L0543		;  WriteSendBuffer  =	req_level_reset
   4588  1bac
   4589  1bac		       a9 07		      LDA	#req_level_reset
   4590  1bae		       8d f1 1f 	      STA	WriteSendBuffer
   4591  1bb1				   .L0544		;  _Bit0_New_Room_P1_Flip{0}  =  _Bit1_Safe_Point_P1_Flip{1}
   4592  1bb1
   4593  1bb1		       a5 df		      LDA	_Bit1_Safe_Point_P1_Flip
   4594  1bb3		       29 02		      AND	#2
   4595  1bb5		       08		      PHP
   4596  1bb6		       a5 df		      LDA	_Bit0_New_Room_P1_Flip
   4597  1bb8		       29 fe		      AND	#254
   4598  1bba		       28		      PLP
   4599  1bbb		       f0 02		      .byte.b	$F0, $02
   4600  1bbd		       09 01		      ORA	#1
   4601  1bbf		       85 df		      STA	_Bit0_New_Room_P1_Flip
   4602  1bc1				   .L0545		;  delay_counter  =  60
   4603  1bc1
   4604  1bc1		       a9 3c		      LDA	#60
   4605  1bc3		       85 d4		      STA	delay_counter
   4606  1bc5				   .
   4607  1bc5							; 
   4608  1bc5
   4609  1bc5				   ._Common_Reset
   4610  1bc5							; _Common_Reset
   4611  1bc5
   4612  1bc5				   .L0546		;  _Bit5_Request_Pending{5}  =  1
   4613  1bc5
   4614  1bc5		       a5 ec		      LDA	_Bit5_Request_Pending
   4615  1bc7		       09 20		      ORA	#32
   4616  1bc9		       85 ec		      STA	_Bit5_Request_Pending
   4617  1bcb				   .L0547		;  pfscore2  =  255
   4618  1bcb
   4619  1bcb		       a9 ff		      LDA	#255
   4620  1bcd		       85 f3		      STA	pfscore2
   4621  1bcf				   .L0548		;  P1y_velocity  =  0.0  :  x	=  0
   4622  1bcf
   4623  1bcf		       a2 00		      LDX	#0
   4624  1bd1		       86 ea		      STX	w
   4625  1bd3		       a9 00		      LDA	#0
   4626  1bd5		       85 e9		      STA	P1y_velocity
   4627  1bd7		       a9 00		      LDA	#0
   4628  1bd9		       85 eb		      STA	x
   4629  1bdb				   .L0549		;  new_room_player1x  =  Safe_Point_P1_x
   4630  1bdb
   4631  1bdb		       a5 e0		      LDA	Safe_Point_P1_x
   4632  1bdd		       85 a5		      STA	new_room_player1x
   4633  1bdf				   .L0550		;  new_room_player1y  =  Safe_Point_P1_y
   4634  1bdf
   4635  1bdf		       a5 e1		      LDA	Safe_Point_P1_y
   4636  1be1		       85 a4		      STA	new_room_player1y
   4637  1be3				   .L0551		;  goto _skip_game_action
   4638  1be3
   4639  1be3		       4c be 98 	      jmp	._skip_game_action
   4640  1be6
   4641  1be6				   .
   4642  1be6							; 
   4643  1be6
   4644  1be6				   ._Level_Up
   4645  1be6							; _Level_Up
   4646  1be6
   4647  1be6				   .L0552		;  Game_Status  =  game_state_run
   4648  1be6
   4649  1be6		       a9 00		      LDA	#game_state_run
   4650  1be8		       85 d3		      STA	Game_Status
   4651  1bea				   .L0553		;  _Bit7_FireB_Restrainer{7}  =  1  :	_Bit5_Request_Pending{5}  =  1
   4652  1bea
   4653  1bea		       a5 ec		      LDA	_Bit7_FireB_Restrainer
   4654  1bec		       09 80		      ORA	#128
   4655  1bee		       85 ec		      STA	_Bit7_FireB_Restrainer
   4656  1bf0		       a5 ec		      LDA	_Bit5_Request_Pending
   4657  1bf2		       09 20		      ORA	#32
   4658  1bf4		       85 ec		      STA	_Bit5_Request_Pending
   4659  1bf6				   .L0554		;  score  =  0  :  _BitOp_Flip_positions  =  0
   4660  1bf6
   4661  1bf6		       a9 00		      LDA	#$00
   4662  1bf8		       85 95		      STA	score+2
   4663  1bfa		       a9 00		      LDA	#$00
   4664  1bfc		       85 94		      STA	score+1
   4665  1bfe		       a9 00		      LDA	#$00
   4666  1c00		       85 93		      STA	score
   4667  1c02		       a9 00		      LDA	#0
   4668  1c04		       85 df		      STA	_BitOp_Flip_positions
   4669  1c06				   .L0555		;  Safe_Point_P1_x  =	30
   4670  1c06
   4671  1c06		       a9 1e		      LDA	#30
   4672  1c08		       85 e0		      STA	Safe_Point_P1_x
   4673  1c0a				   .L0556		;  Safe_Point_P1_y  =	player_min_y
   4674  1c0a
   4675  1c0a		       a9 02		      LDA	#player_min_y
   4676  1c0c		       85 e1		      STA	Safe_Point_P1_y
   4677  1c0e				   .L0557		;  pfscore1  =  %00101010
   4678  1c0e
   4679  1c0e		       a9 2a		      LDA	#%00101010
   4680  1c10		       85 f2		      STA	pfscore1
   4681  1c12				   .L0558		;  goto _Common_Reset
   4682  1c12
   4683  1c12		       4c c5 9b 	      jmp	._Common_Reset
   4684  1c15
   4685  1c15				   .
   4686  1c15							; 
   4687  1c15
   4688  1c15				   ._Level_Completed
   4689  1c15							; _Level_Completed
   4690  1c15
   4691  1c15				   .L0559		;  Game_Status  =  game_state_level_finished
   4692  1c15
   4693  1c15		       a9 02		      LDA	#game_state_level_finished
   4694  1c17		       85 d3		      STA	Game_Status
   4695  1c19				   .L0560		;  temp4  =  frame_counter  /	2
   4696  1c19
   4697  1c19		       a5 d5		      LDA	frame_counter
   4698  1c1b		       4a		      lsr
   4699  1c1c		       85 9f		      STA	temp4
   4700  1c1e				   .L0561		;  temp5  =  temp4  &	$0F  :	if temp5  >  9 then temp4  =  temp4  +	6
   4701  1c1e
   4702  1c1e		       a5 9f		      LDA	temp4
   4703  1c20		       29 0f		      AND	#$0F
   4704  1c22		       85 a0		      STA	temp5
   4705  1c24		       a9 09		      LDA	#9
   4706  1c26		       c5 a0		      CMP	temp5
   4707  1c28		       b0 07		      BCS	.skipL0561
   4708  1c2a				   .condpart109
   4709  1c2a		       a5 9f		      LDA	temp4
   4710  1c2c		       18		      CLC
   4711  1c2d		       69 06		      ADC	#6
   4712  1c2f		       85 9f		      STA	temp4
   4713  1c31				   .skipL0561
   4714  1c31				   .L0562		;  temp5  =  temp4  &	$F0  :	if temp5  >  $90 then temp4  =	temp4  +  $60
   4715  1c31
   4716  1c31		       a5 9f		      LDA	temp4
   4717  1c33		       29 f0		      AND	#$F0
   4718  1c35		       85 a0		      STA	temp5
   4719  1c37		       a9 90		      LDA	#$90
   4720  1c39		       c5 a0		      CMP	temp5
   4721  1c3b		       b0 07		      BCS	.skipL0562
   4722  1c3d				   .condpart110
   4723  1c3d		       a5 9f		      LDA	temp4
   4724  1c3f		       18		      CLC
   4725  1c40		       69 60		      ADC	#$60
   4726  1c42		       85 9f		      STA	temp4
   4727  1c44				   .skipL0562
   4728  1c44				   .L0563		;  score  =  score  +	temp4
   4729  1c44
   4730  1c44		       f8		      SED
   4731  1c45		       18		      CLC
   4732  1c46		       a5 95		      LDA	score+2
   4733  1c48		       65 9f		      ADC	temp4
   4734  1c4a
   4735  1c4a		       85 95		      STA	score+2
   4736  1c4c		       a5 94		      LDA	score+1
   4737  1c4e		       69 00		      ADC	#$00
   4738  1c50		       85 94		      STA	score+1
   4739  1c52		       a5 93		      LDA	score
   4740  1c54		       69 00		      ADC	#$00
   4741  1c56		       85 93		      STA	score
   4742  1c58		       d8		      CLD
   4743  1c59				   .L0564		;  asm
   4744  1c59
   4745  1c59		       f8		      sed
   4746  1c5a
   4747  1c5a		       18		      clc
   4748  1c5b
   4749  1c5b		       a5 94		      lda	_sc2
   4750  1c5d
   4751  1c5d		       65 b1		      adc	bonus_bcd_counter
   4752  1c5f
   4753  1c5f		       85 94		      sta	_sc2
   4754  1c61
   4755  1c61		       a5 93		      lda	_sc1
   4756  1c63
   4757  1c63		       69 00		      adc	#0
   4758  1c65
   4759  1c65		       85 93		      sta	_sc1
   4760  1c67
   4761  1c67		       d8		      cld
   4762  1c68
   4763  1c68				   .L0565		;  goto _skip_game_action
   4764  1c68
   4765  1c68		       4c be 98 	      jmp	._skip_game_action
   4766  1c6b
   4767  1c6b				   .
   4768  1c6b							; 
   4769  1c6b
   4770  1c6b				   .
   4771  1c6b							; 
   4772  1c6b
   4773  1c6b				   .
   4774  1c6b							; 
   4775  1c6b
   4776  1c6b				   ._Add_Room_State
   4777  1c6b							; _Add_Room_State
   4778  1c6b
   4779  1c6b				   .L0566		;  _Bit5_Request_Pending{5}  =  1
   4780  1c6b
   4781  1c6b		       a5 ec		      LDA	_Bit5_Request_Pending
   4782  1c6d		       09 20		      ORA	#32
   4783  1c6f		       85 ec		      STA	_Bit5_Request_Pending
   4784  1c71				   .L0567		;  WriteToBuffer  =  r102
   4785  1c71
   4786  1c71		       ad e6 f0 	      LDA	r102
   4787  1c74		       8d f0 1f 	      STA	WriteToBuffer
   4788  1c77				   .L0568		;  WriteToBuffer  =  r103
   4789  1c77
   4790  1c77		       ad e7 f0 	      LDA	r103
   4791  1c7a		       8d f0 1f 	      STA	WriteToBuffer
   4792  1c7d				   .L0569		;  WriteToBuffer  =  r104
   4793  1c7d
   4794  1c7d		       ad e8 f0 	      LDA	r104
   4795  1c80		       8d f0 1f 	      STA	WriteToBuffer
   4796  1c83				   .L0570		;  WriteToBuffer  =  r105
   4797  1c83
   4798  1c83		       ad e9 f0 	      LDA	r105
   4799  1c86		       8d f0 1f 	      STA	WriteToBuffer
   4800  1c89				   .L0571		;  WriteToBuffer  =  r106
   4801  1c89
   4802  1c89		       ad ea f0 	      LDA	r106
   4803  1c8c		       8d f0 1f 	      STA	WriteToBuffer
   4804  1c8f				   .L0572		;  WriteToBuffer  =  r107
   4805  1c8f
   4806  1c8f		       ad eb f0 	      LDA	r107
   4807  1c92		       8d f0 1f 	      STA	WriteToBuffer
   4808  1c95				   .L0573		;  WriteToBuffer  =  r108
   4809  1c95
   4810  1c95		       ad ec f0 	      LDA	r108
   4811  1c98		       8d f0 1f 	      STA	WriteToBuffer
   4812  1c9b				   .L0574		;  WriteToBuffer  =  r109
   4813  1c9b
   4814  1c9b		       ad ed f0 	      LDA	r109
   4815  1c9e		       8d f0 1f 	      STA	WriteToBuffer
   4816  1ca1				   .L0575		;  WriteToBuffer  =  r110
   4817  1ca1
   4818  1ca1		       ad ee f0 	      LDA	r110
   4819  1ca4		       8d f0 1f 	      STA	WriteToBuffer
   4820  1ca7				   .L0576		;  WriteToBuffer  =  r111
   4821  1ca7
   4822  1ca7		       ad ef f0 	      LDA	r111
   4823  1caa		       8d f0 1f 	      STA	WriteToBuffer
   4824  1cad				   .L0577		;  return
   4825  1cad
   4826  1cad		       ba		      tsx
   4827  1cae		       b5 02		      lda	2,x	; check return address
   4828  1cb0		       49 9c		      eor	#(>*)	; vs. current PCH
   4829  1cb2		       29 e0		      and	#$E0	;  mask off all but top 3 bits
   4830  1cb4		       f0 03		      beq	*+5	; if equal, do normal return
   4831  1cb6		       4c da ff 	      JMP	BS_return
   4832  1cb9		       60		      RTS
   4833  1cba				   .
   4834  1cba							; 
   4835  1cba
   4836  1cba				   .
   4837  1cba							; 
   4838  1cba
   4839  1cba				   .
   4840  1cba							; 
   4841  1cba
   4842  1cba				   .
   4843  1cba							; 
   4844  1cba
   4845  1cba				   ._Change_Room
   4846  1cba							; _Change_Room
   4847  1cba
   4848  1cba				   .L0578		;  delay_counter  =  2
   4849  1cba
   4850  1cba		       a9 02		      LDA	#2
   4851  1cbc		       85 d4		      STA	delay_counter
   4852  1cbe				   .L0579		;  player0y  =  200  :  ball_shoot_x  =  200  :  ball_shoot_y	=  200	:  missile0x  =  200  :  missile0y  =  200
   4853  1cbe
   4854  1cbe		       a9 c8		      LDA	#200
   4855  1cc0		       85 85		      STA	player0y
   4856  1cc2		       85 ae		      STA	ball_shoot_x
   4857  1cc4		       85 af		      STA	ball_shoot_y
   4858  1cc6		       85 82		      STA	missile0x
   4859  1cc8		       85 91		      STA	missile0y
   4860  1cca				   .
   4861  1cca							; 
   4862  1cca
   4863  1cca				   .
   4864  1cca							; 
   4865  1cca
   4866  1cca				   .L0580		;  _Bit_Game_State  =	_Bit_Game_State  &  %11000011
   4867  1cca
   4868  1cca		       a5 ec		      LDA	_Bit_Game_State
   4869  1ccc		       29 c3		      AND	#%11000011
   4870  1cce		       85 ec		      STA	_Bit_Game_State
   4871  1cd0				   .L0581		;  player1y  =  new_room_player1y  :  player1x  =  new_room_player1x  :  _Bit6_Flip_P1{6}  =  _Bit0_New_Room_P1_Flip{0}
   4872  1cd0
   4873  1cd0		       a5 a4		      LDA	new_room_player1y
   4874  1cd2		       85 86		      STA	player1y
   4875  1cd4		       a5 a5		      LDA	new_room_player1x
   4876  1cd6		       85 81		      STA	player1x
   4877  1cd8		       a5 df		      LDA	_Bit0_New_Room_P1_Flip
   4878  1cda		       29 01		      AND	#1
   4879  1cdc		       08		      PHP
   4880  1cdd		       a5 ec		      LDA	_Bit6_Flip_P1
   4881  1cdf		       29 bf		      AND	#191
   4882  1ce1		       28		      PLP
   4883  1ce2		       f0 02		      .byte.b	$F0, $02
   4884  1ce4		       09 40		      ORA	#64
   4885  1ce6		       85 ec		      STA	_Bit6_Flip_P1
   4886  1ce8				   .L0582		;  asm
   4887  1ce8
   4888  1ce8		       a9 00		      LDA	#0
   4889  1cea
   4890  1cea		       85 89		      STA	bally
   4891  1cec
   4892  1cec		       85 d7		      STA	_BitOp_M0_Dir	; delete enemy and player shot
   4893  1cee
   4894  1cee		       85 d6		      STA	_BitOp_Ball_Shot_Dir
   4895  1cf0
   4896  1cf0		       85 dc		      STA	extra_wall_move_x
   4897  1cf2
   4898  1cf2		       85 dd		      STA	roommate_move_x
   4899  1cf4
   4900  1cf4		       aa		      TAX
   4901  1cf5
   4902  1cf5				   .copy_loop
   4903  1cf5
   4904  1cf5		       ad f2 1f 	      LDA	ReceiveBuffer	; 4
   4905  1cf8
   4906  1cf8		       9d 5d f0 	      STA	w_room_definition_start,x	; 5   @9
   4907  1cfb
   4908  1cfb		       e8		      INX		; 2   @11
   4909  1cfc
   4910  1cfc		       ad f3 1f 	      LDA	ReceiveBufferSize	; 4   @15
   4911  1cff
   4912  1cff		       d0 f4		      BNE	.copy_loop	; 2/3 @18
   4913  1d01
   4914  1d01				   .L0583		;  roommate_type  =  r_roommate_type_and_range  &  3
   4915  1d01
   4916  1d01		       ad e6 f0 	      LDA	r_roommate_type_and_range
   4917  1d04		       29 03		      AND	#3
   4918  1d06		       85 de		      STA	roommate_type
   4919  1d08				   .L0584		;  if !men_to_rescue then men_to_rescue  =  r_men_to_rescue_in_this_level  :  bonus_bcd_counter  =  r_level_bonus_bcd_points
   4920  1d08
   4921  1d08		       a5 b0		      LDA	men_to_rescue
   4922  1d0a		       d0 0a		      BNE	.skipL0584
   4923  1d0c				   .condpart111
   4924  1d0c		       ad de f0 	      LDA	r_men_to_rescue_in_this_level
   4925  1d0f		       85 b0		      STA	men_to_rescue
   4926  1d11		       ad dd f0 	      LDA	r_level_bonus_bcd_points
   4927  1d14		       85 b1		      STA	bonus_bcd_counter
   4928  1d16				   .skipL0584
   4929  1d16				   .L0585		;  goto _skip_game_action
   4930  1d16
   4931  1d16		       4c be 98 	      jmp	._skip_game_action
   4932  1d19
   4933  1d19				   .
   4934  1d19							; 
   4935  1d19
   4936  1d19				   .
   4937  1d19							; 
   4938  1d19
   4939  1d19				   ._Reset_To_Start
   4940  1d19							; _Reset_To_Start
   4941  1d19
   4942  1d19				   .
   4943  1d19							; 
   4944  1d19
   4945  1d19				   .L0586		;  if ReceiveBufferSize  =  0 then goto _Start
   4946  1d19
   4947  1d19		       ad f3 1f 	      LDA	ReceiveBufferSize
   4948  1d1c		       c9 00		      CMP	#0
   4949  1d1e		       d0 03		      BNE	.skipL0586
   4950  1d20				   .condpart112
   4951  1d20		       4c 00 91 	      jmp	._Start
   4952  1d23
   4953  1d23				   .skipL0586
   4954  1d23				   .L0587		;  asm
   4955  1d23
   4956  1d23		       ad f2 1f 	      LDA	ReceiveBuffer	; 4
   4957  1d26
   4958  1d26				   .L0588		;  goto _Reset_To_Start
   4959  1d26
   4960  1d26		       4c 19 9d 	      jmp	._Reset_To_Start
   4961  1d29
   4962  1d29				   .
   4963  1d29							; 
   4964  1d29
   4965  1d29				   .
   4966  1d29							; 
   4967  1d29
   4968  1d29				   .
   4969  1d29							; 
   4970  1d29
   4971  1d29				   .
   4972  1d29							; 
   4973  1d29
   4974  1d29				   .
   4975  1d29							; 
   4976  1d29
   4977  1d29				   .
   4978  1d29							; 
   4979  1d29
   4980  1d29				   .L0589		;  data _SD_Shot_Wall
   4981  1d29
   4982  1d29		       4c 61 9d 	      JMP	.skipL0589
   4983  1d2c				   _SD_Shot_Wall
   4984  1d2c		       08 08 00 	      .byte.b	8,8,0
   4985  1d2f
   4986  1d2f		       01		      .byte.b	1
   4987  1d30
   4988  1d30		       08 08 01 	      .byte.b	8,8,1
   4989  1d33
   4990  1d33		       01		      .byte.b	1
   4991  1d34
   4992  1d34		       08 0e 01 	      .byte.b	8,14,1
   4993  1d37
   4994  1d37		       01		      .byte.b	1
   4995  1d38
   4996  1d38		       08 08 00 	      .byte.b	8,8,0
   4997  1d3b
   4998  1d3b		       01		      .byte.b	1
   4999  1d3c
   5000  1d3c		       08 08 02 	      .byte.b	8,8,2
   5001  1d3f
   5002  1d3f		       01		      .byte.b	1
   5003  1d40
   5004  1d40		       08 0e 02 	      .byte.b	8,14,2
   5005  1d43
   5006  1d43		       01		      .byte.b	1
   5007  1d44
   5008  1d44		       08 08 01 	      .byte.b	8,8,1
   5009  1d47
   5010  1d47		       01		      .byte.b	1
   5011  1d48
   5012  1d48		       07 08 03 	      .byte.b	7,8,3
   5013  1d4b
   5014  1d4b		       01		      .byte.b	1
   5015  1d4c
   5016  1d4c		       06 08 02 	      .byte.b	6,8,2
   5017  1d4f
   5018  1d4f		       01		      .byte.b	1
   5019  1d50
   5020  1d50		       05 08 04 	      .byte.b	5,8,4
   5021  1d53
   5022  1d53		       01		      .byte.b	1
   5023  1d54
   5024  1d54		       04 08 03 	      .byte.b	4,8,3
   5025  1d57
   5026  1d57		       01		      .byte.b	1
   5027  1d58
   5028  1d58		       03 08 05 	      .byte.b	3,8,5
   5029  1d5b
   5030  1d5b		       01		      .byte.b	1
   5031  1d5c
   5032  1d5c		       02 0e 04 	      .byte.b	2,14,4
   5033  1d5f
   5034  1d5f		       04		      .byte.b	4
   5035  1d60
   5036  1d60		       ff		      .byte.b	255
   5037  1d61
   5038  1d61				   .skipL0589
   5039  1d61				   .
   5040  1d61							; 
   5041  1d61
   5042  1d61				   .
   5043  1d61							; 
   5044  1d61
   5045  1d61				   .L0590		;  data _SD_Shoot_Miss
   5046  1d61
   5047  1d61		       4c a9 9d 	      JMP	.skipL0590
   5048  1d64				   _SD_Shoot_Miss
   5049  1d64		       08 0f 00 	      .byte.b	8,15,0
   5050  1d67
   5051  1d67		       01		      .byte.b	1
   5052  1d68
   5053  1d68		       0c 0f 01 	      .byte.b	12,15,1
   5054  1d6b
   5055  1d6b		       01		      .byte.b	1
   5056  1d6c
   5057  1d6c		       08 07 14 	      .byte.b	8,7,20
   5058  1d6f
   5059  1d6f		       01		      .byte.b	1
   5060  1d70
   5061  1d70		       0a 0f 03 	      .byte.b	10,15,3
   5062  1d73
   5063  1d73		       01		      .byte.b	1
   5064  1d74
   5065  1d74		       08 07 16 	      .byte.b	8,7,22
   5066  1d77
   5067  1d77		       01		      .byte.b	1
   5068  1d78
   5069  1d78		       0a 0f 05 	      .byte.b	10,15,5
   5070  1d7b
   5071  1d7b		       01		      .byte.b	1
   5072  1d7c
   5073  1d7c		       08 0f 06 	      .byte.b	8,15,6
   5074  1d7f
   5075  1d7f		       01		      .byte.b	1
   5076  1d80
   5077  1d80		       0a 07 18 	      .byte.b	10,7,24
   5078  1d83
   5079  1d83		       01		      .byte.b	1
   5080  1d84
   5081  1d84		       08 0f 08 	      .byte.b	8,15,8
   5082  1d87
   5083  1d87		       01		      .byte.b	1
   5084  1d88
   5085  1d88		       09 07 1b 	      .byte.b	9,7,27
   5086  1d8b
   5087  1d8b		       01		      .byte.b	1
   5088  1d8c
   5089  1d8c		       08 0f 0a 	      .byte.b	8,15,10
   5090  1d8f
   5091  1d8f		       01		      .byte.b	1
   5092  1d90
   5093  1d90		       07 0e 0b 	      .byte.b	7,14,11
   5094  1d93
   5095  1d93		       01		      .byte.b	1
   5096  1d94
   5097  1d94		       06 0f 0c 	      .byte.b	6,15,12
   5098  1d97
   5099  1d97		       01		      .byte.b	1
   5100  1d98
   5101  1d98		       05 06 0d 	      .byte.b	5,6,13
   5102  1d9b
   5103  1d9b		       01		      .byte.b	1
   5104  1d9c
   5105  1d9c		       04 0f 0e 	      .byte.b	4,15,14
   5106  1d9f
   5107  1d9f		       01		      .byte.b	1
   5108  1da0
   5109  1da0		       03 06 1b 	      .byte.b	3,6,27
   5110  1da3
   5111  1da3		       01		      .byte.b	1
   5112  1da4
   5113  1da4		       02 06 1e 	      .byte.b	2,6,30
   5114  1da7
   5115  1da7		       08		      .byte.b	8
   5116  1da8
   5117  1da8		       ff		      .byte.b	255
   5118  1da9
   5119  1da9				   .skipL0590
   5120  1da9				   .
   5121  1da9							; 
   5122  1da9
   5123  1da9				   .
   5124  1da9							; 
   5125  1da9
   5126  1da9				   .L0591		;  data _SD_Shoot_Enemy
   5127  1da9
   5128  1da9		       4c cd 9d 	      JMP	.skipL0591
   5129  1dac				   _SD_Shoot_Enemy
   5130  1dac		       0c 04 17 	      .byte.b	12,4,23
   5131  1daf
   5132  1daf		       04		      .byte.b	4
   5133  1db0
   5134  1db0		       0a 04 1d 	      .byte.b	10,4,29
   5135  1db3
   5136  1db3		       04		      .byte.b	4
   5137  1db4
   5138  1db4		       08 04 17 	      .byte.b	8,4,23
   5139  1db7
   5140  1db7		       04		      .byte.b	4
   5141  1db8
   5142  1db8		       06 04 1d 	      .byte.b	6,4,29
   5143  1dbb
   5144  1dbb		       04		      .byte.b	4
   5145  1dbc
   5146  1dbc		       04 04 17 	      .byte.b	4,4,23
   5147  1dbf
   5148  1dbf		       04		      .byte.b	4
   5149  1dc0
   5150  1dc0		       03 04 1d 	      .byte.b	3,4,29
   5151  1dc3
   5152  1dc3		       04		      .byte.b	4
   5153  1dc4
   5154  1dc4		       02 04 17 	      .byte.b	2,4,23
   5155  1dc7
   5156  1dc7		       01		      .byte.b	1
   5157  1dc8
   5158  1dc8		       01 04 1d 	      .byte.b	1,4,29
   5159  1dcb
   5160  1dcb		       01		      .byte.b	1
   5161  1dcc
   5162  1dcc		       ff		      .byte.b	255
   5163  1dcd
   5164  1dcd				   .skipL0591
   5165  1dcd				   .
   5166  1dcd							; 
   5167  1dcd
   5168  1dcd				   .
   5169  1dcd							; 
   5170  1dcd
   5171  1dcd				   .L0592		;  data _SD_Touch_Enemy
   5172  1dcd
   5173  1dcd		       4c ed 9d 	      JMP	.skipL0592
   5174  1dd0				   _SD_Touch_Enemy
   5175  1dd0		       02 07 0b 	      .byte.b	2,7,11
   5176  1dd3
   5177  1dd3		       02		      .byte.b	2
   5178  1dd4
   5179  1dd4		       0a 07 0c 	      .byte.b	10,7,12
   5180  1dd7
   5181  1dd7		       02		      .byte.b	2
   5182  1dd8
   5183  1dd8		       08 07 0d 	      .byte.b	8,7,13
   5184  1ddb
   5185  1ddb		       02		      .byte.b	2
   5186  1ddc
   5187  1ddc		       08 07 0e 	      .byte.b	8,7,14
   5188  1ddf
   5189  1ddf		       02		      .byte.b	2
   5190  1de0
   5191  1de0		       08 07 15 	      .byte.b	8,7,21
   5192  1de3
   5193  1de3		       08		      .byte.b	8
   5194  1de4
   5195  1de4		       04 07 16 	      .byte.b	4,7,22
   5196  1de7
   5197  1de7		       02		      .byte.b	2
   5198  1de8
   5199  1de8		       02 07 17 	      .byte.b	2,7,23
   5200  1deb
   5201  1deb		       01		      .byte.b	1
   5202  1dec
   5203  1dec		       ff		      .byte.b	255
   5204  1ded
   5205  1ded				   .skipL0592
   5206  1ded				   .
   5207  1ded							; 
   5208  1ded
   5209  1ded				   .
   5210  1ded							; 
   5211  1ded
   5212  1ded				   .
   5213  1ded							; 
   5214  1ded
   5215  1ded				   .
   5216  1ded							; 
   5217  1ded
   5218  1ded				   .
   5219  1ded							; 
   5220  1ded
   5221  1ded				   .
   5222  1ded							; 
   5223  1ded
   5224  1ded				   .
   5225  1ded							; 
   5226  1ded
   5227  1ded				   .
   5228  1ded							; 
   5229  1ded
   5230  1ded				   .L0593		;  bank 2
   5231  1ded
   5232  1ded					      if	ECHO1
      484 bytes of ROM space left in bank 1
   5233  1ded					      echo	"    ",[(start_bank1 - *)]d , "bytes of ROM space left in bank 1")
   5234  1ded					      endif
   5235  1ded		       00 01	   ECHO1      =	1
   5236  1fd1					      ORG	$1FF4-bscode_length
   5237  1fd1					      RORG	$9FF4-bscode_length
   5238  1fd1		       a2 ff	   start_bank1 ldx	#$ff
   5239  1fd3				  -	      ifconst	FASTFETCH	; using DPC+
   5240  1fd3				  -	      stx	FASTFETCH
   5241  1fd3					      endif
   5242  1fd3		       9a		      txs
   5243  1fd4				  -	      if	bankswitch == 64
   5244  1fd4				  -	      lda	#(((>(start-1)) & $0F) | $F0)
   5245  1fd4					      else
   5246  1fd4		       a9 f2		      lda	#>(start-1)
   5247  1fd6					      endif
   5248  1fd6		       48		      pha
   5249  1fd7		       a9 b0		      lda	#<(start-1)
   5250  1fd9		       48		      pha
   5251  1fda		       48		      pha
   5252  1fdb		       8a		      txa
   5253  1fdc		       48		      pha
   5254  1fdd		       ba		      tsx
   5255  1fde					      if	bankswitch != 64
   5256  1fde		       b5 04		      lda	4,x	; get high byte of return address
   5257  1fe0		       2a		      rol
   5258  1fe1		       2a		      rol
   5259  1fe2		       2a		      rol
   5260  1fe3		       2a		      rol
   5261  1fe4		       29 03		      and	#bs_mask	;1 3 or 7 for F8/F6/F4
   5262  1fe6		       aa		      tax
   5263  1fe7		       e8		      inx
   5264  1fe8				  -	      else
   5265  1fe8				  -	      lda	4,x	; get high byte of return address
   5266  1fe8				  -	      tay
   5267  1fe8				  -	      ora	#$10	; change our bank nibble into a valid rom mirror
   5268  1fe8				  -	      sta	4,x
   5269  1fe8				  -	      tya
   5270  1fe8				  -	      lsr
   5271  1fe8				  -	      lsr
   5272  1fe8				  -	      lsr
   5273  1fe8				  -	      lsr
   5274  1fe8				  -	      tax
   5275  1fe8				  -	      inx
   5276  1fe8					      endif
   5277  1fe8		       bd f5 1f 	      lda	bankswitch_hotspot-1,x
   5278  1feb		       68		      pla
   5279  1fec		       aa		      tax
   5280  1fed		       68		      pla
   5281  1fee		       60		      rts
   5282  1fef				  -	      if	((* & $1FFF) > ((bankswitch_hotspot & $1FFF) - 1))
   5283  1fef				  -	      echo	"WARNING: size parameter in banksw.asm too small - the program probably will not work."
   5284  1fef				  -	      echo	"Change to",[(*-begin_bscode+1)&$FF]d,"and try again."
   5285  1fef					      endif
   5286  1ffc					      ORG	$1FFC
   5287  1ffc					      RORG	$9FFC
   5288  1ffc		       d1 9f		      .word.w	(start_bank1 & $ffff)
   5289  1ffe		       d1 9f		      .word.w	(start_bank1 & $ffff)
   5290  2000					      ORG	$2000
   5291  2000					      RORG	$B000
   5292  2000					      repeat	256
   5293  2000		       ff		      .byte.b	$ff
   5292  2000					      repend
   5293  2001		       ff		      .byte.b	$ff
   5292  2001					      repend
   5293  2002		       ff		      .byte.b	$ff
   5292  2002					      repend
   5293  2003		       ff		      .byte.b	$ff
   5292  2003					      repend
   5293  2004		       ff		      .byte.b	$ff
   5292  2004					      repend
   5293  2005		       ff		      .byte.b	$ff
   5292  2005					      repend
   5293  2006		       ff		      .byte.b	$ff
   5292  2006					      repend
   5293  2007		       ff		      .byte.b	$ff
   5292  2007					      repend
   5293  2008		       ff		      .byte.b	$ff
   5292  2008					      repend
   5293  2009		       ff		      .byte.b	$ff
   5292  2009					      repend
   5293  200a		       ff		      .byte.b	$ff
   5292  200a					      repend
   5293  200b		       ff		      .byte.b	$ff
   5292  200b					      repend
   5293  200c		       ff		      .byte.b	$ff
   5292  200c					      repend
   5293  200d		       ff		      .byte.b	$ff
   5292  200d					      repend
   5293  200e		       ff		      .byte.b	$ff
   5292  200e					      repend
   5293  200f		       ff		      .byte.b	$ff
   5292  200f					      repend
   5293  2010		       ff		      .byte.b	$ff
   5292  2010					      repend
   5293  2011		       ff		      .byte.b	$ff
   5292  2011					      repend
   5293  2012		       ff		      .byte.b	$ff
   5292  2012					      repend
   5293  2013		       ff		      .byte.b	$ff
   5292  2013					      repend
   5293  2014		       ff		      .byte.b	$ff
   5292  2014					      repend
   5293  2015		       ff		      .byte.b	$ff
   5292  2015					      repend
   5293  2016		       ff		      .byte.b	$ff
   5292  2016					      repend
   5293  2017		       ff		      .byte.b	$ff
   5292  2017					      repend
   5293  2018		       ff		      .byte.b	$ff
   5292  2018					      repend
   5293  2019		       ff		      .byte.b	$ff
   5292  2019					      repend
   5293  201a		       ff		      .byte.b	$ff
   5292  201a					      repend
   5293  201b		       ff		      .byte.b	$ff
   5292  201b					      repend
   5293  201c		       ff		      .byte.b	$ff
   5292  201c					      repend
   5293  201d		       ff		      .byte.b	$ff
   5292  201d					      repend
   5293  201e		       ff		      .byte.b	$ff
   5292  201e					      repend
   5293  201f		       ff		      .byte.b	$ff
   5292  201f					      repend
   5293  2020		       ff		      .byte.b	$ff
   5292  2020					      repend
   5293  2021		       ff		      .byte.b	$ff
   5292  2021					      repend
   5293  2022		       ff		      .byte.b	$ff
   5292  2022					      repend
   5293  2023		       ff		      .byte.b	$ff
   5292  2023					      repend
   5293  2024		       ff		      .byte.b	$ff
   5292  2024					      repend
   5293  2025		       ff		      .byte.b	$ff
   5292  2025					      repend
   5293  2026		       ff		      .byte.b	$ff
   5292  2026					      repend
   5293  2027		       ff		      .byte.b	$ff
   5292  2027					      repend
   5293  2028		       ff		      .byte.b	$ff
   5292  2028					      repend
   5293  2029		       ff		      .byte.b	$ff
   5292  2029					      repend
   5293  202a		       ff		      .byte.b	$ff
   5292  202a					      repend
   5293  202b		       ff		      .byte.b	$ff
   5292  202b					      repend
   5293  202c		       ff		      .byte.b	$ff
   5292  202c					      repend
   5293  202d		       ff		      .byte.b	$ff
   5292  202d					      repend
   5293  202e		       ff		      .byte.b	$ff
   5292  202e					      repend
   5293  202f		       ff		      .byte.b	$ff
   5292  202f					      repend
   5293  2030		       ff		      .byte.b	$ff
   5292  2030					      repend
   5293  2031		       ff		      .byte.b	$ff
   5292  2031					      repend
   5293  2032		       ff		      .byte.b	$ff
   5292  2032					      repend
   5293  2033		       ff		      .byte.b	$ff
   5292  2033					      repend
   5293  2034		       ff		      .byte.b	$ff
   5292  2034					      repend
   5293  2035		       ff		      .byte.b	$ff
   5292  2035					      repend
   5293  2036		       ff		      .byte.b	$ff
   5292  2036					      repend
   5293  2037		       ff		      .byte.b	$ff
   5292  2037					      repend
   5293  2038		       ff		      .byte.b	$ff
   5292  2038					      repend
   5293  2039		       ff		      .byte.b	$ff
   5292  2039					      repend
   5293  203a		       ff		      .byte.b	$ff
   5292  203a					      repend
   5293  203b		       ff		      .byte.b	$ff
   5292  203b					      repend
   5293  203c		       ff		      .byte.b	$ff
   5292  203c					      repend
   5293  203d		       ff		      .byte.b	$ff
   5292  203d					      repend
   5293  203e		       ff		      .byte.b	$ff
   5292  203e					      repend
   5293  203f		       ff		      .byte.b	$ff
   5292  203f					      repend
   5293  2040		       ff		      .byte.b	$ff
   5292  2040					      repend
   5293  2041		       ff		      .byte.b	$ff
   5292  2041					      repend
   5293  2042		       ff		      .byte.b	$ff
   5292  2042					      repend
   5293  2043		       ff		      .byte.b	$ff
   5292  2043					      repend
   5293  2044		       ff		      .byte.b	$ff
   5292  2044					      repend
   5293  2045		       ff		      .byte.b	$ff
   5292  2045					      repend
   5293  2046		       ff		      .byte.b	$ff
   5292  2046					      repend
   5293  2047		       ff		      .byte.b	$ff
   5292  2047					      repend
   5293  2048		       ff		      .byte.b	$ff
   5292  2048					      repend
   5293  2049		       ff		      .byte.b	$ff
   5292  2049					      repend
   5293  204a		       ff		      .byte.b	$ff
   5292  204a					      repend
   5293  204b		       ff		      .byte.b	$ff
   5292  204b					      repend
   5293  204c		       ff		      .byte.b	$ff
   5292  204c					      repend
   5293  204d		       ff		      .byte.b	$ff
   5292  204d					      repend
   5293  204e		       ff		      .byte.b	$ff
   5292  204e					      repend
   5293  204f		       ff		      .byte.b	$ff
   5292  204f					      repend
   5293  2050		       ff		      .byte.b	$ff
   5292  2050					      repend
   5293  2051		       ff		      .byte.b	$ff
   5292  2051					      repend
   5293  2052		       ff		      .byte.b	$ff
   5292  2052					      repend
   5293  2053		       ff		      .byte.b	$ff
   5292  2053					      repend
   5293  2054		       ff		      .byte.b	$ff
   5292  2054					      repend
   5293  2055		       ff		      .byte.b	$ff
   5292  2055					      repend
   5293  2056		       ff		      .byte.b	$ff
   5292  2056					      repend
   5293  2057		       ff		      .byte.b	$ff
   5292  2057					      repend
   5293  2058		       ff		      .byte.b	$ff
   5292  2058					      repend
   5293  2059		       ff		      .byte.b	$ff
   5292  2059					      repend
   5293  205a		       ff		      .byte.b	$ff
   5292  205a					      repend
   5293  205b		       ff		      .byte.b	$ff
   5292  205b					      repend
   5293  205c		       ff		      .byte.b	$ff
   5292  205c					      repend
   5293  205d		       ff		      .byte.b	$ff
   5292  205d					      repend
   5293  205e		       ff		      .byte.b	$ff
   5292  205e					      repend
   5293  205f		       ff		      .byte.b	$ff
   5292  205f					      repend
   5293  2060		       ff		      .byte.b	$ff
   5292  2060					      repend
   5293  2061		       ff		      .byte.b	$ff
   5292  2061					      repend
   5293  2062		       ff		      .byte.b	$ff
   5292  2062					      repend
   5293  2063		       ff		      .byte.b	$ff
   5292  2063					      repend
   5293  2064		       ff		      .byte.b	$ff
   5292  2064					      repend
   5293  2065		       ff		      .byte.b	$ff
   5292  2065					      repend
   5293  2066		       ff		      .byte.b	$ff
   5292  2066					      repend
   5293  2067		       ff		      .byte.b	$ff
   5292  2067					      repend
   5293  2068		       ff		      .byte.b	$ff
   5292  2068					      repend
   5293  2069		       ff		      .byte.b	$ff
   5292  2069					      repend
   5293  206a		       ff		      .byte.b	$ff
   5292  206a					      repend
   5293  206b		       ff		      .byte.b	$ff
   5292  206b					      repend
   5293  206c		       ff		      .byte.b	$ff
   5292  206c					      repend
   5293  206d		       ff		      .byte.b	$ff
   5292  206d					      repend
   5293  206e		       ff		      .byte.b	$ff
   5292  206e					      repend
   5293  206f		       ff		      .byte.b	$ff
   5292  206f					      repend
   5293  2070		       ff		      .byte.b	$ff
   5292  2070					      repend
   5293  2071		       ff		      .byte.b	$ff
   5292  2071					      repend
   5293  2072		       ff		      .byte.b	$ff
   5292  2072					      repend
   5293  2073		       ff		      .byte.b	$ff
   5292  2073					      repend
   5293  2074		       ff		      .byte.b	$ff
   5292  2074					      repend
   5293  2075		       ff		      .byte.b	$ff
   5292  2075					      repend
   5293  2076		       ff		      .byte.b	$ff
   5292  2076					      repend
   5293  2077		       ff		      .byte.b	$ff
   5292  2077					      repend
   5293  2078		       ff		      .byte.b	$ff
   5292  2078					      repend
   5293  2079		       ff		      .byte.b	$ff
   5292  2079					      repend
   5293  207a		       ff		      .byte.b	$ff
   5292  207a					      repend
   5293  207b		       ff		      .byte.b	$ff
   5292  207b					      repend
   5293  207c		       ff		      .byte.b	$ff
   5292  207c					      repend
   5293  207d		       ff		      .byte.b	$ff
   5292  207d					      repend
   5293  207e		       ff		      .byte.b	$ff
   5292  207e					      repend
   5293  207f		       ff		      .byte.b	$ff
   5292  207f					      repend
   5293  2080		       ff		      .byte.b	$ff
   5292  2080					      repend
   5293  2081		       ff		      .byte.b	$ff
   5292  2081					      repend
   5293  2082		       ff		      .byte.b	$ff
   5292  2082					      repend
   5293  2083		       ff		      .byte.b	$ff
   5292  2083					      repend
   5293  2084		       ff		      .byte.b	$ff
   5292  2084					      repend
   5293  2085		       ff		      .byte.b	$ff
   5292  2085					      repend
   5293  2086		       ff		      .byte.b	$ff
   5292  2086					      repend
   5293  2087		       ff		      .byte.b	$ff
   5292  2087					      repend
   5293  2088		       ff		      .byte.b	$ff
   5292  2088					      repend
   5293  2089		       ff		      .byte.b	$ff
   5292  2089					      repend
   5293  208a		       ff		      .byte.b	$ff
   5292  208a					      repend
   5293  208b		       ff		      .byte.b	$ff
   5292  208b					      repend
   5293  208c		       ff		      .byte.b	$ff
   5292  208c					      repend
   5293  208d		       ff		      .byte.b	$ff
   5292  208d					      repend
   5293  208e		       ff		      .byte.b	$ff
   5292  208e					      repend
   5293  208f		       ff		      .byte.b	$ff
   5292  208f					      repend
   5293  2090		       ff		      .byte.b	$ff
   5292  2090					      repend
   5293  2091		       ff		      .byte.b	$ff
   5292  2091					      repend
   5293  2092		       ff		      .byte.b	$ff
   5292  2092					      repend
   5293  2093		       ff		      .byte.b	$ff
   5292  2093					      repend
   5293  2094		       ff		      .byte.b	$ff
   5292  2094					      repend
   5293  2095		       ff		      .byte.b	$ff
   5292  2095					      repend
   5293  2096		       ff		      .byte.b	$ff
   5292  2096					      repend
   5293  2097		       ff		      .byte.b	$ff
   5292  2097					      repend
   5293  2098		       ff		      .byte.b	$ff
   5292  2098					      repend
   5293  2099		       ff		      .byte.b	$ff
   5292  2099					      repend
   5293  209a		       ff		      .byte.b	$ff
   5292  209a					      repend
   5293  209b		       ff		      .byte.b	$ff
   5292  209b					      repend
   5293  209c		       ff		      .byte.b	$ff
   5292  209c					      repend
   5293  209d		       ff		      .byte.b	$ff
   5292  209d					      repend
   5293  209e		       ff		      .byte.b	$ff
   5292  209e					      repend
   5293  209f		       ff		      .byte.b	$ff
   5292  209f					      repend
   5293  20a0		       ff		      .byte.b	$ff
   5292  20a0					      repend
   5293  20a1		       ff		      .byte.b	$ff
   5292  20a1					      repend
   5293  20a2		       ff		      .byte.b	$ff
   5292  20a2					      repend
   5293  20a3		       ff		      .byte.b	$ff
   5292  20a3					      repend
   5293  20a4		       ff		      .byte.b	$ff
   5292  20a4					      repend
   5293  20a5		       ff		      .byte.b	$ff
   5292  20a5					      repend
   5293  20a6		       ff		      .byte.b	$ff
   5292  20a6					      repend
   5293  20a7		       ff		      .byte.b	$ff
   5292  20a7					      repend
   5293  20a8		       ff		      .byte.b	$ff
   5292  20a8					      repend
   5293  20a9		       ff		      .byte.b	$ff
   5292  20a9					      repend
   5293  20aa		       ff		      .byte.b	$ff
   5292  20aa					      repend
   5293  20ab		       ff		      .byte.b	$ff
   5292  20ab					      repend
   5293  20ac		       ff		      .byte.b	$ff
   5292  20ac					      repend
   5293  20ad		       ff		      .byte.b	$ff
   5292  20ad					      repend
   5293  20ae		       ff		      .byte.b	$ff
   5292  20ae					      repend
   5293  20af		       ff		      .byte.b	$ff
   5292  20af					      repend
   5293  20b0		       ff		      .byte.b	$ff
   5292  20b0					      repend
   5293  20b1		       ff		      .byte.b	$ff
   5292  20b1					      repend
   5293  20b2		       ff		      .byte.b	$ff
   5292  20b2					      repend
   5293  20b3		       ff		      .byte.b	$ff
   5292  20b3					      repend
   5293  20b4		       ff		      .byte.b	$ff
   5292  20b4					      repend
   5293  20b5		       ff		      .byte.b	$ff
   5292  20b5					      repend
   5293  20b6		       ff		      .byte.b	$ff
   5292  20b6					      repend
   5293  20b7		       ff		      .byte.b	$ff
   5292  20b7					      repend
   5293  20b8		       ff		      .byte.b	$ff
   5292  20b8					      repend
   5293  20b9		       ff		      .byte.b	$ff
   5292  20b9					      repend
   5293  20ba		       ff		      .byte.b	$ff
   5292  20ba					      repend
   5293  20bb		       ff		      .byte.b	$ff
   5292  20bb					      repend
   5293  20bc		       ff		      .byte.b	$ff
   5292  20bc					      repend
   5293  20bd		       ff		      .byte.b	$ff
   5292  20bd					      repend
   5293  20be		       ff		      .byte.b	$ff
   5292  20be					      repend
   5293  20bf		       ff		      .byte.b	$ff
   5292  20bf					      repend
   5293  20c0		       ff		      .byte.b	$ff
   5292  20c0					      repend
   5293  20c1		       ff		      .byte.b	$ff
   5292  20c1					      repend
   5293  20c2		       ff		      .byte.b	$ff
   5292  20c2					      repend
   5293  20c3		       ff		      .byte.b	$ff
   5292  20c3					      repend
   5293  20c4		       ff		      .byte.b	$ff
   5292  20c4					      repend
   5293  20c5		       ff		      .byte.b	$ff
   5292  20c5					      repend
   5293  20c6		       ff		      .byte.b	$ff
   5292  20c6					      repend
   5293  20c7		       ff		      .byte.b	$ff
   5292  20c7					      repend
   5293  20c8		       ff		      .byte.b	$ff
   5292  20c8					      repend
   5293  20c9		       ff		      .byte.b	$ff
   5292  20c9					      repend
   5293  20ca		       ff		      .byte.b	$ff
   5292  20ca					      repend
   5293  20cb		       ff		      .byte.b	$ff
   5292  20cb					      repend
   5293  20cc		       ff		      .byte.b	$ff
   5292  20cc					      repend
   5293  20cd		       ff		      .byte.b	$ff
   5292  20cd					      repend
   5293  20ce		       ff		      .byte.b	$ff
   5292  20ce					      repend
   5293  20cf		       ff		      .byte.b	$ff
   5292  20cf					      repend
   5293  20d0		       ff		      .byte.b	$ff
   5292  20d0					      repend
   5293  20d1		       ff		      .byte.b	$ff
   5292  20d1					      repend
   5293  20d2		       ff		      .byte.b	$ff
   5292  20d2					      repend
   5293  20d3		       ff		      .byte.b	$ff
   5292  20d3					      repend
   5293  20d4		       ff		      .byte.b	$ff
   5292  20d4					      repend
   5293  20d5		       ff		      .byte.b	$ff
   5292  20d5					      repend
   5293  20d6		       ff		      .byte.b	$ff
   5292  20d6					      repend
   5293  20d7		       ff		      .byte.b	$ff
   5292  20d7					      repend
   5293  20d8		       ff		      .byte.b	$ff
   5292  20d8					      repend
   5293  20d9		       ff		      .byte.b	$ff
   5292  20d9					      repend
   5293  20da		       ff		      .byte.b	$ff
   5292  20da					      repend
   5293  20db		       ff		      .byte.b	$ff
   5292  20db					      repend
   5293  20dc		       ff		      .byte.b	$ff
   5292  20dc					      repend
   5293  20dd		       ff		      .byte.b	$ff
   5292  20dd					      repend
   5293  20de		       ff		      .byte.b	$ff
   5292  20de					      repend
   5293  20df		       ff		      .byte.b	$ff
   5292  20df					      repend
   5293  20e0		       ff		      .byte.b	$ff
   5292  20e0					      repend
   5293  20e1		       ff		      .byte.b	$ff
   5292  20e1					      repend
   5293  20e2		       ff		      .byte.b	$ff
   5292  20e2					      repend
   5293  20e3		       ff		      .byte.b	$ff
   5292  20e3					      repend
   5293  20e4		       ff		      .byte.b	$ff
   5292  20e4					      repend
   5293  20e5		       ff		      .byte.b	$ff
   5292  20e5					      repend
   5293  20e6		       ff		      .byte.b	$ff
   5292  20e6					      repend
   5293  20e7		       ff		      .byte.b	$ff
   5292  20e7					      repend
   5293  20e8		       ff		      .byte.b	$ff
   5292  20e8					      repend
   5293  20e9		       ff		      .byte.b	$ff
   5292  20e9					      repend
   5293  20ea		       ff		      .byte.b	$ff
   5292  20ea					      repend
   5293  20eb		       ff		      .byte.b	$ff
   5292  20eb					      repend
   5293  20ec		       ff		      .byte.b	$ff
   5292  20ec					      repend
   5293  20ed		       ff		      .byte.b	$ff
   5292  20ed					      repend
   5293  20ee		       ff		      .byte.b	$ff
   5292  20ee					      repend
   5293  20ef		       ff		      .byte.b	$ff
   5292  20ef					      repend
   5293  20f0		       ff		      .byte.b	$ff
   5292  20f0					      repend
   5293  20f1		       ff		      .byte.b	$ff
   5292  20f1					      repend
   5293  20f2		       ff		      .byte.b	$ff
   5292  20f2					      repend
   5293  20f3		       ff		      .byte.b	$ff
   5292  20f3					      repend
   5293  20f4		       ff		      .byte.b	$ff
   5292  20f4					      repend
   5293  20f5		       ff		      .byte.b	$ff
   5292  20f5					      repend
   5293  20f6		       ff		      .byte.b	$ff
   5292  20f6					      repend
   5293  20f7		       ff		      .byte.b	$ff
   5292  20f7					      repend
   5293  20f8		       ff		      .byte.b	$ff
   5292  20f8					      repend
   5293  20f9		       ff		      .byte.b	$ff
   5292  20f9					      repend
   5293  20fa		       ff		      .byte.b	$ff
   5292  20fa					      repend
   5293  20fb		       ff		      .byte.b	$ff
   5292  20fb					      repend
   5293  20fc		       ff		      .byte.b	$ff
   5292  20fc					      repend
   5293  20fd		       ff		      .byte.b	$ff
   5292  20fd					      repend
   5293  20fe		       ff		      .byte.b	$ff
   5292  20fe					      repend
   5293  20ff		       ff		      .byte.b	$ff
   5294  2100					      repend
   5295  2100				   .
   5296  2100							; 
   5297  2100
   5298  2100				   ._titlescreen_menu
   5299  2100							; _titlescreen_menu
   5300  2100
   5301  2100				   .L0594		;  COLUBK  =  _00
   5302  2100
   5303  2100		       a9 00		      LDA	#_00
   5304  2102		       85 09		      STA	COLUBK
   5305  2104				   .
   5306  2104							; 
   5307  2104
   5308  2104				   .L0595		;  gosub titledrawscreen
   5309  2104
   5310  2104		       20 df b2 	      jsr	.titledrawscreen
   5311  2107
   5312  2107				   .
   5313  2107							; 
   5314  2107
   5315  2107				   .L0596		;  if delay_counter then delay_counter  =  delay_counter  -  1  :  goto _titlescreen_menu
   5316  2107
   5317  2107		       a5 d4		      LDA	delay_counter
   5318  2109		       f0 05		      BEQ	.skipL0596
   5319  210b				   .condpart113
   5320  210b		       c6 d4		      DEC	delay_counter
   5321  210d		       4c 00 b1 	      jmp	._titlescreen_menu
   5322  2110
   5323  2110				   .skipL0596
   5324  2110				   .
   5325  2110							; 
   5326  2110
   5327  2110				   .L0597		;  if ReceiveBufferSize  <  response_menu_size then _Skip_Read_Menu_Response
   5328  2110
   5329  2110		       ad f3 1f 	      LDA	ReceiveBufferSize
   5330  2113		       c9 06		      CMP	#response_menu_size
   5331  2115					      if	((* - ._Skip_Read_Menu_Response) < 127) && ((* - ._Skip_Read_Menu_Response) > -128)
   5332  2115		       90 32		      bcc	._Skip_Read_Menu_Response
   5333  2117				  -	      else
   5334  2117				  -	      bcs	.33skip_Skip_Read_Menu_Response
   5335  2117				  -	      jmp	._Skip_Read_Menu_Response
   5336  2117				  -.33skip_Skip_Read_Menu_Response
   5337  2117					      endif
   5338  2117				   .L0598		;  _Bit5_Request_Pending{5}  =  0
   5339  2117
   5340  2117		       a5 ec		      LDA	_Bit5_Request_Pending
   5341  2119		       29 df		      AND	#223
   5342  211b		       85 ec		      STA	_Bit5_Request_Pending
   5343  211d				   .L0599		;  max_pub_level_bcd1	=  ReceiveBuffer
   5344  211d
   5345  211d		       ad f2 1f 	      LDA	ReceiveBuffer
   5346  2120		       85 a7		      STA	max_pub_level_bcd1
   5347  2122				   .L0600		;  max_pub_level_bcd2	=  ReceiveBuffer
   5348  2122
   5349  2122		       ad f2 1f 	      LDA	ReceiveBuffer
   5350  2125		       85 a8		      STA	max_pub_level_bcd2
   5351  2127				   .L0601		;  max_pub_level_bcd3	=  ReceiveBuffer
   5352  2127
   5353  2127		       ad f2 1f 	      LDA	ReceiveBuffer
   5354  212a		       85 a9		      STA	max_pub_level_bcd3
   5355  212c				   .L0602		;  max_priv_level_bcd1  =  ReceiveBuffer
   5356  212c
   5357  212c		       ad f2 1f 	      LDA	ReceiveBuffer
   5358  212f		       85 aa		      STA	max_priv_level_bcd1
   5359  2131				   .L0603		;  max_priv_level_bcd2  =  ReceiveBuffer
   5360  2131
   5361  2131		       ad f2 1f 	      LDA	ReceiveBuffer
   5362  2134		       85 ab		      STA	max_priv_level_bcd2
   5363  2136				   .L0604		;  max_priv_level_bcd3  =  ReceiveBuffer
   5364  2136
   5365  2136		       ad f2 1f 	      LDA	ReceiveBuffer
   5366  2139		       85 ac		      STA	max_priv_level_bcd3
   5367  213b				   .L0605		;  has_private_levels	=  max_priv_level_bcd1	|  max_priv_level_bcd2	|  max_priv_level_bcd3
   5368  213b
   5369  213b							; complex statement detected
   5370  213b		       a5 aa		      LDA	max_priv_level_bcd1
   5371  213d		       48		      PHA
   5372  213e		       a5 ab		      LDA	max_priv_level_bcd2
   5373  2140		       05 ac		      ORA	max_priv_level_bcd3
   5374  2142		       ba		      TSX
   5375  2143		       e8		      INX
   5376  2144		       9a		      TXS
   5377  2145		       15 00		      ORA	$00,x
   5378  2147		       85 ad		      STA	has_private_levels
   5379  2149				   ._Skip_Read_Menu_Response
   5380  2149							; _Skip_Read_Menu_Response
   5381  2149
   5382  2149				   .
   5383  2149							; 
   5384  2149
   5385  2149				   .L0606		;  if _Bit5_Request_Pending{5} then _titlescreen_menu
   5386  2149
   5387  2149		       a5 ec		      LDA	_Bit5_Request_Pending
   5388  214b		       29 20		      AND	#32
   5389  214d					      if	((* - ._titlescreen_menu) < 127) && ((* - ._titlescreen_menu) > -128)
   5390  214d		       d0 b1		      BNE	._titlescreen_menu
   5391  214f				  -	      else
   5392  214f				  -	      beq	.34skip_titlescreen_menu
   5393  214f				  -	      jmp	._titlescreen_menu
   5394  214f				  -.34skip_titlescreen_menu
   5395  214f					      endif
   5396  214f				   .
   5397  214f							; 
   5398  214f
   5399  214f				   .L0607		;  if joy0left then score  =  score  -  100  :  delay_counter	=  5
   5400  214f
   5401  214f		       2c 80 02 	      bit	SWCHA
   5402  2152		       70 19		      BVS	.skipL0607
   5403  2154				   .condpart114
   5404  2154		       f8		      SED
   5405  2155		       38		      SEC
   5406  2156		       a5 95		      LDA	score+2
   5407  2158		       e9 00		      SBC	#$00
   5408  215a		       85 95		      STA	score+2
   5409  215c		       a5 94		      LDA	score+1
   5410  215e		       e9 01		      SBC	#$01
   5411  2160		       85 94		      STA	score+1
   5412  2162		       a5 93		      LDA	score
   5413  2164		       e9 00		      SBC	#$00
   5414  2166		       85 93		      STA	score
   5415  2168		       d8		      CLD
   5416  2169		       a9 05		      LDA	#5
   5417  216b		       85 d4		      STA	delay_counter
   5418  216d				   .skipL0607
   5419  216d				   .L0608		;  if joy0down then score  =  score  -  1  :  delay_counter  =  5
   5420  216d
   5421  216d		       a9 20		      lda	#$20
   5422  216f		       2c 80 02 	      bit	SWCHA
   5423  2172		       d0 19		      BNE	.skipL0608
   5424  2174				   .condpart115
   5425  2174		       f8		      SED
   5426  2175		       38		      SEC
   5427  2176		       a5 95		      LDA	score+2
   5428  2178		       e9 01		      SBC	#$01
   5429  217a		       85 95		      STA	score+2
   5430  217c		       a5 94		      LDA	score+1
   5431  217e		       e9 00		      SBC	#$00
   5432  2180		       85 94		      STA	score+1
   5433  2182		       a5 93		      LDA	score
   5434  2184		       e9 00		      SBC	#$00
   5435  2186		       85 93		      STA	score
   5436  2188		       d8		      CLD
   5437  2189		       a9 05		      LDA	#5
   5438  218b		       85 d4		      STA	delay_counter
   5439  218d				   .skipL0608
   5440  218d				   .L0609		;  if joy0right then score  =	score  +  100  :  delay_counter  =  5
   5441  218d
   5442  218d		       2c 80 02 	      bit	SWCHA
   5443  2190		       30 13		      BMI	.skipL0609
   5444  2192				   .condpart116
   5445  2192		       f8		      SED
   5446  2193		       18		      CLC
   5447  2194		       a5 94		      LDA	score+1
   5448  2196		       69 01		      ADC	#$01
   5449  2198		       85 94		      STA	score+1
   5450  219a		       a5 93		      LDA	score
   5451  219c		       69 00		      ADC	#$00
   5452  219e		       85 93		      STA	score
   5453  21a0		       d8		      CLD
   5454  21a1		       a9 05		      LDA	#5
   5455  21a3		       85 d4		      STA	delay_counter
   5456  21a5				   .skipL0609
   5457  21a5				   .L0610		;  if joy0up then score  =  score  +  1  :  delay_counter  =  5
   5458  21a5
   5459  21a5		       a9 10		      lda	#$10
   5460  21a7		       2c 80 02 	      bit	SWCHA
   5461  21aa		       d0 19		      BNE	.skipL0610
   5462  21ac				   .condpart117
   5463  21ac		       f8		      SED
   5464  21ad		       18		      CLC
   5465  21ae		       a5 95		      LDA	score+2
   5466  21b0		       69 01		      ADC	#$01
   5467  21b2		       85 95		      STA	score+2
   5468  21b4		       a5 94		      LDA	score+1
   5469  21b6		       69 00		      ADC	#$00
   5470  21b8		       85 94		      STA	score+1
   5471  21ba		       a5 93		      LDA	score
   5472  21bc		       69 00		      ADC	#$00
   5473  21be		       85 93		      STA	score
   5474  21c0		       d8		      CLD
   5475  21c1		       a9 05		      LDA	#5
   5476  21c3		       85 d4		      STA	delay_counter
   5477  21c5				   .skipL0610
   5478  21c5				   .
   5479  21c5							; 
   5480  21c5
   5481  21c5				   .
   5482  21c5							; 
   5483  21c5
   5484  21c5				   .L0611		;  if gamenumber  >  4 then _User_Level_Compare
   5485  21c5
   5486  21c5		       a9 04		      LDA	#4
   5487  21c7		       c5 a6		      CMP	gamenumber
   5488  21c9					      if	((* - ._User_Level_Compare) < 127) && ((* - ._User_Level_Compare) > -128)
   5489  21c9		       90 13		      bcc	._User_Level_Compare
   5490  21cb				  -	      else
   5491  21cb				  -	      bcs	.35skip_User_Level_Compare
   5492  21cb				  -	      jmp	._User_Level_Compare
   5493  21cb				  -.35skip_User_Level_Compare
   5494  21cb					      endif
   5495  21cb				   .
   5496  21cb							; 
   5497  21cb
   5498  21cb				   .L0612		;  asm
   5499  21cb
   5500  21cb		       f8		      sed		; Set the Decimal Mode Flag
   5501  21cc
   5502  21cc		       a5 a9		      lda	max_pub_level_bcd3	; Load the Accumulator
   5503  21ce
   5504  21ce		       c5 95		      cmp	_sc3	; Compare Memory and the Accumulator
   5505  21d0
   5506  21d0		       a5 a8		      lda	max_pub_level_bcd2	; Load the Accumulator
   5507  21d2
   5508  21d2		       e5 94		      sbc	_sc2	; Subtract With Carry
   5509  21d4
   5510  21d4		       a5 a7		      lda	max_pub_level_bcd1	; Load the Accumulator
   5511  21d6
   5512  21d6		       e5 93		      sbc	_sc1	; Subtract With Carry
   5513  21d8
   5514  21d8		       d8		      cld		; Clear the Decimal Flag
   5515  21d9
   5516  21d9		       b0 1f		      bcs	._Skip_Level_Reset	; Branch if Carry Set
   5517  21db
   5518  21db							; (goto label if carry is set)
   5519  21db
   5520  21db		       4c ee b1 	      jmp	._Level_Reset
   5521  21de
   5522  21de
   5523  21de
   5524  21de				   ._User_Level_Compare
   5525  21de
   5526  21de		       f8		      sed		; Set the Decimal Mode Flag
   5527  21df
   5528  21df		       a5 ac		      lda	max_priv_level_bcd3	; Load the Accumulator
   5529  21e1
   5530  21e1		       c5 95		      cmp	_sc3	; Compare Memory and the Accumulator
   5531  21e3
   5532  21e3		       a5 ab		      lda	max_priv_level_bcd2	; Load the Accumulator
   5533  21e5
   5534  21e5		       e5 94		      sbc	_sc2	; Subtract With Carry
   5535  21e7
   5536  21e7		       a5 aa		      lda	max_priv_level_bcd1	; Load the Accumulator
   5537  21e9
   5538  21e9		       e5 93		      sbc	_sc1	; Subtract With Carry
   5539  21eb
   5540  21eb		       d8		      cld		; Clear the Decimal Flag
   5541  21ec
   5542  21ec		       b0 0c		      bcs	._Skip_Level_Reset	; Branch if Carry Set
   5543  21ee
   5544  21ee							; (goto label if carry is set)
   5545  21ee
   5546  21ee
   5547  21ee
   5548  21ee				   ._Level_Reset
   5549  21ee							; _Level_Reset
   5550  21ee
   5551  21ee				   .L0613		;  score  =  1
   5552  21ee
   5553  21ee		       a9 01		      LDA	#$01
   5554  21f0		       85 95		      STA	score+2
   5555  21f2		       a9 00		      LDA	#$00
   5556  21f4		       85 94		      STA	score+1
   5557  21f6		       a9 00		      LDA	#$00
   5558  21f8		       85 93		      STA	score
   5559  21fa				   .
   5560  21fa							; 
   5561  21fa
   5562  21fa				   ._Skip_Level_Reset
   5563  21fa							; _Skip_Level_Reset
   5564  21fa
   5565  21fa				   .L0614		;  if gamenumber  <  5  &&  _sc1  =  0  &&  _sc2  =  0  &&  _sc3  =  0 then _sc1  =  max_pub_level_bcd1  :  _sc2  =  max_pub_level_bcd2  :  _sc3  =  max_pub_level_bcd3
   5566  21fa
   5567  21fa		       a5 a6		      LDA	gamenumber
   5568  21fc		       c9 05		      CMP	#5
   5569  21fe		       b0 1e		      BCS	.skipL0614
   5570  2200				   .condpart118
   5571  2200		       a5 93		      LDA	_sc1
   5572  2202		       c9 00		      CMP	#0
   5573  2204		       d0 18		      BNE	.skip118then
   5574  2206				   .condpart119
   5575  2206		       a5 94		      LDA	_sc2
   5576  2208		       c9 00		      CMP	#0
   5577  220a		       d0 12		      BNE	.skip119then
   5578  220c				   .condpart120
   5579  220c		       a5 95		      LDA	_sc3
   5580  220e		       c9 00		      CMP	#0
   5581  2210		       d0 0c		      BNE	.skip120then
   5582  2212				   .condpart121
   5583  2212		       a5 a7		      LDA	max_pub_level_bcd1
   5584  2214		       85 93		      STA	_sc1
   5585  2216		       a5 a8		      LDA	max_pub_level_bcd2
   5586  2218		       85 94		      STA	_sc2
   5587  221a		       a5 a9		      LDA	max_pub_level_bcd3
   5588  221c		       85 95		      STA	_sc3
   5589  221e				   .skip120then
   5590  221e				   .skip119then
   5591  221e				   .skip118then
   5592  221e				   .skipL0614
   5593  221e				   .L0615		;  if gamenumber  >  4  &&  _sc1  =  0  &&  _sc2  =  0  &&  _sc3  =  0 then _sc1  =  max_priv_level_bcd1  :  _sc2  =  max_priv_level_bcd2  :  _sc3  =	max_priv_level_bcd3
   5594  221e
   5595  221e		       a9 04		      LDA	#4
   5596  2220		       c5 a6		      CMP	gamenumber
   5597  2222		       b0 1e		      BCS	.skipL0615
   5598  2224				   .condpart122
   5599  2224		       a5 93		      LDA	_sc1
   5600  2226		       c9 00		      CMP	#0
   5601  2228		       d0 18		      BNE	.skip122then
   5602  222a				   .condpart123
   5603  222a		       a5 94		      LDA	_sc2
   5604  222c		       c9 00		      CMP	#0
   5605  222e		       d0 12		      BNE	.skip123then
   5606  2230				   .condpart124
   5607  2230		       a5 95		      LDA	_sc3
   5608  2232		       c9 00		      CMP	#0
   5609  2234		       d0 0c		      BNE	.skip124then
   5610  2236				   .condpart125
   5611  2236		       a5 aa		      LDA	max_priv_level_bcd1
   5612  2238		       85 93		      STA	_sc1
   5613  223a		       a5 ab		      LDA	max_priv_level_bcd2
   5614  223c		       85 94		      STA	_sc2
   5615  223e		       a5 ac		      LDA	max_priv_level_bcd3
   5616  2240		       85 95		      STA	_sc3
   5617  2242				   .skip124then
   5618  2242				   .skip123then
   5619  2242				   .skip122then
   5620  2242				   .skipL0615
   5621  2242				   .
   5622  2242							; 
   5623  2242
   5624  2242				   .L0616		;  if has_private_levels then temp4  =  8 else temp4  =  4
   5625  2242
   5626  2242		       a5 ad		      LDA	has_private_levels
   5627  2244		       f0 07		      BEQ	.skipL0616
   5628  2246				   .condpart126
   5629  2246		       a9 08		      LDA	#8
   5630  2248		       85 9f		      STA	temp4
   5631  224a		       4c 51 b2 	      jmp	.skipelse9
   5632  224d				   .skipL0616
   5633  224d		       a9 04		      LDA	#4
   5634  224f		       85 9f		      STA	temp4
   5635  2251				   .skipelse9
   5636  2251				   .L0617		;  if switchselect then gamenumber  =	gamenumber  +  1  :  delay_counter  =  20  :  if gamenumber  >	temp4 then gamenumber  =  1
   5637  2251
   5638  2251		       a9 02		      lda	#2
   5639  2253		       2c 82 02 	      bit	SWCHB
   5640  2256		       d0 10		      BNE	.skipL0617
   5641  2258				   .condpart127
   5642  2258		       e6 a6		      INC	gamenumber
   5643  225a		       a9 14		      LDA	#20
   5644  225c		       85 d4		      STA	delay_counter
   5645  225e		       a5 9f		      LDA	temp4
   5646  2260		       c5 a6		      CMP	gamenumber
   5647  2262		       b0 04		      BCS	.skip127then
   5648  2264				   .condpart128
   5649  2264		       a9 01		      LDA	#1
   5650  2266		       85 a6		      STA	gamenumber
   5651  2268				   .skip127then
   5652  2268				   .skipL0617
   5653  2268				   .L0618		;  if !joy0fire then _Bit7_FireB_Restrainer{7}  =  0  :  goto _titlescreen_menu
   5654  2268
   5655  2268		       24 0c		      bit	INPT4
   5656  226a		       10 09		      BPL	.skipL0618
   5657  226c				   .condpart129
   5658  226c		       a5 ec		      LDA	_Bit7_FireB_Restrainer
   5659  226e		       29 7f		      AND	#127
   5660  2270		       85 ec		      STA	_Bit7_FireB_Restrainer
   5661  2272		       4c 00 b1 	      jmp	._titlescreen_menu
   5662  2275
   5663  2275				   .skipL0618
   5664  2275				   .L0619		;  if _Bit7_FireB_Restrainer{7} then goto _titlescreen_menu
   5665  2275
   5666  2275		       24 ec		      BIT	_Bit7_FireB_Restrainer
   5667  2277		       10 03		      BPL	.skipL0619
   5668  2279				   .condpart130
   5669  2279		       4c 00 b1 	      jmp	._titlescreen_menu
   5670  227c
   5671  227c				   .skipL0619
   5672  227c				   .
   5673  227c							; 
   5674  227c
   5675  227c				   .
   5676  227c							; 
   5677  227c
   5678  227c				   .
   5679  227c							; 
   5680  227c
   5681  227c				   .L0620		;  WriteToBuffer  =  _sc1  :  WriteToBuffer  =  _sc2  :  WriteToBuffer  =  _sc3  :  WriteToBuffer  =  gamenumber  :  WriteSendBuffer  =  req_load  :  _Bit5_Request_Pending{5}  =  1
   5682  227c
   5683  227c		       a5 93		      LDA	_sc1
   5684  227e		       8d f0 1f 	      STA	WriteToBuffer
   5685  2281		       a5 94		      LDA	_sc2
   5686  2283		       8d f0 1f 	      STA	WriteToBuffer
   5687  2286		       a5 95		      LDA	_sc3
   5688  2288		       8d f0 1f 	      STA	WriteToBuffer
   5689  228b		       a5 a6		      LDA	gamenumber
   5690  228d		       8d f0 1f 	      STA	WriteToBuffer
   5691  2290		       a9 00		      LDA	#req_load
   5692  2292		       8d f1 1f 	      STA	WriteSendBuffer
   5693  2295		       a5 ec		      LDA	_Bit5_Request_Pending
   5694  2297		       09 20		      ORA	#32
   5695  2299		       85 ec		      STA	_Bit5_Request_Pending
   5696  229b				   .
   5697  229b							; 
   5698  229b
   5699  229b				   .L0621		;  _Bit7_FireB_Restrainer{7}  =  1
   5700  229b
   5701  229b		       a5 ec		      LDA	_Bit7_FireB_Restrainer
   5702  229d		       09 80		      ORA	#128
   5703  229f		       85 ec		      STA	_Bit7_FireB_Restrainer
   5704  22a1				   .
   5705  22a1							; 
   5706  22a1
   5707  22a1				   .L0622		;  player1y  =  player_min_y  :  Game_Status  =  game_state_run
   5708  22a1
   5709  22a1		       a9 02		      LDA	#player_min_y
   5710  22a3		       85 86		      STA	player1y
   5711  22a5		       a9 00		      LDA	#game_state_run
   5712  22a7		       85 d3		      STA	Game_Status
   5713  22a9				   .L0623		;  score  =  0  :  men_to_rescue  =  0
   5714  22a9
   5715  22a9		       a9 00		      LDA	#$00
   5716  22ab		       85 95		      STA	score+2
   5717  22ad		       a9 00		      LDA	#$00
   5718  22af		       85 94		      STA	score+1
   5719  22b1		       a9 00		      LDA	#$00
   5720  22b3		       85 93		      STA	score
   5721  22b5		       a9 00		      LDA	#0
   5722  22b7		       85 b0		      STA	men_to_rescue
   5723  22b9				   .L0624		;  pfscore1  =  %00101010  :  pfscore2  =  255  :  pfscorecolor  =  _1C
   5724  22b9
   5725  22b9		       a9 2a		      LDA	#%00101010
   5726  22bb		       85 f2		      STA	pfscore1
   5727  22bd		       a9 ff		      LDA	#255
   5728  22bf		       85 f3		      STA	pfscore2
   5729  22c1		       a9 1c		      LDA	#_1C
   5730  22c3		       85 f4		      STA	pfscorecolor
   5731  22c5				   .
   5732  22c5							; 
   5733  22c5
   5734  22c5				   .
   5735  22c5							; 
   5736  22c5
   5737  22c5				   .
   5738  22c5							; 
   5739  22c5
   5740  22c5				   .L0625		;  asm
   5741  22c5
   5742  22c5		       a9 f0		      lda	#>(r_room_color_middle-132+pfres*pfwidth)
   5743  22c7
   5744  22c7		       85 f1		      sta	pfcolortable+1
   5745  22c9
   5746  22c9		       a9 6d		      lda	#<(r_room_color_middle-132+pfres*pfwidth)
   5747  22cb
   5748  22cb		       85 f0		      sta	pfcolortable
   5749  22cd
   5750  22cd				   .L0626		;  goto __Skip_Ch_1 bank1
   5751  22cd
   5752  22cd		       85 ee		      sta	temp7
   5753  22cf		       a9 9a		      lda	#>(.__Skip_Ch_1-1)
   5754  22d1		       48		      pha
   5755  22d2		       a9 43		      lda	#<(.__Skip_Ch_1-1)
   5756  22d4		       48		      pha
   5757  22d5		       a5 ee		      lda	temp7
   5758  22d7		       48		      pha
   5759  22d8		       8a		      txa
   5760  22d9		       48		      pha
   5761  22da		       a2 01		      ldx	#1
   5762  22dc		       4c e8 ff 	      jmp	BS_jsr
   5763  22df				   .
   5764  22df							; 
   5765  22df
   5766  22df				   .L0627		;  asm
   5767  22df
------- FILE titlescreen/asm/titlescreen.asm LEVEL 2 PASS 3
      0  22df					      include	"titlescreen/asm/titlescreen.asm"
      1  22df
------- FILE titlescreen/asm/layoutmacros.asm LEVEL 3 PASS 3
      0  22df					      include	"titlescreen/asm/layoutmacros.asm"
      1  22df
      2  22df							; the macro's used in the "titlescreen_layout.asm" file
      3  22df
      4  22df					      MAC	draw_96x2_1
      5  22df				   mk_96x2_1_on =	1
      6  22df					      jsr	draw_bmp_96x2_1
      7  22df					      ENDM
      8  22df
      9  22df					      MAC	draw_96x2_2
     10  22df				   mk_96x2_2_on =	1
     11  22df					      jsr	draw_bmp_96x2_2
     12  22df					      ENDM
     13  22df
     14  22df					      MAC	draw_96x2_3
     15  22df				   mk_96x2_3_on =	1
     16  22df					      jsr	draw_bmp_96x2_3
     17  22df					      ENDM
     18  22df
     19  22df					      MAC	draw_96x2_4
     20  22df				   mk_96x2_4_on =	1
     21  22df					      jsr	draw_bmp_96x2_4
     22  22df					      ENDM
     23  22df
     24  22df					      MAC	draw_96x2_5
     25  22df				   mk_96x2_5_on =	1
     26  22df					      jsr	draw_bmp_96x2_5
     27  22df					      ENDM
     28  22df
     29  22df					      MAC	draw_96x2_6
     30  22df				   mk_96x2_6_on =	1
     31  22df					      jsr	draw_bmp_96x2_6
     32  22df					      ENDM
     33  22df
     34  22df					      MAC	draw_96x2_7
     35  22df				   mk_96x2_7_on =	1
     36  22df					      jsr	draw_bmp_96x2_7
     37  22df					      ENDM
     38  22df
     39  22df					      MAC	draw_96x2_8
     40  22df				   mk_96x2_8_on =	1
     41  22df					      jsr	draw_bmp_96x2_8
     42  22df					      ENDM
     43  22df
     44  22df					      MAC	draw_48x1_1
     45  22df				   mk_48x1_X_on =	1
     46  22df				   mk_48x1_1_on =	1
     47  22df					      jsr	draw_bmp_48x1_1
     48  22df					      ENDM
     49  22df
     50  22df					      MAC	draw_48x1_2
     51  22df				   mk_48x1_X_on =	1
     52  22df				   mk_48x1_2_on =	1
     53  22df					      jsr	draw_bmp_48x1_2
     54  22df					      ENDM
     55  22df
     56  22df					      MAC	draw_48x1_3
     57  22df				   mk_48x1_X_on =	1
     58  22df				   mk_48x1_3_on =	1
     59  22df					      jsr	draw_bmp_48x1_3
     60  22df					      ENDM
     61  22df
     62  22df					      MAC	draw_48x1_4
     63  22df				   mk_48x1_X_on =	1
     64  22df				   mk_48x1_4_on =	1
     65  22df					      jsr	draw_bmp_48x1_4
     66  22df					      ENDM
     67  22df
     68  22df					      MAC	draw_48x1_5
     69  22df				   mk_48x1_X_on =	1
     70  22df				   mk_48x1_5_on =	1
     71  22df					      jsr	draw_bmp_48x1_5
     72  22df					      ENDM
     73  22df
     74  22df					      MAC	draw_48x1_6
     75  22df				   mk_48x1_X_on =	1
     76  22df				   mk_48x1_6_on =	1
     77  22df					      jsr	draw_bmp_48x1_6
     78  22df					      ENDM
     79  22df
     80  22df					      MAC	draw_48x1_7
     81  22df				   mk_48x1_X_on =	1
     82  22df				   mk_48x1_7_on =	1
     83  22df					      jsr	draw_bmp_48x1_7
     84  22df					      ENDM
     85  22df
     86  22df					      MAC	draw_48x1_8
     87  22df				   mk_48x1_X_on =	1
     88  22df				   mk_48x1_8_on =	1
     89  22df					      jsr	draw_bmp_48x1_8
     90  22df					      ENDM
     91  22df
     92  22df
     93  22df					      MAC	draw_48x2_1
     94  22df				   mk_48x2_X_on =	1
     95  22df				   mk_48x2_1_on =	1
     96  22df					      jsr	draw_bmp_48x2_1
     97  22df					      ENDM
     98  22df
     99  22df					      MAC	draw_48x2_2
    100  22df				   mk_48x2_X_on =	1
    101  22df				   mk_48x2_2_on =	1
    102  22df					      jsr	draw_bmp_48x2_2
    103  22df					      ENDM
    104  22df
    105  22df					      MAC	draw_48x2_3
    106  22df				   mk_48x2_X_on =	1
    107  22df				   mk_48x2_3_on =	1
    108  22df					      jsr	draw_bmp_48x2_3
    109  22df					      ENDM
    110  22df
    111  22df					      MAC	draw_48x2_4
    112  22df				   mk_48x2_X_on =	1
    113  22df				   mk_48x2_4_on =	1
    114  22df					      jsr	draw_bmp_48x2_4
    115  22df					      ENDM
    116  22df
    117  22df					      MAC	draw_48x2_5
    118  22df				   mk_48x2_X_on =	1
    119  22df				   mk_48x2_5_on =	1
    120  22df					      jsr	draw_bmp_48x2_5
    121  22df					      ENDM
    122  22df
    123  22df					      MAC	draw_48x2_6
    124  22df				   mk_48x2_X_on =	1
    125  22df				   mk_48x2_6_on =	1
    126  22df					      jsr	draw_bmp_48x2_6
    127  22df					      ENDM
    128  22df
    129  22df					      MAC	draw_48x2_7
    130  22df				   mk_48x2_X_on =	1
    131  22df				   mk_48x2_7_on =	1
    132  22df					      jsr	draw_bmp_48x2_7
    133  22df					      ENDM
    134  22df
    135  22df					      MAC	draw_48x2_8
    136  22df				   mk_48x2_X_on =	1
    137  22df				   mk_48x2_8_on =	1
    138  22df					      jsr	draw_bmp_48x2_8
    139  22df					      ENDM
    140  22df
    141  22df					      MAC	draw_player
    142  22df				   mk_player_on =	1
    143  22df					      jsr	draw_player_display
    144  22df					      ENDM
    145  22df
    146  22df					      MAC	draw_score
    147  22df				   mk_score_on =	1
    148  22df				   mk_48x1_X_on =	1
    149  22df					      jsr	draw_score_display
    150  22df					      ENDM
    151  22df
    152  22df					      MAC	draw_gameselect
    153  22df				   mk_gameselect_on =	1
    154  22df				   mk_48x1_X_on =	1
    155  22df					      jsr	draw_gameselect_display
    156  22df					      ENDM
    157  22df
    158  22df					      MAC	draw_space
    159  22df					      ldy	#{1}
    160  22df				   .loop
    161  22df					      sta	WSYNC
    162  22df					      dey
    163  22df					      bne	.loop
    164  22df					      ENDM
    165  22df
------- FILE titlescreen/asm/titlescreen.asm
------- FILE titlescreen/asm/dpcfix.asm LEVEL 3 PASS 3
      0  22df					      include	"titlescreen/asm/dpcfix.asm"
      1  22df							; reassign variables that DPC+ doesn't have
      2  22df
      3  22df				  -	      ifnconst	aux2
      4  22df				  -aux2       =	player2x
      5  22df					      endif
      6  22df				  -	      ifnconst	aux4
      7  22df				  -aux4       =	player4x
      8  22df					      endif
      9  22df				  -	      ifnconst	aux5
     10  22df				  -aux5       =	player5x
     11  22df					      endif
     12  22df				  -	      ifnconst	aux6
     13  22df				  -aux6       =	player6x
     14  22df					      endif
     15  22df
     16  22df				  -	      ifnconst	player0pointer
     17  22df				  -player0pointer =	player2y
     18  22df					      endif
     19  22df				  -	      ifnconst	player1pointer
     20  22df				  -player1pointer =	player2height	; to player3height
     21  22df					      endif
     22  22df				  -	      ifnconst	player1color
     23  22df				  -player1color =	player4height	; to player5height
     24  22df					      endif
     25  22df				  -	      ifnconst	scorepointers
     26  22df				  -scorepointers =	player6height	; to NUSIZ8
     27  22df					      endif
------- FILE titlescreen/asm/titlescreen.asm
------- FILE titlescreen/titlescreen_layout.asm LEVEL 3 PASS 3
      0  22df					      include	"titlescreen/titlescreen_layout.asm"
      1  22df
      2  22df							; To use a minikernel, just list it below. They'll be drawn on the screen in
      3  22df							; in the order they were listed.
      4  22df							;
      5  22df							; If a minikernel isn't listed, it won't be compiled into your program, and
      6  22df							; it won't use any rom space.
      7  22df
      8  22df					      MAC	titlescreenlayout
      9  22df					      draw_96x2_1
     10  22df					      draw_gameselect
     11  22df					      draw_48x2_1
     12  22df					      draw_score
     13  22df					      ENDM
     14  22df
     15  22df							; minikernel choices are:
     16  22df							;
     17  22df							; draw_48x1_1, draw_48x1_2, draw_48x1_3
     18  22df							;	The first, second, and third 48-wide single-line bitmap minikernels
     19  22df							;
     20  22df							; draw_48x2_1, draw_48x2_2, draw_48x2_3
     21  22df							;	The first, second, and third 48-wide double-line bitmap minikernels
     22  22df							;
     23  22df							; draw_96x2_1, draw_96x2_2, draw_96x2_3
     24  22df							;	The first, second, and third 96-wide double-line bitmap minikernels
     25  22df							;
     26  22df							; draw_gameselect
     27  22df							;	The game selection display minikernel
     28  22df							;
     29  22df							; draw_score
     30  22df							;	A minikernel that draws the score
     31  22df							;
     32  22df							; draw_space 10
     33  22df							;	A minikernel used to add blank space between other minikernels
------- FILE titlescreen/asm/titlescreen.asm
      5  22df
      6  22df				   .titledrawscreen
      7  22df				   title_eat_overscan
      8  22df							;bB runs in overscan. Wait for the overscan to run out...
      9  22df		       18		      clc
     10  22e0		       ad 84 02 	      lda	INTIM
     11  22e3		       30 fa		      bmi	title_eat_overscan
     12  22e5		       4c e8 b2 	      jmp	title_do_vertical_sync
     13  22e8
     14  22e8				   title_do_vertical_sync
     15  22e8		       a9 02		      lda	#2
     16  22ea		       85 02		      sta	WSYNC	;one line with VSYNC
     17  22ec		       85 00		      sta	VSYNC	;enable VSYNC
     18  22ee		       85 02		      sta	WSYNC	;one line with VSYNC
     19  22f0		       85 02		      sta	WSYNC	;one line with VSYNC
     20  22f2		       a9 00		      lda	#0
     21  22f4		       85 02		      sta	WSYNC	;one line with VSYNC
     22  22f6		       85 00		      sta	VSYNC	;turn off VSYNC
     23  22f8
     24  22f8							;lda #42+128
     25  22f8					      ifnconst	vblank_time
     26  22f8		       a9 aa		      lda	#42+128
     27  22fa				  -	      else
     28  22fa				  -	      lda	#vblank_time+128
     29  22fa					      endif
     30  22fa
     31  22fa		       8d 96 02 	      sta	TIM64T
     32  22fd
     33  22fd		       00 82	   titleframe =	missile0x
     34  22fd		       e6 82		      inc	titleframe	; increment the frame counter
     35  22ff
     36  22ff				  -	      ifconst	.title_vblank
     37  22ff				  -	      jsr	.title_vblank
     38  22ff					      endif
     39  22ff
     40  22ff				   title_vblank_loop
     41  22ff		       ad 84 02 	      lda	INTIM
     42  2302		       30 fb		      bmi	title_vblank_loop
     43  2304		       a9 00		      lda	#0
     44  2306		       85 02		      sta	WSYNC
     45  2308		       85 01		      sta	VBLANK
     46  230a		       85 1d		      sta	ENAM0
     47  230c		       85 1f		      sta	ENABL
     48  230e
     49  230e				   title_playfield
     50  230e
     51  230e							; ======== BEGIN of the custom kernel!!!!! All of the work is done in the playfield.
     52  230e
     53  230e		       a9 e6		      lda	#230
     54  2310		       8d 96 02 	      sta	TIM64T
     55  2313
     56  2313		       a9 01		      lda	#1
     57  2315		       85 0a		      sta	CTRLPF
     58  2317		       18		      clc
     59  2318
     60  2318		       a9 00		      lda	#0
     61  231a		       85 0b		      sta	REFP0
     62  231c		       85 0c		      sta	REFP1
     63  231e		       85 02		      sta	WSYNC
     64  2320		       ad 58 b3 	      lda	titlescreencolor
     65  2323		       85 09		      sta	COLUBK
     66  2325
      0  2325					      titlescreenlayout
      0  2325					      draw_96x2_1
      1  2325		       00 01	   mk_96x2_1_on =	1
      2  2325		       20 f1 b4 	      jsr	draw_bmp_96x2_1
      0  2328					      draw_gameselect
      1  2328		       00 01	   mk_gameselect_on =	1
      2  2328		       00 01	   mk_48x1_X_on =	1
      3  2328		       20 53 b7 	      jsr	draw_gameselect_display
      0  232b					      draw_48x2_1
      1  232b		       00 01	   mk_48x2_X_on =	1
      2  232b		       00 01	   mk_48x2_1_on =	1
      3  232b		       20 5d b3 	      jsr	draw_bmp_48x2_1
      0  232e					      draw_score
      1  232e		       00 01	   mk_score_on =	1
      2  232e		       00 01	   mk_48x1_X_on =	1
      3  232e		       20 71 b6 	      jsr	draw_score_display
     68  2331
     69  2331		       4c c9 b7 	      jmp	PFWAIT	; kernel is done. Finish off the screen
     70  2334
------- FILE titlescreen/asm/position48.asm LEVEL 3 PASS 3
      0  2334					      include	"titlescreen/asm/position48.asm"
      1  2334
      2  2334				   position48
      3  2334
      4  2334							;postion P0 and P1
      5  2334
      6  2334		       85 02		      sta	WSYNC
      7  2336
      8  2336		       a9 90		      lda	#$90	;2
      9  2338		       85 20		      sta	HMP0	;3
     10  233a		       a9 a0		      lda	#$A0	;2
     11  233c		       85 21		      sta	HMP1	;3
     12  233e
     13  233e		       e6 9c		      inc	temp1
     14  2340		       c6 9c		      dec	temp1
     15  2342		       e6 9c		      inc	temp1
     16  2344		       c6 9c		      dec	temp1
     17  2346		       e6 9c		      inc	temp1
      0  2348					      sleep	2
      1  2348				   .CYCLES    SET	2
      2  2348
      3  2348				  -	      IF	.CYCLES < 2
      4  2348				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  2348				  -	      ERR
      6  2348					      ENDIF
      7  2348
      8  2348				  -	      IF	.CYCLES & 1
      9  2348				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  2348				  -	      nop	0
     11  2348				  -	      ELSE
     12  2348				  -	      bit	VSYNC
     13  2348				  -	      ENDIF
     14  2348				  -.CYCLES    SET	.CYCLES - 3
     15  2348					      ENDIF
     16  2348
     17  2348					      REPEAT	.CYCLES / 2
     18  2348		       ea		      nop
     19  2349					      REPEND
     19  2349		       85 10		      sta	RESP0	;  +3
     20  234b		       85 11		      sta	RESP1	;  +3
     21  234d		       c6 9c		      dec	temp1	;  +5
     22  234f		       e6 9c		      inc	temp1	;  +5
     23  2351		       c6 9c		      dec	temp1	;  +5
     24  2353		       e6 9c		      inc	temp1	;  +5
     25  2355		       c6 9c		      dec	temp1	;  +5
      0  2357					      sleep	3
      1  2357				   .CYCLES    SET	3
      2  2357
      3  2357				  -	      IF	.CYCLES < 2
      4  2357				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  2357				  -	      ERR
      6  2357					      ENDIF
      7  2357
      8  2357					      IF	.CYCLES & 1
      9  2357					      IFNCONST	NO_ILLEGAL_OPCODES
     10  2357		       04 00		      nop	0
     11  2359				  -	      ELSE
     12  2359				  -	      bit	VSYNC
     13  2359					      ENDIF
     14  2359				   .CYCLES    SET	.CYCLES - 3
     15  2359					      ENDIF
     16  2359
     17  2359				  -	      REPEAT	.CYCLES / 2
     18  2359				  -	      nop
     19  2359					      REPEND
     27  2359		       85 2a		      sta	HMOVE	; +76
     28  235b		       60		      RTS
     29  235c
------- FILE titlescreen/asm/titlescreen.asm
------- FILE titlescreen/titlescreen_color.asm LEVEL 3 PASS 3
      0  235c					      include	"titlescreen/titlescreen_color.asm"
      1  235c
      2  235c							; This is where the titlescreen background color gets set.
      3  235c							; You can also do a "dim titlescreencolor=[letter]" in bB
      4  235c							; if you want to change the color on the fly.
      5  235c
      6  235c				  -	      ifnconst	titlescreencolor
      7  235c				  -titlescreencolor
      8  235c					      endif
      9  235c		       00		      .byte.b	$00
     10  235d
------- FILE titlescreen/asm/titlescreen.asm
     73  235d
     74  235d				  -	      ifconst	mk_48x1_1_on
     75  235d				  -	      include	"titlescreen/asm/48x1_1_kernel.asm"
     76  235d					      endif		;mk_48x1_1_on
     77  235d
     78  235d				  -	      ifconst	mk_48x1_2_on
     79  235d				  -	      include	"titlescreen/asm/48x1_2_kernel.asm"
     80  235d					      endif		;mk_48x1_2_on
     81  235d
     82  235d				  -	      ifconst	mk_48x1_3_on
     83  235d				  -	      include	"titlescreen/asm/48x1_3_kernel.asm"
     84  235d					      endif		;mk_48x1_3_on
     85  235d
     86  235d				  -	      ifconst	mk_48x1_4_on
     87  235d				  -	      include	"titlescreen/asm/48x1_4_kernel.asm"
     88  235d					      endif		;mk_48x1_4_on
     89  235d
     90  235d				  -	      ifconst	mk_48x1_5_on
     91  235d				  -	      include	"titlescreen/asm/48x1_5_kernel.asm"
     92  235d					      endif		;mk_48x1_5_on
     93  235d
     94  235d				  -	      ifconst	mk_48x1_6_on
     95  235d				  -	      include	"titlescreen/asm/48x1_6_kernel.asm"
     96  235d					      endif		;mk_48x1_6_on
     97  235d
     98  235d				  -	      ifconst	mk_48x1_7_on
     99  235d				  -	      include	"titlescreen/asm/48x1_7_kernel.asm"
    100  235d					      endif		;mk_48x1_7_on
    101  235d
    102  235d				  -	      ifconst	mk_48x1_8_on
    103  235d				  -	      include	"titlescreen/asm/48x1_8_kernel.asm"
    104  235d					      endif		;mk_48x1_8_on
    105  235d
    106  235d					      ifconst	mk_48x2_1_on
------- FILE titlescreen/asm/48x2_1_kernel.asm LEVEL 3 PASS 3
      0  235d					      include	"titlescreen/asm/48x2_1_kernel.asm"
      1  235d
      2  235d				   draw_bmp_48x2_1
      3  235d
      4  235d		       a9 de		      lda	#<(bmp_48x2_1_colors-1+bmp_48x2_1_height-bmp_48x2_1_window)
      5  235f				  -	      ifconst	bmp_48x2_1_index
      6  235f				  -	      sec
      7  235f				  -	      sbc	bmp_48x2_1_index
      8  235f					      endif
      9  235f		       85 f4		      sta	aux5+0
     10  2361		       a9 b7		      lda	#>(bmp_48x2_1_colors-1+bmp_48x2_1_height-bmp_48x2_1_window)
     11  2363		       85 f5		      sta	aux5+1
     12  2365
     13  2365		       a0 0b		      ldy	#11
     14  2367				   bmp_48x2_1_pointersetup
     15  2367		       b9 9c b3 	      lda	bmp_48x2_1_values,y
     16  236a		       99 96 00 	      sta	scorepointers,y
     17  236d		       88		      dey
     18  236e		       b9 9c b3 	      lda	bmp_48x2_1_values,y
     19  2371				  -	      ifconst	bmp_48x2_1_index
     20  2371				  -	      sec
     21  2371				  -	      sbc	bmp_48x2_1_index
     22  2371					      endif
     23  2371		       99 96 00 	      sta	scorepointers,y
     24  2374		       88		      dey
     25  2375		       10 f0		      bpl	bmp_48x2_1_pointersetup
     26  2377
     27  2377
     28  2377		       a0 04		      ldy	#(bmp_48x2_1_window-1)
     29  2379		       84 f1		      sty	aux2
     30  237b
     31  237b		       c8		      iny
     32  237c		       b1 f4		      lda	(aux5),y
     33  237e		       88		      dey
     34  237f
     35  237f		       85 06		      sta	COLUP0	;3
     36  2381		       85 07		      sta	COLUP1	;3
     37  2383		       85 2b		      sta	HMCLR	;3
     38  2385
     39  2385		       ad 58 b3 	      lda	titlescreencolor
     40  2388		       85 08		      sta	COLUPF
     41  238a
     42  238a					      ifconst	bmp_48x2_1_background
     43  238a		       ad e6 b7 	      lda	bmp_48x2_1_background
     44  238d				  -	      else
     45  238d				  -	      lda	titlescreencolor
     46  238d					      endif
     47  238d		       85 f3		      sta	aux4
     48  238f					      ifconst	bmp_48x2_1_PF1
     49  238f		       ad e4 b7 	      lda	bmp_48x2_1_PF1
     50  2392				  -	      else
     51  2392				  -	      lda	#0
     52  2392				  -	      nop
     53  2392					      endif
     54  2392		       85 0e		      sta	PF1
     55  2394
     56  2394					      ifconst	bmp_48x2_1_PF2
     57  2394		       ad e5 b7 	      lda	bmp_48x2_1_PF2
     58  2397				  -	      else
     59  2397				  -	      lda	#0
     60  2397				  -	      nop
     61  2397					      endif
     62  2397		       85 0f		      sta	PF2
     63  2399
     64  2399		       4c 46 b4 	      jmp	draw_bmp_48x2_X
     65  239c
     66  239c				   bmp_48x2_1_values
     67  239c		       e7 b7		      .word.w	(bmp_48x2_1_00+#bmp_48x2_1_height-#bmp_48x2_1_window)
     68  239e		       ed b7		      .word.w	(bmp_48x2_1_01+#bmp_48x2_1_height-#bmp_48x2_1_window)
     69  23a0		       f3 b7		      .word.w	(bmp_48x2_1_02+#bmp_48x2_1_height-#bmp_48x2_1_window)
     70  23a2		       f9 b7		      .word.w	(bmp_48x2_1_03+#bmp_48x2_1_height-#bmp_48x2_1_window)
     71  23a4		       00 b8		      .word.w	(bmp_48x2_1_04+#bmp_48x2_1_height-#bmp_48x2_1_window)
     72  23a6		       06 b8		      .word.w	(bmp_48x2_1_05+#bmp_48x2_1_height-#bmp_48x2_1_window)
     73  23a8
------- FILE titlescreen/asm/titlescreen.asm
    108  23a8					      endif		;mk_48x2_1_on
    109  23a8
    110  23a8				  -	      ifconst	mk_48x2_2_on
    111  23a8				  -	      include	"titlescreen/asm/48x2_2_kernel.asm"
    112  23a8					      endif		;mk_48x2_2_on
    113  23a8
    114  23a8				  -	      ifconst	mk_48x2_3_on
    115  23a8				  -	      include	"titlescreen/asm/48x2_3_kernel.asm"
    116  23a8					      endif		;mk_48x2_3_on
    117  23a8
    118  23a8				  -	      ifconst	mk_48x2_4_on
    119  23a8				  -	      include	"titlescreen/asm/48x2_4_kernel.asm"
    120  23a8					      endif		;mk_48x2_4_on
    121  23a8
    122  23a8				  -	      ifconst	mk_48x2_5_on
    123  23a8				  -	      include	"titlescreen/asm/48x2_5_kernel.asm"
    124  23a8					      endif		;mk_48x2_5_on
    125  23a8
    126  23a8				  -	      ifconst	mk_48x2_6_on
    127  23a8				  -	      include	"titlescreen/asm/48x2_6_kernel.asm"
    128  23a8					      endif		;mk_48x2_6_on
    129  23a8
    130  23a8				  -	      ifconst	mk_48x2_7_on
    131  23a8				  -	      include	"titlescreen/asm/48x2_7_kernel.asm"
    132  23a8					      endif		;mk_48x2_7_on
    133  23a8
    134  23a8				  -	      ifconst	mk_48x2_8_on
    135  23a8				  -	      include	"titlescreen/asm/48x2_8_kernel.asm"
    136  23a8					      endif		;mk_48x2_8_on
    137  23a8
    138  23a8					      ifconst	mk_48x1_X_on
------- FILE titlescreen/asm/48x1_X_kernel.asm LEVEL 3 PASS 3
      0  23a8					      include	"titlescreen/asm/48x1_X_kernel.asm"
      1  23a8				   draw_bmp_48x1_X
      2  23a8
      3  23a8		       a9 03		      lda	#3
      4  23aa		       85 04		      sta	NUSIZ0	;3=Player and Missile are drawn twice 32 clocks apart
      5  23ac		       85 05		      sta	NUSIZ1	;3=Player and Missile are drawn twice 32 clocks apart
      6  23ae
      7  23ae		       ba		      tsx
      8  23af		       86 f6		      stx	stack1	;save the stack pointer
      9  23b1
     10  23b1		       20 34 b3 	      jsr	position48
     11  23b4
     12  23b4		       a9 03		      lda	#3	;2
     13  23b6		       85 25		      sta	VDELP0	;3
     14  23b8		       85 26		      sta	VDELP1	;3
     15  23ba
     16  23ba		       a9 01		      lda	#1	;2
     17  23bc		       85 0a		      sta	CTRLPF	;3
     18  23be
     19  23be							;enough cycles have passed for the HMOV, so we can clear HMCLR
     20  23be		       85 2b		      sta	HMCLR
     21  23c0
     22  23c0		       85 02		      sta	WSYNC
     23  23c2
     24  23c2		       e6 9c		      inc	temp1	;5
     25  23c4		       c6 9c		      dec	temp1	;5
     26  23c6		       e6 9c		      inc	temp1	;5
     27  23c8		       c6 9c		      dec	temp1	;5
     28  23ca		       e6 9c		      inc	temp1	;5
     29  23cc		       c6 9c		      dec	temp1	;5
     30  23ce		       e6 9c		      inc	temp1	;5
     31  23d0		       c6 9c		      dec	temp1	;5
     32  23d2		       e6 9c		      inc	temp1	;5
     33  23d4		       c6 9c		      dec	temp1	;5
     34  23d6
      0  23d6					      sleep	5
      1  23d6				   .CYCLES    SET	5
      2  23d6
      3  23d6				  -	      IF	.CYCLES < 2
      4  23d6				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  23d6				  -	      ERR
      6  23d6					      ENDIF
      7  23d6
      8  23d6					      IF	.CYCLES & 1
      9  23d6					      IFNCONST	NO_ILLEGAL_OPCODES
     10  23d6		       04 00		      nop	0
     11  23d8				  -	      ELSE
     12  23d8				  -	      bit	VSYNC
     13  23d8					      ENDIF
     14  23d8				   .CYCLES    SET	.CYCLES - 3
     15  23d8					      ENDIF
     16  23d8
     17  23d8					      REPEAT	.CYCLES / 2
     18  23d8		       ea		      nop
     19  23d9					      REPEND
     36  23d9
     37  23d9		       c8		      iny
     38  23da
     39  23da		       4c 00 b4 	      jmp	pf48x1_X_loop_entry
     40  23dd
     41  23dd					      if	>. != >[.+$2a]
     42  2400		       00 00 00 00*	      align	256
     43  2400					      endif
     44  2400
     45  2400				   pf48x1_X_loop_entry
     46  2400				   pf48x1_X_loop
     47  2400		       88		      dey		;2
     48  2401		       84 f1		      sty	aux2	;3
     49  2403		       b1 96		      lda	(scorepointers+0),y	;5
     50  2405		       85 1b		      sta	GRP0	;3
     51  2407
     52  2407		       b1 98		      lda	(scorepointers+2),y	;5
     53  2409		       85 1c		      sta	GRP1	;3
     54  240b		       b1 9a		      lda	(scorepointers+4),y	;5
     55  240d		       85 1b		      sta	GRP0	;3
     56  240f
      0  240f					      sleep	2	; I could make this indirect, if we want to burn more rom
      1  240f				   .CYCLES    SET	2
      2  240f
      3  240f				  -	      IF	.CYCLES < 2
      4  240f				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  240f				  -	      ERR
      6  240f					      ENDIF
      7  240f
      8  240f				  -	      IF	.CYCLES & 1
      9  240f				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  240f				  -	      nop	0
     11  240f				  -	      ELSE
     12  240f				  -	      bit	VSYNC
     13  240f				  -	      ENDIF
     14  240f				  -.CYCLES    SET	.CYCLES - 3
     15  240f					      ENDIF
     16  240f
     17  240f					      REPEAT	.CYCLES / 2
     18  240f		       ea		      nop
     19  2410					      REPEND
     58  2410		       a5 f3		      lda	aux4	;3
     59  2412		       85 08		      sta	COLUPF	;3 this is a big fat waste...
     60  2414
     61  2414		       b3 a0		      lax	(scorepointers+10),y	;5
     62  2416		       b1 9e		      lda	(scorepointers+8),y	;5
     63  2418		       85 f7		      sta	stack2	;3
     64  241a		       b1 9c		      lda	(scorepointers+6),y	;5
     65  241c		       a4 f7		      ldy	stack2	;3
     66  241e
     67  241e		       85 1c		      sta	GRP1	;3
     68  2420		       84 1b		      sty	GRP0	;3
     69  2422		       86 1c		      stx	GRP1	;3
     70  2424		       84 1b		      sty	GRP0	;3
     71  2426
     72  2426		       a4 f1		      ldy	aux2	;3
     73  2428		       d0 d6		      bne	pf48x1_X_loop	;2/3
     74  242a
     75  242a				   pf48x1_X_codeend
     76  242a							;echo "critical code in 48x1 is ",(pf48x1_X_codeend-pf48x1_X_loop), " bytes long."
     77  242a
     78  242a		       a9 00		      lda	#0
     79  242c		       85 1b		      sta	GRP0
     80  242e		       85 1c		      sta	GRP1
     81  2430		       85 1b		      sta	GRP0
     82  2432		       85 1c		      sta	GRP1
     83  2434		       85 1f		      sta	ENABL
     84  2436		       85 1d		      sta	ENAM0
     85  2438		       85 25		      sta	VDELP0
     86  243a		       85 26		      sta	VDELP1
     87  243c		       85 0d		      sta	PF0
     88  243e		       85 0e		      sta	PF1
     89  2440		       85 0f		      sta	PF2
     90  2442
     91  2442		       a6 f6		      ldx	stack1	;restore the stack pointer
     92  2444		       9a		      txs
     93  2445		       60		      rts
------- FILE titlescreen/asm/titlescreen.asm
    140  2446					      endif		;mk_48x1_X_on
    141  2446
    142  2446					      ifconst	mk_48x2_X_on
------- FILE titlescreen/asm/48x2_X_kernel.asm LEVEL 3 PASS 3
      0  2446					      include	"titlescreen/asm/48x2_X_kernel.asm"
      1  2446				   draw_bmp_48x2_X
      2  2446
      3  2446		       a9 00		      lda	#0
      4  2448		       85 1b		      sta	GRP0
      5  244a		       85 1c		      sta	GRP1
      6  244c
      7  244c		       a9 03		      lda	#3
      8  244e		       85 04		      sta	NUSIZ0	;3=Player and Missile are drawn twice 32 clocks apart
      9  2450		       85 05		      sta	NUSIZ1	;3=Player and Missile are drawn twice 32 clocks apart
     10  2452
     11  2452		       ba		      tsx
     12  2453		       86 f6		      stx	stack1	;save the stack pointer
     13  2455
     14  2455		       20 34 b3 	      jsr	position48
     15  2458
     16  2458		       a9 03		      lda	#3	;2
     17  245a		       85 25		      sta	VDELP0	;3
     18  245c		       85 26		      sta	VDELP1	;3
     19  245e
     20  245e		       a9 01		      lda	#1	;2
     21  2460		       85 0a		      sta	CTRLPF	;3
     22  2462
     23  2462							;enough cycles have passed for the HMOV, so we can clear HMCLR
     24  2462		       85 2b		      sta	HMCLR
     25  2464		       85 02		      sta	WSYNC
     26  2466
     27  2466
     28  2466							;sleep (63)		;63
     29  2466		       e6 9c		      inc	temp1
     30  2468		       c6 9c		      dec	temp1
     31  246a		       e6 9c		      inc	temp1
     32  246c		       c6 9c		      dec	temp1
     33  246e		       e6 9c		      inc	temp1
     34  2470		       c6 9c		      dec	temp1
     35  2472		       e6 9c		      inc	temp1
     36  2474		       c6 9c		      dec	temp1
     37  2476		       e6 9c		      inc	temp1
     38  2478		       c6 9c		      dec	temp1
     39  247a		       e6 9c		      inc	temp1
     40  247c		       c6 9c		      dec	temp1
      0  247e					      sleep	3
      1  247e				   .CYCLES    SET	3
      2  247e
      3  247e				  -	      IF	.CYCLES < 2
      4  247e				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  247e				  -	      ERR
      6  247e					      ENDIF
      7  247e
      8  247e					      IF	.CYCLES & 1
      9  247e					      IFNCONST	NO_ILLEGAL_OPCODES
     10  247e		       04 00		      nop	0
     11  2480				  -	      ELSE
     12  2480				  -	      bit	VSYNC
     13  2480					      ENDIF
     14  2480				   .CYCLES    SET	.CYCLES - 3
     15  2480					      ENDIF
     16  2480
     17  2480				  -	      REPEAT	.CYCLES / 2
     18  2480				  -	      nop
     19  2480					      REPEND
     42  2480
     43  2480		       a5 f3		      lda	aux4	;3
     44  2482		       85 08		      sta	COLUPF	;3
     45  2484
     46  2484		       4c 87 b4 	      jmp	pf48x2_X_loop	;3
     47  2487
     48  2487				  -	      if	>. != >[.+$52]
     49  2487				  -	      align	256
     50  2487					      endif
     51  2487
     52  2487				   pf48x2_X_loop
     53  2487
     54  2487		       b1 96		      lda	(scorepointers+0),y	;5
     55  2489		       85 1b		      sta	GRP0	;3
     56  248b		       b1 98		      lda	(scorepointers+2),y	;5
     57  248d		       85 1c		      sta	GRP1	;3
     58  248f		       b1 9a		      lda	(scorepointers+4),y	;5
     59  2491		       85 1b		      sta	GRP0	;3
     60  2493
     61  2493		       b3 a0		      lax	(scorepointers+10),y	;5
     62  2495		       b1 9e		      lda	(scorepointers+8),y	;5
     63  2497		       85 f7		      sta	stack2	;3
     64  2499		       b1 9c		      lda	(scorepointers+6),y	;5
     65  249b		       a4 f7		      ldy	stack2	;3
     66  249d
     67  249d		       85 1c		      sta	GRP1	;3
     68  249f		       84 1b		      sty	GRP0	;3
     69  24a1		       86 1c		      stx	GRP1	;3
     70  24a3		       84 1b		      sty	GRP0	;3
     71  24a5
     72  24a5		       a4 f1		      ldy	aux2	;3
     73  24a7
     74  24a7		       b1 f4		      lda	(aux5),y	;5
     75  24a9		       85 91		      sta	missile0y	;3
     76  24ab
      0  24ab					      sleep	3
      1  24ab				   .CYCLES    SET	3
      2  24ab
      3  24ab				  -	      IF	.CYCLES < 2
      4  24ab				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  24ab				  -	      ERR
      6  24ab					      ENDIF
      7  24ab
      8  24ab					      IF	.CYCLES & 1
      9  24ab					      IFNCONST	NO_ILLEGAL_OPCODES
     10  24ab		       04 00		      nop	0
     11  24ad				  -	      ELSE
     12  24ad				  -	      bit	VSYNC
     13  24ad					      ENDIF
     14  24ad				   .CYCLES    SET	.CYCLES - 3
     15  24ad					      ENDIF
     16  24ad
     17  24ad				  -	      REPEAT	.CYCLES / 2
     18  24ad				  -	      nop
     19  24ad					      REPEND
     78  24ad
     79  24ad		       c6 f1		      dec	aux2	;5
     80  24af
     81  24af
     82  24af		       b1 96		      lda	(scorepointers+0),y	;5
     83  24b1		       85 1b		      sta	GRP0	;3
     84  24b3		       b1 98		      lda	(scorepointers+2),y	;5
     85  24b5		       85 1c		      sta	GRP1	;3
     86  24b7		       b1 9a		      lda	(scorepointers+4),y	;5
     87  24b9		       85 1b		      sta	GRP0	;3
     88  24bb
     89  24bb		       b3 a0		      lax	(scorepointers+10),y	;5
     90  24bd		       b1 9e		      lda	(scorepointers+8),y	;5
     91  24bf		       85 f7		      sta	stack2	;3
     92  24c1		       b1 9c		      lda	(scorepointers+6),y	;5
     93  24c3		       a4 f7		      ldy	stack2	;3
     94  24c5
     95  24c5		       85 1c		      sta	GRP1	;3
     96  24c7		       84 1b		      sty	GRP0	;3
     97  24c9		       86 1c		      stx	GRP1	;3
     98  24cb		       84 1b		      sty	GRP0	;3
     99  24cd
      0  24cd					      sleep	4
      1  24cd				   .CYCLES    SET	4
      2  24cd
      3  24cd				  -	      IF	.CYCLES < 2
      4  24cd				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  24cd				  -	      ERR
      6  24cd					      ENDIF
      7  24cd
      8  24cd				  -	      IF	.CYCLES & 1
      9  24cd				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  24cd				  -	      nop	0
     11  24cd				  -	      ELSE
     12  24cd				  -	      bit	VSYNC
     13  24cd				  -	      ENDIF
     14  24cd				  -.CYCLES    SET	.CYCLES - 3
     15  24cd					      ENDIF
     16  24cd
     17  24cd					      REPEAT	.CYCLES / 2
     18  24cd		       ea		      nop
     17  24cd					      REPEND
     18  24ce		       ea		      nop
     19  24cf					      REPEND
    101  24cf
    102  24cf		       a5 91		      lda	missile0y
    103  24d1		       85 07		      sta	COLUP1
    104  24d3		       85 06		      sta	COLUP0
    105  24d5
    106  24d5		       a4 f1		      ldy	aux2	;3
    107  24d7		       10 ae		      bpl	pf48x2_X_loop	;2/3
    108  24d9
    109  24d9
    110  24d9				   pf48x2_X_codeend
    111  24d9							;echo "critical code in 48x2 is ",(pf48x2_X_codeend-pf48x2_X_loop), " bytes long."
    112  24d9
    113  24d9		       a9 00		      lda	#0
    114  24db		       85 1b		      sta	GRP0
    115  24dd		       85 1c		      sta	GRP1
    116  24df		       85 1b		      sta	GRP0
    117  24e1		       85 1c		      sta	GRP1
    118  24e3		       85 25		      sta	VDELP0
    119  24e5		       85 26		      sta	VDELP1
    120  24e7		       85 0d		      sta	PF0
    121  24e9		       85 0e		      sta	PF1
    122  24eb		       85 0f		      sta	PF2
    123  24ed
    124  24ed		       a6 f6		      ldx	stack1	;restore the stack pointer
    125  24ef		       9a		      txs
    126  24f0		       60		      rts
------- FILE titlescreen/asm/titlescreen.asm
    144  24f1					      endif		;mk_48x2_X_on
    145  24f1
    146  24f1
    147  24f1					      ifconst	mk_96x2_1_on
------- FILE titlescreen/asm/96x2_1_kernel.asm LEVEL 3 PASS 3
      0  24f1					      include	"titlescreen/asm/96x2_1_kernel.asm"
      1  24f1				   draw_bmp_96x2_1
      2  24f1
      3  24f1				  -	      ifconst	bmp_96x2_1_index
      4  24f1				  -	      lda	#(bmp_96x2_1_height-1)
      5  24f1				  -	      sec
      6  24f1				  -	      sbc	bmp_96x2_1_index
      7  24f1				  -	      tay
      8  24f1				  -	      sbc	#bmp_96x2_1_window
      9  24f1				  -	      sta	temp1
     10  24f1					      else
     11  24f1		       a0 3b		      ldy	#(bmp_96x2_1_window-1)
     12  24f3		       a9 ff		      lda	#255
     13  24f5		       85 9c		      sta	temp1
     14  24f7					      endif
     15  24f7
     16  24f7		       a9 03		      lda	#3
     17  24f9		       85 04		      sta	NUSIZ0	;3=Player and Missile are drawn twice 32 clocks apart
     18  24fb		       85 05		      sta	NUSIZ1	;3=Player and Missile are drawn twice 32 clocks apart
     19  24fd		       a9 00		      lda	#0
     20  24ff
     21  24ff		       b9 0d b8 	      lda	bmp_96x2_1_colors,y	;4
     22  2502				  -	      ifconst	bmp_96x2_1_fade
     23  2502				  -	      and	bmp_96x2_1_fade
     24  2502					      endif
     25  2502		       85 06		      sta	COLUP0	;3
     26  2504		       85 07		      sta	COLUP1	;3
     27  2506		       85 2b		      sta	HMCLR	;3
     28  2508
     29  2508		       a5 82		      lda	titleframe
     30  250a		       29 01		      and	#1
     31  250c		       f0 03		      beq	jmp_pf96x2_1_frame0
     32  250e		       4c b8 b5 	      jmp	pf96x2_1_frame1
     33  2511				   jmp_pf96x2_1_frame0
     34  2511		       4c 14 b5 	      jmp	pf96x2_1_frame0
     35  2514
     36  2514				   pf96x2_1_frame0
     37  2514							;postion P0 and P1
     38  2514		       85 02		      sta	WSYNC
     39  2516		       a9 e0		      lda	#%11100000
     40  2518		       85 20		      sta	HMP0
     41  251a		       a9 10		      lda	#%00010000
     42  251c		       85 21		      sta	HMP1
     43  251e		       85 02		      sta	WSYNC
      0  2520					      sleep	28
      1  2520				   .CYCLES    SET	28
      2  2520
      3  2520				  -	      IF	.CYCLES < 2
      4  2520				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  2520				  -	      ERR
      6  2520					      ENDIF
      7  2520
      8  2520				  -	      IF	.CYCLES & 1
      9  2520				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  2520				  -	      nop	0
     11  2520				  -	      ELSE
     12  2520				  -	      bit	VSYNC
     13  2520				  -	      ENDIF
     14  2520				  -.CYCLES    SET	.CYCLES - 3
     15  2520					      ENDIF
     16  2520
     17  2520					      REPEAT	.CYCLES / 2
     18  2520		       ea		      nop
     17  2520					      REPEND
     18  2521		       ea		      nop
     17  2521					      REPEND
     18  2522		       ea		      nop
     17  2522					      REPEND
     18  2523		       ea		      nop
     17  2523					      REPEND
     18  2524		       ea		      nop
     17  2524					      REPEND
     18  2525		       ea		      nop
     17  2525					      REPEND
     18  2526		       ea		      nop
     17  2526					      REPEND
     18  2527		       ea		      nop
     17  2527					      REPEND
     18  2528		       ea		      nop
     17  2528					      REPEND
     18  2529		       ea		      nop
     17  2529					      REPEND
     18  252a		       ea		      nop
     17  252a					      REPEND
     18  252b		       ea		      nop
     17  252b					      REPEND
     18  252c		       ea		      nop
     17  252c					      REPEND
     18  252d		       ea		      nop
     19  252e					      REPEND
     45  252e		       85 10		      sta	RESP0
      0  2530					      sleep	14
      1  2530				   .CYCLES    SET	14
      2  2530
      3  2530				  -	      IF	.CYCLES < 2
      4  2530				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  2530				  -	      ERR
      6  2530					      ENDIF
      7  2530
      8  2530				  -	      IF	.CYCLES & 1
      9  2530				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  2530				  -	      nop	0
     11  2530				  -	      ELSE
     12  2530				  -	      bit	VSYNC
     13  2530				  -	      ENDIF
     14  2530				  -.CYCLES    SET	.CYCLES - 3
     15  2530					      ENDIF
     16  2530
     17  2530					      REPEAT	.CYCLES / 2
     18  2530		       ea		      nop
     17  2530					      REPEND
     18  2531		       ea		      nop
     17  2531					      REPEND
     18  2532		       ea		      nop
     17  2532					      REPEND
     18  2533		       ea		      nop
     17  2533					      REPEND
     18  2534		       ea		      nop
     17  2534					      REPEND
     18  2535		       ea		      nop
     17  2535					      REPEND
     18  2536		       ea		      nop
     19  2537					      REPEND
     47  2537		       85 11		      sta	RESP1
     48  2539		       85 02		      sta	WSYNC
     49  253b		       85 2a		      sta	HMOVE
     50  253d
     51  253d		       85 02		      sta	WSYNC
     52  253f		       85 2b		      sta	HMCLR
     53  2541		       85 02		      sta	WSYNC
     54  2543
      0  2543					      sleep	4
      1  2543				   .CYCLES    SET	4
      2  2543
      3  2543				  -	      IF	.CYCLES < 2
      4  2543				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  2543				  -	      ERR
      6  2543					      ENDIF
      7  2543
      8  2543				  -	      IF	.CYCLES & 1
      9  2543				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  2543				  -	      nop	0
     11  2543				  -	      ELSE
     12  2543				  -	      bit	VSYNC
     13  2543				  -	      ENDIF
     14  2543				  -.CYCLES    SET	.CYCLES - 3
     15  2543					      ENDIF
     16  2543
     17  2543					      REPEAT	.CYCLES / 2
     18  2543		       ea		      nop
     17  2543					      REPEND
     18  2544		       ea		      nop
     19  2545					      REPEND
     56  2545		       4c 48 b5 	      jmp	pfline_96x2_1_frame0
     57  2548							;align so our branch doesn't unexpectedly cross a page...
     58  2548				  -	      if	>. != >[.+$70]
     59  2548				  -	      align	256
     60  2548					      endif
     61  2548
     62  2548				   pfline_96x2_1_frame0
     63  2548		       a9 80		      lda	#$80	;2
     64  254a		       85 20		      sta	HMP0	;3
     65  254c		       85 21		      sta	HMP1	;3
     66  254e
     67  254e		       b9 b4 b9 	      lda	bmp_96x2_1_06,y	;4
     68  2551		       85 1c		      sta	GRP1	;3
     69  2553
     70  2553		       b9 49 b8 	      lda	bmp_96x2_1_00,y
     71  2556		       85 1b		      sta	GRP0
     72  2558		       b9 c1 b8 	      lda	bmp_96x2_1_02,y
     73  255b		       85 1b		      sta	GRP0
     74  255d		       b9 3c b9 	      lda	bmp_96x2_1_04,y
     75  2560		       85 1b		      sta	GRP0
     76  2562
      0  2562					      sleep	2
      1  2562				   .CYCLES    SET	2
      2  2562
      3  2562				  -	      IF	.CYCLES < 2
      4  2562				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  2562				  -	      ERR
      6  2562					      ENDIF
      7  2562
      8  2562				  -	      IF	.CYCLES & 1
      9  2562				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  2562				  -	      nop	0
     11  2562				  -	      ELSE
     12  2562				  -	      bit	VSYNC
     13  2562				  -	      ENDIF
     14  2562				  -.CYCLES    SET	.CYCLES - 3
     15  2562					      ENDIF
     16  2562
     17  2562					      REPEAT	.CYCLES / 2
     18  2562		       ea		      nop
     19  2563					      REPEND
     78  2563
     79  2563		       b9 3c ba 	      lda	bmp_96x2_1_08,y
     80  2566		       85 1c		      sta	GRP1
     81  2568		       b9 b4 ba 	      lda	bmp_96x2_1_10,y
     82  256b		       85 1c		      sta	GRP1
     83  256d
     84  256d		       b9 85 b8 	      lda	bmp_96x2_1_01,y
     85  2570		       85 1b		      sta	GRP0
     86  2572
      0  2572					      sleep	8
      1  2572				   .CYCLES    SET	8
      2  2572
      3  2572				  -	      IF	.CYCLES < 2
      4  2572				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  2572				  -	      ERR
      6  2572					      ENDIF
      7  2572
      8  2572				  -	      IF	.CYCLES & 1
      9  2572				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  2572				  -	      nop	0
     11  2572				  -	      ELSE
     12  2572				  -	      bit	VSYNC
     13  2572				  -	      ENDIF
     14  2572				  -.CYCLES    SET	.CYCLES - 3
     15  2572					      ENDIF
     16  2572
     17  2572					      REPEAT	.CYCLES / 2
     18  2572		       ea		      nop
     17  2572					      REPEND
     18  2573		       ea		      nop
     17  2573					      REPEND
     18  2574		       ea		      nop
     17  2574					      REPEND
     18  2575		       ea		      nop
     19  2576					      REPEND
     88  2576
     89  2576							;sta WSYNC	;=0
     90  2576		       85 2a		      sta	HMOVE	;3 - NORMAL HMOVE
     91  2578
     92  2578		       b9 0c b8 	      lda	bmp_96x2_1_colors-1,y	;4 - get the title color early and store it for later
     93  257b				  -	      ifconst	bmp_96x2_1_fade
     94  257b				  -	      and	bmp_96x2_1_fade
     95  257b					      else
      0  257b					      sleep	3
      1  257b				   .CYCLES    SET	3
      2  257b
      3  257b				  -	      IF	.CYCLES < 2
      4  257b				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  257b				  -	      ERR
      6  257b					      ENDIF
      7  257b
      8  257b					      IF	.CYCLES & 1
      9  257b					      IFNCONST	NO_ILLEGAL_OPCODES
     10  257b		       04 00		      nop	0
     11  257d				  -	      ELSE
     12  257d				  -	      bit	VSYNC
     13  257d					      ENDIF
     14  257d				   .CYCLES    SET	.CYCLES - 3
     15  257d					      ENDIF
     16  257d
     17  257d				  -	      REPEAT	.CYCLES / 2
     18  257d				  -	      nop
     19  257d					      REPEND
     97  257d					      endif
     98  257d		       aa		      tax
     99  257e
    100  257e		       a9 00		      lda	#0	;2
    101  2580		       85 20		      sta	HMP0	;3
    102  2582		       85 21		      sta	HMP1	;3
    103  2584
      0  2584					      sleep	7
      1  2584				   .CYCLES    SET	7
      2  2584
      3  2584				  -	      IF	.CYCLES < 2
      4  2584				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  2584				  -	      ERR
      6  2584					      ENDIF
      7  2584
      8  2584					      IF	.CYCLES & 1
      9  2584					      IFNCONST	NO_ILLEGAL_OPCODES
     10  2584		       04 00		      nop	0
     11  2586				  -	      ELSE
     12  2586				  -	      bit	VSYNC
     13  2586					      ENDIF
     14  2586				   .CYCLES    SET	.CYCLES - 3
     15  2586					      ENDIF
     16  2586
     17  2586					      REPEAT	.CYCLES / 2
     18  2586		       ea		      nop
     17  2586					      REPEND
     18  2587		       ea		      nop
     19  2588					      REPEND
    105  2588
    106  2588		       b9 00 ba 	      lda	bmp_96x2_1_07,y
    107  258b		       85 1c		      sta	GRP1
    108  258d
    109  258d		       b9 00 b9 	      lda	bmp_96x2_1_03,y	;5
    110  2590		       85 1b		      sta	GRP0	;3 =  8
    111  2592		       b9 78 b9 	      lda	bmp_96x2_1_05,y	;5
    112  2595		       85 1b		      sta	GRP0	;3 =  8
    113  2597
      0  2597					      sleep	2
      1  2597				   .CYCLES    SET	2
      2  2597
      3  2597				  -	      IF	.CYCLES < 2
      4  2597				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  2597				  -	      ERR
      6  2597					      ENDIF
      7  2597
      8  2597				  -	      IF	.CYCLES & 1
      9  2597				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  2597				  -	      nop	0
     11  2597				  -	      ELSE
     12  2597				  -	      bit	VSYNC
     13  2597				  -	      ENDIF
     14  2597				  -.CYCLES    SET	.CYCLES - 3
     15  2597					      ENDIF
     16  2597
     17  2597					      REPEAT	.CYCLES / 2
     18  2597		       ea		      nop
     19  2598					      REPEND
    115  2598
    116  2598		       b9 78 ba 	      lda	bmp_96x2_1_09,y	;5
    117  259b		       85 1c		      sta	GRP1	;3 =  8
    118  259d		       b9 00 bb 	      lda	bmp_96x2_1_11,y	;5
    119  25a0		       85 1c		      sta	GRP1	;3 =  8
    120  25a2
      0  25a2					      sleep	2
      1  25a2				   .CYCLES    SET	2
      2  25a2
      3  25a2				  -	      IF	.CYCLES < 2
      4  25a2				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  25a2				  -	      ERR
      6  25a2					      ENDIF
      7  25a2
      8  25a2				  -	      IF	.CYCLES & 1
      9  25a2				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  25a2				  -	      nop	0
     11  25a2				  -	      ELSE
     12  25a2				  -	      bit	VSYNC
     13  25a2				  -	      ENDIF
     14  25a2				  -.CYCLES    SET	.CYCLES - 3
     15  25a2					      ENDIF
     16  25a2
     17  25a2					      REPEAT	.CYCLES / 2
     18  25a2		       ea		      nop
     19  25a3					      REPEND
    122  25a3		       86 07		      stx	COLUP1
    123  25a5		       86 06		      stx	COLUP0
    124  25a7
    125  25a7		       85 2a		      sta	HMOVE	;3 - CYCLE 74 HMOVE
      0  25a9					      sleep	2
      1  25a9				   .CYCLES    SET	2
      2  25a9
      3  25a9				  -	      IF	.CYCLES < 2
      4  25a9				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  25a9				  -	      ERR
      6  25a9					      ENDIF
      7  25a9
      8  25a9				  -	      IF	.CYCLES & 1
      9  25a9				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  25a9				  -	      nop	0
     11  25a9				  -	      ELSE
     12  25a9				  -	      bit	VSYNC
     13  25a9				  -	      ENDIF
     14  25a9				  -.CYCLES    SET	.CYCLES - 3
     15  25a9					      ENDIF
     16  25a9
     17  25a9					      REPEAT	.CYCLES / 2
     18  25a9		       ea		      nop
     19  25aa					      REPEND
    127  25aa		       88		      dey
    128  25ab
    129  25ab		       c4 9c		      cpy	temp1	;3
    130  25ad		       d0 99		      bne	pfline_96x2_1_frame0	;2/3
    131  25af
    132  25af				   pf96x2_1_0codeend
    133  25af							;echo "critical code #1 in 96x2_1 is ",(pf96x2_1_0codeend-pfline_96x2_1_frame0), " bytes long."
    134  25af
    135  25af		       a9 00		      lda	#0
    136  25b1		       85 1b		      sta	GRP0
    137  25b3		       85 1c		      sta	GRP1
    138  25b5		       4c 6e b6 	      jmp	pfdone_96x2_1
    139  25b8
    140  25b8
    141  25b8				   pf96x2_1_frame1
    142  25b8
    143  25b8							;postion P0 and P1
    144  25b8		       85 02		      sta	WSYNC
    145  25ba		       a9 20		      lda	#%00100000
    146  25bc		       85 20		      sta	HMP0
    147  25be		       a9 00		      lda	#0
    148  25c0		       a9 f0		      lda	#%11110000
    149  25c2		       85 21		      sta	HMP1
    150  25c4		       85 02		      sta	WSYNC
      0  25c6					      sleep	32
      1  25c6				   .CYCLES    SET	32
      2  25c6
      3  25c6				  -	      IF	.CYCLES < 2
      4  25c6				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  25c6				  -	      ERR
      6  25c6					      ENDIF
      7  25c6
      8  25c6				  -	      IF	.CYCLES & 1
      9  25c6				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  25c6				  -	      nop	0
     11  25c6				  -	      ELSE
     12  25c6				  -	      bit	VSYNC
     13  25c6				  -	      ENDIF
     14  25c6				  -.CYCLES    SET	.CYCLES - 3
     15  25c6					      ENDIF
     16  25c6
     17  25c6					      REPEAT	.CYCLES / 2
     18  25c6		       ea		      nop
     17  25c6					      REPEND
     18  25c7		       ea		      nop
     17  25c7					      REPEND
     18  25c8		       ea		      nop
     17  25c8					      REPEND
     18  25c9		       ea		      nop
     17  25c9					      REPEND
     18  25ca		       ea		      nop
     17  25ca					      REPEND
     18  25cb		       ea		      nop
     17  25cb					      REPEND
     18  25cc		       ea		      nop
     17  25cc					      REPEND
     18  25cd		       ea		      nop
     17  25cd					      REPEND
     18  25ce		       ea		      nop
     17  25ce					      REPEND
     18  25cf		       ea		      nop
     17  25cf					      REPEND
     18  25d0		       ea		      nop
     17  25d0					      REPEND
     18  25d1		       ea		      nop
     17  25d1					      REPEND
     18  25d2		       ea		      nop
     17  25d2					      REPEND
     18  25d3		       ea		      nop
     17  25d3					      REPEND
     18  25d4		       ea		      nop
     17  25d4					      REPEND
     18  25d5		       ea		      nop
     19  25d6					      REPEND
    152  25d6		       85 10		      sta	RESP0
      0  25d8					      sleep	12
      1  25d8				   .CYCLES    SET	12
      2  25d8
      3  25d8				  -	      IF	.CYCLES < 2
      4  25d8				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  25d8				  -	      ERR
      6  25d8					      ENDIF
      7  25d8
      8  25d8				  -	      IF	.CYCLES & 1
      9  25d8				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  25d8				  -	      nop	0
     11  25d8				  -	      ELSE
     12  25d8				  -	      bit	VSYNC
     13  25d8				  -	      ENDIF
     14  25d8				  -.CYCLES    SET	.CYCLES - 3
     15  25d8					      ENDIF
     16  25d8
     17  25d8					      REPEAT	.CYCLES / 2
     18  25d8		       ea		      nop
     17  25d8					      REPEND
     18  25d9		       ea		      nop
     17  25d9					      REPEND
     18  25da		       ea		      nop
     17  25da					      REPEND
     18  25db		       ea		      nop
     17  25db					      REPEND
     18  25dc		       ea		      nop
     17  25dc					      REPEND
     18  25dd		       ea		      nop
     19  25de					      REPEND
    154  25de		       85 11		      sta	RESP1
    155  25e0		       85 02		      sta	WSYNC
    156  25e2		       85 2a		      sta	HMOVE
    157  25e4
    158  25e4		       85 02		      sta	WSYNC
    159  25e6		       85 2b		      sta	HMCLR
    160  25e8
    161  25e8
    162  25e8
    163  25e8		       85 02		      sta	WSYNC
      0  25ea					      sleep	3
      1  25ea				   .CYCLES    SET	3
      2  25ea
      3  25ea				  -	      IF	.CYCLES < 2
      4  25ea				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  25ea				  -	      ERR
      6  25ea					      ENDIF
      7  25ea
      8  25ea					      IF	.CYCLES & 1
      9  25ea					      IFNCONST	NO_ILLEGAL_OPCODES
     10  25ea		       04 00		      nop	0
     11  25ec				  -	      ELSE
     12  25ec				  -	      bit	VSYNC
     13  25ec					      ENDIF
     14  25ec				   .CYCLES    SET	.CYCLES - 3
     15  25ec					      ENDIF
     16  25ec
     17  25ec				  -	      REPEAT	.CYCLES / 2
     18  25ec				  -	      nop
     19  25ec					      REPEND
    165  25ec		       4c 00 b6 	      jmp	pfline_96x2_1_frame1
    166  25ef
    167  25ef							;align so our branch doesn't unexpectedly cross a page...
    168  25ef					      if	>. != >[.+$70]
    169  2600		       00 00 00 00*	      align	256
    170  2600					      endif
    171  2600
    172  2600				   pfline_96x2_1_frame1
    173  2600
    174  2600		       85 2a		      sta	HMOVE
    175  2602
    176  2602		       b9 00 ba 	      lda	bmp_96x2_1_07,y	;4
    177  2605		       85 1c		      sta	GRP1	;3
    178  2607
    179  2607		       a9 00		      lda	#$0	;2
    180  2609		       85 20		      sta	HMP0	;3
    181  260b		       85 21		      sta	HMP1	;3
    182  260d
    183  260d		       b9 85 b8 	      lda	bmp_96x2_1_01,y
    184  2610		       8d 1b 00 	      sta.w	GRP0
    185  2613		       b9 00 b9 	      lda	bmp_96x2_1_03,y
    186  2616		       85 1b		      sta	GRP0
    187  2618		       b9 78 b9 	      lda	bmp_96x2_1_05,y
    188  261b		       85 1b		      sta	GRP0
    189  261d
      0  261d					      sleep	2
      1  261d				   .CYCLES    SET	2
      2  261d
      3  261d				  -	      IF	.CYCLES < 2
      4  261d				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  261d				  -	      ERR
      6  261d					      ENDIF
      7  261d
      8  261d				  -	      IF	.CYCLES & 1
      9  261d				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  261d				  -	      nop	0
     11  261d				  -	      ELSE
     12  261d				  -	      bit	VSYNC
     13  261d				  -	      ENDIF
     14  261d				  -.CYCLES    SET	.CYCLES - 3
     15  261d					      ENDIF
     16  261d
     17  261d					      REPEAT	.CYCLES / 2
     18  261d		       ea		      nop
     19  261e					      REPEND
    191  261e
    192  261e		       b9 78 ba 	      lda	bmp_96x2_1_09,y
    193  2621		       85 1c		      sta	GRP1
    194  2623		       b9 00 bb 	      lda	bmp_96x2_1_11,y
    195  2626		       85 1c		      sta	GRP1
    196  2628
    197  2628		       b9 49 b8 	      lda	bmp_96x2_1_00,y
    198  262b		       85 1b		      sta	GRP0
    199  262d
    200  262d		       8d 2a 00 	      sta.w	HMOVE	;3 - cycle 74
    201  2630
    202  2630							;sta WSYNC	;=0 -----------------------------------------
    203  2630
    204  2630		       b9 b4 b9 	      lda	bmp_96x2_1_06,y
    205  2633		       85 1c		      sta	GRP1
    206  2635
      0  2635					      sleep	8
      1  2635				   .CYCLES    SET	8
      2  2635
      3  2635				  -	      IF	.CYCLES < 2
      4  2635				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  2635				  -	      ERR
      6  2635					      ENDIF
      7  2635
      8  2635				  -	      IF	.CYCLES & 1
      9  2635				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  2635				  -	      nop	0
     11  2635				  -	      ELSE
     12  2635				  -	      bit	VSYNC
     13  2635				  -	      ENDIF
     14  2635				  -.CYCLES    SET	.CYCLES - 3
     15  2635					      ENDIF
     16  2635
     17  2635					      REPEAT	.CYCLES / 2
     18  2635		       ea		      nop
     17  2635					      REPEND
     18  2636		       ea		      nop
     17  2636					      REPEND
     18  2637		       ea		      nop
     17  2637					      REPEND
     18  2638		       ea		      nop
     19  2639					      REPEND
    208  2639
    209  2639		       b9 0c b8 	      lda	bmp_96x2_1_colors-1,y	;get the title color early and store it for later
    210  263c		       aa		      tax		;2
    211  263d
      0  263d					      sleep	3
      1  263d				   .CYCLES    SET	3
      2  263d
      3  263d				  -	      IF	.CYCLES < 2
      4  263d				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  263d				  -	      ERR
      6  263d					      ENDIF
      7  263d
      8  263d					      IF	.CYCLES & 1
      9  263d					      IFNCONST	NO_ILLEGAL_OPCODES
     10  263d		       04 00		      nop	0
     11  263f				  -	      ELSE
     12  263f				  -	      bit	VSYNC
     13  263f					      ENDIF
     14  263f				   .CYCLES    SET	.CYCLES - 3
     15  263f					      ENDIF
     16  263f
     17  263f				  -	      REPEAT	.CYCLES / 2
     18  263f				  -	      nop
     19  263f					      REPEND
    213  263f
    214  263f		       a9 80		      lda	#$80	;2
    215  2641		       85 20		      sta	HMP0	;3
    216  2643		       85 21		      sta	HMP1	;3
    217  2645
    218  2645
    219  2645		       b9 c1 b8 	      lda	bmp_96x2_1_02,y	;5
    220  2648		       85 1b		      sta	GRP0	;3 =  8
    221  264a
    222  264a		       b9 3c b9 	      lda	bmp_96x2_1_04,y	;5
    223  264d		       85 1b		      sta	GRP0	;3 =  8
    224  264f
      0  264f					      sleep	2
      1  264f				   .CYCLES    SET	2
      2  264f
      3  264f				  -	      IF	.CYCLES < 2
      4  264f				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  264f				  -	      ERR
      6  264f					      ENDIF
      7  264f
      8  264f				  -	      IF	.CYCLES & 1
      9  264f				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  264f				  -	      nop	0
     11  264f				  -	      ELSE
     12  264f				  -	      bit	VSYNC
     13  264f				  -	      ENDIF
     14  264f				  -.CYCLES    SET	.CYCLES - 3
     15  264f					      ENDIF
     16  264f
     17  264f					      REPEAT	.CYCLES / 2
     18  264f		       ea		      nop
     19  2650					      REPEND
    226  2650
    227  2650		       b9 3c ba 	      lda	bmp_96x2_1_08,y	;5
    228  2653		       85 1c		      sta	GRP1	;3 =  8
    229  2655
    230  2655		       b9 b4 ba 	      lda	bmp_96x2_1_10,y	;5
    231  2658		       85 1c		      sta	GRP1	;3 =  8
    232  265a
      0  265a					      sleep	4
      1  265a				   .CYCLES    SET	4
      2  265a
      3  265a				  -	      IF	.CYCLES < 2
      4  265a				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  265a				  -	      ERR
      6  265a					      ENDIF
      7  265a
      8  265a				  -	      IF	.CYCLES & 1
      9  265a				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  265a				  -	      nop	0
     11  265a				  -	      ELSE
     12  265a				  -	      bit	VSYNC
     13  265a				  -	      ENDIF
     14  265a				  -.CYCLES    SET	.CYCLES - 3
     15  265a					      ENDIF
     16  265a
     17  265a					      REPEAT	.CYCLES / 2
     18  265a		       ea		      nop
     17  265a					      REPEND
     18  265b		       ea		      nop
     19  265c					      REPEND
    234  265c
    235  265c		       88		      dey
    236  265d
    237  265d		       8a		      txa
    238  265e				  -	      ifconst	bmp_96x2_1_fade
    239  265e				  -	      and	bmp_96x2_1_fade
    240  265e					      else
      0  265e					      sleep	3
      1  265e				   .CYCLES    SET	3
      2  265e
      3  265e				  -	      IF	.CYCLES < 2
      4  265e				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  265e				  -	      ERR
      6  265e					      ENDIF
      7  265e
      8  265e					      IF	.CYCLES & 1
      9  265e					      IFNCONST	NO_ILLEGAL_OPCODES
     10  265e		       04 00		      nop	0
     11  2660				  -	      ELSE
     12  2660				  -	      bit	VSYNC
     13  2660					      ENDIF
     14  2660				   .CYCLES    SET	.CYCLES - 3
     15  2660					      ENDIF
     16  2660
     17  2660				  -	      REPEAT	.CYCLES / 2
     18  2660				  -	      nop
     19  2660					      REPEND
    242  2660					      endif
    243  2660		       85 07		      sta	COLUP1	;3
    244  2662		       85 06		      sta	COLUP0	;3
    245  2664
    246  2664		       c4 9c		      cpy	temp1	;2
    247  2666		       d0 98		      bne	pfline_96x2_1_frame1	;2/3
    248  2668
    249  2668				   pf96x2_1_1codeend
    250  2668							;echo "critical code #2 in 96x2_1 is ",(pf96x2_1_1codeend-pfline_96x2_1_frame1), " bytes long."
    251  2668
    252  2668		       a9 00		      lda	#0
    253  266a		       85 1b		      sta	GRP0
    254  266c		       85 1c		      sta	GRP1
    255  266e
    256  266e				   pfdone_96x2_1
    257  266e		       85 02		      sta	WSYNC	; debug
    258  2670
    259  2670		       60		      rts
------- FILE titlescreen/asm/titlescreen.asm
    149  2671					      endif		;mk_96x2_1_on
    150  2671
    151  2671				  -	      ifconst	mk_96x2_2_on
    152  2671				  -	      include	"titlescreen/asm/96x2_2_kernel.asm"
    153  2671					      endif		;mk_96x2_2_on
    154  2671
    155  2671				  -	      ifconst	mk_96x2_3_on
    156  2671				  -	      include	"titlescreen/asm/96x2_3_kernel.asm"
    157  2671					      endif		;mk_96x2_3_on
    158  2671
    159  2671				  -	      ifconst	mk_96x2_4_on
    160  2671				  -	      include	"titlescreen/asm/96x2_4_kernel.asm"
    161  2671					      endif		;mk_96x2_4_on
    162  2671
    163  2671				  -	      ifconst	mk_96x2_5_on
    164  2671				  -	      include	"titlescreen/asm/96x2_5_kernel.asm"
    165  2671					      endif		;mk_96x2_5_on
    166  2671
    167  2671				  -	      ifconst	mk_96x2_6_on
    168  2671				  -	      include	"titlescreen/asm/96x2_6_kernel.asm"
    169  2671					      endif		;mk_96x2_6_on
    170  2671
    171  2671				  -	      ifconst	mk_96x2_7_on
    172  2671				  -	      include	"titlescreen/asm/96x2_7_kernel.asm"
    173  2671					      endif		;mk_96x2_7_on
    174  2671
    175  2671				  -	      ifconst	mk_96x2_8_on
    176  2671				  -	      include	"titlescreen/asm/96x2_8_kernel.asm"
    177  2671					      endif		;mk_96x2_8_on
    178  2671
    179  2671					      ifconst	mk_score_on
------- FILE titlescreen/asm/score_kernel.asm LEVEL 3 PASS 3
      0  2671					      include	"titlescreen/asm/score_kernel.asm"
      1  2671							; The batari Basic score kernel
      2  2671							; This minikernel is not under the same license as the rest of the
      3  2671							; titlescreen code. Refer to the bB license before you use this in
      4  2671							; a non-bB program.
      5  2671
      6  2671				   draw_score_display
      7  2671
      8  2671		       a7 93		      lax	score+0
      9  2673		       20 43 b7 	      jsr	miniscorepointerset
     10  2676		       84 9e		      sty	scorepointers+8
     11  2678		       86 96		      stx	scorepointers+0
     12  267a		       a7 94		      lax	score+1
     13  267c		       20 43 b7 	      jsr	miniscorepointerset
     14  267f		       84 9a		      sty	scorepointers+4
     15  2681		       86 9c		      stx	scorepointers+6
     16  2683		       a7 95		      lax	score+2
     17  2685		       20 43 b7 	      jsr	miniscorepointerset
     18  2688		       84 a0		      sty	scorepointers+10
     19  268a		       86 98		      stx	scorepointers+2
     20  268c
     21  268c		       85 2b		      sta	HMCLR
     22  268e		       ba		      tsx
     23  268f		       86 f6		      stx	stack1
     24  2691							;ldx #$20
     25  2691		       a2 60		      ldx	#$60
     26  2693		       86 20		      stx	HMP0
     27  2695
     28  2695		       a2 00		      ldx	#0
     29  2697		       85 02		      sta	WSYNC	;   0
     30  2699		       86 1b		      STx	GRP0	; 3 3
     31  269b		       86 1c		      STx	GRP1	; 3 6 seems to be needed because of vdel
     32  269d
      0  269d					      sleep	7	; 7 13
      1  269d				   .CYCLES    SET	7
      2  269d
      3  269d				  -	      IF	.CYCLES < 2
      4  269d				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  269d				  -	      ERR
      6  269d					      ENDIF
      7  269d
      8  269d					      IF	.CYCLES & 1
      9  269d					      IFNCONST	NO_ILLEGAL_OPCODES
     10  269d		       04 00		      nop	0
     11  269f				  -	      ELSE
     12  269f				  -	      bit	VSYNC
     13  269f					      ENDIF
     14  269f				   .CYCLES    SET	.CYCLES - 3
     15  269f					      ENDIF
     16  269f
     17  269f					      REPEAT	.CYCLES / 2
     18  269f		       ea		      nop
     17  269f					      REPEND
     18  26a0		       ea		      nop
     19  26a1					      REPEND
     34  26a1
     35  26a1		       a9 bb		      lda	#>miniscoretable	; 2 15
     36  26a3		       95 97		      sta	scorepointers+1,x	; 4 19
     37  26a5		       95 99		      sta	scorepointers+3,x	; 4 23
     38  26a7		       95 9b		      sta	scorepointers+5,x	; 4 27
     39  26a9		       95 9d		      sta	scorepointers+7,x	; 4 31
     40  26ab		       95 9f		      sta	scorepointers+9,x	; 4 35
     41  26ad		       95 a1		      sta	scorepointers+11,x	; 4 39
     42  26af
     43  26af		       a0 07		      LDY	#7	; 2 41
     44  26b1		       85 10		      STA	RESP0	; 3 44
     45  26b3		       85 11		      STA	RESP1	; 3 47
     46  26b5
     47  26b5		       a9 03		      LDA	#$03	; 2 49
     48  26b7		       85 04		      STA	NUSIZ0	; 3 52
     49  26b9		       95 05		      STA	NUSIZ1,x	; 4 56
     50  26bb		       85 25		      STA	VDELP0	; 3 59
     51  26bd		       85 26		      STA	VDELP1	; 3 62
     52  26bf							;LDA #$30		; 2 64
     53  26bf		       a9 70		      LDA	#$70	; 2 64
     54  26c1		       85 21		      STA	HMP1	; 3 67
     55  26c3		       a5 a3		      LDA	scorecolor	; 3 70
     56  26c5		       85 2a		      STA	HMOVE	; cycle 73 ?
     57  26c7				  -	      ifconst	score_kernel_fade
     58  26c7				  -	      and	score_kernel_fade
     59  26c7					      endif
     60  26c7
     61  26c7		       85 06		      STA	COLUP0
     62  26c9		       85 07		      STA	COLUP1
     63  26cb				  -	      ifconst	scorefade
     64  26cb				  -	      STA	stack2	; scorefade
     65  26cb					      endif
     66  26cb		       b1 96		      lda	(scorepointers),y
     67  26cd		       85 1b		      sta	GRP0
     68  26cf		       b1 9e		      lda	(scorepointers+8),y
     69  26d1		       85 02		      sta	WSYNC
      0  26d3					      sleep	2
      1  26d3				   .CYCLES    SET	2
      2  26d3
      3  26d3				  -	      IF	.CYCLES < 2
      4  26d3				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  26d3				  -	      ERR
      6  26d3					      ENDIF
      7  26d3
      8  26d3				  -	      IF	.CYCLES & 1
      9  26d3				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  26d3				  -	      nop	0
     11  26d3				  -	      ELSE
     12  26d3				  -	      bit	VSYNC
     13  26d3				  -	      ENDIF
     14  26d3				  -.CYCLES    SET	.CYCLES - 3
     15  26d3					      ENDIF
     16  26d3
     17  26d3					      REPEAT	.CYCLES / 2
     18  26d3		       ea		      nop
     19  26d4					      REPEND
     71  26d4		       4c 0b b7 	      jmp	beginscoreloop
     72  26d7
     73  26d7					      if	((<*)>$28)
     74  2700		       00 00 00 00*	      align	256	; kludge that potentially wastes space!  should be fixed!
     75  2700					      endif
     76  2700
     77  2700				   scoreloop2
     78  2700				  -	      ifconst	scorefade
     79  2700				  -	      lda	stack2
     80  2700				  -	      sta	COLUP0
     81  2700				  -	      sta	COLUP1
     82  2700					      else
      0  2700					      sleep	9
      1  2700				   .CYCLES    SET	9
      2  2700
      3  2700				  -	      IF	.CYCLES < 2
      4  2700				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  2700				  -	      ERR
      6  2700					      ENDIF
      7  2700
      8  2700					      IF	.CYCLES & 1
      9  2700					      IFNCONST	NO_ILLEGAL_OPCODES
     10  2700		       04 00		      nop	0
     11  2702				  -	      ELSE
     12  2702				  -	      bit	VSYNC
     13  2702					      ENDIF
     14  2702				   .CYCLES    SET	.CYCLES - 3
     15  2702					      ENDIF
     16  2702
     17  2702					      REPEAT	.CYCLES / 2
     18  2702		       ea		      nop
     17  2702					      REPEND
     18  2703		       ea		      nop
     17  2703					      REPEND
     18  2704		       ea		      nop
     19  2705					      REPEND
     84  2705					      endif
     85  2705		       b1 96		      lda	(scorepointers),y	;+5  68  204
     86  2707		       85 1b		      sta	GRP0	;+3  71  213	   D1	  --	  --	 --
     87  2709		       b1 9e		      lda	(scorepointers+$8),y	;+5   5   15
     88  270b							; cycle 0
     89  270b				   beginscoreloop
     90  270b		       85 1c		      sta	GRP1	;+3   8   24	   D1	  D1	  D2	 --
     91  270d		       b1 9c		      lda	(scorepointers+$6),y	;+5  13   39
     92  270f		       85 1b		      sta	GRP0	;+3  16   48	   D3	  D1	  D2	 D2
     93  2711		       b3 98		      lax	(scorepointers+$2),y	;+5  29   87
     94  2713		       9a		      txs
     95  2714		       b3 9a		      lax	(scorepointers+$4),y	;+5  36  108
     96  2716
     97  2716				  -	      ifconst	scorefade
     98  2716				  -	      dec	stack2
     99  2716					      else
      0  2716					      sleep	5
      1  2716				   .CYCLES    SET	5
      2  2716
      3  2716				  -	      IF	.CYCLES < 2
      4  2716				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  2716				  -	      ERR
      6  2716					      ENDIF
      7  2716
      8  2716					      IF	.CYCLES & 1
      9  2716					      IFNCONST	NO_ILLEGAL_OPCODES
     10  2716		       04 00		      nop	0
     11  2718				  -	      ELSE
     12  2718				  -	      bit	VSYNC
     13  2718					      ENDIF
     14  2718				   .CYCLES    SET	.CYCLES - 3
     15  2718					      ENDIF
     16  2718
     17  2718					      REPEAT	.CYCLES / 2
     18  2718		       ea		      nop
     19  2719					      REPEND
    101  2719					      endif
      0  2719					      sleep	2
      1  2719				   .CYCLES    SET	2
      2  2719
      3  2719				  -	      IF	.CYCLES < 2
      4  2719				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  2719				  -	      ERR
      6  2719					      ENDIF
      7  2719
      8  2719				  -	      IF	.CYCLES & 1
      9  2719				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  2719				  -	      nop	0
     11  2719				  -	      ELSE
     12  2719				  -	      bit	VSYNC
     13  2719				  -	      ENDIF
     14  2719				  -.CYCLES    SET	.CYCLES - 3
     15  2719					      ENDIF
     16  2719
     17  2719					      REPEAT	.CYCLES / 2
     18  2719		       ea		      nop
     19  271a					      REPEND
    103  271a
    104  271a		       b1 a0		      lda	(scorepointers+$A),y	;+5  21   63 DIGIT 6
    105  271c		       86 1c		      stx	GRP1	;+3  44  132	   D3	  D3	  D4	 D2!
    106  271e		       ba		      tsx
    107  271f		       86 1b		      stx	GRP0	;+3  47  141	   D5	  D3!	  D4	 D4
    108  2721		       85 1c		      sta	GRP1	;+3  50  150	   D5	  D5	  D6	 D4!
    109  2723
    110  2723		       84 1b		      sty	GRP0	;+3  53  159	   D4*	  D5!	  D6	 D6
    111  2725		       88		      dey
    112  2726		       10 d8		      bpl	scoreloop2	;+2  60  180
    113  2728				   scoreloop2end
    114  2728
    115  2728							;echo "critical size: ",(scoreloop2end-scoreloop2)
    116  2728
    117  2728
    118  2728		       a6 f6		      ldx	stack1
    119  272a		       9a		      txs
    120  272b
    121  272b		       a9 00		      LDA	#0
    122  272d		       85 0e		      sta	PF1
    123  272f		       85 1b		      STA	GRP0
    124  2731		       85 1c		      STA	GRP1
    125  2733		       85 25		      STA	VDELP0
    126  2735		       85 26		      STA	VDELP1
    127  2737		       85 04		      STA	NUSIZ0
    128  2739		       85 05		      STA	NUSIZ1
    129  273b
    130  273b							; clear out the score pointers in case they're stolen DPC variables...
    131  273b		       a2 0b		      ldx	#11
    132  273d				   clearscoreploop
    133  273d		       95 96		      sta	scorepointers,x
    134  273f		       ca		      dex
    135  2740		       10 fb		      bpl	clearscoreploop
    136  2742
    137  2742
    138  2742							;;ldy temp3
    139  2742							;ldy scorepointers+8
    140  2742							;sty scorepointers+3
    141  2742
    142  2742							;;ldy temp5
    143  2742							;ldy scorepointers+10
    144  2742							;sty scorepointers+5
    145  2742		       60		      rts
    146  2743
    147  2743				   miniscorepointerset
    148  2743		       29 0f		      and	#$0F
    149  2745		       0a		      asl
    150  2746		       0a		      asl
    151  2747		       0a		      asl
    152  2748		       69 3d		      adc	#<miniscoretable
    153  274a		       a8		      tay
    154  274b		       8a		      txa
    155  274c		       29 f0		      and	#$F0
    156  274e		       4a		      lsr
    157  274f		       69 3d		      adc	#<miniscoretable
    158  2751		       aa		      tax
    159  2752		       60		      rts
    160  2753
------- FILE titlescreen/asm/titlescreen.asm
    181  2753					      endif		;mk_score_on
    182  2753
    183  2753					      ifconst	mk_gameselect_on
------- FILE titlescreen/asm/gameselect_kernel.asm LEVEL 3 PASS 3
      0  2753					      include	"titlescreen/asm/gameselect_kernel.asm"
      1  2753
      2  2753				   draw_gameselect_display
      3  2753		       a9 00		      lda	#0
      4  2755		       85 1b		      sta	GRP0
      5  2757		       85 1c		      sta	GRP1
      6  2759
      7  2759		       a0 04		      ldy	#4
      8  275b		       84 f1		      sty	aux2
      9  275d
     10  275d		       ad 8d bb 	      lda	bmp_gameselect_color
     11  2760		       85 06		      sta	COLUP0
     12  2762		       85 07		      sta	COLUP1
     13  2764
     14  2764							;change gamenumber to a BCD number and stick it in temp5
     15  2764		       a5 a6		      lda	gamenumber
     16  2766		       85 9e		      sta	temp3
     17  2768		       a9 00		      lda	#0
     18  276a		       85 9f		      sta	temp4
     19  276c		       a2 08		      ldx	#8
     20  276e		       18		      clc
     21  276f		       f8		      sed
     22  2770				   converttobcd
     23  2770		       06 9e		      asl	temp3
     24  2772		       a5 9f		      lda	temp4
     25  2774		       65 9f		      adc	temp4
     26  2776		       85 9f		      sta	temp4
     27  2778		       ca		      dex
     28  2779		       d0 f5		      bne	converttobcd
     29  277b		       d8		      cld
     30  277c
     31  277c		       a5 9f		      lda	temp4
     32  277e		       29 0f		      and	#$0f
     33  2780		       85 9e		      sta	temp3
     34  2782		       0a		      asl
     35  2783		       0a		      asl
     36  2784		       18		      clc
     37  2785		       65 9e		      adc	temp3	; *5
     38  2787		       18		      clc
     39  2788		       69 a2		      adc	#<(font_gameselect_img)
     40  278a		       85 a0		      sta	scorepointers+10
     41  278c
     42  278c		       a5 9f		      lda	temp4
     43  278e		       29 f0		      and	#$f0
     44  2790		       4a		      lsr
     45  2791		       4a		      lsr
     46  2792		       85 9e		      sta	temp3
     47  2794		       4a		      lsr
     48  2795		       4a		      lsr
     49  2796		       18		      clc
     50  2797		       65 9e		      adc	temp3	; *5
     51  2799		       18		      clc
     52  279a		       69 a2		      adc	#<(font_gameselect_img)
     53  279c		       85 9e		      sta	scorepointers+8
     54  279e
     55  279e
     56  279e							;setup score pointers to point at my bitmap slices instead
     57  279e		       a9 8e		      lda	#<(bmp_gameselect_CHAR0)
     58  27a0		       85 96		      sta	scorepointers+0
     59  27a2		       a9 bb		      lda	#>(bmp_gameselect_CHAR0)
     60  27a4		       85 97		      sta	scorepointers+1
     61  27a6		       a9 93		      lda	#<(bmp_gameselect_CHAR1)
     62  27a8		       85 98		      sta	scorepointers+2
     63  27aa		       a9 bb		      lda	#>(bmp_gameselect_CHAR1)
     64  27ac		       85 99		      sta	scorepointers+3
     65  27ae		       a9 98		      lda	#<(bmp_gameselect_CHAR2)
     66  27b0		       85 9a		      sta	scorepointers+4
     67  27b2		       a9 bb		      lda	#>(bmp_gameselect_CHAR2)
     68  27b4		       85 9b		      sta	scorepointers+5
     69  27b6		       a9 9d		      lda	#<(bmp_gameselect_CHAR3)
     70  27b8		       85 9c		      sta	scorepointers+6
     71  27ba		       a9 bb		      lda	#>(bmp_gameselect_CHAR3)
     72  27bc		       85 9d		      sta	scorepointers+7
     73  27be
     74  27be		       a9 bb		      lda	#>(font_gameselect_img)
     75  27c0		       85 9f		      sta	scorepointers+9
     76  27c2
     77  27c2		       a9 bb		      lda	#>(font_gameselect_img)
     78  27c4		       85 a1		      sta	scorepointers+11
     79  27c6
     80  27c6		       4c a8 b3 	      jmp	draw_bmp_48x1_X
------- FILE titlescreen/asm/titlescreen.asm
    185  27c9					      endif		;mk_gameselect_on
    186  27c9
    187  27c9				   PFWAIT
    188  27c9		       ad 84 02 	      lda	INTIM
    189  27cc		       d0 fb		      bne	PFWAIT
    190  27ce		       85 02		      sta	WSYNC
    191  27d0
    192  27d0				   OVERSCAN
    193  27d0					      ifnconst	overscan_time
    194  27d0		       a9 a2		      lda	#34+128
    195  27d2				  -	      else
    196  27d2				  -	      lda	#overscan_time+128-5
    197  27d2					      endif
    198  27d2		       8d 96 02 	      sta	TIM64T
    199  27d5
    200  27d5							;fix height variables we borrowed, so DPC doesn't crash on drawscreen...
    201  27d5				  -	      ifconst	player9height
    202  27d5				  -	      ldy	#8
    203  27d5				  -	      lda	#0
    204  27d5				  -	      sta	player0height
    205  27d5				  -.playerheightfixloop
    206  27d5				  -	      sta	player1height,y
    207  27d5				  -	      ifconst	_NUSIZ1
    208  27d5				  -	      sta	_NUSIZ1,y
    209  27d5				  -	      endif
    210  27d5				  -	      dey
    211  27d5				  -	      bpl	.playerheightfixloop
    212  27d5					      endif
    213  27d5
    214  27d5		       a9 c2		      lda	#%11000010
    215  27d7		       85 02		      sta	WSYNC
    216  27d9		       85 01		      sta	VBLANK
      0  27db					      RETURN
      1  27db				  -	      ifnconst	bankswitch
      2  27db				  -	      rts
      3  27db					      else
      4  27db		       4c da ff 	      jmp	BS_return
      5  27de					      endif
    218  27de
    219  27de				  -	      ifconst	mk_48x1_1_on
    220  27de				  -	      include	"titlescreen/48x1_1_image.asm"
    221  27de					      endif
    222  27de				  -	      ifconst	mk_48x1_2_on
    223  27de				  -	      include	"titlescreen/48x1_2_image.asm"
    224  27de					      endif
    225  27de				  -	      ifconst	mk_48x1_3_on
    226  27de				  -	      include	"titlescreen/48x1_3_image.asm"
    227  27de					      endif
    228  27de				  -	      ifconst	mk_48x1_4_on
    229  27de				  -	      include	"titlescreen/48x1_4_image.asm"
    230  27de					      endif
    231  27de				  -	      ifconst	mk_48x1_5_on
    232  27de				  -	      include	"titlescreen/48x1_5_image.asm"
    233  27de					      endif
    234  27de				  -	      ifconst	mk_48x1_6_on
    235  27de				  -	      include	"titlescreen/48x1_6_image.asm"
    236  27de					      endif
    237  27de				  -	      ifconst	mk_48x1_7_on
    238  27de				  -	      include	"titlescreen/48x1_7_image.asm"
    239  27de					      endif
    240  27de				  -	      ifconst	mk_48x1_8_on
    241  27de				  -	      include	"titlescreen/48x1_8_image.asm"
    242  27de					      endif
    243  27de
    244  27de
    245  27de					      ifconst	mk_48x2_1_on
------- FILE titlescreen/48x2_1_image.asm LEVEL 3 PASS 3
      0  27de					      include	"titlescreen/48x2_1_image.asm"
      1  27de
      2  27de							;*** The height of the displayed data...
      3  27de		       00 05	   bmp_48x2_1_window =	5
      4  27de
      5  27de							;*** The height of the bitmap data. This can be larger than
      6  27de							;*** the displayed data height, if you're scrolling or animating
      7  27de							;*** the data...
      8  27de		       00 05	   bmp_48x2_1_height =	5
      9  27de
     10  27de				  -	      if	>. != >[.+(bmp_48x2_1_height)]
     11  27de				  -	      align	256
     12  27de					      endif
     13  27de		       00		      BYTE.b	0	; leave this here!
     14  27df
     15  27df
     16  27df							;*** The color of each line in the bitmap, in reverse order...
     17  27df				   bmp_48x2_1_colors
     18  27df		       84		      BYTE.b	_84
     19  27e0		       88		      BYTE.b	_88
     20  27e1		       48		      BYTE.b	_48
     21  27e2		       46		      BYTE.b	_46
     22  27e3		       44		      BYTE.b	_44
     23  27e4
     24  27e4				  -	      ifnconst	bmp_48x2_1_PF1
     25  27e4				  -bmp_48x2_1_PF1
     26  27e4					      endif
     27  27e4		       00		      BYTE.b	%00000000
     28  27e5				  -	      ifnconst	bmp_48x2_1_PF2
     29  27e5				  -bmp_48x2_1_PF2
     30  27e5					      endif
     31  27e5		       00		      BYTE.b	%00000000
     32  27e6				  -	      ifnconst	bmp_48x2_1_background
     33  27e6				  -bmp_48x2_1_background
     34  27e6					      endif
     35  27e6		       c2		      BYTE.b	$c2
     36  27e7
     37  27e7				  -	      if	>. != >[.+bmp_48x2_1_height]
     38  27e7				  -	      align	256
     39  27e7					      endif
     40  27e7
     41  27e7
     42  27e7				   bmp_48x2_1_00
     43  27e7		       ee		      BYTE.b	%11101110
     44  27e8		       88		      BYTE.b	%10001000
     45  27e9		       8c		      BYTE.b	%10001100
     46  27ea		       88		      BYTE.b	%10001000
     47  27eb		       8e		      BYTE.b	%10001110
     48  27ec		       88		      BYTE.b	%10001000
     49  27ed
     50  27ed				  -	      if	>. != >[.+(bmp_48x2_1_height)]
     51  27ed				  -	      align	256
     52  27ed					      endif
     53  27ed
     54  27ed				   bmp_48x2_1_01
     55  27ed		       4e		      BYTE.b	%01001110
     56  27ee		       48		      BYTE.b	%01001000
     57  27ef		       ac		      BYTE.b	%10101100
     58  27f0		       a8		      BYTE.b	%10101000
     59  27f1		       ae		      BYTE.b	%10101110
     60  27f2		       48		      BYTE.b	%01001000
     61  27f3
     62  27f3				  -	      if	>. != >[.+(bmp_48x2_1_height)]
     63  27f3				  -	      align	256
     64  27f3					      endif
     65  27f3
     66  27f3				   bmp_48x2_1_02
     67  27f3		       e0		      BYTE.b	%11100000
     68  27f4		       80		      BYTE.b	%10000000
     69  27f5		       80		      BYTE.b	%10000000
     70  27f6		       80		      BYTE.b	%10000000
     71  27f7		       80		      BYTE.b	%10000000
     72  27f8		       80		      BYTE.b	%10000000
     73  27f9
     74  27f9				  -	      if	>. != >[.+(bmp_48x2_1_height)]
     75  27f9				  -	      align	256
     76  27f9					      endif
     77  27f9
     78  27f9				   bmp_48x2_1_03
     79  27f9		       00		      BYTE.b	%00000000
     80  27fa		       00		      BYTE.b	%00000000
     81  27fb		       00		      BYTE.b	%00000000
     82  27fc		       00		      BYTE.b	%00000000
     83  27fd		       00		      BYTE.b	%00000000
     84  27fe		       00		      BYTE.b	%00000000
     85  27ff
     86  27ff					      if	>. != >[.+(bmp_48x2_1_height)]
     87  2800		       00		      align	256
     88  2800					      endif
     89  2800
     90  2800				   bmp_48x2_1_04
     91  2800		       00		      BYTE.b	%00000000
     92  2801		       00		      BYTE.b	%00000000
     93  2802		       00		      BYTE.b	%00000000
     94  2803		       00		      BYTE.b	%00000000
     95  2804		       00		      BYTE.b	%00000000
     96  2805		       00		      BYTE.b	%00000000
     97  2806
     98  2806				  -	      if	>. != >[.+(bmp_48x2_1_height)]
     99  2806				  -	      align	256
    100  2806					      endif
    101  2806
    102  2806				   bmp_48x2_1_05
    103  2806		       00		      BYTE.b	%00000000
    104  2807		       00		      BYTE.b	%00000000
    105  2808		       00		      BYTE.b	%00000000
    106  2809		       00		      BYTE.b	%00000000
    107  280a		       00		      BYTE.b	%00000000
    108  280b		       00		      BYTE.b	%00000000
    109  280c
------- FILE titlescreen/asm/titlescreen.asm
    247  280c					      endif
    248  280c				  -	      ifconst	mk_48x2_2_on
    249  280c				  -	      include	"titlescreen/48x2_2_image.asm"
    250  280c					      endif
    251  280c				  -	      ifconst	mk_48x2_3_on
    252  280c				  -	      include	"titlescreen/48x2_3_image.asm"
    253  280c					      endif
    254  280c				  -	      ifconst	mk_48x2_4_on
    255  280c				  -	      include	"titlescreen/48x2_4_image.asm"
    256  280c					      endif
    257  280c				  -	      ifconst	mk_48x2_5_on
    258  280c				  -	      include	"titlescreen/48x2_5_image.asm"
    259  280c					      endif
    260  280c				  -	      ifconst	mk_48x2_6_on
    261  280c				  -	      include	"titlescreen/48x2_6_image.asm"
    262  280c					      endif
    263  280c				  -	      ifconst	mk_48x2_7_on
    264  280c				  -	      include	"titlescreen/48x2_7_image.asm"
    265  280c					      endif
    266  280c
    267  280c				  -	      ifconst	mk_48x2_8_on
    268  280c				  -	      include	"titlescreen/48x2_8_image.asm"
    269  280c					      endif
    270  280c
    271  280c
    272  280c					      ifconst	mk_96x2_1_on
------- FILE titlescreen/96x2_1_image.asm LEVEL 3 PASS 3
      0  280c					      include	"titlescreen/96x2_1_image.asm"
      1  280c
      2  280c							;*** The height of the displayed data...
      3  280c		       00 3c	   bmp_96x2_1_window =	60
      4  280c
      5  280c							;*** The height of the bitmap data. This can be larger than
      6  280c							;*** the displayed data height, if you're scrolling or animating
      7  280c							;*** the data...
      8  280c		       00 3c	   bmp_96x2_1_height =	60
      9  280c
     10  280c
     11  280c				  -	      if	>. != >[.+(bmp_96x2_1_height)]
     12  280c				  -	      align	256
     13  280c					      endif
     14  280c		       00		      BYTE.b	$00	; leave this here!
     15  280d
     16  280d
     17  280d							;*** The color of each line in the bitmap, in reverse order...
     18  280d				   bmp_96x2_1_colors
     19  280d		       0e		      BYTE.b	$0E
     20  280e		       0e		      BYTE.b	$0E
     21  280f		       0e		      BYTE.b	$0E
     22  2810		       0e		      BYTE.b	$0E
     23  2811		       0e		      BYTE.b	$0E
     24  2812		       0e		      BYTE.b	$0E
     25  2813		       0e		      BYTE.b	$0E
     26  2814		       0e		      BYTE.b	$0E
     27  2815		       0e		      BYTE.b	$0E
     28  2816		       0e		      BYTE.b	$0E
     29  2817		       0e		      BYTE.b	$0E
     30  2818		       0e		      BYTE.b	$0E
     31  2819		       0e		      BYTE.b	$0E
     32  281a		       0e		      BYTE.b	$0E
     33  281b		       0e		      BYTE.b	$0E
     34  281c		       0e		      BYTE.b	$0E
     35  281d		       0e		      BYTE.b	$0E
     36  281e		       0e		      BYTE.b	$0E
     37  281f		       0e		      BYTE.b	$0E
     38  2820		       0e		      BYTE.b	$0E
     39  2821		       0e		      BYTE.b	$0E
     40  2822		       0e		      BYTE.b	$0E
     41  2823		       0e		      BYTE.b	$0E
     42  2824		       0e		      BYTE.b	$0E
     43  2825		       0e		      BYTE.b	$0E
     44  2826		       0e		      BYTE.b	$0E
     45  2827		       0e		      BYTE.b	$0E
     46  2828		       0e		      BYTE.b	$0E
     47  2829		       0e		      BYTE.b	$0E
     48  282a		       0e		      BYTE.b	$0E
     49  282b		       0e		      BYTE.b	$0E
     50  282c		       0e		      BYTE.b	$0E
     51  282d		       0e		      BYTE.b	$0E
     52  282e		       0e		      BYTE.b	$0E
     53  282f		       0e		      BYTE.b	$0E
     54  2830		       0e		      BYTE.b	$0E
     55  2831		       0e		      BYTE.b	$0E
     56  2832		       82		      BYTE.b	_82
     57  2833		       82		      BYTE.b	_82
     58  2834		       84		      BYTE.b	_84
     59  2835		       84		      BYTE.b	_84
     60  2836		       88		      BYTE.b	_88
     61  2837		       8a		      BYTE.b	_8A
     62  2838		       8c		      BYTE.b	_8C
     63  2839		       8c		      BYTE.b	_8C
     64  283a		       4a		      BYTE.b	_4A
     65  283b		       4a		      BYTE.b	_4A
     66  283c		       4a		      BYTE.b	_4A
     67  283d		       48		      BYTE.b	_48
     68  283e		       48		      BYTE.b	_48
     69  283f		       48		      BYTE.b	_48
     70  2840		       46		      BYTE.b	_46
     71  2841		       46		      BYTE.b	_46
     72  2842		       46		      BYTE.b	_46
     73  2843		       44		      BYTE.b	_44
     74  2844		       44		      BYTE.b	_44
     75  2845		       44		      BYTE.b	_44
     76  2846		       42		      BYTE.b	_42
     77  2847		       42		      BYTE.b	_42
     78  2848		       42		      BYTE.b	_42
     79  2849
     80  2849
     81  2849				  -	      if	>. != >[.+(bmp_96x2_1_height)]
     82  2849				  -	      align	256
     83  2849					      endif
     84  2849
     85  2849				   bmp_96x2_1_00
     86  2849		       00		      BYTE.b	%00000000
     87  284a		       00		      BYTE.b	%00000000
     88  284b		       00		      BYTE.b	%00000000
     89  284c		       00		      BYTE.b	%00000000
     90  284d		       00		      BYTE.b	%00000000
     91  284e		       00		      BYTE.b	%00000000
     92  284f		       00		      BYTE.b	%00000000
     93  2850		       00		      BYTE.b	%00000000
     94  2851		       00		      BYTE.b	%00000000
     95  2852		       00		      BYTE.b	%00000000
     96  2853		       00		      BYTE.b	%00000000
     97  2854		       00		      BYTE.b	%00000000
     98  2855		       00		      BYTE.b	%00000000
     99  2856		       00		      BYTE.b	%00000000
    100  2857		       00		      BYTE.b	%00000000
    101  2858		       00		      BYTE.b	%00000000
    102  2859		       00		      BYTE.b	%00000000
    103  285a		       00		      BYTE.b	%00000000
    104  285b		       00		      BYTE.b	%00000000
    105  285c		       00		      BYTE.b	%00000000
    106  285d		       00		      BYTE.b	%00000000
    107  285e		       00		      BYTE.b	%00000000
    108  285f		       00		      BYTE.b	%00000000
    109  2860		       00		      BYTE.b	%00000000
    110  2861		       00		      BYTE.b	%00000000
    111  2862		       00		      BYTE.b	%00000000
    112  2863		       00		      BYTE.b	%00000000
    113  2864		       00		      BYTE.b	%00000000
    114  2865		       00		      BYTE.b	%00000000
    115  2866		       00		      BYTE.b	%00000000
    116  2867		       00		      BYTE.b	%00000000
    117  2868		       00		      BYTE.b	%00000000
    118  2869		       00		      BYTE.b	%00000000
    119  286a		       00		      BYTE.b	%00000000
    120  286b		       00		      BYTE.b	%00000000
    121  286c		       00		      BYTE.b	%00000000
    122  286d		       00		      BYTE.b	%00000000
    123  286e		       00		      BYTE.b	%00000000
    124  286f		       00		      BYTE.b	%00000000
    125  2870		       00		      BYTE.b	%00000000
    126  2871		       00		      BYTE.b	%00000000
    127  2872		       00		      BYTE.b	%00000000
    128  2873		       00		      BYTE.b	%00000000
    129  2874		       00		      BYTE.b	%00000000
    130  2875		       00		      BYTE.b	%00000000
    131  2876		       00		      BYTE.b	%00000000
    132  2877		       00		      BYTE.b	%00000000
    133  2878		       00		      BYTE.b	%00000000
    134  2879		       00		      BYTE.b	%00000000
    135  287a		       00		      BYTE.b	%00000000
    136  287b		       00		      BYTE.b	%00000000
    137  287c		       00		      BYTE.b	%00000000
    138  287d		       00		      BYTE.b	%00000000
    139  287e		       00		      BYTE.b	%00000000
    140  287f		       00		      BYTE.b	%00000000
    141  2880		       00		      BYTE.b	%00000000
    142  2881		       00		      BYTE.b	%00000000
    143  2882		       00		      BYTE.b	%00000000
    144  2883		       00		      BYTE.b	%00000000
    145  2884		       00		      BYTE.b	%00000000
    146  2885
    147  2885				  -	      if	>. != >[.+(bmp_96x2_1_height)]
    148  2885				  -	      align	256
    149  2885					      endif
    150  2885
    151  2885				   bmp_96x2_1_01
    152  2885		       0d		      BYTE.b	%00001101
    153  2886		       0d		      BYTE.b	%00001101
    154  2887		       00		      BYTE.b	%00000000
    155  2888		       00		      BYTE.b	%00000000
    156  2889		       00		      BYTE.b	%00000000
    157  288a		       00		      BYTE.b	%00000000
    158  288b		       00		      BYTE.b	%00000000
    159  288c		       01		      BYTE.b	%00000001
    160  288d		       06		      BYTE.b	%00000110
    161  288e		       0e		      BYTE.b	%00001110
    162  288f		       0f		      BYTE.b	%00001111
    163  2890		       0f		      BYTE.b	%00001111
    164  2891		       0e		      BYTE.b	%00001110
    165  2892		       06		      BYTE.b	%00000110
    166  2893		       02		      BYTE.b	%00000010
    167  2894		       01		      BYTE.b	%00000001
    168  2895		       00		      BYTE.b	%00000000
    169  2896		       00		      BYTE.b	%00000000
    170  2897		       00		      BYTE.b	%00000000
    171  2898		       00		      BYTE.b	%00000000
    172  2899		       00		      BYTE.b	%00000000
    173  289a		       00		      BYTE.b	%00000000
    174  289b		       00		      BYTE.b	%00000000
    175  289c		       00		      BYTE.b	%00000000
    176  289d		       00		      BYTE.b	%00000000
    177  289e		       00		      BYTE.b	%00000000
    178  289f		       00		      BYTE.b	%00000000
    179  28a0		       00		      BYTE.b	%00000000
    180  28a1		       00		      BYTE.b	%00000000
    181  28a2		       00		      BYTE.b	%00000000
    182  28a3		       00		      BYTE.b	%00000000
    183  28a4		       00		      BYTE.b	%00000000
    184  28a5		       00		      BYTE.b	%00000000
    185  28a6		       00		      BYTE.b	%00000000
    186  28a7		       00		      BYTE.b	%00000000
    187  28a8		       1f		      BYTE.b	%00011111
    188  28a9		       00		      BYTE.b	%00000000
    189  28aa		       00		      BYTE.b	%00000000
    190  28ab		       00		      BYTE.b	%00000000
    191  28ac		       00		      BYTE.b	%00000000
    192  28ad		       01		      BYTE.b	%00000001
    193  28ae		       01		      BYTE.b	%00000001
    194  28af		       00		      BYTE.b	%00000000
    195  28b0		       01		      BYTE.b	%00000001
    196  28b1		       00		      BYTE.b	%00000000
    197  28b2		       00		      BYTE.b	%00000000
    198  28b3		       03		      BYTE.b	%00000011
    199  28b4		       03		      BYTE.b	%00000011
    200  28b5		       0f		      BYTE.b	%00001111
    201  28b6		       0f		      BYTE.b	%00001111
    202  28b7		       3c		      BYTE.b	%00111100
    203  28b8		       3c		      BYTE.b	%00111100
    204  28b9		       3c		      BYTE.b	%00111100
    205  28ba		       3c		      BYTE.b	%00111100
    206  28bb		       3c		      BYTE.b	%00111100
    207  28bc		       0f		      BYTE.b	%00001111
    208  28bd		       0f		      BYTE.b	%00001111
    209  28be		       03		      BYTE.b	%00000011
    210  28bf		       03		      BYTE.b	%00000011
    211  28c0		       00		      BYTE.b	%00000000
    212  28c1
    213  28c1				  -	      if	>. != >[.+(bmp_96x2_1_height)]
    214  28c1				  -	      align	256
    215  28c1					      endif
    216  28c1
    217  28c1				   bmp_96x2_1_02
    218  28c1		       fe		      BYTE.b	%11111110
    219  28c2		       e0		      BYTE.b	%11100000
    220  28c3		       12		      BYTE.b	%00010010
    221  28c4		       1f		      BYTE.b	%00011111
    222  28c5		       0f		      BYTE.b	%00001111
    223  28c6		       12		      BYTE.b	%00010010
    224  28c7		       60		      BYTE.b	%01100000
    225  28c8		       80		      BYTE.b	%10000000
    226  28c9		       1f		      BYTE.b	%00011111
    227  28ca		       6f		      BYTE.b	%01101111
    228  28cb		       81		      BYTE.b	%10000001
    229  28cc		       80		      BYTE.b	%10000000
    230  28cd		       00		      BYTE.b	%00000000
    231  28ce		       00		      BYTE.b	%00000000
    232  28cf		       00		      BYTE.b	%00000000
    233  28d0		       8c		      BYTE.b	%10001100
    234  28d1		       62		      BYTE.b	%01100010
    235  28d2		       11		      BYTE.b	%00010001
    236  28d3		       0c		      BYTE.b	%00001100
    237  28d4		       02		      BYTE.b	%00000010
    238  28d5		       01		      BYTE.b	%00000001
    239  28d6		       00		      BYTE.b	%00000000
    240  28d7		       00		      BYTE.b	%00000000
    241  28d8		       00		      BYTE.b	%00000000
    242  28d9		       00		      BYTE.b	%00000000
    243  28da		       00		      BYTE.b	%00000000
    244  28db		       00		      BYTE.b	%00000000
    245  28dc		       00		      BYTE.b	%00000000
    246  28dd		       00		      BYTE.b	%00000000
    247  28de		       00		      BYTE.b	%00000000
    248  28df		       00		      BYTE.b	%00000000
    249  28e0		       00		      BYTE.b	%00000000
    250  28e1		       00		      BYTE.b	%00000000
    251  28e2		       00		      BYTE.b	%00000000
    252  28e3		       00		      BYTE.b	%00000000
    253  28e4		       ff		      BYTE.b	%11111111
    254  28e5		       00		      BYTE.b	%00000000
    255  28e6		       00		      BYTE.b	%00000000
    256  28e7		       04		      BYTE.b	%00000100
    257  28e8		       f4		      BYTE.b	%11110100
    258  28e9		       37		      BYTE.b	%00110111
    259  28ea		       94		      BYTE.b	%10010100
    260  28eb		       f4		      BYTE.b	%11110100
    261  28ec		       16		      BYTE.b	%00010110
    262  28ed		       e7		      BYTE.b	%11100111
    263  28ee		       00		      BYTE.b	%00000000
    264  28ef		       fc		      BYTE.b	%11111100
    265  28f0		       fc		      BYTE.b	%11111100
    266  28f1		       0f		      BYTE.b	%00001111
    267  28f2		       0f		      BYTE.b	%00001111
    268  28f3		       00		      BYTE.b	%00000000
    269  28f4		       00		      BYTE.b	%00000000
    270  28f5		       00		      BYTE.b	%00000000
    271  28f6		       00		      BYTE.b	%00000000
    272  28f7		       00		      BYTE.b	%00000000
    273  28f8		       0f		      BYTE.b	%00001111
    274  28f9		       0f		      BYTE.b	%00001111
    275  28fa		       fc		      BYTE.b	%11111100
    276  28fb		       fc		      BYTE.b	%11111100
    277  28fc		       00		      BYTE.b	%00000000
    278  28fd
    279  28fd					      if	>. != >[.+(bmp_96x2_1_height)]
    280  2900		       00 00 00 	      align	256
    281  2900					      endif
    282  2900
    283  2900				   bmp_96x2_1_03
    284  2900		       03		      BYTE.b	%00000011
    285  2901		       0c		      BYTE.b	%00001100
    286  2902		       0c		      BYTE.b	%00001100
    287  2903		       83		      BYTE.b	%10000011
    288  2904		       f0		      BYTE.b	%11110000
    289  2905		       00		      BYTE.b	%00000000
    290  2906		       00		      BYTE.b	%00000000
    291  2907		       00		      BYTE.b	%00000000
    292  2908		       e0		      BYTE.b	%11100000
    293  2909		       ff		      BYTE.b	%11111111
    294  290a		       ff		      BYTE.b	%11111111
    295  290b		       7e		      BYTE.b	%01111110
    296  290c		       0e		      BYTE.b	%00001110
    297  290d		       0f		      BYTE.b	%00001111
    298  290e		       1f		      BYTE.b	%00011111
    299  290f		       13		      BYTE.b	%00010011
    300  2910		       0d		      BYTE.b	%00001101
    301  2911		       8c		      BYTE.b	%10001100
    302  2912		       0c		      BYTE.b	%00001100
    303  2913		       10		      BYTE.b	%00010000
    304  2914		       f0		      BYTE.b	%11110000
    305  2915		       62		      BYTE.b	%01100010
    306  2916		       11		      BYTE.b	%00010001
    307  2917		       0c		      BYTE.b	%00001100
    308  2918		       02		      BYTE.b	%00000010
    309  2919		       01		      BYTE.b	%00000001
    310  291a		       00		      BYTE.b	%00000000
    311  291b		       00		      BYTE.b	%00000000
    312  291c		       00		      BYTE.b	%00000000
    313  291d		       00		      BYTE.b	%00000000
    314  291e		       00		      BYTE.b	%00000000
    315  291f		       00		      BYTE.b	%00000000
    316  2920		       00		      BYTE.b	%00000000
    317  2921		       00		      BYTE.b	%00000000
    318  2922		       00		      BYTE.b	%00000000
    319  2923		       ff		      BYTE.b	%11111111
    320  2924		       00		      BYTE.b	%00000000
    321  2925		       00		      BYTE.b	%00000000
    322  2926		       00		      BYTE.b	%00000000
    323  2927		       0e		      BYTE.b	%00001110
    324  2928		       93		      BYTE.b	%10010011
    325  2929		       d1		      BYTE.b	%11010001
    326  292a		       51		      BYTE.b	%01010001
    327  292b		       59		      BYTE.b	%01011001
    328  292c		       8e		      BYTE.b	%10001110
    329  292d		       00		      BYTE.b	%00000000
    330  292e		       6f		      BYTE.b	%01101111
    331  292f		       6f		      BYTE.b	%01101111
    332  2930		       0f		      BYTE.b	%00001111
    333  2931		       0f		      BYTE.b	%00001111
    334  2932		       0f		      BYTE.b	%00001111
    335  2933		       0f		      BYTE.b	%00001111
    336  2934		       0f		      BYTE.b	%00001111
    337  2935		       0f		      BYTE.b	%00001111
    338  2936		       0f		      BYTE.b	%00001111
    339  2937		       03		      BYTE.b	%00000011
    340  2938		       03		      BYTE.b	%00000011
    341  2939		       00		      BYTE.b	%00000000
    342  293a		       00		      BYTE.b	%00000000
    343  293b		       00		      BYTE.b	%00000000
    344  293c
    345  293c				  -	      if	>. != >[.+(bmp_96x2_1_height)]
    346  293c				  -	      align	256
    347  293c					      endif
    348  293c
    349  293c				   bmp_96x2_1_04
    350  293c		       80		      BYTE.b	%10000000
    351  293d		       00		      BYTE.b	%00000000
    352  293e		       03		      BYTE.b	%00000011
    353  293f		       f3		      BYTE.b	%11110011
    354  2940		       00		      BYTE.b	%00000000
    355  2941		       00		      BYTE.b	%00000000
    356  2942		       00		      BYTE.b	%00000000
    357  2943		       00		      BYTE.b	%00000000
    358  2944		       02		      BYTE.b	%00000010
    359  2945		       81		      BYTE.b	%10000001
    360  2946		       92		      BYTE.b	%10010010
    361  2947		       73		      BYTE.b	%01110011
    362  2948		       73		      BYTE.b	%01110011
    363  2949		       93		      BYTE.b	%10010011
    364  294a		       83		      BYTE.b	%10000011
    365  294b		       e0		      BYTE.b	%11100000
    366  294c		       ff		      BYTE.b	%11111111
    367  294d		       1f		      BYTE.b	%00011111
    368  294e		       0f		      BYTE.b	%00001111
    369  294f		       03		      BYTE.b	%00000011
    370  2950		       02		      BYTE.b	%00000010
    371  2951		       0f		      BYTE.b	%00001111
    372  2952		       8f		      BYTE.b	%10001111
    373  2953		       0f		      BYTE.b	%00001111
    374  2954		       0f		      BYTE.b	%00001111
    375  2955		       8f		      BYTE.b	%10001111
    376  2956		       6f		      BYTE.b	%01101111
    377  2957		       0f		      BYTE.b	%00001111
    378  2958		       1f		      BYTE.b	%00011111
    379  2959		       00		      BYTE.b	%00000000
    380  295a		       03		      BYTE.b	%00000011
    381  295b		       03		      BYTE.b	%00000011
    382  295c		       01		      BYTE.b	%00000001
    383  295d		       01		      BYTE.b	%00000001
    384  295e		       00		      BYTE.b	%00000000
    385  295f		       dd		      BYTE.b	%11011101
    386  2960		       0d		      BYTE.b	%00001101
    387  2961		       00		      BYTE.b	%00000000
    388  2962		       00		      BYTE.b	%00000000
    389  2963		       38		      BYTE.b	%00111000
    390  2964		       4d		      BYTE.b	%01001101
    391  2965		       41		      BYTE.b	%01000001
    392  2966		       40		      BYTE.b	%01000000
    393  2967		       65		      BYTE.b	%01100101
    394  2968		       38		      BYTE.b	%00111000
    395  2969		       00		      BYTE.b	%00000000
    396  296a		       03		      BYTE.b	%00000011
    397  296b		       03		      BYTE.b	%00000011
    398  296c		       03		      BYTE.b	%00000011
    399  296d		       03		      BYTE.b	%00000011
    400  296e		       ff		      BYTE.b	%11111111
    401  296f		       ff		      BYTE.b	%11111111
    402  2970		       03		      BYTE.b	%00000011
    403  2971		       03		      BYTE.b	%00000011
    404  2972		       03		      BYTE.b	%00000011
    405  2973		       cf		      BYTE.b	%11001111
    406  2974		       cf		      BYTE.b	%11001111
    407  2975		       fc		      BYTE.b	%11111100
    408  2976		       fc		      BYTE.b	%11111100
    409  2977		       00		      BYTE.b	%00000000
    410  2978
    411  2978				  -	      if	>. != >[.+(bmp_96x2_1_height)]
    412  2978				  -	      align	256
    413  2978					      endif
    414  2978
    415  2978				   bmp_96x2_1_05
    416  2978		       00		      BYTE.b	%00000000
    417  2979		       00		      BYTE.b	%00000000
    418  297a		       9e		      BYTE.b	%10011110
    419  297b		       ff		      BYTE.b	%11111111
    420  297c		       00		      BYTE.b	%00000000
    421  297d		       00		      BYTE.b	%00000000
    422  297e		       00		      BYTE.b	%00000000
    423  297f		       00		      BYTE.b	%00000000
    424  2980		       6c		      BYTE.b	%01101100
    425  2981		       91		      BYTE.b	%10010001
    426  2982		       6d		      BYTE.b	%01101101
    427  2983		       fd		      BYTE.b	%11111101
    428  2984		       fd		      BYTE.b	%11111101
    429  2985		       fc		      BYTE.b	%11111100
    430  2986		       fc		      BYTE.b	%11111100
    431  2987		       01		      BYTE.b	%00000001
    432  2988		       ff		      BYTE.b	%11111111
    433  2989		       ff		      BYTE.b	%11111111
    434  298a		       ff		      BYTE.b	%11111111
    435  298b		       ff		      BYTE.b	%11111111
    436  298c		       00		      BYTE.b	%00000000
    437  298d		       fe		      BYTE.b	%11111110
    438  298e		       fe		      BYTE.b	%11111110
    439  298f		       fe		      BYTE.b	%11111110
    440  2990		       fe		      BYTE.b	%11111110
    441  2991		       fe		      BYTE.b	%11111110
    442  2992		       fe		      BYTE.b	%11111110
    443  2993		       fe		      BYTE.b	%11111110
    444  2994		       fe		      BYTE.b	%11111110
    445  2995		       00		      BYTE.b	%00000000
    446  2996		       f0		      BYTE.b	%11110000
    447  2997		       f0		      BYTE.b	%11110000
    448  2998		       e0		      BYTE.b	%11100000
    449  2999		       e0		      BYTE.b	%11100000
    450  299a		       00		      BYTE.b	%00000000
    451  299b		       f7		      BYTE.b	%11110111
    452  299c		       f6		      BYTE.b	%11110110
    453  299d		       00		      BYTE.b	%00000000
    454  299e		       00		      BYTE.b	%00000000
    455  299f		       f3		      BYTE.b	%11110011
    456  29a0		       36		      BYTE.b	%00110110
    457  29a1		       94		      BYTE.b	%10010100
    458  29a2		       f4		      BYTE.b	%11110100
    459  29a3		       14		      BYTE.b	%00010100
    460  29a4		       e2		      BYTE.b	%11100010
    461  29a5		       00		      BYTE.b	%00000000
    462  29a6		       d8		      BYTE.b	%11011000
    463  29a7		       d8		      BYTE.b	%11011000
    464  29a8		       c0		      BYTE.b	%11000000
    465  29a9		       c0		      BYTE.b	%11000000
    466  29aa		       c0		      BYTE.b	%11000000
    467  29ab		       c3		      BYTE.b	%11000011
    468  29ac		       c3		      BYTE.b	%11000011
    469  29ad		       c3		      BYTE.b	%11000011
    470  29ae		       c3		      BYTE.b	%11000011
    471  29af		       03		      BYTE.b	%00000011
    472  29b0		       03		      BYTE.b	%00000011
    473  29b1		       03		      BYTE.b	%00000011
    474  29b2		       00		      BYTE.b	%00000000
    475  29b3		       00		      BYTE.b	%00000000
    476  29b4
    477  29b4				  -	      if	>. != >[.+(bmp_96x2_1_height)]
    478  29b4				  -	      align	256
    479  29b4					      endif
    480  29b4
    481  29b4				   bmp_96x2_1_06
    482  29b4		       00		      BYTE.b	%00000000
    483  29b5		       00		      BYTE.b	%00000000
    484  29b6		       00		      BYTE.b	%00000000
    485  29b7		       e0		      BYTE.b	%11100000
    486  29b8		       10		      BYTE.b	%00010000
    487  29b9		       0c		      BYTE.b	%00001100
    488  29ba		       02		      BYTE.b	%00000010
    489  29bb		       01		      BYTE.b	%00000001
    490  29bc		       01		      BYTE.b	%00000001
    491  29bd		       90		      BYTE.b	%10010000
    492  29be		       90		      BYTE.b	%10010000
    493  29bf		       90		      BYTE.b	%10010000
    494  29c0		       8f		      BYTE.b	%10001111
    495  29c1		       10		      BYTE.b	%00010000
    496  29c2		       6f		      BYTE.b	%01101111
    497  29c3		       9f		      BYTE.b	%10011111
    498  29c4		       ff		      BYTE.b	%11111111
    499  29c5		       fe		      BYTE.b	%11111110
    500  29c6		       fd		      BYTE.b	%11111101
    501  29c7		       e1		      BYTE.b	%11100001
    502  29c8		       00		      BYTE.b	%00000000
    503  29c9		       6d		      BYTE.b	%01101101
    504  29ca		       12		      BYTE.b	%00010010
    505  29cb		       6d		      BYTE.b	%01101101
    506  29cc		       7f		      BYTE.b	%01111111
    507  29cd		       7f		      BYTE.b	%01111111
    508  29ce		       7f		      BYTE.b	%01111111
    509  29cf		       7f		      BYTE.b	%01111111
    510  29d0		       0c		      BYTE.b	%00001100
    511  29d1		       00		      BYTE.b	%00000000
    512  29d2		       00		      BYTE.b	%00000000
    513  29d3		       00		      BYTE.b	%00000000
    514  29d4		       00		      BYTE.b	%00000000
    515  29d5		       00		      BYTE.b	%00000000
    516  29d6		       00		      BYTE.b	%00000000
    517  29d7		       7f		      BYTE.b	%01111111
    518  29d8		       00		      BYTE.b	%00000000
    519  29d9		       0e		      BYTE.b	%00001110
    520  29da		       01		      BYTE.b	%00000001
    521  29db		       81		      BYTE.b	%10000001
    522  29dc		       4f		      BYTE.b	%01001111
    523  29dd		       1b		      BYTE.b	%00011011
    524  29de		       11		      BYTE.b	%00010001
    525  29df		       11		      BYTE.b	%00010001
    526  29e0		       00		      BYTE.b	%00000000
    527  29e1		       0c		      BYTE.b	%00001100
    528  29e2		       0c		      BYTE.b	%00001100
    529  29e3		       3f		      BYTE.b	%00111111
    530  29e4		       3f		      BYTE.b	%00111111
    531  29e5		       ff		      BYTE.b	%11111111
    532  29e6		       ff		      BYTE.b	%11111111
    533  29e7		       f3		      BYTE.b	%11110011
    534  29e8		       f3		      BYTE.b	%11110011
    535  29e9		       c0		      BYTE.b	%11000000
    536  29ea		       c0		      BYTE.b	%11000000
    537  29eb		       c0		      BYTE.b	%11000000
    538  29ec		       c0		      BYTE.b	%11000000
    539  29ed		       c0		      BYTE.b	%11000000
    540  29ee		       00		      BYTE.b	%00000000
    541  29ef		       00		      BYTE.b	%00000000
    542  29f0
    543  29f0					      if	>. != >[.+(bmp_96x2_1_height)]
    544  2a00		       00 00 00 00*	      align	256
    545  2a00					      endif
    546  2a00
    547  2a00				   bmp_96x2_1_07
    548  2a00		       00		      BYTE.b	%00000000
    549  2a01		       00		      BYTE.b	%00000000
    550  2a02		       00		      BYTE.b	%00000000
    551  2a03		       00		      BYTE.b	%00000000
    552  2a04		       00		      BYTE.b	%00000000
    553  2a05		       00		      BYTE.b	%00000000
    554  2a06		       00		      BYTE.b	%00000000
    555  2a07		       80		      BYTE.b	%10000000
    556  2a08		       80		      BYTE.b	%10000000
    557  2a09		       60		      BYTE.b	%01100000
    558  2a0a		       10		      BYTE.b	%00010000
    559  2a0b		       0e		      BYTE.b	%00001110
    560  2a0c		       fe		      BYTE.b	%11111110
    561  2a0d		       1f		      BYTE.b	%00011111
    562  2a0e		       f0		      BYTE.b	%11110000
    563  2a0f		       ef		      BYTE.b	%11101111
    564  2a10		       9e		      BYTE.b	%10011110
    565  2a11		       7e		      BYTE.b	%01111110
    566  2a12		       fc		      BYTE.b	%11111100
    567  2a13		       e0		      BYTE.b	%11100000
    568  2a14		       00		      BYTE.b	%00000000
    569  2a15		       80		      BYTE.b	%10000000
    570  2a16		       00		      BYTE.b	%00000000
    571  2a17		       90		      BYTE.b	%10010000
    572  2a18		       9c		      BYTE.b	%10011100
    573  2a19		       9c		      BYTE.b	%10011100
    574  2a1a		       90		      BYTE.b	%10010000
    575  2a1b		       80		      BYTE.b	%10000000
    576  2a1c		       00		      BYTE.b	%00000000
    577  2a1d		       00		      BYTE.b	%00000000
    578  2a1e		       00		      BYTE.b	%00000000
    579  2a1f		       00		      BYTE.b	%00000000
    580  2a20		       00		      BYTE.b	%00000000
    581  2a21		       00		      BYTE.b	%00000000
    582  2a22		       00		      BYTE.b	%00000000
    583  2a23		       ff		      BYTE.b	%11111111
    584  2a24		       00		      BYTE.b	%00000000
    585  2a25		       40		      BYTE.b	%01000000
    586  2a26		       41		      BYTE.b	%01000001
    587  2a27		       79		      BYTE.b	%01111001
    588  2a28		       4c		      BYTE.b	%01001100
    589  2a29		       45		      BYTE.b	%01000101
    590  2a2a		       65		      BYTE.b	%01100101
    591  2a2b		       78		      BYTE.b	%01111000
    592  2a2c		       00		      BYTE.b	%00000000
    593  2a2d		       01		      BYTE.b	%00000001
    594  2a2e		       0d		      BYTE.b	%00001101
    595  2a2f		       0d		      BYTE.b	%00001101
    596  2a30		       01		      BYTE.b	%00000001
    597  2a31		       c1		      BYTE.b	%11000001
    598  2a32		       c1		      BYTE.b	%11000001
    599  2a33		       e1		      BYTE.b	%11100001
    600  2a34		       e1		      BYTE.b	%11100001
    601  2a35		       e1		      BYTE.b	%11100001
    602  2a36		       e1		      BYTE.b	%11100001
    603  2a37		       e1		      BYTE.b	%11100001
    604  2a38		       e1		      BYTE.b	%11100001
    605  2a39		       e1		      BYTE.b	%11100001
    606  2a3a		       00		      BYTE.b	%00000000
    607  2a3b		       00		      BYTE.b	%00000000
    608  2a3c
    609  2a3c				  -	      if	>. != >[.+(bmp_96x2_1_height)]
    610  2a3c				  -	      align	256
    611  2a3c					      endif
    612  2a3c
    613  2a3c				   bmp_96x2_1_08
    614  2a3c		       00		      BYTE.b	%00000000
    615  2a3d		       00		      BYTE.b	%00000000
    616  2a3e		       00		      BYTE.b	%00000000
    617  2a3f		       00		      BYTE.b	%00000000
    618  2a40		       00		      BYTE.b	%00000000
    619  2a41		       00		      BYTE.b	%00000000
    620  2a42		       00		      BYTE.b	%00000000
    621  2a43		       00		      BYTE.b	%00000000
    622  2a44		       00		      BYTE.b	%00000000
    623  2a45		       00		      BYTE.b	%00000000
    624  2a46		       00		      BYTE.b	%00000000
    625  2a47		       7f		      BYTE.b	%01111111
    626  2a48		       00		      BYTE.b	%00000000
    627  2a49		       ff		      BYTE.b	%11111111
    628  2a4a		       00		      BYTE.b	%00000000
    629  2a4b		       fe		      BYTE.b	%11111110
    630  2a4c		       7f		      BYTE.b	%01111111
    631  2a4d		       01		      BYTE.b	%00000001
    632  2a4e		       00		      BYTE.b	%00000000
    633  2a4f		       00		      BYTE.b	%00000000
    634  2a50		       00		      BYTE.b	%00000000
    635  2a51		       00		      BYTE.b	%00000000
    636  2a52		       00		      BYTE.b	%00000000
    637  2a53		       00		      BYTE.b	%00000000
    638  2a54		       00		      BYTE.b	%00000000
    639  2a55		       00		      BYTE.b	%00000000
    640  2a56		       00		      BYTE.b	%00000000
    641  2a57		       00		      BYTE.b	%00000000
    642  2a58		       00		      BYTE.b	%00000000
    643  2a59		       00		      BYTE.b	%00000000
    644  2a5a		       00		      BYTE.b	%00000000
    645  2a5b		       00		      BYTE.b	%00000000
    646  2a5c		       00		      BYTE.b	%00000000
    647  2a5d		       00		      BYTE.b	%00000000
    648  2a5e		       00		      BYTE.b	%00000000
    649  2a5f		       ff		      BYTE.b	%11111111
    650  2a60		       00		      BYTE.b	%00000000
    651  2a61		       00		      BYTE.b	%00000000
    652  2a62		       e3		      BYTE.b	%11100011
    653  2a63		       16		      BYTE.b	%00010110
    654  2a64		       37		      BYTE.b	%00110111
    655  2a65		       e5		      BYTE.b	%11100101
    656  2a66		       14		      BYTE.b	%00010100
    657  2a67		       e3		      BYTE.b	%11100011
    658  2a68		       00		      BYTE.b	%00000000
    659  2a69		       ff		      BYTE.b	%11111111
    660  2a6a		       ff		      BYTE.b	%11111111
    661  2a6b		       e0		      BYTE.b	%11100000
    662  2a6c		       e0		      BYTE.b	%11100000
    663  2a6d		       e0		      BYTE.b	%11100000
    664  2a6e		       e0		      BYTE.b	%11100000
    665  2a6f		       ff		      BYTE.b	%11111111
    666  2a70		       ff		      BYTE.b	%11111111
    667  2a71		       e0		      BYTE.b	%11100000
    668  2a72		       e0		      BYTE.b	%11100000
    669  2a73		       e0		      BYTE.b	%11100000
    670  2a74		       ff		      BYTE.b	%11111111
    671  2a75		       ff		      BYTE.b	%11111111
    672  2a76		       00		      BYTE.b	%00000000
    673  2a77		       00		      BYTE.b	%00000000
    674  2a78
    675  2a78				  -	      if	>. != >[.+(bmp_96x2_1_height)]
    676  2a78				  -	      align	256
    677  2a78					      endif
    678  2a78
    679  2a78				   bmp_96x2_1_09
    680  2a78		       00		      BYTE.b	%00000000
    681  2a79		       00		      BYTE.b	%00000000
    682  2a7a		       00		      BYTE.b	%00000000
    683  2a7b		       00		      BYTE.b	%00000000
    684  2a7c		       00		      BYTE.b	%00000000
    685  2a7d		       00		      BYTE.b	%00000000
    686  2a7e		       00		      BYTE.b	%00000000
    687  2a7f		       00		      BYTE.b	%00000000
    688  2a80		       7c		      BYTE.b	%01111100
    689  2a81		       7c		      BYTE.b	%01111100
    690  2a82		       7e		      BYTE.b	%01111110
    691  2a83		       ff		      BYTE.b	%11111111
    692  2a84		       0f		      BYTE.b	%00001111
    693  2a85		       e0		      BYTE.b	%11100000
    694  2a86		       0c		      BYTE.b	%00001100
    695  2a87		       0c		      BYTE.b	%00001100
    696  2a88		       82		      BYTE.b	%10000010
    697  2a89		       81		      BYTE.b	%10000001
    698  2a8a		       61		      BYTE.b	%01100001
    699  2a8b		       10		      BYTE.b	%00010000
    700  2a8c		       0d		      BYTE.b	%00001101
    701  2a8d		       0d		      BYTE.b	%00001101
    702  2a8e		       01		      BYTE.b	%00000001
    703  2a8f		       03		      BYTE.b	%00000011
    704  2a90		       03		      BYTE.b	%00000011
    705  2a91		       01		      BYTE.b	%00000001
    706  2a92		       01		      BYTE.b	%00000001
    707  2a93		       01		      BYTE.b	%00000001
    708  2a94		       01		      BYTE.b	%00000001
    709  2a95		       01		      BYTE.b	%00000001
    710  2a96		       00		      BYTE.b	%00000000
    711  2a97		       00		      BYTE.b	%00000000
    712  2a98		       00		      BYTE.b	%00000000
    713  2a99		       00		      BYTE.b	%00000000
    714  2a9a		       00		      BYTE.b	%00000000
    715  2a9b		       e0		      BYTE.b	%11100000
    716  2a9c		       00		      BYTE.b	%00000000
    717  2a9d		       00		      BYTE.b	%00000000
    718  2a9e		       80		      BYTE.b	%10000000
    719  2a9f		       c0		      BYTE.b	%11000000
    720  2aa0		       20		      BYTE.b	%00100000
    721  2aa1		       80		      BYTE.b	%10000000
    722  2aa2		       c0		      BYTE.b	%11000000
    723  2aa3		       80		      BYTE.b	%10000000
    724  2aa4		       00		      BYTE.b	%00000000
    725  2aa5		       f8		      BYTE.b	%11111000
    726  2aa6		       fb		      BYTE.b	%11111011
    727  2aa7		       03		      BYTE.b	%00000011
    728  2aa8		       00		      BYTE.b	%00000000
    729  2aa9		       00		      BYTE.b	%00000000
    730  2aaa		       00		      BYTE.b	%00000000
    731  2aab		       80		      BYTE.b	%10000000
    732  2aac		       80		      BYTE.b	%10000000
    733  2aad		       00		      BYTE.b	%00000000
    734  2aae		       00		      BYTE.b	%00000000
    735  2aaf		       00		      BYTE.b	%00000000
    736  2ab0		       f8		      BYTE.b	%11111000
    737  2ab1		       f8		      BYTE.b	%11111000
    738  2ab2		       00		      BYTE.b	%00000000
    739  2ab3		       00		      BYTE.b	%00000000
    740  2ab4
    741  2ab4				  -	      if	>. != >[.+(bmp_96x2_1_height)]
    742  2ab4				  -	      align	256
    743  2ab4					      endif
    744  2ab4
    745  2ab4				   bmp_96x2_1_10
    746  2ab4		       00		      BYTE.b	%00000000
    747  2ab5		       00		      BYTE.b	%00000000
    748  2ab6		       00		      BYTE.b	%00000000
    749  2ab7		       00		      BYTE.b	%00000000
    750  2ab8		       00		      BYTE.b	%00000000
    751  2ab9		       00		      BYTE.b	%00000000
    752  2aba		       00		      BYTE.b	%00000000
    753  2abb		       00		      BYTE.b	%00000000
    754  2abc		       00		      BYTE.b	%00000000
    755  2abd		       00		      BYTE.b	%00000000
    756  2abe		       00		      BYTE.b	%00000000
    757  2abf		       80		      BYTE.b	%10000000
    758  2ac0		       e0		      BYTE.b	%11100000
    759  2ac1		       70		      BYTE.b	%01110000
    760  2ac2		       1e		      BYTE.b	%00011110
    761  2ac3		       0e		      BYTE.b	%00001110
    762  2ac4		       0e		      BYTE.b	%00001110
    763  2ac5		       8c		      BYTE.b	%10001100
    764  2ac6		       90		      BYTE.b	%10010000
    765  2ac7		       70		      BYTE.b	%01110000
    766  2ac8		       f0		      BYTE.b	%11110000
    767  2ac9		       f0		      BYTE.b	%11110000
    768  2aca		       f0		      BYTE.b	%11110000
    769  2acb		       f0		      BYTE.b	%11110000
    770  2acc		       f0		      BYTE.b	%11110000
    771  2acd		       f0		      BYTE.b	%11110000
    772  2ace		       f0		      BYTE.b	%11110000
    773  2acf		       fc		      BYTE.b	%11111100
    774  2ad0		       fc		      BYTE.b	%11111100
    775  2ad1		       fc		      BYTE.b	%11111100
    776  2ad2		       7c		      BYTE.b	%01111100
    777  2ad3		       7c		      BYTE.b	%01111100
    778  2ad4		       7e		      BYTE.b	%01111110
    779  2ad5		       1e		      BYTE.b	%00011110
    780  2ad6		       00		      BYTE.b	%00000000
    781  2ad7		       00		      BYTE.b	%00000000
    782  2ad8		       00		      BYTE.b	%00000000
    783  2ad9		       00		      BYTE.b	%00000000
    784  2ada		       00		      BYTE.b	%00000000
    785  2adb		       00		      BYTE.b	%00000000
    786  2adc		       00		      BYTE.b	%00000000
    787  2add		       00		      BYTE.b	%00000000
    788  2ade		       00		      BYTE.b	%00000000
    789  2adf		       00		      BYTE.b	%00000000
    790  2ae0		       00		      BYTE.b	%00000000
    791  2ae1		       00		      BYTE.b	%00000000
    792  2ae2		       00		      BYTE.b	%00000000
    793  2ae3		       00		      BYTE.b	%00000000
    794  2ae4		       00		      BYTE.b	%00000000
    795  2ae5		       00		      BYTE.b	%00000000
    796  2ae6		       00		      BYTE.b	%00000000
    797  2ae7		       00		      BYTE.b	%00000000
    798  2ae8		       00		      BYTE.b	%00000000
    799  2ae9		       00		      BYTE.b	%00000000
    800  2aea		       00		      BYTE.b	%00000000
    801  2aeb		       00		      BYTE.b	%00000000
    802  2aec		       00		      BYTE.b	%00000000
    803  2aed		       00		      BYTE.b	%00000000
    804  2aee		       00		      BYTE.b	%00000000
    805  2aef		       00		      BYTE.b	%00000000
    806  2af0
    807  2af0					      if	>. != >[.+(bmp_96x2_1_height)]
    808  2b00		       00 00 00 00*	      align	256
    809  2b00					      endif
    810  2b00
    811  2b00				   bmp_96x2_1_11
    812  2b00		       00		      BYTE.b	%00000000
    813  2b01		       00		      BYTE.b	%00000000
    814  2b02		       00		      BYTE.b	%00000000
    815  2b03		       00		      BYTE.b	%00000000
    816  2b04		       00		      BYTE.b	%00000000
    817  2b05		       00		      BYTE.b	%00000000
    818  2b06		       00		      BYTE.b	%00000000
    819  2b07		       00		      BYTE.b	%00000000
    820  2b08		       00		      BYTE.b	%00000000
    821  2b09		       00		      BYTE.b	%00000000
    822  2b0a		       00		      BYTE.b	%00000000
    823  2b0b		       00		      BYTE.b	%00000000
    824  2b0c		       00		      BYTE.b	%00000000
    825  2b0d		       00		      BYTE.b	%00000000
    826  2b0e		       00		      BYTE.b	%00000000
    827  2b0f		       00		      BYTE.b	%00000000
    828  2b10		       00		      BYTE.b	%00000000
    829  2b11		       00		      BYTE.b	%00000000
    830  2b12		       00		      BYTE.b	%00000000
    831  2b13		       00		      BYTE.b	%00000000
    832  2b14		       00		      BYTE.b	%00000000
    833  2b15		       00		      BYTE.b	%00000000
    834  2b16		       00		      BYTE.b	%00000000
    835  2b17		       00		      BYTE.b	%00000000
    836  2b18		       00		      BYTE.b	%00000000
    837  2b19		       00		      BYTE.b	%00000000
    838  2b1a		       00		      BYTE.b	%00000000
    839  2b1b		       00		      BYTE.b	%00000000
    840  2b1c		       00		      BYTE.b	%00000000
    841  2b1d		       00		      BYTE.b	%00000000
    842  2b1e		       00		      BYTE.b	%00000000
    843  2b1f		       00		      BYTE.b	%00000000
    844  2b20		       00		      BYTE.b	%00000000
    845  2b21		       00		      BYTE.b	%00000000
    846  2b22		       00		      BYTE.b	%00000000
    847  2b23		       00		      BYTE.b	%00000000
    848  2b24		       00		      BYTE.b	%00000000
    849  2b25		       00		      BYTE.b	%00000000
    850  2b26		       00		      BYTE.b	%00000000
    851  2b27		       00		      BYTE.b	%00000000
    852  2b28		       00		      BYTE.b	%00000000
    853  2b29		       00		      BYTE.b	%00000000
    854  2b2a		       00		      BYTE.b	%00000000
    855  2b2b		       00		      BYTE.b	%00000000
    856  2b2c		       00		      BYTE.b	%00000000
    857  2b2d		       00		      BYTE.b	%00000000
    858  2b2e		       00		      BYTE.b	%00000000
    859  2b2f		       00		      BYTE.b	%00000000
    860  2b30		       00		      BYTE.b	%00000000
    861  2b31		       00		      BYTE.b	%00000000
    862  2b32		       00		      BYTE.b	%00000000
    863  2b33		       00		      BYTE.b	%00000000
    864  2b34		       00		      BYTE.b	%00000000
    865  2b35		       00		      BYTE.b	%00000000
    866  2b36		       00		      BYTE.b	%00000000
    867  2b37		       00		      BYTE.b	%00000000
    868  2b38		       00		      BYTE.b	%00000000
    869  2b39		       00		      BYTE.b	%00000000
    870  2b3a		       00		      BYTE.b	%00000000
    871  2b3b		       00		      BYTE.b	%00000000
    872  2b3c
------- FILE titlescreen/asm/titlescreen.asm
    274  2b3c					      endif
    275  2b3c				  -	      ifconst	mk_96x2_2_on
    276  2b3c				  -	      include	"titlescreen/96x2_2_image.asm"
    277  2b3c					      endif
    278  2b3c				  -	      ifconst	mk_96x2_3_on
    279  2b3c				  -	      include	"titlescreen/96x2_3_image.asm"
    280  2b3c					      endif
    281  2b3c				  -	      ifconst	mk_96x2_4_on
    282  2b3c				  -	      include	"titlescreen/96x2_4_image.asm"
    283  2b3c					      endif
    284  2b3c				  -	      ifconst	mk_96x2_5_on
    285  2b3c				  -	      include	"titlescreen/96x2_5_image.asm"
    286  2b3c					      endif
    287  2b3c				  -	      ifconst	mk_96x2_6_on
    288  2b3c				  -	      include	"titlescreen/96x2_6_image.asm"
    289  2b3c					      endif
    290  2b3c				  -	      ifconst	mk_96x2_7_on
    291  2b3c				  -	      include	"titlescreen/96x2_7_image.asm"
    292  2b3c					      endif
    293  2b3c				  -	      ifconst	mk_96x2_8_on
    294  2b3c				  -	      include	"titlescreen/96x2_8_image.asm"
    295  2b3c					      endif
    296  2b3c
    297  2b3c				  -	      ifconst	mk_player_on
    298  2b3c				  -	      include	"titlescreen/player_image.asm"
    299  2b3c					      endif
    300  2b3c
    301  2b3c					      ifconst	mk_score_on
------- FILE titlescreen/score_image.asm LEVEL 3 PASS 3
      0  2b3c					      include	"titlescreen/score_image.asm"
      1  2b3c							; feel free to modify the score graphics - just keep each digit 8 high
      2  2b3c							; if you're looking to want to modify any one font, pick on the
      3  2b3c
      4  2b3c				  -	      ifnconst	scorecolor
      5  2b3c				  -scorecolor
      6  2b3c					      endif
      7  2b3c							; ** change this value for a different scorecolor under DPC+
      8  2b3c							;    for other kernels, just use the scorecolor variable
      9  2b3c		       0f		      .byte.b	$0f
     10  2b3d
     11  2b3d				  -	      ifnconst	NOFONT
     12  2b3d				  -NOFONT     =	0
     13  2b3d					      endif
     14  2b3d				  -	      ifnconst	STOCK
     15  2b3d				  -STOCK      =	1	;_FONTNAME
     16  2b3d					      endif
     17  2b3d				  -	      ifnconst	NEWCENTURY
     18  2b3d				  -NEWCENTURY =	2	;_FONTNAME
     19  2b3d					      endif
     20  2b3d				  -	      ifnconst	WHIMSEY
     21  2b3d				  -WHIMSEY    =	3	;_FONTNAME
     22  2b3d					      endif
     23  2b3d				  -	      ifnconst	ALARMCLOCK
     24  2b3d				  -ALARMCLOCK =	4	;_FONTNAME
     25  2b3d					      endif
     26  2b3d				  -	      ifnconst	HANDWRITTEN
     27  2b3d				  -HANDWRITTEN =	5	;_FONTNAME
     28  2b3d					      endif
     29  2b3d				  -	      ifnconst	INTERRUPTED
     30  2b3d				  -INTERRUPTED =	6	;_FONTNAME
     31  2b3d					      endif
     32  2b3d				  -	      ifnconst	TINY
     33  2b3d				  -TINY       =	7	;_FONTNAME
     34  2b3d					      endif
     35  2b3d				  -	      ifnconst	RETROPUTER
     36  2b3d				  -RETROPUTER =	8	;_FONTNAME
     37  2b3d					      endif
     38  2b3d				  -	      ifnconst	CURVES
     39  2b3d				  -CURVES     =	9	;_FONTNAME
     40  2b3d					      endif
     41  2b3d				  -	      ifnconst	HUSKY
     42  2b3d				  -HUSKY      =	10	;_FONTNAME
     43  2b3d					      endif
     44  2b3d				  -	      ifnconst	SNAKE
     45  2b3d				  -SNAKE      =	11	;_FONTNAME
     46  2b3d					      endif
     47  2b3d				  -	      ifnconst	PLOK
     48  2b3d				  -PLOK       =	13	;_FONTNAME
     49  2b3d					      endif
     50  2b3d
     51  2b3d				  -	      ifnconst	SYMBOLS
     52  2b3d				  -SYMBOLS    =	0	;_FONTNAME
     53  2b3d					      endif
     54  2b3d
     55  2b3d							; ### setup some defaults
     56  2b3d				  -	      ifnconst	fontstyle
     57  2b3d				  -fontstyle  =	STOCK
     58  2b3d					      endif
     59  2b3d
     60  2b3d							;fix up the table alignment, if necessary
     61  2b3d				  -	      if	>. != >[.+81]
     62  2b3d				  -	      align	256
     63  2b3d					      endif
     64  2b3d
     65  2b3d
     66  2b3d				   miniscoretable
     67  2b3d
     68  2b3d					      if	fontstyle == STOCK
     69  2b3d
     70  2b3d							;byte %00000000 ; STOCK
     71  2b3d
     72  2b3d		       3c		      .byte.b	%00111100	; STOCK
     73  2b3e		       66		      .byte.b	%01100110	; STOCK
     74  2b3f		       66		      .byte.b	%01100110	; STOCK
     75  2b40		       66		      .byte.b	%01100110	; STOCK
     76  2b41		       66		      .byte.b	%01100110	; STOCK
     77  2b42		       66		      .byte.b	%01100110	; STOCK
     78  2b43		       66		      .byte.b	%01100110	; STOCK
     79  2b44		       3c		      .byte.b	%00111100	; STOCK
     80  2b45
     81  2b45							;byte %00000000 ; STOCK
     82  2b45
     83  2b45		       7e		      .byte.b	%01111110	; STOCK
     84  2b46		       18		      .byte.b	%00011000	; STOCK
     85  2b47		       18		      .byte.b	%00011000	; STOCK
     86  2b48		       18		      .byte.b	%00011000	; STOCK
     87  2b49		       18		      .byte.b	%00011000	; STOCK
     88  2b4a		       38		      .byte.b	%00111000	; STOCK
     89  2b4b		       18		      .byte.b	%00011000	; STOCK
     90  2b4c		       08		      .byte.b	%00001000	; STOCK
     91  2b4d
     92  2b4d							;byte %00000000 ; STOCK
     93  2b4d
     94  2b4d		       7e		      .byte.b	%01111110	; STOCK
     95  2b4e		       60		      .byte.b	%01100000	; STOCK
     96  2b4f		       60		      .byte.b	%01100000	; STOCK
     97  2b50		       3c		      .byte.b	%00111100	; STOCK
     98  2b51		       06		      .byte.b	%00000110	; STOCK
     99  2b52		       06		      .byte.b	%00000110	; STOCK
    100  2b53		       46		      .byte.b	%01000110	; STOCK
    101  2b54		       3c		      .byte.b	%00111100	; STOCK
    102  2b55
    103  2b55							;byte %00000000 ; STOCK
    104  2b55
    105  2b55		       3c		      .byte.b	%00111100	; STOCK
    106  2b56		       46		      .byte.b	%01000110	; STOCK
    107  2b57		       06		      .byte.b	%00000110	; STOCK
    108  2b58		       06		      .byte.b	%00000110	; STOCK
    109  2b59		       1c		      .byte.b	%00011100	; STOCK
    110  2b5a		       06		      .byte.b	%00000110	; STOCK
    111  2b5b		       46		      .byte.b	%01000110	; STOCK
    112  2b5c		       3c		      .byte.b	%00111100	; STOCK
    113  2b5d
    114  2b5d							;byte %00000000 ; STOCK
    115  2b5d
    116  2b5d		       0c		      .byte.b	%00001100	; STOCK
    117  2b5e		       0c		      .byte.b	%00001100	; STOCK
    118  2b5f		       7e		      .byte.b	%01111110	; STOCK
    119  2b60		       4c		      .byte.b	%01001100	; STOCK
    120  2b61		       4c		      .byte.b	%01001100	; STOCK
    121  2b62		       2c		      .byte.b	%00101100	; STOCK
    122  2b63		       1c		      .byte.b	%00011100	; STOCK
    123  2b64		       0c		      .byte.b	%00001100	; STOCK
    124  2b65
    125  2b65							;byte %00000000 ; STOCK
    126  2b65
    127  2b65		       3c		      .byte.b	%00111100	; STOCK
    128  2b66		       46		      .byte.b	%01000110	; STOCK
    129  2b67		       06		      .byte.b	%00000110	; STOCK
    130  2b68		       06		      .byte.b	%00000110	; STOCK
    131  2b69		       3c		      .byte.b	%00111100	; STOCK
    132  2b6a		       60		      .byte.b	%01100000	; STOCK
    133  2b6b		       60		      .byte.b	%01100000	; STOCK
    134  2b6c		       7e		      .byte.b	%01111110	; STOCK
    135  2b6d
    136  2b6d							;byte %00000000 ; STOCK
    137  2b6d
    138  2b6d		       3c		      .byte.b	%00111100	; STOCK
    139  2b6e		       66		      .byte.b	%01100110	; STOCK
    140  2b6f		       66		      .byte.b	%01100110	; STOCK
    141  2b70		       66		      .byte.b	%01100110	; STOCK
    142  2b71		       7c		      .byte.b	%01111100	; STOCK
    143  2b72		       60		      .byte.b	%01100000	; STOCK
    144  2b73		       62		      .byte.b	%01100010	; STOCK
    145  2b74		       3c		      .byte.b	%00111100	; STOCK
    146  2b75
    147  2b75							;byte %00000000 ; STOCK
    148  2b75
    149  2b75		       30		      .byte.b	%00110000	; STOCK
    150  2b76		       30		      .byte.b	%00110000	; STOCK
    151  2b77		       30		      .byte.b	%00110000	; STOCK
    152  2b78		       18		      .byte.b	%00011000	; STOCK
    153  2b79		       0c		      .byte.b	%00001100	; STOCK
    154  2b7a		       06		      .byte.b	%00000110	; STOCK
    155  2b7b		       42		      .byte.b	%01000010	; STOCK
    156  2b7c		       3e		      .byte.b	%00111110	; STOCK
    157  2b7d
    158  2b7d							;byte %00000000 ; STOCK
    159  2b7d
    160  2b7d		       3c		      .byte.b	%00111100	; STOCK
    161  2b7e		       66		      .byte.b	%01100110	; STOCK
    162  2b7f		       66		      .byte.b	%01100110	; STOCK
    163  2b80		       66		      .byte.b	%01100110	; STOCK
    164  2b81		       3c		      .byte.b	%00111100	; STOCK
    165  2b82		       66		      .byte.b	%01100110	; STOCK
    166  2b83		       66		      .byte.b	%01100110	; STOCK
    167  2b84		       3c		      .byte.b	%00111100	; STOCK
    168  2b85
    169  2b85							;byte %00000000 ; STOCK
    170  2b85
    171  2b85		       3c		      .byte.b	%00111100	; STOCK
    172  2b86		       46		      .byte.b	%01000110	; STOCK
    173  2b87		       06		      .byte.b	%00000110	; STOCK
    174  2b88		       3e		      .byte.b	%00111110	; STOCK
    175  2b89		       66		      .byte.b	%01100110	; STOCK
    176  2b8a		       66		      .byte.b	%01100110	; STOCK
    177  2b8b		       66		      .byte.b	%01100110	; STOCK
    178  2b8c		       3c		      .byte.b	%00111100	; STOCK
    179  2b8d
    180  2b8d					      endif		; STOCK
    181  2b8d
    182  2b8d				  -	      if	fontstyle == NEWCENTURY
    183  2b8d				  -			;byte %00000000 ; NEWCENTURY
    184  2b8d				  -
    185  2b8d				  -	      .byte	%00111100	; NEWCENTURY
    186  2b8d				  -	      .byte	%01000010	; NEWCENTURY
    187  2b8d				  -	      .byte	%01000010	; NEWCENTURY
    188  2b8d				  -	      .byte	%01000010	; NEWCENTURY
    189  2b8d				  -	      .byte	%00100100	; NEWCENTURY
    190  2b8d				  -	      .byte	%00100100	; NEWCENTURY
    191  2b8d				  -	      .byte	%00100100	; NEWCENTURY
    192  2b8d				  -	      .byte	%00011000	; NEWCENTURY
    193  2b8d				  -
    194  2b8d				  -			;byte %00000000 ; NEWCENTURY
    195  2b8d				  -
    196  2b8d				  -	      .byte	%00001000	; NEWCENTURY
    197  2b8d				  -	      .byte	%00001000	; NEWCENTURY
    198  2b8d				  -	      .byte	%00001000	; NEWCENTURY
    199  2b8d				  -	      .byte	%00001000	; NEWCENTURY
    200  2b8d				  -	      .byte	%00001000	; NEWCENTURY
    201  2b8d				  -	      .byte	%00001000	; NEWCENTURY
    202  2b8d				  -	      .byte	%00001000	; NEWCENTURY
    203  2b8d				  -	      .byte	%00001000	; NEWCENTURY
    204  2b8d				  -
    205  2b8d				  -			;byte %00000000 ; NEWCENTURY
    206  2b8d				  -
    207  2b8d				  -	      .byte	%01111110	; NEWCENTURY
    208  2b8d				  -	      .byte	%01000000	; NEWCENTURY
    209  2b8d				  -	      .byte	%01000000	; NEWCENTURY
    210  2b8d				  -	      .byte	%00100000	; NEWCENTURY
    211  2b8d				  -	      .byte	%00011100	; NEWCENTURY
    212  2b8d				  -	      .byte	%00000010	; NEWCENTURY
    213  2b8d				  -	      .byte	%00000010	; NEWCENTURY
    214  2b8d				  -	      .byte	%00011100	; NEWCENTURY
    215  2b8d				  -
    216  2b8d				  -			;byte %00000000 ; NEWCENTURY
    217  2b8d				  -
    218  2b8d				  -	      .byte	%01111100	; NEWCENTURY
    219  2b8d				  -	      .byte	%00000010	; NEWCENTURY
    220  2b8d				  -	      .byte	%00000010	; NEWCENTURY
    221  2b8d				  -	      .byte	%00000010	; NEWCENTURY
    222  2b8d				  -	      .byte	%00111100	; NEWCENTURY
    223  2b8d				  -	      .byte	%00000010	; NEWCENTURY
    224  2b8d				  -	      .byte	%00000010	; NEWCENTURY
    225  2b8d				  -	      .byte	%00011100	; NEWCENTURY
    226  2b8d				  -
    227  2b8d				  -			;byte %00000000 ; NEWCENTURY
    228  2b8d				  -
    229  2b8d				  -	      .byte	%00000010	; NEWCENTURY
    230  2b8d				  -	      .byte	%00000010	; NEWCENTURY
    231  2b8d				  -	      .byte	%00000010	; NEWCENTURY
    232  2b8d				  -	      .byte	%00111110	; NEWCENTURY
    233  2b8d				  -	      .byte	%00100010	; NEWCENTURY
    234  2b8d				  -	      .byte	%00100010	; NEWCENTURY
    235  2b8d				  -	      .byte	%00010010	; NEWCENTURY
    236  2b8d				  -	      .byte	%00010010	; NEWCENTURY
    237  2b8d				  -
    238  2b8d				  -			;byte %00000000 ; NEWCENTURY
    239  2b8d				  -
    240  2b8d				  -	      .byte	%01111100	; NEWCENTURY
    241  2b8d				  -	      .byte	%00000010	; NEWCENTURY
    242  2b8d				  -	      .byte	%00000010	; NEWCENTURY
    243  2b8d				  -	      .byte	%00000010	; NEWCENTURY
    244  2b8d				  -	      .byte	%01111100	; NEWCENTURY
    245  2b8d				  -	      .byte	%01000000	; NEWCENTURY
    246  2b8d				  -	      .byte	%01000000	; NEWCENTURY
    247  2b8d				  -	      .byte	%01111000	; NEWCENTURY
    248  2b8d				  -
    249  2b8d				  -			;byte %00000000 ; NEWCENTURY
    250  2b8d				  -
    251  2b8d				  -	      .byte	%00111100	; NEWCENTURY
    252  2b8d				  -	      .byte	%01000010	; NEWCENTURY
    253  2b8d				  -	      .byte	%01000010	; NEWCENTURY
    254  2b8d				  -	      .byte	%01000010	; NEWCENTURY
    255  2b8d				  -	      .byte	%01111100	; NEWCENTURY
    256  2b8d				  -	      .byte	%01000000	; NEWCENTURY
    257  2b8d				  -	      .byte	%01000000	; NEWCENTURY
    258  2b8d				  -	      .byte	%00110000	; NEWCENTURY
    259  2b8d				  -
    260  2b8d				  -			;byte %00000000 ; NEWCENTURY
    261  2b8d				  -
    262  2b8d				  -	      .byte	%00010000	; NEWCENTURY
    263  2b8d				  -	      .byte	%00010000	; NEWCENTURY
    264  2b8d				  -	      .byte	%00001000	; NEWCENTURY
    265  2b8d				  -	      .byte	%00001000	; NEWCENTURY
    266  2b8d				  -	      .byte	%00000100	; NEWCENTURY
    267  2b8d				  -	      .byte	%00000100	; NEWCENTURY
    268  2b8d				  -	      .byte	%00000010	; NEWCENTURY
    269  2b8d				  -	      .byte	%00011110	; NEWCENTURY
    270  2b8d				  -
    271  2b8d				  -			;byte %00000000 ; NEWCENTURY
    272  2b8d				  -
    273  2b8d				  -	      .byte	%00111100	; NEWCENTURY
    274  2b8d				  -	      .byte	%01000010	; NEWCENTURY
    275  2b8d				  -	      .byte	%01000010	; NEWCENTURY
    276  2b8d				  -	      .byte	%01000010	; NEWCENTURY
    277  2b8d				  -	      .byte	%00111100	; NEWCENTURY
    278  2b8d				  -	      .byte	%00100100	; NEWCENTURY
    279  2b8d				  -	      .byte	%00100100	; NEWCENTURY
    280  2b8d				  -	      .byte	%00011000	; NEWCENTURY
    281  2b8d				  -
    282  2b8d				  -			;byte %00000000 ; NEWCENTURY
    283  2b8d				  -
    284  2b8d				  -	      .byte	%00111100	; NEWCENTURY
    285  2b8d				  -	      .byte	%00000010	; NEWCENTURY
    286  2b8d				  -	      .byte	%00000010	; NEWCENTURY
    287  2b8d				  -	      .byte	%00000010	; NEWCENTURY
    288  2b8d				  -	      .byte	%00001110	; NEWCENTURY
    289  2b8d				  -	      .byte	%00010010	; NEWCENTURY
    290  2b8d				  -	      .byte	%00010010	; NEWCENTURY
    291  2b8d				  -	      .byte	%00001100	; NEWCENTURY
    292  2b8d				  -
    293  2b8d					      endif		; NEWCENTURY
    294  2b8d
    295  2b8d				  -	      if	fontstyle == WHIMSEY
    296  2b8d				  -			;byte %00000000 ; WHIMSEY
    297  2b8d				  -
    298  2b8d				  -	      .byte	%00111100	; WHIMSEY
    299  2b8d				  -	      .byte	%01111110	; WHIMSEY
    300  2b8d				  -	      .byte	%01111110	; WHIMSEY
    301  2b8d				  -	      .byte	%01111110	; WHIMSEY
    302  2b8d				  -	      .byte	%01110110	; WHIMSEY
    303  2b8d				  -	      .byte	%01110110	; WHIMSEY
    304  2b8d				  -	      .byte	%01110110	; WHIMSEY
    305  2b8d				  -	      .byte	%00111100	; WHIMSEY
    306  2b8d				  -
    307  2b8d				  -			;byte %00000000 ; WHIMSEY
    308  2b8d				  -
    309  2b8d				  -	      .byte	%01111110	; WHIMSEY
    310  2b8d				  -	      .byte	%01111110	; WHIMSEY
    311  2b8d				  -	      .byte	%01111110	; WHIMSEY
    312  2b8d				  -	      .byte	%00011000	; WHIMSEY
    313  2b8d				  -	      .byte	%00011000	; WHIMSEY
    314  2b8d				  -	      .byte	%00011000	; WHIMSEY
    315  2b8d				  -	      .byte	%01111000	; WHIMSEY
    316  2b8d				  -	      .byte	%00011000	; WHIMSEY
    317  2b8d				  -
    318  2b8d				  -			;byte %00000000 ; WHIMSEY
    319  2b8d				  -
    320  2b8d				  -	      .byte	%01111110	; WHIMSEY
    321  2b8d				  -	      .byte	%01111110	; WHIMSEY
    322  2b8d				  -	      .byte	%01111110	; WHIMSEY
    323  2b8d				  -	      .byte	%01111000	; WHIMSEY
    324  2b8d				  -	      .byte	%00111100	; WHIMSEY
    325  2b8d				  -	      .byte	%00001110	; WHIMSEY
    326  2b8d				  -	      .byte	%01100110	; WHIMSEY
    327  2b8d				  -	      .byte	%00111100	; WHIMSEY
    328  2b8d				  -
    329  2b8d				  -			;byte %00000000 ; WHIMSEY
    330  2b8d				  -
    331  2b8d				  -	      .byte	%00111100	; WHIMSEY
    332  2b8d				  -	      .byte	%01111110	; WHIMSEY
    333  2b8d				  -	      .byte	%01111110	; WHIMSEY
    334  2b8d				  -	      .byte	%01101110	; WHIMSEY
    335  2b8d				  -	      .byte	%00001110	; WHIMSEY
    336  2b8d				  -	      .byte	%00111100	; WHIMSEY
    337  2b8d				  -	      .byte	%00011100	; WHIMSEY
    338  2b8d				  -	      .byte	%01111110	; WHIMSEY
    339  2b8d				  -
    340  2b8d				  -			;byte %00000000 ; WHIMSEY
    341  2b8d				  -
    342  2b8d				  -	      .byte	%00011100	; WHIMSEY
    343  2b8d				  -	      .byte	%00011100	; WHIMSEY
    344  2b8d				  -	      .byte	%01111110	; WHIMSEY
    345  2b8d				  -	      .byte	%01011100	; WHIMSEY
    346  2b8d				  -	      .byte	%01011100	; WHIMSEY
    347  2b8d				  -	      .byte	%00011100	; WHIMSEY
    348  2b8d				  -	      .byte	%00011100	; WHIMSEY
    349  2b8d				  -	      .byte	%00011100	; WHIMSEY
    350  2b8d				  -
    351  2b8d				  -			;byte %00000000 ; WHIMSEY
    352  2b8d				  -
    353  2b8d				  -	      .byte	%00111100	; WHIMSEY
    354  2b8d				  -	      .byte	%01111110	; WHIMSEY
    355  2b8d				  -	      .byte	%01111110	; WHIMSEY
    356  2b8d				  -	      .byte	%01101110	; WHIMSEY
    357  2b8d				  -	      .byte	%00001110	; WHIMSEY
    358  2b8d				  -	      .byte	%01111100	; WHIMSEY
    359  2b8d				  -	      .byte	%01110000	; WHIMSEY
    360  2b8d				  -	      .byte	%01111110	; WHIMSEY
    361  2b8d				  -
    362  2b8d				  -			;byte %00000000 ; WHIMSEY
    363  2b8d				  -
    364  2b8d				  -	      .byte	%00111100	; WHIMSEY
    365  2b8d				  -	      .byte	%01111110	; WHIMSEY
    366  2b8d				  -	      .byte	%01111110	; WHIMSEY
    367  2b8d				  -	      .byte	%01110110	; WHIMSEY
    368  2b8d				  -	      .byte	%01110110	; WHIMSEY
    369  2b8d				  -	      .byte	%01111100	; WHIMSEY
    370  2b8d				  -	      .byte	%01110000	; WHIMSEY
    371  2b8d				  -	      .byte	%00111110	; WHIMSEY
    372  2b8d				  -
    373  2b8d				  -			;byte %00000000 ; WHIMSEY
    374  2b8d				  -
    375  2b8d				  -	      .byte	%01111000	; WHIMSEY
    376  2b8d				  -	      .byte	%01111000	; WHIMSEY
    377  2b8d				  -	      .byte	%01111000	; WHIMSEY
    378  2b8d				  -	      .byte	%00111100	; WHIMSEY
    379  2b8d				  -	      .byte	%00011100	; WHIMSEY
    380  2b8d				  -	      .byte	%00001110	; WHIMSEY
    381  2b8d				  -	      .byte	%00001110	; WHIMSEY
    382  2b8d				  -	      .byte	%01111110	; WHIMSEY
    383  2b8d				  -
    384  2b8d				  -			;byte %00000000 ; WHIMSEY
    385  2b8d				  -
    386  2b8d				  -	      .byte	%00111100	; WHIMSEY
    387  2b8d				  -	      .byte	%01111110	; WHIMSEY
    388  2b8d				  -	      .byte	%01111110	; WHIMSEY
    389  2b8d				  -	      .byte	%01110110	; WHIMSEY
    390  2b8d				  -	      .byte	%01110110	; WHIMSEY
    391  2b8d				  -	      .byte	%00111100	; WHIMSEY
    392  2b8d				  -	      .byte	%01110110	; WHIMSEY
    393  2b8d				  -	      .byte	%00111100	; WHIMSEY
    394  2b8d				  -
    395  2b8d				  -			;byte %00000000 ; WHIMSEY
    396  2b8d				  -
    397  2b8d				  -	      .byte	%00111100	; WHIMSEY
    398  2b8d				  -	      .byte	%01111110	; WHIMSEY
    399  2b8d				  -	      .byte	%01111110	; WHIMSEY
    400  2b8d				  -	      .byte	%01110110	; WHIMSEY
    401  2b8d				  -	      .byte	%00000110	; WHIMSEY
    402  2b8d				  -	      .byte	%00111110	; WHIMSEY
    403  2b8d				  -	      .byte	%01110110	; WHIMSEY
    404  2b8d				  -	      .byte	%00111100	; WHIMSEY
    405  2b8d				  -
    406  2b8d					      endif		; WHIMSEY
    407  2b8d
    408  2b8d				  -	      if	fontstyle == ALARMCLOCK
    409  2b8d				  -
    410  2b8d				  -			;byte %00000000 ; ALARMCLOCK
    411  2b8d				  -
    412  2b8d				  -	      .byte	%00111100	; ALARMCLOCK
    413  2b8d				  -	      .byte	%01000010	; ALARMCLOCK
    414  2b8d				  -	      .byte	%01000010	; ALARMCLOCK
    415  2b8d				  -	      .byte	%01000010	; ALARMCLOCK
    416  2b8d				  -	      .byte	%00000000	; ALARMCLOCK
    417  2b8d				  -	      .byte	%01000010	; ALARMCLOCK
    418  2b8d				  -	      .byte	%01000010	; ALARMCLOCK
    419  2b8d				  -	      .byte	%00111100	; ALARMCLOCK
    420  2b8d				  -
    421  2b8d				  -			;byte %00000000 ; ALARMCLOCK
    422  2b8d				  -
    423  2b8d				  -	      .byte	%00000000	; ALARMCLOCK
    424  2b8d				  -	      .byte	%00000010	; ALARMCLOCK
    425  2b8d				  -	      .byte	%00000010	; ALARMCLOCK
    426  2b8d				  -	      .byte	%00000010	; ALARMCLOCK
    427  2b8d				  -	      .byte	%00000000	; ALARMCLOCK
    428  2b8d				  -	      .byte	%00000010	; ALARMCLOCK
    429  2b8d				  -	      .byte	%00000010	; ALARMCLOCK
    430  2b8d				  -	      .byte	%00000000	; ALARMCLOCK
    431  2b8d				  -
    432  2b8d				  -			;byte %00000000 ; ALARMCLOCK
    433  2b8d				  -
    434  2b8d				  -	      .byte	%00111100	; ALARMCLOCK
    435  2b8d				  -	      .byte	%01000000	; ALARMCLOCK
    436  2b8d				  -	      .byte	%01000000	; ALARMCLOCK
    437  2b8d				  -	      .byte	%01000000	; ALARMCLOCK
    438  2b8d				  -	      .byte	%00111100	; ALARMCLOCK
    439  2b8d				  -	      .byte	%00000010	; ALARMCLOCK
    440  2b8d				  -	      .byte	%00000010	; ALARMCLOCK
    441  2b8d				  -	      .byte	%00111100	; ALARMCLOCK
    442  2b8d				  -
    443  2b8d				  -			;byte %00000000 ; ALARMCLOCK
    444  2b8d				  -
    445  2b8d				  -	      .byte	%00111100	; ALARMCLOCK
    446  2b8d				  -	      .byte	%00000010	; ALARMCLOCK
    447  2b8d				  -	      .byte	%00000010	; ALARMCLOCK
    448  2b8d				  -	      .byte	%00000010	; ALARMCLOCK
    449  2b8d				  -	      .byte	%00111100	; ALARMCLOCK
    450  2b8d				  -	      .byte	%00000010	; ALARMCLOCK
    451  2b8d				  -	      .byte	%00000010	; ALARMCLOCK
    452  2b8d				  -	      .byte	%00111100	; ALARMCLOCK
    453  2b8d				  -
    454  2b8d				  -			;byte %00000000 ; ALARMCLOCK
    455  2b8d				  -
    456  2b8d				  -	      .byte	%00000000	; ALARMCLOCK
    457  2b8d				  -	      .byte	%00000010	; ALARMCLOCK
    458  2b8d				  -	      .byte	%00000010	; ALARMCLOCK
    459  2b8d				  -	      .byte	%00000010	; ALARMCLOCK
    460  2b8d				  -	      .byte	%00111100	; ALARMCLOCK
    461  2b8d				  -	      .byte	%01000010	; ALARMCLOCK
    462  2b8d				  -	      .byte	%01000010	; ALARMCLOCK
    463  2b8d				  -	      .byte	%00000000	; ALARMCLOCK
    464  2b8d				  -
    465  2b8d				  -			;byte %00000000 ; ALARMCLOCK
    466  2b8d				  -
    467  2b8d				  -	      .byte	%00111100	; ALARMCLOCK
    468  2b8d				  -	      .byte	%00000010	; ALARMCLOCK
    469  2b8d				  -	      .byte	%00000010	; ALARMCLOCK
    470  2b8d				  -	      .byte	%00000010	; ALARMCLOCK
    471  2b8d				  -	      .byte	%00111100	; ALARMCLOCK
    472  2b8d				  -	      .byte	%01000000	; ALARMCLOCK
    473  2b8d				  -	      .byte	%01000000	; ALARMCLOCK
    474  2b8d				  -	      .byte	%00111100	; ALARMCLOCK
    475  2b8d				  -
    476  2b8d				  -			;byte %00000000 ; ALARMCLOCK
    477  2b8d				  -
    478  2b8d				  -	      .byte	%00111100	; ALARMCLOCK
    479  2b8d				  -	      .byte	%01000010	; ALARMCLOCK
    480  2b8d				  -	      .byte	%01000010	; ALARMCLOCK
    481  2b8d				  -	      .byte	%01000010	; ALARMCLOCK
    482  2b8d				  -	      .byte	%00111100	; ALARMCLOCK
    483  2b8d				  -	      .byte	%01000000	; ALARMCLOCK
    484  2b8d				  -	      .byte	%01000000	; ALARMCLOCK
    485  2b8d				  -	      .byte	%00111100	; ALARMCLOCK
    486  2b8d				  -
    487  2b8d				  -			;byte %00000000 ; ALARMCLOCK
    488  2b8d				  -
    489  2b8d				  -	      .byte	%00000000	; ALARMCLOCK
    490  2b8d				  -	      .byte	%00000010	; ALARMCLOCK
    491  2b8d				  -	      .byte	%00000010	; ALARMCLOCK
    492  2b8d				  -	      .byte	%00000010	; ALARMCLOCK
    493  2b8d				  -	      .byte	%00000000	; ALARMCLOCK
    494  2b8d				  -	      .byte	%00000010	; ALARMCLOCK
    495  2b8d				  -	      .byte	%00000010	; ALARMCLOCK
    496  2b8d				  -	      .byte	%00111100	; ALARMCLOCK
    497  2b8d				  -
    498  2b8d				  -			;byte %00000000 ; ALARMCLOCK
    499  2b8d				  -
    500  2b8d				  -	      .byte	%00111100	; ALARMCLOCK
    501  2b8d				  -	      .byte	%01000010	; ALARMCLOCK
    502  2b8d				  -	      .byte	%01000010	; ALARMCLOCK
    503  2b8d				  -	      .byte	%01000010	; ALARMCLOCK
    504  2b8d				  -	      .byte	%00111100	; ALARMCLOCK
    505  2b8d				  -	      .byte	%01000010	; ALARMCLOCK
    506  2b8d				  -	      .byte	%01000010	; ALARMCLOCK
    507  2b8d				  -	      .byte	%00111100	; ALARMCLOCK
    508  2b8d				  -
    509  2b8d				  -			;byte %00000000 ; ALARMCLOCK
    510  2b8d				  -
    511  2b8d				  -	      .byte	%00111100	; ALARMCLOCK
    512  2b8d				  -	      .byte	%00000010	; ALARMCLOCK
    513  2b8d				  -	      .byte	%00000010	; ALARMCLOCK
    514  2b8d				  -	      .byte	%00000010	; ALARMCLOCK
    515  2b8d				  -	      .byte	%00111100	; ALARMCLOCK
    516  2b8d				  -	      .byte	%01000010	; ALARMCLOCK
    517  2b8d				  -	      .byte	%01000010	; ALARMCLOCK
    518  2b8d				  -	      .byte	%00111100	; ALARMCLOCK
    519  2b8d				  -
    520  2b8d				  -
    521  2b8d					      endif		; ALARMCLOCK
    522  2b8d
    523  2b8d				  -	      if	fontstyle == HANDWRITTEN
    524  2b8d				  -
    525  2b8d				  -			;byte %00000000 ; HANDWRITTEN
    526  2b8d				  -
    527  2b8d				  -	      .byte	%00110000	; HANDWRITTEN
    528  2b8d				  -	      .byte	%01001000	; HANDWRITTEN
    529  2b8d				  -	      .byte	%01001000	; HANDWRITTEN
    530  2b8d				  -	      .byte	%01001000	; HANDWRITTEN
    531  2b8d				  -	      .byte	%00100100	; HANDWRITTEN
    532  2b8d				  -	      .byte	%00100100	; HANDWRITTEN
    533  2b8d				  -	      .byte	%00010010	; HANDWRITTEN
    534  2b8d				  -	      .byte	%00001100	; HANDWRITTEN
    535  2b8d				  -
    536  2b8d				  -			;byte %00000000 ; HANDWRITTEN
    537  2b8d				  -
    538  2b8d				  -	      .byte	%00010000	; HANDWRITTEN
    539  2b8d				  -	      .byte	%00010000	; HANDWRITTEN
    540  2b8d				  -	      .byte	%00010000	; HANDWRITTEN
    541  2b8d				  -	      .byte	%00001000	; HANDWRITTEN
    542  2b8d				  -	      .byte	%00001000	; HANDWRITTEN
    543  2b8d				  -	      .byte	%00001000	; HANDWRITTEN
    544  2b8d				  -	      .byte	%00000100	; HANDWRITTEN
    545  2b8d				  -	      .byte	%00000100	; HANDWRITTEN
    546  2b8d				  -
    547  2b8d				  -			;byte %00000000 ; HANDWRITTEN
    548  2b8d				  -
    549  2b8d				  -	      .byte	%01110000	; HANDWRITTEN
    550  2b8d				  -	      .byte	%01001100	; HANDWRITTEN
    551  2b8d				  -	      .byte	%01000000	; HANDWRITTEN
    552  2b8d				  -	      .byte	%00100000	; HANDWRITTEN
    553  2b8d				  -	      .byte	%00011000	; HANDWRITTEN
    554  2b8d				  -	      .byte	%00000100	; HANDWRITTEN
    555  2b8d				  -	      .byte	%00100010	; HANDWRITTEN
    556  2b8d				  -	      .byte	%00011100	; HANDWRITTEN
    557  2b8d				  -
    558  2b8d				  -			;byte %00000000 ; HANDWRITTEN
    559  2b8d				  -
    560  2b8d				  -	      .byte	%00110000	; HANDWRITTEN
    561  2b8d				  -	      .byte	%01001000	; HANDWRITTEN
    562  2b8d				  -	      .byte	%00000100	; HANDWRITTEN
    563  2b8d				  -	      .byte	%00000100	; HANDWRITTEN
    564  2b8d				  -	      .byte	%00011000	; HANDWRITTEN
    565  2b8d				  -	      .byte	%00000100	; HANDWRITTEN
    566  2b8d				  -	      .byte	%00100010	; HANDWRITTEN
    567  2b8d				  -	      .byte	%00011100	; HANDWRITTEN
    568  2b8d				  -
    569  2b8d				  -			;byte %00000000 ; HANDWRITTEN
    570  2b8d				  -
    571  2b8d				  -	      .byte	%00010000	; HANDWRITTEN
    572  2b8d				  -	      .byte	%00010000	; HANDWRITTEN
    573  2b8d				  -	      .byte	%00001000	; HANDWRITTEN
    574  2b8d				  -	      .byte	%01111000	; HANDWRITTEN
    575  2b8d				  -	      .byte	%01000100	; HANDWRITTEN
    576  2b8d				  -	      .byte	%00100100	; HANDWRITTEN
    577  2b8d				  -	      .byte	%00010010	; HANDWRITTEN
    578  2b8d				  -	      .byte	%00000010	; HANDWRITTEN
    579  2b8d				  -
    580  2b8d				  -			;byte %00000000 ; HANDWRITTEN
    581  2b8d				  -
    582  2b8d				  -	      .byte	%00110000	; HANDWRITTEN
    583  2b8d				  -	      .byte	%01001000	; HANDWRITTEN
    584  2b8d				  -	      .byte	%00000100	; HANDWRITTEN
    585  2b8d				  -	      .byte	%00000100	; HANDWRITTEN
    586  2b8d				  -	      .byte	%00011000	; HANDWRITTEN
    587  2b8d				  -	      .byte	%00100000	; HANDWRITTEN
    588  2b8d				  -	      .byte	%00010010	; HANDWRITTEN
    589  2b8d				  -	      .byte	%00001100	; HANDWRITTEN
    590  2b8d				  -
    591  2b8d				  -			;byte %00000000 ; HANDWRITTEN
    592  2b8d				  -
    593  2b8d				  -	      .byte	%00010000	; HANDWRITTEN
    594  2b8d				  -	      .byte	%00101000	; HANDWRITTEN
    595  2b8d				  -	      .byte	%00100100	; HANDWRITTEN
    596  2b8d				  -	      .byte	%00100100	; HANDWRITTEN
    597  2b8d				  -	      .byte	%00011000	; HANDWRITTEN
    598  2b8d				  -	      .byte	%00010000	; HANDWRITTEN
    599  2b8d				  -	      .byte	%00001000	; HANDWRITTEN
    600  2b8d				  -	      .byte	%00000110	; HANDWRITTEN
    601  2b8d				  -
    602  2b8d				  -			;byte %00000000 ; HANDWRITTEN
    603  2b8d				  -
    604  2b8d				  -	      .byte	%00010000	; HANDWRITTEN
    605  2b8d				  -	      .byte	%00010000	; HANDWRITTEN
    606  2b8d				  -	      .byte	%00010000	; HANDWRITTEN
    607  2b8d				  -	      .byte	%00001000	; HANDWRITTEN
    608  2b8d				  -	      .byte	%00000100	; HANDWRITTEN
    609  2b8d				  -	      .byte	%00000100	; HANDWRITTEN
    610  2b8d				  -	      .byte	%00110010	; HANDWRITTEN
    611  2b8d				  -	      .byte	%00001110	; HANDWRITTEN
    612  2b8d				  -
    613  2b8d				  -			;byte %00000000 ; HANDWRITTEN
    614  2b8d				  -
    615  2b8d				  -	      .byte	%00110000	; HANDWRITTEN
    616  2b8d				  -	      .byte	%01001000	; HANDWRITTEN
    617  2b8d				  -	      .byte	%01000100	; HANDWRITTEN
    618  2b8d				  -	      .byte	%00100100	; HANDWRITTEN
    619  2b8d				  -	      .byte	%00011100	; HANDWRITTEN
    620  2b8d				  -	      .byte	%00010010	; HANDWRITTEN
    621  2b8d				  -	      .byte	%00001010	; HANDWRITTEN
    622  2b8d				  -	      .byte	%00000110	; HANDWRITTEN
    623  2b8d				  -
    624  2b8d				  -			;byte %00000000 ; HANDWRITTEN
    625  2b8d				  -
    626  2b8d				  -	      .byte	%00010000	; HANDWRITTEN
    627  2b8d				  -	      .byte	%00010000	; HANDWRITTEN
    628  2b8d				  -	      .byte	%00001000	; HANDWRITTEN
    629  2b8d				  -	      .byte	%00001000	; HANDWRITTEN
    630  2b8d				  -	      .byte	%00011100	; HANDWRITTEN
    631  2b8d				  -	      .byte	%00100100	; HANDWRITTEN
    632  2b8d				  -	      .byte	%00010010	; HANDWRITTEN
    633  2b8d				  -	      .byte	%00001100	; HANDWRITTEN
    634  2b8d				  -
    635  2b8d					      endif		; HANDWRITTEN
    636  2b8d
    637  2b8d				  -	      if	fontstyle == INTERRUPTED
    638  2b8d				  -
    639  2b8d				  -			;byte %00000000 ; INTERRUPTED
    640  2b8d				  -
    641  2b8d				  -	      .byte	%00110100	; INTERRUPTED
    642  2b8d				  -	      .byte	%01100110	; INTERRUPTED
    643  2b8d				  -	      .byte	%01100110	; INTERRUPTED
    644  2b8d				  -	      .byte	%01100110	; INTERRUPTED
    645  2b8d				  -	      .byte	%01100110	; INTERRUPTED
    646  2b8d				  -	      .byte	%01100110	; INTERRUPTED
    647  2b8d				  -	      .byte	%01100110	; INTERRUPTED
    648  2b8d				  -	      .byte	%00110100	; INTERRUPTED
    649  2b8d				  -
    650  2b8d				  -			;byte %00000000 ; INTERRUPTED
    651  2b8d				  -
    652  2b8d				  -	      .byte	%00111100	; INTERRUPTED
    653  2b8d				  -	      .byte	%00000000	; INTERRUPTED
    654  2b8d				  -	      .byte	%00011000	; INTERRUPTED
    655  2b8d				  -	      .byte	%00011000	; INTERRUPTED
    656  2b8d				  -	      .byte	%00011000	; INTERRUPTED
    657  2b8d				  -	      .byte	%00011000	; INTERRUPTED
    658  2b8d				  -	      .byte	%00011000	; INTERRUPTED
    659  2b8d				  -	      .byte	%00111000	; INTERRUPTED
    660  2b8d				  -
    661  2b8d				  -			;byte %00000000 ; INTERRUPTED
    662  2b8d				  -
    663  2b8d				  -	      .byte	%01101110	; INTERRUPTED
    664  2b8d				  -	      .byte	%01100000	; INTERRUPTED
    665  2b8d				  -	      .byte	%00110000	; INTERRUPTED
    666  2b8d				  -	      .byte	%00011000	; INTERRUPTED
    667  2b8d				  -	      .byte	%00001100	; INTERRUPTED
    668  2b8d				  -	      .byte	%00000110	; INTERRUPTED
    669  2b8d				  -	      .byte	%01000110	; INTERRUPTED
    670  2b8d				  -	      .byte	%00111100	; INTERRUPTED
    671  2b8d				  -
    672  2b8d				  -			;byte %00000000 ; INTERRUPTED
    673  2b8d				  -
    674  2b8d				  -	      .byte	%01111100	; INTERRUPTED
    675  2b8d				  -	      .byte	%00000110	; INTERRUPTED
    676  2b8d				  -	      .byte	%00000110	; INTERRUPTED
    677  2b8d				  -	      .byte	%00000110	; INTERRUPTED
    678  2b8d				  -	      .byte	%01110110	; INTERRUPTED
    679  2b8d				  -	      .byte	%00000110	; INTERRUPTED
    680  2b8d				  -	      .byte	%00000110	; INTERRUPTED
    681  2b8d				  -	      .byte	%01110100	; INTERRUPTED
    682  2b8d				  -
    683  2b8d				  -			;byte %00000000 ; INTERRUPTED
    684  2b8d				  -
    685  2b8d				  -	      .byte	%00000110	; INTERRUPTED
    686  2b8d				  -	      .byte	%00000110	; INTERRUPTED
    687  2b8d				  -	      .byte	%00000110	; INTERRUPTED
    688  2b8d				  -	      .byte	%00000110	; INTERRUPTED
    689  2b8d				  -	      .byte	%01110110	; INTERRUPTED
    690  2b8d				  -	      .byte	%01100110	; INTERRUPTED
    691  2b8d				  -	      .byte	%01100110	; INTERRUPTED
    692  2b8d				  -	      .byte	%01100110	; INTERRUPTED
    693  2b8d				  -
    694  2b8d				  -			;byte %00000000 ; INTERRUPTED
    695  2b8d				  -
    696  2b8d				  -	      .byte	%01111100	; INTERRUPTED
    697  2b8d				  -	      .byte	%00000110	; INTERRUPTED
    698  2b8d				  -	      .byte	%00000110	; INTERRUPTED
    699  2b8d				  -	      .byte	%00000110	; INTERRUPTED
    700  2b8d				  -	      .byte	%01111100	; INTERRUPTED
    701  2b8d				  -	      .byte	%01100000	; INTERRUPTED
    702  2b8d				  -	      .byte	%01100000	; INTERRUPTED
    703  2b8d				  -	      .byte	%01101110	; INTERRUPTED
    704  2b8d				  -
    705  2b8d				  -			;byte %00000000 ; INTERRUPTED
    706  2b8d				  -
    707  2b8d				  -	      .byte	%00101100	; INTERRUPTED
    708  2b8d				  -	      .byte	%01100110	; INTERRUPTED
    709  2b8d				  -	      .byte	%01100110	; INTERRUPTED
    710  2b8d				  -	      .byte	%01100110	; INTERRUPTED
    711  2b8d				  -	      .byte	%01101100	; INTERRUPTED
    712  2b8d				  -	      .byte	%01100000	; INTERRUPTED
    713  2b8d				  -	      .byte	%00110000	; INTERRUPTED
    714  2b8d				  -	      .byte	%00011100	; INTERRUPTED
    715  2b8d				  -
    716  2b8d				  -			;byte %00000000 ; INTERRUPTED
    717  2b8d				  -
    718  2b8d				  -	      .byte	%00011000	; INTERRUPTED
    719  2b8d				  -	      .byte	%00011000	; INTERRUPTED
    720  2b8d				  -	      .byte	%00011000	; INTERRUPTED
    721  2b8d				  -	      .byte	%00011100	; INTERRUPTED
    722  2b8d				  -	      .byte	%00001110	; INTERRUPTED
    723  2b8d				  -	      .byte	%00000110	; INTERRUPTED
    724  2b8d				  -	      .byte	%00000000	; INTERRUPTED
    725  2b8d				  -	      .byte	%01111110	; INTERRUPTED
    726  2b8d				  -
    727  2b8d				  -			;byte %00000000 ; INTERRUPTED
    728  2b8d				  -
    729  2b8d				  -	      .byte	%00110100	; INTERRUPTED
    730  2b8d				  -	      .byte	%01100110	; INTERRUPTED
    731  2b8d				  -	      .byte	%01100110	; INTERRUPTED
    732  2b8d				  -	      .byte	%01100110	; INTERRUPTED
    733  2b8d				  -	      .byte	%00110100	; INTERRUPTED
    734  2b8d				  -	      .byte	%01100110	; INTERRUPTED
    735  2b8d				  -	      .byte	%01100110	; INTERRUPTED
    736  2b8d				  -	      .byte	%00110100	; INTERRUPTED
    737  2b8d				  -
    738  2b8d				  -			;byte %00000000 ; INTERRUPTED
    739  2b8d				  -
    740  2b8d				  -	      .byte	%00111000	; INTERRUPTED
    741  2b8d				  -	      .byte	%00001100	; INTERRUPTED
    742  2b8d				  -	      .byte	%00000110	; INTERRUPTED
    743  2b8d				  -	      .byte	%00110110	; INTERRUPTED
    744  2b8d				  -	      .byte	%01100110	; INTERRUPTED
    745  2b8d				  -	      .byte	%01100110	; INTERRUPTED
    746  2b8d				  -	      .byte	%01100110	; INTERRUPTED
    747  2b8d				  -	      .byte	%00110100	; INTERRUPTED
    748  2b8d				  -
    749  2b8d					      endif		; INTERRUPTED
    750  2b8d
    751  2b8d
    752  2b8d				  -	      if	fontstyle == TINY
    753  2b8d				  -
    754  2b8d				  -			;byte %00000000 ; TINY
    755  2b8d				  -
    756  2b8d				  -	      .byte	%00000000	; TINY
    757  2b8d				  -	      .byte	%00111000	; TINY
    758  2b8d				  -	      .byte	%00101000	; TINY
    759  2b8d				  -	      .byte	%00101000	; TINY
    760  2b8d				  -	      .byte	%00101000	; TINY
    761  2b8d				  -	      .byte	%00111000	; TINY
    762  2b8d				  -	      .byte	%00000000	; TINY
    763  2b8d				  -	      .byte	%00000000	; TINY
    764  2b8d				  -
    765  2b8d				  -			;byte %00000000 ; TINY
    766  2b8d				  -
    767  2b8d				  -	      .byte	%00000000	; TINY
    768  2b8d				  -	      .byte	%00010000	; TINY
    769  2b8d				  -	      .byte	%00010000	; TINY
    770  2b8d				  -	      .byte	%00010000	; TINY
    771  2b8d				  -	      .byte	%00010000	; TINY
    772  2b8d				  -	      .byte	%00010000	; TINY
    773  2b8d				  -	      .byte	%00000000	; TINY
    774  2b8d				  -	      .byte	%00000000	; TINY
    775  2b8d				  -
    776  2b8d				  -			;byte %00000000 ; TINY
    777  2b8d				  -
    778  2b8d				  -	      .byte	%00000000	; TINY
    779  2b8d				  -	      .byte	%00111000	; TINY
    780  2b8d				  -	      .byte	%00100000	; TINY
    781  2b8d				  -	      .byte	%00111000	; TINY
    782  2b8d				  -	      .byte	%00001000	; TINY
    783  2b8d				  -	      .byte	%00111000	; TINY
    784  2b8d				  -	      .byte	%00000000	; TINY
    785  2b8d				  -	      .byte	%00000000	; TINY
    786  2b8d				  -
    787  2b8d				  -			;byte %00000000 ; TINY
    788  2b8d				  -
    789  2b8d				  -	      .byte	%00000000	; TINY
    790  2b8d				  -	      .byte	%00111000	; TINY
    791  2b8d				  -	      .byte	%00001000	; TINY
    792  2b8d				  -	      .byte	%00111000	; TINY
    793  2b8d				  -	      .byte	%00001000	; TINY
    794  2b8d				  -	      .byte	%00111000	; TINY
    795  2b8d				  -	      .byte	%00000000	; TINY
    796  2b8d				  -	      .byte	%00000000	; TINY
    797  2b8d				  -
    798  2b8d				  -			;byte %00000000 ; TINY
    799  2b8d				  -
    800  2b8d				  -	      .byte	%00000000	; TINY
    801  2b8d				  -	      .byte	%00001000	; TINY
    802  2b8d				  -	      .byte	%00001000	; TINY
    803  2b8d				  -	      .byte	%00111000	; TINY
    804  2b8d				  -	      .byte	%00101000	; TINY
    805  2b8d				  -	      .byte	%00101000	; TINY
    806  2b8d				  -	      .byte	%00000000	; TINY
    807  2b8d				  -	      .byte	%00000000	; TINY
    808  2b8d				  -
    809  2b8d				  -			;byte %00000000 ; TINY
    810  2b8d				  -
    811  2b8d				  -	      .byte	%00000000	; TINY
    812  2b8d				  -	      .byte	%00111000	; TINY
    813  2b8d				  -	      .byte	%00001000	; TINY
    814  2b8d				  -	      .byte	%00111000	; TINY
    815  2b8d				  -	      .byte	%00100000	; TINY
    816  2b8d				  -	      .byte	%00111000	; TINY
    817  2b8d				  -	      .byte	%00000000	; TINY
    818  2b8d				  -	      .byte	%00000000	; TINY
    819  2b8d				  -
    820  2b8d				  -			;byte %00000000 ; TINY
    821  2b8d				  -
    822  2b8d				  -	      .byte	%00000000	; TINY
    823  2b8d				  -	      .byte	%00111000	; TINY
    824  2b8d				  -	      .byte	%00101000	; TINY
    825  2b8d				  -	      .byte	%00111000	; TINY
    826  2b8d				  -	      .byte	%00100000	; TINY
    827  2b8d				  -	      .byte	%00111000	; TINY
    828  2b8d				  -	      .byte	%00000000	; TINY
    829  2b8d				  -	      .byte	%00000000	; TINY
    830  2b8d				  -
    831  2b8d				  -			;byte %00000000 ; TINY
    832  2b8d				  -
    833  2b8d				  -	      .byte	%00000000	; TINY
    834  2b8d				  -	      .byte	%00001000	; TINY
    835  2b8d				  -	      .byte	%00001000	; TINY
    836  2b8d				  -	      .byte	%00001000	; TINY
    837  2b8d				  -	      .byte	%00001000	; TINY
    838  2b8d				  -	      .byte	%00111000	; TINY
    839  2b8d				  -	      .byte	%00000000	; TINY
    840  2b8d				  -	      .byte	%00000000	; TINY
    841  2b8d				  -
    842  2b8d				  -			;byte %00000000 ; TINY
    843  2b8d				  -
    844  2b8d				  -	      .byte	%00000000	; TINY
    845  2b8d				  -	      .byte	%00111000	; TINY
    846  2b8d				  -	      .byte	%00101000	; TINY
    847  2b8d				  -	      .byte	%00111000	; TINY
    848  2b8d				  -	      .byte	%00101000	; TINY
    849  2b8d				  -	      .byte	%00111000	; TINY
    850  2b8d				  -	      .byte	%00000000	; TINY
    851  2b8d				  -	      .byte	%00000000	; TINY
    852  2b8d				  -
    853  2b8d				  -			;byte %00000000 ; TINY
    854  2b8d				  -
    855  2b8d				  -	      .byte	%00000000	; TINY
    856  2b8d				  -	      .byte	%00001000	; TINY
    857  2b8d				  -	      .byte	%00001000	; TINY
    858  2b8d				  -	      .byte	%00111000	; TINY
    859  2b8d				  -	      .byte	%00101000	; TINY
    860  2b8d				  -	      .byte	%00111000	; TINY
    861  2b8d				  -	      .byte	%00000000	; TINY
    862  2b8d				  -	      .byte	%00000000	; TINY
    863  2b8d				  -
    864  2b8d					      endif		; TINY
    865  2b8d
    866  2b8d				  -	      if	fontstyle == RETROPUTER
    867  2b8d				  -
    868  2b8d				  -			;byte %00000000 ; RETROPUTER
    869  2b8d				  -
    870  2b8d				  -	      .byte	%01111110	; RETROPUTER
    871  2b8d				  -	      .byte	%01000110	; RETROPUTER
    872  2b8d				  -	      .byte	%01000110	; RETROPUTER
    873  2b8d				  -	      .byte	%01000110	; RETROPUTER
    874  2b8d				  -	      .byte	%01100010	; RETROPUTER
    875  2b8d				  -	      .byte	%01100010	; RETROPUTER
    876  2b8d				  -	      .byte	%01100010	; RETROPUTER
    877  2b8d				  -	      .byte	%01111110	; RETROPUTER
    878  2b8d				  -
    879  2b8d				  -			;byte %00000000 ; RETROPUTER
    880  2b8d				  -
    881  2b8d				  -	      .byte	%00111000	; RETROPUTER
    882  2b8d				  -	      .byte	%00111000	; RETROPUTER
    883  2b8d				  -	      .byte	%00111000	; RETROPUTER
    884  2b8d				  -	      .byte	%00111000	; RETROPUTER
    885  2b8d				  -	      .byte	%00011000	; RETROPUTER
    886  2b8d				  -	      .byte	%00011000	; RETROPUTER
    887  2b8d				  -	      .byte	%00011000	; RETROPUTER
    888  2b8d				  -	      .byte	%00011000	; RETROPUTER
    889  2b8d				  -
    890  2b8d				  -			;byte %00000000 ; RETROPUTER
    891  2b8d				  -
    892  2b8d				  -	      .byte	%01111110	; RETROPUTER
    893  2b8d				  -	      .byte	%01100000	; RETROPUTER
    894  2b8d				  -	      .byte	%01100000	; RETROPUTER
    895  2b8d				  -	      .byte	%01100000	; RETROPUTER
    896  2b8d				  -	      .byte	%00111110	; RETROPUTER
    897  2b8d				  -	      .byte	%00000010	; RETROPUTER
    898  2b8d				  -	      .byte	%01000010	; RETROPUTER
    899  2b8d				  -	      .byte	%01111110	; RETROPUTER
    900  2b8d				  -
    901  2b8d				  -			;byte %00000000 ; RETROPUTER
    902  2b8d				  -
    903  2b8d				  -	      .byte	%01111110	; RETROPUTER
    904  2b8d				  -	      .byte	%01000110	; RETROPUTER
    905  2b8d				  -	      .byte	%00000110	; RETROPUTER
    906  2b8d				  -	      .byte	%00000110	; RETROPUTER
    907  2b8d				  -	      .byte	%00111110	; RETROPUTER
    908  2b8d				  -	      .byte	%00000010	; RETROPUTER
    909  2b8d				  -	      .byte	%01000010	; RETROPUTER
    910  2b8d				  -	      .byte	%01111110	; RETROPUTER
    911  2b8d				  -
    912  2b8d				  -			;byte %00000000 ; RETROPUTER
    913  2b8d				  -
    914  2b8d				  -	      .byte	%00001100	; RETROPUTER
    915  2b8d				  -	      .byte	%00001100	; RETROPUTER
    916  2b8d				  -	      .byte	%00001100	; RETROPUTER
    917  2b8d				  -	      .byte	%01111110	; RETROPUTER
    918  2b8d				  -	      .byte	%01000100	; RETROPUTER
    919  2b8d				  -	      .byte	%01000100	; RETROPUTER
    920  2b8d				  -	      .byte	%01000100	; RETROPUTER
    921  2b8d				  -	      .byte	%00000100	; RETROPUTER
    922  2b8d				  -
    923  2b8d				  -			;byte %00000000 ; RETROPUTER
    924  2b8d				  -
    925  2b8d				  -	      .byte	%01111110	; RETROPUTER
    926  2b8d				  -	      .byte	%01000110	; RETROPUTER
    927  2b8d				  -	      .byte	%00000110	; RETROPUTER
    928  2b8d				  -	      .byte	%00000110	; RETROPUTER
    929  2b8d				  -	      .byte	%01111100	; RETROPUTER
    930  2b8d				  -	      .byte	%01000000	; RETROPUTER
    931  2b8d				  -	      .byte	%01000000	; RETROPUTER
    932  2b8d				  -	      .byte	%01111110	; RETROPUTER
    933  2b8d				  -
    934  2b8d				  -			;byte %00000000 ; RETROPUTER
    935  2b8d				  -
    936  2b8d				  -	      .byte	%01111110	; RETROPUTER
    937  2b8d				  -	      .byte	%01000110	; RETROPUTER
    938  2b8d				  -	      .byte	%01000110	; RETROPUTER
    939  2b8d				  -	      .byte	%01000110	; RETROPUTER
    940  2b8d				  -	      .byte	%01111100	; RETROPUTER
    941  2b8d				  -	      .byte	%01000000	; RETROPUTER
    942  2b8d				  -	      .byte	%01000010	; RETROPUTER
    943  2b8d				  -	      .byte	%01111110	; RETROPUTER
    944  2b8d				  -
    945  2b8d				  -			;byte %00000000 ; RETROPUTER
    946  2b8d				  -
    947  2b8d				  -	      .byte	%00001100	; RETROPUTER
    948  2b8d				  -	      .byte	%00001100	; RETROPUTER
    949  2b8d				  -	      .byte	%00001100	; RETROPUTER
    950  2b8d				  -	      .byte	%00001100	; RETROPUTER
    951  2b8d				  -	      .byte	%00000100	; RETROPUTER
    952  2b8d				  -	      .byte	%00000010	; RETROPUTER
    953  2b8d				  -	      .byte	%01000010	; RETROPUTER
    954  2b8d				  -	      .byte	%01111110	; RETROPUTER
    955  2b8d				  -
    956  2b8d				  -			;byte %00000000 ; RETROPUTER
    957  2b8d				  -
    958  2b8d				  -	      .byte	%01111110	; RETROPUTER
    959  2b8d				  -	      .byte	%01000110	; RETROPUTER
    960  2b8d				  -	      .byte	%01000110	; RETROPUTER
    961  2b8d				  -	      .byte	%01000110	; RETROPUTER
    962  2b8d				  -	      .byte	%01111110	; RETROPUTER
    963  2b8d				  -	      .byte	%01000010	; RETROPUTER
    964  2b8d				  -	      .byte	%01000010	; RETROPUTER
    965  2b8d				  -	      .byte	%01111110	; RETROPUTER
    966  2b8d				  -
    967  2b8d				  -			;byte %00000000 ; RETROPUTER
    968  2b8d				  -
    969  2b8d				  -	      .byte	%00000110	; RETROPUTER
    970  2b8d				  -	      .byte	%00000110	; RETROPUTER
    971  2b8d				  -	      .byte	%00000110	; RETROPUTER
    972  2b8d				  -	      .byte	%00000010	; RETROPUTER
    973  2b8d				  -	      .byte	%01111110	; RETROPUTER
    974  2b8d				  -	      .byte	%01000010	; RETROPUTER
    975  2b8d				  -	      .byte	%01000010	; RETROPUTER
    976  2b8d				  -	      .byte	%01111110	; RETROPUTER
    977  2b8d				  -
    978  2b8d					      endif		; RETROPUTER
    979  2b8d
    980  2b8d				  -	      if	fontstyle == CURVES
    981  2b8d				  -
    982  2b8d				  -			;byte %00000000 ; CURVES
    983  2b8d				  -
    984  2b8d				  -	      .byte	%00111100	; CURVES
    985  2b8d				  -	      .byte	%01111110	; CURVES
    986  2b8d				  -	      .byte	%01100110	; CURVES
    987  2b8d				  -	      .byte	%01100110	; CURVES
    988  2b8d				  -	      .byte	%01100110	; CURVES
    989  2b8d				  -	      .byte	%01100110	; CURVES
    990  2b8d				  -	      .byte	%01111110	; CURVES
    991  2b8d				  -	      .byte	%00111100	; CURVES
    992  2b8d				  -
    993  2b8d				  -			;byte %00000000 ; CURVES
    994  2b8d				  -
    995  2b8d				  -	      .byte	%00011000	; CURVES
    996  2b8d				  -	      .byte	%00011000	; CURVES
    997  2b8d				  -	      .byte	%00011000	; CURVES
    998  2b8d				  -	      .byte	%00011000	; CURVES
    999  2b8d				  -	      .byte	%00011000	; CURVES
   1000  2b8d				  -	      .byte	%00011000	; CURVES
   1001  2b8d				  -	      .byte	%01111000	; CURVES
   1002  2b8d				  -	      .byte	%01110000	; CURVES
   1003  2b8d				  -
   1004  2b8d				  -			;byte %00000000 ; CURVES
   1005  2b8d				  -
   1006  2b8d				  -	      .byte	%01111110	; CURVES
   1007  2b8d				  -	      .byte	%01111110	; CURVES
   1008  2b8d				  -	      .byte	%01100000	; CURVES
   1009  2b8d				  -	      .byte	%01111100	; CURVES
   1010  2b8d				  -	      .byte	%00111110	; CURVES
   1011  2b8d				  -	      .byte	%00000110	; CURVES
   1012  2b8d				  -	      .byte	%01111110	; CURVES
   1013  2b8d				  -	      .byte	%01111100	; CURVES
   1014  2b8d				  -
   1015  2b8d				  -			;byte %00000000 ; CURVES
   1016  2b8d				  -
   1017  2b8d				  -	      .byte	%01111100	; CURVES
   1018  2b8d				  -	      .byte	%01111110	; CURVES
   1019  2b8d				  -	      .byte	%00001110	; CURVES
   1020  2b8d				  -	      .byte	%00111100	; CURVES
   1021  2b8d				  -	      .byte	%00111100	; CURVES
   1022  2b8d				  -	      .byte	%00001110	; CURVES
   1023  2b8d				  -	      .byte	%01111110	; CURVES
   1024  2b8d				  -	      .byte	%01111100	; CURVES
   1025  2b8d				  -
   1026  2b8d				  -			;byte %00000000 ; CURVES
   1027  2b8d				  -
   1028  2b8d				  -	      .byte	%00000110	; CURVES
   1029  2b8d				  -	      .byte	%00000110	; CURVES
   1030  2b8d				  -	      .byte	%00111110	; CURVES
   1031  2b8d				  -	      .byte	%01111110	; CURVES
   1032  2b8d				  -	      .byte	%01100110	; CURVES
   1033  2b8d				  -	      .byte	%01100110	; CURVES
   1034  2b8d				  -	      .byte	%01100110	; CURVES
   1035  2b8d				  -	      .byte	%01100110	; CURVES
   1036  2b8d				  -
   1037  2b8d				  -			;byte %00000000 ; CURVES
   1038  2b8d				  -
   1039  2b8d				  -	      .byte	%01111100	; CURVES
   1040  2b8d				  -	      .byte	%01111110	; CURVES
   1041  2b8d				  -	      .byte	%00000110	; CURVES
   1042  2b8d				  -	      .byte	%01111110	; CURVES
   1043  2b8d				  -	      .byte	%01111100	; CURVES
   1044  2b8d				  -	      .byte	%01100000	; CURVES
   1045  2b8d				  -	      .byte	%01111110	; CURVES
   1046  2b8d				  -	      .byte	%01111110	; CURVES
   1047  2b8d				  -
   1048  2b8d				  -			;byte %00000000 ; CURVES
   1049  2b8d				  -
   1050  2b8d				  -	      .byte	%00111100	; CURVES
   1051  2b8d				  -	      .byte	%01111110	; CURVES
   1052  2b8d				  -	      .byte	%01100110	; CURVES
   1053  2b8d				  -	      .byte	%01111110	; CURVES
   1054  2b8d				  -	      .byte	%01111100	; CURVES
   1055  2b8d				  -	      .byte	%01100000	; CURVES
   1056  2b8d				  -	      .byte	%01111110	; CURVES
   1057  2b8d				  -	      .byte	%00111110	; CURVES
   1058  2b8d				  -
   1059  2b8d				  -			;byte %00000000 ; CURVES
   1060  2b8d				  -
   1061  2b8d				  -	      .byte	%00000110	; CURVES
   1062  2b8d				  -	      .byte	%00000110	; CURVES
   1063  2b8d				  -	      .byte	%00000110	; CURVES
   1064  2b8d				  -	      .byte	%00000110	; CURVES
   1065  2b8d				  -	      .byte	%00000110	; CURVES
   1066  2b8d				  -	      .byte	%01100110	; CURVES
   1067  2b8d				  -	      .byte	%01111110	; CURVES
   1068  2b8d				  -	      .byte	%00111100	; CURVES
   1069  2b8d				  -
   1070  2b8d				  -			;byte %00000000 ; CURVES
   1071  2b8d				  -
   1072  2b8d				  -	      .byte	%00111100	; CURVES
   1073  2b8d				  -	      .byte	%01111110	; CURVES
   1074  2b8d				  -	      .byte	%01100110	; CURVES
   1075  2b8d				  -	      .byte	%01111110	; CURVES
   1076  2b8d				  -	      .byte	%00111100	; CURVES
   1077  2b8d				  -	      .byte	%01100110	; CURVES
   1078  2b8d				  -	      .byte	%01111110	; CURVES
   1079  2b8d				  -	      .byte	%00111100	; CURVES
   1080  2b8d				  -
   1081  2b8d				  -			;byte %00000000 ; CURVES
   1082  2b8d				  -
   1083  2b8d				  -	      .byte	%01111100	; CURVES
   1084  2b8d				  -	      .byte	%01111110	; CURVES
   1085  2b8d				  -	      .byte	%00000110	; CURVES
   1086  2b8d				  -	      .byte	%00111110	; CURVES
   1087  2b8d				  -	      .byte	%01111110	; CURVES
   1088  2b8d				  -	      .byte	%01100110	; CURVES
   1089  2b8d				  -	      .byte	%01111110	; CURVES
   1090  2b8d				  -	      .byte	%00111100	; CURVES
   1091  2b8d				  -
   1092  2b8d					      endif		; CURVES
   1093  2b8d
   1094  2b8d
   1095  2b8d				  -	      if	fontstyle == HUSKY
   1096  2b8d				  -
   1097  2b8d				  -			;byte %00000000 ; HUSKY
   1098  2b8d				  -
   1099  2b8d				  -	      .byte	%01111100	; HUSKY
   1100  2b8d				  -	      .byte	%11111110	; HUSKY
   1101  2b8d				  -	      .byte	%11101110	; HUSKY
   1102  2b8d				  -	      .byte	%11101110	; HUSKY
   1103  2b8d				  -	      .byte	%11101110	; HUSKY
   1104  2b8d				  -	      .byte	%11101110	; HUSKY
   1105  2b8d				  -	      .byte	%11111110	; HUSKY
   1106  2b8d				  -	      .byte	%01111100	; HUSKY
   1107  2b8d				  -
   1108  2b8d				  -			;byte %00000000 ; HUSKY
   1109  2b8d				  -
   1110  2b8d				  -	      .byte	%00111000	; HUSKY
   1111  2b8d				  -	      .byte	%00111000	; HUSKY
   1112  2b8d				  -	      .byte	%00111000	; HUSKY
   1113  2b8d				  -	      .byte	%00111000	; HUSKY
   1114  2b8d				  -	      .byte	%00111000	; HUSKY
   1115  2b8d				  -	      .byte	%00111000	; HUSKY
   1116  2b8d				  -	      .byte	%00111000	; HUSKY
   1117  2b8d				  -	      .byte	%00111000	; HUSKY
   1118  2b8d				  -
   1119  2b8d				  -			;byte %00000000 ; HUSKY
   1120  2b8d				  -
   1121  2b8d				  -	      .byte	%11111110	; HUSKY
   1122  2b8d				  -	      .byte	%11111110	; HUSKY
   1123  2b8d				  -	      .byte	%11100000	; HUSKY
   1124  2b8d				  -	      .byte	%11111100	; HUSKY
   1125  2b8d				  -	      .byte	%01111110	; HUSKY
   1126  2b8d				  -	      .byte	%00001110	; HUSKY
   1127  2b8d				  -	      .byte	%11111110	; HUSKY
   1128  2b8d				  -	      .byte	%11111100	; HUSKY
   1129  2b8d				  -
   1130  2b8d				  -			;byte %00000000 ; HUSKY
   1131  2b8d				  -
   1132  2b8d				  -	      .byte	%11111100	; HUSKY
   1133  2b8d				  -	      .byte	%11111110	; HUSKY
   1134  2b8d				  -	      .byte	%00001110	; HUSKY
   1135  2b8d				  -	      .byte	%11111100	; HUSKY
   1136  2b8d				  -	      .byte	%11111100	; HUSKY
   1137  2b8d				  -	      .byte	%00001110	; HUSKY
   1138  2b8d				  -	      .byte	%11111110	; HUSKY
   1139  2b8d				  -	      .byte	%11111100	; HUSKY
   1140  2b8d				  -
   1141  2b8d				  -			;byte %00000000 ; HUSKY
   1142  2b8d				  -
   1143  2b8d				  -	      .byte	%00011100	; HUSKY
   1144  2b8d				  -	      .byte	%00011100	; HUSKY
   1145  2b8d				  -	      .byte	%11111110	; HUSKY
   1146  2b8d				  -	      .byte	%11111110	; HUSKY
   1147  2b8d				  -	      .byte	%11011100	; HUSKY
   1148  2b8d				  -	      .byte	%11011100	; HUSKY
   1149  2b8d				  -	      .byte	%00011100	; HUSKY
   1150  2b8d				  -	      .byte	%00011100	; HUSKY
   1151  2b8d				  -
   1152  2b8d				  -			;byte %00000000 ; HUSKY
   1153  2b8d				  -
   1154  2b8d				  -	      .byte	%11111100	; HUSKY
   1155  2b8d				  -	      .byte	%11111110	; HUSKY
   1156  2b8d				  -	      .byte	%00001110	; HUSKY
   1157  2b8d				  -	      .byte	%11111110	; HUSKY
   1158  2b8d				  -	      .byte	%11111100	; HUSKY
   1159  2b8d				  -	      .byte	%11100000	; HUSKY
   1160  2b8d				  -	      .byte	%11111110	; HUSKY
   1161  2b8d				  -	      .byte	%11111110	; HUSKY
   1162  2b8d				  -
   1163  2b8d				  -			;byte %00000000 ; HUSKY
   1164  2b8d				  -
   1165  2b8d				  -	      .byte	%01111100	; HUSKY
   1166  2b8d				  -	      .byte	%11111110	; HUSKY
   1167  2b8d				  -	      .byte	%11101110	; HUSKY
   1168  2b8d				  -	      .byte	%11111110	; HUSKY
   1169  2b8d				  -	      .byte	%11111100	; HUSKY
   1170  2b8d				  -	      .byte	%11100000	; HUSKY
   1171  2b8d				  -	      .byte	%11111110	; HUSKY
   1172  2b8d				  -	      .byte	%01111110	; HUSKY
   1173  2b8d				  -
   1174  2b8d				  -			;byte %00000000 ; HUSKY
   1175  2b8d				  -
   1176  2b8d				  -	      .byte	%00111000	; HUSKY
   1177  2b8d				  -	      .byte	%00111000	; HUSKY
   1178  2b8d				  -	      .byte	%00111000	; HUSKY
   1179  2b8d				  -	      .byte	%00111000	; HUSKY
   1180  2b8d				  -	      .byte	%00011100	; HUSKY
   1181  2b8d				  -	      .byte	%00001110	; HUSKY
   1182  2b8d				  -	      .byte	%11111110	; HUSKY
   1183  2b8d				  -	      .byte	%11111110	; HUSKY
   1184  2b8d				  -
   1185  2b8d				  -			;byte %00000000 ; HUSKY
   1186  2b8d				  -
   1187  2b8d				  -	      .byte	%01111100	; HUSKY
   1188  2b8d				  -	      .byte	%11111110	; HUSKY
   1189  2b8d				  -	      .byte	%11101110	; HUSKY
   1190  2b8d				  -	      .byte	%11111110	; HUSKY
   1191  2b8d				  -	      .byte	%01111100	; HUSKY
   1192  2b8d				  -	      .byte	%11101110	; HUSKY
   1193  2b8d				  -	      .byte	%11111110	; HUSKY
   1194  2b8d				  -	      .byte	%01111100	; HUSKY
   1195  2b8d				  -
   1196  2b8d				  -			;byte %00000000 ; HUSKY
   1197  2b8d				  -
   1198  2b8d				  -	      .byte	%11111100	; HUSKY
   1199  2b8d				  -	      .byte	%11111110	; HUSKY
   1200  2b8d				  -	      .byte	%00001110	; HUSKY
   1201  2b8d				  -	      .byte	%01111110	; HUSKY
   1202  2b8d				  -	      .byte	%11111110	; HUSKY
   1203  2b8d				  -	      .byte	%11101110	; HUSKY
   1204  2b8d				  -	      .byte	%11111110	; HUSKY
   1205  2b8d				  -	      .byte	%01111100	; HUSKY
   1206  2b8d				  -
   1207  2b8d					      endif		; HUSKY
   1208  2b8d
   1209  2b8d
   1210  2b8d				  -	      if	fontstyle == SNAKE
   1211  2b8d				  -
   1212  2b8d				  -			;byte %00000000 ; SNAKE
   1213  2b8d				  -
   1214  2b8d				  -	      .byte	%01111110	; SNAKE
   1215  2b8d				  -	      .byte	%01000010	; SNAKE
   1216  2b8d				  -	      .byte	%01000010	; SNAKE
   1217  2b8d				  -	      .byte	%01000010	; SNAKE
   1218  2b8d				  -	      .byte	%01000010	; SNAKE
   1219  2b8d				  -	      .byte	%01000010	; SNAKE
   1220  2b8d				  -	      .byte	%01000010	; SNAKE
   1221  2b8d				  -	      .byte	%01111110	; SNAKE
   1222  2b8d				  -
   1223  2b8d				  -			;byte %00000000 ; SNAKE
   1224  2b8d				  -
   1225  2b8d				  -	      .byte	%00111000	; SNAKE
   1226  2b8d				  -	      .byte	%00101000	; SNAKE
   1227  2b8d				  -	      .byte	%00001000	; SNAKE
   1228  2b8d				  -	      .byte	%00001000	; SNAKE
   1229  2b8d				  -	      .byte	%00001000	; SNAKE
   1230  2b8d				  -	      .byte	%00001000	; SNAKE
   1231  2b8d				  -	      .byte	%00001000	; SNAKE
   1232  2b8d				  -	      .byte	%00111000	; SNAKE
   1233  2b8d				  -
   1234  2b8d				  -			;byte %00000000 ; SNAKE
   1235  2b8d				  -
   1236  2b8d				  -	      .byte	%01111110	; SNAKE
   1237  2b8d				  -	      .byte	%01000010	; SNAKE
   1238  2b8d				  -	      .byte	%01000110	; SNAKE
   1239  2b8d				  -	      .byte	%01000000	; SNAKE
   1240  2b8d				  -	      .byte	%01111110	; SNAKE
   1241  2b8d				  -	      .byte	%00000010	; SNAKE
   1242  2b8d				  -	      .byte	%01000010	; SNAKE
   1243  2b8d				  -	      .byte	%01111110	; SNAKE
   1244  2b8d				  -
   1245  2b8d				  -			;byte %00000000 ; SNAKE
   1246  2b8d				  -
   1247  2b8d				  -	      .byte	%01111110	; SNAKE
   1248  2b8d				  -	      .byte	%01000010	; SNAKE
   1249  2b8d				  -	      .byte	%01100010	; SNAKE
   1250  2b8d				  -	      .byte	%00000010	; SNAKE
   1251  2b8d				  -	      .byte	%01111110	; SNAKE
   1252  2b8d				  -	      .byte	%00000010	; SNAKE
   1253  2b8d				  -	      .byte	%01000010	; SNAKE
   1254  2b8d				  -	      .byte	%01111110	; SNAKE
   1255  2b8d				  -
   1256  2b8d				  -			;byte %00000000 ; SNAKE
   1257  2b8d				  -
   1258  2b8d				  -	      .byte	%00001110	; SNAKE
   1259  2b8d				  -	      .byte	%00001010	; SNAKE
   1260  2b8d				  -	      .byte	%00000010	; SNAKE
   1261  2b8d				  -	      .byte	%01111110	; SNAKE
   1262  2b8d				  -	      .byte	%01000010	; SNAKE
   1263  2b8d				  -	      .byte	%01000010	; SNAKE
   1264  2b8d				  -	      .byte	%01000010	; SNAKE
   1265  2b8d				  -	      .byte	%01100110	; SNAKE
   1266  2b8d				  -
   1267  2b8d				  -			;byte %00000000 ; SNAKE
   1268  2b8d				  -
   1269  2b8d				  -	      .byte	%01111110	; SNAKE
   1270  2b8d				  -	      .byte	%01000010	; SNAKE
   1271  2b8d				  -	      .byte	%01100010	; SNAKE
   1272  2b8d				  -	      .byte	%00000010	; SNAKE
   1273  2b8d				  -	      .byte	%01111110	; SNAKE
   1274  2b8d				  -	      .byte	%01000000	; SNAKE
   1275  2b8d				  -	      .byte	%01000010	; SNAKE
   1276  2b8d				  -	      .byte	%01111110	; SNAKE
   1277  2b8d				  -
   1278  2b8d				  -			;byte %00000000 ; SNAKE
   1279  2b8d				  -
   1280  2b8d				  -	      .byte	%01111110	; SNAKE
   1281  2b8d				  -	      .byte	%01000010	; SNAKE
   1282  2b8d				  -	      .byte	%01000010	; SNAKE
   1283  2b8d				  -	      .byte	%01111110	; SNAKE
   1284  2b8d				  -	      .byte	%01000000	; SNAKE
   1285  2b8d				  -	      .byte	%01000110	; SNAKE
   1286  2b8d				  -	      .byte	%01000010	; SNAKE
   1287  2b8d				  -	      .byte	%01111110	; SNAKE
   1288  2b8d				  -
   1289  2b8d				  -			;byte %00000000 ; SNAKE
   1290  2b8d				  -
   1291  2b8d				  -	      .byte	%00000110	; SNAKE
   1292  2b8d				  -	      .byte	%00000010	; SNAKE
   1293  2b8d				  -	      .byte	%00000010	; SNAKE
   1294  2b8d				  -	      .byte	%00000010	; SNAKE
   1295  2b8d				  -	      .byte	%00000010	; SNAKE
   1296  2b8d				  -	      .byte	%01100010	; SNAKE
   1297  2b8d				  -	      .byte	%01000010	; SNAKE
   1298  2b8d				  -	      .byte	%01111110	; SNAKE
   1299  2b8d				  -
   1300  2b8d				  -			;byte %00000000 ; SNAKE
   1301  2b8d				  -
   1302  2b8d				  -	      .byte	%01111110	; SNAKE
   1303  2b8d				  -	      .byte	%01000010	; SNAKE
   1304  2b8d				  -	      .byte	%01000010	; SNAKE
   1305  2b8d				  -	      .byte	%01000010	; SNAKE
   1306  2b8d				  -	      .byte	%01111110	; SNAKE
   1307  2b8d				  -	      .byte	%01000010	; SNAKE
   1308  2b8d				  -	      .byte	%01000010	; SNAKE
   1309  2b8d				  -	      .byte	%01111110	; SNAKE
   1310  2b8d				  -
   1311  2b8d				  -			;byte %00000000 ; SNAKE
   1312  2b8d				  -
   1313  2b8d				  -	      .byte	%00001110	; SNAKE
   1314  2b8d				  -	      .byte	%00001010	; SNAKE
   1315  2b8d				  -	      .byte	%00000010	; SNAKE
   1316  2b8d				  -	      .byte	%00000010	; SNAKE
   1317  2b8d				  -	      .byte	%01111110	; SNAKE
   1318  2b8d				  -	      .byte	%01000010	; SNAKE
   1319  2b8d				  -	      .byte	%01000010	; SNAKE
   1320  2b8d				  -	      .byte	%01111110	; SNAKE
   1321  2b8d				  -
   1322  2b8d				  -
   1323  2b8d					      endif		; SNAKE
   1324  2b8d
   1325  2b8d				  -	      if	fontstyle == PLOK
   1326  2b8d				  -
   1327  2b8d				  -			;byte %00000000 ; PLOK
   1328  2b8d				  -
   1329  2b8d				  -	      .byte	%00000000	; PLOK
   1330  2b8d				  -	      .byte	%00111000	; PLOK
   1331  2b8d				  -	      .byte	%01100100	; PLOK
   1332  2b8d				  -	      .byte	%01100010	; PLOK
   1333  2b8d				  -	      .byte	%01100010	; PLOK
   1334  2b8d				  -	      .byte	%00110110	; PLOK
   1335  2b8d				  -	      .byte	%00011100	; PLOK
   1336  2b8d				  -	      .byte	%00000000	; PLOK
   1337  2b8d				  -
   1338  2b8d				  -			;byte %00000000 ; PLOK
   1339  2b8d				  -
   1340  2b8d				  -	      .byte	%00000000	; PLOK
   1341  2b8d				  -	      .byte	%00010000	; PLOK
   1342  2b8d				  -	      .byte	%00011100	; PLOK
   1343  2b8d				  -	      .byte	%00011100	; PLOK
   1344  2b8d				  -	      .byte	%00011000	; PLOK
   1345  2b8d				  -	      .byte	%00111000	; PLOK
   1346  2b8d				  -	      .byte	%00011000	; PLOK
   1347  2b8d				  -	      .byte	%00000000	; PLOK
   1348  2b8d				  -
   1349  2b8d				  -			;byte %00000000 ; PLOK
   1350  2b8d				  -
   1351  2b8d				  -	      .byte	%00000000	; PLOK
   1352  2b8d				  -	      .byte	%00001110	; PLOK
   1353  2b8d				  -	      .byte	%01111110	; PLOK
   1354  2b8d				  -	      .byte	%00011000	; PLOK
   1355  2b8d				  -	      .byte	%00001100	; PLOK
   1356  2b8d				  -	      .byte	%00000110	; PLOK
   1357  2b8d				  -	      .byte	%00111100	; PLOK
   1358  2b8d				  -	      .byte	%00000000	; PLOK
   1359  2b8d				  -
   1360  2b8d				  -			;byte %00000000 ; PLOK
   1361  2b8d				  -
   1362  2b8d				  -	      .byte	%00000000	; PLOK
   1363  2b8d				  -	      .byte	%00111100	; PLOK
   1364  2b8d				  -	      .byte	%01101110	; PLOK
   1365  2b8d				  -	      .byte	%00001110	; PLOK
   1366  2b8d				  -	      .byte	%00011100	; PLOK
   1367  2b8d				  -	      .byte	%00000110	; PLOK
   1368  2b8d				  -	      .byte	%01111100	; PLOK
   1369  2b8d				  -	      .byte	%00000000	; PLOK
   1370  2b8d				  -
   1371  2b8d				  -			;byte %00000000 ; PLOK
   1372  2b8d				  -
   1373  2b8d				  -	      .byte	%00000000	; PLOK
   1374  2b8d				  -	      .byte	%00011000	; PLOK
   1375  2b8d				  -	      .byte	%01111110	; PLOK
   1376  2b8d				  -	      .byte	%01101100	; PLOK
   1377  2b8d				  -	      .byte	%00100100	; PLOK
   1378  2b8d				  -	      .byte	%00110000	; PLOK
   1379  2b8d				  -	      .byte	%00110000	; PLOK
   1380  2b8d				  -	      .byte	%00000000	; PLOK
   1381  2b8d				  -
   1382  2b8d				  -			;byte %00000000 ; PLOK
   1383  2b8d				  -
   1384  2b8d				  -	      .byte	%00000000	; PLOK
   1385  2b8d				  -	      .byte	%00111100	; PLOK
   1386  2b8d				  -	      .byte	%01001110	; PLOK
   1387  2b8d				  -	      .byte	%00011100	; PLOK
   1388  2b8d				  -	      .byte	%01100000	; PLOK
   1389  2b8d				  -	      .byte	%01111100	; PLOK
   1390  2b8d				  -	      .byte	%00011100	; PLOK
   1391  2b8d				  -	      .byte	%00000000	; PLOK
   1392  2b8d				  -
   1393  2b8d				  -			;byte %00000000 ; PLOK
   1394  2b8d				  -
   1395  2b8d				  -	      .byte	%00000000	; PLOK
   1396  2b8d				  -	      .byte	%00111100	; PLOK
   1397  2b8d				  -	      .byte	%01000110	; PLOK
   1398  2b8d				  -	      .byte	%01101100	; PLOK
   1399  2b8d				  -	      .byte	%01110000	; PLOK
   1400  2b8d				  -	      .byte	%00111000	; PLOK
   1401  2b8d				  -	      .byte	%00010000	; PLOK
   1402  2b8d				  -	      .byte	%00000000	; PLOK
   1403  2b8d				  -
   1404  2b8d				  -			;byte %00000000 ; PLOK
   1405  2b8d				  -
   1406  2b8d				  -	      .byte	%00000000	; PLOK
   1407  2b8d				  -	      .byte	%00111100	; PLOK
   1408  2b8d				  -	      .byte	%00011100	; PLOK
   1409  2b8d				  -	      .byte	%00001100	; PLOK
   1410  2b8d				  -	      .byte	%00000110	; PLOK
   1411  2b8d				  -	      .byte	%01111110	; PLOK
   1412  2b8d				  -	      .byte	%00110000	; PLOK
   1413  2b8d				  -	      .byte	%00000000	; PLOK
   1414  2b8d				  -
   1415  2b8d				  -			;byte %00000000 ; PLOK
   1416  2b8d				  -
   1417  2b8d				  -	      .byte	%00000000	; PLOK
   1418  2b8d				  -	      .byte	%00111100	; PLOK
   1419  2b8d				  -	      .byte	%01001110	; PLOK
   1420  2b8d				  -	      .byte	%01101110	; PLOK
   1421  2b8d				  -	      .byte	%00111100	; PLOK
   1422  2b8d				  -	      .byte	%01100100	; PLOK
   1423  2b8d				  -	      .byte	%00111000	; PLOK
   1424  2b8d				  -	      .byte	%00000000	; PLOK
   1425  2b8d				  -
   1426  2b8d				  -			;byte %00000000 ; PLOK
   1427  2b8d				  -
   1428  2b8d				  -	      .byte	%00000000	; PLOK
   1429  2b8d				  -	      .byte	%00011000	; PLOK
   1430  2b8d				  -	      .byte	%00001100	; PLOK
   1431  2b8d				  -	      .byte	%00011100	; PLOK
   1432  2b8d				  -	      .byte	%00100110	; PLOK
   1433  2b8d				  -	      .byte	%01001110	; PLOK
   1434  2b8d				  -	      .byte	%00111100	; PLOK
   1435  2b8d				  -	      .byte	%00000000	; PLOK
   1436  2b8d				  -
   1437  2b8d					      endif		; PLOK
   1438  2b8d
   1439  2b8d							; ### any characters that aren't font specific follow...
   1440  2b8d
   1441  2b8d				  -	      ifconst	fontcharSPACE
   1442  2b8d				  -			;byte %00000000 ; SYMBOLS
   1443  2b8d				  -
   1444  2b8d				  -	      .byte	%00000000	; SYMBOLS
   1445  2b8d				  -	      .byte	%00000000	; SYMBOLS
   1446  2b8d				  -	      .byte	%00000000	; SYMBOLS
   1447  2b8d				  -	      .byte	%00000000	; SYMBOLS
   1448  2b8d				  -	      .byte	%00000000	; SYMBOLS
   1449  2b8d				  -	      .byte	%00000000	; SYMBOLS
   1450  2b8d				  -	      .byte	%00000000	; SYMBOLS
   1451  2b8d				  -	      .byte	%00000000	; SYMBOLS
   1452  2b8d				  -
   1453  2b8d				  -			;byte %00000000 ; SYMBOLS
   1454  2b8d					      endif		; fontcharSPACE
   1455  2b8d
   1456  2b8d				  -	      ifconst	fontcharDOLLAR
   1457  2b8d				  -			;byte %00000000 ; SYMBOLS
   1458  2b8d				  -
   1459  2b8d				  -	      .byte	%00000000	; SYMBOLS
   1460  2b8d				  -	      .byte	%00010000	; SYMBOLS
   1461  2b8d				  -	      .byte	%01111100	; SYMBOLS
   1462  2b8d				  -	      .byte	%00010010	; SYMBOLS
   1463  2b8d				  -	      .byte	%01111100	; SYMBOLS
   1464  2b8d				  -	      .byte	%10010000	; SYMBOLS
   1465  2b8d				  -	      .byte	%01111100	; SYMBOLS
   1466  2b8d				  -	      .byte	%00010000	; SYMBOLS
   1467  2b8d				  -
   1468  2b8d				  -			;byte %00000000 ; SYMBOLS
   1469  2b8d				  -
   1470  2b8d					      endif		; fontcharDOLLAR
   1471  2b8d
   1472  2b8d				  -	      ifconst	fontcharPOUND
   1473  2b8d				  -			;byte %00000000 ; SYMBOLS
   1474  2b8d				  -
   1475  2b8d				  -	      .byte	%01111110	; SYMBOLS
   1476  2b8d				  -	      .byte	%01000000	; SYMBOLS
   1477  2b8d				  -	      .byte	%00100000	; SYMBOLS
   1478  2b8d				  -	      .byte	%00100000	; SYMBOLS
   1479  2b8d				  -	      .byte	%01111000	; SYMBOLS
   1480  2b8d				  -	      .byte	%00100000	; SYMBOLS
   1481  2b8d				  -	      .byte	%00100010	; SYMBOLS
   1482  2b8d				  -	      .byte	%00011100	; SYMBOLS
   1483  2b8d				  -
   1484  2b8d				  -			;byte %00000000 ; SYMBOLS
   1485  2b8d				  -
   1486  2b8d					      endif		; fontcharPOUND
   1487  2b8d
   1488  2b8d
   1489  2b8d				  -	      ifconst	fontcharMRHAPPY
   1490  2b8d				  -			;byte %00000000 ; SYMBOLS
   1491  2b8d				  -
   1492  2b8d				  -	      .byte	%00111100	; SYMBOLS
   1493  2b8d				  -	      .byte	%01100110	; SYMBOLS
   1494  2b8d				  -	      .byte	%01011010	; SYMBOLS
   1495  2b8d				  -	      .byte	%01111110	; SYMBOLS
   1496  2b8d				  -	      .byte	%01111110	; SYMBOLS
   1497  2b8d				  -	      .byte	%01011010	; SYMBOLS
   1498  2b8d				  -	      .byte	%01111110	; SYMBOLS
   1499  2b8d				  -	      .byte	%00111100	; SYMBOLS
   1500  2b8d				  -
   1501  2b8d				  -			;byte %00000000 ; SYMBOLS
   1502  2b8d				  -
   1503  2b8d					      endif		; fontcharMRHAPPY
   1504  2b8d
   1505  2b8d				  -	      ifconst	fontcharMRSAD
   1506  2b8d				  -			;byte %00000000 ; SYMBOLS
   1507  2b8d				  -
   1508  2b8d				  -	      .byte	%00111100	; SYMBOLS
   1509  2b8d				  -	      .byte	%01011010	; SYMBOLS
   1510  2b8d				  -	      .byte	%01100110	; SYMBOLS
   1511  2b8d				  -	      .byte	%01111110	; SYMBOLS
   1512  2b8d				  -	      .byte	%01111110	; SYMBOLS
   1513  2b8d				  -	      .byte	%01011010	; SYMBOLS
   1514  2b8d				  -	      .byte	%01111110	; SYMBOLS
   1515  2b8d				  -	      .byte	%00111100	; SYMBOLS
   1516  2b8d				  -
   1517  2b8d				  -			;byte %00000000 ; SYMBOLS
   1518  2b8d				  -
   1519  2b8d					      endif		; fontcharMRSAD
   1520  2b8d
   1521  2b8d
   1522  2b8d				  -	      ifconst	fontcharCOPYRIGHT
   1523  2b8d				  -			;byte %00000000 ; SYMBOLS
   1524  2b8d				  -
   1525  2b8d				  -	      .byte	%00000000	; SYMBOLS
   1526  2b8d				  -	      .byte	%00111000	; SYMBOLS
   1527  2b8d				  -	      .byte	%01000100	; SYMBOLS
   1528  2b8d				  -	      .byte	%10111010	; SYMBOLS
   1529  2b8d				  -	      .byte	%10100010	; SYMBOLS
   1530  2b8d				  -	      .byte	%10111010	; SYMBOLS
   1531  2b8d				  -	      .byte	%01000100	; SYMBOLS
   1532  2b8d				  -	      .byte	%00111000	; SYMBOLS
   1533  2b8d				  -
   1534  2b8d				  -			;byte %00000000 ; SYMBOLS
   1535  2b8d				  -
   1536  2b8d					      endif		; fontcharCOPYRIGHT
   1537  2b8d
   1538  2b8d
   1539  2b8d				  -	      ifconst	fontcharFUJI
   1540  2b8d				  -
   1541  2b8d				  -			;byte %00000000 ; ** these commented-out blanks are for the preview generation program
   1542  2b8d				  -
   1543  2b8d				  -	      .byte	%01110000	; SYMBOLS
   1544  2b8d				  -	      .byte	%01111001	; SYMBOLS
   1545  2b8d				  -	      .byte	%00011101	; SYMBOLS
   1546  2b8d				  -	      .byte	%00001101	; SYMBOLS
   1547  2b8d				  -	      .byte	%00001101	; SYMBOLS
   1548  2b8d				  -	      .byte	%00001101	; SYMBOLS
   1549  2b8d				  -	      .byte	%00001101	; SYMBOLS
   1550  2b8d				  -	      .byte	%00000000	; SYMBOLS
   1551  2b8d				  -
   1552  2b8d				  -			;byte %00000000 ; SYMBOLS
   1553  2b8d				  -
   1554  2b8d				  -	      .byte	%00001110	; SYMBOLS
   1555  2b8d				  -	      .byte	%10011110	; SYMBOLS
   1556  2b8d				  -	      .byte	%10111000	; SYMBOLS
   1557  2b8d				  -	      .byte	%10110000	; SYMBOLS
   1558  2b8d				  -	      .byte	%10110000	; SYMBOLS
   1559  2b8d				  -	      .byte	%10110000	; SYMBOLS
   1560  2b8d				  -	      .byte	%10110000	; SYMBOLS
   1561  2b8d				  -	      .byte	%00000000	; SYMBOLS
   1562  2b8d				  -
   1563  2b8d				  -			;byte %00000000 ; SYMBOLS
   1564  2b8d				  -
   1565  2b8d					      endif		; fontcharFUJI
   1566  2b8d
   1567  2b8d
   1568  2b8d				  -	      ifconst	fontcharHEART
   1569  2b8d				  -			;byte %00000000 ; SYMBOLS
   1570  2b8d				  -
   1571  2b8d				  -	      .byte	%00010000	; SYMBOLS
   1572  2b8d				  -	      .byte	%00111000	; SYMBOLS
   1573  2b8d				  -	      .byte	%01111100	; SYMBOLS
   1574  2b8d				  -	      .byte	%01111100	; SYMBOLS
   1575  2b8d				  -	      .byte	%11111110	; SYMBOLS
   1576  2b8d				  -	      .byte	%11111110	; SYMBOLS
   1577  2b8d				  -	      .byte	%11101110	; SYMBOLS
   1578  2b8d				  -	      .byte	%01000100	; SYMBOLS
   1579  2b8d				  -
   1580  2b8d				  -			;byte %00000000 ; SYMBOLS
   1581  2b8d				  -
   1582  2b8d					      endif		; fontcharHEART
   1583  2b8d
   1584  2b8d				  -	      ifconst	fontcharDIAMOND
   1585  2b8d				  -			;byte %00000000 ; SYMBOLS
   1586  2b8d				  -
   1587  2b8d				  -	      .byte	%00010000	; SYMBOLS
   1588  2b8d				  -	      .byte	%00111000	; SYMBOLS
   1589  2b8d				  -	      .byte	%01111100	; SYMBOLS
   1590  2b8d				  -	      .byte	%11111110	; SYMBOLS
   1591  2b8d				  -	      .byte	%11111110	; SYMBOLS
   1592  2b8d				  -	      .byte	%01111100	; SYMBOLS
   1593  2b8d				  -	      .byte	%00111000	; SYMBOLS
   1594  2b8d				  -	      .byte	%00010000	; SYMBOLS
   1595  2b8d				  -
   1596  2b8d				  -			;byte %00000000 ; SYMBOLS
   1597  2b8d				  -
   1598  2b8d					      endif		; fontcharDIAMOND
   1599  2b8d
   1600  2b8d				  -	      ifconst	fontcharSPADE
   1601  2b8d				  -			;byte %00000000 ; SYMBOLS
   1602  2b8d				  -
   1603  2b8d				  -	      .byte	%00111000	; SYMBOLS
   1604  2b8d				  -	      .byte	%00010000	; SYMBOLS
   1605  2b8d				  -	      .byte	%01010100	; SYMBOLS
   1606  2b8d				  -	      .byte	%11111110	; SYMBOLS
   1607  2b8d				  -	      .byte	%11111110	; SYMBOLS
   1608  2b8d				  -	      .byte	%01111100	; SYMBOLS
   1609  2b8d				  -	      .byte	%00111000	; SYMBOLS
   1610  2b8d				  -	      .byte	%00010000	; SYMBOLS
   1611  2b8d				  -
   1612  2b8d				  -			;byte %00000000 ; SYMBOLS
   1613  2b8d				  -
   1614  2b8d					      endif		; fontcharSPADE
   1615  2b8d
   1616  2b8d				  -	      ifconst	fontcharCLUB
   1617  2b8d				  -			;byte %00000000 ; SYMBOLS
   1618  2b8d				  -
   1619  2b8d				  -	      .byte	%00111000	; SYMBOLS
   1620  2b8d				  -	      .byte	%00010000	; SYMBOLS
   1621  2b8d				  -	      .byte	%11010110	; SYMBOLS
   1622  2b8d				  -	      .byte	%11111110	; SYMBOLS
   1623  2b8d				  -	      .byte	%11010110	; SYMBOLS
   1624  2b8d				  -	      .byte	%00111000	; SYMBOLS
   1625  2b8d				  -	      .byte	%00111000	; SYMBOLS
   1626  2b8d				  -	      .byte	%00000000	; SYMBOLS
   1627  2b8d				  -
   1628  2b8d				  -			;byte %00000000 ; SYMBOLS
   1629  2b8d				  -
   1630  2b8d					      endif		; fontcharCLUB
   1631  2b8d
   1632  2b8d
   1633  2b8d				  -	      ifconst	fontcharCOLON
   1634  2b8d				  -			;byte %00000000 ; SYMBOLS
   1635  2b8d				  -
   1636  2b8d				  -	      .byte	%00000000	; SYMBOLS
   1637  2b8d				  -	      .byte	%00011000	; SYMBOLS
   1638  2b8d				  -	      .byte	%00011000	; SYMBOLS
   1639  2b8d				  -	      .byte	%00000000	; SYMBOLS
   1640  2b8d				  -	      .byte	%00000000	; SYMBOLS
   1641  2b8d				  -	      .byte	%00011000	; SYMBOLS
   1642  2b8d				  -	      .byte	%00011000	; SYMBOLS
   1643  2b8d				  -	      .byte	%00000000	; SYMBOLS
   1644  2b8d				  -
   1645  2b8d				  -			;byte %00000000 ; SYMBOLS
   1646  2b8d				  -
   1647  2b8d					      endif		; fontcharCOLON
   1648  2b8d
   1649  2b8d
   1650  2b8d				  -	      ifconst	fontcharBLOCK
   1651  2b8d				  -
   1652  2b8d				  -			;byte %00000000 ; SYMBOLS
   1653  2b8d				  -
   1654  2b8d				  -	      .byte	%11111111	; SYMBOLS
   1655  2b8d				  -	      .byte	%11111111	; SYMBOLS
   1656  2b8d				  -	      .byte	%11111111	; SYMBOLS
   1657  2b8d				  -	      .byte	%11111111	; SYMBOLS
   1658  2b8d				  -	      .byte	%11111111	; SYMBOLS
   1659  2b8d				  -	      .byte	%11111111	; SYMBOLS
   1660  2b8d				  -	      .byte	%11111111	; SYMBOLS
   1661  2b8d				  -	      .byte	%11111111	; SYMBOLS
   1662  2b8d				  -
   1663  2b8d				  -			;byte %00000000 ; SYMBOLS
   1664  2b8d				  -
   1665  2b8d					      endif		; fontcharBLOCK
   1666  2b8d
   1667  2b8d				  -	      ifconst	fontcharUNDERLINE
   1668  2b8d				  -
   1669  2b8d				  -			;byte %00000000 ; SYMBOLS
   1670  2b8d				  -
   1671  2b8d				  -	      .byte	%11111111	; SYMBOLS
   1672  2b8d				  -	      .byte	%00000000	; SYMBOLS
   1673  2b8d				  -	      .byte	%00000000	; SYMBOLS
   1674  2b8d				  -	      .byte	%00000000	; SYMBOLS
   1675  2b8d				  -	      .byte	%00000000	; SYMBOLS
   1676  2b8d				  -	      .byte	%00000000	; SYMBOLS
   1677  2b8d				  -	      .byte	%00000000	; SYMBOLS
   1678  2b8d				  -	      .byte	%00000000	; SYMBOLS
   1679  2b8d				  -
   1680  2b8d				  -			;byte %00000000 ; SYMBOLS
   1681  2b8d				  -
   1682  2b8d					      endif		; fontcharUNDERLINE
   1683  2b8d
   1684  2b8d				  -	      ifconst	fontcharARISIDE
   1685  2b8d				  -			;byte %00000000 ; SYMBOLS
   1686  2b8d				  -
   1687  2b8d				  -	      .byte	%00000000	; SYMBOLS
   1688  2b8d				  -	      .byte	%00101010	; SYMBOLS
   1689  2b8d				  -	      .byte	%00101010	; SYMBOLS
   1690  2b8d				  -	      .byte	%00101100	; SYMBOLS
   1691  2b8d				  -	      .byte	%01111111	; SYMBOLS
   1692  2b8d				  -	      .byte	%00110111	; SYMBOLS
   1693  2b8d				  -	      .byte	%00000010	; SYMBOLS
   1694  2b8d				  -	      .byte	%00000001	; SYMBOLS
   1695  2b8d				  -
   1696  2b8d				  -			;byte %00000000 ; SYMBOLS
   1697  2b8d				  -
   1698  2b8d					      endif		; fontcharARISIDE
   1699  2b8d
   1700  2b8d				  -	      ifconst	fontcharARIFACE
   1701  2b8d				  -			;byte %00000000 ; SYMBOLS
   1702  2b8d				  -
   1703  2b8d				  -	      .byte	%00001000	; SYMBOLS
   1704  2b8d				  -	      .byte	%00011100	; SYMBOLS
   1705  2b8d				  -	      .byte	%00111110	; SYMBOLS
   1706  2b8d				  -	      .byte	%00101010	; SYMBOLS
   1707  2b8d				  -	      .byte	%00011100	; SYMBOLS
   1708  2b8d				  -	      .byte	%01010100	; SYMBOLS
   1709  2b8d				  -	      .byte	%00100100	; SYMBOLS
   1710  2b8d				  -	      .byte	%00000010	; SYMBOLS
   1711  2b8d				  -
   1712  2b8d				  -			;byte %00000000 ; SYMBOLS
   1713  2b8d				  -
   1714  2b8d				  -
   1715  2b8d					      endif		; fontcharARIRACE
   1716  2b8d
------- FILE titlescreen/asm/titlescreen.asm
    303  2b8d					      endif
    304  2b8d
    305  2b8d					      ifconst	mk_gameselect_on
------- FILE titlescreen/gameselect_image.asm LEVEL 3 PASS 3
      0  2b8d					      include	"titlescreen/gameselect_image.asm"
      1  2b8d				  -	      ifnconst	bmp_gameselect_color
      2  2b8d				  -bmp_gameselect_color
      3  2b8d					      endif
      4  2b8d		       0f		      .byte.b	$0f
      5  2b8e
      6  2b8e				  -	      if	>. != >[.+5]
      7  2b8e				  -	      align	256
      8  2b8e					      endif
      9  2b8e				   bmp_gameselect_CHAR0
     10  2b8e
     11  2b8e		       7a		      .byte.b	%01111010
     12  2b8f		       8a		      .byte.b	%10001010
     13  2b90		       bb		      .byte.b	%10111011
     14  2b91		       82		      .byte.b	%10000010
     15  2b92		       79		      .byte.b	%01111001
     16  2b93
     17  2b93				  -	      if	>. != >[.+5]
     18  2b93				  -	      align	256
     19  2b93					      endif
     20  2b93				   bmp_gameselect_CHAR1
     21  2b93
     22  2b93		       51		      .byte.b	%01010001
     23  2b94		       51		      .byte.b	%01010001
     24  2b95		       d5		      .byte.b	%11010101
     25  2b96		       5b		      .byte.b	%01011011
     26  2b97		       91		      .byte.b	%10010001
     27  2b98
     28  2b98				  -	      if	>. != >[.+5]
     29  2b98				  -	      align	256
     30  2b98					      endif
     31  2b98				   bmp_gameselect_CHAR2
     32  2b98		       78		      .byte.b	%01111000
     33  2b99		       40		      .byte.b	%01000000
     34  2b9a		       70		      .byte.b	%01110000
     35  2b9b		       40		      .byte.b	%01000000
     36  2b9c		       78		      .byte.b	%01111000
     37  2b9d
     38  2b9d				  -	      if	>. != >[.+5]
     39  2b9d				  -	      align	256
     40  2b9d					      endif
     41  2b9d				   bmp_gameselect_CHAR3
     42  2b9d		       00		      .byte.b	%00000000
     43  2b9e		       00		      .byte.b	%00000000
     44  2b9f		       00		      .byte.b	%00000000
     45  2ba0		       00		      .byte.b	%00000000
     46  2ba1		       00		      .byte.b	%00000000
     47  2ba2
     48  2ba2				  -	      if	>. != >[.+80]
     49  2ba2				  -	      align	256
     50  2ba2					      endif
     51  2ba2
     52  2ba2				   font_gameselect_img
     53  2ba2		       3c		      .byte.b	%00111100
     54  2ba3		       66		      .byte.b	%01100110
     55  2ba4		       66		      .byte.b	%01100110
     56  2ba5		       66		      .byte.b	%01100110
     57  2ba6		       3c		      .byte.b	%00111100
     58  2ba7
     59  2ba7		       3c		      .byte.b	%00111100
     60  2ba8		       18		      .byte.b	%00011000
     61  2ba9		       18		      .byte.b	%00011000
     62  2baa		       18		      .byte.b	%00011000
     63  2bab		       38		      .byte.b	%00111000
     64  2bac
     65  2bac		       7e		      .byte.b	%01111110
     66  2bad		       60		      .byte.b	%01100000
     67  2bae		       3c		      .byte.b	%00111100
     68  2baf		       06		      .byte.b	%00000110
     69  2bb0		       7c		      .byte.b	%01111100
     70  2bb1
     71  2bb1		       7c		      .byte.b	%01111100
     72  2bb2		       06		      .byte.b	%00000110
     73  2bb3		       1c		      .byte.b	%00011100
     74  2bb4		       06		      .byte.b	%00000110
     75  2bb5		       7c		      .byte.b	%01111100
     76  2bb6
     77  2bb6		       06		      .byte.b	%00000110
     78  2bb7		       06		      .byte.b	%00000110
     79  2bb8		       7e		      .byte.b	%01111110
     80  2bb9		       66		      .byte.b	%01100110
     81  2bba		       66		      .byte.b	%01100110
     82  2bbb
     83  2bbb		       7c		      .byte.b	%01111100
     84  2bbc		       06		      .byte.b	%00000110
     85  2bbd		       7c		      .byte.b	%01111100
     86  2bbe		       60		      .byte.b	%01100000
     87  2bbf		       7e		      .byte.b	%01111110
     88  2bc0
     89  2bc0		       3c		      .byte.b	%00111100
     90  2bc1		       66		      .byte.b	%01100110
     91  2bc2		       7c		      .byte.b	%01111100
     92  2bc3		       60		      .byte.b	%01100000
     93  2bc4		       3c		      .byte.b	%00111100
     94  2bc5
     95  2bc5		       18		      .byte.b	%00011000
     96  2bc6		       18		      .byte.b	%00011000
     97  2bc7		       0c		      .byte.b	%00001100
     98  2bc8		       06		      .byte.b	%00000110
     99  2bc9		       7e		      .byte.b	%01111110
    100  2bca
    101  2bca		       3c		      .byte.b	%00111100
    102  2bcb		       66		      .byte.b	%01100110
    103  2bcc		       3c		      .byte.b	%00111100
    104  2bcd		       66		      .byte.b	%01100110
    105  2bce		       3c		      .byte.b	%00111100
    106  2bcf
    107  2bcf		       3c		      .byte.b	%00111100
    108  2bd0		       06		      .byte.b	%00000110
    109  2bd1		       3e		      .byte.b	%00111110
    110  2bd2		       66		      .byte.b	%01100110
    111  2bd3		       3c		      .byte.b	%00111100
    112  2bd4
    113  2bd4				  -	      ifnconst	gamenumber
    114  2bd4				  -gamenumber
    115  2bd4					      endif
    116  2bd4		       00		      .byte.b	0
    117  2bd5
------- FILE titlescreen/asm/titlescreen.asm
    307  2bd5					      endif
    308  2bd5
    309  2bd5				  -	      ifconst	mk_player_on
    310  2bd5				  -	      include	"titlescreen/asm/player_kernel.asm"
    311  2bd5					      endif		;mk_player_on
    312  2bd5
    313  2bd5
------- FILE d:\Firmaplus\Firmaplus_intern\Atari\PlusROM\Projekte-batariBasic\CaveApocalypse\C.A.V.E. Apocalypse.bas.asm
   5769  2bd5
   5770  2bd5				   .
   5771  2bd5							; 
   5772  2bd5
   5773  2bd5				   .
   5774  2bd5							; 
   5775  2bd5
   5776  2bd5				   .
   5777  2bd5							; 
   5778  2bd5
   5779  2bd5				   .
   5780  2bd5							; 
   5781  2bd5
   5782  2bd5				   .
   5783  2bd5							; 
   5784  2bd5
   5785  2bd5				   .L0628		;  bank 3
   5786  2bd5
   5787  2bd5					      if	ECHO2
      1020 bytes of ROM space left in bank 2
   5788  2bd5					      echo	"    ",[(start_bank2 - *)]d , "bytes of ROM space left in bank 2")
   5789  2bd5					      endif
   5790  2bd5		       00 01	   ECHO2      =	1
   5791  2fd1					      ORG	$2FF4-bscode_length
   5792  2fd1					      RORG	$BFF4-bscode_length
   5793  2fd1		       a2 ff	   start_bank2 ldx	#$ff
   5794  2fd3				  -	      ifconst	FASTFETCH	; using DPC+
   5795  2fd3				  -	      stx	FASTFETCH
   5796  2fd3					      endif
   5797  2fd3		       9a		      txs
   5798  2fd4				  -	      if	bankswitch == 64
   5799  2fd4				  -	      lda	#(((>(start-1)) & $0F) | $F0)
   5800  2fd4					      else
   5801  2fd4		       a9 f2		      lda	#>(start-1)
   5802  2fd6					      endif
   5803  2fd6		       48		      pha
   5804  2fd7		       a9 b0		      lda	#<(start-1)
   5805  2fd9		       48		      pha
   5806  2fda		       48		      pha
   5807  2fdb		       8a		      txa
   5808  2fdc		       48		      pha
   5809  2fdd		       ba		      tsx
   5810  2fde					      if	bankswitch != 64
   5811  2fde		       b5 04		      lda	4,x	; get high byte of return address
   5812  2fe0		       2a		      rol
   5813  2fe1		       2a		      rol
   5814  2fe2		       2a		      rol
   5815  2fe3		       2a		      rol
   5816  2fe4		       29 03		      and	#bs_mask	;1 3 or 7 for F8/F6/F4
   5817  2fe6		       aa		      tax
   5818  2fe7		       e8		      inx
   5819  2fe8				  -	      else
   5820  2fe8				  -	      lda	4,x	; get high byte of return address
   5821  2fe8				  -	      tay
   5822  2fe8				  -	      ora	#$10	; change our bank nibble into a valid rom mirror
   5823  2fe8				  -	      sta	4,x
   5824  2fe8				  -	      tya
   5825  2fe8				  -	      lsr
   5826  2fe8				  -	      lsr
   5827  2fe8				  -	      lsr
   5828  2fe8				  -	      lsr
   5829  2fe8				  -	      tax
   5830  2fe8				  -	      inx
   5831  2fe8					      endif
   5832  2fe8		       bd f5 1f 	      lda	bankswitch_hotspot-1,x
   5833  2feb		       68		      pla
   5834  2fec		       aa		      tax
   5835  2fed		       68		      pla
   5836  2fee		       60		      rts
   5837  2fef				  -	      if	((* & $1FFF) > ((bankswitch_hotspot & $1FFF) - 1))
   5838  2fef				  -	      echo	"WARNING: size parameter in banksw.asm too small - the program probably will not work."
   5839  2fef				  -	      echo	"Change to",[(*-begin_bscode+1)&$FF]d,"and try again."
   5840  2fef					      endif
   5841  2ffc					      ORG	$2FFC
   5842  2ffc					      RORG	$BFFC
   5843  2ffc		       d1 bf		      .word.w	(start_bank2 & $ffff)
   5844  2ffe		       d1 bf		      .word.w	(start_bank2 & $ffff)
   5845  3000					      ORG	$3000
   5846  3000					      RORG	$D000
   5847  3000					      repeat	256
   5848  3000		       ff		      .byte.b	$ff
   5847  3000					      repend
   5848  3001		       ff		      .byte.b	$ff
   5847  3001					      repend
   5848  3002		       ff		      .byte.b	$ff
   5847  3002					      repend
   5848  3003		       ff		      .byte.b	$ff
   5847  3003					      repend
   5848  3004		       ff		      .byte.b	$ff
   5847  3004					      repend
   5848  3005		       ff		      .byte.b	$ff
   5847  3005					      repend
   5848  3006		       ff		      .byte.b	$ff
   5847  3006					      repend
   5848  3007		       ff		      .byte.b	$ff
   5847  3007					      repend
   5848  3008		       ff		      .byte.b	$ff
   5847  3008					      repend
   5848  3009		       ff		      .byte.b	$ff
   5847  3009					      repend
   5848  300a		       ff		      .byte.b	$ff
   5847  300a					      repend
   5848  300b		       ff		      .byte.b	$ff
   5847  300b					      repend
   5848  300c		       ff		      .byte.b	$ff
   5847  300c					      repend
   5848  300d		       ff		      .byte.b	$ff
   5847  300d					      repend
   5848  300e		       ff		      .byte.b	$ff
   5847  300e					      repend
   5848  300f		       ff		      .byte.b	$ff
   5847  300f					      repend
   5848  3010		       ff		      .byte.b	$ff
   5847  3010					      repend
   5848  3011		       ff		      .byte.b	$ff
   5847  3011					      repend
   5848  3012		       ff		      .byte.b	$ff
   5847  3012					      repend
   5848  3013		       ff		      .byte.b	$ff
   5847  3013					      repend
   5848  3014		       ff		      .byte.b	$ff
   5847  3014					      repend
   5848  3015		       ff		      .byte.b	$ff
   5847  3015					      repend
   5848  3016		       ff		      .byte.b	$ff
   5847  3016					      repend
   5848  3017		       ff		      .byte.b	$ff
   5847  3017					      repend
   5848  3018		       ff		      .byte.b	$ff
   5847  3018					      repend
   5848  3019		       ff		      .byte.b	$ff
   5847  3019					      repend
   5848  301a		       ff		      .byte.b	$ff
   5847  301a					      repend
   5848  301b		       ff		      .byte.b	$ff
   5847  301b					      repend
   5848  301c		       ff		      .byte.b	$ff
   5847  301c					      repend
   5848  301d		       ff		      .byte.b	$ff
   5847  301d					      repend
   5848  301e		       ff		      .byte.b	$ff
   5847  301e					      repend
   5848  301f		       ff		      .byte.b	$ff
   5847  301f					      repend
   5848  3020		       ff		      .byte.b	$ff
   5847  3020					      repend
   5848  3021		       ff		      .byte.b	$ff
   5847  3021					      repend
   5848  3022		       ff		      .byte.b	$ff
   5847  3022					      repend
   5848  3023		       ff		      .byte.b	$ff
   5847  3023					      repend
   5848  3024		       ff		      .byte.b	$ff
   5847  3024					      repend
   5848  3025		       ff		      .byte.b	$ff
   5847  3025					      repend
   5848  3026		       ff		      .byte.b	$ff
   5847  3026					      repend
   5848  3027		       ff		      .byte.b	$ff
   5847  3027					      repend
   5848  3028		       ff		      .byte.b	$ff
   5847  3028					      repend
   5848  3029		       ff		      .byte.b	$ff
   5847  3029					      repend
   5848  302a		       ff		      .byte.b	$ff
   5847  302a					      repend
   5848  302b		       ff		      .byte.b	$ff
   5847  302b					      repend
   5848  302c		       ff		      .byte.b	$ff
   5847  302c					      repend
   5848  302d		       ff		      .byte.b	$ff
   5847  302d					      repend
   5848  302e		       ff		      .byte.b	$ff
   5847  302e					      repend
   5848  302f		       ff		      .byte.b	$ff
   5847  302f					      repend
   5848  3030		       ff		      .byte.b	$ff
   5847  3030					      repend
   5848  3031		       ff		      .byte.b	$ff
   5847  3031					      repend
   5848  3032		       ff		      .byte.b	$ff
   5847  3032					      repend
   5848  3033		       ff		      .byte.b	$ff
   5847  3033					      repend
   5848  3034		       ff		      .byte.b	$ff
   5847  3034					      repend
   5848  3035		       ff		      .byte.b	$ff
   5847  3035					      repend
   5848  3036		       ff		      .byte.b	$ff
   5847  3036					      repend
   5848  3037		       ff		      .byte.b	$ff
   5847  3037					      repend
   5848  3038		       ff		      .byte.b	$ff
   5847  3038					      repend
   5848  3039		       ff		      .byte.b	$ff
   5847  3039					      repend
   5848  303a		       ff		      .byte.b	$ff
   5847  303a					      repend
   5848  303b		       ff		      .byte.b	$ff
   5847  303b					      repend
   5848  303c		       ff		      .byte.b	$ff
   5847  303c					      repend
   5848  303d		       ff		      .byte.b	$ff
   5847  303d					      repend
   5848  303e		       ff		      .byte.b	$ff
   5847  303e					      repend
   5848  303f		       ff		      .byte.b	$ff
   5847  303f					      repend
   5848  3040		       ff		      .byte.b	$ff
   5847  3040					      repend
   5848  3041		       ff		      .byte.b	$ff
   5847  3041					      repend
   5848  3042		       ff		      .byte.b	$ff
   5847  3042					      repend
   5848  3043		       ff		      .byte.b	$ff
   5847  3043					      repend
   5848  3044		       ff		      .byte.b	$ff
   5847  3044					      repend
   5848  3045		       ff		      .byte.b	$ff
   5847  3045					      repend
   5848  3046		       ff		      .byte.b	$ff
   5847  3046					      repend
   5848  3047		       ff		      .byte.b	$ff
   5847  3047					      repend
   5848  3048		       ff		      .byte.b	$ff
   5847  3048					      repend
   5848  3049		       ff		      .byte.b	$ff
   5847  3049					      repend
   5848  304a		       ff		      .byte.b	$ff
   5847  304a					      repend
   5848  304b		       ff		      .byte.b	$ff
   5847  304b					      repend
   5848  304c		       ff		      .byte.b	$ff
   5847  304c					      repend
   5848  304d		       ff		      .byte.b	$ff
   5847  304d					      repend
   5848  304e		       ff		      .byte.b	$ff
   5847  304e					      repend
   5848  304f		       ff		      .byte.b	$ff
   5847  304f					      repend
   5848  3050		       ff		      .byte.b	$ff
   5847  3050					      repend
   5848  3051		       ff		      .byte.b	$ff
   5847  3051					      repend
   5848  3052		       ff		      .byte.b	$ff
   5847  3052					      repend
   5848  3053		       ff		      .byte.b	$ff
   5847  3053					      repend
   5848  3054		       ff		      .byte.b	$ff
   5847  3054					      repend
   5848  3055		       ff		      .byte.b	$ff
   5847  3055					      repend
   5848  3056		       ff		      .byte.b	$ff
   5847  3056					      repend
   5848  3057		       ff		      .byte.b	$ff
   5847  3057					      repend
   5848  3058		       ff		      .byte.b	$ff
   5847  3058					      repend
   5848  3059		       ff		      .byte.b	$ff
   5847  3059					      repend
   5848  305a		       ff		      .byte.b	$ff
   5847  305a					      repend
   5848  305b		       ff		      .byte.b	$ff
   5847  305b					      repend
   5848  305c		       ff		      .byte.b	$ff
   5847  305c					      repend
   5848  305d		       ff		      .byte.b	$ff
   5847  305d					      repend
   5848  305e		       ff		      .byte.b	$ff
   5847  305e					      repend
   5848  305f		       ff		      .byte.b	$ff
   5847  305f					      repend
   5848  3060		       ff		      .byte.b	$ff
   5847  3060					      repend
   5848  3061		       ff		      .byte.b	$ff
   5847  3061					      repend
   5848  3062		       ff		      .byte.b	$ff
   5847  3062					      repend
   5848  3063		       ff		      .byte.b	$ff
   5847  3063					      repend
   5848  3064		       ff		      .byte.b	$ff
   5847  3064					      repend
   5848  3065		       ff		      .byte.b	$ff
   5847  3065					      repend
   5848  3066		       ff		      .byte.b	$ff
   5847  3066					      repend
   5848  3067		       ff		      .byte.b	$ff
   5847  3067					      repend
   5848  3068		       ff		      .byte.b	$ff
   5847  3068					      repend
   5848  3069		       ff		      .byte.b	$ff
   5847  3069					      repend
   5848  306a		       ff		      .byte.b	$ff
   5847  306a					      repend
   5848  306b		       ff		      .byte.b	$ff
   5847  306b					      repend
   5848  306c		       ff		      .byte.b	$ff
   5847  306c					      repend
   5848  306d		       ff		      .byte.b	$ff
   5847  306d					      repend
   5848  306e		       ff		      .byte.b	$ff
   5847  306e					      repend
   5848  306f		       ff		      .byte.b	$ff
   5847  306f					      repend
   5848  3070		       ff		      .byte.b	$ff
   5847  3070					      repend
   5848  3071		       ff		      .byte.b	$ff
   5847  3071					      repend
   5848  3072		       ff		      .byte.b	$ff
   5847  3072					      repend
   5848  3073		       ff		      .byte.b	$ff
   5847  3073					      repend
   5848  3074		       ff		      .byte.b	$ff
   5847  3074					      repend
   5848  3075		       ff		      .byte.b	$ff
   5847  3075					      repend
   5848  3076		       ff		      .byte.b	$ff
   5847  3076					      repend
   5848  3077		       ff		      .byte.b	$ff
   5847  3077					      repend
   5848  3078		       ff		      .byte.b	$ff
   5847  3078					      repend
   5848  3079		       ff		      .byte.b	$ff
   5847  3079					      repend
   5848  307a		       ff		      .byte.b	$ff
   5847  307a					      repend
   5848  307b		       ff		      .byte.b	$ff
   5847  307b					      repend
   5848  307c		       ff		      .byte.b	$ff
   5847  307c					      repend
   5848  307d		       ff		      .byte.b	$ff
   5847  307d					      repend
   5848  307e		       ff		      .byte.b	$ff
   5847  307e					      repend
   5848  307f		       ff		      .byte.b	$ff
   5847  307f					      repend
   5848  3080		       ff		      .byte.b	$ff
   5847  3080					      repend
   5848  3081		       ff		      .byte.b	$ff
   5847  3081					      repend
   5848  3082		       ff		      .byte.b	$ff
   5847  3082					      repend
   5848  3083		       ff		      .byte.b	$ff
   5847  3083					      repend
   5848  3084		       ff		      .byte.b	$ff
   5847  3084					      repend
   5848  3085		       ff		      .byte.b	$ff
   5847  3085					      repend
   5848  3086		       ff		      .byte.b	$ff
   5847  3086					      repend
   5848  3087		       ff		      .byte.b	$ff
   5847  3087					      repend
   5848  3088		       ff		      .byte.b	$ff
   5847  3088					      repend
   5848  3089		       ff		      .byte.b	$ff
   5847  3089					      repend
   5848  308a		       ff		      .byte.b	$ff
   5847  308a					      repend
   5848  308b		       ff		      .byte.b	$ff
   5847  308b					      repend
   5848  308c		       ff		      .byte.b	$ff
   5847  308c					      repend
   5848  308d		       ff		      .byte.b	$ff
   5847  308d					      repend
   5848  308e		       ff		      .byte.b	$ff
   5847  308e					      repend
   5848  308f		       ff		      .byte.b	$ff
   5847  308f					      repend
   5848  3090		       ff		      .byte.b	$ff
   5847  3090					      repend
   5848  3091		       ff		      .byte.b	$ff
   5847  3091					      repend
   5848  3092		       ff		      .byte.b	$ff
   5847  3092					      repend
   5848  3093		       ff		      .byte.b	$ff
   5847  3093					      repend
   5848  3094		       ff		      .byte.b	$ff
   5847  3094					      repend
   5848  3095		       ff		      .byte.b	$ff
   5847  3095					      repend
   5848  3096		       ff		      .byte.b	$ff
   5847  3096					      repend
   5848  3097		       ff		      .byte.b	$ff
   5847  3097					      repend
   5848  3098		       ff		      .byte.b	$ff
   5847  3098					      repend
   5848  3099		       ff		      .byte.b	$ff
   5847  3099					      repend
   5848  309a		       ff		      .byte.b	$ff
   5847  309a					      repend
   5848  309b		       ff		      .byte.b	$ff
   5847  309b					      repend
   5848  309c		       ff		      .byte.b	$ff
   5847  309c					      repend
   5848  309d		       ff		      .byte.b	$ff
   5847  309d					      repend
   5848  309e		       ff		      .byte.b	$ff
   5847  309e					      repend
   5848  309f		       ff		      .byte.b	$ff
   5847  309f					      repend
   5848  30a0		       ff		      .byte.b	$ff
   5847  30a0					      repend
   5848  30a1		       ff		      .byte.b	$ff
   5847  30a1					      repend
   5848  30a2		       ff		      .byte.b	$ff
   5847  30a2					      repend
   5848  30a3		       ff		      .byte.b	$ff
   5847  30a3					      repend
   5848  30a4		       ff		      .byte.b	$ff
   5847  30a4					      repend
   5848  30a5		       ff		      .byte.b	$ff
   5847  30a5					      repend
   5848  30a6		       ff		      .byte.b	$ff
   5847  30a6					      repend
   5848  30a7		       ff		      .byte.b	$ff
   5847  30a7					      repend
   5848  30a8		       ff		      .byte.b	$ff
   5847  30a8					      repend
   5848  30a9		       ff		      .byte.b	$ff
   5847  30a9					      repend
   5848  30aa		       ff		      .byte.b	$ff
   5847  30aa					      repend
   5848  30ab		       ff		      .byte.b	$ff
   5847  30ab					      repend
   5848  30ac		       ff		      .byte.b	$ff
   5847  30ac					      repend
   5848  30ad		       ff		      .byte.b	$ff
   5847  30ad					      repend
   5848  30ae		       ff		      .byte.b	$ff
   5847  30ae					      repend
   5848  30af		       ff		      .byte.b	$ff
   5847  30af					      repend
   5848  30b0		       ff		      .byte.b	$ff
   5847  30b0					      repend
   5848  30b1		       ff		      .byte.b	$ff
   5847  30b1					      repend
   5848  30b2		       ff		      .byte.b	$ff
   5847  30b2					      repend
   5848  30b3		       ff		      .byte.b	$ff
   5847  30b3					      repend
   5848  30b4		       ff		      .byte.b	$ff
   5847  30b4					      repend
   5848  30b5		       ff		      .byte.b	$ff
   5847  30b5					      repend
   5848  30b6		       ff		      .byte.b	$ff
   5847  30b6					      repend
   5848  30b7		       ff		      .byte.b	$ff
   5847  30b7					      repend
   5848  30b8		       ff		      .byte.b	$ff
   5847  30b8					      repend
   5848  30b9		       ff		      .byte.b	$ff
   5847  30b9					      repend
   5848  30ba		       ff		      .byte.b	$ff
   5847  30ba					      repend
   5848  30bb		       ff		      .byte.b	$ff
   5847  30bb					      repend
   5848  30bc		       ff		      .byte.b	$ff
   5847  30bc					      repend
   5848  30bd		       ff		      .byte.b	$ff
   5847  30bd					      repend
   5848  30be		       ff		      .byte.b	$ff
   5847  30be					      repend
   5848  30bf		       ff		      .byte.b	$ff
   5847  30bf					      repend
   5848  30c0		       ff		      .byte.b	$ff
   5847  30c0					      repend
   5848  30c1		       ff		      .byte.b	$ff
   5847  30c1					      repend
   5848  30c2		       ff		      .byte.b	$ff
   5847  30c2					      repend
   5848  30c3		       ff		      .byte.b	$ff
   5847  30c3					      repend
   5848  30c4		       ff		      .byte.b	$ff
   5847  30c4					      repend
   5848  30c5		       ff		      .byte.b	$ff
   5847  30c5					      repend
   5848  30c6		       ff		      .byte.b	$ff
   5847  30c6					      repend
   5848  30c7		       ff		      .byte.b	$ff
   5847  30c7					      repend
   5848  30c8		       ff		      .byte.b	$ff
   5847  30c8					      repend
   5848  30c9		       ff		      .byte.b	$ff
   5847  30c9					      repend
   5848  30ca		       ff		      .byte.b	$ff
   5847  30ca					      repend
   5848  30cb		       ff		      .byte.b	$ff
   5847  30cb					      repend
   5848  30cc		       ff		      .byte.b	$ff
   5847  30cc					      repend
   5848  30cd		       ff		      .byte.b	$ff
   5847  30cd					      repend
   5848  30ce		       ff		      .byte.b	$ff
   5847  30ce					      repend
   5848  30cf		       ff		      .byte.b	$ff
   5847  30cf					      repend
   5848  30d0		       ff		      .byte.b	$ff
   5847  30d0					      repend
   5848  30d1		       ff		      .byte.b	$ff
   5847  30d1					      repend
   5848  30d2		       ff		      .byte.b	$ff
   5847  30d2					      repend
   5848  30d3		       ff		      .byte.b	$ff
   5847  30d3					      repend
   5848  30d4		       ff		      .byte.b	$ff
   5847  30d4					      repend
   5848  30d5		       ff		      .byte.b	$ff
   5847  30d5					      repend
   5848  30d6		       ff		      .byte.b	$ff
   5847  30d6					      repend
   5848  30d7		       ff		      .byte.b	$ff
   5847  30d7					      repend
   5848  30d8		       ff		      .byte.b	$ff
   5847  30d8					      repend
   5848  30d9		       ff		      .byte.b	$ff
   5847  30d9					      repend
   5848  30da		       ff		      .byte.b	$ff
   5847  30da					      repend
   5848  30db		       ff		      .byte.b	$ff
   5847  30db					      repend
   5848  30dc		       ff		      .byte.b	$ff
   5847  30dc					      repend
   5848  30dd		       ff		      .byte.b	$ff
   5847  30dd					      repend
   5848  30de		       ff		      .byte.b	$ff
   5847  30de					      repend
   5848  30df		       ff		      .byte.b	$ff
   5847  30df					      repend
   5848  30e0		       ff		      .byte.b	$ff
   5847  30e0					      repend
   5848  30e1		       ff		      .byte.b	$ff
   5847  30e1					      repend
   5848  30e2		       ff		      .byte.b	$ff
   5847  30e2					      repend
   5848  30e3		       ff		      .byte.b	$ff
   5847  30e3					      repend
   5848  30e4		       ff		      .byte.b	$ff
   5847  30e4					      repend
   5848  30e5		       ff		      .byte.b	$ff
   5847  30e5					      repend
   5848  30e6		       ff		      .byte.b	$ff
   5847  30e6					      repend
   5848  30e7		       ff		      .byte.b	$ff
   5847  30e7					      repend
   5848  30e8		       ff		      .byte.b	$ff
   5847  30e8					      repend
   5848  30e9		       ff		      .byte.b	$ff
   5847  30e9					      repend
   5848  30ea		       ff		      .byte.b	$ff
   5847  30ea					      repend
   5848  30eb		       ff		      .byte.b	$ff
   5847  30eb					      repend
   5848  30ec		       ff		      .byte.b	$ff
   5847  30ec					      repend
   5848  30ed		       ff		      .byte.b	$ff
   5847  30ed					      repend
   5848  30ee		       ff		      .byte.b	$ff
   5847  30ee					      repend
   5848  30ef		       ff		      .byte.b	$ff
   5847  30ef					      repend
   5848  30f0		       ff		      .byte.b	$ff
   5847  30f0					      repend
   5848  30f1		       ff		      .byte.b	$ff
   5847  30f1					      repend
   5848  30f2		       ff		      .byte.b	$ff
   5847  30f2					      repend
   5848  30f3		       ff		      .byte.b	$ff
   5847  30f3					      repend
   5848  30f4		       ff		      .byte.b	$ff
   5847  30f4					      repend
   5848  30f5		       ff		      .byte.b	$ff
   5847  30f5					      repend
   5848  30f6		       ff		      .byte.b	$ff
   5847  30f6					      repend
   5848  30f7		       ff		      .byte.b	$ff
   5847  30f7					      repend
   5848  30f8		       ff		      .byte.b	$ff
   5847  30f8					      repend
   5848  30f9		       ff		      .byte.b	$ff
   5847  30f9					      repend
   5848  30fa		       ff		      .byte.b	$ff
   5847  30fa					      repend
   5848  30fb		       ff		      .byte.b	$ff
   5847  30fb					      repend
   5848  30fc		       ff		      .byte.b	$ff
   5847  30fc					      repend
   5848  30fd		       ff		      .byte.b	$ff
   5847  30fd					      repend
   5848  30fe		       ff		      .byte.b	$ff
   5847  30fe					      repend
   5848  30ff		       ff		      .byte.b	$ff
   5849  3100					      repend
   5850  3100				   .
   5851  3100							; 
   5852  3100
   5853  3100				   .
   5854  3100							; 
   5855  3100
   5856  3100				   .
   5857  3100							; 
   5858  3100
   5859  3100				   .
   5860  3100							; 
   5861  3100
   5862  3100				   .
   5863  3100							; 
   5864  3100
   5865  3100				   .L0629		;  bank 4
   5866  3100
   5867  3100					      if	ECHO3
      3793 bytes of ROM space left in bank 3
   5868  3100					      echo	"    ",[(start_bank3 - *)]d , "bytes of ROM space left in bank 3")
   5869  3100					      endif
   5870  3100		       00 01	   ECHO3      =	1
   5871  3fd1					      ORG	$3FF4-bscode_length
   5872  3fd1					      RORG	$DFF4-bscode_length
   5873  3fd1		       a2 ff	   start_bank3 ldx	#$ff
   5874  3fd3				  -	      ifconst	FASTFETCH	; using DPC+
   5875  3fd3				  -	      stx	FASTFETCH
   5876  3fd3					      endif
   5877  3fd3		       9a		      txs
   5878  3fd4				  -	      if	bankswitch == 64
   5879  3fd4				  -	      lda	#(((>(start-1)) & $0F) | $F0)
   5880  3fd4					      else
   5881  3fd4		       a9 f2		      lda	#>(start-1)
   5882  3fd6					      endif
   5883  3fd6		       48		      pha
   5884  3fd7		       a9 b0		      lda	#<(start-1)
   5885  3fd9		       48		      pha
   5886  3fda		       48		      pha
   5887  3fdb		       8a		      txa
   5888  3fdc		       48		      pha
   5889  3fdd		       ba		      tsx
   5890  3fde					      if	bankswitch != 64
   5891  3fde		       b5 04		      lda	4,x	; get high byte of return address
   5892  3fe0		       2a		      rol
   5893  3fe1		       2a		      rol
   5894  3fe2		       2a		      rol
   5895  3fe3		       2a		      rol
   5896  3fe4		       29 03		      and	#bs_mask	;1 3 or 7 for F8/F6/F4
   5897  3fe6		       aa		      tax
   5898  3fe7		       e8		      inx
   5899  3fe8				  -	      else
   5900  3fe8				  -	      lda	4,x	; get high byte of return address
   5901  3fe8				  -	      tay
   5902  3fe8				  -	      ora	#$10	; change our bank nibble into a valid rom mirror
   5903  3fe8				  -	      sta	4,x
   5904  3fe8				  -	      tya
   5905  3fe8				  -	      lsr
   5906  3fe8				  -	      lsr
   5907  3fe8				  -	      lsr
   5908  3fe8				  -	      lsr
   5909  3fe8				  -	      tax
   5910  3fe8				  -	      inx
   5911  3fe8					      endif
   5912  3fe8		       bd f5 1f 	      lda	bankswitch_hotspot-1,x
   5913  3feb		       68		      pla
   5914  3fec		       aa		      tax
   5915  3fed		       68		      pla
   5916  3fee		       60		      rts
   5917  3fef				  -	      if	((* & $1FFF) > ((bankswitch_hotspot & $1FFF) - 1))
   5918  3fef				  -	      echo	"WARNING: size parameter in banksw.asm too small - the program probably will not work."
   5919  3fef				  -	      echo	"Change to",[(*-begin_bscode+1)&$FF]d,"and try again."
   5920  3fef					      endif
   5921  3ffc					      ORG	$3FFC
   5922  3ffc					      RORG	$DFFC
   5923  3ffc		       d1 df		      .word.w	(start_bank3 & $ffff)
   5924  3ffe		       d1 df		      .word.w	(start_bank3 & $ffff)
   5925  4000					      ORG	$4000
   5926  4000					      RORG	$F000
   5927  4000					      repeat	256
   5928  4000		       ff		      .byte.b	$ff
   5927  4000					      repend
   5928  4001		       ff		      .byte.b	$ff
   5927  4001					      repend
   5928  4002		       ff		      .byte.b	$ff
   5927  4002					      repend
   5928  4003		       ff		      .byte.b	$ff
   5927  4003					      repend
   5928  4004		       ff		      .byte.b	$ff
   5927  4004					      repend
   5928  4005		       ff		      .byte.b	$ff
   5927  4005					      repend
   5928  4006		       ff		      .byte.b	$ff
   5927  4006					      repend
   5928  4007		       ff		      .byte.b	$ff
   5927  4007					      repend
   5928  4008		       ff		      .byte.b	$ff
   5927  4008					      repend
   5928  4009		       ff		      .byte.b	$ff
   5927  4009					      repend
   5928  400a		       ff		      .byte.b	$ff
   5927  400a					      repend
   5928  400b		       ff		      .byte.b	$ff
   5927  400b					      repend
   5928  400c		       ff		      .byte.b	$ff
   5927  400c					      repend
   5928  400d		       ff		      .byte.b	$ff
   5927  400d					      repend
   5928  400e		       ff		      .byte.b	$ff
   5927  400e					      repend
   5928  400f		       ff		      .byte.b	$ff
   5927  400f					      repend
   5928  4010		       ff		      .byte.b	$ff
   5927  4010					      repend
   5928  4011		       ff		      .byte.b	$ff
   5927  4011					      repend
   5928  4012		       ff		      .byte.b	$ff
   5927  4012					      repend
   5928  4013		       ff		      .byte.b	$ff
   5927  4013					      repend
   5928  4014		       ff		      .byte.b	$ff
   5927  4014					      repend
   5928  4015		       ff		      .byte.b	$ff
   5927  4015					      repend
   5928  4016		       ff		      .byte.b	$ff
   5927  4016					      repend
   5928  4017		       ff		      .byte.b	$ff
   5927  4017					      repend
   5928  4018		       ff		      .byte.b	$ff
   5927  4018					      repend
   5928  4019		       ff		      .byte.b	$ff
   5927  4019					      repend
   5928  401a		       ff		      .byte.b	$ff
   5927  401a					      repend
   5928  401b		       ff		      .byte.b	$ff
   5927  401b					      repend
   5928  401c		       ff		      .byte.b	$ff
   5927  401c					      repend
   5928  401d		       ff		      .byte.b	$ff
   5927  401d					      repend
   5928  401e		       ff		      .byte.b	$ff
   5927  401e					      repend
   5928  401f		       ff		      .byte.b	$ff
   5927  401f					      repend
   5928  4020		       ff		      .byte.b	$ff
   5927  4020					      repend
   5928  4021		       ff		      .byte.b	$ff
   5927  4021					      repend
   5928  4022		       ff		      .byte.b	$ff
   5927  4022					      repend
   5928  4023		       ff		      .byte.b	$ff
   5927  4023					      repend
   5928  4024		       ff		      .byte.b	$ff
   5927  4024					      repend
   5928  4025		       ff		      .byte.b	$ff
   5927  4025					      repend
   5928  4026		       ff		      .byte.b	$ff
   5927  4026					      repend
   5928  4027		       ff		      .byte.b	$ff
   5927  4027					      repend
   5928  4028		       ff		      .byte.b	$ff
   5927  4028					      repend
   5928  4029		       ff		      .byte.b	$ff
   5927  4029					      repend
   5928  402a		       ff		      .byte.b	$ff
   5927  402a					      repend
   5928  402b		       ff		      .byte.b	$ff
   5927  402b					      repend
   5928  402c		       ff		      .byte.b	$ff
   5927  402c					      repend
   5928  402d		       ff		      .byte.b	$ff
   5927  402d					      repend
   5928  402e		       ff		      .byte.b	$ff
   5927  402e					      repend
   5928  402f		       ff		      .byte.b	$ff
   5927  402f					      repend
   5928  4030		       ff		      .byte.b	$ff
   5927  4030					      repend
   5928  4031		       ff		      .byte.b	$ff
   5927  4031					      repend
   5928  4032		       ff		      .byte.b	$ff
   5927  4032					      repend
   5928  4033		       ff		      .byte.b	$ff
   5927  4033					      repend
   5928  4034		       ff		      .byte.b	$ff
   5927  4034					      repend
   5928  4035		       ff		      .byte.b	$ff
   5927  4035					      repend
   5928  4036		       ff		      .byte.b	$ff
   5927  4036					      repend
   5928  4037		       ff		      .byte.b	$ff
   5927  4037					      repend
   5928  4038		       ff		      .byte.b	$ff
   5927  4038					      repend
   5928  4039		       ff		      .byte.b	$ff
   5927  4039					      repend
   5928  403a		       ff		      .byte.b	$ff
   5927  403a					      repend
   5928  403b		       ff		      .byte.b	$ff
   5927  403b					      repend
   5928  403c		       ff		      .byte.b	$ff
   5927  403c					      repend
   5928  403d		       ff		      .byte.b	$ff
   5927  403d					      repend
   5928  403e		       ff		      .byte.b	$ff
   5927  403e					      repend
   5928  403f		       ff		      .byte.b	$ff
   5927  403f					      repend
   5928  4040		       ff		      .byte.b	$ff
   5927  4040					      repend
   5928  4041		       ff		      .byte.b	$ff
   5927  4041					      repend
   5928  4042		       ff		      .byte.b	$ff
   5927  4042					      repend
   5928  4043		       ff		      .byte.b	$ff
   5927  4043					      repend
   5928  4044		       ff		      .byte.b	$ff
   5927  4044					      repend
   5928  4045		       ff		      .byte.b	$ff
   5927  4045					      repend
   5928  4046		       ff		      .byte.b	$ff
   5927  4046					      repend
   5928  4047		       ff		      .byte.b	$ff
   5927  4047					      repend
   5928  4048		       ff		      .byte.b	$ff
   5927  4048					      repend
   5928  4049		       ff		      .byte.b	$ff
   5927  4049					      repend
   5928  404a		       ff		      .byte.b	$ff
   5927  404a					      repend
   5928  404b		       ff		      .byte.b	$ff
   5927  404b					      repend
   5928  404c		       ff		      .byte.b	$ff
   5927  404c					      repend
   5928  404d		       ff		      .byte.b	$ff
   5927  404d					      repend
   5928  404e		       ff		      .byte.b	$ff
   5927  404e					      repend
   5928  404f		       ff		      .byte.b	$ff
   5927  404f					      repend
   5928  4050		       ff		      .byte.b	$ff
   5927  4050					      repend
   5928  4051		       ff		      .byte.b	$ff
   5927  4051					      repend
   5928  4052		       ff		      .byte.b	$ff
   5927  4052					      repend
   5928  4053		       ff		      .byte.b	$ff
   5927  4053					      repend
   5928  4054		       ff		      .byte.b	$ff
   5927  4054					      repend
   5928  4055		       ff		      .byte.b	$ff
   5927  4055					      repend
   5928  4056		       ff		      .byte.b	$ff
   5927  4056					      repend
   5928  4057		       ff		      .byte.b	$ff
   5927  4057					      repend
   5928  4058		       ff		      .byte.b	$ff
   5927  4058					      repend
   5928  4059		       ff		      .byte.b	$ff
   5927  4059					      repend
   5928  405a		       ff		      .byte.b	$ff
   5927  405a					      repend
   5928  405b		       ff		      .byte.b	$ff
   5927  405b					      repend
   5928  405c		       ff		      .byte.b	$ff
   5927  405c					      repend
   5928  405d		       ff		      .byte.b	$ff
   5927  405d					      repend
   5928  405e		       ff		      .byte.b	$ff
   5927  405e					      repend
   5928  405f		       ff		      .byte.b	$ff
   5927  405f					      repend
   5928  4060		       ff		      .byte.b	$ff
   5927  4060					      repend
   5928  4061		       ff		      .byte.b	$ff
   5927  4061					      repend
   5928  4062		       ff		      .byte.b	$ff
   5927  4062					      repend
   5928  4063		       ff		      .byte.b	$ff
   5927  4063					      repend
   5928  4064		       ff		      .byte.b	$ff
   5927  4064					      repend
   5928  4065		       ff		      .byte.b	$ff
   5927  4065					      repend
   5928  4066		       ff		      .byte.b	$ff
   5927  4066					      repend
   5928  4067		       ff		      .byte.b	$ff
   5927  4067					      repend
   5928  4068		       ff		      .byte.b	$ff
   5927  4068					      repend
   5928  4069		       ff		      .byte.b	$ff
   5927  4069					      repend
   5928  406a		       ff		      .byte.b	$ff
   5927  406a					      repend
   5928  406b		       ff		      .byte.b	$ff
   5927  406b					      repend
   5928  406c		       ff		      .byte.b	$ff
   5927  406c					      repend
   5928  406d		       ff		      .byte.b	$ff
   5927  406d					      repend
   5928  406e		       ff		      .byte.b	$ff
   5927  406e					      repend
   5928  406f		       ff		      .byte.b	$ff
   5927  406f					      repend
   5928  4070		       ff		      .byte.b	$ff
   5927  4070					      repend
   5928  4071		       ff		      .byte.b	$ff
   5927  4071					      repend
   5928  4072		       ff		      .byte.b	$ff
   5927  4072					      repend
   5928  4073		       ff		      .byte.b	$ff
   5927  4073					      repend
   5928  4074		       ff		      .byte.b	$ff
   5927  4074					      repend
   5928  4075		       ff		      .byte.b	$ff
   5927  4075					      repend
   5928  4076		       ff		      .byte.b	$ff
   5927  4076					      repend
   5928  4077		       ff		      .byte.b	$ff
   5927  4077					      repend
   5928  4078		       ff		      .byte.b	$ff
   5927  4078					      repend
   5928  4079		       ff		      .byte.b	$ff
   5927  4079					      repend
   5928  407a		       ff		      .byte.b	$ff
   5927  407a					      repend
   5928  407b		       ff		      .byte.b	$ff
   5927  407b					      repend
   5928  407c		       ff		      .byte.b	$ff
   5927  407c					      repend
   5928  407d		       ff		      .byte.b	$ff
   5927  407d					      repend
   5928  407e		       ff		      .byte.b	$ff
   5927  407e					      repend
   5928  407f		       ff		      .byte.b	$ff
   5927  407f					      repend
   5928  4080		       ff		      .byte.b	$ff
   5927  4080					      repend
   5928  4081		       ff		      .byte.b	$ff
   5927  4081					      repend
   5928  4082		       ff		      .byte.b	$ff
   5927  4082					      repend
   5928  4083		       ff		      .byte.b	$ff
   5927  4083					      repend
   5928  4084		       ff		      .byte.b	$ff
   5927  4084					      repend
   5928  4085		       ff		      .byte.b	$ff
   5927  4085					      repend
   5928  4086		       ff		      .byte.b	$ff
   5927  4086					      repend
   5928  4087		       ff		      .byte.b	$ff
   5927  4087					      repend
   5928  4088		       ff		      .byte.b	$ff
   5927  4088					      repend
   5928  4089		       ff		      .byte.b	$ff
   5927  4089					      repend
   5928  408a		       ff		      .byte.b	$ff
   5927  408a					      repend
   5928  408b		       ff		      .byte.b	$ff
   5927  408b					      repend
   5928  408c		       ff		      .byte.b	$ff
   5927  408c					      repend
   5928  408d		       ff		      .byte.b	$ff
   5927  408d					      repend
   5928  408e		       ff		      .byte.b	$ff
   5927  408e					      repend
   5928  408f		       ff		      .byte.b	$ff
   5927  408f					      repend
   5928  4090		       ff		      .byte.b	$ff
   5927  4090					      repend
   5928  4091		       ff		      .byte.b	$ff
   5927  4091					      repend
   5928  4092		       ff		      .byte.b	$ff
   5927  4092					      repend
   5928  4093		       ff		      .byte.b	$ff
   5927  4093					      repend
   5928  4094		       ff		      .byte.b	$ff
   5927  4094					      repend
   5928  4095		       ff		      .byte.b	$ff
   5927  4095					      repend
   5928  4096		       ff		      .byte.b	$ff
   5927  4096					      repend
   5928  4097		       ff		      .byte.b	$ff
   5927  4097					      repend
   5928  4098		       ff		      .byte.b	$ff
   5927  4098					      repend
   5928  4099		       ff		      .byte.b	$ff
   5927  4099					      repend
   5928  409a		       ff		      .byte.b	$ff
   5927  409a					      repend
   5928  409b		       ff		      .byte.b	$ff
   5927  409b					      repend
   5928  409c		       ff		      .byte.b	$ff
   5927  409c					      repend
   5928  409d		       ff		      .byte.b	$ff
   5927  409d					      repend
   5928  409e		       ff		      .byte.b	$ff
   5927  409e					      repend
   5928  409f		       ff		      .byte.b	$ff
   5927  409f					      repend
   5928  40a0		       ff		      .byte.b	$ff
   5927  40a0					      repend
   5928  40a1		       ff		      .byte.b	$ff
   5927  40a1					      repend
   5928  40a2		       ff		      .byte.b	$ff
   5927  40a2					      repend
   5928  40a3		       ff		      .byte.b	$ff
   5927  40a3					      repend
   5928  40a4		       ff		      .byte.b	$ff
   5927  40a4					      repend
   5928  40a5		       ff		      .byte.b	$ff
   5927  40a5					      repend
   5928  40a6		       ff		      .byte.b	$ff
   5927  40a6					      repend
   5928  40a7		       ff		      .byte.b	$ff
   5927  40a7					      repend
   5928  40a8		       ff		      .byte.b	$ff
   5927  40a8					      repend
   5928  40a9		       ff		      .byte.b	$ff
   5927  40a9					      repend
   5928  40aa		       ff		      .byte.b	$ff
   5927  40aa					      repend
   5928  40ab		       ff		      .byte.b	$ff
   5927  40ab					      repend
   5928  40ac		       ff		      .byte.b	$ff
   5927  40ac					      repend
   5928  40ad		       ff		      .byte.b	$ff
   5927  40ad					      repend
   5928  40ae		       ff		      .byte.b	$ff
   5927  40ae					      repend
   5928  40af		       ff		      .byte.b	$ff
   5927  40af					      repend
   5928  40b0		       ff		      .byte.b	$ff
   5927  40b0					      repend
   5928  40b1		       ff		      .byte.b	$ff
   5927  40b1					      repend
   5928  40b2		       ff		      .byte.b	$ff
   5927  40b2					      repend
   5928  40b3		       ff		      .byte.b	$ff
   5927  40b3					      repend
   5928  40b4		       ff		      .byte.b	$ff
   5927  40b4					      repend
   5928  40b5		       ff		      .byte.b	$ff
   5927  40b5					      repend
   5928  40b6		       ff		      .byte.b	$ff
   5927  40b6					      repend
   5928  40b7		       ff		      .byte.b	$ff
   5927  40b7					      repend
   5928  40b8		       ff		      .byte.b	$ff
   5927  40b8					      repend
   5928  40b9		       ff		      .byte.b	$ff
   5927  40b9					      repend
   5928  40ba		       ff		      .byte.b	$ff
   5927  40ba					      repend
   5928  40bb		       ff		      .byte.b	$ff
   5927  40bb					      repend
   5928  40bc		       ff		      .byte.b	$ff
   5927  40bc					      repend
   5928  40bd		       ff		      .byte.b	$ff
   5927  40bd					      repend
   5928  40be		       ff		      .byte.b	$ff
   5927  40be					      repend
   5928  40bf		       ff		      .byte.b	$ff
   5927  40bf					      repend
   5928  40c0		       ff		      .byte.b	$ff
   5927  40c0					      repend
   5928  40c1		       ff		      .byte.b	$ff
   5927  40c1					      repend
   5928  40c2		       ff		      .byte.b	$ff
   5927  40c2					      repend
   5928  40c3		       ff		      .byte.b	$ff
   5927  40c3					      repend
   5928  40c4		       ff		      .byte.b	$ff
   5927  40c4					      repend
   5928  40c5		       ff		      .byte.b	$ff
   5927  40c5					      repend
   5928  40c6		       ff		      .byte.b	$ff
   5927  40c6					      repend
   5928  40c7		       ff		      .byte.b	$ff
   5927  40c7					      repend
   5928  40c8		       ff		      .byte.b	$ff
   5927  40c8					      repend
   5928  40c9		       ff		      .byte.b	$ff
   5927  40c9					      repend
   5928  40ca		       ff		      .byte.b	$ff
   5927  40ca					      repend
   5928  40cb		       ff		      .byte.b	$ff
   5927  40cb					      repend
   5928  40cc		       ff		      .byte.b	$ff
   5927  40cc					      repend
   5928  40cd		       ff		      .byte.b	$ff
   5927  40cd					      repend
   5928  40ce		       ff		      .byte.b	$ff
   5927  40ce					      repend
   5928  40cf		       ff		      .byte.b	$ff
   5927  40cf					      repend
   5928  40d0		       ff		      .byte.b	$ff
   5927  40d0					      repend
   5928  40d1		       ff		      .byte.b	$ff
   5927  40d1					      repend
   5928  40d2		       ff		      .byte.b	$ff
   5927  40d2					      repend
   5928  40d3		       ff		      .byte.b	$ff
   5927  40d3					      repend
   5928  40d4		       ff		      .byte.b	$ff
   5927  40d4					      repend
   5928  40d5		       ff		      .byte.b	$ff
   5927  40d5					      repend
   5928  40d6		       ff		      .byte.b	$ff
   5927  40d6					      repend
   5928  40d7		       ff		      .byte.b	$ff
   5927  40d7					      repend
   5928  40d8		       ff		      .byte.b	$ff
   5927  40d8					      repend
   5928  40d9		       ff		      .byte.b	$ff
   5927  40d9					      repend
   5928  40da		       ff		      .byte.b	$ff
   5927  40da					      repend
   5928  40db		       ff		      .byte.b	$ff
   5927  40db					      repend
   5928  40dc		       ff		      .byte.b	$ff
   5927  40dc					      repend
   5928  40dd		       ff		      .byte.b	$ff
   5927  40dd					      repend
   5928  40de		       ff		      .byte.b	$ff
   5927  40de					      repend
   5928  40df		       ff		      .byte.b	$ff
   5927  40df					      repend
   5928  40e0		       ff		      .byte.b	$ff
   5927  40e0					      repend
   5928  40e1		       ff		      .byte.b	$ff
   5927  40e1					      repend
   5928  40e2		       ff		      .byte.b	$ff
   5927  40e2					      repend
   5928  40e3		       ff		      .byte.b	$ff
   5927  40e3					      repend
   5928  40e4		       ff		      .byte.b	$ff
   5927  40e4					      repend
   5928  40e5		       ff		      .byte.b	$ff
   5927  40e5					      repend
   5928  40e6		       ff		      .byte.b	$ff
   5927  40e6					      repend
   5928  40e7		       ff		      .byte.b	$ff
   5927  40e7					      repend
   5928  40e8		       ff		      .byte.b	$ff
   5927  40e8					      repend
   5928  40e9		       ff		      .byte.b	$ff
   5927  40e9					      repend
   5928  40ea		       ff		      .byte.b	$ff
   5927  40ea					      repend
   5928  40eb		       ff		      .byte.b	$ff
   5927  40eb					      repend
   5928  40ec		       ff		      .byte.b	$ff
   5927  40ec					      repend
   5928  40ed		       ff		      .byte.b	$ff
   5927  40ed					      repend
   5928  40ee		       ff		      .byte.b	$ff
   5927  40ee					      repend
   5928  40ef		       ff		      .byte.b	$ff
   5927  40ef					      repend
   5928  40f0		       ff		      .byte.b	$ff
   5927  40f0					      repend
   5928  40f1		       ff		      .byte.b	$ff
   5927  40f1					      repend
   5928  40f2		       ff		      .byte.b	$ff
   5927  40f2					      repend
   5928  40f3		       ff		      .byte.b	$ff
   5927  40f3					      repend
   5928  40f4		       ff		      .byte.b	$ff
   5927  40f4					      repend
   5928  40f5		       ff		      .byte.b	$ff
   5927  40f5					      repend
   5928  40f6		       ff		      .byte.b	$ff
   5927  40f6					      repend
   5928  40f7		       ff		      .byte.b	$ff
   5927  40f7					      repend
   5928  40f8		       ff		      .byte.b	$ff
   5927  40f8					      repend
   5928  40f9		       ff		      .byte.b	$ff
   5927  40f9					      repend
   5928  40fa		       ff		      .byte.b	$ff
   5927  40fa					      repend
   5928  40fb		       ff		      .byte.b	$ff
   5927  40fb					      repend
   5928  40fc		       ff		      .byte.b	$ff
   5927  40fc					      repend
   5928  40fd		       ff		      .byte.b	$ff
   5927  40fd					      repend
   5928  40fe		       ff		      .byte.b	$ff
   5927  40fe					      repend
   5928  40ff		       ff		      .byte.b	$ff
   5929  4100					      repend
   5930  4100							; Provided under the CC0 license. See the included LICENSE.txt for details.
   5931  4100
   5932  4100							; This is a 2-line kernel!
   5933  4100					      ifnconst	vertical_reflect
   5934  4100				   kernel
   5935  4100					      endif
   5936  4100		       85 02		      sta	WSYNC
   5937  4102		       a9 ff		      lda	#255
   5938  4104		       8d 96 02 	      sta	TIM64T
   5939  4107
   5940  4107		       a9 01		      lda	#1
   5941  4109		       85 27		      sta	VDELBL
   5942  410b		       85 25		      sta	VDELP0
   5943  410d		       a6 92		      ldx	ballheight
   5944  410f		       e8		      inx
   5945  4110		       e8		      inx
   5946  4111		       86 9f		      stx	temp4
   5947  4113		       a5 86		      lda	player1y
   5948  4115		       85 9e		      sta	temp3
   5949  4117
   5950  4117				  -	      ifconst	shakescreen
   5951  4117				  -	      jsr	doshakescreen
   5952  4117					      else
   5953  4117		       a6 90		      ldx	missile0height
   5954  4119		       e8		      inx
   5955  411a					      endif
   5956  411a
   5957  411a		       e8		      inx
   5958  411b		       86 f6		      stx	stack1
   5959  411d
   5960  411d		       a5 89		      lda	bally
   5961  411f		       85 f7		      sta	stack2
   5962  4121
   5963  4121		       a5 85		      lda	player0y
   5964  4123		       a2 00		      ldx	#0
   5965  4125		       85 02		      sta	WSYNC
   5966  4127		       86 1b		      stx	GRP0
   5967  4129		       86 1c		      stx	GRP1
   5968  412b		       86 0e		      stx	PF1L
   5969  412d		       86 0f		      stx	PF2
   5970  412f		       86 2c		      stx	CXCLR
   5971  4131				  -	      ifconst	readpaddle
   5972  4131				  -	      stx	paddle
   5973  4131					      else
      0  4131					      sleep	3
      1  4131				   .CYCLES    SET	3
      2  4131
      3  4131				  -	      IF	.CYCLES < 2
      4  4131				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  4131				  -	      ERR
      6  4131					      ENDIF
      7  4131
      8  4131					      IF	.CYCLES & 1
      9  4131					      IFNCONST	NO_ILLEGAL_OPCODES
     10  4131		       04 00		      nop	0
     11  4133				  -	      ELSE
     12  4133				  -	      bit	VSYNC
     13  4133					      ENDIF
     14  4133				   .CYCLES    SET	.CYCLES - 3
     15  4133					      ENDIF
     16  4133
     17  4133				  -	      REPEAT	.CYCLES / 2
     18  4133				  -	      nop
     19  4133					      REPEND
   5975  4133					      endif
   5976  4133
   5977  4133		       95 9d		      sta	temp2,x
   5978  4135
   5979  4135							;store these so they can be retrieved later
   5980  4135				  -	      ifnconst	pfres
   5981  4135				  -	      ldx	#128-44+(4-pfwidth)*12
   5982  4135					      else
   5983  4135		       a2 74		      ldx	#132-pfres*pfwidth
   5984  4137					      endif
   5985  4137
   5986  4137		       c6 85		      dec	player0y
   5987  4139
   5988  4139		       a5 91		      lda	missile0y
   5989  413b		       85 a0		      sta	temp5
   5990  413d		       a5 88		      lda	missile1y
   5991  413f		       85 a1		      sta	temp6
   5992  4141
   5993  4141		       a5 ef		      lda	playfieldpos
   5994  4143		       85 9c		      sta	temp1
   5995  4145
   5996  4145				  -	      ifconst	pfrowheight
   5997  4145				  -	      lda	#pfrowheight+2
   5998  4145					      else
   5999  4145				  -	      ifnconst	pfres
   6000  4145				  -	      lda	#10
   6001  4145					      else
   6002  4145		       a9 1a		      lda	#(96/pfres)+2	; try to come close to the real size
   6003  4147					      endif
   6004  4147					      endif
   6005  4147		       18		      clc
   6006  4148		       e5 ef		      sbc	playfieldpos
   6007  414a		       85 ef		      sta	playfieldpos
   6008  414c		       4c 78 f1 	      jmp	.startkernel
   6009  414f
   6010  414f				   .skipDrawP0
   6011  414f		       a9 00		      lda	#0
   6012  4151		       a8		      tay
   6013  4152		       4c aa f1 	      jmp	.continueP0
   6014  4155
   6015  4155				   .skipDrawP1
   6016  4155		       a9 00		      lda	#0
   6017  4157		       a8		      tay
   6018  4158		       4c 82 f1 	      jmp	.continueP1
   6019  415b
   6020  415b				   .kerloop		; enter at cycle 59??
   6021  415b
   6022  415b				   continuekernel
      0  415b					      sleep	2
      1  415b				   .CYCLES    SET	2
      2  415b
      3  415b				  -	      IF	.CYCLES < 2
      4  415b				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  415b				  -	      ERR
      6  415b					      ENDIF
      7  415b
      8  415b				  -	      IF	.CYCLES & 1
      9  415b				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  415b				  -	      nop	0
     11  415b				  -	      ELSE
     12  415b				  -	      bit	VSYNC
     13  415b				  -	      ENDIF
     14  415b				  -.CYCLES    SET	.CYCLES - 3
     15  415b					      ENDIF
     16  415b
     17  415b					      REPEAT	.CYCLES / 2
     18  415b		       ea		      nop
     19  415c					      REPEND
   6024  415c				   continuekernel2
   6025  415c		       a5 92		      lda	ballheight
   6026  415e
   6027  415e					      ifconst	pfres
   6028  415e		       bc 7c 10 	      ldy	playfield+pfres*pfwidth-132,x
   6029  4161		       84 0e		      sty	PF1L	;3
   6030  4163		       bc 7d 10 	      ldy	playfield+pfres*pfwidth-131-pfadjust,x
   6031  4166		       84 0f		      sty	PF2L	;3
   6032  4168		       bc 7f 10 	      ldy	playfield+pfres*pfwidth-129,x
   6033  416b		       84 0e		      sty	PF1R	; 3 too early?
   6034  416d		       bc 7e 10 	      ldy	playfield+pfres*pfwidth-130-pfadjust,x
   6035  4170		       84 0f		      sty	PF2R	;3
   6036  4172				  -	      else
   6037  4172				  -	      ldy	playfield-48+pfwidth*12+44-128,x
   6038  4172				  -	      sty	PF1L	;3
   6039  4172				  -	      ldy	playfield-48+pfwidth*12+45-128-pfadjust,x	;4
   6040  4172				  -	      sty	PF2L	;3
   6041  4172				  -	      ldy	playfield-48+pfwidth*12+47-128,x	;4
   6042  4172				  -	      sty	PF1R	; 3 too early?
   6043  4172				  -	      ldy	playfield-48+pfwidth*12+46-128-pfadjust,x	;4
   6044  4172				  -	      sty	PF2R	;3
   6045  4172					      endif
   6046  4172
   6047  4172							; should be playfield+$38 for width=2
   6048  4172
   6049  4172		       c7 89		      dcp	bally
   6050  4174		       2a		      rol
   6051  4175		       2a		      rol
   6052  4176							; rol
   6053  4176							; rol
   6054  4176				   goback
   6055  4176		       85 1f		      sta	ENABL
   6056  4178				   .startkernel
   6057  4178		       a5 8f		      lda	player1height	;3
   6058  417a		       c7 86		      dcp	player1y	;5
   6059  417c		       90 d7		      bcc	.skipDrawP1	;2
   6060  417e		       a4 86		      ldy	player1y	;3
   6061  4180		       b1 8c		      lda	(player1pointer),y	;5; player0pointer must be selected carefully by the compiler
   6062  4182							; so it doesn't cross a page boundary!
   6063  4182
   6064  4182				   .continueP1
   6065  4182		       85 1c		      sta	GRP1	;3
   6066  4184
   6067  4184				  -	      ifnconst	player1colors
   6068  4184				  -	      lda	missile1height	;3
   6069  4184				  -	      dcp	missile1y	;5
   6070  4184				  -	      rol		;2
   6071  4184				  -	      rol		;2
   6072  4184				  -	      sta	ENAM1	;3
   6073  4184					      else
   6074  4184		       b1 87		      lda	(player1color),y
   6075  4186		       85 07		      sta	COLUP1
   6076  4188					      ifnconst	playercolors
      0  4188					      sleep	7
      1  4188				   .CYCLES    SET	7
      2  4188
      3  4188				  -	      IF	.CYCLES < 2
      4  4188				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  4188				  -	      ERR
      6  4188					      ENDIF
      7  4188
      8  4188					      IF	.CYCLES & 1
      9  4188					      IFNCONST	NO_ILLEGAL_OPCODES
     10  4188		       04 00		      nop	0
     11  418a				  -	      ELSE
     12  418a				  -	      bit	VSYNC
     13  418a					      ENDIF
     14  418a				   .CYCLES    SET	.CYCLES - 3
     15  418a					      ENDIF
     16  418a
     17  418a					      REPEAT	.CYCLES / 2
     18  418a		       ea		      nop
     17  418a					      REPEND
     18  418b		       ea		      nop
     19  418c					      REPEND
   6078  418c				  -	      else
   6079  418c				  -	      lda.w	player0colorstore
   6080  418c				  -	      sta	COLUP0
   6081  418c					      endif
   6082  418c					      endif
   6083  418c
   6084  418c					      ifconst	pfres
   6085  418c		       bd 7c 10 	      lda	playfield+pfres*pfwidth-132,x
   6086  418f		       85 0e		      sta	PF1L	;3
   6087  4191		       bd 7d 10 	      lda	playfield+pfres*pfwidth-131-pfadjust,x
   6088  4194		       85 0f		      sta	PF2L	;3
   6089  4196		       bd 7f 10 	      lda	playfield+pfres*pfwidth-129,x
   6090  4199		       85 0e		      sta	PF1R	; 3 too early?
   6091  419b		       bd 7e 10 	      lda	playfield+pfres*pfwidth-130-pfadjust,x
   6092  419e		       85 0f		      sta	PF2R	;3
   6093  41a0				  -	      else
   6094  41a0				  -	      lda	playfield-48+pfwidth*12+44-128,x	;4
   6095  41a0				  -	      sta	PF1L	;3
   6096  41a0				  -	      lda	playfield-48+pfwidth*12+45-128-pfadjust,x	;4
   6097  41a0				  -	      sta	PF2L	;3
   6098  41a0				  -	      lda	playfield-48+pfwidth*12+47-128,x	;4
   6099  41a0				  -	      sta	PF1R	; 3 too early?
   6100  41a0				  -	      lda	playfield-48+pfwidth*12+46-128-pfadjust,x	;4
   6101  41a0				  -	      sta	PF2R	;3
   6102  41a0					      endif
   6103  41a0							; sleep 3
   6104  41a0
   6105  41a0		       a5 8e		      lda	player0height
   6106  41a2		       c7 85		      dcp	player0y
   6107  41a4		       90 a9		      bcc	.skipDrawP0
   6108  41a6		       a4 85		      ldy	player0y
   6109  41a8		       b1 8a		      lda	(player0pointer),y
   6110  41aa				   .continueP0
   6111  41aa		       85 1b		      sta	GRP0
   6112  41ac
   6113  41ac					      ifnconst	no_blank_lines
   6114  41ac					      ifnconst	playercolors
   6115  41ac		       a5 90		      lda	missile0height	;3
   6116  41ae		       c7 91		      dcp	missile0y	;5
   6117  41b0		       e5 f6		      sbc	stack1
   6118  41b2		       85 1d		      sta	ENAM0	;3
   6119  41b4				  -	      else
   6120  41b4				  -	      lda	(player0color),y
   6121  41b4				  -	      sta	player0colorstore
   6122  41b4				  -	      sleep	6
   6123  41b4					      endif
   6124  41b4		       c6 9c		      dec	temp1
   6125  41b6		       d0 a3		      bne	continuekernel
   6126  41b8				  -	      else
   6127  41b8				  -	      dec	temp1
   6128  41b8				  -	      beq	altkernel2
   6129  41b8				  -	      ifconst	readpaddle
   6130  41b8				  -	      ldy	currentpaddle
   6131  41b8				  -	      lda	INPT0,y
   6132  41b8				  -	      bpl	noreadpaddle
   6133  41b8				  -	      inc	paddle
   6134  41b8				  -	      jmp	continuekernel2
   6135  41b8				  -noreadpaddle
   6136  41b8				  -	      sleep	2
   6137  41b8				  -	      jmp	continuekernel
   6138  41b8				  -	      else
   6139  41b8				  -	      ifnconst	playercolors
   6140  41b8				  -	      ifconst	PFcolors
   6141  41b8				  -	      txa
   6142  41b8				  -	      tay
   6143  41b8				  -	      lda	(pfcolortable),y
   6144  41b8				  -	      ifnconst	backgroundchange
   6145  41b8				  -	      sta	COLUPF
   6146  41b8				  -	      else
   6147  41b8				  -	      sta	COLUBK
   6148  41b8				  -	      endif
   6149  41b8				  -	      jmp	continuekernel
   6150  41b8				  -	      else
   6151  41b8				  -	      ifconst	kernelmacrodef
   6152  41b8				  -	      kernelmacro
   6153  41b8				  -	      else
   6154  41b8				  -	      sleep	12
   6155  41b8				  -	      endif
   6156  41b8				  -	      endif
   6157  41b8				  -	      else
   6158  41b8				  -	      lda	(player0color),y
   6159  41b8				  -	      sta	player0colorstore
   6160  41b8				  -	      sleep	4
   6161  41b8				  -	      endif
   6162  41b8				  -	      jmp	continuekernel
   6163  41b8				  -	      endif
   6164  41b8				  -altkernel2
   6165  41b8				  -	      txa
   6166  41b8				  -	      ifnconst	vertical_reflect
   6167  41b8				  -	      sbx	#256-pfwidth
   6168  41b8				  -	      else
   6169  41b8				  -	      sbx	#256-pfwidth/2
   6170  41b8				  -	      endif
   6171  41b8				  -	      bmi	lastkernelline
   6172  41b8				  -	      ifconst	pfrowheight
   6173  41b8				  -	      lda	#pfrowheight
   6174  41b8				  -	      else
   6175  41b8				  -	      ifnconst	pfres
   6176  41b8				  -	      lda	#8
   6177  41b8				  -	      else
   6178  41b8				  -	      lda	#(96/pfres)	; try to come close to the real size
   6179  41b8				  -	      endif
   6180  41b8				  -	      endif
   6181  41b8				  -	      sta	temp1
   6182  41b8				  -	      jmp	continuekernel
   6183  41b8					      endif
   6184  41b8
   6185  41b8				   altkernel
   6186  41b8
   6187  41b8				  -	      ifconst	PFmaskvalue
   6188  41b8				  -	      lda	#PFmaskvalue
   6189  41b8					      else
   6190  41b8		       a9 00		      lda	#0
   6191  41ba					      endif
   6192  41ba		       85 0e		      sta	PF1L
   6193  41bc		       85 0f		      sta	PF2
   6194  41be
   6195  41be
   6196  41be							;sleep 3
   6197  41be
   6198  41be							;28 cycles to fix things
   6199  41be							;minus 11=17
   6200  41be
   6201  41be							; lax temp4
   6202  41be							; clc
   6203  41be		       8a		      txa
   6204  41bf					      ifnconst	vertical_reflect
   6205  41bf		       cb fc		      sbx	#256-pfwidth
   6206  41c1				  -	      else
   6207  41c1				  -	      sbx	#256-pfwidth/2
   6208  41c1					      endif
   6209  41c1
   6210  41c1		       30 12		      bmi	lastkernelline
   6211  41c3
   6212  41c3				  -	      ifconst	PFcolorandheight
   6213  41c3				  -	      ifconst	pfres
   6214  41c3				  -	      ldy	playfieldcolorandheight-131+pfres*pfwidth,x
   6215  41c3				  -	      else
   6216  41c3				  -	      ldy	playfieldcolorandheight-87,x
   6217  41c3				  -	      endif
   6218  41c3				  -	      ifnconst	backgroundchange
   6219  41c3				  -	      sty	COLUPF
   6220  41c3				  -	      else
   6221  41c3				  -	      sty	COLUBK
   6222  41c3				  -	      endif
   6223  41c3				  -	      ifconst	pfres
   6224  41c3				  -	      lda	playfieldcolorandheight-132+pfres*pfwidth,x
   6225  41c3				  -	      else
   6226  41c3				  -	      lda	playfieldcolorandheight-88,x
   6227  41c3				  -	      endif
   6228  41c3				  -	      sta.w	temp1
   6229  41c3					      endif
   6230  41c3				  -	      ifconst	PFheights
   6231  41c3				  -	      lsr
   6232  41c3				  -	      lsr
   6233  41c3				  -	      tay
   6234  41c3				  -	      lda	(pfheighttable),y
   6235  41c3				  -	      sta.w	temp1
   6236  41c3					      endif
   6237  41c3					      ifconst	PFcolors
   6238  41c3		       a8		      tay
   6239  41c4		       b1 f0		      lda	(pfcolortable),y
   6240  41c6					      ifnconst	backgroundchange
   6241  41c6		       85 08		      sta	COLUPF
   6242  41c8				  -	      else
   6243  41c8				  -	      sta	COLUBK
   6244  41c8					      endif
   6245  41c8				  -	      ifconst	pfrowheight
   6246  41c8				  -	      lda	#pfrowheight
   6247  41c8					      else
   6248  41c8				  -	      ifnconst	pfres
   6249  41c8				  -	      lda	#8
   6250  41c8					      else
   6251  41c8		       a9 18		      lda	#(96/pfres)	; try to come close to the real size
   6252  41ca					      endif
   6253  41ca					      endif
   6254  41ca		       85 9c		      sta	temp1
   6255  41cc					      endif
   6256  41cc					      ifnconst	PFcolorandheight
   6257  41cc				  -	      ifnconst	PFcolors
   6258  41cc				  -	      ifnconst	PFheights
   6259  41cc				  -	      ifnconst	no_blank_lines
   6260  41cc				  -			; read paddle 0
   6261  41cc				  -			; lo-res paddle read
   6262  41cc				  -			; bit INPT0
   6263  41cc				  -			; bmi paddleskipread
   6264  41cc				  -			; inc paddle0
   6265  41cc				  -			;donepaddleskip
   6266  41cc				  -	      sleep	10
   6267  41cc				  -	      ifconst	pfrowheight
   6268  41cc				  -	      lda	#pfrowheight
   6269  41cc				  -	      else
   6270  41cc				  -	      ifnconst	pfres
   6271  41cc				  -	      lda	#8
   6272  41cc				  -	      else
   6273  41cc				  -	      lda	#(96/pfres)	; try to come close to the real size
   6274  41cc				  -	      endif
   6275  41cc				  -	      endif
   6276  41cc				  -	      sta	temp1
   6277  41cc				  -	      endif
   6278  41cc				  -	      endif
   6279  41cc					      endif
   6280  41cc					      endif
   6281  41cc
   6282  41cc
   6283  41cc		       a5 92		      lda	ballheight
   6284  41ce		       c7 89		      dcp	bally
   6285  41d0		       e5 9f		      sbc	temp4
   6286  41d2
   6287  41d2
   6288  41d2		       4c 76 f1 	      jmp	goback
   6289  41d5
   6290  41d5
   6291  41d5					      ifnconst	no_blank_lines
   6292  41d5				   lastkernelline
   6293  41d5				  -	      ifnconst	PFcolors
   6294  41d5				  -	      sleep	10
   6295  41d5					      else
   6296  41d5		       a0 7c		      ldy	#124
   6297  41d7		       b1 f0		      lda	(pfcolortable),y
   6298  41d9		       85 08		      sta	COLUPF
   6299  41db					      endif
   6300  41db
   6301  41db				  -	      ifconst	PFheights
   6302  41db				  -	      ldx	#1
   6303  41db				  -			;sleep 4
   6304  41db				  -	      sleep	3	; this was over 1 cycle
   6305  41db					      else
   6306  41db		       a6 ef		      ldx	playfieldpos
   6307  41dd							;sleep 3
      0  41dd					      sleep	2	; this was over 1 cycle
      1  41dd				   .CYCLES    SET	2
      2  41dd
      3  41dd				  -	      IF	.CYCLES < 2
      4  41dd				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  41dd				  -	      ERR
      6  41dd					      ENDIF
      7  41dd
      8  41dd				  -	      IF	.CYCLES & 1
      9  41dd				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  41dd				  -	      nop	0
     11  41dd				  -	      ELSE
     12  41dd				  -	      bit	VSYNC
     13  41dd				  -	      ENDIF
     14  41dd				  -.CYCLES    SET	.CYCLES - 3
     15  41dd					      ENDIF
     16  41dd
     17  41dd					      REPEAT	.CYCLES / 2
     18  41dd		       ea		      nop
     19  41de					      REPEND
   6309  41de					      endif
   6310  41de
   6311  41de		       4c 1b f2 	      jmp	enterlastkernel
   6312  41e1
   6313  41e1				  -	      else
   6314  41e1				  -lastkernelline
   6315  41e1				  -
   6316  41e1				  -	      ifconst	PFheights
   6317  41e1				  -	      ldx	#1
   6318  41e1				  -			;sleep 5
   6319  41e1				  -	      sleep	4	; this was over 1 cycle
   6320  41e1				  -	      else
   6321  41e1				  -	      ldx	playfieldpos
   6322  41e1				  -			;sleep 4
   6323  41e1				  -	      sleep	3	; this was over 1 cycle
   6324  41e1				  -	      endif
   6325  41e1				  -
   6326  41e1				  -	      cpx	#0
   6327  41e1				  -	      bne	.enterfromNBL
   6328  41e1				  -	      jmp	no_blank_lines_bailout
   6329  41e1					      endif
   6330  41e1
   6331  41e1					      if	((<*)>$d5)
   6332  4200		       00 00 00 00*	      align	256
   6333  4200					      endif
   6334  4200							; this is a kludge to prevent page wrapping - fix!!!
   6335  4200
   6336  4200				   .skipDrawlastP1
   6337  4200		       a9 00		      lda	#0
   6338  4202		       a8		      tay		; added so we don't cross a page
   6339  4203		       4c 2d f2 	      jmp	.continuelastP1
   6340  4206
   6341  4206				   .endkerloop		; enter at cycle 59??
   6342  4206
   6343  4206		       ea		      nop
   6344  4207
   6345  4207				   .enterfromNBL
   6346  4207					      ifconst	pfres
   6347  4207		       ac fc 10 	      ldy.w	playfield+pfres*pfwidth-4
   6348  420a		       84 0e		      sty	PF1L	;3
   6349  420c		       ac fd 10 	      ldy.w	playfield+pfres*pfwidth-3-pfadjust
   6350  420f		       84 0f		      sty	PF2L	;3
   6351  4211		       ac ff 10 	      ldy.w	playfield+pfres*pfwidth-1
   6352  4214		       84 0e		      sty	PF1R	; possibly too early?
   6353  4216		       ac fe 10 	      ldy.w	playfield+pfres*pfwidth-2-pfadjust
   6354  4219		       84 0f		      sty	PF2R	;3
   6355  421b				  -	      else
   6356  421b				  -	      ldy.w	playfield-48+pfwidth*12+44
   6357  421b				  -	      sty	PF1L	;3
   6358  421b				  -	      ldy.w	playfield-48+pfwidth*12+45-pfadjust
   6359  421b				  -	      sty	PF2L	;3
   6360  421b				  -	      ldy.w	playfield-48+pfwidth*12+47
   6361  421b				  -	      sty	PF1R	; possibly too early?
   6362  421b				  -	      ldy.w	playfield-48+pfwidth*12+46-pfadjust
   6363  421b				  -	      sty	PF2R	;3
   6364  421b					      endif
   6365  421b
   6366  421b				   enterlastkernel
   6367  421b		       a5 92		      lda	ballheight
   6368  421d
   6369  421d							; tya
   6370  421d		       c7 89		      dcp	bally
   6371  421f							; sleep 4
   6372  421f
   6373  421f							; sbc stack3
   6374  421f		       2a		      rol
   6375  4220		       2a		      rol
   6376  4221		       85 1f		      sta	ENABL
   6377  4223
   6378  4223		       a5 8f		      lda	player1height	;3
   6379  4225		       c7 86		      dcp	player1y	;5
   6380  4227		       90 d7		      bcc	.skipDrawlastP1
   6381  4229		       a4 86		      ldy	player1y	;3
   6382  422b		       b1 8c		      lda	(player1pointer),y	;5; player0pointer must be selected carefully by the compiler
   6383  422d							; so it doesn't cross a page boundary!
   6384  422d
   6385  422d				   .continuelastP1
   6386  422d		       85 1c		      sta	GRP1	;3
   6387  422f
   6388  422f				  -	      ifnconst	player1colors
   6389  422f				  -	      lda	missile1height	;3
   6390  422f				  -	      dcp	missile1y	;5
   6391  422f					      else
   6392  422f		       b1 87		      lda	(player1color),y
   6393  4231		       85 07		      sta	COLUP1
   6394  4233					      endif
   6395  4233
   6396  4233		       ca		      dex
   6397  4234							;dec temp4 ; might try putting this above PF writes
   6398  4234		       f0 36		      beq	endkernel
   6399  4236
   6400  4236
   6401  4236					      ifconst	pfres
   6402  4236		       ac fc 10 	      ldy.w	playfield+pfres*pfwidth-4
   6403  4239		       84 0e		      sty	PF1L	;3
   6404  423b		       ac fd 10 	      ldy.w	playfield+pfres*pfwidth-3-pfadjust
   6405  423e		       84 0f		      sty	PF2L	;3
   6406  4240		       ac ff 10 	      ldy.w	playfield+pfres*pfwidth-1
   6407  4243		       84 0e		      sty	PF1R	; possibly too early?
   6408  4245		       ac fe 10 	      ldy.w	playfield+pfres*pfwidth-2-pfadjust
   6409  4248		       84 0f		      sty	PF2R	;3
   6410  424a				  -	      else
   6411  424a				  -	      ldy.w	playfield-48+pfwidth*12+44
   6412  424a				  -	      sty	PF1L	;3
   6413  424a				  -	      ldy.w	playfield-48+pfwidth*12+45-pfadjust
   6414  424a				  -	      sty	PF2L	;3
   6415  424a				  -	      ldy.w	playfield-48+pfwidth*12+47
   6416  424a				  -	      sty	PF1R	; possibly too early?
   6417  424a				  -	      ldy.w	playfield-48+pfwidth*12+46-pfadjust
   6418  424a				  -	      sty	PF2R	;3
   6419  424a					      endif
   6420  424a
   6421  424a				  -	      ifnconst	player1colors
   6422  424a				  -	      rol		;2
   6423  424a				  -	      rol		;2
   6424  424a				  -	      sta	ENAM1	;3
   6425  424a					      else
   6426  424a					      ifnconst	playercolors
      0  424a					      sleep	7
      1  424a				   .CYCLES    SET	7
      2  424a
      3  424a				  -	      IF	.CYCLES < 2
      4  424a				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  424a				  -	      ERR
      6  424a					      ENDIF
      7  424a
      8  424a					      IF	.CYCLES & 1
      9  424a					      IFNCONST	NO_ILLEGAL_OPCODES
     10  424a		       04 00		      nop	0
     11  424c				  -	      ELSE
     12  424c				  -	      bit	VSYNC
     13  424c					      ENDIF
     14  424c				   .CYCLES    SET	.CYCLES - 3
     15  424c					      ENDIF
     16  424c
     17  424c					      REPEAT	.CYCLES / 2
     18  424c		       ea		      nop
     17  424c					      REPEND
     18  424d		       ea		      nop
     19  424e					      REPEND
   6428  424e				  -	      else
   6429  424e				  -	      lda.w	player0colorstore
   6430  424e				  -	      sta	COLUP0
   6431  424e					      endif
   6432  424e					      endif
   6433  424e
   6434  424e		       ad 8e 00 	      lda.w	player0height
   6435  4251		       c7 85		      dcp	player0y
   6436  4253		       90 11		      bcc	.skipDrawlastP0
   6437  4255		       a4 85		      ldy	player0y
   6438  4257		       b1 8a		      lda	(player0pointer),y
   6439  4259				   .continuelastP0
   6440  4259		       85 1b		      sta	GRP0
   6441  425b
   6442  425b
   6443  425b
   6444  425b					      ifnconst	no_blank_lines
   6445  425b		       a5 90		      lda	missile0height	;3
   6446  425d		       c7 91		      dcp	missile0y	;5
   6447  425f		       e5 f6		      sbc	stack1
   6448  4261		       85 1d		      sta	ENAM0	;3
   6449  4263		       4c 06 f2 	      jmp	.endkerloop
   6450  4266				  -	      else
   6451  4266				  -	      ifconst	readpaddle
   6452  4266				  -	      ldy	currentpaddle
   6453  4266				  -	      lda	INPT0,y
   6454  4266				  -	      bpl	noreadpaddle2
   6455  4266				  -	      inc	paddle
   6456  4266				  -	      jmp	.endkerloop
   6457  4266				  -noreadpaddle2
   6458  4266				  -	      sleep	4
   6459  4266				  -	      jmp	.endkerloop
   6460  4266				  -	      else		; no_blank_lines and no paddle reading
   6461  4266				  -	      pla
   6462  4266				  -	      pha		; 14 cycles in 4 bytes
   6463  4266				  -	      pla
   6464  4266				  -	      pha
   6465  4266				  -			; sleep 14
   6466  4266				  -	      jmp	.endkerloop
   6467  4266				  -	      endif
   6468  4266					      endif
   6469  4266
   6470  4266
   6471  4266							; ifconst donepaddleskip
   6472  4266							;paddleskipread
   6473  4266							; this is kind of lame, since it requires 4 cycles from a page boundary crossing
   6474  4266							; plus we get a lo-res paddle read
   6475  4266							; bmi donepaddleskip
   6476  4266							; endif
   6477  4266
   6478  4266				   .skipDrawlastP0
   6479  4266		       a9 00		      lda	#0
   6480  4268		       a8		      tay
   6481  4269		       4c 59 f2 	      jmp	.continuelastP0
   6482  426c
   6483  426c				  -	      ifconst	no_blank_lines
   6484  426c				  -no_blank_lines_bailout
   6485  426c				  -	      ldx	#0
   6486  426c					      endif
   6487  426c
   6488  426c				   endkernel
   6489  426c							; 6 digit score routine
   6490  426c		       86 0e		      stx	PF1
   6491  426e		       86 0f		      stx	PF2
   6492  4270		       86 0d		      stx	PF0
   6493  4272		       18		      clc
   6494  4273
   6495  4273				  -	      ifconst	pfrowheight
   6496  4273				  -	      lda	#pfrowheight+2
   6497  4273					      else
   6498  4273				  -	      ifnconst	pfres
   6499  4273				  -	      lda	#10
   6500  4273					      else
   6501  4273		       a9 1a		      lda	#(96/pfres)+2	; try to come close to the real size
   6502  4275					      endif
   6503  4275					      endif
   6504  4275
   6505  4275		       e5 ef		      sbc	playfieldpos
   6506  4277		       85 ef		      sta	playfieldpos
   6507  4279		       8a		      txa
   6508  427a
   6509  427a				  -	      ifconst	shakescreen
   6510  427a				  -	      bit	shakescreen
   6511  427a				  -	      bmi	noshakescreen2
   6512  427a				  -	      ldx	#$3D
   6513  427a				  -noshakescreen2
   6514  427a					      endif
   6515  427a
   6516  427a		       95 02		      sta	WSYNC,x
   6517  427c
   6518  427c							; STA WSYNC ;first one, need one more
   6519  427c		       85 0b		      sta	REFP0
   6520  427e		       85 0c		      sta	REFP1
   6521  4280		       85 1b		      STA	GRP0
   6522  4282		       85 1c		      STA	GRP1
   6523  4284							; STA PF1
   6524  4284							; STA PF2
   6525  4284		       85 2b		      sta	HMCLR
   6526  4286		       85 1d		      sta	ENAM0
   6527  4288		       85 1e		      sta	ENAM1
   6528  428a		       85 1f		      sta	ENABL
   6529  428c
   6530  428c		       a5 9d		      lda	temp2	;restore variables that were obliterated by kernel
   6531  428e		       85 85		      sta	player0y
   6532  4290		       a5 9e		      lda	temp3
   6533  4292		       85 86		      sta	player1y
   6534  4294				  -	      ifnconst	player1colors
   6535  4294				  -	      lda	temp6
   6536  4294				  -	      sta	missile1y
   6537  4294					      endif
   6538  4294					      ifnconst	playercolors
   6539  4294					      ifnconst	readpaddle
   6540  4294		       a5 a0		      lda	temp5
   6541  4296		       85 91		      sta	missile0y
   6542  4298					      endif
   6543  4298					      endif
   6544  4298		       a5 f7		      lda	stack2
   6545  429a		       85 89		      sta	bally
   6546  429c
   6547  429c							; strangely, this isn't required any more. might have
   6548  429c							; resulted from the no_blank_lines score bounce fix
   6549  429c							;ifconst no_blank_lines
   6550  429c							;sta WSYNC
   6551  429c							;endif
   6552  429c
   6553  429c		       ad 84 02 	      lda	INTIM
   6554  429f		       18		      clc
   6555  42a0					      ifnconst	vblank_time
   6556  42a0		       69 8e		      adc	#43+12+87
   6557  42a2				  -	      else
   6558  42a2				  -	      adc	#vblank_time+12+87
   6559  42a2				  -
   6560  42a2					      endif
   6561  42a2							; sta WSYNC
   6562  42a2		       8d 96 02 	      sta	TIM64T
   6563  42a5
   6564  42a5					      ifconst	minikernel
   6565  42a5		       20 86 f5 	      jsr	minikernel
   6566  42a8					      endif
   6567  42a8
   6568  42a8							; now reassign temp vars for score pointers
   6569  42a8
   6570  42a8							; score pointers contain:
   6571  42a8							; score1-5: lo1,lo2,lo3,lo4,lo5,lo6
   6572  42a8							; swap lo2->temp1
   6573  42a8							; swap lo4->temp3
   6574  42a8							; swap lo6->temp5
   6575  42a8				  -	      ifnconst	noscore
   6576  42a8				  -	      lda	scorepointers+1
   6577  42a8				  -			; ldy temp1
   6578  42a8				  -	      sta	temp1
   6579  42a8				  -			; sty scorepointers+1
   6580  42a8				  -
   6581  42a8				  -	      lda	scorepointers+3
   6582  42a8				  -			; ldy temp3
   6583  42a8				  -	      sta	temp3
   6584  42a8				  -			; sty scorepointers+3
   6585  42a8				  -
   6586  42a8				  -
   6587  42a8				  -	      sta	HMCLR
   6588  42a8				  -	      tsx
   6589  42a8				  -	      stx	stack1
   6590  42a8				  -	      ldx	#$E0
   6591  42a8				  -	      stx	HMP0
   6592  42a8				  -
   6593  42a8				  -	      LDA	scorecolor
   6594  42a8				  -	      STA	COLUP0
   6595  42a8				  -	      STA	COLUP1
   6596  42a8				  -	      ifconst	scorefade
   6597  42a8				  -	      STA	stack2
   6598  42a8				  -	      endif
   6599  42a8				  -	      ifconst	pfscore
   6600  42a8				  -	      lda	pfscorecolor
   6601  42a8				  -	      sta	COLUPF
   6602  42a8				  -	      endif
   6603  42a8				  -	      sta	WSYNC
   6604  42a8				  -	      ldx	#0
   6605  42a8				  -	      STx	GRP0
   6606  42a8				  -	      STx	GRP1	; seems to be needed because of vdel
   6607  42a8				  -
   6608  42a8				  -	      lda	scorepointers+5
   6609  42a8				  -			; ldy temp5
   6610  42a8				  -	      sta	temp5,x
   6611  42a8				  -			; sty scorepointers+5
   6612  42a8				  -	      lda	#>scoretable
   6613  42a8				  -	      sta	scorepointers+1
   6614  42a8				  -	      sta	scorepointers+3
   6615  42a8				  -	      sta	scorepointers+5
   6616  42a8				  -	      sta	temp2
   6617  42a8				  -	      sta	temp4
   6618  42a8				  -	      sta	temp6
   6619  42a8				  -	      LDY	#7
   6620  42a8				  -	      STY	VDELP0
   6621  42a8				  -	      STA	RESP0
   6622  42a8				  -	      STA	RESP1
   6623  42a8				  -
   6624  42a8				  -
   6625  42a8				  -	      LDA	#$03
   6626  42a8				  -	      STA	NUSIZ0
   6627  42a8				  -	      STA	NUSIZ1
   6628  42a8				  -	      STA	VDELP1
   6629  42a8				  -	      LDA	#$F0
   6630  42a8				  -	      STA	HMP1
   6631  42a8				  -	      lda	(scorepointers),y
   6632  42a8				  -	      sta	GRP0
   6633  42a8				  -	      STA	HMOVE	; cycle 73 ?
   6634  42a8				  -	      jmp	beginscore
   6635  42a8				  -
   6636  42a8				  -
   6637  42a8				  -	      if	((<*)>$d4)
   6638  42a8				  -	      align	256	; kludge that potentially wastes space! should be fixed!
   6639  42a8				  -	      endif
   6640  42a8				  -
   6641  42a8				  -loop2
   6642  42a8				  -	      lda	(scorepointers),y	;+5 68 204
   6643  42a8				  -	      sta	GRP0	;+3 71 213 D1 -- -- --
   6644  42a8				  -	      ifconst	pfscore
   6645  42a8				  -	      lda.w	pfscore1
   6646  42a8				  -	      sta	PF1
   6647  42a8				  -	      else
   6648  42a8				  -	      ifconst	scorefade
   6649  42a8				  -	      sleep	2
   6650  42a8				  -	      dec	stack2	; decrement the temporary scorecolor
   6651  42a8				  -	      else
   6652  42a8				  -	      sleep	7
   6653  42a8				  -	      endif
   6654  42a8				  -	      endif
   6655  42a8				  -			; cycle 0
   6656  42a8				  -beginscore
   6657  42a8				  -	      lda	(scorepointers+$8),y	;+5 5 15
   6658  42a8				  -	      sta	GRP1	;+3 8 24 D1 D1 D2 --
   6659  42a8				  -	      lda	(scorepointers+$6),y	;+5 13 39
   6660  42a8				  -	      sta	GRP0	;+3 16 48 D3 D1 D2 D2
   6661  42a8				  -	      lax	(scorepointers+$2),y	;+5 29 87
   6662  42a8				  -	      txs
   6663  42a8				  -	      lax	(scorepointers+$4),y	;+5 36 108
   6664  42a8				  -	      ifconst	scorefade
   6665  42a8				  -	      lda	stack2
   6666  42a8				  -	      else
   6667  42a8				  -	      sleep	3
   6668  42a8				  -	      endif
   6669  42a8				  -
   6670  42a8				  -	      ifconst	pfscore
   6671  42a8				  -	      lda	pfscore2
   6672  42a8				  -	      sta	PF1
   6673  42a8				  -	      else
   6674  42a8				  -	      ifconst	scorefade
   6675  42a8				  -	      sta	COLUP0
   6676  42a8				  -	      sta	COLUP1
   6677  42a8				  -	      else
   6678  42a8				  -	      sleep	6
   6679  42a8				  -	      endif
   6680  42a8				  -	      endif
   6681  42a8				  -
   6682  42a8				  -	      lda	(scorepointers+$A),y	;+5 21 63
   6683  42a8				  -	      stx	GRP1	;+3 44 132 D3 D3 D4 D2!
   6684  42a8				  -	      tsx
   6685  42a8				  -	      stx	GRP0	;+3 47 141 D5 D3! D4 D4
   6686  42a8				  -	      sta	GRP1	;+3 50 150 D5 D5 D6 D4!
   6687  42a8				  -	      sty	GRP0	;+3 53 159 D4* D5! D6 D6
   6688  42a8				  -	      dey
   6689  42a8				  -	      bpl	loop2	;+2 60 180
   6690  42a8				  -
   6691  42a8				  -	      ldx	stack1
   6692  42a8				  -	      txs
   6693  42a8				  -			; lda scorepointers+1
   6694  42a8				  -	      ldy	temp1
   6695  42a8				  -			; sta temp1
   6696  42a8				  -	      sty	scorepointers+1
   6697  42a8				  -
   6698  42a8				  -	      LDA	#0
   6699  42a8				  -	      sta	PF1
   6700  42a8				  -	      STA	GRP0
   6701  42a8				  -	      STA	GRP1
   6702  42a8				  -	      STA	VDELP0
   6703  42a8				  -	      STA	VDELP1	;do we need these
   6704  42a8				  -	      STA	NUSIZ0
   6705  42a8				  -	      STA	NUSIZ1
   6706  42a8				  -
   6707  42a8				  -			; lda scorepointers+3
   6708  42a8				  -	      ldy	temp3
   6709  42a8				  -			; sta temp3
   6710  42a8				  -	      sty	scorepointers+3
   6711  42a8				  -
   6712  42a8				  -			; lda scorepointers+5
   6713  42a8				  -	      ldy	temp5
   6714  42a8				  -			; sta temp5
   6715  42a8				  -	      sty	scorepointers+5
   6716  42a8					      endif		;noscore
   6717  42a8				  -	      ifconst	readpaddle
   6718  42a8				  -	      lda	#%11000010
   6719  42a8					      else
   6720  42a8				  -	      ifconst	qtcontroller
   6721  42a8				  -	      lda	qtcontroller
   6722  42a8				  -	      lsr		; bit 0 in carry
   6723  42a8				  -	      lda	#4
   6724  42a8				  -	      ror		; carry into top of A
   6725  42a8					      else
   6726  42a8		       a9 02		      lda	#2
   6727  42aa					      endif		; qtcontroller
   6728  42aa					      endif		; readpaddle
   6729  42aa		       85 02		      sta	WSYNC
   6730  42ac		       85 01		      sta	VBLANK
      0  42ae					      RETURN
      1  42ae				  -	      ifnconst	bankswitch
      2  42ae				  -	      rts
      3  42ae					      else
      4  42ae		       4c da ff 	      jmp	BS_return
      5  42b1					      endif
   6732  42b1				  -	      ifconst	shakescreen
   6733  42b1				  -doshakescreen
   6734  42b1				  -	      bit	shakescreen
   6735  42b1				  -	      bmi	noshakescreen
   6736  42b1				  -	      sta	WSYNC
   6737  42b1				  -noshakescreen
   6738  42b1				  -	      ldx	missile0height
   6739  42b1				  -	      inx
   6740  42b1				  -	      rts
   6741  42b1					      endif
   6742  42b1
   6743  42b1							; Provided under the CC0 license. See the included LICENSE.txt for details.
   6744  42b1
   6745  42b1				   start
   6746  42b1		       78		      sei
   6747  42b2		       d8		      cld
   6748  42b3		       a0 00		      ldy	#0
   6749  42b5		       a5 d0		      lda	$D0
   6750  42b7		       c9 2c		      cmp	#$2C	;check RAM location #1
   6751  42b9		       d0 07		      bne	MachineIs2600
   6752  42bb		       a5 d1		      lda	$D1
   6753  42bd		       c9 a9		      cmp	#$A9	;check RAM location #2
   6754  42bf		       d0 01		      bne	MachineIs2600
   6755  42c1		       88		      dey
   6756  42c2				   MachineIs2600
   6757  42c2		       a2 00		      ldx	#0
   6758  42c4		       8a		      txa
   6759  42c5				   clearmem
   6760  42c5		       e8		      inx
   6761  42c6		       9a		      txs
   6762  42c7		       48		      pha
   6763  42c8		       d0 fb		      bne	clearmem
   6764  42ca		       84 9c		      sty	temp1
   6765  42cc					      ifnconst	multisprite
   6766  42cc				  -	      ifconst	pfrowheight
   6767  42cc				  -	      lda	#pfrowheight
   6768  42cc					      else
   6769  42cc					      ifconst	pfres
   6770  42cc		       a9 18		      lda	#(96/pfres)
   6771  42ce				  -	      else
   6772  42ce				  -	      lda	#8
   6773  42ce					      endif
   6774  42ce					      endif
   6775  42ce		       85 ef		      sta	playfieldpos
   6776  42d0					      endif
   6777  42d0		       a2 05		      ldx	#5
   6778  42d2				   initscore
   6779  42d2		       a9 71		      lda	#<scoretable
   6780  42d4		       95 96		      sta	scorepointers,x
   6781  42d6		       ca		      dex
   6782  42d7		       10 f9		      bpl	initscore
   6783  42d9		       a9 01		      lda	#1
   6784  42db		       85 0a		      sta	CTRLPF
   6785  42dd		       0d 84 02 	      ora	INTIM
   6786  42e0		       85 a2		      sta	rand
   6787  42e2
   6788  42e2				  -	      ifconst	multisprite
   6789  42e2				  -	      jsr	multisprite_setup
   6790  42e2					      endif
   6791  42e2
   6792  42e2				  -	      ifnconst	bankswitch
   6793  42e2				  -	      jmp	game
   6794  42e2					      else
   6795  42e2		       a9 90		      lda	#>(game-1)
   6796  42e4		       48		      pha
   6797  42e5		       a9 ff		      lda	#<(game-1)
   6798  42e7		       48		      pha
   6799  42e8		       48		      pha
   6800  42e9		       48		      pha
   6801  42ea		       a2 01		      ldx	#1
   6802  42ec		       4c e8 ff 	      jmp	BS_jsr
   6803  42ef					      endif
   6804  42ef							; Provided under the CC0 license. See the included LICENSE.txt for details.
   6805  42ef
   6806  42ef							; playfield drawing routines
   6807  42ef							; you get a 32x12 bitmapped display in a single color :)
   6808  42ef							; 0-31 and 0-11
   6809  42ef
   6810  42ef				   pfclear		; clears playfield - or fill with pattern
   6811  42ef					      ifconst	pfres
   6812  42ef		       a2 0f		      ldx	#pfres*pfwidth-1
   6813  42f1				  -	      else
   6814  42f1				  -	      ldx	#47-(4-pfwidth)*12	; will this work?
   6815  42f1					      endif
   6816  42f1				   pfclear_loop
   6817  42f1				  -	      ifnconst	superchip
   6818  42f1				  -	      sta	playfield,x
   6819  42f1					      else
   6820  42f1		       9d 70 10 	      sta	playfield-128,x
   6821  42f4					      endif
   6822  42f4		       ca		      dex
   6823  42f5		       10 fa		      bpl	pfclear_loop
      0  42f7					      RETURN
      1  42f7				  -	      ifnconst	bankswitch
      2  42f7				  -	      rts
      3  42f7					      else
      4  42f7		       4c da ff 	      jmp	BS_return
      5  42fa					      endif
   6825  42fa
   6826  42fa				   setuppointers
   6827  42fa		       86 9d		      stx	temp2	; store on.off.flip value
   6828  42fc		       aa		      tax		; put x-value in x 
   6829  42fd		       4a		      lsr
   6830  42fe		       4a		      lsr
   6831  42ff		       4a		      lsr		; divide x pos by 8 
   6832  4300		       85 9c		      sta	temp1
   6833  4302		       98		      tya
   6834  4303		       0a		      asl
   6835  4304					      if	pfwidth=4
   6836  4304		       0a		      asl		; multiply y pos by 4
   6837  4305					      endif		; else multiply by 2
   6838  4305		       18		      clc
   6839  4306		       65 9c		      adc	temp1	; add them together to get actual memory location offset
   6840  4308		       a8		      tay		; put the value in y
   6841  4309		       a5 9d		      lda	temp2	; restore on.off.flip value
   6842  430b		       60		      rts
   6843  430c
   6844  430c				   pfread
   6845  430c							;x=xvalue, y=yvalue
   6846  430c		       20 fa f2 	      jsr	setuppointers
   6847  430f		       bd a4 f3 	      lda	setbyte,x
   6848  4312		       39 f0 10 	      and	playfield,y
   6849  4315		       5d a4 f3 	      eor	setbyte,x
   6850  4318							; beq readzero
   6851  4318							; lda #1
   6852  4318							; readzero
      0  4318					      RETURN
      1  4318				  -	      ifnconst	bankswitch
      2  4318				  -	      rts
      3  4318					      else
      4  4318		       4c da ff 	      jmp	BS_return
      5  431b					      endif
   6854  431b
   6855  431b				   pfpixel
   6856  431b							;x=xvalue, y=yvalue, a=0,1,2
   6857  431b		       20 fa f2 	      jsr	setuppointers
   6858  431e
   6859  431e					      ifconst	bankswitch
   6860  431e		       a5 9d		      lda	temp2	; load on.off.flip value (0,1, or 2)
   6861  4320		       f0 0f		      beq	pixelon_r	; if "on" go to on
   6862  4322		       4a		      lsr
   6863  4323		       b0 18		      bcs	pixeloff_r	; value is 1 if true
   6864  4325		       b9 f0 10 	      lda	playfield,y	; if here, it's "flip"
   6865  4328		       5d a4 f3 	      eor	setbyte,x
   6866  432b					      ifconst	superchip
   6867  432b		       99 70 10 	      sta	playfield-128,y
   6868  432e				  -	      else
   6869  432e				  -	      sta	playfield,y
   6870  432e					      endif
      0  432e					      RETURN
      1  432e				  -	      ifnconst	bankswitch
      2  432e				  -	      rts
      3  432e					      else
      4  432e		       4c da ff 	      jmp	BS_return
      5  4331					      endif
   6872  4331				   pixelon_r
   6873  4331		       b9 f0 10 	      lda	playfield,y
   6874  4334		       1d a4 f3 	      ora	setbyte,x
   6875  4337					      ifconst	superchip
   6876  4337		       99 70 10 	      sta	playfield-128,y
   6877  433a				  -	      else
   6878  433a				  -	      sta	playfield,y
   6879  433a					      endif
      0  433a					      RETURN
      1  433a				  -	      ifnconst	bankswitch
      2  433a				  -	      rts
      3  433a					      else
      4  433a		       4c da ff 	      jmp	BS_return
      5  433d					      endif
   6881  433d				   pixeloff_r
   6882  433d		       bd a4 f3 	      lda	setbyte,x
   6883  4340		       49 ff		      eor	#$ff
   6884  4342		       39 f0 10 	      and	playfield,y
   6885  4345					      ifconst	superchip
   6886  4345		       99 70 10 	      sta	playfield-128,y
   6887  4348				  -	      else
   6888  4348				  -	      sta	playfield,y
   6889  4348					      endif
      0  4348					      RETURN
      1  4348				  -	      ifnconst	bankswitch
      2  4348				  -	      rts
      3  4348					      else
      4  4348		       4c da ff 	      jmp	BS_return
      5  434b					      endif
   6891  434b
   6892  434b				  -	      else
   6893  434b				  -	      jmp	plotpoint
   6894  434b					      endif
   6895  434b
   6896  434b				   pfhline
   6897  434b							;x=xvalue, y=yvalue, a=0,1,2, temp3=endx
   6898  434b		       20 fa f2 	      jsr	setuppointers
   6899  434e		       4c 58 f3 	      jmp	noinc
   6900  4351				   keepgoing
   6901  4351		       e8		      inx
   6902  4352		       8a		      txa
   6903  4353		       29 07		      and	#7
   6904  4355		       d0 01		      bne	noinc
   6905  4357		       c8		      iny
   6906  4358				   noinc
   6907  4358		       20 7d f3 	      jsr	plotpoint
   6908  435b		       e4 9e		      cpx	temp3
   6909  435d		       30 f2		      bmi	keepgoing
      0  435f					      RETURN
      1  435f				  -	      ifnconst	bankswitch
      2  435f				  -	      rts
      3  435f					      else
      4  435f		       4c da ff 	      jmp	BS_return
      5  4362					      endif
   6911  4362
   6912  4362				   pfvline
   6913  4362							;x=xvalue, y=yvalue, a=0,1,2, temp3=endx
   6914  4362		       20 fa f2 	      jsr	setuppointers
   6915  4365		       84 9c		      sty	temp1	; store memory location offset
   6916  4367		       e6 9e		      inc	temp3	; increase final x by 1 
   6917  4369		       a5 9e		      lda	temp3
   6918  436b		       0a		      asl
   6919  436c					      if	pfwidth=4
   6920  436c		       0a		      asl		; multiply by 4
   6921  436d					      endif		; else multiply by 2
   6922  436d		       85 9e		      sta	temp3	; store it
   6923  436f							; Thanks to Michael Rideout for fixing a bug in this code
   6924  436f							; right now, temp1=y=starting memory location, temp3=final
   6925  436f							; x should equal original x value
   6926  436f				   keepgoingy
   6927  436f		       20 7d f3 	      jsr	plotpoint
   6928  4372		       c8		      iny
   6929  4373		       c8		      iny
   6930  4374					      if	pfwidth=4
   6931  4374		       c8		      iny
   6932  4375		       c8		      iny
   6933  4376					      endif
   6934  4376		       c4 9e		      cpy	temp3
   6935  4378		       30 f5		      bmi	keepgoingy
      0  437a					      RETURN
      1  437a				  -	      ifnconst	bankswitch
      2  437a				  -	      rts
      3  437a					      else
      4  437a		       4c da ff 	      jmp	BS_return
      5  437d					      endif
   6937  437d
   6938  437d				   plotpoint
   6939  437d		       a5 9d		      lda	temp2	; load on.off.flip value (0,1, or 2)
   6940  437f		       f0 0d		      beq	pixelon	; if "on" go to on
   6941  4381		       4a		      lsr
   6942  4382		       b0 14		      bcs	pixeloff	; value is 1 if true
   6943  4384		       b9 f0 10 	      lda	playfield,y	; if here, it's "flip"
   6944  4387		       5d a4 f3 	      eor	setbyte,x
   6945  438a					      ifconst	superchip
   6946  438a		       99 70 10 	      sta	playfield-128,y
   6947  438d				  -	      else
   6948  438d				  -	      sta	playfield,y
   6949  438d					      endif
   6950  438d		       60		      rts
   6951  438e				   pixelon
   6952  438e		       b9 f0 10 	      lda	playfield,y
   6953  4391		       1d a4 f3 	      ora	setbyte,x
   6954  4394					      ifconst	superchip
   6955  4394		       99 70 10 	      sta	playfield-128,y
   6956  4397				  -	      else
   6957  4397				  -	      sta	playfield,y
   6958  4397					      endif
   6959  4397		       60		      rts
   6960  4398				   pixeloff
   6961  4398		       bd a4 f3 	      lda	setbyte,x
   6962  439b		       49 ff		      eor	#$ff
   6963  439d		       39 f0 10 	      and	playfield,y
   6964  43a0					      ifconst	superchip
   6965  43a0		       99 70 10 	      sta	playfield-128,y
   6966  43a3				  -	      else
   6967  43a3				  -	      sta	playfield,y
   6968  43a3					      endif
   6969  43a3		       60		      rts
   6970  43a4
   6971  43a4				   setbyte
   6972  43a4					      ifnconst	pfcenter
   6973  43a4		       80		      .byte.b	$80
   6974  43a5		       40		      .byte.b	$40
   6975  43a6		       20		      .byte.b	$20
   6976  43a7		       10		      .byte.b	$10
   6977  43a8		       08		      .byte.b	$08
   6978  43a9		       04		      .byte.b	$04
   6979  43aa		       02		      .byte.b	$02
   6980  43ab		       01		      .byte.b	$01
   6981  43ac					      endif
   6982  43ac		       01		      .byte.b	$01
   6983  43ad		       02		      .byte.b	$02
   6984  43ae		       04		      .byte.b	$04
   6985  43af		       08		      .byte.b	$08
   6986  43b0		       10		      .byte.b	$10
   6987  43b1		       20		      .byte.b	$20
   6988  43b2		       40		      .byte.b	$40
   6989  43b3		       80		      .byte.b	$80
   6990  43b4		       80		      .byte.b	$80
   6991  43b5		       40		      .byte.b	$40
   6992  43b6		       20		      .byte.b	$20
   6993  43b7		       10		      .byte.b	$10
   6994  43b8		       08		      .byte.b	$08
   6995  43b9		       04		      .byte.b	$04
   6996  43ba		       02		      .byte.b	$02
   6997  43bb		       01		      .byte.b	$01
   6998  43bc		       01		      .byte.b	$01
   6999  43bd		       02		      .byte.b	$02
   7000  43be		       04		      .byte.b	$04
   7001  43bf		       08		      .byte.b	$08
   7002  43c0		       10		      .byte.b	$10
   7003  43c1		       20		      .byte.b	$20
   7004  43c2		       40		      .byte.b	$40
   7005  43c3		       80		      .byte.b	$80
   7006  43c4							; Provided under the CC0 license. See the included LICENSE.txt for details.
   7007  43c4
   7008  43c4				   pfscroll		;(a=0 left, 1 right, 2 up, 4 down, 6=upup, 12=downdown)
   7009  43c4		       d0 2a		      bne	notleft
   7010  43c6							;left
   7011  43c6					      ifconst	pfres
   7012  43c6		       a2 10		      ldx	#pfres*4
   7013  43c8				  -	      else
   7014  43c8				  -	      ldx	#48
   7015  43c8					      endif
   7016  43c8				   leftloop
   7017  43c8		       bd ef 10 	      lda	playfield-1,x
   7018  43cb		       4a		      lsr
   7019  43cc
   7020  43cc					      ifconst	superchip
   7021  43cc		       bd ee 10 	      lda	playfield-2,x
   7022  43cf		       2a		      rol
   7023  43d0		       9d 6e 10 	      sta	playfield-130,x
   7024  43d3		       bd ed 10 	      lda	playfield-3,x
   7025  43d6		       6a		      ror
   7026  43d7		       9d 6d 10 	      sta	playfield-131,x
   7027  43da		       bd ec 10 	      lda	playfield-4,x
   7028  43dd		       2a		      rol
   7029  43de		       9d 6c 10 	      sta	playfield-132,x
   7030  43e1		       bd ef 10 	      lda	playfield-1,x
   7031  43e4		       6a		      ror
   7032  43e5		       9d 6f 10 	      sta	playfield-129,x
   7033  43e8				  -	      else
   7034  43e8				  -	      rol	playfield-2,x
   7035  43e8				  -	      ror	playfield-3,x
   7036  43e8				  -	      rol	playfield-4,x
   7037  43e8				  -	      ror	playfield-1,x
   7038  43e8					      endif
   7039  43e8
   7040  43e8		       8a		      txa
   7041  43e9		       cb 04		      sbx	#4
   7042  43eb		       d0 db		      bne	leftloop
      0  43ed					      RETURN
      1  43ed				  -	      ifnconst	bankswitch
      2  43ed				  -	      rts
      3  43ed					      else
      4  43ed		       4c da ff 	      jmp	BS_return
      5  43f0					      endif
   7044  43f0
   7045  43f0				   notleft
   7046  43f0		       4a		      lsr
   7047  43f1		       90 2a		      bcc	notright
   7048  43f3							;right
   7049  43f3
   7050  43f3					      ifconst	pfres
   7051  43f3		       a2 10		      ldx	#pfres*4
   7052  43f5				  -	      else
   7053  43f5				  -	      ldx	#48
   7054  43f5					      endif
   7055  43f5				   rightloop
   7056  43f5		       bd ec 10 	      lda	playfield-4,x
   7057  43f8		       4a		      lsr
   7058  43f9					      ifconst	superchip
   7059  43f9		       bd ed 10 	      lda	playfield-3,x
   7060  43fc		       2a		      rol
   7061  43fd		       9d 6d 10 	      sta	playfield-131,x
   7062  4400		       bd ee 10 	      lda	playfield-2,x
   7063  4403		       6a		      ror
   7064  4404		       9d 6e 10 	      sta	playfield-130,x
   7065  4407		       bd ef 10 	      lda	playfield-1,x
   7066  440a		       2a		      rol
   7067  440b		       9d 6f 10 	      sta	playfield-129,x
   7068  440e		       bd ec 10 	      lda	playfield-4,x
   7069  4411		       6a		      ror
   7070  4412		       9d 6c 10 	      sta	playfield-132,x
   7071  4415				  -	      else
   7072  4415				  -	      rol	playfield-3,x
   7073  4415				  -	      ror	playfield-2,x
   7074  4415				  -	      rol	playfield-1,x
   7075  4415				  -	      ror	playfield-4,x
   7076  4415					      endif
   7077  4415		       8a		      txa
   7078  4416		       cb 04		      sbx	#4
   7079  4418		       d0 db		      bne	rightloop
      0  441a					      RETURN
      1  441a				  -	      ifnconst	bankswitch
      2  441a				  -	      rts
      3  441a					      else
      4  441a		       4c da ff 	      jmp	BS_return
      5  441d					      endif
   7081  441d
   7082  441d				   notright
   7083  441d		       4a		      lsr
   7084  441e		       90 5b		      bcc	notup
   7085  4420							;up
   7086  4420		       4a		      lsr
   7087  4421		       90 02		      bcc	onedecup
   7088  4423		       c6 ef		      dec	playfieldpos
   7089  4425				   onedecup
   7090  4425		       c6 ef		      dec	playfieldpos
   7091  4427		       f0 02		      beq	shiftdown
   7092  4429		       10 4d		      bpl	noshiftdown2
   7093  442b				   shiftdown
   7094  442b				  -	      ifconst	pfrowheight
   7095  442b				  -	      lda	#pfrowheight
   7096  442b					      else
   7097  442b				  -	      ifnconst	pfres
   7098  442b				  -	      lda	#8
   7099  442b					      else
   7100  442b		       a9 18		      lda	#(96/pfres)	; try to come close to the real size
   7101  442d					      endif
   7102  442d					      endif
   7103  442d
   7104  442d		       85 ef		      sta	playfieldpos
   7105  442f		       ad f3 10 	      lda	playfield+3
   7106  4432		       85 9f		      sta	temp4
   7107  4434		       ad f2 10 	      lda	playfield+2
   7108  4437		       85 9e		      sta	temp3
   7109  4439		       ad f1 10 	      lda	playfield+1
   7110  443c		       85 9d		      sta	temp2
   7111  443e		       ad f0 10 	      lda	playfield
   7112  4441		       85 9c		      sta	temp1
   7113  4443		       a2 00		      ldx	#0
   7114  4445				   up2
   7115  4445		       bd f4 10 	      lda	playfield+4,x
   7116  4448					      ifconst	superchip
   7117  4448		       9d 70 10 	      sta	playfield-128,x
   7118  444b		       bd f5 10 	      lda	playfield+5,x
   7119  444e		       9d 71 10 	      sta	playfield-127,x
   7120  4451		       bd f6 10 	      lda	playfield+6,x
   7121  4454		       9d 72 10 	      sta	playfield-126,x
   7122  4457		       bd f7 10 	      lda	playfield+7,x
   7123  445a		       9d 73 10 	      sta	playfield-125,x
   7124  445d				  -	      else
   7125  445d				  -	      sta	playfield,x
   7126  445d				  -	      lda	playfield+5,x
   7127  445d				  -	      sta	playfield+1,x
   7128  445d				  -	      lda	playfield+6,x
   7129  445d				  -	      sta	playfield+2,x
   7130  445d				  -	      lda	playfield+7,x
   7131  445d				  -	      sta	playfield+3,x
   7132  445d					      endif
   7133  445d		       8a		      txa
   7134  445e		       cb fc		      sbx	#252
   7135  4460					      ifconst	pfres
   7136  4460		       e0 0c		      cpx	#(pfres-1)*4
   7137  4462				  -	      else
   7138  4462				  -	      cpx	#44
   7139  4462					      endif
   7140  4462		       d0 e1		      bne	up2
   7141  4464
   7142  4464		       a5 9f		      lda	temp4
   7143  4466
   7144  4466					      ifconst	superchip
   7145  4466					      ifconst	pfres
   7146  4466		       8d 7f 10 	      sta	playfield+pfres*4-129
   7147  4469		       a5 9e		      lda	temp3
   7148  446b		       8d 7e 10 	      sta	playfield+pfres*4-130
   7149  446e		       a5 9d		      lda	temp2
   7150  4470		       8d 7d 10 	      sta	playfield+pfres*4-131
   7151  4473		       a5 9c		      lda	temp1
   7152  4475		       8d 7c 10 	      sta	playfield+pfres*4-132
   7153  4478				  -	      else
   7154  4478				  -	      sta	playfield+47-128
   7155  4478				  -	      lda	temp3
   7156  4478				  -	      sta	playfield+46-128
   7157  4478				  -	      lda	temp2
   7158  4478				  -	      sta	playfield+45-128
   7159  4478				  -	      lda	temp1
   7160  4478				  -	      sta	playfield+44-128
   7161  4478					      endif
   7162  4478				  -	      else
   7163  4478				  -	      ifconst	pfres
   7164  4478				  -	      sta	playfield+pfres*4-1
   7165  4478				  -	      lda	temp3
   7166  4478				  -	      sta	playfield+pfres*4-2
   7167  4478				  -	      lda	temp2
   7168  4478				  -	      sta	playfield+pfres*4-3
   7169  4478				  -	      lda	temp1
   7170  4478				  -	      sta	playfield+pfres*4-4
   7171  4478				  -	      else
   7172  4478				  -	      sta	playfield+47
   7173  4478				  -	      lda	temp3
   7174  4478				  -	      sta	playfield+46
   7175  4478				  -	      lda	temp2
   7176  4478				  -	      sta	playfield+45
   7177  4478				  -	      lda	temp1
   7178  4478				  -	      sta	playfield+44
   7179  4478				  -	      endif
   7180  4478					      endif
   7181  4478				   noshiftdown2
      0  4478					      RETURN
      1  4478				  -	      ifnconst	bankswitch
      2  4478				  -	      rts
      3  4478					      else
      4  4478		       4c da ff 	      jmp	BS_return
      5  447b					      endif
   7183  447b
   7184  447b
   7185  447b				   notup
   7186  447b							;down
   7187  447b		       4a		      lsr
   7188  447c		       b0 02		      bcs	oneincup
   7189  447e		       e6 ef		      inc	playfieldpos
   7190  4480				   oneincup
   7191  4480		       e6 ef		      inc	playfieldpos
   7192  4482		       a5 ef		      lda	playfieldpos
   7193  4484
   7194  4484				  -	      ifconst	pfrowheight
   7195  4484				  -	      cmp	#pfrowheight+1
   7196  4484					      else
   7197  4484				  -	      ifnconst	pfres
   7198  4484				  -	      cmp	#9
   7199  4484					      else
   7200  4484		       c9 19		      cmp	#(96/pfres)+1	; try to come close to the real size
   7201  4486					      endif
   7202  4486					      endif
   7203  4486
   7204  4486		       90 4b		      bcc	noshiftdown
   7205  4488		       a9 01		      lda	#1
   7206  448a		       85 ef		      sta	playfieldpos
   7207  448c
   7208  448c					      ifconst	pfres
   7209  448c		       ad ff 10 	      lda	playfield+pfres*4-1
   7210  448f		       85 9f		      sta	temp4
   7211  4491		       ad fe 10 	      lda	playfield+pfres*4-2
   7212  4494		       85 9e		      sta	temp3
   7213  4496		       ad fd 10 	      lda	playfield+pfres*4-3
   7214  4499		       85 9d		      sta	temp2
   7215  449b		       ad fc 10 	      lda	playfield+pfres*4-4
   7216  449e				  -	      else
   7217  449e				  -	      lda	playfield+47
   7218  449e				  -	      sta	temp4
   7219  449e				  -	      lda	playfield+46
   7220  449e				  -	      sta	temp3
   7221  449e				  -	      lda	playfield+45
   7222  449e				  -	      sta	temp2
   7223  449e				  -	      lda	playfield+44
   7224  449e					      endif
   7225  449e
   7226  449e		       85 9c		      sta	temp1
   7227  44a0
   7228  44a0					      ifconst	pfres
   7229  44a0		       a2 0c		      ldx	#(pfres-1)*4
   7230  44a2				  -	      else
   7231  44a2				  -	      ldx	#44
   7232  44a2					      endif
   7233  44a2				   down2
   7234  44a2		       bd ef 10 	      lda	playfield-1,x
   7235  44a5					      ifconst	superchip
   7236  44a5		       9d 73 10 	      sta	playfield-125,x
   7237  44a8		       bd ee 10 	      lda	playfield-2,x
   7238  44ab		       9d 72 10 	      sta	playfield-126,x
   7239  44ae		       bd ed 10 	      lda	playfield-3,x
   7240  44b1		       9d 71 10 	      sta	playfield-127,x
   7241  44b4		       bd ec 10 	      lda	playfield-4,x
   7242  44b7		       9d 70 10 	      sta	playfield-128,x
   7243  44ba				  -	      else
   7244  44ba				  -	      sta	playfield+3,x
   7245  44ba				  -	      lda	playfield-2,x
   7246  44ba				  -	      sta	playfield+2,x
   7247  44ba				  -	      lda	playfield-3,x
   7248  44ba				  -	      sta	playfield+1,x
   7249  44ba				  -	      lda	playfield-4,x
   7250  44ba				  -	      sta	playfield,x
   7251  44ba					      endif
   7252  44ba		       8a		      txa
   7253  44bb		       cb 04		      sbx	#4
   7254  44bd		       d0 e3		      bne	down2
   7255  44bf
   7256  44bf		       a5 9f		      lda	temp4
   7257  44c1					      ifconst	superchip
   7258  44c1		       8d 73 10 	      sta	playfield-125
   7259  44c4		       a5 9e		      lda	temp3
   7260  44c6		       8d 72 10 	      sta	playfield-126
   7261  44c9		       a5 9d		      lda	temp2
   7262  44cb		       8d 71 10 	      sta	playfield-127
   7263  44ce		       a5 9c		      lda	temp1
   7264  44d0		       8d 70 10 	      sta	playfield-128
   7265  44d3				  -	      else
   7266  44d3				  -	      sta	playfield+3
   7267  44d3				  -	      lda	temp3
   7268  44d3				  -	      sta	playfield+2
   7269  44d3				  -	      lda	temp2
   7270  44d3				  -	      sta	playfield+1
   7271  44d3				  -	      lda	temp1
   7272  44d3				  -	      sta	playfield
   7273  44d3					      endif
   7274  44d3				   noshiftdown
      0  44d3					      RETURN
      1  44d3				  -	      ifnconst	bankswitch
      2  44d3				  -	      rts
      3  44d3					      else
      4  44d3		       4c da ff 	      jmp	BS_return
      5  44d6					      endif
   7276  44d6							; Provided under the CC0 license. See the included LICENSE.txt for details.
   7277  44d6
   7278  44d6							;standard routines needed for pretty much all games
   7279  44d6							; just the random number generator is left - maybe we should remove this asm file altogether?
   7280  44d6							; repositioning code and score pointer setup moved to overscan
   7281  44d6							; read switches, joysticks now compiler generated (more efficient)
   7282  44d6
   7283  44d6				   randomize
   7284  44d6		       a5 a2		      lda	rand
   7285  44d8		       4a		      lsr
   7286  44d9					      ifconst	rand16
   7287  44d9		       26 ed		      rol	rand16
   7288  44db					      endif
   7289  44db		       90 02		      bcc	noeor
   7290  44dd		       49 b4		      eor	#$B4
   7291  44df				   noeor
   7292  44df		       85 a2		      sta	rand
   7293  44e1					      ifconst	rand16
   7294  44e1		       45 ed		      eor	rand16
   7295  44e3					      endif
      0  44e3					      RETURN
      1  44e3				  -	      ifnconst	bankswitch
      2  44e3				  -	      rts
      3  44e3					      else
      4  44e3		       4c da ff 	      jmp	BS_return
      5  44e6					      endif
   7297  44e6							; Provided under the CC0 license. See the included LICENSE.txt for details.
   7298  44e6
   7299  44e6				   drawscreen
   7300  44e6				  -	      ifconst	debugscore
   7301  44e6				  -	      ldx	#14
   7302  44e6				  -	      lda	INTIM	; display # cycles left in the score
   7303  44e6				  -
   7304  44e6				  -	      ifconst	mincycles
   7305  44e6				  -	      lda	mincycles
   7306  44e6				  -	      cmp	INTIM
   7307  44e6				  -	      lda	mincycles
   7308  44e6				  -	      bcc	nochange
   7309  44e6				  -	      lda	INTIM
   7310  44e6				  -	      sta	mincycles
   7311  44e6				  -nochange
   7312  44e6				  -	      endif
   7313  44e6				  -
   7314  44e6				  -			; cmp #$2B
   7315  44e6				  -			; bcs no_cycles_left
   7316  44e6				  -	      bmi	cycles_left
   7317  44e6				  -	      ldx	#64
   7318  44e6				  -	      eor	#$ff	;make negative
   7319  44e6				  -cycles_left
   7320  44e6				  -	      stx	scorecolor
   7321  44e6				  -	      and	#$7f	; clear sign bit
   7322  44e6				  -	      tax
   7323  44e6				  -	      lda	scorebcd,x
   7324  44e6				  -	      sta	score+2
   7325  44e6				  -	      lda	scorebcd1,x
   7326  44e6				  -	      sta	score+1
   7327  44e6				  -	      jmp	done_debugscore
   7328  44e6				  -scorebcd
   7329  44e6				  -	      .byte	$00, $64, $28, $92, $56, $20, $84, $48, $12, $76, $40
   7330  44e6				  -	      .byte	$04, $68, $32, $96, $60, $24, $88, $52, $16, $80, $44
   7331  44e6				  -	      .byte	$08, $72, $36, $00, $64, $28, $92, $56, $20, $84, $48
   7332  44e6				  -	      .byte	$12, $76, $40, $04, $68, $32, $96, $60, $24, $88
   7333  44e6				  -scorebcd1
   7334  44e6				  -	      .byte	0, 0, 1, 1, 2, 3, 3, 4, 5, 5, 6
   7335  44e6				  -	      .byte	7, 7, 8, 8, 9, $10, $10, $11, $12, $12, $13
   7336  44e6				  -	      .byte	$14, $14, $15, $16, $16, $17, $17, $18, $19, $19, $20
   7337  44e6				  -	      .byte	$21, $21, $22, $23, $23, $24, $24, $25, $26, $26
   7338  44e6				  -done_debugscore
   7339  44e6					      endif
   7340  44e6
   7341  44e6				  -	      ifconst	debugcycles
   7342  44e6				  -	      lda	INTIM	; if we go over, it mucks up the background color
   7343  44e6				  -			; cmp #$2B
   7344  44e6				  -			; BCC overscan
   7345  44e6				  -	      bmi	overscan
   7346  44e6				  -	      sta	COLUBK
   7347  44e6				  -	      bcs	doneoverscan
   7348  44e6					      endif
   7349  44e6
   7350  44e6				   overscan
   7351  44e6				  -	      ifconst	interlaced
   7352  44e6				  -	      PHP
   7353  44e6				  -	      PLA
   7354  44e6				  -	      EOR	#4	; flip interrupt bit
   7355  44e6				  -	      PHA
   7356  44e6				  -	      PLP
   7357  44e6				  -	      AND	#4	; isolate the interrupt bit
   7358  44e6				  -	      TAX		; save it for later
   7359  44e6					      endif
   7360  44e6
   7361  44e6				   overscanloop
   7362  44e6		       ad 84 02 	      lda	INTIM	;wait for sync
   7363  44e9		       30 fb		      bmi	overscanloop
   7364  44eb				   doneoverscan
   7365  44eb
   7366  44eb							;do VSYNC
   7367  44eb
   7368  44eb				  -	      ifconst	interlaced
   7369  44eb				  -	      CPX	#4
   7370  44eb				  -	      BNE	oddframevsync
   7371  44eb					      endif
   7372  44eb
   7373  44eb		       a9 02		      lda	#2
   7374  44ed		       85 02		      sta	WSYNC
   7375  44ef		       85 00		      sta	VSYNC
   7376  44f1		       85 02		      STA	WSYNC
   7377  44f3		       85 02		      STA	WSYNC
   7378  44f5		       4a		      lsr
   7379  44f6		       85 02		      STA	WSYNC
   7380  44f8		       85 00		      STA	VSYNC
   7381  44fa		       85 01		      sta	VBLANK
   7382  44fc					      ifnconst	overscan_time
   7383  44fc		       a9 a5		      lda	#37+128
   7384  44fe				  -	      else
   7385  44fe				  -	      lda	#overscan_time+128
   7386  44fe					      endif
   7387  44fe		       8d 96 02 	      sta	TIM64T
   7388  4501
   7389  4501				  -	      ifconst	interlaced
   7390  4501				  -	      jmp	postsync
   7391  4501				  -
   7392  4501				  -oddframevsync
   7393  4501				  -	      sta	WSYNC
   7394  4501				  -
   7395  4501				  -	      LDA	($80,X)	; 11 waste
   7396  4501				  -	      LDA	($80,X)	; 11 waste
   7397  4501				  -	      LDA	($80,X)	; 11 waste
   7398  4501				  -
   7399  4501				  -	      lda	#2
   7400  4501				  -	      sta	VSYNC
   7401  4501				  -	      sta	WSYNC
   7402  4501				  -	      sta	WSYNC
   7403  4501				  -	      sta	WSYNC
   7404  4501				  -
   7405  4501				  -	      LDA	($80,X)	; 11 waste
   7406  4501				  -	      LDA	($80,X)	; 11 waste
   7407  4501				  -	      LDA	($80,X)	; 11 waste
   7408  4501				  -
   7409  4501				  -	      lda	#0
   7410  4501				  -	      sta	VSYNC
   7411  4501				  -	      sta	VBLANK
   7412  4501				  -	      ifnconst	overscan_time
   7413  4501				  -	      lda	#37+128
   7414  4501				  -	      else
   7415  4501				  -	      lda	#overscan_time+128
   7416  4501				  -	      endif
   7417  4501				  -	      sta	TIM64T
   7418  4501				  -
   7419  4501				  -postsync
   7420  4501					      endif
   7421  4501
   7422  4501				  -	      ifconst	legacy
   7423  4501				  -	      if	legacy < 100
   7424  4501				  -	      ldx	#4
   7425  4501				  -adjustloop
   7426  4501				  -	      lda	player0x,x
   7427  4501				  -	      sec
   7428  4501				  -	      sbc	#14	;?
   7429  4501				  -	      sta	player0x,x
   7430  4501				  -	      dex
   7431  4501				  -	      bpl	adjustloop
   7432  4501				  -	      endif
   7433  4501					      endif
   7434  4501				  -	      if	((<*)>$e9)&&((<*)<$fa)
   7435  4501				  -	      repeat	($fa-(<*))
   7436  4501				  -	      nop
   7437  4501				  -	      repend
   7438  4501					      endif
   7439  4501		       85 02		      sta	WSYNC
   7440  4503		       a2 04		      ldx	#4
      0  4505					      SLEEP	3
      1  4505				   .CYCLES    SET	3
      2  4505
      3  4505				  -	      IF	.CYCLES < 2
      4  4505				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  4505				  -	      ERR
      6  4505					      ENDIF
      7  4505
      8  4505					      IF	.CYCLES & 1
      9  4505					      IFNCONST	NO_ILLEGAL_OPCODES
     10  4505		       04 00		      nop	0
     11  4507				  -	      ELSE
     12  4507				  -	      bit	VSYNC
     13  4507					      ENDIF
     14  4507				   .CYCLES    SET	.CYCLES - 3
     15  4507					      ENDIF
     16  4507
     17  4507				  -	      REPEAT	.CYCLES / 2
     18  4507				  -	      nop
     19  4507					      REPEND
   7442  4507				   HorPosLoop		; 5
   7443  4507		       b5 80		      lda	player0x,X	;+4 9
   7444  4509		       38		      sec		;+2 11
   7445  450a				   DivideLoop
   7446  450a		       e9 0f		      sbc	#15
   7447  450c		       b0 fc		      bcs	DivideLoop	;+4 15
   7448  450e		       95 9c		      sta	temp1,X	;+4 19
   7449  4510		       95 10		      sta	RESP0,X	;+4 23
   7450  4512		       85 02		      sta	WSYNC
   7451  4514		       ca		      dex
   7452  4515		       10 f0		      bpl	HorPosLoop	;+5 5
   7453  4517							; 4
   7454  4517
   7455  4517		       a2 04		      ldx	#4
   7456  4519		       b4 9c		      ldy	temp1,X
   7457  451b		       b9 77 f4 	      lda	repostable-256,Y
   7458  451e		       95 20		      sta	HMP0,X	;+14 18
   7459  4520
   7460  4520		       ca		      dex
   7461  4521		       b4 9c		      ldy	temp1,X
   7462  4523		       b9 77 f4 	      lda	repostable-256,Y
   7463  4526		       95 20		      sta	HMP0,X	;+14 32
   7464  4528
   7465  4528		       ca		      dex
   7466  4529		       b4 9c		      ldy	temp1,X
   7467  452b		       b9 77 f4 	      lda	repostable-256,Y
   7468  452e		       95 20		      sta	HMP0,X	;+14 46
   7469  4530
   7470  4530		       ca		      dex
   7471  4531		       b4 9c		      ldy	temp1,X
   7472  4533		       b9 77 f4 	      lda	repostable-256,Y
   7473  4536		       95 20		      sta	HMP0,X	;+14 60
   7474  4538
   7475  4538		       ca		      dex
   7476  4539		       b4 9c		      ldy	temp1,X
   7477  453b		       b9 77 f4 	      lda	repostable-256,Y
   7478  453e		       95 20		      sta	HMP0,X	;+14 74
   7479  4540
   7480  4540		       85 02		      sta	WSYNC
   7481  4542
   7482  4542		       85 2a		      sta	HMOVE	;+3 3
   7483  4544
   7484  4544
   7485  4544				  -	      ifconst	legacy
   7486  4544				  -	      if	legacy < 100
   7487  4544				  -	      ldx	#4
   7488  4544				  -adjustloop2
   7489  4544				  -	      lda	player0x,x
   7490  4544				  -	      clc
   7491  4544				  -	      adc	#14	;?
   7492  4544				  -	      sta	player0x,x
   7493  4544				  -	      dex
   7494  4544				  -	      bpl	adjustloop2
   7495  4544				  -	      endif
   7496  4544					      endif
   7497  4544
   7498  4544
   7499  4544
   7500  4544
   7501  4544							;set score pointers
   7502  4544		       a7 95		      lax	score+2
   7503  4546		       20 77 f5 	      jsr	scorepointerset
   7504  4549		       84 9b		      sty	scorepointers+5
   7505  454b		       86 98		      stx	scorepointers+2
   7506  454d		       a7 94		      lax	score+1
   7507  454f		       20 77 f5 	      jsr	scorepointerset
   7508  4552		       84 9a		      sty	scorepointers+4
   7509  4554		       86 97		      stx	scorepointers+1
   7510  4556		       a7 93		      lax	score
   7511  4558		       20 77 f5 	      jsr	scorepointerset
   7512  455b		       84 99		      sty	scorepointers+3
   7513  455d		       86 96		      stx	scorepointers
   7514  455f
   7515  455f				   vblk
   7516  455f							; run possible vblank bB code
   7517  455f				  -	      ifconst	vblank_bB_code
   7518  455f				  -	      jsr	vblank_bB_code
   7519  455f					      endif
   7520  455f				   vblk2
   7521  455f		       ad 84 02 	      LDA	INTIM
   7522  4562		       30 fb		      bmi	vblk2
   7523  4564		       4c 00 f1 	      jmp	kernel
   7524  4567
   7525  4567
   7526  4567		       80 70 60 50*	      .byte.b	$80,$70,$60,$50,$40,$30,$20,$10,$00
   7527  4570		       f0 e0 d0 c0*	      .byte.b	$F0,$E0,$D0,$C0,$B0,$A0,$90
   7528  4577				   repostable
   7529  4577
   7530  4577				   scorepointerset
   7531  4577		       29 0f		      and	#$0F
   7532  4579		       0a		      asl
   7533  457a		       0a		      asl
   7534  457b		       0a		      asl
   7535  457c		       69 71		      adc	#<scoretable
   7536  457e		       a8		      tay
   7537  457f		       8a		      txa
   7538  4580							; and #$F0
   7539  4580							; lsr
   7540  4580		       4b f0		      asr	#$F0
   7541  4582		       69 71		      adc	#<scoretable
   7542  4584		       aa		      tax
   7543  4585		       60		      rts
   7544  4586							;bB.asm
   7545  4586							; bB.asm file is split here
   7546  4586				   .
   7547  4586							; 
   7548  4586
   7549  4586				   .L0630		;  asm
   7550  4586
------- FILE text12/text12a.asm LEVEL 2 PASS 3
      0  4586					      include	"text12/text12a.asm"
      1  4586				  -	      ifconst	SpriteGfxIndex
      2  4586				  -TextDataPtr =	SpriteGfxIndex
      3  4586					      else
      4  4586		       00 f6	   TextDataPtr =	stack1
      5  4586					      endif
      6  4586		       00 f5	   TextColor  =	statusbarlength
      7  4586		       00 01	   noscore    =	1
      8  4586					      ifconst	fontstyle
      9  4586				  -	      ifconst	SQUISH
     10  4586				  -	      if	fontstyle == SQUISH
     11  4586				  -scorecount =	4
     12  4586				  -	      endif
     13  4586					      endif
     14  4586					      endif
     15  4586
     16  4586				  -	      ifnconst	scorecount
     17  4586				  -scorecount =	7
     18  4586					      endif
     19  4586
     20  4586				  -	      ifnconst	textbkcolor
     21  4586				  -textbkcolor =	0
     22  4586					      endif
     23  4586
     24  4586
     25  4586
     26  4586				   minikernel
     27  4586
     28  4586		       85 02		      sta	WSYNC	; 3	 (0)
     29  4588					      ifconst	scorebkcolor
     30  4588					      ifnconst	noscoretxt
     31  4588		       a9 08		      lda	#scorebkcolor
     32  458a		       85 09		      sta	COLUBK
     33  458c					      endif
     34  458c					      endif
     35  458c		       a2 00		      ldx	#0	; 2	 (2)
     36  458e		       86 1b		      stx	GRP0	; 3	 (5)
     37  4590		       86 1c		      stx	GRP1	; 3	 (8)
     38  4592		       a0 d0		      ldy	#$D0	; 2	 (10)
     39  4594		       84 20		      sty	HMP0	; 3	 (13)
     40  4596		       a5 97		      lda	scorepointers+1
     41  4598		       85 9c		      sta	temp1
     42  459a		       a5 99		      lda	scorepointers+3
     43  459c		       85 9e		      sta	temp3
     44  459e		       a5 9b		      lda	scorepointers+5
     45  45a0		       85 a0		      sta	temp5
     46  45a2		       ba		      tsx
     47  45a3		       86 ee		      stx	temp7
     48  45a5		       a0 01		      ldy	#1
     49  45a7		       84 25		      sty	VDELP0
     50  45a9		       84 26		      sty	VDELP1
     51  45ab		       a5 a3		      lda	scorecolor
     52  45ad
     53  45ad		       85 02		      sta	WSYNC	; 3	 (0)
     54  45af					      ifnconst	noscoretxt
      0  45af					      sleep	3	; 3	 (3)
      1  45af				   .CYCLES    SET	3
      2  45af
      3  45af				  -	      IF	.CYCLES < 2
      4  45af				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  45af				  -	      ERR
      6  45af					      ENDIF
      7  45af
      8  45af					      IF	.CYCLES & 1
      9  45af					      IFNCONST	NO_ILLEGAL_OPCODES
     10  45af		       04 00		      nop	0
     11  45b1				  -	      ELSE
     12  45b1				  -	      bit	VSYNC
     13  45b1					      ENDIF
     14  45b1				   .CYCLES    SET	.CYCLES - 3
     15  45b1					      ENDIF
     16  45b1
     17  45b1				  -	      REPEAT	.CYCLES / 2
     18  45b1				  -	      nop
     19  45b1					      REPEND
     56  45b1					      endif
     57  45b1		       85 06		      sta	COLUP0	; 3	 (6)
     58  45b3		       85 07		      sta	COLUP1	; 3	 (9)
     59  45b5				  -	      ifconst	scorefade
     60  45b5				  -	      STA	stack2	; 3	 (12)
     61  45b5				  -	      sleep	3	; 3	 (15)
     62  45b5					      else
     63  45b5					      ifconst	pfscore
     64  45b5		       a5 f4		      lda	pfscorecolor	; 3	 (12)
     65  45b7		       85 08		      sta	COLUPF	; 3	 (15)
     66  45b9				  -	      else
     67  45b9				  -	      sleep	6
     68  45b9					      endif
     69  45b9					      endif
     70  45b9		       a9 03		      lda	#3	; 2	 (17)
     71  45bb		       85 04		      sta	NUSIZ0	; 3	 (20)
     72  45bd		       85 05		      sta	NUSIZ1	; 3	 (23*)
     73  45bf
     74  45bf		       a9 ff		      lda	#>scoretable	; 2	 (25)
     75  45c1		       85 97		      sta	scorepointers+1	; 3	 (28)
     76  45c3		       85 99		      sta	scorepointers+3	; 3	 (31)
     77  45c5		       85 9b		      sta	scorepointers+5	; 3	 (34)
     78  45c7		       85 9d		      sta	temp2	; 3	 (37)
     79  45c9		       85 9f		      sta	temp4	; 3	 (40)
     80  45cb		       85 10		      sta	RESP0	; 3	 (43)
     81  45cd		       85 11		      sta	RESP1	; 3	 (46)
     82  45cf		       85 a1		      sta	temp6	; 3	 (49)
     83  45d1		       a0 e0		      ldy	#$E0	; 2	 (51)
     84  45d3		       84 21		      sty	HMP1	; 3	 (54)
     85  45d5		       a0 07		      ldy	#scorecount	; 2	 (56)
     86  45d7		       b1 96		      lda	(scorepointers),y	; 5	 (61)
     87  45d9		       85 1b		      sta	GRP0	; 3	 (64)
     88  45db					      ifconst	pfscore
     89  45db		       a5 f2		      lda	pfscore1	; 3	 (67)
     90  45dd		       85 0e		      sta	PF1	; 3	 (70)
     91  45df				  -	      else
     92  45df				  -	      sleep	6	; 6	 (70)
     93  45df					      endif
     94  45df		       85 2a		      sta	HMOVE	; 3	 (73)
     95  45e1				   posthmove
     96  45e1					      ifnconst	noscoretxt
     97  45e1		       4c 09 f6 	      jmp	begintextscore	; 3	(76/0)
     98  45e4
     99  45e4
    100  45e4					      if	>. != >[.+score_loop_height]
    101  4600		       00 00 00 00*	      align	256
    102  4600					      endif
    103  4600
    104  4600				   textscoreloop
    105  4600		       b1 96		      lda	(scorepointers),y	; 5	 (66)
    106  4602		       85 1b		      sta	GRP0	; 3	 (69)
    107  4604					      ifconst	pfscore
    108  4604		       ad f2 00 	      lda.w	pfscore1	; 4	 (73)
    109  4607		       85 0e		      sta	PF1	; 3	 (76/0)
    110  4609				  -	      else
    111  4609				  -	      ifconst	scorefade
    112  4609				  -	      sleep	2	; 2	 (71)
    113  4609				  -	      dec	stack2	; 5	 (76/0)
    114  4609				  -	      else
    115  4609				  -	      sleep	7	; 7	 (76/0)
    116  4609				  -	      endif
    117  4609					      endif
    118  4609							; cycle 0
    119  4609				   begintextscore
    120  4609		       b1 9e		      lda	(scorepointers+$8),y	; 5	 (5)
    121  460b		       85 1c		      sta	GRP1	; 3	 (8)
    122  460d		       b1 9c		      lda	(scorepointers+$6),y	; 5	 (13)
    123  460f		       85 1b		      sta	GRP0	; 3	 (16)
    124  4611		       b3 98		      lax	(scorepointers+$2),y	; 5	 (21)
    125  4613		       9a		      txs		; 2	 (23*)
    126  4614		       b3 9a		      lax	(scorepointers+$4),y	; 5	 (28)
    127  4616				  -	      ifconst	scorefade
    128  4616				  -	      lda	stack2	; 3	 (31)
    129  4616					      else
      0  4616					      sleep	3	; 3	 (31)
      1  4616				   .CYCLES    SET	3
      2  4616
      3  4616				  -	      IF	.CYCLES < 2
      4  4616				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  4616				  -	      ERR
      6  4616					      ENDIF
      7  4616
      8  4616					      IF	.CYCLES & 1
      9  4616					      IFNCONST	NO_ILLEGAL_OPCODES
     10  4616		       04 00		      nop	0
     11  4618				  -	      ELSE
     12  4618				  -	      bit	VSYNC
     13  4618					      ENDIF
     14  4618				   .CYCLES    SET	.CYCLES - 3
     15  4618					      ENDIF
     16  4618
     17  4618				  -	      REPEAT	.CYCLES / 2
     18  4618				  -	      nop
     19  4618					      REPEND
    131  4618					      endif
    132  4618
    133  4618					      ifconst	pfscore
    134  4618		       a5 f3		      lda	pfscore2	; 3	 (34)
    135  461a		       85 0e		      sta	PF1	; 3	 (37)
    136  461c				  -	      else
    137  461c				  -	      ifconst	scorefade
    138  461c				  -	      sta	COLUP0	; 3	 (34)
    139  461c				  -	      sta	COLUP1	; 3	 (37)
    140  461c				  -	      else
    141  461c				  -	      sleep	6	; 6	 (37)
    142  461c				  -	      endif
    143  461c					      endif
    144  461c
    145  461c		       b1 a0		      lda	(scorepointers+$A),y	; 5	 (42)
    146  461e		       86 1c		      stx	GRP1	; 3	 (45)
    147  4620		       ba		      tsx		; 2	 (47)
    148  4621		       86 1b		      stx	GRP0	; 3	 (50)
    149  4623		       85 1c		      sta	GRP1	; 3	 (53)
    150  4625		       84 1b		      sty	GRP0	; 3	 (56)
    151  4627		       88		      dey		; 2	 (58)
    152  4628		       10 d6		      bpl	textscoreloop	; 3	 (61)
    153  462a					      endif
    154  462a
    155  462a		       00 2a	   score_loop_height =	* - textscoreloop
    156  462a
    157  462a		       a6 ee		      ldx	temp7	; 63
    158  462c		       9a		      txs		; 65
    159  462d		       a0 00		      ldy	#0	; 2	 (67)
    160  462f		       84 0e		      sty	PF1	; 3	 (70)
    161  4631		       84 1b		      sty	GRP0	; 3	 (73)
    162  4633		       84 1c		      sty	GRP1	; 3	 (76/0)
    163  4635		       84 1b		      sty	GRP0	; 3	 (3)
    164  4637		       a9 08		      lda	#textbkcolor
    165  4639		       85 09		      sta	COLUBK	; 3	 (6)
    166  463b
    167  463b				  -	      ifconst	extendedtxt
    168  463b				  -	      sty	stack2	; 3	 (9)
    169  463b				  -	      sty	temp7	; 3	 (12)
    170  463b				  -	      lax	TextIndex	; 3	 (15)
    171  463b				  -	      asl		; 2	 (17)
    172  463b				  -	      rol	stack2	; 5	 (22)
    173  463b				  -	      asl		; 2	 (24*)
    174  463b				  -	      rol	stack2	; 5	 (29)
    175  463b				  -	      asl		; 2	 (31)
    176  463b				  -	      rol	stack2	; 5	 (36)
    177  463b				  -	      sta	stack1	; 3	 (39)
    178  463b				  -	      txa		; 2	 (41)
    179  463b				  -	      asl		; 2	 (43)
    180  463b				  -	      rol	temp7	; 5	 (48)
    181  463b				  -	      asl		; 2	 (50)
    182  463b				  -	      rol	temp7	; 5	 (55)
    183  463b				  -	      clc		; 2	 (57)
    184  463b				  -	      adc	stack1	; 3	 (60)
    185  463b				  -	      sta	temp1	; 3	 (63)
    186  463b				  -	      lda	stack2	; 3	 (66)
    187  463b				  -	      adc	temp7	; 3	 (69) ; use existing carry from last operation
    188  463b					      endif
    189  463b
    190  463b				  -	      ifconst	extendedtxt
    191  463b				  -	      adc	#>text_strings	; carry already clear
    192  463b					      else
    193  463b		       a9 fb		      lda	#>text_strings
    194  463d					      endif
    195  463d		       85 f7		      sta	TextDataPtr+1
    196  463f		       a9 02		      lda	#<text_strings
    197  4641		       85 f6		      sta	TextDataPtr
    198  4643
    199  4643				  -	      ifconst	textbank
    200  4643				  -	      sta	temp7
    201  4643				  -	      lda	#>(textkernel-1)
    202  4643				  -	      pha
    203  4643				  -	      lda	#<(textkernel-1)
    204  4643				  -	      pha
    205  4643				  -	      lda	temp7
    206  4643				  -	      pha		; *** save A
    207  4643				  -	      txa
    208  4643				  -	      pha		; *** save X
    209  4643				  -	      ldx	#textbank
    210  4643				  -	      jmp	BS_jsr
    211  4643					      else
    212  4643		       4c 47 f6 	      jmp	textkernel
    213  4646					      endif
    214  4646
    215  4646				   posttextkernel
    216  4646
    217  4646		       60		      rts
------- FILE d:\Firmaplus\Firmaplus_intern\Atari\PlusROM\Projekte-batariBasic\CaveApocalypse\C.A.V.E. Apocalypse.bas.asm
   7552  4647
------- FILE text12/text12b.asm LEVEL 2 PASS 3
      0  4647					      include	"text12/text12b.asm"
      1  4647					      ifconst	bs_mask
      2  4647				  -	      ifconst	FASTFETCH	; using DPC+
      3  4647				  -KERNELBANK =	1
      4  4647					      else
      5  4647		       00 04	   KERNELBANK =	(bs_mask + 1)
      6  4647					      endif
      7  4647					      endif
      8  4647
      9  4647
     10  4647				   textkernel
     11  4647		       a5 f5		      lda	TextColor
     12  4649		       85 06		      sta	COLUP0
     13  464b		       85 07		      sta	COLUP1
     14  464d		       a9 0b		      lda	#11
     15  464f		       aa		      tax
     16  4650		       18		      clc
     17  4651				  -	      ifconst	extendedtxt
     18  4651				  -	      adc	temp1
     19  4651					      else
     20  4651		       65 b0		      adc	TextIndex
     21  4653					      endif
     22  4653		       a8		      tay
     23  4654				   TextPointersLoop
     24  4654		       b1 f6		      lda	(TextDataPtr),y
     25  4656		       95 96		      sta	scorepointers,x
     26  4658		       88		      dey
     27  4659		       ca		      dex
     28  465a		       10 f8		      bpl	TextPointersLoop
     29  465c
     30  465c		       a6 96		      ldx	scorepointers+0
     31  465e		       bd 00 f9 	      lda	left_text,x
     32  4661		       a6 97		      ldx	scorepointers+1
     33  4663		       1d 00 fa 	      ora	right_text,x
     34  4666		       a0 00		      ldy	#0
     35  4668
     36  4668				   firstbreak
     37  4668							; Text line 1 / 5
     38  4668
     39  4668							;line 1
     40  4668		       85 02		      sta	WSYNC	; 3	 (0)
     41  466a		       a0 08		      ldy	#textbkcolor	; 2	 (2)
     42  466c		       84 06		      sty	COLUP0	; 3	 (5)
     43  466e		       84 07		      sty	COLUP1	; 3	 (8)
     44  4670		       85 1b		      sta	GRP0	; 3	 (11)
     45  4672
     46  4672		       a6 98		      ldx	scorepointers+2	; 3	 (14)
     47  4674		       bd 00 f9 	      lda	left_text,x	; 4	 (18)
     48  4677		       a6 99		      ldx	scorepointers+3	; 3	 (21)
     49  4679		       1d 00 fa 	      ora	right_text,x	; 4	 (25*)
     50  467c		       85 1c		      sta	GRP1	; 3	 (28)
     51  467e
     52  467e		       a6 9a		      ldx	scorepointers+4	; 3	 (31)
     53  4680		       bd 00 f9 	      lda	left_text,x	; 4	 (35)
     54  4683		       a6 9b		      ldx	scorepointers+5	; 3	 (38)
     55  4685		       1d 00 fa 	      ora	right_text,x	; 4	 (42)
     56  4688		       85 1b		      sta	GRP0	; 3	 (45)
     57  468a
     58  468a		       a6 9c		      ldx	scorepointers+6	; 3	 (48) 3 in A
     59  468c		       bd 00 f9 	      lda	left_text,x	; 4	 (52)
     60  468f		       a6 9d		      ldx	scorepointers+7	; 3	 (55)
     61  4691		       1d 00 fa 	      ora	right_text,x	; 4	 (59)
     62  4694
     63  4694		       a4 f5		      ldy	TextColor	; 3	 (62)
     64  4696		       84 07		      sty	COLUP1	; 3	 (65)
     65  4698
     66  4698							;line 2
     67  4698		       85 02		      sta	WSYNC	; 3	 (0)
     68  469a		       84 06		      sty	COLUP0	; 3	 (3)
     69  469c		       a8		      tay		; 2	 (5) 3 in Y
     70  469d
     71  469d		       a6 9e		      ldx	scorepointers+8	; 3	 (8) 4
     72  469f		       bd 00 f9 	      lda	left_text,x	; 4	 (12)
     73  46a2		       a6 9f		      ldx	scorepointers+9	; 3	 (15)
     74  46a4		       1d 00 fa 	      ora	right_text,x	; 4	 (19)
     75  46a7		       85 f6		      sta	stack1	; 3	 (22)
     76  46a9
     77  46a9		       a6 a0		      ldx	scorepointers+10	; 3	 (25*) 5 in A
     78  46ab		       bd 00 f9 	      lda	left_text,x	; 4	 (29)
     79  46ae		       a6 a1		      ldx	scorepointers+11	; 3	 (32)
     80  46b0		       1d 00 fa 	      ora	right_text,x	; 4	 (36)
     81  46b3
     82  46b3		       a6 f6		      ldx	stack1	; 3	 (39) 4 in X
     83  46b5					      ifnconst	noscoretxt
      0  46b5					      sleep	5	; 7	 (46)
      1  46b5				   .CYCLES    SET	5
      2  46b5
      3  46b5				  -	      IF	.CYCLES < 2
      4  46b5				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  46b5				  -	      ERR
      6  46b5					      ENDIF
      7  46b5
      8  46b5					      IF	.CYCLES & 1
      9  46b5					      IFNCONST	NO_ILLEGAL_OPCODES
     10  46b5		       04 00		      nop	0
     11  46b7				  -	      ELSE
     12  46b7				  -	      bit	VSYNC
     13  46b7					      ENDIF
     14  46b7				   .CYCLES    SET	.CYCLES - 3
     15  46b7					      ENDIF
     16  46b7
     17  46b7					      REPEAT	.CYCLES / 2
     18  46b7		       ea		      nop
     19  46b8					      REPEND
     85  46b8				  -	      else
     86  46b8				  -	      sleep	2
     87  46b8					      endif
     88  46b8		       84 1c		      sty	GRP1	; 3	 (49) 3 -> [GRP1] ; 2 -> GRP0
     89  46ba		       86 1b		      stx	GRP0	; 3	 (52) 4 -> [GRP0] ; 3 -> GRP1
     90  46bc		       85 1c		      sta	GRP1	; 3	 (55) 5 -> [GRP1] ; 4 -> GRP0
     91  46be		       85 1b		      sta	GRP0	; 3	 (58) 5 -> GRP1
     92  46c0
     93  46c0		       a0 02		      ldy	#2	; 2	 (60)
     94  46c2		       a6 96		      ldx	scorepointers+0	; 3	 (63)
     95  46c4		       bd 01 f9 	      lda	left_text+1,x	; 4	 (67)
     96  46c7		       a6 97		      ldx	scorepointers+1	; 3	 (70)
     97  46c9		       1d 01 fa 	      ora	right_text+1,x	; 4	 (74)
     98  46cc							;    sleep 4
     99  46cc
    100  46cc							; Text line 2 / 5
    101  46cc				   endl1
    102  46cc							;line 1
    103  46cc		       85 02		      sta	WSYNC	; 3	 (0)
    104  46ce		       a0 08		      ldy	#textbkcolor	; 2	 (2)
    105  46d0		       84 06		      sty	COLUP0	; 3	 (5)
    106  46d2		       84 07		      sty	COLUP1	; 3	 (8)
    107  46d4		       85 1b		      sta	GRP0	; 3	 (11)
    108  46d6
    109  46d6		       a6 98		      ldx	scorepointers+2	; 3	 (9)
    110  46d8		       bd 01 f9 	      lda	left_text+1,x	; 4	 (13)
    111  46db		       a6 99		      ldx	scorepointers+3	; 3	 (16)
    112  46dd		       1d 01 fa 	      ora	right_text+1,x	; 4	 (20)
    113  46e0		       85 1c		      sta	GRP1	; 3	 (23*)
    114  46e2
    115  46e2		       a6 9a		      ldx	scorepointers+4	; 3	 (26)
    116  46e4		       bd 01 f9 	      lda	left_text+1,x	; 4	 (30)
    117  46e7		       a6 9b		      ldx	scorepointers+5	; 3	 (33)
    118  46e9		       1d 01 fa 	      ora	right_text+1,x	; 4	 (37)
    119  46ec		       85 1b		      sta	GRP0	; 3	 (40)
    120  46ee
    121  46ee		       a6 9c		      ldx	scorepointers+6	; 3	 (43) 3 in A
    122  46f0		       bd 01 f9 	      lda	left_text+1,x	; 4	 (47)
    123  46f3		       a6 9d		      ldx	scorepointers+7	; 3	 (50)
    124  46f5		       1d 01 fa 	      ora	right_text+1,x	; 4	 (54)
    125  46f8
    126  46f8		       a4 f5		      ldy	TextColor	; 2	 (56)
    127  46fa		       84 07		      sty	COLUP1	; 3	 (59)
    128  46fc
    129  46fc							;line 2
    130  46fc		       85 02		      sta	WSYNC	; 3	 (0)
    131  46fe		       84 06		      sty	COLUP0	; 3	 (3)
    132  4700		       a8		      tay		; 2	 (5) 3 in Y
    133  4701
    134  4701		       a6 9e		      ldx	scorepointers+8	; 3	 (8) 4
    135  4703		       bd 01 f9 	      lda	left_text+1,x	; 4	 (12)
    136  4706		       a6 9f		      ldx	scorepointers+9	; 3	 (15)
    137  4708		       1d 01 fa 	      ora	right_text+1,x	; 4	 (19)
    138  470b		       85 f6		      sta	stack1	; 3	 (22)
    139  470d
    140  470d		       a6 a0		      ldx	scorepointers+10	; 3	 (25*) 5 in A
    141  470f		       bd 01 f9 	      lda	left_text+1,x	; 4	 (29)
    142  4712		       a6 a1		      ldx	scorepointers+11	; 3	 (32)
    143  4714		       1d 01 fa 	      ora	right_text+1,x	; 4	 (36)
    144  4717
    145  4717		       a6 f6		      ldx	stack1	; 3	 (39) 4 in X
    146  4719					      ifnconst	noscoretxt
      0  4719					      sleep	5	; 7	 (46)
      1  4719				   .CYCLES    SET	5
      2  4719
      3  4719				  -	      IF	.CYCLES < 2
      4  4719				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  4719				  -	      ERR
      6  4719					      ENDIF
      7  4719
      8  4719					      IF	.CYCLES & 1
      9  4719					      IFNCONST	NO_ILLEGAL_OPCODES
     10  4719		       04 00		      nop	0
     11  471b				  -	      ELSE
     12  471b				  -	      bit	VSYNC
     13  471b					      ENDIF
     14  471b				   .CYCLES    SET	.CYCLES - 3
     15  471b					      ENDIF
     16  471b
     17  471b					      REPEAT	.CYCLES / 2
     18  471b		       ea		      nop
     19  471c					      REPEND
    148  471c				  -	      else
    149  471c				  -	      sleep	2
    150  471c					      endif
    151  471c		       84 1c		      sty	GRP1	; 3	 (49) 3 -> [GRP1] ; 2 -> GRP0
    152  471e		       86 1b		      stx	GRP0	; 3	 (52) 4 -> [GRP0] ; 3 -> GRP1
    153  4720		       85 1c		      sta	GRP1	; 3	 (55) 5 -> [GRP1] ; 4 -> GRP0
    154  4722		       85 1b		      sta	GRP0	; 3	 (58) 5 -> GRP1
    155  4724
    156  4724		       a0 02		      ldy	#2	; 2	 (56)
    157  4726		       a6 96		      ldx	scorepointers+0	; 3	 (59)
    158  4728		       bd 02 f9 	      lda	left_text+2,x	; 4	 (63)
    159  472b		       a6 97		      ldx	scorepointers+1	; 3	 (66)
    160  472d		       1d 02 fa 	      ora	right_text+2,x	; 4	 (70)
    161  4730							;    sleep 4
    162  4730
    163  4730							; Text line 3 / 5
    164  4730				   endl2
    165  4730							;line 1
    166  4730		       85 02		      sta	WSYNC	; 3	 (0)
    167  4732		       a0 08		      ldy	#textbkcolor	; 2	 (2)
    168  4734		       84 06		      sty	COLUP0	; 3	 (5)
    169  4736		       84 07		      sty	COLUP1	; 3	 (8)
    170  4738		       85 1b		      sta	GRP0	; 3	 (11)
    171  473a
    172  473a		       a6 98		      ldx	scorepointers+2	; 3	 (9)
    173  473c		       bd 02 f9 	      lda	left_text+2,x	; 4	 (13)
    174  473f		       a6 99		      ldx	scorepointers+3	; 3	 (16)
    175  4741		       1d 02 fa 	      ora	right_text+2,x	; 4	 (20)
    176  4744		       85 1c		      sta	GRP1	; 3	 (23*)
    177  4746
    178  4746		       a6 9a		      ldx	scorepointers+4	; 3	 (26)
    179  4748		       bd 02 f9 	      lda	left_text+2,x	; 4	 (30)
    180  474b		       a6 9b		      ldx	scorepointers+5	; 3	 (33)
    181  474d		       1d 02 fa 	      ora	right_text+2,x	; 4	 (37)
    182  4750		       85 1b		      sta	GRP0	; 3	 (40)
    183  4752
    184  4752		       a6 9c		      ldx	scorepointers+6	; 3	 (43) 3 in A
    185  4754		       bd 02 f9 	      lda	left_text+2,x	; 4	 (47)
    186  4757		       a6 9d		      ldx	scorepointers+7	; 3	 (50)
    187  4759		       1d 02 fa 	      ora	right_text+2,x	; 4	 (54)
    188  475c
    189  475c		       a4 f5		      ldy	TextColor	; 2	 (56)
    190  475e		       84 07		      sty	COLUP1	; 3	 (59)
    191  4760
    192  4760							;line 2
    193  4760		       85 02		      sta	WSYNC	; 3	 (0)
    194  4762		       84 06		      sty	COLUP0	; 3	 (3)
    195  4764		       a8		      tay		; 2	 (5) 3 in Y
    196  4765
    197  4765		       a6 9e		      ldx	scorepointers+8	; 3	 (8) 4
    198  4767		       bd 02 f9 	      lda	left_text+2,x	; 4	 (12)
    199  476a		       a6 9f		      ldx	scorepointers+9	; 3	 (15)
    200  476c		       1d 02 fa 	      ora	right_text+2,x	; 4	 (19)
    201  476f		       85 f6		      sta	stack1	; 3	 (22)
    202  4771
    203  4771		       a6 a0		      ldx	scorepointers+10	; 3	 (25*) 5 in A
    204  4773		       bd 02 f9 	      lda	left_text+2,x	; 4	 (29)
    205  4776		       a6 a1		      ldx	scorepointers+11	; 3	 (32)
    206  4778		       1d 02 fa 	      ora	right_text+2,x	; 4	 (36)
    207  477b
    208  477b		       a6 f6		      ldx	stack1	; 3	 (39) 4 in X
    209  477d					      ifnconst	noscoretxt
      0  477d					      sleep	5	; 7	 (46)
      1  477d				   .CYCLES    SET	5
      2  477d
      3  477d				  -	      IF	.CYCLES < 2
      4  477d				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  477d				  -	      ERR
      6  477d					      ENDIF
      7  477d
      8  477d					      IF	.CYCLES & 1
      9  477d					      IFNCONST	NO_ILLEGAL_OPCODES
     10  477d		       04 00		      nop	0
     11  477f				  -	      ELSE
     12  477f				  -	      bit	VSYNC
     13  477f					      ENDIF
     14  477f				   .CYCLES    SET	.CYCLES - 3
     15  477f					      ENDIF
     16  477f
     17  477f					      REPEAT	.CYCLES / 2
     18  477f		       ea		      nop
     19  4780					      REPEND
    211  4780				  -	      else
    212  4780				  -	      sleep	2
    213  4780					      endif
    214  4780		       84 1c		      sty	GRP1	; 3	 (45) 3 -> [GRP1] ; 2 -> GRP0
    215  4782		       86 1b		      stx	GRP0	; 3	 (48) 4 -> [GRP0] ; 3 -> GRP1
    216  4784		       85 1c		      sta	GRP1	; 3	 (51) 5 -> [GRP1] ; 4 -> GRP0
    217  4786		       85 1b		      sta	GRP0	; 3	 (54) 5 -> GRP1
    218  4788
    219  4788		       a0 02		      ldy	#2	; 2	 (56)
    220  478a		       a6 96		      ldx	scorepointers+0	; 3	 (59)
    221  478c		       bd 03 f9 	      lda	left_text+3,x	; 4	 (63)
    222  478f		       a6 97		      ldx	scorepointers+1	; 3	 (66)
    223  4791		       1d 03 fa 	      ora	right_text+3,x	; 4	 (70)
    224  4794							;    sleep 2
    225  4794
    226  4794							; Text line 4 / 5
    227  4794
    228  4794							;line 1
    229  4794		       85 02		      sta	WSYNC	; 3	 (0)
    230  4796		       a0 08		      ldy	#textbkcolor	; 2	 (2)
    231  4798		       84 06		      sty	COLUP0	; 3	 (5)
    232  479a		       84 07		      sty	COLUP1	; 3	 (8)
    233  479c		       85 1b		      sta	GRP0	; 3	 (11)
    234  479e
    235  479e		       a6 98		      ldx	scorepointers+2	; 3	 (9)
    236  47a0		       bd 03 f9 	      lda	left_text+3,x	; 4	 (13)
    237  47a3		       a6 99		      ldx	scorepointers+3	; 3	 (16)
    238  47a5		       1d 03 fa 	      ora	right_text+3,x	; 4	 (20)
    239  47a8		       85 1c		      sta	GRP1	; 3	 (23*)
    240  47aa
    241  47aa		       a6 9a		      ldx	scorepointers+4	; 3	 (26)
    242  47ac		       bd 03 f9 	      lda	left_text+3,x	; 4	 (30)
    243  47af		       a6 9b		      ldx	scorepointers+5	; 3	 (33)
    244  47b1		       1d 03 fa 	      ora	right_text+3,x	; 4	 (37)
    245  47b4		       85 1b		      sta	GRP0	; 3	 (40)
    246  47b6
    247  47b6		       a6 9c		      ldx	scorepointers+6	; 3	 (43) 3 in A
    248  47b8		       bd 03 f9 	      lda	left_text+3,x	; 4	 (47)
    249  47bb		       a6 9d		      ldx	scorepointers+7	; 3	 (50)
    250  47bd		       1d 03 fa 	      ora	right_text+3,x	; 4	 (54)
    251  47c0
    252  47c0		       a4 f5		      ldy	TextColor	; 2	 (56)
    253  47c2		       84 07		      sty	COLUP1	; 3	 (59)
    254  47c4
    255  47c4							;line 2
    256  47c4		       85 02		      sta	WSYNC	; 3	 (0)
    257  47c6		       84 06		      sty	COLUP0	; 3	 (3)
    258  47c8		       a8		      tay		; 2	 (5) 3 in Y
    259  47c9
    260  47c9		       a6 9e		      ldx	scorepointers+8	; 3	 (8) 4
    261  47cb		       bd 03 f9 	      lda	left_text+3,x	; 4	 (12)
    262  47ce		       a6 9f		      ldx	scorepointers+9	; 3	 (15)
    263  47d0		       1d 03 fa 	      ora	right_text+3,x	; 4	 (19)
    264  47d3		       85 f6		      sta	stack1	; 3	 (22)
    265  47d5
    266  47d5		       a6 a0		      ldx	scorepointers+10	; 3	 (25*) 5 in A
    267  47d7		       bd 03 f9 	      lda	left_text+3,x	; 4	 (29)
    268  47da		       a6 a1		      ldx	scorepointers+11	; 3	 (32)
    269  47dc		       1d 03 fa 	      ora	right_text+3,x	; 4	 (36)
    270  47df
    271  47df		       a6 f6		      ldx	stack1	; 3	 (39) 4 in X
    272  47e1					      ifnconst	noscoretxt
      0  47e1					      sleep	5	; 7	 (46)
      1  47e1				   .CYCLES    SET	5
      2  47e1
      3  47e1				  -	      IF	.CYCLES < 2
      4  47e1				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  47e1				  -	      ERR
      6  47e1					      ENDIF
      7  47e1
      8  47e1					      IF	.CYCLES & 1
      9  47e1					      IFNCONST	NO_ILLEGAL_OPCODES
     10  47e1		       04 00		      nop	0
     11  47e3				  -	      ELSE
     12  47e3				  -	      bit	VSYNC
     13  47e3					      ENDIF
     14  47e3				   .CYCLES    SET	.CYCLES - 3
     15  47e3					      ENDIF
     16  47e3
     17  47e3					      REPEAT	.CYCLES / 2
     18  47e3		       ea		      nop
     19  47e4					      REPEND
    274  47e4				  -	      else
    275  47e4				  -	      sleep	2
    276  47e4					      endif
    277  47e4		       84 1c		      sty	GRP1	; 3	 (45) 3 -> [GRP1] ; 2 -> GRP0
    278  47e6		       86 1b		      stx	GRP0	; 3	 (48) 4 -> [GRP0] ; 3 -> GRP1
    279  47e8		       85 1c		      sta	GRP1	; 3	 (51) 5 -> [GRP1] ; 4 -> GRP0
    280  47ea		       85 1b		      sta	GRP0	; 3	 (54) 5 -> GRP1
    281  47ec
    282  47ec		       a0 02		      ldy	#2	; 2	 (56)
    283  47ee		       a6 96		      ldx	scorepointers+0	; 3	 (59)
    284  47f0		       bd 04 f9 	      lda	left_text+4,x	; 4	 (63)
    285  47f3		       a6 97		      ldx	scorepointers+1	; 3	 (66)
    286  47f5		       1d 04 fa 	      ora	right_text+4,x	; 4	 (70)
    287  47f8							;    sleep 2
    288  47f8
    289  47f8							; Text line 5 / 5
    290  47f8
    291  47f8							;line 1
    292  47f8		       85 02		      sta	WSYNC	; 3	 (0)
    293  47fa		       a0 08		      ldy	#textbkcolor	; 2	 (2)
    294  47fc		       84 06		      sty	COLUP0	; 3	 (5)
    295  47fe		       84 07		      sty	COLUP1	; 3	 (8)
    296  4800		       85 1b		      sta	GRP0	; 3	 (11)
    297  4802
    298  4802		       a6 98		      ldx	scorepointers+2	; 3	 (9)
    299  4804		       bd 04 f9 	      lda	left_text+4,x	; 4	 (13)
    300  4807		       a6 99		      ldx	scorepointers+3	; 3	 (16)
    301  4809		       1d 04 fa 	      ora	right_text+4,x	; 4	 (20)
    302  480c		       85 1c		      sta	GRP1	; 3	 (23*)
    303  480e
    304  480e		       a6 9a		      ldx	scorepointers+4	; 3	 (26)
    305  4810		       bd 04 f9 	      lda	left_text+4,x	; 4	 (30)
    306  4813		       a6 9b		      ldx	scorepointers+5	; 3	 (33)
    307  4815		       1d 04 fa 	      ora	right_text+4,x	; 4	 (37)
    308  4818		       85 1b		      sta	GRP0	; 3	 (40)
    309  481a
    310  481a		       a6 9c		      ldx	scorepointers+6	; 3	 (43) 3 in A
    311  481c		       bd 04 f9 	      lda	left_text+4,x	; 4	 (47)
    312  481f		       a6 9d		      ldx	scorepointers+7	; 3	 (50)
    313  4821		       1d 04 fa 	      ora	right_text+4,x	; 4	 (54)
    314  4824
    315  4824		       a4 f5		      ldy	TextColor	; 2	 (56)
    316  4826		       84 07		      sty	COLUP1	; 3	 (59)
    317  4828
    318  4828							;line 2
    319  4828		       85 02		      sta	WSYNC	; 3	 (0)
    320  482a		       84 06		      sty	COLUP0	; 3	 (3)
    321  482c		       a8		      tay		; 2	 (5) 3 in Y
    322  482d
    323  482d		       a6 9e		      ldx	scorepointers+8	; 3	 (8) 4
    324  482f		       bd 04 f9 	      lda	left_text+4,x	; 4	 (12)
    325  4832		       a6 9f		      ldx	scorepointers+9	; 3	 (15)
    326  4834		       1d 04 fa 	      ora	right_text+4,x	; 4	 (19)
    327  4837		       85 f6		      sta	stack1	; 3	 (22)
    328  4839
    329  4839		       a6 a0		      ldx	scorepointers+10	; 3	 (25*) 5 in A
    330  483b		       bd 04 f9 	      lda	left_text+4,x	; 4	 (29)
    331  483e		       a6 a1		      ldx	scorepointers+11	; 3	 (32)
    332  4840		       1d 04 fa 	      ora	right_text+4,x	; 4	 (36)
    333  4843
    334  4843		       a6 f6		      ldx	stack1	; 3	 (39) 4 in X
    335  4845					      ifnconst	noscoretxt
      0  4845					      sleep	5	; 7	 (46)
      1  4845				   .CYCLES    SET	5
      2  4845
      3  4845				  -	      IF	.CYCLES < 2
      4  4845				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  4845				  -	      ERR
      6  4845					      ENDIF
      7  4845
      8  4845					      IF	.CYCLES & 1
      9  4845					      IFNCONST	NO_ILLEGAL_OPCODES
     10  4845		       04 00		      nop	0
     11  4847				  -	      ELSE
     12  4847				  -	      bit	VSYNC
     13  4847					      ENDIF
     14  4847				   .CYCLES    SET	.CYCLES - 3
     15  4847					      ENDIF
     16  4847
     17  4847					      REPEAT	.CYCLES / 2
     18  4847		       ea		      nop
     19  4848					      REPEND
    337  4848				  -	      else
    338  4848				  -	      sleep	2
    339  4848					      endif
    340  4848		       84 1c		      sty	GRP1	; 3	 (45) 3 -> [GRP1] ; 2 -> GRP0
    341  484a		       86 1b		      stx	GRP0	; 3	 (48) 4 -> [GRP0] ; 3 -> GRP1
    342  484c		       85 1c		      sta	GRP1	; 3	 (51) 5 -> [GRP1] ; 4 -> GRP0
    343  484e		       85 1b		      sta	GRP0	; 3	 (54) 5 -> GRP1
    344  4850
    345  4850		       a9 00		      lda	#0
    346  4852		       85 1b		      sta	GRP0
    347  4854		       85 1c		      sta	GRP1
    348  4856		       85 1b		      sta	GRP0
    349  4858		       85 04		      sta	NUSIZ0
    350  485a		       85 05		      sta	NUSIZ1
    351  485c		       85 25		      sta	VDELP0
    352  485e		       85 26		      sta	VDELP1
    353  4860
    354  4860				  -	      ifconst	textbank
    355  4860				  -	      sta	temp7
    356  4860				  -	      lda	#>(posttextkernel-1)
    357  4860				  -	      pha
    358  4860				  -	      lda	#<(posttextkernel-1)
    359  4860				  -	      pha
    360  4860				  -	      lda	temp7
    361  4860				  -	      pha		; *** save A
    362  4860				  -	      txa
    363  4860				  -	      pha		; *** save X
    364  4860				  -	      ldx	#KERNELBANK
    365  4860				  -	      jmp	BS_jsr
    366  4860					      else
    367  4860		       4c 46 f6 	      jmp	posttextkernel
    368  4863					      endif
    369  4863
    370  4863					      if	>. != >[.+text_data_height]
    371  4900		       00 00 00 00*	      align	256
    372  4900					      endif
    373  4900
    374  4900				   text_data
    375  4900
    376  4900				   left_text
    377  4900
    378  4900		       00 00	   __A	      =	* - text_data	; baseline (0)
    379  4900		       20		      .byte.b	%00100000
    380  4901		       50		      .byte.b	%01010000
    381  4902		       70		      .byte.b	%01110000
    382  4903		       50		      .byte.b	%01010000
    383  4904		       50		      .byte.b	%01010000
    384  4905
    385  4905		       00 05	   __B	      =	* - text_data
    386  4905		       60		      .byte.b	%01100000
    387  4906		       50		      .byte.b	%01010000
    388  4907		       60		      .byte.b	%01100000
    389  4908		       50		      .byte.b	%01010000
    390  4909		       60		      .byte.b	%01100000
    391  490a
    392  490a		       00 0a	   __C	      =	* - text_data
    393  490a		       30		      .byte.b	%00110000
    394  490b		       40		      .byte.b	%01000000
    395  490c		       40		      .byte.b	%01000000
    396  490d		       40		      .byte.b	%01000000
    397  490e		       30		      .byte.b	%00110000
    398  490f
    399  490f		       00 0f	   __D	      =	* - text_data
    400  490f		       60		      .byte.b	%01100000
    401  4910		       50		      .byte.b	%01010000
    402  4911		       50		      .byte.b	%01010000
    403  4912		       50		      .byte.b	%01010000
    404  4913		       60		      .byte.b	%01100000
    405  4914
    406  4914		       00 14	   __E	      =	* - text_data
    407  4914		       70		      .byte.b	%01110000
    408  4915		       40		      .byte.b	%01000000
    409  4916		       60		      .byte.b	%01100000
    410  4917		       40		      .byte.b	%01000000
    411  4918		       70		      .byte.b	%01110000
    412  4919
    413  4919		       00 19	   __F	      =	* - text_data
    414  4919		       70		      .byte.b	%01110000
    415  491a		       40		      .byte.b	%01000000
    416  491b		       60		      .byte.b	%01100000
    417  491c		       40		      .byte.b	%01000000
    418  491d		       40		      .byte.b	%01000000
    419  491e
    420  491e		       00 1e	   __G	      =	* - text_data
    421  491e		       30		      .byte.b	%00110000
    422  491f		       40		      .byte.b	%01000000
    423  4920		       50		      .byte.b	%01010000
    424  4921		       50		      .byte.b	%01010000
    425  4922		       20		      .byte.b	%00100000
    426  4923
    427  4923		       00 23	   __H	      =	* - text_data
    428  4923		       50		      .byte.b	%01010000
    429  4924		       50		      .byte.b	%01010000
    430  4925		       70		      .byte.b	%01110000
    431  4926		       50		      .byte.b	%01010000
    432  4927		       50		      .byte.b	%01010000
    433  4928
    434  4928		       00 28	   __I	      =	* - text_data
    435  4928		       70		      .byte.b	%01110000
    436  4929		       20		      .byte.b	%00100000
    437  492a		       20		      .byte.b	%00100000
    438  492b		       20		      .byte.b	%00100000
    439  492c		       70		      .byte.b	%01110000
    440  492d
    441  492d		       00 2d	   __J	      =	* - text_data
    442  492d		       10		      .byte.b	%00010000
    443  492e		       10		      .byte.b	%00010000
    444  492f		       10		      .byte.b	%00010000
    445  4930		       50		      .byte.b	%01010000
    446  4931		       20		      .byte.b	%00100000
    447  4932
    448  4932		       00 32	   __K	      =	* - text_data
    449  4932		       50		      .byte.b	%01010000
    450  4933		       50		      .byte.b	%01010000
    451  4934		       60		      .byte.b	%01100000
    452  4935		       50		      .byte.b	%01010000
    453  4936		       50		      .byte.b	%01010000
    454  4937
    455  4937		       00 37	   __L	      =	* - text_data
    456  4937		       40		      .byte.b	%01000000
    457  4938		       40		      .byte.b	%01000000
    458  4939		       40		      .byte.b	%01000000
    459  493a		       40		      .byte.b	%01000000
    460  493b		       70		      .byte.b	%01110000
    461  493c
    462  493c		       00 3c	   __M	      =	* - text_data
    463  493c		       50		      .byte.b	%01010000
    464  493d		       70		      .byte.b	%01110000
    465  493e		       70		      .byte.b	%01110000
    466  493f		       50		      .byte.b	%01010000
    467  4940		       50		      .byte.b	%01010000
    468  4941
    469  4941		       00 41	   __N	      =	* - text_data
    470  4941		       60		      .byte.b	%01100000
    471  4942		       50		      .byte.b	%01010000
    472  4943		       50		      .byte.b	%01010000
    473  4944		       50		      .byte.b	%01010000
    474  4945		       50		      .byte.b	%01010000
    475  4946
    476  4946		       00 46	   __O	      =	* - text_data
    477  4946		       20		      .byte.b	%00100000
    478  4947		       50		      .byte.b	%01010000
    479  4948		       50		      .byte.b	%01010000
    480  4949		       50		      .byte.b	%01010000
    481  494a		       20		      .byte.b	%00100000
    482  494b
    483  494b		       00 4b	   __P	      =	* - text_data
    484  494b		       60		      .byte.b	%01100000
    485  494c		       50		      .byte.b	%01010000
    486  494d		       60		      .byte.b	%01100000
    487  494e		       40		      .byte.b	%01000000
    488  494f		       40		      .byte.b	%01000000
    489  4950
    490  4950		       00 50	   __Q	      =	* - text_data
    491  4950		       20		      .byte.b	%00100000
    492  4951		       50		      .byte.b	%01010000
    493  4952		       50		      .byte.b	%01010000
    494  4953		       50		      .byte.b	%01010000
    495  4954		       30		      .byte.b	%00110000
    496  4955
    497  4955		       00 55	   __R	      =	* - text_data
    498  4955		       60		      .byte.b	%01100000
    499  4956		       50		      .byte.b	%01010000
    500  4957		       60		      .byte.b	%01100000
    501  4958		       50		      .byte.b	%01010000
    502  4959		       50		      .byte.b	%01010000
    503  495a
    504  495a		       00 5a	   __S	      =	* - text_data
    505  495a		       30		      .byte.b	%00110000
    506  495b		       40		      .byte.b	%01000000
    507  495c		       20		      .byte.b	%00100000
    508  495d		       10		      .byte.b	%00010000
    509  495e		       60		      .byte.b	%01100000
    510  495f
    511  495f		       00 5f	   __T	      =	* - text_data
    512  495f		       70		      .byte.b	%01110000
    513  4960		       20		      .byte.b	%00100000
    514  4961		       20		      .byte.b	%00100000
    515  4962		       20		      .byte.b	%00100000
    516  4963		       20		      .byte.b	%00100000
    517  4964
    518  4964		       00 64	   __U	      =	* - text_data
    519  4964		       50		      .byte.b	%01010000
    520  4965		       50		      .byte.b	%01010000
    521  4966		       50		      .byte.b	%01010000
    522  4967		       50		      .byte.b	%01010000
    523  4968		       70		      .byte.b	%01110000
    524  4969
    525  4969		       00 69	   __V	      =	* - text_data
    526  4969		       50		      .byte.b	%01010000
    527  496a		       50		      .byte.b	%01010000
    528  496b		       50		      .byte.b	%01010000
    529  496c		       50		      .byte.b	%01010000
    530  496d		       20		      .byte.b	%00100000
    531  496e
    532  496e		       00 6e	   __W	      =	* - text_data
    533  496e		       50		      .byte.b	%01010000
    534  496f		       50		      .byte.b	%01010000
    535  4970		       70		      .byte.b	%01110000
    536  4971		       70		      .byte.b	%01110000
    537  4972		       50		      .byte.b	%01010000
    538  4973
    539  4973		       00 73	   __X	      =	* - text_data
    540  4973		       50		      .byte.b	%01010000
    541  4974		       50		      .byte.b	%01010000
    542  4975		       20		      .byte.b	%00100000
    543  4976		       50		      .byte.b	%01010000
    544  4977		       50		      .byte.b	%01010000
    545  4978
    546  4978		       00 78	   __Y	      =	* - text_data
    547  4978		       50		      .byte.b	%01010000
    548  4979		       50		      .byte.b	%01010000
    549  497a		       20		      .byte.b	%00100000
    550  497b		       20		      .byte.b	%00100000
    551  497c		       20		      .byte.b	%00100000
    552  497d
    553  497d		       00 7d	   __Z	      =	* - text_data
    554  497d		       70		      .byte.b	%01110000
    555  497e		       10		      .byte.b	%00010000
    556  497f		       20		      .byte.b	%00100000
    557  4980		       40		      .byte.b	%01000000
    558  4981		       70		      .byte.b	%01110000
    559  4982
    560  4982		       00 82	   __0	      =	* - text_data
    561  4982		       70		      .byte.b	%01110000
    562  4983		       50		      .byte.b	%01010000
    563  4984		       50		      .byte.b	%01010000
    564  4985		       50		      .byte.b	%01010000
    565  4986		       70		      .byte.b	%01110000
    566  4987
    567  4987		       00 87	   __1	      =	* - text_data
    568  4987		       20		      .byte.b	%00100000
    569  4988		       60		      .byte.b	%01100000
    570  4989		       20		      .byte.b	%00100000
    571  498a		       20		      .byte.b	%00100000
    572  498b		       70		      .byte.b	%01110000
    573  498c
    574  498c		       00 8c	   __2	      =	* - text_data
    575  498c		       60		      .byte.b	%01100000
    576  498d		       10		      .byte.b	%00010000
    577  498e		       20		      .byte.b	%00100000
    578  498f		       40		      .byte.b	%01000000
    579  4990		       70		      .byte.b	%01110000
    580  4991
    581  4991		       00 91	   __3	      =	* - text_data
    582  4991		       60		      .byte.b	%01100000
    583  4992		       10		      .byte.b	%00010000
    584  4993		       20		      .byte.b	%00100000
    585  4994		       10		      .byte.b	%00010000
    586  4995		       60		      .byte.b	%01100000
    587  4996
    588  4996		       00 96	   __4	      =	* - text_data
    589  4996		       50		      .byte.b	%01010000
    590  4997		       50		      .byte.b	%01010000
    591  4998		       70		      .byte.b	%01110000
    592  4999		       10		      .byte.b	%00010000
    593  499a		       10		      .byte.b	%00010000
    594  499b
    595  499b		       00 9b	   __5	      =	* - text_data
    596  499b		       70		      .byte.b	%01110000
    597  499c		       40		      .byte.b	%01000000
    598  499d		       60		      .byte.b	%01100000
    599  499e		       10		      .byte.b	%00010000
    600  499f		       60		      .byte.b	%01100000
    601  49a0
    602  49a0		       00 a0	   __6	      =	* - text_data
    603  49a0		       30		      .byte.b	%00110000
    604  49a1		       40		      .byte.b	%01000000
    605  49a2		       60		      .byte.b	%01100000
    606  49a3		       50		      .byte.b	%01010000
    607  49a4		       20		      .byte.b	%00100000
    608  49a5
    609  49a5		       00 a5	   __7	      =	* - text_data
    610  49a5		       70		      .byte.b	%01110000
    611  49a6		       10		      .byte.b	%00010000
    612  49a7		       20		      .byte.b	%00100000
    613  49a8		       40		      .byte.b	%01000000
    614  49a9		       40		      .byte.b	%01000000
    615  49aa
    616  49aa		       00 aa	   __8	      =	* - text_data
    617  49aa		       20		      .byte.b	%00100000
    618  49ab		       50		      .byte.b	%01010000
    619  49ac		       20		      .byte.b	%00100000
    620  49ad		       50		      .byte.b	%01010000
    621  49ae		       20		      .byte.b	%00100000
    622  49af
    623  49af		       00 af	   __9	      =	* - text_data
    624  49af		       20		      .byte.b	%00100000
    625  49b0		       50		      .byte.b	%01010000
    626  49b1		       30		      .byte.b	%00110000
    627  49b2		       10		      .byte.b	%00010000
    628  49b3		       60		      .byte.b	%01100000
    629  49b4
    630  49b4		       00 b4	   _sp	      =	* - text_data
    631  49b4		       00		      .byte.b	%00000000
    632  49b5		       00		      .byte.b	%00000000
    633  49b6		       00		      .byte.b	%00000000
    634  49b7		       00		      .byte.b	%00000000
    635  49b8		       00		      .byte.b	%00000000
    636  49b9
    637  49b9		       00 b9	   _pd	      =	* - text_data
    638  49b9		       00		      .byte.b	%00000000
    639  49ba		       00		      .byte.b	%00000000
    640  49bb		       00		      .byte.b	%00000000
    641  49bc		       00		      .byte.b	%00000000
    642  49bd		       20		      .byte.b	%00100000
    643  49be
    644  49be		       00 be	   _qu	      =	* - text_data
    645  49be		       60		      .byte.b	%01100000
    646  49bf		       10		      .byte.b	%00010000
    647  49c0		       20		      .byte.b	%00100000
    648  49c1		       00		      .byte.b	%00000000
    649  49c2		       20		      .byte.b	%00100000
    650  49c3
    651  49c3		       00 c3	   _ex	      =	* - text_data
    652  49c3		       20		      .byte.b	%00100000
    653  49c4		       20		      .byte.b	%00100000
    654  49c5		       20		      .byte.b	%00100000
    655  49c6		       00		      .byte.b	%00000000
    656  49c7		       20		      .byte.b	%00100000
    657  49c8
    658  49c8		       00 c8	   _cm	      =	* - text_data
    659  49c8		       00		      .byte.b	%00000000
    660  49c9		       00		      .byte.b	%00000000
    661  49ca		       00		      .byte.b	%00000000
    662  49cb		       20		      .byte.b	%00100000
    663  49cc		       40		      .byte.b	%01000000
    664  49cd
    665  49cd		       00 cd	   _hy	      =	* - text_data
    666  49cd		       00		      .byte.b	%00000000
    667  49ce		       00		      .byte.b	%00000000
    668  49cf		       70		      .byte.b	%01110000
    669  49d0		       00		      .byte.b	%00000000
    670  49d1		       00		      .byte.b	%00000000
    671  49d2
    672  49d2		       00 d2	   _pl	      =	* - text_data
    673  49d2		       20		      .byte.b	%00100000
    674  49d3		       20		      .byte.b	%00100000
    675  49d4		       70		      .byte.b	%01110000
    676  49d5		       20		      .byte.b	%00100000
    677  49d6		       20		      .byte.b	%00100000
    678  49d7
    679  49d7		       00 d7	   _ap	      =	* - text_data
    680  49d7		       20		      .byte.b	%00100000
    681  49d8		       40		      .byte.b	%01000000
    682  49d9		       00		      .byte.b	%00000000
    683  49da		       00		      .byte.b	%00000000
    684  49db		       00		      .byte.b	%00000000
    685  49dc
    686  49dc		       00 dc	   _lp	      =	* - text_data
    687  49dc		       20		      .byte.b	%00100000
    688  49dd		       40		      .byte.b	%01000000
    689  49de		       40		      .byte.b	%01000000
    690  49df		       40		      .byte.b	%01000000
    691  49e0		       20		      .byte.b	%00100000
    692  49e1
    693  49e1		       00 e1	   _rp	      =	* - text_data
    694  49e1		       20		      .byte.b	%00100000
    695  49e2		       10		      .byte.b	%00010000
    696  49e3		       10		      .byte.b	%00010000
    697  49e4		       10		      .byte.b	%00010000
    698  49e5		       20		      .byte.b	%00100000
    699  49e6
    700  49e6		       00 e6	   _co	      =	* - text_data
    701  49e6		       00		      .byte.b	%00000000
    702  49e7		       40		      .byte.b	%01000000
    703  49e8		       00		      .byte.b	%00000000
    704  49e9		       40		      .byte.b	%01000000
    705  49ea		       00		      .byte.b	%00000000
    706  49eb
    707  49eb		       00 eb	   _sl	      =	* - text_data
    708  49eb		       10		      .byte.b	%00010000
    709  49ec		       10		      .byte.b	%00010000
    710  49ed		       20		      .byte.b	%00100000
    711  49ee		       40		      .byte.b	%01000000
    712  49ef		       40		      .byte.b	%01000000
    713  49f0
    714  49f0		       00 f0	   _eq	      =	* - text_data
    715  49f0		       00		      .byte.b	%00000000
    716  49f1		       70		      .byte.b	%01110000
    717  49f2		       00		      .byte.b	%00000000
    718  49f3		       70		      .byte.b	%01110000
    719  49f4		       00		      .byte.b	%00000000
    720  49f5
    721  49f5		       00 f5	   _qt	      =	* - text_data
    722  49f5		       50		      .byte.b	%01010000
    723  49f6		       50		      .byte.b	%01010000
    724  49f7		       00		      .byte.b	%00000000
    725  49f8		       00		      .byte.b	%00000000
    726  49f9		       00		      .byte.b	%00000000
    727  49fa
    728  49fa		       00 fa	   _po	      =	* - text_data
    729  49fa				   _ht
    730  49fa		       50		      .byte.b	%01010000
    731  49fb		       f0		      .byte.b	%11110000
    732  49fc		       50		      .byte.b	%01010000
    733  49fd		       f0		      .byte.b	%11110000
    734  49fe		       50		      .byte.b	%01010000
    735  49ff
    736  49ff
    737  49ff		       00 ff	   text_data_height =	* - text_data
    738  49ff
    739  49ff					      if	>. != >[.+text_data_height]
    740  4a00		       00		      align	256
    741  4a00					      endif
    742  4a00
    743  4a00				   right_text
    744  4a00
    745  4a00							; A
    746  4a00		       02		      .byte.b	%00000010
    747  4a01		       05		      .byte.b	%00000101
    748  4a02		       07		      .byte.b	%00000111
    749  4a03		       05		      .byte.b	%00000101
    750  4a04		       05		      .byte.b	%00000101
    751  4a05
    752  4a05
    753  4a05							; B
    754  4a05		       06		      .byte.b	%00000110
    755  4a06		       05		      .byte.b	%00000101
    756  4a07		       06		      .byte.b	%00000110
    757  4a08		       05		      .byte.b	%00000101
    758  4a09		       06		      .byte.b	%00000110
    759  4a0a
    760  4a0a							; C
    761  4a0a		       03		      .byte.b	%00000011
    762  4a0b		       04		      .byte.b	%00000100
    763  4a0c		       04		      .byte.b	%00000100
    764  4a0d		       04		      .byte.b	%00000100
    765  4a0e		       03		      .byte.b	%00000011
    766  4a0f
    767  4a0f							; D
    768  4a0f		       06		      .byte.b	%00000110
    769  4a10		       05		      .byte.b	%00000101
    770  4a11		       05		      .byte.b	%00000101
    771  4a12		       05		      .byte.b	%00000101
    772  4a13		       06		      .byte.b	%00000110
    773  4a14
    774  4a14							; E
    775  4a14		       07		      .byte.b	%00000111
    776  4a15		       04		      .byte.b	%00000100
    777  4a16		       06		      .byte.b	%00000110
    778  4a17		       04		      .byte.b	%00000100
    779  4a18		       07		      .byte.b	%00000111
    780  4a19
    781  4a19							; F
    782  4a19		       07		      .byte.b	%00000111
    783  4a1a		       04		      .byte.b	%00000100
    784  4a1b		       06		      .byte.b	%00000110
    785  4a1c		       04		      .byte.b	%00000100
    786  4a1d		       04		      .byte.b	%00000100
    787  4a1e
    788  4a1e							; G
    789  4a1e		       03		      .byte.b	%00000011
    790  4a1f		       04		      .byte.b	%00000100
    791  4a20		       05		      .byte.b	%00000101
    792  4a21		       05		      .byte.b	%00000101
    793  4a22		       02		      .byte.b	%00000010
    794  4a23
    795  4a23							; H
    796  4a23		       05		      .byte.b	%00000101
    797  4a24		       05		      .byte.b	%00000101
    798  4a25		       07		      .byte.b	%00000111
    799  4a26		       05		      .byte.b	%00000101
    800  4a27		       05		      .byte.b	%00000101
    801  4a28
    802  4a28							; I
    803  4a28		       07		      .byte.b	%00000111
    804  4a29		       02		      .byte.b	%00000010
    805  4a2a		       02		      .byte.b	%00000010
    806  4a2b		       02		      .byte.b	%00000010
    807  4a2c		       07		      .byte.b	%00000111
    808  4a2d
    809  4a2d							; J
    810  4a2d		       01		      .byte.b	%00000001
    811  4a2e		       01		      .byte.b	%00000001
    812  4a2f		       01		      .byte.b	%00000001
    813  4a30		       05		      .byte.b	%00000101
    814  4a31		       02		      .byte.b	%00000010
    815  4a32
    816  4a32							; K
    817  4a32		       05		      .byte.b	%00000101
    818  4a33		       05		      .byte.b	%00000101
    819  4a34		       06		      .byte.b	%00000110
    820  4a35		       05		      .byte.b	%00000101
    821  4a36		       05		      .byte.b	%00000101
    822  4a37
    823  4a37							; L
    824  4a37		       04		      .byte.b	%00000100
    825  4a38		       04		      .byte.b	%00000100
    826  4a39		       04		      .byte.b	%00000100
    827  4a3a		       04		      .byte.b	%00000100
    828  4a3b		       07		      .byte.b	%00000111
    829  4a3c
    830  4a3c							; M
    831  4a3c		       05		      .byte.b	%00000101
    832  4a3d		       07		      .byte.b	%00000111
    833  4a3e		       07		      .byte.b	%00000111
    834  4a3f		       05		      .byte.b	%00000101
    835  4a40		       05		      .byte.b	%00000101
    836  4a41
    837  4a41							; N
    838  4a41		       06		      .byte.b	%00000110
    839  4a42		       05		      .byte.b	%00000101
    840  4a43		       05		      .byte.b	%00000101
    841  4a44		       05		      .byte.b	%00000101
    842  4a45		       05		      .byte.b	%00000101
    843  4a46
    844  4a46							; O
    845  4a46		       02		      .byte.b	%00000010
    846  4a47		       05		      .byte.b	%00000101
    847  4a48		       05		      .byte.b	%00000101
    848  4a49		       05		      .byte.b	%00000101
    849  4a4a		       02		      .byte.b	%00000010
    850  4a4b
    851  4a4b							; P
    852  4a4b		       06		      .byte.b	%00000110
    853  4a4c		       05		      .byte.b	%00000101
    854  4a4d		       06		      .byte.b	%00000110
    855  4a4e		       04		      .byte.b	%00000100
    856  4a4f		       04		      .byte.b	%00000100
    857  4a50
    858  4a50							; Q
    859  4a50		       02		      .byte.b	%00000010
    860  4a51		       05		      .byte.b	%00000101
    861  4a52		       05		      .byte.b	%00000101
    862  4a53		       05		      .byte.b	%00000101
    863  4a54		       03		      .byte.b	%00000011
    864  4a55
    865  4a55							; R
    866  4a55		       06		      .byte.b	%00000110
    867  4a56		       05		      .byte.b	%00000101
    868  4a57		       06		      .byte.b	%00000110
    869  4a58		       05		      .byte.b	%00000101
    870  4a59		       05		      .byte.b	%00000101
    871  4a5a
    872  4a5a							; S
    873  4a5a		       03		      .byte.b	%00000011
    874  4a5b		       04		      .byte.b	%00000100
    875  4a5c		       02		      .byte.b	%00000010
    876  4a5d		       01		      .byte.b	%00000001
    877  4a5e		       06		      .byte.b	%00000110
    878  4a5f
    879  4a5f							; T
    880  4a5f		       07		      .byte.b	%00000111
    881  4a60		       02		      .byte.b	%00000010
    882  4a61		       02		      .byte.b	%00000010
    883  4a62		       02		      .byte.b	%00000010
    884  4a63		       02		      .byte.b	%00000010
    885  4a64
    886  4a64							; U
    887  4a64		       05		      .byte.b	%00000101
    888  4a65		       05		      .byte.b	%00000101
    889  4a66		       05		      .byte.b	%00000101
    890  4a67		       05		      .byte.b	%00000101
    891  4a68		       07		      .byte.b	%00000111
    892  4a69
    893  4a69							; V
    894  4a69		       05		      .byte.b	%00000101
    895  4a6a		       05		      .byte.b	%00000101
    896  4a6b		       05		      .byte.b	%00000101
    897  4a6c		       05		      .byte.b	%00000101
    898  4a6d		       02		      .byte.b	%00000010
    899  4a6e
    900  4a6e							; W
    901  4a6e		       05		      .byte.b	%00000101
    902  4a6f		       05		      .byte.b	%00000101
    903  4a70		       07		      .byte.b	%00000111
    904  4a71		       07		      .byte.b	%00000111
    905  4a72		       05		      .byte.b	%00000101
    906  4a73
    907  4a73							; X
    908  4a73		       05		      .byte.b	%00000101
    909  4a74		       05		      .byte.b	%00000101
    910  4a75		       02		      .byte.b	%00000010
    911  4a76		       05		      .byte.b	%00000101
    912  4a77		       05		      .byte.b	%00000101
    913  4a78
    914  4a78							; Y
    915  4a78		       05		      .byte.b	%00000101
    916  4a79		       05		      .byte.b	%00000101
    917  4a7a		       02		      .byte.b	%00000010
    918  4a7b		       02		      .byte.b	%00000010
    919  4a7c		       02		      .byte.b	%00000010
    920  4a7d
    921  4a7d							; Z
    922  4a7d		       07		      .byte.b	%00000111
    923  4a7e		       01		      .byte.b	%00000001
    924  4a7f		       02		      .byte.b	%00000010
    925  4a80		       04		      .byte.b	%00000100
    926  4a81		       07		      .byte.b	%00000111
    927  4a82
    928  4a82							; 0
    929  4a82		       07		      .byte.b	%00000111
    930  4a83		       05		      .byte.b	%00000101
    931  4a84		       05		      .byte.b	%00000101
    932  4a85		       05		      .byte.b	%00000101
    933  4a86		       07		      .byte.b	%00000111
    934  4a87
    935  4a87							; 1
    936  4a87		       02		      .byte.b	%00000010
    937  4a88		       06		      .byte.b	%00000110
    938  4a89		       02		      .byte.b	%00000010
    939  4a8a		       02		      .byte.b	%00000010
    940  4a8b		       07		      .byte.b	%00000111
    941  4a8c
    942  4a8c							; 2
    943  4a8c		       06		      .byte.b	%00000110
    944  4a8d		       01		      .byte.b	%00000001
    945  4a8e		       02		      .byte.b	%00000010
    946  4a8f		       04		      .byte.b	%00000100
    947  4a90		       07		      .byte.b	%00000111
    948  4a91
    949  4a91							; 3
    950  4a91		       06		      .byte.b	%00000110
    951  4a92		       01		      .byte.b	%00000001
    952  4a93		       02		      .byte.b	%00000010
    953  4a94		       01		      .byte.b	%00000001
    954  4a95		       06		      .byte.b	%00000110
    955  4a96
    956  4a96							; 4
    957  4a96		       05		      .byte.b	%00000101
    958  4a97		       05		      .byte.b	%00000101
    959  4a98		       07		      .byte.b	%00000111
    960  4a99		       01		      .byte.b	%00000001
    961  4a9a		       01		      .byte.b	%00000001
    962  4a9b
    963  4a9b							; 5
    964  4a9b		       07		      .byte.b	%00000111
    965  4a9c		       04		      .byte.b	%00000100
    966  4a9d		       06		      .byte.b	%00000110
    967  4a9e		       01		      .byte.b	%00000001
    968  4a9f		       06		      .byte.b	%00000110
    969  4aa0
    970  4aa0							; 6
    971  4aa0		       03		      .byte.b	%00000011
    972  4aa1		       04		      .byte.b	%00000100
    973  4aa2		       06		      .byte.b	%00000110
    974  4aa3		       05		      .byte.b	%00000101
    975  4aa4		       02		      .byte.b	%00000010
    976  4aa5
    977  4aa5							; 7
    978  4aa5		       07		      .byte.b	%00000111
    979  4aa6		       01		      .byte.b	%00000001
    980  4aa7		       02		      .byte.b	%00000010
    981  4aa8		       04		      .byte.b	%00000100
    982  4aa9		       04		      .byte.b	%00000100
    983  4aaa
    984  4aaa							; 8
    985  4aaa		       02		      .byte.b	%00000010
    986  4aab		       05		      .byte.b	%00000101
    987  4aac		       02		      .byte.b	%00000010
    988  4aad		       05		      .byte.b	%00000101
    989  4aae		       02		      .byte.b	%00000010
    990  4aaf
    991  4aaf							; 9
    992  4aaf		       02		      .byte.b	%00000010
    993  4ab0		       05		      .byte.b	%00000101
    994  4ab1		       03		      .byte.b	%00000011
    995  4ab2		       01		      .byte.b	%00000001
    996  4ab3		       06		      .byte.b	%00000110
    997  4ab4
    998  4ab4							; space
    999  4ab4		       00		      .byte.b	%00000000
   1000  4ab5		       00		      .byte.b	%00000000
   1001  4ab6		       00		      .byte.b	%00000000
   1002  4ab7		       00		      .byte.b	%00000000
   1003  4ab8		       00		      .byte.b	%00000000
   1004  4ab9
   1005  4ab9							; period
   1006  4ab9		       00		      .byte.b	%00000000
   1007  4aba		       00		      .byte.b	%00000000
   1008  4abb		       00		      .byte.b	%00000000
   1009  4abc		       00		      .byte.b	%00000000
   1010  4abd		       02		      .byte.b	%00000010
   1011  4abe
   1012  4abe							; question mark
   1013  4abe		       06		      .byte.b	%00000110
   1014  4abf		       01		      .byte.b	%00000001
   1015  4ac0		       02		      .byte.b	%00000010
   1016  4ac1		       00		      .byte.b	%00000000
   1017  4ac2		       02		      .byte.b	%00000010
   1018  4ac3
   1019  4ac3							; exclamation point
   1020  4ac3		       02		      .byte.b	%00000010
   1021  4ac4		       02		      .byte.b	%00000010
   1022  4ac5		       02		      .byte.b	%00000010
   1023  4ac6		       00		      .byte.b	%00000000
   1024  4ac7		       02		      .byte.b	%00000010
   1025  4ac8
   1026  4ac8							; comma
   1027  4ac8		       00		      .byte.b	%00000000
   1028  4ac9		       00		      .byte.b	%00000000
   1029  4aca		       00		      .byte.b	%00000000
   1030  4acb		       02		      .byte.b	%00000010
   1031  4acc		       04		      .byte.b	%00000100
   1032  4acd
   1033  4acd							; hyphen
   1034  4acd		       00		      .byte.b	%00000000
   1035  4ace		       00		      .byte.b	%00000000
   1036  4acf		       07		      .byte.b	%00000111
   1037  4ad0		       00		      .byte.b	%00000000
   1038  4ad1		       00		      .byte.b	%00000000
   1039  4ad2
   1040  4ad2							; plus
   1041  4ad2		       02		      .byte.b	%00000010
   1042  4ad3		       02		      .byte.b	%00000010
   1043  4ad4		       07		      .byte.b	%00000111
   1044  4ad5		       02		      .byte.b	%00000010
   1045  4ad6		       02		      .byte.b	%00000010
   1046  4ad7
   1047  4ad7							; apostrophe
   1048  4ad7		       02		      .byte.b	%00000010
   1049  4ad8		       04		      .byte.b	%00000100
   1050  4ad9		       00		      .byte.b	%00000000
   1051  4ada		       00		      .byte.b	%00000000
   1052  4adb		       00		      .byte.b	%00000000
   1053  4adc
   1054  4adc							; left parenthesis
   1055  4adc		       02		      .byte.b	%00000010
   1056  4add		       04		      .byte.b	%00000100
   1057  4ade		       04		      .byte.b	%00000100
   1058  4adf		       04		      .byte.b	%00000100
   1059  4ae0		       02		      .byte.b	%00000010
   1060  4ae1
   1061  4ae1							; right parenthesis
   1062  4ae1		       02		      .byte.b	%00000010
   1063  4ae2		       01		      .byte.b	%00000001
   1064  4ae3		       01		      .byte.b	%00000001
   1065  4ae4		       01		      .byte.b	%00000001
   1066  4ae5		       02		      .byte.b	%00000010
   1067  4ae6
   1068  4ae6							; colon
   1069  4ae6		       00		      .byte.b	%00000000
   1070  4ae7		       04		      .byte.b	%00000100
   1071  4ae8		       00		      .byte.b	%00000000
   1072  4ae9		       04		      .byte.b	%00000100
   1073  4aea		       00		      .byte.b	%00000000
   1074  4aeb
   1075  4aeb							;slash
   1076  4aeb		       01		      .byte.b	%00000001
   1077  4aec		       01		      .byte.b	%00000001
   1078  4aed		       02		      .byte.b	%00000010
   1079  4aee		       04		      .byte.b	%00000100
   1080  4aef		       04		      .byte.b	%00000100
   1081  4af0
   1082  4af0							; equal
   1083  4af0		       00		      .byte.b	%00000000
   1084  4af1		       07		      .byte.b	%00000111
   1085  4af2		       00		      .byte.b	%00000000
   1086  4af3		       07		      .byte.b	%00000111
   1087  4af4		       00		      .byte.b	%00000000
   1088  4af5
   1089  4af5							; quote
   1090  4af5		       05		      .byte.b	%00000101
   1091  4af6		       05		      .byte.b	%00000101
   1092  4af7		       00		      .byte.b	%00000000
   1093  4af8		       00		      .byte.b	%00000000
   1094  4af9		       00		      .byte.b	%00000000
   1095  4afa
   1096  4afa							; pound sign
   1097  4afa		       05		      .byte.b	%00000101
   1098  4afb		       0f		      .byte.b	%00001111
   1099  4afc		       05		      .byte.b	%00000101
   1100  4afd		       0f		      .byte.b	%00001111
   1101  4afe		       05		      .byte.b	%00000101
------- FILE d:\Firmaplus\Firmaplus_intern\Atari\PlusROM\Projekte-batariBasic\CaveApocalypse\C.A.V.E. Apocalypse.bas.asm
   7554  4aff
   7555  4aff				   .
   7556  4aff							; 
   7557  4aff
   7558  4aff				   .L0631		;  data text_strings
   7559  4aff
   7560  4aff		       4c fe fb 	      JMP	.skipL0631
   7561  4b02				   text_strings
   7562  4b02		       00 37 37 b4*	      .byte.b	__A, __L, __L, _sp, __M, __E, __N, _sp, __S, __A, __V, __E	; __R, __E, __S, __C, __U, __E, __D
   7563  4b0e
   7564  4b0e		       b4 8c b4 3c*	      .byte.b	_sp, __2, _sp, __M, __E, __N, _sp, __L, __E, __F, __T, _sp
   7565  4b1a
   7566  4b1a		       b4 96 b4 3c*	      .byte.b	_sp, __4, _sp, __M, __E, __N, _sp, __L, __E, __F, __T, _sp
   7567  4b26
   7568  4b26		       b4 a0 b4 3c*	      .byte.b	_sp, __6, _sp, __M, __E, __N, _sp, __L, __E, __F, __T, _sp
   7569  4b32
   7570  4b32		       b4 aa b4 3c*	      .byte.b	_sp, __8, _sp, __M, __E, __N, _sp, __L, __E, __F, __T, _sp
   7571  4b3e
   7572  4b3e		       87 82 b4 3c*	      .byte.b	__1, __0, _sp, __M, __E, __N, _sp, __L, __E, __F, __T, _sp
   7573  4b4a
   7574  4b4a		       87 8c b4 3c*	      .byte.b	__1, __2, _sp, __M, __E, __N, _sp, __L, __E, __F, __T, _sp
   7575  4b56
   7576  4b56		       87 96 b4 3c*	      .byte.b	__1, __4, _sp, __M, __E, __N, _sp, __L, __E, __F, __T, _sp
   7577  4b62
   7578  4b62		       87 a0 b4 3c*	      .byte.b	__1, __6, _sp, __M, __E, __N, _sp, __L, __E, __F, __T, _sp
   7579  4b6e
   7580  4b6e		       87 aa b4 3c*	      .byte.b	__1, __8, _sp, __M, __E, __N, _sp, __L, __E, __F, __T, _sp
   7581  4b7a
   7582  4b7a		       8c 82 b4 3c*	      .byte.b	__2, __0, _sp, __M, __E, __N, _sp, __L, __E, __F, __T, _sp
   7583  4b86
   7584  4b86		       8c 8c b4 3c*	      .byte.b	__2, __2, _sp, __M, __E, __N, _sp, __L, __E, __F, __T, _sp
   7585  4b92
   7586  4b92		       8c 96 b4 3c*	      .byte.b	__2, __4, _sp, __M, __E, __N, _sp, __L, __E, __F, __T, _sp
   7587  4b9e
   7588  4b9e		       8c a0 b4 3c*	      .byte.b	__2, __6, _sp, __M, __E, __N, _sp, __L, __E, __F, __T, _sp
   7589  4baa
   7590  4baa		       8c aa b4 3c*	      .byte.b	__2, __8, _sp, __M, __E, __N, _sp, __L, __E, __F, __T, _sp
   7591  4bb6
   7592  4bb6		       91 82 b4 3c*	      .byte.b	__3, __0, _sp, __M, __E, __N, _sp, __L, __E, __F, __T, _sp
   7593  4bc2
   7594  4bc2		       91 8c b4 3c*	      .byte.b	__3, __2, _sp, __M, __E, __N, _sp, __L, __E, __F, __T, _sp
   7595  4bce
   7596  4bce		       91 96 b4 3c*	      .byte.b	__3, __4, _sp, __M, __E, __N, _sp, __L, __E, __F, __T, _sp
   7597  4bda
   7598  4bda		       91 a0 b4 3c*	      .byte.b	__3, __6, _sp, __M, __E, __N, _sp, __L, __E, __F, __T, _sp
   7599  4be6
   7600  4be6		       91 aa b4 3c*	      .byte.b	__3, __8, _sp, __M, __E, __N, _sp, __L, __E, __F, __T, _sp
   7601  4bf2
   7602  4bf2		       96 82 b4 3c*	      .byte.b	__4, __0, _sp, __M, __E, __N, _sp, __L, __E, __F, __T, _sp
   7603  4bfe
   7604  4bfe				   .skipL0631
   7605  4bfe				   .
   7606  4bfe							; 
   7607  4bfe
   7608  4bfe				   .
   7609  4bfe							; 
   7610  4bfe
   7611  4bfe				   .
   7612  4bfe							; 
   7613  4bfe
   7614  4bfe				   .L0632		;  asm
   7615  4bfe
      0  4bfe					      SET_PLUSROM_API	"a.php", "ca.firmaplus.de"
      1  4bfe		       fb fe	   OLD_RORG   =	*
      2  4bfe					      REND
      3  4bfe				   PlusROM_API
      4  4bfe		       61 2e 70 68*	      .byte.b	"a.php", 0, "ca.firmaplus.de", 0
 Size of PlusROM API definition:  22
      5  4bfe					      ECHO	"Size of PlusROM API definition: ", [( * - PlusROM_API )]d
      6  4c14					      RORG	(OLD_RORG + ( * - PlusROM_API ))
   7617  4c14
   7618  4c14				   .
   7619  4c14							; 
   7620  4c14
   7621  4c14				  -	      if	(<*) > (<(*+7))
   7622  4c14				  -	      repeat	($100-<*)
   7623  4c14				  -	      .byte	0
   7624  4c14				  -	      repend
   7625  4c14					      endif
   7626  4c14				   playercolorL0299_1
   7627  4c14		       1e		      .byte.b	_1E
   7628  4c15		       82		      .byte.b	_82
   7629  4c16		       84		      .byte.b	_84
   7630  4c17		       46		      .byte.b	_46
   7631  4c18		       44		      .byte.b	_44
   7632  4c19		       42		      .byte.b	_42
   7633  4c1a		       12		      .byte.b	_12
   7634  4c1b		       08		      .byte.b	_08
   7635  4c1c				  -	      if	(<*) > (<(*+7))
   7636  4c1c				  -	      repeat	($100-<*)
   7637  4c1c				  -	      .byte	0
   7638  4c1c				  -	      repend
   7639  4c1c					      endif
   7640  4c1c				   player1then_1
   7641  4c1c		       1b		      .byte.b	%00011011
   7642  4c1d		       0e		      .byte.b	%00001110
   7643  4c1e		       1f		      .byte.b	%00011111
   7644  4c1f		       bd		      .byte.b	%10111101
   7645  4c20		       f9		      .byte.b	%11111001
   7646  4c21		       9e		      .byte.b	%10011110
   7647  4c22		       08		      .byte.b	%00001000
   7648  4c23		       7c		      .byte.b	%01111100
   7649  4c24				  -	      if	(<*) > (<(*+7))
   7650  4c24				  -	      repeat	($100-<*)
   7651  4c24				  -	      .byte	0
   7652  4c24				  -	      repend
   7653  4c24					      endif
   7654  4c24				   player2then_1
   7655  4c24		       1b		      .byte.b	%00011011
   7656  4c25		       0e		      .byte.b	%00001110
   7657  4c26		       1f		      .byte.b	%00011111
   7658  4c27		       bd		      .byte.b	%10111101
   7659  4c28		       f9		      .byte.b	%11111001
   7660  4c29		       9e		      .byte.b	%10011110
   7661  4c2a		       08		      .byte.b	%00001000
   7662  4c2b		       1f		      .byte.b	%00011111
   7663  4c2c				  -	      if	(<*) > (<(*+6))
   7664  4c2c				  -	      repeat	($100-<*)
   7665  4c2c				  -	      .byte	0
   7666  4c2c				  -	      repend
   7667  4c2c					      endif
   7668  4c2c				   player3then_0
   7669  4c2c		       55		      .byte.b	%01010101
   7670  4c2d		       aa		      .byte.b	%10101010
   7671  4c2e		       ff		      .byte.b	%11111111
   7672  4c2f		       3c		      .byte.b	%00111100
   7673  4c30		       18		      .byte.b	%00011000
   7674  4c31		       08		      .byte.b	%00001000
   7675  4c32		       04		      .byte.b	%00000100
   7676  4c33				  -	      if	(<*) > (<(*+6))
   7677  4c33				  -	      repeat	($100-<*)
   7678  4c33				  -	      .byte	0
   7679  4c33				  -	      repend
   7680  4c33					      endif
   7681  4c33				   player4then_0
   7682  4c33		       aa		      .byte.b	%10101010
   7683  4c34		       55		      .byte.b	%01010101
   7684  4c35		       ff		      .byte.b	%11111111
   7685  4c36		       3c		      .byte.b	%00111100
   7686  4c37		       18		      .byte.b	%00011000
   7687  4c38		       08		      .byte.b	%00001000
   7688  4c39		       04		      .byte.b	%00000100
   7689  4c3a				  -	      if	(<*) > (<(*+11))
   7690  4c3a				  -	      repeat	($100-<*)
   7691  4c3a				  -	      .byte	0
   7692  4c3a				  -	      repend
   7693  4c3a					      endif
   7694  4c3a				   playerL0313_0
   7695  4c3a		       a0		      .byte.b	%10100000
   7696  4c3b		       40		      .byte.b	%01000000
   7697  4c3c		       e0		      .byte.b	%11100000
   7698  4c3d		       a0		      .byte.b	%10100000
   7699  4c3e		       40		      .byte.b	%01000000
   7700  4c3f		       00		      .byte.b	%00000000
   7701  4c40		       00		      .byte.b	%00000000
   7702  4c41		       05		      .byte.b	%00000101
   7703  4c42		       02		      .byte.b	%00000010
   7704  4c43		       07		      .byte.b	%00000111
   7705  4c44		       05		      .byte.b	%00000101
   7706  4c45		       02		      .byte.b	%00000010
   7707  4c46				  -	      if	(<*) > (<(*+24))
   7708  4c46				  -	      repeat	($100-<*)
   7709  4c46				  -	      .byte	0
   7710  4c46				  -	      repend
   7711  4c46					      endif
   7712  4c46				   playerL0315_0
   7713  4c46		       3c		      .byte.b	%00111100
   7714  4c47		       20		      .byte.b	%00100000
   7715  4c48		       20		      .byte.b	%00100000
   7716  4c49		       20		      .byte.b	%00100000
   7717  4c4a		       20		      .byte.b	%00100000
   7718  4c4b		       00		      .byte.b	%00000000
   7719  4c4c		       3c		      .byte.b	%00111100
   7720  4c4d		       20		      .byte.b	%00100000
   7721  4c4e		       38		      .byte.b	%00111000
   7722  4c4f		       20		      .byte.b	%00100000
   7723  4c50		       3c		      .byte.b	%00111100
   7724  4c51		       00		      .byte.b	%00000000
   7725  4c52		       18		      .byte.b	%00011000
   7726  4c53		       24		      .byte.b	%00100100
   7727  4c54		       24		      .byte.b	%00100100
   7728  4c55		       24		      .byte.b	%00100100
   7729  4c56		       24		      .byte.b	%00100100
   7730  4c57		       00		      .byte.b	%00000000
   7731  4c58		       20		      .byte.b	%00100000
   7732  4c59		       20		      .byte.b	%00100000
   7733  4c5a		       38		      .byte.b	%00111000
   7734  4c5b		       20		      .byte.b	%00100000
   7735  4c5c		       bd		      .byte.b	%10111101
   7736  4c5d		       81		      .byte.b	%10000001
   7737  4c5e		       ff		      .byte.b	%11111111
   7738  4c5f				  -	      if	(<*) > (<(*+3))
   7739  4c5f				  -	      repeat	($100-<*)
   7740  4c5f				  -	      .byte	0
   7741  4c5f				  -	      repend
   7742  4c5f					      endif
   7743  4c5f				   player5then_0
   7744  4c5f		       a6		      .byte.b	%10100110
   7745  4c60		       42		      .byte.b	%01000010
   7746  4c61		       63		      .byte.b	%01100011
   7747  4c62		       42		      .byte.b	%01000010
   7748  4c63				  -	      if	(<*) > (<(*+3))
   7749  4c63				  -	      repeat	($100-<*)
   7750  4c63				  -	      .byte	0
   7751  4c63				  -	      repend
   7752  4c63					      endif
   7753  4c63				   player6then_0
   7754  4c63		       c5		      .byte.b	%11000101
   7755  4c64		       42		      .byte.b	%01000010
   7756  4c65		       63		      .byte.b	%01100011
   7757  4c66		       42		      .byte.b	%01000010
   7758  4c67				  -	      if	(<*) > (<(*+7))
   7759  4c67				  -	      repeat	($100-<*)
   7760  4c67				  -	      .byte	0
   7761  4c67				  -	      repend
   7762  4c67					      endif
   7763  4c67				   playerL0521_1
   7764  4c67		       00		      .byte.b	%00000000
   7765  4c68		       00		      .byte.b	%00000000
   7766  4c69		       28		      .byte.b	%00101000
   7767  4c6a		       10		      .byte.b	%00010000
   7768  4c6b		       24		      .byte.b	%00100100
   7769  4c6c		       00		      .byte.b	%00000000
   7770  4c6d		       00		      .byte.b	%00000000
   7771  4c6e		       00		      .byte.b	%00000000
   7772  4c6f				  -	      if	(<*) > (<(*+7))
   7773  4c6f				  -	      repeat	($100-<*)
   7774  4c6f				  -	      .byte	0
   7775  4c6f				  -	      repend
   7776  4c6f					      endif
   7777  4c6f				   playerL0523_1
   7778  4c6f		       00		      .byte.b	%00000000
   7779  4c70		       42		      .byte.b	%01000010
   7780  4c71		       40		      .byte.b	%01000000
   7781  4c72		       18		      .byte.b	%00011000
   7782  4c73		       00		      .byte.b	%00000000
   7783  4c74		       42		      .byte.b	%01000010
   7784  4c75		       00		      .byte.b	%00000000
   7785  4c76		       00		      .byte.b	%00000000
   7786  4c77				  -	      if	(<*) > (<(*+7))
   7787  4c77				  -	      repeat	($100-<*)
   7788  4c77				  -	      .byte	0
   7789  4c77				  -	      repend
   7790  4c77					      endif
   7791  4c77				   playerL0525_1
   7792  4c77		       89		      .byte.b	%10001001
   7793  4c78		       52		      .byte.b	%01010010
   7794  4c79		       00		      .byte.b	%00000000
   7795  4c7a		       44		      .byte.b	%01000100
   7796  4c7b		       10		      .byte.b	%00010000
   7797  4c7c		       42		      .byte.b	%01000010
   7798  4c7d		       81		      .byte.b	%10000001
   7799  4c7e		       00		      .byte.b	%00000000
   7800  4c7f				  -	      if	(<*) > (<(*+7))
   7801  4c7f				  -	      repeat	($100-<*)
   7802  4c7f				  -	      .byte	0
   7803  4c7f				  -	      repend
   7804  4c7f					      endif
   7805  4c7f				   playerL0527_1
   7806  4c7f		       91		      .byte.b	%10010001
   7807  4c80		       42		      .byte.b	%01000010
   7808  4c81		       50		      .byte.b	%01010000
   7809  4c82		       81		      .byte.b	%10000001
   7810  4c83		       00		      .byte.b	%00000000
   7811  4c84		       00		      .byte.b	%00000000
   7812  4c85		       10		      .byte.b	%00010000
   7813  4c86		       91		      .byte.b	%10010001
   7814  4c87					      if	ECHOFIRST
      746 bytes of ROM space left in bank 4
   7815  4c87					      echo	"    ",[(scoretable - *)]d , "bytes of ROM space left in bank 4")
   7816  4c87					      endif
   7817  4c87		       00 01	   ECHOFIRST  =	1
   7818  4c87
   7819  4c87
   7820  4c87							; Provided under the CC0 license. See the included LICENSE.txt for details.
   7821  4c87
   7822  4c87							; feel free to modify the score graphics - just keep each digit 8 high
   7823  4c87							; and keep the conditional compilation stuff intact
   7824  4c87				  -	      ifconst	ROM2k
   7825  4c87				  -	      ifconst	PlusROM_functions
   7826  4c87				  -	      ORG	$F7AC-16
   7827  4c87				  -	      else
   7828  4c87				  -	      ORG	$F7AC-8
   7829  4c87				  -	      endif
   7830  4c87					      else
   7831  4c87					      ifconst	bankswitch
   7832  4c87				  -	      if	bankswitch == 8
   7833  4c87				  -	      ORG	$2F94-bscode_length
   7834  4c87				  -	      RORG	$FF94-bscode_length
   7835  4c87					      endif
   7836  4c87					      if	bankswitch == 16
   7837  4f71					      ORG	$4F94-bscode_length
   7838  4f71					      RORG	$FF94-bscode_length
   7839  4f71					      endif
   7840  4f71				  -	      if	bankswitch == 32
   7841  4f71				  -	      ORG	$8F94-bscode_length
   7842  4f71				  -	      RORG	$FF94-bscode_length
   7843  4f71					      endif
   7844  4f71				  -	      if	bankswitch == 64
   7845  4f71				  -	      ORG	$10F80-bscode_length
   7846  4f71				  -	      RORG	$1FF80-bscode_length
   7847  4f71					      endif
   7848  4f71				  -	      else
   7849  4f71				  -	      ifconst	PlusROM_functions
   7850  4f71				  -	      ORG	$FF98
   7851  4f71				  -	      else
   7852  4f71				  -	      ORG	$FF9C
   7853  4f71				  -	      endif
   7854  4f71					      endif
   7855  4f71					      endif
   7856  4f71
   7857  4f71							; font equates
   7858  4f71		       00 01	   .21stcentury =	1
   7859  4f71		       00 02	   alarmclock =	2
   7860  4f71		       00 03	   handwritten =	3
   7861  4f71		       00 04	   interrupted =	4
   7862  4f71		       00 05	   retroputer =	5
   7863  4f71		       00 06	   whimsey    =	6
   7864  4f71		       00 07	   tiny       =	7
   7865  4f71		       00 08	   hex	      =	8
   7866  4f71
   7867  4f71				  -	      ifconst	font
   7868  4f71				  -	      if	font == hex
   7869  4f71				  -	      ORG	. - 48
   7870  4f71				  -	      endif
   7871  4f71					      endif
   7872  4f71
   7873  4f71				   scoretable
   7874  4f71
   7875  4f71				  -	      ifconst	font
   7876  4f71				  -	      if	font == .21stcentury
   7877  4f71				  -	      include	"score_graphics.asm.21stcentury"
   7878  4f71				  -	      endif
   7879  4f71				  -	      if	font == alarmclock
   7880  4f71				  -	      include	"score_graphics.asm.alarmclock"
   7881  4f71				  -	      endif
   7882  4f71				  -	      if	font == handwritten
   7883  4f71				  -	      include	"score_graphics.asm.handwritten"
   7884  4f71				  -	      endif
   7885  4f71				  -	      if	font == interrupted
   7886  4f71				  -	      include	"score_graphics.asm.interrupted"
   7887  4f71				  -	      endif
   7888  4f71				  -	      if	font == retroputer
   7889  4f71				  -	      include	"score_graphics.asm.retroputer"
   7890  4f71				  -	      endif
   7891  4f71				  -	      if	font == whimsey
   7892  4f71				  -	      include	"score_graphics.asm.whimsey"
   7893  4f71				  -	      endif
   7894  4f71				  -	      if	font == tiny
   7895  4f71				  -	      include	"score_graphics.asm.tiny"
   7896  4f71				  -	      endif
   7897  4f71				  -	      if	font == hex
   7898  4f71				  -	      include	"score_graphics.asm.hex"
   7899  4f71				  -	      endif
   7900  4f71					      else		; default font
   7901  4f71
   7902  4f71		       3c		      .byte.b	%00111100
   7903  4f72		       66		      .byte.b	%01100110
   7904  4f73		       66		      .byte.b	%01100110
   7905  4f74		       66		      .byte.b	%01100110
   7906  4f75		       66		      .byte.b	%01100110
   7907  4f76		       66		      .byte.b	%01100110
   7908  4f77		       66		      .byte.b	%01100110
   7909  4f78		       3c		      .byte.b	%00111100
   7910  4f79
   7911  4f79		       7e		      .byte.b	%01111110
   7912  4f7a		       18		      .byte.b	%00011000
   7913  4f7b		       18		      .byte.b	%00011000
   7914  4f7c		       18		      .byte.b	%00011000
   7915  4f7d		       18		      .byte.b	%00011000
   7916  4f7e		       38		      .byte.b	%00111000
   7917  4f7f		       18		      .byte.b	%00011000
   7918  4f80		       08		      .byte.b	%00001000
   7919  4f81
   7920  4f81		       7e		      .byte.b	%01111110
   7921  4f82		       60		      .byte.b	%01100000
   7922  4f83		       60		      .byte.b	%01100000
   7923  4f84		       3c		      .byte.b	%00111100
   7924  4f85		       06		      .byte.b	%00000110
   7925  4f86		       06		      .byte.b	%00000110
   7926  4f87		       46		      .byte.b	%01000110
   7927  4f88		       3c		      .byte.b	%00111100
   7928  4f89
   7929  4f89		       3c		      .byte.b	%00111100
   7930  4f8a		       46		      .byte.b	%01000110
   7931  4f8b		       06		      .byte.b	%00000110
   7932  4f8c		       06		      .byte.b	%00000110
   7933  4f8d		       1c		      .byte.b	%00011100
   7934  4f8e		       06		      .byte.b	%00000110
   7935  4f8f		       46		      .byte.b	%01000110
   7936  4f90		       3c		      .byte.b	%00111100
   7937  4f91
   7938  4f91		       0c		      .byte.b	%00001100
   7939  4f92		       0c		      .byte.b	%00001100
   7940  4f93		       7e		      .byte.b	%01111110
   7941  4f94		       4c		      .byte.b	%01001100
   7942  4f95		       4c		      .byte.b	%01001100
   7943  4f96		       2c		      .byte.b	%00101100
   7944  4f97		       1c		      .byte.b	%00011100
   7945  4f98		       0c		      .byte.b	%00001100
   7946  4f99
   7947  4f99		       3c		      .byte.b	%00111100
   7948  4f9a		       46		      .byte.b	%01000110
   7949  4f9b		       06		      .byte.b	%00000110
   7950  4f9c		       06		      .byte.b	%00000110
   7951  4f9d		       3c		      .byte.b	%00111100
   7952  4f9e		       60		      .byte.b	%01100000
   7953  4f9f		       60		      .byte.b	%01100000
   7954  4fa0		       7e		      .byte.b	%01111110
   7955  4fa1
   7956  4fa1		       3c		      .byte.b	%00111100
   7957  4fa2		       66		      .byte.b	%01100110
   7958  4fa3		       66		      .byte.b	%01100110
   7959  4fa4		       66		      .byte.b	%01100110
   7960  4fa5		       7c		      .byte.b	%01111100
   7961  4fa6		       60		      .byte.b	%01100000
   7962  4fa7		       62		      .byte.b	%01100010
   7963  4fa8		       3c		      .byte.b	%00111100
   7964  4fa9
   7965  4fa9		       30		      .byte.b	%00110000
   7966  4faa		       30		      .byte.b	%00110000
   7967  4fab		       30		      .byte.b	%00110000
   7968  4fac		       18		      .byte.b	%00011000
   7969  4fad		       0c		      .byte.b	%00001100
   7970  4fae		       06		      .byte.b	%00000110
   7971  4faf		       42		      .byte.b	%01000010
   7972  4fb0		       3e		      .byte.b	%00111110
   7973  4fb1
   7974  4fb1		       3c		      .byte.b	%00111100
   7975  4fb2		       66		      .byte.b	%01100110
   7976  4fb3		       66		      .byte.b	%01100110
   7977  4fb4		       66		      .byte.b	%01100110
   7978  4fb5		       3c		      .byte.b	%00111100
   7979  4fb6		       66		      .byte.b	%01100110
   7980  4fb7		       66		      .byte.b	%01100110
   7981  4fb8		       3c		      .byte.b	%00111100
   7982  4fb9
   7983  4fb9		       3c		      .byte.b	%00111100
   7984  4fba		       46		      .byte.b	%01000110
   7985  4fbb		       06		      .byte.b	%00000110
   7986  4fbc		       3e		      .byte.b	%00111110
   7987  4fbd		       66		      .byte.b	%01100110
   7988  4fbe		       66		      .byte.b	%01100110
   7989  4fbf		       66		      .byte.b	%01100110
   7990  4fc0		       3c		      .byte.b	%00111100
   7991  4fc1
   7992  4fc1					      ifnconst	DPC_kernel_options
   7993  4fc1
   7994  4fc1		       00		      .byte.b	%00000000
   7995  4fc2		       00		      .byte.b	%00000000
   7996  4fc3		       00		      .byte.b	%00000000
   7997  4fc4		       00		      .byte.b	%00000000
   7998  4fc5		       00		      .byte.b	%00000000
   7999  4fc6		       00		      .byte.b	%00000000
   8000  4fc7		       00		      .byte.b	%00000000
   8001  4fc8		       00		      .byte.b	%00000000
   8002  4fc9
   8003  4fc9					      endif
   8004  4fc9
   8005  4fc9					      endif
   8006  4fc9
   8007  4fc9				  -	      ifconst	ROM2k
   8008  4fc9				  -	      ifconst	PlusROM_functions
   8009  4fc9				  -	      ORG	$F7F0
   8010  4fc9				  -	      .byte	0	; WriteToBuffer
   8011  4fc9				  -	      .byte	0	; WriteSendBuffer
   8012  4fc9				  -	      .byte	0	; ReceiveBuffer
   8013  4fc9				  -	      .byte	$ff	; ReceiveBufferSize (none zero for detection of PlusROM support)
   8014  4fc9				  -	      ORG	$F7FA
   8015  4fc9				  -	      else
   8016  4fc9				  -	      ORG	$F7FC
   8017  4fc9				  -	      endif
   8018  4fc9					      else
   8019  4fc9					      ifconst	bankswitch
   8020  4fc9				  -	      if	bankswitch == 8
   8021  4fc9				  -	      ORG	$2FF4-bscode_length
   8022  4fc9				  -	      RORG	$FFF4-bscode_length
   8023  4fc9					      endif
   8024  4fc9					      if	bankswitch == 16
   8025  4fd1					      ORG	$4FF4-bscode_length
   8026  4fd1					      RORG	$FFF4-bscode_length
   8027  4fd1					      endif
   8028  4fd1				  -	      if	bankswitch == 32
   8029  4fd1				  -	      ORG	$8FF4-bscode_length
   8030  4fd1				  -	      RORG	$FFF4-bscode_length
   8031  4fd1					      endif
   8032  4fd1				  -	      if	bankswitch == 64
   8033  4fd1				  -	      ORG	$10FE0-bscode_length
   8034  4fd1				  -	      RORG	$1FFE0-bscode_length
   8035  4fd1					      endif
   8036  4fd1				  -	      else
   8037  4fd1				  -	      ifconst	PlusROM_functions
   8038  4fd1				  -	      ORG	$FFF0
   8039  4fd1				  -	      .byte	0	; WriteToBuffer
   8040  4fd1				  -	      .byte	0	; WriteSendBuffer
   8041  4fd1				  -	      .byte	0	; ReceiveBuffer
   8042  4fd1				  -	      .byte	$ff	; ReceiveBufferSize (none zero for detection of PlusROM support)
   8043  4fd1				  -	      ORG	$FFFA
   8044  4fd1				  -	      else
   8045  4fd1				  -	      ORG	$FFFC
   8046  4fd1				  -	      endif
   8047  4fd1					      endif
   8048  4fd1					      endif
   8049  4fd1							; Provided under the CC0 license. See the included LICENSE.txt for details.
   8050  4fd1
   8051  4fd1							; every bank has this stuff at the same place
   8052  4fd1							; this code can switch to/from any bank at any entry point
   8053  4fd1							; and can preserve register values
   8054  4fd1							; note: lines not starting with a space are not placed in all banks
   8055  4fd1							;
   8056  4fd1							; line below tells the compiler how long this is - do not remove
   8057  4fd1							;size=35
   8058  4fd1
   8059  4fd1				   begin_bscode
   8060  4fd1		       a2 ff		      ldx	#$ff
   8061  4fd3				  -	      ifconst	FASTFETCH	; using DPC+
   8062  4fd3				  -	      stx	FASTFETCH
   8063  4fd3					      endif
   8064  4fd3		       9a		      txs
   8065  4fd4				  -	      if	bankswitch == 64
   8066  4fd4				  -	      lda	#(((>(start-1)) & $0F) | $F0)
   8067  4fd4					      else
   8068  4fd4		       a9 f2		      lda	#>(start-1)
   8069  4fd6					      endif
   8070  4fd6		       48		      pha
   8071  4fd7		       a9 b0		      lda	#<(start-1)
   8072  4fd9		       48		      pha
   8073  4fda
   8074  4fda				   BS_return
   8075  4fda		       48		      pha
   8076  4fdb		       8a		      txa
   8077  4fdc		       48		      pha
   8078  4fdd		       ba		      tsx
   8079  4fde
   8080  4fde					      if	bankswitch != 64
   8081  4fde		       b5 04		      lda	4,x	; get high byte of return address
   8082  4fe0
   8083  4fe0		       2a		      rol
   8084  4fe1		       2a		      rol
   8085  4fe2		       2a		      rol
   8086  4fe3		       2a		      rol
   8087  4fe4		       29 03		      and	#bs_mask	;1 3 or 7 for F8/F6/F4
   8088  4fe6		       aa		      tax
   8089  4fe7		       e8		      inx
   8090  4fe8				  -	      else
   8091  4fe8				  -	      lda	4,x	; get high byte of return address
   8092  4fe8				  -	      tay
   8093  4fe8				  -	      ora	#$10	; change our bank nibble into a valid rom mirror
   8094  4fe8				  -	      sta	4,x
   8095  4fe8				  -	      tya
   8096  4fe8				  -	      lsr
   8097  4fe8				  -	      lsr
   8098  4fe8				  -	      lsr
   8099  4fe8				  -	      lsr
   8100  4fe8				  -	      tax
   8101  4fe8				  -	      inx
   8102  4fe8					      endif
   8103  4fe8
   8104  4fe8				   BS_jsr
   8105  4fe8		       bd f5 1f 	      lda	bankswitch_hotspot-1,x
   8106  4feb		       68		      pla
   8107  4fec		       aa		      tax
   8108  4fed		       68		      pla
   8109  4fee		       60		      rts
   8110  4fef				  -	      if	((* & $1FFF) > ((bankswitch_hotspot & $1FFF) - 1))
   8111  4fef				  -	      echo	"WARNING: size parameter in banksw.asm too small - the program probably will not work."
   8112  4fef				  -	      echo	"Change to",[(*-begin_bscode+1)&$FF]d,"and try again."
   8113  4fef					      endif
   8114  4fef							; Provided under the CC0 license. See the included LICENSE.txt for details.
   8115  4fef
   8116  4fef					      ifconst	bankswitch
   8117  4fef				  -	      if	bankswitch == 8
   8118  4fef				  -	      ifconst	PlusROM_functions
   8119  4fef				  -	      ORG	$2FF0
   8120  4fef				  -	      RORG	$FFF0
   8121  4fef				  -	      .byte	0	; WriteToBuffer
   8122  4fef				  -	      .byte	0	; WriteSendBuffer
   8123  4fef				  -	      .byte	0	; ReceiveBuffer
   8124  4fef				  -	      .byte	$ff	; ReceiveBufferSize (none zero for detection of PlusROM support)
   8125  4fef				  -	      ORG	$2FFA
   8126  4fef				  -	      RORG	$FFFA
   8127  4fef				  -	      .word	(PlusROM_API)
   8128  4fef				  -	      else
   8129  4fef				  -	      ORG	$2FFC
   8130  4fef				  -	      RORG	$FFFC
   8131  4fef				  -	      endif
   8132  4fef					      endif
   8133  4fef					      if	bankswitch == 16
   8134  4fef					      ifconst	PlusROM_functions
   8135  4ff0					      ORG	$4FF0
   8136  4ff0					      RORG	$FFF0
   8137  4ff0		       00		      .byte.b	0	; WriteToBuffer
   8138  4ff1		       00		      .byte.b	0	; WriteSendBuffer
   8139  4ff2		       00		      .byte.b	0	; ReceiveBuffer
   8140  4ff3		       ff		      .byte.b	$ff	; ReceiveBufferSize (none zero for detection of PlusROM support)
   8141  4ffa					      ORG	$4FFA
   8142  4ffa					      RORG	$FFFA
   8143  4ffa		       fe 4b		      .word.w	(PlusROM_API)
   8144  4ffc				  -	      else
   8145  4ffc				  -	      ORG	$4FFC
   8146  4ffc				  -	      RORG	$FFFC
   8147  4ffc					      endif
   8148  4ffc					      endif
   8149  4ffc				  -	      if	bankswitch == 32
   8150  4ffc				  -	      ifconst	PlusROM_functions
   8151  4ffc				  -	      ORG	$8FF0
   8152  4ffc				  -	      RORG	$FFF0
   8153  4ffc				  -	      .byte	0	; WriteToBuffer
   8154  4ffc				  -	      .byte	0	; WriteSendBuffer
   8155  4ffc				  -	      .byte	0	; ReceiveBuffer
   8156  4ffc				  -	      .byte	$ff	; ReceiveBufferSize (none zero for detection of PlusROM support)
   8157  4ffc				  -	      ORG	$8FFA
   8158  4ffc				  -	      RORG	$FFFA
   8159  4ffc				  -	      .word	(PlusROM_API)
   8160  4ffc				  -	      else
   8161  4ffc				  -	      ORG	$8FFC
   8162  4ffc				  -	      RORG	$FFFC
   8163  4ffc				  -	      endif
   8164  4ffc					      endif
   8165  4ffc				  -	      if	bankswitch == 64
   8166  4ffc				  -	      ORG	$10FF0
   8167  4ffc				  -	      RORG	$1FFF0
   8168  4ffc				  -	      lda	$ffe0	; we use wasted space to assist stella with EF format auto-detection
   8169  4ffc				  -	      ORG	$10FF8
   8170  4ffc				  -	      RORG	$1FFF8
   8171  4ffc				  -	      ifconst	superchip
   8172  4ffc				  -	      .byte	"E","F","S","C"
   8173  4ffc				  -	      else
   8174  4ffc				  -	      .byte	"E","F","E","F"
   8175  4ffc				  -	      endif
   8176  4ffc				  -	      ORG	$10FFC
   8177  4ffc				  -	      RORG	$1FFFC
   8178  4ffc					      endif
   8179  4ffc				  -	      else
   8180  4ffc				  -	      ifconst	ROM2k
   8181  4ffc				  -	      ifconst	PlusROM_functions
   8182  4ffc				  -	      ORG	$F7FA
   8183  4ffc				  -	      .word	(PlusROM_API)
   8184  4ffc				  -	      else
   8185  4ffc				  -	      ORG	$F7FC
   8186  4ffc				  -	      endif
   8187  4ffc				  -	      else
   8188  4ffc				  -	      ifconst	PlusROM_functions
   8189  4ffc				  -	      ORG	$FFFA
   8190  4ffc				  -	      .word	(PlusROM_API)
   8191  4ffc				  -	      else
   8192  4ffc				  -	      ORG	$FFFC
   8193  4ffc				  -	      endif
   8194  4ffc				  -	      endif
   8195  4ffc					      endif
   8196  4ffc		       b1 f2		      .word.w	(start & $ffff)
   8197  4ffe		       b1 f2		      .word.w	(start & $ffff)
