------- FILE d:\Firmaplus\Firmaplus_intern\Atari\PlusROM\Projekte-batariBasic\CaveApocalypse\C.A.V.E. Apocalypse.bas.asm LEVEL 1 PASS 3
      1  3000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  3000 ????
      3  3000 ????				      processor	6502
------- FILE vcs.h LEVEL 2 PASS 3
      0  3000 ????				      include	"vcs.h"
      1  3000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  3000 ????
      3  3000 ????						; VCS.H
      4  3000 ????						; Version 1.05, 13/November/2003
      5  3000 ????
      6  3000 ????	       00 69	   VERSION_VCS =	105
      7  3000 ????
      8  3000 ????						; THIS IS A PRELIMINARY RELEASE OF *THE* "STANDARD" VCS.H
      9  3000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
     10  3000 ????						; PLEASE DO *NOT* REDISTRIBUTE THIS FILE!
     11  3000 ????						;
     12  3000 ????						; This file defines hardware registers and memory mapping for the
     13  3000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     14  3000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     15  3000 ????						; available at at http://www.atari2600.org/dasm
     16  3000 ????						;
     17  3000 ????						; Many thanks to the original author(s) of this file, and to everyone who has
     18  3000 ????						; contributed to understanding the Atari 2600.  If you take issue with the
     19  3000 ????						; contents, or naming of registers, please write to me (atari2600@taswegian.com)
     20  3000 ????						; with your views.  Please contribute, if you think you can improve this
     21  3000 ????						; file!
     22  3000 ????						;
     23  3000 ????						; Latest Revisions...
     24  3000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     25  3000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     26  3000 ????						;			    This will allow conditional code to verify VCS.H being
     27  3000 ????						;			    used for code assembly.
     28  3000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     29  3000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     30  3000 ????						;			 mirrored reading/writing differences.	This is more a 
     31  3000 ????						;			 readability issue, and binary compatibility with disassembled
     32  3000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     33  3000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     34  3000 ????						;			 which was broken by the use of segments in this file, as
     35  3000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     36  3000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     37  3000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     38  3000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     39  3000 ????						;						   it is safe to leave it undefined, and the base address will
     40  3000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     41  3000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     42  3000 ????						;			  - register definitions are now generated through assignment
     43  3000 ????						;			    in uninitialised segments.	This allows a changeable base
     44  3000 ????						;			    address architecture.
     45  3000 ????						; 1.0	22/MAR/2003		Initial release
     46  3000 ????
     47  3000 ????
     48  3000 ????						;-------------------------------------------------------------------------------
     49  3000 ????
     50  3000 ????						; TIA_BASE_ADDRESS
     51  3000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     52  3000 ????						; Normally 0, the base address should (externally, before including this file)
     53  3000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     54  3000 ????						; The reason is that this bankswitching scheme treats any access to locations
     55  3000 ????						; < $40 as a bankswitch.
     56  3000 ????
     57  3000 ????			  -	      IFNCONST	TIA_BASE_ADDRESS
     58  3000 ????			  -TIA_BASE_ADDRESS =	0
     59  3000 ????				      ENDIF
     60  3000 ????
     61  3000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     62  3000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     63  3000 ????						; *OR* by declaring the label before including this file, eg:
     64  3000 ????						; TIA_BASE_ADDRESS = $40
     65  3000 ????						;   include "vcs.h"
     66  3000 ????
     67  3000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     68  3000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     69  3000 ????						; for the mirrored ROM hardware registers.
     70  3000 ????
     71  3000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     72  3000 ????						; using the -D command-line switch, as required.  If the addresses are not defined, 
     73  3000 ????						; they defaut to the TIA_BASE_ADDRESS.
     74  3000 ????
     75  3000 ????			  -	      IFNCONST	TIA_BASE_READ_ADDRESS
     76  3000 ????			  -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     77  3000 ????				      ENDIF
     78  3000 ????
     79  3000 ????			  -	      IFNCONST	TIA_BASE_WRITE_ADDRESS
     80  3000 ????			  -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     81  3000 ????				      ENDIF
     82  3000 ????
     83  3000 ????						;-------------------------------------------------------------------------------
     84  3000 ????
     85 U002d ????				      SEG.U	TIA_REGISTERS_WRITE
     86 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     87 U0000
     88 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     89 U0000
     90 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     91 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     92 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     93 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     94 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     95 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     96 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     97 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     98 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     99 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
    100 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
    101 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    102 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    103 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    104 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    105 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    106 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    107 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    108 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    109 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    110 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    111 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    112 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    113 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    114 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    115 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    116 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    117 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    118 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    119 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    120 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    121 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    122 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    123 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    124 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    125 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    126 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    127 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    128 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    129 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    130 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    131 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    132 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    133 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    134 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    135 U002d
    136 U002d							;-------------------------------------------------------------------------------
    137 U002d
    138 U000e ????				      SEG.U	TIA_REGISTERS_READ
    139 U0000					      ORG	TIA_BASE_READ_ADDRESS
    140 U0000
    141 U0000							;											bit 7	 bit 6
    142 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    143 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    144 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    145 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    146 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    147 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    148 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    149 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    150 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    151 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    152 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    153 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    154 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    155 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    156 U000e
    157 U000e							;-------------------------------------------------------------------------------
    158 U000e
    159 U0298 ????				      SEG.U	RIOT
    160 U0280					      ORG	$280
    161 U0280
    162 U0280							; RIOT MEMORY MAP
    163 U0280
    164 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    165 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    166 U0281
    167 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    168 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    169 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    170 U0284		       00	   INTIM      ds	1	; $284		Timer output
    171 U0285
    172 U0285		       00	   TIMINT     ds	1	; $285
    173 U0286
    174 U0286							; Unused/undefined registers ($285-$294)
    175 U0286
    176 U0286		       00		      ds	1	; $286
    177 U0287		       00		      ds	1	; $287
    178 U0288		       00		      ds	1	; $288
    179 U0289		       00		      ds	1	; $289
    180 U028a		       00		      ds	1	; $28A
    181 U028b		       00		      ds	1	; $28B
    182 U028c		       00		      ds	1	; $28C
    183 U028d		       00		      ds	1	; $28D
    184 U028e		       00		      ds	1	; $28E
    185 U028f		       00		      ds	1	; $28F
    186 U0290		       00		      ds	1	; $290
    187 U0291		       00		      ds	1	; $291
    188 U0292		       00		      ds	1	; $292
    189 U0293		       00		      ds	1	; $293
    190 U0294
    191 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    192 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    193 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    194 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    195 U0298
    196 U0298							;-------------------------------------------------------------------------------
    197 U0298							; The following required for back-compatibility with code which does not use
    198 U0298							; segments.
    199 U0298
    200  3000 ????				      SEG
    201  3000 ????
    202  3000 ????						; EOF
------- FILE d:\Firmaplus\Firmaplus_intern\Atari\PlusROM\Projekte-batariBasic\CaveApocalypse\C.A.V.E. Apocalypse.bas.asm
------- FILE macro.h LEVEL 2 PASS 3
      0  3000 ????				      include	"macro.h"
      1  3000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  3000 ????
      3  3000 ????						; MACRO.H
      4  3000 ????						; Version 1.05, 13/NOVEMBER/2003
      5  3000 ????
      6  3000 ????	       00 69	   VERSION_MACRO =	105
      7  3000 ????
      8  3000 ????						;
      9  3000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
     10  3000 ????						; PLEASE DO *NOT* REDISTRIBUTE MODIFIED VERSIONS OF THIS FILE!
     11  3000 ????						;
     12  3000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     13  3000 ????						; It is distributed as a companion machine-specific support package
     14  3000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     15  3000 ????						; available at at http://www.atari2600.org/dasm
     16  3000 ????						;
     17  3000 ????						; Many thanks to the people who have contributed.  If you take issue with the
     18  3000 ????						; contents, or would like to add something, please write to me
     19  3000 ????						; (atari2600@taswegian.com) with your contribution.
     20  3000 ????						;
     21  3000 ????						; Latest Revisions...
     22  3000 ????						;
     23  3000 ????						; 1.05  14/NOV/2003	  - Added VERSION_MACRO equate (which will reflect 100x version #)
     24  3000 ????						;			    This will allow conditional code to verify MACRO.H being
     25  3000 ????						;			    used for code assembly.
     26  3000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     27  3000 ????						;
     28  3000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     29  3000 ????						;
     30  3000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     31  3000 ????						;			   (standardised macro for vertical synch code)
     32  3000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added. 
     33  3000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     34  3000 ????						; 1.0	22/MAR/2003		Initial release
     35  3000 ????
     36  3000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage, 
     37  3000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     38  3000 ????						;   If you do not allow illegal opcode usage, you must include this file 
     39  3000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     40  3000 ????						;   registers and require them to be defined first).
     41  3000 ????
     42  3000 ????						; Available macros...
     43  3000 ????						;   SLEEP n		 - sleep for n cycles
     44  3000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     45  3000 ????						;   CLEAN_START	 - set machine to known state on startup
     46  3000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     47  3000 ????
     48  3000 ????						;-------------------------------------------------------------------------------
     49  3000 ????						; SLEEP duration
     50  3000 ????						; Original author: Thomas Jentzsch
     51  3000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     52  3000 ????						; useful for code where precise timing is required.
     53  3000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     54  3000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     55  3000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     56  3000 ????
     57  3000 ????				      MAC	sleep
     58  3000 ????			   .CYCLES    SET	{1}
     59  3000 ????
     60  3000 ????				      IF	.CYCLES < 2
     61  3000 ????				      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     62  3000 ????				      ERR
     63  3000 ????				      ENDIF
     64  3000 ????
     65  3000 ????				      IF	.CYCLES & 1
     66  3000 ????				      IFNCONST	NO_ILLEGAL_OPCODES
     67  3000 ????				      nop	0
     68  3000 ????				      ELSE
     69  3000 ????				      bit	VSYNC
     70  3000 ????				      ENDIF
     71  3000 ????			   .CYCLES    SET	.CYCLES - 3
     72  3000 ????				      ENDIF
     73  3000 ????
     74  3000 ????				      REPEAT	.CYCLES / 2
     75  3000 ????				      nop
     76  3000 ????				      REPEND
     77  3000 ????				      ENDM		;usage: SLEEP n (n>1)
     78  3000 ????
     79  3000 ????						;-------------------------------------------------------------------------------
     80  3000 ????						; VERTICAL_SYNC
     81  3000 ????						; Original author: Manuel Polik
     82  3000 ????						; Inserts the code required for a proper 3 scannline 
     83  3000 ????						; vertical sync sequence
     84  3000 ????						;
     85  3000 ????						; Note: Alters the accumulator
     86  3000 ????						;
     87  3000 ????						; IN:
     88  3000 ????						; OUT: A = 1
     89  3000 ????
     90  3000 ????				      MAC	vertical_sync
     91  3000 ????				      LDA	#$02	; A = VSYNC enable
     92  3000 ????				      STA	WSYNC	; Finish current line
     93  3000 ????				      STA	VSYNC	; Start vertical sync
     94  3000 ????				      STA	WSYNC	; 1st line vertical sync
     95  3000 ????				      STA	WSYNC	; 2nd line vertical sync
     96  3000 ????				      LSR		; A = VSYNC disable
     97  3000 ????				      STA	WSYNC	; 3rd line vertical sync
     98  3000 ????				      STA	VSYNC	; Stop vertical sync
     99  3000 ????				      ENDM
    100  3000 ????
    101  3000 ????						;-------------------------------------------------------------------------------
    102  3000 ????						; CLEAN_START
    103  3000 ????						; Original author: Andrew Davie
    104  3000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
    105  3000 ????						; Sets stack pointer to $FF, and all registers to 0
    106  3000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    107  3000 ????						; Use as very first section of code on boot (ie: at reset)
    108  3000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    109  3000 ????
    110  3000 ????				      MAC	clean_start
    111  3000 ????				      sei
    112  3000 ????				      cld
    113  3000 ????
    114  3000 ????				      ldx	#0
    115  3000 ????				      txa
    116  3000 ????				      tay
    117  3000 ????			   .CLEAR_STACK dex
    118  3000 ????				      txs
    119  3000 ????				      pha
    120  3000 ????				      bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    121  3000 ????
    122  3000 ????				      ENDM
    123  3000 ????
    124  3000 ????						;-------------------------------------------------------
    125  3000 ????						; SET_POINTER
    126  3000 ????						; Original author: Manuel Rotschkar
    127  3000 ????						;
    128  3000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    129  3000 ????						;
    130  3000 ????						; Usage: SET_POINTER pointer, address
    131  3000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    132  3000 ????						;
    133  3000 ????						; Note: Alters the accumulator, NZ flags
    134  3000 ????						; IN 1: 2 byte RAM location reserved for pointer
    135  3000 ????						; IN 2: absolute address
    136  3000 ????
    137  3000 ????				      MAC	set_pointer
    138  3000 ????			   .POINTER   SET	{1}
    139  3000 ????			   .ADDRESS   SET	{2}
    140  3000 ????
    141  3000 ????				      LDA	#<.ADDRESS	; Get Lowbyte of Address
    142  3000 ????				      STA	.POINTER	; Store in pointer
    143  3000 ????				      LDA	#>.ADDRESS	; Get Hibyte of Address
    144  3000 ????				      STA	.POINTER+1	; Store in pointer+1
    145  3000 ????
    146  3000 ????				      ENDM
    147  3000 ????
    148  3000 ????						; EOF
------- FILE d:\Firmaplus\Firmaplus_intern\Atari\PlusROM\Projekte-batariBasic\CaveApocalypse\C.A.V.E. Apocalypse.bas.asm
------- FILE 2600basic.h LEVEL 2 PASS 3
      0  3000 ????				      include	"2600basic.h"
      1  3000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  3000 ????
      3  3000 ????				      processor	6502
------- FILE vcs.h LEVEL 3 PASS 3
      0  3000 ????				      include	"vcs.h"
      1  3000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  3000 ????
      3  3000 ????						; VCS.H
      4  3000 ????						; Version 1.05, 13/November/2003
      5  3000 ????
      6  3000 ????	       00 69	   VERSION_VCS =	105
      7  3000 ????
      8  3000 ????						; THIS IS A PRELIMINARY RELEASE OF *THE* "STANDARD" VCS.H
      9  3000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
     10  3000 ????						; PLEASE DO *NOT* REDISTRIBUTE THIS FILE!
     11  3000 ????						;
     12  3000 ????						; This file defines hardware registers and memory mapping for the
     13  3000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     14  3000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     15  3000 ????						; available at at http://www.atari2600.org/dasm
     16  3000 ????						;
     17  3000 ????						; Many thanks to the original author(s) of this file, and to everyone who has
     18  3000 ????						; contributed to understanding the Atari 2600.  If you take issue with the
     19  3000 ????						; contents, or naming of registers, please write to me (atari2600@taswegian.com)
     20  3000 ????						; with your views.  Please contribute, if you think you can improve this
     21  3000 ????						; file!
     22  3000 ????						;
     23  3000 ????						; Latest Revisions...
     24  3000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     25  3000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     26  3000 ????						;			    This will allow conditional code to verify VCS.H being
     27  3000 ????						;			    used for code assembly.
     28  3000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     29  3000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     30  3000 ????						;			 mirrored reading/writing differences.	This is more a 
     31  3000 ????						;			 readability issue, and binary compatibility with disassembled
     32  3000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     33  3000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     34  3000 ????						;			 which was broken by the use of segments in this file, as
     35  3000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     36  3000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     37  3000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     38  3000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     39  3000 ????						;						   it is safe to leave it undefined, and the base address will
     40  3000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     41  3000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     42  3000 ????						;			  - register definitions are now generated through assignment
     43  3000 ????						;			    in uninitialised segments.	This allows a changeable base
     44  3000 ????						;			    address architecture.
     45  3000 ????						; 1.0	22/MAR/2003		Initial release
     46  3000 ????
     47  3000 ????
     48  3000 ????						;-------------------------------------------------------------------------------
     49  3000 ????
     50  3000 ????						; TIA_BASE_ADDRESS
     51  3000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     52  3000 ????						; Normally 0, the base address should (externally, before including this file)
     53  3000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     54  3000 ????						; The reason is that this bankswitching scheme treats any access to locations
     55  3000 ????						; < $40 as a bankswitch.
     56  3000 ????
     57  3000 ????			  -	      IFNCONST	TIA_BASE_ADDRESS
     58  3000 ????			  -TIA_BASE_ADDRESS =	0
     59  3000 ????				      ENDIF
     60  3000 ????
     61  3000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     62  3000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     63  3000 ????						; *OR* by declaring the label before including this file, eg:
     64  3000 ????						; TIA_BASE_ADDRESS = $40
     65  3000 ????						;   include "vcs.h"
     66  3000 ????
     67  3000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     68  3000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     69  3000 ????						; for the mirrored ROM hardware registers.
     70  3000 ????
     71  3000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     72  3000 ????						; using the -D command-line switch, as required.  If the addresses are not defined, 
     73  3000 ????						; they defaut to the TIA_BASE_ADDRESS.
     74  3000 ????
     75  3000 ????			  -	      IFNCONST	TIA_BASE_READ_ADDRESS
     76  3000 ????			  -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     77  3000 ????				      ENDIF
     78  3000 ????
     79  3000 ????			  -	      IFNCONST	TIA_BASE_WRITE_ADDRESS
     80  3000 ????			  -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     81  3000 ????				      ENDIF
     82  3000 ????
     83  3000 ????						;-------------------------------------------------------------------------------
     84  3000 ????
     85 U002d					      SEG.U	TIA_REGISTERS_WRITE
     86 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     87 U0000
     88 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     89 U0000
     90 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     91 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     92 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     93 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     94 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     95 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     96 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     97 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     98 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     99 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
    100 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
    101 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    102 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    103 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    104 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    105 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    106 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    107 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    108 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    109 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    110 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    111 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    112 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    113 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    114 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    115 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    116 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    117 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    118 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    119 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    120 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    121 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    122 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    123 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    124 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    125 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    126 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    127 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    128 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    129 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    130 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    131 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    132 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    133 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    134 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    135 U002d
    136 U002d							;-------------------------------------------------------------------------------
    137 U002d
    138 U000e					      SEG.U	TIA_REGISTERS_READ
    139 U0000					      ORG	TIA_BASE_READ_ADDRESS
    140 U0000
    141 U0000							;											bit 7	 bit 6
    142 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    143 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    144 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    145 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    146 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    147 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    148 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    149 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    150 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    151 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    152 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    153 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    154 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    155 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    156 U000e
    157 U000e							;-------------------------------------------------------------------------------
    158 U000e
    159 U0298					      SEG.U	RIOT
    160 U0280					      ORG	$280
    161 U0280
    162 U0280							; RIOT MEMORY MAP
    163 U0280
    164 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    165 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    166 U0281
    167 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    168 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    169 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    170 U0284		       00	   INTIM      ds	1	; $284		Timer output
    171 U0285
    172 U0285		       00	   TIMINT     ds	1	; $285
    173 U0286
    174 U0286							; Unused/undefined registers ($285-$294)
    175 U0286
    176 U0286		       00		      ds	1	; $286
    177 U0287		       00		      ds	1	; $287
    178 U0288		       00		      ds	1	; $288
    179 U0289		       00		      ds	1	; $289
    180 U028a		       00		      ds	1	; $28A
    181 U028b		       00		      ds	1	; $28B
    182 U028c		       00		      ds	1	; $28C
    183 U028d		       00		      ds	1	; $28D
    184 U028e		       00		      ds	1	; $28E
    185 U028f		       00		      ds	1	; $28F
    186 U0290		       00		      ds	1	; $290
    187 U0291		       00		      ds	1	; $291
    188 U0292		       00		      ds	1	; $292
    189 U0293		       00		      ds	1	; $293
    190 U0294
    191 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    192 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    193 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    194 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    195 U0298
    196 U0298							;-------------------------------------------------------------------------------
    197 U0298							; The following required for back-compatibility with code which does not use
    198 U0298							; segments.
    199 U0298
    200  3000 ????				      SEG
    201  3000 ????
    202  3000 ????						; EOF
------- FILE 2600basic.h
------- FILE macro.h LEVEL 3 PASS 3
      0  3000 ????				      include	"macro.h"
      1  3000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  3000 ????
      3  3000 ????						; MACRO.H
      4  3000 ????						; Version 1.05, 13/NOVEMBER/2003
      5  3000 ????
      6  3000 ????	       00 69	   VERSION_MACRO =	105
      7  3000 ????
      8  3000 ????						;
      9  3000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
     10  3000 ????						; PLEASE DO *NOT* REDISTRIBUTE MODIFIED VERSIONS OF THIS FILE!
     11  3000 ????						;
     12  3000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     13  3000 ????						; It is distributed as a companion machine-specific support package
     14  3000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     15  3000 ????						; available at at http://www.atari2600.org/dasm
     16  3000 ????						;
     17  3000 ????						; Many thanks to the people who have contributed.  If you take issue with the
     18  3000 ????						; contents, or would like to add something, please write to me
     19  3000 ????						; (atari2600@taswegian.com) with your contribution.
     20  3000 ????						;
     21  3000 ????						; Latest Revisions...
     22  3000 ????						;
     23  3000 ????						; 1.05  14/NOV/2003	  - Added VERSION_MACRO equate (which will reflect 100x version #)
     24  3000 ????						;			    This will allow conditional code to verify MACRO.H being
     25  3000 ????						;			    used for code assembly.
     26  3000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     27  3000 ????						;
     28  3000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     29  3000 ????						;
     30  3000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     31  3000 ????						;			   (standardised macro for vertical synch code)
     32  3000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added. 
     33  3000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     34  3000 ????						; 1.0	22/MAR/2003		Initial release
     35  3000 ????
     36  3000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage, 
     37  3000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     38  3000 ????						;   If you do not allow illegal opcode usage, you must include this file 
     39  3000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     40  3000 ????						;   registers and require them to be defined first).
     41  3000 ????
     42  3000 ????						; Available macros...
     43  3000 ????						;   SLEEP n		 - sleep for n cycles
     44  3000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     45  3000 ????						;   CLEAN_START	 - set machine to known state on startup
     46  3000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     47  3000 ????
     48  3000 ????						;-------------------------------------------------------------------------------
     49  3000 ????						; SLEEP duration
     50  3000 ????						; Original author: Thomas Jentzsch
     51  3000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     52  3000 ????						; useful for code where precise timing is required.
     53  3000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     54  3000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     55  3000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     56  3000 ????
     57  3000 ????				      MAC	sleep
     58  3000 ????			   .CYCLES    SET	{1}
     59  3000 ????
     60  3000 ????				      IF	.CYCLES < 2
     61  3000 ????				      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     62  3000 ????				      ERR
     63  3000 ????				      ENDIF
     64  3000 ????
     65  3000 ????				      IF	.CYCLES & 1
     66  3000 ????				      IFNCONST	NO_ILLEGAL_OPCODES
     67  3000 ????				      nop	0
     68  3000 ????				      ELSE
     69  3000 ????				      bit	VSYNC
     70  3000 ????				      ENDIF
     71  3000 ????			   .CYCLES    SET	.CYCLES - 3
     72  3000 ????				      ENDIF
     73  3000 ????
     74  3000 ????				      REPEAT	.CYCLES / 2
     75  3000 ????				      nop
     76  3000 ????				      REPEND
     77  3000 ????				      ENDM		;usage: SLEEP n (n>1)
     78  3000 ????
     79  3000 ????						;-------------------------------------------------------------------------------
     80  3000 ????						; VERTICAL_SYNC
     81  3000 ????						; Original author: Manuel Polik
     82  3000 ????						; Inserts the code required for a proper 3 scannline 
     83  3000 ????						; vertical sync sequence
     84  3000 ????						;
     85  3000 ????						; Note: Alters the accumulator
     86  3000 ????						;
     87  3000 ????						; IN:
     88  3000 ????						; OUT: A = 1
     89  3000 ????
     90  3000 ????				      MAC	vertical_sync
     91  3000 ????				      LDA	#$02	; A = VSYNC enable
     92  3000 ????				      STA	WSYNC	; Finish current line
     93  3000 ????				      STA	VSYNC	; Start vertical sync
     94  3000 ????				      STA	WSYNC	; 1st line vertical sync
     95  3000 ????				      STA	WSYNC	; 2nd line vertical sync
     96  3000 ????				      LSR		; A = VSYNC disable
     97  3000 ????				      STA	WSYNC	; 3rd line vertical sync
     98  3000 ????				      STA	VSYNC	; Stop vertical sync
     99  3000 ????				      ENDM
    100  3000 ????
    101  3000 ????						;-------------------------------------------------------------------------------
    102  3000 ????						; CLEAN_START
    103  3000 ????						; Original author: Andrew Davie
    104  3000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
    105  3000 ????						; Sets stack pointer to $FF, and all registers to 0
    106  3000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    107  3000 ????						; Use as very first section of code on boot (ie: at reset)
    108  3000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    109  3000 ????
    110  3000 ????				      MAC	clean_start
    111  3000 ????				      sei
    112  3000 ????				      cld
    113  3000 ????
    114  3000 ????				      ldx	#0
    115  3000 ????				      txa
    116  3000 ????				      tay
    117  3000 ????			   .CLEAR_STACK dex
    118  3000 ????				      txs
    119  3000 ????				      pha
    120  3000 ????				      bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    121  3000 ????
    122  3000 ????				      ENDM
    123  3000 ????
    124  3000 ????						;-------------------------------------------------------
    125  3000 ????						; SET_POINTER
    126  3000 ????						; Original author: Manuel Rotschkar
    127  3000 ????						;
    128  3000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    129  3000 ????						;
    130  3000 ????						; Usage: SET_POINTER pointer, address
    131  3000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    132  3000 ????						;
    133  3000 ????						; Note: Alters the accumulator, NZ flags
    134  3000 ????						; IN 1: 2 byte RAM location reserved for pointer
    135  3000 ????						; IN 2: absolute address
    136  3000 ????
    137  3000 ????				      MAC	set_pointer
    138  3000 ????			   .POINTER   SET	{1}
    139  3000 ????			   .ADDRESS   SET	{2}
    140  3000 ????
    141  3000 ????				      LDA	#<.ADDRESS	; Get Lowbyte of Address
    142  3000 ????				      STA	.POINTER	; Store in pointer
    143  3000 ????				      LDA	#>.ADDRESS	; Get Hibyte of Address
    144  3000 ????				      STA	.POINTER+1	; Store in pointer+1
    145  3000 ????
    146  3000 ????				      ENDM
    147  3000 ????
    148  3000 ????						; EOF
------- FILE 2600basic.h
------- FILE 2600basic_variable_redefs.h LEVEL 3 PASS 3
      0  3000 ????				      include	"2600basic_variable_redefs.h"
      1  3000 ????						; This file contains variable mapping and other information for the current project.
      2  3000 ????
      3  3000 ????	       00 23	   bscode_length =	35
      4  3000 ????	       00 1d	   _SD_Touch_Enemy_length =	.skipL0477-_SD_Touch_Enemy
      5  3000 ????
      6  3000 ????	       00 21	   _SD_Shoot_Enemy_length =	.skipL0476-_SD_Shoot_Enemy
      7  3000 ????
      8  3000 ????	       00 45	   _SD_Shoot_Miss_length =	.skipL0475-_SD_Shoot_Miss
      9  3000 ????
     10  3000 ????	       00 35	   _SD_Shot_Wall_length =	.skipL0474-_SD_Shot_Wall
     11  3000 ????
     12  3000 ????	       f0 6f	   w_extra_wall_startpos_x =	w111
     13  3000 ????
     14  3000 ????	       f0 ef	   r_extra_wall_startpos_x =	r111
     15  3000 ????
     16  3000 ????	       f0 6e	   w_extra_wall_type =	w110
     17  3000 ????
     18  3000 ????	       f0 ee	   r_extra_wall_type =	r110
     19  3000 ????
     20  3000 ????	       f0 6d	   w_extra_wall_width =	w109
     21  3000 ????
     22  3000 ????	       f0 ed	   r_extra_wall_width =	r109
     23  3000 ????
     24  3000 ????	       f0 6c	   w_roommate_startpos_x =	w108
     25  3000 ????
     26  3000 ????	       f0 ec	   r_roommate_startpos_x =	r108
     27  3000 ????
     28  3000 ????	       f0 6b	   w_roommate_startpos_y =	w107
     29  3000 ????
     30  3000 ????	       f0 eb	   r_roommate_startpos_y =	r107
     31  3000 ????
     32  3000 ????	       f0 6a	   w_roommate_type_and_range =	w106
     33  3000 ????
     34  3000 ????	       f0 ea	   r_roommate_type_and_range =	r106
     35  3000 ????
     36  3000 ????	       f0 69	   w_room_color_bottom =	w105
     37  3000 ????
     38  3000 ????	       f0 e9	   r_room_color_bottom =	r105
     39  3000 ????
     40  3000 ????	       f0 65	   w_room_color_middle =	w101
     41  3000 ????
     42  3000 ????	       f0 e5	   r_room_color_middle =	r101
     43  3000 ????
     44  3000 ????	       f0 64	   w_room_color_top =	w100
     45  3000 ????
     46  3000 ????	       f0 e4	   r_room_color_top =	r100
     47  3000 ????
     48  3000 ????	       f0 e3	   r_Bit0_room_type_top =	r099
     49  3000 ????
     50  3000 ????	       f0 e3	   w_BitOp_room_type =	r099
     51  3000 ????
     52  3000 ????	       f0 e3	   r_BitOp_room_type =	r099
     53  3000 ????
     54  3000 ????	       f0 63	   w_room_definition_start =	w099
     55  3000 ????
     56  3000 ????	       00 ec	   _Bit7_M0_Moving =	y
     57  3000 ????
     58  3000 ????	       00 ec	   _Bit6_Flip_P1 =	y
     59  3000 ????
     60  3000 ????	       00 ec	   _Bit5_Request_Pending =	y
     61  3000 ????
     62  3000 ????	       00 ec	   _Bit4_Game_Over =	y
     63  3000 ????
     64  3000 ????	       00 ec	   _Bit3_Ball_Shot_Moving =	y
     65  3000 ????
     66  3000 ????	       00 ec	   _Bit2_Level_finished =	y
     67  3000 ????
     68  3000 ????	       00 ec	   _Bit1_Wall_Dir =	y
     69  3000 ????
     70  3000 ????	       00 ec	   _Bit0_roommate_Dir =	y
     71  3000 ????
     72  3000 ????	       00 ec	   _Bit_Game_State =	y
     73  3000 ????
     74  3000 ????	       00 86	   P1y_position =	player1y
     75  3000 ????	       00 e9	   P1y_velocity =	v
     76  3000 ????	       00 91	   M0y_position =	missile0y
     77  3000 ????	       00 e6	   M0y_velocity =	s
     78  3000 ????	       00 89	   Bally_position =	bally
     79  3000 ????	       00 e3	   Bally_velocity =	p
     80  3000 ????	       00 e1	   Safe_Point_P1_y =	n
     81  3000 ????
     82  3000 ????	       00 e0	   Safe_Point_P1_x =	m
     83  3000 ????
     84  3000 ????	       00 df	   _Bit1_Safe_Point_P1_Flip =	l
     85  3000 ????
     86  3000 ????	       00 df	   _Bit0_Safe_Point_reached =	l
     87  3000 ????
     88  3000 ????	       00 df	   _BitOp_Safe_Point =	l
     89  3000 ????
     90  3000 ????	       00 de	   roommate_type =	k
     91  3000 ????
     92  3000 ????	       00 dd	   roommate_move_x =	j
     93  3000 ????
     94  3000 ????	       00 dc	   extra_wall_move_x =	i
     95  3000 ????
     96  3000 ????	       00 db	   _Ch0_Counter =	h
     97  3000 ????
     98  3000 ????	       00 da	   _Ch0_Duration =	g
     99  3000 ????
    100  3000 ????	       00 d9	   _Ch0_Sound =	f
    101  3000 ????
    102  3000 ????	       00 d8	   _Bit3_P1_Dir_Right =	e
    103  3000 ????
    104  3000 ????	       00 d8	   _Bit2_P1_Dir_Left =	e
    105  3000 ????
    106  3000 ????	       00 d8	   _Bit1_P1_Dir_Down =	e
    107  3000 ????
    108  3000 ????	       00 d8	   _Bit0_P1_Dir_Up =	e
    109  3000 ????
    110  3000 ????	       00 d8	   _BitOp_P1_Dir =	e
    111  3000 ????
    112  3000 ????	       00 d7	   _Bit3_M0_Dir_Right =	d
    113  3000 ????
    114  3000 ????	       00 d7	   _Bit2_M0_Dir_Left =	d
    115  3000 ????
    116  3000 ????	       00 d7	   _Bit1_M0_Dir_Down =	d
    117  3000 ????
    118  3000 ????	       00 d7	   _Bit0_M0_Dir_Up =	d
    119  3000 ????
    120  3000 ????	       00 d7	   _BitOp_M0_Dir =	d
    121  3000 ????
    122  3000 ????	       00 d6	   _Bit3_Ball_Shot_Dir_Right2 =	c
    123  3000 ????
    124  3000 ????	       00 d6	   _Bit2_Ball_Shot_Dir_Right1 =	c
    125  3000 ????
    126  3000 ????	       00 d6	   _Bit1_Ball_Shot_Dir_Left2 =	c
    127  3000 ????
    128  3000 ????	       00 d6	   _Bit0_Ball_Shot_Dir_Left1 =	c
    129  3000 ????
    130  3000 ????	       00 d6	   _BitOp_Ball_Shot_Dir =	c
    131  3000 ????
    132  3000 ????	       00 d5	   frame_counter =	b
    133  3000 ????
    134  3000 ????	       00 d4	   delay_counter =	a
    135  3000 ????
    136  3000 ????	       00 95	   _sc3       =	score + 2
    137  3000 ????
    138  3000 ????	       00 94	   _sc2       =	score + 1
    139  3000 ????
    140  3000 ????	       00 93	   _sc1       =	score
    141  3000 ????
    142  3000 ????	       00 fe	   _FE	      =	$FE
    143  3000 ????
    144  3000 ????	       00 fc	   _FC	      =	$FC
    145  3000 ????
    146  3000 ????	       00 fa	   _FA	      =	$FA
    147  3000 ????
    148  3000 ????	       00 f8	   _F8	      =	$F8
    149  3000 ????
    150  3000 ????	       00 f6	   _F6	      =	$F6
    151  3000 ????
    152  3000 ????	       00 f4	   _F4	      =	$F4
    153  3000 ????
    154  3000 ????	       00 f2	   _F2	      =	$F2
    155  3000 ????
    156  3000 ????	       00 f0	   _F0	      =	$F0
    157  3000 ????
    158  3000 ????	       00 ee	   _EE	      =	$EE
    159  3000 ????
    160  3000 ????	       00 ec	   _EC	      =	$EC
    161  3000 ????
    162  3000 ????	       00 ea	   _EA	      =	$EA
    163  3000 ????
    164  3000 ????	       00 e8	   _E8	      =	$E8
    165  3000 ????
    166  3000 ????	       00 e6	   _E6	      =	$E6
    167  3000 ????
    168  3000 ????	       00 e4	   _E4	      =	$E4
    169  3000 ????
    170  3000 ????	       00 e2	   _E2	      =	$E2
    171  3000 ????
    172  3000 ????	       00 e0	   _E0	      =	$E0
    173  3000 ????
    174  3000 ????	       00 de	   _DE	      =	$DE
    175  3000 ????
    176  3000 ????	       00 dc	   _DC	      =	$DC
    177  3000 ????
    178  3000 ????	       00 da	   _DA	      =	$DA
    179  3000 ????
    180  3000 ????	       00 d8	   _D8	      =	$D8
    181  3000 ????
    182  3000 ????	       00 d6	   _D6	      =	$D6
    183  3000 ????
    184  3000 ????	       00 d4	   _D4	      =	$D4
    185  3000 ????
    186  3000 ????	       00 d2	   _D2	      =	$D2
    187  3000 ????
    188  3000 ????	       00 d0	   _D0	      =	$D0
    189  3000 ????
    190  3000 ????	       00 ce	   _CE	      =	$CE
    191  3000 ????
    192  3000 ????	       00 cc	   _CC	      =	$CC
    193  3000 ????
    194  3000 ????	       00 ca	   _CA	      =	$CA
    195  3000 ????
    196  3000 ????	       00 c8	   _C8	      =	$C8
    197  3000 ????
    198  3000 ????	       00 c6	   _C6	      =	$C6
    199  3000 ????
    200  3000 ????	       00 c4	   _C4	      =	$C4
    201  3000 ????
    202  3000 ????	       00 c2	   _C2	      =	$C2
    203  3000 ????
    204  3000 ????	       00 c0	   _C0	      =	$C0
    205  3000 ????
    206  3000 ????	       00 be	   _BE	      =	$BE
    207  3000 ????
    208  3000 ????	       00 bc	   _BC	      =	$BC
    209  3000 ????
    210  3000 ????	       00 ba	   _BA	      =	$BA
    211  3000 ????
    212  3000 ????	       00 b8	   _B8	      =	$B8
    213  3000 ????
    214  3000 ????	       00 b6	   _B6	      =	$B6
    215  3000 ????
    216  3000 ????	       00 b4	   _B4	      =	$B4
    217  3000 ????
    218  3000 ????	       00 b2	   _B2	      =	$B2
    219  3000 ????
    220  3000 ????	       00 b0	   _B0	      =	$B0
    221  3000 ????
    222  3000 ????	       00 ae	   _AE	      =	$AE
    223  3000 ????
    224  3000 ????	       00 ac	   _AC	      =	$AC
    225  3000 ????
    226  3000 ????	       00 aa	   _AA	      =	$AA
    227  3000 ????
    228  3000 ????	       00 a8	   _A8	      =	$A8
    229  3000 ????
    230  3000 ????	       00 a6	   _A6	      =	$A6
    231  3000 ????
    232  3000 ????	       00 a4	   _A4	      =	$A4
    233  3000 ????
    234  3000 ????	       00 a2	   _A2	      =	$A2
    235  3000 ????
    236  3000 ????	       00 a0	   _A0	      =	$A0
    237  3000 ????
    238  3000 ????	       00 9e	   _9E	      =	$9E
    239  3000 ????
    240  3000 ????	       00 9c	   _9C	      =	$9C
    241  3000 ????
    242  3000 ????	       00 9a	   _9A	      =	$9A
    243  3000 ????
    244  3000 ????	       00 98	   _98	      =	$98
    245  3000 ????
    246  3000 ????	       00 96	   _96	      =	$96
    247  3000 ????
    248  3000 ????	       00 94	   _94	      =	$94
    249  3000 ????
    250  3000 ????	       00 92	   _92	      =	$92
    251  3000 ????
    252  3000 ????	       00 90	   _90	      =	$90
    253  3000 ????
    254  3000 ????	       00 8e	   _8E	      =	$8E
    255  3000 ????
    256  3000 ????	       00 8c	   _8C	      =	$8C
    257  3000 ????
    258  3000 ????	       00 8a	   _8A	      =	$8A
    259  3000 ????
    260  3000 ????	       00 88	   _88	      =	$88
    261  3000 ????
    262  3000 ????	       00 86	   _86	      =	$86
    263  3000 ????
    264  3000 ????	       00 84	   _84	      =	$84
    265  3000 ????
    266  3000 ????	       00 82	   _82	      =	$82
    267  3000 ????
    268  3000 ????	       00 80	   _80	      =	$80
    269  3000 ????
    270  3000 ????	       00 7e	   _7E	      =	$7E
    271  3000 ????
    272  3000 ????	       00 7c	   _7C	      =	$7C
    273  3000 ????
    274  3000 ????	       00 7a	   _7A	      =	$7A
    275  3000 ????
    276  3000 ????	       00 78	   _78	      =	$78
    277  3000 ????
    278  3000 ????	       00 76	   _76	      =	$76
    279  3000 ????
    280  3000 ????	       00 74	   _74	      =	$74
    281  3000 ????
    282  3000 ????	       00 72	   _72	      =	$72
    283  3000 ????
    284  3000 ????	       00 70	   _70	      =	$70
    285  3000 ????
    286  3000 ????	       00 6e	   _6E	      =	$6E
    287  3000 ????
    288  3000 ????	       00 6c	   _6C	      =	$6C
    289  3000 ????
    290  3000 ????	       00 6a	   _6A	      =	$6A
    291  3000 ????
    292  3000 ????	       00 68	   _68	      =	$68
    293  3000 ????
    294  3000 ????	       00 66	   _66	      =	$66
    295  3000 ????
    296  3000 ????	       00 64	   _64	      =	$64
    297  3000 ????
    298  3000 ????	       00 62	   _62	      =	$62
    299  3000 ????
    300  3000 ????	       00 60	   _60	      =	$60
    301  3000 ????
    302  3000 ????	       00 5e	   _5E	      =	$5E
    303  3000 ????
    304  3000 ????	       00 5c	   _5C	      =	$5C
    305  3000 ????
    306  3000 ????	       00 5a	   _5A	      =	$5A
    307  3000 ????
    308  3000 ????	       00 58	   _58	      =	$58
    309  3000 ????
    310  3000 ????	       00 56	   _56	      =	$56
    311  3000 ????
    312  3000 ????	       00 54	   _54	      =	$54
    313  3000 ????
    314  3000 ????	       00 52	   _52	      =	$52
    315  3000 ????
    316  3000 ????	       00 50	   _50	      =	$50
    317  3000 ????
    318  3000 ????	       00 4e	   _4E	      =	$4E
    319  3000 ????
    320  3000 ????	       00 4c	   _4C	      =	$4C
    321  3000 ????
    322  3000 ????	       00 4a	   _4A	      =	$4A
    323  3000 ????
    324  3000 ????	       00 48	   _48	      =	$48
    325  3000 ????
    326  3000 ????	       00 46	   _46	      =	$46
    327  3000 ????
    328  3000 ????	       00 44	   _44	      =	$44
    329  3000 ????
    330  3000 ????	       00 42	   _42	      =	$42
    331  3000 ????
    332  3000 ????	       00 40	   _40	      =	$40
    333  3000 ????
    334  3000 ????	       00 3e	   _3E	      =	$3E
    335  3000 ????
    336  3000 ????	       00 3c	   _3C	      =	$3C
    337  3000 ????
    338  3000 ????	       00 3a	   _3A	      =	$3A
    339  3000 ????
    340  3000 ????	       00 38	   _38	      =	$38
    341  3000 ????
    342  3000 ????	       00 36	   _36	      =	$36
    343  3000 ????
    344  3000 ????	       00 34	   _34	      =	$34
    345  3000 ????
    346  3000 ????	       00 32	   _32	      =	$32
    347  3000 ????
    348  3000 ????	       00 30	   _30	      =	$30
    349  3000 ????
    350  3000 ????	       00 2e	   _2E	      =	$2E
    351  3000 ????
    352  3000 ????	       00 2c	   _2C	      =	$2C
    353  3000 ????
    354  3000 ????	       00 2a	   _2A	      =	$2A
    355  3000 ????
    356  3000 ????	       00 28	   _28	      =	$28
    357  3000 ????
    358  3000 ????	       00 26	   _26	      =	$26
    359  3000 ????
    360  3000 ????	       00 24	   _24	      =	$24
    361  3000 ????
    362  3000 ????	       00 22	   _22	      =	$22
    363  3000 ????
    364  3000 ????	       00 20	   _20	      =	$20
    365  3000 ????
    366  3000 ????	       00 1e	   _1E	      =	$1E
    367  3000 ????
    368  3000 ????	       00 1c	   _1C	      =	$1C
    369  3000 ????
    370  3000 ????	       00 1a	   _1A	      =	$1A
    371  3000 ????
    372  3000 ????	       00 18	   _18	      =	$18
    373  3000 ????
    374  3000 ????	       00 16	   _16	      =	$16
    375  3000 ????
    376  3000 ????	       00 14	   _14	      =	$14
    377  3000 ????
    378  3000 ????	       00 12	   _12	      =	$12
    379  3000 ????
    380  3000 ????	       00 10	   _10	      =	$10
    381  3000 ????
    382  3000 ????	       00 0e	   _0E	      =	$0E
    383  3000 ????
    384  3000 ????	       00 0c	   _0C	      =	$0C
    385  3000 ????
    386  3000 ????	       00 0a	   _0A	      =	$0A
    387  3000 ????
    388  3000 ????	       00 08	   _08	      =	$08
    389  3000 ????
    390  3000 ????	       00 06	   _06	      =	$06
    391  3000 ????
    392  3000 ????	       00 04	   _04	      =	$04
    393  3000 ????
    394  3000 ????	       00 02	   _02	      =	$02
    395  3000 ????
    396  3000 ????	       00 00	   _00	      =	$00
    397  3000 ????
    398  3000 ????	       00 08	   req_safe_point =	8
    399  3000 ????
    400  3000 ????	       00 07	   req_level_reset =	7
    401  3000 ????
    402  3000 ????	       00 06	   req_move_down =	6
    403  3000 ????
    404  3000 ????	       00 05	   req_move_right =	5
    405  3000 ????
    406  3000 ????	       00 04	   req_move_up =	4
    407  3000 ????
    408  3000 ????	       00 03	   req_move_left =	3
    409  3000 ????
    410  3000 ????	       00 02	   req_game_over =	2
    411  3000 ????
    412  3000 ????	       00 01	   req_level_up =	1
    413  3000 ????
    414  3000 ????	       00 00	   req_load   =	0
    415  3000 ????
    416  3000 ????	       00 18	   response_size_minus_1 =	24
    417  3000 ????
    418  3000 ????	       00 08	   scback     =	#$08
    419  3000 ????
    420  3000 ????	       00 94	   _M_Edge_Right =	148
    421  3000 ????
    422  3000 ????	       00 0e	   _M_Edge_Left =	14
    423  3000 ????
    424  3000 ????	       00 58	   _M_Edge_Bottom =	88
    425  3000 ????
    426  3000 ????	       00 02	   _M_Edge_Top =	2
    427  3000 ????
    428  3000 ????	       00 4c	   player_max_y =	76
    429  3000 ????
    430  3000 ????	       00 02	   player_min_y =	2
    431  3000 ????
    432  3000 ????	       00 86	   player_max_x =	134
    433  3000 ????
    434  3000 ????	       00 0a	   player_min_x =	10
    435  3000 ????
    436  3000 ????	       00 01	   pfscore    =	1
    437  3000 ????
    438  3000 ????	       00 04	   pfres      =	4
    439  3000 ????
    440  3000 ????	       00 01	   superchip  =	1
    441  3000 ????	       00 01	   bs_mask    =	1
    442  3000 ????	       00 08	   bankswitch =	8
    443  3000 ????	       1f f8	   bankswitch_hotspot =	$1FF8
    444  3000 ????	       00 01	   PFcolors   =	1
    445  3000 ????	       00 01	   player1colors =	1
------- FILE 2600basic.h
      7  3000 ????
      8  3000 ????	       00 80	   player0x   =	$80
      9  3000 ????	       00 81	   player1x   =	$81
     10  3000 ????	       00 82	   missile0x  =	$82
     11  3000 ????	       00 83	   missile1x  =	$83
     12  3000 ????	       00 84	   ballx      =	$84
     13  3000 ????
     14  3000 ????	       00 85	   objecty    =	$85
     15  3000 ????	       00 85	   player0y   =	$85
     16  3000 ????	       00 86	   player1y   =	$86
     17  3000 ????	       00 87	   missile1height =	$87
     18  3000 ????	       00 88	   missile1y  =	$88
     19  3000 ????	       00 89	   bally      =	$89
     20  3000 ????
     21  3000 ????	       00 87	   player1color =	$87	; replaces missile 1
     22  3000 ????
     23  3000 ????	       00 8a	   player0pointer =	$8A	;uses $8A-$8B
     24  3000 ????	       00 8a	   player0pointerlo =	$8A
     25  3000 ????	       00 8b	   player0pointerhi =	$8B
     26  3000 ????	       00 8c	   player1pointer =	$8C	; $8C-$8D
     27  3000 ????	       00 8c	   player1pointerlo =	$8C
     28  3000 ????	       00 8d	   player1pointerhi =	$8D
     29  3000 ????
     30  3000 ????	       00 8e	   player0height =	$8E
     31  3000 ????	       00 8f	   player1height =	$8F
     32  3000 ????	       00 90	   missile0height =	$90
     33  3000 ????	       00 91	   missile0y  =	$91
     34  3000 ????	       00 92	   ballheight =	$92
     35  3000 ????
     36  3000 ????	       00 90	   currentpaddle =	$90	; replaces missile 0 (and can't be used with playercolor)
     37  3000 ????	       00 91	   paddle     =	$91	; replaces missile 0
     38  3000 ????	       00 82	   player0colorstore =	$82	; replaces missile 0
     39  3000 ????	       00 90	   player0color =	$90	; replaces missile 0
     40  3000 ????
     41  3000 ????	       00 93	   score      =	$93	; $93-$95
     42  3000 ????	       00 96	   scorepointers =	$96	; $96-$9B = 6 bytes
     43  3000 ????	       00 9c	   temp1      =	$9C	;used by kernel.  can be used in program too, but
     44  3000 ????	       00 9d	   temp2      =	$9D	;are obliterated when drawscreen is called.
     45  3000 ????	       00 9e	   temp3      =	$9E
     46  3000 ????	       00 9f	   temp4      =	$9F
     47  3000 ????	       00 a0	   temp5      =	$A0
     48  3000 ????	       00 a1	   temp6      =	$A1
     49  3000 ????
     50  3000 ????	       00 a2	   rand       =	$A2
     51  3000 ????	       00 a3	   scorecolor =	$A3
     52  3000 ????
     53  3000 ????	       00 a4	   var0       =	$A4
     54  3000 ????	       00 a5	   var1       =	$A5
     55  3000 ????	       00 a6	   var2       =	$A6
     56  3000 ????	       00 a7	   var3       =	$A7
     57  3000 ????	       00 a8	   var4       =	$A8
     58  3000 ????	       00 a9	   var5       =	$A9
     59  3000 ????	       00 aa	   var6       =	$AA
     60  3000 ????	       00 ab	   var7       =	$AB
     61  3000 ????	       00 ac	   var8       =	$AC
     62  3000 ????	       00 ad	   var9       =	$AD
     63  3000 ????	       00 ae	   var10      =	$AE
     64  3000 ????	       00 af	   var11      =	$AF
     65  3000 ????	       00 b0	   var12      =	$B0
     66  3000 ????	       00 b1	   var13      =	$B1
     67  3000 ????	       00 b2	   var14      =	$B2
     68  3000 ????	       00 b3	   var15      =	$B3
     69  3000 ????	       00 b4	   var16      =	$B4
     70  3000 ????	       00 b5	   var17      =	$B5
     71  3000 ????	       00 b6	   var18      =	$B6
     72  3000 ????	       00 b7	   var19      =	$B7
     73  3000 ????	       00 b8	   var20      =	$B8
     74  3000 ????	       00 b9	   var21      =	$B9
     75  3000 ????	       00 ba	   var22      =	$BA
     76  3000 ????	       00 bb	   var23      =	$BB
     77  3000 ????	       00 bc	   var24      =	$BC
     78  3000 ????	       00 bd	   var25      =	$BD
     79  3000 ????	       00 be	   var26      =	$BE
     80  3000 ????	       00 bf	   var27      =	$BF
     81  3000 ????	       00 c0	   var28      =	$C0
     82  3000 ????	       00 c1	   var29      =	$C1
     83  3000 ????	       00 c2	   var30      =	$C2
     84  3000 ????	       00 c3	   var31      =	$C3
     85  3000 ????	       00 c4	   var32      =	$C4
     86  3000 ????	       00 c5	   var33      =	$C5
     87  3000 ????	       00 c6	   var34      =	$C6
     88  3000 ????	       00 c7	   var35      =	$C7
     89  3000 ????	       00 c8	   var36      =	$C8
     90  3000 ????	       00 c9	   var37      =	$C9
     91  3000 ????	       00 ca	   var38      =	$CA
     92  3000 ????	       00 cb	   var39      =	$CB
     93  3000 ????	       00 cc	   var40      =	$CC
     94  3000 ????	       00 cd	   var41      =	$CD
     95  3000 ????	       00 ce	   var42      =	$CE
     96  3000 ????	       00 cf	   var43      =	$CF
     97  3000 ????	       00 d0	   var44      =	$D0
     98  3000 ????	       00 d1	   var45      =	$D1
     99  3000 ????	       00 d2	   var46      =	$D2
    100  3000 ????	       00 d3	   var47      =	$D3
    101  3000 ????
    102  3000 ????	       00 d4	   A	      =	$d4
    103  3000 ????	       00 d4	   a	      =	$d4
    104  3000 ????	       00 d5	   B	      =	$d5
    105  3000 ????	       00 d5	   b	      =	$d5
    106  3000 ????	       00 d6	   C	      =	$d6
    107  3000 ????	       00 d6	   c	      =	$d6
    108  3000 ????	       00 d7	   D	      =	$d7
    109  3000 ????	       00 d7	   d	      =	$d7
    110  3000 ????	       00 d8	   E	      =	$d8
    111  3000 ????	       00 d8	   e	      =	$d8
    112  3000 ????	       00 d9	   F	      =	$d9
    113  3000 ????	       00 d9	   f	      =	$d9
    114  3000 ????	       00 da	   G	      =	$da
    115  3000 ????	       00 da	   g	      =	$da
    116  3000 ????	       00 db	   H	      =	$db
    117  3000 ????	       00 db	   h	      =	$db
    118  3000 ????	       00 dc	   I	      =	$dc
    119  3000 ????	       00 dc	   i	      =	$dc
    120  3000 ????	       00 dd	   J	      =	$dd
    121  3000 ????	       00 dd	   j	      =	$dd
    122  3000 ????	       00 de	   K	      =	$de
    123  3000 ????	       00 de	   k	      =	$de
    124  3000 ????	       00 df	   L	      =	$df
    125  3000 ????	       00 df	   l	      =	$df
    126  3000 ????	       00 e0	   M	      =	$e0
    127  3000 ????	       00 e0	   m	      =	$e0
    128  3000 ????	       00 e1	   N	      =	$e1
    129  3000 ????	       00 e1	   n	      =	$e1
    130  3000 ????	       00 e2	   O	      =	$e2
    131  3000 ????	       00 e2	   o	      =	$e2
    132  3000 ????	       00 e3	   P	      =	$e3
    133  3000 ????	       00 e3	   p	      =	$e3
    134  3000 ????	       00 e4	   Q	      =	$e4
    135  3000 ????	       00 e4	   q	      =	$e4
    136  3000 ????	       00 e5	   R	      =	$e5
    137  3000 ????	       00 e5	   r	      =	$e5
    138  3000 ????	       00 e6	   S	      =	$e6
    139  3000 ????	       00 e6	   s	      =	$e6
    140  3000 ????	       00 e7	   T	      =	$e7
    141  3000 ????	       00 e7	   t	      =	$e7
    142  3000 ????	       00 e8	   U	      =	$e8
    143  3000 ????	       00 e8	   u	      =	$e8
    144  3000 ????	       00 e9	   V	      =	$e9
    145  3000 ????	       00 e9	   v	      =	$e9
    146  3000 ????	       00 ea	   W	      =	$ea
    147  3000 ????	       00 ea	   w	      =	$ea
    148  3000 ????	       00 eb	   X	      =	$eb
    149  3000 ????	       00 eb	   x	      =	$eb
    150  3000 ????	       00 ec	   Y	      =	$ec
    151  3000 ????	       00 ec	   y	      =	$ec
    152  3000 ????	       00 ed	   Z	      =	$ed
    153  3000 ????	       00 ed	   z	      =	$ed
    154  3000 ????
    155  3000 ????	       00 ee	   temp7      =	$ee	; This is used to aid in bankswitching
    156  3000 ????	       00 ef	   playfieldpos =	$ef
    157  3000 ????
    158  3000 ????						; available for other uses, or if unused, provide more stack space
    159  3000 ????
    160  3000 ????	       00 f0	   aux1       =	$f0
    161  3000 ????	       00 f1	   aux2       =	$f1
    162  3000 ????	       00 f2	   aux3       =	$f2
    163  3000 ????	       00 f3	   aux4       =	$f3
    164  3000 ????	       00 f4	   aux5       =	$f4
    165  3000 ????	       00 f5	   aux6       =	$f5
    166  3000 ????
    167  3000 ????						; playfield color/height pointers
    168  3000 ????	       00 f0	   pfcolortable =	$f0	; and $d5
    169  3000 ????	       00 f0	   pfheighttable =	$f0	; and $d5
    170  3000 ????						; the above pointers are the same because if color and height are both used together,
    171  3000 ????						; they must used absolute indexed and cannot use pointers
    172  3000 ????
    173  3000 ????	       00 f2	   lifepointer =	$f2	; pointer to "lives" shape
    174  3000 ????						; upper 3 bits of $f2 contain the number of lives
    175  3000 ????	       00 f4	   lifecolor  =	$f4
    176  3000 ????	       00 f3	   lives      =	$f3	; # lives >> 5
    177  3000 ????	       00 f5	   statusbarlength =	$f5	; only uses upper 5 bits; other bits free
    178  3000 ????
    179  3000 ????	       00 f2	   pfscore1   =	$f2	; optional playfield bytes in score
    180  3000 ????	       00 f3	   pfscore2   =	$f3
    181  3000 ????	       00 f4	   pfscorecolor =	$f4
    182  3000 ????
    183  3000 ????	       00 f6	   stack1     =	$f6
    184  3000 ????	       00 f7	   stack2     =	$f7
    185  3000 ????	       00 f8	   stack3     =	$f8
    186  3000 ????	       00 f9	   stack4     =	$f9
    187  3000 ????						; the stack bytes above may be used in the kernel
    188  3000 ????						; stack = F6-F7, F8-F9, FA-FB, FC-FD, FE-FF
    189  3000 ????
    190  3000 ????				      MAC	return
    191  3000 ????				      ifnconst	bankswitch
    192  3000 ????				      rts
    193  3000 ????				      else
    194  3000 ????				      jmp	BS_return
    195  3000 ????				      endif
    196  3000 ????				      ENDM		; auto-return from either a regular or bankswitched module
    197  3000 ????
    198  3000 ????				      ifconst	superchip
    199  3000 ????	       10 d0	   playfieldbase =	$10D0
------- FILE superchip.h LEVEL 3 PASS 3
      0  3000 ????				      include	superchip.h
      1  3000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  3000 ????
      3  3000 ????	       f0 00	   write_RAM  =	$F000
      4  3000 ????	       f0 00	   wRAM       =	$F000
      5  3000 ????	       f0 00	   w000       =	$F000
      6  3000 ????	       f0 01	   w001       =	$F001
      7  3000 ????	       f0 02	   w002       =	$F002
      8  3000 ????	       f0 03	   w003       =	$F003
      9  3000 ????	       f0 04	   w004       =	$F004
     10  3000 ????	       f0 05	   w005       =	$F005
     11  3000 ????	       f0 06	   w006       =	$F006
     12  3000 ????	       f0 07	   w007       =	$F007
     13  3000 ????	       f0 08	   w008       =	$F008
     14  3000 ????	       f0 09	   w009       =	$F009
     15  3000 ????	       f0 0a	   w010       =	$F00A
     16  3000 ????	       f0 0b	   w011       =	$F00B
     17  3000 ????	       f0 0c	   w012       =	$F00C
     18  3000 ????	       f0 0d	   w013       =	$F00D
     19  3000 ????	       f0 0e	   w014       =	$F00E
     20  3000 ????	       f0 0f	   w015       =	$F00F
     21  3000 ????	       f0 10	   w016       =	$F010
     22  3000 ????	       f0 11	   w017       =	$F011
     23  3000 ????	       f0 12	   w018       =	$F012
     24  3000 ????	       f0 13	   w019       =	$F013
     25  3000 ????	       f0 14	   w020       =	$F014
     26  3000 ????	       f0 15	   w021       =	$F015
     27  3000 ????	       f0 16	   w022       =	$F016
     28  3000 ????	       f0 17	   w023       =	$F017
     29  3000 ????	       f0 18	   w024       =	$F018
     30  3000 ????	       f0 19	   w025       =	$F019
     31  3000 ????	       f0 1a	   w026       =	$F01A
     32  3000 ????	       f0 1b	   w027       =	$F01B
     33  3000 ????	       f0 1c	   w028       =	$F01C
     34  3000 ????	       f0 1d	   w029       =	$F01D
     35  3000 ????	       f0 1e	   w030       =	$F01E
     36  3000 ????	       f0 1f	   w031       =	$F01F
     37  3000 ????	       f0 20	   w032       =	$F020
     38  3000 ????	       f0 21	   w033       =	$F021
     39  3000 ????	       f0 22	   w034       =	$F022
     40  3000 ????	       f0 23	   w035       =	$F023
     41  3000 ????	       f0 24	   w036       =	$F024
     42  3000 ????	       f0 25	   w037       =	$F025
     43  3000 ????	       f0 26	   w038       =	$F026
     44  3000 ????	       f0 27	   w039       =	$F027
     45  3000 ????	       f0 28	   w040       =	$F028
     46  3000 ????	       f0 29	   w041       =	$F029
     47  3000 ????	       f0 2a	   w042       =	$F02A
     48  3000 ????	       f0 2b	   w043       =	$F02B
     49  3000 ????	       f0 2c	   w044       =	$F02C
     50  3000 ????	       f0 2d	   w045       =	$F02D
     51  3000 ????	       f0 2e	   w046       =	$F02E
     52  3000 ????	       f0 2f	   w047       =	$F02F
     53  3000 ????	       f0 30	   w048       =	$F030
     54  3000 ????	       f0 31	   w049       =	$F031
     55  3000 ????	       f0 32	   w050       =	$F032
     56  3000 ????	       f0 33	   w051       =	$F033
     57  3000 ????	       f0 34	   w052       =	$F034
     58  3000 ????	       f0 35	   w053       =	$F035
     59  3000 ????	       f0 36	   w054       =	$F036
     60  3000 ????	       f0 37	   w055       =	$F037
     61  3000 ????	       f0 38	   w056       =	$F038
     62  3000 ????	       f0 39	   w057       =	$F039
     63  3000 ????	       f0 3a	   w058       =	$F03A
     64  3000 ????	       f0 3b	   w059       =	$F03B
     65  3000 ????	       f0 3c	   w060       =	$F03C
     66  3000 ????	       f0 3d	   w061       =	$F03D
     67  3000 ????	       f0 3e	   w062       =	$F03E
     68  3000 ????	       f0 3f	   w063       =	$F03F
     69  3000 ????	       f0 40	   w064       =	$F040
     70  3000 ????	       f0 41	   w065       =	$F041
     71  3000 ????	       f0 42	   w066       =	$F042
     72  3000 ????	       f0 43	   w067       =	$F043
     73  3000 ????	       f0 44	   w068       =	$F044
     74  3000 ????	       f0 45	   w069       =	$F045
     75  3000 ????	       f0 46	   w070       =	$F046
     76  3000 ????	       f0 47	   w071       =	$F047
     77  3000 ????	       f0 48	   w072       =	$F048
     78  3000 ????	       f0 49	   w073       =	$F049
     79  3000 ????	       f0 4a	   w074       =	$F04A
     80  3000 ????	       f0 4b	   w075       =	$F04B
     81  3000 ????	       f0 4c	   w076       =	$F04C
     82  3000 ????	       f0 4d	   w077       =	$F04D
     83  3000 ????	       f0 4e	   w078       =	$F04E
     84  3000 ????	       f0 4f	   w079       =	$F04F
     85  3000 ????	       f0 50	   w080       =	$F050
     86  3000 ????	       f0 51	   w081       =	$F051
     87  3000 ????	       f0 52	   w082       =	$F052
     88  3000 ????	       f0 53	   w083       =	$F053
     89  3000 ????	       f0 54	   w084       =	$F054
     90  3000 ????	       f0 55	   w085       =	$F055
     91  3000 ????	       f0 56	   w086       =	$F056
     92  3000 ????	       f0 57	   w087       =	$F057
     93  3000 ????	       f0 58	   w088       =	$F058
     94  3000 ????	       f0 59	   w089       =	$F059
     95  3000 ????	       f0 5a	   w090       =	$F05A
     96  3000 ????	       f0 5b	   w091       =	$F05B
     97  3000 ????	       f0 5c	   w092       =	$F05C
     98  3000 ????	       f0 5d	   w093       =	$F05D
     99  3000 ????	       f0 5e	   w094       =	$F05E
    100  3000 ????	       f0 5f	   w095       =	$F05F
    101  3000 ????	       f0 60	   w096       =	$F060
    102  3000 ????	       f0 61	   w097       =	$F061
    103  3000 ????	       f0 62	   w098       =	$F062
    104  3000 ????	       f0 63	   w099       =	$F063
    105  3000 ????	       f0 64	   w100       =	$F064
    106  3000 ????	       f0 65	   w101       =	$F065
    107  3000 ????	       f0 66	   w102       =	$F066
    108  3000 ????	       f0 67	   w103       =	$F067
    109  3000 ????	       f0 68	   w104       =	$F068
    110  3000 ????	       f0 69	   w105       =	$F069
    111  3000 ????	       f0 6a	   w106       =	$F06A
    112  3000 ????	       f0 6b	   w107       =	$F06B
    113  3000 ????	       f0 6c	   w108       =	$F06C
    114  3000 ????	       f0 6d	   w109       =	$F06D
    115  3000 ????	       f0 6e	   w110       =	$F06E
    116  3000 ????	       f0 6f	   w111       =	$F06F
    117  3000 ????	       f0 70	   w112       =	$F070
    118  3000 ????	       f0 71	   w113       =	$F071
    119  3000 ????	       f0 72	   w114       =	$F072
    120  3000 ????	       f0 73	   w115       =	$F073
    121  3000 ????	       f0 74	   w116       =	$F074
    122  3000 ????	       f0 75	   w117       =	$F075
    123  3000 ????	       f0 76	   w118       =	$F076
    124  3000 ????	       f0 77	   w119       =	$F077
    125  3000 ????	       f0 78	   w120       =	$F078
    126  3000 ????	       f0 79	   w121       =	$F079
    127  3000 ????	       f0 7a	   w122       =	$F07A
    128  3000 ????	       f0 7b	   w123       =	$F07B
    129  3000 ????	       f0 7c	   w124       =	$F07C
    130  3000 ????	       f0 7d	   w125       =	$F07D
    131  3000 ????	       f0 7e	   w126       =	$F07E
    132  3000 ????	       f0 7f	   w127       =	$F07F
    133  3000 ????
    134  3000 ????	       f0 80	   read_RAM   =	$F080
    135  3000 ????	       f0 80	   rRAM       =	$F080
    136  3000 ????	       f0 80	   r000       =	$F080
    137  3000 ????	       f0 81	   r001       =	$F081
    138  3000 ????	       f0 82	   r002       =	$F082
    139  3000 ????	       f0 83	   r003       =	$F083
    140  3000 ????	       f0 84	   r004       =	$F084
    141  3000 ????	       f0 85	   r005       =	$F085
    142  3000 ????	       f0 86	   r006       =	$F086
    143  3000 ????	       f0 87	   r007       =	$F087
    144  3000 ????	       f0 88	   r008       =	$F088
    145  3000 ????	       f0 89	   r009       =	$F089
    146  3000 ????	       f0 8a	   r010       =	$F08A
    147  3000 ????	       f0 8b	   r011       =	$F08B
    148  3000 ????	       f0 8c	   r012       =	$F08C
    149  3000 ????	       f0 8d	   r013       =	$F08D
    150  3000 ????	       f0 8e	   r014       =	$F08E
    151  3000 ????	       f0 8f	   r015       =	$F08F
    152  3000 ????	       f0 90	   r016       =	$F090
    153  3000 ????	       f0 91	   r017       =	$F091
    154  3000 ????	       f0 92	   r018       =	$F092
    155  3000 ????	       f0 93	   r019       =	$F093
    156  3000 ????	       f0 94	   r020       =	$F094
    157  3000 ????	       f0 95	   r021       =	$F095
    158  3000 ????	       f0 96	   r022       =	$F096
    159  3000 ????	       f0 97	   r023       =	$F097
    160  3000 ????	       f0 98	   r024       =	$F098
    161  3000 ????	       f0 99	   r025       =	$F099
    162  3000 ????	       f0 9a	   r026       =	$F09A
    163  3000 ????	       f0 9b	   r027       =	$F09B
    164  3000 ????	       f0 9c	   r028       =	$F09C
    165  3000 ????	       f0 9d	   r029       =	$F09D
    166  3000 ????	       f0 9e	   r030       =	$F09E
    167  3000 ????	       f0 9f	   r031       =	$F09F
    168  3000 ????	       f0 a0	   r032       =	$F0A0
    169  3000 ????	       f0 a1	   r033       =	$F0A1
    170  3000 ????	       f0 a2	   r034       =	$F0A2
    171  3000 ????	       f0 a3	   r035       =	$F0A3
    172  3000 ????	       f0 a4	   r036       =	$F0A4
    173  3000 ????	       f0 a5	   r037       =	$F0A5
    174  3000 ????	       f0 a6	   r038       =	$F0A6
    175  3000 ????	       f0 a7	   r039       =	$F0A7
    176  3000 ????	       f0 a8	   r040       =	$F0A8
    177  3000 ????	       f0 a9	   r041       =	$F0A9
    178  3000 ????	       f0 aa	   r042       =	$F0AA
    179  3000 ????	       f0 ab	   r043       =	$F0AB
    180  3000 ????	       f0 ac	   r044       =	$F0AC
    181  3000 ????	       f0 ad	   r045       =	$F0AD
    182  3000 ????	       f0 ae	   r046       =	$F0AE
    183  3000 ????	       f0 af	   r047       =	$F0AF
    184  3000 ????	       f0 b0	   r048       =	$F0B0
    185  3000 ????	       f0 b1	   r049       =	$F0B1
    186  3000 ????	       f0 b2	   r050       =	$F0B2
    187  3000 ????	       f0 b3	   r051       =	$F0B3
    188  3000 ????	       f0 b4	   r052       =	$F0B4
    189  3000 ????	       f0 b5	   r053       =	$F0B5
    190  3000 ????	       f0 b6	   r054       =	$F0B6
    191  3000 ????	       f0 b7	   r055       =	$F0B7
    192  3000 ????	       f0 b8	   r056       =	$F0B8
    193  3000 ????	       f0 b9	   r057       =	$F0B9
    194  3000 ????	       f0 ba	   r058       =	$F0BA
    195  3000 ????	       f0 bb	   r059       =	$F0BB
    196  3000 ????	       f0 bc	   r060       =	$F0BC
    197  3000 ????	       f0 bd	   r061       =	$F0BD
    198  3000 ????	       f0 be	   r062       =	$F0BE
    199  3000 ????	       f0 bf	   r063       =	$F0BF
    200  3000 ????	       f0 c0	   r064       =	$F0C0
    201  3000 ????	       f0 c1	   r065       =	$F0C1
    202  3000 ????	       f0 c2	   r066       =	$F0C2
    203  3000 ????	       f0 c3	   r067       =	$F0C3
    204  3000 ????	       f0 c4	   r068       =	$F0C4
    205  3000 ????	       f0 c5	   r069       =	$F0C5
    206  3000 ????	       f0 c6	   r070       =	$F0C6
    207  3000 ????	       f0 c7	   r071       =	$F0C7
    208  3000 ????	       f0 c8	   r072       =	$F0C8
    209  3000 ????	       f0 c9	   r073       =	$F0C9
    210  3000 ????	       f0 ca	   r074       =	$F0CA
    211  3000 ????	       f0 cb	   r075       =	$F0CB
    212  3000 ????	       f0 cc	   r076       =	$F0CC
    213  3000 ????	       f0 cd	   r077       =	$F0CD
    214  3000 ????	       f0 ce	   r078       =	$F0CE
    215  3000 ????	       f0 cf	   r079       =	$F0CF
    216  3000 ????	       f0 d0	   r080       =	$F0D0
    217  3000 ????	       f0 d1	   r081       =	$F0D1
    218  3000 ????	       f0 d2	   r082       =	$F0D2
    219  3000 ????	       f0 d3	   r083       =	$F0D3
    220  3000 ????	       f0 d4	   r084       =	$F0D4
    221  3000 ????	       f0 d5	   r085       =	$F0D5
    222  3000 ????	       f0 d6	   r086       =	$F0D6
    223  3000 ????	       f0 d7	   r087       =	$F0D7
    224  3000 ????	       f0 d8	   r088       =	$F0D8
    225  3000 ????	       f0 d9	   r089       =	$F0D9
    226  3000 ????	       f0 da	   r090       =	$F0DA
    227  3000 ????	       f0 db	   r091       =	$F0DB
    228  3000 ????	       f0 dc	   r092       =	$F0DC
    229  3000 ????	       f0 dd	   r093       =	$F0DD
    230  3000 ????	       f0 de	   r094       =	$F0DE
    231  3000 ????	       f0 df	   r095       =	$F0DF
    232  3000 ????	       f0 e0	   r096       =	$F0E0
    233  3000 ????	       f0 e1	   r097       =	$F0E1
    234  3000 ????	       f0 e2	   r098       =	$F0E2
    235  3000 ????	       f0 e3	   r099       =	$F0E3
    236  3000 ????	       f0 e4	   r100       =	$F0E4
    237  3000 ????	       f0 e5	   r101       =	$F0E5
    238  3000 ????	       f0 e6	   r102       =	$F0E6
    239  3000 ????	       f0 e7	   r103       =	$F0E7
    240  3000 ????	       f0 e8	   r104       =	$F0E8
    241  3000 ????	       f0 e9	   r105       =	$F0E9
    242  3000 ????	       f0 ea	   r106       =	$F0EA
    243  3000 ????	       f0 eb	   r107       =	$F0EB
    244  3000 ????	       f0 ec	   r108       =	$F0EC
    245  3000 ????	       f0 ed	   r109       =	$F0ED
    246  3000 ????	       f0 ee	   r110       =	$F0EE
    247  3000 ????	       f0 ef	   r111       =	$F0EF
    248  3000 ????	       f0 f0	   r112       =	$F0F0
    249  3000 ????	       f0 f1	   r113       =	$F0F1
    250  3000 ????	       f0 f2	   r114       =	$F0F2
    251  3000 ????	       f0 f3	   r115       =	$F0F3
    252  3000 ????	       f0 f4	   r116       =	$F0F4
    253  3000 ????	       f0 f5	   r117       =	$F0F5
    254  3000 ????	       f0 f6	   r118       =	$F0F6
    255  3000 ????	       f0 f7	   r119       =	$F0F7
    256  3000 ????	       f0 f8	   r120       =	$F0F8
    257  3000 ????	       f0 f9	   r121       =	$F0F9
    258  3000 ????	       f0 fa	   r122       =	$F0FA
    259  3000 ????	       f0 fb	   r123       =	$F0FB
    260  3000 ????	       f0 fc	   r124       =	$F0FC
    261  3000 ????	       f0 fd	   r125       =	$F0FD
    262  3000 ????	       f0 fe	   r126       =	$F0FE
    263  3000 ????	       f0 ff	   r127       =	$F0FF
------- FILE 2600basic.h
    201  3000 ????			  -	      else
    202  3000 ????			  -playfieldbase =	$A4
    203  3000 ????				      endif
    204  3000 ????
    205  3000 ????				      ifnconst	pfhalfwidth
    206  3000 ????	       00 04	   pfwidth    =	4
    207  3000 ????	       00 0e	   PF1L       =	PF1
    208  3000 ????	       00 0f	   PF2L       =	PF2
    209  3000 ????	       00 0e	   PF1R       =	PF1
    210  3000 ????	       00 0f	   PF2R       =	PF2
    211  3000 ????	       00 00	   pfadjust   =	0
    212  3000 ????			  -	      else
    213  3000 ????			  -pfwidth    =	2
    214  3000 ????			  -	      ifconst	pfcenter
    215  3000 ????			  -PF1L       =	$3F	; no effect
    216  3000 ????			  -PF2L       =	PF2
    217  3000 ????			  -PF1R       =	$3F
    218  3000 ????			  -PF2R       =	PF2	; no effect
    219  3000 ????			  -pfadjust   =	1
    220  3000 ????			  -	      else
    221  3000 ????			  -PF1L       =	PF1
    222  3000 ????			  -PF2L       =	PF2
    223  3000 ????			  -PF1R       =	$3F	; no effect
    224  3000 ????			  -PF2R       =	$3F	; no effect
    225  3000 ????			  -pfadjust   =	0
    226  3000 ????			  -	      endif
    227  3000 ????				      endif
    228  3000 ????
    229  3000 ????						; define playfield start based on height
    230  3000 ????			  -	      ifnconst	pfres
    231  3000 ????			  -playfield  =	playfieldbase
    232  3000 ????				      else
    233  3000 ????	       10 f0	   playfield  =	playfieldbase-(pfres-12*(4/pfwidth))*pfwidth
    234  3000 ????				      endif
------- FILE d:\Firmaplus\Firmaplus_intern\Atari\PlusROM\Projekte-batariBasic\CaveApocalypse\C.A.V.E. Apocalypse.bas.asm
------- FILE 2600basic_variable_redefs.h LEVEL 2 PASS 3
      0  3000 ????				      include	"2600basic_variable_redefs.h"
      1  3000 ????						; This file contains variable mapping and other information for the current project.
      2  3000 ????
      3  3000 ????	       00 23	   bscode_length =	35
      4  3000 ????	       00 1d	   _SD_Touch_Enemy_length =	.skipL0477-_SD_Touch_Enemy
      5  3000 ????
      6  3000 ????	       00 21	   _SD_Shoot_Enemy_length =	.skipL0476-_SD_Shoot_Enemy
      7  3000 ????
      8  3000 ????	       00 45	   _SD_Shoot_Miss_length =	.skipL0475-_SD_Shoot_Miss
      9  3000 ????
     10  3000 ????	       00 35	   _SD_Shot_Wall_length =	.skipL0474-_SD_Shot_Wall
     11  3000 ????
     12  3000 ????	       f0 6f	   w_extra_wall_startpos_x =	w111
     13  3000 ????
     14  3000 ????	       f0 ef	   r_extra_wall_startpos_x =	r111
     15  3000 ????
     16  3000 ????	       f0 6e	   w_extra_wall_type =	w110
     17  3000 ????
     18  3000 ????	       f0 ee	   r_extra_wall_type =	r110
     19  3000 ????
     20  3000 ????	       f0 6d	   w_extra_wall_width =	w109
     21  3000 ????
     22  3000 ????	       f0 ed	   r_extra_wall_width =	r109
     23  3000 ????
     24  3000 ????	       f0 6c	   w_roommate_startpos_x =	w108
     25  3000 ????
     26  3000 ????	       f0 ec	   r_roommate_startpos_x =	r108
     27  3000 ????
     28  3000 ????	       f0 6b	   w_roommate_startpos_y =	w107
     29  3000 ????
     30  3000 ????	       f0 eb	   r_roommate_startpos_y =	r107
     31  3000 ????
     32  3000 ????	       f0 6a	   w_roommate_type_and_range =	w106
     33  3000 ????
     34  3000 ????	       f0 ea	   r_roommate_type_and_range =	r106
     35  3000 ????
     36  3000 ????	       f0 69	   w_room_color_bottom =	w105
     37  3000 ????
     38  3000 ????	       f0 e9	   r_room_color_bottom =	r105
     39  3000 ????
     40  3000 ????	       f0 65	   w_room_color_middle =	w101
     41  3000 ????
     42  3000 ????	       f0 e5	   r_room_color_middle =	r101
     43  3000 ????
     44  3000 ????	       f0 64	   w_room_color_top =	w100
     45  3000 ????
     46  3000 ????	       f0 e4	   r_room_color_top =	r100
     47  3000 ????
     48  3000 ????	       f0 e3	   r_Bit0_room_type_top =	r099
     49  3000 ????
     50  3000 ????	       f0 e3	   w_BitOp_room_type =	r099
     51  3000 ????
     52  3000 ????	       f0 e3	   r_BitOp_room_type =	r099
     53  3000 ????
     54  3000 ????	       f0 63	   w_room_definition_start =	w099
     55  3000 ????
     56  3000 ????	       00 ec	   _Bit7_M0_Moving =	y
     57  3000 ????
     58  3000 ????	       00 ec	   _Bit6_Flip_P1 =	y
     59  3000 ????
     60  3000 ????	       00 ec	   _Bit5_Request_Pending =	y
     61  3000 ????
     62  3000 ????	       00 ec	   _Bit4_Game_Over =	y
     63  3000 ????
     64  3000 ????	       00 ec	   _Bit3_Ball_Shot_Moving =	y
     65  3000 ????
     66  3000 ????	       00 ec	   _Bit2_Level_finished =	y
     67  3000 ????
     68  3000 ????	       00 ec	   _Bit1_Wall_Dir =	y
     69  3000 ????
     70  3000 ????	       00 ec	   _Bit0_roommate_Dir =	y
     71  3000 ????
     72  3000 ????	       00 ec	   _Bit_Game_State =	y
     73  3000 ????
     74  3000 ????	       00 86	   P1y_position =	player1y
     75  3000 ????	       00 e9	   P1y_velocity =	v
     76  3000 ????	       00 91	   M0y_position =	missile0y
     77  3000 ????	       00 e6	   M0y_velocity =	s
     78  3000 ????	       00 89	   Bally_position =	bally
     79  3000 ????	       00 e3	   Bally_velocity =	p
     80  3000 ????	       00 e1	   Safe_Point_P1_y =	n
     81  3000 ????
     82  3000 ????	       00 e0	   Safe_Point_P1_x =	m
     83  3000 ????
     84  3000 ????	       00 df	   _Bit1_Safe_Point_P1_Flip =	l
     85  3000 ????
     86  3000 ????	       00 df	   _Bit0_Safe_Point_reached =	l
     87  3000 ????
     88  3000 ????	       00 df	   _BitOp_Safe_Point =	l
     89  3000 ????
     90  3000 ????	       00 de	   roommate_type =	k
     91  3000 ????
     92  3000 ????	       00 dd	   roommate_move_x =	j
     93  3000 ????
     94  3000 ????	       00 dc	   extra_wall_move_x =	i
     95  3000 ????
     96  3000 ????	       00 db	   _Ch0_Counter =	h
     97  3000 ????
     98  3000 ????	       00 da	   _Ch0_Duration =	g
     99  3000 ????
    100  3000 ????	       00 d9	   _Ch0_Sound =	f
    101  3000 ????
    102  3000 ????	       00 d8	   _Bit3_P1_Dir_Right =	e
    103  3000 ????
    104  3000 ????	       00 d8	   _Bit2_P1_Dir_Left =	e
    105  3000 ????
    106  3000 ????	       00 d8	   _Bit1_P1_Dir_Down =	e
    107  3000 ????
    108  3000 ????	       00 d8	   _Bit0_P1_Dir_Up =	e
    109  3000 ????
    110  3000 ????	       00 d8	   _BitOp_P1_Dir =	e
    111  3000 ????
    112  3000 ????	       00 d7	   _Bit3_M0_Dir_Right =	d
    113  3000 ????
    114  3000 ????	       00 d7	   _Bit2_M0_Dir_Left =	d
    115  3000 ????
    116  3000 ????	       00 d7	   _Bit1_M0_Dir_Down =	d
    117  3000 ????
    118  3000 ????	       00 d7	   _Bit0_M0_Dir_Up =	d
    119  3000 ????
    120  3000 ????	       00 d7	   _BitOp_M0_Dir =	d
    121  3000 ????
    122  3000 ????	       00 d6	   _Bit3_Ball_Shot_Dir_Right2 =	c
    123  3000 ????
    124  3000 ????	       00 d6	   _Bit2_Ball_Shot_Dir_Right1 =	c
    125  3000 ????
    126  3000 ????	       00 d6	   _Bit1_Ball_Shot_Dir_Left2 =	c
    127  3000 ????
    128  3000 ????	       00 d6	   _Bit0_Ball_Shot_Dir_Left1 =	c
    129  3000 ????
    130  3000 ????	       00 d6	   _BitOp_Ball_Shot_Dir =	c
    131  3000 ????
    132  3000 ????	       00 d5	   frame_counter =	b
    133  3000 ????
    134  3000 ????	       00 d4	   delay_counter =	a
    135  3000 ????
    136  3000 ????	       00 95	   _sc3       =	score + 2
    137  3000 ????
    138  3000 ????	       00 94	   _sc2       =	score + 1
    139  3000 ????
    140  3000 ????	       00 93	   _sc1       =	score
    141  3000 ????
    142  3000 ????	       00 fe	   _FE	      =	$FE
    143  3000 ????
    144  3000 ????	       00 fc	   _FC	      =	$FC
    145  3000 ????
    146  3000 ????	       00 fa	   _FA	      =	$FA
    147  3000 ????
    148  3000 ????	       00 f8	   _F8	      =	$F8
    149  3000 ????
    150  3000 ????	       00 f6	   _F6	      =	$F6
    151  3000 ????
    152  3000 ????	       00 f4	   _F4	      =	$F4
    153  3000 ????
    154  3000 ????	       00 f2	   _F2	      =	$F2
    155  3000 ????
    156  3000 ????	       00 f0	   _F0	      =	$F0
    157  3000 ????
    158  3000 ????	       00 ee	   _EE	      =	$EE
    159  3000 ????
    160  3000 ????	       00 ec	   _EC	      =	$EC
    161  3000 ????
    162  3000 ????	       00 ea	   _EA	      =	$EA
    163  3000 ????
    164  3000 ????	       00 e8	   _E8	      =	$E8
    165  3000 ????
    166  3000 ????	       00 e6	   _E6	      =	$E6
    167  3000 ????
    168  3000 ????	       00 e4	   _E4	      =	$E4
    169  3000 ????
    170  3000 ????	       00 e2	   _E2	      =	$E2
    171  3000 ????
    172  3000 ????	       00 e0	   _E0	      =	$E0
    173  3000 ????
    174  3000 ????	       00 de	   _DE	      =	$DE
    175  3000 ????
    176  3000 ????	       00 dc	   _DC	      =	$DC
    177  3000 ????
    178  3000 ????	       00 da	   _DA	      =	$DA
    179  3000 ????
    180  3000 ????	       00 d8	   _D8	      =	$D8
    181  3000 ????
    182  3000 ????	       00 d6	   _D6	      =	$D6
    183  3000 ????
    184  3000 ????	       00 d4	   _D4	      =	$D4
    185  3000 ????
    186  3000 ????	       00 d2	   _D2	      =	$D2
    187  3000 ????
    188  3000 ????	       00 d0	   _D0	      =	$D0
    189  3000 ????
    190  3000 ????	       00 ce	   _CE	      =	$CE
    191  3000 ????
    192  3000 ????	       00 cc	   _CC	      =	$CC
    193  3000 ????
    194  3000 ????	       00 ca	   _CA	      =	$CA
    195  3000 ????
    196  3000 ????	       00 c8	   _C8	      =	$C8
    197  3000 ????
    198  3000 ????	       00 c6	   _C6	      =	$C6
    199  3000 ????
    200  3000 ????	       00 c4	   _C4	      =	$C4
    201  3000 ????
    202  3000 ????	       00 c2	   _C2	      =	$C2
    203  3000 ????
    204  3000 ????	       00 c0	   _C0	      =	$C0
    205  3000 ????
    206  3000 ????	       00 be	   _BE	      =	$BE
    207  3000 ????
    208  3000 ????	       00 bc	   _BC	      =	$BC
    209  3000 ????
    210  3000 ????	       00 ba	   _BA	      =	$BA
    211  3000 ????
    212  3000 ????	       00 b8	   _B8	      =	$B8
    213  3000 ????
    214  3000 ????	       00 b6	   _B6	      =	$B6
    215  3000 ????
    216  3000 ????	       00 b4	   _B4	      =	$B4
    217  3000 ????
    218  3000 ????	       00 b2	   _B2	      =	$B2
    219  3000 ????
    220  3000 ????	       00 b0	   _B0	      =	$B0
    221  3000 ????
    222  3000 ????	       00 ae	   _AE	      =	$AE
    223  3000 ????
    224  3000 ????	       00 ac	   _AC	      =	$AC
    225  3000 ????
    226  3000 ????	       00 aa	   _AA	      =	$AA
    227  3000 ????
    228  3000 ????	       00 a8	   _A8	      =	$A8
    229  3000 ????
    230  3000 ????	       00 a6	   _A6	      =	$A6
    231  3000 ????
    232  3000 ????	       00 a4	   _A4	      =	$A4
    233  3000 ????
    234  3000 ????	       00 a2	   _A2	      =	$A2
    235  3000 ????
    236  3000 ????	       00 a0	   _A0	      =	$A0
    237  3000 ????
    238  3000 ????	       00 9e	   _9E	      =	$9E
    239  3000 ????
    240  3000 ????	       00 9c	   _9C	      =	$9C
    241  3000 ????
    242  3000 ????	       00 9a	   _9A	      =	$9A
    243  3000 ????
    244  3000 ????	       00 98	   _98	      =	$98
    245  3000 ????
    246  3000 ????	       00 96	   _96	      =	$96
    247  3000 ????
    248  3000 ????	       00 94	   _94	      =	$94
    249  3000 ????
    250  3000 ????	       00 92	   _92	      =	$92
    251  3000 ????
    252  3000 ????	       00 90	   _90	      =	$90
    253  3000 ????
    254  3000 ????	       00 8e	   _8E	      =	$8E
    255  3000 ????
    256  3000 ????	       00 8c	   _8C	      =	$8C
    257  3000 ????
    258  3000 ????	       00 8a	   _8A	      =	$8A
    259  3000 ????
    260  3000 ????	       00 88	   _88	      =	$88
    261  3000 ????
    262  3000 ????	       00 86	   _86	      =	$86
    263  3000 ????
    264  3000 ????	       00 84	   _84	      =	$84
    265  3000 ????
    266  3000 ????	       00 82	   _82	      =	$82
    267  3000 ????
    268  3000 ????	       00 80	   _80	      =	$80
    269  3000 ????
    270  3000 ????	       00 7e	   _7E	      =	$7E
    271  3000 ????
    272  3000 ????	       00 7c	   _7C	      =	$7C
    273  3000 ????
    274  3000 ????	       00 7a	   _7A	      =	$7A
    275  3000 ????
    276  3000 ????	       00 78	   _78	      =	$78
    277  3000 ????
    278  3000 ????	       00 76	   _76	      =	$76
    279  3000 ????
    280  3000 ????	       00 74	   _74	      =	$74
    281  3000 ????
    282  3000 ????	       00 72	   _72	      =	$72
    283  3000 ????
    284  3000 ????	       00 70	   _70	      =	$70
    285  3000 ????
    286  3000 ????	       00 6e	   _6E	      =	$6E
    287  3000 ????
    288  3000 ????	       00 6c	   _6C	      =	$6C
    289  3000 ????
    290  3000 ????	       00 6a	   _6A	      =	$6A
    291  3000 ????
    292  3000 ????	       00 68	   _68	      =	$68
    293  3000 ????
    294  3000 ????	       00 66	   _66	      =	$66
    295  3000 ????
    296  3000 ????	       00 64	   _64	      =	$64
    297  3000 ????
    298  3000 ????	       00 62	   _62	      =	$62
    299  3000 ????
    300  3000 ????	       00 60	   _60	      =	$60
    301  3000 ????
    302  3000 ????	       00 5e	   _5E	      =	$5E
    303  3000 ????
    304  3000 ????	       00 5c	   _5C	      =	$5C
    305  3000 ????
    306  3000 ????	       00 5a	   _5A	      =	$5A
    307  3000 ????
    308  3000 ????	       00 58	   _58	      =	$58
    309  3000 ????
    310  3000 ????	       00 56	   _56	      =	$56
    311  3000 ????
    312  3000 ????	       00 54	   _54	      =	$54
    313  3000 ????
    314  3000 ????	       00 52	   _52	      =	$52
    315  3000 ????
    316  3000 ????	       00 50	   _50	      =	$50
    317  3000 ????
    318  3000 ????	       00 4e	   _4E	      =	$4E
    319  3000 ????
    320  3000 ????	       00 4c	   _4C	      =	$4C
    321  3000 ????
    322  3000 ????	       00 4a	   _4A	      =	$4A
    323  3000 ????
    324  3000 ????	       00 48	   _48	      =	$48
    325  3000 ????
    326  3000 ????	       00 46	   _46	      =	$46
    327  3000 ????
    328  3000 ????	       00 44	   _44	      =	$44
    329  3000 ????
    330  3000 ????	       00 42	   _42	      =	$42
    331  3000 ????
    332  3000 ????	       00 40	   _40	      =	$40
    333  3000 ????
    334  3000 ????	       00 3e	   _3E	      =	$3E
    335  3000 ????
    336  3000 ????	       00 3c	   _3C	      =	$3C
    337  3000 ????
    338  3000 ????	       00 3a	   _3A	      =	$3A
    339  3000 ????
    340  3000 ????	       00 38	   _38	      =	$38
    341  3000 ????
    342  3000 ????	       00 36	   _36	      =	$36
    343  3000 ????
    344  3000 ????	       00 34	   _34	      =	$34
    345  3000 ????
    346  3000 ????	       00 32	   _32	      =	$32
    347  3000 ????
    348  3000 ????	       00 30	   _30	      =	$30
    349  3000 ????
    350  3000 ????	       00 2e	   _2E	      =	$2E
    351  3000 ????
    352  3000 ????	       00 2c	   _2C	      =	$2C
    353  3000 ????
    354  3000 ????	       00 2a	   _2A	      =	$2A
    355  3000 ????
    356  3000 ????	       00 28	   _28	      =	$28
    357  3000 ????
    358  3000 ????	       00 26	   _26	      =	$26
    359  3000 ????
    360  3000 ????	       00 24	   _24	      =	$24
    361  3000 ????
    362  3000 ????	       00 22	   _22	      =	$22
    363  3000 ????
    364  3000 ????	       00 20	   _20	      =	$20
    365  3000 ????
    366  3000 ????	       00 1e	   _1E	      =	$1E
    367  3000 ????
    368  3000 ????	       00 1c	   _1C	      =	$1C
    369  3000 ????
    370  3000 ????	       00 1a	   _1A	      =	$1A
    371  3000 ????
    372  3000 ????	       00 18	   _18	      =	$18
    373  3000 ????
    374  3000 ????	       00 16	   _16	      =	$16
    375  3000 ????
    376  3000 ????	       00 14	   _14	      =	$14
    377  3000 ????
    378  3000 ????	       00 12	   _12	      =	$12
    379  3000 ????
    380  3000 ????	       00 10	   _10	      =	$10
    381  3000 ????
    382  3000 ????	       00 0e	   _0E	      =	$0E
    383  3000 ????
    384  3000 ????	       00 0c	   _0C	      =	$0C
    385  3000 ????
    386  3000 ????	       00 0a	   _0A	      =	$0A
    387  3000 ????
    388  3000 ????	       00 08	   _08	      =	$08
    389  3000 ????
    390  3000 ????	       00 06	   _06	      =	$06
    391  3000 ????
    392  3000 ????	       00 04	   _04	      =	$04
    393  3000 ????
    394  3000 ????	       00 02	   _02	      =	$02
    395  3000 ????
    396  3000 ????	       00 00	   _00	      =	$00
    397  3000 ????
    398  3000 ????	       00 08	   req_safe_point =	8
    399  3000 ????
    400  3000 ????	       00 07	   req_level_reset =	7
    401  3000 ????
    402  3000 ????	       00 06	   req_move_down =	6
    403  3000 ????
    404  3000 ????	       00 05	   req_move_right =	5
    405  3000 ????
    406  3000 ????	       00 04	   req_move_up =	4
    407  3000 ????
    408  3000 ????	       00 03	   req_move_left =	3
    409  3000 ????
    410  3000 ????	       00 02	   req_game_over =	2
    411  3000 ????
    412  3000 ????	       00 01	   req_level_up =	1
    413  3000 ????
    414  3000 ????	       00 00	   req_load   =	0
    415  3000 ????
    416  3000 ????	       00 18	   response_size_minus_1 =	24
    417  3000 ????
    418  3000 ????	       00 08	   scback     =	#$08
    419  3000 ????
    420  3000 ????	       00 94	   _M_Edge_Right =	148
    421  3000 ????
    422  3000 ????	       00 0e	   _M_Edge_Left =	14
    423  3000 ????
    424  3000 ????	       00 58	   _M_Edge_Bottom =	88
    425  3000 ????
    426  3000 ????	       00 02	   _M_Edge_Top =	2
    427  3000 ????
    428  3000 ????	       00 4c	   player_max_y =	76
    429  3000 ????
    430  3000 ????	       00 02	   player_min_y =	2
    431  3000 ????
    432  3000 ????	       00 86	   player_max_x =	134
    433  3000 ????
    434  3000 ????	       00 0a	   player_min_x =	10
    435  3000 ????
    436  3000 ????	       00 01	   pfscore    =	1
    437  3000 ????
    438  3000 ????	       00 04	   pfres      =	4
    439  3000 ????
    440  3000 ????	       00 01	   superchip  =	1
    441  3000 ????	       00 01	   bs_mask    =	1
    442  3000 ????	       00 08	   bankswitch =	8
    443  3000 ????	       1f f8	   bankswitch_hotspot =	$1FF8
    444  3000 ????	       00 01	   PFcolors   =	1
    445  3000 ????	       00 01	   player1colors =	1
------- FILE d:\Firmaplus\Firmaplus_intern\Atari\PlusROM\Projekte-batariBasic\CaveApocalypse\C.A.V.E. Apocalypse.bas.asm
      8  3000 ????				      ifconst	bankswitch
      9  3000 ????				      if	bankswitch == 8
     10  1000					      ORG	$1000
     11  1000					      RORG	$D000
     12  1000					      endif
     13  1000				  -	      if	bankswitch == 16
     14  1000				  -	      ORG	$1000
     15  1000				  -	      RORG	$9000
     16  1000					      endif
     17  1000				  -	      if	bankswitch == 32
     18  1000				  -	      ORG	$1000
     19  1000				  -	      RORG	$1000
     20  1000					      endif
     21  1000				  -	      if	bankswitch == 64
     22  1000				  -	      ORG	$1000
     23  1000				  -	      RORG	$1000
     24  1000					      endif
     25  1000				  -	      else
     26  1000				  -	      ORG	$F000
     27  1000					      endif
     28  1000					      repeat	256
     29  1000		       ff		      .byte.b	$ff
     28  1000					      repend
     29  1001		       ff		      .byte.b	$ff
     28  1001					      repend
     29  1002		       ff		      .byte.b	$ff
     28  1002					      repend
     29  1003		       ff		      .byte.b	$ff
     28  1003					      repend
     29  1004		       ff		      .byte.b	$ff
     28  1004					      repend
     29  1005		       ff		      .byte.b	$ff
     28  1005					      repend
     29  1006		       ff		      .byte.b	$ff
     28  1006					      repend
     29  1007		       ff		      .byte.b	$ff
     28  1007					      repend
     29  1008		       ff		      .byte.b	$ff
     28  1008					      repend
     29  1009		       ff		      .byte.b	$ff
     28  1009					      repend
     29  100a		       ff		      .byte.b	$ff
     28  100a					      repend
     29  100b		       ff		      .byte.b	$ff
     28  100b					      repend
     29  100c		       ff		      .byte.b	$ff
     28  100c					      repend
     29  100d		       ff		      .byte.b	$ff
     28  100d					      repend
     29  100e		       ff		      .byte.b	$ff
     28  100e					      repend
     29  100f		       ff		      .byte.b	$ff
     28  100f					      repend
     29  1010		       ff		      .byte.b	$ff
     28  1010					      repend
     29  1011		       ff		      .byte.b	$ff
     28  1011					      repend
     29  1012		       ff		      .byte.b	$ff
     28  1012					      repend
     29  1013		       ff		      .byte.b	$ff
     28  1013					      repend
     29  1014		       ff		      .byte.b	$ff
     28  1014					      repend
     29  1015		       ff		      .byte.b	$ff
     28  1015					      repend
     29  1016		       ff		      .byte.b	$ff
     28  1016					      repend
     29  1017		       ff		      .byte.b	$ff
     28  1017					      repend
     29  1018		       ff		      .byte.b	$ff
     28  1018					      repend
     29  1019		       ff		      .byte.b	$ff
     28  1019					      repend
     29  101a		       ff		      .byte.b	$ff
     28  101a					      repend
     29  101b		       ff		      .byte.b	$ff
     28  101b					      repend
     29  101c		       ff		      .byte.b	$ff
     28  101c					      repend
     29  101d		       ff		      .byte.b	$ff
     28  101d					      repend
     29  101e		       ff		      .byte.b	$ff
     28  101e					      repend
     29  101f		       ff		      .byte.b	$ff
     28  101f					      repend
     29  1020		       ff		      .byte.b	$ff
     28  1020					      repend
     29  1021		       ff		      .byte.b	$ff
     28  1021					      repend
     29  1022		       ff		      .byte.b	$ff
     28  1022					      repend
     29  1023		       ff		      .byte.b	$ff
     28  1023					      repend
     29  1024		       ff		      .byte.b	$ff
     28  1024					      repend
     29  1025		       ff		      .byte.b	$ff
     28  1025					      repend
     29  1026		       ff		      .byte.b	$ff
     28  1026					      repend
     29  1027		       ff		      .byte.b	$ff
     28  1027					      repend
     29  1028		       ff		      .byte.b	$ff
     28  1028					      repend
     29  1029		       ff		      .byte.b	$ff
     28  1029					      repend
     29  102a		       ff		      .byte.b	$ff
     28  102a					      repend
     29  102b		       ff		      .byte.b	$ff
     28  102b					      repend
     29  102c		       ff		      .byte.b	$ff
     28  102c					      repend
     29  102d		       ff		      .byte.b	$ff
     28  102d					      repend
     29  102e		       ff		      .byte.b	$ff
     28  102e					      repend
     29  102f		       ff		      .byte.b	$ff
     28  102f					      repend
     29  1030		       ff		      .byte.b	$ff
     28  1030					      repend
     29  1031		       ff		      .byte.b	$ff
     28  1031					      repend
     29  1032		       ff		      .byte.b	$ff
     28  1032					      repend
     29  1033		       ff		      .byte.b	$ff
     28  1033					      repend
     29  1034		       ff		      .byte.b	$ff
     28  1034					      repend
     29  1035		       ff		      .byte.b	$ff
     28  1035					      repend
     29  1036		       ff		      .byte.b	$ff
     28  1036					      repend
     29  1037		       ff		      .byte.b	$ff
     28  1037					      repend
     29  1038		       ff		      .byte.b	$ff
     28  1038					      repend
     29  1039		       ff		      .byte.b	$ff
     28  1039					      repend
     29  103a		       ff		      .byte.b	$ff
     28  103a					      repend
     29  103b		       ff		      .byte.b	$ff
     28  103b					      repend
     29  103c		       ff		      .byte.b	$ff
     28  103c					      repend
     29  103d		       ff		      .byte.b	$ff
     28  103d					      repend
     29  103e		       ff		      .byte.b	$ff
     28  103e					      repend
     29  103f		       ff		      .byte.b	$ff
     28  103f					      repend
     29  1040		       ff		      .byte.b	$ff
     28  1040					      repend
     29  1041		       ff		      .byte.b	$ff
     28  1041					      repend
     29  1042		       ff		      .byte.b	$ff
     28  1042					      repend
     29  1043		       ff		      .byte.b	$ff
     28  1043					      repend
     29  1044		       ff		      .byte.b	$ff
     28  1044					      repend
     29  1045		       ff		      .byte.b	$ff
     28  1045					      repend
     29  1046		       ff		      .byte.b	$ff
     28  1046					      repend
     29  1047		       ff		      .byte.b	$ff
     28  1047					      repend
     29  1048		       ff		      .byte.b	$ff
     28  1048					      repend
     29  1049		       ff		      .byte.b	$ff
     28  1049					      repend
     29  104a		       ff		      .byte.b	$ff
     28  104a					      repend
     29  104b		       ff		      .byte.b	$ff
     28  104b					      repend
     29  104c		       ff		      .byte.b	$ff
     28  104c					      repend
     29  104d		       ff		      .byte.b	$ff
     28  104d					      repend
     29  104e		       ff		      .byte.b	$ff
     28  104e					      repend
     29  104f		       ff		      .byte.b	$ff
     28  104f					      repend
     29  1050		       ff		      .byte.b	$ff
     28  1050					      repend
     29  1051		       ff		      .byte.b	$ff
     28  1051					      repend
     29  1052		       ff		      .byte.b	$ff
     28  1052					      repend
     29  1053		       ff		      .byte.b	$ff
     28  1053					      repend
     29  1054		       ff		      .byte.b	$ff
     28  1054					      repend
     29  1055		       ff		      .byte.b	$ff
     28  1055					      repend
     29  1056		       ff		      .byte.b	$ff
     28  1056					      repend
     29  1057		       ff		      .byte.b	$ff
     28  1057					      repend
     29  1058		       ff		      .byte.b	$ff
     28  1058					      repend
     29  1059		       ff		      .byte.b	$ff
     28  1059					      repend
     29  105a		       ff		      .byte.b	$ff
     28  105a					      repend
     29  105b		       ff		      .byte.b	$ff
     28  105b					      repend
     29  105c		       ff		      .byte.b	$ff
     28  105c					      repend
     29  105d		       ff		      .byte.b	$ff
     28  105d					      repend
     29  105e		       ff		      .byte.b	$ff
     28  105e					      repend
     29  105f		       ff		      .byte.b	$ff
     28  105f					      repend
     29  1060		       ff		      .byte.b	$ff
     28  1060					      repend
     29  1061		       ff		      .byte.b	$ff
     28  1061					      repend
     29  1062		       ff		      .byte.b	$ff
     28  1062					      repend
     29  1063		       ff		      .byte.b	$ff
     28  1063					      repend
     29  1064		       ff		      .byte.b	$ff
     28  1064					      repend
     29  1065		       ff		      .byte.b	$ff
     28  1065					      repend
     29  1066		       ff		      .byte.b	$ff
     28  1066					      repend
     29  1067		       ff		      .byte.b	$ff
     28  1067					      repend
     29  1068		       ff		      .byte.b	$ff
     28  1068					      repend
     29  1069		       ff		      .byte.b	$ff
     28  1069					      repend
     29  106a		       ff		      .byte.b	$ff
     28  106a					      repend
     29  106b		       ff		      .byte.b	$ff
     28  106b					      repend
     29  106c		       ff		      .byte.b	$ff
     28  106c					      repend
     29  106d		       ff		      .byte.b	$ff
     28  106d					      repend
     29  106e		       ff		      .byte.b	$ff
     28  106e					      repend
     29  106f		       ff		      .byte.b	$ff
     28  106f					      repend
     29  1070		       ff		      .byte.b	$ff
     28  1070					      repend
     29  1071		       ff		      .byte.b	$ff
     28  1071					      repend
     29  1072		       ff		      .byte.b	$ff
     28  1072					      repend
     29  1073		       ff		      .byte.b	$ff
     28  1073					      repend
     29  1074		       ff		      .byte.b	$ff
     28  1074					      repend
     29  1075		       ff		      .byte.b	$ff
     28  1075					      repend
     29  1076		       ff		      .byte.b	$ff
     28  1076					      repend
     29  1077		       ff		      .byte.b	$ff
     28  1077					      repend
     29  1078		       ff		      .byte.b	$ff
     28  1078					      repend
     29  1079		       ff		      .byte.b	$ff
     28  1079					      repend
     29  107a		       ff		      .byte.b	$ff
     28  107a					      repend
     29  107b		       ff		      .byte.b	$ff
     28  107b					      repend
     29  107c		       ff		      .byte.b	$ff
     28  107c					      repend
     29  107d		       ff		      .byte.b	$ff
     28  107d					      repend
     29  107e		       ff		      .byte.b	$ff
     28  107e					      repend
     29  107f		       ff		      .byte.b	$ff
     28  107f					      repend
     29  1080		       ff		      .byte.b	$ff
     28  1080					      repend
     29  1081		       ff		      .byte.b	$ff
     28  1081					      repend
     29  1082		       ff		      .byte.b	$ff
     28  1082					      repend
     29  1083		       ff		      .byte.b	$ff
     28  1083					      repend
     29  1084		       ff		      .byte.b	$ff
     28  1084					      repend
     29  1085		       ff		      .byte.b	$ff
     28  1085					      repend
     29  1086		       ff		      .byte.b	$ff
     28  1086					      repend
     29  1087		       ff		      .byte.b	$ff
     28  1087					      repend
     29  1088		       ff		      .byte.b	$ff
     28  1088					      repend
     29  1089		       ff		      .byte.b	$ff
     28  1089					      repend
     29  108a		       ff		      .byte.b	$ff
     28  108a					      repend
     29  108b		       ff		      .byte.b	$ff
     28  108b					      repend
     29  108c		       ff		      .byte.b	$ff
     28  108c					      repend
     29  108d		       ff		      .byte.b	$ff
     28  108d					      repend
     29  108e		       ff		      .byte.b	$ff
     28  108e					      repend
     29  108f		       ff		      .byte.b	$ff
     28  108f					      repend
     29  1090		       ff		      .byte.b	$ff
     28  1090					      repend
     29  1091		       ff		      .byte.b	$ff
     28  1091					      repend
     29  1092		       ff		      .byte.b	$ff
     28  1092					      repend
     29  1093		       ff		      .byte.b	$ff
     28  1093					      repend
     29  1094		       ff		      .byte.b	$ff
     28  1094					      repend
     29  1095		       ff		      .byte.b	$ff
     28  1095					      repend
     29  1096		       ff		      .byte.b	$ff
     28  1096					      repend
     29  1097		       ff		      .byte.b	$ff
     28  1097					      repend
     29  1098		       ff		      .byte.b	$ff
     28  1098					      repend
     29  1099		       ff		      .byte.b	$ff
     28  1099					      repend
     29  109a		       ff		      .byte.b	$ff
     28  109a					      repend
     29  109b		       ff		      .byte.b	$ff
     28  109b					      repend
     29  109c		       ff		      .byte.b	$ff
     28  109c					      repend
     29  109d		       ff		      .byte.b	$ff
     28  109d					      repend
     29  109e		       ff		      .byte.b	$ff
     28  109e					      repend
     29  109f		       ff		      .byte.b	$ff
     28  109f					      repend
     29  10a0		       ff		      .byte.b	$ff
     28  10a0					      repend
     29  10a1		       ff		      .byte.b	$ff
     28  10a1					      repend
     29  10a2		       ff		      .byte.b	$ff
     28  10a2					      repend
     29  10a3		       ff		      .byte.b	$ff
     28  10a3					      repend
     29  10a4		       ff		      .byte.b	$ff
     28  10a4					      repend
     29  10a5		       ff		      .byte.b	$ff
     28  10a5					      repend
     29  10a6		       ff		      .byte.b	$ff
     28  10a6					      repend
     29  10a7		       ff		      .byte.b	$ff
     28  10a7					      repend
     29  10a8		       ff		      .byte.b	$ff
     28  10a8					      repend
     29  10a9		       ff		      .byte.b	$ff
     28  10a9					      repend
     29  10aa		       ff		      .byte.b	$ff
     28  10aa					      repend
     29  10ab		       ff		      .byte.b	$ff
     28  10ab					      repend
     29  10ac		       ff		      .byte.b	$ff
     28  10ac					      repend
     29  10ad		       ff		      .byte.b	$ff
     28  10ad					      repend
     29  10ae		       ff		      .byte.b	$ff
     28  10ae					      repend
     29  10af		       ff		      .byte.b	$ff
     28  10af					      repend
     29  10b0		       ff		      .byte.b	$ff
     28  10b0					      repend
     29  10b1		       ff		      .byte.b	$ff
     28  10b1					      repend
     29  10b2		       ff		      .byte.b	$ff
     28  10b2					      repend
     29  10b3		       ff		      .byte.b	$ff
     28  10b3					      repend
     29  10b4		       ff		      .byte.b	$ff
     28  10b4					      repend
     29  10b5		       ff		      .byte.b	$ff
     28  10b5					      repend
     29  10b6		       ff		      .byte.b	$ff
     28  10b6					      repend
     29  10b7		       ff		      .byte.b	$ff
     28  10b7					      repend
     29  10b8		       ff		      .byte.b	$ff
     28  10b8					      repend
     29  10b9		       ff		      .byte.b	$ff
     28  10b9					      repend
     29  10ba		       ff		      .byte.b	$ff
     28  10ba					      repend
     29  10bb		       ff		      .byte.b	$ff
     28  10bb					      repend
     29  10bc		       ff		      .byte.b	$ff
     28  10bc					      repend
     29  10bd		       ff		      .byte.b	$ff
     28  10bd					      repend
     29  10be		       ff		      .byte.b	$ff
     28  10be					      repend
     29  10bf		       ff		      .byte.b	$ff
     28  10bf					      repend
     29  10c0		       ff		      .byte.b	$ff
     28  10c0					      repend
     29  10c1		       ff		      .byte.b	$ff
     28  10c1					      repend
     29  10c2		       ff		      .byte.b	$ff
     28  10c2					      repend
     29  10c3		       ff		      .byte.b	$ff
     28  10c3					      repend
     29  10c4		       ff		      .byte.b	$ff
     28  10c4					      repend
     29  10c5		       ff		      .byte.b	$ff
     28  10c5					      repend
     29  10c6		       ff		      .byte.b	$ff
     28  10c6					      repend
     29  10c7		       ff		      .byte.b	$ff
     28  10c7					      repend
     29  10c8		       ff		      .byte.b	$ff
     28  10c8					      repend
     29  10c9		       ff		      .byte.b	$ff
     28  10c9					      repend
     29  10ca		       ff		      .byte.b	$ff
     28  10ca					      repend
     29  10cb		       ff		      .byte.b	$ff
     28  10cb					      repend
     29  10cc		       ff		      .byte.b	$ff
     28  10cc					      repend
     29  10cd		       ff		      .byte.b	$ff
     28  10cd					      repend
     29  10ce		       ff		      .byte.b	$ff
     28  10ce					      repend
     29  10cf		       ff		      .byte.b	$ff
     28  10cf					      repend
     29  10d0		       ff		      .byte.b	$ff
     28  10d0					      repend
     29  10d1		       ff		      .byte.b	$ff
     28  10d1					      repend
     29  10d2		       ff		      .byte.b	$ff
     28  10d2					      repend
     29  10d3		       ff		      .byte.b	$ff
     28  10d3					      repend
     29  10d4		       ff		      .byte.b	$ff
     28  10d4					      repend
     29  10d5		       ff		      .byte.b	$ff
     28  10d5					      repend
     29  10d6		       ff		      .byte.b	$ff
     28  10d6					      repend
     29  10d7		       ff		      .byte.b	$ff
     28  10d7					      repend
     29  10d8		       ff		      .byte.b	$ff
     28  10d8					      repend
     29  10d9		       ff		      .byte.b	$ff
     28  10d9					      repend
     29  10da		       ff		      .byte.b	$ff
     28  10da					      repend
     29  10db		       ff		      .byte.b	$ff
     28  10db					      repend
     29  10dc		       ff		      .byte.b	$ff
     28  10dc					      repend
     29  10dd		       ff		      .byte.b	$ff
     28  10dd					      repend
     29  10de		       ff		      .byte.b	$ff
     28  10de					      repend
     29  10df		       ff		      .byte.b	$ff
     28  10df					      repend
     29  10e0		       ff		      .byte.b	$ff
     28  10e0					      repend
     29  10e1		       ff		      .byte.b	$ff
     28  10e1					      repend
     29  10e2		       ff		      .byte.b	$ff
     28  10e2					      repend
     29  10e3		       ff		      .byte.b	$ff
     28  10e3					      repend
     29  10e4		       ff		      .byte.b	$ff
     28  10e4					      repend
     29  10e5		       ff		      .byte.b	$ff
     28  10e5					      repend
     29  10e6		       ff		      .byte.b	$ff
     28  10e6					      repend
     29  10e7		       ff		      .byte.b	$ff
     28  10e7					      repend
     29  10e8		       ff		      .byte.b	$ff
     28  10e8					      repend
     29  10e9		       ff		      .byte.b	$ff
     28  10e9					      repend
     29  10ea		       ff		      .byte.b	$ff
     28  10ea					      repend
     29  10eb		       ff		      .byte.b	$ff
     28  10eb					      repend
     29  10ec		       ff		      .byte.b	$ff
     28  10ec					      repend
     29  10ed		       ff		      .byte.b	$ff
     28  10ed					      repend
     29  10ee		       ff		      .byte.b	$ff
     28  10ee					      repend
     29  10ef		       ff		      .byte.b	$ff
     28  10ef					      repend
     29  10f0		       ff		      .byte.b	$ff
     28  10f0					      repend
     29  10f1		       ff		      .byte.b	$ff
     28  10f1					      repend
     29  10f2		       ff		      .byte.b	$ff
     28  10f2					      repend
     29  10f3		       ff		      .byte.b	$ff
     28  10f3					      repend
     29  10f4		       ff		      .byte.b	$ff
     28  10f4					      repend
     29  10f5		       ff		      .byte.b	$ff
     28  10f5					      repend
     29  10f6		       ff		      .byte.b	$ff
     28  10f6					      repend
     29  10f7		       ff		      .byte.b	$ff
     28  10f7					      repend
     29  10f8		       ff		      .byte.b	$ff
     28  10f8					      repend
     29  10f9		       ff		      .byte.b	$ff
     28  10f9					      repend
     29  10fa		       ff		      .byte.b	$ff
     28  10fa					      repend
     29  10fb		       ff		      .byte.b	$ff
     28  10fb					      repend
     29  10fc		       ff		      .byte.b	$ff
     28  10fc					      repend
     29  10fd		       ff		      .byte.b	$ff
     28  10fd					      repend
     29  10fe		       ff		      .byte.b	$ff
     28  10fe					      repend
     29  10ff		       ff		      .byte.b	$ff
     30  1100					      repend
     31  1100				   game
     32  1100				   .L00 		;  inline PlusROM_functions.asm
     33  1100
------- FILE PlusROM_functions.asm LEVEL 2 PASS 3
      0  1100					      include	PlusROM_functions.asm
      1  1100		       00 01	   PlusROM_functions =	1
      2  1100		       1f f0	   WriteToBuffer =	$1ff0
      3  1100		       1f f1	   WriteSendBuffer =	$1ff1
      4  1100		       1f f2	   ReceiveBuffer =	$1ff2
      5  1100		       1f f3	   ReceiveBufferSize =	$1ff3
      6  1100
      7  1100					      MAC	set_plusrom_api
      8  1100				   PlusROM_API
      9  1100					      .byte	{1}, 0, {2}, 0
     10  1100					      ENDM		; {1} = path, {2} = domain
     11  1100
------- FILE d:\Firmaplus\Firmaplus_intern\Atari\PlusROM\Projekte-batariBasic\CaveApocalypse\C.A.V.E. Apocalypse.bas.asm
     35  1100
     36  1100				   .
     37  1100							; 
     38  1100
     39  1100				   .L01 		;  set kernel_options pfcolors player1colors
     40  1100
     41  1100				   .L02 		;  set romsize 8kSC
     42  1100
     43  1100				   .L03 		;  set smartbranching on
     44  1100
     45  1100				   .
     46  1100							; 
     47  1100
     48  1100				   .L04 		;  const pfres = 4
     49  1100
     50  1100				   .L05 		;  const pfscore  =  1
     51  1100
     52  1100				   .
     53  1100							; 
     54  1100
     55  1100				   .L06 		;  rem gravity is acceleration (https://atariage.com/forums/topic/226881-gravity/?do=findComment&comment=3017307)
     56  1100
     57  1100				   .L07 		;  rem the smallest fraction is 1/256 rounded up here to 0.004
     58  1100
     59  1100				   .L08 		;  rem assuming gravity is applied each drawscreen this should
     60  1100
     61  1100				   .L09 		;  rem work out to ~7 pixels in 1 second, 28 pixels in 2 seconds
     62  1100
     63  1100				   .L010		;  rem 63 pixels in 3 seconds
     64  1100
     65  1100							;.gravity_player1.0.004.
     66  1100				   .L011		;  def gravity_player1 = 0.004
     67  1100
     68  1100							;.gravity_missile0.0.024.
     69  1100				   .L012		;  def gravity_missile0 = 0.024
     70  1100
     71  1100				   .
     72  1100							; 
     73  1100
     74  1100				   .L013		;  const player_min_x	=  10
     75  1100
     76  1100				   .L014		;  const player_max_x	=  134
     77  1100
     78  1100				   .L015		;  const player_min_y	=  2
     79  1100
     80  1100				   .L016		;  const player_max_y	=  76
     81  1100
     82  1100				   .L017		;  const _M_Edge_Top  =  2
     83  1100
     84  1100				   .L018		;  const _M_Edge_Bottom  =  88
     85  1100
     86  1100				   .L019		;  const _M_Edge_Left	=  14
     87  1100
     88  1100				   .L020		;  const _M_Edge_Right  =  148
     89  1100
     90  1100				   .
     91  1100							; 
     92  1100
     93  1100				   .L021		;  const scback  =  #$08
     94  1100
     95  1100				   .
     96  1100							; 
     97  1100
     98  1100				   .L022		;  const response_size_minus_1  =  24
     99  1100
    100  1100				   .
    101  1100							; 
    102  1100
    103  1100				   .
    104  1100							; 
    105  1100
    106  1100				   .
    107  1100							; 
    108  1100
    109  1100				   .
    110  1100							; 
    111  1100
    112  1100				   .L023		;  const req_load  =  0
    113  1100
    114  1100				   .L024		;  const req_level_up	=  1
    115  1100
    116  1100				   .L025		;  const req_game_over  =  2
    117  1100
    118  1100				   .L026		;  const req_move_left  =  3
    119  1100
    120  1100				   .L027		;  const req_move_up  =  4
    121  1100
    122  1100				   .L028		;  const req_move_right  =  5
    123  1100
    124  1100				   .L029		;  const req_move_down  =  6
    125  1100
    126  1100				   .L030		;  const req_level_reset  =  7
    127  1100
    128  1100				   .L031		;  const req_safe_point  =  8
    129  1100
    130  1100				   .
    131  1100							; 
    132  1100
    133  1100				   .L032		;  const _00  =  $00
    134  1100
    135  1100				   .L033		;  const _02  =  $02
    136  1100
    137  1100				   .L034		;  const _04  =  $04
    138  1100
    139  1100				   .L035		;  const _06  =  $06
    140  1100
    141  1100				   .L036		;  const _08  =  $08
    142  1100
    143  1100				   .L037		;  const _0A  =  $0A
    144  1100
    145  1100				   .L038		;  const _0C  =  $0C
    146  1100
    147  1100				   .L039		;  const _0E  =  $0E
    148  1100
    149  1100				   .L040		;  const _10  =  $10
    150  1100
    151  1100				   .L041		;  const _12  =  $12
    152  1100
    153  1100				   .L042		;  const _14  =  $14
    154  1100
    155  1100				   .L043		;  const _16  =  $16
    156  1100
    157  1100				   .L044		;  const _18  =  $18
    158  1100
    159  1100				   .L045		;  const _1A  =  $1A
    160  1100
    161  1100				   .L046		;  const _1C  =  $1C
    162  1100
    163  1100				   .L047		;  const _1E  =  $1E
    164  1100
    165  1100				   .L048		;  const _20  =  $20
    166  1100
    167  1100				   .L049		;  const _22  =  $22
    168  1100
    169  1100				   .L050		;  const _24  =  $24
    170  1100
    171  1100				   .L051		;  const _26  =  $26
    172  1100
    173  1100				   .L052		;  const _28  =  $28
    174  1100
    175  1100				   .L053		;  const _2A  =  $2A
    176  1100
    177  1100				   .L054		;  const _2C  =  $2C
    178  1100
    179  1100				   .L055		;  const _2E  =  $2E
    180  1100
    181  1100				   .L056		;  const _30  =  $30
    182  1100
    183  1100				   .L057		;  const _32  =  $32
    184  1100
    185  1100				   .L058		;  const _34  =  $34
    186  1100
    187  1100				   .L059		;  const _36  =  $36
    188  1100
    189  1100				   .L060		;  const _38  =  $38
    190  1100
    191  1100				   .L061		;  const _3A  =  $3A
    192  1100
    193  1100				   .L062		;  const _3C  =  $3C
    194  1100
    195  1100				   .L063		;  const _3E  =  $3E
    196  1100
    197  1100				   .L064		;  const _40  =  $40
    198  1100
    199  1100				   .L065		;  const _42  =  $42
    200  1100
    201  1100				   .L066		;  const _44  =  $44
    202  1100
    203  1100				   .L067		;  const _46  =  $46
    204  1100
    205  1100				   .L068		;  const _48  =  $48
    206  1100
    207  1100				   .L069		;  const _4A  =  $4A
    208  1100
    209  1100				   .L070		;  const _4C  =  $4C
    210  1100
    211  1100				   .L071		;  const _4E  =  $4E
    212  1100
    213  1100				   .L072		;  const _50  =  $50
    214  1100
    215  1100				   .L073		;  const _52  =  $52
    216  1100
    217  1100				   .L074		;  const _54  =  $54
    218  1100
    219  1100				   .L075		;  const _56  =  $56
    220  1100
    221  1100				   .L076		;  const _58  =  $58
    222  1100
    223  1100				   .L077		;  const _5A  =  $5A
    224  1100
    225  1100				   .L078		;  const _5C  =  $5C
    226  1100
    227  1100				   .L079		;  const _5E  =  $5E
    228  1100
    229  1100				   .L080		;  const _60  =  $60
    230  1100
    231  1100				   .L081		;  const _62  =  $62
    232  1100
    233  1100				   .L082		;  const _64  =  $64
    234  1100
    235  1100				   .L083		;  const _66  =  $66
    236  1100
    237  1100				   .L084		;  const _68  =  $68
    238  1100
    239  1100				   .L085		;  const _6A  =  $6A
    240  1100
    241  1100				   .L086		;  const _6C  =  $6C
    242  1100
    243  1100				   .L087		;  const _6E  =  $6E
    244  1100
    245  1100				   .L088		;  const _70  =  $70
    246  1100
    247  1100				   .L089		;  const _72  =  $72
    248  1100
    249  1100				   .L090		;  const _74  =  $74
    250  1100
    251  1100				   .L091		;  const _76  =  $76
    252  1100
    253  1100				   .L092		;  const _78  =  $78
    254  1100
    255  1100				   .L093		;  const _7A  =  $7A
    256  1100
    257  1100				   .L094		;  const _7C  =  $7C
    258  1100
    259  1100				   .L095		;  const _7E  =  $7E
    260  1100
    261  1100				   .L096		;  const _80  =  $80
    262  1100
    263  1100				   .L097		;  const _82  =  $82
    264  1100
    265  1100				   .L098		;  const _84  =  $84
    266  1100
    267  1100				   .L099		;  const _86  =  $86
    268  1100
    269  1100				   .L0100		;  const _88  =  $88
    270  1100
    271  1100				   .L0101		;  const _8A  =  $8A
    272  1100
    273  1100				   .L0102		;  const _8C  =  $8C
    274  1100
    275  1100				   .L0103		;  const _8E  =  $8E
    276  1100
    277  1100				   .L0104		;  const _90  =  $90
    278  1100
    279  1100				   .L0105		;  const _92  =  $92
    280  1100
    281  1100				   .L0106		;  const _94  =  $94
    282  1100
    283  1100				   .L0107		;  const _96  =  $96
    284  1100
    285  1100				   .L0108		;  const _98  =  $98
    286  1100
    287  1100				   .L0109		;  const _9A  =  $9A
    288  1100
    289  1100				   .L0110		;  const _9C  =  $9C
    290  1100
    291  1100				   .L0111		;  const _9E  =  $9E
    292  1100
    293  1100				   .L0112		;  const _A0  =  $A0
    294  1100
    295  1100				   .L0113		;  const _A2  =  $A2
    296  1100
    297  1100				   .L0114		;  const _A4  =  $A4
    298  1100
    299  1100				   .L0115		;  const _A6  =  $A6
    300  1100
    301  1100				   .L0116		;  const _A8  =  $A8
    302  1100
    303  1100				   .L0117		;  const _AA  =  $AA
    304  1100
    305  1100				   .L0118		;  const _AC  =  $AC
    306  1100
    307  1100				   .L0119		;  const _AE  =  $AE
    308  1100
    309  1100				   .L0120		;  const _B0  =  $B0
    310  1100
    311  1100				   .L0121		;  const _B2  =  $B2
    312  1100
    313  1100				   .L0122		;  const _B4  =  $B4
    314  1100
    315  1100				   .L0123		;  const _B6  =  $B6
    316  1100
    317  1100				   .L0124		;  const _B8  =  $B8
    318  1100
    319  1100				   .L0125		;  const _BA  =  $BA
    320  1100
    321  1100				   .L0126		;  const _BC  =  $BC
    322  1100
    323  1100				   .L0127		;  const _BE  =  $BE
    324  1100
    325  1100				   .L0128		;  const _C0  =  $C0
    326  1100
    327  1100				   .L0129		;  const _C2  =  $C2
    328  1100
    329  1100				   .L0130		;  const _C4  =  $C4
    330  1100
    331  1100				   .L0131		;  const _C6  =  $C6
    332  1100
    333  1100				   .L0132		;  const _C8  =  $C8
    334  1100
    335  1100				   .L0133		;  const _CA  =  $CA
    336  1100
    337  1100				   .L0134		;  const _CC  =  $CC
    338  1100
    339  1100				   .L0135		;  const _CE  =  $CE
    340  1100
    341  1100				   .L0136		;  const _D0  =  $D0
    342  1100
    343  1100				   .L0137		;  const _D2  =  $D2
    344  1100
    345  1100				   .L0138		;  const _D4  =  $D4
    346  1100
    347  1100				   .L0139		;  const _D6  =  $D6
    348  1100
    349  1100				   .L0140		;  const _D8  =  $D8
    350  1100
    351  1100				   .L0141		;  const _DA  =  $DA
    352  1100
    353  1100				   .L0142		;  const _DC  =  $DC
    354  1100
    355  1100				   .L0143		;  const _DE  =  $DE
    356  1100
    357  1100				   .L0144		;  const _E0  =  $E0
    358  1100
    359  1100				   .L0145		;  const _E2  =  $E2
    360  1100
    361  1100				   .L0146		;  const _E4  =  $E4
    362  1100
    363  1100				   .L0147		;  const _E6  =  $E6
    364  1100
    365  1100				   .L0148		;  const _E8  =  $E8
    366  1100
    367  1100				   .L0149		;  const _EA  =  $EA
    368  1100
    369  1100				   .L0150		;  const _EC  =  $EC
    370  1100
    371  1100				   .L0151		;  const _EE  =  $EE
    372  1100
    373  1100				   .L0152		;  const _F0  =  $F0
    374  1100
    375  1100				   .L0153		;  const _F2  =  $F2
    376  1100
    377  1100				   .L0154		;  const _F4  =  $F4
    378  1100
    379  1100				   .L0155		;  const _F6  =  $F6
    380  1100
    381  1100				   .L0156		;  const _F8  =  $F8
    382  1100
    383  1100				   .L0157		;  const _FA  =  $FA
    384  1100
    385  1100				   .L0158		;  const _FC  =  $FC
    386  1100
    387  1100				   .L0159		;  const _FE  =  $FE
    388  1100
    389  1100				   .
    390  1100							; 
    391  1100
    392  1100				   .
    393  1100							; 
    394  1100
    395  1100				   .
    396  1100							; 
    397  1100
    398  1100				   .
    399  1100							; 
    400  1100
    401  1100				   .
    402  1100							; 
    403  1100
    404  1100				   .
    405  1100							; 
    406  1100
    407  1100				   .
    408  1100							; 
    409  1100
    410  1100				   .
    411  1100							; 
    412  1100
    413  1100				   .
    414  1100							; 
    415  1100
    416  1100				   .
    417  1100							; 
    418  1100
    419  1100				   .
    420  1100							; 
    421  1100
    422  1100				   .
    423  1100							; 
    424  1100
    425  1100				   .
    426  1100							; 
    427  1100
    428  1100				   .
    429  1100							; 
    430  1100
    431  1100				   .
    432  1100							; 
    433  1100
    434  1100				   .
    435  1100							; 
    436  1100
    437  1100				   .
    438  1100							; 
    439  1100
    440  1100				   .
    441  1100							; 
    442  1100
    443  1100				   .
    444  1100							; 
    445  1100
    446  1100				   .
    447  1100							; 
    448  1100
    449  1100				   .
    450  1100							; 
    451  1100
    452  1100				   .
    453  1100							; 
    454  1100
    455  1100				   .
    456  1100							; 
    457  1100
    458  1100				   .
    459  1100							; 
    460  1100
    461  1100				   .
    462  1100							; 
    463  1100
    464  1100				   .
    465  1100							; 
    466  1100
    467  1100				   .
    468  1100							; 
    469  1100
    470  1100				   .
    471  1100							; 
    472  1100
    473  1100				   .
    474  1100							; 
    475  1100
    476  1100				   .
    477  1100							; 
    478  1100
    479  1100				   .
    480  1100							; 
    481  1100
    482  1100				   .
    483  1100							; 
    484  1100
    485  1100				   .
    486  1100							; 
    487  1100
    488  1100				   .
    489  1100							; 
    490  1100
    491  1100				   .
    492  1100							; 
    493  1100
    494  1100				   .
    495  1100							; 
    496  1100
    497  1100				   .
    498  1100							; 
    499  1100
    500  1100				   .
    501  1100							; 
    502  1100
    503  1100				   .
    504  1100							; 
    505  1100
    506  1100				   .
    507  1100							; 
    508  1100
    509  1100				   .
    510  1100							; 
    511  1100
    512  1100				   .
    513  1100							; 
    514  1100
    515  1100				   .
    516  1100							; 
    517  1100
    518  1100				   .
    519  1100							; 
    520  1100
    521  1100				   .
    522  1100							; 
    523  1100
    524  1100				   .
    525  1100							; 
    526  1100
    527  1100				   .
    528  1100							; 
    529  1100
    530  1100				   .
    531  1100							; 
    532  1100
    533  1100				   .
    534  1100							; 
    535  1100
    536  1100				   .
    537  1100							; 
    538  1100
    539  1100				   .
    540  1100							; 
    541  1100
    542  1100				   .
    543  1100							; 
    544  1100
    545  1100				   .
    546  1100							; 
    547  1100
    548  1100				   .
    549  1100							; 
    550  1100
    551  1100				   .
    552  1100							; 
    553  1100
    554  1100				   .
    555  1100							; 
    556  1100
    557  1100				   .
    558  1100							; 
    559  1100
    560  1100				   .
    561  1100							; 
    562  1100
    563  1100				   .
    564  1100							; 
    565  1100
    566  1100				   .
    567  1100							; 
    568  1100
    569  1100				   .
    570  1100							; 
    571  1100
    572  1100				   .
    573  1100							; 
    574  1100
    575  1100				   .
    576  1100							; 
    577  1100
    578  1100				   .
    579  1100							; 
    580  1100
    581  1100				   .
    582  1100							; 
    583  1100
    584  1100				   .
    585  1100							; 
    586  1100
    587  1100				   .
    588  1100							; 
    589  1100
    590  1100				   .
    591  1100							; 
    592  1100
    593  1100				   .
    594  1100							; 
    595  1100
    596  1100				   .
    597  1100							; 
    598  1100
    599  1100				   .
    600  1100							; 
    601  1100
    602  1100				   .
    603  1100							; 
    604  1100
    605  1100				   .
    606  1100							; 
    607  1100
    608  1100				   .
    609  1100							; 
    610  1100
    611  1100				   .
    612  1100							; 
    613  1100
    614  1100				   .
    615  1100							; 
    616  1100
    617  1100				   .
    618  1100							; 
    619  1100
    620  1100				   .
    621  1100							; 
    622  1100
    623  1100				   .
    624  1100							; 
    625  1100
    626  1100				   .
    627  1100							; 
    628  1100
    629  1100				   .
    630  1100							; 
    631  1100
    632  1100				   .
    633  1100							; 
    634  1100
    635  1100				   .
    636  1100							; 
    637  1100
    638  1100				   .
    639  1100							; 
    640  1100
    641  1100				   .
    642  1100							; 
    643  1100
    644  1100				   .
    645  1100							; 
    646  1100
    647  1100				   .
    648  1100							; 
    649  1100
    650  1100				   .
    651  1100							; 
    652  1100
    653  1100				   .
    654  1100							; 
    655  1100
    656  1100				   .
    657  1100							; 
    658  1100
    659  1100				   .
    660  1100							; 
    661  1100
    662  1100				   .
    663  1100							; 
    664  1100
    665  1100				   .
    666  1100							; 
    667  1100
    668  1100				   .
    669  1100							; 
    670  1100
    671  1100				   .
    672  1100							; 
    673  1100
    674  1100				   .
    675  1100							; 
    676  1100
    677  1100				   .
    678  1100							; 
    679  1100
    680  1100				   .
    681  1100							; 
    682  1100
    683  1100				   .
    684  1100							; 
    685  1100
    686  1100				   .
    687  1100							; 
    688  1100
    689  1100				   .
    690  1100							; 
    691  1100
    692  1100				   .
    693  1100							; 
    694  1100
    695  1100				   .
    696  1100							; 
    697  1100
    698  1100				   .
    699  1100							; 
    700  1100
    701  1100				   .
    702  1100							; 
    703  1100
    704  1100				   .
    705  1100							; 
    706  1100
    707  1100				   .
    708  1100							; 
    709  1100
    710  1100				   .
    711  1100							; 
    712  1100
    713  1100				   .
    714  1100							; 
    715  1100
    716  1100				   .
    717  1100							; 
    718  1100
    719  1100				   .
    720  1100							; 
    721  1100
    722  1100				   .
    723  1100							; 
    724  1100
    725  1100				   .
    726  1100							; 
    727  1100
    728  1100				   .
    729  1100							; 
    730  1100
    731  1100				   .
    732  1100							; 
    733  1100
    734  1100				   .
    735  1100							; 
    736  1100
    737  1100				   .
    738  1100							; 
    739  1100
    740  1100				   .
    741  1100							; 
    742  1100
    743  1100				   .
    744  1100							; 
    745  1100
    746  1100				   .
    747  1100							; 
    748  1100
    749  1100				   .
    750  1100							; 
    751  1100
    752  1100				   .
    753  1100							; 
    754  1100
    755  1100				   .
    756  1100							; 
    757  1100
    758  1100				   .
    759  1100							; 
    760  1100
    761  1100				   .
    762  1100							; 
    763  1100
    764  1100				   .
    765  1100							; 
    766  1100
    767  1100				   .
    768  1100							; 
    769  1100
    770  1100				   .
    771  1100							; 
    772  1100
    773  1100				   .
    774  1100							; 
    775  1100
    776  1100				   .
    777  1100							; 
    778  1100
    779  1100				   .
    780  1100							; 
    781  1100
    782  1100				   .
    783  1100							; 
    784  1100
    785  1100				   .
    786  1100							; 
    787  1100
    788  1100				   .
    789  1100							; 
    790  1100
    791  1100				   .
    792  1100							; 
    793  1100
    794  1100				   .
    795  1100							; 
    796  1100
    797  1100				   .
    798  1100							; 
    799  1100
    800  1100				   .
    801  1100							; 
    802  1100
    803  1100				   .
    804  1100							; 
    805  1100
    806  1100				   .
    807  1100							; 
    808  1100
    809  1100				   .
    810  1100							; 
    811  1100
    812  1100				   .
    813  1100							; 
    814  1100
    815  1100				   .
    816  1100							; 
    817  1100
    818  1100				   .
    819  1100							; 
    820  1100
    821  1100				   .L0160		;  dim _sc1  =  score
    822  1100
    823  1100				   .L0161		;  dim _sc2  =  score + 1
    824  1100
    825  1100				   .L0162		;  dim _sc3  =  score + 2
    826  1100
    827  1100				   .
    828  1100							; 
    829  1100
    830  1100				   .
    831  1100							; 
    832  1100
    833  1100				   .L0163		;  dim delay_counter  =  a
    834  1100
    835  1100				   .L0164		;  dim frame_counter  =  b
    836  1100
    837  1100				   .
    838  1100							; 
    839  1100
    840  1100				   .L0165		;  dim _BitOp_Ball_Shot_Dir  =  c
    841  1100
    842  1100				   .L0166		;  dim _Bit0_Ball_Shot_Dir_Left1  =  c
    843  1100
    844  1100				   .L0167		;  dim _Bit1_Ball_Shot_Dir_Left2  =  c
    845  1100
    846  1100				   .L0168		;  dim _Bit2_Ball_Shot_Dir_Right1  =  c
    847  1100
    848  1100				   .L0169		;  dim _Bit3_Ball_Shot_Dir_Right2  =  c
    849  1100
    850  1100				   .
    851  1100							; 
    852  1100
    853  1100				   .L0170		;  dim _BitOp_M0_Dir  =  d
    854  1100
    855  1100				   .L0171		;  dim _Bit0_M0_Dir_Up  =  d
    856  1100
    857  1100				   .L0172		;  dim _Bit1_M0_Dir_Down  =  d
    858  1100
    859  1100				   .L0173		;  dim _Bit2_M0_Dir_Left  =  d
    860  1100
    861  1100				   .L0174		;  dim _Bit3_M0_Dir_Right  =  d
    862  1100
    863  1100				   .
    864  1100							; 
    865  1100
    866  1100				   .L0175		;  dim _BitOp_P1_Dir  =  e
    867  1100
    868  1100				   .L0176		;  dim _Bit0_P1_Dir_Up  =  e
    869  1100
    870  1100				   .L0177		;  dim _Bit1_P1_Dir_Down  =  e
    871  1100
    872  1100				   .L0178		;  dim _Bit2_P1_Dir_Left  =  e
    873  1100
    874  1100				   .L0179		;  dim _Bit3_P1_Dir_Right  =  e
    875  1100
    876  1100				   .
    877  1100							; 
    878  1100
    879  1100				   .
    880  1100							; 
    881  1100
    882  1100				   .
    883  1100							; 
    884  1100
    885  1100				   .
    886  1100							; 
    887  1100
    888  1100				   .L0180		;  dim _Ch0_Sound  =  f
    889  1100
    890  1100				   .L0181		;  dim _Ch0_Duration  =  g
    891  1100
    892  1100				   .L0182		;  dim _Ch0_Counter  =  h
    893  1100
    894  1100				   .
    895  1100							; 
    896  1100
    897  1100				   .L0183		;  dim extra_wall_move_x  =  i
    898  1100
    899  1100				   .L0184		;  dim roommate_move_x  =  j
    900  1100
    901  1100				   .L0185		;  dim roommate_type  =  k
    902  1100
    903  1100				   .
    904  1100							; 
    905  1100
    906  1100				   .L0186		;  dim _BitOp_Safe_Point  =  l
    907  1100
    908  1100				   .L0187		;  dim _Bit0_Safe_Point_reached  =  l
    909  1100
    910  1100				   .L0188		;  dim _Bit1_Safe_Point_P1_Flip  =  l
    911  1100
    912  1100				   .L0189		;  dim Safe_Point_P1_x  =  m
    913  1100
    914  1100				   .L0190		;  dim Safe_Point_P1_y  =  n
    915  1100
    916  1100				   .
    917  1100							; 
    918  1100
    919  1100				   .L0191		;  rem 16 bit velocity
    920  1100
    921  1100				   .L0192		;  dim Bally_velocity	=  p.q
    922  1100
    923  1100				   .L0193		;  rem 16 bit ball y position
    924  1100
    925  1100				   .L0194		;  dim Bally_position	=  bally.r
    926  1100
    927  1100				   .
    928  1100							; 
    929  1100
    930  1100				   .L0195		;  rem 16 bit velocity
    931  1100
    932  1100				   .L0196		;  dim M0y_velocity  =  s.t
    933  1100
    934  1100				   .L0197		;  rem 16 bit missile0 y position
    935  1100
    936  1100				   .L0198		;  dim M0y_position  =  missile0y.u
    937  1100
    938  1100				   .
    939  1100							; 
    940  1100
    941  1100				   .L0199		;  rem 16 bit velocity
    942  1100
    943  1100				   .L0200		;  dim P1y_velocity  =  v.w
    944  1100
    945  1100				   .L0201		;  rem 16 bit player1 y position
    946  1100
    947  1100				   .L0202		;  dim P1y_position  =  player1y.x
    948  1100
    949  1100				   .
    950  1100							; 
    951  1100
    952  1100				   .L0203		;  rem Various game states
    953  1100
    954  1100				   .L0204		;  dim _Bit_Game_State  =  y
    955  1100
    956  1100				   .L0205		;  dim _Bit0_roommate_Dir  =  y
    957  1100
    958  1100				   .L0206		;  dim _Bit1_Wall_Dir	=  y
    959  1100
    960  1100				   .L0207		;  dim _Bit2_Level_finished  =  y
    961  1100
    962  1100				   .L0208		;  dim _Bit3_Ball_Shot_Moving	=  y
    963  1100
    964  1100				   .L0209		;  dim _Bit4_Game_Over  =  y
    965  1100
    966  1100				   .L0210		;  dim _Bit5_Request_Pending  =  y
    967  1100
    968  1100				   .L0211		;  dim _Bit6_Flip_P1  =  y
    969  1100
    970  1100				   .L0212		;  dim _Bit7_M0_Moving  =  y
    971  1100
    972  1100				   .
    973  1100							; 
    974  1100
    975  1100				   .
    976  1100							; 
    977  1100
    978  1100				   .L0213		;  dim w_room_definition_start  =  w099
    979  1100
    980  1100				   .
    981  1100							; 
    982  1100
    983  1100				   .L0214		;  dim r_BitOp_room_type  =  r099
    984  1100
    985  1100				   .L0215		;  dim w_BitOp_room_type  =  r099
    986  1100
    987  1100				   .L0216		;  dim r_Bit0_room_type_top  =  r099
    988  1100
    989  1100				   .L0217		;  dim r_room_color_top  =  r100
    990  1100
    991  1100				   .L0218		;  dim w_room_color_top  =  w100
    992  1100
    993  1100				   .L0219		;  dim r_room_color_middle  =	r101
    994  1100
    995  1100				   .L0220		;  dim w_room_color_middle  =	w101
    996  1100
    997  1100				   .L0221		;  dim r_room_color_bottom  =	r105
    998  1100
    999  1100				   .L0222		;  dim w_room_color_bottom  =	w105
   1000  1100
   1001  1100				   .L0223		;  dim r_roommate_type_and_range  =  r106
   1002  1100
   1003  1100				   .L0224		;  dim w_roommate_type_and_range  =  w106
   1004  1100
   1005  1100				   .L0225		;  dim r_roommate_startpos_y  =  r107
   1006  1100
   1007  1100				   .L0226		;  dim w_roommate_startpos_y  =  w107
   1008  1100
   1009  1100				   .L0227		;  dim r_roommate_startpos_x  =  r108
   1010  1100
   1011  1100				   .L0228		;  dim w_roommate_startpos_x  =  w108
   1012  1100
   1013  1100				   .L0229		;  dim r_extra_wall_width  =  r109
   1014  1100
   1015  1100				   .L0230		;  dim w_extra_wall_width  =  w109
   1016  1100
   1017  1100				   .L0231		;  dim r_extra_wall_type  =  r110
   1018  1100
   1019  1100				   .L0232		;  dim w_extra_wall_type  =  w110
   1020  1100
   1021  1100				   .L0233		;  dim r_extra_wall_startpos_x  =  r111
   1022  1100
   1023  1100				   .L0234		;  dim w_extra_wall_startpos_x  =  w111
   1024  1100
   1025  1100				   .
   1026  1100							; 
   1027  1100
   1028  1100				   .
   1029  1100							; 
   1030  1100
   1031  1100				   ._Start
   1032  1100							; _Start
   1033  1100
   1034  1100				   .L0235		;  WriteSendBuffer  =	req_load  :  _Bit5_Request_Pending{5}  =  1
   1035  1100
   1036  1100		       a9 00		      LDA	#req_load
   1037  1102		       8d f1 1f 	      STA	WriteSendBuffer
   1038  1105		       a5 ec		      LDA	_Bit5_Request_Pending
   1039  1107		       09 20		      ORA	#32
   1040  1109		       85 ec		      STA	_Bit5_Request_Pending
   1041  110b				   .L0236		;  frame_counter  =  0  :  COLUP0  =  _1C
   1042  110b
   1043  110b		       a9 00		      LDA	#0
   1044  110d		       85 d5		      STA	frame_counter
   1045  110f		       a9 1c		      LDA	#_1C
   1046  1111		       85 06		      STA	COLUP0
   1047  1113				   .L0237		;  score  =  0  :  pfscore1  =  %00101010  :  pfscore2  =  255  :  pfscorecolor  =  _1C  :  scorecolor  =  _0E
   1048  1113
   1049  1113		       a9 00		      LDA	#$00
   1050  1115		       85 95		      STA	score+2
   1051  1117		       a9 00		      LDA	#$00
   1052  1119		       85 94		      STA	score+1
   1053  111b		       a9 00		      LDA	#$00
   1054  111d		       85 93		      STA	score
   1055  111f		       a9 2a		      LDA	#%00101010
   1056  1121		       85 f2		      STA	pfscore1
   1057  1123		       a9 ff		      LDA	#255
   1058  1125		       85 f3		      STA	pfscore2
   1059  1127		       a9 1c		      LDA	#_1C
   1060  1129		       85 f4		      STA	pfscorecolor
   1061  112b		       a9 0e		      LDA	#_0E
   1062  112d		       85 a3		      STA	scorecolor
   1063  112f				   .L0238		;  player1x  =  30  :	player1y  =  0
   1064  112f
   1065  112f		       a9 1e		      LDA	#30
   1066  1131		       85 81		      STA	player1x
   1067  1133		       a9 00		      LDA	#0
   1068  1135		       85 86		      STA	player1y
   1069  1137				   .L0239		;  AUDV0  =  0  :  AUDV1  =  0  :  _Bit_Game_State  =	0
   1070  1137
   1071  1137		       a9 00		      LDA	#0
   1072  1139		       85 19		      STA	AUDV0
   1073  113b		       85 1a		      STA	AUDV1
   1074  113d		       85 ec		      STA	_Bit_Game_State
   1075  113f				   .L0240		;  missile0x  =  200  :  missile0y  =	200  :	missile0height	=  1  :  bally	=  0
   1076  113f
   1077  113f		       a9 c8		      LDA	#200
   1078  1141		       85 82		      STA	missile0x
   1079  1143		       85 91		      STA	missile0y
   1080  1145		       a9 01		      LDA	#1
   1081  1147		       85 90		      STA	missile0height
   1082  1149		       a9 00		      LDA	#0
   1083  114b		       85 89		      STA	bally
   1084  114d				   .L0241		;  w_extra_wall_startpos_x  =	200
   1085  114d
   1086  114d		       a9 c8		      LDA	#200
   1087  114f		       8d 6f f0 	      STA	w_extra_wall_startpos_x
   1088  1152				   .L0242		;  w_roommate_startpos_y  =  200  :  player0y	=  200	:  player0x  =	0
   1089  1152
   1090  1152		       a9 c8		      LDA	#200
   1091  1154		       8d 6b f0 	      STA	w_roommate_startpos_y
   1092  1157		       85 85		      STA	player0y
   1093  1159		       a9 00		      LDA	#0
   1094  115b		       85 80		      STA	player0x
   1095  115d				   .
   1096  115d							; 
   1097  115d
   1098  115d				   .L0243		;  Safe_Point_P1_x  =	30  :  Safe_Point_P1_y	=  0  :  _BitOp_Safe_Point  =  0
   1099  115d
   1100  115d		       a9 1e		      LDA	#30
   1101  115f		       85 e0		      STA	Safe_Point_P1_x
   1102  1161		       a9 00		      LDA	#0
   1103  1163		       85 e1		      STA	Safe_Point_P1_y
   1104  1165		       85 df		      STA	_BitOp_Safe_Point
   1105  1167				   .
   1106  1167							; 
   1107  1167
   1108  1167				   .L0244		;  pfclear
   1109  1167
   1110  1167		       a9 00		      LDA	#0
   1111  1169		       85 ee		      sta	temp7
   1112  116b		       a9 d1		      lda	#>(ret_point1-1)
   1113  116d		       48		      pha
   1114  116e		       a9 80		      lda	#<(ret_point1-1)
   1115  1170		       48		      pha
   1116  1171		       a9 f3		      lda	#>(pfclear-1)
   1117  1173		       48		      pha
   1118  1174		       a9 8f		      lda	#<(pfclear-1)
   1119  1176		       48		      pha
   1120  1177		       a5 ee		      lda	temp7
   1121  1179		       48		      pha
   1122  117a		       8a		      txa
   1123  117b		       48		      pha
   1124  117c		       a2 02		      ldx	#2
   1125  117e		       4c e8 ff 	      jmp	BS_jsr
   1126  1181				   ret_point1
   1127  1181				   .L0245		;  playfield:
   1128  1181
   1129  1181					      ifconst	pfres
   1130  1181		       a2 0b		      ldx	#(3>pfres)*(pfres*pfwidth-1)+(3<=pfres)*11
   1131  1183				  -	      else
   1132  1183				  -	      ldx	#((3*pfwidth-1)*((3*pfwidth-1)<47))+(47*((3*pfwidth-1)>=47))
   1133  1183					      endif
   1134  1183		       4c 92 d1 	      jmp	pflabel0
   1135  1186				   PF_data0
   1136  1186		       ff 0f		      .byte.b	%11111111, %00001111
   1137  1188					      if	(pfwidth>2)
   1138  1188		       1f ff		      .byte.b	%00011111, %11111111
   1139  118a					      endif
   1140  118a		       f8 00		      .byte.b	%11111000, %00000000
   1141  118c					      if	(pfwidth>2)
   1142  118c		       00 fc		      .byte.b	%00000000, %11111100
   1143  118e					      endif
   1144  118e		       ff 0f		      .byte.b	%11111111, %00001111
   1145  1190					      if	(pfwidth>2)
   1146  1190		       1f ff		      .byte.b	%00011111, %11111111
   1147  1192					      endif
   1148  1192				   pflabel0
   1149  1192		       bd 86 d1 	      lda	PF_data0,x
   1150  1195		       9d 70 10 	      sta	playfield-128,x
   1151  1198		       ca		      dex
   1152  1199		       10 f7		      bpl	pflabel0
   1153  119b				   .
   1154  119b							; 
   1155  119b
   1156  119b				   .L0246		;  player1color:
   1157  119b
   1158  119b		       a2 2a		      LDX	#<playercolorL0246_1
   1159  119d		       86 87		      STX	player1color
   1160  119f		       a9 f6		      LDA	#>playercolorL0246_1
   1161  11a1		       85 88		      STA	player1color+1
   1162  11a3				   .
   1163  11a3							; 
   1164  11a3
   1165  11a3				   .
   1166  11a3							; 
   1167  11a3
   1168  11a3				   .
   1169  11a3							; 
   1170  11a3
   1171  11a3				   .L0247		;  w_room_color_top  =  _22  :  w_room_color_middle  =  _24  :  w_room_color_bottom  =  _26
   1172  11a3
   1173  11a3		       a9 22		      LDA	#_22
   1174  11a5		       8d 64 f0 	      STA	w_room_color_top
   1175  11a8		       a9 24		      LDA	#_24
   1176  11aa		       8d 65 f0 	      STA	w_room_color_middle
   1177  11ad		       a9 26		      LDA	#_26
   1178  11af		       8d 69 f0 	      STA	w_room_color_bottom
   1179  11b2				   .L0248		;  asm
   1180  11b2
   1181  11b2		       a9 f0		      lda	#>(r_room_color_middle-132+pfres*pfwidth)
   1182  11b4
   1183  11b4		       85 f1		      sta	pfcolortable+1
   1184  11b6
   1185  11b6		       a9 71		      lda	#<(r_room_color_middle-132+pfres*pfwidth)
   1186  11b8
   1187  11b8		       85 f0		      sta	pfcolortable
   1188  11ba
   1189  11ba				   ._inital_wait
   1190  11ba							; _inital_wait
   1191  11ba
   1192  11ba				   .L0249		;  COLUPF  =  r_room_color_top
   1193  11ba
   1194  11ba		       ad e4 f0 	      LDA	r_room_color_top
   1195  11bd		       85 08		      STA	COLUPF
   1196  11bf				   .L0250		;  COLUBK  =  _00
   1197  11bf
   1198  11bf		       a9 00		      LDA	#_00
   1199  11c1		       85 09		      STA	COLUBK
   1200  11c3				   .L0251		;  asm ; read joystick and console switches for PlusCart exit function 
   1201  11c3
   1202  11c3		       ad 80 02 	      lda	SWCHA
   1203  11c6
   1204  11c6		       ad 82 02 	      lda	SWCHB
   1205  11c9
   1206  11c9				   .L0252		;  drawscreen
   1207  11c9
   1208  11c9		       85 ee		      sta	temp7
   1209  11cb		       a9 d1		      lda	#>(ret_point2-1)
   1210  11cd		       48		      pha
   1211  11ce		       a9 e0		      lda	#<(ret_point2-1)
   1212  11d0		       48		      pha
   1213  11d1		       a9 f5		      lda	#>(drawscreen-1)
   1214  11d3		       48		      pha
   1215  11d4		       a9 82		      lda	#<(drawscreen-1)
   1216  11d6		       48		      pha
   1217  11d7		       a5 ee		      lda	temp7
   1218  11d9		       48		      pha
   1219  11da		       8a		      txa
   1220  11db		       48		      pha
   1221  11dc		       a2 02		      ldx	#2
   1222  11de		       4c e8 ff 	      jmp	BS_jsr
   1223  11e1				   ret_point2
   1224  11e1				   .L0253		;  if ! joy0fire then goto _inital_wait
   1225  11e1
   1226  11e1		       24 0c		      bit	INPT4
   1227  11e3		       10 03		      BPL	.skipL0253
   1228  11e5				   .condpart0
   1229  11e5		       4c ba d1 	      jmp	._inital_wait
   1230  11e8
   1231  11e8				   .skipL0253
   1232  11e8				   .
   1233  11e8							; 
   1234  11e8
   1235  11e8				   .L0254		;  player1y  =  player_min_y
   1236  11e8
   1237  11e8		       a9 02		      LDA	#player_min_y
   1238  11ea		       85 86		      STA	player1y
   1239  11ec				   .
   1240  11ec							; 
   1241  11ec
   1242  11ec				   .L0255		;  _Bit4_Game_Over{4}	=  0
   1243  11ec
   1244  11ec		       a5 ec		      LDA	_Bit4_Game_Over
   1245  11ee		       29 ef		      AND	#239
   1246  11f0		       85 ec		      STA	_Bit4_Game_Over
   1247  11f2				   .
   1248  11f2							; 
   1249  11f2
   1250  11f2				   .__Main_Loop
   1251  11f2							; __Main_Loop
   1252  11f2
   1253  11f2				   .L0256		;  COLUPF  =  r_room_color_top
   1254  11f2
   1255  11f2		       ad e4 f0 	      LDA	r_room_color_top
   1256  11f5		       85 08		      STA	COLUPF
   1257  11f7				   .L0257		;  NUSIZ1  =  $05
   1258  11f7
   1259  11f7		       a9 05		      LDA	#$05
   1260  11f9		       85 05		      STA	NUSIZ1
   1261  11fb				   .L0258		;  NUSIZ0  =  $10
   1262  11fb
   1263  11fb		       a9 10		      LDA	#$10
   1264  11fd		       85 04		      STA	NUSIZ0
   1265  11ff				   .L0259		;  COLUBK  =  _00
   1266  11ff
   1267  11ff		       a9 00		      LDA	#_00
   1268  1201		       85 09		      STA	COLUBK
   1269  1203				   .
   1270  1203							; 
   1271  1203
   1272  1203				   .L0260		;  if switchreset then goto _Start
   1273  1203
   1274  1203		       a9 01		      lda	#1
   1275  1205		       2c 82 02 	      bit	SWCHB
   1276  1208		       d0 03		      BNE	.skipL0260
   1277  120a				   .condpart1
   1278  120a		       4c 00 d1 	      jmp	._Start
   1279  120d
   1280  120d				   .skipL0260
   1281  120d				   .
   1282  120d							; 
   1283  120d
   1284  120d				   .L0261		;  if frame_counter{2} then player1: 
   1285  120d
   1286  120d		       a5 d5		      LDA	frame_counter
   1287  120f		       29 04		      AND	#4
   1288  1211		       f0 0c		      BEQ	.skipL0261
   1289  1213				   .condpart2
   1290  1213		       a2 32		      LDX	#<player2then_1
   1291  1215		       86 8c		      STX	player1pointerlo
   1292  1217		       a9 f6		      LDA	#>player2then_1
   1293  1219		       85 8d		      STA	player1pointerhi
   1294  121b		       a9 07		      LDA	#7
   1295  121d		       85 8f		      STA	player1height
   1296  121f				   .skipL0261
   1297  121f				   .L0262		;  if ! frame_counter{2} then player1:
   1298  121f
   1299  121f		       a5 d5		      LDA	frame_counter
   1300  1221		       29 04		      AND	#4
   1301  1223		       d0 0c		      BNE	.skipL0262
   1302  1225				   .condpart3
   1303  1225		       a2 3a		      LDX	#<player3then_1
   1304  1227		       86 8c		      STX	player1pointerlo
   1305  1229		       a9 f6		      LDA	#>player3then_1
   1306  122b		       85 8d		      STA	player1pointerhi
   1307  122d		       a9 07		      LDA	#7
   1308  122f		       85 8f		      STA	player1height
   1309  1231				   .skipL0262
   1310  1231				   .
   1311  1231							; 
   1312  1231
   1313  1231				   .L0263		;  on roommate_type goto _roommate_Enemy_def _roommate_Air_Missile_def _roommate_Fuel_def _roommate_Soldier_def
   1314  1231
   1315  1231		       a6 de		      LDX	roommate_type
   1316  1233		       bd 3c d2 	      LDA	.L0263jumptablehi,x
   1317  1236		       48		      PHA
   1318  1237		       bd 40 d2 	      LDA	.L0263jumptablelo,x
   1319  123a		       48		      PHA
   1320  123b		       60		      RTS
   1321  123c				   .L0263jumptablehi
   1322  123c		       d2		      .byte.b	>(._roommate_Enemy_def-1)
   1323  123d		       d2		      .byte.b	>(._roommate_Air_Missile_def-1)
   1324  123e		       d2		      .byte.b	>(._roommate_Fuel_def-1)
   1325  123f		       d2		      .byte.b	>(._roommate_Soldier_def-1)
   1326  1240				   .L0263jumptablelo
   1327  1240		       43		      .byte.b	<(._roommate_Enemy_def-1)
   1328  1241		       6a		      .byte.b	<(._roommate_Air_Missile_def-1)
   1329  1242		       79		      .byte.b	<(._roommate_Fuel_def-1)
   1330  1243		       88		      .byte.b	<(._roommate_Soldier_def-1)
   1331  1244				   .
   1332  1244							; 
   1333  1244
   1334  1244				   ._roommate_Enemy_def
   1335  1244							; _roommate_Enemy_def
   1336  1244
   1337  1244				   .L0264		;  if frame_counter{2} then player0: 
   1338  1244
   1339  1244		       a5 d5		      LDA	frame_counter
   1340  1246		       29 04		      AND	#4
   1341  1248		       f0 0c		      BEQ	.skipL0264
   1342  124a				   .condpart4
   1343  124a		       a2 42		      LDX	#<player4then_0
   1344  124c		       86 8a		      STX	player0pointerlo
   1345  124e		       a9 f6		      LDA	#>player4then_0
   1346  1250		       85 8b		      STA	player0pointerhi
   1347  1252		       a9 06		      LDA	#6
   1348  1254		       85 8e		      STA	player0height
   1349  1256				   .skipL0264
   1350  1256				   .L0265		;  if !frame_counter{2} then player0: 
   1351  1256
   1352  1256		       a5 d5		      LDA	frame_counter
   1353  1258		       29 04		      AND	#4
   1354  125a		       d0 0c		      BNE	.skipL0265
   1355  125c				   .condpart5
   1356  125c		       a2 49		      LDX	#<player5then_0
   1357  125e		       86 8a		      STX	player0pointerlo
   1358  1260		       a9 f6		      LDA	#>player5then_0
   1359  1262		       85 8b		      STA	player0pointerhi
   1360  1264		       a9 06		      LDA	#6
   1361  1266		       85 8e		      STA	player0height
   1362  1268				   .skipL0265
   1363  1268				   .L0266		;  goto _roommate_End_def
   1364  1268
   1365  1268		       4c ad d2 	      jmp	._roommate_End_def
   1366  126b
   1367  126b				   .
   1368  126b							; 
   1369  126b
   1370  126b				   ._roommate_Air_Missile_def
   1371  126b							; _roommate_Air_Missile_def
   1372  126b
   1373  126b				   .L0267		;  player0: 
   1374  126b
   1375  126b		       a2 50		      LDX	#<playerL0267_0
   1376  126d		       86 8a		      STX	player0pointerlo
   1377  126f		       a9 f6		      LDA	#>playerL0267_0
   1378  1271		       85 8b		      STA	player0pointerhi
   1379  1273		       a9 0b		      LDA	#11
   1380  1275		       85 8e		      STA	player0height
   1381  1277				   .L0268		;  goto _roommate_End_def
   1382  1277
   1383  1277		       4c ad d2 	      jmp	._roommate_End_def
   1384  127a
   1385  127a				   .
   1386  127a							; 
   1387  127a
   1388  127a				   ._roommate_Fuel_def
   1389  127a							; _roommate_Fuel_def
   1390  127a
   1391  127a				   .L0269		;  player0: 
   1392  127a
   1393  127a		       a2 5c		      LDX	#<playerL0269_0
   1394  127c		       86 8a		      STX	player0pointerlo
   1395  127e		       a9 f6		      LDA	#>playerL0269_0
   1396  1280		       85 8b		      STA	player0pointerhi
   1397  1282		       a9 18		      LDA	#24
   1398  1284		       85 8e		      STA	player0height
   1399  1286				   .L0270		;  goto _roommate_End_def
   1400  1286
   1401  1286		       4c ad d2 	      jmp	._roommate_End_def
   1402  1289
   1403  1289				   .
   1404  1289							; 
   1405  1289
   1406  1289				   ._roommate_Soldier_def
   1407  1289							; _roommate_Soldier_def
   1408  1289
   1409  1289				   .L0271		;  if frame_counter{2} then player0: 
   1410  1289
   1411  1289		       a5 d5		      LDA	frame_counter
   1412  128b		       29 04		      AND	#4
   1413  128d		       f0 0c		      BEQ	.skipL0271
   1414  128f				   .condpart6
   1415  128f		       a2 75		      LDX	#<player6then_0
   1416  1291		       86 8a		      STX	player0pointerlo
   1417  1293		       a9 f6		      LDA	#>player6then_0
   1418  1295		       85 8b		      STA	player0pointerhi
   1419  1297		       a9 03		      LDA	#3
   1420  1299		       85 8e		      STA	player0height
   1421  129b				   .skipL0271
   1422  129b				   .L0272		;  if !frame_counter{2} then player0: 
   1423  129b
   1424  129b		       a5 d5		      LDA	frame_counter
   1425  129d		       29 04		      AND	#4
   1426  129f		       d0 0c		      BNE	.skipL0272
   1427  12a1				   .condpart7
   1428  12a1		       a2 79		      LDX	#<player7then_0
   1429  12a3		       86 8a		      STX	player0pointerlo
   1430  12a5		       a9 f6		      LDA	#>player7then_0
   1431  12a7		       85 8b		      STA	player0pointerhi
   1432  12a9		       a9 03		      LDA	#3
   1433  12ab		       85 8e		      STA	player0height
   1434  12ad				   .skipL0272
   1435  12ad				   ._roommate_End_def
   1436  12ad							; _roommate_End_def
   1437  12ad
   1438  12ad				   .
   1439  12ad							; 
   1440  12ad
   1441  12ad				   .
   1442  12ad							; 
   1443  12ad
   1444  12ad				   .L0273		;  if r_extra_wall_type  <  4 then _Skip_Wall_Movement
   1445  12ad
   1446  12ad		       ad ee f0 	      LDA	r_extra_wall_type
   1447  12b0		       c9 04		      CMP	#4
   1448  12b2					      if	((* - ._Skip_Wall_Movement) < 127) && ((* - ._Skip_Wall_Movement) > -128)
   1449  12b2		       90 30		      bcc	._Skip_Wall_Movement
   1450  12b4				  -	      else
   1451  12b4				  -	      bcs	.0skip_Skip_Wall_Movement
   1452  12b4				  -	      jmp	._Skip_Wall_Movement
   1453  12b4				  -.0skip_Skip_Wall_Movement
   1454  12b4					      endif
   1455  12b4				   .L0274		;  if _Bit1_Wall_Dir{1} then _Wall_move_left
   1456  12b4
   1457  12b4		       a5 ec		      LDA	_Bit1_Wall_Dir
   1458  12b6		       29 02		      AND	#2
   1459  12b8					      if	((* - ._Wall_move_left) < 127) && ((* - ._Wall_move_left) > -128)
   1460  12b8		       d0 18		      BNE	._Wall_move_left
   1461  12ba				  -	      else
   1462  12ba				  -	      beq	.1skip_Wall_move_left
   1463  12ba				  -	      jmp	._Wall_move_left
   1464  12ba				  -.1skip_Wall_move_left
   1465  12ba					      endif
   1466  12ba				   .L0275		;  if frame_counter{4} then extra_wall_move_x	=  extra_wall_move_x  +  1  :  if extra_wall_move_x  =	r_extra_wall_type then _Bit1_Wall_Dir{1}  =  1
   1467  12ba
   1468  12ba		       a5 d5		      LDA	frame_counter
   1469  12bc		       29 10		      AND	#16
   1470  12be		       f0 0f		      BEQ	.skipL0275
   1471  12c0				   .condpart8
   1472  12c0		       e6 dc		      INC	extra_wall_move_x
   1473  12c2		       a5 dc		      LDA	extra_wall_move_x
   1474  12c4		       cd ee f0 	      CMP	r_extra_wall_type
   1475  12c7		       d0 06		      BNE	.skip8then
   1476  12c9				   .condpart9
   1477  12c9		       a5 ec		      LDA	_Bit1_Wall_Dir
   1478  12cb		       09 02		      ORA	#2
   1479  12cd		       85 ec		      STA	_Bit1_Wall_Dir
   1480  12cf				   .skip8then
   1481  12cf				   .skipL0275
   1482  12cf				   .L0276		;  goto _Skip_Wall_Movement
   1483  12cf
   1484  12cf		       4c e4 d2 	      jmp	._Skip_Wall_Movement
   1485  12d2
   1486  12d2				   ._Wall_move_left
   1487  12d2							; _Wall_move_left
   1488  12d2
   1489  12d2				   .L0277		;  if frame_counter{4} then extra_wall_move_x	=  extra_wall_move_x  -  1  :  if !extra_wall_move_x then _Bit1_Wall_Dir{1}  =	0
   1490  12d2
   1491  12d2		       a5 d5		      LDA	frame_counter
   1492  12d4		       29 10		      AND	#16
   1493  12d6		       f0 0c		      BEQ	.skipL0277
   1494  12d8				   .condpart10
   1495  12d8		       c6 dc		      DEC	extra_wall_move_x
   1496  12da		       a5 dc		      LDA	extra_wall_move_x
   1497  12dc		       d0 06		      BNE	.skip10then
   1498  12de				   .condpart11
   1499  12de		       a5 ec		      LDA	_Bit1_Wall_Dir
   1500  12e0		       29 fd		      AND	#253
   1501  12e2		       85 ec		      STA	_Bit1_Wall_Dir
   1502  12e4				   .skip10then
   1503  12e4				   .skipL0277
   1504  12e4				   ._Skip_Wall_Movement
   1505  12e4							; _Skip_Wall_Movement
   1506  12e4
   1507  12e4				   .
   1508  12e4							; 
   1509  12e4
   1510  12e4				   .L0278		;  if r_roommate_type_and_range  <  4 then _Skip_Enemy_Movement
   1511  12e4
   1512  12e4		       ad ea f0 	      LDA	r_roommate_type_and_range
   1513  12e7		       c9 04		      CMP	#4
   1514  12e9					      if	((* - ._Skip_Enemy_Movement) < 127) && ((* - ._Skip_Enemy_Movement) > -128)
   1515  12e9		       90 2f		      bcc	._Skip_Enemy_Movement
   1516  12eb				  -	      else
   1517  12eb				  -	      bcs	.2skip_Skip_Enemy_Movement
   1518  12eb				  -	      jmp	._Skip_Enemy_Movement
   1519  12eb				  -.2skip_Skip_Enemy_Movement
   1520  12eb					      endif
   1521  12eb				   .L0279		;  if _Bit0_roommate_Dir{0} then _Enemy_move_left
   1522  12eb
   1523  12eb		       a5 ec		      LDA	_Bit0_roommate_Dir
   1524  12ed		       4a		      LSR
   1525  12ee					      if	((* - ._Enemy_move_left) < 127) && ((* - ._Enemy_move_left) > -128)
   1526  12ee		       b0 18		      bcs	._Enemy_move_left
   1527  12f0				  -	      else
   1528  12f0				  -	      bcc	.3skip_Enemy_move_left
   1529  12f0				  -	      jmp	._Enemy_move_left
   1530  12f0				  -.3skip_Enemy_move_left
   1531  12f0					      endif
   1532  12f0				   .L0280		;  if !frame_counter{4} then roommate_move_x  =  roommate_move_x  +  1  :  if roommate_move_x	=  r_roommate_type_and_range then _Bit0_roommate_Dir{0}  =  1
   1533  12f0
   1534  12f0		       a5 d5		      LDA	frame_counter
   1535  12f2		       29 10		      AND	#16
   1536  12f4		       d0 0f		      BNE	.skipL0280
   1537  12f6				   .condpart12
   1538  12f6		       e6 dd		      INC	roommate_move_x
   1539  12f8		       a5 dd		      LDA	roommate_move_x
   1540  12fa		       cd ea f0 	      CMP	r_roommate_type_and_range
   1541  12fd		       d0 06		      BNE	.skip12then
   1542  12ff				   .condpart13
   1543  12ff		       a5 ec		      LDA	_Bit0_roommate_Dir
   1544  1301		       09 01		      ORA	#1
   1545  1303		       85 ec		      STA	_Bit0_roommate_Dir
   1546  1305				   .skip12then
   1547  1305				   .skipL0280
   1548  1305				   .L0281		;  goto _Skip_Enemy_Movement
   1549  1305
   1550  1305		       4c 1a d3 	      jmp	._Skip_Enemy_Movement
   1551  1308
   1552  1308				   ._Enemy_move_left
   1553  1308							; _Enemy_move_left
   1554  1308
   1555  1308				   .L0282		;  if !frame_counter{4} then roommate_move_x  =  roommate_move_x  -  1  :  if !roommate_move_x then _Bit0_roommate_Dir{0}  =  0
   1556  1308
   1557  1308		       a5 d5		      LDA	frame_counter
   1558  130a		       29 10		      AND	#16
   1559  130c		       d0 0c		      BNE	.skipL0282
   1560  130e				   .condpart14
   1561  130e		       c6 dd		      DEC	roommate_move_x
   1562  1310		       a5 dd		      LDA	roommate_move_x
   1563  1312		       d0 06		      BNE	.skip14then
   1564  1314				   .condpart15
   1565  1314		       a5 ec		      LDA	_Bit0_roommate_Dir
   1566  1316		       29 fe		      AND	#254
   1567  1318		       85 ec		      STA	_Bit0_roommate_Dir
   1568  131a				   .skip14then
   1569  131a				   .skipL0282
   1570  131a				   ._Skip_Enemy_Movement
   1571  131a							; _Skip_Enemy_Movement
   1572  131a
   1573  131a				   .
   1574  131a							; 
   1575  131a
   1576  131a				   .L0283		;  frame_counter  =  frame_counter  +	1
   1577  131a
   1578  131a		       e6 d5		      INC	frame_counter
   1579  131c				   .
   1580  131c							; 
   1581  131c
   1582  131c				   .
   1583  131c							; 
   1584  131c
   1585  131c				   .L0284		;  if r_extra_wall_startpos_x	=  200 then _Skip_extra_Wall
   1586  131c
   1587  131c		       ad ef f0 	      LDA	r_extra_wall_startpos_x
   1588  131f		       c9 c8		      CMP	#200
   1589  1321					      if	((* - ._Skip_extra_Wall) < 127) && ((* - ._Skip_extra_Wall) > -128)
   1590  1321		       f0 17		      BEQ	._Skip_extra_Wall
   1591  1323				  -	      else
   1592  1323				  -	      bne	.4skip_Skip_extra_Wall
   1593  1323				  -	      jmp	._Skip_extra_Wall
   1594  1323				  -.4skip_Skip_extra_Wall
   1595  1323					      endif
   1596  1323				   .L0285		;  ballx  =  r_extra_wall_startpos_x  +  extra_wall_move_x
   1597  1323
   1598  1323		       ad ef f0 	      LDA	r_extra_wall_startpos_x
   1599  1326		       18		      CLC
   1600  1327		       65 dc		      ADC	extra_wall_move_x
   1601  1329		       85 84		      STA	ballx
   1602  132b				   .L0286		;  bally  =  47
   1603  132b
   1604  132b		       a9 2f		      LDA	#47
   1605  132d		       85 89		      STA	bally
   1606  132f				   .L0287		;  ballheight	=  23
   1607  132f
   1608  132f		       a9 17		      LDA	#23
   1609  1331		       85 92		      STA	ballheight
   1610  1333				   .L0288		;  CTRLPF  =  r_extra_wall_width  |  1
   1611  1333
   1612  1333		       ad ed f0 	      LDA	r_extra_wall_width
   1613  1336		       09 01		      ORA	#1
   1614  1338		       85 0a		      STA	CTRLPF
   1615  133a				   ._Skip_extra_Wall
   1616  133a							; _Skip_extra_Wall
   1617  133a
   1618  133a				   .
   1619  133a							; 
   1620  133a
   1621  133a				   .L0289		;  if !_Bit3_Ball_Shot_Moving{3} then _Skip_ball_shot
   1622  133a
   1623  133a		       a5 ec		      LDA	_Bit3_Ball_Shot_Moving
   1624  133c		       29 08		      AND	#8
   1625  133e					      if	((* - ._Skip_ball_shot) < 127) && ((* - ._Skip_ball_shot) > -128)
   1626  133e		       f0 08		      BEQ	._Skip_ball_shot
   1627  1340				  -	      else
   1628  1340				  -	      bne	.5skip_Skip_ball_shot
   1629  1340				  -	      jmp	._Skip_ball_shot
   1630  1340				  -.5skip_Skip_ball_shot
   1631  1340					      endif
   1632  1340				   .L0290		;  ballheight	=  2
   1633  1340
   1634  1340		       a9 02		      LDA	#2
   1635  1342		       85 92		      STA	ballheight
   1636  1344				   .L0291		;  CTRLPF  =  %00010001
   1637  1344
   1638  1344		       a9 11		      LDA	#%00010001
   1639  1346		       85 0a		      STA	CTRLPF
   1640  1348				   ._Skip_ball_shot
   1641  1348							; _Skip_ball_shot
   1642  1348
   1643  1348				   .
   1644  1348							; 
   1645  1348
   1646  1348				   .
   1647  1348							; 
   1648  1348
   1649  1348				   .L0292		;  if r_roommate_startpos_y  =  200 then _Skip_enemy
   1650  1348
   1651  1348		       ad eb f0 	      LDA	r_roommate_startpos_y
   1652  134b		       c9 c8		      CMP	#200
   1653  134d					      if	((* - ._Skip_enemy) < 127) && ((* - ._Skip_enemy) > -128)
   1654  134d		       f0 0d		      BEQ	._Skip_enemy
   1655  134f				  -	      else
   1656  134f				  -	      bne	.6skip_Skip_enemy
   1657  134f				  -	      jmp	._Skip_enemy
   1658  134f				  -.6skip_Skip_enemy
   1659  134f					      endif
   1660  134f				   .L0293		;  player0x  =  r_roommate_startpos_x	+  roommate_move_x
   1661  134f
   1662  134f		       ad ec f0 	      LDA	r_roommate_startpos_x
   1663  1352		       18		      CLC
   1664  1353		       65 dd		      ADC	roommate_move_x
   1665  1355		       85 80		      STA	player0x
   1666  1357				   .L0294		;  player0y  =  r_roommate_startpos_y
   1667  1357
   1668  1357		       ad eb f0 	      LDA	r_roommate_startpos_y
   1669  135a		       85 85		      STA	player0y
   1670  135c				   ._Skip_enemy
   1671  135c							; _Skip_enemy
   1672  135c
   1673  135c				   .
   1674  135c							; 
   1675  135c
   1676  135c				   .
   1677  135c							; 
   1678  135c
   1679  135c				   .
   1680  135c							; 
   1681  135c
   1682  135c				   .
   1683  135c							; 
   1684  135c
   1685  135c				   .L0295		;  if delay_counter  >  0 then delay_counter  =  delay_counter  -  1  :  goto _skip_game_action
   1686  135c
   1687  135c		       a9 00		      LDA	#0
   1688  135e		       c5 d4		      CMP	delay_counter
   1689  1360		       b0 05		      BCS	.skipL0295
   1690  1362				   .condpart16
   1691  1362		       c6 d4		      DEC	delay_counter
   1692  1364		       4c 2c d8 	      jmp	._skip_game_action
   1693  1367
   1694  1367				   .skipL0295
   1695  1367				   .
   1696  1367							; 
   1697  1367
   1698  1367				   .L0296		;  if ReceiveBufferSize  >  response_size_minus_1 then goto change_room
   1699  1367
   1700  1367		       a9 18		      LDA	#response_size_minus_1
   1701  1369		       cd f3 1f 	      CMP	ReceiveBufferSize
   1702  136c		       b0 03		      BCS	.skipL0296
   1703  136e				   .condpart17
   1704  136e		       4c 20 db 	      jmp	.change_room
   1705  1371
   1706  1371				   .skipL0296
   1707  1371				   .
   1708  1371							; 
   1709  1371
   1710  1371				   .L0297		;  if _Bit5_Request_Pending{5}  ||  _Bit4_Game_Over{4} then goto _skip_game_action
   1711  1371
   1712  1371		       a5 ec		      LDA	_Bit5_Request_Pending
   1713  1373		       29 20		      AND	#32
   1714  1375		       f0 03		      BEQ	.skipL0297
   1715  1377				   .condpart18
   1716  1377		       4c 80 d3 	      jmp	.condpart19
   1717  137a				   .skipL0297
   1718  137a		       a5 ec		      LDA	_Bit4_Game_Over
   1719  137c		       29 10		      AND	#16
   1720  137e		       f0 03		      BEQ	.skip0OR
   1721  1380				   .condpart19
   1722  1380		       4c 2c d8 	      jmp	._skip_game_action
   1723  1383
   1724  1383				   .skip0OR
   1725  1383				   .
   1726  1383							; 
   1727  1383
   1728  1383				   .L0298		;  if !_Bit2_Level_finished{2} then _game_action
   1729  1383
   1730  1383		       a5 ec		      LDA	_Bit2_Level_finished
   1731  1385		       29 04		      AND	#4
   1732  1387					      if	((* - ._game_action) < 127) && ((* - ._game_action) > -128)
   1733  1387		       f0 50		      BEQ	._game_action
   1734  1389				  -	      else
   1735  1389				  -	      bne	.7skip_game_action
   1736  1389				  -	      jmp	._game_action
   1737  1389				  -.7skip_game_action
   1738  1389					      endif
   1739  1389				   .L0299		;  _Ch0_Sound	=  3  :  _Ch0_Duration	=  1  :  _Ch0_Counter  =  0
   1740  1389
   1741  1389		       a9 03		      LDA	#3
   1742  138b		       85 d9		      STA	_Ch0_Sound
   1743  138d		       a9 01		      LDA	#1
   1744  138f		       85 da		      STA	_Ch0_Duration
   1745  1391		       a9 00		      LDA	#0
   1746  1393		       85 db		      STA	_Ch0_Counter
   1747  1395				   .L0300		;  delay_counter  =  25
   1748  1395
   1749  1395		       a9 19		      LDA	#25
   1750  1397		       85 d4		      STA	delay_counter
   1751  1399				   .
   1752  1399							; 
   1753  1399
   1754  1399				   .
   1755  1399							; 
   1756  1399
   1757  1399				   .L0301		;  if pfscore2 then pfscore2  =  pfscore2  /  2  :  score  =  score  +  100  :  goto _skip_game_action
   1758  1399
   1759  1399		       a5 f3		      LDA	pfscore2
   1760  139b		       f0 17		      BEQ	.skipL0301
   1761  139d				   .condpart20
   1762  139d		       a5 f3		      LDA	pfscore2
   1763  139f		       4a		      lsr
   1764  13a0		       85 f3		      STA	pfscore2
   1765  13a2		       f8		      SED
   1766  13a3		       18		      CLC
   1767  13a4		       a5 94		      LDA	score+1
   1768  13a6		       69 01		      ADC	#$01
   1769  13a8		       85 94		      STA	score+1
   1770  13aa		       a5 93		      LDA	score
   1771  13ac		       69 00		      ADC	#$00
   1772  13ae		       85 93		      STA	score
   1773  13b0		       d8		      CLD
   1774  13b1		       4c 2c d8 	      jmp	._skip_game_action
   1775  13b4
   1776  13b4				   .skipL0301
   1777  13b4				   .
   1778  13b4							; 
   1779  13b4
   1780  13b4				   .
   1781  13b4							; 
   1782  13b4
   1783  13b4				   .L0302		;  score  =  score  +	200
   1784  13b4
   1785  13b4		       f8		      SED
   1786  13b5		       18		      CLC
   1787  13b6		       a5 94		      LDA	score+1
   1788  13b8		       69 02		      ADC	#$02
   1789  13ba		       85 94		      STA	score+1
   1790  13bc		       a5 93		      LDA	score
   1791  13be		       69 00		      ADC	#$00
   1792  13c0		       85 93		      STA	score
   1793  13c2		       d8		      CLD
   1794  13c3				   .L0303		;  pfscore1  =  pfscore1  /  4
   1795  13c3
   1796  13c3		       a5 f2		      LDA	pfscore1
   1797  13c5		       4a		      lsr
   1798  13c6		       4a		      lsr
   1799  13c7		       85 f2		      STA	pfscore1
   1800  13c9				   .L0304		;  if !pfscore1 then _Bit2_Level_finished{2}  =  0  :	goto _Level_Up
   1801  13c9
   1802  13c9		       a5 f2		      LDA	pfscore1
   1803  13cb		       d0 09		      BNE	.skipL0304
   1804  13cd				   .condpart21
   1805  13cd		       a5 ec		      LDA	_Bit2_Level_finished
   1806  13cf		       29 fb		      AND	#251
   1807  13d1		       85 ec		      STA	_Bit2_Level_finished
   1808  13d3		       4c d6 d9 	      jmp	._Level_Up
   1809  13d6
   1810  13d6				   .skipL0304
   1811  13d6				   .L0305		;  goto _skip_game_action
   1812  13d6
   1813  13d6		       4c 2c d8 	      jmp	._skip_game_action
   1814  13d9
   1815  13d9				   .
   1816  13d9							; 
   1817  13d9
   1818  13d9				   .
   1819  13d9							; 
   1820  13d9
   1821  13d9				   ._game_action
   1822  13d9							; _game_action
   1823  13d9
   1824  13d9				   .
   1825  13d9							; 
   1826  13d9
   1827  13d9				   .L0306		;  if frame_counter then _Skip_dec_game_counter
   1828  13d9
   1829  13d9		       a5 d5		      LDA	frame_counter
   1830  13db					      if	((* - ._Skip_dec_game_counter) < 127) && ((* - ._Skip_dec_game_counter) > -128)
   1831  13db		       d0 2b		      BNE	._Skip_dec_game_counter
   1832  13dd				  -	      else
   1833  13dd				  -	      beq	.8skip_Skip_dec_game_counter
   1834  13dd				  -	      jmp	._Skip_dec_game_counter
   1835  13dd				  -.8skip_Skip_dec_game_counter
   1836  13dd					      endif
   1837  13dd				   .
   1838  13dd							; 
   1839  13dd
   1840  13dd				   .L0307		;  if !pfscore2 then _Decrease_live_counter
   1841  13dd
   1842  13dd		       a5 f3		      LDA	pfscore2
   1843  13df					      if	((* - ._Decrease_live_counter) < 127) && ((* - ._Decrease_live_counter) > -128)
   1844  13df		       f0 08		      BEQ	._Decrease_live_counter
   1845  13e1				  -	      else
   1846  13e1				  -	      bne	.9skip_Decrease_live_counter
   1847  13e1				  -	      jmp	._Decrease_live_counter
   1848  13e1				  -.9skip_Decrease_live_counter
   1849  13e1					      endif
   1850  13e1				   .L0308		;  pfscore2  =  pfscore2  /  2
   1851  13e1
   1852  13e1		       a5 f3		      LDA	pfscore2
   1853  13e3		       4a		      lsr
   1854  13e4		       85 f3		      STA	pfscore2
   1855  13e6				   .L0309		;  goto _Skip_dec_game_counter
   1856  13e6
   1857  13e6		       4c 08 d4 	      jmp	._Skip_dec_game_counter
   1858  13e9
   1859  13e9				   ._Decrease_live_counter
   1860  13e9							; _Decrease_live_counter
   1861  13e9
   1862  13e9				   .L0310		;  pfscore1  =  pfscore1  /  4
   1863  13e9
   1864  13e9		       a5 f2		      LDA	pfscore1
   1865  13eb		       4a		      lsr
   1866  13ec		       4a		      lsr
   1867  13ed		       85 f2		      STA	pfscore1
   1868  13ef				   .
   1869  13ef							; 
   1870  13ef
   1871  13ef				   .L0311		;  _Ch0_Sound	=  4  :  _Ch0_Duration	=  1  :  _Ch0_Counter  =  0
   1872  13ef
   1873  13ef		       a9 04		      LDA	#4
   1874  13f1		       85 d9		      STA	_Ch0_Sound
   1875  13f3		       a9 01		      LDA	#1
   1876  13f5		       85 da		      STA	_Ch0_Duration
   1877  13f7		       a9 00		      LDA	#0
   1878  13f9		       85 db		      STA	_Ch0_Counter
   1879  13fb				   .L0312		;  if !pfscore1 then goto _Set_Game_Over else goto _Reset_Level
   1880  13fb
   1881  13fb		       a5 f2		      LDA	pfscore1
   1882  13fd		       d0 06		      BNE	.skipL0312
   1883  13ff				   .condpart22
   1884  13ff		       4c 8b d9 	      jmp	._Set_Game_Over
   1885  1402		       4c 08 d4 	      jmp	.skipelse0
   1886  1405				   .skipL0312
   1887  1405		       4c a8 d9 	      jmp	._Reset_Level
   1888  1408
   1889  1408				   .skipelse0
   1890  1408				   ._Skip_dec_game_counter
   1891  1408							; _Skip_dec_game_counter
   1892  1408
   1893  1408				   .
   1894  1408							; 
   1895  1408
   1896  1408				   .
   1897  1408							; 
   1898  1408
   1899  1408				   .
   1900  1408							; 
   1901  1408
   1902  1408				   .L0313		;  if player0y  =  200 then goto __Skip_Enemy_Fire
   1903  1408
   1904  1408		       a5 85		      LDA	player0y
   1905  140a		       c9 c8		      CMP	#200
   1906  140c		       d0 03		      BNE	.skipL0313
   1907  140e				   .condpart23
   1908  140e		       4c 9d d4 	      jmp	.__Skip_Enemy_Fire
   1909  1411
   1910  1411				   .skipL0313
   1911  1411				   .L0314		;  if _Bit3_Ball_Shot_Moving{3}  ||  roommate_type then goto __Skip_Enemy_Fire
   1912  1411
   1913  1411		       a5 ec		      LDA	_Bit3_Ball_Shot_Moving
   1914  1413		       29 08		      AND	#8
   1915  1415		       f0 03		      BEQ	.skipL0314
   1916  1417				   .condpart24
   1917  1417		       4c 1e d4 	      jmp	.condpart25
   1918  141a				   .skipL0314
   1919  141a		       a5 de		      LDA	roommate_type
   1920  141c		       f0 03		      BEQ	.skip1OR
   1921  141e				   .condpart25
   1922  141e		       4c 9d d4 	      jmp	.__Skip_Enemy_Fire
   1923  1421
   1924  1421				   .skip1OR
   1925  1421				   .
   1926  1421							; 
   1927  1421
   1928  1421				   .L0315		;  _Bit3_Ball_Shot_Moving{3}  =  1  :	_BitOp_Ball_Shot_Dir  =  0  :  Bally_velocity  =  0.0  :  q  =	0
   1929  1421
   1930  1421		       a5 ec		      LDA	_Bit3_Ball_Shot_Moving
   1931  1423		       09 08		      ORA	#8
   1932  1425		       85 ec		      STA	_Bit3_Ball_Shot_Moving
   1933  1427		       a9 00		      LDA	#0
   1934  1429		       85 d6		      STA	_BitOp_Ball_Shot_Dir
   1935  142b		       a2 00		      LDX	#0
   1936  142d		       86 e4		      STX	q
   1937  142f		       a9 00		      LDA	#0
   1938  1431		       85 e3		      STA	Bally_velocity
   1939  1433		       a9 00		      LDA	#0
   1940  1435		       85 e4		      STA	q
   1941  1437				   .
   1942  1437							; 
   1943  1437
   1944  1437				   .L0316		;  ballx  =  player0x	+  4  :  bally	=  player0y  -	5
   1945  1437
   1946  1437		       a5 80		      LDA	player0x
   1947  1439		       18		      CLC
   1948  143a		       69 04		      ADC	#4
   1949  143c		       85 84		      STA	ballx
   1950  143e		       a5 85		      LDA	player0y
   1951  1440		       38		      SEC
   1952  1441		       e9 05		      SBC	#5
   1953  1443		       85 89		      STA	bally
   1954  1445				   .
   1955  1445							; 
   1956  1445
   1957  1445				   .
   1958  1445							; 
   1959  1445
   1960  1445				   .L0317		;  if _Ch0_Sound  <>  3 then _Ch0_Sound  =  2	:  _Ch0_Duration  =  1	:  _Ch0_Counter  =  0
   1961  1445
   1962  1445		       a5 d9		      LDA	_Ch0_Sound
   1963  1447		       c9 03		      CMP	#3
   1964  1449		       f0 0c		      BEQ	.skipL0317
   1965  144b				   .condpart26
   1966  144b		       a9 02		      LDA	#2
   1967  144d		       85 d9		      STA	_Ch0_Sound
   1968  144f		       a9 01		      LDA	#1
   1969  1451		       85 da		      STA	_Ch0_Duration
   1970  1453		       a9 00		      LDA	#0
   1971  1455		       85 db		      STA	_Ch0_Counter
   1972  1457				   .skipL0317
   1973  1457				   .
   1974  1457							; 
   1975  1457
   1976  1457				   .L0318		;  if player1x  >  player0x then _Bit2_Ball_Shot_Dir_Right1{2}  =  1 else _Bit0_Ball_Shot_Dir_Left1{0}  =  1
   1977  1457
   1978  1457		       a5 80		      LDA	player0x
   1979  1459		       c5 81		      CMP	player1x
   1980  145b		       b0 09		      BCS	.skipL0318
   1981  145d				   .condpart27
   1982  145d		       a5 d6		      LDA	_Bit2_Ball_Shot_Dir_Right1
   1983  145f		       09 04		      ORA	#4
   1984  1461		       85 d6		      STA	_Bit2_Ball_Shot_Dir_Right1
   1985  1463		       4c 6c d4 	      jmp	.skipelse1
   1986  1466				   .skipL0318
   1987  1466		       a5 d6		      LDA	_Bit0_Ball_Shot_Dir_Left1
   1988  1468		       09 01		      ORA	#1
   1989  146a		       85 d6		      STA	_Bit0_Ball_Shot_Dir_Left1
   1990  146c				   .skipelse1
   1991  146c				   .L0319		;  if !_Bit2_Ball_Shot_Dir_Right1{2} then __Skip_Additional_Right
   1992  146c
   1993  146c		       a5 d6		      LDA	_Bit2_Ball_Shot_Dir_Right1
   1994  146e		       29 04		      AND	#4
   1995  1470					      if	((* - .__Skip_Additional_Right) < 127) && ((* - .__Skip_Additional_Right) > -128)
   1996  1470		       f0 13		      BEQ	.__Skip_Additional_Right
   1997  1472				  -	      else
   1998  1472				  -	      bne	.10skip__Skip_Additional_Right
   1999  1472				  -	      jmp	.__Skip_Additional_Right
   2000  1472				  -.10skip__Skip_Additional_Right
   2001  1472					      endif
   2002  1472				   .L0320		;  temp4  =  player1x	-  player0x
   2003  1472
   2004  1472		       a5 81		      LDA	player1x
   2005  1474		       38		      SEC
   2006  1475		       e5 80		      SBC	player0x
   2007  1477		       85 9f		      STA	temp4
   2008  1479				   .L0321		;  if temp4  >  25 then _Bit3_Ball_Shot_Dir_Right2{3}	=  1
   2009  1479
   2010  1479		       a9 19		      LDA	#25
   2011  147b		       c5 9f		      CMP	temp4
   2012  147d		       b0 06		      BCS	.skipL0321
   2013  147f				   .condpart28
   2014  147f		       a5 d6		      LDA	_Bit3_Ball_Shot_Dir_Right2
   2015  1481		       09 08		      ORA	#8
   2016  1483		       85 d6		      STA	_Bit3_Ball_Shot_Dir_Right2
   2017  1485				   .skipL0321
   2018  1485				   .__Skip_Additional_Right
   2019  1485							; __Skip_Additional_Right
   2020  1485
   2021  1485				   .L0322		;  if !_Bit0_Ball_Shot_Dir_Left1{0} then __Skip_Enemy_Fire
   2022  1485
   2023  1485		       a5 d6		      LDA	_Bit0_Ball_Shot_Dir_Left1
   2024  1487		       4a		      LSR
   2025  1488					      if	((* - .__Skip_Enemy_Fire) < 127) && ((* - .__Skip_Enemy_Fire) > -128)
   2026  1488		       90 13		      bcc	.__Skip_Enemy_Fire
   2027  148a				  -	      else
   2028  148a				  -	      bcs	.11skip__Skip_Enemy_Fire
   2029  148a				  -	      jmp	.__Skip_Enemy_Fire
   2030  148a				  -.11skip__Skip_Enemy_Fire
   2031  148a					      endif
   2032  148a				   .L0323		;  temp4  =  player0x	-  player1x
   2033  148a
   2034  148a		       a5 80		      LDA	player0x
   2035  148c		       38		      SEC
   2036  148d		       e5 81		      SBC	player1x
   2037  148f		       85 9f		      STA	temp4
   2038  1491				   .L0324		;  if temp4  >  25 then _Bit1_Ball_Shot_Dir_Left2{1}  =  1
   2039  1491
   2040  1491		       a9 19		      LDA	#25
   2041  1493		       c5 9f		      CMP	temp4
   2042  1495		       b0 06		      BCS	.skipL0324
   2043  1497				   .condpart29
   2044  1497		       a5 d6		      LDA	_Bit1_Ball_Shot_Dir_Left2
   2045  1499		       09 02		      ORA	#2
   2046  149b		       85 d6		      STA	_Bit1_Ball_Shot_Dir_Left2
   2047  149d				   .skipL0324
   2048  149d				   .
   2049  149d							; 
   2050  149d
   2051  149d				   .__Skip_Enemy_Fire
   2052  149d							; __Skip_Enemy_Fire
   2053  149d
   2054  149d				   .
   2055  149d							; 
   2056  149d
   2057  149d				   .
   2058  149d							; 
   2059  149d
   2060  149d				   .
   2061  149d							; 
   2062  149d
   2063  149d				   .L0325		;  if !_Bit3_Ball_Shot_Moving{3} then goto __Skip_Enemy_Missile
   2064  149d
   2065  149d		       a5 ec		      LDA	_Bit3_Ball_Shot_Moving
   2066  149f		       29 08		      AND	#8
   2067  14a1		       d0 03		      BNE	.skipL0325
   2068  14a3				   .condpart30
   2069  14a3		       4c 1e d5 	      jmp	.__Skip_Enemy_Missile
   2070  14a6
   2071  14a6				   .skipL0325
   2072  14a6				   .
   2073  14a6							; 
   2074  14a6
   2075  14a6				   .
   2076  14a6							; 
   2077  14a6
   2078  14a6				   .L0326		;  if bally  >  player1y then bally  =  bally	-  1
   2079  14a6
   2080  14a6		       a5 86		      LDA	player1y
   2081  14a8		       c5 89		      CMP	bally
   2082  14aa		       b0 02		      BCS	.skipL0326
   2083  14ac				   .condpart31
   2084  14ac		       c6 89		      DEC	bally
   2085  14ae				   .skipL0326
   2086  14ae				   .L0327		;  if _Bit0_Ball_Shot_Dir_Left1{0} then ballx	=  ballx  -  1	:  if _Bit1_Ball_Shot_Dir_Left2{1} then ballx  =  ballx  -  1
   2087  14ae
   2088  14ae		       a5 d6		      LDA	_Bit0_Ball_Shot_Dir_Left1
   2089  14b0		       4a		      LSR
   2090  14b1		       90 0a		      BCC	.skipL0327
   2091  14b3				   .condpart32
   2092  14b3		       c6 84		      DEC	ballx
   2093  14b5		       a5 d6		      LDA	_Bit1_Ball_Shot_Dir_Left2
   2094  14b7		       29 02		      AND	#2
   2095  14b9		       f0 02		      BEQ	.skip32then
   2096  14bb				   .condpart33
   2097  14bb		       c6 84		      DEC	ballx
   2098  14bd				   .skip32then
   2099  14bd				   .skipL0327
   2100  14bd				   .L0328		;  if _Bit2_Ball_Shot_Dir_Right1{2} then ballx  =  ballx  +  1  :  if _Bit3_Ball_Shot_Dir_Right2{3} then ballx  =  ballx  +  1
   2101  14bd
   2102  14bd		       a5 d6		      LDA	_Bit2_Ball_Shot_Dir_Right1
   2103  14bf		       29 04		      AND	#4
   2104  14c1		       f0 0a		      BEQ	.skipL0328
   2105  14c3				   .condpart34
   2106  14c3		       e6 84		      INC	ballx
   2107  14c5		       a5 d6		      LDA	_Bit3_Ball_Shot_Dir_Right2
   2108  14c7		       29 08		      AND	#8
   2109  14c9		       f0 02		      BEQ	.skip34then
   2110  14cb				   .condpart35
   2111  14cb		       e6 84		      INC	ballx
   2112  14cd				   .skip34then
   2113  14cd				   .skipL0328
   2114  14cd				   .
   2115  14cd							; 
   2116  14cd
   2117  14cd				   .L0329		;  rem apply gravity
   2118  14cd
   2119  14cd				   .L0330		;  Bally_velocity  =  Bally_velocity  +  gravity_missile0
   2120  14cd
   2121  14cd		       a5 e4		      LDA	q
   2122  14cf		       18		      CLC
   2123  14d0		       69 06		      ADC	#6
   2124  14d2		       85 e4		      STA	q
   2125  14d4		       a5 e3		      LDA	Bally_velocity
   2126  14d6		       69 00		      ADC	#0
   2127  14d8		       85 e3		      STA	Bally_velocity
   2128  14da				   .L0331		;  Bally_position  =  Bally_position  +  Bally_velocity
   2129  14da
   2130  14da		       a5 e5		      LDA	r
   2131  14dc		       18		      CLC
   2132  14dd		       65 e4		      ADC	q
   2133  14df		       85 e5		      STA	r
   2134  14e1		       a5 89		      LDA	Bally_position
   2135  14e3		       65 e3		      ADC	Bally_velocity
   2136  14e5		       85 89		      STA	Bally_position
   2137  14e7				   .
   2138  14e7							; 
   2139  14e7
   2140  14e7				   .
   2141  14e7							; 
   2142  14e7
   2143  14e7				   .
   2144  14e7							; 
   2145  14e7
   2146  14e7				   .L0332		;  if bally  <  _M_Edge_Top then goto __Delete_Enemy_Missile
   2147  14e7
   2148  14e7		       a5 89		      LDA	bally
   2149  14e9		       c9 02		      CMP	#_M_Edge_Top
   2150  14eb		       b0 03		      BCS	.skipL0332
   2151  14ed				   .condpart36
   2152  14ed		       4c 12 d5 	      jmp	.__Delete_Enemy_Missile
   2153  14f0
   2154  14f0				   .skipL0332
   2155  14f0				   .L0333		;  if bally  >  _M_Edge_Bottom then goto __Delete_Enemy_Missile
   2156  14f0
   2157  14f0		       a9 58		      LDA	#_M_Edge_Bottom
   2158  14f2		       c5 89		      CMP	bally
   2159  14f4		       b0 03		      BCS	.skipL0333
   2160  14f6				   .condpart37
   2161  14f6		       4c 12 d5 	      jmp	.__Delete_Enemy_Missile
   2162  14f9
   2163  14f9				   .skipL0333
   2164  14f9				   .L0334		;  if ballx  <  _M_Edge_Left then goto __Delete_Enemy_Missile
   2165  14f9
   2166  14f9		       a5 84		      LDA	ballx
   2167  14fb		       c9 0e		      CMP	#_M_Edge_Left
   2168  14fd		       b0 03		      BCS	.skipL0334
   2169  14ff				   .condpart38
   2170  14ff		       4c 12 d5 	      jmp	.__Delete_Enemy_Missile
   2171  1502
   2172  1502				   .skipL0334
   2173  1502				   .L0335		;  if ballx  >  _M_Edge_Right then goto __Delete_Enemy_Missile
   2174  1502
   2175  1502		       a9 94		      LDA	#_M_Edge_Right
   2176  1504		       c5 84		      CMP	ballx
   2177  1506		       b0 03		      BCS	.skipL0335
   2178  1508				   .condpart39
   2179  1508		       4c 12 d5 	      jmp	.__Delete_Enemy_Missile
   2180  150b
   2181  150b				   .skipL0335
   2182  150b				   .
   2183  150b							; 
   2184  150b
   2185  150b				   .
   2186  150b							; 
   2187  150b
   2188  150b				   .L0336		;  if !collision(playfield,ball) then goto __Skip_Enemy_Missile
   2189  150b
   2190  150b		       24 06		      bit	CXBLPF
   2191  150d		       30 03		      BMI	.skipL0336
   2192  150f				   .condpart40
   2193  150f		       4c 1e d5 	      jmp	.__Skip_Enemy_Missile
   2194  1512
   2195  1512				   .skipL0336
   2196  1512				   .
   2197  1512							; 
   2198  1512
   2199  1512				   .__Delete_Enemy_Missile
   2200  1512							; __Delete_Enemy_Missile
   2201  1512
   2202  1512				   .
   2203  1512							; 
   2204  1512
   2205  1512				   .
   2206  1512							; 
   2207  1512
   2208  1512				   .L0337		;  _Bit3_Ball_Shot_Moving{3}  =  0  :	ballx  =  200  :  bally  =  200
   2209  1512
   2210  1512		       a5 ec		      LDA	_Bit3_Ball_Shot_Moving
   2211  1514		       29 f7		      AND	#247
   2212  1516		       85 ec		      STA	_Bit3_Ball_Shot_Moving
   2213  1518		       a9 c8		      LDA	#200
   2214  151a		       85 84		      STA	ballx
   2215  151c		       85 89		      STA	bally
   2216  151e				   .
   2217  151e							; 
   2218  151e
   2219  151e				   .__Skip_Enemy_Missile
   2220  151e							; __Skip_Enemy_Missile
   2221  151e
   2222  151e				   .
   2223  151e							; 
   2224  151e
   2225  151e				   .
   2226  151e							; 
   2227  151e
   2228  151e				   .
   2229  151e							; 
   2230  151e
   2231  151e				   .
   2232  151e							; 
   2233  151e
   2234  151e				   .
   2235  151e							; 
   2236  151e
   2237  151e				   .L0338		;  if !joy0fire then goto __Skip_Fire
   2238  151e
   2239  151e		       24 0c		      bit	INPT4
   2240  1520		       10 03		      BPL	.skipL0338
   2241  1522				   .condpart41
   2242  1522		       4c b4 d5 	      jmp	.__Skip_Fire
   2243  1525
   2244  1525				   .skipL0338
   2245  1525				   .
   2246  1525							; 
   2247  1525
   2248  1525				   .
   2249  1525							; 
   2250  1525
   2251  1525				   .L0339		;  if _Bit7_M0_Moving{7}  ||  _Bit0_P1_Dir_Up{0} then goto __Skip_Fire
   2252  1525
   2253  1525		       24 ec		      BIT	_Bit7_M0_Moving
   2254  1527		       10 03		      BPL	.skipL0339
   2255  1529				   .condpart42
   2256  1529		       4c 31 d5 	      jmp	.condpart43
   2257  152c				   .skipL0339
   2258  152c		       a5 d8		      LDA	_Bit0_P1_Dir_Up
   2259  152e		       4a		      LSR
   2260  152f		       90 03		      BCC	.skip2OR
   2261  1531				   .condpart43
   2262  1531		       4c b4 d5 	      jmp	.__Skip_Fire
   2263  1534
   2264  1534				   .skip2OR
   2265  1534				   .
   2266  1534							; 
   2267  1534
   2268  1534				   .
   2269  1534							; 
   2270  1534
   2271  1534				   .
   2272  1534							; 
   2273  1534
   2274  1534				   .L0340		;  _BitOp_M0_Dir  =  _BitOp_P1_Dir
   2275  1534
   2276  1534		       a5 d8		      LDA	_BitOp_P1_Dir
   2277  1536		       85 d7		      STA	_BitOp_M0_Dir
   2278  1538				   .
   2279  1538							; 
   2280  1538
   2281  1538				   .L0341		;  if _BitOp_M0_Dir  =  0  &&	_Bit6_Flip_P1{6} then _BitOp_M0_Dir  =	4
   2282  1538
   2283  1538		       a5 d7		      LDA	_BitOp_M0_Dir
   2284  153a		       c9 00		      CMP	#0
   2285  153c		       d0 08		      BNE	.skipL0341
   2286  153e				   .condpart44
   2287  153e		       24 ec		      BIT	_Bit6_Flip_P1
   2288  1540		       50 04		      BVC	.skip44then
   2289  1542				   .condpart45
   2290  1542		       a9 04		      LDA	#4
   2291  1544		       85 d7		      STA	_BitOp_M0_Dir
   2292  1546				   .skip44then
   2293  1546				   .skipL0341
   2294  1546				   .L0342		;  if _BitOp_M0_Dir  =  0  &&	! _Bit6_Flip_P1{6} then _BitOp_M0_Dir  =  8
   2295  1546
   2296  1546		       a5 d7		      LDA	_BitOp_M0_Dir
   2297  1548		       c9 00		      CMP	#0
   2298  154a		       d0 08		      BNE	.skipL0342
   2299  154c				   .condpart46
   2300  154c		       24 ec		      BIT	_Bit6_Flip_P1
   2301  154e		       70 04		      BVS	.skip46then
   2302  1550				   .condpart47
   2303  1550		       a9 08		      LDA	#8
   2304  1552		       85 d7		      STA	_BitOp_M0_Dir
   2305  1554				   .skip46then
   2306  1554				   .skipL0342
   2307  1554				   .
   2308  1554							; 
   2309  1554
   2310  1554				   .
   2311  1554							; 
   2312  1554
   2313  1554				   .L0343		;  _Bit7_M0_Moving{7}	=  1
   2314  1554
   2315  1554		       a5 ec		      LDA	_Bit7_M0_Moving
   2316  1556		       09 80		      ORA	#128
   2317  1558		       85 ec		      STA	_Bit7_M0_Moving
   2318  155a				   .
   2319  155a							; 
   2320  155a
   2321  155a				   .
   2322  155a							; 
   2323  155a
   2324  155a				   .L0344		;  M0y_velocity  =  0.0  :  u	=  0
   2325  155a
   2326  155a		       a2 00		      LDX	#0
   2327  155c		       86 e7		      STX	t
   2328  155e		       a9 00		      LDA	#0
   2329  1560		       85 e6		      STA	M0y_velocity
   2330  1562		       a9 00		      LDA	#0
   2331  1564		       85 e8		      STA	u
   2332  1566				   .
   2333  1566							; 
   2334  1566
   2335  1566				   .
   2336  1566							; 
   2337  1566
   2338  1566				   .L0345		;  if _Bit1_M0_Dir_Down{1} then missile0x  =  player1x  +  9  :  missile0y  =	player1y  -  1
   2339  1566
   2340  1566		       a5 d7		      LDA	_Bit1_M0_Dir_Down
   2341  1568		       29 02		      AND	#2
   2342  156a		       f0 0e		      BEQ	.skipL0345
   2343  156c				   .condpart48
   2344  156c		       a5 81		      LDA	player1x
   2345  156e		       18		      CLC
   2346  156f		       69 09		      ADC	#9
   2347  1571		       85 82		      STA	missile0x
   2348  1573		       a5 86		      LDA	player1y
   2349  1575		       38		      SEC
   2350  1576		       e9 01		      SBC	#1
   2351  1578		       85 91		      STA	missile0y
   2352  157a				   .skipL0345
   2353  157a				   .L0346		;  if _Bit2_M0_Dir_Left{2} then missile0x  =  player1x  +  2  :  missile0y  =	player1y  -  3
   2354  157a
   2355  157a		       a5 d7		      LDA	_Bit2_M0_Dir_Left
   2356  157c		       29 04		      AND	#4
   2357  157e		       f0 0e		      BEQ	.skipL0346
   2358  1580				   .condpart49
   2359  1580		       a5 81		      LDA	player1x
   2360  1582		       18		      CLC
   2361  1583		       69 02		      ADC	#2
   2362  1585		       85 82		      STA	missile0x
   2363  1587		       a5 86		      LDA	player1y
   2364  1589		       38		      SEC
   2365  158a		       e9 03		      SBC	#3
   2366  158c		       85 91		      STA	missile0y
   2367  158e				   .skipL0346
   2368  158e				   .L0347		;  if _Bit3_M0_Dir_Right{3} then missile0x  =	player1x  +  16  :  missile0y  =  player1y  -  3
   2369  158e
   2370  158e		       a5 d7		      LDA	_Bit3_M0_Dir_Right
   2371  1590		       29 08		      AND	#8
   2372  1592		       f0 0e		      BEQ	.skipL0347
   2373  1594				   .condpart50
   2374  1594		       a5 81		      LDA	player1x
   2375  1596		       18		      CLC
   2376  1597		       69 10		      ADC	#16
   2377  1599		       85 82		      STA	missile0x
   2378  159b		       a5 86		      LDA	player1y
   2379  159d		       38		      SEC
   2380  159e		       e9 03		      SBC	#3
   2381  15a0		       85 91		      STA	missile0y
   2382  15a2				   .skipL0347
   2383  15a2				   .
   2384  15a2							; 
   2385  15a2
   2386  15a2				   .
   2387  15a2							; 
   2388  15a2
   2389  15a2				   .L0348		;  if _Ch0_Sound  <>  3 then _Ch0_Sound  =  2	:  _Ch0_Duration  =  1	:  _Ch0_Counter  =  0
   2390  15a2
   2391  15a2		       a5 d9		      LDA	_Ch0_Sound
   2392  15a4		       c9 03		      CMP	#3
   2393  15a6		       f0 0c		      BEQ	.skipL0348
   2394  15a8				   .condpart51
   2395  15a8		       a9 02		      LDA	#2
   2396  15aa		       85 d9		      STA	_Ch0_Sound
   2397  15ac		       a9 01		      LDA	#1
   2398  15ae		       85 da		      STA	_Ch0_Duration
   2399  15b0		       a9 00		      LDA	#0
   2400  15b2		       85 db		      STA	_Ch0_Counter
   2401  15b4				   .skipL0348
   2402  15b4				   .
   2403  15b4							; 
   2404  15b4
   2405  15b4				   .__Skip_Fire
   2406  15b4							; __Skip_Fire
   2407  15b4
   2408  15b4				   .
   2409  15b4							; 
   2410  15b4
   2411  15b4				   .
   2412  15b4							; 
   2413  15b4
   2414  15b4				   .
   2415  15b4							; 
   2416  15b4
   2417  15b4				   .
   2418  15b4							; 
   2419  15b4
   2420  15b4				   .L0349		;  if !_Bit7_M0_Moving{7} then goto __Skip_Missile
   2421  15b4
   2422  15b4		       24 ec		      BIT	_Bit7_M0_Moving
   2423  15b6		       30 03		      BMI	.skipL0349
   2424  15b8				   .condpart52
   2425  15b8		       4c 33 d6 	      jmp	.__Skip_Missile
   2426  15bb
   2427  15bb				   .skipL0349
   2428  15bb				   .
   2429  15bb							; 
   2430  15bb
   2431  15bb				   .
   2432  15bb							; 
   2433  15bb
   2434  15bb				   .L0350		;  if _Bit1_M0_Dir_Down{1} then missile0y  =  missile0y  +  2
   2435  15bb
   2436  15bb		       a5 d7		      LDA	_Bit1_M0_Dir_Down
   2437  15bd		       29 02		      AND	#2
   2438  15bf		       f0 07		      BEQ	.skipL0350
   2439  15c1				   .condpart53
   2440  15c1		       a5 91		      LDA	missile0y
   2441  15c3		       18		      CLC
   2442  15c4		       69 02		      ADC	#2
   2443  15c6		       85 91		      STA	missile0y
   2444  15c8				   .skipL0350
   2445  15c8				   .L0351		;  if _Bit2_M0_Dir_Left{2} then missile0x  =  missile0x  -  2
   2446  15c8
   2447  15c8		       a5 d7		      LDA	_Bit2_M0_Dir_Left
   2448  15ca		       29 04		      AND	#4
   2449  15cc		       f0 07		      BEQ	.skipL0351
   2450  15ce				   .condpart54
   2451  15ce		       a5 82		      LDA	missile0x
   2452  15d0		       38		      SEC
   2453  15d1		       e9 02		      SBC	#2
   2454  15d3		       85 82		      STA	missile0x
   2455  15d5				   .skipL0351
   2456  15d5				   .L0352		;  if _Bit3_M0_Dir_Right{3} then missile0x  =	missile0x  +  2
   2457  15d5
   2458  15d5		       a5 d7		      LDA	_Bit3_M0_Dir_Right
   2459  15d7		       29 08		      AND	#8
   2460  15d9		       f0 07		      BEQ	.skipL0352
   2461  15db				   .condpart55
   2462  15db		       a5 82		      LDA	missile0x
   2463  15dd		       18		      CLC
   2464  15de		       69 02		      ADC	#2
   2465  15e0		       85 82		      STA	missile0x
   2466  15e2				   .skipL0352
   2467  15e2				   .
   2468  15e2							; 
   2469  15e2
   2470  15e2				   .L0353		;  rem apply gravity
   2471  15e2
   2472  15e2				   .L0354		;  M0y_velocity  =  M0y_velocity  +  gravity_missile0
   2473  15e2
   2474  15e2		       a5 e7		      LDA	t
   2475  15e4		       18		      CLC
   2476  15e5		       69 06		      ADC	#6
   2477  15e7		       85 e7		      STA	t
   2478  15e9		       a5 e6		      LDA	M0y_velocity
   2479  15eb		       69 00		      ADC	#0
   2480  15ed		       85 e6		      STA	M0y_velocity
   2481  15ef				   .L0355		;  M0y_position  =  M0y_position  +  M0y_velocity
   2482  15ef
   2483  15ef		       a5 e8		      LDA	u
   2484  15f1		       18		      CLC
   2485  15f2		       65 e7		      ADC	t
   2486  15f4		       85 e8		      STA	u
   2487  15f6		       a5 91		      LDA	M0y_position
   2488  15f8		       65 e6		      ADC	M0y_velocity
   2489  15fa		       85 91		      STA	M0y_position
   2490  15fc				   .
   2491  15fc							; 
   2492  15fc
   2493  15fc				   .
   2494  15fc							; 
   2495  15fc
   2496  15fc				   .
   2497  15fc							; 
   2498  15fc
   2499  15fc				   .L0356		;  if missile0y  <  _M_Edge_Top then goto __Delete_Missile
   2500  15fc
   2501  15fc		       a5 91		      LDA	missile0y
   2502  15fe		       c9 02		      CMP	#_M_Edge_Top
   2503  1600		       b0 03		      BCS	.skipL0356
   2504  1602				   .condpart56
   2505  1602		       4c 27 d6 	      jmp	.__Delete_Missile
   2506  1605
   2507  1605				   .skipL0356
   2508  1605				   .L0357		;  if missile0y  >  _M_Edge_Bottom then goto __Delete_Missile
   2509  1605
   2510  1605		       a9 58		      LDA	#_M_Edge_Bottom
   2511  1607		       c5 91		      CMP	missile0y
   2512  1609		       b0 03		      BCS	.skipL0357
   2513  160b				   .condpart57
   2514  160b		       4c 27 d6 	      jmp	.__Delete_Missile
   2515  160e
   2516  160e				   .skipL0357
   2517  160e				   .L0358		;  if missile0x  <  _M_Edge_Left then goto __Delete_Missile
   2518  160e
   2519  160e		       a5 82		      LDA	missile0x
   2520  1610		       c9 0e		      CMP	#_M_Edge_Left
   2521  1612		       b0 03		      BCS	.skipL0358
   2522  1614				   .condpart58
   2523  1614		       4c 27 d6 	      jmp	.__Delete_Missile
   2524  1617
   2525  1617				   .skipL0358
   2526  1617				   .L0359		;  if missile0x  >  _M_Edge_Right then goto __Delete_Missile
   2527  1617
   2528  1617		       a9 94		      LDA	#_M_Edge_Right
   2529  1619		       c5 82		      CMP	missile0x
   2530  161b		       b0 03		      BCS	.skipL0359
   2531  161d				   .condpart59
   2532  161d		       4c 27 d6 	      jmp	.__Delete_Missile
   2533  1620
   2534  1620				   .skipL0359
   2535  1620				   .
   2536  1620							; 
   2537  1620
   2538  1620				   .
   2539  1620							; 
   2540  1620
   2541  1620				   .L0360		;  if !collision(playfield,missile0) then goto __Skip_Missile
   2542  1620
   2543  1620		       24 04		      bit	CXM0FB
   2544  1622		       30 03		      BMI	.skipL0360
   2545  1624				   .condpart60
   2546  1624		       4c 33 d6 	      jmp	.__Skip_Missile
   2547  1627
   2548  1627				   .skipL0360
   2549  1627				   .
   2550  1627							; 
   2551  1627
   2552  1627				   .
   2553  1627							; 
   2554  1627
   2555  1627				   .
   2556  1627							; 
   2557  1627
   2558  1627				   .
   2559  1627							; 
   2560  1627
   2561  1627				   .__Delete_Missile
   2562  1627							; __Delete_Missile
   2563  1627
   2564  1627				   .
   2565  1627							; 
   2566  1627
   2567  1627				   .
   2568  1627							; 
   2569  1627
   2570  1627				   .L0361		;  _Bit7_M0_Moving{7}	=  0  :  missile0x  =  200  :  missile0y  =  200
   2571  1627
   2572  1627		       a5 ec		      LDA	_Bit7_M0_Moving
   2573  1629		       29 7f		      AND	#127
   2574  162b		       85 ec		      STA	_Bit7_M0_Moving
   2575  162d		       a9 c8		      LDA	#200
   2576  162f		       85 82		      STA	missile0x
   2577  1631		       85 91		      STA	missile0y
   2578  1633				   .
   2579  1633							; 
   2580  1633
   2581  1633				   .__Skip_Missile
   2582  1633							; __Skip_Missile
   2583  1633
   2584  1633				   .
   2585  1633							; 
   2586  1633
   2587  1633				   .
   2588  1633							; 
   2589  1633
   2590  1633				   .
   2591  1633							; 
   2592  1633
   2593  1633				   .
   2594  1633							; 
   2595  1633
   2596  1633				   .L0362		;  if !collision(player0,missile0) then __Skip_Shot_Enemy
   2597  1633
   2598  1633		       24 00		      bit	CXM0P
   2599  1635					      if	((* - .__Skip_Shot_Enemy) < 127) && ((* - .__Skip_Shot_Enemy) > -128)
   2600  1635		       50 38		      bvc	.__Skip_Shot_Enemy
   2601  1637				  -	      else
   2602  1637				  -	      bvs	.12skip__Skip_Shot_Enemy
   2603  1637				  -	      jmp	.__Skip_Shot_Enemy
   2604  1637				  -.12skip__Skip_Shot_Enemy
   2605  1637					      endif
   2606  1637				   .
   2607  1637							; 
   2608  1637
   2609  1637				   .
   2610  1637							; 
   2611  1637
   2612  1637				   .L0363		;  _Bit7_M0_Moving{7}	=  0  :  missile0x  =  200  :  missile0y  =  200
   2613  1637
   2614  1637		       a5 ec		      LDA	_Bit7_M0_Moving
   2615  1639		       29 7f		      AND	#127
   2616  163b		       85 ec		      STA	_Bit7_M0_Moving
   2617  163d		       a9 c8		      LDA	#200
   2618  163f		       85 82		      STA	missile0x
   2619  1641		       85 91		      STA	missile0y
   2620  1643				   .
   2621  1643							; 
   2622  1643
   2623  1643				   .L0364		;  if roommate_type  >  1 then __Skip_Shot_Enemy
   2624  1643
   2625  1643		       a9 01		      LDA	#1
   2626  1645		       c5 de		      CMP	roommate_type
   2627  1647					      if	((* - .__Skip_Shot_Enemy) < 127) && ((* - .__Skip_Shot_Enemy) > -128)
   2628  1647		       90 26		      bcc	.__Skip_Shot_Enemy
   2629  1649				  -	      else
   2630  1649				  -	      bcs	.13skip__Skip_Shot_Enemy
   2631  1649				  -	      jmp	.__Skip_Shot_Enemy
   2632  1649				  -.13skip__Skip_Shot_Enemy
   2633  1649					      endif
   2634  1649				   .
   2635  1649							; 
   2636  1649
   2637  1649				   .L0365		;  _Ch0_Sound	=  1  :  _Ch0_Duration	=  1  :  _Ch0_Counter  =  0
   2638  1649
   2639  1649		       a9 01		      LDA	#1
   2640  164b		       85 d9		      STA	_Ch0_Sound
   2641  164d		       85 da		      STA	_Ch0_Duration
   2642  164f		       a9 00		      LDA	#0
   2643  1651		       85 db		      STA	_Ch0_Counter
   2644  1653				   .
   2645  1653							; 
   2646  1653
   2647  1653				   .
   2648  1653							; 
   2649  1653
   2650  1653				   .L0366		;  player0y  =  200  :  w_roommate_startpos_y	=  200	:  score  =  score  +  40
   2651  1653
   2652  1653		       a9 c8		      LDA	#200
   2653  1655		       85 85		      STA	player0y
   2654  1657		       8d 6b f0 	      STA	w_roommate_startpos_y
   2655  165a		       f8		      SED
   2656  165b		       18		      CLC
   2657  165c		       a5 95		      LDA	score+2
   2658  165e		       69 40		      ADC	#$40
   2659  1660		       85 95		      STA	score+2
   2660  1662		       a5 94		      LDA	score+1
   2661  1664		       69 00		      ADC	#$00
   2662  1666		       85 94		      STA	score+1
   2663  1668		       a5 93		      LDA	score
   2664  166a		       69 00		      ADC	#$00
   2665  166c		       85 93		      STA	score
   2666  166e		       d8		      CLD
   2667  166f				   .
   2668  166f							; 
   2669  166f
   2670  166f				   .__Skip_Shot_Enemy
   2671  166f							; __Skip_Shot_Enemy
   2672  166f
   2673  166f				   .
   2674  166f							; 
   2675  166f
   2676  166f				   .
   2677  166f							; 
   2678  166f
   2679  166f				   .
   2680  166f							; 
   2681  166f
   2682  166f				   .
   2683  166f							; 
   2684  166f
   2685  166f				   .L0367		;  if !collision(ball,missile0) then __Skip_Shot_Extra_Wall
   2686  166f
   2687  166f		       24 04		      bit	CXM0FB
   2688  1671					      if	((* - .__Skip_Shot_Extra_Wall) < 127) && ((* - .__Skip_Shot_Extra_Wall) > -128)
   2689  1671		       50 3b		      bvc	.__Skip_Shot_Extra_Wall
   2690  1673				  -	      else
   2691  1673				  -	      bvs	.14skip__Skip_Shot_Extra_Wall
   2692  1673				  -	      jmp	.__Skip_Shot_Extra_Wall
   2693  1673				  -.14skip__Skip_Shot_Extra_Wall
   2694  1673					      endif
   2695  1673				   .
   2696  1673							; 
   2697  1673
   2698  1673				   .
   2699  1673							; 
   2700  1673
   2701  1673				   .L0368		;  _Bit7_M0_Moving{7}	=  0  :  missile0x  =  200  :  missile0y  =  200
   2702  1673
   2703  1673		       a5 ec		      LDA	_Bit7_M0_Moving
   2704  1675		       29 7f		      AND	#127
   2705  1677		       85 ec		      STA	_Bit7_M0_Moving
   2706  1679		       a9 c8		      LDA	#200
   2707  167b		       85 82		      STA	missile0x
   2708  167d		       85 91		      STA	missile0y
   2709  167f				   .
   2710  167f							; 
   2711  167f
   2712  167f				   .
   2713  167f							; 
   2714  167f
   2715  167f				   .L0369		;  if r_extra_wall_type  >  3 then __Skip_Shot_Extra_Wall
   2716  167f
   2717  167f		       a9 03		      LDA	#3
   2718  1681		       cd ee f0 	      CMP	r_extra_wall_type
   2719  1684					      if	((* - .__Skip_Shot_Extra_Wall) < 127) && ((* - .__Skip_Shot_Extra_Wall) > -128)
   2720  1684		       90 28		      bcc	.__Skip_Shot_Extra_Wall
   2721  1686				  -	      else
   2722  1686				  -	      bcs	.15skip__Skip_Shot_Extra_Wall
   2723  1686				  -	      jmp	.__Skip_Shot_Extra_Wall
   2724  1686				  -.15skip__Skip_Shot_Extra_Wall
   2725  1686					      endif
   2726  1686				   .
   2727  1686							; 
   2728  1686
   2729  1686				   .L0370		;  _Ch0_Sound	=  1  :  _Ch0_Duration	=  1  :  _Ch0_Counter  =  0
   2730  1686
   2731  1686		       a9 01		      LDA	#1
   2732  1688		       85 d9		      STA	_Ch0_Sound
   2733  168a		       85 da		      STA	_Ch0_Duration
   2734  168c		       a9 00		      LDA	#0
   2735  168e		       85 db		      STA	_Ch0_Counter
   2736  1690				   .L0371		;  w_extra_wall_startpos_x  =	200  :	bally  =  0  :	score  =  score  +  10
   2737  1690
   2738  1690		       a9 c8		      LDA	#200
   2739  1692		       8d 6f f0 	      STA	w_extra_wall_startpos_x
   2740  1695		       a9 00		      LDA	#0
   2741  1697		       85 89		      STA	bally
   2742  1699		       f8		      SED
   2743  169a		       18		      CLC
   2744  169b		       a5 95		      LDA	score+2
   2745  169d		       69 10		      ADC	#$10
   2746  169f		       85 95		      STA	score+2
   2747  16a1		       a5 94		      LDA	score+1
   2748  16a3		       69 00		      ADC	#$00
   2749  16a5		       85 94		      STA	score+1
   2750  16a7		       a5 93		      LDA	score
   2751  16a9		       69 00		      ADC	#$00
   2752  16ab		       85 93		      STA	score
   2753  16ad		       d8		      CLD
   2754  16ae				   .
   2755  16ae							; 
   2756  16ae
   2757  16ae				   .__Skip_Shot_Extra_Wall
   2758  16ae							; __Skip_Shot_Extra_Wall
   2759  16ae
   2760  16ae				   .
   2761  16ae							; 
   2762  16ae
   2763  16ae				   .
   2764  16ae							; 
   2765  16ae
   2766  16ae				   .
   2767  16ae							; 
   2768  16ae
   2769  16ae				   .L0372		;  if !collision(player1,player0) then goto __Skip_P1_Touched_P0
   2770  16ae
   2771  16ae		       24 07		      bit	CXPPMM
   2772  16b0		       30 03		      BMI	.skipL0372
   2773  16b2				   .condpart61
   2774  16b2		       4c 32 d7 	      jmp	.__Skip_P1_Touched_P0
   2775  16b5
   2776  16b5				   .skipL0372
   2777  16b5				   .
   2778  16b5							; 
   2779  16b5
   2780  16b5				   .
   2781  16b5							; 
   2782  16b5
   2783  16b5				   .L0373		;  if roommate_type  <  2 then goto _Decrease_live_counter
   2784  16b5
   2785  16b5		       a5 de		      LDA	roommate_type
   2786  16b7		       c9 02		      CMP	#2
   2787  16b9		       b0 03		      BCS	.skipL0373
   2788  16bb				   .condpart62
   2789  16bb		       4c e9 d3 	      jmp	._Decrease_live_counter
   2790  16be
   2791  16be				   .skipL0373
   2792  16be				   .
   2793  16be							; 
   2794  16be
   2795  16be				   .
   2796  16be							; 
   2797  16be
   2798  16be				   .L0374		;  if _Ch0_Sound  <>  3 then _Ch0_Sound  =  3	:  _Ch0_Duration  =  1	:  _Ch0_Counter  =  0
   2799  16be
   2800  16be		       a5 d9		      LDA	_Ch0_Sound
   2801  16c0		       c9 03		      CMP	#3
   2802  16c2		       f0 0c		      BEQ	.skipL0374
   2803  16c4				   .condpart63
   2804  16c4		       a9 03		      LDA	#3
   2805  16c6		       85 d9		      STA	_Ch0_Sound
   2806  16c8		       a9 01		      LDA	#1
   2807  16ca		       85 da		      STA	_Ch0_Duration
   2808  16cc		       a9 00		      LDA	#0
   2809  16ce		       85 db		      STA	_Ch0_Counter
   2810  16d0				   .skipL0374
   2811  16d0				   .L0375		;  if roommate_type  =  3 then _Bit2_Level_finished{2}  =  1  :  player0y  =  200  :  w_roommate_startpos_y  =  200  :  score	=  score  +  frame_counter  :  goto _skip_game_action
   2812  16d0
   2813  16d0		       a5 de		      LDA	roommate_type
   2814  16d2		       c9 03		      CMP	#3
   2815  16d4		       d0 25		      BNE	.skipL0375
   2816  16d6				   .condpart64
   2817  16d6		       a5 ec		      LDA	_Bit2_Level_finished
   2818  16d8		       09 04		      ORA	#4
   2819  16da		       85 ec		      STA	_Bit2_Level_finished
   2820  16dc		       a9 c8		      LDA	#200
   2821  16de		       85 85		      STA	player0y
   2822  16e0		       8d 6b f0 	      STA	w_roommate_startpos_y
   2823  16e3		       f8		      SED
   2824  16e4		       18		      CLC
   2825  16e5		       a5 95		      LDA	score+2
   2826  16e7		       65 d5		      ADC	frame_counter
   2827  16e9		       85 95		      STA	score+2
   2828  16eb		       a5 94		      LDA	score+1
   2829  16ed		       69 00		      ADC	#0
   2830  16ef		       85 94		      STA	score+1
   2831  16f1		       a5 93		      LDA	score
   2832  16f3		       69 00		      ADC	#0
   2833  16f5		       85 93		      STA	score
   2834  16f7		       d8		      CLD
   2835  16f8		       4c 2c d8 	      jmp	._skip_game_action
   2836  16fb
   2837  16fb				   .skipL0375
   2838  16fb				   .L0376		;  if roommate_type  =  2 then pfscore2  =  pfscore2  *  2  |	1  :  player1y	=  player1y  -	1  :  if !_Bit0_Safe_Point_reached{0} then WriteSendBuffer  =  req_safe_point  :  _Bit0_Safe_Point_reached{0}  =  1  :	Safe_Point_P1_x  =  player1x  :  Safe_Point_P1_y  =  player1y  :  _Bit1_Safe_Point_P1_Flip{1}  =  _Bit6_Flip_P1{6}
   2839  16fb
   2840  16fb		       a5 de		      LDA	roommate_type
   2841  16fd		       c9 02		      CMP	#2
   2842  16ff		       d0 31		      BNE	.skipL0376
   2843  1701				   .condpart65
   2844  1701							; complex statement detected
   2845  1701		       a5 f3		      LDA	pfscore2
   2846  1703		       0a		      asl
   2847  1704		       09 01		      ORA	#1
   2848  1706		       85 f3		      STA	pfscore2
   2849  1708		       c6 86		      DEC	player1y
   2850  170a		       a5 df		      LDA	_Bit0_Safe_Point_reached
   2851  170c		       4a		      LSR
   2852  170d		       b0 23		      BCS	.skip65then
   2853  170f				   .condpart66
   2854  170f		       a9 08		      LDA	#req_safe_point
   2855  1711		       8d f1 1f 	      STA	WriteSendBuffer
   2856  1714		       a5 df		      LDA	_Bit0_Safe_Point_reached
   2857  1716		       09 01		      ORA	#1
   2858  1718		       85 df		      STA	_Bit0_Safe_Point_reached
   2859  171a		       a5 81		      LDA	player1x
   2860  171c		       85 e0		      STA	Safe_Point_P1_x
   2861  171e		       a5 86		      LDA	player1y
   2862  1720		       85 e1		      STA	Safe_Point_P1_y
   2863  1722		       a5 ec		      LDA	_Bit6_Flip_P1
   2864  1724		       29 40		      AND	#64
   2865  1726		       08		      PHP
   2866  1727		       a5 df		      LDA	_Bit1_Safe_Point_P1_Flip
   2867  1729		       29 fd		      AND	#253
   2868  172b		       28		      PLP
   2869  172c		       f0 02		      .byte.b	$F0, $02
   2870  172e		       09 02		      ORA	#2
   2871  1730		       85 df		      STA	_Bit1_Safe_Point_P1_Flip
   2872  1732				   .skip65then
   2873  1732				   .skipL0376
   2874  1732				   .__Skip_P1_Touched_P0
   2875  1732							; __Skip_P1_Touched_P0
   2876  1732
   2877  1732				   .
   2878  1732							; 
   2879  1732
   2880  1732				   .
   2881  1732							; 
   2882  1732
   2883  1732				   .
   2884  1732							; 
   2885  1732
   2886  1732				   .L0377		;  if collision(player1,ball)	||  collision(player1,playfield) then goto _Decrease_live_counter
   2887  1732
   2888  1732		       24 03		      bit	CXP1FB
   2889  1734		       50 03		      BVC	.skipL0377
   2890  1736				   .condpart67
   2891  1736		       4c 3d d7 	      jmp	.condpart68
   2892  1739				   .skipL0377
   2893  1739		       24 03		      bit	CXP1FB
   2894  173b		       10 03		      BPL	.skip5OR
   2895  173d				   .condpart68
   2896  173d		       4c e9 d3 	      jmp	._Decrease_live_counter
   2897  1740
   2898  1740				   .skip5OR
   2899  1740				   .
   2900  1740							; 
   2901  1740
   2902  1740				   .
   2903  1740							; 
   2904  1740
   2905  1740				   .L0378		;  _BitOp_P1_Dir  =  _BitOp_P1_Dir  &	$F0
   2906  1740
   2907  1740		       a5 d8		      LDA	_BitOp_P1_Dir
   2908  1742		       29 f0		      AND	#$F0
   2909  1744		       85 d8		      STA	_BitOp_P1_Dir
   2910  1746				   .
   2911  1746							; 
   2912  1746
   2913  1746				   .L0379		;  if joy0up then P1y_velocity  =  0.0  :  player1y  =  player1y  -  1  :  _Bit0_P1_Dir_Up{0}	=  1  :  x  =  0  :  goto skip_gravity
   2914  1746
   2915  1746		       a9 10		      lda	#$10
   2916  1748		       2c 80 02 	      bit	SWCHA
   2917  174b		       d0 17		      BNE	.skipL0379
   2918  174d				   .condpart69
   2919  174d		       a2 00		      LDX	#0
   2920  174f		       86 ea		      STX	w
   2921  1751		       a9 00		      LDA	#0
   2922  1753		       85 e9		      STA	P1y_velocity
   2923  1755		       c6 86		      DEC	player1y
   2924  1757		       a5 d8		      LDA	_Bit0_P1_Dir_Up
   2925  1759		       09 01		      ORA	#1
   2926  175b		       85 d8		      STA	_Bit0_P1_Dir_Up
   2927  175d		       a9 00		      LDA	#0
   2928  175f		       85 eb		      STA	x
   2929  1761		       4c 9c d7 	      jmp	.skip_gravity
   2930  1764
   2931  1764				   .skipL0379
   2932  1764				   .L0380		;  if joy0down then P1y_velocity  =  0.0  :  player1y	=  player1y  +	1  :  _Bit1_P1_Dir_Down{1}  =  1  :  x	=  0  :  goto skip_gravity
   2933  1764
   2934  1764		       a9 20		      lda	#$20
   2935  1766		       2c 80 02 	      bit	SWCHA
   2936  1769		       d0 17		      BNE	.skipL0380
   2937  176b				   .condpart70
   2938  176b		       a2 00		      LDX	#0
   2939  176d		       86 ea		      STX	w
   2940  176f		       a9 00		      LDA	#0
   2941  1771		       85 e9		      STA	P1y_velocity
   2942  1773		       e6 86		      INC	player1y
   2943  1775		       a5 d8		      LDA	_Bit1_P1_Dir_Down
   2944  1777		       09 02		      ORA	#2
   2945  1779		       85 d8		      STA	_Bit1_P1_Dir_Down
   2946  177b		       a9 00		      LDA	#0
   2947  177d		       85 eb		      STA	x
   2948  177f		       4c 9c d7 	      jmp	.skip_gravity
   2949  1782
   2950  1782				   .skipL0380
   2951  1782				   .
   2952  1782							; 
   2953  1782
   2954  1782				   .
   2955  1782							; 
   2956  1782
   2957  1782				   .L0381		;  rem apply gravity
   2958  1782
   2959  1782				   .L0382		;  P1y_velocity  =  P1y_velocity  +  gravity_player1
   2960  1782
   2961  1782		       a5 ea		      LDA	w
   2962  1784		       18		      CLC
   2963  1785		       69 01		      ADC	#1
   2964  1787		       85 ea		      STA	w
   2965  1789		       a5 e9		      LDA	P1y_velocity
   2966  178b		       69 00		      ADC	#0
   2967  178d		       85 e9		      STA	P1y_velocity
   2968  178f				   .L0383		;  P1y_position  =  P1y_position  +  P1y_velocity
   2969  178f
   2970  178f		       a5 eb		      LDA	x
   2971  1791		       18		      CLC
   2972  1792		       65 ea		      ADC	w
   2973  1794		       85 eb		      STA	x
   2974  1796		       a5 86		      LDA	P1y_position
   2975  1798		       65 e9		      ADC	P1y_velocity
   2976  179a		       85 86		      STA	P1y_position
   2977  179c				   .
   2978  179c							; 
   2979  179c
   2980  179c				   .skip_gravity
   2981  179c							; skip_gravity
   2982  179c
   2983  179c				   .
   2984  179c							; 
   2985  179c
   2986  179c				   .L0384		;  if joy0left then _Bit6_Flip_P1{6}  =  1  :	_Bit2_P1_Dir_Left{2}  =  1  :  player1x  =  player1x  -  1  :  goto _skip_move
   2987  179c
   2988  179c		       2c 80 02 	      bit	SWCHA
   2989  179f		       70 11		      BVS	.skipL0384
   2990  17a1				   .condpart71
   2991  17a1		       a5 ec		      LDA	_Bit6_Flip_P1
   2992  17a3		       09 40		      ORA	#64
   2993  17a5		       85 ec		      STA	_Bit6_Flip_P1
   2994  17a7		       a5 d8		      LDA	_Bit2_P1_Dir_Left
   2995  17a9		       09 04		      ORA	#4
   2996  17ab		       85 d8		      STA	_Bit2_P1_Dir_Left
   2997  17ad		       c6 81		      DEC	player1x
   2998  17af		       4c c5 d7 	      jmp	._skip_move
   2999  17b2
   3000  17b2				   .skipL0384
   3001  17b2				   .L0385		;  if joy0right then _Bit6_Flip_P1{6}	=  0  :  _Bit3_P1_Dir_Right{3}	=  1  :  player1x  =  player1x	+  1
   3002  17b2
   3003  17b2		       2c 80 02 	      bit	SWCHA
   3004  17b5		       30 0e		      BMI	.skipL0385
   3005  17b7				   .condpart72
   3006  17b7		       a5 ec		      LDA	_Bit6_Flip_P1
   3007  17b9		       29 bf		      AND	#191
   3008  17bb		       85 ec		      STA	_Bit6_Flip_P1
   3009  17bd		       a5 d8		      LDA	_Bit3_P1_Dir_Right
   3010  17bf		       09 08		      ORA	#8
   3011  17c1		       85 d8		      STA	_Bit3_P1_Dir_Right
   3012  17c3		       e6 81		      INC	player1x
   3013  17c5				   .skipL0385
   3014  17c5				   ._skip_move
   3015  17c5							; _skip_move
   3016  17c5
   3017  17c5				   .
   3018  17c5							; 
   3019  17c5
   3020  17c5				   .
   3021  17c5							; 
   3022  17c5
   3023  17c5				   .L0386		;  if player1y  <  player_min_y  &&  r_Bit0_room_type_top{0} then player1y  =	player_min_y  :  goto _skip_game_action
   3024  17c5
   3025  17c5		       a5 86		      LDA	player1y
   3026  17c7		       c9 02		      CMP	#player_min_y
   3027  17c9		       b0 0d		      BCS	.skipL0386
   3028  17cb				   .condpart73
   3029  17cb		       ad e3 f0 	      LDA	r_Bit0_room_type_top
   3030  17ce		       4a		      LSR
   3031  17cf		       90 07		      BCC	.skip73then
   3032  17d1				   .condpart74
   3033  17d1		       a9 02		      LDA	#player_min_y
   3034  17d3		       85 86		      STA	player1y
   3035  17d5		       4c 2c d8 	      jmp	._skip_game_action
   3036  17d8
   3037  17d8				   .skip73then
   3038  17d8				   .skipL0386
   3039  17d8				   .
   3040  17d8							; 
   3041  17d8
   3042  17d8				   .L0387		;  if player1x  <  player_min_x then player1x	=  player_max_x  :  gosub _send_room_state  :  WriteSendBuffer	=  req_move_left  :  goto _skip_game_action
   3043  17d8
   3044  17d8		       a5 81		      LDA	player1x
   3045  17da		       c9 0a		      CMP	#player_min_x
   3046  17dc		       b0 0f		      BCS	.skipL0387
   3047  17de				   .condpart75
   3048  17de		       a9 86		      LDA	#player_max_x
   3049  17e0		       85 81		      STA	player1x
   3050  17e2		       20 e9 da 	      jsr	._send_room_state
   3051  17e5		       a9 03		      LDA	#req_move_left
   3052  17e7		       8d f1 1f 	      STA	WriteSendBuffer
   3053  17ea		       4c 2c d8 	      jmp	._skip_game_action
   3054  17ed
   3055  17ed				   .skipL0387
   3056  17ed				   .L0388		;  if player1y  <  player_min_y then player1y	=  player_max_y  :  gosub _send_room_state  :  WriteSendBuffer	=  req_move_up	:  goto _skip_game_action
   3057  17ed
   3058  17ed		       a5 86		      LDA	player1y
   3059  17ef		       c9 02		      CMP	#player_min_y
   3060  17f1		       b0 0f		      BCS	.skipL0388
   3061  17f3				   .condpart76
   3062  17f3		       a9 4c		      LDA	#player_max_y
   3063  17f5		       85 86		      STA	player1y
   3064  17f7		       20 e9 da 	      jsr	._send_room_state
   3065  17fa		       a9 04		      LDA	#req_move_up
   3066  17fc		       8d f1 1f 	      STA	WriteSendBuffer
   3067  17ff		       4c 2c d8 	      jmp	._skip_game_action
   3068  1802
   3069  1802				   .skipL0388
   3070  1802				   .L0389		;  if player1x  >  player_max_x then player1x	=  player_min_x  :  gosub _send_room_state  :  WriteSendBuffer	=  req_move_right  :  goto _skip_game_action
   3071  1802
   3072  1802		       a9 86		      LDA	#player_max_x
   3073  1804		       c5 81		      CMP	player1x
   3074  1806		       b0 0f		      BCS	.skipL0389
   3075  1808				   .condpart77
   3076  1808		       a9 0a		      LDA	#player_min_x
   3077  180a		       85 81		      STA	player1x
   3078  180c		       20 e9 da 	      jsr	._send_room_state
   3079  180f		       a9 05		      LDA	#req_move_right
   3080  1811		       8d f1 1f 	      STA	WriteSendBuffer
   3081  1814		       4c 2c d8 	      jmp	._skip_game_action
   3082  1817
   3083  1817				   .skipL0389
   3084  1817				   .L0390		;  if player1y  >  player_max_y then player1y	=  player_min_y  :  gosub _send_room_state  :  WriteSendBuffer	=  req_move_down  :  goto _skip_game_action
   3085  1817
   3086  1817		       a9 4c		      LDA	#player_max_y
   3087  1819		       c5 86		      CMP	player1y
   3088  181b		       b0 0f		      BCS	.skipL0390
   3089  181d				   .condpart78
   3090  181d		       a9 02		      LDA	#player_min_y
   3091  181f		       85 86		      STA	player1y
   3092  1821		       20 e9 da 	      jsr	._send_room_state
   3093  1824		       a9 06		      LDA	#req_move_down
   3094  1826		       8d f1 1f 	      STA	WriteSendBuffer
   3095  1829		       4c 2c d8 	      jmp	._skip_game_action
   3096  182c
   3097  182c				   .skipL0390
   3098  182c				   .
   3099  182c							; 
   3100  182c
   3101  182c				   ._skip_game_action
   3102  182c							; _skip_game_action
   3103  182c
   3104  182c				   .
   3105  182c							; 
   3106  182c
   3107  182c				   .
   3108  182c							; 
   3109  182c
   3110  182c				   .L0391		;  if !_Ch0_Sound then goto __Skip_Ch_0
   3111  182c
   3112  182c		       a5 d9		      LDA	_Ch0_Sound
   3113  182e		       d0 03		      BNE	.skipL0391
   3114  1830				   .condpart79
   3115  1830		       4c 5f d9 	      jmp	.__Skip_Ch_0
   3116  1833
   3117  1833				   .skipL0391
   3118  1833				   .
   3119  1833							; 
   3120  1833
   3121  1833				   .
   3122  1833							; 
   3123  1833
   3124  1833				   .L0392		;  _Ch0_Duration  =  _Ch0_Duration  -	1
   3125  1833
   3126  1833		       c6 da		      DEC	_Ch0_Duration
   3127  1835				   .
   3128  1835							; 
   3129  1835
   3130  1835				   .
   3131  1835							; 
   3132  1835
   3133  1835				   .
   3134  1835							; 
   3135  1835
   3136  1835				   .L0393		;  if _Ch0_Duration then goto __Skip_Ch_0
   3137  1835
   3138  1835		       a5 da		      LDA	_Ch0_Duration
   3139  1837		       f0 03		      BEQ	.skipL0393
   3140  1839				   .condpart80
   3141  1839		       4c 5f d9 	      jmp	.__Skip_Ch_0
   3142  183c
   3143  183c				   .skipL0393
   3144  183c				   .
   3145  183c							; 
   3146  183c
   3147  183c				   .
   3148  183c							; 
   3149  183c
   3150  183c				   .
   3151  183c							; 
   3152  183c
   3153  183c				   .
   3154  183c							; 
   3155  183c
   3156  183c				   .L0394		;  if _Ch0_Sound  <>  1 then goto __Skip_Ch0_Sound_001
   3157  183c
   3158  183c		       a5 d9		      LDA	_Ch0_Sound
   3159  183e		       c9 01		      CMP	#1
   3160  1840		       f0 03		      BEQ	.skipL0394
   3161  1842				   .condpart81
   3162  1842		       4c 8a d8 	      jmp	.__Skip_Ch0_Sound_001
   3163  1845
   3164  1845				   .skipL0394
   3165  1845				   .
   3166  1845							; 
   3167  1845
   3168  1845				   .
   3169  1845							; 
   3170  1845
   3171  1845				   .L0395		;  temp4  =  _SD_Shot_Wall[_Ch0_Counter]
   3172  1845
   3173  1845		       a6 db		      LDX	_Ch0_Counter
   3174  1847		       bd 28 da 	      LDA	_SD_Shot_Wall,x
   3175  184a		       85 9f		      STA	temp4
   3176  184c				   .
   3177  184c							; 
   3178  184c
   3179  184c				   .
   3180  184c							; 
   3181  184c
   3182  184c				   .L0396		;  if temp4  =  255 then goto __Clear_Ch_0
   3183  184c
   3184  184c		       a5 9f		      LDA	temp4
   3185  184e		       c9 ff		      CMP	#255
   3186  1850		       d0 03		      BNE	.skipL0396
   3187  1852				   .condpart82
   3188  1852		       4c 59 d9 	      jmp	.__Clear_Ch_0
   3189  1855
   3190  1855				   .skipL0396
   3191  1855				   .
   3192  1855							; 
   3193  1855
   3194  1855				   .
   3195  1855							; 
   3196  1855
   3197  1855				   .L0397		;  _Ch0_Counter  =  _Ch0_Counter  +  1
   3198  1855
   3199  1855		       e6 db		      INC	_Ch0_Counter
   3200  1857				   .L0398		;  temp5  =  _SD_Shot_Wall[_Ch0_Counter]  :  _Ch0_Counter  =  _Ch0_Counter  +	1
   3201  1857
   3202  1857		       a6 db		      LDX	_Ch0_Counter
   3203  1859		       bd 28 da 	      LDA	_SD_Shot_Wall,x
   3204  185c		       85 a0		      STA	temp5
   3205  185e		       e6 db		      INC	_Ch0_Counter
   3206  1860				   .L0399		;  temp6  =  _SD_Shot_Wall[_Ch0_Counter]  :  _Ch0_Counter  =  _Ch0_Counter  +	1
   3207  1860
   3208  1860		       a6 db		      LDX	_Ch0_Counter
   3209  1862		       bd 28 da 	      LDA	_SD_Shot_Wall,x
   3210  1865		       85 a1		      STA	temp6
   3211  1867		       e6 db		      INC	_Ch0_Counter
   3212  1869				   .L0400		;  if _Ch0_Counter{0} then COLUBK  =  _E0
   3213  1869
   3214  1869		       a5 db		      LDA	_Ch0_Counter
   3215  186b		       4a		      LSR
   3216  186c		       90 04		      BCC	.skipL0400
   3217  186e				   .condpart83
   3218  186e		       a9 e0		      LDA	#_E0
   3219  1870		       85 09		      STA	COLUBK
   3220  1872				   .skipL0400
   3221  1872				   .
   3222  1872							; 
   3223  1872
   3224  1872				   .
   3225  1872							; 
   3226  1872
   3227  1872				   .L0401		;  AUDV0  =  temp4
   3228  1872
   3229  1872		       a5 9f		      LDA	temp4
   3230  1874		       85 19		      STA	AUDV0
   3231  1876				   .L0402		;  AUDC0  =  temp5
   3232  1876
   3233  1876		       a5 a0		      LDA	temp5
   3234  1878		       85 15		      STA	AUDC0
   3235  187a				   .L0403		;  AUDF0  =  temp6
   3236  187a
   3237  187a		       a5 a1		      LDA	temp6
   3238  187c		       85 17		      STA	AUDF0
   3239  187e				   .
   3240  187e							; 
   3241  187e
   3242  187e				   .
   3243  187e							; 
   3244  187e
   3245  187e				   .L0404		;  _Ch0_Duration  =  _SD_Shot_Wall[_Ch0_Counter]  :  _Ch0_Counter  =  _Ch0_Counter  +	1
   3246  187e
   3247  187e		       a6 db		      LDX	_Ch0_Counter
   3248  1880		       bd 28 da 	      LDA	_SD_Shot_Wall,x
   3249  1883		       85 da		      STA	_Ch0_Duration
   3250  1885		       e6 db		      INC	_Ch0_Counter
   3251  1887				   .
   3252  1887							; 
   3253  1887
   3254  1887				   .
   3255  1887							; 
   3256  1887
   3257  1887				   .L0405		;  goto __Skip_Ch_0
   3258  1887
   3259  1887		       4c 5f d9 	      jmp	.__Skip_Ch_0
   3260  188a
   3261  188a				   .
   3262  188a							; 
   3263  188a
   3264  188a				   .__Skip_Ch0_Sound_001
   3265  188a							; __Skip_Ch0_Sound_001
   3266  188a
   3267  188a				   .
   3268  188a							; 
   3269  188a
   3270  188a				   .
   3271  188a							; 
   3272  188a
   3273  188a				   .
   3274  188a							; 
   3275  188a
   3276  188a				   .
   3277  188a							; 
   3278  188a
   3279  188a				   .L0406		;  if _Ch0_Sound  <>  2 then goto __Skip_Ch0_Sound_002
   3280  188a
   3281  188a		       a5 d9		      LDA	_Ch0_Sound
   3282  188c		       c9 02		      CMP	#2
   3283  188e		       f0 03		      BEQ	.skipL0406
   3284  1890				   .condpart84
   3285  1890		       4c cf d8 	      jmp	.__Skip_Ch0_Sound_002
   3286  1893
   3287  1893				   .skipL0406
   3288  1893				   .
   3289  1893							; 
   3290  1893
   3291  1893				   .
   3292  1893							; 
   3293  1893
   3294  1893				   .L0407		;  temp4  =  _SD_Shoot_Miss[_Ch0_Counter]
   3295  1893
   3296  1893		       a6 db		      LDX	_Ch0_Counter
   3297  1895		       bd 60 da 	      LDA	_SD_Shoot_Miss,x
   3298  1898		       85 9f		      STA	temp4
   3299  189a				   .
   3300  189a							; 
   3301  189a
   3302  189a				   .
   3303  189a							; 
   3304  189a
   3305  189a				   .L0408		;  if temp4  =  255 then goto __Clear_Ch_0
   3306  189a
   3307  189a		       a5 9f		      LDA	temp4
   3308  189c		       c9 ff		      CMP	#255
   3309  189e		       d0 03		      BNE	.skipL0408
   3310  18a0				   .condpart85
   3311  18a0		       4c 59 d9 	      jmp	.__Clear_Ch_0
   3312  18a3
   3313  18a3				   .skipL0408
   3314  18a3				   .
   3315  18a3							; 
   3316  18a3
   3317  18a3				   .
   3318  18a3							; 
   3319  18a3
   3320  18a3				   .L0409		;  _Ch0_Counter  =  _Ch0_Counter  +  1
   3321  18a3
   3322  18a3		       e6 db		      INC	_Ch0_Counter
   3323  18a5				   .L0410		;  temp5  =  _SD_Shoot_Miss[_Ch0_Counter]  :  _Ch0_Counter  =	_Ch0_Counter  +  1
   3324  18a5
   3325  18a5		       a6 db		      LDX	_Ch0_Counter
   3326  18a7		       bd 60 da 	      LDA	_SD_Shoot_Miss,x
   3327  18aa		       85 a0		      STA	temp5
   3328  18ac		       e6 db		      INC	_Ch0_Counter
   3329  18ae				   .L0411		;  temp6  =  _SD_Shoot_Miss[_Ch0_Counter]  :  _Ch0_Counter  =	_Ch0_Counter  +  1
   3330  18ae
   3331  18ae		       a6 db		      LDX	_Ch0_Counter
   3332  18b0		       bd 60 da 	      LDA	_SD_Shoot_Miss,x
   3333  18b3		       85 a1		      STA	temp6
   3334  18b5		       e6 db		      INC	_Ch0_Counter
   3335  18b7				   .
   3336  18b7							; 
   3337  18b7
   3338  18b7				   .
   3339  18b7							; 
   3340  18b7
   3341  18b7				   .L0412		;  AUDV0  =  temp4
   3342  18b7
   3343  18b7		       a5 9f		      LDA	temp4
   3344  18b9		       85 19		      STA	AUDV0
   3345  18bb				   .L0413		;  AUDC0  =  temp5
   3346  18bb
   3347  18bb		       a5 a0		      LDA	temp5
   3348  18bd		       85 15		      STA	AUDC0
   3349  18bf				   .L0414		;  AUDF0  =  temp6
   3350  18bf
   3351  18bf		       a5 a1		      LDA	temp6
   3352  18c1		       85 17		      STA	AUDF0
   3353  18c3				   .
   3354  18c3							; 
   3355  18c3
   3356  18c3				   .
   3357  18c3							; 
   3358  18c3
   3359  18c3				   .L0415		;  _Ch0_Duration  =  _SD_Shoot_Miss[_Ch0_Counter]  :  _Ch0_Counter  =	_Ch0_Counter  +  1
   3360  18c3
   3361  18c3		       a6 db		      LDX	_Ch0_Counter
   3362  18c5		       bd 60 da 	      LDA	_SD_Shoot_Miss,x
   3363  18c8		       85 da		      STA	_Ch0_Duration
   3364  18ca		       e6 db		      INC	_Ch0_Counter
   3365  18cc				   .
   3366  18cc							; 
   3367  18cc
   3368  18cc				   .
   3369  18cc							; 
   3370  18cc
   3371  18cc				   .L0416		;  goto __Skip_Ch_0
   3372  18cc
   3373  18cc		       4c 5f d9 	      jmp	.__Skip_Ch_0
   3374  18cf
   3375  18cf				   .
   3376  18cf							; 
   3377  18cf
   3378  18cf				   .__Skip_Ch0_Sound_002
   3379  18cf							; __Skip_Ch0_Sound_002
   3380  18cf
   3381  18cf				   .
   3382  18cf							; 
   3383  18cf
   3384  18cf				   .
   3385  18cf							; 
   3386  18cf
   3387  18cf				   .
   3388  18cf							; 
   3389  18cf
   3390  18cf				   .
   3391  18cf							; 
   3392  18cf
   3393  18cf				   .L0417		;  if _Ch0_Sound  <>  3 then goto __Skip_Ch0_Sound_003
   3394  18cf
   3395  18cf		       a5 d9		      LDA	_Ch0_Sound
   3396  18d1		       c9 03		      CMP	#3
   3397  18d3		       f0 03		      BEQ	.skipL0417
   3398  18d5				   .condpart86
   3399  18d5		       4c 14 d9 	      jmp	.__Skip_Ch0_Sound_003
   3400  18d8
   3401  18d8				   .skipL0417
   3402  18d8				   .
   3403  18d8							; 
   3404  18d8
   3405  18d8				   .
   3406  18d8							; 
   3407  18d8
   3408  18d8				   .L0418		;  temp4  =  _SD_Shoot_Enemy[_Ch0_Counter]
   3409  18d8
   3410  18d8		       a6 db		      LDX	_Ch0_Counter
   3411  18da		       bd a8 da 	      LDA	_SD_Shoot_Enemy,x
   3412  18dd		       85 9f		      STA	temp4
   3413  18df				   .
   3414  18df							; 
   3415  18df
   3416  18df				   .
   3417  18df							; 
   3418  18df
   3419  18df				   .L0419		;  if temp4  =  255 then goto __Clear_Ch_0
   3420  18df
   3421  18df		       a5 9f		      LDA	temp4
   3422  18e1		       c9 ff		      CMP	#255
   3423  18e3		       d0 03		      BNE	.skipL0419
   3424  18e5				   .condpart87
   3425  18e5		       4c 59 d9 	      jmp	.__Clear_Ch_0
   3426  18e8
   3427  18e8				   .skipL0419
   3428  18e8				   .
   3429  18e8							; 
   3430  18e8
   3431  18e8				   .
   3432  18e8							; 
   3433  18e8
   3434  18e8				   .L0420		;  _Ch0_Counter  =  _Ch0_Counter  +  1
   3435  18e8
   3436  18e8		       e6 db		      INC	_Ch0_Counter
   3437  18ea				   .L0421		;  temp5  =  _SD_Shoot_Enemy[_Ch0_Counter]  :	_Ch0_Counter  =  _Ch0_Counter  +  1
   3438  18ea
   3439  18ea		       a6 db		      LDX	_Ch0_Counter
   3440  18ec		       bd a8 da 	      LDA	_SD_Shoot_Enemy,x
   3441  18ef		       85 a0		      STA	temp5
   3442  18f1		       e6 db		      INC	_Ch0_Counter
   3443  18f3				   .L0422		;  temp6  =  _SD_Shoot_Enemy[_Ch0_Counter]  :	_Ch0_Counter  =  _Ch0_Counter  +  1
   3444  18f3
   3445  18f3		       a6 db		      LDX	_Ch0_Counter
   3446  18f5		       bd a8 da 	      LDA	_SD_Shoot_Enemy,x
   3447  18f8		       85 a1		      STA	temp6
   3448  18fa		       e6 db		      INC	_Ch0_Counter
   3449  18fc				   .
   3450  18fc							; 
   3451  18fc
   3452  18fc				   .
   3453  18fc							; 
   3454  18fc
   3455  18fc				   .L0423		;  AUDV0  =  temp4
   3456  18fc
   3457  18fc		       a5 9f		      LDA	temp4
   3458  18fe		       85 19		      STA	AUDV0
   3459  1900				   .L0424		;  AUDC0  =  temp5
   3460  1900
   3461  1900		       a5 a0		      LDA	temp5
   3462  1902		       85 15		      STA	AUDC0
   3463  1904				   .L0425		;  AUDF0  =  temp6
   3464  1904
   3465  1904		       a5 a1		      LDA	temp6
   3466  1906		       85 17		      STA	AUDF0
   3467  1908				   .
   3468  1908							; 
   3469  1908
   3470  1908				   .
   3471  1908							; 
   3472  1908
   3473  1908				   .L0426		;  _Ch0_Duration  =  _SD_Shoot_Enemy[_Ch0_Counter]  :	_Ch0_Counter  =  _Ch0_Counter  +  1
   3474  1908
   3475  1908		       a6 db		      LDX	_Ch0_Counter
   3476  190a		       bd a8 da 	      LDA	_SD_Shoot_Enemy,x
   3477  190d		       85 da		      STA	_Ch0_Duration
   3478  190f		       e6 db		      INC	_Ch0_Counter
   3479  1911				   .
   3480  1911							; 
   3481  1911
   3482  1911				   .
   3483  1911							; 
   3484  1911
   3485  1911				   .L0427		;  goto __Skip_Ch_0
   3486  1911
   3487  1911		       4c 5f d9 	      jmp	.__Skip_Ch_0
   3488  1914
   3489  1914				   .
   3490  1914							; 
   3491  1914
   3492  1914				   .__Skip_Ch0_Sound_003
   3493  1914							; __Skip_Ch0_Sound_003
   3494  1914
   3495  1914				   .
   3496  1914							; 
   3497  1914
   3498  1914				   .
   3499  1914							; 
   3500  1914
   3501  1914				   .
   3502  1914							; 
   3503  1914
   3504  1914				   .
   3505  1914							; 
   3506  1914
   3507  1914				   .L0428		;  if _Ch0_Sound  <>  4 then goto __Skip_Ch0_Sound_004
   3508  1914
   3509  1914		       a5 d9		      LDA	_Ch0_Sound
   3510  1916		       c9 04		      CMP	#4
   3511  1918		       f0 03		      BEQ	.skipL0428
   3512  191a				   .condpart88
   3513  191a		       4c 59 d9 	      jmp	.__Skip_Ch0_Sound_004
   3514  191d
   3515  191d				   .skipL0428
   3516  191d				   .
   3517  191d							; 
   3518  191d
   3519  191d				   .
   3520  191d							; 
   3521  191d
   3522  191d				   .L0429		;  temp4  =  _SD_Touch_Enemy[_Ch0_Counter]
   3523  191d
   3524  191d		       a6 db		      LDX	_Ch0_Counter
   3525  191f		       bd cc da 	      LDA	_SD_Touch_Enemy,x
   3526  1922		       85 9f		      STA	temp4
   3527  1924				   .
   3528  1924							; 
   3529  1924
   3530  1924				   .
   3531  1924							; 
   3532  1924
   3533  1924				   .L0430		;  if temp4  =  255 then goto __Clear_Ch_0
   3534  1924
   3535  1924		       a5 9f		      LDA	temp4
   3536  1926		       c9 ff		      CMP	#255
   3537  1928		       d0 03		      BNE	.skipL0430
   3538  192a				   .condpart89
   3539  192a		       4c 59 d9 	      jmp	.__Clear_Ch_0
   3540  192d
   3541  192d				   .skipL0430
   3542  192d				   .
   3543  192d							; 
   3544  192d
   3545  192d				   .
   3546  192d							; 
   3547  192d
   3548  192d				   .L0431		;  _Ch0_Counter  =  _Ch0_Counter  +  1
   3549  192d
   3550  192d		       e6 db		      INC	_Ch0_Counter
   3551  192f				   .L0432		;  temp5  =  _SD_Touch_Enemy[_Ch0_Counter]  :	_Ch0_Counter  =  _Ch0_Counter  +  1
   3552  192f
   3553  192f		       a6 db		      LDX	_Ch0_Counter
   3554  1931		       bd cc da 	      LDA	_SD_Touch_Enemy,x
   3555  1934		       85 a0		      STA	temp5
   3556  1936		       e6 db		      INC	_Ch0_Counter
   3557  1938				   .L0433		;  temp6  =  _SD_Touch_Enemy[_Ch0_Counter]  :	_Ch0_Counter  =  _Ch0_Counter  +  1
   3558  1938
   3559  1938		       a6 db		      LDX	_Ch0_Counter
   3560  193a		       bd cc da 	      LDA	_SD_Touch_Enemy,x
   3561  193d		       85 a1		      STA	temp6
   3562  193f		       e6 db		      INC	_Ch0_Counter
   3563  1941				   .
   3564  1941							; 
   3565  1941
   3566  1941				   .
   3567  1941							; 
   3568  1941
   3569  1941				   .L0434		;  AUDV0  =  temp4
   3570  1941
   3571  1941		       a5 9f		      LDA	temp4
   3572  1943		       85 19		      STA	AUDV0
   3573  1945				   .L0435		;  AUDC0  =  temp5
   3574  1945
   3575  1945		       a5 a0		      LDA	temp5
   3576  1947		       85 15		      STA	AUDC0
   3577  1949				   .L0436		;  AUDF0  =  temp6
   3578  1949
   3579  1949		       a5 a1		      LDA	temp6
   3580  194b		       85 17		      STA	AUDF0
   3581  194d				   .
   3582  194d							; 
   3583  194d
   3584  194d				   .
   3585  194d							; 
   3586  194d
   3587  194d				   .L0437		;  _Ch0_Duration  =  _SD_Touch_Enemy[_Ch0_Counter]  :	_Ch0_Counter  =  _Ch0_Counter  +  1
   3588  194d
   3589  194d		       a6 db		      LDX	_Ch0_Counter
   3590  194f		       bd cc da 	      LDA	_SD_Touch_Enemy,x
   3591  1952		       85 da		      STA	_Ch0_Duration
   3592  1954		       e6 db		      INC	_Ch0_Counter
   3593  1956				   .
   3594  1956							; 
   3595  1956
   3596  1956				   .
   3597  1956							; 
   3598  1956
   3599  1956				   .L0438		;  goto __Skip_Ch_0
   3600  1956
   3601  1956		       4c 5f d9 	      jmp	.__Skip_Ch_0
   3602  1959
   3603  1959				   .
   3604  1959							; 
   3605  1959
   3606  1959				   .__Skip_Ch0_Sound_004
   3607  1959							; __Skip_Ch0_Sound_004
   3608  1959
   3609  1959				   .
   3610  1959							; 
   3611  1959
   3612  1959				   .
   3613  1959							; 
   3614  1959
   3615  1959				   .__Clear_Ch_0
   3616  1959							; __Clear_Ch_0
   3617  1959
   3618  1959				   .L0439		;  _Ch0_Sound	=  0  :  AUDV0	=  0
   3619  1959
   3620  1959		       a9 00		      LDA	#0
   3621  195b		       85 d9		      STA	_Ch0_Sound
   3622  195d		       85 19		      STA	AUDV0
   3623  195f				   .
   3624  195f							; 
   3625  195f
   3626  195f				   .
   3627  195f							; 
   3628  195f
   3629  195f				   .__Skip_Ch_0
   3630  195f							; __Skip_Ch_0
   3631  195f
   3632  195f				   .
   3633  195f							; 
   3634  195f
   3635  195f				   .
   3636  195f							; 
   3637  195f
   3638  195f				   .
   3639  195f							; 
   3640  195f
   3641  195f				   .
   3642  195f							; 
   3643  195f
   3644  195f				   .L0440		;  if _Bit6_Flip_P1{6} then REFP1  =  8
   3645  195f
   3646  195f		       24 ec		      BIT	_Bit6_Flip_P1
   3647  1961		       50 04		      BVC	.skipL0440
   3648  1963				   .condpart90
   3649  1963		       a9 08		      LDA	#8
   3650  1965		       85 0c		      STA	REFP1
   3651  1967				   .skipL0440
   3652  1967				   .L0441		;  if _Bit0_roommate_Dir{0} then REFP0  =  8
   3653  1967
   3654  1967		       a5 ec		      LDA	_Bit0_roommate_Dir
   3655  1969		       4a		      LSR
   3656  196a		       90 04		      BCC	.skipL0441
   3657  196c				   .condpart91
   3658  196c		       a9 08		      LDA	#8
   3659  196e		       85 0b		      STA	REFP0
   3660  1970				   .skipL0441
   3661  1970				   .
   3662  1970							; 
   3663  1970
   3664  1970				   .L0442		;  drawscreen
   3665  1970
   3666  1970		       85 ee		      sta	temp7
   3667  1972		       a9 d9		      lda	#>(ret_point3-1)
   3668  1974		       48		      pha
   3669  1975		       a9 87		      lda	#<(ret_point3-1)
   3670  1977		       48		      pha
   3671  1978		       a9 f5		      lda	#>(drawscreen-1)
   3672  197a		       48		      pha
   3673  197b		       a9 82		      lda	#<(drawscreen-1)
   3674  197d		       48		      pha
   3675  197e		       a5 ee		      lda	temp7
   3676  1980		       48		      pha
   3677  1981		       8a		      txa
   3678  1982		       48		      pha
   3679  1983		       a2 02		      ldx	#2
   3680  1985		       4c e8 ff 	      jmp	BS_jsr
   3681  1988				   ret_point3
   3682  1988				   .
   3683  1988							; 
   3684  1988
   3685  1988				   .L0443		;  goto __Main_Loop
   3686  1988
   3687  1988		       4c f2 d1 	      jmp	.__Main_Loop
   3688  198b
   3689  198b				   .
   3690  198b							; 
   3691  198b
   3692  198b				   .
   3693  198b							; 
   3694  198b
   3695  198b				   ._Set_Game_Over
   3696  198b							; _Set_Game_Over
   3697  198b
   3698  198b				   .L0444		;  WriteToBuffer  =  _sc1
   3699  198b
   3700  198b		       a5 93		      LDA	_sc1
   3701  198d		       8d f0 1f 	      STA	WriteToBuffer
   3702  1990				   .L0445		;  WriteToBuffer  =  _sc2
   3703  1990
   3704  1990		       a5 94		      LDA	_sc2
   3705  1992		       8d f0 1f 	      STA	WriteToBuffer
   3706  1995				   .L0446		;  WriteToBuffer  =  _sc3
   3707  1995
   3708  1995		       a5 95		      LDA	_sc3
   3709  1997		       8d f0 1f 	      STA	WriteToBuffer
   3710  199a				   .L0447		;  WriteSendBuffer  =	req_game_over
   3711  199a
   3712  199a		       a9 02		      LDA	#req_game_over
   3713  199c		       8d f1 1f 	      STA	WriteSendBuffer
   3714  199f				   .L0448		;  _Bit4_Game_Over{4}	=  1
   3715  199f
   3716  199f		       a5 ec		      LDA	_Bit4_Game_Over
   3717  19a1		       09 10		      ORA	#16
   3718  19a3		       85 ec		      STA	_Bit4_Game_Over
   3719  19a5				   .L0449		;  goto _skip_game_action
   3720  19a5
   3721  19a5		       4c 2c d8 	      jmp	._skip_game_action
   3722  19a8
   3723  19a8				   .
   3724  19a8							; 
   3725  19a8
   3726  19a8				   ._Reset_Level
   3727  19a8							; _Reset_Level
   3728  19a8
   3729  19a8				   .L0450		;  delay_counter  =  60
   3730  19a8
   3731  19a8		       a9 3c		      LDA	#60
   3732  19aa		       85 d4		      STA	delay_counter
   3733  19ac				   .L0451		;  WriteSendBuffer  =	req_level_reset
   3734  19ac
   3735  19ac		       a9 07		      LDA	#req_level_reset
   3736  19ae		       8d f1 1f 	      STA	WriteSendBuffer
   3737  19b1				   .L0452		;  _Bit5_Request_Pending{5}  =  1
   3738  19b1
   3739  19b1		       a5 ec		      LDA	_Bit5_Request_Pending
   3740  19b3		       09 20		      ORA	#32
   3741  19b5		       85 ec		      STA	_Bit5_Request_Pending
   3742  19b7				   .L0453		;  _Bit6_Flip_P1{6}  =  _Bit1_Safe_Point_P1_Flip{1}
   3743  19b7
   3744  19b7		       a5 df		      LDA	_Bit1_Safe_Point_P1_Flip
   3745  19b9		       29 02		      AND	#2
   3746  19bb		       08		      PHP
   3747  19bc		       a5 ec		      LDA	_Bit6_Flip_P1
   3748  19be		       29 bf		      AND	#191
   3749  19c0		       28		      PLP
   3750  19c1		       f0 02		      .byte.b	$F0, $02
   3751  19c3		       09 40		      ORA	#64
   3752  19c5		       85 ec		      STA	_Bit6_Flip_P1
   3753  19c7				   .L0454		;  pfscore2  =  255
   3754  19c7
   3755  19c7		       a9 ff		      LDA	#255
   3756  19c9		       85 f3		      STA	pfscore2
   3757  19cb				   .L0455		;  player1x  =  Safe_Point_P1_x
   3758  19cb
   3759  19cb		       a5 e0		      LDA	Safe_Point_P1_x
   3760  19cd		       85 81		      STA	player1x
   3761  19cf				   .L0456		;  player1y  =  Safe_Point_P1_y
   3762  19cf
   3763  19cf		       a5 e1		      LDA	Safe_Point_P1_y
   3764  19d1		       85 86		      STA	player1y
   3765  19d3				   .L0457		;  goto _skip_game_action
   3766  19d3
   3767  19d3		       4c 2c d8 	      jmp	._skip_game_action
   3768  19d6
   3769  19d6				   .
   3770  19d6							; 
   3771  19d6
   3772  19d6				   ._Level_Up
   3773  19d6							; _Level_Up
   3774  19d6
   3775  19d6				   .L0458		;  delay_counter  =  60
   3776  19d6
   3777  19d6		       a9 3c		      LDA	#60
   3778  19d8		       85 d4		      STA	delay_counter
   3779  19da				   .L0459		;  WriteToBuffer  =  _sc1
   3780  19da
   3781  19da		       a5 93		      LDA	_sc1
   3782  19dc		       8d f0 1f 	      STA	WriteToBuffer
   3783  19df				   .L0460		;  WriteToBuffer  =  _sc2
   3784  19df
   3785  19df		       a5 94		      LDA	_sc2
   3786  19e1		       8d f0 1f 	      STA	WriteToBuffer
   3787  19e4				   .L0461		;  WriteToBuffer  =  _sc3
   3788  19e4
   3789  19e4		       a5 95		      LDA	_sc3
   3790  19e6		       8d f0 1f 	      STA	WriteToBuffer
   3791  19e9				   .L0462		;  WriteSendBuffer  =	req_level_up
   3792  19e9
   3793  19e9		       a9 01		      LDA	#req_level_up
   3794  19eb		       8d f1 1f 	      STA	WriteSendBuffer
   3795  19ee				   .L0463		;  _Bit5_Request_Pending{5}  =  1
   3796  19ee
   3797  19ee		       a5 ec		      LDA	_Bit5_Request_Pending
   3798  19f0		       09 20		      ORA	#32
   3799  19f2		       85 ec		      STA	_Bit5_Request_Pending
   3800  19f4				   .L0464		;  _Bit6_Flip_P1{6}  =  0
   3801  19f4
   3802  19f4		       a5 ec		      LDA	_Bit6_Flip_P1
   3803  19f6		       29 bf		      AND	#191
   3804  19f8		       85 ec		      STA	_Bit6_Flip_P1
   3805  19fa				   .L0465		;  _BitOp_Safe_Point  =  0
   3806  19fa
   3807  19fa		       a9 00		      LDA	#0
   3808  19fc		       85 df		      STA	_BitOp_Safe_Point
   3809  19fe				   .L0466		;  Safe_Point_P1_x  =	30
   3810  19fe
   3811  19fe		       a9 1e		      LDA	#30
   3812  1a00		       85 e0		      STA	Safe_Point_P1_x
   3813  1a02				   .L0467		;  Safe_Point_P1_y  =	0
   3814  1a02
   3815  1a02		       a9 00		      LDA	#0
   3816  1a04		       85 e1		      STA	Safe_Point_P1_y
   3817  1a06				   .L0468		;  pfscore1  =  %00101010
   3818  1a06
   3819  1a06		       a9 2a		      LDA	#%00101010
   3820  1a08		       85 f2		      STA	pfscore1
   3821  1a0a				   .L0469		;  pfscore2  =  255
   3822  1a0a
   3823  1a0a		       a9 ff		      LDA	#255
   3824  1a0c		       85 f3		      STA	pfscore2
   3825  1a0e				   .L0470		;  player1y  =  player_min_y
   3826  1a0e
   3827  1a0e		       a9 02		      LDA	#player_min_y
   3828  1a10		       85 86		      STA	player1y
   3829  1a12				   .L0471		;  player1x  =  30
   3830  1a12
   3831  1a12		       a9 1e		      LDA	#30
   3832  1a14		       85 81		      STA	player1x
   3833  1a16				   .L0472		;  score  =  0
   3834  1a16
   3835  1a16		       a9 00		      LDA	#$00
   3836  1a18		       85 95		      STA	score+2
   3837  1a1a		       a9 00		      LDA	#$00
   3838  1a1c		       85 94		      STA	score+1
   3839  1a1e		       a9 00		      LDA	#$00
   3840  1a20		       85 93		      STA	score
   3841  1a22				   .L0473		;  goto _skip_game_action
   3842  1a22
   3843  1a22		       4c 2c d8 	      jmp	._skip_game_action
   3844  1a25
   3845  1a25				   .
   3846  1a25							; 
   3847  1a25
   3848  1a25				   .
   3849  1a25							; 
   3850  1a25
   3851  1a25				   .L0474		;  data _SD_Shot_Wall
   3852  1a25
   3853  1a25		       4c 5d da 	      JMP	.skipL0474
   3854  1a28				   _SD_Shot_Wall
   3855  1a28		       08 08 00 	      .byte.b	8,8,0
   3856  1a2b
   3857  1a2b		       01		      .byte.b	1
   3858  1a2c
   3859  1a2c		       08 08 01 	      .byte.b	8,8,1
   3860  1a2f
   3861  1a2f		       01		      .byte.b	1
   3862  1a30
   3863  1a30		       08 0e 01 	      .byte.b	8,14,1
   3864  1a33
   3865  1a33		       01		      .byte.b	1
   3866  1a34
   3867  1a34		       08 08 00 	      .byte.b	8,8,0
   3868  1a37
   3869  1a37		       01		      .byte.b	1
   3870  1a38
   3871  1a38		       08 08 02 	      .byte.b	8,8,2
   3872  1a3b
   3873  1a3b		       01		      .byte.b	1
   3874  1a3c
   3875  1a3c		       08 0e 02 	      .byte.b	8,14,2
   3876  1a3f
   3877  1a3f		       01		      .byte.b	1
   3878  1a40
   3879  1a40		       08 08 01 	      .byte.b	8,8,1
   3880  1a43
   3881  1a43		       01		      .byte.b	1
   3882  1a44
   3883  1a44		       07 08 03 	      .byte.b	7,8,3
   3884  1a47
   3885  1a47		       01		      .byte.b	1
   3886  1a48
   3887  1a48		       06 08 02 	      .byte.b	6,8,2
   3888  1a4b
   3889  1a4b		       01		      .byte.b	1
   3890  1a4c
   3891  1a4c		       05 08 04 	      .byte.b	5,8,4
   3892  1a4f
   3893  1a4f		       01		      .byte.b	1
   3894  1a50
   3895  1a50		       04 08 03 	      .byte.b	4,8,3
   3896  1a53
   3897  1a53		       01		      .byte.b	1
   3898  1a54
   3899  1a54		       03 08 05 	      .byte.b	3,8,5
   3900  1a57
   3901  1a57		       01		      .byte.b	1
   3902  1a58
   3903  1a58		       02 0e 04 	      .byte.b	2,14,4
   3904  1a5b
   3905  1a5b		       04		      .byte.b	4
   3906  1a5c
   3907  1a5c		       ff		      .byte.b	255
   3908  1a5d
   3909  1a5d				   .skipL0474
   3910  1a5d				   .
   3911  1a5d							; 
   3912  1a5d
   3913  1a5d				   .
   3914  1a5d							; 
   3915  1a5d
   3916  1a5d				   .L0475		;  data _SD_Shoot_Miss
   3917  1a5d
   3918  1a5d		       4c a5 da 	      JMP	.skipL0475
   3919  1a60				   _SD_Shoot_Miss
   3920  1a60		       08 0f 00 	      .byte.b	8,15,0
   3921  1a63
   3922  1a63		       01		      .byte.b	1
   3923  1a64
   3924  1a64		       0c 0f 01 	      .byte.b	12,15,1
   3925  1a67
   3926  1a67		       01		      .byte.b	1
   3927  1a68
   3928  1a68		       08 07 14 	      .byte.b	8,7,20
   3929  1a6b
   3930  1a6b		       01		      .byte.b	1
   3931  1a6c
   3932  1a6c		       0a 0f 03 	      .byte.b	10,15,3
   3933  1a6f
   3934  1a6f		       01		      .byte.b	1
   3935  1a70
   3936  1a70		       08 07 16 	      .byte.b	8,7,22
   3937  1a73
   3938  1a73		       01		      .byte.b	1
   3939  1a74
   3940  1a74		       0a 0f 05 	      .byte.b	10,15,5
   3941  1a77
   3942  1a77		       01		      .byte.b	1
   3943  1a78
   3944  1a78		       08 0f 06 	      .byte.b	8,15,6
   3945  1a7b
   3946  1a7b		       01		      .byte.b	1
   3947  1a7c
   3948  1a7c		       0a 07 18 	      .byte.b	10,7,24
   3949  1a7f
   3950  1a7f		       01		      .byte.b	1
   3951  1a80
   3952  1a80		       08 0f 08 	      .byte.b	8,15,8
   3953  1a83
   3954  1a83		       01		      .byte.b	1
   3955  1a84
   3956  1a84		       09 07 1b 	      .byte.b	9,7,27
   3957  1a87
   3958  1a87		       01		      .byte.b	1
   3959  1a88
   3960  1a88		       08 0f 0a 	      .byte.b	8,15,10
   3961  1a8b
   3962  1a8b		       01		      .byte.b	1
   3963  1a8c
   3964  1a8c		       07 0e 0b 	      .byte.b	7,14,11
   3965  1a8f
   3966  1a8f		       01		      .byte.b	1
   3967  1a90
   3968  1a90		       06 0f 0c 	      .byte.b	6,15,12
   3969  1a93
   3970  1a93		       01		      .byte.b	1
   3971  1a94
   3972  1a94		       05 06 0d 	      .byte.b	5,6,13
   3973  1a97
   3974  1a97		       01		      .byte.b	1
   3975  1a98
   3976  1a98		       04 0f 0e 	      .byte.b	4,15,14
   3977  1a9b
   3978  1a9b		       01		      .byte.b	1
   3979  1a9c
   3980  1a9c		       03 06 1b 	      .byte.b	3,6,27
   3981  1a9f
   3982  1a9f		       01		      .byte.b	1
   3983  1aa0
   3984  1aa0		       02 06 1e 	      .byte.b	2,6,30
   3985  1aa3
   3986  1aa3		       08		      .byte.b	8
   3987  1aa4
   3988  1aa4		       ff		      .byte.b	255
   3989  1aa5
   3990  1aa5				   .skipL0475
   3991  1aa5				   .
   3992  1aa5							; 
   3993  1aa5
   3994  1aa5				   .
   3995  1aa5							; 
   3996  1aa5
   3997  1aa5				   .L0476		;  data _SD_Shoot_Enemy
   3998  1aa5
   3999  1aa5		       4c c9 da 	      JMP	.skipL0476
   4000  1aa8				   _SD_Shoot_Enemy
   4001  1aa8		       0c 04 17 	      .byte.b	12,4,23
   4002  1aab
   4003  1aab		       04		      .byte.b	4
   4004  1aac
   4005  1aac		       0a 04 1d 	      .byte.b	10,4,29
   4006  1aaf
   4007  1aaf		       04		      .byte.b	4
   4008  1ab0
   4009  1ab0		       08 04 17 	      .byte.b	8,4,23
   4010  1ab3
   4011  1ab3		       04		      .byte.b	4
   4012  1ab4
   4013  1ab4		       06 04 1d 	      .byte.b	6,4,29
   4014  1ab7
   4015  1ab7		       04		      .byte.b	4
   4016  1ab8
   4017  1ab8		       04 04 17 	      .byte.b	4,4,23
   4018  1abb
   4019  1abb		       04		      .byte.b	4
   4020  1abc
   4021  1abc		       03 04 1d 	      .byte.b	3,4,29
   4022  1abf
   4023  1abf		       04		      .byte.b	4
   4024  1ac0
   4025  1ac0		       02 04 17 	      .byte.b	2,4,23
   4026  1ac3
   4027  1ac3		       01		      .byte.b	1
   4028  1ac4
   4029  1ac4		       01 04 1d 	      .byte.b	1,4,29
   4030  1ac7
   4031  1ac7		       01		      .byte.b	1
   4032  1ac8
   4033  1ac8		       ff		      .byte.b	255
   4034  1ac9
   4035  1ac9				   .skipL0476
   4036  1ac9				   .
   4037  1ac9							; 
   4038  1ac9
   4039  1ac9				   .
   4040  1ac9							; 
   4041  1ac9
   4042  1ac9				   .L0477		;  data _SD_Touch_Enemy
   4043  1ac9
   4044  1ac9		       4c e9 da 	      JMP	.skipL0477
   4045  1acc				   _SD_Touch_Enemy
   4046  1acc		       02 07 0b 	      .byte.b	2,7,11
   4047  1acf
   4048  1acf		       02		      .byte.b	2
   4049  1ad0
   4050  1ad0		       0a 07 0c 	      .byte.b	10,7,12
   4051  1ad3
   4052  1ad3		       02		      .byte.b	2
   4053  1ad4
   4054  1ad4		       08 07 0d 	      .byte.b	8,7,13
   4055  1ad7
   4056  1ad7		       02		      .byte.b	2
   4057  1ad8
   4058  1ad8		       08 07 0e 	      .byte.b	8,7,14
   4059  1adb
   4060  1adb		       02		      .byte.b	2
   4061  1adc
   4062  1adc		       08 07 15 	      .byte.b	8,7,21
   4063  1adf
   4064  1adf		       08		      .byte.b	8
   4065  1ae0
   4066  1ae0		       04 07 16 	      .byte.b	4,7,22
   4067  1ae3
   4068  1ae3		       02		      .byte.b	2
   4069  1ae4
   4070  1ae4		       02 07 17 	      .byte.b	2,7,23
   4071  1ae7
   4072  1ae7		       01		      .byte.b	1
   4073  1ae8
   4074  1ae8		       ff		      .byte.b	255
   4075  1ae9
   4076  1ae9				   .skipL0477
   4077  1ae9				   .
   4078  1ae9							; 
   4079  1ae9
   4080  1ae9				   .
   4081  1ae9							; 
   4082  1ae9
   4083  1ae9				   .
   4084  1ae9							; 
   4085  1ae9
   4086  1ae9				   .
   4087  1ae9							; 
   4088  1ae9
   4089  1ae9				   .
   4090  1ae9							; 
   4091  1ae9
   4092  1ae9				   .
   4093  1ae9							; 
   4094  1ae9
   4095  1ae9				   .
   4096  1ae9							; 
   4097  1ae9
   4098  1ae9				   .
   4099  1ae9							; 
   4100  1ae9
   4101  1ae9				   .L0478		;  rem Add the room state of the room we are just leaving to the request to store it at the backend
   4102  1ae9
   4103  1ae9				   ._send_room_state
   4104  1ae9							; _send_room_state
   4105  1ae9
   4106  1ae9				   .L0479		;  _Bit5_Request_Pending{5}  =  1
   4107  1ae9
   4108  1ae9		       a5 ec		      LDA	_Bit5_Request_Pending
   4109  1aeb		       09 20		      ORA	#32
   4110  1aed		       85 ec		      STA	_Bit5_Request_Pending
   4111  1aef				   .L0480		;  WriteToBuffer  =  r106
   4112  1aef
   4113  1aef		       ad ea f0 	      LDA	r106
   4114  1af2		       8d f0 1f 	      STA	WriteToBuffer
   4115  1af5				   .L0481		;  WriteToBuffer  =  r107
   4116  1af5
   4117  1af5		       ad eb f0 	      LDA	r107
   4118  1af8		       8d f0 1f 	      STA	WriteToBuffer
   4119  1afb				   .L0482		;  WriteToBuffer  =  r108
   4120  1afb
   4121  1afb		       ad ec f0 	      LDA	r108
   4122  1afe		       8d f0 1f 	      STA	WriteToBuffer
   4123  1b01				   .L0483		;  WriteToBuffer  =  r109
   4124  1b01
   4125  1b01		       ad ed f0 	      LDA	r109
   4126  1b04		       8d f0 1f 	      STA	WriteToBuffer
   4127  1b07				   .L0484		;  WriteToBuffer  =  r110
   4128  1b07
   4129  1b07		       ad ee f0 	      LDA	r110
   4130  1b0a		       8d f0 1f 	      STA	WriteToBuffer
   4131  1b0d				   .L0485		;  WriteToBuffer  =  r111
   4132  1b0d
   4133  1b0d		       ad ef f0 	      LDA	r111
   4134  1b10		       8d f0 1f 	      STA	WriteToBuffer
   4135  1b13				   .L0486		;  return
   4136  1b13
   4137  1b13		       ba		      tsx
   4138  1b14		       b5 02		      lda	2,x	; check return address
   4139  1b16		       49 db		      eor	#(>*)	; vs. current PCH
   4140  1b18		       29 e0		      and	#$E0	;  mask off all but top 3 bits
   4141  1b1a		       f0 03		      beq	*+5	; if equal, do normal return
   4142  1b1c		       4c da ff 	      JMP	BS_return
   4143  1b1f		       60		      RTS
   4144  1b20				   .
   4145  1b20							; 
   4146  1b20
   4147  1b20				   .
   4148  1b20							; 
   4149  1b20
   4150  1b20				   .L0487		;  rem loading room (12 pf bytes + interior ) from backend
   4151  1b20
   4152  1b20				   .L0488		;  rem and write to SC/playfield RAM 
   4153  1b20
   4154  1b20				   .change_room
   4155  1b20							; change_room
   4156  1b20
   4157  1b20				   .L0489		;  delay_counter  =  2  :  player0y  =  200
   4158  1b20
   4159  1b20		       a9 02		      LDA	#2
   4160  1b22		       85 d4		      STA	delay_counter
   4161  1b24		       a9 c8		      LDA	#200
   4162  1b26		       85 85		      STA	player0y
   4163  1b28				   .L0490		;  _Bit_Game_State  =	_Bit_Game_State  &  %11111100
   4164  1b28
   4165  1b28		       a5 ec		      LDA	_Bit_Game_State
   4166  1b2a		       29 fc		      AND	#%11111100
   4167  1b2c		       85 ec		      STA	_Bit_Game_State
   4168  1b2e				   .L0491		;  _Bit5_Request_Pending{5}  =  0
   4169  1b2e
   4170  1b2e		       a5 ec		      LDA	_Bit5_Request_Pending
   4171  1b30		       29 df		      AND	#223
   4172  1b32		       85 ec		      STA	_Bit5_Request_Pending
   4173  1b34				   .L0492		;  _Bit0_Safe_Point_reached{0}  =  0
   4174  1b34
   4175  1b34		       a5 df		      LDA	_Bit0_Safe_Point_reached
   4176  1b36		       29 fe		      AND	#254
   4177  1b38		       85 df		      STA	_Bit0_Safe_Point_reached
   4178  1b3a				   .L0493		;  asm
   4179  1b3a
   4180  1b3a		       a9 00		      LDA	#0
   4181  1b3c
   4182  1b3c		       85 89		      STA	bally
   4183  1b3e
   4184  1b3e		       85 dc		      STA	extra_wall_move_x
   4185  1b40
   4186  1b40		       85 dd		      STA	roommate_move_x
   4187  1b42
   4188  1b42		       aa		      TAX
   4189  1b43
   4190  1b43				   .copy_loop
   4191  1b43
   4192  1b43		       ad f2 1f 	      LDA	ReceiveBuffer	; 4
   4193  1b46
   4194  1b46		       9d 63 f0 	      STA	w_room_definition_start,x	; 5   @9
   4195  1b49
   4196  1b49		       e8		      INX		; 2   @11
   4197  1b4a
   4198  1b4a		       ad f3 1f 	      LDA	ReceiveBufferSize	; 4   @15
   4199  1b4d
   4200  1b4d		       d0 f4		      BNE	.copy_loop	; 2/3 @18
   4201  1b4f
   4202  1b4f				   .L0494		;  roommate_type  =  r_roommate_type_and_range  &  3
   4203  1b4f
   4204  1b4f		       ad ea f0 	      LDA	r_roommate_type_and_range
   4205  1b52		       29 03		      AND	#3
   4206  1b54		       85 de		      STA	roommate_type
   4207  1b56				   .L0495		;  goto _skip_game_action
   4208  1b56
   4209  1b56		       4c 2c d8 	      jmp	._skip_game_action
   4210  1b59
   4211  1b59				   .
   4212  1b59							; 
   4213  1b59
   4214  1b59				   .
   4215  1b59							; 
   4216  1b59
   4217  1b59				   .
   4218  1b59							; 
   4219  1b59
   4220  1b59				   .L0496		;  rem define PlusROM backend URL here
   4221  1b59
   4222  1b59				   .L0497		;  rem don't let your program flow run into this code
   4223  1b59
   4224  1b59				   .L0498		;  asm
   4225  1b59
      0  1b59					      SET_PLUSROM_API	"a.php", "ca.firmaplus.de"
      1  1b59				   PlusROM_API
      2  1b59		       61 2e 70 68*	      .byte.b	"a.php", 0, "ca.firmaplus.de", 0
   4227  1b6f
   4228  1b6f				   .
   4229  1b6f							; 
   4230  1b6f
   4231  1b6f				   .L0499		;  bank 2
   4232  1b6f
   4233  1b6f					      if	ECHO1
      1122 bytes of ROM space left in bank 1
   4234  1b6f					      echo	"    ",[(start_bank1 - *)]d , "bytes of ROM space left in bank 1")
   4235  1b6f					      endif
   4236  1b6f		       00 01	   ECHO1      =	1
   4237  1fd1					      ORG	$1FF4-bscode_length
   4238  1fd1					      RORG	$DFF4-bscode_length
   4239  1fd1		       a2 ff	   start_bank1 ldx	#$ff
   4240  1fd3				  -	      ifconst	FASTFETCH	; using DPC+
   4241  1fd3				  -	      stx	FASTFETCH
   4242  1fd3					      endif
   4243  1fd3		       9a		      txs
   4244  1fd4				  -	      if	bankswitch == 64
   4245  1fd4				  -	      lda	#(((>(start-1)) & $0F) | $F0)
   4246  1fd4					      else
   4247  1fd4		       a9 f3		      lda	#>(start-1)
   4248  1fd6					      endif
   4249  1fd6		       48		      pha
   4250  1fd7		       a9 51		      lda	#<(start-1)
   4251  1fd9		       48		      pha
   4252  1fda		       48		      pha
   4253  1fdb		       8a		      txa
   4254  1fdc		       48		      pha
   4255  1fdd		       ba		      tsx
   4256  1fde					      if	bankswitch != 64
   4257  1fde		       b5 04		      lda	4,x	; get high byte of return address
   4258  1fe0		       2a		      rol
   4259  1fe1		       2a		      rol
   4260  1fe2		       2a		      rol
   4261  1fe3		       2a		      rol
   4262  1fe4		       29 01		      and	#bs_mask	;1 3 or 7 for F8/F6/F4
   4263  1fe6		       aa		      tax
   4264  1fe7		       e8		      inx
   4265  1fe8				  -	      else
   4266  1fe8				  -	      lda	4,x	; get high byte of return address
   4267  1fe8				  -	      tay
   4268  1fe8				  -	      ora	#$10	; change our bank nibble into a valid rom mirror
   4269  1fe8				  -	      sta	4,x
   4270  1fe8				  -	      tya
   4271  1fe8				  -	      lsr
   4272  1fe8				  -	      lsr
   4273  1fe8				  -	      lsr
   4274  1fe8				  -	      lsr
   4275  1fe8				  -	      tax
   4276  1fe8				  -	      inx
   4277  1fe8					      endif
   4278  1fe8		       bd f7 1f 	      lda	bankswitch_hotspot-1,x
   4279  1feb		       68		      pla
   4280  1fec		       aa		      tax
   4281  1fed		       68		      pla
   4282  1fee		       60		      rts
   4283  1fef				  -	      if	((* & $1FFF) > ((bankswitch_hotspot & $1FFF) - 1))
   4284  1fef				  -	      echo	"WARNING: size parameter in banksw.asm too small - the program probably will not work."
   4285  1fef				  -	      echo	"Change to",[(*-begin_bscode+1)&$FF]d,"and try again."
   4286  1fef					      endif
   4287  1ffc					      ORG	$1FFC
   4288  1ffc					      RORG	$DFFC
   4289  1ffc		       d1 df		      .word.w	(start_bank1 & $ffff)
   4290  1ffe		       d1 df		      .word.w	(start_bank1 & $ffff)
   4291  2000					      ORG	$2000
   4292  2000					      RORG	$F000
   4293  2000					      repeat	256
   4294  2000		       ff		      .byte.b	$ff
   4293  2000					      repend
   4294  2001		       ff		      .byte.b	$ff
   4293  2001					      repend
   4294  2002		       ff		      .byte.b	$ff
   4293  2002					      repend
   4294  2003		       ff		      .byte.b	$ff
   4293  2003					      repend
   4294  2004		       ff		      .byte.b	$ff
   4293  2004					      repend
   4294  2005		       ff		      .byte.b	$ff
   4293  2005					      repend
   4294  2006		       ff		      .byte.b	$ff
   4293  2006					      repend
   4294  2007		       ff		      .byte.b	$ff
   4293  2007					      repend
   4294  2008		       ff		      .byte.b	$ff
   4293  2008					      repend
   4294  2009		       ff		      .byte.b	$ff
   4293  2009					      repend
   4294  200a		       ff		      .byte.b	$ff
   4293  200a					      repend
   4294  200b		       ff		      .byte.b	$ff
   4293  200b					      repend
   4294  200c		       ff		      .byte.b	$ff
   4293  200c					      repend
   4294  200d		       ff		      .byte.b	$ff
   4293  200d					      repend
   4294  200e		       ff		      .byte.b	$ff
   4293  200e					      repend
   4294  200f		       ff		      .byte.b	$ff
   4293  200f					      repend
   4294  2010		       ff		      .byte.b	$ff
   4293  2010					      repend
   4294  2011		       ff		      .byte.b	$ff
   4293  2011					      repend
   4294  2012		       ff		      .byte.b	$ff
   4293  2012					      repend
   4294  2013		       ff		      .byte.b	$ff
   4293  2013					      repend
   4294  2014		       ff		      .byte.b	$ff
   4293  2014					      repend
   4294  2015		       ff		      .byte.b	$ff
   4293  2015					      repend
   4294  2016		       ff		      .byte.b	$ff
   4293  2016					      repend
   4294  2017		       ff		      .byte.b	$ff
   4293  2017					      repend
   4294  2018		       ff		      .byte.b	$ff
   4293  2018					      repend
   4294  2019		       ff		      .byte.b	$ff
   4293  2019					      repend
   4294  201a		       ff		      .byte.b	$ff
   4293  201a					      repend
   4294  201b		       ff		      .byte.b	$ff
   4293  201b					      repend
   4294  201c		       ff		      .byte.b	$ff
   4293  201c					      repend
   4294  201d		       ff		      .byte.b	$ff
   4293  201d					      repend
   4294  201e		       ff		      .byte.b	$ff
   4293  201e					      repend
   4294  201f		       ff		      .byte.b	$ff
   4293  201f					      repend
   4294  2020		       ff		      .byte.b	$ff
   4293  2020					      repend
   4294  2021		       ff		      .byte.b	$ff
   4293  2021					      repend
   4294  2022		       ff		      .byte.b	$ff
   4293  2022					      repend
   4294  2023		       ff		      .byte.b	$ff
   4293  2023					      repend
   4294  2024		       ff		      .byte.b	$ff
   4293  2024					      repend
   4294  2025		       ff		      .byte.b	$ff
   4293  2025					      repend
   4294  2026		       ff		      .byte.b	$ff
   4293  2026					      repend
   4294  2027		       ff		      .byte.b	$ff
   4293  2027					      repend
   4294  2028		       ff		      .byte.b	$ff
   4293  2028					      repend
   4294  2029		       ff		      .byte.b	$ff
   4293  2029					      repend
   4294  202a		       ff		      .byte.b	$ff
   4293  202a					      repend
   4294  202b		       ff		      .byte.b	$ff
   4293  202b					      repend
   4294  202c		       ff		      .byte.b	$ff
   4293  202c					      repend
   4294  202d		       ff		      .byte.b	$ff
   4293  202d					      repend
   4294  202e		       ff		      .byte.b	$ff
   4293  202e					      repend
   4294  202f		       ff		      .byte.b	$ff
   4293  202f					      repend
   4294  2030		       ff		      .byte.b	$ff
   4293  2030					      repend
   4294  2031		       ff		      .byte.b	$ff
   4293  2031					      repend
   4294  2032		       ff		      .byte.b	$ff
   4293  2032					      repend
   4294  2033		       ff		      .byte.b	$ff
   4293  2033					      repend
   4294  2034		       ff		      .byte.b	$ff
   4293  2034					      repend
   4294  2035		       ff		      .byte.b	$ff
   4293  2035					      repend
   4294  2036		       ff		      .byte.b	$ff
   4293  2036					      repend
   4294  2037		       ff		      .byte.b	$ff
   4293  2037					      repend
   4294  2038		       ff		      .byte.b	$ff
   4293  2038					      repend
   4294  2039		       ff		      .byte.b	$ff
   4293  2039					      repend
   4294  203a		       ff		      .byte.b	$ff
   4293  203a					      repend
   4294  203b		       ff		      .byte.b	$ff
   4293  203b					      repend
   4294  203c		       ff		      .byte.b	$ff
   4293  203c					      repend
   4294  203d		       ff		      .byte.b	$ff
   4293  203d					      repend
   4294  203e		       ff		      .byte.b	$ff
   4293  203e					      repend
   4294  203f		       ff		      .byte.b	$ff
   4293  203f					      repend
   4294  2040		       ff		      .byte.b	$ff
   4293  2040					      repend
   4294  2041		       ff		      .byte.b	$ff
   4293  2041					      repend
   4294  2042		       ff		      .byte.b	$ff
   4293  2042					      repend
   4294  2043		       ff		      .byte.b	$ff
   4293  2043					      repend
   4294  2044		       ff		      .byte.b	$ff
   4293  2044					      repend
   4294  2045		       ff		      .byte.b	$ff
   4293  2045					      repend
   4294  2046		       ff		      .byte.b	$ff
   4293  2046					      repend
   4294  2047		       ff		      .byte.b	$ff
   4293  2047					      repend
   4294  2048		       ff		      .byte.b	$ff
   4293  2048					      repend
   4294  2049		       ff		      .byte.b	$ff
   4293  2049					      repend
   4294  204a		       ff		      .byte.b	$ff
   4293  204a					      repend
   4294  204b		       ff		      .byte.b	$ff
   4293  204b					      repend
   4294  204c		       ff		      .byte.b	$ff
   4293  204c					      repend
   4294  204d		       ff		      .byte.b	$ff
   4293  204d					      repend
   4294  204e		       ff		      .byte.b	$ff
   4293  204e					      repend
   4294  204f		       ff		      .byte.b	$ff
   4293  204f					      repend
   4294  2050		       ff		      .byte.b	$ff
   4293  2050					      repend
   4294  2051		       ff		      .byte.b	$ff
   4293  2051					      repend
   4294  2052		       ff		      .byte.b	$ff
   4293  2052					      repend
   4294  2053		       ff		      .byte.b	$ff
   4293  2053					      repend
   4294  2054		       ff		      .byte.b	$ff
   4293  2054					      repend
   4294  2055		       ff		      .byte.b	$ff
   4293  2055					      repend
   4294  2056		       ff		      .byte.b	$ff
   4293  2056					      repend
   4294  2057		       ff		      .byte.b	$ff
   4293  2057					      repend
   4294  2058		       ff		      .byte.b	$ff
   4293  2058					      repend
   4294  2059		       ff		      .byte.b	$ff
   4293  2059					      repend
   4294  205a		       ff		      .byte.b	$ff
   4293  205a					      repend
   4294  205b		       ff		      .byte.b	$ff
   4293  205b					      repend
   4294  205c		       ff		      .byte.b	$ff
   4293  205c					      repend
   4294  205d		       ff		      .byte.b	$ff
   4293  205d					      repend
   4294  205e		       ff		      .byte.b	$ff
   4293  205e					      repend
   4294  205f		       ff		      .byte.b	$ff
   4293  205f					      repend
   4294  2060		       ff		      .byte.b	$ff
   4293  2060					      repend
   4294  2061		       ff		      .byte.b	$ff
   4293  2061					      repend
   4294  2062		       ff		      .byte.b	$ff
   4293  2062					      repend
   4294  2063		       ff		      .byte.b	$ff
   4293  2063					      repend
   4294  2064		       ff		      .byte.b	$ff
   4293  2064					      repend
   4294  2065		       ff		      .byte.b	$ff
   4293  2065					      repend
   4294  2066		       ff		      .byte.b	$ff
   4293  2066					      repend
   4294  2067		       ff		      .byte.b	$ff
   4293  2067					      repend
   4294  2068		       ff		      .byte.b	$ff
   4293  2068					      repend
   4294  2069		       ff		      .byte.b	$ff
   4293  2069					      repend
   4294  206a		       ff		      .byte.b	$ff
   4293  206a					      repend
   4294  206b		       ff		      .byte.b	$ff
   4293  206b					      repend
   4294  206c		       ff		      .byte.b	$ff
   4293  206c					      repend
   4294  206d		       ff		      .byte.b	$ff
   4293  206d					      repend
   4294  206e		       ff		      .byte.b	$ff
   4293  206e					      repend
   4294  206f		       ff		      .byte.b	$ff
   4293  206f					      repend
   4294  2070		       ff		      .byte.b	$ff
   4293  2070					      repend
   4294  2071		       ff		      .byte.b	$ff
   4293  2071					      repend
   4294  2072		       ff		      .byte.b	$ff
   4293  2072					      repend
   4294  2073		       ff		      .byte.b	$ff
   4293  2073					      repend
   4294  2074		       ff		      .byte.b	$ff
   4293  2074					      repend
   4294  2075		       ff		      .byte.b	$ff
   4293  2075					      repend
   4294  2076		       ff		      .byte.b	$ff
   4293  2076					      repend
   4294  2077		       ff		      .byte.b	$ff
   4293  2077					      repend
   4294  2078		       ff		      .byte.b	$ff
   4293  2078					      repend
   4294  2079		       ff		      .byte.b	$ff
   4293  2079					      repend
   4294  207a		       ff		      .byte.b	$ff
   4293  207a					      repend
   4294  207b		       ff		      .byte.b	$ff
   4293  207b					      repend
   4294  207c		       ff		      .byte.b	$ff
   4293  207c					      repend
   4294  207d		       ff		      .byte.b	$ff
   4293  207d					      repend
   4294  207e		       ff		      .byte.b	$ff
   4293  207e					      repend
   4294  207f		       ff		      .byte.b	$ff
   4293  207f					      repend
   4294  2080		       ff		      .byte.b	$ff
   4293  2080					      repend
   4294  2081		       ff		      .byte.b	$ff
   4293  2081					      repend
   4294  2082		       ff		      .byte.b	$ff
   4293  2082					      repend
   4294  2083		       ff		      .byte.b	$ff
   4293  2083					      repend
   4294  2084		       ff		      .byte.b	$ff
   4293  2084					      repend
   4294  2085		       ff		      .byte.b	$ff
   4293  2085					      repend
   4294  2086		       ff		      .byte.b	$ff
   4293  2086					      repend
   4294  2087		       ff		      .byte.b	$ff
   4293  2087					      repend
   4294  2088		       ff		      .byte.b	$ff
   4293  2088					      repend
   4294  2089		       ff		      .byte.b	$ff
   4293  2089					      repend
   4294  208a		       ff		      .byte.b	$ff
   4293  208a					      repend
   4294  208b		       ff		      .byte.b	$ff
   4293  208b					      repend
   4294  208c		       ff		      .byte.b	$ff
   4293  208c					      repend
   4294  208d		       ff		      .byte.b	$ff
   4293  208d					      repend
   4294  208e		       ff		      .byte.b	$ff
   4293  208e					      repend
   4294  208f		       ff		      .byte.b	$ff
   4293  208f					      repend
   4294  2090		       ff		      .byte.b	$ff
   4293  2090					      repend
   4294  2091		       ff		      .byte.b	$ff
   4293  2091					      repend
   4294  2092		       ff		      .byte.b	$ff
   4293  2092					      repend
   4294  2093		       ff		      .byte.b	$ff
   4293  2093					      repend
   4294  2094		       ff		      .byte.b	$ff
   4293  2094					      repend
   4294  2095		       ff		      .byte.b	$ff
   4293  2095					      repend
   4294  2096		       ff		      .byte.b	$ff
   4293  2096					      repend
   4294  2097		       ff		      .byte.b	$ff
   4293  2097					      repend
   4294  2098		       ff		      .byte.b	$ff
   4293  2098					      repend
   4294  2099		       ff		      .byte.b	$ff
   4293  2099					      repend
   4294  209a		       ff		      .byte.b	$ff
   4293  209a					      repend
   4294  209b		       ff		      .byte.b	$ff
   4293  209b					      repend
   4294  209c		       ff		      .byte.b	$ff
   4293  209c					      repend
   4294  209d		       ff		      .byte.b	$ff
   4293  209d					      repend
   4294  209e		       ff		      .byte.b	$ff
   4293  209e					      repend
   4294  209f		       ff		      .byte.b	$ff
   4293  209f					      repend
   4294  20a0		       ff		      .byte.b	$ff
   4293  20a0					      repend
   4294  20a1		       ff		      .byte.b	$ff
   4293  20a1					      repend
   4294  20a2		       ff		      .byte.b	$ff
   4293  20a2					      repend
   4294  20a3		       ff		      .byte.b	$ff
   4293  20a3					      repend
   4294  20a4		       ff		      .byte.b	$ff
   4293  20a4					      repend
   4294  20a5		       ff		      .byte.b	$ff
   4293  20a5					      repend
   4294  20a6		       ff		      .byte.b	$ff
   4293  20a6					      repend
   4294  20a7		       ff		      .byte.b	$ff
   4293  20a7					      repend
   4294  20a8		       ff		      .byte.b	$ff
   4293  20a8					      repend
   4294  20a9		       ff		      .byte.b	$ff
   4293  20a9					      repend
   4294  20aa		       ff		      .byte.b	$ff
   4293  20aa					      repend
   4294  20ab		       ff		      .byte.b	$ff
   4293  20ab					      repend
   4294  20ac		       ff		      .byte.b	$ff
   4293  20ac					      repend
   4294  20ad		       ff		      .byte.b	$ff
   4293  20ad					      repend
   4294  20ae		       ff		      .byte.b	$ff
   4293  20ae					      repend
   4294  20af		       ff		      .byte.b	$ff
   4293  20af					      repend
   4294  20b0		       ff		      .byte.b	$ff
   4293  20b0					      repend
   4294  20b1		       ff		      .byte.b	$ff
   4293  20b1					      repend
   4294  20b2		       ff		      .byte.b	$ff
   4293  20b2					      repend
   4294  20b3		       ff		      .byte.b	$ff
   4293  20b3					      repend
   4294  20b4		       ff		      .byte.b	$ff
   4293  20b4					      repend
   4294  20b5		       ff		      .byte.b	$ff
   4293  20b5					      repend
   4294  20b6		       ff		      .byte.b	$ff
   4293  20b6					      repend
   4294  20b7		       ff		      .byte.b	$ff
   4293  20b7					      repend
   4294  20b8		       ff		      .byte.b	$ff
   4293  20b8					      repend
   4294  20b9		       ff		      .byte.b	$ff
   4293  20b9					      repend
   4294  20ba		       ff		      .byte.b	$ff
   4293  20ba					      repend
   4294  20bb		       ff		      .byte.b	$ff
   4293  20bb					      repend
   4294  20bc		       ff		      .byte.b	$ff
   4293  20bc					      repend
   4294  20bd		       ff		      .byte.b	$ff
   4293  20bd					      repend
   4294  20be		       ff		      .byte.b	$ff
   4293  20be					      repend
   4294  20bf		       ff		      .byte.b	$ff
   4293  20bf					      repend
   4294  20c0		       ff		      .byte.b	$ff
   4293  20c0					      repend
   4294  20c1		       ff		      .byte.b	$ff
   4293  20c1					      repend
   4294  20c2		       ff		      .byte.b	$ff
   4293  20c2					      repend
   4294  20c3		       ff		      .byte.b	$ff
   4293  20c3					      repend
   4294  20c4		       ff		      .byte.b	$ff
   4293  20c4					      repend
   4294  20c5		       ff		      .byte.b	$ff
   4293  20c5					      repend
   4294  20c6		       ff		      .byte.b	$ff
   4293  20c6					      repend
   4294  20c7		       ff		      .byte.b	$ff
   4293  20c7					      repend
   4294  20c8		       ff		      .byte.b	$ff
   4293  20c8					      repend
   4294  20c9		       ff		      .byte.b	$ff
   4293  20c9					      repend
   4294  20ca		       ff		      .byte.b	$ff
   4293  20ca					      repend
   4294  20cb		       ff		      .byte.b	$ff
   4293  20cb					      repend
   4294  20cc		       ff		      .byte.b	$ff
   4293  20cc					      repend
   4294  20cd		       ff		      .byte.b	$ff
   4293  20cd					      repend
   4294  20ce		       ff		      .byte.b	$ff
   4293  20ce					      repend
   4294  20cf		       ff		      .byte.b	$ff
   4293  20cf					      repend
   4294  20d0		       ff		      .byte.b	$ff
   4293  20d0					      repend
   4294  20d1		       ff		      .byte.b	$ff
   4293  20d1					      repend
   4294  20d2		       ff		      .byte.b	$ff
   4293  20d2					      repend
   4294  20d3		       ff		      .byte.b	$ff
   4293  20d3					      repend
   4294  20d4		       ff		      .byte.b	$ff
   4293  20d4					      repend
   4294  20d5		       ff		      .byte.b	$ff
   4293  20d5					      repend
   4294  20d6		       ff		      .byte.b	$ff
   4293  20d6					      repend
   4294  20d7		       ff		      .byte.b	$ff
   4293  20d7					      repend
   4294  20d8		       ff		      .byte.b	$ff
   4293  20d8					      repend
   4294  20d9		       ff		      .byte.b	$ff
   4293  20d9					      repend
   4294  20da		       ff		      .byte.b	$ff
   4293  20da					      repend
   4294  20db		       ff		      .byte.b	$ff
   4293  20db					      repend
   4294  20dc		       ff		      .byte.b	$ff
   4293  20dc					      repend
   4294  20dd		       ff		      .byte.b	$ff
   4293  20dd					      repend
   4294  20de		       ff		      .byte.b	$ff
   4293  20de					      repend
   4294  20df		       ff		      .byte.b	$ff
   4293  20df					      repend
   4294  20e0		       ff		      .byte.b	$ff
   4293  20e0					      repend
   4294  20e1		       ff		      .byte.b	$ff
   4293  20e1					      repend
   4294  20e2		       ff		      .byte.b	$ff
   4293  20e2					      repend
   4294  20e3		       ff		      .byte.b	$ff
   4293  20e3					      repend
   4294  20e4		       ff		      .byte.b	$ff
   4293  20e4					      repend
   4294  20e5		       ff		      .byte.b	$ff
   4293  20e5					      repend
   4294  20e6		       ff		      .byte.b	$ff
   4293  20e6					      repend
   4294  20e7		       ff		      .byte.b	$ff
   4293  20e7					      repend
   4294  20e8		       ff		      .byte.b	$ff
   4293  20e8					      repend
   4294  20e9		       ff		      .byte.b	$ff
   4293  20e9					      repend
   4294  20ea		       ff		      .byte.b	$ff
   4293  20ea					      repend
   4294  20eb		       ff		      .byte.b	$ff
   4293  20eb					      repend
   4294  20ec		       ff		      .byte.b	$ff
   4293  20ec					      repend
   4294  20ed		       ff		      .byte.b	$ff
   4293  20ed					      repend
   4294  20ee		       ff		      .byte.b	$ff
   4293  20ee					      repend
   4294  20ef		       ff		      .byte.b	$ff
   4293  20ef					      repend
   4294  20f0		       ff		      .byte.b	$ff
   4293  20f0					      repend
   4294  20f1		       ff		      .byte.b	$ff
   4293  20f1					      repend
   4294  20f2		       ff		      .byte.b	$ff
   4293  20f2					      repend
   4294  20f3		       ff		      .byte.b	$ff
   4293  20f3					      repend
   4294  20f4		       ff		      .byte.b	$ff
   4293  20f4					      repend
   4294  20f5		       ff		      .byte.b	$ff
   4293  20f5					      repend
   4294  20f6		       ff		      .byte.b	$ff
   4293  20f6					      repend
   4294  20f7		       ff		      .byte.b	$ff
   4293  20f7					      repend
   4294  20f8		       ff		      .byte.b	$ff
   4293  20f8					      repend
   4294  20f9		       ff		      .byte.b	$ff
   4293  20f9					      repend
   4294  20fa		       ff		      .byte.b	$ff
   4293  20fa					      repend
   4294  20fb		       ff		      .byte.b	$ff
   4293  20fb					      repend
   4294  20fc		       ff		      .byte.b	$ff
   4293  20fc					      repend
   4294  20fd		       ff		      .byte.b	$ff
   4293  20fd					      repend
   4294  20fe		       ff		      .byte.b	$ff
   4293  20fe					      repend
   4294  20ff		       ff		      .byte.b	$ff
   4295  2100					      repend
   4296  2100							; Provided under the CC0 license. See the included LICENSE.txt for details.
   4297  2100
   4298  2100							; This is a 2-line kernel!
   4299  2100					      ifnconst	vertical_reflect
   4300  2100				   kernel
   4301  2100					      endif
   4302  2100		       85 02		      sta	WSYNC
   4303  2102		       a9 ff		      lda	#255
   4304  2104		       8d 96 02 	      sta	TIM64T
   4305  2107
   4306  2107		       a9 01		      lda	#1
   4307  2109		       85 27		      sta	VDELBL
   4308  210b		       85 25		      sta	VDELP0
   4309  210d		       a6 92		      ldx	ballheight
   4310  210f		       e8		      inx
   4311  2110		       e8		      inx
   4312  2111		       86 9f		      stx	temp4
   4313  2113		       a5 86		      lda	player1y
   4314  2115		       85 9e		      sta	temp3
   4315  2117
   4316  2117				  -	      ifconst	shakescreen
   4317  2117				  -	      jsr	doshakescreen
   4318  2117					      else
   4319  2117		       a6 90		      ldx	missile0height
   4320  2119		       e8		      inx
   4321  211a					      endif
   4322  211a
   4323  211a		       e8		      inx
   4324  211b		       86 f6		      stx	stack1
   4325  211d
   4326  211d		       a5 89		      lda	bally
   4327  211f		       85 f7		      sta	stack2
   4328  2121
   4329  2121		       a5 85		      lda	player0y
   4330  2123		       a2 00		      ldx	#0
   4331  2125		       85 02		      sta	WSYNC
   4332  2127		       86 1b		      stx	GRP0
   4333  2129		       86 1c		      stx	GRP1
   4334  212b		       86 0e		      stx	PF1L
   4335  212d		       86 0f		      stx	PF2
   4336  212f		       86 2c		      stx	CXCLR
   4337  2131				  -	      ifconst	readpaddle
   4338  2131				  -	      stx	paddle
   4339  2131					      else
      0  2131					      sleep	3
      1  2131				   .CYCLES    SET	3
      2  2131
      3  2131				  -	      IF	.CYCLES < 2
      4  2131				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  2131				  -	      ERR
      6  2131					      ENDIF
      7  2131
      8  2131					      IF	.CYCLES & 1
      9  2131					      IFNCONST	NO_ILLEGAL_OPCODES
     10  2131		       04 00		      nop	0
     11  2133				  -	      ELSE
     12  2133				  -	      bit	VSYNC
     13  2133					      ENDIF
     14  2133				   .CYCLES    SET	.CYCLES - 3
     15  2133					      ENDIF
     16  2133
     17  2133				  -	      REPEAT	.CYCLES / 2
     18  2133				  -	      nop
     19  2133					      REPEND
   4341  2133					      endif
   4342  2133
   4343  2133		       95 9d		      sta	temp2,x
   4344  2135
   4345  2135							;store these so they can be retrieved later
   4346  2135				  -	      ifnconst	pfres
   4347  2135				  -	      ldx	#128-44+(4-pfwidth)*12
   4348  2135					      else
   4349  2135		       a2 74		      ldx	#132-pfres*pfwidth
   4350  2137					      endif
   4351  2137
   4352  2137		       c6 85		      dec	player0y
   4353  2139
   4354  2139		       a5 91		      lda	missile0y
   4355  213b		       85 a0		      sta	temp5
   4356  213d		       a5 88		      lda	missile1y
   4357  213f		       85 a1		      sta	temp6
   4358  2141
   4359  2141		       a5 ef		      lda	playfieldpos
   4360  2143		       85 9c		      sta	temp1
   4361  2145
   4362  2145				  -	      ifconst	pfrowheight
   4363  2145				  -	      lda	#pfrowheight+2
   4364  2145					      else
   4365  2145				  -	      ifnconst	pfres
   4366  2145				  -	      lda	#10
   4367  2145					      else
   4368  2145		       a9 1a		      lda	#(96/pfres)+2	; try to come close to the real size
   4369  2147					      endif
   4370  2147					      endif
   4371  2147		       18		      clc
   4372  2148		       e5 ef		      sbc	playfieldpos
   4373  214a		       85 ef		      sta	playfieldpos
   4374  214c		       4c 78 f1 	      jmp	.startkernel
   4375  214f
   4376  214f				   .skipDrawP0
   4377  214f		       a9 00		      lda	#0
   4378  2151		       a8		      tay
   4379  2152		       4c aa f1 	      jmp	.continueP0
   4380  2155
   4381  2155				   .skipDrawP1
   4382  2155		       a9 00		      lda	#0
   4383  2157		       a8		      tay
   4384  2158		       4c 82 f1 	      jmp	.continueP1
   4385  215b
   4386  215b				   .kerloop		; enter at cycle 59??
   4387  215b
   4388  215b				   continuekernel
      0  215b					      sleep	2
      1  215b				   .CYCLES    SET	2
      2  215b
      3  215b				  -	      IF	.CYCLES < 2
      4  215b				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  215b				  -	      ERR
      6  215b					      ENDIF
      7  215b
      8  215b				  -	      IF	.CYCLES & 1
      9  215b				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  215b				  -	      nop	0
     11  215b				  -	      ELSE
     12  215b				  -	      bit	VSYNC
     13  215b				  -	      ENDIF
     14  215b				  -.CYCLES    SET	.CYCLES - 3
     15  215b					      ENDIF
     16  215b
     17  215b					      REPEAT	.CYCLES / 2
     18  215b		       ea		      nop
     19  215c					      REPEND
   4390  215c				   continuekernel2
   4391  215c		       a5 92		      lda	ballheight
   4392  215e
   4393  215e					      ifconst	pfres
   4394  215e		       bc 7c 10 	      ldy	playfield+pfres*pfwidth-132,x
   4395  2161		       84 0e		      sty	PF1L	;3
   4396  2163		       bc 7d 10 	      ldy	playfield+pfres*pfwidth-131-pfadjust,x
   4397  2166		       84 0f		      sty	PF2L	;3
   4398  2168		       bc 7f 10 	      ldy	playfield+pfres*pfwidth-129,x
   4399  216b		       84 0e		      sty	PF1R	; 3 too early?
   4400  216d		       bc 7e 10 	      ldy	playfield+pfres*pfwidth-130-pfadjust,x
   4401  2170		       84 0f		      sty	PF2R	;3
   4402  2172				  -	      else
   4403  2172				  -	      ldy	playfield-48+pfwidth*12+44-128,x
   4404  2172				  -	      sty	PF1L	;3
   4405  2172				  -	      ldy	playfield-48+pfwidth*12+45-128-pfadjust,x	;4
   4406  2172				  -	      sty	PF2L	;3
   4407  2172				  -	      ldy	playfield-48+pfwidth*12+47-128,x	;4
   4408  2172				  -	      sty	PF1R	; 3 too early?
   4409  2172				  -	      ldy	playfield-48+pfwidth*12+46-128-pfadjust,x	;4
   4410  2172				  -	      sty	PF2R	;3
   4411  2172					      endif
   4412  2172
   4413  2172							; should be playfield+$38 for width=2
   4414  2172
   4415  2172		       c7 89		      dcp	bally
   4416  2174		       2a		      rol
   4417  2175		       2a		      rol
   4418  2176							; rol
   4419  2176							; rol
   4420  2176				   goback
   4421  2176		       85 1f		      sta	ENABL
   4422  2178				   .startkernel
   4423  2178		       a5 8f		      lda	player1height	;3
   4424  217a		       c7 86		      dcp	player1y	;5
   4425  217c		       90 d7		      bcc	.skipDrawP1	;2
   4426  217e		       a4 86		      ldy	player1y	;3
   4427  2180		       b1 8c		      lda	(player1pointer),y	;5; player0pointer must be selected carefully by the compiler
   4428  2182							; so it doesn't cross a page boundary!
   4429  2182
   4430  2182				   .continueP1
   4431  2182		       85 1c		      sta	GRP1	;3
   4432  2184
   4433  2184				  -	      ifnconst	player1colors
   4434  2184				  -	      lda	missile1height	;3
   4435  2184				  -	      dcp	missile1y	;5
   4436  2184				  -	      rol		;2
   4437  2184				  -	      rol		;2
   4438  2184				  -	      sta	ENAM1	;3
   4439  2184					      else
   4440  2184		       b1 87		      lda	(player1color),y
   4441  2186		       85 07		      sta	COLUP1
   4442  2188					      ifnconst	playercolors
      0  2188					      sleep	7
      1  2188				   .CYCLES    SET	7
      2  2188
      3  2188				  -	      IF	.CYCLES < 2
      4  2188				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  2188				  -	      ERR
      6  2188					      ENDIF
      7  2188
      8  2188					      IF	.CYCLES & 1
      9  2188					      IFNCONST	NO_ILLEGAL_OPCODES
     10  2188		       04 00		      nop	0
     11  218a				  -	      ELSE
     12  218a				  -	      bit	VSYNC
     13  218a					      ENDIF
     14  218a				   .CYCLES    SET	.CYCLES - 3
     15  218a					      ENDIF
     16  218a
     17  218a					      REPEAT	.CYCLES / 2
     18  218a		       ea		      nop
     17  218a					      REPEND
     18  218b		       ea		      nop
     19  218c					      REPEND
   4444  218c				  -	      else
   4445  218c				  -	      lda.w	player0colorstore
   4446  218c				  -	      sta	COLUP0
   4447  218c					      endif
   4448  218c					      endif
   4449  218c
   4450  218c					      ifconst	pfres
   4451  218c		       bd 7c 10 	      lda	playfield+pfres*pfwidth-132,x
   4452  218f		       85 0e		      sta	PF1L	;3
   4453  2191		       bd 7d 10 	      lda	playfield+pfres*pfwidth-131-pfadjust,x
   4454  2194		       85 0f		      sta	PF2L	;3
   4455  2196		       bd 7f 10 	      lda	playfield+pfres*pfwidth-129,x
   4456  2199		       85 0e		      sta	PF1R	; 3 too early?
   4457  219b		       bd 7e 10 	      lda	playfield+pfres*pfwidth-130-pfadjust,x
   4458  219e		       85 0f		      sta	PF2R	;3
   4459  21a0				  -	      else
   4460  21a0				  -	      lda	playfield-48+pfwidth*12+44-128,x	;4
   4461  21a0				  -	      sta	PF1L	;3
   4462  21a0				  -	      lda	playfield-48+pfwidth*12+45-128-pfadjust,x	;4
   4463  21a0				  -	      sta	PF2L	;3
   4464  21a0				  -	      lda	playfield-48+pfwidth*12+47-128,x	;4
   4465  21a0				  -	      sta	PF1R	; 3 too early?
   4466  21a0				  -	      lda	playfield-48+pfwidth*12+46-128-pfadjust,x	;4
   4467  21a0				  -	      sta	PF2R	;3
   4468  21a0					      endif
   4469  21a0							; sleep 3
   4470  21a0
   4471  21a0		       a5 8e		      lda	player0height
   4472  21a2		       c7 85		      dcp	player0y
   4473  21a4		       90 a9		      bcc	.skipDrawP0
   4474  21a6		       a4 85		      ldy	player0y
   4475  21a8		       b1 8a		      lda	(player0pointer),y
   4476  21aa				   .continueP0
   4477  21aa		       85 1b		      sta	GRP0
   4478  21ac
   4479  21ac					      ifnconst	no_blank_lines
   4480  21ac					      ifnconst	playercolors
   4481  21ac		       a5 90		      lda	missile0height	;3
   4482  21ae		       c7 91		      dcp	missile0y	;5
   4483  21b0		       e5 f6		      sbc	stack1
   4484  21b2		       85 1d		      sta	ENAM0	;3
   4485  21b4				  -	      else
   4486  21b4				  -	      lda	(player0color),y
   4487  21b4				  -	      sta	player0colorstore
   4488  21b4				  -	      sleep	6
   4489  21b4					      endif
   4490  21b4		       c6 9c		      dec	temp1
   4491  21b6		       d0 a3		      bne	continuekernel
   4492  21b8				  -	      else
   4493  21b8				  -	      dec	temp1
   4494  21b8				  -	      beq	altkernel2
   4495  21b8				  -	      ifconst	readpaddle
   4496  21b8				  -	      ldy	currentpaddle
   4497  21b8				  -	      lda	INPT0,y
   4498  21b8				  -	      bpl	noreadpaddle
   4499  21b8				  -	      inc	paddle
   4500  21b8				  -	      jmp	continuekernel2
   4501  21b8				  -noreadpaddle
   4502  21b8				  -	      sleep	2
   4503  21b8				  -	      jmp	continuekernel
   4504  21b8				  -	      else
   4505  21b8				  -	      ifnconst	playercolors
   4506  21b8				  -	      ifconst	PFcolors
   4507  21b8				  -	      txa
   4508  21b8				  -	      tay
   4509  21b8				  -	      lda	(pfcolortable),y
   4510  21b8				  -	      ifnconst	backgroundchange
   4511  21b8				  -	      sta	COLUPF
   4512  21b8				  -	      else
   4513  21b8				  -	      sta	COLUBK
   4514  21b8				  -	      endif
   4515  21b8				  -	      jmp	continuekernel
   4516  21b8				  -	      else
   4517  21b8				  -	      ifconst	kernelmacrodef
   4518  21b8				  -	      kernelmacro
   4519  21b8				  -	      else
   4520  21b8				  -	      sleep	12
   4521  21b8				  -	      endif
   4522  21b8				  -	      endif
   4523  21b8				  -	      else
   4524  21b8				  -	      lda	(player0color),y
   4525  21b8				  -	      sta	player0colorstore
   4526  21b8				  -	      sleep	4
   4527  21b8				  -	      endif
   4528  21b8				  -	      jmp	continuekernel
   4529  21b8				  -	      endif
   4530  21b8				  -altkernel2
   4531  21b8				  -	      txa
   4532  21b8				  -	      ifnconst	vertical_reflect
   4533  21b8				  -	      sbx	#256-pfwidth
   4534  21b8				  -	      else
   4535  21b8				  -	      sbx	#256-pfwidth/2
   4536  21b8				  -	      endif
   4537  21b8				  -	      bmi	lastkernelline
   4538  21b8				  -	      ifconst	pfrowheight
   4539  21b8				  -	      lda	#pfrowheight
   4540  21b8				  -	      else
   4541  21b8				  -	      ifnconst	pfres
   4542  21b8				  -	      lda	#8
   4543  21b8				  -	      else
   4544  21b8				  -	      lda	#(96/pfres)	; try to come close to the real size
   4545  21b8				  -	      endif
   4546  21b8				  -	      endif
   4547  21b8				  -	      sta	temp1
   4548  21b8				  -	      jmp	continuekernel
   4549  21b8					      endif
   4550  21b8
   4551  21b8				   altkernel
   4552  21b8
   4553  21b8				  -	      ifconst	PFmaskvalue
   4554  21b8				  -	      lda	#PFmaskvalue
   4555  21b8					      else
   4556  21b8		       a9 00		      lda	#0
   4557  21ba					      endif
   4558  21ba		       85 0e		      sta	PF1L
   4559  21bc		       85 0f		      sta	PF2
   4560  21be
   4561  21be
   4562  21be							;sleep 3
   4563  21be
   4564  21be							;28 cycles to fix things
   4565  21be							;minus 11=17
   4566  21be
   4567  21be							; lax temp4
   4568  21be							; clc
   4569  21be		       8a		      txa
   4570  21bf					      ifnconst	vertical_reflect
   4571  21bf		       cb fc		      sbx	#256-pfwidth
   4572  21c1				  -	      else
   4573  21c1				  -	      sbx	#256-pfwidth/2
   4574  21c1					      endif
   4575  21c1
   4576  21c1		       30 12		      bmi	lastkernelline
   4577  21c3
   4578  21c3				  -	      ifconst	PFcolorandheight
   4579  21c3				  -	      ifconst	pfres
   4580  21c3				  -	      ldy	playfieldcolorandheight-131+pfres*pfwidth,x
   4581  21c3				  -	      else
   4582  21c3				  -	      ldy	playfieldcolorandheight-87,x
   4583  21c3				  -	      endif
   4584  21c3				  -	      ifnconst	backgroundchange
   4585  21c3				  -	      sty	COLUPF
   4586  21c3				  -	      else
   4587  21c3				  -	      sty	COLUBK
   4588  21c3				  -	      endif
   4589  21c3				  -	      ifconst	pfres
   4590  21c3				  -	      lda	playfieldcolorandheight-132+pfres*pfwidth,x
   4591  21c3				  -	      else
   4592  21c3				  -	      lda	playfieldcolorandheight-88,x
   4593  21c3				  -	      endif
   4594  21c3				  -	      sta.w	temp1
   4595  21c3					      endif
   4596  21c3				  -	      ifconst	PFheights
   4597  21c3				  -	      lsr
   4598  21c3				  -	      lsr
   4599  21c3				  -	      tay
   4600  21c3				  -	      lda	(pfheighttable),y
   4601  21c3				  -	      sta.w	temp1
   4602  21c3					      endif
   4603  21c3					      ifconst	PFcolors
   4604  21c3		       a8		      tay
   4605  21c4		       b1 f0		      lda	(pfcolortable),y
   4606  21c6					      ifnconst	backgroundchange
   4607  21c6		       85 08		      sta	COLUPF
   4608  21c8				  -	      else
   4609  21c8				  -	      sta	COLUBK
   4610  21c8					      endif
   4611  21c8				  -	      ifconst	pfrowheight
   4612  21c8				  -	      lda	#pfrowheight
   4613  21c8					      else
   4614  21c8				  -	      ifnconst	pfres
   4615  21c8				  -	      lda	#8
   4616  21c8					      else
   4617  21c8		       a9 18		      lda	#(96/pfres)	; try to come close to the real size
   4618  21ca					      endif
   4619  21ca					      endif
   4620  21ca		       85 9c		      sta	temp1
   4621  21cc					      endif
   4622  21cc					      ifnconst	PFcolorandheight
   4623  21cc				  -	      ifnconst	PFcolors
   4624  21cc				  -	      ifnconst	PFheights
   4625  21cc				  -	      ifnconst	no_blank_lines
   4626  21cc				  -			; read paddle 0
   4627  21cc				  -			; lo-res paddle read
   4628  21cc				  -			; bit INPT0
   4629  21cc				  -			; bmi paddleskipread
   4630  21cc				  -			; inc paddle0
   4631  21cc				  -			;donepaddleskip
   4632  21cc				  -	      sleep	10
   4633  21cc				  -	      ifconst	pfrowheight
   4634  21cc				  -	      lda	#pfrowheight
   4635  21cc				  -	      else
   4636  21cc				  -	      ifnconst	pfres
   4637  21cc				  -	      lda	#8
   4638  21cc				  -	      else
   4639  21cc				  -	      lda	#(96/pfres)	; try to come close to the real size
   4640  21cc				  -	      endif
   4641  21cc				  -	      endif
   4642  21cc				  -	      sta	temp1
   4643  21cc				  -	      endif
   4644  21cc				  -	      endif
   4645  21cc					      endif
   4646  21cc					      endif
   4647  21cc
   4648  21cc
   4649  21cc		       a5 92		      lda	ballheight
   4650  21ce		       c7 89		      dcp	bally
   4651  21d0		       e5 9f		      sbc	temp4
   4652  21d2
   4653  21d2
   4654  21d2		       4c 76 f1 	      jmp	goback
   4655  21d5
   4656  21d5
   4657  21d5					      ifnconst	no_blank_lines
   4658  21d5				   lastkernelline
   4659  21d5				  -	      ifnconst	PFcolors
   4660  21d5				  -	      sleep	10
   4661  21d5					      else
   4662  21d5		       a0 7c		      ldy	#124
   4663  21d7		       b1 f0		      lda	(pfcolortable),y
   4664  21d9		       85 08		      sta	COLUPF
   4665  21db					      endif
   4666  21db
   4667  21db				  -	      ifconst	PFheights
   4668  21db				  -	      ldx	#1
   4669  21db				  -			;sleep 4
   4670  21db				  -	      sleep	3	; this was over 1 cycle
   4671  21db					      else
   4672  21db		       a6 ef		      ldx	playfieldpos
   4673  21dd							;sleep 3
      0  21dd					      sleep	2	; this was over 1 cycle
      1  21dd				   .CYCLES    SET	2
      2  21dd
      3  21dd				  -	      IF	.CYCLES < 2
      4  21dd				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  21dd				  -	      ERR
      6  21dd					      ENDIF
      7  21dd
      8  21dd				  -	      IF	.CYCLES & 1
      9  21dd				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  21dd				  -	      nop	0
     11  21dd				  -	      ELSE
     12  21dd				  -	      bit	VSYNC
     13  21dd				  -	      ENDIF
     14  21dd				  -.CYCLES    SET	.CYCLES - 3
     15  21dd					      ENDIF
     16  21dd
     17  21dd					      REPEAT	.CYCLES / 2
     18  21dd		       ea		      nop
     19  21de					      REPEND
   4675  21de					      endif
   4676  21de
   4677  21de		       4c 1b f2 	      jmp	enterlastkernel
   4678  21e1
   4679  21e1				  -	      else
   4680  21e1				  -lastkernelline
   4681  21e1				  -
   4682  21e1				  -	      ifconst	PFheights
   4683  21e1				  -	      ldx	#1
   4684  21e1				  -			;sleep 5
   4685  21e1				  -	      sleep	4	; this was over 1 cycle
   4686  21e1				  -	      else
   4687  21e1				  -	      ldx	playfieldpos
   4688  21e1				  -			;sleep 4
   4689  21e1				  -	      sleep	3	; this was over 1 cycle
   4690  21e1				  -	      endif
   4691  21e1				  -
   4692  21e1				  -	      cpx	#0
   4693  21e1				  -	      bne	.enterfromNBL
   4694  21e1				  -	      jmp	no_blank_lines_bailout
   4695  21e1					      endif
   4696  21e1
   4697  21e1					      if	((<*)>$d5)
   4698  2200		       00 00 00 00*	      align	256
   4699  2200					      endif
   4700  2200							; this is a kludge to prevent page wrapping - fix!!!
   4701  2200
   4702  2200				   .skipDrawlastP1
   4703  2200		       a9 00		      lda	#0
   4704  2202		       a8		      tay		; added so we don't cross a page
   4705  2203		       4c 2d f2 	      jmp	.continuelastP1
   4706  2206
   4707  2206				   .endkerloop		; enter at cycle 59??
   4708  2206
   4709  2206		       ea		      nop
   4710  2207
   4711  2207				   .enterfromNBL
   4712  2207					      ifconst	pfres
   4713  2207		       ac fc 10 	      ldy.w	playfield+pfres*pfwidth-4
   4714  220a		       84 0e		      sty	PF1L	;3
   4715  220c		       ac fd 10 	      ldy.w	playfield+pfres*pfwidth-3-pfadjust
   4716  220f		       84 0f		      sty	PF2L	;3
   4717  2211		       ac ff 10 	      ldy.w	playfield+pfres*pfwidth-1
   4718  2214		       84 0e		      sty	PF1R	; possibly too early?
   4719  2216		       ac fe 10 	      ldy.w	playfield+pfres*pfwidth-2-pfadjust
   4720  2219		       84 0f		      sty	PF2R	;3
   4721  221b				  -	      else
   4722  221b				  -	      ldy.w	playfield-48+pfwidth*12+44
   4723  221b				  -	      sty	PF1L	;3
   4724  221b				  -	      ldy.w	playfield-48+pfwidth*12+45-pfadjust
   4725  221b				  -	      sty	PF2L	;3
   4726  221b				  -	      ldy.w	playfield-48+pfwidth*12+47
   4727  221b				  -	      sty	PF1R	; possibly too early?
   4728  221b				  -	      ldy.w	playfield-48+pfwidth*12+46-pfadjust
   4729  221b				  -	      sty	PF2R	;3
   4730  221b					      endif
   4731  221b
   4732  221b				   enterlastkernel
   4733  221b		       a5 92		      lda	ballheight
   4734  221d
   4735  221d							; tya
   4736  221d		       c7 89		      dcp	bally
   4737  221f							; sleep 4
   4738  221f
   4739  221f							; sbc stack3
   4740  221f		       2a		      rol
   4741  2220		       2a		      rol
   4742  2221		       85 1f		      sta	ENABL
   4743  2223
   4744  2223		       a5 8f		      lda	player1height	;3
   4745  2225		       c7 86		      dcp	player1y	;5
   4746  2227		       90 d7		      bcc	.skipDrawlastP1
   4747  2229		       a4 86		      ldy	player1y	;3
   4748  222b		       b1 8c		      lda	(player1pointer),y	;5; player0pointer must be selected carefully by the compiler
   4749  222d							; so it doesn't cross a page boundary!
   4750  222d
   4751  222d				   .continuelastP1
   4752  222d		       85 1c		      sta	GRP1	;3
   4753  222f
   4754  222f				  -	      ifnconst	player1colors
   4755  222f				  -	      lda	missile1height	;3
   4756  222f				  -	      dcp	missile1y	;5
   4757  222f					      else
   4758  222f		       b1 87		      lda	(player1color),y
   4759  2231		       85 07		      sta	COLUP1
   4760  2233					      endif
   4761  2233
   4762  2233		       ca		      dex
   4763  2234							;dec temp4 ; might try putting this above PF writes
   4764  2234		       f0 36		      beq	endkernel
   4765  2236
   4766  2236
   4767  2236					      ifconst	pfres
   4768  2236		       ac fc 10 	      ldy.w	playfield+pfres*pfwidth-4
   4769  2239		       84 0e		      sty	PF1L	;3
   4770  223b		       ac fd 10 	      ldy.w	playfield+pfres*pfwidth-3-pfadjust
   4771  223e		       84 0f		      sty	PF2L	;3
   4772  2240		       ac ff 10 	      ldy.w	playfield+pfres*pfwidth-1
   4773  2243		       84 0e		      sty	PF1R	; possibly too early?
   4774  2245		       ac fe 10 	      ldy.w	playfield+pfres*pfwidth-2-pfadjust
   4775  2248		       84 0f		      sty	PF2R	;3
   4776  224a				  -	      else
   4777  224a				  -	      ldy.w	playfield-48+pfwidth*12+44
   4778  224a				  -	      sty	PF1L	;3
   4779  224a				  -	      ldy.w	playfield-48+pfwidth*12+45-pfadjust
   4780  224a				  -	      sty	PF2L	;3
   4781  224a				  -	      ldy.w	playfield-48+pfwidth*12+47
   4782  224a				  -	      sty	PF1R	; possibly too early?
   4783  224a				  -	      ldy.w	playfield-48+pfwidth*12+46-pfadjust
   4784  224a				  -	      sty	PF2R	;3
   4785  224a					      endif
   4786  224a
   4787  224a				  -	      ifnconst	player1colors
   4788  224a				  -	      rol		;2
   4789  224a				  -	      rol		;2
   4790  224a				  -	      sta	ENAM1	;3
   4791  224a					      else
   4792  224a					      ifnconst	playercolors
      0  224a					      sleep	7
      1  224a				   .CYCLES    SET	7
      2  224a
      3  224a				  -	      IF	.CYCLES < 2
      4  224a				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  224a				  -	      ERR
      6  224a					      ENDIF
      7  224a
      8  224a					      IF	.CYCLES & 1
      9  224a					      IFNCONST	NO_ILLEGAL_OPCODES
     10  224a		       04 00		      nop	0
     11  224c				  -	      ELSE
     12  224c				  -	      bit	VSYNC
     13  224c					      ENDIF
     14  224c				   .CYCLES    SET	.CYCLES - 3
     15  224c					      ENDIF
     16  224c
     17  224c					      REPEAT	.CYCLES / 2
     18  224c		       ea		      nop
     17  224c					      REPEND
     18  224d		       ea		      nop
     19  224e					      REPEND
   4794  224e				  -	      else
   4795  224e				  -	      lda.w	player0colorstore
   4796  224e				  -	      sta	COLUP0
   4797  224e					      endif
   4798  224e					      endif
   4799  224e
   4800  224e		       ad 8e 00 	      lda.w	player0height
   4801  2251		       c7 85		      dcp	player0y
   4802  2253		       90 11		      bcc	.skipDrawlastP0
   4803  2255		       a4 85		      ldy	player0y
   4804  2257		       b1 8a		      lda	(player0pointer),y
   4805  2259				   .continuelastP0
   4806  2259		       85 1b		      sta	GRP0
   4807  225b
   4808  225b
   4809  225b
   4810  225b					      ifnconst	no_blank_lines
   4811  225b		       a5 90		      lda	missile0height	;3
   4812  225d		       c7 91		      dcp	missile0y	;5
   4813  225f		       e5 f6		      sbc	stack1
   4814  2261		       85 1d		      sta	ENAM0	;3
   4815  2263		       4c 06 f2 	      jmp	.endkerloop
   4816  2266				  -	      else
   4817  2266				  -	      ifconst	readpaddle
   4818  2266				  -	      ldy	currentpaddle
   4819  2266				  -	      lda	INPT0,y
   4820  2266				  -	      bpl	noreadpaddle2
   4821  2266				  -	      inc	paddle
   4822  2266				  -	      jmp	.endkerloop
   4823  2266				  -noreadpaddle2
   4824  2266				  -	      sleep	4
   4825  2266				  -	      jmp	.endkerloop
   4826  2266				  -	      else		; no_blank_lines and no paddle reading
   4827  2266				  -	      pla
   4828  2266				  -	      pha		; 14 cycles in 4 bytes
   4829  2266				  -	      pla
   4830  2266				  -	      pha
   4831  2266				  -			; sleep 14
   4832  2266				  -	      jmp	.endkerloop
   4833  2266				  -	      endif
   4834  2266					      endif
   4835  2266
   4836  2266
   4837  2266							; ifconst donepaddleskip
   4838  2266							;paddleskipread
   4839  2266							; this is kind of lame, since it requires 4 cycles from a page boundary crossing
   4840  2266							; plus we get a lo-res paddle read
   4841  2266							; bmi donepaddleskip
   4842  2266							; endif
   4843  2266
   4844  2266				   .skipDrawlastP0
   4845  2266		       a9 00		      lda	#0
   4846  2268		       a8		      tay
   4847  2269		       4c 59 f2 	      jmp	.continuelastP0
   4848  226c
   4849  226c				  -	      ifconst	no_blank_lines
   4850  226c				  -no_blank_lines_bailout
   4851  226c				  -	      ldx	#0
   4852  226c					      endif
   4853  226c
   4854  226c				   endkernel
   4855  226c							; 6 digit score routine
   4856  226c		       86 0e		      stx	PF1
   4857  226e		       86 0f		      stx	PF2
   4858  2270		       86 0d		      stx	PF0
   4859  2272		       18		      clc
   4860  2273
   4861  2273				  -	      ifconst	pfrowheight
   4862  2273				  -	      lda	#pfrowheight+2
   4863  2273					      else
   4864  2273				  -	      ifnconst	pfres
   4865  2273				  -	      lda	#10
   4866  2273					      else
   4867  2273		       a9 1a		      lda	#(96/pfres)+2	; try to come close to the real size
   4868  2275					      endif
   4869  2275					      endif
   4870  2275
   4871  2275		       e5 ef		      sbc	playfieldpos
   4872  2277		       85 ef		      sta	playfieldpos
   4873  2279		       8a		      txa
   4874  227a
   4875  227a				  -	      ifconst	shakescreen
   4876  227a				  -	      bit	shakescreen
   4877  227a				  -	      bmi	noshakescreen2
   4878  227a				  -	      ldx	#$3D
   4879  227a				  -noshakescreen2
   4880  227a					      endif
   4881  227a
   4882  227a		       95 02		      sta	WSYNC,x
   4883  227c
   4884  227c							; STA WSYNC ;first one, need one more
   4885  227c		       85 0b		      sta	REFP0
   4886  227e		       85 0c		      sta	REFP1
   4887  2280		       85 1b		      STA	GRP0
   4888  2282		       85 1c		      STA	GRP1
   4889  2284							; STA PF1
   4890  2284							; STA PF2
   4891  2284		       85 2b		      sta	HMCLR
   4892  2286		       85 1d		      sta	ENAM0
   4893  2288		       85 1e		      sta	ENAM1
   4894  228a		       85 1f		      sta	ENABL
   4895  228c
   4896  228c		       a5 9d		      lda	temp2	;restore variables that were obliterated by kernel
   4897  228e		       85 85		      sta	player0y
   4898  2290		       a5 9e		      lda	temp3
   4899  2292		       85 86		      sta	player1y
   4900  2294				  -	      ifnconst	player1colors
   4901  2294				  -	      lda	temp6
   4902  2294				  -	      sta	missile1y
   4903  2294					      endif
   4904  2294					      ifnconst	playercolors
   4905  2294					      ifnconst	readpaddle
   4906  2294		       a5 a0		      lda	temp5
   4907  2296		       85 91		      sta	missile0y
   4908  2298					      endif
   4909  2298					      endif
   4910  2298		       a5 f7		      lda	stack2
   4911  229a		       85 89		      sta	bally
   4912  229c
   4913  229c							; strangely, this isn't required any more. might have
   4914  229c							; resulted from the no_blank_lines score bounce fix
   4915  229c							;ifconst no_blank_lines
   4916  229c							;sta WSYNC
   4917  229c							;endif
   4918  229c
   4919  229c		       ad 84 02 	      lda	INTIM
   4920  229f		       18		      clc
   4921  22a0					      ifnconst	vblank_time
   4922  22a0		       69 8e		      adc	#43+12+87
   4923  22a2				  -	      else
   4924  22a2				  -	      adc	#vblank_time+12+87
   4925  22a2				  -
   4926  22a2					      endif
   4927  22a2							; sta WSYNC
   4928  22a2		       8d 96 02 	      sta	TIM64T
   4929  22a5
   4930  22a5					      ifconst	minikernel
   4931  22a5		       20 23 f6 	      jsr	minikernel
   4932  22a8					      endif
   4933  22a8
   4934  22a8							; now reassign temp vars for score pointers
   4935  22a8
   4936  22a8							; score pointers contain:
   4937  22a8							; score1-5: lo1,lo2,lo3,lo4,lo5,lo6
   4938  22a8							; swap lo2->temp1
   4939  22a8							; swap lo4->temp3
   4940  22a8							; swap lo6->temp5
   4941  22a8					      ifnconst	noscore
   4942  22a8		       a5 97		      lda	scorepointers+1
   4943  22aa							; ldy temp1
   4944  22aa		       85 9c		      sta	temp1
   4945  22ac							; sty scorepointers+1
   4946  22ac
   4947  22ac		       a5 99		      lda	scorepointers+3
   4948  22ae							; ldy temp3
   4949  22ae		       85 9e		      sta	temp3
   4950  22b0							; sty scorepointers+3
   4951  22b0
   4952  22b0
   4953  22b0		       85 2b		      sta	HMCLR
   4954  22b2		       ba		      tsx
   4955  22b3		       86 f6		      stx	stack1
   4956  22b5		       a2 e0		      ldx	#$E0
   4957  22b7		       86 20		      stx	HMP0
   4958  22b9
   4959  22b9		       a5 a3		      LDA	scorecolor
   4960  22bb		       85 06		      STA	COLUP0
   4961  22bd		       85 07		      STA	COLUP1
   4962  22bf				  -	      ifconst	scorefade
   4963  22bf				  -	      STA	stack2
   4964  22bf					      endif
   4965  22bf					      ifconst	pfscore
   4966  22bf		       a5 f4		      lda	pfscorecolor
   4967  22c1		       85 08		      sta	COLUPF
   4968  22c3					      endif
   4969  22c3		       85 02		      sta	WSYNC
   4970  22c5		       a2 00		      ldx	#0
   4971  22c7		       86 1b		      STx	GRP0
   4972  22c9		       86 1c		      STx	GRP1	; seems to be needed because of vdel
   4973  22cb
   4974  22cb		       a5 9b		      lda	scorepointers+5
   4975  22cd							; ldy temp5
   4976  22cd		       95 a0		      sta	temp5,x
   4977  22cf							; sty scorepointers+5
   4978  22cf		       a9 ff		      lda	#>scoretable
   4979  22d1		       85 97		      sta	scorepointers+1
   4980  22d3		       85 99		      sta	scorepointers+3
   4981  22d5		       85 9b		      sta	scorepointers+5
   4982  22d7		       85 9d		      sta	temp2
   4983  22d9		       85 9f		      sta	temp4
   4984  22db		       85 a1		      sta	temp6
   4985  22dd		       a0 07		      LDY	#7
   4986  22df		       84 25		      STY	VDELP0
   4987  22e1		       85 10		      STA	RESP0
   4988  22e3		       85 11		      STA	RESP1
   4989  22e5
   4990  22e5
   4991  22e5		       a9 03		      LDA	#$03
   4992  22e7		       85 04		      STA	NUSIZ0
   4993  22e9		       85 05		      STA	NUSIZ1
   4994  22eb		       85 26		      STA	VDELP1
   4995  22ed		       a9 f0		      LDA	#$F0
   4996  22ef		       85 21		      STA	HMP1
   4997  22f1		       b1 96		      lda	(scorepointers),y
   4998  22f3		       85 1b		      sta	GRP0
   4999  22f5		       85 2a		      STA	HMOVE	; cycle 73 ?
   5000  22f7		       4c 09 f3 	      jmp	beginscore
   5001  22fa
   5002  22fa
   5003  22fa					      if	((<*)>$d4)
   5004  2300		       00 00 00 00*	      align	256	; kludge that potentially wastes space! should be fixed!
   5005  2300					      endif
   5006  2300
   5007  2300				   loop2
   5008  2300		       b1 96		      lda	(scorepointers),y	;+5 68 204
   5009  2302		       85 1b		      sta	GRP0	;+3 71 213 D1 -- -- --
   5010  2304					      ifconst	pfscore
   5011  2304		       ad f2 00 	      lda.w	pfscore1
   5012  2307		       85 0e		      sta	PF1
   5013  2309				  -	      else
   5014  2309				  -	      ifconst	scorefade
   5015  2309				  -	      sleep	2
   5016  2309				  -	      dec	stack2	; decrement the temporary scorecolor
   5017  2309				  -	      else
   5018  2309				  -	      sleep	7
   5019  2309				  -	      endif
   5020  2309					      endif
   5021  2309							; cycle 0
   5022  2309				   beginscore
   5023  2309		       b1 9e		      lda	(scorepointers+$8),y	;+5 5 15
   5024  230b		       85 1c		      sta	GRP1	;+3 8 24 D1 D1 D2 --
   5025  230d		       b1 9c		      lda	(scorepointers+$6),y	;+5 13 39
   5026  230f		       85 1b		      sta	GRP0	;+3 16 48 D3 D1 D2 D2
   5027  2311		       b3 98		      lax	(scorepointers+$2),y	;+5 29 87
   5028  2313		       9a		      txs
   5029  2314		       b3 9a		      lax	(scorepointers+$4),y	;+5 36 108
   5030  2316				  -	      ifconst	scorefade
   5031  2316				  -	      lda	stack2
   5032  2316					      else
      0  2316					      sleep	3
      1  2316				   .CYCLES    SET	3
      2  2316
      3  2316				  -	      IF	.CYCLES < 2
      4  2316				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  2316				  -	      ERR
      6  2316					      ENDIF
      7  2316
      8  2316					      IF	.CYCLES & 1
      9  2316					      IFNCONST	NO_ILLEGAL_OPCODES
     10  2316		       04 00		      nop	0
     11  2318				  -	      ELSE
     12  2318				  -	      bit	VSYNC
     13  2318					      ENDIF
     14  2318				   .CYCLES    SET	.CYCLES - 3
     15  2318					      ENDIF
     16  2318
     17  2318				  -	      REPEAT	.CYCLES / 2
     18  2318				  -	      nop
     19  2318					      REPEND
   5034  2318					      endif
   5035  2318
   5036  2318					      ifconst	pfscore
   5037  2318		       a5 f3		      lda	pfscore2
   5038  231a		       85 0e		      sta	PF1
   5039  231c				  -	      else
   5040  231c				  -	      ifconst	scorefade
   5041  231c				  -	      sta	COLUP0
   5042  231c				  -	      sta	COLUP1
   5043  231c				  -	      else
   5044  231c				  -	      sleep	6
   5045  231c				  -	      endif
   5046  231c					      endif
   5047  231c
   5048  231c		       b1 a0		      lda	(scorepointers+$A),y	;+5 21 63
   5049  231e		       86 1c		      stx	GRP1	;+3 44 132 D3 D3 D4 D2!
   5050  2320		       ba		      tsx
   5051  2321		       86 1b		      stx	GRP0	;+3 47 141 D5 D3! D4 D4
   5052  2323		       85 1c		      sta	GRP1	;+3 50 150 D5 D5 D6 D4!
   5053  2325		       84 1b		      sty	GRP0	;+3 53 159 D4* D5! D6 D6
   5054  2327		       88		      dey
   5055  2328		       10 d6		      bpl	loop2	;+2 60 180
   5056  232a
   5057  232a		       a6 f6		      ldx	stack1
   5058  232c		       9a		      txs
   5059  232d							; lda scorepointers+1
   5060  232d		       a4 9c		      ldy	temp1
   5061  232f							; sta temp1
   5062  232f		       84 97		      sty	scorepointers+1
   5063  2331
   5064  2331		       a9 00		      LDA	#0
   5065  2333		       85 0e		      sta	PF1
   5066  2335		       85 1b		      STA	GRP0
   5067  2337		       85 1c		      STA	GRP1
   5068  2339		       85 25		      STA	VDELP0
   5069  233b		       85 26		      STA	VDELP1	;do we need these
   5070  233d		       85 04		      STA	NUSIZ0
   5071  233f		       85 05		      STA	NUSIZ1
   5072  2341
   5073  2341							; lda scorepointers+3
   5074  2341		       a4 9e		      ldy	temp3
   5075  2343							; sta temp3
   5076  2343		       84 99		      sty	scorepointers+3
   5077  2345
   5078  2345							; lda scorepointers+5
   5079  2345		       a4 a0		      ldy	temp5
   5080  2347							; sta temp5
   5081  2347		       84 9b		      sty	scorepointers+5
   5082  2349					      endif		;noscore
   5083  2349		       a9 c2		      LDA	#%11000010
   5084  234b		       85 02		      sta	WSYNC
   5085  234d		       85 01		      STA	VBLANK
      0  234f					      RETURN
      1  234f				  -	      ifnconst	bankswitch
      2  234f				  -	      rts
      3  234f					      else
      4  234f		       4c da ff 	      jmp	BS_return
      5  2352					      endif
   5087  2352
   5088  2352				  -	      ifconst	shakescreen
   5089  2352				  -doshakescreen
   5090  2352				  -	      bit	shakescreen
   5091  2352				  -	      bmi	noshakescreen
   5092  2352				  -	      sta	WSYNC
   5093  2352				  -noshakescreen
   5094  2352				  -	      ldx	missile0height
   5095  2352				  -	      inx
   5096  2352				  -	      rts
   5097  2352					      endif
   5098  2352
   5099  2352							; Provided under the CC0 license. See the included LICENSE.txt for details.
   5100  2352
   5101  2352				   start
   5102  2352		       78		      sei
   5103  2353		       d8		      cld
   5104  2354		       a0 00		      ldy	#0
   5105  2356		       a5 d0		      lda	$D0
   5106  2358		       c9 2c		      cmp	#$2C	;check RAM location #1
   5107  235a		       d0 07		      bne	MachineIs2600
   5108  235c		       a5 d1		      lda	$D1
   5109  235e		       c9 a9		      cmp	#$A9	;check RAM location #2
   5110  2360		       d0 01		      bne	MachineIs2600
   5111  2362		       88		      dey
   5112  2363				   MachineIs2600
   5113  2363		       a2 00		      ldx	#0
   5114  2365		       8a		      txa
   5115  2366				   clearmem
   5116  2366		       e8		      inx
   5117  2367		       9a		      txs
   5118  2368		       48		      pha
   5119  2369		       d0 fb		      bne	clearmem
   5120  236b		       84 9c		      sty	temp1
   5121  236d					      ifnconst	multisprite
   5122  236d				  -	      ifconst	pfrowheight
   5123  236d				  -	      lda	#pfrowheight
   5124  236d					      else
   5125  236d					      ifconst	pfres
   5126  236d		       a9 18		      lda	#(96/pfres)
   5127  236f				  -	      else
   5128  236f				  -	      lda	#8
   5129  236f					      endif
   5130  236f					      endif
   5131  236f		       85 ef		      sta	playfieldpos
   5132  2371					      endif
   5133  2371		       a2 05		      ldx	#5
   5134  2373				   initscore
   5135  2373		       a9 71		      lda	#<scoretable
   5136  2375		       95 96		      sta	scorepointers,x
   5137  2377		       ca		      dex
   5138  2378		       10 f9		      bpl	initscore
   5139  237a		       a9 01		      lda	#1
   5140  237c		       85 0a		      sta	CTRLPF
   5141  237e		       0d 84 02 	      ora	INTIM
   5142  2381		       85 a2		      sta	rand
   5143  2383
   5144  2383				  -	      ifconst	multisprite
   5145  2383				  -	      jsr	multisprite_setup
   5146  2383					      endif
   5147  2383
   5148  2383				  -	      ifnconst	bankswitch
   5149  2383				  -	      jmp	game
   5150  2383					      else
   5151  2383		       a9 d0		      lda	#>(game-1)
   5152  2385		       48		      pha
   5153  2386		       a9 ff		      lda	#<(game-1)
   5154  2388		       48		      pha
   5155  2389		       48		      pha
   5156  238a		       48		      pha
   5157  238b		       a2 01		      ldx	#1
   5158  238d		       4c e8 ff 	      jmp	BS_jsr
   5159  2390					      endif
   5160  2390							; Provided under the CC0 license. See the included LICENSE.txt for details.
   5161  2390
   5162  2390							; playfield drawing routines
   5163  2390							; you get a 32x12 bitmapped display in a single color :)
   5164  2390							; 0-31 and 0-11
   5165  2390
   5166  2390				   pfclear		; clears playfield - or fill with pattern
   5167  2390					      ifconst	pfres
   5168  2390		       a2 0f		      ldx	#pfres*pfwidth-1
   5169  2392				  -	      else
   5170  2392				  -	      ldx	#47-(4-pfwidth)*12	; will this work?
   5171  2392					      endif
   5172  2392				   pfclear_loop
   5173  2392				  -	      ifnconst	superchip
   5174  2392				  -	      sta	playfield,x
   5175  2392					      else
   5176  2392		       9d 70 10 	      sta	playfield-128,x
   5177  2395					      endif
   5178  2395		       ca		      dex
   5179  2396		       10 fa		      bpl	pfclear_loop
      0  2398					      RETURN
      1  2398				  -	      ifnconst	bankswitch
      2  2398				  -	      rts
      3  2398					      else
      4  2398		       4c da ff 	      jmp	BS_return
      5  239b					      endif
   5181  239b
   5182  239b				   setuppointers
   5183  239b		       86 9d		      stx	temp2	; store on.off.flip value
   5184  239d		       aa		      tax		; put x-value in x 
   5185  239e		       4a		      lsr
   5186  239f		       4a		      lsr
   5187  23a0		       4a		      lsr		; divide x pos by 8 
   5188  23a1		       85 9c		      sta	temp1
   5189  23a3		       98		      tya
   5190  23a4		       0a		      asl
   5191  23a5					      if	pfwidth=4
   5192  23a5		       0a		      asl		; multiply y pos by 4
   5193  23a6					      endif		; else multiply by 2
   5194  23a6		       18		      clc
   5195  23a7		       65 9c		      adc	temp1	; add them together to get actual memory location offset
   5196  23a9		       a8		      tay		; put the value in y
   5197  23aa		       a5 9d		      lda	temp2	; restore on.off.flip value
   5198  23ac		       60		      rts
   5199  23ad
   5200  23ad				   pfread
   5201  23ad							;x=xvalue, y=yvalue
   5202  23ad		       20 9b f3 	      jsr	setuppointers
   5203  23b0		       bd 45 f4 	      lda	setbyte,x
   5204  23b3		       39 f0 10 	      and	playfield,y
   5205  23b6		       5d 45 f4 	      eor	setbyte,x
   5206  23b9							; beq readzero
   5207  23b9							; lda #1
   5208  23b9							; readzero
      0  23b9					      RETURN
      1  23b9				  -	      ifnconst	bankswitch
      2  23b9				  -	      rts
      3  23b9					      else
      4  23b9		       4c da ff 	      jmp	BS_return
      5  23bc					      endif
   5210  23bc
   5211  23bc				   pfpixel
   5212  23bc							;x=xvalue, y=yvalue, a=0,1,2
   5213  23bc		       20 9b f3 	      jsr	setuppointers
   5214  23bf
   5215  23bf					      ifconst	bankswitch
   5216  23bf		       a5 9d		      lda	temp2	; load on.off.flip value (0,1, or 2)
   5217  23c1		       f0 0f		      beq	pixelon_r	; if "on" go to on
   5218  23c3		       4a		      lsr
   5219  23c4		       b0 18		      bcs	pixeloff_r	; value is 1 if true
   5220  23c6		       b9 f0 10 	      lda	playfield,y	; if here, it's "flip"
   5221  23c9		       5d 45 f4 	      eor	setbyte,x
   5222  23cc					      ifconst	superchip
   5223  23cc		       99 70 10 	      sta	playfield-128,y
   5224  23cf				  -	      else
   5225  23cf				  -	      sta	playfield,y
   5226  23cf					      endif
      0  23cf					      RETURN
      1  23cf				  -	      ifnconst	bankswitch
      2  23cf				  -	      rts
      3  23cf					      else
      4  23cf		       4c da ff 	      jmp	BS_return
      5  23d2					      endif
   5228  23d2				   pixelon_r
   5229  23d2		       b9 f0 10 	      lda	playfield,y
   5230  23d5		       1d 45 f4 	      ora	setbyte,x
   5231  23d8					      ifconst	superchip
   5232  23d8		       99 70 10 	      sta	playfield-128,y
   5233  23db				  -	      else
   5234  23db				  -	      sta	playfield,y
   5235  23db					      endif
      0  23db					      RETURN
      1  23db				  -	      ifnconst	bankswitch
      2  23db				  -	      rts
      3  23db					      else
      4  23db		       4c da ff 	      jmp	BS_return
      5  23de					      endif
   5237  23de				   pixeloff_r
   5238  23de		       bd 45 f4 	      lda	setbyte,x
   5239  23e1		       49 ff		      eor	#$ff
   5240  23e3		       39 f0 10 	      and	playfield,y
   5241  23e6					      ifconst	superchip
   5242  23e6		       99 70 10 	      sta	playfield-128,y
   5243  23e9				  -	      else
   5244  23e9				  -	      sta	playfield,y
   5245  23e9					      endif
      0  23e9					      RETURN
      1  23e9				  -	      ifnconst	bankswitch
      2  23e9				  -	      rts
      3  23e9					      else
      4  23e9		       4c da ff 	      jmp	BS_return
      5  23ec					      endif
   5247  23ec
   5248  23ec				  -	      else
   5249  23ec				  -	      jmp	plotpoint
   5250  23ec					      endif
   5251  23ec
   5252  23ec				   pfhline
   5253  23ec							;x=xvalue, y=yvalue, a=0,1,2, temp3=endx
   5254  23ec		       20 9b f3 	      jsr	setuppointers
   5255  23ef		       4c f9 f3 	      jmp	noinc
   5256  23f2				   keepgoing
   5257  23f2		       e8		      inx
   5258  23f3		       8a		      txa
   5259  23f4		       29 07		      and	#7
   5260  23f6		       d0 01		      bne	noinc
   5261  23f8		       c8		      iny
   5262  23f9				   noinc
   5263  23f9		       20 1e f4 	      jsr	plotpoint
   5264  23fc		       e4 9e		      cpx	temp3
   5265  23fe		       30 f2		      bmi	keepgoing
      0  2400					      RETURN
      1  2400				  -	      ifnconst	bankswitch
      2  2400				  -	      rts
      3  2400					      else
      4  2400		       4c da ff 	      jmp	BS_return
      5  2403					      endif
   5267  2403
   5268  2403				   pfvline
   5269  2403							;x=xvalue, y=yvalue, a=0,1,2, temp3=endx
   5270  2403		       20 9b f3 	      jsr	setuppointers
   5271  2406		       84 9c		      sty	temp1	; store memory location offset
   5272  2408		       e6 9e		      inc	temp3	; increase final x by 1 
   5273  240a		       a5 9e		      lda	temp3
   5274  240c		       0a		      asl
   5275  240d					      if	pfwidth=4
   5276  240d		       0a		      asl		; multiply by 4
   5277  240e					      endif		; else multiply by 2
   5278  240e		       85 9e		      sta	temp3	; store it
   5279  2410							; Thanks to Michael Rideout for fixing a bug in this code
   5280  2410							; right now, temp1=y=starting memory location, temp3=final
   5281  2410							; x should equal original x value
   5282  2410				   keepgoingy
   5283  2410		       20 1e f4 	      jsr	plotpoint
   5284  2413		       c8		      iny
   5285  2414		       c8		      iny
   5286  2415					      if	pfwidth=4
   5287  2415		       c8		      iny
   5288  2416		       c8		      iny
   5289  2417					      endif
   5290  2417		       c4 9e		      cpy	temp3
   5291  2419		       30 f5		      bmi	keepgoingy
      0  241b					      RETURN
      1  241b				  -	      ifnconst	bankswitch
      2  241b				  -	      rts
      3  241b					      else
      4  241b		       4c da ff 	      jmp	BS_return
      5  241e					      endif
   5293  241e
   5294  241e				   plotpoint
   5295  241e		       a5 9d		      lda	temp2	; load on.off.flip value (0,1, or 2)
   5296  2420		       f0 0d		      beq	pixelon	; if "on" go to on
   5297  2422		       4a		      lsr
   5298  2423		       b0 14		      bcs	pixeloff	; value is 1 if true
   5299  2425		       b9 f0 10 	      lda	playfield,y	; if here, it's "flip"
   5300  2428		       5d 45 f4 	      eor	setbyte,x
   5301  242b					      ifconst	superchip
   5302  242b		       99 70 10 	      sta	playfield-128,y
   5303  242e				  -	      else
   5304  242e				  -	      sta	playfield,y
   5305  242e					      endif
   5306  242e		       60		      rts
   5307  242f				   pixelon
   5308  242f		       b9 f0 10 	      lda	playfield,y
   5309  2432		       1d 45 f4 	      ora	setbyte,x
   5310  2435					      ifconst	superchip
   5311  2435		       99 70 10 	      sta	playfield-128,y
   5312  2438				  -	      else
   5313  2438				  -	      sta	playfield,y
   5314  2438					      endif
   5315  2438		       60		      rts
   5316  2439				   pixeloff
   5317  2439		       bd 45 f4 	      lda	setbyte,x
   5318  243c		       49 ff		      eor	#$ff
   5319  243e		       39 f0 10 	      and	playfield,y
   5320  2441					      ifconst	superchip
   5321  2441		       99 70 10 	      sta	playfield-128,y
   5322  2444				  -	      else
   5323  2444				  -	      sta	playfield,y
   5324  2444					      endif
   5325  2444		       60		      rts
   5326  2445
   5327  2445				   setbyte
   5328  2445					      ifnconst	pfcenter
   5329  2445		       80		      .byte.b	$80
   5330  2446		       40		      .byte.b	$40
   5331  2447		       20		      .byte.b	$20
   5332  2448		       10		      .byte.b	$10
   5333  2449		       08		      .byte.b	$08
   5334  244a		       04		      .byte.b	$04
   5335  244b		       02		      .byte.b	$02
   5336  244c		       01		      .byte.b	$01
   5337  244d					      endif
   5338  244d		       01		      .byte.b	$01
   5339  244e		       02		      .byte.b	$02
   5340  244f		       04		      .byte.b	$04
   5341  2450		       08		      .byte.b	$08
   5342  2451		       10		      .byte.b	$10
   5343  2452		       20		      .byte.b	$20
   5344  2453		       40		      .byte.b	$40
   5345  2454		       80		      .byte.b	$80
   5346  2455		       80		      .byte.b	$80
   5347  2456		       40		      .byte.b	$40
   5348  2457		       20		      .byte.b	$20
   5349  2458		       10		      .byte.b	$10
   5350  2459		       08		      .byte.b	$08
   5351  245a		       04		      .byte.b	$04
   5352  245b		       02		      .byte.b	$02
   5353  245c		       01		      .byte.b	$01
   5354  245d		       01		      .byte.b	$01
   5355  245e		       02		      .byte.b	$02
   5356  245f		       04		      .byte.b	$04
   5357  2460		       08		      .byte.b	$08
   5358  2461		       10		      .byte.b	$10
   5359  2462		       20		      .byte.b	$20
   5360  2463		       40		      .byte.b	$40
   5361  2464		       80		      .byte.b	$80
   5362  2465							; Provided under the CC0 license. See the included LICENSE.txt for details.
   5363  2465
   5364  2465				   pfscroll		;(a=0 left, 1 right, 2 up, 4 down, 6=upup, 12=downdown)
   5365  2465		       d0 2a		      bne	notleft
   5366  2467							;left
   5367  2467					      ifconst	pfres
   5368  2467		       a2 10		      ldx	#pfres*4
   5369  2469				  -	      else
   5370  2469				  -	      ldx	#48
   5371  2469					      endif
   5372  2469				   leftloop
   5373  2469		       bd ef 10 	      lda	playfield-1,x
   5374  246c		       4a		      lsr
   5375  246d
   5376  246d					      ifconst	superchip
   5377  246d		       bd ee 10 	      lda	playfield-2,x
   5378  2470		       2a		      rol
   5379  2471		       9d 6e 10 	      sta	playfield-130,x
   5380  2474		       bd ed 10 	      lda	playfield-3,x
   5381  2477		       6a		      ror
   5382  2478		       9d 6d 10 	      sta	playfield-131,x
   5383  247b		       bd ec 10 	      lda	playfield-4,x
   5384  247e		       2a		      rol
   5385  247f		       9d 6c 10 	      sta	playfield-132,x
   5386  2482		       bd ef 10 	      lda	playfield-1,x
   5387  2485		       6a		      ror
   5388  2486		       9d 6f 10 	      sta	playfield-129,x
   5389  2489				  -	      else
   5390  2489				  -	      rol	playfield-2,x
   5391  2489				  -	      ror	playfield-3,x
   5392  2489				  -	      rol	playfield-4,x
   5393  2489				  -	      ror	playfield-1,x
   5394  2489					      endif
   5395  2489
   5396  2489		       8a		      txa
   5397  248a		       cb 04		      sbx	#4
   5398  248c		       d0 db		      bne	leftloop
      0  248e					      RETURN
      1  248e				  -	      ifnconst	bankswitch
      2  248e				  -	      rts
      3  248e					      else
      4  248e		       4c da ff 	      jmp	BS_return
      5  2491					      endif
   5400  2491
   5401  2491				   notleft
   5402  2491		       4a		      lsr
   5403  2492		       90 2a		      bcc	notright
   5404  2494							;right
   5405  2494
   5406  2494					      ifconst	pfres
   5407  2494		       a2 10		      ldx	#pfres*4
   5408  2496				  -	      else
   5409  2496				  -	      ldx	#48
   5410  2496					      endif
   5411  2496				   rightloop
   5412  2496		       bd ec 10 	      lda	playfield-4,x
   5413  2499		       4a		      lsr
   5414  249a					      ifconst	superchip
   5415  249a		       bd ed 10 	      lda	playfield-3,x
   5416  249d		       2a		      rol
   5417  249e		       9d 6d 10 	      sta	playfield-131,x
   5418  24a1		       bd ee 10 	      lda	playfield-2,x
   5419  24a4		       6a		      ror
   5420  24a5		       9d 6e 10 	      sta	playfield-130,x
   5421  24a8		       bd ef 10 	      lda	playfield-1,x
   5422  24ab		       2a		      rol
   5423  24ac		       9d 6f 10 	      sta	playfield-129,x
   5424  24af		       bd ec 10 	      lda	playfield-4,x
   5425  24b2		       6a		      ror
   5426  24b3		       9d 6c 10 	      sta	playfield-132,x
   5427  24b6				  -	      else
   5428  24b6				  -	      rol	playfield-3,x
   5429  24b6				  -	      ror	playfield-2,x
   5430  24b6				  -	      rol	playfield-1,x
   5431  24b6				  -	      ror	playfield-4,x
   5432  24b6					      endif
   5433  24b6		       8a		      txa
   5434  24b7		       cb 04		      sbx	#4
   5435  24b9		       d0 db		      bne	rightloop
      0  24bb					      RETURN
      1  24bb				  -	      ifnconst	bankswitch
      2  24bb				  -	      rts
      3  24bb					      else
      4  24bb		       4c da ff 	      jmp	BS_return
      5  24be					      endif
   5437  24be
   5438  24be				   notright
   5439  24be		       4a		      lsr
   5440  24bf		       90 5b		      bcc	notup
   5441  24c1							;up
   5442  24c1		       4a		      lsr
   5443  24c2		       90 02		      bcc	onedecup
   5444  24c4		       c6 ef		      dec	playfieldpos
   5445  24c6				   onedecup
   5446  24c6		       c6 ef		      dec	playfieldpos
   5447  24c8		       f0 02		      beq	shiftdown
   5448  24ca		       10 4d		      bpl	noshiftdown2
   5449  24cc				   shiftdown
   5450  24cc				  -	      ifconst	pfrowheight
   5451  24cc				  -	      lda	#pfrowheight
   5452  24cc					      else
   5453  24cc				  -	      ifnconst	pfres
   5454  24cc				  -	      lda	#8
   5455  24cc					      else
   5456  24cc		       a9 18		      lda	#(96/pfres)	; try to come close to the real size
   5457  24ce					      endif
   5458  24ce					      endif
   5459  24ce
   5460  24ce		       85 ef		      sta	playfieldpos
   5461  24d0		       ad f3 10 	      lda	playfield+3
   5462  24d3		       85 9f		      sta	temp4
   5463  24d5		       ad f2 10 	      lda	playfield+2
   5464  24d8		       85 9e		      sta	temp3
   5465  24da		       ad f1 10 	      lda	playfield+1
   5466  24dd		       85 9d		      sta	temp2
   5467  24df		       ad f0 10 	      lda	playfield
   5468  24e2		       85 9c		      sta	temp1
   5469  24e4		       a2 00		      ldx	#0
   5470  24e6				   up2
   5471  24e6		       bd f4 10 	      lda	playfield+4,x
   5472  24e9					      ifconst	superchip
   5473  24e9		       9d 70 10 	      sta	playfield-128,x
   5474  24ec		       bd f5 10 	      lda	playfield+5,x
   5475  24ef		       9d 71 10 	      sta	playfield-127,x
   5476  24f2		       bd f6 10 	      lda	playfield+6,x
   5477  24f5		       9d 72 10 	      sta	playfield-126,x
   5478  24f8		       bd f7 10 	      lda	playfield+7,x
   5479  24fb		       9d 73 10 	      sta	playfield-125,x
   5480  24fe				  -	      else
   5481  24fe				  -	      sta	playfield,x
   5482  24fe				  -	      lda	playfield+5,x
   5483  24fe				  -	      sta	playfield+1,x
   5484  24fe				  -	      lda	playfield+6,x
   5485  24fe				  -	      sta	playfield+2,x
   5486  24fe				  -	      lda	playfield+7,x
   5487  24fe				  -	      sta	playfield+3,x
   5488  24fe					      endif
   5489  24fe		       8a		      txa
   5490  24ff		       cb fc		      sbx	#252
   5491  2501					      ifconst	pfres
   5492  2501		       e0 0c		      cpx	#(pfres-1)*4
   5493  2503				  -	      else
   5494  2503				  -	      cpx	#44
   5495  2503					      endif
   5496  2503		       d0 e1		      bne	up2
   5497  2505
   5498  2505		       a5 9f		      lda	temp4
   5499  2507
   5500  2507					      ifconst	superchip
   5501  2507					      ifconst	pfres
   5502  2507		       8d 7f 10 	      sta	playfield+pfres*4-129
   5503  250a		       a5 9e		      lda	temp3
   5504  250c		       8d 7e 10 	      sta	playfield+pfres*4-130
   5505  250f		       a5 9d		      lda	temp2
   5506  2511		       8d 7d 10 	      sta	playfield+pfres*4-131
   5507  2514		       a5 9c		      lda	temp1
   5508  2516		       8d 7c 10 	      sta	playfield+pfres*4-132
   5509  2519				  -	      else
   5510  2519				  -	      sta	playfield+47-128
   5511  2519				  -	      lda	temp3
   5512  2519				  -	      sta	playfield+46-128
   5513  2519				  -	      lda	temp2
   5514  2519				  -	      sta	playfield+45-128
   5515  2519				  -	      lda	temp1
   5516  2519				  -	      sta	playfield+44-128
   5517  2519					      endif
   5518  2519				  -	      else
   5519  2519				  -	      ifconst	pfres
   5520  2519				  -	      sta	playfield+pfres*4-1
   5521  2519				  -	      lda	temp3
   5522  2519				  -	      sta	playfield+pfres*4-2
   5523  2519				  -	      lda	temp2
   5524  2519				  -	      sta	playfield+pfres*4-3
   5525  2519				  -	      lda	temp1
   5526  2519				  -	      sta	playfield+pfres*4-4
   5527  2519				  -	      else
   5528  2519				  -	      sta	playfield+47
   5529  2519				  -	      lda	temp3
   5530  2519				  -	      sta	playfield+46
   5531  2519				  -	      lda	temp2
   5532  2519				  -	      sta	playfield+45
   5533  2519				  -	      lda	temp1
   5534  2519				  -	      sta	playfield+44
   5535  2519				  -	      endif
   5536  2519					      endif
   5537  2519				   noshiftdown2
      0  2519					      RETURN
      1  2519				  -	      ifnconst	bankswitch
      2  2519				  -	      rts
      3  2519					      else
      4  2519		       4c da ff 	      jmp	BS_return
      5  251c					      endif
   5539  251c
   5540  251c
   5541  251c				   notup
   5542  251c							;down
   5543  251c		       4a		      lsr
   5544  251d		       b0 02		      bcs	oneincup
   5545  251f		       e6 ef		      inc	playfieldpos
   5546  2521				   oneincup
   5547  2521		       e6 ef		      inc	playfieldpos
   5548  2523		       a5 ef		      lda	playfieldpos
   5549  2525
   5550  2525				  -	      ifconst	pfrowheight
   5551  2525				  -	      cmp	#pfrowheight+1
   5552  2525					      else
   5553  2525				  -	      ifnconst	pfres
   5554  2525				  -	      cmp	#9
   5555  2525					      else
   5556  2525		       c9 19		      cmp	#(96/pfres)+1	; try to come close to the real size
   5557  2527					      endif
   5558  2527					      endif
   5559  2527
   5560  2527		       90 4b		      bcc	noshiftdown
   5561  2529		       a9 01		      lda	#1
   5562  252b		       85 ef		      sta	playfieldpos
   5563  252d
   5564  252d					      ifconst	pfres
   5565  252d		       ad ff 10 	      lda	playfield+pfres*4-1
   5566  2530		       85 9f		      sta	temp4
   5567  2532		       ad fe 10 	      lda	playfield+pfres*4-2
   5568  2535		       85 9e		      sta	temp3
   5569  2537		       ad fd 10 	      lda	playfield+pfres*4-3
   5570  253a		       85 9d		      sta	temp2
   5571  253c		       ad fc 10 	      lda	playfield+pfres*4-4
   5572  253f				  -	      else
   5573  253f				  -	      lda	playfield+47
   5574  253f				  -	      sta	temp4
   5575  253f				  -	      lda	playfield+46
   5576  253f				  -	      sta	temp3
   5577  253f				  -	      lda	playfield+45
   5578  253f				  -	      sta	temp2
   5579  253f				  -	      lda	playfield+44
   5580  253f					      endif
   5581  253f
   5582  253f		       85 9c		      sta	temp1
   5583  2541
   5584  2541					      ifconst	pfres
   5585  2541		       a2 0c		      ldx	#(pfres-1)*4
   5586  2543				  -	      else
   5587  2543				  -	      ldx	#44
   5588  2543					      endif
   5589  2543				   down2
   5590  2543		       bd ef 10 	      lda	playfield-1,x
   5591  2546					      ifconst	superchip
   5592  2546		       9d 73 10 	      sta	playfield-125,x
   5593  2549		       bd ee 10 	      lda	playfield-2,x
   5594  254c		       9d 72 10 	      sta	playfield-126,x
   5595  254f		       bd ed 10 	      lda	playfield-3,x
   5596  2552		       9d 71 10 	      sta	playfield-127,x
   5597  2555		       bd ec 10 	      lda	playfield-4,x
   5598  2558		       9d 70 10 	      sta	playfield-128,x
   5599  255b				  -	      else
   5600  255b				  -	      sta	playfield+3,x
   5601  255b				  -	      lda	playfield-2,x
   5602  255b				  -	      sta	playfield+2,x
   5603  255b				  -	      lda	playfield-3,x
   5604  255b				  -	      sta	playfield+1,x
   5605  255b				  -	      lda	playfield-4,x
   5606  255b				  -	      sta	playfield,x
   5607  255b					      endif
   5608  255b		       8a		      txa
   5609  255c		       cb 04		      sbx	#4
   5610  255e		       d0 e3		      bne	down2
   5611  2560
   5612  2560		       a5 9f		      lda	temp4
   5613  2562					      ifconst	superchip
   5614  2562		       8d 73 10 	      sta	playfield-125
   5615  2565		       a5 9e		      lda	temp3
   5616  2567		       8d 72 10 	      sta	playfield-126
   5617  256a		       a5 9d		      lda	temp2
   5618  256c		       8d 71 10 	      sta	playfield-127
   5619  256f		       a5 9c		      lda	temp1
   5620  2571		       8d 70 10 	      sta	playfield-128
   5621  2574				  -	      else
   5622  2574				  -	      sta	playfield+3
   5623  2574				  -	      lda	temp3
   5624  2574				  -	      sta	playfield+2
   5625  2574				  -	      lda	temp2
   5626  2574				  -	      sta	playfield+1
   5627  2574				  -	      lda	temp1
   5628  2574				  -	      sta	playfield
   5629  2574					      endif
   5630  2574				   noshiftdown
      0  2574					      RETURN
      1  2574				  -	      ifnconst	bankswitch
      2  2574				  -	      rts
      3  2574					      else
      4  2574		       4c da ff 	      jmp	BS_return
      5  2577					      endif
   5632  2577							; Provided under the CC0 license. See the included LICENSE.txt for details.
   5633  2577
   5634  2577							;standard routines needed for pretty much all games
   5635  2577							; just the random number generator is left - maybe we should remove this asm file altogether?
   5636  2577							; repositioning code and score pointer setup moved to overscan
   5637  2577							; read switches, joysticks now compiler generated (more efficient)
   5638  2577
   5639  2577				   randomize
   5640  2577		       a5 a2		      lda	rand
   5641  2579		       4a		      lsr
   5642  257a				  -	      ifconst	rand16
   5643  257a				  -	      rol	rand16
   5644  257a					      endif
   5645  257a		       90 02		      bcc	noeor
   5646  257c		       49 b4		      eor	#$B4
   5647  257e				   noeor
   5648  257e		       85 a2		      sta	rand
   5649  2580				  -	      ifconst	rand16
   5650  2580				  -	      eor	rand16
   5651  2580					      endif
      0  2580					      RETURN
      1  2580				  -	      ifnconst	bankswitch
      2  2580				  -	      rts
      3  2580					      else
      4  2580		       4c da ff 	      jmp	BS_return
      5  2583					      endif
   5653  2583							; Provided under the CC0 license. See the included LICENSE.txt for details.
   5654  2583
   5655  2583				   drawscreen
   5656  2583				  -	      ifconst	debugscore
   5657  2583				  -	      ldx	#14
   5658  2583				  -	      lda	INTIM	; display # cycles left in the score
   5659  2583				  -
   5660  2583				  -	      ifconst	mincycles
   5661  2583				  -	      lda	mincycles
   5662  2583				  -	      cmp	INTIM
   5663  2583				  -	      lda	mincycles
   5664  2583				  -	      bcc	nochange
   5665  2583				  -	      lda	INTIM
   5666  2583				  -	      sta	mincycles
   5667  2583				  -nochange
   5668  2583				  -	      endif
   5669  2583				  -
   5670  2583				  -			; cmp #$2B
   5671  2583				  -			; bcs no_cycles_left
   5672  2583				  -	      bmi	cycles_left
   5673  2583				  -	      ldx	#64
   5674  2583				  -	      eor	#$ff	;make negative
   5675  2583				  -cycles_left
   5676  2583				  -	      stx	scorecolor
   5677  2583				  -	      and	#$7f	; clear sign bit
   5678  2583				  -	      tax
   5679  2583				  -	      lda	scorebcd,x
   5680  2583				  -	      sta	score+2
   5681  2583				  -	      lda	scorebcd1,x
   5682  2583				  -	      sta	score+1
   5683  2583				  -	      jmp	done_debugscore
   5684  2583				  -scorebcd
   5685  2583				  -	      .byte	$00, $64, $28, $92, $56, $20, $84, $48, $12, $76, $40
   5686  2583				  -	      .byte	$04, $68, $32, $96, $60, $24, $88, $52, $16, $80, $44
   5687  2583				  -	      .byte	$08, $72, $36, $00, $64, $28, $92, $56, $20, $84, $48
   5688  2583				  -	      .byte	$12, $76, $40, $04, $68, $32, $96, $60, $24, $88
   5689  2583				  -scorebcd1
   5690  2583				  -	      .byte	0, 0, 1, 1, 2, 3, 3, 4, 5, 5, 6
   5691  2583				  -	      .byte	7, 7, 8, 8, 9, $10, $10, $11, $12, $12, $13
   5692  2583				  -	      .byte	$14, $14, $15, $16, $16, $17, $17, $18, $19, $19, $20
   5693  2583				  -	      .byte	$21, $21, $22, $23, $23, $24, $24, $25, $26, $26
   5694  2583				  -done_debugscore
   5695  2583					      endif
   5696  2583
   5697  2583				  -	      ifconst	debugcycles
   5698  2583				  -	      lda	INTIM	; if we go over, it mucks up the background color
   5699  2583				  -			; cmp #$2B
   5700  2583				  -			; BCC overscan
   5701  2583				  -	      bmi	overscan
   5702  2583				  -	      sta	COLUBK
   5703  2583				  -	      bcs	doneoverscan
   5704  2583					      endif
   5705  2583
   5706  2583				   overscan
   5707  2583				  -	      ifconst	interlaced
   5708  2583				  -	      PHP
   5709  2583				  -	      PLA
   5710  2583				  -	      EOR	#4	; flip interrupt bit
   5711  2583				  -	      PHA
   5712  2583				  -	      PLP
   5713  2583				  -	      AND	#4	; isolate the interrupt bit
   5714  2583				  -	      TAX		; save it for later
   5715  2583					      endif
   5716  2583
   5717  2583				   overscanloop
   5718  2583		       ad 84 02 	      lda	INTIM	;wait for sync
   5719  2586		       30 fb		      bmi	overscanloop
   5720  2588				   doneoverscan
   5721  2588
   5722  2588							;do VSYNC
   5723  2588
   5724  2588				  -	      ifconst	interlaced
   5725  2588				  -	      CPX	#4
   5726  2588				  -	      BNE	oddframevsync
   5727  2588					      endif
   5728  2588
   5729  2588		       a9 02		      lda	#2
   5730  258a		       85 02		      sta	WSYNC
   5731  258c		       85 00		      sta	VSYNC
   5732  258e		       85 02		      STA	WSYNC
   5733  2590		       85 02		      STA	WSYNC
   5734  2592		       4a		      lsr
   5735  2593		       85 02		      STA	WSYNC
   5736  2595		       85 00		      STA	VSYNC
   5737  2597		       85 01		      sta	VBLANK
   5738  2599					      ifnconst	overscan_time
   5739  2599		       a9 a5		      lda	#37+128
   5740  259b				  -	      else
   5741  259b				  -	      lda	#overscan_time+128
   5742  259b					      endif
   5743  259b		       8d 96 02 	      sta	TIM64T
   5744  259e
   5745  259e				  -	      ifconst	interlaced
   5746  259e				  -	      jmp	postsync
   5747  259e				  -
   5748  259e				  -oddframevsync
   5749  259e				  -	      sta	WSYNC
   5750  259e				  -
   5751  259e				  -	      LDA	($80,X)	; 11 waste
   5752  259e				  -	      LDA	($80,X)	; 11 waste
   5753  259e				  -	      LDA	($80,X)	; 11 waste
   5754  259e				  -
   5755  259e				  -	      lda	#2
   5756  259e				  -	      sta	VSYNC
   5757  259e				  -	      sta	WSYNC
   5758  259e				  -	      sta	WSYNC
   5759  259e				  -	      sta	WSYNC
   5760  259e				  -
   5761  259e				  -	      LDA	($80,X)	; 11 waste
   5762  259e				  -	      LDA	($80,X)	; 11 waste
   5763  259e				  -	      LDA	($80,X)	; 11 waste
   5764  259e				  -
   5765  259e				  -	      lda	#0
   5766  259e				  -	      sta	VSYNC
   5767  259e				  -	      sta	VBLANK
   5768  259e				  -	      ifnconst	overscan_time
   5769  259e				  -	      lda	#37+128
   5770  259e				  -	      else
   5771  259e				  -	      lda	#overscan_time+128
   5772  259e				  -	      endif
   5773  259e				  -	      sta	TIM64T
   5774  259e				  -
   5775  259e				  -postsync
   5776  259e					      endif
   5777  259e
   5778  259e				  -	      ifconst	legacy
   5779  259e				  -	      if	legacy < 100
   5780  259e				  -	      ldx	#4
   5781  259e				  -adjustloop
   5782  259e				  -	      lda	player0x,x
   5783  259e				  -	      sec
   5784  259e				  -	      sbc	#14	;?
   5785  259e				  -	      sta	player0x,x
   5786  259e				  -	      dex
   5787  259e				  -	      bpl	adjustloop
   5788  259e				  -	      endif
   5789  259e					      endif
   5790  259e				  -	      if	((<*)>$e9)&&((<*)<$fa)
   5791  259e				  -	      repeat	($fa-(<*))
   5792  259e				  -	      nop
   5793  259e				  -	      repend
   5794  259e					      endif
   5795  259e		       85 02		      sta	WSYNC
   5796  25a0		       a2 04		      ldx	#4
      0  25a2					      SLEEP	3
      1  25a2				   .CYCLES    SET	3
      2  25a2
      3  25a2				  -	      IF	.CYCLES < 2
      4  25a2				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  25a2				  -	      ERR
      6  25a2					      ENDIF
      7  25a2
      8  25a2					      IF	.CYCLES & 1
      9  25a2					      IFNCONST	NO_ILLEGAL_OPCODES
     10  25a2		       04 00		      nop	0
     11  25a4				  -	      ELSE
     12  25a4				  -	      bit	VSYNC
     13  25a4					      ENDIF
     14  25a4				   .CYCLES    SET	.CYCLES - 3
     15  25a4					      ENDIF
     16  25a4
     17  25a4				  -	      REPEAT	.CYCLES / 2
     18  25a4				  -	      nop
     19  25a4					      REPEND
   5798  25a4				   HorPosLoop		; 5
   5799  25a4		       b5 80		      lda	player0x,X	;+4 9
   5800  25a6		       38		      sec		;+2 11
   5801  25a7				   DivideLoop
   5802  25a7		       e9 0f		      sbc	#15
   5803  25a9		       b0 fc		      bcs	DivideLoop	;+4 15
   5804  25ab		       95 9c		      sta	temp1,X	;+4 19
   5805  25ad		       95 10		      sta	RESP0,X	;+4 23
   5806  25af		       85 02		      sta	WSYNC
   5807  25b1		       ca		      dex
   5808  25b2		       10 f0		      bpl	HorPosLoop	;+5 5
   5809  25b4							; 4
   5810  25b4
   5811  25b4		       a2 04		      ldx	#4
   5812  25b6		       b4 9c		      ldy	temp1,X
   5813  25b8		       b9 14 f5 	      lda	repostable-256,Y
   5814  25bb		       95 20		      sta	HMP0,X	;+14 18
   5815  25bd
   5816  25bd		       ca		      dex
   5817  25be		       b4 9c		      ldy	temp1,X
   5818  25c0		       b9 14 f5 	      lda	repostable-256,Y
   5819  25c3		       95 20		      sta	HMP0,X	;+14 32
   5820  25c5
   5821  25c5		       ca		      dex
   5822  25c6		       b4 9c		      ldy	temp1,X
   5823  25c8		       b9 14 f5 	      lda	repostable-256,Y
   5824  25cb		       95 20		      sta	HMP0,X	;+14 46
   5825  25cd
   5826  25cd		       ca		      dex
   5827  25ce		       b4 9c		      ldy	temp1,X
   5828  25d0		       b9 14 f5 	      lda	repostable-256,Y
   5829  25d3		       95 20		      sta	HMP0,X	;+14 60
   5830  25d5
   5831  25d5		       ca		      dex
   5832  25d6		       b4 9c		      ldy	temp1,X
   5833  25d8		       b9 14 f5 	      lda	repostable-256,Y
   5834  25db		       95 20		      sta	HMP0,X	;+14 74
   5835  25dd
   5836  25dd		       85 02		      sta	WSYNC
   5837  25df
   5838  25df		       85 2a		      sta	HMOVE	;+3 3
   5839  25e1
   5840  25e1
   5841  25e1				  -	      ifconst	legacy
   5842  25e1				  -	      if	legacy < 100
   5843  25e1				  -	      ldx	#4
   5844  25e1				  -adjustloop2
   5845  25e1				  -	      lda	player0x,x
   5846  25e1				  -	      clc
   5847  25e1				  -	      adc	#14	;?
   5848  25e1				  -	      sta	player0x,x
   5849  25e1				  -	      dex
   5850  25e1				  -	      bpl	adjustloop2
   5851  25e1				  -	      endif
   5852  25e1					      endif
   5853  25e1
   5854  25e1
   5855  25e1
   5856  25e1
   5857  25e1							;set score pointers
   5858  25e1		       a7 95		      lax	score+2
   5859  25e3		       20 14 f6 	      jsr	scorepointerset
   5860  25e6		       84 9b		      sty	scorepointers+5
   5861  25e8		       86 98		      stx	scorepointers+2
   5862  25ea		       a7 94		      lax	score+1
   5863  25ec		       20 14 f6 	      jsr	scorepointerset
   5864  25ef		       84 9a		      sty	scorepointers+4
   5865  25f1		       86 97		      stx	scorepointers+1
   5866  25f3		       a7 93		      lax	score
   5867  25f5		       20 14 f6 	      jsr	scorepointerset
   5868  25f8		       84 99		      sty	scorepointers+3
   5869  25fa		       86 96		      stx	scorepointers
   5870  25fc
   5871  25fc				   vblk
   5872  25fc							; run possible vblank bB code
   5873  25fc				  -	      ifconst	vblank_bB_code
   5874  25fc				  -	      jsr	vblank_bB_code
   5875  25fc					      endif
   5876  25fc				   vblk2
   5877  25fc		       ad 84 02 	      LDA	INTIM
   5878  25ff		       30 fb		      bmi	vblk2
   5879  2601		       4c 00 f1 	      jmp	kernel
   5880  2604
   5881  2604
   5882  2604		       80 70 60 50*	      .byte.b	$80,$70,$60,$50,$40,$30,$20,$10,$00
   5883  260d		       f0 e0 d0 c0*	      .byte.b	$F0,$E0,$D0,$C0,$B0,$A0,$90
   5884  2614				   repostable
   5885  2614
   5886  2614				   scorepointerset
   5887  2614		       29 0f		      and	#$0F
   5888  2616		       0a		      asl
   5889  2617		       0a		      asl
   5890  2618		       0a		      asl
   5891  2619		       69 71		      adc	#<scoretable
   5892  261b		       a8		      tay
   5893  261c		       8a		      txa
   5894  261d							; and #$F0
   5895  261d							; lsr
   5896  261d		       4b f0		      asr	#$F0
   5897  261f		       69 71		      adc	#<scoretable
   5898  2621		       aa		      tax
   5899  2622		       60		      rts
   5900  2623							;bB.asm
   5901  2623							; bB.asm file is split here
   5902  2623				   .
   5903  2623							; 
   5904  2623
   5905  2623				   .L0500		;  asm
   5906  2623
   5907  2623				   minikernel
   5908  2623
   5909  2623		       85 02		      sta	WSYNC
   5910  2625
   5911  2625		       a5 08		      lda	scback
   5912  2627
   5913  2627		       85 09		      sta	COLUBK
   5914  2629
   5915  2629		       60		      rts
   5916  262a
   5917  262a				  -	      if	(<*) > (<(*+7))
   5918  262a				  -	      repeat	($100-<*)
   5919  262a				  -	      .byte	0
   5920  262a				  -	      repend
   5921  262a					      endif
   5922  262a				   playercolorL0246_1
   5923  262a		       1e		      .byte.b	_1E
   5924  262b		       82		      .byte.b	_82
   5925  262c		       84		      .byte.b	_84
   5926  262d		       46		      .byte.b	_46
   5927  262e		       44		      .byte.b	_44
   5928  262f		       42		      .byte.b	_42
   5929  2630		       12		      .byte.b	_12
   5930  2631		       08		      .byte.b	_08
   5931  2632				  -	      if	(<*) > (<(*+7))
   5932  2632				  -	      repeat	($100-<*)
   5933  2632				  -	      .byte	0
   5934  2632				  -	      repend
   5935  2632					      endif
   5936  2632				   player2then_1
   5937  2632		       1b		      .byte.b	%00011011
   5938  2633		       0e		      .byte.b	%00001110
   5939  2634		       1f		      .byte.b	%00011111
   5940  2635		       bd		      .byte.b	%10111101
   5941  2636		       f9		      .byte.b	%11111001
   5942  2637		       9e		      .byte.b	%10011110
   5943  2638		       08		      .byte.b	%00001000
   5944  2639		       7c		      .byte.b	%01111100
   5945  263a				  -	      if	(<*) > (<(*+7))
   5946  263a				  -	      repeat	($100-<*)
   5947  263a				  -	      .byte	0
   5948  263a				  -	      repend
   5949  263a					      endif
   5950  263a				   player3then_1
   5951  263a		       1b		      .byte.b	%00011011
   5952  263b		       0e		      .byte.b	%00001110
   5953  263c		       1f		      .byte.b	%00011111
   5954  263d		       bd		      .byte.b	%10111101
   5955  263e		       f9		      .byte.b	%11111001
   5956  263f		       9e		      .byte.b	%10011110
   5957  2640		       08		      .byte.b	%00001000
   5958  2641		       1f		      .byte.b	%00011111
   5959  2642				  -	      if	(<*) > (<(*+6))
   5960  2642				  -	      repeat	($100-<*)
   5961  2642				  -	      .byte	0
   5962  2642				  -	      repend
   5963  2642					      endif
   5964  2642				   player4then_0
   5965  2642		       55		      .byte.b	%01010101
   5966  2643		       aa		      .byte.b	%10101010
   5967  2644		       ff		      .byte.b	%11111111
   5968  2645		       3c		      .byte.b	%00111100
   5969  2646		       18		      .byte.b	%00011000
   5970  2647		       08		      .byte.b	%00001000
   5971  2648		       04		      .byte.b	%00000100
   5972  2649				  -	      if	(<*) > (<(*+6))
   5973  2649				  -	      repeat	($100-<*)
   5974  2649				  -	      .byte	0
   5975  2649				  -	      repend
   5976  2649					      endif
   5977  2649				   player5then_0
   5978  2649		       aa		      .byte.b	%10101010
   5979  264a		       55		      .byte.b	%01010101
   5980  264b		       ff		      .byte.b	%11111111
   5981  264c		       3c		      .byte.b	%00111100
   5982  264d		       18		      .byte.b	%00011000
   5983  264e		       08		      .byte.b	%00001000
   5984  264f		       04		      .byte.b	%00000100
   5985  2650				  -	      if	(<*) > (<(*+11))
   5986  2650				  -	      repeat	($100-<*)
   5987  2650				  -	      .byte	0
   5988  2650				  -	      repend
   5989  2650					      endif
   5990  2650				   playerL0267_0
   5991  2650		       a0		      .byte.b	%10100000
   5992  2651		       40		      .byte.b	%01000000
   5993  2652		       e0		      .byte.b	%11100000
   5994  2653		       a0		      .byte.b	%10100000
   5995  2654		       40		      .byte.b	%01000000
   5996  2655		       00		      .byte.b	%00000000
   5997  2656		       00		      .byte.b	%00000000
   5998  2657		       05		      .byte.b	%00000101
   5999  2658		       02		      .byte.b	%00000010
   6000  2659		       07		      .byte.b	%00000111
   6001  265a		       05		      .byte.b	%00000101
   6002  265b		       02		      .byte.b	%00000010
   6003  265c				  -	      if	(<*) > (<(*+24))
   6004  265c				  -	      repeat	($100-<*)
   6005  265c				  -	      .byte	0
   6006  265c				  -	      repend
   6007  265c					      endif
   6008  265c				   playerL0269_0
   6009  265c		       38		      .byte.b	%00111000
   6010  265d		       20		      .byte.b	%00100000
   6011  265e		       20		      .byte.b	%00100000
   6012  265f		       20		      .byte.b	%00100000
   6013  2660		       20		      .byte.b	%00100000
   6014  2661		       00		      .byte.b	%00000000
   6015  2662		       38		      .byte.b	%00111000
   6016  2663		       20		      .byte.b	%00100000
   6017  2664		       30		      .byte.b	%00110000
   6018  2665		       20		      .byte.b	%00100000
   6019  2666		       38		      .byte.b	%00111000
   6020  2667		       00		      .byte.b	%00000000
   6021  2668		       10		      .byte.b	%00010000
   6022  2669		       28		      .byte.b	%00101000
   6023  266a		       28		      .byte.b	%00101000
   6024  266b		       28		      .byte.b	%00101000
   6025  266c		       28		      .byte.b	%00101000
   6026  266d		       00		      .byte.b	%00000000
   6027  266e		       20		      .byte.b	%00100000
   6028  266f		       20		      .byte.b	%00100000
   6029  2670		       30		      .byte.b	%00110000
   6030  2671		       20		      .byte.b	%00100000
   6031  2672		       ba		      .byte.b	%10111010
   6032  2673		       82		      .byte.b	%10000010
   6033  2674		       fe		      .byte.b	%11111110
   6034  2675				  -	      if	(<*) > (<(*+3))
   6035  2675				  -	      repeat	($100-<*)
   6036  2675				  -	      .byte	0
   6037  2675				  -	      repend
   6038  2675					      endif
   6039  2675				   player6then_0
   6040  2675		       a6		      .byte.b	%10100110
   6041  2676		       42		      .byte.b	%01000010
   6042  2677		       63		      .byte.b	%01100011
   6043  2678		       42		      .byte.b	%01000010
   6044  2679				  -	      if	(<*) > (<(*+3))
   6045  2679				  -	      repeat	($100-<*)
   6046  2679				  -	      .byte	0
   6047  2679				  -	      repend
   6048  2679					      endif
   6049  2679				   player7then_0
   6050  2679		       c5		      .byte.b	%11000101
   6051  267a		       42		      .byte.b	%01000010
   6052  267b		       63		      .byte.b	%01100011
   6053  267c		       42		      .byte.b	%01000010
   6054  267d					      if	ECHOFIRST
      2292 bytes of ROM space left in bank 2
   6055  267d					      echo	"    ",[(scoretable - *)]d , "bytes of ROM space left in bank 2")
   6056  267d					      endif
   6057  267d		       00 01	   ECHOFIRST  =	1
   6058  267d
   6059  267d
   6060  267d							; Provided under the CC0 license. See the included LICENSE.txt for details.
   6061  267d
   6062  267d							; feel free to modify the score graphics - just keep each digit 8 high
   6063  267d							; and keep the conditional compilation stuff intact
   6064  267d				  -	      ifconst	ROM2k
   6065  267d				  -	      ifconst	PlusROM_functions
   6066  267d				  -	      ORG	$F7AC-16
   6067  267d				  -	      else
   6068  267d				  -	      ORG	$F7AC-8
   6069  267d				  -	      endif
   6070  267d					      else
   6071  267d					      ifconst	bankswitch
   6072  267d					      if	bankswitch == 8
   6073  2f71					      ORG	$2F94-bscode_length
   6074  2f71					      RORG	$FF94-bscode_length
   6075  2f71					      endif
   6076  2f71				  -	      if	bankswitch == 16
   6077  2f71				  -	      ORG	$4F94-bscode_length
   6078  2f71				  -	      RORG	$FF94-bscode_length
   6079  2f71					      endif
   6080  2f71				  -	      if	bankswitch == 32
   6081  2f71				  -	      ORG	$8F94-bscode_length
   6082  2f71				  -	      RORG	$FF94-bscode_length
   6083  2f71					      endif
   6084  2f71				  -	      if	bankswitch == 64
   6085  2f71				  -	      ORG	$10F80-bscode_length
   6086  2f71				  -	      RORG	$1FF80-bscode_length
   6087  2f71					      endif
   6088  2f71				  -	      else
   6089  2f71				  -	      ifconst	PlusROM_functions
   6090  2f71				  -	      ORG	$FF98
   6091  2f71				  -	      else
   6092  2f71				  -	      ORG	$FF9C
   6093  2f71				  -	      endif
   6094  2f71					      endif
   6095  2f71					      endif
   6096  2f71
   6097  2f71							; font equates
   6098  2f71		       00 01	   .21stcentury =	1
   6099  2f71		       00 02	   alarmclock =	2
   6100  2f71		       00 03	   handwritten =	3
   6101  2f71		       00 04	   interrupted =	4
   6102  2f71		       00 05	   retroputer =	5
   6103  2f71		       00 06	   whimsey    =	6
   6104  2f71		       00 07	   tiny       =	7
   6105  2f71		       00 08	   hex	      =	8
   6106  2f71
   6107  2f71				  -	      ifconst	font
   6108  2f71				  -	      if	font == hex
   6109  2f71				  -	      ORG	. - 48
   6110  2f71				  -	      endif
   6111  2f71					      endif
   6112  2f71
   6113  2f71				   scoretable
   6114  2f71
   6115  2f71				  -	      ifconst	font
   6116  2f71				  -	      if	font == .21stcentury
   6117  2f71				  -	      include	"score_graphics.asm.21stcentury"
   6118  2f71				  -	      endif
   6119  2f71				  -	      if	font == alarmclock
   6120  2f71				  -	      include	"score_graphics.asm.alarmclock"
   6121  2f71				  -	      endif
   6122  2f71				  -	      if	font == handwritten
   6123  2f71				  -	      include	"score_graphics.asm.handwritten"
   6124  2f71				  -	      endif
   6125  2f71				  -	      if	font == interrupted
   6126  2f71				  -	      include	"score_graphics.asm.interrupted"
   6127  2f71				  -	      endif
   6128  2f71				  -	      if	font == retroputer
   6129  2f71				  -	      include	"score_graphics.asm.retroputer"
   6130  2f71				  -	      endif
   6131  2f71				  -	      if	font == whimsey
   6132  2f71				  -	      include	"score_graphics.asm.whimsey"
   6133  2f71				  -	      endif
   6134  2f71				  -	      if	font == tiny
   6135  2f71				  -	      include	"score_graphics.asm.tiny"
   6136  2f71				  -	      endif
   6137  2f71				  -	      if	font == hex
   6138  2f71				  -	      include	"score_graphics.asm.hex"
   6139  2f71				  -	      endif
   6140  2f71					      else		; default font
   6141  2f71
   6142  2f71		       3c		      .byte.b	%00111100
   6143  2f72		       66		      .byte.b	%01100110
   6144  2f73		       66		      .byte.b	%01100110
   6145  2f74		       66		      .byte.b	%01100110
   6146  2f75		       66		      .byte.b	%01100110
   6147  2f76		       66		      .byte.b	%01100110
   6148  2f77		       66		      .byte.b	%01100110
   6149  2f78		       3c		      .byte.b	%00111100
   6150  2f79
   6151  2f79		       7e		      .byte.b	%01111110
   6152  2f7a		       18		      .byte.b	%00011000
   6153  2f7b		       18		      .byte.b	%00011000
   6154  2f7c		       18		      .byte.b	%00011000
   6155  2f7d		       18		      .byte.b	%00011000
   6156  2f7e		       38		      .byte.b	%00111000
   6157  2f7f		       18		      .byte.b	%00011000
   6158  2f80		       08		      .byte.b	%00001000
   6159  2f81
   6160  2f81		       7e		      .byte.b	%01111110
   6161  2f82		       60		      .byte.b	%01100000
   6162  2f83		       60		      .byte.b	%01100000
   6163  2f84		       3c		      .byte.b	%00111100
   6164  2f85		       06		      .byte.b	%00000110
   6165  2f86		       06		      .byte.b	%00000110
   6166  2f87		       46		      .byte.b	%01000110
   6167  2f88		       3c		      .byte.b	%00111100
   6168  2f89
   6169  2f89		       3c		      .byte.b	%00111100
   6170  2f8a		       46		      .byte.b	%01000110
   6171  2f8b		       06		      .byte.b	%00000110
   6172  2f8c		       06		      .byte.b	%00000110
   6173  2f8d		       1c		      .byte.b	%00011100
   6174  2f8e		       06		      .byte.b	%00000110
   6175  2f8f		       46		      .byte.b	%01000110
   6176  2f90		       3c		      .byte.b	%00111100
   6177  2f91
   6178  2f91		       0c		      .byte.b	%00001100
   6179  2f92		       0c		      .byte.b	%00001100
   6180  2f93		       7e		      .byte.b	%01111110
   6181  2f94		       4c		      .byte.b	%01001100
   6182  2f95		       4c		      .byte.b	%01001100
   6183  2f96		       2c		      .byte.b	%00101100
   6184  2f97		       1c		      .byte.b	%00011100
   6185  2f98		       0c		      .byte.b	%00001100
   6186  2f99
   6187  2f99		       3c		      .byte.b	%00111100
   6188  2f9a		       46		      .byte.b	%01000110
   6189  2f9b		       06		      .byte.b	%00000110
   6190  2f9c		       06		      .byte.b	%00000110
   6191  2f9d		       3c		      .byte.b	%00111100
   6192  2f9e		       60		      .byte.b	%01100000
   6193  2f9f		       60		      .byte.b	%01100000
   6194  2fa0		       7e		      .byte.b	%01111110
   6195  2fa1
   6196  2fa1		       3c		      .byte.b	%00111100
   6197  2fa2		       66		      .byte.b	%01100110
   6198  2fa3		       66		      .byte.b	%01100110
   6199  2fa4		       66		      .byte.b	%01100110
   6200  2fa5		       7c		      .byte.b	%01111100
   6201  2fa6		       60		      .byte.b	%01100000
   6202  2fa7		       62		      .byte.b	%01100010
   6203  2fa8		       3c		      .byte.b	%00111100
   6204  2fa9
   6205  2fa9		       30		      .byte.b	%00110000
   6206  2faa		       30		      .byte.b	%00110000
   6207  2fab		       30		      .byte.b	%00110000
   6208  2fac		       18		      .byte.b	%00011000
   6209  2fad		       0c		      .byte.b	%00001100
   6210  2fae		       06		      .byte.b	%00000110
   6211  2faf		       42		      .byte.b	%01000010
   6212  2fb0		       3e		      .byte.b	%00111110
   6213  2fb1
   6214  2fb1		       3c		      .byte.b	%00111100
   6215  2fb2		       66		      .byte.b	%01100110
   6216  2fb3		       66		      .byte.b	%01100110
   6217  2fb4		       66		      .byte.b	%01100110
   6218  2fb5		       3c		      .byte.b	%00111100
   6219  2fb6		       66		      .byte.b	%01100110
   6220  2fb7		       66		      .byte.b	%01100110
   6221  2fb8		       3c		      .byte.b	%00111100
   6222  2fb9
   6223  2fb9		       3c		      .byte.b	%00111100
   6224  2fba		       46		      .byte.b	%01000110
   6225  2fbb		       06		      .byte.b	%00000110
   6226  2fbc		       3e		      .byte.b	%00111110
   6227  2fbd		       66		      .byte.b	%01100110
   6228  2fbe		       66		      .byte.b	%01100110
   6229  2fbf		       66		      .byte.b	%01100110
   6230  2fc0		       3c		      .byte.b	%00111100
   6231  2fc1
   6232  2fc1					      ifnconst	DPC_kernel_options
   6233  2fc1
   6234  2fc1		       00		      .byte.b	%00000000
   6235  2fc2		       00		      .byte.b	%00000000
   6236  2fc3		       00		      .byte.b	%00000000
   6237  2fc4		       00		      .byte.b	%00000000
   6238  2fc5		       00		      .byte.b	%00000000
   6239  2fc6		       00		      .byte.b	%00000000
   6240  2fc7		       00		      .byte.b	%00000000
   6241  2fc8		       00		      .byte.b	%00000000
   6242  2fc9
   6243  2fc9					      endif
   6244  2fc9
   6245  2fc9					      endif
   6246  2fc9
   6247  2fc9				  -	      ifconst	ROM2k
   6248  2fc9				  -	      ifconst	PlusROM_functions
   6249  2fc9				  -	      ORG	$F7F0
   6250  2fc9				  -	      .byte	0	; WriteToBuffer
   6251  2fc9				  -	      .byte	0	; WriteSendBuffer
   6252  2fc9				  -	      .byte	0	; ReceiveBuffer
   6253  2fc9				  -	      .byte	$ff	; ReceiveBufferSize (none zero for detection of PlusROM support)
   6254  2fc9				  -	      ORG	$F7FA
   6255  2fc9				  -	      else
   6256  2fc9				  -	      ORG	$F7FC
   6257  2fc9				  -	      endif
   6258  2fc9					      else
   6259  2fc9					      ifconst	bankswitch
   6260  2fc9					      if	bankswitch == 8
   6261  2fd1					      ORG	$2FF4-bscode_length
   6262  2fd1					      RORG	$FFF4-bscode_length
   6263  2fd1					      endif
   6264  2fd1				  -	      if	bankswitch == 16
   6265  2fd1				  -	      ORG	$4FF4-bscode_length
   6266  2fd1				  -	      RORG	$FFF4-bscode_length
   6267  2fd1					      endif
   6268  2fd1				  -	      if	bankswitch == 32
   6269  2fd1				  -	      ORG	$8FF4-bscode_length
   6270  2fd1				  -	      RORG	$FFF4-bscode_length
   6271  2fd1					      endif
   6272  2fd1				  -	      if	bankswitch == 64
   6273  2fd1				  -	      ORG	$10FE0-bscode_length
   6274  2fd1				  -	      RORG	$1FFE0-bscode_length
   6275  2fd1					      endif
   6276  2fd1				  -	      else
   6277  2fd1				  -	      ifconst	PlusROM_functions
   6278  2fd1				  -	      ORG	$FFF0
   6279  2fd1				  -	      .byte	0	; WriteToBuffer
   6280  2fd1				  -	      .byte	0	; WriteSendBuffer
   6281  2fd1				  -	      .byte	0	; ReceiveBuffer
   6282  2fd1				  -	      .byte	$ff	; ReceiveBufferSize (none zero for detection of PlusROM support)
   6283  2fd1				  -	      ORG	$FFFA
   6284  2fd1				  -	      else
   6285  2fd1				  -	      ORG	$FFFC
   6286  2fd1				  -	      endif
   6287  2fd1					      endif
   6288  2fd1					      endif
   6289  2fd1							; Provided under the CC0 license. See the included LICENSE.txt for details.
   6290  2fd1
   6291  2fd1							; every bank has this stuff at the same place
   6292  2fd1							; this code can switch to/from any bank at any entry point
   6293  2fd1							; and can preserve register values
   6294  2fd1							; note: lines not starting with a space are not placed in all banks
   6295  2fd1							;
   6296  2fd1							; line below tells the compiler how long this is - do not remove
   6297  2fd1							;size=35
   6298  2fd1
   6299  2fd1				   begin_bscode
   6300  2fd1		       a2 ff		      ldx	#$ff
   6301  2fd3				  -	      ifconst	FASTFETCH	; using DPC+
   6302  2fd3				  -	      stx	FASTFETCH
   6303  2fd3					      endif
   6304  2fd3		       9a		      txs
   6305  2fd4				  -	      if	bankswitch == 64
   6306  2fd4				  -	      lda	#(((>(start-1)) & $0F) | $F0)
   6307  2fd4					      else
   6308  2fd4		       a9 f3		      lda	#>(start-1)
   6309  2fd6					      endif
   6310  2fd6		       48		      pha
   6311  2fd7		       a9 51		      lda	#<(start-1)
   6312  2fd9		       48		      pha
   6313  2fda
   6314  2fda				   BS_return
   6315  2fda		       48		      pha
   6316  2fdb		       8a		      txa
   6317  2fdc		       48		      pha
   6318  2fdd		       ba		      tsx
   6319  2fde
   6320  2fde					      if	bankswitch != 64
   6321  2fde		       b5 04		      lda	4,x	; get high byte of return address
   6322  2fe0
   6323  2fe0		       2a		      rol
   6324  2fe1		       2a		      rol
   6325  2fe2		       2a		      rol
   6326  2fe3		       2a		      rol
   6327  2fe4		       29 01		      and	#bs_mask	;1 3 or 7 for F8/F6/F4
   6328  2fe6		       aa		      tax
   6329  2fe7		       e8		      inx
   6330  2fe8				  -	      else
   6331  2fe8				  -	      lda	4,x	; get high byte of return address
   6332  2fe8				  -	      tay
   6333  2fe8				  -	      ora	#$10	; change our bank nibble into a valid rom mirror
   6334  2fe8				  -	      sta	4,x
   6335  2fe8				  -	      tya
   6336  2fe8				  -	      lsr
   6337  2fe8				  -	      lsr
   6338  2fe8				  -	      lsr
   6339  2fe8				  -	      lsr
   6340  2fe8				  -	      tax
   6341  2fe8				  -	      inx
   6342  2fe8					      endif
   6343  2fe8
   6344  2fe8				   BS_jsr
   6345  2fe8		       bd f7 1f 	      lda	bankswitch_hotspot-1,x
   6346  2feb		       68		      pla
   6347  2fec		       aa		      tax
   6348  2fed		       68		      pla
   6349  2fee		       60		      rts
   6350  2fef				  -	      if	((* & $1FFF) > ((bankswitch_hotspot & $1FFF) - 1))
   6351  2fef				  -	      echo	"WARNING: size parameter in banksw.asm too small - the program probably will not work."
   6352  2fef				  -	      echo	"Change to",[(*-begin_bscode+1)&$FF]d,"and try again."
   6353  2fef					      endif
   6354  2fef							; Provided under the CC0 license. See the included LICENSE.txt for details.
   6355  2fef
   6356  2fef					      ifconst	bankswitch
   6357  2fef					      if	bankswitch == 8
   6358  2fef					      ifconst	PlusROM_functions
   6359  2ff0					      ORG	$2FF0
   6360  2ff0					      RORG	$FFF0
   6361  2ff0		       00		      .byte.b	0	; WriteToBuffer
   6362  2ff1		       00		      .byte.b	0	; WriteSendBuffer
   6363  2ff2		       00		      .byte.b	0	; ReceiveBuffer
   6364  2ff3		       ff		      .byte.b	$ff	; ReceiveBufferSize (none zero for detection of PlusROM support)
   6365  2ffa					      ORG	$2FFA
   6366  2ffa					      RORG	$FFFA
   6367  2ffa		       59 1b		      .word.w	(PlusROM_API-$C000)
   6368  2ffc				  -	      else
   6369  2ffc				  -	      ORG	$2FFC
   6370  2ffc				  -	      RORG	$FFFC
   6371  2ffc					      endif
   6372  2ffc					      endif
   6373  2ffc				  -	      if	bankswitch == 16
   6374  2ffc				  -	      ifconst	PlusROM_functions
   6375  2ffc				  -	      ORG	$4FF0
   6376  2ffc				  -	      RORG	$FFF0
   6377  2ffc				  -	      .byte	0	; WriteToBuffer
   6378  2ffc				  -	      .byte	0	; WriteSendBuffer
   6379  2ffc				  -	      .byte	0	; ReceiveBuffer
   6380  2ffc				  -	      .byte	$ff	; ReceiveBufferSize (none zero for detection of PlusROM support)
   6381  2ffc				  -	      ORG	$4FFA
   6382  2ffc				  -	      RORG	$FFFA
   6383  2ffc				  -	      .word	(PlusROM_API-$9000)
   6384  2ffc				  -	      else
   6385  2ffc				  -	      ORG	$4FFC
   6386  2ffc				  -	      RORG	$FFFC
   6387  2ffc				  -	      endif
   6388  2ffc					      endif
   6389  2ffc				  -	      if	bankswitch == 32
   6390  2ffc				  -	      ifconst	PlusROM_functions
   6391  2ffc				  -	      ORG	$8FF0
   6392  2ffc				  -	      RORG	$FFF0
   6393  2ffc				  -	      .byte	0	; WriteToBuffer
   6394  2ffc				  -	      .byte	0	; WriteSendBuffer
   6395  2ffc				  -	      .byte	0	; ReceiveBuffer
   6396  2ffc				  -	      .byte	$ff	; ReceiveBufferSize (none zero for detection of PlusROM support)
   6397  2ffc				  -	      ORG	$8FFA
   6398  2ffc				  -	      RORG	$FFFA
   6399  2ffc				  -	      .word	(PlusROM_API-$5000)
   6400  2ffc				  -	      else
   6401  2ffc				  -	      ORG	$8FFC
   6402  2ffc				  -	      RORG	$FFFC
   6403  2ffc				  -	      endif
   6404  2ffc					      endif
   6405  2ffc				  -	      if	bankswitch == 64
   6406  2ffc				  -	      ORG	$10FF0
   6407  2ffc				  -	      RORG	$1FFF0
   6408  2ffc				  -	      lda	$ffe0	; we use wasted space to assist stella with EF format auto-detection
   6409  2ffc				  -	      ORG	$10FF8
   6410  2ffc				  -	      RORG	$1FFF8
   6411  2ffc				  -	      ifconst	superchip
   6412  2ffc				  -	      .byte	"E","F","S","C"
   6413  2ffc				  -	      else
   6414  2ffc				  -	      .byte	"E","F","E","F"
   6415  2ffc				  -	      endif
   6416  2ffc				  -	      ORG	$10FFC
   6417  2ffc				  -	      RORG	$1FFFC
   6418  2ffc					      endif
   6419  2ffc				  -	      else
   6420  2ffc				  -	      ifconst	ROM2k
   6421  2ffc				  -	      ifconst	PlusROM_functions
   6422  2ffc				  -	      ORG	$F7FA
   6423  2ffc				  -	      .word	(PlusROM_API-$E000)
   6424  2ffc				  -	      else
   6425  2ffc				  -	      ORG	$F7FC
   6426  2ffc				  -	      endif
   6427  2ffc				  -	      else
   6428  2ffc				  -	      ifconst	PlusROM_functions
   6429  2ffc				  -	      ORG	$FFFA
   6430  2ffc				  -	      .word	(PlusROM_API-$E000)
   6431  2ffc				  -	      else
   6432  2ffc				  -	      ORG	$FFFC
   6433  2ffc				  -	      endif
   6434  2ffc				  -	      endif
   6435  2ffc					      endif
   6436  2ffc		       52 f3		      .word.w	(start & $ffff)
   6437  2ffe		       52 f3		      .word.w	(start & $ffff)
