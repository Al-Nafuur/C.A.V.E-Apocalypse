------- FILE d:\Firmaplus\Firmaplus_intern\Atari\PlusROM\Projekte-batariBasic\CaveApocalypse\C.A.V.E. Apocalypse.bas.asm LEVEL 1 PASS 3
      1  5000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  5000 ????
      3  5000 ????				      processor	6502
------- FILE vcs.h LEVEL 2 PASS 3
      0  5000 ????				      include	"vcs.h"
      1  5000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  5000 ????
      3  5000 ????						; VCS.H
      4  5000 ????						; Version 1.05, 13/November/2003
      5  5000 ????
      6  5000 ????	       00 69	   VERSION_VCS =	105
      7  5000 ????
      8  5000 ????						; THIS IS A PRELIMINARY RELEASE OF *THE* "STANDARD" VCS.H
      9  5000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
     10  5000 ????						; PLEASE DO *NOT* REDISTRIBUTE THIS FILE!
     11  5000 ????						;
     12  5000 ????						; This file defines hardware registers and memory mapping for the
     13  5000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     14  5000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     15  5000 ????						; available at at http://www.atari2600.org/dasm
     16  5000 ????						;
     17  5000 ????						; Many thanks to the original author(s) of this file, and to everyone who has
     18  5000 ????						; contributed to understanding the Atari 2600.  If you take issue with the
     19  5000 ????						; contents, or naming of registers, please write to me (atari2600@taswegian.com)
     20  5000 ????						; with your views.  Please contribute, if you think you can improve this
     21  5000 ????						; file!
     22  5000 ????						;
     23  5000 ????						; Latest Revisions...
     24  5000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     25  5000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     26  5000 ????						;			    This will allow conditional code to verify VCS.H being
     27  5000 ????						;			    used for code assembly.
     28  5000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     29  5000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     30  5000 ????						;			 mirrored reading/writing differences.	This is more a 
     31  5000 ????						;			 readability issue, and binary compatibility with disassembled
     32  5000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     33  5000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     34  5000 ????						;			 which was broken by the use of segments in this file, as
     35  5000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     36  5000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     37  5000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     38  5000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     39  5000 ????						;						   it is safe to leave it undefined, and the base address will
     40  5000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     41  5000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     42  5000 ????						;			  - register definitions are now generated through assignment
     43  5000 ????						;			    in uninitialised segments.	This allows a changeable base
     44  5000 ????						;			    address architecture.
     45  5000 ????						; 1.0	22/MAR/2003		Initial release
     46  5000 ????
     47  5000 ????
     48  5000 ????						;-------------------------------------------------------------------------------
     49  5000 ????
     50  5000 ????						; TIA_BASE_ADDRESS
     51  5000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     52  5000 ????						; Normally 0, the base address should (externally, before including this file)
     53  5000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     54  5000 ????						; The reason is that this bankswitching scheme treats any access to locations
     55  5000 ????						; < $40 as a bankswitch.
     56  5000 ????
     57  5000 ????			  -	      IFNCONST	TIA_BASE_ADDRESS
     58  5000 ????			  -TIA_BASE_ADDRESS =	0
     59  5000 ????				      ENDIF
     60  5000 ????
     61  5000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     62  5000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     63  5000 ????						; *OR* by declaring the label before including this file, eg:
     64  5000 ????						; TIA_BASE_ADDRESS = $40
     65  5000 ????						;   include "vcs.h"
     66  5000 ????
     67  5000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     68  5000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     69  5000 ????						; for the mirrored ROM hardware registers.
     70  5000 ????
     71  5000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     72  5000 ????						; using the -D command-line switch, as required.  If the addresses are not defined, 
     73  5000 ????						; they defaut to the TIA_BASE_ADDRESS.
     74  5000 ????
     75  5000 ????			  -	      IFNCONST	TIA_BASE_READ_ADDRESS
     76  5000 ????			  -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     77  5000 ????				      ENDIF
     78  5000 ????
     79  5000 ????			  -	      IFNCONST	TIA_BASE_WRITE_ADDRESS
     80  5000 ????			  -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     81  5000 ????				      ENDIF
     82  5000 ????
     83  5000 ????						;-------------------------------------------------------------------------------
     84  5000 ????
     85 U002d ????				      SEG.U	TIA_REGISTERS_WRITE
     86 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     87 U0000
     88 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     89 U0000
     90 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     91 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     92 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     93 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     94 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     95 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     96 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     97 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     98 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     99 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
    100 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
    101 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    102 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    103 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    104 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    105 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    106 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    107 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    108 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    109 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    110 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    111 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    112 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    113 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    114 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    115 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    116 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    117 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    118 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    119 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    120 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    121 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    122 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    123 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    124 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    125 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    126 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    127 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    128 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    129 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    130 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    131 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    132 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    133 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    134 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    135 U002d
    136 U002d							;-------------------------------------------------------------------------------
    137 U002d
    138 U000e ????				      SEG.U	TIA_REGISTERS_READ
    139 U0000					      ORG	TIA_BASE_READ_ADDRESS
    140 U0000
    141 U0000							;											bit 7	 bit 6
    142 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    143 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    144 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    145 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    146 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    147 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    148 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    149 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    150 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    151 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    152 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    153 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    154 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    155 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    156 U000e
    157 U000e							;-------------------------------------------------------------------------------
    158 U000e
    159 U0298 ????				      SEG.U	RIOT
    160 U0280					      ORG	$280
    161 U0280
    162 U0280							; RIOT MEMORY MAP
    163 U0280
    164 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    165 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    166 U0281
    167 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    168 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    169 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    170 U0284		       00	   INTIM      ds	1	; $284		Timer output
    171 U0285
    172 U0285		       00	   TIMINT     ds	1	; $285
    173 U0286
    174 U0286							; Unused/undefined registers ($285-$294)
    175 U0286
    176 U0286		       00		      ds	1	; $286
    177 U0287		       00		      ds	1	; $287
    178 U0288		       00		      ds	1	; $288
    179 U0289		       00		      ds	1	; $289
    180 U028a		       00		      ds	1	; $28A
    181 U028b		       00		      ds	1	; $28B
    182 U028c		       00		      ds	1	; $28C
    183 U028d		       00		      ds	1	; $28D
    184 U028e		       00		      ds	1	; $28E
    185 U028f		       00		      ds	1	; $28F
    186 U0290		       00		      ds	1	; $290
    187 U0291		       00		      ds	1	; $291
    188 U0292		       00		      ds	1	; $292
    189 U0293		       00		      ds	1	; $293
    190 U0294
    191 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    192 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    193 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    194 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    195 U0298
    196 U0298							;-------------------------------------------------------------------------------
    197 U0298							; The following required for back-compatibility with code which does not use
    198 U0298							; segments.
    199 U0298
    200  5000 ????				      SEG
    201  5000 ????
    202  5000 ????						; EOF
------- FILE d:\Firmaplus\Firmaplus_intern\Atari\PlusROM\Projekte-batariBasic\CaveApocalypse\C.A.V.E. Apocalypse.bas.asm
------- FILE macro.h LEVEL 2 PASS 3
      0  5000 ????				      include	"macro.h"
      1  5000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  5000 ????
      3  5000 ????						; MACRO.H
      4  5000 ????						; Version 1.05, 13/NOVEMBER/2003
      5  5000 ????
      6  5000 ????	       00 69	   VERSION_MACRO =	105
      7  5000 ????
      8  5000 ????						;
      9  5000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
     10  5000 ????						; PLEASE DO *NOT* REDISTRIBUTE MODIFIED VERSIONS OF THIS FILE!
     11  5000 ????						;
     12  5000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     13  5000 ????						; It is distributed as a companion machine-specific support package
     14  5000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     15  5000 ????						; available at at http://www.atari2600.org/dasm
     16  5000 ????						;
     17  5000 ????						; Many thanks to the people who have contributed.  If you take issue with the
     18  5000 ????						; contents, or would like to add something, please write to me
     19  5000 ????						; (atari2600@taswegian.com) with your contribution.
     20  5000 ????						;
     21  5000 ????						; Latest Revisions...
     22  5000 ????						;
     23  5000 ????						; 1.05  14/NOV/2003	  - Added VERSION_MACRO equate (which will reflect 100x version #)
     24  5000 ????						;			    This will allow conditional code to verify MACRO.H being
     25  5000 ????						;			    used for code assembly.
     26  5000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     27  5000 ????						;
     28  5000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     29  5000 ????						;
     30  5000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     31  5000 ????						;			   (standardised macro for vertical synch code)
     32  5000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added. 
     33  5000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     34  5000 ????						; 1.0	22/MAR/2003		Initial release
     35  5000 ????
     36  5000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage, 
     37  5000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     38  5000 ????						;   If you do not allow illegal opcode usage, you must include this file 
     39  5000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     40  5000 ????						;   registers and require them to be defined first).
     41  5000 ????
     42  5000 ????						; Available macros...
     43  5000 ????						;   SLEEP n		 - sleep for n cycles
     44  5000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     45  5000 ????						;   CLEAN_START	 - set machine to known state on startup
     46  5000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     47  5000 ????
     48  5000 ????						;-------------------------------------------------------------------------------
     49  5000 ????						; SLEEP duration
     50  5000 ????						; Original author: Thomas Jentzsch
     51  5000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     52  5000 ????						; useful for code where precise timing is required.
     53  5000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     54  5000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     55  5000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     56  5000 ????
     57  5000 ????				      MAC	sleep
     58  5000 ????			   .CYCLES    SET	{1}
     59  5000 ????
     60  5000 ????				      IF	.CYCLES < 2
     61  5000 ????				      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     62  5000 ????				      ERR
     63  5000 ????				      ENDIF
     64  5000 ????
     65  5000 ????				      IF	.CYCLES & 1
     66  5000 ????				      IFNCONST	NO_ILLEGAL_OPCODES
     67  5000 ????				      nop	0
     68  5000 ????				      ELSE
     69  5000 ????				      bit	VSYNC
     70  5000 ????				      ENDIF
     71  5000 ????			   .CYCLES    SET	.CYCLES - 3
     72  5000 ????				      ENDIF
     73  5000 ????
     74  5000 ????				      REPEAT	.CYCLES / 2
     75  5000 ????				      nop
     76  5000 ????				      REPEND
     77  5000 ????				      ENDM		;usage: SLEEP n (n>1)
     78  5000 ????
     79  5000 ????						;-------------------------------------------------------------------------------
     80  5000 ????						; VERTICAL_SYNC
     81  5000 ????						; Original author: Manuel Polik
     82  5000 ????						; Inserts the code required for a proper 3 scannline 
     83  5000 ????						; vertical sync sequence
     84  5000 ????						;
     85  5000 ????						; Note: Alters the accumulator
     86  5000 ????						;
     87  5000 ????						; IN:
     88  5000 ????						; OUT: A = 1
     89  5000 ????
     90  5000 ????				      MAC	vertical_sync
     91  5000 ????				      LDA	#$02	; A = VSYNC enable
     92  5000 ????				      STA	WSYNC	; Finish current line
     93  5000 ????				      STA	VSYNC	; Start vertical sync
     94  5000 ????				      STA	WSYNC	; 1st line vertical sync
     95  5000 ????				      STA	WSYNC	; 2nd line vertical sync
     96  5000 ????				      LSR		; A = VSYNC disable
     97  5000 ????				      STA	WSYNC	; 3rd line vertical sync
     98  5000 ????				      STA	VSYNC	; Stop vertical sync
     99  5000 ????				      ENDM
    100  5000 ????
    101  5000 ????						;-------------------------------------------------------------------------------
    102  5000 ????						; CLEAN_START
    103  5000 ????						; Original author: Andrew Davie
    104  5000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
    105  5000 ????						; Sets stack pointer to $FF, and all registers to 0
    106  5000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    107  5000 ????						; Use as very first section of code on boot (ie: at reset)
    108  5000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    109  5000 ????
    110  5000 ????				      MAC	clean_start
    111  5000 ????				      sei
    112  5000 ????				      cld
    113  5000 ????
    114  5000 ????				      ldx	#0
    115  5000 ????				      txa
    116  5000 ????				      tay
    117  5000 ????			   .CLEAR_STACK dex
    118  5000 ????				      txs
    119  5000 ????				      pha
    120  5000 ????				      bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    121  5000 ????
    122  5000 ????				      ENDM
    123  5000 ????
    124  5000 ????						;-------------------------------------------------------
    125  5000 ????						; SET_POINTER
    126  5000 ????						; Original author: Manuel Rotschkar
    127  5000 ????						;
    128  5000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    129  5000 ????						;
    130  5000 ????						; Usage: SET_POINTER pointer, address
    131  5000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    132  5000 ????						;
    133  5000 ????						; Note: Alters the accumulator, NZ flags
    134  5000 ????						; IN 1: 2 byte RAM location reserved for pointer
    135  5000 ????						; IN 2: absolute address
    136  5000 ????
    137  5000 ????				      MAC	set_pointer
    138  5000 ????			   .POINTER   SET	{1}
    139  5000 ????			   .ADDRESS   SET	{2}
    140  5000 ????
    141  5000 ????				      LDA	#<.ADDRESS	; Get Lowbyte of Address
    142  5000 ????				      STA	.POINTER	; Store in pointer
    143  5000 ????				      LDA	#>.ADDRESS	; Get Hibyte of Address
    144  5000 ????				      STA	.POINTER+1	; Store in pointer+1
    145  5000 ????
    146  5000 ????				      ENDM
    147  5000 ????
    148  5000 ????						; EOF
------- FILE d:\Firmaplus\Firmaplus_intern\Atari\PlusROM\Projekte-batariBasic\CaveApocalypse\C.A.V.E. Apocalypse.bas.asm
------- FILE 2600basic.h LEVEL 2 PASS 3
      0  5000 ????				      include	"2600basic.h"
      1  5000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  5000 ????
      3  5000 ????				      processor	6502
------- FILE vcs.h LEVEL 3 PASS 3
      0  5000 ????				      include	"vcs.h"
      1  5000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  5000 ????
      3  5000 ????						; VCS.H
      4  5000 ????						; Version 1.05, 13/November/2003
      5  5000 ????
      6  5000 ????	       00 69	   VERSION_VCS =	105
      7  5000 ????
      8  5000 ????						; THIS IS A PRELIMINARY RELEASE OF *THE* "STANDARD" VCS.H
      9  5000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
     10  5000 ????						; PLEASE DO *NOT* REDISTRIBUTE THIS FILE!
     11  5000 ????						;
     12  5000 ????						; This file defines hardware registers and memory mapping for the
     13  5000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     14  5000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     15  5000 ????						; available at at http://www.atari2600.org/dasm
     16  5000 ????						;
     17  5000 ????						; Many thanks to the original author(s) of this file, and to everyone who has
     18  5000 ????						; contributed to understanding the Atari 2600.  If you take issue with the
     19  5000 ????						; contents, or naming of registers, please write to me (atari2600@taswegian.com)
     20  5000 ????						; with your views.  Please contribute, if you think you can improve this
     21  5000 ????						; file!
     22  5000 ????						;
     23  5000 ????						; Latest Revisions...
     24  5000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     25  5000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     26  5000 ????						;			    This will allow conditional code to verify VCS.H being
     27  5000 ????						;			    used for code assembly.
     28  5000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     29  5000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     30  5000 ????						;			 mirrored reading/writing differences.	This is more a 
     31  5000 ????						;			 readability issue, and binary compatibility with disassembled
     32  5000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     33  5000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     34  5000 ????						;			 which was broken by the use of segments in this file, as
     35  5000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     36  5000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     37  5000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     38  5000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     39  5000 ????						;						   it is safe to leave it undefined, and the base address will
     40  5000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     41  5000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     42  5000 ????						;			  - register definitions are now generated through assignment
     43  5000 ????						;			    in uninitialised segments.	This allows a changeable base
     44  5000 ????						;			    address architecture.
     45  5000 ????						; 1.0	22/MAR/2003		Initial release
     46  5000 ????
     47  5000 ????
     48  5000 ????						;-------------------------------------------------------------------------------
     49  5000 ????
     50  5000 ????						; TIA_BASE_ADDRESS
     51  5000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     52  5000 ????						; Normally 0, the base address should (externally, before including this file)
     53  5000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     54  5000 ????						; The reason is that this bankswitching scheme treats any access to locations
     55  5000 ????						; < $40 as a bankswitch.
     56  5000 ????
     57  5000 ????			  -	      IFNCONST	TIA_BASE_ADDRESS
     58  5000 ????			  -TIA_BASE_ADDRESS =	0
     59  5000 ????				      ENDIF
     60  5000 ????
     61  5000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     62  5000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     63  5000 ????						; *OR* by declaring the label before including this file, eg:
     64  5000 ????						; TIA_BASE_ADDRESS = $40
     65  5000 ????						;   include "vcs.h"
     66  5000 ????
     67  5000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     68  5000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     69  5000 ????						; for the mirrored ROM hardware registers.
     70  5000 ????
     71  5000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     72  5000 ????						; using the -D command-line switch, as required.  If the addresses are not defined, 
     73  5000 ????						; they defaut to the TIA_BASE_ADDRESS.
     74  5000 ????
     75  5000 ????			  -	      IFNCONST	TIA_BASE_READ_ADDRESS
     76  5000 ????			  -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     77  5000 ????				      ENDIF
     78  5000 ????
     79  5000 ????			  -	      IFNCONST	TIA_BASE_WRITE_ADDRESS
     80  5000 ????			  -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     81  5000 ????				      ENDIF
     82  5000 ????
     83  5000 ????						;-------------------------------------------------------------------------------
     84  5000 ????
     85 U002d					      SEG.U	TIA_REGISTERS_WRITE
     86 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     87 U0000
     88 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     89 U0000
     90 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     91 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     92 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     93 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     94 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     95 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     96 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     97 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     98 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     99 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
    100 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
    101 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    102 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    103 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    104 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    105 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    106 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    107 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    108 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    109 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    110 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    111 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    112 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    113 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    114 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    115 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    116 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    117 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    118 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    119 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    120 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    121 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    122 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    123 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    124 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    125 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    126 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    127 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    128 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    129 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    130 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    131 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    132 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    133 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    134 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    135 U002d
    136 U002d							;-------------------------------------------------------------------------------
    137 U002d
    138 U000e					      SEG.U	TIA_REGISTERS_READ
    139 U0000					      ORG	TIA_BASE_READ_ADDRESS
    140 U0000
    141 U0000							;											bit 7	 bit 6
    142 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    143 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    144 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    145 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    146 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    147 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    148 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    149 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    150 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    151 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    152 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    153 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    154 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    155 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    156 U000e
    157 U000e							;-------------------------------------------------------------------------------
    158 U000e
    159 U0298					      SEG.U	RIOT
    160 U0280					      ORG	$280
    161 U0280
    162 U0280							; RIOT MEMORY MAP
    163 U0280
    164 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    165 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    166 U0281
    167 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    168 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    169 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    170 U0284		       00	   INTIM      ds	1	; $284		Timer output
    171 U0285
    172 U0285		       00	   TIMINT     ds	1	; $285
    173 U0286
    174 U0286							; Unused/undefined registers ($285-$294)
    175 U0286
    176 U0286		       00		      ds	1	; $286
    177 U0287		       00		      ds	1	; $287
    178 U0288		       00		      ds	1	; $288
    179 U0289		       00		      ds	1	; $289
    180 U028a		       00		      ds	1	; $28A
    181 U028b		       00		      ds	1	; $28B
    182 U028c		       00		      ds	1	; $28C
    183 U028d		       00		      ds	1	; $28D
    184 U028e		       00		      ds	1	; $28E
    185 U028f		       00		      ds	1	; $28F
    186 U0290		       00		      ds	1	; $290
    187 U0291		       00		      ds	1	; $291
    188 U0292		       00		      ds	1	; $292
    189 U0293		       00		      ds	1	; $293
    190 U0294
    191 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    192 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    193 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    194 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    195 U0298
    196 U0298							;-------------------------------------------------------------------------------
    197 U0298							; The following required for back-compatibility with code which does not use
    198 U0298							; segments.
    199 U0298
    200  5000 ????				      SEG
    201  5000 ????
    202  5000 ????						; EOF
------- FILE 2600basic.h
------- FILE macro.h LEVEL 3 PASS 3
      0  5000 ????				      include	"macro.h"
      1  5000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  5000 ????
      3  5000 ????						; MACRO.H
      4  5000 ????						; Version 1.05, 13/NOVEMBER/2003
      5  5000 ????
      6  5000 ????	       00 69	   VERSION_MACRO =	105
      7  5000 ????
      8  5000 ????						;
      9  5000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
     10  5000 ????						; PLEASE DO *NOT* REDISTRIBUTE MODIFIED VERSIONS OF THIS FILE!
     11  5000 ????						;
     12  5000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     13  5000 ????						; It is distributed as a companion machine-specific support package
     14  5000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     15  5000 ????						; available at at http://www.atari2600.org/dasm
     16  5000 ????						;
     17  5000 ????						; Many thanks to the people who have contributed.  If you take issue with the
     18  5000 ????						; contents, or would like to add something, please write to me
     19  5000 ????						; (atari2600@taswegian.com) with your contribution.
     20  5000 ????						;
     21  5000 ????						; Latest Revisions...
     22  5000 ????						;
     23  5000 ????						; 1.05  14/NOV/2003	  - Added VERSION_MACRO equate (which will reflect 100x version #)
     24  5000 ????						;			    This will allow conditional code to verify MACRO.H being
     25  5000 ????						;			    used for code assembly.
     26  5000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     27  5000 ????						;
     28  5000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     29  5000 ????						;
     30  5000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     31  5000 ????						;			   (standardised macro for vertical synch code)
     32  5000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added. 
     33  5000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     34  5000 ????						; 1.0	22/MAR/2003		Initial release
     35  5000 ????
     36  5000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage, 
     37  5000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     38  5000 ????						;   If you do not allow illegal opcode usage, you must include this file 
     39  5000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     40  5000 ????						;   registers and require them to be defined first).
     41  5000 ????
     42  5000 ????						; Available macros...
     43  5000 ????						;   SLEEP n		 - sleep for n cycles
     44  5000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     45  5000 ????						;   CLEAN_START	 - set machine to known state on startup
     46  5000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     47  5000 ????
     48  5000 ????						;-------------------------------------------------------------------------------
     49  5000 ????						; SLEEP duration
     50  5000 ????						; Original author: Thomas Jentzsch
     51  5000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     52  5000 ????						; useful for code where precise timing is required.
     53  5000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     54  5000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     55  5000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     56  5000 ????
     57  5000 ????				      MAC	sleep
     58  5000 ????			   .CYCLES    SET	{1}
     59  5000 ????
     60  5000 ????				      IF	.CYCLES < 2
     61  5000 ????				      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     62  5000 ????				      ERR
     63  5000 ????				      ENDIF
     64  5000 ????
     65  5000 ????				      IF	.CYCLES & 1
     66  5000 ????				      IFNCONST	NO_ILLEGAL_OPCODES
     67  5000 ????				      nop	0
     68  5000 ????				      ELSE
     69  5000 ????				      bit	VSYNC
     70  5000 ????				      ENDIF
     71  5000 ????			   .CYCLES    SET	.CYCLES - 3
     72  5000 ????				      ENDIF
     73  5000 ????
     74  5000 ????				      REPEAT	.CYCLES / 2
     75  5000 ????				      nop
     76  5000 ????				      REPEND
     77  5000 ????				      ENDM		;usage: SLEEP n (n>1)
     78  5000 ????
     79  5000 ????						;-------------------------------------------------------------------------------
     80  5000 ????						; VERTICAL_SYNC
     81  5000 ????						; Original author: Manuel Polik
     82  5000 ????						; Inserts the code required for a proper 3 scannline 
     83  5000 ????						; vertical sync sequence
     84  5000 ????						;
     85  5000 ????						; Note: Alters the accumulator
     86  5000 ????						;
     87  5000 ????						; IN:
     88  5000 ????						; OUT: A = 1
     89  5000 ????
     90  5000 ????				      MAC	vertical_sync
     91  5000 ????				      LDA	#$02	; A = VSYNC enable
     92  5000 ????				      STA	WSYNC	; Finish current line
     93  5000 ????				      STA	VSYNC	; Start vertical sync
     94  5000 ????				      STA	WSYNC	; 1st line vertical sync
     95  5000 ????				      STA	WSYNC	; 2nd line vertical sync
     96  5000 ????				      LSR		; A = VSYNC disable
     97  5000 ????				      STA	WSYNC	; 3rd line vertical sync
     98  5000 ????				      STA	VSYNC	; Stop vertical sync
     99  5000 ????				      ENDM
    100  5000 ????
    101  5000 ????						;-------------------------------------------------------------------------------
    102  5000 ????						; CLEAN_START
    103  5000 ????						; Original author: Andrew Davie
    104  5000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
    105  5000 ????						; Sets stack pointer to $FF, and all registers to 0
    106  5000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    107  5000 ????						; Use as very first section of code on boot (ie: at reset)
    108  5000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    109  5000 ????
    110  5000 ????				      MAC	clean_start
    111  5000 ????				      sei
    112  5000 ????				      cld
    113  5000 ????
    114  5000 ????				      ldx	#0
    115  5000 ????				      txa
    116  5000 ????				      tay
    117  5000 ????			   .CLEAR_STACK dex
    118  5000 ????				      txs
    119  5000 ????				      pha
    120  5000 ????				      bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    121  5000 ????
    122  5000 ????				      ENDM
    123  5000 ????
    124  5000 ????						;-------------------------------------------------------
    125  5000 ????						; SET_POINTER
    126  5000 ????						; Original author: Manuel Rotschkar
    127  5000 ????						;
    128  5000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    129  5000 ????						;
    130  5000 ????						; Usage: SET_POINTER pointer, address
    131  5000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    132  5000 ????						;
    133  5000 ????						; Note: Alters the accumulator, NZ flags
    134  5000 ????						; IN 1: 2 byte RAM location reserved for pointer
    135  5000 ????						; IN 2: absolute address
    136  5000 ????
    137  5000 ????				      MAC	set_pointer
    138  5000 ????			   .POINTER   SET	{1}
    139  5000 ????			   .ADDRESS   SET	{2}
    140  5000 ????
    141  5000 ????				      LDA	#<.ADDRESS	; Get Lowbyte of Address
    142  5000 ????				      STA	.POINTER	; Store in pointer
    143  5000 ????				      LDA	#>.ADDRESS	; Get Hibyte of Address
    144  5000 ????				      STA	.POINTER+1	; Store in pointer+1
    145  5000 ????
    146  5000 ????				      ENDM
    147  5000 ????
    148  5000 ????						; EOF
------- FILE 2600basic.h
------- FILE 2600basic_variable_redefs.h LEVEL 3 PASS 3
      0  5000 ????				      include	"2600basic_variable_redefs.h"
      1  5000 ????						; This file contains variable mapping and other information for the current project.
      2  5000 ????
      3  5000 ????	       00 fc	   text_strings_length =	.skipL0583-text_strings
      4  5000 ????
      5  5000 ????	       00 23	   bscode_length =	35
      6  5000 ????	       00 b2	   _SD_Music01 =	var14
      7  5000 ????	       00 1d	   _SD_Touch_Enemy_length =	.skipL0542-_SD_Touch_Enemy
      8  5000 ????
      9  5000 ????	       00 21	   _SD_Shoot_Enemy_length =	.skipL0541-_SD_Shoot_Enemy
     10  5000 ????
     11  5000 ????	       00 45	   _SD_Shoot_Miss_length =	.skipL0540-_SD_Shoot_Miss
     12  5000 ????
     13  5000 ????	       00 35	   _SD_Shot_Wall_length =	.skipL0539-_SD_Shot_Wall
     14  5000 ????
     15  5000 ????	       f0 6f	   w_extra_wall_startpos_y =	w111
     16  5000 ????
     17  5000 ????	       f0 ef	   r_extra_wall_startpos_y =	r111
     18  5000 ????
     19  5000 ????	       f0 6e	   w_extra_wall_startpos_x =	w110
     20  5000 ????
     21  5000 ????	       f0 ee	   r_extra_wall_startpos_x =	r110
     22  5000 ????
     23  5000 ????	       f0 6d	   w_extra_wall_height =	w109
     24  5000 ????
     25  5000 ????	       f0 ed	   r_extra_wall_height =	r109
     26  5000 ????
     27  5000 ????	       f0 6c	   w_extra_wall_width =	w108
     28  5000 ????
     29  5000 ????	       f0 ec	   r_extra_wall_width =	r108
     30  5000 ????
     31  5000 ????	       f0 6b	   w_extra_wall_type_and_range =	w107
     32  5000 ????
     33  5000 ????	       f0 eb	   r_extra_wall_type_and_range =	r107
     34  5000 ????
     35  5000 ????	       f0 6a	   w_roommate_startpos_y =	w106
     36  5000 ????
     37  5000 ????	       f0 ea	   r_roommate_startpos_y =	r106
     38  5000 ????
     39  5000 ????	       f0 69	   w_roommate_startpos_x =	w105
     40  5000 ????
     41  5000 ????	       f0 e9	   r_roommate_startpos_x =	r105
     42  5000 ????
     43  5000 ????	       f0 68	   w_roommate_type_and_range =	w104
     44  5000 ????
     45  5000 ????	       f0 e8	   r_roommate_type_and_range =	r104
     46  5000 ????
     47  5000 ????	       f0 67	   w_room_color_bottom =	w103
     48  5000 ????
     49  5000 ????	       f0 e7	   r_room_color_bottom =	r103
     50  5000 ????
     51  5000 ????	       f0 63	   w_room_color_middle =	w099
     52  5000 ????
     53  5000 ????	       f0 e3	   r_room_color_middle =	r099
     54  5000 ????
     55  5000 ????	       f0 62	   w_room_color_top =	w098
     56  5000 ????
     57  5000 ????	       f0 e2	   r_room_color_top =	r098
     58  5000 ????
     59  5000 ????	       f0 61	   w_Bit0_room_type_top =	w097
     60  5000 ????
     61  5000 ????	       f0 e1	   r_Bit0_room_type_top =	r097
     62  5000 ????
     63  5000 ????	       f0 61	   w_BitOp_room_type =	w097
     64  5000 ????
     65  5000 ????	       f0 e1	   r_BitOp_room_type =	r097
     66  5000 ????
     67  5000 ????	       f0 60	   w_men_to_rescue_in_this_level =	w096
     68  5000 ????
     69  5000 ????	       f0 e0	   r_men_to_rescue_in_this_level =	r096
     70  5000 ????
     71  5000 ????	       f0 5f	   w_level_bonus_bcd_points =	w095
     72  5000 ????
     73  5000 ????	       f0 df	   r_level_bonus_bcd_points =	r095
     74  5000 ????
     75  5000 ????	       f0 5f	   w_room_definition_start =	w095
     76  5000 ????
     77  5000 ????	       00 b1	   bonus_bcd_counter =	var13
     78  5000 ????
     79  5000 ????	       00 b0	   TextIndex  =	var12
     80  5000 ????
     81  5000 ????	       00 b0	   men_to_rescue =	var12
     82  5000 ????
     83  5000 ????	       00 af	   ball_shoot_y =	var11
     84  5000 ????
     85  5000 ????	       00 ae	   ball_shoot_x =	var10
     86  5000 ????
     87  5000 ????	       00 ad	   has_private_levels =	var9
     88  5000 ????
     89  5000 ????	       00 ac	   max_priv_level_bcd3 =	var8
     90  5000 ????
     91  5000 ????	       00 ab	   max_priv_level_bcd2 =	var7
     92  5000 ????
     93  5000 ????	       00 aa	   max_priv_level_bcd1 =	var6
     94  5000 ????
     95  5000 ????	       00 a9	   max_pub_level_bcd3 =	var5
     96  5000 ????
     97  5000 ????	       00 a8	   max_pub_level_bcd2 =	var4
     98  5000 ????
     99  5000 ????	       00 a7	   max_pub_level_bcd1 =	var3
    100  5000 ????
    101  5000 ????	       00 a6	   gamenumber =	var2
    102  5000 ????
    103  5000 ????	       00 a5	   new_room_player1x =	var1
    104  5000 ????
    105  5000 ????	       00 a4	   new_room_player1y =	var0
    106  5000 ????
    107  5000 ????	       00 ec	   _Bit7_FireB_Restrainer =	y
    108  5000 ????
    109  5000 ????	       00 ec	   _Bit6_Flip_P1 =	y
    110  5000 ????
    111  5000 ????	       00 ec	   _Bit5_Request_Pending =	y
    112  5000 ????
    113  5000 ????	       00 ec	   _Bit4_Game_Over =	y
    114  5000 ????
    115  5000 ????	       00 ec	   _Bit3_Safe_Point_reached =	y
    116  5000 ????
    117  5000 ????	       00 ec	   _Bit2_Level_finished =	y
    118  5000 ????
    119  5000 ????	       00 ec	   _Bit1_Wall_Dir =	y
    120  5000 ????
    121  5000 ????	       00 ec	   _Bit0_roommate_Dir =	y
    122  5000 ????
    123  5000 ????	       00 ec	   _Bit_Game_State =	y
    124  5000 ????
    125  5000 ????	       00 86	   P1y_position =	player1y
    126  5000 ????	       00 e9	   P1y_velocity =	v
    127  5000 ????	       00 91	   M0y_position =	missile0y
    128  5000 ????	       00 e6	   M0y_velocity =	s
    129  5000 ????	       00 af	   Bally_position =	ball_shoot_y
    130  5000 ????	       00 e3	   Bally_velocity =	p
    131  5000 ????	       00 e2	   _Ch1_Duration =	o
    132  5000 ????
    133  5000 ????	       00 e1	   Safe_Point_P1_y =	n
    134  5000 ????
    135  5000 ????	       00 e0	   Safe_Point_P1_x =	m
    136  5000 ????
    137  5000 ????	       00 df	   _Bit1_Safe_Point_P1_Flip =	l
    138  5000 ????
    139  5000 ????	       00 df	   _Bit0_New_Room_P1_Flip =	l
    140  5000 ????
    141  5000 ????	       00 df	   _BitOp_Flip_positions =	l
    142  5000 ????
    143  5000 ????	       00 de	   roommate_type =	k
    144  5000 ????
    145  5000 ????	       00 dd	   roommate_move_x =	j
    146  5000 ????
    147  5000 ????	       00 dc	   extra_wall_move_x =	i
    148  5000 ????
    149  5000 ????	       00 db	   _Ch0_Counter =	h
    150  5000 ????
    151  5000 ????	       00 da	   _Ch0_Duration =	g
    152  5000 ????
    153  5000 ????	       00 d9	   _Ch0_Sound =	f
    154  5000 ????
    155  5000 ????	       00 d8	   _Bit3_P1_Dir_Right =	e
    156  5000 ????
    157  5000 ????	       00 d8	   _Bit2_P1_Dir_Left =	e
    158  5000 ????
    159  5000 ????	       00 d8	   _Bit1_P1_Dir_Down =	e
    160  5000 ????
    161  5000 ????	       00 d8	   _Bit0_P1_Dir_Up =	e
    162  5000 ????
    163  5000 ????	       00 d8	   _BitOp_P1_Dir =	e
    164  5000 ????
    165  5000 ????	       00 d7	   _Bit3_M0_Dir_Right =	d
    166  5000 ????
    167  5000 ????	       00 d7	   _Bit2_M0_Dir_Left =	d
    168  5000 ????
    169  5000 ????	       00 d7	   _Bit1_M0_Dir_Down =	d
    170  5000 ????
    171  5000 ????	       00 d7	   _Bit0_M0_Dir_Up =	d
    172  5000 ????
    173  5000 ????	       00 d7	   _BitOp_M0_Dir =	d
    174  5000 ????
    175  5000 ????	       00 d6	   _Bit3_Ball_Shot_Dir_Right2 =	c
    176  5000 ????
    177  5000 ????	       00 d6	   _Bit2_Ball_Shot_Dir_Right1 =	c
    178  5000 ????
    179  5000 ????	       00 d6	   _Bit1_Ball_Shot_Dir_Left2 =	c
    180  5000 ????
    181  5000 ????	       00 d6	   _Bit0_Ball_Shot_Dir_Left1 =	c
    182  5000 ????
    183  5000 ????	       00 d6	   _BitOp_Ball_Shot_Dir =	c
    184  5000 ????
    185  5000 ????	       00 d5	   frame_counter =	b
    186  5000 ????
    187  5000 ????	       00 d4	   delay_counter =	a
    188  5000 ????
    189  5000 ????	       00 95	   _sc3       =	score + 2
    190  5000 ????
    191  5000 ????	       00 94	   _sc2       =	score + 1
    192  5000 ????
    193  5000 ????	       00 93	   _sc1       =	score
    194  5000 ????
    195  5000 ????	       00 fe	   _FE	      =	$FE
    196  5000 ????
    197  5000 ????	       00 fc	   _FC	      =	$FC
    198  5000 ????
    199  5000 ????	       00 fa	   _FA	      =	$FA
    200  5000 ????
    201  5000 ????	       00 f8	   _F8	      =	$F8
    202  5000 ????
    203  5000 ????	       00 f6	   _F6	      =	$F6
    204  5000 ????
    205  5000 ????	       00 f4	   _F4	      =	$F4
    206  5000 ????
    207  5000 ????	       00 f2	   _F2	      =	$F2
    208  5000 ????
    209  5000 ????	       00 f0	   _F0	      =	$F0
    210  5000 ????
    211  5000 ????	       00 ee	   _EE	      =	$EE
    212  5000 ????
    213  5000 ????	       00 ec	   _EC	      =	$EC
    214  5000 ????
    215  5000 ????	       00 ea	   _EA	      =	$EA
    216  5000 ????
    217  5000 ????	       00 e8	   _E8	      =	$E8
    218  5000 ????
    219  5000 ????	       00 e6	   _E6	      =	$E6
    220  5000 ????
    221  5000 ????	       00 e4	   _E4	      =	$E4
    222  5000 ????
    223  5000 ????	       00 e2	   _E2	      =	$E2
    224  5000 ????
    225  5000 ????	       00 e0	   _E0	      =	$E0
    226  5000 ????
    227  5000 ????	       00 de	   _DE	      =	$DE
    228  5000 ????
    229  5000 ????	       00 dc	   _DC	      =	$DC
    230  5000 ????
    231  5000 ????	       00 da	   _DA	      =	$DA
    232  5000 ????
    233  5000 ????	       00 d8	   _D8	      =	$D8
    234  5000 ????
    235  5000 ????	       00 d6	   _D6	      =	$D6
    236  5000 ????
    237  5000 ????	       00 d4	   _D4	      =	$D4
    238  5000 ????
    239  5000 ????	       00 d2	   _D2	      =	$D2
    240  5000 ????
    241  5000 ????	       00 d0	   _D0	      =	$D0
    242  5000 ????
    243  5000 ????	       00 ce	   _CE	      =	$CE
    244  5000 ????
    245  5000 ????	       00 cc	   _CC	      =	$CC
    246  5000 ????
    247  5000 ????	       00 ca	   _CA	      =	$CA
    248  5000 ????
    249  5000 ????	       00 c8	   _C8	      =	$C8
    250  5000 ????
    251  5000 ????	       00 c6	   _C6	      =	$C6
    252  5000 ????
    253  5000 ????	       00 c4	   _C4	      =	$C4
    254  5000 ????
    255  5000 ????	       00 c2	   _C2	      =	$C2
    256  5000 ????
    257  5000 ????	       00 c0	   _C0	      =	$C0
    258  5000 ????
    259  5000 ????	       00 be	   _BE	      =	$BE
    260  5000 ????
    261  5000 ????	       00 bc	   _BC	      =	$BC
    262  5000 ????
    263  5000 ????	       00 ba	   _BA	      =	$BA
    264  5000 ????
    265  5000 ????	       00 b8	   _B8	      =	$B8
    266  5000 ????
    267  5000 ????	       00 b6	   _B6	      =	$B6
    268  5000 ????
    269  5000 ????	       00 b4	   _B4	      =	$B4
    270  5000 ????
    271  5000 ????	       00 b2	   _B2	      =	$B2
    272  5000 ????
    273  5000 ????	       00 b0	   _B0	      =	$B0
    274  5000 ????
    275  5000 ????	       00 ae	   _AE	      =	$AE
    276  5000 ????
    277  5000 ????	       00 ac	   _AC	      =	$AC
    278  5000 ????
    279  5000 ????	       00 aa	   _AA	      =	$AA
    280  5000 ????
    281  5000 ????	       00 a8	   _A8	      =	$A8
    282  5000 ????
    283  5000 ????	       00 a6	   _A6	      =	$A6
    284  5000 ????
    285  5000 ????	       00 a4	   _A4	      =	$A4
    286  5000 ????
    287  5000 ????	       00 a2	   _A2	      =	$A2
    288  5000 ????
    289  5000 ????	       00 a0	   _A0	      =	$A0
    290  5000 ????
    291  5000 ????	       00 9e	   _9E	      =	$9E
    292  5000 ????
    293  5000 ????	       00 9c	   _9C	      =	$9C
    294  5000 ????
    295  5000 ????	       00 9a	   _9A	      =	$9A
    296  5000 ????
    297  5000 ????	       00 98	   _98	      =	$98
    298  5000 ????
    299  5000 ????	       00 96	   _96	      =	$96
    300  5000 ????
    301  5000 ????	       00 94	   _94	      =	$94
    302  5000 ????
    303  5000 ????	       00 92	   _92	      =	$92
    304  5000 ????
    305  5000 ????	       00 90	   _90	      =	$90
    306  5000 ????
    307  5000 ????	       00 8e	   _8E	      =	$8E
    308  5000 ????
    309  5000 ????	       00 8c	   _8C	      =	$8C
    310  5000 ????
    311  5000 ????	       00 8a	   _8A	      =	$8A
    312  5000 ????
    313  5000 ????	       00 88	   _88	      =	$88
    314  5000 ????
    315  5000 ????	       00 86	   _86	      =	$86
    316  5000 ????
    317  5000 ????	       00 84	   _84	      =	$84
    318  5000 ????
    319  5000 ????	       00 82	   _82	      =	$82
    320  5000 ????
    321  5000 ????	       00 80	   _80	      =	$80
    322  5000 ????
    323  5000 ????	       00 7e	   _7E	      =	$7E
    324  5000 ????
    325  5000 ????	       00 7c	   _7C	      =	$7C
    326  5000 ????
    327  5000 ????	       00 7a	   _7A	      =	$7A
    328  5000 ????
    329  5000 ????	       00 78	   _78	      =	$78
    330  5000 ????
    331  5000 ????	       00 76	   _76	      =	$76
    332  5000 ????
    333  5000 ????	       00 74	   _74	      =	$74
    334  5000 ????
    335  5000 ????	       00 72	   _72	      =	$72
    336  5000 ????
    337  5000 ????	       00 70	   _70	      =	$70
    338  5000 ????
    339  5000 ????	       00 6e	   _6E	      =	$6E
    340  5000 ????
    341  5000 ????	       00 6c	   _6C	      =	$6C
    342  5000 ????
    343  5000 ????	       00 6a	   _6A	      =	$6A
    344  5000 ????
    345  5000 ????	       00 68	   _68	      =	$68
    346  5000 ????
    347  5000 ????	       00 66	   _66	      =	$66
    348  5000 ????
    349  5000 ????	       00 64	   _64	      =	$64
    350  5000 ????
    351  5000 ????	       00 62	   _62	      =	$62
    352  5000 ????
    353  5000 ????	       00 60	   _60	      =	$60
    354  5000 ????
    355  5000 ????	       00 5e	   _5E	      =	$5E
    356  5000 ????
    357  5000 ????	       00 5c	   _5C	      =	$5C
    358  5000 ????
    359  5000 ????	       00 5a	   _5A	      =	$5A
    360  5000 ????
    361  5000 ????	       00 58	   _58	      =	$58
    362  5000 ????
    363  5000 ????	       00 56	   _56	      =	$56
    364  5000 ????
    365  5000 ????	       00 54	   _54	      =	$54
    366  5000 ????
    367  5000 ????	       00 52	   _52	      =	$52
    368  5000 ????
    369  5000 ????	       00 50	   _50	      =	$50
    370  5000 ????
    371  5000 ????	       00 4e	   _4E	      =	$4E
    372  5000 ????
    373  5000 ????	       00 4c	   _4C	      =	$4C
    374  5000 ????
    375  5000 ????	       00 4a	   _4A	      =	$4A
    376  5000 ????
    377  5000 ????	       00 48	   _48	      =	$48
    378  5000 ????
    379  5000 ????	       00 46	   _46	      =	$46
    380  5000 ????
    381  5000 ????	       00 44	   _44	      =	$44
    382  5000 ????
    383  5000 ????	       00 42	   _42	      =	$42
    384  5000 ????
    385  5000 ????	       00 40	   _40	      =	$40
    386  5000 ????
    387  5000 ????	       00 3e	   _3E	      =	$3E
    388  5000 ????
    389  5000 ????	       00 3c	   _3C	      =	$3C
    390  5000 ????
    391  5000 ????	       00 3a	   _3A	      =	$3A
    392  5000 ????
    393  5000 ????	       00 38	   _38	      =	$38
    394  5000 ????
    395  5000 ????	       00 36	   _36	      =	$36
    396  5000 ????
    397  5000 ????	       00 34	   _34	      =	$34
    398  5000 ????
    399  5000 ????	       00 32	   _32	      =	$32
    400  5000 ????
    401  5000 ????	       00 30	   _30	      =	$30
    402  5000 ????
    403  5000 ????	       00 2e	   _2E	      =	$2E
    404  5000 ????
    405  5000 ????	       00 2c	   _2C	      =	$2C
    406  5000 ????
    407  5000 ????	       00 2a	   _2A	      =	$2A
    408  5000 ????
    409  5000 ????	       00 28	   _28	      =	$28
    410  5000 ????
    411  5000 ????	       00 26	   _26	      =	$26
    412  5000 ????
    413  5000 ????	       00 24	   _24	      =	$24
    414  5000 ????
    415  5000 ????	       00 22	   _22	      =	$22
    416  5000 ????
    417  5000 ????	       00 20	   _20	      =	$20
    418  5000 ????
    419  5000 ????	       00 1e	   _1E	      =	$1E
    420  5000 ????
    421  5000 ????	       00 1c	   _1C	      =	$1C
    422  5000 ????
    423  5000 ????	       00 1a	   _1A	      =	$1A
    424  5000 ????
    425  5000 ????	       00 18	   _18	      =	$18
    426  5000 ????
    427  5000 ????	       00 16	   _16	      =	$16
    428  5000 ????
    429  5000 ????	       00 14	   _14	      =	$14
    430  5000 ????
    431  5000 ????	       00 12	   _12	      =	$12
    432  5000 ????
    433  5000 ????	       00 10	   _10	      =	$10
    434  5000 ????
    435  5000 ????	       00 0e	   _0E	      =	$0E
    436  5000 ????
    437  5000 ????	       00 0c	   _0C	      =	$0C
    438  5000 ????
    439  5000 ????	       00 0a	   _0A	      =	$0A
    440  5000 ????
    441  5000 ????	       00 08	   _08	      =	$08
    442  5000 ????
    443  5000 ????	       00 06	   _06	      =	$06
    444  5000 ????
    445  5000 ????	       00 04	   _04	      =	$04
    446  5000 ????
    447  5000 ????	       00 02	   _02	      =	$02
    448  5000 ????
    449  5000 ????	       00 00	   _00	      =	$00
    450  5000 ????
    451  5000 ????	       00 09	   req_load_menu =	9
    452  5000 ????
    453  5000 ????	       00 08	   req_safe_point =	8
    454  5000 ????
    455  5000 ????	       00 07	   req_level_reset =	7
    456  5000 ????
    457  5000 ????	       00 06	   req_move_down =	6
    458  5000 ????
    459  5000 ????	       00 05	   req_move_right =	5
    460  5000 ????
    461  5000 ????	       00 04	   req_move_up =	4
    462  5000 ????
    463  5000 ????	       00 03	   req_move_left =	3
    464  5000 ????
    465  5000 ????	       00 02	   req_game_over =	2
    466  5000 ????
    467  5000 ????	       00 01	   req_level_up =	1
    468  5000 ????
    469  5000 ????	       00 00	   req_load   =	0
    470  5000 ????
    471  5000 ????	       00 06	   response_menu_size =	6
    472  5000 ????
    473  5000 ????	       00 1c	   response_size_minus_1 =	28
    474  5000 ????
    475  5000 ????	       00 94	   _M_Edge_Right =	148
    476  5000 ????
    477  5000 ????	       00 0e	   _M_Edge_Left =	14
    478  5000 ????
    479  5000 ????	       00 58	   _M_Edge_Bottom =	88
    480  5000 ????
    481  5000 ????	       00 02	   _M_Edge_Top =	2
    482  5000 ????
    483  5000 ????	       00 4c	   player_max_y =	76
    484  5000 ????
    485  5000 ????	       00 02	   player_min_y =	2
    486  5000 ????
    487  5000 ????	       00 86	   player_max_x =	134
    488  5000 ????
    489  5000 ????	       00 0a	   player_min_x =	10
    490  5000 ????
    491  5000 ????	       00 08	   textbkcolor =	$08
    492  5000 ????
    493  5000 ????	       00 08	   scorebkcolor =	$08
    494  5000 ????
    495  5000 ????	       00 01	   pfscore    =	1
    496  5000 ????
    497  5000 ????	       00 04	   pfres      =	4
    498  5000 ????
    499  5000 ????	       00 01	   superchip  =	1
    500  5000 ????	       00 03	   bs_mask    =	3
    501  5000 ????	       00 10	   bankswitch =	16
    502  5000 ????	       1f f6	   bankswitch_hotspot =	$1FF6
    503  5000 ????	       00 01	   PFcolors   =	1
    504  5000 ????	       00 01	   player1colors =	1
------- FILE 2600basic.h
      7  5000 ????
      8  5000 ????	       00 80	   player0x   =	$80
      9  5000 ????	       00 81	   player1x   =	$81
     10  5000 ????	       00 82	   missile0x  =	$82
     11  5000 ????	       00 83	   missile1x  =	$83
     12  5000 ????	       00 84	   ballx      =	$84
     13  5000 ????
     14  5000 ????	       00 85	   objecty    =	$85
     15  5000 ????	       00 85	   player0y   =	$85
     16  5000 ????	       00 86	   player1y   =	$86
     17  5000 ????	       00 87	   missile1height =	$87
     18  5000 ????	       00 88	   missile1y  =	$88
     19  5000 ????	       00 89	   bally      =	$89
     20  5000 ????
     21  5000 ????	       00 87	   player1color =	$87	; replaces missile 1
     22  5000 ????
     23  5000 ????	       00 8a	   player0pointer =	$8A	;uses $8A-$8B
     24  5000 ????	       00 8a	   player0pointerlo =	$8A
     25  5000 ????	       00 8b	   player0pointerhi =	$8B
     26  5000 ????	       00 8c	   player1pointer =	$8C	; $8C-$8D
     27  5000 ????	       00 8c	   player1pointerlo =	$8C
     28  5000 ????	       00 8d	   player1pointerhi =	$8D
     29  5000 ????
     30  5000 ????	       00 8e	   player0height =	$8E
     31  5000 ????	       00 8f	   player1height =	$8F
     32  5000 ????	       00 90	   missile0height =	$90
     33  5000 ????	       00 91	   missile0y  =	$91
     34  5000 ????	       00 92	   ballheight =	$92
     35  5000 ????
     36  5000 ????	       00 90	   currentpaddle =	$90	; replaces missile 0 (and can't be used with playercolor)
     37  5000 ????	       00 91	   paddle     =	$91	; replaces missile 0
     38  5000 ????	       00 82	   player0colorstore =	$82	; replaces missile 0
     39  5000 ????	       00 90	   player0color =	$90	; replaces missile 0
     40  5000 ????
     41  5000 ????	       00 93	   score      =	$93	; $93-$95
     42  5000 ????	       00 96	   scorepointers =	$96	; $96-$9B = 6 bytes
     43  5000 ????	       00 9c	   temp1      =	$9C	;used by kernel.  can be used in program too, but
     44  5000 ????	       00 9d	   temp2      =	$9D	;are obliterated when drawscreen is called.
     45  5000 ????	       00 9e	   temp3      =	$9E
     46  5000 ????	       00 9f	   temp4      =	$9F
     47  5000 ????	       00 a0	   temp5      =	$A0
     48  5000 ????	       00 a1	   temp6      =	$A1
     49  5000 ????
     50  5000 ????	       00 a2	   rand       =	$A2
     51  5000 ????	       00 a3	   scorecolor =	$A3
     52  5000 ????
     53  5000 ????	       00 a4	   var0       =	$A4
     54  5000 ????	       00 a5	   var1       =	$A5
     55  5000 ????	       00 a6	   var2       =	$A6
     56  5000 ????	       00 a7	   var3       =	$A7
     57  5000 ????	       00 a8	   var4       =	$A8
     58  5000 ????	       00 a9	   var5       =	$A9
     59  5000 ????	       00 aa	   var6       =	$AA
     60  5000 ????	       00 ab	   var7       =	$AB
     61  5000 ????	       00 ac	   var8       =	$AC
     62  5000 ????	       00 ad	   var9       =	$AD
     63  5000 ????	       00 ae	   var10      =	$AE
     64  5000 ????	       00 af	   var11      =	$AF
     65  5000 ????	       00 b0	   var12      =	$B0
     66  5000 ????	       00 b1	   var13      =	$B1
     67  5000 ????	       00 b2	   var14      =	$B2
     68  5000 ????	       00 b3	   var15      =	$B3
     69  5000 ????	       00 b4	   var16      =	$B4
     70  5000 ????	       00 b5	   var17      =	$B5
     71  5000 ????	       00 b6	   var18      =	$B6
     72  5000 ????	       00 b7	   var19      =	$B7
     73  5000 ????	       00 b8	   var20      =	$B8
     74  5000 ????	       00 b9	   var21      =	$B9
     75  5000 ????	       00 ba	   var22      =	$BA
     76  5000 ????	       00 bb	   var23      =	$BB
     77  5000 ????	       00 bc	   var24      =	$BC
     78  5000 ????	       00 bd	   var25      =	$BD
     79  5000 ????	       00 be	   var26      =	$BE
     80  5000 ????	       00 bf	   var27      =	$BF
     81  5000 ????	       00 c0	   var28      =	$C0
     82  5000 ????	       00 c1	   var29      =	$C1
     83  5000 ????	       00 c2	   var30      =	$C2
     84  5000 ????	       00 c3	   var31      =	$C3
     85  5000 ????	       00 c4	   var32      =	$C4
     86  5000 ????	       00 c5	   var33      =	$C5
     87  5000 ????	       00 c6	   var34      =	$C6
     88  5000 ????	       00 c7	   var35      =	$C7
     89  5000 ????	       00 c8	   var36      =	$C8
     90  5000 ????	       00 c9	   var37      =	$C9
     91  5000 ????	       00 ca	   var38      =	$CA
     92  5000 ????	       00 cb	   var39      =	$CB
     93  5000 ????	       00 cc	   var40      =	$CC
     94  5000 ????	       00 cd	   var41      =	$CD
     95  5000 ????	       00 ce	   var42      =	$CE
     96  5000 ????	       00 cf	   var43      =	$CF
     97  5000 ????	       00 d0	   var44      =	$D0
     98  5000 ????	       00 d1	   var45      =	$D1
     99  5000 ????	       00 d2	   var46      =	$D2
    100  5000 ????	       00 d3	   var47      =	$D3
    101  5000 ????
    102  5000 ????	       00 d4	   A	      =	$d4
    103  5000 ????	       00 d4	   a	      =	$d4
    104  5000 ????	       00 d5	   B	      =	$d5
    105  5000 ????	       00 d5	   b	      =	$d5
    106  5000 ????	       00 d6	   C	      =	$d6
    107  5000 ????	       00 d6	   c	      =	$d6
    108  5000 ????	       00 d7	   D	      =	$d7
    109  5000 ????	       00 d7	   d	      =	$d7
    110  5000 ????	       00 d8	   E	      =	$d8
    111  5000 ????	       00 d8	   e	      =	$d8
    112  5000 ????	       00 d9	   F	      =	$d9
    113  5000 ????	       00 d9	   f	      =	$d9
    114  5000 ????	       00 da	   G	      =	$da
    115  5000 ????	       00 da	   g	      =	$da
    116  5000 ????	       00 db	   H	      =	$db
    117  5000 ????	       00 db	   h	      =	$db
    118  5000 ????	       00 dc	   I	      =	$dc
    119  5000 ????	       00 dc	   i	      =	$dc
    120  5000 ????	       00 dd	   J	      =	$dd
    121  5000 ????	       00 dd	   j	      =	$dd
    122  5000 ????	       00 de	   K	      =	$de
    123  5000 ????	       00 de	   k	      =	$de
    124  5000 ????	       00 df	   L	      =	$df
    125  5000 ????	       00 df	   l	      =	$df
    126  5000 ????	       00 e0	   M	      =	$e0
    127  5000 ????	       00 e0	   m	      =	$e0
    128  5000 ????	       00 e1	   N	      =	$e1
    129  5000 ????	       00 e1	   n	      =	$e1
    130  5000 ????	       00 e2	   O	      =	$e2
    131  5000 ????	       00 e2	   o	      =	$e2
    132  5000 ????	       00 e3	   P	      =	$e3
    133  5000 ????	       00 e3	   p	      =	$e3
    134  5000 ????	       00 e4	   Q	      =	$e4
    135  5000 ????	       00 e4	   q	      =	$e4
    136  5000 ????	       00 e5	   R	      =	$e5
    137  5000 ????	       00 e5	   r	      =	$e5
    138  5000 ????	       00 e6	   S	      =	$e6
    139  5000 ????	       00 e6	   s	      =	$e6
    140  5000 ????	       00 e7	   T	      =	$e7
    141  5000 ????	       00 e7	   t	      =	$e7
    142  5000 ????	       00 e8	   U	      =	$e8
    143  5000 ????	       00 e8	   u	      =	$e8
    144  5000 ????	       00 e9	   V	      =	$e9
    145  5000 ????	       00 e9	   v	      =	$e9
    146  5000 ????	       00 ea	   W	      =	$ea
    147  5000 ????	       00 ea	   w	      =	$ea
    148  5000 ????	       00 eb	   X	      =	$eb
    149  5000 ????	       00 eb	   x	      =	$eb
    150  5000 ????	       00 ec	   Y	      =	$ec
    151  5000 ????	       00 ec	   y	      =	$ec
    152  5000 ????	       00 ed	   Z	      =	$ed
    153  5000 ????	       00 ed	   z	      =	$ed
    154  5000 ????
    155  5000 ????	       00 ee	   temp7      =	$ee	; This is used to aid in bankswitching
    156  5000 ????	       00 ef	   playfieldpos =	$ef
    157  5000 ????
    158  5000 ????						; available for other uses, or if unused, provide more stack space
    159  5000 ????
    160  5000 ????	       00 f0	   aux1       =	$f0
    161  5000 ????	       00 f1	   aux2       =	$f1
    162  5000 ????	       00 f2	   aux3       =	$f2
    163  5000 ????	       00 f3	   aux4       =	$f3
    164  5000 ????	       00 f4	   aux5       =	$f4
    165  5000 ????	       00 f5	   aux6       =	$f5
    166  5000 ????
    167  5000 ????						; playfield color/height pointers
    168  5000 ????	       00 f0	   pfcolortable =	$f0	; and $d5
    169  5000 ????	       00 f0	   pfheighttable =	$f0	; and $d5
    170  5000 ????						; the above pointers are the same because if color and height are both used together,
    171  5000 ????						; they must used absolute indexed and cannot use pointers
    172  5000 ????
    173  5000 ????	       00 f2	   lifepointer =	$f2	; pointer to "lives" shape
    174  5000 ????						; upper 3 bits of $f2 contain the number of lives
    175  5000 ????	       00 f4	   lifecolor  =	$f4
    176  5000 ????	       00 f3	   lives      =	$f3	; # lives >> 5
    177  5000 ????	       00 f5	   statusbarlength =	$f5	; only uses upper 5 bits; other bits free
    178  5000 ????
    179  5000 ????	       00 f2	   pfscore1   =	$f2	; optional playfield bytes in score
    180  5000 ????	       00 f3	   pfscore2   =	$f3
    181  5000 ????	       00 f4	   pfscorecolor =	$f4
    182  5000 ????
    183  5000 ????	       00 f6	   stack1     =	$f6
    184  5000 ????	       00 f7	   stack2     =	$f7
    185  5000 ????	       00 f8	   stack3     =	$f8
    186  5000 ????	       00 f9	   stack4     =	$f9
    187  5000 ????						; the stack bytes above may be used in the kernel
    188  5000 ????						; stack = F6-F7, F8-F9, FA-FB, FC-FD, FE-FF
    189  5000 ????
    190  5000 ????				      MAC	return
    191  5000 ????				      ifnconst	bankswitch
    192  5000 ????				      rts
    193  5000 ????				      else
    194  5000 ????				      jmp	BS_return
    195  5000 ????				      endif
    196  5000 ????				      ENDM		; auto-return from either a regular or bankswitched module
    197  5000 ????
    198  5000 ????				      ifconst	superchip
    199  5000 ????	       10 d0	   playfieldbase =	$10D0
------- FILE superchip.h LEVEL 3 PASS 3
      0  5000 ????				      include	superchip.h
      1  5000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  5000 ????
      3  5000 ????	       f0 00	   write_RAM  =	$F000
      4  5000 ????	       f0 00	   wRAM       =	$F000
      5  5000 ????	       f0 00	   w000       =	$F000
      6  5000 ????	       f0 01	   w001       =	$F001
      7  5000 ????	       f0 02	   w002       =	$F002
      8  5000 ????	       f0 03	   w003       =	$F003
      9  5000 ????	       f0 04	   w004       =	$F004
     10  5000 ????	       f0 05	   w005       =	$F005
     11  5000 ????	       f0 06	   w006       =	$F006
     12  5000 ????	       f0 07	   w007       =	$F007
     13  5000 ????	       f0 08	   w008       =	$F008
     14  5000 ????	       f0 09	   w009       =	$F009
     15  5000 ????	       f0 0a	   w010       =	$F00A
     16  5000 ????	       f0 0b	   w011       =	$F00B
     17  5000 ????	       f0 0c	   w012       =	$F00C
     18  5000 ????	       f0 0d	   w013       =	$F00D
     19  5000 ????	       f0 0e	   w014       =	$F00E
     20  5000 ????	       f0 0f	   w015       =	$F00F
     21  5000 ????	       f0 10	   w016       =	$F010
     22  5000 ????	       f0 11	   w017       =	$F011
     23  5000 ????	       f0 12	   w018       =	$F012
     24  5000 ????	       f0 13	   w019       =	$F013
     25  5000 ????	       f0 14	   w020       =	$F014
     26  5000 ????	       f0 15	   w021       =	$F015
     27  5000 ????	       f0 16	   w022       =	$F016
     28  5000 ????	       f0 17	   w023       =	$F017
     29  5000 ????	       f0 18	   w024       =	$F018
     30  5000 ????	       f0 19	   w025       =	$F019
     31  5000 ????	       f0 1a	   w026       =	$F01A
     32  5000 ????	       f0 1b	   w027       =	$F01B
     33  5000 ????	       f0 1c	   w028       =	$F01C
     34  5000 ????	       f0 1d	   w029       =	$F01D
     35  5000 ????	       f0 1e	   w030       =	$F01E
     36  5000 ????	       f0 1f	   w031       =	$F01F
     37  5000 ????	       f0 20	   w032       =	$F020
     38  5000 ????	       f0 21	   w033       =	$F021
     39  5000 ????	       f0 22	   w034       =	$F022
     40  5000 ????	       f0 23	   w035       =	$F023
     41  5000 ????	       f0 24	   w036       =	$F024
     42  5000 ????	       f0 25	   w037       =	$F025
     43  5000 ????	       f0 26	   w038       =	$F026
     44  5000 ????	       f0 27	   w039       =	$F027
     45  5000 ????	       f0 28	   w040       =	$F028
     46  5000 ????	       f0 29	   w041       =	$F029
     47  5000 ????	       f0 2a	   w042       =	$F02A
     48  5000 ????	       f0 2b	   w043       =	$F02B
     49  5000 ????	       f0 2c	   w044       =	$F02C
     50  5000 ????	       f0 2d	   w045       =	$F02D
     51  5000 ????	       f0 2e	   w046       =	$F02E
     52  5000 ????	       f0 2f	   w047       =	$F02F
     53  5000 ????	       f0 30	   w048       =	$F030
     54  5000 ????	       f0 31	   w049       =	$F031
     55  5000 ????	       f0 32	   w050       =	$F032
     56  5000 ????	       f0 33	   w051       =	$F033
     57  5000 ????	       f0 34	   w052       =	$F034
     58  5000 ????	       f0 35	   w053       =	$F035
     59  5000 ????	       f0 36	   w054       =	$F036
     60  5000 ????	       f0 37	   w055       =	$F037
     61  5000 ????	       f0 38	   w056       =	$F038
     62  5000 ????	       f0 39	   w057       =	$F039
     63  5000 ????	       f0 3a	   w058       =	$F03A
     64  5000 ????	       f0 3b	   w059       =	$F03B
     65  5000 ????	       f0 3c	   w060       =	$F03C
     66  5000 ????	       f0 3d	   w061       =	$F03D
     67  5000 ????	       f0 3e	   w062       =	$F03E
     68  5000 ????	       f0 3f	   w063       =	$F03F
     69  5000 ????	       f0 40	   w064       =	$F040
     70  5000 ????	       f0 41	   w065       =	$F041
     71  5000 ????	       f0 42	   w066       =	$F042
     72  5000 ????	       f0 43	   w067       =	$F043
     73  5000 ????	       f0 44	   w068       =	$F044
     74  5000 ????	       f0 45	   w069       =	$F045
     75  5000 ????	       f0 46	   w070       =	$F046
     76  5000 ????	       f0 47	   w071       =	$F047
     77  5000 ????	       f0 48	   w072       =	$F048
     78  5000 ????	       f0 49	   w073       =	$F049
     79  5000 ????	       f0 4a	   w074       =	$F04A
     80  5000 ????	       f0 4b	   w075       =	$F04B
     81  5000 ????	       f0 4c	   w076       =	$F04C
     82  5000 ????	       f0 4d	   w077       =	$F04D
     83  5000 ????	       f0 4e	   w078       =	$F04E
     84  5000 ????	       f0 4f	   w079       =	$F04F
     85  5000 ????	       f0 50	   w080       =	$F050
     86  5000 ????	       f0 51	   w081       =	$F051
     87  5000 ????	       f0 52	   w082       =	$F052
     88  5000 ????	       f0 53	   w083       =	$F053
     89  5000 ????	       f0 54	   w084       =	$F054
     90  5000 ????	       f0 55	   w085       =	$F055
     91  5000 ????	       f0 56	   w086       =	$F056
     92  5000 ????	       f0 57	   w087       =	$F057
     93  5000 ????	       f0 58	   w088       =	$F058
     94  5000 ????	       f0 59	   w089       =	$F059
     95  5000 ????	       f0 5a	   w090       =	$F05A
     96  5000 ????	       f0 5b	   w091       =	$F05B
     97  5000 ????	       f0 5c	   w092       =	$F05C
     98  5000 ????	       f0 5d	   w093       =	$F05D
     99  5000 ????	       f0 5e	   w094       =	$F05E
    100  5000 ????	       f0 5f	   w095       =	$F05F
    101  5000 ????	       f0 60	   w096       =	$F060
    102  5000 ????	       f0 61	   w097       =	$F061
    103  5000 ????	       f0 62	   w098       =	$F062
    104  5000 ????	       f0 63	   w099       =	$F063
    105  5000 ????	       f0 64	   w100       =	$F064
    106  5000 ????	       f0 65	   w101       =	$F065
    107  5000 ????	       f0 66	   w102       =	$F066
    108  5000 ????	       f0 67	   w103       =	$F067
    109  5000 ????	       f0 68	   w104       =	$F068
    110  5000 ????	       f0 69	   w105       =	$F069
    111  5000 ????	       f0 6a	   w106       =	$F06A
    112  5000 ????	       f0 6b	   w107       =	$F06B
    113  5000 ????	       f0 6c	   w108       =	$F06C
    114  5000 ????	       f0 6d	   w109       =	$F06D
    115  5000 ????	       f0 6e	   w110       =	$F06E
    116  5000 ????	       f0 6f	   w111       =	$F06F
    117  5000 ????	       f0 70	   w112       =	$F070
    118  5000 ????	       f0 71	   w113       =	$F071
    119  5000 ????	       f0 72	   w114       =	$F072
    120  5000 ????	       f0 73	   w115       =	$F073
    121  5000 ????	       f0 74	   w116       =	$F074
    122  5000 ????	       f0 75	   w117       =	$F075
    123  5000 ????	       f0 76	   w118       =	$F076
    124  5000 ????	       f0 77	   w119       =	$F077
    125  5000 ????	       f0 78	   w120       =	$F078
    126  5000 ????	       f0 79	   w121       =	$F079
    127  5000 ????	       f0 7a	   w122       =	$F07A
    128  5000 ????	       f0 7b	   w123       =	$F07B
    129  5000 ????	       f0 7c	   w124       =	$F07C
    130  5000 ????	       f0 7d	   w125       =	$F07D
    131  5000 ????	       f0 7e	   w126       =	$F07E
    132  5000 ????	       f0 7f	   w127       =	$F07F
    133  5000 ????
    134  5000 ????	       f0 80	   read_RAM   =	$F080
    135  5000 ????	       f0 80	   rRAM       =	$F080
    136  5000 ????	       f0 80	   r000       =	$F080
    137  5000 ????	       f0 81	   r001       =	$F081
    138  5000 ????	       f0 82	   r002       =	$F082
    139  5000 ????	       f0 83	   r003       =	$F083
    140  5000 ????	       f0 84	   r004       =	$F084
    141  5000 ????	       f0 85	   r005       =	$F085
    142  5000 ????	       f0 86	   r006       =	$F086
    143  5000 ????	       f0 87	   r007       =	$F087
    144  5000 ????	       f0 88	   r008       =	$F088
    145  5000 ????	       f0 89	   r009       =	$F089
    146  5000 ????	       f0 8a	   r010       =	$F08A
    147  5000 ????	       f0 8b	   r011       =	$F08B
    148  5000 ????	       f0 8c	   r012       =	$F08C
    149  5000 ????	       f0 8d	   r013       =	$F08D
    150  5000 ????	       f0 8e	   r014       =	$F08E
    151  5000 ????	       f0 8f	   r015       =	$F08F
    152  5000 ????	       f0 90	   r016       =	$F090
    153  5000 ????	       f0 91	   r017       =	$F091
    154  5000 ????	       f0 92	   r018       =	$F092
    155  5000 ????	       f0 93	   r019       =	$F093
    156  5000 ????	       f0 94	   r020       =	$F094
    157  5000 ????	       f0 95	   r021       =	$F095
    158  5000 ????	       f0 96	   r022       =	$F096
    159  5000 ????	       f0 97	   r023       =	$F097
    160  5000 ????	       f0 98	   r024       =	$F098
    161  5000 ????	       f0 99	   r025       =	$F099
    162  5000 ????	       f0 9a	   r026       =	$F09A
    163  5000 ????	       f0 9b	   r027       =	$F09B
    164  5000 ????	       f0 9c	   r028       =	$F09C
    165  5000 ????	       f0 9d	   r029       =	$F09D
    166  5000 ????	       f0 9e	   r030       =	$F09E
    167  5000 ????	       f0 9f	   r031       =	$F09F
    168  5000 ????	       f0 a0	   r032       =	$F0A0
    169  5000 ????	       f0 a1	   r033       =	$F0A1
    170  5000 ????	       f0 a2	   r034       =	$F0A2
    171  5000 ????	       f0 a3	   r035       =	$F0A3
    172  5000 ????	       f0 a4	   r036       =	$F0A4
    173  5000 ????	       f0 a5	   r037       =	$F0A5
    174  5000 ????	       f0 a6	   r038       =	$F0A6
    175  5000 ????	       f0 a7	   r039       =	$F0A7
    176  5000 ????	       f0 a8	   r040       =	$F0A8
    177  5000 ????	       f0 a9	   r041       =	$F0A9
    178  5000 ????	       f0 aa	   r042       =	$F0AA
    179  5000 ????	       f0 ab	   r043       =	$F0AB
    180  5000 ????	       f0 ac	   r044       =	$F0AC
    181  5000 ????	       f0 ad	   r045       =	$F0AD
    182  5000 ????	       f0 ae	   r046       =	$F0AE
    183  5000 ????	       f0 af	   r047       =	$F0AF
    184  5000 ????	       f0 b0	   r048       =	$F0B0
    185  5000 ????	       f0 b1	   r049       =	$F0B1
    186  5000 ????	       f0 b2	   r050       =	$F0B2
    187  5000 ????	       f0 b3	   r051       =	$F0B3
    188  5000 ????	       f0 b4	   r052       =	$F0B4
    189  5000 ????	       f0 b5	   r053       =	$F0B5
    190  5000 ????	       f0 b6	   r054       =	$F0B6
    191  5000 ????	       f0 b7	   r055       =	$F0B7
    192  5000 ????	       f0 b8	   r056       =	$F0B8
    193  5000 ????	       f0 b9	   r057       =	$F0B9
    194  5000 ????	       f0 ba	   r058       =	$F0BA
    195  5000 ????	       f0 bb	   r059       =	$F0BB
    196  5000 ????	       f0 bc	   r060       =	$F0BC
    197  5000 ????	       f0 bd	   r061       =	$F0BD
    198  5000 ????	       f0 be	   r062       =	$F0BE
    199  5000 ????	       f0 bf	   r063       =	$F0BF
    200  5000 ????	       f0 c0	   r064       =	$F0C0
    201  5000 ????	       f0 c1	   r065       =	$F0C1
    202  5000 ????	       f0 c2	   r066       =	$F0C2
    203  5000 ????	       f0 c3	   r067       =	$F0C3
    204  5000 ????	       f0 c4	   r068       =	$F0C4
    205  5000 ????	       f0 c5	   r069       =	$F0C5
    206  5000 ????	       f0 c6	   r070       =	$F0C6
    207  5000 ????	       f0 c7	   r071       =	$F0C7
    208  5000 ????	       f0 c8	   r072       =	$F0C8
    209  5000 ????	       f0 c9	   r073       =	$F0C9
    210  5000 ????	       f0 ca	   r074       =	$F0CA
    211  5000 ????	       f0 cb	   r075       =	$F0CB
    212  5000 ????	       f0 cc	   r076       =	$F0CC
    213  5000 ????	       f0 cd	   r077       =	$F0CD
    214  5000 ????	       f0 ce	   r078       =	$F0CE
    215  5000 ????	       f0 cf	   r079       =	$F0CF
    216  5000 ????	       f0 d0	   r080       =	$F0D0
    217  5000 ????	       f0 d1	   r081       =	$F0D1
    218  5000 ????	       f0 d2	   r082       =	$F0D2
    219  5000 ????	       f0 d3	   r083       =	$F0D3
    220  5000 ????	       f0 d4	   r084       =	$F0D4
    221  5000 ????	       f0 d5	   r085       =	$F0D5
    222  5000 ????	       f0 d6	   r086       =	$F0D6
    223  5000 ????	       f0 d7	   r087       =	$F0D7
    224  5000 ????	       f0 d8	   r088       =	$F0D8
    225  5000 ????	       f0 d9	   r089       =	$F0D9
    226  5000 ????	       f0 da	   r090       =	$F0DA
    227  5000 ????	       f0 db	   r091       =	$F0DB
    228  5000 ????	       f0 dc	   r092       =	$F0DC
    229  5000 ????	       f0 dd	   r093       =	$F0DD
    230  5000 ????	       f0 de	   r094       =	$F0DE
    231  5000 ????	       f0 df	   r095       =	$F0DF
    232  5000 ????	       f0 e0	   r096       =	$F0E0
    233  5000 ????	       f0 e1	   r097       =	$F0E1
    234  5000 ????	       f0 e2	   r098       =	$F0E2
    235  5000 ????	       f0 e3	   r099       =	$F0E3
    236  5000 ????	       f0 e4	   r100       =	$F0E4
    237  5000 ????	       f0 e5	   r101       =	$F0E5
    238  5000 ????	       f0 e6	   r102       =	$F0E6
    239  5000 ????	       f0 e7	   r103       =	$F0E7
    240  5000 ????	       f0 e8	   r104       =	$F0E8
    241  5000 ????	       f0 e9	   r105       =	$F0E9
    242  5000 ????	       f0 ea	   r106       =	$F0EA
    243  5000 ????	       f0 eb	   r107       =	$F0EB
    244  5000 ????	       f0 ec	   r108       =	$F0EC
    245  5000 ????	       f0 ed	   r109       =	$F0ED
    246  5000 ????	       f0 ee	   r110       =	$F0EE
    247  5000 ????	       f0 ef	   r111       =	$F0EF
    248  5000 ????	       f0 f0	   r112       =	$F0F0
    249  5000 ????	       f0 f1	   r113       =	$F0F1
    250  5000 ????	       f0 f2	   r114       =	$F0F2
    251  5000 ????	       f0 f3	   r115       =	$F0F3
    252  5000 ????	       f0 f4	   r116       =	$F0F4
    253  5000 ????	       f0 f5	   r117       =	$F0F5
    254  5000 ????	       f0 f6	   r118       =	$F0F6
    255  5000 ????	       f0 f7	   r119       =	$F0F7
    256  5000 ????	       f0 f8	   r120       =	$F0F8
    257  5000 ????	       f0 f9	   r121       =	$F0F9
    258  5000 ????	       f0 fa	   r122       =	$F0FA
    259  5000 ????	       f0 fb	   r123       =	$F0FB
    260  5000 ????	       f0 fc	   r124       =	$F0FC
    261  5000 ????	       f0 fd	   r125       =	$F0FD
    262  5000 ????	       f0 fe	   r126       =	$F0FE
    263  5000 ????	       f0 ff	   r127       =	$F0FF
------- FILE 2600basic.h
    201  5000 ????			  -	      else
    202  5000 ????			  -playfieldbase =	$A4
    203  5000 ????				      endif
    204  5000 ????
    205  5000 ????				      ifnconst	pfhalfwidth
    206  5000 ????	       00 04	   pfwidth    =	4
    207  5000 ????	       00 0e	   PF1L       =	PF1
    208  5000 ????	       00 0f	   PF2L       =	PF2
    209  5000 ????	       00 0e	   PF1R       =	PF1
    210  5000 ????	       00 0f	   PF2R       =	PF2
    211  5000 ????	       00 00	   pfadjust   =	0
    212  5000 ????			  -	      else
    213  5000 ????			  -pfwidth    =	2
    214  5000 ????			  -	      ifconst	pfcenter
    215  5000 ????			  -PF1L       =	$3F	; no effect
    216  5000 ????			  -PF2L       =	PF2
    217  5000 ????			  -PF1R       =	$3F
    218  5000 ????			  -PF2R       =	PF2	; no effect
    219  5000 ????			  -pfadjust   =	1
    220  5000 ????			  -	      else
    221  5000 ????			  -PF1L       =	PF1
    222  5000 ????			  -PF2L       =	PF2
    223  5000 ????			  -PF1R       =	$3F	; no effect
    224  5000 ????			  -PF2R       =	$3F	; no effect
    225  5000 ????			  -pfadjust   =	0
    226  5000 ????			  -	      endif
    227  5000 ????				      endif
    228  5000 ????
    229  5000 ????						; define playfield start based on height
    230  5000 ????			  -	      ifnconst	pfres
    231  5000 ????			  -playfield  =	playfieldbase
    232  5000 ????				      else
    233  5000 ????	       10 f0	   playfield  =	playfieldbase-(pfres-12*(4/pfwidth))*pfwidth
    234  5000 ????				      endif
------- FILE d:\Firmaplus\Firmaplus_intern\Atari\PlusROM\Projekte-batariBasic\CaveApocalypse\C.A.V.E. Apocalypse.bas.asm
------- FILE 2600basic_variable_redefs.h LEVEL 2 PASS 3
      0  5000 ????				      include	"2600basic_variable_redefs.h"
      1  5000 ????						; This file contains variable mapping and other information for the current project.
      2  5000 ????
      3  5000 ????	       00 fc	   text_strings_length =	.skipL0583-text_strings
      4  5000 ????
      5  5000 ????	       00 23	   bscode_length =	35
      6  5000 ????	       00 b2	   _SD_Music01 =	var14
      7  5000 ????	       00 1d	   _SD_Touch_Enemy_length =	.skipL0542-_SD_Touch_Enemy
      8  5000 ????
      9  5000 ????	       00 21	   _SD_Shoot_Enemy_length =	.skipL0541-_SD_Shoot_Enemy
     10  5000 ????
     11  5000 ????	       00 45	   _SD_Shoot_Miss_length =	.skipL0540-_SD_Shoot_Miss
     12  5000 ????
     13  5000 ????	       00 35	   _SD_Shot_Wall_length =	.skipL0539-_SD_Shot_Wall
     14  5000 ????
     15  5000 ????	       f0 6f	   w_extra_wall_startpos_y =	w111
     16  5000 ????
     17  5000 ????	       f0 ef	   r_extra_wall_startpos_y =	r111
     18  5000 ????
     19  5000 ????	       f0 6e	   w_extra_wall_startpos_x =	w110
     20  5000 ????
     21  5000 ????	       f0 ee	   r_extra_wall_startpos_x =	r110
     22  5000 ????
     23  5000 ????	       f0 6d	   w_extra_wall_height =	w109
     24  5000 ????
     25  5000 ????	       f0 ed	   r_extra_wall_height =	r109
     26  5000 ????
     27  5000 ????	       f0 6c	   w_extra_wall_width =	w108
     28  5000 ????
     29  5000 ????	       f0 ec	   r_extra_wall_width =	r108
     30  5000 ????
     31  5000 ????	       f0 6b	   w_extra_wall_type_and_range =	w107
     32  5000 ????
     33  5000 ????	       f0 eb	   r_extra_wall_type_and_range =	r107
     34  5000 ????
     35  5000 ????	       f0 6a	   w_roommate_startpos_y =	w106
     36  5000 ????
     37  5000 ????	       f0 ea	   r_roommate_startpos_y =	r106
     38  5000 ????
     39  5000 ????	       f0 69	   w_roommate_startpos_x =	w105
     40  5000 ????
     41  5000 ????	       f0 e9	   r_roommate_startpos_x =	r105
     42  5000 ????
     43  5000 ????	       f0 68	   w_roommate_type_and_range =	w104
     44  5000 ????
     45  5000 ????	       f0 e8	   r_roommate_type_and_range =	r104
     46  5000 ????
     47  5000 ????	       f0 67	   w_room_color_bottom =	w103
     48  5000 ????
     49  5000 ????	       f0 e7	   r_room_color_bottom =	r103
     50  5000 ????
     51  5000 ????	       f0 63	   w_room_color_middle =	w099
     52  5000 ????
     53  5000 ????	       f0 e3	   r_room_color_middle =	r099
     54  5000 ????
     55  5000 ????	       f0 62	   w_room_color_top =	w098
     56  5000 ????
     57  5000 ????	       f0 e2	   r_room_color_top =	r098
     58  5000 ????
     59  5000 ????	       f0 61	   w_Bit0_room_type_top =	w097
     60  5000 ????
     61  5000 ????	       f0 e1	   r_Bit0_room_type_top =	r097
     62  5000 ????
     63  5000 ????	       f0 61	   w_BitOp_room_type =	w097
     64  5000 ????
     65  5000 ????	       f0 e1	   r_BitOp_room_type =	r097
     66  5000 ????
     67  5000 ????	       f0 60	   w_men_to_rescue_in_this_level =	w096
     68  5000 ????
     69  5000 ????	       f0 e0	   r_men_to_rescue_in_this_level =	r096
     70  5000 ????
     71  5000 ????	       f0 5f	   w_level_bonus_bcd_points =	w095
     72  5000 ????
     73  5000 ????	       f0 df	   r_level_bonus_bcd_points =	r095
     74  5000 ????
     75  5000 ????	       f0 5f	   w_room_definition_start =	w095
     76  5000 ????
     77  5000 ????	       00 b1	   bonus_bcd_counter =	var13
     78  5000 ????
     79  5000 ????	       00 b0	   TextIndex  =	var12
     80  5000 ????
     81  5000 ????	       00 b0	   men_to_rescue =	var12
     82  5000 ????
     83  5000 ????	       00 af	   ball_shoot_y =	var11
     84  5000 ????
     85  5000 ????	       00 ae	   ball_shoot_x =	var10
     86  5000 ????
     87  5000 ????	       00 ad	   has_private_levels =	var9
     88  5000 ????
     89  5000 ????	       00 ac	   max_priv_level_bcd3 =	var8
     90  5000 ????
     91  5000 ????	       00 ab	   max_priv_level_bcd2 =	var7
     92  5000 ????
     93  5000 ????	       00 aa	   max_priv_level_bcd1 =	var6
     94  5000 ????
     95  5000 ????	       00 a9	   max_pub_level_bcd3 =	var5
     96  5000 ????
     97  5000 ????	       00 a8	   max_pub_level_bcd2 =	var4
     98  5000 ????
     99  5000 ????	       00 a7	   max_pub_level_bcd1 =	var3
    100  5000 ????
    101  5000 ????	       00 a6	   gamenumber =	var2
    102  5000 ????
    103  5000 ????	       00 a5	   new_room_player1x =	var1
    104  5000 ????
    105  5000 ????	       00 a4	   new_room_player1y =	var0
    106  5000 ????
    107  5000 ????	       00 ec	   _Bit7_FireB_Restrainer =	y
    108  5000 ????
    109  5000 ????	       00 ec	   _Bit6_Flip_P1 =	y
    110  5000 ????
    111  5000 ????	       00 ec	   _Bit5_Request_Pending =	y
    112  5000 ????
    113  5000 ????	       00 ec	   _Bit4_Game_Over =	y
    114  5000 ????
    115  5000 ????	       00 ec	   _Bit3_Safe_Point_reached =	y
    116  5000 ????
    117  5000 ????	       00 ec	   _Bit2_Level_finished =	y
    118  5000 ????
    119  5000 ????	       00 ec	   _Bit1_Wall_Dir =	y
    120  5000 ????
    121  5000 ????	       00 ec	   _Bit0_roommate_Dir =	y
    122  5000 ????
    123  5000 ????	       00 ec	   _Bit_Game_State =	y
    124  5000 ????
    125  5000 ????	       00 86	   P1y_position =	player1y
    126  5000 ????	       00 e9	   P1y_velocity =	v
    127  5000 ????	       00 91	   M0y_position =	missile0y
    128  5000 ????	       00 e6	   M0y_velocity =	s
    129  5000 ????	       00 af	   Bally_position =	ball_shoot_y
    130  5000 ????	       00 e3	   Bally_velocity =	p
    131  5000 ????	       00 e2	   _Ch1_Duration =	o
    132  5000 ????
    133  5000 ????	       00 e1	   Safe_Point_P1_y =	n
    134  5000 ????
    135  5000 ????	       00 e0	   Safe_Point_P1_x =	m
    136  5000 ????
    137  5000 ????	       00 df	   _Bit1_Safe_Point_P1_Flip =	l
    138  5000 ????
    139  5000 ????	       00 df	   _Bit0_New_Room_P1_Flip =	l
    140  5000 ????
    141  5000 ????	       00 df	   _BitOp_Flip_positions =	l
    142  5000 ????
    143  5000 ????	       00 de	   roommate_type =	k
    144  5000 ????
    145  5000 ????	       00 dd	   roommate_move_x =	j
    146  5000 ????
    147  5000 ????	       00 dc	   extra_wall_move_x =	i
    148  5000 ????
    149  5000 ????	       00 db	   _Ch0_Counter =	h
    150  5000 ????
    151  5000 ????	       00 da	   _Ch0_Duration =	g
    152  5000 ????
    153  5000 ????	       00 d9	   _Ch0_Sound =	f
    154  5000 ????
    155  5000 ????	       00 d8	   _Bit3_P1_Dir_Right =	e
    156  5000 ????
    157  5000 ????	       00 d8	   _Bit2_P1_Dir_Left =	e
    158  5000 ????
    159  5000 ????	       00 d8	   _Bit1_P1_Dir_Down =	e
    160  5000 ????
    161  5000 ????	       00 d8	   _Bit0_P1_Dir_Up =	e
    162  5000 ????
    163  5000 ????	       00 d8	   _BitOp_P1_Dir =	e
    164  5000 ????
    165  5000 ????	       00 d7	   _Bit3_M0_Dir_Right =	d
    166  5000 ????
    167  5000 ????	       00 d7	   _Bit2_M0_Dir_Left =	d
    168  5000 ????
    169  5000 ????	       00 d7	   _Bit1_M0_Dir_Down =	d
    170  5000 ????
    171  5000 ????	       00 d7	   _Bit0_M0_Dir_Up =	d
    172  5000 ????
    173  5000 ????	       00 d7	   _BitOp_M0_Dir =	d
    174  5000 ????
    175  5000 ????	       00 d6	   _Bit3_Ball_Shot_Dir_Right2 =	c
    176  5000 ????
    177  5000 ????	       00 d6	   _Bit2_Ball_Shot_Dir_Right1 =	c
    178  5000 ????
    179  5000 ????	       00 d6	   _Bit1_Ball_Shot_Dir_Left2 =	c
    180  5000 ????
    181  5000 ????	       00 d6	   _Bit0_Ball_Shot_Dir_Left1 =	c
    182  5000 ????
    183  5000 ????	       00 d6	   _BitOp_Ball_Shot_Dir =	c
    184  5000 ????
    185  5000 ????	       00 d5	   frame_counter =	b
    186  5000 ????
    187  5000 ????	       00 d4	   delay_counter =	a
    188  5000 ????
    189  5000 ????	       00 95	   _sc3       =	score + 2
    190  5000 ????
    191  5000 ????	       00 94	   _sc2       =	score + 1
    192  5000 ????
    193  5000 ????	       00 93	   _sc1       =	score
    194  5000 ????
    195  5000 ????	       00 fe	   _FE	      =	$FE
    196  5000 ????
    197  5000 ????	       00 fc	   _FC	      =	$FC
    198  5000 ????
    199  5000 ????	       00 fa	   _FA	      =	$FA
    200  5000 ????
    201  5000 ????	       00 f8	   _F8	      =	$F8
    202  5000 ????
    203  5000 ????	       00 f6	   _F6	      =	$F6
    204  5000 ????
    205  5000 ????	       00 f4	   _F4	      =	$F4
    206  5000 ????
    207  5000 ????	       00 f2	   _F2	      =	$F2
    208  5000 ????
    209  5000 ????	       00 f0	   _F0	      =	$F0
    210  5000 ????
    211  5000 ????	       00 ee	   _EE	      =	$EE
    212  5000 ????
    213  5000 ????	       00 ec	   _EC	      =	$EC
    214  5000 ????
    215  5000 ????	       00 ea	   _EA	      =	$EA
    216  5000 ????
    217  5000 ????	       00 e8	   _E8	      =	$E8
    218  5000 ????
    219  5000 ????	       00 e6	   _E6	      =	$E6
    220  5000 ????
    221  5000 ????	       00 e4	   _E4	      =	$E4
    222  5000 ????
    223  5000 ????	       00 e2	   _E2	      =	$E2
    224  5000 ????
    225  5000 ????	       00 e0	   _E0	      =	$E0
    226  5000 ????
    227  5000 ????	       00 de	   _DE	      =	$DE
    228  5000 ????
    229  5000 ????	       00 dc	   _DC	      =	$DC
    230  5000 ????
    231  5000 ????	       00 da	   _DA	      =	$DA
    232  5000 ????
    233  5000 ????	       00 d8	   _D8	      =	$D8
    234  5000 ????
    235  5000 ????	       00 d6	   _D6	      =	$D6
    236  5000 ????
    237  5000 ????	       00 d4	   _D4	      =	$D4
    238  5000 ????
    239  5000 ????	       00 d2	   _D2	      =	$D2
    240  5000 ????
    241  5000 ????	       00 d0	   _D0	      =	$D0
    242  5000 ????
    243  5000 ????	       00 ce	   _CE	      =	$CE
    244  5000 ????
    245  5000 ????	       00 cc	   _CC	      =	$CC
    246  5000 ????
    247  5000 ????	       00 ca	   _CA	      =	$CA
    248  5000 ????
    249  5000 ????	       00 c8	   _C8	      =	$C8
    250  5000 ????
    251  5000 ????	       00 c6	   _C6	      =	$C6
    252  5000 ????
    253  5000 ????	       00 c4	   _C4	      =	$C4
    254  5000 ????
    255  5000 ????	       00 c2	   _C2	      =	$C2
    256  5000 ????
    257  5000 ????	       00 c0	   _C0	      =	$C0
    258  5000 ????
    259  5000 ????	       00 be	   _BE	      =	$BE
    260  5000 ????
    261  5000 ????	       00 bc	   _BC	      =	$BC
    262  5000 ????
    263  5000 ????	       00 ba	   _BA	      =	$BA
    264  5000 ????
    265  5000 ????	       00 b8	   _B8	      =	$B8
    266  5000 ????
    267  5000 ????	       00 b6	   _B6	      =	$B6
    268  5000 ????
    269  5000 ????	       00 b4	   _B4	      =	$B4
    270  5000 ????
    271  5000 ????	       00 b2	   _B2	      =	$B2
    272  5000 ????
    273  5000 ????	       00 b0	   _B0	      =	$B0
    274  5000 ????
    275  5000 ????	       00 ae	   _AE	      =	$AE
    276  5000 ????
    277  5000 ????	       00 ac	   _AC	      =	$AC
    278  5000 ????
    279  5000 ????	       00 aa	   _AA	      =	$AA
    280  5000 ????
    281  5000 ????	       00 a8	   _A8	      =	$A8
    282  5000 ????
    283  5000 ????	       00 a6	   _A6	      =	$A6
    284  5000 ????
    285  5000 ????	       00 a4	   _A4	      =	$A4
    286  5000 ????
    287  5000 ????	       00 a2	   _A2	      =	$A2
    288  5000 ????
    289  5000 ????	       00 a0	   _A0	      =	$A0
    290  5000 ????
    291  5000 ????	       00 9e	   _9E	      =	$9E
    292  5000 ????
    293  5000 ????	       00 9c	   _9C	      =	$9C
    294  5000 ????
    295  5000 ????	       00 9a	   _9A	      =	$9A
    296  5000 ????
    297  5000 ????	       00 98	   _98	      =	$98
    298  5000 ????
    299  5000 ????	       00 96	   _96	      =	$96
    300  5000 ????
    301  5000 ????	       00 94	   _94	      =	$94
    302  5000 ????
    303  5000 ????	       00 92	   _92	      =	$92
    304  5000 ????
    305  5000 ????	       00 90	   _90	      =	$90
    306  5000 ????
    307  5000 ????	       00 8e	   _8E	      =	$8E
    308  5000 ????
    309  5000 ????	       00 8c	   _8C	      =	$8C
    310  5000 ????
    311  5000 ????	       00 8a	   _8A	      =	$8A
    312  5000 ????
    313  5000 ????	       00 88	   _88	      =	$88
    314  5000 ????
    315  5000 ????	       00 86	   _86	      =	$86
    316  5000 ????
    317  5000 ????	       00 84	   _84	      =	$84
    318  5000 ????
    319  5000 ????	       00 82	   _82	      =	$82
    320  5000 ????
    321  5000 ????	       00 80	   _80	      =	$80
    322  5000 ????
    323  5000 ????	       00 7e	   _7E	      =	$7E
    324  5000 ????
    325  5000 ????	       00 7c	   _7C	      =	$7C
    326  5000 ????
    327  5000 ????	       00 7a	   _7A	      =	$7A
    328  5000 ????
    329  5000 ????	       00 78	   _78	      =	$78
    330  5000 ????
    331  5000 ????	       00 76	   _76	      =	$76
    332  5000 ????
    333  5000 ????	       00 74	   _74	      =	$74
    334  5000 ????
    335  5000 ????	       00 72	   _72	      =	$72
    336  5000 ????
    337  5000 ????	       00 70	   _70	      =	$70
    338  5000 ????
    339  5000 ????	       00 6e	   _6E	      =	$6E
    340  5000 ????
    341  5000 ????	       00 6c	   _6C	      =	$6C
    342  5000 ????
    343  5000 ????	       00 6a	   _6A	      =	$6A
    344  5000 ????
    345  5000 ????	       00 68	   _68	      =	$68
    346  5000 ????
    347  5000 ????	       00 66	   _66	      =	$66
    348  5000 ????
    349  5000 ????	       00 64	   _64	      =	$64
    350  5000 ????
    351  5000 ????	       00 62	   _62	      =	$62
    352  5000 ????
    353  5000 ????	       00 60	   _60	      =	$60
    354  5000 ????
    355  5000 ????	       00 5e	   _5E	      =	$5E
    356  5000 ????
    357  5000 ????	       00 5c	   _5C	      =	$5C
    358  5000 ????
    359  5000 ????	       00 5a	   _5A	      =	$5A
    360  5000 ????
    361  5000 ????	       00 58	   _58	      =	$58
    362  5000 ????
    363  5000 ????	       00 56	   _56	      =	$56
    364  5000 ????
    365  5000 ????	       00 54	   _54	      =	$54
    366  5000 ????
    367  5000 ????	       00 52	   _52	      =	$52
    368  5000 ????
    369  5000 ????	       00 50	   _50	      =	$50
    370  5000 ????
    371  5000 ????	       00 4e	   _4E	      =	$4E
    372  5000 ????
    373  5000 ????	       00 4c	   _4C	      =	$4C
    374  5000 ????
    375  5000 ????	       00 4a	   _4A	      =	$4A
    376  5000 ????
    377  5000 ????	       00 48	   _48	      =	$48
    378  5000 ????
    379  5000 ????	       00 46	   _46	      =	$46
    380  5000 ????
    381  5000 ????	       00 44	   _44	      =	$44
    382  5000 ????
    383  5000 ????	       00 42	   _42	      =	$42
    384  5000 ????
    385  5000 ????	       00 40	   _40	      =	$40
    386  5000 ????
    387  5000 ????	       00 3e	   _3E	      =	$3E
    388  5000 ????
    389  5000 ????	       00 3c	   _3C	      =	$3C
    390  5000 ????
    391  5000 ????	       00 3a	   _3A	      =	$3A
    392  5000 ????
    393  5000 ????	       00 38	   _38	      =	$38
    394  5000 ????
    395  5000 ????	       00 36	   _36	      =	$36
    396  5000 ????
    397  5000 ????	       00 34	   _34	      =	$34
    398  5000 ????
    399  5000 ????	       00 32	   _32	      =	$32
    400  5000 ????
    401  5000 ????	       00 30	   _30	      =	$30
    402  5000 ????
    403  5000 ????	       00 2e	   _2E	      =	$2E
    404  5000 ????
    405  5000 ????	       00 2c	   _2C	      =	$2C
    406  5000 ????
    407  5000 ????	       00 2a	   _2A	      =	$2A
    408  5000 ????
    409  5000 ????	       00 28	   _28	      =	$28
    410  5000 ????
    411  5000 ????	       00 26	   _26	      =	$26
    412  5000 ????
    413  5000 ????	       00 24	   _24	      =	$24
    414  5000 ????
    415  5000 ????	       00 22	   _22	      =	$22
    416  5000 ????
    417  5000 ????	       00 20	   _20	      =	$20
    418  5000 ????
    419  5000 ????	       00 1e	   _1E	      =	$1E
    420  5000 ????
    421  5000 ????	       00 1c	   _1C	      =	$1C
    422  5000 ????
    423  5000 ????	       00 1a	   _1A	      =	$1A
    424  5000 ????
    425  5000 ????	       00 18	   _18	      =	$18
    426  5000 ????
    427  5000 ????	       00 16	   _16	      =	$16
    428  5000 ????
    429  5000 ????	       00 14	   _14	      =	$14
    430  5000 ????
    431  5000 ????	       00 12	   _12	      =	$12
    432  5000 ????
    433  5000 ????	       00 10	   _10	      =	$10
    434  5000 ????
    435  5000 ????	       00 0e	   _0E	      =	$0E
    436  5000 ????
    437  5000 ????	       00 0c	   _0C	      =	$0C
    438  5000 ????
    439  5000 ????	       00 0a	   _0A	      =	$0A
    440  5000 ????
    441  5000 ????	       00 08	   _08	      =	$08
    442  5000 ????
    443  5000 ????	       00 06	   _06	      =	$06
    444  5000 ????
    445  5000 ????	       00 04	   _04	      =	$04
    446  5000 ????
    447  5000 ????	       00 02	   _02	      =	$02
    448  5000 ????
    449  5000 ????	       00 00	   _00	      =	$00
    450  5000 ????
    451  5000 ????	       00 09	   req_load_menu =	9
    452  5000 ????
    453  5000 ????	       00 08	   req_safe_point =	8
    454  5000 ????
    455  5000 ????	       00 07	   req_level_reset =	7
    456  5000 ????
    457  5000 ????	       00 06	   req_move_down =	6
    458  5000 ????
    459  5000 ????	       00 05	   req_move_right =	5
    460  5000 ????
    461  5000 ????	       00 04	   req_move_up =	4
    462  5000 ????
    463  5000 ????	       00 03	   req_move_left =	3
    464  5000 ????
    465  5000 ????	       00 02	   req_game_over =	2
    466  5000 ????
    467  5000 ????	       00 01	   req_level_up =	1
    468  5000 ????
    469  5000 ????	       00 00	   req_load   =	0
    470  5000 ????
    471  5000 ????	       00 06	   response_menu_size =	6
    472  5000 ????
    473  5000 ????	       00 1c	   response_size_minus_1 =	28
    474  5000 ????
    475  5000 ????	       00 94	   _M_Edge_Right =	148
    476  5000 ????
    477  5000 ????	       00 0e	   _M_Edge_Left =	14
    478  5000 ????
    479  5000 ????	       00 58	   _M_Edge_Bottom =	88
    480  5000 ????
    481  5000 ????	       00 02	   _M_Edge_Top =	2
    482  5000 ????
    483  5000 ????	       00 4c	   player_max_y =	76
    484  5000 ????
    485  5000 ????	       00 02	   player_min_y =	2
    486  5000 ????
    487  5000 ????	       00 86	   player_max_x =	134
    488  5000 ????
    489  5000 ????	       00 0a	   player_min_x =	10
    490  5000 ????
    491  5000 ????	       00 08	   textbkcolor =	$08
    492  5000 ????
    493  5000 ????	       00 08	   scorebkcolor =	$08
    494  5000 ????
    495  5000 ????	       00 01	   pfscore    =	1
    496  5000 ????
    497  5000 ????	       00 04	   pfres      =	4
    498  5000 ????
    499  5000 ????	       00 01	   superchip  =	1
    500  5000 ????	       00 03	   bs_mask    =	3
    501  5000 ????	       00 10	   bankswitch =	16
    502  5000 ????	       1f f6	   bankswitch_hotspot =	$1FF6
    503  5000 ????	       00 01	   PFcolors   =	1
    504  5000 ????	       00 01	   player1colors =	1
------- FILE d:\Firmaplus\Firmaplus_intern\Atari\PlusROM\Projekte-batariBasic\CaveApocalypse\C.A.V.E. Apocalypse.bas.asm
      8  5000 ????				      ifconst	bankswitch
      9  5000 ????			  -	      if	bankswitch == 8
     10  5000 ????			  -	      ORG	$1000
     11  5000 ????			  -	      RORG	$D000
     12  5000 ????				      endif
     13  5000 ????				      if	bankswitch == 16
     14  1000					      ORG	$1000
     15  1000					      RORG	$9000
     16  1000					      endif
     17  1000				  -	      if	bankswitch == 32
     18  1000				  -	      ORG	$1000
     19  1000				  -	      RORG	$1000
     20  1000					      endif
     21  1000				  -	      if	bankswitch == 64
     22  1000				  -	      ORG	$1000
     23  1000				  -	      RORG	$1000
     24  1000					      endif
     25  1000				  -	      else
     26  1000				  -	      ORG	$F000
     27  1000					      endif
     28  1000					      repeat	256
     29  1000		       ff		      .byte.b	$ff
     28  1000					      repend
     29  1001		       ff		      .byte.b	$ff
     28  1001					      repend
     29  1002		       ff		      .byte.b	$ff
     28  1002					      repend
     29  1003		       ff		      .byte.b	$ff
     28  1003					      repend
     29  1004		       ff		      .byte.b	$ff
     28  1004					      repend
     29  1005		       ff		      .byte.b	$ff
     28  1005					      repend
     29  1006		       ff		      .byte.b	$ff
     28  1006					      repend
     29  1007		       ff		      .byte.b	$ff
     28  1007					      repend
     29  1008		       ff		      .byte.b	$ff
     28  1008					      repend
     29  1009		       ff		      .byte.b	$ff
     28  1009					      repend
     29  100a		       ff		      .byte.b	$ff
     28  100a					      repend
     29  100b		       ff		      .byte.b	$ff
     28  100b					      repend
     29  100c		       ff		      .byte.b	$ff
     28  100c					      repend
     29  100d		       ff		      .byte.b	$ff
     28  100d					      repend
     29  100e		       ff		      .byte.b	$ff
     28  100e					      repend
     29  100f		       ff		      .byte.b	$ff
     28  100f					      repend
     29  1010		       ff		      .byte.b	$ff
     28  1010					      repend
     29  1011		       ff		      .byte.b	$ff
     28  1011					      repend
     29  1012		       ff		      .byte.b	$ff
     28  1012					      repend
     29  1013		       ff		      .byte.b	$ff
     28  1013					      repend
     29  1014		       ff		      .byte.b	$ff
     28  1014					      repend
     29  1015		       ff		      .byte.b	$ff
     28  1015					      repend
     29  1016		       ff		      .byte.b	$ff
     28  1016					      repend
     29  1017		       ff		      .byte.b	$ff
     28  1017					      repend
     29  1018		       ff		      .byte.b	$ff
     28  1018					      repend
     29  1019		       ff		      .byte.b	$ff
     28  1019					      repend
     29  101a		       ff		      .byte.b	$ff
     28  101a					      repend
     29  101b		       ff		      .byte.b	$ff
     28  101b					      repend
     29  101c		       ff		      .byte.b	$ff
     28  101c					      repend
     29  101d		       ff		      .byte.b	$ff
     28  101d					      repend
     29  101e		       ff		      .byte.b	$ff
     28  101e					      repend
     29  101f		       ff		      .byte.b	$ff
     28  101f					      repend
     29  1020		       ff		      .byte.b	$ff
     28  1020					      repend
     29  1021		       ff		      .byte.b	$ff
     28  1021					      repend
     29  1022		       ff		      .byte.b	$ff
     28  1022					      repend
     29  1023		       ff		      .byte.b	$ff
     28  1023					      repend
     29  1024		       ff		      .byte.b	$ff
     28  1024					      repend
     29  1025		       ff		      .byte.b	$ff
     28  1025					      repend
     29  1026		       ff		      .byte.b	$ff
     28  1026					      repend
     29  1027		       ff		      .byte.b	$ff
     28  1027					      repend
     29  1028		       ff		      .byte.b	$ff
     28  1028					      repend
     29  1029		       ff		      .byte.b	$ff
     28  1029					      repend
     29  102a		       ff		      .byte.b	$ff
     28  102a					      repend
     29  102b		       ff		      .byte.b	$ff
     28  102b					      repend
     29  102c		       ff		      .byte.b	$ff
     28  102c					      repend
     29  102d		       ff		      .byte.b	$ff
     28  102d					      repend
     29  102e		       ff		      .byte.b	$ff
     28  102e					      repend
     29  102f		       ff		      .byte.b	$ff
     28  102f					      repend
     29  1030		       ff		      .byte.b	$ff
     28  1030					      repend
     29  1031		       ff		      .byte.b	$ff
     28  1031					      repend
     29  1032		       ff		      .byte.b	$ff
     28  1032					      repend
     29  1033		       ff		      .byte.b	$ff
     28  1033					      repend
     29  1034		       ff		      .byte.b	$ff
     28  1034					      repend
     29  1035		       ff		      .byte.b	$ff
     28  1035					      repend
     29  1036		       ff		      .byte.b	$ff
     28  1036					      repend
     29  1037		       ff		      .byte.b	$ff
     28  1037					      repend
     29  1038		       ff		      .byte.b	$ff
     28  1038					      repend
     29  1039		       ff		      .byte.b	$ff
     28  1039					      repend
     29  103a		       ff		      .byte.b	$ff
     28  103a					      repend
     29  103b		       ff		      .byte.b	$ff
     28  103b					      repend
     29  103c		       ff		      .byte.b	$ff
     28  103c					      repend
     29  103d		       ff		      .byte.b	$ff
     28  103d					      repend
     29  103e		       ff		      .byte.b	$ff
     28  103e					      repend
     29  103f		       ff		      .byte.b	$ff
     28  103f					      repend
     29  1040		       ff		      .byte.b	$ff
     28  1040					      repend
     29  1041		       ff		      .byte.b	$ff
     28  1041					      repend
     29  1042		       ff		      .byte.b	$ff
     28  1042					      repend
     29  1043		       ff		      .byte.b	$ff
     28  1043					      repend
     29  1044		       ff		      .byte.b	$ff
     28  1044					      repend
     29  1045		       ff		      .byte.b	$ff
     28  1045					      repend
     29  1046		       ff		      .byte.b	$ff
     28  1046					      repend
     29  1047		       ff		      .byte.b	$ff
     28  1047					      repend
     29  1048		       ff		      .byte.b	$ff
     28  1048					      repend
     29  1049		       ff		      .byte.b	$ff
     28  1049					      repend
     29  104a		       ff		      .byte.b	$ff
     28  104a					      repend
     29  104b		       ff		      .byte.b	$ff
     28  104b					      repend
     29  104c		       ff		      .byte.b	$ff
     28  104c					      repend
     29  104d		       ff		      .byte.b	$ff
     28  104d					      repend
     29  104e		       ff		      .byte.b	$ff
     28  104e					      repend
     29  104f		       ff		      .byte.b	$ff
     28  104f					      repend
     29  1050		       ff		      .byte.b	$ff
     28  1050					      repend
     29  1051		       ff		      .byte.b	$ff
     28  1051					      repend
     29  1052		       ff		      .byte.b	$ff
     28  1052					      repend
     29  1053		       ff		      .byte.b	$ff
     28  1053					      repend
     29  1054		       ff		      .byte.b	$ff
     28  1054					      repend
     29  1055		       ff		      .byte.b	$ff
     28  1055					      repend
     29  1056		       ff		      .byte.b	$ff
     28  1056					      repend
     29  1057		       ff		      .byte.b	$ff
     28  1057					      repend
     29  1058		       ff		      .byte.b	$ff
     28  1058					      repend
     29  1059		       ff		      .byte.b	$ff
     28  1059					      repend
     29  105a		       ff		      .byte.b	$ff
     28  105a					      repend
     29  105b		       ff		      .byte.b	$ff
     28  105b					      repend
     29  105c		       ff		      .byte.b	$ff
     28  105c					      repend
     29  105d		       ff		      .byte.b	$ff
     28  105d					      repend
     29  105e		       ff		      .byte.b	$ff
     28  105e					      repend
     29  105f		       ff		      .byte.b	$ff
     28  105f					      repend
     29  1060		       ff		      .byte.b	$ff
     28  1060					      repend
     29  1061		       ff		      .byte.b	$ff
     28  1061					      repend
     29  1062		       ff		      .byte.b	$ff
     28  1062					      repend
     29  1063		       ff		      .byte.b	$ff
     28  1063					      repend
     29  1064		       ff		      .byte.b	$ff
     28  1064					      repend
     29  1065		       ff		      .byte.b	$ff
     28  1065					      repend
     29  1066		       ff		      .byte.b	$ff
     28  1066					      repend
     29  1067		       ff		      .byte.b	$ff
     28  1067					      repend
     29  1068		       ff		      .byte.b	$ff
     28  1068					      repend
     29  1069		       ff		      .byte.b	$ff
     28  1069					      repend
     29  106a		       ff		      .byte.b	$ff
     28  106a					      repend
     29  106b		       ff		      .byte.b	$ff
     28  106b					      repend
     29  106c		       ff		      .byte.b	$ff
     28  106c					      repend
     29  106d		       ff		      .byte.b	$ff
     28  106d					      repend
     29  106e		       ff		      .byte.b	$ff
     28  106e					      repend
     29  106f		       ff		      .byte.b	$ff
     28  106f					      repend
     29  1070		       ff		      .byte.b	$ff
     28  1070					      repend
     29  1071		       ff		      .byte.b	$ff
     28  1071					      repend
     29  1072		       ff		      .byte.b	$ff
     28  1072					      repend
     29  1073		       ff		      .byte.b	$ff
     28  1073					      repend
     29  1074		       ff		      .byte.b	$ff
     28  1074					      repend
     29  1075		       ff		      .byte.b	$ff
     28  1075					      repend
     29  1076		       ff		      .byte.b	$ff
     28  1076					      repend
     29  1077		       ff		      .byte.b	$ff
     28  1077					      repend
     29  1078		       ff		      .byte.b	$ff
     28  1078					      repend
     29  1079		       ff		      .byte.b	$ff
     28  1079					      repend
     29  107a		       ff		      .byte.b	$ff
     28  107a					      repend
     29  107b		       ff		      .byte.b	$ff
     28  107b					      repend
     29  107c		       ff		      .byte.b	$ff
     28  107c					      repend
     29  107d		       ff		      .byte.b	$ff
     28  107d					      repend
     29  107e		       ff		      .byte.b	$ff
     28  107e					      repend
     29  107f		       ff		      .byte.b	$ff
     28  107f					      repend
     29  1080		       ff		      .byte.b	$ff
     28  1080					      repend
     29  1081		       ff		      .byte.b	$ff
     28  1081					      repend
     29  1082		       ff		      .byte.b	$ff
     28  1082					      repend
     29  1083		       ff		      .byte.b	$ff
     28  1083					      repend
     29  1084		       ff		      .byte.b	$ff
     28  1084					      repend
     29  1085		       ff		      .byte.b	$ff
     28  1085					      repend
     29  1086		       ff		      .byte.b	$ff
     28  1086					      repend
     29  1087		       ff		      .byte.b	$ff
     28  1087					      repend
     29  1088		       ff		      .byte.b	$ff
     28  1088					      repend
     29  1089		       ff		      .byte.b	$ff
     28  1089					      repend
     29  108a		       ff		      .byte.b	$ff
     28  108a					      repend
     29  108b		       ff		      .byte.b	$ff
     28  108b					      repend
     29  108c		       ff		      .byte.b	$ff
     28  108c					      repend
     29  108d		       ff		      .byte.b	$ff
     28  108d					      repend
     29  108e		       ff		      .byte.b	$ff
     28  108e					      repend
     29  108f		       ff		      .byte.b	$ff
     28  108f					      repend
     29  1090		       ff		      .byte.b	$ff
     28  1090					      repend
     29  1091		       ff		      .byte.b	$ff
     28  1091					      repend
     29  1092		       ff		      .byte.b	$ff
     28  1092					      repend
     29  1093		       ff		      .byte.b	$ff
     28  1093					      repend
     29  1094		       ff		      .byte.b	$ff
     28  1094					      repend
     29  1095		       ff		      .byte.b	$ff
     28  1095					      repend
     29  1096		       ff		      .byte.b	$ff
     28  1096					      repend
     29  1097		       ff		      .byte.b	$ff
     28  1097					      repend
     29  1098		       ff		      .byte.b	$ff
     28  1098					      repend
     29  1099		       ff		      .byte.b	$ff
     28  1099					      repend
     29  109a		       ff		      .byte.b	$ff
     28  109a					      repend
     29  109b		       ff		      .byte.b	$ff
     28  109b					      repend
     29  109c		       ff		      .byte.b	$ff
     28  109c					      repend
     29  109d		       ff		      .byte.b	$ff
     28  109d					      repend
     29  109e		       ff		      .byte.b	$ff
     28  109e					      repend
     29  109f		       ff		      .byte.b	$ff
     28  109f					      repend
     29  10a0		       ff		      .byte.b	$ff
     28  10a0					      repend
     29  10a1		       ff		      .byte.b	$ff
     28  10a1					      repend
     29  10a2		       ff		      .byte.b	$ff
     28  10a2					      repend
     29  10a3		       ff		      .byte.b	$ff
     28  10a3					      repend
     29  10a4		       ff		      .byte.b	$ff
     28  10a4					      repend
     29  10a5		       ff		      .byte.b	$ff
     28  10a5					      repend
     29  10a6		       ff		      .byte.b	$ff
     28  10a6					      repend
     29  10a7		       ff		      .byte.b	$ff
     28  10a7					      repend
     29  10a8		       ff		      .byte.b	$ff
     28  10a8					      repend
     29  10a9		       ff		      .byte.b	$ff
     28  10a9					      repend
     29  10aa		       ff		      .byte.b	$ff
     28  10aa					      repend
     29  10ab		       ff		      .byte.b	$ff
     28  10ab					      repend
     29  10ac		       ff		      .byte.b	$ff
     28  10ac					      repend
     29  10ad		       ff		      .byte.b	$ff
     28  10ad					      repend
     29  10ae		       ff		      .byte.b	$ff
     28  10ae					      repend
     29  10af		       ff		      .byte.b	$ff
     28  10af					      repend
     29  10b0		       ff		      .byte.b	$ff
     28  10b0					      repend
     29  10b1		       ff		      .byte.b	$ff
     28  10b1					      repend
     29  10b2		       ff		      .byte.b	$ff
     28  10b2					      repend
     29  10b3		       ff		      .byte.b	$ff
     28  10b3					      repend
     29  10b4		       ff		      .byte.b	$ff
     28  10b4					      repend
     29  10b5		       ff		      .byte.b	$ff
     28  10b5					      repend
     29  10b6		       ff		      .byte.b	$ff
     28  10b6					      repend
     29  10b7		       ff		      .byte.b	$ff
     28  10b7					      repend
     29  10b8		       ff		      .byte.b	$ff
     28  10b8					      repend
     29  10b9		       ff		      .byte.b	$ff
     28  10b9					      repend
     29  10ba		       ff		      .byte.b	$ff
     28  10ba					      repend
     29  10bb		       ff		      .byte.b	$ff
     28  10bb					      repend
     29  10bc		       ff		      .byte.b	$ff
     28  10bc					      repend
     29  10bd		       ff		      .byte.b	$ff
     28  10bd					      repend
     29  10be		       ff		      .byte.b	$ff
     28  10be					      repend
     29  10bf		       ff		      .byte.b	$ff
     28  10bf					      repend
     29  10c0		       ff		      .byte.b	$ff
     28  10c0					      repend
     29  10c1		       ff		      .byte.b	$ff
     28  10c1					      repend
     29  10c2		       ff		      .byte.b	$ff
     28  10c2					      repend
     29  10c3		       ff		      .byte.b	$ff
     28  10c3					      repend
     29  10c4		       ff		      .byte.b	$ff
     28  10c4					      repend
     29  10c5		       ff		      .byte.b	$ff
     28  10c5					      repend
     29  10c6		       ff		      .byte.b	$ff
     28  10c6					      repend
     29  10c7		       ff		      .byte.b	$ff
     28  10c7					      repend
     29  10c8		       ff		      .byte.b	$ff
     28  10c8					      repend
     29  10c9		       ff		      .byte.b	$ff
     28  10c9					      repend
     29  10ca		       ff		      .byte.b	$ff
     28  10ca					      repend
     29  10cb		       ff		      .byte.b	$ff
     28  10cb					      repend
     29  10cc		       ff		      .byte.b	$ff
     28  10cc					      repend
     29  10cd		       ff		      .byte.b	$ff
     28  10cd					      repend
     29  10ce		       ff		      .byte.b	$ff
     28  10ce					      repend
     29  10cf		       ff		      .byte.b	$ff
     28  10cf					      repend
     29  10d0		       ff		      .byte.b	$ff
     28  10d0					      repend
     29  10d1		       ff		      .byte.b	$ff
     28  10d1					      repend
     29  10d2		       ff		      .byte.b	$ff
     28  10d2					      repend
     29  10d3		       ff		      .byte.b	$ff
     28  10d3					      repend
     29  10d4		       ff		      .byte.b	$ff
     28  10d4					      repend
     29  10d5		       ff		      .byte.b	$ff
     28  10d5					      repend
     29  10d6		       ff		      .byte.b	$ff
     28  10d6					      repend
     29  10d7		       ff		      .byte.b	$ff
     28  10d7					      repend
     29  10d8		       ff		      .byte.b	$ff
     28  10d8					      repend
     29  10d9		       ff		      .byte.b	$ff
     28  10d9					      repend
     29  10da		       ff		      .byte.b	$ff
     28  10da					      repend
     29  10db		       ff		      .byte.b	$ff
     28  10db					      repend
     29  10dc		       ff		      .byte.b	$ff
     28  10dc					      repend
     29  10dd		       ff		      .byte.b	$ff
     28  10dd					      repend
     29  10de		       ff		      .byte.b	$ff
     28  10de					      repend
     29  10df		       ff		      .byte.b	$ff
     28  10df					      repend
     29  10e0		       ff		      .byte.b	$ff
     28  10e0					      repend
     29  10e1		       ff		      .byte.b	$ff
     28  10e1					      repend
     29  10e2		       ff		      .byte.b	$ff
     28  10e2					      repend
     29  10e3		       ff		      .byte.b	$ff
     28  10e3					      repend
     29  10e4		       ff		      .byte.b	$ff
     28  10e4					      repend
     29  10e5		       ff		      .byte.b	$ff
     28  10e5					      repend
     29  10e6		       ff		      .byte.b	$ff
     28  10e6					      repend
     29  10e7		       ff		      .byte.b	$ff
     28  10e7					      repend
     29  10e8		       ff		      .byte.b	$ff
     28  10e8					      repend
     29  10e9		       ff		      .byte.b	$ff
     28  10e9					      repend
     29  10ea		       ff		      .byte.b	$ff
     28  10ea					      repend
     29  10eb		       ff		      .byte.b	$ff
     28  10eb					      repend
     29  10ec		       ff		      .byte.b	$ff
     28  10ec					      repend
     29  10ed		       ff		      .byte.b	$ff
     28  10ed					      repend
     29  10ee		       ff		      .byte.b	$ff
     28  10ee					      repend
     29  10ef		       ff		      .byte.b	$ff
     28  10ef					      repend
     29  10f0		       ff		      .byte.b	$ff
     28  10f0					      repend
     29  10f1		       ff		      .byte.b	$ff
     28  10f1					      repend
     29  10f2		       ff		      .byte.b	$ff
     28  10f2					      repend
     29  10f3		       ff		      .byte.b	$ff
     28  10f3					      repend
     29  10f4		       ff		      .byte.b	$ff
     28  10f4					      repend
     29  10f5		       ff		      .byte.b	$ff
     28  10f5					      repend
     29  10f6		       ff		      .byte.b	$ff
     28  10f6					      repend
     29  10f7		       ff		      .byte.b	$ff
     28  10f7					      repend
     29  10f8		       ff		      .byte.b	$ff
     28  10f8					      repend
     29  10f9		       ff		      .byte.b	$ff
     28  10f9					      repend
     29  10fa		       ff		      .byte.b	$ff
     28  10fa					      repend
     29  10fb		       ff		      .byte.b	$ff
     28  10fb					      repend
     29  10fc		       ff		      .byte.b	$ff
     28  10fc					      repend
     29  10fd		       ff		      .byte.b	$ff
     28  10fd					      repend
     29  10fe		       ff		      .byte.b	$ff
     28  10fe					      repend
     29  10ff		       ff		      .byte.b	$ff
     30  1100					      repend
     31  1100				   game
     32  1100				   .L00 		;  inline PlusROM_functions.asm
     33  1100
------- FILE PlusROM_functions.asm LEVEL 2 PASS 3
      0  1100					      include	PlusROM_functions.asm
      1  1100		       00 01	   PlusROM_functions =	1
      2  1100		       1f f0	   WriteToBuffer =	$1ff0
      3  1100		       1f f1	   WriteSendBuffer =	$1ff1
      4  1100		       1f f2	   ReceiveBuffer =	$1ff2
      5  1100		       1f f3	   ReceiveBufferSize =	$1ff3
      6  1100
      7  1100					      MAC	set_plusrom_api
      8  1100				   OLD_RORG   =	*
      9  1100					      REND
     10  1100				   PlusROM_API
     11  1100					      .byte	{1}, 0, {2}, 0
     12  1100					      ECHO	"Size of PlusROM API definition: ", [( * - PlusROM_API )]d
     13  1100					      RORG	(OLD_RORG + ( * - PlusROM_API ))
     14  1100					      ENDM		; {1} = path, {2} = domain
     15  1100
------- FILE d:\Firmaplus\Firmaplus_intern\Atari\PlusROM\Projekte-batariBasic\CaveApocalypse\C.A.V.E. Apocalypse.bas.asm
     35  1100
     36  1100				   .
     37  1100							; 
     38  1100
     39  1100				   .L01 		;  set kernel_options pfcolors player1colors
     40  1100
     41  1100				   .L02 		;  set romsize 16kSC
     42  1100
     43  1100				   .L03 		;  set smartbranching on
     44  1100
     45  1100				   .
     46  1100							; 
     47  1100
     48  1100				   .L04 		;  const pfres = 4
     49  1100
     50  1100				   .L05 		;  const pfscore = 1
     51  1100
     52  1100				   .L06 		;  const scorebkcolor = $08
     53  1100
     54  1100				   .L07 		;  const textbkcolor = $08
     55  1100
     56  1100				   .
     57  1100							; 
     58  1100
     59  1100				   .L08 		;  rem gravity is acceleration (https://atariage.com/forums/topic/226881-gravity/?do=findComment&comment=3017307)
     60  1100
     61  1100				   .L09 		;  rem by AA user bogax (https://atariage.com/forums/profile/22687-bogax/)
     62  1100
     63  1100				   .L010		;  rem the smallest fraction is 1/256 rounded up here to 0.004
     64  1100
     65  1100				   .L011		;  rem assuming gravity is applied each drawscreen this should
     66  1100
     67  1100				   .L012		;  rem work out to ~7 pixels in 1 second, 28 pixels in 2 seconds
     68  1100
     69  1100				   .L013		;  rem 63 pixels in 3 seconds
     70  1100
     71  1100							;.gravity_player1.0.004.
     72  1100				   .L014		;  def gravity_player1 = 0.004
     73  1100
     74  1100							;.gravity_ball.0.008.
     75  1100				   .L015		;  def gravity_ball = 0.008
     76  1100
     77  1100							;.gravity_missile0.0.024.
     78  1100				   .L016		;  def gravity_missile0 = 0.024
     79  1100
     80  1100				   .
     81  1100							; 
     82  1100
     83  1100				   .L017		;  const player_min_x	=  10
     84  1100
     85  1100				   .L018		;  const player_max_x	=  134
     86  1100
     87  1100				   .L019		;  const player_min_y	=  2
     88  1100
     89  1100				   .L020		;  const player_max_y	=  76
     90  1100
     91  1100				   .L021		;  const _M_Edge_Top  =  2
     92  1100
     93  1100				   .L022		;  const _M_Edge_Bottom  =  88
     94  1100
     95  1100				   .L023		;  const _M_Edge_Left	=  14
     96  1100
     97  1100				   .L024		;  const _M_Edge_Right  =  148
     98  1100
     99  1100				   .
    100  1100							; 
    101  1100
    102  1100				   .L025		;  const response_size_minus_1  =  28
    103  1100
    104  1100				   .L026		;  const response_menu_size  =  6
    105  1100
    106  1100				   .
    107  1100							; 
    108  1100
    109  1100							;.bonus_level_timer.100.
    110  1100				   .L027		;  def bonus_level_timer = 100
    111  1100
    112  1100							;.bonus_level_lives.200.
    113  1100				   .L028		;  def bonus_level_lives = 200
    114  1100
    115  1100							;.bonus_hit_wall.10.
    116  1100				   .L029		;  def bonus_hit_wall = 10
    117  1100
    118  1100							;.bonus_hit_active_wall.30.
    119  1100				   .L030		;  def bonus_hit_active_wall = 30
    120  1100
    121  1100							;.bonus_hit_air_missile.40.
    122  1100				   .L031		;  def bonus_hit_air_missile = 40
    123  1100
    124  1100							;.bonus_hit_tank.60.
    125  1100				   .L032		;  def bonus_hit_tank = 60
    126  1100
    127  1100							;.bonus_man_rescue.150.
    128  1100				   .L033		;  def bonus_man_rescue = 150
    129  1100
    130  1100				   .
    131  1100							; 
    132  1100
    133  1100				   .
    134  1100							; 
    135  1100
    136  1100				   .
    137  1100							; 
    138  1100
    139  1100				   .L034		;  const req_load  =  0
    140  1100
    141  1100				   .L035		;  const req_level_up	=  1
    142  1100
    143  1100				   .L036		;  const req_game_over  =  2
    144  1100
    145  1100				   .L037		;  const req_move_left  =  3
    146  1100
    147  1100				   .L038		;  const req_move_up  =  4
    148  1100
    149  1100				   .L039		;  const req_move_right  =  5
    150  1100
    151  1100				   .L040		;  const req_move_down  =  6
    152  1100
    153  1100				   .L041		;  const req_level_reset  =  7
    154  1100
    155  1100				   .L042		;  const req_safe_point  =  8
    156  1100
    157  1100				   .L043		;  const req_load_menu  =  9
    158  1100
    159  1100				   .
    160  1100							; 
    161  1100
    162  1100				   .L044		;  const _00  =  $00
    163  1100
    164  1100				   .L045		;  const _02  =  $02
    165  1100
    166  1100				   .L046		;  const _04  =  $04
    167  1100
    168  1100				   .L047		;  const _06  =  $06
    169  1100
    170  1100				   .L048		;  const _08  =  $08
    171  1100
    172  1100				   .L049		;  const _0A  =  $0A
    173  1100
    174  1100				   .L050		;  const _0C  =  $0C
    175  1100
    176  1100				   .L051		;  const _0E  =  $0E
    177  1100
    178  1100				   .L052		;  const _10  =  $10
    179  1100
    180  1100				   .L053		;  const _12  =  $12
    181  1100
    182  1100				   .L054		;  const _14  =  $14
    183  1100
    184  1100				   .L055		;  const _16  =  $16
    185  1100
    186  1100				   .L056		;  const _18  =  $18
    187  1100
    188  1100				   .L057		;  const _1A  =  $1A
    189  1100
    190  1100				   .L058		;  const _1C  =  $1C
    191  1100
    192  1100				   .L059		;  const _1E  =  $1E
    193  1100
    194  1100				   .L060		;  const _20  =  $20
    195  1100
    196  1100				   .L061		;  const _22  =  $22
    197  1100
    198  1100				   .L062		;  const _24  =  $24
    199  1100
    200  1100				   .L063		;  const _26  =  $26
    201  1100
    202  1100				   .L064		;  const _28  =  $28
    203  1100
    204  1100				   .L065		;  const _2A  =  $2A
    205  1100
    206  1100				   .L066		;  const _2C  =  $2C
    207  1100
    208  1100				   .L067		;  const _2E  =  $2E
    209  1100
    210  1100				   .L068		;  const _30  =  $30
    211  1100
    212  1100				   .L069		;  const _32  =  $32
    213  1100
    214  1100				   .L070		;  const _34  =  $34
    215  1100
    216  1100				   .L071		;  const _36  =  $36
    217  1100
    218  1100				   .L072		;  const _38  =  $38
    219  1100
    220  1100				   .L073		;  const _3A  =  $3A
    221  1100
    222  1100				   .L074		;  const _3C  =  $3C
    223  1100
    224  1100				   .L075		;  const _3E  =  $3E
    225  1100
    226  1100				   .L076		;  const _40  =  $40
    227  1100
    228  1100				   .L077		;  const _42  =  $42
    229  1100
    230  1100				   .L078		;  const _44  =  $44
    231  1100
    232  1100				   .L079		;  const _46  =  $46
    233  1100
    234  1100				   .L080		;  const _48  =  $48
    235  1100
    236  1100				   .L081		;  const _4A  =  $4A
    237  1100
    238  1100				   .L082		;  const _4C  =  $4C
    239  1100
    240  1100				   .L083		;  const _4E  =  $4E
    241  1100
    242  1100				   .L084		;  const _50  =  $50
    243  1100
    244  1100				   .L085		;  const _52  =  $52
    245  1100
    246  1100				   .L086		;  const _54  =  $54
    247  1100
    248  1100				   .L087		;  const _56  =  $56
    249  1100
    250  1100				   .L088		;  const _58  =  $58
    251  1100
    252  1100				   .L089		;  const _5A  =  $5A
    253  1100
    254  1100				   .L090		;  const _5C  =  $5C
    255  1100
    256  1100				   .L091		;  const _5E  =  $5E
    257  1100
    258  1100				   .L092		;  const _60  =  $60
    259  1100
    260  1100				   .L093		;  const _62  =  $62
    261  1100
    262  1100				   .L094		;  const _64  =  $64
    263  1100
    264  1100				   .L095		;  const _66  =  $66
    265  1100
    266  1100				   .L096		;  const _68  =  $68
    267  1100
    268  1100				   .L097		;  const _6A  =  $6A
    269  1100
    270  1100				   .L098		;  const _6C  =  $6C
    271  1100
    272  1100				   .L099		;  const _6E  =  $6E
    273  1100
    274  1100				   .L0100		;  const _70  =  $70
    275  1100
    276  1100				   .L0101		;  const _72  =  $72
    277  1100
    278  1100				   .L0102		;  const _74  =  $74
    279  1100
    280  1100				   .L0103		;  const _76  =  $76
    281  1100
    282  1100				   .L0104		;  const _78  =  $78
    283  1100
    284  1100				   .L0105		;  const _7A  =  $7A
    285  1100
    286  1100				   .L0106		;  const _7C  =  $7C
    287  1100
    288  1100				   .L0107		;  const _7E  =  $7E
    289  1100
    290  1100				   .L0108		;  const _80  =  $80
    291  1100
    292  1100				   .L0109		;  const _82  =  $82
    293  1100
    294  1100				   .L0110		;  const _84  =  $84
    295  1100
    296  1100				   .L0111		;  const _86  =  $86
    297  1100
    298  1100				   .L0112		;  const _88  =  $88
    299  1100
    300  1100				   .L0113		;  const _8A  =  $8A
    301  1100
    302  1100				   .L0114		;  const _8C  =  $8C
    303  1100
    304  1100				   .L0115		;  const _8E  =  $8E
    305  1100
    306  1100				   .L0116		;  const _90  =  $90
    307  1100
    308  1100				   .L0117		;  const _92  =  $92
    309  1100
    310  1100				   .L0118		;  const _94  =  $94
    311  1100
    312  1100				   .L0119		;  const _96  =  $96
    313  1100
    314  1100				   .L0120		;  const _98  =  $98
    315  1100
    316  1100				   .L0121		;  const _9A  =  $9A
    317  1100
    318  1100				   .L0122		;  const _9C  =  $9C
    319  1100
    320  1100				   .L0123		;  const _9E  =  $9E
    321  1100
    322  1100				   .L0124		;  const _A0  =  $A0
    323  1100
    324  1100				   .L0125		;  const _A2  =  $A2
    325  1100
    326  1100				   .L0126		;  const _A4  =  $A4
    327  1100
    328  1100				   .L0127		;  const _A6  =  $A6
    329  1100
    330  1100				   .L0128		;  const _A8  =  $A8
    331  1100
    332  1100				   .L0129		;  const _AA  =  $AA
    333  1100
    334  1100				   .L0130		;  const _AC  =  $AC
    335  1100
    336  1100				   .L0131		;  const _AE  =  $AE
    337  1100
    338  1100				   .L0132		;  const _B0  =  $B0
    339  1100
    340  1100				   .L0133		;  const _B2  =  $B2
    341  1100
    342  1100				   .L0134		;  const _B4  =  $B4
    343  1100
    344  1100				   .L0135		;  const _B6  =  $B6
    345  1100
    346  1100				   .L0136		;  const _B8  =  $B8
    347  1100
    348  1100				   .L0137		;  const _BA  =  $BA
    349  1100
    350  1100				   .L0138		;  const _BC  =  $BC
    351  1100
    352  1100				   .L0139		;  const _BE  =  $BE
    353  1100
    354  1100				   .L0140		;  const _C0  =  $C0
    355  1100
    356  1100				   .L0141		;  const _C2  =  $C2
    357  1100
    358  1100				   .L0142		;  const _C4  =  $C4
    359  1100
    360  1100				   .L0143		;  const _C6  =  $C6
    361  1100
    362  1100				   .L0144		;  const _C8  =  $C8
    363  1100
    364  1100				   .L0145		;  const _CA  =  $CA
    365  1100
    366  1100				   .L0146		;  const _CC  =  $CC
    367  1100
    368  1100				   .L0147		;  const _CE  =  $CE
    369  1100
    370  1100				   .L0148		;  const _D0  =  $D0
    371  1100
    372  1100				   .L0149		;  const _D2  =  $D2
    373  1100
    374  1100				   .L0150		;  const _D4  =  $D4
    375  1100
    376  1100				   .L0151		;  const _D6  =  $D6
    377  1100
    378  1100				   .L0152		;  const _D8  =  $D8
    379  1100
    380  1100				   .L0153		;  const _DA  =  $DA
    381  1100
    382  1100				   .L0154		;  const _DC  =  $DC
    383  1100
    384  1100				   .L0155		;  const _DE  =  $DE
    385  1100
    386  1100				   .L0156		;  const _E0  =  $E0
    387  1100
    388  1100				   .L0157		;  const _E2  =  $E2
    389  1100
    390  1100				   .L0158		;  const _E4  =  $E4
    391  1100
    392  1100				   .L0159		;  const _E6  =  $E6
    393  1100
    394  1100				   .L0160		;  const _E8  =  $E8
    395  1100
    396  1100				   .L0161		;  const _EA  =  $EA
    397  1100
    398  1100				   .L0162		;  const _EC  =  $EC
    399  1100
    400  1100				   .L0163		;  const _EE  =  $EE
    401  1100
    402  1100				   .L0164		;  const _F0  =  $F0
    403  1100
    404  1100				   .L0165		;  const _F2  =  $F2
    405  1100
    406  1100				   .L0166		;  const _F4  =  $F4
    407  1100
    408  1100				   .L0167		;  const _F6  =  $F6
    409  1100
    410  1100				   .L0168		;  const _F8  =  $F8
    411  1100
    412  1100				   .L0169		;  const _FA  =  $FA
    413  1100
    414  1100				   .L0170		;  const _FC  =  $FC
    415  1100
    416  1100				   .L0171		;  const _FE  =  $FE
    417  1100
    418  1100				   .
    419  1100							; 
    420  1100
    421  1100				   .
    422  1100							; 
    423  1100
    424  1100				   .
    425  1100							; 
    426  1100
    427  1100				   .
    428  1100							; 
    429  1100
    430  1100				   .
    431  1100							; 
    432  1100
    433  1100				   .
    434  1100							; 
    435  1100
    436  1100				   .
    437  1100							; 
    438  1100
    439  1100				   .
    440  1100							; 
    441  1100
    442  1100				   .
    443  1100							; 
    444  1100
    445  1100				   .
    446  1100							; 
    447  1100
    448  1100				   .
    449  1100							; 
    450  1100
    451  1100				   .
    452  1100							; 
    453  1100
    454  1100				   .
    455  1100							; 
    456  1100
    457  1100				   .
    458  1100							; 
    459  1100
    460  1100				   .
    461  1100							; 
    462  1100
    463  1100				   .
    464  1100							; 
    465  1100
    466  1100				   .
    467  1100							; 
    468  1100
    469  1100				   .
    470  1100							; 
    471  1100
    472  1100				   .
    473  1100							; 
    474  1100
    475  1100				   .
    476  1100							; 
    477  1100
    478  1100				   .
    479  1100							; 
    480  1100
    481  1100				   .
    482  1100							; 
    483  1100
    484  1100				   .
    485  1100							; 
    486  1100
    487  1100				   .
    488  1100							; 
    489  1100
    490  1100				   .
    491  1100							; 
    492  1100
    493  1100				   .
    494  1100							; 
    495  1100
    496  1100				   .
    497  1100							; 
    498  1100
    499  1100				   .
    500  1100							; 
    501  1100
    502  1100				   .
    503  1100							; 
    504  1100
    505  1100				   .
    506  1100							; 
    507  1100
    508  1100				   .
    509  1100							; 
    510  1100
    511  1100				   .
    512  1100							; 
    513  1100
    514  1100				   .
    515  1100							; 
    516  1100
    517  1100				   .
    518  1100							; 
    519  1100
    520  1100				   .
    521  1100							; 
    522  1100
    523  1100				   .
    524  1100							; 
    525  1100
    526  1100				   .
    527  1100							; 
    528  1100
    529  1100				   .
    530  1100							; 
    531  1100
    532  1100				   .
    533  1100							; 
    534  1100
    535  1100				   .
    536  1100							; 
    537  1100
    538  1100				   .
    539  1100							; 
    540  1100
    541  1100				   .
    542  1100							; 
    543  1100
    544  1100				   .
    545  1100							; 
    546  1100
    547  1100				   .
    548  1100							; 
    549  1100
    550  1100				   .
    551  1100							; 
    552  1100
    553  1100				   .
    554  1100							; 
    555  1100
    556  1100				   .
    557  1100							; 
    558  1100
    559  1100				   .
    560  1100							; 
    561  1100
    562  1100				   .
    563  1100							; 
    564  1100
    565  1100				   .
    566  1100							; 
    567  1100
    568  1100				   .
    569  1100							; 
    570  1100
    571  1100				   .
    572  1100							; 
    573  1100
    574  1100				   .
    575  1100							; 
    576  1100
    577  1100				   .
    578  1100							; 
    579  1100
    580  1100				   .
    581  1100							; 
    582  1100
    583  1100				   .
    584  1100							; 
    585  1100
    586  1100				   .
    587  1100							; 
    588  1100
    589  1100				   .
    590  1100							; 
    591  1100
    592  1100				   .
    593  1100							; 
    594  1100
    595  1100				   .
    596  1100							; 
    597  1100
    598  1100				   .
    599  1100							; 
    600  1100
    601  1100				   .
    602  1100							; 
    603  1100
    604  1100				   .
    605  1100							; 
    606  1100
    607  1100				   .
    608  1100							; 
    609  1100
    610  1100				   .
    611  1100							; 
    612  1100
    613  1100				   .
    614  1100							; 
    615  1100
    616  1100				   .
    617  1100							; 
    618  1100
    619  1100				   .
    620  1100							; 
    621  1100
    622  1100				   .
    623  1100							; 
    624  1100
    625  1100				   .
    626  1100							; 
    627  1100
    628  1100				   .
    629  1100							; 
    630  1100
    631  1100				   .
    632  1100							; 
    633  1100
    634  1100				   .
    635  1100							; 
    636  1100
    637  1100				   .
    638  1100							; 
    639  1100
    640  1100				   .
    641  1100							; 
    642  1100
    643  1100				   .
    644  1100							; 
    645  1100
    646  1100				   .
    647  1100							; 
    648  1100
    649  1100				   .
    650  1100							; 
    651  1100
    652  1100				   .
    653  1100							; 
    654  1100
    655  1100				   .
    656  1100							; 
    657  1100
    658  1100				   .
    659  1100							; 
    660  1100
    661  1100				   .
    662  1100							; 
    663  1100
    664  1100				   .
    665  1100							; 
    666  1100
    667  1100				   .
    668  1100							; 
    669  1100
    670  1100				   .
    671  1100							; 
    672  1100
    673  1100				   .
    674  1100							; 
    675  1100
    676  1100				   .
    677  1100							; 
    678  1100
    679  1100				   .
    680  1100							; 
    681  1100
    682  1100				   .
    683  1100							; 
    684  1100
    685  1100				   .
    686  1100							; 
    687  1100
    688  1100				   .
    689  1100							; 
    690  1100
    691  1100				   .
    692  1100							; 
    693  1100
    694  1100				   .
    695  1100							; 
    696  1100
    697  1100				   .
    698  1100							; 
    699  1100
    700  1100				   .
    701  1100							; 
    702  1100
    703  1100				   .
    704  1100							; 
    705  1100
    706  1100				   .
    707  1100							; 
    708  1100
    709  1100				   .
    710  1100							; 
    711  1100
    712  1100				   .
    713  1100							; 
    714  1100
    715  1100				   .
    716  1100							; 
    717  1100
    718  1100				   .
    719  1100							; 
    720  1100
    721  1100				   .
    722  1100							; 
    723  1100
    724  1100				   .
    725  1100							; 
    726  1100
    727  1100				   .
    728  1100							; 
    729  1100
    730  1100				   .
    731  1100							; 
    732  1100
    733  1100				   .
    734  1100							; 
    735  1100
    736  1100				   .
    737  1100							; 
    738  1100
    739  1100				   .
    740  1100							; 
    741  1100
    742  1100				   .
    743  1100							; 
    744  1100
    745  1100				   .
    746  1100							; 
    747  1100
    748  1100				   .
    749  1100							; 
    750  1100
    751  1100				   .
    752  1100							; 
    753  1100
    754  1100				   .
    755  1100							; 
    756  1100
    757  1100				   .
    758  1100							; 
    759  1100
    760  1100				   .
    761  1100							; 
    762  1100
    763  1100				   .
    764  1100							; 
    765  1100
    766  1100				   .
    767  1100							; 
    768  1100
    769  1100				   .
    770  1100							; 
    771  1100
    772  1100				   .
    773  1100							; 
    774  1100
    775  1100				   .
    776  1100							; 
    777  1100
    778  1100				   .
    779  1100							; 
    780  1100
    781  1100				   .
    782  1100							; 
    783  1100
    784  1100				   .
    785  1100							; 
    786  1100
    787  1100				   .
    788  1100							; 
    789  1100
    790  1100				   .
    791  1100							; 
    792  1100
    793  1100				   .
    794  1100							; 
    795  1100
    796  1100				   .
    797  1100							; 
    798  1100
    799  1100				   .
    800  1100							; 
    801  1100
    802  1100				   .
    803  1100							; 
    804  1100
    805  1100				   .
    806  1100							; 
    807  1100
    808  1100				   .
    809  1100							; 
    810  1100
    811  1100				   .
    812  1100							; 
    813  1100
    814  1100				   .
    815  1100							; 
    816  1100
    817  1100				   .
    818  1100							; 
    819  1100
    820  1100				   .
    821  1100							; 
    822  1100
    823  1100				   .
    824  1100							; 
    825  1100
    826  1100				   .
    827  1100							; 
    828  1100
    829  1100				   .
    830  1100							; 
    831  1100
    832  1100				   .
    833  1100							; 
    834  1100
    835  1100				   .
    836  1100							; 
    837  1100
    838  1100				   .
    839  1100							; 
    840  1100
    841  1100				   .
    842  1100							; 
    843  1100
    844  1100				   .
    845  1100							; 
    846  1100
    847  1100				   .
    848  1100							; 
    849  1100
    850  1100				   .
    851  1100							; 
    852  1100
    853  1100				   .
    854  1100							; 
    855  1100
    856  1100				   .L0172		;  dim _sc1  =  score
    857  1100
    858  1100				   .L0173		;  dim _sc2  =  score + 1
    859  1100
    860  1100				   .L0174		;  dim _sc3  =  score + 2
    861  1100
    862  1100				   .
    863  1100							; 
    864  1100
    865  1100				   .
    866  1100							; 
    867  1100
    868  1100				   .L0175		;  dim delay_counter  =  a
    869  1100
    870  1100				   .L0176		;  dim frame_counter  =  b
    871  1100
    872  1100				   .
    873  1100							; 
    874  1100
    875  1100				   .L0177		;  dim _BitOp_Ball_Shot_Dir  =  c
    876  1100
    877  1100				   .L0178		;  dim _Bit0_Ball_Shot_Dir_Left1  =  c
    878  1100
    879  1100				   .L0179		;  dim _Bit1_Ball_Shot_Dir_Left2  =  c
    880  1100
    881  1100				   .L0180		;  dim _Bit2_Ball_Shot_Dir_Right1  =  c
    882  1100
    883  1100				   .L0181		;  dim _Bit3_Ball_Shot_Dir_Right2  =  c
    884  1100
    885  1100				   .
    886  1100							; 
    887  1100
    888  1100				   .L0182		;  dim _BitOp_M0_Dir  =  d
    889  1100
    890  1100				   .L0183		;  dim _Bit0_M0_Dir_Up  =  d
    891  1100
    892  1100				   .L0184		;  dim _Bit1_M0_Dir_Down  =  d
    893  1100
    894  1100				   .L0185		;  dim _Bit2_M0_Dir_Left  =  d
    895  1100
    896  1100				   .L0186		;  dim _Bit3_M0_Dir_Right  =  d
    897  1100
    898  1100				   .
    899  1100							; 
    900  1100
    901  1100				   .L0187		;  dim _BitOp_P1_Dir  =  e
    902  1100
    903  1100				   .L0188		;  dim _Bit0_P1_Dir_Up  =  e
    904  1100
    905  1100				   .L0189		;  dim _Bit1_P1_Dir_Down  =  e
    906  1100
    907  1100				   .L0190		;  dim _Bit2_P1_Dir_Left  =  e
    908  1100
    909  1100				   .L0191		;  dim _Bit3_P1_Dir_Right  =  e
    910  1100
    911  1100				   .
    912  1100							; 
    913  1100
    914  1100				   .
    915  1100							; 
    916  1100
    917  1100				   .L0192		;  dim _Ch0_Sound  =  f
    918  1100
    919  1100				   .L0193		;  dim _Ch0_Duration  =  g
    920  1100
    921  1100				   .L0194		;  dim _Ch0_Counter  =  h
    922  1100
    923  1100				   .
    924  1100							; 
    925  1100
    926  1100				   .L0195		;  dim extra_wall_move_x  =  i
    927  1100
    928  1100				   .L0196		;  dim roommate_move_x  =  j
    929  1100
    930  1100				   .L0197		;  dim roommate_type  =  k
    931  1100
    932  1100				   .
    933  1100							; 
    934  1100
    935  1100				   .L0198		;  dim _BitOp_Flip_positions  =  l
    936  1100
    937  1100				   .L0199		;  dim _Bit0_New_Room_P1_Flip	=  l
    938  1100
    939  1100				   .L0200		;  dim _Bit1_Safe_Point_P1_Flip  =  l
    940  1100
    941  1100				   .L0201		;  dim Safe_Point_P1_x  =  m
    942  1100
    943  1100				   .L0202		;  dim Safe_Point_P1_y  =  n
    944  1100
    945  1100				   .
    946  1100							; 
    947  1100
    948  1100				   .L0203		;  dim _Ch1_Duration  =  o
    949  1100
    950  1100				   .
    951  1100							; 
    952  1100
    953  1100				   .
    954  1100							; 
    955  1100
    956  1100				   .L0204		;  rem 16 bit velocity
    957  1100
    958  1100				   .L0205		;  dim Bally_velocity	=  p.q
    959  1100
    960  1100				   .L0206		;  rem 16 bit ball y position
    961  1100
    962  1100				   .L0207		;  dim Bally_position	=  ball_shoot_y.r
    963  1100
    964  1100				   .
    965  1100							; 
    966  1100
    967  1100				   .L0208		;  rem 16 bit velocity
    968  1100
    969  1100				   .L0209		;  dim M0y_velocity  =  s.t
    970  1100
    971  1100				   .L0210		;  rem 16 bit missile0 y position
    972  1100
    973  1100				   .L0211		;  dim M0y_position  =  missile0y.u
    974  1100
    975  1100				   .
    976  1100							; 
    977  1100
    978  1100				   .L0212		;  rem 16 bit velocity
    979  1100
    980  1100				   .L0213		;  dim P1y_velocity  =  v.w
    981  1100
    982  1100				   .L0214		;  rem 16 bit player1 y position
    983  1100
    984  1100				   .L0215		;  dim P1y_position  =  player1y.x
    985  1100
    986  1100				   .
    987  1100							; 
    988  1100
    989  1100				   .L0216		;  rem Various game states
    990  1100
    991  1100				   .L0217		;  dim _Bit_Game_State  =  y
    992  1100
    993  1100				   .L0218		;  dim _Bit0_roommate_Dir  =  y
    994  1100
    995  1100				   .L0219		;  dim _Bit1_Wall_Dir	=  y
    996  1100
    997  1100				   .L0220		;  dim _Bit2_Level_finished  =  y
    998  1100
    999  1100				   .L0221		;  dim _Bit3_Safe_Point_reached  =  y
   1000  1100
   1001  1100				   .L0222		;  dim _Bit4_Game_Over  =  y
   1002  1100
   1003  1100				   .L0223		;  dim _Bit5_Request_Pending  =  y
   1004  1100
   1005  1100				   .L0224		;  dim _Bit6_Flip_P1  =  y
   1006  1100
   1007  1100				   .L0225		;  dim _Bit7_FireB_Restrainer	=  y
   1008  1100
   1009  1100				   .
   1010  1100							; 
   1011  1100
   1012  1100				   .L0226		;  dim new_room_player1y  =  var0
   1013  1100
   1014  1100				   .L0227		;  dim new_room_player1x  =  var1
   1015  1100
   1016  1100				   .L0228		;  dim gamenumber  =  var2
   1017  1100
   1018  1100				   .
   1019  1100							; 
   1020  1100
   1021  1100				   .L0229		;  dim max_pub_level_bcd1  =  var3
   1022  1100
   1023  1100				   .L0230		;  dim max_pub_level_bcd2  =  var4
   1024  1100
   1025  1100				   .L0231		;  dim max_pub_level_bcd3  =  var5
   1026  1100
   1027  1100				   .L0232		;  dim max_priv_level_bcd1  =	var6
   1028  1100
   1029  1100				   .L0233		;  dim max_priv_level_bcd2  =	var7
   1030  1100
   1031  1100				   .L0234		;  dim max_priv_level_bcd3  =	var8
   1032  1100
   1033  1100				   .
   1034  1100							; 
   1035  1100
   1036  1100				   .L0235		;  dim has_private_levels  =  var9
   1037  1100
   1038  1100				   .L0236		;  dim ball_shoot_x  =  var10
   1039  1100
   1040  1100				   .L0237		;  dim ball_shoot_y  =  var11
   1041  1100
   1042  1100				   .
   1043  1100							; 
   1044  1100
   1045  1100				   .L0238		;  dim men_to_rescue  =  var12
   1046  1100
   1047  1100				   .L0239		;  dim TextIndex  =  var12
   1048  1100
   1049  1100				   .
   1050  1100							; 
   1051  1100
   1052  1100				   .L0240		;  dim bonus_bcd_counter  =  var13
   1053  1100
   1054  1100				   .
   1055  1100							; 
   1056  1100
   1057  1100				   .
   1058  1100							; 
   1059  1100
   1060  1100				   .
   1061  1100							; 
   1062  1100
   1063  1100				   .
   1064  1100							; 
   1065  1100
   1066  1100				   .
   1067  1100							; 
   1068  1100
   1069  1100				   .
   1070  1100							; 
   1071  1100
   1072  1100				   .
   1073  1100							; 
   1074  1100
   1075  1100				   .
   1076  1100							; 
   1077  1100
   1078  1100				   .
   1079  1100							; 
   1080  1100
   1081  1100				   .
   1082  1100							; 
   1083  1100
   1084  1100				   .
   1085  1100							; 
   1086  1100
   1087  1100				   .L0241		;  dim w_room_definition_start  =  w095
   1088  1100
   1089  1100				   .
   1090  1100							; 
   1091  1100
   1092  1100				   .L0242		;  dim r_level_bonus_bcd_points  =  r095
   1093  1100
   1094  1100				   .L0243		;  dim w_level_bonus_bcd_points  =  w095
   1095  1100
   1096  1100				   .L0244		;  dim r_men_to_rescue_in_this_level =  r096
   1097  1100
   1098  1100				   .L0245		;  dim w_men_to_rescue_in_this_level =  w096
   1099  1100
   1100  1100				   .L0246		;  dim r_BitOp_room_type  =  r097
   1101  1100
   1102  1100				   .L0247		;  dim w_BitOp_room_type  =  w097
   1103  1100
   1104  1100				   .L0248		;  dim r_Bit0_room_type_top  =  r097
   1105  1100
   1106  1100				   .L0249		;  dim w_Bit0_room_type_top  =  w097
   1107  1100
   1108  1100				   .L0250		;  dim r_room_color_top  =  r098
   1109  1100
   1110  1100				   .L0251		;  dim w_room_color_top  =  w098
   1111  1100
   1112  1100				   .L0252		;  dim r_room_color_middle  =	r099
   1113  1100
   1114  1100				   .L0253		;  dim w_room_color_middle  =	w099
   1115  1100
   1116  1100				   .L0254		;  dim r_room_color_bottom  =	r103
   1117  1100
   1118  1100				   .L0255		;  dim w_room_color_bottom  =	w103
   1119  1100
   1120  1100				   .L0256		;  dim r_roommate_type_and_range  =  r104
   1121  1100
   1122  1100				   .L0257		;  dim w_roommate_type_and_range  =  w104
   1123  1100
   1124  1100				   .L0258		;  dim r_roommate_startpos_x  =  r105
   1125  1100
   1126  1100				   .L0259		;  dim w_roommate_startpos_x  =  w105
   1127  1100
   1128  1100				   .L0260		;  dim r_roommate_startpos_y  =  r106
   1129  1100
   1130  1100				   .L0261		;  dim w_roommate_startpos_y  =  w106
   1131  1100
   1132  1100				   .L0262		;  dim r_extra_wall_type_and_range  =	r107
   1133  1100
   1134  1100				   .L0263		;  dim w_extra_wall_type_and_range  =	w107
   1135  1100
   1136  1100				   .L0264		;  dim r_extra_wall_width  =  r108
   1137  1100
   1138  1100				   .L0265		;  dim w_extra_wall_width  =  w108
   1139  1100
   1140  1100				   .L0266		;  dim r_extra_wall_height  =	r109
   1141  1100
   1142  1100				   .L0267		;  dim w_extra_wall_height  =	w109
   1143  1100
   1144  1100				   .L0268		;  dim r_extra_wall_startpos_x  =  r110
   1145  1100
   1146  1100				   .L0269		;  dim w_extra_wall_startpos_x  =  w110
   1147  1100
   1148  1100				   .L0270		;  dim r_extra_wall_startpos_y  =  r111
   1149  1100
   1150  1100				   .L0271		;  dim w_extra_wall_startpos_y  =  w111
   1151  1100
   1152  1100				   .
   1153  1100							; 
   1154  1100
   1155  1100				   .
   1156  1100							; 
   1157  1100
   1158  1100				   ._Start
   1159  1100							; _Start
   1160  1100
   1161  1100				   .L0272		;  asm
   1162  1100
   1163  1100		       a9 00		      lda	#0
   1164  1102
   1165  1102		       a2 4b		      ldx	#75
   1166  1104
   1167  1104				   .clear_ram
   1168  1104
   1169  1104		       ca		      dex
   1170  1105
   1171  1105		       95 a4		      sta	var0,x
   1172  1107
   1173  1107		       d0 fb		      bne	.clear_ram
   1174  1109
   1175  1109				   .
   1176  1109							; 
   1177  1109
   1178  1109				   .L0273		;  WriteSendBuffer  =	req_load_menu  :  _Bit5_Request_Pending{5}  =  1  :  COLUP0  =	_1C  :	scorecolor  =  _0E
   1179  1109
   1180  1109		       a9 09		      LDA	#req_load_menu
   1181  110b		       8d f1 1f 	      STA	WriteSendBuffer
   1182  110e		       a5 ec		      LDA	_Bit5_Request_Pending
   1183  1110		       09 20		      ORA	#32
   1184  1112		       85 ec		      STA	_Bit5_Request_Pending
   1185  1114		       a9 1c		      LDA	#_1C
   1186  1116		       85 06		      STA	COLUP0
   1187  1118		       a9 0e		      LDA	#_0E
   1188  111a		       85 a3		      STA	scorecolor
   1189  111c				   .L0274		;  score  =  1
   1190  111c
   1191  111c		       a9 01		      LDA	#$01
   1192  111e		       85 95		      STA	score+2
   1193  1120		       a9 00		      LDA	#$00
   1194  1122		       85 94		      STA	score+1
   1195  1124		       a9 00		      LDA	#$00
   1196  1126		       85 93		      STA	score
   1197  1128				   .L0275		;  gamenumber	=  1  :  missile0height  =  1
   1198  1128
   1199  1128		       a9 01		      LDA	#1
   1200  112a		       85 a6		      STA	gamenumber
   1201  112c		       85 90		      STA	missile0height
   1202  112e				   .L0276		;  new_room_player1y  =  player_min_y	:  Safe_Point_P1_y  =  player_min_y
   1203  112e
   1204  112e		       a9 02		      LDA	#player_min_y
   1205  1130		       85 a4		      STA	new_room_player1y
   1206  1132		       85 e1		      STA	Safe_Point_P1_y
   1207  1134				   .L0277		;  new_room_player1x  =  30  :  player1x  =  30  :  Safe_Point_P1_x  =  30
   1208  1134
   1209  1134		       a9 1e		      LDA	#30
   1210  1136		       85 a5		      STA	new_room_player1x
   1211  1138		       85 81		      STA	player1x
   1212  113a		       85 e0		      STA	Safe_Point_P1_x
   1213  113c				   .L0278		;  AUDV0  =  0  :  AUDV1  =  0  :  frame_counter  =  0  :  player0x  =  0  :  bally  =  0  :  player1y  =  0
   1214  113c
   1215  113c		       a9 00		      LDA	#0
   1216  113e		       85 19		      STA	AUDV0
   1217  1140		       85 1a		      STA	AUDV1
   1218  1142		       85 d5		      STA	frame_counter
   1219  1144		       85 80		      STA	player0x
   1220  1146		       85 89		      STA	bally
   1221  1148		       85 86		      STA	player1y
   1222  114a				   .L0279		;  missile0x  =  200  :  missile0y  =	200  :	w_extra_wall_startpos_x  =  200  :  w_roommate_startpos_y  =  200  :  player0y	=  200
   1223  114a
   1224  114a		       a9 c8		      LDA	#200
   1225  114c		       85 82		      STA	missile0x
   1226  114e		       85 91		      STA	missile0y
   1227  1150		       8d 6e f0 	      STA	w_extra_wall_startpos_x
   1228  1153		       8d 6a f0 	      STA	w_roommate_startpos_y
   1229  1156		       85 85		      STA	player0y
   1230  1158				   .
   1231  1158							; 
   1232  1158
   1233  1158				   .
   1234  1158							; 
   1235  1158
   1236  1158				   .
   1237  1158							; 
   1238  1158
   1239  1158				   .
   1240  1158							; 
   1241  1158
   1242  1158				   .
   1243  1158							; 
   1244  1158
   1245  1158				   .L0280		;  pfclear
   1246  1158
   1247  1158		       a9 00		      LDA	#0
   1248  115a		       85 ee		      sta	temp7
   1249  115c		       a9 91		      lda	#>(ret_point1-1)
   1250  115e		       48		      pha
   1251  115f		       a9 71		      lda	#<(ret_point1-1)
   1252  1161		       48		      pha
   1253  1162		       a9 f2		      lda	#>(pfclear-1)
   1254  1164		       48		      pha
   1255  1165		       a9 ee		      lda	#<(pfclear-1)
   1256  1167		       48		      pha
   1257  1168		       a5 ee		      lda	temp7
   1258  116a		       48		      pha
   1259  116b		       8a		      txa
   1260  116c		       48		      pha
   1261  116d		       a2 04		      ldx	#4
   1262  116f		       4c e8 ff 	      jmp	BS_jsr
   1263  1172				   ret_point1
   1264  1172				   .L0281		;  player1color:
   1265  1172
   1266  1172		       a2 14		      LDX	#<playercolorL0281_1
   1267  1174		       86 87		      STX	player1color
   1268  1176		       a9 fc		      LDA	#>playercolorL0281_1
   1269  1178		       85 88		      STA	player1color+1
   1270  117a				   .
   1271  117a							; 
   1272  117a
   1273  117a				   .L0282		;  goto _titlescreen_menu bank2
   1274  117a
   1275  117a		       85 ee		      sta	temp7
   1276  117c		       a9 b0		      lda	#>(._titlescreen_menu-1)
   1277  117e		       48		      pha
   1278  117f		       a9 ff		      lda	#<(._titlescreen_menu-1)
   1279  1181		       48		      pha
   1280  1182		       a5 ee		      lda	temp7
   1281  1184		       48		      pha
   1282  1185		       8a		      txa
   1283  1186		       48		      pha
   1284  1187		       a2 02		      ldx	#2
   1285  1189		       4c e8 ff 	      jmp	BS_jsr
   1286  118c				   .
   1287  118c							; 
   1288  118c
   1289  118c				   .
   1290  118c							; 
   1291  118c
   1292  118c				   .
   1293  118c							; 
   1294  118c
   1295  118c				   .
   1296  118c							; 
   1297  118c
   1298  118c				   .
   1299  118c							; 
   1300  118c
   1301  118c				   .__Main_Loop
   1302  118c							; __Main_Loop
   1303  118c
   1304  118c				   .L0283		;  if switchreset then goto _Reset_To_Start
   1305  118c
   1306  118c		       a9 01		      lda	#1
   1307  118e		       2c 82 02 	      bit	SWCHB
   1308  1191		       d0 03		      BNE	.skipL0283
   1309  1193				   .condpart0
   1310  1193		       4c ce 9b 	      jmp	._Reset_To_Start
   1311  1196
   1312  1196				   .skipL0283
   1313  1196				   .
   1314  1196							; 
   1315  1196
   1316  1196				   .L0284		;  COLUPF  =  r_room_color_top
   1317  1196
   1318  1196		       ad e2 f0 	      LDA	r_room_color_top
   1319  1199		       85 08		      STA	COLUPF
   1320  119b				   .L0285		;  NUSIZ1  =  $05
   1321  119b
   1322  119b		       a9 05		      LDA	#$05
   1323  119d		       85 05		      STA	NUSIZ1
   1324  119f				   .L0286		;  NUSIZ0  =  $10
   1325  119f
   1326  119f		       a9 10		      LDA	#$10
   1327  11a1		       85 04		      STA	NUSIZ0
   1328  11a3				   .L0287		;  COLUBK  =  _00
   1329  11a3
   1330  11a3		       a9 00		      LDA	#_00
   1331  11a5		       85 09		      STA	COLUBK
   1332  11a7				   .L0288		;  TextColor  =  $0E
   1333  11a7
   1334  11a7		       a9 0e		      LDA	#$0E
   1335  11a9		       85 f5		      STA	TextColor
   1336  11ab				   .
   1337  11ab							; 
   1338  11ab
   1339  11ab				   .L0289		;  if frame_counter{2} then player1: 
   1340  11ab
   1341  11ab		       a5 d5		      LDA	frame_counter
   1342  11ad		       29 04		      AND	#4
   1343  11af		       f0 0c		      BEQ	.skipL0289
   1344  11b1				   .condpart1
   1345  11b1		       a2 1c		      LDX	#<player1then_1
   1346  11b3		       86 8c		      STX	player1pointerlo
   1347  11b5		       a9 fc		      LDA	#>player1then_1
   1348  11b7		       85 8d		      STA	player1pointerhi
   1349  11b9		       a9 07		      LDA	#7
   1350  11bb		       85 8f		      STA	player1height
   1351  11bd				   .skipL0289
   1352  11bd				   .L0290		;  if ! frame_counter{2} then player1:
   1353  11bd
   1354  11bd		       a5 d5		      LDA	frame_counter
   1355  11bf		       29 04		      AND	#4
   1356  11c1		       d0 0c		      BNE	.skipL0290
   1357  11c3				   .condpart2
   1358  11c3		       a2 24		      LDX	#<player2then_1
   1359  11c5		       86 8c		      STX	player1pointerlo
   1360  11c7		       a9 fc		      LDA	#>player2then_1
   1361  11c9		       85 8d		      STA	player1pointerhi
   1362  11cb		       a9 07		      LDA	#7
   1363  11cd		       85 8f		      STA	player1height
   1364  11cf				   .skipL0290
   1365  11cf				   .
   1366  11cf							; 
   1367  11cf
   1368  11cf				   .L0291		;  on roommate_type goto _roommate_Enemy_def _roommate_Air_Missile_def _roommate_Fuel_def _roommate_Soldier_def
   1369  11cf
   1370  11cf		       a6 de		      LDX	roommate_type
   1371  11d1		       bd da 91 	      LDA	.L0291jumptablehi,x
   1372  11d4		       48		      PHA
   1373  11d5		       bd de 91 	      LDA	.L0291jumptablelo,x
   1374  11d8		       48		      PHA
   1375  11d9		       60		      RTS
   1376  11da				   .L0291jumptablehi
   1377  11da		       91		      .byte.b	>(._roommate_Enemy_def-1)
   1378  11db		       92		      .byte.b	>(._roommate_Air_Missile_def-1)
   1379  11dc		       92		      .byte.b	>(._roommate_Fuel_def-1)
   1380  11dd		       92		      .byte.b	>(._roommate_Soldier_def-1)
   1381  11de				   .L0291jumptablelo
   1382  11de		       e1		      .byte.b	<(._roommate_Enemy_def-1)
   1383  11df		       08		      .byte.b	<(._roommate_Air_Missile_def-1)
   1384  11e0		       17		      .byte.b	<(._roommate_Fuel_def-1)
   1385  11e1		       26		      .byte.b	<(._roommate_Soldier_def-1)
   1386  11e2				   .
   1387  11e2							; 
   1388  11e2
   1389  11e2				   ._roommate_Enemy_def
   1390  11e2							; _roommate_Enemy_def
   1391  11e2
   1392  11e2				   .L0292		;  if frame_counter{2} then player0: 
   1393  11e2
   1394  11e2		       a5 d5		      LDA	frame_counter
   1395  11e4		       29 04		      AND	#4
   1396  11e6		       f0 0c		      BEQ	.skipL0292
   1397  11e8				   .condpart3
   1398  11e8		       a2 2c		      LDX	#<player3then_0
   1399  11ea		       86 8a		      STX	player0pointerlo
   1400  11ec		       a9 fc		      LDA	#>player3then_0
   1401  11ee		       85 8b		      STA	player0pointerhi
   1402  11f0		       a9 06		      LDA	#6
   1403  11f2		       85 8e		      STA	player0height
   1404  11f4				   .skipL0292
   1405  11f4				   .L0293		;  if !frame_counter{2} then player0: 
   1406  11f4
   1407  11f4		       a5 d5		      LDA	frame_counter
   1408  11f6		       29 04		      AND	#4
   1409  11f8		       d0 0c		      BNE	.skipL0293
   1410  11fa				   .condpart4
   1411  11fa		       a2 33		      LDX	#<player4then_0
   1412  11fc		       86 8a		      STX	player0pointerlo
   1413  11fe		       a9 fc		      LDA	#>player4then_0
   1414  1200		       85 8b		      STA	player0pointerhi
   1415  1202		       a9 06		      LDA	#6
   1416  1204		       85 8e		      STA	player0height
   1417  1206				   .skipL0293
   1418  1206				   .L0294		;  goto _roommate_End_def
   1419  1206
   1420  1206		       4c 4b 92 	      jmp	._roommate_End_def
   1421  1209
   1422  1209				   .
   1423  1209							; 
   1424  1209
   1425  1209				   ._roommate_Air_Missile_def
   1426  1209							; _roommate_Air_Missile_def
   1427  1209
   1428  1209				   .L0295		;  player0: 
   1429  1209
   1430  1209		       a2 3a		      LDX	#<playerL0295_0
   1431  120b		       86 8a		      STX	player0pointerlo
   1432  120d		       a9 fc		      LDA	#>playerL0295_0
   1433  120f		       85 8b		      STA	player0pointerhi
   1434  1211		       a9 0b		      LDA	#11
   1435  1213		       85 8e		      STA	player0height
   1436  1215				   .L0296		;  goto _roommate_End_def
   1437  1215
   1438  1215		       4c 4b 92 	      jmp	._roommate_End_def
   1439  1218
   1440  1218				   .
   1441  1218							; 
   1442  1218
   1443  1218				   ._roommate_Fuel_def
   1444  1218							; _roommate_Fuel_def
   1445  1218
   1446  1218				   .L0297		;  player0: 
   1447  1218
   1448  1218		       a2 46		      LDX	#<playerL0297_0
   1449  121a		       86 8a		      STX	player0pointerlo
   1450  121c		       a9 fc		      LDA	#>playerL0297_0
   1451  121e		       85 8b		      STA	player0pointerhi
   1452  1220		       a9 18		      LDA	#24
   1453  1222		       85 8e		      STA	player0height
   1454  1224				   .L0298		;  goto _roommate_End_def
   1455  1224
   1456  1224		       4c 4b 92 	      jmp	._roommate_End_def
   1457  1227
   1458  1227				   .
   1459  1227							; 
   1460  1227
   1461  1227				   ._roommate_Soldier_def
   1462  1227							; _roommate_Soldier_def
   1463  1227
   1464  1227				   .L0299		;  if frame_counter{2} then player0: 
   1465  1227
   1466  1227		       a5 d5		      LDA	frame_counter
   1467  1229		       29 04		      AND	#4
   1468  122b		       f0 0c		      BEQ	.skipL0299
   1469  122d				   .condpart5
   1470  122d		       a2 5f		      LDX	#<player5then_0
   1471  122f		       86 8a		      STX	player0pointerlo
   1472  1231		       a9 fc		      LDA	#>player5then_0
   1473  1233		       85 8b		      STA	player0pointerhi
   1474  1235		       a9 03		      LDA	#3
   1475  1237		       85 8e		      STA	player0height
   1476  1239				   .skipL0299
   1477  1239				   .L0300		;  if !frame_counter{2} then player0: 
   1478  1239
   1479  1239		       a5 d5		      LDA	frame_counter
   1480  123b		       29 04		      AND	#4
   1481  123d		       d0 0c		      BNE	.skipL0300
   1482  123f				   .condpart6
   1483  123f		       a2 63		      LDX	#<player6then_0
   1484  1241		       86 8a		      STX	player0pointerlo
   1485  1243		       a9 fc		      LDA	#>player6then_0
   1486  1245		       85 8b		      STA	player0pointerhi
   1487  1247		       a9 03		      LDA	#3
   1488  1249		       85 8e		      STA	player0height
   1489  124b				   .skipL0300
   1490  124b				   ._roommate_End_def
   1491  124b							; _roommate_End_def
   1492  124b
   1493  124b				   .
   1494  124b							; 
   1495  124b
   1496  124b				   .
   1497  124b							; 
   1498  124b
   1499  124b				   .L0301		;  if !frame_counter{4} then _Skip_Wall_Movement
   1500  124b
   1501  124b		       a5 d5		      LDA	frame_counter
   1502  124d		       29 10		      AND	#16
   1503  124f					      if	((* - ._Skip_Wall_Movement) < 127) && ((* - ._Skip_Wall_Movement) > -128)
   1504  124f		       f0 35		      BEQ	._Skip_Wall_Movement
   1505  1251				  -	      else
   1506  1251				  -	      bne	.0skip_Skip_Wall_Movement
   1507  1251				  -	      jmp	._Skip_Wall_Movement
   1508  1251				  -.0skip_Skip_Wall_Movement
   1509  1251					      endif
   1510  1251				   .L0302		;  if r_extra_wall_type_and_range{1}  ||  r_extra_wall_type_and_range	<  2 then _Finish_Interior_Movement
   1511  1251
   1512  1251		       ad eb f0 	      LDA	r_extra_wall_type_and_range
   1513  1254		       29 02		      AND	#2
   1514  1256					      if	((* - ._Finish_Interior_Movement) < 127) && ((* - ._Finish_Interior_Movement) > -128)
   1515  1256		       d0 58		      BNE	._Finish_Interior_Movement
   1516  1258				  -	      else
   1517  1258				  -	      beq	.1skip_Finish_Interior_Movement
   1518  1258				  -	      jmp	._Finish_Interior_Movement
   1519  1258				  -.1skip_Finish_Interior_Movement
   1520  1258					      endif
   1521  1258		       ad eb f0 	      LDA	r_extra_wall_type_and_range
   1522  125b		       c9 02		      CMP	#2
   1523  125d					      if	((* - ._Finish_Interior_Movement) < 127) && ((* - ._Finish_Interior_Movement) > -128)
   1524  125d		       90 51		      bcc	._Finish_Interior_Movement
   1525  125f				  -	      else
   1526  125f				  -	      bcs	.2skip_Finish_Interior_Movement
   1527  125f				  -	      jmp	._Finish_Interior_Movement
   1528  125f				  -.2skip_Finish_Interior_Movement
   1529  125f					      endif
   1530  125f				   .L0303		;  if _Bit1_Wall_Dir{1} then extra_wall_move_x  =  extra_wall_move_x  -  1 else extra_wall_move_x  =  extra_wall_move_x  +  1
   1531  125f
   1532  125f		       a5 ec		      LDA	_Bit1_Wall_Dir
   1533  1261		       29 02		      AND	#2
   1534  1263		       f0 05		      BEQ	.skipL0303
   1535  1265				   .condpart7
   1536  1265		       c6 dc		      DEC	extra_wall_move_x
   1537  1267		       4c 6c 92 	      jmp	.skipelse0
   1538  126a				   .skipL0303
   1539  126a		       e6 dc		      INC	extra_wall_move_x
   1540  126c				   .skipelse0
   1541  126c				   .L0304		;  if extra_wall_move_x  =  r_extra_wall_type_and_range then _Bit1_Wall_Dir{1}  =  1
   1542  126c
   1543  126c		       a5 dc		      LDA	extra_wall_move_x
   1544  126e		       cd eb f0 	      CMP	r_extra_wall_type_and_range
   1545  1271		       d0 06		      BNE	.skipL0304
   1546  1273				   .condpart8
   1547  1273		       a5 ec		      LDA	_Bit1_Wall_Dir
   1548  1275		       09 02		      ORA	#2
   1549  1277		       85 ec		      STA	_Bit1_Wall_Dir
   1550  1279				   .skipL0304
   1551  1279				   .L0305		;  if !extra_wall_move_x then _Bit1_Wall_Dir{1}  =  0
   1552  1279
   1553  1279		       a5 dc		      LDA	extra_wall_move_x
   1554  127b		       d0 06		      BNE	.skipL0305
   1555  127d				   .condpart9
   1556  127d		       a5 ec		      LDA	_Bit1_Wall_Dir
   1557  127f		       29 fd		      AND	#253
   1558  1281		       85 ec		      STA	_Bit1_Wall_Dir
   1559  1283				   .skipL0305
   1560  1283				   .L0306		;  goto _Finish_Interior_Movement
   1561  1283
   1562  1283		       4c b0 92 	      jmp	._Finish_Interior_Movement
   1563  1286
   1564  1286				   ._Skip_Wall_Movement
   1565  1286							; _Skip_Wall_Movement
   1566  1286
   1567  1286				   .
   1568  1286							; 
   1569  1286
   1570  1286				   .L0307		;  if r_roommate_type_and_range  <  4 then _Finish_Interior_Movement
   1571  1286
   1572  1286		       ad e8 f0 	      LDA	r_roommate_type_and_range
   1573  1289		       c9 04		      CMP	#4
   1574  128b					      if	((* - ._Finish_Interior_Movement) < 127) && ((* - ._Finish_Interior_Movement) > -128)
   1575  128b		       90 23		      bcc	._Finish_Interior_Movement
   1576  128d				  -	      else
   1577  128d				  -	      bcs	.3skip_Finish_Interior_Movement
   1578  128d				  -	      jmp	._Finish_Interior_Movement
   1579  128d				  -.3skip_Finish_Interior_Movement
   1580  128d					      endif
   1581  128d				   .L0308		;  if _Bit0_roommate_Dir{0} then roommate_move_x  =  roommate_move_x  -  1 else roommate_move_x  =  roommate_move_x  +  1
   1582  128d
   1583  128d		       a5 ec		      LDA	_Bit0_roommate_Dir
   1584  128f		       4a		      LSR
   1585  1290		       90 05		      BCC	.skipL0308
   1586  1292				   .condpart10
   1587  1292		       c6 dd		      DEC	roommate_move_x
   1588  1294		       4c 99 92 	      jmp	.skipelse1
   1589  1297				   .skipL0308
   1590  1297		       e6 dd		      INC	roommate_move_x
   1591  1299				   .skipelse1
   1592  1299				   .L0309		;  if roommate_move_x	=  r_roommate_type_and_range then _Bit0_roommate_Dir{0}  =  1
   1593  1299
   1594  1299		       a5 dd		      LDA	roommate_move_x
   1595  129b		       cd e8 f0 	      CMP	r_roommate_type_and_range
   1596  129e		       d0 06		      BNE	.skipL0309
   1597  12a0				   .condpart11
   1598  12a0		       a5 ec		      LDA	_Bit0_roommate_Dir
   1599  12a2		       09 01		      ORA	#1
   1600  12a4		       85 ec		      STA	_Bit0_roommate_Dir
   1601  12a6				   .skipL0309
   1602  12a6				   .L0310		;  if !roommate_move_x then _Bit0_roommate_Dir{0}  =  0
   1603  12a6
   1604  12a6		       a5 dd		      LDA	roommate_move_x
   1605  12a8		       d0 06		      BNE	.skipL0310
   1606  12aa				   .condpart12
   1607  12aa		       a5 ec		      LDA	_Bit0_roommate_Dir
   1608  12ac		       29 fe		      AND	#254
   1609  12ae		       85 ec		      STA	_Bit0_roommate_Dir
   1610  12b0				   .skipL0310
   1611  12b0				   .
   1612  12b0							; 
   1613  12b0
   1614  12b0				   ._Finish_Interior_Movement
   1615  12b0							; _Finish_Interior_Movement
   1616  12b0
   1617  12b0				   .
   1618  12b0							; 
   1619  12b0
   1620  12b0				   .L0311		;  frame_counter  =  frame_counter  -	1
   1621  12b0
   1622  12b0		       c6 d5		      DEC	frame_counter
   1623  12b2				   .
   1624  12b2							; 
   1625  12b2
   1626  12b2				   .
   1627  12b2							; 
   1628  12b2
   1629  12b2				   .L0312		;  if r_extra_wall_startpos_x	=  200 then _Skip_extra_Wall
   1630  12b2
   1631  12b2		       ad ee f0 	      LDA	r_extra_wall_startpos_x
   1632  12b5		       c9 c8		      CMP	#200
   1633  12b7					      if	((* - ._Skip_extra_Wall) < 127) && ((* - ._Skip_extra_Wall) > -128)
   1634  12b7		       f0 3a		      BEQ	._Skip_extra_Wall
   1635  12b9				  -	      else
   1636  12b9				  -	      bne	.4skip_Skip_extra_Wall
   1637  12b9				  -	      jmp	._Skip_extra_Wall
   1638  12b9				  -.4skip_Skip_extra_Wall
   1639  12b9					      endif
   1640  12b9				   .L0313		;  if _BitOp_Ball_Shot_Dir  &&  frame_counter{0} then _Skip_extra_Wall
   1641  12b9
   1642  12b9		       a5 d6		      LDA	_BitOp_Ball_Shot_Dir
   1643  12bb		       f0 05		      BEQ	.skipL0313
   1644  12bd				   .condpart13
   1645  12bd		       a5 d5		      LDA	frame_counter
   1646  12bf		       4a		      LSR
   1647  12c0					      if	((* - ._Skip_extra_Wall) < 127) && ((* - ._Skip_extra_Wall) > -128)
   1648  12c0		       b0 31		      bcs	._Skip_extra_Wall
   1649  12c2				  -	      else
   1650  12c2				  -	      bcc	.5skip_Skip_extra_Wall
   1651  12c2				  -	      jmp	._Skip_extra_Wall
   1652  12c2				  -.5skip_Skip_extra_Wall
   1653  12c2					      endif
   1654  12c2				   .skipL0313
   1655  12c2				   .L0314		;  ballx  =  r_extra_wall_startpos_x  +  extra_wall_move_x
   1656  12c2
   1657  12c2		       ad ee f0 	      LDA	r_extra_wall_startpos_x
   1658  12c5		       18		      CLC
   1659  12c6		       65 dc		      ADC	extra_wall_move_x
   1660  12c8		       85 84		      STA	ballx
   1661  12ca				   .L0315		;  if r_extra_wall_type_and_range{1}  &&  frame_counter  <  r_extra_wall_type_and_range then bally  =	0 else bally  =  r_extra_wall_startpos_y
   1662  12ca
   1663  12ca		       ad eb f0 	      LDA	r_extra_wall_type_and_range
   1664  12cd		       29 02		      AND	#2
   1665  12cf		       f0 0e		      BEQ	.skipL0315
   1666  12d1				   .condpart14
   1667  12d1		       a5 d5		      LDA	frame_counter
   1668  12d3		       cd eb f0 	      CMP	r_extra_wall_type_and_range
   1669  12d6		       b0 07		      BCS	.skip14then
   1670  12d8				   .condpart15
   1671  12d8		       a9 00		      LDA	#0
   1672  12da		       85 89		      STA	bally
   1673  12dc		       4c e4 92 	      jmp	.skipelse2
   1674  12df				   .skip14then
   1675  12df				   .skipL0315
   1676  12df		       ad ef f0 	      LDA	r_extra_wall_startpos_y
   1677  12e2		       85 89		      STA	bally
   1678  12e4				   .skipelse2
   1679  12e4				   .L0316		;  ballheight	=  r_extra_wall_height
   1680  12e4
   1681  12e4		       ad ed f0 	      LDA	r_extra_wall_height
   1682  12e7		       85 92		      STA	ballheight
   1683  12e9				   .L0317		;  CTRLPF  =  r_extra_wall_width  |  1
   1684  12e9
   1685  12e9		       ad ec f0 	      LDA	r_extra_wall_width
   1686  12ec		       09 01		      ORA	#1
   1687  12ee		       85 0a		      STA	CTRLPF
   1688  12f0				   .L0318		;  goto _Skip_ball_shot
   1689  12f0
   1690  12f0		       4c 07 93 	      jmp	._Skip_ball_shot
   1691  12f3
   1692  12f3				   ._Skip_extra_Wall
   1693  12f3							; _Skip_extra_Wall
   1694  12f3
   1695  12f3				   .
   1696  12f3							; 
   1697  12f3
   1698  12f3				   .L0319		;  if !_BitOp_Ball_Shot_Dir then _Skip_ball_shot
   1699  12f3
   1700  12f3		       a5 d6		      LDA	_BitOp_Ball_Shot_Dir
   1701  12f5					      if	((* - ._Skip_ball_shot) < 127) && ((* - ._Skip_ball_shot) > -128)
   1702  12f5		       f0 10		      BEQ	._Skip_ball_shot
   1703  12f7				  -	      else
   1704  12f7				  -	      bne	.6skip_Skip_ball_shot
   1705  12f7				  -	      jmp	._Skip_ball_shot
   1706  12f7				  -.6skip_Skip_ball_shot
   1707  12f7					      endif
   1708  12f7				   .L0320		;  ballx  =  ball_shoot_x
   1709  12f7
   1710  12f7		       a5 ae		      LDA	ball_shoot_x
   1711  12f9		       85 84		      STA	ballx
   1712  12fb				   .L0321		;  bally  =  ball_shoot_y
   1713  12fb
   1714  12fb		       a5 af		      LDA	ball_shoot_y
   1715  12fd		       85 89		      STA	bally
   1716  12ff				   .L0322		;  ballheight	=  1
   1717  12ff
   1718  12ff		       a9 01		      LDA	#1
   1719  1301		       85 92		      STA	ballheight
   1720  1303				   .L0323		;  CTRLPF  =  %00010001
   1721  1303
   1722  1303		       a9 11		      LDA	#%00010001
   1723  1305		       85 0a		      STA	CTRLPF
   1724  1307				   ._Skip_ball_shot
   1725  1307							; _Skip_ball_shot
   1726  1307
   1727  1307				   .
   1728  1307							; 
   1729  1307
   1730  1307				   .
   1731  1307							; 
   1732  1307
   1733  1307				   .L0324		;  if r_roommate_startpos_y  =  200 then _Skip_enemy
   1734  1307
   1735  1307		       ad ea f0 	      LDA	r_roommate_startpos_y
   1736  130a		       c9 c8		      CMP	#200
   1737  130c					      if	((* - ._Skip_enemy) < 127) && ((* - ._Skip_enemy) > -128)
   1738  130c		       f0 0d		      BEQ	._Skip_enemy
   1739  130e				  -	      else
   1740  130e				  -	      bne	.7skip_Skip_enemy
   1741  130e				  -	      jmp	._Skip_enemy
   1742  130e				  -.7skip_Skip_enemy
   1743  130e					      endif
   1744  130e				   .L0325		;  player0x  =  r_roommate_startpos_x	+  roommate_move_x
   1745  130e
   1746  130e		       ad e9 f0 	      LDA	r_roommate_startpos_x
   1747  1311		       18		      CLC
   1748  1312		       65 dd		      ADC	roommate_move_x
   1749  1314		       85 80		      STA	player0x
   1750  1316				   .L0326		;  player0y  =  r_roommate_startpos_y
   1751  1316
   1752  1316		       ad ea f0 	      LDA	r_roommate_startpos_y
   1753  1319		       85 85		      STA	player0y
   1754  131b				   ._Skip_enemy
   1755  131b							; _Skip_enemy
   1756  131b
   1757  131b				   .
   1758  131b							; 
   1759  131b
   1760  131b				   .
   1761  131b							; 
   1762  131b
   1763  131b				   .
   1764  131b							; 
   1765  131b
   1766  131b				   .
   1767  131b							; 
   1768  131b
   1769  131b				   .L0327		;  if delay_counter then delay_counter  =  delay_counter  -  1  :  temp4  =  SWCHA  :	goto _skip_game_action
   1770  131b
   1771  131b		       a5 d4		      LDA	delay_counter
   1772  131d		       f0 0a		      BEQ	.skipL0327
   1773  131f				   .condpart16
   1774  131f		       c6 d4		      DEC	delay_counter
   1775  1321		       ad 80 02 	      LDA	SWCHA
   1776  1324		       85 9f		      STA	temp4
   1777  1326		       4c 9c 98 	      jmp	._skip_game_action
   1778  1329
   1779  1329				   .skipL0327
   1780  1329				   .
   1781  1329							; 
   1782  1329
   1783  1329				   .L0328		;  if _Bit5_Request_Pending{5}  &&  ReceiveBufferSize	>  response_size_minus_1 then goto _Change_Room
   1784  1329
   1785  1329		       a5 ec		      LDA	_Bit5_Request_Pending
   1786  132b		       29 20		      AND	#32
   1787  132d		       f0 0a		      BEQ	.skipL0328
   1788  132f				   .condpart17
   1789  132f		       a9 1c		      LDA	#response_size_minus_1
   1790  1331		       cd f3 1f 	      CMP	ReceiveBufferSize
   1791  1334		       b0 03		      BCS	.skip17then
   1792  1336				   .condpart18
   1793  1336		       4c 6f 9b 	      jmp	._Change_Room
   1794  1339
   1795  1339				   .skip17then
   1796  1339				   .skipL0328
   1797  1339				   .
   1798  1339							; 
   1799  1339
   1800  1339				   .L0329		;  if _Bit5_Request_Pending{5}  ||  _Bit4_Game_Over{4} then temp4  =  SWCHA  :  goto _skip_game_action
   1801  1339
   1802  1339		       a5 ec		      LDA	_Bit5_Request_Pending
   1803  133b		       29 20		      AND	#32
   1804  133d		       f0 03		      BEQ	.skipL0329
   1805  133f				   .condpart19
   1806  133f		       4c 48 93 	      jmp	.condpart20
   1807  1342				   .skipL0329
   1808  1342		       a5 ec		      LDA	_Bit4_Game_Over
   1809  1344		       29 10		      AND	#16
   1810  1346		       f0 08		      BEQ	.skip4OR
   1811  1348				   .condpart20
   1812  1348		       ad 80 02 	      LDA	SWCHA
   1813  134b		       85 9f		      STA	temp4
   1814  134d		       4c 9c 98 	      jmp	._skip_game_action
   1815  1350
   1816  1350				   .skip4OR
   1817  1350				   .
   1818  1350							; 
   1819  1350
   1820  1350				   .L0330		;  if !_Bit2_Level_finished{2} then _game_action
   1821  1350
   1822  1350		       a5 ec		      LDA	_Bit2_Level_finished
   1823  1352		       29 04		      AND	#4
   1824  1354					      if	((* - ._game_action) < 127) && ((* - ._game_action) > -128)
   1825  1354		       f0 77		      BEQ	._game_action
   1826  1356				  -	      else
   1827  1356				  -	      bne	.8skip_game_action
   1828  1356				  -	      jmp	._game_action
   1829  1356				  -.8skip_game_action
   1830  1356					      endif
   1831  1356				   .
   1832  1356							; 
   1833  1356
   1834  1356				   .
   1835  1356							; 
   1836  1356
   1837  1356				   .L0331		;  if pfscore2 then pfscore2  =  pfscore2  /  2  :  score  =  score  +  bonus_level_timer  :  goto _bonus_sound_delay
   1838  1356
   1839  1356		       a5 f3		      LDA	pfscore2
   1840  1358		       f0 17		      BEQ	.skipL0331
   1841  135a				   .condpart21
   1842  135a		       a5 f3		      LDA	pfscore2
   1843  135c		       4a		      lsr
   1844  135d		       85 f3		      STA	pfscore2
   1845  135f		       f8		      SED
   1846  1360		       18		      CLC
   1847  1361		       a5 94		      LDA	score+1
   1848  1363		       69 01		      ADC	#$01
   1849  1365		       85 94		      STA	score+1
   1850  1367		       a5 93		      LDA	score
   1851  1369		       69 00		      ADC	#$00
   1852  136b		       85 93		      STA	score
   1853  136d		       d8		      CLD
   1854  136e		       4c ba 93 	      jmp	._bonus_sound_delay
   1855  1371
   1856  1371				   .skipL0331
   1857  1371				   .
   1858  1371							; 
   1859  1371
   1860  1371				   .
   1861  1371							; 
   1862  1371
   1863  1371				   .L0332		;  if pfscore1 then pfscore1  =  pfscore1  /  4  :  score  =  score  +  bonus_level_lives  :  goto _bonus_sound_delay
   1864  1371
   1865  1371		       a5 f2		      LDA	pfscore1
   1866  1373		       f0 18		      BEQ	.skipL0332
   1867  1375				   .condpart22
   1868  1375		       a5 f2		      LDA	pfscore1
   1869  1377		       4a		      lsr
   1870  1378		       4a		      lsr
   1871  1379		       85 f2		      STA	pfscore1
   1872  137b		       f8		      SED
   1873  137c		       18		      CLC
   1874  137d		       a5 94		      LDA	score+1
   1875  137f		       69 02		      ADC	#$02
   1876  1381		       85 94		      STA	score+1
   1877  1383		       a5 93		      LDA	score
   1878  1385		       69 00		      ADC	#$00
   1879  1387		       85 93		      STA	score
   1880  1389		       d8		      CLD
   1881  138a		       4c ba 93 	      jmp	._bonus_sound_delay
   1882  138d
   1883  138d				   .skipL0332
   1884  138d				   .L0333		;  if ! _Bit3_Safe_Point_reached{3} then WriteToBuffer  =  _sc1  :  WriteToBuffer  =  _sc2  :	WriteToBuffer  =  _sc3	:  WriteSendBuffer  =  req_level_up  :	_Bit3_Safe_Point_reached{3}  =	1
   1885  138d
   1886  138d		       a5 ec		      LDA	_Bit3_Safe_Point_reached
   1887  138f		       29 08		      AND	#8
   1888  1391		       d0 1a		      BNE	.skipL0333
   1889  1393				   .condpart23
   1890  1393		       a5 93		      LDA	_sc1
   1891  1395		       8d f0 1f 	      STA	WriteToBuffer
   1892  1398		       a5 94		      LDA	_sc2
   1893  139a		       8d f0 1f 	      STA	WriteToBuffer
   1894  139d		       a5 95		      LDA	_sc3
   1895  139f		       8d f0 1f 	      STA	WriteToBuffer
   1896  13a2		       a9 01		      LDA	#req_level_up
   1897  13a4		       8d f1 1f 	      STA	WriteSendBuffer
   1898  13a7		       a5 ec		      LDA	_Bit3_Safe_Point_reached
   1899  13a9		       09 08		      ORA	#8
   1900  13ab		       85 ec		      STA	_Bit3_Safe_Point_reached
   1901  13ad				   .skipL0333
   1902  13ad				   .
   1903  13ad							; 
   1904  13ad
   1905  13ad				   .L0334		;  if joy0fire then goto _Level_Up else goto _skip_game_action
   1906  13ad
   1907  13ad		       24 0c		      bit	INPT4
   1908  13af		       30 06		      BMI	.skipL0334
   1909  13b1				   .condpart24
   1910  13b1		       4c a3 9a 	      jmp	._Level_Up
   1911  13b4		       4c ba 93 	      jmp	.skipelse3
   1912  13b7				   .skipL0334
   1913  13b7		       4c 9c 98 	      jmp	._skip_game_action
   1914  13ba
   1915  13ba				   .skipelse3
   1916  13ba				   ._bonus_sound_delay
   1917  13ba							; _bonus_sound_delay
   1918  13ba
   1919  13ba				   .L0335		;  _Ch0_Sound	=  3  :  _Ch0_Duration	=  1  :  _Ch0_Counter  =  0
   1920  13ba
   1921  13ba		       a9 03		      LDA	#3
   1922  13bc		       85 d9		      STA	_Ch0_Sound
   1923  13be		       a9 01		      LDA	#1
   1924  13c0		       85 da		      STA	_Ch0_Duration
   1925  13c2		       a9 00		      LDA	#0
   1926  13c4		       85 db		      STA	_Ch0_Counter
   1927  13c6				   .L0336		;  delay_counter  =  25
   1928  13c6
   1929  13c6		       a9 19		      LDA	#25
   1930  13c8		       85 d4		      STA	delay_counter
   1931  13ca				   .
   1932  13ca							; 
   1933  13ca
   1934  13ca				   .L0337		;  goto _skip_game_action
   1935  13ca
   1936  13ca		       4c 9c 98 	      jmp	._skip_game_action
   1937  13cd
   1938  13cd				   .
   1939  13cd							; 
   1940  13cd
   1941  13cd				   .
   1942  13cd							; 
   1943  13cd
   1944  13cd				   ._game_action
   1945  13cd							; _game_action
   1946  13cd
   1947  13cd				   .
   1948  13cd							; 
   1949  13cd
   1950  13cd				   .L0338		;  if frame_counter then _Skip_dec_game_counter
   1951  13cd
   1952  13cd		       a5 d5		      LDA	frame_counter
   1953  13cf					      if	((* - ._Skip_dec_game_counter) < 127) && ((* - ._Skip_dec_game_counter) > -128)
   1954  13cf		       d0 38		      BNE	._Skip_dec_game_counter
   1955  13d1				  -	      else
   1956  13d1				  -	      beq	.9skip_Skip_dec_game_counter
   1957  13d1				  -	      jmp	._Skip_dec_game_counter
   1958  13d1				  -.9skip_Skip_dec_game_counter
   1959  13d1					      endif
   1960  13d1				   .L0339		;  if bonus_bcd_counter then dec bonus_bcd_counter  =	bonus_bcd_counter  -  1
   1961  13d1
   1962  13d1		       a5 b1		      LDA	bonus_bcd_counter
   1963  13d3		       f0 09		      BEQ	.skipL0339
   1964  13d5				   .condpart25
   1965  13d5		       f8		      SED
   1966  13d6		       a5 b1		      LDA	bonus_bcd_counter
   1967  13d8		       38		      SEC
   1968  13d9		       e9 01		      SBC	#1
   1969  13db		       85 b1		      STA	bonus_bcd_counter
   1970  13dd		       d8		      CLD
   1971  13de				   .skipL0339
   1972  13de				   .
   1973  13de							; 
   1974  13de
   1975  13de				   .L0340		;  if !pfscore2 then _Decrease_live_counter
   1976  13de
   1977  13de		       a5 f3		      LDA	pfscore2
   1978  13e0					      if	((* - ._Decrease_live_counter) < 127) && ((* - ._Decrease_live_counter) > -128)
   1979  13e0		       f0 08		      BEQ	._Decrease_live_counter
   1980  13e2				  -	      else
   1981  13e2				  -	      bne	.10skip_Decrease_live_counter
   1982  13e2				  -	      jmp	._Decrease_live_counter
   1983  13e2				  -.10skip_Decrease_live_counter
   1984  13e2					      endif
   1985  13e2				   .L0341		;  pfscore2  =  pfscore2  /  2
   1986  13e2
   1987  13e2		       a5 f3		      LDA	pfscore2
   1988  13e4		       4a		      lsr
   1989  13e5		       85 f3		      STA	pfscore2
   1990  13e7				   .L0342		;  goto _Skip_dec_game_counter
   1991  13e7
   1992  13e7		       4c 09 94 	      jmp	._Skip_dec_game_counter
   1993  13ea
   1994  13ea				   ._Decrease_live_counter
   1995  13ea							; _Decrease_live_counter
   1996  13ea
   1997  13ea				   .L0343		;  pfscore1  =  pfscore1  /  4
   1998  13ea
   1999  13ea		       a5 f2		      LDA	pfscore1
   2000  13ec		       4a		      lsr
   2001  13ed		       4a		      lsr
   2002  13ee		       85 f2		      STA	pfscore1
   2003  13f0				   .
   2004  13f0							; 
   2005  13f0
   2006  13f0				   .L0344		;  _Ch0_Sound	=  4  :  _Ch0_Duration	=  1  :  _Ch0_Counter  =  0
   2007  13f0
   2008  13f0		       a9 04		      LDA	#4
   2009  13f2		       85 d9		      STA	_Ch0_Sound
   2010  13f4		       a9 01		      LDA	#1
   2011  13f6		       85 da		      STA	_Ch0_Duration
   2012  13f8		       a9 00		      LDA	#0
   2013  13fa		       85 db		      STA	_Ch0_Counter
   2014  13fc				   .L0345		;  if !pfscore1 then goto _Set_Game_Over else goto _Reset_Level
   2015  13fc
   2016  13fc		       a5 f2		      LDA	pfscore1
   2017  13fe		       d0 06		      BNE	.skipL0345
   2018  1400				   .condpart26
   2019  1400		       4c 49 9a 	      jmp	._Set_Game_Over
   2020  1403		       4c 09 94 	      jmp	.skipelse4
   2021  1406				   .skipL0345
   2022  1406		       4c 66 9a 	      jmp	._Reset_Level
   2023  1409
   2024  1409				   .skipelse4
   2025  1409				   ._Skip_dec_game_counter
   2026  1409							; _Skip_dec_game_counter
   2027  1409
   2028  1409				   .
   2029  1409							; 
   2030  1409
   2031  1409				   .
   2032  1409							; 
   2033  1409
   2034  1409				   .
   2035  1409							; 
   2036  1409
   2037  1409				   .L0346		;  if player0y  =  200 then goto __Skip_Enemy_Fire
   2038  1409
   2039  1409		       a5 85		      LDA	player0y
   2040  140b		       c9 c8		      CMP	#200
   2041  140d		       d0 03		      BNE	.skipL0346
   2042  140f				   .condpart27
   2043  140f		       4c 96 94 	      jmp	.__Skip_Enemy_Fire
   2044  1412
   2045  1412				   .skipL0346
   2046  1412				   .L0347		;  if _BitOp_Ball_Shot_Dir  ||  roommate_type then goto __Skip_Enemy_Fire
   2047  1412
   2048  1412		       a5 d6		      LDA	_BitOp_Ball_Shot_Dir
   2049  1414		       f0 03		      BEQ	.skipL0347
   2050  1416				   .condpart28
   2051  1416		       4c 1d 94 	      jmp	.condpart29
   2052  1419				   .skipL0347
   2053  1419		       a5 de		      LDA	roommate_type
   2054  141b		       f0 03		      BEQ	.skip5OR
   2055  141d				   .condpart29
   2056  141d		       4c 96 94 	      jmp	.__Skip_Enemy_Fire
   2057  1420
   2058  1420				   .skip5OR
   2059  1420				   .
   2060  1420							; 
   2061  1420
   2062  1420				   .L0348		;  _BitOp_Ball_Shot_Dir  =  0	:  Bally_velocity  =  0.0  :  q  =  0
   2063  1420
   2064  1420		       a9 00		      LDA	#0
   2065  1422		       85 d6		      STA	_BitOp_Ball_Shot_Dir
   2066  1424		       a2 00		      LDX	#0
   2067  1426		       86 e4		      STX	q
   2068  1428		       a9 00		      LDA	#0
   2069  142a		       85 e3		      STA	Bally_velocity
   2070  142c		       a9 00		      LDA	#0
   2071  142e		       85 e4		      STA	q
   2072  1430				   .
   2073  1430							; 
   2074  1430
   2075  1430				   .L0349		;  ball_shoot_x  =  player0x  +  4  :	ball_shoot_y  =  player0y  -  5
   2076  1430
   2077  1430		       a5 80		      LDA	player0x
   2078  1432		       18		      CLC
   2079  1433		       69 04		      ADC	#4
   2080  1435		       85 ae		      STA	ball_shoot_x
   2081  1437		       a5 85		      LDA	player0y
   2082  1439		       38		      SEC
   2083  143a		       e9 05		      SBC	#5
   2084  143c		       85 af		      STA	ball_shoot_y
   2085  143e				   .
   2086  143e							; 
   2087  143e
   2088  143e				   .
   2089  143e							; 
   2090  143e
   2091  143e				   .L0350		;  if _Ch0_Sound  <>  3 then _Ch0_Sound  =  2	:  _Ch0_Duration  =  1	:  _Ch0_Counter  =  0
   2092  143e
   2093  143e		       a5 d9		      LDA	_Ch0_Sound
   2094  1440		       c9 03		      CMP	#3
   2095  1442		       f0 0c		      BEQ	.skipL0350
   2096  1444				   .condpart30
   2097  1444		       a9 02		      LDA	#2
   2098  1446		       85 d9		      STA	_Ch0_Sound
   2099  1448		       a9 01		      LDA	#1
   2100  144a		       85 da		      STA	_Ch0_Duration
   2101  144c		       a9 00		      LDA	#0
   2102  144e		       85 db		      STA	_Ch0_Counter
   2103  1450				   .skipL0350
   2104  1450				   .
   2105  1450							; 
   2106  1450
   2107  1450				   .L0351		;  if player1x  >  player0x then _Bit2_Ball_Shot_Dir_Right1{2}  =  1 else _Bit0_Ball_Shot_Dir_Left1{0}  =  1
   2108  1450
   2109  1450		       a5 80		      LDA	player0x
   2110  1452		       c5 81		      CMP	player1x
   2111  1454		       b0 09		      BCS	.skipL0351
   2112  1456				   .condpart31
   2113  1456		       a5 d6		      LDA	_Bit2_Ball_Shot_Dir_Right1
   2114  1458		       09 04		      ORA	#4
   2115  145a		       85 d6		      STA	_Bit2_Ball_Shot_Dir_Right1
   2116  145c		       4c 65 94 	      jmp	.skipelse5
   2117  145f				   .skipL0351
   2118  145f		       a5 d6		      LDA	_Bit0_Ball_Shot_Dir_Left1
   2119  1461		       09 01		      ORA	#1
   2120  1463		       85 d6		      STA	_Bit0_Ball_Shot_Dir_Left1
   2121  1465				   .skipelse5
   2122  1465				   .L0352		;  if !_Bit2_Ball_Shot_Dir_Right1{2} then __Skip_Additional_Right
   2123  1465
   2124  1465		       a5 d6		      LDA	_Bit2_Ball_Shot_Dir_Right1
   2125  1467		       29 04		      AND	#4
   2126  1469					      if	((* - .__Skip_Additional_Right) < 127) && ((* - .__Skip_Additional_Right) > -128)
   2127  1469		       f0 13		      BEQ	.__Skip_Additional_Right
   2128  146b				  -	      else
   2129  146b				  -	      bne	.11skip__Skip_Additional_Right
   2130  146b				  -	      jmp	.__Skip_Additional_Right
   2131  146b				  -.11skip__Skip_Additional_Right
   2132  146b					      endif
   2133  146b				   .L0353		;  temp4  =  player1x	-  player0x
   2134  146b
   2135  146b		       a5 81		      LDA	player1x
   2136  146d		       38		      SEC
   2137  146e		       e5 80		      SBC	player0x
   2138  1470		       85 9f		      STA	temp4
   2139  1472				   .L0354		;  if temp4  >  25 then _Bit3_Ball_Shot_Dir_Right2{3}	=  1
   2140  1472
   2141  1472		       a9 19		      LDA	#25
   2142  1474		       c5 9f		      CMP	temp4
   2143  1476		       b0 06		      BCS	.skipL0354
   2144  1478				   .condpart32
   2145  1478		       a5 d6		      LDA	_Bit3_Ball_Shot_Dir_Right2
   2146  147a		       09 08		      ORA	#8
   2147  147c		       85 d6		      STA	_Bit3_Ball_Shot_Dir_Right2
   2148  147e				   .skipL0354
   2149  147e				   .__Skip_Additional_Right
   2150  147e							; __Skip_Additional_Right
   2151  147e
   2152  147e				   .L0355		;  if !_Bit0_Ball_Shot_Dir_Left1{0} then __Skip_Enemy_Fire
   2153  147e
   2154  147e		       a5 d6		      LDA	_Bit0_Ball_Shot_Dir_Left1
   2155  1480		       4a		      LSR
   2156  1481					      if	((* - .__Skip_Enemy_Fire) < 127) && ((* - .__Skip_Enemy_Fire) > -128)
   2157  1481		       90 13		      bcc	.__Skip_Enemy_Fire
   2158  1483				  -	      else
   2159  1483				  -	      bcs	.12skip__Skip_Enemy_Fire
   2160  1483				  -	      jmp	.__Skip_Enemy_Fire
   2161  1483				  -.12skip__Skip_Enemy_Fire
   2162  1483					      endif
   2163  1483				   .L0356		;  temp4  =  player0x	-  player1x
   2164  1483
   2165  1483		       a5 80		      LDA	player0x
   2166  1485		       38		      SEC
   2167  1486		       e5 81		      SBC	player1x
   2168  1488		       85 9f		      STA	temp4
   2169  148a				   .L0357		;  if temp4  >  25 then _Bit1_Ball_Shot_Dir_Left2{1}  =  1
   2170  148a
   2171  148a		       a9 19		      LDA	#25
   2172  148c		       c5 9f		      CMP	temp4
   2173  148e		       b0 06		      BCS	.skipL0357
   2174  1490				   .condpart33
   2175  1490		       a5 d6		      LDA	_Bit1_Ball_Shot_Dir_Left2
   2176  1492		       09 02		      ORA	#2
   2177  1494		       85 d6		      STA	_Bit1_Ball_Shot_Dir_Left2
   2178  1496				   .skipL0357
   2179  1496				   .
   2180  1496							; 
   2181  1496
   2182  1496				   .__Skip_Enemy_Fire
   2183  1496							; __Skip_Enemy_Fire
   2184  1496
   2185  1496				   .
   2186  1496							; 
   2187  1496
   2188  1496				   .
   2189  1496							; 
   2190  1496
   2191  1496				   .
   2192  1496							; 
   2193  1496
   2194  1496				   .L0358		;  if !_BitOp_Ball_Shot_Dir then goto __Skip_Enemy_Missile
   2195  1496
   2196  1496		       a5 d6		      LDA	_BitOp_Ball_Shot_Dir
   2197  1498		       d0 03		      BNE	.skipL0358
   2198  149a				   .condpart34
   2199  149a		       4c 0e 95 	      jmp	.__Skip_Enemy_Missile
   2200  149d
   2201  149d				   .skipL0358
   2202  149d				   .
   2203  149d							; 
   2204  149d
   2205  149d				   .
   2206  149d							; 
   2207  149d
   2208  149d				   .L0359		;  if ball_shoot_y  >	player1y then ball_shoot_y  =  ball_shoot_y  -	1
   2209  149d
   2210  149d		       a5 86		      LDA	player1y
   2211  149f		       c5 af		      CMP	ball_shoot_y
   2212  14a1		       b0 02		      BCS	.skipL0359
   2213  14a3				   .condpart35
   2214  14a3		       c6 af		      DEC	ball_shoot_y
   2215  14a5				   .skipL0359
   2216  14a5				   .L0360		;  if _Bit0_Ball_Shot_Dir_Left1{0}  &&  frame_counter{0} then ball_shoot_x  =	ball_shoot_x  -  1  :  if _Bit1_Ball_Shot_Dir_Left2{1} then ball_shoot_x  =  ball_shoot_x  -  1
   2217  14a5
   2218  14a5		       a5 d6		      LDA	_Bit0_Ball_Shot_Dir_Left1
   2219  14a7		       4a		      LSR
   2220  14a8		       90 0f		      BCC	.skipL0360
   2221  14aa				   .condpart36
   2222  14aa		       a5 d5		      LDA	frame_counter
   2223  14ac		       4a		      LSR
   2224  14ad		       90 0a		      BCC	.skip36then
   2225  14af				   .condpart37
   2226  14af		       c6 ae		      DEC	ball_shoot_x
   2227  14b1		       a5 d6		      LDA	_Bit1_Ball_Shot_Dir_Left2
   2228  14b3		       29 02		      AND	#2
   2229  14b5		       f0 02		      BEQ	.skip37then
   2230  14b7				   .condpart38
   2231  14b7		       c6 ae		      DEC	ball_shoot_x
   2232  14b9				   .skip37then
   2233  14b9				   .skip36then
   2234  14b9				   .skipL0360
   2235  14b9				   .L0361		;  if _Bit2_Ball_Shot_Dir_Right1{2}  &&  frame_counter{0} then ball_shoot_x  =  ball_shoot_x  +  1  :	if _Bit3_Ball_Shot_Dir_Right2{3} then ball_shoot_x  =  ball_shoot_x  +	1
   2236  14b9
   2237  14b9		       a5 d6		      LDA	_Bit2_Ball_Shot_Dir_Right1
   2238  14bb		       29 04		      AND	#4
   2239  14bd		       f0 0f		      BEQ	.skipL0361
   2240  14bf				   .condpart39
   2241  14bf		       a5 d5		      LDA	frame_counter
   2242  14c1		       4a		      LSR
   2243  14c2		       90 0a		      BCC	.skip39then
   2244  14c4				   .condpart40
   2245  14c4		       e6 ae		      INC	ball_shoot_x
   2246  14c6		       a5 d6		      LDA	_Bit3_Ball_Shot_Dir_Right2
   2247  14c8		       29 08		      AND	#8
   2248  14ca		       f0 02		      BEQ	.skip40then
   2249  14cc				   .condpart41
   2250  14cc		       e6 ae		      INC	ball_shoot_x
   2251  14ce				   .skip40then
   2252  14ce				   .skip39then
   2253  14ce				   .skipL0361
   2254  14ce				   .
   2255  14ce							; 
   2256  14ce
   2257  14ce				   .L0362		;  rem apply gravity
   2258  14ce
   2259  14ce				   .L0363		;  Bally_velocity  =  Bally_velocity  +  gravity_ball
   2260  14ce
   2261  14ce		       a5 e4		      LDA	q
   2262  14d0		       18		      CLC
   2263  14d1		       69 02		      ADC	#2
   2264  14d3		       85 e4		      STA	q
   2265  14d5		       a5 e3		      LDA	Bally_velocity
   2266  14d7		       69 00		      ADC	#0
   2267  14d9		       85 e3		      STA	Bally_velocity
   2268  14db				   .L0364		;  Bally_position  =  Bally_position  +  Bally_velocity
   2269  14db
   2270  14db		       a5 e5		      LDA	r
   2271  14dd		       18		      CLC
   2272  14de		       65 e4		      ADC	q
   2273  14e0		       85 e5		      STA	r
   2274  14e2		       a5 af		      LDA	Bally_position
   2275  14e4		       65 e3		      ADC	Bally_velocity
   2276  14e6		       85 af		      STA	Bally_position
   2277  14e8				   .
   2278  14e8							; 
   2279  14e8
   2280  14e8				   .
   2281  14e8							; 
   2282  14e8
   2283  14e8				   .
   2284  14e8							; 
   2285  14e8
   2286  14e8				   .L0365		;  if ball_shoot_y  <	_M_Edge_Top then __Delete_Enemy_Missile
   2287  14e8
   2288  14e8		       a5 af		      LDA	ball_shoot_y
   2289  14ea		       c9 02		      CMP	#_M_Edge_Top
   2290  14ec					      if	((* - .__Delete_Enemy_Missile) < 127) && ((* - .__Delete_Enemy_Missile) > -128)
   2291  14ec		       90 16		      bcc	.__Delete_Enemy_Missile
   2292  14ee				  -	      else
   2293  14ee				  -	      bcs	.13skip__Delete_Enemy_Missile
   2294  14ee				  -	      jmp	.__Delete_Enemy_Missile
   2295  14ee				  -.13skip__Delete_Enemy_Missile
   2296  14ee					      endif
   2297  14ee				   .L0366		;  if ball_shoot_y  >	_M_Edge_Bottom then __Delete_Enemy_Missile
   2298  14ee
   2299  14ee		       a9 58		      LDA	#_M_Edge_Bottom
   2300  14f0		       c5 af		      CMP	ball_shoot_y
   2301  14f2					      if	((* - .__Delete_Enemy_Missile) < 127) && ((* - .__Delete_Enemy_Missile) > -128)
   2302  14f2		       90 10		      bcc	.__Delete_Enemy_Missile
   2303  14f4				  -	      else
   2304  14f4				  -	      bcs	.14skip__Delete_Enemy_Missile
   2305  14f4				  -	      jmp	.__Delete_Enemy_Missile
   2306  14f4				  -.14skip__Delete_Enemy_Missile
   2307  14f4					      endif
   2308  14f4				   .L0367		;  if ball_shoot_x  <	_M_Edge_Left then __Delete_Enemy_Missile
   2309  14f4
   2310  14f4		       a5 ae		      LDA	ball_shoot_x
   2311  14f6		       c9 0e		      CMP	#_M_Edge_Left
   2312  14f8					      if	((* - .__Delete_Enemy_Missile) < 127) && ((* - .__Delete_Enemy_Missile) > -128)
   2313  14f8		       90 0a		      bcc	.__Delete_Enemy_Missile
   2314  14fa				  -	      else
   2315  14fa				  -	      bcs	.15skip__Delete_Enemy_Missile
   2316  14fa				  -	      jmp	.__Delete_Enemy_Missile
   2317  14fa				  -.15skip__Delete_Enemy_Missile
   2318  14fa					      endif
   2319  14fa				   .L0368		;  if ball_shoot_x  >	_M_Edge_Right then __Delete_Enemy_Missile
   2320  14fa
   2321  14fa		       a9 94		      LDA	#_M_Edge_Right
   2322  14fc		       c5 ae		      CMP	ball_shoot_x
   2323  14fe					      if	((* - .__Delete_Enemy_Missile) < 127) && ((* - .__Delete_Enemy_Missile) > -128)
   2324  14fe		       90 04		      bcc	.__Delete_Enemy_Missile
   2325  1500				  -	      else
   2326  1500				  -	      bcs	.16skip__Delete_Enemy_Missile
   2327  1500				  -	      jmp	.__Delete_Enemy_Missile
   2328  1500				  -.16skip__Delete_Enemy_Missile
   2329  1500					      endif
   2330  1500				   .
   2331  1500							; 
   2332  1500
   2333  1500				   .
   2334  1500							; 
   2335  1500
   2336  1500				   .L0369		;  if !collision(playfield,ball) then __Skip_Enemy_Missile
   2337  1500
   2338  1500		       24 06		      bit	CXBLPF
   2339  1502					      if	((* - .__Skip_Enemy_Missile) < 127) && ((* - .__Skip_Enemy_Missile) > -128)
   2340  1502		       10 0a		      bpl	.__Skip_Enemy_Missile
   2341  1504				  -	      else
   2342  1504				  -	      bmi	.17skip__Skip_Enemy_Missile
   2343  1504				  -	      jmp	.__Skip_Enemy_Missile
   2344  1504				  -.17skip__Skip_Enemy_Missile
   2345  1504					      endif
   2346  1504				   .
   2347  1504							; 
   2348  1504
   2349  1504				   .__Delete_Enemy_Missile
   2350  1504							; __Delete_Enemy_Missile
   2351  1504
   2352  1504				   .
   2353  1504							; 
   2354  1504
   2355  1504				   .
   2356  1504							; 
   2357  1504
   2358  1504				   .L0370		;  _BitOp_Ball_Shot_Dir  =  0	:  ballx  =  200  :  bally  =  200
   2359  1504
   2360  1504		       a9 00		      LDA	#0
   2361  1506		       85 d6		      STA	_BitOp_Ball_Shot_Dir
   2362  1508		       a9 c8		      LDA	#200
   2363  150a		       85 84		      STA	ballx
   2364  150c		       85 89		      STA	bally
   2365  150e				   .
   2366  150e							; 
   2367  150e
   2368  150e				   .__Skip_Enemy_Missile
   2369  150e							; __Skip_Enemy_Missile
   2370  150e
   2371  150e				   .
   2372  150e							; 
   2373  150e
   2374  150e				   .
   2375  150e							; 
   2376  150e
   2377  150e				   .
   2378  150e							; 
   2379  150e
   2380  150e				   .
   2381  150e							; 
   2382  150e
   2383  150e				   .
   2384  150e							; 
   2385  150e
   2386  150e				   .L0371		;  if !joy0fire then _Bit7_FireB_Restrainer{7}  =  0  :  goto __Skip_Fire
   2387  150e
   2388  150e		       24 0c		      bit	INPT4
   2389  1510		       10 09		      BPL	.skipL0371
   2390  1512				   .condpart42
   2391  1512		       a5 ec		      LDA	_Bit7_FireB_Restrainer
   2392  1514		       29 7f		      AND	#127
   2393  1516		       85 ec		      STA	_Bit7_FireB_Restrainer
   2394  1518		       4c 99 95 	      jmp	.__Skip_Fire
   2395  151b
   2396  151b				   .skipL0371
   2397  151b				   .L0372		;  if _Bit7_FireB_Restrainer{7} then __Skip_Fire
   2398  151b
   2399  151b		       24 ec		      BIT	_Bit7_FireB_Restrainer
   2400  151d					      if	((* - .__Skip_Fire) < 127) && ((* - .__Skip_Fire) > -128)
   2401  151d		       30 7a		      bmi	.__Skip_Fire
   2402  151f				  -	      else
   2403  151f				  -	      bpl	.18skip__Skip_Fire
   2404  151f				  -	      jmp	.__Skip_Fire
   2405  151f				  -.18skip__Skip_Fire
   2406  151f					      endif
   2407  151f				   .
   2408  151f							; 
   2409  151f
   2410  151f				   .
   2411  151f							; 
   2412  151f
   2413  151f				   .L0373		;  if _BitOp_M0_Dir  ||  _Bit0_P1_Dir_Up{0} then __Skip_Fire
   2414  151f
   2415  151f		       a5 d7		      LDA	_BitOp_M0_Dir
   2416  1521					      if	((* - .__Skip_Fire) < 127) && ((* - .__Skip_Fire) > -128)
   2417  1521		       d0 76		      BNE	.__Skip_Fire
   2418  1523				  -	      else
   2419  1523				  -	      beq	.19skip__Skip_Fire
   2420  1523				  -	      jmp	.__Skip_Fire
   2421  1523				  -.19skip__Skip_Fire
   2422  1523					      endif
   2423  1523		       a5 d8		      LDA	_Bit0_P1_Dir_Up
   2424  1525		       4a		      LSR
   2425  1526					      if	((* - .__Skip_Fire) < 127) && ((* - .__Skip_Fire) > -128)
   2426  1526		       b0 71		      bcs	.__Skip_Fire
   2427  1528				  -	      else
   2428  1528				  -	      bcc	.20skip__Skip_Fire
   2429  1528				  -	      jmp	.__Skip_Fire
   2430  1528				  -.20skip__Skip_Fire
   2431  1528					      endif
   2432  1528				   .
   2433  1528							; 
   2434  1528
   2435  1528				   .
   2436  1528							; 
   2437  1528
   2438  1528				   .
   2439  1528							; 
   2440  1528
   2441  1528				   .L0374		;  _BitOp_M0_Dir  =  _BitOp_P1_Dir
   2442  1528
   2443  1528		       a5 d8		      LDA	_BitOp_P1_Dir
   2444  152a		       85 d7		      STA	_BitOp_M0_Dir
   2445  152c				   .
   2446  152c							; 
   2447  152c
   2448  152c				   .L0375		;  if _BitOp_M0_Dir then _Skip_correct_initial_M0_Dir
   2449  152c
   2450  152c		       a5 d7		      LDA	_BitOp_M0_Dir
   2451  152e					      if	((* - ._Skip_correct_initial_M0_Dir) < 127) && ((* - ._Skip_correct_initial_M0_Dir) > -128)
   2452  152e		       d0 0f		      BNE	._Skip_correct_initial_M0_Dir
   2453  1530				  -	      else
   2454  1530				  -	      beq	.21skip_Skip_correct_initial_M0_Dir
   2455  1530				  -	      jmp	._Skip_correct_initial_M0_Dir
   2456  1530				  -.21skip_Skip_correct_initial_M0_Dir
   2457  1530					      endif
   2458  1530				   .L0376		;  if _Bit6_Flip_P1{6} then _BitOp_M0_Dir  =  4 else _BitOp_M0_Dir  =	8
   2459  1530
   2460  1530		       24 ec		      BIT	_Bit6_Flip_P1
   2461  1532		       50 07		      BVC	.skipL0376
   2462  1534				   .condpart43
   2463  1534		       a9 04		      LDA	#4
   2464  1536		       85 d7		      STA	_BitOp_M0_Dir
   2465  1538		       4c 3f 95 	      jmp	.skipelse6
   2466  153b				   .skipL0376
   2467  153b		       a9 08		      LDA	#8
   2468  153d		       85 d7		      STA	_BitOp_M0_Dir
   2469  153f				   .skipelse6
   2470  153f				   ._Skip_correct_initial_M0_Dir
   2471  153f							; _Skip_correct_initial_M0_Dir
   2472  153f
   2473  153f				   .
   2474  153f							; 
   2475  153f
   2476  153f				   .
   2477  153f							; 
   2478  153f
   2479  153f				   .L0377		;  M0y_velocity  =  0.0  :  u	=  0
   2480  153f
   2481  153f		       a2 00		      LDX	#0
   2482  1541		       86 e7		      STX	t
   2483  1543		       a9 00		      LDA	#0
   2484  1545		       85 e6		      STA	M0y_velocity
   2485  1547		       a9 00		      LDA	#0
   2486  1549		       85 e8		      STA	u
   2487  154b				   .
   2488  154b							; 
   2489  154b
   2490  154b				   .
   2491  154b							; 
   2492  154b
   2493  154b				   .L0378		;  if _Bit1_M0_Dir_Down{1} then missile0x  =  player1x  +  9  :  missile0y  =	player1y  -  1
   2494  154b
   2495  154b		       a5 d7		      LDA	_Bit1_M0_Dir_Down
   2496  154d		       29 02		      AND	#2
   2497  154f		       f0 0e		      BEQ	.skipL0378
   2498  1551				   .condpart44
   2499  1551		       a5 81		      LDA	player1x
   2500  1553		       18		      CLC
   2501  1554		       69 09		      ADC	#9
   2502  1556		       85 82		      STA	missile0x
   2503  1558		       a5 86		      LDA	player1y
   2504  155a		       38		      SEC
   2505  155b		       e9 01		      SBC	#1
   2506  155d		       85 91		      STA	missile0y
   2507  155f				   .skipL0378
   2508  155f				   .L0379		;  if _Bit2_M0_Dir_Left{2} then missile0x  =  player1x  +  2  :  missile0y  =	player1y  -  3
   2509  155f
   2510  155f		       a5 d7		      LDA	_Bit2_M0_Dir_Left
   2511  1561		       29 04		      AND	#4
   2512  1563		       f0 0e		      BEQ	.skipL0379
   2513  1565				   .condpart45
   2514  1565		       a5 81		      LDA	player1x
   2515  1567		       18		      CLC
   2516  1568		       69 02		      ADC	#2
   2517  156a		       85 82		      STA	missile0x
   2518  156c		       a5 86		      LDA	player1y
   2519  156e		       38		      SEC
   2520  156f		       e9 03		      SBC	#3
   2521  1571		       85 91		      STA	missile0y
   2522  1573				   .skipL0379
   2523  1573				   .L0380		;  if _Bit3_M0_Dir_Right{3} then missile0x  =	player1x  +  16  :  missile0y  =  player1y  -  3
   2524  1573
   2525  1573		       a5 d7		      LDA	_Bit3_M0_Dir_Right
   2526  1575		       29 08		      AND	#8
   2527  1577		       f0 0e		      BEQ	.skipL0380
   2528  1579				   .condpart46
   2529  1579		       a5 81		      LDA	player1x
   2530  157b		       18		      CLC
   2531  157c		       69 10		      ADC	#16
   2532  157e		       85 82		      STA	missile0x
   2533  1580		       a5 86		      LDA	player1y
   2534  1582		       38		      SEC
   2535  1583		       e9 03		      SBC	#3
   2536  1585		       85 91		      STA	missile0y
   2537  1587				   .skipL0380
   2538  1587				   .
   2539  1587							; 
   2540  1587
   2541  1587				   .
   2542  1587							; 
   2543  1587
   2544  1587				   .L0381		;  if _Ch0_Sound  <>  3 then _Ch0_Sound  =  2	:  _Ch0_Duration  =  1	:  _Ch0_Counter  =  0
   2545  1587
   2546  1587		       a5 d9		      LDA	_Ch0_Sound
   2547  1589		       c9 03		      CMP	#3
   2548  158b		       f0 0c		      BEQ	.skipL0381
   2549  158d				   .condpart47
   2550  158d		       a9 02		      LDA	#2
   2551  158f		       85 d9		      STA	_Ch0_Sound
   2552  1591		       a9 01		      LDA	#1
   2553  1593		       85 da		      STA	_Ch0_Duration
   2554  1595		       a9 00		      LDA	#0
   2555  1597		       85 db		      STA	_Ch0_Counter
   2556  1599				   .skipL0381
   2557  1599				   .
   2558  1599							; 
   2559  1599
   2560  1599				   .__Skip_Fire
   2561  1599							; __Skip_Fire
   2562  1599
   2563  1599				   .
   2564  1599							; 
   2565  1599
   2566  1599				   .
   2567  1599							; 
   2568  1599
   2569  1599				   .
   2570  1599							; 
   2571  1599
   2572  1599				   .
   2573  1599							; 
   2574  1599
   2575  1599				   .L0382		;  if !_BitOp_M0_Dir then goto __Skip_Missile
   2576  1599
   2577  1599		       a5 d7		      LDA	_BitOp_M0_Dir
   2578  159b		       d0 03		      BNE	.skipL0382
   2579  159d				   .condpart48
   2580  159d		       4c 16 96 	      jmp	.__Skip_Missile
   2581  15a0
   2582  15a0				   .skipL0382
   2583  15a0				   .
   2584  15a0							; 
   2585  15a0
   2586  15a0				   .
   2587  15a0							; 
   2588  15a0
   2589  15a0				   .L0383		;  if _Bit1_M0_Dir_Down{1} then missile0y  =  missile0y  +  2
   2590  15a0
   2591  15a0		       a5 d7		      LDA	_Bit1_M0_Dir_Down
   2592  15a2		       29 02		      AND	#2
   2593  15a4		       f0 07		      BEQ	.skipL0383
   2594  15a6				   .condpart49
   2595  15a6		       a5 91		      LDA	missile0y
   2596  15a8		       18		      CLC
   2597  15a9		       69 02		      ADC	#2
   2598  15ab		       85 91		      STA	missile0y
   2599  15ad				   .skipL0383
   2600  15ad				   .L0384		;  if _Bit2_M0_Dir_Left{2} then missile0x  =  missile0x  -  2
   2601  15ad
   2602  15ad		       a5 d7		      LDA	_Bit2_M0_Dir_Left
   2603  15af		       29 04		      AND	#4
   2604  15b1		       f0 07		      BEQ	.skipL0384
   2605  15b3				   .condpart50
   2606  15b3		       a5 82		      LDA	missile0x
   2607  15b5		       38		      SEC
   2608  15b6		       e9 02		      SBC	#2
   2609  15b8		       85 82		      STA	missile0x
   2610  15ba				   .skipL0384
   2611  15ba				   .L0385		;  if _Bit3_M0_Dir_Right{3} then missile0x  =	missile0x  +  2
   2612  15ba
   2613  15ba		       a5 d7		      LDA	_Bit3_M0_Dir_Right
   2614  15bc		       29 08		      AND	#8
   2615  15be		       f0 07		      BEQ	.skipL0385
   2616  15c0				   .condpart51
   2617  15c0		       a5 82		      LDA	missile0x
   2618  15c2		       18		      CLC
   2619  15c3		       69 02		      ADC	#2
   2620  15c5		       85 82		      STA	missile0x
   2621  15c7				   .skipL0385
   2622  15c7				   .
   2623  15c7							; 
   2624  15c7
   2625  15c7				   .L0386		;  rem apply gravity
   2626  15c7
   2627  15c7				   .L0387		;  M0y_velocity  =  M0y_velocity  +  gravity_missile0
   2628  15c7
   2629  15c7		       a5 e7		      LDA	t
   2630  15c9		       18		      CLC
   2631  15ca		       69 06		      ADC	#6
   2632  15cc		       85 e7		      STA	t
   2633  15ce		       a5 e6		      LDA	M0y_velocity
   2634  15d0		       69 00		      ADC	#0
   2635  15d2		       85 e6		      STA	M0y_velocity
   2636  15d4				   .L0388		;  M0y_position  =  M0y_position  +  M0y_velocity
   2637  15d4
   2638  15d4		       a5 e8		      LDA	u
   2639  15d6		       18		      CLC
   2640  15d7		       65 e7		      ADC	t
   2641  15d9		       85 e8		      STA	u
   2642  15db		       a5 91		      LDA	M0y_position
   2643  15dd		       65 e6		      ADC	M0y_velocity
   2644  15df		       85 91		      STA	M0y_position
   2645  15e1				   .
   2646  15e1							; 
   2647  15e1
   2648  15e1				   .
   2649  15e1							; 
   2650  15e1
   2651  15e1				   .
   2652  15e1							; 
   2653  15e1
   2654  15e1				   .L0389		;  if missile0y  <  _M_Edge_Top then goto __Delete_Missile
   2655  15e1
   2656  15e1		       a5 91		      LDA	missile0y
   2657  15e3		       c9 02		      CMP	#_M_Edge_Top
   2658  15e5		       b0 03		      BCS	.skipL0389
   2659  15e7				   .condpart52
   2660  15e7		       4c 0c 96 	      jmp	.__Delete_Missile
   2661  15ea
   2662  15ea				   .skipL0389
   2663  15ea				   .L0390		;  if missile0y  >  _M_Edge_Bottom then goto __Delete_Missile
   2664  15ea
   2665  15ea		       a9 58		      LDA	#_M_Edge_Bottom
   2666  15ec		       c5 91		      CMP	missile0y
   2667  15ee		       b0 03		      BCS	.skipL0390
   2668  15f0				   .condpart53
   2669  15f0		       4c 0c 96 	      jmp	.__Delete_Missile
   2670  15f3
   2671  15f3				   .skipL0390
   2672  15f3				   .L0391		;  if missile0x  <  _M_Edge_Left then goto __Delete_Missile
   2673  15f3
   2674  15f3		       a5 82		      LDA	missile0x
   2675  15f5		       c9 0e		      CMP	#_M_Edge_Left
   2676  15f7		       b0 03		      BCS	.skipL0391
   2677  15f9				   .condpart54
   2678  15f9		       4c 0c 96 	      jmp	.__Delete_Missile
   2679  15fc
   2680  15fc				   .skipL0391
   2681  15fc				   .L0392		;  if missile0x  >  _M_Edge_Right then goto __Delete_Missile
   2682  15fc
   2683  15fc		       a9 94		      LDA	#_M_Edge_Right
   2684  15fe		       c5 82		      CMP	missile0x
   2685  1600		       b0 03		      BCS	.skipL0392
   2686  1602				   .condpart55
   2687  1602		       4c 0c 96 	      jmp	.__Delete_Missile
   2688  1605
   2689  1605				   .skipL0392
   2690  1605				   .
   2691  1605							; 
   2692  1605
   2693  1605				   .
   2694  1605							; 
   2695  1605
   2696  1605				   .L0393		;  if !collision(playfield,missile0) then goto __Skip_Missile
   2697  1605
   2698  1605		       24 04		      bit	CXM0FB
   2699  1607		       30 03		      BMI	.skipL0393
   2700  1609				   .condpart56
   2701  1609		       4c 16 96 	      jmp	.__Skip_Missile
   2702  160c
   2703  160c				   .skipL0393
   2704  160c				   .
   2705  160c							; 
   2706  160c
   2707  160c				   .
   2708  160c							; 
   2709  160c
   2710  160c				   .
   2711  160c							; 
   2712  160c
   2713  160c				   .
   2714  160c							; 
   2715  160c
   2716  160c				   .__Delete_Missile
   2717  160c							; __Delete_Missile
   2718  160c
   2719  160c				   .
   2720  160c							; 
   2721  160c
   2722  160c				   .
   2723  160c							; 
   2724  160c
   2725  160c				   .L0394		;  _BitOp_M0_Dir  =  0  :  missile0x  =  200  :  missile0y  =	200
   2726  160c
   2727  160c		       a9 00		      LDA	#0
   2728  160e		       85 d7		      STA	_BitOp_M0_Dir
   2729  1610		       a9 c8		      LDA	#200
   2730  1612		       85 82		      STA	missile0x
   2731  1614		       85 91		      STA	missile0y
   2732  1616				   .
   2733  1616							; 
   2734  1616
   2735  1616				   .__Skip_Missile
   2736  1616							; __Skip_Missile
   2737  1616
   2738  1616				   .
   2739  1616							; 
   2740  1616
   2741  1616				   .
   2742  1616							; 
   2743  1616
   2744  1616				   .
   2745  1616							; 
   2746  1616
   2747  1616				   .
   2748  1616							; 
   2749  1616
   2750  1616				   .L0395		;  if !collision(player0,missile0) then __Skip_Shot_Enemy
   2751  1616
   2752  1616		       24 00		      bit	CXM0P
   2753  1618					      if	((* - .__Skip_Shot_Enemy) < 127) && ((* - .__Skip_Shot_Enemy) > -128)
   2754  1618		       50 52		      bvc	.__Skip_Shot_Enemy
   2755  161a				  -	      else
   2756  161a				  -	      bvs	.22skip__Skip_Shot_Enemy
   2757  161a				  -	      jmp	.__Skip_Shot_Enemy
   2758  161a				  -.22skip__Skip_Shot_Enemy
   2759  161a					      endif
   2760  161a				   .
   2761  161a							; 
   2762  161a
   2763  161a				   .
   2764  161a							; 
   2765  161a
   2766  161a				   .L0396		;  _BitOp_M0_Dir  =  0  :  missile0x  =  200  :  missile0y  =	200
   2767  161a
   2768  161a		       a9 00		      LDA	#0
   2769  161c		       85 d7		      STA	_BitOp_M0_Dir
   2770  161e		       a9 c8		      LDA	#200
   2771  1620		       85 82		      STA	missile0x
   2772  1622		       85 91		      STA	missile0y
   2773  1624				   .
   2774  1624							; 
   2775  1624
   2776  1624				   .L0397		;  if roommate_type  >  1 then __Skip_Shot_Enemy
   2777  1624
   2778  1624		       a9 01		      LDA	#1
   2779  1626		       c5 de		      CMP	roommate_type
   2780  1628					      if	((* - .__Skip_Shot_Enemy) < 127) && ((* - .__Skip_Shot_Enemy) > -128)
   2781  1628		       90 42		      bcc	.__Skip_Shot_Enemy
   2782  162a				  -	      else
   2783  162a				  -	      bcs	.23skip__Skip_Shot_Enemy
   2784  162a				  -	      jmp	.__Skip_Shot_Enemy
   2785  162a				  -.23skip__Skip_Shot_Enemy
   2786  162a					      endif
   2787  162a				   .
   2788  162a							; 
   2789  162a
   2790  162a				   .L0398		;  _Ch0_Sound	=  1  :  _Ch0_Duration	=  1  :  _Ch0_Counter  =  0
   2791  162a
   2792  162a		       a9 01		      LDA	#1
   2793  162c		       85 d9		      STA	_Ch0_Sound
   2794  162e		       85 da		      STA	_Ch0_Duration
   2795  1630		       a9 00		      LDA	#0
   2796  1632		       85 db		      STA	_Ch0_Counter
   2797  1634				   .
   2798  1634							; 
   2799  1634
   2800  1634				   .
   2801  1634							; 
   2802  1634
   2803  1634				   .L0399		;  player0y  =  200  :  w_roommate_startpos_y	=  200	:  if roommate_type then score	=  score  +  bonus_hit_air_missile else score  =  score  +  bonus_hit_tank
   2804  1634
   2805  1634		       a9 c8		      LDA	#200
   2806  1636		       85 85		      STA	player0y
   2807  1638		       8d 6a f0 	      STA	w_roommate_startpos_y
   2808  163b		       a5 de		      LDA	roommate_type
   2809  163d		       f0 18		      BEQ	.skipL0399
   2810  163f				   .condpart57
   2811  163f		       f8		      SED
   2812  1640		       18		      CLC
   2813  1641		       a5 95		      LDA	score+2
   2814  1643		       69 40		      ADC	#$40
   2815  1645		       85 95		      STA	score+2
   2816  1647		       a5 94		      LDA	score+1
   2817  1649		       69 00		      ADC	#$00
   2818  164b		       85 94		      STA	score+1
   2819  164d		       a5 93		      LDA	score
   2820  164f		       69 00		      ADC	#$00
   2821  1651		       85 93		      STA	score
   2822  1653		       d8		      CLD
   2823  1654		       4c 6c 96 	      jmp	.skipelse7
   2824  1657				   .skipL0399
   2825  1657		       f8		      SED
   2826  1658		       18		      CLC
   2827  1659		       a5 95		      LDA	score+2
   2828  165b		       69 60		      ADC	#$60
   2829  165d		       85 95		      STA	score+2
   2830  165f		       a5 94		      LDA	score+1
   2831  1661		       69 00		      ADC	#$00
   2832  1663		       85 94		      STA	score+1
   2833  1665		       a5 93		      LDA	score
   2834  1667		       69 00		      ADC	#$00
   2835  1669		       85 93		      STA	score
   2836  166b		       d8		      CLD
   2837  166c				   .skipelse7
   2838  166c				   .
   2839  166c							; 
   2840  166c
   2841  166c				   .__Skip_Shot_Enemy
   2842  166c							; __Skip_Shot_Enemy
   2843  166c
   2844  166c				   .
   2845  166c							; 
   2846  166c
   2847  166c				   .
   2848  166c							; 
   2849  166c
   2850  166c				   .
   2851  166c							; 
   2852  166c
   2853  166c				   .
   2854  166c							; 
   2855  166c
   2856  166c				   .L0400		;  if !collision(ball,missile0) then __Skip_Shot_Extra_Wall
   2857  166c
   2858  166c		       24 04		      bit	CXM0FB
   2859  166e					      if	((* - .__Skip_Shot_Extra_Wall) < 127) && ((* - .__Skip_Shot_Extra_Wall) > -128)
   2860  166e		       50 61		      bvc	.__Skip_Shot_Extra_Wall
   2861  1670				  -	      else
   2862  1670				  -	      bvs	.24skip__Skip_Shot_Extra_Wall
   2863  1670				  -	      jmp	.__Skip_Shot_Extra_Wall
   2864  1670				  -.24skip__Skip_Shot_Extra_Wall
   2865  1670					      endif
   2866  1670				   .
   2867  1670							; 
   2868  1670
   2869  1670				   .
   2870  1670							; 
   2871  1670
   2872  1670				   .L0401		;  _BitOp_M0_Dir  =  0  :  missile0x  =  200  :  missile0y  =	200
   2873  1670
   2874  1670		       a9 00		      LDA	#0
   2875  1672		       85 d7		      STA	_BitOp_M0_Dir
   2876  1674		       a9 c8		      LDA	#200
   2877  1676		       85 82		      STA	missile0x
   2878  1678		       85 91		      STA	missile0y
   2879  167a				   .
   2880  167a							; 
   2881  167a
   2882  167a				   .L0402		;  _BitOp_Ball_Shot_Dir  =  0	:  ball_shoot_x  =  200  :  ball_shoot_y  =  200
   2883  167a
   2884  167a		       a9 00		      LDA	#0
   2885  167c		       85 d6		      STA	_BitOp_Ball_Shot_Dir
   2886  167e		       a9 c8		      LDA	#200
   2887  1680		       85 ae		      STA	ball_shoot_x
   2888  1682		       85 af		      STA	ball_shoot_y
   2889  1684				   .
   2890  1684							; 
   2891  1684
   2892  1684				   .
   2893  1684							; 
   2894  1684
   2895  1684				   .L0403		;  if r_extra_wall_type_and_range{0} then __Skip_Shot_Extra_Wall
   2896  1684
   2897  1684		       ad eb f0 	      LDA	r_extra_wall_type_and_range
   2898  1687		       4a		      LSR
   2899  1688					      if	((* - .__Skip_Shot_Extra_Wall) < 127) && ((* - .__Skip_Shot_Extra_Wall) > -128)
   2900  1688		       b0 47		      bcs	.__Skip_Shot_Extra_Wall
   2901  168a				  -	      else
   2902  168a				  -	      bcc	.25skip__Skip_Shot_Extra_Wall
   2903  168a				  -	      jmp	.__Skip_Shot_Extra_Wall
   2904  168a				  -.25skip__Skip_Shot_Extra_Wall
   2905  168a					      endif
   2906  168a				   .
   2907  168a							; 
   2908  168a
   2909  168a				   .L0404		;  _Ch0_Sound	=  1  :  _Ch0_Duration	=  1  :  _Ch0_Counter  =  0
   2910  168a
   2911  168a		       a9 01		      LDA	#1
   2912  168c		       85 d9		      STA	_Ch0_Sound
   2913  168e		       85 da		      STA	_Ch0_Duration
   2914  1690		       a9 00		      LDA	#0
   2915  1692		       85 db		      STA	_Ch0_Counter
   2916  1694				   .L0405		;  bally  =  0  :  w_extra_wall_startpos_x  =	200  :	if r_extra_wall_type_and_range	>  2 then score  =  score  +  bonus_hit_active_wall else score	=  score  +  bonus_hit_wall
   2917  1694
   2918  1694		       a9 00		      LDA	#0
   2919  1696		       85 89		      STA	bally
   2920  1698		       a9 c8		      LDA	#200
   2921  169a		       8d 6e f0 	      STA	w_extra_wall_startpos_x
   2922  169d		       a9 02		      LDA	#2
   2923  169f		       cd eb f0 	      CMP	r_extra_wall_type_and_range
   2924  16a2		       b0 18		      BCS	.skipL0405
   2925  16a4				   .condpart58
   2926  16a4		       f8		      SED
   2927  16a5		       18		      CLC
   2928  16a6		       a5 95		      LDA	score+2
   2929  16a8		       69 30		      ADC	#$30
   2930  16aa		       85 95		      STA	score+2
   2931  16ac		       a5 94		      LDA	score+1
   2932  16ae		       69 00		      ADC	#$00
   2933  16b0		       85 94		      STA	score+1
   2934  16b2		       a5 93		      LDA	score
   2935  16b4		       69 00		      ADC	#$00
   2936  16b6		       85 93		      STA	score
   2937  16b8		       d8		      CLD
   2938  16b9		       4c d1 96 	      jmp	.skipelse8
   2939  16bc				   .skipL0405
   2940  16bc		       f8		      SED
   2941  16bd		       18		      CLC
   2942  16be		       a5 95		      LDA	score+2
   2943  16c0		       69 10		      ADC	#$10
   2944  16c2		       85 95		      STA	score+2
   2945  16c4		       a5 94		      LDA	score+1
   2946  16c6		       69 00		      ADC	#$00
   2947  16c8		       85 94		      STA	score+1
   2948  16ca		       a5 93		      LDA	score
   2949  16cc		       69 00		      ADC	#$00
   2950  16ce		       85 93		      STA	score
   2951  16d0		       d8		      CLD
   2952  16d1				   .skipelse8
   2953  16d1				   .
   2954  16d1							; 
   2955  16d1
   2956  16d1				   .__Skip_Shot_Extra_Wall
   2957  16d1							; __Skip_Shot_Extra_Wall
   2958  16d1
   2959  16d1				   .
   2960  16d1							; 
   2961  16d1
   2962  16d1				   .
   2963  16d1							; 
   2964  16d1
   2965  16d1				   .
   2966  16d1							; 
   2967  16d1
   2968  16d1				   .L0406		;  if !collision(player1,player0) then goto __Skip_P1_Touched_P0
   2969  16d1
   2970  16d1		       24 07		      bit	CXPPMM
   2971  16d3		       30 03		      BMI	.skipL0406
   2972  16d5				   .condpart59
   2973  16d5		       4c 67 97 	      jmp	.__Skip_P1_Touched_P0
   2974  16d8
   2975  16d8				   .skipL0406
   2976  16d8				   .
   2977  16d8							; 
   2978  16d8
   2979  16d8				   .
   2980  16d8							; 
   2981  16d8
   2982  16d8				   .L0407		;  if roommate_type  <  2 then goto _Decrease_live_counter
   2983  16d8
   2984  16d8		       a5 de		      LDA	roommate_type
   2985  16da		       c9 02		      CMP	#2
   2986  16dc		       b0 03		      BCS	.skipL0407
   2987  16de				   .condpart60
   2988  16de		       4c ea 93 	      jmp	._Decrease_live_counter
   2989  16e1
   2990  16e1				   .skipL0407
   2991  16e1				   .
   2992  16e1							; 
   2993  16e1
   2994  16e1				   .
   2995  16e1							; 
   2996  16e1
   2997  16e1				   .L0408		;  if _Ch0_Sound  <>  3 then _Ch0_Sound  =  3	:  _Ch0_Duration  =  1	:  _Ch0_Counter  =  0
   2998  16e1
   2999  16e1		       a5 d9		      LDA	_Ch0_Sound
   3000  16e3		       c9 03		      CMP	#3
   3001  16e5		       f0 0c		      BEQ	.skipL0408
   3002  16e7				   .condpart61
   3003  16e7		       a9 03		      LDA	#3
   3004  16e9		       85 d9		      STA	_Ch0_Sound
   3005  16eb		       a9 01		      LDA	#1
   3006  16ed		       85 da		      STA	_Ch0_Duration
   3007  16ef		       a9 00		      LDA	#0
   3008  16f1		       85 db		      STA	_Ch0_Counter
   3009  16f3				   .skipL0408
   3010  16f3				   .L0409		;  if roommate_type  =  3 then men_to_rescue  =  men_to_rescue  -  12	:  player0y  =	200  :	w_roommate_startpos_y  =  200  :  score  =  score  +  bonus_man_rescue	:  if !men_to_rescue then goto _Level_Completed
   3011  16f3
   3012  16f3		       a5 de		      LDA	roommate_type
   3013  16f5		       c9 03		      CMP	#3
   3014  16f7		       d0 2a		      BNE	.skipL0409
   3015  16f9				   .condpart62
   3016  16f9		       a5 b0		      LDA	men_to_rescue
   3017  16fb		       38		      SEC
   3018  16fc		       e9 0c		      SBC	#12
   3019  16fe		       85 b0		      STA	men_to_rescue
   3020  1700		       a9 c8		      LDA	#200
   3021  1702		       85 85		      STA	player0y
   3022  1704		       8d 6a f0 	      STA	w_roommate_startpos_y
   3023  1707		       f8		      SED
   3024  1708		       18		      CLC
   3025  1709		       a5 95		      LDA	score+2
   3026  170b		       69 50		      ADC	#$50
   3027  170d		       85 95		      STA	score+2
   3028  170f		       a5 94		      LDA	score+1
   3029  1711		       69 01		      ADC	#$01
   3030  1713		       85 94		      STA	score+1
   3031  1715		       a5 93		      LDA	score
   3032  1717		       69 00		      ADC	#$00
   3033  1719		       85 93		      STA	score
   3034  171b		       d8		      CLD
   3035  171c		       a5 b0		      LDA	men_to_rescue
   3036  171e		       d0 03		      BNE	.skip62then
   3037  1720				   .condpart63
   3038  1720		       4c d4 9a 	      jmp	._Level_Completed
   3039  1723
   3040  1723				   .skip62then
   3041  1723				   .skipL0409
   3042  1723				   .L0410		;  if roommate_type  =  2 then P1y_velocity  =  0.0  :  x  =  0  :  pfscore2  =  pfscore2  *  2  |  1	:  player1y  =	player1y  -  1	:  if !_Bit3_Safe_Point_reached{3} then WriteSendBuffer  =  req_safe_point  :  _Bit3_Safe_Point_reached{3}  =  1  :  Safe_Point_P1_x  =  player1x  :  Safe_Point_P1_y  =  player1y  :  _Bit1_Safe_Point_P1_Flip{1}  =  _Bit6_Flip_P1{6}
   3043  1723
   3044  1723		       a5 de		      LDA	roommate_type
   3045  1725		       c9 02		      CMP	#2
   3046  1727		       d0 3e		      BNE	.skipL0410
   3047  1729				   .condpart64
   3048  1729		       a2 00		      LDX	#0
   3049  172b		       86 ea		      STX	w
   3050  172d		       a9 00		      LDA	#0
   3051  172f		       85 e9		      STA	P1y_velocity
   3052  1731		       a9 00		      LDA	#0
   3053  1733		       85 eb		      STA	x
   3054  1735							; complex statement detected
   3055  1735		       a5 f3		      LDA	pfscore2
   3056  1737		       0a		      asl
   3057  1738		       09 01		      ORA	#1
   3058  173a		       85 f3		      STA	pfscore2
   3059  173c		       c6 86		      DEC	player1y
   3060  173e		       a5 ec		      LDA	_Bit3_Safe_Point_reached
   3061  1740		       29 08		      AND	#8
   3062  1742		       d0 23		      BNE	.skip64then
   3063  1744				   .condpart65
   3064  1744		       a9 08		      LDA	#req_safe_point
   3065  1746		       8d f1 1f 	      STA	WriteSendBuffer
   3066  1749		       a5 ec		      LDA	_Bit3_Safe_Point_reached
   3067  174b		       09 08		      ORA	#8
   3068  174d		       85 ec		      STA	_Bit3_Safe_Point_reached
   3069  174f		       a5 81		      LDA	player1x
   3070  1751		       85 e0		      STA	Safe_Point_P1_x
   3071  1753		       a5 86		      LDA	player1y
   3072  1755		       85 e1		      STA	Safe_Point_P1_y
   3073  1757		       a5 ec		      LDA	_Bit6_Flip_P1
   3074  1759		       29 40		      AND	#64
   3075  175b		       08		      PHP
   3076  175c		       a5 df		      LDA	_Bit1_Safe_Point_P1_Flip
   3077  175e		       29 fd		      AND	#253
   3078  1760		       28		      PLP
   3079  1761		       f0 02		      .byte.b	$F0, $02
   3080  1763		       09 02		      ORA	#2
   3081  1765		       85 df		      STA	_Bit1_Safe_Point_P1_Flip
   3082  1767				   .skip64then
   3083  1767				   .skipL0410
   3084  1767				   .__Skip_P1_Touched_P0
   3085  1767							; __Skip_P1_Touched_P0
   3086  1767
   3087  1767				   .
   3088  1767							; 
   3089  1767
   3090  1767				   .
   3091  1767							; 
   3092  1767
   3093  1767				   .
   3094  1767							; 
   3095  1767
   3096  1767				   .L0411		;  if collision(player1,ball)	||  collision(player1,playfield) then goto _Decrease_live_counter
   3097  1767
   3098  1767		       24 03		      bit	CXP1FB
   3099  1769		       50 03		      BVC	.skipL0411
   3100  176b				   .condpart66
   3101  176b		       4c 72 97 	      jmp	.condpart67
   3102  176e				   .skipL0411
   3103  176e		       24 03		      bit	CXP1FB
   3104  1770		       10 03		      BPL	.skip9OR
   3105  1772				   .condpart67
   3106  1772		       4c ea 93 	      jmp	._Decrease_live_counter
   3107  1775
   3108  1775				   .skip9OR
   3109  1775				   .
   3110  1775							; 
   3111  1775
   3112  1775				   .
   3113  1775							; 
   3114  1775
   3115  1775				   .L0412		;  _BitOp_P1_Dir  =  _BitOp_P1_Dir  &	$F0
   3116  1775
   3117  1775		       a5 d8		      LDA	_BitOp_P1_Dir
   3118  1777		       29 f0		      AND	#$F0
   3119  1779		       85 d8		      STA	_BitOp_P1_Dir
   3120  177b				   .
   3121  177b							; 
   3122  177b
   3123  177b				   .L0413		;  if joy0up then P1y_velocity  =  0.0  :  x  =  0  :	player1y  =  player1y  -  1  :	_Bit0_P1_Dir_Up{0}  =  1  :  goto skip_gravity
   3124  177b
   3125  177b		       a9 10		      lda	#$10
   3126  177d		       2c 80 02 	      bit	SWCHA
   3127  1780		       d0 17		      BNE	.skipL0413
   3128  1782				   .condpart68
   3129  1782		       a2 00		      LDX	#0
   3130  1784		       86 ea		      STX	w
   3131  1786		       a9 00		      LDA	#0
   3132  1788		       85 e9		      STA	P1y_velocity
   3133  178a		       a9 00		      LDA	#0
   3134  178c		       85 eb		      STA	x
   3135  178e		       c6 86		      DEC	player1y
   3136  1790		       a5 d8		      LDA	_Bit0_P1_Dir_Up
   3137  1792		       09 01		      ORA	#1
   3138  1794		       85 d8		      STA	_Bit0_P1_Dir_Up
   3139  1796		       4c c2 97 	      jmp	.skip_gravity
   3140  1799
   3141  1799				   .skipL0413
   3142  1799				   .L0414		;  if joy0down then player1y  =  player1y  +  1  :  _Bit1_P1_Dir_Down{1}  =  1
   3143  1799
   3144  1799		       a9 20		      lda	#$20
   3145  179b		       2c 80 02 	      bit	SWCHA
   3146  179e		       d0 08		      BNE	.skipL0414
   3147  17a0				   .condpart69
   3148  17a0		       e6 86		      INC	player1y
   3149  17a2		       a5 d8		      LDA	_Bit1_P1_Dir_Down
   3150  17a4		       09 02		      ORA	#2
   3151  17a6		       85 d8		      STA	_Bit1_P1_Dir_Down
   3152  17a8				   .skipL0414
   3153  17a8				   .
   3154  17a8							; 
   3155  17a8
   3156  17a8				   .L0415		;  rem apply gravity
   3157  17a8
   3158  17a8				   .L0416		;  P1y_velocity  =  P1y_velocity  +  gravity_player1
   3159  17a8
   3160  17a8		       a5 ea		      LDA	w
   3161  17aa		       18		      CLC
   3162  17ab		       69 01		      ADC	#1
   3163  17ad		       85 ea		      STA	w
   3164  17af		       a5 e9		      LDA	P1y_velocity
   3165  17b1		       69 00		      ADC	#0
   3166  17b3		       85 e9		      STA	P1y_velocity
   3167  17b5				   .L0417		;  P1y_position  =  P1y_position  +  P1y_velocity
   3168  17b5
   3169  17b5		       a5 eb		      LDA	x
   3170  17b7		       18		      CLC
   3171  17b8		       65 ea		      ADC	w
   3172  17ba		       85 eb		      STA	x
   3173  17bc		       a5 86		      LDA	P1y_position
   3174  17be		       65 e9		      ADC	P1y_velocity
   3175  17c0		       85 86		      STA	P1y_position
   3176  17c2				   .
   3177  17c2							; 
   3178  17c2
   3179  17c2				   .skip_gravity
   3180  17c2							; skip_gravity
   3181  17c2
   3182  17c2				   .
   3183  17c2							; 
   3184  17c2
   3185  17c2				   .L0418		;  if joy0left then _Bit6_Flip_P1{6}  =  1  :	_Bit2_P1_Dir_Left{2}  =  1  :  player1x  =  player1x  -  1  :  goto _skip_move
   3186  17c2
   3187  17c2		       2c 80 02 	      bit	SWCHA
   3188  17c5		       70 11		      BVS	.skipL0418
   3189  17c7				   .condpart70
   3190  17c7		       a5 ec		      LDA	_Bit6_Flip_P1
   3191  17c9		       09 40		      ORA	#64
   3192  17cb		       85 ec		      STA	_Bit6_Flip_P1
   3193  17cd		       a5 d8		      LDA	_Bit2_P1_Dir_Left
   3194  17cf		       09 04		      ORA	#4
   3195  17d1		       85 d8		      STA	_Bit2_P1_Dir_Left
   3196  17d3		       c6 81		      DEC	player1x
   3197  17d5		       4c eb 97 	      jmp	._skip_move
   3198  17d8
   3199  17d8				   .skipL0418
   3200  17d8				   .L0419		;  if joy0right then _Bit6_Flip_P1{6}	=  0  :  _Bit3_P1_Dir_Right{3}	=  1  :  player1x  =  player1x	+  1
   3201  17d8
   3202  17d8		       2c 80 02 	      bit	SWCHA
   3203  17db		       30 0e		      BMI	.skipL0419
   3204  17dd				   .condpart71
   3205  17dd		       a5 ec		      LDA	_Bit6_Flip_P1
   3206  17df		       29 bf		      AND	#191
   3207  17e1		       85 ec		      STA	_Bit6_Flip_P1
   3208  17e3		       a5 d8		      LDA	_Bit3_P1_Dir_Right
   3209  17e5		       09 08		      ORA	#8
   3210  17e7		       85 d8		      STA	_Bit3_P1_Dir_Right
   3211  17e9		       e6 81		      INC	player1x
   3212  17eb				   .skipL0419
   3213  17eb				   ._skip_move
   3214  17eb							; _skip_move
   3215  17eb
   3216  17eb				   .
   3217  17eb							; 
   3218  17eb
   3219  17eb				   .
   3220  17eb							; 
   3221  17eb
   3222  17eb				   .L0420		;  if player1y  <  player_min_y  &&  r_Bit0_room_type_top{0} then player1y  =	player_min_y
   3223  17eb
   3224  17eb		       a5 86		      LDA	player1y
   3225  17ed		       c9 02		      CMP	#player_min_y
   3226  17ef		       b0 0a		      BCS	.skipL0420
   3227  17f1				   .condpart72
   3228  17f1		       ad e1 f0 	      LDA	r_Bit0_room_type_top
   3229  17f4		       4a		      LSR
   3230  17f5		       90 04		      BCC	.skip72then
   3231  17f7				   .condpart73
   3232  17f7		       a9 02		      LDA	#player_min_y
   3233  17f9		       85 86		      STA	player1y
   3234  17fb				   .skip72then
   3235  17fb				   .skipL0420
   3236  17fb				   .
   3237  17fb							; 
   3238  17fb
   3239  17fb				   .
   3240  17fb							; 
   3241  17fb
   3242  17fb				   .L0421		;  if player1x  <  player_min_x then _Bit0_New_Room_P1_Flip{0}  =  _Bit6_Flip_P1{6}  :  new_room_player1y  =  player1y  :  new_room_player1x  =  player_max_x	:  gosub _Add_Room_State  :  WriteSendBuffer  =  req_move_left	:  goto _skip_game_action
   3243  17fb
   3244  17fb		       a5 81		      LDA	player1x
   3245  17fd		       c9 0a		      CMP	#player_min_x
   3246  17ff		       b0 23		      BCS	.skipL0421
   3247  1801				   .condpart74
   3248  1801		       a5 ec		      LDA	_Bit6_Flip_P1
   3249  1803		       29 40		      AND	#64
   3250  1805		       08		      PHP
   3251  1806		       a5 df		      LDA	_Bit0_New_Room_P1_Flip
   3252  1808		       29 fe		      AND	#254
   3253  180a		       28		      PLP
   3254  180b		       f0 02		      .byte.b	$F0, $02
   3255  180d		       09 01		      ORA	#1
   3256  180f		       85 df		      STA	_Bit0_New_Room_P1_Flip
   3257  1811		       a5 86		      LDA	player1y
   3258  1813		       85 a4		      STA	new_room_player1y
   3259  1815		       a9 86		      LDA	#player_max_x
   3260  1817		       85 a5		      STA	new_room_player1x
   3261  1819		       20 2c 9b 	      jsr	._Add_Room_State
   3262  181c		       a9 03		      LDA	#req_move_left
   3263  181e		       8d f1 1f 	      STA	WriteSendBuffer
   3264  1821		       4c 9c 98 	      jmp	._skip_game_action
   3265  1824
   3266  1824				   .skipL0421
   3267  1824				   .L0422		;  if player1y  <  player_min_y then _Bit0_New_Room_P1_Flip{0}  =  _Bit6_Flip_P1{6}  :  new_room_player1x  =  player1x  :  new_room_player1y  =  player_max_y	:  gosub _Add_Room_State  :  WriteSendBuffer  =  req_move_up  :  goto _skip_game_action
   3268  1824
   3269  1824		       a5 86		      LDA	player1y
   3270  1826		       c9 02		      CMP	#player_min_y
   3271  1828		       b0 23		      BCS	.skipL0422
   3272  182a				   .condpart75
   3273  182a		       a5 ec		      LDA	_Bit6_Flip_P1
   3274  182c		       29 40		      AND	#64
   3275  182e		       08		      PHP
   3276  182f		       a5 df		      LDA	_Bit0_New_Room_P1_Flip
   3277  1831		       29 fe		      AND	#254
   3278  1833		       28		      PLP
   3279  1834		       f0 02		      .byte.b	$F0, $02
   3280  1836		       09 01		      ORA	#1
   3281  1838		       85 df		      STA	_Bit0_New_Room_P1_Flip
   3282  183a		       a5 81		      LDA	player1x
   3283  183c		       85 a5		      STA	new_room_player1x
   3284  183e		       a9 4c		      LDA	#player_max_y
   3285  1840		       85 a4		      STA	new_room_player1y
   3286  1842		       20 2c 9b 	      jsr	._Add_Room_State
   3287  1845		       a9 04		      LDA	#req_move_up
   3288  1847		       8d f1 1f 	      STA	WriteSendBuffer
   3289  184a		       4c 9c 98 	      jmp	._skip_game_action
   3290  184d
   3291  184d				   .skipL0422
   3292  184d				   .L0423		;  if player1x  >  player_max_x then _Bit0_New_Room_P1_Flip{0}  =  _Bit6_Flip_P1{6}  :  new_room_player1y  =  player1y  :  new_room_player1x  =  player_min_x	:  gosub _Add_Room_State  :  WriteSendBuffer  =  req_move_right  :  goto _skip_game_action
   3293  184d
   3294  184d		       a9 86		      LDA	#player_max_x
   3295  184f		       c5 81		      CMP	player1x
   3296  1851		       b0 23		      BCS	.skipL0423
   3297  1853				   .condpart76
   3298  1853		       a5 ec		      LDA	_Bit6_Flip_P1
   3299  1855		       29 40		      AND	#64
   3300  1857		       08		      PHP
   3301  1858		       a5 df		      LDA	_Bit0_New_Room_P1_Flip
   3302  185a		       29 fe		      AND	#254
   3303  185c		       28		      PLP
   3304  185d		       f0 02		      .byte.b	$F0, $02
   3305  185f		       09 01		      ORA	#1
   3306  1861		       85 df		      STA	_Bit0_New_Room_P1_Flip
   3307  1863		       a5 86		      LDA	player1y
   3308  1865		       85 a4		      STA	new_room_player1y
   3309  1867		       a9 0a		      LDA	#player_min_x
   3310  1869		       85 a5		      STA	new_room_player1x
   3311  186b		       20 2c 9b 	      jsr	._Add_Room_State
   3312  186e		       a9 05		      LDA	#req_move_right
   3313  1870		       8d f1 1f 	      STA	WriteSendBuffer
   3314  1873		       4c 9c 98 	      jmp	._skip_game_action
   3315  1876
   3316  1876				   .skipL0423
   3317  1876				   .L0424		;  if player1y  >  player_max_y then _Bit0_New_Room_P1_Flip{0}  =  _Bit6_Flip_P1{6}  :  new_room_player1x  =  player1x  :  new_room_player1y  =  player_min_y	:  gosub _Add_Room_State  :  WriteSendBuffer  =  req_move_down
   3318  1876
   3319  1876		       a9 4c		      LDA	#player_max_y
   3320  1878		       c5 86		      CMP	player1y
   3321  187a		       b0 20		      BCS	.skipL0424
   3322  187c				   .condpart77
   3323  187c		       a5 ec		      LDA	_Bit6_Flip_P1
   3324  187e		       29 40		      AND	#64
   3325  1880		       08		      PHP
   3326  1881		       a5 df		      LDA	_Bit0_New_Room_P1_Flip
   3327  1883		       29 fe		      AND	#254
   3328  1885		       28		      PLP
   3329  1886		       f0 02		      .byte.b	$F0, $02
   3330  1888		       09 01		      ORA	#1
   3331  188a		       85 df		      STA	_Bit0_New_Room_P1_Flip
   3332  188c		       a5 81		      LDA	player1x
   3333  188e		       85 a5		      STA	new_room_player1x
   3334  1890		       a9 02		      LDA	#player_min_y
   3335  1892		       85 a4		      STA	new_room_player1y
   3336  1894		       20 2c 9b 	      jsr	._Add_Room_State
   3337  1897		       a9 06		      LDA	#req_move_down
   3338  1899		       8d f1 1f 	      STA	WriteSendBuffer
   3339  189c				   .skipL0424
   3340  189c				   .
   3341  189c							; 
   3342  189c
   3343  189c				   ._skip_game_action
   3344  189c							; _skip_game_action
   3345  189c
   3346  189c				   .
   3347  189c							; 
   3348  189c
   3349  189c				   .
   3350  189c							; 
   3351  189c
   3352  189c				   .L0425		;  if !_Ch0_Sound then goto __Skip_Ch_0
   3353  189c
   3354  189c		       a5 d9		      LDA	_Ch0_Sound
   3355  189e		       d0 03		      BNE	.skipL0425
   3356  18a0				   .condpart78
   3357  18a0		       4c cf 99 	      jmp	.__Skip_Ch_0
   3358  18a3
   3359  18a3				   .skipL0425
   3360  18a3				   .
   3361  18a3							; 
   3362  18a3
   3363  18a3				   .
   3364  18a3							; 
   3365  18a3
   3366  18a3				   .L0426		;  _Ch0_Duration  =  _Ch0_Duration  -	1
   3367  18a3
   3368  18a3		       c6 da		      DEC	_Ch0_Duration
   3369  18a5				   .
   3370  18a5							; 
   3371  18a5
   3372  18a5				   .
   3373  18a5							; 
   3374  18a5
   3375  18a5				   .
   3376  18a5							; 
   3377  18a5
   3378  18a5				   .L0427		;  if _Ch0_Duration then goto __Skip_Ch_0
   3379  18a5
   3380  18a5		       a5 da		      LDA	_Ch0_Duration
   3381  18a7		       f0 03		      BEQ	.skipL0427
   3382  18a9				   .condpart79
   3383  18a9		       4c cf 99 	      jmp	.__Skip_Ch_0
   3384  18ac
   3385  18ac				   .skipL0427
   3386  18ac				   .
   3387  18ac							; 
   3388  18ac
   3389  18ac				   .
   3390  18ac							; 
   3391  18ac
   3392  18ac				   .
   3393  18ac							; 
   3394  18ac
   3395  18ac				   .
   3396  18ac							; 
   3397  18ac
   3398  18ac				   .L0428		;  if _Ch0_Sound  <>  1 then goto __Skip_Ch0_Sound_001
   3399  18ac
   3400  18ac		       a5 d9		      LDA	_Ch0_Sound
   3401  18ae		       c9 01		      CMP	#1
   3402  18b0		       f0 03		      BEQ	.skipL0428
   3403  18b2				   .condpart80
   3404  18b2		       4c fa 98 	      jmp	.__Skip_Ch0_Sound_001
   3405  18b5
   3406  18b5				   .skipL0428
   3407  18b5				   .
   3408  18b5							; 
   3409  18b5
   3410  18b5				   .
   3411  18b5							; 
   3412  18b5
   3413  18b5				   .L0429		;  temp4  =  _SD_Shot_Wall[_Ch0_Counter]
   3414  18b5
   3415  18b5		       a6 db		      LDX	_Ch0_Counter
   3416  18b7		       bd e1 9b 	      LDA	_SD_Shot_Wall,x
   3417  18ba		       85 9f		      STA	temp4
   3418  18bc				   .
   3419  18bc							; 
   3420  18bc
   3421  18bc				   .
   3422  18bc							; 
   3423  18bc
   3424  18bc				   .L0430		;  if temp4  =  255 then goto __Clear_Ch_0
   3425  18bc
   3426  18bc		       a5 9f		      LDA	temp4
   3427  18be		       c9 ff		      CMP	#255
   3428  18c0		       d0 03		      BNE	.skipL0430
   3429  18c2				   .condpart81
   3430  18c2		       4c c9 99 	      jmp	.__Clear_Ch_0
   3431  18c5
   3432  18c5				   .skipL0430
   3433  18c5				   .
   3434  18c5							; 
   3435  18c5
   3436  18c5				   .
   3437  18c5							; 
   3438  18c5
   3439  18c5				   .L0431		;  _Ch0_Counter  =  _Ch0_Counter  +  1
   3440  18c5
   3441  18c5		       e6 db		      INC	_Ch0_Counter
   3442  18c7				   .L0432		;  temp5  =  _SD_Shot_Wall[_Ch0_Counter]  :  _Ch0_Counter  =  _Ch0_Counter  +	1
   3443  18c7
   3444  18c7		       a6 db		      LDX	_Ch0_Counter
   3445  18c9		       bd e1 9b 	      LDA	_SD_Shot_Wall,x
   3446  18cc		       85 a0		      STA	temp5
   3447  18ce		       e6 db		      INC	_Ch0_Counter
   3448  18d0				   .L0433		;  temp6  =  _SD_Shot_Wall[_Ch0_Counter]  :  _Ch0_Counter  =  _Ch0_Counter  +	1
   3449  18d0
   3450  18d0		       a6 db		      LDX	_Ch0_Counter
   3451  18d2		       bd e1 9b 	      LDA	_SD_Shot_Wall,x
   3452  18d5		       85 a1		      STA	temp6
   3453  18d7		       e6 db		      INC	_Ch0_Counter
   3454  18d9				   .L0434		;  if _Ch0_Counter{0} then COLUBK  =  _E0
   3455  18d9
   3456  18d9		       a5 db		      LDA	_Ch0_Counter
   3457  18db		       4a		      LSR
   3458  18dc		       90 04		      BCC	.skipL0434
   3459  18de				   .condpart82
   3460  18de		       a9 e0		      LDA	#_E0
   3461  18e0		       85 09		      STA	COLUBK
   3462  18e2				   .skipL0434
   3463  18e2				   .
   3464  18e2							; 
   3465  18e2
   3466  18e2				   .
   3467  18e2							; 
   3468  18e2
   3469  18e2				   .L0435		;  AUDV0  =  temp4
   3470  18e2
   3471  18e2		       a5 9f		      LDA	temp4
   3472  18e4		       85 19		      STA	AUDV0
   3473  18e6				   .L0436		;  AUDC0  =  temp5
   3474  18e6
   3475  18e6		       a5 a0		      LDA	temp5
   3476  18e8		       85 15		      STA	AUDC0
   3477  18ea				   .L0437		;  AUDF0  =  temp6
   3478  18ea
   3479  18ea		       a5 a1		      LDA	temp6
   3480  18ec		       85 17		      STA	AUDF0
   3481  18ee				   .
   3482  18ee							; 
   3483  18ee
   3484  18ee				   .
   3485  18ee							; 
   3486  18ee
   3487  18ee				   .L0438		;  _Ch0_Duration  =  _SD_Shot_Wall[_Ch0_Counter]  :  _Ch0_Counter  =  _Ch0_Counter  +	1
   3488  18ee
   3489  18ee		       a6 db		      LDX	_Ch0_Counter
   3490  18f0		       bd e1 9b 	      LDA	_SD_Shot_Wall,x
   3491  18f3		       85 da		      STA	_Ch0_Duration
   3492  18f5		       e6 db		      INC	_Ch0_Counter
   3493  18f7				   .
   3494  18f7							; 
   3495  18f7
   3496  18f7				   .
   3497  18f7							; 
   3498  18f7
   3499  18f7				   .L0439		;  goto __Skip_Ch_0
   3500  18f7
   3501  18f7		       4c cf 99 	      jmp	.__Skip_Ch_0
   3502  18fa
   3503  18fa				   .
   3504  18fa							; 
   3505  18fa
   3506  18fa				   .__Skip_Ch0_Sound_001
   3507  18fa							; __Skip_Ch0_Sound_001
   3508  18fa
   3509  18fa				   .
   3510  18fa							; 
   3511  18fa
   3512  18fa				   .
   3513  18fa							; 
   3514  18fa
   3515  18fa				   .
   3516  18fa							; 
   3517  18fa
   3518  18fa				   .
   3519  18fa							; 
   3520  18fa
   3521  18fa				   .L0440		;  if _Ch0_Sound  <>  2 then goto __Skip_Ch0_Sound_002
   3522  18fa
   3523  18fa		       a5 d9		      LDA	_Ch0_Sound
   3524  18fc		       c9 02		      CMP	#2
   3525  18fe		       f0 03		      BEQ	.skipL0440
   3526  1900				   .condpart83
   3527  1900		       4c 3f 99 	      jmp	.__Skip_Ch0_Sound_002
   3528  1903
   3529  1903				   .skipL0440
   3530  1903				   .
   3531  1903							; 
   3532  1903
   3533  1903				   .
   3534  1903							; 
   3535  1903
   3536  1903				   .L0441		;  temp4  =  _SD_Shoot_Miss[_Ch0_Counter]
   3537  1903
   3538  1903		       a6 db		      LDX	_Ch0_Counter
   3539  1905		       bd 19 9c 	      LDA	_SD_Shoot_Miss,x
   3540  1908		       85 9f		      STA	temp4
   3541  190a				   .
   3542  190a							; 
   3543  190a
   3544  190a				   .
   3545  190a							; 
   3546  190a
   3547  190a				   .L0442		;  if temp4  =  255 then goto __Clear_Ch_0
   3548  190a
   3549  190a		       a5 9f		      LDA	temp4
   3550  190c		       c9 ff		      CMP	#255
   3551  190e		       d0 03		      BNE	.skipL0442
   3552  1910				   .condpart84
   3553  1910		       4c c9 99 	      jmp	.__Clear_Ch_0
   3554  1913
   3555  1913				   .skipL0442
   3556  1913				   .
   3557  1913							; 
   3558  1913
   3559  1913				   .
   3560  1913							; 
   3561  1913
   3562  1913				   .L0443		;  _Ch0_Counter  =  _Ch0_Counter  +  1
   3563  1913
   3564  1913		       e6 db		      INC	_Ch0_Counter
   3565  1915				   .L0444		;  temp5  =  _SD_Shoot_Miss[_Ch0_Counter]  :  _Ch0_Counter  =	_Ch0_Counter  +  1
   3566  1915
   3567  1915		       a6 db		      LDX	_Ch0_Counter
   3568  1917		       bd 19 9c 	      LDA	_SD_Shoot_Miss,x
   3569  191a		       85 a0		      STA	temp5
   3570  191c		       e6 db		      INC	_Ch0_Counter
   3571  191e				   .L0445		;  temp6  =  _SD_Shoot_Miss[_Ch0_Counter]  :  _Ch0_Counter  =	_Ch0_Counter  +  1
   3572  191e
   3573  191e		       a6 db		      LDX	_Ch0_Counter
   3574  1920		       bd 19 9c 	      LDA	_SD_Shoot_Miss,x
   3575  1923		       85 a1		      STA	temp6
   3576  1925		       e6 db		      INC	_Ch0_Counter
   3577  1927				   .
   3578  1927							; 
   3579  1927
   3580  1927				   .
   3581  1927							; 
   3582  1927
   3583  1927				   .L0446		;  AUDV0  =  temp4
   3584  1927
   3585  1927		       a5 9f		      LDA	temp4
   3586  1929		       85 19		      STA	AUDV0
   3587  192b				   .L0447		;  AUDC0  =  temp5
   3588  192b
   3589  192b		       a5 a0		      LDA	temp5
   3590  192d		       85 15		      STA	AUDC0
   3591  192f				   .L0448		;  AUDF0  =  temp6
   3592  192f
   3593  192f		       a5 a1		      LDA	temp6
   3594  1931		       85 17		      STA	AUDF0
   3595  1933				   .
   3596  1933							; 
   3597  1933
   3598  1933				   .
   3599  1933							; 
   3600  1933
   3601  1933				   .L0449		;  _Ch0_Duration  =  _SD_Shoot_Miss[_Ch0_Counter]  :  _Ch0_Counter  =	_Ch0_Counter  +  1
   3602  1933
   3603  1933		       a6 db		      LDX	_Ch0_Counter
   3604  1935		       bd 19 9c 	      LDA	_SD_Shoot_Miss,x
   3605  1938		       85 da		      STA	_Ch0_Duration
   3606  193a		       e6 db		      INC	_Ch0_Counter
   3607  193c				   .
   3608  193c							; 
   3609  193c
   3610  193c				   .
   3611  193c							; 
   3612  193c
   3613  193c				   .L0450		;  goto __Skip_Ch_0
   3614  193c
   3615  193c		       4c cf 99 	      jmp	.__Skip_Ch_0
   3616  193f
   3617  193f				   .
   3618  193f							; 
   3619  193f
   3620  193f				   .__Skip_Ch0_Sound_002
   3621  193f							; __Skip_Ch0_Sound_002
   3622  193f
   3623  193f				   .
   3624  193f							; 
   3625  193f
   3626  193f				   .
   3627  193f							; 
   3628  193f
   3629  193f				   .
   3630  193f							; 
   3631  193f
   3632  193f				   .
   3633  193f							; 
   3634  193f
   3635  193f				   .L0451		;  if _Ch0_Sound  <>  3 then goto __Skip_Ch0_Sound_003
   3636  193f
   3637  193f		       a5 d9		      LDA	_Ch0_Sound
   3638  1941		       c9 03		      CMP	#3
   3639  1943		       f0 03		      BEQ	.skipL0451
   3640  1945				   .condpart85
   3641  1945		       4c 84 99 	      jmp	.__Skip_Ch0_Sound_003
   3642  1948
   3643  1948				   .skipL0451
   3644  1948				   .
   3645  1948							; 
   3646  1948
   3647  1948				   .
   3648  1948							; 
   3649  1948
   3650  1948				   .L0452		;  temp4  =  _SD_Shoot_Enemy[_Ch0_Counter]
   3651  1948
   3652  1948		       a6 db		      LDX	_Ch0_Counter
   3653  194a		       bd 61 9c 	      LDA	_SD_Shoot_Enemy,x
   3654  194d		       85 9f		      STA	temp4
   3655  194f				   .
   3656  194f							; 
   3657  194f
   3658  194f				   .
   3659  194f							; 
   3660  194f
   3661  194f				   .L0453		;  if temp4  =  255 then goto __Clear_Ch_0
   3662  194f
   3663  194f		       a5 9f		      LDA	temp4
   3664  1951		       c9 ff		      CMP	#255
   3665  1953		       d0 03		      BNE	.skipL0453
   3666  1955				   .condpart86
   3667  1955		       4c c9 99 	      jmp	.__Clear_Ch_0
   3668  1958
   3669  1958				   .skipL0453
   3670  1958				   .
   3671  1958							; 
   3672  1958
   3673  1958				   .
   3674  1958							; 
   3675  1958
   3676  1958				   .L0454		;  _Ch0_Counter  =  _Ch0_Counter  +  1
   3677  1958
   3678  1958		       e6 db		      INC	_Ch0_Counter
   3679  195a				   .L0455		;  temp5  =  _SD_Shoot_Enemy[_Ch0_Counter]  :	_Ch0_Counter  =  _Ch0_Counter  +  1
   3680  195a
   3681  195a		       a6 db		      LDX	_Ch0_Counter
   3682  195c		       bd 61 9c 	      LDA	_SD_Shoot_Enemy,x
   3683  195f		       85 a0		      STA	temp5
   3684  1961		       e6 db		      INC	_Ch0_Counter
   3685  1963				   .L0456		;  temp6  =  _SD_Shoot_Enemy[_Ch0_Counter]  :	_Ch0_Counter  =  _Ch0_Counter  +  1
   3686  1963
   3687  1963		       a6 db		      LDX	_Ch0_Counter
   3688  1965		       bd 61 9c 	      LDA	_SD_Shoot_Enemy,x
   3689  1968		       85 a1		      STA	temp6
   3690  196a		       e6 db		      INC	_Ch0_Counter
   3691  196c				   .
   3692  196c							; 
   3693  196c
   3694  196c				   .
   3695  196c							; 
   3696  196c
   3697  196c				   .L0457		;  AUDV0  =  temp4
   3698  196c
   3699  196c		       a5 9f		      LDA	temp4
   3700  196e		       85 19		      STA	AUDV0
   3701  1970				   .L0458		;  AUDC0  =  temp5
   3702  1970
   3703  1970		       a5 a0		      LDA	temp5
   3704  1972		       85 15		      STA	AUDC0
   3705  1974				   .L0459		;  AUDF0  =  temp6
   3706  1974
   3707  1974		       a5 a1		      LDA	temp6
   3708  1976		       85 17		      STA	AUDF0
   3709  1978				   .
   3710  1978							; 
   3711  1978
   3712  1978				   .
   3713  1978							; 
   3714  1978
   3715  1978				   .L0460		;  _Ch0_Duration  =  _SD_Shoot_Enemy[_Ch0_Counter]  :	_Ch0_Counter  =  _Ch0_Counter  +  1
   3716  1978
   3717  1978		       a6 db		      LDX	_Ch0_Counter
   3718  197a		       bd 61 9c 	      LDA	_SD_Shoot_Enemy,x
   3719  197d		       85 da		      STA	_Ch0_Duration
   3720  197f		       e6 db		      INC	_Ch0_Counter
   3721  1981				   .
   3722  1981							; 
   3723  1981
   3724  1981				   .
   3725  1981							; 
   3726  1981
   3727  1981				   .L0461		;  goto __Skip_Ch_0
   3728  1981
   3729  1981		       4c cf 99 	      jmp	.__Skip_Ch_0
   3730  1984
   3731  1984				   .
   3732  1984							; 
   3733  1984
   3734  1984				   .__Skip_Ch0_Sound_003
   3735  1984							; __Skip_Ch0_Sound_003
   3736  1984
   3737  1984				   .
   3738  1984							; 
   3739  1984
   3740  1984				   .
   3741  1984							; 
   3742  1984
   3743  1984				   .
   3744  1984							; 
   3745  1984
   3746  1984				   .
   3747  1984							; 
   3748  1984
   3749  1984				   .L0462		;  if _Ch0_Sound  <>  4 then goto __Skip_Ch0_Sound_004
   3750  1984
   3751  1984		       a5 d9		      LDA	_Ch0_Sound
   3752  1986		       c9 04		      CMP	#4
   3753  1988		       f0 03		      BEQ	.skipL0462
   3754  198a				   .condpart87
   3755  198a		       4c c9 99 	      jmp	.__Skip_Ch0_Sound_004
   3756  198d
   3757  198d				   .skipL0462
   3758  198d				   .
   3759  198d							; 
   3760  198d
   3761  198d				   .
   3762  198d							; 
   3763  198d
   3764  198d				   .L0463		;  temp4  =  _SD_Touch_Enemy[_Ch0_Counter]
   3765  198d
   3766  198d		       a6 db		      LDX	_Ch0_Counter
   3767  198f		       bd 85 9c 	      LDA	_SD_Touch_Enemy,x
   3768  1992		       85 9f		      STA	temp4
   3769  1994				   .
   3770  1994							; 
   3771  1994
   3772  1994				   .
   3773  1994							; 
   3774  1994
   3775  1994				   .L0464		;  if temp4  =  255 then goto __Clear_Ch_0
   3776  1994
   3777  1994		       a5 9f		      LDA	temp4
   3778  1996		       c9 ff		      CMP	#255
   3779  1998		       d0 03		      BNE	.skipL0464
   3780  199a				   .condpart88
   3781  199a		       4c c9 99 	      jmp	.__Clear_Ch_0
   3782  199d
   3783  199d				   .skipL0464
   3784  199d				   .
   3785  199d							; 
   3786  199d
   3787  199d				   .
   3788  199d							; 
   3789  199d
   3790  199d				   .L0465		;  _Ch0_Counter  =  _Ch0_Counter  +  1
   3791  199d
   3792  199d		       e6 db		      INC	_Ch0_Counter
   3793  199f				   .L0466		;  temp5  =  _SD_Touch_Enemy[_Ch0_Counter]  :	_Ch0_Counter  =  _Ch0_Counter  +  1
   3794  199f
   3795  199f		       a6 db		      LDX	_Ch0_Counter
   3796  19a1		       bd 85 9c 	      LDA	_SD_Touch_Enemy,x
   3797  19a4		       85 a0		      STA	temp5
   3798  19a6		       e6 db		      INC	_Ch0_Counter
   3799  19a8				   .L0467		;  temp6  =  _SD_Touch_Enemy[_Ch0_Counter]  :	_Ch0_Counter  =  _Ch0_Counter  +  1
   3800  19a8
   3801  19a8		       a6 db		      LDX	_Ch0_Counter
   3802  19aa		       bd 85 9c 	      LDA	_SD_Touch_Enemy,x
   3803  19ad		       85 a1		      STA	temp6
   3804  19af		       e6 db		      INC	_Ch0_Counter
   3805  19b1				   .
   3806  19b1							; 
   3807  19b1
   3808  19b1				   .
   3809  19b1							; 
   3810  19b1
   3811  19b1				   .L0468		;  AUDV0  =  temp4
   3812  19b1
   3813  19b1		       a5 9f		      LDA	temp4
   3814  19b3		       85 19		      STA	AUDV0
   3815  19b5				   .L0469		;  AUDC0  =  temp5
   3816  19b5
   3817  19b5		       a5 a0		      LDA	temp5
   3818  19b7		       85 15		      STA	AUDC0
   3819  19b9				   .L0470		;  AUDF0  =  temp6
   3820  19b9
   3821  19b9		       a5 a1		      LDA	temp6
   3822  19bb		       85 17		      STA	AUDF0
   3823  19bd				   .
   3824  19bd							; 
   3825  19bd
   3826  19bd				   .
   3827  19bd							; 
   3828  19bd
   3829  19bd				   .L0471		;  _Ch0_Duration  =  _SD_Touch_Enemy[_Ch0_Counter]  :	_Ch0_Counter  =  _Ch0_Counter  +  1
   3830  19bd
   3831  19bd		       a6 db		      LDX	_Ch0_Counter
   3832  19bf		       bd 85 9c 	      LDA	_SD_Touch_Enemy,x
   3833  19c2		       85 da		      STA	_Ch0_Duration
   3834  19c4		       e6 db		      INC	_Ch0_Counter
   3835  19c6				   .
   3836  19c6							; 
   3837  19c6
   3838  19c6				   .
   3839  19c6							; 
   3840  19c6
   3841  19c6				   .L0472		;  goto __Skip_Ch_0
   3842  19c6
   3843  19c6		       4c cf 99 	      jmp	.__Skip_Ch_0
   3844  19c9
   3845  19c9				   .
   3846  19c9							; 
   3847  19c9
   3848  19c9				   .__Skip_Ch0_Sound_004
   3849  19c9							; __Skip_Ch0_Sound_004
   3850  19c9
   3851  19c9				   .
   3852  19c9							; 
   3853  19c9
   3854  19c9				   .
   3855  19c9							; 
   3856  19c9
   3857  19c9				   .__Clear_Ch_0
   3858  19c9							; __Clear_Ch_0
   3859  19c9
   3860  19c9				   .L0473		;  _Ch0_Sound	=  0  :  AUDV0	=  0
   3861  19c9
   3862  19c9		       a9 00		      LDA	#0
   3863  19cb		       85 d9		      STA	_Ch0_Sound
   3864  19cd		       85 19		      STA	AUDV0
   3865  19cf				   .
   3866  19cf							; 
   3867  19cf
   3868  19cf				   .
   3869  19cf							; 
   3870  19cf
   3871  19cf				   .__Skip_Ch_0
   3872  19cf							; __Skip_Ch_0
   3873  19cf
   3874  19cf				   .
   3875  19cf							; 
   3876  19cf
   3877  19cf				   .
   3878  19cf							; 
   3879  19cf
   3880  19cf				   .
   3881  19cf							; 
   3882  19cf
   3883  19cf				   .
   3884  19cf							; 
   3885  19cf
   3886  19cf				   .
   3887  19cf							; 
   3888  19cf
   3889  19cf				   .
   3890  19cf							; 
   3891  19cf
   3892  19cf				   .
   3893  19cf							; 
   3894  19cf
   3895  19cf				   .L0474		;  _Ch1_Duration  =  _Ch1_Duration  -	1
   3896  19cf
   3897  19cf		       c6 e2		      DEC	_Ch1_Duration
   3898  19d1				   .
   3899  19d1							; 
   3900  19d1
   3901  19d1				   .
   3902  19d1							; 
   3903  19d1
   3904  19d1				   .
   3905  19d1							; 
   3906  19d1
   3907  19d1				   .
   3908  19d1							; 
   3909  19d1
   3910  19d1				   .L0475		;  if _Ch1_Duration then goto __Skip_Ch_1
   3911  19d1
   3912  19d1		       a5 e2		      LDA	_Ch1_Duration
   3913  19d3		       f0 03		      BEQ	.skipL0475
   3914  19d5				   .condpart89
   3915  19d5		       4c 1d 9a 	      jmp	.__Skip_Ch_1
   3916  19d8
   3917  19d8				   .skipL0475
   3918  19d8				   .
   3919  19d8							; 
   3920  19d8
   3921  19d8				   .
   3922  19d8							; 
   3923  19d8
   3924  19d8				   .
   3925  19d8							; 
   3926  19d8
   3927  19d8				   .
   3928  19d8							; 
   3929  19d8
   3930  19d8				   .
   3931  19d8							; 
   3932  19d8
   3933  19d8				   .
   3934  19d8							; 
   3935  19d8
   3936  19d8				   .
   3937  19d8							; 
   3938  19d8
   3939  19d8				   .
   3940  19d8							; 
   3941  19d8
   3942  19d8				   .
   3943  19d8							; 
   3944  19d8
   3945  19d8				   .
   3946  19d8							; 
   3947  19d8
   3948  19d8				   .L0476		;  temp4  =  sread ( _SD_Music01 ) 
   3949  19d8
   3950  19d8		       a2 b2		      ldx	#_SD_Music01
   3951  19da		       a1 00		      lda	(0,x)
   3952  19dc		       f6 00		      inc	0,x
   3953  19de		       d0 02		      bne	*+4
   3954  19e0		       f6 01		      inc	1,x
   3955  19e2		       85 9f		      STA	temp4
   3956  19e4				   .
   3957  19e4							; 
   3958  19e4
   3959  19e4				   .
   3960  19e4							; 
   3961  19e4
   3962  19e4				   .
   3963  19e4							; 
   3964  19e4
   3965  19e4				   .
   3966  19e4							; 
   3967  19e4
   3968  19e4				   .L0477		;  if temp4  =  255 then goto __BG_Music_Setup_01
   3969  19e4
   3970  19e4		       a5 9f		      LDA	temp4
   3971  19e6		       c9 ff		      CMP	#255
   3972  19e8		       d0 03		      BNE	.skipL0477
   3973  19ea				   .condpart90
   3974  19ea		       4c a2 9c 	      jmp	.__BG_Music_Setup_01
   3975  19ed
   3976  19ed				   .skipL0477
   3977  19ed				   .
   3978  19ed							; 
   3979  19ed
   3980  19ed				   .
   3981  19ed							; 
   3982  19ed
   3983  19ed				   .
   3984  19ed							; 
   3985  19ed
   3986  19ed				   .
   3987  19ed							; 
   3988  19ed
   3989  19ed				   .L0478		;  temp5  =  sread ( _SD_Music01 ) 
   3990  19ed
   3991  19ed		       a2 b2		      ldx	#_SD_Music01
   3992  19ef		       a1 00		      lda	(0,x)
   3993  19f1		       f6 00		      inc	0,x
   3994  19f3		       d0 02		      bne	*+4
   3995  19f5		       f6 01		      inc	1,x
   3996  19f7		       85 a0		      STA	temp5
   3997  19f9				   .L0479		;  temp6  =  sread ( _SD_Music01 ) 
   3998  19f9
   3999  19f9		       a2 b2		      ldx	#_SD_Music01
   4000  19fb		       a1 00		      lda	(0,x)
   4001  19fd		       f6 00		      inc	0,x
   4002  19ff		       d0 02		      bne	*+4
   4003  1a01		       f6 01		      inc	1,x
   4004  1a03		       85 a1		      STA	temp6
   4005  1a05				   .
   4006  1a05							; 
   4007  1a05
   4008  1a05				   .
   4009  1a05							; 
   4010  1a05
   4011  1a05				   .
   4012  1a05							; 
   4013  1a05
   4014  1a05				   .
   4015  1a05							; 
   4016  1a05
   4017  1a05				   .L0480		;  AUDV1  =  temp4
   4018  1a05
   4019  1a05		       a5 9f		      LDA	temp4
   4020  1a07		       85 1a		      STA	AUDV1
   4021  1a09				   .L0481		;  AUDC1  =  temp5
   4022  1a09
   4023  1a09		       a5 a0		      LDA	temp5
   4024  1a0b		       85 16		      STA	AUDC1
   4025  1a0d				   .L0482		;  AUDF1  =  temp6
   4026  1a0d
   4027  1a0d		       a5 a1		      LDA	temp6
   4028  1a0f		       85 18		      STA	AUDF1
   4029  1a11				   .
   4030  1a11							; 
   4031  1a11
   4032  1a11				   .
   4033  1a11							; 
   4034  1a11
   4035  1a11				   .
   4036  1a11							; 
   4037  1a11
   4038  1a11				   .
   4039  1a11							; 
   4040  1a11
   4041  1a11				   .L0483		;  _Ch1_Duration  =  sread ( _SD_Music01 ) 
   4042  1a11
   4043  1a11		       a2 b2		      ldx	#_SD_Music01
   4044  1a13		       a1 00		      lda	(0,x)
   4045  1a15		       f6 00		      inc	0,x
   4046  1a17		       d0 02		      bne	*+4
   4047  1a19		       f6 01		      inc	1,x
   4048  1a1b		       85 e2		      STA	_Ch1_Duration
   4049  1a1d				   .
   4050  1a1d							; 
   4051  1a1d
   4052  1a1d				   .
   4053  1a1d							; 
   4054  1a1d
   4055  1a1d				   .
   4056  1a1d							; 
   4057  1a1d
   4058  1a1d				   .
   4059  1a1d							; 
   4060  1a1d
   4061  1a1d				   .
   4062  1a1d							; 
   4063  1a1d
   4064  1a1d				   .
   4065  1a1d							; 
   4066  1a1d
   4067  1a1d				   .
   4068  1a1d							; 
   4069  1a1d
   4070  1a1d				   .__Skip_Ch_1
   4071  1a1d							; __Skip_Ch_1
   4072  1a1d
   4073  1a1d				   .
   4074  1a1d							; 
   4075  1a1d
   4076  1a1d				   .
   4077  1a1d							; 
   4078  1a1d
   4079  1a1d				   .
   4080  1a1d							; 
   4081  1a1d
   4082  1a1d				   .
   4083  1a1d							; 
   4084  1a1d
   4085  1a1d				   .
   4086  1a1d							; 
   4087  1a1d
   4088  1a1d				   .
   4089  1a1d							; 
   4090  1a1d
   4091  1a1d				   .
   4092  1a1d							; 
   4093  1a1d
   4094  1a1d				   .
   4095  1a1d							; 
   4096  1a1d
   4097  1a1d				   .L0484		;  if _Bit6_Flip_P1{6} then REFP1  =  8
   4098  1a1d
   4099  1a1d		       24 ec		      BIT	_Bit6_Flip_P1
   4100  1a1f		       50 04		      BVC	.skipL0484
   4101  1a21				   .condpart91
   4102  1a21		       a9 08		      LDA	#8
   4103  1a23		       85 0c		      STA	REFP1
   4104  1a25				   .skipL0484
   4105  1a25				   .L0485		;  if _Bit0_roommate_Dir{0} then REFP0  =  8
   4106  1a25
   4107  1a25		       a5 ec		      LDA	_Bit0_roommate_Dir
   4108  1a27		       4a		      LSR
   4109  1a28		       90 04		      BCC	.skipL0485
   4110  1a2a				   .condpart92
   4111  1a2a		       a9 08		      LDA	#8
   4112  1a2c		       85 0b		      STA	REFP0
   4113  1a2e				   .skipL0485
   4114  1a2e				   .
   4115  1a2e							; 
   4116  1a2e
   4117  1a2e				   .L0486		;  drawscreen
   4118  1a2e
   4119  1a2e		       85 ee		      sta	temp7
   4120  1a30		       a9 9a		      lda	#>(ret_point2-1)
   4121  1a32		       48		      pha
   4122  1a33		       a9 45		      lda	#<(ret_point2-1)
   4123  1a35		       48		      pha
   4124  1a36		       a9 f4		      lda	#>(drawscreen-1)
   4125  1a38		       48		      pha
   4126  1a39		       a9 e1		      lda	#<(drawscreen-1)
   4127  1a3b		       48		      pha
   4128  1a3c		       a5 ee		      lda	temp7
   4129  1a3e		       48		      pha
   4130  1a3f		       8a		      txa
   4131  1a40		       48		      pha
   4132  1a41		       a2 04		      ldx	#4
   4133  1a43		       4c e8 ff 	      jmp	BS_jsr
   4134  1a46				   ret_point2
   4135  1a46				   .
   4136  1a46							; 
   4137  1a46
   4138  1a46				   .L0487		;  goto __Main_Loop
   4139  1a46
   4140  1a46		       4c 8c 91 	      jmp	.__Main_Loop
   4141  1a49
   4142  1a49				   .
   4143  1a49							; 
   4144  1a49
   4145  1a49				   .
   4146  1a49							; 
   4147  1a49
   4148  1a49				   .
   4149  1a49							; 
   4150  1a49
   4151  1a49				   .
   4152  1a49							; 
   4153  1a49
   4154  1a49				   .
   4155  1a49							; 
   4156  1a49
   4157  1a49				   ._Set_Game_Over
   4158  1a49							; _Set_Game_Over
   4159  1a49
   4160  1a49				   .L0488		;  WriteToBuffer  =  _sc1
   4161  1a49
   4162  1a49		       a5 93		      LDA	_sc1
   4163  1a4b		       8d f0 1f 	      STA	WriteToBuffer
   4164  1a4e				   .L0489		;  WriteToBuffer  =  _sc2
   4165  1a4e
   4166  1a4e		       a5 94		      LDA	_sc2
   4167  1a50		       8d f0 1f 	      STA	WriteToBuffer
   4168  1a53				   .L0490		;  WriteToBuffer  =  _sc3
   4169  1a53
   4170  1a53		       a5 95		      LDA	_sc3
   4171  1a55		       8d f0 1f 	      STA	WriteToBuffer
   4172  1a58				   .L0491		;  WriteSendBuffer  =	req_game_over
   4173  1a58
   4174  1a58		       a9 02		      LDA	#req_game_over
   4175  1a5a		       8d f1 1f 	      STA	WriteSendBuffer
   4176  1a5d				   .L0492		;  _Bit4_Game_Over{4}	=  1
   4177  1a5d
   4178  1a5d		       a5 ec		      LDA	_Bit4_Game_Over
   4179  1a5f		       09 10		      ORA	#16
   4180  1a61		       85 ec		      STA	_Bit4_Game_Over
   4181  1a63				   .L0493		;  goto _skip_game_action
   4182  1a63
   4183  1a63		       4c 9c 98 	      jmp	._skip_game_action
   4184  1a66
   4185  1a66				   .
   4186  1a66							; 
   4187  1a66
   4188  1a66				   ._Reset_Level
   4189  1a66							; _Reset_Level
   4190  1a66
   4191  1a66				   .L0494		;  gosub _Add_Room_State
   4192  1a66
   4193  1a66		       20 2c 9b 	      jsr	._Add_Room_State
   4194  1a69
   4195  1a69				   .L0495		;  WriteSendBuffer  =	req_level_reset
   4196  1a69
   4197  1a69		       a9 07		      LDA	#req_level_reset
   4198  1a6b		       8d f1 1f 	      STA	WriteSendBuffer
   4199  1a6e				   .L0496		;  _Bit0_New_Room_P1_Flip{0}  =  _Bit1_Safe_Point_P1_Flip{1}
   4200  1a6e
   4201  1a6e		       a5 df		      LDA	_Bit1_Safe_Point_P1_Flip
   4202  1a70		       29 02		      AND	#2
   4203  1a72		       08		      PHP
   4204  1a73		       a5 df		      LDA	_Bit0_New_Room_P1_Flip
   4205  1a75		       29 fe		      AND	#254
   4206  1a77		       28		      PLP
   4207  1a78		       f0 02		      .byte.b	$F0, $02
   4208  1a7a		       09 01		      ORA	#1
   4209  1a7c		       85 df		      STA	_Bit0_New_Room_P1_Flip
   4210  1a7e				   .L0497		;  delay_counter  =  60
   4211  1a7e
   4212  1a7e		       a9 3c		      LDA	#60
   4213  1a80		       85 d4		      STA	delay_counter
   4214  1a82				   .
   4215  1a82							; 
   4216  1a82
   4217  1a82				   ._Common_Reset
   4218  1a82							; _Common_Reset
   4219  1a82
   4220  1a82				   .L0498		;  _Bit5_Request_Pending{5}  =  1
   4221  1a82
   4222  1a82		       a5 ec		      LDA	_Bit5_Request_Pending
   4223  1a84		       09 20		      ORA	#32
   4224  1a86		       85 ec		      STA	_Bit5_Request_Pending
   4225  1a88				   .L0499		;  pfscore2  =  255
   4226  1a88
   4227  1a88		       a9 ff		      LDA	#255
   4228  1a8a		       85 f3		      STA	pfscore2
   4229  1a8c				   .L0500		;  P1y_velocity  =  0.0  :  x	=  0
   4230  1a8c
   4231  1a8c		       a2 00		      LDX	#0
   4232  1a8e		       86 ea		      STX	w
   4233  1a90		       a9 00		      LDA	#0
   4234  1a92		       85 e9		      STA	P1y_velocity
   4235  1a94		       a9 00		      LDA	#0
   4236  1a96		       85 eb		      STA	x
   4237  1a98				   .L0501		;  new_room_player1x  =  Safe_Point_P1_x
   4238  1a98
   4239  1a98		       a5 e0		      LDA	Safe_Point_P1_x
   4240  1a9a		       85 a5		      STA	new_room_player1x
   4241  1a9c				   .L0502		;  new_room_player1y  =  Safe_Point_P1_y
   4242  1a9c
   4243  1a9c		       a5 e1		      LDA	Safe_Point_P1_y
   4244  1a9e		       85 a4		      STA	new_room_player1y
   4245  1aa0				   .L0503		;  goto _skip_game_action
   4246  1aa0
   4247  1aa0		       4c 9c 98 	      jmp	._skip_game_action
   4248  1aa3
   4249  1aa3				   .
   4250  1aa3							; 
   4251  1aa3
   4252  1aa3				   ._Level_Up
   4253  1aa3							; _Level_Up
   4254  1aa3
   4255  1aa3				   .L0504		;  _Bit2_Level_finished{2}  =	0
   4256  1aa3
   4257  1aa3		       a5 ec		      LDA	_Bit2_Level_finished
   4258  1aa5		       29 fb		      AND	#251
   4259  1aa7		       85 ec		      STA	_Bit2_Level_finished
   4260  1aa9				   .L0505		;  _Bit7_FireB_Restrainer{7}  =  1  :	_Bit5_Request_Pending{5}  =  1
   4261  1aa9
   4262  1aa9		       a5 ec		      LDA	_Bit7_FireB_Restrainer
   4263  1aab		       09 80		      ORA	#128
   4264  1aad		       85 ec		      STA	_Bit7_FireB_Restrainer
   4265  1aaf		       a5 ec		      LDA	_Bit5_Request_Pending
   4266  1ab1		       09 20		      ORA	#32
   4267  1ab3		       85 ec		      STA	_Bit5_Request_Pending
   4268  1ab5				   .L0506		;  score  =  0  :  _BitOp_Flip_positions  =  0
   4269  1ab5
   4270  1ab5		       a9 00		      LDA	#$00
   4271  1ab7		       85 95		      STA	score+2
   4272  1ab9		       a9 00		      LDA	#$00
   4273  1abb		       85 94		      STA	score+1
   4274  1abd		       a9 00		      LDA	#$00
   4275  1abf		       85 93		      STA	score
   4276  1ac1		       a9 00		      LDA	#0
   4277  1ac3		       85 df		      STA	_BitOp_Flip_positions
   4278  1ac5				   .L0507		;  Safe_Point_P1_x  =	30
   4279  1ac5
   4280  1ac5		       a9 1e		      LDA	#30
   4281  1ac7		       85 e0		      STA	Safe_Point_P1_x
   4282  1ac9				   .L0508		;  Safe_Point_P1_y  =	player_min_y
   4283  1ac9
   4284  1ac9		       a9 02		      LDA	#player_min_y
   4285  1acb		       85 e1		      STA	Safe_Point_P1_y
   4286  1acd				   .L0509		;  pfscore1  =  %00101010
   4287  1acd
   4288  1acd		       a9 2a		      LDA	#%00101010
   4289  1acf		       85 f2		      STA	pfscore1
   4290  1ad1				   .L0510		;  goto _Common_Reset
   4291  1ad1
   4292  1ad1		       4c 82 9a 	      jmp	._Common_Reset
   4293  1ad4
   4294  1ad4				   .
   4295  1ad4							; 
   4296  1ad4
   4297  1ad4				   ._Level_Completed
   4298  1ad4							; _Level_Completed
   4299  1ad4
   4300  1ad4				   .L0511		;  _Bit2_Level_finished{2}  =	1
   4301  1ad4
   4302  1ad4		       a5 ec		      LDA	_Bit2_Level_finished
   4303  1ad6		       09 04		      ORA	#4
   4304  1ad8		       85 ec		      STA	_Bit2_Level_finished
   4305  1ada				   .L0512		;  temp4  =  frame_counter  /	2
   4306  1ada
   4307  1ada		       a5 d5		      LDA	frame_counter
   4308  1adc		       4a		      lsr
   4309  1add		       85 9f		      STA	temp4
   4310  1adf				   .L0513		;  temp5  =  temp4  &	$0F  :	if temp5  >  9 then temp4  =  temp4  +	6
   4311  1adf
   4312  1adf		       a5 9f		      LDA	temp4
   4313  1ae1		       29 0f		      AND	#$0F
   4314  1ae3		       85 a0		      STA	temp5
   4315  1ae5		       a9 09		      LDA	#9
   4316  1ae7		       c5 a0		      CMP	temp5
   4317  1ae9		       b0 07		      BCS	.skipL0513
   4318  1aeb				   .condpart93
   4319  1aeb		       a5 9f		      LDA	temp4
   4320  1aed		       18		      CLC
   4321  1aee		       69 06		      ADC	#6
   4322  1af0		       85 9f		      STA	temp4
   4323  1af2				   .skipL0513
   4324  1af2				   .L0514		;  temp5  =  temp4  &	$F0  :	if temp5  >  $90 then temp4  =	temp4  +  $60
   4325  1af2
   4326  1af2		       a5 9f		      LDA	temp4
   4327  1af4		       29 f0		      AND	#$F0
   4328  1af6		       85 a0		      STA	temp5
   4329  1af8		       a9 90		      LDA	#$90
   4330  1afa		       c5 a0		      CMP	temp5
   4331  1afc		       b0 07		      BCS	.skipL0514
   4332  1afe				   .condpart94
   4333  1afe		       a5 9f		      LDA	temp4
   4334  1b00		       18		      CLC
   4335  1b01		       69 60		      ADC	#$60
   4336  1b03		       85 9f		      STA	temp4
   4337  1b05				   .skipL0514
   4338  1b05				   .L0515		;  score  =  score  +	temp4
   4339  1b05
   4340  1b05		       f8		      SED
   4341  1b06		       18		      CLC
   4342  1b07		       a5 95		      LDA	score+2
   4343  1b09		       65 9f		      ADC	temp4
   4344  1b0b
   4345  1b0b		       85 95		      STA	score+2
   4346  1b0d		       a5 94		      LDA	score+1
   4347  1b0f		       69 00		      ADC	#$00
   4348  1b11		       85 94		      STA	score+1
   4349  1b13		       a5 93		      LDA	score
   4350  1b15		       69 00		      ADC	#$00
   4351  1b17		       85 93		      STA	score
   4352  1b19		       d8		      CLD
   4353  1b1a				   .L0516		;  asm
   4354  1b1a
   4355  1b1a		       f8		      sed
   4356  1b1b
   4357  1b1b		       18		      clc
   4358  1b1c
   4359  1b1c		       a5 94		      lda	_sc2
   4360  1b1e
   4361  1b1e		       65 b1		      adc	bonus_bcd_counter
   4362  1b20
   4363  1b20		       85 94		      sta	_sc2
   4364  1b22
   4365  1b22		       a5 93		      lda	_sc1
   4366  1b24
   4367  1b24		       69 00		      adc	#0
   4368  1b26
   4369  1b26		       85 93		      sta	_sc1
   4370  1b28
   4371  1b28		       d8		      cld
   4372  1b29
   4373  1b29				   .L0517		;  goto _skip_game_action
   4374  1b29
   4375  1b29		       4c 9c 98 	      jmp	._skip_game_action
   4376  1b2c
   4377  1b2c				   .
   4378  1b2c							; 
   4379  1b2c
   4380  1b2c				   .
   4381  1b2c							; 
   4382  1b2c
   4383  1b2c				   .
   4384  1b2c							; 
   4385  1b2c
   4386  1b2c				   ._Add_Room_State
   4387  1b2c							; _Add_Room_State
   4388  1b2c
   4389  1b2c				   .L0518		;  _Bit5_Request_Pending{5}  =  1
   4390  1b2c
   4391  1b2c		       a5 ec		      LDA	_Bit5_Request_Pending
   4392  1b2e		       09 20		      ORA	#32
   4393  1b30		       85 ec		      STA	_Bit5_Request_Pending
   4394  1b32				   .L0519		;  WriteToBuffer  =  r104
   4395  1b32
   4396  1b32		       ad e8 f0 	      LDA	r104
   4397  1b35		       8d f0 1f 	      STA	WriteToBuffer
   4398  1b38				   .L0520		;  WriteToBuffer  =  r105
   4399  1b38
   4400  1b38		       ad e9 f0 	      LDA	r105
   4401  1b3b		       8d f0 1f 	      STA	WriteToBuffer
   4402  1b3e				   .L0521		;  WriteToBuffer  =  r106
   4403  1b3e
   4404  1b3e		       ad ea f0 	      LDA	r106
   4405  1b41		       8d f0 1f 	      STA	WriteToBuffer
   4406  1b44				   .L0522		;  WriteToBuffer  =  r107
   4407  1b44
   4408  1b44		       ad eb f0 	      LDA	r107
   4409  1b47		       8d f0 1f 	      STA	WriteToBuffer
   4410  1b4a				   .L0523		;  WriteToBuffer  =  r108
   4411  1b4a
   4412  1b4a		       ad ec f0 	      LDA	r108
   4413  1b4d		       8d f0 1f 	      STA	WriteToBuffer
   4414  1b50				   .L0524		;  WriteToBuffer  =  r109
   4415  1b50
   4416  1b50		       ad ed f0 	      LDA	r109
   4417  1b53		       8d f0 1f 	      STA	WriteToBuffer
   4418  1b56				   .L0525		;  WriteToBuffer  =  r110
   4419  1b56
   4420  1b56		       ad ee f0 	      LDA	r110
   4421  1b59		       8d f0 1f 	      STA	WriteToBuffer
   4422  1b5c				   .L0526		;  WriteToBuffer  =  r111
   4423  1b5c
   4424  1b5c		       ad ef f0 	      LDA	r111
   4425  1b5f		       8d f0 1f 	      STA	WriteToBuffer
   4426  1b62				   .L0527		;  return
   4427  1b62
   4428  1b62		       ba		      tsx
   4429  1b63		       b5 02		      lda	2,x	; check return address
   4430  1b65		       49 9b		      eor	#(>*)	; vs. current PCH
   4431  1b67		       29 e0		      and	#$E0	;  mask off all but top 3 bits
   4432  1b69		       f0 03		      beq	*+5	; if equal, do normal return
   4433  1b6b		       4c da ff 	      JMP	BS_return
   4434  1b6e		       60		      RTS
   4435  1b6f				   .
   4436  1b6f							; 
   4437  1b6f
   4438  1b6f				   .
   4439  1b6f							; 
   4440  1b6f
   4441  1b6f				   .
   4442  1b6f							; 
   4443  1b6f
   4444  1b6f				   .
   4445  1b6f							; 
   4446  1b6f
   4447  1b6f				   ._Change_Room
   4448  1b6f							; _Change_Room
   4449  1b6f
   4450  1b6f				   .L0528		;  delay_counter  =  2
   4451  1b6f
   4452  1b6f		       a9 02		      LDA	#2
   4453  1b71		       85 d4		      STA	delay_counter
   4454  1b73				   .L0529		;  player0y  =  200  :  ball_shoot_x  =  200  :  ball_shoot_y	=  200	:  missile0x  =  200  :  missile0y  =  200
   4455  1b73
   4456  1b73		       a9 c8		      LDA	#200
   4457  1b75		       85 85		      STA	player0y
   4458  1b77		       85 ae		      STA	ball_shoot_x
   4459  1b79		       85 af		      STA	ball_shoot_y
   4460  1b7b		       85 82		      STA	missile0x
   4461  1b7d		       85 91		      STA	missile0y
   4462  1b7f				   .
   4463  1b7f							; 
   4464  1b7f
   4465  1b7f				   .
   4466  1b7f							; 
   4467  1b7f
   4468  1b7f				   .L0530		;  _Bit_Game_State  =	_Bit_Game_State  &  %11010100
   4469  1b7f
   4470  1b7f		       a5 ec		      LDA	_Bit_Game_State
   4471  1b81		       29 d4		      AND	#%11010100
   4472  1b83		       85 ec		      STA	_Bit_Game_State
   4473  1b85				   .L0531		;  player1y  =  new_room_player1y  :  player1x  =  new_room_player1x  :  _Bit6_Flip_P1{6}  =  _Bit0_New_Room_P1_Flip{0}
   4474  1b85
   4475  1b85		       a5 a4		      LDA	new_room_player1y
   4476  1b87		       85 86		      STA	player1y
   4477  1b89		       a5 a5		      LDA	new_room_player1x
   4478  1b8b		       85 81		      STA	player1x
   4479  1b8d		       a5 df		      LDA	_Bit0_New_Room_P1_Flip
   4480  1b8f		       29 01		      AND	#1
   4481  1b91		       08		      PHP
   4482  1b92		       a5 ec		      LDA	_Bit6_Flip_P1
   4483  1b94		       29 bf		      AND	#191
   4484  1b96		       28		      PLP
   4485  1b97		       f0 02		      .byte.b	$F0, $02
   4486  1b99		       09 40		      ORA	#64
   4487  1b9b		       85 ec		      STA	_Bit6_Flip_P1
   4488  1b9d				   .L0532		;  asm
   4489  1b9d
   4490  1b9d		       a9 00		      LDA	#0
   4491  1b9f
   4492  1b9f		       85 89		      STA	bally
   4493  1ba1
   4494  1ba1		       85 d7		      STA	_BitOp_M0_Dir	; delete enemy and player shot
   4495  1ba3
   4496  1ba3		       85 d6		      STA	_BitOp_Ball_Shot_Dir
   4497  1ba5
   4498  1ba5		       85 dc		      STA	extra_wall_move_x
   4499  1ba7
   4500  1ba7		       85 dd		      STA	roommate_move_x
   4501  1ba9
   4502  1ba9		       aa		      TAX
   4503  1baa
   4504  1baa				   .copy_loop
   4505  1baa
   4506  1baa		       ad f2 1f 	      LDA	ReceiveBuffer	; 4
   4507  1bad
   4508  1bad		       9d 5f f0 	      STA	w_room_definition_start,x	; 5   @9
   4509  1bb0
   4510  1bb0		       e8		      INX		; 2   @11
   4511  1bb1
   4512  1bb1		       ad f3 1f 	      LDA	ReceiveBufferSize	; 4   @15
   4513  1bb4
   4514  1bb4		       d0 f4		      BNE	.copy_loop	; 2/3 @18
   4515  1bb6
   4516  1bb6				   .L0533		;  roommate_type  =  r_roommate_type_and_range  &  3
   4517  1bb6
   4518  1bb6		       ad e8 f0 	      LDA	r_roommate_type_and_range
   4519  1bb9		       29 03		      AND	#3
   4520  1bbb		       85 de		      STA	roommate_type
   4521  1bbd				   .L0534		;  if !men_to_rescue then men_to_rescue  =  r_men_to_rescue_in_this_level  :  bonus_bcd_counter  =  r_level_bonus_bcd_points
   4522  1bbd
   4523  1bbd		       a5 b0		      LDA	men_to_rescue
   4524  1bbf		       d0 0a		      BNE	.skipL0534
   4525  1bc1				   .condpart95
   4526  1bc1		       ad e0 f0 	      LDA	r_men_to_rescue_in_this_level
   4527  1bc4		       85 b0		      STA	men_to_rescue
   4528  1bc6		       ad df f0 	      LDA	r_level_bonus_bcd_points
   4529  1bc9		       85 b1		      STA	bonus_bcd_counter
   4530  1bcb				   .skipL0534
   4531  1bcb				   .L0535		;  goto _skip_game_action
   4532  1bcb
   4533  1bcb		       4c 9c 98 	      jmp	._skip_game_action
   4534  1bce
   4535  1bce				   .
   4536  1bce							; 
   4537  1bce
   4538  1bce				   .
   4539  1bce							; 
   4540  1bce
   4541  1bce				   ._Reset_To_Start
   4542  1bce							; _Reset_To_Start
   4543  1bce
   4544  1bce				   .
   4545  1bce							; 
   4546  1bce
   4547  1bce				   .L0536		;  if ReceiveBufferSize  =  0 then goto _Start
   4548  1bce
   4549  1bce		       ad f3 1f 	      LDA	ReceiveBufferSize
   4550  1bd1		       c9 00		      CMP	#0
   4551  1bd3		       d0 03		      BNE	.skipL0536
   4552  1bd5				   .condpart96
   4553  1bd5		       4c 00 91 	      jmp	._Start
   4554  1bd8
   4555  1bd8				   .skipL0536
   4556  1bd8				   .L0537		;  asm
   4557  1bd8
   4558  1bd8		       ad f2 1f 	      LDA	ReceiveBuffer	; 4
   4559  1bdb
   4560  1bdb				   .L0538		;  goto _Reset_To_Start
   4561  1bdb
   4562  1bdb		       4c ce 9b 	      jmp	._Reset_To_Start
   4563  1bde
   4564  1bde				   .
   4565  1bde							; 
   4566  1bde
   4567  1bde				   .
   4568  1bde							; 
   4569  1bde
   4570  1bde				   .
   4571  1bde							; 
   4572  1bde
   4573  1bde				   .
   4574  1bde							; 
   4575  1bde
   4576  1bde				   .
   4577  1bde							; 
   4578  1bde
   4579  1bde				   .
   4580  1bde							; 
   4581  1bde
   4582  1bde				   .L0539		;  data _SD_Shot_Wall
   4583  1bde
   4584  1bde		       4c 16 9c 	      JMP	.skipL0539
   4585  1be1				   _SD_Shot_Wall
   4586  1be1		       08 08 00 	      .byte.b	8,8,0
   4587  1be4
   4588  1be4		       01		      .byte.b	1
   4589  1be5
   4590  1be5		       08 08 01 	      .byte.b	8,8,1
   4591  1be8
   4592  1be8		       01		      .byte.b	1
   4593  1be9
   4594  1be9		       08 0e 01 	      .byte.b	8,14,1
   4595  1bec
   4596  1bec		       01		      .byte.b	1
   4597  1bed
   4598  1bed		       08 08 00 	      .byte.b	8,8,0
   4599  1bf0
   4600  1bf0		       01		      .byte.b	1
   4601  1bf1
   4602  1bf1		       08 08 02 	      .byte.b	8,8,2
   4603  1bf4
   4604  1bf4		       01		      .byte.b	1
   4605  1bf5
   4606  1bf5		       08 0e 02 	      .byte.b	8,14,2
   4607  1bf8
   4608  1bf8		       01		      .byte.b	1
   4609  1bf9
   4610  1bf9		       08 08 01 	      .byte.b	8,8,1
   4611  1bfc
   4612  1bfc		       01		      .byte.b	1
   4613  1bfd
   4614  1bfd		       07 08 03 	      .byte.b	7,8,3
   4615  1c00
   4616  1c00		       01		      .byte.b	1
   4617  1c01
   4618  1c01		       06 08 02 	      .byte.b	6,8,2
   4619  1c04
   4620  1c04		       01		      .byte.b	1
   4621  1c05
   4622  1c05		       05 08 04 	      .byte.b	5,8,4
   4623  1c08
   4624  1c08		       01		      .byte.b	1
   4625  1c09
   4626  1c09		       04 08 03 	      .byte.b	4,8,3
   4627  1c0c
   4628  1c0c		       01		      .byte.b	1
   4629  1c0d
   4630  1c0d		       03 08 05 	      .byte.b	3,8,5
   4631  1c10
   4632  1c10		       01		      .byte.b	1
   4633  1c11
   4634  1c11		       02 0e 04 	      .byte.b	2,14,4
   4635  1c14
   4636  1c14		       04		      .byte.b	4
   4637  1c15
   4638  1c15		       ff		      .byte.b	255
   4639  1c16
   4640  1c16				   .skipL0539
   4641  1c16				   .
   4642  1c16							; 
   4643  1c16
   4644  1c16				   .
   4645  1c16							; 
   4646  1c16
   4647  1c16				   .L0540		;  data _SD_Shoot_Miss
   4648  1c16
   4649  1c16		       4c 5e 9c 	      JMP	.skipL0540
   4650  1c19				   _SD_Shoot_Miss
   4651  1c19		       08 0f 00 	      .byte.b	8,15,0
   4652  1c1c
   4653  1c1c		       01		      .byte.b	1
   4654  1c1d
   4655  1c1d		       0c 0f 01 	      .byte.b	12,15,1
   4656  1c20
   4657  1c20		       01		      .byte.b	1
   4658  1c21
   4659  1c21		       08 07 14 	      .byte.b	8,7,20
   4660  1c24
   4661  1c24		       01		      .byte.b	1
   4662  1c25
   4663  1c25		       0a 0f 03 	      .byte.b	10,15,3
   4664  1c28
   4665  1c28		       01		      .byte.b	1
   4666  1c29
   4667  1c29		       08 07 16 	      .byte.b	8,7,22
   4668  1c2c
   4669  1c2c		       01		      .byte.b	1
   4670  1c2d
   4671  1c2d		       0a 0f 05 	      .byte.b	10,15,5
   4672  1c30
   4673  1c30		       01		      .byte.b	1
   4674  1c31
   4675  1c31		       08 0f 06 	      .byte.b	8,15,6
   4676  1c34
   4677  1c34		       01		      .byte.b	1
   4678  1c35
   4679  1c35		       0a 07 18 	      .byte.b	10,7,24
   4680  1c38
   4681  1c38		       01		      .byte.b	1
   4682  1c39
   4683  1c39		       08 0f 08 	      .byte.b	8,15,8
   4684  1c3c
   4685  1c3c		       01		      .byte.b	1
   4686  1c3d
   4687  1c3d		       09 07 1b 	      .byte.b	9,7,27
   4688  1c40
   4689  1c40		       01		      .byte.b	1
   4690  1c41
   4691  1c41		       08 0f 0a 	      .byte.b	8,15,10
   4692  1c44
   4693  1c44		       01		      .byte.b	1
   4694  1c45
   4695  1c45		       07 0e 0b 	      .byte.b	7,14,11
   4696  1c48
   4697  1c48		       01		      .byte.b	1
   4698  1c49
   4699  1c49		       06 0f 0c 	      .byte.b	6,15,12
   4700  1c4c
   4701  1c4c		       01		      .byte.b	1
   4702  1c4d
   4703  1c4d		       05 06 0d 	      .byte.b	5,6,13
   4704  1c50
   4705  1c50		       01		      .byte.b	1
   4706  1c51
   4707  1c51		       04 0f 0e 	      .byte.b	4,15,14
   4708  1c54
   4709  1c54		       01		      .byte.b	1
   4710  1c55
   4711  1c55		       03 06 1b 	      .byte.b	3,6,27
   4712  1c58
   4713  1c58		       01		      .byte.b	1
   4714  1c59
   4715  1c59		       02 06 1e 	      .byte.b	2,6,30
   4716  1c5c
   4717  1c5c		       08		      .byte.b	8
   4718  1c5d
   4719  1c5d		       ff		      .byte.b	255
   4720  1c5e
   4721  1c5e				   .skipL0540
   4722  1c5e				   .
   4723  1c5e							; 
   4724  1c5e
   4725  1c5e				   .
   4726  1c5e							; 
   4727  1c5e
   4728  1c5e				   .L0541		;  data _SD_Shoot_Enemy
   4729  1c5e
   4730  1c5e		       4c 82 9c 	      JMP	.skipL0541
   4731  1c61				   _SD_Shoot_Enemy
   4732  1c61		       0c 04 17 	      .byte.b	12,4,23
   4733  1c64
   4734  1c64		       04		      .byte.b	4
   4735  1c65
   4736  1c65		       0a 04 1d 	      .byte.b	10,4,29
   4737  1c68
   4738  1c68		       04		      .byte.b	4
   4739  1c69
   4740  1c69		       08 04 17 	      .byte.b	8,4,23
   4741  1c6c
   4742  1c6c		       04		      .byte.b	4
   4743  1c6d
   4744  1c6d		       06 04 1d 	      .byte.b	6,4,29
   4745  1c70
   4746  1c70		       04		      .byte.b	4
   4747  1c71
   4748  1c71		       04 04 17 	      .byte.b	4,4,23
   4749  1c74
   4750  1c74		       04		      .byte.b	4
   4751  1c75
   4752  1c75		       03 04 1d 	      .byte.b	3,4,29
   4753  1c78
   4754  1c78		       04		      .byte.b	4
   4755  1c79
   4756  1c79		       02 04 17 	      .byte.b	2,4,23
   4757  1c7c
   4758  1c7c		       01		      .byte.b	1
   4759  1c7d
   4760  1c7d		       01 04 1d 	      .byte.b	1,4,29
   4761  1c80
   4762  1c80		       01		      .byte.b	1
   4763  1c81
   4764  1c81		       ff		      .byte.b	255
   4765  1c82
   4766  1c82				   .skipL0541
   4767  1c82				   .
   4768  1c82							; 
   4769  1c82
   4770  1c82				   .
   4771  1c82							; 
   4772  1c82
   4773  1c82				   .L0542		;  data _SD_Touch_Enemy
   4774  1c82
   4775  1c82		       4c a2 9c 	      JMP	.skipL0542
   4776  1c85				   _SD_Touch_Enemy
   4777  1c85		       02 07 0b 	      .byte.b	2,7,11
   4778  1c88
   4779  1c88		       02		      .byte.b	2
   4780  1c89
   4781  1c89		       0a 07 0c 	      .byte.b	10,7,12
   4782  1c8c
   4783  1c8c		       02		      .byte.b	2
   4784  1c8d
   4785  1c8d		       08 07 0d 	      .byte.b	8,7,13
   4786  1c90
   4787  1c90		       02		      .byte.b	2
   4788  1c91
   4789  1c91		       08 07 0e 	      .byte.b	8,7,14
   4790  1c94
   4791  1c94		       02		      .byte.b	2
   4792  1c95
   4793  1c95		       08 07 15 	      .byte.b	8,7,21
   4794  1c98
   4795  1c98		       08		      .byte.b	8
   4796  1c99
   4797  1c99		       04 07 16 	      .byte.b	4,7,22
   4798  1c9c
   4799  1c9c		       02		      .byte.b	2
   4800  1c9d
   4801  1c9d		       02 07 17 	      .byte.b	2,7,23
   4802  1ca0
   4803  1ca0		       01		      .byte.b	1
   4804  1ca1
   4805  1ca1		       ff		      .byte.b	255
   4806  1ca2
   4807  1ca2				   .skipL0542
   4808  1ca2				   .
   4809  1ca2							; 
   4810  1ca2
   4811  1ca2				   .
   4812  1ca2							; 
   4813  1ca2
   4814  1ca2				   .__BG_Music_Setup_01
   4815  1ca2							; __BG_Music_Setup_01
   4816  1ca2
   4817  1ca2				   .
   4818  1ca2							; 
   4819  1ca2
   4820  1ca2				   .L0543		;  sdata _SD_Music01  =  var14
   4821  1ca2
   4822  1ca2		       a9 ad		      lda	#<_SD_Music01_begin
   4823  1ca4		       85 b2		      sta	var14
   4824  1ca6		       a9 9c		      lda	#>_SD_Music01_begin
   4825  1ca8		       85 b3		      sta	var14+1
   4826  1caa		       4c b6 9c 	      JMP	.skipL0543
   4827  1cad				   _SD_Music01_begin
   4828  1cad		       08 0f 1e 04	      .byte.b	8, 15, 30, 4
   4829  1cb1
   4830  1cb1		       00 00 00 10	      .byte.b	0, 0, 0, 16
   4831  1cb5
   4832  1cb5		       ff		      .byte.b	255
   4833  1cb6
   4834  1cb6				   .skipL0543
   4835  1cb6				   .
   4836  1cb6							; 
   4837  1cb6
   4838  1cb6				   .L0544		;  _Ch1_Duration  =  1
   4839  1cb6
   4840  1cb6		       a9 01		      LDA	#1
   4841  1cb8		       85 e2		      STA	_Ch1_Duration
   4842  1cba				   .
   4843  1cba							; 
   4844  1cba
   4845  1cba				   .L0545		;  goto __Skip_Ch_1
   4846  1cba
   4847  1cba		       4c 1d 9a 	      jmp	.__Skip_Ch_1
   4848  1cbd
   4849  1cbd				   .
   4850  1cbd							; 
   4851  1cbd
   4852  1cbd				   .
   4853  1cbd							; 
   4854  1cbd
   4855  1cbd				   .
   4856  1cbd							; 
   4857  1cbd
   4858  1cbd				   .
   4859  1cbd							; 
   4860  1cbd
   4861  1cbd				   .
   4862  1cbd							; 
   4863  1cbd
   4864  1cbd				   .
   4865  1cbd							; 
   4866  1cbd
   4867  1cbd				   .
   4868  1cbd							; 
   4869  1cbd
   4870  1cbd				   .
   4871  1cbd							; 
   4872  1cbd
   4873  1cbd				   .
   4874  1cbd							; 
   4875  1cbd
   4876  1cbd				   .
   4877  1cbd							; 
   4878  1cbd
   4879  1cbd				   .
   4880  1cbd							; 
   4881  1cbd
   4882  1cbd				   .
   4883  1cbd							; 
   4884  1cbd
   4885  1cbd				   .
   4886  1cbd							; 
   4887  1cbd
   4888  1cbd				   .
   4889  1cbd							; 
   4890  1cbd
   4891  1cbd				   .
   4892  1cbd							; 
   4893  1cbd
   4894  1cbd				   .
   4895  1cbd							; 
   4896  1cbd
   4897  1cbd				   .
   4898  1cbd							; 
   4899  1cbd
   4900  1cbd				   .
   4901  1cbd							; 
   4902  1cbd
   4903  1cbd				   .
   4904  1cbd							; 
   4905  1cbd
   4906  1cbd				   .L0546		;  bank 2
   4907  1cbd
   4908  1cbd					      if	ECHO1
      788 bytes of ROM space left in bank 1
   4909  1cbd					      echo	"    ",[(start_bank1 - *)]d , "bytes of ROM space left in bank 1")
   4910  1cbd					      endif
   4911  1cbd		       00 01	   ECHO1      =	1
   4912  1fd1					      ORG	$1FF4-bscode_length
   4913  1fd1					      RORG	$9FF4-bscode_length
   4914  1fd1		       a2 ff	   start_bank1 ldx	#$ff
   4915  1fd3				  -	      ifconst	FASTFETCH	; using DPC+
   4916  1fd3				  -	      stx	FASTFETCH
   4917  1fd3					      endif
   4918  1fd3		       9a		      txs
   4919  1fd4				  -	      if	bankswitch == 64
   4920  1fd4				  -	      lda	#(((>(start-1)) & $0F) | $F0)
   4921  1fd4					      else
   4922  1fd4		       a9 f2		      lda	#>(start-1)
   4923  1fd6					      endif
   4924  1fd6		       48		      pha
   4925  1fd7		       a9 b0		      lda	#<(start-1)
   4926  1fd9		       48		      pha
   4927  1fda		       48		      pha
   4928  1fdb		       8a		      txa
   4929  1fdc		       48		      pha
   4930  1fdd		       ba		      tsx
   4931  1fde					      if	bankswitch != 64
   4932  1fde		       b5 04		      lda	4,x	; get high byte of return address
   4933  1fe0		       2a		      rol
   4934  1fe1		       2a		      rol
   4935  1fe2		       2a		      rol
   4936  1fe3		       2a		      rol
   4937  1fe4		       29 03		      and	#bs_mask	;1 3 or 7 for F8/F6/F4
   4938  1fe6		       aa		      tax
   4939  1fe7		       e8		      inx
   4940  1fe8				  -	      else
   4941  1fe8				  -	      lda	4,x	; get high byte of return address
   4942  1fe8				  -	      tay
   4943  1fe8				  -	      ora	#$10	; change our bank nibble into a valid rom mirror
   4944  1fe8				  -	      sta	4,x
   4945  1fe8				  -	      tya
   4946  1fe8				  -	      lsr
   4947  1fe8				  -	      lsr
   4948  1fe8				  -	      lsr
   4949  1fe8				  -	      lsr
   4950  1fe8				  -	      tax
   4951  1fe8				  -	      inx
   4952  1fe8					      endif
   4953  1fe8		       bd f5 1f 	      lda	bankswitch_hotspot-1,x
   4954  1feb		       68		      pla
   4955  1fec		       aa		      tax
   4956  1fed		       68		      pla
   4957  1fee		       60		      rts
   4958  1fef				  -	      if	((* & $1FFF) > ((bankswitch_hotspot & $1FFF) - 1))
   4959  1fef				  -	      echo	"WARNING: size parameter in banksw.asm too small - the program probably will not work."
   4960  1fef				  -	      echo	"Change to",[(*-begin_bscode+1)&$FF]d,"and try again."
   4961  1fef					      endif
   4962  1ffc					      ORG	$1FFC
   4963  1ffc					      RORG	$9FFC
   4964  1ffc		       d1 9f		      .word.w	(start_bank1 & $ffff)
   4965  1ffe		       d1 9f		      .word.w	(start_bank1 & $ffff)
   4966  2000					      ORG	$2000
   4967  2000					      RORG	$B000
   4968  2000					      repeat	256
   4969  2000		       ff		      .byte.b	$ff
   4968  2000					      repend
   4969  2001		       ff		      .byte.b	$ff
   4968  2001					      repend
   4969  2002		       ff		      .byte.b	$ff
   4968  2002					      repend
   4969  2003		       ff		      .byte.b	$ff
   4968  2003					      repend
   4969  2004		       ff		      .byte.b	$ff
   4968  2004					      repend
   4969  2005		       ff		      .byte.b	$ff
   4968  2005					      repend
   4969  2006		       ff		      .byte.b	$ff
   4968  2006					      repend
   4969  2007		       ff		      .byte.b	$ff
   4968  2007					      repend
   4969  2008		       ff		      .byte.b	$ff
   4968  2008					      repend
   4969  2009		       ff		      .byte.b	$ff
   4968  2009					      repend
   4969  200a		       ff		      .byte.b	$ff
   4968  200a					      repend
   4969  200b		       ff		      .byte.b	$ff
   4968  200b					      repend
   4969  200c		       ff		      .byte.b	$ff
   4968  200c					      repend
   4969  200d		       ff		      .byte.b	$ff
   4968  200d					      repend
   4969  200e		       ff		      .byte.b	$ff
   4968  200e					      repend
   4969  200f		       ff		      .byte.b	$ff
   4968  200f					      repend
   4969  2010		       ff		      .byte.b	$ff
   4968  2010					      repend
   4969  2011		       ff		      .byte.b	$ff
   4968  2011					      repend
   4969  2012		       ff		      .byte.b	$ff
   4968  2012					      repend
   4969  2013		       ff		      .byte.b	$ff
   4968  2013					      repend
   4969  2014		       ff		      .byte.b	$ff
   4968  2014					      repend
   4969  2015		       ff		      .byte.b	$ff
   4968  2015					      repend
   4969  2016		       ff		      .byte.b	$ff
   4968  2016					      repend
   4969  2017		       ff		      .byte.b	$ff
   4968  2017					      repend
   4969  2018		       ff		      .byte.b	$ff
   4968  2018					      repend
   4969  2019		       ff		      .byte.b	$ff
   4968  2019					      repend
   4969  201a		       ff		      .byte.b	$ff
   4968  201a					      repend
   4969  201b		       ff		      .byte.b	$ff
   4968  201b					      repend
   4969  201c		       ff		      .byte.b	$ff
   4968  201c					      repend
   4969  201d		       ff		      .byte.b	$ff
   4968  201d					      repend
   4969  201e		       ff		      .byte.b	$ff
   4968  201e					      repend
   4969  201f		       ff		      .byte.b	$ff
   4968  201f					      repend
   4969  2020		       ff		      .byte.b	$ff
   4968  2020					      repend
   4969  2021		       ff		      .byte.b	$ff
   4968  2021					      repend
   4969  2022		       ff		      .byte.b	$ff
   4968  2022					      repend
   4969  2023		       ff		      .byte.b	$ff
   4968  2023					      repend
   4969  2024		       ff		      .byte.b	$ff
   4968  2024					      repend
   4969  2025		       ff		      .byte.b	$ff
   4968  2025					      repend
   4969  2026		       ff		      .byte.b	$ff
   4968  2026					      repend
   4969  2027		       ff		      .byte.b	$ff
   4968  2027					      repend
   4969  2028		       ff		      .byte.b	$ff
   4968  2028					      repend
   4969  2029		       ff		      .byte.b	$ff
   4968  2029					      repend
   4969  202a		       ff		      .byte.b	$ff
   4968  202a					      repend
   4969  202b		       ff		      .byte.b	$ff
   4968  202b					      repend
   4969  202c		       ff		      .byte.b	$ff
   4968  202c					      repend
   4969  202d		       ff		      .byte.b	$ff
   4968  202d					      repend
   4969  202e		       ff		      .byte.b	$ff
   4968  202e					      repend
   4969  202f		       ff		      .byte.b	$ff
   4968  202f					      repend
   4969  2030		       ff		      .byte.b	$ff
   4968  2030					      repend
   4969  2031		       ff		      .byte.b	$ff
   4968  2031					      repend
   4969  2032		       ff		      .byte.b	$ff
   4968  2032					      repend
   4969  2033		       ff		      .byte.b	$ff
   4968  2033					      repend
   4969  2034		       ff		      .byte.b	$ff
   4968  2034					      repend
   4969  2035		       ff		      .byte.b	$ff
   4968  2035					      repend
   4969  2036		       ff		      .byte.b	$ff
   4968  2036					      repend
   4969  2037		       ff		      .byte.b	$ff
   4968  2037					      repend
   4969  2038		       ff		      .byte.b	$ff
   4968  2038					      repend
   4969  2039		       ff		      .byte.b	$ff
   4968  2039					      repend
   4969  203a		       ff		      .byte.b	$ff
   4968  203a					      repend
   4969  203b		       ff		      .byte.b	$ff
   4968  203b					      repend
   4969  203c		       ff		      .byte.b	$ff
   4968  203c					      repend
   4969  203d		       ff		      .byte.b	$ff
   4968  203d					      repend
   4969  203e		       ff		      .byte.b	$ff
   4968  203e					      repend
   4969  203f		       ff		      .byte.b	$ff
   4968  203f					      repend
   4969  2040		       ff		      .byte.b	$ff
   4968  2040					      repend
   4969  2041		       ff		      .byte.b	$ff
   4968  2041					      repend
   4969  2042		       ff		      .byte.b	$ff
   4968  2042					      repend
   4969  2043		       ff		      .byte.b	$ff
   4968  2043					      repend
   4969  2044		       ff		      .byte.b	$ff
   4968  2044					      repend
   4969  2045		       ff		      .byte.b	$ff
   4968  2045					      repend
   4969  2046		       ff		      .byte.b	$ff
   4968  2046					      repend
   4969  2047		       ff		      .byte.b	$ff
   4968  2047					      repend
   4969  2048		       ff		      .byte.b	$ff
   4968  2048					      repend
   4969  2049		       ff		      .byte.b	$ff
   4968  2049					      repend
   4969  204a		       ff		      .byte.b	$ff
   4968  204a					      repend
   4969  204b		       ff		      .byte.b	$ff
   4968  204b					      repend
   4969  204c		       ff		      .byte.b	$ff
   4968  204c					      repend
   4969  204d		       ff		      .byte.b	$ff
   4968  204d					      repend
   4969  204e		       ff		      .byte.b	$ff
   4968  204e					      repend
   4969  204f		       ff		      .byte.b	$ff
   4968  204f					      repend
   4969  2050		       ff		      .byte.b	$ff
   4968  2050					      repend
   4969  2051		       ff		      .byte.b	$ff
   4968  2051					      repend
   4969  2052		       ff		      .byte.b	$ff
   4968  2052					      repend
   4969  2053		       ff		      .byte.b	$ff
   4968  2053					      repend
   4969  2054		       ff		      .byte.b	$ff
   4968  2054					      repend
   4969  2055		       ff		      .byte.b	$ff
   4968  2055					      repend
   4969  2056		       ff		      .byte.b	$ff
   4968  2056					      repend
   4969  2057		       ff		      .byte.b	$ff
   4968  2057					      repend
   4969  2058		       ff		      .byte.b	$ff
   4968  2058					      repend
   4969  2059		       ff		      .byte.b	$ff
   4968  2059					      repend
   4969  205a		       ff		      .byte.b	$ff
   4968  205a					      repend
   4969  205b		       ff		      .byte.b	$ff
   4968  205b					      repend
   4969  205c		       ff		      .byte.b	$ff
   4968  205c					      repend
   4969  205d		       ff		      .byte.b	$ff
   4968  205d					      repend
   4969  205e		       ff		      .byte.b	$ff
   4968  205e					      repend
   4969  205f		       ff		      .byte.b	$ff
   4968  205f					      repend
   4969  2060		       ff		      .byte.b	$ff
   4968  2060					      repend
   4969  2061		       ff		      .byte.b	$ff
   4968  2061					      repend
   4969  2062		       ff		      .byte.b	$ff
   4968  2062					      repend
   4969  2063		       ff		      .byte.b	$ff
   4968  2063					      repend
   4969  2064		       ff		      .byte.b	$ff
   4968  2064					      repend
   4969  2065		       ff		      .byte.b	$ff
   4968  2065					      repend
   4969  2066		       ff		      .byte.b	$ff
   4968  2066					      repend
   4969  2067		       ff		      .byte.b	$ff
   4968  2067					      repend
   4969  2068		       ff		      .byte.b	$ff
   4968  2068					      repend
   4969  2069		       ff		      .byte.b	$ff
   4968  2069					      repend
   4969  206a		       ff		      .byte.b	$ff
   4968  206a					      repend
   4969  206b		       ff		      .byte.b	$ff
   4968  206b					      repend
   4969  206c		       ff		      .byte.b	$ff
   4968  206c					      repend
   4969  206d		       ff		      .byte.b	$ff
   4968  206d					      repend
   4969  206e		       ff		      .byte.b	$ff
   4968  206e					      repend
   4969  206f		       ff		      .byte.b	$ff
   4968  206f					      repend
   4969  2070		       ff		      .byte.b	$ff
   4968  2070					      repend
   4969  2071		       ff		      .byte.b	$ff
   4968  2071					      repend
   4969  2072		       ff		      .byte.b	$ff
   4968  2072					      repend
   4969  2073		       ff		      .byte.b	$ff
   4968  2073					      repend
   4969  2074		       ff		      .byte.b	$ff
   4968  2074					      repend
   4969  2075		       ff		      .byte.b	$ff
   4968  2075					      repend
   4969  2076		       ff		      .byte.b	$ff
   4968  2076					      repend
   4969  2077		       ff		      .byte.b	$ff
   4968  2077					      repend
   4969  2078		       ff		      .byte.b	$ff
   4968  2078					      repend
   4969  2079		       ff		      .byte.b	$ff
   4968  2079					      repend
   4969  207a		       ff		      .byte.b	$ff
   4968  207a					      repend
   4969  207b		       ff		      .byte.b	$ff
   4968  207b					      repend
   4969  207c		       ff		      .byte.b	$ff
   4968  207c					      repend
   4969  207d		       ff		      .byte.b	$ff
   4968  207d					      repend
   4969  207e		       ff		      .byte.b	$ff
   4968  207e					      repend
   4969  207f		       ff		      .byte.b	$ff
   4968  207f					      repend
   4969  2080		       ff		      .byte.b	$ff
   4968  2080					      repend
   4969  2081		       ff		      .byte.b	$ff
   4968  2081					      repend
   4969  2082		       ff		      .byte.b	$ff
   4968  2082					      repend
   4969  2083		       ff		      .byte.b	$ff
   4968  2083					      repend
   4969  2084		       ff		      .byte.b	$ff
   4968  2084					      repend
   4969  2085		       ff		      .byte.b	$ff
   4968  2085					      repend
   4969  2086		       ff		      .byte.b	$ff
   4968  2086					      repend
   4969  2087		       ff		      .byte.b	$ff
   4968  2087					      repend
   4969  2088		       ff		      .byte.b	$ff
   4968  2088					      repend
   4969  2089		       ff		      .byte.b	$ff
   4968  2089					      repend
   4969  208a		       ff		      .byte.b	$ff
   4968  208a					      repend
   4969  208b		       ff		      .byte.b	$ff
   4968  208b					      repend
   4969  208c		       ff		      .byte.b	$ff
   4968  208c					      repend
   4969  208d		       ff		      .byte.b	$ff
   4968  208d					      repend
   4969  208e		       ff		      .byte.b	$ff
   4968  208e					      repend
   4969  208f		       ff		      .byte.b	$ff
   4968  208f					      repend
   4969  2090		       ff		      .byte.b	$ff
   4968  2090					      repend
   4969  2091		       ff		      .byte.b	$ff
   4968  2091					      repend
   4969  2092		       ff		      .byte.b	$ff
   4968  2092					      repend
   4969  2093		       ff		      .byte.b	$ff
   4968  2093					      repend
   4969  2094		       ff		      .byte.b	$ff
   4968  2094					      repend
   4969  2095		       ff		      .byte.b	$ff
   4968  2095					      repend
   4969  2096		       ff		      .byte.b	$ff
   4968  2096					      repend
   4969  2097		       ff		      .byte.b	$ff
   4968  2097					      repend
   4969  2098		       ff		      .byte.b	$ff
   4968  2098					      repend
   4969  2099		       ff		      .byte.b	$ff
   4968  2099					      repend
   4969  209a		       ff		      .byte.b	$ff
   4968  209a					      repend
   4969  209b		       ff		      .byte.b	$ff
   4968  209b					      repend
   4969  209c		       ff		      .byte.b	$ff
   4968  209c					      repend
   4969  209d		       ff		      .byte.b	$ff
   4968  209d					      repend
   4969  209e		       ff		      .byte.b	$ff
   4968  209e					      repend
   4969  209f		       ff		      .byte.b	$ff
   4968  209f					      repend
   4969  20a0		       ff		      .byte.b	$ff
   4968  20a0					      repend
   4969  20a1		       ff		      .byte.b	$ff
   4968  20a1					      repend
   4969  20a2		       ff		      .byte.b	$ff
   4968  20a2					      repend
   4969  20a3		       ff		      .byte.b	$ff
   4968  20a3					      repend
   4969  20a4		       ff		      .byte.b	$ff
   4968  20a4					      repend
   4969  20a5		       ff		      .byte.b	$ff
   4968  20a5					      repend
   4969  20a6		       ff		      .byte.b	$ff
   4968  20a6					      repend
   4969  20a7		       ff		      .byte.b	$ff
   4968  20a7					      repend
   4969  20a8		       ff		      .byte.b	$ff
   4968  20a8					      repend
   4969  20a9		       ff		      .byte.b	$ff
   4968  20a9					      repend
   4969  20aa		       ff		      .byte.b	$ff
   4968  20aa					      repend
   4969  20ab		       ff		      .byte.b	$ff
   4968  20ab					      repend
   4969  20ac		       ff		      .byte.b	$ff
   4968  20ac					      repend
   4969  20ad		       ff		      .byte.b	$ff
   4968  20ad					      repend
   4969  20ae		       ff		      .byte.b	$ff
   4968  20ae					      repend
   4969  20af		       ff		      .byte.b	$ff
   4968  20af					      repend
   4969  20b0		       ff		      .byte.b	$ff
   4968  20b0					      repend
   4969  20b1		       ff		      .byte.b	$ff
   4968  20b1					      repend
   4969  20b2		       ff		      .byte.b	$ff
   4968  20b2					      repend
   4969  20b3		       ff		      .byte.b	$ff
   4968  20b3					      repend
   4969  20b4		       ff		      .byte.b	$ff
   4968  20b4					      repend
   4969  20b5		       ff		      .byte.b	$ff
   4968  20b5					      repend
   4969  20b6		       ff		      .byte.b	$ff
   4968  20b6					      repend
   4969  20b7		       ff		      .byte.b	$ff
   4968  20b7					      repend
   4969  20b8		       ff		      .byte.b	$ff
   4968  20b8					      repend
   4969  20b9		       ff		      .byte.b	$ff
   4968  20b9					      repend
   4969  20ba		       ff		      .byte.b	$ff
   4968  20ba					      repend
   4969  20bb		       ff		      .byte.b	$ff
   4968  20bb					      repend
   4969  20bc		       ff		      .byte.b	$ff
   4968  20bc					      repend
   4969  20bd		       ff		      .byte.b	$ff
   4968  20bd					      repend
   4969  20be		       ff		      .byte.b	$ff
   4968  20be					      repend
   4969  20bf		       ff		      .byte.b	$ff
   4968  20bf					      repend
   4969  20c0		       ff		      .byte.b	$ff
   4968  20c0					      repend
   4969  20c1		       ff		      .byte.b	$ff
   4968  20c1					      repend
   4969  20c2		       ff		      .byte.b	$ff
   4968  20c2					      repend
   4969  20c3		       ff		      .byte.b	$ff
   4968  20c3					      repend
   4969  20c4		       ff		      .byte.b	$ff
   4968  20c4					      repend
   4969  20c5		       ff		      .byte.b	$ff
   4968  20c5					      repend
   4969  20c6		       ff		      .byte.b	$ff
   4968  20c6					      repend
   4969  20c7		       ff		      .byte.b	$ff
   4968  20c7					      repend
   4969  20c8		       ff		      .byte.b	$ff
   4968  20c8					      repend
   4969  20c9		       ff		      .byte.b	$ff
   4968  20c9					      repend
   4969  20ca		       ff		      .byte.b	$ff
   4968  20ca					      repend
   4969  20cb		       ff		      .byte.b	$ff
   4968  20cb					      repend
   4969  20cc		       ff		      .byte.b	$ff
   4968  20cc					      repend
   4969  20cd		       ff		      .byte.b	$ff
   4968  20cd					      repend
   4969  20ce		       ff		      .byte.b	$ff
   4968  20ce					      repend
   4969  20cf		       ff		      .byte.b	$ff
   4968  20cf					      repend
   4969  20d0		       ff		      .byte.b	$ff
   4968  20d0					      repend
   4969  20d1		       ff		      .byte.b	$ff
   4968  20d1					      repend
   4969  20d2		       ff		      .byte.b	$ff
   4968  20d2					      repend
   4969  20d3		       ff		      .byte.b	$ff
   4968  20d3					      repend
   4969  20d4		       ff		      .byte.b	$ff
   4968  20d4					      repend
   4969  20d5		       ff		      .byte.b	$ff
   4968  20d5					      repend
   4969  20d6		       ff		      .byte.b	$ff
   4968  20d6					      repend
   4969  20d7		       ff		      .byte.b	$ff
   4968  20d7					      repend
   4969  20d8		       ff		      .byte.b	$ff
   4968  20d8					      repend
   4969  20d9		       ff		      .byte.b	$ff
   4968  20d9					      repend
   4969  20da		       ff		      .byte.b	$ff
   4968  20da					      repend
   4969  20db		       ff		      .byte.b	$ff
   4968  20db					      repend
   4969  20dc		       ff		      .byte.b	$ff
   4968  20dc					      repend
   4969  20dd		       ff		      .byte.b	$ff
   4968  20dd					      repend
   4969  20de		       ff		      .byte.b	$ff
   4968  20de					      repend
   4969  20df		       ff		      .byte.b	$ff
   4968  20df					      repend
   4969  20e0		       ff		      .byte.b	$ff
   4968  20e0					      repend
   4969  20e1		       ff		      .byte.b	$ff
   4968  20e1					      repend
   4969  20e2		       ff		      .byte.b	$ff
   4968  20e2					      repend
   4969  20e3		       ff		      .byte.b	$ff
   4968  20e3					      repend
   4969  20e4		       ff		      .byte.b	$ff
   4968  20e4					      repend
   4969  20e5		       ff		      .byte.b	$ff
   4968  20e5					      repend
   4969  20e6		       ff		      .byte.b	$ff
   4968  20e6					      repend
   4969  20e7		       ff		      .byte.b	$ff
   4968  20e7					      repend
   4969  20e8		       ff		      .byte.b	$ff
   4968  20e8					      repend
   4969  20e9		       ff		      .byte.b	$ff
   4968  20e9					      repend
   4969  20ea		       ff		      .byte.b	$ff
   4968  20ea					      repend
   4969  20eb		       ff		      .byte.b	$ff
   4968  20eb					      repend
   4969  20ec		       ff		      .byte.b	$ff
   4968  20ec					      repend
   4969  20ed		       ff		      .byte.b	$ff
   4968  20ed					      repend
   4969  20ee		       ff		      .byte.b	$ff
   4968  20ee					      repend
   4969  20ef		       ff		      .byte.b	$ff
   4968  20ef					      repend
   4969  20f0		       ff		      .byte.b	$ff
   4968  20f0					      repend
   4969  20f1		       ff		      .byte.b	$ff
   4968  20f1					      repend
   4969  20f2		       ff		      .byte.b	$ff
   4968  20f2					      repend
   4969  20f3		       ff		      .byte.b	$ff
   4968  20f3					      repend
   4969  20f4		       ff		      .byte.b	$ff
   4968  20f4					      repend
   4969  20f5		       ff		      .byte.b	$ff
   4968  20f5					      repend
   4969  20f6		       ff		      .byte.b	$ff
   4968  20f6					      repend
   4969  20f7		       ff		      .byte.b	$ff
   4968  20f7					      repend
   4969  20f8		       ff		      .byte.b	$ff
   4968  20f8					      repend
   4969  20f9		       ff		      .byte.b	$ff
   4968  20f9					      repend
   4969  20fa		       ff		      .byte.b	$ff
   4968  20fa					      repend
   4969  20fb		       ff		      .byte.b	$ff
   4968  20fb					      repend
   4969  20fc		       ff		      .byte.b	$ff
   4968  20fc					      repend
   4969  20fd		       ff		      .byte.b	$ff
   4968  20fd					      repend
   4969  20fe		       ff		      .byte.b	$ff
   4968  20fe					      repend
   4969  20ff		       ff		      .byte.b	$ff
   4970  2100					      repend
   4971  2100				   .
   4972  2100							; 
   4973  2100
   4974  2100				   .
   4975  2100							; 
   4976  2100
   4977  2100				   ._titlescreen_menu
   4978  2100							; _titlescreen_menu
   4979  2100
   4980  2100				   .L0547		;  COLUBK  =  _00
   4981  2100
   4982  2100		       a9 00		      LDA	#_00
   4983  2102		       85 09		      STA	COLUBK
   4984  2104				   .
   4985  2104							; 
   4986  2104
   4987  2104				   .L0548		;  gosub titledrawscreen
   4988  2104
   4989  2104		       20 e7 b2 	      jsr	.titledrawscreen
   4990  2107
   4991  2107				   .
   4992  2107							; 
   4993  2107
   4994  2107				   .L0549		;  if delay_counter then delay_counter  =  delay_counter  -  1  :  goto _titlescreen_menu
   4995  2107
   4996  2107		       a5 d4		      LDA	delay_counter
   4997  2109		       f0 05		      BEQ	.skipL0549
   4998  210b				   .condpart97
   4999  210b		       c6 d4		      DEC	delay_counter
   5000  210d		       4c 00 b1 	      jmp	._titlescreen_menu
   5001  2110
   5002  2110				   .skipL0549
   5003  2110				   .
   5004  2110							; 
   5005  2110
   5006  2110				   .L0550		;  if ReceiveBufferSize  <  response_menu_size then _Skip_Read_Menu_Response
   5007  2110
   5008  2110		       ad f3 1f 	      LDA	ReceiveBufferSize
   5009  2113		       c9 06		      CMP	#response_menu_size
   5010  2115					      if	((* - ._Skip_Read_Menu_Response) < 127) && ((* - ._Skip_Read_Menu_Response) > -128)
   5011  2115		       90 32		      bcc	._Skip_Read_Menu_Response
   5012  2117				  -	      else
   5013  2117				  -	      bcs	.26skip_Skip_Read_Menu_Response
   5014  2117				  -	      jmp	._Skip_Read_Menu_Response
   5015  2117				  -.26skip_Skip_Read_Menu_Response
   5016  2117					      endif
   5017  2117				   .L0551		;  _Bit5_Request_Pending{5}  =  0
   5018  2117
   5019  2117		       a5 ec		      LDA	_Bit5_Request_Pending
   5020  2119		       29 df		      AND	#223
   5021  211b		       85 ec		      STA	_Bit5_Request_Pending
   5022  211d				   .L0552		;  max_pub_level_bcd1	=  ReceiveBuffer
   5023  211d
   5024  211d		       ad f2 1f 	      LDA	ReceiveBuffer
   5025  2120		       85 a7		      STA	max_pub_level_bcd1
   5026  2122				   .L0553		;  max_pub_level_bcd2	=  ReceiveBuffer
   5027  2122
   5028  2122		       ad f2 1f 	      LDA	ReceiveBuffer
   5029  2125		       85 a8		      STA	max_pub_level_bcd2
   5030  2127				   .L0554		;  max_pub_level_bcd3	=  ReceiveBuffer
   5031  2127
   5032  2127		       ad f2 1f 	      LDA	ReceiveBuffer
   5033  212a		       85 a9		      STA	max_pub_level_bcd3
   5034  212c				   .L0555		;  max_priv_level_bcd1  =  ReceiveBuffer
   5035  212c
   5036  212c		       ad f2 1f 	      LDA	ReceiveBuffer
   5037  212f		       85 aa		      STA	max_priv_level_bcd1
   5038  2131				   .L0556		;  max_priv_level_bcd2  =  ReceiveBuffer
   5039  2131
   5040  2131		       ad f2 1f 	      LDA	ReceiveBuffer
   5041  2134		       85 ab		      STA	max_priv_level_bcd2
   5042  2136				   .L0557		;  max_priv_level_bcd3  =  ReceiveBuffer
   5043  2136
   5044  2136		       ad f2 1f 	      LDA	ReceiveBuffer
   5045  2139		       85 ac		      STA	max_priv_level_bcd3
   5046  213b				   .L0558		;  has_private_levels	=  max_priv_level_bcd1	|  max_priv_level_bcd2	|  max_priv_level_bcd3
   5047  213b
   5048  213b							; complex statement detected
   5049  213b		       a5 aa		      LDA	max_priv_level_bcd1
   5050  213d		       48		      PHA
   5051  213e		       a5 ab		      LDA	max_priv_level_bcd2
   5052  2140		       05 ac		      ORA	max_priv_level_bcd3
   5053  2142		       ba		      TSX
   5054  2143		       e8		      INX
   5055  2144		       9a		      TXS
   5056  2145		       15 00		      ORA	$00,x
   5057  2147		       85 ad		      STA	has_private_levels
   5058  2149				   ._Skip_Read_Menu_Response
   5059  2149							; _Skip_Read_Menu_Response
   5060  2149
   5061  2149				   .
   5062  2149							; 
   5063  2149
   5064  2149				   .L0559		;  if _Bit5_Request_Pending{5} then _titlescreen_menu
   5065  2149
   5066  2149		       a5 ec		      LDA	_Bit5_Request_Pending
   5067  214b		       29 20		      AND	#32
   5068  214d					      if	((* - ._titlescreen_menu) < 127) && ((* - ._titlescreen_menu) > -128)
   5069  214d		       d0 b1		      BNE	._titlescreen_menu
   5070  214f				  -	      else
   5071  214f				  -	      beq	.27skip_titlescreen_menu
   5072  214f				  -	      jmp	._titlescreen_menu
   5073  214f				  -.27skip_titlescreen_menu
   5074  214f					      endif
   5075  214f				   .
   5076  214f							; 
   5077  214f
   5078  214f				   .L0560		;  if joy0left then score  =  score  -  100  :  delay_counter	=  5
   5079  214f
   5080  214f		       2c 80 02 	      bit	SWCHA
   5081  2152		       70 19		      BVS	.skipL0560
   5082  2154				   .condpart98
   5083  2154		       f8		      SED
   5084  2155		       38		      SEC
   5085  2156		       a5 95		      LDA	score+2
   5086  2158		       e9 00		      SBC	#$00
   5087  215a		       85 95		      STA	score+2
   5088  215c		       a5 94		      LDA	score+1
   5089  215e		       e9 01		      SBC	#$01
   5090  2160		       85 94		      STA	score+1
   5091  2162		       a5 93		      LDA	score
   5092  2164		       e9 00		      SBC	#$00
   5093  2166		       85 93		      STA	score
   5094  2168		       d8		      CLD
   5095  2169		       a9 05		      LDA	#5
   5096  216b		       85 d4		      STA	delay_counter
   5097  216d				   .skipL0560
   5098  216d				   .L0561		;  if joy0down then score  =  score  -  1  :  delay_counter  =  5
   5099  216d
   5100  216d		       a9 20		      lda	#$20
   5101  216f		       2c 80 02 	      bit	SWCHA
   5102  2172		       d0 19		      BNE	.skipL0561
   5103  2174				   .condpart99
   5104  2174		       f8		      SED
   5105  2175		       38		      SEC
   5106  2176		       a5 95		      LDA	score+2
   5107  2178		       e9 01		      SBC	#$01
   5108  217a		       85 95		      STA	score+2
   5109  217c		       a5 94		      LDA	score+1
   5110  217e		       e9 00		      SBC	#$00
   5111  2180		       85 94		      STA	score+1
   5112  2182		       a5 93		      LDA	score
   5113  2184		       e9 00		      SBC	#$00
   5114  2186		       85 93		      STA	score
   5115  2188		       d8		      CLD
   5116  2189		       a9 05		      LDA	#5
   5117  218b		       85 d4		      STA	delay_counter
   5118  218d				   .skipL0561
   5119  218d				   .L0562		;  if joy0right then score  =	score  +  100  :  delay_counter  =  5
   5120  218d
   5121  218d		       2c 80 02 	      bit	SWCHA
   5122  2190		       30 13		      BMI	.skipL0562
   5123  2192				   .condpart100
   5124  2192		       f8		      SED
   5125  2193		       18		      CLC
   5126  2194		       a5 94		      LDA	score+1
   5127  2196		       69 01		      ADC	#$01
   5128  2198		       85 94		      STA	score+1
   5129  219a		       a5 93		      LDA	score
   5130  219c		       69 00		      ADC	#$00
   5131  219e		       85 93		      STA	score
   5132  21a0		       d8		      CLD
   5133  21a1		       a9 05		      LDA	#5
   5134  21a3		       85 d4		      STA	delay_counter
   5135  21a5				   .skipL0562
   5136  21a5				   .L0563		;  if joy0up then score  =  score  +  1  :  delay_counter  =  5
   5137  21a5
   5138  21a5		       a9 10		      lda	#$10
   5139  21a7		       2c 80 02 	      bit	SWCHA
   5140  21aa		       d0 19		      BNE	.skipL0563
   5141  21ac				   .condpart101
   5142  21ac		       f8		      SED
   5143  21ad		       18		      CLC
   5144  21ae		       a5 95		      LDA	score+2
   5145  21b0		       69 01		      ADC	#$01
   5146  21b2		       85 95		      STA	score+2
   5147  21b4		       a5 94		      LDA	score+1
   5148  21b6		       69 00		      ADC	#$00
   5149  21b8		       85 94		      STA	score+1
   5150  21ba		       a5 93		      LDA	score
   5151  21bc		       69 00		      ADC	#$00
   5152  21be		       85 93		      STA	score
   5153  21c0		       d8		      CLD
   5154  21c1		       a9 05		      LDA	#5
   5155  21c3		       85 d4		      STA	delay_counter
   5156  21c5				   .skipL0563
   5157  21c5				   .
   5158  21c5							; 
   5159  21c5
   5160  21c5				   .
   5161  21c5							; 
   5162  21c5
   5163  21c5				   .L0564		;  if gamenumber  >  2 then _User_Level_Compare
   5164  21c5
   5165  21c5		       a9 02		      LDA	#2
   5166  21c7		       c5 a6		      CMP	gamenumber
   5167  21c9					      if	((* - ._User_Level_Compare) < 127) && ((* - ._User_Level_Compare) > -128)
   5168  21c9		       90 13		      bcc	._User_Level_Compare
   5169  21cb				  -	      else
   5170  21cb				  -	      bcs	.28skip_User_Level_Compare
   5171  21cb				  -	      jmp	._User_Level_Compare
   5172  21cb				  -.28skip_User_Level_Compare
   5173  21cb					      endif
   5174  21cb				   .
   5175  21cb							; 
   5176  21cb
   5177  21cb				   .L0565		;  asm
   5178  21cb
   5179  21cb		       f8		      sed		; Set the Decimal Mode Flag
   5180  21cc
   5181  21cc		       a5 a9		      lda	max_pub_level_bcd3	; Load the Accumulator
   5182  21ce
   5183  21ce		       c5 95		      cmp	_sc3	; Compare Memory and the Accumulator
   5184  21d0
   5185  21d0		       a5 a8		      lda	max_pub_level_bcd2	; Load the Accumulator
   5186  21d2
   5187  21d2		       e5 94		      sbc	_sc2	; Subtract With Carry
   5188  21d4
   5189  21d4		       a5 a7		      lda	max_pub_level_bcd1	; Load the Accumulator
   5190  21d6
   5191  21d6		       e5 93		      sbc	_sc1	; Subtract With Carry
   5192  21d8
   5193  21d8		       d8		      cld		; Clear the Decimal Flag
   5194  21d9
   5195  21d9		       b0 1f		      bcs	._Skip_Level_Reset	; Branch if Carry Set
   5196  21db
   5197  21db							; (goto label if carry is set)
   5198  21db
   5199  21db		       4c ee b1 	      jmp	._Level_Reset
   5200  21de
   5201  21de
   5202  21de
   5203  21de				   ._User_Level_Compare
   5204  21de
   5205  21de		       f8		      sed		; Set the Decimal Mode Flag
   5206  21df
   5207  21df		       a5 ac		      lda	max_priv_level_bcd3	; Load the Accumulator
   5208  21e1
   5209  21e1		       c5 95		      cmp	_sc3	; Compare Memory and the Accumulator
   5210  21e3
   5211  21e3		       a5 ab		      lda	max_priv_level_bcd2	; Load the Accumulator
   5212  21e5
   5213  21e5		       e5 94		      sbc	_sc2	; Subtract With Carry
   5214  21e7
   5215  21e7		       a5 aa		      lda	max_priv_level_bcd1	; Load the Accumulator
   5216  21e9
   5217  21e9		       e5 93		      sbc	_sc1	; Subtract With Carry
   5218  21eb
   5219  21eb		       d8		      cld		; Clear the Decimal Flag
   5220  21ec
   5221  21ec		       b0 0c		      bcs	._Skip_Level_Reset	; Branch if Carry Set
   5222  21ee
   5223  21ee							; (goto label if carry is set)
   5224  21ee
   5225  21ee
   5226  21ee
   5227  21ee				   ._Level_Reset
   5228  21ee							; _Level_Reset
   5229  21ee
   5230  21ee				   .L0566		;  score  =  1
   5231  21ee
   5232  21ee		       a9 01		      LDA	#$01
   5233  21f0		       85 95		      STA	score+2
   5234  21f2		       a9 00		      LDA	#$00
   5235  21f4		       85 94		      STA	score+1
   5236  21f6		       a9 00		      LDA	#$00
   5237  21f8		       85 93		      STA	score
   5238  21fa				   .
   5239  21fa							; 
   5240  21fa
   5241  21fa				   ._Skip_Level_Reset
   5242  21fa							; _Skip_Level_Reset
   5243  21fa
   5244  21fa				   .L0567		;  if gamenumber  <  3  &&  _sc1  =  0  &&  _sc2  =  0  &&  _sc3  =  0 then _sc1  =  max_pub_level_bcd1  :  _sc2  =  max_pub_level_bcd2  :  _sc3  =  max_pub_level_bcd3
   5245  21fa
   5246  21fa		       a5 a6		      LDA	gamenumber
   5247  21fc		       c9 03		      CMP	#3
   5248  21fe		       b0 1e		      BCS	.skipL0567
   5249  2200				   .condpart102
   5250  2200		       a5 93		      LDA	_sc1
   5251  2202		       c9 00		      CMP	#0
   5252  2204		       d0 18		      BNE	.skip102then
   5253  2206				   .condpart103
   5254  2206		       a5 94		      LDA	_sc2
   5255  2208		       c9 00		      CMP	#0
   5256  220a		       d0 12		      BNE	.skip103then
   5257  220c				   .condpart104
   5258  220c		       a5 95		      LDA	_sc3
   5259  220e		       c9 00		      CMP	#0
   5260  2210		       d0 0c		      BNE	.skip104then
   5261  2212				   .condpart105
   5262  2212		       a5 a7		      LDA	max_pub_level_bcd1
   5263  2214		       85 93		      STA	_sc1
   5264  2216		       a5 a8		      LDA	max_pub_level_bcd2
   5265  2218		       85 94		      STA	_sc2
   5266  221a		       a5 a9		      LDA	max_pub_level_bcd3
   5267  221c		       85 95		      STA	_sc3
   5268  221e				   .skip104then
   5269  221e				   .skip103then
   5270  221e				   .skip102then
   5271  221e				   .skipL0567
   5272  221e				   .L0568		;  if gamenumber  >  2  &&  _sc1  =  0  &&  _sc2  =  0  &&  _sc3  =  0 then _sc1  =  max_priv_level_bcd1  :  _sc2  =  max_priv_level_bcd2  :  _sc3  =	max_priv_level_bcd3
   5273  221e
   5274  221e		       a9 02		      LDA	#2
   5275  2220		       c5 a6		      CMP	gamenumber
   5276  2222		       b0 1e		      BCS	.skipL0568
   5277  2224				   .condpart106
   5278  2224		       a5 93		      LDA	_sc1
   5279  2226		       c9 00		      CMP	#0
   5280  2228		       d0 18		      BNE	.skip106then
   5281  222a				   .condpart107
   5282  222a		       a5 94		      LDA	_sc2
   5283  222c		       c9 00		      CMP	#0
   5284  222e		       d0 12		      BNE	.skip107then
   5285  2230				   .condpart108
   5286  2230		       a5 95		      LDA	_sc3
   5287  2232		       c9 00		      CMP	#0
   5288  2234		       d0 0c		      BNE	.skip108then
   5289  2236				   .condpart109
   5290  2236		       a5 aa		      LDA	max_priv_level_bcd1
   5291  2238		       85 93		      STA	_sc1
   5292  223a		       a5 ab		      LDA	max_priv_level_bcd2
   5293  223c		       85 94		      STA	_sc2
   5294  223e		       a5 ac		      LDA	max_priv_level_bcd3
   5295  2240		       85 95		      STA	_sc3
   5296  2242				   .skip108then
   5297  2242				   .skip107then
   5298  2242				   .skip106then
   5299  2242				   .skipL0568
   5300  2242				   .
   5301  2242							; 
   5302  2242
   5303  2242				   .L0569		;  if switchselect then gamenumber  =	gamenumber  +  1  :  delay_counter  =  20  :  if gamenumber  >	4  &&  has_private_levels then gamenumber  =  1 else if gamenumber  >  2  &&  !has_private_levels then gamenumber  =  1
   5304  2242
   5305  2242		       a9 02		      lda	#2
   5306  2244		       2c 82 02 	      bit	SWCHB
   5307  2247		       d0 17		      BNE	.skipL0569
   5308  2249				   .condpart110
   5309  2249		       e6 a6		      INC	gamenumber
   5310  224b		       a9 14		      LDA	#20
   5311  224d		       85 d4		      STA	delay_counter
   5312  224f		       a9 04		      LDA	#4
   5313  2251		       c5 a6		      CMP	gamenumber
   5314  2253		       b0 0b		      BCS	.skip110then
   5315  2255				   .condpart111
   5316  2255		       a5 ad		      LDA	has_private_levels
   5317  2257		       f0 07		      BEQ	.skip111then
   5318  2259				   .condpart112
   5319  2259		       a9 01		      LDA	#1
   5320  225b		       85 a6		      STA	gamenumber
   5321  225d		       4c 6e b2 	      jmp	.skipelse9
   5322  2260				   .skip111then
   5323  2260				   .skip110then
   5324  2260				   .skipL0569
   5325  2260		       a9 02		      LDA	#2
   5326  2262		       c5 a6		      CMP	gamenumber
   5327  2264		       b0 08		      BCS	.skipelse
   5328  2266				   .condpart113
   5329  2266		       a5 ad		      LDA	has_private_levels
   5330  2268		       d0 04		      BNE	.skip113then
   5331  226a				   .condpart114
   5332  226a		       a9 01		      LDA	#1
   5333  226c		       85 a6		      STA	gamenumber
   5334  226e				   .skip113then
   5335  226e				   .skipelse
   5336  226e				   .skipelse9
   5337  226e				   .L0570		;  if !joy0fire then _Bit7_FireB_Restrainer{7}  =  0  :  goto _titlescreen_menu
   5338  226e
   5339  226e		       24 0c		      bit	INPT4
   5340  2270		       10 09		      BPL	.skipL0570
   5341  2272				   .condpart115
   5342  2272		       a5 ec		      LDA	_Bit7_FireB_Restrainer
   5343  2274		       29 7f		      AND	#127
   5344  2276		       85 ec		      STA	_Bit7_FireB_Restrainer
   5345  2278		       4c 00 b1 	      jmp	._titlescreen_menu
   5346  227b
   5347  227b				   .skipL0570
   5348  227b				   .L0571		;  if _Bit7_FireB_Restrainer{7} then goto _titlescreen_menu
   5349  227b
   5350  227b		       24 ec		      BIT	_Bit7_FireB_Restrainer
   5351  227d		       10 03		      BPL	.skipL0571
   5352  227f				   .condpart116
   5353  227f		       4c 00 b1 	      jmp	._titlescreen_menu
   5354  2282
   5355  2282				   .skipL0571
   5356  2282				   .
   5357  2282							; 
   5358  2282
   5359  2282				   .
   5360  2282							; 
   5361  2282
   5362  2282				   .
   5363  2282							; 
   5364  2282
   5365  2282				   .L0572		;  WriteToBuffer  =  _sc1  :  WriteToBuffer  =  _sc2  :  WriteToBuffer  =  _sc3  :  WriteToBuffer  =  gamenumber  :  WriteSendBuffer  =  req_load  :  _Bit5_Request_Pending{5}  =  1
   5366  2282
   5367  2282		       a5 93		      LDA	_sc1
   5368  2284		       8d f0 1f 	      STA	WriteToBuffer
   5369  2287		       a5 94		      LDA	_sc2
   5370  2289		       8d f0 1f 	      STA	WriteToBuffer
   5371  228c		       a5 95		      LDA	_sc3
   5372  228e		       8d f0 1f 	      STA	WriteToBuffer
   5373  2291		       a5 a6		      LDA	gamenumber
   5374  2293		       8d f0 1f 	      STA	WriteToBuffer
   5375  2296		       a9 00		      LDA	#req_load
   5376  2298		       8d f1 1f 	      STA	WriteSendBuffer
   5377  229b		       a5 ec		      LDA	_Bit5_Request_Pending
   5378  229d		       09 20		      ORA	#32
   5379  229f		       85 ec		      STA	_Bit5_Request_Pending
   5380  22a1				   .
   5381  22a1							; 
   5382  22a1
   5383  22a1				   .L0573		;  _Bit7_FireB_Restrainer{7}  =  1
   5384  22a1
   5385  22a1		       a5 ec		      LDA	_Bit7_FireB_Restrainer
   5386  22a3		       09 80		      ORA	#128
   5387  22a5		       85 ec		      STA	_Bit7_FireB_Restrainer
   5388  22a7				   .
   5389  22a7							; 
   5390  22a7
   5391  22a7				   .L0574		;  player1y  =  player_min_y  :  _Bit4_Game_Over{4}  =  0
   5392  22a7
   5393  22a7		       a9 02		      LDA	#player_min_y
   5394  22a9		       85 86		      STA	player1y
   5395  22ab		       a5 ec		      LDA	_Bit4_Game_Over
   5396  22ad		       29 ef		      AND	#239
   5397  22af		       85 ec		      STA	_Bit4_Game_Over
   5398  22b1				   .L0575		;  score  =  0  :  men_to_rescue  =  0
   5399  22b1
   5400  22b1		       a9 00		      LDA	#$00
   5401  22b3		       85 95		      STA	score+2
   5402  22b5		       a9 00		      LDA	#$00
   5403  22b7		       85 94		      STA	score+1
   5404  22b9		       a9 00		      LDA	#$00
   5405  22bb		       85 93		      STA	score
   5406  22bd		       a9 00		      LDA	#0
   5407  22bf		       85 b0		      STA	men_to_rescue
   5408  22c1				   .L0576		;  pfscore1  =  %00101010  :  pfscore2  =  255  :  pfscorecolor  =  _1C
   5409  22c1
   5410  22c1		       a9 2a		      LDA	#%00101010
   5411  22c3		       85 f2		      STA	pfscore1
   5412  22c5		       a9 ff		      LDA	#255
   5413  22c7		       85 f3		      STA	pfscore2
   5414  22c9		       a9 1c		      LDA	#_1C
   5415  22cb		       85 f4		      STA	pfscorecolor
   5416  22cd				   .
   5417  22cd							; 
   5418  22cd
   5419  22cd				   .
   5420  22cd							; 
   5421  22cd
   5422  22cd				   .
   5423  22cd							; 
   5424  22cd
   5425  22cd				   .L0577		;  asm
   5426  22cd
   5427  22cd		       a9 f0		      lda	#>(r_room_color_middle-132+pfres*pfwidth)
   5428  22cf
   5429  22cf		       85 f1		      sta	pfcolortable+1
   5430  22d1
   5431  22d1		       a9 6f		      lda	#<(r_room_color_middle-132+pfres*pfwidth)
   5432  22d3
   5433  22d3		       85 f0		      sta	pfcolortable
   5434  22d5
   5435  22d5				   .L0578		;  goto __BG_Music_Setup_01 bank1
   5436  22d5
   5437  22d5		       85 ee		      sta	temp7
   5438  22d7		       a9 9c		      lda	#>(.__BG_Music_Setup_01-1)
   5439  22d9		       48		      pha
   5440  22da		       a9 a1		      lda	#<(.__BG_Music_Setup_01-1)
   5441  22dc		       48		      pha
   5442  22dd		       a5 ee		      lda	temp7
   5443  22df		       48		      pha
   5444  22e0		       8a		      txa
   5445  22e1		       48		      pha
   5446  22e2		       a2 01		      ldx	#1
   5447  22e4		       4c e8 ff 	      jmp	BS_jsr
   5448  22e7				   .
   5449  22e7							; 
   5450  22e7
   5451  22e7				   .L0579		;  asm
   5452  22e7
------- FILE titlescreen/asm/titlescreen.asm LEVEL 2 PASS 3
      0  22e7					      include	"titlescreen/asm/titlescreen.asm"
      1  22e7
------- FILE titlescreen/asm/layoutmacros.asm LEVEL 3 PASS 3
      0  22e7					      include	"titlescreen/asm/layoutmacros.asm"
      1  22e7
      2  22e7							; the macro's used in the "titlescreen_layout.asm" file
      3  22e7
      4  22e7					      MAC	draw_96x2_1
      5  22e7				   mk_96x2_1_on =	1
      6  22e7					      jsr	draw_bmp_96x2_1
      7  22e7					      ENDM
      8  22e7
      9  22e7					      MAC	draw_96x2_2
     10  22e7				   mk_96x2_2_on =	1
     11  22e7					      jsr	draw_bmp_96x2_2
     12  22e7					      ENDM
     13  22e7
     14  22e7					      MAC	draw_96x2_3
     15  22e7				   mk_96x2_3_on =	1
     16  22e7					      jsr	draw_bmp_96x2_3
     17  22e7					      ENDM
     18  22e7
     19  22e7					      MAC	draw_96x2_4
     20  22e7				   mk_96x2_4_on =	1
     21  22e7					      jsr	draw_bmp_96x2_4
     22  22e7					      ENDM
     23  22e7
     24  22e7					      MAC	draw_96x2_5
     25  22e7				   mk_96x2_5_on =	1
     26  22e7					      jsr	draw_bmp_96x2_5
     27  22e7					      ENDM
     28  22e7
     29  22e7					      MAC	draw_96x2_6
     30  22e7				   mk_96x2_6_on =	1
     31  22e7					      jsr	draw_bmp_96x2_6
     32  22e7					      ENDM
     33  22e7
     34  22e7					      MAC	draw_96x2_7
     35  22e7				   mk_96x2_7_on =	1
     36  22e7					      jsr	draw_bmp_96x2_7
     37  22e7					      ENDM
     38  22e7
     39  22e7					      MAC	draw_96x2_8
     40  22e7				   mk_96x2_8_on =	1
     41  22e7					      jsr	draw_bmp_96x2_8
     42  22e7					      ENDM
     43  22e7
     44  22e7					      MAC	draw_48x1_1
     45  22e7				   mk_48x1_X_on =	1
     46  22e7				   mk_48x1_1_on =	1
     47  22e7					      jsr	draw_bmp_48x1_1
     48  22e7					      ENDM
     49  22e7
     50  22e7					      MAC	draw_48x1_2
     51  22e7				   mk_48x1_X_on =	1
     52  22e7				   mk_48x1_2_on =	1
     53  22e7					      jsr	draw_bmp_48x1_2
     54  22e7					      ENDM
     55  22e7
     56  22e7					      MAC	draw_48x1_3
     57  22e7				   mk_48x1_X_on =	1
     58  22e7				   mk_48x1_3_on =	1
     59  22e7					      jsr	draw_bmp_48x1_3
     60  22e7					      ENDM
     61  22e7
     62  22e7					      MAC	draw_48x1_4
     63  22e7				   mk_48x1_X_on =	1
     64  22e7				   mk_48x1_4_on =	1
     65  22e7					      jsr	draw_bmp_48x1_4
     66  22e7					      ENDM
     67  22e7
     68  22e7					      MAC	draw_48x1_5
     69  22e7				   mk_48x1_X_on =	1
     70  22e7				   mk_48x1_5_on =	1
     71  22e7					      jsr	draw_bmp_48x1_5
     72  22e7					      ENDM
     73  22e7
     74  22e7					      MAC	draw_48x1_6
     75  22e7				   mk_48x1_X_on =	1
     76  22e7				   mk_48x1_6_on =	1
     77  22e7					      jsr	draw_bmp_48x1_6
     78  22e7					      ENDM
     79  22e7
     80  22e7					      MAC	draw_48x1_7
     81  22e7				   mk_48x1_X_on =	1
     82  22e7				   mk_48x1_7_on =	1
     83  22e7					      jsr	draw_bmp_48x1_7
     84  22e7					      ENDM
     85  22e7
     86  22e7					      MAC	draw_48x1_8
     87  22e7				   mk_48x1_X_on =	1
     88  22e7				   mk_48x1_8_on =	1
     89  22e7					      jsr	draw_bmp_48x1_8
     90  22e7					      ENDM
     91  22e7
     92  22e7
     93  22e7					      MAC	draw_48x2_1
     94  22e7				   mk_48x2_X_on =	1
     95  22e7				   mk_48x2_1_on =	1
     96  22e7					      jsr	draw_bmp_48x2_1
     97  22e7					      ENDM
     98  22e7
     99  22e7					      MAC	draw_48x2_2
    100  22e7				   mk_48x2_X_on =	1
    101  22e7				   mk_48x2_2_on =	1
    102  22e7					      jsr	draw_bmp_48x2_2
    103  22e7					      ENDM
    104  22e7
    105  22e7					      MAC	draw_48x2_3
    106  22e7				   mk_48x2_X_on =	1
    107  22e7				   mk_48x2_3_on =	1
    108  22e7					      jsr	draw_bmp_48x2_3
    109  22e7					      ENDM
    110  22e7
    111  22e7					      MAC	draw_48x2_4
    112  22e7				   mk_48x2_X_on =	1
    113  22e7				   mk_48x2_4_on =	1
    114  22e7					      jsr	draw_bmp_48x2_4
    115  22e7					      ENDM
    116  22e7
    117  22e7					      MAC	draw_48x2_5
    118  22e7				   mk_48x2_X_on =	1
    119  22e7				   mk_48x2_5_on =	1
    120  22e7					      jsr	draw_bmp_48x2_5
    121  22e7					      ENDM
    122  22e7
    123  22e7					      MAC	draw_48x2_6
    124  22e7				   mk_48x2_X_on =	1
    125  22e7				   mk_48x2_6_on =	1
    126  22e7					      jsr	draw_bmp_48x2_6
    127  22e7					      ENDM
    128  22e7
    129  22e7					      MAC	draw_48x2_7
    130  22e7				   mk_48x2_X_on =	1
    131  22e7				   mk_48x2_7_on =	1
    132  22e7					      jsr	draw_bmp_48x2_7
    133  22e7					      ENDM
    134  22e7
    135  22e7					      MAC	draw_48x2_8
    136  22e7				   mk_48x2_X_on =	1
    137  22e7				   mk_48x2_8_on =	1
    138  22e7					      jsr	draw_bmp_48x2_8
    139  22e7					      ENDM
    140  22e7
    141  22e7					      MAC	draw_player
    142  22e7				   mk_player_on =	1
    143  22e7					      jsr	draw_player_display
    144  22e7					      ENDM
    145  22e7
    146  22e7					      MAC	draw_score
    147  22e7				   mk_score_on =	1
    148  22e7				   mk_48x1_X_on =	1
    149  22e7					      jsr	draw_score_display
    150  22e7					      ENDM
    151  22e7
    152  22e7					      MAC	draw_gameselect
    153  22e7				   mk_gameselect_on =	1
    154  22e7				   mk_48x1_X_on =	1
    155  22e7					      jsr	draw_gameselect_display
    156  22e7					      ENDM
    157  22e7
    158  22e7					      MAC	draw_space
    159  22e7					      ldy	#{1}
    160  22e7				   .loop
    161  22e7					      sta	WSYNC
    162  22e7					      dey
    163  22e7					      bne	.loop
    164  22e7					      ENDM
    165  22e7
------- FILE titlescreen/asm/titlescreen.asm
------- FILE titlescreen/asm/dpcfix.asm LEVEL 3 PASS 3
      0  22e7					      include	"titlescreen/asm/dpcfix.asm"
      1  22e7							; reassign variables that DPC+ doesn't have
      2  22e7
      3  22e7				  -	      ifnconst	aux2
      4  22e7				  -aux2       =	player2x
      5  22e7					      endif
      6  22e7				  -	      ifnconst	aux4
      7  22e7				  -aux4       =	player4x
      8  22e7					      endif
      9  22e7				  -	      ifnconst	aux5
     10  22e7				  -aux5       =	player5x
     11  22e7					      endif
     12  22e7				  -	      ifnconst	aux6
     13  22e7				  -aux6       =	player6x
     14  22e7					      endif
     15  22e7
     16  22e7				  -	      ifnconst	player0pointer
     17  22e7				  -player0pointer =	player2y
     18  22e7					      endif
     19  22e7				  -	      ifnconst	player1pointer
     20  22e7				  -player1pointer =	player2height	; to player3height
     21  22e7					      endif
     22  22e7				  -	      ifnconst	player1color
     23  22e7				  -player1color =	player4height	; to player5height
     24  22e7					      endif
     25  22e7				  -	      ifnconst	scorepointers
     26  22e7				  -scorepointers =	player6height	; to NUSIZ8
     27  22e7					      endif
------- FILE titlescreen/asm/titlescreen.asm
------- FILE titlescreen/titlescreen_layout.asm LEVEL 3 PASS 3
      0  22e7					      include	"titlescreen/titlescreen_layout.asm"
      1  22e7
      2  22e7							; To use a minikernel, just list it below. They'll be drawn on the screen in
      3  22e7							; in the order they were listed.
      4  22e7							;
      5  22e7							; If a minikernel isn't listed, it won't be compiled into your program, and
      6  22e7							; it won't use any rom space.
      7  22e7
      8  22e7					      MAC	titlescreenlayout
      9  22e7					      draw_96x2_1
     10  22e7					      draw_gameselect
     11  22e7					      draw_48x2_1
     12  22e7					      draw_score
     13  22e7					      ENDM
     14  22e7
     15  22e7							; minikernel choices are:
     16  22e7							;
     17  22e7							; draw_48x1_1, draw_48x1_2, draw_48x1_3
     18  22e7							;	The first, second, and third 48-wide single-line bitmap minikernels
     19  22e7							;
     20  22e7							; draw_48x2_1, draw_48x2_2, draw_48x2_3
     21  22e7							;	The first, second, and third 48-wide double-line bitmap minikernels
     22  22e7							;
     23  22e7							; draw_96x2_1, draw_96x2_2, draw_96x2_3
     24  22e7							;	The first, second, and third 96-wide double-line bitmap minikernels
     25  22e7							;
     26  22e7							; draw_gameselect
     27  22e7							;	The game selection display minikernel
     28  22e7							;
     29  22e7							; draw_score
     30  22e7							;	A minikernel that draws the score
     31  22e7							;
     32  22e7							; draw_space 10
     33  22e7							;	A minikernel used to add blank space between other minikernels
------- FILE titlescreen/asm/titlescreen.asm
      5  22e7
      6  22e7				   .titledrawscreen
      7  22e7				   title_eat_overscan
      8  22e7							;bB runs in overscan. Wait for the overscan to run out...
      9  22e7		       18		      clc
     10  22e8		       ad 84 02 	      lda	INTIM
     11  22eb		       30 fa		      bmi	title_eat_overscan
     12  22ed		       4c f0 b2 	      jmp	title_do_vertical_sync
     13  22f0
     14  22f0				   title_do_vertical_sync
     15  22f0		       a9 02		      lda	#2
     16  22f2		       85 02		      sta	WSYNC	;one line with VSYNC
     17  22f4		       85 00		      sta	VSYNC	;enable VSYNC
     18  22f6		       85 02		      sta	WSYNC	;one line with VSYNC
     19  22f8		       85 02		      sta	WSYNC	;one line with VSYNC
     20  22fa		       a9 00		      lda	#0
     21  22fc		       85 02		      sta	WSYNC	;one line with VSYNC
     22  22fe		       85 00		      sta	VSYNC	;turn off VSYNC
     23  2300
     24  2300							;lda #42+128
     25  2300					      ifnconst	vblank_time
     26  2300		       a9 aa		      lda	#42+128
     27  2302				  -	      else
     28  2302				  -	      lda	#vblank_time+128
     29  2302					      endif
     30  2302
     31  2302		       8d 96 02 	      sta	TIM64T
     32  2305
     33  2305		       00 82	   titleframe =	missile0x
     34  2305		       e6 82		      inc	titleframe	; increment the frame counter
     35  2307
     36  2307				  -	      ifconst	.title_vblank
     37  2307				  -	      jsr	.title_vblank
     38  2307					      endif
     39  2307
     40  2307				   title_vblank_loop
     41  2307		       ad 84 02 	      lda	INTIM
     42  230a		       30 fb		      bmi	title_vblank_loop
     43  230c		       a9 00		      lda	#0
     44  230e		       85 02		      sta	WSYNC
     45  2310		       85 01		      sta	VBLANK
     46  2312		       85 1d		      sta	ENAM0
     47  2314		       85 1f		      sta	ENABL
     48  2316
     49  2316				   title_playfield
     50  2316
     51  2316							; ======== BEGIN of the custom kernel!!!!! All of the work is done in the playfield.
     52  2316
     53  2316		       a9 e6		      lda	#230
     54  2318		       8d 96 02 	      sta	TIM64T
     55  231b
     56  231b		       a9 01		      lda	#1
     57  231d		       85 0a		      sta	CTRLPF
     58  231f		       18		      clc
     59  2320
     60  2320		       a9 00		      lda	#0
     61  2322		       85 0b		      sta	REFP0
     62  2324		       85 0c		      sta	REFP1
     63  2326		       85 02		      sta	WSYNC
     64  2328		       ad 60 b3 	      lda	titlescreencolor
     65  232b		       85 09		      sta	COLUBK
     66  232d
      0  232d					      titlescreenlayout
      0  232d					      draw_96x2_1
      1  232d		       00 01	   mk_96x2_1_on =	1
      2  232d		       20 f1 b4 	      jsr	draw_bmp_96x2_1
      0  2330					      draw_gameselect
      1  2330		       00 01	   mk_gameselect_on =	1
      2  2330		       00 01	   mk_48x1_X_on =	1
      3  2330		       20 53 b7 	      jsr	draw_gameselect_display
      0  2333					      draw_48x2_1
      1  2333		       00 01	   mk_48x2_X_on =	1
      2  2333		       00 01	   mk_48x2_1_on =	1
      3  2333		       20 65 b3 	      jsr	draw_bmp_48x2_1
      0  2336					      draw_score
      1  2336		       00 01	   mk_score_on =	1
      2  2336		       00 01	   mk_48x1_X_on =	1
      3  2336		       20 71 b6 	      jsr	draw_score_display
     68  2339
     69  2339		       4c c9 b7 	      jmp	PFWAIT	; kernel is done. Finish off the screen
     70  233c
------- FILE titlescreen/asm/position48.asm LEVEL 3 PASS 3
      0  233c					      include	"titlescreen/asm/position48.asm"
      1  233c
      2  233c				   position48
      3  233c
      4  233c							;postion P0 and P1
      5  233c
      6  233c		       85 02		      sta	WSYNC
      7  233e
      8  233e		       a9 90		      lda	#$90	;2
      9  2340		       85 20		      sta	HMP0	;3
     10  2342		       a9 a0		      lda	#$A0	;2
     11  2344		       85 21		      sta	HMP1	;3
     12  2346
     13  2346		       e6 9c		      inc	temp1
     14  2348		       c6 9c		      dec	temp1
     15  234a		       e6 9c		      inc	temp1
     16  234c		       c6 9c		      dec	temp1
     17  234e		       e6 9c		      inc	temp1
      0  2350					      sleep	2
      1  2350				   .CYCLES    SET	2
      2  2350
      3  2350				  -	      IF	.CYCLES < 2
      4  2350				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  2350				  -	      ERR
      6  2350					      ENDIF
      7  2350
      8  2350				  -	      IF	.CYCLES & 1
      9  2350				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  2350				  -	      nop	0
     11  2350				  -	      ELSE
     12  2350				  -	      bit	VSYNC
     13  2350				  -	      ENDIF
     14  2350				  -.CYCLES    SET	.CYCLES - 3
     15  2350					      ENDIF
     16  2350
     17  2350					      REPEAT	.CYCLES / 2
     18  2350		       ea		      nop
     19  2351					      REPEND
     19  2351		       85 10		      sta	RESP0	;  +3
     20  2353		       85 11		      sta	RESP1	;  +3
     21  2355		       c6 9c		      dec	temp1	;  +5
     22  2357		       e6 9c		      inc	temp1	;  +5
     23  2359		       c6 9c		      dec	temp1	;  +5
     24  235b		       e6 9c		      inc	temp1	;  +5
     25  235d		       c6 9c		      dec	temp1	;  +5
      0  235f					      sleep	3
      1  235f				   .CYCLES    SET	3
      2  235f
      3  235f				  -	      IF	.CYCLES < 2
      4  235f				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  235f				  -	      ERR
      6  235f					      ENDIF
      7  235f
      8  235f					      IF	.CYCLES & 1
      9  235f					      IFNCONST	NO_ILLEGAL_OPCODES
     10  235f		       04 00		      nop	0
     11  2361				  -	      ELSE
     12  2361				  -	      bit	VSYNC
     13  2361					      ENDIF
     14  2361				   .CYCLES    SET	.CYCLES - 3
     15  2361					      ENDIF
     16  2361
     17  2361				  -	      REPEAT	.CYCLES / 2
     18  2361				  -	      nop
     19  2361					      REPEND
     27  2361		       85 2a		      sta	HMOVE	; +76
     28  2363		       60		      RTS
     29  2364
------- FILE titlescreen/asm/titlescreen.asm
------- FILE titlescreen/titlescreen_color.asm LEVEL 3 PASS 3
      0  2364					      include	"titlescreen/titlescreen_color.asm"
      1  2364
      2  2364							; This is where the titlescreen background color gets set.
      3  2364							; You can also do a "dim titlescreencolor=[letter]" in bB
      4  2364							; if you want to change the color on the fly.
      5  2364
      6  2364				  -	      ifnconst	titlescreencolor
      7  2364				  -titlescreencolor
      8  2364					      endif
      9  2364		       00		      .byte.b	$00
     10  2365
------- FILE titlescreen/asm/titlescreen.asm
     73  2365
     74  2365				  -	      ifconst	mk_48x1_1_on
     75  2365				  -	      include	"titlescreen/asm/48x1_1_kernel.asm"
     76  2365					      endif		;mk_48x1_1_on
     77  2365
     78  2365				  -	      ifconst	mk_48x1_2_on
     79  2365				  -	      include	"titlescreen/asm/48x1_2_kernel.asm"
     80  2365					      endif		;mk_48x1_2_on
     81  2365
     82  2365				  -	      ifconst	mk_48x1_3_on
     83  2365				  -	      include	"titlescreen/asm/48x1_3_kernel.asm"
     84  2365					      endif		;mk_48x1_3_on
     85  2365
     86  2365				  -	      ifconst	mk_48x1_4_on
     87  2365				  -	      include	"titlescreen/asm/48x1_4_kernel.asm"
     88  2365					      endif		;mk_48x1_4_on
     89  2365
     90  2365				  -	      ifconst	mk_48x1_5_on
     91  2365				  -	      include	"titlescreen/asm/48x1_5_kernel.asm"
     92  2365					      endif		;mk_48x1_5_on
     93  2365
     94  2365				  -	      ifconst	mk_48x1_6_on
     95  2365				  -	      include	"titlescreen/asm/48x1_6_kernel.asm"
     96  2365					      endif		;mk_48x1_6_on
     97  2365
     98  2365				  -	      ifconst	mk_48x1_7_on
     99  2365				  -	      include	"titlescreen/asm/48x1_7_kernel.asm"
    100  2365					      endif		;mk_48x1_7_on
    101  2365
    102  2365				  -	      ifconst	mk_48x1_8_on
    103  2365				  -	      include	"titlescreen/asm/48x1_8_kernel.asm"
    104  2365					      endif		;mk_48x1_8_on
    105  2365
    106  2365					      ifconst	mk_48x2_1_on
------- FILE titlescreen/asm/48x2_1_kernel.asm LEVEL 3 PASS 3
      0  2365					      include	"titlescreen/asm/48x2_1_kernel.asm"
      1  2365
      2  2365				   draw_bmp_48x2_1
      3  2365
      4  2365		       a9 de		      lda	#<(bmp_48x2_1_colors-1+bmp_48x2_1_height-bmp_48x2_1_window)
      5  2367				  -	      ifconst	bmp_48x2_1_index
      6  2367				  -	      sec
      7  2367				  -	      sbc	bmp_48x2_1_index
      8  2367					      endif
      9  2367		       85 f4		      sta	aux5+0
     10  2369		       a9 b7		      lda	#>(bmp_48x2_1_colors-1+bmp_48x2_1_height-bmp_48x2_1_window)
     11  236b		       85 f5		      sta	aux5+1
     12  236d
     13  236d		       a0 0b		      ldy	#11
     14  236f				   bmp_48x2_1_pointersetup
     15  236f		       b9 a4 b3 	      lda	bmp_48x2_1_values,y
     16  2372		       99 96 00 	      sta	scorepointers,y
     17  2375		       88		      dey
     18  2376		       b9 a4 b3 	      lda	bmp_48x2_1_values,y
     19  2379				  -	      ifconst	bmp_48x2_1_index
     20  2379				  -	      sec
     21  2379				  -	      sbc	bmp_48x2_1_index
     22  2379					      endif
     23  2379		       99 96 00 	      sta	scorepointers,y
     24  237c		       88		      dey
     25  237d		       10 f0		      bpl	bmp_48x2_1_pointersetup
     26  237f
     27  237f
     28  237f		       a0 04		      ldy	#(bmp_48x2_1_window-1)
     29  2381		       84 f1		      sty	aux2
     30  2383
     31  2383		       c8		      iny
     32  2384		       b1 f4		      lda	(aux5),y
     33  2386		       88		      dey
     34  2387
     35  2387		       85 06		      sta	COLUP0	;3
     36  2389		       85 07		      sta	COLUP1	;3
     37  238b		       85 2b		      sta	HMCLR	;3
     38  238d
     39  238d		       ad 60 b3 	      lda	titlescreencolor
     40  2390		       85 08		      sta	COLUPF
     41  2392
     42  2392					      ifconst	bmp_48x2_1_background
     43  2392		       ad e6 b7 	      lda	bmp_48x2_1_background
     44  2395				  -	      else
     45  2395				  -	      lda	titlescreencolor
     46  2395					      endif
     47  2395		       85 f3		      sta	aux4
     48  2397					      ifconst	bmp_48x2_1_PF1
     49  2397		       ad e4 b7 	      lda	bmp_48x2_1_PF1
     50  239a				  -	      else
     51  239a				  -	      lda	#0
     52  239a				  -	      nop
     53  239a					      endif
     54  239a		       85 0e		      sta	PF1
     55  239c
     56  239c					      ifconst	bmp_48x2_1_PF2
     57  239c		       ad e5 b7 	      lda	bmp_48x2_1_PF2
     58  239f				  -	      else
     59  239f				  -	      lda	#0
     60  239f				  -	      nop
     61  239f					      endif
     62  239f		       85 0f		      sta	PF2
     63  23a1
     64  23a1		       4c 46 b4 	      jmp	draw_bmp_48x2_X
     65  23a4
     66  23a4				   bmp_48x2_1_values
     67  23a4		       e7 b7		      .word.w	(bmp_48x2_1_00+#bmp_48x2_1_height-#bmp_48x2_1_window)
     68  23a6		       ed b7		      .word.w	(bmp_48x2_1_01+#bmp_48x2_1_height-#bmp_48x2_1_window)
     69  23a8		       f3 b7		      .word.w	(bmp_48x2_1_02+#bmp_48x2_1_height-#bmp_48x2_1_window)
     70  23aa		       f9 b7		      .word.w	(bmp_48x2_1_03+#bmp_48x2_1_height-#bmp_48x2_1_window)
     71  23ac		       00 b8		      .word.w	(bmp_48x2_1_04+#bmp_48x2_1_height-#bmp_48x2_1_window)
     72  23ae		       06 b8		      .word.w	(bmp_48x2_1_05+#bmp_48x2_1_height-#bmp_48x2_1_window)
     73  23b0
------- FILE titlescreen/asm/titlescreen.asm
    108  23b0					      endif		;mk_48x2_1_on
    109  23b0
    110  23b0				  -	      ifconst	mk_48x2_2_on
    111  23b0				  -	      include	"titlescreen/asm/48x2_2_kernel.asm"
    112  23b0					      endif		;mk_48x2_2_on
    113  23b0
    114  23b0				  -	      ifconst	mk_48x2_3_on
    115  23b0				  -	      include	"titlescreen/asm/48x2_3_kernel.asm"
    116  23b0					      endif		;mk_48x2_3_on
    117  23b0
    118  23b0				  -	      ifconst	mk_48x2_4_on
    119  23b0				  -	      include	"titlescreen/asm/48x2_4_kernel.asm"
    120  23b0					      endif		;mk_48x2_4_on
    121  23b0
    122  23b0				  -	      ifconst	mk_48x2_5_on
    123  23b0				  -	      include	"titlescreen/asm/48x2_5_kernel.asm"
    124  23b0					      endif		;mk_48x2_5_on
    125  23b0
    126  23b0				  -	      ifconst	mk_48x2_6_on
    127  23b0				  -	      include	"titlescreen/asm/48x2_6_kernel.asm"
    128  23b0					      endif		;mk_48x2_6_on
    129  23b0
    130  23b0				  -	      ifconst	mk_48x2_7_on
    131  23b0				  -	      include	"titlescreen/asm/48x2_7_kernel.asm"
    132  23b0					      endif		;mk_48x2_7_on
    133  23b0
    134  23b0				  -	      ifconst	mk_48x2_8_on
    135  23b0				  -	      include	"titlescreen/asm/48x2_8_kernel.asm"
    136  23b0					      endif		;mk_48x2_8_on
    137  23b0
    138  23b0					      ifconst	mk_48x1_X_on
------- FILE titlescreen/asm/48x1_X_kernel.asm LEVEL 3 PASS 3
      0  23b0					      include	"titlescreen/asm/48x1_X_kernel.asm"
      1  23b0				   draw_bmp_48x1_X
      2  23b0
      3  23b0		       a9 03		      lda	#3
      4  23b2		       85 04		      sta	NUSIZ0	;3=Player and Missile are drawn twice 32 clocks apart
      5  23b4		       85 05		      sta	NUSIZ1	;3=Player and Missile are drawn twice 32 clocks apart
      6  23b6
      7  23b6		       ba		      tsx
      8  23b7		       86 f6		      stx	stack1	;save the stack pointer
      9  23b9
     10  23b9		       20 3c b3 	      jsr	position48
     11  23bc
     12  23bc		       a9 03		      lda	#3	;2
     13  23be		       85 25		      sta	VDELP0	;3
     14  23c0		       85 26		      sta	VDELP1	;3
     15  23c2
     16  23c2		       a9 01		      lda	#1	;2
     17  23c4		       85 0a		      sta	CTRLPF	;3
     18  23c6
     19  23c6							;enough cycles have passed for the HMOV, so we can clear HMCLR
     20  23c6		       85 2b		      sta	HMCLR
     21  23c8
     22  23c8		       85 02		      sta	WSYNC
     23  23ca
     24  23ca		       e6 9c		      inc	temp1	;5
     25  23cc		       c6 9c		      dec	temp1	;5
     26  23ce		       e6 9c		      inc	temp1	;5
     27  23d0		       c6 9c		      dec	temp1	;5
     28  23d2		       e6 9c		      inc	temp1	;5
     29  23d4		       c6 9c		      dec	temp1	;5
     30  23d6		       e6 9c		      inc	temp1	;5
     31  23d8		       c6 9c		      dec	temp1	;5
     32  23da		       e6 9c		      inc	temp1	;5
     33  23dc		       c6 9c		      dec	temp1	;5
     34  23de
      0  23de					      sleep	5
      1  23de				   .CYCLES    SET	5
      2  23de
      3  23de				  -	      IF	.CYCLES < 2
      4  23de				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  23de				  -	      ERR
      6  23de					      ENDIF
      7  23de
      8  23de					      IF	.CYCLES & 1
      9  23de					      IFNCONST	NO_ILLEGAL_OPCODES
     10  23de		       04 00		      nop	0
     11  23e0				  -	      ELSE
     12  23e0				  -	      bit	VSYNC
     13  23e0					      ENDIF
     14  23e0				   .CYCLES    SET	.CYCLES - 3
     15  23e0					      ENDIF
     16  23e0
     17  23e0					      REPEAT	.CYCLES / 2
     18  23e0		       ea		      nop
     19  23e1					      REPEND
     36  23e1
     37  23e1		       c8		      iny
     38  23e2
     39  23e2		       4c 00 b4 	      jmp	pf48x1_X_loop_entry
     40  23e5
     41  23e5					      if	>. != >[.+$2a]
     42  2400		       00 00 00 00*	      align	256
     43  2400					      endif
     44  2400
     45  2400				   pf48x1_X_loop_entry
     46  2400				   pf48x1_X_loop
     47  2400		       88		      dey		;2
     48  2401		       84 f1		      sty	aux2	;3
     49  2403		       b1 96		      lda	(scorepointers+0),y	;5
     50  2405		       85 1b		      sta	GRP0	;3
     51  2407
     52  2407		       b1 98		      lda	(scorepointers+2),y	;5
     53  2409		       85 1c		      sta	GRP1	;3
     54  240b		       b1 9a		      lda	(scorepointers+4),y	;5
     55  240d		       85 1b		      sta	GRP0	;3
     56  240f
      0  240f					      sleep	2	; I could make this indirect, if we want to burn more rom
      1  240f				   .CYCLES    SET	2
      2  240f
      3  240f				  -	      IF	.CYCLES < 2
      4  240f				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  240f				  -	      ERR
      6  240f					      ENDIF
      7  240f
      8  240f				  -	      IF	.CYCLES & 1
      9  240f				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  240f				  -	      nop	0
     11  240f				  -	      ELSE
     12  240f				  -	      bit	VSYNC
     13  240f				  -	      ENDIF
     14  240f				  -.CYCLES    SET	.CYCLES - 3
     15  240f					      ENDIF
     16  240f
     17  240f					      REPEAT	.CYCLES / 2
     18  240f		       ea		      nop
     19  2410					      REPEND
     58  2410		       a5 f3		      lda	aux4	;3
     59  2412		       85 08		      sta	COLUPF	;3 this is a big fat waste...
     60  2414
     61  2414		       b3 a0		      lax	(scorepointers+10),y	;5
     62  2416		       b1 9e		      lda	(scorepointers+8),y	;5
     63  2418		       85 f7		      sta	stack2	;3
     64  241a		       b1 9c		      lda	(scorepointers+6),y	;5
     65  241c		       a4 f7		      ldy	stack2	;3
     66  241e
     67  241e		       85 1c		      sta	GRP1	;3
     68  2420		       84 1b		      sty	GRP0	;3
     69  2422		       86 1c		      stx	GRP1	;3
     70  2424		       84 1b		      sty	GRP0	;3
     71  2426
     72  2426		       a4 f1		      ldy	aux2	;3
     73  2428		       d0 d6		      bne	pf48x1_X_loop	;2/3
     74  242a
     75  242a				   pf48x1_X_codeend
     76  242a							;echo "critical code in 48x1 is ",(pf48x1_X_codeend-pf48x1_X_loop), " bytes long."
     77  242a
     78  242a		       a9 00		      lda	#0
     79  242c		       85 1b		      sta	GRP0
     80  242e		       85 1c		      sta	GRP1
     81  2430		       85 1b		      sta	GRP0
     82  2432		       85 1c		      sta	GRP1
     83  2434		       85 1f		      sta	ENABL
     84  2436		       85 1d		      sta	ENAM0
     85  2438		       85 25		      sta	VDELP0
     86  243a		       85 26		      sta	VDELP1
     87  243c		       85 0d		      sta	PF0
     88  243e		       85 0e		      sta	PF1
     89  2440		       85 0f		      sta	PF2
     90  2442
     91  2442		       a6 f6		      ldx	stack1	;restore the stack pointer
     92  2444		       9a		      txs
     93  2445		       60		      rts
------- FILE titlescreen/asm/titlescreen.asm
    140  2446					      endif		;mk_48x1_X_on
    141  2446
    142  2446					      ifconst	mk_48x2_X_on
------- FILE titlescreen/asm/48x2_X_kernel.asm LEVEL 3 PASS 3
      0  2446					      include	"titlescreen/asm/48x2_X_kernel.asm"
      1  2446				   draw_bmp_48x2_X
      2  2446
      3  2446		       a9 00		      lda	#0
      4  2448		       85 1b		      sta	GRP0
      5  244a		       85 1c		      sta	GRP1
      6  244c
      7  244c		       a9 03		      lda	#3
      8  244e		       85 04		      sta	NUSIZ0	;3=Player and Missile are drawn twice 32 clocks apart
      9  2450		       85 05		      sta	NUSIZ1	;3=Player and Missile are drawn twice 32 clocks apart
     10  2452
     11  2452		       ba		      tsx
     12  2453		       86 f6		      stx	stack1	;save the stack pointer
     13  2455
     14  2455		       20 3c b3 	      jsr	position48
     15  2458
     16  2458		       a9 03		      lda	#3	;2
     17  245a		       85 25		      sta	VDELP0	;3
     18  245c		       85 26		      sta	VDELP1	;3
     19  245e
     20  245e		       a9 01		      lda	#1	;2
     21  2460		       85 0a		      sta	CTRLPF	;3
     22  2462
     23  2462							;enough cycles have passed for the HMOV, so we can clear HMCLR
     24  2462		       85 2b		      sta	HMCLR
     25  2464		       85 02		      sta	WSYNC
     26  2466
     27  2466
     28  2466							;sleep (63)		;63
     29  2466		       e6 9c		      inc	temp1
     30  2468		       c6 9c		      dec	temp1
     31  246a		       e6 9c		      inc	temp1
     32  246c		       c6 9c		      dec	temp1
     33  246e		       e6 9c		      inc	temp1
     34  2470		       c6 9c		      dec	temp1
     35  2472		       e6 9c		      inc	temp1
     36  2474		       c6 9c		      dec	temp1
     37  2476		       e6 9c		      inc	temp1
     38  2478		       c6 9c		      dec	temp1
     39  247a		       e6 9c		      inc	temp1
     40  247c		       c6 9c		      dec	temp1
      0  247e					      sleep	3
      1  247e				   .CYCLES    SET	3
      2  247e
      3  247e				  -	      IF	.CYCLES < 2
      4  247e				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  247e				  -	      ERR
      6  247e					      ENDIF
      7  247e
      8  247e					      IF	.CYCLES & 1
      9  247e					      IFNCONST	NO_ILLEGAL_OPCODES
     10  247e		       04 00		      nop	0
     11  2480				  -	      ELSE
     12  2480				  -	      bit	VSYNC
     13  2480					      ENDIF
     14  2480				   .CYCLES    SET	.CYCLES - 3
     15  2480					      ENDIF
     16  2480
     17  2480				  -	      REPEAT	.CYCLES / 2
     18  2480				  -	      nop
     19  2480					      REPEND
     42  2480
     43  2480		       a5 f3		      lda	aux4	;3
     44  2482		       85 08		      sta	COLUPF	;3
     45  2484
     46  2484		       4c 87 b4 	      jmp	pf48x2_X_loop	;3
     47  2487
     48  2487				  -	      if	>. != >[.+$52]
     49  2487				  -	      align	256
     50  2487					      endif
     51  2487
     52  2487				   pf48x2_X_loop
     53  2487
     54  2487		       b1 96		      lda	(scorepointers+0),y	;5
     55  2489		       85 1b		      sta	GRP0	;3
     56  248b		       b1 98		      lda	(scorepointers+2),y	;5
     57  248d		       85 1c		      sta	GRP1	;3
     58  248f		       b1 9a		      lda	(scorepointers+4),y	;5
     59  2491		       85 1b		      sta	GRP0	;3
     60  2493
     61  2493		       b3 a0		      lax	(scorepointers+10),y	;5
     62  2495		       b1 9e		      lda	(scorepointers+8),y	;5
     63  2497		       85 f7		      sta	stack2	;3
     64  2499		       b1 9c		      lda	(scorepointers+6),y	;5
     65  249b		       a4 f7		      ldy	stack2	;3
     66  249d
     67  249d		       85 1c		      sta	GRP1	;3
     68  249f		       84 1b		      sty	GRP0	;3
     69  24a1		       86 1c		      stx	GRP1	;3
     70  24a3		       84 1b		      sty	GRP0	;3
     71  24a5
     72  24a5		       a4 f1		      ldy	aux2	;3
     73  24a7
     74  24a7		       b1 f4		      lda	(aux5),y	;5
     75  24a9		       85 91		      sta	missile0y	;3
     76  24ab
      0  24ab					      sleep	3
      1  24ab				   .CYCLES    SET	3
      2  24ab
      3  24ab				  -	      IF	.CYCLES < 2
      4  24ab				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  24ab				  -	      ERR
      6  24ab					      ENDIF
      7  24ab
      8  24ab					      IF	.CYCLES & 1
      9  24ab					      IFNCONST	NO_ILLEGAL_OPCODES
     10  24ab		       04 00		      nop	0
     11  24ad				  -	      ELSE
     12  24ad				  -	      bit	VSYNC
     13  24ad					      ENDIF
     14  24ad				   .CYCLES    SET	.CYCLES - 3
     15  24ad					      ENDIF
     16  24ad
     17  24ad				  -	      REPEAT	.CYCLES / 2
     18  24ad				  -	      nop
     19  24ad					      REPEND
     78  24ad
     79  24ad		       c6 f1		      dec	aux2	;5
     80  24af
     81  24af
     82  24af		       b1 96		      lda	(scorepointers+0),y	;5
     83  24b1		       85 1b		      sta	GRP0	;3
     84  24b3		       b1 98		      lda	(scorepointers+2),y	;5
     85  24b5		       85 1c		      sta	GRP1	;3
     86  24b7		       b1 9a		      lda	(scorepointers+4),y	;5
     87  24b9		       85 1b		      sta	GRP0	;3
     88  24bb
     89  24bb		       b3 a0		      lax	(scorepointers+10),y	;5
     90  24bd		       b1 9e		      lda	(scorepointers+8),y	;5
     91  24bf		       85 f7		      sta	stack2	;3
     92  24c1		       b1 9c		      lda	(scorepointers+6),y	;5
     93  24c3		       a4 f7		      ldy	stack2	;3
     94  24c5
     95  24c5		       85 1c		      sta	GRP1	;3
     96  24c7		       84 1b		      sty	GRP0	;3
     97  24c9		       86 1c		      stx	GRP1	;3
     98  24cb		       84 1b		      sty	GRP0	;3
     99  24cd
      0  24cd					      sleep	4
      1  24cd				   .CYCLES    SET	4
      2  24cd
      3  24cd				  -	      IF	.CYCLES < 2
      4  24cd				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  24cd				  -	      ERR
      6  24cd					      ENDIF
      7  24cd
      8  24cd				  -	      IF	.CYCLES & 1
      9  24cd				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  24cd				  -	      nop	0
     11  24cd				  -	      ELSE
     12  24cd				  -	      bit	VSYNC
     13  24cd				  -	      ENDIF
     14  24cd				  -.CYCLES    SET	.CYCLES - 3
     15  24cd					      ENDIF
     16  24cd
     17  24cd					      REPEAT	.CYCLES / 2
     18  24cd		       ea		      nop
     17  24cd					      REPEND
     18  24ce		       ea		      nop
     19  24cf					      REPEND
    101  24cf
    102  24cf		       a5 91		      lda	missile0y
    103  24d1		       85 07		      sta	COLUP1
    104  24d3		       85 06		      sta	COLUP0
    105  24d5
    106  24d5		       a4 f1		      ldy	aux2	;3
    107  24d7		       10 ae		      bpl	pf48x2_X_loop	;2/3
    108  24d9
    109  24d9
    110  24d9				   pf48x2_X_codeend
    111  24d9							;echo "critical code in 48x2 is ",(pf48x2_X_codeend-pf48x2_X_loop), " bytes long."
    112  24d9
    113  24d9		       a9 00		      lda	#0
    114  24db		       85 1b		      sta	GRP0
    115  24dd		       85 1c		      sta	GRP1
    116  24df		       85 1b		      sta	GRP0
    117  24e1		       85 1c		      sta	GRP1
    118  24e3		       85 25		      sta	VDELP0
    119  24e5		       85 26		      sta	VDELP1
    120  24e7		       85 0d		      sta	PF0
    121  24e9		       85 0e		      sta	PF1
    122  24eb		       85 0f		      sta	PF2
    123  24ed
    124  24ed		       a6 f6		      ldx	stack1	;restore the stack pointer
    125  24ef		       9a		      txs
    126  24f0		       60		      rts
------- FILE titlescreen/asm/titlescreen.asm
    144  24f1					      endif		;mk_48x2_X_on
    145  24f1
    146  24f1
    147  24f1					      ifconst	mk_96x2_1_on
------- FILE titlescreen/asm/96x2_1_kernel.asm LEVEL 3 PASS 3
      0  24f1					      include	"titlescreen/asm/96x2_1_kernel.asm"
      1  24f1				   draw_bmp_96x2_1
      2  24f1
      3  24f1				  -	      ifconst	bmp_96x2_1_index
      4  24f1				  -	      lda	#(bmp_96x2_1_height-1)
      5  24f1				  -	      sec
      6  24f1				  -	      sbc	bmp_96x2_1_index
      7  24f1				  -	      tay
      8  24f1				  -	      sbc	#bmp_96x2_1_window
      9  24f1				  -	      sta	temp1
     10  24f1					      else
     11  24f1		       a0 3b		      ldy	#(bmp_96x2_1_window-1)
     12  24f3		       a9 ff		      lda	#255
     13  24f5		       85 9c		      sta	temp1
     14  24f7					      endif
     15  24f7
     16  24f7		       a9 03		      lda	#3
     17  24f9		       85 04		      sta	NUSIZ0	;3=Player and Missile are drawn twice 32 clocks apart
     18  24fb		       85 05		      sta	NUSIZ1	;3=Player and Missile are drawn twice 32 clocks apart
     19  24fd		       a9 00		      lda	#0
     20  24ff
     21  24ff		       b9 0d b8 	      lda	bmp_96x2_1_colors,y	;4
     22  2502				  -	      ifconst	bmp_96x2_1_fade
     23  2502				  -	      and	bmp_96x2_1_fade
     24  2502					      endif
     25  2502		       85 06		      sta	COLUP0	;3
     26  2504		       85 07		      sta	COLUP1	;3
     27  2506		       85 2b		      sta	HMCLR	;3
     28  2508
     29  2508		       a5 82		      lda	titleframe
     30  250a		       29 01		      and	#1
     31  250c		       f0 03		      beq	jmp_pf96x2_1_frame0
     32  250e		       4c b8 b5 	      jmp	pf96x2_1_frame1
     33  2511				   jmp_pf96x2_1_frame0
     34  2511		       4c 14 b5 	      jmp	pf96x2_1_frame0
     35  2514
     36  2514				   pf96x2_1_frame0
     37  2514							;postion P0 and P1
     38  2514		       85 02		      sta	WSYNC
     39  2516		       a9 e0		      lda	#%11100000
     40  2518		       85 20		      sta	HMP0
     41  251a		       a9 10		      lda	#%00010000
     42  251c		       85 21		      sta	HMP1
     43  251e		       85 02		      sta	WSYNC
      0  2520					      sleep	28
      1  2520				   .CYCLES    SET	28
      2  2520
      3  2520				  -	      IF	.CYCLES < 2
      4  2520				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  2520				  -	      ERR
      6  2520					      ENDIF
      7  2520
      8  2520				  -	      IF	.CYCLES & 1
      9  2520				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  2520				  -	      nop	0
     11  2520				  -	      ELSE
     12  2520				  -	      bit	VSYNC
     13  2520				  -	      ENDIF
     14  2520				  -.CYCLES    SET	.CYCLES - 3
     15  2520					      ENDIF
     16  2520
     17  2520					      REPEAT	.CYCLES / 2
     18  2520		       ea		      nop
     17  2520					      REPEND
     18  2521		       ea		      nop
     17  2521					      REPEND
     18  2522		       ea		      nop
     17  2522					      REPEND
     18  2523		       ea		      nop
     17  2523					      REPEND
     18  2524		       ea		      nop
     17  2524					      REPEND
     18  2525		       ea		      nop
     17  2525					      REPEND
     18  2526		       ea		      nop
     17  2526					      REPEND
     18  2527		       ea		      nop
     17  2527					      REPEND
     18  2528		       ea		      nop
     17  2528					      REPEND
     18  2529		       ea		      nop
     17  2529					      REPEND
     18  252a		       ea		      nop
     17  252a					      REPEND
     18  252b		       ea		      nop
     17  252b					      REPEND
     18  252c		       ea		      nop
     17  252c					      REPEND
     18  252d		       ea		      nop
     19  252e					      REPEND
     45  252e		       85 10		      sta	RESP0
      0  2530					      sleep	14
      1  2530				   .CYCLES    SET	14
      2  2530
      3  2530				  -	      IF	.CYCLES < 2
      4  2530				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  2530				  -	      ERR
      6  2530					      ENDIF
      7  2530
      8  2530				  -	      IF	.CYCLES & 1
      9  2530				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  2530				  -	      nop	0
     11  2530				  -	      ELSE
     12  2530				  -	      bit	VSYNC
     13  2530				  -	      ENDIF
     14  2530				  -.CYCLES    SET	.CYCLES - 3
     15  2530					      ENDIF
     16  2530
     17  2530					      REPEAT	.CYCLES / 2
     18  2530		       ea		      nop
     17  2530					      REPEND
     18  2531		       ea		      nop
     17  2531					      REPEND
     18  2532		       ea		      nop
     17  2532					      REPEND
     18  2533		       ea		      nop
     17  2533					      REPEND
     18  2534		       ea		      nop
     17  2534					      REPEND
     18  2535		       ea		      nop
     17  2535					      REPEND
     18  2536		       ea		      nop
     19  2537					      REPEND
     47  2537		       85 11		      sta	RESP1
     48  2539		       85 02		      sta	WSYNC
     49  253b		       85 2a		      sta	HMOVE
     50  253d
     51  253d		       85 02		      sta	WSYNC
     52  253f		       85 2b		      sta	HMCLR
     53  2541		       85 02		      sta	WSYNC
     54  2543
      0  2543					      sleep	4
      1  2543				   .CYCLES    SET	4
      2  2543
      3  2543				  -	      IF	.CYCLES < 2
      4  2543				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  2543				  -	      ERR
      6  2543					      ENDIF
      7  2543
      8  2543				  -	      IF	.CYCLES & 1
      9  2543				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  2543				  -	      nop	0
     11  2543				  -	      ELSE
     12  2543				  -	      bit	VSYNC
     13  2543				  -	      ENDIF
     14  2543				  -.CYCLES    SET	.CYCLES - 3
     15  2543					      ENDIF
     16  2543
     17  2543					      REPEAT	.CYCLES / 2
     18  2543		       ea		      nop
     17  2543					      REPEND
     18  2544		       ea		      nop
     19  2545					      REPEND
     56  2545		       4c 48 b5 	      jmp	pfline_96x2_1_frame0
     57  2548							;align so our branch doesn't unexpectedly cross a page...
     58  2548				  -	      if	>. != >[.+$70]
     59  2548				  -	      align	256
     60  2548					      endif
     61  2548
     62  2548				   pfline_96x2_1_frame0
     63  2548		       a9 80		      lda	#$80	;2
     64  254a		       85 20		      sta	HMP0	;3
     65  254c		       85 21		      sta	HMP1	;3
     66  254e
     67  254e		       b9 b4 b9 	      lda	bmp_96x2_1_06,y	;4
     68  2551		       85 1c		      sta	GRP1	;3
     69  2553
     70  2553		       b9 49 b8 	      lda	bmp_96x2_1_00,y
     71  2556		       85 1b		      sta	GRP0
     72  2558		       b9 c1 b8 	      lda	bmp_96x2_1_02,y
     73  255b		       85 1b		      sta	GRP0
     74  255d		       b9 3c b9 	      lda	bmp_96x2_1_04,y
     75  2560		       85 1b		      sta	GRP0
     76  2562
      0  2562					      sleep	2
      1  2562				   .CYCLES    SET	2
      2  2562
      3  2562				  -	      IF	.CYCLES < 2
      4  2562				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  2562				  -	      ERR
      6  2562					      ENDIF
      7  2562
      8  2562				  -	      IF	.CYCLES & 1
      9  2562				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  2562				  -	      nop	0
     11  2562				  -	      ELSE
     12  2562				  -	      bit	VSYNC
     13  2562				  -	      ENDIF
     14  2562				  -.CYCLES    SET	.CYCLES - 3
     15  2562					      ENDIF
     16  2562
     17  2562					      REPEAT	.CYCLES / 2
     18  2562		       ea		      nop
     19  2563					      REPEND
     78  2563
     79  2563		       b9 3c ba 	      lda	bmp_96x2_1_08,y
     80  2566		       85 1c		      sta	GRP1
     81  2568		       b9 b4 ba 	      lda	bmp_96x2_1_10,y
     82  256b		       85 1c		      sta	GRP1
     83  256d
     84  256d		       b9 85 b8 	      lda	bmp_96x2_1_01,y
     85  2570		       85 1b		      sta	GRP0
     86  2572
      0  2572					      sleep	8
      1  2572				   .CYCLES    SET	8
      2  2572
      3  2572				  -	      IF	.CYCLES < 2
      4  2572				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  2572				  -	      ERR
      6  2572					      ENDIF
      7  2572
      8  2572				  -	      IF	.CYCLES & 1
      9  2572				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  2572				  -	      nop	0
     11  2572				  -	      ELSE
     12  2572				  -	      bit	VSYNC
     13  2572				  -	      ENDIF
     14  2572				  -.CYCLES    SET	.CYCLES - 3
     15  2572					      ENDIF
     16  2572
     17  2572					      REPEAT	.CYCLES / 2
     18  2572		       ea		      nop
     17  2572					      REPEND
     18  2573		       ea		      nop
     17  2573					      REPEND
     18  2574		       ea		      nop
     17  2574					      REPEND
     18  2575		       ea		      nop
     19  2576					      REPEND
     88  2576
     89  2576							;sta WSYNC	;=0
     90  2576		       85 2a		      sta	HMOVE	;3 - NORMAL HMOVE
     91  2578
     92  2578		       b9 0c b8 	      lda	bmp_96x2_1_colors-1,y	;4 - get the title color early and store it for later
     93  257b				  -	      ifconst	bmp_96x2_1_fade
     94  257b				  -	      and	bmp_96x2_1_fade
     95  257b					      else
      0  257b					      sleep	3
      1  257b				   .CYCLES    SET	3
      2  257b
      3  257b				  -	      IF	.CYCLES < 2
      4  257b				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  257b				  -	      ERR
      6  257b					      ENDIF
      7  257b
      8  257b					      IF	.CYCLES & 1
      9  257b					      IFNCONST	NO_ILLEGAL_OPCODES
     10  257b		       04 00		      nop	0
     11  257d				  -	      ELSE
     12  257d				  -	      bit	VSYNC
     13  257d					      ENDIF
     14  257d				   .CYCLES    SET	.CYCLES - 3
     15  257d					      ENDIF
     16  257d
     17  257d				  -	      REPEAT	.CYCLES / 2
     18  257d				  -	      nop
     19  257d					      REPEND
     97  257d					      endif
     98  257d		       aa		      tax
     99  257e
    100  257e		       a9 00		      lda	#0	;2
    101  2580		       85 20		      sta	HMP0	;3
    102  2582		       85 21		      sta	HMP1	;3
    103  2584
      0  2584					      sleep	7
      1  2584				   .CYCLES    SET	7
      2  2584
      3  2584				  -	      IF	.CYCLES < 2
      4  2584				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  2584				  -	      ERR
      6  2584					      ENDIF
      7  2584
      8  2584					      IF	.CYCLES & 1
      9  2584					      IFNCONST	NO_ILLEGAL_OPCODES
     10  2584		       04 00		      nop	0
     11  2586				  -	      ELSE
     12  2586				  -	      bit	VSYNC
     13  2586					      ENDIF
     14  2586				   .CYCLES    SET	.CYCLES - 3
     15  2586					      ENDIF
     16  2586
     17  2586					      REPEAT	.CYCLES / 2
     18  2586		       ea		      nop
     17  2586					      REPEND
     18  2587		       ea		      nop
     19  2588					      REPEND
    105  2588
    106  2588		       b9 00 ba 	      lda	bmp_96x2_1_07,y
    107  258b		       85 1c		      sta	GRP1
    108  258d
    109  258d		       b9 00 b9 	      lda	bmp_96x2_1_03,y	;5
    110  2590		       85 1b		      sta	GRP0	;3 =  8
    111  2592		       b9 78 b9 	      lda	bmp_96x2_1_05,y	;5
    112  2595		       85 1b		      sta	GRP0	;3 =  8
    113  2597
      0  2597					      sleep	2
      1  2597				   .CYCLES    SET	2
      2  2597
      3  2597				  -	      IF	.CYCLES < 2
      4  2597				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  2597				  -	      ERR
      6  2597					      ENDIF
      7  2597
      8  2597				  -	      IF	.CYCLES & 1
      9  2597				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  2597				  -	      nop	0
     11  2597				  -	      ELSE
     12  2597				  -	      bit	VSYNC
     13  2597				  -	      ENDIF
     14  2597				  -.CYCLES    SET	.CYCLES - 3
     15  2597					      ENDIF
     16  2597
     17  2597					      REPEAT	.CYCLES / 2
     18  2597		       ea		      nop
     19  2598					      REPEND
    115  2598
    116  2598		       b9 78 ba 	      lda	bmp_96x2_1_09,y	;5
    117  259b		       85 1c		      sta	GRP1	;3 =  8
    118  259d		       b9 00 bb 	      lda	bmp_96x2_1_11,y	;5
    119  25a0		       85 1c		      sta	GRP1	;3 =  8
    120  25a2
      0  25a2					      sleep	2
      1  25a2				   .CYCLES    SET	2
      2  25a2
      3  25a2				  -	      IF	.CYCLES < 2
      4  25a2				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  25a2				  -	      ERR
      6  25a2					      ENDIF
      7  25a2
      8  25a2				  -	      IF	.CYCLES & 1
      9  25a2				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  25a2				  -	      nop	0
     11  25a2				  -	      ELSE
     12  25a2				  -	      bit	VSYNC
     13  25a2				  -	      ENDIF
     14  25a2				  -.CYCLES    SET	.CYCLES - 3
     15  25a2					      ENDIF
     16  25a2
     17  25a2					      REPEAT	.CYCLES / 2
     18  25a2		       ea		      nop
     19  25a3					      REPEND
    122  25a3		       86 07		      stx	COLUP1
    123  25a5		       86 06		      stx	COLUP0
    124  25a7
    125  25a7		       85 2a		      sta	HMOVE	;3 - CYCLE 74 HMOVE
      0  25a9					      sleep	2
      1  25a9				   .CYCLES    SET	2
      2  25a9
      3  25a9				  -	      IF	.CYCLES < 2
      4  25a9				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  25a9				  -	      ERR
      6  25a9					      ENDIF
      7  25a9
      8  25a9				  -	      IF	.CYCLES & 1
      9  25a9				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  25a9				  -	      nop	0
     11  25a9				  -	      ELSE
     12  25a9				  -	      bit	VSYNC
     13  25a9				  -	      ENDIF
     14  25a9				  -.CYCLES    SET	.CYCLES - 3
     15  25a9					      ENDIF
     16  25a9
     17  25a9					      REPEAT	.CYCLES / 2
     18  25a9		       ea		      nop
     19  25aa					      REPEND
    127  25aa		       88		      dey
    128  25ab
    129  25ab		       c4 9c		      cpy	temp1	;3
    130  25ad		       d0 99		      bne	pfline_96x2_1_frame0	;2/3
    131  25af
    132  25af				   pf96x2_1_0codeend
    133  25af							;echo "critical code #1 in 96x2_1 is ",(pf96x2_1_0codeend-pfline_96x2_1_frame0), " bytes long."
    134  25af
    135  25af		       a9 00		      lda	#0
    136  25b1		       85 1b		      sta	GRP0
    137  25b3		       85 1c		      sta	GRP1
    138  25b5		       4c 6e b6 	      jmp	pfdone_96x2_1
    139  25b8
    140  25b8
    141  25b8				   pf96x2_1_frame1
    142  25b8
    143  25b8							;postion P0 and P1
    144  25b8		       85 02		      sta	WSYNC
    145  25ba		       a9 20		      lda	#%00100000
    146  25bc		       85 20		      sta	HMP0
    147  25be		       a9 00		      lda	#0
    148  25c0		       a9 f0		      lda	#%11110000
    149  25c2		       85 21		      sta	HMP1
    150  25c4		       85 02		      sta	WSYNC
      0  25c6					      sleep	32
      1  25c6				   .CYCLES    SET	32
      2  25c6
      3  25c6				  -	      IF	.CYCLES < 2
      4  25c6				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  25c6				  -	      ERR
      6  25c6					      ENDIF
      7  25c6
      8  25c6				  -	      IF	.CYCLES & 1
      9  25c6				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  25c6				  -	      nop	0
     11  25c6				  -	      ELSE
     12  25c6				  -	      bit	VSYNC
     13  25c6				  -	      ENDIF
     14  25c6				  -.CYCLES    SET	.CYCLES - 3
     15  25c6					      ENDIF
     16  25c6
     17  25c6					      REPEAT	.CYCLES / 2
     18  25c6		       ea		      nop
     17  25c6					      REPEND
     18  25c7		       ea		      nop
     17  25c7					      REPEND
     18  25c8		       ea		      nop
     17  25c8					      REPEND
     18  25c9		       ea		      nop
     17  25c9					      REPEND
     18  25ca		       ea		      nop
     17  25ca					      REPEND
     18  25cb		       ea		      nop
     17  25cb					      REPEND
     18  25cc		       ea		      nop
     17  25cc					      REPEND
     18  25cd		       ea		      nop
     17  25cd					      REPEND
     18  25ce		       ea		      nop
     17  25ce					      REPEND
     18  25cf		       ea		      nop
     17  25cf					      REPEND
     18  25d0		       ea		      nop
     17  25d0					      REPEND
     18  25d1		       ea		      nop
     17  25d1					      REPEND
     18  25d2		       ea		      nop
     17  25d2					      REPEND
     18  25d3		       ea		      nop
     17  25d3					      REPEND
     18  25d4		       ea		      nop
     17  25d4					      REPEND
     18  25d5		       ea		      nop
     19  25d6					      REPEND
    152  25d6		       85 10		      sta	RESP0
      0  25d8					      sleep	12
      1  25d8				   .CYCLES    SET	12
      2  25d8
      3  25d8				  -	      IF	.CYCLES < 2
      4  25d8				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  25d8				  -	      ERR
      6  25d8					      ENDIF
      7  25d8
      8  25d8				  -	      IF	.CYCLES & 1
      9  25d8				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  25d8				  -	      nop	0
     11  25d8				  -	      ELSE
     12  25d8				  -	      bit	VSYNC
     13  25d8				  -	      ENDIF
     14  25d8				  -.CYCLES    SET	.CYCLES - 3
     15  25d8					      ENDIF
     16  25d8
     17  25d8					      REPEAT	.CYCLES / 2
     18  25d8		       ea		      nop
     17  25d8					      REPEND
     18  25d9		       ea		      nop
     17  25d9					      REPEND
     18  25da		       ea		      nop
     17  25da					      REPEND
     18  25db		       ea		      nop
     17  25db					      REPEND
     18  25dc		       ea		      nop
     17  25dc					      REPEND
     18  25dd		       ea		      nop
     19  25de					      REPEND
    154  25de		       85 11		      sta	RESP1
    155  25e0		       85 02		      sta	WSYNC
    156  25e2		       85 2a		      sta	HMOVE
    157  25e4
    158  25e4		       85 02		      sta	WSYNC
    159  25e6		       85 2b		      sta	HMCLR
    160  25e8
    161  25e8
    162  25e8
    163  25e8		       85 02		      sta	WSYNC
      0  25ea					      sleep	3
      1  25ea				   .CYCLES    SET	3
      2  25ea
      3  25ea				  -	      IF	.CYCLES < 2
      4  25ea				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  25ea				  -	      ERR
      6  25ea					      ENDIF
      7  25ea
      8  25ea					      IF	.CYCLES & 1
      9  25ea					      IFNCONST	NO_ILLEGAL_OPCODES
     10  25ea		       04 00		      nop	0
     11  25ec				  -	      ELSE
     12  25ec				  -	      bit	VSYNC
     13  25ec					      ENDIF
     14  25ec				   .CYCLES    SET	.CYCLES - 3
     15  25ec					      ENDIF
     16  25ec
     17  25ec				  -	      REPEAT	.CYCLES / 2
     18  25ec				  -	      nop
     19  25ec					      REPEND
    165  25ec		       4c 00 b6 	      jmp	pfline_96x2_1_frame1
    166  25ef
    167  25ef							;align so our branch doesn't unexpectedly cross a page...
    168  25ef					      if	>. != >[.+$70]
    169  2600		       00 00 00 00*	      align	256
    170  2600					      endif
    171  2600
    172  2600				   pfline_96x2_1_frame1
    173  2600
    174  2600		       85 2a		      sta	HMOVE
    175  2602
    176  2602		       b9 00 ba 	      lda	bmp_96x2_1_07,y	;4
    177  2605		       85 1c		      sta	GRP1	;3
    178  2607
    179  2607		       a9 00		      lda	#$0	;2
    180  2609		       85 20		      sta	HMP0	;3
    181  260b		       85 21		      sta	HMP1	;3
    182  260d
    183  260d		       b9 85 b8 	      lda	bmp_96x2_1_01,y
    184  2610		       8d 1b 00 	      sta.w	GRP0
    185  2613		       b9 00 b9 	      lda	bmp_96x2_1_03,y
    186  2616		       85 1b		      sta	GRP0
    187  2618		       b9 78 b9 	      lda	bmp_96x2_1_05,y
    188  261b		       85 1b		      sta	GRP0
    189  261d
      0  261d					      sleep	2
      1  261d				   .CYCLES    SET	2
      2  261d
      3  261d				  -	      IF	.CYCLES < 2
      4  261d				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  261d				  -	      ERR
      6  261d					      ENDIF
      7  261d
      8  261d				  -	      IF	.CYCLES & 1
      9  261d				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  261d				  -	      nop	0
     11  261d				  -	      ELSE
     12  261d				  -	      bit	VSYNC
     13  261d				  -	      ENDIF
     14  261d				  -.CYCLES    SET	.CYCLES - 3
     15  261d					      ENDIF
     16  261d
     17  261d					      REPEAT	.CYCLES / 2
     18  261d		       ea		      nop
     19  261e					      REPEND
    191  261e
    192  261e		       b9 78 ba 	      lda	bmp_96x2_1_09,y
    193  2621		       85 1c		      sta	GRP1
    194  2623		       b9 00 bb 	      lda	bmp_96x2_1_11,y
    195  2626		       85 1c		      sta	GRP1
    196  2628
    197  2628		       b9 49 b8 	      lda	bmp_96x2_1_00,y
    198  262b		       85 1b		      sta	GRP0
    199  262d
    200  262d		       8d 2a 00 	      sta.w	HMOVE	;3 - cycle 74
    201  2630
    202  2630							;sta WSYNC	;=0 -----------------------------------------
    203  2630
    204  2630		       b9 b4 b9 	      lda	bmp_96x2_1_06,y
    205  2633		       85 1c		      sta	GRP1
    206  2635
      0  2635					      sleep	8
      1  2635				   .CYCLES    SET	8
      2  2635
      3  2635				  -	      IF	.CYCLES < 2
      4  2635				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  2635				  -	      ERR
      6  2635					      ENDIF
      7  2635
      8  2635				  -	      IF	.CYCLES & 1
      9  2635				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  2635				  -	      nop	0
     11  2635				  -	      ELSE
     12  2635				  -	      bit	VSYNC
     13  2635				  -	      ENDIF
     14  2635				  -.CYCLES    SET	.CYCLES - 3
     15  2635					      ENDIF
     16  2635
     17  2635					      REPEAT	.CYCLES / 2
     18  2635		       ea		      nop
     17  2635					      REPEND
     18  2636		       ea		      nop
     17  2636					      REPEND
     18  2637		       ea		      nop
     17  2637					      REPEND
     18  2638		       ea		      nop
     19  2639					      REPEND
    208  2639
    209  2639		       b9 0c b8 	      lda	bmp_96x2_1_colors-1,y	;get the title color early and store it for later
    210  263c		       aa		      tax		;2
    211  263d
      0  263d					      sleep	3
      1  263d				   .CYCLES    SET	3
      2  263d
      3  263d				  -	      IF	.CYCLES < 2
      4  263d				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  263d				  -	      ERR
      6  263d					      ENDIF
      7  263d
      8  263d					      IF	.CYCLES & 1
      9  263d					      IFNCONST	NO_ILLEGAL_OPCODES
     10  263d		       04 00		      nop	0
     11  263f				  -	      ELSE
     12  263f				  -	      bit	VSYNC
     13  263f					      ENDIF
     14  263f				   .CYCLES    SET	.CYCLES - 3
     15  263f					      ENDIF
     16  263f
     17  263f				  -	      REPEAT	.CYCLES / 2
     18  263f				  -	      nop
     19  263f					      REPEND
    213  263f
    214  263f		       a9 80		      lda	#$80	;2
    215  2641		       85 20		      sta	HMP0	;3
    216  2643		       85 21		      sta	HMP1	;3
    217  2645
    218  2645
    219  2645		       b9 c1 b8 	      lda	bmp_96x2_1_02,y	;5
    220  2648		       85 1b		      sta	GRP0	;3 =  8
    221  264a
    222  264a		       b9 3c b9 	      lda	bmp_96x2_1_04,y	;5
    223  264d		       85 1b		      sta	GRP0	;3 =  8
    224  264f
      0  264f					      sleep	2
      1  264f				   .CYCLES    SET	2
      2  264f
      3  264f				  -	      IF	.CYCLES < 2
      4  264f				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  264f				  -	      ERR
      6  264f					      ENDIF
      7  264f
      8  264f				  -	      IF	.CYCLES & 1
      9  264f				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  264f				  -	      nop	0
     11  264f				  -	      ELSE
     12  264f				  -	      bit	VSYNC
     13  264f				  -	      ENDIF
     14  264f				  -.CYCLES    SET	.CYCLES - 3
     15  264f					      ENDIF
     16  264f
     17  264f					      REPEAT	.CYCLES / 2
     18  264f		       ea		      nop
     19  2650					      REPEND
    226  2650
    227  2650		       b9 3c ba 	      lda	bmp_96x2_1_08,y	;5
    228  2653		       85 1c		      sta	GRP1	;3 =  8
    229  2655
    230  2655		       b9 b4 ba 	      lda	bmp_96x2_1_10,y	;5
    231  2658		       85 1c		      sta	GRP1	;3 =  8
    232  265a
      0  265a					      sleep	4
      1  265a				   .CYCLES    SET	4
      2  265a
      3  265a				  -	      IF	.CYCLES < 2
      4  265a				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  265a				  -	      ERR
      6  265a					      ENDIF
      7  265a
      8  265a				  -	      IF	.CYCLES & 1
      9  265a				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  265a				  -	      nop	0
     11  265a				  -	      ELSE
     12  265a				  -	      bit	VSYNC
     13  265a				  -	      ENDIF
     14  265a				  -.CYCLES    SET	.CYCLES - 3
     15  265a					      ENDIF
     16  265a
     17  265a					      REPEAT	.CYCLES / 2
     18  265a		       ea		      nop
     17  265a					      REPEND
     18  265b		       ea		      nop
     19  265c					      REPEND
    234  265c
    235  265c		       88		      dey
    236  265d
    237  265d		       8a		      txa
    238  265e				  -	      ifconst	bmp_96x2_1_fade
    239  265e				  -	      and	bmp_96x2_1_fade
    240  265e					      else
      0  265e					      sleep	3
      1  265e				   .CYCLES    SET	3
      2  265e
      3  265e				  -	      IF	.CYCLES < 2
      4  265e				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  265e				  -	      ERR
      6  265e					      ENDIF
      7  265e
      8  265e					      IF	.CYCLES & 1
      9  265e					      IFNCONST	NO_ILLEGAL_OPCODES
     10  265e		       04 00		      nop	0
     11  2660				  -	      ELSE
     12  2660				  -	      bit	VSYNC
     13  2660					      ENDIF
     14  2660				   .CYCLES    SET	.CYCLES - 3
     15  2660					      ENDIF
     16  2660
     17  2660				  -	      REPEAT	.CYCLES / 2
     18  2660				  -	      nop
     19  2660					      REPEND
    242  2660					      endif
    243  2660		       85 07		      sta	COLUP1	;3
    244  2662		       85 06		      sta	COLUP0	;3
    245  2664
    246  2664		       c4 9c		      cpy	temp1	;2
    247  2666		       d0 98		      bne	pfline_96x2_1_frame1	;2/3
    248  2668
    249  2668				   pf96x2_1_1codeend
    250  2668							;echo "critical code #2 in 96x2_1 is ",(pf96x2_1_1codeend-pfline_96x2_1_frame1), " bytes long."
    251  2668
    252  2668		       a9 00		      lda	#0
    253  266a		       85 1b		      sta	GRP0
    254  266c		       85 1c		      sta	GRP1
    255  266e
    256  266e				   pfdone_96x2_1
    257  266e		       85 02		      sta	WSYNC	; debug
    258  2670
    259  2670		       60		      rts
------- FILE titlescreen/asm/titlescreen.asm
    149  2671					      endif		;mk_96x2_1_on
    150  2671
    151  2671				  -	      ifconst	mk_96x2_2_on
    152  2671				  -	      include	"titlescreen/asm/96x2_2_kernel.asm"
    153  2671					      endif		;mk_96x2_2_on
    154  2671
    155  2671				  -	      ifconst	mk_96x2_3_on
    156  2671				  -	      include	"titlescreen/asm/96x2_3_kernel.asm"
    157  2671					      endif		;mk_96x2_3_on
    158  2671
    159  2671				  -	      ifconst	mk_96x2_4_on
    160  2671				  -	      include	"titlescreen/asm/96x2_4_kernel.asm"
    161  2671					      endif		;mk_96x2_4_on
    162  2671
    163  2671				  -	      ifconst	mk_96x2_5_on
    164  2671				  -	      include	"titlescreen/asm/96x2_5_kernel.asm"
    165  2671					      endif		;mk_96x2_5_on
    166  2671
    167  2671				  -	      ifconst	mk_96x2_6_on
    168  2671				  -	      include	"titlescreen/asm/96x2_6_kernel.asm"
    169  2671					      endif		;mk_96x2_6_on
    170  2671
    171  2671				  -	      ifconst	mk_96x2_7_on
    172  2671				  -	      include	"titlescreen/asm/96x2_7_kernel.asm"
    173  2671					      endif		;mk_96x2_7_on
    174  2671
    175  2671				  -	      ifconst	mk_96x2_8_on
    176  2671				  -	      include	"titlescreen/asm/96x2_8_kernel.asm"
    177  2671					      endif		;mk_96x2_8_on
    178  2671
    179  2671					      ifconst	mk_score_on
------- FILE titlescreen/asm/score_kernel.asm LEVEL 3 PASS 3
      0  2671					      include	"titlescreen/asm/score_kernel.asm"
      1  2671							; The batari Basic score kernel
      2  2671							; This minikernel is not under the same license as the rest of the
      3  2671							; titlescreen code. Refer to the bB license before you use this in
      4  2671							; a non-bB program.
      5  2671
      6  2671				   draw_score_display
      7  2671
      8  2671		       a7 93		      lax	score+0
      9  2673		       20 43 b7 	      jsr	miniscorepointerset
     10  2676		       84 9e		      sty	scorepointers+8
     11  2678		       86 96		      stx	scorepointers+0
     12  267a		       a7 94		      lax	score+1
     13  267c		       20 43 b7 	      jsr	miniscorepointerset
     14  267f		       84 9a		      sty	scorepointers+4
     15  2681		       86 9c		      stx	scorepointers+6
     16  2683		       a7 95		      lax	score+2
     17  2685		       20 43 b7 	      jsr	miniscorepointerset
     18  2688		       84 a0		      sty	scorepointers+10
     19  268a		       86 98		      stx	scorepointers+2
     20  268c
     21  268c		       85 2b		      sta	HMCLR
     22  268e		       ba		      tsx
     23  268f		       86 f6		      stx	stack1
     24  2691							;ldx #$20
     25  2691		       a2 60		      ldx	#$60
     26  2693		       86 20		      stx	HMP0
     27  2695
     28  2695		       a2 00		      ldx	#0
     29  2697		       85 02		      sta	WSYNC	;   0
     30  2699		       86 1b		      STx	GRP0	; 3 3
     31  269b		       86 1c		      STx	GRP1	; 3 6 seems to be needed because of vdel
     32  269d
      0  269d					      sleep	7	; 7 13
      1  269d				   .CYCLES    SET	7
      2  269d
      3  269d				  -	      IF	.CYCLES < 2
      4  269d				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  269d				  -	      ERR
      6  269d					      ENDIF
      7  269d
      8  269d					      IF	.CYCLES & 1
      9  269d					      IFNCONST	NO_ILLEGAL_OPCODES
     10  269d		       04 00		      nop	0
     11  269f				  -	      ELSE
     12  269f				  -	      bit	VSYNC
     13  269f					      ENDIF
     14  269f				   .CYCLES    SET	.CYCLES - 3
     15  269f					      ENDIF
     16  269f
     17  269f					      REPEAT	.CYCLES / 2
     18  269f		       ea		      nop
     17  269f					      REPEND
     18  26a0		       ea		      nop
     19  26a1					      REPEND
     34  26a1
     35  26a1		       a9 bb		      lda	#>miniscoretable	; 2 15
     36  26a3		       95 97		      sta	scorepointers+1,x	; 4 19
     37  26a5		       95 99		      sta	scorepointers+3,x	; 4 23
     38  26a7		       95 9b		      sta	scorepointers+5,x	; 4 27
     39  26a9		       95 9d		      sta	scorepointers+7,x	; 4 31
     40  26ab		       95 9f		      sta	scorepointers+9,x	; 4 35
     41  26ad		       95 a1		      sta	scorepointers+11,x	; 4 39
     42  26af
     43  26af		       a0 07		      LDY	#7	; 2 41
     44  26b1		       85 10		      STA	RESP0	; 3 44
     45  26b3		       85 11		      STA	RESP1	; 3 47
     46  26b5
     47  26b5		       a9 03		      LDA	#$03	; 2 49
     48  26b7		       85 04		      STA	NUSIZ0	; 3 52
     49  26b9		       95 05		      STA	NUSIZ1,x	; 4 56
     50  26bb		       85 25		      STA	VDELP0	; 3 59
     51  26bd		       85 26		      STA	VDELP1	; 3 62
     52  26bf							;LDA #$30		; 2 64
     53  26bf		       a9 70		      LDA	#$70	; 2 64
     54  26c1		       85 21		      STA	HMP1	; 3 67
     55  26c3		       a5 a3		      LDA	scorecolor	; 3 70
     56  26c5		       85 2a		      STA	HMOVE	; cycle 73 ?
     57  26c7				  -	      ifconst	score_kernel_fade
     58  26c7				  -	      and	score_kernel_fade
     59  26c7					      endif
     60  26c7
     61  26c7		       85 06		      STA	COLUP0
     62  26c9		       85 07		      STA	COLUP1
     63  26cb				  -	      ifconst	scorefade
     64  26cb				  -	      STA	stack2	; scorefade
     65  26cb					      endif
     66  26cb		       b1 96		      lda	(scorepointers),y
     67  26cd		       85 1b		      sta	GRP0
     68  26cf		       b1 9e		      lda	(scorepointers+8),y
     69  26d1		       85 02		      sta	WSYNC
      0  26d3					      sleep	2
      1  26d3				   .CYCLES    SET	2
      2  26d3
      3  26d3				  -	      IF	.CYCLES < 2
      4  26d3				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  26d3				  -	      ERR
      6  26d3					      ENDIF
      7  26d3
      8  26d3				  -	      IF	.CYCLES & 1
      9  26d3				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  26d3				  -	      nop	0
     11  26d3				  -	      ELSE
     12  26d3				  -	      bit	VSYNC
     13  26d3				  -	      ENDIF
     14  26d3				  -.CYCLES    SET	.CYCLES - 3
     15  26d3					      ENDIF
     16  26d3
     17  26d3					      REPEAT	.CYCLES / 2
     18  26d3		       ea		      nop
     19  26d4					      REPEND
     71  26d4		       4c 0b b7 	      jmp	beginscoreloop
     72  26d7
     73  26d7					      if	((<*)>$28)
     74  2700		       00 00 00 00*	      align	256	; kludge that potentially wastes space!  should be fixed!
     75  2700					      endif
     76  2700
     77  2700				   scoreloop2
     78  2700				  -	      ifconst	scorefade
     79  2700				  -	      lda	stack2
     80  2700				  -	      sta	COLUP0
     81  2700				  -	      sta	COLUP1
     82  2700					      else
      0  2700					      sleep	9
      1  2700				   .CYCLES    SET	9
      2  2700
      3  2700				  -	      IF	.CYCLES < 2
      4  2700				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  2700				  -	      ERR
      6  2700					      ENDIF
      7  2700
      8  2700					      IF	.CYCLES & 1
      9  2700					      IFNCONST	NO_ILLEGAL_OPCODES
     10  2700		       04 00		      nop	0
     11  2702				  -	      ELSE
     12  2702				  -	      bit	VSYNC
     13  2702					      ENDIF
     14  2702				   .CYCLES    SET	.CYCLES - 3
     15  2702					      ENDIF
     16  2702
     17  2702					      REPEAT	.CYCLES / 2
     18  2702		       ea		      nop
     17  2702					      REPEND
     18  2703		       ea		      nop
     17  2703					      REPEND
     18  2704		       ea		      nop
     19  2705					      REPEND
     84  2705					      endif
     85  2705		       b1 96		      lda	(scorepointers),y	;+5  68  204
     86  2707		       85 1b		      sta	GRP0	;+3  71  213	   D1	  --	  --	 --
     87  2709		       b1 9e		      lda	(scorepointers+$8),y	;+5   5   15
     88  270b							; cycle 0
     89  270b				   beginscoreloop
     90  270b		       85 1c		      sta	GRP1	;+3   8   24	   D1	  D1	  D2	 --
     91  270d		       b1 9c		      lda	(scorepointers+$6),y	;+5  13   39
     92  270f		       85 1b		      sta	GRP0	;+3  16   48	   D3	  D1	  D2	 D2
     93  2711		       b3 98		      lax	(scorepointers+$2),y	;+5  29   87
     94  2713		       9a		      txs
     95  2714		       b3 9a		      lax	(scorepointers+$4),y	;+5  36  108
     96  2716
     97  2716				  -	      ifconst	scorefade
     98  2716				  -	      dec	stack2
     99  2716					      else
      0  2716					      sleep	5
      1  2716				   .CYCLES    SET	5
      2  2716
      3  2716				  -	      IF	.CYCLES < 2
      4  2716				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  2716				  -	      ERR
      6  2716					      ENDIF
      7  2716
      8  2716					      IF	.CYCLES & 1
      9  2716					      IFNCONST	NO_ILLEGAL_OPCODES
     10  2716		       04 00		      nop	0
     11  2718				  -	      ELSE
     12  2718				  -	      bit	VSYNC
     13  2718					      ENDIF
     14  2718				   .CYCLES    SET	.CYCLES - 3
     15  2718					      ENDIF
     16  2718
     17  2718					      REPEAT	.CYCLES / 2
     18  2718		       ea		      nop
     19  2719					      REPEND
    101  2719					      endif
      0  2719					      sleep	2
      1  2719				   .CYCLES    SET	2
      2  2719
      3  2719				  -	      IF	.CYCLES < 2
      4  2719				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  2719				  -	      ERR
      6  2719					      ENDIF
      7  2719
      8  2719				  -	      IF	.CYCLES & 1
      9  2719				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  2719				  -	      nop	0
     11  2719				  -	      ELSE
     12  2719				  -	      bit	VSYNC
     13  2719				  -	      ENDIF
     14  2719				  -.CYCLES    SET	.CYCLES - 3
     15  2719					      ENDIF
     16  2719
     17  2719					      REPEAT	.CYCLES / 2
     18  2719		       ea		      nop
     19  271a					      REPEND
    103  271a
    104  271a		       b1 a0		      lda	(scorepointers+$A),y	;+5  21   63 DIGIT 6
    105  271c		       86 1c		      stx	GRP1	;+3  44  132	   D3	  D3	  D4	 D2!
    106  271e		       ba		      tsx
    107  271f		       86 1b		      stx	GRP0	;+3  47  141	   D5	  D3!	  D4	 D4
    108  2721		       85 1c		      sta	GRP1	;+3  50  150	   D5	  D5	  D6	 D4!
    109  2723
    110  2723		       84 1b		      sty	GRP0	;+3  53  159	   D4*	  D5!	  D6	 D6
    111  2725		       88		      dey
    112  2726		       10 d8		      bpl	scoreloop2	;+2  60  180
    113  2728				   scoreloop2end
    114  2728
    115  2728							;echo "critical size: ",(scoreloop2end-scoreloop2)
    116  2728
    117  2728
    118  2728		       a6 f6		      ldx	stack1
    119  272a		       9a		      txs
    120  272b
    121  272b		       a9 00		      LDA	#0
    122  272d		       85 0e		      sta	PF1
    123  272f		       85 1b		      STA	GRP0
    124  2731		       85 1c		      STA	GRP1
    125  2733		       85 25		      STA	VDELP0
    126  2735		       85 26		      STA	VDELP1
    127  2737		       85 04		      STA	NUSIZ0
    128  2739		       85 05		      STA	NUSIZ1
    129  273b
    130  273b							; clear out the score pointers in case they're stolen DPC variables...
    131  273b		       a2 0b		      ldx	#11
    132  273d				   clearscoreploop
    133  273d		       95 96		      sta	scorepointers,x
    134  273f		       ca		      dex
    135  2740		       10 fb		      bpl	clearscoreploop
    136  2742
    137  2742
    138  2742							;;ldy temp3
    139  2742							;ldy scorepointers+8
    140  2742							;sty scorepointers+3
    141  2742
    142  2742							;;ldy temp5
    143  2742							;ldy scorepointers+10
    144  2742							;sty scorepointers+5
    145  2742		       60		      rts
    146  2743
    147  2743				   miniscorepointerset
    148  2743		       29 0f		      and	#$0F
    149  2745		       0a		      asl
    150  2746		       0a		      asl
    151  2747		       0a		      asl
    152  2748		       69 3d		      adc	#<miniscoretable
    153  274a		       a8		      tay
    154  274b		       8a		      txa
    155  274c		       29 f0		      and	#$F0
    156  274e		       4a		      lsr
    157  274f		       69 3d		      adc	#<miniscoretable
    158  2751		       aa		      tax
    159  2752		       60		      rts
    160  2753
------- FILE titlescreen/asm/titlescreen.asm
    181  2753					      endif		;mk_score_on
    182  2753
    183  2753					      ifconst	mk_gameselect_on
------- FILE titlescreen/asm/gameselect_kernel.asm LEVEL 3 PASS 3
      0  2753					      include	"titlescreen/asm/gameselect_kernel.asm"
      1  2753
      2  2753				   draw_gameselect_display
      3  2753		       a9 00		      lda	#0
      4  2755		       85 1b		      sta	GRP0
      5  2757		       85 1c		      sta	GRP1
      6  2759
      7  2759		       a0 04		      ldy	#4
      8  275b		       84 f1		      sty	aux2
      9  275d
     10  275d		       ad 8d bb 	      lda	bmp_gameselect_color
     11  2760		       85 06		      sta	COLUP0
     12  2762		       85 07		      sta	COLUP1
     13  2764
     14  2764							;change gamenumber to a BCD number and stick it in temp5
     15  2764		       a5 a6		      lda	gamenumber
     16  2766		       85 9e		      sta	temp3
     17  2768		       a9 00		      lda	#0
     18  276a		       85 9f		      sta	temp4
     19  276c		       a2 08		      ldx	#8
     20  276e		       18		      clc
     21  276f		       f8		      sed
     22  2770				   converttobcd
     23  2770		       06 9e		      asl	temp3
     24  2772		       a5 9f		      lda	temp4
     25  2774		       65 9f		      adc	temp4
     26  2776		       85 9f		      sta	temp4
     27  2778		       ca		      dex
     28  2779		       d0 f5		      bne	converttobcd
     29  277b		       d8		      cld
     30  277c
     31  277c		       a5 9f		      lda	temp4
     32  277e		       29 0f		      and	#$0f
     33  2780		       85 9e		      sta	temp3
     34  2782		       0a		      asl
     35  2783		       0a		      asl
     36  2784		       18		      clc
     37  2785		       65 9e		      adc	temp3	; *5
     38  2787		       18		      clc
     39  2788		       69 a2		      adc	#<(font_gameselect_img)
     40  278a		       85 a0		      sta	scorepointers+10
     41  278c
     42  278c		       a5 9f		      lda	temp4
     43  278e		       29 f0		      and	#$f0
     44  2790		       4a		      lsr
     45  2791		       4a		      lsr
     46  2792		       85 9e		      sta	temp3
     47  2794		       4a		      lsr
     48  2795		       4a		      lsr
     49  2796		       18		      clc
     50  2797		       65 9e		      adc	temp3	; *5
     51  2799		       18		      clc
     52  279a		       69 a2		      adc	#<(font_gameselect_img)
     53  279c		       85 9e		      sta	scorepointers+8
     54  279e
     55  279e
     56  279e							;setup score pointers to point at my bitmap slices instead
     57  279e		       a9 8e		      lda	#<(bmp_gameselect_CHAR0)
     58  27a0		       85 96		      sta	scorepointers+0
     59  27a2		       a9 bb		      lda	#>(bmp_gameselect_CHAR0)
     60  27a4		       85 97		      sta	scorepointers+1
     61  27a6		       a9 93		      lda	#<(bmp_gameselect_CHAR1)
     62  27a8		       85 98		      sta	scorepointers+2
     63  27aa		       a9 bb		      lda	#>(bmp_gameselect_CHAR1)
     64  27ac		       85 99		      sta	scorepointers+3
     65  27ae		       a9 98		      lda	#<(bmp_gameselect_CHAR2)
     66  27b0		       85 9a		      sta	scorepointers+4
     67  27b2		       a9 bb		      lda	#>(bmp_gameselect_CHAR2)
     68  27b4		       85 9b		      sta	scorepointers+5
     69  27b6		       a9 9d		      lda	#<(bmp_gameselect_CHAR3)
     70  27b8		       85 9c		      sta	scorepointers+6
     71  27ba		       a9 bb		      lda	#>(bmp_gameselect_CHAR3)
     72  27bc		       85 9d		      sta	scorepointers+7
     73  27be
     74  27be		       a9 bb		      lda	#>(font_gameselect_img)
     75  27c0		       85 9f		      sta	scorepointers+9
     76  27c2
     77  27c2		       a9 bb		      lda	#>(font_gameselect_img)
     78  27c4		       85 a1		      sta	scorepointers+11
     79  27c6
     80  27c6		       4c b0 b3 	      jmp	draw_bmp_48x1_X
------- FILE titlescreen/asm/titlescreen.asm
    185  27c9					      endif		;mk_gameselect_on
    186  27c9
    187  27c9				   PFWAIT
    188  27c9		       ad 84 02 	      lda	INTIM
    189  27cc		       d0 fb		      bne	PFWAIT
    190  27ce		       85 02		      sta	WSYNC
    191  27d0
    192  27d0				   OVERSCAN
    193  27d0					      ifnconst	overscan_time
    194  27d0		       a9 a2		      lda	#34+128
    195  27d2				  -	      else
    196  27d2				  -	      lda	#overscan_time+128-5
    197  27d2					      endif
    198  27d2		       8d 96 02 	      sta	TIM64T
    199  27d5
    200  27d5							;fix height variables we borrowed, so DPC doesn't crash on drawscreen...
    201  27d5				  -	      ifconst	player9height
    202  27d5				  -	      ldy	#8
    203  27d5				  -	      lda	#0
    204  27d5				  -	      sta	player0height
    205  27d5				  -.playerheightfixloop
    206  27d5				  -	      sta	player1height,y
    207  27d5				  -	      ifconst	_NUSIZ1
    208  27d5				  -	      sta	_NUSIZ1,y
    209  27d5				  -	      endif
    210  27d5				  -	      dey
    211  27d5				  -	      bpl	.playerheightfixloop
    212  27d5					      endif
    213  27d5
    214  27d5		       a9 c2		      lda	#%11000010
    215  27d7		       85 02		      sta	WSYNC
    216  27d9		       85 01		      sta	VBLANK
      0  27db					      RETURN
      1  27db				  -	      ifnconst	bankswitch
      2  27db				  -	      rts
      3  27db					      else
      4  27db		       4c da ff 	      jmp	BS_return
      5  27de					      endif
    218  27de
    219  27de				  -	      ifconst	mk_48x1_1_on
    220  27de				  -	      include	"titlescreen/48x1_1_image.asm"
    221  27de					      endif
    222  27de				  -	      ifconst	mk_48x1_2_on
    223  27de				  -	      include	"titlescreen/48x1_2_image.asm"
    224  27de					      endif
    225  27de				  -	      ifconst	mk_48x1_3_on
    226  27de				  -	      include	"titlescreen/48x1_3_image.asm"
    227  27de					      endif
    228  27de				  -	      ifconst	mk_48x1_4_on
    229  27de				  -	      include	"titlescreen/48x1_4_image.asm"
    230  27de					      endif
    231  27de				  -	      ifconst	mk_48x1_5_on
    232  27de				  -	      include	"titlescreen/48x1_5_image.asm"
    233  27de					      endif
    234  27de				  -	      ifconst	mk_48x1_6_on
    235  27de				  -	      include	"titlescreen/48x1_6_image.asm"
    236  27de					      endif
    237  27de				  -	      ifconst	mk_48x1_7_on
    238  27de				  -	      include	"titlescreen/48x1_7_image.asm"
    239  27de					      endif
    240  27de				  -	      ifconst	mk_48x1_8_on
    241  27de				  -	      include	"titlescreen/48x1_8_image.asm"
    242  27de					      endif
    243  27de
    244  27de
    245  27de					      ifconst	mk_48x2_1_on
------- FILE titlescreen/48x2_1_image.asm LEVEL 3 PASS 3
      0  27de					      include	"titlescreen/48x2_1_image.asm"
      1  27de
      2  27de							;*** The height of the displayed data...
      3  27de		       00 05	   bmp_48x2_1_window =	5
      4  27de
      5  27de							;*** The height of the bitmap data. This can be larger than
      6  27de							;*** the displayed data height, if you're scrolling or animating
      7  27de							;*** the data...
      8  27de		       00 05	   bmp_48x2_1_height =	5
      9  27de
     10  27de				  -	      if	>. != >[.+(bmp_48x2_1_height)]
     11  27de				  -	      align	256
     12  27de					      endif
     13  27de		       00		      BYTE.b	0	; leave this here!
     14  27df
     15  27df
     16  27df							;*** The color of each line in the bitmap, in reverse order...
     17  27df				   bmp_48x2_1_colors
     18  27df		       84		      BYTE.b	_84
     19  27e0		       88		      BYTE.b	_88
     20  27e1		       48		      BYTE.b	_48
     21  27e2		       46		      BYTE.b	_46
     22  27e3		       44		      BYTE.b	_44
     23  27e4
     24  27e4				  -	      ifnconst	bmp_48x2_1_PF1
     25  27e4				  -bmp_48x2_1_PF1
     26  27e4					      endif
     27  27e4		       00		      BYTE.b	%00000000
     28  27e5				  -	      ifnconst	bmp_48x2_1_PF2
     29  27e5				  -bmp_48x2_1_PF2
     30  27e5					      endif
     31  27e5		       00		      BYTE.b	%00000000
     32  27e6				  -	      ifnconst	bmp_48x2_1_background
     33  27e6				  -bmp_48x2_1_background
     34  27e6					      endif
     35  27e6		       c2		      BYTE.b	$c2
     36  27e7
     37  27e7				  -	      if	>. != >[.+bmp_48x2_1_height]
     38  27e7				  -	      align	256
     39  27e7					      endif
     40  27e7
     41  27e7
     42  27e7				   bmp_48x2_1_00
     43  27e7		       ee		      BYTE.b	%11101110
     44  27e8		       88		      BYTE.b	%10001000
     45  27e9		       8c		      BYTE.b	%10001100
     46  27ea		       88		      BYTE.b	%10001000
     47  27eb		       8e		      BYTE.b	%10001110
     48  27ec		       88		      BYTE.b	%10001000
     49  27ed
     50  27ed				  -	      if	>. != >[.+(bmp_48x2_1_height)]
     51  27ed				  -	      align	256
     52  27ed					      endif
     53  27ed
     54  27ed				   bmp_48x2_1_01
     55  27ed		       4e		      BYTE.b	%01001110
     56  27ee		       48		      BYTE.b	%01001000
     57  27ef		       ac		      BYTE.b	%10101100
     58  27f0		       a8		      BYTE.b	%10101000
     59  27f1		       ae		      BYTE.b	%10101110
     60  27f2		       48		      BYTE.b	%01001000
     61  27f3
     62  27f3				  -	      if	>. != >[.+(bmp_48x2_1_height)]
     63  27f3				  -	      align	256
     64  27f3					      endif
     65  27f3
     66  27f3				   bmp_48x2_1_02
     67  27f3		       e0		      BYTE.b	%11100000
     68  27f4		       80		      BYTE.b	%10000000
     69  27f5		       80		      BYTE.b	%10000000
     70  27f6		       80		      BYTE.b	%10000000
     71  27f7		       80		      BYTE.b	%10000000
     72  27f8		       80		      BYTE.b	%10000000
     73  27f9
     74  27f9				  -	      if	>. != >[.+(bmp_48x2_1_height)]
     75  27f9				  -	      align	256
     76  27f9					      endif
     77  27f9
     78  27f9				   bmp_48x2_1_03
     79  27f9		       00		      BYTE.b	%00000000
     80  27fa		       00		      BYTE.b	%00000000
     81  27fb		       00		      BYTE.b	%00000000
     82  27fc		       00		      BYTE.b	%00000000
     83  27fd		       00		      BYTE.b	%00000000
     84  27fe		       00		      BYTE.b	%00000000
     85  27ff
     86  27ff					      if	>. != >[.+(bmp_48x2_1_height)]
     87  2800		       00		      align	256
     88  2800					      endif
     89  2800
     90  2800				   bmp_48x2_1_04
     91  2800		       00		      BYTE.b	%00000000
     92  2801		       00		      BYTE.b	%00000000
     93  2802		       00		      BYTE.b	%00000000
     94  2803		       00		      BYTE.b	%00000000
     95  2804		       00		      BYTE.b	%00000000
     96  2805		       00		      BYTE.b	%00000000
     97  2806
     98  2806				  -	      if	>. != >[.+(bmp_48x2_1_height)]
     99  2806				  -	      align	256
    100  2806					      endif
    101  2806
    102  2806				   bmp_48x2_1_05
    103  2806		       00		      BYTE.b	%00000000
    104  2807		       00		      BYTE.b	%00000000
    105  2808		       00		      BYTE.b	%00000000
    106  2809		       00		      BYTE.b	%00000000
    107  280a		       00		      BYTE.b	%00000000
    108  280b		       00		      BYTE.b	%00000000
    109  280c
------- FILE titlescreen/asm/titlescreen.asm
    247  280c					      endif
    248  280c				  -	      ifconst	mk_48x2_2_on
    249  280c				  -	      include	"titlescreen/48x2_2_image.asm"
    250  280c					      endif
    251  280c				  -	      ifconst	mk_48x2_3_on
    252  280c				  -	      include	"titlescreen/48x2_3_image.asm"
    253  280c					      endif
    254  280c				  -	      ifconst	mk_48x2_4_on
    255  280c				  -	      include	"titlescreen/48x2_4_image.asm"
    256  280c					      endif
    257  280c				  -	      ifconst	mk_48x2_5_on
    258  280c				  -	      include	"titlescreen/48x2_5_image.asm"
    259  280c					      endif
    260  280c				  -	      ifconst	mk_48x2_6_on
    261  280c				  -	      include	"titlescreen/48x2_6_image.asm"
    262  280c					      endif
    263  280c				  -	      ifconst	mk_48x2_7_on
    264  280c				  -	      include	"titlescreen/48x2_7_image.asm"
    265  280c					      endif
    266  280c
    267  280c				  -	      ifconst	mk_48x2_8_on
    268  280c				  -	      include	"titlescreen/48x2_8_image.asm"
    269  280c					      endif
    270  280c
    271  280c
    272  280c					      ifconst	mk_96x2_1_on
------- FILE titlescreen/96x2_1_image.asm LEVEL 3 PASS 3
      0  280c					      include	"titlescreen/96x2_1_image.asm"
      1  280c
      2  280c							;*** The height of the displayed data...
      3  280c		       00 3c	   bmp_96x2_1_window =	60
      4  280c
      5  280c							;*** The height of the bitmap data. This can be larger than
      6  280c							;*** the displayed data height, if you're scrolling or animating
      7  280c							;*** the data...
      8  280c		       00 3c	   bmp_96x2_1_height =	60
      9  280c
     10  280c
     11  280c				  -	      if	>. != >[.+(bmp_96x2_1_height)]
     12  280c				  -	      align	256
     13  280c					      endif
     14  280c		       00		      BYTE.b	$00	; leave this here!
     15  280d
     16  280d
     17  280d							;*** The color of each line in the bitmap, in reverse order...
     18  280d				   bmp_96x2_1_colors
     19  280d		       0e		      BYTE.b	$0E
     20  280e		       0e		      BYTE.b	$0E
     21  280f		       0e		      BYTE.b	$0E
     22  2810		       0e		      BYTE.b	$0E
     23  2811		       0e		      BYTE.b	$0E
     24  2812		       0e		      BYTE.b	$0E
     25  2813		       0e		      BYTE.b	$0E
     26  2814		       0e		      BYTE.b	$0E
     27  2815		       0e		      BYTE.b	$0E
     28  2816		       0e		      BYTE.b	$0E
     29  2817		       0e		      BYTE.b	$0E
     30  2818		       0e		      BYTE.b	$0E
     31  2819		       0e		      BYTE.b	$0E
     32  281a		       0e		      BYTE.b	$0E
     33  281b		       0e		      BYTE.b	$0E
     34  281c		       0e		      BYTE.b	$0E
     35  281d		       0e		      BYTE.b	$0E
     36  281e		       0e		      BYTE.b	$0E
     37  281f		       0e		      BYTE.b	$0E
     38  2820		       0e		      BYTE.b	$0E
     39  2821		       0e		      BYTE.b	$0E
     40  2822		       0e		      BYTE.b	$0E
     41  2823		       0e		      BYTE.b	$0E
     42  2824		       0e		      BYTE.b	$0E
     43  2825		       0e		      BYTE.b	$0E
     44  2826		       0e		      BYTE.b	$0E
     45  2827		       0e		      BYTE.b	$0E
     46  2828		       0e		      BYTE.b	$0E
     47  2829		       0e		      BYTE.b	$0E
     48  282a		       0e		      BYTE.b	$0E
     49  282b		       0e		      BYTE.b	$0E
     50  282c		       0e		      BYTE.b	$0E
     51  282d		       0e		      BYTE.b	$0E
     52  282e		       0e		      BYTE.b	$0E
     53  282f		       0e		      BYTE.b	$0E
     54  2830		       0e		      BYTE.b	$0E
     55  2831		       0e		      BYTE.b	$0E
     56  2832		       82		      BYTE.b	_82
     57  2833		       82		      BYTE.b	_82
     58  2834		       84		      BYTE.b	_84
     59  2835		       84		      BYTE.b	_84
     60  2836		       88		      BYTE.b	_88
     61  2837		       8a		      BYTE.b	_8A
     62  2838		       8c		      BYTE.b	_8C
     63  2839		       8c		      BYTE.b	_8C
     64  283a		       4a		      BYTE.b	_4A
     65  283b		       4a		      BYTE.b	_4A
     66  283c		       4a		      BYTE.b	_4A
     67  283d		       48		      BYTE.b	_48
     68  283e		       48		      BYTE.b	_48
     69  283f		       48		      BYTE.b	_48
     70  2840		       46		      BYTE.b	_46
     71  2841		       46		      BYTE.b	_46
     72  2842		       46		      BYTE.b	_46
     73  2843		       44		      BYTE.b	_44
     74  2844		       44		      BYTE.b	_44
     75  2845		       44		      BYTE.b	_44
     76  2846		       42		      BYTE.b	_42
     77  2847		       42		      BYTE.b	_42
     78  2848		       42		      BYTE.b	_42
     79  2849
     80  2849
     81  2849				  -	      if	>. != >[.+(bmp_96x2_1_height)]
     82  2849				  -	      align	256
     83  2849					      endif
     84  2849
     85  2849				   bmp_96x2_1_00
     86  2849		       00		      BYTE.b	%00000000
     87  284a		       00		      BYTE.b	%00000000
     88  284b		       00		      BYTE.b	%00000000
     89  284c		       00		      BYTE.b	%00000000
     90  284d		       00		      BYTE.b	%00000000
     91  284e		       00		      BYTE.b	%00000000
     92  284f		       00		      BYTE.b	%00000000
     93  2850		       00		      BYTE.b	%00000000
     94  2851		       00		      BYTE.b	%00000000
     95  2852		       00		      BYTE.b	%00000000
     96  2853		       00		      BYTE.b	%00000000
     97  2854		       00		      BYTE.b	%00000000
     98  2855		       00		      BYTE.b	%00000000
     99  2856		       00		      BYTE.b	%00000000
    100  2857		       00		      BYTE.b	%00000000
    101  2858		       00		      BYTE.b	%00000000
    102  2859		       00		      BYTE.b	%00000000
    103  285a		       00		      BYTE.b	%00000000
    104  285b		       00		      BYTE.b	%00000000
    105  285c		       00		      BYTE.b	%00000000
    106  285d		       00		      BYTE.b	%00000000
    107  285e		       00		      BYTE.b	%00000000
    108  285f		       00		      BYTE.b	%00000000
    109  2860		       00		      BYTE.b	%00000000
    110  2861		       00		      BYTE.b	%00000000
    111  2862		       00		      BYTE.b	%00000000
    112  2863		       00		      BYTE.b	%00000000
    113  2864		       00		      BYTE.b	%00000000
    114  2865		       00		      BYTE.b	%00000000
    115  2866		       00		      BYTE.b	%00000000
    116  2867		       00		      BYTE.b	%00000000
    117  2868		       00		      BYTE.b	%00000000
    118  2869		       00		      BYTE.b	%00000000
    119  286a		       00		      BYTE.b	%00000000
    120  286b		       00		      BYTE.b	%00000000
    121  286c		       00		      BYTE.b	%00000000
    122  286d		       00		      BYTE.b	%00000000
    123  286e		       00		      BYTE.b	%00000000
    124  286f		       00		      BYTE.b	%00000000
    125  2870		       00		      BYTE.b	%00000000
    126  2871		       00		      BYTE.b	%00000000
    127  2872		       00		      BYTE.b	%00000000
    128  2873		       00		      BYTE.b	%00000000
    129  2874		       00		      BYTE.b	%00000000
    130  2875		       00		      BYTE.b	%00000000
    131  2876		       00		      BYTE.b	%00000000
    132  2877		       00		      BYTE.b	%00000000
    133  2878		       00		      BYTE.b	%00000000
    134  2879		       00		      BYTE.b	%00000000
    135  287a		       00		      BYTE.b	%00000000
    136  287b		       00		      BYTE.b	%00000000
    137  287c		       00		      BYTE.b	%00000000
    138  287d		       00		      BYTE.b	%00000000
    139  287e		       00		      BYTE.b	%00000000
    140  287f		       00		      BYTE.b	%00000000
    141  2880		       00		      BYTE.b	%00000000
    142  2881		       00		      BYTE.b	%00000000
    143  2882		       00		      BYTE.b	%00000000
    144  2883		       00		      BYTE.b	%00000000
    145  2884		       00		      BYTE.b	%00000000
    146  2885
    147  2885				  -	      if	>. != >[.+(bmp_96x2_1_height)]
    148  2885				  -	      align	256
    149  2885					      endif
    150  2885
    151  2885				   bmp_96x2_1_01
    152  2885		       0d		      BYTE.b	%00001101
    153  2886		       0d		      BYTE.b	%00001101
    154  2887		       00		      BYTE.b	%00000000
    155  2888		       00		      BYTE.b	%00000000
    156  2889		       00		      BYTE.b	%00000000
    157  288a		       00		      BYTE.b	%00000000
    158  288b		       00		      BYTE.b	%00000000
    159  288c		       01		      BYTE.b	%00000001
    160  288d		       06		      BYTE.b	%00000110
    161  288e		       0e		      BYTE.b	%00001110
    162  288f		       0f		      BYTE.b	%00001111
    163  2890		       0f		      BYTE.b	%00001111
    164  2891		       0e		      BYTE.b	%00001110
    165  2892		       06		      BYTE.b	%00000110
    166  2893		       02		      BYTE.b	%00000010
    167  2894		       01		      BYTE.b	%00000001
    168  2895		       00		      BYTE.b	%00000000
    169  2896		       00		      BYTE.b	%00000000
    170  2897		       00		      BYTE.b	%00000000
    171  2898		       00		      BYTE.b	%00000000
    172  2899		       00		      BYTE.b	%00000000
    173  289a		       00		      BYTE.b	%00000000
    174  289b		       00		      BYTE.b	%00000000
    175  289c		       00		      BYTE.b	%00000000
    176  289d		       00		      BYTE.b	%00000000
    177  289e		       00		      BYTE.b	%00000000
    178  289f		       00		      BYTE.b	%00000000
    179  28a0		       00		      BYTE.b	%00000000
    180  28a1		       00		      BYTE.b	%00000000
    181  28a2		       00		      BYTE.b	%00000000
    182  28a3		       00		      BYTE.b	%00000000
    183  28a4		       00		      BYTE.b	%00000000
    184  28a5		       00		      BYTE.b	%00000000
    185  28a6		       00		      BYTE.b	%00000000
    186  28a7		       00		      BYTE.b	%00000000
    187  28a8		       1f		      BYTE.b	%00011111
    188  28a9		       00		      BYTE.b	%00000000
    189  28aa		       00		      BYTE.b	%00000000
    190  28ab		       00		      BYTE.b	%00000000
    191  28ac		       00		      BYTE.b	%00000000
    192  28ad		       01		      BYTE.b	%00000001
    193  28ae		       01		      BYTE.b	%00000001
    194  28af		       00		      BYTE.b	%00000000
    195  28b0		       01		      BYTE.b	%00000001
    196  28b1		       00		      BYTE.b	%00000000
    197  28b2		       00		      BYTE.b	%00000000
    198  28b3		       03		      BYTE.b	%00000011
    199  28b4		       03		      BYTE.b	%00000011
    200  28b5		       0f		      BYTE.b	%00001111
    201  28b6		       0f		      BYTE.b	%00001111
    202  28b7		       3c		      BYTE.b	%00111100
    203  28b8		       3c		      BYTE.b	%00111100
    204  28b9		       3c		      BYTE.b	%00111100
    205  28ba		       3c		      BYTE.b	%00111100
    206  28bb		       3c		      BYTE.b	%00111100
    207  28bc		       0f		      BYTE.b	%00001111
    208  28bd		       0f		      BYTE.b	%00001111
    209  28be		       03		      BYTE.b	%00000011
    210  28bf		       03		      BYTE.b	%00000011
    211  28c0		       00		      BYTE.b	%00000000
    212  28c1
    213  28c1				  -	      if	>. != >[.+(bmp_96x2_1_height)]
    214  28c1				  -	      align	256
    215  28c1					      endif
    216  28c1
    217  28c1				   bmp_96x2_1_02
    218  28c1		       fe		      BYTE.b	%11111110
    219  28c2		       e0		      BYTE.b	%11100000
    220  28c3		       12		      BYTE.b	%00010010
    221  28c4		       1f		      BYTE.b	%00011111
    222  28c5		       0f		      BYTE.b	%00001111
    223  28c6		       12		      BYTE.b	%00010010
    224  28c7		       60		      BYTE.b	%01100000
    225  28c8		       80		      BYTE.b	%10000000
    226  28c9		       1f		      BYTE.b	%00011111
    227  28ca		       6f		      BYTE.b	%01101111
    228  28cb		       81		      BYTE.b	%10000001
    229  28cc		       80		      BYTE.b	%10000000
    230  28cd		       00		      BYTE.b	%00000000
    231  28ce		       00		      BYTE.b	%00000000
    232  28cf		       00		      BYTE.b	%00000000
    233  28d0		       8c		      BYTE.b	%10001100
    234  28d1		       62		      BYTE.b	%01100010
    235  28d2		       11		      BYTE.b	%00010001
    236  28d3		       0c		      BYTE.b	%00001100
    237  28d4		       02		      BYTE.b	%00000010
    238  28d5		       01		      BYTE.b	%00000001
    239  28d6		       00		      BYTE.b	%00000000
    240  28d7		       00		      BYTE.b	%00000000
    241  28d8		       00		      BYTE.b	%00000000
    242  28d9		       00		      BYTE.b	%00000000
    243  28da		       00		      BYTE.b	%00000000
    244  28db		       00		      BYTE.b	%00000000
    245  28dc		       00		      BYTE.b	%00000000
    246  28dd		       00		      BYTE.b	%00000000
    247  28de		       00		      BYTE.b	%00000000
    248  28df		       00		      BYTE.b	%00000000
    249  28e0		       00		      BYTE.b	%00000000
    250  28e1		       00		      BYTE.b	%00000000
    251  28e2		       00		      BYTE.b	%00000000
    252  28e3		       00		      BYTE.b	%00000000
    253  28e4		       ff		      BYTE.b	%11111111
    254  28e5		       00		      BYTE.b	%00000000
    255  28e6		       00		      BYTE.b	%00000000
    256  28e7		       04		      BYTE.b	%00000100
    257  28e8		       f4		      BYTE.b	%11110100
    258  28e9		       37		      BYTE.b	%00110111
    259  28ea		       94		      BYTE.b	%10010100
    260  28eb		       f4		      BYTE.b	%11110100
    261  28ec		       16		      BYTE.b	%00010110
    262  28ed		       e7		      BYTE.b	%11100111
    263  28ee		       00		      BYTE.b	%00000000
    264  28ef		       fc		      BYTE.b	%11111100
    265  28f0		       fc		      BYTE.b	%11111100
    266  28f1		       0f		      BYTE.b	%00001111
    267  28f2		       0f		      BYTE.b	%00001111
    268  28f3		       00		      BYTE.b	%00000000
    269  28f4		       00		      BYTE.b	%00000000
    270  28f5		       00		      BYTE.b	%00000000
    271  28f6		       00		      BYTE.b	%00000000
    272  28f7		       00		      BYTE.b	%00000000
    273  28f8		       0f		      BYTE.b	%00001111
    274  28f9		       0f		      BYTE.b	%00001111
    275  28fa		       fc		      BYTE.b	%11111100
    276  28fb		       fc		      BYTE.b	%11111100
    277  28fc		       00		      BYTE.b	%00000000
    278  28fd
    279  28fd					      if	>. != >[.+(bmp_96x2_1_height)]
    280  2900		       00 00 00 	      align	256
    281  2900					      endif
    282  2900
    283  2900				   bmp_96x2_1_03
    284  2900		       03		      BYTE.b	%00000011
    285  2901		       0c		      BYTE.b	%00001100
    286  2902		       0c		      BYTE.b	%00001100
    287  2903		       83		      BYTE.b	%10000011
    288  2904		       f0		      BYTE.b	%11110000
    289  2905		       00		      BYTE.b	%00000000
    290  2906		       00		      BYTE.b	%00000000
    291  2907		       00		      BYTE.b	%00000000
    292  2908		       e0		      BYTE.b	%11100000
    293  2909		       ff		      BYTE.b	%11111111
    294  290a		       ff		      BYTE.b	%11111111
    295  290b		       7e		      BYTE.b	%01111110
    296  290c		       0e		      BYTE.b	%00001110
    297  290d		       0f		      BYTE.b	%00001111
    298  290e		       1f		      BYTE.b	%00011111
    299  290f		       13		      BYTE.b	%00010011
    300  2910		       0d		      BYTE.b	%00001101
    301  2911		       8c		      BYTE.b	%10001100
    302  2912		       0c		      BYTE.b	%00001100
    303  2913		       10		      BYTE.b	%00010000
    304  2914		       f0		      BYTE.b	%11110000
    305  2915		       62		      BYTE.b	%01100010
    306  2916		       11		      BYTE.b	%00010001
    307  2917		       0c		      BYTE.b	%00001100
    308  2918		       02		      BYTE.b	%00000010
    309  2919		       01		      BYTE.b	%00000001
    310  291a		       00		      BYTE.b	%00000000
    311  291b		       00		      BYTE.b	%00000000
    312  291c		       00		      BYTE.b	%00000000
    313  291d		       00		      BYTE.b	%00000000
    314  291e		       00		      BYTE.b	%00000000
    315  291f		       00		      BYTE.b	%00000000
    316  2920		       00		      BYTE.b	%00000000
    317  2921		       00		      BYTE.b	%00000000
    318  2922		       00		      BYTE.b	%00000000
    319  2923		       ff		      BYTE.b	%11111111
    320  2924		       00		      BYTE.b	%00000000
    321  2925		       00		      BYTE.b	%00000000
    322  2926		       00		      BYTE.b	%00000000
    323  2927		       0e		      BYTE.b	%00001110
    324  2928		       93		      BYTE.b	%10010011
    325  2929		       d1		      BYTE.b	%11010001
    326  292a		       51		      BYTE.b	%01010001
    327  292b		       59		      BYTE.b	%01011001
    328  292c		       8e		      BYTE.b	%10001110
    329  292d		       00		      BYTE.b	%00000000
    330  292e		       6f		      BYTE.b	%01101111
    331  292f		       6f		      BYTE.b	%01101111
    332  2930		       0f		      BYTE.b	%00001111
    333  2931		       0f		      BYTE.b	%00001111
    334  2932		       0f		      BYTE.b	%00001111
    335  2933		       0f		      BYTE.b	%00001111
    336  2934		       0f		      BYTE.b	%00001111
    337  2935		       0f		      BYTE.b	%00001111
    338  2936		       0f		      BYTE.b	%00001111
    339  2937		       03		      BYTE.b	%00000011
    340  2938		       03		      BYTE.b	%00000011
    341  2939		       00		      BYTE.b	%00000000
    342  293a		       00		      BYTE.b	%00000000
    343  293b		       00		      BYTE.b	%00000000
    344  293c
    345  293c				  -	      if	>. != >[.+(bmp_96x2_1_height)]
    346  293c				  -	      align	256
    347  293c					      endif
    348  293c
    349  293c				   bmp_96x2_1_04
    350  293c		       80		      BYTE.b	%10000000
    351  293d		       00		      BYTE.b	%00000000
    352  293e		       03		      BYTE.b	%00000011
    353  293f		       f3		      BYTE.b	%11110011
    354  2940		       00		      BYTE.b	%00000000
    355  2941		       00		      BYTE.b	%00000000
    356  2942		       00		      BYTE.b	%00000000
    357  2943		       00		      BYTE.b	%00000000
    358  2944		       02		      BYTE.b	%00000010
    359  2945		       81		      BYTE.b	%10000001
    360  2946		       92		      BYTE.b	%10010010
    361  2947		       73		      BYTE.b	%01110011
    362  2948		       73		      BYTE.b	%01110011
    363  2949		       93		      BYTE.b	%10010011
    364  294a		       83		      BYTE.b	%10000011
    365  294b		       e0		      BYTE.b	%11100000
    366  294c		       ff		      BYTE.b	%11111111
    367  294d		       1f		      BYTE.b	%00011111
    368  294e		       0f		      BYTE.b	%00001111
    369  294f		       03		      BYTE.b	%00000011
    370  2950		       02		      BYTE.b	%00000010
    371  2951		       0f		      BYTE.b	%00001111
    372  2952		       8f		      BYTE.b	%10001111
    373  2953		       0f		      BYTE.b	%00001111
    374  2954		       0f		      BYTE.b	%00001111
    375  2955		       8f		      BYTE.b	%10001111
    376  2956		       6f		      BYTE.b	%01101111
    377  2957		       0f		      BYTE.b	%00001111
    378  2958		       1f		      BYTE.b	%00011111
    379  2959		       00		      BYTE.b	%00000000
    380  295a		       03		      BYTE.b	%00000011
    381  295b		       03		      BYTE.b	%00000011
    382  295c		       01		      BYTE.b	%00000001
    383  295d		       01		      BYTE.b	%00000001
    384  295e		       00		      BYTE.b	%00000000
    385  295f		       dd		      BYTE.b	%11011101
    386  2960		       0d		      BYTE.b	%00001101
    387  2961		       00		      BYTE.b	%00000000
    388  2962		       00		      BYTE.b	%00000000
    389  2963		       38		      BYTE.b	%00111000
    390  2964		       4d		      BYTE.b	%01001101
    391  2965		       41		      BYTE.b	%01000001
    392  2966		       40		      BYTE.b	%01000000
    393  2967		       65		      BYTE.b	%01100101
    394  2968		       38		      BYTE.b	%00111000
    395  2969		       00		      BYTE.b	%00000000
    396  296a		       03		      BYTE.b	%00000011
    397  296b		       03		      BYTE.b	%00000011
    398  296c		       03		      BYTE.b	%00000011
    399  296d		       03		      BYTE.b	%00000011
    400  296e		       ff		      BYTE.b	%11111111
    401  296f		       ff		      BYTE.b	%11111111
    402  2970		       03		      BYTE.b	%00000011
    403  2971		       03		      BYTE.b	%00000011
    404  2972		       03		      BYTE.b	%00000011
    405  2973		       cf		      BYTE.b	%11001111
    406  2974		       cf		      BYTE.b	%11001111
    407  2975		       fc		      BYTE.b	%11111100
    408  2976		       fc		      BYTE.b	%11111100
    409  2977		       00		      BYTE.b	%00000000
    410  2978
    411  2978				  -	      if	>. != >[.+(bmp_96x2_1_height)]
    412  2978				  -	      align	256
    413  2978					      endif
    414  2978
    415  2978				   bmp_96x2_1_05
    416  2978		       00		      BYTE.b	%00000000
    417  2979		       00		      BYTE.b	%00000000
    418  297a		       9e		      BYTE.b	%10011110
    419  297b		       ff		      BYTE.b	%11111111
    420  297c		       00		      BYTE.b	%00000000
    421  297d		       00		      BYTE.b	%00000000
    422  297e		       00		      BYTE.b	%00000000
    423  297f		       00		      BYTE.b	%00000000
    424  2980		       6c		      BYTE.b	%01101100
    425  2981		       91		      BYTE.b	%10010001
    426  2982		       6d		      BYTE.b	%01101101
    427  2983		       fd		      BYTE.b	%11111101
    428  2984		       fd		      BYTE.b	%11111101
    429  2985		       fc		      BYTE.b	%11111100
    430  2986		       fc		      BYTE.b	%11111100
    431  2987		       01		      BYTE.b	%00000001
    432  2988		       ff		      BYTE.b	%11111111
    433  2989		       ff		      BYTE.b	%11111111
    434  298a		       ff		      BYTE.b	%11111111
    435  298b		       ff		      BYTE.b	%11111111
    436  298c		       00		      BYTE.b	%00000000
    437  298d		       fe		      BYTE.b	%11111110
    438  298e		       fe		      BYTE.b	%11111110
    439  298f		       fe		      BYTE.b	%11111110
    440  2990		       fe		      BYTE.b	%11111110
    441  2991		       fe		      BYTE.b	%11111110
    442  2992		       fe		      BYTE.b	%11111110
    443  2993		       fe		      BYTE.b	%11111110
    444  2994		       fe		      BYTE.b	%11111110
    445  2995		       00		      BYTE.b	%00000000
    446  2996		       f0		      BYTE.b	%11110000
    447  2997		       f0		      BYTE.b	%11110000
    448  2998		       e0		      BYTE.b	%11100000
    449  2999		       e0		      BYTE.b	%11100000
    450  299a		       00		      BYTE.b	%00000000
    451  299b		       f7		      BYTE.b	%11110111
    452  299c		       f6		      BYTE.b	%11110110
    453  299d		       00		      BYTE.b	%00000000
    454  299e		       00		      BYTE.b	%00000000
    455  299f		       f3		      BYTE.b	%11110011
    456  29a0		       36		      BYTE.b	%00110110
    457  29a1		       94		      BYTE.b	%10010100
    458  29a2		       f4		      BYTE.b	%11110100
    459  29a3		       14		      BYTE.b	%00010100
    460  29a4		       e2		      BYTE.b	%11100010
    461  29a5		       00		      BYTE.b	%00000000
    462  29a6		       d8		      BYTE.b	%11011000
    463  29a7		       d8		      BYTE.b	%11011000
    464  29a8		       c0		      BYTE.b	%11000000
    465  29a9		       c0		      BYTE.b	%11000000
    466  29aa		       c0		      BYTE.b	%11000000
    467  29ab		       c3		      BYTE.b	%11000011
    468  29ac		       c3		      BYTE.b	%11000011
    469  29ad		       c3		      BYTE.b	%11000011
    470  29ae		       c3		      BYTE.b	%11000011
    471  29af		       03		      BYTE.b	%00000011
    472  29b0		       03		      BYTE.b	%00000011
    473  29b1		       03		      BYTE.b	%00000011
    474  29b2		       00		      BYTE.b	%00000000
    475  29b3		       00		      BYTE.b	%00000000
    476  29b4
    477  29b4				  -	      if	>. != >[.+(bmp_96x2_1_height)]
    478  29b4				  -	      align	256
    479  29b4					      endif
    480  29b4
    481  29b4				   bmp_96x2_1_06
    482  29b4		       00		      BYTE.b	%00000000
    483  29b5		       00		      BYTE.b	%00000000
    484  29b6		       00		      BYTE.b	%00000000
    485  29b7		       e0		      BYTE.b	%11100000
    486  29b8		       10		      BYTE.b	%00010000
    487  29b9		       0c		      BYTE.b	%00001100
    488  29ba		       02		      BYTE.b	%00000010
    489  29bb		       01		      BYTE.b	%00000001
    490  29bc		       01		      BYTE.b	%00000001
    491  29bd		       90		      BYTE.b	%10010000
    492  29be		       90		      BYTE.b	%10010000
    493  29bf		       90		      BYTE.b	%10010000
    494  29c0		       8f		      BYTE.b	%10001111
    495  29c1		       10		      BYTE.b	%00010000
    496  29c2		       6f		      BYTE.b	%01101111
    497  29c3		       9f		      BYTE.b	%10011111
    498  29c4		       ff		      BYTE.b	%11111111
    499  29c5		       fe		      BYTE.b	%11111110
    500  29c6		       fd		      BYTE.b	%11111101
    501  29c7		       e1		      BYTE.b	%11100001
    502  29c8		       00		      BYTE.b	%00000000
    503  29c9		       6d		      BYTE.b	%01101101
    504  29ca		       12		      BYTE.b	%00010010
    505  29cb		       6d		      BYTE.b	%01101101
    506  29cc		       7f		      BYTE.b	%01111111
    507  29cd		       7f		      BYTE.b	%01111111
    508  29ce		       7f		      BYTE.b	%01111111
    509  29cf		       7f		      BYTE.b	%01111111
    510  29d0		       0c		      BYTE.b	%00001100
    511  29d1		       00		      BYTE.b	%00000000
    512  29d2		       00		      BYTE.b	%00000000
    513  29d3		       00		      BYTE.b	%00000000
    514  29d4		       00		      BYTE.b	%00000000
    515  29d5		       00		      BYTE.b	%00000000
    516  29d6		       00		      BYTE.b	%00000000
    517  29d7		       7f		      BYTE.b	%01111111
    518  29d8		       00		      BYTE.b	%00000000
    519  29d9		       0e		      BYTE.b	%00001110
    520  29da		       01		      BYTE.b	%00000001
    521  29db		       81		      BYTE.b	%10000001
    522  29dc		       4f		      BYTE.b	%01001111
    523  29dd		       1b		      BYTE.b	%00011011
    524  29de		       11		      BYTE.b	%00010001
    525  29df		       11		      BYTE.b	%00010001
    526  29e0		       00		      BYTE.b	%00000000
    527  29e1		       0c		      BYTE.b	%00001100
    528  29e2		       0c		      BYTE.b	%00001100
    529  29e3		       3f		      BYTE.b	%00111111
    530  29e4		       3f		      BYTE.b	%00111111
    531  29e5		       ff		      BYTE.b	%11111111
    532  29e6		       ff		      BYTE.b	%11111111
    533  29e7		       f3		      BYTE.b	%11110011
    534  29e8		       f3		      BYTE.b	%11110011
    535  29e9		       c0		      BYTE.b	%11000000
    536  29ea		       c0		      BYTE.b	%11000000
    537  29eb		       c0		      BYTE.b	%11000000
    538  29ec		       c0		      BYTE.b	%11000000
    539  29ed		       c0		      BYTE.b	%11000000
    540  29ee		       00		      BYTE.b	%00000000
    541  29ef		       00		      BYTE.b	%00000000
    542  29f0
    543  29f0					      if	>. != >[.+(bmp_96x2_1_height)]
    544  2a00		       00 00 00 00*	      align	256
    545  2a00					      endif
    546  2a00
    547  2a00				   bmp_96x2_1_07
    548  2a00		       00		      BYTE.b	%00000000
    549  2a01		       00		      BYTE.b	%00000000
    550  2a02		       00		      BYTE.b	%00000000
    551  2a03		       00		      BYTE.b	%00000000
    552  2a04		       00		      BYTE.b	%00000000
    553  2a05		       00		      BYTE.b	%00000000
    554  2a06		       00		      BYTE.b	%00000000
    555  2a07		       80		      BYTE.b	%10000000
    556  2a08		       80		      BYTE.b	%10000000
    557  2a09		       60		      BYTE.b	%01100000
    558  2a0a		       10		      BYTE.b	%00010000
    559  2a0b		       0e		      BYTE.b	%00001110
    560  2a0c		       fe		      BYTE.b	%11111110
    561  2a0d		       1f		      BYTE.b	%00011111
    562  2a0e		       f0		      BYTE.b	%11110000
    563  2a0f		       ef		      BYTE.b	%11101111
    564  2a10		       9e		      BYTE.b	%10011110
    565  2a11		       7e		      BYTE.b	%01111110
    566  2a12		       fc		      BYTE.b	%11111100
    567  2a13		       e0		      BYTE.b	%11100000
    568  2a14		       00		      BYTE.b	%00000000
    569  2a15		       80		      BYTE.b	%10000000
    570  2a16		       00		      BYTE.b	%00000000
    571  2a17		       90		      BYTE.b	%10010000
    572  2a18		       9c		      BYTE.b	%10011100
    573  2a19		       9c		      BYTE.b	%10011100
    574  2a1a		       90		      BYTE.b	%10010000
    575  2a1b		       80		      BYTE.b	%10000000
    576  2a1c		       00		      BYTE.b	%00000000
    577  2a1d		       00		      BYTE.b	%00000000
    578  2a1e		       00		      BYTE.b	%00000000
    579  2a1f		       00		      BYTE.b	%00000000
    580  2a20		       00		      BYTE.b	%00000000
    581  2a21		       00		      BYTE.b	%00000000
    582  2a22		       00		      BYTE.b	%00000000
    583  2a23		       ff		      BYTE.b	%11111111
    584  2a24		       00		      BYTE.b	%00000000
    585  2a25		       40		      BYTE.b	%01000000
    586  2a26		       41		      BYTE.b	%01000001
    587  2a27		       79		      BYTE.b	%01111001
    588  2a28		       4c		      BYTE.b	%01001100
    589  2a29		       45		      BYTE.b	%01000101
    590  2a2a		       65		      BYTE.b	%01100101
    591  2a2b		       78		      BYTE.b	%01111000
    592  2a2c		       00		      BYTE.b	%00000000
    593  2a2d		       01		      BYTE.b	%00000001
    594  2a2e		       0d		      BYTE.b	%00001101
    595  2a2f		       0d		      BYTE.b	%00001101
    596  2a30		       01		      BYTE.b	%00000001
    597  2a31		       c1		      BYTE.b	%11000001
    598  2a32		       c1		      BYTE.b	%11000001
    599  2a33		       e1		      BYTE.b	%11100001
    600  2a34		       e1		      BYTE.b	%11100001
    601  2a35		       e1		      BYTE.b	%11100001
    602  2a36		       e1		      BYTE.b	%11100001
    603  2a37		       e1		      BYTE.b	%11100001
    604  2a38		       e1		      BYTE.b	%11100001
    605  2a39		       e1		      BYTE.b	%11100001
    606  2a3a		       00		      BYTE.b	%00000000
    607  2a3b		       00		      BYTE.b	%00000000
    608  2a3c
    609  2a3c				  -	      if	>. != >[.+(bmp_96x2_1_height)]
    610  2a3c				  -	      align	256
    611  2a3c					      endif
    612  2a3c
    613  2a3c				   bmp_96x2_1_08
    614  2a3c		       00		      BYTE.b	%00000000
    615  2a3d		       00		      BYTE.b	%00000000
    616  2a3e		       00		      BYTE.b	%00000000
    617  2a3f		       00		      BYTE.b	%00000000
    618  2a40		       00		      BYTE.b	%00000000
    619  2a41		       00		      BYTE.b	%00000000
    620  2a42		       00		      BYTE.b	%00000000
    621  2a43		       00		      BYTE.b	%00000000
    622  2a44		       00		      BYTE.b	%00000000
    623  2a45		       00		      BYTE.b	%00000000
    624  2a46		       00		      BYTE.b	%00000000
    625  2a47		       7f		      BYTE.b	%01111111
    626  2a48		       00		      BYTE.b	%00000000
    627  2a49		       ff		      BYTE.b	%11111111
    628  2a4a		       00		      BYTE.b	%00000000
    629  2a4b		       fe		      BYTE.b	%11111110
    630  2a4c		       7f		      BYTE.b	%01111111
    631  2a4d		       01		      BYTE.b	%00000001
    632  2a4e		       00		      BYTE.b	%00000000
    633  2a4f		       00		      BYTE.b	%00000000
    634  2a50		       00		      BYTE.b	%00000000
    635  2a51		       00		      BYTE.b	%00000000
    636  2a52		       00		      BYTE.b	%00000000
    637  2a53		       00		      BYTE.b	%00000000
    638  2a54		       00		      BYTE.b	%00000000
    639  2a55		       00		      BYTE.b	%00000000
    640  2a56		       00		      BYTE.b	%00000000
    641  2a57		       00		      BYTE.b	%00000000
    642  2a58		       00		      BYTE.b	%00000000
    643  2a59		       00		      BYTE.b	%00000000
    644  2a5a		       00		      BYTE.b	%00000000
    645  2a5b		       00		      BYTE.b	%00000000
    646  2a5c		       00		      BYTE.b	%00000000
    647  2a5d		       00		      BYTE.b	%00000000
    648  2a5e		       00		      BYTE.b	%00000000
    649  2a5f		       ff		      BYTE.b	%11111111
    650  2a60		       00		      BYTE.b	%00000000
    651  2a61		       00		      BYTE.b	%00000000
    652  2a62		       e3		      BYTE.b	%11100011
    653  2a63		       16		      BYTE.b	%00010110
    654  2a64		       37		      BYTE.b	%00110111
    655  2a65		       e5		      BYTE.b	%11100101
    656  2a66		       14		      BYTE.b	%00010100
    657  2a67		       e3		      BYTE.b	%11100011
    658  2a68		       00		      BYTE.b	%00000000
    659  2a69		       ff		      BYTE.b	%11111111
    660  2a6a		       ff		      BYTE.b	%11111111
    661  2a6b		       e0		      BYTE.b	%11100000
    662  2a6c		       e0		      BYTE.b	%11100000
    663  2a6d		       e0		      BYTE.b	%11100000
    664  2a6e		       e0		      BYTE.b	%11100000
    665  2a6f		       ff		      BYTE.b	%11111111
    666  2a70		       ff		      BYTE.b	%11111111
    667  2a71		       e0		      BYTE.b	%11100000
    668  2a72		       e0		      BYTE.b	%11100000
    669  2a73		       e0		      BYTE.b	%11100000
    670  2a74		       ff		      BYTE.b	%11111111
    671  2a75		       ff		      BYTE.b	%11111111
    672  2a76		       00		      BYTE.b	%00000000
    673  2a77		       00		      BYTE.b	%00000000
    674  2a78
    675  2a78				  -	      if	>. != >[.+(bmp_96x2_1_height)]
    676  2a78				  -	      align	256
    677  2a78					      endif
    678  2a78
    679  2a78				   bmp_96x2_1_09
    680  2a78		       00		      BYTE.b	%00000000
    681  2a79		       00		      BYTE.b	%00000000
    682  2a7a		       00		      BYTE.b	%00000000
    683  2a7b		       00		      BYTE.b	%00000000
    684  2a7c		       00		      BYTE.b	%00000000
    685  2a7d		       00		      BYTE.b	%00000000
    686  2a7e		       00		      BYTE.b	%00000000
    687  2a7f		       00		      BYTE.b	%00000000
    688  2a80		       7c		      BYTE.b	%01111100
    689  2a81		       7c		      BYTE.b	%01111100
    690  2a82		       7e		      BYTE.b	%01111110
    691  2a83		       ff		      BYTE.b	%11111111
    692  2a84		       0f		      BYTE.b	%00001111
    693  2a85		       e0		      BYTE.b	%11100000
    694  2a86		       0c		      BYTE.b	%00001100
    695  2a87		       0c		      BYTE.b	%00001100
    696  2a88		       82		      BYTE.b	%10000010
    697  2a89		       81		      BYTE.b	%10000001
    698  2a8a		       61		      BYTE.b	%01100001
    699  2a8b		       10		      BYTE.b	%00010000
    700  2a8c		       0d		      BYTE.b	%00001101
    701  2a8d		       0d		      BYTE.b	%00001101
    702  2a8e		       01		      BYTE.b	%00000001
    703  2a8f		       03		      BYTE.b	%00000011
    704  2a90		       03		      BYTE.b	%00000011
    705  2a91		       01		      BYTE.b	%00000001
    706  2a92		       01		      BYTE.b	%00000001
    707  2a93		       01		      BYTE.b	%00000001
    708  2a94		       01		      BYTE.b	%00000001
    709  2a95		       01		      BYTE.b	%00000001
    710  2a96		       00		      BYTE.b	%00000000
    711  2a97		       00		      BYTE.b	%00000000
    712  2a98		       00		      BYTE.b	%00000000
    713  2a99		       00		      BYTE.b	%00000000
    714  2a9a		       00		      BYTE.b	%00000000
    715  2a9b		       e0		      BYTE.b	%11100000
    716  2a9c		       00		      BYTE.b	%00000000
    717  2a9d		       00		      BYTE.b	%00000000
    718  2a9e		       80		      BYTE.b	%10000000
    719  2a9f		       c0		      BYTE.b	%11000000
    720  2aa0		       20		      BYTE.b	%00100000
    721  2aa1		       80		      BYTE.b	%10000000
    722  2aa2		       c0		      BYTE.b	%11000000
    723  2aa3		       80		      BYTE.b	%10000000
    724  2aa4		       00		      BYTE.b	%00000000
    725  2aa5		       f8		      BYTE.b	%11111000
    726  2aa6		       fb		      BYTE.b	%11111011
    727  2aa7		       03		      BYTE.b	%00000011
    728  2aa8		       00		      BYTE.b	%00000000
    729  2aa9		       00		      BYTE.b	%00000000
    730  2aaa		       00		      BYTE.b	%00000000
    731  2aab		       80		      BYTE.b	%10000000
    732  2aac		       80		      BYTE.b	%10000000
    733  2aad		       00		      BYTE.b	%00000000
    734  2aae		       00		      BYTE.b	%00000000
    735  2aaf		       00		      BYTE.b	%00000000
    736  2ab0		       f8		      BYTE.b	%11111000
    737  2ab1		       f8		      BYTE.b	%11111000
    738  2ab2		       00		      BYTE.b	%00000000
    739  2ab3		       00		      BYTE.b	%00000000
    740  2ab4
    741  2ab4				  -	      if	>. != >[.+(bmp_96x2_1_height)]
    742  2ab4				  -	      align	256
    743  2ab4					      endif
    744  2ab4
    745  2ab4				   bmp_96x2_1_10
    746  2ab4		       00		      BYTE.b	%00000000
    747  2ab5		       00		      BYTE.b	%00000000
    748  2ab6		       00		      BYTE.b	%00000000
    749  2ab7		       00		      BYTE.b	%00000000
    750  2ab8		       00		      BYTE.b	%00000000
    751  2ab9		       00		      BYTE.b	%00000000
    752  2aba		       00		      BYTE.b	%00000000
    753  2abb		       00		      BYTE.b	%00000000
    754  2abc		       00		      BYTE.b	%00000000
    755  2abd		       00		      BYTE.b	%00000000
    756  2abe		       00		      BYTE.b	%00000000
    757  2abf		       80		      BYTE.b	%10000000
    758  2ac0		       e0		      BYTE.b	%11100000
    759  2ac1		       70		      BYTE.b	%01110000
    760  2ac2		       1e		      BYTE.b	%00011110
    761  2ac3		       0e		      BYTE.b	%00001110
    762  2ac4		       0e		      BYTE.b	%00001110
    763  2ac5		       8c		      BYTE.b	%10001100
    764  2ac6		       90		      BYTE.b	%10010000
    765  2ac7		       70		      BYTE.b	%01110000
    766  2ac8		       f0		      BYTE.b	%11110000
    767  2ac9		       f0		      BYTE.b	%11110000
    768  2aca		       f0		      BYTE.b	%11110000
    769  2acb		       f0		      BYTE.b	%11110000
    770  2acc		       f0		      BYTE.b	%11110000
    771  2acd		       f0		      BYTE.b	%11110000
    772  2ace		       f0		      BYTE.b	%11110000
    773  2acf		       fc		      BYTE.b	%11111100
    774  2ad0		       fc		      BYTE.b	%11111100
    775  2ad1		       fc		      BYTE.b	%11111100
    776  2ad2		       7c		      BYTE.b	%01111100
    777  2ad3		       7c		      BYTE.b	%01111100
    778  2ad4		       7e		      BYTE.b	%01111110
    779  2ad5		       1e		      BYTE.b	%00011110
    780  2ad6		       00		      BYTE.b	%00000000
    781  2ad7		       00		      BYTE.b	%00000000
    782  2ad8		       00		      BYTE.b	%00000000
    783  2ad9		       00		      BYTE.b	%00000000
    784  2ada		       00		      BYTE.b	%00000000
    785  2adb		       00		      BYTE.b	%00000000
    786  2adc		       00		      BYTE.b	%00000000
    787  2add		       00		      BYTE.b	%00000000
    788  2ade		       00		      BYTE.b	%00000000
    789  2adf		       00		      BYTE.b	%00000000
    790  2ae0		       00		      BYTE.b	%00000000
    791  2ae1		       00		      BYTE.b	%00000000
    792  2ae2		       00		      BYTE.b	%00000000
    793  2ae3		       00		      BYTE.b	%00000000
    794  2ae4		       00		      BYTE.b	%00000000
    795  2ae5		       00		      BYTE.b	%00000000
    796  2ae6		       00		      BYTE.b	%00000000
    797  2ae7		       00		      BYTE.b	%00000000
    798  2ae8		       00		      BYTE.b	%00000000
    799  2ae9		       00		      BYTE.b	%00000000
    800  2aea		       00		      BYTE.b	%00000000
    801  2aeb		       00		      BYTE.b	%00000000
    802  2aec		       00		      BYTE.b	%00000000
    803  2aed		       00		      BYTE.b	%00000000
    804  2aee		       00		      BYTE.b	%00000000
    805  2aef		       00		      BYTE.b	%00000000
    806  2af0
    807  2af0					      if	>. != >[.+(bmp_96x2_1_height)]
    808  2b00		       00 00 00 00*	      align	256
    809  2b00					      endif
    810  2b00
    811  2b00				   bmp_96x2_1_11
    812  2b00		       00		      BYTE.b	%00000000
    813  2b01		       00		      BYTE.b	%00000000
    814  2b02		       00		      BYTE.b	%00000000
    815  2b03		       00		      BYTE.b	%00000000
    816  2b04		       00		      BYTE.b	%00000000
    817  2b05		       00		      BYTE.b	%00000000
    818  2b06		       00		      BYTE.b	%00000000
    819  2b07		       00		      BYTE.b	%00000000
    820  2b08		       00		      BYTE.b	%00000000
    821  2b09		       00		      BYTE.b	%00000000
    822  2b0a		       00		      BYTE.b	%00000000
    823  2b0b		       00		      BYTE.b	%00000000
    824  2b0c		       00		      BYTE.b	%00000000
    825  2b0d		       00		      BYTE.b	%00000000
    826  2b0e		       00		      BYTE.b	%00000000
    827  2b0f		       00		      BYTE.b	%00000000
    828  2b10		       00		      BYTE.b	%00000000
    829  2b11		       00		      BYTE.b	%00000000
    830  2b12		       00		      BYTE.b	%00000000
    831  2b13		       00		      BYTE.b	%00000000
    832  2b14		       00		      BYTE.b	%00000000
    833  2b15		       00		      BYTE.b	%00000000
    834  2b16		       00		      BYTE.b	%00000000
    835  2b17		       00		      BYTE.b	%00000000
    836  2b18		       00		      BYTE.b	%00000000
    837  2b19		       00		      BYTE.b	%00000000
    838  2b1a		       00		      BYTE.b	%00000000
    839  2b1b		       00		      BYTE.b	%00000000
    840  2b1c		       00		      BYTE.b	%00000000
    841  2b1d		       00		      BYTE.b	%00000000
    842  2b1e		       00		      BYTE.b	%00000000
    843  2b1f		       00		      BYTE.b	%00000000
    844  2b20		       00		      BYTE.b	%00000000
    845  2b21		       00		      BYTE.b	%00000000
    846  2b22		       00		      BYTE.b	%00000000
    847  2b23		       00		      BYTE.b	%00000000
    848  2b24		       00		      BYTE.b	%00000000
    849  2b25		       00		      BYTE.b	%00000000
    850  2b26		       00		      BYTE.b	%00000000
    851  2b27		       00		      BYTE.b	%00000000
    852  2b28		       00		      BYTE.b	%00000000
    853  2b29		       00		      BYTE.b	%00000000
    854  2b2a		       00		      BYTE.b	%00000000
    855  2b2b		       00		      BYTE.b	%00000000
    856  2b2c		       00		      BYTE.b	%00000000
    857  2b2d		       00		      BYTE.b	%00000000
    858  2b2e		       00		      BYTE.b	%00000000
    859  2b2f		       00		      BYTE.b	%00000000
    860  2b30		       00		      BYTE.b	%00000000
    861  2b31		       00		      BYTE.b	%00000000
    862  2b32		       00		      BYTE.b	%00000000
    863  2b33		       00		      BYTE.b	%00000000
    864  2b34		       00		      BYTE.b	%00000000
    865  2b35		       00		      BYTE.b	%00000000
    866  2b36		       00		      BYTE.b	%00000000
    867  2b37		       00		      BYTE.b	%00000000
    868  2b38		       00		      BYTE.b	%00000000
    869  2b39		       00		      BYTE.b	%00000000
    870  2b3a		       00		      BYTE.b	%00000000
    871  2b3b		       00		      BYTE.b	%00000000
    872  2b3c
------- FILE titlescreen/asm/titlescreen.asm
    274  2b3c					      endif
    275  2b3c				  -	      ifconst	mk_96x2_2_on
    276  2b3c				  -	      include	"titlescreen/96x2_2_image.asm"
    277  2b3c					      endif
    278  2b3c				  -	      ifconst	mk_96x2_3_on
    279  2b3c				  -	      include	"titlescreen/96x2_3_image.asm"
    280  2b3c					      endif
    281  2b3c				  -	      ifconst	mk_96x2_4_on
    282  2b3c				  -	      include	"titlescreen/96x2_4_image.asm"
    283  2b3c					      endif
    284  2b3c				  -	      ifconst	mk_96x2_5_on
    285  2b3c				  -	      include	"titlescreen/96x2_5_image.asm"
    286  2b3c					      endif
    287  2b3c				  -	      ifconst	mk_96x2_6_on
    288  2b3c				  -	      include	"titlescreen/96x2_6_image.asm"
    289  2b3c					      endif
    290  2b3c				  -	      ifconst	mk_96x2_7_on
    291  2b3c				  -	      include	"titlescreen/96x2_7_image.asm"
    292  2b3c					      endif
    293  2b3c				  -	      ifconst	mk_96x2_8_on
    294  2b3c				  -	      include	"titlescreen/96x2_8_image.asm"
    295  2b3c					      endif
    296  2b3c
    297  2b3c				  -	      ifconst	mk_player_on
    298  2b3c				  -	      include	"titlescreen/player_image.asm"
    299  2b3c					      endif
    300  2b3c
    301  2b3c					      ifconst	mk_score_on
------- FILE titlescreen/score_image.asm LEVEL 3 PASS 3
      0  2b3c					      include	"titlescreen/score_image.asm"
      1  2b3c							; feel free to modify the score graphics - just keep each digit 8 high
      2  2b3c							; if you're looking to want to modify any one font, pick on the
      3  2b3c
      4  2b3c				  -	      ifnconst	scorecolor
      5  2b3c				  -scorecolor
      6  2b3c					      endif
      7  2b3c							; ** change this value for a different scorecolor under DPC+
      8  2b3c							;    for other kernels, just use the scorecolor variable
      9  2b3c		       0f		      .byte.b	$0f
     10  2b3d
     11  2b3d				  -	      ifnconst	NOFONT
     12  2b3d				  -NOFONT     =	0
     13  2b3d					      endif
     14  2b3d				  -	      ifnconst	STOCK
     15  2b3d				  -STOCK      =	1	;_FONTNAME
     16  2b3d					      endif
     17  2b3d				  -	      ifnconst	NEWCENTURY
     18  2b3d				  -NEWCENTURY =	2	;_FONTNAME
     19  2b3d					      endif
     20  2b3d				  -	      ifnconst	WHIMSEY
     21  2b3d				  -WHIMSEY    =	3	;_FONTNAME
     22  2b3d					      endif
     23  2b3d				  -	      ifnconst	ALARMCLOCK
     24  2b3d				  -ALARMCLOCK =	4	;_FONTNAME
     25  2b3d					      endif
     26  2b3d				  -	      ifnconst	HANDWRITTEN
     27  2b3d				  -HANDWRITTEN =	5	;_FONTNAME
     28  2b3d					      endif
     29  2b3d				  -	      ifnconst	INTERRUPTED
     30  2b3d				  -INTERRUPTED =	6	;_FONTNAME
     31  2b3d					      endif
     32  2b3d				  -	      ifnconst	TINY
     33  2b3d				  -TINY       =	7	;_FONTNAME
     34  2b3d					      endif
     35  2b3d				  -	      ifnconst	RETROPUTER
     36  2b3d				  -RETROPUTER =	8	;_FONTNAME
     37  2b3d					      endif
     38  2b3d				  -	      ifnconst	CURVES
     39  2b3d				  -CURVES     =	9	;_FONTNAME
     40  2b3d					      endif
     41  2b3d				  -	      ifnconst	HUSKY
     42  2b3d				  -HUSKY      =	10	;_FONTNAME
     43  2b3d					      endif
     44  2b3d				  -	      ifnconst	SNAKE
     45  2b3d				  -SNAKE      =	11	;_FONTNAME
     46  2b3d					      endif
     47  2b3d				  -	      ifnconst	PLOK
     48  2b3d				  -PLOK       =	13	;_FONTNAME
     49  2b3d					      endif
     50  2b3d
     51  2b3d				  -	      ifnconst	SYMBOLS
     52  2b3d				  -SYMBOLS    =	0	;_FONTNAME
     53  2b3d					      endif
     54  2b3d
     55  2b3d							; ### setup some defaults
     56  2b3d				  -	      ifnconst	fontstyle
     57  2b3d				  -fontstyle  =	STOCK
     58  2b3d					      endif
     59  2b3d
     60  2b3d							;fix up the table alignment, if necessary
     61  2b3d				  -	      if	>. != >[.+81]
     62  2b3d				  -	      align	256
     63  2b3d					      endif
     64  2b3d
     65  2b3d
     66  2b3d				   miniscoretable
     67  2b3d
     68  2b3d					      if	fontstyle == STOCK
     69  2b3d
     70  2b3d							;byte %00000000 ; STOCK
     71  2b3d
     72  2b3d		       3c		      .byte.b	%00111100	; STOCK
     73  2b3e		       66		      .byte.b	%01100110	; STOCK
     74  2b3f		       66		      .byte.b	%01100110	; STOCK
     75  2b40		       66		      .byte.b	%01100110	; STOCK
     76  2b41		       66		      .byte.b	%01100110	; STOCK
     77  2b42		       66		      .byte.b	%01100110	; STOCK
     78  2b43		       66		      .byte.b	%01100110	; STOCK
     79  2b44		       3c		      .byte.b	%00111100	; STOCK
     80  2b45
     81  2b45							;byte %00000000 ; STOCK
     82  2b45
     83  2b45		       7e		      .byte.b	%01111110	; STOCK
     84  2b46		       18		      .byte.b	%00011000	; STOCK
     85  2b47		       18		      .byte.b	%00011000	; STOCK
     86  2b48		       18		      .byte.b	%00011000	; STOCK
     87  2b49		       18		      .byte.b	%00011000	; STOCK
     88  2b4a		       38		      .byte.b	%00111000	; STOCK
     89  2b4b		       18		      .byte.b	%00011000	; STOCK
     90  2b4c		       08		      .byte.b	%00001000	; STOCK
     91  2b4d
     92  2b4d							;byte %00000000 ; STOCK
     93  2b4d
     94  2b4d		       7e		      .byte.b	%01111110	; STOCK
     95  2b4e		       60		      .byte.b	%01100000	; STOCK
     96  2b4f		       60		      .byte.b	%01100000	; STOCK
     97  2b50		       3c		      .byte.b	%00111100	; STOCK
     98  2b51		       06		      .byte.b	%00000110	; STOCK
     99  2b52		       06		      .byte.b	%00000110	; STOCK
    100  2b53		       46		      .byte.b	%01000110	; STOCK
    101  2b54		       3c		      .byte.b	%00111100	; STOCK
    102  2b55
    103  2b55							;byte %00000000 ; STOCK
    104  2b55
    105  2b55		       3c		      .byte.b	%00111100	; STOCK
    106  2b56		       46		      .byte.b	%01000110	; STOCK
    107  2b57		       06		      .byte.b	%00000110	; STOCK
    108  2b58		       06		      .byte.b	%00000110	; STOCK
    109  2b59		       1c		      .byte.b	%00011100	; STOCK
    110  2b5a		       06		      .byte.b	%00000110	; STOCK
    111  2b5b		       46		      .byte.b	%01000110	; STOCK
    112  2b5c		       3c		      .byte.b	%00111100	; STOCK
    113  2b5d
    114  2b5d							;byte %00000000 ; STOCK
    115  2b5d
    116  2b5d		       0c		      .byte.b	%00001100	; STOCK
    117  2b5e		       0c		      .byte.b	%00001100	; STOCK
    118  2b5f		       7e		      .byte.b	%01111110	; STOCK
    119  2b60		       4c		      .byte.b	%01001100	; STOCK
    120  2b61		       4c		      .byte.b	%01001100	; STOCK
    121  2b62		       2c		      .byte.b	%00101100	; STOCK
    122  2b63		       1c		      .byte.b	%00011100	; STOCK
    123  2b64		       0c		      .byte.b	%00001100	; STOCK
    124  2b65
    125  2b65							;byte %00000000 ; STOCK
    126  2b65
    127  2b65		       3c		      .byte.b	%00111100	; STOCK
    128  2b66		       46		      .byte.b	%01000110	; STOCK
    129  2b67		       06		      .byte.b	%00000110	; STOCK
    130  2b68		       06		      .byte.b	%00000110	; STOCK
    131  2b69		       3c		      .byte.b	%00111100	; STOCK
    132  2b6a		       60		      .byte.b	%01100000	; STOCK
    133  2b6b		       60		      .byte.b	%01100000	; STOCK
    134  2b6c		       7e		      .byte.b	%01111110	; STOCK
    135  2b6d
    136  2b6d							;byte %00000000 ; STOCK
    137  2b6d
    138  2b6d		       3c		      .byte.b	%00111100	; STOCK
    139  2b6e		       66		      .byte.b	%01100110	; STOCK
    140  2b6f		       66		      .byte.b	%01100110	; STOCK
    141  2b70		       66		      .byte.b	%01100110	; STOCK
    142  2b71		       7c		      .byte.b	%01111100	; STOCK
    143  2b72		       60		      .byte.b	%01100000	; STOCK
    144  2b73		       62		      .byte.b	%01100010	; STOCK
    145  2b74		       3c		      .byte.b	%00111100	; STOCK
    146  2b75
    147  2b75							;byte %00000000 ; STOCK
    148  2b75
    149  2b75		       30		      .byte.b	%00110000	; STOCK
    150  2b76		       30		      .byte.b	%00110000	; STOCK
    151  2b77		       30		      .byte.b	%00110000	; STOCK
    152  2b78		       18		      .byte.b	%00011000	; STOCK
    153  2b79		       0c		      .byte.b	%00001100	; STOCK
    154  2b7a		       06		      .byte.b	%00000110	; STOCK
    155  2b7b		       42		      .byte.b	%01000010	; STOCK
    156  2b7c		       3e		      .byte.b	%00111110	; STOCK
    157  2b7d
    158  2b7d							;byte %00000000 ; STOCK
    159  2b7d
    160  2b7d		       3c		      .byte.b	%00111100	; STOCK
    161  2b7e		       66		      .byte.b	%01100110	; STOCK
    162  2b7f		       66		      .byte.b	%01100110	; STOCK
    163  2b80		       66		      .byte.b	%01100110	; STOCK
    164  2b81		       3c		      .byte.b	%00111100	; STOCK
    165  2b82		       66		      .byte.b	%01100110	; STOCK
    166  2b83		       66		      .byte.b	%01100110	; STOCK
    167  2b84		       3c		      .byte.b	%00111100	; STOCK
    168  2b85
    169  2b85							;byte %00000000 ; STOCK
    170  2b85
    171  2b85		       3c		      .byte.b	%00111100	; STOCK
    172  2b86		       46		      .byte.b	%01000110	; STOCK
    173  2b87		       06		      .byte.b	%00000110	; STOCK
    174  2b88		       3e		      .byte.b	%00111110	; STOCK
    175  2b89		       66		      .byte.b	%01100110	; STOCK
    176  2b8a		       66		      .byte.b	%01100110	; STOCK
    177  2b8b		       66		      .byte.b	%01100110	; STOCK
    178  2b8c		       3c		      .byte.b	%00111100	; STOCK
    179  2b8d
    180  2b8d					      endif		; STOCK
    181  2b8d
    182  2b8d				  -	      if	fontstyle == NEWCENTURY
    183  2b8d				  -			;byte %00000000 ; NEWCENTURY
    184  2b8d				  -
    185  2b8d				  -	      .byte	%00111100	; NEWCENTURY
    186  2b8d				  -	      .byte	%01000010	; NEWCENTURY
    187  2b8d				  -	      .byte	%01000010	; NEWCENTURY
    188  2b8d				  -	      .byte	%01000010	; NEWCENTURY
    189  2b8d				  -	      .byte	%00100100	; NEWCENTURY
    190  2b8d				  -	      .byte	%00100100	; NEWCENTURY
    191  2b8d				  -	      .byte	%00100100	; NEWCENTURY
    192  2b8d				  -	      .byte	%00011000	; NEWCENTURY
    193  2b8d				  -
    194  2b8d				  -			;byte %00000000 ; NEWCENTURY
    195  2b8d				  -
    196  2b8d				  -	      .byte	%00001000	; NEWCENTURY
    197  2b8d				  -	      .byte	%00001000	; NEWCENTURY
    198  2b8d				  -	      .byte	%00001000	; NEWCENTURY
    199  2b8d				  -	      .byte	%00001000	; NEWCENTURY
    200  2b8d				  -	      .byte	%00001000	; NEWCENTURY
    201  2b8d				  -	      .byte	%00001000	; NEWCENTURY
    202  2b8d				  -	      .byte	%00001000	; NEWCENTURY
    203  2b8d				  -	      .byte	%00001000	; NEWCENTURY
    204  2b8d				  -
    205  2b8d				  -			;byte %00000000 ; NEWCENTURY
    206  2b8d				  -
    207  2b8d				  -	      .byte	%01111110	; NEWCENTURY
    208  2b8d				  -	      .byte	%01000000	; NEWCENTURY
    209  2b8d				  -	      .byte	%01000000	; NEWCENTURY
    210  2b8d				  -	      .byte	%00100000	; NEWCENTURY
    211  2b8d				  -	      .byte	%00011100	; NEWCENTURY
    212  2b8d				  -	      .byte	%00000010	; NEWCENTURY
    213  2b8d				  -	      .byte	%00000010	; NEWCENTURY
    214  2b8d				  -	      .byte	%00011100	; NEWCENTURY
    215  2b8d				  -
    216  2b8d				  -			;byte %00000000 ; NEWCENTURY
    217  2b8d				  -
    218  2b8d				  -	      .byte	%01111100	; NEWCENTURY
    219  2b8d				  -	      .byte	%00000010	; NEWCENTURY
    220  2b8d				  -	      .byte	%00000010	; NEWCENTURY
    221  2b8d				  -	      .byte	%00000010	; NEWCENTURY
    222  2b8d				  -	      .byte	%00111100	; NEWCENTURY
    223  2b8d				  -	      .byte	%00000010	; NEWCENTURY
    224  2b8d				  -	      .byte	%00000010	; NEWCENTURY
    225  2b8d				  -	      .byte	%00011100	; NEWCENTURY
    226  2b8d				  -
    227  2b8d				  -			;byte %00000000 ; NEWCENTURY
    228  2b8d				  -
    229  2b8d				  -	      .byte	%00000010	; NEWCENTURY
    230  2b8d				  -	      .byte	%00000010	; NEWCENTURY
    231  2b8d				  -	      .byte	%00000010	; NEWCENTURY
    232  2b8d				  -	      .byte	%00111110	; NEWCENTURY
    233  2b8d				  -	      .byte	%00100010	; NEWCENTURY
    234  2b8d				  -	      .byte	%00100010	; NEWCENTURY
    235  2b8d				  -	      .byte	%00010010	; NEWCENTURY
    236  2b8d				  -	      .byte	%00010010	; NEWCENTURY
    237  2b8d				  -
    238  2b8d				  -			;byte %00000000 ; NEWCENTURY
    239  2b8d				  -
    240  2b8d				  -	      .byte	%01111100	; NEWCENTURY
    241  2b8d				  -	      .byte	%00000010	; NEWCENTURY
    242  2b8d				  -	      .byte	%00000010	; NEWCENTURY
    243  2b8d				  -	      .byte	%00000010	; NEWCENTURY
    244  2b8d				  -	      .byte	%01111100	; NEWCENTURY
    245  2b8d				  -	      .byte	%01000000	; NEWCENTURY
    246  2b8d				  -	      .byte	%01000000	; NEWCENTURY
    247  2b8d				  -	      .byte	%01111000	; NEWCENTURY
    248  2b8d				  -
    249  2b8d				  -			;byte %00000000 ; NEWCENTURY
    250  2b8d				  -
    251  2b8d				  -	      .byte	%00111100	; NEWCENTURY
    252  2b8d				  -	      .byte	%01000010	; NEWCENTURY
    253  2b8d				  -	      .byte	%01000010	; NEWCENTURY
    254  2b8d				  -	      .byte	%01000010	; NEWCENTURY
    255  2b8d				  -	      .byte	%01111100	; NEWCENTURY
    256  2b8d				  -	      .byte	%01000000	; NEWCENTURY
    257  2b8d				  -	      .byte	%01000000	; NEWCENTURY
    258  2b8d				  -	      .byte	%00110000	; NEWCENTURY
    259  2b8d				  -
    260  2b8d				  -			;byte %00000000 ; NEWCENTURY
    261  2b8d				  -
    262  2b8d				  -	      .byte	%00010000	; NEWCENTURY
    263  2b8d				  -	      .byte	%00010000	; NEWCENTURY
    264  2b8d				  -	      .byte	%00001000	; NEWCENTURY
    265  2b8d				  -	      .byte	%00001000	; NEWCENTURY
    266  2b8d				  -	      .byte	%00000100	; NEWCENTURY
    267  2b8d				  -	      .byte	%00000100	; NEWCENTURY
    268  2b8d				  -	      .byte	%00000010	; NEWCENTURY
    269  2b8d				  -	      .byte	%00011110	; NEWCENTURY
    270  2b8d				  -
    271  2b8d				  -			;byte %00000000 ; NEWCENTURY
    272  2b8d				  -
    273  2b8d				  -	      .byte	%00111100	; NEWCENTURY
    274  2b8d				  -	      .byte	%01000010	; NEWCENTURY
    275  2b8d				  -	      .byte	%01000010	; NEWCENTURY
    276  2b8d				  -	      .byte	%01000010	; NEWCENTURY
    277  2b8d				  -	      .byte	%00111100	; NEWCENTURY
    278  2b8d				  -	      .byte	%00100100	; NEWCENTURY
    279  2b8d				  -	      .byte	%00100100	; NEWCENTURY
    280  2b8d				  -	      .byte	%00011000	; NEWCENTURY
    281  2b8d				  -
    282  2b8d				  -			;byte %00000000 ; NEWCENTURY
    283  2b8d				  -
    284  2b8d				  -	      .byte	%00111100	; NEWCENTURY
    285  2b8d				  -	      .byte	%00000010	; NEWCENTURY
    286  2b8d				  -	      .byte	%00000010	; NEWCENTURY
    287  2b8d				  -	      .byte	%00000010	; NEWCENTURY
    288  2b8d				  -	      .byte	%00001110	; NEWCENTURY
    289  2b8d				  -	      .byte	%00010010	; NEWCENTURY
    290  2b8d				  -	      .byte	%00010010	; NEWCENTURY
    291  2b8d				  -	      .byte	%00001100	; NEWCENTURY
    292  2b8d				  -
    293  2b8d					      endif		; NEWCENTURY
    294  2b8d
    295  2b8d				  -	      if	fontstyle == WHIMSEY
    296  2b8d				  -			;byte %00000000 ; WHIMSEY
    297  2b8d				  -
    298  2b8d				  -	      .byte	%00111100	; WHIMSEY
    299  2b8d				  -	      .byte	%01111110	; WHIMSEY
    300  2b8d				  -	      .byte	%01111110	; WHIMSEY
    301  2b8d				  -	      .byte	%01111110	; WHIMSEY
    302  2b8d				  -	      .byte	%01110110	; WHIMSEY
    303  2b8d				  -	      .byte	%01110110	; WHIMSEY
    304  2b8d				  -	      .byte	%01110110	; WHIMSEY
    305  2b8d				  -	      .byte	%00111100	; WHIMSEY
    306  2b8d				  -
    307  2b8d				  -			;byte %00000000 ; WHIMSEY
    308  2b8d				  -
    309  2b8d				  -	      .byte	%01111110	; WHIMSEY
    310  2b8d				  -	      .byte	%01111110	; WHIMSEY
    311  2b8d				  -	      .byte	%01111110	; WHIMSEY
    312  2b8d				  -	      .byte	%00011000	; WHIMSEY
    313  2b8d				  -	      .byte	%00011000	; WHIMSEY
    314  2b8d				  -	      .byte	%00011000	; WHIMSEY
    315  2b8d				  -	      .byte	%01111000	; WHIMSEY
    316  2b8d				  -	      .byte	%00011000	; WHIMSEY
    317  2b8d				  -
    318  2b8d				  -			;byte %00000000 ; WHIMSEY
    319  2b8d				  -
    320  2b8d				  -	      .byte	%01111110	; WHIMSEY
    321  2b8d				  -	      .byte	%01111110	; WHIMSEY
    322  2b8d				  -	      .byte	%01111110	; WHIMSEY
    323  2b8d				  -	      .byte	%01111000	; WHIMSEY
    324  2b8d				  -	      .byte	%00111100	; WHIMSEY
    325  2b8d				  -	      .byte	%00001110	; WHIMSEY
    326  2b8d				  -	      .byte	%01100110	; WHIMSEY
    327  2b8d				  -	      .byte	%00111100	; WHIMSEY
    328  2b8d				  -
    329  2b8d				  -			;byte %00000000 ; WHIMSEY
    330  2b8d				  -
    331  2b8d				  -	      .byte	%00111100	; WHIMSEY
    332  2b8d				  -	      .byte	%01111110	; WHIMSEY
    333  2b8d				  -	      .byte	%01111110	; WHIMSEY
    334  2b8d				  -	      .byte	%01101110	; WHIMSEY
    335  2b8d				  -	      .byte	%00001110	; WHIMSEY
    336  2b8d				  -	      .byte	%00111100	; WHIMSEY
    337  2b8d				  -	      .byte	%00011100	; WHIMSEY
    338  2b8d				  -	      .byte	%01111110	; WHIMSEY
    339  2b8d				  -
    340  2b8d				  -			;byte %00000000 ; WHIMSEY
    341  2b8d				  -
    342  2b8d				  -	      .byte	%00011100	; WHIMSEY
    343  2b8d				  -	      .byte	%00011100	; WHIMSEY
    344  2b8d				  -	      .byte	%01111110	; WHIMSEY
    345  2b8d				  -	      .byte	%01011100	; WHIMSEY
    346  2b8d				  -	      .byte	%01011100	; WHIMSEY
    347  2b8d				  -	      .byte	%00011100	; WHIMSEY
    348  2b8d				  -	      .byte	%00011100	; WHIMSEY
    349  2b8d				  -	      .byte	%00011100	; WHIMSEY
    350  2b8d				  -
    351  2b8d				  -			;byte %00000000 ; WHIMSEY
    352  2b8d				  -
    353  2b8d				  -	      .byte	%00111100	; WHIMSEY
    354  2b8d				  -	      .byte	%01111110	; WHIMSEY
    355  2b8d				  -	      .byte	%01111110	; WHIMSEY
    356  2b8d				  -	      .byte	%01101110	; WHIMSEY
    357  2b8d				  -	      .byte	%00001110	; WHIMSEY
    358  2b8d				  -	      .byte	%01111100	; WHIMSEY
    359  2b8d				  -	      .byte	%01110000	; WHIMSEY
    360  2b8d				  -	      .byte	%01111110	; WHIMSEY
    361  2b8d				  -
    362  2b8d				  -			;byte %00000000 ; WHIMSEY
    363  2b8d				  -
    364  2b8d				  -	      .byte	%00111100	; WHIMSEY
    365  2b8d				  -	      .byte	%01111110	; WHIMSEY
    366  2b8d				  -	      .byte	%01111110	; WHIMSEY
    367  2b8d				  -	      .byte	%01110110	; WHIMSEY
    368  2b8d				  -	      .byte	%01110110	; WHIMSEY
    369  2b8d				  -	      .byte	%01111100	; WHIMSEY
    370  2b8d				  -	      .byte	%01110000	; WHIMSEY
    371  2b8d				  -	      .byte	%00111110	; WHIMSEY
    372  2b8d				  -
    373  2b8d				  -			;byte %00000000 ; WHIMSEY
    374  2b8d				  -
    375  2b8d				  -	      .byte	%01111000	; WHIMSEY
    376  2b8d				  -	      .byte	%01111000	; WHIMSEY
    377  2b8d				  -	      .byte	%01111000	; WHIMSEY
    378  2b8d				  -	      .byte	%00111100	; WHIMSEY
    379  2b8d				  -	      .byte	%00011100	; WHIMSEY
    380  2b8d				  -	      .byte	%00001110	; WHIMSEY
    381  2b8d				  -	      .byte	%00001110	; WHIMSEY
    382  2b8d				  -	      .byte	%01111110	; WHIMSEY
    383  2b8d				  -
    384  2b8d				  -			;byte %00000000 ; WHIMSEY
    385  2b8d				  -
    386  2b8d				  -	      .byte	%00111100	; WHIMSEY
    387  2b8d				  -	      .byte	%01111110	; WHIMSEY
    388  2b8d				  -	      .byte	%01111110	; WHIMSEY
    389  2b8d				  -	      .byte	%01110110	; WHIMSEY
    390  2b8d				  -	      .byte	%01110110	; WHIMSEY
    391  2b8d				  -	      .byte	%00111100	; WHIMSEY
    392  2b8d				  -	      .byte	%01110110	; WHIMSEY
    393  2b8d				  -	      .byte	%00111100	; WHIMSEY
    394  2b8d				  -
    395  2b8d				  -			;byte %00000000 ; WHIMSEY
    396  2b8d				  -
    397  2b8d				  -	      .byte	%00111100	; WHIMSEY
    398  2b8d				  -	      .byte	%01111110	; WHIMSEY
    399  2b8d				  -	      .byte	%01111110	; WHIMSEY
    400  2b8d				  -	      .byte	%01110110	; WHIMSEY
    401  2b8d				  -	      .byte	%00000110	; WHIMSEY
    402  2b8d				  -	      .byte	%00111110	; WHIMSEY
    403  2b8d				  -	      .byte	%01110110	; WHIMSEY
    404  2b8d				  -	      .byte	%00111100	; WHIMSEY
    405  2b8d				  -
    406  2b8d					      endif		; WHIMSEY
    407  2b8d
    408  2b8d				  -	      if	fontstyle == ALARMCLOCK
    409  2b8d				  -
    410  2b8d				  -			;byte %00000000 ; ALARMCLOCK
    411  2b8d				  -
    412  2b8d				  -	      .byte	%00111100	; ALARMCLOCK
    413  2b8d				  -	      .byte	%01000010	; ALARMCLOCK
    414  2b8d				  -	      .byte	%01000010	; ALARMCLOCK
    415  2b8d				  -	      .byte	%01000010	; ALARMCLOCK
    416  2b8d				  -	      .byte	%00000000	; ALARMCLOCK
    417  2b8d				  -	      .byte	%01000010	; ALARMCLOCK
    418  2b8d				  -	      .byte	%01000010	; ALARMCLOCK
    419  2b8d				  -	      .byte	%00111100	; ALARMCLOCK
    420  2b8d				  -
    421  2b8d				  -			;byte %00000000 ; ALARMCLOCK
    422  2b8d				  -
    423  2b8d				  -	      .byte	%00000000	; ALARMCLOCK
    424  2b8d				  -	      .byte	%00000010	; ALARMCLOCK
    425  2b8d				  -	      .byte	%00000010	; ALARMCLOCK
    426  2b8d				  -	      .byte	%00000010	; ALARMCLOCK
    427  2b8d				  -	      .byte	%00000000	; ALARMCLOCK
    428  2b8d				  -	      .byte	%00000010	; ALARMCLOCK
    429  2b8d				  -	      .byte	%00000010	; ALARMCLOCK
    430  2b8d				  -	      .byte	%00000000	; ALARMCLOCK
    431  2b8d				  -
    432  2b8d				  -			;byte %00000000 ; ALARMCLOCK
    433  2b8d				  -
    434  2b8d				  -	      .byte	%00111100	; ALARMCLOCK
    435  2b8d				  -	      .byte	%01000000	; ALARMCLOCK
    436  2b8d				  -	      .byte	%01000000	; ALARMCLOCK
    437  2b8d				  -	      .byte	%01000000	; ALARMCLOCK
    438  2b8d				  -	      .byte	%00111100	; ALARMCLOCK
    439  2b8d				  -	      .byte	%00000010	; ALARMCLOCK
    440  2b8d				  -	      .byte	%00000010	; ALARMCLOCK
    441  2b8d				  -	      .byte	%00111100	; ALARMCLOCK
    442  2b8d				  -
    443  2b8d				  -			;byte %00000000 ; ALARMCLOCK
    444  2b8d				  -
    445  2b8d				  -	      .byte	%00111100	; ALARMCLOCK
    446  2b8d				  -	      .byte	%00000010	; ALARMCLOCK
    447  2b8d				  -	      .byte	%00000010	; ALARMCLOCK
    448  2b8d				  -	      .byte	%00000010	; ALARMCLOCK
    449  2b8d				  -	      .byte	%00111100	; ALARMCLOCK
    450  2b8d				  -	      .byte	%00000010	; ALARMCLOCK
    451  2b8d				  -	      .byte	%00000010	; ALARMCLOCK
    452  2b8d				  -	      .byte	%00111100	; ALARMCLOCK
    453  2b8d				  -
    454  2b8d				  -			;byte %00000000 ; ALARMCLOCK
    455  2b8d				  -
    456  2b8d				  -	      .byte	%00000000	; ALARMCLOCK
    457  2b8d				  -	      .byte	%00000010	; ALARMCLOCK
    458  2b8d				  -	      .byte	%00000010	; ALARMCLOCK
    459  2b8d				  -	      .byte	%00000010	; ALARMCLOCK
    460  2b8d				  -	      .byte	%00111100	; ALARMCLOCK
    461  2b8d				  -	      .byte	%01000010	; ALARMCLOCK
    462  2b8d				  -	      .byte	%01000010	; ALARMCLOCK
    463  2b8d				  -	      .byte	%00000000	; ALARMCLOCK
    464  2b8d				  -
    465  2b8d				  -			;byte %00000000 ; ALARMCLOCK
    466  2b8d				  -
    467  2b8d				  -	      .byte	%00111100	; ALARMCLOCK
    468  2b8d				  -	      .byte	%00000010	; ALARMCLOCK
    469  2b8d				  -	      .byte	%00000010	; ALARMCLOCK
    470  2b8d				  -	      .byte	%00000010	; ALARMCLOCK
    471  2b8d				  -	      .byte	%00111100	; ALARMCLOCK
    472  2b8d				  -	      .byte	%01000000	; ALARMCLOCK
    473  2b8d				  -	      .byte	%01000000	; ALARMCLOCK
    474  2b8d				  -	      .byte	%00111100	; ALARMCLOCK
    475  2b8d				  -
    476  2b8d				  -			;byte %00000000 ; ALARMCLOCK
    477  2b8d				  -
    478  2b8d				  -	      .byte	%00111100	; ALARMCLOCK
    479  2b8d				  -	      .byte	%01000010	; ALARMCLOCK
    480  2b8d				  -	      .byte	%01000010	; ALARMCLOCK
    481  2b8d				  -	      .byte	%01000010	; ALARMCLOCK
    482  2b8d				  -	      .byte	%00111100	; ALARMCLOCK
    483  2b8d				  -	      .byte	%01000000	; ALARMCLOCK
    484  2b8d				  -	      .byte	%01000000	; ALARMCLOCK
    485  2b8d				  -	      .byte	%00111100	; ALARMCLOCK
    486  2b8d				  -
    487  2b8d				  -			;byte %00000000 ; ALARMCLOCK
    488  2b8d				  -
    489  2b8d				  -	      .byte	%00000000	; ALARMCLOCK
    490  2b8d				  -	      .byte	%00000010	; ALARMCLOCK
    491  2b8d				  -	      .byte	%00000010	; ALARMCLOCK
    492  2b8d				  -	      .byte	%00000010	; ALARMCLOCK
    493  2b8d				  -	      .byte	%00000000	; ALARMCLOCK
    494  2b8d				  -	      .byte	%00000010	; ALARMCLOCK
    495  2b8d				  -	      .byte	%00000010	; ALARMCLOCK
    496  2b8d				  -	      .byte	%00111100	; ALARMCLOCK
    497  2b8d				  -
    498  2b8d				  -			;byte %00000000 ; ALARMCLOCK
    499  2b8d				  -
    500  2b8d				  -	      .byte	%00111100	; ALARMCLOCK
    501  2b8d				  -	      .byte	%01000010	; ALARMCLOCK
    502  2b8d				  -	      .byte	%01000010	; ALARMCLOCK
    503  2b8d				  -	      .byte	%01000010	; ALARMCLOCK
    504  2b8d				  -	      .byte	%00111100	; ALARMCLOCK
    505  2b8d				  -	      .byte	%01000010	; ALARMCLOCK
    506  2b8d				  -	      .byte	%01000010	; ALARMCLOCK
    507  2b8d				  -	      .byte	%00111100	; ALARMCLOCK
    508  2b8d				  -
    509  2b8d				  -			;byte %00000000 ; ALARMCLOCK
    510  2b8d				  -
    511  2b8d				  -	      .byte	%00111100	; ALARMCLOCK
    512  2b8d				  -	      .byte	%00000010	; ALARMCLOCK
    513  2b8d				  -	      .byte	%00000010	; ALARMCLOCK
    514  2b8d				  -	      .byte	%00000010	; ALARMCLOCK
    515  2b8d				  -	      .byte	%00111100	; ALARMCLOCK
    516  2b8d				  -	      .byte	%01000010	; ALARMCLOCK
    517  2b8d				  -	      .byte	%01000010	; ALARMCLOCK
    518  2b8d				  -	      .byte	%00111100	; ALARMCLOCK
    519  2b8d				  -
    520  2b8d				  -
    521  2b8d					      endif		; ALARMCLOCK
    522  2b8d
    523  2b8d				  -	      if	fontstyle == HANDWRITTEN
    524  2b8d				  -
    525  2b8d				  -			;byte %00000000 ; HANDWRITTEN
    526  2b8d				  -
    527  2b8d				  -	      .byte	%00110000	; HANDWRITTEN
    528  2b8d				  -	      .byte	%01001000	; HANDWRITTEN
    529  2b8d				  -	      .byte	%01001000	; HANDWRITTEN
    530  2b8d				  -	      .byte	%01001000	; HANDWRITTEN
    531  2b8d				  -	      .byte	%00100100	; HANDWRITTEN
    532  2b8d				  -	      .byte	%00100100	; HANDWRITTEN
    533  2b8d				  -	      .byte	%00010010	; HANDWRITTEN
    534  2b8d				  -	      .byte	%00001100	; HANDWRITTEN
    535  2b8d				  -
    536  2b8d				  -			;byte %00000000 ; HANDWRITTEN
    537  2b8d				  -
    538  2b8d				  -	      .byte	%00010000	; HANDWRITTEN
    539  2b8d				  -	      .byte	%00010000	; HANDWRITTEN
    540  2b8d				  -	      .byte	%00010000	; HANDWRITTEN
    541  2b8d				  -	      .byte	%00001000	; HANDWRITTEN
    542  2b8d				  -	      .byte	%00001000	; HANDWRITTEN
    543  2b8d				  -	      .byte	%00001000	; HANDWRITTEN
    544  2b8d				  -	      .byte	%00000100	; HANDWRITTEN
    545  2b8d				  -	      .byte	%00000100	; HANDWRITTEN
    546  2b8d				  -
    547  2b8d				  -			;byte %00000000 ; HANDWRITTEN
    548  2b8d				  -
    549  2b8d				  -	      .byte	%01110000	; HANDWRITTEN
    550  2b8d				  -	      .byte	%01001100	; HANDWRITTEN
    551  2b8d				  -	      .byte	%01000000	; HANDWRITTEN
    552  2b8d				  -	      .byte	%00100000	; HANDWRITTEN
    553  2b8d				  -	      .byte	%00011000	; HANDWRITTEN
    554  2b8d				  -	      .byte	%00000100	; HANDWRITTEN
    555  2b8d				  -	      .byte	%00100010	; HANDWRITTEN
    556  2b8d				  -	      .byte	%00011100	; HANDWRITTEN
    557  2b8d				  -
    558  2b8d				  -			;byte %00000000 ; HANDWRITTEN
    559  2b8d				  -
    560  2b8d				  -	      .byte	%00110000	; HANDWRITTEN
    561  2b8d				  -	      .byte	%01001000	; HANDWRITTEN
    562  2b8d				  -	      .byte	%00000100	; HANDWRITTEN
    563  2b8d				  -	      .byte	%00000100	; HANDWRITTEN
    564  2b8d				  -	      .byte	%00011000	; HANDWRITTEN
    565  2b8d				  -	      .byte	%00000100	; HANDWRITTEN
    566  2b8d				  -	      .byte	%00100010	; HANDWRITTEN
    567  2b8d				  -	      .byte	%00011100	; HANDWRITTEN
    568  2b8d				  -
    569  2b8d				  -			;byte %00000000 ; HANDWRITTEN
    570  2b8d				  -
    571  2b8d				  -	      .byte	%00010000	; HANDWRITTEN
    572  2b8d				  -	      .byte	%00010000	; HANDWRITTEN
    573  2b8d				  -	      .byte	%00001000	; HANDWRITTEN
    574  2b8d				  -	      .byte	%01111000	; HANDWRITTEN
    575  2b8d				  -	      .byte	%01000100	; HANDWRITTEN
    576  2b8d				  -	      .byte	%00100100	; HANDWRITTEN
    577  2b8d				  -	      .byte	%00010010	; HANDWRITTEN
    578  2b8d				  -	      .byte	%00000010	; HANDWRITTEN
    579  2b8d				  -
    580  2b8d				  -			;byte %00000000 ; HANDWRITTEN
    581  2b8d				  -
    582  2b8d				  -	      .byte	%00110000	; HANDWRITTEN
    583  2b8d				  -	      .byte	%01001000	; HANDWRITTEN
    584  2b8d				  -	      .byte	%00000100	; HANDWRITTEN
    585  2b8d				  -	      .byte	%00000100	; HANDWRITTEN
    586  2b8d				  -	      .byte	%00011000	; HANDWRITTEN
    587  2b8d				  -	      .byte	%00100000	; HANDWRITTEN
    588  2b8d				  -	      .byte	%00010010	; HANDWRITTEN
    589  2b8d				  -	      .byte	%00001100	; HANDWRITTEN
    590  2b8d				  -
    591  2b8d				  -			;byte %00000000 ; HANDWRITTEN
    592  2b8d				  -
    593  2b8d				  -	      .byte	%00010000	; HANDWRITTEN
    594  2b8d				  -	      .byte	%00101000	; HANDWRITTEN
    595  2b8d				  -	      .byte	%00100100	; HANDWRITTEN
    596  2b8d				  -	      .byte	%00100100	; HANDWRITTEN
    597  2b8d				  -	      .byte	%00011000	; HANDWRITTEN
    598  2b8d				  -	      .byte	%00010000	; HANDWRITTEN
    599  2b8d				  -	      .byte	%00001000	; HANDWRITTEN
    600  2b8d				  -	      .byte	%00000110	; HANDWRITTEN
    601  2b8d				  -
    602  2b8d				  -			;byte %00000000 ; HANDWRITTEN
    603  2b8d				  -
    604  2b8d				  -	      .byte	%00010000	; HANDWRITTEN
    605  2b8d				  -	      .byte	%00010000	; HANDWRITTEN
    606  2b8d				  -	      .byte	%00010000	; HANDWRITTEN
    607  2b8d				  -	      .byte	%00001000	; HANDWRITTEN
    608  2b8d				  -	      .byte	%00000100	; HANDWRITTEN
    609  2b8d				  -	      .byte	%00000100	; HANDWRITTEN
    610  2b8d				  -	      .byte	%00110010	; HANDWRITTEN
    611  2b8d				  -	      .byte	%00001110	; HANDWRITTEN
    612  2b8d				  -
    613  2b8d				  -			;byte %00000000 ; HANDWRITTEN
    614  2b8d				  -
    615  2b8d				  -	      .byte	%00110000	; HANDWRITTEN
    616  2b8d				  -	      .byte	%01001000	; HANDWRITTEN
    617  2b8d				  -	      .byte	%01000100	; HANDWRITTEN
    618  2b8d				  -	      .byte	%00100100	; HANDWRITTEN
    619  2b8d				  -	      .byte	%00011100	; HANDWRITTEN
    620  2b8d				  -	      .byte	%00010010	; HANDWRITTEN
    621  2b8d				  -	      .byte	%00001010	; HANDWRITTEN
    622  2b8d				  -	      .byte	%00000110	; HANDWRITTEN
    623  2b8d				  -
    624  2b8d				  -			;byte %00000000 ; HANDWRITTEN
    625  2b8d				  -
    626  2b8d				  -	      .byte	%00010000	; HANDWRITTEN
    627  2b8d				  -	      .byte	%00010000	; HANDWRITTEN
    628  2b8d				  -	      .byte	%00001000	; HANDWRITTEN
    629  2b8d				  -	      .byte	%00001000	; HANDWRITTEN
    630  2b8d				  -	      .byte	%00011100	; HANDWRITTEN
    631  2b8d				  -	      .byte	%00100100	; HANDWRITTEN
    632  2b8d				  -	      .byte	%00010010	; HANDWRITTEN
    633  2b8d				  -	      .byte	%00001100	; HANDWRITTEN
    634  2b8d				  -
    635  2b8d					      endif		; HANDWRITTEN
    636  2b8d
    637  2b8d				  -	      if	fontstyle == INTERRUPTED
    638  2b8d				  -
    639  2b8d				  -			;byte %00000000 ; INTERRUPTED
    640  2b8d				  -
    641  2b8d				  -	      .byte	%00110100	; INTERRUPTED
    642  2b8d				  -	      .byte	%01100110	; INTERRUPTED
    643  2b8d				  -	      .byte	%01100110	; INTERRUPTED
    644  2b8d				  -	      .byte	%01100110	; INTERRUPTED
    645  2b8d				  -	      .byte	%01100110	; INTERRUPTED
    646  2b8d				  -	      .byte	%01100110	; INTERRUPTED
    647  2b8d				  -	      .byte	%01100110	; INTERRUPTED
    648  2b8d				  -	      .byte	%00110100	; INTERRUPTED
    649  2b8d				  -
    650  2b8d				  -			;byte %00000000 ; INTERRUPTED
    651  2b8d				  -
    652  2b8d				  -	      .byte	%00111100	; INTERRUPTED
    653  2b8d				  -	      .byte	%00000000	; INTERRUPTED
    654  2b8d				  -	      .byte	%00011000	; INTERRUPTED
    655  2b8d				  -	      .byte	%00011000	; INTERRUPTED
    656  2b8d				  -	      .byte	%00011000	; INTERRUPTED
    657  2b8d				  -	      .byte	%00011000	; INTERRUPTED
    658  2b8d				  -	      .byte	%00011000	; INTERRUPTED
    659  2b8d				  -	      .byte	%00111000	; INTERRUPTED
    660  2b8d				  -
    661  2b8d				  -			;byte %00000000 ; INTERRUPTED
    662  2b8d				  -
    663  2b8d				  -	      .byte	%01101110	; INTERRUPTED
    664  2b8d				  -	      .byte	%01100000	; INTERRUPTED
    665  2b8d				  -	      .byte	%00110000	; INTERRUPTED
    666  2b8d				  -	      .byte	%00011000	; INTERRUPTED
    667  2b8d				  -	      .byte	%00001100	; INTERRUPTED
    668  2b8d				  -	      .byte	%00000110	; INTERRUPTED
    669  2b8d				  -	      .byte	%01000110	; INTERRUPTED
    670  2b8d				  -	      .byte	%00111100	; INTERRUPTED
    671  2b8d				  -
    672  2b8d				  -			;byte %00000000 ; INTERRUPTED
    673  2b8d				  -
    674  2b8d				  -	      .byte	%01111100	; INTERRUPTED
    675  2b8d				  -	      .byte	%00000110	; INTERRUPTED
    676  2b8d				  -	      .byte	%00000110	; INTERRUPTED
    677  2b8d				  -	      .byte	%00000110	; INTERRUPTED
    678  2b8d				  -	      .byte	%01110110	; INTERRUPTED
    679  2b8d				  -	      .byte	%00000110	; INTERRUPTED
    680  2b8d				  -	      .byte	%00000110	; INTERRUPTED
    681  2b8d				  -	      .byte	%01110100	; INTERRUPTED
    682  2b8d				  -
    683  2b8d				  -			;byte %00000000 ; INTERRUPTED
    684  2b8d				  -
    685  2b8d				  -	      .byte	%00000110	; INTERRUPTED
    686  2b8d				  -	      .byte	%00000110	; INTERRUPTED
    687  2b8d				  -	      .byte	%00000110	; INTERRUPTED
    688  2b8d				  -	      .byte	%00000110	; INTERRUPTED
    689  2b8d				  -	      .byte	%01110110	; INTERRUPTED
    690  2b8d				  -	      .byte	%01100110	; INTERRUPTED
    691  2b8d				  -	      .byte	%01100110	; INTERRUPTED
    692  2b8d				  -	      .byte	%01100110	; INTERRUPTED
    693  2b8d				  -
    694  2b8d				  -			;byte %00000000 ; INTERRUPTED
    695  2b8d				  -
    696  2b8d				  -	      .byte	%01111100	; INTERRUPTED
    697  2b8d				  -	      .byte	%00000110	; INTERRUPTED
    698  2b8d				  -	      .byte	%00000110	; INTERRUPTED
    699  2b8d				  -	      .byte	%00000110	; INTERRUPTED
    700  2b8d				  -	      .byte	%01111100	; INTERRUPTED
    701  2b8d				  -	      .byte	%01100000	; INTERRUPTED
    702  2b8d				  -	      .byte	%01100000	; INTERRUPTED
    703  2b8d				  -	      .byte	%01101110	; INTERRUPTED
    704  2b8d				  -
    705  2b8d				  -			;byte %00000000 ; INTERRUPTED
    706  2b8d				  -
    707  2b8d				  -	      .byte	%00101100	; INTERRUPTED
    708  2b8d				  -	      .byte	%01100110	; INTERRUPTED
    709  2b8d				  -	      .byte	%01100110	; INTERRUPTED
    710  2b8d				  -	      .byte	%01100110	; INTERRUPTED
    711  2b8d				  -	      .byte	%01101100	; INTERRUPTED
    712  2b8d				  -	      .byte	%01100000	; INTERRUPTED
    713  2b8d				  -	      .byte	%00110000	; INTERRUPTED
    714  2b8d				  -	      .byte	%00011100	; INTERRUPTED
    715  2b8d				  -
    716  2b8d				  -			;byte %00000000 ; INTERRUPTED
    717  2b8d				  -
    718  2b8d				  -	      .byte	%00011000	; INTERRUPTED
    719  2b8d				  -	      .byte	%00011000	; INTERRUPTED
    720  2b8d				  -	      .byte	%00011000	; INTERRUPTED
    721  2b8d				  -	      .byte	%00011100	; INTERRUPTED
    722  2b8d				  -	      .byte	%00001110	; INTERRUPTED
    723  2b8d				  -	      .byte	%00000110	; INTERRUPTED
    724  2b8d				  -	      .byte	%00000000	; INTERRUPTED
    725  2b8d				  -	      .byte	%01111110	; INTERRUPTED
    726  2b8d				  -
    727  2b8d				  -			;byte %00000000 ; INTERRUPTED
    728  2b8d				  -
    729  2b8d				  -	      .byte	%00110100	; INTERRUPTED
    730  2b8d				  -	      .byte	%01100110	; INTERRUPTED
    731  2b8d				  -	      .byte	%01100110	; INTERRUPTED
    732  2b8d				  -	      .byte	%01100110	; INTERRUPTED
    733  2b8d				  -	      .byte	%00110100	; INTERRUPTED
    734  2b8d				  -	      .byte	%01100110	; INTERRUPTED
    735  2b8d				  -	      .byte	%01100110	; INTERRUPTED
    736  2b8d				  -	      .byte	%00110100	; INTERRUPTED
    737  2b8d				  -
    738  2b8d				  -			;byte %00000000 ; INTERRUPTED
    739  2b8d				  -
    740  2b8d				  -	      .byte	%00111000	; INTERRUPTED
    741  2b8d				  -	      .byte	%00001100	; INTERRUPTED
    742  2b8d				  -	      .byte	%00000110	; INTERRUPTED
    743  2b8d				  -	      .byte	%00110110	; INTERRUPTED
    744  2b8d				  -	      .byte	%01100110	; INTERRUPTED
    745  2b8d				  -	      .byte	%01100110	; INTERRUPTED
    746  2b8d				  -	      .byte	%01100110	; INTERRUPTED
    747  2b8d				  -	      .byte	%00110100	; INTERRUPTED
    748  2b8d				  -
    749  2b8d					      endif		; INTERRUPTED
    750  2b8d
    751  2b8d
    752  2b8d				  -	      if	fontstyle == TINY
    753  2b8d				  -
    754  2b8d				  -			;byte %00000000 ; TINY
    755  2b8d				  -
    756  2b8d				  -	      .byte	%00000000	; TINY
    757  2b8d				  -	      .byte	%00111000	; TINY
    758  2b8d				  -	      .byte	%00101000	; TINY
    759  2b8d				  -	      .byte	%00101000	; TINY
    760  2b8d				  -	      .byte	%00101000	; TINY
    761  2b8d				  -	      .byte	%00111000	; TINY
    762  2b8d				  -	      .byte	%00000000	; TINY
    763  2b8d				  -	      .byte	%00000000	; TINY
    764  2b8d				  -
    765  2b8d				  -			;byte %00000000 ; TINY
    766  2b8d				  -
    767  2b8d				  -	      .byte	%00000000	; TINY
    768  2b8d				  -	      .byte	%00010000	; TINY
    769  2b8d				  -	      .byte	%00010000	; TINY
    770  2b8d				  -	      .byte	%00010000	; TINY
    771  2b8d				  -	      .byte	%00010000	; TINY
    772  2b8d				  -	      .byte	%00010000	; TINY
    773  2b8d				  -	      .byte	%00000000	; TINY
    774  2b8d				  -	      .byte	%00000000	; TINY
    775  2b8d				  -
    776  2b8d				  -			;byte %00000000 ; TINY
    777  2b8d				  -
    778  2b8d				  -	      .byte	%00000000	; TINY
    779  2b8d				  -	      .byte	%00111000	; TINY
    780  2b8d				  -	      .byte	%00100000	; TINY
    781  2b8d				  -	      .byte	%00111000	; TINY
    782  2b8d				  -	      .byte	%00001000	; TINY
    783  2b8d				  -	      .byte	%00111000	; TINY
    784  2b8d				  -	      .byte	%00000000	; TINY
    785  2b8d				  -	      .byte	%00000000	; TINY
    786  2b8d				  -
    787  2b8d				  -			;byte %00000000 ; TINY
    788  2b8d				  -
    789  2b8d				  -	      .byte	%00000000	; TINY
    790  2b8d				  -	      .byte	%00111000	; TINY
    791  2b8d				  -	      .byte	%00001000	; TINY
    792  2b8d				  -	      .byte	%00111000	; TINY
    793  2b8d				  -	      .byte	%00001000	; TINY
    794  2b8d				  -	      .byte	%00111000	; TINY
    795  2b8d				  -	      .byte	%00000000	; TINY
    796  2b8d				  -	      .byte	%00000000	; TINY
    797  2b8d				  -
    798  2b8d				  -			;byte %00000000 ; TINY
    799  2b8d				  -
    800  2b8d				  -	      .byte	%00000000	; TINY
    801  2b8d				  -	      .byte	%00001000	; TINY
    802  2b8d				  -	      .byte	%00001000	; TINY
    803  2b8d				  -	      .byte	%00111000	; TINY
    804  2b8d				  -	      .byte	%00101000	; TINY
    805  2b8d				  -	      .byte	%00101000	; TINY
    806  2b8d				  -	      .byte	%00000000	; TINY
    807  2b8d				  -	      .byte	%00000000	; TINY
    808  2b8d				  -
    809  2b8d				  -			;byte %00000000 ; TINY
    810  2b8d				  -
    811  2b8d				  -	      .byte	%00000000	; TINY
    812  2b8d				  -	      .byte	%00111000	; TINY
    813  2b8d				  -	      .byte	%00001000	; TINY
    814  2b8d				  -	      .byte	%00111000	; TINY
    815  2b8d				  -	      .byte	%00100000	; TINY
    816  2b8d				  -	      .byte	%00111000	; TINY
    817  2b8d				  -	      .byte	%00000000	; TINY
    818  2b8d				  -	      .byte	%00000000	; TINY
    819  2b8d				  -
    820  2b8d				  -			;byte %00000000 ; TINY
    821  2b8d				  -
    822  2b8d				  -	      .byte	%00000000	; TINY
    823  2b8d				  -	      .byte	%00111000	; TINY
    824  2b8d				  -	      .byte	%00101000	; TINY
    825  2b8d				  -	      .byte	%00111000	; TINY
    826  2b8d				  -	      .byte	%00100000	; TINY
    827  2b8d				  -	      .byte	%00111000	; TINY
    828  2b8d				  -	      .byte	%00000000	; TINY
    829  2b8d				  -	      .byte	%00000000	; TINY
    830  2b8d				  -
    831  2b8d				  -			;byte %00000000 ; TINY
    832  2b8d				  -
    833  2b8d				  -	      .byte	%00000000	; TINY
    834  2b8d				  -	      .byte	%00001000	; TINY
    835  2b8d				  -	      .byte	%00001000	; TINY
    836  2b8d				  -	      .byte	%00001000	; TINY
    837  2b8d				  -	      .byte	%00001000	; TINY
    838  2b8d				  -	      .byte	%00111000	; TINY
    839  2b8d				  -	      .byte	%00000000	; TINY
    840  2b8d				  -	      .byte	%00000000	; TINY
    841  2b8d				  -
    842  2b8d				  -			;byte %00000000 ; TINY
    843  2b8d				  -
    844  2b8d				  -	      .byte	%00000000	; TINY
    845  2b8d				  -	      .byte	%00111000	; TINY
    846  2b8d				  -	      .byte	%00101000	; TINY
    847  2b8d				  -	      .byte	%00111000	; TINY
    848  2b8d				  -	      .byte	%00101000	; TINY
    849  2b8d				  -	      .byte	%00111000	; TINY
    850  2b8d				  -	      .byte	%00000000	; TINY
    851  2b8d				  -	      .byte	%00000000	; TINY
    852  2b8d				  -
    853  2b8d				  -			;byte %00000000 ; TINY
    854  2b8d				  -
    855  2b8d				  -	      .byte	%00000000	; TINY
    856  2b8d				  -	      .byte	%00001000	; TINY
    857  2b8d				  -	      .byte	%00001000	; TINY
    858  2b8d				  -	      .byte	%00111000	; TINY
    859  2b8d				  -	      .byte	%00101000	; TINY
    860  2b8d				  -	      .byte	%00111000	; TINY
    861  2b8d				  -	      .byte	%00000000	; TINY
    862  2b8d				  -	      .byte	%00000000	; TINY
    863  2b8d				  -
    864  2b8d					      endif		; TINY
    865  2b8d
    866  2b8d				  -	      if	fontstyle == RETROPUTER
    867  2b8d				  -
    868  2b8d				  -			;byte %00000000 ; RETROPUTER
    869  2b8d				  -
    870  2b8d				  -	      .byte	%01111110	; RETROPUTER
    871  2b8d				  -	      .byte	%01000110	; RETROPUTER
    872  2b8d				  -	      .byte	%01000110	; RETROPUTER
    873  2b8d				  -	      .byte	%01000110	; RETROPUTER
    874  2b8d				  -	      .byte	%01100010	; RETROPUTER
    875  2b8d				  -	      .byte	%01100010	; RETROPUTER
    876  2b8d				  -	      .byte	%01100010	; RETROPUTER
    877  2b8d				  -	      .byte	%01111110	; RETROPUTER
    878  2b8d				  -
    879  2b8d				  -			;byte %00000000 ; RETROPUTER
    880  2b8d				  -
    881  2b8d				  -	      .byte	%00111000	; RETROPUTER
    882  2b8d				  -	      .byte	%00111000	; RETROPUTER
    883  2b8d				  -	      .byte	%00111000	; RETROPUTER
    884  2b8d				  -	      .byte	%00111000	; RETROPUTER
    885  2b8d				  -	      .byte	%00011000	; RETROPUTER
    886  2b8d				  -	      .byte	%00011000	; RETROPUTER
    887  2b8d				  -	      .byte	%00011000	; RETROPUTER
    888  2b8d				  -	      .byte	%00011000	; RETROPUTER
    889  2b8d				  -
    890  2b8d				  -			;byte %00000000 ; RETROPUTER
    891  2b8d				  -
    892  2b8d				  -	      .byte	%01111110	; RETROPUTER
    893  2b8d				  -	      .byte	%01100000	; RETROPUTER
    894  2b8d				  -	      .byte	%01100000	; RETROPUTER
    895  2b8d				  -	      .byte	%01100000	; RETROPUTER
    896  2b8d				  -	      .byte	%00111110	; RETROPUTER
    897  2b8d				  -	      .byte	%00000010	; RETROPUTER
    898  2b8d				  -	      .byte	%01000010	; RETROPUTER
    899  2b8d				  -	      .byte	%01111110	; RETROPUTER
    900  2b8d				  -
    901  2b8d				  -			;byte %00000000 ; RETROPUTER
    902  2b8d				  -
    903  2b8d				  -	      .byte	%01111110	; RETROPUTER
    904  2b8d				  -	      .byte	%01000110	; RETROPUTER
    905  2b8d				  -	      .byte	%00000110	; RETROPUTER
    906  2b8d				  -	      .byte	%00000110	; RETROPUTER
    907  2b8d				  -	      .byte	%00111110	; RETROPUTER
    908  2b8d				  -	      .byte	%00000010	; RETROPUTER
    909  2b8d				  -	      .byte	%01000010	; RETROPUTER
    910  2b8d				  -	      .byte	%01111110	; RETROPUTER
    911  2b8d				  -
    912  2b8d				  -			;byte %00000000 ; RETROPUTER
    913  2b8d				  -
    914  2b8d				  -	      .byte	%00001100	; RETROPUTER
    915  2b8d				  -	      .byte	%00001100	; RETROPUTER
    916  2b8d				  -	      .byte	%00001100	; RETROPUTER
    917  2b8d				  -	      .byte	%01111110	; RETROPUTER
    918  2b8d				  -	      .byte	%01000100	; RETROPUTER
    919  2b8d				  -	      .byte	%01000100	; RETROPUTER
    920  2b8d				  -	      .byte	%01000100	; RETROPUTER
    921  2b8d				  -	      .byte	%00000100	; RETROPUTER
    922  2b8d				  -
    923  2b8d				  -			;byte %00000000 ; RETROPUTER
    924  2b8d				  -
    925  2b8d				  -	      .byte	%01111110	; RETROPUTER
    926  2b8d				  -	      .byte	%01000110	; RETROPUTER
    927  2b8d				  -	      .byte	%00000110	; RETROPUTER
    928  2b8d				  -	      .byte	%00000110	; RETROPUTER
    929  2b8d				  -	      .byte	%01111100	; RETROPUTER
    930  2b8d				  -	      .byte	%01000000	; RETROPUTER
    931  2b8d				  -	      .byte	%01000000	; RETROPUTER
    932  2b8d				  -	      .byte	%01111110	; RETROPUTER
    933  2b8d				  -
    934  2b8d				  -			;byte %00000000 ; RETROPUTER
    935  2b8d				  -
    936  2b8d				  -	      .byte	%01111110	; RETROPUTER
    937  2b8d				  -	      .byte	%01000110	; RETROPUTER
    938  2b8d				  -	      .byte	%01000110	; RETROPUTER
    939  2b8d				  -	      .byte	%01000110	; RETROPUTER
    940  2b8d				  -	      .byte	%01111100	; RETROPUTER
    941  2b8d				  -	      .byte	%01000000	; RETROPUTER
    942  2b8d				  -	      .byte	%01000010	; RETROPUTER
    943  2b8d				  -	      .byte	%01111110	; RETROPUTER
    944  2b8d				  -
    945  2b8d				  -			;byte %00000000 ; RETROPUTER
    946  2b8d				  -
    947  2b8d				  -	      .byte	%00001100	; RETROPUTER
    948  2b8d				  -	      .byte	%00001100	; RETROPUTER
    949  2b8d				  -	      .byte	%00001100	; RETROPUTER
    950  2b8d				  -	      .byte	%00001100	; RETROPUTER
    951  2b8d				  -	      .byte	%00000100	; RETROPUTER
    952  2b8d				  -	      .byte	%00000010	; RETROPUTER
    953  2b8d				  -	      .byte	%01000010	; RETROPUTER
    954  2b8d				  -	      .byte	%01111110	; RETROPUTER
    955  2b8d				  -
    956  2b8d				  -			;byte %00000000 ; RETROPUTER
    957  2b8d				  -
    958  2b8d				  -	      .byte	%01111110	; RETROPUTER
    959  2b8d				  -	      .byte	%01000110	; RETROPUTER
    960  2b8d				  -	      .byte	%01000110	; RETROPUTER
    961  2b8d				  -	      .byte	%01000110	; RETROPUTER
    962  2b8d				  -	      .byte	%01111110	; RETROPUTER
    963  2b8d				  -	      .byte	%01000010	; RETROPUTER
    964  2b8d				  -	      .byte	%01000010	; RETROPUTER
    965  2b8d				  -	      .byte	%01111110	; RETROPUTER
    966  2b8d				  -
    967  2b8d				  -			;byte %00000000 ; RETROPUTER
    968  2b8d				  -
    969  2b8d				  -	      .byte	%00000110	; RETROPUTER
    970  2b8d				  -	      .byte	%00000110	; RETROPUTER
    971  2b8d				  -	      .byte	%00000110	; RETROPUTER
    972  2b8d				  -	      .byte	%00000010	; RETROPUTER
    973  2b8d				  -	      .byte	%01111110	; RETROPUTER
    974  2b8d				  -	      .byte	%01000010	; RETROPUTER
    975  2b8d				  -	      .byte	%01000010	; RETROPUTER
    976  2b8d				  -	      .byte	%01111110	; RETROPUTER
    977  2b8d				  -
    978  2b8d					      endif		; RETROPUTER
    979  2b8d
    980  2b8d				  -	      if	fontstyle == CURVES
    981  2b8d				  -
    982  2b8d				  -			;byte %00000000 ; CURVES
    983  2b8d				  -
    984  2b8d				  -	      .byte	%00111100	; CURVES
    985  2b8d				  -	      .byte	%01111110	; CURVES
    986  2b8d				  -	      .byte	%01100110	; CURVES
    987  2b8d				  -	      .byte	%01100110	; CURVES
    988  2b8d				  -	      .byte	%01100110	; CURVES
    989  2b8d				  -	      .byte	%01100110	; CURVES
    990  2b8d				  -	      .byte	%01111110	; CURVES
    991  2b8d				  -	      .byte	%00111100	; CURVES
    992  2b8d				  -
    993  2b8d				  -			;byte %00000000 ; CURVES
    994  2b8d				  -
    995  2b8d				  -	      .byte	%00011000	; CURVES
    996  2b8d				  -	      .byte	%00011000	; CURVES
    997  2b8d				  -	      .byte	%00011000	; CURVES
    998  2b8d				  -	      .byte	%00011000	; CURVES
    999  2b8d				  -	      .byte	%00011000	; CURVES
   1000  2b8d				  -	      .byte	%00011000	; CURVES
   1001  2b8d				  -	      .byte	%01111000	; CURVES
   1002  2b8d				  -	      .byte	%01110000	; CURVES
   1003  2b8d				  -
   1004  2b8d				  -			;byte %00000000 ; CURVES
   1005  2b8d				  -
   1006  2b8d				  -	      .byte	%01111110	; CURVES
   1007  2b8d				  -	      .byte	%01111110	; CURVES
   1008  2b8d				  -	      .byte	%01100000	; CURVES
   1009  2b8d				  -	      .byte	%01111100	; CURVES
   1010  2b8d				  -	      .byte	%00111110	; CURVES
   1011  2b8d				  -	      .byte	%00000110	; CURVES
   1012  2b8d				  -	      .byte	%01111110	; CURVES
   1013  2b8d				  -	      .byte	%01111100	; CURVES
   1014  2b8d				  -
   1015  2b8d				  -			;byte %00000000 ; CURVES
   1016  2b8d				  -
   1017  2b8d				  -	      .byte	%01111100	; CURVES
   1018  2b8d				  -	      .byte	%01111110	; CURVES
   1019  2b8d				  -	      .byte	%00001110	; CURVES
   1020  2b8d				  -	      .byte	%00111100	; CURVES
   1021  2b8d				  -	      .byte	%00111100	; CURVES
   1022  2b8d				  -	      .byte	%00001110	; CURVES
   1023  2b8d				  -	      .byte	%01111110	; CURVES
   1024  2b8d				  -	      .byte	%01111100	; CURVES
   1025  2b8d				  -
   1026  2b8d				  -			;byte %00000000 ; CURVES
   1027  2b8d				  -
   1028  2b8d				  -	      .byte	%00000110	; CURVES
   1029  2b8d				  -	      .byte	%00000110	; CURVES
   1030  2b8d				  -	      .byte	%00111110	; CURVES
   1031  2b8d				  -	      .byte	%01111110	; CURVES
   1032  2b8d				  -	      .byte	%01100110	; CURVES
   1033  2b8d				  -	      .byte	%01100110	; CURVES
   1034  2b8d				  -	      .byte	%01100110	; CURVES
   1035  2b8d				  -	      .byte	%01100110	; CURVES
   1036  2b8d				  -
   1037  2b8d				  -			;byte %00000000 ; CURVES
   1038  2b8d				  -
   1039  2b8d				  -	      .byte	%01111100	; CURVES
   1040  2b8d				  -	      .byte	%01111110	; CURVES
   1041  2b8d				  -	      .byte	%00000110	; CURVES
   1042  2b8d				  -	      .byte	%01111110	; CURVES
   1043  2b8d				  -	      .byte	%01111100	; CURVES
   1044  2b8d				  -	      .byte	%01100000	; CURVES
   1045  2b8d				  -	      .byte	%01111110	; CURVES
   1046  2b8d				  -	      .byte	%01111110	; CURVES
   1047  2b8d				  -
   1048  2b8d				  -			;byte %00000000 ; CURVES
   1049  2b8d				  -
   1050  2b8d				  -	      .byte	%00111100	; CURVES
   1051  2b8d				  -	      .byte	%01111110	; CURVES
   1052  2b8d				  -	      .byte	%01100110	; CURVES
   1053  2b8d				  -	      .byte	%01111110	; CURVES
   1054  2b8d				  -	      .byte	%01111100	; CURVES
   1055  2b8d				  -	      .byte	%01100000	; CURVES
   1056  2b8d				  -	      .byte	%01111110	; CURVES
   1057  2b8d				  -	      .byte	%00111110	; CURVES
   1058  2b8d				  -
   1059  2b8d				  -			;byte %00000000 ; CURVES
   1060  2b8d				  -
   1061  2b8d				  -	      .byte	%00000110	; CURVES
   1062  2b8d				  -	      .byte	%00000110	; CURVES
   1063  2b8d				  -	      .byte	%00000110	; CURVES
   1064  2b8d				  -	      .byte	%00000110	; CURVES
   1065  2b8d				  -	      .byte	%00000110	; CURVES
   1066  2b8d				  -	      .byte	%01100110	; CURVES
   1067  2b8d				  -	      .byte	%01111110	; CURVES
   1068  2b8d				  -	      .byte	%00111100	; CURVES
   1069  2b8d				  -
   1070  2b8d				  -			;byte %00000000 ; CURVES
   1071  2b8d				  -
   1072  2b8d				  -	      .byte	%00111100	; CURVES
   1073  2b8d				  -	      .byte	%01111110	; CURVES
   1074  2b8d				  -	      .byte	%01100110	; CURVES
   1075  2b8d				  -	      .byte	%01111110	; CURVES
   1076  2b8d				  -	      .byte	%00111100	; CURVES
   1077  2b8d				  -	      .byte	%01100110	; CURVES
   1078  2b8d				  -	      .byte	%01111110	; CURVES
   1079  2b8d				  -	      .byte	%00111100	; CURVES
   1080  2b8d				  -
   1081  2b8d				  -			;byte %00000000 ; CURVES
   1082  2b8d				  -
   1083  2b8d				  -	      .byte	%01111100	; CURVES
   1084  2b8d				  -	      .byte	%01111110	; CURVES
   1085  2b8d				  -	      .byte	%00000110	; CURVES
   1086  2b8d				  -	      .byte	%00111110	; CURVES
   1087  2b8d				  -	      .byte	%01111110	; CURVES
   1088  2b8d				  -	      .byte	%01100110	; CURVES
   1089  2b8d				  -	      .byte	%01111110	; CURVES
   1090  2b8d				  -	      .byte	%00111100	; CURVES
   1091  2b8d				  -
   1092  2b8d					      endif		; CURVES
   1093  2b8d
   1094  2b8d
   1095  2b8d				  -	      if	fontstyle == HUSKY
   1096  2b8d				  -
   1097  2b8d				  -			;byte %00000000 ; HUSKY
   1098  2b8d				  -
   1099  2b8d				  -	      .byte	%01111100	; HUSKY
   1100  2b8d				  -	      .byte	%11111110	; HUSKY
   1101  2b8d				  -	      .byte	%11101110	; HUSKY
   1102  2b8d				  -	      .byte	%11101110	; HUSKY
   1103  2b8d				  -	      .byte	%11101110	; HUSKY
   1104  2b8d				  -	      .byte	%11101110	; HUSKY
   1105  2b8d				  -	      .byte	%11111110	; HUSKY
   1106  2b8d				  -	      .byte	%01111100	; HUSKY
   1107  2b8d				  -
   1108  2b8d				  -			;byte %00000000 ; HUSKY
   1109  2b8d				  -
   1110  2b8d				  -	      .byte	%00111000	; HUSKY
   1111  2b8d				  -	      .byte	%00111000	; HUSKY
   1112  2b8d				  -	      .byte	%00111000	; HUSKY
   1113  2b8d				  -	      .byte	%00111000	; HUSKY
   1114  2b8d				  -	      .byte	%00111000	; HUSKY
   1115  2b8d				  -	      .byte	%00111000	; HUSKY
   1116  2b8d				  -	      .byte	%00111000	; HUSKY
   1117  2b8d				  -	      .byte	%00111000	; HUSKY
   1118  2b8d				  -
   1119  2b8d				  -			;byte %00000000 ; HUSKY
   1120  2b8d				  -
   1121  2b8d				  -	      .byte	%11111110	; HUSKY
   1122  2b8d				  -	      .byte	%11111110	; HUSKY
   1123  2b8d				  -	      .byte	%11100000	; HUSKY
   1124  2b8d				  -	      .byte	%11111100	; HUSKY
   1125  2b8d				  -	      .byte	%01111110	; HUSKY
   1126  2b8d				  -	      .byte	%00001110	; HUSKY
   1127  2b8d				  -	      .byte	%11111110	; HUSKY
   1128  2b8d				  -	      .byte	%11111100	; HUSKY
   1129  2b8d				  -
   1130  2b8d				  -			;byte %00000000 ; HUSKY
   1131  2b8d				  -
   1132  2b8d				  -	      .byte	%11111100	; HUSKY
   1133  2b8d				  -	      .byte	%11111110	; HUSKY
   1134  2b8d				  -	      .byte	%00001110	; HUSKY
   1135  2b8d				  -	      .byte	%11111100	; HUSKY
   1136  2b8d				  -	      .byte	%11111100	; HUSKY
   1137  2b8d				  -	      .byte	%00001110	; HUSKY
   1138  2b8d				  -	      .byte	%11111110	; HUSKY
   1139  2b8d				  -	      .byte	%11111100	; HUSKY
   1140  2b8d				  -
   1141  2b8d				  -			;byte %00000000 ; HUSKY
   1142  2b8d				  -
   1143  2b8d				  -	      .byte	%00011100	; HUSKY
   1144  2b8d				  -	      .byte	%00011100	; HUSKY
   1145  2b8d				  -	      .byte	%11111110	; HUSKY
   1146  2b8d				  -	      .byte	%11111110	; HUSKY
   1147  2b8d				  -	      .byte	%11011100	; HUSKY
   1148  2b8d				  -	      .byte	%11011100	; HUSKY
   1149  2b8d				  -	      .byte	%00011100	; HUSKY
   1150  2b8d				  -	      .byte	%00011100	; HUSKY
   1151  2b8d				  -
   1152  2b8d				  -			;byte %00000000 ; HUSKY
   1153  2b8d				  -
   1154  2b8d				  -	      .byte	%11111100	; HUSKY
   1155  2b8d				  -	      .byte	%11111110	; HUSKY
   1156  2b8d				  -	      .byte	%00001110	; HUSKY
   1157  2b8d				  -	      .byte	%11111110	; HUSKY
   1158  2b8d				  -	      .byte	%11111100	; HUSKY
   1159  2b8d				  -	      .byte	%11100000	; HUSKY
   1160  2b8d				  -	      .byte	%11111110	; HUSKY
   1161  2b8d				  -	      .byte	%11111110	; HUSKY
   1162  2b8d				  -
   1163  2b8d				  -			;byte %00000000 ; HUSKY
   1164  2b8d				  -
   1165  2b8d				  -	      .byte	%01111100	; HUSKY
   1166  2b8d				  -	      .byte	%11111110	; HUSKY
   1167  2b8d				  -	      .byte	%11101110	; HUSKY
   1168  2b8d				  -	      .byte	%11111110	; HUSKY
   1169  2b8d				  -	      .byte	%11111100	; HUSKY
   1170  2b8d				  -	      .byte	%11100000	; HUSKY
   1171  2b8d				  -	      .byte	%11111110	; HUSKY
   1172  2b8d				  -	      .byte	%01111110	; HUSKY
   1173  2b8d				  -
   1174  2b8d				  -			;byte %00000000 ; HUSKY
   1175  2b8d				  -
   1176  2b8d				  -	      .byte	%00111000	; HUSKY
   1177  2b8d				  -	      .byte	%00111000	; HUSKY
   1178  2b8d				  -	      .byte	%00111000	; HUSKY
   1179  2b8d				  -	      .byte	%00111000	; HUSKY
   1180  2b8d				  -	      .byte	%00011100	; HUSKY
   1181  2b8d				  -	      .byte	%00001110	; HUSKY
   1182  2b8d				  -	      .byte	%11111110	; HUSKY
   1183  2b8d				  -	      .byte	%11111110	; HUSKY
   1184  2b8d				  -
   1185  2b8d				  -			;byte %00000000 ; HUSKY
   1186  2b8d				  -
   1187  2b8d				  -	      .byte	%01111100	; HUSKY
   1188  2b8d				  -	      .byte	%11111110	; HUSKY
   1189  2b8d				  -	      .byte	%11101110	; HUSKY
   1190  2b8d				  -	      .byte	%11111110	; HUSKY
   1191  2b8d				  -	      .byte	%01111100	; HUSKY
   1192  2b8d				  -	      .byte	%11101110	; HUSKY
   1193  2b8d				  -	      .byte	%11111110	; HUSKY
   1194  2b8d				  -	      .byte	%01111100	; HUSKY
   1195  2b8d				  -
   1196  2b8d				  -			;byte %00000000 ; HUSKY
   1197  2b8d				  -
   1198  2b8d				  -	      .byte	%11111100	; HUSKY
   1199  2b8d				  -	      .byte	%11111110	; HUSKY
   1200  2b8d				  -	      .byte	%00001110	; HUSKY
   1201  2b8d				  -	      .byte	%01111110	; HUSKY
   1202  2b8d				  -	      .byte	%11111110	; HUSKY
   1203  2b8d				  -	      .byte	%11101110	; HUSKY
   1204  2b8d				  -	      .byte	%11111110	; HUSKY
   1205  2b8d				  -	      .byte	%01111100	; HUSKY
   1206  2b8d				  -
   1207  2b8d					      endif		; HUSKY
   1208  2b8d
   1209  2b8d
   1210  2b8d				  -	      if	fontstyle == SNAKE
   1211  2b8d				  -
   1212  2b8d				  -			;byte %00000000 ; SNAKE
   1213  2b8d				  -
   1214  2b8d				  -	      .byte	%01111110	; SNAKE
   1215  2b8d				  -	      .byte	%01000010	; SNAKE
   1216  2b8d				  -	      .byte	%01000010	; SNAKE
   1217  2b8d				  -	      .byte	%01000010	; SNAKE
   1218  2b8d				  -	      .byte	%01000010	; SNAKE
   1219  2b8d				  -	      .byte	%01000010	; SNAKE
   1220  2b8d				  -	      .byte	%01000010	; SNAKE
   1221  2b8d				  -	      .byte	%01111110	; SNAKE
   1222  2b8d				  -
   1223  2b8d				  -			;byte %00000000 ; SNAKE
   1224  2b8d				  -
   1225  2b8d				  -	      .byte	%00111000	; SNAKE
   1226  2b8d				  -	      .byte	%00101000	; SNAKE
   1227  2b8d				  -	      .byte	%00001000	; SNAKE
   1228  2b8d				  -	      .byte	%00001000	; SNAKE
   1229  2b8d				  -	      .byte	%00001000	; SNAKE
   1230  2b8d				  -	      .byte	%00001000	; SNAKE
   1231  2b8d				  -	      .byte	%00001000	; SNAKE
   1232  2b8d				  -	      .byte	%00111000	; SNAKE
   1233  2b8d				  -
   1234  2b8d				  -			;byte %00000000 ; SNAKE
   1235  2b8d				  -
   1236  2b8d				  -	      .byte	%01111110	; SNAKE
   1237  2b8d				  -	      .byte	%01000010	; SNAKE
   1238  2b8d				  -	      .byte	%01000110	; SNAKE
   1239  2b8d				  -	      .byte	%01000000	; SNAKE
   1240  2b8d				  -	      .byte	%01111110	; SNAKE
   1241  2b8d				  -	      .byte	%00000010	; SNAKE
   1242  2b8d				  -	      .byte	%01000010	; SNAKE
   1243  2b8d				  -	      .byte	%01111110	; SNAKE
   1244  2b8d				  -
   1245  2b8d				  -			;byte %00000000 ; SNAKE
   1246  2b8d				  -
   1247  2b8d				  -	      .byte	%01111110	; SNAKE
   1248  2b8d				  -	      .byte	%01000010	; SNAKE
   1249  2b8d				  -	      .byte	%01100010	; SNAKE
   1250  2b8d				  -	      .byte	%00000010	; SNAKE
   1251  2b8d				  -	      .byte	%01111110	; SNAKE
   1252  2b8d				  -	      .byte	%00000010	; SNAKE
   1253  2b8d				  -	      .byte	%01000010	; SNAKE
   1254  2b8d				  -	      .byte	%01111110	; SNAKE
   1255  2b8d				  -
   1256  2b8d				  -			;byte %00000000 ; SNAKE
   1257  2b8d				  -
   1258  2b8d				  -	      .byte	%00001110	; SNAKE
   1259  2b8d				  -	      .byte	%00001010	; SNAKE
   1260  2b8d				  -	      .byte	%00000010	; SNAKE
   1261  2b8d				  -	      .byte	%01111110	; SNAKE
   1262  2b8d				  -	      .byte	%01000010	; SNAKE
   1263  2b8d				  -	      .byte	%01000010	; SNAKE
   1264  2b8d				  -	      .byte	%01000010	; SNAKE
   1265  2b8d				  -	      .byte	%01100110	; SNAKE
   1266  2b8d				  -
   1267  2b8d				  -			;byte %00000000 ; SNAKE
   1268  2b8d				  -
   1269  2b8d				  -	      .byte	%01111110	; SNAKE
   1270  2b8d				  -	      .byte	%01000010	; SNAKE
   1271  2b8d				  -	      .byte	%01100010	; SNAKE
   1272  2b8d				  -	      .byte	%00000010	; SNAKE
   1273  2b8d				  -	      .byte	%01111110	; SNAKE
   1274  2b8d				  -	      .byte	%01000000	; SNAKE
   1275  2b8d				  -	      .byte	%01000010	; SNAKE
   1276  2b8d				  -	      .byte	%01111110	; SNAKE
   1277  2b8d				  -
   1278  2b8d				  -			;byte %00000000 ; SNAKE
   1279  2b8d				  -
   1280  2b8d				  -	      .byte	%01111110	; SNAKE
   1281  2b8d				  -	      .byte	%01000010	; SNAKE
   1282  2b8d				  -	      .byte	%01000010	; SNAKE
   1283  2b8d				  -	      .byte	%01111110	; SNAKE
   1284  2b8d				  -	      .byte	%01000000	; SNAKE
   1285  2b8d				  -	      .byte	%01000110	; SNAKE
   1286  2b8d				  -	      .byte	%01000010	; SNAKE
   1287  2b8d				  -	      .byte	%01111110	; SNAKE
   1288  2b8d				  -
   1289  2b8d				  -			;byte %00000000 ; SNAKE
   1290  2b8d				  -
   1291  2b8d				  -	      .byte	%00000110	; SNAKE
   1292  2b8d				  -	      .byte	%00000010	; SNAKE
   1293  2b8d				  -	      .byte	%00000010	; SNAKE
   1294  2b8d				  -	      .byte	%00000010	; SNAKE
   1295  2b8d				  -	      .byte	%00000010	; SNAKE
   1296  2b8d				  -	      .byte	%01100010	; SNAKE
   1297  2b8d				  -	      .byte	%01000010	; SNAKE
   1298  2b8d				  -	      .byte	%01111110	; SNAKE
   1299  2b8d				  -
   1300  2b8d				  -			;byte %00000000 ; SNAKE
   1301  2b8d				  -
   1302  2b8d				  -	      .byte	%01111110	; SNAKE
   1303  2b8d				  -	      .byte	%01000010	; SNAKE
   1304  2b8d				  -	      .byte	%01000010	; SNAKE
   1305  2b8d				  -	      .byte	%01000010	; SNAKE
   1306  2b8d				  -	      .byte	%01111110	; SNAKE
   1307  2b8d				  -	      .byte	%01000010	; SNAKE
   1308  2b8d				  -	      .byte	%01000010	; SNAKE
   1309  2b8d				  -	      .byte	%01111110	; SNAKE
   1310  2b8d				  -
   1311  2b8d				  -			;byte %00000000 ; SNAKE
   1312  2b8d				  -
   1313  2b8d				  -	      .byte	%00001110	; SNAKE
   1314  2b8d				  -	      .byte	%00001010	; SNAKE
   1315  2b8d				  -	      .byte	%00000010	; SNAKE
   1316  2b8d				  -	      .byte	%00000010	; SNAKE
   1317  2b8d				  -	      .byte	%01111110	; SNAKE
   1318  2b8d				  -	      .byte	%01000010	; SNAKE
   1319  2b8d				  -	      .byte	%01000010	; SNAKE
   1320  2b8d				  -	      .byte	%01111110	; SNAKE
   1321  2b8d				  -
   1322  2b8d				  -
   1323  2b8d					      endif		; SNAKE
   1324  2b8d
   1325  2b8d				  -	      if	fontstyle == PLOK
   1326  2b8d				  -
   1327  2b8d				  -			;byte %00000000 ; PLOK
   1328  2b8d				  -
   1329  2b8d				  -	      .byte	%00000000	; PLOK
   1330  2b8d				  -	      .byte	%00111000	; PLOK
   1331  2b8d				  -	      .byte	%01100100	; PLOK
   1332  2b8d				  -	      .byte	%01100010	; PLOK
   1333  2b8d				  -	      .byte	%01100010	; PLOK
   1334  2b8d				  -	      .byte	%00110110	; PLOK
   1335  2b8d				  -	      .byte	%00011100	; PLOK
   1336  2b8d				  -	      .byte	%00000000	; PLOK
   1337  2b8d				  -
   1338  2b8d				  -			;byte %00000000 ; PLOK
   1339  2b8d				  -
   1340  2b8d				  -	      .byte	%00000000	; PLOK
   1341  2b8d				  -	      .byte	%00010000	; PLOK
   1342  2b8d				  -	      .byte	%00011100	; PLOK
   1343  2b8d				  -	      .byte	%00011100	; PLOK
   1344  2b8d				  -	      .byte	%00011000	; PLOK
   1345  2b8d				  -	      .byte	%00111000	; PLOK
   1346  2b8d				  -	      .byte	%00011000	; PLOK
   1347  2b8d				  -	      .byte	%00000000	; PLOK
   1348  2b8d				  -
   1349  2b8d				  -			;byte %00000000 ; PLOK
   1350  2b8d				  -
   1351  2b8d				  -	      .byte	%00000000	; PLOK
   1352  2b8d				  -	      .byte	%00001110	; PLOK
   1353  2b8d				  -	      .byte	%01111110	; PLOK
   1354  2b8d				  -	      .byte	%00011000	; PLOK
   1355  2b8d				  -	      .byte	%00001100	; PLOK
   1356  2b8d				  -	      .byte	%00000110	; PLOK
   1357  2b8d				  -	      .byte	%00111100	; PLOK
   1358  2b8d				  -	      .byte	%00000000	; PLOK
   1359  2b8d				  -
   1360  2b8d				  -			;byte %00000000 ; PLOK
   1361  2b8d				  -
   1362  2b8d				  -	      .byte	%00000000	; PLOK
   1363  2b8d				  -	      .byte	%00111100	; PLOK
   1364  2b8d				  -	      .byte	%01101110	; PLOK
   1365  2b8d				  -	      .byte	%00001110	; PLOK
   1366  2b8d				  -	      .byte	%00011100	; PLOK
   1367  2b8d				  -	      .byte	%00000110	; PLOK
   1368  2b8d				  -	      .byte	%01111100	; PLOK
   1369  2b8d				  -	      .byte	%00000000	; PLOK
   1370  2b8d				  -
   1371  2b8d				  -			;byte %00000000 ; PLOK
   1372  2b8d				  -
   1373  2b8d				  -	      .byte	%00000000	; PLOK
   1374  2b8d				  -	      .byte	%00011000	; PLOK
   1375  2b8d				  -	      .byte	%01111110	; PLOK
   1376  2b8d				  -	      .byte	%01101100	; PLOK
   1377  2b8d				  -	      .byte	%00100100	; PLOK
   1378  2b8d				  -	      .byte	%00110000	; PLOK
   1379  2b8d				  -	      .byte	%00110000	; PLOK
   1380  2b8d				  -	      .byte	%00000000	; PLOK
   1381  2b8d				  -
   1382  2b8d				  -			;byte %00000000 ; PLOK
   1383  2b8d				  -
   1384  2b8d				  -	      .byte	%00000000	; PLOK
   1385  2b8d				  -	      .byte	%00111100	; PLOK
   1386  2b8d				  -	      .byte	%01001110	; PLOK
   1387  2b8d				  -	      .byte	%00011100	; PLOK
   1388  2b8d				  -	      .byte	%01100000	; PLOK
   1389  2b8d				  -	      .byte	%01111100	; PLOK
   1390  2b8d				  -	      .byte	%00011100	; PLOK
   1391  2b8d				  -	      .byte	%00000000	; PLOK
   1392  2b8d				  -
   1393  2b8d				  -			;byte %00000000 ; PLOK
   1394  2b8d				  -
   1395  2b8d				  -	      .byte	%00000000	; PLOK
   1396  2b8d				  -	      .byte	%00111100	; PLOK
   1397  2b8d				  -	      .byte	%01000110	; PLOK
   1398  2b8d				  -	      .byte	%01101100	; PLOK
   1399  2b8d				  -	      .byte	%01110000	; PLOK
   1400  2b8d				  -	      .byte	%00111000	; PLOK
   1401  2b8d				  -	      .byte	%00010000	; PLOK
   1402  2b8d				  -	      .byte	%00000000	; PLOK
   1403  2b8d				  -
   1404  2b8d				  -			;byte %00000000 ; PLOK
   1405  2b8d				  -
   1406  2b8d				  -	      .byte	%00000000	; PLOK
   1407  2b8d				  -	      .byte	%00111100	; PLOK
   1408  2b8d				  -	      .byte	%00011100	; PLOK
   1409  2b8d				  -	      .byte	%00001100	; PLOK
   1410  2b8d				  -	      .byte	%00000110	; PLOK
   1411  2b8d				  -	      .byte	%01111110	; PLOK
   1412  2b8d				  -	      .byte	%00110000	; PLOK
   1413  2b8d				  -	      .byte	%00000000	; PLOK
   1414  2b8d				  -
   1415  2b8d				  -			;byte %00000000 ; PLOK
   1416  2b8d				  -
   1417  2b8d				  -	      .byte	%00000000	; PLOK
   1418  2b8d				  -	      .byte	%00111100	; PLOK
   1419  2b8d				  -	      .byte	%01001110	; PLOK
   1420  2b8d				  -	      .byte	%01101110	; PLOK
   1421  2b8d				  -	      .byte	%00111100	; PLOK
   1422  2b8d				  -	      .byte	%01100100	; PLOK
   1423  2b8d				  -	      .byte	%00111000	; PLOK
   1424  2b8d				  -	      .byte	%00000000	; PLOK
   1425  2b8d				  -
   1426  2b8d				  -			;byte %00000000 ; PLOK
   1427  2b8d				  -
   1428  2b8d				  -	      .byte	%00000000	; PLOK
   1429  2b8d				  -	      .byte	%00011000	; PLOK
   1430  2b8d				  -	      .byte	%00001100	; PLOK
   1431  2b8d				  -	      .byte	%00011100	; PLOK
   1432  2b8d				  -	      .byte	%00100110	; PLOK
   1433  2b8d				  -	      .byte	%01001110	; PLOK
   1434  2b8d				  -	      .byte	%00111100	; PLOK
   1435  2b8d				  -	      .byte	%00000000	; PLOK
   1436  2b8d				  -
   1437  2b8d					      endif		; PLOK
   1438  2b8d
   1439  2b8d							; ### any characters that aren't font specific follow...
   1440  2b8d
   1441  2b8d				  -	      ifconst	fontcharSPACE
   1442  2b8d				  -			;byte %00000000 ; SYMBOLS
   1443  2b8d				  -
   1444  2b8d				  -	      .byte	%00000000	; SYMBOLS
   1445  2b8d				  -	      .byte	%00000000	; SYMBOLS
   1446  2b8d				  -	      .byte	%00000000	; SYMBOLS
   1447  2b8d				  -	      .byte	%00000000	; SYMBOLS
   1448  2b8d				  -	      .byte	%00000000	; SYMBOLS
   1449  2b8d				  -	      .byte	%00000000	; SYMBOLS
   1450  2b8d				  -	      .byte	%00000000	; SYMBOLS
   1451  2b8d				  -	      .byte	%00000000	; SYMBOLS
   1452  2b8d				  -
   1453  2b8d				  -			;byte %00000000 ; SYMBOLS
   1454  2b8d					      endif		; fontcharSPACE
   1455  2b8d
   1456  2b8d				  -	      ifconst	fontcharDOLLAR
   1457  2b8d				  -			;byte %00000000 ; SYMBOLS
   1458  2b8d				  -
   1459  2b8d				  -	      .byte	%00000000	; SYMBOLS
   1460  2b8d				  -	      .byte	%00010000	; SYMBOLS
   1461  2b8d				  -	      .byte	%01111100	; SYMBOLS
   1462  2b8d				  -	      .byte	%00010010	; SYMBOLS
   1463  2b8d				  -	      .byte	%01111100	; SYMBOLS
   1464  2b8d				  -	      .byte	%10010000	; SYMBOLS
   1465  2b8d				  -	      .byte	%01111100	; SYMBOLS
   1466  2b8d				  -	      .byte	%00010000	; SYMBOLS
   1467  2b8d				  -
   1468  2b8d				  -			;byte %00000000 ; SYMBOLS
   1469  2b8d				  -
   1470  2b8d					      endif		; fontcharDOLLAR
   1471  2b8d
   1472  2b8d				  -	      ifconst	fontcharPOUND
   1473  2b8d				  -			;byte %00000000 ; SYMBOLS
   1474  2b8d				  -
   1475  2b8d				  -	      .byte	%01111110	; SYMBOLS
   1476  2b8d				  -	      .byte	%01000000	; SYMBOLS
   1477  2b8d				  -	      .byte	%00100000	; SYMBOLS
   1478  2b8d				  -	      .byte	%00100000	; SYMBOLS
   1479  2b8d				  -	      .byte	%01111000	; SYMBOLS
   1480  2b8d				  -	      .byte	%00100000	; SYMBOLS
   1481  2b8d				  -	      .byte	%00100010	; SYMBOLS
   1482  2b8d				  -	      .byte	%00011100	; SYMBOLS
   1483  2b8d				  -
   1484  2b8d				  -			;byte %00000000 ; SYMBOLS
   1485  2b8d				  -
   1486  2b8d					      endif		; fontcharPOUND
   1487  2b8d
   1488  2b8d
   1489  2b8d				  -	      ifconst	fontcharMRHAPPY
   1490  2b8d				  -			;byte %00000000 ; SYMBOLS
   1491  2b8d				  -
   1492  2b8d				  -	      .byte	%00111100	; SYMBOLS
   1493  2b8d				  -	      .byte	%01100110	; SYMBOLS
   1494  2b8d				  -	      .byte	%01011010	; SYMBOLS
   1495  2b8d				  -	      .byte	%01111110	; SYMBOLS
   1496  2b8d				  -	      .byte	%01111110	; SYMBOLS
   1497  2b8d				  -	      .byte	%01011010	; SYMBOLS
   1498  2b8d				  -	      .byte	%01111110	; SYMBOLS
   1499  2b8d				  -	      .byte	%00111100	; SYMBOLS
   1500  2b8d				  -
   1501  2b8d				  -			;byte %00000000 ; SYMBOLS
   1502  2b8d				  -
   1503  2b8d					      endif		; fontcharMRHAPPY
   1504  2b8d
   1505  2b8d				  -	      ifconst	fontcharMRSAD
   1506  2b8d				  -			;byte %00000000 ; SYMBOLS
   1507  2b8d				  -
   1508  2b8d				  -	      .byte	%00111100	; SYMBOLS
   1509  2b8d				  -	      .byte	%01011010	; SYMBOLS
   1510  2b8d				  -	      .byte	%01100110	; SYMBOLS
   1511  2b8d				  -	      .byte	%01111110	; SYMBOLS
   1512  2b8d				  -	      .byte	%01111110	; SYMBOLS
   1513  2b8d				  -	      .byte	%01011010	; SYMBOLS
   1514  2b8d				  -	      .byte	%01111110	; SYMBOLS
   1515  2b8d				  -	      .byte	%00111100	; SYMBOLS
   1516  2b8d				  -
   1517  2b8d				  -			;byte %00000000 ; SYMBOLS
   1518  2b8d				  -
   1519  2b8d					      endif		; fontcharMRSAD
   1520  2b8d
   1521  2b8d
   1522  2b8d				  -	      ifconst	fontcharCOPYRIGHT
   1523  2b8d				  -			;byte %00000000 ; SYMBOLS
   1524  2b8d				  -
   1525  2b8d				  -	      .byte	%00000000	; SYMBOLS
   1526  2b8d				  -	      .byte	%00111000	; SYMBOLS
   1527  2b8d				  -	      .byte	%01000100	; SYMBOLS
   1528  2b8d				  -	      .byte	%10111010	; SYMBOLS
   1529  2b8d				  -	      .byte	%10100010	; SYMBOLS
   1530  2b8d				  -	      .byte	%10111010	; SYMBOLS
   1531  2b8d				  -	      .byte	%01000100	; SYMBOLS
   1532  2b8d				  -	      .byte	%00111000	; SYMBOLS
   1533  2b8d				  -
   1534  2b8d				  -			;byte %00000000 ; SYMBOLS
   1535  2b8d				  -
   1536  2b8d					      endif		; fontcharCOPYRIGHT
   1537  2b8d
   1538  2b8d
   1539  2b8d				  -	      ifconst	fontcharFUJI
   1540  2b8d				  -
   1541  2b8d				  -			;byte %00000000 ; ** these commented-out blanks are for the preview generation program
   1542  2b8d				  -
   1543  2b8d				  -	      .byte	%01110000	; SYMBOLS
   1544  2b8d				  -	      .byte	%01111001	; SYMBOLS
   1545  2b8d				  -	      .byte	%00011101	; SYMBOLS
   1546  2b8d				  -	      .byte	%00001101	; SYMBOLS
   1547  2b8d				  -	      .byte	%00001101	; SYMBOLS
   1548  2b8d				  -	      .byte	%00001101	; SYMBOLS
   1549  2b8d				  -	      .byte	%00001101	; SYMBOLS
   1550  2b8d				  -	      .byte	%00000000	; SYMBOLS
   1551  2b8d				  -
   1552  2b8d				  -			;byte %00000000 ; SYMBOLS
   1553  2b8d				  -
   1554  2b8d				  -	      .byte	%00001110	; SYMBOLS
   1555  2b8d				  -	      .byte	%10011110	; SYMBOLS
   1556  2b8d				  -	      .byte	%10111000	; SYMBOLS
   1557  2b8d				  -	      .byte	%10110000	; SYMBOLS
   1558  2b8d				  -	      .byte	%10110000	; SYMBOLS
   1559  2b8d				  -	      .byte	%10110000	; SYMBOLS
   1560  2b8d				  -	      .byte	%10110000	; SYMBOLS
   1561  2b8d				  -	      .byte	%00000000	; SYMBOLS
   1562  2b8d				  -
   1563  2b8d				  -			;byte %00000000 ; SYMBOLS
   1564  2b8d				  -
   1565  2b8d					      endif		; fontcharFUJI
   1566  2b8d
   1567  2b8d
   1568  2b8d				  -	      ifconst	fontcharHEART
   1569  2b8d				  -			;byte %00000000 ; SYMBOLS
   1570  2b8d				  -
   1571  2b8d				  -	      .byte	%00010000	; SYMBOLS
   1572  2b8d				  -	      .byte	%00111000	; SYMBOLS
   1573  2b8d				  -	      .byte	%01111100	; SYMBOLS
   1574  2b8d				  -	      .byte	%01111100	; SYMBOLS
   1575  2b8d				  -	      .byte	%11111110	; SYMBOLS
   1576  2b8d				  -	      .byte	%11111110	; SYMBOLS
   1577  2b8d				  -	      .byte	%11101110	; SYMBOLS
   1578  2b8d				  -	      .byte	%01000100	; SYMBOLS
   1579  2b8d				  -
   1580  2b8d				  -			;byte %00000000 ; SYMBOLS
   1581  2b8d				  -
   1582  2b8d					      endif		; fontcharHEART
   1583  2b8d
   1584  2b8d				  -	      ifconst	fontcharDIAMOND
   1585  2b8d				  -			;byte %00000000 ; SYMBOLS
   1586  2b8d				  -
   1587  2b8d				  -	      .byte	%00010000	; SYMBOLS
   1588  2b8d				  -	      .byte	%00111000	; SYMBOLS
   1589  2b8d				  -	      .byte	%01111100	; SYMBOLS
   1590  2b8d				  -	      .byte	%11111110	; SYMBOLS
   1591  2b8d				  -	      .byte	%11111110	; SYMBOLS
   1592  2b8d				  -	      .byte	%01111100	; SYMBOLS
   1593  2b8d				  -	      .byte	%00111000	; SYMBOLS
   1594  2b8d				  -	      .byte	%00010000	; SYMBOLS
   1595  2b8d				  -
   1596  2b8d				  -			;byte %00000000 ; SYMBOLS
   1597  2b8d				  -
   1598  2b8d					      endif		; fontcharDIAMOND
   1599  2b8d
   1600  2b8d				  -	      ifconst	fontcharSPADE
   1601  2b8d				  -			;byte %00000000 ; SYMBOLS
   1602  2b8d				  -
   1603  2b8d				  -	      .byte	%00111000	; SYMBOLS
   1604  2b8d				  -	      .byte	%00010000	; SYMBOLS
   1605  2b8d				  -	      .byte	%01010100	; SYMBOLS
   1606  2b8d				  -	      .byte	%11111110	; SYMBOLS
   1607  2b8d				  -	      .byte	%11111110	; SYMBOLS
   1608  2b8d				  -	      .byte	%01111100	; SYMBOLS
   1609  2b8d				  -	      .byte	%00111000	; SYMBOLS
   1610  2b8d				  -	      .byte	%00010000	; SYMBOLS
   1611  2b8d				  -
   1612  2b8d				  -			;byte %00000000 ; SYMBOLS
   1613  2b8d				  -
   1614  2b8d					      endif		; fontcharSPADE
   1615  2b8d
   1616  2b8d				  -	      ifconst	fontcharCLUB
   1617  2b8d				  -			;byte %00000000 ; SYMBOLS
   1618  2b8d				  -
   1619  2b8d				  -	      .byte	%00111000	; SYMBOLS
   1620  2b8d				  -	      .byte	%00010000	; SYMBOLS
   1621  2b8d				  -	      .byte	%11010110	; SYMBOLS
   1622  2b8d				  -	      .byte	%11111110	; SYMBOLS
   1623  2b8d				  -	      .byte	%11010110	; SYMBOLS
   1624  2b8d				  -	      .byte	%00111000	; SYMBOLS
   1625  2b8d				  -	      .byte	%00111000	; SYMBOLS
   1626  2b8d				  -	      .byte	%00000000	; SYMBOLS
   1627  2b8d				  -
   1628  2b8d				  -			;byte %00000000 ; SYMBOLS
   1629  2b8d				  -
   1630  2b8d					      endif		; fontcharCLUB
   1631  2b8d
   1632  2b8d
   1633  2b8d				  -	      ifconst	fontcharCOLON
   1634  2b8d				  -			;byte %00000000 ; SYMBOLS
   1635  2b8d				  -
   1636  2b8d				  -	      .byte	%00000000	; SYMBOLS
   1637  2b8d				  -	      .byte	%00011000	; SYMBOLS
   1638  2b8d				  -	      .byte	%00011000	; SYMBOLS
   1639  2b8d				  -	      .byte	%00000000	; SYMBOLS
   1640  2b8d				  -	      .byte	%00000000	; SYMBOLS
   1641  2b8d				  -	      .byte	%00011000	; SYMBOLS
   1642  2b8d				  -	      .byte	%00011000	; SYMBOLS
   1643  2b8d				  -	      .byte	%00000000	; SYMBOLS
   1644  2b8d				  -
   1645  2b8d				  -			;byte %00000000 ; SYMBOLS
   1646  2b8d				  -
   1647  2b8d					      endif		; fontcharCOLON
   1648  2b8d
   1649  2b8d
   1650  2b8d				  -	      ifconst	fontcharBLOCK
   1651  2b8d				  -
   1652  2b8d				  -			;byte %00000000 ; SYMBOLS
   1653  2b8d				  -
   1654  2b8d				  -	      .byte	%11111111	; SYMBOLS
   1655  2b8d				  -	      .byte	%11111111	; SYMBOLS
   1656  2b8d				  -	      .byte	%11111111	; SYMBOLS
   1657  2b8d				  -	      .byte	%11111111	; SYMBOLS
   1658  2b8d				  -	      .byte	%11111111	; SYMBOLS
   1659  2b8d				  -	      .byte	%11111111	; SYMBOLS
   1660  2b8d				  -	      .byte	%11111111	; SYMBOLS
   1661  2b8d				  -	      .byte	%11111111	; SYMBOLS
   1662  2b8d				  -
   1663  2b8d				  -			;byte %00000000 ; SYMBOLS
   1664  2b8d				  -
   1665  2b8d					      endif		; fontcharBLOCK
   1666  2b8d
   1667  2b8d				  -	      ifconst	fontcharUNDERLINE
   1668  2b8d				  -
   1669  2b8d				  -			;byte %00000000 ; SYMBOLS
   1670  2b8d				  -
   1671  2b8d				  -	      .byte	%11111111	; SYMBOLS
   1672  2b8d				  -	      .byte	%00000000	; SYMBOLS
   1673  2b8d				  -	      .byte	%00000000	; SYMBOLS
   1674  2b8d				  -	      .byte	%00000000	; SYMBOLS
   1675  2b8d				  -	      .byte	%00000000	; SYMBOLS
   1676  2b8d				  -	      .byte	%00000000	; SYMBOLS
   1677  2b8d				  -	      .byte	%00000000	; SYMBOLS
   1678  2b8d				  -	      .byte	%00000000	; SYMBOLS
   1679  2b8d				  -
   1680  2b8d				  -			;byte %00000000 ; SYMBOLS
   1681  2b8d				  -
   1682  2b8d					      endif		; fontcharUNDERLINE
   1683  2b8d
   1684  2b8d				  -	      ifconst	fontcharARISIDE
   1685  2b8d				  -			;byte %00000000 ; SYMBOLS
   1686  2b8d				  -
   1687  2b8d				  -	      .byte	%00000000	; SYMBOLS
   1688  2b8d				  -	      .byte	%00101010	; SYMBOLS
   1689  2b8d				  -	      .byte	%00101010	; SYMBOLS
   1690  2b8d				  -	      .byte	%00101100	; SYMBOLS
   1691  2b8d				  -	      .byte	%01111111	; SYMBOLS
   1692  2b8d				  -	      .byte	%00110111	; SYMBOLS
   1693  2b8d				  -	      .byte	%00000010	; SYMBOLS
   1694  2b8d				  -	      .byte	%00000001	; SYMBOLS
   1695  2b8d				  -
   1696  2b8d				  -			;byte %00000000 ; SYMBOLS
   1697  2b8d				  -
   1698  2b8d					      endif		; fontcharARISIDE
   1699  2b8d
   1700  2b8d				  -	      ifconst	fontcharARIFACE
   1701  2b8d				  -			;byte %00000000 ; SYMBOLS
   1702  2b8d				  -
   1703  2b8d				  -	      .byte	%00001000	; SYMBOLS
   1704  2b8d				  -	      .byte	%00011100	; SYMBOLS
   1705  2b8d				  -	      .byte	%00111110	; SYMBOLS
   1706  2b8d				  -	      .byte	%00101010	; SYMBOLS
   1707  2b8d				  -	      .byte	%00011100	; SYMBOLS
   1708  2b8d				  -	      .byte	%01010100	; SYMBOLS
   1709  2b8d				  -	      .byte	%00100100	; SYMBOLS
   1710  2b8d				  -	      .byte	%00000010	; SYMBOLS
   1711  2b8d				  -
   1712  2b8d				  -			;byte %00000000 ; SYMBOLS
   1713  2b8d				  -
   1714  2b8d				  -
   1715  2b8d					      endif		; fontcharARIRACE
   1716  2b8d
------- FILE titlescreen/asm/titlescreen.asm
    303  2b8d					      endif
    304  2b8d
    305  2b8d					      ifconst	mk_gameselect_on
------- FILE titlescreen/gameselect_image.asm LEVEL 3 PASS 3
      0  2b8d					      include	"titlescreen/gameselect_image.asm"
      1  2b8d				  -	      ifnconst	bmp_gameselect_color
      2  2b8d				  -bmp_gameselect_color
      3  2b8d					      endif
      4  2b8d		       0f		      .byte.b	$0f
      5  2b8e
      6  2b8e				  -	      if	>. != >[.+5]
      7  2b8e				  -	      align	256
      8  2b8e					      endif
      9  2b8e				   bmp_gameselect_CHAR0
     10  2b8e
     11  2b8e		       7a		      .byte.b	%01111010
     12  2b8f		       8a		      .byte.b	%10001010
     13  2b90		       bb		      .byte.b	%10111011
     14  2b91		       82		      .byte.b	%10000010
     15  2b92		       79		      .byte.b	%01111001
     16  2b93
     17  2b93				  -	      if	>. != >[.+5]
     18  2b93				  -	      align	256
     19  2b93					      endif
     20  2b93				   bmp_gameselect_CHAR1
     21  2b93
     22  2b93		       51		      .byte.b	%01010001
     23  2b94		       51		      .byte.b	%01010001
     24  2b95		       d5		      .byte.b	%11010101
     25  2b96		       5b		      .byte.b	%01011011
     26  2b97		       91		      .byte.b	%10010001
     27  2b98
     28  2b98				  -	      if	>. != >[.+5]
     29  2b98				  -	      align	256
     30  2b98					      endif
     31  2b98				   bmp_gameselect_CHAR2
     32  2b98		       78		      .byte.b	%01111000
     33  2b99		       40		      .byte.b	%01000000
     34  2b9a		       70		      .byte.b	%01110000
     35  2b9b		       40		      .byte.b	%01000000
     36  2b9c		       78		      .byte.b	%01111000
     37  2b9d
     38  2b9d				  -	      if	>. != >[.+5]
     39  2b9d				  -	      align	256
     40  2b9d					      endif
     41  2b9d				   bmp_gameselect_CHAR3
     42  2b9d		       00		      .byte.b	%00000000
     43  2b9e		       00		      .byte.b	%00000000
     44  2b9f		       00		      .byte.b	%00000000
     45  2ba0		       00		      .byte.b	%00000000
     46  2ba1		       00		      .byte.b	%00000000
     47  2ba2
     48  2ba2				  -	      if	>. != >[.+80]
     49  2ba2				  -	      align	256
     50  2ba2					      endif
     51  2ba2
     52  2ba2				   font_gameselect_img
     53  2ba2		       3c		      .byte.b	%00111100
     54  2ba3		       66		      .byte.b	%01100110
     55  2ba4		       66		      .byte.b	%01100110
     56  2ba5		       66		      .byte.b	%01100110
     57  2ba6		       3c		      .byte.b	%00111100
     58  2ba7
     59  2ba7		       3c		      .byte.b	%00111100
     60  2ba8		       18		      .byte.b	%00011000
     61  2ba9		       18		      .byte.b	%00011000
     62  2baa		       18		      .byte.b	%00011000
     63  2bab		       38		      .byte.b	%00111000
     64  2bac
     65  2bac		       7e		      .byte.b	%01111110
     66  2bad		       60		      .byte.b	%01100000
     67  2bae		       3c		      .byte.b	%00111100
     68  2baf		       06		      .byte.b	%00000110
     69  2bb0		       7c		      .byte.b	%01111100
     70  2bb1
     71  2bb1		       7c		      .byte.b	%01111100
     72  2bb2		       06		      .byte.b	%00000110
     73  2bb3		       1c		      .byte.b	%00011100
     74  2bb4		       06		      .byte.b	%00000110
     75  2bb5		       7c		      .byte.b	%01111100
     76  2bb6
     77  2bb6		       06		      .byte.b	%00000110
     78  2bb7		       06		      .byte.b	%00000110
     79  2bb8		       7e		      .byte.b	%01111110
     80  2bb9		       66		      .byte.b	%01100110
     81  2bba		       66		      .byte.b	%01100110
     82  2bbb
     83  2bbb		       7c		      .byte.b	%01111100
     84  2bbc		       06		      .byte.b	%00000110
     85  2bbd		       7c		      .byte.b	%01111100
     86  2bbe		       60		      .byte.b	%01100000
     87  2bbf		       7e		      .byte.b	%01111110
     88  2bc0
     89  2bc0		       3c		      .byte.b	%00111100
     90  2bc1		       66		      .byte.b	%01100110
     91  2bc2		       7c		      .byte.b	%01111100
     92  2bc3		       60		      .byte.b	%01100000
     93  2bc4		       3c		      .byte.b	%00111100
     94  2bc5
     95  2bc5		       18		      .byte.b	%00011000
     96  2bc6		       18		      .byte.b	%00011000
     97  2bc7		       0c		      .byte.b	%00001100
     98  2bc8		       06		      .byte.b	%00000110
     99  2bc9		       7e		      .byte.b	%01111110
    100  2bca
    101  2bca		       3c		      .byte.b	%00111100
    102  2bcb		       66		      .byte.b	%01100110
    103  2bcc		       3c		      .byte.b	%00111100
    104  2bcd		       66		      .byte.b	%01100110
    105  2bce		       3c		      .byte.b	%00111100
    106  2bcf
    107  2bcf		       3c		      .byte.b	%00111100
    108  2bd0		       06		      .byte.b	%00000110
    109  2bd1		       3e		      .byte.b	%00111110
    110  2bd2		       66		      .byte.b	%01100110
    111  2bd3		       3c		      .byte.b	%00111100
    112  2bd4
    113  2bd4				  -	      ifnconst	gamenumber
    114  2bd4				  -gamenumber
    115  2bd4					      endif
    116  2bd4		       00		      .byte.b	0
    117  2bd5
------- FILE titlescreen/asm/titlescreen.asm
    307  2bd5					      endif
    308  2bd5
    309  2bd5				  -	      ifconst	mk_player_on
    310  2bd5				  -	      include	"titlescreen/asm/player_kernel.asm"
    311  2bd5					      endif		;mk_player_on
    312  2bd5
    313  2bd5
------- FILE d:\Firmaplus\Firmaplus_intern\Atari\PlusROM\Projekte-batariBasic\CaveApocalypse\C.A.V.E. Apocalypse.bas.asm
   5454  2bd5
   5455  2bd5				   .
   5456  2bd5							; 
   5457  2bd5
   5458  2bd5				   .L0580		;  bank 3
   5459  2bd5
   5460  2bd5					      if	ECHO2
      1020 bytes of ROM space left in bank 2
   5461  2bd5					      echo	"    ",[(start_bank2 - *)]d , "bytes of ROM space left in bank 2")
   5462  2bd5					      endif
   5463  2bd5		       00 01	   ECHO2      =	1
   5464  2fd1					      ORG	$2FF4-bscode_length
   5465  2fd1					      RORG	$BFF4-bscode_length
   5466  2fd1		       a2 ff	   start_bank2 ldx	#$ff
   5467  2fd3				  -	      ifconst	FASTFETCH	; using DPC+
   5468  2fd3				  -	      stx	FASTFETCH
   5469  2fd3					      endif
   5470  2fd3		       9a		      txs
   5471  2fd4				  -	      if	bankswitch == 64
   5472  2fd4				  -	      lda	#(((>(start-1)) & $0F) | $F0)
   5473  2fd4					      else
   5474  2fd4		       a9 f2		      lda	#>(start-1)
   5475  2fd6					      endif
   5476  2fd6		       48		      pha
   5477  2fd7		       a9 b0		      lda	#<(start-1)
   5478  2fd9		       48		      pha
   5479  2fda		       48		      pha
   5480  2fdb		       8a		      txa
   5481  2fdc		       48		      pha
   5482  2fdd		       ba		      tsx
   5483  2fde					      if	bankswitch != 64
   5484  2fde		       b5 04		      lda	4,x	; get high byte of return address
   5485  2fe0		       2a		      rol
   5486  2fe1		       2a		      rol
   5487  2fe2		       2a		      rol
   5488  2fe3		       2a		      rol
   5489  2fe4		       29 03		      and	#bs_mask	;1 3 or 7 for F8/F6/F4
   5490  2fe6		       aa		      tax
   5491  2fe7		       e8		      inx
   5492  2fe8				  -	      else
   5493  2fe8				  -	      lda	4,x	; get high byte of return address
   5494  2fe8				  -	      tay
   5495  2fe8				  -	      ora	#$10	; change our bank nibble into a valid rom mirror
   5496  2fe8				  -	      sta	4,x
   5497  2fe8				  -	      tya
   5498  2fe8				  -	      lsr
   5499  2fe8				  -	      lsr
   5500  2fe8				  -	      lsr
   5501  2fe8				  -	      lsr
   5502  2fe8				  -	      tax
   5503  2fe8				  -	      inx
   5504  2fe8					      endif
   5505  2fe8		       bd f5 1f 	      lda	bankswitch_hotspot-1,x
   5506  2feb		       68		      pla
   5507  2fec		       aa		      tax
   5508  2fed		       68		      pla
   5509  2fee		       60		      rts
   5510  2fef				  -	      if	((* & $1FFF) > ((bankswitch_hotspot & $1FFF) - 1))
   5511  2fef				  -	      echo	"WARNING: size parameter in banksw.asm too small - the program probably will not work."
   5512  2fef				  -	      echo	"Change to",[(*-begin_bscode+1)&$FF]d,"and try again."
   5513  2fef					      endif
   5514  2ffc					      ORG	$2FFC
   5515  2ffc					      RORG	$BFFC
   5516  2ffc		       d1 bf		      .word.w	(start_bank2 & $ffff)
   5517  2ffe		       d1 bf		      .word.w	(start_bank2 & $ffff)
   5518  3000					      ORG	$3000
   5519  3000					      RORG	$D000
   5520  3000					      repeat	256
   5521  3000		       ff		      .byte.b	$ff
   5520  3000					      repend
   5521  3001		       ff		      .byte.b	$ff
   5520  3001					      repend
   5521  3002		       ff		      .byte.b	$ff
   5520  3002					      repend
   5521  3003		       ff		      .byte.b	$ff
   5520  3003					      repend
   5521  3004		       ff		      .byte.b	$ff
   5520  3004					      repend
   5521  3005		       ff		      .byte.b	$ff
   5520  3005					      repend
   5521  3006		       ff		      .byte.b	$ff
   5520  3006					      repend
   5521  3007		       ff		      .byte.b	$ff
   5520  3007					      repend
   5521  3008		       ff		      .byte.b	$ff
   5520  3008					      repend
   5521  3009		       ff		      .byte.b	$ff
   5520  3009					      repend
   5521  300a		       ff		      .byte.b	$ff
   5520  300a					      repend
   5521  300b		       ff		      .byte.b	$ff
   5520  300b					      repend
   5521  300c		       ff		      .byte.b	$ff
   5520  300c					      repend
   5521  300d		       ff		      .byte.b	$ff
   5520  300d					      repend
   5521  300e		       ff		      .byte.b	$ff
   5520  300e					      repend
   5521  300f		       ff		      .byte.b	$ff
   5520  300f					      repend
   5521  3010		       ff		      .byte.b	$ff
   5520  3010					      repend
   5521  3011		       ff		      .byte.b	$ff
   5520  3011					      repend
   5521  3012		       ff		      .byte.b	$ff
   5520  3012					      repend
   5521  3013		       ff		      .byte.b	$ff
   5520  3013					      repend
   5521  3014		       ff		      .byte.b	$ff
   5520  3014					      repend
   5521  3015		       ff		      .byte.b	$ff
   5520  3015					      repend
   5521  3016		       ff		      .byte.b	$ff
   5520  3016					      repend
   5521  3017		       ff		      .byte.b	$ff
   5520  3017					      repend
   5521  3018		       ff		      .byte.b	$ff
   5520  3018					      repend
   5521  3019		       ff		      .byte.b	$ff
   5520  3019					      repend
   5521  301a		       ff		      .byte.b	$ff
   5520  301a					      repend
   5521  301b		       ff		      .byte.b	$ff
   5520  301b					      repend
   5521  301c		       ff		      .byte.b	$ff
   5520  301c					      repend
   5521  301d		       ff		      .byte.b	$ff
   5520  301d					      repend
   5521  301e		       ff		      .byte.b	$ff
   5520  301e					      repend
   5521  301f		       ff		      .byte.b	$ff
   5520  301f					      repend
   5521  3020		       ff		      .byte.b	$ff
   5520  3020					      repend
   5521  3021		       ff		      .byte.b	$ff
   5520  3021					      repend
   5521  3022		       ff		      .byte.b	$ff
   5520  3022					      repend
   5521  3023		       ff		      .byte.b	$ff
   5520  3023					      repend
   5521  3024		       ff		      .byte.b	$ff
   5520  3024					      repend
   5521  3025		       ff		      .byte.b	$ff
   5520  3025					      repend
   5521  3026		       ff		      .byte.b	$ff
   5520  3026					      repend
   5521  3027		       ff		      .byte.b	$ff
   5520  3027					      repend
   5521  3028		       ff		      .byte.b	$ff
   5520  3028					      repend
   5521  3029		       ff		      .byte.b	$ff
   5520  3029					      repend
   5521  302a		       ff		      .byte.b	$ff
   5520  302a					      repend
   5521  302b		       ff		      .byte.b	$ff
   5520  302b					      repend
   5521  302c		       ff		      .byte.b	$ff
   5520  302c					      repend
   5521  302d		       ff		      .byte.b	$ff
   5520  302d					      repend
   5521  302e		       ff		      .byte.b	$ff
   5520  302e					      repend
   5521  302f		       ff		      .byte.b	$ff
   5520  302f					      repend
   5521  3030		       ff		      .byte.b	$ff
   5520  3030					      repend
   5521  3031		       ff		      .byte.b	$ff
   5520  3031					      repend
   5521  3032		       ff		      .byte.b	$ff
   5520  3032					      repend
   5521  3033		       ff		      .byte.b	$ff
   5520  3033					      repend
   5521  3034		       ff		      .byte.b	$ff
   5520  3034					      repend
   5521  3035		       ff		      .byte.b	$ff
   5520  3035					      repend
   5521  3036		       ff		      .byte.b	$ff
   5520  3036					      repend
   5521  3037		       ff		      .byte.b	$ff
   5520  3037					      repend
   5521  3038		       ff		      .byte.b	$ff
   5520  3038					      repend
   5521  3039		       ff		      .byte.b	$ff
   5520  3039					      repend
   5521  303a		       ff		      .byte.b	$ff
   5520  303a					      repend
   5521  303b		       ff		      .byte.b	$ff
   5520  303b					      repend
   5521  303c		       ff		      .byte.b	$ff
   5520  303c					      repend
   5521  303d		       ff		      .byte.b	$ff
   5520  303d					      repend
   5521  303e		       ff		      .byte.b	$ff
   5520  303e					      repend
   5521  303f		       ff		      .byte.b	$ff
   5520  303f					      repend
   5521  3040		       ff		      .byte.b	$ff
   5520  3040					      repend
   5521  3041		       ff		      .byte.b	$ff
   5520  3041					      repend
   5521  3042		       ff		      .byte.b	$ff
   5520  3042					      repend
   5521  3043		       ff		      .byte.b	$ff
   5520  3043					      repend
   5521  3044		       ff		      .byte.b	$ff
   5520  3044					      repend
   5521  3045		       ff		      .byte.b	$ff
   5520  3045					      repend
   5521  3046		       ff		      .byte.b	$ff
   5520  3046					      repend
   5521  3047		       ff		      .byte.b	$ff
   5520  3047					      repend
   5521  3048		       ff		      .byte.b	$ff
   5520  3048					      repend
   5521  3049		       ff		      .byte.b	$ff
   5520  3049					      repend
   5521  304a		       ff		      .byte.b	$ff
   5520  304a					      repend
   5521  304b		       ff		      .byte.b	$ff
   5520  304b					      repend
   5521  304c		       ff		      .byte.b	$ff
   5520  304c					      repend
   5521  304d		       ff		      .byte.b	$ff
   5520  304d					      repend
   5521  304e		       ff		      .byte.b	$ff
   5520  304e					      repend
   5521  304f		       ff		      .byte.b	$ff
   5520  304f					      repend
   5521  3050		       ff		      .byte.b	$ff
   5520  3050					      repend
   5521  3051		       ff		      .byte.b	$ff
   5520  3051					      repend
   5521  3052		       ff		      .byte.b	$ff
   5520  3052					      repend
   5521  3053		       ff		      .byte.b	$ff
   5520  3053					      repend
   5521  3054		       ff		      .byte.b	$ff
   5520  3054					      repend
   5521  3055		       ff		      .byte.b	$ff
   5520  3055					      repend
   5521  3056		       ff		      .byte.b	$ff
   5520  3056					      repend
   5521  3057		       ff		      .byte.b	$ff
   5520  3057					      repend
   5521  3058		       ff		      .byte.b	$ff
   5520  3058					      repend
   5521  3059		       ff		      .byte.b	$ff
   5520  3059					      repend
   5521  305a		       ff		      .byte.b	$ff
   5520  305a					      repend
   5521  305b		       ff		      .byte.b	$ff
   5520  305b					      repend
   5521  305c		       ff		      .byte.b	$ff
   5520  305c					      repend
   5521  305d		       ff		      .byte.b	$ff
   5520  305d					      repend
   5521  305e		       ff		      .byte.b	$ff
   5520  305e					      repend
   5521  305f		       ff		      .byte.b	$ff
   5520  305f					      repend
   5521  3060		       ff		      .byte.b	$ff
   5520  3060					      repend
   5521  3061		       ff		      .byte.b	$ff
   5520  3061					      repend
   5521  3062		       ff		      .byte.b	$ff
   5520  3062					      repend
   5521  3063		       ff		      .byte.b	$ff
   5520  3063					      repend
   5521  3064		       ff		      .byte.b	$ff
   5520  3064					      repend
   5521  3065		       ff		      .byte.b	$ff
   5520  3065					      repend
   5521  3066		       ff		      .byte.b	$ff
   5520  3066					      repend
   5521  3067		       ff		      .byte.b	$ff
   5520  3067					      repend
   5521  3068		       ff		      .byte.b	$ff
   5520  3068					      repend
   5521  3069		       ff		      .byte.b	$ff
   5520  3069					      repend
   5521  306a		       ff		      .byte.b	$ff
   5520  306a					      repend
   5521  306b		       ff		      .byte.b	$ff
   5520  306b					      repend
   5521  306c		       ff		      .byte.b	$ff
   5520  306c					      repend
   5521  306d		       ff		      .byte.b	$ff
   5520  306d					      repend
   5521  306e		       ff		      .byte.b	$ff
   5520  306e					      repend
   5521  306f		       ff		      .byte.b	$ff
   5520  306f					      repend
   5521  3070		       ff		      .byte.b	$ff
   5520  3070					      repend
   5521  3071		       ff		      .byte.b	$ff
   5520  3071					      repend
   5521  3072		       ff		      .byte.b	$ff
   5520  3072					      repend
   5521  3073		       ff		      .byte.b	$ff
   5520  3073					      repend
   5521  3074		       ff		      .byte.b	$ff
   5520  3074					      repend
   5521  3075		       ff		      .byte.b	$ff
   5520  3075					      repend
   5521  3076		       ff		      .byte.b	$ff
   5520  3076					      repend
   5521  3077		       ff		      .byte.b	$ff
   5520  3077					      repend
   5521  3078		       ff		      .byte.b	$ff
   5520  3078					      repend
   5521  3079		       ff		      .byte.b	$ff
   5520  3079					      repend
   5521  307a		       ff		      .byte.b	$ff
   5520  307a					      repend
   5521  307b		       ff		      .byte.b	$ff
   5520  307b					      repend
   5521  307c		       ff		      .byte.b	$ff
   5520  307c					      repend
   5521  307d		       ff		      .byte.b	$ff
   5520  307d					      repend
   5521  307e		       ff		      .byte.b	$ff
   5520  307e					      repend
   5521  307f		       ff		      .byte.b	$ff
   5520  307f					      repend
   5521  3080		       ff		      .byte.b	$ff
   5520  3080					      repend
   5521  3081		       ff		      .byte.b	$ff
   5520  3081					      repend
   5521  3082		       ff		      .byte.b	$ff
   5520  3082					      repend
   5521  3083		       ff		      .byte.b	$ff
   5520  3083					      repend
   5521  3084		       ff		      .byte.b	$ff
   5520  3084					      repend
   5521  3085		       ff		      .byte.b	$ff
   5520  3085					      repend
   5521  3086		       ff		      .byte.b	$ff
   5520  3086					      repend
   5521  3087		       ff		      .byte.b	$ff
   5520  3087					      repend
   5521  3088		       ff		      .byte.b	$ff
   5520  3088					      repend
   5521  3089		       ff		      .byte.b	$ff
   5520  3089					      repend
   5521  308a		       ff		      .byte.b	$ff
   5520  308a					      repend
   5521  308b		       ff		      .byte.b	$ff
   5520  308b					      repend
   5521  308c		       ff		      .byte.b	$ff
   5520  308c					      repend
   5521  308d		       ff		      .byte.b	$ff
   5520  308d					      repend
   5521  308e		       ff		      .byte.b	$ff
   5520  308e					      repend
   5521  308f		       ff		      .byte.b	$ff
   5520  308f					      repend
   5521  3090		       ff		      .byte.b	$ff
   5520  3090					      repend
   5521  3091		       ff		      .byte.b	$ff
   5520  3091					      repend
   5521  3092		       ff		      .byte.b	$ff
   5520  3092					      repend
   5521  3093		       ff		      .byte.b	$ff
   5520  3093					      repend
   5521  3094		       ff		      .byte.b	$ff
   5520  3094					      repend
   5521  3095		       ff		      .byte.b	$ff
   5520  3095					      repend
   5521  3096		       ff		      .byte.b	$ff
   5520  3096					      repend
   5521  3097		       ff		      .byte.b	$ff
   5520  3097					      repend
   5521  3098		       ff		      .byte.b	$ff
   5520  3098					      repend
   5521  3099		       ff		      .byte.b	$ff
   5520  3099					      repend
   5521  309a		       ff		      .byte.b	$ff
   5520  309a					      repend
   5521  309b		       ff		      .byte.b	$ff
   5520  309b					      repend
   5521  309c		       ff		      .byte.b	$ff
   5520  309c					      repend
   5521  309d		       ff		      .byte.b	$ff
   5520  309d					      repend
   5521  309e		       ff		      .byte.b	$ff
   5520  309e					      repend
   5521  309f		       ff		      .byte.b	$ff
   5520  309f					      repend
   5521  30a0		       ff		      .byte.b	$ff
   5520  30a0					      repend
   5521  30a1		       ff		      .byte.b	$ff
   5520  30a1					      repend
   5521  30a2		       ff		      .byte.b	$ff
   5520  30a2					      repend
   5521  30a3		       ff		      .byte.b	$ff
   5520  30a3					      repend
   5521  30a4		       ff		      .byte.b	$ff
   5520  30a4					      repend
   5521  30a5		       ff		      .byte.b	$ff
   5520  30a5					      repend
   5521  30a6		       ff		      .byte.b	$ff
   5520  30a6					      repend
   5521  30a7		       ff		      .byte.b	$ff
   5520  30a7					      repend
   5521  30a8		       ff		      .byte.b	$ff
   5520  30a8					      repend
   5521  30a9		       ff		      .byte.b	$ff
   5520  30a9					      repend
   5521  30aa		       ff		      .byte.b	$ff
   5520  30aa					      repend
   5521  30ab		       ff		      .byte.b	$ff
   5520  30ab					      repend
   5521  30ac		       ff		      .byte.b	$ff
   5520  30ac					      repend
   5521  30ad		       ff		      .byte.b	$ff
   5520  30ad					      repend
   5521  30ae		       ff		      .byte.b	$ff
   5520  30ae					      repend
   5521  30af		       ff		      .byte.b	$ff
   5520  30af					      repend
   5521  30b0		       ff		      .byte.b	$ff
   5520  30b0					      repend
   5521  30b1		       ff		      .byte.b	$ff
   5520  30b1					      repend
   5521  30b2		       ff		      .byte.b	$ff
   5520  30b2					      repend
   5521  30b3		       ff		      .byte.b	$ff
   5520  30b3					      repend
   5521  30b4		       ff		      .byte.b	$ff
   5520  30b4					      repend
   5521  30b5		       ff		      .byte.b	$ff
   5520  30b5					      repend
   5521  30b6		       ff		      .byte.b	$ff
   5520  30b6					      repend
   5521  30b7		       ff		      .byte.b	$ff
   5520  30b7					      repend
   5521  30b8		       ff		      .byte.b	$ff
   5520  30b8					      repend
   5521  30b9		       ff		      .byte.b	$ff
   5520  30b9					      repend
   5521  30ba		       ff		      .byte.b	$ff
   5520  30ba					      repend
   5521  30bb		       ff		      .byte.b	$ff
   5520  30bb					      repend
   5521  30bc		       ff		      .byte.b	$ff
   5520  30bc					      repend
   5521  30bd		       ff		      .byte.b	$ff
   5520  30bd					      repend
   5521  30be		       ff		      .byte.b	$ff
   5520  30be					      repend
   5521  30bf		       ff		      .byte.b	$ff
   5520  30bf					      repend
   5521  30c0		       ff		      .byte.b	$ff
   5520  30c0					      repend
   5521  30c1		       ff		      .byte.b	$ff
   5520  30c1					      repend
   5521  30c2		       ff		      .byte.b	$ff
   5520  30c2					      repend
   5521  30c3		       ff		      .byte.b	$ff
   5520  30c3					      repend
   5521  30c4		       ff		      .byte.b	$ff
   5520  30c4					      repend
   5521  30c5		       ff		      .byte.b	$ff
   5520  30c5					      repend
   5521  30c6		       ff		      .byte.b	$ff
   5520  30c6					      repend
   5521  30c7		       ff		      .byte.b	$ff
   5520  30c7					      repend
   5521  30c8		       ff		      .byte.b	$ff
   5520  30c8					      repend
   5521  30c9		       ff		      .byte.b	$ff
   5520  30c9					      repend
   5521  30ca		       ff		      .byte.b	$ff
   5520  30ca					      repend
   5521  30cb		       ff		      .byte.b	$ff
   5520  30cb					      repend
   5521  30cc		       ff		      .byte.b	$ff
   5520  30cc					      repend
   5521  30cd		       ff		      .byte.b	$ff
   5520  30cd					      repend
   5521  30ce		       ff		      .byte.b	$ff
   5520  30ce					      repend
   5521  30cf		       ff		      .byte.b	$ff
   5520  30cf					      repend
   5521  30d0		       ff		      .byte.b	$ff
   5520  30d0					      repend
   5521  30d1		       ff		      .byte.b	$ff
   5520  30d1					      repend
   5521  30d2		       ff		      .byte.b	$ff
   5520  30d2					      repend
   5521  30d3		       ff		      .byte.b	$ff
   5520  30d3					      repend
   5521  30d4		       ff		      .byte.b	$ff
   5520  30d4					      repend
   5521  30d5		       ff		      .byte.b	$ff
   5520  30d5					      repend
   5521  30d6		       ff		      .byte.b	$ff
   5520  30d6					      repend
   5521  30d7		       ff		      .byte.b	$ff
   5520  30d7					      repend
   5521  30d8		       ff		      .byte.b	$ff
   5520  30d8					      repend
   5521  30d9		       ff		      .byte.b	$ff
   5520  30d9					      repend
   5521  30da		       ff		      .byte.b	$ff
   5520  30da					      repend
   5521  30db		       ff		      .byte.b	$ff
   5520  30db					      repend
   5521  30dc		       ff		      .byte.b	$ff
   5520  30dc					      repend
   5521  30dd		       ff		      .byte.b	$ff
   5520  30dd					      repend
   5521  30de		       ff		      .byte.b	$ff
   5520  30de					      repend
   5521  30df		       ff		      .byte.b	$ff
   5520  30df					      repend
   5521  30e0		       ff		      .byte.b	$ff
   5520  30e0					      repend
   5521  30e1		       ff		      .byte.b	$ff
   5520  30e1					      repend
   5521  30e2		       ff		      .byte.b	$ff
   5520  30e2					      repend
   5521  30e3		       ff		      .byte.b	$ff
   5520  30e3					      repend
   5521  30e4		       ff		      .byte.b	$ff
   5520  30e4					      repend
   5521  30e5		       ff		      .byte.b	$ff
   5520  30e5					      repend
   5521  30e6		       ff		      .byte.b	$ff
   5520  30e6					      repend
   5521  30e7		       ff		      .byte.b	$ff
   5520  30e7					      repend
   5521  30e8		       ff		      .byte.b	$ff
   5520  30e8					      repend
   5521  30e9		       ff		      .byte.b	$ff
   5520  30e9					      repend
   5521  30ea		       ff		      .byte.b	$ff
   5520  30ea					      repend
   5521  30eb		       ff		      .byte.b	$ff
   5520  30eb					      repend
   5521  30ec		       ff		      .byte.b	$ff
   5520  30ec					      repend
   5521  30ed		       ff		      .byte.b	$ff
   5520  30ed					      repend
   5521  30ee		       ff		      .byte.b	$ff
   5520  30ee					      repend
   5521  30ef		       ff		      .byte.b	$ff
   5520  30ef					      repend
   5521  30f0		       ff		      .byte.b	$ff
   5520  30f0					      repend
   5521  30f1		       ff		      .byte.b	$ff
   5520  30f1					      repend
   5521  30f2		       ff		      .byte.b	$ff
   5520  30f2					      repend
   5521  30f3		       ff		      .byte.b	$ff
   5520  30f3					      repend
   5521  30f4		       ff		      .byte.b	$ff
   5520  30f4					      repend
   5521  30f5		       ff		      .byte.b	$ff
   5520  30f5					      repend
   5521  30f6		       ff		      .byte.b	$ff
   5520  30f6					      repend
   5521  30f7		       ff		      .byte.b	$ff
   5520  30f7					      repend
   5521  30f8		       ff		      .byte.b	$ff
   5520  30f8					      repend
   5521  30f9		       ff		      .byte.b	$ff
   5520  30f9					      repend
   5521  30fa		       ff		      .byte.b	$ff
   5520  30fa					      repend
   5521  30fb		       ff		      .byte.b	$ff
   5520  30fb					      repend
   5521  30fc		       ff		      .byte.b	$ff
   5520  30fc					      repend
   5521  30fd		       ff		      .byte.b	$ff
   5520  30fd					      repend
   5521  30fe		       ff		      .byte.b	$ff
   5520  30fe					      repend
   5521  30ff		       ff		      .byte.b	$ff
   5522  3100					      repend
   5523  3100				   .
   5524  3100							; 
   5525  3100
   5526  3100				   .L0581		;  bank 4
   5527  3100
   5528  3100					      if	ECHO3
      3793 bytes of ROM space left in bank 3
   5529  3100					      echo	"    ",[(start_bank3 - *)]d , "bytes of ROM space left in bank 3")
   5530  3100					      endif
   5531  3100		       00 01	   ECHO3      =	1
   5532  3fd1					      ORG	$3FF4-bscode_length
   5533  3fd1					      RORG	$DFF4-bscode_length
   5534  3fd1		       a2 ff	   start_bank3 ldx	#$ff
   5535  3fd3				  -	      ifconst	FASTFETCH	; using DPC+
   5536  3fd3				  -	      stx	FASTFETCH
   5537  3fd3					      endif
   5538  3fd3		       9a		      txs
   5539  3fd4				  -	      if	bankswitch == 64
   5540  3fd4				  -	      lda	#(((>(start-1)) & $0F) | $F0)
   5541  3fd4					      else
   5542  3fd4		       a9 f2		      lda	#>(start-1)
   5543  3fd6					      endif
   5544  3fd6		       48		      pha
   5545  3fd7		       a9 b0		      lda	#<(start-1)
   5546  3fd9		       48		      pha
   5547  3fda		       48		      pha
   5548  3fdb		       8a		      txa
   5549  3fdc		       48		      pha
   5550  3fdd		       ba		      tsx
   5551  3fde					      if	bankswitch != 64
   5552  3fde		       b5 04		      lda	4,x	; get high byte of return address
   5553  3fe0		       2a		      rol
   5554  3fe1		       2a		      rol
   5555  3fe2		       2a		      rol
   5556  3fe3		       2a		      rol
   5557  3fe4		       29 03		      and	#bs_mask	;1 3 or 7 for F8/F6/F4
   5558  3fe6		       aa		      tax
   5559  3fe7		       e8		      inx
   5560  3fe8				  -	      else
   5561  3fe8				  -	      lda	4,x	; get high byte of return address
   5562  3fe8				  -	      tay
   5563  3fe8				  -	      ora	#$10	; change our bank nibble into a valid rom mirror
   5564  3fe8				  -	      sta	4,x
   5565  3fe8				  -	      tya
   5566  3fe8				  -	      lsr
   5567  3fe8				  -	      lsr
   5568  3fe8				  -	      lsr
   5569  3fe8				  -	      lsr
   5570  3fe8				  -	      tax
   5571  3fe8				  -	      inx
   5572  3fe8					      endif
   5573  3fe8		       bd f5 1f 	      lda	bankswitch_hotspot-1,x
   5574  3feb		       68		      pla
   5575  3fec		       aa		      tax
   5576  3fed		       68		      pla
   5577  3fee		       60		      rts
   5578  3fef				  -	      if	((* & $1FFF) > ((bankswitch_hotspot & $1FFF) - 1))
   5579  3fef				  -	      echo	"WARNING: size parameter in banksw.asm too small - the program probably will not work."
   5580  3fef				  -	      echo	"Change to",[(*-begin_bscode+1)&$FF]d,"and try again."
   5581  3fef					      endif
   5582  3ffc					      ORG	$3FFC
   5583  3ffc					      RORG	$DFFC
   5584  3ffc		       d1 df		      .word.w	(start_bank3 & $ffff)
   5585  3ffe		       d1 df		      .word.w	(start_bank3 & $ffff)
   5586  4000					      ORG	$4000
   5587  4000					      RORG	$F000
   5588  4000					      repeat	256
   5589  4000		       ff		      .byte.b	$ff
   5588  4000					      repend
   5589  4001		       ff		      .byte.b	$ff
   5588  4001					      repend
   5589  4002		       ff		      .byte.b	$ff
   5588  4002					      repend
   5589  4003		       ff		      .byte.b	$ff
   5588  4003					      repend
   5589  4004		       ff		      .byte.b	$ff
   5588  4004					      repend
   5589  4005		       ff		      .byte.b	$ff
   5588  4005					      repend
   5589  4006		       ff		      .byte.b	$ff
   5588  4006					      repend
   5589  4007		       ff		      .byte.b	$ff
   5588  4007					      repend
   5589  4008		       ff		      .byte.b	$ff
   5588  4008					      repend
   5589  4009		       ff		      .byte.b	$ff
   5588  4009					      repend
   5589  400a		       ff		      .byte.b	$ff
   5588  400a					      repend
   5589  400b		       ff		      .byte.b	$ff
   5588  400b					      repend
   5589  400c		       ff		      .byte.b	$ff
   5588  400c					      repend
   5589  400d		       ff		      .byte.b	$ff
   5588  400d					      repend
   5589  400e		       ff		      .byte.b	$ff
   5588  400e					      repend
   5589  400f		       ff		      .byte.b	$ff
   5588  400f					      repend
   5589  4010		       ff		      .byte.b	$ff
   5588  4010					      repend
   5589  4011		       ff		      .byte.b	$ff
   5588  4011					      repend
   5589  4012		       ff		      .byte.b	$ff
   5588  4012					      repend
   5589  4013		       ff		      .byte.b	$ff
   5588  4013					      repend
   5589  4014		       ff		      .byte.b	$ff
   5588  4014					      repend
   5589  4015		       ff		      .byte.b	$ff
   5588  4015					      repend
   5589  4016		       ff		      .byte.b	$ff
   5588  4016					      repend
   5589  4017		       ff		      .byte.b	$ff
   5588  4017					      repend
   5589  4018		       ff		      .byte.b	$ff
   5588  4018					      repend
   5589  4019		       ff		      .byte.b	$ff
   5588  4019					      repend
   5589  401a		       ff		      .byte.b	$ff
   5588  401a					      repend
   5589  401b		       ff		      .byte.b	$ff
   5588  401b					      repend
   5589  401c		       ff		      .byte.b	$ff
   5588  401c					      repend
   5589  401d		       ff		      .byte.b	$ff
   5588  401d					      repend
   5589  401e		       ff		      .byte.b	$ff
   5588  401e					      repend
   5589  401f		       ff		      .byte.b	$ff
   5588  401f					      repend
   5589  4020		       ff		      .byte.b	$ff
   5588  4020					      repend
   5589  4021		       ff		      .byte.b	$ff
   5588  4021					      repend
   5589  4022		       ff		      .byte.b	$ff
   5588  4022					      repend
   5589  4023		       ff		      .byte.b	$ff
   5588  4023					      repend
   5589  4024		       ff		      .byte.b	$ff
   5588  4024					      repend
   5589  4025		       ff		      .byte.b	$ff
   5588  4025					      repend
   5589  4026		       ff		      .byte.b	$ff
   5588  4026					      repend
   5589  4027		       ff		      .byte.b	$ff
   5588  4027					      repend
   5589  4028		       ff		      .byte.b	$ff
   5588  4028					      repend
   5589  4029		       ff		      .byte.b	$ff
   5588  4029					      repend
   5589  402a		       ff		      .byte.b	$ff
   5588  402a					      repend
   5589  402b		       ff		      .byte.b	$ff
   5588  402b					      repend
   5589  402c		       ff		      .byte.b	$ff
   5588  402c					      repend
   5589  402d		       ff		      .byte.b	$ff
   5588  402d					      repend
   5589  402e		       ff		      .byte.b	$ff
   5588  402e					      repend
   5589  402f		       ff		      .byte.b	$ff
   5588  402f					      repend
   5589  4030		       ff		      .byte.b	$ff
   5588  4030					      repend
   5589  4031		       ff		      .byte.b	$ff
   5588  4031					      repend
   5589  4032		       ff		      .byte.b	$ff
   5588  4032					      repend
   5589  4033		       ff		      .byte.b	$ff
   5588  4033					      repend
   5589  4034		       ff		      .byte.b	$ff
   5588  4034					      repend
   5589  4035		       ff		      .byte.b	$ff
   5588  4035					      repend
   5589  4036		       ff		      .byte.b	$ff
   5588  4036					      repend
   5589  4037		       ff		      .byte.b	$ff
   5588  4037					      repend
   5589  4038		       ff		      .byte.b	$ff
   5588  4038					      repend
   5589  4039		       ff		      .byte.b	$ff
   5588  4039					      repend
   5589  403a		       ff		      .byte.b	$ff
   5588  403a					      repend
   5589  403b		       ff		      .byte.b	$ff
   5588  403b					      repend
   5589  403c		       ff		      .byte.b	$ff
   5588  403c					      repend
   5589  403d		       ff		      .byte.b	$ff
   5588  403d					      repend
   5589  403e		       ff		      .byte.b	$ff
   5588  403e					      repend
   5589  403f		       ff		      .byte.b	$ff
   5588  403f					      repend
   5589  4040		       ff		      .byte.b	$ff
   5588  4040					      repend
   5589  4041		       ff		      .byte.b	$ff
   5588  4041					      repend
   5589  4042		       ff		      .byte.b	$ff
   5588  4042					      repend
   5589  4043		       ff		      .byte.b	$ff
   5588  4043					      repend
   5589  4044		       ff		      .byte.b	$ff
   5588  4044					      repend
   5589  4045		       ff		      .byte.b	$ff
   5588  4045					      repend
   5589  4046		       ff		      .byte.b	$ff
   5588  4046					      repend
   5589  4047		       ff		      .byte.b	$ff
   5588  4047					      repend
   5589  4048		       ff		      .byte.b	$ff
   5588  4048					      repend
   5589  4049		       ff		      .byte.b	$ff
   5588  4049					      repend
   5589  404a		       ff		      .byte.b	$ff
   5588  404a					      repend
   5589  404b		       ff		      .byte.b	$ff
   5588  404b					      repend
   5589  404c		       ff		      .byte.b	$ff
   5588  404c					      repend
   5589  404d		       ff		      .byte.b	$ff
   5588  404d					      repend
   5589  404e		       ff		      .byte.b	$ff
   5588  404e					      repend
   5589  404f		       ff		      .byte.b	$ff
   5588  404f					      repend
   5589  4050		       ff		      .byte.b	$ff
   5588  4050					      repend
   5589  4051		       ff		      .byte.b	$ff
   5588  4051					      repend
   5589  4052		       ff		      .byte.b	$ff
   5588  4052					      repend
   5589  4053		       ff		      .byte.b	$ff
   5588  4053					      repend
   5589  4054		       ff		      .byte.b	$ff
   5588  4054					      repend
   5589  4055		       ff		      .byte.b	$ff
   5588  4055					      repend
   5589  4056		       ff		      .byte.b	$ff
   5588  4056					      repend
   5589  4057		       ff		      .byte.b	$ff
   5588  4057					      repend
   5589  4058		       ff		      .byte.b	$ff
   5588  4058					      repend
   5589  4059		       ff		      .byte.b	$ff
   5588  4059					      repend
   5589  405a		       ff		      .byte.b	$ff
   5588  405a					      repend
   5589  405b		       ff		      .byte.b	$ff
   5588  405b					      repend
   5589  405c		       ff		      .byte.b	$ff
   5588  405c					      repend
   5589  405d		       ff		      .byte.b	$ff
   5588  405d					      repend
   5589  405e		       ff		      .byte.b	$ff
   5588  405e					      repend
   5589  405f		       ff		      .byte.b	$ff
   5588  405f					      repend
   5589  4060		       ff		      .byte.b	$ff
   5588  4060					      repend
   5589  4061		       ff		      .byte.b	$ff
   5588  4061					      repend
   5589  4062		       ff		      .byte.b	$ff
   5588  4062					      repend
   5589  4063		       ff		      .byte.b	$ff
   5588  4063					      repend
   5589  4064		       ff		      .byte.b	$ff
   5588  4064					      repend
   5589  4065		       ff		      .byte.b	$ff
   5588  4065					      repend
   5589  4066		       ff		      .byte.b	$ff
   5588  4066					      repend
   5589  4067		       ff		      .byte.b	$ff
   5588  4067					      repend
   5589  4068		       ff		      .byte.b	$ff
   5588  4068					      repend
   5589  4069		       ff		      .byte.b	$ff
   5588  4069					      repend
   5589  406a		       ff		      .byte.b	$ff
   5588  406a					      repend
   5589  406b		       ff		      .byte.b	$ff
   5588  406b					      repend
   5589  406c		       ff		      .byte.b	$ff
   5588  406c					      repend
   5589  406d		       ff		      .byte.b	$ff
   5588  406d					      repend
   5589  406e		       ff		      .byte.b	$ff
   5588  406e					      repend
   5589  406f		       ff		      .byte.b	$ff
   5588  406f					      repend
   5589  4070		       ff		      .byte.b	$ff
   5588  4070					      repend
   5589  4071		       ff		      .byte.b	$ff
   5588  4071					      repend
   5589  4072		       ff		      .byte.b	$ff
   5588  4072					      repend
   5589  4073		       ff		      .byte.b	$ff
   5588  4073					      repend
   5589  4074		       ff		      .byte.b	$ff
   5588  4074					      repend
   5589  4075		       ff		      .byte.b	$ff
   5588  4075					      repend
   5589  4076		       ff		      .byte.b	$ff
   5588  4076					      repend
   5589  4077		       ff		      .byte.b	$ff
   5588  4077					      repend
   5589  4078		       ff		      .byte.b	$ff
   5588  4078					      repend
   5589  4079		       ff		      .byte.b	$ff
   5588  4079					      repend
   5589  407a		       ff		      .byte.b	$ff
   5588  407a					      repend
   5589  407b		       ff		      .byte.b	$ff
   5588  407b					      repend
   5589  407c		       ff		      .byte.b	$ff
   5588  407c					      repend
   5589  407d		       ff		      .byte.b	$ff
   5588  407d					      repend
   5589  407e		       ff		      .byte.b	$ff
   5588  407e					      repend
   5589  407f		       ff		      .byte.b	$ff
   5588  407f					      repend
   5589  4080		       ff		      .byte.b	$ff
   5588  4080					      repend
   5589  4081		       ff		      .byte.b	$ff
   5588  4081					      repend
   5589  4082		       ff		      .byte.b	$ff
   5588  4082					      repend
   5589  4083		       ff		      .byte.b	$ff
   5588  4083					      repend
   5589  4084		       ff		      .byte.b	$ff
   5588  4084					      repend
   5589  4085		       ff		      .byte.b	$ff
   5588  4085					      repend
   5589  4086		       ff		      .byte.b	$ff
   5588  4086					      repend
   5589  4087		       ff		      .byte.b	$ff
   5588  4087					      repend
   5589  4088		       ff		      .byte.b	$ff
   5588  4088					      repend
   5589  4089		       ff		      .byte.b	$ff
   5588  4089					      repend
   5589  408a		       ff		      .byte.b	$ff
   5588  408a					      repend
   5589  408b		       ff		      .byte.b	$ff
   5588  408b					      repend
   5589  408c		       ff		      .byte.b	$ff
   5588  408c					      repend
   5589  408d		       ff		      .byte.b	$ff
   5588  408d					      repend
   5589  408e		       ff		      .byte.b	$ff
   5588  408e					      repend
   5589  408f		       ff		      .byte.b	$ff
   5588  408f					      repend
   5589  4090		       ff		      .byte.b	$ff
   5588  4090					      repend
   5589  4091		       ff		      .byte.b	$ff
   5588  4091					      repend
   5589  4092		       ff		      .byte.b	$ff
   5588  4092					      repend
   5589  4093		       ff		      .byte.b	$ff
   5588  4093					      repend
   5589  4094		       ff		      .byte.b	$ff
   5588  4094					      repend
   5589  4095		       ff		      .byte.b	$ff
   5588  4095					      repend
   5589  4096		       ff		      .byte.b	$ff
   5588  4096					      repend
   5589  4097		       ff		      .byte.b	$ff
   5588  4097					      repend
   5589  4098		       ff		      .byte.b	$ff
   5588  4098					      repend
   5589  4099		       ff		      .byte.b	$ff
   5588  4099					      repend
   5589  409a		       ff		      .byte.b	$ff
   5588  409a					      repend
   5589  409b		       ff		      .byte.b	$ff
   5588  409b					      repend
   5589  409c		       ff		      .byte.b	$ff
   5588  409c					      repend
   5589  409d		       ff		      .byte.b	$ff
   5588  409d					      repend
   5589  409e		       ff		      .byte.b	$ff
   5588  409e					      repend
   5589  409f		       ff		      .byte.b	$ff
   5588  409f					      repend
   5589  40a0		       ff		      .byte.b	$ff
   5588  40a0					      repend
   5589  40a1		       ff		      .byte.b	$ff
   5588  40a1					      repend
   5589  40a2		       ff		      .byte.b	$ff
   5588  40a2					      repend
   5589  40a3		       ff		      .byte.b	$ff
   5588  40a3					      repend
   5589  40a4		       ff		      .byte.b	$ff
   5588  40a4					      repend
   5589  40a5		       ff		      .byte.b	$ff
   5588  40a5					      repend
   5589  40a6		       ff		      .byte.b	$ff
   5588  40a6					      repend
   5589  40a7		       ff		      .byte.b	$ff
   5588  40a7					      repend
   5589  40a8		       ff		      .byte.b	$ff
   5588  40a8					      repend
   5589  40a9		       ff		      .byte.b	$ff
   5588  40a9					      repend
   5589  40aa		       ff		      .byte.b	$ff
   5588  40aa					      repend
   5589  40ab		       ff		      .byte.b	$ff
   5588  40ab					      repend
   5589  40ac		       ff		      .byte.b	$ff
   5588  40ac					      repend
   5589  40ad		       ff		      .byte.b	$ff
   5588  40ad					      repend
   5589  40ae		       ff		      .byte.b	$ff
   5588  40ae					      repend
   5589  40af		       ff		      .byte.b	$ff
   5588  40af					      repend
   5589  40b0		       ff		      .byte.b	$ff
   5588  40b0					      repend
   5589  40b1		       ff		      .byte.b	$ff
   5588  40b1					      repend
   5589  40b2		       ff		      .byte.b	$ff
   5588  40b2					      repend
   5589  40b3		       ff		      .byte.b	$ff
   5588  40b3					      repend
   5589  40b4		       ff		      .byte.b	$ff
   5588  40b4					      repend
   5589  40b5		       ff		      .byte.b	$ff
   5588  40b5					      repend
   5589  40b6		       ff		      .byte.b	$ff
   5588  40b6					      repend
   5589  40b7		       ff		      .byte.b	$ff
   5588  40b7					      repend
   5589  40b8		       ff		      .byte.b	$ff
   5588  40b8					      repend
   5589  40b9		       ff		      .byte.b	$ff
   5588  40b9					      repend
   5589  40ba		       ff		      .byte.b	$ff
   5588  40ba					      repend
   5589  40bb		       ff		      .byte.b	$ff
   5588  40bb					      repend
   5589  40bc		       ff		      .byte.b	$ff
   5588  40bc					      repend
   5589  40bd		       ff		      .byte.b	$ff
   5588  40bd					      repend
   5589  40be		       ff		      .byte.b	$ff
   5588  40be					      repend
   5589  40bf		       ff		      .byte.b	$ff
   5588  40bf					      repend
   5589  40c0		       ff		      .byte.b	$ff
   5588  40c0					      repend
   5589  40c1		       ff		      .byte.b	$ff
   5588  40c1					      repend
   5589  40c2		       ff		      .byte.b	$ff
   5588  40c2					      repend
   5589  40c3		       ff		      .byte.b	$ff
   5588  40c3					      repend
   5589  40c4		       ff		      .byte.b	$ff
   5588  40c4					      repend
   5589  40c5		       ff		      .byte.b	$ff
   5588  40c5					      repend
   5589  40c6		       ff		      .byte.b	$ff
   5588  40c6					      repend
   5589  40c7		       ff		      .byte.b	$ff
   5588  40c7					      repend
   5589  40c8		       ff		      .byte.b	$ff
   5588  40c8					      repend
   5589  40c9		       ff		      .byte.b	$ff
   5588  40c9					      repend
   5589  40ca		       ff		      .byte.b	$ff
   5588  40ca					      repend
   5589  40cb		       ff		      .byte.b	$ff
   5588  40cb					      repend
   5589  40cc		       ff		      .byte.b	$ff
   5588  40cc					      repend
   5589  40cd		       ff		      .byte.b	$ff
   5588  40cd					      repend
   5589  40ce		       ff		      .byte.b	$ff
   5588  40ce					      repend
   5589  40cf		       ff		      .byte.b	$ff
   5588  40cf					      repend
   5589  40d0		       ff		      .byte.b	$ff
   5588  40d0					      repend
   5589  40d1		       ff		      .byte.b	$ff
   5588  40d1					      repend
   5589  40d2		       ff		      .byte.b	$ff
   5588  40d2					      repend
   5589  40d3		       ff		      .byte.b	$ff
   5588  40d3					      repend
   5589  40d4		       ff		      .byte.b	$ff
   5588  40d4					      repend
   5589  40d5		       ff		      .byte.b	$ff
   5588  40d5					      repend
   5589  40d6		       ff		      .byte.b	$ff
   5588  40d6					      repend
   5589  40d7		       ff		      .byte.b	$ff
   5588  40d7					      repend
   5589  40d8		       ff		      .byte.b	$ff
   5588  40d8					      repend
   5589  40d9		       ff		      .byte.b	$ff
   5588  40d9					      repend
   5589  40da		       ff		      .byte.b	$ff
   5588  40da					      repend
   5589  40db		       ff		      .byte.b	$ff
   5588  40db					      repend
   5589  40dc		       ff		      .byte.b	$ff
   5588  40dc					      repend
   5589  40dd		       ff		      .byte.b	$ff
   5588  40dd					      repend
   5589  40de		       ff		      .byte.b	$ff
   5588  40de					      repend
   5589  40df		       ff		      .byte.b	$ff
   5588  40df					      repend
   5589  40e0		       ff		      .byte.b	$ff
   5588  40e0					      repend
   5589  40e1		       ff		      .byte.b	$ff
   5588  40e1					      repend
   5589  40e2		       ff		      .byte.b	$ff
   5588  40e2					      repend
   5589  40e3		       ff		      .byte.b	$ff
   5588  40e3					      repend
   5589  40e4		       ff		      .byte.b	$ff
   5588  40e4					      repend
   5589  40e5		       ff		      .byte.b	$ff
   5588  40e5					      repend
   5589  40e6		       ff		      .byte.b	$ff
   5588  40e6					      repend
   5589  40e7		       ff		      .byte.b	$ff
   5588  40e7					      repend
   5589  40e8		       ff		      .byte.b	$ff
   5588  40e8					      repend
   5589  40e9		       ff		      .byte.b	$ff
   5588  40e9					      repend
   5589  40ea		       ff		      .byte.b	$ff
   5588  40ea					      repend
   5589  40eb		       ff		      .byte.b	$ff
   5588  40eb					      repend
   5589  40ec		       ff		      .byte.b	$ff
   5588  40ec					      repend
   5589  40ed		       ff		      .byte.b	$ff
   5588  40ed					      repend
   5589  40ee		       ff		      .byte.b	$ff
   5588  40ee					      repend
   5589  40ef		       ff		      .byte.b	$ff
   5588  40ef					      repend
   5589  40f0		       ff		      .byte.b	$ff
   5588  40f0					      repend
   5589  40f1		       ff		      .byte.b	$ff
   5588  40f1					      repend
   5589  40f2		       ff		      .byte.b	$ff
   5588  40f2					      repend
   5589  40f3		       ff		      .byte.b	$ff
   5588  40f3					      repend
   5589  40f4		       ff		      .byte.b	$ff
   5588  40f4					      repend
   5589  40f5		       ff		      .byte.b	$ff
   5588  40f5					      repend
   5589  40f6		       ff		      .byte.b	$ff
   5588  40f6					      repend
   5589  40f7		       ff		      .byte.b	$ff
   5588  40f7					      repend
   5589  40f8		       ff		      .byte.b	$ff
   5588  40f8					      repend
   5589  40f9		       ff		      .byte.b	$ff
   5588  40f9					      repend
   5589  40fa		       ff		      .byte.b	$ff
   5588  40fa					      repend
   5589  40fb		       ff		      .byte.b	$ff
   5588  40fb					      repend
   5589  40fc		       ff		      .byte.b	$ff
   5588  40fc					      repend
   5589  40fd		       ff		      .byte.b	$ff
   5588  40fd					      repend
   5589  40fe		       ff		      .byte.b	$ff
   5588  40fe					      repend
   5589  40ff		       ff		      .byte.b	$ff
   5590  4100					      repend
   5591  4100							; Provided under the CC0 license. See the included LICENSE.txt for details.
   5592  4100
   5593  4100							; This is a 2-line kernel!
   5594  4100					      ifnconst	vertical_reflect
   5595  4100				   kernel
   5596  4100					      endif
   5597  4100		       85 02		      sta	WSYNC
   5598  4102		       a9 ff		      lda	#255
   5599  4104		       8d 96 02 	      sta	TIM64T
   5600  4107
   5601  4107		       a9 01		      lda	#1
   5602  4109		       85 27		      sta	VDELBL
   5603  410b		       85 25		      sta	VDELP0
   5604  410d		       a6 92		      ldx	ballheight
   5605  410f		       e8		      inx
   5606  4110		       e8		      inx
   5607  4111		       86 9f		      stx	temp4
   5608  4113		       a5 86		      lda	player1y
   5609  4115		       85 9e		      sta	temp3
   5610  4117
   5611  4117				  -	      ifconst	shakescreen
   5612  4117				  -	      jsr	doshakescreen
   5613  4117					      else
   5614  4117		       a6 90		      ldx	missile0height
   5615  4119		       e8		      inx
   5616  411a					      endif
   5617  411a
   5618  411a		       e8		      inx
   5619  411b		       86 f6		      stx	stack1
   5620  411d
   5621  411d		       a5 89		      lda	bally
   5622  411f		       85 f7		      sta	stack2
   5623  4121
   5624  4121		       a5 85		      lda	player0y
   5625  4123		       a2 00		      ldx	#0
   5626  4125		       85 02		      sta	WSYNC
   5627  4127		       86 1b		      stx	GRP0
   5628  4129		       86 1c		      stx	GRP1
   5629  412b		       86 0e		      stx	PF1L
   5630  412d		       86 0f		      stx	PF2
   5631  412f		       86 2c		      stx	CXCLR
   5632  4131				  -	      ifconst	readpaddle
   5633  4131				  -	      stx	paddle
   5634  4131					      else
      0  4131					      sleep	3
      1  4131				   .CYCLES    SET	3
      2  4131
      3  4131				  -	      IF	.CYCLES < 2
      4  4131				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  4131				  -	      ERR
      6  4131					      ENDIF
      7  4131
      8  4131					      IF	.CYCLES & 1
      9  4131					      IFNCONST	NO_ILLEGAL_OPCODES
     10  4131		       04 00		      nop	0
     11  4133				  -	      ELSE
     12  4133				  -	      bit	VSYNC
     13  4133					      ENDIF
     14  4133				   .CYCLES    SET	.CYCLES - 3
     15  4133					      ENDIF
     16  4133
     17  4133				  -	      REPEAT	.CYCLES / 2
     18  4133				  -	      nop
     19  4133					      REPEND
   5636  4133					      endif
   5637  4133
   5638  4133		       95 9d		      sta	temp2,x
   5639  4135
   5640  4135							;store these so they can be retrieved later
   5641  4135				  -	      ifnconst	pfres
   5642  4135				  -	      ldx	#128-44+(4-pfwidth)*12
   5643  4135					      else
   5644  4135		       a2 74		      ldx	#132-pfres*pfwidth
   5645  4137					      endif
   5646  4137
   5647  4137		       c6 85		      dec	player0y
   5648  4139
   5649  4139		       a5 91		      lda	missile0y
   5650  413b		       85 a0		      sta	temp5
   5651  413d		       a5 88		      lda	missile1y
   5652  413f		       85 a1		      sta	temp6
   5653  4141
   5654  4141		       a5 ef		      lda	playfieldpos
   5655  4143		       85 9c		      sta	temp1
   5656  4145
   5657  4145				  -	      ifconst	pfrowheight
   5658  4145				  -	      lda	#pfrowheight+2
   5659  4145					      else
   5660  4145				  -	      ifnconst	pfres
   5661  4145				  -	      lda	#10
   5662  4145					      else
   5663  4145		       a9 1a		      lda	#(96/pfres)+2	; try to come close to the real size
   5664  4147					      endif
   5665  4147					      endif
   5666  4147		       18		      clc
   5667  4148		       e5 ef		      sbc	playfieldpos
   5668  414a		       85 ef		      sta	playfieldpos
   5669  414c		       4c 78 f1 	      jmp	.startkernel
   5670  414f
   5671  414f				   .skipDrawP0
   5672  414f		       a9 00		      lda	#0
   5673  4151		       a8		      tay
   5674  4152		       4c aa f1 	      jmp	.continueP0
   5675  4155
   5676  4155				   .skipDrawP1
   5677  4155		       a9 00		      lda	#0
   5678  4157		       a8		      tay
   5679  4158		       4c 82 f1 	      jmp	.continueP1
   5680  415b
   5681  415b				   .kerloop		; enter at cycle 59??
   5682  415b
   5683  415b				   continuekernel
      0  415b					      sleep	2
      1  415b				   .CYCLES    SET	2
      2  415b
      3  415b				  -	      IF	.CYCLES < 2
      4  415b				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  415b				  -	      ERR
      6  415b					      ENDIF
      7  415b
      8  415b				  -	      IF	.CYCLES & 1
      9  415b				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  415b				  -	      nop	0
     11  415b				  -	      ELSE
     12  415b				  -	      bit	VSYNC
     13  415b				  -	      ENDIF
     14  415b				  -.CYCLES    SET	.CYCLES - 3
     15  415b					      ENDIF
     16  415b
     17  415b					      REPEAT	.CYCLES / 2
     18  415b		       ea		      nop
     19  415c					      REPEND
   5685  415c				   continuekernel2
   5686  415c		       a5 92		      lda	ballheight
   5687  415e
   5688  415e					      ifconst	pfres
   5689  415e		       bc 7c 10 	      ldy	playfield+pfres*pfwidth-132,x
   5690  4161		       84 0e		      sty	PF1L	;3
   5691  4163		       bc 7d 10 	      ldy	playfield+pfres*pfwidth-131-pfadjust,x
   5692  4166		       84 0f		      sty	PF2L	;3
   5693  4168		       bc 7f 10 	      ldy	playfield+pfres*pfwidth-129,x
   5694  416b		       84 0e		      sty	PF1R	; 3 too early?
   5695  416d		       bc 7e 10 	      ldy	playfield+pfres*pfwidth-130-pfadjust,x
   5696  4170		       84 0f		      sty	PF2R	;3
   5697  4172				  -	      else
   5698  4172				  -	      ldy	playfield-48+pfwidth*12+44-128,x
   5699  4172				  -	      sty	PF1L	;3
   5700  4172				  -	      ldy	playfield-48+pfwidth*12+45-128-pfadjust,x	;4
   5701  4172				  -	      sty	PF2L	;3
   5702  4172				  -	      ldy	playfield-48+pfwidth*12+47-128,x	;4
   5703  4172				  -	      sty	PF1R	; 3 too early?
   5704  4172				  -	      ldy	playfield-48+pfwidth*12+46-128-pfadjust,x	;4
   5705  4172				  -	      sty	PF2R	;3
   5706  4172					      endif
   5707  4172
   5708  4172							; should be playfield+$38 for width=2
   5709  4172
   5710  4172		       c7 89		      dcp	bally
   5711  4174		       2a		      rol
   5712  4175		       2a		      rol
   5713  4176							; rol
   5714  4176							; rol
   5715  4176				   goback
   5716  4176		       85 1f		      sta	ENABL
   5717  4178				   .startkernel
   5718  4178		       a5 8f		      lda	player1height	;3
   5719  417a		       c7 86		      dcp	player1y	;5
   5720  417c		       90 d7		      bcc	.skipDrawP1	;2
   5721  417e		       a4 86		      ldy	player1y	;3
   5722  4180		       b1 8c		      lda	(player1pointer),y	;5; player0pointer must be selected carefully by the compiler
   5723  4182							; so it doesn't cross a page boundary!
   5724  4182
   5725  4182				   .continueP1
   5726  4182		       85 1c		      sta	GRP1	;3
   5727  4184
   5728  4184				  -	      ifnconst	player1colors
   5729  4184				  -	      lda	missile1height	;3
   5730  4184				  -	      dcp	missile1y	;5
   5731  4184				  -	      rol		;2
   5732  4184				  -	      rol		;2
   5733  4184				  -	      sta	ENAM1	;3
   5734  4184					      else
   5735  4184		       b1 87		      lda	(player1color),y
   5736  4186		       85 07		      sta	COLUP1
   5737  4188					      ifnconst	playercolors
      0  4188					      sleep	7
      1  4188				   .CYCLES    SET	7
      2  4188
      3  4188				  -	      IF	.CYCLES < 2
      4  4188				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  4188				  -	      ERR
      6  4188					      ENDIF
      7  4188
      8  4188					      IF	.CYCLES & 1
      9  4188					      IFNCONST	NO_ILLEGAL_OPCODES
     10  4188		       04 00		      nop	0
     11  418a				  -	      ELSE
     12  418a				  -	      bit	VSYNC
     13  418a					      ENDIF
     14  418a				   .CYCLES    SET	.CYCLES - 3
     15  418a					      ENDIF
     16  418a
     17  418a					      REPEAT	.CYCLES / 2
     18  418a		       ea		      nop
     17  418a					      REPEND
     18  418b		       ea		      nop
     19  418c					      REPEND
   5739  418c				  -	      else
   5740  418c				  -	      lda.w	player0colorstore
   5741  418c				  -	      sta	COLUP0
   5742  418c					      endif
   5743  418c					      endif
   5744  418c
   5745  418c					      ifconst	pfres
   5746  418c		       bd 7c 10 	      lda	playfield+pfres*pfwidth-132,x
   5747  418f		       85 0e		      sta	PF1L	;3
   5748  4191		       bd 7d 10 	      lda	playfield+pfres*pfwidth-131-pfadjust,x
   5749  4194		       85 0f		      sta	PF2L	;3
   5750  4196		       bd 7f 10 	      lda	playfield+pfres*pfwidth-129,x
   5751  4199		       85 0e		      sta	PF1R	; 3 too early?
   5752  419b		       bd 7e 10 	      lda	playfield+pfres*pfwidth-130-pfadjust,x
   5753  419e		       85 0f		      sta	PF2R	;3
   5754  41a0				  -	      else
   5755  41a0				  -	      lda	playfield-48+pfwidth*12+44-128,x	;4
   5756  41a0				  -	      sta	PF1L	;3
   5757  41a0				  -	      lda	playfield-48+pfwidth*12+45-128-pfadjust,x	;4
   5758  41a0				  -	      sta	PF2L	;3
   5759  41a0				  -	      lda	playfield-48+pfwidth*12+47-128,x	;4
   5760  41a0				  -	      sta	PF1R	; 3 too early?
   5761  41a0				  -	      lda	playfield-48+pfwidth*12+46-128-pfadjust,x	;4
   5762  41a0				  -	      sta	PF2R	;3
   5763  41a0					      endif
   5764  41a0							; sleep 3
   5765  41a0
   5766  41a0		       a5 8e		      lda	player0height
   5767  41a2		       c7 85		      dcp	player0y
   5768  41a4		       90 a9		      bcc	.skipDrawP0
   5769  41a6		       a4 85		      ldy	player0y
   5770  41a8		       b1 8a		      lda	(player0pointer),y
   5771  41aa				   .continueP0
   5772  41aa		       85 1b		      sta	GRP0
   5773  41ac
   5774  41ac					      ifnconst	no_blank_lines
   5775  41ac					      ifnconst	playercolors
   5776  41ac		       a5 90		      lda	missile0height	;3
   5777  41ae		       c7 91		      dcp	missile0y	;5
   5778  41b0		       e5 f6		      sbc	stack1
   5779  41b2		       85 1d		      sta	ENAM0	;3
   5780  41b4				  -	      else
   5781  41b4				  -	      lda	(player0color),y
   5782  41b4				  -	      sta	player0colorstore
   5783  41b4				  -	      sleep	6
   5784  41b4					      endif
   5785  41b4		       c6 9c		      dec	temp1
   5786  41b6		       d0 a3		      bne	continuekernel
   5787  41b8				  -	      else
   5788  41b8				  -	      dec	temp1
   5789  41b8				  -	      beq	altkernel2
   5790  41b8				  -	      ifconst	readpaddle
   5791  41b8				  -	      ldy	currentpaddle
   5792  41b8				  -	      lda	INPT0,y
   5793  41b8				  -	      bpl	noreadpaddle
   5794  41b8				  -	      inc	paddle
   5795  41b8				  -	      jmp	continuekernel2
   5796  41b8				  -noreadpaddle
   5797  41b8				  -	      sleep	2
   5798  41b8				  -	      jmp	continuekernel
   5799  41b8				  -	      else
   5800  41b8				  -	      ifnconst	playercolors
   5801  41b8				  -	      ifconst	PFcolors
   5802  41b8				  -	      txa
   5803  41b8				  -	      tay
   5804  41b8				  -	      lda	(pfcolortable),y
   5805  41b8				  -	      ifnconst	backgroundchange
   5806  41b8				  -	      sta	COLUPF
   5807  41b8				  -	      else
   5808  41b8				  -	      sta	COLUBK
   5809  41b8				  -	      endif
   5810  41b8				  -	      jmp	continuekernel
   5811  41b8				  -	      else
   5812  41b8				  -	      ifconst	kernelmacrodef
   5813  41b8				  -	      kernelmacro
   5814  41b8				  -	      else
   5815  41b8				  -	      sleep	12
   5816  41b8				  -	      endif
   5817  41b8				  -	      endif
   5818  41b8				  -	      else
   5819  41b8				  -	      lda	(player0color),y
   5820  41b8				  -	      sta	player0colorstore
   5821  41b8				  -	      sleep	4
   5822  41b8				  -	      endif
   5823  41b8				  -	      jmp	continuekernel
   5824  41b8				  -	      endif
   5825  41b8				  -altkernel2
   5826  41b8				  -	      txa
   5827  41b8				  -	      ifnconst	vertical_reflect
   5828  41b8				  -	      sbx	#256-pfwidth
   5829  41b8				  -	      else
   5830  41b8				  -	      sbx	#256-pfwidth/2
   5831  41b8				  -	      endif
   5832  41b8				  -	      bmi	lastkernelline
   5833  41b8				  -	      ifconst	pfrowheight
   5834  41b8				  -	      lda	#pfrowheight
   5835  41b8				  -	      else
   5836  41b8				  -	      ifnconst	pfres
   5837  41b8				  -	      lda	#8
   5838  41b8				  -	      else
   5839  41b8				  -	      lda	#(96/pfres)	; try to come close to the real size
   5840  41b8				  -	      endif
   5841  41b8				  -	      endif
   5842  41b8				  -	      sta	temp1
   5843  41b8				  -	      jmp	continuekernel
   5844  41b8					      endif
   5845  41b8
   5846  41b8				   altkernel
   5847  41b8
   5848  41b8				  -	      ifconst	PFmaskvalue
   5849  41b8				  -	      lda	#PFmaskvalue
   5850  41b8					      else
   5851  41b8		       a9 00		      lda	#0
   5852  41ba					      endif
   5853  41ba		       85 0e		      sta	PF1L
   5854  41bc		       85 0f		      sta	PF2
   5855  41be
   5856  41be
   5857  41be							;sleep 3
   5858  41be
   5859  41be							;28 cycles to fix things
   5860  41be							;minus 11=17
   5861  41be
   5862  41be							; lax temp4
   5863  41be							; clc
   5864  41be		       8a		      txa
   5865  41bf					      ifnconst	vertical_reflect
   5866  41bf		       cb fc		      sbx	#256-pfwidth
   5867  41c1				  -	      else
   5868  41c1				  -	      sbx	#256-pfwidth/2
   5869  41c1					      endif
   5870  41c1
   5871  41c1		       30 12		      bmi	lastkernelline
   5872  41c3
   5873  41c3				  -	      ifconst	PFcolorandheight
   5874  41c3				  -	      ifconst	pfres
   5875  41c3				  -	      ldy	playfieldcolorandheight-131+pfres*pfwidth,x
   5876  41c3				  -	      else
   5877  41c3				  -	      ldy	playfieldcolorandheight-87,x
   5878  41c3				  -	      endif
   5879  41c3				  -	      ifnconst	backgroundchange
   5880  41c3				  -	      sty	COLUPF
   5881  41c3				  -	      else
   5882  41c3				  -	      sty	COLUBK
   5883  41c3				  -	      endif
   5884  41c3				  -	      ifconst	pfres
   5885  41c3				  -	      lda	playfieldcolorandheight-132+pfres*pfwidth,x
   5886  41c3				  -	      else
   5887  41c3				  -	      lda	playfieldcolorandheight-88,x
   5888  41c3				  -	      endif
   5889  41c3				  -	      sta.w	temp1
   5890  41c3					      endif
   5891  41c3				  -	      ifconst	PFheights
   5892  41c3				  -	      lsr
   5893  41c3				  -	      lsr
   5894  41c3				  -	      tay
   5895  41c3				  -	      lda	(pfheighttable),y
   5896  41c3				  -	      sta.w	temp1
   5897  41c3					      endif
   5898  41c3					      ifconst	PFcolors
   5899  41c3		       a8		      tay
   5900  41c4		       b1 f0		      lda	(pfcolortable),y
   5901  41c6					      ifnconst	backgroundchange
   5902  41c6		       85 08		      sta	COLUPF
   5903  41c8				  -	      else
   5904  41c8				  -	      sta	COLUBK
   5905  41c8					      endif
   5906  41c8				  -	      ifconst	pfrowheight
   5907  41c8				  -	      lda	#pfrowheight
   5908  41c8					      else
   5909  41c8				  -	      ifnconst	pfres
   5910  41c8				  -	      lda	#8
   5911  41c8					      else
   5912  41c8		       a9 18		      lda	#(96/pfres)	; try to come close to the real size
   5913  41ca					      endif
   5914  41ca					      endif
   5915  41ca		       85 9c		      sta	temp1
   5916  41cc					      endif
   5917  41cc					      ifnconst	PFcolorandheight
   5918  41cc				  -	      ifnconst	PFcolors
   5919  41cc				  -	      ifnconst	PFheights
   5920  41cc				  -	      ifnconst	no_blank_lines
   5921  41cc				  -			; read paddle 0
   5922  41cc				  -			; lo-res paddle read
   5923  41cc				  -			; bit INPT0
   5924  41cc				  -			; bmi paddleskipread
   5925  41cc				  -			; inc paddle0
   5926  41cc				  -			;donepaddleskip
   5927  41cc				  -	      sleep	10
   5928  41cc				  -	      ifconst	pfrowheight
   5929  41cc				  -	      lda	#pfrowheight
   5930  41cc				  -	      else
   5931  41cc				  -	      ifnconst	pfres
   5932  41cc				  -	      lda	#8
   5933  41cc				  -	      else
   5934  41cc				  -	      lda	#(96/pfres)	; try to come close to the real size
   5935  41cc				  -	      endif
   5936  41cc				  -	      endif
   5937  41cc				  -	      sta	temp1
   5938  41cc				  -	      endif
   5939  41cc				  -	      endif
   5940  41cc					      endif
   5941  41cc					      endif
   5942  41cc
   5943  41cc
   5944  41cc		       a5 92		      lda	ballheight
   5945  41ce		       c7 89		      dcp	bally
   5946  41d0		       e5 9f		      sbc	temp4
   5947  41d2
   5948  41d2
   5949  41d2		       4c 76 f1 	      jmp	goback
   5950  41d5
   5951  41d5
   5952  41d5					      ifnconst	no_blank_lines
   5953  41d5				   lastkernelline
   5954  41d5				  -	      ifnconst	PFcolors
   5955  41d5				  -	      sleep	10
   5956  41d5					      else
   5957  41d5		       a0 7c		      ldy	#124
   5958  41d7		       b1 f0		      lda	(pfcolortable),y
   5959  41d9		       85 08		      sta	COLUPF
   5960  41db					      endif
   5961  41db
   5962  41db				  -	      ifconst	PFheights
   5963  41db				  -	      ldx	#1
   5964  41db				  -			;sleep 4
   5965  41db				  -	      sleep	3	; this was over 1 cycle
   5966  41db					      else
   5967  41db		       a6 ef		      ldx	playfieldpos
   5968  41dd							;sleep 3
      0  41dd					      sleep	2	; this was over 1 cycle
      1  41dd				   .CYCLES    SET	2
      2  41dd
      3  41dd				  -	      IF	.CYCLES < 2
      4  41dd				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  41dd				  -	      ERR
      6  41dd					      ENDIF
      7  41dd
      8  41dd				  -	      IF	.CYCLES & 1
      9  41dd				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  41dd				  -	      nop	0
     11  41dd				  -	      ELSE
     12  41dd				  -	      bit	VSYNC
     13  41dd				  -	      ENDIF
     14  41dd				  -.CYCLES    SET	.CYCLES - 3
     15  41dd					      ENDIF
     16  41dd
     17  41dd					      REPEAT	.CYCLES / 2
     18  41dd		       ea		      nop
     19  41de					      REPEND
   5970  41de					      endif
   5971  41de
   5972  41de		       4c 1b f2 	      jmp	enterlastkernel
   5973  41e1
   5974  41e1				  -	      else
   5975  41e1				  -lastkernelline
   5976  41e1				  -
   5977  41e1				  -	      ifconst	PFheights
   5978  41e1				  -	      ldx	#1
   5979  41e1				  -			;sleep 5
   5980  41e1				  -	      sleep	4	; this was over 1 cycle
   5981  41e1				  -	      else
   5982  41e1				  -	      ldx	playfieldpos
   5983  41e1				  -			;sleep 4
   5984  41e1				  -	      sleep	3	; this was over 1 cycle
   5985  41e1				  -	      endif
   5986  41e1				  -
   5987  41e1				  -	      cpx	#0
   5988  41e1				  -	      bne	.enterfromNBL
   5989  41e1				  -	      jmp	no_blank_lines_bailout
   5990  41e1					      endif
   5991  41e1
   5992  41e1					      if	((<*)>$d5)
   5993  4200		       00 00 00 00*	      align	256
   5994  4200					      endif
   5995  4200							; this is a kludge to prevent page wrapping - fix!!!
   5996  4200
   5997  4200				   .skipDrawlastP1
   5998  4200		       a9 00		      lda	#0
   5999  4202		       a8		      tay		; added so we don't cross a page
   6000  4203		       4c 2d f2 	      jmp	.continuelastP1
   6001  4206
   6002  4206				   .endkerloop		; enter at cycle 59??
   6003  4206
   6004  4206		       ea		      nop
   6005  4207
   6006  4207				   .enterfromNBL
   6007  4207					      ifconst	pfres
   6008  4207		       ac fc 10 	      ldy.w	playfield+pfres*pfwidth-4
   6009  420a		       84 0e		      sty	PF1L	;3
   6010  420c		       ac fd 10 	      ldy.w	playfield+pfres*pfwidth-3-pfadjust
   6011  420f		       84 0f		      sty	PF2L	;3
   6012  4211		       ac ff 10 	      ldy.w	playfield+pfres*pfwidth-1
   6013  4214		       84 0e		      sty	PF1R	; possibly too early?
   6014  4216		       ac fe 10 	      ldy.w	playfield+pfres*pfwidth-2-pfadjust
   6015  4219		       84 0f		      sty	PF2R	;3
   6016  421b				  -	      else
   6017  421b				  -	      ldy.w	playfield-48+pfwidth*12+44
   6018  421b				  -	      sty	PF1L	;3
   6019  421b				  -	      ldy.w	playfield-48+pfwidth*12+45-pfadjust
   6020  421b				  -	      sty	PF2L	;3
   6021  421b				  -	      ldy.w	playfield-48+pfwidth*12+47
   6022  421b				  -	      sty	PF1R	; possibly too early?
   6023  421b				  -	      ldy.w	playfield-48+pfwidth*12+46-pfadjust
   6024  421b				  -	      sty	PF2R	;3
   6025  421b					      endif
   6026  421b
   6027  421b				   enterlastkernel
   6028  421b		       a5 92		      lda	ballheight
   6029  421d
   6030  421d							; tya
   6031  421d		       c7 89		      dcp	bally
   6032  421f							; sleep 4
   6033  421f
   6034  421f							; sbc stack3
   6035  421f		       2a		      rol
   6036  4220		       2a		      rol
   6037  4221		       85 1f		      sta	ENABL
   6038  4223
   6039  4223		       a5 8f		      lda	player1height	;3
   6040  4225		       c7 86		      dcp	player1y	;5
   6041  4227		       90 d7		      bcc	.skipDrawlastP1
   6042  4229		       a4 86		      ldy	player1y	;3
   6043  422b		       b1 8c		      lda	(player1pointer),y	;5; player0pointer must be selected carefully by the compiler
   6044  422d							; so it doesn't cross a page boundary!
   6045  422d
   6046  422d				   .continuelastP1
   6047  422d		       85 1c		      sta	GRP1	;3
   6048  422f
   6049  422f				  -	      ifnconst	player1colors
   6050  422f				  -	      lda	missile1height	;3
   6051  422f				  -	      dcp	missile1y	;5
   6052  422f					      else
   6053  422f		       b1 87		      lda	(player1color),y
   6054  4231		       85 07		      sta	COLUP1
   6055  4233					      endif
   6056  4233
   6057  4233		       ca		      dex
   6058  4234							;dec temp4 ; might try putting this above PF writes
   6059  4234		       f0 36		      beq	endkernel
   6060  4236
   6061  4236
   6062  4236					      ifconst	pfres
   6063  4236		       ac fc 10 	      ldy.w	playfield+pfres*pfwidth-4
   6064  4239		       84 0e		      sty	PF1L	;3
   6065  423b		       ac fd 10 	      ldy.w	playfield+pfres*pfwidth-3-pfadjust
   6066  423e		       84 0f		      sty	PF2L	;3
   6067  4240		       ac ff 10 	      ldy.w	playfield+pfres*pfwidth-1
   6068  4243		       84 0e		      sty	PF1R	; possibly too early?
   6069  4245		       ac fe 10 	      ldy.w	playfield+pfres*pfwidth-2-pfadjust
   6070  4248		       84 0f		      sty	PF2R	;3
   6071  424a				  -	      else
   6072  424a				  -	      ldy.w	playfield-48+pfwidth*12+44
   6073  424a				  -	      sty	PF1L	;3
   6074  424a				  -	      ldy.w	playfield-48+pfwidth*12+45-pfadjust
   6075  424a				  -	      sty	PF2L	;3
   6076  424a				  -	      ldy.w	playfield-48+pfwidth*12+47
   6077  424a				  -	      sty	PF1R	; possibly too early?
   6078  424a				  -	      ldy.w	playfield-48+pfwidth*12+46-pfadjust
   6079  424a				  -	      sty	PF2R	;3
   6080  424a					      endif
   6081  424a
   6082  424a				  -	      ifnconst	player1colors
   6083  424a				  -	      rol		;2
   6084  424a				  -	      rol		;2
   6085  424a				  -	      sta	ENAM1	;3
   6086  424a					      else
   6087  424a					      ifnconst	playercolors
      0  424a					      sleep	7
      1  424a				   .CYCLES    SET	7
      2  424a
      3  424a				  -	      IF	.CYCLES < 2
      4  424a				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  424a				  -	      ERR
      6  424a					      ENDIF
      7  424a
      8  424a					      IF	.CYCLES & 1
      9  424a					      IFNCONST	NO_ILLEGAL_OPCODES
     10  424a		       04 00		      nop	0
     11  424c				  -	      ELSE
     12  424c				  -	      bit	VSYNC
     13  424c					      ENDIF
     14  424c				   .CYCLES    SET	.CYCLES - 3
     15  424c					      ENDIF
     16  424c
     17  424c					      REPEAT	.CYCLES / 2
     18  424c		       ea		      nop
     17  424c					      REPEND
     18  424d		       ea		      nop
     19  424e					      REPEND
   6089  424e				  -	      else
   6090  424e				  -	      lda.w	player0colorstore
   6091  424e				  -	      sta	COLUP0
   6092  424e					      endif
   6093  424e					      endif
   6094  424e
   6095  424e		       ad 8e 00 	      lda.w	player0height
   6096  4251		       c7 85		      dcp	player0y
   6097  4253		       90 11		      bcc	.skipDrawlastP0
   6098  4255		       a4 85		      ldy	player0y
   6099  4257		       b1 8a		      lda	(player0pointer),y
   6100  4259				   .continuelastP0
   6101  4259		       85 1b		      sta	GRP0
   6102  425b
   6103  425b
   6104  425b
   6105  425b					      ifnconst	no_blank_lines
   6106  425b		       a5 90		      lda	missile0height	;3
   6107  425d		       c7 91		      dcp	missile0y	;5
   6108  425f		       e5 f6		      sbc	stack1
   6109  4261		       85 1d		      sta	ENAM0	;3
   6110  4263		       4c 06 f2 	      jmp	.endkerloop
   6111  4266				  -	      else
   6112  4266				  -	      ifconst	readpaddle
   6113  4266				  -	      ldy	currentpaddle
   6114  4266				  -	      lda	INPT0,y
   6115  4266				  -	      bpl	noreadpaddle2
   6116  4266				  -	      inc	paddle
   6117  4266				  -	      jmp	.endkerloop
   6118  4266				  -noreadpaddle2
   6119  4266				  -	      sleep	4
   6120  4266				  -	      jmp	.endkerloop
   6121  4266				  -	      else		; no_blank_lines and no paddle reading
   6122  4266				  -	      pla
   6123  4266				  -	      pha		; 14 cycles in 4 bytes
   6124  4266				  -	      pla
   6125  4266				  -	      pha
   6126  4266				  -			; sleep 14
   6127  4266				  -	      jmp	.endkerloop
   6128  4266				  -	      endif
   6129  4266					      endif
   6130  4266
   6131  4266
   6132  4266							; ifconst donepaddleskip
   6133  4266							;paddleskipread
   6134  4266							; this is kind of lame, since it requires 4 cycles from a page boundary crossing
   6135  4266							; plus we get a lo-res paddle read
   6136  4266							; bmi donepaddleskip
   6137  4266							; endif
   6138  4266
   6139  4266				   .skipDrawlastP0
   6140  4266		       a9 00		      lda	#0
   6141  4268		       a8		      tay
   6142  4269		       4c 59 f2 	      jmp	.continuelastP0
   6143  426c
   6144  426c				  -	      ifconst	no_blank_lines
   6145  426c				  -no_blank_lines_bailout
   6146  426c				  -	      ldx	#0
   6147  426c					      endif
   6148  426c
   6149  426c				   endkernel
   6150  426c							; 6 digit score routine
   6151  426c		       86 0e		      stx	PF1
   6152  426e		       86 0f		      stx	PF2
   6153  4270		       86 0d		      stx	PF0
   6154  4272		       18		      clc
   6155  4273
   6156  4273				  -	      ifconst	pfrowheight
   6157  4273				  -	      lda	#pfrowheight+2
   6158  4273					      else
   6159  4273				  -	      ifnconst	pfres
   6160  4273				  -	      lda	#10
   6161  4273					      else
   6162  4273		       a9 1a		      lda	#(96/pfres)+2	; try to come close to the real size
   6163  4275					      endif
   6164  4275					      endif
   6165  4275
   6166  4275		       e5 ef		      sbc	playfieldpos
   6167  4277		       85 ef		      sta	playfieldpos
   6168  4279		       8a		      txa
   6169  427a
   6170  427a				  -	      ifconst	shakescreen
   6171  427a				  -	      bit	shakescreen
   6172  427a				  -	      bmi	noshakescreen2
   6173  427a				  -	      ldx	#$3D
   6174  427a				  -noshakescreen2
   6175  427a					      endif
   6176  427a
   6177  427a		       95 02		      sta	WSYNC,x
   6178  427c
   6179  427c							; STA WSYNC ;first one, need one more
   6180  427c		       85 0b		      sta	REFP0
   6181  427e		       85 0c		      sta	REFP1
   6182  4280		       85 1b		      STA	GRP0
   6183  4282		       85 1c		      STA	GRP1
   6184  4284							; STA PF1
   6185  4284							; STA PF2
   6186  4284		       85 2b		      sta	HMCLR
   6187  4286		       85 1d		      sta	ENAM0
   6188  4288		       85 1e		      sta	ENAM1
   6189  428a		       85 1f		      sta	ENABL
   6190  428c
   6191  428c		       a5 9d		      lda	temp2	;restore variables that were obliterated by kernel
   6192  428e		       85 85		      sta	player0y
   6193  4290		       a5 9e		      lda	temp3
   6194  4292		       85 86		      sta	player1y
   6195  4294				  -	      ifnconst	player1colors
   6196  4294				  -	      lda	temp6
   6197  4294				  -	      sta	missile1y
   6198  4294					      endif
   6199  4294					      ifnconst	playercolors
   6200  4294					      ifnconst	readpaddle
   6201  4294		       a5 a0		      lda	temp5
   6202  4296		       85 91		      sta	missile0y
   6203  4298					      endif
   6204  4298					      endif
   6205  4298		       a5 f7		      lda	stack2
   6206  429a		       85 89		      sta	bally
   6207  429c
   6208  429c							; strangely, this isn't required any more. might have
   6209  429c							; resulted from the no_blank_lines score bounce fix
   6210  429c							;ifconst no_blank_lines
   6211  429c							;sta WSYNC
   6212  429c							;endif
   6213  429c
   6214  429c		       ad 84 02 	      lda	INTIM
   6215  429f		       18		      clc
   6216  42a0					      ifnconst	vblank_time
   6217  42a0		       69 8e		      adc	#43+12+87
   6218  42a2				  -	      else
   6219  42a2				  -	      adc	#vblank_time+12+87
   6220  42a2				  -
   6221  42a2					      endif
   6222  42a2							; sta WSYNC
   6223  42a2		       8d 96 02 	      sta	TIM64T
   6224  42a5
   6225  42a5					      ifconst	minikernel
   6226  42a5		       20 82 f5 	      jsr	minikernel
   6227  42a8					      endif
   6228  42a8
   6229  42a8							; now reassign temp vars for score pointers
   6230  42a8
   6231  42a8							; score pointers contain:
   6232  42a8							; score1-5: lo1,lo2,lo3,lo4,lo5,lo6
   6233  42a8							; swap lo2->temp1
   6234  42a8							; swap lo4->temp3
   6235  42a8							; swap lo6->temp5
   6236  42a8				  -	      ifnconst	noscore
   6237  42a8				  -	      lda	scorepointers+1
   6238  42a8				  -			; ldy temp1
   6239  42a8				  -	      sta	temp1
   6240  42a8				  -			; sty scorepointers+1
   6241  42a8				  -
   6242  42a8				  -	      lda	scorepointers+3
   6243  42a8				  -			; ldy temp3
   6244  42a8				  -	      sta	temp3
   6245  42a8				  -			; sty scorepointers+3
   6246  42a8				  -
   6247  42a8				  -
   6248  42a8				  -	      sta	HMCLR
   6249  42a8				  -	      tsx
   6250  42a8				  -	      stx	stack1
   6251  42a8				  -	      ldx	#$E0
   6252  42a8				  -	      stx	HMP0
   6253  42a8				  -
   6254  42a8				  -	      LDA	scorecolor
   6255  42a8				  -	      STA	COLUP0
   6256  42a8				  -	      STA	COLUP1
   6257  42a8				  -	      ifconst	scorefade
   6258  42a8				  -	      STA	stack2
   6259  42a8				  -	      endif
   6260  42a8				  -	      ifconst	pfscore
   6261  42a8				  -	      lda	pfscorecolor
   6262  42a8				  -	      sta	COLUPF
   6263  42a8				  -	      endif
   6264  42a8				  -	      sta	WSYNC
   6265  42a8				  -	      ldx	#0
   6266  42a8				  -	      STx	GRP0
   6267  42a8				  -	      STx	GRP1	; seems to be needed because of vdel
   6268  42a8				  -
   6269  42a8				  -	      lda	scorepointers+5
   6270  42a8				  -			; ldy temp5
   6271  42a8				  -	      sta	temp5,x
   6272  42a8				  -			; sty scorepointers+5
   6273  42a8				  -	      lda	#>scoretable
   6274  42a8				  -	      sta	scorepointers+1
   6275  42a8				  -	      sta	scorepointers+3
   6276  42a8				  -	      sta	scorepointers+5
   6277  42a8				  -	      sta	temp2
   6278  42a8				  -	      sta	temp4
   6279  42a8				  -	      sta	temp6
   6280  42a8				  -	      LDY	#7
   6281  42a8				  -	      STY	VDELP0
   6282  42a8				  -	      STA	RESP0
   6283  42a8				  -	      STA	RESP1
   6284  42a8				  -
   6285  42a8				  -
   6286  42a8				  -	      LDA	#$03
   6287  42a8				  -	      STA	NUSIZ0
   6288  42a8				  -	      STA	NUSIZ1
   6289  42a8				  -	      STA	VDELP1
   6290  42a8				  -	      LDA	#$F0
   6291  42a8				  -	      STA	HMP1
   6292  42a8				  -	      lda	(scorepointers),y
   6293  42a8				  -	      sta	GRP0
   6294  42a8				  -	      STA	HMOVE	; cycle 73 ?
   6295  42a8				  -	      jmp	beginscore
   6296  42a8				  -
   6297  42a8				  -
   6298  42a8				  -	      if	((<*)>$d4)
   6299  42a8				  -	      align	256	; kludge that potentially wastes space! should be fixed!
   6300  42a8				  -	      endif
   6301  42a8				  -
   6302  42a8				  -loop2
   6303  42a8				  -	      lda	(scorepointers),y	;+5 68 204
   6304  42a8				  -	      sta	GRP0	;+3 71 213 D1 -- -- --
   6305  42a8				  -	      ifconst	pfscore
   6306  42a8				  -	      lda.w	pfscore1
   6307  42a8				  -	      sta	PF1
   6308  42a8				  -	      else
   6309  42a8				  -	      ifconst	scorefade
   6310  42a8				  -	      sleep	2
   6311  42a8				  -	      dec	stack2	; decrement the temporary scorecolor
   6312  42a8				  -	      else
   6313  42a8				  -	      sleep	7
   6314  42a8				  -	      endif
   6315  42a8				  -	      endif
   6316  42a8				  -			; cycle 0
   6317  42a8				  -beginscore
   6318  42a8				  -	      lda	(scorepointers+$8),y	;+5 5 15
   6319  42a8				  -	      sta	GRP1	;+3 8 24 D1 D1 D2 --
   6320  42a8				  -	      lda	(scorepointers+$6),y	;+5 13 39
   6321  42a8				  -	      sta	GRP0	;+3 16 48 D3 D1 D2 D2
   6322  42a8				  -	      lax	(scorepointers+$2),y	;+5 29 87
   6323  42a8				  -	      txs
   6324  42a8				  -	      lax	(scorepointers+$4),y	;+5 36 108
   6325  42a8				  -	      ifconst	scorefade
   6326  42a8				  -	      lda	stack2
   6327  42a8				  -	      else
   6328  42a8				  -	      sleep	3
   6329  42a8				  -	      endif
   6330  42a8				  -
   6331  42a8				  -	      ifconst	pfscore
   6332  42a8				  -	      lda	pfscore2
   6333  42a8				  -	      sta	PF1
   6334  42a8				  -	      else
   6335  42a8				  -	      ifconst	scorefade
   6336  42a8				  -	      sta	COLUP0
   6337  42a8				  -	      sta	COLUP1
   6338  42a8				  -	      else
   6339  42a8				  -	      sleep	6
   6340  42a8				  -	      endif
   6341  42a8				  -	      endif
   6342  42a8				  -
   6343  42a8				  -	      lda	(scorepointers+$A),y	;+5 21 63
   6344  42a8				  -	      stx	GRP1	;+3 44 132 D3 D3 D4 D2!
   6345  42a8				  -	      tsx
   6346  42a8				  -	      stx	GRP0	;+3 47 141 D5 D3! D4 D4
   6347  42a8				  -	      sta	GRP1	;+3 50 150 D5 D5 D6 D4!
   6348  42a8				  -	      sty	GRP0	;+3 53 159 D4* D5! D6 D6
   6349  42a8				  -	      dey
   6350  42a8				  -	      bpl	loop2	;+2 60 180
   6351  42a8				  -
   6352  42a8				  -	      ldx	stack1
   6353  42a8				  -	      txs
   6354  42a8				  -			; lda scorepointers+1
   6355  42a8				  -	      ldy	temp1
   6356  42a8				  -			; sta temp1
   6357  42a8				  -	      sty	scorepointers+1
   6358  42a8				  -
   6359  42a8				  -	      LDA	#0
   6360  42a8				  -	      sta	PF1
   6361  42a8				  -	      STA	GRP0
   6362  42a8				  -	      STA	GRP1
   6363  42a8				  -	      STA	VDELP0
   6364  42a8				  -	      STA	VDELP1	;do we need these
   6365  42a8				  -	      STA	NUSIZ0
   6366  42a8				  -	      STA	NUSIZ1
   6367  42a8				  -
   6368  42a8				  -			; lda scorepointers+3
   6369  42a8				  -	      ldy	temp3
   6370  42a8				  -			; sta temp3
   6371  42a8				  -	      sty	scorepointers+3
   6372  42a8				  -
   6373  42a8				  -			; lda scorepointers+5
   6374  42a8				  -	      ldy	temp5
   6375  42a8				  -			; sta temp5
   6376  42a8				  -	      sty	scorepointers+5
   6377  42a8					      endif		;noscore
   6378  42a8				  -	      ifconst	readpaddle
   6379  42a8				  -	      lda	#%11000010
   6380  42a8					      else
   6381  42a8				  -	      ifconst	qtcontroller
   6382  42a8				  -	      lda	qtcontroller
   6383  42a8				  -	      lsr		; bit 0 in carry
   6384  42a8				  -	      lda	#4
   6385  42a8				  -	      ror		; carry into top of A
   6386  42a8					      else
   6387  42a8		       a9 02		      lda	#2
   6388  42aa					      endif		; qtcontroller
   6389  42aa					      endif		; readpaddle
   6390  42aa		       85 02		      sta	WSYNC
   6391  42ac		       85 01		      sta	VBLANK
      0  42ae					      RETURN
      1  42ae				  -	      ifnconst	bankswitch
      2  42ae				  -	      rts
      3  42ae					      else
      4  42ae		       4c da ff 	      jmp	BS_return
      5  42b1					      endif
   6393  42b1				  -	      ifconst	shakescreen
   6394  42b1				  -doshakescreen
   6395  42b1				  -	      bit	shakescreen
   6396  42b1				  -	      bmi	noshakescreen
   6397  42b1				  -	      sta	WSYNC
   6398  42b1				  -noshakescreen
   6399  42b1				  -	      ldx	missile0height
   6400  42b1				  -	      inx
   6401  42b1				  -	      rts
   6402  42b1					      endif
   6403  42b1
   6404  42b1							; Provided under the CC0 license. See the included LICENSE.txt for details.
   6405  42b1
   6406  42b1				   start
   6407  42b1		       78		      sei
   6408  42b2		       d8		      cld
   6409  42b3		       a0 00		      ldy	#0
   6410  42b5		       a5 d0		      lda	$D0
   6411  42b7		       c9 2c		      cmp	#$2C	;check RAM location #1
   6412  42b9		       d0 07		      bne	MachineIs2600
   6413  42bb		       a5 d1		      lda	$D1
   6414  42bd		       c9 a9		      cmp	#$A9	;check RAM location #2
   6415  42bf		       d0 01		      bne	MachineIs2600
   6416  42c1		       88		      dey
   6417  42c2				   MachineIs2600
   6418  42c2		       a2 00		      ldx	#0
   6419  42c4		       8a		      txa
   6420  42c5				   clearmem
   6421  42c5		       e8		      inx
   6422  42c6		       9a		      txs
   6423  42c7		       48		      pha
   6424  42c8		       d0 fb		      bne	clearmem
   6425  42ca		       84 9c		      sty	temp1
   6426  42cc					      ifnconst	multisprite
   6427  42cc				  -	      ifconst	pfrowheight
   6428  42cc				  -	      lda	#pfrowheight
   6429  42cc					      else
   6430  42cc					      ifconst	pfres
   6431  42cc		       a9 18		      lda	#(96/pfres)
   6432  42ce				  -	      else
   6433  42ce				  -	      lda	#8
   6434  42ce					      endif
   6435  42ce					      endif
   6436  42ce		       85 ef		      sta	playfieldpos
   6437  42d0					      endif
   6438  42d0		       a2 05		      ldx	#5
   6439  42d2				   initscore
   6440  42d2		       a9 71		      lda	#<scoretable
   6441  42d4		       95 96		      sta	scorepointers,x
   6442  42d6		       ca		      dex
   6443  42d7		       10 f9		      bpl	initscore
   6444  42d9		       a9 01		      lda	#1
   6445  42db		       85 0a		      sta	CTRLPF
   6446  42dd		       0d 84 02 	      ora	INTIM
   6447  42e0		       85 a2		      sta	rand
   6448  42e2
   6449  42e2				  -	      ifconst	multisprite
   6450  42e2				  -	      jsr	multisprite_setup
   6451  42e2					      endif
   6452  42e2
   6453  42e2				  -	      ifnconst	bankswitch
   6454  42e2				  -	      jmp	game
   6455  42e2					      else
   6456  42e2		       a9 90		      lda	#>(game-1)
   6457  42e4		       48		      pha
   6458  42e5		       a9 ff		      lda	#<(game-1)
   6459  42e7		       48		      pha
   6460  42e8		       48		      pha
   6461  42e9		       48		      pha
   6462  42ea		       a2 01		      ldx	#1
   6463  42ec		       4c e8 ff 	      jmp	BS_jsr
   6464  42ef					      endif
   6465  42ef							; Provided under the CC0 license. See the included LICENSE.txt for details.
   6466  42ef
   6467  42ef							; playfield drawing routines
   6468  42ef							; you get a 32x12 bitmapped display in a single color :)
   6469  42ef							; 0-31 and 0-11
   6470  42ef
   6471  42ef				   pfclear		; clears playfield - or fill with pattern
   6472  42ef					      ifconst	pfres
   6473  42ef		       a2 0f		      ldx	#pfres*pfwidth-1
   6474  42f1				  -	      else
   6475  42f1				  -	      ldx	#47-(4-pfwidth)*12	; will this work?
   6476  42f1					      endif
   6477  42f1				   pfclear_loop
   6478  42f1				  -	      ifnconst	superchip
   6479  42f1				  -	      sta	playfield,x
   6480  42f1					      else
   6481  42f1		       9d 70 10 	      sta	playfield-128,x
   6482  42f4					      endif
   6483  42f4		       ca		      dex
   6484  42f5		       10 fa		      bpl	pfclear_loop
      0  42f7					      RETURN
      1  42f7				  -	      ifnconst	bankswitch
      2  42f7				  -	      rts
      3  42f7					      else
      4  42f7		       4c da ff 	      jmp	BS_return
      5  42fa					      endif
   6486  42fa
   6487  42fa				   setuppointers
   6488  42fa		       86 9d		      stx	temp2	; store on.off.flip value
   6489  42fc		       aa		      tax		; put x-value in x 
   6490  42fd		       4a		      lsr
   6491  42fe		       4a		      lsr
   6492  42ff		       4a		      lsr		; divide x pos by 8 
   6493  4300		       85 9c		      sta	temp1
   6494  4302		       98		      tya
   6495  4303		       0a		      asl
   6496  4304					      if	pfwidth=4
   6497  4304		       0a		      asl		; multiply y pos by 4
   6498  4305					      endif		; else multiply by 2
   6499  4305		       18		      clc
   6500  4306		       65 9c		      adc	temp1	; add them together to get actual memory location offset
   6501  4308		       a8		      tay		; put the value in y
   6502  4309		       a5 9d		      lda	temp2	; restore on.off.flip value
   6503  430b		       60		      rts
   6504  430c
   6505  430c				   pfread
   6506  430c							;x=xvalue, y=yvalue
   6507  430c		       20 fa f2 	      jsr	setuppointers
   6508  430f		       bd a4 f3 	      lda	setbyte,x
   6509  4312		       39 f0 10 	      and	playfield,y
   6510  4315		       5d a4 f3 	      eor	setbyte,x
   6511  4318							; beq readzero
   6512  4318							; lda #1
   6513  4318							; readzero
      0  4318					      RETURN
      1  4318				  -	      ifnconst	bankswitch
      2  4318				  -	      rts
      3  4318					      else
      4  4318		       4c da ff 	      jmp	BS_return
      5  431b					      endif
   6515  431b
   6516  431b				   pfpixel
   6517  431b							;x=xvalue, y=yvalue, a=0,1,2
   6518  431b		       20 fa f2 	      jsr	setuppointers
   6519  431e
   6520  431e					      ifconst	bankswitch
   6521  431e		       a5 9d		      lda	temp2	; load on.off.flip value (0,1, or 2)
   6522  4320		       f0 0f		      beq	pixelon_r	; if "on" go to on
   6523  4322		       4a		      lsr
   6524  4323		       b0 18		      bcs	pixeloff_r	; value is 1 if true
   6525  4325		       b9 f0 10 	      lda	playfield,y	; if here, it's "flip"
   6526  4328		       5d a4 f3 	      eor	setbyte,x
   6527  432b					      ifconst	superchip
   6528  432b		       99 70 10 	      sta	playfield-128,y
   6529  432e				  -	      else
   6530  432e				  -	      sta	playfield,y
   6531  432e					      endif
      0  432e					      RETURN
      1  432e				  -	      ifnconst	bankswitch
      2  432e				  -	      rts
      3  432e					      else
      4  432e		       4c da ff 	      jmp	BS_return
      5  4331					      endif
   6533  4331				   pixelon_r
   6534  4331		       b9 f0 10 	      lda	playfield,y
   6535  4334		       1d a4 f3 	      ora	setbyte,x
   6536  4337					      ifconst	superchip
   6537  4337		       99 70 10 	      sta	playfield-128,y
   6538  433a				  -	      else
   6539  433a				  -	      sta	playfield,y
   6540  433a					      endif
      0  433a					      RETURN
      1  433a				  -	      ifnconst	bankswitch
      2  433a				  -	      rts
      3  433a					      else
      4  433a		       4c da ff 	      jmp	BS_return
      5  433d					      endif
   6542  433d				   pixeloff_r
   6543  433d		       bd a4 f3 	      lda	setbyte,x
   6544  4340		       49 ff		      eor	#$ff
   6545  4342		       39 f0 10 	      and	playfield,y
   6546  4345					      ifconst	superchip
   6547  4345		       99 70 10 	      sta	playfield-128,y
   6548  4348				  -	      else
   6549  4348				  -	      sta	playfield,y
   6550  4348					      endif
      0  4348					      RETURN
      1  4348				  -	      ifnconst	bankswitch
      2  4348				  -	      rts
      3  4348					      else
      4  4348		       4c da ff 	      jmp	BS_return
      5  434b					      endif
   6552  434b
   6553  434b				  -	      else
   6554  434b				  -	      jmp	plotpoint
   6555  434b					      endif
   6556  434b
   6557  434b				   pfhline
   6558  434b							;x=xvalue, y=yvalue, a=0,1,2, temp3=endx
   6559  434b		       20 fa f2 	      jsr	setuppointers
   6560  434e		       4c 58 f3 	      jmp	noinc
   6561  4351				   keepgoing
   6562  4351		       e8		      inx
   6563  4352		       8a		      txa
   6564  4353		       29 07		      and	#7
   6565  4355		       d0 01		      bne	noinc
   6566  4357		       c8		      iny
   6567  4358				   noinc
   6568  4358		       20 7d f3 	      jsr	plotpoint
   6569  435b		       e4 9e		      cpx	temp3
   6570  435d		       30 f2		      bmi	keepgoing
      0  435f					      RETURN
      1  435f				  -	      ifnconst	bankswitch
      2  435f				  -	      rts
      3  435f					      else
      4  435f		       4c da ff 	      jmp	BS_return
      5  4362					      endif
   6572  4362
   6573  4362				   pfvline
   6574  4362							;x=xvalue, y=yvalue, a=0,1,2, temp3=endx
   6575  4362		       20 fa f2 	      jsr	setuppointers
   6576  4365		       84 9c		      sty	temp1	; store memory location offset
   6577  4367		       e6 9e		      inc	temp3	; increase final x by 1 
   6578  4369		       a5 9e		      lda	temp3
   6579  436b		       0a		      asl
   6580  436c					      if	pfwidth=4
   6581  436c		       0a		      asl		; multiply by 4
   6582  436d					      endif		; else multiply by 2
   6583  436d		       85 9e		      sta	temp3	; store it
   6584  436f							; Thanks to Michael Rideout for fixing a bug in this code
   6585  436f							; right now, temp1=y=starting memory location, temp3=final
   6586  436f							; x should equal original x value
   6587  436f				   keepgoingy
   6588  436f		       20 7d f3 	      jsr	plotpoint
   6589  4372		       c8		      iny
   6590  4373		       c8		      iny
   6591  4374					      if	pfwidth=4
   6592  4374		       c8		      iny
   6593  4375		       c8		      iny
   6594  4376					      endif
   6595  4376		       c4 9e		      cpy	temp3
   6596  4378		       30 f5		      bmi	keepgoingy
      0  437a					      RETURN
      1  437a				  -	      ifnconst	bankswitch
      2  437a				  -	      rts
      3  437a					      else
      4  437a		       4c da ff 	      jmp	BS_return
      5  437d					      endif
   6598  437d
   6599  437d				   plotpoint
   6600  437d		       a5 9d		      lda	temp2	; load on.off.flip value (0,1, or 2)
   6601  437f		       f0 0d		      beq	pixelon	; if "on" go to on
   6602  4381		       4a		      lsr
   6603  4382		       b0 14		      bcs	pixeloff	; value is 1 if true
   6604  4384		       b9 f0 10 	      lda	playfield,y	; if here, it's "flip"
   6605  4387		       5d a4 f3 	      eor	setbyte,x
   6606  438a					      ifconst	superchip
   6607  438a		       99 70 10 	      sta	playfield-128,y
   6608  438d				  -	      else
   6609  438d				  -	      sta	playfield,y
   6610  438d					      endif
   6611  438d		       60		      rts
   6612  438e				   pixelon
   6613  438e		       b9 f0 10 	      lda	playfield,y
   6614  4391		       1d a4 f3 	      ora	setbyte,x
   6615  4394					      ifconst	superchip
   6616  4394		       99 70 10 	      sta	playfield-128,y
   6617  4397				  -	      else
   6618  4397				  -	      sta	playfield,y
   6619  4397					      endif
   6620  4397		       60		      rts
   6621  4398				   pixeloff
   6622  4398		       bd a4 f3 	      lda	setbyte,x
   6623  439b		       49 ff		      eor	#$ff
   6624  439d		       39 f0 10 	      and	playfield,y
   6625  43a0					      ifconst	superchip
   6626  43a0		       99 70 10 	      sta	playfield-128,y
   6627  43a3				  -	      else
   6628  43a3				  -	      sta	playfield,y
   6629  43a3					      endif
   6630  43a3		       60		      rts
   6631  43a4
   6632  43a4				   setbyte
   6633  43a4					      ifnconst	pfcenter
   6634  43a4		       80		      .byte.b	$80
   6635  43a5		       40		      .byte.b	$40
   6636  43a6		       20		      .byte.b	$20
   6637  43a7		       10		      .byte.b	$10
   6638  43a8		       08		      .byte.b	$08
   6639  43a9		       04		      .byte.b	$04
   6640  43aa		       02		      .byte.b	$02
   6641  43ab		       01		      .byte.b	$01
   6642  43ac					      endif
   6643  43ac		       01		      .byte.b	$01
   6644  43ad		       02		      .byte.b	$02
   6645  43ae		       04		      .byte.b	$04
   6646  43af		       08		      .byte.b	$08
   6647  43b0		       10		      .byte.b	$10
   6648  43b1		       20		      .byte.b	$20
   6649  43b2		       40		      .byte.b	$40
   6650  43b3		       80		      .byte.b	$80
   6651  43b4		       80		      .byte.b	$80
   6652  43b5		       40		      .byte.b	$40
   6653  43b6		       20		      .byte.b	$20
   6654  43b7		       10		      .byte.b	$10
   6655  43b8		       08		      .byte.b	$08
   6656  43b9		       04		      .byte.b	$04
   6657  43ba		       02		      .byte.b	$02
   6658  43bb		       01		      .byte.b	$01
   6659  43bc		       01		      .byte.b	$01
   6660  43bd		       02		      .byte.b	$02
   6661  43be		       04		      .byte.b	$04
   6662  43bf		       08		      .byte.b	$08
   6663  43c0		       10		      .byte.b	$10
   6664  43c1		       20		      .byte.b	$20
   6665  43c2		       40		      .byte.b	$40
   6666  43c3		       80		      .byte.b	$80
   6667  43c4							; Provided under the CC0 license. See the included LICENSE.txt for details.
   6668  43c4
   6669  43c4				   pfscroll		;(a=0 left, 1 right, 2 up, 4 down, 6=upup, 12=downdown)
   6670  43c4		       d0 2a		      bne	notleft
   6671  43c6							;left
   6672  43c6					      ifconst	pfres
   6673  43c6		       a2 10		      ldx	#pfres*4
   6674  43c8				  -	      else
   6675  43c8				  -	      ldx	#48
   6676  43c8					      endif
   6677  43c8				   leftloop
   6678  43c8		       bd ef 10 	      lda	playfield-1,x
   6679  43cb		       4a		      lsr
   6680  43cc
   6681  43cc					      ifconst	superchip
   6682  43cc		       bd ee 10 	      lda	playfield-2,x
   6683  43cf		       2a		      rol
   6684  43d0		       9d 6e 10 	      sta	playfield-130,x
   6685  43d3		       bd ed 10 	      lda	playfield-3,x
   6686  43d6		       6a		      ror
   6687  43d7		       9d 6d 10 	      sta	playfield-131,x
   6688  43da		       bd ec 10 	      lda	playfield-4,x
   6689  43dd		       2a		      rol
   6690  43de		       9d 6c 10 	      sta	playfield-132,x
   6691  43e1		       bd ef 10 	      lda	playfield-1,x
   6692  43e4		       6a		      ror
   6693  43e5		       9d 6f 10 	      sta	playfield-129,x
   6694  43e8				  -	      else
   6695  43e8				  -	      rol	playfield-2,x
   6696  43e8				  -	      ror	playfield-3,x
   6697  43e8				  -	      rol	playfield-4,x
   6698  43e8				  -	      ror	playfield-1,x
   6699  43e8					      endif
   6700  43e8
   6701  43e8		       8a		      txa
   6702  43e9		       cb 04		      sbx	#4
   6703  43eb		       d0 db		      bne	leftloop
      0  43ed					      RETURN
      1  43ed				  -	      ifnconst	bankswitch
      2  43ed				  -	      rts
      3  43ed					      else
      4  43ed		       4c da ff 	      jmp	BS_return
      5  43f0					      endif
   6705  43f0
   6706  43f0				   notleft
   6707  43f0		       4a		      lsr
   6708  43f1		       90 2a		      bcc	notright
   6709  43f3							;right
   6710  43f3
   6711  43f3					      ifconst	pfres
   6712  43f3		       a2 10		      ldx	#pfres*4
   6713  43f5				  -	      else
   6714  43f5				  -	      ldx	#48
   6715  43f5					      endif
   6716  43f5				   rightloop
   6717  43f5		       bd ec 10 	      lda	playfield-4,x
   6718  43f8		       4a		      lsr
   6719  43f9					      ifconst	superchip
   6720  43f9		       bd ed 10 	      lda	playfield-3,x
   6721  43fc		       2a		      rol
   6722  43fd		       9d 6d 10 	      sta	playfield-131,x
   6723  4400		       bd ee 10 	      lda	playfield-2,x
   6724  4403		       6a		      ror
   6725  4404		       9d 6e 10 	      sta	playfield-130,x
   6726  4407		       bd ef 10 	      lda	playfield-1,x
   6727  440a		       2a		      rol
   6728  440b		       9d 6f 10 	      sta	playfield-129,x
   6729  440e		       bd ec 10 	      lda	playfield-4,x
   6730  4411		       6a		      ror
   6731  4412		       9d 6c 10 	      sta	playfield-132,x
   6732  4415				  -	      else
   6733  4415				  -	      rol	playfield-3,x
   6734  4415				  -	      ror	playfield-2,x
   6735  4415				  -	      rol	playfield-1,x
   6736  4415				  -	      ror	playfield-4,x
   6737  4415					      endif
   6738  4415		       8a		      txa
   6739  4416		       cb 04		      sbx	#4
   6740  4418		       d0 db		      bne	rightloop
      0  441a					      RETURN
      1  441a				  -	      ifnconst	bankswitch
      2  441a				  -	      rts
      3  441a					      else
      4  441a		       4c da ff 	      jmp	BS_return
      5  441d					      endif
   6742  441d
   6743  441d				   notright
   6744  441d		       4a		      lsr
   6745  441e		       90 5b		      bcc	notup
   6746  4420							;up
   6747  4420		       4a		      lsr
   6748  4421		       90 02		      bcc	onedecup
   6749  4423		       c6 ef		      dec	playfieldpos
   6750  4425				   onedecup
   6751  4425		       c6 ef		      dec	playfieldpos
   6752  4427		       f0 02		      beq	shiftdown
   6753  4429		       10 4d		      bpl	noshiftdown2
   6754  442b				   shiftdown
   6755  442b				  -	      ifconst	pfrowheight
   6756  442b				  -	      lda	#pfrowheight
   6757  442b					      else
   6758  442b				  -	      ifnconst	pfres
   6759  442b				  -	      lda	#8
   6760  442b					      else
   6761  442b		       a9 18		      lda	#(96/pfres)	; try to come close to the real size
   6762  442d					      endif
   6763  442d					      endif
   6764  442d
   6765  442d		       85 ef		      sta	playfieldpos
   6766  442f		       ad f3 10 	      lda	playfield+3
   6767  4432		       85 9f		      sta	temp4
   6768  4434		       ad f2 10 	      lda	playfield+2
   6769  4437		       85 9e		      sta	temp3
   6770  4439		       ad f1 10 	      lda	playfield+1
   6771  443c		       85 9d		      sta	temp2
   6772  443e		       ad f0 10 	      lda	playfield
   6773  4441		       85 9c		      sta	temp1
   6774  4443		       a2 00		      ldx	#0
   6775  4445				   up2
   6776  4445		       bd f4 10 	      lda	playfield+4,x
   6777  4448					      ifconst	superchip
   6778  4448		       9d 70 10 	      sta	playfield-128,x
   6779  444b		       bd f5 10 	      lda	playfield+5,x
   6780  444e		       9d 71 10 	      sta	playfield-127,x
   6781  4451		       bd f6 10 	      lda	playfield+6,x
   6782  4454		       9d 72 10 	      sta	playfield-126,x
   6783  4457		       bd f7 10 	      lda	playfield+7,x
   6784  445a		       9d 73 10 	      sta	playfield-125,x
   6785  445d				  -	      else
   6786  445d				  -	      sta	playfield,x
   6787  445d				  -	      lda	playfield+5,x
   6788  445d				  -	      sta	playfield+1,x
   6789  445d				  -	      lda	playfield+6,x
   6790  445d				  -	      sta	playfield+2,x
   6791  445d				  -	      lda	playfield+7,x
   6792  445d				  -	      sta	playfield+3,x
   6793  445d					      endif
   6794  445d		       8a		      txa
   6795  445e		       cb fc		      sbx	#252
   6796  4460					      ifconst	pfres
   6797  4460		       e0 0c		      cpx	#(pfres-1)*4
   6798  4462				  -	      else
   6799  4462				  -	      cpx	#44
   6800  4462					      endif
   6801  4462		       d0 e1		      bne	up2
   6802  4464
   6803  4464		       a5 9f		      lda	temp4
   6804  4466
   6805  4466					      ifconst	superchip
   6806  4466					      ifconst	pfres
   6807  4466		       8d 7f 10 	      sta	playfield+pfres*4-129
   6808  4469		       a5 9e		      lda	temp3
   6809  446b		       8d 7e 10 	      sta	playfield+pfres*4-130
   6810  446e		       a5 9d		      lda	temp2
   6811  4470		       8d 7d 10 	      sta	playfield+pfres*4-131
   6812  4473		       a5 9c		      lda	temp1
   6813  4475		       8d 7c 10 	      sta	playfield+pfres*4-132
   6814  4478				  -	      else
   6815  4478				  -	      sta	playfield+47-128
   6816  4478				  -	      lda	temp3
   6817  4478				  -	      sta	playfield+46-128
   6818  4478				  -	      lda	temp2
   6819  4478				  -	      sta	playfield+45-128
   6820  4478				  -	      lda	temp1
   6821  4478				  -	      sta	playfield+44-128
   6822  4478					      endif
   6823  4478				  -	      else
   6824  4478				  -	      ifconst	pfres
   6825  4478				  -	      sta	playfield+pfres*4-1
   6826  4478				  -	      lda	temp3
   6827  4478				  -	      sta	playfield+pfres*4-2
   6828  4478				  -	      lda	temp2
   6829  4478				  -	      sta	playfield+pfres*4-3
   6830  4478				  -	      lda	temp1
   6831  4478				  -	      sta	playfield+pfres*4-4
   6832  4478				  -	      else
   6833  4478				  -	      sta	playfield+47
   6834  4478				  -	      lda	temp3
   6835  4478				  -	      sta	playfield+46
   6836  4478				  -	      lda	temp2
   6837  4478				  -	      sta	playfield+45
   6838  4478				  -	      lda	temp1
   6839  4478				  -	      sta	playfield+44
   6840  4478				  -	      endif
   6841  4478					      endif
   6842  4478				   noshiftdown2
      0  4478					      RETURN
      1  4478				  -	      ifnconst	bankswitch
      2  4478				  -	      rts
      3  4478					      else
      4  4478		       4c da ff 	      jmp	BS_return
      5  447b					      endif
   6844  447b
   6845  447b
   6846  447b				   notup
   6847  447b							;down
   6848  447b		       4a		      lsr
   6849  447c		       b0 02		      bcs	oneincup
   6850  447e		       e6 ef		      inc	playfieldpos
   6851  4480				   oneincup
   6852  4480		       e6 ef		      inc	playfieldpos
   6853  4482		       a5 ef		      lda	playfieldpos
   6854  4484
   6855  4484				  -	      ifconst	pfrowheight
   6856  4484				  -	      cmp	#pfrowheight+1
   6857  4484					      else
   6858  4484				  -	      ifnconst	pfres
   6859  4484				  -	      cmp	#9
   6860  4484					      else
   6861  4484		       c9 19		      cmp	#(96/pfres)+1	; try to come close to the real size
   6862  4486					      endif
   6863  4486					      endif
   6864  4486
   6865  4486		       90 4b		      bcc	noshiftdown
   6866  4488		       a9 01		      lda	#1
   6867  448a		       85 ef		      sta	playfieldpos
   6868  448c
   6869  448c					      ifconst	pfres
   6870  448c		       ad ff 10 	      lda	playfield+pfres*4-1
   6871  448f		       85 9f		      sta	temp4
   6872  4491		       ad fe 10 	      lda	playfield+pfres*4-2
   6873  4494		       85 9e		      sta	temp3
   6874  4496		       ad fd 10 	      lda	playfield+pfres*4-3
   6875  4499		       85 9d		      sta	temp2
   6876  449b		       ad fc 10 	      lda	playfield+pfres*4-4
   6877  449e				  -	      else
   6878  449e				  -	      lda	playfield+47
   6879  449e				  -	      sta	temp4
   6880  449e				  -	      lda	playfield+46
   6881  449e				  -	      sta	temp3
   6882  449e				  -	      lda	playfield+45
   6883  449e				  -	      sta	temp2
   6884  449e				  -	      lda	playfield+44
   6885  449e					      endif
   6886  449e
   6887  449e		       85 9c		      sta	temp1
   6888  44a0
   6889  44a0					      ifconst	pfres
   6890  44a0		       a2 0c		      ldx	#(pfres-1)*4
   6891  44a2				  -	      else
   6892  44a2				  -	      ldx	#44
   6893  44a2					      endif
   6894  44a2				   down2
   6895  44a2		       bd ef 10 	      lda	playfield-1,x
   6896  44a5					      ifconst	superchip
   6897  44a5		       9d 73 10 	      sta	playfield-125,x
   6898  44a8		       bd ee 10 	      lda	playfield-2,x
   6899  44ab		       9d 72 10 	      sta	playfield-126,x
   6900  44ae		       bd ed 10 	      lda	playfield-3,x
   6901  44b1		       9d 71 10 	      sta	playfield-127,x
   6902  44b4		       bd ec 10 	      lda	playfield-4,x
   6903  44b7		       9d 70 10 	      sta	playfield-128,x
   6904  44ba				  -	      else
   6905  44ba				  -	      sta	playfield+3,x
   6906  44ba				  -	      lda	playfield-2,x
   6907  44ba				  -	      sta	playfield+2,x
   6908  44ba				  -	      lda	playfield-3,x
   6909  44ba				  -	      sta	playfield+1,x
   6910  44ba				  -	      lda	playfield-4,x
   6911  44ba				  -	      sta	playfield,x
   6912  44ba					      endif
   6913  44ba		       8a		      txa
   6914  44bb		       cb 04		      sbx	#4
   6915  44bd		       d0 e3		      bne	down2
   6916  44bf
   6917  44bf		       a5 9f		      lda	temp4
   6918  44c1					      ifconst	superchip
   6919  44c1		       8d 73 10 	      sta	playfield-125
   6920  44c4		       a5 9e		      lda	temp3
   6921  44c6		       8d 72 10 	      sta	playfield-126
   6922  44c9		       a5 9d		      lda	temp2
   6923  44cb		       8d 71 10 	      sta	playfield-127
   6924  44ce		       a5 9c		      lda	temp1
   6925  44d0		       8d 70 10 	      sta	playfield-128
   6926  44d3				  -	      else
   6927  44d3				  -	      sta	playfield+3
   6928  44d3				  -	      lda	temp3
   6929  44d3				  -	      sta	playfield+2
   6930  44d3				  -	      lda	temp2
   6931  44d3				  -	      sta	playfield+1
   6932  44d3				  -	      lda	temp1
   6933  44d3				  -	      sta	playfield
   6934  44d3					      endif
   6935  44d3				   noshiftdown
      0  44d3					      RETURN
      1  44d3				  -	      ifnconst	bankswitch
      2  44d3				  -	      rts
      3  44d3					      else
      4  44d3		       4c da ff 	      jmp	BS_return
      5  44d6					      endif
   6937  44d6							; Provided under the CC0 license. See the included LICENSE.txt for details.
   6938  44d6
   6939  44d6							;standard routines needed for pretty much all games
   6940  44d6							; just the random number generator is left - maybe we should remove this asm file altogether?
   6941  44d6							; repositioning code and score pointer setup moved to overscan
   6942  44d6							; read switches, joysticks now compiler generated (more efficient)
   6943  44d6
   6944  44d6				   randomize
   6945  44d6		       a5 a2		      lda	rand
   6946  44d8		       4a		      lsr
   6947  44d9				  -	      ifconst	rand16
   6948  44d9				  -	      rol	rand16
   6949  44d9					      endif
   6950  44d9		       90 02		      bcc	noeor
   6951  44db		       49 b4		      eor	#$B4
   6952  44dd				   noeor
   6953  44dd		       85 a2		      sta	rand
   6954  44df				  -	      ifconst	rand16
   6955  44df				  -	      eor	rand16
   6956  44df					      endif
      0  44df					      RETURN
      1  44df				  -	      ifnconst	bankswitch
      2  44df				  -	      rts
      3  44df					      else
      4  44df		       4c da ff 	      jmp	BS_return
      5  44e2					      endif
   6958  44e2							; Provided under the CC0 license. See the included LICENSE.txt for details.
   6959  44e2
   6960  44e2				   drawscreen
   6961  44e2				  -	      ifconst	debugscore
   6962  44e2				  -	      ldx	#14
   6963  44e2				  -	      lda	INTIM	; display # cycles left in the score
   6964  44e2				  -
   6965  44e2				  -	      ifconst	mincycles
   6966  44e2				  -	      lda	mincycles
   6967  44e2				  -	      cmp	INTIM
   6968  44e2				  -	      lda	mincycles
   6969  44e2				  -	      bcc	nochange
   6970  44e2				  -	      lda	INTIM
   6971  44e2				  -	      sta	mincycles
   6972  44e2				  -nochange
   6973  44e2				  -	      endif
   6974  44e2				  -
   6975  44e2				  -			; cmp #$2B
   6976  44e2				  -			; bcs no_cycles_left
   6977  44e2				  -	      bmi	cycles_left
   6978  44e2				  -	      ldx	#64
   6979  44e2				  -	      eor	#$ff	;make negative
   6980  44e2				  -cycles_left
   6981  44e2				  -	      stx	scorecolor
   6982  44e2				  -	      and	#$7f	; clear sign bit
   6983  44e2				  -	      tax
   6984  44e2				  -	      lda	scorebcd,x
   6985  44e2				  -	      sta	score+2
   6986  44e2				  -	      lda	scorebcd1,x
   6987  44e2				  -	      sta	score+1
   6988  44e2				  -	      jmp	done_debugscore
   6989  44e2				  -scorebcd
   6990  44e2				  -	      .byte	$00, $64, $28, $92, $56, $20, $84, $48, $12, $76, $40
   6991  44e2				  -	      .byte	$04, $68, $32, $96, $60, $24, $88, $52, $16, $80, $44
   6992  44e2				  -	      .byte	$08, $72, $36, $00, $64, $28, $92, $56, $20, $84, $48
   6993  44e2				  -	      .byte	$12, $76, $40, $04, $68, $32, $96, $60, $24, $88
   6994  44e2				  -scorebcd1
   6995  44e2				  -	      .byte	0, 0, 1, 1, 2, 3, 3, 4, 5, 5, 6
   6996  44e2				  -	      .byte	7, 7, 8, 8, 9, $10, $10, $11, $12, $12, $13
   6997  44e2				  -	      .byte	$14, $14, $15, $16, $16, $17, $17, $18, $19, $19, $20
   6998  44e2				  -	      .byte	$21, $21, $22, $23, $23, $24, $24, $25, $26, $26
   6999  44e2				  -done_debugscore
   7000  44e2					      endif
   7001  44e2
   7002  44e2				  -	      ifconst	debugcycles
   7003  44e2				  -	      lda	INTIM	; if we go over, it mucks up the background color
   7004  44e2				  -			; cmp #$2B
   7005  44e2				  -			; BCC overscan
   7006  44e2				  -	      bmi	overscan
   7007  44e2				  -	      sta	COLUBK
   7008  44e2				  -	      bcs	doneoverscan
   7009  44e2					      endif
   7010  44e2
   7011  44e2				   overscan
   7012  44e2				  -	      ifconst	interlaced
   7013  44e2				  -	      PHP
   7014  44e2				  -	      PLA
   7015  44e2				  -	      EOR	#4	; flip interrupt bit
   7016  44e2				  -	      PHA
   7017  44e2				  -	      PLP
   7018  44e2				  -	      AND	#4	; isolate the interrupt bit
   7019  44e2				  -	      TAX		; save it for later
   7020  44e2					      endif
   7021  44e2
   7022  44e2				   overscanloop
   7023  44e2		       ad 84 02 	      lda	INTIM	;wait for sync
   7024  44e5		       30 fb		      bmi	overscanloop
   7025  44e7				   doneoverscan
   7026  44e7
   7027  44e7							;do VSYNC
   7028  44e7
   7029  44e7				  -	      ifconst	interlaced
   7030  44e7				  -	      CPX	#4
   7031  44e7				  -	      BNE	oddframevsync
   7032  44e7					      endif
   7033  44e7
   7034  44e7		       a9 02		      lda	#2
   7035  44e9		       85 02		      sta	WSYNC
   7036  44eb		       85 00		      sta	VSYNC
   7037  44ed		       85 02		      STA	WSYNC
   7038  44ef		       85 02		      STA	WSYNC
   7039  44f1		       4a		      lsr
   7040  44f2		       85 02		      STA	WSYNC
   7041  44f4		       85 00		      STA	VSYNC
   7042  44f6		       85 01		      sta	VBLANK
   7043  44f8					      ifnconst	overscan_time
   7044  44f8		       a9 a5		      lda	#37+128
   7045  44fa				  -	      else
   7046  44fa				  -	      lda	#overscan_time+128
   7047  44fa					      endif
   7048  44fa		       8d 96 02 	      sta	TIM64T
   7049  44fd
   7050  44fd				  -	      ifconst	interlaced
   7051  44fd				  -	      jmp	postsync
   7052  44fd				  -
   7053  44fd				  -oddframevsync
   7054  44fd				  -	      sta	WSYNC
   7055  44fd				  -
   7056  44fd				  -	      LDA	($80,X)	; 11 waste
   7057  44fd				  -	      LDA	($80,X)	; 11 waste
   7058  44fd				  -	      LDA	($80,X)	; 11 waste
   7059  44fd				  -
   7060  44fd				  -	      lda	#2
   7061  44fd				  -	      sta	VSYNC
   7062  44fd				  -	      sta	WSYNC
   7063  44fd				  -	      sta	WSYNC
   7064  44fd				  -	      sta	WSYNC
   7065  44fd				  -
   7066  44fd				  -	      LDA	($80,X)	; 11 waste
   7067  44fd				  -	      LDA	($80,X)	; 11 waste
   7068  44fd				  -	      LDA	($80,X)	; 11 waste
   7069  44fd				  -
   7070  44fd				  -	      lda	#0
   7071  44fd				  -	      sta	VSYNC
   7072  44fd				  -	      sta	VBLANK
   7073  44fd				  -	      ifnconst	overscan_time
   7074  44fd				  -	      lda	#37+128
   7075  44fd				  -	      else
   7076  44fd				  -	      lda	#overscan_time+128
   7077  44fd				  -	      endif
   7078  44fd				  -	      sta	TIM64T
   7079  44fd				  -
   7080  44fd				  -postsync
   7081  44fd					      endif
   7082  44fd
   7083  44fd				  -	      ifconst	legacy
   7084  44fd				  -	      if	legacy < 100
   7085  44fd				  -	      ldx	#4
   7086  44fd				  -adjustloop
   7087  44fd				  -	      lda	player0x,x
   7088  44fd				  -	      sec
   7089  44fd				  -	      sbc	#14	;?
   7090  44fd				  -	      sta	player0x,x
   7091  44fd				  -	      dex
   7092  44fd				  -	      bpl	adjustloop
   7093  44fd				  -	      endif
   7094  44fd					      endif
   7095  44fd				  -	      if	((<*)>$e9)&&((<*)<$fa)
   7096  44fd				  -	      repeat	($fa-(<*))
   7097  44fd				  -	      nop
   7098  44fd				  -	      repend
   7099  44fd					      endif
   7100  44fd		       85 02		      sta	WSYNC
   7101  44ff		       a2 04		      ldx	#4
      0  4501					      SLEEP	3
      1  4501				   .CYCLES    SET	3
      2  4501
      3  4501				  -	      IF	.CYCLES < 2
      4  4501				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  4501				  -	      ERR
      6  4501					      ENDIF
      7  4501
      8  4501					      IF	.CYCLES & 1
      9  4501					      IFNCONST	NO_ILLEGAL_OPCODES
     10  4501		       04 00		      nop	0
     11  4503				  -	      ELSE
     12  4503				  -	      bit	VSYNC
     13  4503					      ENDIF
     14  4503				   .CYCLES    SET	.CYCLES - 3
     15  4503					      ENDIF
     16  4503
     17  4503				  -	      REPEAT	.CYCLES / 2
     18  4503				  -	      nop
     19  4503					      REPEND
   7103  4503				   HorPosLoop		; 5
   7104  4503		       b5 80		      lda	player0x,X	;+4 9
   7105  4505		       38		      sec		;+2 11
   7106  4506				   DivideLoop
   7107  4506		       e9 0f		      sbc	#15
   7108  4508		       b0 fc		      bcs	DivideLoop	;+4 15
   7109  450a		       95 9c		      sta	temp1,X	;+4 19
   7110  450c		       95 10		      sta	RESP0,X	;+4 23
   7111  450e		       85 02		      sta	WSYNC
   7112  4510		       ca		      dex
   7113  4511		       10 f0		      bpl	HorPosLoop	;+5 5
   7114  4513							; 4
   7115  4513
   7116  4513		       a2 04		      ldx	#4
   7117  4515		       b4 9c		      ldy	temp1,X
   7118  4517		       b9 73 f4 	      lda	repostable-256,Y
   7119  451a		       95 20		      sta	HMP0,X	;+14 18
   7120  451c
   7121  451c		       ca		      dex
   7122  451d		       b4 9c		      ldy	temp1,X
   7123  451f		       b9 73 f4 	      lda	repostable-256,Y
   7124  4522		       95 20		      sta	HMP0,X	;+14 32
   7125  4524
   7126  4524		       ca		      dex
   7127  4525		       b4 9c		      ldy	temp1,X
   7128  4527		       b9 73 f4 	      lda	repostable-256,Y
   7129  452a		       95 20		      sta	HMP0,X	;+14 46
   7130  452c
   7131  452c		       ca		      dex
   7132  452d		       b4 9c		      ldy	temp1,X
   7133  452f		       b9 73 f4 	      lda	repostable-256,Y
   7134  4532		       95 20		      sta	HMP0,X	;+14 60
   7135  4534
   7136  4534		       ca		      dex
   7137  4535		       b4 9c		      ldy	temp1,X
   7138  4537		       b9 73 f4 	      lda	repostable-256,Y
   7139  453a		       95 20		      sta	HMP0,X	;+14 74
   7140  453c
   7141  453c		       85 02		      sta	WSYNC
   7142  453e
   7143  453e		       85 2a		      sta	HMOVE	;+3 3
   7144  4540
   7145  4540
   7146  4540				  -	      ifconst	legacy
   7147  4540				  -	      if	legacy < 100
   7148  4540				  -	      ldx	#4
   7149  4540				  -adjustloop2
   7150  4540				  -	      lda	player0x,x
   7151  4540				  -	      clc
   7152  4540				  -	      adc	#14	;?
   7153  4540				  -	      sta	player0x,x
   7154  4540				  -	      dex
   7155  4540				  -	      bpl	adjustloop2
   7156  4540				  -	      endif
   7157  4540					      endif
   7158  4540
   7159  4540
   7160  4540
   7161  4540
   7162  4540							;set score pointers
   7163  4540		       a7 95		      lax	score+2
   7164  4542		       20 73 f5 	      jsr	scorepointerset
   7165  4545		       84 9b		      sty	scorepointers+5
   7166  4547		       86 98		      stx	scorepointers+2
   7167  4549		       a7 94		      lax	score+1
   7168  454b		       20 73 f5 	      jsr	scorepointerset
   7169  454e		       84 9a		      sty	scorepointers+4
   7170  4550		       86 97		      stx	scorepointers+1
   7171  4552		       a7 93		      lax	score
   7172  4554		       20 73 f5 	      jsr	scorepointerset
   7173  4557		       84 99		      sty	scorepointers+3
   7174  4559		       86 96		      stx	scorepointers
   7175  455b
   7176  455b				   vblk
   7177  455b							; run possible vblank bB code
   7178  455b				  -	      ifconst	vblank_bB_code
   7179  455b				  -	      jsr	vblank_bB_code
   7180  455b					      endif
   7181  455b				   vblk2
   7182  455b		       ad 84 02 	      LDA	INTIM
   7183  455e		       30 fb		      bmi	vblk2
   7184  4560		       4c 00 f1 	      jmp	kernel
   7185  4563
   7186  4563
   7187  4563		       80 70 60 50*	      .byte.b	$80,$70,$60,$50,$40,$30,$20,$10,$00
   7188  456c		       f0 e0 d0 c0*	      .byte.b	$F0,$E0,$D0,$C0,$B0,$A0,$90
   7189  4573				   repostable
   7190  4573
   7191  4573				   scorepointerset
   7192  4573		       29 0f		      and	#$0F
   7193  4575		       0a		      asl
   7194  4576		       0a		      asl
   7195  4577		       0a		      asl
   7196  4578		       69 71		      adc	#<scoretable
   7197  457a		       a8		      tay
   7198  457b		       8a		      txa
   7199  457c							; and #$F0
   7200  457c							; lsr
   7201  457c		       4b f0		      asr	#$F0
   7202  457e		       69 71		      adc	#<scoretable
   7203  4580		       aa		      tax
   7204  4581		       60		      rts
   7205  4582							;bB.asm
   7206  4582							; bB.asm file is split here
   7207  4582				   .
   7208  4582							; 
   7209  4582
   7210  4582				   .L0582		;  asm
   7211  4582
------- FILE text12/text12a.asm LEVEL 2 PASS 3
      0  4582					      include	"text12/text12a.asm"
      1  4582				  -	      ifconst	SpriteGfxIndex
      2  4582				  -TextDataPtr =	SpriteGfxIndex
      3  4582					      else
      4  4582		       00 f6	   TextDataPtr =	stack1
      5  4582					      endif
      6  4582		       00 f5	   TextColor  =	statusbarlength
      7  4582		       00 01	   noscore    =	1
      8  4582					      ifconst	fontstyle
      9  4582				  -	      ifconst	SQUISH
     10  4582				  -	      if	fontstyle == SQUISH
     11  4582				  -scorecount =	4
     12  4582				  -	      endif
     13  4582					      endif
     14  4582					      endif
     15  4582
     16  4582				  -	      ifnconst	scorecount
     17  4582				  -scorecount =	7
     18  4582					      endif
     19  4582
     20  4582				  -	      ifnconst	textbkcolor
     21  4582				  -textbkcolor =	0
     22  4582					      endif
     23  4582
     24  4582
     25  4582
     26  4582				   minikernel
     27  4582
     28  4582		       85 02		      sta	WSYNC	; 3	 (0)
     29  4584					      ifconst	scorebkcolor
     30  4584					      ifnconst	noscoretxt
     31  4584		       a9 08		      lda	#scorebkcolor
     32  4586		       85 09		      sta	COLUBK
     33  4588					      endif
     34  4588					      endif
     35  4588		       a2 00		      ldx	#0	; 2	 (2)
     36  458a		       86 1b		      stx	GRP0	; 3	 (5)
     37  458c		       86 1c		      stx	GRP1	; 3	 (8)
     38  458e		       a0 d0		      ldy	#$D0	; 2	 (10)
     39  4590		       84 20		      sty	HMP0	; 3	 (13)
     40  4592		       a5 97		      lda	scorepointers+1
     41  4594		       85 9c		      sta	temp1
     42  4596		       a5 99		      lda	scorepointers+3
     43  4598		       85 9e		      sta	temp3
     44  459a		       a5 9b		      lda	scorepointers+5
     45  459c		       85 a0		      sta	temp5
     46  459e		       ba		      tsx
     47  459f		       86 ee		      stx	temp7
     48  45a1		       a0 01		      ldy	#1
     49  45a3		       84 25		      sty	VDELP0
     50  45a5		       84 26		      sty	VDELP1
     51  45a7		       a5 a3		      lda	scorecolor
     52  45a9
     53  45a9		       85 02		      sta	WSYNC	; 3	 (0)
     54  45ab					      ifnconst	noscoretxt
      0  45ab					      sleep	3	; 3	 (3)
      1  45ab				   .CYCLES    SET	3
      2  45ab
      3  45ab				  -	      IF	.CYCLES < 2
      4  45ab				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  45ab				  -	      ERR
      6  45ab					      ENDIF
      7  45ab
      8  45ab					      IF	.CYCLES & 1
      9  45ab					      IFNCONST	NO_ILLEGAL_OPCODES
     10  45ab		       04 00		      nop	0
     11  45ad				  -	      ELSE
     12  45ad				  -	      bit	VSYNC
     13  45ad					      ENDIF
     14  45ad				   .CYCLES    SET	.CYCLES - 3
     15  45ad					      ENDIF
     16  45ad
     17  45ad				  -	      REPEAT	.CYCLES / 2
     18  45ad				  -	      nop
     19  45ad					      REPEND
     56  45ad					      endif
     57  45ad		       85 06		      sta	COLUP0	; 3	 (6)
     58  45af		       85 07		      sta	COLUP1	; 3	 (9)
     59  45b1				  -	      ifconst	scorefade
     60  45b1				  -	      STA	stack2	; 3	 (12)
     61  45b1				  -	      sleep	3	; 3	 (15)
     62  45b1					      else
     63  45b1					      ifconst	pfscore
     64  45b1		       a5 f4		      lda	pfscorecolor	; 3	 (12)
     65  45b3		       85 08		      sta	COLUPF	; 3	 (15)
     66  45b5				  -	      else
     67  45b5				  -	      sleep	6
     68  45b5					      endif
     69  45b5					      endif
     70  45b5		       a9 03		      lda	#3	; 2	 (17)
     71  45b7		       85 04		      sta	NUSIZ0	; 3	 (20)
     72  45b9		       85 05		      sta	NUSIZ1	; 3	 (23*)
     73  45bb
     74  45bb		       a9 ff		      lda	#>scoretable	; 2	 (25)
     75  45bd		       85 97		      sta	scorepointers+1	; 3	 (28)
     76  45bf		       85 99		      sta	scorepointers+3	; 3	 (31)
     77  45c1		       85 9b		      sta	scorepointers+5	; 3	 (34)
     78  45c3		       85 9d		      sta	temp2	; 3	 (37)
     79  45c5		       85 9f		      sta	temp4	; 3	 (40)
     80  45c7		       85 10		      sta	RESP0	; 3	 (43)
     81  45c9		       85 11		      sta	RESP1	; 3	 (46)
     82  45cb		       85 a1		      sta	temp6	; 3	 (49)
     83  45cd		       a0 e0		      ldy	#$E0	; 2	 (51)
     84  45cf		       84 21		      sty	HMP1	; 3	 (54)
     85  45d1		       a0 07		      ldy	#scorecount	; 2	 (56)
     86  45d3		       b1 96		      lda	(scorepointers),y	; 5	 (61)
     87  45d5		       85 1b		      sta	GRP0	; 3	 (64)
     88  45d7					      ifconst	pfscore
     89  45d7		       a5 f2		      lda	pfscore1	; 3	 (67)
     90  45d9		       85 0e		      sta	PF1	; 3	 (70)
     91  45db				  -	      else
     92  45db				  -	      sleep	6	; 6	 (70)
     93  45db					      endif
     94  45db		       85 2a		      sta	HMOVE	; 3	 (73)
     95  45dd				   posthmove
     96  45dd					      ifnconst	noscoretxt
     97  45dd		       4c 09 f6 	      jmp	begintextscore	; 3	(76/0)
     98  45e0
     99  45e0
    100  45e0					      if	>. != >[.+score_loop_height]
    101  4600		       00 00 00 00*	      align	256
    102  4600					      endif
    103  4600
    104  4600				   textscoreloop
    105  4600		       b1 96		      lda	(scorepointers),y	; 5	 (66)
    106  4602		       85 1b		      sta	GRP0	; 3	 (69)
    107  4604					      ifconst	pfscore
    108  4604		       ad f2 00 	      lda.w	pfscore1	; 4	 (73)
    109  4607		       85 0e		      sta	PF1	; 3	 (76/0)
    110  4609				  -	      else
    111  4609				  -	      ifconst	scorefade
    112  4609				  -	      sleep	2	; 2	 (71)
    113  4609				  -	      dec	stack2	; 5	 (76/0)
    114  4609				  -	      else
    115  4609				  -	      sleep	7	; 7	 (76/0)
    116  4609				  -	      endif
    117  4609					      endif
    118  4609							; cycle 0
    119  4609				   begintextscore
    120  4609		       b1 9e		      lda	(scorepointers+$8),y	; 5	 (5)
    121  460b		       85 1c		      sta	GRP1	; 3	 (8)
    122  460d		       b1 9c		      lda	(scorepointers+$6),y	; 5	 (13)
    123  460f		       85 1b		      sta	GRP0	; 3	 (16)
    124  4611		       b3 98		      lax	(scorepointers+$2),y	; 5	 (21)
    125  4613		       9a		      txs		; 2	 (23*)
    126  4614		       b3 9a		      lax	(scorepointers+$4),y	; 5	 (28)
    127  4616				  -	      ifconst	scorefade
    128  4616				  -	      lda	stack2	; 3	 (31)
    129  4616					      else
      0  4616					      sleep	3	; 3	 (31)
      1  4616				   .CYCLES    SET	3
      2  4616
      3  4616				  -	      IF	.CYCLES < 2
      4  4616				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  4616				  -	      ERR
      6  4616					      ENDIF
      7  4616
      8  4616					      IF	.CYCLES & 1
      9  4616					      IFNCONST	NO_ILLEGAL_OPCODES
     10  4616		       04 00		      nop	0
     11  4618				  -	      ELSE
     12  4618				  -	      bit	VSYNC
     13  4618					      ENDIF
     14  4618				   .CYCLES    SET	.CYCLES - 3
     15  4618					      ENDIF
     16  4618
     17  4618				  -	      REPEAT	.CYCLES / 2
     18  4618				  -	      nop
     19  4618					      REPEND
    131  4618					      endif
    132  4618
    133  4618					      ifconst	pfscore
    134  4618		       a5 f3		      lda	pfscore2	; 3	 (34)
    135  461a		       85 0e		      sta	PF1	; 3	 (37)
    136  461c				  -	      else
    137  461c				  -	      ifconst	scorefade
    138  461c				  -	      sta	COLUP0	; 3	 (34)
    139  461c				  -	      sta	COLUP1	; 3	 (37)
    140  461c				  -	      else
    141  461c				  -	      sleep	6	; 6	 (37)
    142  461c				  -	      endif
    143  461c					      endif
    144  461c
    145  461c		       b1 a0		      lda	(scorepointers+$A),y	; 5	 (42)
    146  461e		       86 1c		      stx	GRP1	; 3	 (45)
    147  4620		       ba		      tsx		; 2	 (47)
    148  4621		       86 1b		      stx	GRP0	; 3	 (50)
    149  4623		       85 1c		      sta	GRP1	; 3	 (53)
    150  4625		       84 1b		      sty	GRP0	; 3	 (56)
    151  4627		       88		      dey		; 2	 (58)
    152  4628		       10 d6		      bpl	textscoreloop	; 3	 (61)
    153  462a					      endif
    154  462a
    155  462a		       00 2a	   score_loop_height =	* - textscoreloop
    156  462a
    157  462a		       a6 ee		      ldx	temp7	; 63
    158  462c		       9a		      txs		; 65
    159  462d		       a0 00		      ldy	#0	; 2	 (67)
    160  462f		       84 0e		      sty	PF1	; 3	 (70)
    161  4631		       84 1b		      sty	GRP0	; 3	 (73)
    162  4633		       84 1c		      sty	GRP1	; 3	 (76/0)
    163  4635		       84 1b		      sty	GRP0	; 3	 (3)
    164  4637		       a9 08		      lda	#textbkcolor
    165  4639		       85 09		      sta	COLUBK	; 3	 (6)
    166  463b
    167  463b				  -	      ifconst	extendedtxt
    168  463b				  -	      sty	stack2	; 3	 (9)
    169  463b				  -	      sty	temp7	; 3	 (12)
    170  463b				  -	      lax	TextIndex	; 3	 (15)
    171  463b				  -	      asl		; 2	 (17)
    172  463b				  -	      rol	stack2	; 5	 (22)
    173  463b				  -	      asl		; 2	 (24*)
    174  463b				  -	      rol	stack2	; 5	 (29)
    175  463b				  -	      asl		; 2	 (31)
    176  463b				  -	      rol	stack2	; 5	 (36)
    177  463b				  -	      sta	stack1	; 3	 (39)
    178  463b				  -	      txa		; 2	 (41)
    179  463b				  -	      asl		; 2	 (43)
    180  463b				  -	      rol	temp7	; 5	 (48)
    181  463b				  -	      asl		; 2	 (50)
    182  463b				  -	      rol	temp7	; 5	 (55)
    183  463b				  -	      clc		; 2	 (57)
    184  463b				  -	      adc	stack1	; 3	 (60)
    185  463b				  -	      sta	temp1	; 3	 (63)
    186  463b				  -	      lda	stack2	; 3	 (66)
    187  463b				  -	      adc	temp7	; 3	 (69) ; use existing carry from last operation
    188  463b					      endif
    189  463b
    190  463b				  -	      ifconst	extendedtxt
    191  463b				  -	      adc	#>text_strings	; carry already clear
    192  463b					      else
    193  463b		       a9 fb		      lda	#>text_strings
    194  463d					      endif
    195  463d		       85 f7		      sta	TextDataPtr+1
    196  463f		       a9 02		      lda	#<text_strings
    197  4641		       85 f6		      sta	TextDataPtr
    198  4643
    199  4643				  -	      ifconst	textbank
    200  4643				  -	      sta	temp7
    201  4643				  -	      lda	#>(textkernel-1)
    202  4643				  -	      pha
    203  4643				  -	      lda	#<(textkernel-1)
    204  4643				  -	      pha
    205  4643				  -	      lda	temp7
    206  4643				  -	      pha		; *** save A
    207  4643				  -	      txa
    208  4643				  -	      pha		; *** save X
    209  4643				  -	      ldx	#textbank
    210  4643				  -	      jmp	BS_jsr
    211  4643					      else
    212  4643		       4c 47 f6 	      jmp	textkernel
    213  4646					      endif
    214  4646
    215  4646				   posttextkernel
    216  4646
    217  4646		       60		      rts
------- FILE d:\Firmaplus\Firmaplus_intern\Atari\PlusROM\Projekte-batariBasic\CaveApocalypse\C.A.V.E. Apocalypse.bas.asm
   7213  4647
------- FILE text12/text12b.asm LEVEL 2 PASS 3
      0  4647					      include	"text12/text12b.asm"
      1  4647					      ifconst	bs_mask
      2  4647				  -	      ifconst	FASTFETCH	; using DPC+
      3  4647				  -KERNELBANK =	1
      4  4647					      else
      5  4647		       00 04	   KERNELBANK =	(bs_mask + 1)
      6  4647					      endif
      7  4647					      endif
      8  4647
      9  4647
     10  4647				   textkernel
     11  4647		       a5 f5		      lda	TextColor
     12  4649		       85 06		      sta	COLUP0
     13  464b		       85 07		      sta	COLUP1
     14  464d		       a9 0b		      lda	#11
     15  464f		       aa		      tax
     16  4650		       18		      clc
     17  4651				  -	      ifconst	extendedtxt
     18  4651				  -	      adc	temp1
     19  4651					      else
     20  4651		       65 b0		      adc	TextIndex
     21  4653					      endif
     22  4653		       a8		      tay
     23  4654				   TextPointersLoop
     24  4654		       b1 f6		      lda	(TextDataPtr),y
     25  4656		       95 96		      sta	scorepointers,x
     26  4658		       88		      dey
     27  4659		       ca		      dex
     28  465a		       10 f8		      bpl	TextPointersLoop
     29  465c
     30  465c		       a6 96		      ldx	scorepointers+0
     31  465e		       bd 00 f9 	      lda	left_text,x
     32  4661		       a6 97		      ldx	scorepointers+1
     33  4663		       1d 00 fa 	      ora	right_text,x
     34  4666		       a0 00		      ldy	#0
     35  4668
     36  4668				   firstbreak
     37  4668							; Text line 1 / 5
     38  4668
     39  4668							;line 1
     40  4668		       85 02		      sta	WSYNC	; 3	 (0)
     41  466a		       a0 08		      ldy	#textbkcolor	; 2	 (2)
     42  466c		       84 06		      sty	COLUP0	; 3	 (5)
     43  466e		       84 07		      sty	COLUP1	; 3	 (8)
     44  4670		       85 1b		      sta	GRP0	; 3	 (11)
     45  4672
     46  4672		       a6 98		      ldx	scorepointers+2	; 3	 (14)
     47  4674		       bd 00 f9 	      lda	left_text,x	; 4	 (18)
     48  4677		       a6 99		      ldx	scorepointers+3	; 3	 (21)
     49  4679		       1d 00 fa 	      ora	right_text,x	; 4	 (25*)
     50  467c		       85 1c		      sta	GRP1	; 3	 (28)
     51  467e
     52  467e		       a6 9a		      ldx	scorepointers+4	; 3	 (31)
     53  4680		       bd 00 f9 	      lda	left_text,x	; 4	 (35)
     54  4683		       a6 9b		      ldx	scorepointers+5	; 3	 (38)
     55  4685		       1d 00 fa 	      ora	right_text,x	; 4	 (42)
     56  4688		       85 1b		      sta	GRP0	; 3	 (45)
     57  468a
     58  468a		       a6 9c		      ldx	scorepointers+6	; 3	 (48) 3 in A
     59  468c		       bd 00 f9 	      lda	left_text,x	; 4	 (52)
     60  468f		       a6 9d		      ldx	scorepointers+7	; 3	 (55)
     61  4691		       1d 00 fa 	      ora	right_text,x	; 4	 (59)
     62  4694
     63  4694		       a4 f5		      ldy	TextColor	; 3	 (62)
     64  4696		       84 07		      sty	COLUP1	; 3	 (65)
     65  4698
     66  4698							;line 2
     67  4698		       85 02		      sta	WSYNC	; 3	 (0)
     68  469a		       84 06		      sty	COLUP0	; 3	 (3)
     69  469c		       a8		      tay		; 2	 (5) 3 in Y
     70  469d
     71  469d		       a6 9e		      ldx	scorepointers+8	; 3	 (8) 4
     72  469f		       bd 00 f9 	      lda	left_text,x	; 4	 (12)
     73  46a2		       a6 9f		      ldx	scorepointers+9	; 3	 (15)
     74  46a4		       1d 00 fa 	      ora	right_text,x	; 4	 (19)
     75  46a7		       85 f6		      sta	stack1	; 3	 (22)
     76  46a9
     77  46a9		       a6 a0		      ldx	scorepointers+10	; 3	 (25*) 5 in A
     78  46ab		       bd 00 f9 	      lda	left_text,x	; 4	 (29)
     79  46ae		       a6 a1		      ldx	scorepointers+11	; 3	 (32)
     80  46b0		       1d 00 fa 	      ora	right_text,x	; 4	 (36)
     81  46b3
     82  46b3		       a6 f6		      ldx	stack1	; 3	 (39) 4 in X
     83  46b5					      ifnconst	noscoretxt
      0  46b5					      sleep	5	; 7	 (46)
      1  46b5				   .CYCLES    SET	5
      2  46b5
      3  46b5				  -	      IF	.CYCLES < 2
      4  46b5				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  46b5				  -	      ERR
      6  46b5					      ENDIF
      7  46b5
      8  46b5					      IF	.CYCLES & 1
      9  46b5					      IFNCONST	NO_ILLEGAL_OPCODES
     10  46b5		       04 00		      nop	0
     11  46b7				  -	      ELSE
     12  46b7				  -	      bit	VSYNC
     13  46b7					      ENDIF
     14  46b7				   .CYCLES    SET	.CYCLES - 3
     15  46b7					      ENDIF
     16  46b7
     17  46b7					      REPEAT	.CYCLES / 2
     18  46b7		       ea		      nop
     19  46b8					      REPEND
     85  46b8				  -	      else
     86  46b8				  -	      sleep	2
     87  46b8					      endif
     88  46b8		       84 1c		      sty	GRP1	; 3	 (49) 3 -> [GRP1] ; 2 -> GRP0
     89  46ba		       86 1b		      stx	GRP0	; 3	 (52) 4 -> [GRP0] ; 3 -> GRP1
     90  46bc		       85 1c		      sta	GRP1	; 3	 (55) 5 -> [GRP1] ; 4 -> GRP0
     91  46be		       85 1b		      sta	GRP0	; 3	 (58) 5 -> GRP1
     92  46c0
     93  46c0		       a0 02		      ldy	#2	; 2	 (60)
     94  46c2		       a6 96		      ldx	scorepointers+0	; 3	 (63)
     95  46c4		       bd 01 f9 	      lda	left_text+1,x	; 4	 (67)
     96  46c7		       a6 97		      ldx	scorepointers+1	; 3	 (70)
     97  46c9		       1d 01 fa 	      ora	right_text+1,x	; 4	 (74)
     98  46cc							;    sleep 4
     99  46cc
    100  46cc							; Text line 2 / 5
    101  46cc				   endl1
    102  46cc							;line 1
    103  46cc		       85 02		      sta	WSYNC	; 3	 (0)
    104  46ce		       a0 08		      ldy	#textbkcolor	; 2	 (2)
    105  46d0		       84 06		      sty	COLUP0	; 3	 (5)
    106  46d2		       84 07		      sty	COLUP1	; 3	 (8)
    107  46d4		       85 1b		      sta	GRP0	; 3	 (11)
    108  46d6
    109  46d6		       a6 98		      ldx	scorepointers+2	; 3	 (9)
    110  46d8		       bd 01 f9 	      lda	left_text+1,x	; 4	 (13)
    111  46db		       a6 99		      ldx	scorepointers+3	; 3	 (16)
    112  46dd		       1d 01 fa 	      ora	right_text+1,x	; 4	 (20)
    113  46e0		       85 1c		      sta	GRP1	; 3	 (23*)
    114  46e2
    115  46e2		       a6 9a		      ldx	scorepointers+4	; 3	 (26)
    116  46e4		       bd 01 f9 	      lda	left_text+1,x	; 4	 (30)
    117  46e7		       a6 9b		      ldx	scorepointers+5	; 3	 (33)
    118  46e9		       1d 01 fa 	      ora	right_text+1,x	; 4	 (37)
    119  46ec		       85 1b		      sta	GRP0	; 3	 (40)
    120  46ee
    121  46ee		       a6 9c		      ldx	scorepointers+6	; 3	 (43) 3 in A
    122  46f0		       bd 01 f9 	      lda	left_text+1,x	; 4	 (47)
    123  46f3		       a6 9d		      ldx	scorepointers+7	; 3	 (50)
    124  46f5		       1d 01 fa 	      ora	right_text+1,x	; 4	 (54)
    125  46f8
    126  46f8		       a4 f5		      ldy	TextColor	; 2	 (56)
    127  46fa		       84 07		      sty	COLUP1	; 3	 (59)
    128  46fc
    129  46fc							;line 2
    130  46fc		       85 02		      sta	WSYNC	; 3	 (0)
    131  46fe		       84 06		      sty	COLUP0	; 3	 (3)
    132  4700		       a8		      tay		; 2	 (5) 3 in Y
    133  4701
    134  4701		       a6 9e		      ldx	scorepointers+8	; 3	 (8) 4
    135  4703		       bd 01 f9 	      lda	left_text+1,x	; 4	 (12)
    136  4706		       a6 9f		      ldx	scorepointers+9	; 3	 (15)
    137  4708		       1d 01 fa 	      ora	right_text+1,x	; 4	 (19)
    138  470b		       85 f6		      sta	stack1	; 3	 (22)
    139  470d
    140  470d		       a6 a0		      ldx	scorepointers+10	; 3	 (25*) 5 in A
    141  470f		       bd 01 f9 	      lda	left_text+1,x	; 4	 (29)
    142  4712		       a6 a1		      ldx	scorepointers+11	; 3	 (32)
    143  4714		       1d 01 fa 	      ora	right_text+1,x	; 4	 (36)
    144  4717
    145  4717		       a6 f6		      ldx	stack1	; 3	 (39) 4 in X
    146  4719					      ifnconst	noscoretxt
      0  4719					      sleep	5	; 7	 (46)
      1  4719				   .CYCLES    SET	5
      2  4719
      3  4719				  -	      IF	.CYCLES < 2
      4  4719				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  4719				  -	      ERR
      6  4719					      ENDIF
      7  4719
      8  4719					      IF	.CYCLES & 1
      9  4719					      IFNCONST	NO_ILLEGAL_OPCODES
     10  4719		       04 00		      nop	0
     11  471b				  -	      ELSE
     12  471b				  -	      bit	VSYNC
     13  471b					      ENDIF
     14  471b				   .CYCLES    SET	.CYCLES - 3
     15  471b					      ENDIF
     16  471b
     17  471b					      REPEAT	.CYCLES / 2
     18  471b		       ea		      nop
     19  471c					      REPEND
    148  471c				  -	      else
    149  471c				  -	      sleep	2
    150  471c					      endif
    151  471c		       84 1c		      sty	GRP1	; 3	 (49) 3 -> [GRP1] ; 2 -> GRP0
    152  471e		       86 1b		      stx	GRP0	; 3	 (52) 4 -> [GRP0] ; 3 -> GRP1
    153  4720		       85 1c		      sta	GRP1	; 3	 (55) 5 -> [GRP1] ; 4 -> GRP0
    154  4722		       85 1b		      sta	GRP0	; 3	 (58) 5 -> GRP1
    155  4724
    156  4724		       a0 02		      ldy	#2	; 2	 (56)
    157  4726		       a6 96		      ldx	scorepointers+0	; 3	 (59)
    158  4728		       bd 02 f9 	      lda	left_text+2,x	; 4	 (63)
    159  472b		       a6 97		      ldx	scorepointers+1	; 3	 (66)
    160  472d		       1d 02 fa 	      ora	right_text+2,x	; 4	 (70)
    161  4730							;    sleep 4
    162  4730
    163  4730							; Text line 3 / 5
    164  4730				   endl2
    165  4730							;line 1
    166  4730		       85 02		      sta	WSYNC	; 3	 (0)
    167  4732		       a0 08		      ldy	#textbkcolor	; 2	 (2)
    168  4734		       84 06		      sty	COLUP0	; 3	 (5)
    169  4736		       84 07		      sty	COLUP1	; 3	 (8)
    170  4738		       85 1b		      sta	GRP0	; 3	 (11)
    171  473a
    172  473a		       a6 98		      ldx	scorepointers+2	; 3	 (9)
    173  473c		       bd 02 f9 	      lda	left_text+2,x	; 4	 (13)
    174  473f		       a6 99		      ldx	scorepointers+3	; 3	 (16)
    175  4741		       1d 02 fa 	      ora	right_text+2,x	; 4	 (20)
    176  4744		       85 1c		      sta	GRP1	; 3	 (23*)
    177  4746
    178  4746		       a6 9a		      ldx	scorepointers+4	; 3	 (26)
    179  4748		       bd 02 f9 	      lda	left_text+2,x	; 4	 (30)
    180  474b		       a6 9b		      ldx	scorepointers+5	; 3	 (33)
    181  474d		       1d 02 fa 	      ora	right_text+2,x	; 4	 (37)
    182  4750		       85 1b		      sta	GRP0	; 3	 (40)
    183  4752
    184  4752		       a6 9c		      ldx	scorepointers+6	; 3	 (43) 3 in A
    185  4754		       bd 02 f9 	      lda	left_text+2,x	; 4	 (47)
    186  4757		       a6 9d		      ldx	scorepointers+7	; 3	 (50)
    187  4759		       1d 02 fa 	      ora	right_text+2,x	; 4	 (54)
    188  475c
    189  475c		       a4 f5		      ldy	TextColor	; 2	 (56)
    190  475e		       84 07		      sty	COLUP1	; 3	 (59)
    191  4760
    192  4760							;line 2
    193  4760		       85 02		      sta	WSYNC	; 3	 (0)
    194  4762		       84 06		      sty	COLUP0	; 3	 (3)
    195  4764		       a8		      tay		; 2	 (5) 3 in Y
    196  4765
    197  4765		       a6 9e		      ldx	scorepointers+8	; 3	 (8) 4
    198  4767		       bd 02 f9 	      lda	left_text+2,x	; 4	 (12)
    199  476a		       a6 9f		      ldx	scorepointers+9	; 3	 (15)
    200  476c		       1d 02 fa 	      ora	right_text+2,x	; 4	 (19)
    201  476f		       85 f6		      sta	stack1	; 3	 (22)
    202  4771
    203  4771		       a6 a0		      ldx	scorepointers+10	; 3	 (25*) 5 in A
    204  4773		       bd 02 f9 	      lda	left_text+2,x	; 4	 (29)
    205  4776		       a6 a1		      ldx	scorepointers+11	; 3	 (32)
    206  4778		       1d 02 fa 	      ora	right_text+2,x	; 4	 (36)
    207  477b
    208  477b		       a6 f6		      ldx	stack1	; 3	 (39) 4 in X
    209  477d					      ifnconst	noscoretxt
      0  477d					      sleep	5	; 7	 (46)
      1  477d				   .CYCLES    SET	5
      2  477d
      3  477d				  -	      IF	.CYCLES < 2
      4  477d				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  477d				  -	      ERR
      6  477d					      ENDIF
      7  477d
      8  477d					      IF	.CYCLES & 1
      9  477d					      IFNCONST	NO_ILLEGAL_OPCODES
     10  477d		       04 00		      nop	0
     11  477f				  -	      ELSE
     12  477f				  -	      bit	VSYNC
     13  477f					      ENDIF
     14  477f				   .CYCLES    SET	.CYCLES - 3
     15  477f					      ENDIF
     16  477f
     17  477f					      REPEAT	.CYCLES / 2
     18  477f		       ea		      nop
     19  4780					      REPEND
    211  4780				  -	      else
    212  4780				  -	      sleep	2
    213  4780					      endif
    214  4780		       84 1c		      sty	GRP1	; 3	 (45) 3 -> [GRP1] ; 2 -> GRP0
    215  4782		       86 1b		      stx	GRP0	; 3	 (48) 4 -> [GRP0] ; 3 -> GRP1
    216  4784		       85 1c		      sta	GRP1	; 3	 (51) 5 -> [GRP1] ; 4 -> GRP0
    217  4786		       85 1b		      sta	GRP0	; 3	 (54) 5 -> GRP1
    218  4788
    219  4788		       a0 02		      ldy	#2	; 2	 (56)
    220  478a		       a6 96		      ldx	scorepointers+0	; 3	 (59)
    221  478c		       bd 03 f9 	      lda	left_text+3,x	; 4	 (63)
    222  478f		       a6 97		      ldx	scorepointers+1	; 3	 (66)
    223  4791		       1d 03 fa 	      ora	right_text+3,x	; 4	 (70)
    224  4794							;    sleep 2
    225  4794
    226  4794							; Text line 4 / 5
    227  4794
    228  4794							;line 1
    229  4794		       85 02		      sta	WSYNC	; 3	 (0)
    230  4796		       a0 08		      ldy	#textbkcolor	; 2	 (2)
    231  4798		       84 06		      sty	COLUP0	; 3	 (5)
    232  479a		       84 07		      sty	COLUP1	; 3	 (8)
    233  479c		       85 1b		      sta	GRP0	; 3	 (11)
    234  479e
    235  479e		       a6 98		      ldx	scorepointers+2	; 3	 (9)
    236  47a0		       bd 03 f9 	      lda	left_text+3,x	; 4	 (13)
    237  47a3		       a6 99		      ldx	scorepointers+3	; 3	 (16)
    238  47a5		       1d 03 fa 	      ora	right_text+3,x	; 4	 (20)
    239  47a8		       85 1c		      sta	GRP1	; 3	 (23*)
    240  47aa
    241  47aa		       a6 9a		      ldx	scorepointers+4	; 3	 (26)
    242  47ac		       bd 03 f9 	      lda	left_text+3,x	; 4	 (30)
    243  47af		       a6 9b		      ldx	scorepointers+5	; 3	 (33)
    244  47b1		       1d 03 fa 	      ora	right_text+3,x	; 4	 (37)
    245  47b4		       85 1b		      sta	GRP0	; 3	 (40)
    246  47b6
    247  47b6		       a6 9c		      ldx	scorepointers+6	; 3	 (43) 3 in A
    248  47b8		       bd 03 f9 	      lda	left_text+3,x	; 4	 (47)
    249  47bb		       a6 9d		      ldx	scorepointers+7	; 3	 (50)
    250  47bd		       1d 03 fa 	      ora	right_text+3,x	; 4	 (54)
    251  47c0
    252  47c0		       a4 f5		      ldy	TextColor	; 2	 (56)
    253  47c2		       84 07		      sty	COLUP1	; 3	 (59)
    254  47c4
    255  47c4							;line 2
    256  47c4		       85 02		      sta	WSYNC	; 3	 (0)
    257  47c6		       84 06		      sty	COLUP0	; 3	 (3)
    258  47c8		       a8		      tay		; 2	 (5) 3 in Y
    259  47c9
    260  47c9		       a6 9e		      ldx	scorepointers+8	; 3	 (8) 4
    261  47cb		       bd 03 f9 	      lda	left_text+3,x	; 4	 (12)
    262  47ce		       a6 9f		      ldx	scorepointers+9	; 3	 (15)
    263  47d0		       1d 03 fa 	      ora	right_text+3,x	; 4	 (19)
    264  47d3		       85 f6		      sta	stack1	; 3	 (22)
    265  47d5
    266  47d5		       a6 a0		      ldx	scorepointers+10	; 3	 (25*) 5 in A
    267  47d7		       bd 03 f9 	      lda	left_text+3,x	; 4	 (29)
    268  47da		       a6 a1		      ldx	scorepointers+11	; 3	 (32)
    269  47dc		       1d 03 fa 	      ora	right_text+3,x	; 4	 (36)
    270  47df
    271  47df		       a6 f6		      ldx	stack1	; 3	 (39) 4 in X
    272  47e1					      ifnconst	noscoretxt
      0  47e1					      sleep	5	; 7	 (46)
      1  47e1				   .CYCLES    SET	5
      2  47e1
      3  47e1				  -	      IF	.CYCLES < 2
      4  47e1				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  47e1				  -	      ERR
      6  47e1					      ENDIF
      7  47e1
      8  47e1					      IF	.CYCLES & 1
      9  47e1					      IFNCONST	NO_ILLEGAL_OPCODES
     10  47e1		       04 00		      nop	0
     11  47e3				  -	      ELSE
     12  47e3				  -	      bit	VSYNC
     13  47e3					      ENDIF
     14  47e3				   .CYCLES    SET	.CYCLES - 3
     15  47e3					      ENDIF
     16  47e3
     17  47e3					      REPEAT	.CYCLES / 2
     18  47e3		       ea		      nop
     19  47e4					      REPEND
    274  47e4				  -	      else
    275  47e4				  -	      sleep	2
    276  47e4					      endif
    277  47e4		       84 1c		      sty	GRP1	; 3	 (45) 3 -> [GRP1] ; 2 -> GRP0
    278  47e6		       86 1b		      stx	GRP0	; 3	 (48) 4 -> [GRP0] ; 3 -> GRP1
    279  47e8		       85 1c		      sta	GRP1	; 3	 (51) 5 -> [GRP1] ; 4 -> GRP0
    280  47ea		       85 1b		      sta	GRP0	; 3	 (54) 5 -> GRP1
    281  47ec
    282  47ec		       a0 02		      ldy	#2	; 2	 (56)
    283  47ee		       a6 96		      ldx	scorepointers+0	; 3	 (59)
    284  47f0		       bd 04 f9 	      lda	left_text+4,x	; 4	 (63)
    285  47f3		       a6 97		      ldx	scorepointers+1	; 3	 (66)
    286  47f5		       1d 04 fa 	      ora	right_text+4,x	; 4	 (70)
    287  47f8							;    sleep 2
    288  47f8
    289  47f8							; Text line 5 / 5
    290  47f8
    291  47f8							;line 1
    292  47f8		       85 02		      sta	WSYNC	; 3	 (0)
    293  47fa		       a0 08		      ldy	#textbkcolor	; 2	 (2)
    294  47fc		       84 06		      sty	COLUP0	; 3	 (5)
    295  47fe		       84 07		      sty	COLUP1	; 3	 (8)
    296  4800		       85 1b		      sta	GRP0	; 3	 (11)
    297  4802
    298  4802		       a6 98		      ldx	scorepointers+2	; 3	 (9)
    299  4804		       bd 04 f9 	      lda	left_text+4,x	; 4	 (13)
    300  4807		       a6 99		      ldx	scorepointers+3	; 3	 (16)
    301  4809		       1d 04 fa 	      ora	right_text+4,x	; 4	 (20)
    302  480c		       85 1c		      sta	GRP1	; 3	 (23*)
    303  480e
    304  480e		       a6 9a		      ldx	scorepointers+4	; 3	 (26)
    305  4810		       bd 04 f9 	      lda	left_text+4,x	; 4	 (30)
    306  4813		       a6 9b		      ldx	scorepointers+5	; 3	 (33)
    307  4815		       1d 04 fa 	      ora	right_text+4,x	; 4	 (37)
    308  4818		       85 1b		      sta	GRP0	; 3	 (40)
    309  481a
    310  481a		       a6 9c		      ldx	scorepointers+6	; 3	 (43) 3 in A
    311  481c		       bd 04 f9 	      lda	left_text+4,x	; 4	 (47)
    312  481f		       a6 9d		      ldx	scorepointers+7	; 3	 (50)
    313  4821		       1d 04 fa 	      ora	right_text+4,x	; 4	 (54)
    314  4824
    315  4824		       a4 f5		      ldy	TextColor	; 2	 (56)
    316  4826		       84 07		      sty	COLUP1	; 3	 (59)
    317  4828
    318  4828							;line 2
    319  4828		       85 02		      sta	WSYNC	; 3	 (0)
    320  482a		       84 06		      sty	COLUP0	; 3	 (3)
    321  482c		       a8		      tay		; 2	 (5) 3 in Y
    322  482d
    323  482d		       a6 9e		      ldx	scorepointers+8	; 3	 (8) 4
    324  482f		       bd 04 f9 	      lda	left_text+4,x	; 4	 (12)
    325  4832		       a6 9f		      ldx	scorepointers+9	; 3	 (15)
    326  4834		       1d 04 fa 	      ora	right_text+4,x	; 4	 (19)
    327  4837		       85 f6		      sta	stack1	; 3	 (22)
    328  4839
    329  4839		       a6 a0		      ldx	scorepointers+10	; 3	 (25*) 5 in A
    330  483b		       bd 04 f9 	      lda	left_text+4,x	; 4	 (29)
    331  483e		       a6 a1		      ldx	scorepointers+11	; 3	 (32)
    332  4840		       1d 04 fa 	      ora	right_text+4,x	; 4	 (36)
    333  4843
    334  4843		       a6 f6		      ldx	stack1	; 3	 (39) 4 in X
    335  4845					      ifnconst	noscoretxt
      0  4845					      sleep	5	; 7	 (46)
      1  4845				   .CYCLES    SET	5
      2  4845
      3  4845				  -	      IF	.CYCLES < 2
      4  4845				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  4845				  -	      ERR
      6  4845					      ENDIF
      7  4845
      8  4845					      IF	.CYCLES & 1
      9  4845					      IFNCONST	NO_ILLEGAL_OPCODES
     10  4845		       04 00		      nop	0
     11  4847				  -	      ELSE
     12  4847				  -	      bit	VSYNC
     13  4847					      ENDIF
     14  4847				   .CYCLES    SET	.CYCLES - 3
     15  4847					      ENDIF
     16  4847
     17  4847					      REPEAT	.CYCLES / 2
     18  4847		       ea		      nop
     19  4848					      REPEND
    337  4848				  -	      else
    338  4848				  -	      sleep	2
    339  4848					      endif
    340  4848		       84 1c		      sty	GRP1	; 3	 (45) 3 -> [GRP1] ; 2 -> GRP0
    341  484a		       86 1b		      stx	GRP0	; 3	 (48) 4 -> [GRP0] ; 3 -> GRP1
    342  484c		       85 1c		      sta	GRP1	; 3	 (51) 5 -> [GRP1] ; 4 -> GRP0
    343  484e		       85 1b		      sta	GRP0	; 3	 (54) 5 -> GRP1
    344  4850
    345  4850		       a9 00		      lda	#0
    346  4852		       85 1b		      sta	GRP0
    347  4854		       85 1c		      sta	GRP1
    348  4856		       85 1b		      sta	GRP0
    349  4858		       85 04		      sta	NUSIZ0
    350  485a		       85 05		      sta	NUSIZ1
    351  485c		       85 25		      sta	VDELP0
    352  485e		       85 26		      sta	VDELP1
    353  4860
    354  4860				  -	      ifconst	textbank
    355  4860				  -	      sta	temp7
    356  4860				  -	      lda	#>(posttextkernel-1)
    357  4860				  -	      pha
    358  4860				  -	      lda	#<(posttextkernel-1)
    359  4860				  -	      pha
    360  4860				  -	      lda	temp7
    361  4860				  -	      pha		; *** save A
    362  4860				  -	      txa
    363  4860				  -	      pha		; *** save X
    364  4860				  -	      ldx	#KERNELBANK
    365  4860				  -	      jmp	BS_jsr
    366  4860					      else
    367  4860		       4c 46 f6 	      jmp	posttextkernel
    368  4863					      endif
    369  4863
    370  4863					      if	>. != >[.+text_data_height]
    371  4900		       00 00 00 00*	      align	256
    372  4900					      endif
    373  4900
    374  4900				   text_data
    375  4900
    376  4900				   left_text
    377  4900
    378  4900		       00 00	   __A	      =	* - text_data	; baseline (0)
    379  4900		       20		      .byte.b	%00100000
    380  4901		       50		      .byte.b	%01010000
    381  4902		       70		      .byte.b	%01110000
    382  4903		       50		      .byte.b	%01010000
    383  4904		       50		      .byte.b	%01010000
    384  4905
    385  4905		       00 05	   __B	      =	* - text_data
    386  4905		       60		      .byte.b	%01100000
    387  4906		       50		      .byte.b	%01010000
    388  4907		       60		      .byte.b	%01100000
    389  4908		       50		      .byte.b	%01010000
    390  4909		       60		      .byte.b	%01100000
    391  490a
    392  490a		       00 0a	   __C	      =	* - text_data
    393  490a		       30		      .byte.b	%00110000
    394  490b		       40		      .byte.b	%01000000
    395  490c		       40		      .byte.b	%01000000
    396  490d		       40		      .byte.b	%01000000
    397  490e		       30		      .byte.b	%00110000
    398  490f
    399  490f		       00 0f	   __D	      =	* - text_data
    400  490f		       60		      .byte.b	%01100000
    401  4910		       50		      .byte.b	%01010000
    402  4911		       50		      .byte.b	%01010000
    403  4912		       50		      .byte.b	%01010000
    404  4913		       60		      .byte.b	%01100000
    405  4914
    406  4914		       00 14	   __E	      =	* - text_data
    407  4914		       70		      .byte.b	%01110000
    408  4915		       40		      .byte.b	%01000000
    409  4916		       60		      .byte.b	%01100000
    410  4917		       40		      .byte.b	%01000000
    411  4918		       70		      .byte.b	%01110000
    412  4919
    413  4919		       00 19	   __F	      =	* - text_data
    414  4919		       70		      .byte.b	%01110000
    415  491a		       40		      .byte.b	%01000000
    416  491b		       60		      .byte.b	%01100000
    417  491c		       40		      .byte.b	%01000000
    418  491d		       40		      .byte.b	%01000000
    419  491e
    420  491e		       00 1e	   __G	      =	* - text_data
    421  491e		       30		      .byte.b	%00110000
    422  491f		       40		      .byte.b	%01000000
    423  4920		       50		      .byte.b	%01010000
    424  4921		       50		      .byte.b	%01010000
    425  4922		       20		      .byte.b	%00100000
    426  4923
    427  4923		       00 23	   __H	      =	* - text_data
    428  4923		       50		      .byte.b	%01010000
    429  4924		       50		      .byte.b	%01010000
    430  4925		       70		      .byte.b	%01110000
    431  4926		       50		      .byte.b	%01010000
    432  4927		       50		      .byte.b	%01010000
    433  4928
    434  4928		       00 28	   __I	      =	* - text_data
    435  4928		       70		      .byte.b	%01110000
    436  4929		       20		      .byte.b	%00100000
    437  492a		       20		      .byte.b	%00100000
    438  492b		       20		      .byte.b	%00100000
    439  492c		       70		      .byte.b	%01110000
    440  492d
    441  492d		       00 2d	   __J	      =	* - text_data
    442  492d		       10		      .byte.b	%00010000
    443  492e		       10		      .byte.b	%00010000
    444  492f		       10		      .byte.b	%00010000
    445  4930		       50		      .byte.b	%01010000
    446  4931		       20		      .byte.b	%00100000
    447  4932
    448  4932		       00 32	   __K	      =	* - text_data
    449  4932		       50		      .byte.b	%01010000
    450  4933		       50		      .byte.b	%01010000
    451  4934		       60		      .byte.b	%01100000
    452  4935		       50		      .byte.b	%01010000
    453  4936		       50		      .byte.b	%01010000
    454  4937
    455  4937		       00 37	   __L	      =	* - text_data
    456  4937		       40		      .byte.b	%01000000
    457  4938		       40		      .byte.b	%01000000
    458  4939		       40		      .byte.b	%01000000
    459  493a		       40		      .byte.b	%01000000
    460  493b		       70		      .byte.b	%01110000
    461  493c
    462  493c		       00 3c	   __M	      =	* - text_data
    463  493c		       50		      .byte.b	%01010000
    464  493d		       70		      .byte.b	%01110000
    465  493e		       70		      .byte.b	%01110000
    466  493f		       50		      .byte.b	%01010000
    467  4940		       50		      .byte.b	%01010000
    468  4941
    469  4941		       00 41	   __N	      =	* - text_data
    470  4941		       60		      .byte.b	%01100000
    471  4942		       50		      .byte.b	%01010000
    472  4943		       50		      .byte.b	%01010000
    473  4944		       50		      .byte.b	%01010000
    474  4945		       50		      .byte.b	%01010000
    475  4946
    476  4946		       00 46	   __O	      =	* - text_data
    477  4946		       20		      .byte.b	%00100000
    478  4947		       50		      .byte.b	%01010000
    479  4948		       50		      .byte.b	%01010000
    480  4949		       50		      .byte.b	%01010000
    481  494a		       20		      .byte.b	%00100000
    482  494b
    483  494b		       00 4b	   __P	      =	* - text_data
    484  494b		       60		      .byte.b	%01100000
    485  494c		       50		      .byte.b	%01010000
    486  494d		       60		      .byte.b	%01100000
    487  494e		       40		      .byte.b	%01000000
    488  494f		       40		      .byte.b	%01000000
    489  4950
    490  4950		       00 50	   __Q	      =	* - text_data
    491  4950		       20		      .byte.b	%00100000
    492  4951		       50		      .byte.b	%01010000
    493  4952		       50		      .byte.b	%01010000
    494  4953		       50		      .byte.b	%01010000
    495  4954		       30		      .byte.b	%00110000
    496  4955
    497  4955		       00 55	   __R	      =	* - text_data
    498  4955		       60		      .byte.b	%01100000
    499  4956		       50		      .byte.b	%01010000
    500  4957		       60		      .byte.b	%01100000
    501  4958		       50		      .byte.b	%01010000
    502  4959		       50		      .byte.b	%01010000
    503  495a
    504  495a		       00 5a	   __S	      =	* - text_data
    505  495a		       30		      .byte.b	%00110000
    506  495b		       40		      .byte.b	%01000000
    507  495c		       20		      .byte.b	%00100000
    508  495d		       10		      .byte.b	%00010000
    509  495e		       60		      .byte.b	%01100000
    510  495f
    511  495f		       00 5f	   __T	      =	* - text_data
    512  495f		       70		      .byte.b	%01110000
    513  4960		       20		      .byte.b	%00100000
    514  4961		       20		      .byte.b	%00100000
    515  4962		       20		      .byte.b	%00100000
    516  4963		       20		      .byte.b	%00100000
    517  4964
    518  4964		       00 64	   __U	      =	* - text_data
    519  4964		       50		      .byte.b	%01010000
    520  4965		       50		      .byte.b	%01010000
    521  4966		       50		      .byte.b	%01010000
    522  4967		       50		      .byte.b	%01010000
    523  4968		       70		      .byte.b	%01110000
    524  4969
    525  4969		       00 69	   __V	      =	* - text_data
    526  4969		       50		      .byte.b	%01010000
    527  496a		       50		      .byte.b	%01010000
    528  496b		       50		      .byte.b	%01010000
    529  496c		       50		      .byte.b	%01010000
    530  496d		       20		      .byte.b	%00100000
    531  496e
    532  496e		       00 6e	   __W	      =	* - text_data
    533  496e		       50		      .byte.b	%01010000
    534  496f		       50		      .byte.b	%01010000
    535  4970		       70		      .byte.b	%01110000
    536  4971		       70		      .byte.b	%01110000
    537  4972		       50		      .byte.b	%01010000
    538  4973
    539  4973		       00 73	   __X	      =	* - text_data
    540  4973		       50		      .byte.b	%01010000
    541  4974		       50		      .byte.b	%01010000
    542  4975		       20		      .byte.b	%00100000
    543  4976		       50		      .byte.b	%01010000
    544  4977		       50		      .byte.b	%01010000
    545  4978
    546  4978		       00 78	   __Y	      =	* - text_data
    547  4978		       50		      .byte.b	%01010000
    548  4979		       50		      .byte.b	%01010000
    549  497a		       20		      .byte.b	%00100000
    550  497b		       20		      .byte.b	%00100000
    551  497c		       20		      .byte.b	%00100000
    552  497d
    553  497d		       00 7d	   __Z	      =	* - text_data
    554  497d		       70		      .byte.b	%01110000
    555  497e		       10		      .byte.b	%00010000
    556  497f		       20		      .byte.b	%00100000
    557  4980		       40		      .byte.b	%01000000
    558  4981		       70		      .byte.b	%01110000
    559  4982
    560  4982		       00 82	   __0	      =	* - text_data
    561  4982		       70		      .byte.b	%01110000
    562  4983		       50		      .byte.b	%01010000
    563  4984		       50		      .byte.b	%01010000
    564  4985		       50		      .byte.b	%01010000
    565  4986		       70		      .byte.b	%01110000
    566  4987
    567  4987		       00 87	   __1	      =	* - text_data
    568  4987		       20		      .byte.b	%00100000
    569  4988		       60		      .byte.b	%01100000
    570  4989		       20		      .byte.b	%00100000
    571  498a		       20		      .byte.b	%00100000
    572  498b		       70		      .byte.b	%01110000
    573  498c
    574  498c		       00 8c	   __2	      =	* - text_data
    575  498c		       60		      .byte.b	%01100000
    576  498d		       10		      .byte.b	%00010000
    577  498e		       20		      .byte.b	%00100000
    578  498f		       40		      .byte.b	%01000000
    579  4990		       70		      .byte.b	%01110000
    580  4991
    581  4991		       00 91	   __3	      =	* - text_data
    582  4991		       60		      .byte.b	%01100000
    583  4992		       10		      .byte.b	%00010000
    584  4993		       20		      .byte.b	%00100000
    585  4994		       10		      .byte.b	%00010000
    586  4995		       60		      .byte.b	%01100000
    587  4996
    588  4996		       00 96	   __4	      =	* - text_data
    589  4996		       50		      .byte.b	%01010000
    590  4997		       50		      .byte.b	%01010000
    591  4998		       70		      .byte.b	%01110000
    592  4999		       10		      .byte.b	%00010000
    593  499a		       10		      .byte.b	%00010000
    594  499b
    595  499b		       00 9b	   __5	      =	* - text_data
    596  499b		       70		      .byte.b	%01110000
    597  499c		       40		      .byte.b	%01000000
    598  499d		       60		      .byte.b	%01100000
    599  499e		       10		      .byte.b	%00010000
    600  499f		       60		      .byte.b	%01100000
    601  49a0
    602  49a0		       00 a0	   __6	      =	* - text_data
    603  49a0		       30		      .byte.b	%00110000
    604  49a1		       40		      .byte.b	%01000000
    605  49a2		       60		      .byte.b	%01100000
    606  49a3		       50		      .byte.b	%01010000
    607  49a4		       20		      .byte.b	%00100000
    608  49a5
    609  49a5		       00 a5	   __7	      =	* - text_data
    610  49a5		       70		      .byte.b	%01110000
    611  49a6		       10		      .byte.b	%00010000
    612  49a7		       20		      .byte.b	%00100000
    613  49a8		       40		      .byte.b	%01000000
    614  49a9		       40		      .byte.b	%01000000
    615  49aa
    616  49aa		       00 aa	   __8	      =	* - text_data
    617  49aa		       20		      .byte.b	%00100000
    618  49ab		       50		      .byte.b	%01010000
    619  49ac		       20		      .byte.b	%00100000
    620  49ad		       50		      .byte.b	%01010000
    621  49ae		       20		      .byte.b	%00100000
    622  49af
    623  49af		       00 af	   __9	      =	* - text_data
    624  49af		       20		      .byte.b	%00100000
    625  49b0		       50		      .byte.b	%01010000
    626  49b1		       30		      .byte.b	%00110000
    627  49b2		       10		      .byte.b	%00010000
    628  49b3		       60		      .byte.b	%01100000
    629  49b4
    630  49b4		       00 b4	   _sp	      =	* - text_data
    631  49b4		       00		      .byte.b	%00000000
    632  49b5		       00		      .byte.b	%00000000
    633  49b6		       00		      .byte.b	%00000000
    634  49b7		       00		      .byte.b	%00000000
    635  49b8		       00		      .byte.b	%00000000
    636  49b9
    637  49b9		       00 b9	   _pd	      =	* - text_data
    638  49b9		       00		      .byte.b	%00000000
    639  49ba		       00		      .byte.b	%00000000
    640  49bb		       00		      .byte.b	%00000000
    641  49bc		       00		      .byte.b	%00000000
    642  49bd		       20		      .byte.b	%00100000
    643  49be
    644  49be		       00 be	   _qu	      =	* - text_data
    645  49be		       60		      .byte.b	%01100000
    646  49bf		       10		      .byte.b	%00010000
    647  49c0		       20		      .byte.b	%00100000
    648  49c1		       00		      .byte.b	%00000000
    649  49c2		       20		      .byte.b	%00100000
    650  49c3
    651  49c3		       00 c3	   _ex	      =	* - text_data
    652  49c3		       20		      .byte.b	%00100000
    653  49c4		       20		      .byte.b	%00100000
    654  49c5		       20		      .byte.b	%00100000
    655  49c6		       00		      .byte.b	%00000000
    656  49c7		       20		      .byte.b	%00100000
    657  49c8
    658  49c8		       00 c8	   _cm	      =	* - text_data
    659  49c8		       00		      .byte.b	%00000000
    660  49c9		       00		      .byte.b	%00000000
    661  49ca		       00		      .byte.b	%00000000
    662  49cb		       20		      .byte.b	%00100000
    663  49cc		       40		      .byte.b	%01000000
    664  49cd
    665  49cd		       00 cd	   _hy	      =	* - text_data
    666  49cd		       00		      .byte.b	%00000000
    667  49ce		       00		      .byte.b	%00000000
    668  49cf		       70		      .byte.b	%01110000
    669  49d0		       00		      .byte.b	%00000000
    670  49d1		       00		      .byte.b	%00000000
    671  49d2
    672  49d2		       00 d2	   _pl	      =	* - text_data
    673  49d2		       20		      .byte.b	%00100000
    674  49d3		       20		      .byte.b	%00100000
    675  49d4		       70		      .byte.b	%01110000
    676  49d5		       20		      .byte.b	%00100000
    677  49d6		       20		      .byte.b	%00100000
    678  49d7
    679  49d7		       00 d7	   _ap	      =	* - text_data
    680  49d7		       20		      .byte.b	%00100000
    681  49d8		       40		      .byte.b	%01000000
    682  49d9		       00		      .byte.b	%00000000
    683  49da		       00		      .byte.b	%00000000
    684  49db		       00		      .byte.b	%00000000
    685  49dc
    686  49dc		       00 dc	   _lp	      =	* - text_data
    687  49dc		       20		      .byte.b	%00100000
    688  49dd		       40		      .byte.b	%01000000
    689  49de		       40		      .byte.b	%01000000
    690  49df		       40		      .byte.b	%01000000
    691  49e0		       20		      .byte.b	%00100000
    692  49e1
    693  49e1		       00 e1	   _rp	      =	* - text_data
    694  49e1		       20		      .byte.b	%00100000
    695  49e2		       10		      .byte.b	%00010000
    696  49e3		       10		      .byte.b	%00010000
    697  49e4		       10		      .byte.b	%00010000
    698  49e5		       20		      .byte.b	%00100000
    699  49e6
    700  49e6		       00 e6	   _co	      =	* - text_data
    701  49e6		       00		      .byte.b	%00000000
    702  49e7		       40		      .byte.b	%01000000
    703  49e8		       00		      .byte.b	%00000000
    704  49e9		       40		      .byte.b	%01000000
    705  49ea		       00		      .byte.b	%00000000
    706  49eb
    707  49eb		       00 eb	   _sl	      =	* - text_data
    708  49eb		       10		      .byte.b	%00010000
    709  49ec		       10		      .byte.b	%00010000
    710  49ed		       20		      .byte.b	%00100000
    711  49ee		       40		      .byte.b	%01000000
    712  49ef		       40		      .byte.b	%01000000
    713  49f0
    714  49f0		       00 f0	   _eq	      =	* - text_data
    715  49f0		       00		      .byte.b	%00000000
    716  49f1		       70		      .byte.b	%01110000
    717  49f2		       00		      .byte.b	%00000000
    718  49f3		       70		      .byte.b	%01110000
    719  49f4		       00		      .byte.b	%00000000
    720  49f5
    721  49f5		       00 f5	   _qt	      =	* - text_data
    722  49f5		       50		      .byte.b	%01010000
    723  49f6		       50		      .byte.b	%01010000
    724  49f7		       00		      .byte.b	%00000000
    725  49f8		       00		      .byte.b	%00000000
    726  49f9		       00		      .byte.b	%00000000
    727  49fa
    728  49fa		       00 fa	   _po	      =	* - text_data
    729  49fa				   _ht
    730  49fa		       50		      .byte.b	%01010000
    731  49fb		       f0		      .byte.b	%11110000
    732  49fc		       50		      .byte.b	%01010000
    733  49fd		       f0		      .byte.b	%11110000
    734  49fe		       50		      .byte.b	%01010000
    735  49ff
    736  49ff
    737  49ff		       00 ff	   text_data_height =	* - text_data
    738  49ff
    739  49ff					      if	>. != >[.+text_data_height]
    740  4a00		       00		      align	256
    741  4a00					      endif
    742  4a00
    743  4a00				   right_text
    744  4a00
    745  4a00							; A
    746  4a00		       02		      .byte.b	%00000010
    747  4a01		       05		      .byte.b	%00000101
    748  4a02		       07		      .byte.b	%00000111
    749  4a03		       05		      .byte.b	%00000101
    750  4a04		       05		      .byte.b	%00000101
    751  4a05
    752  4a05
    753  4a05							; B
    754  4a05		       06		      .byte.b	%00000110
    755  4a06		       05		      .byte.b	%00000101
    756  4a07		       06		      .byte.b	%00000110
    757  4a08		       05		      .byte.b	%00000101
    758  4a09		       06		      .byte.b	%00000110
    759  4a0a
    760  4a0a							; C
    761  4a0a		       03		      .byte.b	%00000011
    762  4a0b		       04		      .byte.b	%00000100
    763  4a0c		       04		      .byte.b	%00000100
    764  4a0d		       04		      .byte.b	%00000100
    765  4a0e		       03		      .byte.b	%00000011
    766  4a0f
    767  4a0f							; D
    768  4a0f		       06		      .byte.b	%00000110
    769  4a10		       05		      .byte.b	%00000101
    770  4a11		       05		      .byte.b	%00000101
    771  4a12		       05		      .byte.b	%00000101
    772  4a13		       06		      .byte.b	%00000110
    773  4a14
    774  4a14							; E
    775  4a14		       07		      .byte.b	%00000111
    776  4a15		       04		      .byte.b	%00000100
    777  4a16		       06		      .byte.b	%00000110
    778  4a17		       04		      .byte.b	%00000100
    779  4a18		       07		      .byte.b	%00000111
    780  4a19
    781  4a19							; F
    782  4a19		       07		      .byte.b	%00000111
    783  4a1a		       04		      .byte.b	%00000100
    784  4a1b		       06		      .byte.b	%00000110
    785  4a1c		       04		      .byte.b	%00000100
    786  4a1d		       04		      .byte.b	%00000100
    787  4a1e
    788  4a1e							; G
    789  4a1e		       03		      .byte.b	%00000011
    790  4a1f		       04		      .byte.b	%00000100
    791  4a20		       05		      .byte.b	%00000101
    792  4a21		       05		      .byte.b	%00000101
    793  4a22		       02		      .byte.b	%00000010
    794  4a23
    795  4a23							; H
    796  4a23		       05		      .byte.b	%00000101
    797  4a24		       05		      .byte.b	%00000101
    798  4a25		       07		      .byte.b	%00000111
    799  4a26		       05		      .byte.b	%00000101
    800  4a27		       05		      .byte.b	%00000101
    801  4a28
    802  4a28							; I
    803  4a28		       07		      .byte.b	%00000111
    804  4a29		       02		      .byte.b	%00000010
    805  4a2a		       02		      .byte.b	%00000010
    806  4a2b		       02		      .byte.b	%00000010
    807  4a2c		       07		      .byte.b	%00000111
    808  4a2d
    809  4a2d							; J
    810  4a2d		       01		      .byte.b	%00000001
    811  4a2e		       01		      .byte.b	%00000001
    812  4a2f		       01		      .byte.b	%00000001
    813  4a30		       05		      .byte.b	%00000101
    814  4a31		       02		      .byte.b	%00000010
    815  4a32
    816  4a32							; K
    817  4a32		       05		      .byte.b	%00000101
    818  4a33		       05		      .byte.b	%00000101
    819  4a34		       06		      .byte.b	%00000110
    820  4a35		       05		      .byte.b	%00000101
    821  4a36		       05		      .byte.b	%00000101
    822  4a37
    823  4a37							; L
    824  4a37		       04		      .byte.b	%00000100
    825  4a38		       04		      .byte.b	%00000100
    826  4a39		       04		      .byte.b	%00000100
    827  4a3a		       04		      .byte.b	%00000100
    828  4a3b		       07		      .byte.b	%00000111
    829  4a3c
    830  4a3c							; M
    831  4a3c		       05		      .byte.b	%00000101
    832  4a3d		       07		      .byte.b	%00000111
    833  4a3e		       07		      .byte.b	%00000111
    834  4a3f		       05		      .byte.b	%00000101
    835  4a40		       05		      .byte.b	%00000101
    836  4a41
    837  4a41							; N
    838  4a41		       06		      .byte.b	%00000110
    839  4a42		       05		      .byte.b	%00000101
    840  4a43		       05		      .byte.b	%00000101
    841  4a44		       05		      .byte.b	%00000101
    842  4a45		       05		      .byte.b	%00000101
    843  4a46
    844  4a46							; O
    845  4a46		       02		      .byte.b	%00000010
    846  4a47		       05		      .byte.b	%00000101
    847  4a48		       05		      .byte.b	%00000101
    848  4a49		       05		      .byte.b	%00000101
    849  4a4a		       02		      .byte.b	%00000010
    850  4a4b
    851  4a4b							; P
    852  4a4b		       06		      .byte.b	%00000110
    853  4a4c		       05		      .byte.b	%00000101
    854  4a4d		       06		      .byte.b	%00000110
    855  4a4e		       04		      .byte.b	%00000100
    856  4a4f		       04		      .byte.b	%00000100
    857  4a50
    858  4a50							; Q
    859  4a50		       02		      .byte.b	%00000010
    860  4a51		       05		      .byte.b	%00000101
    861  4a52		       05		      .byte.b	%00000101
    862  4a53		       05		      .byte.b	%00000101
    863  4a54		       03		      .byte.b	%00000011
    864  4a55
    865  4a55							; R
    866  4a55		       06		      .byte.b	%00000110
    867  4a56		       05		      .byte.b	%00000101
    868  4a57		       06		      .byte.b	%00000110
    869  4a58		       05		      .byte.b	%00000101
    870  4a59		       05		      .byte.b	%00000101
    871  4a5a
    872  4a5a							; S
    873  4a5a		       03		      .byte.b	%00000011
    874  4a5b		       04		      .byte.b	%00000100
    875  4a5c		       02		      .byte.b	%00000010
    876  4a5d		       01		      .byte.b	%00000001
    877  4a5e		       06		      .byte.b	%00000110
    878  4a5f
    879  4a5f							; T
    880  4a5f		       07		      .byte.b	%00000111
    881  4a60		       02		      .byte.b	%00000010
    882  4a61		       02		      .byte.b	%00000010
    883  4a62		       02		      .byte.b	%00000010
    884  4a63		       02		      .byte.b	%00000010
    885  4a64
    886  4a64							; U
    887  4a64		       05		      .byte.b	%00000101
    888  4a65		       05		      .byte.b	%00000101
    889  4a66		       05		      .byte.b	%00000101
    890  4a67		       05		      .byte.b	%00000101
    891  4a68		       07		      .byte.b	%00000111
    892  4a69
    893  4a69							; V
    894  4a69		       05		      .byte.b	%00000101
    895  4a6a		       05		      .byte.b	%00000101
    896  4a6b		       05		      .byte.b	%00000101
    897  4a6c		       05		      .byte.b	%00000101
    898  4a6d		       02		      .byte.b	%00000010
    899  4a6e
    900  4a6e							; W
    901  4a6e		       05		      .byte.b	%00000101
    902  4a6f		       05		      .byte.b	%00000101
    903  4a70		       07		      .byte.b	%00000111
    904  4a71		       07		      .byte.b	%00000111
    905  4a72		       05		      .byte.b	%00000101
    906  4a73
    907  4a73							; X
    908  4a73		       05		      .byte.b	%00000101
    909  4a74		       05		      .byte.b	%00000101
    910  4a75		       02		      .byte.b	%00000010
    911  4a76		       05		      .byte.b	%00000101
    912  4a77		       05		      .byte.b	%00000101
    913  4a78
    914  4a78							; Y
    915  4a78		       05		      .byte.b	%00000101
    916  4a79		       05		      .byte.b	%00000101
    917  4a7a		       02		      .byte.b	%00000010
    918  4a7b		       02		      .byte.b	%00000010
    919  4a7c		       02		      .byte.b	%00000010
    920  4a7d
    921  4a7d							; Z
    922  4a7d		       07		      .byte.b	%00000111
    923  4a7e		       01		      .byte.b	%00000001
    924  4a7f		       02		      .byte.b	%00000010
    925  4a80		       04		      .byte.b	%00000100
    926  4a81		       07		      .byte.b	%00000111
    927  4a82
    928  4a82							; 0
    929  4a82		       07		      .byte.b	%00000111
    930  4a83		       05		      .byte.b	%00000101
    931  4a84		       05		      .byte.b	%00000101
    932  4a85		       05		      .byte.b	%00000101
    933  4a86		       07		      .byte.b	%00000111
    934  4a87
    935  4a87							; 1
    936  4a87		       02		      .byte.b	%00000010
    937  4a88		       06		      .byte.b	%00000110
    938  4a89		       02		      .byte.b	%00000010
    939  4a8a		       02		      .byte.b	%00000010
    940  4a8b		       07		      .byte.b	%00000111
    941  4a8c
    942  4a8c							; 2
    943  4a8c		       06		      .byte.b	%00000110
    944  4a8d		       01		      .byte.b	%00000001
    945  4a8e		       02		      .byte.b	%00000010
    946  4a8f		       04		      .byte.b	%00000100
    947  4a90		       07		      .byte.b	%00000111
    948  4a91
    949  4a91							; 3
    950  4a91		       06		      .byte.b	%00000110
    951  4a92		       01		      .byte.b	%00000001
    952  4a93		       02		      .byte.b	%00000010
    953  4a94		       01		      .byte.b	%00000001
    954  4a95		       06		      .byte.b	%00000110
    955  4a96
    956  4a96							; 4
    957  4a96		       05		      .byte.b	%00000101
    958  4a97		       05		      .byte.b	%00000101
    959  4a98		       07		      .byte.b	%00000111
    960  4a99		       01		      .byte.b	%00000001
    961  4a9a		       01		      .byte.b	%00000001
    962  4a9b
    963  4a9b							; 5
    964  4a9b		       07		      .byte.b	%00000111
    965  4a9c		       04		      .byte.b	%00000100
    966  4a9d		       06		      .byte.b	%00000110
    967  4a9e		       01		      .byte.b	%00000001
    968  4a9f		       06		      .byte.b	%00000110
    969  4aa0
    970  4aa0							; 6
    971  4aa0		       03		      .byte.b	%00000011
    972  4aa1		       04		      .byte.b	%00000100
    973  4aa2		       06		      .byte.b	%00000110
    974  4aa3		       05		      .byte.b	%00000101
    975  4aa4		       02		      .byte.b	%00000010
    976  4aa5
    977  4aa5							; 7
    978  4aa5		       07		      .byte.b	%00000111
    979  4aa6		       01		      .byte.b	%00000001
    980  4aa7		       02		      .byte.b	%00000010
    981  4aa8		       04		      .byte.b	%00000100
    982  4aa9		       04		      .byte.b	%00000100
    983  4aaa
    984  4aaa							; 8
    985  4aaa		       02		      .byte.b	%00000010
    986  4aab		       05		      .byte.b	%00000101
    987  4aac		       02		      .byte.b	%00000010
    988  4aad		       05		      .byte.b	%00000101
    989  4aae		       02		      .byte.b	%00000010
    990  4aaf
    991  4aaf							; 9
    992  4aaf		       02		      .byte.b	%00000010
    993  4ab0		       05		      .byte.b	%00000101
    994  4ab1		       03		      .byte.b	%00000011
    995  4ab2		       01		      .byte.b	%00000001
    996  4ab3		       06		      .byte.b	%00000110
    997  4ab4
    998  4ab4							; space
    999  4ab4		       00		      .byte.b	%00000000
   1000  4ab5		       00		      .byte.b	%00000000
   1001  4ab6		       00		      .byte.b	%00000000
   1002  4ab7		       00		      .byte.b	%00000000
   1003  4ab8		       00		      .byte.b	%00000000
   1004  4ab9
   1005  4ab9							; period
   1006  4ab9		       00		      .byte.b	%00000000
   1007  4aba		       00		      .byte.b	%00000000
   1008  4abb		       00		      .byte.b	%00000000
   1009  4abc		       00		      .byte.b	%00000000
   1010  4abd		       02		      .byte.b	%00000010
   1011  4abe
   1012  4abe							; question mark
   1013  4abe		       06		      .byte.b	%00000110
   1014  4abf		       01		      .byte.b	%00000001
   1015  4ac0		       02		      .byte.b	%00000010
   1016  4ac1		       00		      .byte.b	%00000000
   1017  4ac2		       02		      .byte.b	%00000010
   1018  4ac3
   1019  4ac3							; exclamation point
   1020  4ac3		       02		      .byte.b	%00000010
   1021  4ac4		       02		      .byte.b	%00000010
   1022  4ac5		       02		      .byte.b	%00000010
   1023  4ac6		       00		      .byte.b	%00000000
   1024  4ac7		       02		      .byte.b	%00000010
   1025  4ac8
   1026  4ac8							; comma
   1027  4ac8		       00		      .byte.b	%00000000
   1028  4ac9		       00		      .byte.b	%00000000
   1029  4aca		       00		      .byte.b	%00000000
   1030  4acb		       02		      .byte.b	%00000010
   1031  4acc		       04		      .byte.b	%00000100
   1032  4acd
   1033  4acd							; hyphen
   1034  4acd		       00		      .byte.b	%00000000
   1035  4ace		       00		      .byte.b	%00000000
   1036  4acf		       07		      .byte.b	%00000111
   1037  4ad0		       00		      .byte.b	%00000000
   1038  4ad1		       00		      .byte.b	%00000000
   1039  4ad2
   1040  4ad2							; plus
   1041  4ad2		       02		      .byte.b	%00000010
   1042  4ad3		       02		      .byte.b	%00000010
   1043  4ad4		       07		      .byte.b	%00000111
   1044  4ad5		       02		      .byte.b	%00000010
   1045  4ad6		       02		      .byte.b	%00000010
   1046  4ad7
   1047  4ad7							; apostrophe
   1048  4ad7		       02		      .byte.b	%00000010
   1049  4ad8		       04		      .byte.b	%00000100
   1050  4ad9		       00		      .byte.b	%00000000
   1051  4ada		       00		      .byte.b	%00000000
   1052  4adb		       00		      .byte.b	%00000000
   1053  4adc
   1054  4adc							; left parenthesis
   1055  4adc		       02		      .byte.b	%00000010
   1056  4add		       04		      .byte.b	%00000100
   1057  4ade		       04		      .byte.b	%00000100
   1058  4adf		       04		      .byte.b	%00000100
   1059  4ae0		       02		      .byte.b	%00000010
   1060  4ae1
   1061  4ae1							; right parenthesis
   1062  4ae1		       02		      .byte.b	%00000010
   1063  4ae2		       01		      .byte.b	%00000001
   1064  4ae3		       01		      .byte.b	%00000001
   1065  4ae4		       01		      .byte.b	%00000001
   1066  4ae5		       02		      .byte.b	%00000010
   1067  4ae6
   1068  4ae6							; colon
   1069  4ae6		       00		      .byte.b	%00000000
   1070  4ae7		       04		      .byte.b	%00000100
   1071  4ae8		       00		      .byte.b	%00000000
   1072  4ae9		       04		      .byte.b	%00000100
   1073  4aea		       00		      .byte.b	%00000000
   1074  4aeb
   1075  4aeb							;slash
   1076  4aeb		       01		      .byte.b	%00000001
   1077  4aec		       01		      .byte.b	%00000001
   1078  4aed		       02		      .byte.b	%00000010
   1079  4aee		       04		      .byte.b	%00000100
   1080  4aef		       04		      .byte.b	%00000100
   1081  4af0
   1082  4af0							; equal
   1083  4af0		       00		      .byte.b	%00000000
   1084  4af1		       07		      .byte.b	%00000111
   1085  4af2		       00		      .byte.b	%00000000
   1086  4af3		       07		      .byte.b	%00000111
   1087  4af4		       00		      .byte.b	%00000000
   1088  4af5
   1089  4af5							; quote
   1090  4af5		       05		      .byte.b	%00000101
   1091  4af6		       05		      .byte.b	%00000101
   1092  4af7		       00		      .byte.b	%00000000
   1093  4af8		       00		      .byte.b	%00000000
   1094  4af9		       00		      .byte.b	%00000000
   1095  4afa
   1096  4afa							; pound sign
   1097  4afa		       05		      .byte.b	%00000101
   1098  4afb		       0f		      .byte.b	%00001111
   1099  4afc		       05		      .byte.b	%00000101
   1100  4afd		       0f		      .byte.b	%00001111
   1101  4afe		       05		      .byte.b	%00000101
------- FILE d:\Firmaplus\Firmaplus_intern\Atari\PlusROM\Projekte-batariBasic\CaveApocalypse\C.A.V.E. Apocalypse.bas.asm
   7215  4aff
   7216  4aff				   .
   7217  4aff							; 
   7218  4aff
   7219  4aff				   .L0583		;  data text_strings
   7220  4aff
   7221  4aff		       4c fe fb 	      JMP	.skipL0583
   7222  4b02				   text_strings
   7223  4b02		       00 37 37 b4*	      .byte.b	__A, __L, __L, _sp, __M, __E, __N, _sp, __S, __A, __V, __E	; __R, __E, __S, __C, __U, __E, __D
   7224  4b0e
   7225  4b0e		       b4 8c b4 3c*	      .byte.b	_sp, __2, _sp, __M, __E, __N, _sp, __L, __E, __F, __T, _sp
   7226  4b1a
   7227  4b1a		       b4 96 b4 3c*	      .byte.b	_sp, __4, _sp, __M, __E, __N, _sp, __L, __E, __F, __T, _sp
   7228  4b26
   7229  4b26		       b4 a0 b4 3c*	      .byte.b	_sp, __6, _sp, __M, __E, __N, _sp, __L, __E, __F, __T, _sp
   7230  4b32
   7231  4b32		       b4 aa b4 3c*	      .byte.b	_sp, __8, _sp, __M, __E, __N, _sp, __L, __E, __F, __T, _sp
   7232  4b3e
   7233  4b3e		       87 82 b4 3c*	      .byte.b	__1, __0, _sp, __M, __E, __N, _sp, __L, __E, __F, __T, _sp
   7234  4b4a
   7235  4b4a		       87 8c b4 3c*	      .byte.b	__1, __2, _sp, __M, __E, __N, _sp, __L, __E, __F, __T, _sp
   7236  4b56
   7237  4b56		       87 96 b4 3c*	      .byte.b	__1, __4, _sp, __M, __E, __N, _sp, __L, __E, __F, __T, _sp
   7238  4b62
   7239  4b62		       87 a0 b4 3c*	      .byte.b	__1, __6, _sp, __M, __E, __N, _sp, __L, __E, __F, __T, _sp
   7240  4b6e
   7241  4b6e		       87 aa b4 3c*	      .byte.b	__1, __8, _sp, __M, __E, __N, _sp, __L, __E, __F, __T, _sp
   7242  4b7a
   7243  4b7a		       8c 82 b4 3c*	      .byte.b	__2, __0, _sp, __M, __E, __N, _sp, __L, __E, __F, __T, _sp
   7244  4b86
   7245  4b86		       8c 8c b4 3c*	      .byte.b	__2, __2, _sp, __M, __E, __N, _sp, __L, __E, __F, __T, _sp
   7246  4b92
   7247  4b92		       8c 96 b4 3c*	      .byte.b	__2, __4, _sp, __M, __E, __N, _sp, __L, __E, __F, __T, _sp
   7248  4b9e
   7249  4b9e		       8c a0 b4 3c*	      .byte.b	__2, __6, _sp, __M, __E, __N, _sp, __L, __E, __F, __T, _sp
   7250  4baa
   7251  4baa		       8c aa b4 3c*	      .byte.b	__2, __8, _sp, __M, __E, __N, _sp, __L, __E, __F, __T, _sp
   7252  4bb6
   7253  4bb6		       91 82 b4 3c*	      .byte.b	__3, __0, _sp, __M, __E, __N, _sp, __L, __E, __F, __T, _sp
   7254  4bc2
   7255  4bc2		       91 8c b4 3c*	      .byte.b	__3, __2, _sp, __M, __E, __N, _sp, __L, __E, __F, __T, _sp
   7256  4bce
   7257  4bce		       91 96 b4 3c*	      .byte.b	__3, __4, _sp, __M, __E, __N, _sp, __L, __E, __F, __T, _sp
   7258  4bda
   7259  4bda		       91 a0 b4 3c*	      .byte.b	__3, __6, _sp, __M, __E, __N, _sp, __L, __E, __F, __T, _sp
   7260  4be6
   7261  4be6		       91 aa b4 3c*	      .byte.b	__3, __8, _sp, __M, __E, __N, _sp, __L, __E, __F, __T, _sp
   7262  4bf2
   7263  4bf2		       96 82 b4 3c*	      .byte.b	__4, __0, _sp, __M, __E, __N, _sp, __L, __E, __F, __T, _sp
   7264  4bfe
   7265  4bfe				   .skipL0583
   7266  4bfe				   .
   7267  4bfe							; 
   7268  4bfe
   7269  4bfe				   .
   7270  4bfe							; 
   7271  4bfe
   7272  4bfe				   .
   7273  4bfe							; 
   7274  4bfe
   7275  4bfe				   .L0584		;  asm
   7276  4bfe
      0  4bfe					      SET_PLUSROM_API	"a.php", "ca.firmaplus.de"
      1  4bfe		       fb fe	   OLD_RORG   =	*
      2  4bfe					      REND
      3  4bfe				   PlusROM_API
      4  4bfe		       61 2e 70 68*	      .byte.b	"a.php", 0, "ca.firmaplus.de", 0
 Size of PlusROM API definition:  22
      5  4bfe					      ECHO	"Size of PlusROM API definition: ", [( * - PlusROM_API )]d
      6  4c14					      RORG	(OLD_RORG + ( * - PlusROM_API ))
   7278  4c14
   7279  4c14				  -	      if	(<*) > (<(*+7))
   7280  4c14				  -	      repeat	($100-<*)
   7281  4c14				  -	      .byte	0
   7282  4c14				  -	      repend
   7283  4c14					      endif
   7284  4c14				   playercolorL0281_1
   7285  4c14		       1e		      .byte.b	_1E
   7286  4c15		       82		      .byte.b	_82
   7287  4c16		       84		      .byte.b	_84
   7288  4c17		       46		      .byte.b	_46
   7289  4c18		       44		      .byte.b	_44
   7290  4c19		       42		      .byte.b	_42
   7291  4c1a		       12		      .byte.b	_12
   7292  4c1b		       08		      .byte.b	_08
   7293  4c1c				  -	      if	(<*) > (<(*+7))
   7294  4c1c				  -	      repeat	($100-<*)
   7295  4c1c				  -	      .byte	0
   7296  4c1c				  -	      repend
   7297  4c1c					      endif
   7298  4c1c				   player1then_1
   7299  4c1c		       1b		      .byte.b	%00011011
   7300  4c1d		       0e		      .byte.b	%00001110
   7301  4c1e		       1f		      .byte.b	%00011111
   7302  4c1f		       bd		      .byte.b	%10111101
   7303  4c20		       f9		      .byte.b	%11111001
   7304  4c21		       9e		      .byte.b	%10011110
   7305  4c22		       08		      .byte.b	%00001000
   7306  4c23		       7c		      .byte.b	%01111100
   7307  4c24				  -	      if	(<*) > (<(*+7))
   7308  4c24				  -	      repeat	($100-<*)
   7309  4c24				  -	      .byte	0
   7310  4c24				  -	      repend
   7311  4c24					      endif
   7312  4c24				   player2then_1
   7313  4c24		       1b		      .byte.b	%00011011
   7314  4c25		       0e		      .byte.b	%00001110
   7315  4c26		       1f		      .byte.b	%00011111
   7316  4c27		       bd		      .byte.b	%10111101
   7317  4c28		       f9		      .byte.b	%11111001
   7318  4c29		       9e		      .byte.b	%10011110
   7319  4c2a		       08		      .byte.b	%00001000
   7320  4c2b		       1f		      .byte.b	%00011111
   7321  4c2c				  -	      if	(<*) > (<(*+6))
   7322  4c2c				  -	      repeat	($100-<*)
   7323  4c2c				  -	      .byte	0
   7324  4c2c				  -	      repend
   7325  4c2c					      endif
   7326  4c2c				   player3then_0
   7327  4c2c		       55		      .byte.b	%01010101
   7328  4c2d		       aa		      .byte.b	%10101010
   7329  4c2e		       ff		      .byte.b	%11111111
   7330  4c2f		       3c		      .byte.b	%00111100
   7331  4c30		       18		      .byte.b	%00011000
   7332  4c31		       08		      .byte.b	%00001000
   7333  4c32		       04		      .byte.b	%00000100
   7334  4c33				  -	      if	(<*) > (<(*+6))
   7335  4c33				  -	      repeat	($100-<*)
   7336  4c33				  -	      .byte	0
   7337  4c33				  -	      repend
   7338  4c33					      endif
   7339  4c33				   player4then_0
   7340  4c33		       aa		      .byte.b	%10101010
   7341  4c34		       55		      .byte.b	%01010101
   7342  4c35		       ff		      .byte.b	%11111111
   7343  4c36		       3c		      .byte.b	%00111100
   7344  4c37		       18		      .byte.b	%00011000
   7345  4c38		       08		      .byte.b	%00001000
   7346  4c39		       04		      .byte.b	%00000100
   7347  4c3a				  -	      if	(<*) > (<(*+11))
   7348  4c3a				  -	      repeat	($100-<*)
   7349  4c3a				  -	      .byte	0
   7350  4c3a				  -	      repend
   7351  4c3a					      endif
   7352  4c3a				   playerL0295_0
   7353  4c3a		       a0		      .byte.b	%10100000
   7354  4c3b		       40		      .byte.b	%01000000
   7355  4c3c		       e0		      .byte.b	%11100000
   7356  4c3d		       a0		      .byte.b	%10100000
   7357  4c3e		       40		      .byte.b	%01000000
   7358  4c3f		       00		      .byte.b	%00000000
   7359  4c40		       00		      .byte.b	%00000000
   7360  4c41		       05		      .byte.b	%00000101
   7361  4c42		       02		      .byte.b	%00000010
   7362  4c43		       07		      .byte.b	%00000111
   7363  4c44		       05		      .byte.b	%00000101
   7364  4c45		       02		      .byte.b	%00000010
   7365  4c46				  -	      if	(<*) > (<(*+24))
   7366  4c46				  -	      repeat	($100-<*)
   7367  4c46				  -	      .byte	0
   7368  4c46				  -	      repend
   7369  4c46					      endif
   7370  4c46				   playerL0297_0
   7371  4c46		       3c		      .byte.b	%00111100
   7372  4c47		       20		      .byte.b	%00100000
   7373  4c48		       20		      .byte.b	%00100000
   7374  4c49		       20		      .byte.b	%00100000
   7375  4c4a		       20		      .byte.b	%00100000
   7376  4c4b		       00		      .byte.b	%00000000
   7377  4c4c		       3c		      .byte.b	%00111100
   7378  4c4d		       20		      .byte.b	%00100000
   7379  4c4e		       38		      .byte.b	%00111000
   7380  4c4f		       20		      .byte.b	%00100000
   7381  4c50		       3c		      .byte.b	%00111100
   7382  4c51		       00		      .byte.b	%00000000
   7383  4c52		       18		      .byte.b	%00011000
   7384  4c53		       24		      .byte.b	%00100100
   7385  4c54		       24		      .byte.b	%00100100
   7386  4c55		       24		      .byte.b	%00100100
   7387  4c56		       24		      .byte.b	%00100100
   7388  4c57		       00		      .byte.b	%00000000
   7389  4c58		       20		      .byte.b	%00100000
   7390  4c59		       20		      .byte.b	%00100000
   7391  4c5a		       38		      .byte.b	%00111000
   7392  4c5b		       20		      .byte.b	%00100000
   7393  4c5c		       bd		      .byte.b	%10111101
   7394  4c5d		       81		      .byte.b	%10000001
   7395  4c5e		       ff		      .byte.b	%11111111
   7396  4c5f				  -	      if	(<*) > (<(*+3))
   7397  4c5f				  -	      repeat	($100-<*)
   7398  4c5f				  -	      .byte	0
   7399  4c5f				  -	      repend
   7400  4c5f					      endif
   7401  4c5f				   player5then_0
   7402  4c5f		       a6		      .byte.b	%10100110
   7403  4c60		       42		      .byte.b	%01000010
   7404  4c61		       63		      .byte.b	%01100011
   7405  4c62		       42		      .byte.b	%01000010
   7406  4c63				  -	      if	(<*) > (<(*+3))
   7407  4c63				  -	      repeat	($100-<*)
   7408  4c63				  -	      .byte	0
   7409  4c63				  -	      repend
   7410  4c63					      endif
   7411  4c63				   player6then_0
   7412  4c63		       c5		      .byte.b	%11000101
   7413  4c64		       42		      .byte.b	%01000010
   7414  4c65		       63		      .byte.b	%01100011
   7415  4c66		       42		      .byte.b	%01000010
   7416  4c67					      if	ECHOFIRST
      778 bytes of ROM space left in bank 4
   7417  4c67					      echo	"    ",[(scoretable - *)]d , "bytes of ROM space left in bank 4")
   7418  4c67					      endif
   7419  4c67		       00 01	   ECHOFIRST  =	1
   7420  4c67
   7421  4c67
   7422  4c67							; Provided under the CC0 license. See the included LICENSE.txt for details.
   7423  4c67
   7424  4c67							; feel free to modify the score graphics - just keep each digit 8 high
   7425  4c67							; and keep the conditional compilation stuff intact
   7426  4c67				  -	      ifconst	ROM2k
   7427  4c67				  -	      ifconst	PlusROM_functions
   7428  4c67				  -	      ORG	$F7AC-16
   7429  4c67				  -	      else
   7430  4c67				  -	      ORG	$F7AC-8
   7431  4c67				  -	      endif
   7432  4c67					      else
   7433  4c67					      ifconst	bankswitch
   7434  4c67				  -	      if	bankswitch == 8
   7435  4c67				  -	      ORG	$2F94-bscode_length
   7436  4c67				  -	      RORG	$FF94-bscode_length
   7437  4c67					      endif
   7438  4c67					      if	bankswitch == 16
   7439  4f71					      ORG	$4F94-bscode_length
   7440  4f71					      RORG	$FF94-bscode_length
   7441  4f71					      endif
   7442  4f71				  -	      if	bankswitch == 32
   7443  4f71				  -	      ORG	$8F94-bscode_length
   7444  4f71				  -	      RORG	$FF94-bscode_length
   7445  4f71					      endif
   7446  4f71				  -	      if	bankswitch == 64
   7447  4f71				  -	      ORG	$10F80-bscode_length
   7448  4f71				  -	      RORG	$1FF80-bscode_length
   7449  4f71					      endif
   7450  4f71				  -	      else
   7451  4f71				  -	      ifconst	PlusROM_functions
   7452  4f71				  -	      ORG	$FF98
   7453  4f71				  -	      else
   7454  4f71				  -	      ORG	$FF9C
   7455  4f71				  -	      endif
   7456  4f71					      endif
   7457  4f71					      endif
   7458  4f71
   7459  4f71							; font equates
   7460  4f71		       00 01	   .21stcentury =	1
   7461  4f71		       00 02	   alarmclock =	2
   7462  4f71		       00 03	   handwritten =	3
   7463  4f71		       00 04	   interrupted =	4
   7464  4f71		       00 05	   retroputer =	5
   7465  4f71		       00 06	   whimsey    =	6
   7466  4f71		       00 07	   tiny       =	7
   7467  4f71		       00 08	   hex	      =	8
   7468  4f71
   7469  4f71				  -	      ifconst	font
   7470  4f71				  -	      if	font == hex
   7471  4f71				  -	      ORG	. - 48
   7472  4f71				  -	      endif
   7473  4f71					      endif
   7474  4f71
   7475  4f71				   scoretable
   7476  4f71
   7477  4f71				  -	      ifconst	font
   7478  4f71				  -	      if	font == .21stcentury
   7479  4f71				  -	      include	"score_graphics.asm.21stcentury"
   7480  4f71				  -	      endif
   7481  4f71				  -	      if	font == alarmclock
   7482  4f71				  -	      include	"score_graphics.asm.alarmclock"
   7483  4f71				  -	      endif
   7484  4f71				  -	      if	font == handwritten
   7485  4f71				  -	      include	"score_graphics.asm.handwritten"
   7486  4f71				  -	      endif
   7487  4f71				  -	      if	font == interrupted
   7488  4f71				  -	      include	"score_graphics.asm.interrupted"
   7489  4f71				  -	      endif
   7490  4f71				  -	      if	font == retroputer
   7491  4f71				  -	      include	"score_graphics.asm.retroputer"
   7492  4f71				  -	      endif
   7493  4f71				  -	      if	font == whimsey
   7494  4f71				  -	      include	"score_graphics.asm.whimsey"
   7495  4f71				  -	      endif
   7496  4f71				  -	      if	font == tiny
   7497  4f71				  -	      include	"score_graphics.asm.tiny"
   7498  4f71				  -	      endif
   7499  4f71				  -	      if	font == hex
   7500  4f71				  -	      include	"score_graphics.asm.hex"
   7501  4f71				  -	      endif
   7502  4f71					      else		; default font
   7503  4f71
   7504  4f71		       3c		      .byte.b	%00111100
   7505  4f72		       66		      .byte.b	%01100110
   7506  4f73		       66		      .byte.b	%01100110
   7507  4f74		       66		      .byte.b	%01100110
   7508  4f75		       66		      .byte.b	%01100110
   7509  4f76		       66		      .byte.b	%01100110
   7510  4f77		       66		      .byte.b	%01100110
   7511  4f78		       3c		      .byte.b	%00111100
   7512  4f79
   7513  4f79		       7e		      .byte.b	%01111110
   7514  4f7a		       18		      .byte.b	%00011000
   7515  4f7b		       18		      .byte.b	%00011000
   7516  4f7c		       18		      .byte.b	%00011000
   7517  4f7d		       18		      .byte.b	%00011000
   7518  4f7e		       38		      .byte.b	%00111000
   7519  4f7f		       18		      .byte.b	%00011000
   7520  4f80		       08		      .byte.b	%00001000
   7521  4f81
   7522  4f81		       7e		      .byte.b	%01111110
   7523  4f82		       60		      .byte.b	%01100000
   7524  4f83		       60		      .byte.b	%01100000
   7525  4f84		       3c		      .byte.b	%00111100
   7526  4f85		       06		      .byte.b	%00000110
   7527  4f86		       06		      .byte.b	%00000110
   7528  4f87		       46		      .byte.b	%01000110
   7529  4f88		       3c		      .byte.b	%00111100
   7530  4f89
   7531  4f89		       3c		      .byte.b	%00111100
   7532  4f8a		       46		      .byte.b	%01000110
   7533  4f8b		       06		      .byte.b	%00000110
   7534  4f8c		       06		      .byte.b	%00000110
   7535  4f8d		       1c		      .byte.b	%00011100
   7536  4f8e		       06		      .byte.b	%00000110
   7537  4f8f		       46		      .byte.b	%01000110
   7538  4f90		       3c		      .byte.b	%00111100
   7539  4f91
   7540  4f91		       0c		      .byte.b	%00001100
   7541  4f92		       0c		      .byte.b	%00001100
   7542  4f93		       7e		      .byte.b	%01111110
   7543  4f94		       4c		      .byte.b	%01001100
   7544  4f95		       4c		      .byte.b	%01001100
   7545  4f96		       2c		      .byte.b	%00101100
   7546  4f97		       1c		      .byte.b	%00011100
   7547  4f98		       0c		      .byte.b	%00001100
   7548  4f99
   7549  4f99		       3c		      .byte.b	%00111100
   7550  4f9a		       46		      .byte.b	%01000110
   7551  4f9b		       06		      .byte.b	%00000110
   7552  4f9c		       06		      .byte.b	%00000110
   7553  4f9d		       3c		      .byte.b	%00111100
   7554  4f9e		       60		      .byte.b	%01100000
   7555  4f9f		       60		      .byte.b	%01100000
   7556  4fa0		       7e		      .byte.b	%01111110
   7557  4fa1
   7558  4fa1		       3c		      .byte.b	%00111100
   7559  4fa2		       66		      .byte.b	%01100110
   7560  4fa3		       66		      .byte.b	%01100110
   7561  4fa4		       66		      .byte.b	%01100110
   7562  4fa5		       7c		      .byte.b	%01111100
   7563  4fa6		       60		      .byte.b	%01100000
   7564  4fa7		       62		      .byte.b	%01100010
   7565  4fa8		       3c		      .byte.b	%00111100
   7566  4fa9
   7567  4fa9		       30		      .byte.b	%00110000
   7568  4faa		       30		      .byte.b	%00110000
   7569  4fab		       30		      .byte.b	%00110000
   7570  4fac		       18		      .byte.b	%00011000
   7571  4fad		       0c		      .byte.b	%00001100
   7572  4fae		       06		      .byte.b	%00000110
   7573  4faf		       42		      .byte.b	%01000010
   7574  4fb0		       3e		      .byte.b	%00111110
   7575  4fb1
   7576  4fb1		       3c		      .byte.b	%00111100
   7577  4fb2		       66		      .byte.b	%01100110
   7578  4fb3		       66		      .byte.b	%01100110
   7579  4fb4		       66		      .byte.b	%01100110
   7580  4fb5		       3c		      .byte.b	%00111100
   7581  4fb6		       66		      .byte.b	%01100110
   7582  4fb7		       66		      .byte.b	%01100110
   7583  4fb8		       3c		      .byte.b	%00111100
   7584  4fb9
   7585  4fb9		       3c		      .byte.b	%00111100
   7586  4fba		       46		      .byte.b	%01000110
   7587  4fbb		       06		      .byte.b	%00000110
   7588  4fbc		       3e		      .byte.b	%00111110
   7589  4fbd		       66		      .byte.b	%01100110
   7590  4fbe		       66		      .byte.b	%01100110
   7591  4fbf		       66		      .byte.b	%01100110
   7592  4fc0		       3c		      .byte.b	%00111100
   7593  4fc1
   7594  4fc1					      ifnconst	DPC_kernel_options
   7595  4fc1
   7596  4fc1		       00		      .byte.b	%00000000
   7597  4fc2		       00		      .byte.b	%00000000
   7598  4fc3		       00		      .byte.b	%00000000
   7599  4fc4		       00		      .byte.b	%00000000
   7600  4fc5		       00		      .byte.b	%00000000
   7601  4fc6		       00		      .byte.b	%00000000
   7602  4fc7		       00		      .byte.b	%00000000
   7603  4fc8		       00		      .byte.b	%00000000
   7604  4fc9
   7605  4fc9					      endif
   7606  4fc9
   7607  4fc9					      endif
   7608  4fc9
   7609  4fc9				  -	      ifconst	ROM2k
   7610  4fc9				  -	      ifconst	PlusROM_functions
   7611  4fc9				  -	      ORG	$F7F0
   7612  4fc9				  -	      .byte	0	; WriteToBuffer
   7613  4fc9				  -	      .byte	0	; WriteSendBuffer
   7614  4fc9				  -	      .byte	0	; ReceiveBuffer
   7615  4fc9				  -	      .byte	$ff	; ReceiveBufferSize (none zero for detection of PlusROM support)
   7616  4fc9				  -	      ORG	$F7FA
   7617  4fc9				  -	      else
   7618  4fc9				  -	      ORG	$F7FC
   7619  4fc9				  -	      endif
   7620  4fc9					      else
   7621  4fc9					      ifconst	bankswitch
   7622  4fc9				  -	      if	bankswitch == 8
   7623  4fc9				  -	      ORG	$2FF4-bscode_length
   7624  4fc9				  -	      RORG	$FFF4-bscode_length
   7625  4fc9					      endif
   7626  4fc9					      if	bankswitch == 16
   7627  4fd1					      ORG	$4FF4-bscode_length
   7628  4fd1					      RORG	$FFF4-bscode_length
   7629  4fd1					      endif
   7630  4fd1				  -	      if	bankswitch == 32
   7631  4fd1				  -	      ORG	$8FF4-bscode_length
   7632  4fd1				  -	      RORG	$FFF4-bscode_length
   7633  4fd1					      endif
   7634  4fd1				  -	      if	bankswitch == 64
   7635  4fd1				  -	      ORG	$10FE0-bscode_length
   7636  4fd1				  -	      RORG	$1FFE0-bscode_length
   7637  4fd1					      endif
   7638  4fd1				  -	      else
   7639  4fd1				  -	      ifconst	PlusROM_functions
   7640  4fd1				  -	      ORG	$FFF0
   7641  4fd1				  -	      .byte	0	; WriteToBuffer
   7642  4fd1				  -	      .byte	0	; WriteSendBuffer
   7643  4fd1				  -	      .byte	0	; ReceiveBuffer
   7644  4fd1				  -	      .byte	$ff	; ReceiveBufferSize (none zero for detection of PlusROM support)
   7645  4fd1				  -	      ORG	$FFFA
   7646  4fd1				  -	      else
   7647  4fd1				  -	      ORG	$FFFC
   7648  4fd1				  -	      endif
   7649  4fd1					      endif
   7650  4fd1					      endif
   7651  4fd1							; Provided under the CC0 license. See the included LICENSE.txt for details.
   7652  4fd1
   7653  4fd1							; every bank has this stuff at the same place
   7654  4fd1							; this code can switch to/from any bank at any entry point
   7655  4fd1							; and can preserve register values
   7656  4fd1							; note: lines not starting with a space are not placed in all banks
   7657  4fd1							;
   7658  4fd1							; line below tells the compiler how long this is - do not remove
   7659  4fd1							;size=35
   7660  4fd1
   7661  4fd1				   begin_bscode
   7662  4fd1		       a2 ff		      ldx	#$ff
   7663  4fd3				  -	      ifconst	FASTFETCH	; using DPC+
   7664  4fd3				  -	      stx	FASTFETCH
   7665  4fd3					      endif
   7666  4fd3		       9a		      txs
   7667  4fd4				  -	      if	bankswitch == 64
   7668  4fd4				  -	      lda	#(((>(start-1)) & $0F) | $F0)
   7669  4fd4					      else
   7670  4fd4		       a9 f2		      lda	#>(start-1)
   7671  4fd6					      endif
   7672  4fd6		       48		      pha
   7673  4fd7		       a9 b0		      lda	#<(start-1)
   7674  4fd9		       48		      pha
   7675  4fda
   7676  4fda				   BS_return
   7677  4fda		       48		      pha
   7678  4fdb		       8a		      txa
   7679  4fdc		       48		      pha
   7680  4fdd		       ba		      tsx
   7681  4fde
   7682  4fde					      if	bankswitch != 64
   7683  4fde		       b5 04		      lda	4,x	; get high byte of return address
   7684  4fe0
   7685  4fe0		       2a		      rol
   7686  4fe1		       2a		      rol
   7687  4fe2		       2a		      rol
   7688  4fe3		       2a		      rol
   7689  4fe4		       29 03		      and	#bs_mask	;1 3 or 7 for F8/F6/F4
   7690  4fe6		       aa		      tax
   7691  4fe7		       e8		      inx
   7692  4fe8				  -	      else
   7693  4fe8				  -	      lda	4,x	; get high byte of return address
   7694  4fe8				  -	      tay
   7695  4fe8				  -	      ora	#$10	; change our bank nibble into a valid rom mirror
   7696  4fe8				  -	      sta	4,x
   7697  4fe8				  -	      tya
   7698  4fe8				  -	      lsr
   7699  4fe8				  -	      lsr
   7700  4fe8				  -	      lsr
   7701  4fe8				  -	      lsr
   7702  4fe8				  -	      tax
   7703  4fe8				  -	      inx
   7704  4fe8					      endif
   7705  4fe8
   7706  4fe8				   BS_jsr
   7707  4fe8		       bd f5 1f 	      lda	bankswitch_hotspot-1,x
   7708  4feb		       68		      pla
   7709  4fec		       aa		      tax
   7710  4fed		       68		      pla
   7711  4fee		       60		      rts
   7712  4fef				  -	      if	((* & $1FFF) > ((bankswitch_hotspot & $1FFF) - 1))
   7713  4fef				  -	      echo	"WARNING: size parameter in banksw.asm too small - the program probably will not work."
   7714  4fef				  -	      echo	"Change to",[(*-begin_bscode+1)&$FF]d,"and try again."
   7715  4fef					      endif
   7716  4fef							; Provided under the CC0 license. See the included LICENSE.txt for details.
   7717  4fef
   7718  4fef					      ifconst	bankswitch
   7719  4fef				  -	      if	bankswitch == 8
   7720  4fef				  -	      ifconst	PlusROM_functions
   7721  4fef				  -	      ORG	$2FF0
   7722  4fef				  -	      RORG	$FFF0
   7723  4fef				  -	      .byte	0	; WriteToBuffer
   7724  4fef				  -	      .byte	0	; WriteSendBuffer
   7725  4fef				  -	      .byte	0	; ReceiveBuffer
   7726  4fef				  -	      .byte	$ff	; ReceiveBufferSize (none zero for detection of PlusROM support)
   7727  4fef				  -	      ORG	$2FFA
   7728  4fef				  -	      RORG	$FFFA
   7729  4fef				  -	      .word	(PlusROM_API)
   7730  4fef				  -	      else
   7731  4fef				  -	      ORG	$2FFC
   7732  4fef				  -	      RORG	$FFFC
   7733  4fef				  -	      endif
   7734  4fef					      endif
   7735  4fef					      if	bankswitch == 16
   7736  4fef					      ifconst	PlusROM_functions
   7737  4ff0					      ORG	$4FF0
   7738  4ff0					      RORG	$FFF0
   7739  4ff0		       00		      .byte.b	0	; WriteToBuffer
   7740  4ff1		       00		      .byte.b	0	; WriteSendBuffer
   7741  4ff2		       00		      .byte.b	0	; ReceiveBuffer
   7742  4ff3		       ff		      .byte.b	$ff	; ReceiveBufferSize (none zero for detection of PlusROM support)
   7743  4ffa					      ORG	$4FFA
   7744  4ffa					      RORG	$FFFA
   7745  4ffa		       fe 4b		      .word.w	(PlusROM_API)
   7746  4ffc				  -	      else
   7747  4ffc				  -	      ORG	$4FFC
   7748  4ffc				  -	      RORG	$FFFC
   7749  4ffc					      endif
   7750  4ffc					      endif
   7751  4ffc				  -	      if	bankswitch == 32
   7752  4ffc				  -	      ifconst	PlusROM_functions
   7753  4ffc				  -	      ORG	$8FF0
   7754  4ffc				  -	      RORG	$FFF0
   7755  4ffc				  -	      .byte	0	; WriteToBuffer
   7756  4ffc				  -	      .byte	0	; WriteSendBuffer
   7757  4ffc				  -	      .byte	0	; ReceiveBuffer
   7758  4ffc				  -	      .byte	$ff	; ReceiveBufferSize (none zero for detection of PlusROM support)
   7759  4ffc				  -	      ORG	$8FFA
   7760  4ffc				  -	      RORG	$FFFA
   7761  4ffc				  -	      .word	(PlusROM_API)
   7762  4ffc				  -	      else
   7763  4ffc				  -	      ORG	$8FFC
   7764  4ffc				  -	      RORG	$FFFC
   7765  4ffc				  -	      endif
   7766  4ffc					      endif
   7767  4ffc				  -	      if	bankswitch == 64
   7768  4ffc				  -	      ORG	$10FF0
   7769  4ffc				  -	      RORG	$1FFF0
   7770  4ffc				  -	      lda	$ffe0	; we use wasted space to assist stella with EF format auto-detection
   7771  4ffc				  -	      ORG	$10FF8
   7772  4ffc				  -	      RORG	$1FFF8
   7773  4ffc				  -	      ifconst	superchip
   7774  4ffc				  -	      .byte	"E","F","S","C"
   7775  4ffc				  -	      else
   7776  4ffc				  -	      .byte	"E","F","E","F"
   7777  4ffc				  -	      endif
   7778  4ffc				  -	      ORG	$10FFC
   7779  4ffc				  -	      RORG	$1FFFC
   7780  4ffc					      endif
   7781  4ffc				  -	      else
   7782  4ffc				  -	      ifconst	ROM2k
   7783  4ffc				  -	      ifconst	PlusROM_functions
   7784  4ffc				  -	      ORG	$F7FA
   7785  4ffc				  -	      .word	(PlusROM_API)
   7786  4ffc				  -	      else
   7787  4ffc				  -	      ORG	$F7FC
   7788  4ffc				  -	      endif
   7789  4ffc				  -	      else
   7790  4ffc				  -	      ifconst	PlusROM_functions
   7791  4ffc				  -	      ORG	$FFFA
   7792  4ffc				  -	      .word	(PlusROM_API)
   7793  4ffc				  -	      else
   7794  4ffc				  -	      ORG	$FFFC
   7795  4ffc				  -	      endif
   7796  4ffc				  -	      endif
   7797  4ffc					      endif
   7798  4ffc		       b1 f2		      .word.w	(start & $ffff)
   7799  4ffe		       b1 f2		      .word.w	(start & $ffff)
