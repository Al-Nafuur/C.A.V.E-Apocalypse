------- FILE d:\Firmaplus\Firmaplus_intern\Atari\PlusROM\Projekte-batariBasic\CaveApocalypse\C.A.V.E. Apocalypse.bas.asm LEVEL 1 PASS 3
      1  3000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  3000 ????
      3  3000 ????				      processor	6502
------- FILE vcs.h LEVEL 2 PASS 3
      0  3000 ????				      include	"vcs.h"
      1  3000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  3000 ????
      3  3000 ????						; VCS.H
      4  3000 ????						; Version 1.05, 13/November/2003
      5  3000 ????
      6  3000 ????	       00 69	   VERSION_VCS =	105
      7  3000 ????
      8  3000 ????						; THIS IS A PRELIMINARY RELEASE OF *THE* "STANDARD" VCS.H
      9  3000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
     10  3000 ????						; PLEASE DO *NOT* REDISTRIBUTE THIS FILE!
     11  3000 ????						;
     12  3000 ????						; This file defines hardware registers and memory mapping for the
     13  3000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     14  3000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     15  3000 ????						; available at at http://www.atari2600.org/dasm
     16  3000 ????						;
     17  3000 ????						; Many thanks to the original author(s) of this file, and to everyone who has
     18  3000 ????						; contributed to understanding the Atari 2600.  If you take issue with the
     19  3000 ????						; contents, or naming of registers, please write to me (atari2600@taswegian.com)
     20  3000 ????						; with your views.  Please contribute, if you think you can improve this
     21  3000 ????						; file!
     22  3000 ????						;
     23  3000 ????						; Latest Revisions...
     24  3000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     25  3000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     26  3000 ????						;			    This will allow conditional code to verify VCS.H being
     27  3000 ????						;			    used for code assembly.
     28  3000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     29  3000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     30  3000 ????						;			 mirrored reading/writing differences.	This is more a 
     31  3000 ????						;			 readability issue, and binary compatibility with disassembled
     32  3000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     33  3000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     34  3000 ????						;			 which was broken by the use of segments in this file, as
     35  3000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     36  3000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     37  3000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     38  3000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     39  3000 ????						;						   it is safe to leave it undefined, and the base address will
     40  3000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     41  3000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     42  3000 ????						;			  - register definitions are now generated through assignment
     43  3000 ????						;			    in uninitialised segments.	This allows a changeable base
     44  3000 ????						;			    address architecture.
     45  3000 ????						; 1.0	22/MAR/2003		Initial release
     46  3000 ????
     47  3000 ????
     48  3000 ????						;-------------------------------------------------------------------------------
     49  3000 ????
     50  3000 ????						; TIA_BASE_ADDRESS
     51  3000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     52  3000 ????						; Normally 0, the base address should (externally, before including this file)
     53  3000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     54  3000 ????						; The reason is that this bankswitching scheme treats any access to locations
     55  3000 ????						; < $40 as a bankswitch.
     56  3000 ????
     57  3000 ????			  -	      IFNCONST	TIA_BASE_ADDRESS
     58  3000 ????			  -TIA_BASE_ADDRESS =	0
     59  3000 ????				      ENDIF
     60  3000 ????
     61  3000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     62  3000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     63  3000 ????						; *OR* by declaring the label before including this file, eg:
     64  3000 ????						; TIA_BASE_ADDRESS = $40
     65  3000 ????						;   include "vcs.h"
     66  3000 ????
     67  3000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     68  3000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     69  3000 ????						; for the mirrored ROM hardware registers.
     70  3000 ????
     71  3000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     72  3000 ????						; using the -D command-line switch, as required.  If the addresses are not defined, 
     73  3000 ????						; they defaut to the TIA_BASE_ADDRESS.
     74  3000 ????
     75  3000 ????			  -	      IFNCONST	TIA_BASE_READ_ADDRESS
     76  3000 ????			  -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     77  3000 ????				      ENDIF
     78  3000 ????
     79  3000 ????			  -	      IFNCONST	TIA_BASE_WRITE_ADDRESS
     80  3000 ????			  -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     81  3000 ????				      ENDIF
     82  3000 ????
     83  3000 ????						;-------------------------------------------------------------------------------
     84  3000 ????
     85 U002d ????				      SEG.U	TIA_REGISTERS_WRITE
     86 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     87 U0000
     88 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     89 U0000
     90 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     91 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     92 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     93 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     94 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     95 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     96 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     97 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     98 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     99 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
    100 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
    101 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    102 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    103 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    104 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    105 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    106 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    107 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    108 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    109 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    110 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    111 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    112 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    113 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    114 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    115 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    116 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    117 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    118 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    119 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    120 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    121 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    122 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    123 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    124 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    125 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    126 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    127 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    128 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    129 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    130 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    131 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    132 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    133 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    134 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    135 U002d
    136 U002d							;-------------------------------------------------------------------------------
    137 U002d
    138 U000e ????				      SEG.U	TIA_REGISTERS_READ
    139 U0000					      ORG	TIA_BASE_READ_ADDRESS
    140 U0000
    141 U0000							;											bit 7	 bit 6
    142 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    143 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    144 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    145 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    146 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    147 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    148 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    149 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    150 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    151 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    152 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    153 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    154 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    155 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    156 U000e
    157 U000e							;-------------------------------------------------------------------------------
    158 U000e
    159 U0298 ????				      SEG.U	RIOT
    160 U0280					      ORG	$280
    161 U0280
    162 U0280							; RIOT MEMORY MAP
    163 U0280
    164 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    165 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    166 U0281
    167 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    168 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    169 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    170 U0284		       00	   INTIM      ds	1	; $284		Timer output
    171 U0285
    172 U0285		       00	   TIMINT     ds	1	; $285
    173 U0286
    174 U0286							; Unused/undefined registers ($285-$294)
    175 U0286
    176 U0286		       00		      ds	1	; $286
    177 U0287		       00		      ds	1	; $287
    178 U0288		       00		      ds	1	; $288
    179 U0289		       00		      ds	1	; $289
    180 U028a		       00		      ds	1	; $28A
    181 U028b		       00		      ds	1	; $28B
    182 U028c		       00		      ds	1	; $28C
    183 U028d		       00		      ds	1	; $28D
    184 U028e		       00		      ds	1	; $28E
    185 U028f		       00		      ds	1	; $28F
    186 U0290		       00		      ds	1	; $290
    187 U0291		       00		      ds	1	; $291
    188 U0292		       00		      ds	1	; $292
    189 U0293		       00		      ds	1	; $293
    190 U0294
    191 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    192 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    193 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    194 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    195 U0298
    196 U0298							;-------------------------------------------------------------------------------
    197 U0298							; The following required for back-compatibility with code which does not use
    198 U0298							; segments.
    199 U0298
    200  3000 ????				      SEG
    201  3000 ????
    202  3000 ????						; EOF
------- FILE d:\Firmaplus\Firmaplus_intern\Atari\PlusROM\Projekte-batariBasic\CaveApocalypse\C.A.V.E. Apocalypse.bas.asm
------- FILE macro.h LEVEL 2 PASS 3
      0  3000 ????				      include	"macro.h"
      1  3000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  3000 ????
      3  3000 ????						; MACRO.H
      4  3000 ????						; Version 1.05, 13/NOVEMBER/2003
      5  3000 ????
      6  3000 ????	       00 69	   VERSION_MACRO =	105
      7  3000 ????
      8  3000 ????						;
      9  3000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
     10  3000 ????						; PLEASE DO *NOT* REDISTRIBUTE MODIFIED VERSIONS OF THIS FILE!
     11  3000 ????						;
     12  3000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     13  3000 ????						; It is distributed as a companion machine-specific support package
     14  3000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     15  3000 ????						; available at at http://www.atari2600.org/dasm
     16  3000 ????						;
     17  3000 ????						; Many thanks to the people who have contributed.  If you take issue with the
     18  3000 ????						; contents, or would like to add something, please write to me
     19  3000 ????						; (atari2600@taswegian.com) with your contribution.
     20  3000 ????						;
     21  3000 ????						; Latest Revisions...
     22  3000 ????						;
     23  3000 ????						; 1.05  14/NOV/2003	  - Added VERSION_MACRO equate (which will reflect 100x version #)
     24  3000 ????						;			    This will allow conditional code to verify MACRO.H being
     25  3000 ????						;			    used for code assembly.
     26  3000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     27  3000 ????						;
     28  3000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     29  3000 ????						;
     30  3000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     31  3000 ????						;			   (standardised macro for vertical synch code)
     32  3000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added. 
     33  3000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     34  3000 ????						; 1.0	22/MAR/2003		Initial release
     35  3000 ????
     36  3000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage, 
     37  3000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     38  3000 ????						;   If you do not allow illegal opcode usage, you must include this file 
     39  3000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     40  3000 ????						;   registers and require them to be defined first).
     41  3000 ????
     42  3000 ????						; Available macros...
     43  3000 ????						;   SLEEP n		 - sleep for n cycles
     44  3000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     45  3000 ????						;   CLEAN_START	 - set machine to known state on startup
     46  3000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     47  3000 ????
     48  3000 ????						;-------------------------------------------------------------------------------
     49  3000 ????						; SLEEP duration
     50  3000 ????						; Original author: Thomas Jentzsch
     51  3000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     52  3000 ????						; useful for code where precise timing is required.
     53  3000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     54  3000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     55  3000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     56  3000 ????
     57  3000 ????				      MAC	sleep
     58  3000 ????			   .CYCLES    SET	{1}
     59  3000 ????
     60  3000 ????				      IF	.CYCLES < 2
     61  3000 ????				      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     62  3000 ????				      ERR
     63  3000 ????				      ENDIF
     64  3000 ????
     65  3000 ????				      IF	.CYCLES & 1
     66  3000 ????				      IFNCONST	NO_ILLEGAL_OPCODES
     67  3000 ????				      nop	0
     68  3000 ????				      ELSE
     69  3000 ????				      bit	VSYNC
     70  3000 ????				      ENDIF
     71  3000 ????			   .CYCLES    SET	.CYCLES - 3
     72  3000 ????				      ENDIF
     73  3000 ????
     74  3000 ????				      REPEAT	.CYCLES / 2
     75  3000 ????				      nop
     76  3000 ????				      REPEND
     77  3000 ????				      ENDM		;usage: SLEEP n (n>1)
     78  3000 ????
     79  3000 ????						;-------------------------------------------------------------------------------
     80  3000 ????						; VERTICAL_SYNC
     81  3000 ????						; Original author: Manuel Polik
     82  3000 ????						; Inserts the code required for a proper 3 scannline 
     83  3000 ????						; vertical sync sequence
     84  3000 ????						;
     85  3000 ????						; Note: Alters the accumulator
     86  3000 ????						;
     87  3000 ????						; IN:
     88  3000 ????						; OUT: A = 1
     89  3000 ????
     90  3000 ????				      MAC	vertical_sync
     91  3000 ????				      LDA	#$02	; A = VSYNC enable
     92  3000 ????				      STA	WSYNC	; Finish current line
     93  3000 ????				      STA	VSYNC	; Start vertical sync
     94  3000 ????				      STA	WSYNC	; 1st line vertical sync
     95  3000 ????				      STA	WSYNC	; 2nd line vertical sync
     96  3000 ????				      LSR		; A = VSYNC disable
     97  3000 ????				      STA	WSYNC	; 3rd line vertical sync
     98  3000 ????				      STA	VSYNC	; Stop vertical sync
     99  3000 ????				      ENDM
    100  3000 ????
    101  3000 ????						;-------------------------------------------------------------------------------
    102  3000 ????						; CLEAN_START
    103  3000 ????						; Original author: Andrew Davie
    104  3000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
    105  3000 ????						; Sets stack pointer to $FF, and all registers to 0
    106  3000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    107  3000 ????						; Use as very first section of code on boot (ie: at reset)
    108  3000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    109  3000 ????
    110  3000 ????				      MAC	clean_start
    111  3000 ????				      sei
    112  3000 ????				      cld
    113  3000 ????
    114  3000 ????				      ldx	#0
    115  3000 ????				      txa
    116  3000 ????				      tay
    117  3000 ????			   .CLEAR_STACK dex
    118  3000 ????				      txs
    119  3000 ????				      pha
    120  3000 ????				      bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    121  3000 ????
    122  3000 ????				      ENDM
    123  3000 ????
    124  3000 ????						;-------------------------------------------------------
    125  3000 ????						; SET_POINTER
    126  3000 ????						; Original author: Manuel Rotschkar
    127  3000 ????						;
    128  3000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    129  3000 ????						;
    130  3000 ????						; Usage: SET_POINTER pointer, address
    131  3000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    132  3000 ????						;
    133  3000 ????						; Note: Alters the accumulator, NZ flags
    134  3000 ????						; IN 1: 2 byte RAM location reserved for pointer
    135  3000 ????						; IN 2: absolute address
    136  3000 ????
    137  3000 ????				      MAC	set_pointer
    138  3000 ????			   .POINTER   SET	{1}
    139  3000 ????			   .ADDRESS   SET	{2}
    140  3000 ????
    141  3000 ????				      LDA	#<.ADDRESS	; Get Lowbyte of Address
    142  3000 ????				      STA	.POINTER	; Store in pointer
    143  3000 ????				      LDA	#>.ADDRESS	; Get Hibyte of Address
    144  3000 ????				      STA	.POINTER+1	; Store in pointer+1
    145  3000 ????
    146  3000 ????				      ENDM
    147  3000 ????
    148  3000 ????						; EOF
------- FILE d:\Firmaplus\Firmaplus_intern\Atari\PlusROM\Projekte-batariBasic\CaveApocalypse\C.A.V.E. Apocalypse.bas.asm
------- FILE 2600basic.h LEVEL 2 PASS 3
      0  3000 ????				      include	"2600basic.h"
      1  3000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  3000 ????
      3  3000 ????				      processor	6502
------- FILE vcs.h LEVEL 3 PASS 3
      0  3000 ????				      include	"vcs.h"
      1  3000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  3000 ????
      3  3000 ????						; VCS.H
      4  3000 ????						; Version 1.05, 13/November/2003
      5  3000 ????
      6  3000 ????	       00 69	   VERSION_VCS =	105
      7  3000 ????
      8  3000 ????						; THIS IS A PRELIMINARY RELEASE OF *THE* "STANDARD" VCS.H
      9  3000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
     10  3000 ????						; PLEASE DO *NOT* REDISTRIBUTE THIS FILE!
     11  3000 ????						;
     12  3000 ????						; This file defines hardware registers and memory mapping for the
     13  3000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     14  3000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     15  3000 ????						; available at at http://www.atari2600.org/dasm
     16  3000 ????						;
     17  3000 ????						; Many thanks to the original author(s) of this file, and to everyone who has
     18  3000 ????						; contributed to understanding the Atari 2600.  If you take issue with the
     19  3000 ????						; contents, or naming of registers, please write to me (atari2600@taswegian.com)
     20  3000 ????						; with your views.  Please contribute, if you think you can improve this
     21  3000 ????						; file!
     22  3000 ????						;
     23  3000 ????						; Latest Revisions...
     24  3000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     25  3000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     26  3000 ????						;			    This will allow conditional code to verify VCS.H being
     27  3000 ????						;			    used for code assembly.
     28  3000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     29  3000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     30  3000 ????						;			 mirrored reading/writing differences.	This is more a 
     31  3000 ????						;			 readability issue, and binary compatibility with disassembled
     32  3000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     33  3000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     34  3000 ????						;			 which was broken by the use of segments in this file, as
     35  3000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     36  3000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     37  3000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     38  3000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     39  3000 ????						;						   it is safe to leave it undefined, and the base address will
     40  3000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     41  3000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     42  3000 ????						;			  - register definitions are now generated through assignment
     43  3000 ????						;			    in uninitialised segments.	This allows a changeable base
     44  3000 ????						;			    address architecture.
     45  3000 ????						; 1.0	22/MAR/2003		Initial release
     46  3000 ????
     47  3000 ????
     48  3000 ????						;-------------------------------------------------------------------------------
     49  3000 ????
     50  3000 ????						; TIA_BASE_ADDRESS
     51  3000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     52  3000 ????						; Normally 0, the base address should (externally, before including this file)
     53  3000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     54  3000 ????						; The reason is that this bankswitching scheme treats any access to locations
     55  3000 ????						; < $40 as a bankswitch.
     56  3000 ????
     57  3000 ????			  -	      IFNCONST	TIA_BASE_ADDRESS
     58  3000 ????			  -TIA_BASE_ADDRESS =	0
     59  3000 ????				      ENDIF
     60  3000 ????
     61  3000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     62  3000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     63  3000 ????						; *OR* by declaring the label before including this file, eg:
     64  3000 ????						; TIA_BASE_ADDRESS = $40
     65  3000 ????						;   include "vcs.h"
     66  3000 ????
     67  3000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     68  3000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     69  3000 ????						; for the mirrored ROM hardware registers.
     70  3000 ????
     71  3000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     72  3000 ????						; using the -D command-line switch, as required.  If the addresses are not defined, 
     73  3000 ????						; they defaut to the TIA_BASE_ADDRESS.
     74  3000 ????
     75  3000 ????			  -	      IFNCONST	TIA_BASE_READ_ADDRESS
     76  3000 ????			  -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     77  3000 ????				      ENDIF
     78  3000 ????
     79  3000 ????			  -	      IFNCONST	TIA_BASE_WRITE_ADDRESS
     80  3000 ????			  -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     81  3000 ????				      ENDIF
     82  3000 ????
     83  3000 ????						;-------------------------------------------------------------------------------
     84  3000 ????
     85 U002d					      SEG.U	TIA_REGISTERS_WRITE
     86 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     87 U0000
     88 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     89 U0000
     90 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     91 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     92 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     93 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     94 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     95 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     96 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     97 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     98 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     99 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
    100 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
    101 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    102 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    103 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    104 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    105 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    106 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    107 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    108 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    109 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    110 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    111 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    112 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    113 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    114 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    115 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    116 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    117 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    118 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    119 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    120 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    121 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    122 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    123 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    124 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    125 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    126 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    127 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    128 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    129 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    130 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    131 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    132 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    133 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    134 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    135 U002d
    136 U002d							;-------------------------------------------------------------------------------
    137 U002d
    138 U000e					      SEG.U	TIA_REGISTERS_READ
    139 U0000					      ORG	TIA_BASE_READ_ADDRESS
    140 U0000
    141 U0000							;											bit 7	 bit 6
    142 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    143 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    144 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    145 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    146 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    147 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    148 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    149 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    150 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    151 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    152 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    153 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    154 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    155 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    156 U000e
    157 U000e							;-------------------------------------------------------------------------------
    158 U000e
    159 U0298					      SEG.U	RIOT
    160 U0280					      ORG	$280
    161 U0280
    162 U0280							; RIOT MEMORY MAP
    163 U0280
    164 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    165 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    166 U0281
    167 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    168 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    169 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    170 U0284		       00	   INTIM      ds	1	; $284		Timer output
    171 U0285
    172 U0285		       00	   TIMINT     ds	1	; $285
    173 U0286
    174 U0286							; Unused/undefined registers ($285-$294)
    175 U0286
    176 U0286		       00		      ds	1	; $286
    177 U0287		       00		      ds	1	; $287
    178 U0288		       00		      ds	1	; $288
    179 U0289		       00		      ds	1	; $289
    180 U028a		       00		      ds	1	; $28A
    181 U028b		       00		      ds	1	; $28B
    182 U028c		       00		      ds	1	; $28C
    183 U028d		       00		      ds	1	; $28D
    184 U028e		       00		      ds	1	; $28E
    185 U028f		       00		      ds	1	; $28F
    186 U0290		       00		      ds	1	; $290
    187 U0291		       00		      ds	1	; $291
    188 U0292		       00		      ds	1	; $292
    189 U0293		       00		      ds	1	; $293
    190 U0294
    191 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    192 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    193 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    194 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    195 U0298
    196 U0298							;-------------------------------------------------------------------------------
    197 U0298							; The following required for back-compatibility with code which does not use
    198 U0298							; segments.
    199 U0298
    200  3000 ????				      SEG
    201  3000 ????
    202  3000 ????						; EOF
------- FILE 2600basic.h
------- FILE macro.h LEVEL 3 PASS 3
      0  3000 ????				      include	"macro.h"
      1  3000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  3000 ????
      3  3000 ????						; MACRO.H
      4  3000 ????						; Version 1.05, 13/NOVEMBER/2003
      5  3000 ????
      6  3000 ????	       00 69	   VERSION_MACRO =	105
      7  3000 ????
      8  3000 ????						;
      9  3000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
     10  3000 ????						; PLEASE DO *NOT* REDISTRIBUTE MODIFIED VERSIONS OF THIS FILE!
     11  3000 ????						;
     12  3000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     13  3000 ????						; It is distributed as a companion machine-specific support package
     14  3000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     15  3000 ????						; available at at http://www.atari2600.org/dasm
     16  3000 ????						;
     17  3000 ????						; Many thanks to the people who have contributed.  If you take issue with the
     18  3000 ????						; contents, or would like to add something, please write to me
     19  3000 ????						; (atari2600@taswegian.com) with your contribution.
     20  3000 ????						;
     21  3000 ????						; Latest Revisions...
     22  3000 ????						;
     23  3000 ????						; 1.05  14/NOV/2003	  - Added VERSION_MACRO equate (which will reflect 100x version #)
     24  3000 ????						;			    This will allow conditional code to verify MACRO.H being
     25  3000 ????						;			    used for code assembly.
     26  3000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     27  3000 ????						;
     28  3000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     29  3000 ????						;
     30  3000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     31  3000 ????						;			   (standardised macro for vertical synch code)
     32  3000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added. 
     33  3000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     34  3000 ????						; 1.0	22/MAR/2003		Initial release
     35  3000 ????
     36  3000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage, 
     37  3000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     38  3000 ????						;   If you do not allow illegal opcode usage, you must include this file 
     39  3000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     40  3000 ????						;   registers and require them to be defined first).
     41  3000 ????
     42  3000 ????						; Available macros...
     43  3000 ????						;   SLEEP n		 - sleep for n cycles
     44  3000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     45  3000 ????						;   CLEAN_START	 - set machine to known state on startup
     46  3000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     47  3000 ????
     48  3000 ????						;-------------------------------------------------------------------------------
     49  3000 ????						; SLEEP duration
     50  3000 ????						; Original author: Thomas Jentzsch
     51  3000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     52  3000 ????						; useful for code where precise timing is required.
     53  3000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     54  3000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     55  3000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     56  3000 ????
     57  3000 ????				      MAC	sleep
     58  3000 ????			   .CYCLES    SET	{1}
     59  3000 ????
     60  3000 ????				      IF	.CYCLES < 2
     61  3000 ????				      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     62  3000 ????				      ERR
     63  3000 ????				      ENDIF
     64  3000 ????
     65  3000 ????				      IF	.CYCLES & 1
     66  3000 ????				      IFNCONST	NO_ILLEGAL_OPCODES
     67  3000 ????				      nop	0
     68  3000 ????				      ELSE
     69  3000 ????				      bit	VSYNC
     70  3000 ????				      ENDIF
     71  3000 ????			   .CYCLES    SET	.CYCLES - 3
     72  3000 ????				      ENDIF
     73  3000 ????
     74  3000 ????				      REPEAT	.CYCLES / 2
     75  3000 ????				      nop
     76  3000 ????				      REPEND
     77  3000 ????				      ENDM		;usage: SLEEP n (n>1)
     78  3000 ????
     79  3000 ????						;-------------------------------------------------------------------------------
     80  3000 ????						; VERTICAL_SYNC
     81  3000 ????						; Original author: Manuel Polik
     82  3000 ????						; Inserts the code required for a proper 3 scannline 
     83  3000 ????						; vertical sync sequence
     84  3000 ????						;
     85  3000 ????						; Note: Alters the accumulator
     86  3000 ????						;
     87  3000 ????						; IN:
     88  3000 ????						; OUT: A = 1
     89  3000 ????
     90  3000 ????				      MAC	vertical_sync
     91  3000 ????				      LDA	#$02	; A = VSYNC enable
     92  3000 ????				      STA	WSYNC	; Finish current line
     93  3000 ????				      STA	VSYNC	; Start vertical sync
     94  3000 ????				      STA	WSYNC	; 1st line vertical sync
     95  3000 ????				      STA	WSYNC	; 2nd line vertical sync
     96  3000 ????				      LSR		; A = VSYNC disable
     97  3000 ????				      STA	WSYNC	; 3rd line vertical sync
     98  3000 ????				      STA	VSYNC	; Stop vertical sync
     99  3000 ????				      ENDM
    100  3000 ????
    101  3000 ????						;-------------------------------------------------------------------------------
    102  3000 ????						; CLEAN_START
    103  3000 ????						; Original author: Andrew Davie
    104  3000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
    105  3000 ????						; Sets stack pointer to $FF, and all registers to 0
    106  3000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    107  3000 ????						; Use as very first section of code on boot (ie: at reset)
    108  3000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    109  3000 ????
    110  3000 ????				      MAC	clean_start
    111  3000 ????				      sei
    112  3000 ????				      cld
    113  3000 ????
    114  3000 ????				      ldx	#0
    115  3000 ????				      txa
    116  3000 ????				      tay
    117  3000 ????			   .CLEAR_STACK dex
    118  3000 ????				      txs
    119  3000 ????				      pha
    120  3000 ????				      bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    121  3000 ????
    122  3000 ????				      ENDM
    123  3000 ????
    124  3000 ????						;-------------------------------------------------------
    125  3000 ????						; SET_POINTER
    126  3000 ????						; Original author: Manuel Rotschkar
    127  3000 ????						;
    128  3000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    129  3000 ????						;
    130  3000 ????						; Usage: SET_POINTER pointer, address
    131  3000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    132  3000 ????						;
    133  3000 ????						; Note: Alters the accumulator, NZ flags
    134  3000 ????						; IN 1: 2 byte RAM location reserved for pointer
    135  3000 ????						; IN 2: absolute address
    136  3000 ????
    137  3000 ????				      MAC	set_pointer
    138  3000 ????			   .POINTER   SET	{1}
    139  3000 ????			   .ADDRESS   SET	{2}
    140  3000 ????
    141  3000 ????				      LDA	#<.ADDRESS	; Get Lowbyte of Address
    142  3000 ????				      STA	.POINTER	; Store in pointer
    143  3000 ????				      LDA	#>.ADDRESS	; Get Hibyte of Address
    144  3000 ????				      STA	.POINTER+1	; Store in pointer+1
    145  3000 ????
    146  3000 ????				      ENDM
    147  3000 ????
    148  3000 ????						; EOF
------- FILE 2600basic.h
------- FILE 2600basic_variable_redefs.h LEVEL 3 PASS 3
      0  3000 ????				      include	"2600basic_variable_redefs.h"
      1  3000 ????						; This file contains variable mapping and other information for the current project.
      2  3000 ????
      3  3000 ????	       00 23	   bscode_length =	35
      4  3000 ????	       00 1d	   _SD_Touch_Enemy_length =	.skipL0440-_SD_Touch_Enemy
      5  3000 ????
      6  3000 ????	       00 21	   _SD_Shoot_Enemy_length =	.skipL0439-_SD_Shoot_Enemy
      7  3000 ????
      8  3000 ????	       00 45	   _SD_Shoot_Miss_length =	.skipL0438-_SD_Shoot_Miss
      9  3000 ????
     10  3000 ????	       00 35	   _SD_Shot_Wall_length =	.skipL0437-_SD_Shot_Wall
     11  3000 ????
     12  3000 ????	       f0 6f	   w_extra_wall_startpos =	w111
     13  3000 ????
     14  3000 ????	       f0 ef	   r_extra_wall_startpos =	r111
     15  3000 ????
     16  3000 ????	       f0 6e	   w_extra_wall_type =	w110
     17  3000 ????
     18  3000 ????	       f0 ee	   r_extra_wall_type =	r110
     19  3000 ????
     20  3000 ????	       f0 6d	   w_extra_wall_width =	w109
     21  3000 ????
     22  3000 ????	       f0 ed	   r_extra_wall_width =	r109
     23  3000 ????
     24  3000 ????	       f0 6c	   w_roommate_x_startpos =	w108
     25  3000 ????
     26  3000 ????	       f0 ec	   r_roommate_x_startpos =	r108
     27  3000 ????
     28  3000 ????	       f0 6b	   w_roommate_y_startpos =	w107
     29  3000 ????
     30  3000 ????	       f0 eb	   r_roommate_y_startpos =	r107
     31  3000 ????
     32  3000 ????	       f0 6a	   w_roommate_type_and_range =	w106
     33  3000 ????
     34  3000 ????	       f0 ea	   r_roommate_type_and_range =	r106
     35  3000 ????
     36  3000 ????	       f0 69	   w_room_color_bottom =	w105
     37  3000 ????
     38  3000 ????	       f0 e9	   r_room_color_bottom =	r105
     39  3000 ????
     40  3000 ????	       f0 65	   w_room_color_middle =	w101
     41  3000 ????
     42  3000 ????	       f0 e5	   r_room_color_middle =	r101
     43  3000 ????
     44  3000 ????	       f0 64	   w_room_color_top =	w100
     45  3000 ????
     46  3000 ????	       f0 e4	   r_room_color_top =	r100
     47  3000 ????
     48  3000 ????	       f0 64	   w_room_definition_start =	w100
     49  3000 ????
     50  3000 ????	       00 ec	   _Bit7_M0_Moving =	y
     51  3000 ????
     52  3000 ????	       00 ec	   _Bit6_Flip_P0 =	y
     53  3000 ????
     54  3000 ????	       00 ec	   _Bit5_Request_Pending =	y
     55  3000 ????
     56  3000 ????	       00 ec	   _Bit4_Game_Over =	y
     57  3000 ????
     58  3000 ????	       00 ec	   _Bit3_Ball_Shot_Moving =	y
     59  3000 ????
     60  3000 ????	       00 ec	   _Bit1_Wall_Dir =	y
     61  3000 ????
     62  3000 ????	       00 ec	   _Bit0_roommate_Dir =	y
     63  3000 ????
     64  3000 ????	       00 ec	   _Bit_Game_State =	y
     65  3000 ????
     66  3000 ????	       00 86	   P1y_position =	player1y
     67  3000 ????	       00 e9	   P1y_velocity =	v
     68  3000 ????	       00 91	   M0y_position =	missile0y
     69  3000 ????	       00 e6	   M0y_velocity =	s
     70  3000 ????	       00 89	   Bally_position =	bally
     71  3000 ????	       00 e3	   Bally_velocity =	p
     72  3000 ????	       00 df	   roommate_type =	l
     73  3000 ????
     74  3000 ????	       00 de	   roommate_move_x =	k
     75  3000 ????
     76  3000 ????	       00 dd	   extra_wall_move_x =	j
     77  3000 ????
     78  3000 ????	       00 dc	   _Ch0_Counter =	i
     79  3000 ????
     80  3000 ????	       00 db	   _Ch0_Duration =	h
     81  3000 ????
     82  3000 ????	       00 da	   _Ch0_Sound =	g
     83  3000 ????
     84  3000 ????	       00 d9	   P1_facing  =	f
     85  3000 ????
     86  3000 ????	       00 d8	   _Bit3_P1_Dir_Right =	e
     87  3000 ????
     88  3000 ????	       00 d8	   _Bit2_P1_Dir_Left =	e
     89  3000 ????
     90  3000 ????	       00 d8	   _Bit1_P1_Dir_Down =	e
     91  3000 ????
     92  3000 ????	       00 d8	   _Bit0_P1_Dir_Up =	e
     93  3000 ????
     94  3000 ????	       00 d8	   _BitOp_P1_Dir =	e
     95  3000 ????
     96  3000 ????	       00 d7	   _Bit3_M0_Dir_Right =	d
     97  3000 ????
     98  3000 ????	       00 d7	   _Bit2_M0_Dir_Left =	d
     99  3000 ????
    100  3000 ????	       00 d7	   _Bit1_M0_Dir_Down =	d
    101  3000 ????
    102  3000 ????	       00 d7	   _Bit0_M0_Dir_Up =	d
    103  3000 ????
    104  3000 ????	       00 d7	   _BitOp_M0_Dir =	d
    105  3000 ????
    106  3000 ????	       00 d6	   _Bit3_Ball_Shot_Dir_Right2 =	c
    107  3000 ????
    108  3000 ????	       00 d6	   _Bit2_Ball_Shot_Dir_Right1 =	c
    109  3000 ????
    110  3000 ????	       00 d6	   _Bit1_Ball_Shot_Dir_Left2 =	c
    111  3000 ????
    112  3000 ????	       00 d6	   _Bit0_Ball_Shot_Dir_Left1 =	c
    113  3000 ????
    114  3000 ????	       00 d6	   _BitOp_Ball_Shot_Dir =	c
    115  3000 ????
    116  3000 ????	       00 d5	   frame_counter =	b
    117  3000 ????
    118  3000 ????	       00 d4	   delay_counter =	a
    119  3000 ????
    120  3000 ????	       00 95	   _sc3       =	score + 2
    121  3000 ????
    122  3000 ????	       00 94	   _sc2       =	score + 1
    123  3000 ????
    124  3000 ????	       00 93	   _sc1       =	score
    125  3000 ????
    126  3000 ????	       00 2e	   _FE	      =	$2E
    127  3000 ????
    128  3000 ????	       00 2c	   _FC	      =	$2C
    129  3000 ????
    130  3000 ????	       00 2a	   _FA	      =	$2A
    131  3000 ????
    132  3000 ????	       00 28	   _F8	      =	$28
    133  3000 ????
    134  3000 ????	       00 26	   _F6	      =	$26
    135  3000 ????
    136  3000 ????	       00 24	   _F4	      =	$24
    137  3000 ????
    138  3000 ????	       00 22	   _F2	      =	$22
    139  3000 ????
    140  3000 ????	       00 20	   _F0	      =	$20
    141  3000 ????
    142  3000 ????	       00 2e	   _EE	      =	$2E
    143  3000 ????
    144  3000 ????	       00 2c	   _EC	      =	$2C
    145  3000 ????
    146  3000 ????	       00 2a	   _EA	      =	$2A
    147  3000 ????
    148  3000 ????	       00 28	   _E8	      =	$28
    149  3000 ????
    150  3000 ????	       00 26	   _E6	      =	$26
    151  3000 ????
    152  3000 ????	       00 24	   _E4	      =	$24
    153  3000 ????
    154  3000 ????	       00 22	   _E2	      =	$22
    155  3000 ????
    156  3000 ????	       00 20	   _E0	      =	$20
    157  3000 ????
    158  3000 ????	       00 3e	   _DE	      =	$3E
    159  3000 ????
    160  3000 ????	       00 3c	   _DC	      =	$3C
    161  3000 ????
    162  3000 ????	       00 3a	   _DA	      =	$3A
    163  3000 ????
    164  3000 ????	       00 38	   _D8	      =	$38
    165  3000 ????
    166  3000 ????	       00 36	   _D6	      =	$36
    167  3000 ????
    168  3000 ????	       00 34	   _D4	      =	$34
    169  3000 ????
    170  3000 ????	       00 32	   _D2	      =	$32
    171  3000 ????
    172  3000 ????	       00 30	   _D0	      =	$30
    173  3000 ????
    174  3000 ????	       00 5e	   _CE	      =	$5E
    175  3000 ????
    176  3000 ????	       00 5c	   _CC	      =	$5C
    177  3000 ????
    178  3000 ????	       00 5a	   _CA	      =	$5A
    179  3000 ????
    180  3000 ????	       00 58	   _C8	      =	$58
    181  3000 ????
    182  3000 ????	       00 56	   _C6	      =	$56
    183  3000 ????
    184  3000 ????	       00 54	   _C4	      =	$54
    185  3000 ????
    186  3000 ????	       00 52	   _C2	      =	$52
    187  3000 ????
    188  3000 ????	       00 50	   _C0	      =	$50
    189  3000 ????
    190  3000 ????	       00 7e	   _BE	      =	$7E
    191  3000 ????
    192  3000 ????	       00 7c	   _BC	      =	$7C
    193  3000 ????
    194  3000 ????	       00 7a	   _BA	      =	$7A
    195  3000 ????
    196  3000 ????	       00 78	   _B8	      =	$78
    197  3000 ????
    198  3000 ????	       00 76	   _B6	      =	$76
    199  3000 ????
    200  3000 ????	       00 74	   _B4	      =	$74
    201  3000 ????
    202  3000 ????	       00 72	   _B2	      =	$72
    203  3000 ????
    204  3000 ????	       00 70	   _B0	      =	$70
    205  3000 ????
    206  3000 ????	       00 9e	   _AE	      =	$9E
    207  3000 ????
    208  3000 ????	       00 9c	   _AC	      =	$9C
    209  3000 ????
    210  3000 ????	       00 9a	   _AA	      =	$9A
    211  3000 ????
    212  3000 ????	       00 98	   _A8	      =	$98
    213  3000 ????
    214  3000 ????	       00 96	   _A6	      =	$96
    215  3000 ????
    216  3000 ????	       00 94	   _A4	      =	$94
    217  3000 ????
    218  3000 ????	       00 92	   _A2	      =	$92
    219  3000 ????
    220  3000 ????	       00 90	   _A0	      =	$90
    221  3000 ????
    222  3000 ????	       00 be	   _9E	      =	$BE
    223  3000 ????
    224  3000 ????	       00 bc	   _9C	      =	$BC
    225  3000 ????
    226  3000 ????	       00 ba	   _9A	      =	$BA
    227  3000 ????
    228  3000 ????	       00 b8	   _98	      =	$B8
    229  3000 ????
    230  3000 ????	       00 b6	   _96	      =	$B6
    231  3000 ????
    232  3000 ????	       00 b4	   _94	      =	$B4
    233  3000 ????
    234  3000 ????	       00 b2	   _92	      =	$B2
    235  3000 ????
    236  3000 ????	       00 b0	   _90	      =	$B0
    237  3000 ????
    238  3000 ????	       00 de	   _8E	      =	$DE
    239  3000 ????
    240  3000 ????	       00 dc	   _8C	      =	$DC
    241  3000 ????
    242  3000 ????	       00 da	   _8A	      =	$DA
    243  3000 ????
    244  3000 ????	       00 d8	   _88	      =	$D8
    245  3000 ????
    246  3000 ????	       00 d6	   _86	      =	$D6
    247  3000 ????
    248  3000 ????	       00 d4	   _84	      =	$D4
    249  3000 ????
    250  3000 ????	       00 d2	   _82	      =	$D2
    251  3000 ????
    252  3000 ????	       00 d0	   _80	      =	$D0
    253  3000 ????
    254  3000 ????	       00 ce	   _7E	      =	$CE
    255  3000 ????
    256  3000 ????	       00 cc	   _7C	      =	$CC
    257  3000 ????
    258  3000 ????	       00 ca	   _7A	      =	$CA
    259  3000 ????
    260  3000 ????	       00 c8	   _78	      =	$C8
    261  3000 ????
    262  3000 ????	       00 c6	   _76	      =	$C6
    263  3000 ????
    264  3000 ????	       00 c4	   _74	      =	$C4
    265  3000 ????
    266  3000 ????	       00 c2	   _72	      =	$C2
    267  3000 ????
    268  3000 ????	       00 c0	   _70	      =	$C0
    269  3000 ????
    270  3000 ????	       00 ae	   _6E	      =	$AE
    271  3000 ????
    272  3000 ????	       00 ac	   _6C	      =	$AC
    273  3000 ????
    274  3000 ????	       00 aa	   _6A	      =	$AA
    275  3000 ????
    276  3000 ????	       00 a8	   _68	      =	$A8
    277  3000 ????
    278  3000 ????	       00 a6	   _66	      =	$A6
    279  3000 ????
    280  3000 ????	       00 a4	   _64	      =	$A4
    281  3000 ????
    282  3000 ????	       00 a2	   _62	      =	$A2
    283  3000 ????
    284  3000 ????	       00 a0	   _60	      =	$A0
    285  3000 ????
    286  3000 ????	       00 8e	   _5E	      =	$8E
    287  3000 ????
    288  3000 ????	       00 8c	   _5C	      =	$8C
    289  3000 ????
    290  3000 ????	       00 8a	   _5A	      =	$8A
    291  3000 ????
    292  3000 ????	       00 88	   _58	      =	$88
    293  3000 ????
    294  3000 ????	       00 86	   _56	      =	$86
    295  3000 ????
    296  3000 ????	       00 84	   _54	      =	$84
    297  3000 ????
    298  3000 ????	       00 82	   _52	      =	$82
    299  3000 ????
    300  3000 ????	       00 80	   _50	      =	$80
    301  3000 ????
    302  3000 ????	       00 6e	   _4E	      =	$6E
    303  3000 ????
    304  3000 ????	       00 6c	   _4C	      =	$6C
    305  3000 ????
    306  3000 ????	       00 6a	   _4A	      =	$6A
    307  3000 ????
    308  3000 ????	       00 68	   _48	      =	$68
    309  3000 ????
    310  3000 ????	       00 66	   _46	      =	$66
    311  3000 ????
    312  3000 ????	       00 64	   _44	      =	$64
    313  3000 ????
    314  3000 ????	       00 62	   _42	      =	$62
    315  3000 ????
    316  3000 ????	       00 60	   _40	      =	$60
    317  3000 ????
    318  3000 ????	       00 4e	   _3E	      =	$4E
    319  3000 ????
    320  3000 ????	       00 4c	   _3C	      =	$4C
    321  3000 ????
    322  3000 ????	       00 4a	   _3A	      =	$4A
    323  3000 ????
    324  3000 ????	       00 48	   _38	      =	$48
    325  3000 ????
    326  3000 ????	       00 46	   _36	      =	$46
    327  3000 ????
    328  3000 ????	       00 44	   _34	      =	$44
    329  3000 ????
    330  3000 ????	       00 42	   _32	      =	$42
    331  3000 ????
    332  3000 ????	       00 40	   _30	      =	$40
    333  3000 ????
    334  3000 ????	       00 4e	   _2E	      =	$4E
    335  3000 ????
    336  3000 ????	       00 4c	   _2C	      =	$4C
    337  3000 ????
    338  3000 ????	       00 4a	   _2A	      =	$4A
    339  3000 ????
    340  3000 ????	       00 48	   _28	      =	$48
    341  3000 ????
    342  3000 ????	       00 46	   _26	      =	$46
    343  3000 ????
    344  3000 ????	       00 44	   _24	      =	$44
    345  3000 ????
    346  3000 ????	       00 42	   _22	      =	$42
    347  3000 ????
    348  3000 ????	       00 40	   _20	      =	$40
    349  3000 ????
    350  3000 ????	       00 2e	   _1E	      =	$2E
    351  3000 ????
    352  3000 ????	       00 2c	   _1C	      =	$2C
    353  3000 ????
    354  3000 ????	       00 2a	   _1A	      =	$2A
    355  3000 ????
    356  3000 ????	       00 28	   _18	      =	$28
    357  3000 ????
    358  3000 ????	       00 26	   _16	      =	$26
    359  3000 ????
    360  3000 ????	       00 24	   _14	      =	$24
    361  3000 ????
    362  3000 ????	       00 22	   _12	      =	$22
    363  3000 ????
    364  3000 ????	       00 20	   _10	      =	$20
    365  3000 ????
    366  3000 ????	       00 0e	   _0E	      =	$0E
    367  3000 ????
    368  3000 ????	       00 0c	   _0C	      =	$0C
    369  3000 ????
    370  3000 ????	       00 0a	   _0A	      =	$0A
    371  3000 ????
    372  3000 ????	       00 08	   _08	      =	$08
    373  3000 ????
    374  3000 ????	       00 06	   _06	      =	$06
    375  3000 ????
    376  3000 ????	       00 04	   _04	      =	$04
    377  3000 ????
    378  3000 ????	       00 02	   _02	      =	$02
    379  3000 ????
    380  3000 ????	       00 00	   _00	      =	$00
    381  3000 ????
    382  3000 ????	       00 87	   req_level_reset =	135
    383  3000 ????
    384  3000 ????	       00 86	   req_move_down =	134
    385  3000 ????
    386  3000 ????	       00 85	   req_move_right =	133
    387  3000 ????
    388  3000 ????	       00 84	   req_move_up =	132
    389  3000 ????
    390  3000 ????	       00 83	   req_move_left =	131
    391  3000 ????
    392  3000 ????	       00 82	   req_game_over =	130
    393  3000 ????
    394  3000 ????	       00 81	   req_level_up =	129
    395  3000 ????
    396  3000 ????	       00 80	   req_load   =	128
    397  3000 ????
    398  3000 ????	       00 17	   response_size_minus_1 =	23
    399  3000 ????
    400  3000 ????	       00 08	   scback     =	#$08
    401  3000 ????
    402  3000 ????	       00 94	   _M_Edge_Right =	148
    403  3000 ????
    404  3000 ????	       00 0e	   _M_Edge_Left =	14
    405  3000 ????
    406  3000 ????	       00 58	   _M_Edge_Bottom =	88
    407  3000 ????
    408  3000 ????	       00 02	   _M_Edge_Top =	2
    409  3000 ????
    410  3000 ????	       00 4c	   player_max_y =	76
    411  3000 ????
    412  3000 ????	       00 02	   player_min_y =	2
    413  3000 ????
    414  3000 ????	       00 86	   player_max_x =	134
    415  3000 ????
    416  3000 ????	       00 0a	   player_min_x =	10
    417  3000 ????
    418  3000 ????	       00 01	   pfscore    =	1
    419  3000 ????
    420  3000 ????	       00 04	   pfres      =	4
    421  3000 ????
    422  3000 ????	       00 01	   superchip  =	1
    423  3000 ????	       00 01	   bs_mask    =	1
    424  3000 ????	       00 08	   bankswitch =	8
    425  3000 ????	       1f f8	   bankswitch_hotspot =	$1FF8
    426  3000 ????	       00 01	   PFcolors   =	1
    427  3000 ????	       00 01	   player1colors =	1
------- FILE 2600basic.h
      7  3000 ????
      8  3000 ????	       00 80	   player0x   =	$80
      9  3000 ????	       00 81	   player1x   =	$81
     10  3000 ????	       00 82	   missile0x  =	$82
     11  3000 ????	       00 83	   missile1x  =	$83
     12  3000 ????	       00 84	   ballx      =	$84
     13  3000 ????
     14  3000 ????	       00 85	   objecty    =	$85
     15  3000 ????	       00 85	   player0y   =	$85
     16  3000 ????	       00 86	   player1y   =	$86
     17  3000 ????	       00 87	   missile1height =	$87
     18  3000 ????	       00 88	   missile1y  =	$88
     19  3000 ????	       00 89	   bally      =	$89
     20  3000 ????
     21  3000 ????	       00 87	   player1color =	$87	; replaces missile 1
     22  3000 ????
     23  3000 ????	       00 8a	   player0pointer =	$8A	;uses $8A-$8B
     24  3000 ????	       00 8a	   player0pointerlo =	$8A
     25  3000 ????	       00 8b	   player0pointerhi =	$8B
     26  3000 ????	       00 8c	   player1pointer =	$8C	; $8C-$8D
     27  3000 ????	       00 8c	   player1pointerlo =	$8C
     28  3000 ????	       00 8d	   player1pointerhi =	$8D
     29  3000 ????
     30  3000 ????	       00 8e	   player0height =	$8E
     31  3000 ????	       00 8f	   player1height =	$8F
     32  3000 ????	       00 90	   missile0height =	$90
     33  3000 ????	       00 91	   missile0y  =	$91
     34  3000 ????	       00 92	   ballheight =	$92
     35  3000 ????
     36  3000 ????	       00 90	   currentpaddle =	$90	; replaces missile 0 (and can't be used with playercolor)
     37  3000 ????	       00 91	   paddle     =	$91	; replaces missile 0
     38  3000 ????	       00 82	   player0colorstore =	$82	; replaces missile 0
     39  3000 ????	       00 90	   player0color =	$90	; replaces missile 0
     40  3000 ????
     41  3000 ????	       00 93	   score      =	$93	; $93-$95
     42  3000 ????	       00 96	   scorepointers =	$96	; $96-$9B = 6 bytes
     43  3000 ????	       00 9c	   temp1      =	$9C	;used by kernel.  can be used in program too, but
     44  3000 ????	       00 9d	   temp2      =	$9D	;are obliterated when drawscreen is called.
     45  3000 ????	       00 9e	   temp3      =	$9E
     46  3000 ????	       00 9f	   temp4      =	$9F
     47  3000 ????	       00 a0	   temp5      =	$A0
     48  3000 ????	       00 a1	   temp6      =	$A1
     49  3000 ????
     50  3000 ????	       00 a2	   rand       =	$A2
     51  3000 ????	       00 a3	   scorecolor =	$A3
     52  3000 ????
     53  3000 ????	       00 a4	   var0       =	$A4
     54  3000 ????	       00 a5	   var1       =	$A5
     55  3000 ????	       00 a6	   var2       =	$A6
     56  3000 ????	       00 a7	   var3       =	$A7
     57  3000 ????	       00 a8	   var4       =	$A8
     58  3000 ????	       00 a9	   var5       =	$A9
     59  3000 ????	       00 aa	   var6       =	$AA
     60  3000 ????	       00 ab	   var7       =	$AB
     61  3000 ????	       00 ac	   var8       =	$AC
     62  3000 ????	       00 ad	   var9       =	$AD
     63  3000 ????	       00 ae	   var10      =	$AE
     64  3000 ????	       00 af	   var11      =	$AF
     65  3000 ????	       00 b0	   var12      =	$B0
     66  3000 ????	       00 b1	   var13      =	$B1
     67  3000 ????	       00 b2	   var14      =	$B2
     68  3000 ????	       00 b3	   var15      =	$B3
     69  3000 ????	       00 b4	   var16      =	$B4
     70  3000 ????	       00 b5	   var17      =	$B5
     71  3000 ????	       00 b6	   var18      =	$B6
     72  3000 ????	       00 b7	   var19      =	$B7
     73  3000 ????	       00 b8	   var20      =	$B8
     74  3000 ????	       00 b9	   var21      =	$B9
     75  3000 ????	       00 ba	   var22      =	$BA
     76  3000 ????	       00 bb	   var23      =	$BB
     77  3000 ????	       00 bc	   var24      =	$BC
     78  3000 ????	       00 bd	   var25      =	$BD
     79  3000 ????	       00 be	   var26      =	$BE
     80  3000 ????	       00 bf	   var27      =	$BF
     81  3000 ????	       00 c0	   var28      =	$C0
     82  3000 ????	       00 c1	   var29      =	$C1
     83  3000 ????	       00 c2	   var30      =	$C2
     84  3000 ????	       00 c3	   var31      =	$C3
     85  3000 ????	       00 c4	   var32      =	$C4
     86  3000 ????	       00 c5	   var33      =	$C5
     87  3000 ????	       00 c6	   var34      =	$C6
     88  3000 ????	       00 c7	   var35      =	$C7
     89  3000 ????	       00 c8	   var36      =	$C8
     90  3000 ????	       00 c9	   var37      =	$C9
     91  3000 ????	       00 ca	   var38      =	$CA
     92  3000 ????	       00 cb	   var39      =	$CB
     93  3000 ????	       00 cc	   var40      =	$CC
     94  3000 ????	       00 cd	   var41      =	$CD
     95  3000 ????	       00 ce	   var42      =	$CE
     96  3000 ????	       00 cf	   var43      =	$CF
     97  3000 ????	       00 d0	   var44      =	$D0
     98  3000 ????	       00 d1	   var45      =	$D1
     99  3000 ????	       00 d2	   var46      =	$D2
    100  3000 ????	       00 d3	   var47      =	$D3
    101  3000 ????
    102  3000 ????	       00 d4	   A	      =	$d4
    103  3000 ????	       00 d4	   a	      =	$d4
    104  3000 ????	       00 d5	   B	      =	$d5
    105  3000 ????	       00 d5	   b	      =	$d5
    106  3000 ????	       00 d6	   C	      =	$d6
    107  3000 ????	       00 d6	   c	      =	$d6
    108  3000 ????	       00 d7	   D	      =	$d7
    109  3000 ????	       00 d7	   d	      =	$d7
    110  3000 ????	       00 d8	   E	      =	$d8
    111  3000 ????	       00 d8	   e	      =	$d8
    112  3000 ????	       00 d9	   F	      =	$d9
    113  3000 ????	       00 d9	   f	      =	$d9
    114  3000 ????	       00 da	   G	      =	$da
    115  3000 ????	       00 da	   g	      =	$da
    116  3000 ????	       00 db	   H	      =	$db
    117  3000 ????	       00 db	   h	      =	$db
    118  3000 ????	       00 dc	   I	      =	$dc
    119  3000 ????	       00 dc	   i	      =	$dc
    120  3000 ????	       00 dd	   J	      =	$dd
    121  3000 ????	       00 dd	   j	      =	$dd
    122  3000 ????	       00 de	   K	      =	$de
    123  3000 ????	       00 de	   k	      =	$de
    124  3000 ????	       00 df	   L	      =	$df
    125  3000 ????	       00 df	   l	      =	$df
    126  3000 ????	       00 e0	   M	      =	$e0
    127  3000 ????	       00 e0	   m	      =	$e0
    128  3000 ????	       00 e1	   N	      =	$e1
    129  3000 ????	       00 e1	   n	      =	$e1
    130  3000 ????	       00 e2	   O	      =	$e2
    131  3000 ????	       00 e2	   o	      =	$e2
    132  3000 ????	       00 e3	   P	      =	$e3
    133  3000 ????	       00 e3	   p	      =	$e3
    134  3000 ????	       00 e4	   Q	      =	$e4
    135  3000 ????	       00 e4	   q	      =	$e4
    136  3000 ????	       00 e5	   R	      =	$e5
    137  3000 ????	       00 e5	   r	      =	$e5
    138  3000 ????	       00 e6	   S	      =	$e6
    139  3000 ????	       00 e6	   s	      =	$e6
    140  3000 ????	       00 e7	   T	      =	$e7
    141  3000 ????	       00 e7	   t	      =	$e7
    142  3000 ????	       00 e8	   U	      =	$e8
    143  3000 ????	       00 e8	   u	      =	$e8
    144  3000 ????	       00 e9	   V	      =	$e9
    145  3000 ????	       00 e9	   v	      =	$e9
    146  3000 ????	       00 ea	   W	      =	$ea
    147  3000 ????	       00 ea	   w	      =	$ea
    148  3000 ????	       00 eb	   X	      =	$eb
    149  3000 ????	       00 eb	   x	      =	$eb
    150  3000 ????	       00 ec	   Y	      =	$ec
    151  3000 ????	       00 ec	   y	      =	$ec
    152  3000 ????	       00 ed	   Z	      =	$ed
    153  3000 ????	       00 ed	   z	      =	$ed
    154  3000 ????
    155  3000 ????	       00 ee	   temp7      =	$ee	; This is used to aid in bankswitching
    156  3000 ????	       00 ef	   playfieldpos =	$ef
    157  3000 ????
    158  3000 ????						; available for other uses, or if unused, provide more stack space
    159  3000 ????
    160  3000 ????	       00 f0	   aux1       =	$f0
    161  3000 ????	       00 f1	   aux2       =	$f1
    162  3000 ????	       00 f2	   aux3       =	$f2
    163  3000 ????	       00 f3	   aux4       =	$f3
    164  3000 ????	       00 f4	   aux5       =	$f4
    165  3000 ????	       00 f5	   aux6       =	$f5
    166  3000 ????
    167  3000 ????						; playfield color/height pointers
    168  3000 ????	       00 f0	   pfcolortable =	$f0	; and $d5
    169  3000 ????	       00 f0	   pfheighttable =	$f0	; and $d5
    170  3000 ????						; the above pointers are the same because if color and height are both used together,
    171  3000 ????						; they must used absolute indexed and cannot use pointers
    172  3000 ????
    173  3000 ????	       00 f2	   lifepointer =	$f2	; pointer to "lives" shape
    174  3000 ????						; upper 3 bits of $f2 contain the number of lives
    175  3000 ????	       00 f4	   lifecolor  =	$f4
    176  3000 ????	       00 f3	   lives      =	$f3	; # lives >> 5
    177  3000 ????	       00 f5	   statusbarlength =	$f5	; only uses upper 5 bits; other bits free
    178  3000 ????
    179  3000 ????	       00 f2	   pfscore1   =	$f2	; optional playfield bytes in score
    180  3000 ????	       00 f3	   pfscore2   =	$f3
    181  3000 ????	       00 f4	   pfscorecolor =	$f4
    182  3000 ????
    183  3000 ????	       00 f6	   stack1     =	$f6
    184  3000 ????	       00 f7	   stack2     =	$f7
    185  3000 ????	       00 f8	   stack3     =	$f8
    186  3000 ????	       00 f9	   stack4     =	$f9
    187  3000 ????						; the stack bytes above may be used in the kernel
    188  3000 ????						; stack = F6-F7, F8-F9, FA-FB, FC-FD, FE-FF
    189  3000 ????
    190  3000 ????				      MAC	return
    191  3000 ????				      ifnconst	bankswitch
    192  3000 ????				      rts
    193  3000 ????				      else
    194  3000 ????				      jmp	BS_return
    195  3000 ????				      endif
    196  3000 ????				      ENDM		; auto-return from either a regular or bankswitched module
    197  3000 ????
    198  3000 ????				      ifconst	superchip
    199  3000 ????	       10 d0	   playfieldbase =	$10D0
------- FILE superchip.h LEVEL 3 PASS 3
      0  3000 ????				      include	superchip.h
      1  3000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  3000 ????
      3  3000 ????	       f0 00	   write_RAM  =	$F000
      4  3000 ????	       f0 00	   wRAM       =	$F000
      5  3000 ????	       f0 00	   w000       =	$F000
      6  3000 ????	       f0 01	   w001       =	$F001
      7  3000 ????	       f0 02	   w002       =	$F002
      8  3000 ????	       f0 03	   w003       =	$F003
      9  3000 ????	       f0 04	   w004       =	$F004
     10  3000 ????	       f0 05	   w005       =	$F005
     11  3000 ????	       f0 06	   w006       =	$F006
     12  3000 ????	       f0 07	   w007       =	$F007
     13  3000 ????	       f0 08	   w008       =	$F008
     14  3000 ????	       f0 09	   w009       =	$F009
     15  3000 ????	       f0 0a	   w010       =	$F00A
     16  3000 ????	       f0 0b	   w011       =	$F00B
     17  3000 ????	       f0 0c	   w012       =	$F00C
     18  3000 ????	       f0 0d	   w013       =	$F00D
     19  3000 ????	       f0 0e	   w014       =	$F00E
     20  3000 ????	       f0 0f	   w015       =	$F00F
     21  3000 ????	       f0 10	   w016       =	$F010
     22  3000 ????	       f0 11	   w017       =	$F011
     23  3000 ????	       f0 12	   w018       =	$F012
     24  3000 ????	       f0 13	   w019       =	$F013
     25  3000 ????	       f0 14	   w020       =	$F014
     26  3000 ????	       f0 15	   w021       =	$F015
     27  3000 ????	       f0 16	   w022       =	$F016
     28  3000 ????	       f0 17	   w023       =	$F017
     29  3000 ????	       f0 18	   w024       =	$F018
     30  3000 ????	       f0 19	   w025       =	$F019
     31  3000 ????	       f0 1a	   w026       =	$F01A
     32  3000 ????	       f0 1b	   w027       =	$F01B
     33  3000 ????	       f0 1c	   w028       =	$F01C
     34  3000 ????	       f0 1d	   w029       =	$F01D
     35  3000 ????	       f0 1e	   w030       =	$F01E
     36  3000 ????	       f0 1f	   w031       =	$F01F
     37  3000 ????	       f0 20	   w032       =	$F020
     38  3000 ????	       f0 21	   w033       =	$F021
     39  3000 ????	       f0 22	   w034       =	$F022
     40  3000 ????	       f0 23	   w035       =	$F023
     41  3000 ????	       f0 24	   w036       =	$F024
     42  3000 ????	       f0 25	   w037       =	$F025
     43  3000 ????	       f0 26	   w038       =	$F026
     44  3000 ????	       f0 27	   w039       =	$F027
     45  3000 ????	       f0 28	   w040       =	$F028
     46  3000 ????	       f0 29	   w041       =	$F029
     47  3000 ????	       f0 2a	   w042       =	$F02A
     48  3000 ????	       f0 2b	   w043       =	$F02B
     49  3000 ????	       f0 2c	   w044       =	$F02C
     50  3000 ????	       f0 2d	   w045       =	$F02D
     51  3000 ????	       f0 2e	   w046       =	$F02E
     52  3000 ????	       f0 2f	   w047       =	$F02F
     53  3000 ????	       f0 30	   w048       =	$F030
     54  3000 ????	       f0 31	   w049       =	$F031
     55  3000 ????	       f0 32	   w050       =	$F032
     56  3000 ????	       f0 33	   w051       =	$F033
     57  3000 ????	       f0 34	   w052       =	$F034
     58  3000 ????	       f0 35	   w053       =	$F035
     59  3000 ????	       f0 36	   w054       =	$F036
     60  3000 ????	       f0 37	   w055       =	$F037
     61  3000 ????	       f0 38	   w056       =	$F038
     62  3000 ????	       f0 39	   w057       =	$F039
     63  3000 ????	       f0 3a	   w058       =	$F03A
     64  3000 ????	       f0 3b	   w059       =	$F03B
     65  3000 ????	       f0 3c	   w060       =	$F03C
     66  3000 ????	       f0 3d	   w061       =	$F03D
     67  3000 ????	       f0 3e	   w062       =	$F03E
     68  3000 ????	       f0 3f	   w063       =	$F03F
     69  3000 ????	       f0 40	   w064       =	$F040
     70  3000 ????	       f0 41	   w065       =	$F041
     71  3000 ????	       f0 42	   w066       =	$F042
     72  3000 ????	       f0 43	   w067       =	$F043
     73  3000 ????	       f0 44	   w068       =	$F044
     74  3000 ????	       f0 45	   w069       =	$F045
     75  3000 ????	       f0 46	   w070       =	$F046
     76  3000 ????	       f0 47	   w071       =	$F047
     77  3000 ????	       f0 48	   w072       =	$F048
     78  3000 ????	       f0 49	   w073       =	$F049
     79  3000 ????	       f0 4a	   w074       =	$F04A
     80  3000 ????	       f0 4b	   w075       =	$F04B
     81  3000 ????	       f0 4c	   w076       =	$F04C
     82  3000 ????	       f0 4d	   w077       =	$F04D
     83  3000 ????	       f0 4e	   w078       =	$F04E
     84  3000 ????	       f0 4f	   w079       =	$F04F
     85  3000 ????	       f0 50	   w080       =	$F050
     86  3000 ????	       f0 51	   w081       =	$F051
     87  3000 ????	       f0 52	   w082       =	$F052
     88  3000 ????	       f0 53	   w083       =	$F053
     89  3000 ????	       f0 54	   w084       =	$F054
     90  3000 ????	       f0 55	   w085       =	$F055
     91  3000 ????	       f0 56	   w086       =	$F056
     92  3000 ????	       f0 57	   w087       =	$F057
     93  3000 ????	       f0 58	   w088       =	$F058
     94  3000 ????	       f0 59	   w089       =	$F059
     95  3000 ????	       f0 5a	   w090       =	$F05A
     96  3000 ????	       f0 5b	   w091       =	$F05B
     97  3000 ????	       f0 5c	   w092       =	$F05C
     98  3000 ????	       f0 5d	   w093       =	$F05D
     99  3000 ????	       f0 5e	   w094       =	$F05E
    100  3000 ????	       f0 5f	   w095       =	$F05F
    101  3000 ????	       f0 60	   w096       =	$F060
    102  3000 ????	       f0 61	   w097       =	$F061
    103  3000 ????	       f0 62	   w098       =	$F062
    104  3000 ????	       f0 63	   w099       =	$F063
    105  3000 ????	       f0 64	   w100       =	$F064
    106  3000 ????	       f0 65	   w101       =	$F065
    107  3000 ????	       f0 66	   w102       =	$F066
    108  3000 ????	       f0 67	   w103       =	$F067
    109  3000 ????	       f0 68	   w104       =	$F068
    110  3000 ????	       f0 69	   w105       =	$F069
    111  3000 ????	       f0 6a	   w106       =	$F06A
    112  3000 ????	       f0 6b	   w107       =	$F06B
    113  3000 ????	       f0 6c	   w108       =	$F06C
    114  3000 ????	       f0 6d	   w109       =	$F06D
    115  3000 ????	       f0 6e	   w110       =	$F06E
    116  3000 ????	       f0 6f	   w111       =	$F06F
    117  3000 ????	       f0 70	   w112       =	$F070
    118  3000 ????	       f0 71	   w113       =	$F071
    119  3000 ????	       f0 72	   w114       =	$F072
    120  3000 ????	       f0 73	   w115       =	$F073
    121  3000 ????	       f0 74	   w116       =	$F074
    122  3000 ????	       f0 75	   w117       =	$F075
    123  3000 ????	       f0 76	   w118       =	$F076
    124  3000 ????	       f0 77	   w119       =	$F077
    125  3000 ????	       f0 78	   w120       =	$F078
    126  3000 ????	       f0 79	   w121       =	$F079
    127  3000 ????	       f0 7a	   w122       =	$F07A
    128  3000 ????	       f0 7b	   w123       =	$F07B
    129  3000 ????	       f0 7c	   w124       =	$F07C
    130  3000 ????	       f0 7d	   w125       =	$F07D
    131  3000 ????	       f0 7e	   w126       =	$F07E
    132  3000 ????	       f0 7f	   w127       =	$F07F
    133  3000 ????
    134  3000 ????	       f0 80	   read_RAM   =	$F080
    135  3000 ????	       f0 80	   rRAM       =	$F080
    136  3000 ????	       f0 80	   r000       =	$F080
    137  3000 ????	       f0 81	   r001       =	$F081
    138  3000 ????	       f0 82	   r002       =	$F082
    139  3000 ????	       f0 83	   r003       =	$F083
    140  3000 ????	       f0 84	   r004       =	$F084
    141  3000 ????	       f0 85	   r005       =	$F085
    142  3000 ????	       f0 86	   r006       =	$F086
    143  3000 ????	       f0 87	   r007       =	$F087
    144  3000 ????	       f0 88	   r008       =	$F088
    145  3000 ????	       f0 89	   r009       =	$F089
    146  3000 ????	       f0 8a	   r010       =	$F08A
    147  3000 ????	       f0 8b	   r011       =	$F08B
    148  3000 ????	       f0 8c	   r012       =	$F08C
    149  3000 ????	       f0 8d	   r013       =	$F08D
    150  3000 ????	       f0 8e	   r014       =	$F08E
    151  3000 ????	       f0 8f	   r015       =	$F08F
    152  3000 ????	       f0 90	   r016       =	$F090
    153  3000 ????	       f0 91	   r017       =	$F091
    154  3000 ????	       f0 92	   r018       =	$F092
    155  3000 ????	       f0 93	   r019       =	$F093
    156  3000 ????	       f0 94	   r020       =	$F094
    157  3000 ????	       f0 95	   r021       =	$F095
    158  3000 ????	       f0 96	   r022       =	$F096
    159  3000 ????	       f0 97	   r023       =	$F097
    160  3000 ????	       f0 98	   r024       =	$F098
    161  3000 ????	       f0 99	   r025       =	$F099
    162  3000 ????	       f0 9a	   r026       =	$F09A
    163  3000 ????	       f0 9b	   r027       =	$F09B
    164  3000 ????	       f0 9c	   r028       =	$F09C
    165  3000 ????	       f0 9d	   r029       =	$F09D
    166  3000 ????	       f0 9e	   r030       =	$F09E
    167  3000 ????	       f0 9f	   r031       =	$F09F
    168  3000 ????	       f0 a0	   r032       =	$F0A0
    169  3000 ????	       f0 a1	   r033       =	$F0A1
    170  3000 ????	       f0 a2	   r034       =	$F0A2
    171  3000 ????	       f0 a3	   r035       =	$F0A3
    172  3000 ????	       f0 a4	   r036       =	$F0A4
    173  3000 ????	       f0 a5	   r037       =	$F0A5
    174  3000 ????	       f0 a6	   r038       =	$F0A6
    175  3000 ????	       f0 a7	   r039       =	$F0A7
    176  3000 ????	       f0 a8	   r040       =	$F0A8
    177  3000 ????	       f0 a9	   r041       =	$F0A9
    178  3000 ????	       f0 aa	   r042       =	$F0AA
    179  3000 ????	       f0 ab	   r043       =	$F0AB
    180  3000 ????	       f0 ac	   r044       =	$F0AC
    181  3000 ????	       f0 ad	   r045       =	$F0AD
    182  3000 ????	       f0 ae	   r046       =	$F0AE
    183  3000 ????	       f0 af	   r047       =	$F0AF
    184  3000 ????	       f0 b0	   r048       =	$F0B0
    185  3000 ????	       f0 b1	   r049       =	$F0B1
    186  3000 ????	       f0 b2	   r050       =	$F0B2
    187  3000 ????	       f0 b3	   r051       =	$F0B3
    188  3000 ????	       f0 b4	   r052       =	$F0B4
    189  3000 ????	       f0 b5	   r053       =	$F0B5
    190  3000 ????	       f0 b6	   r054       =	$F0B6
    191  3000 ????	       f0 b7	   r055       =	$F0B7
    192  3000 ????	       f0 b8	   r056       =	$F0B8
    193  3000 ????	       f0 b9	   r057       =	$F0B9
    194  3000 ????	       f0 ba	   r058       =	$F0BA
    195  3000 ????	       f0 bb	   r059       =	$F0BB
    196  3000 ????	       f0 bc	   r060       =	$F0BC
    197  3000 ????	       f0 bd	   r061       =	$F0BD
    198  3000 ????	       f0 be	   r062       =	$F0BE
    199  3000 ????	       f0 bf	   r063       =	$F0BF
    200  3000 ????	       f0 c0	   r064       =	$F0C0
    201  3000 ????	       f0 c1	   r065       =	$F0C1
    202  3000 ????	       f0 c2	   r066       =	$F0C2
    203  3000 ????	       f0 c3	   r067       =	$F0C3
    204  3000 ????	       f0 c4	   r068       =	$F0C4
    205  3000 ????	       f0 c5	   r069       =	$F0C5
    206  3000 ????	       f0 c6	   r070       =	$F0C6
    207  3000 ????	       f0 c7	   r071       =	$F0C7
    208  3000 ????	       f0 c8	   r072       =	$F0C8
    209  3000 ????	       f0 c9	   r073       =	$F0C9
    210  3000 ????	       f0 ca	   r074       =	$F0CA
    211  3000 ????	       f0 cb	   r075       =	$F0CB
    212  3000 ????	       f0 cc	   r076       =	$F0CC
    213  3000 ????	       f0 cd	   r077       =	$F0CD
    214  3000 ????	       f0 ce	   r078       =	$F0CE
    215  3000 ????	       f0 cf	   r079       =	$F0CF
    216  3000 ????	       f0 d0	   r080       =	$F0D0
    217  3000 ????	       f0 d1	   r081       =	$F0D1
    218  3000 ????	       f0 d2	   r082       =	$F0D2
    219  3000 ????	       f0 d3	   r083       =	$F0D3
    220  3000 ????	       f0 d4	   r084       =	$F0D4
    221  3000 ????	       f0 d5	   r085       =	$F0D5
    222  3000 ????	       f0 d6	   r086       =	$F0D6
    223  3000 ????	       f0 d7	   r087       =	$F0D7
    224  3000 ????	       f0 d8	   r088       =	$F0D8
    225  3000 ????	       f0 d9	   r089       =	$F0D9
    226  3000 ????	       f0 da	   r090       =	$F0DA
    227  3000 ????	       f0 db	   r091       =	$F0DB
    228  3000 ????	       f0 dc	   r092       =	$F0DC
    229  3000 ????	       f0 dd	   r093       =	$F0DD
    230  3000 ????	       f0 de	   r094       =	$F0DE
    231  3000 ????	       f0 df	   r095       =	$F0DF
    232  3000 ????	       f0 e0	   r096       =	$F0E0
    233  3000 ????	       f0 e1	   r097       =	$F0E1
    234  3000 ????	       f0 e2	   r098       =	$F0E2
    235  3000 ????	       f0 e3	   r099       =	$F0E3
    236  3000 ????	       f0 e4	   r100       =	$F0E4
    237  3000 ????	       f0 e5	   r101       =	$F0E5
    238  3000 ????	       f0 e6	   r102       =	$F0E6
    239  3000 ????	       f0 e7	   r103       =	$F0E7
    240  3000 ????	       f0 e8	   r104       =	$F0E8
    241  3000 ????	       f0 e9	   r105       =	$F0E9
    242  3000 ????	       f0 ea	   r106       =	$F0EA
    243  3000 ????	       f0 eb	   r107       =	$F0EB
    244  3000 ????	       f0 ec	   r108       =	$F0EC
    245  3000 ????	       f0 ed	   r109       =	$F0ED
    246  3000 ????	       f0 ee	   r110       =	$F0EE
    247  3000 ????	       f0 ef	   r111       =	$F0EF
    248  3000 ????	       f0 f0	   r112       =	$F0F0
    249  3000 ????	       f0 f1	   r113       =	$F0F1
    250  3000 ????	       f0 f2	   r114       =	$F0F2
    251  3000 ????	       f0 f3	   r115       =	$F0F3
    252  3000 ????	       f0 f4	   r116       =	$F0F4
    253  3000 ????	       f0 f5	   r117       =	$F0F5
    254  3000 ????	       f0 f6	   r118       =	$F0F6
    255  3000 ????	       f0 f7	   r119       =	$F0F7
    256  3000 ????	       f0 f8	   r120       =	$F0F8
    257  3000 ????	       f0 f9	   r121       =	$F0F9
    258  3000 ????	       f0 fa	   r122       =	$F0FA
    259  3000 ????	       f0 fb	   r123       =	$F0FB
    260  3000 ????	       f0 fc	   r124       =	$F0FC
    261  3000 ????	       f0 fd	   r125       =	$F0FD
    262  3000 ????	       f0 fe	   r126       =	$F0FE
    263  3000 ????	       f0 ff	   r127       =	$F0FF
------- FILE 2600basic.h
    201  3000 ????			  -	      else
    202  3000 ????			  -playfieldbase =	$A4
    203  3000 ????				      endif
    204  3000 ????
    205  3000 ????				      ifnconst	pfhalfwidth
    206  3000 ????	       00 04	   pfwidth    =	4
    207  3000 ????	       00 0e	   PF1L       =	PF1
    208  3000 ????	       00 0f	   PF2L       =	PF2
    209  3000 ????	       00 0e	   PF1R       =	PF1
    210  3000 ????	       00 0f	   PF2R       =	PF2
    211  3000 ????	       00 00	   pfadjust   =	0
    212  3000 ????			  -	      else
    213  3000 ????			  -pfwidth    =	2
    214  3000 ????			  -	      ifconst	pfcenter
    215  3000 ????			  -PF1L       =	$3F	; no effect
    216  3000 ????			  -PF2L       =	PF2
    217  3000 ????			  -PF1R       =	$3F
    218  3000 ????			  -PF2R       =	PF2	; no effect
    219  3000 ????			  -pfadjust   =	1
    220  3000 ????			  -	      else
    221  3000 ????			  -PF1L       =	PF1
    222  3000 ????			  -PF2L       =	PF2
    223  3000 ????			  -PF1R       =	$3F	; no effect
    224  3000 ????			  -PF2R       =	$3F	; no effect
    225  3000 ????			  -pfadjust   =	0
    226  3000 ????			  -	      endif
    227  3000 ????				      endif
    228  3000 ????
    229  3000 ????						; define playfield start based on height
    230  3000 ????			  -	      ifnconst	pfres
    231  3000 ????			  -playfield  =	playfieldbase
    232  3000 ????				      else
    233  3000 ????	       10 f0	   playfield  =	playfieldbase-(pfres-12*(4/pfwidth))*pfwidth
    234  3000 ????				      endif
------- FILE d:\Firmaplus\Firmaplus_intern\Atari\PlusROM\Projekte-batariBasic\CaveApocalypse\C.A.V.E. Apocalypse.bas.asm
------- FILE 2600basic_variable_redefs.h LEVEL 2 PASS 3
      0  3000 ????				      include	"2600basic_variable_redefs.h"
      1  3000 ????						; This file contains variable mapping and other information for the current project.
      2  3000 ????
      3  3000 ????	       00 23	   bscode_length =	35
      4  3000 ????	       00 1d	   _SD_Touch_Enemy_length =	.skipL0440-_SD_Touch_Enemy
      5  3000 ????
      6  3000 ????	       00 21	   _SD_Shoot_Enemy_length =	.skipL0439-_SD_Shoot_Enemy
      7  3000 ????
      8  3000 ????	       00 45	   _SD_Shoot_Miss_length =	.skipL0438-_SD_Shoot_Miss
      9  3000 ????
     10  3000 ????	       00 35	   _SD_Shot_Wall_length =	.skipL0437-_SD_Shot_Wall
     11  3000 ????
     12  3000 ????	       f0 6f	   w_extra_wall_startpos =	w111
     13  3000 ????
     14  3000 ????	       f0 ef	   r_extra_wall_startpos =	r111
     15  3000 ????
     16  3000 ????	       f0 6e	   w_extra_wall_type =	w110
     17  3000 ????
     18  3000 ????	       f0 ee	   r_extra_wall_type =	r110
     19  3000 ????
     20  3000 ????	       f0 6d	   w_extra_wall_width =	w109
     21  3000 ????
     22  3000 ????	       f0 ed	   r_extra_wall_width =	r109
     23  3000 ????
     24  3000 ????	       f0 6c	   w_roommate_x_startpos =	w108
     25  3000 ????
     26  3000 ????	       f0 ec	   r_roommate_x_startpos =	r108
     27  3000 ????
     28  3000 ????	       f0 6b	   w_roommate_y_startpos =	w107
     29  3000 ????
     30  3000 ????	       f0 eb	   r_roommate_y_startpos =	r107
     31  3000 ????
     32  3000 ????	       f0 6a	   w_roommate_type_and_range =	w106
     33  3000 ????
     34  3000 ????	       f0 ea	   r_roommate_type_and_range =	r106
     35  3000 ????
     36  3000 ????	       f0 69	   w_room_color_bottom =	w105
     37  3000 ????
     38  3000 ????	       f0 e9	   r_room_color_bottom =	r105
     39  3000 ????
     40  3000 ????	       f0 65	   w_room_color_middle =	w101
     41  3000 ????
     42  3000 ????	       f0 e5	   r_room_color_middle =	r101
     43  3000 ????
     44  3000 ????	       f0 64	   w_room_color_top =	w100
     45  3000 ????
     46  3000 ????	       f0 e4	   r_room_color_top =	r100
     47  3000 ????
     48  3000 ????	       f0 64	   w_room_definition_start =	w100
     49  3000 ????
     50  3000 ????	       00 ec	   _Bit7_M0_Moving =	y
     51  3000 ????
     52  3000 ????	       00 ec	   _Bit6_Flip_P0 =	y
     53  3000 ????
     54  3000 ????	       00 ec	   _Bit5_Request_Pending =	y
     55  3000 ????
     56  3000 ????	       00 ec	   _Bit4_Game_Over =	y
     57  3000 ????
     58  3000 ????	       00 ec	   _Bit3_Ball_Shot_Moving =	y
     59  3000 ????
     60  3000 ????	       00 ec	   _Bit1_Wall_Dir =	y
     61  3000 ????
     62  3000 ????	       00 ec	   _Bit0_roommate_Dir =	y
     63  3000 ????
     64  3000 ????	       00 ec	   _Bit_Game_State =	y
     65  3000 ????
     66  3000 ????	       00 86	   P1y_position =	player1y
     67  3000 ????	       00 e9	   P1y_velocity =	v
     68  3000 ????	       00 91	   M0y_position =	missile0y
     69  3000 ????	       00 e6	   M0y_velocity =	s
     70  3000 ????	       00 89	   Bally_position =	bally
     71  3000 ????	       00 e3	   Bally_velocity =	p
     72  3000 ????	       00 df	   roommate_type =	l
     73  3000 ????
     74  3000 ????	       00 de	   roommate_move_x =	k
     75  3000 ????
     76  3000 ????	       00 dd	   extra_wall_move_x =	j
     77  3000 ????
     78  3000 ????	       00 dc	   _Ch0_Counter =	i
     79  3000 ????
     80  3000 ????	       00 db	   _Ch0_Duration =	h
     81  3000 ????
     82  3000 ????	       00 da	   _Ch0_Sound =	g
     83  3000 ????
     84  3000 ????	       00 d9	   P1_facing  =	f
     85  3000 ????
     86  3000 ????	       00 d8	   _Bit3_P1_Dir_Right =	e
     87  3000 ????
     88  3000 ????	       00 d8	   _Bit2_P1_Dir_Left =	e
     89  3000 ????
     90  3000 ????	       00 d8	   _Bit1_P1_Dir_Down =	e
     91  3000 ????
     92  3000 ????	       00 d8	   _Bit0_P1_Dir_Up =	e
     93  3000 ????
     94  3000 ????	       00 d8	   _BitOp_P1_Dir =	e
     95  3000 ????
     96  3000 ????	       00 d7	   _Bit3_M0_Dir_Right =	d
     97  3000 ????
     98  3000 ????	       00 d7	   _Bit2_M0_Dir_Left =	d
     99  3000 ????
    100  3000 ????	       00 d7	   _Bit1_M0_Dir_Down =	d
    101  3000 ????
    102  3000 ????	       00 d7	   _Bit0_M0_Dir_Up =	d
    103  3000 ????
    104  3000 ????	       00 d7	   _BitOp_M0_Dir =	d
    105  3000 ????
    106  3000 ????	       00 d6	   _Bit3_Ball_Shot_Dir_Right2 =	c
    107  3000 ????
    108  3000 ????	       00 d6	   _Bit2_Ball_Shot_Dir_Right1 =	c
    109  3000 ????
    110  3000 ????	       00 d6	   _Bit1_Ball_Shot_Dir_Left2 =	c
    111  3000 ????
    112  3000 ????	       00 d6	   _Bit0_Ball_Shot_Dir_Left1 =	c
    113  3000 ????
    114  3000 ????	       00 d6	   _BitOp_Ball_Shot_Dir =	c
    115  3000 ????
    116  3000 ????	       00 d5	   frame_counter =	b
    117  3000 ????
    118  3000 ????	       00 d4	   delay_counter =	a
    119  3000 ????
    120  3000 ????	       00 95	   _sc3       =	score + 2
    121  3000 ????
    122  3000 ????	       00 94	   _sc2       =	score + 1
    123  3000 ????
    124  3000 ????	       00 93	   _sc1       =	score
    125  3000 ????
    126  3000 ????	       00 2e	   _FE	      =	$2E
    127  3000 ????
    128  3000 ????	       00 2c	   _FC	      =	$2C
    129  3000 ????
    130  3000 ????	       00 2a	   _FA	      =	$2A
    131  3000 ????
    132  3000 ????	       00 28	   _F8	      =	$28
    133  3000 ????
    134  3000 ????	       00 26	   _F6	      =	$26
    135  3000 ????
    136  3000 ????	       00 24	   _F4	      =	$24
    137  3000 ????
    138  3000 ????	       00 22	   _F2	      =	$22
    139  3000 ????
    140  3000 ????	       00 20	   _F0	      =	$20
    141  3000 ????
    142  3000 ????	       00 2e	   _EE	      =	$2E
    143  3000 ????
    144  3000 ????	       00 2c	   _EC	      =	$2C
    145  3000 ????
    146  3000 ????	       00 2a	   _EA	      =	$2A
    147  3000 ????
    148  3000 ????	       00 28	   _E8	      =	$28
    149  3000 ????
    150  3000 ????	       00 26	   _E6	      =	$26
    151  3000 ????
    152  3000 ????	       00 24	   _E4	      =	$24
    153  3000 ????
    154  3000 ????	       00 22	   _E2	      =	$22
    155  3000 ????
    156  3000 ????	       00 20	   _E0	      =	$20
    157  3000 ????
    158  3000 ????	       00 3e	   _DE	      =	$3E
    159  3000 ????
    160  3000 ????	       00 3c	   _DC	      =	$3C
    161  3000 ????
    162  3000 ????	       00 3a	   _DA	      =	$3A
    163  3000 ????
    164  3000 ????	       00 38	   _D8	      =	$38
    165  3000 ????
    166  3000 ????	       00 36	   _D6	      =	$36
    167  3000 ????
    168  3000 ????	       00 34	   _D4	      =	$34
    169  3000 ????
    170  3000 ????	       00 32	   _D2	      =	$32
    171  3000 ????
    172  3000 ????	       00 30	   _D0	      =	$30
    173  3000 ????
    174  3000 ????	       00 5e	   _CE	      =	$5E
    175  3000 ????
    176  3000 ????	       00 5c	   _CC	      =	$5C
    177  3000 ????
    178  3000 ????	       00 5a	   _CA	      =	$5A
    179  3000 ????
    180  3000 ????	       00 58	   _C8	      =	$58
    181  3000 ????
    182  3000 ????	       00 56	   _C6	      =	$56
    183  3000 ????
    184  3000 ????	       00 54	   _C4	      =	$54
    185  3000 ????
    186  3000 ????	       00 52	   _C2	      =	$52
    187  3000 ????
    188  3000 ????	       00 50	   _C0	      =	$50
    189  3000 ????
    190  3000 ????	       00 7e	   _BE	      =	$7E
    191  3000 ????
    192  3000 ????	       00 7c	   _BC	      =	$7C
    193  3000 ????
    194  3000 ????	       00 7a	   _BA	      =	$7A
    195  3000 ????
    196  3000 ????	       00 78	   _B8	      =	$78
    197  3000 ????
    198  3000 ????	       00 76	   _B6	      =	$76
    199  3000 ????
    200  3000 ????	       00 74	   _B4	      =	$74
    201  3000 ????
    202  3000 ????	       00 72	   _B2	      =	$72
    203  3000 ????
    204  3000 ????	       00 70	   _B0	      =	$70
    205  3000 ????
    206  3000 ????	       00 9e	   _AE	      =	$9E
    207  3000 ????
    208  3000 ????	       00 9c	   _AC	      =	$9C
    209  3000 ????
    210  3000 ????	       00 9a	   _AA	      =	$9A
    211  3000 ????
    212  3000 ????	       00 98	   _A8	      =	$98
    213  3000 ????
    214  3000 ????	       00 96	   _A6	      =	$96
    215  3000 ????
    216  3000 ????	       00 94	   _A4	      =	$94
    217  3000 ????
    218  3000 ????	       00 92	   _A2	      =	$92
    219  3000 ????
    220  3000 ????	       00 90	   _A0	      =	$90
    221  3000 ????
    222  3000 ????	       00 be	   _9E	      =	$BE
    223  3000 ????
    224  3000 ????	       00 bc	   _9C	      =	$BC
    225  3000 ????
    226  3000 ????	       00 ba	   _9A	      =	$BA
    227  3000 ????
    228  3000 ????	       00 b8	   _98	      =	$B8
    229  3000 ????
    230  3000 ????	       00 b6	   _96	      =	$B6
    231  3000 ????
    232  3000 ????	       00 b4	   _94	      =	$B4
    233  3000 ????
    234  3000 ????	       00 b2	   _92	      =	$B2
    235  3000 ????
    236  3000 ????	       00 b0	   _90	      =	$B0
    237  3000 ????
    238  3000 ????	       00 de	   _8E	      =	$DE
    239  3000 ????
    240  3000 ????	       00 dc	   _8C	      =	$DC
    241  3000 ????
    242  3000 ????	       00 da	   _8A	      =	$DA
    243  3000 ????
    244  3000 ????	       00 d8	   _88	      =	$D8
    245  3000 ????
    246  3000 ????	       00 d6	   _86	      =	$D6
    247  3000 ????
    248  3000 ????	       00 d4	   _84	      =	$D4
    249  3000 ????
    250  3000 ????	       00 d2	   _82	      =	$D2
    251  3000 ????
    252  3000 ????	       00 d0	   _80	      =	$D0
    253  3000 ????
    254  3000 ????	       00 ce	   _7E	      =	$CE
    255  3000 ????
    256  3000 ????	       00 cc	   _7C	      =	$CC
    257  3000 ????
    258  3000 ????	       00 ca	   _7A	      =	$CA
    259  3000 ????
    260  3000 ????	       00 c8	   _78	      =	$C8
    261  3000 ????
    262  3000 ????	       00 c6	   _76	      =	$C6
    263  3000 ????
    264  3000 ????	       00 c4	   _74	      =	$C4
    265  3000 ????
    266  3000 ????	       00 c2	   _72	      =	$C2
    267  3000 ????
    268  3000 ????	       00 c0	   _70	      =	$C0
    269  3000 ????
    270  3000 ????	       00 ae	   _6E	      =	$AE
    271  3000 ????
    272  3000 ????	       00 ac	   _6C	      =	$AC
    273  3000 ????
    274  3000 ????	       00 aa	   _6A	      =	$AA
    275  3000 ????
    276  3000 ????	       00 a8	   _68	      =	$A8
    277  3000 ????
    278  3000 ????	       00 a6	   _66	      =	$A6
    279  3000 ????
    280  3000 ????	       00 a4	   _64	      =	$A4
    281  3000 ????
    282  3000 ????	       00 a2	   _62	      =	$A2
    283  3000 ????
    284  3000 ????	       00 a0	   _60	      =	$A0
    285  3000 ????
    286  3000 ????	       00 8e	   _5E	      =	$8E
    287  3000 ????
    288  3000 ????	       00 8c	   _5C	      =	$8C
    289  3000 ????
    290  3000 ????	       00 8a	   _5A	      =	$8A
    291  3000 ????
    292  3000 ????	       00 88	   _58	      =	$88
    293  3000 ????
    294  3000 ????	       00 86	   _56	      =	$86
    295  3000 ????
    296  3000 ????	       00 84	   _54	      =	$84
    297  3000 ????
    298  3000 ????	       00 82	   _52	      =	$82
    299  3000 ????
    300  3000 ????	       00 80	   _50	      =	$80
    301  3000 ????
    302  3000 ????	       00 6e	   _4E	      =	$6E
    303  3000 ????
    304  3000 ????	       00 6c	   _4C	      =	$6C
    305  3000 ????
    306  3000 ????	       00 6a	   _4A	      =	$6A
    307  3000 ????
    308  3000 ????	       00 68	   _48	      =	$68
    309  3000 ????
    310  3000 ????	       00 66	   _46	      =	$66
    311  3000 ????
    312  3000 ????	       00 64	   _44	      =	$64
    313  3000 ????
    314  3000 ????	       00 62	   _42	      =	$62
    315  3000 ????
    316  3000 ????	       00 60	   _40	      =	$60
    317  3000 ????
    318  3000 ????	       00 4e	   _3E	      =	$4E
    319  3000 ????
    320  3000 ????	       00 4c	   _3C	      =	$4C
    321  3000 ????
    322  3000 ????	       00 4a	   _3A	      =	$4A
    323  3000 ????
    324  3000 ????	       00 48	   _38	      =	$48
    325  3000 ????
    326  3000 ????	       00 46	   _36	      =	$46
    327  3000 ????
    328  3000 ????	       00 44	   _34	      =	$44
    329  3000 ????
    330  3000 ????	       00 42	   _32	      =	$42
    331  3000 ????
    332  3000 ????	       00 40	   _30	      =	$40
    333  3000 ????
    334  3000 ????	       00 4e	   _2E	      =	$4E
    335  3000 ????
    336  3000 ????	       00 4c	   _2C	      =	$4C
    337  3000 ????
    338  3000 ????	       00 4a	   _2A	      =	$4A
    339  3000 ????
    340  3000 ????	       00 48	   _28	      =	$48
    341  3000 ????
    342  3000 ????	       00 46	   _26	      =	$46
    343  3000 ????
    344  3000 ????	       00 44	   _24	      =	$44
    345  3000 ????
    346  3000 ????	       00 42	   _22	      =	$42
    347  3000 ????
    348  3000 ????	       00 40	   _20	      =	$40
    349  3000 ????
    350  3000 ????	       00 2e	   _1E	      =	$2E
    351  3000 ????
    352  3000 ????	       00 2c	   _1C	      =	$2C
    353  3000 ????
    354  3000 ????	       00 2a	   _1A	      =	$2A
    355  3000 ????
    356  3000 ????	       00 28	   _18	      =	$28
    357  3000 ????
    358  3000 ????	       00 26	   _16	      =	$26
    359  3000 ????
    360  3000 ????	       00 24	   _14	      =	$24
    361  3000 ????
    362  3000 ????	       00 22	   _12	      =	$22
    363  3000 ????
    364  3000 ????	       00 20	   _10	      =	$20
    365  3000 ????
    366  3000 ????	       00 0e	   _0E	      =	$0E
    367  3000 ????
    368  3000 ????	       00 0c	   _0C	      =	$0C
    369  3000 ????
    370  3000 ????	       00 0a	   _0A	      =	$0A
    371  3000 ????
    372  3000 ????	       00 08	   _08	      =	$08
    373  3000 ????
    374  3000 ????	       00 06	   _06	      =	$06
    375  3000 ????
    376  3000 ????	       00 04	   _04	      =	$04
    377  3000 ????
    378  3000 ????	       00 02	   _02	      =	$02
    379  3000 ????
    380  3000 ????	       00 00	   _00	      =	$00
    381  3000 ????
    382  3000 ????	       00 87	   req_level_reset =	135
    383  3000 ????
    384  3000 ????	       00 86	   req_move_down =	134
    385  3000 ????
    386  3000 ????	       00 85	   req_move_right =	133
    387  3000 ????
    388  3000 ????	       00 84	   req_move_up =	132
    389  3000 ????
    390  3000 ????	       00 83	   req_move_left =	131
    391  3000 ????
    392  3000 ????	       00 82	   req_game_over =	130
    393  3000 ????
    394  3000 ????	       00 81	   req_level_up =	129
    395  3000 ????
    396  3000 ????	       00 80	   req_load   =	128
    397  3000 ????
    398  3000 ????	       00 17	   response_size_minus_1 =	23
    399  3000 ????
    400  3000 ????	       00 08	   scback     =	#$08
    401  3000 ????
    402  3000 ????	       00 94	   _M_Edge_Right =	148
    403  3000 ????
    404  3000 ????	       00 0e	   _M_Edge_Left =	14
    405  3000 ????
    406  3000 ????	       00 58	   _M_Edge_Bottom =	88
    407  3000 ????
    408  3000 ????	       00 02	   _M_Edge_Top =	2
    409  3000 ????
    410  3000 ????	       00 4c	   player_max_y =	76
    411  3000 ????
    412  3000 ????	       00 02	   player_min_y =	2
    413  3000 ????
    414  3000 ????	       00 86	   player_max_x =	134
    415  3000 ????
    416  3000 ????	       00 0a	   player_min_x =	10
    417  3000 ????
    418  3000 ????	       00 01	   pfscore    =	1
    419  3000 ????
    420  3000 ????	       00 04	   pfres      =	4
    421  3000 ????
    422  3000 ????	       00 01	   superchip  =	1
    423  3000 ????	       00 01	   bs_mask    =	1
    424  3000 ????	       00 08	   bankswitch =	8
    425  3000 ????	       1f f8	   bankswitch_hotspot =	$1FF8
    426  3000 ????	       00 01	   PFcolors   =	1
    427  3000 ????	       00 01	   player1colors =	1
------- FILE d:\Firmaplus\Firmaplus_intern\Atari\PlusROM\Projekte-batariBasic\CaveApocalypse\C.A.V.E. Apocalypse.bas.asm
      8  3000 ????				      ifconst	bankswitch
      9  3000 ????				      if	bankswitch == 8
     10  1000					      ORG	$1000
     11  1000					      RORG	$D000
     12  1000					      endif
     13  1000				  -	      if	bankswitch == 16
     14  1000				  -	      ORG	$1000
     15  1000				  -	      RORG	$9000
     16  1000					      endif
     17  1000				  -	      if	bankswitch == 32
     18  1000				  -	      ORG	$1000
     19  1000				  -	      RORG	$1000
     20  1000					      endif
     21  1000				  -	      if	bankswitch == 64
     22  1000				  -	      ORG	$1000
     23  1000				  -	      RORG	$1000
     24  1000					      endif
     25  1000				  -	      else
     26  1000				  -	      ORG	$F000
     27  1000					      endif
     28  1000					      repeat	256
     29  1000		       ff		      .byte.b	$ff
     28  1000					      repend
     29  1001		       ff		      .byte.b	$ff
     28  1001					      repend
     29  1002		       ff		      .byte.b	$ff
     28  1002					      repend
     29  1003		       ff		      .byte.b	$ff
     28  1003					      repend
     29  1004		       ff		      .byte.b	$ff
     28  1004					      repend
     29  1005		       ff		      .byte.b	$ff
     28  1005					      repend
     29  1006		       ff		      .byte.b	$ff
     28  1006					      repend
     29  1007		       ff		      .byte.b	$ff
     28  1007					      repend
     29  1008		       ff		      .byte.b	$ff
     28  1008					      repend
     29  1009		       ff		      .byte.b	$ff
     28  1009					      repend
     29  100a		       ff		      .byte.b	$ff
     28  100a					      repend
     29  100b		       ff		      .byte.b	$ff
     28  100b					      repend
     29  100c		       ff		      .byte.b	$ff
     28  100c					      repend
     29  100d		       ff		      .byte.b	$ff
     28  100d					      repend
     29  100e		       ff		      .byte.b	$ff
     28  100e					      repend
     29  100f		       ff		      .byte.b	$ff
     28  100f					      repend
     29  1010		       ff		      .byte.b	$ff
     28  1010					      repend
     29  1011		       ff		      .byte.b	$ff
     28  1011					      repend
     29  1012		       ff		      .byte.b	$ff
     28  1012					      repend
     29  1013		       ff		      .byte.b	$ff
     28  1013					      repend
     29  1014		       ff		      .byte.b	$ff
     28  1014					      repend
     29  1015		       ff		      .byte.b	$ff
     28  1015					      repend
     29  1016		       ff		      .byte.b	$ff
     28  1016					      repend
     29  1017		       ff		      .byte.b	$ff
     28  1017					      repend
     29  1018		       ff		      .byte.b	$ff
     28  1018					      repend
     29  1019		       ff		      .byte.b	$ff
     28  1019					      repend
     29  101a		       ff		      .byte.b	$ff
     28  101a					      repend
     29  101b		       ff		      .byte.b	$ff
     28  101b					      repend
     29  101c		       ff		      .byte.b	$ff
     28  101c					      repend
     29  101d		       ff		      .byte.b	$ff
     28  101d					      repend
     29  101e		       ff		      .byte.b	$ff
     28  101e					      repend
     29  101f		       ff		      .byte.b	$ff
     28  101f					      repend
     29  1020		       ff		      .byte.b	$ff
     28  1020					      repend
     29  1021		       ff		      .byte.b	$ff
     28  1021					      repend
     29  1022		       ff		      .byte.b	$ff
     28  1022					      repend
     29  1023		       ff		      .byte.b	$ff
     28  1023					      repend
     29  1024		       ff		      .byte.b	$ff
     28  1024					      repend
     29  1025		       ff		      .byte.b	$ff
     28  1025					      repend
     29  1026		       ff		      .byte.b	$ff
     28  1026					      repend
     29  1027		       ff		      .byte.b	$ff
     28  1027					      repend
     29  1028		       ff		      .byte.b	$ff
     28  1028					      repend
     29  1029		       ff		      .byte.b	$ff
     28  1029					      repend
     29  102a		       ff		      .byte.b	$ff
     28  102a					      repend
     29  102b		       ff		      .byte.b	$ff
     28  102b					      repend
     29  102c		       ff		      .byte.b	$ff
     28  102c					      repend
     29  102d		       ff		      .byte.b	$ff
     28  102d					      repend
     29  102e		       ff		      .byte.b	$ff
     28  102e					      repend
     29  102f		       ff		      .byte.b	$ff
     28  102f					      repend
     29  1030		       ff		      .byte.b	$ff
     28  1030					      repend
     29  1031		       ff		      .byte.b	$ff
     28  1031					      repend
     29  1032		       ff		      .byte.b	$ff
     28  1032					      repend
     29  1033		       ff		      .byte.b	$ff
     28  1033					      repend
     29  1034		       ff		      .byte.b	$ff
     28  1034					      repend
     29  1035		       ff		      .byte.b	$ff
     28  1035					      repend
     29  1036		       ff		      .byte.b	$ff
     28  1036					      repend
     29  1037		       ff		      .byte.b	$ff
     28  1037					      repend
     29  1038		       ff		      .byte.b	$ff
     28  1038					      repend
     29  1039		       ff		      .byte.b	$ff
     28  1039					      repend
     29  103a		       ff		      .byte.b	$ff
     28  103a					      repend
     29  103b		       ff		      .byte.b	$ff
     28  103b					      repend
     29  103c		       ff		      .byte.b	$ff
     28  103c					      repend
     29  103d		       ff		      .byte.b	$ff
     28  103d					      repend
     29  103e		       ff		      .byte.b	$ff
     28  103e					      repend
     29  103f		       ff		      .byte.b	$ff
     28  103f					      repend
     29  1040		       ff		      .byte.b	$ff
     28  1040					      repend
     29  1041		       ff		      .byte.b	$ff
     28  1041					      repend
     29  1042		       ff		      .byte.b	$ff
     28  1042					      repend
     29  1043		       ff		      .byte.b	$ff
     28  1043					      repend
     29  1044		       ff		      .byte.b	$ff
     28  1044					      repend
     29  1045		       ff		      .byte.b	$ff
     28  1045					      repend
     29  1046		       ff		      .byte.b	$ff
     28  1046					      repend
     29  1047		       ff		      .byte.b	$ff
     28  1047					      repend
     29  1048		       ff		      .byte.b	$ff
     28  1048					      repend
     29  1049		       ff		      .byte.b	$ff
     28  1049					      repend
     29  104a		       ff		      .byte.b	$ff
     28  104a					      repend
     29  104b		       ff		      .byte.b	$ff
     28  104b					      repend
     29  104c		       ff		      .byte.b	$ff
     28  104c					      repend
     29  104d		       ff		      .byte.b	$ff
     28  104d					      repend
     29  104e		       ff		      .byte.b	$ff
     28  104e					      repend
     29  104f		       ff		      .byte.b	$ff
     28  104f					      repend
     29  1050		       ff		      .byte.b	$ff
     28  1050					      repend
     29  1051		       ff		      .byte.b	$ff
     28  1051					      repend
     29  1052		       ff		      .byte.b	$ff
     28  1052					      repend
     29  1053		       ff		      .byte.b	$ff
     28  1053					      repend
     29  1054		       ff		      .byte.b	$ff
     28  1054					      repend
     29  1055		       ff		      .byte.b	$ff
     28  1055					      repend
     29  1056		       ff		      .byte.b	$ff
     28  1056					      repend
     29  1057		       ff		      .byte.b	$ff
     28  1057					      repend
     29  1058		       ff		      .byte.b	$ff
     28  1058					      repend
     29  1059		       ff		      .byte.b	$ff
     28  1059					      repend
     29  105a		       ff		      .byte.b	$ff
     28  105a					      repend
     29  105b		       ff		      .byte.b	$ff
     28  105b					      repend
     29  105c		       ff		      .byte.b	$ff
     28  105c					      repend
     29  105d		       ff		      .byte.b	$ff
     28  105d					      repend
     29  105e		       ff		      .byte.b	$ff
     28  105e					      repend
     29  105f		       ff		      .byte.b	$ff
     28  105f					      repend
     29  1060		       ff		      .byte.b	$ff
     28  1060					      repend
     29  1061		       ff		      .byte.b	$ff
     28  1061					      repend
     29  1062		       ff		      .byte.b	$ff
     28  1062					      repend
     29  1063		       ff		      .byte.b	$ff
     28  1063					      repend
     29  1064		       ff		      .byte.b	$ff
     28  1064					      repend
     29  1065		       ff		      .byte.b	$ff
     28  1065					      repend
     29  1066		       ff		      .byte.b	$ff
     28  1066					      repend
     29  1067		       ff		      .byte.b	$ff
     28  1067					      repend
     29  1068		       ff		      .byte.b	$ff
     28  1068					      repend
     29  1069		       ff		      .byte.b	$ff
     28  1069					      repend
     29  106a		       ff		      .byte.b	$ff
     28  106a					      repend
     29  106b		       ff		      .byte.b	$ff
     28  106b					      repend
     29  106c		       ff		      .byte.b	$ff
     28  106c					      repend
     29  106d		       ff		      .byte.b	$ff
     28  106d					      repend
     29  106e		       ff		      .byte.b	$ff
     28  106e					      repend
     29  106f		       ff		      .byte.b	$ff
     28  106f					      repend
     29  1070		       ff		      .byte.b	$ff
     28  1070					      repend
     29  1071		       ff		      .byte.b	$ff
     28  1071					      repend
     29  1072		       ff		      .byte.b	$ff
     28  1072					      repend
     29  1073		       ff		      .byte.b	$ff
     28  1073					      repend
     29  1074		       ff		      .byte.b	$ff
     28  1074					      repend
     29  1075		       ff		      .byte.b	$ff
     28  1075					      repend
     29  1076		       ff		      .byte.b	$ff
     28  1076					      repend
     29  1077		       ff		      .byte.b	$ff
     28  1077					      repend
     29  1078		       ff		      .byte.b	$ff
     28  1078					      repend
     29  1079		       ff		      .byte.b	$ff
     28  1079					      repend
     29  107a		       ff		      .byte.b	$ff
     28  107a					      repend
     29  107b		       ff		      .byte.b	$ff
     28  107b					      repend
     29  107c		       ff		      .byte.b	$ff
     28  107c					      repend
     29  107d		       ff		      .byte.b	$ff
     28  107d					      repend
     29  107e		       ff		      .byte.b	$ff
     28  107e					      repend
     29  107f		       ff		      .byte.b	$ff
     28  107f					      repend
     29  1080		       ff		      .byte.b	$ff
     28  1080					      repend
     29  1081		       ff		      .byte.b	$ff
     28  1081					      repend
     29  1082		       ff		      .byte.b	$ff
     28  1082					      repend
     29  1083		       ff		      .byte.b	$ff
     28  1083					      repend
     29  1084		       ff		      .byte.b	$ff
     28  1084					      repend
     29  1085		       ff		      .byte.b	$ff
     28  1085					      repend
     29  1086		       ff		      .byte.b	$ff
     28  1086					      repend
     29  1087		       ff		      .byte.b	$ff
     28  1087					      repend
     29  1088		       ff		      .byte.b	$ff
     28  1088					      repend
     29  1089		       ff		      .byte.b	$ff
     28  1089					      repend
     29  108a		       ff		      .byte.b	$ff
     28  108a					      repend
     29  108b		       ff		      .byte.b	$ff
     28  108b					      repend
     29  108c		       ff		      .byte.b	$ff
     28  108c					      repend
     29  108d		       ff		      .byte.b	$ff
     28  108d					      repend
     29  108e		       ff		      .byte.b	$ff
     28  108e					      repend
     29  108f		       ff		      .byte.b	$ff
     28  108f					      repend
     29  1090		       ff		      .byte.b	$ff
     28  1090					      repend
     29  1091		       ff		      .byte.b	$ff
     28  1091					      repend
     29  1092		       ff		      .byte.b	$ff
     28  1092					      repend
     29  1093		       ff		      .byte.b	$ff
     28  1093					      repend
     29  1094		       ff		      .byte.b	$ff
     28  1094					      repend
     29  1095		       ff		      .byte.b	$ff
     28  1095					      repend
     29  1096		       ff		      .byte.b	$ff
     28  1096					      repend
     29  1097		       ff		      .byte.b	$ff
     28  1097					      repend
     29  1098		       ff		      .byte.b	$ff
     28  1098					      repend
     29  1099		       ff		      .byte.b	$ff
     28  1099					      repend
     29  109a		       ff		      .byte.b	$ff
     28  109a					      repend
     29  109b		       ff		      .byte.b	$ff
     28  109b					      repend
     29  109c		       ff		      .byte.b	$ff
     28  109c					      repend
     29  109d		       ff		      .byte.b	$ff
     28  109d					      repend
     29  109e		       ff		      .byte.b	$ff
     28  109e					      repend
     29  109f		       ff		      .byte.b	$ff
     28  109f					      repend
     29  10a0		       ff		      .byte.b	$ff
     28  10a0					      repend
     29  10a1		       ff		      .byte.b	$ff
     28  10a1					      repend
     29  10a2		       ff		      .byte.b	$ff
     28  10a2					      repend
     29  10a3		       ff		      .byte.b	$ff
     28  10a3					      repend
     29  10a4		       ff		      .byte.b	$ff
     28  10a4					      repend
     29  10a5		       ff		      .byte.b	$ff
     28  10a5					      repend
     29  10a6		       ff		      .byte.b	$ff
     28  10a6					      repend
     29  10a7		       ff		      .byte.b	$ff
     28  10a7					      repend
     29  10a8		       ff		      .byte.b	$ff
     28  10a8					      repend
     29  10a9		       ff		      .byte.b	$ff
     28  10a9					      repend
     29  10aa		       ff		      .byte.b	$ff
     28  10aa					      repend
     29  10ab		       ff		      .byte.b	$ff
     28  10ab					      repend
     29  10ac		       ff		      .byte.b	$ff
     28  10ac					      repend
     29  10ad		       ff		      .byte.b	$ff
     28  10ad					      repend
     29  10ae		       ff		      .byte.b	$ff
     28  10ae					      repend
     29  10af		       ff		      .byte.b	$ff
     28  10af					      repend
     29  10b0		       ff		      .byte.b	$ff
     28  10b0					      repend
     29  10b1		       ff		      .byte.b	$ff
     28  10b1					      repend
     29  10b2		       ff		      .byte.b	$ff
     28  10b2					      repend
     29  10b3		       ff		      .byte.b	$ff
     28  10b3					      repend
     29  10b4		       ff		      .byte.b	$ff
     28  10b4					      repend
     29  10b5		       ff		      .byte.b	$ff
     28  10b5					      repend
     29  10b6		       ff		      .byte.b	$ff
     28  10b6					      repend
     29  10b7		       ff		      .byte.b	$ff
     28  10b7					      repend
     29  10b8		       ff		      .byte.b	$ff
     28  10b8					      repend
     29  10b9		       ff		      .byte.b	$ff
     28  10b9					      repend
     29  10ba		       ff		      .byte.b	$ff
     28  10ba					      repend
     29  10bb		       ff		      .byte.b	$ff
     28  10bb					      repend
     29  10bc		       ff		      .byte.b	$ff
     28  10bc					      repend
     29  10bd		       ff		      .byte.b	$ff
     28  10bd					      repend
     29  10be		       ff		      .byte.b	$ff
     28  10be					      repend
     29  10bf		       ff		      .byte.b	$ff
     28  10bf					      repend
     29  10c0		       ff		      .byte.b	$ff
     28  10c0					      repend
     29  10c1		       ff		      .byte.b	$ff
     28  10c1					      repend
     29  10c2		       ff		      .byte.b	$ff
     28  10c2					      repend
     29  10c3		       ff		      .byte.b	$ff
     28  10c3					      repend
     29  10c4		       ff		      .byte.b	$ff
     28  10c4					      repend
     29  10c5		       ff		      .byte.b	$ff
     28  10c5					      repend
     29  10c6		       ff		      .byte.b	$ff
     28  10c6					      repend
     29  10c7		       ff		      .byte.b	$ff
     28  10c7					      repend
     29  10c8		       ff		      .byte.b	$ff
     28  10c8					      repend
     29  10c9		       ff		      .byte.b	$ff
     28  10c9					      repend
     29  10ca		       ff		      .byte.b	$ff
     28  10ca					      repend
     29  10cb		       ff		      .byte.b	$ff
     28  10cb					      repend
     29  10cc		       ff		      .byte.b	$ff
     28  10cc					      repend
     29  10cd		       ff		      .byte.b	$ff
     28  10cd					      repend
     29  10ce		       ff		      .byte.b	$ff
     28  10ce					      repend
     29  10cf		       ff		      .byte.b	$ff
     28  10cf					      repend
     29  10d0		       ff		      .byte.b	$ff
     28  10d0					      repend
     29  10d1		       ff		      .byte.b	$ff
     28  10d1					      repend
     29  10d2		       ff		      .byte.b	$ff
     28  10d2					      repend
     29  10d3		       ff		      .byte.b	$ff
     28  10d3					      repend
     29  10d4		       ff		      .byte.b	$ff
     28  10d4					      repend
     29  10d5		       ff		      .byte.b	$ff
     28  10d5					      repend
     29  10d6		       ff		      .byte.b	$ff
     28  10d6					      repend
     29  10d7		       ff		      .byte.b	$ff
     28  10d7					      repend
     29  10d8		       ff		      .byte.b	$ff
     28  10d8					      repend
     29  10d9		       ff		      .byte.b	$ff
     28  10d9					      repend
     29  10da		       ff		      .byte.b	$ff
     28  10da					      repend
     29  10db		       ff		      .byte.b	$ff
     28  10db					      repend
     29  10dc		       ff		      .byte.b	$ff
     28  10dc					      repend
     29  10dd		       ff		      .byte.b	$ff
     28  10dd					      repend
     29  10de		       ff		      .byte.b	$ff
     28  10de					      repend
     29  10df		       ff		      .byte.b	$ff
     28  10df					      repend
     29  10e0		       ff		      .byte.b	$ff
     28  10e0					      repend
     29  10e1		       ff		      .byte.b	$ff
     28  10e1					      repend
     29  10e2		       ff		      .byte.b	$ff
     28  10e2					      repend
     29  10e3		       ff		      .byte.b	$ff
     28  10e3					      repend
     29  10e4		       ff		      .byte.b	$ff
     28  10e4					      repend
     29  10e5		       ff		      .byte.b	$ff
     28  10e5					      repend
     29  10e6		       ff		      .byte.b	$ff
     28  10e6					      repend
     29  10e7		       ff		      .byte.b	$ff
     28  10e7					      repend
     29  10e8		       ff		      .byte.b	$ff
     28  10e8					      repend
     29  10e9		       ff		      .byte.b	$ff
     28  10e9					      repend
     29  10ea		       ff		      .byte.b	$ff
     28  10ea					      repend
     29  10eb		       ff		      .byte.b	$ff
     28  10eb					      repend
     29  10ec		       ff		      .byte.b	$ff
     28  10ec					      repend
     29  10ed		       ff		      .byte.b	$ff
     28  10ed					      repend
     29  10ee		       ff		      .byte.b	$ff
     28  10ee					      repend
     29  10ef		       ff		      .byte.b	$ff
     28  10ef					      repend
     29  10f0		       ff		      .byte.b	$ff
     28  10f0					      repend
     29  10f1		       ff		      .byte.b	$ff
     28  10f1					      repend
     29  10f2		       ff		      .byte.b	$ff
     28  10f2					      repend
     29  10f3		       ff		      .byte.b	$ff
     28  10f3					      repend
     29  10f4		       ff		      .byte.b	$ff
     28  10f4					      repend
     29  10f5		       ff		      .byte.b	$ff
     28  10f5					      repend
     29  10f6		       ff		      .byte.b	$ff
     28  10f6					      repend
     29  10f7		       ff		      .byte.b	$ff
     28  10f7					      repend
     29  10f8		       ff		      .byte.b	$ff
     28  10f8					      repend
     29  10f9		       ff		      .byte.b	$ff
     28  10f9					      repend
     29  10fa		       ff		      .byte.b	$ff
     28  10fa					      repend
     29  10fb		       ff		      .byte.b	$ff
     28  10fb					      repend
     29  10fc		       ff		      .byte.b	$ff
     28  10fc					      repend
     29  10fd		       ff		      .byte.b	$ff
     28  10fd					      repend
     29  10fe		       ff		      .byte.b	$ff
     28  10fe					      repend
     29  10ff		       ff		      .byte.b	$ff
     30  1100					      repend
     31  1100				   game
     32  1100				   .L00 		;  inline PlusROM_functions.asm
     33  1100
------- FILE PlusROM_functions.asm LEVEL 2 PASS 3
      0  1100					      include	PlusROM_functions.asm
      1  1100		       00 01	   PlusROM_functions =	1
      2  1100		       1f f0	   WriteToBuffer =	$1ff0
      3  1100		       1f f1	   WriteSendBuffer =	$1ff1
      4  1100		       1f f2	   ReceiveBuffer =	$1ff2
      5  1100		       1f f3	   ReceiveBufferSize =	$1ff3
      6  1100
      7  1100					      MAC	set_plusrom_api
      8  1100				   PlusROM_API
      9  1100					      .byte	{1}, 0, {2}, 0
     10  1100					      ENDM		; {1} = path, {2} = domain
     11  1100
------- FILE d:\Firmaplus\Firmaplus_intern\Atari\PlusROM\Projekte-batariBasic\CaveApocalypse\C.A.V.E. Apocalypse.bas.asm
     35  1100
     36  1100				   .
     37  1100							; 
     38  1100
     39  1100				   .L01 		;  set kernel_options pfcolors player1colors
     40  1100
     41  1100				   .L02 		;  set romsize 8kSC
     42  1100
     43  1100				   .L03 		;  set smartbranching on
     44  1100
     45  1100				   .
     46  1100							; 
     47  1100
     48  1100				   .L04 		;  const pfres = 4
     49  1100
     50  1100				   .L05 		;  const pfscore  =  1
     51  1100
     52  1100				   .
     53  1100							; 
     54  1100
     55  1100				   .L06 		;  rem gravity is acceleration (https://atariage.com/forums/topic/226881-gravity/?do=findComment&comment=3017307)
     56  1100
     57  1100				   .L07 		;  rem the smallest fraction is 1/256 rounded up here to 0.004
     58  1100
     59  1100				   .L08 		;  rem assuming gravity is applied each drawscreen this should
     60  1100
     61  1100				   .L09 		;  rem work out to ~7 pixels in 1 second, 28 pixels in 2 seconds
     62  1100
     63  1100				   .L010		;  rem 63 pixels in 3 seconds
     64  1100
     65  1100							;.gravity_player1.0.004.
     66  1100				   .L011		;  def gravity_player1 = 0.004
     67  1100
     68  1100							;.gravity_missile0.0.024.
     69  1100				   .L012		;  def gravity_missile0 = 0.024
     70  1100
     71  1100				   .
     72  1100							; 
     73  1100
     74  1100				   .L013		;  const player_min_x	=  10
     75  1100
     76  1100				   .L014		;  const player_max_x	=  134
     77  1100
     78  1100				   .L015		;  const player_min_y	=  2
     79  1100
     80  1100				   .L016		;  const player_max_y	=  76
     81  1100
     82  1100				   .L017		;  const _M_Edge_Top  =  2
     83  1100
     84  1100				   .L018		;  const _M_Edge_Bottom  =  88
     85  1100
     86  1100				   .L019		;  const _M_Edge_Left	=  14
     87  1100
     88  1100				   .L020		;  const _M_Edge_Right  =  148
     89  1100
     90  1100				   .
     91  1100							; 
     92  1100
     93  1100				   .L021		;  const scback  =  #$08
     94  1100
     95  1100				   .
     96  1100							; 
     97  1100
     98  1100				   .L022		;  const response_size_minus_1  =  23
     99  1100
    100  1100				   .
    101  1100							; 
    102  1100
    103  1100				   .
    104  1100							; 
    105  1100
    106  1100				   .
    107  1100							; 
    108  1100
    109  1100				   .
    110  1100							; 
    111  1100
    112  1100				   .
    113  1100							; 
    114  1100
    115  1100				   .
    116  1100							; 
    117  1100
    118  1100				   .
    119  1100							; 
    120  1100
    121  1100				   .
    122  1100							; 
    123  1100
    124  1100				   .
    125  1100							; 
    126  1100
    127  1100				   .
    128  1100							; 
    129  1100
    130  1100				   .
    131  1100							; 
    132  1100
    133  1100				   .
    134  1100							; 
    135  1100
    136  1100				   .
    137  1100							; 
    138  1100
    139  1100				   .
    140  1100							; 
    141  1100
    142  1100				   .
    143  1100							; 
    144  1100
    145  1100				   .
    146  1100							; 
    147  1100
    148  1100				   .
    149  1100							; 
    150  1100
    151  1100				   .
    152  1100							; 
    153  1100
    154  1100				   .
    155  1100							; 
    156  1100
    157  1100				   .
    158  1100							; 
    159  1100
    160  1100				   .
    161  1100							; 
    162  1100
    163  1100				   .
    164  1100							; 
    165  1100
    166  1100				   .
    167  1100							; 
    168  1100
    169  1100				   .
    170  1100							; 
    171  1100
    172  1100				   .
    173  1100							; 
    174  1100
    175  1100				   .
    176  1100							; 
    177  1100
    178  1100				   .
    179  1100							; 
    180  1100
    181  1100				   .
    182  1100							; 
    183  1100
    184  1100				   .
    185  1100							; 
    186  1100
    187  1100				   .
    188  1100							; 
    189  1100
    190  1100				   .
    191  1100							; 
    192  1100
    193  1100				   .
    194  1100							; 
    195  1100
    196  1100				   .
    197  1100							; 
    198  1100
    199  1100				   .
    200  1100							; 
    201  1100
    202  1100				   .
    203  1100							; 
    204  1100
    205  1100				   .
    206  1100							; 
    207  1100
    208  1100				   .
    209  1100							; 
    210  1100
    211  1100				   .
    212  1100							; 
    213  1100
    214  1100				   .
    215  1100							; 
    216  1100
    217  1100				   .
    218  1100							; 
    219  1100
    220  1100				   .
    221  1100							; 
    222  1100
    223  1100				   .
    224  1100							; 
    225  1100
    226  1100				   .
    227  1100							; 
    228  1100
    229  1100				   .
    230  1100							; 
    231  1100
    232  1100				   .
    233  1100							; 
    234  1100
    235  1100				   .
    236  1100							; 
    237  1100
    238  1100				   .
    239  1100							; 
    240  1100
    241  1100				   .
    242  1100							; 
    243  1100
    244  1100				   .
    245  1100							; 
    246  1100
    247  1100				   .
    248  1100							; 
    249  1100
    250  1100				   .
    251  1100							; 
    252  1100
    253  1100				   .
    254  1100							; 
    255  1100
    256  1100				   .
    257  1100							; 
    258  1100
    259  1100				   .
    260  1100							; 
    261  1100
    262  1100				   .
    263  1100							; 
    264  1100
    265  1100				   .
    266  1100							; 
    267  1100
    268  1100				   .
    269  1100							; 
    270  1100
    271  1100				   .
    272  1100							; 
    273  1100
    274  1100				   .
    275  1100							; 
    276  1100
    277  1100				   .
    278  1100							; 
    279  1100
    280  1100				   .
    281  1100							; 
    282  1100
    283  1100				   .
    284  1100							; 
    285  1100
    286  1100				   .
    287  1100							; 
    288  1100
    289  1100				   .
    290  1100							; 
    291  1100
    292  1100				   .
    293  1100							; 
    294  1100
    295  1100				   .
    296  1100							; 
    297  1100
    298  1100				   .
    299  1100							; 
    300  1100
    301  1100				   .
    302  1100							; 
    303  1100
    304  1100				   .
    305  1100							; 
    306  1100
    307  1100				   .
    308  1100							; 
    309  1100
    310  1100				   .
    311  1100							; 
    312  1100
    313  1100				   .
    314  1100							; 
    315  1100
    316  1100				   .
    317  1100							; 
    318  1100
    319  1100				   .
    320  1100							; 
    321  1100
    322  1100				   .
    323  1100							; 
    324  1100
    325  1100				   .
    326  1100							; 
    327  1100
    328  1100				   .
    329  1100							; 
    330  1100
    331  1100				   .
    332  1100							; 
    333  1100
    334  1100				   .
    335  1100							; 
    336  1100
    337  1100				   .
    338  1100							; 
    339  1100
    340  1100				   .
    341  1100							; 
    342  1100
    343  1100				   .
    344  1100							; 
    345  1100
    346  1100				   .
    347  1100							; 
    348  1100
    349  1100				   .
    350  1100							; 
    351  1100
    352  1100				   .
    353  1100							; 
    354  1100
    355  1100				   .
    356  1100							; 
    357  1100
    358  1100				   .
    359  1100							; 
    360  1100
    361  1100				   .
    362  1100							; 
    363  1100
    364  1100				   .
    365  1100							; 
    366  1100
    367  1100				   .
    368  1100							; 
    369  1100
    370  1100				   .
    371  1100							; 
    372  1100
    373  1100				   .
    374  1100							; 
    375  1100
    376  1100				   .
    377  1100							; 
    378  1100
    379  1100				   .
    380  1100							; 
    381  1100
    382  1100				   .
    383  1100							; 
    384  1100
    385  1100				   .
    386  1100							; 
    387  1100
    388  1100				   .
    389  1100							; 
    390  1100
    391  1100				   .
    392  1100							; 
    393  1100
    394  1100				   .
    395  1100							; 
    396  1100
    397  1100				   .
    398  1100							; 
    399  1100
    400  1100				   .
    401  1100							; 
    402  1100
    403  1100				   .
    404  1100							; 
    405  1100
    406  1100				   .
    407  1100							; 
    408  1100
    409  1100				   .
    410  1100							; 
    411  1100
    412  1100				   .
    413  1100							; 
    414  1100
    415  1100				   .
    416  1100							; 
    417  1100
    418  1100				   .
    419  1100							; 
    420  1100
    421  1100				   .
    422  1100							; 
    423  1100
    424  1100				   .
    425  1100							; 
    426  1100
    427  1100				   .
    428  1100							; 
    429  1100
    430  1100				   .
    431  1100							; 
    432  1100
    433  1100				   .
    434  1100							; 
    435  1100
    436  1100				   .
    437  1100							; 
    438  1100
    439  1100				   .
    440  1100							; 
    441  1100
    442  1100				   .
    443  1100							; 
    444  1100
    445  1100				   .
    446  1100							; 
    447  1100
    448  1100				   .
    449  1100							; 
    450  1100
    451  1100				   .
    452  1100							; 
    453  1100
    454  1100				   .
    455  1100							; 
    456  1100
    457  1100				   .
    458  1100							; 
    459  1100
    460  1100				   .
    461  1100							; 
    462  1100
    463  1100				   .
    464  1100							; 
    465  1100
    466  1100				   .
    467  1100							; 
    468  1100
    469  1100				   .
    470  1100							; 
    471  1100
    472  1100				   .
    473  1100							; 
    474  1100
    475  1100				   .
    476  1100							; 
    477  1100
    478  1100				   .
    479  1100							; 
    480  1100
    481  1100				   .
    482  1100							; 
    483  1100
    484  1100				   .
    485  1100							; 
    486  1100
    487  1100				   .
    488  1100							; 
    489  1100
    490  1100				   .
    491  1100							; 
    492  1100
    493  1100				   .
    494  1100							; 
    495  1100
    496  1100				   .
    497  1100							; 
    498  1100
    499  1100				   .
    500  1100							; 
    501  1100
    502  1100				   .
    503  1100							; 
    504  1100
    505  1100				   .
    506  1100							; 
    507  1100
    508  1100				   .
    509  1100							; 
    510  1100
    511  1100				   .
    512  1100							; 
    513  1100
    514  1100				   .
    515  1100							; 
    516  1100
    517  1100				   .
    518  1100							; 
    519  1100
    520  1100				   .
    521  1100							; 
    522  1100
    523  1100				   .
    524  1100							; 
    525  1100
    526  1100				   .
    527  1100							; 
    528  1100
    529  1100				   .
    530  1100							; 
    531  1100
    532  1100				   .
    533  1100							; 
    534  1100
    535  1100				   .L023		;  const req_load  =  128
    536  1100
    537  1100				   .L024		;  const req_level_up	=  129
    538  1100
    539  1100				   .L025		;  const req_game_over  =  130
    540  1100
    541  1100				   .L026		;  const req_move_left  =  131
    542  1100
    543  1100				   .L027		;  const req_move_up  =  132
    544  1100
    545  1100				   .L028		;  const req_move_right  =  133
    546  1100
    547  1100				   .L029		;  const req_move_down  =  134
    548  1100
    549  1100				   .L030		;  const req_level_reset  =  135
    550  1100
    551  1100				   .
    552  1100							; 
    553  1100
    554  1100				   .L031		;  const _00  =  $00
    555  1100
    556  1100				   .L032		;  const _02  =  $02
    557  1100
    558  1100				   .L033		;  const _04  =  $04
    559  1100
    560  1100				   .L034		;  const _06  =  $06
    561  1100
    562  1100				   .L035		;  const _08  =  $08
    563  1100
    564  1100				   .L036		;  const _0A  =  $0A
    565  1100
    566  1100				   .L037		;  const _0C  =  $0C
    567  1100
    568  1100				   .L038		;  const _0E  =  $0E
    569  1100
    570  1100				   .L039		;  const _10  =  $20
    571  1100
    572  1100				   .L040		;  const _12  =  $22
    573  1100
    574  1100				   .L041		;  const _14  =  $24
    575  1100
    576  1100				   .L042		;  const _16  =  $26
    577  1100
    578  1100				   .L043		;  const _18  =  $28
    579  1100
    580  1100				   .L044		;  const _1A  =  $2A
    581  1100
    582  1100				   .L045		;  const _1C  =  $2C
    583  1100
    584  1100				   .L046		;  const _1E  =  $2E
    585  1100
    586  1100				   .L047		;  const _20  =  $40
    587  1100
    588  1100				   .L048		;  const _22  =  $42
    589  1100
    590  1100				   .L049		;  const _24  =  $44
    591  1100
    592  1100				   .L050		;  const _26  =  $46
    593  1100
    594  1100				   .L051		;  const _28  =  $48
    595  1100
    596  1100				   .L052		;  const _2A  =  $4A
    597  1100
    598  1100				   .L053		;  const _2C  =  $4C
    599  1100
    600  1100				   .L054		;  const _2E  =  $4E
    601  1100
    602  1100				   .L055		;  const _30  =  $40
    603  1100
    604  1100				   .L056		;  const _32  =  $42
    605  1100
    606  1100				   .L057		;  const _34  =  $44
    607  1100
    608  1100				   .L058		;  const _36  =  $46
    609  1100
    610  1100				   .L059		;  const _38  =  $48
    611  1100
    612  1100				   .L060		;  const _3A  =  $4A
    613  1100
    614  1100				   .L061		;  const _3C  =  $4C
    615  1100
    616  1100				   .L062		;  const _3E  =  $4E
    617  1100
    618  1100				   .L063		;  const _40  =  $60
    619  1100
    620  1100				   .L064		;  const _42  =  $62
    621  1100
    622  1100				   .L065		;  const _44  =  $64
    623  1100
    624  1100				   .L066		;  const _46  =  $66
    625  1100
    626  1100				   .L067		;  const _48  =  $68
    627  1100
    628  1100				   .L068		;  const _4A  =  $6A
    629  1100
    630  1100				   .L069		;  const _4C  =  $6C
    631  1100
    632  1100				   .L070		;  const _4E  =  $6E
    633  1100
    634  1100				   .L071		;  const _50  =  $80
    635  1100
    636  1100				   .L072		;  const _52  =  $82
    637  1100
    638  1100				   .L073		;  const _54  =  $84
    639  1100
    640  1100				   .L074		;  const _56  =  $86
    641  1100
    642  1100				   .L075		;  const _58  =  $88
    643  1100
    644  1100				   .L076		;  const _5A  =  $8A
    645  1100
    646  1100				   .L077		;  const _5C  =  $8C
    647  1100
    648  1100				   .L078		;  const _5E  =  $8E
    649  1100
    650  1100				   .L079		;  const _60  =  $A0
    651  1100
    652  1100				   .L080		;  const _62  =  $A2
    653  1100
    654  1100				   .L081		;  const _64  =  $A4
    655  1100
    656  1100				   .L082		;  const _66  =  $A6
    657  1100
    658  1100				   .L083		;  const _68  =  $A8
    659  1100
    660  1100				   .L084		;  const _6A  =  $AA
    661  1100
    662  1100				   .L085		;  const _6C  =  $AC
    663  1100
    664  1100				   .L086		;  const _6E  =  $AE
    665  1100
    666  1100				   .L087		;  const _70  =  $C0
    667  1100
    668  1100				   .L088		;  const _72  =  $C2
    669  1100
    670  1100				   .L089		;  const _74  =  $C4
    671  1100
    672  1100				   .L090		;  const _76  =  $C6
    673  1100
    674  1100				   .L091		;  const _78  =  $C8
    675  1100
    676  1100				   .L092		;  const _7A  =  $CA
    677  1100
    678  1100				   .L093		;  const _7C  =  $CC
    679  1100
    680  1100				   .L094		;  const _7E  =  $CE
    681  1100
    682  1100				   .L095		;  const _80  =  $D0
    683  1100
    684  1100				   .L096		;  const _82  =  $D2
    685  1100
    686  1100				   .L097		;  const _84  =  $D4
    687  1100
    688  1100				   .L098		;  const _86  =  $D6
    689  1100
    690  1100				   .L099		;  const _88  =  $D8
    691  1100
    692  1100				   .L0100		;  const _8A  =  $DA
    693  1100
    694  1100				   .L0101		;  const _8C  =  $DC
    695  1100
    696  1100				   .L0102		;  const _8E  =  $DE
    697  1100
    698  1100				   .L0103		;  const _90  =  $B0
    699  1100
    700  1100				   .L0104		;  const _92  =  $B2
    701  1100
    702  1100				   .L0105		;  const _94  =  $B4
    703  1100
    704  1100				   .L0106		;  const _96  =  $B6
    705  1100
    706  1100				   .L0107		;  const _98  =  $B8
    707  1100
    708  1100				   .L0108		;  const _9A  =  $BA
    709  1100
    710  1100				   .L0109		;  const _9C  =  $BC
    711  1100
    712  1100				   .L0110		;  const _9E  =  $BE
    713  1100
    714  1100				   .L0111		;  const _A0  =  $90
    715  1100
    716  1100				   .L0112		;  const _A2  =  $92
    717  1100
    718  1100				   .L0113		;  const _A4  =  $94
    719  1100
    720  1100				   .L0114		;  const _A6  =  $96
    721  1100
    722  1100				   .L0115		;  const _A8  =  $98
    723  1100
    724  1100				   .L0116		;  const _AA  =  $9A
    725  1100
    726  1100				   .L0117		;  const _AC  =  $9C
    727  1100
    728  1100				   .L0118		;  const _AE  =  $9E
    729  1100
    730  1100				   .L0119		;  const _B0  =  $70
    731  1100
    732  1100				   .L0120		;  const _B2  =  $72
    733  1100
    734  1100				   .L0121		;  const _B4  =  $74
    735  1100
    736  1100				   .L0122		;  const _B6  =  $76
    737  1100
    738  1100				   .L0123		;  const _B8  =  $78
    739  1100
    740  1100				   .L0124		;  const _BA  =  $7A
    741  1100
    742  1100				   .L0125		;  const _BC  =  $7C
    743  1100
    744  1100				   .L0126		;  const _BE  =  $7E
    745  1100
    746  1100				   .L0127		;  const _C0  =  $50
    747  1100
    748  1100				   .L0128		;  const _C2  =  $52
    749  1100
    750  1100				   .L0129		;  const _C4  =  $54
    751  1100
    752  1100				   .L0130		;  const _C6  =  $56
    753  1100
    754  1100				   .L0131		;  const _C8  =  $58
    755  1100
    756  1100				   .L0132		;  const _CA  =  $5A
    757  1100
    758  1100				   .L0133		;  const _CC  =  $5C
    759  1100
    760  1100				   .L0134		;  const _CE  =  $5E
    761  1100
    762  1100				   .L0135		;  const _D0  =  $30
    763  1100
    764  1100				   .L0136		;  const _D2  =  $32
    765  1100
    766  1100				   .L0137		;  const _D4  =  $34
    767  1100
    768  1100				   .L0138		;  const _D6  =  $36
    769  1100
    770  1100				   .L0139		;  const _D8  =  $38
    771  1100
    772  1100				   .L0140		;  const _DA  =  $3A
    773  1100
    774  1100				   .L0141		;  const _DC  =  $3C
    775  1100
    776  1100				   .L0142		;  const _DE  =  $3E
    777  1100
    778  1100				   .L0143		;  const _E0  =  $20
    779  1100
    780  1100				   .L0144		;  const _E2  =  $22
    781  1100
    782  1100				   .L0145		;  const _E4  =  $24
    783  1100
    784  1100				   .L0146		;  const _E6  =  $26
    785  1100
    786  1100				   .L0147		;  const _E8  =  $28
    787  1100
    788  1100				   .L0148		;  const _EA  =  $2A
    789  1100
    790  1100				   .L0149		;  const _EC  =  $2C
    791  1100
    792  1100				   .L0150		;  const _EE  =  $2E
    793  1100
    794  1100				   .L0151		;  const _F0  =  $20
    795  1100
    796  1100				   .L0152		;  const _F2  =  $22
    797  1100
    798  1100				   .L0153		;  const _F4  =  $24
    799  1100
    800  1100				   .L0154		;  const _F6  =  $26
    801  1100
    802  1100				   .L0155		;  const _F8  =  $28
    803  1100
    804  1100				   .L0156		;  const _FA  =  $2A
    805  1100
    806  1100				   .L0157		;  const _FC  =  $2C
    807  1100
    808  1100				   .L0158		;  const _FE  =  $2E
    809  1100
    810  1100				   .
    811  1100							; 
    812  1100
    813  1100				   .
    814  1100							; 
    815  1100
    816  1100				   .
    817  1100							; 
    818  1100
    819  1100				   .
    820  1100							; 
    821  1100
    822  1100				   .
    823  1100							; 
    824  1100
    825  1100				   .
    826  1100							; 
    827  1100
    828  1100				   .
    829  1100							; 
    830  1100
    831  1100				   .
    832  1100							; 
    833  1100
    834  1100				   .
    835  1100							; 
    836  1100
    837  1100				   .
    838  1100							; 
    839  1100
    840  1100				   .L0159		;  dim _sc1  =  score
    841  1100
    842  1100				   .L0160		;  dim _sc2  =  score + 1
    843  1100
    844  1100				   .L0161		;  dim _sc3  =  score + 2
    845  1100
    846  1100				   .
    847  1100							; 
    848  1100
    849  1100				   .
    850  1100							; 
    851  1100
    852  1100				   .L0162		;  dim delay_counter  =  a
    853  1100
    854  1100				   .L0163		;  dim frame_counter  =  b
    855  1100
    856  1100				   .
    857  1100							; 
    858  1100
    859  1100				   .L0164		;  dim _BitOp_Ball_Shot_Dir  =  c
    860  1100
    861  1100				   .L0165		;  dim _Bit0_Ball_Shot_Dir_Left1  =  c
    862  1100
    863  1100				   .L0166		;  dim _Bit1_Ball_Shot_Dir_Left2  =  c
    864  1100
    865  1100				   .L0167		;  dim _Bit2_Ball_Shot_Dir_Right1  =  c
    866  1100
    867  1100				   .L0168		;  dim _Bit3_Ball_Shot_Dir_Right2  =  c
    868  1100
    869  1100				   .
    870  1100							; 
    871  1100
    872  1100				   .L0169		;  dim _BitOp_M0_Dir  =  d
    873  1100
    874  1100				   .L0170		;  dim _Bit0_M0_Dir_Up  =  d
    875  1100
    876  1100				   .L0171		;  dim _Bit1_M0_Dir_Down  =  d
    877  1100
    878  1100				   .L0172		;  dim _Bit2_M0_Dir_Left  =  d
    879  1100
    880  1100				   .L0173		;  dim _Bit3_M0_Dir_Right  =  d
    881  1100
    882  1100				   .
    883  1100							; 
    884  1100
    885  1100				   .L0174		;  dim _BitOp_P1_Dir  =  e
    886  1100
    887  1100				   .L0175		;  dim _Bit0_P1_Dir_Up  =  e
    888  1100
    889  1100				   .L0176		;  dim _Bit1_P1_Dir_Down  =  e
    890  1100
    891  1100				   .L0177		;  dim _Bit2_P1_Dir_Left  =  e
    892  1100
    893  1100				   .L0178		;  dim _Bit3_P1_Dir_Right  =  e
    894  1100
    895  1100				   .L0179		;  dim P1_facing  =  f
    896  1100
    897  1100				   .
    898  1100							; 
    899  1100
    900  1100				   .L0180		;  dim _Ch0_Sound  =  g
    901  1100
    902  1100				   .L0181		;  dim _Ch0_Duration  =  h
    903  1100
    904  1100				   .L0182		;  dim _Ch0_Counter  =  i
    905  1100
    906  1100				   .
    907  1100							; 
    908  1100
    909  1100				   .L0183		;  dim extra_wall_move_x  =  j
    910  1100
    911  1100				   .L0184		;  dim roommate_move_x  =  k
    912  1100
    913  1100				   .L0185		;  dim roommate_type  =  l
    914  1100
    915  1100				   .
    916  1100							; 
    917  1100
    918  1100				   .L0186		;  rem 16 bit velocity
    919  1100
    920  1100				   .L0187		;  dim Bally_velocity	=  p.q
    921  1100
    922  1100				   .L0188		;  rem 16 bit ball y position
    923  1100
    924  1100				   .L0189		;  dim Bally_position	=  bally.r
    925  1100
    926  1100				   .
    927  1100							; 
    928  1100
    929  1100				   .L0190		;  rem 16 bit velocity
    930  1100
    931  1100				   .L0191		;  dim M0y_velocity  =  s.t
    932  1100
    933  1100				   .L0192		;  rem 16 bit missile0 y position
    934  1100
    935  1100				   .L0193		;  dim M0y_position  =  missile0y.u
    936  1100
    937  1100				   .
    938  1100							; 
    939  1100
    940  1100				   .L0194		;  rem 16 bit velocity
    941  1100
    942  1100				   .L0195		;  dim P1y_velocity  =  v.w
    943  1100
    944  1100				   .L0196		;  rem 16 bit player1 y position
    945  1100
    946  1100				   .L0197		;  dim P1y_position  =  player1y.x
    947  1100
    948  1100				   .
    949  1100							; 
    950  1100
    951  1100				   .L0198		;  rem Various game states
    952  1100
    953  1100				   .L0199		;  dim _Bit_Game_State  =  y
    954  1100
    955  1100				   .L0200		;  dim _Bit0_roommate_Dir  =  y
    956  1100
    957  1100				   .L0201		;  dim _Bit1_Wall_Dir	=  y
    958  1100
    959  1100				   .
    960  1100							; 
    961  1100
    962  1100				   .
    963  1100							; 
    964  1100
    965  1100				   .L0202		;  dim _Bit3_Ball_Shot_Moving	=  y
    966  1100
    967  1100				   .L0203		;  dim _Bit4_Game_Over  =  y
    968  1100
    969  1100				   .L0204		;  dim _Bit5_Request_Pending  =  y
    970  1100
    971  1100				   .L0205		;  dim _Bit6_Flip_P0  =  y
    972  1100
    973  1100				   .L0206		;  dim _Bit7_M0_Moving  =  y
    974  1100
    975  1100				   .
    976  1100							; 
    977  1100
    978  1100				   .
    979  1100							; 
    980  1100
    981  1100				   .L0207		;  dim w_room_definition_start  =  w100
    982  1100
    983  1100				   .
    984  1100							; 
    985  1100
    986  1100				   .L0208		;  dim r_room_color_top  =  r100
    987  1100
    988  1100				   .L0209		;  dim w_room_color_top  =  w100
    989  1100
    990  1100				   .L0210		;  dim r_room_color_middle  =	r101
    991  1100
    992  1100				   .L0211		;  dim w_room_color_middle  =	w101
    993  1100
    994  1100				   .L0212		;  dim r_room_color_bottom  =	r105
    995  1100
    996  1100				   .L0213		;  dim w_room_color_bottom  =	w105
    997  1100
    998  1100				   .L0214		;  dim r_roommate_type_and_range  =  r106
    999  1100
   1000  1100				   .L0215		;  dim w_roommate_type_and_range  =  w106
   1001  1100
   1002  1100				   .L0216		;  dim r_roommate_y_startpos  =  r107
   1003  1100
   1004  1100				   .L0217		;  dim w_roommate_y_startpos  =  w107
   1005  1100
   1006  1100				   .L0218		;  dim r_roommate_x_startpos  =  r108
   1007  1100
   1008  1100				   .L0219		;  dim w_roommate_x_startpos  =  w108
   1009  1100
   1010  1100				   .L0220		;  dim r_extra_wall_width  =  r109
   1011  1100
   1012  1100				   .L0221		;  dim w_extra_wall_width  =  w109
   1013  1100
   1014  1100				   .L0222		;  dim r_extra_wall_type  =  r110
   1015  1100
   1016  1100				   .L0223		;  dim w_extra_wall_type  =  w110
   1017  1100
   1018  1100				   .L0224		;  dim r_extra_wall_startpos  =  r111
   1019  1100
   1020  1100				   .L0225		;  dim w_extra_wall_startpos  =  w111
   1021  1100
   1022  1100				   .
   1023  1100							; 
   1024  1100
   1025  1100				   .
   1026  1100							; 
   1027  1100
   1028  1100				   ._Start
   1029  1100							; _Start
   1030  1100
   1031  1100				   .L0226		;  WriteSendBuffer  =	req_load  :  _Bit5_Request_Pending{5}  =  1
   1032  1100
   1033  1100		       a9 80		      LDA	#req_load
   1034  1102		       8d f1 1f 	      STA	WriteSendBuffer
   1035  1105		       a5 ec		      LDA	_Bit5_Request_Pending
   1036  1107		       09 20		      ORA	#32
   1037  1109		       85 ec		      STA	_Bit5_Request_Pending
   1038  110b				   .L0227		;  frame_counter  =  0  :  COLUP0  =  _1C
   1039  110b
   1040  110b		       a9 00		      LDA	#0
   1041  110d		       85 d5		      STA	frame_counter
   1042  110f		       a9 2c		      LDA	#_1C
   1043  1111		       85 06		      STA	COLUP0
   1044  1113				   .L0228		;  score  =  0  :  pfscore1  =  255  :  pfscore2  =  255  :  pfscorecolor  =  _1C  :  scorecolor  =  _0E
   1045  1113
   1046  1113		       a9 00		      LDA	#$00
   1047  1115		       85 95		      STA	score+2
   1048  1117		       a9 00		      LDA	#$00
   1049  1119		       85 94		      STA	score+1
   1050  111b		       a9 00		      LDA	#$00
   1051  111d		       85 93		      STA	score
   1052  111f		       a9 ff		      LDA	#255
   1053  1121		       85 f2		      STA	pfscore1
   1054  1123		       85 f3		      STA	pfscore2
   1055  1125		       a9 2c		      LDA	#_1C
   1056  1127		       85 f4		      STA	pfscorecolor
   1057  1129		       a9 0e		      LDA	#_0E
   1058  112b		       85 a3		      STA	scorecolor
   1059  112d				   .L0229		;  player1x  =  30  :	player1y  =  0
   1060  112d
   1061  112d		       a9 1e		      LDA	#30
   1062  112f		       85 81		      STA	player1x
   1063  1131		       a9 00		      LDA	#0
   1064  1133		       85 86		      STA	player1y
   1065  1135				   .L0230		;  AUDV0  =  0  :  AUDV1  =  0  :  _Bit_Game_State  =	0
   1066  1135
   1067  1135		       a9 00		      LDA	#0
   1068  1137		       85 19		      STA	AUDV0
   1069  1139		       85 1a		      STA	AUDV1
   1070  113b		       85 ec		      STA	_Bit_Game_State
   1071  113d				   .L0231		;  missile0x  =  200  :  missile0y  =	200  :	missile0height	=  1  :  bally	=  0
   1072  113d
   1073  113d		       a9 c8		      LDA	#200
   1074  113f		       85 82		      STA	missile0x
   1075  1141		       85 91		      STA	missile0y
   1076  1143		       a9 01		      LDA	#1
   1077  1145		       85 90		      STA	missile0height
   1078  1147		       a9 00		      LDA	#0
   1079  1149		       85 89		      STA	bally
   1080  114b				   .L0232		;  w_extra_wall_startpos  =  200
   1081  114b
   1082  114b		       a9 c8		      LDA	#200
   1083  114d		       8d 6f f0 	      STA	w_extra_wall_startpos
   1084  1150				   .L0233		;  w_roommate_y_startpos  =  200  :  player0y	=  200	:  player0x  =	0
   1085  1150
   1086  1150		       a9 c8		      LDA	#200
   1087  1152		       8d 6b f0 	      STA	w_roommate_y_startpos
   1088  1155		       85 85		      STA	player0y
   1089  1157		       a9 00		      LDA	#0
   1090  1159		       85 80		      STA	player0x
   1091  115b				   .
   1092  115b							; 
   1093  115b
   1094  115b				   .L0234		;  pfclear
   1095  115b
   1096  115b		       a9 00		      LDA	#0
   1097  115d		       85 ee		      sta	temp7
   1098  115f		       a9 d1		      lda	#>(ret_point1-1)
   1099  1161		       48		      pha
   1100  1162		       a9 74		      lda	#<(ret_point1-1)
   1101  1164		       48		      pha
   1102  1165		       a9 f3		      lda	#>(pfclear-1)
   1103  1167		       48		      pha
   1104  1168		       a9 8f		      lda	#<(pfclear-1)
   1105  116a		       48		      pha
   1106  116b		       a5 ee		      lda	temp7
   1107  116d		       48		      pha
   1108  116e		       8a		      txa
   1109  116f		       48		      pha
   1110  1170		       a2 02		      ldx	#2
   1111  1172		       4c e8 ff 	      jmp	BS_jsr
   1112  1175				   ret_point1
   1113  1175				   .L0235		;  playfield:
   1114  1175
   1115  1175					      ifconst	pfres
   1116  1175		       a2 0b		      ldx	#(3>pfres)*(pfres*pfwidth-1)+(3<=pfres)*11
   1117  1177				  -	      else
   1118  1177				  -	      ldx	#((3*pfwidth-1)*((3*pfwidth-1)<47))+(47*((3*pfwidth-1)>=47))
   1119  1177					      endif
   1120  1177		       4c 86 d1 	      jmp	pflabel0
   1121  117a				   PF_data0
   1122  117a		       ff 0f		      .byte.b	%11111111, %00001111
   1123  117c					      if	(pfwidth>2)
   1124  117c		       1f ff		      .byte.b	%00011111, %11111111
   1125  117e					      endif
   1126  117e		       f8 00		      .byte.b	%11111000, %00000000
   1127  1180					      if	(pfwidth>2)
   1128  1180		       00 fc		      .byte.b	%00000000, %11111100
   1129  1182					      endif
   1130  1182		       ff 0f		      .byte.b	%11111111, %00001111
   1131  1184					      if	(pfwidth>2)
   1132  1184		       1f ff		      .byte.b	%00011111, %11111111
   1133  1186					      endif
   1134  1186				   pflabel0
   1135  1186		       bd 7a d1 	      lda	PF_data0,x
   1136  1189		       9d 70 10 	      sta	playfield-128,x
   1137  118c		       ca		      dex
   1138  118d		       10 f7		      bpl	pflabel0
   1139  118f				   .
   1140  118f							; 
   1141  118f
   1142  118f				   .L0236		;  player1color:
   1143  118f
   1144  118f		       a2 2a		      LDX	#<playercolorL0236_1
   1145  1191		       86 87		      STX	player1color
   1146  1193		       a9 f6		      LDA	#>playercolorL0236_1
   1147  1195		       85 88		      STA	player1color+1
   1148  1197				   .
   1149  1197							; 
   1150  1197
   1151  1197				   .
   1152  1197							; 
   1153  1197
   1154  1197				   .
   1155  1197							; 
   1156  1197
   1157  1197				   .L0237		;  w_room_color_top  =  _22  :  w_room_color_middle  =  _24  :  w_room_color_bottom  =  _26
   1158  1197
   1159  1197		       a9 42		      LDA	#_22
   1160  1199		       8d 64 f0 	      STA	w_room_color_top
   1161  119c		       a9 44		      LDA	#_24
   1162  119e		       8d 65 f0 	      STA	w_room_color_middle
   1163  11a1		       a9 46		      LDA	#_26
   1164  11a3		       8d 69 f0 	      STA	w_room_color_bottom
   1165  11a6				   .L0238		;  asm
   1166  11a6
   1167  11a6		       a9 f0		      lda	#>(r_room_color_middle-132+pfres*pfwidth)
   1168  11a8
   1169  11a8		       85 f1		      sta	pfcolortable+1
   1170  11aa
   1171  11aa		       a9 71		      lda	#<(r_room_color_middle-132+pfres*pfwidth)
   1172  11ac
   1173  11ac		       85 f0		      sta	pfcolortable
   1174  11ae
   1175  11ae				   ._inital_wait
   1176  11ae							; _inital_wait
   1177  11ae
   1178  11ae				   .L0239		;  COLUPF  =  r_room_color_top
   1179  11ae
   1180  11ae		       ad e4 f0 	      LDA	r_room_color_top
   1181  11b1		       85 08		      STA	COLUPF
   1182  11b3				   .L0240		;  COLUBK  =  _00
   1183  11b3
   1184  11b3		       a9 00		      LDA	#_00
   1185  11b5		       85 09		      STA	COLUBK
   1186  11b7				   .L0241		;  drawscreen
   1187  11b7
   1188  11b7		       85 ee		      sta	temp7
   1189  11b9		       a9 d1		      lda	#>(ret_point2-1)
   1190  11bb		       48		      pha
   1191  11bc		       a9 ce		      lda	#<(ret_point2-1)
   1192  11be		       48		      pha
   1193  11bf		       a9 f5		      lda	#>(drawscreen-1)
   1194  11c1		       48		      pha
   1195  11c2		       a9 82		      lda	#<(drawscreen-1)
   1196  11c4		       48		      pha
   1197  11c5		       a5 ee		      lda	temp7
   1198  11c7		       48		      pha
   1199  11c8		       8a		      txa
   1200  11c9		       48		      pha
   1201  11ca		       a2 02		      ldx	#2
   1202  11cc		       4c e8 ff 	      jmp	BS_jsr
   1203  11cf				   ret_point2
   1204  11cf				   .L0242		;  if ! joy0fire then goto _inital_wait
   1205  11cf
   1206  11cf		       24 0c		      bit	INPT4
   1207  11d1		       10 03		      BPL	.skipL0242
   1208  11d3				   .condpart0
   1209  11d3		       4c ae d1 	      jmp	._inital_wait
   1210  11d6
   1211  11d6				   .skipL0242
   1212  11d6				   .
   1213  11d6							; 
   1214  11d6
   1215  11d6				   .L0243		;  player1y  =  player_min_y
   1216  11d6
   1217  11d6		       a9 02		      LDA	#player_min_y
   1218  11d8		       85 86		      STA	player1y
   1219  11da				   .
   1220  11da							; 
   1221  11da
   1222  11da				   .L0244		;  _Bit4_Game_Over{4}	=  0
   1223  11da
   1224  11da		       a5 ec		      LDA	_Bit4_Game_Over
   1225  11dc		       29 ef		      AND	#239
   1226  11de		       85 ec		      STA	_Bit4_Game_Over
   1227  11e0				   .
   1228  11e0							; 
   1229  11e0
   1230  11e0				   .__Main_Loop
   1231  11e0							; __Main_Loop
   1232  11e0
   1233  11e0				   .L0245		;  COLUPF  =  r_room_color_top
   1234  11e0
   1235  11e0		       ad e4 f0 	      LDA	r_room_color_top
   1236  11e3		       85 08		      STA	COLUPF
   1237  11e5				   .L0246		;  NUSIZ1  =  $05
   1238  11e5
   1239  11e5		       a9 05		      LDA	#$05
   1240  11e7		       85 05		      STA	NUSIZ1
   1241  11e9				   .L0247		;  NUSIZ0  =  $10
   1242  11e9
   1243  11e9		       a9 10		      LDA	#$10
   1244  11eb		       85 04		      STA	NUSIZ0
   1245  11ed				   .L0248		;  COLUBK  =  _00
   1246  11ed
   1247  11ed		       a9 00		      LDA	#_00
   1248  11ef		       85 09		      STA	COLUBK
   1249  11f1				   .
   1250  11f1							; 
   1251  11f1
   1252  11f1				   .L0249		;  if switchreset then goto _Start
   1253  11f1
   1254  11f1		       a9 01		      lda	#1
   1255  11f3		       2c 82 02 	      bit	SWCHB
   1256  11f6		       d0 03		      BNE	.skipL0249
   1257  11f8				   .condpart1
   1258  11f8		       4c 00 d1 	      jmp	._Start
   1259  11fb
   1260  11fb				   .skipL0249
   1261  11fb				   .
   1262  11fb							; 
   1263  11fb
   1264  11fb				   .L0250		;  if frame_counter{2} then player1: 
   1265  11fb
   1266  11fb		       a5 d5		      LDA	frame_counter
   1267  11fd		       29 04		      AND	#4
   1268  11ff		       f0 0c		      BEQ	.skipL0250
   1269  1201				   .condpart2
   1270  1201		       a2 32		      LDX	#<player2then_1
   1271  1203		       86 8c		      STX	player1pointerlo
   1272  1205		       a9 f6		      LDA	#>player2then_1
   1273  1207		       85 8d		      STA	player1pointerhi
   1274  1209		       a9 07		      LDA	#7
   1275  120b		       85 8f		      STA	player1height
   1276  120d				   .skipL0250
   1277  120d				   .L0251		;  if ! frame_counter{2} then player1:
   1278  120d
   1279  120d		       a5 d5		      LDA	frame_counter
   1280  120f		       29 04		      AND	#4
   1281  1211		       d0 0c		      BNE	.skipL0251
   1282  1213				   .condpart3
   1283  1213		       a2 3a		      LDX	#<player3then_1
   1284  1215		       86 8c		      STX	player1pointerlo
   1285  1217		       a9 f6		      LDA	#>player3then_1
   1286  1219		       85 8d		      STA	player1pointerhi
   1287  121b		       a9 07		      LDA	#7
   1288  121d		       85 8f		      STA	player1height
   1289  121f				   .skipL0251
   1290  121f				   .
   1291  121f							; 
   1292  121f
   1293  121f				   .L0252		;  on roommate_type goto _roommate_Enemy_def _roommate_Air_Missile_def _roommate_Fuel_def _roommate_Soldier_def
   1294  121f
   1295  121f		       a6 df		      LDX	roommate_type
   1296  1221		       bd 2a d2 	      LDA	.L0252jumptablehi,x
   1297  1224		       48		      PHA
   1298  1225		       bd 2e d2 	      LDA	.L0252jumptablelo,x
   1299  1228		       48		      PHA
   1300  1229		       60		      RTS
   1301  122a				   .L0252jumptablehi
   1302  122a		       d2		      .byte.b	>(._roommate_Enemy_def-1)
   1303  122b		       d2		      .byte.b	>(._roommate_Air_Missile_def-1)
   1304  122c		       d2		      .byte.b	>(._roommate_Fuel_def-1)
   1305  122d		       d2		      .byte.b	>(._roommate_Soldier_def-1)
   1306  122e				   .L0252jumptablelo
   1307  122e		       31		      .byte.b	<(._roommate_Enemy_def-1)
   1308  122f		       58		      .byte.b	<(._roommate_Air_Missile_def-1)
   1309  1230		       67		      .byte.b	<(._roommate_Fuel_def-1)
   1310  1231		       76		      .byte.b	<(._roommate_Soldier_def-1)
   1311  1232				   .
   1312  1232							; 
   1313  1232
   1314  1232				   ._roommate_Enemy_def
   1315  1232							; _roommate_Enemy_def
   1316  1232
   1317  1232				   .L0253		;  if frame_counter{2} then player0: 
   1318  1232
   1319  1232		       a5 d5		      LDA	frame_counter
   1320  1234		       29 04		      AND	#4
   1321  1236		       f0 0c		      BEQ	.skipL0253
   1322  1238				   .condpart4
   1323  1238		       a2 42		      LDX	#<player4then_0
   1324  123a		       86 8a		      STX	player0pointerlo
   1325  123c		       a9 f6		      LDA	#>player4then_0
   1326  123e		       85 8b		      STA	player0pointerhi
   1327  1240		       a9 06		      LDA	#6
   1328  1242		       85 8e		      STA	player0height
   1329  1244				   .skipL0253
   1330  1244				   .L0254		;  if !frame_counter{2} then player0: 
   1331  1244
   1332  1244		       a5 d5		      LDA	frame_counter
   1333  1246		       29 04		      AND	#4
   1334  1248		       d0 0c		      BNE	.skipL0254
   1335  124a				   .condpart5
   1336  124a		       a2 49		      LDX	#<player5then_0
   1337  124c		       86 8a		      STX	player0pointerlo
   1338  124e		       a9 f6		      LDA	#>player5then_0
   1339  1250		       85 8b		      STA	player0pointerhi
   1340  1252		       a9 06		      LDA	#6
   1341  1254		       85 8e		      STA	player0height
   1342  1256				   .skipL0254
   1343  1256				   .L0255		;  goto _roommate_End_def
   1344  1256
   1345  1256		       4c 9b d2 	      jmp	._roommate_End_def
   1346  1259
   1347  1259				   .
   1348  1259							; 
   1349  1259
   1350  1259				   ._roommate_Air_Missile_def
   1351  1259							; _roommate_Air_Missile_def
   1352  1259
   1353  1259				   .L0256		;  player0: 
   1354  1259
   1355  1259		       a2 50		      LDX	#<playerL0256_0
   1356  125b		       86 8a		      STX	player0pointerlo
   1357  125d		       a9 f6		      LDA	#>playerL0256_0
   1358  125f		       85 8b		      STA	player0pointerhi
   1359  1261		       a9 0b		      LDA	#11
   1360  1263		       85 8e		      STA	player0height
   1361  1265				   .L0257		;  goto _roommate_End_def
   1362  1265
   1363  1265		       4c 9b d2 	      jmp	._roommate_End_def
   1364  1268
   1365  1268				   .
   1366  1268							; 
   1367  1268
   1368  1268				   ._roommate_Fuel_def
   1369  1268							; _roommate_Fuel_def
   1370  1268
   1371  1268				   .L0258		;  player0: 
   1372  1268
   1373  1268		       a2 5c		      LDX	#<playerL0258_0
   1374  126a		       86 8a		      STX	player0pointerlo
   1375  126c		       a9 f6		      LDA	#>playerL0258_0
   1376  126e		       85 8b		      STA	player0pointerhi
   1377  1270		       a9 19		      LDA	#25
   1378  1272		       85 8e		      STA	player0height
   1379  1274				   .L0259		;    goto _roommate_End_def
   1380  1274
   1381  1274		       4c 9b d2 	      jmp	._roommate_End_def
   1382  1277
   1383  1277				   .
   1384  1277							; 
   1385  1277
   1386  1277				   ._roommate_Soldier_def
   1387  1277							; _roommate_Soldier_def
   1388  1277
   1389  1277				   .L0260		;    if frame_counter{2} then player0: 
   1390  1277
   1391  1277		       a5 d5		      LDA	frame_counter
   1392  1279		       29 04		      AND	#4
   1393  127b		       f0 0c		      BEQ	.skipL0260
   1394  127d				   .condpart6
   1395  127d		       a2 76		      LDX	#<player6then_0
   1396  127f		       86 8a		      STX	player0pointerlo
   1397  1281		       a9 f6		      LDA	#>player6then_0
   1398  1283		       85 8b		      STA	player0pointerhi
   1399  1285		       a9 03		      LDA	#3
   1400  1287		       85 8e		      STA	player0height
   1401  1289				   .skipL0260
   1402  1289				   .L0261		;  if !frame_counter{2} then player0: 
   1403  1289
   1404  1289		       a5 d5		      LDA	frame_counter
   1405  128b		       29 04		      AND	#4
   1406  128d		       d0 0c		      BNE	.skipL0261
   1407  128f				   .condpart7
   1408  128f		       a2 7a		      LDX	#<player7then_0
   1409  1291		       86 8a		      STX	player0pointerlo
   1410  1293		       a9 f6		      LDA	#>player7then_0
   1411  1295		       85 8b		      STA	player0pointerhi
   1412  1297		       a9 03		      LDA	#3
   1413  1299		       85 8e		      STA	player0height
   1414  129b				   .skipL0261
   1415  129b				   ._roommate_End_def
   1416  129b							; _roommate_End_def
   1417  129b
   1418  129b				   .
   1419  129b							; 
   1420  129b
   1421  129b				   .
   1422  129b							; 
   1423  129b
   1424  129b				   .L0262		;  if r_extra_wall_type  <  4 then _Skip_Wall_Movement
   1425  129b
   1426  129b		       ad ee f0 	      LDA	r_extra_wall_type
   1427  129e		       c9 04		      CMP	#4
   1428  12a0					      if	((* - ._Skip_Wall_Movement) < 127) && ((* - ._Skip_Wall_Movement) > -128)
   1429  12a0		       90 30		      bcc	._Skip_Wall_Movement
   1430  12a2				  -	      else
   1431  12a2				  -	      bcs	.0skip_Skip_Wall_Movement
   1432  12a2				  -	      jmp	._Skip_Wall_Movement
   1433  12a2				  -.0skip_Skip_Wall_Movement
   1434  12a2					      endif
   1435  12a2				   .L0263		;  if _Bit1_Wall_Dir{1} then _Wall_move_left
   1436  12a2
   1437  12a2		       a5 ec		      LDA	_Bit1_Wall_Dir
   1438  12a4		       29 02		      AND	#2
   1439  12a6					      if	((* - ._Wall_move_left) < 127) && ((* - ._Wall_move_left) > -128)
   1440  12a6		       d0 18		      BNE	._Wall_move_left
   1441  12a8				  -	      else
   1442  12a8				  -	      beq	.1skip_Wall_move_left
   1443  12a8				  -	      jmp	._Wall_move_left
   1444  12a8				  -.1skip_Wall_move_left
   1445  12a8					      endif
   1446  12a8				   .L0264		;  if frame_counter{4} then extra_wall_move_x	=  extra_wall_move_x  +  1  :  if extra_wall_move_x  =	r_extra_wall_type then _Bit1_Wall_Dir{1}  =  1
   1447  12a8
   1448  12a8		       a5 d5		      LDA	frame_counter
   1449  12aa		       29 10		      AND	#16
   1450  12ac		       f0 0f		      BEQ	.skipL0264
   1451  12ae				   .condpart8
   1452  12ae		       e6 dd		      INC	extra_wall_move_x
   1453  12b0		       a5 dd		      LDA	extra_wall_move_x
   1454  12b2		       cd ee f0 	      CMP	r_extra_wall_type
   1455  12b5		       d0 06		      BNE	.skip8then
   1456  12b7				   .condpart9
   1457  12b7		       a5 ec		      LDA	_Bit1_Wall_Dir
   1458  12b9		       09 02		      ORA	#2
   1459  12bb		       85 ec		      STA	_Bit1_Wall_Dir
   1460  12bd				   .skip8then
   1461  12bd				   .skipL0264
   1462  12bd				   .L0265		;  goto _Skip_Wall_Movement
   1463  12bd
   1464  12bd		       4c d2 d2 	      jmp	._Skip_Wall_Movement
   1465  12c0
   1466  12c0				   ._Wall_move_left
   1467  12c0							; _Wall_move_left
   1468  12c0
   1469  12c0				   .L0266		;  if frame_counter{4} then extra_wall_move_x	=  extra_wall_move_x  -  1  :  if !extra_wall_move_x then _Bit1_Wall_Dir{1}  =	0
   1470  12c0
   1471  12c0		       a5 d5		      LDA	frame_counter
   1472  12c2		       29 10		      AND	#16
   1473  12c4		       f0 0c		      BEQ	.skipL0266
   1474  12c6				   .condpart10
   1475  12c6		       c6 dd		      DEC	extra_wall_move_x
   1476  12c8		       a5 dd		      LDA	extra_wall_move_x
   1477  12ca		       d0 06		      BNE	.skip10then
   1478  12cc				   .condpart11
   1479  12cc		       a5 ec		      LDA	_Bit1_Wall_Dir
   1480  12ce		       29 fd		      AND	#253
   1481  12d0		       85 ec		      STA	_Bit1_Wall_Dir
   1482  12d2				   .skip10then
   1483  12d2				   .skipL0266
   1484  12d2				   ._Skip_Wall_Movement
   1485  12d2							; _Skip_Wall_Movement
   1486  12d2
   1487  12d2				   .
   1488  12d2							; 
   1489  12d2
   1490  12d2				   .L0267		;  if r_roommate_type_and_range  <  4 then _Skip_Enemy_Movement
   1491  12d2
   1492  12d2		       ad ea f0 	      LDA	r_roommate_type_and_range
   1493  12d5		       c9 04		      CMP	#4
   1494  12d7					      if	((* - ._Skip_Enemy_Movement) < 127) && ((* - ._Skip_Enemy_Movement) > -128)
   1495  12d7		       90 2f		      bcc	._Skip_Enemy_Movement
   1496  12d9				  -	      else
   1497  12d9				  -	      bcs	.2skip_Skip_Enemy_Movement
   1498  12d9				  -	      jmp	._Skip_Enemy_Movement
   1499  12d9				  -.2skip_Skip_Enemy_Movement
   1500  12d9					      endif
   1501  12d9				   .L0268		;  if _Bit0_roommate_Dir{0} then _Enemy_move_left
   1502  12d9
   1503  12d9		       a5 ec		      LDA	_Bit0_roommate_Dir
   1504  12db		       4a		      LSR
   1505  12dc					      if	((* - ._Enemy_move_left) < 127) && ((* - ._Enemy_move_left) > -128)
   1506  12dc		       b0 18		      bcs	._Enemy_move_left
   1507  12de				  -	      else
   1508  12de				  -	      bcc	.3skip_Enemy_move_left
   1509  12de				  -	      jmp	._Enemy_move_left
   1510  12de				  -.3skip_Enemy_move_left
   1511  12de					      endif
   1512  12de				   .L0269		;  if !frame_counter{4} then roommate_move_x  =  roommate_move_x  +  1  :  if roommate_move_x	=  r_roommate_type_and_range then _Bit0_roommate_Dir{0}  =  1
   1513  12de
   1514  12de		       a5 d5		      LDA	frame_counter
   1515  12e0		       29 10		      AND	#16
   1516  12e2		       d0 0f		      BNE	.skipL0269
   1517  12e4				   .condpart12
   1518  12e4		       e6 de		      INC	roommate_move_x
   1519  12e6		       a5 de		      LDA	roommate_move_x
   1520  12e8		       cd ea f0 	      CMP	r_roommate_type_and_range
   1521  12eb		       d0 06		      BNE	.skip12then
   1522  12ed				   .condpart13
   1523  12ed		       a5 ec		      LDA	_Bit0_roommate_Dir
   1524  12ef		       09 01		      ORA	#1
   1525  12f1		       85 ec		      STA	_Bit0_roommate_Dir
   1526  12f3				   .skip12then
   1527  12f3				   .skipL0269
   1528  12f3				   .L0270		;  goto _Skip_Enemy_Movement
   1529  12f3
   1530  12f3		       4c 08 d3 	      jmp	._Skip_Enemy_Movement
   1531  12f6
   1532  12f6				   ._Enemy_move_left
   1533  12f6							; _Enemy_move_left
   1534  12f6
   1535  12f6				   .L0271		;  if !frame_counter{4} then roommate_move_x  =  roommate_move_x  -  1  :  if !roommate_move_x then _Bit0_roommate_Dir{0}  =  0
   1536  12f6
   1537  12f6		       a5 d5		      LDA	frame_counter
   1538  12f8		       29 10		      AND	#16
   1539  12fa		       d0 0c		      BNE	.skipL0271
   1540  12fc				   .condpart14
   1541  12fc		       c6 de		      DEC	roommate_move_x
   1542  12fe		       a5 de		      LDA	roommate_move_x
   1543  1300		       d0 06		      BNE	.skip14then
   1544  1302				   .condpart15
   1545  1302		       a5 ec		      LDA	_Bit0_roommate_Dir
   1546  1304		       29 fe		      AND	#254
   1547  1306		       85 ec		      STA	_Bit0_roommate_Dir
   1548  1308				   .skip14then
   1549  1308				   .skipL0271
   1550  1308				   ._Skip_Enemy_Movement
   1551  1308							; _Skip_Enemy_Movement
   1552  1308
   1553  1308				   .
   1554  1308							; 
   1555  1308
   1556  1308				   .L0272		;  frame_counter  =  frame_counter  +	1
   1557  1308
   1558  1308		       e6 d5		      INC	frame_counter
   1559  130a				   .
   1560  130a							; 
   1561  130a
   1562  130a				   .
   1563  130a							; 
   1564  130a
   1565  130a				   .L0273		;  if ReceiveBufferSize  >  response_size_minus_1 then goto change_room
   1566  130a
   1567  130a		       a9 17		      LDA	#response_size_minus_1
   1568  130c		       cd f3 1f 	      CMP	ReceiveBufferSize
   1569  130f		       b0 03		      BCS	.skipL0273
   1570  1311				   .condpart16
   1571  1311		       4c 88 da 	      jmp	.change_room
   1572  1314
   1573  1314				   .skipL0273
   1574  1314				   .
   1575  1314							; 
   1576  1314
   1577  1314				   .L0274		;  if _Bit5_Request_Pending{5}  ||  _Bit4_Game_Over{4} then goto _skip_game_action
   1578  1314
   1579  1314		       a5 ec		      LDA	_Bit5_Request_Pending
   1580  1316		       29 20		      AND	#32
   1581  1318		       f0 03		      BEQ	.skipL0274
   1582  131a				   .condpart17
   1583  131a		       4c 23 d3 	      jmp	.condpart18
   1584  131d				   .skipL0274
   1585  131d		       a5 ec		      LDA	_Bit4_Game_Over
   1586  131f		       29 10		      AND	#16
   1587  1321		       f0 03		      BEQ	.skip0OR
   1588  1323				   .condpart18
   1589  1323		       4c 11 d8 	      jmp	._skip_game_action
   1590  1326
   1591  1326				   .skip0OR
   1592  1326				   .
   1593  1326							; 
   1594  1326
   1595  1326				   .L0275		;  if frame_counter then _Skip_dec_game_counter
   1596  1326
   1597  1326		       a5 d5		      LDA	frame_counter
   1598  1328					      if	((* - ._Skip_dec_game_counter) < 127) && ((* - ._Skip_dec_game_counter) > -128)
   1599  1328		       d0 2a		      BNE	._Skip_dec_game_counter
   1600  132a				  -	      else
   1601  132a				  -	      beq	.4skip_Skip_dec_game_counter
   1602  132a				  -	      jmp	._Skip_dec_game_counter
   1603  132a				  -.4skip_Skip_dec_game_counter
   1604  132a					      endif
   1605  132a				   .
   1606  132a							; 
   1607  132a
   1608  132a				   .L0276		;  if !pfscore2 then _Decrease_small_counter
   1609  132a
   1610  132a		       a5 f3		      LDA	pfscore2
   1611  132c					      if	((* - ._Decrease_small_counter) < 127) && ((* - ._Decrease_small_counter) > -128)
   1612  132c		       f0 08		      BEQ	._Decrease_small_counter
   1613  132e				  -	      else
   1614  132e				  -	      bne	.5skip_Decrease_small_counter
   1615  132e				  -	      jmp	._Decrease_small_counter
   1616  132e				  -.5skip_Decrease_small_counter
   1617  132e					      endif
   1618  132e				   .L0277		;  pfscore2  =  pfscore2  /  2
   1619  132e
   1620  132e		       a5 f3		      LDA	pfscore2
   1621  1330		       4a		      lsr
   1622  1331		       85 f3		      STA	pfscore2
   1623  1333				   .L0278		;  goto _Skip_dec_game_counter
   1624  1333
   1625  1333		       4c 54 d3 	      jmp	._Skip_dec_game_counter
   1626  1336
   1627  1336				   ._Decrease_small_counter
   1628  1336							; _Decrease_small_counter
   1629  1336
   1630  1336				   .L0279		;  pfscore1  =  pfscore1  /  2
   1631  1336
   1632  1336		       a5 f2		      LDA	pfscore1
   1633  1338		       4a		      lsr
   1634  1339		       85 f2		      STA	pfscore1
   1635  133b				   .
   1636  133b							; 
   1637  133b
   1638  133b				   .L0280		;  if !pfscore1 then _Bit4_Game_Over{4}  =  1	:  _Ch0_Sound  =  4  :	_Ch0_Duration  =  1  :	_Ch0_Counter  =  0  :  goto _skip_game_action
   1639  133b
   1640  133b		       a5 f2		      LDA	pfscore1
   1641  133d		       d0 15		      BNE	.skipL0280
   1642  133f				   .condpart19
   1643  133f		       a5 ec		      LDA	_Bit4_Game_Over
   1644  1341		       09 10		      ORA	#16
   1645  1343		       85 ec		      STA	_Bit4_Game_Over
   1646  1345		       a9 04		      LDA	#4
   1647  1347		       85 da		      STA	_Ch0_Sound
   1648  1349		       a9 01		      LDA	#1
   1649  134b		       85 db		      STA	_Ch0_Duration
   1650  134d		       a9 00		      LDA	#0
   1651  134f		       85 dc		      STA	_Ch0_Counter
   1652  1351		       4c 11 d8 	      jmp	._skip_game_action
   1653  1354
   1654  1354				   .skipL0280
   1655  1354				   .
   1656  1354							; 
   1657  1354
   1658  1354				   ._Skip_dec_game_counter
   1659  1354							; _Skip_dec_game_counter
   1660  1354
   1661  1354				   .L0281		;  if delay_counter  >  0 then delay_counter  =  delay_counter  -  1  :  goto _skip_game_action
   1662  1354
   1663  1354		       a9 00		      LDA	#0
   1664  1356		       c5 d4		      CMP	delay_counter
   1665  1358		       b0 05		      BCS	.skipL0281
   1666  135a				   .condpart20
   1667  135a		       c6 d4		      DEC	delay_counter
   1668  135c		       4c 11 d8 	      jmp	._skip_game_action
   1669  135f
   1670  135f				   .skipL0281
   1671  135f				   .
   1672  135f							; 
   1673  135f
   1674  135f				   .
   1675  135f							; 
   1676  135f
   1677  135f				   .
   1678  135f							; 
   1679  135f
   1680  135f				   .L0282		;  if player0y  =  200 then goto __Skip_Enemy_Fire
   1681  135f
   1682  135f		       a5 85		      LDA	player0y
   1683  1361		       c9 c8		      CMP	#200
   1684  1363		       d0 03		      BNE	.skipL0282
   1685  1365				   .condpart21
   1686  1365		       4c f4 d3 	      jmp	.__Skip_Enemy_Fire
   1687  1368
   1688  1368				   .skipL0282
   1689  1368				   .L0283		;  if _Bit3_Ball_Shot_Moving{3}  ||  roommate_type then goto __Skip_Enemy_Fire
   1690  1368
   1691  1368		       a5 ec		      LDA	_Bit3_Ball_Shot_Moving
   1692  136a		       29 08		      AND	#8
   1693  136c		       f0 03		      BEQ	.skipL0283
   1694  136e				   .condpart22
   1695  136e		       4c 75 d3 	      jmp	.condpart23
   1696  1371				   .skipL0283
   1697  1371		       a5 df		      LDA	roommate_type
   1698  1373		       f0 03		      BEQ	.skip1OR
   1699  1375				   .condpart23
   1700  1375		       4c f4 d3 	      jmp	.__Skip_Enemy_Fire
   1701  1378
   1702  1378				   .skip1OR
   1703  1378				   .
   1704  1378							; 
   1705  1378
   1706  1378				   .L0284		;  _Bit3_Ball_Shot_Moving{3}  =  1  :	_BitOp_Ball_Shot_Dir  =  0  :  Bally_velocity  =  0.0  :  q  =	0
   1707  1378
   1708  1378		       a5 ec		      LDA	_Bit3_Ball_Shot_Moving
   1709  137a		       09 08		      ORA	#8
   1710  137c		       85 ec		      STA	_Bit3_Ball_Shot_Moving
   1711  137e		       a9 00		      LDA	#0
   1712  1380		       85 d6		      STA	_BitOp_Ball_Shot_Dir
   1713  1382		       a2 00		      LDX	#0
   1714  1384		       86 e4		      STX	q
   1715  1386		       a9 00		      LDA	#0
   1716  1388		       85 e3		      STA	Bally_velocity
   1717  138a		       a9 00		      LDA	#0
   1718  138c		       85 e4		      STA	q
   1719  138e				   .
   1720  138e							; 
   1721  138e
   1722  138e				   .L0285		;  ballx  =  player0x	+  4  :  bally	=  player0y  -	5
   1723  138e
   1724  138e		       a5 80		      LDA	player0x
   1725  1390		       18		      CLC
   1726  1391		       69 04		      ADC	#4
   1727  1393		       85 84		      STA	ballx
   1728  1395		       a5 85		      LDA	player0y
   1729  1397		       38		      SEC
   1730  1398		       e9 05		      SBC	#5
   1731  139a		       85 89		      STA	bally
   1732  139c				   .
   1733  139c							; 
   1734  139c
   1735  139c				   .
   1736  139c							; 
   1737  139c
   1738  139c				   .L0286		;  if _Ch0_Sound  <>  3 then _Ch0_Sound  =  2	:  _Ch0_Duration  =  1	:  _Ch0_Counter  =  0
   1739  139c
   1740  139c		       a5 da		      LDA	_Ch0_Sound
   1741  139e		       c9 03		      CMP	#3
   1742  13a0		       f0 0c		      BEQ	.skipL0286
   1743  13a2				   .condpart24
   1744  13a2		       a9 02		      LDA	#2
   1745  13a4		       85 da		      STA	_Ch0_Sound
   1746  13a6		       a9 01		      LDA	#1
   1747  13a8		       85 db		      STA	_Ch0_Duration
   1748  13aa		       a9 00		      LDA	#0
   1749  13ac		       85 dc		      STA	_Ch0_Counter
   1750  13ae				   .skipL0286
   1751  13ae				   .
   1752  13ae							; 
   1753  13ae
   1754  13ae				   .L0287		;  if player1x  >  player0x then _Bit2_Ball_Shot_Dir_Right1{2}  =  1 else _Bit0_Ball_Shot_Dir_Left1{0}  =  1
   1755  13ae
   1756  13ae		       a5 80		      LDA	player0x
   1757  13b0		       c5 81		      CMP	player1x
   1758  13b2		       b0 09		      BCS	.skipL0287
   1759  13b4				   .condpart25
   1760  13b4		       a5 d6		      LDA	_Bit2_Ball_Shot_Dir_Right1
   1761  13b6		       09 04		      ORA	#4
   1762  13b8		       85 d6		      STA	_Bit2_Ball_Shot_Dir_Right1
   1763  13ba		       4c c3 d3 	      jmp	.skipelse0
   1764  13bd				   .skipL0287
   1765  13bd		       a5 d6		      LDA	_Bit0_Ball_Shot_Dir_Left1
   1766  13bf		       09 01		      ORA	#1
   1767  13c1		       85 d6		      STA	_Bit0_Ball_Shot_Dir_Left1
   1768  13c3				   .skipelse0
   1769  13c3				   .L0288		;  if !_Bit2_Ball_Shot_Dir_Right1{2} then __Skip_Additional_Right
   1770  13c3
   1771  13c3		       a5 d6		      LDA	_Bit2_Ball_Shot_Dir_Right1
   1772  13c5		       29 04		      AND	#4
   1773  13c7					      if	((* - .__Skip_Additional_Right) < 127) && ((* - .__Skip_Additional_Right) > -128)
   1774  13c7		       f0 13		      BEQ	.__Skip_Additional_Right
   1775  13c9				  -	      else
   1776  13c9				  -	      bne	.6skip__Skip_Additional_Right
   1777  13c9				  -	      jmp	.__Skip_Additional_Right
   1778  13c9				  -.6skip__Skip_Additional_Right
   1779  13c9					      endif
   1780  13c9				   .L0289		;  temp4  =  player1x	-  player0x
   1781  13c9
   1782  13c9		       a5 81		      LDA	player1x
   1783  13cb		       38		      SEC
   1784  13cc		       e5 80		      SBC	player0x
   1785  13ce		       85 9f		      STA	temp4
   1786  13d0				   .L0290		;  if temp4  >  25 then _Bit3_Ball_Shot_Dir_Right2{3}	=  1
   1787  13d0
   1788  13d0		       a9 19		      LDA	#25
   1789  13d2		       c5 9f		      CMP	temp4
   1790  13d4		       b0 06		      BCS	.skipL0290
   1791  13d6				   .condpart26
   1792  13d6		       a5 d6		      LDA	_Bit3_Ball_Shot_Dir_Right2
   1793  13d8		       09 08		      ORA	#8
   1794  13da		       85 d6		      STA	_Bit3_Ball_Shot_Dir_Right2
   1795  13dc				   .skipL0290
   1796  13dc				   .__Skip_Additional_Right
   1797  13dc							; __Skip_Additional_Right
   1798  13dc
   1799  13dc				   .L0291		;  if !_Bit0_Ball_Shot_Dir_Left1{0} then __Skip_Enemy_Fire
   1800  13dc
   1801  13dc		       a5 d6		      LDA	_Bit0_Ball_Shot_Dir_Left1
   1802  13de		       4a		      LSR
   1803  13df					      if	((* - .__Skip_Enemy_Fire) < 127) && ((* - .__Skip_Enemy_Fire) > -128)
   1804  13df		       90 13		      bcc	.__Skip_Enemy_Fire
   1805  13e1				  -	      else
   1806  13e1				  -	      bcs	.7skip__Skip_Enemy_Fire
   1807  13e1				  -	      jmp	.__Skip_Enemy_Fire
   1808  13e1				  -.7skip__Skip_Enemy_Fire
   1809  13e1					      endif
   1810  13e1				   .L0292		;  temp4  =  player0x	-  player1x
   1811  13e1
   1812  13e1		       a5 80		      LDA	player0x
   1813  13e3		       38		      SEC
   1814  13e4		       e5 81		      SBC	player1x
   1815  13e6		       85 9f		      STA	temp4
   1816  13e8				   .L0293		;  if temp4  >  25 then _Bit1_Ball_Shot_Dir_Left2{1}  =  1
   1817  13e8
   1818  13e8		       a9 19		      LDA	#25
   1819  13ea		       c5 9f		      CMP	temp4
   1820  13ec		       b0 06		      BCS	.skipL0293
   1821  13ee				   .condpart27
   1822  13ee		       a5 d6		      LDA	_Bit1_Ball_Shot_Dir_Left2
   1823  13f0		       09 02		      ORA	#2
   1824  13f2		       85 d6		      STA	_Bit1_Ball_Shot_Dir_Left2
   1825  13f4				   .skipL0293
   1826  13f4				   .
   1827  13f4							; 
   1828  13f4
   1829  13f4				   .__Skip_Enemy_Fire
   1830  13f4							; __Skip_Enemy_Fire
   1831  13f4
   1832  13f4				   .
   1833  13f4							; 
   1834  13f4
   1835  13f4				   .
   1836  13f4							; 
   1837  13f4
   1838  13f4				   .
   1839  13f4							; 
   1840  13f4
   1841  13f4				   .L0294		;  if !_Bit3_Ball_Shot_Moving{3} then goto __Skip_Enemy_Missile
   1842  13f4
   1843  13f4		       a5 ec		      LDA	_Bit3_Ball_Shot_Moving
   1844  13f6		       29 08		      AND	#8
   1845  13f8		       d0 03		      BNE	.skipL0294
   1846  13fa				   .condpart28
   1847  13fa		       4c 75 d4 	      jmp	.__Skip_Enemy_Missile
   1848  13fd
   1849  13fd				   .skipL0294
   1850  13fd				   .
   1851  13fd							; 
   1852  13fd
   1853  13fd				   .
   1854  13fd							; 
   1855  13fd
   1856  13fd				   .L0295		;  if bally  >  player1y then bally  =  bally	-  1
   1857  13fd
   1858  13fd		       a5 86		      LDA	player1y
   1859  13ff		       c5 89		      CMP	bally
   1860  1401		       b0 02		      BCS	.skipL0295
   1861  1403				   .condpart29
   1862  1403		       c6 89		      DEC	bally
   1863  1405				   .skipL0295
   1864  1405				   .L0296		;  if _Bit0_Ball_Shot_Dir_Left1{0} then ballx	=  ballx  -  1	:  if _Bit1_Ball_Shot_Dir_Left2{1} then ballx  =  ballx  -  1
   1865  1405
   1866  1405		       a5 d6		      LDA	_Bit0_Ball_Shot_Dir_Left1
   1867  1407		       4a		      LSR
   1868  1408		       90 0a		      BCC	.skipL0296
   1869  140a				   .condpart30
   1870  140a		       c6 84		      DEC	ballx
   1871  140c		       a5 d6		      LDA	_Bit1_Ball_Shot_Dir_Left2
   1872  140e		       29 02		      AND	#2
   1873  1410		       f0 02		      BEQ	.skip30then
   1874  1412				   .condpart31
   1875  1412		       c6 84		      DEC	ballx
   1876  1414				   .skip30then
   1877  1414				   .skipL0296
   1878  1414				   .L0297		;  if _Bit2_Ball_Shot_Dir_Right1{2} then ballx  =  ballx  +  1  :  if _Bit3_Ball_Shot_Dir_Right2{3} then ballx  =  ballx  +  1
   1879  1414
   1880  1414		       a5 d6		      LDA	_Bit2_Ball_Shot_Dir_Right1
   1881  1416		       29 04		      AND	#4
   1882  1418		       f0 0a		      BEQ	.skipL0297
   1883  141a				   .condpart32
   1884  141a		       e6 84		      INC	ballx
   1885  141c		       a5 d6		      LDA	_Bit3_Ball_Shot_Dir_Right2
   1886  141e		       29 08		      AND	#8
   1887  1420		       f0 02		      BEQ	.skip32then
   1888  1422				   .condpart33
   1889  1422		       e6 84		      INC	ballx
   1890  1424				   .skip32then
   1891  1424				   .skipL0297
   1892  1424				   .
   1893  1424							; 
   1894  1424
   1895  1424				   .L0298		;  rem apply gravity
   1896  1424
   1897  1424				   .L0299		;  Bally_velocity  =  Bally_velocity  +  gravity_missile0
   1898  1424
   1899  1424		       a5 e4		      LDA	q
   1900  1426		       18		      CLC
   1901  1427		       69 06		      ADC	#6
   1902  1429		       85 e4		      STA	q
   1903  142b		       a5 e3		      LDA	Bally_velocity
   1904  142d		       69 00		      ADC	#0
   1905  142f		       85 e3		      STA	Bally_velocity
   1906  1431				   .L0300		;  Bally_position  =  Bally_position  +  Bally_velocity
   1907  1431
   1908  1431		       a5 e5		      LDA	r
   1909  1433		       18		      CLC
   1910  1434		       65 e4		      ADC	q
   1911  1436		       85 e5		      STA	r
   1912  1438		       a5 89		      LDA	Bally_position
   1913  143a		       65 e3		      ADC	Bally_velocity
   1914  143c		       85 89		      STA	Bally_position
   1915  143e				   .
   1916  143e							; 
   1917  143e
   1918  143e				   .
   1919  143e							; 
   1920  143e
   1921  143e				   .
   1922  143e							; 
   1923  143e
   1924  143e				   .L0301		;  if bally  <  _M_Edge_Top then goto __Delete_Enemy_Missile
   1925  143e
   1926  143e		       a5 89		      LDA	bally
   1927  1440		       c9 02		      CMP	#_M_Edge_Top
   1928  1442		       b0 03		      BCS	.skipL0301
   1929  1444				   .condpart34
   1930  1444		       4c 69 d4 	      jmp	.__Delete_Enemy_Missile
   1931  1447
   1932  1447				   .skipL0301
   1933  1447				   .L0302		;  if bally  >  _M_Edge_Bottom then goto __Delete_Enemy_Missile
   1934  1447
   1935  1447		       a9 58		      LDA	#_M_Edge_Bottom
   1936  1449		       c5 89		      CMP	bally
   1937  144b		       b0 03		      BCS	.skipL0302
   1938  144d				   .condpart35
   1939  144d		       4c 69 d4 	      jmp	.__Delete_Enemy_Missile
   1940  1450
   1941  1450				   .skipL0302
   1942  1450				   .L0303		;  if ballx  <  _M_Edge_Left then goto __Delete_Enemy_Missile
   1943  1450
   1944  1450		       a5 84		      LDA	ballx
   1945  1452		       c9 0e		      CMP	#_M_Edge_Left
   1946  1454		       b0 03		      BCS	.skipL0303
   1947  1456				   .condpart36
   1948  1456		       4c 69 d4 	      jmp	.__Delete_Enemy_Missile
   1949  1459
   1950  1459				   .skipL0303
   1951  1459				   .L0304		;  if ballx  >  _M_Edge_Right then goto __Delete_Enemy_Missile
   1952  1459
   1953  1459		       a9 94		      LDA	#_M_Edge_Right
   1954  145b		       c5 84		      CMP	ballx
   1955  145d		       b0 03		      BCS	.skipL0304
   1956  145f				   .condpart37
   1957  145f		       4c 69 d4 	      jmp	.__Delete_Enemy_Missile
   1958  1462
   1959  1462				   .skipL0304
   1960  1462				   .
   1961  1462							; 
   1962  1462
   1963  1462				   .
   1964  1462							; 
   1965  1462
   1966  1462				   .L0305		;  if !collision(playfield,ball) then goto __Skip_Enemy_Missile
   1967  1462
   1968  1462		       24 06		      bit	CXBLPF
   1969  1464		       30 03		      BMI	.skipL0305
   1970  1466				   .condpart38
   1971  1466		       4c 75 d4 	      jmp	.__Skip_Enemy_Missile
   1972  1469
   1973  1469				   .skipL0305
   1974  1469				   .
   1975  1469							; 
   1976  1469
   1977  1469				   .__Delete_Enemy_Missile
   1978  1469							; __Delete_Enemy_Missile
   1979  1469
   1980  1469				   .
   1981  1469							; 
   1982  1469
   1983  1469				   .
   1984  1469							; 
   1985  1469
   1986  1469				   .L0306		;  _Bit3_Ball_Shot_Moving{3}  =  0  :	ballx  =  200  :  bally  =  200
   1987  1469
   1988  1469		       a5 ec		      LDA	_Bit3_Ball_Shot_Moving
   1989  146b		       29 f7		      AND	#247
   1990  146d		       85 ec		      STA	_Bit3_Ball_Shot_Moving
   1991  146f		       a9 c8		      LDA	#200
   1992  1471		       85 84		      STA	ballx
   1993  1473		       85 89		      STA	bally
   1994  1475				   .
   1995  1475							; 
   1996  1475
   1997  1475				   .__Skip_Enemy_Missile
   1998  1475							; __Skip_Enemy_Missile
   1999  1475
   2000  1475				   .
   2001  1475							; 
   2002  1475
   2003  1475				   .
   2004  1475							; 
   2005  1475
   2006  1475				   .
   2007  1475							; 
   2008  1475
   2009  1475				   .
   2010  1475							; 
   2011  1475
   2012  1475				   .
   2013  1475							; 
   2014  1475
   2015  1475				   .L0307		;  if !joy0fire then goto __Skip_Fire
   2016  1475
   2017  1475		       24 0c		      bit	INPT4
   2018  1477		       10 03		      BPL	.skipL0307
   2019  1479				   .condpart39
   2020  1479		       4c 0b d5 	      jmp	.__Skip_Fire
   2021  147c
   2022  147c				   .skipL0307
   2023  147c				   .
   2024  147c							; 
   2025  147c
   2026  147c				   .
   2027  147c							; 
   2028  147c
   2029  147c				   .L0308		;  if _Bit7_M0_Moving{7}  ||  _Bit0_P1_Dir_Up{0} then goto __Skip_Fire
   2030  147c
   2031  147c		       24 ec		      BIT	_Bit7_M0_Moving
   2032  147e		       10 03		      BPL	.skipL0308
   2033  1480				   .condpart40
   2034  1480		       4c 88 d4 	      jmp	.condpart41
   2035  1483				   .skipL0308
   2036  1483		       a5 d8		      LDA	_Bit0_P1_Dir_Up
   2037  1485		       4a		      LSR
   2038  1486		       90 03		      BCC	.skip2OR
   2039  1488				   .condpart41
   2040  1488		       4c 0b d5 	      jmp	.__Skip_Fire
   2041  148b
   2042  148b				   .skip2OR
   2043  148b				   .
   2044  148b							; 
   2045  148b
   2046  148b				   .
   2047  148b							; 
   2048  148b
   2049  148b				   .
   2050  148b							; 
   2051  148b
   2052  148b				   .L0309		;  _BitOp_M0_Dir  =  _BitOp_P1_Dir
   2053  148b
   2054  148b		       a5 d8		      LDA	_BitOp_P1_Dir
   2055  148d		       85 d7		      STA	_BitOp_M0_Dir
   2056  148f				   .
   2057  148f							; 
   2058  148f
   2059  148f				   .L0310		;  if _BitOp_M0_Dir  =  0  &&	_Bit6_Flip_P0{6} then _BitOp_M0_Dir  =	4
   2060  148f
   2061  148f		       a5 d7		      LDA	_BitOp_M0_Dir
   2062  1491		       c9 00		      CMP	#0
   2063  1493		       d0 08		      BNE	.skipL0310
   2064  1495				   .condpart42
   2065  1495		       24 ec		      BIT	_Bit6_Flip_P0
   2066  1497		       50 04		      BVC	.skip42then
   2067  1499				   .condpart43
   2068  1499		       a9 04		      LDA	#4
   2069  149b		       85 d7		      STA	_BitOp_M0_Dir
   2070  149d				   .skip42then
   2071  149d				   .skipL0310
   2072  149d				   .L0311		;  if _BitOp_M0_Dir  =  0  &&	! _Bit6_Flip_P0{6} then _BitOp_M0_Dir  =  8
   2073  149d
   2074  149d		       a5 d7		      LDA	_BitOp_M0_Dir
   2075  149f		       c9 00		      CMP	#0
   2076  14a1		       d0 08		      BNE	.skipL0311
   2077  14a3				   .condpart44
   2078  14a3		       24 ec		      BIT	_Bit6_Flip_P0
   2079  14a5		       70 04		      BVS	.skip44then
   2080  14a7				   .condpart45
   2081  14a7		       a9 08		      LDA	#8
   2082  14a9		       85 d7		      STA	_BitOp_M0_Dir
   2083  14ab				   .skip44then
   2084  14ab				   .skipL0311
   2085  14ab				   .
   2086  14ab							; 
   2087  14ab
   2088  14ab				   .
   2089  14ab							; 
   2090  14ab
   2091  14ab				   .L0312		;  _Bit7_M0_Moving{7}	=  1
   2092  14ab
   2093  14ab		       a5 ec		      LDA	_Bit7_M0_Moving
   2094  14ad		       09 80		      ORA	#128
   2095  14af		       85 ec		      STA	_Bit7_M0_Moving
   2096  14b1				   .
   2097  14b1							; 
   2098  14b1
   2099  14b1				   .
   2100  14b1							; 
   2101  14b1
   2102  14b1				   .L0313		;  M0y_velocity  =  0.0  :  u	=  0
   2103  14b1
   2104  14b1		       a2 00		      LDX	#0
   2105  14b3		       86 e7		      STX	t
   2106  14b5		       a9 00		      LDA	#0
   2107  14b7		       85 e6		      STA	M0y_velocity
   2108  14b9		       a9 00		      LDA	#0
   2109  14bb		       85 e8		      STA	u
   2110  14bd				   .
   2111  14bd							; 
   2112  14bd
   2113  14bd				   .
   2114  14bd							; 
   2115  14bd
   2116  14bd				   .L0314		;  if _Bit1_M0_Dir_Down{1} then missile0x  =  player1x  +  9  :  missile0y  =	player1y  -  1
   2117  14bd
   2118  14bd		       a5 d7		      LDA	_Bit1_M0_Dir_Down
   2119  14bf		       29 02		      AND	#2
   2120  14c1		       f0 0e		      BEQ	.skipL0314
   2121  14c3				   .condpart46
   2122  14c3		       a5 81		      LDA	player1x
   2123  14c5		       18		      CLC
   2124  14c6		       69 09		      ADC	#9
   2125  14c8		       85 82		      STA	missile0x
   2126  14ca		       a5 86		      LDA	player1y
   2127  14cc		       38		      SEC
   2128  14cd		       e9 01		      SBC	#1
   2129  14cf		       85 91		      STA	missile0y
   2130  14d1				   .skipL0314
   2131  14d1				   .L0315		;  if _Bit2_M0_Dir_Left{2} then missile0x  =  player1x  +  2  :  missile0y  =	player1y  -  3
   2132  14d1
   2133  14d1		       a5 d7		      LDA	_Bit2_M0_Dir_Left
   2134  14d3		       29 04		      AND	#4
   2135  14d5		       f0 0e		      BEQ	.skipL0315
   2136  14d7				   .condpart47
   2137  14d7		       a5 81		      LDA	player1x
   2138  14d9		       18		      CLC
   2139  14da		       69 02		      ADC	#2
   2140  14dc		       85 82		      STA	missile0x
   2141  14de		       a5 86		      LDA	player1y
   2142  14e0		       38		      SEC
   2143  14e1		       e9 03		      SBC	#3
   2144  14e3		       85 91		      STA	missile0y
   2145  14e5				   .skipL0315
   2146  14e5				   .L0316		;  if _Bit3_M0_Dir_Right{3} then missile0x  =	player1x  +  16  :  missile0y  =  player1y  -  3
   2147  14e5
   2148  14e5		       a5 d7		      LDA	_Bit3_M0_Dir_Right
   2149  14e7		       29 08		      AND	#8
   2150  14e9		       f0 0e		      BEQ	.skipL0316
   2151  14eb				   .condpart48
   2152  14eb		       a5 81		      LDA	player1x
   2153  14ed		       18		      CLC
   2154  14ee		       69 10		      ADC	#16
   2155  14f0		       85 82		      STA	missile0x
   2156  14f2		       a5 86		      LDA	player1y
   2157  14f4		       38		      SEC
   2158  14f5		       e9 03		      SBC	#3
   2159  14f7		       85 91		      STA	missile0y
   2160  14f9				   .skipL0316
   2161  14f9				   .
   2162  14f9							; 
   2163  14f9
   2164  14f9				   .
   2165  14f9							; 
   2166  14f9
   2167  14f9				   .L0317		;  if _Ch0_Sound  <>  3 then _Ch0_Sound  =  2	:  _Ch0_Duration  =  1	:  _Ch0_Counter  =  0
   2168  14f9
   2169  14f9		       a5 da		      LDA	_Ch0_Sound
   2170  14fb		       c9 03		      CMP	#3
   2171  14fd		       f0 0c		      BEQ	.skipL0317
   2172  14ff				   .condpart49
   2173  14ff		       a9 02		      LDA	#2
   2174  1501		       85 da		      STA	_Ch0_Sound
   2175  1503		       a9 01		      LDA	#1
   2176  1505		       85 db		      STA	_Ch0_Duration
   2177  1507		       a9 00		      LDA	#0
   2178  1509		       85 dc		      STA	_Ch0_Counter
   2179  150b				   .skipL0317
   2180  150b				   .
   2181  150b							; 
   2182  150b
   2183  150b				   .__Skip_Fire
   2184  150b							; __Skip_Fire
   2185  150b
   2186  150b				   .
   2187  150b							; 
   2188  150b
   2189  150b				   .
   2190  150b							; 
   2191  150b
   2192  150b				   .
   2193  150b							; 
   2194  150b
   2195  150b				   .
   2196  150b							; 
   2197  150b
   2198  150b				   .L0318		;  if !_Bit7_M0_Moving{7} then goto __Skip_Missile
   2199  150b
   2200  150b		       24 ec		      BIT	_Bit7_M0_Moving
   2201  150d		       30 03		      BMI	.skipL0318
   2202  150f				   .condpart50
   2203  150f		       4c 8a d5 	      jmp	.__Skip_Missile
   2204  1512
   2205  1512				   .skipL0318
   2206  1512				   .
   2207  1512							; 
   2208  1512
   2209  1512				   .
   2210  1512							; 
   2211  1512
   2212  1512				   .L0319		;  if _Bit1_M0_Dir_Down{1} then missile0y  =  missile0y  +  2
   2213  1512
   2214  1512		       a5 d7		      LDA	_Bit1_M0_Dir_Down
   2215  1514		       29 02		      AND	#2
   2216  1516		       f0 07		      BEQ	.skipL0319
   2217  1518				   .condpart51
   2218  1518		       a5 91		      LDA	missile0y
   2219  151a		       18		      CLC
   2220  151b		       69 02		      ADC	#2
   2221  151d		       85 91		      STA	missile0y
   2222  151f				   .skipL0319
   2223  151f				   .L0320		;  if _Bit2_M0_Dir_Left{2} then missile0x  =  missile0x  -  2
   2224  151f
   2225  151f		       a5 d7		      LDA	_Bit2_M0_Dir_Left
   2226  1521		       29 04		      AND	#4
   2227  1523		       f0 07		      BEQ	.skipL0320
   2228  1525				   .condpart52
   2229  1525		       a5 82		      LDA	missile0x
   2230  1527		       38		      SEC
   2231  1528		       e9 02		      SBC	#2
   2232  152a		       85 82		      STA	missile0x
   2233  152c				   .skipL0320
   2234  152c				   .L0321		;  if _Bit3_M0_Dir_Right{3} then missile0x  =	missile0x  +  2
   2235  152c
   2236  152c		       a5 d7		      LDA	_Bit3_M0_Dir_Right
   2237  152e		       29 08		      AND	#8
   2238  1530		       f0 07		      BEQ	.skipL0321
   2239  1532				   .condpart53
   2240  1532		       a5 82		      LDA	missile0x
   2241  1534		       18		      CLC
   2242  1535		       69 02		      ADC	#2
   2243  1537		       85 82		      STA	missile0x
   2244  1539				   .skipL0321
   2245  1539				   .
   2246  1539							; 
   2247  1539
   2248  1539				   .L0322		;  rem apply gravity
   2249  1539
   2250  1539				   .L0323		;  M0y_velocity  =  M0y_velocity  +  gravity_missile0
   2251  1539
   2252  1539		       a5 e7		      LDA	t
   2253  153b		       18		      CLC
   2254  153c		       69 06		      ADC	#6
   2255  153e		       85 e7		      STA	t
   2256  1540		       a5 e6		      LDA	M0y_velocity
   2257  1542		       69 00		      ADC	#0
   2258  1544		       85 e6		      STA	M0y_velocity
   2259  1546				   .L0324		;  M0y_position  =  M0y_position  +  M0y_velocity
   2260  1546
   2261  1546		       a5 e8		      LDA	u
   2262  1548		       18		      CLC
   2263  1549		       65 e7		      ADC	t
   2264  154b		       85 e8		      STA	u
   2265  154d		       a5 91		      LDA	M0y_position
   2266  154f		       65 e6		      ADC	M0y_velocity
   2267  1551		       85 91		      STA	M0y_position
   2268  1553				   .
   2269  1553							; 
   2270  1553
   2271  1553				   .
   2272  1553							; 
   2273  1553
   2274  1553				   .
   2275  1553							; 
   2276  1553
   2277  1553				   .L0325		;  if missile0y  <  _M_Edge_Top then goto __Delete_Missile
   2278  1553
   2279  1553		       a5 91		      LDA	missile0y
   2280  1555		       c9 02		      CMP	#_M_Edge_Top
   2281  1557		       b0 03		      BCS	.skipL0325
   2282  1559				   .condpart54
   2283  1559		       4c 7e d5 	      jmp	.__Delete_Missile
   2284  155c
   2285  155c				   .skipL0325
   2286  155c				   .L0326		;  if missile0y  >  _M_Edge_Bottom then goto __Delete_Missile
   2287  155c
   2288  155c		       a9 58		      LDA	#_M_Edge_Bottom
   2289  155e		       c5 91		      CMP	missile0y
   2290  1560		       b0 03		      BCS	.skipL0326
   2291  1562				   .condpart55
   2292  1562		       4c 7e d5 	      jmp	.__Delete_Missile
   2293  1565
   2294  1565				   .skipL0326
   2295  1565				   .L0327		;  if missile0x  <  _M_Edge_Left then goto __Delete_Missile
   2296  1565
   2297  1565		       a5 82		      LDA	missile0x
   2298  1567		       c9 0e		      CMP	#_M_Edge_Left
   2299  1569		       b0 03		      BCS	.skipL0327
   2300  156b				   .condpart56
   2301  156b		       4c 7e d5 	      jmp	.__Delete_Missile
   2302  156e
   2303  156e				   .skipL0327
   2304  156e				   .L0328		;  if missile0x  >  _M_Edge_Right then goto __Delete_Missile
   2305  156e
   2306  156e		       a9 94		      LDA	#_M_Edge_Right
   2307  1570		       c5 82		      CMP	missile0x
   2308  1572		       b0 03		      BCS	.skipL0328
   2309  1574				   .condpart57
   2310  1574		       4c 7e d5 	      jmp	.__Delete_Missile
   2311  1577
   2312  1577				   .skipL0328
   2313  1577				   .
   2314  1577							; 
   2315  1577
   2316  1577				   .
   2317  1577							; 
   2318  1577
   2319  1577				   .L0329		;  if !collision(playfield,missile0) then goto __Skip_Missile
   2320  1577
   2321  1577		       24 04		      bit	CXM0FB
   2322  1579		       30 03		      BMI	.skipL0329
   2323  157b				   .condpart58
   2324  157b		       4c 8a d5 	      jmp	.__Skip_Missile
   2325  157e
   2326  157e				   .skipL0329
   2327  157e				   .
   2328  157e							; 
   2329  157e
   2330  157e				   .
   2331  157e							; 
   2332  157e
   2333  157e				   .
   2334  157e							; 
   2335  157e
   2336  157e				   .
   2337  157e							; 
   2338  157e
   2339  157e				   .__Delete_Missile
   2340  157e							; __Delete_Missile
   2341  157e
   2342  157e				   .
   2343  157e							; 
   2344  157e
   2345  157e				   .
   2346  157e							; 
   2347  157e
   2348  157e				   .L0330		;  _Bit7_M0_Moving{7}	=  0  :  missile0x  =  200  :  missile0y  =  200
   2349  157e
   2350  157e		       a5 ec		      LDA	_Bit7_M0_Moving
   2351  1580		       29 7f		      AND	#127
   2352  1582		       85 ec		      STA	_Bit7_M0_Moving
   2353  1584		       a9 c8		      LDA	#200
   2354  1586		       85 82		      STA	missile0x
   2355  1588		       85 91		      STA	missile0y
   2356  158a				   .
   2357  158a							; 
   2358  158a
   2359  158a				   .__Skip_Missile
   2360  158a							; __Skip_Missile
   2361  158a
   2362  158a				   .
   2363  158a							; 
   2364  158a
   2365  158a				   .
   2366  158a							; 
   2367  158a
   2368  158a				   .
   2369  158a							; 
   2370  158a
   2371  158a				   .
   2372  158a							; 
   2373  158a
   2374  158a				   .L0331		;  if !collision(player0,missile0) then __Skip_Shot_Enemy
   2375  158a
   2376  158a		       24 00		      bit	CXM0P
   2377  158c					      if	((* - .__Skip_Shot_Enemy) < 127) && ((* - .__Skip_Shot_Enemy) > -128)
   2378  158c		       50 38		      bvc	.__Skip_Shot_Enemy
   2379  158e				  -	      else
   2380  158e				  -	      bvs	.8skip__Skip_Shot_Enemy
   2381  158e				  -	      jmp	.__Skip_Shot_Enemy
   2382  158e				  -.8skip__Skip_Shot_Enemy
   2383  158e					      endif
   2384  158e				   .
   2385  158e							; 
   2386  158e
   2387  158e				   .
   2388  158e							; 
   2389  158e
   2390  158e				   .L0332		;  _Bit7_M0_Moving{7}	=  0  :  missile0x  =  200  :  missile0y  =  200
   2391  158e
   2392  158e		       a5 ec		      LDA	_Bit7_M0_Moving
   2393  1590		       29 7f		      AND	#127
   2394  1592		       85 ec		      STA	_Bit7_M0_Moving
   2395  1594		       a9 c8		      LDA	#200
   2396  1596		       85 82		      STA	missile0x
   2397  1598		       85 91		      STA	missile0y
   2398  159a				   .
   2399  159a							; 
   2400  159a
   2401  159a				   .L0333		;  if roommate_type  >  1 then __Skip_Shot_Enemy
   2402  159a
   2403  159a		       a9 01		      LDA	#1
   2404  159c		       c5 df		      CMP	roommate_type
   2405  159e					      if	((* - .__Skip_Shot_Enemy) < 127) && ((* - .__Skip_Shot_Enemy) > -128)
   2406  159e		       90 26		      bcc	.__Skip_Shot_Enemy
   2407  15a0				  -	      else
   2408  15a0				  -	      bcs	.9skip__Skip_Shot_Enemy
   2409  15a0				  -	      jmp	.__Skip_Shot_Enemy
   2410  15a0				  -.9skip__Skip_Shot_Enemy
   2411  15a0					      endif
   2412  15a0				   .
   2413  15a0							; 
   2414  15a0
   2415  15a0				   .L0334		;  _Ch0_Sound	=  1  :  _Ch0_Duration	=  1  :  _Ch0_Counter  =  0
   2416  15a0
   2417  15a0		       a9 01		      LDA	#1
   2418  15a2		       85 da		      STA	_Ch0_Sound
   2419  15a4		       85 db		      STA	_Ch0_Duration
   2420  15a6		       a9 00		      LDA	#0
   2421  15a8		       85 dc		      STA	_Ch0_Counter
   2422  15aa				   .
   2423  15aa							; 
   2424  15aa
   2425  15aa				   .
   2426  15aa							; 
   2427  15aa
   2428  15aa				   .L0335		;  player0y  =  200  :  w_roommate_y_startpos	=  200	:  score  =  score  +  40
   2429  15aa
   2430  15aa		       a9 c8		      LDA	#200
   2431  15ac		       85 85		      STA	player0y
   2432  15ae		       8d 6b f0 	      STA	w_roommate_y_startpos
   2433  15b1		       f8		      SED
   2434  15b2		       18		      CLC
   2435  15b3		       a5 95		      LDA	score+2
   2436  15b5		       69 40		      ADC	#$40
   2437  15b7		       85 95		      STA	score+2
   2438  15b9		       a5 94		      LDA	score+1
   2439  15bb		       69 00		      ADC	#$00
   2440  15bd		       85 94		      STA	score+1
   2441  15bf		       a5 93		      LDA	score
   2442  15c1		       69 00		      ADC	#$00
   2443  15c3		       85 93		      STA	score
   2444  15c5		       d8		      CLD
   2445  15c6				   .
   2446  15c6							; 
   2447  15c6
   2448  15c6				   .__Skip_Shot_Enemy
   2449  15c6							; __Skip_Shot_Enemy
   2450  15c6
   2451  15c6				   .
   2452  15c6							; 
   2453  15c6
   2454  15c6				   .
   2455  15c6							; 
   2456  15c6
   2457  15c6				   .
   2458  15c6							; 
   2459  15c6
   2460  15c6				   .
   2461  15c6							; 
   2462  15c6
   2463  15c6				   .L0336		;  if !collision(ball,missile0) then __Skip_Shot_Extra_Wall
   2464  15c6
   2465  15c6		       24 04		      bit	CXM0FB
   2466  15c8					      if	((* - .__Skip_Shot_Extra_Wall) < 127) && ((* - .__Skip_Shot_Extra_Wall) > -128)
   2467  15c8		       50 3b		      bvc	.__Skip_Shot_Extra_Wall
   2468  15ca				  -	      else
   2469  15ca				  -	      bvs	.10skip__Skip_Shot_Extra_Wall
   2470  15ca				  -	      jmp	.__Skip_Shot_Extra_Wall
   2471  15ca				  -.10skip__Skip_Shot_Extra_Wall
   2472  15ca					      endif
   2473  15ca				   .
   2474  15ca							; 
   2475  15ca
   2476  15ca				   .
   2477  15ca							; 
   2478  15ca
   2479  15ca				   .L0337		;  _Bit7_M0_Moving{7}	=  0  :  missile0x  =  200  :  missile0y  =  200
   2480  15ca
   2481  15ca		       a5 ec		      LDA	_Bit7_M0_Moving
   2482  15cc		       29 7f		      AND	#127
   2483  15ce		       85 ec		      STA	_Bit7_M0_Moving
   2484  15d0		       a9 c8		      LDA	#200
   2485  15d2		       85 82		      STA	missile0x
   2486  15d4		       85 91		      STA	missile0y
   2487  15d6				   .
   2488  15d6							; 
   2489  15d6
   2490  15d6				   .
   2491  15d6							; 
   2492  15d6
   2493  15d6				   .L0338		;  if r_extra_wall_type  >  3 then __Skip_Shot_Extra_Wall
   2494  15d6
   2495  15d6		       a9 03		      LDA	#3
   2496  15d8		       cd ee f0 	      CMP	r_extra_wall_type
   2497  15db					      if	((* - .__Skip_Shot_Extra_Wall) < 127) && ((* - .__Skip_Shot_Extra_Wall) > -128)
   2498  15db		       90 28		      bcc	.__Skip_Shot_Extra_Wall
   2499  15dd				  -	      else
   2500  15dd				  -	      bcs	.11skip__Skip_Shot_Extra_Wall
   2501  15dd				  -	      jmp	.__Skip_Shot_Extra_Wall
   2502  15dd				  -.11skip__Skip_Shot_Extra_Wall
   2503  15dd					      endif
   2504  15dd				   .
   2505  15dd							; 
   2506  15dd
   2507  15dd				   .L0339		;  _Ch0_Sound	=  1  :  _Ch0_Duration	=  1  :  _Ch0_Counter  =  0
   2508  15dd
   2509  15dd		       a9 01		      LDA	#1
   2510  15df		       85 da		      STA	_Ch0_Sound
   2511  15e1		       85 db		      STA	_Ch0_Duration
   2512  15e3		       a9 00		      LDA	#0
   2513  15e5		       85 dc		      STA	_Ch0_Counter
   2514  15e7				   .L0340		;  w_extra_wall_startpos  =  200  :  bally  =	0  :  score  =	score  +  10
   2515  15e7
   2516  15e7		       a9 c8		      LDA	#200
   2517  15e9		       8d 6f f0 	      STA	w_extra_wall_startpos
   2518  15ec		       a9 00		      LDA	#0
   2519  15ee		       85 89		      STA	bally
   2520  15f0		       f8		      SED
   2521  15f1		       18		      CLC
   2522  15f2		       a5 95		      LDA	score+2
   2523  15f4		       69 10		      ADC	#$10
   2524  15f6		       85 95		      STA	score+2
   2525  15f8		       a5 94		      LDA	score+1
   2526  15fa		       69 00		      ADC	#$00
   2527  15fc		       85 94		      STA	score+1
   2528  15fe		       a5 93		      LDA	score
   2529  1600		       69 00		      ADC	#$00
   2530  1602		       85 93		      STA	score
   2531  1604		       d8		      CLD
   2532  1605				   .
   2533  1605							; 
   2534  1605
   2535  1605				   .__Skip_Shot_Extra_Wall
   2536  1605							; __Skip_Shot_Extra_Wall
   2537  1605
   2538  1605				   .
   2539  1605							; 
   2540  1605
   2541  1605				   .
   2542  1605							; 
   2543  1605
   2544  1605				   .
   2545  1605							; 
   2546  1605
   2547  1605				   .L0341		;  if !collision(player1,player0) then goto __Skip_P1_Touched_P0
   2548  1605
   2549  1605		       24 07		      bit	CXPPMM
   2550  1607		       30 03		      BMI	.skipL0341
   2551  1609				   .condpart59
   2552  1609		       4c 85 d6 	      jmp	.__Skip_P1_Touched_P0
   2553  160c
   2554  160c				   .skipL0341
   2555  160c				   .
   2556  160c							; 
   2557  160c
   2558  160c				   .
   2559  160c							; 
   2560  160c
   2561  160c				   .L0342		;  if roommate_type  >  1 then __Skip_P1_Touched_Enemy
   2562  160c
   2563  160c		       a9 01		      LDA	#1
   2564  160e		       c5 df		      CMP	roommate_type
   2565  1610					      if	((* - .__Skip_P1_Touched_Enemy) < 127) && ((* - .__Skip_P1_Touched_Enemy) > -128)
   2566  1610		       90 15		      bcc	.__Skip_P1_Touched_Enemy
   2567  1612				  -	      else
   2568  1612				  -	      bcs	.12skip__Skip_P1_Touched_Enemy
   2569  1612				  -	      jmp	.__Skip_P1_Touched_Enemy
   2570  1612				  -.12skip__Skip_P1_Touched_Enemy
   2571  1612					      endif
   2572  1612				   .L0343		;  if _Ch0_Sound  <>  4 then _Ch0_Sound  =  4	:  _Ch0_Duration  =  1	:  _Ch0_Counter  =  0
   2573  1612
   2574  1612		       a5 da		      LDA	_Ch0_Sound
   2575  1614		       c9 04		      CMP	#4
   2576  1616		       f0 0c		      BEQ	.skipL0343
   2577  1618				   .condpart60
   2578  1618		       a9 04		      LDA	#4
   2579  161a		       85 da		      STA	_Ch0_Sound
   2580  161c		       a9 01		      LDA	#1
   2581  161e		       85 db		      STA	_Ch0_Duration
   2582  1620		       a9 00		      LDA	#0
   2583  1622		       85 dc		      STA	_Ch0_Counter
   2584  1624				   .skipL0343
   2585  1624				   .L0344		;  goto _Set_Game_Over
   2586  1624
   2587  1624		       4c 70 d9 	      jmp	._Set_Game_Over
   2588  1627
   2589  1627				   .
   2590  1627							; 
   2591  1627
   2592  1627				   .__Skip_P1_Touched_Enemy
   2593  1627							; __Skip_P1_Touched_Enemy
   2594  1627
   2595  1627				   .L0345		;  if _Ch0_Sound  <>  3 then _Ch0_Sound  =  3	:  _Ch0_Duration  =  1	:  _Ch0_Counter  =  0
   2596  1627
   2597  1627		       a5 da		      LDA	_Ch0_Sound
   2598  1629		       c9 03		      CMP	#3
   2599  162b		       f0 0c		      BEQ	.skipL0345
   2600  162d				   .condpart61
   2601  162d		       a9 03		      LDA	#3
   2602  162f		       85 da		      STA	_Ch0_Sound
   2603  1631		       a9 01		      LDA	#1
   2604  1633		       85 db		      STA	_Ch0_Duration
   2605  1635		       a9 00		      LDA	#0
   2606  1637		       85 dc		      STA	_Ch0_Counter
   2607  1639				   .skipL0345
   2608  1639				   .L0346		;  if roommate_type  =  3 then WriteToBuffer  =  _sc1	:  WriteToBuffer  =  _sc2  :  WriteToBuffer  =	_sc3  :  WriteSendBuffer  =  req_level_up  :  _Bit5_Request_Pending{5}	=  1  :  pfscore1  =  255  :  pfscore2	=  255	:  player1y  =	player_min_y  :  player1x  =  30  :  score  =  0  :  goto _skip_game_action
   2609  1639
   2610  1639		       a5 df		      LDA	roommate_type
   2611  163b		       c9 03		      CMP	#3
   2612  163d		       d0 37		      BNE	.skipL0346
   2613  163f				   .condpart62
   2614  163f		       a5 93		      LDA	_sc1
   2615  1641		       8d f0 1f 	      STA	WriteToBuffer
   2616  1644		       a5 94		      LDA	_sc2
   2617  1646		       8d f0 1f 	      STA	WriteToBuffer
   2618  1649		       a5 95		      LDA	_sc3
   2619  164b		       8d f0 1f 	      STA	WriteToBuffer
   2620  164e		       a9 81		      LDA	#req_level_up
   2621  1650		       8d f1 1f 	      STA	WriteSendBuffer
   2622  1653		       a5 ec		      LDA	_Bit5_Request_Pending
   2623  1655		       09 20		      ORA	#32
   2624  1657		       85 ec		      STA	_Bit5_Request_Pending
   2625  1659		       a9 ff		      LDA	#255
   2626  165b		       85 f2		      STA	pfscore1
   2627  165d		       85 f3		      STA	pfscore2
   2628  165f		       a9 02		      LDA	#player_min_y
   2629  1661		       85 86		      STA	player1y
   2630  1663		       a9 1e		      LDA	#30
   2631  1665		       85 81		      STA	player1x
   2632  1667		       a9 00		      LDA	#$00
   2633  1669		       85 95		      STA	score+2
   2634  166b		       a9 00		      LDA	#$00
   2635  166d		       85 94		      STA	score+1
   2636  166f		       a9 00		      LDA	#$00
   2637  1671		       85 93		      STA	score
   2638  1673		       4c 11 d8 	      jmp	._skip_game_action
   2639  1676
   2640  1676				   .skipL0346
   2641  1676				   .L0347		;  if roommate_type  =  2 then pfscore2  =  pfscore2  *  2  |	1  :  player1y	=  player1y  -	1
   2642  1676
   2643  1676		       a5 df		      LDA	roommate_type
   2644  1678		       c9 02		      CMP	#2
   2645  167a		       d0 09		      BNE	.skipL0347
   2646  167c				   .condpart63
   2647  167c							; complex statement detected
   2648  167c		       a5 f3		      LDA	pfscore2
   2649  167e		       0a		      asl
   2650  167f		       09 01		      ORA	#1
   2651  1681		       85 f3		      STA	pfscore2
   2652  1683		       c6 86		      DEC	player1y
   2653  1685				   .skipL0347
   2654  1685				   .__Skip_P1_Touched_P0
   2655  1685							; __Skip_P1_Touched_P0
   2656  1685
   2657  1685				   .
   2658  1685							; 
   2659  1685
   2660  1685				   .
   2661  1685							; 
   2662  1685
   2663  1685				   .
   2664  1685							; 
   2665  1685
   2666  1685				   .L0348		;  if !collision(player1,ball) then goto __Skip_P1_Touched_Ball
   2667  1685
   2668  1685		       24 03		      bit	CXP1FB
   2669  1687		       70 03		      BVS	.skipL0348
   2670  1689				   .condpart64
   2671  1689		       4c a1 d6 	      jmp	.__Skip_P1_Touched_Ball
   2672  168c
   2673  168c				   .skipL0348
   2674  168c				   .
   2675  168c							; 
   2676  168c
   2677  168c				   .
   2678  168c							; 
   2679  168c
   2680  168c				   .L0349		;  if _Ch0_Sound  <>  4 then _Ch0_Sound  =  4	:  _Ch0_Duration  =  1	:  _Ch0_Counter  =  0
   2681  168c
   2682  168c		       a5 da		      LDA	_Ch0_Sound
   2683  168e		       c9 04		      CMP	#4
   2684  1690		       f0 0c		      BEQ	.skipL0349
   2685  1692				   .condpart65
   2686  1692		       a9 04		      LDA	#4
   2687  1694		       85 da		      STA	_Ch0_Sound
   2688  1696		       a9 01		      LDA	#1
   2689  1698		       85 db		      STA	_Ch0_Duration
   2690  169a		       a9 00		      LDA	#0
   2691  169c		       85 dc		      STA	_Ch0_Counter
   2692  169e				   .skipL0349
   2693  169e				   .L0350		;  goto _Set_Game_Over
   2694  169e
   2695  169e		       4c 70 d9 	      jmp	._Set_Game_Over
   2696  16a1
   2697  16a1				   .__Skip_P1_Touched_Ball
   2698  16a1							; __Skip_P1_Touched_Ball
   2699  16a1
   2700  16a1				   .
   2701  16a1							; 
   2702  16a1
   2703  16a1				   .L0351		;  if !collision(player1,playfield) then __Skip_P1_Touched_Playfield
   2704  16a1
   2705  16a1		       24 03		      bit	CXP1FB
   2706  16a3					      if	((* - .__Skip_P1_Touched_Playfield) < 127) && ((* - .__Skip_P1_Touched_Playfield) > -128)
   2707  16a3		       10 15		      bpl	.__Skip_P1_Touched_Playfield
   2708  16a5				  -	      else
   2709  16a5				  -	      bmi	.13skip__Skip_P1_Touched_Playfield
   2710  16a5				  -	      jmp	.__Skip_P1_Touched_Playfield
   2711  16a5				  -.13skip__Skip_P1_Touched_Playfield
   2712  16a5					      endif
   2713  16a5				   .
   2714  16a5							; 
   2715  16a5
   2716  16a5				   .
   2717  16a5							; 
   2718  16a5
   2719  16a5				   .L0352		;  if _Ch0_Sound  <>  4 then _Ch0_Sound  =  4	:  _Ch0_Duration  =  1	:  _Ch0_Counter  =  0
   2720  16a5
   2721  16a5		       a5 da		      LDA	_Ch0_Sound
   2722  16a7		       c9 04		      CMP	#4
   2723  16a9		       f0 0c		      BEQ	.skipL0352
   2724  16ab				   .condpart66
   2725  16ab		       a9 04		      LDA	#4
   2726  16ad		       85 da		      STA	_Ch0_Sound
   2727  16af		       a9 01		      LDA	#1
   2728  16b1		       85 db		      STA	_Ch0_Duration
   2729  16b3		       a9 00		      LDA	#0
   2730  16b5		       85 dc		      STA	_Ch0_Counter
   2731  16b7				   .skipL0352
   2732  16b7				   .L0353		;  goto _Set_Game_Over
   2733  16b7
   2734  16b7		       4c 70 d9 	      jmp	._Set_Game_Over
   2735  16ba
   2736  16ba				   .__Skip_P1_Touched_Playfield
   2737  16ba							; __Skip_P1_Touched_Playfield
   2738  16ba
   2739  16ba				   .
   2740  16ba							; 
   2741  16ba
   2742  16ba				   .
   2743  16ba							; 
   2744  16ba
   2745  16ba				   .
   2746  16ba							; 
   2747  16ba
   2748  16ba				   .
   2749  16ba							; 
   2750  16ba
   2751  16ba				   .L0354		;  if r_extra_wall_startpos  =  200 then _Skip_extra_Wall
   2752  16ba
   2753  16ba		       ad ef f0 	      LDA	r_extra_wall_startpos
   2754  16bd		       c9 c8		      CMP	#200
   2755  16bf					      if	((* - ._Skip_extra_Wall) < 127) && ((* - ._Skip_extra_Wall) > -128)
   2756  16bf		       f0 17		      BEQ	._Skip_extra_Wall
   2757  16c1				  -	      else
   2758  16c1				  -	      bne	.14skip_Skip_extra_Wall
   2759  16c1				  -	      jmp	._Skip_extra_Wall
   2760  16c1				  -.14skip_Skip_extra_Wall
   2761  16c1					      endif
   2762  16c1				   .L0355		;  ballx  =  r_extra_wall_startpos  +	extra_wall_move_x
   2763  16c1
   2764  16c1		       ad ef f0 	      LDA	r_extra_wall_startpos
   2765  16c4		       18		      CLC
   2766  16c5		       65 dd		      ADC	extra_wall_move_x
   2767  16c7		       85 84		      STA	ballx
   2768  16c9				   .L0356		;  bally  =  47
   2769  16c9
   2770  16c9		       a9 2f		      LDA	#47
   2771  16cb		       85 89		      STA	bally
   2772  16cd				   .L0357		;  ballheight	=  23
   2773  16cd
   2774  16cd		       a9 17		      LDA	#23
   2775  16cf		       85 92		      STA	ballheight
   2776  16d1				   .L0358		;  CTRLPF  =  r_extra_wall_width  |  1
   2777  16d1
   2778  16d1		       ad ed f0 	      LDA	r_extra_wall_width
   2779  16d4		       09 01		      ORA	#1
   2780  16d6		       85 0a		      STA	CTRLPF
   2781  16d8				   ._Skip_extra_Wall
   2782  16d8							; _Skip_extra_Wall
   2783  16d8
   2784  16d8				   .
   2785  16d8							; 
   2786  16d8
   2787  16d8				   .L0359		;  if !_Bit3_Ball_Shot_Moving{3} then _Skip_ball_shot
   2788  16d8
   2789  16d8		       a5 ec		      LDA	_Bit3_Ball_Shot_Moving
   2790  16da		       29 08		      AND	#8
   2791  16dc					      if	((* - ._Skip_ball_shot) < 127) && ((* - ._Skip_ball_shot) > -128)
   2792  16dc		       f0 08		      BEQ	._Skip_ball_shot
   2793  16de				  -	      else
   2794  16de				  -	      bne	.15skip_Skip_ball_shot
   2795  16de				  -	      jmp	._Skip_ball_shot
   2796  16de				  -.15skip_Skip_ball_shot
   2797  16de					      endif
   2798  16de				   .L0360		;  ballheight	=  2
   2799  16de
   2800  16de		       a9 02		      LDA	#2
   2801  16e0		       85 92		      STA	ballheight
   2802  16e2				   .L0361		;  CTRLPF  =  %00010001
   2803  16e2
   2804  16e2		       a9 11		      LDA	#%00010001
   2805  16e4		       85 0a		      STA	CTRLPF
   2806  16e6				   ._Skip_ball_shot
   2807  16e6							; _Skip_ball_shot
   2808  16e6
   2809  16e6				   .
   2810  16e6							; 
   2811  16e6
   2812  16e6				   .
   2813  16e6							; 
   2814  16e6
   2815  16e6				   .L0362		;  if r_roommate_y_startpos  =  200 then _Skip_enemy
   2816  16e6
   2817  16e6		       ad eb f0 	      LDA	r_roommate_y_startpos
   2818  16e9		       c9 c8		      CMP	#200
   2819  16eb					      if	((* - ._Skip_enemy) < 127) && ((* - ._Skip_enemy) > -128)
   2820  16eb		       f0 0d		      BEQ	._Skip_enemy
   2821  16ed				  -	      else
   2822  16ed				  -	      bne	.16skip_Skip_enemy
   2823  16ed				  -	      jmp	._Skip_enemy
   2824  16ed				  -.16skip_Skip_enemy
   2825  16ed					      endif
   2826  16ed				   .L0363		;  player0x  =  r_roommate_x_startpos	+  roommate_move_x
   2827  16ed
   2828  16ed		       ad ec f0 	      LDA	r_roommate_x_startpos
   2829  16f0		       18		      CLC
   2830  16f1		       65 de		      ADC	roommate_move_x
   2831  16f3		       85 80		      STA	player0x
   2832  16f5				   .L0364		;  player0y  =  r_roommate_y_startpos
   2833  16f5
   2834  16f5		       ad eb f0 	      LDA	r_roommate_y_startpos
   2835  16f8		       85 85		      STA	player0y
   2836  16fa				   ._Skip_enemy
   2837  16fa							; _Skip_enemy
   2838  16fa
   2839  16fa				   .
   2840  16fa							; 
   2841  16fa
   2842  16fa				   .
   2843  16fa							; 
   2844  16fa
   2845  16fa				   .
   2846  16fa							; 
   2847  16fa
   2848  16fa				   .L0365		;  if collision(player1,playfield)  &&  _Bit2_P1_Dir_Left{2} then player1x  =	player1x  +  1
   2849  16fa
   2850  16fa		       24 03		      bit	CXP1FB
   2851  16fc		       10 08		      BPL	.skipL0365
   2852  16fe				   .condpart67
   2853  16fe		       a5 d8		      LDA	_Bit2_P1_Dir_Left
   2854  1700		       29 04		      AND	#4
   2855  1702		       f0 02		      BEQ	.skip67then
   2856  1704				   .condpart68
   2857  1704		       e6 81		      INC	player1x
   2858  1706				   .skip67then
   2859  1706				   .skipL0365
   2860  1706				   .L0366		;  if collision(player1,playfield)  &&  _Bit3_P1_Dir_Right{3} then player1x  =  player1x  -  1
   2861  1706
   2862  1706		       24 03		      bit	CXP1FB
   2863  1708		       10 08		      BPL	.skipL0366
   2864  170a				   .condpart69
   2865  170a		       a5 d8		      LDA	_Bit3_P1_Dir_Right
   2866  170c		       29 08		      AND	#8
   2867  170e		       f0 02		      BEQ	.skip69then
   2868  1710				   .condpart70
   2869  1710		       c6 81		      DEC	player1x
   2870  1712				   .skip69then
   2871  1712				   .skipL0366
   2872  1712				   .L0367		;  if collision(player1,playfield)  &&  _Bit0_P1_Dir_Up{0} then player1y  =  player1y	+  1
   2873  1712
   2874  1712		       24 03		      bit	CXP1FB
   2875  1714		       10 07		      BPL	.skipL0367
   2876  1716				   .condpart71
   2877  1716		       a5 d8		      LDA	_Bit0_P1_Dir_Up
   2878  1718		       4a		      LSR
   2879  1719		       90 02		      BCC	.skip71then
   2880  171b				   .condpart72
   2881  171b		       e6 86		      INC	player1y
   2882  171d				   .skip71then
   2883  171d				   .skipL0367
   2884  171d				   .L0368		;  if collision(player1,playfield)  &&  _Bit1_P1_Dir_Down{1} then player1y  =	player1y  -  1
   2885  171d
   2886  171d		       24 03		      bit	CXP1FB
   2887  171f		       10 08		      BPL	.skipL0368
   2888  1721				   .condpart73
   2889  1721		       a5 d8		      LDA	_Bit1_P1_Dir_Down
   2890  1723		       29 02		      AND	#2
   2891  1725		       f0 02		      BEQ	.skip73then
   2892  1727				   .condpart74
   2893  1727		       c6 86		      DEC	player1y
   2894  1729				   .skip73then
   2895  1729				   .skipL0368
   2896  1729				   .
   2897  1729							; 
   2898  1729
   2899  1729				   .L0369		;  _BitOp_P1_Dir  =  _BitOp_P1_Dir  &	$F0
   2900  1729
   2901  1729		       a5 d8		      LDA	_BitOp_P1_Dir
   2902  172b		       29 f0		      AND	#$F0
   2903  172d		       85 d8		      STA	_BitOp_P1_Dir
   2904  172f				   .
   2905  172f							; 
   2906  172f
   2907  172f				   .L0370		;  if joy0up then P1y_velocity  =  0.0  :  player1y  =  player1y  -  1  :  _Bit0_P1_Dir_Up{0}	=  1  :  x  =  0  :  goto skip_gravity
   2908  172f
   2909  172f		       a9 10		      lda	#$10
   2910  1731		       2c 80 02 	      bit	SWCHA
   2911  1734		       d0 17		      BNE	.skipL0370
   2912  1736				   .condpart75
   2913  1736		       a2 00		      LDX	#0
   2914  1738		       86 ea		      STX	w
   2915  173a		       a9 00		      LDA	#0
   2916  173c		       85 e9		      STA	P1y_velocity
   2917  173e		       c6 86		      DEC	player1y
   2918  1740		       a5 d8		      LDA	_Bit0_P1_Dir_Up
   2919  1742		       09 01		      ORA	#1
   2920  1744		       85 d8		      STA	_Bit0_P1_Dir_Up
   2921  1746		       a9 00		      LDA	#0
   2922  1748		       85 eb		      STA	x
   2923  174a		       4c 94 d7 	      jmp	.skip_gravity
   2924  174d
   2925  174d				   .skipL0370
   2926  174d				   .L0371		;  if joy0down then P1y_velocity  =  0.0  :  player1y	=  player1y  +	1  :  _Bit1_P1_Dir_Down{1}  =  1  :  x	=  0  :  goto skip_gravity
   2927  174d
   2928  174d		       a9 20		      lda	#$20
   2929  174f		       2c 80 02 	      bit	SWCHA
   2930  1752		       d0 17		      BNE	.skipL0371
   2931  1754				   .condpart76
   2932  1754		       a2 00		      LDX	#0
   2933  1756		       86 ea		      STX	w
   2934  1758		       a9 00		      LDA	#0
   2935  175a		       85 e9		      STA	P1y_velocity
   2936  175c		       e6 86		      INC	player1y
   2937  175e		       a5 d8		      LDA	_Bit1_P1_Dir_Down
   2938  1760		       09 02		      ORA	#2
   2939  1762		       85 d8		      STA	_Bit1_P1_Dir_Down
   2940  1764		       a9 00		      LDA	#0
   2941  1766		       85 eb		      STA	x
   2942  1768		       4c 94 d7 	      jmp	.skip_gravity
   2943  176b
   2944  176b				   .skipL0371
   2945  176b				   .
   2946  176b							; 
   2947  176b
   2948  176b				   .L0372		;  if collision(player1,playfield) then P1y_velocity  =  0.0  :  goto skip_gravity
   2949  176b
   2950  176b		       24 03		      bit	CXP1FB
   2951  176d		       10 0b		      BPL	.skipL0372
   2952  176f				   .condpart77
   2953  176f		       a2 00		      LDX	#0
   2954  1771		       86 ea		      STX	w
   2955  1773		       a9 00		      LDA	#0
   2956  1775		       85 e9		      STA	P1y_velocity
   2957  1777		       4c 94 d7 	      jmp	.skip_gravity
   2958  177a
   2959  177a				   .skipL0372
   2960  177a				   .
   2961  177a							; 
   2962  177a
   2963  177a				   .L0373		;  rem apply gravity
   2964  177a
   2965  177a				   .L0374		;  P1y_velocity  =  P1y_velocity  +  gravity_player1
   2966  177a
   2967  177a		       a5 ea		      LDA	w
   2968  177c		       18		      CLC
   2969  177d		       69 01		      ADC	#1
   2970  177f		       85 ea		      STA	w
   2971  1781		       a5 e9		      LDA	P1y_velocity
   2972  1783		       69 00		      ADC	#0
   2973  1785		       85 e9		      STA	P1y_velocity
   2974  1787				   .L0375		;  P1y_position  =  P1y_position  +  P1y_velocity
   2975  1787
   2976  1787		       a5 eb		      LDA	x
   2977  1789		       18		      CLC
   2978  178a		       65 ea		      ADC	w
   2979  178c		       85 eb		      STA	x
   2980  178e		       a5 86		      LDA	P1y_position
   2981  1790		       65 e9		      ADC	P1y_velocity
   2982  1792		       85 86		      STA	P1y_position
   2983  1794				   .
   2984  1794							; 
   2985  1794
   2986  1794				   .skip_gravity
   2987  1794							; skip_gravity
   2988  1794
   2989  1794				   .
   2990  1794							; 
   2991  1794
   2992  1794				   .L0376		;  if joy0left then _Bit6_Flip_P0{6}  =  1  :	_Bit2_P1_Dir_Left{2}  =  1  :  player1x  =  player1x  -  1  :  goto _skip_move
   2993  1794
   2994  1794		       2c 80 02 	      bit	SWCHA
   2995  1797		       70 11		      BVS	.skipL0376
   2996  1799				   .condpart78
   2997  1799		       a5 ec		      LDA	_Bit6_Flip_P0
   2998  179b		       09 40		      ORA	#64
   2999  179d		       85 ec		      STA	_Bit6_Flip_P0
   3000  179f		       a5 d8		      LDA	_Bit2_P1_Dir_Left
   3001  17a1		       09 04		      ORA	#4
   3002  17a3		       85 d8		      STA	_Bit2_P1_Dir_Left
   3003  17a5		       c6 81		      DEC	player1x
   3004  17a7		       4c bd d7 	      jmp	._skip_move
   3005  17aa
   3006  17aa				   .skipL0376
   3007  17aa				   .L0377		;  if joy0right then _Bit6_Flip_P0{6}	=  0  :  _Bit3_P1_Dir_Right{3}	=  1  :  player1x  =  player1x	+  1
   3008  17aa
   3009  17aa		       2c 80 02 	      bit	SWCHA
   3010  17ad		       30 0e		      BMI	.skipL0377
   3011  17af				   .condpart79
   3012  17af		       a5 ec		      LDA	_Bit6_Flip_P0
   3013  17b1		       29 bf		      AND	#191
   3014  17b3		       85 ec		      STA	_Bit6_Flip_P0
   3015  17b5		       a5 d8		      LDA	_Bit3_P1_Dir_Right
   3016  17b7		       09 08		      ORA	#8
   3017  17b9		       85 d8		      STA	_Bit3_P1_Dir_Right
   3018  17bb		       e6 81		      INC	player1x
   3019  17bd				   .skipL0377
   3020  17bd				   ._skip_move
   3021  17bd							; _skip_move
   3022  17bd
   3023  17bd				   .
   3024  17bd							; 
   3025  17bd
   3026  17bd				   .
   3027  17bd							; 
   3028  17bd
   3029  17bd				   .L0378		;  if player1x  <  player_min_x then player1x	=  player_max_x  :  gosub _send_room_state  :  WriteSendBuffer	=  req_move_left  :  goto _skip_game_action
   3030  17bd
   3031  17bd		       a5 81		      LDA	player1x
   3032  17bf		       c9 0a		      CMP	#player_min_x
   3033  17c1		       b0 0f		      BCS	.skipL0378
   3034  17c3				   .condpart80
   3035  17c3		       a9 86		      LDA	#player_max_x
   3036  17c5		       85 81		      STA	player1x
   3037  17c7		       20 51 da 	      jsr	._send_room_state
   3038  17ca		       a9 83		      LDA	#req_move_left
   3039  17cc		       8d f1 1f 	      STA	WriteSendBuffer
   3040  17cf		       4c 11 d8 	      jmp	._skip_game_action
   3041  17d2
   3042  17d2				   .skipL0378
   3043  17d2				   .L0379		;  if player1y  <  player_min_y then player1y	=  player_max_y  :  gosub _send_room_state  :  WriteSendBuffer	=  req_move_up	:  goto _skip_game_action
   3044  17d2
   3045  17d2		       a5 86		      LDA	player1y
   3046  17d4		       c9 02		      CMP	#player_min_y
   3047  17d6		       b0 0f		      BCS	.skipL0379
   3048  17d8				   .condpart81
   3049  17d8		       a9 4c		      LDA	#player_max_y
   3050  17da		       85 86		      STA	player1y
   3051  17dc		       20 51 da 	      jsr	._send_room_state
   3052  17df		       a9 84		      LDA	#req_move_up
   3053  17e1		       8d f1 1f 	      STA	WriteSendBuffer
   3054  17e4		       4c 11 d8 	      jmp	._skip_game_action
   3055  17e7
   3056  17e7				   .skipL0379
   3057  17e7				   .L0380		;  if player1x  >  player_max_x then player1x	=  player_min_x  :  gosub _send_room_state  :  WriteSendBuffer	=  req_move_right  :  goto _skip_game_action
   3058  17e7
   3059  17e7		       a9 86		      LDA	#player_max_x
   3060  17e9		       c5 81		      CMP	player1x
   3061  17eb		       b0 0f		      BCS	.skipL0380
   3062  17ed				   .condpart82
   3063  17ed		       a9 0a		      LDA	#player_min_x
   3064  17ef		       85 81		      STA	player1x
   3065  17f1		       20 51 da 	      jsr	._send_room_state
   3066  17f4		       a9 85		      LDA	#req_move_right
   3067  17f6		       8d f1 1f 	      STA	WriteSendBuffer
   3068  17f9		       4c 11 d8 	      jmp	._skip_game_action
   3069  17fc
   3070  17fc				   .skipL0380
   3071  17fc				   .L0381		;  if player1y  >  player_max_y then player1y	=  player_min_y  :  gosub _send_room_state  :  WriteSendBuffer	=  req_move_down  :  goto _skip_game_action
   3072  17fc
   3073  17fc		       a9 4c		      LDA	#player_max_y
   3074  17fe		       c5 86		      CMP	player1y
   3075  1800		       b0 0f		      BCS	.skipL0381
   3076  1802				   .condpart83
   3077  1802		       a9 02		      LDA	#player_min_y
   3078  1804		       85 86		      STA	player1y
   3079  1806		       20 51 da 	      jsr	._send_room_state
   3080  1809		       a9 86		      LDA	#req_move_down
   3081  180b		       8d f1 1f 	      STA	WriteSendBuffer
   3082  180e		       4c 11 d8 	      jmp	._skip_game_action
   3083  1811
   3084  1811				   .skipL0381
   3085  1811				   .
   3086  1811							; 
   3087  1811
   3088  1811				   ._skip_game_action
   3089  1811							; _skip_game_action
   3090  1811
   3091  1811				   .
   3092  1811							; 
   3093  1811
   3094  1811				   .
   3095  1811							; 
   3096  1811
   3097  1811				   .L0382		;  if !_Ch0_Sound then goto __Skip_Ch_0
   3098  1811
   3099  1811		       a5 da		      LDA	_Ch0_Sound
   3100  1813		       d0 03		      BNE	.skipL0382
   3101  1815				   .condpart84
   3102  1815		       4c 44 d9 	      jmp	.__Skip_Ch_0
   3103  1818
   3104  1818				   .skipL0382
   3105  1818				   .
   3106  1818							; 
   3107  1818
   3108  1818				   .
   3109  1818							; 
   3110  1818
   3111  1818				   .L0383		;  _Ch0_Duration  =  _Ch0_Duration  -	1
   3112  1818
   3113  1818		       c6 db		      DEC	_Ch0_Duration
   3114  181a				   .
   3115  181a							; 
   3116  181a
   3117  181a				   .
   3118  181a							; 
   3119  181a
   3120  181a				   .
   3121  181a							; 
   3122  181a
   3123  181a				   .L0384		;  if _Ch0_Duration then goto __Skip_Ch_0
   3124  181a
   3125  181a		       a5 db		      LDA	_Ch0_Duration
   3126  181c		       f0 03		      BEQ	.skipL0384
   3127  181e				   .condpart85
   3128  181e		       4c 44 d9 	      jmp	.__Skip_Ch_0
   3129  1821
   3130  1821				   .skipL0384
   3131  1821				   .
   3132  1821							; 
   3133  1821
   3134  1821				   .
   3135  1821							; 
   3136  1821
   3137  1821				   .
   3138  1821							; 
   3139  1821
   3140  1821				   .
   3141  1821							; 
   3142  1821
   3143  1821				   .L0385		;  if _Ch0_Sound  <>  1 then goto __Skip_Ch0_Sound_001
   3144  1821
   3145  1821		       a5 da		      LDA	_Ch0_Sound
   3146  1823		       c9 01		      CMP	#1
   3147  1825		       f0 03		      BEQ	.skipL0385
   3148  1827				   .condpart86
   3149  1827		       4c 6f d8 	      jmp	.__Skip_Ch0_Sound_001
   3150  182a
   3151  182a				   .skipL0385
   3152  182a				   .
   3153  182a							; 
   3154  182a
   3155  182a				   .
   3156  182a							; 
   3157  182a
   3158  182a				   .L0386		;  temp4  =  _SD_Shot_Wall[_Ch0_Counter]
   3159  182a
   3160  182a		       a6 dc		      LDX	_Ch0_Counter
   3161  182c		       bd 90 d9 	      LDA	_SD_Shot_Wall,x
   3162  182f		       85 9f		      STA	temp4
   3163  1831				   .
   3164  1831							; 
   3165  1831
   3166  1831				   .
   3167  1831							; 
   3168  1831
   3169  1831				   .L0387		;  if temp4  =  255 then goto __Clear_Ch_0
   3170  1831
   3171  1831		       a5 9f		      LDA	temp4
   3172  1833		       c9 ff		      CMP	#255
   3173  1835		       d0 03		      BNE	.skipL0387
   3174  1837				   .condpart87
   3175  1837		       4c 3e d9 	      jmp	.__Clear_Ch_0
   3176  183a
   3177  183a				   .skipL0387
   3178  183a				   .
   3179  183a							; 
   3180  183a
   3181  183a				   .
   3182  183a							; 
   3183  183a
   3184  183a				   .L0388		;  _Ch0_Counter  =  _Ch0_Counter  +  1
   3185  183a
   3186  183a		       e6 dc		      INC	_Ch0_Counter
   3187  183c				   .L0389		;  temp5  =  _SD_Shot_Wall[_Ch0_Counter]  :  _Ch0_Counter  =  _Ch0_Counter  +	1
   3188  183c
   3189  183c		       a6 dc		      LDX	_Ch0_Counter
   3190  183e		       bd 90 d9 	      LDA	_SD_Shot_Wall,x
   3191  1841		       85 a0		      STA	temp5
   3192  1843		       e6 dc		      INC	_Ch0_Counter
   3193  1845				   .L0390		;  temp6  =  _SD_Shot_Wall[_Ch0_Counter]  :  _Ch0_Counter  =  _Ch0_Counter  +	1
   3194  1845
   3195  1845		       a6 dc		      LDX	_Ch0_Counter
   3196  1847		       bd 90 d9 	      LDA	_SD_Shot_Wall,x
   3197  184a		       85 a1		      STA	temp6
   3198  184c		       e6 dc		      INC	_Ch0_Counter
   3199  184e				   .L0391		;  if _Ch0_Counter{0} then COLUBK  =  _E0
   3200  184e
   3201  184e		       a5 dc		      LDA	_Ch0_Counter
   3202  1850		       4a		      LSR
   3203  1851		       90 04		      BCC	.skipL0391
   3204  1853				   .condpart88
   3205  1853		       a9 20		      LDA	#_E0
   3206  1855		       85 09		      STA	COLUBK
   3207  1857				   .skipL0391
   3208  1857				   .
   3209  1857							; 
   3210  1857
   3211  1857				   .
   3212  1857							; 
   3213  1857
   3214  1857				   .L0392		;  AUDV0  =  temp4
   3215  1857
   3216  1857		       a5 9f		      LDA	temp4
   3217  1859		       85 19		      STA	AUDV0
   3218  185b				   .L0393		;  AUDC0  =  temp5
   3219  185b
   3220  185b		       a5 a0		      LDA	temp5
   3221  185d		       85 15		      STA	AUDC0
   3222  185f				   .L0394		;  AUDF0  =  temp6
   3223  185f
   3224  185f		       a5 a1		      LDA	temp6
   3225  1861		       85 17		      STA	AUDF0
   3226  1863				   .
   3227  1863							; 
   3228  1863
   3229  1863				   .
   3230  1863							; 
   3231  1863
   3232  1863				   .L0395		;  _Ch0_Duration  =  _SD_Shot_Wall[_Ch0_Counter]  :  _Ch0_Counter  =  _Ch0_Counter  +	1
   3233  1863
   3234  1863		       a6 dc		      LDX	_Ch0_Counter
   3235  1865		       bd 90 d9 	      LDA	_SD_Shot_Wall,x
   3236  1868		       85 db		      STA	_Ch0_Duration
   3237  186a		       e6 dc		      INC	_Ch0_Counter
   3238  186c				   .
   3239  186c							; 
   3240  186c
   3241  186c				   .
   3242  186c							; 
   3243  186c
   3244  186c				   .L0396		;  goto __Skip_Ch_0
   3245  186c
   3246  186c		       4c 44 d9 	      jmp	.__Skip_Ch_0
   3247  186f
   3248  186f				   .
   3249  186f							; 
   3250  186f
   3251  186f				   .__Skip_Ch0_Sound_001
   3252  186f							; __Skip_Ch0_Sound_001
   3253  186f
   3254  186f				   .
   3255  186f							; 
   3256  186f
   3257  186f				   .
   3258  186f							; 
   3259  186f
   3260  186f				   .
   3261  186f							; 
   3262  186f
   3263  186f				   .
   3264  186f							; 
   3265  186f
   3266  186f				   .L0397		;  if _Ch0_Sound  <>  2 then goto __Skip_Ch0_Sound_002
   3267  186f
   3268  186f		       a5 da		      LDA	_Ch0_Sound
   3269  1871		       c9 02		      CMP	#2
   3270  1873		       f0 03		      BEQ	.skipL0397
   3271  1875				   .condpart89
   3272  1875		       4c b4 d8 	      jmp	.__Skip_Ch0_Sound_002
   3273  1878
   3274  1878				   .skipL0397
   3275  1878				   .
   3276  1878							; 
   3277  1878
   3278  1878				   .
   3279  1878							; 
   3280  1878
   3281  1878				   .L0398		;  temp4  =  _SD_Shoot_Miss[_Ch0_Counter]
   3282  1878
   3283  1878		       a6 dc		      LDX	_Ch0_Counter
   3284  187a		       bd c8 d9 	      LDA	_SD_Shoot_Miss,x
   3285  187d		       85 9f		      STA	temp4
   3286  187f				   .
   3287  187f							; 
   3288  187f
   3289  187f				   .
   3290  187f							; 
   3291  187f
   3292  187f				   .L0399		;  if temp4  =  255 then goto __Clear_Ch_0
   3293  187f
   3294  187f		       a5 9f		      LDA	temp4
   3295  1881		       c9 ff		      CMP	#255
   3296  1883		       d0 03		      BNE	.skipL0399
   3297  1885				   .condpart90
   3298  1885		       4c 3e d9 	      jmp	.__Clear_Ch_0
   3299  1888
   3300  1888				   .skipL0399
   3301  1888				   .
   3302  1888							; 
   3303  1888
   3304  1888				   .
   3305  1888							; 
   3306  1888
   3307  1888				   .L0400		;  _Ch0_Counter  =  _Ch0_Counter  +  1
   3308  1888
   3309  1888		       e6 dc		      INC	_Ch0_Counter
   3310  188a				   .L0401		;  temp5  =  _SD_Shoot_Miss[_Ch0_Counter]  :  _Ch0_Counter  =	_Ch0_Counter  +  1
   3311  188a
   3312  188a		       a6 dc		      LDX	_Ch0_Counter
   3313  188c		       bd c8 d9 	      LDA	_SD_Shoot_Miss,x
   3314  188f		       85 a0		      STA	temp5
   3315  1891		       e6 dc		      INC	_Ch0_Counter
   3316  1893				   .L0402		;  temp6  =  _SD_Shoot_Miss[_Ch0_Counter]  :  _Ch0_Counter  =	_Ch0_Counter  +  1
   3317  1893
   3318  1893		       a6 dc		      LDX	_Ch0_Counter
   3319  1895		       bd c8 d9 	      LDA	_SD_Shoot_Miss,x
   3320  1898		       85 a1		      STA	temp6
   3321  189a		       e6 dc		      INC	_Ch0_Counter
   3322  189c				   .
   3323  189c							; 
   3324  189c
   3325  189c				   .
   3326  189c							; 
   3327  189c
   3328  189c				   .L0403		;  AUDV0  =  temp4
   3329  189c
   3330  189c		       a5 9f		      LDA	temp4
   3331  189e		       85 19		      STA	AUDV0
   3332  18a0				   .L0404		;  AUDC0  =  temp5
   3333  18a0
   3334  18a0		       a5 a0		      LDA	temp5
   3335  18a2		       85 15		      STA	AUDC0
   3336  18a4				   .L0405		;  AUDF0  =  temp6
   3337  18a4
   3338  18a4		       a5 a1		      LDA	temp6
   3339  18a6		       85 17		      STA	AUDF0
   3340  18a8				   .
   3341  18a8							; 
   3342  18a8
   3343  18a8				   .
   3344  18a8							; 
   3345  18a8
   3346  18a8				   .L0406		;  _Ch0_Duration  =  _SD_Shoot_Miss[_Ch0_Counter]  :  _Ch0_Counter  =	_Ch0_Counter  +  1
   3347  18a8
   3348  18a8		       a6 dc		      LDX	_Ch0_Counter
   3349  18aa		       bd c8 d9 	      LDA	_SD_Shoot_Miss,x
   3350  18ad		       85 db		      STA	_Ch0_Duration
   3351  18af		       e6 dc		      INC	_Ch0_Counter
   3352  18b1				   .
   3353  18b1							; 
   3354  18b1
   3355  18b1				   .
   3356  18b1							; 
   3357  18b1
   3358  18b1				   .L0407		;  goto __Skip_Ch_0
   3359  18b1
   3360  18b1		       4c 44 d9 	      jmp	.__Skip_Ch_0
   3361  18b4
   3362  18b4				   .
   3363  18b4							; 
   3364  18b4
   3365  18b4				   .__Skip_Ch0_Sound_002
   3366  18b4							; __Skip_Ch0_Sound_002
   3367  18b4
   3368  18b4				   .
   3369  18b4							; 
   3370  18b4
   3371  18b4				   .
   3372  18b4							; 
   3373  18b4
   3374  18b4				   .
   3375  18b4							; 
   3376  18b4
   3377  18b4				   .
   3378  18b4							; 
   3379  18b4
   3380  18b4				   .L0408		;  if _Ch0_Sound  <>  3 then goto __Skip_Ch0_Sound_003
   3381  18b4
   3382  18b4		       a5 da		      LDA	_Ch0_Sound
   3383  18b6		       c9 03		      CMP	#3
   3384  18b8		       f0 03		      BEQ	.skipL0408
   3385  18ba				   .condpart91
   3386  18ba		       4c f9 d8 	      jmp	.__Skip_Ch0_Sound_003
   3387  18bd
   3388  18bd				   .skipL0408
   3389  18bd				   .
   3390  18bd							; 
   3391  18bd
   3392  18bd				   .
   3393  18bd							; 
   3394  18bd
   3395  18bd				   .L0409		;  temp4  =  _SD_Shoot_Enemy[_Ch0_Counter]
   3396  18bd
   3397  18bd		       a6 dc		      LDX	_Ch0_Counter
   3398  18bf		       bd 10 da 	      LDA	_SD_Shoot_Enemy,x
   3399  18c2		       85 9f		      STA	temp4
   3400  18c4				   .
   3401  18c4							; 
   3402  18c4
   3403  18c4				   .
   3404  18c4							; 
   3405  18c4
   3406  18c4				   .L0410		;  if temp4  =  255 then goto __Clear_Ch_0
   3407  18c4
   3408  18c4		       a5 9f		      LDA	temp4
   3409  18c6		       c9 ff		      CMP	#255
   3410  18c8		       d0 03		      BNE	.skipL0410
   3411  18ca				   .condpart92
   3412  18ca		       4c 3e d9 	      jmp	.__Clear_Ch_0
   3413  18cd
   3414  18cd				   .skipL0410
   3415  18cd				   .
   3416  18cd							; 
   3417  18cd
   3418  18cd				   .
   3419  18cd							; 
   3420  18cd
   3421  18cd				   .L0411		;  _Ch0_Counter  =  _Ch0_Counter  +  1
   3422  18cd
   3423  18cd		       e6 dc		      INC	_Ch0_Counter
   3424  18cf				   .L0412		;  temp5  =  _SD_Shoot_Enemy[_Ch0_Counter]  :	_Ch0_Counter  =  _Ch0_Counter  +  1
   3425  18cf
   3426  18cf		       a6 dc		      LDX	_Ch0_Counter
   3427  18d1		       bd 10 da 	      LDA	_SD_Shoot_Enemy,x
   3428  18d4		       85 a0		      STA	temp5
   3429  18d6		       e6 dc		      INC	_Ch0_Counter
   3430  18d8				   .L0413		;  temp6  =  _SD_Shoot_Enemy[_Ch0_Counter]  :	_Ch0_Counter  =  _Ch0_Counter  +  1
   3431  18d8
   3432  18d8		       a6 dc		      LDX	_Ch0_Counter
   3433  18da		       bd 10 da 	      LDA	_SD_Shoot_Enemy,x
   3434  18dd		       85 a1		      STA	temp6
   3435  18df		       e6 dc		      INC	_Ch0_Counter
   3436  18e1				   .
   3437  18e1							; 
   3438  18e1
   3439  18e1				   .
   3440  18e1							; 
   3441  18e1
   3442  18e1				   .L0414		;  AUDV0  =  temp4
   3443  18e1
   3444  18e1		       a5 9f		      LDA	temp4
   3445  18e3		       85 19		      STA	AUDV0
   3446  18e5				   .L0415		;  AUDC0  =  temp5
   3447  18e5
   3448  18e5		       a5 a0		      LDA	temp5
   3449  18e7		       85 15		      STA	AUDC0
   3450  18e9				   .L0416		;  AUDF0  =  temp6
   3451  18e9
   3452  18e9		       a5 a1		      LDA	temp6
   3453  18eb		       85 17		      STA	AUDF0
   3454  18ed				   .
   3455  18ed							; 
   3456  18ed
   3457  18ed				   .
   3458  18ed							; 
   3459  18ed
   3460  18ed				   .L0417		;  _Ch0_Duration  =  _SD_Shoot_Enemy[_Ch0_Counter]  :	_Ch0_Counter  =  _Ch0_Counter  +  1
   3461  18ed
   3462  18ed		       a6 dc		      LDX	_Ch0_Counter
   3463  18ef		       bd 10 da 	      LDA	_SD_Shoot_Enemy,x
   3464  18f2		       85 db		      STA	_Ch0_Duration
   3465  18f4		       e6 dc		      INC	_Ch0_Counter
   3466  18f6				   .
   3467  18f6							; 
   3468  18f6
   3469  18f6				   .
   3470  18f6							; 
   3471  18f6
   3472  18f6				   .L0418		;  goto __Skip_Ch_0
   3473  18f6
   3474  18f6		       4c 44 d9 	      jmp	.__Skip_Ch_0
   3475  18f9
   3476  18f9				   .
   3477  18f9							; 
   3478  18f9
   3479  18f9				   .__Skip_Ch0_Sound_003
   3480  18f9							; __Skip_Ch0_Sound_003
   3481  18f9
   3482  18f9				   .
   3483  18f9							; 
   3484  18f9
   3485  18f9				   .
   3486  18f9							; 
   3487  18f9
   3488  18f9				   .
   3489  18f9							; 
   3490  18f9
   3491  18f9				   .
   3492  18f9							; 
   3493  18f9
   3494  18f9				   .L0419		;  if _Ch0_Sound  <>  4 then goto __Skip_Ch0_Sound_004
   3495  18f9
   3496  18f9		       a5 da		      LDA	_Ch0_Sound
   3497  18fb		       c9 04		      CMP	#4
   3498  18fd		       f0 03		      BEQ	.skipL0419
   3499  18ff				   .condpart93
   3500  18ff		       4c 3e d9 	      jmp	.__Skip_Ch0_Sound_004
   3501  1902
   3502  1902				   .skipL0419
   3503  1902				   .
   3504  1902							; 
   3505  1902
   3506  1902				   .
   3507  1902							; 
   3508  1902
   3509  1902				   .L0420		;  temp4  =  _SD_Touch_Enemy[_Ch0_Counter]
   3510  1902
   3511  1902		       a6 dc		      LDX	_Ch0_Counter
   3512  1904		       bd 34 da 	      LDA	_SD_Touch_Enemy,x
   3513  1907		       85 9f		      STA	temp4
   3514  1909				   .
   3515  1909							; 
   3516  1909
   3517  1909				   .
   3518  1909							; 
   3519  1909
   3520  1909				   .L0421		;  if temp4  =  255 then goto __Clear_Ch_0
   3521  1909
   3522  1909		       a5 9f		      LDA	temp4
   3523  190b		       c9 ff		      CMP	#255
   3524  190d		       d0 03		      BNE	.skipL0421
   3525  190f				   .condpart94
   3526  190f		       4c 3e d9 	      jmp	.__Clear_Ch_0
   3527  1912
   3528  1912				   .skipL0421
   3529  1912				   .
   3530  1912							; 
   3531  1912
   3532  1912				   .
   3533  1912							; 
   3534  1912
   3535  1912				   .L0422		;  _Ch0_Counter  =  _Ch0_Counter  +  1
   3536  1912
   3537  1912		       e6 dc		      INC	_Ch0_Counter
   3538  1914				   .L0423		;  temp5  =  _SD_Touch_Enemy[_Ch0_Counter]  :	_Ch0_Counter  =  _Ch0_Counter  +  1
   3539  1914
   3540  1914		       a6 dc		      LDX	_Ch0_Counter
   3541  1916		       bd 34 da 	      LDA	_SD_Touch_Enemy,x
   3542  1919		       85 a0		      STA	temp5
   3543  191b		       e6 dc		      INC	_Ch0_Counter
   3544  191d				   .L0424		;  temp6  =  _SD_Touch_Enemy[_Ch0_Counter]  :	_Ch0_Counter  =  _Ch0_Counter  +  1
   3545  191d
   3546  191d		       a6 dc		      LDX	_Ch0_Counter
   3547  191f		       bd 34 da 	      LDA	_SD_Touch_Enemy,x
   3548  1922		       85 a1		      STA	temp6
   3549  1924		       e6 dc		      INC	_Ch0_Counter
   3550  1926				   .
   3551  1926							; 
   3552  1926
   3553  1926				   .
   3554  1926							; 
   3555  1926
   3556  1926				   .L0425		;  AUDV0  =  temp4
   3557  1926
   3558  1926		       a5 9f		      LDA	temp4
   3559  1928		       85 19		      STA	AUDV0
   3560  192a				   .L0426		;  AUDC0  =  temp5
   3561  192a
   3562  192a		       a5 a0		      LDA	temp5
   3563  192c		       85 15		      STA	AUDC0
   3564  192e				   .L0427		;  AUDF0  =  temp6
   3565  192e
   3566  192e		       a5 a1		      LDA	temp6
   3567  1930		       85 17		      STA	AUDF0
   3568  1932				   .
   3569  1932							; 
   3570  1932
   3571  1932				   .
   3572  1932							; 
   3573  1932
   3574  1932				   .L0428		;  _Ch0_Duration  =  _SD_Touch_Enemy[_Ch0_Counter]  :	_Ch0_Counter  =  _Ch0_Counter  +  1
   3575  1932
   3576  1932		       a6 dc		      LDX	_Ch0_Counter
   3577  1934		       bd 34 da 	      LDA	_SD_Touch_Enemy,x
   3578  1937		       85 db		      STA	_Ch0_Duration
   3579  1939		       e6 dc		      INC	_Ch0_Counter
   3580  193b				   .
   3581  193b							; 
   3582  193b
   3583  193b				   .
   3584  193b							; 
   3585  193b
   3586  193b				   .L0429		;  goto __Skip_Ch_0
   3587  193b
   3588  193b		       4c 44 d9 	      jmp	.__Skip_Ch_0
   3589  193e
   3590  193e				   .
   3591  193e							; 
   3592  193e
   3593  193e				   .__Skip_Ch0_Sound_004
   3594  193e							; __Skip_Ch0_Sound_004
   3595  193e
   3596  193e				   .
   3597  193e							; 
   3598  193e
   3599  193e				   .
   3600  193e							; 
   3601  193e
   3602  193e				   .__Clear_Ch_0
   3603  193e							; __Clear_Ch_0
   3604  193e
   3605  193e				   .L0430		;  _Ch0_Sound	=  0  :  AUDV0	=  0
   3606  193e
   3607  193e		       a9 00		      LDA	#0
   3608  1940		       85 da		      STA	_Ch0_Sound
   3609  1942		       85 19		      STA	AUDV0
   3610  1944				   .
   3611  1944							; 
   3612  1944
   3613  1944				   .
   3614  1944							; 
   3615  1944
   3616  1944				   .__Skip_Ch_0
   3617  1944							; __Skip_Ch_0
   3618  1944
   3619  1944				   .
   3620  1944							; 
   3621  1944
   3622  1944				   .
   3623  1944							; 
   3624  1944
   3625  1944				   .
   3626  1944							; 
   3627  1944
   3628  1944				   .
   3629  1944							; 
   3630  1944
   3631  1944				   .L0431		;  if _Bit6_Flip_P0{6} then REFP1  =  8
   3632  1944
   3633  1944		       24 ec		      BIT	_Bit6_Flip_P0
   3634  1946		       50 04		      BVC	.skipL0431
   3635  1948				   .condpart95
   3636  1948		       a9 08		      LDA	#8
   3637  194a		       85 0c		      STA	REFP1
   3638  194c				   .skipL0431
   3639  194c				   .L0432		;  if _Bit0_roommate_Dir{0} then REFP0  =  8
   3640  194c
   3641  194c		       a5 ec		      LDA	_Bit0_roommate_Dir
   3642  194e		       4a		      LSR
   3643  194f		       90 04		      BCC	.skipL0432
   3644  1951				   .condpart96
   3645  1951		       a9 08		      LDA	#8
   3646  1953		       85 0b		      STA	REFP0
   3647  1955				   .skipL0432
   3648  1955				   .
   3649  1955							; 
   3650  1955
   3651  1955				   .L0433		;  drawscreen
   3652  1955
   3653  1955		       85 ee		      sta	temp7
   3654  1957		       a9 d9		      lda	#>(ret_point3-1)
   3655  1959		       48		      pha
   3656  195a		       a9 6c		      lda	#<(ret_point3-1)
   3657  195c		       48		      pha
   3658  195d		       a9 f5		      lda	#>(drawscreen-1)
   3659  195f		       48		      pha
   3660  1960		       a9 82		      lda	#<(drawscreen-1)
   3661  1962		       48		      pha
   3662  1963		       a5 ee		      lda	temp7
   3663  1965		       48		      pha
   3664  1966		       8a		      txa
   3665  1967		       48		      pha
   3666  1968		       a2 02		      ldx	#2
   3667  196a		       4c e8 ff 	      jmp	BS_jsr
   3668  196d				   ret_point3
   3669  196d				   .
   3670  196d							; 
   3671  196d
   3672  196d				   .L0434		;  goto __Main_Loop
   3673  196d
   3674  196d		       4c e0 d1 	      jmp	.__Main_Loop
   3675  1970
   3676  1970				   .
   3677  1970							; 
   3678  1970
   3679  1970				   .
   3680  1970							; 
   3681  1970
   3682  1970				   ._Set_Game_Over
   3683  1970							; _Set_Game_Over
   3684  1970
   3685  1970				   .L0435		;  WriteToBuffer  =  _sc1  :  WriteToBuffer  =  _sc2  :  WriteToBuffer  =  _sc3  :  WriteSendBuffer  =  req_game_over	:  _Bit4_Game_Over{4}  =  1
   3686  1970
   3687  1970		       a5 93		      LDA	_sc1
   3688  1972		       8d f0 1f 	      STA	WriteToBuffer
   3689  1975		       a5 94		      LDA	_sc2
   3690  1977		       8d f0 1f 	      STA	WriteToBuffer
   3691  197a		       a5 95		      LDA	_sc3
   3692  197c		       8d f0 1f 	      STA	WriteToBuffer
   3693  197f		       a9 82		      LDA	#req_game_over
   3694  1981		       8d f1 1f 	      STA	WriteSendBuffer
   3695  1984		       a5 ec		      LDA	_Bit4_Game_Over
   3696  1986		       09 10		      ORA	#16
   3697  1988		       85 ec		      STA	_Bit4_Game_Over
   3698  198a				   .L0436		;  goto _skip_game_action
   3699  198a
   3700  198a		       4c 11 d8 	      jmp	._skip_game_action
   3701  198d
   3702  198d				   .
   3703  198d							; 
   3704  198d
   3705  198d				   .
   3706  198d							; 
   3707  198d
   3708  198d				   .
   3709  198d							; 
   3710  198d
   3711  198d				   .L0437		;  data _SD_Shot_Wall
   3712  198d
   3713  198d		       4c c5 d9 	      JMP	.skipL0437
   3714  1990				   _SD_Shot_Wall
   3715  1990		       08 08 00 	      .byte.b	8,8,0
   3716  1993
   3717  1993		       01		      .byte.b	1
   3718  1994
   3719  1994		       08 08 01 	      .byte.b	8,8,1
   3720  1997
   3721  1997		       01		      .byte.b	1
   3722  1998
   3723  1998		       08 0e 01 	      .byte.b	8,14,1
   3724  199b
   3725  199b		       01		      .byte.b	1
   3726  199c
   3727  199c		       08 08 00 	      .byte.b	8,8,0
   3728  199f
   3729  199f		       01		      .byte.b	1
   3730  19a0
   3731  19a0		       08 08 02 	      .byte.b	8,8,2
   3732  19a3
   3733  19a3		       01		      .byte.b	1
   3734  19a4
   3735  19a4		       08 0e 02 	      .byte.b	8,14,2
   3736  19a7
   3737  19a7		       01		      .byte.b	1
   3738  19a8
   3739  19a8		       08 08 01 	      .byte.b	8,8,1
   3740  19ab
   3741  19ab		       01		      .byte.b	1
   3742  19ac
   3743  19ac		       07 08 03 	      .byte.b	7,8,3
   3744  19af
   3745  19af		       01		      .byte.b	1
   3746  19b0
   3747  19b0		       06 08 02 	      .byte.b	6,8,2
   3748  19b3
   3749  19b3		       01		      .byte.b	1
   3750  19b4
   3751  19b4		       05 08 04 	      .byte.b	5,8,4
   3752  19b7
   3753  19b7		       01		      .byte.b	1
   3754  19b8
   3755  19b8		       04 08 03 	      .byte.b	4,8,3
   3756  19bb
   3757  19bb		       01		      .byte.b	1
   3758  19bc
   3759  19bc		       03 08 05 	      .byte.b	3,8,5
   3760  19bf
   3761  19bf		       01		      .byte.b	1
   3762  19c0
   3763  19c0		       02 0e 04 	      .byte.b	2,14,4
   3764  19c3
   3765  19c3		       04		      .byte.b	4
   3766  19c4
   3767  19c4		       ff		      .byte.b	255
   3768  19c5
   3769  19c5				   .skipL0437
   3770  19c5				   .
   3771  19c5							; 
   3772  19c5
   3773  19c5				   .
   3774  19c5							; 
   3775  19c5
   3776  19c5				   .L0438		;  data _SD_Shoot_Miss
   3777  19c5
   3778  19c5		       4c 0d da 	      JMP	.skipL0438
   3779  19c8				   _SD_Shoot_Miss
   3780  19c8		       08 0f 00 	      .byte.b	8,15,0
   3781  19cb
   3782  19cb		       01		      .byte.b	1
   3783  19cc
   3784  19cc		       0c 0f 01 	      .byte.b	12,15,1
   3785  19cf
   3786  19cf		       01		      .byte.b	1
   3787  19d0
   3788  19d0		       08 07 14 	      .byte.b	8,7,20
   3789  19d3
   3790  19d3		       01		      .byte.b	1
   3791  19d4
   3792  19d4		       0a 0f 03 	      .byte.b	10,15,3
   3793  19d7
   3794  19d7		       01		      .byte.b	1
   3795  19d8
   3796  19d8		       08 07 16 	      .byte.b	8,7,22
   3797  19db
   3798  19db		       01		      .byte.b	1
   3799  19dc
   3800  19dc		       0a 0f 05 	      .byte.b	10,15,5
   3801  19df
   3802  19df		       01		      .byte.b	1
   3803  19e0
   3804  19e0		       08 0f 06 	      .byte.b	8,15,6
   3805  19e3
   3806  19e3		       01		      .byte.b	1
   3807  19e4
   3808  19e4		       0a 07 18 	      .byte.b	10,7,24
   3809  19e7
   3810  19e7		       01		      .byte.b	1
   3811  19e8
   3812  19e8		       08 0f 08 	      .byte.b	8,15,8
   3813  19eb
   3814  19eb		       01		      .byte.b	1
   3815  19ec
   3816  19ec		       09 07 1b 	      .byte.b	9,7,27
   3817  19ef
   3818  19ef		       01		      .byte.b	1
   3819  19f0
   3820  19f0		       08 0f 0a 	      .byte.b	8,15,10
   3821  19f3
   3822  19f3		       01		      .byte.b	1
   3823  19f4
   3824  19f4		       07 0e 0b 	      .byte.b	7,14,11
   3825  19f7
   3826  19f7		       01		      .byte.b	1
   3827  19f8
   3828  19f8		       06 0f 0c 	      .byte.b	6,15,12
   3829  19fb
   3830  19fb		       01		      .byte.b	1
   3831  19fc
   3832  19fc		       05 06 0d 	      .byte.b	5,6,13
   3833  19ff
   3834  19ff		       01		      .byte.b	1
   3835  1a00
   3836  1a00		       04 0f 0e 	      .byte.b	4,15,14
   3837  1a03
   3838  1a03		       01		      .byte.b	1
   3839  1a04
   3840  1a04		       03 06 1b 	      .byte.b	3,6,27
   3841  1a07
   3842  1a07		       01		      .byte.b	1
   3843  1a08
   3844  1a08		       02 06 1e 	      .byte.b	2,6,30
   3845  1a0b
   3846  1a0b		       08		      .byte.b	8
   3847  1a0c
   3848  1a0c		       ff		      .byte.b	255
   3849  1a0d
   3850  1a0d				   .skipL0438
   3851  1a0d				   .
   3852  1a0d							; 
   3853  1a0d
   3854  1a0d				   .
   3855  1a0d							; 
   3856  1a0d
   3857  1a0d				   .L0439		;  data _SD_Shoot_Enemy
   3858  1a0d
   3859  1a0d		       4c 31 da 	      JMP	.skipL0439
   3860  1a10				   _SD_Shoot_Enemy
   3861  1a10		       0c 04 17 	      .byte.b	12,4,23
   3862  1a13
   3863  1a13		       04		      .byte.b	4
   3864  1a14
   3865  1a14		       0a 04 1d 	      .byte.b	10,4,29
   3866  1a17
   3867  1a17		       04		      .byte.b	4
   3868  1a18
   3869  1a18		       08 04 17 	      .byte.b	8,4,23
   3870  1a1b
   3871  1a1b		       04		      .byte.b	4
   3872  1a1c
   3873  1a1c		       06 04 1d 	      .byte.b	6,4,29
   3874  1a1f
   3875  1a1f		       04		      .byte.b	4
   3876  1a20
   3877  1a20		       04 04 17 	      .byte.b	4,4,23
   3878  1a23
   3879  1a23		       04		      .byte.b	4
   3880  1a24
   3881  1a24		       03 04 1d 	      .byte.b	3,4,29
   3882  1a27
   3883  1a27		       04		      .byte.b	4
   3884  1a28
   3885  1a28		       02 04 17 	      .byte.b	2,4,23
   3886  1a2b
   3887  1a2b		       01		      .byte.b	1
   3888  1a2c
   3889  1a2c		       01 04 1d 	      .byte.b	1,4,29
   3890  1a2f
   3891  1a2f		       01		      .byte.b	1
   3892  1a30
   3893  1a30		       ff		      .byte.b	255
   3894  1a31
   3895  1a31				   .skipL0439
   3896  1a31				   .
   3897  1a31							; 
   3898  1a31
   3899  1a31				   .
   3900  1a31							; 
   3901  1a31
   3902  1a31				   .L0440		;  data _SD_Touch_Enemy
   3903  1a31
   3904  1a31		       4c 51 da 	      JMP	.skipL0440
   3905  1a34				   _SD_Touch_Enemy
   3906  1a34		       02 07 0b 	      .byte.b	2,7,11
   3907  1a37
   3908  1a37		       02		      .byte.b	2
   3909  1a38
   3910  1a38		       0a 07 0c 	      .byte.b	10,7,12
   3911  1a3b
   3912  1a3b		       02		      .byte.b	2
   3913  1a3c
   3914  1a3c		       08 07 0d 	      .byte.b	8,7,13
   3915  1a3f
   3916  1a3f		       02		      .byte.b	2
   3917  1a40
   3918  1a40		       08 07 0e 	      .byte.b	8,7,14
   3919  1a43
   3920  1a43		       02		      .byte.b	2
   3921  1a44
   3922  1a44		       08 07 15 	      .byte.b	8,7,21
   3923  1a47
   3924  1a47		       08		      .byte.b	8
   3925  1a48
   3926  1a48		       04 07 16 	      .byte.b	4,7,22
   3927  1a4b
   3928  1a4b		       02		      .byte.b	2
   3929  1a4c
   3930  1a4c		       02 07 17 	      .byte.b	2,7,23
   3931  1a4f
   3932  1a4f		       01		      .byte.b	1
   3933  1a50
   3934  1a50		       ff		      .byte.b	255
   3935  1a51
   3936  1a51				   .skipL0440
   3937  1a51				   .
   3938  1a51							; 
   3939  1a51
   3940  1a51				   .
   3941  1a51							; 
   3942  1a51
   3943  1a51				   .
   3944  1a51							; 
   3945  1a51
   3946  1a51				   .
   3947  1a51							; 
   3948  1a51
   3949  1a51				   .
   3950  1a51							; 
   3951  1a51
   3952  1a51				   .
   3953  1a51							; 
   3954  1a51
   3955  1a51				   .
   3956  1a51							; 
   3957  1a51
   3958  1a51				   .
   3959  1a51							; 
   3960  1a51
   3961  1a51				   .L0441		;  rem Add the room state of the room we are just leaving to the request to store it at the backend
   3962  1a51
   3963  1a51				   ._send_room_state
   3964  1a51							; _send_room_state
   3965  1a51
   3966  1a51				   .L0442		;  _Bit5_Request_Pending{5}  =  1
   3967  1a51
   3968  1a51		       a5 ec		      LDA	_Bit5_Request_Pending
   3969  1a53		       09 20		      ORA	#32
   3970  1a55		       85 ec		      STA	_Bit5_Request_Pending
   3971  1a57				   .L0443		;  WriteToBuffer  =  r106
   3972  1a57
   3973  1a57		       ad ea f0 	      LDA	r106
   3974  1a5a		       8d f0 1f 	      STA	WriteToBuffer
   3975  1a5d				   .L0444		;  WriteToBuffer  =  r107
   3976  1a5d
   3977  1a5d		       ad eb f0 	      LDA	r107
   3978  1a60		       8d f0 1f 	      STA	WriteToBuffer
   3979  1a63				   .L0445		;  WriteToBuffer  =  r108
   3980  1a63
   3981  1a63		       ad ec f0 	      LDA	r108
   3982  1a66		       8d f0 1f 	      STA	WriteToBuffer
   3983  1a69				   .L0446		;  WriteToBuffer  =  r109
   3984  1a69
   3985  1a69		       ad ed f0 	      LDA	r109
   3986  1a6c		       8d f0 1f 	      STA	WriteToBuffer
   3987  1a6f				   .L0447		;  WriteToBuffer  =  r110
   3988  1a6f
   3989  1a6f		       ad ee f0 	      LDA	r110
   3990  1a72		       8d f0 1f 	      STA	WriteToBuffer
   3991  1a75				   .L0448		;  WriteToBuffer  =  r111
   3992  1a75
   3993  1a75		       ad ef f0 	      LDA	r111
   3994  1a78		       8d f0 1f 	      STA	WriteToBuffer
   3995  1a7b				   .L0449		;  return
   3996  1a7b
   3997  1a7b		       ba		      tsx
   3998  1a7c		       b5 02		      lda	2,x	; check return address
   3999  1a7e		       49 da		      eor	#(>*)	; vs. current PCH
   4000  1a80		       29 e0		      and	#$E0	;  mask off all but top 3 bits
   4001  1a82		       f0 03		      beq	*+5	; if equal, do normal return
   4002  1a84		       4c da ff 	      JMP	BS_return
   4003  1a87		       60		      RTS
   4004  1a88				   .
   4005  1a88							; 
   4006  1a88
   4007  1a88				   .
   4008  1a88							; 
   4009  1a88
   4010  1a88				   .L0450		;  rem loading room (12 pf bytes + interior ) from backend
   4011  1a88
   4012  1a88				   .L0451		;  rem and write to SC/playfield RAM 
   4013  1a88
   4014  1a88				   .change_room
   4015  1a88							; change_room
   4016  1a88
   4017  1a88				   .L0452		;  delay_counter  =  2  :  player0y  =  200
   4018  1a88
   4019  1a88		       a9 02		      LDA	#2
   4020  1a8a		       85 d4		      STA	delay_counter
   4021  1a8c		       a9 c8		      LDA	#200
   4022  1a8e		       85 85		      STA	player0y
   4023  1a90				   .L0453		;  _Bit_Game_State  =	_Bit_Game_State  &  %11111100
   4024  1a90
   4025  1a90		       a5 ec		      LDA	_Bit_Game_State
   4026  1a92		       29 fc		      AND	#%11111100
   4027  1a94		       85 ec		      STA	_Bit_Game_State
   4028  1a96				   .L0454		;  _Bit5_Request_Pending{5}  =  0
   4029  1a96
   4030  1a96		       a5 ec		      LDA	_Bit5_Request_Pending
   4031  1a98		       29 df		      AND	#223
   4032  1a9a		       85 ec		      STA	_Bit5_Request_Pending
   4033  1a9c				   .L0455		;  asm
   4034  1a9c
   4035  1a9c		       a9 00		      LDA	#0
   4036  1a9e
   4037  1a9e		       85 89		      STA	bally
   4038  1aa0
   4039  1aa0		       85 dd		      STA	extra_wall_move_x
   4040  1aa2
   4041  1aa2		       85 de		      STA	roommate_move_x
   4042  1aa4
   4043  1aa4		       aa		      TAX
   4044  1aa5
   4045  1aa5				   .copy_loop
   4046  1aa5
   4047  1aa5		       ad f2 1f 	      LDA	ReceiveBuffer	; 4
   4048  1aa8
   4049  1aa8		       9d 64 f0 	      STA	w_room_definition_start,x	; 5   @9
   4050  1aab
   4051  1aab		       e8		      INX		; 2   @11
   4052  1aac
   4053  1aac		       ad f3 1f 	      LDA	ReceiveBufferSize	; 4   @15
   4054  1aaf
   4055  1aaf		       d0 f4		      BNE	.copy_loop	; 2/3 @18
   4056  1ab1
   4057  1ab1				   .L0456		;  roommate_type  =  r_roommate_type_and_range  &  3
   4058  1ab1
   4059  1ab1		       ad ea f0 	      LDA	r_roommate_type_and_range
   4060  1ab4		       29 03		      AND	#3
   4061  1ab6		       85 df		      STA	roommate_type
   4062  1ab8				   .L0457		;  goto _skip_game_action
   4063  1ab8
   4064  1ab8		       4c 11 d8 	      jmp	._skip_game_action
   4065  1abb
   4066  1abb				   .
   4067  1abb							; 
   4068  1abb
   4069  1abb				   .
   4070  1abb							; 
   4071  1abb
   4072  1abb				   .
   4073  1abb							; 
   4074  1abb
   4075  1abb				   .L0458		;  rem define PlusROM backend URL here
   4076  1abb
   4077  1abb				   .L0459		;  rem don't let your program flow run into this code
   4078  1abb
   4079  1abb				   .L0460		;  asm
   4080  1abb
      0  1abb					      SET_PLUSROM_API	"a.php", "ca.firmaplus.de"
      1  1abb				   PlusROM_API
      2  1abb		       61 2e 70 68*	      .byte.b	"a.php", 0, "ca.firmaplus.de", 0
   4082  1ad1
   4083  1ad1				   .
   4084  1ad1							; 
   4085  1ad1
   4086  1ad1				   .L0461		;  bank 2
   4087  1ad1
   4088  1ad1					      if	ECHO1
      1280 bytes of ROM space left in bank 1
   4089  1ad1					      echo	"    ",[(start_bank1 - *)]d , "bytes of ROM space left in bank 1")
   4090  1ad1					      endif
   4091  1ad1		       00 01	   ECHO1      =	1
   4092  1fd1					      ORG	$1FF4-bscode_length
   4093  1fd1					      RORG	$DFF4-bscode_length
   4094  1fd1		       a2 ff	   start_bank1 ldx	#$ff
   4095  1fd3				  -	      ifconst	FASTFETCH	; using DPC+
   4096  1fd3				  -	      stx	FASTFETCH
   4097  1fd3					      endif
   4098  1fd3		       9a		      txs
   4099  1fd4				  -	      if	bankswitch == 64
   4100  1fd4				  -	      lda	#(((>(start-1)) & $0F) | $F0)
   4101  1fd4					      else
   4102  1fd4		       a9 f3		      lda	#>(start-1)
   4103  1fd6					      endif
   4104  1fd6		       48		      pha
   4105  1fd7		       a9 51		      lda	#<(start-1)
   4106  1fd9		       48		      pha
   4107  1fda		       48		      pha
   4108  1fdb		       8a		      txa
   4109  1fdc		       48		      pha
   4110  1fdd		       ba		      tsx
   4111  1fde					      if	bankswitch != 64
   4112  1fde		       b5 04		      lda	4,x	; get high byte of return address
   4113  1fe0		       2a		      rol
   4114  1fe1		       2a		      rol
   4115  1fe2		       2a		      rol
   4116  1fe3		       2a		      rol
   4117  1fe4		       29 01		      and	#bs_mask	;1 3 or 7 for F8/F6/F4
   4118  1fe6		       aa		      tax
   4119  1fe7		       e8		      inx
   4120  1fe8				  -	      else
   4121  1fe8				  -	      lda	4,x	; get high byte of return address
   4122  1fe8				  -	      tay
   4123  1fe8				  -	      ora	#$10	; change our bank nibble into a valid rom mirror
   4124  1fe8				  -	      sta	4,x
   4125  1fe8				  -	      tya
   4126  1fe8				  -	      lsr
   4127  1fe8				  -	      lsr
   4128  1fe8				  -	      lsr
   4129  1fe8				  -	      lsr
   4130  1fe8				  -	      tax
   4131  1fe8				  -	      inx
   4132  1fe8					      endif
   4133  1fe8		       bd f7 1f 	      lda	bankswitch_hotspot-1,x
   4134  1feb		       68		      pla
   4135  1fec		       aa		      tax
   4136  1fed		       68		      pla
   4137  1fee		       60		      rts
   4138  1fef				  -	      if	((* & $1FFF) > ((bankswitch_hotspot & $1FFF) - 1))
   4139  1fef				  -	      echo	"WARNING: size parameter in banksw.asm too small - the program probably will not work."
   4140  1fef				  -	      echo	"Change to",[(*-begin_bscode+1)&$FF]d,"and try again."
   4141  1fef					      endif
   4142  1ffc					      ORG	$1FFC
   4143  1ffc					      RORG	$DFFC
   4144  1ffc		       d1 df		      .word.w	(start_bank1 & $ffff)
   4145  1ffe		       d1 df		      .word.w	(start_bank1 & $ffff)
   4146  2000					      ORG	$2000
   4147  2000					      RORG	$F000
   4148  2000					      repeat	256
   4149  2000		       ff		      .byte.b	$ff
   4148  2000					      repend
   4149  2001		       ff		      .byte.b	$ff
   4148  2001					      repend
   4149  2002		       ff		      .byte.b	$ff
   4148  2002					      repend
   4149  2003		       ff		      .byte.b	$ff
   4148  2003					      repend
   4149  2004		       ff		      .byte.b	$ff
   4148  2004					      repend
   4149  2005		       ff		      .byte.b	$ff
   4148  2005					      repend
   4149  2006		       ff		      .byte.b	$ff
   4148  2006					      repend
   4149  2007		       ff		      .byte.b	$ff
   4148  2007					      repend
   4149  2008		       ff		      .byte.b	$ff
   4148  2008					      repend
   4149  2009		       ff		      .byte.b	$ff
   4148  2009					      repend
   4149  200a		       ff		      .byte.b	$ff
   4148  200a					      repend
   4149  200b		       ff		      .byte.b	$ff
   4148  200b					      repend
   4149  200c		       ff		      .byte.b	$ff
   4148  200c					      repend
   4149  200d		       ff		      .byte.b	$ff
   4148  200d					      repend
   4149  200e		       ff		      .byte.b	$ff
   4148  200e					      repend
   4149  200f		       ff		      .byte.b	$ff
   4148  200f					      repend
   4149  2010		       ff		      .byte.b	$ff
   4148  2010					      repend
   4149  2011		       ff		      .byte.b	$ff
   4148  2011					      repend
   4149  2012		       ff		      .byte.b	$ff
   4148  2012					      repend
   4149  2013		       ff		      .byte.b	$ff
   4148  2013					      repend
   4149  2014		       ff		      .byte.b	$ff
   4148  2014					      repend
   4149  2015		       ff		      .byte.b	$ff
   4148  2015					      repend
   4149  2016		       ff		      .byte.b	$ff
   4148  2016					      repend
   4149  2017		       ff		      .byte.b	$ff
   4148  2017					      repend
   4149  2018		       ff		      .byte.b	$ff
   4148  2018					      repend
   4149  2019		       ff		      .byte.b	$ff
   4148  2019					      repend
   4149  201a		       ff		      .byte.b	$ff
   4148  201a					      repend
   4149  201b		       ff		      .byte.b	$ff
   4148  201b					      repend
   4149  201c		       ff		      .byte.b	$ff
   4148  201c					      repend
   4149  201d		       ff		      .byte.b	$ff
   4148  201d					      repend
   4149  201e		       ff		      .byte.b	$ff
   4148  201e					      repend
   4149  201f		       ff		      .byte.b	$ff
   4148  201f					      repend
   4149  2020		       ff		      .byte.b	$ff
   4148  2020					      repend
   4149  2021		       ff		      .byte.b	$ff
   4148  2021					      repend
   4149  2022		       ff		      .byte.b	$ff
   4148  2022					      repend
   4149  2023		       ff		      .byte.b	$ff
   4148  2023					      repend
   4149  2024		       ff		      .byte.b	$ff
   4148  2024					      repend
   4149  2025		       ff		      .byte.b	$ff
   4148  2025					      repend
   4149  2026		       ff		      .byte.b	$ff
   4148  2026					      repend
   4149  2027		       ff		      .byte.b	$ff
   4148  2027					      repend
   4149  2028		       ff		      .byte.b	$ff
   4148  2028					      repend
   4149  2029		       ff		      .byte.b	$ff
   4148  2029					      repend
   4149  202a		       ff		      .byte.b	$ff
   4148  202a					      repend
   4149  202b		       ff		      .byte.b	$ff
   4148  202b					      repend
   4149  202c		       ff		      .byte.b	$ff
   4148  202c					      repend
   4149  202d		       ff		      .byte.b	$ff
   4148  202d					      repend
   4149  202e		       ff		      .byte.b	$ff
   4148  202e					      repend
   4149  202f		       ff		      .byte.b	$ff
   4148  202f					      repend
   4149  2030		       ff		      .byte.b	$ff
   4148  2030					      repend
   4149  2031		       ff		      .byte.b	$ff
   4148  2031					      repend
   4149  2032		       ff		      .byte.b	$ff
   4148  2032					      repend
   4149  2033		       ff		      .byte.b	$ff
   4148  2033					      repend
   4149  2034		       ff		      .byte.b	$ff
   4148  2034					      repend
   4149  2035		       ff		      .byte.b	$ff
   4148  2035					      repend
   4149  2036		       ff		      .byte.b	$ff
   4148  2036					      repend
   4149  2037		       ff		      .byte.b	$ff
   4148  2037					      repend
   4149  2038		       ff		      .byte.b	$ff
   4148  2038					      repend
   4149  2039		       ff		      .byte.b	$ff
   4148  2039					      repend
   4149  203a		       ff		      .byte.b	$ff
   4148  203a					      repend
   4149  203b		       ff		      .byte.b	$ff
   4148  203b					      repend
   4149  203c		       ff		      .byte.b	$ff
   4148  203c					      repend
   4149  203d		       ff		      .byte.b	$ff
   4148  203d					      repend
   4149  203e		       ff		      .byte.b	$ff
   4148  203e					      repend
   4149  203f		       ff		      .byte.b	$ff
   4148  203f					      repend
   4149  2040		       ff		      .byte.b	$ff
   4148  2040					      repend
   4149  2041		       ff		      .byte.b	$ff
   4148  2041					      repend
   4149  2042		       ff		      .byte.b	$ff
   4148  2042					      repend
   4149  2043		       ff		      .byte.b	$ff
   4148  2043					      repend
   4149  2044		       ff		      .byte.b	$ff
   4148  2044					      repend
   4149  2045		       ff		      .byte.b	$ff
   4148  2045					      repend
   4149  2046		       ff		      .byte.b	$ff
   4148  2046					      repend
   4149  2047		       ff		      .byte.b	$ff
   4148  2047					      repend
   4149  2048		       ff		      .byte.b	$ff
   4148  2048					      repend
   4149  2049		       ff		      .byte.b	$ff
   4148  2049					      repend
   4149  204a		       ff		      .byte.b	$ff
   4148  204a					      repend
   4149  204b		       ff		      .byte.b	$ff
   4148  204b					      repend
   4149  204c		       ff		      .byte.b	$ff
   4148  204c					      repend
   4149  204d		       ff		      .byte.b	$ff
   4148  204d					      repend
   4149  204e		       ff		      .byte.b	$ff
   4148  204e					      repend
   4149  204f		       ff		      .byte.b	$ff
   4148  204f					      repend
   4149  2050		       ff		      .byte.b	$ff
   4148  2050					      repend
   4149  2051		       ff		      .byte.b	$ff
   4148  2051					      repend
   4149  2052		       ff		      .byte.b	$ff
   4148  2052					      repend
   4149  2053		       ff		      .byte.b	$ff
   4148  2053					      repend
   4149  2054		       ff		      .byte.b	$ff
   4148  2054					      repend
   4149  2055		       ff		      .byte.b	$ff
   4148  2055					      repend
   4149  2056		       ff		      .byte.b	$ff
   4148  2056					      repend
   4149  2057		       ff		      .byte.b	$ff
   4148  2057					      repend
   4149  2058		       ff		      .byte.b	$ff
   4148  2058					      repend
   4149  2059		       ff		      .byte.b	$ff
   4148  2059					      repend
   4149  205a		       ff		      .byte.b	$ff
   4148  205a					      repend
   4149  205b		       ff		      .byte.b	$ff
   4148  205b					      repend
   4149  205c		       ff		      .byte.b	$ff
   4148  205c					      repend
   4149  205d		       ff		      .byte.b	$ff
   4148  205d					      repend
   4149  205e		       ff		      .byte.b	$ff
   4148  205e					      repend
   4149  205f		       ff		      .byte.b	$ff
   4148  205f					      repend
   4149  2060		       ff		      .byte.b	$ff
   4148  2060					      repend
   4149  2061		       ff		      .byte.b	$ff
   4148  2061					      repend
   4149  2062		       ff		      .byte.b	$ff
   4148  2062					      repend
   4149  2063		       ff		      .byte.b	$ff
   4148  2063					      repend
   4149  2064		       ff		      .byte.b	$ff
   4148  2064					      repend
   4149  2065		       ff		      .byte.b	$ff
   4148  2065					      repend
   4149  2066		       ff		      .byte.b	$ff
   4148  2066					      repend
   4149  2067		       ff		      .byte.b	$ff
   4148  2067					      repend
   4149  2068		       ff		      .byte.b	$ff
   4148  2068					      repend
   4149  2069		       ff		      .byte.b	$ff
   4148  2069					      repend
   4149  206a		       ff		      .byte.b	$ff
   4148  206a					      repend
   4149  206b		       ff		      .byte.b	$ff
   4148  206b					      repend
   4149  206c		       ff		      .byte.b	$ff
   4148  206c					      repend
   4149  206d		       ff		      .byte.b	$ff
   4148  206d					      repend
   4149  206e		       ff		      .byte.b	$ff
   4148  206e					      repend
   4149  206f		       ff		      .byte.b	$ff
   4148  206f					      repend
   4149  2070		       ff		      .byte.b	$ff
   4148  2070					      repend
   4149  2071		       ff		      .byte.b	$ff
   4148  2071					      repend
   4149  2072		       ff		      .byte.b	$ff
   4148  2072					      repend
   4149  2073		       ff		      .byte.b	$ff
   4148  2073					      repend
   4149  2074		       ff		      .byte.b	$ff
   4148  2074					      repend
   4149  2075		       ff		      .byte.b	$ff
   4148  2075					      repend
   4149  2076		       ff		      .byte.b	$ff
   4148  2076					      repend
   4149  2077		       ff		      .byte.b	$ff
   4148  2077					      repend
   4149  2078		       ff		      .byte.b	$ff
   4148  2078					      repend
   4149  2079		       ff		      .byte.b	$ff
   4148  2079					      repend
   4149  207a		       ff		      .byte.b	$ff
   4148  207a					      repend
   4149  207b		       ff		      .byte.b	$ff
   4148  207b					      repend
   4149  207c		       ff		      .byte.b	$ff
   4148  207c					      repend
   4149  207d		       ff		      .byte.b	$ff
   4148  207d					      repend
   4149  207e		       ff		      .byte.b	$ff
   4148  207e					      repend
   4149  207f		       ff		      .byte.b	$ff
   4148  207f					      repend
   4149  2080		       ff		      .byte.b	$ff
   4148  2080					      repend
   4149  2081		       ff		      .byte.b	$ff
   4148  2081					      repend
   4149  2082		       ff		      .byte.b	$ff
   4148  2082					      repend
   4149  2083		       ff		      .byte.b	$ff
   4148  2083					      repend
   4149  2084		       ff		      .byte.b	$ff
   4148  2084					      repend
   4149  2085		       ff		      .byte.b	$ff
   4148  2085					      repend
   4149  2086		       ff		      .byte.b	$ff
   4148  2086					      repend
   4149  2087		       ff		      .byte.b	$ff
   4148  2087					      repend
   4149  2088		       ff		      .byte.b	$ff
   4148  2088					      repend
   4149  2089		       ff		      .byte.b	$ff
   4148  2089					      repend
   4149  208a		       ff		      .byte.b	$ff
   4148  208a					      repend
   4149  208b		       ff		      .byte.b	$ff
   4148  208b					      repend
   4149  208c		       ff		      .byte.b	$ff
   4148  208c					      repend
   4149  208d		       ff		      .byte.b	$ff
   4148  208d					      repend
   4149  208e		       ff		      .byte.b	$ff
   4148  208e					      repend
   4149  208f		       ff		      .byte.b	$ff
   4148  208f					      repend
   4149  2090		       ff		      .byte.b	$ff
   4148  2090					      repend
   4149  2091		       ff		      .byte.b	$ff
   4148  2091					      repend
   4149  2092		       ff		      .byte.b	$ff
   4148  2092					      repend
   4149  2093		       ff		      .byte.b	$ff
   4148  2093					      repend
   4149  2094		       ff		      .byte.b	$ff
   4148  2094					      repend
   4149  2095		       ff		      .byte.b	$ff
   4148  2095					      repend
   4149  2096		       ff		      .byte.b	$ff
   4148  2096					      repend
   4149  2097		       ff		      .byte.b	$ff
   4148  2097					      repend
   4149  2098		       ff		      .byte.b	$ff
   4148  2098					      repend
   4149  2099		       ff		      .byte.b	$ff
   4148  2099					      repend
   4149  209a		       ff		      .byte.b	$ff
   4148  209a					      repend
   4149  209b		       ff		      .byte.b	$ff
   4148  209b					      repend
   4149  209c		       ff		      .byte.b	$ff
   4148  209c					      repend
   4149  209d		       ff		      .byte.b	$ff
   4148  209d					      repend
   4149  209e		       ff		      .byte.b	$ff
   4148  209e					      repend
   4149  209f		       ff		      .byte.b	$ff
   4148  209f					      repend
   4149  20a0		       ff		      .byte.b	$ff
   4148  20a0					      repend
   4149  20a1		       ff		      .byte.b	$ff
   4148  20a1					      repend
   4149  20a2		       ff		      .byte.b	$ff
   4148  20a2					      repend
   4149  20a3		       ff		      .byte.b	$ff
   4148  20a3					      repend
   4149  20a4		       ff		      .byte.b	$ff
   4148  20a4					      repend
   4149  20a5		       ff		      .byte.b	$ff
   4148  20a5					      repend
   4149  20a6		       ff		      .byte.b	$ff
   4148  20a6					      repend
   4149  20a7		       ff		      .byte.b	$ff
   4148  20a7					      repend
   4149  20a8		       ff		      .byte.b	$ff
   4148  20a8					      repend
   4149  20a9		       ff		      .byte.b	$ff
   4148  20a9					      repend
   4149  20aa		       ff		      .byte.b	$ff
   4148  20aa					      repend
   4149  20ab		       ff		      .byte.b	$ff
   4148  20ab					      repend
   4149  20ac		       ff		      .byte.b	$ff
   4148  20ac					      repend
   4149  20ad		       ff		      .byte.b	$ff
   4148  20ad					      repend
   4149  20ae		       ff		      .byte.b	$ff
   4148  20ae					      repend
   4149  20af		       ff		      .byte.b	$ff
   4148  20af					      repend
   4149  20b0		       ff		      .byte.b	$ff
   4148  20b0					      repend
   4149  20b1		       ff		      .byte.b	$ff
   4148  20b1					      repend
   4149  20b2		       ff		      .byte.b	$ff
   4148  20b2					      repend
   4149  20b3		       ff		      .byte.b	$ff
   4148  20b3					      repend
   4149  20b4		       ff		      .byte.b	$ff
   4148  20b4					      repend
   4149  20b5		       ff		      .byte.b	$ff
   4148  20b5					      repend
   4149  20b6		       ff		      .byte.b	$ff
   4148  20b6					      repend
   4149  20b7		       ff		      .byte.b	$ff
   4148  20b7					      repend
   4149  20b8		       ff		      .byte.b	$ff
   4148  20b8					      repend
   4149  20b9		       ff		      .byte.b	$ff
   4148  20b9					      repend
   4149  20ba		       ff		      .byte.b	$ff
   4148  20ba					      repend
   4149  20bb		       ff		      .byte.b	$ff
   4148  20bb					      repend
   4149  20bc		       ff		      .byte.b	$ff
   4148  20bc					      repend
   4149  20bd		       ff		      .byte.b	$ff
   4148  20bd					      repend
   4149  20be		       ff		      .byte.b	$ff
   4148  20be					      repend
   4149  20bf		       ff		      .byte.b	$ff
   4148  20bf					      repend
   4149  20c0		       ff		      .byte.b	$ff
   4148  20c0					      repend
   4149  20c1		       ff		      .byte.b	$ff
   4148  20c1					      repend
   4149  20c2		       ff		      .byte.b	$ff
   4148  20c2					      repend
   4149  20c3		       ff		      .byte.b	$ff
   4148  20c3					      repend
   4149  20c4		       ff		      .byte.b	$ff
   4148  20c4					      repend
   4149  20c5		       ff		      .byte.b	$ff
   4148  20c5					      repend
   4149  20c6		       ff		      .byte.b	$ff
   4148  20c6					      repend
   4149  20c7		       ff		      .byte.b	$ff
   4148  20c7					      repend
   4149  20c8		       ff		      .byte.b	$ff
   4148  20c8					      repend
   4149  20c9		       ff		      .byte.b	$ff
   4148  20c9					      repend
   4149  20ca		       ff		      .byte.b	$ff
   4148  20ca					      repend
   4149  20cb		       ff		      .byte.b	$ff
   4148  20cb					      repend
   4149  20cc		       ff		      .byte.b	$ff
   4148  20cc					      repend
   4149  20cd		       ff		      .byte.b	$ff
   4148  20cd					      repend
   4149  20ce		       ff		      .byte.b	$ff
   4148  20ce					      repend
   4149  20cf		       ff		      .byte.b	$ff
   4148  20cf					      repend
   4149  20d0		       ff		      .byte.b	$ff
   4148  20d0					      repend
   4149  20d1		       ff		      .byte.b	$ff
   4148  20d1					      repend
   4149  20d2		       ff		      .byte.b	$ff
   4148  20d2					      repend
   4149  20d3		       ff		      .byte.b	$ff
   4148  20d3					      repend
   4149  20d4		       ff		      .byte.b	$ff
   4148  20d4					      repend
   4149  20d5		       ff		      .byte.b	$ff
   4148  20d5					      repend
   4149  20d6		       ff		      .byte.b	$ff
   4148  20d6					      repend
   4149  20d7		       ff		      .byte.b	$ff
   4148  20d7					      repend
   4149  20d8		       ff		      .byte.b	$ff
   4148  20d8					      repend
   4149  20d9		       ff		      .byte.b	$ff
   4148  20d9					      repend
   4149  20da		       ff		      .byte.b	$ff
   4148  20da					      repend
   4149  20db		       ff		      .byte.b	$ff
   4148  20db					      repend
   4149  20dc		       ff		      .byte.b	$ff
   4148  20dc					      repend
   4149  20dd		       ff		      .byte.b	$ff
   4148  20dd					      repend
   4149  20de		       ff		      .byte.b	$ff
   4148  20de					      repend
   4149  20df		       ff		      .byte.b	$ff
   4148  20df					      repend
   4149  20e0		       ff		      .byte.b	$ff
   4148  20e0					      repend
   4149  20e1		       ff		      .byte.b	$ff
   4148  20e1					      repend
   4149  20e2		       ff		      .byte.b	$ff
   4148  20e2					      repend
   4149  20e3		       ff		      .byte.b	$ff
   4148  20e3					      repend
   4149  20e4		       ff		      .byte.b	$ff
   4148  20e4					      repend
   4149  20e5		       ff		      .byte.b	$ff
   4148  20e5					      repend
   4149  20e6		       ff		      .byte.b	$ff
   4148  20e6					      repend
   4149  20e7		       ff		      .byte.b	$ff
   4148  20e7					      repend
   4149  20e8		       ff		      .byte.b	$ff
   4148  20e8					      repend
   4149  20e9		       ff		      .byte.b	$ff
   4148  20e9					      repend
   4149  20ea		       ff		      .byte.b	$ff
   4148  20ea					      repend
   4149  20eb		       ff		      .byte.b	$ff
   4148  20eb					      repend
   4149  20ec		       ff		      .byte.b	$ff
   4148  20ec					      repend
   4149  20ed		       ff		      .byte.b	$ff
   4148  20ed					      repend
   4149  20ee		       ff		      .byte.b	$ff
   4148  20ee					      repend
   4149  20ef		       ff		      .byte.b	$ff
   4148  20ef					      repend
   4149  20f0		       ff		      .byte.b	$ff
   4148  20f0					      repend
   4149  20f1		       ff		      .byte.b	$ff
   4148  20f1					      repend
   4149  20f2		       ff		      .byte.b	$ff
   4148  20f2					      repend
   4149  20f3		       ff		      .byte.b	$ff
   4148  20f3					      repend
   4149  20f4		       ff		      .byte.b	$ff
   4148  20f4					      repend
   4149  20f5		       ff		      .byte.b	$ff
   4148  20f5					      repend
   4149  20f6		       ff		      .byte.b	$ff
   4148  20f6					      repend
   4149  20f7		       ff		      .byte.b	$ff
   4148  20f7					      repend
   4149  20f8		       ff		      .byte.b	$ff
   4148  20f8					      repend
   4149  20f9		       ff		      .byte.b	$ff
   4148  20f9					      repend
   4149  20fa		       ff		      .byte.b	$ff
   4148  20fa					      repend
   4149  20fb		       ff		      .byte.b	$ff
   4148  20fb					      repend
   4149  20fc		       ff		      .byte.b	$ff
   4148  20fc					      repend
   4149  20fd		       ff		      .byte.b	$ff
   4148  20fd					      repend
   4149  20fe		       ff		      .byte.b	$ff
   4148  20fe					      repend
   4149  20ff		       ff		      .byte.b	$ff
   4150  2100					      repend
   4151  2100							; Provided under the CC0 license. See the included LICENSE.txt for details.
   4152  2100
   4153  2100							; This is a 2-line kernel!
   4154  2100					      ifnconst	vertical_reflect
   4155  2100				   kernel
   4156  2100					      endif
   4157  2100		       85 02		      sta	WSYNC
   4158  2102		       a9 ff		      lda	#255
   4159  2104		       8d 96 02 	      sta	TIM64T
   4160  2107
   4161  2107		       a9 01		      lda	#1
   4162  2109		       85 27		      sta	VDELBL
   4163  210b		       85 25		      sta	VDELP0
   4164  210d		       a6 92		      ldx	ballheight
   4165  210f		       e8		      inx
   4166  2110		       e8		      inx
   4167  2111		       86 9f		      stx	temp4
   4168  2113		       a5 86		      lda	player1y
   4169  2115		       85 9e		      sta	temp3
   4170  2117
   4171  2117				  -	      ifconst	shakescreen
   4172  2117				  -	      jsr	doshakescreen
   4173  2117					      else
   4174  2117		       a6 90		      ldx	missile0height
   4175  2119		       e8		      inx
   4176  211a					      endif
   4177  211a
   4178  211a		       e8		      inx
   4179  211b		       86 f6		      stx	stack1
   4180  211d
   4181  211d		       a5 89		      lda	bally
   4182  211f		       85 f7		      sta	stack2
   4183  2121
   4184  2121		       a5 85		      lda	player0y
   4185  2123		       a2 00		      ldx	#0
   4186  2125		       85 02		      sta	WSYNC
   4187  2127		       86 1b		      stx	GRP0
   4188  2129		       86 1c		      stx	GRP1
   4189  212b		       86 0e		      stx	PF1L
   4190  212d		       86 0f		      stx	PF2
   4191  212f		       86 2c		      stx	CXCLR
   4192  2131				  -	      ifconst	readpaddle
   4193  2131				  -	      stx	paddle
   4194  2131					      else
      0  2131					      sleep	3
      1  2131				   .CYCLES    SET	3
      2  2131
      3  2131				  -	      IF	.CYCLES < 2
      4  2131				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  2131				  -	      ERR
      6  2131					      ENDIF
      7  2131
      8  2131					      IF	.CYCLES & 1
      9  2131					      IFNCONST	NO_ILLEGAL_OPCODES
     10  2131		       04 00		      nop	0
     11  2133				  -	      ELSE
     12  2133				  -	      bit	VSYNC
     13  2133					      ENDIF
     14  2133				   .CYCLES    SET	.CYCLES - 3
     15  2133					      ENDIF
     16  2133
     17  2133				  -	      REPEAT	.CYCLES / 2
     18  2133				  -	      nop
     19  2133					      REPEND
   4196  2133					      endif
   4197  2133
   4198  2133		       95 9d		      sta	temp2,x
   4199  2135
   4200  2135							;store these so they can be retrieved later
   4201  2135				  -	      ifnconst	pfres
   4202  2135				  -	      ldx	#128-44+(4-pfwidth)*12
   4203  2135					      else
   4204  2135		       a2 74		      ldx	#132-pfres*pfwidth
   4205  2137					      endif
   4206  2137
   4207  2137		       c6 85		      dec	player0y
   4208  2139
   4209  2139		       a5 91		      lda	missile0y
   4210  213b		       85 a0		      sta	temp5
   4211  213d		       a5 88		      lda	missile1y
   4212  213f		       85 a1		      sta	temp6
   4213  2141
   4214  2141		       a5 ef		      lda	playfieldpos
   4215  2143		       85 9c		      sta	temp1
   4216  2145
   4217  2145				  -	      ifconst	pfrowheight
   4218  2145				  -	      lda	#pfrowheight+2
   4219  2145					      else
   4220  2145				  -	      ifnconst	pfres
   4221  2145				  -	      lda	#10
   4222  2145					      else
   4223  2145		       a9 1a		      lda	#(96/pfres)+2	; try to come close to the real size
   4224  2147					      endif
   4225  2147					      endif
   4226  2147		       18		      clc
   4227  2148		       e5 ef		      sbc	playfieldpos
   4228  214a		       85 ef		      sta	playfieldpos
   4229  214c		       4c 78 f1 	      jmp	.startkernel
   4230  214f
   4231  214f				   .skipDrawP0
   4232  214f		       a9 00		      lda	#0
   4233  2151		       a8		      tay
   4234  2152		       4c aa f1 	      jmp	.continueP0
   4235  2155
   4236  2155				   .skipDrawP1
   4237  2155		       a9 00		      lda	#0
   4238  2157		       a8		      tay
   4239  2158		       4c 82 f1 	      jmp	.continueP1
   4240  215b
   4241  215b				   .kerloop		; enter at cycle 59??
   4242  215b
   4243  215b				   continuekernel
      0  215b					      sleep	2
      1  215b				   .CYCLES    SET	2
      2  215b
      3  215b				  -	      IF	.CYCLES < 2
      4  215b				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  215b				  -	      ERR
      6  215b					      ENDIF
      7  215b
      8  215b				  -	      IF	.CYCLES & 1
      9  215b				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  215b				  -	      nop	0
     11  215b				  -	      ELSE
     12  215b				  -	      bit	VSYNC
     13  215b				  -	      ENDIF
     14  215b				  -.CYCLES    SET	.CYCLES - 3
     15  215b					      ENDIF
     16  215b
     17  215b					      REPEAT	.CYCLES / 2
     18  215b		       ea		      nop
     19  215c					      REPEND
   4245  215c				   continuekernel2
   4246  215c		       a5 92		      lda	ballheight
   4247  215e
   4248  215e					      ifconst	pfres
   4249  215e		       bc 7c 10 	      ldy	playfield+pfres*pfwidth-132,x
   4250  2161		       84 0e		      sty	PF1L	;3
   4251  2163		       bc 7d 10 	      ldy	playfield+pfres*pfwidth-131-pfadjust,x
   4252  2166		       84 0f		      sty	PF2L	;3
   4253  2168		       bc 7f 10 	      ldy	playfield+pfres*pfwidth-129,x
   4254  216b		       84 0e		      sty	PF1R	; 3 too early?
   4255  216d		       bc 7e 10 	      ldy	playfield+pfres*pfwidth-130-pfadjust,x
   4256  2170		       84 0f		      sty	PF2R	;3
   4257  2172				  -	      else
   4258  2172				  -	      ldy	playfield-48+pfwidth*12+44-128,x
   4259  2172				  -	      sty	PF1L	;3
   4260  2172				  -	      ldy	playfield-48+pfwidth*12+45-128-pfadjust,x	;4
   4261  2172				  -	      sty	PF2L	;3
   4262  2172				  -	      ldy	playfield-48+pfwidth*12+47-128,x	;4
   4263  2172				  -	      sty	PF1R	; 3 too early?
   4264  2172				  -	      ldy	playfield-48+pfwidth*12+46-128-pfadjust,x	;4
   4265  2172				  -	      sty	PF2R	;3
   4266  2172					      endif
   4267  2172
   4268  2172							; should be playfield+$38 for width=2
   4269  2172
   4270  2172		       c7 89		      dcp	bally
   4271  2174		       2a		      rol
   4272  2175		       2a		      rol
   4273  2176							; rol
   4274  2176							; rol
   4275  2176				   goback
   4276  2176		       85 1f		      sta	ENABL
   4277  2178				   .startkernel
   4278  2178		       a5 8f		      lda	player1height	;3
   4279  217a		       c7 86		      dcp	player1y	;5
   4280  217c		       90 d7		      bcc	.skipDrawP1	;2
   4281  217e		       a4 86		      ldy	player1y	;3
   4282  2180		       b1 8c		      lda	(player1pointer),y	;5; player0pointer must be selected carefully by the compiler
   4283  2182							; so it doesn't cross a page boundary!
   4284  2182
   4285  2182				   .continueP1
   4286  2182		       85 1c		      sta	GRP1	;3
   4287  2184
   4288  2184				  -	      ifnconst	player1colors
   4289  2184				  -	      lda	missile1height	;3
   4290  2184				  -	      dcp	missile1y	;5
   4291  2184				  -	      rol		;2
   4292  2184				  -	      rol		;2
   4293  2184				  -	      sta	ENAM1	;3
   4294  2184					      else
   4295  2184		       b1 87		      lda	(player1color),y
   4296  2186		       85 07		      sta	COLUP1
   4297  2188					      ifnconst	playercolors
      0  2188					      sleep	7
      1  2188				   .CYCLES    SET	7
      2  2188
      3  2188				  -	      IF	.CYCLES < 2
      4  2188				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  2188				  -	      ERR
      6  2188					      ENDIF
      7  2188
      8  2188					      IF	.CYCLES & 1
      9  2188					      IFNCONST	NO_ILLEGAL_OPCODES
     10  2188		       04 00		      nop	0
     11  218a				  -	      ELSE
     12  218a				  -	      bit	VSYNC
     13  218a					      ENDIF
     14  218a				   .CYCLES    SET	.CYCLES - 3
     15  218a					      ENDIF
     16  218a
     17  218a					      REPEAT	.CYCLES / 2
     18  218a		       ea		      nop
     17  218a					      REPEND
     18  218b		       ea		      nop
     19  218c					      REPEND
   4299  218c				  -	      else
   4300  218c				  -	      lda.w	player0colorstore
   4301  218c				  -	      sta	COLUP0
   4302  218c					      endif
   4303  218c					      endif
   4304  218c
   4305  218c					      ifconst	pfres
   4306  218c		       bd 7c 10 	      lda	playfield+pfres*pfwidth-132,x
   4307  218f		       85 0e		      sta	PF1L	;3
   4308  2191		       bd 7d 10 	      lda	playfield+pfres*pfwidth-131-pfadjust,x
   4309  2194		       85 0f		      sta	PF2L	;3
   4310  2196		       bd 7f 10 	      lda	playfield+pfres*pfwidth-129,x
   4311  2199		       85 0e		      sta	PF1R	; 3 too early?
   4312  219b		       bd 7e 10 	      lda	playfield+pfres*pfwidth-130-pfadjust,x
   4313  219e		       85 0f		      sta	PF2R	;3
   4314  21a0				  -	      else
   4315  21a0				  -	      lda	playfield-48+pfwidth*12+44-128,x	;4
   4316  21a0				  -	      sta	PF1L	;3
   4317  21a0				  -	      lda	playfield-48+pfwidth*12+45-128-pfadjust,x	;4
   4318  21a0				  -	      sta	PF2L	;3
   4319  21a0				  -	      lda	playfield-48+pfwidth*12+47-128,x	;4
   4320  21a0				  -	      sta	PF1R	; 3 too early?
   4321  21a0				  -	      lda	playfield-48+pfwidth*12+46-128-pfadjust,x	;4
   4322  21a0				  -	      sta	PF2R	;3
   4323  21a0					      endif
   4324  21a0							; sleep 3
   4325  21a0
   4326  21a0		       a5 8e		      lda	player0height
   4327  21a2		       c7 85		      dcp	player0y
   4328  21a4		       90 a9		      bcc	.skipDrawP0
   4329  21a6		       a4 85		      ldy	player0y
   4330  21a8		       b1 8a		      lda	(player0pointer),y
   4331  21aa				   .continueP0
   4332  21aa		       85 1b		      sta	GRP0
   4333  21ac
   4334  21ac					      ifnconst	no_blank_lines
   4335  21ac					      ifnconst	playercolors
   4336  21ac		       a5 90		      lda	missile0height	;3
   4337  21ae		       c7 91		      dcp	missile0y	;5
   4338  21b0		       e5 f6		      sbc	stack1
   4339  21b2		       85 1d		      sta	ENAM0	;3
   4340  21b4				  -	      else
   4341  21b4				  -	      lda	(player0color),y
   4342  21b4				  -	      sta	player0colorstore
   4343  21b4				  -	      sleep	6
   4344  21b4					      endif
   4345  21b4		       c6 9c		      dec	temp1
   4346  21b6		       d0 a3		      bne	continuekernel
   4347  21b8				  -	      else
   4348  21b8				  -	      dec	temp1
   4349  21b8				  -	      beq	altkernel2
   4350  21b8				  -	      ifconst	readpaddle
   4351  21b8				  -	      ldy	currentpaddle
   4352  21b8				  -	      lda	INPT0,y
   4353  21b8				  -	      bpl	noreadpaddle
   4354  21b8				  -	      inc	paddle
   4355  21b8				  -	      jmp	continuekernel2
   4356  21b8				  -noreadpaddle
   4357  21b8				  -	      sleep	2
   4358  21b8				  -	      jmp	continuekernel
   4359  21b8				  -	      else
   4360  21b8				  -	      ifnconst	playercolors
   4361  21b8				  -	      ifconst	PFcolors
   4362  21b8				  -	      txa
   4363  21b8				  -	      tay
   4364  21b8				  -	      lda	(pfcolortable),y
   4365  21b8				  -	      ifnconst	backgroundchange
   4366  21b8				  -	      sta	COLUPF
   4367  21b8				  -	      else
   4368  21b8				  -	      sta	COLUBK
   4369  21b8				  -	      endif
   4370  21b8				  -	      jmp	continuekernel
   4371  21b8				  -	      else
   4372  21b8				  -	      ifconst	kernelmacrodef
   4373  21b8				  -	      kernelmacro
   4374  21b8				  -	      else
   4375  21b8				  -	      sleep	12
   4376  21b8				  -	      endif
   4377  21b8				  -	      endif
   4378  21b8				  -	      else
   4379  21b8				  -	      lda	(player0color),y
   4380  21b8				  -	      sta	player0colorstore
   4381  21b8				  -	      sleep	4
   4382  21b8				  -	      endif
   4383  21b8				  -	      jmp	continuekernel
   4384  21b8				  -	      endif
   4385  21b8				  -altkernel2
   4386  21b8				  -	      txa
   4387  21b8				  -	      ifnconst	vertical_reflect
   4388  21b8				  -	      sbx	#256-pfwidth
   4389  21b8				  -	      else
   4390  21b8				  -	      sbx	#256-pfwidth/2
   4391  21b8				  -	      endif
   4392  21b8				  -	      bmi	lastkernelline
   4393  21b8				  -	      ifconst	pfrowheight
   4394  21b8				  -	      lda	#pfrowheight
   4395  21b8				  -	      else
   4396  21b8				  -	      ifnconst	pfres
   4397  21b8				  -	      lda	#8
   4398  21b8				  -	      else
   4399  21b8				  -	      lda	#(96/pfres)	; try to come close to the real size
   4400  21b8				  -	      endif
   4401  21b8				  -	      endif
   4402  21b8				  -	      sta	temp1
   4403  21b8				  -	      jmp	continuekernel
   4404  21b8					      endif
   4405  21b8
   4406  21b8				   altkernel
   4407  21b8
   4408  21b8				  -	      ifconst	PFmaskvalue
   4409  21b8				  -	      lda	#PFmaskvalue
   4410  21b8					      else
   4411  21b8		       a9 00		      lda	#0
   4412  21ba					      endif
   4413  21ba		       85 0e		      sta	PF1L
   4414  21bc		       85 0f		      sta	PF2
   4415  21be
   4416  21be
   4417  21be							;sleep 3
   4418  21be
   4419  21be							;28 cycles to fix things
   4420  21be							;minus 11=17
   4421  21be
   4422  21be							; lax temp4
   4423  21be							; clc
   4424  21be		       8a		      txa
   4425  21bf					      ifnconst	vertical_reflect
   4426  21bf		       cb fc		      sbx	#256-pfwidth
   4427  21c1				  -	      else
   4428  21c1				  -	      sbx	#256-pfwidth/2
   4429  21c1					      endif
   4430  21c1
   4431  21c1		       30 12		      bmi	lastkernelline
   4432  21c3
   4433  21c3				  -	      ifconst	PFcolorandheight
   4434  21c3				  -	      ifconst	pfres
   4435  21c3				  -	      ldy	playfieldcolorandheight-131+pfres*pfwidth,x
   4436  21c3				  -	      else
   4437  21c3				  -	      ldy	playfieldcolorandheight-87,x
   4438  21c3				  -	      endif
   4439  21c3				  -	      ifnconst	backgroundchange
   4440  21c3				  -	      sty	COLUPF
   4441  21c3				  -	      else
   4442  21c3				  -	      sty	COLUBK
   4443  21c3				  -	      endif
   4444  21c3				  -	      ifconst	pfres
   4445  21c3				  -	      lda	playfieldcolorandheight-132+pfres*pfwidth,x
   4446  21c3				  -	      else
   4447  21c3				  -	      lda	playfieldcolorandheight-88,x
   4448  21c3				  -	      endif
   4449  21c3				  -	      sta.w	temp1
   4450  21c3					      endif
   4451  21c3				  -	      ifconst	PFheights
   4452  21c3				  -	      lsr
   4453  21c3				  -	      lsr
   4454  21c3				  -	      tay
   4455  21c3				  -	      lda	(pfheighttable),y
   4456  21c3				  -	      sta.w	temp1
   4457  21c3					      endif
   4458  21c3					      ifconst	PFcolors
   4459  21c3		       a8		      tay
   4460  21c4		       b1 f0		      lda	(pfcolortable),y
   4461  21c6					      ifnconst	backgroundchange
   4462  21c6		       85 08		      sta	COLUPF
   4463  21c8				  -	      else
   4464  21c8				  -	      sta	COLUBK
   4465  21c8					      endif
   4466  21c8				  -	      ifconst	pfrowheight
   4467  21c8				  -	      lda	#pfrowheight
   4468  21c8					      else
   4469  21c8				  -	      ifnconst	pfres
   4470  21c8				  -	      lda	#8
   4471  21c8					      else
   4472  21c8		       a9 18		      lda	#(96/pfres)	; try to come close to the real size
   4473  21ca					      endif
   4474  21ca					      endif
   4475  21ca		       85 9c		      sta	temp1
   4476  21cc					      endif
   4477  21cc					      ifnconst	PFcolorandheight
   4478  21cc				  -	      ifnconst	PFcolors
   4479  21cc				  -	      ifnconst	PFheights
   4480  21cc				  -	      ifnconst	no_blank_lines
   4481  21cc				  -			; read paddle 0
   4482  21cc				  -			; lo-res paddle read
   4483  21cc				  -			; bit INPT0
   4484  21cc				  -			; bmi paddleskipread
   4485  21cc				  -			; inc paddle0
   4486  21cc				  -			;donepaddleskip
   4487  21cc				  -	      sleep	10
   4488  21cc				  -	      ifconst	pfrowheight
   4489  21cc				  -	      lda	#pfrowheight
   4490  21cc				  -	      else
   4491  21cc				  -	      ifnconst	pfres
   4492  21cc				  -	      lda	#8
   4493  21cc				  -	      else
   4494  21cc				  -	      lda	#(96/pfres)	; try to come close to the real size
   4495  21cc				  -	      endif
   4496  21cc				  -	      endif
   4497  21cc				  -	      sta	temp1
   4498  21cc				  -	      endif
   4499  21cc				  -	      endif
   4500  21cc					      endif
   4501  21cc					      endif
   4502  21cc
   4503  21cc
   4504  21cc		       a5 92		      lda	ballheight
   4505  21ce		       c7 89		      dcp	bally
   4506  21d0		       e5 9f		      sbc	temp4
   4507  21d2
   4508  21d2
   4509  21d2		       4c 76 f1 	      jmp	goback
   4510  21d5
   4511  21d5
   4512  21d5					      ifnconst	no_blank_lines
   4513  21d5				   lastkernelline
   4514  21d5				  -	      ifnconst	PFcolors
   4515  21d5				  -	      sleep	10
   4516  21d5					      else
   4517  21d5		       a0 7c		      ldy	#124
   4518  21d7		       b1 f0		      lda	(pfcolortable),y
   4519  21d9		       85 08		      sta	COLUPF
   4520  21db					      endif
   4521  21db
   4522  21db				  -	      ifconst	PFheights
   4523  21db				  -	      ldx	#1
   4524  21db				  -			;sleep 4
   4525  21db				  -	      sleep	3	; this was over 1 cycle
   4526  21db					      else
   4527  21db		       a6 ef		      ldx	playfieldpos
   4528  21dd							;sleep 3
      0  21dd					      sleep	2	; this was over 1 cycle
      1  21dd				   .CYCLES    SET	2
      2  21dd
      3  21dd				  -	      IF	.CYCLES < 2
      4  21dd				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  21dd				  -	      ERR
      6  21dd					      ENDIF
      7  21dd
      8  21dd				  -	      IF	.CYCLES & 1
      9  21dd				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  21dd				  -	      nop	0
     11  21dd				  -	      ELSE
     12  21dd				  -	      bit	VSYNC
     13  21dd				  -	      ENDIF
     14  21dd				  -.CYCLES    SET	.CYCLES - 3
     15  21dd					      ENDIF
     16  21dd
     17  21dd					      REPEAT	.CYCLES / 2
     18  21dd		       ea		      nop
     19  21de					      REPEND
   4530  21de					      endif
   4531  21de
   4532  21de		       4c 1b f2 	      jmp	enterlastkernel
   4533  21e1
   4534  21e1				  -	      else
   4535  21e1				  -lastkernelline
   4536  21e1				  -
   4537  21e1				  -	      ifconst	PFheights
   4538  21e1				  -	      ldx	#1
   4539  21e1				  -			;sleep 5
   4540  21e1				  -	      sleep	4	; this was over 1 cycle
   4541  21e1				  -	      else
   4542  21e1				  -	      ldx	playfieldpos
   4543  21e1				  -			;sleep 4
   4544  21e1				  -	      sleep	3	; this was over 1 cycle
   4545  21e1				  -	      endif
   4546  21e1				  -
   4547  21e1				  -	      cpx	#0
   4548  21e1				  -	      bne	.enterfromNBL
   4549  21e1				  -	      jmp	no_blank_lines_bailout
   4550  21e1					      endif
   4551  21e1
   4552  21e1					      if	((<*)>$d5)
   4553  2200		       00 00 00 00*	      align	256
   4554  2200					      endif
   4555  2200							; this is a kludge to prevent page wrapping - fix!!!
   4556  2200
   4557  2200				   .skipDrawlastP1
   4558  2200		       a9 00		      lda	#0
   4559  2202		       a8		      tay		; added so we don't cross a page
   4560  2203		       4c 2d f2 	      jmp	.continuelastP1
   4561  2206
   4562  2206				   .endkerloop		; enter at cycle 59??
   4563  2206
   4564  2206		       ea		      nop
   4565  2207
   4566  2207				   .enterfromNBL
   4567  2207					      ifconst	pfres
   4568  2207		       ac fc 10 	      ldy.w	playfield+pfres*pfwidth-4
   4569  220a		       84 0e		      sty	PF1L	;3
   4570  220c		       ac fd 10 	      ldy.w	playfield+pfres*pfwidth-3-pfadjust
   4571  220f		       84 0f		      sty	PF2L	;3
   4572  2211		       ac ff 10 	      ldy.w	playfield+pfres*pfwidth-1
   4573  2214		       84 0e		      sty	PF1R	; possibly too early?
   4574  2216		       ac fe 10 	      ldy.w	playfield+pfres*pfwidth-2-pfadjust
   4575  2219		       84 0f		      sty	PF2R	;3
   4576  221b				  -	      else
   4577  221b				  -	      ldy.w	playfield-48+pfwidth*12+44
   4578  221b				  -	      sty	PF1L	;3
   4579  221b				  -	      ldy.w	playfield-48+pfwidth*12+45-pfadjust
   4580  221b				  -	      sty	PF2L	;3
   4581  221b				  -	      ldy.w	playfield-48+pfwidth*12+47
   4582  221b				  -	      sty	PF1R	; possibly too early?
   4583  221b				  -	      ldy.w	playfield-48+pfwidth*12+46-pfadjust
   4584  221b				  -	      sty	PF2R	;3
   4585  221b					      endif
   4586  221b
   4587  221b				   enterlastkernel
   4588  221b		       a5 92		      lda	ballheight
   4589  221d
   4590  221d							; tya
   4591  221d		       c7 89		      dcp	bally
   4592  221f							; sleep 4
   4593  221f
   4594  221f							; sbc stack3
   4595  221f		       2a		      rol
   4596  2220		       2a		      rol
   4597  2221		       85 1f		      sta	ENABL
   4598  2223
   4599  2223		       a5 8f		      lda	player1height	;3
   4600  2225		       c7 86		      dcp	player1y	;5
   4601  2227		       90 d7		      bcc	.skipDrawlastP1
   4602  2229		       a4 86		      ldy	player1y	;3
   4603  222b		       b1 8c		      lda	(player1pointer),y	;5; player0pointer must be selected carefully by the compiler
   4604  222d							; so it doesn't cross a page boundary!
   4605  222d
   4606  222d				   .continuelastP1
   4607  222d		       85 1c		      sta	GRP1	;3
   4608  222f
   4609  222f				  -	      ifnconst	player1colors
   4610  222f				  -	      lda	missile1height	;3
   4611  222f				  -	      dcp	missile1y	;5
   4612  222f					      else
   4613  222f		       b1 87		      lda	(player1color),y
   4614  2231		       85 07		      sta	COLUP1
   4615  2233					      endif
   4616  2233
   4617  2233		       ca		      dex
   4618  2234							;dec temp4 ; might try putting this above PF writes
   4619  2234		       f0 36		      beq	endkernel
   4620  2236
   4621  2236
   4622  2236					      ifconst	pfres
   4623  2236		       ac fc 10 	      ldy.w	playfield+pfres*pfwidth-4
   4624  2239		       84 0e		      sty	PF1L	;3
   4625  223b		       ac fd 10 	      ldy.w	playfield+pfres*pfwidth-3-pfadjust
   4626  223e		       84 0f		      sty	PF2L	;3
   4627  2240		       ac ff 10 	      ldy.w	playfield+pfres*pfwidth-1
   4628  2243		       84 0e		      sty	PF1R	; possibly too early?
   4629  2245		       ac fe 10 	      ldy.w	playfield+pfres*pfwidth-2-pfadjust
   4630  2248		       84 0f		      sty	PF2R	;3
   4631  224a				  -	      else
   4632  224a				  -	      ldy.w	playfield-48+pfwidth*12+44
   4633  224a				  -	      sty	PF1L	;3
   4634  224a				  -	      ldy.w	playfield-48+pfwidth*12+45-pfadjust
   4635  224a				  -	      sty	PF2L	;3
   4636  224a				  -	      ldy.w	playfield-48+pfwidth*12+47
   4637  224a				  -	      sty	PF1R	; possibly too early?
   4638  224a				  -	      ldy.w	playfield-48+pfwidth*12+46-pfadjust
   4639  224a				  -	      sty	PF2R	;3
   4640  224a					      endif
   4641  224a
   4642  224a				  -	      ifnconst	player1colors
   4643  224a				  -	      rol		;2
   4644  224a				  -	      rol		;2
   4645  224a				  -	      sta	ENAM1	;3
   4646  224a					      else
   4647  224a					      ifnconst	playercolors
      0  224a					      sleep	7
      1  224a				   .CYCLES    SET	7
      2  224a
      3  224a				  -	      IF	.CYCLES < 2
      4  224a				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  224a				  -	      ERR
      6  224a					      ENDIF
      7  224a
      8  224a					      IF	.CYCLES & 1
      9  224a					      IFNCONST	NO_ILLEGAL_OPCODES
     10  224a		       04 00		      nop	0
     11  224c				  -	      ELSE
     12  224c				  -	      bit	VSYNC
     13  224c					      ENDIF
     14  224c				   .CYCLES    SET	.CYCLES - 3
     15  224c					      ENDIF
     16  224c
     17  224c					      REPEAT	.CYCLES / 2
     18  224c		       ea		      nop
     17  224c					      REPEND
     18  224d		       ea		      nop
     19  224e					      REPEND
   4649  224e				  -	      else
   4650  224e				  -	      lda.w	player0colorstore
   4651  224e				  -	      sta	COLUP0
   4652  224e					      endif
   4653  224e					      endif
   4654  224e
   4655  224e		       ad 8e 00 	      lda.w	player0height
   4656  2251		       c7 85		      dcp	player0y
   4657  2253		       90 11		      bcc	.skipDrawlastP0
   4658  2255		       a4 85		      ldy	player0y
   4659  2257		       b1 8a		      lda	(player0pointer),y
   4660  2259				   .continuelastP0
   4661  2259		       85 1b		      sta	GRP0
   4662  225b
   4663  225b
   4664  225b
   4665  225b					      ifnconst	no_blank_lines
   4666  225b		       a5 90		      lda	missile0height	;3
   4667  225d		       c7 91		      dcp	missile0y	;5
   4668  225f		       e5 f6		      sbc	stack1
   4669  2261		       85 1d		      sta	ENAM0	;3
   4670  2263		       4c 06 f2 	      jmp	.endkerloop
   4671  2266				  -	      else
   4672  2266				  -	      ifconst	readpaddle
   4673  2266				  -	      ldy	currentpaddle
   4674  2266				  -	      lda	INPT0,y
   4675  2266				  -	      bpl	noreadpaddle2
   4676  2266				  -	      inc	paddle
   4677  2266				  -	      jmp	.endkerloop
   4678  2266				  -noreadpaddle2
   4679  2266				  -	      sleep	4
   4680  2266				  -	      jmp	.endkerloop
   4681  2266				  -	      else		; no_blank_lines and no paddle reading
   4682  2266				  -	      pla
   4683  2266				  -	      pha		; 14 cycles in 4 bytes
   4684  2266				  -	      pla
   4685  2266				  -	      pha
   4686  2266				  -			; sleep 14
   4687  2266				  -	      jmp	.endkerloop
   4688  2266				  -	      endif
   4689  2266					      endif
   4690  2266
   4691  2266
   4692  2266							; ifconst donepaddleskip
   4693  2266							;paddleskipread
   4694  2266							; this is kind of lame, since it requires 4 cycles from a page boundary crossing
   4695  2266							; plus we get a lo-res paddle read
   4696  2266							; bmi donepaddleskip
   4697  2266							; endif
   4698  2266
   4699  2266				   .skipDrawlastP0
   4700  2266		       a9 00		      lda	#0
   4701  2268		       a8		      tay
   4702  2269		       4c 59 f2 	      jmp	.continuelastP0
   4703  226c
   4704  226c				  -	      ifconst	no_blank_lines
   4705  226c				  -no_blank_lines_bailout
   4706  226c				  -	      ldx	#0
   4707  226c					      endif
   4708  226c
   4709  226c				   endkernel
   4710  226c							; 6 digit score routine
   4711  226c		       86 0e		      stx	PF1
   4712  226e		       86 0f		      stx	PF2
   4713  2270		       86 0d		      stx	PF0
   4714  2272		       18		      clc
   4715  2273
   4716  2273				  -	      ifconst	pfrowheight
   4717  2273				  -	      lda	#pfrowheight+2
   4718  2273					      else
   4719  2273				  -	      ifnconst	pfres
   4720  2273				  -	      lda	#10
   4721  2273					      else
   4722  2273		       a9 1a		      lda	#(96/pfres)+2	; try to come close to the real size
   4723  2275					      endif
   4724  2275					      endif
   4725  2275
   4726  2275		       e5 ef		      sbc	playfieldpos
   4727  2277		       85 ef		      sta	playfieldpos
   4728  2279		       8a		      txa
   4729  227a
   4730  227a				  -	      ifconst	shakescreen
   4731  227a				  -	      bit	shakescreen
   4732  227a				  -	      bmi	noshakescreen2
   4733  227a				  -	      ldx	#$3D
   4734  227a				  -noshakescreen2
   4735  227a					      endif
   4736  227a
   4737  227a		       95 02		      sta	WSYNC,x
   4738  227c
   4739  227c							; STA WSYNC ;first one, need one more
   4740  227c		       85 0b		      sta	REFP0
   4741  227e		       85 0c		      sta	REFP1
   4742  2280		       85 1b		      STA	GRP0
   4743  2282		       85 1c		      STA	GRP1
   4744  2284							; STA PF1
   4745  2284							; STA PF2
   4746  2284		       85 2b		      sta	HMCLR
   4747  2286		       85 1d		      sta	ENAM0
   4748  2288		       85 1e		      sta	ENAM1
   4749  228a		       85 1f		      sta	ENABL
   4750  228c
   4751  228c		       a5 9d		      lda	temp2	;restore variables that were obliterated by kernel
   4752  228e		       85 85		      sta	player0y
   4753  2290		       a5 9e		      lda	temp3
   4754  2292		       85 86		      sta	player1y
   4755  2294				  -	      ifnconst	player1colors
   4756  2294				  -	      lda	temp6
   4757  2294				  -	      sta	missile1y
   4758  2294					      endif
   4759  2294					      ifnconst	playercolors
   4760  2294					      ifnconst	readpaddle
   4761  2294		       a5 a0		      lda	temp5
   4762  2296		       85 91		      sta	missile0y
   4763  2298					      endif
   4764  2298					      endif
   4765  2298		       a5 f7		      lda	stack2
   4766  229a		       85 89		      sta	bally
   4767  229c
   4768  229c							; strangely, this isn't required any more. might have
   4769  229c							; resulted from the no_blank_lines score bounce fix
   4770  229c							;ifconst no_blank_lines
   4771  229c							;sta WSYNC
   4772  229c							;endif
   4773  229c
   4774  229c		       ad 84 02 	      lda	INTIM
   4775  229f		       18		      clc
   4776  22a0					      ifnconst	vblank_time
   4777  22a0		       69 8e		      adc	#43+12+87
   4778  22a2				  -	      else
   4779  22a2				  -	      adc	#vblank_time+12+87
   4780  22a2				  -
   4781  22a2					      endif
   4782  22a2							; sta WSYNC
   4783  22a2		       8d 96 02 	      sta	TIM64T
   4784  22a5
   4785  22a5				  -	      ifconst	minikernel
   4786  22a5				  -	      jsr	minikernel
   4787  22a5					      endif
   4788  22a5
   4789  22a5							; now reassign temp vars for score pointers
   4790  22a5
   4791  22a5							; score pointers contain:
   4792  22a5							; score1-5: lo1,lo2,lo3,lo4,lo5,lo6
   4793  22a5							; swap lo2->temp1
   4794  22a5							; swap lo4->temp3
   4795  22a5							; swap lo6->temp5
   4796  22a5					      ifnconst	noscore
   4797  22a5		       a5 97		      lda	scorepointers+1
   4798  22a7							; ldy temp1
   4799  22a7		       85 9c		      sta	temp1
   4800  22a9							; sty scorepointers+1
   4801  22a9
   4802  22a9		       a5 99		      lda	scorepointers+3
   4803  22ab							; ldy temp3
   4804  22ab		       85 9e		      sta	temp3
   4805  22ad							; sty scorepointers+3
   4806  22ad
   4807  22ad
   4808  22ad		       85 2b		      sta	HMCLR
   4809  22af		       ba		      tsx
   4810  22b0		       86 f6		      stx	stack1
   4811  22b2		       a2 e0		      ldx	#$E0
   4812  22b4		       86 20		      stx	HMP0
   4813  22b6
   4814  22b6		       a5 a3		      LDA	scorecolor
   4815  22b8		       85 06		      STA	COLUP0
   4816  22ba		       85 07		      STA	COLUP1
   4817  22bc				  -	      ifconst	scorefade
   4818  22bc				  -	      STA	stack2
   4819  22bc					      endif
   4820  22bc					      ifconst	pfscore
   4821  22bc		       a5 f4		      lda	pfscorecolor
   4822  22be		       85 08		      sta	COLUPF
   4823  22c0					      endif
   4824  22c0		       85 02		      sta	WSYNC
   4825  22c2		       a2 00		      ldx	#0
   4826  22c4		       86 1b		      STx	GRP0
   4827  22c6		       86 1c		      STx	GRP1	; seems to be needed because of vdel
   4828  22c8
   4829  22c8		       a5 9b		      lda	scorepointers+5
   4830  22ca							; ldy temp5
   4831  22ca		       95 a0		      sta	temp5,x
   4832  22cc							; sty scorepointers+5
   4833  22cc		       a9 ff		      lda	#>scoretable
   4834  22ce		       85 97		      sta	scorepointers+1
   4835  22d0		       85 99		      sta	scorepointers+3
   4836  22d2		       85 9b		      sta	scorepointers+5
   4837  22d4		       85 9d		      sta	temp2
   4838  22d6		       85 9f		      sta	temp4
   4839  22d8		       85 a1		      sta	temp6
   4840  22da		       a0 07		      LDY	#7
   4841  22dc		       84 25		      STY	VDELP0
   4842  22de		       85 10		      STA	RESP0
   4843  22e0		       85 11		      STA	RESP1
   4844  22e2
   4845  22e2
   4846  22e2		       a9 03		      LDA	#$03
   4847  22e4		       85 04		      STA	NUSIZ0
   4848  22e6		       85 05		      STA	NUSIZ1
   4849  22e8		       85 26		      STA	VDELP1
   4850  22ea		       a9 f0		      LDA	#$F0
   4851  22ec		       85 21		      STA	HMP1
   4852  22ee		       b1 96		      lda	(scorepointers),y
   4853  22f0		       85 1b		      sta	GRP0
   4854  22f2		       85 2a		      STA	HMOVE	; cycle 73 ?
   4855  22f4		       4c 09 f3 	      jmp	beginscore
   4856  22f7
   4857  22f7
   4858  22f7					      if	((<*)>$d4)
   4859  2300		       00 00 00 00*	      align	256	; kludge that potentially wastes space! should be fixed!
   4860  2300					      endif
   4861  2300
   4862  2300				   loop2
   4863  2300		       b1 96		      lda	(scorepointers),y	;+5 68 204
   4864  2302		       85 1b		      sta	GRP0	;+3 71 213 D1 -- -- --
   4865  2304					      ifconst	pfscore
   4866  2304		       ad f2 00 	      lda.w	pfscore1
   4867  2307		       85 0e		      sta	PF1
   4868  2309				  -	      else
   4869  2309				  -	      ifconst	scorefade
   4870  2309				  -	      sleep	2
   4871  2309				  -	      dec	stack2	; decrement the temporary scorecolor
   4872  2309				  -	      else
   4873  2309				  -	      sleep	7
   4874  2309				  -	      endif
   4875  2309					      endif
   4876  2309							; cycle 0
   4877  2309				   beginscore
   4878  2309		       b1 9e		      lda	(scorepointers+$8),y	;+5 5 15
   4879  230b		       85 1c		      sta	GRP1	;+3 8 24 D1 D1 D2 --
   4880  230d		       b1 9c		      lda	(scorepointers+$6),y	;+5 13 39
   4881  230f		       85 1b		      sta	GRP0	;+3 16 48 D3 D1 D2 D2
   4882  2311		       b3 98		      lax	(scorepointers+$2),y	;+5 29 87
   4883  2313		       9a		      txs
   4884  2314		       b3 9a		      lax	(scorepointers+$4),y	;+5 36 108
   4885  2316				  -	      ifconst	scorefade
   4886  2316				  -	      lda	stack2
   4887  2316					      else
      0  2316					      sleep	3
      1  2316				   .CYCLES    SET	3
      2  2316
      3  2316				  -	      IF	.CYCLES < 2
      4  2316				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  2316				  -	      ERR
      6  2316					      ENDIF
      7  2316
      8  2316					      IF	.CYCLES & 1
      9  2316					      IFNCONST	NO_ILLEGAL_OPCODES
     10  2316		       04 00		      nop	0
     11  2318				  -	      ELSE
     12  2318				  -	      bit	VSYNC
     13  2318					      ENDIF
     14  2318				   .CYCLES    SET	.CYCLES - 3
     15  2318					      ENDIF
     16  2318
     17  2318				  -	      REPEAT	.CYCLES / 2
     18  2318				  -	      nop
     19  2318					      REPEND
   4889  2318					      endif
   4890  2318
   4891  2318					      ifconst	pfscore
   4892  2318		       a5 f3		      lda	pfscore2
   4893  231a		       85 0e		      sta	PF1
   4894  231c				  -	      else
   4895  231c				  -	      ifconst	scorefade
   4896  231c				  -	      sta	COLUP0
   4897  231c				  -	      sta	COLUP1
   4898  231c				  -	      else
   4899  231c				  -	      sleep	6
   4900  231c				  -	      endif
   4901  231c					      endif
   4902  231c
   4903  231c		       b1 a0		      lda	(scorepointers+$A),y	;+5 21 63
   4904  231e		       86 1c		      stx	GRP1	;+3 44 132 D3 D3 D4 D2!
   4905  2320		       ba		      tsx
   4906  2321		       86 1b		      stx	GRP0	;+3 47 141 D5 D3! D4 D4
   4907  2323		       85 1c		      sta	GRP1	;+3 50 150 D5 D5 D6 D4!
   4908  2325		       84 1b		      sty	GRP0	;+3 53 159 D4* D5! D6 D6
   4909  2327		       88		      dey
   4910  2328		       10 d6		      bpl	loop2	;+2 60 180
   4911  232a
   4912  232a		       a6 f6		      ldx	stack1
   4913  232c		       9a		      txs
   4914  232d							; lda scorepointers+1
   4915  232d		       a4 9c		      ldy	temp1
   4916  232f							; sta temp1
   4917  232f		       84 97		      sty	scorepointers+1
   4918  2331
   4919  2331		       a9 00		      LDA	#0
   4920  2333		       85 0e		      sta	PF1
   4921  2335		       85 1b		      STA	GRP0
   4922  2337		       85 1c		      STA	GRP1
   4923  2339		       85 25		      STA	VDELP0
   4924  233b		       85 26		      STA	VDELP1	;do we need these
   4925  233d		       85 04		      STA	NUSIZ0
   4926  233f		       85 05		      STA	NUSIZ1
   4927  2341
   4928  2341							; lda scorepointers+3
   4929  2341		       a4 9e		      ldy	temp3
   4930  2343							; sta temp3
   4931  2343		       84 99		      sty	scorepointers+3
   4932  2345
   4933  2345							; lda scorepointers+5
   4934  2345		       a4 a0		      ldy	temp5
   4935  2347							; sta temp5
   4936  2347		       84 9b		      sty	scorepointers+5
   4937  2349					      endif		;noscore
   4938  2349		       a9 c2		      LDA	#%11000010
   4939  234b		       85 02		      sta	WSYNC
   4940  234d		       85 01		      STA	VBLANK
      0  234f					      RETURN
      1  234f				  -	      ifnconst	bankswitch
      2  234f				  -	      rts
      3  234f					      else
      4  234f		       4c da ff 	      jmp	BS_return
      5  2352					      endif
   4942  2352
   4943  2352				  -	      ifconst	shakescreen
   4944  2352				  -doshakescreen
   4945  2352				  -	      bit	shakescreen
   4946  2352				  -	      bmi	noshakescreen
   4947  2352				  -	      sta	WSYNC
   4948  2352				  -noshakescreen
   4949  2352				  -	      ldx	missile0height
   4950  2352				  -	      inx
   4951  2352				  -	      rts
   4952  2352					      endif
   4953  2352
   4954  2352							; Provided under the CC0 license. See the included LICENSE.txt for details.
   4955  2352
   4956  2352				   start
   4957  2352		       78		      sei
   4958  2353		       d8		      cld
   4959  2354		       a0 00		      ldy	#0
   4960  2356		       a5 d0		      lda	$D0
   4961  2358		       c9 2c		      cmp	#$2C	;check RAM location #1
   4962  235a		       d0 07		      bne	MachineIs2600
   4963  235c		       a5 d1		      lda	$D1
   4964  235e		       c9 a9		      cmp	#$A9	;check RAM location #2
   4965  2360		       d0 01		      bne	MachineIs2600
   4966  2362		       88		      dey
   4967  2363				   MachineIs2600
   4968  2363		       a2 00		      ldx	#0
   4969  2365		       8a		      txa
   4970  2366				   clearmem
   4971  2366		       e8		      inx
   4972  2367		       9a		      txs
   4973  2368		       48		      pha
   4974  2369		       d0 fb		      bne	clearmem
   4975  236b		       84 9c		      sty	temp1
   4976  236d					      ifnconst	multisprite
   4977  236d				  -	      ifconst	pfrowheight
   4978  236d				  -	      lda	#pfrowheight
   4979  236d					      else
   4980  236d					      ifconst	pfres
   4981  236d		       a9 18		      lda	#(96/pfres)
   4982  236f				  -	      else
   4983  236f				  -	      lda	#8
   4984  236f					      endif
   4985  236f					      endif
   4986  236f		       85 ef		      sta	playfieldpos
   4987  2371					      endif
   4988  2371		       a2 05		      ldx	#5
   4989  2373				   initscore
   4990  2373		       a9 71		      lda	#<scoretable
   4991  2375		       95 96		      sta	scorepointers,x
   4992  2377		       ca		      dex
   4993  2378		       10 f9		      bpl	initscore
   4994  237a		       a9 01		      lda	#1
   4995  237c		       85 0a		      sta	CTRLPF
   4996  237e		       0d 84 02 	      ora	INTIM
   4997  2381		       85 a2		      sta	rand
   4998  2383
   4999  2383				  -	      ifconst	multisprite
   5000  2383				  -	      jsr	multisprite_setup
   5001  2383					      endif
   5002  2383
   5003  2383				  -	      ifnconst	bankswitch
   5004  2383				  -	      jmp	game
   5005  2383					      else
   5006  2383		       a9 d0		      lda	#>(game-1)
   5007  2385		       48		      pha
   5008  2386		       a9 ff		      lda	#<(game-1)
   5009  2388		       48		      pha
   5010  2389		       48		      pha
   5011  238a		       48		      pha
   5012  238b		       a2 01		      ldx	#1
   5013  238d		       4c e8 ff 	      jmp	BS_jsr
   5014  2390					      endif
   5015  2390							; Provided under the CC0 license. See the included LICENSE.txt for details.
   5016  2390
   5017  2390							; playfield drawing routines
   5018  2390							; you get a 32x12 bitmapped display in a single color :)
   5019  2390							; 0-31 and 0-11
   5020  2390
   5021  2390				   pfclear		; clears playfield - or fill with pattern
   5022  2390					      ifconst	pfres
   5023  2390		       a2 0f		      ldx	#pfres*pfwidth-1
   5024  2392				  -	      else
   5025  2392				  -	      ldx	#47-(4-pfwidth)*12	; will this work?
   5026  2392					      endif
   5027  2392				   pfclear_loop
   5028  2392				  -	      ifnconst	superchip
   5029  2392				  -	      sta	playfield,x
   5030  2392					      else
   5031  2392		       9d 70 10 	      sta	playfield-128,x
   5032  2395					      endif
   5033  2395		       ca		      dex
   5034  2396		       10 fa		      bpl	pfclear_loop
      0  2398					      RETURN
      1  2398				  -	      ifnconst	bankswitch
      2  2398				  -	      rts
      3  2398					      else
      4  2398		       4c da ff 	      jmp	BS_return
      5  239b					      endif
   5036  239b
   5037  239b				   setuppointers
   5038  239b		       86 9d		      stx	temp2	; store on.off.flip value
   5039  239d		       aa		      tax		; put x-value in x 
   5040  239e		       4a		      lsr
   5041  239f		       4a		      lsr
   5042  23a0		       4a		      lsr		; divide x pos by 8 
   5043  23a1		       85 9c		      sta	temp1
   5044  23a3		       98		      tya
   5045  23a4		       0a		      asl
   5046  23a5					      if	pfwidth=4
   5047  23a5		       0a		      asl		; multiply y pos by 4
   5048  23a6					      endif		; else multiply by 2
   5049  23a6		       18		      clc
   5050  23a7		       65 9c		      adc	temp1	; add them together to get actual memory location offset
   5051  23a9		       a8		      tay		; put the value in y
   5052  23aa		       a5 9d		      lda	temp2	; restore on.off.flip value
   5053  23ac		       60		      rts
   5054  23ad
   5055  23ad				   pfread
   5056  23ad							;x=xvalue, y=yvalue
   5057  23ad		       20 9b f3 	      jsr	setuppointers
   5058  23b0		       bd 45 f4 	      lda	setbyte,x
   5059  23b3		       39 f0 10 	      and	playfield,y
   5060  23b6		       5d 45 f4 	      eor	setbyte,x
   5061  23b9							; beq readzero
   5062  23b9							; lda #1
   5063  23b9							; readzero
      0  23b9					      RETURN
      1  23b9				  -	      ifnconst	bankswitch
      2  23b9				  -	      rts
      3  23b9					      else
      4  23b9		       4c da ff 	      jmp	BS_return
      5  23bc					      endif
   5065  23bc
   5066  23bc				   pfpixel
   5067  23bc							;x=xvalue, y=yvalue, a=0,1,2
   5068  23bc		       20 9b f3 	      jsr	setuppointers
   5069  23bf
   5070  23bf					      ifconst	bankswitch
   5071  23bf		       a5 9d		      lda	temp2	; load on.off.flip value (0,1, or 2)
   5072  23c1		       f0 0f		      beq	pixelon_r	; if "on" go to on
   5073  23c3		       4a		      lsr
   5074  23c4		       b0 18		      bcs	pixeloff_r	; value is 1 if true
   5075  23c6		       b9 f0 10 	      lda	playfield,y	; if here, it's "flip"
   5076  23c9		       5d 45 f4 	      eor	setbyte,x
   5077  23cc					      ifconst	superchip
   5078  23cc		       99 70 10 	      sta	playfield-128,y
   5079  23cf				  -	      else
   5080  23cf				  -	      sta	playfield,y
   5081  23cf					      endif
      0  23cf					      RETURN
      1  23cf				  -	      ifnconst	bankswitch
      2  23cf				  -	      rts
      3  23cf					      else
      4  23cf		       4c da ff 	      jmp	BS_return
      5  23d2					      endif
   5083  23d2				   pixelon_r
   5084  23d2		       b9 f0 10 	      lda	playfield,y
   5085  23d5		       1d 45 f4 	      ora	setbyte,x
   5086  23d8					      ifconst	superchip
   5087  23d8		       99 70 10 	      sta	playfield-128,y
   5088  23db				  -	      else
   5089  23db				  -	      sta	playfield,y
   5090  23db					      endif
      0  23db					      RETURN
      1  23db				  -	      ifnconst	bankswitch
      2  23db				  -	      rts
      3  23db					      else
      4  23db		       4c da ff 	      jmp	BS_return
      5  23de					      endif
   5092  23de				   pixeloff_r
   5093  23de		       bd 45 f4 	      lda	setbyte,x
   5094  23e1		       49 ff		      eor	#$ff
   5095  23e3		       39 f0 10 	      and	playfield,y
   5096  23e6					      ifconst	superchip
   5097  23e6		       99 70 10 	      sta	playfield-128,y
   5098  23e9				  -	      else
   5099  23e9				  -	      sta	playfield,y
   5100  23e9					      endif
      0  23e9					      RETURN
      1  23e9				  -	      ifnconst	bankswitch
      2  23e9				  -	      rts
      3  23e9					      else
      4  23e9		       4c da ff 	      jmp	BS_return
      5  23ec					      endif
   5102  23ec
   5103  23ec				  -	      else
   5104  23ec				  -	      jmp	plotpoint
   5105  23ec					      endif
   5106  23ec
   5107  23ec				   pfhline
   5108  23ec							;x=xvalue, y=yvalue, a=0,1,2, temp3=endx
   5109  23ec		       20 9b f3 	      jsr	setuppointers
   5110  23ef		       4c f9 f3 	      jmp	noinc
   5111  23f2				   keepgoing
   5112  23f2		       e8		      inx
   5113  23f3		       8a		      txa
   5114  23f4		       29 07		      and	#7
   5115  23f6		       d0 01		      bne	noinc
   5116  23f8		       c8		      iny
   5117  23f9				   noinc
   5118  23f9		       20 1e f4 	      jsr	plotpoint
   5119  23fc		       e4 9e		      cpx	temp3
   5120  23fe		       30 f2		      bmi	keepgoing
      0  2400					      RETURN
      1  2400				  -	      ifnconst	bankswitch
      2  2400				  -	      rts
      3  2400					      else
      4  2400		       4c da ff 	      jmp	BS_return
      5  2403					      endif
   5122  2403
   5123  2403				   pfvline
   5124  2403							;x=xvalue, y=yvalue, a=0,1,2, temp3=endx
   5125  2403		       20 9b f3 	      jsr	setuppointers
   5126  2406		       84 9c		      sty	temp1	; store memory location offset
   5127  2408		       e6 9e		      inc	temp3	; increase final x by 1 
   5128  240a		       a5 9e		      lda	temp3
   5129  240c		       0a		      asl
   5130  240d					      if	pfwidth=4
   5131  240d		       0a		      asl		; multiply by 4
   5132  240e					      endif		; else multiply by 2
   5133  240e		       85 9e		      sta	temp3	; store it
   5134  2410							; Thanks to Michael Rideout for fixing a bug in this code
   5135  2410							; right now, temp1=y=starting memory location, temp3=final
   5136  2410							; x should equal original x value
   5137  2410				   keepgoingy
   5138  2410		       20 1e f4 	      jsr	plotpoint
   5139  2413		       c8		      iny
   5140  2414		       c8		      iny
   5141  2415					      if	pfwidth=4
   5142  2415		       c8		      iny
   5143  2416		       c8		      iny
   5144  2417					      endif
   5145  2417		       c4 9e		      cpy	temp3
   5146  2419		       30 f5		      bmi	keepgoingy
      0  241b					      RETURN
      1  241b				  -	      ifnconst	bankswitch
      2  241b				  -	      rts
      3  241b					      else
      4  241b		       4c da ff 	      jmp	BS_return
      5  241e					      endif
   5148  241e
   5149  241e				   plotpoint
   5150  241e		       a5 9d		      lda	temp2	; load on.off.flip value (0,1, or 2)
   5151  2420		       f0 0d		      beq	pixelon	; if "on" go to on
   5152  2422		       4a		      lsr
   5153  2423		       b0 14		      bcs	pixeloff	; value is 1 if true
   5154  2425		       b9 f0 10 	      lda	playfield,y	; if here, it's "flip"
   5155  2428		       5d 45 f4 	      eor	setbyte,x
   5156  242b					      ifconst	superchip
   5157  242b		       99 70 10 	      sta	playfield-128,y
   5158  242e				  -	      else
   5159  242e				  -	      sta	playfield,y
   5160  242e					      endif
   5161  242e		       60		      rts
   5162  242f				   pixelon
   5163  242f		       b9 f0 10 	      lda	playfield,y
   5164  2432		       1d 45 f4 	      ora	setbyte,x
   5165  2435					      ifconst	superchip
   5166  2435		       99 70 10 	      sta	playfield-128,y
   5167  2438				  -	      else
   5168  2438				  -	      sta	playfield,y
   5169  2438					      endif
   5170  2438		       60		      rts
   5171  2439				   pixeloff
   5172  2439		       bd 45 f4 	      lda	setbyte,x
   5173  243c		       49 ff		      eor	#$ff
   5174  243e		       39 f0 10 	      and	playfield,y
   5175  2441					      ifconst	superchip
   5176  2441		       99 70 10 	      sta	playfield-128,y
   5177  2444				  -	      else
   5178  2444				  -	      sta	playfield,y
   5179  2444					      endif
   5180  2444		       60		      rts
   5181  2445
   5182  2445				   setbyte
   5183  2445					      ifnconst	pfcenter
   5184  2445		       80		      .byte.b	$80
   5185  2446		       40		      .byte.b	$40
   5186  2447		       20		      .byte.b	$20
   5187  2448		       10		      .byte.b	$10
   5188  2449		       08		      .byte.b	$08
   5189  244a		       04		      .byte.b	$04
   5190  244b		       02		      .byte.b	$02
   5191  244c		       01		      .byte.b	$01
   5192  244d					      endif
   5193  244d		       01		      .byte.b	$01
   5194  244e		       02		      .byte.b	$02
   5195  244f		       04		      .byte.b	$04
   5196  2450		       08		      .byte.b	$08
   5197  2451		       10		      .byte.b	$10
   5198  2452		       20		      .byte.b	$20
   5199  2453		       40		      .byte.b	$40
   5200  2454		       80		      .byte.b	$80
   5201  2455		       80		      .byte.b	$80
   5202  2456		       40		      .byte.b	$40
   5203  2457		       20		      .byte.b	$20
   5204  2458		       10		      .byte.b	$10
   5205  2459		       08		      .byte.b	$08
   5206  245a		       04		      .byte.b	$04
   5207  245b		       02		      .byte.b	$02
   5208  245c		       01		      .byte.b	$01
   5209  245d		       01		      .byte.b	$01
   5210  245e		       02		      .byte.b	$02
   5211  245f		       04		      .byte.b	$04
   5212  2460		       08		      .byte.b	$08
   5213  2461		       10		      .byte.b	$10
   5214  2462		       20		      .byte.b	$20
   5215  2463		       40		      .byte.b	$40
   5216  2464		       80		      .byte.b	$80
   5217  2465							; Provided under the CC0 license. See the included LICENSE.txt for details.
   5218  2465
   5219  2465				   pfscroll		;(a=0 left, 1 right, 2 up, 4 down, 6=upup, 12=downdown)
   5220  2465		       d0 2a		      bne	notleft
   5221  2467							;left
   5222  2467					      ifconst	pfres
   5223  2467		       a2 10		      ldx	#pfres*4
   5224  2469				  -	      else
   5225  2469				  -	      ldx	#48
   5226  2469					      endif
   5227  2469				   leftloop
   5228  2469		       bd ef 10 	      lda	playfield-1,x
   5229  246c		       4a		      lsr
   5230  246d
   5231  246d					      ifconst	superchip
   5232  246d		       bd ee 10 	      lda	playfield-2,x
   5233  2470		       2a		      rol
   5234  2471		       9d 6e 10 	      sta	playfield-130,x
   5235  2474		       bd ed 10 	      lda	playfield-3,x
   5236  2477		       6a		      ror
   5237  2478		       9d 6d 10 	      sta	playfield-131,x
   5238  247b		       bd ec 10 	      lda	playfield-4,x
   5239  247e		       2a		      rol
   5240  247f		       9d 6c 10 	      sta	playfield-132,x
   5241  2482		       bd ef 10 	      lda	playfield-1,x
   5242  2485		       6a		      ror
   5243  2486		       9d 6f 10 	      sta	playfield-129,x
   5244  2489				  -	      else
   5245  2489				  -	      rol	playfield-2,x
   5246  2489				  -	      ror	playfield-3,x
   5247  2489				  -	      rol	playfield-4,x
   5248  2489				  -	      ror	playfield-1,x
   5249  2489					      endif
   5250  2489
   5251  2489		       8a		      txa
   5252  248a		       cb 04		      sbx	#4
   5253  248c		       d0 db		      bne	leftloop
      0  248e					      RETURN
      1  248e				  -	      ifnconst	bankswitch
      2  248e				  -	      rts
      3  248e					      else
      4  248e		       4c da ff 	      jmp	BS_return
      5  2491					      endif
   5255  2491
   5256  2491				   notleft
   5257  2491		       4a		      lsr
   5258  2492		       90 2a		      bcc	notright
   5259  2494							;right
   5260  2494
   5261  2494					      ifconst	pfres
   5262  2494		       a2 10		      ldx	#pfres*4
   5263  2496				  -	      else
   5264  2496				  -	      ldx	#48
   5265  2496					      endif
   5266  2496				   rightloop
   5267  2496		       bd ec 10 	      lda	playfield-4,x
   5268  2499		       4a		      lsr
   5269  249a					      ifconst	superchip
   5270  249a		       bd ed 10 	      lda	playfield-3,x
   5271  249d		       2a		      rol
   5272  249e		       9d 6d 10 	      sta	playfield-131,x
   5273  24a1		       bd ee 10 	      lda	playfield-2,x
   5274  24a4		       6a		      ror
   5275  24a5		       9d 6e 10 	      sta	playfield-130,x
   5276  24a8		       bd ef 10 	      lda	playfield-1,x
   5277  24ab		       2a		      rol
   5278  24ac		       9d 6f 10 	      sta	playfield-129,x
   5279  24af		       bd ec 10 	      lda	playfield-4,x
   5280  24b2		       6a		      ror
   5281  24b3		       9d 6c 10 	      sta	playfield-132,x
   5282  24b6				  -	      else
   5283  24b6				  -	      rol	playfield-3,x
   5284  24b6				  -	      ror	playfield-2,x
   5285  24b6				  -	      rol	playfield-1,x
   5286  24b6				  -	      ror	playfield-4,x
   5287  24b6					      endif
   5288  24b6		       8a		      txa
   5289  24b7		       cb 04		      sbx	#4
   5290  24b9		       d0 db		      bne	rightloop
      0  24bb					      RETURN
      1  24bb				  -	      ifnconst	bankswitch
      2  24bb				  -	      rts
      3  24bb					      else
      4  24bb		       4c da ff 	      jmp	BS_return
      5  24be					      endif
   5292  24be
   5293  24be				   notright
   5294  24be		       4a		      lsr
   5295  24bf		       90 5b		      bcc	notup
   5296  24c1							;up
   5297  24c1		       4a		      lsr
   5298  24c2		       90 02		      bcc	onedecup
   5299  24c4		       c6 ef		      dec	playfieldpos
   5300  24c6				   onedecup
   5301  24c6		       c6 ef		      dec	playfieldpos
   5302  24c8		       f0 02		      beq	shiftdown
   5303  24ca		       10 4d		      bpl	noshiftdown2
   5304  24cc				   shiftdown
   5305  24cc				  -	      ifconst	pfrowheight
   5306  24cc				  -	      lda	#pfrowheight
   5307  24cc					      else
   5308  24cc				  -	      ifnconst	pfres
   5309  24cc				  -	      lda	#8
   5310  24cc					      else
   5311  24cc		       a9 18		      lda	#(96/pfres)	; try to come close to the real size
   5312  24ce					      endif
   5313  24ce					      endif
   5314  24ce
   5315  24ce		       85 ef		      sta	playfieldpos
   5316  24d0		       ad f3 10 	      lda	playfield+3
   5317  24d3		       85 9f		      sta	temp4
   5318  24d5		       ad f2 10 	      lda	playfield+2
   5319  24d8		       85 9e		      sta	temp3
   5320  24da		       ad f1 10 	      lda	playfield+1
   5321  24dd		       85 9d		      sta	temp2
   5322  24df		       ad f0 10 	      lda	playfield
   5323  24e2		       85 9c		      sta	temp1
   5324  24e4		       a2 00		      ldx	#0
   5325  24e6				   up2
   5326  24e6		       bd f4 10 	      lda	playfield+4,x
   5327  24e9					      ifconst	superchip
   5328  24e9		       9d 70 10 	      sta	playfield-128,x
   5329  24ec		       bd f5 10 	      lda	playfield+5,x
   5330  24ef		       9d 71 10 	      sta	playfield-127,x
   5331  24f2		       bd f6 10 	      lda	playfield+6,x
   5332  24f5		       9d 72 10 	      sta	playfield-126,x
   5333  24f8		       bd f7 10 	      lda	playfield+7,x
   5334  24fb		       9d 73 10 	      sta	playfield-125,x
   5335  24fe				  -	      else
   5336  24fe				  -	      sta	playfield,x
   5337  24fe				  -	      lda	playfield+5,x
   5338  24fe				  -	      sta	playfield+1,x
   5339  24fe				  -	      lda	playfield+6,x
   5340  24fe				  -	      sta	playfield+2,x
   5341  24fe				  -	      lda	playfield+7,x
   5342  24fe				  -	      sta	playfield+3,x
   5343  24fe					      endif
   5344  24fe		       8a		      txa
   5345  24ff		       cb fc		      sbx	#252
   5346  2501					      ifconst	pfres
   5347  2501		       e0 0c		      cpx	#(pfres-1)*4
   5348  2503				  -	      else
   5349  2503				  -	      cpx	#44
   5350  2503					      endif
   5351  2503		       d0 e1		      bne	up2
   5352  2505
   5353  2505		       a5 9f		      lda	temp4
   5354  2507
   5355  2507					      ifconst	superchip
   5356  2507					      ifconst	pfres
   5357  2507		       8d 7f 10 	      sta	playfield+pfres*4-129
   5358  250a		       a5 9e		      lda	temp3
   5359  250c		       8d 7e 10 	      sta	playfield+pfres*4-130
   5360  250f		       a5 9d		      lda	temp2
   5361  2511		       8d 7d 10 	      sta	playfield+pfres*4-131
   5362  2514		       a5 9c		      lda	temp1
   5363  2516		       8d 7c 10 	      sta	playfield+pfres*4-132
   5364  2519				  -	      else
   5365  2519				  -	      sta	playfield+47-128
   5366  2519				  -	      lda	temp3
   5367  2519				  -	      sta	playfield+46-128
   5368  2519				  -	      lda	temp2
   5369  2519				  -	      sta	playfield+45-128
   5370  2519				  -	      lda	temp1
   5371  2519				  -	      sta	playfield+44-128
   5372  2519					      endif
   5373  2519				  -	      else
   5374  2519				  -	      ifconst	pfres
   5375  2519				  -	      sta	playfield+pfres*4-1
   5376  2519				  -	      lda	temp3
   5377  2519				  -	      sta	playfield+pfres*4-2
   5378  2519				  -	      lda	temp2
   5379  2519				  -	      sta	playfield+pfres*4-3
   5380  2519				  -	      lda	temp1
   5381  2519				  -	      sta	playfield+pfres*4-4
   5382  2519				  -	      else
   5383  2519				  -	      sta	playfield+47
   5384  2519				  -	      lda	temp3
   5385  2519				  -	      sta	playfield+46
   5386  2519				  -	      lda	temp2
   5387  2519				  -	      sta	playfield+45
   5388  2519				  -	      lda	temp1
   5389  2519				  -	      sta	playfield+44
   5390  2519				  -	      endif
   5391  2519					      endif
   5392  2519				   noshiftdown2
      0  2519					      RETURN
      1  2519				  -	      ifnconst	bankswitch
      2  2519				  -	      rts
      3  2519					      else
      4  2519		       4c da ff 	      jmp	BS_return
      5  251c					      endif
   5394  251c
   5395  251c
   5396  251c				   notup
   5397  251c							;down
   5398  251c		       4a		      lsr
   5399  251d		       b0 02		      bcs	oneincup
   5400  251f		       e6 ef		      inc	playfieldpos
   5401  2521				   oneincup
   5402  2521		       e6 ef		      inc	playfieldpos
   5403  2523		       a5 ef		      lda	playfieldpos
   5404  2525
   5405  2525				  -	      ifconst	pfrowheight
   5406  2525				  -	      cmp	#pfrowheight+1
   5407  2525					      else
   5408  2525				  -	      ifnconst	pfres
   5409  2525				  -	      cmp	#9
   5410  2525					      else
   5411  2525		       c9 19		      cmp	#(96/pfres)+1	; try to come close to the real size
   5412  2527					      endif
   5413  2527					      endif
   5414  2527
   5415  2527		       90 4b		      bcc	noshiftdown
   5416  2529		       a9 01		      lda	#1
   5417  252b		       85 ef		      sta	playfieldpos
   5418  252d
   5419  252d					      ifconst	pfres
   5420  252d		       ad ff 10 	      lda	playfield+pfres*4-1
   5421  2530		       85 9f		      sta	temp4
   5422  2532		       ad fe 10 	      lda	playfield+pfres*4-2
   5423  2535		       85 9e		      sta	temp3
   5424  2537		       ad fd 10 	      lda	playfield+pfres*4-3
   5425  253a		       85 9d		      sta	temp2
   5426  253c		       ad fc 10 	      lda	playfield+pfres*4-4
   5427  253f				  -	      else
   5428  253f				  -	      lda	playfield+47
   5429  253f				  -	      sta	temp4
   5430  253f				  -	      lda	playfield+46
   5431  253f				  -	      sta	temp3
   5432  253f				  -	      lda	playfield+45
   5433  253f				  -	      sta	temp2
   5434  253f				  -	      lda	playfield+44
   5435  253f					      endif
   5436  253f
   5437  253f		       85 9c		      sta	temp1
   5438  2541
   5439  2541					      ifconst	pfres
   5440  2541		       a2 0c		      ldx	#(pfres-1)*4
   5441  2543				  -	      else
   5442  2543				  -	      ldx	#44
   5443  2543					      endif
   5444  2543				   down2
   5445  2543		       bd ef 10 	      lda	playfield-1,x
   5446  2546					      ifconst	superchip
   5447  2546		       9d 73 10 	      sta	playfield-125,x
   5448  2549		       bd ee 10 	      lda	playfield-2,x
   5449  254c		       9d 72 10 	      sta	playfield-126,x
   5450  254f		       bd ed 10 	      lda	playfield-3,x
   5451  2552		       9d 71 10 	      sta	playfield-127,x
   5452  2555		       bd ec 10 	      lda	playfield-4,x
   5453  2558		       9d 70 10 	      sta	playfield-128,x
   5454  255b				  -	      else
   5455  255b				  -	      sta	playfield+3,x
   5456  255b				  -	      lda	playfield-2,x
   5457  255b				  -	      sta	playfield+2,x
   5458  255b				  -	      lda	playfield-3,x
   5459  255b				  -	      sta	playfield+1,x
   5460  255b				  -	      lda	playfield-4,x
   5461  255b				  -	      sta	playfield,x
   5462  255b					      endif
   5463  255b		       8a		      txa
   5464  255c		       cb 04		      sbx	#4
   5465  255e		       d0 e3		      bne	down2
   5466  2560
   5467  2560		       a5 9f		      lda	temp4
   5468  2562					      ifconst	superchip
   5469  2562		       8d 73 10 	      sta	playfield-125
   5470  2565		       a5 9e		      lda	temp3
   5471  2567		       8d 72 10 	      sta	playfield-126
   5472  256a		       a5 9d		      lda	temp2
   5473  256c		       8d 71 10 	      sta	playfield-127
   5474  256f		       a5 9c		      lda	temp1
   5475  2571		       8d 70 10 	      sta	playfield-128
   5476  2574				  -	      else
   5477  2574				  -	      sta	playfield+3
   5478  2574				  -	      lda	temp3
   5479  2574				  -	      sta	playfield+2
   5480  2574				  -	      lda	temp2
   5481  2574				  -	      sta	playfield+1
   5482  2574				  -	      lda	temp1
   5483  2574				  -	      sta	playfield
   5484  2574					      endif
   5485  2574				   noshiftdown
      0  2574					      RETURN
      1  2574				  -	      ifnconst	bankswitch
      2  2574				  -	      rts
      3  2574					      else
      4  2574		       4c da ff 	      jmp	BS_return
      5  2577					      endif
   5487  2577							; Provided under the CC0 license. See the included LICENSE.txt for details.
   5488  2577
   5489  2577							;standard routines needed for pretty much all games
   5490  2577							; just the random number generator is left - maybe we should remove this asm file altogether?
   5491  2577							; repositioning code and score pointer setup moved to overscan
   5492  2577							; read switches, joysticks now compiler generated (more efficient)
   5493  2577
   5494  2577				   randomize
   5495  2577		       a5 a2		      lda	rand
   5496  2579		       4a		      lsr
   5497  257a				  -	      ifconst	rand16
   5498  257a				  -	      rol	rand16
   5499  257a					      endif
   5500  257a		       90 02		      bcc	noeor
   5501  257c		       49 b4		      eor	#$B4
   5502  257e				   noeor
   5503  257e		       85 a2		      sta	rand
   5504  2580				  -	      ifconst	rand16
   5505  2580				  -	      eor	rand16
   5506  2580					      endif
      0  2580					      RETURN
      1  2580				  -	      ifnconst	bankswitch
      2  2580				  -	      rts
      3  2580					      else
      4  2580		       4c da ff 	      jmp	BS_return
      5  2583					      endif
   5508  2583							; Provided under the CC0 license. See the included LICENSE.txt for details.
   5509  2583
   5510  2583				   drawscreen
   5511  2583				  -	      ifconst	debugscore
   5512  2583				  -	      ldx	#14
   5513  2583				  -	      lda	INTIM	; display # cycles left in the score
   5514  2583				  -
   5515  2583				  -	      ifconst	mincycles
   5516  2583				  -	      lda	mincycles
   5517  2583				  -	      cmp	INTIM
   5518  2583				  -	      lda	mincycles
   5519  2583				  -	      bcc	nochange
   5520  2583				  -	      lda	INTIM
   5521  2583				  -	      sta	mincycles
   5522  2583				  -nochange
   5523  2583				  -	      endif
   5524  2583				  -
   5525  2583				  -			; cmp #$2B
   5526  2583				  -			; bcs no_cycles_left
   5527  2583				  -	      bmi	cycles_left
   5528  2583				  -	      ldx	#64
   5529  2583				  -	      eor	#$ff	;make negative
   5530  2583				  -cycles_left
   5531  2583				  -	      stx	scorecolor
   5532  2583				  -	      and	#$7f	; clear sign bit
   5533  2583				  -	      tax
   5534  2583				  -	      lda	scorebcd,x
   5535  2583				  -	      sta	score+2
   5536  2583				  -	      lda	scorebcd1,x
   5537  2583				  -	      sta	score+1
   5538  2583				  -	      jmp	done_debugscore
   5539  2583				  -scorebcd
   5540  2583				  -	      .byte	$00, $64, $28, $92, $56, $20, $84, $48, $12, $76, $40
   5541  2583				  -	      .byte	$04, $68, $32, $96, $60, $24, $88, $52, $16, $80, $44
   5542  2583				  -	      .byte	$08, $72, $36, $00, $64, $28, $92, $56, $20, $84, $48
   5543  2583				  -	      .byte	$12, $76, $40, $04, $68, $32, $96, $60, $24, $88
   5544  2583				  -scorebcd1
   5545  2583				  -	      .byte	0, 0, 1, 1, 2, 3, 3, 4, 5, 5, 6
   5546  2583				  -	      .byte	7, 7, 8, 8, 9, $10, $10, $11, $12, $12, $13
   5547  2583				  -	      .byte	$14, $14, $15, $16, $16, $17, $17, $18, $19, $19, $20
   5548  2583				  -	      .byte	$21, $21, $22, $23, $23, $24, $24, $25, $26, $26
   5549  2583				  -done_debugscore
   5550  2583					      endif
   5551  2583
   5552  2583				  -	      ifconst	debugcycles
   5553  2583				  -	      lda	INTIM	; if we go over, it mucks up the background color
   5554  2583				  -			; cmp #$2B
   5555  2583				  -			; BCC overscan
   5556  2583				  -	      bmi	overscan
   5557  2583				  -	      sta	COLUBK
   5558  2583				  -	      bcs	doneoverscan
   5559  2583					      endif
   5560  2583
   5561  2583				   overscan
   5562  2583				  -	      ifconst	interlaced
   5563  2583				  -	      PHP
   5564  2583				  -	      PLA
   5565  2583				  -	      EOR	#4	; flip interrupt bit
   5566  2583				  -	      PHA
   5567  2583				  -	      PLP
   5568  2583				  -	      AND	#4	; isolate the interrupt bit
   5569  2583				  -	      TAX		; save it for later
   5570  2583					      endif
   5571  2583
   5572  2583				   overscanloop
   5573  2583		       ad 84 02 	      lda	INTIM	;wait for sync
   5574  2586		       30 fb		      bmi	overscanloop
   5575  2588				   doneoverscan
   5576  2588
   5577  2588							;do VSYNC
   5578  2588
   5579  2588				  -	      ifconst	interlaced
   5580  2588				  -	      CPX	#4
   5581  2588				  -	      BNE	oddframevsync
   5582  2588					      endif
   5583  2588
   5584  2588		       a9 02		      lda	#2
   5585  258a		       85 02		      sta	WSYNC
   5586  258c		       85 00		      sta	VSYNC
   5587  258e		       85 02		      STA	WSYNC
   5588  2590		       85 02		      STA	WSYNC
   5589  2592		       4a		      lsr
   5590  2593		       85 02		      STA	WSYNC
   5591  2595		       85 00		      STA	VSYNC
   5592  2597		       85 01		      sta	VBLANK
   5593  2599					      ifnconst	overscan_time
   5594  2599		       a9 a5		      lda	#37+128
   5595  259b				  -	      else
   5596  259b				  -	      lda	#overscan_time+128
   5597  259b					      endif
   5598  259b		       8d 96 02 	      sta	TIM64T
   5599  259e
   5600  259e				  -	      ifconst	interlaced
   5601  259e				  -	      jmp	postsync
   5602  259e				  -
   5603  259e				  -oddframevsync
   5604  259e				  -	      sta	WSYNC
   5605  259e				  -
   5606  259e				  -	      LDA	($80,X)	; 11 waste
   5607  259e				  -	      LDA	($80,X)	; 11 waste
   5608  259e				  -	      LDA	($80,X)	; 11 waste
   5609  259e				  -
   5610  259e				  -	      lda	#2
   5611  259e				  -	      sta	VSYNC
   5612  259e				  -	      sta	WSYNC
   5613  259e				  -	      sta	WSYNC
   5614  259e				  -	      sta	WSYNC
   5615  259e				  -
   5616  259e				  -	      LDA	($80,X)	; 11 waste
   5617  259e				  -	      LDA	($80,X)	; 11 waste
   5618  259e				  -	      LDA	($80,X)	; 11 waste
   5619  259e				  -
   5620  259e				  -	      lda	#0
   5621  259e				  -	      sta	VSYNC
   5622  259e				  -	      sta	VBLANK
   5623  259e				  -	      ifnconst	overscan_time
   5624  259e				  -	      lda	#37+128
   5625  259e				  -	      else
   5626  259e				  -	      lda	#overscan_time+128
   5627  259e				  -	      endif
   5628  259e				  -	      sta	TIM64T
   5629  259e				  -
   5630  259e				  -postsync
   5631  259e					      endif
   5632  259e
   5633  259e				  -	      ifconst	legacy
   5634  259e				  -	      if	legacy < 100
   5635  259e				  -	      ldx	#4
   5636  259e				  -adjustloop
   5637  259e				  -	      lda	player0x,x
   5638  259e				  -	      sec
   5639  259e				  -	      sbc	#14	;?
   5640  259e				  -	      sta	player0x,x
   5641  259e				  -	      dex
   5642  259e				  -	      bpl	adjustloop
   5643  259e				  -	      endif
   5644  259e					      endif
   5645  259e				  -	      if	((<*)>$e9)&&((<*)<$fa)
   5646  259e				  -	      repeat	($fa-(<*))
   5647  259e				  -	      nop
   5648  259e				  -	      repend
   5649  259e					      endif
   5650  259e		       85 02		      sta	WSYNC
   5651  25a0		       a2 04		      ldx	#4
      0  25a2					      SLEEP	3
      1  25a2				   .CYCLES    SET	3
      2  25a2
      3  25a2				  -	      IF	.CYCLES < 2
      4  25a2				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  25a2				  -	      ERR
      6  25a2					      ENDIF
      7  25a2
      8  25a2					      IF	.CYCLES & 1
      9  25a2					      IFNCONST	NO_ILLEGAL_OPCODES
     10  25a2		       04 00		      nop	0
     11  25a4				  -	      ELSE
     12  25a4				  -	      bit	VSYNC
     13  25a4					      ENDIF
     14  25a4				   .CYCLES    SET	.CYCLES - 3
     15  25a4					      ENDIF
     16  25a4
     17  25a4				  -	      REPEAT	.CYCLES / 2
     18  25a4				  -	      nop
     19  25a4					      REPEND
   5653  25a4				   HorPosLoop		; 5
   5654  25a4		       b5 80		      lda	player0x,X	;+4 9
   5655  25a6		       38		      sec		;+2 11
   5656  25a7				   DivideLoop
   5657  25a7		       e9 0f		      sbc	#15
   5658  25a9		       b0 fc		      bcs	DivideLoop	;+4 15
   5659  25ab		       95 9c		      sta	temp1,X	;+4 19
   5660  25ad		       95 10		      sta	RESP0,X	;+4 23
   5661  25af		       85 02		      sta	WSYNC
   5662  25b1		       ca		      dex
   5663  25b2		       10 f0		      bpl	HorPosLoop	;+5 5
   5664  25b4							; 4
   5665  25b4
   5666  25b4		       a2 04		      ldx	#4
   5667  25b6		       b4 9c		      ldy	temp1,X
   5668  25b8		       b9 14 f5 	      lda	repostable-256,Y
   5669  25bb		       95 20		      sta	HMP0,X	;+14 18
   5670  25bd
   5671  25bd		       ca		      dex
   5672  25be		       b4 9c		      ldy	temp1,X
   5673  25c0		       b9 14 f5 	      lda	repostable-256,Y
   5674  25c3		       95 20		      sta	HMP0,X	;+14 32
   5675  25c5
   5676  25c5		       ca		      dex
   5677  25c6		       b4 9c		      ldy	temp1,X
   5678  25c8		       b9 14 f5 	      lda	repostable-256,Y
   5679  25cb		       95 20		      sta	HMP0,X	;+14 46
   5680  25cd
   5681  25cd		       ca		      dex
   5682  25ce		       b4 9c		      ldy	temp1,X
   5683  25d0		       b9 14 f5 	      lda	repostable-256,Y
   5684  25d3		       95 20		      sta	HMP0,X	;+14 60
   5685  25d5
   5686  25d5		       ca		      dex
   5687  25d6		       b4 9c		      ldy	temp1,X
   5688  25d8		       b9 14 f5 	      lda	repostable-256,Y
   5689  25db		       95 20		      sta	HMP0,X	;+14 74
   5690  25dd
   5691  25dd		       85 02		      sta	WSYNC
   5692  25df
   5693  25df		       85 2a		      sta	HMOVE	;+3 3
   5694  25e1
   5695  25e1
   5696  25e1				  -	      ifconst	legacy
   5697  25e1				  -	      if	legacy < 100
   5698  25e1				  -	      ldx	#4
   5699  25e1				  -adjustloop2
   5700  25e1				  -	      lda	player0x,x
   5701  25e1				  -	      clc
   5702  25e1				  -	      adc	#14	;?
   5703  25e1				  -	      sta	player0x,x
   5704  25e1				  -	      dex
   5705  25e1				  -	      bpl	adjustloop2
   5706  25e1				  -	      endif
   5707  25e1					      endif
   5708  25e1
   5709  25e1
   5710  25e1
   5711  25e1
   5712  25e1							;set score pointers
   5713  25e1		       a7 95		      lax	score+2
   5714  25e3		       20 14 f6 	      jsr	scorepointerset
   5715  25e6		       84 9b		      sty	scorepointers+5
   5716  25e8		       86 98		      stx	scorepointers+2
   5717  25ea		       a7 94		      lax	score+1
   5718  25ec		       20 14 f6 	      jsr	scorepointerset
   5719  25ef		       84 9a		      sty	scorepointers+4
   5720  25f1		       86 97		      stx	scorepointers+1
   5721  25f3		       a7 93		      lax	score
   5722  25f5		       20 14 f6 	      jsr	scorepointerset
   5723  25f8		       84 99		      sty	scorepointers+3
   5724  25fa		       86 96		      stx	scorepointers
   5725  25fc
   5726  25fc				   vblk
   5727  25fc							; run possible vblank bB code
   5728  25fc				  -	      ifconst	vblank_bB_code
   5729  25fc				  -	      jsr	vblank_bB_code
   5730  25fc					      endif
   5731  25fc				   vblk2
   5732  25fc		       ad 84 02 	      LDA	INTIM
   5733  25ff		       30 fb		      bmi	vblk2
   5734  2601		       4c 00 f1 	      jmp	kernel
   5735  2604
   5736  2604
   5737  2604		       80 70 60 50*	      .byte.b	$80,$70,$60,$50,$40,$30,$20,$10,$00
   5738  260d		       f0 e0 d0 c0*	      .byte.b	$F0,$E0,$D0,$C0,$B0,$A0,$90
   5739  2614				   repostable
   5740  2614
   5741  2614				   scorepointerset
   5742  2614		       29 0f		      and	#$0F
   5743  2616		       0a		      asl
   5744  2617		       0a		      asl
   5745  2618		       0a		      asl
   5746  2619		       69 71		      adc	#<scoretable
   5747  261b		       a8		      tay
   5748  261c		       8a		      txa
   5749  261d							; and #$F0
   5750  261d							; lsr
   5751  261d		       4b f0		      asr	#$F0
   5752  261f		       69 71		      adc	#<scoretable
   5753  2621		       aa		      tax
   5754  2622		       60		      rts
   5755  2623							;bB.asm
   5756  2623							; bB.asm file is split here
   5757  2623				   .
   5758  2623							; 
   5759  2623
   5760  2623				   .L0462		;  asm
   5761  2623
   5762  2623				   XXminikernel
   5763  2623
   5764  2623		       85 02		      sta	WSYNC
   5765  2625
   5766  2625		       a5 08		      lda	scback
   5767  2627
   5768  2627		       85 09		      sta	COLUBK
   5769  2629
   5770  2629		       60		      rts
   5771  262a
   5772  262a				  -	      if	(<*) > (<(*+7))
   5773  262a				  -	      repeat	($100-<*)
   5774  262a				  -	      .byte	0
   5775  262a				  -	      repend
   5776  262a					      endif
   5777  262a				   playercolorL0236_1
   5778  262a		       2e		      .byte.b	_1E
   5779  262b		       d2		      .byte.b	_82
   5780  262c		       d4		      .byte.b	_84
   5781  262d		       66		      .byte.b	_46
   5782  262e		       64		      .byte.b	_44
   5783  262f		       62		      .byte.b	_42
   5784  2630		       22		      .byte.b	_12
   5785  2631		       08		      .byte.b	_08
   5786  2632				  -	      if	(<*) > (<(*+7))
   5787  2632				  -	      repeat	($100-<*)
   5788  2632				  -	      .byte	0
   5789  2632				  -	      repend
   5790  2632					      endif
   5791  2632				   player2then_1
   5792  2632		       1b		      .byte.b	%00011011
   5793  2633		       0e		      .byte.b	%00001110
   5794  2634		       1f		      .byte.b	%00011111
   5795  2635		       bd		      .byte.b	%10111101
   5796  2636		       f9		      .byte.b	%11111001
   5797  2637		       9e		      .byte.b	%10011110
   5798  2638		       08		      .byte.b	%00001000
   5799  2639		       7c		      .byte.b	%01111100
   5800  263a				  -	      if	(<*) > (<(*+7))
   5801  263a				  -	      repeat	($100-<*)
   5802  263a				  -	      .byte	0
   5803  263a				  -	      repend
   5804  263a					      endif
   5805  263a				   player3then_1
   5806  263a		       1b		      .byte.b	%00011011
   5807  263b		       0e		      .byte.b	%00001110
   5808  263c		       1f		      .byte.b	%00011111
   5809  263d		       bd		      .byte.b	%10111101
   5810  263e		       f9		      .byte.b	%11111001
   5811  263f		       9e		      .byte.b	%10011110
   5812  2640		       08		      .byte.b	%00001000
   5813  2641		       1f		      .byte.b	%00011111
   5814  2642				  -	      if	(<*) > (<(*+6))
   5815  2642				  -	      repeat	($100-<*)
   5816  2642				  -	      .byte	0
   5817  2642				  -	      repend
   5818  2642					      endif
   5819  2642				   player4then_0
   5820  2642		       55		      .byte.b	%01010101
   5821  2643		       aa		      .byte.b	%10101010
   5822  2644		       ff		      .byte.b	%11111111
   5823  2645		       3c		      .byte.b	%00111100
   5824  2646		       18		      .byte.b	%00011000
   5825  2647		       08		      .byte.b	%00001000
   5826  2648		       04		      .byte.b	%00000100
   5827  2649				  -	      if	(<*) > (<(*+6))
   5828  2649				  -	      repeat	($100-<*)
   5829  2649				  -	      .byte	0
   5830  2649				  -	      repend
   5831  2649					      endif
   5832  2649				   player5then_0
   5833  2649		       aa		      .byte.b	%10101010
   5834  264a		       55		      .byte.b	%01010101
   5835  264b		       ff		      .byte.b	%11111111
   5836  264c		       3c		      .byte.b	%00111100
   5837  264d		       18		      .byte.b	%00011000
   5838  264e		       08		      .byte.b	%00001000
   5839  264f		       04		      .byte.b	%00000100
   5840  2650				  -	      if	(<*) > (<(*+11))
   5841  2650				  -	      repeat	($100-<*)
   5842  2650				  -	      .byte	0
   5843  2650				  -	      repend
   5844  2650					      endif
   5845  2650				   playerL0256_0
   5846  2650		       a0		      .byte.b	%10100000
   5847  2651		       40		      .byte.b	%01000000
   5848  2652		       e0		      .byte.b	%11100000
   5849  2653		       a0		      .byte.b	%10100000
   5850  2654		       40		      .byte.b	%01000000
   5851  2655		       00		      .byte.b	%00000000
   5852  2656		       00		      .byte.b	%00000000
   5853  2657		       05		      .byte.b	%00000101
   5854  2658		       02		      .byte.b	%00000010
   5855  2659		       07		      .byte.b	%00000111
   5856  265a		       05		      .byte.b	%00000101
   5857  265b		       02		      .byte.b	%00000010
   5858  265c				  -	      if	(<*) > (<(*+25))
   5859  265c				  -	      repeat	($100-<*)
   5860  265c				  -	      .byte	0
   5861  265c				  -	      repend
   5862  265c					      endif
   5863  265c				   playerL0258_0
   5864  265c		       38		      .byte.b	%00111000
   5865  265d		       20		      .byte.b	%00100000
   5866  265e		       20		      .byte.b	%00100000
   5867  265f		       20		      .byte.b	%00100000
   5868  2660		       20		      .byte.b	%00100000
   5869  2661		       00		      .byte.b	%00000000
   5870  2662		       38		      .byte.b	%00111000
   5871  2663		       20		      .byte.b	%00100000
   5872  2664		       30		      .byte.b	%00110000
   5873  2665		       20		      .byte.b	%00100000
   5874  2666		       38		      .byte.b	%00111000
   5875  2667		       00		      .byte.b	%00000000
   5876  2668		       10		      .byte.b	%00010000
   5877  2669		       28		      .byte.b	%00101000
   5878  266a		       28		      .byte.b	%00101000
   5879  266b		       28		      .byte.b	%00101000
   5880  266c		       28		      .byte.b	%00101000
   5881  266d		       00		      .byte.b	%00000000
   5882  266e		       20		      .byte.b	%00100000
   5883  266f		       20		      .byte.b	%00100000
   5884  2670		       30		      .byte.b	%00110000
   5885  2671		       20		      .byte.b	%00100000
   5886  2672		       ba		      .byte.b	%10111010
   5887  2673		       82		      .byte.b	%10000010
   5888  2674		       fe		      .byte.b	%11111110
   5889  2675		       00		      .byte.b
   5890  2676				  -	      if	(<*) > (<(*+3))
   5891  2676				  -	      repeat	($100-<*)
   5892  2676				  -	      .byte	0
   5893  2676				  -	      repend
   5894  2676					      endif
   5895  2676				   player6then_0
   5896  2676		       a6		      .byte.b	%10100110
   5897  2677		       42		      .byte.b	%01000010
   5898  2678		       63		      .byte.b	%01100011
   5899  2679		       42		      .byte.b	%01000010
   5900  267a				  -	      if	(<*) > (<(*+3))
   5901  267a				  -	      repeat	($100-<*)
   5902  267a				  -	      .byte	0
   5903  267a				  -	      repend
   5904  267a					      endif
   5905  267a				   player7then_0
   5906  267a		       c5		      .byte.b	%11000101
   5907  267b		       42		      .byte.b	%01000010
   5908  267c		       63		      .byte.b	%01100011
   5909  267d		       42		      .byte.b	%01000010
   5910  267e					      if	ECHOFIRST
      2291 bytes of ROM space left in bank 2
   5911  267e					      echo	"    ",[(scoretable - *)]d , "bytes of ROM space left in bank 2")
   5912  267e					      endif
   5913  267e		       00 01	   ECHOFIRST  =	1
   5914  267e
   5915  267e
   5916  267e							; Provided under the CC0 license. See the included LICENSE.txt for details.
   5917  267e
   5918  267e							; feel free to modify the score graphics - just keep each digit 8 high
   5919  267e							; and keep the conditional compilation stuff intact
   5920  267e				  -	      ifconst	ROM2k
   5921  267e				  -	      ifconst	PlusROM_functions
   5922  267e				  -	      ORG	$F7AC-16
   5923  267e				  -	      else
   5924  267e				  -	      ORG	$F7AC-8
   5925  267e				  -	      endif
   5926  267e					      else
   5927  267e					      ifconst	bankswitch
   5928  267e					      if	bankswitch == 8
   5929  2f71					      ORG	$2F94-bscode_length
   5930  2f71					      RORG	$FF94-bscode_length
   5931  2f71					      endif
   5932  2f71				  -	      if	bankswitch == 16
   5933  2f71				  -	      ORG	$4F94-bscode_length
   5934  2f71				  -	      RORG	$FF94-bscode_length
   5935  2f71					      endif
   5936  2f71				  -	      if	bankswitch == 32
   5937  2f71				  -	      ORG	$8F94-bscode_length
   5938  2f71				  -	      RORG	$FF94-bscode_length
   5939  2f71					      endif
   5940  2f71				  -	      if	bankswitch == 64
   5941  2f71				  -	      ORG	$10F80-bscode_length
   5942  2f71				  -	      RORG	$1FF80-bscode_length
   5943  2f71					      endif
   5944  2f71				  -	      else
   5945  2f71				  -	      ifconst	PlusROM_functions
   5946  2f71				  -	      ORG	$FF98
   5947  2f71				  -	      else
   5948  2f71				  -	      ORG	$FF9C
   5949  2f71				  -	      endif
   5950  2f71					      endif
   5951  2f71					      endif
   5952  2f71
   5953  2f71							; font equates
   5954  2f71		       00 01	   .21stcentury =	1
   5955  2f71		       00 02	   alarmclock =	2
   5956  2f71		       00 03	   handwritten =	3
   5957  2f71		       00 04	   interrupted =	4
   5958  2f71		       00 05	   retroputer =	5
   5959  2f71		       00 06	   whimsey    =	6
   5960  2f71		       00 07	   tiny       =	7
   5961  2f71		       00 08	   hex	      =	8
   5962  2f71
   5963  2f71				  -	      ifconst	font
   5964  2f71				  -	      if	font == hex
   5965  2f71				  -	      ORG	. - 48
   5966  2f71				  -	      endif
   5967  2f71					      endif
   5968  2f71
   5969  2f71				   scoretable
   5970  2f71
   5971  2f71				  -	      ifconst	font
   5972  2f71				  -	      if	font == .21stcentury
   5973  2f71				  -	      include	"score_graphics.asm.21stcentury"
   5974  2f71				  -	      endif
   5975  2f71				  -	      if	font == alarmclock
   5976  2f71				  -	      include	"score_graphics.asm.alarmclock"
   5977  2f71				  -	      endif
   5978  2f71				  -	      if	font == handwritten
   5979  2f71				  -	      include	"score_graphics.asm.handwritten"
   5980  2f71				  -	      endif
   5981  2f71				  -	      if	font == interrupted
   5982  2f71				  -	      include	"score_graphics.asm.interrupted"
   5983  2f71				  -	      endif
   5984  2f71				  -	      if	font == retroputer
   5985  2f71				  -	      include	"score_graphics.asm.retroputer"
   5986  2f71				  -	      endif
   5987  2f71				  -	      if	font == whimsey
   5988  2f71				  -	      include	"score_graphics.asm.whimsey"
   5989  2f71				  -	      endif
   5990  2f71				  -	      if	font == tiny
   5991  2f71				  -	      include	"score_graphics.asm.tiny"
   5992  2f71				  -	      endif
   5993  2f71				  -	      if	font == hex
   5994  2f71				  -	      include	"score_graphics.asm.hex"
   5995  2f71				  -	      endif
   5996  2f71					      else		; default font
   5997  2f71
   5998  2f71		       3c		      .byte.b	%00111100
   5999  2f72		       66		      .byte.b	%01100110
   6000  2f73		       66		      .byte.b	%01100110
   6001  2f74		       66		      .byte.b	%01100110
   6002  2f75		       66		      .byte.b	%01100110
   6003  2f76		       66		      .byte.b	%01100110
   6004  2f77		       66		      .byte.b	%01100110
   6005  2f78		       3c		      .byte.b	%00111100
   6006  2f79
   6007  2f79		       7e		      .byte.b	%01111110
   6008  2f7a		       18		      .byte.b	%00011000
   6009  2f7b		       18		      .byte.b	%00011000
   6010  2f7c		       18		      .byte.b	%00011000
   6011  2f7d		       18		      .byte.b	%00011000
   6012  2f7e		       38		      .byte.b	%00111000
   6013  2f7f		       18		      .byte.b	%00011000
   6014  2f80		       08		      .byte.b	%00001000
   6015  2f81
   6016  2f81		       7e		      .byte.b	%01111110
   6017  2f82		       60		      .byte.b	%01100000
   6018  2f83		       60		      .byte.b	%01100000
   6019  2f84		       3c		      .byte.b	%00111100
   6020  2f85		       06		      .byte.b	%00000110
   6021  2f86		       06		      .byte.b	%00000110
   6022  2f87		       46		      .byte.b	%01000110
   6023  2f88		       3c		      .byte.b	%00111100
   6024  2f89
   6025  2f89		       3c		      .byte.b	%00111100
   6026  2f8a		       46		      .byte.b	%01000110
   6027  2f8b		       06		      .byte.b	%00000110
   6028  2f8c		       06		      .byte.b	%00000110
   6029  2f8d		       1c		      .byte.b	%00011100
   6030  2f8e		       06		      .byte.b	%00000110
   6031  2f8f		       46		      .byte.b	%01000110
   6032  2f90		       3c		      .byte.b	%00111100
   6033  2f91
   6034  2f91		       0c		      .byte.b	%00001100
   6035  2f92		       0c		      .byte.b	%00001100
   6036  2f93		       7e		      .byte.b	%01111110
   6037  2f94		       4c		      .byte.b	%01001100
   6038  2f95		       4c		      .byte.b	%01001100
   6039  2f96		       2c		      .byte.b	%00101100
   6040  2f97		       1c		      .byte.b	%00011100
   6041  2f98		       0c		      .byte.b	%00001100
   6042  2f99
   6043  2f99		       3c		      .byte.b	%00111100
   6044  2f9a		       46		      .byte.b	%01000110
   6045  2f9b		       06		      .byte.b	%00000110
   6046  2f9c		       06		      .byte.b	%00000110
   6047  2f9d		       3c		      .byte.b	%00111100
   6048  2f9e		       60		      .byte.b	%01100000
   6049  2f9f		       60		      .byte.b	%01100000
   6050  2fa0		       7e		      .byte.b	%01111110
   6051  2fa1
   6052  2fa1		       3c		      .byte.b	%00111100
   6053  2fa2		       66		      .byte.b	%01100110
   6054  2fa3		       66		      .byte.b	%01100110
   6055  2fa4		       66		      .byte.b	%01100110
   6056  2fa5		       7c		      .byte.b	%01111100
   6057  2fa6		       60		      .byte.b	%01100000
   6058  2fa7		       62		      .byte.b	%01100010
   6059  2fa8		       3c		      .byte.b	%00111100
   6060  2fa9
   6061  2fa9		       30		      .byte.b	%00110000
   6062  2faa		       30		      .byte.b	%00110000
   6063  2fab		       30		      .byte.b	%00110000
   6064  2fac		       18		      .byte.b	%00011000
   6065  2fad		       0c		      .byte.b	%00001100
   6066  2fae		       06		      .byte.b	%00000110
   6067  2faf		       42		      .byte.b	%01000010
   6068  2fb0		       3e		      .byte.b	%00111110
   6069  2fb1
   6070  2fb1		       3c		      .byte.b	%00111100
   6071  2fb2		       66		      .byte.b	%01100110
   6072  2fb3		       66		      .byte.b	%01100110
   6073  2fb4		       66		      .byte.b	%01100110
   6074  2fb5		       3c		      .byte.b	%00111100
   6075  2fb6		       66		      .byte.b	%01100110
   6076  2fb7		       66		      .byte.b	%01100110
   6077  2fb8		       3c		      .byte.b	%00111100
   6078  2fb9
   6079  2fb9		       3c		      .byte.b	%00111100
   6080  2fba		       46		      .byte.b	%01000110
   6081  2fbb		       06		      .byte.b	%00000110
   6082  2fbc		       3e		      .byte.b	%00111110
   6083  2fbd		       66		      .byte.b	%01100110
   6084  2fbe		       66		      .byte.b	%01100110
   6085  2fbf		       66		      .byte.b	%01100110
   6086  2fc0		       3c		      .byte.b	%00111100
   6087  2fc1
   6088  2fc1					      ifnconst	DPC_kernel_options
   6089  2fc1
   6090  2fc1		       00		      .byte.b	%00000000
   6091  2fc2		       00		      .byte.b	%00000000
   6092  2fc3		       00		      .byte.b	%00000000
   6093  2fc4		       00		      .byte.b	%00000000
   6094  2fc5		       00		      .byte.b	%00000000
   6095  2fc6		       00		      .byte.b	%00000000
   6096  2fc7		       00		      .byte.b	%00000000
   6097  2fc8		       00		      .byte.b	%00000000
   6098  2fc9
   6099  2fc9					      endif
   6100  2fc9
   6101  2fc9					      endif
   6102  2fc9
   6103  2fc9				  -	      ifconst	ROM2k
   6104  2fc9				  -	      ifconst	PlusROM_functions
   6105  2fc9				  -	      ORG	$F7F0
   6106  2fc9				  -	      .byte	0	; WriteToBuffer
   6107  2fc9				  -	      .byte	0	; WriteSendBuffer
   6108  2fc9				  -	      .byte	0	; ReceiveBuffer
   6109  2fc9				  -	      .byte	$ff	; ReceiveBufferSize (none zero for detection of PlusROM support)
   6110  2fc9				  -	      ORG	$F7FA
   6111  2fc9				  -	      else
   6112  2fc9				  -	      ORG	$F7FC
   6113  2fc9				  -	      endif
   6114  2fc9					      else
   6115  2fc9					      ifconst	bankswitch
   6116  2fc9					      if	bankswitch == 8
   6117  2fd1					      ORG	$2FF4-bscode_length
   6118  2fd1					      RORG	$FFF4-bscode_length
   6119  2fd1					      endif
   6120  2fd1				  -	      if	bankswitch == 16
   6121  2fd1				  -	      ORG	$4FF4-bscode_length
   6122  2fd1				  -	      RORG	$FFF4-bscode_length
   6123  2fd1					      endif
   6124  2fd1				  -	      if	bankswitch == 32
   6125  2fd1				  -	      ORG	$8FF4-bscode_length
   6126  2fd1				  -	      RORG	$FFF4-bscode_length
   6127  2fd1					      endif
   6128  2fd1				  -	      if	bankswitch == 64
   6129  2fd1				  -	      ORG	$10FE0-bscode_length
   6130  2fd1				  -	      RORG	$1FFE0-bscode_length
   6131  2fd1					      endif
   6132  2fd1				  -	      else
   6133  2fd1				  -	      ifconst	PlusROM_functions
   6134  2fd1				  -	      ORG	$FFF0
   6135  2fd1				  -	      .byte	0	; WriteToBuffer
   6136  2fd1				  -	      .byte	0	; WriteSendBuffer
   6137  2fd1				  -	      .byte	0	; ReceiveBuffer
   6138  2fd1				  -	      .byte	$ff	; ReceiveBufferSize (none zero for detection of PlusROM support)
   6139  2fd1				  -	      ORG	$FFFA
   6140  2fd1				  -	      else
   6141  2fd1				  -	      ORG	$FFFC
   6142  2fd1				  -	      endif
   6143  2fd1					      endif
   6144  2fd1					      endif
   6145  2fd1							; Provided under the CC0 license. See the included LICENSE.txt for details.
   6146  2fd1
   6147  2fd1							; every bank has this stuff at the same place
   6148  2fd1							; this code can switch to/from any bank at any entry point
   6149  2fd1							; and can preserve register values
   6150  2fd1							; note: lines not starting with a space are not placed in all banks
   6151  2fd1							;
   6152  2fd1							; line below tells the compiler how long this is - do not remove
   6153  2fd1							;size=35
   6154  2fd1
   6155  2fd1				   begin_bscode
   6156  2fd1		       a2 ff		      ldx	#$ff
   6157  2fd3				  -	      ifconst	FASTFETCH	; using DPC+
   6158  2fd3				  -	      stx	FASTFETCH
   6159  2fd3					      endif
   6160  2fd3		       9a		      txs
   6161  2fd4				  -	      if	bankswitch == 64
   6162  2fd4				  -	      lda	#(((>(start-1)) & $0F) | $F0)
   6163  2fd4					      else
   6164  2fd4		       a9 f3		      lda	#>(start-1)
   6165  2fd6					      endif
   6166  2fd6		       48		      pha
   6167  2fd7		       a9 51		      lda	#<(start-1)
   6168  2fd9		       48		      pha
   6169  2fda
   6170  2fda				   BS_return
   6171  2fda		       48		      pha
   6172  2fdb		       8a		      txa
   6173  2fdc		       48		      pha
   6174  2fdd		       ba		      tsx
   6175  2fde
   6176  2fde					      if	bankswitch != 64
   6177  2fde		       b5 04		      lda	4,x	; get high byte of return address
   6178  2fe0
   6179  2fe0		       2a		      rol
   6180  2fe1		       2a		      rol
   6181  2fe2		       2a		      rol
   6182  2fe3		       2a		      rol
   6183  2fe4		       29 01		      and	#bs_mask	;1 3 or 7 for F8/F6/F4
   6184  2fe6		       aa		      tax
   6185  2fe7		       e8		      inx
   6186  2fe8				  -	      else
   6187  2fe8				  -	      lda	4,x	; get high byte of return address
   6188  2fe8				  -	      tay
   6189  2fe8				  -	      ora	#$10	; change our bank nibble into a valid rom mirror
   6190  2fe8				  -	      sta	4,x
   6191  2fe8				  -	      tya
   6192  2fe8				  -	      lsr
   6193  2fe8				  -	      lsr
   6194  2fe8				  -	      lsr
   6195  2fe8				  -	      lsr
   6196  2fe8				  -	      tax
   6197  2fe8				  -	      inx
   6198  2fe8					      endif
   6199  2fe8
   6200  2fe8				   BS_jsr
   6201  2fe8		       bd f7 1f 	      lda	bankswitch_hotspot-1,x
   6202  2feb		       68		      pla
   6203  2fec		       aa		      tax
   6204  2fed		       68		      pla
   6205  2fee		       60		      rts
   6206  2fef				  -	      if	((* & $1FFF) > ((bankswitch_hotspot & $1FFF) - 1))
   6207  2fef				  -	      echo	"WARNING: size parameter in banksw.asm too small - the program probably will not work."
   6208  2fef				  -	      echo	"Change to",[(*-begin_bscode+1)&$FF]d,"and try again."
   6209  2fef					      endif
   6210  2fef							; Provided under the CC0 license. See the included LICENSE.txt for details.
   6211  2fef
   6212  2fef					      ifconst	bankswitch
   6213  2fef					      if	bankswitch == 8
   6214  2fef					      ifconst	PlusROM_functions
   6215  2ff0					      ORG	$2FF0
   6216  2ff0					      RORG	$FFF0
   6217  2ff0		       00		      .byte.b	0	; WriteToBuffer
   6218  2ff1		       00		      .byte.b	0	; WriteSendBuffer
   6219  2ff2		       00		      .byte.b	0	; ReceiveBuffer
   6220  2ff3		       ff		      .byte.b	$ff	; ReceiveBufferSize (none zero for detection of PlusROM support)
   6221  2ffa					      ORG	$2FFA
   6222  2ffa					      RORG	$FFFA
   6223  2ffa		       bb 1a		      .word.w	(PlusROM_API-$C000)
   6224  2ffc				  -	      else
   6225  2ffc				  -	      ORG	$2FFC
   6226  2ffc				  -	      RORG	$FFFC
   6227  2ffc					      endif
   6228  2ffc					      endif
   6229  2ffc				  -	      if	bankswitch == 16
   6230  2ffc				  -	      ifconst	PlusROM_functions
   6231  2ffc				  -	      ORG	$4FF0
   6232  2ffc				  -	      RORG	$FFF0
   6233  2ffc				  -	      .byte	0	; WriteToBuffer
   6234  2ffc				  -	      .byte	0	; WriteSendBuffer
   6235  2ffc				  -	      .byte	0	; ReceiveBuffer
   6236  2ffc				  -	      .byte	$ff	; ReceiveBufferSize (none zero for detection of PlusROM support)
   6237  2ffc				  -	      ORG	$4FFA
   6238  2ffc				  -	      RORG	$FFFA
   6239  2ffc				  -	      .word	(PlusROM_API-$9000)
   6240  2ffc				  -	      else
   6241  2ffc				  -	      ORG	$4FFC
   6242  2ffc				  -	      RORG	$FFFC
   6243  2ffc				  -	      endif
   6244  2ffc					      endif
   6245  2ffc				  -	      if	bankswitch == 32
   6246  2ffc				  -	      ifconst	PlusROM_functions
   6247  2ffc				  -	      ORG	$8FF0
   6248  2ffc				  -	      RORG	$FFF0
   6249  2ffc				  -	      .byte	0	; WriteToBuffer
   6250  2ffc				  -	      .byte	0	; WriteSendBuffer
   6251  2ffc				  -	      .byte	0	; ReceiveBuffer
   6252  2ffc				  -	      .byte	$ff	; ReceiveBufferSize (none zero for detection of PlusROM support)
   6253  2ffc				  -	      ORG	$8FFA
   6254  2ffc				  -	      RORG	$FFFA
   6255  2ffc				  -	      .word	(PlusROM_API-$5000)
   6256  2ffc				  -	      else
   6257  2ffc				  -	      ORG	$8FFC
   6258  2ffc				  -	      RORG	$FFFC
   6259  2ffc				  -	      endif
   6260  2ffc					      endif
   6261  2ffc				  -	      if	bankswitch == 64
   6262  2ffc				  -	      ORG	$10FF0
   6263  2ffc				  -	      RORG	$1FFF0
   6264  2ffc				  -	      lda	$ffe0	; we use wasted space to assist stella with EF format auto-detection
   6265  2ffc				  -	      ORG	$10FF8
   6266  2ffc				  -	      RORG	$1FFF8
   6267  2ffc				  -	      ifconst	superchip
   6268  2ffc				  -	      .byte	"E","F","S","C"
   6269  2ffc				  -	      else
   6270  2ffc				  -	      .byte	"E","F","E","F"
   6271  2ffc				  -	      endif
   6272  2ffc				  -	      ORG	$10FFC
   6273  2ffc				  -	      RORG	$1FFFC
   6274  2ffc					      endif
   6275  2ffc				  -	      else
   6276  2ffc				  -	      ifconst	ROM2k
   6277  2ffc				  -	      ifconst	PlusROM_functions
   6278  2ffc				  -	      ORG	$F7FA
   6279  2ffc				  -	      .word	(PlusROM_API-$E000)
   6280  2ffc				  -	      else
   6281  2ffc				  -	      ORG	$F7FC
   6282  2ffc				  -	      endif
   6283  2ffc				  -	      else
   6284  2ffc				  -	      ifconst	PlusROM_functions
   6285  2ffc				  -	      ORG	$FFFA
   6286  2ffc				  -	      .word	(PlusROM_API-$E000)
   6287  2ffc				  -	      else
   6288  2ffc				  -	      ORG	$FFFC
   6289  2ffc				  -	      endif
   6290  2ffc				  -	      endif
   6291  2ffc					      endif
   6292  2ffc		       52 f3		      .word.w	(start & $ffff)
   6293  2ffe		       52 f3		      .word.w	(start & $ffff)
