------- FILE d:\Firmaplus\Firmaplus_intern\Atari\PlusROM\Projekte-batariBasic\CaveApocalypse\C.A.V.E. Apocalypse.bas.asm LEVEL 1 PASS 3
      1  3000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  3000 ????
      3  3000 ????				      processor	6502
------- FILE vcs.h LEVEL 2 PASS 3
      0  3000 ????				      include	"vcs.h"
      1  3000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  3000 ????
      3  3000 ????						; VCS.H
      4  3000 ????						; Version 1.05, 13/November/2003
      5  3000 ????
      6  3000 ????	       00 69	   VERSION_VCS =	105
      7  3000 ????
      8  3000 ????						; THIS IS A PRELIMINARY RELEASE OF *THE* "STANDARD" VCS.H
      9  3000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
     10  3000 ????						; PLEASE DO *NOT* REDISTRIBUTE THIS FILE!
     11  3000 ????						;
     12  3000 ????						; This file defines hardware registers and memory mapping for the
     13  3000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     14  3000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     15  3000 ????						; available at at http://www.atari2600.org/dasm
     16  3000 ????						;
     17  3000 ????						; Many thanks to the original author(s) of this file, and to everyone who has
     18  3000 ????						; contributed to understanding the Atari 2600.  If you take issue with the
     19  3000 ????						; contents, or naming of registers, please write to me (atari2600@taswegian.com)
     20  3000 ????						; with your views.  Please contribute, if you think you can improve this
     21  3000 ????						; file!
     22  3000 ????						;
     23  3000 ????						; Latest Revisions...
     24  3000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     25  3000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     26  3000 ????						;			    This will allow conditional code to verify VCS.H being
     27  3000 ????						;			    used for code assembly.
     28  3000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     29  3000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     30  3000 ????						;			 mirrored reading/writing differences.	This is more a 
     31  3000 ????						;			 readability issue, and binary compatibility with disassembled
     32  3000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     33  3000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     34  3000 ????						;			 which was broken by the use of segments in this file, as
     35  3000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     36  3000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     37  3000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     38  3000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     39  3000 ????						;						   it is safe to leave it undefined, and the base address will
     40  3000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     41  3000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     42  3000 ????						;			  - register definitions are now generated through assignment
     43  3000 ????						;			    in uninitialised segments.	This allows a changeable base
     44  3000 ????						;			    address architecture.
     45  3000 ????						; 1.0	22/MAR/2003		Initial release
     46  3000 ????
     47  3000 ????
     48  3000 ????						;-------------------------------------------------------------------------------
     49  3000 ????
     50  3000 ????						; TIA_BASE_ADDRESS
     51  3000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     52  3000 ????						; Normally 0, the base address should (externally, before including this file)
     53  3000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     54  3000 ????						; The reason is that this bankswitching scheme treats any access to locations
     55  3000 ????						; < $40 as a bankswitch.
     56  3000 ????
     57  3000 ????			  -	      IFNCONST	TIA_BASE_ADDRESS
     58  3000 ????			  -TIA_BASE_ADDRESS =	0
     59  3000 ????				      ENDIF
     60  3000 ????
     61  3000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     62  3000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     63  3000 ????						; *OR* by declaring the label before including this file, eg:
     64  3000 ????						; TIA_BASE_ADDRESS = $40
     65  3000 ????						;   include "vcs.h"
     66  3000 ????
     67  3000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     68  3000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     69  3000 ????						; for the mirrored ROM hardware registers.
     70  3000 ????
     71  3000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     72  3000 ????						; using the -D command-line switch, as required.  If the addresses are not defined, 
     73  3000 ????						; they defaut to the TIA_BASE_ADDRESS.
     74  3000 ????
     75  3000 ????			  -	      IFNCONST	TIA_BASE_READ_ADDRESS
     76  3000 ????			  -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     77  3000 ????				      ENDIF
     78  3000 ????
     79  3000 ????			  -	      IFNCONST	TIA_BASE_WRITE_ADDRESS
     80  3000 ????			  -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     81  3000 ????				      ENDIF
     82  3000 ????
     83  3000 ????						;-------------------------------------------------------------------------------
     84  3000 ????
     85 U002d ????				      SEG.U	TIA_REGISTERS_WRITE
     86 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     87 U0000
     88 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     89 U0000
     90 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     91 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     92 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     93 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     94 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     95 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     96 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     97 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     98 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     99 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
    100 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
    101 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    102 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    103 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    104 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    105 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    106 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    107 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    108 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    109 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    110 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    111 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    112 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    113 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    114 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    115 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    116 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    117 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    118 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    119 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    120 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    121 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    122 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    123 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    124 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    125 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    126 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    127 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    128 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    129 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    130 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    131 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    132 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    133 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    134 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    135 U002d
    136 U002d							;-------------------------------------------------------------------------------
    137 U002d
    138 U000e ????				      SEG.U	TIA_REGISTERS_READ
    139 U0000					      ORG	TIA_BASE_READ_ADDRESS
    140 U0000
    141 U0000							;											bit 7	 bit 6
    142 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    143 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    144 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    145 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    146 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    147 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    148 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    149 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    150 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    151 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    152 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    153 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    154 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    155 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    156 U000e
    157 U000e							;-------------------------------------------------------------------------------
    158 U000e
    159 U0298 ????				      SEG.U	RIOT
    160 U0280					      ORG	$280
    161 U0280
    162 U0280							; RIOT MEMORY MAP
    163 U0280
    164 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    165 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    166 U0281
    167 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    168 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    169 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    170 U0284		       00	   INTIM      ds	1	; $284		Timer output
    171 U0285
    172 U0285		       00	   TIMINT     ds	1	; $285
    173 U0286
    174 U0286							; Unused/undefined registers ($285-$294)
    175 U0286
    176 U0286		       00		      ds	1	; $286
    177 U0287		       00		      ds	1	; $287
    178 U0288		       00		      ds	1	; $288
    179 U0289		       00		      ds	1	; $289
    180 U028a		       00		      ds	1	; $28A
    181 U028b		       00		      ds	1	; $28B
    182 U028c		       00		      ds	1	; $28C
    183 U028d		       00		      ds	1	; $28D
    184 U028e		       00		      ds	1	; $28E
    185 U028f		       00		      ds	1	; $28F
    186 U0290		       00		      ds	1	; $290
    187 U0291		       00		      ds	1	; $291
    188 U0292		       00		      ds	1	; $292
    189 U0293		       00		      ds	1	; $293
    190 U0294
    191 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    192 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    193 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    194 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    195 U0298
    196 U0298							;-------------------------------------------------------------------------------
    197 U0298							; The following required for back-compatibility with code which does not use
    198 U0298							; segments.
    199 U0298
    200  3000 ????				      SEG
    201  3000 ????
    202  3000 ????						; EOF
------- FILE d:\Firmaplus\Firmaplus_intern\Atari\PlusROM\Projekte-batariBasic\CaveApocalypse\C.A.V.E. Apocalypse.bas.asm
------- FILE macro.h LEVEL 2 PASS 3
      0  3000 ????				      include	"macro.h"
      1  3000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  3000 ????
      3  3000 ????						; MACRO.H
      4  3000 ????						; Version 1.05, 13/NOVEMBER/2003
      5  3000 ????
      6  3000 ????	       00 69	   VERSION_MACRO =	105
      7  3000 ????
      8  3000 ????						;
      9  3000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
     10  3000 ????						; PLEASE DO *NOT* REDISTRIBUTE MODIFIED VERSIONS OF THIS FILE!
     11  3000 ????						;
     12  3000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     13  3000 ????						; It is distributed as a companion machine-specific support package
     14  3000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     15  3000 ????						; available at at http://www.atari2600.org/dasm
     16  3000 ????						;
     17  3000 ????						; Many thanks to the people who have contributed.  If you take issue with the
     18  3000 ????						; contents, or would like to add something, please write to me
     19  3000 ????						; (atari2600@taswegian.com) with your contribution.
     20  3000 ????						;
     21  3000 ????						; Latest Revisions...
     22  3000 ????						;
     23  3000 ????						; 1.05  14/NOV/2003	  - Added VERSION_MACRO equate (which will reflect 100x version #)
     24  3000 ????						;			    This will allow conditional code to verify MACRO.H being
     25  3000 ????						;			    used for code assembly.
     26  3000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     27  3000 ????						;
     28  3000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     29  3000 ????						;
     30  3000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     31  3000 ????						;			   (standardised macro for vertical synch code)
     32  3000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added. 
     33  3000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     34  3000 ????						; 1.0	22/MAR/2003		Initial release
     35  3000 ????
     36  3000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage, 
     37  3000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     38  3000 ????						;   If you do not allow illegal opcode usage, you must include this file 
     39  3000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     40  3000 ????						;   registers and require them to be defined first).
     41  3000 ????
     42  3000 ????						; Available macros...
     43  3000 ????						;   SLEEP n		 - sleep for n cycles
     44  3000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     45  3000 ????						;   CLEAN_START	 - set machine to known state on startup
     46  3000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     47  3000 ????
     48  3000 ????						;-------------------------------------------------------------------------------
     49  3000 ????						; SLEEP duration
     50  3000 ????						; Original author: Thomas Jentzsch
     51  3000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     52  3000 ????						; useful for code where precise timing is required.
     53  3000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     54  3000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     55  3000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     56  3000 ????
     57  3000 ????				      MAC	sleep
     58  3000 ????			   .CYCLES    SET	{1}
     59  3000 ????
     60  3000 ????				      IF	.CYCLES < 2
     61  3000 ????				      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     62  3000 ????				      ERR
     63  3000 ????				      ENDIF
     64  3000 ????
     65  3000 ????				      IF	.CYCLES & 1
     66  3000 ????				      IFNCONST	NO_ILLEGAL_OPCODES
     67  3000 ????				      nop	0
     68  3000 ????				      ELSE
     69  3000 ????				      bit	VSYNC
     70  3000 ????				      ENDIF
     71  3000 ????			   .CYCLES    SET	.CYCLES - 3
     72  3000 ????				      ENDIF
     73  3000 ????
     74  3000 ????				      REPEAT	.CYCLES / 2
     75  3000 ????				      nop
     76  3000 ????				      REPEND
     77  3000 ????				      ENDM		;usage: SLEEP n (n>1)
     78  3000 ????
     79  3000 ????						;-------------------------------------------------------------------------------
     80  3000 ????						; VERTICAL_SYNC
     81  3000 ????						; Original author: Manuel Polik
     82  3000 ????						; Inserts the code required for a proper 3 scannline 
     83  3000 ????						; vertical sync sequence
     84  3000 ????						;
     85  3000 ????						; Note: Alters the accumulator
     86  3000 ????						;
     87  3000 ????						; IN:
     88  3000 ????						; OUT: A = 1
     89  3000 ????
     90  3000 ????				      MAC	vertical_sync
     91  3000 ????				      LDA	#$02	; A = VSYNC enable
     92  3000 ????				      STA	WSYNC	; Finish current line
     93  3000 ????				      STA	VSYNC	; Start vertical sync
     94  3000 ????				      STA	WSYNC	; 1st line vertical sync
     95  3000 ????				      STA	WSYNC	; 2nd line vertical sync
     96  3000 ????				      LSR		; A = VSYNC disable
     97  3000 ????				      STA	WSYNC	; 3rd line vertical sync
     98  3000 ????				      STA	VSYNC	; Stop vertical sync
     99  3000 ????				      ENDM
    100  3000 ????
    101  3000 ????						;-------------------------------------------------------------------------------
    102  3000 ????						; CLEAN_START
    103  3000 ????						; Original author: Andrew Davie
    104  3000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
    105  3000 ????						; Sets stack pointer to $FF, and all registers to 0
    106  3000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    107  3000 ????						; Use as very first section of code on boot (ie: at reset)
    108  3000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    109  3000 ????
    110  3000 ????				      MAC	clean_start
    111  3000 ????				      sei
    112  3000 ????				      cld
    113  3000 ????
    114  3000 ????				      ldx	#0
    115  3000 ????				      txa
    116  3000 ????				      tay
    117  3000 ????			   .CLEAR_STACK dex
    118  3000 ????				      txs
    119  3000 ????				      pha
    120  3000 ????				      bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    121  3000 ????
    122  3000 ????				      ENDM
    123  3000 ????
    124  3000 ????						;-------------------------------------------------------
    125  3000 ????						; SET_POINTER
    126  3000 ????						; Original author: Manuel Rotschkar
    127  3000 ????						;
    128  3000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    129  3000 ????						;
    130  3000 ????						; Usage: SET_POINTER pointer, address
    131  3000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    132  3000 ????						;
    133  3000 ????						; Note: Alters the accumulator, NZ flags
    134  3000 ????						; IN 1: 2 byte RAM location reserved for pointer
    135  3000 ????						; IN 2: absolute address
    136  3000 ????
    137  3000 ????				      MAC	set_pointer
    138  3000 ????			   .POINTER   SET	{1}
    139  3000 ????			   .ADDRESS   SET	{2}
    140  3000 ????
    141  3000 ????				      LDA	#<.ADDRESS	; Get Lowbyte of Address
    142  3000 ????				      STA	.POINTER	; Store in pointer
    143  3000 ????				      LDA	#>.ADDRESS	; Get Hibyte of Address
    144  3000 ????				      STA	.POINTER+1	; Store in pointer+1
    145  3000 ????
    146  3000 ????				      ENDM
    147  3000 ????
    148  3000 ????						; EOF
------- FILE d:\Firmaplus\Firmaplus_intern\Atari\PlusROM\Projekte-batariBasic\CaveApocalypse\C.A.V.E. Apocalypse.bas.asm
------- FILE 2600basic.h LEVEL 2 PASS 3
      0  3000 ????				      include	"2600basic.h"
      1  3000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  3000 ????
      3  3000 ????				      processor	6502
------- FILE vcs.h LEVEL 3 PASS 3
      0  3000 ????				      include	"vcs.h"
      1  3000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  3000 ????
      3  3000 ????						; VCS.H
      4  3000 ????						; Version 1.05, 13/November/2003
      5  3000 ????
      6  3000 ????	       00 69	   VERSION_VCS =	105
      7  3000 ????
      8  3000 ????						; THIS IS A PRELIMINARY RELEASE OF *THE* "STANDARD" VCS.H
      9  3000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
     10  3000 ????						; PLEASE DO *NOT* REDISTRIBUTE THIS FILE!
     11  3000 ????						;
     12  3000 ????						; This file defines hardware registers and memory mapping for the
     13  3000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     14  3000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     15  3000 ????						; available at at http://www.atari2600.org/dasm
     16  3000 ????						;
     17  3000 ????						; Many thanks to the original author(s) of this file, and to everyone who has
     18  3000 ????						; contributed to understanding the Atari 2600.  If you take issue with the
     19  3000 ????						; contents, or naming of registers, please write to me (atari2600@taswegian.com)
     20  3000 ????						; with your views.  Please contribute, if you think you can improve this
     21  3000 ????						; file!
     22  3000 ????						;
     23  3000 ????						; Latest Revisions...
     24  3000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     25  3000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     26  3000 ????						;			    This will allow conditional code to verify VCS.H being
     27  3000 ????						;			    used for code assembly.
     28  3000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     29  3000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     30  3000 ????						;			 mirrored reading/writing differences.	This is more a 
     31  3000 ????						;			 readability issue, and binary compatibility with disassembled
     32  3000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     33  3000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     34  3000 ????						;			 which was broken by the use of segments in this file, as
     35  3000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     36  3000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     37  3000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     38  3000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     39  3000 ????						;						   it is safe to leave it undefined, and the base address will
     40  3000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     41  3000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     42  3000 ????						;			  - register definitions are now generated through assignment
     43  3000 ????						;			    in uninitialised segments.	This allows a changeable base
     44  3000 ????						;			    address architecture.
     45  3000 ????						; 1.0	22/MAR/2003		Initial release
     46  3000 ????
     47  3000 ????
     48  3000 ????						;-------------------------------------------------------------------------------
     49  3000 ????
     50  3000 ????						; TIA_BASE_ADDRESS
     51  3000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     52  3000 ????						; Normally 0, the base address should (externally, before including this file)
     53  3000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     54  3000 ????						; The reason is that this bankswitching scheme treats any access to locations
     55  3000 ????						; < $40 as a bankswitch.
     56  3000 ????
     57  3000 ????			  -	      IFNCONST	TIA_BASE_ADDRESS
     58  3000 ????			  -TIA_BASE_ADDRESS =	0
     59  3000 ????				      ENDIF
     60  3000 ????
     61  3000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     62  3000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     63  3000 ????						; *OR* by declaring the label before including this file, eg:
     64  3000 ????						; TIA_BASE_ADDRESS = $40
     65  3000 ????						;   include "vcs.h"
     66  3000 ????
     67  3000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     68  3000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     69  3000 ????						; for the mirrored ROM hardware registers.
     70  3000 ????
     71  3000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     72  3000 ????						; using the -D command-line switch, as required.  If the addresses are not defined, 
     73  3000 ????						; they defaut to the TIA_BASE_ADDRESS.
     74  3000 ????
     75  3000 ????			  -	      IFNCONST	TIA_BASE_READ_ADDRESS
     76  3000 ????			  -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     77  3000 ????				      ENDIF
     78  3000 ????
     79  3000 ????			  -	      IFNCONST	TIA_BASE_WRITE_ADDRESS
     80  3000 ????			  -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     81  3000 ????				      ENDIF
     82  3000 ????
     83  3000 ????						;-------------------------------------------------------------------------------
     84  3000 ????
     85 U002d					      SEG.U	TIA_REGISTERS_WRITE
     86 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     87 U0000
     88 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     89 U0000
     90 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     91 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     92 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     93 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     94 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     95 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     96 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     97 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     98 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     99 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
    100 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
    101 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    102 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    103 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    104 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    105 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    106 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    107 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    108 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    109 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    110 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    111 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    112 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    113 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    114 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    115 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    116 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    117 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    118 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    119 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    120 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    121 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    122 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    123 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    124 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    125 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    126 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    127 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    128 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    129 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    130 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    131 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    132 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    133 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    134 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    135 U002d
    136 U002d							;-------------------------------------------------------------------------------
    137 U002d
    138 U000e					      SEG.U	TIA_REGISTERS_READ
    139 U0000					      ORG	TIA_BASE_READ_ADDRESS
    140 U0000
    141 U0000							;											bit 7	 bit 6
    142 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    143 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    144 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    145 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    146 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    147 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    148 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    149 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    150 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    151 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    152 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    153 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    154 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    155 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    156 U000e
    157 U000e							;-------------------------------------------------------------------------------
    158 U000e
    159 U0298					      SEG.U	RIOT
    160 U0280					      ORG	$280
    161 U0280
    162 U0280							; RIOT MEMORY MAP
    163 U0280
    164 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    165 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    166 U0281
    167 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    168 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    169 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    170 U0284		       00	   INTIM      ds	1	; $284		Timer output
    171 U0285
    172 U0285		       00	   TIMINT     ds	1	; $285
    173 U0286
    174 U0286							; Unused/undefined registers ($285-$294)
    175 U0286
    176 U0286		       00		      ds	1	; $286
    177 U0287		       00		      ds	1	; $287
    178 U0288		       00		      ds	1	; $288
    179 U0289		       00		      ds	1	; $289
    180 U028a		       00		      ds	1	; $28A
    181 U028b		       00		      ds	1	; $28B
    182 U028c		       00		      ds	1	; $28C
    183 U028d		       00		      ds	1	; $28D
    184 U028e		       00		      ds	1	; $28E
    185 U028f		       00		      ds	1	; $28F
    186 U0290		       00		      ds	1	; $290
    187 U0291		       00		      ds	1	; $291
    188 U0292		       00		      ds	1	; $292
    189 U0293		       00		      ds	1	; $293
    190 U0294
    191 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    192 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    193 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    194 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    195 U0298
    196 U0298							;-------------------------------------------------------------------------------
    197 U0298							; The following required for back-compatibility with code which does not use
    198 U0298							; segments.
    199 U0298
    200  3000 ????				      SEG
    201  3000 ????
    202  3000 ????						; EOF
------- FILE 2600basic.h
------- FILE macro.h LEVEL 3 PASS 3
      0  3000 ????				      include	"macro.h"
      1  3000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  3000 ????
      3  3000 ????						; MACRO.H
      4  3000 ????						; Version 1.05, 13/NOVEMBER/2003
      5  3000 ????
      6  3000 ????	       00 69	   VERSION_MACRO =	105
      7  3000 ????
      8  3000 ????						;
      9  3000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
     10  3000 ????						; PLEASE DO *NOT* REDISTRIBUTE MODIFIED VERSIONS OF THIS FILE!
     11  3000 ????						;
     12  3000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     13  3000 ????						; It is distributed as a companion machine-specific support package
     14  3000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     15  3000 ????						; available at at http://www.atari2600.org/dasm
     16  3000 ????						;
     17  3000 ????						; Many thanks to the people who have contributed.  If you take issue with the
     18  3000 ????						; contents, or would like to add something, please write to me
     19  3000 ????						; (atari2600@taswegian.com) with your contribution.
     20  3000 ????						;
     21  3000 ????						; Latest Revisions...
     22  3000 ????						;
     23  3000 ????						; 1.05  14/NOV/2003	  - Added VERSION_MACRO equate (which will reflect 100x version #)
     24  3000 ????						;			    This will allow conditional code to verify MACRO.H being
     25  3000 ????						;			    used for code assembly.
     26  3000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     27  3000 ????						;
     28  3000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     29  3000 ????						;
     30  3000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     31  3000 ????						;			   (standardised macro for vertical synch code)
     32  3000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added. 
     33  3000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     34  3000 ????						; 1.0	22/MAR/2003		Initial release
     35  3000 ????
     36  3000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage, 
     37  3000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     38  3000 ????						;   If you do not allow illegal opcode usage, you must include this file 
     39  3000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     40  3000 ????						;   registers and require them to be defined first).
     41  3000 ????
     42  3000 ????						; Available macros...
     43  3000 ????						;   SLEEP n		 - sleep for n cycles
     44  3000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     45  3000 ????						;   CLEAN_START	 - set machine to known state on startup
     46  3000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     47  3000 ????
     48  3000 ????						;-------------------------------------------------------------------------------
     49  3000 ????						; SLEEP duration
     50  3000 ????						; Original author: Thomas Jentzsch
     51  3000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     52  3000 ????						; useful for code where precise timing is required.
     53  3000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     54  3000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     55  3000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     56  3000 ????
     57  3000 ????				      MAC	sleep
     58  3000 ????			   .CYCLES    SET	{1}
     59  3000 ????
     60  3000 ????				      IF	.CYCLES < 2
     61  3000 ????				      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     62  3000 ????				      ERR
     63  3000 ????				      ENDIF
     64  3000 ????
     65  3000 ????				      IF	.CYCLES & 1
     66  3000 ????				      IFNCONST	NO_ILLEGAL_OPCODES
     67  3000 ????				      nop	0
     68  3000 ????				      ELSE
     69  3000 ????				      bit	VSYNC
     70  3000 ????				      ENDIF
     71  3000 ????			   .CYCLES    SET	.CYCLES - 3
     72  3000 ????				      ENDIF
     73  3000 ????
     74  3000 ????				      REPEAT	.CYCLES / 2
     75  3000 ????				      nop
     76  3000 ????				      REPEND
     77  3000 ????				      ENDM		;usage: SLEEP n (n>1)
     78  3000 ????
     79  3000 ????						;-------------------------------------------------------------------------------
     80  3000 ????						; VERTICAL_SYNC
     81  3000 ????						; Original author: Manuel Polik
     82  3000 ????						; Inserts the code required for a proper 3 scannline 
     83  3000 ????						; vertical sync sequence
     84  3000 ????						;
     85  3000 ????						; Note: Alters the accumulator
     86  3000 ????						;
     87  3000 ????						; IN:
     88  3000 ????						; OUT: A = 1
     89  3000 ????
     90  3000 ????				      MAC	vertical_sync
     91  3000 ????				      LDA	#$02	; A = VSYNC enable
     92  3000 ????				      STA	WSYNC	; Finish current line
     93  3000 ????				      STA	VSYNC	; Start vertical sync
     94  3000 ????				      STA	WSYNC	; 1st line vertical sync
     95  3000 ????				      STA	WSYNC	; 2nd line vertical sync
     96  3000 ????				      LSR		; A = VSYNC disable
     97  3000 ????				      STA	WSYNC	; 3rd line vertical sync
     98  3000 ????				      STA	VSYNC	; Stop vertical sync
     99  3000 ????				      ENDM
    100  3000 ????
    101  3000 ????						;-------------------------------------------------------------------------------
    102  3000 ????						; CLEAN_START
    103  3000 ????						; Original author: Andrew Davie
    104  3000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
    105  3000 ????						; Sets stack pointer to $FF, and all registers to 0
    106  3000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    107  3000 ????						; Use as very first section of code on boot (ie: at reset)
    108  3000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    109  3000 ????
    110  3000 ????				      MAC	clean_start
    111  3000 ????				      sei
    112  3000 ????				      cld
    113  3000 ????
    114  3000 ????				      ldx	#0
    115  3000 ????				      txa
    116  3000 ????				      tay
    117  3000 ????			   .CLEAR_STACK dex
    118  3000 ????				      txs
    119  3000 ????				      pha
    120  3000 ????				      bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    121  3000 ????
    122  3000 ????				      ENDM
    123  3000 ????
    124  3000 ????						;-------------------------------------------------------
    125  3000 ????						; SET_POINTER
    126  3000 ????						; Original author: Manuel Rotschkar
    127  3000 ????						;
    128  3000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    129  3000 ????						;
    130  3000 ????						; Usage: SET_POINTER pointer, address
    131  3000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    132  3000 ????						;
    133  3000 ????						; Note: Alters the accumulator, NZ flags
    134  3000 ????						; IN 1: 2 byte RAM location reserved for pointer
    135  3000 ????						; IN 2: absolute address
    136  3000 ????
    137  3000 ????				      MAC	set_pointer
    138  3000 ????			   .POINTER   SET	{1}
    139  3000 ????			   .ADDRESS   SET	{2}
    140  3000 ????
    141  3000 ????				      LDA	#<.ADDRESS	; Get Lowbyte of Address
    142  3000 ????				      STA	.POINTER	; Store in pointer
    143  3000 ????				      LDA	#>.ADDRESS	; Get Hibyte of Address
    144  3000 ????				      STA	.POINTER+1	; Store in pointer+1
    145  3000 ????
    146  3000 ????				      ENDM
    147  3000 ????
    148  3000 ????						; EOF
------- FILE 2600basic.h
------- FILE 2600basic_variable_redefs.h LEVEL 3 PASS 3
      0  3000 ????				      include	"2600basic_variable_redefs.h"
      1  3000 ????						; This file contains variable mapping and other information for the current project.
      2  3000 ????
      3  3000 ????	       00 23	   bscode_length =	35
      4  3000 ????	       00 1d	   _SD_Touch_Enemy_length =	.skipL0522-_SD_Touch_Enemy
      5  3000 ????
      6  3000 ????	       00 21	   _SD_Shoot_Enemy_length =	.skipL0521-_SD_Shoot_Enemy
      7  3000 ????
      8  3000 ????	       00 45	   _SD_Shoot_Miss_length =	.skipL0520-_SD_Shoot_Miss
      9  3000 ????
     10  3000 ????	       00 35	   _SD_Shot_Wall_length =	.skipL0519-_SD_Shot_Wall
     11  3000 ????
     12  3000 ????	       f0 6f	   w_extra_wall_startpos_y =	w111
     13  3000 ????
     14  3000 ????	       f0 ef	   r_extra_wall_startpos_y =	r111
     15  3000 ????
     16  3000 ????	       f0 6e	   w_extra_wall_startpos_x =	w110
     17  3000 ????
     18  3000 ????	       f0 ee	   r_extra_wall_startpos_x =	r110
     19  3000 ????
     20  3000 ????	       f0 6d	   w_extra_wall_height =	w109
     21  3000 ????
     22  3000 ????	       f0 ed	   r_extra_wall_height =	r109
     23  3000 ????
     24  3000 ????	       f0 6c	   w_extra_wall_width =	w108
     25  3000 ????
     26  3000 ????	       f0 ec	   r_extra_wall_width =	r108
     27  3000 ????
     28  3000 ????	       f0 6b	   w_extra_wall_type_and_range =	w107
     29  3000 ????
     30  3000 ????	       f0 eb	   r_extra_wall_type_and_range =	r107
     31  3000 ????
     32  3000 ????	       f0 6a	   w_roommate_startpos_y =	w106
     33  3000 ????
     34  3000 ????	       f0 ea	   r_roommate_startpos_y =	r106
     35  3000 ????
     36  3000 ????	       f0 69	   w_roommate_startpos_x =	w105
     37  3000 ????
     38  3000 ????	       f0 e9	   r_roommate_startpos_x =	r105
     39  3000 ????
     40  3000 ????	       f0 68	   w_roommate_type_and_range =	w104
     41  3000 ????
     42  3000 ????	       f0 e8	   r_roommate_type_and_range =	r104
     43  3000 ????
     44  3000 ????	       f0 67	   w_room_color_bottom =	w103
     45  3000 ????
     46  3000 ????	       f0 e7	   r_room_color_bottom =	r103
     47  3000 ????
     48  3000 ????	       f0 63	   w_room_color_middle =	w099
     49  3000 ????
     50  3000 ????	       f0 e3	   r_room_color_middle =	r099
     51  3000 ????
     52  3000 ????	       f0 62	   w_room_color_top =	w098
     53  3000 ????
     54  3000 ????	       f0 e2	   r_room_color_top =	r098
     55  3000 ????
     56  3000 ????	       f0 e1	   r_Bit0_room_type_top =	r097
     57  3000 ????
     58  3000 ????	       f0 e1	   w_BitOp_room_type =	r097
     59  3000 ????
     60  3000 ????	       f0 e1	   r_BitOp_room_type =	r097
     61  3000 ????
     62  3000 ????	       f0 61	   w_room_definition_start =	w097
     63  3000 ????
     64  3000 ????	       00 ac	   max_priv_level_bcd3 =	var8
     65  3000 ????
     66  3000 ????	       00 ab	   max_priv_level_bcd2 =	var7
     67  3000 ????
     68  3000 ????	       00 aa	   max_priv_level_bcd1 =	var6
     69  3000 ????
     70  3000 ????	       00 a9	   max_pub_level_bcd3 =	var5
     71  3000 ????
     72  3000 ????	       00 a8	   max_pub_level_bcd2 =	var4
     73  3000 ????
     74  3000 ????	       00 a7	   max_pub_level_bcd1 =	var3
     75  3000 ????
     76  3000 ????	       00 a6	   gamenumber =	var2
     77  3000 ????
     78  3000 ????	       00 a5	   new_room_player1x =	var1
     79  3000 ????
     80  3000 ????	       00 a4	   new_room_player1y =	var0
     81  3000 ????
     82  3000 ????	       00 ec	   _Bit7_M0_Moving =	y
     83  3000 ????
     84  3000 ????	       00 ec	   _Bit6_Flip_P1 =	y
     85  3000 ????
     86  3000 ????	       00 ec	   _Bit5_Request_Pending =	y
     87  3000 ????
     88  3000 ????	       00 ec	   _Bit4_Game_Over =	y
     89  3000 ????
     90  3000 ????	       00 ec	   _Bit3_Ball_Shot_Moving =	y
     91  3000 ????
     92  3000 ????	       00 ec	   _Bit2_Level_finished =	y
     93  3000 ????
     94  3000 ????	       00 ec	   _Bit1_Wall_Dir =	y
     95  3000 ????
     96  3000 ????	       00 ec	   _Bit0_roommate_Dir =	y
     97  3000 ????
     98  3000 ????	       00 ec	   _Bit_Game_State =	y
     99  3000 ????
    100  3000 ????	       00 86	   P1y_position =	player1y
    101  3000 ????	       00 e9	   P1y_velocity =	v
    102  3000 ????	       00 91	   M0y_position =	missile0y
    103  3000 ????	       00 e6	   M0y_velocity =	s
    104  3000 ????	       00 89	   Bally_position =	bally
    105  3000 ????	       00 e3	   Bally_velocity =	p
    106  3000 ????	       00 e1	   Safe_Point_P1_y =	n
    107  3000 ????
    108  3000 ????	       00 e0	   Safe_Point_P1_x =	m
    109  3000 ????
    110  3000 ????	       00 df	   _Bit2_New_Room_Flip_P1 =	l
    111  3000 ????
    112  3000 ????	       00 df	   _Bit1_Safe_Point_P1_Flip =	l
    113  3000 ????
    114  3000 ????	       00 df	   _Bit0_Safe_Point_reached =	l
    115  3000 ????
    116  3000 ????	       00 df	   _BitOp_Safe_Point_New_Room =	l
    117  3000 ????
    118  3000 ????	       00 de	   roommate_type =	k
    119  3000 ????
    120  3000 ????	       00 dd	   roommate_move_x =	j
    121  3000 ????
    122  3000 ????	       00 dc	   extra_wall_move_x =	i
    123  3000 ????
    124  3000 ????	       00 db	   _Ch0_Counter =	h
    125  3000 ????
    126  3000 ????	       00 da	   _Ch0_Duration =	g
    127  3000 ????
    128  3000 ????	       00 d9	   _Ch0_Sound =	f
    129  3000 ????
    130  3000 ????	       00 d8	   _Bit3_P1_Dir_Right =	e
    131  3000 ????
    132  3000 ????	       00 d8	   _Bit2_P1_Dir_Left =	e
    133  3000 ????
    134  3000 ????	       00 d8	   _Bit1_P1_Dir_Down =	e
    135  3000 ????
    136  3000 ????	       00 d8	   _Bit0_P1_Dir_Up =	e
    137  3000 ????
    138  3000 ????	       00 d8	   _BitOp_P1_Dir =	e
    139  3000 ????
    140  3000 ????	       00 d7	   _Bit3_M0_Dir_Right =	d
    141  3000 ????
    142  3000 ????	       00 d7	   _Bit2_M0_Dir_Left =	d
    143  3000 ????
    144  3000 ????	       00 d7	   _Bit1_M0_Dir_Down =	d
    145  3000 ????
    146  3000 ????	       00 d7	   _Bit0_M0_Dir_Up =	d
    147  3000 ????
    148  3000 ????	       00 d7	   _BitOp_M0_Dir =	d
    149  3000 ????
    150  3000 ????	       00 d6	   _Bit3_Ball_Shot_Dir_Right2 =	c
    151  3000 ????
    152  3000 ????	       00 d6	   _Bit2_Ball_Shot_Dir_Right1 =	c
    153  3000 ????
    154  3000 ????	       00 d6	   _Bit1_Ball_Shot_Dir_Left2 =	c
    155  3000 ????
    156  3000 ????	       00 d6	   _Bit0_Ball_Shot_Dir_Left1 =	c
    157  3000 ????
    158  3000 ????	       00 d6	   _BitOp_Ball_Shot_Dir =	c
    159  3000 ????
    160  3000 ????	       00 d5	   frame_counter =	b
    161  3000 ????
    162  3000 ????	       00 d4	   delay_counter =	a
    163  3000 ????
    164  3000 ????	       00 95	   _sc3       =	score + 2
    165  3000 ????
    166  3000 ????	       00 94	   _sc2       =	score + 1
    167  3000 ????
    168  3000 ????	       00 93	   _sc1       =	score
    169  3000 ????
    170  3000 ????	       00 fe	   _FE	      =	$FE
    171  3000 ????
    172  3000 ????	       00 fc	   _FC	      =	$FC
    173  3000 ????
    174  3000 ????	       00 fa	   _FA	      =	$FA
    175  3000 ????
    176  3000 ????	       00 f8	   _F8	      =	$F8
    177  3000 ????
    178  3000 ????	       00 f6	   _F6	      =	$F6
    179  3000 ????
    180  3000 ????	       00 f4	   _F4	      =	$F4
    181  3000 ????
    182  3000 ????	       00 f2	   _F2	      =	$F2
    183  3000 ????
    184  3000 ????	       00 f0	   _F0	      =	$F0
    185  3000 ????
    186  3000 ????	       00 ee	   _EE	      =	$EE
    187  3000 ????
    188  3000 ????	       00 ec	   _EC	      =	$EC
    189  3000 ????
    190  3000 ????	       00 ea	   _EA	      =	$EA
    191  3000 ????
    192  3000 ????	       00 e8	   _E8	      =	$E8
    193  3000 ????
    194  3000 ????	       00 e6	   _E6	      =	$E6
    195  3000 ????
    196  3000 ????	       00 e4	   _E4	      =	$E4
    197  3000 ????
    198  3000 ????	       00 e2	   _E2	      =	$E2
    199  3000 ????
    200  3000 ????	       00 e0	   _E0	      =	$E0
    201  3000 ????
    202  3000 ????	       00 de	   _DE	      =	$DE
    203  3000 ????
    204  3000 ????	       00 dc	   _DC	      =	$DC
    205  3000 ????
    206  3000 ????	       00 da	   _DA	      =	$DA
    207  3000 ????
    208  3000 ????	       00 d8	   _D8	      =	$D8
    209  3000 ????
    210  3000 ????	       00 d6	   _D6	      =	$D6
    211  3000 ????
    212  3000 ????	       00 d4	   _D4	      =	$D4
    213  3000 ????
    214  3000 ????	       00 d2	   _D2	      =	$D2
    215  3000 ????
    216  3000 ????	       00 d0	   _D0	      =	$D0
    217  3000 ????
    218  3000 ????	       00 ce	   _CE	      =	$CE
    219  3000 ????
    220  3000 ????	       00 cc	   _CC	      =	$CC
    221  3000 ????
    222  3000 ????	       00 ca	   _CA	      =	$CA
    223  3000 ????
    224  3000 ????	       00 c8	   _C8	      =	$C8
    225  3000 ????
    226  3000 ????	       00 c6	   _C6	      =	$C6
    227  3000 ????
    228  3000 ????	       00 c4	   _C4	      =	$C4
    229  3000 ????
    230  3000 ????	       00 c2	   _C2	      =	$C2
    231  3000 ????
    232  3000 ????	       00 c0	   _C0	      =	$C0
    233  3000 ????
    234  3000 ????	       00 be	   _BE	      =	$BE
    235  3000 ????
    236  3000 ????	       00 bc	   _BC	      =	$BC
    237  3000 ????
    238  3000 ????	       00 ba	   _BA	      =	$BA
    239  3000 ????
    240  3000 ????	       00 b8	   _B8	      =	$B8
    241  3000 ????
    242  3000 ????	       00 b6	   _B6	      =	$B6
    243  3000 ????
    244  3000 ????	       00 b4	   _B4	      =	$B4
    245  3000 ????
    246  3000 ????	       00 b2	   _B2	      =	$B2
    247  3000 ????
    248  3000 ????	       00 b0	   _B0	      =	$B0
    249  3000 ????
    250  3000 ????	       00 ae	   _AE	      =	$AE
    251  3000 ????
    252  3000 ????	       00 ac	   _AC	      =	$AC
    253  3000 ????
    254  3000 ????	       00 aa	   _AA	      =	$AA
    255  3000 ????
    256  3000 ????	       00 a8	   _A8	      =	$A8
    257  3000 ????
    258  3000 ????	       00 a6	   _A6	      =	$A6
    259  3000 ????
    260  3000 ????	       00 a4	   _A4	      =	$A4
    261  3000 ????
    262  3000 ????	       00 a2	   _A2	      =	$A2
    263  3000 ????
    264  3000 ????	       00 a0	   _A0	      =	$A0
    265  3000 ????
    266  3000 ????	       00 9e	   _9E	      =	$9E
    267  3000 ????
    268  3000 ????	       00 9c	   _9C	      =	$9C
    269  3000 ????
    270  3000 ????	       00 9a	   _9A	      =	$9A
    271  3000 ????
    272  3000 ????	       00 98	   _98	      =	$98
    273  3000 ????
    274  3000 ????	       00 96	   _96	      =	$96
    275  3000 ????
    276  3000 ????	       00 94	   _94	      =	$94
    277  3000 ????
    278  3000 ????	       00 92	   _92	      =	$92
    279  3000 ????
    280  3000 ????	       00 90	   _90	      =	$90
    281  3000 ????
    282  3000 ????	       00 8e	   _8E	      =	$8E
    283  3000 ????
    284  3000 ????	       00 8c	   _8C	      =	$8C
    285  3000 ????
    286  3000 ????	       00 8a	   _8A	      =	$8A
    287  3000 ????
    288  3000 ????	       00 88	   _88	      =	$88
    289  3000 ????
    290  3000 ????	       00 86	   _86	      =	$86
    291  3000 ????
    292  3000 ????	       00 84	   _84	      =	$84
    293  3000 ????
    294  3000 ????	       00 82	   _82	      =	$82
    295  3000 ????
    296  3000 ????	       00 80	   _80	      =	$80
    297  3000 ????
    298  3000 ????	       00 7e	   _7E	      =	$7E
    299  3000 ????
    300  3000 ????	       00 7c	   _7C	      =	$7C
    301  3000 ????
    302  3000 ????	       00 7a	   _7A	      =	$7A
    303  3000 ????
    304  3000 ????	       00 78	   _78	      =	$78
    305  3000 ????
    306  3000 ????	       00 76	   _76	      =	$76
    307  3000 ????
    308  3000 ????	       00 74	   _74	      =	$74
    309  3000 ????
    310  3000 ????	       00 72	   _72	      =	$72
    311  3000 ????
    312  3000 ????	       00 70	   _70	      =	$70
    313  3000 ????
    314  3000 ????	       00 6e	   _6E	      =	$6E
    315  3000 ????
    316  3000 ????	       00 6c	   _6C	      =	$6C
    317  3000 ????
    318  3000 ????	       00 6a	   _6A	      =	$6A
    319  3000 ????
    320  3000 ????	       00 68	   _68	      =	$68
    321  3000 ????
    322  3000 ????	       00 66	   _66	      =	$66
    323  3000 ????
    324  3000 ????	       00 64	   _64	      =	$64
    325  3000 ????
    326  3000 ????	       00 62	   _62	      =	$62
    327  3000 ????
    328  3000 ????	       00 60	   _60	      =	$60
    329  3000 ????
    330  3000 ????	       00 5e	   _5E	      =	$5E
    331  3000 ????
    332  3000 ????	       00 5c	   _5C	      =	$5C
    333  3000 ????
    334  3000 ????	       00 5a	   _5A	      =	$5A
    335  3000 ????
    336  3000 ????	       00 58	   _58	      =	$58
    337  3000 ????
    338  3000 ????	       00 56	   _56	      =	$56
    339  3000 ????
    340  3000 ????	       00 54	   _54	      =	$54
    341  3000 ????
    342  3000 ????	       00 52	   _52	      =	$52
    343  3000 ????
    344  3000 ????	       00 50	   _50	      =	$50
    345  3000 ????
    346  3000 ????	       00 4e	   _4E	      =	$4E
    347  3000 ????
    348  3000 ????	       00 4c	   _4C	      =	$4C
    349  3000 ????
    350  3000 ????	       00 4a	   _4A	      =	$4A
    351  3000 ????
    352  3000 ????	       00 48	   _48	      =	$48
    353  3000 ????
    354  3000 ????	       00 46	   _46	      =	$46
    355  3000 ????
    356  3000 ????	       00 44	   _44	      =	$44
    357  3000 ????
    358  3000 ????	       00 42	   _42	      =	$42
    359  3000 ????
    360  3000 ????	       00 40	   _40	      =	$40
    361  3000 ????
    362  3000 ????	       00 3e	   _3E	      =	$3E
    363  3000 ????
    364  3000 ????	       00 3c	   _3C	      =	$3C
    365  3000 ????
    366  3000 ????	       00 3a	   _3A	      =	$3A
    367  3000 ????
    368  3000 ????	       00 38	   _38	      =	$38
    369  3000 ????
    370  3000 ????	       00 36	   _36	      =	$36
    371  3000 ????
    372  3000 ????	       00 34	   _34	      =	$34
    373  3000 ????
    374  3000 ????	       00 32	   _32	      =	$32
    375  3000 ????
    376  3000 ????	       00 30	   _30	      =	$30
    377  3000 ????
    378  3000 ????	       00 2e	   _2E	      =	$2E
    379  3000 ????
    380  3000 ????	       00 2c	   _2C	      =	$2C
    381  3000 ????
    382  3000 ????	       00 2a	   _2A	      =	$2A
    383  3000 ????
    384  3000 ????	       00 28	   _28	      =	$28
    385  3000 ????
    386  3000 ????	       00 26	   _26	      =	$26
    387  3000 ????
    388  3000 ????	       00 24	   _24	      =	$24
    389  3000 ????
    390  3000 ????	       00 22	   _22	      =	$22
    391  3000 ????
    392  3000 ????	       00 20	   _20	      =	$20
    393  3000 ????
    394  3000 ????	       00 1e	   _1E	      =	$1E
    395  3000 ????
    396  3000 ????	       00 1c	   _1C	      =	$1C
    397  3000 ????
    398  3000 ????	       00 1a	   _1A	      =	$1A
    399  3000 ????
    400  3000 ????	       00 18	   _18	      =	$18
    401  3000 ????
    402  3000 ????	       00 16	   _16	      =	$16
    403  3000 ????
    404  3000 ????	       00 14	   _14	      =	$14
    405  3000 ????
    406  3000 ????	       00 12	   _12	      =	$12
    407  3000 ????
    408  3000 ????	       00 10	   _10	      =	$10
    409  3000 ????
    410  3000 ????	       00 0e	   _0E	      =	$0E
    411  3000 ????
    412  3000 ????	       00 0c	   _0C	      =	$0C
    413  3000 ????
    414  3000 ????	       00 0a	   _0A	      =	$0A
    415  3000 ????
    416  3000 ????	       00 08	   _08	      =	$08
    417  3000 ????
    418  3000 ????	       00 06	   _06	      =	$06
    419  3000 ????
    420  3000 ????	       00 04	   _04	      =	$04
    421  3000 ????
    422  3000 ????	       00 02	   _02	      =	$02
    423  3000 ????
    424  3000 ????	       00 00	   _00	      =	$00
    425  3000 ????
    426  3000 ????	       00 09	   req_load_menu =	9
    427  3000 ????
    428  3000 ????	       00 08	   req_safe_point =	8
    429  3000 ????
    430  3000 ????	       00 07	   req_level_reset =	7
    431  3000 ????
    432  3000 ????	       00 06	   req_move_down =	6
    433  3000 ????
    434  3000 ????	       00 05	   req_move_right =	5
    435  3000 ????
    436  3000 ????	       00 04	   req_move_up =	4
    437  3000 ????
    438  3000 ????	       00 03	   req_move_left =	3
    439  3000 ????
    440  3000 ????	       00 02	   req_game_over =	2
    441  3000 ????
    442  3000 ????	       00 01	   req_level_up =	1
    443  3000 ????
    444  3000 ????	       00 00	   req_load   =	0
    445  3000 ????
    446  3000 ????	       00 06	   response_menu_size =	6
    447  3000 ????
    448  3000 ????	       00 1a	   response_size_minus_1 =	26
    449  3000 ????
    450  3000 ????	       00 08	   scback     =	#$08
    451  3000 ????
    452  3000 ????	       00 94	   _M_Edge_Right =	148
    453  3000 ????
    454  3000 ????	       00 0e	   _M_Edge_Left =	14
    455  3000 ????
    456  3000 ????	       00 58	   _M_Edge_Bottom =	88
    457  3000 ????
    458  3000 ????	       00 02	   _M_Edge_Top =	2
    459  3000 ????
    460  3000 ????	       00 4c	   player_max_y =	76
    461  3000 ????
    462  3000 ????	       00 02	   player_min_y =	2
    463  3000 ????
    464  3000 ????	       00 86	   player_max_x =	134
    465  3000 ????
    466  3000 ????	       00 0a	   player_min_x =	10
    467  3000 ????
    468  3000 ????	       00 01	   pfscore    =	1
    469  3000 ????
    470  3000 ????	       00 04	   pfres      =	4
    471  3000 ????
    472  3000 ????	       00 01	   superchip  =	1
    473  3000 ????	       00 01	   bs_mask    =	1
    474  3000 ????	       00 08	   bankswitch =	8
    475  3000 ????	       1f f8	   bankswitch_hotspot =	$1FF8
    476  3000 ????	       00 01	   PFcolors   =	1
    477  3000 ????	       00 01	   player1colors =	1
------- FILE 2600basic.h
      7  3000 ????
      8  3000 ????	       00 80	   player0x   =	$80
      9  3000 ????	       00 81	   player1x   =	$81
     10  3000 ????	       00 82	   missile0x  =	$82
     11  3000 ????	       00 83	   missile1x  =	$83
     12  3000 ????	       00 84	   ballx      =	$84
     13  3000 ????
     14  3000 ????	       00 85	   objecty    =	$85
     15  3000 ????	       00 85	   player0y   =	$85
     16  3000 ????	       00 86	   player1y   =	$86
     17  3000 ????	       00 87	   missile1height =	$87
     18  3000 ????	       00 88	   missile1y  =	$88
     19  3000 ????	       00 89	   bally      =	$89
     20  3000 ????
     21  3000 ????	       00 87	   player1color =	$87	; replaces missile 1
     22  3000 ????
     23  3000 ????	       00 8a	   player0pointer =	$8A	;uses $8A-$8B
     24  3000 ????	       00 8a	   player0pointerlo =	$8A
     25  3000 ????	       00 8b	   player0pointerhi =	$8B
     26  3000 ????	       00 8c	   player1pointer =	$8C	; $8C-$8D
     27  3000 ????	       00 8c	   player1pointerlo =	$8C
     28  3000 ????	       00 8d	   player1pointerhi =	$8D
     29  3000 ????
     30  3000 ????	       00 8e	   player0height =	$8E
     31  3000 ????	       00 8f	   player1height =	$8F
     32  3000 ????	       00 90	   missile0height =	$90
     33  3000 ????	       00 91	   missile0y  =	$91
     34  3000 ????	       00 92	   ballheight =	$92
     35  3000 ????
     36  3000 ????	       00 90	   currentpaddle =	$90	; replaces missile 0 (and can't be used with playercolor)
     37  3000 ????	       00 91	   paddle     =	$91	; replaces missile 0
     38  3000 ????	       00 82	   player0colorstore =	$82	; replaces missile 0
     39  3000 ????	       00 90	   player0color =	$90	; replaces missile 0
     40  3000 ????
     41  3000 ????	       00 93	   score      =	$93	; $93-$95
     42  3000 ????	       00 96	   scorepointers =	$96	; $96-$9B = 6 bytes
     43  3000 ????	       00 9c	   temp1      =	$9C	;used by kernel.  can be used in program too, but
     44  3000 ????	       00 9d	   temp2      =	$9D	;are obliterated when drawscreen is called.
     45  3000 ????	       00 9e	   temp3      =	$9E
     46  3000 ????	       00 9f	   temp4      =	$9F
     47  3000 ????	       00 a0	   temp5      =	$A0
     48  3000 ????	       00 a1	   temp6      =	$A1
     49  3000 ????
     50  3000 ????	       00 a2	   rand       =	$A2
     51  3000 ????	       00 a3	   scorecolor =	$A3
     52  3000 ????
     53  3000 ????	       00 a4	   var0       =	$A4
     54  3000 ????	       00 a5	   var1       =	$A5
     55  3000 ????	       00 a6	   var2       =	$A6
     56  3000 ????	       00 a7	   var3       =	$A7
     57  3000 ????	       00 a8	   var4       =	$A8
     58  3000 ????	       00 a9	   var5       =	$A9
     59  3000 ????	       00 aa	   var6       =	$AA
     60  3000 ????	       00 ab	   var7       =	$AB
     61  3000 ????	       00 ac	   var8       =	$AC
     62  3000 ????	       00 ad	   var9       =	$AD
     63  3000 ????	       00 ae	   var10      =	$AE
     64  3000 ????	       00 af	   var11      =	$AF
     65  3000 ????	       00 b0	   var12      =	$B0
     66  3000 ????	       00 b1	   var13      =	$B1
     67  3000 ????	       00 b2	   var14      =	$B2
     68  3000 ????	       00 b3	   var15      =	$B3
     69  3000 ????	       00 b4	   var16      =	$B4
     70  3000 ????	       00 b5	   var17      =	$B5
     71  3000 ????	       00 b6	   var18      =	$B6
     72  3000 ????	       00 b7	   var19      =	$B7
     73  3000 ????	       00 b8	   var20      =	$B8
     74  3000 ????	       00 b9	   var21      =	$B9
     75  3000 ????	       00 ba	   var22      =	$BA
     76  3000 ????	       00 bb	   var23      =	$BB
     77  3000 ????	       00 bc	   var24      =	$BC
     78  3000 ????	       00 bd	   var25      =	$BD
     79  3000 ????	       00 be	   var26      =	$BE
     80  3000 ????	       00 bf	   var27      =	$BF
     81  3000 ????	       00 c0	   var28      =	$C0
     82  3000 ????	       00 c1	   var29      =	$C1
     83  3000 ????	       00 c2	   var30      =	$C2
     84  3000 ????	       00 c3	   var31      =	$C3
     85  3000 ????	       00 c4	   var32      =	$C4
     86  3000 ????	       00 c5	   var33      =	$C5
     87  3000 ????	       00 c6	   var34      =	$C6
     88  3000 ????	       00 c7	   var35      =	$C7
     89  3000 ????	       00 c8	   var36      =	$C8
     90  3000 ????	       00 c9	   var37      =	$C9
     91  3000 ????	       00 ca	   var38      =	$CA
     92  3000 ????	       00 cb	   var39      =	$CB
     93  3000 ????	       00 cc	   var40      =	$CC
     94  3000 ????	       00 cd	   var41      =	$CD
     95  3000 ????	       00 ce	   var42      =	$CE
     96  3000 ????	       00 cf	   var43      =	$CF
     97  3000 ????	       00 d0	   var44      =	$D0
     98  3000 ????	       00 d1	   var45      =	$D1
     99  3000 ????	       00 d2	   var46      =	$D2
    100  3000 ????	       00 d3	   var47      =	$D3
    101  3000 ????
    102  3000 ????	       00 d4	   A	      =	$d4
    103  3000 ????	       00 d4	   a	      =	$d4
    104  3000 ????	       00 d5	   B	      =	$d5
    105  3000 ????	       00 d5	   b	      =	$d5
    106  3000 ????	       00 d6	   C	      =	$d6
    107  3000 ????	       00 d6	   c	      =	$d6
    108  3000 ????	       00 d7	   D	      =	$d7
    109  3000 ????	       00 d7	   d	      =	$d7
    110  3000 ????	       00 d8	   E	      =	$d8
    111  3000 ????	       00 d8	   e	      =	$d8
    112  3000 ????	       00 d9	   F	      =	$d9
    113  3000 ????	       00 d9	   f	      =	$d9
    114  3000 ????	       00 da	   G	      =	$da
    115  3000 ????	       00 da	   g	      =	$da
    116  3000 ????	       00 db	   H	      =	$db
    117  3000 ????	       00 db	   h	      =	$db
    118  3000 ????	       00 dc	   I	      =	$dc
    119  3000 ????	       00 dc	   i	      =	$dc
    120  3000 ????	       00 dd	   J	      =	$dd
    121  3000 ????	       00 dd	   j	      =	$dd
    122  3000 ????	       00 de	   K	      =	$de
    123  3000 ????	       00 de	   k	      =	$de
    124  3000 ????	       00 df	   L	      =	$df
    125  3000 ????	       00 df	   l	      =	$df
    126  3000 ????	       00 e0	   M	      =	$e0
    127  3000 ????	       00 e0	   m	      =	$e0
    128  3000 ????	       00 e1	   N	      =	$e1
    129  3000 ????	       00 e1	   n	      =	$e1
    130  3000 ????	       00 e2	   O	      =	$e2
    131  3000 ????	       00 e2	   o	      =	$e2
    132  3000 ????	       00 e3	   P	      =	$e3
    133  3000 ????	       00 e3	   p	      =	$e3
    134  3000 ????	       00 e4	   Q	      =	$e4
    135  3000 ????	       00 e4	   q	      =	$e4
    136  3000 ????	       00 e5	   R	      =	$e5
    137  3000 ????	       00 e5	   r	      =	$e5
    138  3000 ????	       00 e6	   S	      =	$e6
    139  3000 ????	       00 e6	   s	      =	$e6
    140  3000 ????	       00 e7	   T	      =	$e7
    141  3000 ????	       00 e7	   t	      =	$e7
    142  3000 ????	       00 e8	   U	      =	$e8
    143  3000 ????	       00 e8	   u	      =	$e8
    144  3000 ????	       00 e9	   V	      =	$e9
    145  3000 ????	       00 e9	   v	      =	$e9
    146  3000 ????	       00 ea	   W	      =	$ea
    147  3000 ????	       00 ea	   w	      =	$ea
    148  3000 ????	       00 eb	   X	      =	$eb
    149  3000 ????	       00 eb	   x	      =	$eb
    150  3000 ????	       00 ec	   Y	      =	$ec
    151  3000 ????	       00 ec	   y	      =	$ec
    152  3000 ????	       00 ed	   Z	      =	$ed
    153  3000 ????	       00 ed	   z	      =	$ed
    154  3000 ????
    155  3000 ????	       00 ee	   temp7      =	$ee	; This is used to aid in bankswitching
    156  3000 ????	       00 ef	   playfieldpos =	$ef
    157  3000 ????
    158  3000 ????						; available for other uses, or if unused, provide more stack space
    159  3000 ????
    160  3000 ????	       00 f0	   aux1       =	$f0
    161  3000 ????	       00 f1	   aux2       =	$f1
    162  3000 ????	       00 f2	   aux3       =	$f2
    163  3000 ????	       00 f3	   aux4       =	$f3
    164  3000 ????	       00 f4	   aux5       =	$f4
    165  3000 ????	       00 f5	   aux6       =	$f5
    166  3000 ????
    167  3000 ????						; playfield color/height pointers
    168  3000 ????	       00 f0	   pfcolortable =	$f0	; and $d5
    169  3000 ????	       00 f0	   pfheighttable =	$f0	; and $d5
    170  3000 ????						; the above pointers are the same because if color and height are both used together,
    171  3000 ????						; they must used absolute indexed and cannot use pointers
    172  3000 ????
    173  3000 ????	       00 f2	   lifepointer =	$f2	; pointer to "lives" shape
    174  3000 ????						; upper 3 bits of $f2 contain the number of lives
    175  3000 ????	       00 f4	   lifecolor  =	$f4
    176  3000 ????	       00 f3	   lives      =	$f3	; # lives >> 5
    177  3000 ????	       00 f5	   statusbarlength =	$f5	; only uses upper 5 bits; other bits free
    178  3000 ????
    179  3000 ????	       00 f2	   pfscore1   =	$f2	; optional playfield bytes in score
    180  3000 ????	       00 f3	   pfscore2   =	$f3
    181  3000 ????	       00 f4	   pfscorecolor =	$f4
    182  3000 ????
    183  3000 ????	       00 f6	   stack1     =	$f6
    184  3000 ????	       00 f7	   stack2     =	$f7
    185  3000 ????	       00 f8	   stack3     =	$f8
    186  3000 ????	       00 f9	   stack4     =	$f9
    187  3000 ????						; the stack bytes above may be used in the kernel
    188  3000 ????						; stack = F6-F7, F8-F9, FA-FB, FC-FD, FE-FF
    189  3000 ????
    190  3000 ????				      MAC	return
    191  3000 ????				      ifnconst	bankswitch
    192  3000 ????				      rts
    193  3000 ????				      else
    194  3000 ????				      jmp	BS_return
    195  3000 ????				      endif
    196  3000 ????				      ENDM		; auto-return from either a regular or bankswitched module
    197  3000 ????
    198  3000 ????				      ifconst	superchip
    199  3000 ????	       10 d0	   playfieldbase =	$10D0
------- FILE superchip.h LEVEL 3 PASS 3
      0  3000 ????				      include	superchip.h
      1  3000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  3000 ????
      3  3000 ????	       f0 00	   write_RAM  =	$F000
      4  3000 ????	       f0 00	   wRAM       =	$F000
      5  3000 ????	       f0 00	   w000       =	$F000
      6  3000 ????	       f0 01	   w001       =	$F001
      7  3000 ????	       f0 02	   w002       =	$F002
      8  3000 ????	       f0 03	   w003       =	$F003
      9  3000 ????	       f0 04	   w004       =	$F004
     10  3000 ????	       f0 05	   w005       =	$F005
     11  3000 ????	       f0 06	   w006       =	$F006
     12  3000 ????	       f0 07	   w007       =	$F007
     13  3000 ????	       f0 08	   w008       =	$F008
     14  3000 ????	       f0 09	   w009       =	$F009
     15  3000 ????	       f0 0a	   w010       =	$F00A
     16  3000 ????	       f0 0b	   w011       =	$F00B
     17  3000 ????	       f0 0c	   w012       =	$F00C
     18  3000 ????	       f0 0d	   w013       =	$F00D
     19  3000 ????	       f0 0e	   w014       =	$F00E
     20  3000 ????	       f0 0f	   w015       =	$F00F
     21  3000 ????	       f0 10	   w016       =	$F010
     22  3000 ????	       f0 11	   w017       =	$F011
     23  3000 ????	       f0 12	   w018       =	$F012
     24  3000 ????	       f0 13	   w019       =	$F013
     25  3000 ????	       f0 14	   w020       =	$F014
     26  3000 ????	       f0 15	   w021       =	$F015
     27  3000 ????	       f0 16	   w022       =	$F016
     28  3000 ????	       f0 17	   w023       =	$F017
     29  3000 ????	       f0 18	   w024       =	$F018
     30  3000 ????	       f0 19	   w025       =	$F019
     31  3000 ????	       f0 1a	   w026       =	$F01A
     32  3000 ????	       f0 1b	   w027       =	$F01B
     33  3000 ????	       f0 1c	   w028       =	$F01C
     34  3000 ????	       f0 1d	   w029       =	$F01D
     35  3000 ????	       f0 1e	   w030       =	$F01E
     36  3000 ????	       f0 1f	   w031       =	$F01F
     37  3000 ????	       f0 20	   w032       =	$F020
     38  3000 ????	       f0 21	   w033       =	$F021
     39  3000 ????	       f0 22	   w034       =	$F022
     40  3000 ????	       f0 23	   w035       =	$F023
     41  3000 ????	       f0 24	   w036       =	$F024
     42  3000 ????	       f0 25	   w037       =	$F025
     43  3000 ????	       f0 26	   w038       =	$F026
     44  3000 ????	       f0 27	   w039       =	$F027
     45  3000 ????	       f0 28	   w040       =	$F028
     46  3000 ????	       f0 29	   w041       =	$F029
     47  3000 ????	       f0 2a	   w042       =	$F02A
     48  3000 ????	       f0 2b	   w043       =	$F02B
     49  3000 ????	       f0 2c	   w044       =	$F02C
     50  3000 ????	       f0 2d	   w045       =	$F02D
     51  3000 ????	       f0 2e	   w046       =	$F02E
     52  3000 ????	       f0 2f	   w047       =	$F02F
     53  3000 ????	       f0 30	   w048       =	$F030
     54  3000 ????	       f0 31	   w049       =	$F031
     55  3000 ????	       f0 32	   w050       =	$F032
     56  3000 ????	       f0 33	   w051       =	$F033
     57  3000 ????	       f0 34	   w052       =	$F034
     58  3000 ????	       f0 35	   w053       =	$F035
     59  3000 ????	       f0 36	   w054       =	$F036
     60  3000 ????	       f0 37	   w055       =	$F037
     61  3000 ????	       f0 38	   w056       =	$F038
     62  3000 ????	       f0 39	   w057       =	$F039
     63  3000 ????	       f0 3a	   w058       =	$F03A
     64  3000 ????	       f0 3b	   w059       =	$F03B
     65  3000 ????	       f0 3c	   w060       =	$F03C
     66  3000 ????	       f0 3d	   w061       =	$F03D
     67  3000 ????	       f0 3e	   w062       =	$F03E
     68  3000 ????	       f0 3f	   w063       =	$F03F
     69  3000 ????	       f0 40	   w064       =	$F040
     70  3000 ????	       f0 41	   w065       =	$F041
     71  3000 ????	       f0 42	   w066       =	$F042
     72  3000 ????	       f0 43	   w067       =	$F043
     73  3000 ????	       f0 44	   w068       =	$F044
     74  3000 ????	       f0 45	   w069       =	$F045
     75  3000 ????	       f0 46	   w070       =	$F046
     76  3000 ????	       f0 47	   w071       =	$F047
     77  3000 ????	       f0 48	   w072       =	$F048
     78  3000 ????	       f0 49	   w073       =	$F049
     79  3000 ????	       f0 4a	   w074       =	$F04A
     80  3000 ????	       f0 4b	   w075       =	$F04B
     81  3000 ????	       f0 4c	   w076       =	$F04C
     82  3000 ????	       f0 4d	   w077       =	$F04D
     83  3000 ????	       f0 4e	   w078       =	$F04E
     84  3000 ????	       f0 4f	   w079       =	$F04F
     85  3000 ????	       f0 50	   w080       =	$F050
     86  3000 ????	       f0 51	   w081       =	$F051
     87  3000 ????	       f0 52	   w082       =	$F052
     88  3000 ????	       f0 53	   w083       =	$F053
     89  3000 ????	       f0 54	   w084       =	$F054
     90  3000 ????	       f0 55	   w085       =	$F055
     91  3000 ????	       f0 56	   w086       =	$F056
     92  3000 ????	       f0 57	   w087       =	$F057
     93  3000 ????	       f0 58	   w088       =	$F058
     94  3000 ????	       f0 59	   w089       =	$F059
     95  3000 ????	       f0 5a	   w090       =	$F05A
     96  3000 ????	       f0 5b	   w091       =	$F05B
     97  3000 ????	       f0 5c	   w092       =	$F05C
     98  3000 ????	       f0 5d	   w093       =	$F05D
     99  3000 ????	       f0 5e	   w094       =	$F05E
    100  3000 ????	       f0 5f	   w095       =	$F05F
    101  3000 ????	       f0 60	   w096       =	$F060
    102  3000 ????	       f0 61	   w097       =	$F061
    103  3000 ????	       f0 62	   w098       =	$F062
    104  3000 ????	       f0 63	   w099       =	$F063
    105  3000 ????	       f0 64	   w100       =	$F064
    106  3000 ????	       f0 65	   w101       =	$F065
    107  3000 ????	       f0 66	   w102       =	$F066
    108  3000 ????	       f0 67	   w103       =	$F067
    109  3000 ????	       f0 68	   w104       =	$F068
    110  3000 ????	       f0 69	   w105       =	$F069
    111  3000 ????	       f0 6a	   w106       =	$F06A
    112  3000 ????	       f0 6b	   w107       =	$F06B
    113  3000 ????	       f0 6c	   w108       =	$F06C
    114  3000 ????	       f0 6d	   w109       =	$F06D
    115  3000 ????	       f0 6e	   w110       =	$F06E
    116  3000 ????	       f0 6f	   w111       =	$F06F
    117  3000 ????	       f0 70	   w112       =	$F070
    118  3000 ????	       f0 71	   w113       =	$F071
    119  3000 ????	       f0 72	   w114       =	$F072
    120  3000 ????	       f0 73	   w115       =	$F073
    121  3000 ????	       f0 74	   w116       =	$F074
    122  3000 ????	       f0 75	   w117       =	$F075
    123  3000 ????	       f0 76	   w118       =	$F076
    124  3000 ????	       f0 77	   w119       =	$F077
    125  3000 ????	       f0 78	   w120       =	$F078
    126  3000 ????	       f0 79	   w121       =	$F079
    127  3000 ????	       f0 7a	   w122       =	$F07A
    128  3000 ????	       f0 7b	   w123       =	$F07B
    129  3000 ????	       f0 7c	   w124       =	$F07C
    130  3000 ????	       f0 7d	   w125       =	$F07D
    131  3000 ????	       f0 7e	   w126       =	$F07E
    132  3000 ????	       f0 7f	   w127       =	$F07F
    133  3000 ????
    134  3000 ????	       f0 80	   read_RAM   =	$F080
    135  3000 ????	       f0 80	   rRAM       =	$F080
    136  3000 ????	       f0 80	   r000       =	$F080
    137  3000 ????	       f0 81	   r001       =	$F081
    138  3000 ????	       f0 82	   r002       =	$F082
    139  3000 ????	       f0 83	   r003       =	$F083
    140  3000 ????	       f0 84	   r004       =	$F084
    141  3000 ????	       f0 85	   r005       =	$F085
    142  3000 ????	       f0 86	   r006       =	$F086
    143  3000 ????	       f0 87	   r007       =	$F087
    144  3000 ????	       f0 88	   r008       =	$F088
    145  3000 ????	       f0 89	   r009       =	$F089
    146  3000 ????	       f0 8a	   r010       =	$F08A
    147  3000 ????	       f0 8b	   r011       =	$F08B
    148  3000 ????	       f0 8c	   r012       =	$F08C
    149  3000 ????	       f0 8d	   r013       =	$F08D
    150  3000 ????	       f0 8e	   r014       =	$F08E
    151  3000 ????	       f0 8f	   r015       =	$F08F
    152  3000 ????	       f0 90	   r016       =	$F090
    153  3000 ????	       f0 91	   r017       =	$F091
    154  3000 ????	       f0 92	   r018       =	$F092
    155  3000 ????	       f0 93	   r019       =	$F093
    156  3000 ????	       f0 94	   r020       =	$F094
    157  3000 ????	       f0 95	   r021       =	$F095
    158  3000 ????	       f0 96	   r022       =	$F096
    159  3000 ????	       f0 97	   r023       =	$F097
    160  3000 ????	       f0 98	   r024       =	$F098
    161  3000 ????	       f0 99	   r025       =	$F099
    162  3000 ????	       f0 9a	   r026       =	$F09A
    163  3000 ????	       f0 9b	   r027       =	$F09B
    164  3000 ????	       f0 9c	   r028       =	$F09C
    165  3000 ????	       f0 9d	   r029       =	$F09D
    166  3000 ????	       f0 9e	   r030       =	$F09E
    167  3000 ????	       f0 9f	   r031       =	$F09F
    168  3000 ????	       f0 a0	   r032       =	$F0A0
    169  3000 ????	       f0 a1	   r033       =	$F0A1
    170  3000 ????	       f0 a2	   r034       =	$F0A2
    171  3000 ????	       f0 a3	   r035       =	$F0A3
    172  3000 ????	       f0 a4	   r036       =	$F0A4
    173  3000 ????	       f0 a5	   r037       =	$F0A5
    174  3000 ????	       f0 a6	   r038       =	$F0A6
    175  3000 ????	       f0 a7	   r039       =	$F0A7
    176  3000 ????	       f0 a8	   r040       =	$F0A8
    177  3000 ????	       f0 a9	   r041       =	$F0A9
    178  3000 ????	       f0 aa	   r042       =	$F0AA
    179  3000 ????	       f0 ab	   r043       =	$F0AB
    180  3000 ????	       f0 ac	   r044       =	$F0AC
    181  3000 ????	       f0 ad	   r045       =	$F0AD
    182  3000 ????	       f0 ae	   r046       =	$F0AE
    183  3000 ????	       f0 af	   r047       =	$F0AF
    184  3000 ????	       f0 b0	   r048       =	$F0B0
    185  3000 ????	       f0 b1	   r049       =	$F0B1
    186  3000 ????	       f0 b2	   r050       =	$F0B2
    187  3000 ????	       f0 b3	   r051       =	$F0B3
    188  3000 ????	       f0 b4	   r052       =	$F0B4
    189  3000 ????	       f0 b5	   r053       =	$F0B5
    190  3000 ????	       f0 b6	   r054       =	$F0B6
    191  3000 ????	       f0 b7	   r055       =	$F0B7
    192  3000 ????	       f0 b8	   r056       =	$F0B8
    193  3000 ????	       f0 b9	   r057       =	$F0B9
    194  3000 ????	       f0 ba	   r058       =	$F0BA
    195  3000 ????	       f0 bb	   r059       =	$F0BB
    196  3000 ????	       f0 bc	   r060       =	$F0BC
    197  3000 ????	       f0 bd	   r061       =	$F0BD
    198  3000 ????	       f0 be	   r062       =	$F0BE
    199  3000 ????	       f0 bf	   r063       =	$F0BF
    200  3000 ????	       f0 c0	   r064       =	$F0C0
    201  3000 ????	       f0 c1	   r065       =	$F0C1
    202  3000 ????	       f0 c2	   r066       =	$F0C2
    203  3000 ????	       f0 c3	   r067       =	$F0C3
    204  3000 ????	       f0 c4	   r068       =	$F0C4
    205  3000 ????	       f0 c5	   r069       =	$F0C5
    206  3000 ????	       f0 c6	   r070       =	$F0C6
    207  3000 ????	       f0 c7	   r071       =	$F0C7
    208  3000 ????	       f0 c8	   r072       =	$F0C8
    209  3000 ????	       f0 c9	   r073       =	$F0C9
    210  3000 ????	       f0 ca	   r074       =	$F0CA
    211  3000 ????	       f0 cb	   r075       =	$F0CB
    212  3000 ????	       f0 cc	   r076       =	$F0CC
    213  3000 ????	       f0 cd	   r077       =	$F0CD
    214  3000 ????	       f0 ce	   r078       =	$F0CE
    215  3000 ????	       f0 cf	   r079       =	$F0CF
    216  3000 ????	       f0 d0	   r080       =	$F0D0
    217  3000 ????	       f0 d1	   r081       =	$F0D1
    218  3000 ????	       f0 d2	   r082       =	$F0D2
    219  3000 ????	       f0 d3	   r083       =	$F0D3
    220  3000 ????	       f0 d4	   r084       =	$F0D4
    221  3000 ????	       f0 d5	   r085       =	$F0D5
    222  3000 ????	       f0 d6	   r086       =	$F0D6
    223  3000 ????	       f0 d7	   r087       =	$F0D7
    224  3000 ????	       f0 d8	   r088       =	$F0D8
    225  3000 ????	       f0 d9	   r089       =	$F0D9
    226  3000 ????	       f0 da	   r090       =	$F0DA
    227  3000 ????	       f0 db	   r091       =	$F0DB
    228  3000 ????	       f0 dc	   r092       =	$F0DC
    229  3000 ????	       f0 dd	   r093       =	$F0DD
    230  3000 ????	       f0 de	   r094       =	$F0DE
    231  3000 ????	       f0 df	   r095       =	$F0DF
    232  3000 ????	       f0 e0	   r096       =	$F0E0
    233  3000 ????	       f0 e1	   r097       =	$F0E1
    234  3000 ????	       f0 e2	   r098       =	$F0E2
    235  3000 ????	       f0 e3	   r099       =	$F0E3
    236  3000 ????	       f0 e4	   r100       =	$F0E4
    237  3000 ????	       f0 e5	   r101       =	$F0E5
    238  3000 ????	       f0 e6	   r102       =	$F0E6
    239  3000 ????	       f0 e7	   r103       =	$F0E7
    240  3000 ????	       f0 e8	   r104       =	$F0E8
    241  3000 ????	       f0 e9	   r105       =	$F0E9
    242  3000 ????	       f0 ea	   r106       =	$F0EA
    243  3000 ????	       f0 eb	   r107       =	$F0EB
    244  3000 ????	       f0 ec	   r108       =	$F0EC
    245  3000 ????	       f0 ed	   r109       =	$F0ED
    246  3000 ????	       f0 ee	   r110       =	$F0EE
    247  3000 ????	       f0 ef	   r111       =	$F0EF
    248  3000 ????	       f0 f0	   r112       =	$F0F0
    249  3000 ????	       f0 f1	   r113       =	$F0F1
    250  3000 ????	       f0 f2	   r114       =	$F0F2
    251  3000 ????	       f0 f3	   r115       =	$F0F3
    252  3000 ????	       f0 f4	   r116       =	$F0F4
    253  3000 ????	       f0 f5	   r117       =	$F0F5
    254  3000 ????	       f0 f6	   r118       =	$F0F6
    255  3000 ????	       f0 f7	   r119       =	$F0F7
    256  3000 ????	       f0 f8	   r120       =	$F0F8
    257  3000 ????	       f0 f9	   r121       =	$F0F9
    258  3000 ????	       f0 fa	   r122       =	$F0FA
    259  3000 ????	       f0 fb	   r123       =	$F0FB
    260  3000 ????	       f0 fc	   r124       =	$F0FC
    261  3000 ????	       f0 fd	   r125       =	$F0FD
    262  3000 ????	       f0 fe	   r126       =	$F0FE
    263  3000 ????	       f0 ff	   r127       =	$F0FF
------- FILE 2600basic.h
    201  3000 ????			  -	      else
    202  3000 ????			  -playfieldbase =	$A4
    203  3000 ????				      endif
    204  3000 ????
    205  3000 ????				      ifnconst	pfhalfwidth
    206  3000 ????	       00 04	   pfwidth    =	4
    207  3000 ????	       00 0e	   PF1L       =	PF1
    208  3000 ????	       00 0f	   PF2L       =	PF2
    209  3000 ????	       00 0e	   PF1R       =	PF1
    210  3000 ????	       00 0f	   PF2R       =	PF2
    211  3000 ????	       00 00	   pfadjust   =	0
    212  3000 ????			  -	      else
    213  3000 ????			  -pfwidth    =	2
    214  3000 ????			  -	      ifconst	pfcenter
    215  3000 ????			  -PF1L       =	$3F	; no effect
    216  3000 ????			  -PF2L       =	PF2
    217  3000 ????			  -PF1R       =	$3F
    218  3000 ????			  -PF2R       =	PF2	; no effect
    219  3000 ????			  -pfadjust   =	1
    220  3000 ????			  -	      else
    221  3000 ????			  -PF1L       =	PF1
    222  3000 ????			  -PF2L       =	PF2
    223  3000 ????			  -PF1R       =	$3F	; no effect
    224  3000 ????			  -PF2R       =	$3F	; no effect
    225  3000 ????			  -pfadjust   =	0
    226  3000 ????			  -	      endif
    227  3000 ????				      endif
    228  3000 ????
    229  3000 ????						; define playfield start based on height
    230  3000 ????			  -	      ifnconst	pfres
    231  3000 ????			  -playfield  =	playfieldbase
    232  3000 ????				      else
    233  3000 ????	       10 f0	   playfield  =	playfieldbase-(pfres-12*(4/pfwidth))*pfwidth
    234  3000 ????				      endif
------- FILE d:\Firmaplus\Firmaplus_intern\Atari\PlusROM\Projekte-batariBasic\CaveApocalypse\C.A.V.E. Apocalypse.bas.asm
------- FILE 2600basic_variable_redefs.h LEVEL 2 PASS 3
      0  3000 ????				      include	"2600basic_variable_redefs.h"
      1  3000 ????						; This file contains variable mapping and other information for the current project.
      2  3000 ????
      3  3000 ????	       00 23	   bscode_length =	35
      4  3000 ????	       00 1d	   _SD_Touch_Enemy_length =	.skipL0522-_SD_Touch_Enemy
      5  3000 ????
      6  3000 ????	       00 21	   _SD_Shoot_Enemy_length =	.skipL0521-_SD_Shoot_Enemy
      7  3000 ????
      8  3000 ????	       00 45	   _SD_Shoot_Miss_length =	.skipL0520-_SD_Shoot_Miss
      9  3000 ????
     10  3000 ????	       00 35	   _SD_Shot_Wall_length =	.skipL0519-_SD_Shot_Wall
     11  3000 ????
     12  3000 ????	       f0 6f	   w_extra_wall_startpos_y =	w111
     13  3000 ????
     14  3000 ????	       f0 ef	   r_extra_wall_startpos_y =	r111
     15  3000 ????
     16  3000 ????	       f0 6e	   w_extra_wall_startpos_x =	w110
     17  3000 ????
     18  3000 ????	       f0 ee	   r_extra_wall_startpos_x =	r110
     19  3000 ????
     20  3000 ????	       f0 6d	   w_extra_wall_height =	w109
     21  3000 ????
     22  3000 ????	       f0 ed	   r_extra_wall_height =	r109
     23  3000 ????
     24  3000 ????	       f0 6c	   w_extra_wall_width =	w108
     25  3000 ????
     26  3000 ????	       f0 ec	   r_extra_wall_width =	r108
     27  3000 ????
     28  3000 ????	       f0 6b	   w_extra_wall_type_and_range =	w107
     29  3000 ????
     30  3000 ????	       f0 eb	   r_extra_wall_type_and_range =	r107
     31  3000 ????
     32  3000 ????	       f0 6a	   w_roommate_startpos_y =	w106
     33  3000 ????
     34  3000 ????	       f0 ea	   r_roommate_startpos_y =	r106
     35  3000 ????
     36  3000 ????	       f0 69	   w_roommate_startpos_x =	w105
     37  3000 ????
     38  3000 ????	       f0 e9	   r_roommate_startpos_x =	r105
     39  3000 ????
     40  3000 ????	       f0 68	   w_roommate_type_and_range =	w104
     41  3000 ????
     42  3000 ????	       f0 e8	   r_roommate_type_and_range =	r104
     43  3000 ????
     44  3000 ????	       f0 67	   w_room_color_bottom =	w103
     45  3000 ????
     46  3000 ????	       f0 e7	   r_room_color_bottom =	r103
     47  3000 ????
     48  3000 ????	       f0 63	   w_room_color_middle =	w099
     49  3000 ????
     50  3000 ????	       f0 e3	   r_room_color_middle =	r099
     51  3000 ????
     52  3000 ????	       f0 62	   w_room_color_top =	w098
     53  3000 ????
     54  3000 ????	       f0 e2	   r_room_color_top =	r098
     55  3000 ????
     56  3000 ????	       f0 e1	   r_Bit0_room_type_top =	r097
     57  3000 ????
     58  3000 ????	       f0 e1	   w_BitOp_room_type =	r097
     59  3000 ????
     60  3000 ????	       f0 e1	   r_BitOp_room_type =	r097
     61  3000 ????
     62  3000 ????	       f0 61	   w_room_definition_start =	w097
     63  3000 ????
     64  3000 ????	       00 ac	   max_priv_level_bcd3 =	var8
     65  3000 ????
     66  3000 ????	       00 ab	   max_priv_level_bcd2 =	var7
     67  3000 ????
     68  3000 ????	       00 aa	   max_priv_level_bcd1 =	var6
     69  3000 ????
     70  3000 ????	       00 a9	   max_pub_level_bcd3 =	var5
     71  3000 ????
     72  3000 ????	       00 a8	   max_pub_level_bcd2 =	var4
     73  3000 ????
     74  3000 ????	       00 a7	   max_pub_level_bcd1 =	var3
     75  3000 ????
     76  3000 ????	       00 a6	   gamenumber =	var2
     77  3000 ????
     78  3000 ????	       00 a5	   new_room_player1x =	var1
     79  3000 ????
     80  3000 ????	       00 a4	   new_room_player1y =	var0
     81  3000 ????
     82  3000 ????	       00 ec	   _Bit7_M0_Moving =	y
     83  3000 ????
     84  3000 ????	       00 ec	   _Bit6_Flip_P1 =	y
     85  3000 ????
     86  3000 ????	       00 ec	   _Bit5_Request_Pending =	y
     87  3000 ????
     88  3000 ????	       00 ec	   _Bit4_Game_Over =	y
     89  3000 ????
     90  3000 ????	       00 ec	   _Bit3_Ball_Shot_Moving =	y
     91  3000 ????
     92  3000 ????	       00 ec	   _Bit2_Level_finished =	y
     93  3000 ????
     94  3000 ????	       00 ec	   _Bit1_Wall_Dir =	y
     95  3000 ????
     96  3000 ????	       00 ec	   _Bit0_roommate_Dir =	y
     97  3000 ????
     98  3000 ????	       00 ec	   _Bit_Game_State =	y
     99  3000 ????
    100  3000 ????	       00 86	   P1y_position =	player1y
    101  3000 ????	       00 e9	   P1y_velocity =	v
    102  3000 ????	       00 91	   M0y_position =	missile0y
    103  3000 ????	       00 e6	   M0y_velocity =	s
    104  3000 ????	       00 89	   Bally_position =	bally
    105  3000 ????	       00 e3	   Bally_velocity =	p
    106  3000 ????	       00 e1	   Safe_Point_P1_y =	n
    107  3000 ????
    108  3000 ????	       00 e0	   Safe_Point_P1_x =	m
    109  3000 ????
    110  3000 ????	       00 df	   _Bit2_New_Room_Flip_P1 =	l
    111  3000 ????
    112  3000 ????	       00 df	   _Bit1_Safe_Point_P1_Flip =	l
    113  3000 ????
    114  3000 ????	       00 df	   _Bit0_Safe_Point_reached =	l
    115  3000 ????
    116  3000 ????	       00 df	   _BitOp_Safe_Point_New_Room =	l
    117  3000 ????
    118  3000 ????	       00 de	   roommate_type =	k
    119  3000 ????
    120  3000 ????	       00 dd	   roommate_move_x =	j
    121  3000 ????
    122  3000 ????	       00 dc	   extra_wall_move_x =	i
    123  3000 ????
    124  3000 ????	       00 db	   _Ch0_Counter =	h
    125  3000 ????
    126  3000 ????	       00 da	   _Ch0_Duration =	g
    127  3000 ????
    128  3000 ????	       00 d9	   _Ch0_Sound =	f
    129  3000 ????
    130  3000 ????	       00 d8	   _Bit3_P1_Dir_Right =	e
    131  3000 ????
    132  3000 ????	       00 d8	   _Bit2_P1_Dir_Left =	e
    133  3000 ????
    134  3000 ????	       00 d8	   _Bit1_P1_Dir_Down =	e
    135  3000 ????
    136  3000 ????	       00 d8	   _Bit0_P1_Dir_Up =	e
    137  3000 ????
    138  3000 ????	       00 d8	   _BitOp_P1_Dir =	e
    139  3000 ????
    140  3000 ????	       00 d7	   _Bit3_M0_Dir_Right =	d
    141  3000 ????
    142  3000 ????	       00 d7	   _Bit2_M0_Dir_Left =	d
    143  3000 ????
    144  3000 ????	       00 d7	   _Bit1_M0_Dir_Down =	d
    145  3000 ????
    146  3000 ????	       00 d7	   _Bit0_M0_Dir_Up =	d
    147  3000 ????
    148  3000 ????	       00 d7	   _BitOp_M0_Dir =	d
    149  3000 ????
    150  3000 ????	       00 d6	   _Bit3_Ball_Shot_Dir_Right2 =	c
    151  3000 ????
    152  3000 ????	       00 d6	   _Bit2_Ball_Shot_Dir_Right1 =	c
    153  3000 ????
    154  3000 ????	       00 d6	   _Bit1_Ball_Shot_Dir_Left2 =	c
    155  3000 ????
    156  3000 ????	       00 d6	   _Bit0_Ball_Shot_Dir_Left1 =	c
    157  3000 ????
    158  3000 ????	       00 d6	   _BitOp_Ball_Shot_Dir =	c
    159  3000 ????
    160  3000 ????	       00 d5	   frame_counter =	b
    161  3000 ????
    162  3000 ????	       00 d4	   delay_counter =	a
    163  3000 ????
    164  3000 ????	       00 95	   _sc3       =	score + 2
    165  3000 ????
    166  3000 ????	       00 94	   _sc2       =	score + 1
    167  3000 ????
    168  3000 ????	       00 93	   _sc1       =	score
    169  3000 ????
    170  3000 ????	       00 fe	   _FE	      =	$FE
    171  3000 ????
    172  3000 ????	       00 fc	   _FC	      =	$FC
    173  3000 ????
    174  3000 ????	       00 fa	   _FA	      =	$FA
    175  3000 ????
    176  3000 ????	       00 f8	   _F8	      =	$F8
    177  3000 ????
    178  3000 ????	       00 f6	   _F6	      =	$F6
    179  3000 ????
    180  3000 ????	       00 f4	   _F4	      =	$F4
    181  3000 ????
    182  3000 ????	       00 f2	   _F2	      =	$F2
    183  3000 ????
    184  3000 ????	       00 f0	   _F0	      =	$F0
    185  3000 ????
    186  3000 ????	       00 ee	   _EE	      =	$EE
    187  3000 ????
    188  3000 ????	       00 ec	   _EC	      =	$EC
    189  3000 ????
    190  3000 ????	       00 ea	   _EA	      =	$EA
    191  3000 ????
    192  3000 ????	       00 e8	   _E8	      =	$E8
    193  3000 ????
    194  3000 ????	       00 e6	   _E6	      =	$E6
    195  3000 ????
    196  3000 ????	       00 e4	   _E4	      =	$E4
    197  3000 ????
    198  3000 ????	       00 e2	   _E2	      =	$E2
    199  3000 ????
    200  3000 ????	       00 e0	   _E0	      =	$E0
    201  3000 ????
    202  3000 ????	       00 de	   _DE	      =	$DE
    203  3000 ????
    204  3000 ????	       00 dc	   _DC	      =	$DC
    205  3000 ????
    206  3000 ????	       00 da	   _DA	      =	$DA
    207  3000 ????
    208  3000 ????	       00 d8	   _D8	      =	$D8
    209  3000 ????
    210  3000 ????	       00 d6	   _D6	      =	$D6
    211  3000 ????
    212  3000 ????	       00 d4	   _D4	      =	$D4
    213  3000 ????
    214  3000 ????	       00 d2	   _D2	      =	$D2
    215  3000 ????
    216  3000 ????	       00 d0	   _D0	      =	$D0
    217  3000 ????
    218  3000 ????	       00 ce	   _CE	      =	$CE
    219  3000 ????
    220  3000 ????	       00 cc	   _CC	      =	$CC
    221  3000 ????
    222  3000 ????	       00 ca	   _CA	      =	$CA
    223  3000 ????
    224  3000 ????	       00 c8	   _C8	      =	$C8
    225  3000 ????
    226  3000 ????	       00 c6	   _C6	      =	$C6
    227  3000 ????
    228  3000 ????	       00 c4	   _C4	      =	$C4
    229  3000 ????
    230  3000 ????	       00 c2	   _C2	      =	$C2
    231  3000 ????
    232  3000 ????	       00 c0	   _C0	      =	$C0
    233  3000 ????
    234  3000 ????	       00 be	   _BE	      =	$BE
    235  3000 ????
    236  3000 ????	       00 bc	   _BC	      =	$BC
    237  3000 ????
    238  3000 ????	       00 ba	   _BA	      =	$BA
    239  3000 ????
    240  3000 ????	       00 b8	   _B8	      =	$B8
    241  3000 ????
    242  3000 ????	       00 b6	   _B6	      =	$B6
    243  3000 ????
    244  3000 ????	       00 b4	   _B4	      =	$B4
    245  3000 ????
    246  3000 ????	       00 b2	   _B2	      =	$B2
    247  3000 ????
    248  3000 ????	       00 b0	   _B0	      =	$B0
    249  3000 ????
    250  3000 ????	       00 ae	   _AE	      =	$AE
    251  3000 ????
    252  3000 ????	       00 ac	   _AC	      =	$AC
    253  3000 ????
    254  3000 ????	       00 aa	   _AA	      =	$AA
    255  3000 ????
    256  3000 ????	       00 a8	   _A8	      =	$A8
    257  3000 ????
    258  3000 ????	       00 a6	   _A6	      =	$A6
    259  3000 ????
    260  3000 ????	       00 a4	   _A4	      =	$A4
    261  3000 ????
    262  3000 ????	       00 a2	   _A2	      =	$A2
    263  3000 ????
    264  3000 ????	       00 a0	   _A0	      =	$A0
    265  3000 ????
    266  3000 ????	       00 9e	   _9E	      =	$9E
    267  3000 ????
    268  3000 ????	       00 9c	   _9C	      =	$9C
    269  3000 ????
    270  3000 ????	       00 9a	   _9A	      =	$9A
    271  3000 ????
    272  3000 ????	       00 98	   _98	      =	$98
    273  3000 ????
    274  3000 ????	       00 96	   _96	      =	$96
    275  3000 ????
    276  3000 ????	       00 94	   _94	      =	$94
    277  3000 ????
    278  3000 ????	       00 92	   _92	      =	$92
    279  3000 ????
    280  3000 ????	       00 90	   _90	      =	$90
    281  3000 ????
    282  3000 ????	       00 8e	   _8E	      =	$8E
    283  3000 ????
    284  3000 ????	       00 8c	   _8C	      =	$8C
    285  3000 ????
    286  3000 ????	       00 8a	   _8A	      =	$8A
    287  3000 ????
    288  3000 ????	       00 88	   _88	      =	$88
    289  3000 ????
    290  3000 ????	       00 86	   _86	      =	$86
    291  3000 ????
    292  3000 ????	       00 84	   _84	      =	$84
    293  3000 ????
    294  3000 ????	       00 82	   _82	      =	$82
    295  3000 ????
    296  3000 ????	       00 80	   _80	      =	$80
    297  3000 ????
    298  3000 ????	       00 7e	   _7E	      =	$7E
    299  3000 ????
    300  3000 ????	       00 7c	   _7C	      =	$7C
    301  3000 ????
    302  3000 ????	       00 7a	   _7A	      =	$7A
    303  3000 ????
    304  3000 ????	       00 78	   _78	      =	$78
    305  3000 ????
    306  3000 ????	       00 76	   _76	      =	$76
    307  3000 ????
    308  3000 ????	       00 74	   _74	      =	$74
    309  3000 ????
    310  3000 ????	       00 72	   _72	      =	$72
    311  3000 ????
    312  3000 ????	       00 70	   _70	      =	$70
    313  3000 ????
    314  3000 ????	       00 6e	   _6E	      =	$6E
    315  3000 ????
    316  3000 ????	       00 6c	   _6C	      =	$6C
    317  3000 ????
    318  3000 ????	       00 6a	   _6A	      =	$6A
    319  3000 ????
    320  3000 ????	       00 68	   _68	      =	$68
    321  3000 ????
    322  3000 ????	       00 66	   _66	      =	$66
    323  3000 ????
    324  3000 ????	       00 64	   _64	      =	$64
    325  3000 ????
    326  3000 ????	       00 62	   _62	      =	$62
    327  3000 ????
    328  3000 ????	       00 60	   _60	      =	$60
    329  3000 ????
    330  3000 ????	       00 5e	   _5E	      =	$5E
    331  3000 ????
    332  3000 ????	       00 5c	   _5C	      =	$5C
    333  3000 ????
    334  3000 ????	       00 5a	   _5A	      =	$5A
    335  3000 ????
    336  3000 ????	       00 58	   _58	      =	$58
    337  3000 ????
    338  3000 ????	       00 56	   _56	      =	$56
    339  3000 ????
    340  3000 ????	       00 54	   _54	      =	$54
    341  3000 ????
    342  3000 ????	       00 52	   _52	      =	$52
    343  3000 ????
    344  3000 ????	       00 50	   _50	      =	$50
    345  3000 ????
    346  3000 ????	       00 4e	   _4E	      =	$4E
    347  3000 ????
    348  3000 ????	       00 4c	   _4C	      =	$4C
    349  3000 ????
    350  3000 ????	       00 4a	   _4A	      =	$4A
    351  3000 ????
    352  3000 ????	       00 48	   _48	      =	$48
    353  3000 ????
    354  3000 ????	       00 46	   _46	      =	$46
    355  3000 ????
    356  3000 ????	       00 44	   _44	      =	$44
    357  3000 ????
    358  3000 ????	       00 42	   _42	      =	$42
    359  3000 ????
    360  3000 ????	       00 40	   _40	      =	$40
    361  3000 ????
    362  3000 ????	       00 3e	   _3E	      =	$3E
    363  3000 ????
    364  3000 ????	       00 3c	   _3C	      =	$3C
    365  3000 ????
    366  3000 ????	       00 3a	   _3A	      =	$3A
    367  3000 ????
    368  3000 ????	       00 38	   _38	      =	$38
    369  3000 ????
    370  3000 ????	       00 36	   _36	      =	$36
    371  3000 ????
    372  3000 ????	       00 34	   _34	      =	$34
    373  3000 ????
    374  3000 ????	       00 32	   _32	      =	$32
    375  3000 ????
    376  3000 ????	       00 30	   _30	      =	$30
    377  3000 ????
    378  3000 ????	       00 2e	   _2E	      =	$2E
    379  3000 ????
    380  3000 ????	       00 2c	   _2C	      =	$2C
    381  3000 ????
    382  3000 ????	       00 2a	   _2A	      =	$2A
    383  3000 ????
    384  3000 ????	       00 28	   _28	      =	$28
    385  3000 ????
    386  3000 ????	       00 26	   _26	      =	$26
    387  3000 ????
    388  3000 ????	       00 24	   _24	      =	$24
    389  3000 ????
    390  3000 ????	       00 22	   _22	      =	$22
    391  3000 ????
    392  3000 ????	       00 20	   _20	      =	$20
    393  3000 ????
    394  3000 ????	       00 1e	   _1E	      =	$1E
    395  3000 ????
    396  3000 ????	       00 1c	   _1C	      =	$1C
    397  3000 ????
    398  3000 ????	       00 1a	   _1A	      =	$1A
    399  3000 ????
    400  3000 ????	       00 18	   _18	      =	$18
    401  3000 ????
    402  3000 ????	       00 16	   _16	      =	$16
    403  3000 ????
    404  3000 ????	       00 14	   _14	      =	$14
    405  3000 ????
    406  3000 ????	       00 12	   _12	      =	$12
    407  3000 ????
    408  3000 ????	       00 10	   _10	      =	$10
    409  3000 ????
    410  3000 ????	       00 0e	   _0E	      =	$0E
    411  3000 ????
    412  3000 ????	       00 0c	   _0C	      =	$0C
    413  3000 ????
    414  3000 ????	       00 0a	   _0A	      =	$0A
    415  3000 ????
    416  3000 ????	       00 08	   _08	      =	$08
    417  3000 ????
    418  3000 ????	       00 06	   _06	      =	$06
    419  3000 ????
    420  3000 ????	       00 04	   _04	      =	$04
    421  3000 ????
    422  3000 ????	       00 02	   _02	      =	$02
    423  3000 ????
    424  3000 ????	       00 00	   _00	      =	$00
    425  3000 ????
    426  3000 ????	       00 09	   req_load_menu =	9
    427  3000 ????
    428  3000 ????	       00 08	   req_safe_point =	8
    429  3000 ????
    430  3000 ????	       00 07	   req_level_reset =	7
    431  3000 ????
    432  3000 ????	       00 06	   req_move_down =	6
    433  3000 ????
    434  3000 ????	       00 05	   req_move_right =	5
    435  3000 ????
    436  3000 ????	       00 04	   req_move_up =	4
    437  3000 ????
    438  3000 ????	       00 03	   req_move_left =	3
    439  3000 ????
    440  3000 ????	       00 02	   req_game_over =	2
    441  3000 ????
    442  3000 ????	       00 01	   req_level_up =	1
    443  3000 ????
    444  3000 ????	       00 00	   req_load   =	0
    445  3000 ????
    446  3000 ????	       00 06	   response_menu_size =	6
    447  3000 ????
    448  3000 ????	       00 1a	   response_size_minus_1 =	26
    449  3000 ????
    450  3000 ????	       00 08	   scback     =	#$08
    451  3000 ????
    452  3000 ????	       00 94	   _M_Edge_Right =	148
    453  3000 ????
    454  3000 ????	       00 0e	   _M_Edge_Left =	14
    455  3000 ????
    456  3000 ????	       00 58	   _M_Edge_Bottom =	88
    457  3000 ????
    458  3000 ????	       00 02	   _M_Edge_Top =	2
    459  3000 ????
    460  3000 ????	       00 4c	   player_max_y =	76
    461  3000 ????
    462  3000 ????	       00 02	   player_min_y =	2
    463  3000 ????
    464  3000 ????	       00 86	   player_max_x =	134
    465  3000 ????
    466  3000 ????	       00 0a	   player_min_x =	10
    467  3000 ????
    468  3000 ????	       00 01	   pfscore    =	1
    469  3000 ????
    470  3000 ????	       00 04	   pfres      =	4
    471  3000 ????
    472  3000 ????	       00 01	   superchip  =	1
    473  3000 ????	       00 01	   bs_mask    =	1
    474  3000 ????	       00 08	   bankswitch =	8
    475  3000 ????	       1f f8	   bankswitch_hotspot =	$1FF8
    476  3000 ????	       00 01	   PFcolors   =	1
    477  3000 ????	       00 01	   player1colors =	1
------- FILE d:\Firmaplus\Firmaplus_intern\Atari\PlusROM\Projekte-batariBasic\CaveApocalypse\C.A.V.E. Apocalypse.bas.asm
      8  3000 ????				      ifconst	bankswitch
      9  3000 ????				      if	bankswitch == 8
     10  1000					      ORG	$1000
     11  1000					      RORG	$D000
     12  1000					      endif
     13  1000				  -	      if	bankswitch == 16
     14  1000				  -	      ORG	$1000
     15  1000				  -	      RORG	$9000
     16  1000					      endif
     17  1000				  -	      if	bankswitch == 32
     18  1000				  -	      ORG	$1000
     19  1000				  -	      RORG	$1000
     20  1000					      endif
     21  1000				  -	      if	bankswitch == 64
     22  1000				  -	      ORG	$1000
     23  1000				  -	      RORG	$1000
     24  1000					      endif
     25  1000				  -	      else
     26  1000				  -	      ORG	$F000
     27  1000					      endif
     28  1000					      repeat	256
     29  1000		       ff		      .byte.b	$ff
     28  1000					      repend
     29  1001		       ff		      .byte.b	$ff
     28  1001					      repend
     29  1002		       ff		      .byte.b	$ff
     28  1002					      repend
     29  1003		       ff		      .byte.b	$ff
     28  1003					      repend
     29  1004		       ff		      .byte.b	$ff
     28  1004					      repend
     29  1005		       ff		      .byte.b	$ff
     28  1005					      repend
     29  1006		       ff		      .byte.b	$ff
     28  1006					      repend
     29  1007		       ff		      .byte.b	$ff
     28  1007					      repend
     29  1008		       ff		      .byte.b	$ff
     28  1008					      repend
     29  1009		       ff		      .byte.b	$ff
     28  1009					      repend
     29  100a		       ff		      .byte.b	$ff
     28  100a					      repend
     29  100b		       ff		      .byte.b	$ff
     28  100b					      repend
     29  100c		       ff		      .byte.b	$ff
     28  100c					      repend
     29  100d		       ff		      .byte.b	$ff
     28  100d					      repend
     29  100e		       ff		      .byte.b	$ff
     28  100e					      repend
     29  100f		       ff		      .byte.b	$ff
     28  100f					      repend
     29  1010		       ff		      .byte.b	$ff
     28  1010					      repend
     29  1011		       ff		      .byte.b	$ff
     28  1011					      repend
     29  1012		       ff		      .byte.b	$ff
     28  1012					      repend
     29  1013		       ff		      .byte.b	$ff
     28  1013					      repend
     29  1014		       ff		      .byte.b	$ff
     28  1014					      repend
     29  1015		       ff		      .byte.b	$ff
     28  1015					      repend
     29  1016		       ff		      .byte.b	$ff
     28  1016					      repend
     29  1017		       ff		      .byte.b	$ff
     28  1017					      repend
     29  1018		       ff		      .byte.b	$ff
     28  1018					      repend
     29  1019		       ff		      .byte.b	$ff
     28  1019					      repend
     29  101a		       ff		      .byte.b	$ff
     28  101a					      repend
     29  101b		       ff		      .byte.b	$ff
     28  101b					      repend
     29  101c		       ff		      .byte.b	$ff
     28  101c					      repend
     29  101d		       ff		      .byte.b	$ff
     28  101d					      repend
     29  101e		       ff		      .byte.b	$ff
     28  101e					      repend
     29  101f		       ff		      .byte.b	$ff
     28  101f					      repend
     29  1020		       ff		      .byte.b	$ff
     28  1020					      repend
     29  1021		       ff		      .byte.b	$ff
     28  1021					      repend
     29  1022		       ff		      .byte.b	$ff
     28  1022					      repend
     29  1023		       ff		      .byte.b	$ff
     28  1023					      repend
     29  1024		       ff		      .byte.b	$ff
     28  1024					      repend
     29  1025		       ff		      .byte.b	$ff
     28  1025					      repend
     29  1026		       ff		      .byte.b	$ff
     28  1026					      repend
     29  1027		       ff		      .byte.b	$ff
     28  1027					      repend
     29  1028		       ff		      .byte.b	$ff
     28  1028					      repend
     29  1029		       ff		      .byte.b	$ff
     28  1029					      repend
     29  102a		       ff		      .byte.b	$ff
     28  102a					      repend
     29  102b		       ff		      .byte.b	$ff
     28  102b					      repend
     29  102c		       ff		      .byte.b	$ff
     28  102c					      repend
     29  102d		       ff		      .byte.b	$ff
     28  102d					      repend
     29  102e		       ff		      .byte.b	$ff
     28  102e					      repend
     29  102f		       ff		      .byte.b	$ff
     28  102f					      repend
     29  1030		       ff		      .byte.b	$ff
     28  1030					      repend
     29  1031		       ff		      .byte.b	$ff
     28  1031					      repend
     29  1032		       ff		      .byte.b	$ff
     28  1032					      repend
     29  1033		       ff		      .byte.b	$ff
     28  1033					      repend
     29  1034		       ff		      .byte.b	$ff
     28  1034					      repend
     29  1035		       ff		      .byte.b	$ff
     28  1035					      repend
     29  1036		       ff		      .byte.b	$ff
     28  1036					      repend
     29  1037		       ff		      .byte.b	$ff
     28  1037					      repend
     29  1038		       ff		      .byte.b	$ff
     28  1038					      repend
     29  1039		       ff		      .byte.b	$ff
     28  1039					      repend
     29  103a		       ff		      .byte.b	$ff
     28  103a					      repend
     29  103b		       ff		      .byte.b	$ff
     28  103b					      repend
     29  103c		       ff		      .byte.b	$ff
     28  103c					      repend
     29  103d		       ff		      .byte.b	$ff
     28  103d					      repend
     29  103e		       ff		      .byte.b	$ff
     28  103e					      repend
     29  103f		       ff		      .byte.b	$ff
     28  103f					      repend
     29  1040		       ff		      .byte.b	$ff
     28  1040					      repend
     29  1041		       ff		      .byte.b	$ff
     28  1041					      repend
     29  1042		       ff		      .byte.b	$ff
     28  1042					      repend
     29  1043		       ff		      .byte.b	$ff
     28  1043					      repend
     29  1044		       ff		      .byte.b	$ff
     28  1044					      repend
     29  1045		       ff		      .byte.b	$ff
     28  1045					      repend
     29  1046		       ff		      .byte.b	$ff
     28  1046					      repend
     29  1047		       ff		      .byte.b	$ff
     28  1047					      repend
     29  1048		       ff		      .byte.b	$ff
     28  1048					      repend
     29  1049		       ff		      .byte.b	$ff
     28  1049					      repend
     29  104a		       ff		      .byte.b	$ff
     28  104a					      repend
     29  104b		       ff		      .byte.b	$ff
     28  104b					      repend
     29  104c		       ff		      .byte.b	$ff
     28  104c					      repend
     29  104d		       ff		      .byte.b	$ff
     28  104d					      repend
     29  104e		       ff		      .byte.b	$ff
     28  104e					      repend
     29  104f		       ff		      .byte.b	$ff
     28  104f					      repend
     29  1050		       ff		      .byte.b	$ff
     28  1050					      repend
     29  1051		       ff		      .byte.b	$ff
     28  1051					      repend
     29  1052		       ff		      .byte.b	$ff
     28  1052					      repend
     29  1053		       ff		      .byte.b	$ff
     28  1053					      repend
     29  1054		       ff		      .byte.b	$ff
     28  1054					      repend
     29  1055		       ff		      .byte.b	$ff
     28  1055					      repend
     29  1056		       ff		      .byte.b	$ff
     28  1056					      repend
     29  1057		       ff		      .byte.b	$ff
     28  1057					      repend
     29  1058		       ff		      .byte.b	$ff
     28  1058					      repend
     29  1059		       ff		      .byte.b	$ff
     28  1059					      repend
     29  105a		       ff		      .byte.b	$ff
     28  105a					      repend
     29  105b		       ff		      .byte.b	$ff
     28  105b					      repend
     29  105c		       ff		      .byte.b	$ff
     28  105c					      repend
     29  105d		       ff		      .byte.b	$ff
     28  105d					      repend
     29  105e		       ff		      .byte.b	$ff
     28  105e					      repend
     29  105f		       ff		      .byte.b	$ff
     28  105f					      repend
     29  1060		       ff		      .byte.b	$ff
     28  1060					      repend
     29  1061		       ff		      .byte.b	$ff
     28  1061					      repend
     29  1062		       ff		      .byte.b	$ff
     28  1062					      repend
     29  1063		       ff		      .byte.b	$ff
     28  1063					      repend
     29  1064		       ff		      .byte.b	$ff
     28  1064					      repend
     29  1065		       ff		      .byte.b	$ff
     28  1065					      repend
     29  1066		       ff		      .byte.b	$ff
     28  1066					      repend
     29  1067		       ff		      .byte.b	$ff
     28  1067					      repend
     29  1068		       ff		      .byte.b	$ff
     28  1068					      repend
     29  1069		       ff		      .byte.b	$ff
     28  1069					      repend
     29  106a		       ff		      .byte.b	$ff
     28  106a					      repend
     29  106b		       ff		      .byte.b	$ff
     28  106b					      repend
     29  106c		       ff		      .byte.b	$ff
     28  106c					      repend
     29  106d		       ff		      .byte.b	$ff
     28  106d					      repend
     29  106e		       ff		      .byte.b	$ff
     28  106e					      repend
     29  106f		       ff		      .byte.b	$ff
     28  106f					      repend
     29  1070		       ff		      .byte.b	$ff
     28  1070					      repend
     29  1071		       ff		      .byte.b	$ff
     28  1071					      repend
     29  1072		       ff		      .byte.b	$ff
     28  1072					      repend
     29  1073		       ff		      .byte.b	$ff
     28  1073					      repend
     29  1074		       ff		      .byte.b	$ff
     28  1074					      repend
     29  1075		       ff		      .byte.b	$ff
     28  1075					      repend
     29  1076		       ff		      .byte.b	$ff
     28  1076					      repend
     29  1077		       ff		      .byte.b	$ff
     28  1077					      repend
     29  1078		       ff		      .byte.b	$ff
     28  1078					      repend
     29  1079		       ff		      .byte.b	$ff
     28  1079					      repend
     29  107a		       ff		      .byte.b	$ff
     28  107a					      repend
     29  107b		       ff		      .byte.b	$ff
     28  107b					      repend
     29  107c		       ff		      .byte.b	$ff
     28  107c					      repend
     29  107d		       ff		      .byte.b	$ff
     28  107d					      repend
     29  107e		       ff		      .byte.b	$ff
     28  107e					      repend
     29  107f		       ff		      .byte.b	$ff
     28  107f					      repend
     29  1080		       ff		      .byte.b	$ff
     28  1080					      repend
     29  1081		       ff		      .byte.b	$ff
     28  1081					      repend
     29  1082		       ff		      .byte.b	$ff
     28  1082					      repend
     29  1083		       ff		      .byte.b	$ff
     28  1083					      repend
     29  1084		       ff		      .byte.b	$ff
     28  1084					      repend
     29  1085		       ff		      .byte.b	$ff
     28  1085					      repend
     29  1086		       ff		      .byte.b	$ff
     28  1086					      repend
     29  1087		       ff		      .byte.b	$ff
     28  1087					      repend
     29  1088		       ff		      .byte.b	$ff
     28  1088					      repend
     29  1089		       ff		      .byte.b	$ff
     28  1089					      repend
     29  108a		       ff		      .byte.b	$ff
     28  108a					      repend
     29  108b		       ff		      .byte.b	$ff
     28  108b					      repend
     29  108c		       ff		      .byte.b	$ff
     28  108c					      repend
     29  108d		       ff		      .byte.b	$ff
     28  108d					      repend
     29  108e		       ff		      .byte.b	$ff
     28  108e					      repend
     29  108f		       ff		      .byte.b	$ff
     28  108f					      repend
     29  1090		       ff		      .byte.b	$ff
     28  1090					      repend
     29  1091		       ff		      .byte.b	$ff
     28  1091					      repend
     29  1092		       ff		      .byte.b	$ff
     28  1092					      repend
     29  1093		       ff		      .byte.b	$ff
     28  1093					      repend
     29  1094		       ff		      .byte.b	$ff
     28  1094					      repend
     29  1095		       ff		      .byte.b	$ff
     28  1095					      repend
     29  1096		       ff		      .byte.b	$ff
     28  1096					      repend
     29  1097		       ff		      .byte.b	$ff
     28  1097					      repend
     29  1098		       ff		      .byte.b	$ff
     28  1098					      repend
     29  1099		       ff		      .byte.b	$ff
     28  1099					      repend
     29  109a		       ff		      .byte.b	$ff
     28  109a					      repend
     29  109b		       ff		      .byte.b	$ff
     28  109b					      repend
     29  109c		       ff		      .byte.b	$ff
     28  109c					      repend
     29  109d		       ff		      .byte.b	$ff
     28  109d					      repend
     29  109e		       ff		      .byte.b	$ff
     28  109e					      repend
     29  109f		       ff		      .byte.b	$ff
     28  109f					      repend
     29  10a0		       ff		      .byte.b	$ff
     28  10a0					      repend
     29  10a1		       ff		      .byte.b	$ff
     28  10a1					      repend
     29  10a2		       ff		      .byte.b	$ff
     28  10a2					      repend
     29  10a3		       ff		      .byte.b	$ff
     28  10a3					      repend
     29  10a4		       ff		      .byte.b	$ff
     28  10a4					      repend
     29  10a5		       ff		      .byte.b	$ff
     28  10a5					      repend
     29  10a6		       ff		      .byte.b	$ff
     28  10a6					      repend
     29  10a7		       ff		      .byte.b	$ff
     28  10a7					      repend
     29  10a8		       ff		      .byte.b	$ff
     28  10a8					      repend
     29  10a9		       ff		      .byte.b	$ff
     28  10a9					      repend
     29  10aa		       ff		      .byte.b	$ff
     28  10aa					      repend
     29  10ab		       ff		      .byte.b	$ff
     28  10ab					      repend
     29  10ac		       ff		      .byte.b	$ff
     28  10ac					      repend
     29  10ad		       ff		      .byte.b	$ff
     28  10ad					      repend
     29  10ae		       ff		      .byte.b	$ff
     28  10ae					      repend
     29  10af		       ff		      .byte.b	$ff
     28  10af					      repend
     29  10b0		       ff		      .byte.b	$ff
     28  10b0					      repend
     29  10b1		       ff		      .byte.b	$ff
     28  10b1					      repend
     29  10b2		       ff		      .byte.b	$ff
     28  10b2					      repend
     29  10b3		       ff		      .byte.b	$ff
     28  10b3					      repend
     29  10b4		       ff		      .byte.b	$ff
     28  10b4					      repend
     29  10b5		       ff		      .byte.b	$ff
     28  10b5					      repend
     29  10b6		       ff		      .byte.b	$ff
     28  10b6					      repend
     29  10b7		       ff		      .byte.b	$ff
     28  10b7					      repend
     29  10b8		       ff		      .byte.b	$ff
     28  10b8					      repend
     29  10b9		       ff		      .byte.b	$ff
     28  10b9					      repend
     29  10ba		       ff		      .byte.b	$ff
     28  10ba					      repend
     29  10bb		       ff		      .byte.b	$ff
     28  10bb					      repend
     29  10bc		       ff		      .byte.b	$ff
     28  10bc					      repend
     29  10bd		       ff		      .byte.b	$ff
     28  10bd					      repend
     29  10be		       ff		      .byte.b	$ff
     28  10be					      repend
     29  10bf		       ff		      .byte.b	$ff
     28  10bf					      repend
     29  10c0		       ff		      .byte.b	$ff
     28  10c0					      repend
     29  10c1		       ff		      .byte.b	$ff
     28  10c1					      repend
     29  10c2		       ff		      .byte.b	$ff
     28  10c2					      repend
     29  10c3		       ff		      .byte.b	$ff
     28  10c3					      repend
     29  10c4		       ff		      .byte.b	$ff
     28  10c4					      repend
     29  10c5		       ff		      .byte.b	$ff
     28  10c5					      repend
     29  10c6		       ff		      .byte.b	$ff
     28  10c6					      repend
     29  10c7		       ff		      .byte.b	$ff
     28  10c7					      repend
     29  10c8		       ff		      .byte.b	$ff
     28  10c8					      repend
     29  10c9		       ff		      .byte.b	$ff
     28  10c9					      repend
     29  10ca		       ff		      .byte.b	$ff
     28  10ca					      repend
     29  10cb		       ff		      .byte.b	$ff
     28  10cb					      repend
     29  10cc		       ff		      .byte.b	$ff
     28  10cc					      repend
     29  10cd		       ff		      .byte.b	$ff
     28  10cd					      repend
     29  10ce		       ff		      .byte.b	$ff
     28  10ce					      repend
     29  10cf		       ff		      .byte.b	$ff
     28  10cf					      repend
     29  10d0		       ff		      .byte.b	$ff
     28  10d0					      repend
     29  10d1		       ff		      .byte.b	$ff
     28  10d1					      repend
     29  10d2		       ff		      .byte.b	$ff
     28  10d2					      repend
     29  10d3		       ff		      .byte.b	$ff
     28  10d3					      repend
     29  10d4		       ff		      .byte.b	$ff
     28  10d4					      repend
     29  10d5		       ff		      .byte.b	$ff
     28  10d5					      repend
     29  10d6		       ff		      .byte.b	$ff
     28  10d6					      repend
     29  10d7		       ff		      .byte.b	$ff
     28  10d7					      repend
     29  10d8		       ff		      .byte.b	$ff
     28  10d8					      repend
     29  10d9		       ff		      .byte.b	$ff
     28  10d9					      repend
     29  10da		       ff		      .byte.b	$ff
     28  10da					      repend
     29  10db		       ff		      .byte.b	$ff
     28  10db					      repend
     29  10dc		       ff		      .byte.b	$ff
     28  10dc					      repend
     29  10dd		       ff		      .byte.b	$ff
     28  10dd					      repend
     29  10de		       ff		      .byte.b	$ff
     28  10de					      repend
     29  10df		       ff		      .byte.b	$ff
     28  10df					      repend
     29  10e0		       ff		      .byte.b	$ff
     28  10e0					      repend
     29  10e1		       ff		      .byte.b	$ff
     28  10e1					      repend
     29  10e2		       ff		      .byte.b	$ff
     28  10e2					      repend
     29  10e3		       ff		      .byte.b	$ff
     28  10e3					      repend
     29  10e4		       ff		      .byte.b	$ff
     28  10e4					      repend
     29  10e5		       ff		      .byte.b	$ff
     28  10e5					      repend
     29  10e6		       ff		      .byte.b	$ff
     28  10e6					      repend
     29  10e7		       ff		      .byte.b	$ff
     28  10e7					      repend
     29  10e8		       ff		      .byte.b	$ff
     28  10e8					      repend
     29  10e9		       ff		      .byte.b	$ff
     28  10e9					      repend
     29  10ea		       ff		      .byte.b	$ff
     28  10ea					      repend
     29  10eb		       ff		      .byte.b	$ff
     28  10eb					      repend
     29  10ec		       ff		      .byte.b	$ff
     28  10ec					      repend
     29  10ed		       ff		      .byte.b	$ff
     28  10ed					      repend
     29  10ee		       ff		      .byte.b	$ff
     28  10ee					      repend
     29  10ef		       ff		      .byte.b	$ff
     28  10ef					      repend
     29  10f0		       ff		      .byte.b	$ff
     28  10f0					      repend
     29  10f1		       ff		      .byte.b	$ff
     28  10f1					      repend
     29  10f2		       ff		      .byte.b	$ff
     28  10f2					      repend
     29  10f3		       ff		      .byte.b	$ff
     28  10f3					      repend
     29  10f4		       ff		      .byte.b	$ff
     28  10f4					      repend
     29  10f5		       ff		      .byte.b	$ff
     28  10f5					      repend
     29  10f6		       ff		      .byte.b	$ff
     28  10f6					      repend
     29  10f7		       ff		      .byte.b	$ff
     28  10f7					      repend
     29  10f8		       ff		      .byte.b	$ff
     28  10f8					      repend
     29  10f9		       ff		      .byte.b	$ff
     28  10f9					      repend
     29  10fa		       ff		      .byte.b	$ff
     28  10fa					      repend
     29  10fb		       ff		      .byte.b	$ff
     28  10fb					      repend
     29  10fc		       ff		      .byte.b	$ff
     28  10fc					      repend
     29  10fd		       ff		      .byte.b	$ff
     28  10fd					      repend
     29  10fe		       ff		      .byte.b	$ff
     28  10fe					      repend
     29  10ff		       ff		      .byte.b	$ff
     30  1100					      repend
     31  1100				   game
     32  1100				   .L00 		;  inline PlusROM_functions.asm
     33  1100
------- FILE PlusROM_functions.asm LEVEL 2 PASS 3
      0  1100					      include	PlusROM_functions.asm
      1  1100		       00 01	   PlusROM_functions =	1
      2  1100		       1f f0	   WriteToBuffer =	$1ff0
      3  1100		       1f f1	   WriteSendBuffer =	$1ff1
      4  1100		       1f f2	   ReceiveBuffer =	$1ff2
      5  1100		       1f f3	   ReceiveBufferSize =	$1ff3
      6  1100
      7  1100					      MAC	set_plusrom_api
      8  1100				   PlusROM_API
      9  1100					      .byte	{1}, 0, {2}, 0
     10  1100					      ENDM		; {1} = path, {2} = domain
     11  1100
------- FILE d:\Firmaplus\Firmaplus_intern\Atari\PlusROM\Projekte-batariBasic\CaveApocalypse\C.A.V.E. Apocalypse.bas.asm
     35  1100
     36  1100				   .
     37  1100							; 
     38  1100
     39  1100				   .L01 		;  set kernel_options pfcolors player1colors
     40  1100
     41  1100				   .L02 		;  set romsize 8kSC
     42  1100
     43  1100				   .L03 		;  set smartbranching on
     44  1100
     45  1100				   .
     46  1100							; 
     47  1100
     48  1100				   .L04 		;  const pfres = 4
     49  1100
     50  1100				   .L05 		;  const pfscore  =  1
     51  1100
     52  1100				   .
     53  1100							; 
     54  1100
     55  1100				   .L06 		;  rem gravity is acceleration (https://atariage.com/forums/topic/226881-gravity/?do=findComment&comment=3017307)
     56  1100
     57  1100				   .L07 		;  rem the smallest fraction is 1/256 rounded up here to 0.004
     58  1100
     59  1100				   .L08 		;  rem assuming gravity is applied each drawscreen this should
     60  1100
     61  1100				   .L09 		;  rem work out to ~7 pixels in 1 second, 28 pixels in 2 seconds
     62  1100
     63  1100				   .L010		;  rem 63 pixels in 3 seconds
     64  1100
     65  1100							;.gravity_player1.0.004.
     66  1100				   .L011		;  def gravity_player1 = 0.004
     67  1100
     68  1100							;.gravity_missile0.0.024.
     69  1100				   .L012		;  def gravity_missile0 = 0.024
     70  1100
     71  1100				   .
     72  1100							; 
     73  1100
     74  1100				   .L013		;  const player_min_x	=  10
     75  1100
     76  1100				   .L014		;  const player_max_x	=  134
     77  1100
     78  1100				   .L015		;  const player_min_y	=  2
     79  1100
     80  1100				   .L016		;  const player_max_y	=  76
     81  1100
     82  1100				   .L017		;  const _M_Edge_Top  =  2
     83  1100
     84  1100				   .L018		;  const _M_Edge_Bottom  =  88
     85  1100
     86  1100				   .L019		;  const _M_Edge_Left	=  14
     87  1100
     88  1100				   .L020		;  const _M_Edge_Right  =  148
     89  1100
     90  1100				   .
     91  1100							; 
     92  1100
     93  1100				   .L021		;  const scback  =  #$08
     94  1100
     95  1100				   .
     96  1100							; 
     97  1100
     98  1100				   .L022		;  const response_size_minus_1  =  26
     99  1100
    100  1100				   .L023		;  const response_menu_size  =  6
    101  1100
    102  1100				   .
    103  1100							; 
    104  1100
    105  1100				   .
    106  1100							; 
    107  1100
    108  1100				   .
    109  1100							; 
    110  1100
    111  1100				   .
    112  1100							; 
    113  1100
    114  1100				   .L024		;  const req_load  =  0
    115  1100
    116  1100				   .L025		;  const req_level_up	=  1
    117  1100
    118  1100				   .L026		;  const req_game_over  =  2
    119  1100
    120  1100				   .L027		;  const req_move_left  =  3
    121  1100
    122  1100				   .L028		;  const req_move_up  =  4
    123  1100
    124  1100				   .L029		;  const req_move_right  =  5
    125  1100
    126  1100				   .L030		;  const req_move_down  =  6
    127  1100
    128  1100				   .L031		;  const req_level_reset  =  7
    129  1100
    130  1100				   .L032		;  const req_safe_point  =  8
    131  1100
    132  1100				   .L033		;  const req_load_menu  =  9
    133  1100
    134  1100				   .
    135  1100							; 
    136  1100
    137  1100				   .L034		;  const _00  =  $00
    138  1100
    139  1100				   .L035		;  const _02  =  $02
    140  1100
    141  1100				   .L036		;  const _04  =  $04
    142  1100
    143  1100				   .L037		;  const _06  =  $06
    144  1100
    145  1100				   .L038		;  const _08  =  $08
    146  1100
    147  1100				   .L039		;  const _0A  =  $0A
    148  1100
    149  1100				   .L040		;  const _0C  =  $0C
    150  1100
    151  1100				   .L041		;  const _0E  =  $0E
    152  1100
    153  1100				   .L042		;  const _10  =  $10
    154  1100
    155  1100				   .L043		;  const _12  =  $12
    156  1100
    157  1100				   .L044		;  const _14  =  $14
    158  1100
    159  1100				   .L045		;  const _16  =  $16
    160  1100
    161  1100				   .L046		;  const _18  =  $18
    162  1100
    163  1100				   .L047		;  const _1A  =  $1A
    164  1100
    165  1100				   .L048		;  const _1C  =  $1C
    166  1100
    167  1100				   .L049		;  const _1E  =  $1E
    168  1100
    169  1100				   .L050		;  const _20  =  $20
    170  1100
    171  1100				   .L051		;  const _22  =  $22
    172  1100
    173  1100				   .L052		;  const _24  =  $24
    174  1100
    175  1100				   .L053		;  const _26  =  $26
    176  1100
    177  1100				   .L054		;  const _28  =  $28
    178  1100
    179  1100				   .L055		;  const _2A  =  $2A
    180  1100
    181  1100				   .L056		;  const _2C  =  $2C
    182  1100
    183  1100				   .L057		;  const _2E  =  $2E
    184  1100
    185  1100				   .L058		;  const _30  =  $30
    186  1100
    187  1100				   .L059		;  const _32  =  $32
    188  1100
    189  1100				   .L060		;  const _34  =  $34
    190  1100
    191  1100				   .L061		;  const _36  =  $36
    192  1100
    193  1100				   .L062		;  const _38  =  $38
    194  1100
    195  1100				   .L063		;  const _3A  =  $3A
    196  1100
    197  1100				   .L064		;  const _3C  =  $3C
    198  1100
    199  1100				   .L065		;  const _3E  =  $3E
    200  1100
    201  1100				   .L066		;  const _40  =  $40
    202  1100
    203  1100				   .L067		;  const _42  =  $42
    204  1100
    205  1100				   .L068		;  const _44  =  $44
    206  1100
    207  1100				   .L069		;  const _46  =  $46
    208  1100
    209  1100				   .L070		;  const _48  =  $48
    210  1100
    211  1100				   .L071		;  const _4A  =  $4A
    212  1100
    213  1100				   .L072		;  const _4C  =  $4C
    214  1100
    215  1100				   .L073		;  const _4E  =  $4E
    216  1100
    217  1100				   .L074		;  const _50  =  $50
    218  1100
    219  1100				   .L075		;  const _52  =  $52
    220  1100
    221  1100				   .L076		;  const _54  =  $54
    222  1100
    223  1100				   .L077		;  const _56  =  $56
    224  1100
    225  1100				   .L078		;  const _58  =  $58
    226  1100
    227  1100				   .L079		;  const _5A  =  $5A
    228  1100
    229  1100				   .L080		;  const _5C  =  $5C
    230  1100
    231  1100				   .L081		;  const _5E  =  $5E
    232  1100
    233  1100				   .L082		;  const _60  =  $60
    234  1100
    235  1100				   .L083		;  const _62  =  $62
    236  1100
    237  1100				   .L084		;  const _64  =  $64
    238  1100
    239  1100				   .L085		;  const _66  =  $66
    240  1100
    241  1100				   .L086		;  const _68  =  $68
    242  1100
    243  1100				   .L087		;  const _6A  =  $6A
    244  1100
    245  1100				   .L088		;  const _6C  =  $6C
    246  1100
    247  1100				   .L089		;  const _6E  =  $6E
    248  1100
    249  1100				   .L090		;  const _70  =  $70
    250  1100
    251  1100				   .L091		;  const _72  =  $72
    252  1100
    253  1100				   .L092		;  const _74  =  $74
    254  1100
    255  1100				   .L093		;  const _76  =  $76
    256  1100
    257  1100				   .L094		;  const _78  =  $78
    258  1100
    259  1100				   .L095		;  const _7A  =  $7A
    260  1100
    261  1100				   .L096		;  const _7C  =  $7C
    262  1100
    263  1100				   .L097		;  const _7E  =  $7E
    264  1100
    265  1100				   .L098		;  const _80  =  $80
    266  1100
    267  1100				   .L099		;  const _82  =  $82
    268  1100
    269  1100				   .L0100		;  const _84  =  $84
    270  1100
    271  1100				   .L0101		;  const _86  =  $86
    272  1100
    273  1100				   .L0102		;  const _88  =  $88
    274  1100
    275  1100				   .L0103		;  const _8A  =  $8A
    276  1100
    277  1100				   .L0104		;  const _8C  =  $8C
    278  1100
    279  1100				   .L0105		;  const _8E  =  $8E
    280  1100
    281  1100				   .L0106		;  const _90  =  $90
    282  1100
    283  1100				   .L0107		;  const _92  =  $92
    284  1100
    285  1100				   .L0108		;  const _94  =  $94
    286  1100
    287  1100				   .L0109		;  const _96  =  $96
    288  1100
    289  1100				   .L0110		;  const _98  =  $98
    290  1100
    291  1100				   .L0111		;  const _9A  =  $9A
    292  1100
    293  1100				   .L0112		;  const _9C  =  $9C
    294  1100
    295  1100				   .L0113		;  const _9E  =  $9E
    296  1100
    297  1100				   .L0114		;  const _A0  =  $A0
    298  1100
    299  1100				   .L0115		;  const _A2  =  $A2
    300  1100
    301  1100				   .L0116		;  const _A4  =  $A4
    302  1100
    303  1100				   .L0117		;  const _A6  =  $A6
    304  1100
    305  1100				   .L0118		;  const _A8  =  $A8
    306  1100
    307  1100				   .L0119		;  const _AA  =  $AA
    308  1100
    309  1100				   .L0120		;  const _AC  =  $AC
    310  1100
    311  1100				   .L0121		;  const _AE  =  $AE
    312  1100
    313  1100				   .L0122		;  const _B0  =  $B0
    314  1100
    315  1100				   .L0123		;  const _B2  =  $B2
    316  1100
    317  1100				   .L0124		;  const _B4  =  $B4
    318  1100
    319  1100				   .L0125		;  const _B6  =  $B6
    320  1100
    321  1100				   .L0126		;  const _B8  =  $B8
    322  1100
    323  1100				   .L0127		;  const _BA  =  $BA
    324  1100
    325  1100				   .L0128		;  const _BC  =  $BC
    326  1100
    327  1100				   .L0129		;  const _BE  =  $BE
    328  1100
    329  1100				   .L0130		;  const _C0  =  $C0
    330  1100
    331  1100				   .L0131		;  const _C2  =  $C2
    332  1100
    333  1100				   .L0132		;  const _C4  =  $C4
    334  1100
    335  1100				   .L0133		;  const _C6  =  $C6
    336  1100
    337  1100				   .L0134		;  const _C8  =  $C8
    338  1100
    339  1100				   .L0135		;  const _CA  =  $CA
    340  1100
    341  1100				   .L0136		;  const _CC  =  $CC
    342  1100
    343  1100				   .L0137		;  const _CE  =  $CE
    344  1100
    345  1100				   .L0138		;  const _D0  =  $D0
    346  1100
    347  1100				   .L0139		;  const _D2  =  $D2
    348  1100
    349  1100				   .L0140		;  const _D4  =  $D4
    350  1100
    351  1100				   .L0141		;  const _D6  =  $D6
    352  1100
    353  1100				   .L0142		;  const _D8  =  $D8
    354  1100
    355  1100				   .L0143		;  const _DA  =  $DA
    356  1100
    357  1100				   .L0144		;  const _DC  =  $DC
    358  1100
    359  1100				   .L0145		;  const _DE  =  $DE
    360  1100
    361  1100				   .L0146		;  const _E0  =  $E0
    362  1100
    363  1100				   .L0147		;  const _E2  =  $E2
    364  1100
    365  1100				   .L0148		;  const _E4  =  $E4
    366  1100
    367  1100				   .L0149		;  const _E6  =  $E6
    368  1100
    369  1100				   .L0150		;  const _E8  =  $E8
    370  1100
    371  1100				   .L0151		;  const _EA  =  $EA
    372  1100
    373  1100				   .L0152		;  const _EC  =  $EC
    374  1100
    375  1100				   .L0153		;  const _EE  =  $EE
    376  1100
    377  1100				   .L0154		;  const _F0  =  $F0
    378  1100
    379  1100				   .L0155		;  const _F2  =  $F2
    380  1100
    381  1100				   .L0156		;  const _F4  =  $F4
    382  1100
    383  1100				   .L0157		;  const _F6  =  $F6
    384  1100
    385  1100				   .L0158		;  const _F8  =  $F8
    386  1100
    387  1100				   .L0159		;  const _FA  =  $FA
    388  1100
    389  1100				   .L0160		;  const _FC  =  $FC
    390  1100
    391  1100				   .L0161		;  const _FE  =  $FE
    392  1100
    393  1100				   .
    394  1100							; 
    395  1100
    396  1100				   .
    397  1100							; 
    398  1100
    399  1100				   .
    400  1100							; 
    401  1100
    402  1100				   .
    403  1100							; 
    404  1100
    405  1100				   .
    406  1100							; 
    407  1100
    408  1100				   .
    409  1100							; 
    410  1100
    411  1100				   .
    412  1100							; 
    413  1100
    414  1100				   .
    415  1100							; 
    416  1100
    417  1100				   .
    418  1100							; 
    419  1100
    420  1100				   .
    421  1100							; 
    422  1100
    423  1100				   .
    424  1100							; 
    425  1100
    426  1100				   .
    427  1100							; 
    428  1100
    429  1100				   .
    430  1100							; 
    431  1100
    432  1100				   .
    433  1100							; 
    434  1100
    435  1100				   .
    436  1100							; 
    437  1100
    438  1100				   .
    439  1100							; 
    440  1100
    441  1100				   .
    442  1100							; 
    443  1100
    444  1100				   .
    445  1100							; 
    446  1100
    447  1100				   .
    448  1100							; 
    449  1100
    450  1100				   .
    451  1100							; 
    452  1100
    453  1100				   .
    454  1100							; 
    455  1100
    456  1100				   .
    457  1100							; 
    458  1100
    459  1100				   .
    460  1100							; 
    461  1100
    462  1100				   .
    463  1100							; 
    464  1100
    465  1100				   .
    466  1100							; 
    467  1100
    468  1100				   .
    469  1100							; 
    470  1100
    471  1100				   .
    472  1100							; 
    473  1100
    474  1100				   .
    475  1100							; 
    476  1100
    477  1100				   .
    478  1100							; 
    479  1100
    480  1100				   .
    481  1100							; 
    482  1100
    483  1100				   .
    484  1100							; 
    485  1100
    486  1100				   .
    487  1100							; 
    488  1100
    489  1100				   .
    490  1100							; 
    491  1100
    492  1100				   .
    493  1100							; 
    494  1100
    495  1100				   .
    496  1100							; 
    497  1100
    498  1100				   .
    499  1100							; 
    500  1100
    501  1100				   .
    502  1100							; 
    503  1100
    504  1100				   .
    505  1100							; 
    506  1100
    507  1100				   .
    508  1100							; 
    509  1100
    510  1100				   .
    511  1100							; 
    512  1100
    513  1100				   .
    514  1100							; 
    515  1100
    516  1100				   .
    517  1100							; 
    518  1100
    519  1100				   .
    520  1100							; 
    521  1100
    522  1100				   .
    523  1100							; 
    524  1100
    525  1100				   .
    526  1100							; 
    527  1100
    528  1100				   .
    529  1100							; 
    530  1100
    531  1100				   .
    532  1100							; 
    533  1100
    534  1100				   .
    535  1100							; 
    536  1100
    537  1100				   .
    538  1100							; 
    539  1100
    540  1100				   .
    541  1100							; 
    542  1100
    543  1100				   .
    544  1100							; 
    545  1100
    546  1100				   .
    547  1100							; 
    548  1100
    549  1100				   .
    550  1100							; 
    551  1100
    552  1100				   .
    553  1100							; 
    554  1100
    555  1100				   .
    556  1100							; 
    557  1100
    558  1100				   .
    559  1100							; 
    560  1100
    561  1100				   .
    562  1100							; 
    563  1100
    564  1100				   .
    565  1100							; 
    566  1100
    567  1100				   .
    568  1100							; 
    569  1100
    570  1100				   .
    571  1100							; 
    572  1100
    573  1100				   .
    574  1100							; 
    575  1100
    576  1100				   .
    577  1100							; 
    578  1100
    579  1100				   .
    580  1100							; 
    581  1100
    582  1100				   .
    583  1100							; 
    584  1100
    585  1100				   .
    586  1100							; 
    587  1100
    588  1100				   .
    589  1100							; 
    590  1100
    591  1100				   .
    592  1100							; 
    593  1100
    594  1100				   .
    595  1100							; 
    596  1100
    597  1100				   .
    598  1100							; 
    599  1100
    600  1100				   .
    601  1100							; 
    602  1100
    603  1100				   .
    604  1100							; 
    605  1100
    606  1100				   .
    607  1100							; 
    608  1100
    609  1100				   .
    610  1100							; 
    611  1100
    612  1100				   .
    613  1100							; 
    614  1100
    615  1100				   .
    616  1100							; 
    617  1100
    618  1100				   .
    619  1100							; 
    620  1100
    621  1100				   .
    622  1100							; 
    623  1100
    624  1100				   .
    625  1100							; 
    626  1100
    627  1100				   .
    628  1100							; 
    629  1100
    630  1100				   .
    631  1100							; 
    632  1100
    633  1100				   .
    634  1100							; 
    635  1100
    636  1100				   .
    637  1100							; 
    638  1100
    639  1100				   .
    640  1100							; 
    641  1100
    642  1100				   .
    643  1100							; 
    644  1100
    645  1100				   .
    646  1100							; 
    647  1100
    648  1100				   .
    649  1100							; 
    650  1100
    651  1100				   .
    652  1100							; 
    653  1100
    654  1100				   .
    655  1100							; 
    656  1100
    657  1100				   .
    658  1100							; 
    659  1100
    660  1100				   .
    661  1100							; 
    662  1100
    663  1100				   .
    664  1100							; 
    665  1100
    666  1100				   .
    667  1100							; 
    668  1100
    669  1100				   .
    670  1100							; 
    671  1100
    672  1100				   .
    673  1100							; 
    674  1100
    675  1100				   .
    676  1100							; 
    677  1100
    678  1100				   .
    679  1100							; 
    680  1100
    681  1100				   .
    682  1100							; 
    683  1100
    684  1100				   .
    685  1100							; 
    686  1100
    687  1100				   .
    688  1100							; 
    689  1100
    690  1100				   .
    691  1100							; 
    692  1100
    693  1100				   .
    694  1100							; 
    695  1100
    696  1100				   .
    697  1100							; 
    698  1100
    699  1100				   .
    700  1100							; 
    701  1100
    702  1100				   .
    703  1100							; 
    704  1100
    705  1100				   .
    706  1100							; 
    707  1100
    708  1100				   .
    709  1100							; 
    710  1100
    711  1100				   .
    712  1100							; 
    713  1100
    714  1100				   .
    715  1100							; 
    716  1100
    717  1100				   .
    718  1100							; 
    719  1100
    720  1100				   .
    721  1100							; 
    722  1100
    723  1100				   .
    724  1100							; 
    725  1100
    726  1100				   .
    727  1100							; 
    728  1100
    729  1100				   .
    730  1100							; 
    731  1100
    732  1100				   .
    733  1100							; 
    734  1100
    735  1100				   .
    736  1100							; 
    737  1100
    738  1100				   .
    739  1100							; 
    740  1100
    741  1100				   .
    742  1100							; 
    743  1100
    744  1100				   .
    745  1100							; 
    746  1100
    747  1100				   .
    748  1100							; 
    749  1100
    750  1100				   .
    751  1100							; 
    752  1100
    753  1100				   .
    754  1100							; 
    755  1100
    756  1100				   .
    757  1100							; 
    758  1100
    759  1100				   .
    760  1100							; 
    761  1100
    762  1100				   .
    763  1100							; 
    764  1100
    765  1100				   .
    766  1100							; 
    767  1100
    768  1100				   .
    769  1100							; 
    770  1100
    771  1100				   .
    772  1100							; 
    773  1100
    774  1100				   .
    775  1100							; 
    776  1100
    777  1100				   .
    778  1100							; 
    779  1100
    780  1100				   .
    781  1100							; 
    782  1100
    783  1100				   .
    784  1100							; 
    785  1100
    786  1100				   .
    787  1100							; 
    788  1100
    789  1100				   .
    790  1100							; 
    791  1100
    792  1100				   .
    793  1100							; 
    794  1100
    795  1100				   .
    796  1100							; 
    797  1100
    798  1100				   .
    799  1100							; 
    800  1100
    801  1100				   .
    802  1100							; 
    803  1100
    804  1100				   .
    805  1100							; 
    806  1100
    807  1100				   .
    808  1100							; 
    809  1100
    810  1100				   .
    811  1100							; 
    812  1100
    813  1100				   .
    814  1100							; 
    815  1100
    816  1100				   .
    817  1100							; 
    818  1100
    819  1100				   .
    820  1100							; 
    821  1100
    822  1100				   .
    823  1100							; 
    824  1100
    825  1100				   .
    826  1100							; 
    827  1100
    828  1100				   .
    829  1100							; 
    830  1100
    831  1100				   .L0162		;  dim _sc1  =  score
    832  1100
    833  1100				   .L0163		;  dim _sc2  =  score + 1
    834  1100
    835  1100				   .L0164		;  dim _sc3  =  score + 2
    836  1100
    837  1100				   .
    838  1100							; 
    839  1100
    840  1100				   .
    841  1100							; 
    842  1100
    843  1100				   .L0165		;  dim delay_counter  =  a
    844  1100
    845  1100				   .L0166		;  dim frame_counter  =  b
    846  1100
    847  1100				   .
    848  1100							; 
    849  1100
    850  1100				   .L0167		;  dim _BitOp_Ball_Shot_Dir  =  c
    851  1100
    852  1100				   .L0168		;  dim _Bit0_Ball_Shot_Dir_Left1  =  c
    853  1100
    854  1100				   .L0169		;  dim _Bit1_Ball_Shot_Dir_Left2  =  c
    855  1100
    856  1100				   .L0170		;  dim _Bit2_Ball_Shot_Dir_Right1  =  c
    857  1100
    858  1100				   .L0171		;  dim _Bit3_Ball_Shot_Dir_Right2  =  c
    859  1100
    860  1100				   .
    861  1100							; 
    862  1100
    863  1100				   .L0172		;  dim _BitOp_M0_Dir  =  d
    864  1100
    865  1100				   .L0173		;  dim _Bit0_M0_Dir_Up  =  d
    866  1100
    867  1100				   .L0174		;  dim _Bit1_M0_Dir_Down  =  d
    868  1100
    869  1100				   .L0175		;  dim _Bit2_M0_Dir_Left  =  d
    870  1100
    871  1100				   .L0176		;  dim _Bit3_M0_Dir_Right  =  d
    872  1100
    873  1100				   .
    874  1100							; 
    875  1100
    876  1100				   .L0177		;  dim _BitOp_P1_Dir  =  e
    877  1100
    878  1100				   .L0178		;  dim _Bit0_P1_Dir_Up  =  e
    879  1100
    880  1100				   .L0179		;  dim _Bit1_P1_Dir_Down  =  e
    881  1100
    882  1100				   .L0180		;  dim _Bit2_P1_Dir_Left  =  e
    883  1100
    884  1100				   .L0181		;  dim _Bit3_P1_Dir_Right  =  e
    885  1100
    886  1100				   .
    887  1100							; 
    888  1100
    889  1100				   .
    890  1100							; 
    891  1100
    892  1100				   .L0182		;  dim _Ch0_Sound  =  f
    893  1100
    894  1100				   .L0183		;  dim _Ch0_Duration  =  g
    895  1100
    896  1100				   .L0184		;  dim _Ch0_Counter  =  h
    897  1100
    898  1100				   .
    899  1100							; 
    900  1100
    901  1100				   .L0185		;  dim extra_wall_move_x  =  i
    902  1100
    903  1100				   .L0186		;  dim roommate_move_x  =  j
    904  1100
    905  1100				   .L0187		;  dim roommate_type  =  k
    906  1100
    907  1100				   .
    908  1100							; 
    909  1100
    910  1100				   .L0188		;  dim _BitOp_Safe_Point_New_Room  =  l
    911  1100
    912  1100				   .L0189		;  dim _Bit0_Safe_Point_reached  =  l
    913  1100
    914  1100				   .L0190		;  dim _Bit1_Safe_Point_P1_Flip  =  l
    915  1100
    916  1100				   .L0191		;  dim _Bit2_New_Room_Flip_P1	=  l
    917  1100
    918  1100				   .L0192		;  dim Safe_Point_P1_x  =  m
    919  1100
    920  1100				   .L0193		;  dim Safe_Point_P1_y  =  n
    921  1100
    922  1100				   .
    923  1100							; 
    924  1100
    925  1100				   .L0194		;  rem 16 bit velocity
    926  1100
    927  1100				   .L0195		;  dim Bally_velocity	=  p.q
    928  1100
    929  1100				   .L0196		;  rem 16 bit ball y position
    930  1100
    931  1100				   .L0197		;  dim Bally_position	=  bally.r
    932  1100
    933  1100				   .
    934  1100							; 
    935  1100
    936  1100				   .L0198		;  rem 16 bit velocity
    937  1100
    938  1100				   .L0199		;  dim M0y_velocity  =  s.t
    939  1100
    940  1100				   .L0200		;  rem 16 bit missile0 y position
    941  1100
    942  1100				   .L0201		;  dim M0y_position  =  missile0y.u
    943  1100
    944  1100				   .
    945  1100							; 
    946  1100
    947  1100				   .L0202		;  rem 16 bit velocity
    948  1100
    949  1100				   .L0203		;  dim P1y_velocity  =  v.w
    950  1100
    951  1100				   .L0204		;  rem 16 bit player1 y position
    952  1100
    953  1100				   .L0205		;  dim P1y_position  =  player1y.x
    954  1100
    955  1100				   .
    956  1100							; 
    957  1100
    958  1100				   .L0206		;  rem Various game states
    959  1100
    960  1100				   .L0207		;  dim _Bit_Game_State  =  y
    961  1100
    962  1100				   .L0208		;  dim _Bit0_roommate_Dir  =  y
    963  1100
    964  1100				   .L0209		;  dim _Bit1_Wall_Dir	=  y
    965  1100
    966  1100				   .L0210		;  dim _Bit2_Level_finished  =  y
    967  1100
    968  1100				   .L0211		;  dim _Bit3_Ball_Shot_Moving	=  y
    969  1100
    970  1100				   .L0212		;  dim _Bit4_Game_Over  =  y
    971  1100
    972  1100				   .L0213		;  dim _Bit5_Request_Pending  =  y
    973  1100
    974  1100				   .L0214		;  dim _Bit6_Flip_P1  =  y
    975  1100
    976  1100				   .L0215		;  dim _Bit7_M0_Moving  =  y
    977  1100
    978  1100				   .
    979  1100							; 
    980  1100
    981  1100				   .L0216		;  dim new_room_player1y  =  var0
    982  1100
    983  1100				   .L0217		;  dim new_room_player1x  =  var1
    984  1100
    985  1100				   .L0218		;  dim gamenumber  =  var2
    986  1100
    987  1100				   .
    988  1100							; 
    989  1100
    990  1100				   .L0219		;  dim max_pub_level_bcd1  =  var3
    991  1100
    992  1100				   .L0220		;  dim max_pub_level_bcd2  =  var4
    993  1100
    994  1100				   .L0221		;  dim max_pub_level_bcd3  =  var5
    995  1100
    996  1100				   .L0222		;  dim max_priv_level_bcd1  =	var6
    997  1100
    998  1100				   .L0223		;  dim max_priv_level_bcd2  =	var7
    999  1100
   1000  1100				   .L0224		;  dim max_priv_level_bcd3  =	var8
   1001  1100
   1002  1100				   .
   1003  1100							; 
   1004  1100
   1005  1100				   .
   1006  1100							; 
   1007  1100
   1008  1100				   .
   1009  1100							; 
   1010  1100
   1011  1100				   .L0225		;  dim w_room_definition_start  =  w097
   1012  1100
   1013  1100				   .
   1014  1100							; 
   1015  1100
   1016  1100				   .L0226		;  dim r_BitOp_room_type  =  r097
   1017  1100
   1018  1100				   .L0227		;  dim w_BitOp_room_type  =  r097
   1019  1100
   1020  1100				   .L0228		;  dim r_Bit0_room_type_top  =  r097
   1021  1100
   1022  1100				   .L0229		;  dim r_room_color_top  =  r098
   1023  1100
   1024  1100				   .L0230		;  dim w_room_color_top  =  w098
   1025  1100
   1026  1100				   .L0231		;  dim r_room_color_middle  =	r099
   1027  1100
   1028  1100				   .L0232		;  dim w_room_color_middle  =	w099
   1029  1100
   1030  1100				   .L0233		;  dim r_room_color_bottom  =	r103
   1031  1100
   1032  1100				   .L0234		;  dim w_room_color_bottom  =	w103
   1033  1100
   1034  1100				   .L0235		;  dim r_roommate_type_and_range  =  r104
   1035  1100
   1036  1100				   .L0236		;  dim w_roommate_type_and_range  =  w104
   1037  1100
   1038  1100				   .L0237		;  dim r_roommate_startpos_x  =  r105
   1039  1100
   1040  1100				   .L0238		;  dim w_roommate_startpos_x  =  w105
   1041  1100
   1042  1100				   .L0239		;  dim r_roommate_startpos_y  =  r106
   1043  1100
   1044  1100				   .L0240		;  dim w_roommate_startpos_y  =  w106
   1045  1100
   1046  1100				   .L0241		;  dim r_extra_wall_type_and_range  =	r107
   1047  1100
   1048  1100				   .L0242		;  dim w_extra_wall_type_and_range  =	w107
   1049  1100
   1050  1100				   .L0243		;  dim r_extra_wall_width  =  r108
   1051  1100
   1052  1100				   .L0244		;  dim w_extra_wall_width  =  w108
   1053  1100
   1054  1100				   .L0245		;  dim r_extra_wall_height  =	r109
   1055  1100
   1056  1100				   .L0246		;  dim w_extra_wall_height  =	w109
   1057  1100
   1058  1100				   .L0247		;  dim r_extra_wall_startpos_x  =  r110
   1059  1100
   1060  1100				   .L0248		;  dim w_extra_wall_startpos_x  =  w110
   1061  1100
   1062  1100				   .L0249		;  dim r_extra_wall_startpos_y  =  r111
   1063  1100
   1064  1100				   .L0250		;  dim w_extra_wall_startpos_y  =  w111
   1065  1100
   1066  1100				   .
   1067  1100							; 
   1068  1100
   1069  1100				   .
   1070  1100							; 
   1071  1100
   1072  1100				   ._Start
   1073  1100							; _Start
   1074  1100
   1075  1100				   .L0251		;  asm
   1076  1100
   1077  1100		       a9 00		      lda	#0
   1078  1102
   1079  1102		       a2 4b		      ldx	#75
   1080  1104
   1081  1104				   .clear_ram
   1082  1104
   1083  1104		       ca		      dex
   1084  1105
   1085  1105		       95 a4		      sta	var0,x
   1086  1107
   1087  1107		       d0 fb		      bne	.clear_ram
   1088  1109
   1089  1109				   .
   1090  1109							; 
   1091  1109
   1092  1109				   .L0252		;  WriteSendBuffer  =	req_load_menu  :  _Bit5_Request_Pending{5}  =  1  :  COLUP0  =	_1C
   1093  1109
   1094  1109		       a9 09		      LDA	#req_load_menu
   1095  110b		       8d f1 1f 	      STA	WriteSendBuffer
   1096  110e		       a5 ec		      LDA	_Bit5_Request_Pending
   1097  1110		       09 20		      ORA	#32
   1098  1112		       85 ec		      STA	_Bit5_Request_Pending
   1099  1114		       a9 1c		      LDA	#_1C
   1100  1116		       85 06		      STA	COLUP0
   1101  1118				   .L0253		;  gamenumber	=  1  :  score	=  1  :  scorecolor  =	_0E
   1102  1118
   1103  1118		       a9 01		      LDA	#1
   1104  111a		       85 a6		      STA	gamenumber
   1105  111c		       a9 01		      LDA	#$01
   1106  111e		       85 95		      STA	score+2
   1107  1120		       a9 00		      LDA	#$00
   1108  1122		       85 94		      STA	score+1
   1109  1124		       a9 00		      LDA	#$00
   1110  1126		       85 93		      STA	score
   1111  1128		       a9 0e		      LDA	#_0E
   1112  112a		       85 a3		      STA	scorecolor
   1113  112c				   .L0254		;  player1x  =  30  :	player1y  =  0
   1114  112c
   1115  112c		       a9 1e		      LDA	#30
   1116  112e		       85 81		      STA	player1x
   1117  1130		       a9 00		      LDA	#0
   1118  1132		       85 86		      STA	player1y
   1119  1134				   .L0255		;  new_room_player1y  =  player_min_y	:  new_room_player1x  =  30
   1120  1134
   1121  1134		       a9 02		      LDA	#player_min_y
   1122  1136		       85 a4		      STA	new_room_player1y
   1123  1138		       a9 1e		      LDA	#30
   1124  113a		       85 a5		      STA	new_room_player1x
   1125  113c				   .L0256		;  AUDV0  =  0  :  AUDV1  =  0
   1126  113c
   1127  113c		       a9 00		      LDA	#0
   1128  113e		       85 19		      STA	AUDV0
   1129  1140		       85 1a		      STA	AUDV1
   1130  1142				   .L0257		;  missile0x  =  200  :  missile0y  =	200  :	missile0height	=  1  :  bally	=  0
   1131  1142
   1132  1142		       a9 c8		      LDA	#200
   1133  1144		       85 82		      STA	missile0x
   1134  1146		       85 91		      STA	missile0y
   1135  1148		       a9 01		      LDA	#1
   1136  114a		       85 90		      STA	missile0height
   1137  114c		       a9 00		      LDA	#0
   1138  114e		       85 89		      STA	bally
   1139  1150				   .L0258		;  w_extra_wall_startpos_x  =	200
   1140  1150
   1141  1150		       a9 c8		      LDA	#200
   1142  1152		       8d 6e f0 	      STA	w_extra_wall_startpos_x
   1143  1155				   .L0259		;  w_roommate_startpos_y  =  200  :  player0y	=  200	:  player0x  =	0
   1144  1155
   1145  1155		       a9 c8		      LDA	#200
   1146  1157		       8d 6a f0 	      STA	w_roommate_startpos_y
   1147  115a		       85 85		      STA	player0y
   1148  115c		       a9 00		      LDA	#0
   1149  115e		       85 80		      STA	player0x
   1150  1160				   .
   1151  1160							; 
   1152  1160
   1153  1160				   .L0260		;  Safe_Point_P1_x  =	30  :  Safe_Point_P1_y	=  player_min_y
   1154  1160
   1155  1160		       a9 1e		      LDA	#30
   1156  1162		       85 e0		      STA	Safe_Point_P1_x
   1157  1164		       a9 02		      LDA	#player_min_y
   1158  1166		       85 e1		      STA	Safe_Point_P1_y
   1159  1168				   .
   1160  1168							; 
   1161  1168
   1162  1168				   .L0261		;  pfclear
   1163  1168
   1164  1168		       a9 00		      LDA	#0
   1165  116a		       85 ee		      sta	temp7
   1166  116c		       a9 d1		      lda	#>(ret_point1-1)
   1167  116e		       48		      pha
   1168  116f		       a9 81		      lda	#<(ret_point1-1)
   1169  1171		       48		      pha
   1170  1172		       a9 f3		      lda	#>(pfclear-1)
   1171  1174		       48		      pha
   1172  1175		       a9 8f		      lda	#<(pfclear-1)
   1173  1177		       48		      pha
   1174  1178		       a5 ee		      lda	temp7
   1175  117a		       48		      pha
   1176  117b		       8a		      txa
   1177  117c		       48		      pha
   1178  117d		       a2 02		      ldx	#2
   1179  117f		       4c e8 ff 	      jmp	BS_jsr
   1180  1182				   ret_point1
   1181  1182				   .L0262		;  player1color:
   1182  1182
   1183  1182		       a2 dc		      LDX	#<playercolorL0262_1
   1184  1184		       86 87		      STX	player1color
   1185  1186		       a9 fe		      LDA	#>playercolorL0262_1
   1186  1188		       85 88		      STA	player1color+1
   1187  118a				   .
   1188  118a							; 
   1189  118a
   1190  118a				   .
   1191  118a							; 
   1192  118a
   1193  118a				   .
   1194  118a							; 
   1195  118a
   1196  118a				   .
   1197  118a							; 
   1198  118a
   1199  118a				   ._titlescreen_menu
   1200  118a							; _titlescreen_menu
   1201  118a
   1202  118a				   .L0263		;  COLUBK  =  _00
   1203  118a
   1204  118a		       a9 00		      LDA	#_00
   1205  118c		       85 09		      STA	COLUBK
   1206  118e				   .
   1207  118e							; 
   1208  118e
   1209  118e				   .L0264		;  gosub titledrawscreen bank2
   1210  118e
   1211  118e		       85 ee		      sta	temp7
   1212  1190		       a9 d1		      lda	#>(ret_point2-1)
   1213  1192		       48		      pha
   1214  1193		       a9 a5		      lda	#<(ret_point2-1)
   1215  1195		       48		      pha
   1216  1196		       a9 f6		      lda	#>(.titledrawscreen-1)
   1217  1198		       48		      pha
   1218  1199		       a9 22		      lda	#<(.titledrawscreen-1)
   1219  119b		       48		      pha
   1220  119c		       a5 ee		      lda	temp7
   1221  119e		       48		      pha
   1222  119f		       8a		      txa
   1223  11a0		       48		      pha
   1224  11a1		       a2 02		      ldx	#2
   1225  11a3		       4c e8 ff 	      jmp	BS_jsr
   1226  11a6				   ret_point2
   1227  11a6				   .
   1228  11a6							; 
   1229  11a6
   1230  11a6				   .L0265		;  if delay_counter  >  0 then delay_counter  =  delay_counter  -  1  :  goto _titlescreen_menu
   1231  11a6
   1232  11a6		       a9 00		      LDA	#0
   1233  11a8		       c5 d4		      CMP	delay_counter
   1234  11aa		       b0 05		      BCS	.skipL0265
   1235  11ac				   .condpart0
   1236  11ac		       c6 d4		      DEC	delay_counter
   1237  11ae		       4c 8a d1 	      jmp	._titlescreen_menu
   1238  11b1
   1239  11b1				   .skipL0265
   1240  11b1				   .
   1241  11b1							; 
   1242  11b1
   1243  11b1				   .L0266		;  if ReceiveBufferSize  <  response_menu_size then _Skip_Read_Menu_Response
   1244  11b1
   1245  11b1		       ad f3 1f 	      LDA	ReceiveBufferSize
   1246  11b4		       c9 06		      CMP	#response_menu_size
   1247  11b6					      if	((* - ._Skip_Read_Menu_Response) < 127) && ((* - ._Skip_Read_Menu_Response) > -128)
   1248  11b6		       90 24		      bcc	._Skip_Read_Menu_Response
   1249  11b8				  -	      else
   1250  11b8				  -	      bcs	.0skip_Skip_Read_Menu_Response
   1251  11b8				  -	      jmp	._Skip_Read_Menu_Response
   1252  11b8				  -.0skip_Skip_Read_Menu_Response
   1253  11b8					      endif
   1254  11b8				   .L0267		;  _Bit5_Request_Pending{5}  =  0
   1255  11b8
   1256  11b8		       a5 ec		      LDA	_Bit5_Request_Pending
   1257  11ba		       29 df		      AND	#223
   1258  11bc		       85 ec		      STA	_Bit5_Request_Pending
   1259  11be				   .L0268		;  max_pub_level_bcd1	=  ReceiveBuffer
   1260  11be
   1261  11be		       ad f2 1f 	      LDA	ReceiveBuffer
   1262  11c1		       85 a7		      STA	max_pub_level_bcd1
   1263  11c3				   .L0269		;  max_pub_level_bcd2	=  ReceiveBuffer
   1264  11c3
   1265  11c3		       ad f2 1f 	      LDA	ReceiveBuffer
   1266  11c6		       85 a8		      STA	max_pub_level_bcd2
   1267  11c8				   .L0270		;  max_pub_level_bcd3	=  ReceiveBuffer
   1268  11c8
   1269  11c8		       ad f2 1f 	      LDA	ReceiveBuffer
   1270  11cb		       85 a9		      STA	max_pub_level_bcd3
   1271  11cd				   .L0271		;  max_priv_level_bcd1  =  ReceiveBuffer
   1272  11cd
   1273  11cd		       ad f2 1f 	      LDA	ReceiveBuffer
   1274  11d0		       85 aa		      STA	max_priv_level_bcd1
   1275  11d2				   .L0272		;  max_priv_level_bcd2  =  ReceiveBuffer
   1276  11d2
   1277  11d2		       ad f2 1f 	      LDA	ReceiveBuffer
   1278  11d5		       85 ab		      STA	max_priv_level_bcd2
   1279  11d7				   .L0273		;  max_priv_level_bcd3  =  ReceiveBuffer
   1280  11d7
   1281  11d7		       ad f2 1f 	      LDA	ReceiveBuffer
   1282  11da		       85 ac		      STA	max_priv_level_bcd3
   1283  11dc				   ._Skip_Read_Menu_Response
   1284  11dc							; _Skip_Read_Menu_Response
   1285  11dc
   1286  11dc				   .
   1287  11dc							; 
   1288  11dc
   1289  11dc				   .L0274		;  if _Bit5_Request_Pending{5} then _titlescreen_menu
   1290  11dc
   1291  11dc		       a5 ec		      LDA	_Bit5_Request_Pending
   1292  11de		       29 20		      AND	#32
   1293  11e0					      if	((* - ._titlescreen_menu) < 127) && ((* - ._titlescreen_menu) > -128)
   1294  11e0		       d0 a8		      BNE	._titlescreen_menu
   1295  11e2				  -	      else
   1296  11e2				  -	      beq	.1skip_titlescreen_menu
   1297  11e2				  -	      jmp	._titlescreen_menu
   1298  11e2				  -.1skip_titlescreen_menu
   1299  11e2					      endif
   1300  11e2				   .
   1301  11e2							; 
   1302  11e2
   1303  11e2				   .L0275		;  if joy0left then score  =  score  -  100  :  delay_counter	=  5
   1304  11e2
   1305  11e2		       2c 80 02 	      bit	SWCHA
   1306  11e5		       70 19		      BVS	.skipL0275
   1307  11e7				   .condpart1
   1308  11e7		       f8		      SED
   1309  11e8		       38		      SEC
   1310  11e9		       a5 95		      LDA	score+2
   1311  11eb		       e9 00		      SBC	#$00
   1312  11ed		       85 95		      STA	score+2
   1313  11ef		       a5 94		      LDA	score+1
   1314  11f1		       e9 01		      SBC	#$01
   1315  11f3		       85 94		      STA	score+1
   1316  11f5		       a5 93		      LDA	score
   1317  11f7		       e9 00		      SBC	#$00
   1318  11f9		       85 93		      STA	score
   1319  11fb		       d8		      CLD
   1320  11fc		       a9 05		      LDA	#5
   1321  11fe		       85 d4		      STA	delay_counter
   1322  1200				   .skipL0275
   1323  1200				   .L0276		;  if joy0down then score  =  score  -  1  :  delay_counter  =  5
   1324  1200
   1325  1200		       a9 20		      lda	#$20
   1326  1202		       2c 80 02 	      bit	SWCHA
   1327  1205		       d0 19		      BNE	.skipL0276
   1328  1207				   .condpart2
   1329  1207		       f8		      SED
   1330  1208		       38		      SEC
   1331  1209		       a5 95		      LDA	score+2
   1332  120b		       e9 01		      SBC	#$01
   1333  120d		       85 95		      STA	score+2
   1334  120f		       a5 94		      LDA	score+1
   1335  1211		       e9 00		      SBC	#$00
   1336  1213		       85 94		      STA	score+1
   1337  1215		       a5 93		      LDA	score
   1338  1217		       e9 00		      SBC	#$00
   1339  1219		       85 93		      STA	score
   1340  121b		       d8		      CLD
   1341  121c		       a9 05		      LDA	#5
   1342  121e		       85 d4		      STA	delay_counter
   1343  1220				   .skipL0276
   1344  1220				   .L0277		;  if joy0right then score  =	score  +  100  :  delay_counter  =  5
   1345  1220
   1346  1220		       2c 80 02 	      bit	SWCHA
   1347  1223		       30 13		      BMI	.skipL0277
   1348  1225				   .condpart3
   1349  1225		       f8		      SED
   1350  1226		       18		      CLC
   1351  1227		       a5 94		      LDA	score+1
   1352  1229		       69 01		      ADC	#$01
   1353  122b		       85 94		      STA	score+1
   1354  122d		       a5 93		      LDA	score
   1355  122f		       69 00		      ADC	#$00
   1356  1231		       85 93		      STA	score
   1357  1233		       d8		      CLD
   1358  1234		       a9 05		      LDA	#5
   1359  1236		       85 d4		      STA	delay_counter
   1360  1238				   .skipL0277
   1361  1238				   .L0278		;  if joy0up then score  =  score  +  1  :  delay_counter  =  5
   1362  1238
   1363  1238		       a9 10		      lda	#$10
   1364  123a		       2c 80 02 	      bit	SWCHA
   1365  123d		       d0 19		      BNE	.skipL0278
   1366  123f				   .condpart4
   1367  123f		       f8		      SED
   1368  1240		       18		      CLC
   1369  1241		       a5 95		      LDA	score+2
   1370  1243		       69 01		      ADC	#$01
   1371  1245		       85 95		      STA	score+2
   1372  1247		       a5 94		      LDA	score+1
   1373  1249		       69 00		      ADC	#$00
   1374  124b		       85 94		      STA	score+1
   1375  124d		       a5 93		      LDA	score
   1376  124f		       69 00		      ADC	#$00
   1377  1251		       85 93		      STA	score
   1378  1253		       d8		      CLD
   1379  1254		       a9 05		      LDA	#5
   1380  1256		       85 d4		      STA	delay_counter
   1381  1258				   .skipL0278
   1382  1258				   .
   1383  1258							; 
   1384  1258
   1385  1258				   .
   1386  1258							; 
   1387  1258
   1388  1258				   .L0279		;  asm
   1389  1258
   1390  1258		       f8		      sed		; Set the Decimal Mode Flag
   1391  1259
   1392  1259		       a5 a9		      lda	max_pub_level_bcd3	; Load the Accumulator
   1393  125b
   1394  125b		       c5 95		      cmp	_sc3	; Compare Memory and the Accumulator
   1395  125d
   1396  125d		       a5 a8		      lda	max_pub_level_bcd2	; Load the Accumulator
   1397  125f
   1398  125f		       e5 94		      sbc	_sc2	; Subtract With Carry
   1399  1261
   1400  1261		       a5 a7		      lda	max_pub_level_bcd1	; Load the Accumulator
   1401  1263
   1402  1263		       e5 93		      sbc	_sc1	; Subtract With Carry
   1403  1265
   1404  1265		       d8		      cld		; Clear the Decimal Flag
   1405  1266
   1406  1266		       b0 0c		      bcs	._Skip_Level_Reset	; Branch if Carry Set
   1407  1268
   1408  1268							; (goto label if carry is set)
   1409  1268
   1410  1268				   .L0280		;  score  =  1
   1411  1268
   1412  1268		       a9 01		      LDA	#$01
   1413  126a		       85 95		      STA	score+2
   1414  126c		       a9 00		      LDA	#$00
   1415  126e		       85 94		      STA	score+1
   1416  1270		       a9 00		      LDA	#$00
   1417  1272		       85 93		      STA	score
   1418  1274				   .
   1419  1274							; 
   1420  1274
   1421  1274				   ._Skip_Level_Reset
   1422  1274							; _Skip_Level_Reset
   1423  1274
   1424  1274				   .L0281		;  if _sc1  =	0  &&  _sc2  =	0  &&  _sc3  =	0 then _sc1  =	max_pub_level_bcd1  :  _sc2  =	max_pub_level_bcd2  :  _sc3  =	max_pub_level_bcd3
   1425  1274
   1426  1274		       a5 93		      LDA	_sc1
   1427  1276		       c9 00		      CMP	#0
   1428  1278		       d0 18		      BNE	.skipL0281
   1429  127a				   .condpart5
   1430  127a		       a5 94		      LDA	_sc2
   1431  127c		       c9 00		      CMP	#0
   1432  127e		       d0 12		      BNE	.skip5then
   1433  1280				   .condpart6
   1434  1280		       a5 95		      LDA	_sc3
   1435  1282		       c9 00		      CMP	#0
   1436  1284		       d0 0c		      BNE	.skip6then
   1437  1286				   .condpart7
   1438  1286		       a5 a7		      LDA	max_pub_level_bcd1
   1439  1288		       85 93		      STA	_sc1
   1440  128a		       a5 a8		      LDA	max_pub_level_bcd2
   1441  128c		       85 94		      STA	_sc2
   1442  128e		       a5 a9		      LDA	max_pub_level_bcd3
   1443  1290		       85 95		      STA	_sc3
   1444  1292				   .skip6then
   1445  1292				   .skip5then
   1446  1292				   .skipL0281
   1447  1292				   .
   1448  1292							; 
   1449  1292
   1450  1292				   .L0282		;  if switchselect then gamenumber  =	gamenumber  +  1  :  delay_counter  =  20  :  if gamenumber  >	2 then gamenumber  =  1
   1451  1292
   1452  1292		       a9 02		      lda	#2
   1453  1294		       2c 82 02 	      bit	SWCHB
   1454  1297		       d0 10		      BNE	.skipL0282
   1455  1299				   .condpart8
   1456  1299		       e6 a6		      INC	gamenumber
   1457  129b		       a9 14		      LDA	#20
   1458  129d		       85 d4		      STA	delay_counter
   1459  129f		       a9 02		      LDA	#2
   1460  12a1		       c5 a6		      CMP	gamenumber
   1461  12a3		       b0 04		      BCS	.skip8then
   1462  12a5				   .condpart9
   1463  12a5		       a9 01		      LDA	#1
   1464  12a7		       85 a6		      STA	gamenumber
   1465  12a9				   .skip8then
   1466  12a9				   .skipL0282
   1467  12a9				   .L0283		;  if !joy0fire then goto _titlescreen_menu
   1468  12a9
   1469  12a9		       24 0c		      bit	INPT4
   1470  12ab		       10 03		      BPL	.skipL0283
   1471  12ad				   .condpart10
   1472  12ad		       4c 8a d1 	      jmp	._titlescreen_menu
   1473  12b0
   1474  12b0				   .skipL0283
   1475  12b0				   .
   1476  12b0							; 
   1477  12b0
   1478  12b0				   .L0284		;  WriteToBuffer  =  _sc1  :  WriteToBuffer  =  _sc2  :  WriteToBuffer  =  _sc3  :  WriteToBuffer  =  gamenumber  :  WriteSendBuffer  =  req_load  :  _Bit5_Request_Pending{5}  =  1
   1479  12b0
   1480  12b0		       a5 93		      LDA	_sc1
   1481  12b2		       8d f0 1f 	      STA	WriteToBuffer
   1482  12b5		       a5 94		      LDA	_sc2
   1483  12b7		       8d f0 1f 	      STA	WriteToBuffer
   1484  12ba		       a5 95		      LDA	_sc3
   1485  12bc		       8d f0 1f 	      STA	WriteToBuffer
   1486  12bf		       a5 a6		      LDA	gamenumber
   1487  12c1		       8d f0 1f 	      STA	WriteToBuffer
   1488  12c4		       a9 00		      LDA	#req_load
   1489  12c6		       8d f1 1f 	      STA	WriteSendBuffer
   1490  12c9		       a5 ec		      LDA	_Bit5_Request_Pending
   1491  12cb		       09 20		      ORA	#32
   1492  12cd		       85 ec		      STA	_Bit5_Request_Pending
   1493  12cf				   .
   1494  12cf							; 
   1495  12cf
   1496  12cf				   .L0285		;  player1y  =  player_min_y  :  score  =  0  :  _Bit4_Game_Over{4}  =  0
   1497  12cf
   1498  12cf		       a9 02		      LDA	#player_min_y
   1499  12d1		       85 86		      STA	player1y
   1500  12d3		       a9 00		      LDA	#$00
   1501  12d5		       85 95		      STA	score+2
   1502  12d7		       a9 00		      LDA	#$00
   1503  12d9		       85 94		      STA	score+1
   1504  12db		       a9 00		      LDA	#$00
   1505  12dd		       85 93		      STA	score
   1506  12df		       a5 ec		      LDA	_Bit4_Game_Over
   1507  12e1		       29 ef		      AND	#239
   1508  12e3		       85 ec		      STA	_Bit4_Game_Over
   1509  12e5				   .L0286		;  pfscore1  =  %00101010  :  pfscore2  =  255  :  pfscorecolor  =  _1C
   1510  12e5
   1511  12e5		       a9 2a		      LDA	#%00101010
   1512  12e7		       85 f2		      STA	pfscore1
   1513  12e9		       a9 ff		      LDA	#255
   1514  12eb		       85 f3		      STA	pfscore2
   1515  12ed		       a9 1c		      LDA	#_1C
   1516  12ef		       85 f4		      STA	pfscorecolor
   1517  12f1				   .
   1518  12f1							; 
   1519  12f1
   1520  12f1				   .
   1521  12f1							; 
   1522  12f1
   1523  12f1				   .L0287		;  asm
   1524  12f1
   1525  12f1		       a9 f0		      lda	#>(r_room_color_middle-132+pfres*pfwidth)
   1526  12f3
   1527  12f3		       85 f1		      sta	pfcolortable+1
   1528  12f5
   1529  12f5		       a9 6f		      lda	#<(r_room_color_middle-132+pfres*pfwidth)
   1530  12f7
   1531  12f7		       85 f0		      sta	pfcolortable
   1532  12f9
   1533  12f9				   .
   1534  12f9							; 
   1535  12f9
   1536  12f9				   .
   1537  12f9							; 
   1538  12f9
   1539  12f9				   .
   1540  12f9							; 
   1541  12f9
   1542  12f9				   .
   1543  12f9							; 
   1544  12f9
   1545  12f9				   .
   1546  12f9							; 
   1547  12f9
   1548  12f9				   .
   1549  12f9							; 
   1550  12f9
   1551  12f9				   .__Main_Loop
   1552  12f9							; __Main_Loop
   1553  12f9
   1554  12f9				   .L0288		;  COLUPF  =  r_room_color_top
   1555  12f9
   1556  12f9		       ad e2 f0 	      LDA	r_room_color_top
   1557  12fc		       85 08		      STA	COLUPF
   1558  12fe				   .L0289		;  NUSIZ1  =  $05
   1559  12fe
   1560  12fe		       a9 05		      LDA	#$05
   1561  1300		       85 05		      STA	NUSIZ1
   1562  1302				   .L0290		;  NUSIZ0  =  $10
   1563  1302
   1564  1302		       a9 10		      LDA	#$10
   1565  1304		       85 04		      STA	NUSIZ0
   1566  1306				   .L0291		;  COLUBK  =  _00
   1567  1306
   1568  1306		       a9 00		      LDA	#_00
   1569  1308		       85 09		      STA	COLUBK
   1570  130a				   .
   1571  130a							; 
   1572  130a
   1573  130a				   .L0292		;  if switchreset then goto _Start
   1574  130a
   1575  130a		       a9 01		      lda	#1
   1576  130c		       2c 82 02 	      bit	SWCHB
   1577  130f		       d0 03		      BNE	.skipL0292
   1578  1311				   .condpart11
   1579  1311		       4c 00 d1 	      jmp	._Start
   1580  1314
   1581  1314				   .skipL0292
   1582  1314				   .
   1583  1314							; 
   1584  1314
   1585  1314				   .L0293		;  if frame_counter{2} then player1: 
   1586  1314
   1587  1314		       a5 d5		      LDA	frame_counter
   1588  1316		       29 04		      AND	#4
   1589  1318		       f0 0c		      BEQ	.skipL0293
   1590  131a				   .condpart12
   1591  131a		       a2 e4		      LDX	#<player12then_1
   1592  131c		       86 8c		      STX	player1pointerlo
   1593  131e		       a9 fe		      LDA	#>player12then_1
   1594  1320		       85 8d		      STA	player1pointerhi
   1595  1322		       a9 07		      LDA	#7
   1596  1324		       85 8f		      STA	player1height
   1597  1326				   .skipL0293
   1598  1326				   .L0294		;  if ! frame_counter{2} then player1:
   1599  1326
   1600  1326		       a5 d5		      LDA	frame_counter
   1601  1328		       29 04		      AND	#4
   1602  132a		       d0 0c		      BNE	.skipL0294
   1603  132c				   .condpart13
   1604  132c		       a2 ec		      LDX	#<player13then_1
   1605  132e		       86 8c		      STX	player1pointerlo
   1606  1330		       a9 fe		      LDA	#>player13then_1
   1607  1332		       85 8d		      STA	player1pointerhi
   1608  1334		       a9 07		      LDA	#7
   1609  1336		       85 8f		      STA	player1height
   1610  1338				   .skipL0294
   1611  1338				   .
   1612  1338							; 
   1613  1338
   1614  1338				   .L0295		;  on roommate_type goto _roommate_Enemy_def _roommate_Air_Missile_def _roommate_Fuel_def _roommate_Soldier_def
   1615  1338
   1616  1338		       a6 de		      LDX	roommate_type
   1617  133a		       bd 43 d3 	      LDA	.L0295jumptablehi,x
   1618  133d		       48		      PHA
   1619  133e		       bd 47 d3 	      LDA	.L0295jumptablelo,x
   1620  1341		       48		      PHA
   1621  1342		       60		      RTS
   1622  1343				   .L0295jumptablehi
   1623  1343		       d3		      .byte.b	>(._roommate_Enemy_def-1)
   1624  1344		       d3		      .byte.b	>(._roommate_Air_Missile_def-1)
   1625  1345		       d3		      .byte.b	>(._roommate_Fuel_def-1)
   1626  1346		       d3		      .byte.b	>(._roommate_Soldier_def-1)
   1627  1347				   .L0295jumptablelo
   1628  1347		       4a		      .byte.b	<(._roommate_Enemy_def-1)
   1629  1348		       71		      .byte.b	<(._roommate_Air_Missile_def-1)
   1630  1349		       80		      .byte.b	<(._roommate_Fuel_def-1)
   1631  134a		       8f		      .byte.b	<(._roommate_Soldier_def-1)
   1632  134b				   .
   1633  134b							; 
   1634  134b
   1635  134b				   ._roommate_Enemy_def
   1636  134b							; _roommate_Enemy_def
   1637  134b
   1638  134b				   .L0296		;  if frame_counter{2} then player0: 
   1639  134b
   1640  134b		       a5 d5		      LDA	frame_counter
   1641  134d		       29 04		      AND	#4
   1642  134f		       f0 0c		      BEQ	.skipL0296
   1643  1351				   .condpart14
   1644  1351		       a2 f4		      LDX	#<player14then_0
   1645  1353		       86 8a		      STX	player0pointerlo
   1646  1355		       a9 fe		      LDA	#>player14then_0
   1647  1357		       85 8b		      STA	player0pointerhi
   1648  1359		       a9 06		      LDA	#6
   1649  135b		       85 8e		      STA	player0height
   1650  135d				   .skipL0296
   1651  135d				   .L0297		;  if !frame_counter{2} then player0: 
   1652  135d
   1653  135d		       a5 d5		      LDA	frame_counter
   1654  135f		       29 04		      AND	#4
   1655  1361		       d0 0c		      BNE	.skipL0297
   1656  1363				   .condpart15
   1657  1363		       a2 00		      LDX	#<player15then_0
   1658  1365		       86 8a		      STX	player0pointerlo
   1659  1367		       a9 ff		      LDA	#>player15then_0
   1660  1369		       85 8b		      STA	player0pointerhi
   1661  136b		       a9 06		      LDA	#6
   1662  136d		       85 8e		      STA	player0height
   1663  136f				   .skipL0297
   1664  136f				   .L0298		;  goto _roommate_End_def
   1665  136f
   1666  136f		       4c b4 d3 	      jmp	._roommate_End_def
   1667  1372
   1668  1372				   .
   1669  1372							; 
   1670  1372
   1671  1372				   ._roommate_Air_Missile_def
   1672  1372							; _roommate_Air_Missile_def
   1673  1372
   1674  1372				   .L0299		;  player0: 
   1675  1372
   1676  1372		       a2 07		      LDX	#<playerL0299_0
   1677  1374		       86 8a		      STX	player0pointerlo
   1678  1376		       a9 ff		      LDA	#>playerL0299_0
   1679  1378		       85 8b		      STA	player0pointerhi
   1680  137a		       a9 0b		      LDA	#11
   1681  137c		       85 8e		      STA	player0height
   1682  137e				   .L0300		;  goto _roommate_End_def
   1683  137e
   1684  137e		       4c b4 d3 	      jmp	._roommate_End_def
   1685  1381
   1686  1381				   .
   1687  1381							; 
   1688  1381
   1689  1381				   ._roommate_Fuel_def
   1690  1381							; _roommate_Fuel_def
   1691  1381
   1692  1381				   .L0301		;  player0: 
   1693  1381
   1694  1381		       a2 13		      LDX	#<playerL0301_0
   1695  1383		       86 8a		      STX	player0pointerlo
   1696  1385		       a9 ff		      LDA	#>playerL0301_0
   1697  1387		       85 8b		      STA	player0pointerhi
   1698  1389		       a9 18		      LDA	#24
   1699  138b		       85 8e		      STA	player0height
   1700  138d				   .L0302		;  goto _roommate_End_def
   1701  138d
   1702  138d		       4c b4 d3 	      jmp	._roommate_End_def
   1703  1390
   1704  1390				   .
   1705  1390							; 
   1706  1390
   1707  1390				   ._roommate_Soldier_def
   1708  1390							; _roommate_Soldier_def
   1709  1390
   1710  1390				   .L0303		;  if frame_counter{2} then player0: 
   1711  1390
   1712  1390		       a5 d5		      LDA	frame_counter
   1713  1392		       29 04		      AND	#4
   1714  1394		       f0 0c		      BEQ	.skipL0303
   1715  1396				   .condpart16
   1716  1396		       a2 2c		      LDX	#<player16then_0
   1717  1398		       86 8a		      STX	player0pointerlo
   1718  139a		       a9 ff		      LDA	#>player16then_0
   1719  139c		       85 8b		      STA	player0pointerhi
   1720  139e		       a9 03		      LDA	#3
   1721  13a0		       85 8e		      STA	player0height
   1722  13a2				   .skipL0303
   1723  13a2				   .L0304		;  if !frame_counter{2} then player0: 
   1724  13a2
   1725  13a2		       a5 d5		      LDA	frame_counter
   1726  13a4		       29 04		      AND	#4
   1727  13a6		       d0 0c		      BNE	.skipL0304
   1728  13a8				   .condpart17
   1729  13a8		       a2 30		      LDX	#<player17then_0
   1730  13aa		       86 8a		      STX	player0pointerlo
   1731  13ac		       a9 ff		      LDA	#>player17then_0
   1732  13ae		       85 8b		      STA	player0pointerhi
   1733  13b0		       a9 03		      LDA	#3
   1734  13b2		       85 8e		      STA	player0height
   1735  13b4				   .skipL0304
   1736  13b4				   ._roommate_End_def
   1737  13b4							; _roommate_End_def
   1738  13b4
   1739  13b4				   .
   1740  13b4							; 
   1741  13b4
   1742  13b4				   .
   1743  13b4							; 
   1744  13b4
   1745  13b4				   .L0305		;  if !frame_counter{4} then _Skip_Wall_Movement
   1746  13b4
   1747  13b4		       a5 d5		      LDA	frame_counter
   1748  13b6		       29 10		      AND	#16
   1749  13b8					      if	((* - ._Skip_Wall_Movement) < 127) && ((* - ._Skip_Wall_Movement) > -128)
   1750  13b8		       f0 2e		      BEQ	._Skip_Wall_Movement
   1751  13ba				  -	      else
   1752  13ba				  -	      bne	.2skip_Skip_Wall_Movement
   1753  13ba				  -	      jmp	._Skip_Wall_Movement
   1754  13ba				  -.2skip_Skip_Wall_Movement
   1755  13ba					      endif
   1756  13ba				   .L0306		;  if r_extra_wall_type_and_range  <  4 then _Finish_Interior_Movement
   1757  13ba
   1758  13ba		       ad eb f0 	      LDA	r_extra_wall_type_and_range
   1759  13bd		       c9 04		      CMP	#4
   1760  13bf					      if	((* - ._Finish_Interior_Movement) < 127) && ((* - ._Finish_Interior_Movement) > -128)
   1761  13bf		       90 51		      bcc	._Finish_Interior_Movement
   1762  13c1				  -	      else
   1763  13c1				  -	      bcs	.3skip_Finish_Interior_Movement
   1764  13c1				  -	      jmp	._Finish_Interior_Movement
   1765  13c1				  -.3skip_Finish_Interior_Movement
   1766  13c1					      endif
   1767  13c1				   .L0307		;  if _Bit1_Wall_Dir{1} then extra_wall_move_x  =  extra_wall_move_x  -  1 else extra_wall_move_x  =  extra_wall_move_x  +  1
   1768  13c1
   1769  13c1		       a5 ec		      LDA	_Bit1_Wall_Dir
   1770  13c3		       29 02		      AND	#2
   1771  13c5		       f0 05		      BEQ	.skipL0307
   1772  13c7				   .condpart18
   1773  13c7		       c6 dc		      DEC	extra_wall_move_x
   1774  13c9		       4c ce d3 	      jmp	.skipelse0
   1775  13cc				   .skipL0307
   1776  13cc		       e6 dc		      INC	extra_wall_move_x
   1777  13ce				   .skipelse0
   1778  13ce				   .L0308		;  if extra_wall_move_x  =  r_extra_wall_type_and_range then _Bit1_Wall_Dir{1}  =  1
   1779  13ce
   1780  13ce		       a5 dc		      LDA	extra_wall_move_x
   1781  13d0		       cd eb f0 	      CMP	r_extra_wall_type_and_range
   1782  13d3		       d0 06		      BNE	.skipL0308
   1783  13d5				   .condpart19
   1784  13d5		       a5 ec		      LDA	_Bit1_Wall_Dir
   1785  13d7		       09 02		      ORA	#2
   1786  13d9		       85 ec		      STA	_Bit1_Wall_Dir
   1787  13db				   .skipL0308
   1788  13db				   .L0309		;  if !extra_wall_move_x then _Bit1_Wall_Dir{1}  =  0
   1789  13db
   1790  13db		       a5 dc		      LDA	extra_wall_move_x
   1791  13dd		       d0 06		      BNE	.skipL0309
   1792  13df				   .condpart20
   1793  13df		       a5 ec		      LDA	_Bit1_Wall_Dir
   1794  13e1		       29 fd		      AND	#253
   1795  13e3		       85 ec		      STA	_Bit1_Wall_Dir
   1796  13e5				   .skipL0309
   1797  13e5				   .L0310		;  goto _Finish_Interior_Movement
   1798  13e5
   1799  13e5		       4c 12 d4 	      jmp	._Finish_Interior_Movement
   1800  13e8
   1801  13e8				   ._Skip_Wall_Movement
   1802  13e8							; _Skip_Wall_Movement
   1803  13e8
   1804  13e8				   .
   1805  13e8							; 
   1806  13e8
   1807  13e8				   .L0311		;  if r_roommate_type_and_range  <  4 then _Finish_Interior_Movement
   1808  13e8
   1809  13e8		       ad e8 f0 	      LDA	r_roommate_type_and_range
   1810  13eb		       c9 04		      CMP	#4
   1811  13ed					      if	((* - ._Finish_Interior_Movement) < 127) && ((* - ._Finish_Interior_Movement) > -128)
   1812  13ed		       90 23		      bcc	._Finish_Interior_Movement
   1813  13ef				  -	      else
   1814  13ef				  -	      bcs	.4skip_Finish_Interior_Movement
   1815  13ef				  -	      jmp	._Finish_Interior_Movement
   1816  13ef				  -.4skip_Finish_Interior_Movement
   1817  13ef					      endif
   1818  13ef				   .L0312		;  if _Bit0_roommate_Dir{0} then roommate_move_x  =  roommate_move_x  -  1 else roommate_move_x  =  roommate_move_x  +  1
   1819  13ef
   1820  13ef		       a5 ec		      LDA	_Bit0_roommate_Dir
   1821  13f1		       4a		      LSR
   1822  13f2		       90 05		      BCC	.skipL0312
   1823  13f4				   .condpart21
   1824  13f4		       c6 dd		      DEC	roommate_move_x
   1825  13f6		       4c fb d3 	      jmp	.skipelse1
   1826  13f9				   .skipL0312
   1827  13f9		       e6 dd		      INC	roommate_move_x
   1828  13fb				   .skipelse1
   1829  13fb				   .L0313		;  if roommate_move_x	=  r_roommate_type_and_range then _Bit0_roommate_Dir{0}  =  1
   1830  13fb
   1831  13fb		       a5 dd		      LDA	roommate_move_x
   1832  13fd		       cd e8 f0 	      CMP	r_roommate_type_and_range
   1833  1400		       d0 06		      BNE	.skipL0313
   1834  1402				   .condpart22
   1835  1402		       a5 ec		      LDA	_Bit0_roommate_Dir
   1836  1404		       09 01		      ORA	#1
   1837  1406		       85 ec		      STA	_Bit0_roommate_Dir
   1838  1408				   .skipL0313
   1839  1408				   .L0314		;  if !roommate_move_x then _Bit0_roommate_Dir{0}  =  0
   1840  1408
   1841  1408		       a5 dd		      LDA	roommate_move_x
   1842  140a		       d0 06		      BNE	.skipL0314
   1843  140c				   .condpart23
   1844  140c		       a5 ec		      LDA	_Bit0_roommate_Dir
   1845  140e		       29 fe		      AND	#254
   1846  1410		       85 ec		      STA	_Bit0_roommate_Dir
   1847  1412				   .skipL0314
   1848  1412				   .
   1849  1412							; 
   1850  1412
   1851  1412				   ._Finish_Interior_Movement
   1852  1412							; _Finish_Interior_Movement
   1853  1412
   1854  1412				   .
   1855  1412							; 
   1856  1412
   1857  1412				   .L0315		;  frame_counter  =  frame_counter  +	1
   1858  1412
   1859  1412		       e6 d5		      INC	frame_counter
   1860  1414				   .
   1861  1414							; 
   1862  1414
   1863  1414				   .
   1864  1414							; 
   1865  1414
   1866  1414				   .L0316		;  if r_extra_wall_startpos_x	=  200 then _Skip_extra_Wall
   1867  1414
   1868  1414		       ad ee f0 	      LDA	r_extra_wall_startpos_x
   1869  1417		       c9 c8		      CMP	#200
   1870  1419					      if	((* - ._Skip_extra_Wall) < 127) && ((* - ._Skip_extra_Wall) > -128)
   1871  1419		       f0 17		      BEQ	._Skip_extra_Wall
   1872  141b				  -	      else
   1873  141b				  -	      bne	.5skip_Skip_extra_Wall
   1874  141b				  -	      jmp	._Skip_extra_Wall
   1875  141b				  -.5skip_Skip_extra_Wall
   1876  141b					      endif
   1877  141b				   .L0317		;  ballx  =  r_extra_wall_startpos_x  +  extra_wall_move_x
   1878  141b
   1879  141b		       ad ee f0 	      LDA	r_extra_wall_startpos_x
   1880  141e		       18		      CLC
   1881  141f		       65 dc		      ADC	extra_wall_move_x
   1882  1421		       85 84		      STA	ballx
   1883  1423				   .L0318		;  bally  =  47
   1884  1423
   1885  1423		       a9 2f		      LDA	#47
   1886  1425		       85 89		      STA	bally
   1887  1427				   .L0319		;  ballheight	=  23
   1888  1427
   1889  1427		       a9 17		      LDA	#23
   1890  1429		       85 92		      STA	ballheight
   1891  142b				   .L0320		;  CTRLPF  =  r_extra_wall_width  |  1
   1892  142b
   1893  142b		       ad ec f0 	      LDA	r_extra_wall_width
   1894  142e		       09 01		      ORA	#1
   1895  1430		       85 0a		      STA	CTRLPF
   1896  1432				   ._Skip_extra_Wall
   1897  1432							; _Skip_extra_Wall
   1898  1432
   1899  1432				   .
   1900  1432							; 
   1901  1432
   1902  1432				   .L0321		;  if !_Bit3_Ball_Shot_Moving{3} then _Skip_ball_shot
   1903  1432
   1904  1432		       a5 ec		      LDA	_Bit3_Ball_Shot_Moving
   1905  1434		       29 08		      AND	#8
   1906  1436					      if	((* - ._Skip_ball_shot) < 127) && ((* - ._Skip_ball_shot) > -128)
   1907  1436		       f0 08		      BEQ	._Skip_ball_shot
   1908  1438				  -	      else
   1909  1438				  -	      bne	.6skip_Skip_ball_shot
   1910  1438				  -	      jmp	._Skip_ball_shot
   1911  1438				  -.6skip_Skip_ball_shot
   1912  1438					      endif
   1913  1438				   .L0322		;  ballheight	=  2
   1914  1438
   1915  1438		       a9 02		      LDA	#2
   1916  143a		       85 92		      STA	ballheight
   1917  143c				   .L0323		;  CTRLPF  =  %00010001
   1918  143c
   1919  143c		       a9 11		      LDA	#%00010001
   1920  143e		       85 0a		      STA	CTRLPF
   1921  1440				   ._Skip_ball_shot
   1922  1440							; _Skip_ball_shot
   1923  1440
   1924  1440				   .
   1925  1440							; 
   1926  1440
   1927  1440				   .
   1928  1440							; 
   1929  1440
   1930  1440				   .L0324		;  if r_roommate_startpos_y  =  200 then _Skip_enemy
   1931  1440
   1932  1440		       ad ea f0 	      LDA	r_roommate_startpos_y
   1933  1443		       c9 c8		      CMP	#200
   1934  1445					      if	((* - ._Skip_enemy) < 127) && ((* - ._Skip_enemy) > -128)
   1935  1445		       f0 0d		      BEQ	._Skip_enemy
   1936  1447				  -	      else
   1937  1447				  -	      bne	.7skip_Skip_enemy
   1938  1447				  -	      jmp	._Skip_enemy
   1939  1447				  -.7skip_Skip_enemy
   1940  1447					      endif
   1941  1447				   .L0325		;  player0x  =  r_roommate_startpos_x	+  roommate_move_x
   1942  1447
   1943  1447		       ad e9 f0 	      LDA	r_roommate_startpos_x
   1944  144a		       18		      CLC
   1945  144b		       65 dd		      ADC	roommate_move_x
   1946  144d		       85 80		      STA	player0x
   1947  144f				   .L0326		;  player0y  =  r_roommate_startpos_y
   1948  144f
   1949  144f		       ad ea f0 	      LDA	r_roommate_startpos_y
   1950  1452		       85 85		      STA	player0y
   1951  1454				   ._Skip_enemy
   1952  1454							; _Skip_enemy
   1953  1454
   1954  1454				   .
   1955  1454							; 
   1956  1454
   1957  1454				   .
   1958  1454							; 
   1959  1454
   1960  1454				   .
   1961  1454							; 
   1962  1454
   1963  1454				   .
   1964  1454							; 
   1965  1454
   1966  1454				   .L0327		;  if delay_counter  >  0 then delay_counter  =  delay_counter  -  1  :  goto _skip_game_action
   1967  1454
   1968  1454		       a9 00		      LDA	#0
   1969  1456		       c5 d4		      CMP	delay_counter
   1970  1458		       b0 05		      BCS	.skipL0327
   1971  145a				   .condpart24
   1972  145a		       c6 d4		      DEC	delay_counter
   1973  145c		       4c 71 d9 	      jmp	._skip_game_action
   1974  145f
   1975  145f				   .skipL0327
   1976  145f				   .
   1977  145f							; 
   1978  145f
   1979  145f				   .L0328		;  if ReceiveBufferSize  >  response_size_minus_1 then goto _Change_Room
   1980  145f
   1981  145f		       a9 1a		      LDA	#response_size_minus_1
   1982  1461		       cd f3 1f 	      CMP	ReceiveBufferSize
   1983  1464		       b0 03		      BCS	.skipL0328
   1984  1466				   .condpart25
   1985  1466		       4c 9d db 	      jmp	._Change_Room
   1986  1469
   1987  1469				   .skipL0328
   1988  1469				   .
   1989  1469							; 
   1990  1469
   1991  1469				   .L0329		;  if _Bit5_Request_Pending{5}  ||  _Bit4_Game_Over{4} then goto _skip_game_action
   1992  1469
   1993  1469		       a5 ec		      LDA	_Bit5_Request_Pending
   1994  146b		       29 20		      AND	#32
   1995  146d		       f0 03		      BEQ	.skipL0329
   1996  146f				   .condpart26
   1997  146f		       4c 78 d4 	      jmp	.condpart27
   1998  1472				   .skipL0329
   1999  1472		       a5 ec		      LDA	_Bit4_Game_Over
   2000  1474		       29 10		      AND	#16
   2001  1476		       f0 03		      BEQ	.skip2OR
   2002  1478				   .condpart27
   2003  1478		       4c 71 d9 	      jmp	._skip_game_action
   2004  147b
   2005  147b				   .skip2OR
   2006  147b				   .
   2007  147b							; 
   2008  147b
   2009  147b				   .L0330		;  if !_Bit2_Level_finished{2} then _game_action
   2010  147b
   2011  147b		       a5 ec		      LDA	_Bit2_Level_finished
   2012  147d		       29 04		      AND	#4
   2013  147f					      if	((* - ._game_action) < 127) && ((* - ._game_action) > -128)
   2014  147f		       f0 50		      BEQ	._game_action
   2015  1481				  -	      else
   2016  1481				  -	      bne	.8skip_game_action
   2017  1481				  -	      jmp	._game_action
   2018  1481				  -.8skip_game_action
   2019  1481					      endif
   2020  1481				   .L0331		;  _Ch0_Sound	=  3  :  _Ch0_Duration	=  1  :  _Ch0_Counter  =  0
   2021  1481
   2022  1481		       a9 03		      LDA	#3
   2023  1483		       85 d9		      STA	_Ch0_Sound
   2024  1485		       a9 01		      LDA	#1
   2025  1487		       85 da		      STA	_Ch0_Duration
   2026  1489		       a9 00		      LDA	#0
   2027  148b		       85 db		      STA	_Ch0_Counter
   2028  148d				   .L0332		;  delay_counter  =  25
   2029  148d
   2030  148d		       a9 19		      LDA	#25
   2031  148f		       85 d4		      STA	delay_counter
   2032  1491				   .
   2033  1491							; 
   2034  1491
   2035  1491				   .
   2036  1491							; 
   2037  1491
   2038  1491				   .L0333		;  if pfscore2 then pfscore2  =  pfscore2  /  2  :  score  =  score  +  100  :  goto _skip_game_action
   2039  1491
   2040  1491		       a5 f3		      LDA	pfscore2
   2041  1493		       f0 17		      BEQ	.skipL0333
   2042  1495				   .condpart28
   2043  1495		       a5 f3		      LDA	pfscore2
   2044  1497		       4a		      lsr
   2045  1498		       85 f3		      STA	pfscore2
   2046  149a		       f8		      SED
   2047  149b		       18		      CLC
   2048  149c		       a5 94		      LDA	score+1
   2049  149e		       69 01		      ADC	#$01
   2050  14a0		       85 94		      STA	score+1
   2051  14a2		       a5 93		      LDA	score
   2052  14a4		       69 00		      ADC	#$00
   2053  14a6		       85 93		      STA	score
   2054  14a8		       d8		      CLD
   2055  14a9		       4c 71 d9 	      jmp	._skip_game_action
   2056  14ac
   2057  14ac				   .skipL0333
   2058  14ac				   .
   2059  14ac							; 
   2060  14ac
   2061  14ac				   .
   2062  14ac							; 
   2063  14ac
   2064  14ac				   .L0334		;  score  =  score  +	200
   2065  14ac
   2066  14ac		       f8		      SED
   2067  14ad		       18		      CLC
   2068  14ae		       a5 94		      LDA	score+1
   2069  14b0		       69 02		      ADC	#$02
   2070  14b2		       85 94		      STA	score+1
   2071  14b4		       a5 93		      LDA	score
   2072  14b6		       69 00		      ADC	#$00
   2073  14b8		       85 93		      STA	score
   2074  14ba		       d8		      CLD
   2075  14bb				   .L0335		;  pfscore1  =  pfscore1  /  4
   2076  14bb
   2077  14bb		       a5 f2		      LDA	pfscore1
   2078  14bd		       4a		      lsr
   2079  14be		       4a		      lsr
   2080  14bf		       85 f2		      STA	pfscore1
   2081  14c1				   .L0336		;  if !pfscore1 then _Bit2_Level_finished{2}  =  0  :	goto _Level_Up
   2082  14c1
   2083  14c1		       a5 f2		      LDA	pfscore1
   2084  14c3		       d0 09		      BNE	.skipL0336
   2085  14c5				   .condpart29
   2086  14c5		       a5 ec		      LDA	_Bit2_Level_finished
   2087  14c7		       29 fb		      AND	#251
   2088  14c9		       85 ec		      STA	_Bit2_Level_finished
   2089  14cb		       4c 27 db 	      jmp	._Level_Up
   2090  14ce
   2091  14ce				   .skipL0336
   2092  14ce				   .L0337		;  goto _skip_game_action
   2093  14ce
   2094  14ce		       4c 71 d9 	      jmp	._skip_game_action
   2095  14d1
   2096  14d1				   .
   2097  14d1							; 
   2098  14d1
   2099  14d1				   .
   2100  14d1							; 
   2101  14d1
   2102  14d1				   ._game_action
   2103  14d1							; _game_action
   2104  14d1
   2105  14d1				   .
   2106  14d1							; 
   2107  14d1
   2108  14d1				   .L0338		;  if frame_counter then _Skip_dec_game_counter
   2109  14d1
   2110  14d1		       a5 d5		      LDA	frame_counter
   2111  14d3					      if	((* - ._Skip_dec_game_counter) < 127) && ((* - ._Skip_dec_game_counter) > -128)
   2112  14d3		       d0 2b		      BNE	._Skip_dec_game_counter
   2113  14d5				  -	      else
   2114  14d5				  -	      beq	.9skip_Skip_dec_game_counter
   2115  14d5				  -	      jmp	._Skip_dec_game_counter
   2116  14d5				  -.9skip_Skip_dec_game_counter
   2117  14d5					      endif
   2118  14d5				   .
   2119  14d5							; 
   2120  14d5
   2121  14d5				   .L0339		;  if !pfscore2 then _Decrease_live_counter
   2122  14d5
   2123  14d5		       a5 f3		      LDA	pfscore2
   2124  14d7					      if	((* - ._Decrease_live_counter) < 127) && ((* - ._Decrease_live_counter) > -128)
   2125  14d7		       f0 08		      BEQ	._Decrease_live_counter
   2126  14d9				  -	      else
   2127  14d9				  -	      bne	.10skip_Decrease_live_counter
   2128  14d9				  -	      jmp	._Decrease_live_counter
   2129  14d9				  -.10skip_Decrease_live_counter
   2130  14d9					      endif
   2131  14d9				   .L0340		;  pfscore2  =  pfscore2  /  2
   2132  14d9
   2133  14d9		       a5 f3		      LDA	pfscore2
   2134  14db		       4a		      lsr
   2135  14dc		       85 f3		      STA	pfscore2
   2136  14de				   .L0341		;  goto _Skip_dec_game_counter
   2137  14de
   2138  14de		       4c 00 d5 	      jmp	._Skip_dec_game_counter
   2139  14e1
   2140  14e1				   ._Decrease_live_counter
   2141  14e1							; _Decrease_live_counter
   2142  14e1
   2143  14e1				   .L0342		;  pfscore1  =  pfscore1  /  4
   2144  14e1
   2145  14e1		       a5 f2		      LDA	pfscore1
   2146  14e3		       4a		      lsr
   2147  14e4		       4a		      lsr
   2148  14e5		       85 f2		      STA	pfscore1
   2149  14e7				   .
   2150  14e7							; 
   2151  14e7
   2152  14e7				   .L0343		;  _Ch0_Sound	=  4  :  _Ch0_Duration	=  1  :  _Ch0_Counter  =  0
   2153  14e7
   2154  14e7		       a9 04		      LDA	#4
   2155  14e9		       85 d9		      STA	_Ch0_Sound
   2156  14eb		       a9 01		      LDA	#1
   2157  14ed		       85 da		      STA	_Ch0_Duration
   2158  14ef		       a9 00		      LDA	#0
   2159  14f1		       85 db		      STA	_Ch0_Counter
   2160  14f3				   .L0344		;  if !pfscore1 then goto _Set_Game_Over else goto _Reset_Level
   2161  14f3
   2162  14f3		       a5 f2		      LDA	pfscore1
   2163  14f5		       d0 06		      BNE	.skipL0344
   2164  14f7				   .condpart30
   2165  14f7		       4c d0 da 	      jmp	._Set_Game_Over
   2166  14fa		       4c 00 d5 	      jmp	.skipelse2
   2167  14fd				   .skipL0344
   2168  14fd		       4c ed da 	      jmp	._Reset_Level
   2169  1500
   2170  1500				   .skipelse2
   2171  1500				   ._Skip_dec_game_counter
   2172  1500							; _Skip_dec_game_counter
   2173  1500
   2174  1500				   .
   2175  1500							; 
   2176  1500
   2177  1500				   .
   2178  1500							; 
   2179  1500
   2180  1500				   .
   2181  1500							; 
   2182  1500
   2183  1500				   .L0345		;  if player0y  =  200 then goto __Skip_Enemy_Fire
   2184  1500
   2185  1500		       a5 85		      LDA	player0y
   2186  1502		       c9 c8		      CMP	#200
   2187  1504		       d0 03		      BNE	.skipL0345
   2188  1506				   .condpart31
   2189  1506		       4c 95 d5 	      jmp	.__Skip_Enemy_Fire
   2190  1509
   2191  1509				   .skipL0345
   2192  1509				   .L0346		;  if _Bit3_Ball_Shot_Moving{3}  ||  roommate_type then goto __Skip_Enemy_Fire
   2193  1509
   2194  1509		       a5 ec		      LDA	_Bit3_Ball_Shot_Moving
   2195  150b		       29 08		      AND	#8
   2196  150d		       f0 03		      BEQ	.skipL0346
   2197  150f				   .condpart32
   2198  150f		       4c 16 d5 	      jmp	.condpart33
   2199  1512				   .skipL0346
   2200  1512		       a5 de		      LDA	roommate_type
   2201  1514		       f0 03		      BEQ	.skip3OR
   2202  1516				   .condpart33
   2203  1516		       4c 95 d5 	      jmp	.__Skip_Enemy_Fire
   2204  1519
   2205  1519				   .skip3OR
   2206  1519				   .
   2207  1519							; 
   2208  1519
   2209  1519				   .L0347		;  _Bit3_Ball_Shot_Moving{3}  =  1  :	_BitOp_Ball_Shot_Dir  =  0  :  Bally_velocity  =  0.0  :  q  =	0
   2210  1519
   2211  1519		       a5 ec		      LDA	_Bit3_Ball_Shot_Moving
   2212  151b		       09 08		      ORA	#8
   2213  151d		       85 ec		      STA	_Bit3_Ball_Shot_Moving
   2214  151f		       a9 00		      LDA	#0
   2215  1521		       85 d6		      STA	_BitOp_Ball_Shot_Dir
   2216  1523		       a2 00		      LDX	#0
   2217  1525		       86 e4		      STX	q
   2218  1527		       a9 00		      LDA	#0
   2219  1529		       85 e3		      STA	Bally_velocity
   2220  152b		       a9 00		      LDA	#0
   2221  152d		       85 e4		      STA	q
   2222  152f				   .
   2223  152f							; 
   2224  152f
   2225  152f				   .L0348		;  ballx  =  player0x	+  4  :  bally	=  player0y  -	5
   2226  152f
   2227  152f		       a5 80		      LDA	player0x
   2228  1531		       18		      CLC
   2229  1532		       69 04		      ADC	#4
   2230  1534		       85 84		      STA	ballx
   2231  1536		       a5 85		      LDA	player0y
   2232  1538		       38		      SEC
   2233  1539		       e9 05		      SBC	#5
   2234  153b		       85 89		      STA	bally
   2235  153d				   .
   2236  153d							; 
   2237  153d
   2238  153d				   .
   2239  153d							; 
   2240  153d
   2241  153d				   .L0349		;  if _Ch0_Sound  <>  3 then _Ch0_Sound  =  2	:  _Ch0_Duration  =  1	:  _Ch0_Counter  =  0
   2242  153d
   2243  153d		       a5 d9		      LDA	_Ch0_Sound
   2244  153f		       c9 03		      CMP	#3
   2245  1541		       f0 0c		      BEQ	.skipL0349
   2246  1543				   .condpart34
   2247  1543		       a9 02		      LDA	#2
   2248  1545		       85 d9		      STA	_Ch0_Sound
   2249  1547		       a9 01		      LDA	#1
   2250  1549		       85 da		      STA	_Ch0_Duration
   2251  154b		       a9 00		      LDA	#0
   2252  154d		       85 db		      STA	_Ch0_Counter
   2253  154f				   .skipL0349
   2254  154f				   .
   2255  154f							; 
   2256  154f
   2257  154f				   .L0350		;  if player1x  >  player0x then _Bit2_Ball_Shot_Dir_Right1{2}  =  1 else _Bit0_Ball_Shot_Dir_Left1{0}  =  1
   2258  154f
   2259  154f		       a5 80		      LDA	player0x
   2260  1551		       c5 81		      CMP	player1x
   2261  1553		       b0 09		      BCS	.skipL0350
   2262  1555				   .condpart35
   2263  1555		       a5 d6		      LDA	_Bit2_Ball_Shot_Dir_Right1
   2264  1557		       09 04		      ORA	#4
   2265  1559		       85 d6		      STA	_Bit2_Ball_Shot_Dir_Right1
   2266  155b		       4c 64 d5 	      jmp	.skipelse3
   2267  155e				   .skipL0350
   2268  155e		       a5 d6		      LDA	_Bit0_Ball_Shot_Dir_Left1
   2269  1560		       09 01		      ORA	#1
   2270  1562		       85 d6		      STA	_Bit0_Ball_Shot_Dir_Left1
   2271  1564				   .skipelse3
   2272  1564				   .L0351		;  if !_Bit2_Ball_Shot_Dir_Right1{2} then __Skip_Additional_Right
   2273  1564
   2274  1564		       a5 d6		      LDA	_Bit2_Ball_Shot_Dir_Right1
   2275  1566		       29 04		      AND	#4
   2276  1568					      if	((* - .__Skip_Additional_Right) < 127) && ((* - .__Skip_Additional_Right) > -128)
   2277  1568		       f0 13		      BEQ	.__Skip_Additional_Right
   2278  156a				  -	      else
   2279  156a				  -	      bne	.11skip__Skip_Additional_Right
   2280  156a				  -	      jmp	.__Skip_Additional_Right
   2281  156a				  -.11skip__Skip_Additional_Right
   2282  156a					      endif
   2283  156a				   .L0352		;  temp4  =  player1x	-  player0x
   2284  156a
   2285  156a		       a5 81		      LDA	player1x
   2286  156c		       38		      SEC
   2287  156d		       e5 80		      SBC	player0x
   2288  156f		       85 9f		      STA	temp4
   2289  1571				   .L0353		;  if temp4  >  25 then _Bit3_Ball_Shot_Dir_Right2{3}	=  1
   2290  1571
   2291  1571		       a9 19		      LDA	#25
   2292  1573		       c5 9f		      CMP	temp4
   2293  1575		       b0 06		      BCS	.skipL0353
   2294  1577				   .condpart36
   2295  1577		       a5 d6		      LDA	_Bit3_Ball_Shot_Dir_Right2
   2296  1579		       09 08		      ORA	#8
   2297  157b		       85 d6		      STA	_Bit3_Ball_Shot_Dir_Right2
   2298  157d				   .skipL0353
   2299  157d				   .__Skip_Additional_Right
   2300  157d							; __Skip_Additional_Right
   2301  157d
   2302  157d				   .L0354		;  if !_Bit0_Ball_Shot_Dir_Left1{0} then __Skip_Enemy_Fire
   2303  157d
   2304  157d		       a5 d6		      LDA	_Bit0_Ball_Shot_Dir_Left1
   2305  157f		       4a		      LSR
   2306  1580					      if	((* - .__Skip_Enemy_Fire) < 127) && ((* - .__Skip_Enemy_Fire) > -128)
   2307  1580		       90 13		      bcc	.__Skip_Enemy_Fire
   2308  1582				  -	      else
   2309  1582				  -	      bcs	.12skip__Skip_Enemy_Fire
   2310  1582				  -	      jmp	.__Skip_Enemy_Fire
   2311  1582				  -.12skip__Skip_Enemy_Fire
   2312  1582					      endif
   2313  1582				   .L0355		;  temp4  =  player0x	-  player1x
   2314  1582
   2315  1582		       a5 80		      LDA	player0x
   2316  1584		       38		      SEC
   2317  1585		       e5 81		      SBC	player1x
   2318  1587		       85 9f		      STA	temp4
   2319  1589				   .L0356		;  if temp4  >  25 then _Bit1_Ball_Shot_Dir_Left2{1}  =  1
   2320  1589
   2321  1589		       a9 19		      LDA	#25
   2322  158b		       c5 9f		      CMP	temp4
   2323  158d		       b0 06		      BCS	.skipL0356
   2324  158f				   .condpart37
   2325  158f		       a5 d6		      LDA	_Bit1_Ball_Shot_Dir_Left2
   2326  1591		       09 02		      ORA	#2
   2327  1593		       85 d6		      STA	_Bit1_Ball_Shot_Dir_Left2
   2328  1595				   .skipL0356
   2329  1595				   .
   2330  1595							; 
   2331  1595
   2332  1595				   .__Skip_Enemy_Fire
   2333  1595							; __Skip_Enemy_Fire
   2334  1595
   2335  1595				   .
   2336  1595							; 
   2337  1595
   2338  1595				   .
   2339  1595							; 
   2340  1595
   2341  1595				   .
   2342  1595							; 
   2343  1595
   2344  1595				   .L0357		;  if !_Bit3_Ball_Shot_Moving{3} then goto __Skip_Enemy_Missile
   2345  1595
   2346  1595		       a5 ec		      LDA	_Bit3_Ball_Shot_Moving
   2347  1597		       29 08		      AND	#8
   2348  1599		       d0 03		      BNE	.skipL0357
   2349  159b				   .condpart38
   2350  159b		       4c 16 d6 	      jmp	.__Skip_Enemy_Missile
   2351  159e
   2352  159e				   .skipL0357
   2353  159e				   .
   2354  159e							; 
   2355  159e
   2356  159e				   .
   2357  159e							; 
   2358  159e
   2359  159e				   .L0358		;  if bally  >  player1y then bally  =  bally	-  1
   2360  159e
   2361  159e		       a5 86		      LDA	player1y
   2362  15a0		       c5 89		      CMP	bally
   2363  15a2		       b0 02		      BCS	.skipL0358
   2364  15a4				   .condpart39
   2365  15a4		       c6 89		      DEC	bally
   2366  15a6				   .skipL0358
   2367  15a6				   .L0359		;  if _Bit0_Ball_Shot_Dir_Left1{0} then ballx	=  ballx  -  1	:  if _Bit1_Ball_Shot_Dir_Left2{1} then ballx  =  ballx  -  1
   2368  15a6
   2369  15a6		       a5 d6		      LDA	_Bit0_Ball_Shot_Dir_Left1
   2370  15a8		       4a		      LSR
   2371  15a9		       90 0a		      BCC	.skipL0359
   2372  15ab				   .condpart40
   2373  15ab		       c6 84		      DEC	ballx
   2374  15ad		       a5 d6		      LDA	_Bit1_Ball_Shot_Dir_Left2
   2375  15af		       29 02		      AND	#2
   2376  15b1		       f0 02		      BEQ	.skip40then
   2377  15b3				   .condpart41
   2378  15b3		       c6 84		      DEC	ballx
   2379  15b5				   .skip40then
   2380  15b5				   .skipL0359
   2381  15b5				   .L0360		;  if _Bit2_Ball_Shot_Dir_Right1{2} then ballx  =  ballx  +  1  :  if _Bit3_Ball_Shot_Dir_Right2{3} then ballx  =  ballx  +  1
   2382  15b5
   2383  15b5		       a5 d6		      LDA	_Bit2_Ball_Shot_Dir_Right1
   2384  15b7		       29 04		      AND	#4
   2385  15b9		       f0 0a		      BEQ	.skipL0360
   2386  15bb				   .condpart42
   2387  15bb		       e6 84		      INC	ballx
   2388  15bd		       a5 d6		      LDA	_Bit3_Ball_Shot_Dir_Right2
   2389  15bf		       29 08		      AND	#8
   2390  15c1		       f0 02		      BEQ	.skip42then
   2391  15c3				   .condpart43
   2392  15c3		       e6 84		      INC	ballx
   2393  15c5				   .skip42then
   2394  15c5				   .skipL0360
   2395  15c5				   .
   2396  15c5							; 
   2397  15c5
   2398  15c5				   .L0361		;  rem apply gravity
   2399  15c5
   2400  15c5				   .L0362		;  Bally_velocity  =  Bally_velocity  +  gravity_missile0
   2401  15c5
   2402  15c5		       a5 e4		      LDA	q
   2403  15c7		       18		      CLC
   2404  15c8		       69 06		      ADC	#6
   2405  15ca		       85 e4		      STA	q
   2406  15cc		       a5 e3		      LDA	Bally_velocity
   2407  15ce		       69 00		      ADC	#0
   2408  15d0		       85 e3		      STA	Bally_velocity
   2409  15d2				   .L0363		;  Bally_position  =  Bally_position  +  Bally_velocity
   2410  15d2
   2411  15d2		       a5 e5		      LDA	r
   2412  15d4		       18		      CLC
   2413  15d5		       65 e4		      ADC	q
   2414  15d7		       85 e5		      STA	r
   2415  15d9		       a5 89		      LDA	Bally_position
   2416  15db		       65 e3		      ADC	Bally_velocity
   2417  15dd		       85 89		      STA	Bally_position
   2418  15df				   .
   2419  15df							; 
   2420  15df
   2421  15df				   .
   2422  15df							; 
   2423  15df
   2424  15df				   .
   2425  15df							; 
   2426  15df
   2427  15df				   .L0364		;  if bally  <  _M_Edge_Top then goto __Delete_Enemy_Missile
   2428  15df
   2429  15df		       a5 89		      LDA	bally
   2430  15e1		       c9 02		      CMP	#_M_Edge_Top
   2431  15e3		       b0 03		      BCS	.skipL0364
   2432  15e5				   .condpart44
   2433  15e5		       4c 0a d6 	      jmp	.__Delete_Enemy_Missile
   2434  15e8
   2435  15e8				   .skipL0364
   2436  15e8				   .L0365		;  if bally  >  _M_Edge_Bottom then goto __Delete_Enemy_Missile
   2437  15e8
   2438  15e8		       a9 58		      LDA	#_M_Edge_Bottom
   2439  15ea		       c5 89		      CMP	bally
   2440  15ec		       b0 03		      BCS	.skipL0365
   2441  15ee				   .condpart45
   2442  15ee		       4c 0a d6 	      jmp	.__Delete_Enemy_Missile
   2443  15f1
   2444  15f1				   .skipL0365
   2445  15f1				   .L0366		;  if ballx  <  _M_Edge_Left then goto __Delete_Enemy_Missile
   2446  15f1
   2447  15f1		       a5 84		      LDA	ballx
   2448  15f3		       c9 0e		      CMP	#_M_Edge_Left
   2449  15f5		       b0 03		      BCS	.skipL0366
   2450  15f7				   .condpart46
   2451  15f7		       4c 0a d6 	      jmp	.__Delete_Enemy_Missile
   2452  15fa
   2453  15fa				   .skipL0366
   2454  15fa				   .L0367		;  if ballx  >  _M_Edge_Right then goto __Delete_Enemy_Missile
   2455  15fa
   2456  15fa		       a9 94		      LDA	#_M_Edge_Right
   2457  15fc		       c5 84		      CMP	ballx
   2458  15fe		       b0 03		      BCS	.skipL0367
   2459  1600				   .condpart47
   2460  1600		       4c 0a d6 	      jmp	.__Delete_Enemy_Missile
   2461  1603
   2462  1603				   .skipL0367
   2463  1603				   .
   2464  1603							; 
   2465  1603
   2466  1603				   .
   2467  1603							; 
   2468  1603
   2469  1603				   .L0368		;  if !collision(playfield,ball) then goto __Skip_Enemy_Missile
   2470  1603
   2471  1603		       24 06		      bit	CXBLPF
   2472  1605		       30 03		      BMI	.skipL0368
   2473  1607				   .condpart48
   2474  1607		       4c 16 d6 	      jmp	.__Skip_Enemy_Missile
   2475  160a
   2476  160a				   .skipL0368
   2477  160a				   .
   2478  160a							; 
   2479  160a
   2480  160a				   .__Delete_Enemy_Missile
   2481  160a							; __Delete_Enemy_Missile
   2482  160a
   2483  160a				   .
   2484  160a							; 
   2485  160a
   2486  160a				   .
   2487  160a							; 
   2488  160a
   2489  160a				   .L0369		;  _Bit3_Ball_Shot_Moving{3}  =  0  :	ballx  =  200  :  bally  =  200
   2490  160a
   2491  160a		       a5 ec		      LDA	_Bit3_Ball_Shot_Moving
   2492  160c		       29 f7		      AND	#247
   2493  160e		       85 ec		      STA	_Bit3_Ball_Shot_Moving
   2494  1610		       a9 c8		      LDA	#200
   2495  1612		       85 84		      STA	ballx
   2496  1614		       85 89		      STA	bally
   2497  1616				   .
   2498  1616							; 
   2499  1616
   2500  1616				   .__Skip_Enemy_Missile
   2501  1616							; __Skip_Enemy_Missile
   2502  1616
   2503  1616				   .
   2504  1616							; 
   2505  1616
   2506  1616				   .
   2507  1616							; 
   2508  1616
   2509  1616				   .
   2510  1616							; 
   2511  1616
   2512  1616				   .
   2513  1616							; 
   2514  1616
   2515  1616				   .
   2516  1616							; 
   2517  1616
   2518  1616				   .L0370		;  if !joy0fire then goto __Skip_Fire
   2519  1616
   2520  1616		       24 0c		      bit	INPT4
   2521  1618		       10 03		      BPL	.skipL0370
   2522  161a				   .condpart49
   2523  161a		       4c ac d6 	      jmp	.__Skip_Fire
   2524  161d
   2525  161d				   .skipL0370
   2526  161d				   .
   2527  161d							; 
   2528  161d
   2529  161d				   .
   2530  161d							; 
   2531  161d
   2532  161d				   .L0371		;  if _Bit7_M0_Moving{7}  ||  _Bit0_P1_Dir_Up{0} then goto __Skip_Fire
   2533  161d
   2534  161d		       24 ec		      BIT	_Bit7_M0_Moving
   2535  161f		       10 03		      BPL	.skipL0371
   2536  1621				   .condpart50
   2537  1621		       4c 29 d6 	      jmp	.condpart51
   2538  1624				   .skipL0371
   2539  1624		       a5 d8		      LDA	_Bit0_P1_Dir_Up
   2540  1626		       4a		      LSR
   2541  1627		       90 03		      BCC	.skip4OR
   2542  1629				   .condpart51
   2543  1629		       4c ac d6 	      jmp	.__Skip_Fire
   2544  162c
   2545  162c				   .skip4OR
   2546  162c				   .
   2547  162c							; 
   2548  162c
   2549  162c				   .
   2550  162c							; 
   2551  162c
   2552  162c				   .
   2553  162c							; 
   2554  162c
   2555  162c				   .L0372		;  _BitOp_M0_Dir  =  _BitOp_P1_Dir
   2556  162c
   2557  162c		       a5 d8		      LDA	_BitOp_P1_Dir
   2558  162e		       85 d7		      STA	_BitOp_M0_Dir
   2559  1630				   .
   2560  1630							; 
   2561  1630
   2562  1630				   .L0373		;  if _BitOp_M0_Dir  =  0  &&	_Bit6_Flip_P1{6} then _BitOp_M0_Dir  =	4
   2563  1630
   2564  1630		       a5 d7		      LDA	_BitOp_M0_Dir
   2565  1632		       c9 00		      CMP	#0
   2566  1634		       d0 08		      BNE	.skipL0373
   2567  1636				   .condpart52
   2568  1636		       24 ec		      BIT	_Bit6_Flip_P1
   2569  1638		       50 04		      BVC	.skip52then
   2570  163a				   .condpart53
   2571  163a		       a9 04		      LDA	#4
   2572  163c		       85 d7		      STA	_BitOp_M0_Dir
   2573  163e				   .skip52then
   2574  163e				   .skipL0373
   2575  163e				   .L0374		;  if _BitOp_M0_Dir  =  0  &&	! _Bit6_Flip_P1{6} then _BitOp_M0_Dir  =  8
   2576  163e
   2577  163e		       a5 d7		      LDA	_BitOp_M0_Dir
   2578  1640		       c9 00		      CMP	#0
   2579  1642		       d0 08		      BNE	.skipL0374
   2580  1644				   .condpart54
   2581  1644		       24 ec		      BIT	_Bit6_Flip_P1
   2582  1646		       70 04		      BVS	.skip54then
   2583  1648				   .condpart55
   2584  1648		       a9 08		      LDA	#8
   2585  164a		       85 d7		      STA	_BitOp_M0_Dir
   2586  164c				   .skip54then
   2587  164c				   .skipL0374
   2588  164c				   .
   2589  164c							; 
   2590  164c
   2591  164c				   .
   2592  164c							; 
   2593  164c
   2594  164c				   .L0375		;  _Bit7_M0_Moving{7}	=  1
   2595  164c
   2596  164c		       a5 ec		      LDA	_Bit7_M0_Moving
   2597  164e		       09 80		      ORA	#128
   2598  1650		       85 ec		      STA	_Bit7_M0_Moving
   2599  1652				   .
   2600  1652							; 
   2601  1652
   2602  1652				   .
   2603  1652							; 
   2604  1652
   2605  1652				   .L0376		;  M0y_velocity  =  0.0  :  u	=  0
   2606  1652
   2607  1652		       a2 00		      LDX	#0
   2608  1654		       86 e7		      STX	t
   2609  1656		       a9 00		      LDA	#0
   2610  1658		       85 e6		      STA	M0y_velocity
   2611  165a		       a9 00		      LDA	#0
   2612  165c		       85 e8		      STA	u
   2613  165e				   .
   2614  165e							; 
   2615  165e
   2616  165e				   .
   2617  165e							; 
   2618  165e
   2619  165e				   .L0377		;  if _Bit1_M0_Dir_Down{1} then missile0x  =  player1x  +  9  :  missile0y  =	player1y  -  1
   2620  165e
   2621  165e		       a5 d7		      LDA	_Bit1_M0_Dir_Down
   2622  1660		       29 02		      AND	#2
   2623  1662		       f0 0e		      BEQ	.skipL0377
   2624  1664				   .condpart56
   2625  1664		       a5 81		      LDA	player1x
   2626  1666		       18		      CLC
   2627  1667		       69 09		      ADC	#9
   2628  1669		       85 82		      STA	missile0x
   2629  166b		       a5 86		      LDA	player1y
   2630  166d		       38		      SEC
   2631  166e		       e9 01		      SBC	#1
   2632  1670		       85 91		      STA	missile0y
   2633  1672				   .skipL0377
   2634  1672				   .L0378		;  if _Bit2_M0_Dir_Left{2} then missile0x  =  player1x  +  2  :  missile0y  =	player1y  -  3
   2635  1672
   2636  1672		       a5 d7		      LDA	_Bit2_M0_Dir_Left
   2637  1674		       29 04		      AND	#4
   2638  1676		       f0 0e		      BEQ	.skipL0378
   2639  1678				   .condpart57
   2640  1678		       a5 81		      LDA	player1x
   2641  167a		       18		      CLC
   2642  167b		       69 02		      ADC	#2
   2643  167d		       85 82		      STA	missile0x
   2644  167f		       a5 86		      LDA	player1y
   2645  1681		       38		      SEC
   2646  1682		       e9 03		      SBC	#3
   2647  1684		       85 91		      STA	missile0y
   2648  1686				   .skipL0378
   2649  1686				   .L0379		;  if _Bit3_M0_Dir_Right{3} then missile0x  =	player1x  +  16  :  missile0y  =  player1y  -  3
   2650  1686
   2651  1686		       a5 d7		      LDA	_Bit3_M0_Dir_Right
   2652  1688		       29 08		      AND	#8
   2653  168a		       f0 0e		      BEQ	.skipL0379
   2654  168c				   .condpart58
   2655  168c		       a5 81		      LDA	player1x
   2656  168e		       18		      CLC
   2657  168f		       69 10		      ADC	#16
   2658  1691		       85 82		      STA	missile0x
   2659  1693		       a5 86		      LDA	player1y
   2660  1695		       38		      SEC
   2661  1696		       e9 03		      SBC	#3
   2662  1698		       85 91		      STA	missile0y
   2663  169a				   .skipL0379
   2664  169a				   .
   2665  169a							; 
   2666  169a
   2667  169a				   .
   2668  169a							; 
   2669  169a
   2670  169a				   .L0380		;  if _Ch0_Sound  <>  3 then _Ch0_Sound  =  2	:  _Ch0_Duration  =  1	:  _Ch0_Counter  =  0
   2671  169a
   2672  169a		       a5 d9		      LDA	_Ch0_Sound
   2673  169c		       c9 03		      CMP	#3
   2674  169e		       f0 0c		      BEQ	.skipL0380
   2675  16a0				   .condpart59
   2676  16a0		       a9 02		      LDA	#2
   2677  16a2		       85 d9		      STA	_Ch0_Sound
   2678  16a4		       a9 01		      LDA	#1
   2679  16a6		       85 da		      STA	_Ch0_Duration
   2680  16a8		       a9 00		      LDA	#0
   2681  16aa		       85 db		      STA	_Ch0_Counter
   2682  16ac				   .skipL0380
   2683  16ac				   .
   2684  16ac							; 
   2685  16ac
   2686  16ac				   .__Skip_Fire
   2687  16ac							; __Skip_Fire
   2688  16ac
   2689  16ac				   .
   2690  16ac							; 
   2691  16ac
   2692  16ac				   .
   2693  16ac							; 
   2694  16ac
   2695  16ac				   .
   2696  16ac							; 
   2697  16ac
   2698  16ac				   .
   2699  16ac							; 
   2700  16ac
   2701  16ac				   .L0381		;  if !_Bit7_M0_Moving{7} then goto __Skip_Missile
   2702  16ac
   2703  16ac		       24 ec		      BIT	_Bit7_M0_Moving
   2704  16ae		       30 03		      BMI	.skipL0381
   2705  16b0				   .condpart60
   2706  16b0		       4c 2b d7 	      jmp	.__Skip_Missile
   2707  16b3
   2708  16b3				   .skipL0381
   2709  16b3				   .
   2710  16b3							; 
   2711  16b3
   2712  16b3				   .
   2713  16b3							; 
   2714  16b3
   2715  16b3				   .L0382		;  if _Bit1_M0_Dir_Down{1} then missile0y  =  missile0y  +  2
   2716  16b3
   2717  16b3		       a5 d7		      LDA	_Bit1_M0_Dir_Down
   2718  16b5		       29 02		      AND	#2
   2719  16b7		       f0 07		      BEQ	.skipL0382
   2720  16b9				   .condpart61
   2721  16b9		       a5 91		      LDA	missile0y
   2722  16bb		       18		      CLC
   2723  16bc		       69 02		      ADC	#2
   2724  16be		       85 91		      STA	missile0y
   2725  16c0				   .skipL0382
   2726  16c0				   .L0383		;  if _Bit2_M0_Dir_Left{2} then missile0x  =  missile0x  -  2
   2727  16c0
   2728  16c0		       a5 d7		      LDA	_Bit2_M0_Dir_Left
   2729  16c2		       29 04		      AND	#4
   2730  16c4		       f0 07		      BEQ	.skipL0383
   2731  16c6				   .condpart62
   2732  16c6		       a5 82		      LDA	missile0x
   2733  16c8		       38		      SEC
   2734  16c9		       e9 02		      SBC	#2
   2735  16cb		       85 82		      STA	missile0x
   2736  16cd				   .skipL0383
   2737  16cd				   .L0384		;  if _Bit3_M0_Dir_Right{3} then missile0x  =	missile0x  +  2
   2738  16cd
   2739  16cd		       a5 d7		      LDA	_Bit3_M0_Dir_Right
   2740  16cf		       29 08		      AND	#8
   2741  16d1		       f0 07		      BEQ	.skipL0384
   2742  16d3				   .condpart63
   2743  16d3		       a5 82		      LDA	missile0x
   2744  16d5		       18		      CLC
   2745  16d6		       69 02		      ADC	#2
   2746  16d8		       85 82		      STA	missile0x
   2747  16da				   .skipL0384
   2748  16da				   .
   2749  16da							; 
   2750  16da
   2751  16da				   .L0385		;  rem apply gravity
   2752  16da
   2753  16da				   .L0386		;  M0y_velocity  =  M0y_velocity  +  gravity_missile0
   2754  16da
   2755  16da		       a5 e7		      LDA	t
   2756  16dc		       18		      CLC
   2757  16dd		       69 06		      ADC	#6
   2758  16df		       85 e7		      STA	t
   2759  16e1		       a5 e6		      LDA	M0y_velocity
   2760  16e3		       69 00		      ADC	#0
   2761  16e5		       85 e6		      STA	M0y_velocity
   2762  16e7				   .L0387		;  M0y_position  =  M0y_position  +  M0y_velocity
   2763  16e7
   2764  16e7		       a5 e8		      LDA	u
   2765  16e9		       18		      CLC
   2766  16ea		       65 e7		      ADC	t
   2767  16ec		       85 e8		      STA	u
   2768  16ee		       a5 91		      LDA	M0y_position
   2769  16f0		       65 e6		      ADC	M0y_velocity
   2770  16f2		       85 91		      STA	M0y_position
   2771  16f4				   .
   2772  16f4							; 
   2773  16f4
   2774  16f4				   .
   2775  16f4							; 
   2776  16f4
   2777  16f4				   .
   2778  16f4							; 
   2779  16f4
   2780  16f4				   .L0388		;  if missile0y  <  _M_Edge_Top then goto __Delete_Missile
   2781  16f4
   2782  16f4		       a5 91		      LDA	missile0y
   2783  16f6		       c9 02		      CMP	#_M_Edge_Top
   2784  16f8		       b0 03		      BCS	.skipL0388
   2785  16fa				   .condpart64
   2786  16fa		       4c 1f d7 	      jmp	.__Delete_Missile
   2787  16fd
   2788  16fd				   .skipL0388
   2789  16fd				   .L0389		;  if missile0y  >  _M_Edge_Bottom then goto __Delete_Missile
   2790  16fd
   2791  16fd		       a9 58		      LDA	#_M_Edge_Bottom
   2792  16ff		       c5 91		      CMP	missile0y
   2793  1701		       b0 03		      BCS	.skipL0389
   2794  1703				   .condpart65
   2795  1703		       4c 1f d7 	      jmp	.__Delete_Missile
   2796  1706
   2797  1706				   .skipL0389
   2798  1706				   .L0390		;  if missile0x  <  _M_Edge_Left then goto __Delete_Missile
   2799  1706
   2800  1706		       a5 82		      LDA	missile0x
   2801  1708		       c9 0e		      CMP	#_M_Edge_Left
   2802  170a		       b0 03		      BCS	.skipL0390
   2803  170c				   .condpart66
   2804  170c		       4c 1f d7 	      jmp	.__Delete_Missile
   2805  170f
   2806  170f				   .skipL0390
   2807  170f				   .L0391		;  if missile0x  >  _M_Edge_Right then goto __Delete_Missile
   2808  170f
   2809  170f		       a9 94		      LDA	#_M_Edge_Right
   2810  1711		       c5 82		      CMP	missile0x
   2811  1713		       b0 03		      BCS	.skipL0391
   2812  1715				   .condpart67
   2813  1715		       4c 1f d7 	      jmp	.__Delete_Missile
   2814  1718
   2815  1718				   .skipL0391
   2816  1718				   .
   2817  1718							; 
   2818  1718
   2819  1718				   .
   2820  1718							; 
   2821  1718
   2822  1718				   .L0392		;  if !collision(playfield,missile0) then goto __Skip_Missile
   2823  1718
   2824  1718		       24 04		      bit	CXM0FB
   2825  171a		       30 03		      BMI	.skipL0392
   2826  171c				   .condpart68
   2827  171c		       4c 2b d7 	      jmp	.__Skip_Missile
   2828  171f
   2829  171f				   .skipL0392
   2830  171f				   .
   2831  171f							; 
   2832  171f
   2833  171f				   .
   2834  171f							; 
   2835  171f
   2836  171f				   .
   2837  171f							; 
   2838  171f
   2839  171f				   .
   2840  171f							; 
   2841  171f
   2842  171f				   .__Delete_Missile
   2843  171f							; __Delete_Missile
   2844  171f
   2845  171f				   .
   2846  171f							; 
   2847  171f
   2848  171f				   .
   2849  171f							; 
   2850  171f
   2851  171f				   .L0393		;  _Bit7_M0_Moving{7}	=  0  :  missile0x  =  200  :  missile0y  =  200
   2852  171f
   2853  171f		       a5 ec		      LDA	_Bit7_M0_Moving
   2854  1721		       29 7f		      AND	#127
   2855  1723		       85 ec		      STA	_Bit7_M0_Moving
   2856  1725		       a9 c8		      LDA	#200
   2857  1727		       85 82		      STA	missile0x
   2858  1729		       85 91		      STA	missile0y
   2859  172b				   .
   2860  172b							; 
   2861  172b
   2862  172b				   .__Skip_Missile
   2863  172b							; __Skip_Missile
   2864  172b
   2865  172b				   .
   2866  172b							; 
   2867  172b
   2868  172b				   .
   2869  172b							; 
   2870  172b
   2871  172b				   .
   2872  172b							; 
   2873  172b
   2874  172b				   .
   2875  172b							; 
   2876  172b
   2877  172b				   .L0394		;  if !collision(player0,missile0) then __Skip_Shot_Enemy
   2878  172b
   2879  172b		       24 00		      bit	CXM0P
   2880  172d					      if	((* - .__Skip_Shot_Enemy) < 127) && ((* - .__Skip_Shot_Enemy) > -128)
   2881  172d		       50 38		      bvc	.__Skip_Shot_Enemy
   2882  172f				  -	      else
   2883  172f				  -	      bvs	.13skip__Skip_Shot_Enemy
   2884  172f				  -	      jmp	.__Skip_Shot_Enemy
   2885  172f				  -.13skip__Skip_Shot_Enemy
   2886  172f					      endif
   2887  172f				   .
   2888  172f							; 
   2889  172f
   2890  172f				   .
   2891  172f							; 
   2892  172f
   2893  172f				   .L0395		;  _Bit7_M0_Moving{7}	=  0  :  missile0x  =  200  :  missile0y  =  200
   2894  172f
   2895  172f		       a5 ec		      LDA	_Bit7_M0_Moving
   2896  1731		       29 7f		      AND	#127
   2897  1733		       85 ec		      STA	_Bit7_M0_Moving
   2898  1735		       a9 c8		      LDA	#200
   2899  1737		       85 82		      STA	missile0x
   2900  1739		       85 91		      STA	missile0y
   2901  173b				   .
   2902  173b							; 
   2903  173b
   2904  173b				   .L0396		;  if roommate_type  >  1 then __Skip_Shot_Enemy
   2905  173b
   2906  173b		       a9 01		      LDA	#1
   2907  173d		       c5 de		      CMP	roommate_type
   2908  173f					      if	((* - .__Skip_Shot_Enemy) < 127) && ((* - .__Skip_Shot_Enemy) > -128)
   2909  173f		       90 26		      bcc	.__Skip_Shot_Enemy
   2910  1741				  -	      else
   2911  1741				  -	      bcs	.14skip__Skip_Shot_Enemy
   2912  1741				  -	      jmp	.__Skip_Shot_Enemy
   2913  1741				  -.14skip__Skip_Shot_Enemy
   2914  1741					      endif
   2915  1741				   .
   2916  1741							; 
   2917  1741
   2918  1741				   .L0397		;  _Ch0_Sound	=  1  :  _Ch0_Duration	=  1  :  _Ch0_Counter  =  0
   2919  1741
   2920  1741		       a9 01		      LDA	#1
   2921  1743		       85 d9		      STA	_Ch0_Sound
   2922  1745		       85 da		      STA	_Ch0_Duration
   2923  1747		       a9 00		      LDA	#0
   2924  1749		       85 db		      STA	_Ch0_Counter
   2925  174b				   .
   2926  174b							; 
   2927  174b
   2928  174b				   .
   2929  174b							; 
   2930  174b
   2931  174b				   .L0398		;  player0y  =  200  :  w_roommate_startpos_y	=  200	:  score  =  score  +  40
   2932  174b
   2933  174b		       a9 c8		      LDA	#200
   2934  174d		       85 85		      STA	player0y
   2935  174f		       8d 6a f0 	      STA	w_roommate_startpos_y
   2936  1752		       f8		      SED
   2937  1753		       18		      CLC
   2938  1754		       a5 95		      LDA	score+2
   2939  1756		       69 40		      ADC	#$40
   2940  1758		       85 95		      STA	score+2
   2941  175a		       a5 94		      LDA	score+1
   2942  175c		       69 00		      ADC	#$00
   2943  175e		       85 94		      STA	score+1
   2944  1760		       a5 93		      LDA	score
   2945  1762		       69 00		      ADC	#$00
   2946  1764		       85 93		      STA	score
   2947  1766		       d8		      CLD
   2948  1767				   .
   2949  1767							; 
   2950  1767
   2951  1767				   .__Skip_Shot_Enemy
   2952  1767							; __Skip_Shot_Enemy
   2953  1767
   2954  1767				   .
   2955  1767							; 
   2956  1767
   2957  1767				   .
   2958  1767							; 
   2959  1767
   2960  1767				   .
   2961  1767							; 
   2962  1767
   2963  1767				   .
   2964  1767							; 
   2965  1767
   2966  1767				   .L0399		;  if !collision(ball,missile0) then __Skip_Shot_Extra_Wall
   2967  1767
   2968  1767		       24 04		      bit	CXM0FB
   2969  1769					      if	((* - .__Skip_Shot_Extra_Wall) < 127) && ((* - .__Skip_Shot_Extra_Wall) > -128)
   2970  1769		       50 3b		      bvc	.__Skip_Shot_Extra_Wall
   2971  176b				  -	      else
   2972  176b				  -	      bvs	.15skip__Skip_Shot_Extra_Wall
   2973  176b				  -	      jmp	.__Skip_Shot_Extra_Wall
   2974  176b				  -.15skip__Skip_Shot_Extra_Wall
   2975  176b					      endif
   2976  176b				   .
   2977  176b							; 
   2978  176b
   2979  176b				   .
   2980  176b							; 
   2981  176b
   2982  176b				   .L0400		;  _Bit7_M0_Moving{7}	=  0  :  missile0x  =  200  :  missile0y  =  200
   2983  176b
   2984  176b		       a5 ec		      LDA	_Bit7_M0_Moving
   2985  176d		       29 7f		      AND	#127
   2986  176f		       85 ec		      STA	_Bit7_M0_Moving
   2987  1771		       a9 c8		      LDA	#200
   2988  1773		       85 82		      STA	missile0x
   2989  1775		       85 91		      STA	missile0y
   2990  1777				   .
   2991  1777							; 
   2992  1777
   2993  1777				   .
   2994  1777							; 
   2995  1777
   2996  1777				   .L0401		;  if r_extra_wall_type_and_range  >  3 then __Skip_Shot_Extra_Wall
   2997  1777
   2998  1777		       a9 03		      LDA	#3
   2999  1779		       cd eb f0 	      CMP	r_extra_wall_type_and_range
   3000  177c					      if	((* - .__Skip_Shot_Extra_Wall) < 127) && ((* - .__Skip_Shot_Extra_Wall) > -128)
   3001  177c		       90 28		      bcc	.__Skip_Shot_Extra_Wall
   3002  177e				  -	      else
   3003  177e				  -	      bcs	.16skip__Skip_Shot_Extra_Wall
   3004  177e				  -	      jmp	.__Skip_Shot_Extra_Wall
   3005  177e				  -.16skip__Skip_Shot_Extra_Wall
   3006  177e					      endif
   3007  177e				   .
   3008  177e							; 
   3009  177e
   3010  177e				   .L0402		;  _Ch0_Sound	=  1  :  _Ch0_Duration	=  1  :  _Ch0_Counter  =  0
   3011  177e
   3012  177e		       a9 01		      LDA	#1
   3013  1780		       85 d9		      STA	_Ch0_Sound
   3014  1782		       85 da		      STA	_Ch0_Duration
   3015  1784		       a9 00		      LDA	#0
   3016  1786		       85 db		      STA	_Ch0_Counter
   3017  1788				   .L0403		;  w_extra_wall_startpos_x  =	200  :	bally  =  0  :	score  =  score  +  10
   3018  1788
   3019  1788		       a9 c8		      LDA	#200
   3020  178a		       8d 6e f0 	      STA	w_extra_wall_startpos_x
   3021  178d		       a9 00		      LDA	#0
   3022  178f		       85 89		      STA	bally
   3023  1791		       f8		      SED
   3024  1792		       18		      CLC
   3025  1793		       a5 95		      LDA	score+2
   3026  1795		       69 10		      ADC	#$10
   3027  1797		       85 95		      STA	score+2
   3028  1799		       a5 94		      LDA	score+1
   3029  179b		       69 00		      ADC	#$00
   3030  179d		       85 94		      STA	score+1
   3031  179f		       a5 93		      LDA	score
   3032  17a1		       69 00		      ADC	#$00
   3033  17a3		       85 93		      STA	score
   3034  17a5		       d8		      CLD
   3035  17a6				   .
   3036  17a6							; 
   3037  17a6
   3038  17a6				   .__Skip_Shot_Extra_Wall
   3039  17a6							; __Skip_Shot_Extra_Wall
   3040  17a6
   3041  17a6				   .
   3042  17a6							; 
   3043  17a6
   3044  17a6				   .
   3045  17a6							; 
   3046  17a6
   3047  17a6				   .
   3048  17a6							; 
   3049  17a6
   3050  17a6				   .L0404		;  if !collision(player1,player0) then goto __Skip_P1_Touched_P0
   3051  17a6
   3052  17a6		       24 07		      bit	CXPPMM
   3053  17a8		       30 03		      BMI	.skipL0404
   3054  17aa				   .condpart69
   3055  17aa		       4c 36 d8 	      jmp	.__Skip_P1_Touched_P0
   3056  17ad
   3057  17ad				   .skipL0404
   3058  17ad				   .
   3059  17ad							; 
   3060  17ad
   3061  17ad				   .
   3062  17ad							; 
   3063  17ad
   3064  17ad				   .L0405		;  if roommate_type  <  2 then goto _Decrease_live_counter
   3065  17ad
   3066  17ad		       a5 de		      LDA	roommate_type
   3067  17af		       c9 02		      CMP	#2
   3068  17b1		       b0 03		      BCS	.skipL0405
   3069  17b3				   .condpart70
   3070  17b3		       4c e1 d4 	      jmp	._Decrease_live_counter
   3071  17b6
   3072  17b6				   .skipL0405
   3073  17b6				   .
   3074  17b6							; 
   3075  17b6
   3076  17b6				   .
   3077  17b6							; 
   3078  17b6
   3079  17b6				   .L0406		;  if _Ch0_Sound  <>  3 then _Ch0_Sound  =  3	:  _Ch0_Duration  =  1	:  _Ch0_Counter  =  0
   3080  17b6
   3081  17b6		       a5 d9		      LDA	_Ch0_Sound
   3082  17b8		       c9 03		      CMP	#3
   3083  17ba		       f0 0c		      BEQ	.skipL0406
   3084  17bc				   .condpart71
   3085  17bc		       a9 03		      LDA	#3
   3086  17be		       85 d9		      STA	_Ch0_Sound
   3087  17c0		       a9 01		      LDA	#1
   3088  17c2		       85 da		      STA	_Ch0_Duration
   3089  17c4		       a9 00		      LDA	#0
   3090  17c6		       85 db		      STA	_Ch0_Counter
   3091  17c8				   .skipL0406
   3092  17c8				   .L0407		;  if roommate_type  =  3 then _Bit2_Level_finished{2}  =  1  :  player0y  =  200  :  w_roommate_startpos_y  =  200  :  score	=  score  +  frame_counter  :  goto _skip_game_action
   3093  17c8
   3094  17c8		       a5 de		      LDA	roommate_type
   3095  17ca		       c9 03		      CMP	#3
   3096  17cc		       d0 25		      BNE	.skipL0407
   3097  17ce				   .condpart72
   3098  17ce		       a5 ec		      LDA	_Bit2_Level_finished
   3099  17d0		       09 04		      ORA	#4
   3100  17d2		       85 ec		      STA	_Bit2_Level_finished
   3101  17d4		       a9 c8		      LDA	#200
   3102  17d6		       85 85		      STA	player0y
   3103  17d8		       8d 6a f0 	      STA	w_roommate_startpos_y
   3104  17db		       f8		      SED
   3105  17dc		       18		      CLC
   3106  17dd		       a5 95		      LDA	score+2
   3107  17df		       65 d5		      ADC	frame_counter
   3108  17e1		       85 95		      STA	score+2
   3109  17e3		       a5 94		      LDA	score+1
   3110  17e5		       69 00		      ADC	#0
   3111  17e7		       85 94		      STA	score+1
   3112  17e9		       a5 93		      LDA	score
   3113  17eb		       69 00		      ADC	#0
   3114  17ed		       85 93		      STA	score
   3115  17ef		       d8		      CLD
   3116  17f0		       4c 71 d9 	      jmp	._skip_game_action
   3117  17f3
   3118  17f3				   .skipL0407
   3119  17f3				   .L0408		;  if roommate_type  =  2 then P1y_velocity  =  0.0  :  x  =  0  :  pfscore2  =  pfscore2  *  2  |  1	:  player1y  =	player1y  -  1	:  if !_Bit0_Safe_Point_reached{0} then WriteSendBuffer  =  req_safe_point  :  _Bit0_Safe_Point_reached{0}  =  1  :  Safe_Point_P1_x  =  player1x  :  Safe_Point_P1_y  =  player1y  :  _Bit1_Safe_Point_P1_Flip{1}  =  _Bit6_Flip_P1{6}
   3120  17f3
   3121  17f3		       a5 de		      LDA	roommate_type
   3122  17f5		       c9 02		      CMP	#2
   3123  17f7		       d0 3d		      BNE	.skipL0408
   3124  17f9				   .condpart73
   3125  17f9		       a2 00		      LDX	#0
   3126  17fb		       86 ea		      STX	w
   3127  17fd		       a9 00		      LDA	#0
   3128  17ff		       85 e9		      STA	P1y_velocity
   3129  1801		       a9 00		      LDA	#0
   3130  1803		       85 eb		      STA	x
   3131  1805							; complex statement detected
   3132  1805		       a5 f3		      LDA	pfscore2
   3133  1807		       0a		      asl
   3134  1808		       09 01		      ORA	#1
   3135  180a		       85 f3		      STA	pfscore2
   3136  180c		       c6 86		      DEC	player1y
   3137  180e		       a5 df		      LDA	_Bit0_Safe_Point_reached
   3138  1810		       4a		      LSR
   3139  1811		       b0 23		      BCS	.skip73then
   3140  1813				   .condpart74
   3141  1813		       a9 08		      LDA	#req_safe_point
   3142  1815		       8d f1 1f 	      STA	WriteSendBuffer
   3143  1818		       a5 df		      LDA	_Bit0_Safe_Point_reached
   3144  181a		       09 01		      ORA	#1
   3145  181c		       85 df		      STA	_Bit0_Safe_Point_reached
   3146  181e		       a5 81		      LDA	player1x
   3147  1820		       85 e0		      STA	Safe_Point_P1_x
   3148  1822		       a5 86		      LDA	player1y
   3149  1824		       85 e1		      STA	Safe_Point_P1_y
   3150  1826		       a5 ec		      LDA	_Bit6_Flip_P1
   3151  1828		       29 40		      AND	#64
   3152  182a		       08		      PHP
   3153  182b		       a5 df		      LDA	_Bit1_Safe_Point_P1_Flip
   3154  182d		       29 fd		      AND	#253
   3155  182f		       28		      PLP
   3156  1830		       f0 02		      .byte.b	$F0, $02
   3157  1832		       09 02		      ORA	#2
   3158  1834		       85 df		      STA	_Bit1_Safe_Point_P1_Flip
   3159  1836				   .skip73then
   3160  1836				   .skipL0408
   3161  1836				   .__Skip_P1_Touched_P0
   3162  1836							; __Skip_P1_Touched_P0
   3163  1836
   3164  1836				   .
   3165  1836							; 
   3166  1836
   3167  1836				   .
   3168  1836							; 
   3169  1836
   3170  1836				   .
   3171  1836							; 
   3172  1836
   3173  1836				   .L0409		;  if collision(player1,ball)	||  collision(player1,playfield) then goto _Decrease_live_counter
   3174  1836
   3175  1836		       24 03		      bit	CXP1FB
   3176  1838		       50 03		      BVC	.skipL0409
   3177  183a				   .condpart75
   3178  183a		       4c 41 d8 	      jmp	.condpart76
   3179  183d				   .skipL0409
   3180  183d		       24 03		      bit	CXP1FB
   3181  183f		       10 03		      BPL	.skip7OR
   3182  1841				   .condpart76
   3183  1841		       4c e1 d4 	      jmp	._Decrease_live_counter
   3184  1844
   3185  1844				   .skip7OR
   3186  1844				   .
   3187  1844							; 
   3188  1844
   3189  1844				   .
   3190  1844							; 
   3191  1844
   3192  1844				   .L0410		;  _BitOp_P1_Dir  =  _BitOp_P1_Dir  &	$F0
   3193  1844
   3194  1844		       a5 d8		      LDA	_BitOp_P1_Dir
   3195  1846		       29 f0		      AND	#$F0
   3196  1848		       85 d8		      STA	_BitOp_P1_Dir
   3197  184a				   .
   3198  184a							; 
   3199  184a
   3200  184a				   .L0411		;  if joy0up then P1y_velocity  =  0.0  :  x  =  0  :	player1y  =  player1y  -  1  :	_Bit0_P1_Dir_Up{0}  =  1  :  goto skip_gravity
   3201  184a
   3202  184a		       a9 10		      lda	#$10
   3203  184c		       2c 80 02 	      bit	SWCHA
   3204  184f		       d0 17		      BNE	.skipL0411
   3205  1851				   .condpart77
   3206  1851		       a2 00		      LDX	#0
   3207  1853		       86 ea		      STX	w
   3208  1855		       a9 00		      LDA	#0
   3209  1857		       85 e9		      STA	P1y_velocity
   3210  1859		       a9 00		      LDA	#0
   3211  185b		       85 eb		      STA	x
   3212  185d		       c6 86		      DEC	player1y
   3213  185f		       a5 d8		      LDA	_Bit0_P1_Dir_Up
   3214  1861		       09 01		      ORA	#1
   3215  1863		       85 d8		      STA	_Bit0_P1_Dir_Up
   3216  1865		       4c 91 d8 	      jmp	.skip_gravity
   3217  1868
   3218  1868				   .skipL0411
   3219  1868				   .L0412		;  if joy0down then player1y  =  player1y  +  1  :  _Bit1_P1_Dir_Down{1}  =  1
   3220  1868
   3221  1868		       a9 20		      lda	#$20
   3222  186a		       2c 80 02 	      bit	SWCHA
   3223  186d		       d0 08		      BNE	.skipL0412
   3224  186f				   .condpart78
   3225  186f		       e6 86		      INC	player1y
   3226  1871		       a5 d8		      LDA	_Bit1_P1_Dir_Down
   3227  1873		       09 02		      ORA	#2
   3228  1875		       85 d8		      STA	_Bit1_P1_Dir_Down
   3229  1877				   .skipL0412
   3230  1877				   .
   3231  1877							; 
   3232  1877
   3233  1877				   .L0413		;  rem apply gravity
   3234  1877
   3235  1877				   .L0414		;  P1y_velocity  =  P1y_velocity  +  gravity_player1
   3236  1877
   3237  1877		       a5 ea		      LDA	w
   3238  1879		       18		      CLC
   3239  187a		       69 01		      ADC	#1
   3240  187c		       85 ea		      STA	w
   3241  187e		       a5 e9		      LDA	P1y_velocity
   3242  1880		       69 00		      ADC	#0
   3243  1882		       85 e9		      STA	P1y_velocity
   3244  1884				   .L0415		;  P1y_position  =  P1y_position  +  P1y_velocity
   3245  1884
   3246  1884		       a5 eb		      LDA	x
   3247  1886		       18		      CLC
   3248  1887		       65 ea		      ADC	w
   3249  1889		       85 eb		      STA	x
   3250  188b		       a5 86		      LDA	P1y_position
   3251  188d		       65 e9		      ADC	P1y_velocity
   3252  188f		       85 86		      STA	P1y_position
   3253  1891				   .
   3254  1891							; 
   3255  1891
   3256  1891				   .skip_gravity
   3257  1891							; skip_gravity
   3258  1891
   3259  1891				   .
   3260  1891							; 
   3261  1891
   3262  1891				   .L0416		;  if joy0left then _Bit6_Flip_P1{6}  =  1  :	_Bit2_P1_Dir_Left{2}  =  1  :  player1x  =  player1x  -  1  :  goto _skip_move
   3263  1891
   3264  1891		       2c 80 02 	      bit	SWCHA
   3265  1894		       70 11		      BVS	.skipL0416
   3266  1896				   .condpart79
   3267  1896		       a5 ec		      LDA	_Bit6_Flip_P1
   3268  1898		       09 40		      ORA	#64
   3269  189a		       85 ec		      STA	_Bit6_Flip_P1
   3270  189c		       a5 d8		      LDA	_Bit2_P1_Dir_Left
   3271  189e		       09 04		      ORA	#4
   3272  18a0		       85 d8		      STA	_Bit2_P1_Dir_Left
   3273  18a2		       c6 81		      DEC	player1x
   3274  18a4		       4c ba d8 	      jmp	._skip_move
   3275  18a7
   3276  18a7				   .skipL0416
   3277  18a7				   .L0417		;  if joy0right then _Bit6_Flip_P1{6}	=  0  :  _Bit3_P1_Dir_Right{3}	=  1  :  player1x  =  player1x	+  1
   3278  18a7
   3279  18a7		       2c 80 02 	      bit	SWCHA
   3280  18aa		       30 0e		      BMI	.skipL0417
   3281  18ac				   .condpart80
   3282  18ac		       a5 ec		      LDA	_Bit6_Flip_P1
   3283  18ae		       29 bf		      AND	#191
   3284  18b0		       85 ec		      STA	_Bit6_Flip_P1
   3285  18b2		       a5 d8		      LDA	_Bit3_P1_Dir_Right
   3286  18b4		       09 08		      ORA	#8
   3287  18b6		       85 d8		      STA	_Bit3_P1_Dir_Right
   3288  18b8		       e6 81		      INC	player1x
   3289  18ba				   .skipL0417
   3290  18ba				   ._skip_move
   3291  18ba							; _skip_move
   3292  18ba
   3293  18ba				   .
   3294  18ba							; 
   3295  18ba
   3296  18ba				   .
   3297  18ba							; 
   3298  18ba
   3299  18ba				   .L0418		;  if player1y  <  player_min_y  &&  r_Bit0_room_type_top{0} then player1y  =	player_min_y  :  goto _skip_game_action
   3300  18ba
   3301  18ba		       a5 86		      LDA	player1y
   3302  18bc		       c9 02		      CMP	#player_min_y
   3303  18be		       b0 0d		      BCS	.skipL0418
   3304  18c0				   .condpart81
   3305  18c0		       ad e1 f0 	      LDA	r_Bit0_room_type_top
   3306  18c3		       4a		      LSR
   3307  18c4		       90 07		      BCC	.skip81then
   3308  18c6				   .condpart82
   3309  18c6		       a9 02		      LDA	#player_min_y
   3310  18c8		       85 86		      STA	player1y
   3311  18ca		       4c 71 d9 	      jmp	._skip_game_action
   3312  18cd
   3313  18cd				   .skip81then
   3314  18cd				   .skipL0418
   3315  18cd				   .
   3316  18cd							; 
   3317  18cd
   3318  18cd				   .L0419		;  if player1x  <  player_min_x then _Bit2_New_Room_Flip_P1{2}  =  _Bit6_Flip_P1{6}  :  new_room_player1y  =  player1y  :  new_room_player1x  =  player_max_x	:  gosub _Add_Room_State  :  WriteSendBuffer  =  req_move_left	:  goto _skip_game_action
   3319  18cd
   3320  18cd		       a5 81		      LDA	player1x
   3321  18cf		       c9 0a		      CMP	#player_min_x
   3322  18d1		       b0 23		      BCS	.skipL0419
   3323  18d3				   .condpart83
   3324  18d3		       a5 ec		      LDA	_Bit6_Flip_P1
   3325  18d5		       29 40		      AND	#64
   3326  18d7		       08		      PHP
   3327  18d8		       a5 df		      LDA	_Bit2_New_Room_Flip_P1
   3328  18da		       29 fb		      AND	#251
   3329  18dc		       28		      PLP
   3330  18dd		       f0 02		      .byte.b	$F0, $02
   3331  18df		       09 04		      ORA	#4
   3332  18e1		       85 df		      STA	_Bit2_New_Room_Flip_P1
   3333  18e3		       a5 86		      LDA	player1y
   3334  18e5		       85 a4		      STA	new_room_player1y
   3335  18e7		       a9 86		      LDA	#player_max_x
   3336  18e9		       85 a5		      STA	new_room_player1x
   3337  18eb		       20 5a db 	      jsr	._Add_Room_State
   3338  18ee		       a9 03		      LDA	#req_move_left
   3339  18f0		       8d f1 1f 	      STA	WriteSendBuffer
   3340  18f3		       4c 71 d9 	      jmp	._skip_game_action
   3341  18f6
   3342  18f6				   .skipL0419
   3343  18f6				   .L0420		;  if player1y  <  player_min_y then _Bit2_New_Room_Flip_P1{2}  =  _Bit6_Flip_P1{6}  :  new_room_player1x  =  player1x  :  new_room_player1y  =  player_max_y	:  gosub _Add_Room_State  :  WriteSendBuffer  =  req_move_up  :  goto _skip_game_action
   3344  18f6
   3345  18f6		       a5 86		      LDA	player1y
   3346  18f8		       c9 02		      CMP	#player_min_y
   3347  18fa		       b0 23		      BCS	.skipL0420
   3348  18fc				   .condpart84
   3349  18fc		       a5 ec		      LDA	_Bit6_Flip_P1
   3350  18fe		       29 40		      AND	#64
   3351  1900		       08		      PHP
   3352  1901		       a5 df		      LDA	_Bit2_New_Room_Flip_P1
   3353  1903		       29 fb		      AND	#251
   3354  1905		       28		      PLP
   3355  1906		       f0 02		      .byte.b	$F0, $02
   3356  1908		       09 04		      ORA	#4
   3357  190a		       85 df		      STA	_Bit2_New_Room_Flip_P1
   3358  190c		       a5 81		      LDA	player1x
   3359  190e		       85 a5		      STA	new_room_player1x
   3360  1910		       a9 4c		      LDA	#player_max_y
   3361  1912		       85 a4		      STA	new_room_player1y
   3362  1914		       20 5a db 	      jsr	._Add_Room_State
   3363  1917		       a9 04		      LDA	#req_move_up
   3364  1919		       8d f1 1f 	      STA	WriteSendBuffer
   3365  191c		       4c 71 d9 	      jmp	._skip_game_action
   3366  191f
   3367  191f				   .skipL0420
   3368  191f				   .L0421		;  if player1x  >  player_max_x then _Bit2_New_Room_Flip_P1{2}  =  _Bit6_Flip_P1{6}  :  new_room_player1y  =  player1y  :  new_room_player1x  =  player_min_x	:  gosub _Add_Room_State  :  WriteSendBuffer  =  req_move_right  :  goto _skip_game_action
   3369  191f
   3370  191f		       a9 86		      LDA	#player_max_x
   3371  1921		       c5 81		      CMP	player1x
   3372  1923		       b0 23		      BCS	.skipL0421
   3373  1925				   .condpart85
   3374  1925		       a5 ec		      LDA	_Bit6_Flip_P1
   3375  1927		       29 40		      AND	#64
   3376  1929		       08		      PHP
   3377  192a		       a5 df		      LDA	_Bit2_New_Room_Flip_P1
   3378  192c		       29 fb		      AND	#251
   3379  192e		       28		      PLP
   3380  192f		       f0 02		      .byte.b	$F0, $02
   3381  1931		       09 04		      ORA	#4
   3382  1933		       85 df		      STA	_Bit2_New_Room_Flip_P1
   3383  1935		       a5 86		      LDA	player1y
   3384  1937		       85 a4		      STA	new_room_player1y
   3385  1939		       a9 0a		      LDA	#player_min_x
   3386  193b		       85 a5		      STA	new_room_player1x
   3387  193d		       20 5a db 	      jsr	._Add_Room_State
   3388  1940		       a9 05		      LDA	#req_move_right
   3389  1942		       8d f1 1f 	      STA	WriteSendBuffer
   3390  1945		       4c 71 d9 	      jmp	._skip_game_action
   3391  1948
   3392  1948				   .skipL0421
   3393  1948				   .L0422		;  if player1y  >  player_max_y then _Bit2_New_Room_Flip_P1{2}  =  _Bit6_Flip_P1{6}  :  new_room_player1x  =  player1x  :  new_room_player1y  =  player_min_y	:  gosub _Add_Room_State  :  WriteSendBuffer  =  req_move_down	:  goto _skip_game_action
   3394  1948
   3395  1948		       a9 4c		      LDA	#player_max_y
   3396  194a		       c5 86		      CMP	player1y
   3397  194c		       b0 23		      BCS	.skipL0422
   3398  194e				   .condpart86
   3399  194e		       a5 ec		      LDA	_Bit6_Flip_P1
   3400  1950		       29 40		      AND	#64
   3401  1952		       08		      PHP
   3402  1953		       a5 df		      LDA	_Bit2_New_Room_Flip_P1
   3403  1955		       29 fb		      AND	#251
   3404  1957		       28		      PLP
   3405  1958		       f0 02		      .byte.b	$F0, $02
   3406  195a		       09 04		      ORA	#4
   3407  195c		       85 df		      STA	_Bit2_New_Room_Flip_P1
   3408  195e		       a5 81		      LDA	player1x
   3409  1960		       85 a5		      STA	new_room_player1x
   3410  1962		       a9 02		      LDA	#player_min_y
   3411  1964		       85 a4		      STA	new_room_player1y
   3412  1966		       20 5a db 	      jsr	._Add_Room_State
   3413  1969		       a9 06		      LDA	#req_move_down
   3414  196b		       8d f1 1f 	      STA	WriteSendBuffer
   3415  196e		       4c 71 d9 	      jmp	._skip_game_action
   3416  1971
   3417  1971				   .skipL0422
   3418  1971				   .
   3419  1971							; 
   3420  1971
   3421  1971				   ._skip_game_action
   3422  1971							; _skip_game_action
   3423  1971
   3424  1971				   .
   3425  1971							; 
   3426  1971
   3427  1971				   .
   3428  1971							; 
   3429  1971
   3430  1971				   .L0423		;  if !_Ch0_Sound then goto __Skip_Ch_0
   3431  1971
   3432  1971		       a5 d9		      LDA	_Ch0_Sound
   3433  1973		       d0 03		      BNE	.skipL0423
   3434  1975				   .condpart87
   3435  1975		       4c a4 da 	      jmp	.__Skip_Ch_0
   3436  1978
   3437  1978				   .skipL0423
   3438  1978				   .
   3439  1978							; 
   3440  1978
   3441  1978				   .
   3442  1978							; 
   3443  1978
   3444  1978				   .L0424		;  _Ch0_Duration  =  _Ch0_Duration  -	1
   3445  1978
   3446  1978		       c6 da		      DEC	_Ch0_Duration
   3447  197a				   .
   3448  197a							; 
   3449  197a
   3450  197a				   .
   3451  197a							; 
   3452  197a
   3453  197a				   .
   3454  197a							; 
   3455  197a
   3456  197a				   .L0425		;  if _Ch0_Duration then goto __Skip_Ch_0
   3457  197a
   3458  197a		       a5 da		      LDA	_Ch0_Duration
   3459  197c		       f0 03		      BEQ	.skipL0425
   3460  197e				   .condpart88
   3461  197e		       4c a4 da 	      jmp	.__Skip_Ch_0
   3462  1981
   3463  1981				   .skipL0425
   3464  1981				   .
   3465  1981							; 
   3466  1981
   3467  1981				   .
   3468  1981							; 
   3469  1981
   3470  1981				   .
   3471  1981							; 
   3472  1981
   3473  1981				   .
   3474  1981							; 
   3475  1981
   3476  1981				   .L0426		;  if _Ch0_Sound  <>  1 then goto __Skip_Ch0_Sound_001
   3477  1981
   3478  1981		       a5 d9		      LDA	_Ch0_Sound
   3479  1983		       c9 01		      CMP	#1
   3480  1985		       f0 03		      BEQ	.skipL0426
   3481  1987				   .condpart89
   3482  1987		       4c cf d9 	      jmp	.__Skip_Ch0_Sound_001
   3483  198a
   3484  198a				   .skipL0426
   3485  198a				   .
   3486  198a							; 
   3487  198a
   3488  198a				   .
   3489  198a							; 
   3490  198a
   3491  198a				   .L0427		;  temp4  =  _SD_Shot_Wall[_Ch0_Counter]
   3492  198a
   3493  198a		       a6 db		      LDX	_Ch0_Counter
   3494  198c		       bd f1 db 	      LDA	_SD_Shot_Wall,x
   3495  198f		       85 9f		      STA	temp4
   3496  1991				   .
   3497  1991							; 
   3498  1991
   3499  1991				   .
   3500  1991							; 
   3501  1991
   3502  1991				   .L0428		;  if temp4  =  255 then goto __Clear_Ch_0
   3503  1991
   3504  1991		       a5 9f		      LDA	temp4
   3505  1993		       c9 ff		      CMP	#255
   3506  1995		       d0 03		      BNE	.skipL0428
   3507  1997				   .condpart90
   3508  1997		       4c 9e da 	      jmp	.__Clear_Ch_0
   3509  199a
   3510  199a				   .skipL0428
   3511  199a				   .
   3512  199a							; 
   3513  199a
   3514  199a				   .
   3515  199a							; 
   3516  199a
   3517  199a				   .L0429		;  _Ch0_Counter  =  _Ch0_Counter  +  1
   3518  199a
   3519  199a		       e6 db		      INC	_Ch0_Counter
   3520  199c				   .L0430		;  temp5  =  _SD_Shot_Wall[_Ch0_Counter]  :  _Ch0_Counter  =  _Ch0_Counter  +	1
   3521  199c
   3522  199c		       a6 db		      LDX	_Ch0_Counter
   3523  199e		       bd f1 db 	      LDA	_SD_Shot_Wall,x
   3524  19a1		       85 a0		      STA	temp5
   3525  19a3		       e6 db		      INC	_Ch0_Counter
   3526  19a5				   .L0431		;  temp6  =  _SD_Shot_Wall[_Ch0_Counter]  :  _Ch0_Counter  =  _Ch0_Counter  +	1
   3527  19a5
   3528  19a5		       a6 db		      LDX	_Ch0_Counter
   3529  19a7		       bd f1 db 	      LDA	_SD_Shot_Wall,x
   3530  19aa		       85 a1		      STA	temp6
   3531  19ac		       e6 db		      INC	_Ch0_Counter
   3532  19ae				   .L0432		;  if _Ch0_Counter{0} then COLUBK  =  _E0
   3533  19ae
   3534  19ae		       a5 db		      LDA	_Ch0_Counter
   3535  19b0		       4a		      LSR
   3536  19b1		       90 04		      BCC	.skipL0432
   3537  19b3				   .condpart91
   3538  19b3		       a9 e0		      LDA	#_E0
   3539  19b5		       85 09		      STA	COLUBK
   3540  19b7				   .skipL0432
   3541  19b7				   .
   3542  19b7							; 
   3543  19b7
   3544  19b7				   .
   3545  19b7							; 
   3546  19b7
   3547  19b7				   .L0433		;  AUDV0  =  temp4
   3548  19b7
   3549  19b7		       a5 9f		      LDA	temp4
   3550  19b9		       85 19		      STA	AUDV0
   3551  19bb				   .L0434		;  AUDC0  =  temp5
   3552  19bb
   3553  19bb		       a5 a0		      LDA	temp5
   3554  19bd		       85 15		      STA	AUDC0
   3555  19bf				   .L0435		;  AUDF0  =  temp6
   3556  19bf
   3557  19bf		       a5 a1		      LDA	temp6
   3558  19c1		       85 17		      STA	AUDF0
   3559  19c3				   .
   3560  19c3							; 
   3561  19c3
   3562  19c3				   .
   3563  19c3							; 
   3564  19c3
   3565  19c3				   .L0436		;  _Ch0_Duration  =  _SD_Shot_Wall[_Ch0_Counter]  :  _Ch0_Counter  =  _Ch0_Counter  +	1
   3566  19c3
   3567  19c3		       a6 db		      LDX	_Ch0_Counter
   3568  19c5		       bd f1 db 	      LDA	_SD_Shot_Wall,x
   3569  19c8		       85 da		      STA	_Ch0_Duration
   3570  19ca		       e6 db		      INC	_Ch0_Counter
   3571  19cc				   .
   3572  19cc							; 
   3573  19cc
   3574  19cc				   .
   3575  19cc							; 
   3576  19cc
   3577  19cc				   .L0437		;  goto __Skip_Ch_0
   3578  19cc
   3579  19cc		       4c a4 da 	      jmp	.__Skip_Ch_0
   3580  19cf
   3581  19cf				   .
   3582  19cf							; 
   3583  19cf
   3584  19cf				   .__Skip_Ch0_Sound_001
   3585  19cf							; __Skip_Ch0_Sound_001
   3586  19cf
   3587  19cf				   .
   3588  19cf							; 
   3589  19cf
   3590  19cf				   .
   3591  19cf							; 
   3592  19cf
   3593  19cf				   .
   3594  19cf							; 
   3595  19cf
   3596  19cf				   .
   3597  19cf							; 
   3598  19cf
   3599  19cf				   .L0438		;  if _Ch0_Sound  <>  2 then goto __Skip_Ch0_Sound_002
   3600  19cf
   3601  19cf		       a5 d9		      LDA	_Ch0_Sound
   3602  19d1		       c9 02		      CMP	#2
   3603  19d3		       f0 03		      BEQ	.skipL0438
   3604  19d5				   .condpart92
   3605  19d5		       4c 14 da 	      jmp	.__Skip_Ch0_Sound_002
   3606  19d8
   3607  19d8				   .skipL0438
   3608  19d8				   .
   3609  19d8							; 
   3610  19d8
   3611  19d8				   .
   3612  19d8							; 
   3613  19d8
   3614  19d8				   .L0439		;  temp4  =  _SD_Shoot_Miss[_Ch0_Counter]
   3615  19d8
   3616  19d8		       a6 db		      LDX	_Ch0_Counter
   3617  19da		       bd 29 dc 	      LDA	_SD_Shoot_Miss,x
   3618  19dd		       85 9f		      STA	temp4
   3619  19df				   .
   3620  19df							; 
   3621  19df
   3622  19df				   .
   3623  19df							; 
   3624  19df
   3625  19df				   .L0440		;  if temp4  =  255 then goto __Clear_Ch_0
   3626  19df
   3627  19df		       a5 9f		      LDA	temp4
   3628  19e1		       c9 ff		      CMP	#255
   3629  19e3		       d0 03		      BNE	.skipL0440
   3630  19e5				   .condpart93
   3631  19e5		       4c 9e da 	      jmp	.__Clear_Ch_0
   3632  19e8
   3633  19e8				   .skipL0440
   3634  19e8				   .
   3635  19e8							; 
   3636  19e8
   3637  19e8				   .
   3638  19e8							; 
   3639  19e8
   3640  19e8				   .L0441		;  _Ch0_Counter  =  _Ch0_Counter  +  1
   3641  19e8
   3642  19e8		       e6 db		      INC	_Ch0_Counter
   3643  19ea				   .L0442		;  temp5  =  _SD_Shoot_Miss[_Ch0_Counter]  :  _Ch0_Counter  =	_Ch0_Counter  +  1
   3644  19ea
   3645  19ea		       a6 db		      LDX	_Ch0_Counter
   3646  19ec		       bd 29 dc 	      LDA	_SD_Shoot_Miss,x
   3647  19ef		       85 a0		      STA	temp5
   3648  19f1		       e6 db		      INC	_Ch0_Counter
   3649  19f3				   .L0443		;  temp6  =  _SD_Shoot_Miss[_Ch0_Counter]  :  _Ch0_Counter  =	_Ch0_Counter  +  1
   3650  19f3
   3651  19f3		       a6 db		      LDX	_Ch0_Counter
   3652  19f5		       bd 29 dc 	      LDA	_SD_Shoot_Miss,x
   3653  19f8		       85 a1		      STA	temp6
   3654  19fa		       e6 db		      INC	_Ch0_Counter
   3655  19fc				   .
   3656  19fc							; 
   3657  19fc
   3658  19fc				   .
   3659  19fc							; 
   3660  19fc
   3661  19fc				   .L0444		;  AUDV0  =  temp4
   3662  19fc
   3663  19fc		       a5 9f		      LDA	temp4
   3664  19fe		       85 19		      STA	AUDV0
   3665  1a00				   .L0445		;  AUDC0  =  temp5
   3666  1a00
   3667  1a00		       a5 a0		      LDA	temp5
   3668  1a02		       85 15		      STA	AUDC0
   3669  1a04				   .L0446		;  AUDF0  =  temp6
   3670  1a04
   3671  1a04		       a5 a1		      LDA	temp6
   3672  1a06		       85 17		      STA	AUDF0
   3673  1a08				   .
   3674  1a08							; 
   3675  1a08
   3676  1a08				   .
   3677  1a08							; 
   3678  1a08
   3679  1a08				   .L0447		;  _Ch0_Duration  =  _SD_Shoot_Miss[_Ch0_Counter]  :  _Ch0_Counter  =	_Ch0_Counter  +  1
   3680  1a08
   3681  1a08		       a6 db		      LDX	_Ch0_Counter
   3682  1a0a		       bd 29 dc 	      LDA	_SD_Shoot_Miss,x
   3683  1a0d		       85 da		      STA	_Ch0_Duration
   3684  1a0f		       e6 db		      INC	_Ch0_Counter
   3685  1a11				   .
   3686  1a11							; 
   3687  1a11
   3688  1a11				   .
   3689  1a11							; 
   3690  1a11
   3691  1a11				   .L0448		;  goto __Skip_Ch_0
   3692  1a11
   3693  1a11		       4c a4 da 	      jmp	.__Skip_Ch_0
   3694  1a14
   3695  1a14				   .
   3696  1a14							; 
   3697  1a14
   3698  1a14				   .__Skip_Ch0_Sound_002
   3699  1a14							; __Skip_Ch0_Sound_002
   3700  1a14
   3701  1a14				   .
   3702  1a14							; 
   3703  1a14
   3704  1a14				   .
   3705  1a14							; 
   3706  1a14
   3707  1a14				   .
   3708  1a14							; 
   3709  1a14
   3710  1a14				   .
   3711  1a14							; 
   3712  1a14
   3713  1a14				   .L0449		;  if _Ch0_Sound  <>  3 then goto __Skip_Ch0_Sound_003
   3714  1a14
   3715  1a14		       a5 d9		      LDA	_Ch0_Sound
   3716  1a16		       c9 03		      CMP	#3
   3717  1a18		       f0 03		      BEQ	.skipL0449
   3718  1a1a				   .condpart94
   3719  1a1a		       4c 59 da 	      jmp	.__Skip_Ch0_Sound_003
   3720  1a1d
   3721  1a1d				   .skipL0449
   3722  1a1d				   .
   3723  1a1d							; 
   3724  1a1d
   3725  1a1d				   .
   3726  1a1d							; 
   3727  1a1d
   3728  1a1d				   .L0450		;  temp4  =  _SD_Shoot_Enemy[_Ch0_Counter]
   3729  1a1d
   3730  1a1d		       a6 db		      LDX	_Ch0_Counter
   3731  1a1f		       bd 71 dc 	      LDA	_SD_Shoot_Enemy,x
   3732  1a22		       85 9f		      STA	temp4
   3733  1a24				   .
   3734  1a24							; 
   3735  1a24
   3736  1a24				   .
   3737  1a24							; 
   3738  1a24
   3739  1a24				   .L0451		;  if temp4  =  255 then goto __Clear_Ch_0
   3740  1a24
   3741  1a24		       a5 9f		      LDA	temp4
   3742  1a26		       c9 ff		      CMP	#255
   3743  1a28		       d0 03		      BNE	.skipL0451
   3744  1a2a				   .condpart95
   3745  1a2a		       4c 9e da 	      jmp	.__Clear_Ch_0
   3746  1a2d
   3747  1a2d				   .skipL0451
   3748  1a2d				   .
   3749  1a2d							; 
   3750  1a2d
   3751  1a2d				   .
   3752  1a2d							; 
   3753  1a2d
   3754  1a2d				   .L0452		;  _Ch0_Counter  =  _Ch0_Counter  +  1
   3755  1a2d
   3756  1a2d		       e6 db		      INC	_Ch0_Counter
   3757  1a2f				   .L0453		;  temp5  =  _SD_Shoot_Enemy[_Ch0_Counter]  :	_Ch0_Counter  =  _Ch0_Counter  +  1
   3758  1a2f
   3759  1a2f		       a6 db		      LDX	_Ch0_Counter
   3760  1a31		       bd 71 dc 	      LDA	_SD_Shoot_Enemy,x
   3761  1a34		       85 a0		      STA	temp5
   3762  1a36		       e6 db		      INC	_Ch0_Counter
   3763  1a38				   .L0454		;  temp6  =  _SD_Shoot_Enemy[_Ch0_Counter]  :	_Ch0_Counter  =  _Ch0_Counter  +  1
   3764  1a38
   3765  1a38		       a6 db		      LDX	_Ch0_Counter
   3766  1a3a		       bd 71 dc 	      LDA	_SD_Shoot_Enemy,x
   3767  1a3d		       85 a1		      STA	temp6
   3768  1a3f		       e6 db		      INC	_Ch0_Counter
   3769  1a41				   .
   3770  1a41							; 
   3771  1a41
   3772  1a41				   .
   3773  1a41							; 
   3774  1a41
   3775  1a41				   .L0455		;  AUDV0  =  temp4
   3776  1a41
   3777  1a41		       a5 9f		      LDA	temp4
   3778  1a43		       85 19		      STA	AUDV0
   3779  1a45				   .L0456		;  AUDC0  =  temp5
   3780  1a45
   3781  1a45		       a5 a0		      LDA	temp5
   3782  1a47		       85 15		      STA	AUDC0
   3783  1a49				   .L0457		;  AUDF0  =  temp6
   3784  1a49
   3785  1a49		       a5 a1		      LDA	temp6
   3786  1a4b		       85 17		      STA	AUDF0
   3787  1a4d				   .
   3788  1a4d							; 
   3789  1a4d
   3790  1a4d				   .
   3791  1a4d							; 
   3792  1a4d
   3793  1a4d				   .L0458		;  _Ch0_Duration  =  _SD_Shoot_Enemy[_Ch0_Counter]  :	_Ch0_Counter  =  _Ch0_Counter  +  1
   3794  1a4d
   3795  1a4d		       a6 db		      LDX	_Ch0_Counter
   3796  1a4f		       bd 71 dc 	      LDA	_SD_Shoot_Enemy,x
   3797  1a52		       85 da		      STA	_Ch0_Duration
   3798  1a54		       e6 db		      INC	_Ch0_Counter
   3799  1a56				   .
   3800  1a56							; 
   3801  1a56
   3802  1a56				   .
   3803  1a56							; 
   3804  1a56
   3805  1a56				   .L0459		;  goto __Skip_Ch_0
   3806  1a56
   3807  1a56		       4c a4 da 	      jmp	.__Skip_Ch_0
   3808  1a59
   3809  1a59				   .
   3810  1a59							; 
   3811  1a59
   3812  1a59				   .__Skip_Ch0_Sound_003
   3813  1a59							; __Skip_Ch0_Sound_003
   3814  1a59
   3815  1a59				   .
   3816  1a59							; 
   3817  1a59
   3818  1a59				   .
   3819  1a59							; 
   3820  1a59
   3821  1a59				   .
   3822  1a59							; 
   3823  1a59
   3824  1a59				   .
   3825  1a59							; 
   3826  1a59
   3827  1a59				   .L0460		;  if _Ch0_Sound  <>  4 then goto __Skip_Ch0_Sound_004
   3828  1a59
   3829  1a59		       a5 d9		      LDA	_Ch0_Sound
   3830  1a5b		       c9 04		      CMP	#4
   3831  1a5d		       f0 03		      BEQ	.skipL0460
   3832  1a5f				   .condpart96
   3833  1a5f		       4c 9e da 	      jmp	.__Skip_Ch0_Sound_004
   3834  1a62
   3835  1a62				   .skipL0460
   3836  1a62				   .
   3837  1a62							; 
   3838  1a62
   3839  1a62				   .
   3840  1a62							; 
   3841  1a62
   3842  1a62				   .L0461		;  temp4  =  _SD_Touch_Enemy[_Ch0_Counter]
   3843  1a62
   3844  1a62		       a6 db		      LDX	_Ch0_Counter
   3845  1a64		       bd 95 dc 	      LDA	_SD_Touch_Enemy,x
   3846  1a67		       85 9f		      STA	temp4
   3847  1a69				   .
   3848  1a69							; 
   3849  1a69
   3850  1a69				   .
   3851  1a69							; 
   3852  1a69
   3853  1a69				   .L0462		;  if temp4  =  255 then goto __Clear_Ch_0
   3854  1a69
   3855  1a69		       a5 9f		      LDA	temp4
   3856  1a6b		       c9 ff		      CMP	#255
   3857  1a6d		       d0 03		      BNE	.skipL0462
   3858  1a6f				   .condpart97
   3859  1a6f		       4c 9e da 	      jmp	.__Clear_Ch_0
   3860  1a72
   3861  1a72				   .skipL0462
   3862  1a72				   .
   3863  1a72							; 
   3864  1a72
   3865  1a72				   .
   3866  1a72							; 
   3867  1a72
   3868  1a72				   .L0463		;  _Ch0_Counter  =  _Ch0_Counter  +  1
   3869  1a72
   3870  1a72		       e6 db		      INC	_Ch0_Counter
   3871  1a74				   .L0464		;  temp5  =  _SD_Touch_Enemy[_Ch0_Counter]  :	_Ch0_Counter  =  _Ch0_Counter  +  1
   3872  1a74
   3873  1a74		       a6 db		      LDX	_Ch0_Counter
   3874  1a76		       bd 95 dc 	      LDA	_SD_Touch_Enemy,x
   3875  1a79		       85 a0		      STA	temp5
   3876  1a7b		       e6 db		      INC	_Ch0_Counter
   3877  1a7d				   .L0465		;  temp6  =  _SD_Touch_Enemy[_Ch0_Counter]  :	_Ch0_Counter  =  _Ch0_Counter  +  1
   3878  1a7d
   3879  1a7d		       a6 db		      LDX	_Ch0_Counter
   3880  1a7f		       bd 95 dc 	      LDA	_SD_Touch_Enemy,x
   3881  1a82		       85 a1		      STA	temp6
   3882  1a84		       e6 db		      INC	_Ch0_Counter
   3883  1a86				   .
   3884  1a86							; 
   3885  1a86
   3886  1a86				   .
   3887  1a86							; 
   3888  1a86
   3889  1a86				   .L0466		;  AUDV0  =  temp4
   3890  1a86
   3891  1a86		       a5 9f		      LDA	temp4
   3892  1a88		       85 19		      STA	AUDV0
   3893  1a8a				   .L0467		;  AUDC0  =  temp5
   3894  1a8a
   3895  1a8a		       a5 a0		      LDA	temp5
   3896  1a8c		       85 15		      STA	AUDC0
   3897  1a8e				   .L0468		;  AUDF0  =  temp6
   3898  1a8e
   3899  1a8e		       a5 a1		      LDA	temp6
   3900  1a90		       85 17		      STA	AUDF0
   3901  1a92				   .
   3902  1a92							; 
   3903  1a92
   3904  1a92				   .
   3905  1a92							; 
   3906  1a92
   3907  1a92				   .L0469		;  _Ch0_Duration  =  _SD_Touch_Enemy[_Ch0_Counter]  :	_Ch0_Counter  =  _Ch0_Counter  +  1
   3908  1a92
   3909  1a92		       a6 db		      LDX	_Ch0_Counter
   3910  1a94		       bd 95 dc 	      LDA	_SD_Touch_Enemy,x
   3911  1a97		       85 da		      STA	_Ch0_Duration
   3912  1a99		       e6 db		      INC	_Ch0_Counter
   3913  1a9b				   .
   3914  1a9b							; 
   3915  1a9b
   3916  1a9b				   .
   3917  1a9b							; 
   3918  1a9b
   3919  1a9b				   .L0470		;  goto __Skip_Ch_0
   3920  1a9b
   3921  1a9b		       4c a4 da 	      jmp	.__Skip_Ch_0
   3922  1a9e
   3923  1a9e				   .
   3924  1a9e							; 
   3925  1a9e
   3926  1a9e				   .__Skip_Ch0_Sound_004
   3927  1a9e							; __Skip_Ch0_Sound_004
   3928  1a9e
   3929  1a9e				   .
   3930  1a9e							; 
   3931  1a9e
   3932  1a9e				   .
   3933  1a9e							; 
   3934  1a9e
   3935  1a9e				   .__Clear_Ch_0
   3936  1a9e							; __Clear_Ch_0
   3937  1a9e
   3938  1a9e				   .L0471		;  _Ch0_Sound	=  0  :  AUDV0	=  0
   3939  1a9e
   3940  1a9e		       a9 00		      LDA	#0
   3941  1aa0		       85 d9		      STA	_Ch0_Sound
   3942  1aa2		       85 19		      STA	AUDV0
   3943  1aa4				   .
   3944  1aa4							; 
   3945  1aa4
   3946  1aa4				   .
   3947  1aa4							; 
   3948  1aa4
   3949  1aa4				   .__Skip_Ch_0
   3950  1aa4							; __Skip_Ch_0
   3951  1aa4
   3952  1aa4				   .
   3953  1aa4							; 
   3954  1aa4
   3955  1aa4				   .
   3956  1aa4							; 
   3957  1aa4
   3958  1aa4				   .
   3959  1aa4							; 
   3960  1aa4
   3961  1aa4				   .
   3962  1aa4							; 
   3963  1aa4
   3964  1aa4				   .L0472		;  if _Bit6_Flip_P1{6} then REFP1  =  8
   3965  1aa4
   3966  1aa4		       24 ec		      BIT	_Bit6_Flip_P1
   3967  1aa6		       50 04		      BVC	.skipL0472
   3968  1aa8				   .condpart98
   3969  1aa8		       a9 08		      LDA	#8
   3970  1aaa		       85 0c		      STA	REFP1
   3971  1aac				   .skipL0472
   3972  1aac				   .L0473		;  if _Bit0_roommate_Dir{0} then REFP0  =  8
   3973  1aac
   3974  1aac		       a5 ec		      LDA	_Bit0_roommate_Dir
   3975  1aae		       4a		      LSR
   3976  1aaf		       90 04		      BCC	.skipL0473
   3977  1ab1				   .condpart99
   3978  1ab1		       a9 08		      LDA	#8
   3979  1ab3		       85 0b		      STA	REFP0
   3980  1ab5				   .skipL0473
   3981  1ab5				   .
   3982  1ab5							; 
   3983  1ab5
   3984  1ab5				   .L0474		;  drawscreen
   3985  1ab5
   3986  1ab5		       85 ee		      sta	temp7
   3987  1ab7		       a9 da		      lda	#>(ret_point3-1)
   3988  1ab9		       48		      pha
   3989  1aba		       a9 cc		      lda	#<(ret_point3-1)
   3990  1abc		       48		      pha
   3991  1abd		       a9 f5		      lda	#>(drawscreen-1)
   3992  1abf		       48		      pha
   3993  1ac0		       a9 82		      lda	#<(drawscreen-1)
   3994  1ac2		       48		      pha
   3995  1ac3		       a5 ee		      lda	temp7
   3996  1ac5		       48		      pha
   3997  1ac6		       8a		      txa
   3998  1ac7		       48		      pha
   3999  1ac8		       a2 02		      ldx	#2
   4000  1aca		       4c e8 ff 	      jmp	BS_jsr
   4001  1acd				   ret_point3
   4002  1acd				   .
   4003  1acd							; 
   4004  1acd
   4005  1acd				   .L0475		;  goto __Main_Loop
   4006  1acd
   4007  1acd		       4c f9 d2 	      jmp	.__Main_Loop
   4008  1ad0
   4009  1ad0				   .
   4010  1ad0							; 
   4011  1ad0
   4012  1ad0				   .
   4013  1ad0							; 
   4014  1ad0
   4015  1ad0				   .
   4016  1ad0							; 
   4017  1ad0
   4018  1ad0				   .
   4019  1ad0							; 
   4020  1ad0
   4021  1ad0				   .
   4022  1ad0							; 
   4023  1ad0
   4024  1ad0				   ._Set_Game_Over
   4025  1ad0							; _Set_Game_Over
   4026  1ad0
   4027  1ad0				   .L0476		;  WriteToBuffer  =  _sc1
   4028  1ad0
   4029  1ad0		       a5 93		      LDA	_sc1
   4030  1ad2		       8d f0 1f 	      STA	WriteToBuffer
   4031  1ad5				   .L0477		;  WriteToBuffer  =  _sc2
   4032  1ad5
   4033  1ad5		       a5 94		      LDA	_sc2
   4034  1ad7		       8d f0 1f 	      STA	WriteToBuffer
   4035  1ada				   .L0478		;  WriteToBuffer  =  _sc3
   4036  1ada
   4037  1ada		       a5 95		      LDA	_sc3
   4038  1adc		       8d f0 1f 	      STA	WriteToBuffer
   4039  1adf				   .L0479		;  WriteSendBuffer  =	req_game_over
   4040  1adf
   4041  1adf		       a9 02		      LDA	#req_game_over
   4042  1ae1		       8d f1 1f 	      STA	WriteSendBuffer
   4043  1ae4				   .L0480		;  _Bit4_Game_Over{4}	=  1
   4044  1ae4
   4045  1ae4		       a5 ec		      LDA	_Bit4_Game_Over
   4046  1ae6		       09 10		      ORA	#16
   4047  1ae8		       85 ec		      STA	_Bit4_Game_Over
   4048  1aea				   .L0481		;  goto _skip_game_action
   4049  1aea
   4050  1aea		       4c 71 d9 	      jmp	._skip_game_action
   4051  1aed
   4052  1aed				   .
   4053  1aed							; 
   4054  1aed
   4055  1aed				   ._Reset_Level
   4056  1aed							; _Reset_Level
   4057  1aed
   4058  1aed				   .L0482		;  WriteSendBuffer  =	req_level_reset
   4059  1aed
   4060  1aed		       a9 07		      LDA	#req_level_reset
   4061  1aef		       8d f1 1f 	      STA	WriteSendBuffer
   4062  1af2				   .L0483		;  _Bit2_New_Room_Flip_P1{2}  =  _Bit1_Safe_Point_P1_Flip{1}
   4063  1af2
   4064  1af2		       a5 df		      LDA	_Bit1_Safe_Point_P1_Flip
   4065  1af4		       29 02		      AND	#2
   4066  1af6		       08		      PHP
   4067  1af7		       a5 df		      LDA	_Bit2_New_Room_Flip_P1
   4068  1af9		       29 fb		      AND	#251
   4069  1afb		       28		      PLP
   4070  1afc		       f0 02		      .byte.b	$F0, $02
   4071  1afe		       09 04		      ORA	#4
   4072  1b00		       85 df		      STA	_Bit2_New_Room_Flip_P1
   4073  1b02				   .
   4074  1b02							; 
   4075  1b02
   4076  1b02				   ._Common_Reset
   4077  1b02							; _Common_Reset
   4078  1b02
   4079  1b02				   .L0484		;  delay_counter  =  60
   4080  1b02
   4081  1b02		       a9 3c		      LDA	#60
   4082  1b04		       85 d4		      STA	delay_counter
   4083  1b06				   .L0485		;  _Bit5_Request_Pending{5}  =  1
   4084  1b06
   4085  1b06		       a5 ec		      LDA	_Bit5_Request_Pending
   4086  1b08		       09 20		      ORA	#32
   4087  1b0a		       85 ec		      STA	_Bit5_Request_Pending
   4088  1b0c				   .L0486		;  pfscore2  =  255
   4089  1b0c
   4090  1b0c		       a9 ff		      LDA	#255
   4091  1b0e		       85 f3		      STA	pfscore2
   4092  1b10				   .L0487		;  P1y_velocity  =  0.0  :  x	=  0
   4093  1b10
   4094  1b10		       a2 00		      LDX	#0
   4095  1b12		       86 ea		      STX	w
   4096  1b14		       a9 00		      LDA	#0
   4097  1b16		       85 e9		      STA	P1y_velocity
   4098  1b18		       a9 00		      LDA	#0
   4099  1b1a		       85 eb		      STA	x
   4100  1b1c				   .L0488		;  new_room_player1x  =  Safe_Point_P1_x
   4101  1b1c
   4102  1b1c		       a5 e0		      LDA	Safe_Point_P1_x
   4103  1b1e		       85 a5		      STA	new_room_player1x
   4104  1b20				   .L0489		;  new_room_player1y  =  Safe_Point_P1_y
   4105  1b20
   4106  1b20		       a5 e1		      LDA	Safe_Point_P1_y
   4107  1b22		       85 a4		      STA	new_room_player1y
   4108  1b24				   .L0490		;  goto _skip_game_action
   4109  1b24
   4110  1b24		       4c 71 d9 	      jmp	._skip_game_action
   4111  1b27
   4112  1b27				   .
   4113  1b27							; 
   4114  1b27
   4115  1b27				   ._Level_Up
   4116  1b27							; _Level_Up
   4117  1b27
   4118  1b27				   .L0491		;  WriteToBuffer  =  _sc1
   4119  1b27
   4120  1b27		       a5 93		      LDA	_sc1
   4121  1b29		       8d f0 1f 	      STA	WriteToBuffer
   4122  1b2c				   .L0492		;  WriteToBuffer  =  _sc2
   4123  1b2c
   4124  1b2c		       a5 94		      LDA	_sc2
   4125  1b2e		       8d f0 1f 	      STA	WriteToBuffer
   4126  1b31				   .L0493		;  WriteToBuffer  =  _sc3
   4127  1b31
   4128  1b31		       a5 95		      LDA	_sc3
   4129  1b33		       8d f0 1f 	      STA	WriteToBuffer
   4130  1b36				   .L0494		;  WriteSendBuffer  =	req_level_up
   4131  1b36
   4132  1b36		       a9 01		      LDA	#req_level_up
   4133  1b38		       8d f1 1f 	      STA	WriteSendBuffer
   4134  1b3b				   .L0495		;  _BitOp_Safe_Point_New_Room	=  0
   4135  1b3b
   4136  1b3b		       a9 00		      LDA	#0
   4137  1b3d		       85 df		      STA	_BitOp_Safe_Point_New_Room
   4138  1b3f				   .L0496		;  Safe_Point_P1_x  =	30
   4139  1b3f
   4140  1b3f		       a9 1e		      LDA	#30
   4141  1b41		       85 e0		      STA	Safe_Point_P1_x
   4142  1b43				   .L0497		;  Safe_Point_P1_y  =	player_min_y
   4143  1b43
   4144  1b43		       a9 02		      LDA	#player_min_y
   4145  1b45		       85 e1		      STA	Safe_Point_P1_y
   4146  1b47				   .L0498		;  pfscore1  =  %00101010
   4147  1b47
   4148  1b47		       a9 2a		      LDA	#%00101010
   4149  1b49		       85 f2		      STA	pfscore1
   4150  1b4b				   .L0499		;  score  =  0
   4151  1b4b
   4152  1b4b		       a9 00		      LDA	#$00
   4153  1b4d		       85 95		      STA	score+2
   4154  1b4f		       a9 00		      LDA	#$00
   4155  1b51		       85 94		      STA	score+1
   4156  1b53		       a9 00		      LDA	#$00
   4157  1b55		       85 93		      STA	score
   4158  1b57				   .L0500		;  goto _Common_Reset
   4159  1b57
   4160  1b57		       4c 02 db 	      jmp	._Common_Reset
   4161  1b5a
   4162  1b5a				   .
   4163  1b5a							; 
   4164  1b5a
   4165  1b5a				   .
   4166  1b5a							; 
   4167  1b5a
   4168  1b5a				   .
   4169  1b5a							; 
   4170  1b5a
   4171  1b5a				   ._Add_Room_State
   4172  1b5a							; _Add_Room_State
   4173  1b5a
   4174  1b5a				   .L0501		;  _Bit5_Request_Pending{5}  =  1
   4175  1b5a
   4176  1b5a		       a5 ec		      LDA	_Bit5_Request_Pending
   4177  1b5c		       09 20		      ORA	#32
   4178  1b5e		       85 ec		      STA	_Bit5_Request_Pending
   4179  1b60				   .L0502		;  WriteToBuffer  =  r104
   4180  1b60
   4181  1b60		       ad e8 f0 	      LDA	r104
   4182  1b63		       8d f0 1f 	      STA	WriteToBuffer
   4183  1b66				   .L0503		;  WriteToBuffer  =  r105
   4184  1b66
   4185  1b66		       ad e9 f0 	      LDA	r105
   4186  1b69		       8d f0 1f 	      STA	WriteToBuffer
   4187  1b6c				   .L0504		;  WriteToBuffer  =  r106
   4188  1b6c
   4189  1b6c		       ad ea f0 	      LDA	r106
   4190  1b6f		       8d f0 1f 	      STA	WriteToBuffer
   4191  1b72				   .L0505		;  WriteToBuffer  =  r107
   4192  1b72
   4193  1b72		       ad eb f0 	      LDA	r107
   4194  1b75		       8d f0 1f 	      STA	WriteToBuffer
   4195  1b78				   .L0506		;  WriteToBuffer  =  r108
   4196  1b78
   4197  1b78		       ad ec f0 	      LDA	r108
   4198  1b7b		       8d f0 1f 	      STA	WriteToBuffer
   4199  1b7e				   .L0507		;  WriteToBuffer  =  r109
   4200  1b7e
   4201  1b7e		       ad ed f0 	      LDA	r109
   4202  1b81		       8d f0 1f 	      STA	WriteToBuffer
   4203  1b84				   .L0508		;  WriteToBuffer  =  r110
   4204  1b84
   4205  1b84		       ad ee f0 	      LDA	r110
   4206  1b87		       8d f0 1f 	      STA	WriteToBuffer
   4207  1b8a				   .L0509		;  WriteToBuffer  =  r111
   4208  1b8a
   4209  1b8a		       ad ef f0 	      LDA	r111
   4210  1b8d		       8d f0 1f 	      STA	WriteToBuffer
   4211  1b90				   .L0510		;  return
   4212  1b90
   4213  1b90		       ba		      tsx
   4214  1b91		       b5 02		      lda	2,x	; check return address
   4215  1b93		       49 db		      eor	#(>*)	; vs. current PCH
   4216  1b95		       29 e0		      and	#$E0	;  mask off all but top 3 bits
   4217  1b97		       f0 03		      beq	*+5	; if equal, do normal return
   4218  1b99		       4c da ff 	      JMP	BS_return
   4219  1b9c		       60		      RTS
   4220  1b9d				   .
   4221  1b9d							; 
   4222  1b9d
   4223  1b9d				   .
   4224  1b9d							; 
   4225  1b9d
   4226  1b9d				   .
   4227  1b9d							; 
   4228  1b9d
   4229  1b9d				   .
   4230  1b9d							; 
   4231  1b9d
   4232  1b9d				   ._Change_Room
   4233  1b9d							; _Change_Room
   4234  1b9d
   4235  1b9d				   .L0511		;  delay_counter  =  2  :  player0y  =  200
   4236  1b9d
   4237  1b9d		       a9 02		      LDA	#2
   4238  1b9f		       85 d4		      STA	delay_counter
   4239  1ba1		       a9 c8		      LDA	#200
   4240  1ba3		       85 85		      STA	player0y
   4241  1ba5				   .L0512		;  _Bit_Game_State  =	_Bit_Game_State  &  %11111100
   4242  1ba5
   4243  1ba5		       a5 ec		      LDA	_Bit_Game_State
   4244  1ba7		       29 fc		      AND	#%11111100
   4245  1ba9		       85 ec		      STA	_Bit_Game_State
   4246  1bab				   .L0513		;  _Bit5_Request_Pending{5}  =  0
   4247  1bab
   4248  1bab		       a5 ec		      LDA	_Bit5_Request_Pending
   4249  1bad		       29 df		      AND	#223
   4250  1baf		       85 ec		      STA	_Bit5_Request_Pending
   4251  1bb1				   .L0514		;  _Bit0_Safe_Point_reached{0}  =  0
   4252  1bb1
   4253  1bb1		       a5 df		      LDA	_Bit0_Safe_Point_reached
   4254  1bb3		       29 fe		      AND	#254
   4255  1bb5		       85 df		      STA	_Bit0_Safe_Point_reached
   4256  1bb7				   .L0515		;  player1y  =  new_room_player1y  :  player1x  =  new_room_player1x  :  _Bit6_Flip_P1{6}  =  _Bit2_New_Room_Flip_P1{2}
   4257  1bb7
   4258  1bb7		       a5 a4		      LDA	new_room_player1y
   4259  1bb9		       85 86		      STA	player1y
   4260  1bbb		       a5 a5		      LDA	new_room_player1x
   4261  1bbd		       85 81		      STA	player1x
   4262  1bbf		       a5 df		      LDA	_Bit2_New_Room_Flip_P1
   4263  1bc1		       29 04		      AND	#4
   4264  1bc3		       08		      PHP
   4265  1bc4		       a5 ec		      LDA	_Bit6_Flip_P1
   4266  1bc6		       29 bf		      AND	#191
   4267  1bc8		       28		      PLP
   4268  1bc9		       f0 02		      .byte.b	$F0, $02
   4269  1bcb		       09 40		      ORA	#64
   4270  1bcd		       85 ec		      STA	_Bit6_Flip_P1
   4271  1bcf				   .L0516		;  asm
   4272  1bcf
   4273  1bcf		       a9 00		      LDA	#0
   4274  1bd1
   4275  1bd1		       85 89		      STA	bally
   4276  1bd3
   4277  1bd3		       85 dc		      STA	extra_wall_move_x
   4278  1bd5
   4279  1bd5		       85 dd		      STA	roommate_move_x
   4280  1bd7
   4281  1bd7		       aa		      TAX
   4282  1bd8
   4283  1bd8				   .copy_loop
   4284  1bd8
   4285  1bd8		       ad f2 1f 	      LDA	ReceiveBuffer	; 4
   4286  1bdb
   4287  1bdb		       9d 61 f0 	      STA	w_room_definition_start,x	; 5   @9
   4288  1bde
   4289  1bde		       e8		      INX		; 2   @11
   4290  1bdf
   4291  1bdf		       ad f3 1f 	      LDA	ReceiveBufferSize	; 4   @15
   4292  1be2
   4293  1be2		       d0 f4		      BNE	.copy_loop	; 2/3 @18
   4294  1be4
   4295  1be4				   .L0517		;  roommate_type  =  r_roommate_type_and_range  &  3
   4296  1be4
   4297  1be4		       ad e8 f0 	      LDA	r_roommate_type_and_range
   4298  1be7		       29 03		      AND	#3
   4299  1be9		       85 de		      STA	roommate_type
   4300  1beb				   .L0518		;  goto _skip_game_action
   4301  1beb
   4302  1beb		       4c 71 d9 	      jmp	._skip_game_action
   4303  1bee
   4304  1bee				   .
   4305  1bee							; 
   4306  1bee
   4307  1bee				   .
   4308  1bee							; 
   4309  1bee
   4310  1bee				   .
   4311  1bee							; 
   4312  1bee
   4313  1bee				   .
   4314  1bee							; 
   4315  1bee
   4316  1bee				   .
   4317  1bee							; 
   4318  1bee
   4319  1bee				   .
   4320  1bee							; 
   4321  1bee
   4322  1bee				   .L0519		;  data _SD_Shot_Wall
   4323  1bee
   4324  1bee		       4c 26 dc 	      JMP	.skipL0519
   4325  1bf1				   _SD_Shot_Wall
   4326  1bf1		       08 08 00 	      .byte.b	8,8,0
   4327  1bf4
   4328  1bf4		       01		      .byte.b	1
   4329  1bf5
   4330  1bf5		       08 08 01 	      .byte.b	8,8,1
   4331  1bf8
   4332  1bf8		       01		      .byte.b	1
   4333  1bf9
   4334  1bf9		       08 0e 01 	      .byte.b	8,14,1
   4335  1bfc
   4336  1bfc		       01		      .byte.b	1
   4337  1bfd
   4338  1bfd		       08 08 00 	      .byte.b	8,8,0
   4339  1c00
   4340  1c00		       01		      .byte.b	1
   4341  1c01
   4342  1c01		       08 08 02 	      .byte.b	8,8,2
   4343  1c04
   4344  1c04		       01		      .byte.b	1
   4345  1c05
   4346  1c05		       08 0e 02 	      .byte.b	8,14,2
   4347  1c08
   4348  1c08		       01		      .byte.b	1
   4349  1c09
   4350  1c09		       08 08 01 	      .byte.b	8,8,1
   4351  1c0c
   4352  1c0c		       01		      .byte.b	1
   4353  1c0d
   4354  1c0d		       07 08 03 	      .byte.b	7,8,3
   4355  1c10
   4356  1c10		       01		      .byte.b	1
   4357  1c11
   4358  1c11		       06 08 02 	      .byte.b	6,8,2
   4359  1c14
   4360  1c14		       01		      .byte.b	1
   4361  1c15
   4362  1c15		       05 08 04 	      .byte.b	5,8,4
   4363  1c18
   4364  1c18		       01		      .byte.b	1
   4365  1c19
   4366  1c19		       04 08 03 	      .byte.b	4,8,3
   4367  1c1c
   4368  1c1c		       01		      .byte.b	1
   4369  1c1d
   4370  1c1d		       03 08 05 	      .byte.b	3,8,5
   4371  1c20
   4372  1c20		       01		      .byte.b	1
   4373  1c21
   4374  1c21		       02 0e 04 	      .byte.b	2,14,4
   4375  1c24
   4376  1c24		       04		      .byte.b	4
   4377  1c25
   4378  1c25		       ff		      .byte.b	255
   4379  1c26
   4380  1c26				   .skipL0519
   4381  1c26				   .
   4382  1c26							; 
   4383  1c26
   4384  1c26				   .
   4385  1c26							; 
   4386  1c26
   4387  1c26				   .L0520		;  data _SD_Shoot_Miss
   4388  1c26
   4389  1c26		       4c 6e dc 	      JMP	.skipL0520
   4390  1c29				   _SD_Shoot_Miss
   4391  1c29		       08 0f 00 	      .byte.b	8,15,0
   4392  1c2c
   4393  1c2c		       01		      .byte.b	1
   4394  1c2d
   4395  1c2d		       0c 0f 01 	      .byte.b	12,15,1
   4396  1c30
   4397  1c30		       01		      .byte.b	1
   4398  1c31
   4399  1c31		       08 07 14 	      .byte.b	8,7,20
   4400  1c34
   4401  1c34		       01		      .byte.b	1
   4402  1c35
   4403  1c35		       0a 0f 03 	      .byte.b	10,15,3
   4404  1c38
   4405  1c38		       01		      .byte.b	1
   4406  1c39
   4407  1c39		       08 07 16 	      .byte.b	8,7,22
   4408  1c3c
   4409  1c3c		       01		      .byte.b	1
   4410  1c3d
   4411  1c3d		       0a 0f 05 	      .byte.b	10,15,5
   4412  1c40
   4413  1c40		       01		      .byte.b	1
   4414  1c41
   4415  1c41		       08 0f 06 	      .byte.b	8,15,6
   4416  1c44
   4417  1c44		       01		      .byte.b	1
   4418  1c45
   4419  1c45		       0a 07 18 	      .byte.b	10,7,24
   4420  1c48
   4421  1c48		       01		      .byte.b	1
   4422  1c49
   4423  1c49		       08 0f 08 	      .byte.b	8,15,8
   4424  1c4c
   4425  1c4c		       01		      .byte.b	1
   4426  1c4d
   4427  1c4d		       09 07 1b 	      .byte.b	9,7,27
   4428  1c50
   4429  1c50		       01		      .byte.b	1
   4430  1c51
   4431  1c51		       08 0f 0a 	      .byte.b	8,15,10
   4432  1c54
   4433  1c54		       01		      .byte.b	1
   4434  1c55
   4435  1c55		       07 0e 0b 	      .byte.b	7,14,11
   4436  1c58
   4437  1c58		       01		      .byte.b	1
   4438  1c59
   4439  1c59		       06 0f 0c 	      .byte.b	6,15,12
   4440  1c5c
   4441  1c5c		       01		      .byte.b	1
   4442  1c5d
   4443  1c5d		       05 06 0d 	      .byte.b	5,6,13
   4444  1c60
   4445  1c60		       01		      .byte.b	1
   4446  1c61
   4447  1c61		       04 0f 0e 	      .byte.b	4,15,14
   4448  1c64
   4449  1c64		       01		      .byte.b	1
   4450  1c65
   4451  1c65		       03 06 1b 	      .byte.b	3,6,27
   4452  1c68
   4453  1c68		       01		      .byte.b	1
   4454  1c69
   4455  1c69		       02 06 1e 	      .byte.b	2,6,30
   4456  1c6c
   4457  1c6c		       08		      .byte.b	8
   4458  1c6d
   4459  1c6d		       ff		      .byte.b	255
   4460  1c6e
   4461  1c6e				   .skipL0520
   4462  1c6e				   .
   4463  1c6e							; 
   4464  1c6e
   4465  1c6e				   .
   4466  1c6e							; 
   4467  1c6e
   4468  1c6e				   .L0521		;  data _SD_Shoot_Enemy
   4469  1c6e
   4470  1c6e		       4c 92 dc 	      JMP	.skipL0521
   4471  1c71				   _SD_Shoot_Enemy
   4472  1c71		       0c 04 17 	      .byte.b	12,4,23
   4473  1c74
   4474  1c74		       04		      .byte.b	4
   4475  1c75
   4476  1c75		       0a 04 1d 	      .byte.b	10,4,29
   4477  1c78
   4478  1c78		       04		      .byte.b	4
   4479  1c79
   4480  1c79		       08 04 17 	      .byte.b	8,4,23
   4481  1c7c
   4482  1c7c		       04		      .byte.b	4
   4483  1c7d
   4484  1c7d		       06 04 1d 	      .byte.b	6,4,29
   4485  1c80
   4486  1c80		       04		      .byte.b	4
   4487  1c81
   4488  1c81		       04 04 17 	      .byte.b	4,4,23
   4489  1c84
   4490  1c84		       04		      .byte.b	4
   4491  1c85
   4492  1c85		       03 04 1d 	      .byte.b	3,4,29
   4493  1c88
   4494  1c88		       04		      .byte.b	4
   4495  1c89
   4496  1c89		       02 04 17 	      .byte.b	2,4,23
   4497  1c8c
   4498  1c8c		       01		      .byte.b	1
   4499  1c8d
   4500  1c8d		       01 04 1d 	      .byte.b	1,4,29
   4501  1c90
   4502  1c90		       01		      .byte.b	1
   4503  1c91
   4504  1c91		       ff		      .byte.b	255
   4505  1c92
   4506  1c92				   .skipL0521
   4507  1c92				   .
   4508  1c92							; 
   4509  1c92
   4510  1c92				   .
   4511  1c92							; 
   4512  1c92
   4513  1c92				   .L0522		;  data _SD_Touch_Enemy
   4514  1c92
   4515  1c92		       4c b2 dc 	      JMP	.skipL0522
   4516  1c95				   _SD_Touch_Enemy
   4517  1c95		       02 07 0b 	      .byte.b	2,7,11
   4518  1c98
   4519  1c98		       02		      .byte.b	2
   4520  1c99
   4521  1c99		       0a 07 0c 	      .byte.b	10,7,12
   4522  1c9c
   4523  1c9c		       02		      .byte.b	2
   4524  1c9d
   4525  1c9d		       08 07 0d 	      .byte.b	8,7,13
   4526  1ca0
   4527  1ca0		       02		      .byte.b	2
   4528  1ca1
   4529  1ca1		       08 07 0e 	      .byte.b	8,7,14
   4530  1ca4
   4531  1ca4		       02		      .byte.b	2
   4532  1ca5
   4533  1ca5		       08 07 15 	      .byte.b	8,7,21
   4534  1ca8
   4535  1ca8		       08		      .byte.b	8
   4536  1ca9
   4537  1ca9		       04 07 16 	      .byte.b	4,7,22
   4538  1cac
   4539  1cac		       02		      .byte.b	2
   4540  1cad
   4541  1cad		       02 07 17 	      .byte.b	2,7,23
   4542  1cb0
   4543  1cb0		       01		      .byte.b	1
   4544  1cb1
   4545  1cb1		       ff		      .byte.b	255
   4546  1cb2
   4547  1cb2				   .skipL0522
   4548  1cb2				   .
   4549  1cb2							; 
   4550  1cb2
   4551  1cb2				   .
   4552  1cb2							; 
   4553  1cb2
   4554  1cb2				   .
   4555  1cb2							; 
   4556  1cb2
   4557  1cb2				   .
   4558  1cb2							; 
   4559  1cb2
   4560  1cb2				   .L0523		;  asm
   4561  1cb2
      0  1cb2					      SET_PLUSROM_API	"a.php", "ca.firmaplus.de"
      1  1cb2				   PlusROM_API
      2  1cb2		       61 2e 70 68*	      .byte.b	"a.php", 0, "ca.firmaplus.de", 0
   4563  1cc8
   4564  1cc8				   .
   4565  1cc8							; 
   4566  1cc8
   4567  1cc8				   .
   4568  1cc8							; 
   4569  1cc8
   4570  1cc8				   .
   4571  1cc8							; 
   4572  1cc8
   4573  1cc8				   .
   4574  1cc8							; 
   4575  1cc8
   4576  1cc8				   .
   4577  1cc8							; 
   4578  1cc8
   4579  1cc8				   .L0524		;  bank 2
   4580  1cc8
   4581  1cc8					      if	ECHO1
      777 bytes of ROM space left in bank 1
   4582  1cc8					      echo	"    ",[(start_bank1 - *)]d , "bytes of ROM space left in bank 1")
   4583  1cc8					      endif
   4584  1cc8		       00 01	   ECHO1      =	1
   4585  1fd1					      ORG	$1FF4-bscode_length
   4586  1fd1					      RORG	$DFF4-bscode_length
   4587  1fd1		       a2 ff	   start_bank1 ldx	#$ff
   4588  1fd3				  -	      ifconst	FASTFETCH	; using DPC+
   4589  1fd3				  -	      stx	FASTFETCH
   4590  1fd3					      endif
   4591  1fd3		       9a		      txs
   4592  1fd4				  -	      if	bankswitch == 64
   4593  1fd4				  -	      lda	#(((>(start-1)) & $0F) | $F0)
   4594  1fd4					      else
   4595  1fd4		       a9 f3		      lda	#>(start-1)
   4596  1fd6					      endif
   4597  1fd6		       48		      pha
   4598  1fd7		       a9 51		      lda	#<(start-1)
   4599  1fd9		       48		      pha
   4600  1fda		       48		      pha
   4601  1fdb		       8a		      txa
   4602  1fdc		       48		      pha
   4603  1fdd		       ba		      tsx
   4604  1fde					      if	bankswitch != 64
   4605  1fde		       b5 04		      lda	4,x	; get high byte of return address
   4606  1fe0		       2a		      rol
   4607  1fe1		       2a		      rol
   4608  1fe2		       2a		      rol
   4609  1fe3		       2a		      rol
   4610  1fe4		       29 01		      and	#bs_mask	;1 3 or 7 for F8/F6/F4
   4611  1fe6		       aa		      tax
   4612  1fe7		       e8		      inx
   4613  1fe8				  -	      else
   4614  1fe8				  -	      lda	4,x	; get high byte of return address
   4615  1fe8				  -	      tay
   4616  1fe8				  -	      ora	#$10	; change our bank nibble into a valid rom mirror
   4617  1fe8				  -	      sta	4,x
   4618  1fe8				  -	      tya
   4619  1fe8				  -	      lsr
   4620  1fe8				  -	      lsr
   4621  1fe8				  -	      lsr
   4622  1fe8				  -	      lsr
   4623  1fe8				  -	      tax
   4624  1fe8				  -	      inx
   4625  1fe8					      endif
   4626  1fe8		       bd f7 1f 	      lda	bankswitch_hotspot-1,x
   4627  1feb		       68		      pla
   4628  1fec		       aa		      tax
   4629  1fed		       68		      pla
   4630  1fee		       60		      rts
   4631  1fef				  -	      if	((* & $1FFF) > ((bankswitch_hotspot & $1FFF) - 1))
   4632  1fef				  -	      echo	"WARNING: size parameter in banksw.asm too small - the program probably will not work."
   4633  1fef				  -	      echo	"Change to",[(*-begin_bscode+1)&$FF]d,"and try again."
   4634  1fef					      endif
   4635  1ffc					      ORG	$1FFC
   4636  1ffc					      RORG	$DFFC
   4637  1ffc		       d1 df		      .word.w	(start_bank1 & $ffff)
   4638  1ffe		       d1 df		      .word.w	(start_bank1 & $ffff)
   4639  2000					      ORG	$2000
   4640  2000					      RORG	$F000
   4641  2000					      repeat	256
   4642  2000		       ff		      .byte.b	$ff
   4641  2000					      repend
   4642  2001		       ff		      .byte.b	$ff
   4641  2001					      repend
   4642  2002		       ff		      .byte.b	$ff
   4641  2002					      repend
   4642  2003		       ff		      .byte.b	$ff
   4641  2003					      repend
   4642  2004		       ff		      .byte.b	$ff
   4641  2004					      repend
   4642  2005		       ff		      .byte.b	$ff
   4641  2005					      repend
   4642  2006		       ff		      .byte.b	$ff
   4641  2006					      repend
   4642  2007		       ff		      .byte.b	$ff
   4641  2007					      repend
   4642  2008		       ff		      .byte.b	$ff
   4641  2008					      repend
   4642  2009		       ff		      .byte.b	$ff
   4641  2009					      repend
   4642  200a		       ff		      .byte.b	$ff
   4641  200a					      repend
   4642  200b		       ff		      .byte.b	$ff
   4641  200b					      repend
   4642  200c		       ff		      .byte.b	$ff
   4641  200c					      repend
   4642  200d		       ff		      .byte.b	$ff
   4641  200d					      repend
   4642  200e		       ff		      .byte.b	$ff
   4641  200e					      repend
   4642  200f		       ff		      .byte.b	$ff
   4641  200f					      repend
   4642  2010		       ff		      .byte.b	$ff
   4641  2010					      repend
   4642  2011		       ff		      .byte.b	$ff
   4641  2011					      repend
   4642  2012		       ff		      .byte.b	$ff
   4641  2012					      repend
   4642  2013		       ff		      .byte.b	$ff
   4641  2013					      repend
   4642  2014		       ff		      .byte.b	$ff
   4641  2014					      repend
   4642  2015		       ff		      .byte.b	$ff
   4641  2015					      repend
   4642  2016		       ff		      .byte.b	$ff
   4641  2016					      repend
   4642  2017		       ff		      .byte.b	$ff
   4641  2017					      repend
   4642  2018		       ff		      .byte.b	$ff
   4641  2018					      repend
   4642  2019		       ff		      .byte.b	$ff
   4641  2019					      repend
   4642  201a		       ff		      .byte.b	$ff
   4641  201a					      repend
   4642  201b		       ff		      .byte.b	$ff
   4641  201b					      repend
   4642  201c		       ff		      .byte.b	$ff
   4641  201c					      repend
   4642  201d		       ff		      .byte.b	$ff
   4641  201d					      repend
   4642  201e		       ff		      .byte.b	$ff
   4641  201e					      repend
   4642  201f		       ff		      .byte.b	$ff
   4641  201f					      repend
   4642  2020		       ff		      .byte.b	$ff
   4641  2020					      repend
   4642  2021		       ff		      .byte.b	$ff
   4641  2021					      repend
   4642  2022		       ff		      .byte.b	$ff
   4641  2022					      repend
   4642  2023		       ff		      .byte.b	$ff
   4641  2023					      repend
   4642  2024		       ff		      .byte.b	$ff
   4641  2024					      repend
   4642  2025		       ff		      .byte.b	$ff
   4641  2025					      repend
   4642  2026		       ff		      .byte.b	$ff
   4641  2026					      repend
   4642  2027		       ff		      .byte.b	$ff
   4641  2027					      repend
   4642  2028		       ff		      .byte.b	$ff
   4641  2028					      repend
   4642  2029		       ff		      .byte.b	$ff
   4641  2029					      repend
   4642  202a		       ff		      .byte.b	$ff
   4641  202a					      repend
   4642  202b		       ff		      .byte.b	$ff
   4641  202b					      repend
   4642  202c		       ff		      .byte.b	$ff
   4641  202c					      repend
   4642  202d		       ff		      .byte.b	$ff
   4641  202d					      repend
   4642  202e		       ff		      .byte.b	$ff
   4641  202e					      repend
   4642  202f		       ff		      .byte.b	$ff
   4641  202f					      repend
   4642  2030		       ff		      .byte.b	$ff
   4641  2030					      repend
   4642  2031		       ff		      .byte.b	$ff
   4641  2031					      repend
   4642  2032		       ff		      .byte.b	$ff
   4641  2032					      repend
   4642  2033		       ff		      .byte.b	$ff
   4641  2033					      repend
   4642  2034		       ff		      .byte.b	$ff
   4641  2034					      repend
   4642  2035		       ff		      .byte.b	$ff
   4641  2035					      repend
   4642  2036		       ff		      .byte.b	$ff
   4641  2036					      repend
   4642  2037		       ff		      .byte.b	$ff
   4641  2037					      repend
   4642  2038		       ff		      .byte.b	$ff
   4641  2038					      repend
   4642  2039		       ff		      .byte.b	$ff
   4641  2039					      repend
   4642  203a		       ff		      .byte.b	$ff
   4641  203a					      repend
   4642  203b		       ff		      .byte.b	$ff
   4641  203b					      repend
   4642  203c		       ff		      .byte.b	$ff
   4641  203c					      repend
   4642  203d		       ff		      .byte.b	$ff
   4641  203d					      repend
   4642  203e		       ff		      .byte.b	$ff
   4641  203e					      repend
   4642  203f		       ff		      .byte.b	$ff
   4641  203f					      repend
   4642  2040		       ff		      .byte.b	$ff
   4641  2040					      repend
   4642  2041		       ff		      .byte.b	$ff
   4641  2041					      repend
   4642  2042		       ff		      .byte.b	$ff
   4641  2042					      repend
   4642  2043		       ff		      .byte.b	$ff
   4641  2043					      repend
   4642  2044		       ff		      .byte.b	$ff
   4641  2044					      repend
   4642  2045		       ff		      .byte.b	$ff
   4641  2045					      repend
   4642  2046		       ff		      .byte.b	$ff
   4641  2046					      repend
   4642  2047		       ff		      .byte.b	$ff
   4641  2047					      repend
   4642  2048		       ff		      .byte.b	$ff
   4641  2048					      repend
   4642  2049		       ff		      .byte.b	$ff
   4641  2049					      repend
   4642  204a		       ff		      .byte.b	$ff
   4641  204a					      repend
   4642  204b		       ff		      .byte.b	$ff
   4641  204b					      repend
   4642  204c		       ff		      .byte.b	$ff
   4641  204c					      repend
   4642  204d		       ff		      .byte.b	$ff
   4641  204d					      repend
   4642  204e		       ff		      .byte.b	$ff
   4641  204e					      repend
   4642  204f		       ff		      .byte.b	$ff
   4641  204f					      repend
   4642  2050		       ff		      .byte.b	$ff
   4641  2050					      repend
   4642  2051		       ff		      .byte.b	$ff
   4641  2051					      repend
   4642  2052		       ff		      .byte.b	$ff
   4641  2052					      repend
   4642  2053		       ff		      .byte.b	$ff
   4641  2053					      repend
   4642  2054		       ff		      .byte.b	$ff
   4641  2054					      repend
   4642  2055		       ff		      .byte.b	$ff
   4641  2055					      repend
   4642  2056		       ff		      .byte.b	$ff
   4641  2056					      repend
   4642  2057		       ff		      .byte.b	$ff
   4641  2057					      repend
   4642  2058		       ff		      .byte.b	$ff
   4641  2058					      repend
   4642  2059		       ff		      .byte.b	$ff
   4641  2059					      repend
   4642  205a		       ff		      .byte.b	$ff
   4641  205a					      repend
   4642  205b		       ff		      .byte.b	$ff
   4641  205b					      repend
   4642  205c		       ff		      .byte.b	$ff
   4641  205c					      repend
   4642  205d		       ff		      .byte.b	$ff
   4641  205d					      repend
   4642  205e		       ff		      .byte.b	$ff
   4641  205e					      repend
   4642  205f		       ff		      .byte.b	$ff
   4641  205f					      repend
   4642  2060		       ff		      .byte.b	$ff
   4641  2060					      repend
   4642  2061		       ff		      .byte.b	$ff
   4641  2061					      repend
   4642  2062		       ff		      .byte.b	$ff
   4641  2062					      repend
   4642  2063		       ff		      .byte.b	$ff
   4641  2063					      repend
   4642  2064		       ff		      .byte.b	$ff
   4641  2064					      repend
   4642  2065		       ff		      .byte.b	$ff
   4641  2065					      repend
   4642  2066		       ff		      .byte.b	$ff
   4641  2066					      repend
   4642  2067		       ff		      .byte.b	$ff
   4641  2067					      repend
   4642  2068		       ff		      .byte.b	$ff
   4641  2068					      repend
   4642  2069		       ff		      .byte.b	$ff
   4641  2069					      repend
   4642  206a		       ff		      .byte.b	$ff
   4641  206a					      repend
   4642  206b		       ff		      .byte.b	$ff
   4641  206b					      repend
   4642  206c		       ff		      .byte.b	$ff
   4641  206c					      repend
   4642  206d		       ff		      .byte.b	$ff
   4641  206d					      repend
   4642  206e		       ff		      .byte.b	$ff
   4641  206e					      repend
   4642  206f		       ff		      .byte.b	$ff
   4641  206f					      repend
   4642  2070		       ff		      .byte.b	$ff
   4641  2070					      repend
   4642  2071		       ff		      .byte.b	$ff
   4641  2071					      repend
   4642  2072		       ff		      .byte.b	$ff
   4641  2072					      repend
   4642  2073		       ff		      .byte.b	$ff
   4641  2073					      repend
   4642  2074		       ff		      .byte.b	$ff
   4641  2074					      repend
   4642  2075		       ff		      .byte.b	$ff
   4641  2075					      repend
   4642  2076		       ff		      .byte.b	$ff
   4641  2076					      repend
   4642  2077		       ff		      .byte.b	$ff
   4641  2077					      repend
   4642  2078		       ff		      .byte.b	$ff
   4641  2078					      repend
   4642  2079		       ff		      .byte.b	$ff
   4641  2079					      repend
   4642  207a		       ff		      .byte.b	$ff
   4641  207a					      repend
   4642  207b		       ff		      .byte.b	$ff
   4641  207b					      repend
   4642  207c		       ff		      .byte.b	$ff
   4641  207c					      repend
   4642  207d		       ff		      .byte.b	$ff
   4641  207d					      repend
   4642  207e		       ff		      .byte.b	$ff
   4641  207e					      repend
   4642  207f		       ff		      .byte.b	$ff
   4641  207f					      repend
   4642  2080		       ff		      .byte.b	$ff
   4641  2080					      repend
   4642  2081		       ff		      .byte.b	$ff
   4641  2081					      repend
   4642  2082		       ff		      .byte.b	$ff
   4641  2082					      repend
   4642  2083		       ff		      .byte.b	$ff
   4641  2083					      repend
   4642  2084		       ff		      .byte.b	$ff
   4641  2084					      repend
   4642  2085		       ff		      .byte.b	$ff
   4641  2085					      repend
   4642  2086		       ff		      .byte.b	$ff
   4641  2086					      repend
   4642  2087		       ff		      .byte.b	$ff
   4641  2087					      repend
   4642  2088		       ff		      .byte.b	$ff
   4641  2088					      repend
   4642  2089		       ff		      .byte.b	$ff
   4641  2089					      repend
   4642  208a		       ff		      .byte.b	$ff
   4641  208a					      repend
   4642  208b		       ff		      .byte.b	$ff
   4641  208b					      repend
   4642  208c		       ff		      .byte.b	$ff
   4641  208c					      repend
   4642  208d		       ff		      .byte.b	$ff
   4641  208d					      repend
   4642  208e		       ff		      .byte.b	$ff
   4641  208e					      repend
   4642  208f		       ff		      .byte.b	$ff
   4641  208f					      repend
   4642  2090		       ff		      .byte.b	$ff
   4641  2090					      repend
   4642  2091		       ff		      .byte.b	$ff
   4641  2091					      repend
   4642  2092		       ff		      .byte.b	$ff
   4641  2092					      repend
   4642  2093		       ff		      .byte.b	$ff
   4641  2093					      repend
   4642  2094		       ff		      .byte.b	$ff
   4641  2094					      repend
   4642  2095		       ff		      .byte.b	$ff
   4641  2095					      repend
   4642  2096		       ff		      .byte.b	$ff
   4641  2096					      repend
   4642  2097		       ff		      .byte.b	$ff
   4641  2097					      repend
   4642  2098		       ff		      .byte.b	$ff
   4641  2098					      repend
   4642  2099		       ff		      .byte.b	$ff
   4641  2099					      repend
   4642  209a		       ff		      .byte.b	$ff
   4641  209a					      repend
   4642  209b		       ff		      .byte.b	$ff
   4641  209b					      repend
   4642  209c		       ff		      .byte.b	$ff
   4641  209c					      repend
   4642  209d		       ff		      .byte.b	$ff
   4641  209d					      repend
   4642  209e		       ff		      .byte.b	$ff
   4641  209e					      repend
   4642  209f		       ff		      .byte.b	$ff
   4641  209f					      repend
   4642  20a0		       ff		      .byte.b	$ff
   4641  20a0					      repend
   4642  20a1		       ff		      .byte.b	$ff
   4641  20a1					      repend
   4642  20a2		       ff		      .byte.b	$ff
   4641  20a2					      repend
   4642  20a3		       ff		      .byte.b	$ff
   4641  20a3					      repend
   4642  20a4		       ff		      .byte.b	$ff
   4641  20a4					      repend
   4642  20a5		       ff		      .byte.b	$ff
   4641  20a5					      repend
   4642  20a6		       ff		      .byte.b	$ff
   4641  20a6					      repend
   4642  20a7		       ff		      .byte.b	$ff
   4641  20a7					      repend
   4642  20a8		       ff		      .byte.b	$ff
   4641  20a8					      repend
   4642  20a9		       ff		      .byte.b	$ff
   4641  20a9					      repend
   4642  20aa		       ff		      .byte.b	$ff
   4641  20aa					      repend
   4642  20ab		       ff		      .byte.b	$ff
   4641  20ab					      repend
   4642  20ac		       ff		      .byte.b	$ff
   4641  20ac					      repend
   4642  20ad		       ff		      .byte.b	$ff
   4641  20ad					      repend
   4642  20ae		       ff		      .byte.b	$ff
   4641  20ae					      repend
   4642  20af		       ff		      .byte.b	$ff
   4641  20af					      repend
   4642  20b0		       ff		      .byte.b	$ff
   4641  20b0					      repend
   4642  20b1		       ff		      .byte.b	$ff
   4641  20b1					      repend
   4642  20b2		       ff		      .byte.b	$ff
   4641  20b2					      repend
   4642  20b3		       ff		      .byte.b	$ff
   4641  20b3					      repend
   4642  20b4		       ff		      .byte.b	$ff
   4641  20b4					      repend
   4642  20b5		       ff		      .byte.b	$ff
   4641  20b5					      repend
   4642  20b6		       ff		      .byte.b	$ff
   4641  20b6					      repend
   4642  20b7		       ff		      .byte.b	$ff
   4641  20b7					      repend
   4642  20b8		       ff		      .byte.b	$ff
   4641  20b8					      repend
   4642  20b9		       ff		      .byte.b	$ff
   4641  20b9					      repend
   4642  20ba		       ff		      .byte.b	$ff
   4641  20ba					      repend
   4642  20bb		       ff		      .byte.b	$ff
   4641  20bb					      repend
   4642  20bc		       ff		      .byte.b	$ff
   4641  20bc					      repend
   4642  20bd		       ff		      .byte.b	$ff
   4641  20bd					      repend
   4642  20be		       ff		      .byte.b	$ff
   4641  20be					      repend
   4642  20bf		       ff		      .byte.b	$ff
   4641  20bf					      repend
   4642  20c0		       ff		      .byte.b	$ff
   4641  20c0					      repend
   4642  20c1		       ff		      .byte.b	$ff
   4641  20c1					      repend
   4642  20c2		       ff		      .byte.b	$ff
   4641  20c2					      repend
   4642  20c3		       ff		      .byte.b	$ff
   4641  20c3					      repend
   4642  20c4		       ff		      .byte.b	$ff
   4641  20c4					      repend
   4642  20c5		       ff		      .byte.b	$ff
   4641  20c5					      repend
   4642  20c6		       ff		      .byte.b	$ff
   4641  20c6					      repend
   4642  20c7		       ff		      .byte.b	$ff
   4641  20c7					      repend
   4642  20c8		       ff		      .byte.b	$ff
   4641  20c8					      repend
   4642  20c9		       ff		      .byte.b	$ff
   4641  20c9					      repend
   4642  20ca		       ff		      .byte.b	$ff
   4641  20ca					      repend
   4642  20cb		       ff		      .byte.b	$ff
   4641  20cb					      repend
   4642  20cc		       ff		      .byte.b	$ff
   4641  20cc					      repend
   4642  20cd		       ff		      .byte.b	$ff
   4641  20cd					      repend
   4642  20ce		       ff		      .byte.b	$ff
   4641  20ce					      repend
   4642  20cf		       ff		      .byte.b	$ff
   4641  20cf					      repend
   4642  20d0		       ff		      .byte.b	$ff
   4641  20d0					      repend
   4642  20d1		       ff		      .byte.b	$ff
   4641  20d1					      repend
   4642  20d2		       ff		      .byte.b	$ff
   4641  20d2					      repend
   4642  20d3		       ff		      .byte.b	$ff
   4641  20d3					      repend
   4642  20d4		       ff		      .byte.b	$ff
   4641  20d4					      repend
   4642  20d5		       ff		      .byte.b	$ff
   4641  20d5					      repend
   4642  20d6		       ff		      .byte.b	$ff
   4641  20d6					      repend
   4642  20d7		       ff		      .byte.b	$ff
   4641  20d7					      repend
   4642  20d8		       ff		      .byte.b	$ff
   4641  20d8					      repend
   4642  20d9		       ff		      .byte.b	$ff
   4641  20d9					      repend
   4642  20da		       ff		      .byte.b	$ff
   4641  20da					      repend
   4642  20db		       ff		      .byte.b	$ff
   4641  20db					      repend
   4642  20dc		       ff		      .byte.b	$ff
   4641  20dc					      repend
   4642  20dd		       ff		      .byte.b	$ff
   4641  20dd					      repend
   4642  20de		       ff		      .byte.b	$ff
   4641  20de					      repend
   4642  20df		       ff		      .byte.b	$ff
   4641  20df					      repend
   4642  20e0		       ff		      .byte.b	$ff
   4641  20e0					      repend
   4642  20e1		       ff		      .byte.b	$ff
   4641  20e1					      repend
   4642  20e2		       ff		      .byte.b	$ff
   4641  20e2					      repend
   4642  20e3		       ff		      .byte.b	$ff
   4641  20e3					      repend
   4642  20e4		       ff		      .byte.b	$ff
   4641  20e4					      repend
   4642  20e5		       ff		      .byte.b	$ff
   4641  20e5					      repend
   4642  20e6		       ff		      .byte.b	$ff
   4641  20e6					      repend
   4642  20e7		       ff		      .byte.b	$ff
   4641  20e7					      repend
   4642  20e8		       ff		      .byte.b	$ff
   4641  20e8					      repend
   4642  20e9		       ff		      .byte.b	$ff
   4641  20e9					      repend
   4642  20ea		       ff		      .byte.b	$ff
   4641  20ea					      repend
   4642  20eb		       ff		      .byte.b	$ff
   4641  20eb					      repend
   4642  20ec		       ff		      .byte.b	$ff
   4641  20ec					      repend
   4642  20ed		       ff		      .byte.b	$ff
   4641  20ed					      repend
   4642  20ee		       ff		      .byte.b	$ff
   4641  20ee					      repend
   4642  20ef		       ff		      .byte.b	$ff
   4641  20ef					      repend
   4642  20f0		       ff		      .byte.b	$ff
   4641  20f0					      repend
   4642  20f1		       ff		      .byte.b	$ff
   4641  20f1					      repend
   4642  20f2		       ff		      .byte.b	$ff
   4641  20f2					      repend
   4642  20f3		       ff		      .byte.b	$ff
   4641  20f3					      repend
   4642  20f4		       ff		      .byte.b	$ff
   4641  20f4					      repend
   4642  20f5		       ff		      .byte.b	$ff
   4641  20f5					      repend
   4642  20f6		       ff		      .byte.b	$ff
   4641  20f6					      repend
   4642  20f7		       ff		      .byte.b	$ff
   4641  20f7					      repend
   4642  20f8		       ff		      .byte.b	$ff
   4641  20f8					      repend
   4642  20f9		       ff		      .byte.b	$ff
   4641  20f9					      repend
   4642  20fa		       ff		      .byte.b	$ff
   4641  20fa					      repend
   4642  20fb		       ff		      .byte.b	$ff
   4641  20fb					      repend
   4642  20fc		       ff		      .byte.b	$ff
   4641  20fc					      repend
   4642  20fd		       ff		      .byte.b	$ff
   4641  20fd					      repend
   4642  20fe		       ff		      .byte.b	$ff
   4641  20fe					      repend
   4642  20ff		       ff		      .byte.b	$ff
   4643  2100					      repend
   4644  2100							; Provided under the CC0 license. See the included LICENSE.txt for details.
   4645  2100
   4646  2100							; This is a 2-line kernel!
   4647  2100					      ifnconst	vertical_reflect
   4648  2100				   kernel
   4649  2100					      endif
   4650  2100		       85 02		      sta	WSYNC
   4651  2102		       a9 ff		      lda	#255
   4652  2104		       8d 96 02 	      sta	TIM64T
   4653  2107
   4654  2107		       a9 01		      lda	#1
   4655  2109		       85 27		      sta	VDELBL
   4656  210b		       85 25		      sta	VDELP0
   4657  210d		       a6 92		      ldx	ballheight
   4658  210f		       e8		      inx
   4659  2110		       e8		      inx
   4660  2111		       86 9f		      stx	temp4
   4661  2113		       a5 86		      lda	player1y
   4662  2115		       85 9e		      sta	temp3
   4663  2117
   4664  2117				  -	      ifconst	shakescreen
   4665  2117				  -	      jsr	doshakescreen
   4666  2117					      else
   4667  2117		       a6 90		      ldx	missile0height
   4668  2119		       e8		      inx
   4669  211a					      endif
   4670  211a
   4671  211a		       e8		      inx
   4672  211b		       86 f6		      stx	stack1
   4673  211d
   4674  211d		       a5 89		      lda	bally
   4675  211f		       85 f7		      sta	stack2
   4676  2121
   4677  2121		       a5 85		      lda	player0y
   4678  2123		       a2 00		      ldx	#0
   4679  2125		       85 02		      sta	WSYNC
   4680  2127		       86 1b		      stx	GRP0
   4681  2129		       86 1c		      stx	GRP1
   4682  212b		       86 0e		      stx	PF1L
   4683  212d		       86 0f		      stx	PF2
   4684  212f		       86 2c		      stx	CXCLR
   4685  2131				  -	      ifconst	readpaddle
   4686  2131				  -	      stx	paddle
   4687  2131					      else
      0  2131					      sleep	3
      1  2131				   .CYCLES    SET	3
      2  2131
      3  2131				  -	      IF	.CYCLES < 2
      4  2131				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  2131				  -	      ERR
      6  2131					      ENDIF
      7  2131
      8  2131					      IF	.CYCLES & 1
      9  2131					      IFNCONST	NO_ILLEGAL_OPCODES
     10  2131		       04 00		      nop	0
     11  2133				  -	      ELSE
     12  2133				  -	      bit	VSYNC
     13  2133					      ENDIF
     14  2133				   .CYCLES    SET	.CYCLES - 3
     15  2133					      ENDIF
     16  2133
     17  2133				  -	      REPEAT	.CYCLES / 2
     18  2133				  -	      nop
     19  2133					      REPEND
   4689  2133					      endif
   4690  2133
   4691  2133		       95 9d		      sta	temp2,x
   4692  2135
   4693  2135							;store these so they can be retrieved later
   4694  2135				  -	      ifnconst	pfres
   4695  2135				  -	      ldx	#128-44+(4-pfwidth)*12
   4696  2135					      else
   4697  2135		       a2 74		      ldx	#132-pfres*pfwidth
   4698  2137					      endif
   4699  2137
   4700  2137		       c6 85		      dec	player0y
   4701  2139
   4702  2139		       a5 91		      lda	missile0y
   4703  213b		       85 a0		      sta	temp5
   4704  213d		       a5 88		      lda	missile1y
   4705  213f		       85 a1		      sta	temp6
   4706  2141
   4707  2141		       a5 ef		      lda	playfieldpos
   4708  2143		       85 9c		      sta	temp1
   4709  2145
   4710  2145				  -	      ifconst	pfrowheight
   4711  2145				  -	      lda	#pfrowheight+2
   4712  2145					      else
   4713  2145				  -	      ifnconst	pfres
   4714  2145				  -	      lda	#10
   4715  2145					      else
   4716  2145		       a9 1a		      lda	#(96/pfres)+2	; try to come close to the real size
   4717  2147					      endif
   4718  2147					      endif
   4719  2147		       18		      clc
   4720  2148		       e5 ef		      sbc	playfieldpos
   4721  214a		       85 ef		      sta	playfieldpos
   4722  214c		       4c 78 f1 	      jmp	.startkernel
   4723  214f
   4724  214f				   .skipDrawP0
   4725  214f		       a9 00		      lda	#0
   4726  2151		       a8		      tay
   4727  2152		       4c aa f1 	      jmp	.continueP0
   4728  2155
   4729  2155				   .skipDrawP1
   4730  2155		       a9 00		      lda	#0
   4731  2157		       a8		      tay
   4732  2158		       4c 82 f1 	      jmp	.continueP1
   4733  215b
   4734  215b				   .kerloop		; enter at cycle 59??
   4735  215b
   4736  215b				   continuekernel
      0  215b					      sleep	2
      1  215b				   .CYCLES    SET	2
      2  215b
      3  215b				  -	      IF	.CYCLES < 2
      4  215b				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  215b				  -	      ERR
      6  215b					      ENDIF
      7  215b
      8  215b				  -	      IF	.CYCLES & 1
      9  215b				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  215b				  -	      nop	0
     11  215b				  -	      ELSE
     12  215b				  -	      bit	VSYNC
     13  215b				  -	      ENDIF
     14  215b				  -.CYCLES    SET	.CYCLES - 3
     15  215b					      ENDIF
     16  215b
     17  215b					      REPEAT	.CYCLES / 2
     18  215b		       ea		      nop
     19  215c					      REPEND
   4738  215c				   continuekernel2
   4739  215c		       a5 92		      lda	ballheight
   4740  215e
   4741  215e					      ifconst	pfres
   4742  215e		       bc 7c 10 	      ldy	playfield+pfres*pfwidth-132,x
   4743  2161		       84 0e		      sty	PF1L	;3
   4744  2163		       bc 7d 10 	      ldy	playfield+pfres*pfwidth-131-pfadjust,x
   4745  2166		       84 0f		      sty	PF2L	;3
   4746  2168		       bc 7f 10 	      ldy	playfield+pfres*pfwidth-129,x
   4747  216b		       84 0e		      sty	PF1R	; 3 too early?
   4748  216d		       bc 7e 10 	      ldy	playfield+pfres*pfwidth-130-pfadjust,x
   4749  2170		       84 0f		      sty	PF2R	;3
   4750  2172				  -	      else
   4751  2172				  -	      ldy	playfield-48+pfwidth*12+44-128,x
   4752  2172				  -	      sty	PF1L	;3
   4753  2172				  -	      ldy	playfield-48+pfwidth*12+45-128-pfadjust,x	;4
   4754  2172				  -	      sty	PF2L	;3
   4755  2172				  -	      ldy	playfield-48+pfwidth*12+47-128,x	;4
   4756  2172				  -	      sty	PF1R	; 3 too early?
   4757  2172				  -	      ldy	playfield-48+pfwidth*12+46-128-pfadjust,x	;4
   4758  2172				  -	      sty	PF2R	;3
   4759  2172					      endif
   4760  2172
   4761  2172							; should be playfield+$38 for width=2
   4762  2172
   4763  2172		       c7 89		      dcp	bally
   4764  2174		       2a		      rol
   4765  2175		       2a		      rol
   4766  2176							; rol
   4767  2176							; rol
   4768  2176				   goback
   4769  2176		       85 1f		      sta	ENABL
   4770  2178				   .startkernel
   4771  2178		       a5 8f		      lda	player1height	;3
   4772  217a		       c7 86		      dcp	player1y	;5
   4773  217c		       90 d7		      bcc	.skipDrawP1	;2
   4774  217e		       a4 86		      ldy	player1y	;3
   4775  2180		       b1 8c		      lda	(player1pointer),y	;5; player0pointer must be selected carefully by the compiler
   4776  2182							; so it doesn't cross a page boundary!
   4777  2182
   4778  2182				   .continueP1
   4779  2182		       85 1c		      sta	GRP1	;3
   4780  2184
   4781  2184				  -	      ifnconst	player1colors
   4782  2184				  -	      lda	missile1height	;3
   4783  2184				  -	      dcp	missile1y	;5
   4784  2184				  -	      rol		;2
   4785  2184				  -	      rol		;2
   4786  2184				  -	      sta	ENAM1	;3
   4787  2184					      else
   4788  2184		       b1 87		      lda	(player1color),y
   4789  2186		       85 07		      sta	COLUP1
   4790  2188					      ifnconst	playercolors
      0  2188					      sleep	7
      1  2188				   .CYCLES    SET	7
      2  2188
      3  2188				  -	      IF	.CYCLES < 2
      4  2188				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  2188				  -	      ERR
      6  2188					      ENDIF
      7  2188
      8  2188					      IF	.CYCLES & 1
      9  2188					      IFNCONST	NO_ILLEGAL_OPCODES
     10  2188		       04 00		      nop	0
     11  218a				  -	      ELSE
     12  218a				  -	      bit	VSYNC
     13  218a					      ENDIF
     14  218a				   .CYCLES    SET	.CYCLES - 3
     15  218a					      ENDIF
     16  218a
     17  218a					      REPEAT	.CYCLES / 2
     18  218a		       ea		      nop
     17  218a					      REPEND
     18  218b		       ea		      nop
     19  218c					      REPEND
   4792  218c				  -	      else
   4793  218c				  -	      lda.w	player0colorstore
   4794  218c				  -	      sta	COLUP0
   4795  218c					      endif
   4796  218c					      endif
   4797  218c
   4798  218c					      ifconst	pfres
   4799  218c		       bd 7c 10 	      lda	playfield+pfres*pfwidth-132,x
   4800  218f		       85 0e		      sta	PF1L	;3
   4801  2191		       bd 7d 10 	      lda	playfield+pfres*pfwidth-131-pfadjust,x
   4802  2194		       85 0f		      sta	PF2L	;3
   4803  2196		       bd 7f 10 	      lda	playfield+pfres*pfwidth-129,x
   4804  2199		       85 0e		      sta	PF1R	; 3 too early?
   4805  219b		       bd 7e 10 	      lda	playfield+pfres*pfwidth-130-pfadjust,x
   4806  219e		       85 0f		      sta	PF2R	;3
   4807  21a0				  -	      else
   4808  21a0				  -	      lda	playfield-48+pfwidth*12+44-128,x	;4
   4809  21a0				  -	      sta	PF1L	;3
   4810  21a0				  -	      lda	playfield-48+pfwidth*12+45-128-pfadjust,x	;4
   4811  21a0				  -	      sta	PF2L	;3
   4812  21a0				  -	      lda	playfield-48+pfwidth*12+47-128,x	;4
   4813  21a0				  -	      sta	PF1R	; 3 too early?
   4814  21a0				  -	      lda	playfield-48+pfwidth*12+46-128-pfadjust,x	;4
   4815  21a0				  -	      sta	PF2R	;3
   4816  21a0					      endif
   4817  21a0							; sleep 3
   4818  21a0
   4819  21a0		       a5 8e		      lda	player0height
   4820  21a2		       c7 85		      dcp	player0y
   4821  21a4		       90 a9		      bcc	.skipDrawP0
   4822  21a6		       a4 85		      ldy	player0y
   4823  21a8		       b1 8a		      lda	(player0pointer),y
   4824  21aa				   .continueP0
   4825  21aa		       85 1b		      sta	GRP0
   4826  21ac
   4827  21ac					      ifnconst	no_blank_lines
   4828  21ac					      ifnconst	playercolors
   4829  21ac		       a5 90		      lda	missile0height	;3
   4830  21ae		       c7 91		      dcp	missile0y	;5
   4831  21b0		       e5 f6		      sbc	stack1
   4832  21b2		       85 1d		      sta	ENAM0	;3
   4833  21b4				  -	      else
   4834  21b4				  -	      lda	(player0color),y
   4835  21b4				  -	      sta	player0colorstore
   4836  21b4				  -	      sleep	6
   4837  21b4					      endif
   4838  21b4		       c6 9c		      dec	temp1
   4839  21b6		       d0 a3		      bne	continuekernel
   4840  21b8				  -	      else
   4841  21b8				  -	      dec	temp1
   4842  21b8				  -	      beq	altkernel2
   4843  21b8				  -	      ifconst	readpaddle
   4844  21b8				  -	      ldy	currentpaddle
   4845  21b8				  -	      lda	INPT0,y
   4846  21b8				  -	      bpl	noreadpaddle
   4847  21b8				  -	      inc	paddle
   4848  21b8				  -	      jmp	continuekernel2
   4849  21b8				  -noreadpaddle
   4850  21b8				  -	      sleep	2
   4851  21b8				  -	      jmp	continuekernel
   4852  21b8				  -	      else
   4853  21b8				  -	      ifnconst	playercolors
   4854  21b8				  -	      ifconst	PFcolors
   4855  21b8				  -	      txa
   4856  21b8				  -	      tay
   4857  21b8				  -	      lda	(pfcolortable),y
   4858  21b8				  -	      ifnconst	backgroundchange
   4859  21b8				  -	      sta	COLUPF
   4860  21b8				  -	      else
   4861  21b8				  -	      sta	COLUBK
   4862  21b8				  -	      endif
   4863  21b8				  -	      jmp	continuekernel
   4864  21b8				  -	      else
   4865  21b8				  -	      ifconst	kernelmacrodef
   4866  21b8				  -	      kernelmacro
   4867  21b8				  -	      else
   4868  21b8				  -	      sleep	12
   4869  21b8				  -	      endif
   4870  21b8				  -	      endif
   4871  21b8				  -	      else
   4872  21b8				  -	      lda	(player0color),y
   4873  21b8				  -	      sta	player0colorstore
   4874  21b8				  -	      sleep	4
   4875  21b8				  -	      endif
   4876  21b8				  -	      jmp	continuekernel
   4877  21b8				  -	      endif
   4878  21b8				  -altkernel2
   4879  21b8				  -	      txa
   4880  21b8				  -	      ifnconst	vertical_reflect
   4881  21b8				  -	      sbx	#256-pfwidth
   4882  21b8				  -	      else
   4883  21b8				  -	      sbx	#256-pfwidth/2
   4884  21b8				  -	      endif
   4885  21b8				  -	      bmi	lastkernelline
   4886  21b8				  -	      ifconst	pfrowheight
   4887  21b8				  -	      lda	#pfrowheight
   4888  21b8				  -	      else
   4889  21b8				  -	      ifnconst	pfres
   4890  21b8				  -	      lda	#8
   4891  21b8				  -	      else
   4892  21b8				  -	      lda	#(96/pfres)	; try to come close to the real size
   4893  21b8				  -	      endif
   4894  21b8				  -	      endif
   4895  21b8				  -	      sta	temp1
   4896  21b8				  -	      jmp	continuekernel
   4897  21b8					      endif
   4898  21b8
   4899  21b8				   altkernel
   4900  21b8
   4901  21b8				  -	      ifconst	PFmaskvalue
   4902  21b8				  -	      lda	#PFmaskvalue
   4903  21b8					      else
   4904  21b8		       a9 00		      lda	#0
   4905  21ba					      endif
   4906  21ba		       85 0e		      sta	PF1L
   4907  21bc		       85 0f		      sta	PF2
   4908  21be
   4909  21be
   4910  21be							;sleep 3
   4911  21be
   4912  21be							;28 cycles to fix things
   4913  21be							;minus 11=17
   4914  21be
   4915  21be							; lax temp4
   4916  21be							; clc
   4917  21be		       8a		      txa
   4918  21bf					      ifnconst	vertical_reflect
   4919  21bf		       cb fc		      sbx	#256-pfwidth
   4920  21c1				  -	      else
   4921  21c1				  -	      sbx	#256-pfwidth/2
   4922  21c1					      endif
   4923  21c1
   4924  21c1		       30 12		      bmi	lastkernelline
   4925  21c3
   4926  21c3				  -	      ifconst	PFcolorandheight
   4927  21c3				  -	      ifconst	pfres
   4928  21c3				  -	      ldy	playfieldcolorandheight-131+pfres*pfwidth,x
   4929  21c3				  -	      else
   4930  21c3				  -	      ldy	playfieldcolorandheight-87,x
   4931  21c3				  -	      endif
   4932  21c3				  -	      ifnconst	backgroundchange
   4933  21c3				  -	      sty	COLUPF
   4934  21c3				  -	      else
   4935  21c3				  -	      sty	COLUBK
   4936  21c3				  -	      endif
   4937  21c3				  -	      ifconst	pfres
   4938  21c3				  -	      lda	playfieldcolorandheight-132+pfres*pfwidth,x
   4939  21c3				  -	      else
   4940  21c3				  -	      lda	playfieldcolorandheight-88,x
   4941  21c3				  -	      endif
   4942  21c3				  -	      sta.w	temp1
   4943  21c3					      endif
   4944  21c3				  -	      ifconst	PFheights
   4945  21c3				  -	      lsr
   4946  21c3				  -	      lsr
   4947  21c3				  -	      tay
   4948  21c3				  -	      lda	(pfheighttable),y
   4949  21c3				  -	      sta.w	temp1
   4950  21c3					      endif
   4951  21c3					      ifconst	PFcolors
   4952  21c3		       a8		      tay
   4953  21c4		       b1 f0		      lda	(pfcolortable),y
   4954  21c6					      ifnconst	backgroundchange
   4955  21c6		       85 08		      sta	COLUPF
   4956  21c8				  -	      else
   4957  21c8				  -	      sta	COLUBK
   4958  21c8					      endif
   4959  21c8				  -	      ifconst	pfrowheight
   4960  21c8				  -	      lda	#pfrowheight
   4961  21c8					      else
   4962  21c8				  -	      ifnconst	pfres
   4963  21c8				  -	      lda	#8
   4964  21c8					      else
   4965  21c8		       a9 18		      lda	#(96/pfres)	; try to come close to the real size
   4966  21ca					      endif
   4967  21ca					      endif
   4968  21ca		       85 9c		      sta	temp1
   4969  21cc					      endif
   4970  21cc					      ifnconst	PFcolorandheight
   4971  21cc				  -	      ifnconst	PFcolors
   4972  21cc				  -	      ifnconst	PFheights
   4973  21cc				  -	      ifnconst	no_blank_lines
   4974  21cc				  -			; read paddle 0
   4975  21cc				  -			; lo-res paddle read
   4976  21cc				  -			; bit INPT0
   4977  21cc				  -			; bmi paddleskipread
   4978  21cc				  -			; inc paddle0
   4979  21cc				  -			;donepaddleskip
   4980  21cc				  -	      sleep	10
   4981  21cc				  -	      ifconst	pfrowheight
   4982  21cc				  -	      lda	#pfrowheight
   4983  21cc				  -	      else
   4984  21cc				  -	      ifnconst	pfres
   4985  21cc				  -	      lda	#8
   4986  21cc				  -	      else
   4987  21cc				  -	      lda	#(96/pfres)	; try to come close to the real size
   4988  21cc				  -	      endif
   4989  21cc				  -	      endif
   4990  21cc				  -	      sta	temp1
   4991  21cc				  -	      endif
   4992  21cc				  -	      endif
   4993  21cc					      endif
   4994  21cc					      endif
   4995  21cc
   4996  21cc
   4997  21cc		       a5 92		      lda	ballheight
   4998  21ce		       c7 89		      dcp	bally
   4999  21d0		       e5 9f		      sbc	temp4
   5000  21d2
   5001  21d2
   5002  21d2		       4c 76 f1 	      jmp	goback
   5003  21d5
   5004  21d5
   5005  21d5					      ifnconst	no_blank_lines
   5006  21d5				   lastkernelline
   5007  21d5				  -	      ifnconst	PFcolors
   5008  21d5				  -	      sleep	10
   5009  21d5					      else
   5010  21d5		       a0 7c		      ldy	#124
   5011  21d7		       b1 f0		      lda	(pfcolortable),y
   5012  21d9		       85 08		      sta	COLUPF
   5013  21db					      endif
   5014  21db
   5015  21db				  -	      ifconst	PFheights
   5016  21db				  -	      ldx	#1
   5017  21db				  -			;sleep 4
   5018  21db				  -	      sleep	3	; this was over 1 cycle
   5019  21db					      else
   5020  21db		       a6 ef		      ldx	playfieldpos
   5021  21dd							;sleep 3
      0  21dd					      sleep	2	; this was over 1 cycle
      1  21dd				   .CYCLES    SET	2
      2  21dd
      3  21dd				  -	      IF	.CYCLES < 2
      4  21dd				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  21dd				  -	      ERR
      6  21dd					      ENDIF
      7  21dd
      8  21dd				  -	      IF	.CYCLES & 1
      9  21dd				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  21dd				  -	      nop	0
     11  21dd				  -	      ELSE
     12  21dd				  -	      bit	VSYNC
     13  21dd				  -	      ENDIF
     14  21dd				  -.CYCLES    SET	.CYCLES - 3
     15  21dd					      ENDIF
     16  21dd
     17  21dd					      REPEAT	.CYCLES / 2
     18  21dd		       ea		      nop
     19  21de					      REPEND
   5023  21de					      endif
   5024  21de
   5025  21de		       4c 1b f2 	      jmp	enterlastkernel
   5026  21e1
   5027  21e1				  -	      else
   5028  21e1				  -lastkernelline
   5029  21e1				  -
   5030  21e1				  -	      ifconst	PFheights
   5031  21e1				  -	      ldx	#1
   5032  21e1				  -			;sleep 5
   5033  21e1				  -	      sleep	4	; this was over 1 cycle
   5034  21e1				  -	      else
   5035  21e1				  -	      ldx	playfieldpos
   5036  21e1				  -			;sleep 4
   5037  21e1				  -	      sleep	3	; this was over 1 cycle
   5038  21e1				  -	      endif
   5039  21e1				  -
   5040  21e1				  -	      cpx	#0
   5041  21e1				  -	      bne	.enterfromNBL
   5042  21e1				  -	      jmp	no_blank_lines_bailout
   5043  21e1					      endif
   5044  21e1
   5045  21e1					      if	((<*)>$d5)
   5046  2200		       00 00 00 00*	      align	256
   5047  2200					      endif
   5048  2200							; this is a kludge to prevent page wrapping - fix!!!
   5049  2200
   5050  2200				   .skipDrawlastP1
   5051  2200		       a9 00		      lda	#0
   5052  2202		       a8		      tay		; added so we don't cross a page
   5053  2203		       4c 2d f2 	      jmp	.continuelastP1
   5054  2206
   5055  2206				   .endkerloop		; enter at cycle 59??
   5056  2206
   5057  2206		       ea		      nop
   5058  2207
   5059  2207				   .enterfromNBL
   5060  2207					      ifconst	pfres
   5061  2207		       ac fc 10 	      ldy.w	playfield+pfres*pfwidth-4
   5062  220a		       84 0e		      sty	PF1L	;3
   5063  220c		       ac fd 10 	      ldy.w	playfield+pfres*pfwidth-3-pfadjust
   5064  220f		       84 0f		      sty	PF2L	;3
   5065  2211		       ac ff 10 	      ldy.w	playfield+pfres*pfwidth-1
   5066  2214		       84 0e		      sty	PF1R	; possibly too early?
   5067  2216		       ac fe 10 	      ldy.w	playfield+pfres*pfwidth-2-pfadjust
   5068  2219		       84 0f		      sty	PF2R	;3
   5069  221b				  -	      else
   5070  221b				  -	      ldy.w	playfield-48+pfwidth*12+44
   5071  221b				  -	      sty	PF1L	;3
   5072  221b				  -	      ldy.w	playfield-48+pfwidth*12+45-pfadjust
   5073  221b				  -	      sty	PF2L	;3
   5074  221b				  -	      ldy.w	playfield-48+pfwidth*12+47
   5075  221b				  -	      sty	PF1R	; possibly too early?
   5076  221b				  -	      ldy.w	playfield-48+pfwidth*12+46-pfadjust
   5077  221b				  -	      sty	PF2R	;3
   5078  221b					      endif
   5079  221b
   5080  221b				   enterlastkernel
   5081  221b		       a5 92		      lda	ballheight
   5082  221d
   5083  221d							; tya
   5084  221d		       c7 89		      dcp	bally
   5085  221f							; sleep 4
   5086  221f
   5087  221f							; sbc stack3
   5088  221f		       2a		      rol
   5089  2220		       2a		      rol
   5090  2221		       85 1f		      sta	ENABL
   5091  2223
   5092  2223		       a5 8f		      lda	player1height	;3
   5093  2225		       c7 86		      dcp	player1y	;5
   5094  2227		       90 d7		      bcc	.skipDrawlastP1
   5095  2229		       a4 86		      ldy	player1y	;3
   5096  222b		       b1 8c		      lda	(player1pointer),y	;5; player0pointer must be selected carefully by the compiler
   5097  222d							; so it doesn't cross a page boundary!
   5098  222d
   5099  222d				   .continuelastP1
   5100  222d		       85 1c		      sta	GRP1	;3
   5101  222f
   5102  222f				  -	      ifnconst	player1colors
   5103  222f				  -	      lda	missile1height	;3
   5104  222f				  -	      dcp	missile1y	;5
   5105  222f					      else
   5106  222f		       b1 87		      lda	(player1color),y
   5107  2231		       85 07		      sta	COLUP1
   5108  2233					      endif
   5109  2233
   5110  2233		       ca		      dex
   5111  2234							;dec temp4 ; might try putting this above PF writes
   5112  2234		       f0 36		      beq	endkernel
   5113  2236
   5114  2236
   5115  2236					      ifconst	pfres
   5116  2236		       ac fc 10 	      ldy.w	playfield+pfres*pfwidth-4
   5117  2239		       84 0e		      sty	PF1L	;3
   5118  223b		       ac fd 10 	      ldy.w	playfield+pfres*pfwidth-3-pfadjust
   5119  223e		       84 0f		      sty	PF2L	;3
   5120  2240		       ac ff 10 	      ldy.w	playfield+pfres*pfwidth-1
   5121  2243		       84 0e		      sty	PF1R	; possibly too early?
   5122  2245		       ac fe 10 	      ldy.w	playfield+pfres*pfwidth-2-pfadjust
   5123  2248		       84 0f		      sty	PF2R	;3
   5124  224a				  -	      else
   5125  224a				  -	      ldy.w	playfield-48+pfwidth*12+44
   5126  224a				  -	      sty	PF1L	;3
   5127  224a				  -	      ldy.w	playfield-48+pfwidth*12+45-pfadjust
   5128  224a				  -	      sty	PF2L	;3
   5129  224a				  -	      ldy.w	playfield-48+pfwidth*12+47
   5130  224a				  -	      sty	PF1R	; possibly too early?
   5131  224a				  -	      ldy.w	playfield-48+pfwidth*12+46-pfadjust
   5132  224a				  -	      sty	PF2R	;3
   5133  224a					      endif
   5134  224a
   5135  224a				  -	      ifnconst	player1colors
   5136  224a				  -	      rol		;2
   5137  224a				  -	      rol		;2
   5138  224a				  -	      sta	ENAM1	;3
   5139  224a					      else
   5140  224a					      ifnconst	playercolors
      0  224a					      sleep	7
      1  224a				   .CYCLES    SET	7
      2  224a
      3  224a				  -	      IF	.CYCLES < 2
      4  224a				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  224a				  -	      ERR
      6  224a					      ENDIF
      7  224a
      8  224a					      IF	.CYCLES & 1
      9  224a					      IFNCONST	NO_ILLEGAL_OPCODES
     10  224a		       04 00		      nop	0
     11  224c				  -	      ELSE
     12  224c				  -	      bit	VSYNC
     13  224c					      ENDIF
     14  224c				   .CYCLES    SET	.CYCLES - 3
     15  224c					      ENDIF
     16  224c
     17  224c					      REPEAT	.CYCLES / 2
     18  224c		       ea		      nop
     17  224c					      REPEND
     18  224d		       ea		      nop
     19  224e					      REPEND
   5142  224e				  -	      else
   5143  224e				  -	      lda.w	player0colorstore
   5144  224e				  -	      sta	COLUP0
   5145  224e					      endif
   5146  224e					      endif
   5147  224e
   5148  224e		       ad 8e 00 	      lda.w	player0height
   5149  2251		       c7 85		      dcp	player0y
   5150  2253		       90 11		      bcc	.skipDrawlastP0
   5151  2255		       a4 85		      ldy	player0y
   5152  2257		       b1 8a		      lda	(player0pointer),y
   5153  2259				   .continuelastP0
   5154  2259		       85 1b		      sta	GRP0
   5155  225b
   5156  225b
   5157  225b
   5158  225b					      ifnconst	no_blank_lines
   5159  225b		       a5 90		      lda	missile0height	;3
   5160  225d		       c7 91		      dcp	missile0y	;5
   5161  225f		       e5 f6		      sbc	stack1
   5162  2261		       85 1d		      sta	ENAM0	;3
   5163  2263		       4c 06 f2 	      jmp	.endkerloop
   5164  2266				  -	      else
   5165  2266				  -	      ifconst	readpaddle
   5166  2266				  -	      ldy	currentpaddle
   5167  2266				  -	      lda	INPT0,y
   5168  2266				  -	      bpl	noreadpaddle2
   5169  2266				  -	      inc	paddle
   5170  2266				  -	      jmp	.endkerloop
   5171  2266				  -noreadpaddle2
   5172  2266				  -	      sleep	4
   5173  2266				  -	      jmp	.endkerloop
   5174  2266				  -	      else		; no_blank_lines and no paddle reading
   5175  2266				  -	      pla
   5176  2266				  -	      pha		; 14 cycles in 4 bytes
   5177  2266				  -	      pla
   5178  2266				  -	      pha
   5179  2266				  -			; sleep 14
   5180  2266				  -	      jmp	.endkerloop
   5181  2266				  -	      endif
   5182  2266					      endif
   5183  2266
   5184  2266
   5185  2266							; ifconst donepaddleskip
   5186  2266							;paddleskipread
   5187  2266							; this is kind of lame, since it requires 4 cycles from a page boundary crossing
   5188  2266							; plus we get a lo-res paddle read
   5189  2266							; bmi donepaddleskip
   5190  2266							; endif
   5191  2266
   5192  2266				   .skipDrawlastP0
   5193  2266		       a9 00		      lda	#0
   5194  2268		       a8		      tay
   5195  2269		       4c 59 f2 	      jmp	.continuelastP0
   5196  226c
   5197  226c				  -	      ifconst	no_blank_lines
   5198  226c				  -no_blank_lines_bailout
   5199  226c				  -	      ldx	#0
   5200  226c					      endif
   5201  226c
   5202  226c				   endkernel
   5203  226c							; 6 digit score routine
   5204  226c		       86 0e		      stx	PF1
   5205  226e		       86 0f		      stx	PF2
   5206  2270		       86 0d		      stx	PF0
   5207  2272		       18		      clc
   5208  2273
   5209  2273				  -	      ifconst	pfrowheight
   5210  2273				  -	      lda	#pfrowheight+2
   5211  2273					      else
   5212  2273				  -	      ifnconst	pfres
   5213  2273				  -	      lda	#10
   5214  2273					      else
   5215  2273		       a9 1a		      lda	#(96/pfres)+2	; try to come close to the real size
   5216  2275					      endif
   5217  2275					      endif
   5218  2275
   5219  2275		       e5 ef		      sbc	playfieldpos
   5220  2277		       85 ef		      sta	playfieldpos
   5221  2279		       8a		      txa
   5222  227a
   5223  227a				  -	      ifconst	shakescreen
   5224  227a				  -	      bit	shakescreen
   5225  227a				  -	      bmi	noshakescreen2
   5226  227a				  -	      ldx	#$3D
   5227  227a				  -noshakescreen2
   5228  227a					      endif
   5229  227a
   5230  227a		       95 02		      sta	WSYNC,x
   5231  227c
   5232  227c							; STA WSYNC ;first one, need one more
   5233  227c		       85 0b		      sta	REFP0
   5234  227e		       85 0c		      sta	REFP1
   5235  2280		       85 1b		      STA	GRP0
   5236  2282		       85 1c		      STA	GRP1
   5237  2284							; STA PF1
   5238  2284							; STA PF2
   5239  2284		       85 2b		      sta	HMCLR
   5240  2286		       85 1d		      sta	ENAM0
   5241  2288		       85 1e		      sta	ENAM1
   5242  228a		       85 1f		      sta	ENABL
   5243  228c
   5244  228c		       a5 9d		      lda	temp2	;restore variables that were obliterated by kernel
   5245  228e		       85 85		      sta	player0y
   5246  2290		       a5 9e		      lda	temp3
   5247  2292		       85 86		      sta	player1y
   5248  2294				  -	      ifnconst	player1colors
   5249  2294				  -	      lda	temp6
   5250  2294				  -	      sta	missile1y
   5251  2294					      endif
   5252  2294					      ifnconst	playercolors
   5253  2294					      ifnconst	readpaddle
   5254  2294		       a5 a0		      lda	temp5
   5255  2296		       85 91		      sta	missile0y
   5256  2298					      endif
   5257  2298					      endif
   5258  2298		       a5 f7		      lda	stack2
   5259  229a		       85 89		      sta	bally
   5260  229c
   5261  229c							; strangely, this isn't required any more. might have
   5262  229c							; resulted from the no_blank_lines score bounce fix
   5263  229c							;ifconst no_blank_lines
   5264  229c							;sta WSYNC
   5265  229c							;endif
   5266  229c
   5267  229c		       ad 84 02 	      lda	INTIM
   5268  229f		       18		      clc
   5269  22a0					      ifnconst	vblank_time
   5270  22a0		       69 8e		      adc	#43+12+87
   5271  22a2				  -	      else
   5272  22a2				  -	      adc	#vblank_time+12+87
   5273  22a2				  -
   5274  22a2					      endif
   5275  22a2							; sta WSYNC
   5276  22a2		       8d 96 02 	      sta	TIM64T
   5277  22a5
   5278  22a5					      ifconst	minikernel
   5279  22a5		       20 d5 fe 	      jsr	minikernel
   5280  22a8					      endif
   5281  22a8
   5282  22a8							; now reassign temp vars for score pointers
   5283  22a8
   5284  22a8							; score pointers contain:
   5285  22a8							; score1-5: lo1,lo2,lo3,lo4,lo5,lo6
   5286  22a8							; swap lo2->temp1
   5287  22a8							; swap lo4->temp3
   5288  22a8							; swap lo6->temp5
   5289  22a8					      ifnconst	noscore
   5290  22a8		       a5 97		      lda	scorepointers+1
   5291  22aa							; ldy temp1
   5292  22aa		       85 9c		      sta	temp1
   5293  22ac							; sty scorepointers+1
   5294  22ac
   5295  22ac		       a5 99		      lda	scorepointers+3
   5296  22ae							; ldy temp3
   5297  22ae		       85 9e		      sta	temp3
   5298  22b0							; sty scorepointers+3
   5299  22b0
   5300  22b0
   5301  22b0		       85 2b		      sta	HMCLR
   5302  22b2		       ba		      tsx
   5303  22b3		       86 f6		      stx	stack1
   5304  22b5		       a2 e0		      ldx	#$E0
   5305  22b7		       86 20		      stx	HMP0
   5306  22b9
   5307  22b9		       a5 a3		      LDA	scorecolor
   5308  22bb		       85 06		      STA	COLUP0
   5309  22bd		       85 07		      STA	COLUP1
   5310  22bf				  -	      ifconst	scorefade
   5311  22bf				  -	      STA	stack2
   5312  22bf					      endif
   5313  22bf					      ifconst	pfscore
   5314  22bf		       a5 f4		      lda	pfscorecolor
   5315  22c1		       85 08		      sta	COLUPF
   5316  22c3					      endif
   5317  22c3		       85 02		      sta	WSYNC
   5318  22c5		       a2 00		      ldx	#0
   5319  22c7		       86 1b		      STx	GRP0
   5320  22c9		       86 1c		      STx	GRP1	; seems to be needed because of vdel
   5321  22cb
   5322  22cb		       a5 9b		      lda	scorepointers+5
   5323  22cd							; ldy temp5
   5324  22cd		       95 a0		      sta	temp5,x
   5325  22cf							; sty scorepointers+5
   5326  22cf		       a9 ff		      lda	#>scoretable
   5327  22d1		       85 97		      sta	scorepointers+1
   5328  22d3		       85 99		      sta	scorepointers+3
   5329  22d5		       85 9b		      sta	scorepointers+5
   5330  22d7		       85 9d		      sta	temp2
   5331  22d9		       85 9f		      sta	temp4
   5332  22db		       85 a1		      sta	temp6
   5333  22dd		       a0 07		      LDY	#7
   5334  22df		       84 25		      STY	VDELP0
   5335  22e1		       85 10		      STA	RESP0
   5336  22e3		       85 11		      STA	RESP1
   5337  22e5
   5338  22e5
   5339  22e5		       a9 03		      LDA	#$03
   5340  22e7		       85 04		      STA	NUSIZ0
   5341  22e9		       85 05		      STA	NUSIZ1
   5342  22eb		       85 26		      STA	VDELP1
   5343  22ed		       a9 f0		      LDA	#$F0
   5344  22ef		       85 21		      STA	HMP1
   5345  22f1		       b1 96		      lda	(scorepointers),y
   5346  22f3		       85 1b		      sta	GRP0
   5347  22f5		       85 2a		      STA	HMOVE	; cycle 73 ?
   5348  22f7		       4c 09 f3 	      jmp	beginscore
   5349  22fa
   5350  22fa
   5351  22fa					      if	((<*)>$d4)
   5352  2300		       00 00 00 00*	      align	256	; kludge that potentially wastes space! should be fixed!
   5353  2300					      endif
   5354  2300
   5355  2300				   loop2
   5356  2300		       b1 96		      lda	(scorepointers),y	;+5 68 204
   5357  2302		       85 1b		      sta	GRP0	;+3 71 213 D1 -- -- --
   5358  2304					      ifconst	pfscore
   5359  2304		       ad f2 00 	      lda.w	pfscore1
   5360  2307		       85 0e		      sta	PF1
   5361  2309				  -	      else
   5362  2309				  -	      ifconst	scorefade
   5363  2309				  -	      sleep	2
   5364  2309				  -	      dec	stack2	; decrement the temporary scorecolor
   5365  2309				  -	      else
   5366  2309				  -	      sleep	7
   5367  2309				  -	      endif
   5368  2309					      endif
   5369  2309							; cycle 0
   5370  2309				   beginscore
   5371  2309		       b1 9e		      lda	(scorepointers+$8),y	;+5 5 15
   5372  230b		       85 1c		      sta	GRP1	;+3 8 24 D1 D1 D2 --
   5373  230d		       b1 9c		      lda	(scorepointers+$6),y	;+5 13 39
   5374  230f		       85 1b		      sta	GRP0	;+3 16 48 D3 D1 D2 D2
   5375  2311		       b3 98		      lax	(scorepointers+$2),y	;+5 29 87
   5376  2313		       9a		      txs
   5377  2314		       b3 9a		      lax	(scorepointers+$4),y	;+5 36 108
   5378  2316				  -	      ifconst	scorefade
   5379  2316				  -	      lda	stack2
   5380  2316					      else
      0  2316					      sleep	3
      1  2316				   .CYCLES    SET	3
      2  2316
      3  2316				  -	      IF	.CYCLES < 2
      4  2316				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  2316				  -	      ERR
      6  2316					      ENDIF
      7  2316
      8  2316					      IF	.CYCLES & 1
      9  2316					      IFNCONST	NO_ILLEGAL_OPCODES
     10  2316		       04 00		      nop	0
     11  2318				  -	      ELSE
     12  2318				  -	      bit	VSYNC
     13  2318					      ENDIF
     14  2318				   .CYCLES    SET	.CYCLES - 3
     15  2318					      ENDIF
     16  2318
     17  2318				  -	      REPEAT	.CYCLES / 2
     18  2318				  -	      nop
     19  2318					      REPEND
   5382  2318					      endif
   5383  2318
   5384  2318					      ifconst	pfscore
   5385  2318		       a5 f3		      lda	pfscore2
   5386  231a		       85 0e		      sta	PF1
   5387  231c				  -	      else
   5388  231c				  -	      ifconst	scorefade
   5389  231c				  -	      sta	COLUP0
   5390  231c				  -	      sta	COLUP1
   5391  231c				  -	      else
   5392  231c				  -	      sleep	6
   5393  231c				  -	      endif
   5394  231c					      endif
   5395  231c
   5396  231c		       b1 a0		      lda	(scorepointers+$A),y	;+5 21 63
   5397  231e		       86 1c		      stx	GRP1	;+3 44 132 D3 D3 D4 D2!
   5398  2320		       ba		      tsx
   5399  2321		       86 1b		      stx	GRP0	;+3 47 141 D5 D3! D4 D4
   5400  2323		       85 1c		      sta	GRP1	;+3 50 150 D5 D5 D6 D4!
   5401  2325		       84 1b		      sty	GRP0	;+3 53 159 D4* D5! D6 D6
   5402  2327		       88		      dey
   5403  2328		       10 d6		      bpl	loop2	;+2 60 180
   5404  232a
   5405  232a		       a6 f6		      ldx	stack1
   5406  232c		       9a		      txs
   5407  232d							; lda scorepointers+1
   5408  232d		       a4 9c		      ldy	temp1
   5409  232f							; sta temp1
   5410  232f		       84 97		      sty	scorepointers+1
   5411  2331
   5412  2331		       a9 00		      LDA	#0
   5413  2333		       85 0e		      sta	PF1
   5414  2335		       85 1b		      STA	GRP0
   5415  2337		       85 1c		      STA	GRP1
   5416  2339		       85 25		      STA	VDELP0
   5417  233b		       85 26		      STA	VDELP1	;do we need these
   5418  233d		       85 04		      STA	NUSIZ0
   5419  233f		       85 05		      STA	NUSIZ1
   5420  2341
   5421  2341							; lda scorepointers+3
   5422  2341		       a4 9e		      ldy	temp3
   5423  2343							; sta temp3
   5424  2343		       84 99		      sty	scorepointers+3
   5425  2345
   5426  2345							; lda scorepointers+5
   5427  2345		       a4 a0		      ldy	temp5
   5428  2347							; sta temp5
   5429  2347		       84 9b		      sty	scorepointers+5
   5430  2349					      endif		;noscore
   5431  2349		       a9 c2		      LDA	#%11000010
   5432  234b		       85 02		      sta	WSYNC
   5433  234d		       85 01		      STA	VBLANK
      0  234f					      RETURN
      1  234f				  -	      ifnconst	bankswitch
      2  234f				  -	      rts
      3  234f					      else
      4  234f		       4c da ff 	      jmp	BS_return
      5  2352					      endif
   5435  2352
   5436  2352				  -	      ifconst	shakescreen
   5437  2352				  -doshakescreen
   5438  2352				  -	      bit	shakescreen
   5439  2352				  -	      bmi	noshakescreen
   5440  2352				  -	      sta	WSYNC
   5441  2352				  -noshakescreen
   5442  2352				  -	      ldx	missile0height
   5443  2352				  -	      inx
   5444  2352				  -	      rts
   5445  2352					      endif
   5446  2352
   5447  2352							; Provided under the CC0 license. See the included LICENSE.txt for details.
   5448  2352
   5449  2352				   start
   5450  2352		       78		      sei
   5451  2353		       d8		      cld
   5452  2354		       a0 00		      ldy	#0
   5453  2356		       a5 d0		      lda	$D0
   5454  2358		       c9 2c		      cmp	#$2C	;check RAM location #1
   5455  235a		       d0 07		      bne	MachineIs2600
   5456  235c		       a5 d1		      lda	$D1
   5457  235e		       c9 a9		      cmp	#$A9	;check RAM location #2
   5458  2360		       d0 01		      bne	MachineIs2600
   5459  2362		       88		      dey
   5460  2363				   MachineIs2600
   5461  2363		       a2 00		      ldx	#0
   5462  2365		       8a		      txa
   5463  2366				   clearmem
   5464  2366		       e8		      inx
   5465  2367		       9a		      txs
   5466  2368		       48		      pha
   5467  2369		       d0 fb		      bne	clearmem
   5468  236b		       84 9c		      sty	temp1
   5469  236d					      ifnconst	multisprite
   5470  236d				  -	      ifconst	pfrowheight
   5471  236d				  -	      lda	#pfrowheight
   5472  236d					      else
   5473  236d					      ifconst	pfres
   5474  236d		       a9 18		      lda	#(96/pfres)
   5475  236f				  -	      else
   5476  236f				  -	      lda	#8
   5477  236f					      endif
   5478  236f					      endif
   5479  236f		       85 ef		      sta	playfieldpos
   5480  2371					      endif
   5481  2371		       a2 05		      ldx	#5
   5482  2373				   initscore
   5483  2373		       a9 71		      lda	#<scoretable
   5484  2375		       95 96		      sta	scorepointers,x
   5485  2377		       ca		      dex
   5486  2378		       10 f9		      bpl	initscore
   5487  237a		       a9 01		      lda	#1
   5488  237c		       85 0a		      sta	CTRLPF
   5489  237e		       0d 84 02 	      ora	INTIM
   5490  2381		       85 a2		      sta	rand
   5491  2383
   5492  2383				  -	      ifconst	multisprite
   5493  2383				  -	      jsr	multisprite_setup
   5494  2383					      endif
   5495  2383
   5496  2383				  -	      ifnconst	bankswitch
   5497  2383				  -	      jmp	game
   5498  2383					      else
   5499  2383		       a9 d0		      lda	#>(game-1)
   5500  2385		       48		      pha
   5501  2386		       a9 ff		      lda	#<(game-1)
   5502  2388		       48		      pha
   5503  2389		       48		      pha
   5504  238a		       48		      pha
   5505  238b		       a2 01		      ldx	#1
   5506  238d		       4c e8 ff 	      jmp	BS_jsr
   5507  2390					      endif
   5508  2390							; Provided under the CC0 license. See the included LICENSE.txt for details.
   5509  2390
   5510  2390							; playfield drawing routines
   5511  2390							; you get a 32x12 bitmapped display in a single color :)
   5512  2390							; 0-31 and 0-11
   5513  2390
   5514  2390				   pfclear		; clears playfield - or fill with pattern
   5515  2390					      ifconst	pfres
   5516  2390		       a2 0f		      ldx	#pfres*pfwidth-1
   5517  2392				  -	      else
   5518  2392				  -	      ldx	#47-(4-pfwidth)*12	; will this work?
   5519  2392					      endif
   5520  2392				   pfclear_loop
   5521  2392				  -	      ifnconst	superchip
   5522  2392				  -	      sta	playfield,x
   5523  2392					      else
   5524  2392		       9d 70 10 	      sta	playfield-128,x
   5525  2395					      endif
   5526  2395		       ca		      dex
   5527  2396		       10 fa		      bpl	pfclear_loop
      0  2398					      RETURN
      1  2398				  -	      ifnconst	bankswitch
      2  2398				  -	      rts
      3  2398					      else
      4  2398		       4c da ff 	      jmp	BS_return
      5  239b					      endif
   5529  239b
   5530  239b				   setuppointers
   5531  239b		       86 9d		      stx	temp2	; store on.off.flip value
   5532  239d		       aa		      tax		; put x-value in x 
   5533  239e		       4a		      lsr
   5534  239f		       4a		      lsr
   5535  23a0		       4a		      lsr		; divide x pos by 8 
   5536  23a1		       85 9c		      sta	temp1
   5537  23a3		       98		      tya
   5538  23a4		       0a		      asl
   5539  23a5					      if	pfwidth=4
   5540  23a5		       0a		      asl		; multiply y pos by 4
   5541  23a6					      endif		; else multiply by 2
   5542  23a6		       18		      clc
   5543  23a7		       65 9c		      adc	temp1	; add them together to get actual memory location offset
   5544  23a9		       a8		      tay		; put the value in y
   5545  23aa		       a5 9d		      lda	temp2	; restore on.off.flip value
   5546  23ac		       60		      rts
   5547  23ad
   5548  23ad				   pfread
   5549  23ad							;x=xvalue, y=yvalue
   5550  23ad		       20 9b f3 	      jsr	setuppointers
   5551  23b0		       bd 45 f4 	      lda	setbyte,x
   5552  23b3		       39 f0 10 	      and	playfield,y
   5553  23b6		       5d 45 f4 	      eor	setbyte,x
   5554  23b9							; beq readzero
   5555  23b9							; lda #1
   5556  23b9							; readzero
      0  23b9					      RETURN
      1  23b9				  -	      ifnconst	bankswitch
      2  23b9				  -	      rts
      3  23b9					      else
      4  23b9		       4c da ff 	      jmp	BS_return
      5  23bc					      endif
   5558  23bc
   5559  23bc				   pfpixel
   5560  23bc							;x=xvalue, y=yvalue, a=0,1,2
   5561  23bc		       20 9b f3 	      jsr	setuppointers
   5562  23bf
   5563  23bf					      ifconst	bankswitch
   5564  23bf		       a5 9d		      lda	temp2	; load on.off.flip value (0,1, or 2)
   5565  23c1		       f0 0f		      beq	pixelon_r	; if "on" go to on
   5566  23c3		       4a		      lsr
   5567  23c4		       b0 18		      bcs	pixeloff_r	; value is 1 if true
   5568  23c6		       b9 f0 10 	      lda	playfield,y	; if here, it's "flip"
   5569  23c9		       5d 45 f4 	      eor	setbyte,x
   5570  23cc					      ifconst	superchip
   5571  23cc		       99 70 10 	      sta	playfield-128,y
   5572  23cf				  -	      else
   5573  23cf				  -	      sta	playfield,y
   5574  23cf					      endif
      0  23cf					      RETURN
      1  23cf				  -	      ifnconst	bankswitch
      2  23cf				  -	      rts
      3  23cf					      else
      4  23cf		       4c da ff 	      jmp	BS_return
      5  23d2					      endif
   5576  23d2				   pixelon_r
   5577  23d2		       b9 f0 10 	      lda	playfield,y
   5578  23d5		       1d 45 f4 	      ora	setbyte,x
   5579  23d8					      ifconst	superchip
   5580  23d8		       99 70 10 	      sta	playfield-128,y
   5581  23db				  -	      else
   5582  23db				  -	      sta	playfield,y
   5583  23db					      endif
      0  23db					      RETURN
      1  23db				  -	      ifnconst	bankswitch
      2  23db				  -	      rts
      3  23db					      else
      4  23db		       4c da ff 	      jmp	BS_return
      5  23de					      endif
   5585  23de				   pixeloff_r
   5586  23de		       bd 45 f4 	      lda	setbyte,x
   5587  23e1		       49 ff		      eor	#$ff
   5588  23e3		       39 f0 10 	      and	playfield,y
   5589  23e6					      ifconst	superchip
   5590  23e6		       99 70 10 	      sta	playfield-128,y
   5591  23e9				  -	      else
   5592  23e9				  -	      sta	playfield,y
   5593  23e9					      endif
      0  23e9					      RETURN
      1  23e9				  -	      ifnconst	bankswitch
      2  23e9				  -	      rts
      3  23e9					      else
      4  23e9		       4c da ff 	      jmp	BS_return
      5  23ec					      endif
   5595  23ec
   5596  23ec				  -	      else
   5597  23ec				  -	      jmp	plotpoint
   5598  23ec					      endif
   5599  23ec
   5600  23ec				   pfhline
   5601  23ec							;x=xvalue, y=yvalue, a=0,1,2, temp3=endx
   5602  23ec		       20 9b f3 	      jsr	setuppointers
   5603  23ef		       4c f9 f3 	      jmp	noinc
   5604  23f2				   keepgoing
   5605  23f2		       e8		      inx
   5606  23f3		       8a		      txa
   5607  23f4		       29 07		      and	#7
   5608  23f6		       d0 01		      bne	noinc
   5609  23f8		       c8		      iny
   5610  23f9				   noinc
   5611  23f9		       20 1e f4 	      jsr	plotpoint
   5612  23fc		       e4 9e		      cpx	temp3
   5613  23fe		       30 f2		      bmi	keepgoing
      0  2400					      RETURN
      1  2400				  -	      ifnconst	bankswitch
      2  2400				  -	      rts
      3  2400					      else
      4  2400		       4c da ff 	      jmp	BS_return
      5  2403					      endif
   5615  2403
   5616  2403				   pfvline
   5617  2403							;x=xvalue, y=yvalue, a=0,1,2, temp3=endx
   5618  2403		       20 9b f3 	      jsr	setuppointers
   5619  2406		       84 9c		      sty	temp1	; store memory location offset
   5620  2408		       e6 9e		      inc	temp3	; increase final x by 1 
   5621  240a		       a5 9e		      lda	temp3
   5622  240c		       0a		      asl
   5623  240d					      if	pfwidth=4
   5624  240d		       0a		      asl		; multiply by 4
   5625  240e					      endif		; else multiply by 2
   5626  240e		       85 9e		      sta	temp3	; store it
   5627  2410							; Thanks to Michael Rideout for fixing a bug in this code
   5628  2410							; right now, temp1=y=starting memory location, temp3=final
   5629  2410							; x should equal original x value
   5630  2410				   keepgoingy
   5631  2410		       20 1e f4 	      jsr	plotpoint
   5632  2413		       c8		      iny
   5633  2414		       c8		      iny
   5634  2415					      if	pfwidth=4
   5635  2415		       c8		      iny
   5636  2416		       c8		      iny
   5637  2417					      endif
   5638  2417		       c4 9e		      cpy	temp3
   5639  2419		       30 f5		      bmi	keepgoingy
      0  241b					      RETURN
      1  241b				  -	      ifnconst	bankswitch
      2  241b				  -	      rts
      3  241b					      else
      4  241b		       4c da ff 	      jmp	BS_return
      5  241e					      endif
   5641  241e
   5642  241e				   plotpoint
   5643  241e		       a5 9d		      lda	temp2	; load on.off.flip value (0,1, or 2)
   5644  2420		       f0 0d		      beq	pixelon	; if "on" go to on
   5645  2422		       4a		      lsr
   5646  2423		       b0 14		      bcs	pixeloff	; value is 1 if true
   5647  2425		       b9 f0 10 	      lda	playfield,y	; if here, it's "flip"
   5648  2428		       5d 45 f4 	      eor	setbyte,x
   5649  242b					      ifconst	superchip
   5650  242b		       99 70 10 	      sta	playfield-128,y
   5651  242e				  -	      else
   5652  242e				  -	      sta	playfield,y
   5653  242e					      endif
   5654  242e		       60		      rts
   5655  242f				   pixelon
   5656  242f		       b9 f0 10 	      lda	playfield,y
   5657  2432		       1d 45 f4 	      ora	setbyte,x
   5658  2435					      ifconst	superchip
   5659  2435		       99 70 10 	      sta	playfield-128,y
   5660  2438				  -	      else
   5661  2438				  -	      sta	playfield,y
   5662  2438					      endif
   5663  2438		       60		      rts
   5664  2439				   pixeloff
   5665  2439		       bd 45 f4 	      lda	setbyte,x
   5666  243c		       49 ff		      eor	#$ff
   5667  243e		       39 f0 10 	      and	playfield,y
   5668  2441					      ifconst	superchip
   5669  2441		       99 70 10 	      sta	playfield-128,y
   5670  2444				  -	      else
   5671  2444				  -	      sta	playfield,y
   5672  2444					      endif
   5673  2444		       60		      rts
   5674  2445
   5675  2445				   setbyte
   5676  2445					      ifnconst	pfcenter
   5677  2445		       80		      .byte.b	$80
   5678  2446		       40		      .byte.b	$40
   5679  2447		       20		      .byte.b	$20
   5680  2448		       10		      .byte.b	$10
   5681  2449		       08		      .byte.b	$08
   5682  244a		       04		      .byte.b	$04
   5683  244b		       02		      .byte.b	$02
   5684  244c		       01		      .byte.b	$01
   5685  244d					      endif
   5686  244d		       01		      .byte.b	$01
   5687  244e		       02		      .byte.b	$02
   5688  244f		       04		      .byte.b	$04
   5689  2450		       08		      .byte.b	$08
   5690  2451		       10		      .byte.b	$10
   5691  2452		       20		      .byte.b	$20
   5692  2453		       40		      .byte.b	$40
   5693  2454		       80		      .byte.b	$80
   5694  2455		       80		      .byte.b	$80
   5695  2456		       40		      .byte.b	$40
   5696  2457		       20		      .byte.b	$20
   5697  2458		       10		      .byte.b	$10
   5698  2459		       08		      .byte.b	$08
   5699  245a		       04		      .byte.b	$04
   5700  245b		       02		      .byte.b	$02
   5701  245c		       01		      .byte.b	$01
   5702  245d		       01		      .byte.b	$01
   5703  245e		       02		      .byte.b	$02
   5704  245f		       04		      .byte.b	$04
   5705  2460		       08		      .byte.b	$08
   5706  2461		       10		      .byte.b	$10
   5707  2462		       20		      .byte.b	$20
   5708  2463		       40		      .byte.b	$40
   5709  2464		       80		      .byte.b	$80
   5710  2465							; Provided under the CC0 license. See the included LICENSE.txt for details.
   5711  2465
   5712  2465				   pfscroll		;(a=0 left, 1 right, 2 up, 4 down, 6=upup, 12=downdown)
   5713  2465		       d0 2a		      bne	notleft
   5714  2467							;left
   5715  2467					      ifconst	pfres
   5716  2467		       a2 10		      ldx	#pfres*4
   5717  2469				  -	      else
   5718  2469				  -	      ldx	#48
   5719  2469					      endif
   5720  2469				   leftloop
   5721  2469		       bd ef 10 	      lda	playfield-1,x
   5722  246c		       4a		      lsr
   5723  246d
   5724  246d					      ifconst	superchip
   5725  246d		       bd ee 10 	      lda	playfield-2,x
   5726  2470		       2a		      rol
   5727  2471		       9d 6e 10 	      sta	playfield-130,x
   5728  2474		       bd ed 10 	      lda	playfield-3,x
   5729  2477		       6a		      ror
   5730  2478		       9d 6d 10 	      sta	playfield-131,x
   5731  247b		       bd ec 10 	      lda	playfield-4,x
   5732  247e		       2a		      rol
   5733  247f		       9d 6c 10 	      sta	playfield-132,x
   5734  2482		       bd ef 10 	      lda	playfield-1,x
   5735  2485		       6a		      ror
   5736  2486		       9d 6f 10 	      sta	playfield-129,x
   5737  2489				  -	      else
   5738  2489				  -	      rol	playfield-2,x
   5739  2489				  -	      ror	playfield-3,x
   5740  2489				  -	      rol	playfield-4,x
   5741  2489				  -	      ror	playfield-1,x
   5742  2489					      endif
   5743  2489
   5744  2489		       8a		      txa
   5745  248a		       cb 04		      sbx	#4
   5746  248c		       d0 db		      bne	leftloop
      0  248e					      RETURN
      1  248e				  -	      ifnconst	bankswitch
      2  248e				  -	      rts
      3  248e					      else
      4  248e		       4c da ff 	      jmp	BS_return
      5  2491					      endif
   5748  2491
   5749  2491				   notleft
   5750  2491		       4a		      lsr
   5751  2492		       90 2a		      bcc	notright
   5752  2494							;right
   5753  2494
   5754  2494					      ifconst	pfres
   5755  2494		       a2 10		      ldx	#pfres*4
   5756  2496				  -	      else
   5757  2496				  -	      ldx	#48
   5758  2496					      endif
   5759  2496				   rightloop
   5760  2496		       bd ec 10 	      lda	playfield-4,x
   5761  2499		       4a		      lsr
   5762  249a					      ifconst	superchip
   5763  249a		       bd ed 10 	      lda	playfield-3,x
   5764  249d		       2a		      rol
   5765  249e		       9d 6d 10 	      sta	playfield-131,x
   5766  24a1		       bd ee 10 	      lda	playfield-2,x
   5767  24a4		       6a		      ror
   5768  24a5		       9d 6e 10 	      sta	playfield-130,x
   5769  24a8		       bd ef 10 	      lda	playfield-1,x
   5770  24ab		       2a		      rol
   5771  24ac		       9d 6f 10 	      sta	playfield-129,x
   5772  24af		       bd ec 10 	      lda	playfield-4,x
   5773  24b2		       6a		      ror
   5774  24b3		       9d 6c 10 	      sta	playfield-132,x
   5775  24b6				  -	      else
   5776  24b6				  -	      rol	playfield-3,x
   5777  24b6				  -	      ror	playfield-2,x
   5778  24b6				  -	      rol	playfield-1,x
   5779  24b6				  -	      ror	playfield-4,x
   5780  24b6					      endif
   5781  24b6		       8a		      txa
   5782  24b7		       cb 04		      sbx	#4
   5783  24b9		       d0 db		      bne	rightloop
      0  24bb					      RETURN
      1  24bb				  -	      ifnconst	bankswitch
      2  24bb				  -	      rts
      3  24bb					      else
      4  24bb		       4c da ff 	      jmp	BS_return
      5  24be					      endif
   5785  24be
   5786  24be				   notright
   5787  24be		       4a		      lsr
   5788  24bf		       90 5b		      bcc	notup
   5789  24c1							;up
   5790  24c1		       4a		      lsr
   5791  24c2		       90 02		      bcc	onedecup
   5792  24c4		       c6 ef		      dec	playfieldpos
   5793  24c6				   onedecup
   5794  24c6		       c6 ef		      dec	playfieldpos
   5795  24c8		       f0 02		      beq	shiftdown
   5796  24ca		       10 4d		      bpl	noshiftdown2
   5797  24cc				   shiftdown
   5798  24cc				  -	      ifconst	pfrowheight
   5799  24cc				  -	      lda	#pfrowheight
   5800  24cc					      else
   5801  24cc				  -	      ifnconst	pfres
   5802  24cc				  -	      lda	#8
   5803  24cc					      else
   5804  24cc		       a9 18		      lda	#(96/pfres)	; try to come close to the real size
   5805  24ce					      endif
   5806  24ce					      endif
   5807  24ce
   5808  24ce		       85 ef		      sta	playfieldpos
   5809  24d0		       ad f3 10 	      lda	playfield+3
   5810  24d3		       85 9f		      sta	temp4
   5811  24d5		       ad f2 10 	      lda	playfield+2
   5812  24d8		       85 9e		      sta	temp3
   5813  24da		       ad f1 10 	      lda	playfield+1
   5814  24dd		       85 9d		      sta	temp2
   5815  24df		       ad f0 10 	      lda	playfield
   5816  24e2		       85 9c		      sta	temp1
   5817  24e4		       a2 00		      ldx	#0
   5818  24e6				   up2
   5819  24e6		       bd f4 10 	      lda	playfield+4,x
   5820  24e9					      ifconst	superchip
   5821  24e9		       9d 70 10 	      sta	playfield-128,x
   5822  24ec		       bd f5 10 	      lda	playfield+5,x
   5823  24ef		       9d 71 10 	      sta	playfield-127,x
   5824  24f2		       bd f6 10 	      lda	playfield+6,x
   5825  24f5		       9d 72 10 	      sta	playfield-126,x
   5826  24f8		       bd f7 10 	      lda	playfield+7,x
   5827  24fb		       9d 73 10 	      sta	playfield-125,x
   5828  24fe				  -	      else
   5829  24fe				  -	      sta	playfield,x
   5830  24fe				  -	      lda	playfield+5,x
   5831  24fe				  -	      sta	playfield+1,x
   5832  24fe				  -	      lda	playfield+6,x
   5833  24fe				  -	      sta	playfield+2,x
   5834  24fe				  -	      lda	playfield+7,x
   5835  24fe				  -	      sta	playfield+3,x
   5836  24fe					      endif
   5837  24fe		       8a		      txa
   5838  24ff		       cb fc		      sbx	#252
   5839  2501					      ifconst	pfres
   5840  2501		       e0 0c		      cpx	#(pfres-1)*4
   5841  2503				  -	      else
   5842  2503				  -	      cpx	#44
   5843  2503					      endif
   5844  2503		       d0 e1		      bne	up2
   5845  2505
   5846  2505		       a5 9f		      lda	temp4
   5847  2507
   5848  2507					      ifconst	superchip
   5849  2507					      ifconst	pfres
   5850  2507		       8d 7f 10 	      sta	playfield+pfres*4-129
   5851  250a		       a5 9e		      lda	temp3
   5852  250c		       8d 7e 10 	      sta	playfield+pfres*4-130
   5853  250f		       a5 9d		      lda	temp2
   5854  2511		       8d 7d 10 	      sta	playfield+pfres*4-131
   5855  2514		       a5 9c		      lda	temp1
   5856  2516		       8d 7c 10 	      sta	playfield+pfres*4-132
   5857  2519				  -	      else
   5858  2519				  -	      sta	playfield+47-128
   5859  2519				  -	      lda	temp3
   5860  2519				  -	      sta	playfield+46-128
   5861  2519				  -	      lda	temp2
   5862  2519				  -	      sta	playfield+45-128
   5863  2519				  -	      lda	temp1
   5864  2519				  -	      sta	playfield+44-128
   5865  2519					      endif
   5866  2519				  -	      else
   5867  2519				  -	      ifconst	pfres
   5868  2519				  -	      sta	playfield+pfres*4-1
   5869  2519				  -	      lda	temp3
   5870  2519				  -	      sta	playfield+pfres*4-2
   5871  2519				  -	      lda	temp2
   5872  2519				  -	      sta	playfield+pfres*4-3
   5873  2519				  -	      lda	temp1
   5874  2519				  -	      sta	playfield+pfres*4-4
   5875  2519				  -	      else
   5876  2519				  -	      sta	playfield+47
   5877  2519				  -	      lda	temp3
   5878  2519				  -	      sta	playfield+46
   5879  2519				  -	      lda	temp2
   5880  2519				  -	      sta	playfield+45
   5881  2519				  -	      lda	temp1
   5882  2519				  -	      sta	playfield+44
   5883  2519				  -	      endif
   5884  2519					      endif
   5885  2519				   noshiftdown2
      0  2519					      RETURN
      1  2519				  -	      ifnconst	bankswitch
      2  2519				  -	      rts
      3  2519					      else
      4  2519		       4c da ff 	      jmp	BS_return
      5  251c					      endif
   5887  251c
   5888  251c
   5889  251c				   notup
   5890  251c							;down
   5891  251c		       4a		      lsr
   5892  251d		       b0 02		      bcs	oneincup
   5893  251f		       e6 ef		      inc	playfieldpos
   5894  2521				   oneincup
   5895  2521		       e6 ef		      inc	playfieldpos
   5896  2523		       a5 ef		      lda	playfieldpos
   5897  2525
   5898  2525				  -	      ifconst	pfrowheight
   5899  2525				  -	      cmp	#pfrowheight+1
   5900  2525					      else
   5901  2525				  -	      ifnconst	pfres
   5902  2525				  -	      cmp	#9
   5903  2525					      else
   5904  2525		       c9 19		      cmp	#(96/pfres)+1	; try to come close to the real size
   5905  2527					      endif
   5906  2527					      endif
   5907  2527
   5908  2527		       90 4b		      bcc	noshiftdown
   5909  2529		       a9 01		      lda	#1
   5910  252b		       85 ef		      sta	playfieldpos
   5911  252d
   5912  252d					      ifconst	pfres
   5913  252d		       ad ff 10 	      lda	playfield+pfres*4-1
   5914  2530		       85 9f		      sta	temp4
   5915  2532		       ad fe 10 	      lda	playfield+pfres*4-2
   5916  2535		       85 9e		      sta	temp3
   5917  2537		       ad fd 10 	      lda	playfield+pfres*4-3
   5918  253a		       85 9d		      sta	temp2
   5919  253c		       ad fc 10 	      lda	playfield+pfres*4-4
   5920  253f				  -	      else
   5921  253f				  -	      lda	playfield+47
   5922  253f				  -	      sta	temp4
   5923  253f				  -	      lda	playfield+46
   5924  253f				  -	      sta	temp3
   5925  253f				  -	      lda	playfield+45
   5926  253f				  -	      sta	temp2
   5927  253f				  -	      lda	playfield+44
   5928  253f					      endif
   5929  253f
   5930  253f		       85 9c		      sta	temp1
   5931  2541
   5932  2541					      ifconst	pfres
   5933  2541		       a2 0c		      ldx	#(pfres-1)*4
   5934  2543				  -	      else
   5935  2543				  -	      ldx	#44
   5936  2543					      endif
   5937  2543				   down2
   5938  2543		       bd ef 10 	      lda	playfield-1,x
   5939  2546					      ifconst	superchip
   5940  2546		       9d 73 10 	      sta	playfield-125,x
   5941  2549		       bd ee 10 	      lda	playfield-2,x
   5942  254c		       9d 72 10 	      sta	playfield-126,x
   5943  254f		       bd ed 10 	      lda	playfield-3,x
   5944  2552		       9d 71 10 	      sta	playfield-127,x
   5945  2555		       bd ec 10 	      lda	playfield-4,x
   5946  2558		       9d 70 10 	      sta	playfield-128,x
   5947  255b				  -	      else
   5948  255b				  -	      sta	playfield+3,x
   5949  255b				  -	      lda	playfield-2,x
   5950  255b				  -	      sta	playfield+2,x
   5951  255b				  -	      lda	playfield-3,x
   5952  255b				  -	      sta	playfield+1,x
   5953  255b				  -	      lda	playfield-4,x
   5954  255b				  -	      sta	playfield,x
   5955  255b					      endif
   5956  255b		       8a		      txa
   5957  255c		       cb 04		      sbx	#4
   5958  255e		       d0 e3		      bne	down2
   5959  2560
   5960  2560		       a5 9f		      lda	temp4
   5961  2562					      ifconst	superchip
   5962  2562		       8d 73 10 	      sta	playfield-125
   5963  2565		       a5 9e		      lda	temp3
   5964  2567		       8d 72 10 	      sta	playfield-126
   5965  256a		       a5 9d		      lda	temp2
   5966  256c		       8d 71 10 	      sta	playfield-127
   5967  256f		       a5 9c		      lda	temp1
   5968  2571		       8d 70 10 	      sta	playfield-128
   5969  2574				  -	      else
   5970  2574				  -	      sta	playfield+3
   5971  2574				  -	      lda	temp3
   5972  2574				  -	      sta	playfield+2
   5973  2574				  -	      lda	temp2
   5974  2574				  -	      sta	playfield+1
   5975  2574				  -	      lda	temp1
   5976  2574				  -	      sta	playfield
   5977  2574					      endif
   5978  2574				   noshiftdown
      0  2574					      RETURN
      1  2574				  -	      ifnconst	bankswitch
      2  2574				  -	      rts
      3  2574					      else
      4  2574		       4c da ff 	      jmp	BS_return
      5  2577					      endif
   5980  2577							; Provided under the CC0 license. See the included LICENSE.txt for details.
   5981  2577
   5982  2577							;standard routines needed for pretty much all games
   5983  2577							; just the random number generator is left - maybe we should remove this asm file altogether?
   5984  2577							; repositioning code and score pointer setup moved to overscan
   5985  2577							; read switches, joysticks now compiler generated (more efficient)
   5986  2577
   5987  2577				   randomize
   5988  2577		       a5 a2		      lda	rand
   5989  2579		       4a		      lsr
   5990  257a				  -	      ifconst	rand16
   5991  257a				  -	      rol	rand16
   5992  257a					      endif
   5993  257a		       90 02		      bcc	noeor
   5994  257c		       49 b4		      eor	#$B4
   5995  257e				   noeor
   5996  257e		       85 a2		      sta	rand
   5997  2580				  -	      ifconst	rand16
   5998  2580				  -	      eor	rand16
   5999  2580					      endif
      0  2580					      RETURN
      1  2580				  -	      ifnconst	bankswitch
      2  2580				  -	      rts
      3  2580					      else
      4  2580		       4c da ff 	      jmp	BS_return
      5  2583					      endif
   6001  2583							; Provided under the CC0 license. See the included LICENSE.txt for details.
   6002  2583
   6003  2583				   drawscreen
   6004  2583				  -	      ifconst	debugscore
   6005  2583				  -	      ldx	#14
   6006  2583				  -	      lda	INTIM	; display # cycles left in the score
   6007  2583				  -
   6008  2583				  -	      ifconst	mincycles
   6009  2583				  -	      lda	mincycles
   6010  2583				  -	      cmp	INTIM
   6011  2583				  -	      lda	mincycles
   6012  2583				  -	      bcc	nochange
   6013  2583				  -	      lda	INTIM
   6014  2583				  -	      sta	mincycles
   6015  2583				  -nochange
   6016  2583				  -	      endif
   6017  2583				  -
   6018  2583				  -			; cmp #$2B
   6019  2583				  -			; bcs no_cycles_left
   6020  2583				  -	      bmi	cycles_left
   6021  2583				  -	      ldx	#64
   6022  2583				  -	      eor	#$ff	;make negative
   6023  2583				  -cycles_left
   6024  2583				  -	      stx	scorecolor
   6025  2583				  -	      and	#$7f	; clear sign bit
   6026  2583				  -	      tax
   6027  2583				  -	      lda	scorebcd,x
   6028  2583				  -	      sta	score+2
   6029  2583				  -	      lda	scorebcd1,x
   6030  2583				  -	      sta	score+1
   6031  2583				  -	      jmp	done_debugscore
   6032  2583				  -scorebcd
   6033  2583				  -	      .byte	$00, $64, $28, $92, $56, $20, $84, $48, $12, $76, $40
   6034  2583				  -	      .byte	$04, $68, $32, $96, $60, $24, $88, $52, $16, $80, $44
   6035  2583				  -	      .byte	$08, $72, $36, $00, $64, $28, $92, $56, $20, $84, $48
   6036  2583				  -	      .byte	$12, $76, $40, $04, $68, $32, $96, $60, $24, $88
   6037  2583				  -scorebcd1
   6038  2583				  -	      .byte	0, 0, 1, 1, 2, 3, 3, 4, 5, 5, 6
   6039  2583				  -	      .byte	7, 7, 8, 8, 9, $10, $10, $11, $12, $12, $13
   6040  2583				  -	      .byte	$14, $14, $15, $16, $16, $17, $17, $18, $19, $19, $20
   6041  2583				  -	      .byte	$21, $21, $22, $23, $23, $24, $24, $25, $26, $26
   6042  2583				  -done_debugscore
   6043  2583					      endif
   6044  2583
   6045  2583				  -	      ifconst	debugcycles
   6046  2583				  -	      lda	INTIM	; if we go over, it mucks up the background color
   6047  2583				  -			; cmp #$2B
   6048  2583				  -			; BCC overscan
   6049  2583				  -	      bmi	overscan
   6050  2583				  -	      sta	COLUBK
   6051  2583				  -	      bcs	doneoverscan
   6052  2583					      endif
   6053  2583
   6054  2583				   overscan
   6055  2583				  -	      ifconst	interlaced
   6056  2583				  -	      PHP
   6057  2583				  -	      PLA
   6058  2583				  -	      EOR	#4	; flip interrupt bit
   6059  2583				  -	      PHA
   6060  2583				  -	      PLP
   6061  2583				  -	      AND	#4	; isolate the interrupt bit
   6062  2583				  -	      TAX		; save it for later
   6063  2583					      endif
   6064  2583
   6065  2583				   overscanloop
   6066  2583		       ad 84 02 	      lda	INTIM	;wait for sync
   6067  2586		       30 fb		      bmi	overscanloop
   6068  2588				   doneoverscan
   6069  2588
   6070  2588							;do VSYNC
   6071  2588
   6072  2588				  -	      ifconst	interlaced
   6073  2588				  -	      CPX	#4
   6074  2588				  -	      BNE	oddframevsync
   6075  2588					      endif
   6076  2588
   6077  2588		       a9 02		      lda	#2
   6078  258a		       85 02		      sta	WSYNC
   6079  258c		       85 00		      sta	VSYNC
   6080  258e		       85 02		      STA	WSYNC
   6081  2590		       85 02		      STA	WSYNC
   6082  2592		       4a		      lsr
   6083  2593		       85 02		      STA	WSYNC
   6084  2595		       85 00		      STA	VSYNC
   6085  2597		       85 01		      sta	VBLANK
   6086  2599					      ifnconst	overscan_time
   6087  2599		       a9 a5		      lda	#37+128
   6088  259b				  -	      else
   6089  259b				  -	      lda	#overscan_time+128
   6090  259b					      endif
   6091  259b		       8d 96 02 	      sta	TIM64T
   6092  259e
   6093  259e				  -	      ifconst	interlaced
   6094  259e				  -	      jmp	postsync
   6095  259e				  -
   6096  259e				  -oddframevsync
   6097  259e				  -	      sta	WSYNC
   6098  259e				  -
   6099  259e				  -	      LDA	($80,X)	; 11 waste
   6100  259e				  -	      LDA	($80,X)	; 11 waste
   6101  259e				  -	      LDA	($80,X)	; 11 waste
   6102  259e				  -
   6103  259e				  -	      lda	#2
   6104  259e				  -	      sta	VSYNC
   6105  259e				  -	      sta	WSYNC
   6106  259e				  -	      sta	WSYNC
   6107  259e				  -	      sta	WSYNC
   6108  259e				  -
   6109  259e				  -	      LDA	($80,X)	; 11 waste
   6110  259e				  -	      LDA	($80,X)	; 11 waste
   6111  259e				  -	      LDA	($80,X)	; 11 waste
   6112  259e				  -
   6113  259e				  -	      lda	#0
   6114  259e				  -	      sta	VSYNC
   6115  259e				  -	      sta	VBLANK
   6116  259e				  -	      ifnconst	overscan_time
   6117  259e				  -	      lda	#37+128
   6118  259e				  -	      else
   6119  259e				  -	      lda	#overscan_time+128
   6120  259e				  -	      endif
   6121  259e				  -	      sta	TIM64T
   6122  259e				  -
   6123  259e				  -postsync
   6124  259e					      endif
   6125  259e
   6126  259e				  -	      ifconst	legacy
   6127  259e				  -	      if	legacy < 100
   6128  259e				  -	      ldx	#4
   6129  259e				  -adjustloop
   6130  259e				  -	      lda	player0x,x
   6131  259e				  -	      sec
   6132  259e				  -	      sbc	#14	;?
   6133  259e				  -	      sta	player0x,x
   6134  259e				  -	      dex
   6135  259e				  -	      bpl	adjustloop
   6136  259e				  -	      endif
   6137  259e					      endif
   6138  259e				  -	      if	((<*)>$e9)&&((<*)<$fa)
   6139  259e				  -	      repeat	($fa-(<*))
   6140  259e				  -	      nop
   6141  259e				  -	      repend
   6142  259e					      endif
   6143  259e		       85 02		      sta	WSYNC
   6144  25a0		       a2 04		      ldx	#4
      0  25a2					      SLEEP	3
      1  25a2				   .CYCLES    SET	3
      2  25a2
      3  25a2				  -	      IF	.CYCLES < 2
      4  25a2				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  25a2				  -	      ERR
      6  25a2					      ENDIF
      7  25a2
      8  25a2					      IF	.CYCLES & 1
      9  25a2					      IFNCONST	NO_ILLEGAL_OPCODES
     10  25a2		       04 00		      nop	0
     11  25a4				  -	      ELSE
     12  25a4				  -	      bit	VSYNC
     13  25a4					      ENDIF
     14  25a4				   .CYCLES    SET	.CYCLES - 3
     15  25a4					      ENDIF
     16  25a4
     17  25a4				  -	      REPEAT	.CYCLES / 2
     18  25a4				  -	      nop
     19  25a4					      REPEND
   6146  25a4				   HorPosLoop		; 5
   6147  25a4		       b5 80		      lda	player0x,X	;+4 9
   6148  25a6		       38		      sec		;+2 11
   6149  25a7				   DivideLoop
   6150  25a7		       e9 0f		      sbc	#15
   6151  25a9		       b0 fc		      bcs	DivideLoop	;+4 15
   6152  25ab		       95 9c		      sta	temp1,X	;+4 19
   6153  25ad		       95 10		      sta	RESP0,X	;+4 23
   6154  25af		       85 02		      sta	WSYNC
   6155  25b1		       ca		      dex
   6156  25b2		       10 f0		      bpl	HorPosLoop	;+5 5
   6157  25b4							; 4
   6158  25b4
   6159  25b4		       a2 04		      ldx	#4
   6160  25b6		       b4 9c		      ldy	temp1,X
   6161  25b8		       b9 14 f5 	      lda	repostable-256,Y
   6162  25bb		       95 20		      sta	HMP0,X	;+14 18
   6163  25bd
   6164  25bd		       ca		      dex
   6165  25be		       b4 9c		      ldy	temp1,X
   6166  25c0		       b9 14 f5 	      lda	repostable-256,Y
   6167  25c3		       95 20		      sta	HMP0,X	;+14 32
   6168  25c5
   6169  25c5		       ca		      dex
   6170  25c6		       b4 9c		      ldy	temp1,X
   6171  25c8		       b9 14 f5 	      lda	repostable-256,Y
   6172  25cb		       95 20		      sta	HMP0,X	;+14 46
   6173  25cd
   6174  25cd		       ca		      dex
   6175  25ce		       b4 9c		      ldy	temp1,X
   6176  25d0		       b9 14 f5 	      lda	repostable-256,Y
   6177  25d3		       95 20		      sta	HMP0,X	;+14 60
   6178  25d5
   6179  25d5		       ca		      dex
   6180  25d6		       b4 9c		      ldy	temp1,X
   6181  25d8		       b9 14 f5 	      lda	repostable-256,Y
   6182  25db		       95 20		      sta	HMP0,X	;+14 74
   6183  25dd
   6184  25dd		       85 02		      sta	WSYNC
   6185  25df
   6186  25df		       85 2a		      sta	HMOVE	;+3 3
   6187  25e1
   6188  25e1
   6189  25e1				  -	      ifconst	legacy
   6190  25e1				  -	      if	legacy < 100
   6191  25e1				  -	      ldx	#4
   6192  25e1				  -adjustloop2
   6193  25e1				  -	      lda	player0x,x
   6194  25e1				  -	      clc
   6195  25e1				  -	      adc	#14	;?
   6196  25e1				  -	      sta	player0x,x
   6197  25e1				  -	      dex
   6198  25e1				  -	      bpl	adjustloop2
   6199  25e1				  -	      endif
   6200  25e1					      endif
   6201  25e1
   6202  25e1
   6203  25e1
   6204  25e1
   6205  25e1							;set score pointers
   6206  25e1		       a7 95		      lax	score+2
   6207  25e3		       20 14 f6 	      jsr	scorepointerset
   6208  25e6		       84 9b		      sty	scorepointers+5
   6209  25e8		       86 98		      stx	scorepointers+2
   6210  25ea		       a7 94		      lax	score+1
   6211  25ec		       20 14 f6 	      jsr	scorepointerset
   6212  25ef		       84 9a		      sty	scorepointers+4
   6213  25f1		       86 97		      stx	scorepointers+1
   6214  25f3		       a7 93		      lax	score
   6215  25f5		       20 14 f6 	      jsr	scorepointerset
   6216  25f8		       84 99		      sty	scorepointers+3
   6217  25fa		       86 96		      stx	scorepointers
   6218  25fc
   6219  25fc				   vblk
   6220  25fc							; run possible vblank bB code
   6221  25fc				  -	      ifconst	vblank_bB_code
   6222  25fc				  -	      jsr	vblank_bB_code
   6223  25fc					      endif
   6224  25fc				   vblk2
   6225  25fc		       ad 84 02 	      LDA	INTIM
   6226  25ff		       30 fb		      bmi	vblk2
   6227  2601		       4c 00 f1 	      jmp	kernel
   6228  2604
   6229  2604
   6230  2604		       80 70 60 50*	      .byte.b	$80,$70,$60,$50,$40,$30,$20,$10,$00
   6231  260d		       f0 e0 d0 c0*	      .byte.b	$F0,$E0,$D0,$C0,$B0,$A0,$90
   6232  2614				   repostable
   6233  2614
   6234  2614				   scorepointerset
   6235  2614		       29 0f		      and	#$0F
   6236  2616		       0a		      asl
   6237  2617		       0a		      asl
   6238  2618		       0a		      asl
   6239  2619		       69 71		      adc	#<scoretable
   6240  261b		       a8		      tay
   6241  261c		       8a		      txa
   6242  261d							; and #$F0
   6243  261d							; lsr
   6244  261d		       4b f0		      asr	#$F0
   6245  261f		       69 71		      adc	#<scoretable
   6246  2621		       aa		      tax
   6247  2622		       60		      rts
   6248  2623							;bB.asm
   6249  2623							; bB.asm file is split here
   6250  2623				   .
   6251  2623							; 
   6252  2623
   6253  2623				   .L0525		;  asm
   6254  2623
------- FILE titlescreen/asm/titlescreen.asm LEVEL 2 PASS 3
      0  2623					      include	"titlescreen/asm/titlescreen.asm"
      1  2623
------- FILE titlescreen/asm/layoutmacros.asm LEVEL 3 PASS 3
      0  2623					      include	"titlescreen/asm/layoutmacros.asm"
      1  2623
      2  2623							; the macro's used in the "titlescreen_layout.asm" file
      3  2623
      4  2623					      MAC	draw_96x2_1
      5  2623				   mk_96x2_1_on =	1
      6  2623					      jsr	draw_bmp_96x2_1
      7  2623					      ENDM
      8  2623
      9  2623					      MAC	draw_96x2_2
     10  2623				   mk_96x2_2_on =	1
     11  2623					      jsr	draw_bmp_96x2_2
     12  2623					      ENDM
     13  2623
     14  2623					      MAC	draw_96x2_3
     15  2623				   mk_96x2_3_on =	1
     16  2623					      jsr	draw_bmp_96x2_3
     17  2623					      ENDM
     18  2623
     19  2623					      MAC	draw_96x2_4
     20  2623				   mk_96x2_4_on =	1
     21  2623					      jsr	draw_bmp_96x2_4
     22  2623					      ENDM
     23  2623
     24  2623					      MAC	draw_96x2_5
     25  2623				   mk_96x2_5_on =	1
     26  2623					      jsr	draw_bmp_96x2_5
     27  2623					      ENDM
     28  2623
     29  2623					      MAC	draw_96x2_6
     30  2623				   mk_96x2_6_on =	1
     31  2623					      jsr	draw_bmp_96x2_6
     32  2623					      ENDM
     33  2623
     34  2623					      MAC	draw_96x2_7
     35  2623				   mk_96x2_7_on =	1
     36  2623					      jsr	draw_bmp_96x2_7
     37  2623					      ENDM
     38  2623
     39  2623					      MAC	draw_96x2_8
     40  2623				   mk_96x2_8_on =	1
     41  2623					      jsr	draw_bmp_96x2_8
     42  2623					      ENDM
     43  2623
     44  2623					      MAC	draw_48x1_1
     45  2623				   mk_48x1_X_on =	1
     46  2623				   mk_48x1_1_on =	1
     47  2623					      jsr	draw_bmp_48x1_1
     48  2623					      ENDM
     49  2623
     50  2623					      MAC	draw_48x1_2
     51  2623				   mk_48x1_X_on =	1
     52  2623				   mk_48x1_2_on =	1
     53  2623					      jsr	draw_bmp_48x1_2
     54  2623					      ENDM
     55  2623
     56  2623					      MAC	draw_48x1_3
     57  2623				   mk_48x1_X_on =	1
     58  2623				   mk_48x1_3_on =	1
     59  2623					      jsr	draw_bmp_48x1_3
     60  2623					      ENDM
     61  2623
     62  2623					      MAC	draw_48x1_4
     63  2623				   mk_48x1_X_on =	1
     64  2623				   mk_48x1_4_on =	1
     65  2623					      jsr	draw_bmp_48x1_4
     66  2623					      ENDM
     67  2623
     68  2623					      MAC	draw_48x1_5
     69  2623				   mk_48x1_X_on =	1
     70  2623				   mk_48x1_5_on =	1
     71  2623					      jsr	draw_bmp_48x1_5
     72  2623					      ENDM
     73  2623
     74  2623					      MAC	draw_48x1_6
     75  2623				   mk_48x1_X_on =	1
     76  2623				   mk_48x1_6_on =	1
     77  2623					      jsr	draw_bmp_48x1_6
     78  2623					      ENDM
     79  2623
     80  2623					      MAC	draw_48x1_7
     81  2623				   mk_48x1_X_on =	1
     82  2623				   mk_48x1_7_on =	1
     83  2623					      jsr	draw_bmp_48x1_7
     84  2623					      ENDM
     85  2623
     86  2623					      MAC	draw_48x1_8
     87  2623				   mk_48x1_X_on =	1
     88  2623				   mk_48x1_8_on =	1
     89  2623					      jsr	draw_bmp_48x1_8
     90  2623					      ENDM
     91  2623
     92  2623
     93  2623					      MAC	draw_48x2_1
     94  2623				   mk_48x2_X_on =	1
     95  2623				   mk_48x2_1_on =	1
     96  2623					      jsr	draw_bmp_48x2_1
     97  2623					      ENDM
     98  2623
     99  2623					      MAC	draw_48x2_2
    100  2623				   mk_48x2_X_on =	1
    101  2623				   mk_48x2_2_on =	1
    102  2623					      jsr	draw_bmp_48x2_2
    103  2623					      ENDM
    104  2623
    105  2623					      MAC	draw_48x2_3
    106  2623				   mk_48x2_X_on =	1
    107  2623				   mk_48x2_3_on =	1
    108  2623					      jsr	draw_bmp_48x2_3
    109  2623					      ENDM
    110  2623
    111  2623					      MAC	draw_48x2_4
    112  2623				   mk_48x2_X_on =	1
    113  2623				   mk_48x2_4_on =	1
    114  2623					      jsr	draw_bmp_48x2_4
    115  2623					      ENDM
    116  2623
    117  2623					      MAC	draw_48x2_5
    118  2623				   mk_48x2_X_on =	1
    119  2623				   mk_48x2_5_on =	1
    120  2623					      jsr	draw_bmp_48x2_5
    121  2623					      ENDM
    122  2623
    123  2623					      MAC	draw_48x2_6
    124  2623				   mk_48x2_X_on =	1
    125  2623				   mk_48x2_6_on =	1
    126  2623					      jsr	draw_bmp_48x2_6
    127  2623					      ENDM
    128  2623
    129  2623					      MAC	draw_48x2_7
    130  2623				   mk_48x2_X_on =	1
    131  2623				   mk_48x2_7_on =	1
    132  2623					      jsr	draw_bmp_48x2_7
    133  2623					      ENDM
    134  2623
    135  2623					      MAC	draw_48x2_8
    136  2623				   mk_48x2_X_on =	1
    137  2623				   mk_48x2_8_on =	1
    138  2623					      jsr	draw_bmp_48x2_8
    139  2623					      ENDM
    140  2623
    141  2623					      MAC	draw_player
    142  2623				   mk_player_on =	1
    143  2623					      jsr	draw_player_display
    144  2623					      ENDM
    145  2623
    146  2623					      MAC	draw_score
    147  2623				   mk_score_on =	1
    148  2623				   mk_48x1_X_on =	1
    149  2623					      jsr	draw_score_display
    150  2623					      ENDM
    151  2623
    152  2623					      MAC	draw_gameselect
    153  2623				   mk_gameselect_on =	1
    154  2623				   mk_48x1_X_on =	1
    155  2623					      jsr	draw_gameselect_display
    156  2623					      ENDM
    157  2623
    158  2623					      MAC	draw_space
    159  2623					      ldy	#{1}
    160  2623				   .loop
    161  2623					      sta	WSYNC
    162  2623					      dey
    163  2623					      bne	.loop
    164  2623					      ENDM
    165  2623
------- FILE titlescreen/asm/titlescreen.asm
------- FILE titlescreen/asm/dpcfix.asm LEVEL 3 PASS 3
      0  2623					      include	"titlescreen/asm/dpcfix.asm"
      1  2623							; reassign variables that DPC+ doesn't have
      2  2623
      3  2623				  -	      ifnconst	aux2
      4  2623				  -aux2       =	player2x
      5  2623					      endif
      6  2623				  -	      ifnconst	aux4
      7  2623				  -aux4       =	player4x
      8  2623					      endif
      9  2623				  -	      ifnconst	aux5
     10  2623				  -aux5       =	player5x
     11  2623					      endif
     12  2623				  -	      ifnconst	aux6
     13  2623				  -aux6       =	player6x
     14  2623					      endif
     15  2623
     16  2623				  -	      ifnconst	player0pointer
     17  2623				  -player0pointer =	player2y
     18  2623					      endif
     19  2623				  -	      ifnconst	player1pointer
     20  2623				  -player1pointer =	player2height	; to player3height
     21  2623					      endif
     22  2623				  -	      ifnconst	player1color
     23  2623				  -player1color =	player4height	; to player5height
     24  2623					      endif
     25  2623				  -	      ifnconst	scorepointers
     26  2623				  -scorepointers =	player6height	; to NUSIZ8
     27  2623					      endif
------- FILE titlescreen/asm/titlescreen.asm
------- FILE titlescreen/titlescreen_layout.asm LEVEL 3 PASS 3
      0  2623					      include	"titlescreen/titlescreen_layout.asm"
      1  2623
      2  2623							; To use a minikernel, just list it below. They'll be drawn on the screen in
      3  2623							; in the order they were listed.
      4  2623							;
      5  2623							; If a minikernel isn't listed, it won't be compiled into your program, and
      6  2623							; it won't use any rom space.
      7  2623
      8  2623					      MAC	titlescreenlayout
      9  2623					      draw_96x2_1
     10  2623					      draw_gameselect
     11  2623					      draw_48x2_1
     12  2623					      draw_score
     13  2623					      ENDM
     14  2623
     15  2623							; minikernel choices are:
     16  2623							;
     17  2623							; draw_48x1_1, draw_48x1_2, draw_48x1_3
     18  2623							;	The first, second, and third 48-wide single-line bitmap minikernels
     19  2623							;
     20  2623							; draw_48x2_1, draw_48x2_2, draw_48x2_3
     21  2623							;	The first, second, and third 48-wide double-line bitmap minikernels
     22  2623							;
     23  2623							; draw_96x2_1, draw_96x2_2, draw_96x2_3
     24  2623							;	The first, second, and third 96-wide double-line bitmap minikernels
     25  2623							;
     26  2623							; draw_gameselect
     27  2623							;	The game selection display minikernel
     28  2623							;
     29  2623							; draw_score
     30  2623							;	A minikernel that draws the score
     31  2623							;
     32  2623							; draw_space 10
     33  2623							;	A minikernel used to add blank space between other minikernels
------- FILE titlescreen/asm/titlescreen.asm
      5  2623
      6  2623				   .titledrawscreen
      7  2623				   title_eat_overscan
      8  2623							;bB runs in overscan. Wait for the overscan to run out...
      9  2623		       18		      clc
     10  2624		       ad 84 02 	      lda	INTIM
     11  2627		       30 fa		      bmi	title_eat_overscan
     12  2629		       4c 2c f6 	      jmp	title_do_vertical_sync
     13  262c
     14  262c				   title_do_vertical_sync
     15  262c		       a9 02		      lda	#2
     16  262e		       85 02		      sta	WSYNC	;one line with VSYNC
     17  2630		       85 00		      sta	VSYNC	;enable VSYNC
     18  2632		       85 02		      sta	WSYNC	;one line with VSYNC
     19  2634		       85 02		      sta	WSYNC	;one line with VSYNC
     20  2636		       a9 00		      lda	#0
     21  2638		       85 02		      sta	WSYNC	;one line with VSYNC
     22  263a		       85 00		      sta	VSYNC	;turn off VSYNC
     23  263c
     24  263c							;lda #42+128
     25  263c					      ifnconst	vblank_time
     26  263c		       a9 aa		      lda	#42+128
     27  263e				  -	      else
     28  263e				  -	      lda	#vblank_time+128
     29  263e					      endif
     30  263e
     31  263e		       8d 96 02 	      sta	TIM64T
     32  2641
     33  2641		       00 82	   titleframe =	missile0x
     34  2641		       e6 82		      inc	titleframe	; increment the frame counter
     35  2643
     36  2643				  -	      ifconst	.title_vblank
     37  2643				  -	      jsr	.title_vblank
     38  2643					      endif
     39  2643
     40  2643				   title_vblank_loop
     41  2643		       ad 84 02 	      lda	INTIM
     42  2646		       30 fb		      bmi	title_vblank_loop
     43  2648		       a9 00		      lda	#0
     44  264a		       85 02		      sta	WSYNC
     45  264c		       85 01		      sta	VBLANK
     46  264e		       85 1d		      sta	ENAM0
     47  2650		       85 1f		      sta	ENABL
     48  2652
     49  2652				   title_playfield
     50  2652
     51  2652							; ======== BEGIN of the custom kernel!!!!! All of the work is done in the playfield.
     52  2652
     53  2652		       a9 e6		      lda	#230
     54  2654		       8d 96 02 	      sta	TIM64T
     55  2657
     56  2657		       a9 01		      lda	#1
     57  2659		       85 0a		      sta	CTRLPF
     58  265b		       18		      clc
     59  265c
     60  265c		       a9 00		      lda	#0
     61  265e		       85 0b		      sta	REFP0
     62  2660		       85 0c		      sta	REFP1
     63  2662		       85 02		      sta	WSYNC
     64  2664		       ad a0 f6 	      lda	titlescreencolor
     65  2667		       85 09		      sta	COLUBK
     66  2669
      0  2669					      titlescreenlayout
      0  2669					      draw_96x2_1
      1  2669		       00 01	   mk_96x2_1_on =	1
      2  2669		       20 12 f8 	      jsr	draw_bmp_96x2_1
      0  266c					      draw_gameselect
      1  266c		       00 01	   mk_gameselect_on =	1
      2  266c		       00 01	   mk_48x1_X_on =	1
      3  266c		       20 53 fa 	      jsr	draw_gameselect_display
      0  266f					      draw_48x2_1
      1  266f		       00 01	   mk_48x2_X_on =	1
      2  266f		       00 01	   mk_48x2_1_on =	1
      3  266f		       20 a1 f6 	      jsr	draw_bmp_48x2_1
      0  2672					      draw_score
      1  2672		       00 01	   mk_score_on =	1
      2  2672		       00 01	   mk_48x1_X_on =	1
      3  2672		       20 81 f9 	      jsr	draw_score_display
     68  2675
     69  2675		       4c c9 fa 	      jmp	PFWAIT	; kernel is done. Finish off the screen
     70  2678
------- FILE titlescreen/asm/position48.asm LEVEL 3 PASS 3
      0  2678					      include	"titlescreen/asm/position48.asm"
      1  2678
      2  2678				   position48
      3  2678
      4  2678							;postion P0 and P1
      5  2678
      6  2678		       85 02		      sta	WSYNC
      7  267a
      8  267a		       a9 90		      lda	#$90	;2
      9  267c		       85 20		      sta	HMP0	;3
     10  267e		       a9 a0		      lda	#$A0	;2
     11  2680		       85 21		      sta	HMP1	;3
     12  2682
     13  2682		       e6 9c		      inc	temp1
     14  2684		       c6 9c		      dec	temp1
     15  2686		       e6 9c		      inc	temp1
     16  2688		       c6 9c		      dec	temp1
     17  268a		       e6 9c		      inc	temp1
      0  268c					      sleep	2
      1  268c				   .CYCLES    SET	2
      2  268c
      3  268c				  -	      IF	.CYCLES < 2
      4  268c				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  268c				  -	      ERR
      6  268c					      ENDIF
      7  268c
      8  268c				  -	      IF	.CYCLES & 1
      9  268c				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  268c				  -	      nop	0
     11  268c				  -	      ELSE
     12  268c				  -	      bit	VSYNC
     13  268c				  -	      ENDIF
     14  268c				  -.CYCLES    SET	.CYCLES - 3
     15  268c					      ENDIF
     16  268c
     17  268c					      REPEAT	.CYCLES / 2
     18  268c		       ea		      nop
     19  268d					      REPEND
     19  268d		       85 10		      sta	RESP0	;  +3
     20  268f		       85 11		      sta	RESP1	;  +3
     21  2691		       c6 9c		      dec	temp1	;  +5
     22  2693		       e6 9c		      inc	temp1	;  +5
     23  2695		       c6 9c		      dec	temp1	;  +5
     24  2697		       e6 9c		      inc	temp1	;  +5
     25  2699		       c6 9c		      dec	temp1	;  +5
      0  269b					      sleep	3
      1  269b				   .CYCLES    SET	3
      2  269b
      3  269b				  -	      IF	.CYCLES < 2
      4  269b				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  269b				  -	      ERR
      6  269b					      ENDIF
      7  269b
      8  269b					      IF	.CYCLES & 1
      9  269b					      IFNCONST	NO_ILLEGAL_OPCODES
     10  269b		       04 00		      nop	0
     11  269d				  -	      ELSE
     12  269d				  -	      bit	VSYNC
     13  269d					      ENDIF
     14  269d				   .CYCLES    SET	.CYCLES - 3
     15  269d					      ENDIF
     16  269d
     17  269d				  -	      REPEAT	.CYCLES / 2
     18  269d				  -	      nop
     19  269d					      REPEND
     27  269d		       85 2a		      sta	HMOVE	; +76
     28  269f		       60		      RTS
     29  26a0
------- FILE titlescreen/asm/titlescreen.asm
------- FILE titlescreen/titlescreen_color.asm LEVEL 3 PASS 3
      0  26a0					      include	"titlescreen/titlescreen_color.asm"
      1  26a0
      2  26a0							; This is where the titlescreen background color gets set.
      3  26a0							; You can also do a "dim titlescreencolor=[letter]" in bB
      4  26a0							; if you want to change the color on the fly.
      5  26a0
      6  26a0				  -	      ifnconst	titlescreencolor
      7  26a0				  -titlescreencolor
      8  26a0					      endif
      9  26a0		       00		      .byte.b	$00
     10  26a1
------- FILE titlescreen/asm/titlescreen.asm
     73  26a1
     74  26a1				  -	      ifconst	mk_48x1_1_on
     75  26a1				  -	      include	"titlescreen/asm/48x1_1_kernel.asm"
     76  26a1					      endif		;mk_48x1_1_on
     77  26a1
     78  26a1				  -	      ifconst	mk_48x1_2_on
     79  26a1				  -	      include	"titlescreen/asm/48x1_2_kernel.asm"
     80  26a1					      endif		;mk_48x1_2_on
     81  26a1
     82  26a1				  -	      ifconst	mk_48x1_3_on
     83  26a1				  -	      include	"titlescreen/asm/48x1_3_kernel.asm"
     84  26a1					      endif		;mk_48x1_3_on
     85  26a1
     86  26a1				  -	      ifconst	mk_48x1_4_on
     87  26a1				  -	      include	"titlescreen/asm/48x1_4_kernel.asm"
     88  26a1					      endif		;mk_48x1_4_on
     89  26a1
     90  26a1				  -	      ifconst	mk_48x1_5_on
     91  26a1				  -	      include	"titlescreen/asm/48x1_5_kernel.asm"
     92  26a1					      endif		;mk_48x1_5_on
     93  26a1
     94  26a1				  -	      ifconst	mk_48x1_6_on
     95  26a1				  -	      include	"titlescreen/asm/48x1_6_kernel.asm"
     96  26a1					      endif		;mk_48x1_6_on
     97  26a1
     98  26a1				  -	      ifconst	mk_48x1_7_on
     99  26a1				  -	      include	"titlescreen/asm/48x1_7_kernel.asm"
    100  26a1					      endif		;mk_48x1_7_on
    101  26a1
    102  26a1				  -	      ifconst	mk_48x1_8_on
    103  26a1				  -	      include	"titlescreen/asm/48x1_8_kernel.asm"
    104  26a1					      endif		;mk_48x1_8_on
    105  26a1
    106  26a1					      ifconst	mk_48x2_1_on
------- FILE titlescreen/asm/48x2_1_kernel.asm LEVEL 3 PASS 3
      0  26a1					      include	"titlescreen/asm/48x2_1_kernel.asm"
      1  26a1
      2  26a1				   draw_bmp_48x2_1
      3  26a1
      4  26a1		       a9 de		      lda	#<(bmp_48x2_1_colors-1+bmp_48x2_1_height-bmp_48x2_1_window)
      5  26a3				  -	      ifconst	bmp_48x2_1_index
      6  26a3				  -	      sec
      7  26a3				  -	      sbc	bmp_48x2_1_index
      8  26a3					      endif
      9  26a3		       85 f4		      sta	aux5+0
     10  26a5		       a9 fa		      lda	#>(bmp_48x2_1_colors-1+bmp_48x2_1_height-bmp_48x2_1_window)
     11  26a7		       85 f5		      sta	aux5+1
     12  26a9
     13  26a9		       a0 0b		      ldy	#11
     14  26ab				   bmp_48x2_1_pointersetup
     15  26ab		       b9 e0 f6 	      lda	bmp_48x2_1_values,y
     16  26ae		       99 96 00 	      sta	scorepointers,y
     17  26b1		       88		      dey
     18  26b2		       b9 e0 f6 	      lda	bmp_48x2_1_values,y
     19  26b5				  -	      ifconst	bmp_48x2_1_index
     20  26b5				  -	      sec
     21  26b5				  -	      sbc	bmp_48x2_1_index
     22  26b5					      endif
     23  26b5		       99 96 00 	      sta	scorepointers,y
     24  26b8		       88		      dey
     25  26b9		       10 f0		      bpl	bmp_48x2_1_pointersetup
     26  26bb
     27  26bb
     28  26bb		       a0 04		      ldy	#(bmp_48x2_1_window-1)
     29  26bd		       84 f1		      sty	aux2
     30  26bf
     31  26bf		       c8		      iny
     32  26c0		       b1 f4		      lda	(aux5),y
     33  26c2		       88		      dey
     34  26c3
     35  26c3		       85 06		      sta	COLUP0	;3
     36  26c5		       85 07		      sta	COLUP1	;3
     37  26c7		       85 2b		      sta	HMCLR	;3
     38  26c9
     39  26c9		       ad a0 f6 	      lda	titlescreencolor
     40  26cc		       85 08		      sta	COLUPF
     41  26ce
     42  26ce					      ifconst	bmp_48x2_1_background
     43  26ce		       ad e6 fa 	      lda	bmp_48x2_1_background
     44  26d1				  -	      else
     45  26d1				  -	      lda	titlescreencolor
     46  26d1					      endif
     47  26d1		       85 f3		      sta	aux4
     48  26d3					      ifconst	bmp_48x2_1_PF1
     49  26d3		       ad e4 fa 	      lda	bmp_48x2_1_PF1
     50  26d6				  -	      else
     51  26d6				  -	      lda	#0
     52  26d6				  -	      nop
     53  26d6					      endif
     54  26d6		       85 0e		      sta	PF1
     55  26d8
     56  26d8					      ifconst	bmp_48x2_1_PF2
     57  26d8		       ad e5 fa 	      lda	bmp_48x2_1_PF2
     58  26db				  -	      else
     59  26db				  -	      lda	#0
     60  26db				  -	      nop
     61  26db					      endif
     62  26db		       85 0f		      sta	PF2
     63  26dd
     64  26dd		       4c 67 f7 	      jmp	draw_bmp_48x2_X
     65  26e0
     66  26e0				   bmp_48x2_1_values
     67  26e0		       e7 fa		      .word.w	(bmp_48x2_1_00+#bmp_48x2_1_height-#bmp_48x2_1_window)
     68  26e2		       ed fa		      .word.w	(bmp_48x2_1_01+#bmp_48x2_1_height-#bmp_48x2_1_window)
     69  26e4		       f3 fa		      .word.w	(bmp_48x2_1_02+#bmp_48x2_1_height-#bmp_48x2_1_window)
     70  26e6		       f9 fa		      .word.w	(bmp_48x2_1_03+#bmp_48x2_1_height-#bmp_48x2_1_window)
     71  26e8		       00 fb		      .word.w	(bmp_48x2_1_04+#bmp_48x2_1_height-#bmp_48x2_1_window)
     72  26ea		       06 fb		      .word.w	(bmp_48x2_1_05+#bmp_48x2_1_height-#bmp_48x2_1_window)
     73  26ec
------- FILE titlescreen/asm/titlescreen.asm
    108  26ec					      endif		;mk_48x2_1_on
    109  26ec
    110  26ec				  -	      ifconst	mk_48x2_2_on
    111  26ec				  -	      include	"titlescreen/asm/48x2_2_kernel.asm"
    112  26ec					      endif		;mk_48x2_2_on
    113  26ec
    114  26ec				  -	      ifconst	mk_48x2_3_on
    115  26ec				  -	      include	"titlescreen/asm/48x2_3_kernel.asm"
    116  26ec					      endif		;mk_48x2_3_on
    117  26ec
    118  26ec				  -	      ifconst	mk_48x2_4_on
    119  26ec				  -	      include	"titlescreen/asm/48x2_4_kernel.asm"
    120  26ec					      endif		;mk_48x2_4_on
    121  26ec
    122  26ec				  -	      ifconst	mk_48x2_5_on
    123  26ec				  -	      include	"titlescreen/asm/48x2_5_kernel.asm"
    124  26ec					      endif		;mk_48x2_5_on
    125  26ec
    126  26ec				  -	      ifconst	mk_48x2_6_on
    127  26ec				  -	      include	"titlescreen/asm/48x2_6_kernel.asm"
    128  26ec					      endif		;mk_48x2_6_on
    129  26ec
    130  26ec				  -	      ifconst	mk_48x2_7_on
    131  26ec				  -	      include	"titlescreen/asm/48x2_7_kernel.asm"
    132  26ec					      endif		;mk_48x2_7_on
    133  26ec
    134  26ec				  -	      ifconst	mk_48x2_8_on
    135  26ec				  -	      include	"titlescreen/asm/48x2_8_kernel.asm"
    136  26ec					      endif		;mk_48x2_8_on
    137  26ec
    138  26ec					      ifconst	mk_48x1_X_on
------- FILE titlescreen/asm/48x1_X_kernel.asm LEVEL 3 PASS 3
      0  26ec					      include	"titlescreen/asm/48x1_X_kernel.asm"
      1  26ec				   draw_bmp_48x1_X
      2  26ec
      3  26ec		       a9 03		      lda	#3
      4  26ee		       85 04		      sta	NUSIZ0	;3=Player and Missile are drawn twice 32 clocks apart
      5  26f0		       85 05		      sta	NUSIZ1	;3=Player and Missile are drawn twice 32 clocks apart
      6  26f2
      7  26f2		       ba		      tsx
      8  26f3		       86 f6		      stx	stack1	;save the stack pointer
      9  26f5
     10  26f5		       20 78 f6 	      jsr	position48
     11  26f8
     12  26f8		       a9 03		      lda	#3	;2
     13  26fa		       85 25		      sta	VDELP0	;3
     14  26fc		       85 26		      sta	VDELP1	;3
     15  26fe
     16  26fe		       a9 01		      lda	#1	;2
     17  2700		       85 0a		      sta	CTRLPF	;3
     18  2702
     19  2702							;enough cycles have passed for the HMOV, so we can clear HMCLR
     20  2702		       85 2b		      sta	HMCLR
     21  2704
     22  2704		       85 02		      sta	WSYNC
     23  2706
     24  2706		       e6 9c		      inc	temp1	;5
     25  2708		       c6 9c		      dec	temp1	;5
     26  270a		       e6 9c		      inc	temp1	;5
     27  270c		       c6 9c		      dec	temp1	;5
     28  270e		       e6 9c		      inc	temp1	;5
     29  2710		       c6 9c		      dec	temp1	;5
     30  2712		       e6 9c		      inc	temp1	;5
     31  2714		       c6 9c		      dec	temp1	;5
     32  2716		       e6 9c		      inc	temp1	;5
     33  2718		       c6 9c		      dec	temp1	;5
     34  271a
      0  271a					      sleep	5
      1  271a				   .CYCLES    SET	5
      2  271a
      3  271a				  -	      IF	.CYCLES < 2
      4  271a				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  271a				  -	      ERR
      6  271a					      ENDIF
      7  271a
      8  271a					      IF	.CYCLES & 1
      9  271a					      IFNCONST	NO_ILLEGAL_OPCODES
     10  271a		       04 00		      nop	0
     11  271c				  -	      ELSE
     12  271c				  -	      bit	VSYNC
     13  271c					      ENDIF
     14  271c				   .CYCLES    SET	.CYCLES - 3
     15  271c					      ENDIF
     16  271c
     17  271c					      REPEAT	.CYCLES / 2
     18  271c		       ea		      nop
     19  271d					      REPEND
     36  271d
     37  271d		       c8		      iny
     38  271e
     39  271e		       4c 21 f7 	      jmp	pf48x1_X_loop_entry
     40  2721
     41  2721				  -	      if	>. != >[.+$2a]
     42  2721				  -	      align	256
     43  2721					      endif
     44  2721
     45  2721				   pf48x1_X_loop_entry
     46  2721				   pf48x1_X_loop
     47  2721		       88		      dey		;2
     48  2722		       84 f1		      sty	aux2	;3
     49  2724		       b1 96		      lda	(scorepointers+0),y	;5
     50  2726		       85 1b		      sta	GRP0	;3
     51  2728
     52  2728		       b1 98		      lda	(scorepointers+2),y	;5
     53  272a		       85 1c		      sta	GRP1	;3
     54  272c		       b1 9a		      lda	(scorepointers+4),y	;5
     55  272e		       85 1b		      sta	GRP0	;3
     56  2730
      0  2730					      sleep	2	; I could make this indirect, if we want to burn more rom
      1  2730				   .CYCLES    SET	2
      2  2730
      3  2730				  -	      IF	.CYCLES < 2
      4  2730				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  2730				  -	      ERR
      6  2730					      ENDIF
      7  2730
      8  2730				  -	      IF	.CYCLES & 1
      9  2730				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  2730				  -	      nop	0
     11  2730				  -	      ELSE
     12  2730				  -	      bit	VSYNC
     13  2730				  -	      ENDIF
     14  2730				  -.CYCLES    SET	.CYCLES - 3
     15  2730					      ENDIF
     16  2730
     17  2730					      REPEAT	.CYCLES / 2
     18  2730		       ea		      nop
     19  2731					      REPEND
     58  2731		       a5 f3		      lda	aux4	;3
     59  2733		       85 08		      sta	COLUPF	;3 this is a big fat waste...
     60  2735
     61  2735		       b3 a0		      lax	(scorepointers+10),y	;5
     62  2737		       b1 9e		      lda	(scorepointers+8),y	;5
     63  2739		       85 f7		      sta	stack2	;3
     64  273b		       b1 9c		      lda	(scorepointers+6),y	;5
     65  273d		       a4 f7		      ldy	stack2	;3
     66  273f
     67  273f		       85 1c		      sta	GRP1	;3
     68  2741		       84 1b		      sty	GRP0	;3
     69  2743		       86 1c		      stx	GRP1	;3
     70  2745		       84 1b		      sty	GRP0	;3
     71  2747
     72  2747		       a4 f1		      ldy	aux2	;3
     73  2749		       d0 d6		      bne	pf48x1_X_loop	;2/3
     74  274b
     75  274b				   pf48x1_X_codeend
     76  274b							;echo "critical code in 48x1 is ",(pf48x1_X_codeend-pf48x1_X_loop), " bytes long."
     77  274b
     78  274b		       a9 00		      lda	#0
     79  274d		       85 1b		      sta	GRP0
     80  274f		       85 1c		      sta	GRP1
     81  2751		       85 1b		      sta	GRP0
     82  2753		       85 1c		      sta	GRP1
     83  2755		       85 1f		      sta	ENABL
     84  2757		       85 1d		      sta	ENAM0
     85  2759		       85 25		      sta	VDELP0
     86  275b		       85 26		      sta	VDELP1
     87  275d		       85 0d		      sta	PF0
     88  275f		       85 0e		      sta	PF1
     89  2761		       85 0f		      sta	PF2
     90  2763
     91  2763		       a6 f6		      ldx	stack1	;restore the stack pointer
     92  2765		       9a		      txs
     93  2766		       60		      rts
------- FILE titlescreen/asm/titlescreen.asm
    140  2767					      endif		;mk_48x1_X_on
    141  2767
    142  2767					      ifconst	mk_48x2_X_on
------- FILE titlescreen/asm/48x2_X_kernel.asm LEVEL 3 PASS 3
      0  2767					      include	"titlescreen/asm/48x2_X_kernel.asm"
      1  2767				   draw_bmp_48x2_X
      2  2767
      3  2767		       a9 00		      lda	#0
      4  2769		       85 1b		      sta	GRP0
      5  276b		       85 1c		      sta	GRP1
      6  276d
      7  276d		       a9 03		      lda	#3
      8  276f		       85 04		      sta	NUSIZ0	;3=Player and Missile are drawn twice 32 clocks apart
      9  2771		       85 05		      sta	NUSIZ1	;3=Player and Missile are drawn twice 32 clocks apart
     10  2773
     11  2773		       ba		      tsx
     12  2774		       86 f6		      stx	stack1	;save the stack pointer
     13  2776
     14  2776		       20 78 f6 	      jsr	position48
     15  2779
     16  2779		       a9 03		      lda	#3	;2
     17  277b		       85 25		      sta	VDELP0	;3
     18  277d		       85 26		      sta	VDELP1	;3
     19  277f
     20  277f		       a9 01		      lda	#1	;2
     21  2781		       85 0a		      sta	CTRLPF	;3
     22  2783
     23  2783							;enough cycles have passed for the HMOV, so we can clear HMCLR
     24  2783		       85 2b		      sta	HMCLR
     25  2785		       85 02		      sta	WSYNC
     26  2787
     27  2787
     28  2787							;sleep (63)		;63
     29  2787		       e6 9c		      inc	temp1
     30  2789		       c6 9c		      dec	temp1
     31  278b		       e6 9c		      inc	temp1
     32  278d		       c6 9c		      dec	temp1
     33  278f		       e6 9c		      inc	temp1
     34  2791		       c6 9c		      dec	temp1
     35  2793		       e6 9c		      inc	temp1
     36  2795		       c6 9c		      dec	temp1
     37  2797		       e6 9c		      inc	temp1
     38  2799		       c6 9c		      dec	temp1
     39  279b		       e6 9c		      inc	temp1
     40  279d		       c6 9c		      dec	temp1
      0  279f					      sleep	3
      1  279f				   .CYCLES    SET	3
      2  279f
      3  279f				  -	      IF	.CYCLES < 2
      4  279f				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  279f				  -	      ERR
      6  279f					      ENDIF
      7  279f
      8  279f					      IF	.CYCLES & 1
      9  279f					      IFNCONST	NO_ILLEGAL_OPCODES
     10  279f		       04 00		      nop	0
     11  27a1				  -	      ELSE
     12  27a1				  -	      bit	VSYNC
     13  27a1					      ENDIF
     14  27a1				   .CYCLES    SET	.CYCLES - 3
     15  27a1					      ENDIF
     16  27a1
     17  27a1				  -	      REPEAT	.CYCLES / 2
     18  27a1				  -	      nop
     19  27a1					      REPEND
     42  27a1
     43  27a1		       a5 f3		      lda	aux4	;3
     44  27a3		       85 08		      sta	COLUPF	;3
     45  27a5
     46  27a5		       4c a8 f7 	      jmp	pf48x2_X_loop	;3
     47  27a8
     48  27a8				  -	      if	>. != >[.+$52]
     49  27a8				  -	      align	256
     50  27a8					      endif
     51  27a8
     52  27a8				   pf48x2_X_loop
     53  27a8
     54  27a8		       b1 96		      lda	(scorepointers+0),y	;5
     55  27aa		       85 1b		      sta	GRP0	;3
     56  27ac		       b1 98		      lda	(scorepointers+2),y	;5
     57  27ae		       85 1c		      sta	GRP1	;3
     58  27b0		       b1 9a		      lda	(scorepointers+4),y	;5
     59  27b2		       85 1b		      sta	GRP0	;3
     60  27b4
     61  27b4		       b3 a0		      lax	(scorepointers+10),y	;5
     62  27b6		       b1 9e		      lda	(scorepointers+8),y	;5
     63  27b8		       85 f7		      sta	stack2	;3
     64  27ba		       b1 9c		      lda	(scorepointers+6),y	;5
     65  27bc		       a4 f7		      ldy	stack2	;3
     66  27be
     67  27be		       85 1c		      sta	GRP1	;3
     68  27c0		       84 1b		      sty	GRP0	;3
     69  27c2		       86 1c		      stx	GRP1	;3
     70  27c4		       84 1b		      sty	GRP0	;3
     71  27c6
     72  27c6		       a4 f1		      ldy	aux2	;3
     73  27c8
     74  27c8		       b1 f4		      lda	(aux5),y	;5
     75  27ca		       85 91		      sta	missile0y	;3
     76  27cc
      0  27cc					      sleep	3
      1  27cc				   .CYCLES    SET	3
      2  27cc
      3  27cc				  -	      IF	.CYCLES < 2
      4  27cc				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  27cc				  -	      ERR
      6  27cc					      ENDIF
      7  27cc
      8  27cc					      IF	.CYCLES & 1
      9  27cc					      IFNCONST	NO_ILLEGAL_OPCODES
     10  27cc		       04 00		      nop	0
     11  27ce				  -	      ELSE
     12  27ce				  -	      bit	VSYNC
     13  27ce					      ENDIF
     14  27ce				   .CYCLES    SET	.CYCLES - 3
     15  27ce					      ENDIF
     16  27ce
     17  27ce				  -	      REPEAT	.CYCLES / 2
     18  27ce				  -	      nop
     19  27ce					      REPEND
     78  27ce
     79  27ce		       c6 f1		      dec	aux2	;5
     80  27d0
     81  27d0
     82  27d0		       b1 96		      lda	(scorepointers+0),y	;5
     83  27d2		       85 1b		      sta	GRP0	;3
     84  27d4		       b1 98		      lda	(scorepointers+2),y	;5
     85  27d6		       85 1c		      sta	GRP1	;3
     86  27d8		       b1 9a		      lda	(scorepointers+4),y	;5
     87  27da		       85 1b		      sta	GRP0	;3
     88  27dc
     89  27dc		       b3 a0		      lax	(scorepointers+10),y	;5
     90  27de		       b1 9e		      lda	(scorepointers+8),y	;5
     91  27e0		       85 f7		      sta	stack2	;3
     92  27e2		       b1 9c		      lda	(scorepointers+6),y	;5
     93  27e4		       a4 f7		      ldy	stack2	;3
     94  27e6
     95  27e6		       85 1c		      sta	GRP1	;3
     96  27e8		       84 1b		      sty	GRP0	;3
     97  27ea		       86 1c		      stx	GRP1	;3
     98  27ec		       84 1b		      sty	GRP0	;3
     99  27ee
      0  27ee					      sleep	4
      1  27ee				   .CYCLES    SET	4
      2  27ee
      3  27ee				  -	      IF	.CYCLES < 2
      4  27ee				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  27ee				  -	      ERR
      6  27ee					      ENDIF
      7  27ee
      8  27ee				  -	      IF	.CYCLES & 1
      9  27ee				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  27ee				  -	      nop	0
     11  27ee				  -	      ELSE
     12  27ee				  -	      bit	VSYNC
     13  27ee				  -	      ENDIF
     14  27ee				  -.CYCLES    SET	.CYCLES - 3
     15  27ee					      ENDIF
     16  27ee
     17  27ee					      REPEAT	.CYCLES / 2
     18  27ee		       ea		      nop
     17  27ee					      REPEND
     18  27ef		       ea		      nop
     19  27f0					      REPEND
    101  27f0
    102  27f0		       a5 91		      lda	missile0y
    103  27f2		       85 07		      sta	COLUP1
    104  27f4		       85 06		      sta	COLUP0
    105  27f6
    106  27f6		       a4 f1		      ldy	aux2	;3
    107  27f8		       10 ae		      bpl	pf48x2_X_loop	;2/3
    108  27fa
    109  27fa
    110  27fa				   pf48x2_X_codeend
    111  27fa							;echo "critical code in 48x2 is ",(pf48x2_X_codeend-pf48x2_X_loop), " bytes long."
    112  27fa
    113  27fa		       a9 00		      lda	#0
    114  27fc		       85 1b		      sta	GRP0
    115  27fe		       85 1c		      sta	GRP1
    116  2800		       85 1b		      sta	GRP0
    117  2802		       85 1c		      sta	GRP1
    118  2804		       85 25		      sta	VDELP0
    119  2806		       85 26		      sta	VDELP1
    120  2808		       85 0d		      sta	PF0
    121  280a		       85 0e		      sta	PF1
    122  280c		       85 0f		      sta	PF2
    123  280e
    124  280e		       a6 f6		      ldx	stack1	;restore the stack pointer
    125  2810		       9a		      txs
    126  2811		       60		      rts
------- FILE titlescreen/asm/titlescreen.asm
    144  2812					      endif		;mk_48x2_X_on
    145  2812
    146  2812
    147  2812					      ifconst	mk_96x2_1_on
------- FILE titlescreen/asm/96x2_1_kernel.asm LEVEL 3 PASS 3
      0  2812					      include	"titlescreen/asm/96x2_1_kernel.asm"
      1  2812				   draw_bmp_96x2_1
      2  2812
      3  2812				  -	      ifconst	bmp_96x2_1_index
      4  2812				  -	      lda	#(bmp_96x2_1_height-1)
      5  2812				  -	      sec
      6  2812				  -	      sbc	bmp_96x2_1_index
      7  2812				  -	      tay
      8  2812				  -	      sbc	#bmp_96x2_1_window
      9  2812				  -	      sta	temp1
     10  2812					      else
     11  2812		       a0 3b		      ldy	#(bmp_96x2_1_window-1)
     12  2814		       a9 ff		      lda	#255
     13  2816		       85 9c		      sta	temp1
     14  2818					      endif
     15  2818
     16  2818		       a9 03		      lda	#3
     17  281a		       85 04		      sta	NUSIZ0	;3=Player and Missile are drawn twice 32 clocks apart
     18  281c		       85 05		      sta	NUSIZ1	;3=Player and Missile are drawn twice 32 clocks apart
     19  281e		       a9 00		      lda	#0
     20  2820
     21  2820		       b9 0d fb 	      lda	bmp_96x2_1_colors,y	;4
     22  2823				  -	      ifconst	bmp_96x2_1_fade
     23  2823				  -	      and	bmp_96x2_1_fade
     24  2823					      endif
     25  2823		       85 06		      sta	COLUP0	;3
     26  2825		       85 07		      sta	COLUP1	;3
     27  2827		       85 2b		      sta	HMCLR	;3
     28  2829
     29  2829		       a5 82		      lda	titleframe
     30  282b		       29 01		      and	#1
     31  282d		       f0 03		      beq	jmp_pf96x2_1_frame0
     32  282f		       4c d9 f8 	      jmp	pf96x2_1_frame1
     33  2832				   jmp_pf96x2_1_frame0
     34  2832		       4c 35 f8 	      jmp	pf96x2_1_frame0
     35  2835
     36  2835				   pf96x2_1_frame0
     37  2835							;postion P0 and P1
     38  2835		       85 02		      sta	WSYNC
     39  2837		       a9 e0		      lda	#%11100000
     40  2839		       85 20		      sta	HMP0
     41  283b		       a9 10		      lda	#%00010000
     42  283d		       85 21		      sta	HMP1
     43  283f		       85 02		      sta	WSYNC
      0  2841					      sleep	28
      1  2841				   .CYCLES    SET	28
      2  2841
      3  2841				  -	      IF	.CYCLES < 2
      4  2841				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  2841				  -	      ERR
      6  2841					      ENDIF
      7  2841
      8  2841				  -	      IF	.CYCLES & 1
      9  2841				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  2841				  -	      nop	0
     11  2841				  -	      ELSE
     12  2841				  -	      bit	VSYNC
     13  2841				  -	      ENDIF
     14  2841				  -.CYCLES    SET	.CYCLES - 3
     15  2841					      ENDIF
     16  2841
     17  2841					      REPEAT	.CYCLES / 2
     18  2841		       ea		      nop
     17  2841					      REPEND
     18  2842		       ea		      nop
     17  2842					      REPEND
     18  2843		       ea		      nop
     17  2843					      REPEND
     18  2844		       ea		      nop
     17  2844					      REPEND
     18  2845		       ea		      nop
     17  2845					      REPEND
     18  2846		       ea		      nop
     17  2846					      REPEND
     18  2847		       ea		      nop
     17  2847					      REPEND
     18  2848		       ea		      nop
     17  2848					      REPEND
     18  2849		       ea		      nop
     17  2849					      REPEND
     18  284a		       ea		      nop
     17  284a					      REPEND
     18  284b		       ea		      nop
     17  284b					      REPEND
     18  284c		       ea		      nop
     17  284c					      REPEND
     18  284d		       ea		      nop
     17  284d					      REPEND
     18  284e		       ea		      nop
     19  284f					      REPEND
     45  284f		       85 10		      sta	RESP0
      0  2851					      sleep	14
      1  2851				   .CYCLES    SET	14
      2  2851
      3  2851				  -	      IF	.CYCLES < 2
      4  2851				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  2851				  -	      ERR
      6  2851					      ENDIF
      7  2851
      8  2851				  -	      IF	.CYCLES & 1
      9  2851				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  2851				  -	      nop	0
     11  2851				  -	      ELSE
     12  2851				  -	      bit	VSYNC
     13  2851				  -	      ENDIF
     14  2851				  -.CYCLES    SET	.CYCLES - 3
     15  2851					      ENDIF
     16  2851
     17  2851					      REPEAT	.CYCLES / 2
     18  2851		       ea		      nop
     17  2851					      REPEND
     18  2852		       ea		      nop
     17  2852					      REPEND
     18  2853		       ea		      nop
     17  2853					      REPEND
     18  2854		       ea		      nop
     17  2854					      REPEND
     18  2855		       ea		      nop
     17  2855					      REPEND
     18  2856		       ea		      nop
     17  2856					      REPEND
     18  2857		       ea		      nop
     19  2858					      REPEND
     47  2858		       85 11		      sta	RESP1
     48  285a		       85 02		      sta	WSYNC
     49  285c		       85 2a		      sta	HMOVE
     50  285e
     51  285e		       85 02		      sta	WSYNC
     52  2860		       85 2b		      sta	HMCLR
     53  2862		       85 02		      sta	WSYNC
     54  2864
      0  2864					      sleep	4
      1  2864				   .CYCLES    SET	4
      2  2864
      3  2864				  -	      IF	.CYCLES < 2
      4  2864				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  2864				  -	      ERR
      6  2864					      ENDIF
      7  2864
      8  2864				  -	      IF	.CYCLES & 1
      9  2864				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  2864				  -	      nop	0
     11  2864				  -	      ELSE
     12  2864				  -	      bit	VSYNC
     13  2864				  -	      ENDIF
     14  2864				  -.CYCLES    SET	.CYCLES - 3
     15  2864					      ENDIF
     16  2864
     17  2864					      REPEAT	.CYCLES / 2
     18  2864		       ea		      nop
     17  2864					      REPEND
     18  2865		       ea		      nop
     19  2866					      REPEND
     56  2866		       4c 69 f8 	      jmp	pfline_96x2_1_frame0
     57  2869							;align so our branch doesn't unexpectedly cross a page...
     58  2869				  -	      if	>. != >[.+$70]
     59  2869				  -	      align	256
     60  2869					      endif
     61  2869
     62  2869				   pfline_96x2_1_frame0
     63  2869		       a9 80		      lda	#$80	;2
     64  286b		       85 20		      sta	HMP0	;3
     65  286d		       85 21		      sta	HMP1	;3
     66  286f
     67  286f		       b9 b4 fc 	      lda	bmp_96x2_1_06,y	;4
     68  2872		       85 1c		      sta	GRP1	;3
     69  2874
     70  2874		       b9 49 fb 	      lda	bmp_96x2_1_00,y
     71  2877		       85 1b		      sta	GRP0
     72  2879		       b9 c1 fb 	      lda	bmp_96x2_1_02,y
     73  287c		       85 1b		      sta	GRP0
     74  287e		       b9 3c fc 	      lda	bmp_96x2_1_04,y
     75  2881		       85 1b		      sta	GRP0
     76  2883
      0  2883					      sleep	2
      1  2883				   .CYCLES    SET	2
      2  2883
      3  2883				  -	      IF	.CYCLES < 2
      4  2883				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  2883				  -	      ERR
      6  2883					      ENDIF
      7  2883
      8  2883				  -	      IF	.CYCLES & 1
      9  2883				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  2883				  -	      nop	0
     11  2883				  -	      ELSE
     12  2883				  -	      bit	VSYNC
     13  2883				  -	      ENDIF
     14  2883				  -.CYCLES    SET	.CYCLES - 3
     15  2883					      ENDIF
     16  2883
     17  2883					      REPEAT	.CYCLES / 2
     18  2883		       ea		      nop
     19  2884					      REPEND
     78  2884
     79  2884		       b9 3c fd 	      lda	bmp_96x2_1_08,y
     80  2887		       85 1c		      sta	GRP1
     81  2889		       b9 b4 fd 	      lda	bmp_96x2_1_10,y
     82  288c		       85 1c		      sta	GRP1
     83  288e
     84  288e		       b9 85 fb 	      lda	bmp_96x2_1_01,y
     85  2891		       85 1b		      sta	GRP0
     86  2893
      0  2893					      sleep	8
      1  2893				   .CYCLES    SET	8
      2  2893
      3  2893				  -	      IF	.CYCLES < 2
      4  2893				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  2893				  -	      ERR
      6  2893					      ENDIF
      7  2893
      8  2893				  -	      IF	.CYCLES & 1
      9  2893				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  2893				  -	      nop	0
     11  2893				  -	      ELSE
     12  2893				  -	      bit	VSYNC
     13  2893				  -	      ENDIF
     14  2893				  -.CYCLES    SET	.CYCLES - 3
     15  2893					      ENDIF
     16  2893
     17  2893					      REPEAT	.CYCLES / 2
     18  2893		       ea		      nop
     17  2893					      REPEND
     18  2894		       ea		      nop
     17  2894					      REPEND
     18  2895		       ea		      nop
     17  2895					      REPEND
     18  2896		       ea		      nop
     19  2897					      REPEND
     88  2897
     89  2897							;sta WSYNC	;=0
     90  2897		       85 2a		      sta	HMOVE	;3 - NORMAL HMOVE
     91  2899
     92  2899		       b9 0c fb 	      lda	bmp_96x2_1_colors-1,y	;4 - get the title color early and store it for later
     93  289c				  -	      ifconst	bmp_96x2_1_fade
     94  289c				  -	      and	bmp_96x2_1_fade
     95  289c					      else
      0  289c					      sleep	3
      1  289c				   .CYCLES    SET	3
      2  289c
      3  289c				  -	      IF	.CYCLES < 2
      4  289c				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  289c				  -	      ERR
      6  289c					      ENDIF
      7  289c
      8  289c					      IF	.CYCLES & 1
      9  289c					      IFNCONST	NO_ILLEGAL_OPCODES
     10  289c		       04 00		      nop	0
     11  289e				  -	      ELSE
     12  289e				  -	      bit	VSYNC
     13  289e					      ENDIF
     14  289e				   .CYCLES    SET	.CYCLES - 3
     15  289e					      ENDIF
     16  289e
     17  289e				  -	      REPEAT	.CYCLES / 2
     18  289e				  -	      nop
     19  289e					      REPEND
     97  289e					      endif
     98  289e		       aa		      tax
     99  289f
    100  289f		       a9 00		      lda	#0	;2
    101  28a1		       85 20		      sta	HMP0	;3
    102  28a3		       85 21		      sta	HMP1	;3
    103  28a5
      0  28a5					      sleep	7
      1  28a5				   .CYCLES    SET	7
      2  28a5
      3  28a5				  -	      IF	.CYCLES < 2
      4  28a5				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  28a5				  -	      ERR
      6  28a5					      ENDIF
      7  28a5
      8  28a5					      IF	.CYCLES & 1
      9  28a5					      IFNCONST	NO_ILLEGAL_OPCODES
     10  28a5		       04 00		      nop	0
     11  28a7				  -	      ELSE
     12  28a7				  -	      bit	VSYNC
     13  28a7					      ENDIF
     14  28a7				   .CYCLES    SET	.CYCLES - 3
     15  28a7					      ENDIF
     16  28a7
     17  28a7					      REPEAT	.CYCLES / 2
     18  28a7		       ea		      nop
     17  28a7					      REPEND
     18  28a8		       ea		      nop
     19  28a9					      REPEND
    105  28a9
    106  28a9		       b9 00 fd 	      lda	bmp_96x2_1_07,y
    107  28ac		       85 1c		      sta	GRP1
    108  28ae
    109  28ae		       b9 00 fc 	      lda	bmp_96x2_1_03,y	;5
    110  28b1		       85 1b		      sta	GRP0	;3 =  8
    111  28b3		       b9 78 fc 	      lda	bmp_96x2_1_05,y	;5
    112  28b6		       85 1b		      sta	GRP0	;3 =  8
    113  28b8
      0  28b8					      sleep	2
      1  28b8				   .CYCLES    SET	2
      2  28b8
      3  28b8				  -	      IF	.CYCLES < 2
      4  28b8				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  28b8				  -	      ERR
      6  28b8					      ENDIF
      7  28b8
      8  28b8				  -	      IF	.CYCLES & 1
      9  28b8				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  28b8				  -	      nop	0
     11  28b8				  -	      ELSE
     12  28b8				  -	      bit	VSYNC
     13  28b8				  -	      ENDIF
     14  28b8				  -.CYCLES    SET	.CYCLES - 3
     15  28b8					      ENDIF
     16  28b8
     17  28b8					      REPEAT	.CYCLES / 2
     18  28b8		       ea		      nop
     19  28b9					      REPEND
    115  28b9
    116  28b9		       b9 78 fd 	      lda	bmp_96x2_1_09,y	;5
    117  28bc		       85 1c		      sta	GRP1	;3 =  8
    118  28be		       b9 00 fe 	      lda	bmp_96x2_1_11,y	;5
    119  28c1		       85 1c		      sta	GRP1	;3 =  8
    120  28c3
      0  28c3					      sleep	2
      1  28c3				   .CYCLES    SET	2
      2  28c3
      3  28c3				  -	      IF	.CYCLES < 2
      4  28c3				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  28c3				  -	      ERR
      6  28c3					      ENDIF
      7  28c3
      8  28c3				  -	      IF	.CYCLES & 1
      9  28c3				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  28c3				  -	      nop	0
     11  28c3				  -	      ELSE
     12  28c3				  -	      bit	VSYNC
     13  28c3				  -	      ENDIF
     14  28c3				  -.CYCLES    SET	.CYCLES - 3
     15  28c3					      ENDIF
     16  28c3
     17  28c3					      REPEAT	.CYCLES / 2
     18  28c3		       ea		      nop
     19  28c4					      REPEND
    122  28c4		       86 07		      stx	COLUP1
    123  28c6		       86 06		      stx	COLUP0
    124  28c8
    125  28c8		       85 2a		      sta	HMOVE	;3 - CYCLE 74 HMOVE
      0  28ca					      sleep	2
      1  28ca				   .CYCLES    SET	2
      2  28ca
      3  28ca				  -	      IF	.CYCLES < 2
      4  28ca				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  28ca				  -	      ERR
      6  28ca					      ENDIF
      7  28ca
      8  28ca				  -	      IF	.CYCLES & 1
      9  28ca				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  28ca				  -	      nop	0
     11  28ca				  -	      ELSE
     12  28ca				  -	      bit	VSYNC
     13  28ca				  -	      ENDIF
     14  28ca				  -.CYCLES    SET	.CYCLES - 3
     15  28ca					      ENDIF
     16  28ca
     17  28ca					      REPEAT	.CYCLES / 2
     18  28ca		       ea		      nop
     19  28cb					      REPEND
    127  28cb		       88		      dey
    128  28cc
    129  28cc		       c4 9c		      cpy	temp1	;3
    130  28ce		       d0 99		      bne	pfline_96x2_1_frame0	;2/3
    131  28d0
    132  28d0				   pf96x2_1_0codeend
    133  28d0							;echo "critical code #1 in 96x2_1 is ",(pf96x2_1_0codeend-pfline_96x2_1_frame0), " bytes long."
    134  28d0
    135  28d0		       a9 00		      lda	#0
    136  28d2		       85 1b		      sta	GRP0
    137  28d4		       85 1c		      sta	GRP1
    138  28d6		       4c 7e f9 	      jmp	pfdone_96x2_1
    139  28d9
    140  28d9
    141  28d9				   pf96x2_1_frame1
    142  28d9
    143  28d9							;postion P0 and P1
    144  28d9		       85 02		      sta	WSYNC
    145  28db		       a9 20		      lda	#%00100000
    146  28dd		       85 20		      sta	HMP0
    147  28df		       a9 00		      lda	#0
    148  28e1		       a9 f0		      lda	#%11110000
    149  28e3		       85 21		      sta	HMP1
    150  28e5		       85 02		      sta	WSYNC
      0  28e7					      sleep	32
      1  28e7				   .CYCLES    SET	32
      2  28e7
      3  28e7				  -	      IF	.CYCLES < 2
      4  28e7				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  28e7				  -	      ERR
      6  28e7					      ENDIF
      7  28e7
      8  28e7				  -	      IF	.CYCLES & 1
      9  28e7				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  28e7				  -	      nop	0
     11  28e7				  -	      ELSE
     12  28e7				  -	      bit	VSYNC
     13  28e7				  -	      ENDIF
     14  28e7				  -.CYCLES    SET	.CYCLES - 3
     15  28e7					      ENDIF
     16  28e7
     17  28e7					      REPEAT	.CYCLES / 2
     18  28e7		       ea		      nop
     17  28e7					      REPEND
     18  28e8		       ea		      nop
     17  28e8					      REPEND
     18  28e9		       ea		      nop
     17  28e9					      REPEND
     18  28ea		       ea		      nop
     17  28ea					      REPEND
     18  28eb		       ea		      nop
     17  28eb					      REPEND
     18  28ec		       ea		      nop
     17  28ec					      REPEND
     18  28ed		       ea		      nop
     17  28ed					      REPEND
     18  28ee		       ea		      nop
     17  28ee					      REPEND
     18  28ef		       ea		      nop
     17  28ef					      REPEND
     18  28f0		       ea		      nop
     17  28f0					      REPEND
     18  28f1		       ea		      nop
     17  28f1					      REPEND
     18  28f2		       ea		      nop
     17  28f2					      REPEND
     18  28f3		       ea		      nop
     17  28f3					      REPEND
     18  28f4		       ea		      nop
     17  28f4					      REPEND
     18  28f5		       ea		      nop
     17  28f5					      REPEND
     18  28f6		       ea		      nop
     19  28f7					      REPEND
    152  28f7		       85 10		      sta	RESP0
      0  28f9					      sleep	12
      1  28f9				   .CYCLES    SET	12
      2  28f9
      3  28f9				  -	      IF	.CYCLES < 2
      4  28f9				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  28f9				  -	      ERR
      6  28f9					      ENDIF
      7  28f9
      8  28f9				  -	      IF	.CYCLES & 1
      9  28f9				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  28f9				  -	      nop	0
     11  28f9				  -	      ELSE
     12  28f9				  -	      bit	VSYNC
     13  28f9				  -	      ENDIF
     14  28f9				  -.CYCLES    SET	.CYCLES - 3
     15  28f9					      ENDIF
     16  28f9
     17  28f9					      REPEAT	.CYCLES / 2
     18  28f9		       ea		      nop
     17  28f9					      REPEND
     18  28fa		       ea		      nop
     17  28fa					      REPEND
     18  28fb		       ea		      nop
     17  28fb					      REPEND
     18  28fc		       ea		      nop
     17  28fc					      REPEND
     18  28fd		       ea		      nop
     17  28fd					      REPEND
     18  28fe		       ea		      nop
     19  28ff					      REPEND
    154  28ff		       85 11		      sta	RESP1
    155  2901		       85 02		      sta	WSYNC
    156  2903		       85 2a		      sta	HMOVE
    157  2905
    158  2905		       85 02		      sta	WSYNC
    159  2907		       85 2b		      sta	HMCLR
    160  2909
    161  2909
    162  2909
    163  2909		       85 02		      sta	WSYNC
      0  290b					      sleep	3
      1  290b				   .CYCLES    SET	3
      2  290b
      3  290b				  -	      IF	.CYCLES < 2
      4  290b				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  290b				  -	      ERR
      6  290b					      ENDIF
      7  290b
      8  290b					      IF	.CYCLES & 1
      9  290b					      IFNCONST	NO_ILLEGAL_OPCODES
     10  290b		       04 00		      nop	0
     11  290d				  -	      ELSE
     12  290d				  -	      bit	VSYNC
     13  290d					      ENDIF
     14  290d				   .CYCLES    SET	.CYCLES - 3
     15  290d					      ENDIF
     16  290d
     17  290d				  -	      REPEAT	.CYCLES / 2
     18  290d				  -	      nop
     19  290d					      REPEND
    165  290d		       4c 10 f9 	      jmp	pfline_96x2_1_frame1
    166  2910
    167  2910							;align so our branch doesn't unexpectedly cross a page...
    168  2910				  -	      if	>. != >[.+$70]
    169  2910				  -	      align	256
    170  2910					      endif
    171  2910
    172  2910				   pfline_96x2_1_frame1
    173  2910
    174  2910		       85 2a		      sta	HMOVE
    175  2912
    176  2912		       b9 00 fd 	      lda	bmp_96x2_1_07,y	;4
    177  2915		       85 1c		      sta	GRP1	;3
    178  2917
    179  2917		       a9 00		      lda	#$0	;2
    180  2919		       85 20		      sta	HMP0	;3
    181  291b		       85 21		      sta	HMP1	;3
    182  291d
    183  291d		       b9 85 fb 	      lda	bmp_96x2_1_01,y
    184  2920		       8d 1b 00 	      sta.w	GRP0
    185  2923		       b9 00 fc 	      lda	bmp_96x2_1_03,y
    186  2926		       85 1b		      sta	GRP0
    187  2928		       b9 78 fc 	      lda	bmp_96x2_1_05,y
    188  292b		       85 1b		      sta	GRP0
    189  292d
      0  292d					      sleep	2
      1  292d				   .CYCLES    SET	2
      2  292d
      3  292d				  -	      IF	.CYCLES < 2
      4  292d				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  292d				  -	      ERR
      6  292d					      ENDIF
      7  292d
      8  292d				  -	      IF	.CYCLES & 1
      9  292d				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  292d				  -	      nop	0
     11  292d				  -	      ELSE
     12  292d				  -	      bit	VSYNC
     13  292d				  -	      ENDIF
     14  292d				  -.CYCLES    SET	.CYCLES - 3
     15  292d					      ENDIF
     16  292d
     17  292d					      REPEAT	.CYCLES / 2
     18  292d		       ea		      nop
     19  292e					      REPEND
    191  292e
    192  292e		       b9 78 fd 	      lda	bmp_96x2_1_09,y
    193  2931		       85 1c		      sta	GRP1
    194  2933		       b9 00 fe 	      lda	bmp_96x2_1_11,y
    195  2936		       85 1c		      sta	GRP1
    196  2938
    197  2938		       b9 49 fb 	      lda	bmp_96x2_1_00,y
    198  293b		       85 1b		      sta	GRP0
    199  293d
    200  293d		       8d 2a 00 	      sta.w	HMOVE	;3 - cycle 74
    201  2940
    202  2940							;sta WSYNC	;=0 -----------------------------------------
    203  2940
    204  2940		       b9 b4 fc 	      lda	bmp_96x2_1_06,y
    205  2943		       85 1c		      sta	GRP1
    206  2945
      0  2945					      sleep	8
      1  2945				   .CYCLES    SET	8
      2  2945
      3  2945				  -	      IF	.CYCLES < 2
      4  2945				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  2945				  -	      ERR
      6  2945					      ENDIF
      7  2945
      8  2945				  -	      IF	.CYCLES & 1
      9  2945				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  2945				  -	      nop	0
     11  2945				  -	      ELSE
     12  2945				  -	      bit	VSYNC
     13  2945				  -	      ENDIF
     14  2945				  -.CYCLES    SET	.CYCLES - 3
     15  2945					      ENDIF
     16  2945
     17  2945					      REPEAT	.CYCLES / 2
     18  2945		       ea		      nop
     17  2945					      REPEND
     18  2946		       ea		      nop
     17  2946					      REPEND
     18  2947		       ea		      nop
     17  2947					      REPEND
     18  2948		       ea		      nop
     19  2949					      REPEND
    208  2949
    209  2949		       b9 0c fb 	      lda	bmp_96x2_1_colors-1,y	;get the title color early and store it for later
    210  294c		       aa		      tax		;2
    211  294d
      0  294d					      sleep	3
      1  294d				   .CYCLES    SET	3
      2  294d
      3  294d				  -	      IF	.CYCLES < 2
      4  294d				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  294d				  -	      ERR
      6  294d					      ENDIF
      7  294d
      8  294d					      IF	.CYCLES & 1
      9  294d					      IFNCONST	NO_ILLEGAL_OPCODES
     10  294d		       04 00		      nop	0
     11  294f				  -	      ELSE
     12  294f				  -	      bit	VSYNC
     13  294f					      ENDIF
     14  294f				   .CYCLES    SET	.CYCLES - 3
     15  294f					      ENDIF
     16  294f
     17  294f				  -	      REPEAT	.CYCLES / 2
     18  294f				  -	      nop
     19  294f					      REPEND
    213  294f
    214  294f		       a9 80		      lda	#$80	;2
    215  2951		       85 20		      sta	HMP0	;3
    216  2953		       85 21		      sta	HMP1	;3
    217  2955
    218  2955
    219  2955		       b9 c1 fb 	      lda	bmp_96x2_1_02,y	;5
    220  2958		       85 1b		      sta	GRP0	;3 =  8
    221  295a
    222  295a		       b9 3c fc 	      lda	bmp_96x2_1_04,y	;5
    223  295d		       85 1b		      sta	GRP0	;3 =  8
    224  295f
      0  295f					      sleep	2
      1  295f				   .CYCLES    SET	2
      2  295f
      3  295f				  -	      IF	.CYCLES < 2
      4  295f				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  295f				  -	      ERR
      6  295f					      ENDIF
      7  295f
      8  295f				  -	      IF	.CYCLES & 1
      9  295f				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  295f				  -	      nop	0
     11  295f				  -	      ELSE
     12  295f				  -	      bit	VSYNC
     13  295f				  -	      ENDIF
     14  295f				  -.CYCLES    SET	.CYCLES - 3
     15  295f					      ENDIF
     16  295f
     17  295f					      REPEAT	.CYCLES / 2
     18  295f		       ea		      nop
     19  2960					      REPEND
    226  2960
    227  2960		       b9 3c fd 	      lda	bmp_96x2_1_08,y	;5
    228  2963		       85 1c		      sta	GRP1	;3 =  8
    229  2965
    230  2965		       b9 b4 fd 	      lda	bmp_96x2_1_10,y	;5
    231  2968		       85 1c		      sta	GRP1	;3 =  8
    232  296a
      0  296a					      sleep	4
      1  296a				   .CYCLES    SET	4
      2  296a
      3  296a				  -	      IF	.CYCLES < 2
      4  296a				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  296a				  -	      ERR
      6  296a					      ENDIF
      7  296a
      8  296a				  -	      IF	.CYCLES & 1
      9  296a				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  296a				  -	      nop	0
     11  296a				  -	      ELSE
     12  296a				  -	      bit	VSYNC
     13  296a				  -	      ENDIF
     14  296a				  -.CYCLES    SET	.CYCLES - 3
     15  296a					      ENDIF
     16  296a
     17  296a					      REPEAT	.CYCLES / 2
     18  296a		       ea		      nop
     17  296a					      REPEND
     18  296b		       ea		      nop
     19  296c					      REPEND
    234  296c
    235  296c		       88		      dey
    236  296d
    237  296d		       8a		      txa
    238  296e				  -	      ifconst	bmp_96x2_1_fade
    239  296e				  -	      and	bmp_96x2_1_fade
    240  296e					      else
      0  296e					      sleep	3
      1  296e				   .CYCLES    SET	3
      2  296e
      3  296e				  -	      IF	.CYCLES < 2
      4  296e				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  296e				  -	      ERR
      6  296e					      ENDIF
      7  296e
      8  296e					      IF	.CYCLES & 1
      9  296e					      IFNCONST	NO_ILLEGAL_OPCODES
     10  296e		       04 00		      nop	0
     11  2970				  -	      ELSE
     12  2970				  -	      bit	VSYNC
     13  2970					      ENDIF
     14  2970				   .CYCLES    SET	.CYCLES - 3
     15  2970					      ENDIF
     16  2970
     17  2970				  -	      REPEAT	.CYCLES / 2
     18  2970				  -	      nop
     19  2970					      REPEND
    242  2970					      endif
    243  2970		       85 07		      sta	COLUP1	;3
    244  2972		       85 06		      sta	COLUP0	;3
    245  2974
    246  2974		       c4 9c		      cpy	temp1	;2
    247  2976		       d0 98		      bne	pfline_96x2_1_frame1	;2/3
    248  2978
    249  2978				   pf96x2_1_1codeend
    250  2978							;echo "critical code #2 in 96x2_1 is ",(pf96x2_1_1codeend-pfline_96x2_1_frame1), " bytes long."
    251  2978
    252  2978		       a9 00		      lda	#0
    253  297a		       85 1b		      sta	GRP0
    254  297c		       85 1c		      sta	GRP1
    255  297e
    256  297e				   pfdone_96x2_1
    257  297e		       85 02		      sta	WSYNC	; debug
    258  2980
    259  2980		       60		      rts
------- FILE titlescreen/asm/titlescreen.asm
    149  2981					      endif		;mk_96x2_1_on
    150  2981
    151  2981				  -	      ifconst	mk_96x2_2_on
    152  2981				  -	      include	"titlescreen/asm/96x2_2_kernel.asm"
    153  2981					      endif		;mk_96x2_2_on
    154  2981
    155  2981				  -	      ifconst	mk_96x2_3_on
    156  2981				  -	      include	"titlescreen/asm/96x2_3_kernel.asm"
    157  2981					      endif		;mk_96x2_3_on
    158  2981
    159  2981				  -	      ifconst	mk_96x2_4_on
    160  2981				  -	      include	"titlescreen/asm/96x2_4_kernel.asm"
    161  2981					      endif		;mk_96x2_4_on
    162  2981
    163  2981				  -	      ifconst	mk_96x2_5_on
    164  2981				  -	      include	"titlescreen/asm/96x2_5_kernel.asm"
    165  2981					      endif		;mk_96x2_5_on
    166  2981
    167  2981				  -	      ifconst	mk_96x2_6_on
    168  2981				  -	      include	"titlescreen/asm/96x2_6_kernel.asm"
    169  2981					      endif		;mk_96x2_6_on
    170  2981
    171  2981				  -	      ifconst	mk_96x2_7_on
    172  2981				  -	      include	"titlescreen/asm/96x2_7_kernel.asm"
    173  2981					      endif		;mk_96x2_7_on
    174  2981
    175  2981				  -	      ifconst	mk_96x2_8_on
    176  2981				  -	      include	"titlescreen/asm/96x2_8_kernel.asm"
    177  2981					      endif		;mk_96x2_8_on
    178  2981
    179  2981					      ifconst	mk_score_on
------- FILE titlescreen/asm/score_kernel.asm LEVEL 3 PASS 3
      0  2981					      include	"titlescreen/asm/score_kernel.asm"
      1  2981							; The batari Basic score kernel
      2  2981							; This minikernel is not under the same license as the rest of the
      3  2981							; titlescreen code. Refer to the bB license before you use this in
      4  2981							; a non-bB program.
      5  2981
      6  2981				   draw_score_display
      7  2981
      8  2981		       a7 93		      lax	score+0
      9  2983		       20 43 fa 	      jsr	miniscorepointerset
     10  2986		       84 9e		      sty	scorepointers+8
     11  2988		       86 96		      stx	scorepointers+0
     12  298a		       a7 94		      lax	score+1
     13  298c		       20 43 fa 	      jsr	miniscorepointerset
     14  298f		       84 9a		      sty	scorepointers+4
     15  2991		       86 9c		      stx	scorepointers+6
     16  2993		       a7 95		      lax	score+2
     17  2995		       20 43 fa 	      jsr	miniscorepointerset
     18  2998		       84 a0		      sty	scorepointers+10
     19  299a		       86 98		      stx	scorepointers+2
     20  299c
     21  299c		       85 2b		      sta	HMCLR
     22  299e		       ba		      tsx
     23  299f		       86 f6		      stx	stack1
     24  29a1							;ldx #$20
     25  29a1		       a2 60		      ldx	#$60
     26  29a3		       86 20		      stx	HMP0
     27  29a5
     28  29a5		       a2 00		      ldx	#0
     29  29a7		       85 02		      sta	WSYNC	;   0
     30  29a9		       86 1b		      STx	GRP0	; 3 3
     31  29ab		       86 1c		      STx	GRP1	; 3 6 seems to be needed because of vdel
     32  29ad
      0  29ad					      sleep	7	; 7 13
      1  29ad				   .CYCLES    SET	7
      2  29ad
      3  29ad				  -	      IF	.CYCLES < 2
      4  29ad				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  29ad				  -	      ERR
      6  29ad					      ENDIF
      7  29ad
      8  29ad					      IF	.CYCLES & 1
      9  29ad					      IFNCONST	NO_ILLEGAL_OPCODES
     10  29ad		       04 00		      nop	0
     11  29af				  -	      ELSE
     12  29af				  -	      bit	VSYNC
     13  29af					      ENDIF
     14  29af				   .CYCLES    SET	.CYCLES - 3
     15  29af					      ENDIF
     16  29af
     17  29af					      REPEAT	.CYCLES / 2
     18  29af		       ea		      nop
     17  29af					      REPEND
     18  29b0		       ea		      nop
     19  29b1					      REPEND
     34  29b1
     35  29b1		       a9 fe		      lda	#>miniscoretable	; 2 15
     36  29b3		       95 97		      sta	scorepointers+1,x	; 4 19
     37  29b5		       95 99		      sta	scorepointers+3,x	; 4 23
     38  29b7		       95 9b		      sta	scorepointers+5,x	; 4 27
     39  29b9		       95 9d		      sta	scorepointers+7,x	; 4 31
     40  29bb		       95 9f		      sta	scorepointers+9,x	; 4 35
     41  29bd		       95 a1		      sta	scorepointers+11,x	; 4 39
     42  29bf
     43  29bf		       a0 07		      LDY	#7	; 2 41
     44  29c1		       85 10		      STA	RESP0	; 3 44
     45  29c3		       85 11		      STA	RESP1	; 3 47
     46  29c5
     47  29c5		       a9 03		      LDA	#$03	; 2 49
     48  29c7		       85 04		      STA	NUSIZ0	; 3 52
     49  29c9		       95 05		      STA	NUSIZ1,x	; 4 56
     50  29cb		       85 25		      STA	VDELP0	; 3 59
     51  29cd		       85 26		      STA	VDELP1	; 3 62
     52  29cf							;LDA #$30		; 2 64
     53  29cf		       a9 70		      LDA	#$70	; 2 64
     54  29d1		       85 21		      STA	HMP1	; 3 67
     55  29d3		       a5 a3		      LDA	scorecolor	; 3 70
     56  29d5		       85 2a		      STA	HMOVE	; cycle 73 ?
     57  29d7				  -	      ifconst	score_kernel_fade
     58  29d7				  -	      and	score_kernel_fade
     59  29d7					      endif
     60  29d7
     61  29d7		       85 06		      STA	COLUP0
     62  29d9		       85 07		      STA	COLUP1
     63  29db				  -	      ifconst	scorefade
     64  29db				  -	      STA	stack2	; scorefade
     65  29db					      endif
     66  29db		       b1 96		      lda	(scorepointers),y
     67  29dd		       85 1b		      sta	GRP0
     68  29df		       b1 9e		      lda	(scorepointers+8),y
     69  29e1		       85 02		      sta	WSYNC
      0  29e3					      sleep	2
      1  29e3				   .CYCLES    SET	2
      2  29e3
      3  29e3				  -	      IF	.CYCLES < 2
      4  29e3				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  29e3				  -	      ERR
      6  29e3					      ENDIF
      7  29e3
      8  29e3				  -	      IF	.CYCLES & 1
      9  29e3				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  29e3				  -	      nop	0
     11  29e3				  -	      ELSE
     12  29e3				  -	      bit	VSYNC
     13  29e3				  -	      ENDIF
     14  29e3				  -.CYCLES    SET	.CYCLES - 3
     15  29e3					      ENDIF
     16  29e3
     17  29e3					      REPEAT	.CYCLES / 2
     18  29e3		       ea		      nop
     19  29e4					      REPEND
     71  29e4		       4c 0b fa 	      jmp	beginscoreloop
     72  29e7
     73  29e7					      if	((<*)>$28)
     74  2a00		       00 00 00 00*	      align	256	; kludge that potentially wastes space!  should be fixed!
     75  2a00					      endif
     76  2a00
     77  2a00				   scoreloop2
     78  2a00				  -	      ifconst	scorefade
     79  2a00				  -	      lda	stack2
     80  2a00				  -	      sta	COLUP0
     81  2a00				  -	      sta	COLUP1
     82  2a00					      else
      0  2a00					      sleep	9
      1  2a00				   .CYCLES    SET	9
      2  2a00
      3  2a00				  -	      IF	.CYCLES < 2
      4  2a00				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  2a00				  -	      ERR
      6  2a00					      ENDIF
      7  2a00
      8  2a00					      IF	.CYCLES & 1
      9  2a00					      IFNCONST	NO_ILLEGAL_OPCODES
     10  2a00		       04 00		      nop	0
     11  2a02				  -	      ELSE
     12  2a02				  -	      bit	VSYNC
     13  2a02					      ENDIF
     14  2a02				   .CYCLES    SET	.CYCLES - 3
     15  2a02					      ENDIF
     16  2a02
     17  2a02					      REPEAT	.CYCLES / 2
     18  2a02		       ea		      nop
     17  2a02					      REPEND
     18  2a03		       ea		      nop
     17  2a03					      REPEND
     18  2a04		       ea		      nop
     19  2a05					      REPEND
     84  2a05					      endif
     85  2a05		       b1 96		      lda	(scorepointers),y	;+5  68  204
     86  2a07		       85 1b		      sta	GRP0	;+3  71  213	   D1	  --	  --	 --
     87  2a09		       b1 9e		      lda	(scorepointers+$8),y	;+5   5   15
     88  2a0b							; cycle 0
     89  2a0b				   beginscoreloop
     90  2a0b		       85 1c		      sta	GRP1	;+3   8   24	   D1	  D1	  D2	 --
     91  2a0d		       b1 9c		      lda	(scorepointers+$6),y	;+5  13   39
     92  2a0f		       85 1b		      sta	GRP0	;+3  16   48	   D3	  D1	  D2	 D2
     93  2a11		       b3 98		      lax	(scorepointers+$2),y	;+5  29   87
     94  2a13		       9a		      txs
     95  2a14		       b3 9a		      lax	(scorepointers+$4),y	;+5  36  108
     96  2a16
     97  2a16				  -	      ifconst	scorefade
     98  2a16				  -	      dec	stack2
     99  2a16					      else
      0  2a16					      sleep	5
      1  2a16				   .CYCLES    SET	5
      2  2a16
      3  2a16				  -	      IF	.CYCLES < 2
      4  2a16				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  2a16				  -	      ERR
      6  2a16					      ENDIF
      7  2a16
      8  2a16					      IF	.CYCLES & 1
      9  2a16					      IFNCONST	NO_ILLEGAL_OPCODES
     10  2a16		       04 00		      nop	0
     11  2a18				  -	      ELSE
     12  2a18				  -	      bit	VSYNC
     13  2a18					      ENDIF
     14  2a18				   .CYCLES    SET	.CYCLES - 3
     15  2a18					      ENDIF
     16  2a18
     17  2a18					      REPEAT	.CYCLES / 2
     18  2a18		       ea		      nop
     19  2a19					      REPEND
    101  2a19					      endif
      0  2a19					      sleep	2
      1  2a19				   .CYCLES    SET	2
      2  2a19
      3  2a19				  -	      IF	.CYCLES < 2
      4  2a19				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  2a19				  -	      ERR
      6  2a19					      ENDIF
      7  2a19
      8  2a19				  -	      IF	.CYCLES & 1
      9  2a19				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  2a19				  -	      nop	0
     11  2a19				  -	      ELSE
     12  2a19				  -	      bit	VSYNC
     13  2a19				  -	      ENDIF
     14  2a19				  -.CYCLES    SET	.CYCLES - 3
     15  2a19					      ENDIF
     16  2a19
     17  2a19					      REPEAT	.CYCLES / 2
     18  2a19		       ea		      nop
     19  2a1a					      REPEND
    103  2a1a
    104  2a1a		       b1 a0		      lda	(scorepointers+$A),y	;+5  21   63 DIGIT 6
    105  2a1c		       86 1c		      stx	GRP1	;+3  44  132	   D3	  D3	  D4	 D2!
    106  2a1e		       ba		      tsx
    107  2a1f		       86 1b		      stx	GRP0	;+3  47  141	   D5	  D3!	  D4	 D4
    108  2a21		       85 1c		      sta	GRP1	;+3  50  150	   D5	  D5	  D6	 D4!
    109  2a23
    110  2a23		       84 1b		      sty	GRP0	;+3  53  159	   D4*	  D5!	  D6	 D6
    111  2a25		       88		      dey
    112  2a26		       10 d8		      bpl	scoreloop2	;+2  60  180
    113  2a28				   scoreloop2end
    114  2a28
    115  2a28							;echo "critical size: ",(scoreloop2end-scoreloop2)
    116  2a28
    117  2a28
    118  2a28		       a6 f6		      ldx	stack1
    119  2a2a		       9a		      txs
    120  2a2b
    121  2a2b		       a9 00		      LDA	#0
    122  2a2d		       85 0e		      sta	PF1
    123  2a2f		       85 1b		      STA	GRP0
    124  2a31		       85 1c		      STA	GRP1
    125  2a33		       85 25		      STA	VDELP0
    126  2a35		       85 26		      STA	VDELP1
    127  2a37		       85 04		      STA	NUSIZ0
    128  2a39		       85 05		      STA	NUSIZ1
    129  2a3b
    130  2a3b							; clear out the score pointers in case they're stolen DPC variables...
    131  2a3b		       a2 0b		      ldx	#11
    132  2a3d				   clearscoreploop
    133  2a3d		       95 96		      sta	scorepointers,x
    134  2a3f		       ca		      dex
    135  2a40		       10 fb		      bpl	clearscoreploop
    136  2a42
    137  2a42
    138  2a42							;;ldy temp3
    139  2a42							;ldy scorepointers+8
    140  2a42							;sty scorepointers+3
    141  2a42
    142  2a42							;;ldy temp5
    143  2a42							;ldy scorepointers+10
    144  2a42							;sty scorepointers+5
    145  2a42		       60		      rts
    146  2a43
    147  2a43				   miniscorepointerset
    148  2a43		       29 0f		      and	#$0F
    149  2a45		       0a		      asl
    150  2a46		       0a		      asl
    151  2a47		       0a		      asl
    152  2a48		       69 3d		      adc	#<miniscoretable
    153  2a4a		       a8		      tay
    154  2a4b		       8a		      txa
    155  2a4c		       29 f0		      and	#$F0
    156  2a4e		       4a		      lsr
    157  2a4f		       69 3d		      adc	#<miniscoretable
    158  2a51		       aa		      tax
    159  2a52		       60		      rts
    160  2a53
------- FILE titlescreen/asm/titlescreen.asm
    181  2a53					      endif		;mk_score_on
    182  2a53
    183  2a53					      ifconst	mk_gameselect_on
------- FILE titlescreen/asm/gameselect_kernel.asm LEVEL 3 PASS 3
      0  2a53					      include	"titlescreen/asm/gameselect_kernel.asm"
      1  2a53
      2  2a53				   draw_gameselect_display
      3  2a53		       a9 00		      lda	#0
      4  2a55		       85 1b		      sta	GRP0
      5  2a57		       85 1c		      sta	GRP1
      6  2a59
      7  2a59		       a0 04		      ldy	#4
      8  2a5b		       84 f1		      sty	aux2
      9  2a5d
     10  2a5d		       ad 8d fe 	      lda	bmp_gameselect_color
     11  2a60		       85 06		      sta	COLUP0
     12  2a62		       85 07		      sta	COLUP1
     13  2a64
     14  2a64							;change gamenumber to a BCD number and stick it in temp5
     15  2a64		       a5 a6		      lda	gamenumber
     16  2a66		       85 9e		      sta	temp3
     17  2a68		       a9 00		      lda	#0
     18  2a6a		       85 9f		      sta	temp4
     19  2a6c		       a2 08		      ldx	#8
     20  2a6e		       18		      clc
     21  2a6f		       f8		      sed
     22  2a70				   converttobcd
     23  2a70		       06 9e		      asl	temp3
     24  2a72		       a5 9f		      lda	temp4
     25  2a74		       65 9f		      adc	temp4
     26  2a76		       85 9f		      sta	temp4
     27  2a78		       ca		      dex
     28  2a79		       d0 f5		      bne	converttobcd
     29  2a7b		       d8		      cld
     30  2a7c
     31  2a7c		       a5 9f		      lda	temp4
     32  2a7e		       29 0f		      and	#$0f
     33  2a80		       85 9e		      sta	temp3
     34  2a82		       0a		      asl
     35  2a83		       0a		      asl
     36  2a84		       18		      clc
     37  2a85		       65 9e		      adc	temp3	; *5
     38  2a87		       18		      clc
     39  2a88		       69 a2		      adc	#<(font_gameselect_img)
     40  2a8a		       85 a0		      sta	scorepointers+10
     41  2a8c
     42  2a8c		       a5 9f		      lda	temp4
     43  2a8e		       29 f0		      and	#$f0
     44  2a90		       4a		      lsr
     45  2a91		       4a		      lsr
     46  2a92		       85 9e		      sta	temp3
     47  2a94		       4a		      lsr
     48  2a95		       4a		      lsr
     49  2a96		       18		      clc
     50  2a97		       65 9e		      adc	temp3	; *5
     51  2a99		       18		      clc
     52  2a9a		       69 a2		      adc	#<(font_gameselect_img)
     53  2a9c		       85 9e		      sta	scorepointers+8
     54  2a9e
     55  2a9e
     56  2a9e							;setup score pointers to point at my bitmap slices instead
     57  2a9e		       a9 8e		      lda	#<(bmp_gameselect_CHAR0)
     58  2aa0		       85 96		      sta	scorepointers+0
     59  2aa2		       a9 fe		      lda	#>(bmp_gameselect_CHAR0)
     60  2aa4		       85 97		      sta	scorepointers+1
     61  2aa6		       a9 93		      lda	#<(bmp_gameselect_CHAR1)
     62  2aa8		       85 98		      sta	scorepointers+2
     63  2aaa		       a9 fe		      lda	#>(bmp_gameselect_CHAR1)
     64  2aac		       85 99		      sta	scorepointers+3
     65  2aae		       a9 98		      lda	#<(bmp_gameselect_CHAR2)
     66  2ab0		       85 9a		      sta	scorepointers+4
     67  2ab2		       a9 fe		      lda	#>(bmp_gameselect_CHAR2)
     68  2ab4		       85 9b		      sta	scorepointers+5
     69  2ab6		       a9 9d		      lda	#<(bmp_gameselect_CHAR3)
     70  2ab8		       85 9c		      sta	scorepointers+6
     71  2aba		       a9 fe		      lda	#>(bmp_gameselect_CHAR3)
     72  2abc		       85 9d		      sta	scorepointers+7
     73  2abe
     74  2abe		       a9 fe		      lda	#>(font_gameselect_img)
     75  2ac0		       85 9f		      sta	scorepointers+9
     76  2ac2
     77  2ac2		       a9 fe		      lda	#>(font_gameselect_img)
     78  2ac4		       85 a1		      sta	scorepointers+11
     79  2ac6
     80  2ac6		       4c ec f6 	      jmp	draw_bmp_48x1_X
------- FILE titlescreen/asm/titlescreen.asm
    185  2ac9					      endif		;mk_gameselect_on
    186  2ac9
    187  2ac9				   PFWAIT
    188  2ac9		       ad 84 02 	      lda	INTIM
    189  2acc		       d0 fb		      bne	PFWAIT
    190  2ace		       85 02		      sta	WSYNC
    191  2ad0
    192  2ad0				   OVERSCAN
    193  2ad0					      ifnconst	overscan_time
    194  2ad0		       a9 a2		      lda	#34+128
    195  2ad2				  -	      else
    196  2ad2				  -	      lda	#overscan_time+128-5
    197  2ad2					      endif
    198  2ad2		       8d 96 02 	      sta	TIM64T
    199  2ad5
    200  2ad5							;fix height variables we borrowed, so DPC doesn't crash on drawscreen...
    201  2ad5				  -	      ifconst	player9height
    202  2ad5				  -	      ldy	#8
    203  2ad5				  -	      lda	#0
    204  2ad5				  -	      sta	player0height
    205  2ad5				  -.playerheightfixloop
    206  2ad5				  -	      sta	player1height,y
    207  2ad5				  -	      ifconst	_NUSIZ1
    208  2ad5				  -	      sta	_NUSIZ1,y
    209  2ad5				  -	      endif
    210  2ad5				  -	      dey
    211  2ad5				  -	      bpl	.playerheightfixloop
    212  2ad5					      endif
    213  2ad5
    214  2ad5		       a9 c2		      lda	#%11000010
    215  2ad7		       85 02		      sta	WSYNC
    216  2ad9		       85 01		      sta	VBLANK
      0  2adb					      RETURN
      1  2adb				  -	      ifnconst	bankswitch
      2  2adb				  -	      rts
      3  2adb					      else
      4  2adb		       4c da ff 	      jmp	BS_return
      5  2ade					      endif
    218  2ade
    219  2ade				  -	      ifconst	mk_48x1_1_on
    220  2ade				  -	      include	"titlescreen/48x1_1_image.asm"
    221  2ade					      endif
    222  2ade				  -	      ifconst	mk_48x1_2_on
    223  2ade				  -	      include	"titlescreen/48x1_2_image.asm"
    224  2ade					      endif
    225  2ade				  -	      ifconst	mk_48x1_3_on
    226  2ade				  -	      include	"titlescreen/48x1_3_image.asm"
    227  2ade					      endif
    228  2ade				  -	      ifconst	mk_48x1_4_on
    229  2ade				  -	      include	"titlescreen/48x1_4_image.asm"
    230  2ade					      endif
    231  2ade				  -	      ifconst	mk_48x1_5_on
    232  2ade				  -	      include	"titlescreen/48x1_5_image.asm"
    233  2ade					      endif
    234  2ade				  -	      ifconst	mk_48x1_6_on
    235  2ade				  -	      include	"titlescreen/48x1_6_image.asm"
    236  2ade					      endif
    237  2ade				  -	      ifconst	mk_48x1_7_on
    238  2ade				  -	      include	"titlescreen/48x1_7_image.asm"
    239  2ade					      endif
    240  2ade				  -	      ifconst	mk_48x1_8_on
    241  2ade				  -	      include	"titlescreen/48x1_8_image.asm"
    242  2ade					      endif
    243  2ade
    244  2ade
    245  2ade					      ifconst	mk_48x2_1_on
------- FILE titlescreen/48x2_1_image.asm LEVEL 3 PASS 3
      0  2ade					      include	"titlescreen/48x2_1_image.asm"
      1  2ade
      2  2ade							;*** The height of the displayed data...
      3  2ade		       00 05	   bmp_48x2_1_window =	5
      4  2ade
      5  2ade							;*** The height of the bitmap data. This can be larger than
      6  2ade							;*** the displayed data height, if you're scrolling or animating
      7  2ade							;*** the data...
      8  2ade		       00 05	   bmp_48x2_1_height =	5
      9  2ade
     10  2ade				  -	      if	>. != >[.+(bmp_48x2_1_height)]
     11  2ade				  -	      align	256
     12  2ade					      endif
     13  2ade		       00		      BYTE.b	0	; leave this here!
     14  2adf
     15  2adf
     16  2adf							;*** The color of each line in the bitmap, in reverse order...
     17  2adf				   bmp_48x2_1_colors
     18  2adf		       9a		      BYTE.b	$9a
     19  2ae0		       7a		      BYTE.b	$7a
     20  2ae1		       5a		      BYTE.b	$5a
     21  2ae2		       3a		      BYTE.b	$3a
     22  2ae3		       1a		      BYTE.b	$1a
     23  2ae4
     24  2ae4				  -	      ifnconst	bmp_48x2_1_PF1
     25  2ae4				  -bmp_48x2_1_PF1
     26  2ae4					      endif
     27  2ae4		       00		      BYTE.b	%00000000
     28  2ae5				  -	      ifnconst	bmp_48x2_1_PF2
     29  2ae5				  -bmp_48x2_1_PF2
     30  2ae5					      endif
     31  2ae5		       00		      BYTE.b	%00000000
     32  2ae6				  -	      ifnconst	bmp_48x2_1_background
     33  2ae6				  -bmp_48x2_1_background
     34  2ae6					      endif
     35  2ae6		       c2		      BYTE.b	$c2
     36  2ae7
     37  2ae7				  -	      if	>. != >[.+bmp_48x2_1_height]
     38  2ae7				  -	      align	256
     39  2ae7					      endif
     40  2ae7
     41  2ae7
     42  2ae7				   bmp_48x2_1_00
     43  2ae7		       ee		      BYTE.b	%11101110
     44  2ae8		       88		      BYTE.b	%10001000
     45  2ae9		       8c		      BYTE.b	%10001100
     46  2aea		       88		      BYTE.b	%10001000
     47  2aeb		       8e		      BYTE.b	%10001110
     48  2aec		       88		      BYTE.b	%10001000
     49  2aed
     50  2aed				  -	      if	>. != >[.+(bmp_48x2_1_height)]
     51  2aed				  -	      align	256
     52  2aed					      endif
     53  2aed
     54  2aed				   bmp_48x2_1_01
     55  2aed		       4e		      BYTE.b	%01001110
     56  2aee		       48		      BYTE.b	%01001000
     57  2aef		       ac		      BYTE.b	%10101100
     58  2af0		       a8		      BYTE.b	%10101000
     59  2af1		       ae		      BYTE.b	%10101110
     60  2af2		       48		      BYTE.b	%01001000
     61  2af3
     62  2af3				  -	      if	>. != >[.+(bmp_48x2_1_height)]
     63  2af3				  -	      align	256
     64  2af3					      endif
     65  2af3
     66  2af3				   bmp_48x2_1_02
     67  2af3		       e0		      BYTE.b	%11100000
     68  2af4		       80		      BYTE.b	%10000000
     69  2af5		       80		      BYTE.b	%10000000
     70  2af6		       80		      BYTE.b	%10000000
     71  2af7		       80		      BYTE.b	%10000000
     72  2af8		       80		      BYTE.b	%10000000
     73  2af9
     74  2af9				  -	      if	>. != >[.+(bmp_48x2_1_height)]
     75  2af9				  -	      align	256
     76  2af9					      endif
     77  2af9
     78  2af9				   bmp_48x2_1_03
     79  2af9		       00		      BYTE.b	%00000000
     80  2afa		       00		      BYTE.b	%00000000
     81  2afb		       00		      BYTE.b	%00000000
     82  2afc		       00		      BYTE.b	%00000000
     83  2afd		       00		      BYTE.b	%00000000
     84  2afe		       00		      BYTE.b	%00000000
     85  2aff
     86  2aff					      if	>. != >[.+(bmp_48x2_1_height)]
     87  2b00		       00		      align	256
     88  2b00					      endif
     89  2b00
     90  2b00				   bmp_48x2_1_04
     91  2b00		       00		      BYTE.b	%00000000
     92  2b01		       00		      BYTE.b	%00000000
     93  2b02		       00		      BYTE.b	%00000000
     94  2b03		       00		      BYTE.b	%00000000
     95  2b04		       00		      BYTE.b	%00000000
     96  2b05		       00		      BYTE.b	%00000000
     97  2b06
     98  2b06				  -	      if	>. != >[.+(bmp_48x2_1_height)]
     99  2b06				  -	      align	256
    100  2b06					      endif
    101  2b06
    102  2b06				   bmp_48x2_1_05
    103  2b06		       00		      BYTE.b	%00000000
    104  2b07		       00		      BYTE.b	%00000000
    105  2b08		       00		      BYTE.b	%00000000
    106  2b09		       00		      BYTE.b	%00000000
    107  2b0a		       00		      BYTE.b	%00000000
    108  2b0b		       00		      BYTE.b	%00000000
    109  2b0c
------- FILE titlescreen/asm/titlescreen.asm
    247  2b0c					      endif
    248  2b0c				  -	      ifconst	mk_48x2_2_on
    249  2b0c				  -	      include	"titlescreen/48x2_2_image.asm"
    250  2b0c					      endif
    251  2b0c				  -	      ifconst	mk_48x2_3_on
    252  2b0c				  -	      include	"titlescreen/48x2_3_image.asm"
    253  2b0c					      endif
    254  2b0c				  -	      ifconst	mk_48x2_4_on
    255  2b0c				  -	      include	"titlescreen/48x2_4_image.asm"
    256  2b0c					      endif
    257  2b0c				  -	      ifconst	mk_48x2_5_on
    258  2b0c				  -	      include	"titlescreen/48x2_5_image.asm"
    259  2b0c					      endif
    260  2b0c				  -	      ifconst	mk_48x2_6_on
    261  2b0c				  -	      include	"titlescreen/48x2_6_image.asm"
    262  2b0c					      endif
    263  2b0c				  -	      ifconst	mk_48x2_7_on
    264  2b0c				  -	      include	"titlescreen/48x2_7_image.asm"
    265  2b0c					      endif
    266  2b0c
    267  2b0c				  -	      ifconst	mk_48x2_8_on
    268  2b0c				  -	      include	"titlescreen/48x2_8_image.asm"
    269  2b0c					      endif
    270  2b0c
    271  2b0c
    272  2b0c					      ifconst	mk_96x2_1_on
------- FILE titlescreen/96x2_1_image.asm LEVEL 3 PASS 3
      0  2b0c					      include	"titlescreen/96x2_1_image.asm"
      1  2b0c
      2  2b0c							;*** The height of the displayed data...
      3  2b0c		       00 3c	   bmp_96x2_1_window =	60
      4  2b0c
      5  2b0c							;*** The height of the bitmap data. This can be larger than
      6  2b0c							;*** the displayed data height, if you're scrolling or animating
      7  2b0c							;*** the data...
      8  2b0c		       00 3c	   bmp_96x2_1_height =	60
      9  2b0c
     10  2b0c
     11  2b0c				  -	      if	>. != >[.+(bmp_96x2_1_height)]
     12  2b0c				  -	      align	256
     13  2b0c					      endif
     14  2b0c		       00		      BYTE.b	$00	; leave this here!
     15  2b0d
     16  2b0d
     17  2b0d							;*** The color of each line in the bitmap, in reverse order...
     18  2b0d				   bmp_96x2_1_colors
     19  2b0d		       0e		      BYTE.b	$0E
     20  2b0e		       0e		      BYTE.b	$0E
     21  2b0f		       0e		      BYTE.b	$0E
     22  2b10		       0e		      BYTE.b	$0E
     23  2b11		       0e		      BYTE.b	$0E
     24  2b12		       0e		      BYTE.b	$0E
     25  2b13		       0e		      BYTE.b	$0E
     26  2b14		       0e		      BYTE.b	$0E
     27  2b15		       0e		      BYTE.b	$0E
     28  2b16		       0e		      BYTE.b	$0E
     29  2b17		       0e		      BYTE.b	$0E
     30  2b18		       0e		      BYTE.b	$0E
     31  2b19		       0e		      BYTE.b	$0E
     32  2b1a		       0e		      BYTE.b	$0E
     33  2b1b		       0e		      BYTE.b	$0E
     34  2b1c		       0e		      BYTE.b	$0E
     35  2b1d		       0e		      BYTE.b	$0E
     36  2b1e		       0e		      BYTE.b	$0E
     37  2b1f		       0e		      BYTE.b	$0E
     38  2b20		       0e		      BYTE.b	$0E
     39  2b21		       0e		      BYTE.b	$0E
     40  2b22		       0e		      BYTE.b	$0E
     41  2b23		       0e		      BYTE.b	$0E
     42  2b24		       0e		      BYTE.b	$0E
     43  2b25		       0e		      BYTE.b	$0E
     44  2b26		       0e		      BYTE.b	$0E
     45  2b27		       0e		      BYTE.b	$0E
     46  2b28		       0e		      BYTE.b	$0E
     47  2b29		       0e		      BYTE.b	$0E
     48  2b2a		       0e		      BYTE.b	$0E
     49  2b2b		       0e		      BYTE.b	$0E
     50  2b2c		       0e		      BYTE.b	$0E
     51  2b2d		       0e		      BYTE.b	$0E
     52  2b2e		       0e		      BYTE.b	$0E
     53  2b2f		       0e		      BYTE.b	$0E
     54  2b30		       0e		      BYTE.b	$0E
     55  2b31		       0e		      BYTE.b	$0E
     56  2b32		       0e		      BYTE.b	$0E
     57  2b33		       0e		      BYTE.b	$0E
     58  2b34		       0e		      BYTE.b	$0E
     59  2b35		       0e		      BYTE.b	$0E
     60  2b36		       0e		      BYTE.b	$0E
     61  2b37		       0e		      BYTE.b	$0E
     62  2b38		       0e		      BYTE.b	$0E
     63  2b39		       0e		      BYTE.b	$0E
     64  2b3a		       0e		      BYTE.b	$0E
     65  2b3b		       0e		      BYTE.b	$0E
     66  2b3c		       0e		      BYTE.b	$0E
     67  2b3d		       0e		      BYTE.b	$0E
     68  2b3e		       0e		      BYTE.b	$0E
     69  2b3f		       0e		      BYTE.b	$0E
     70  2b40		       0e		      BYTE.b	$0E
     71  2b41		       0e		      BYTE.b	$0E
     72  2b42		       0e		      BYTE.b	$0E
     73  2b43		       0e		      BYTE.b	$0E
     74  2b44		       0e		      BYTE.b	$0E
     75  2b45		       0e		      BYTE.b	$0E
     76  2b46		       0e		      BYTE.b	$0E
     77  2b47		       0e		      BYTE.b	$0E
     78  2b48		       0e		      BYTE.b	$0E
     79  2b49
     80  2b49
     81  2b49				  -	      if	>. != >[.+(bmp_96x2_1_height)]
     82  2b49				  -	      align	256
     83  2b49					      endif
     84  2b49
     85  2b49				   bmp_96x2_1_00
     86  2b49		       00		      BYTE.b	%00000000
     87  2b4a		       00		      BYTE.b	%00000000
     88  2b4b		       00		      BYTE.b	%00000000
     89  2b4c		       00		      BYTE.b	%00000000
     90  2b4d		       00		      BYTE.b	%00000000
     91  2b4e		       00		      BYTE.b	%00000000
     92  2b4f		       00		      BYTE.b	%00000000
     93  2b50		       00		      BYTE.b	%00000000
     94  2b51		       00		      BYTE.b	%00000000
     95  2b52		       00		      BYTE.b	%00000000
     96  2b53		       00		      BYTE.b	%00000000
     97  2b54		       00		      BYTE.b	%00000000
     98  2b55		       00		      BYTE.b	%00000000
     99  2b56		       00		      BYTE.b	%00000000
    100  2b57		       00		      BYTE.b	%00000000
    101  2b58		       00		      BYTE.b	%00000000
    102  2b59		       00		      BYTE.b	%00000000
    103  2b5a		       00		      BYTE.b	%00000000
    104  2b5b		       00		      BYTE.b	%00000000
    105  2b5c		       00		      BYTE.b	%00000000
    106  2b5d		       00		      BYTE.b	%00000000
    107  2b5e		       00		      BYTE.b	%00000000
    108  2b5f		       00		      BYTE.b	%00000000
    109  2b60		       00		      BYTE.b	%00000000
    110  2b61		       00		      BYTE.b	%00000000
    111  2b62		       00		      BYTE.b	%00000000
    112  2b63		       00		      BYTE.b	%00000000
    113  2b64		       00		      BYTE.b	%00000000
    114  2b65		       00		      BYTE.b	%00000000
    115  2b66		       00		      BYTE.b	%00000000
    116  2b67		       00		      BYTE.b	%00000000
    117  2b68		       00		      BYTE.b	%00000000
    118  2b69		       00		      BYTE.b	%00000000
    119  2b6a		       00		      BYTE.b	%00000000
    120  2b6b		       00		      BYTE.b	%00000000
    121  2b6c		       00		      BYTE.b	%00000000
    122  2b6d		       00		      BYTE.b	%00000000
    123  2b6e		       00		      BYTE.b	%00000000
    124  2b6f		       00		      BYTE.b	%00000000
    125  2b70		       00		      BYTE.b	%00000000
    126  2b71		       00		      BYTE.b	%00000000
    127  2b72		       00		      BYTE.b	%00000000
    128  2b73		       00		      BYTE.b	%00000000
    129  2b74		       00		      BYTE.b	%00000000
    130  2b75		       00		      BYTE.b	%00000000
    131  2b76		       00		      BYTE.b	%00000000
    132  2b77		       00		      BYTE.b	%00000000
    133  2b78		       00		      BYTE.b	%00000000
    134  2b79		       3e		      BYTE.b	%00111110
    135  2b7a		       7f		      BYTE.b	%01111111
    136  2b7b		       ff		      BYTE.b	%11111111
    137  2b7c		       f1		      BYTE.b	%11110001
    138  2b7d		       e0		      BYTE.b	%11100000
    139  2b7e		       e0		      BYTE.b	%11100000
    140  2b7f		       f0		      BYTE.b	%11110000
    141  2b80		       70		      BYTE.b	%01110000
    142  2b81		       3c		      BYTE.b	%00111100
    143  2b82		       3f		      BYTE.b	%00111111
    144  2b83		       1f		      BYTE.b	%00011111
    145  2b84		       07		      BYTE.b	%00000111
    146  2b85
    147  2b85				  -	      if	>. != >[.+(bmp_96x2_1_height)]
    148  2b85				  -	      align	256
    149  2b85					      endif
    150  2b85
    151  2b85				   bmp_96x2_1_01
    152  2b85		       00		      BYTE.b	%00000000
    153  2b86		       00		      BYTE.b	%00000000
    154  2b87		       00		      BYTE.b	%00000000
    155  2b88		       00		      BYTE.b	%00000000
    156  2b89		       00		      BYTE.b	%00000000
    157  2b8a		       00		      BYTE.b	%00000000
    158  2b8b		       0f		      BYTE.b	%00001111
    159  2b8c		       1f		      BYTE.b	%00011111
    160  2b8d		       38		      BYTE.b	%00111000
    161  2b8e		       70		      BYTE.b	%01110000
    162  2b8f		       60		      BYTE.b	%01100000
    163  2b90		       30		      BYTE.b	%00110000
    164  2b91		       30		      BYTE.b	%00110000
    165  2b92		       18		      BYTE.b	%00011000
    166  2b93		       0c		      BYTE.b	%00001100
    167  2b94		       07		      BYTE.b	%00000111
    168  2b95		       03		      BYTE.b	%00000011
    169  2b96		       00		      BYTE.b	%00000000
    170  2b97		       00		      BYTE.b	%00000000
    171  2b98		       00		      BYTE.b	%00000000
    172  2b99		       00		      BYTE.b	%00000000
    173  2b9a		       00		      BYTE.b	%00000000
    174  2b9b		       00		      BYTE.b	%00000000
    175  2b9c		       00		      BYTE.b	%00000000
    176  2b9d		       00		      BYTE.b	%00000000
    177  2b9e		       7f		      BYTE.b	%01111111
    178  2b9f		       ff		      BYTE.b	%11111111
    179  2ba0		       00		      BYTE.b	%00000000
    180  2ba1		       00		      BYTE.b	%00000000
    181  2ba2		       00		      BYTE.b	%00000000
    182  2ba3		       00		      BYTE.b	%00000000
    183  2ba4		       00		      BYTE.b	%00000000
    184  2ba5		       00		      BYTE.b	%00000000
    185  2ba6		       c0		      BYTE.b	%11000000
    186  2ba7		       e1		      BYTE.b	%11100001
    187  2ba8		       ff		      BYTE.b	%11111111
    188  2ba9		       7f		      BYTE.b	%01111111
    189  2baa		       7f		      BYTE.b	%01111111
    190  2bab		       33		      BYTE.b	%00110011
    191  2bac		       1b		      BYTE.b	%00011011
    192  2bad		       1f		      BYTE.b	%00011111
    193  2bae		       0f		      BYTE.b	%00001111
    194  2baf		       0f		      BYTE.b	%00001111
    195  2bb0		       07		      BYTE.b	%00000111
    196  2bb1		       03		      BYTE.b	%00000011
    197  2bb2		       00		      BYTE.b	%00000000
    198  2bb3		       00		      BYTE.b	%00000000
    199  2bb4		       00		      BYTE.b	%00000000
    200  2bb5		       0c		      BYTE.b	%00001100
    201  2bb6		       0c		      BYTE.b	%00001100
    202  2bb7		       c0		      BYTE.b	%11000000
    203  2bb8		       c0		      BYTE.b	%11000000
    204  2bb9		       c0		      BYTE.b	%11000000
    205  2bba		       00		      BYTE.b	%00000000
    206  2bbb		       00		      BYTE.b	%00000000
    207  2bbc		       00		      BYTE.b	%00000000
    208  2bbd		       c0		      BYTE.b	%11000000
    209  2bbe		       c0		      BYTE.b	%11000000
    210  2bbf		       c0		      BYTE.b	%11000000
    211  2bc0		       c0		      BYTE.b	%11000000
    212  2bc1
    213  2bc1				  -	      if	>. != >[.+(bmp_96x2_1_height)]
    214  2bc1				  -	      align	256
    215  2bc1					      endif
    216  2bc1
    217  2bc1				   bmp_96x2_1_02
    218  2bc1		       07		      BYTE.b	%00000111
    219  2bc2		       1f		      BYTE.b	%00011111
    220  2bc3		       1c		      BYTE.b	%00011100
    221  2bc4		       00		      BYTE.b	%00000000
    222  2bc5		       00		      BYTE.b	%00000000
    223  2bc6		       ff		      BYTE.b	%11111111
    224  2bc7		       ff		      BYTE.b	%11111111
    225  2bc8		       ff		      BYTE.b	%11111111
    226  2bc9		       ff		      BYTE.b	%11111111
    227  2bca		       7f		      BYTE.b	%01111111
    228  2bcb		       7f		      BYTE.b	%01111111
    229  2bcc		       3f		      BYTE.b	%00111111
    230  2bcd		       3f		      BYTE.b	%00111111
    231  2bce		       1f		      BYTE.b	%00011111
    232  2bcf		       1f		      BYTE.b	%00011111
    233  2bd0		       0f		      BYTE.b	%00001111
    234  2bd1		       ef		      BYTE.b	%11101111
    235  2bd2		       ff		      BYTE.b	%11111111
    236  2bd3		       1f		      BYTE.b	%00011111
    237  2bd4		       03		      BYTE.b	%00000011
    238  2bd5		       00		      BYTE.b	%00000000
    239  2bd6		       00		      BYTE.b	%00000000
    240  2bd7		       00		      BYTE.b	%00000000
    241  2bd8		       00		      BYTE.b	%00000000
    242  2bd9		       00		      BYTE.b	%00000000
    243  2bda		       ff		      BYTE.b	%11111111
    244  2bdb		       ff		      BYTE.b	%11111111
    245  2bdc		       00		      BYTE.b	%00000000
    246  2bdd		       00		      BYTE.b	%00000000
    247  2bde		       1c		      BYTE.b	%00011100
    248  2bdf		       1c		      BYTE.b	%00011100
    249  2be0		       1c		      BYTE.b	%00011100
    250  2be1		       1c		      BYTE.b	%00011100
    251  2be2		       df		      BYTE.b	%11011111
    252  2be3		       df		      BYTE.b	%11011111
    253  2be4		       df		      BYTE.b	%11011111
    254  2be5		       9c		      BYTE.b	%10011100
    255  2be6		       9c		      BYTE.b	%10011100
    256  2be7		       9f		      BYTE.b	%10011111
    257  2be8		       9f		      BYTE.b	%10011111
    258  2be9		       9f		      BYTE.b	%10011111
    259  2bea		       00		      BYTE.b	%00000000
    260  2beb		       00		      BYTE.b	%00000000
    261  2bec		       00		      BYTE.b	%00000000
    262  2bed		       00		      BYTE.b	%00000000
    263  2bee		       00		      BYTE.b	%00000000
    264  2bef		       00		      BYTE.b	%00000000
    265  2bf0		       00		      BYTE.b	%00000000
    266  2bf1		       30		      BYTE.b	%00110000
    267  2bf2		       38		      BYTE.b	%00111000
    268  2bf3		       3f		      BYTE.b	%00111111
    269  2bf4		       1f		      BYTE.b	%00011111
    270  2bf5		       1f		      BYTE.b	%00011111
    271  2bf6		       0c		      BYTE.b	%00001100
    272  2bf7		       06		      BYTE.b	%00000110
    273  2bf8		       07		      BYTE.b	%00000111
    274  2bf9		       03		      BYTE.b	%00000011
    275  2bfa		       03		      BYTE.b	%00000011
    276  2bfb		       01		      BYTE.b	%00000001
    277  2bfc		       00		      BYTE.b	%00000000
    278  2bfd
    279  2bfd					      if	>. != >[.+(bmp_96x2_1_height)]
    280  2c00		       00 00 00 	      align	256
    281  2c00					      endif
    282  2c00
    283  2c00				   bmp_96x2_1_03
    284  2c00		       ff		      BYTE.b	%11111111
    285  2c01		       ff		      BYTE.b	%11111111
    286  2c02		       e0		      BYTE.b	%11100000
    287  2c03		       e0		      BYTE.b	%11100000
    288  2c04		       fc		      BYTE.b	%11111100
    289  2c05		       ff		      BYTE.b	%11111111
    290  2c06		       ff		      BYTE.b	%11111111
    291  2c07		       ff		      BYTE.b	%11111111
    292  2c08		       ff		      BYTE.b	%11111111
    293  2c09		       ff		      BYTE.b	%11111111
    294  2c0a		       ff		      BYTE.b	%11111111
    295  2c0b		       ff		      BYTE.b	%11111111
    296  2c0c		       ff		      BYTE.b	%11111111
    297  2c0d		       ff		      BYTE.b	%11111111
    298  2c0e		       ff		      BYTE.b	%11111111
    299  2c0f		       ff		      BYTE.b	%11111111
    300  2c10		       ff		      BYTE.b	%11111111
    301  2c11		       ff		      BYTE.b	%11111111
    302  2c12		       ff		      BYTE.b	%11111111
    303  2c13		       ff		      BYTE.b	%11111111
    304  2c14		       1f		      BYTE.b	%00011111
    305  2c15		       07		      BYTE.b	%00000111
    306  2c16		       01		      BYTE.b	%00000001
    307  2c17		       00		      BYTE.b	%00000000
    308  2c18		       00		      BYTE.b	%00000000
    309  2c19		       ff		      BYTE.b	%11111111
    310  2c1a		       ff		      BYTE.b	%11111111
    311  2c1b		       00		      BYTE.b	%00000000
    312  2c1c		       00		      BYTE.b	%00000000
    313  2c1d		       00		      BYTE.b	%00000000
    314  2c1e		       00		      BYTE.b	%00000000
    315  2c1f		       00		      BYTE.b	%00000000
    316  2c20		       00		      BYTE.b	%00000000
    317  2c21		       83		      BYTE.b	%10000011
    318  2c22		       c7		      BYTE.b	%11000111
    319  2c23		       ef		      BYTE.b	%11101111
    320  2c24		       ee		      BYTE.b	%11101110
    321  2c25		       ee		      BYTE.b	%11101110
    322  2c26		       ef		      BYTE.b	%11101111
    323  2c27		       c7		      BYTE.b	%11000111
    324  2c28		       c3		      BYTE.b	%11000011
    325  2c29		       00		      BYTE.b	%00000000
    326  2c2a		       00		      BYTE.b	%00000000
    327  2c2b		       00		      BYTE.b	%00000000
    328  2c2c		       00		      BYTE.b	%00000000
    329  2c2d		       00		      BYTE.b	%00000000
    330  2c2e		       00		      BYTE.b	%00000000
    331  2c2f		       00		      BYTE.b	%00000000
    332  2c30		       31		      BYTE.b	%00110001
    333  2c31		       71		      BYTE.b	%01110001
    334  2c32		       f0		      BYTE.b	%11110000
    335  2c33		       e0		      BYTE.b	%11100000
    336  2c34		       e0		      BYTE.b	%11100000
    337  2c35		       e0		      BYTE.b	%11100000
    338  2c36		       e0		      BYTE.b	%11100000
    339  2c37		       e0		      BYTE.b	%11100000
    340  2c38		       c0		      BYTE.b	%11000000
    341  2c39		       c0		      BYTE.b	%11000000
    342  2c3a		       c0		      BYTE.b	%11000000
    343  2c3b		       c0		      BYTE.b	%11000000
    344  2c3c
    345  2c3c				  -	      if	>. != >[.+(bmp_96x2_1_height)]
    346  2c3c				  -	      align	256
    347  2c3c					      endif
    348  2c3c
    349  2c3c				   bmp_96x2_1_04
    350  2c3c		       ff		      BYTE.b	%11111111
    351  2c3d		       ff		      BYTE.b	%11111111
    352  2c3e		       01		      BYTE.b	%00000001
    353  2c3f		       01		      BYTE.b	%00000001
    354  2c40		       01		      BYTE.b	%00000001
    355  2c41		       ff		      BYTE.b	%11111111
    356  2c42		       ff		      BYTE.b	%11111111
    357  2c43		       ff		      BYTE.b	%11111111
    358  2c44		       ff		      BYTE.b	%11111111
    359  2c45		       ff		      BYTE.b	%11111111
    360  2c46		       ff		      BYTE.b	%11111111
    361  2c47		       ff		      BYTE.b	%11111111
    362  2c48		       ff		      BYTE.b	%11111111
    363  2c49		       ff		      BYTE.b	%11111111
    364  2c4a		       ff		      BYTE.b	%11111111
    365  2c4b		       ff		      BYTE.b	%11111111
    366  2c4c		       ff		      BYTE.b	%11111111
    367  2c4d		       ff		      BYTE.b	%11111111
    368  2c4e		       ff		      BYTE.b	%11111111
    369  2c4f		       ff		      BYTE.b	%11111111
    370  2c50		       ff		      BYTE.b	%11111111
    371  2c51		       ff		      BYTE.b	%11111111
    372  2c52		       ff		      BYTE.b	%11111111
    373  2c53		       07		      BYTE.b	%00000111
    374  2c54		       00		      BYTE.b	%00000000
    375  2c55		       ff		      BYTE.b	%11111111
    376  2c56		       ff		      BYTE.b	%11111111
    377  2c57		       00		      BYTE.b	%00000000
    378  2c58		       00		      BYTE.b	%00000000
    379  2c59		       00		      BYTE.b	%00000000
    380  2c5a		       00		      BYTE.b	%00000000
    381  2c5b		       00		      BYTE.b	%00000000
    382  2c5c		       00		      BYTE.b	%00000000
    383  2c5d		       83		      BYTE.b	%10000011
    384  2c5e		       c7		      BYTE.b	%11000111
    385  2c5f		       ef		      BYTE.b	%11101111
    386  2c60		       ee		      BYTE.b	%11101110
    387  2c61		       ee		      BYTE.b	%11101110
    388  2c62		       e7		      BYTE.b	%11100111
    389  2c63		       c7		      BYTE.b	%11000111
    390  2c64		       c3		      BYTE.b	%11000011
    391  2c65		       00		      BYTE.b	%00000000
    392  2c66		       00		      BYTE.b	%00000000
    393  2c67		       00		      BYTE.b	%00000000
    394  2c68		       00		      BYTE.b	%00000000
    395  2c69		       00		      BYTE.b	%00000000
    396  2c6a		       00		      BYTE.b	%00000000
    397  2c6b		       00		      BYTE.b	%00000000
    398  2c6c		       80		      BYTE.b	%10000000
    399  2c6d		       80		      BYTE.b	%10000000
    400  2c6e		       01		      BYTE.b	%00000001
    401  2c6f		       01		      BYTE.b	%00000001
    402  2c70		       01		      BYTE.b	%00000001
    403  2c71		       03		      BYTE.b	%00000011
    404  2c72		       03		      BYTE.b	%00000011
    405  2c73		       03		      BYTE.b	%00000011
    406  2c74		       03		      BYTE.b	%00000011
    407  2c75		       07		      BYTE.b	%00000111
    408  2c76		       07		      BYTE.b	%00000111
    409  2c77		       07		      BYTE.b	%00000111
    410  2c78
    411  2c78				  -	      if	>. != >[.+(bmp_96x2_1_height)]
    412  2c78				  -	      align	256
    413  2c78					      endif
    414  2c78
    415  2c78				   bmp_96x2_1_05
    416  2c78		       fc		      BYTE.b	%11111100
    417  2c79		       fc		      BYTE.b	%11111100
    418  2c7a		       c0		      BYTE.b	%11000000
    419  2c7b		       c0		      BYTE.b	%11000000
    420  2c7c		       c0		      BYTE.b	%11000000
    421  2c7d		       f0		      BYTE.b	%11110000
    422  2c7e		       fe		      BYTE.b	%11111110
    423  2c7f		       ff		      BYTE.b	%11111111
    424  2c80		       ff		      BYTE.b	%11111111
    425  2c81		       ff		      BYTE.b	%11111111
    426  2c82		       ff		      BYTE.b	%11111111
    427  2c83		       ff		      BYTE.b	%11111111
    428  2c84		       ff		      BYTE.b	%11111111
    429  2c85		       ff		      BYTE.b	%11111111
    430  2c86		       ff		      BYTE.b	%11111111
    431  2c87		       ff		      BYTE.b	%11111111
    432  2c88		       ff		      BYTE.b	%11111111
    433  2c89		       ff		      BYTE.b	%11111111
    434  2c8a		       ff		      BYTE.b	%11111111
    435  2c8b		       ff		      BYTE.b	%11111111
    436  2c8c		       ff		      BYTE.b	%11111111
    437  2c8d		       ff		      BYTE.b	%11111111
    438  2c8e		       ff		      BYTE.b	%11111111
    439  2c8f		       ff		      BYTE.b	%11111111
    440  2c90		       fc		      BYTE.b	%11111100
    441  2c91		       ff		      BYTE.b	%11111111
    442  2c92		       ff		      BYTE.b	%11111111
    443  2c93		       00		      BYTE.b	%00000000
    444  2c94		       00		      BYTE.b	%00000000
    445  2c95		       00		      BYTE.b	%00000000
    446  2c96		       00		      BYTE.b	%00000000
    447  2c97		       00		      BYTE.b	%00000000
    448  2c98		       00		      BYTE.b	%00000000
    449  2c99		       c7		      BYTE.b	%11000111
    450  2c9a		       ef		      BYTE.b	%11101111
    451  2c9b		       ef		      BYTE.b	%11101111
    452  2c9c		       0e		      BYTE.b	%00001110
    453  2c9d		       0e		      BYTE.b	%00001110
    454  2c9e		       ef		      BYTE.b	%11101111
    455  2c9f		       e7		      BYTE.b	%11100111
    456  2ca0		       c1		      BYTE.b	%11000001
    457  2ca1		       00		      BYTE.b	%00000000
    458  2ca2		       00		      BYTE.b	%00000000
    459  2ca3		       00		      BYTE.b	%00000000
    460  2ca4		       00		      BYTE.b	%00000000
    461  2ca5		       00		      BYTE.b	%00000000
    462  2ca6		       00		      BYTE.b	%00000000
    463  2ca7		       00		      BYTE.b	%00000000
    464  2ca8		       c0		      BYTE.b	%11000000
    465  2ca9		       e0		      BYTE.b	%11100000
    466  2caa		       e0		      BYTE.b	%11100000
    467  2cab		       e0		      BYTE.b	%11100000
    468  2cac		       f0		      BYTE.b	%11110000
    469  2cad		       b0		      BYTE.b	%10110000
    470  2cae		       b8		      BYTE.b	%10111000
    471  2caf		       38		      BYTE.b	%00111000
    472  2cb0		       1c		      BYTE.b	%00011100
    473  2cb1		       1c		      BYTE.b	%00011100
    474  2cb2		       1e		      BYTE.b	%00011110
    475  2cb3		       0e		      BYTE.b	%00001110
    476  2cb4
    477  2cb4				  -	      if	>. != >[.+(bmp_96x2_1_height)]
    478  2cb4				  -	      align	256
    479  2cb4					      endif
    480  2cb4
    481  2cb4				   bmp_96x2_1_06
    482  2cb4		       00		      BYTE.b	%00000000
    483  2cb5		       00		      BYTE.b	%00000000
    484  2cb6		       00		      BYTE.b	%00000000
    485  2cb7		       00		      BYTE.b	%00000000
    486  2cb8		       00		      BYTE.b	%00000000
    487  2cb9		       00		      BYTE.b	%00000000
    488  2cba		       00		      BYTE.b	%00000000
    489  2cbb		       80		      BYTE.b	%10000000
    490  2cbc		       e0		      BYTE.b	%11100000
    491  2cbd		       f0		      BYTE.b	%11110000
    492  2cbe		       fc		      BYTE.b	%11111100
    493  2cbf		       ff		      BYTE.b	%11111111
    494  2cc0		       ff		      BYTE.b	%11111111
    495  2cc1		       ff		      BYTE.b	%11111111
    496  2cc2		       ff		      BYTE.b	%11111111
    497  2cc3		       ff		      BYTE.b	%11111111
    498  2cc4		       ff		      BYTE.b	%11111111
    499  2cc5		       ff		      BYTE.b	%11111111
    500  2cc6		       f8		      BYTE.b	%11111000
    501  2cc7		       f8		      BYTE.b	%11111000
    502  2cc8		       f0		      BYTE.b	%11110000
    503  2cc9		       f0		      BYTE.b	%11110000
    504  2cca		       f0		      BYTE.b	%11110000
    505  2ccb		       80		      BYTE.b	%10000000
    506  2ccc		       00		      BYTE.b	%00000000
    507  2ccd		       ff		      BYTE.b	%11111111
    508  2cce		       ff		      BYTE.b	%11111111
    509  2ccf		       00		      BYTE.b	%00000000
    510  2cd0		       00		      BYTE.b	%00000000
    511  2cd1		       00		      BYTE.b	%00000000
    512  2cd2		       00		      BYTE.b	%00000000
    513  2cd3		       00		      BYTE.b	%00000000
    514  2cd4		       00		      BYTE.b	%00000000
    515  2cd5		       b7		      BYTE.b	%10110111
    516  2cd6		       f7		      BYTE.b	%11110111
    517  2cd7		       f7		      BYTE.b	%11110111
    518  2cd8		       77		      BYTE.b	%01110111
    519  2cd9		       77		      BYTE.b	%01110111
    520  2cda		       f7		      BYTE.b	%11110111
    521  2cdb		       f7		      BYTE.b	%11110111
    522  2cdc		       e7		      BYTE.b	%11100111
    523  2cdd		       07		      BYTE.b	%00000111
    524  2cde		       07		      BYTE.b	%00000111
    525  2cdf		       07		      BYTE.b	%00000111
    526  2ce0		       07		      BYTE.b	%00000111
    527  2ce1		       07		      BYTE.b	%00000111
    528  2ce2		       00		      BYTE.b	%00000000
    529  2ce3		       00		      BYTE.b	%00000000
    530  2ce4		       60		      BYTE.b	%01100000
    531  2ce5		       61		      BYTE.b	%01100001
    532  2ce6		       01		      BYTE.b	%00000001
    533  2ce7		       01		      BYTE.b	%00000001
    534  2ce8		       01		      BYTE.b	%00000001
    535  2ce9		       01		      BYTE.b	%00000001
    536  2cea		       01		      BYTE.b	%00000001
    537  2ceb		       01		      BYTE.b	%00000001
    538  2cec		       01		      BYTE.b	%00000001
    539  2ced		       01		      BYTE.b	%00000001
    540  2cee		       01		      BYTE.b	%00000001
    541  2cef		       01		      BYTE.b	%00000001
    542  2cf0
    543  2cf0					      if	>. != >[.+(bmp_96x2_1_height)]
    544  2d00		       00 00 00 00*	      align	256
    545  2d00					      endif
    546  2d00
    547  2d00				   bmp_96x2_1_07
    548  2d00		       00		      BYTE.b	%00000000
    549  2d01		       00		      BYTE.b	%00000000
    550  2d02		       00		      BYTE.b	%00000000
    551  2d03		       00		      BYTE.b	%00000000
    552  2d04		       00		      BYTE.b	%00000000
    553  2d05		       00		      BYTE.b	%00000000
    554  2d06		       00		      BYTE.b	%00000000
    555  2d07		       00		      BYTE.b	%00000000
    556  2d08		       00		      BYTE.b	%00000000
    557  2d09		       00		      BYTE.b	%00000000
    558  2d0a		       00		      BYTE.b	%00000000
    559  2d0b		       00		      BYTE.b	%00000000
    560  2d0c		       ff		      BYTE.b	%11111111
    561  2d0d		       ff		      BYTE.b	%11111111
    562  2d0e		       ff		      BYTE.b	%11111111
    563  2d0f		       ff		      BYTE.b	%11111111
    564  2d10		       ff		      BYTE.b	%11111111
    565  2d11		       ff		      BYTE.b	%11111111
    566  2d12		       00		      BYTE.b	%00000000
    567  2d13		       00		      BYTE.b	%00000000
    568  2d14		       00		      BYTE.b	%00000000
    569  2d15		       00		      BYTE.b	%00000000
    570  2d16		       00		      BYTE.b	%00000000
    571  2d17		       00		      BYTE.b	%00000000
    572  2d18		       00		      BYTE.b	%00000000
    573  2d19		       ff		      BYTE.b	%11111111
    574  2d1a		       ff		      BYTE.b	%11111111
    575  2d1b		       00		      BYTE.b	%00000000
    576  2d1c		       00		      BYTE.b	%00000000
    577  2d1d		       38		      BYTE.b	%00111000
    578  2d1e		       38		      BYTE.b	%00111000
    579  2d1f		       3c		      BYTE.b	%00111100
    580  2d20		       1c		      BYTE.b	%00011100
    581  2d21		       1e		      BYTE.b	%00011110
    582  2d22		       1e		      BYTE.b	%00011110
    583  2d23		       1f		      BYTE.b	%00011111
    584  2d24		       1f		      BYTE.b	%00011111
    585  2d25		       3f		      BYTE.b	%00111111
    586  2d26		       33		      BYTE.b	%00110011
    587  2d27		       73		      BYTE.b	%01110011
    588  2d28		       71		      BYTE.b	%01110001
    589  2d29		       00		      BYTE.b	%00000000
    590  2d2a		       00		      BYTE.b	%00000000
    591  2d2b		       00		      BYTE.b	%00000000
    592  2d2c		       00		      BYTE.b	%00000000
    593  2d2d		       00		      BYTE.b	%00000000
    594  2d2e		       00		      BYTE.b	%00000000
    595  2d2f		       00		      BYTE.b	%00000000
    596  2d30		       fe		      BYTE.b	%11111110
    597  2d31		       fe		      BYTE.b	%11111110
    598  2d32		       fe		      BYTE.b	%11111110
    599  2d33		       c0		      BYTE.b	%11000000
    600  2d34		       fe		      BYTE.b	%11111110
    601  2d35		       fe		      BYTE.b	%11111110
    602  2d36		       fe		      BYTE.b	%11111110
    603  2d37		       c0		      BYTE.b	%11000000
    604  2d38		       c0		      BYTE.b	%11000000
    605  2d39		       fe		      BYTE.b	%11111110
    606  2d3a		       fe		      BYTE.b	%11111110
    607  2d3b		       fe		      BYTE.b	%11111110
    608  2d3c
    609  2d3c				  -	      if	>. != >[.+(bmp_96x2_1_height)]
    610  2d3c				  -	      align	256
    611  2d3c					      endif
    612  2d3c
    613  2d3c				   bmp_96x2_1_08
    614  2d3c		       00		      BYTE.b	%00000000
    615  2d3d		       00		      BYTE.b	%00000000
    616  2d3e		       00		      BYTE.b	%00000000
    617  2d3f		       00		      BYTE.b	%00000000
    618  2d40		       00		      BYTE.b	%00000000
    619  2d41		       00		      BYTE.b	%00000000
    620  2d42		       00		      BYTE.b	%00000000
    621  2d43		       00		      BYTE.b	%00000000
    622  2d44		       00		      BYTE.b	%00000000
    623  2d45		       00		      BYTE.b	%00000000
    624  2d46		       00		      BYTE.b	%00000000
    625  2d47		       00		      BYTE.b	%00000000
    626  2d48		       e0		      BYTE.b	%11100000
    627  2d49		       ff		      BYTE.b	%11111111
    628  2d4a		       ff		      BYTE.b	%11111111
    629  2d4b		       ff		      BYTE.b	%11111111
    630  2d4c		       ff		      BYTE.b	%11111111
    631  2d4d		       fc		      BYTE.b	%11111100
    632  2d4e		       00		      BYTE.b	%00000000
    633  2d4f		       00		      BYTE.b	%00000000
    634  2d50		       00		      BYTE.b	%00000000
    635  2d51		       00		      BYTE.b	%00000000
    636  2d52		       00		      BYTE.b	%00000000
    637  2d53		       00		      BYTE.b	%00000000
    638  2d54		       00		      BYTE.b	%00000000
    639  2d55		       ff		      BYTE.b	%11111111
    640  2d56		       ff		      BYTE.b	%11111111
    641  2d57		       00		      BYTE.b	%00000000
    642  2d58		       00		      BYTE.b	%00000000
    643  2d59		       38		      BYTE.b	%00111000
    644  2d5a		       38		      BYTE.b	%00111000
    645  2d5b		       38		      BYTE.b	%00111000
    646  2d5c		       38		      BYTE.b	%00111000
    647  2d5d		       3f		      BYTE.b	%00111111
    648  2d5e		       3f		      BYTE.b	%00111111
    649  2d5f		       3f		      BYTE.b	%00111111
    650  2d60		       39		      BYTE.b	%00111001
    651  2d61		       b9		      BYTE.b	%10111001
    652  2d62		       bf		      BYTE.b	%10111111
    653  2d63		       ff		      BYTE.b	%11111111
    654  2d64		       ff		      BYTE.b	%11111111
    655  2d65		       00		      BYTE.b	%00000000
    656  2d66		       00		      BYTE.b	%00000000
    657  2d67		       00		      BYTE.b	%00000000
    658  2d68		       00		      BYTE.b	%00000000
    659  2d69		       00		      BYTE.b	%00000000
    660  2d6a		       00		      BYTE.b	%00000000
    661  2d6b		       00		      BYTE.b	%00000000
    662  2d6c		       30		      BYTE.b	%00110000
    663  2d6d		       30		      BYTE.b	%00110000
    664  2d6e		       00		      BYTE.b	%00000000
    665  2d6f		       00		      BYTE.b	%00000000
    666  2d70		       00		      BYTE.b	%00000000
    667  2d71		       00		      BYTE.b	%00000000
    668  2d72		       00		      BYTE.b	%00000000
    669  2d73		       00		      BYTE.b	%00000000
    670  2d74		       00		      BYTE.b	%00000000
    671  2d75		       00		      BYTE.b	%00000000
    672  2d76		       00		      BYTE.b	%00000000
    673  2d77		       00		      BYTE.b	%00000000
    674  2d78
    675  2d78				  -	      if	>. != >[.+(bmp_96x2_1_height)]
    676  2d78				  -	      align	256
    677  2d78					      endif
    678  2d78
    679  2d78				   bmp_96x2_1_09
    680  2d78		       00		      BYTE.b	%00000000
    681  2d79		       00		      BYTE.b	%00000000
    682  2d7a		       00		      BYTE.b	%00000000
    683  2d7b		       00		      BYTE.b	%00000000
    684  2d7c		       00		      BYTE.b	%00000000
    685  2d7d		       00		      BYTE.b	%00000000
    686  2d7e		       00		      BYTE.b	%00000000
    687  2d7f		       00		      BYTE.b	%00000000
    688  2d80		       00		      BYTE.b	%00000000
    689  2d81		       00		      BYTE.b	%00000000
    690  2d82		       00		      BYTE.b	%00000000
    691  2d83		       00		      BYTE.b	%00000000
    692  2d84		       00		      BYTE.b	%00000000
    693  2d85		       ff		      BYTE.b	%11111111
    694  2d86		       ff		      BYTE.b	%11111111
    695  2d87		       ff		      BYTE.b	%11111111
    696  2d88		       ff		      BYTE.b	%11111111
    697  2d89		       00		      BYTE.b	%00000000
    698  2d8a		       00		      BYTE.b	%00000000
    699  2d8b		       00		      BYTE.b	%00000000
    700  2d8c		       00		      BYTE.b	%00000000
    701  2d8d		       00		      BYTE.b	%00000000
    702  2d8e		       00		      BYTE.b	%00000000
    703  2d8f		       00		      BYTE.b	%00000000
    704  2d90		       00		      BYTE.b	%00000000
    705  2d91		       ff		      BYTE.b	%11111111
    706  2d92		       ff		      BYTE.b	%11111111
    707  2d93		       00		      BYTE.b	%00000000
    708  2d94		       00		      BYTE.b	%00000000
    709  2d95		       00		      BYTE.b	%00000000
    710  2d96		       00		      BYTE.b	%00000000
    711  2d97		       00		      BYTE.b	%00000000
    712  2d98		       00		      BYTE.b	%00000000
    713  2d99		       0f		      BYTE.b	%00001111
    714  2d9a		       8f		      BYTE.b	%10001111
    715  2d9b		       c3		      BYTE.b	%11000011
    716  2d9c		       c7		      BYTE.b	%11000111
    717  2d9d		       ce		      BYTE.b	%11001110
    718  2d9e		       cf		      BYTE.b	%11001111
    719  2d9f		       8f		      BYTE.b	%10001111
    720  2da0		       87		      BYTE.b	%10000111
    721  2da1		       00		      BYTE.b	%00000000
    722  2da2		       00		      BYTE.b	%00000000
    723  2da3		       00		      BYTE.b	%00000000
    724  2da4		       00		      BYTE.b	%00000000
    725  2da5		       00		      BYTE.b	%00000000
    726  2da6		       00		      BYTE.b	%00000000
    727  2da7		       00		      BYTE.b	%00000000
    728  2da8		       00		      BYTE.b	%00000000
    729  2da9		       00		      BYTE.b	%00000000
    730  2daa		       00		      BYTE.b	%00000000
    731  2dab		       00		      BYTE.b	%00000000
    732  2dac		       00		      BYTE.b	%00000000
    733  2dad		       00		      BYTE.b	%00000000
    734  2dae		       00		      BYTE.b	%00000000
    735  2daf		       00		      BYTE.b	%00000000
    736  2db0		       00		      BYTE.b	%00000000
    737  2db1		       00		      BYTE.b	%00000000
    738  2db2		       00		      BYTE.b	%00000000
    739  2db3		       00		      BYTE.b	%00000000
    740  2db4
    741  2db4				  -	      if	>. != >[.+(bmp_96x2_1_height)]
    742  2db4				  -	      align	256
    743  2db4					      endif
    744  2db4
    745  2db4				   bmp_96x2_1_10
    746  2db4		       00		      BYTE.b	%00000000
    747  2db5		       00		      BYTE.b	%00000000
    748  2db6		       00		      BYTE.b	%00000000
    749  2db7		       00		      BYTE.b	%00000000
    750  2db8		       00		      BYTE.b	%00000000
    751  2db9		       00		      BYTE.b	%00000000
    752  2dba		       00		      BYTE.b	%00000000
    753  2dbb		       00		      BYTE.b	%00000000
    754  2dbc		       00		      BYTE.b	%00000000
    755  2dbd		       01		      BYTE.b	%00000001
    756  2dbe		       07		      BYTE.b	%00000111
    757  2dbf		       0f		      BYTE.b	%00001111
    758  2dc0		       1e		      BYTE.b	%00011110
    759  2dc1		       f8		      BYTE.b	%11111000
    760  2dc2		       f8		      BYTE.b	%11111000
    761  2dc3		       f8		      BYTE.b	%11111000
    762  2dc4		       f8		      BYTE.b	%11111000
    763  2dc5		       18		      BYTE.b	%00011000
    764  2dc6		       1c		      BYTE.b	%00011100
    765  2dc7		       0f		      BYTE.b	%00001111
    766  2dc8		       0f		      BYTE.b	%00001111
    767  2dc9		       07		      BYTE.b	%00000111
    768  2dca		       03		      BYTE.b	%00000011
    769  2dcb		       03		      BYTE.b	%00000011
    770  2dcc		       01		      BYTE.b	%00000001
    771  2dcd		       01		      BYTE.b	%00000001
    772  2dce		       80		      BYTE.b	%10000000
    773  2dcf		       00		      BYTE.b	%00000000
    774  2dd0		       00		      BYTE.b	%00000000
    775  2dd1		       00		      BYTE.b	%00000000
    776  2dd2		       00		      BYTE.b	%00000000
    777  2dd3		       00		      BYTE.b	%00000000
    778  2dd4		       00		      BYTE.b	%00000000
    779  2dd5		       87		      BYTE.b	%10000111
    780  2dd6		       cf		      BYTE.b	%11001111
    781  2dd7		       df		      BYTE.b	%11011111
    782  2dd8		       9d		      BYTE.b	%10011101
    783  2dd9		       1e		      BYTE.b	%00011110
    784  2dda		       df		      BYTE.b	%11011111
    785  2ddb		       cf		      BYTE.b	%11001111
    786  2ddc		       c7		      BYTE.b	%11000111
    787  2ddd		       00		      BYTE.b	%00000000
    788  2dde		       00		      BYTE.b	%00000000
    789  2ddf		       00		      BYTE.b	%00000000
    790  2de0		       00		      BYTE.b	%00000000
    791  2de1		       00		      BYTE.b	%00000000
    792  2de2		       00		      BYTE.b	%00000000
    793  2de3		       00		      BYTE.b	%00000000
    794  2de4		       00		      BYTE.b	%00000000
    795  2de5		       00		      BYTE.b	%00000000
    796  2de6		       00		      BYTE.b	%00000000
    797  2de7		       00		      BYTE.b	%00000000
    798  2de8		       00		      BYTE.b	%00000000
    799  2de9		       00		      BYTE.b	%00000000
    800  2dea		       00		      BYTE.b	%00000000
    801  2deb		       00		      BYTE.b	%00000000
    802  2dec		       00		      BYTE.b	%00000000
    803  2ded		       00		      BYTE.b	%00000000
    804  2dee		       00		      BYTE.b	%00000000
    805  2def		       00		      BYTE.b	%00000000
    806  2df0
    807  2df0					      if	>. != >[.+(bmp_96x2_1_height)]
    808  2e00		       00 00 00 00*	      align	256
    809  2e00					      endif
    810  2e00
    811  2e00				   bmp_96x2_1_11
    812  2e00		       00		      BYTE.b	%00000000
    813  2e01		       00		      BYTE.b	%00000000
    814  2e02		       00		      BYTE.b	%00000000
    815  2e03		       00		      BYTE.b	%00000000
    816  2e04		       00		      BYTE.b	%00000000
    817  2e05		       00		      BYTE.b	%00000000
    818  2e06		       00		      BYTE.b	%00000000
    819  2e07		       40		      BYTE.b	%01000000
    820  2e08		       fc		      BYTE.b	%11111100
    821  2e09		       fc		      BYTE.b	%11111100
    822  2e0a		       f8		      BYTE.b	%11111000
    823  2e0b		       f8		      BYTE.b	%11111000
    824  2e0c		       7c		      BYTE.b	%01111100
    825  2e0d		       1e		      BYTE.b	%00011110
    826  2e0e		       1f		      BYTE.b	%00011111
    827  2e0f		       0f		      BYTE.b	%00001111
    828  2e10		       1e		      BYTE.b	%00011110
    829  2e11		       1e		      BYTE.b	%00011110
    830  2e12		       3c		      BYTE.b	%00111100
    831  2e13		       fc		      BYTE.b	%11111100
    832  2e14		       f8		      BYTE.b	%11111000
    833  2e15		       fc		      BYTE.b	%11111100
    834  2e16		       fc		      BYTE.b	%11111100
    835  2e17		       fc		      BYTE.b	%11111100
    836  2e18		       fe		      BYTE.b	%11111110
    837  2e19		       fe		      BYTE.b	%11111110
    838  2e1a		       fe		      BYTE.b	%11111110
    839  2e1b		       7f		      BYTE.b	%01111111
    840  2e1c		       7f		      BYTE.b	%01111111
    841  2e1d		       3f		      BYTE.b	%00111111
    842  2e1e		       1f		      BYTE.b	%00011111
    843  2e1f		       00		      BYTE.b	%00000000
    844  2e20		       00		      BYTE.b	%00000000
    845  2e21		       c0		      BYTE.b	%11000000
    846  2e22		       e0		      BYTE.b	%11100000
    847  2e23		       80		      BYTE.b	%10000000
    848  2e24		       c0		      BYTE.b	%11000000
    849  2e25		       e0		      BYTE.b	%11100000
    850  2e26		       e0		      BYTE.b	%11100000
    851  2e27		       e0		      BYTE.b	%11100000
    852  2e28		       c0		      BYTE.b	%11000000
    853  2e29		       00		      BYTE.b	%00000000
    854  2e2a		       00		      BYTE.b	%00000000
    855  2e2b		       00		      BYTE.b	%00000000
    856  2e2c		       00		      BYTE.b	%00000000
    857  2e2d		       00		      BYTE.b	%00000000
    858  2e2e		       00		      BYTE.b	%00000000
    859  2e2f		       00		      BYTE.b	%00000000
    860  2e30		       00		      BYTE.b	%00000000
    861  2e31		       00		      BYTE.b	%00000000
    862  2e32		       00		      BYTE.b	%00000000
    863  2e33		       00		      BYTE.b	%00000000
    864  2e34		       00		      BYTE.b	%00000000
    865  2e35		       00		      BYTE.b	%00000000
    866  2e36		       00		      BYTE.b	%00000000
    867  2e37		       00		      BYTE.b	%00000000
    868  2e38		       00		      BYTE.b	%00000000
    869  2e39		       00		      BYTE.b	%00000000
    870  2e3a		       00		      BYTE.b	%00000000
    871  2e3b		       00		      BYTE.b	%00000000
    872  2e3c
------- FILE titlescreen/asm/titlescreen.asm
    274  2e3c					      endif
    275  2e3c				  -	      ifconst	mk_96x2_2_on
    276  2e3c				  -	      include	"titlescreen/96x2_2_image.asm"
    277  2e3c					      endif
    278  2e3c				  -	      ifconst	mk_96x2_3_on
    279  2e3c				  -	      include	"titlescreen/96x2_3_image.asm"
    280  2e3c					      endif
    281  2e3c				  -	      ifconst	mk_96x2_4_on
    282  2e3c				  -	      include	"titlescreen/96x2_4_image.asm"
    283  2e3c					      endif
    284  2e3c				  -	      ifconst	mk_96x2_5_on
    285  2e3c				  -	      include	"titlescreen/96x2_5_image.asm"
    286  2e3c					      endif
    287  2e3c				  -	      ifconst	mk_96x2_6_on
    288  2e3c				  -	      include	"titlescreen/96x2_6_image.asm"
    289  2e3c					      endif
    290  2e3c				  -	      ifconst	mk_96x2_7_on
    291  2e3c				  -	      include	"titlescreen/96x2_7_image.asm"
    292  2e3c					      endif
    293  2e3c				  -	      ifconst	mk_96x2_8_on
    294  2e3c				  -	      include	"titlescreen/96x2_8_image.asm"
    295  2e3c					      endif
    296  2e3c
    297  2e3c				  -	      ifconst	mk_player_on
    298  2e3c				  -	      include	"titlescreen/player_image.asm"
    299  2e3c					      endif
    300  2e3c
    301  2e3c					      ifconst	mk_score_on
------- FILE titlescreen/score_image.asm LEVEL 3 PASS 3
      0  2e3c					      include	"titlescreen/score_image.asm"
      1  2e3c							; feel free to modify the score graphics - just keep each digit 8 high
      2  2e3c							; if you're looking to want to modify any one font, pick on the
      3  2e3c
      4  2e3c				  -	      ifnconst	scorecolor
      5  2e3c				  -scorecolor
      6  2e3c					      endif
      7  2e3c							; ** change this value for a different scorecolor under DPC+
      8  2e3c							;    for other kernels, just use the scorecolor variable
      9  2e3c		       0f		      .byte.b	$0f
     10  2e3d
     11  2e3d				  -	      ifnconst	NOFONT
     12  2e3d				  -NOFONT     =	0
     13  2e3d					      endif
     14  2e3d				  -	      ifnconst	STOCK
     15  2e3d				  -STOCK      =	1	;_FONTNAME
     16  2e3d					      endif
     17  2e3d				  -	      ifnconst	NEWCENTURY
     18  2e3d				  -NEWCENTURY =	2	;_FONTNAME
     19  2e3d					      endif
     20  2e3d				  -	      ifnconst	WHIMSEY
     21  2e3d				  -WHIMSEY    =	3	;_FONTNAME
     22  2e3d					      endif
     23  2e3d				  -	      ifnconst	ALARMCLOCK
     24  2e3d				  -ALARMCLOCK =	4	;_FONTNAME
     25  2e3d					      endif
     26  2e3d				  -	      ifnconst	HANDWRITTEN
     27  2e3d				  -HANDWRITTEN =	5	;_FONTNAME
     28  2e3d					      endif
     29  2e3d				  -	      ifnconst	INTERRUPTED
     30  2e3d				  -INTERRUPTED =	6	;_FONTNAME
     31  2e3d					      endif
     32  2e3d				  -	      ifnconst	TINY
     33  2e3d				  -TINY       =	7	;_FONTNAME
     34  2e3d					      endif
     35  2e3d				  -	      ifnconst	RETROPUTER
     36  2e3d				  -RETROPUTER =	8	;_FONTNAME
     37  2e3d					      endif
     38  2e3d				  -	      ifnconst	CURVES
     39  2e3d				  -CURVES     =	9	;_FONTNAME
     40  2e3d					      endif
     41  2e3d				  -	      ifnconst	HUSKY
     42  2e3d				  -HUSKY      =	10	;_FONTNAME
     43  2e3d					      endif
     44  2e3d				  -	      ifnconst	SNAKE
     45  2e3d				  -SNAKE      =	11	;_FONTNAME
     46  2e3d					      endif
     47  2e3d				  -	      ifnconst	PLOK
     48  2e3d				  -PLOK       =	13	;_FONTNAME
     49  2e3d					      endif
     50  2e3d
     51  2e3d				  -	      ifnconst	SYMBOLS
     52  2e3d				  -SYMBOLS    =	0	;_FONTNAME
     53  2e3d					      endif
     54  2e3d
     55  2e3d							; ### setup some defaults
     56  2e3d				  -	      ifnconst	fontstyle
     57  2e3d				  -fontstyle  =	STOCK
     58  2e3d					      endif
     59  2e3d
     60  2e3d							;fix up the table alignment, if necessary
     61  2e3d				  -	      if	>. != >[.+81]
     62  2e3d				  -	      align	256
     63  2e3d					      endif
     64  2e3d
     65  2e3d
     66  2e3d				   miniscoretable
     67  2e3d
     68  2e3d					      if	fontstyle == STOCK
     69  2e3d
     70  2e3d							;byte %00000000 ; STOCK
     71  2e3d
     72  2e3d		       3c		      .byte.b	%00111100	; STOCK
     73  2e3e		       66		      .byte.b	%01100110	; STOCK
     74  2e3f		       66		      .byte.b	%01100110	; STOCK
     75  2e40		       66		      .byte.b	%01100110	; STOCK
     76  2e41		       66		      .byte.b	%01100110	; STOCK
     77  2e42		       66		      .byte.b	%01100110	; STOCK
     78  2e43		       66		      .byte.b	%01100110	; STOCK
     79  2e44		       3c		      .byte.b	%00111100	; STOCK
     80  2e45
     81  2e45							;byte %00000000 ; STOCK
     82  2e45
     83  2e45		       7e		      .byte.b	%01111110	; STOCK
     84  2e46		       18		      .byte.b	%00011000	; STOCK
     85  2e47		       18		      .byte.b	%00011000	; STOCK
     86  2e48		       18		      .byte.b	%00011000	; STOCK
     87  2e49		       18		      .byte.b	%00011000	; STOCK
     88  2e4a		       38		      .byte.b	%00111000	; STOCK
     89  2e4b		       18		      .byte.b	%00011000	; STOCK
     90  2e4c		       08		      .byte.b	%00001000	; STOCK
     91  2e4d
     92  2e4d							;byte %00000000 ; STOCK
     93  2e4d
     94  2e4d		       7e		      .byte.b	%01111110	; STOCK
     95  2e4e		       60		      .byte.b	%01100000	; STOCK
     96  2e4f		       60		      .byte.b	%01100000	; STOCK
     97  2e50		       3c		      .byte.b	%00111100	; STOCK
     98  2e51		       06		      .byte.b	%00000110	; STOCK
     99  2e52		       06		      .byte.b	%00000110	; STOCK
    100  2e53		       46		      .byte.b	%01000110	; STOCK
    101  2e54		       3c		      .byte.b	%00111100	; STOCK
    102  2e55
    103  2e55							;byte %00000000 ; STOCK
    104  2e55
    105  2e55		       3c		      .byte.b	%00111100	; STOCK
    106  2e56		       46		      .byte.b	%01000110	; STOCK
    107  2e57		       06		      .byte.b	%00000110	; STOCK
    108  2e58		       06		      .byte.b	%00000110	; STOCK
    109  2e59		       1c		      .byte.b	%00011100	; STOCK
    110  2e5a		       06		      .byte.b	%00000110	; STOCK
    111  2e5b		       46		      .byte.b	%01000110	; STOCK
    112  2e5c		       3c		      .byte.b	%00111100	; STOCK
    113  2e5d
    114  2e5d							;byte %00000000 ; STOCK
    115  2e5d
    116  2e5d		       0c		      .byte.b	%00001100	; STOCK
    117  2e5e		       0c		      .byte.b	%00001100	; STOCK
    118  2e5f		       7e		      .byte.b	%01111110	; STOCK
    119  2e60		       4c		      .byte.b	%01001100	; STOCK
    120  2e61		       4c		      .byte.b	%01001100	; STOCK
    121  2e62		       2c		      .byte.b	%00101100	; STOCK
    122  2e63		       1c		      .byte.b	%00011100	; STOCK
    123  2e64		       0c		      .byte.b	%00001100	; STOCK
    124  2e65
    125  2e65							;byte %00000000 ; STOCK
    126  2e65
    127  2e65		       3c		      .byte.b	%00111100	; STOCK
    128  2e66		       46		      .byte.b	%01000110	; STOCK
    129  2e67		       06		      .byte.b	%00000110	; STOCK
    130  2e68		       06		      .byte.b	%00000110	; STOCK
    131  2e69		       3c		      .byte.b	%00111100	; STOCK
    132  2e6a		       60		      .byte.b	%01100000	; STOCK
    133  2e6b		       60		      .byte.b	%01100000	; STOCK
    134  2e6c		       7e		      .byte.b	%01111110	; STOCK
    135  2e6d
    136  2e6d							;byte %00000000 ; STOCK
    137  2e6d
    138  2e6d		       3c		      .byte.b	%00111100	; STOCK
    139  2e6e		       66		      .byte.b	%01100110	; STOCK
    140  2e6f		       66		      .byte.b	%01100110	; STOCK
    141  2e70		       66		      .byte.b	%01100110	; STOCK
    142  2e71		       7c		      .byte.b	%01111100	; STOCK
    143  2e72		       60		      .byte.b	%01100000	; STOCK
    144  2e73		       62		      .byte.b	%01100010	; STOCK
    145  2e74		       3c		      .byte.b	%00111100	; STOCK
    146  2e75
    147  2e75							;byte %00000000 ; STOCK
    148  2e75
    149  2e75		       30		      .byte.b	%00110000	; STOCK
    150  2e76		       30		      .byte.b	%00110000	; STOCK
    151  2e77		       30		      .byte.b	%00110000	; STOCK
    152  2e78		       18		      .byte.b	%00011000	; STOCK
    153  2e79		       0c		      .byte.b	%00001100	; STOCK
    154  2e7a		       06		      .byte.b	%00000110	; STOCK
    155  2e7b		       42		      .byte.b	%01000010	; STOCK
    156  2e7c		       3e		      .byte.b	%00111110	; STOCK
    157  2e7d
    158  2e7d							;byte %00000000 ; STOCK
    159  2e7d
    160  2e7d		       3c		      .byte.b	%00111100	; STOCK
    161  2e7e		       66		      .byte.b	%01100110	; STOCK
    162  2e7f		       66		      .byte.b	%01100110	; STOCK
    163  2e80		       66		      .byte.b	%01100110	; STOCK
    164  2e81		       3c		      .byte.b	%00111100	; STOCK
    165  2e82		       66		      .byte.b	%01100110	; STOCK
    166  2e83		       66		      .byte.b	%01100110	; STOCK
    167  2e84		       3c		      .byte.b	%00111100	; STOCK
    168  2e85
    169  2e85							;byte %00000000 ; STOCK
    170  2e85
    171  2e85		       3c		      .byte.b	%00111100	; STOCK
    172  2e86		       46		      .byte.b	%01000110	; STOCK
    173  2e87		       06		      .byte.b	%00000110	; STOCK
    174  2e88		       3e		      .byte.b	%00111110	; STOCK
    175  2e89		       66		      .byte.b	%01100110	; STOCK
    176  2e8a		       66		      .byte.b	%01100110	; STOCK
    177  2e8b		       66		      .byte.b	%01100110	; STOCK
    178  2e8c		       3c		      .byte.b	%00111100	; STOCK
    179  2e8d
    180  2e8d					      endif		; STOCK
    181  2e8d
    182  2e8d				  -	      if	fontstyle == NEWCENTURY
    183  2e8d				  -			;byte %00000000 ; NEWCENTURY
    184  2e8d				  -
    185  2e8d				  -	      .byte	%00111100	; NEWCENTURY
    186  2e8d				  -	      .byte	%01000010	; NEWCENTURY
    187  2e8d				  -	      .byte	%01000010	; NEWCENTURY
    188  2e8d				  -	      .byte	%01000010	; NEWCENTURY
    189  2e8d				  -	      .byte	%00100100	; NEWCENTURY
    190  2e8d				  -	      .byte	%00100100	; NEWCENTURY
    191  2e8d				  -	      .byte	%00100100	; NEWCENTURY
    192  2e8d				  -	      .byte	%00011000	; NEWCENTURY
    193  2e8d				  -
    194  2e8d				  -			;byte %00000000 ; NEWCENTURY
    195  2e8d				  -
    196  2e8d				  -	      .byte	%00001000	; NEWCENTURY
    197  2e8d				  -	      .byte	%00001000	; NEWCENTURY
    198  2e8d				  -	      .byte	%00001000	; NEWCENTURY
    199  2e8d				  -	      .byte	%00001000	; NEWCENTURY
    200  2e8d				  -	      .byte	%00001000	; NEWCENTURY
    201  2e8d				  -	      .byte	%00001000	; NEWCENTURY
    202  2e8d				  -	      .byte	%00001000	; NEWCENTURY
    203  2e8d				  -	      .byte	%00001000	; NEWCENTURY
    204  2e8d				  -
    205  2e8d				  -			;byte %00000000 ; NEWCENTURY
    206  2e8d				  -
    207  2e8d				  -	      .byte	%01111110	; NEWCENTURY
    208  2e8d				  -	      .byte	%01000000	; NEWCENTURY
    209  2e8d				  -	      .byte	%01000000	; NEWCENTURY
    210  2e8d				  -	      .byte	%00100000	; NEWCENTURY
    211  2e8d				  -	      .byte	%00011100	; NEWCENTURY
    212  2e8d				  -	      .byte	%00000010	; NEWCENTURY
    213  2e8d				  -	      .byte	%00000010	; NEWCENTURY
    214  2e8d				  -	      .byte	%00011100	; NEWCENTURY
    215  2e8d				  -
    216  2e8d				  -			;byte %00000000 ; NEWCENTURY
    217  2e8d				  -
    218  2e8d				  -	      .byte	%01111100	; NEWCENTURY
    219  2e8d				  -	      .byte	%00000010	; NEWCENTURY
    220  2e8d				  -	      .byte	%00000010	; NEWCENTURY
    221  2e8d				  -	      .byte	%00000010	; NEWCENTURY
    222  2e8d				  -	      .byte	%00111100	; NEWCENTURY
    223  2e8d				  -	      .byte	%00000010	; NEWCENTURY
    224  2e8d				  -	      .byte	%00000010	; NEWCENTURY
    225  2e8d				  -	      .byte	%00011100	; NEWCENTURY
    226  2e8d				  -
    227  2e8d				  -			;byte %00000000 ; NEWCENTURY
    228  2e8d				  -
    229  2e8d				  -	      .byte	%00000010	; NEWCENTURY
    230  2e8d				  -	      .byte	%00000010	; NEWCENTURY
    231  2e8d				  -	      .byte	%00000010	; NEWCENTURY
    232  2e8d				  -	      .byte	%00111110	; NEWCENTURY
    233  2e8d				  -	      .byte	%00100010	; NEWCENTURY
    234  2e8d				  -	      .byte	%00100010	; NEWCENTURY
    235  2e8d				  -	      .byte	%00010010	; NEWCENTURY
    236  2e8d				  -	      .byte	%00010010	; NEWCENTURY
    237  2e8d				  -
    238  2e8d				  -			;byte %00000000 ; NEWCENTURY
    239  2e8d				  -
    240  2e8d				  -	      .byte	%01111100	; NEWCENTURY
    241  2e8d				  -	      .byte	%00000010	; NEWCENTURY
    242  2e8d				  -	      .byte	%00000010	; NEWCENTURY
    243  2e8d				  -	      .byte	%00000010	; NEWCENTURY
    244  2e8d				  -	      .byte	%01111100	; NEWCENTURY
    245  2e8d				  -	      .byte	%01000000	; NEWCENTURY
    246  2e8d				  -	      .byte	%01000000	; NEWCENTURY
    247  2e8d				  -	      .byte	%01111000	; NEWCENTURY
    248  2e8d				  -
    249  2e8d				  -			;byte %00000000 ; NEWCENTURY
    250  2e8d				  -
    251  2e8d				  -	      .byte	%00111100	; NEWCENTURY
    252  2e8d				  -	      .byte	%01000010	; NEWCENTURY
    253  2e8d				  -	      .byte	%01000010	; NEWCENTURY
    254  2e8d				  -	      .byte	%01000010	; NEWCENTURY
    255  2e8d				  -	      .byte	%01111100	; NEWCENTURY
    256  2e8d				  -	      .byte	%01000000	; NEWCENTURY
    257  2e8d				  -	      .byte	%01000000	; NEWCENTURY
    258  2e8d				  -	      .byte	%00110000	; NEWCENTURY
    259  2e8d				  -
    260  2e8d				  -			;byte %00000000 ; NEWCENTURY
    261  2e8d				  -
    262  2e8d				  -	      .byte	%00010000	; NEWCENTURY
    263  2e8d				  -	      .byte	%00010000	; NEWCENTURY
    264  2e8d				  -	      .byte	%00001000	; NEWCENTURY
    265  2e8d				  -	      .byte	%00001000	; NEWCENTURY
    266  2e8d				  -	      .byte	%00000100	; NEWCENTURY
    267  2e8d				  -	      .byte	%00000100	; NEWCENTURY
    268  2e8d				  -	      .byte	%00000010	; NEWCENTURY
    269  2e8d				  -	      .byte	%00011110	; NEWCENTURY
    270  2e8d				  -
    271  2e8d				  -			;byte %00000000 ; NEWCENTURY
    272  2e8d				  -
    273  2e8d				  -	      .byte	%00111100	; NEWCENTURY
    274  2e8d				  -	      .byte	%01000010	; NEWCENTURY
    275  2e8d				  -	      .byte	%01000010	; NEWCENTURY
    276  2e8d				  -	      .byte	%01000010	; NEWCENTURY
    277  2e8d				  -	      .byte	%00111100	; NEWCENTURY
    278  2e8d				  -	      .byte	%00100100	; NEWCENTURY
    279  2e8d				  -	      .byte	%00100100	; NEWCENTURY
    280  2e8d				  -	      .byte	%00011000	; NEWCENTURY
    281  2e8d				  -
    282  2e8d				  -			;byte %00000000 ; NEWCENTURY
    283  2e8d				  -
    284  2e8d				  -	      .byte	%00111100	; NEWCENTURY
    285  2e8d				  -	      .byte	%00000010	; NEWCENTURY
    286  2e8d				  -	      .byte	%00000010	; NEWCENTURY
    287  2e8d				  -	      .byte	%00000010	; NEWCENTURY
    288  2e8d				  -	      .byte	%00001110	; NEWCENTURY
    289  2e8d				  -	      .byte	%00010010	; NEWCENTURY
    290  2e8d				  -	      .byte	%00010010	; NEWCENTURY
    291  2e8d				  -	      .byte	%00001100	; NEWCENTURY
    292  2e8d				  -
    293  2e8d					      endif		; NEWCENTURY
    294  2e8d
    295  2e8d				  -	      if	fontstyle == WHIMSEY
    296  2e8d				  -			;byte %00000000 ; WHIMSEY
    297  2e8d				  -
    298  2e8d				  -	      .byte	%00111100	; WHIMSEY
    299  2e8d				  -	      .byte	%01111110	; WHIMSEY
    300  2e8d				  -	      .byte	%01111110	; WHIMSEY
    301  2e8d				  -	      .byte	%01111110	; WHIMSEY
    302  2e8d				  -	      .byte	%01110110	; WHIMSEY
    303  2e8d				  -	      .byte	%01110110	; WHIMSEY
    304  2e8d				  -	      .byte	%01110110	; WHIMSEY
    305  2e8d				  -	      .byte	%00111100	; WHIMSEY
    306  2e8d				  -
    307  2e8d				  -			;byte %00000000 ; WHIMSEY
    308  2e8d				  -
    309  2e8d				  -	      .byte	%01111110	; WHIMSEY
    310  2e8d				  -	      .byte	%01111110	; WHIMSEY
    311  2e8d				  -	      .byte	%01111110	; WHIMSEY
    312  2e8d				  -	      .byte	%00011000	; WHIMSEY
    313  2e8d				  -	      .byte	%00011000	; WHIMSEY
    314  2e8d				  -	      .byte	%00011000	; WHIMSEY
    315  2e8d				  -	      .byte	%01111000	; WHIMSEY
    316  2e8d				  -	      .byte	%00011000	; WHIMSEY
    317  2e8d				  -
    318  2e8d				  -			;byte %00000000 ; WHIMSEY
    319  2e8d				  -
    320  2e8d				  -	      .byte	%01111110	; WHIMSEY
    321  2e8d				  -	      .byte	%01111110	; WHIMSEY
    322  2e8d				  -	      .byte	%01111110	; WHIMSEY
    323  2e8d				  -	      .byte	%01111000	; WHIMSEY
    324  2e8d				  -	      .byte	%00111100	; WHIMSEY
    325  2e8d				  -	      .byte	%00001110	; WHIMSEY
    326  2e8d				  -	      .byte	%01100110	; WHIMSEY
    327  2e8d				  -	      .byte	%00111100	; WHIMSEY
    328  2e8d				  -
    329  2e8d				  -			;byte %00000000 ; WHIMSEY
    330  2e8d				  -
    331  2e8d				  -	      .byte	%00111100	; WHIMSEY
    332  2e8d				  -	      .byte	%01111110	; WHIMSEY
    333  2e8d				  -	      .byte	%01111110	; WHIMSEY
    334  2e8d				  -	      .byte	%01101110	; WHIMSEY
    335  2e8d				  -	      .byte	%00001110	; WHIMSEY
    336  2e8d				  -	      .byte	%00111100	; WHIMSEY
    337  2e8d				  -	      .byte	%00011100	; WHIMSEY
    338  2e8d				  -	      .byte	%01111110	; WHIMSEY
    339  2e8d				  -
    340  2e8d				  -			;byte %00000000 ; WHIMSEY
    341  2e8d				  -
    342  2e8d				  -	      .byte	%00011100	; WHIMSEY
    343  2e8d				  -	      .byte	%00011100	; WHIMSEY
    344  2e8d				  -	      .byte	%01111110	; WHIMSEY
    345  2e8d				  -	      .byte	%01011100	; WHIMSEY
    346  2e8d				  -	      .byte	%01011100	; WHIMSEY
    347  2e8d				  -	      .byte	%00011100	; WHIMSEY
    348  2e8d				  -	      .byte	%00011100	; WHIMSEY
    349  2e8d				  -	      .byte	%00011100	; WHIMSEY
    350  2e8d				  -
    351  2e8d				  -			;byte %00000000 ; WHIMSEY
    352  2e8d				  -
    353  2e8d				  -	      .byte	%00111100	; WHIMSEY
    354  2e8d				  -	      .byte	%01111110	; WHIMSEY
    355  2e8d				  -	      .byte	%01111110	; WHIMSEY
    356  2e8d				  -	      .byte	%01101110	; WHIMSEY
    357  2e8d				  -	      .byte	%00001110	; WHIMSEY
    358  2e8d				  -	      .byte	%01111100	; WHIMSEY
    359  2e8d				  -	      .byte	%01110000	; WHIMSEY
    360  2e8d				  -	      .byte	%01111110	; WHIMSEY
    361  2e8d				  -
    362  2e8d				  -			;byte %00000000 ; WHIMSEY
    363  2e8d				  -
    364  2e8d				  -	      .byte	%00111100	; WHIMSEY
    365  2e8d				  -	      .byte	%01111110	; WHIMSEY
    366  2e8d				  -	      .byte	%01111110	; WHIMSEY
    367  2e8d				  -	      .byte	%01110110	; WHIMSEY
    368  2e8d				  -	      .byte	%01110110	; WHIMSEY
    369  2e8d				  -	      .byte	%01111100	; WHIMSEY
    370  2e8d				  -	      .byte	%01110000	; WHIMSEY
    371  2e8d				  -	      .byte	%00111110	; WHIMSEY
    372  2e8d				  -
    373  2e8d				  -			;byte %00000000 ; WHIMSEY
    374  2e8d				  -
    375  2e8d				  -	      .byte	%01111000	; WHIMSEY
    376  2e8d				  -	      .byte	%01111000	; WHIMSEY
    377  2e8d				  -	      .byte	%01111000	; WHIMSEY
    378  2e8d				  -	      .byte	%00111100	; WHIMSEY
    379  2e8d				  -	      .byte	%00011100	; WHIMSEY
    380  2e8d				  -	      .byte	%00001110	; WHIMSEY
    381  2e8d				  -	      .byte	%00001110	; WHIMSEY
    382  2e8d				  -	      .byte	%01111110	; WHIMSEY
    383  2e8d				  -
    384  2e8d				  -			;byte %00000000 ; WHIMSEY
    385  2e8d				  -
    386  2e8d				  -	      .byte	%00111100	; WHIMSEY
    387  2e8d				  -	      .byte	%01111110	; WHIMSEY
    388  2e8d				  -	      .byte	%01111110	; WHIMSEY
    389  2e8d				  -	      .byte	%01110110	; WHIMSEY
    390  2e8d				  -	      .byte	%01110110	; WHIMSEY
    391  2e8d				  -	      .byte	%00111100	; WHIMSEY
    392  2e8d				  -	      .byte	%01110110	; WHIMSEY
    393  2e8d				  -	      .byte	%00111100	; WHIMSEY
    394  2e8d				  -
    395  2e8d				  -			;byte %00000000 ; WHIMSEY
    396  2e8d				  -
    397  2e8d				  -	      .byte	%00111100	; WHIMSEY
    398  2e8d				  -	      .byte	%01111110	; WHIMSEY
    399  2e8d				  -	      .byte	%01111110	; WHIMSEY
    400  2e8d				  -	      .byte	%01110110	; WHIMSEY
    401  2e8d				  -	      .byte	%00000110	; WHIMSEY
    402  2e8d				  -	      .byte	%00111110	; WHIMSEY
    403  2e8d				  -	      .byte	%01110110	; WHIMSEY
    404  2e8d				  -	      .byte	%00111100	; WHIMSEY
    405  2e8d				  -
    406  2e8d					      endif		; WHIMSEY
    407  2e8d
    408  2e8d				  -	      if	fontstyle == ALARMCLOCK
    409  2e8d				  -
    410  2e8d				  -			;byte %00000000 ; ALARMCLOCK
    411  2e8d				  -
    412  2e8d				  -	      .byte	%00111100	; ALARMCLOCK
    413  2e8d				  -	      .byte	%01000010	; ALARMCLOCK
    414  2e8d				  -	      .byte	%01000010	; ALARMCLOCK
    415  2e8d				  -	      .byte	%01000010	; ALARMCLOCK
    416  2e8d				  -	      .byte	%00000000	; ALARMCLOCK
    417  2e8d				  -	      .byte	%01000010	; ALARMCLOCK
    418  2e8d				  -	      .byte	%01000010	; ALARMCLOCK
    419  2e8d				  -	      .byte	%00111100	; ALARMCLOCK
    420  2e8d				  -
    421  2e8d				  -			;byte %00000000 ; ALARMCLOCK
    422  2e8d				  -
    423  2e8d				  -	      .byte	%00000000	; ALARMCLOCK
    424  2e8d				  -	      .byte	%00000010	; ALARMCLOCK
    425  2e8d				  -	      .byte	%00000010	; ALARMCLOCK
    426  2e8d				  -	      .byte	%00000010	; ALARMCLOCK
    427  2e8d				  -	      .byte	%00000000	; ALARMCLOCK
    428  2e8d				  -	      .byte	%00000010	; ALARMCLOCK
    429  2e8d				  -	      .byte	%00000010	; ALARMCLOCK
    430  2e8d				  -	      .byte	%00000000	; ALARMCLOCK
    431  2e8d				  -
    432  2e8d				  -			;byte %00000000 ; ALARMCLOCK
    433  2e8d				  -
    434  2e8d				  -	      .byte	%00111100	; ALARMCLOCK
    435  2e8d				  -	      .byte	%01000000	; ALARMCLOCK
    436  2e8d				  -	      .byte	%01000000	; ALARMCLOCK
    437  2e8d				  -	      .byte	%01000000	; ALARMCLOCK
    438  2e8d				  -	      .byte	%00111100	; ALARMCLOCK
    439  2e8d				  -	      .byte	%00000010	; ALARMCLOCK
    440  2e8d				  -	      .byte	%00000010	; ALARMCLOCK
    441  2e8d				  -	      .byte	%00111100	; ALARMCLOCK
    442  2e8d				  -
    443  2e8d				  -			;byte %00000000 ; ALARMCLOCK
    444  2e8d				  -
    445  2e8d				  -	      .byte	%00111100	; ALARMCLOCK
    446  2e8d				  -	      .byte	%00000010	; ALARMCLOCK
    447  2e8d				  -	      .byte	%00000010	; ALARMCLOCK
    448  2e8d				  -	      .byte	%00000010	; ALARMCLOCK
    449  2e8d				  -	      .byte	%00111100	; ALARMCLOCK
    450  2e8d				  -	      .byte	%00000010	; ALARMCLOCK
    451  2e8d				  -	      .byte	%00000010	; ALARMCLOCK
    452  2e8d				  -	      .byte	%00111100	; ALARMCLOCK
    453  2e8d				  -
    454  2e8d				  -			;byte %00000000 ; ALARMCLOCK
    455  2e8d				  -
    456  2e8d				  -	      .byte	%00000000	; ALARMCLOCK
    457  2e8d				  -	      .byte	%00000010	; ALARMCLOCK
    458  2e8d				  -	      .byte	%00000010	; ALARMCLOCK
    459  2e8d				  -	      .byte	%00000010	; ALARMCLOCK
    460  2e8d				  -	      .byte	%00111100	; ALARMCLOCK
    461  2e8d				  -	      .byte	%01000010	; ALARMCLOCK
    462  2e8d				  -	      .byte	%01000010	; ALARMCLOCK
    463  2e8d				  -	      .byte	%00000000	; ALARMCLOCK
    464  2e8d				  -
    465  2e8d				  -			;byte %00000000 ; ALARMCLOCK
    466  2e8d				  -
    467  2e8d				  -	      .byte	%00111100	; ALARMCLOCK
    468  2e8d				  -	      .byte	%00000010	; ALARMCLOCK
    469  2e8d				  -	      .byte	%00000010	; ALARMCLOCK
    470  2e8d				  -	      .byte	%00000010	; ALARMCLOCK
    471  2e8d				  -	      .byte	%00111100	; ALARMCLOCK
    472  2e8d				  -	      .byte	%01000000	; ALARMCLOCK
    473  2e8d				  -	      .byte	%01000000	; ALARMCLOCK
    474  2e8d				  -	      .byte	%00111100	; ALARMCLOCK
    475  2e8d				  -
    476  2e8d				  -			;byte %00000000 ; ALARMCLOCK
    477  2e8d				  -
    478  2e8d				  -	      .byte	%00111100	; ALARMCLOCK
    479  2e8d				  -	      .byte	%01000010	; ALARMCLOCK
    480  2e8d				  -	      .byte	%01000010	; ALARMCLOCK
    481  2e8d				  -	      .byte	%01000010	; ALARMCLOCK
    482  2e8d				  -	      .byte	%00111100	; ALARMCLOCK
    483  2e8d				  -	      .byte	%01000000	; ALARMCLOCK
    484  2e8d				  -	      .byte	%01000000	; ALARMCLOCK
    485  2e8d				  -	      .byte	%00111100	; ALARMCLOCK
    486  2e8d				  -
    487  2e8d				  -			;byte %00000000 ; ALARMCLOCK
    488  2e8d				  -
    489  2e8d				  -	      .byte	%00000000	; ALARMCLOCK
    490  2e8d				  -	      .byte	%00000010	; ALARMCLOCK
    491  2e8d				  -	      .byte	%00000010	; ALARMCLOCK
    492  2e8d				  -	      .byte	%00000010	; ALARMCLOCK
    493  2e8d				  -	      .byte	%00000000	; ALARMCLOCK
    494  2e8d				  -	      .byte	%00000010	; ALARMCLOCK
    495  2e8d				  -	      .byte	%00000010	; ALARMCLOCK
    496  2e8d				  -	      .byte	%00111100	; ALARMCLOCK
    497  2e8d				  -
    498  2e8d				  -			;byte %00000000 ; ALARMCLOCK
    499  2e8d				  -
    500  2e8d				  -	      .byte	%00111100	; ALARMCLOCK
    501  2e8d				  -	      .byte	%01000010	; ALARMCLOCK
    502  2e8d				  -	      .byte	%01000010	; ALARMCLOCK
    503  2e8d				  -	      .byte	%01000010	; ALARMCLOCK
    504  2e8d				  -	      .byte	%00111100	; ALARMCLOCK
    505  2e8d				  -	      .byte	%01000010	; ALARMCLOCK
    506  2e8d				  -	      .byte	%01000010	; ALARMCLOCK
    507  2e8d				  -	      .byte	%00111100	; ALARMCLOCK
    508  2e8d				  -
    509  2e8d				  -			;byte %00000000 ; ALARMCLOCK
    510  2e8d				  -
    511  2e8d				  -	      .byte	%00111100	; ALARMCLOCK
    512  2e8d				  -	      .byte	%00000010	; ALARMCLOCK
    513  2e8d				  -	      .byte	%00000010	; ALARMCLOCK
    514  2e8d				  -	      .byte	%00000010	; ALARMCLOCK
    515  2e8d				  -	      .byte	%00111100	; ALARMCLOCK
    516  2e8d				  -	      .byte	%01000010	; ALARMCLOCK
    517  2e8d				  -	      .byte	%01000010	; ALARMCLOCK
    518  2e8d				  -	      .byte	%00111100	; ALARMCLOCK
    519  2e8d				  -
    520  2e8d				  -
    521  2e8d					      endif		; ALARMCLOCK
    522  2e8d
    523  2e8d				  -	      if	fontstyle == HANDWRITTEN
    524  2e8d				  -
    525  2e8d				  -			;byte %00000000 ; HANDWRITTEN
    526  2e8d				  -
    527  2e8d				  -	      .byte	%00110000	; HANDWRITTEN
    528  2e8d				  -	      .byte	%01001000	; HANDWRITTEN
    529  2e8d				  -	      .byte	%01001000	; HANDWRITTEN
    530  2e8d				  -	      .byte	%01001000	; HANDWRITTEN
    531  2e8d				  -	      .byte	%00100100	; HANDWRITTEN
    532  2e8d				  -	      .byte	%00100100	; HANDWRITTEN
    533  2e8d				  -	      .byte	%00010010	; HANDWRITTEN
    534  2e8d				  -	      .byte	%00001100	; HANDWRITTEN
    535  2e8d				  -
    536  2e8d				  -			;byte %00000000 ; HANDWRITTEN
    537  2e8d				  -
    538  2e8d				  -	      .byte	%00010000	; HANDWRITTEN
    539  2e8d				  -	      .byte	%00010000	; HANDWRITTEN
    540  2e8d				  -	      .byte	%00010000	; HANDWRITTEN
    541  2e8d				  -	      .byte	%00001000	; HANDWRITTEN
    542  2e8d				  -	      .byte	%00001000	; HANDWRITTEN
    543  2e8d				  -	      .byte	%00001000	; HANDWRITTEN
    544  2e8d				  -	      .byte	%00000100	; HANDWRITTEN
    545  2e8d				  -	      .byte	%00000100	; HANDWRITTEN
    546  2e8d				  -
    547  2e8d				  -			;byte %00000000 ; HANDWRITTEN
    548  2e8d				  -
    549  2e8d				  -	      .byte	%01110000	; HANDWRITTEN
    550  2e8d				  -	      .byte	%01001100	; HANDWRITTEN
    551  2e8d				  -	      .byte	%01000000	; HANDWRITTEN
    552  2e8d				  -	      .byte	%00100000	; HANDWRITTEN
    553  2e8d				  -	      .byte	%00011000	; HANDWRITTEN
    554  2e8d				  -	      .byte	%00000100	; HANDWRITTEN
    555  2e8d				  -	      .byte	%00100010	; HANDWRITTEN
    556  2e8d				  -	      .byte	%00011100	; HANDWRITTEN
    557  2e8d				  -
    558  2e8d				  -			;byte %00000000 ; HANDWRITTEN
    559  2e8d				  -
    560  2e8d				  -	      .byte	%00110000	; HANDWRITTEN
    561  2e8d				  -	      .byte	%01001000	; HANDWRITTEN
    562  2e8d				  -	      .byte	%00000100	; HANDWRITTEN
    563  2e8d				  -	      .byte	%00000100	; HANDWRITTEN
    564  2e8d				  -	      .byte	%00011000	; HANDWRITTEN
    565  2e8d				  -	      .byte	%00000100	; HANDWRITTEN
    566  2e8d				  -	      .byte	%00100010	; HANDWRITTEN
    567  2e8d				  -	      .byte	%00011100	; HANDWRITTEN
    568  2e8d				  -
    569  2e8d				  -			;byte %00000000 ; HANDWRITTEN
    570  2e8d				  -
    571  2e8d				  -	      .byte	%00010000	; HANDWRITTEN
    572  2e8d				  -	      .byte	%00010000	; HANDWRITTEN
    573  2e8d				  -	      .byte	%00001000	; HANDWRITTEN
    574  2e8d				  -	      .byte	%01111000	; HANDWRITTEN
    575  2e8d				  -	      .byte	%01000100	; HANDWRITTEN
    576  2e8d				  -	      .byte	%00100100	; HANDWRITTEN
    577  2e8d				  -	      .byte	%00010010	; HANDWRITTEN
    578  2e8d				  -	      .byte	%00000010	; HANDWRITTEN
    579  2e8d				  -
    580  2e8d				  -			;byte %00000000 ; HANDWRITTEN
    581  2e8d				  -
    582  2e8d				  -	      .byte	%00110000	; HANDWRITTEN
    583  2e8d				  -	      .byte	%01001000	; HANDWRITTEN
    584  2e8d				  -	      .byte	%00000100	; HANDWRITTEN
    585  2e8d				  -	      .byte	%00000100	; HANDWRITTEN
    586  2e8d				  -	      .byte	%00011000	; HANDWRITTEN
    587  2e8d				  -	      .byte	%00100000	; HANDWRITTEN
    588  2e8d				  -	      .byte	%00010010	; HANDWRITTEN
    589  2e8d				  -	      .byte	%00001100	; HANDWRITTEN
    590  2e8d				  -
    591  2e8d				  -			;byte %00000000 ; HANDWRITTEN
    592  2e8d				  -
    593  2e8d				  -	      .byte	%00010000	; HANDWRITTEN
    594  2e8d				  -	      .byte	%00101000	; HANDWRITTEN
    595  2e8d				  -	      .byte	%00100100	; HANDWRITTEN
    596  2e8d				  -	      .byte	%00100100	; HANDWRITTEN
    597  2e8d				  -	      .byte	%00011000	; HANDWRITTEN
    598  2e8d				  -	      .byte	%00010000	; HANDWRITTEN
    599  2e8d				  -	      .byte	%00001000	; HANDWRITTEN
    600  2e8d				  -	      .byte	%00000110	; HANDWRITTEN
    601  2e8d				  -
    602  2e8d				  -			;byte %00000000 ; HANDWRITTEN
    603  2e8d				  -
    604  2e8d				  -	      .byte	%00010000	; HANDWRITTEN
    605  2e8d				  -	      .byte	%00010000	; HANDWRITTEN
    606  2e8d				  -	      .byte	%00010000	; HANDWRITTEN
    607  2e8d				  -	      .byte	%00001000	; HANDWRITTEN
    608  2e8d				  -	      .byte	%00000100	; HANDWRITTEN
    609  2e8d				  -	      .byte	%00000100	; HANDWRITTEN
    610  2e8d				  -	      .byte	%00110010	; HANDWRITTEN
    611  2e8d				  -	      .byte	%00001110	; HANDWRITTEN
    612  2e8d				  -
    613  2e8d				  -			;byte %00000000 ; HANDWRITTEN
    614  2e8d				  -
    615  2e8d				  -	      .byte	%00110000	; HANDWRITTEN
    616  2e8d				  -	      .byte	%01001000	; HANDWRITTEN
    617  2e8d				  -	      .byte	%01000100	; HANDWRITTEN
    618  2e8d				  -	      .byte	%00100100	; HANDWRITTEN
    619  2e8d				  -	      .byte	%00011100	; HANDWRITTEN
    620  2e8d				  -	      .byte	%00010010	; HANDWRITTEN
    621  2e8d				  -	      .byte	%00001010	; HANDWRITTEN
    622  2e8d				  -	      .byte	%00000110	; HANDWRITTEN
    623  2e8d				  -
    624  2e8d				  -			;byte %00000000 ; HANDWRITTEN
    625  2e8d				  -
    626  2e8d				  -	      .byte	%00010000	; HANDWRITTEN
    627  2e8d				  -	      .byte	%00010000	; HANDWRITTEN
    628  2e8d				  -	      .byte	%00001000	; HANDWRITTEN
    629  2e8d				  -	      .byte	%00001000	; HANDWRITTEN
    630  2e8d				  -	      .byte	%00011100	; HANDWRITTEN
    631  2e8d				  -	      .byte	%00100100	; HANDWRITTEN
    632  2e8d				  -	      .byte	%00010010	; HANDWRITTEN
    633  2e8d				  -	      .byte	%00001100	; HANDWRITTEN
    634  2e8d				  -
    635  2e8d					      endif		; HANDWRITTEN
    636  2e8d
    637  2e8d				  -	      if	fontstyle == INTERRUPTED
    638  2e8d				  -
    639  2e8d				  -			;byte %00000000 ; INTERRUPTED
    640  2e8d				  -
    641  2e8d				  -	      .byte	%00110100	; INTERRUPTED
    642  2e8d				  -	      .byte	%01100110	; INTERRUPTED
    643  2e8d				  -	      .byte	%01100110	; INTERRUPTED
    644  2e8d				  -	      .byte	%01100110	; INTERRUPTED
    645  2e8d				  -	      .byte	%01100110	; INTERRUPTED
    646  2e8d				  -	      .byte	%01100110	; INTERRUPTED
    647  2e8d				  -	      .byte	%01100110	; INTERRUPTED
    648  2e8d				  -	      .byte	%00110100	; INTERRUPTED
    649  2e8d				  -
    650  2e8d				  -			;byte %00000000 ; INTERRUPTED
    651  2e8d				  -
    652  2e8d				  -	      .byte	%00111100	; INTERRUPTED
    653  2e8d				  -	      .byte	%00000000	; INTERRUPTED
    654  2e8d				  -	      .byte	%00011000	; INTERRUPTED
    655  2e8d				  -	      .byte	%00011000	; INTERRUPTED
    656  2e8d				  -	      .byte	%00011000	; INTERRUPTED
    657  2e8d				  -	      .byte	%00011000	; INTERRUPTED
    658  2e8d				  -	      .byte	%00011000	; INTERRUPTED
    659  2e8d				  -	      .byte	%00111000	; INTERRUPTED
    660  2e8d				  -
    661  2e8d				  -			;byte %00000000 ; INTERRUPTED
    662  2e8d				  -
    663  2e8d				  -	      .byte	%01101110	; INTERRUPTED
    664  2e8d				  -	      .byte	%01100000	; INTERRUPTED
    665  2e8d				  -	      .byte	%00110000	; INTERRUPTED
    666  2e8d				  -	      .byte	%00011000	; INTERRUPTED
    667  2e8d				  -	      .byte	%00001100	; INTERRUPTED
    668  2e8d				  -	      .byte	%00000110	; INTERRUPTED
    669  2e8d				  -	      .byte	%01000110	; INTERRUPTED
    670  2e8d				  -	      .byte	%00111100	; INTERRUPTED
    671  2e8d				  -
    672  2e8d				  -			;byte %00000000 ; INTERRUPTED
    673  2e8d				  -
    674  2e8d				  -	      .byte	%01111100	; INTERRUPTED
    675  2e8d				  -	      .byte	%00000110	; INTERRUPTED
    676  2e8d				  -	      .byte	%00000110	; INTERRUPTED
    677  2e8d				  -	      .byte	%00000110	; INTERRUPTED
    678  2e8d				  -	      .byte	%01110110	; INTERRUPTED
    679  2e8d				  -	      .byte	%00000110	; INTERRUPTED
    680  2e8d				  -	      .byte	%00000110	; INTERRUPTED
    681  2e8d				  -	      .byte	%01110100	; INTERRUPTED
    682  2e8d				  -
    683  2e8d				  -			;byte %00000000 ; INTERRUPTED
    684  2e8d				  -
    685  2e8d				  -	      .byte	%00000110	; INTERRUPTED
    686  2e8d				  -	      .byte	%00000110	; INTERRUPTED
    687  2e8d				  -	      .byte	%00000110	; INTERRUPTED
    688  2e8d				  -	      .byte	%00000110	; INTERRUPTED
    689  2e8d				  -	      .byte	%01110110	; INTERRUPTED
    690  2e8d				  -	      .byte	%01100110	; INTERRUPTED
    691  2e8d				  -	      .byte	%01100110	; INTERRUPTED
    692  2e8d				  -	      .byte	%01100110	; INTERRUPTED
    693  2e8d				  -
    694  2e8d				  -			;byte %00000000 ; INTERRUPTED
    695  2e8d				  -
    696  2e8d				  -	      .byte	%01111100	; INTERRUPTED
    697  2e8d				  -	      .byte	%00000110	; INTERRUPTED
    698  2e8d				  -	      .byte	%00000110	; INTERRUPTED
    699  2e8d				  -	      .byte	%00000110	; INTERRUPTED
    700  2e8d				  -	      .byte	%01111100	; INTERRUPTED
    701  2e8d				  -	      .byte	%01100000	; INTERRUPTED
    702  2e8d				  -	      .byte	%01100000	; INTERRUPTED
    703  2e8d				  -	      .byte	%01101110	; INTERRUPTED
    704  2e8d				  -
    705  2e8d				  -			;byte %00000000 ; INTERRUPTED
    706  2e8d				  -
    707  2e8d				  -	      .byte	%00101100	; INTERRUPTED
    708  2e8d				  -	      .byte	%01100110	; INTERRUPTED
    709  2e8d				  -	      .byte	%01100110	; INTERRUPTED
    710  2e8d				  -	      .byte	%01100110	; INTERRUPTED
    711  2e8d				  -	      .byte	%01101100	; INTERRUPTED
    712  2e8d				  -	      .byte	%01100000	; INTERRUPTED
    713  2e8d				  -	      .byte	%00110000	; INTERRUPTED
    714  2e8d				  -	      .byte	%00011100	; INTERRUPTED
    715  2e8d				  -
    716  2e8d				  -			;byte %00000000 ; INTERRUPTED
    717  2e8d				  -
    718  2e8d				  -	      .byte	%00011000	; INTERRUPTED
    719  2e8d				  -	      .byte	%00011000	; INTERRUPTED
    720  2e8d				  -	      .byte	%00011000	; INTERRUPTED
    721  2e8d				  -	      .byte	%00011100	; INTERRUPTED
    722  2e8d				  -	      .byte	%00001110	; INTERRUPTED
    723  2e8d				  -	      .byte	%00000110	; INTERRUPTED
    724  2e8d				  -	      .byte	%00000000	; INTERRUPTED
    725  2e8d				  -	      .byte	%01111110	; INTERRUPTED
    726  2e8d				  -
    727  2e8d				  -			;byte %00000000 ; INTERRUPTED
    728  2e8d				  -
    729  2e8d				  -	      .byte	%00110100	; INTERRUPTED
    730  2e8d				  -	      .byte	%01100110	; INTERRUPTED
    731  2e8d				  -	      .byte	%01100110	; INTERRUPTED
    732  2e8d				  -	      .byte	%01100110	; INTERRUPTED
    733  2e8d				  -	      .byte	%00110100	; INTERRUPTED
    734  2e8d				  -	      .byte	%01100110	; INTERRUPTED
    735  2e8d				  -	      .byte	%01100110	; INTERRUPTED
    736  2e8d				  -	      .byte	%00110100	; INTERRUPTED
    737  2e8d				  -
    738  2e8d				  -			;byte %00000000 ; INTERRUPTED
    739  2e8d				  -
    740  2e8d				  -	      .byte	%00111000	; INTERRUPTED
    741  2e8d				  -	      .byte	%00001100	; INTERRUPTED
    742  2e8d				  -	      .byte	%00000110	; INTERRUPTED
    743  2e8d				  -	      .byte	%00110110	; INTERRUPTED
    744  2e8d				  -	      .byte	%01100110	; INTERRUPTED
    745  2e8d				  -	      .byte	%01100110	; INTERRUPTED
    746  2e8d				  -	      .byte	%01100110	; INTERRUPTED
    747  2e8d				  -	      .byte	%00110100	; INTERRUPTED
    748  2e8d				  -
    749  2e8d					      endif		; INTERRUPTED
    750  2e8d
    751  2e8d
    752  2e8d				  -	      if	fontstyle == TINY
    753  2e8d				  -
    754  2e8d				  -			;byte %00000000 ; TINY
    755  2e8d				  -
    756  2e8d				  -	      .byte	%00000000	; TINY
    757  2e8d				  -	      .byte	%00111000	; TINY
    758  2e8d				  -	      .byte	%00101000	; TINY
    759  2e8d				  -	      .byte	%00101000	; TINY
    760  2e8d				  -	      .byte	%00101000	; TINY
    761  2e8d				  -	      .byte	%00111000	; TINY
    762  2e8d				  -	      .byte	%00000000	; TINY
    763  2e8d				  -	      .byte	%00000000	; TINY
    764  2e8d				  -
    765  2e8d				  -			;byte %00000000 ; TINY
    766  2e8d				  -
    767  2e8d				  -	      .byte	%00000000	; TINY
    768  2e8d				  -	      .byte	%00010000	; TINY
    769  2e8d				  -	      .byte	%00010000	; TINY
    770  2e8d				  -	      .byte	%00010000	; TINY
    771  2e8d				  -	      .byte	%00010000	; TINY
    772  2e8d				  -	      .byte	%00010000	; TINY
    773  2e8d				  -	      .byte	%00000000	; TINY
    774  2e8d				  -	      .byte	%00000000	; TINY
    775  2e8d				  -
    776  2e8d				  -			;byte %00000000 ; TINY
    777  2e8d				  -
    778  2e8d				  -	      .byte	%00000000	; TINY
    779  2e8d				  -	      .byte	%00111000	; TINY
    780  2e8d				  -	      .byte	%00100000	; TINY
    781  2e8d				  -	      .byte	%00111000	; TINY
    782  2e8d				  -	      .byte	%00001000	; TINY
    783  2e8d				  -	      .byte	%00111000	; TINY
    784  2e8d				  -	      .byte	%00000000	; TINY
    785  2e8d				  -	      .byte	%00000000	; TINY
    786  2e8d				  -
    787  2e8d				  -			;byte %00000000 ; TINY
    788  2e8d				  -
    789  2e8d				  -	      .byte	%00000000	; TINY
    790  2e8d				  -	      .byte	%00111000	; TINY
    791  2e8d				  -	      .byte	%00001000	; TINY
    792  2e8d				  -	      .byte	%00111000	; TINY
    793  2e8d				  -	      .byte	%00001000	; TINY
    794  2e8d				  -	      .byte	%00111000	; TINY
    795  2e8d				  -	      .byte	%00000000	; TINY
    796  2e8d				  -	      .byte	%00000000	; TINY
    797  2e8d				  -
    798  2e8d				  -			;byte %00000000 ; TINY
    799  2e8d				  -
    800  2e8d				  -	      .byte	%00000000	; TINY
    801  2e8d				  -	      .byte	%00001000	; TINY
    802  2e8d				  -	      .byte	%00001000	; TINY
    803  2e8d				  -	      .byte	%00111000	; TINY
    804  2e8d				  -	      .byte	%00101000	; TINY
    805  2e8d				  -	      .byte	%00101000	; TINY
    806  2e8d				  -	      .byte	%00000000	; TINY
    807  2e8d				  -	      .byte	%00000000	; TINY
    808  2e8d				  -
    809  2e8d				  -			;byte %00000000 ; TINY
    810  2e8d				  -
    811  2e8d				  -	      .byte	%00000000	; TINY
    812  2e8d				  -	      .byte	%00111000	; TINY
    813  2e8d				  -	      .byte	%00001000	; TINY
    814  2e8d				  -	      .byte	%00111000	; TINY
    815  2e8d				  -	      .byte	%00100000	; TINY
    816  2e8d				  -	      .byte	%00111000	; TINY
    817  2e8d				  -	      .byte	%00000000	; TINY
    818  2e8d				  -	      .byte	%00000000	; TINY
    819  2e8d				  -
    820  2e8d				  -			;byte %00000000 ; TINY
    821  2e8d				  -
    822  2e8d				  -	      .byte	%00000000	; TINY
    823  2e8d				  -	      .byte	%00111000	; TINY
    824  2e8d				  -	      .byte	%00101000	; TINY
    825  2e8d				  -	      .byte	%00111000	; TINY
    826  2e8d				  -	      .byte	%00100000	; TINY
    827  2e8d				  -	      .byte	%00111000	; TINY
    828  2e8d				  -	      .byte	%00000000	; TINY
    829  2e8d				  -	      .byte	%00000000	; TINY
    830  2e8d				  -
    831  2e8d				  -			;byte %00000000 ; TINY
    832  2e8d				  -
    833  2e8d				  -	      .byte	%00000000	; TINY
    834  2e8d				  -	      .byte	%00001000	; TINY
    835  2e8d				  -	      .byte	%00001000	; TINY
    836  2e8d				  -	      .byte	%00001000	; TINY
    837  2e8d				  -	      .byte	%00001000	; TINY
    838  2e8d				  -	      .byte	%00111000	; TINY
    839  2e8d				  -	      .byte	%00000000	; TINY
    840  2e8d				  -	      .byte	%00000000	; TINY
    841  2e8d				  -
    842  2e8d				  -			;byte %00000000 ; TINY
    843  2e8d				  -
    844  2e8d				  -	      .byte	%00000000	; TINY
    845  2e8d				  -	      .byte	%00111000	; TINY
    846  2e8d				  -	      .byte	%00101000	; TINY
    847  2e8d				  -	      .byte	%00111000	; TINY
    848  2e8d				  -	      .byte	%00101000	; TINY
    849  2e8d				  -	      .byte	%00111000	; TINY
    850  2e8d				  -	      .byte	%00000000	; TINY
    851  2e8d				  -	      .byte	%00000000	; TINY
    852  2e8d				  -
    853  2e8d				  -			;byte %00000000 ; TINY
    854  2e8d				  -
    855  2e8d				  -	      .byte	%00000000	; TINY
    856  2e8d				  -	      .byte	%00001000	; TINY
    857  2e8d				  -	      .byte	%00001000	; TINY
    858  2e8d				  -	      .byte	%00111000	; TINY
    859  2e8d				  -	      .byte	%00101000	; TINY
    860  2e8d				  -	      .byte	%00111000	; TINY
    861  2e8d				  -	      .byte	%00000000	; TINY
    862  2e8d				  -	      .byte	%00000000	; TINY
    863  2e8d				  -
    864  2e8d					      endif		; TINY
    865  2e8d
    866  2e8d				  -	      if	fontstyle == RETROPUTER
    867  2e8d				  -
    868  2e8d				  -			;byte %00000000 ; RETROPUTER
    869  2e8d				  -
    870  2e8d				  -	      .byte	%01111110	; RETROPUTER
    871  2e8d				  -	      .byte	%01000110	; RETROPUTER
    872  2e8d				  -	      .byte	%01000110	; RETROPUTER
    873  2e8d				  -	      .byte	%01000110	; RETROPUTER
    874  2e8d				  -	      .byte	%01100010	; RETROPUTER
    875  2e8d				  -	      .byte	%01100010	; RETROPUTER
    876  2e8d				  -	      .byte	%01100010	; RETROPUTER
    877  2e8d				  -	      .byte	%01111110	; RETROPUTER
    878  2e8d				  -
    879  2e8d				  -			;byte %00000000 ; RETROPUTER
    880  2e8d				  -
    881  2e8d				  -	      .byte	%00111000	; RETROPUTER
    882  2e8d				  -	      .byte	%00111000	; RETROPUTER
    883  2e8d				  -	      .byte	%00111000	; RETROPUTER
    884  2e8d				  -	      .byte	%00111000	; RETROPUTER
    885  2e8d				  -	      .byte	%00011000	; RETROPUTER
    886  2e8d				  -	      .byte	%00011000	; RETROPUTER
    887  2e8d				  -	      .byte	%00011000	; RETROPUTER
    888  2e8d				  -	      .byte	%00011000	; RETROPUTER
    889  2e8d				  -
    890  2e8d				  -			;byte %00000000 ; RETROPUTER
    891  2e8d				  -
    892  2e8d				  -	      .byte	%01111110	; RETROPUTER
    893  2e8d				  -	      .byte	%01100000	; RETROPUTER
    894  2e8d				  -	      .byte	%01100000	; RETROPUTER
    895  2e8d				  -	      .byte	%01100000	; RETROPUTER
    896  2e8d				  -	      .byte	%00111110	; RETROPUTER
    897  2e8d				  -	      .byte	%00000010	; RETROPUTER
    898  2e8d				  -	      .byte	%01000010	; RETROPUTER
    899  2e8d				  -	      .byte	%01111110	; RETROPUTER
    900  2e8d				  -
    901  2e8d				  -			;byte %00000000 ; RETROPUTER
    902  2e8d				  -
    903  2e8d				  -	      .byte	%01111110	; RETROPUTER
    904  2e8d				  -	      .byte	%01000110	; RETROPUTER
    905  2e8d				  -	      .byte	%00000110	; RETROPUTER
    906  2e8d				  -	      .byte	%00000110	; RETROPUTER
    907  2e8d				  -	      .byte	%00111110	; RETROPUTER
    908  2e8d				  -	      .byte	%00000010	; RETROPUTER
    909  2e8d				  -	      .byte	%01000010	; RETROPUTER
    910  2e8d				  -	      .byte	%01111110	; RETROPUTER
    911  2e8d				  -
    912  2e8d				  -			;byte %00000000 ; RETROPUTER
    913  2e8d				  -
    914  2e8d				  -	      .byte	%00001100	; RETROPUTER
    915  2e8d				  -	      .byte	%00001100	; RETROPUTER
    916  2e8d				  -	      .byte	%00001100	; RETROPUTER
    917  2e8d				  -	      .byte	%01111110	; RETROPUTER
    918  2e8d				  -	      .byte	%01000100	; RETROPUTER
    919  2e8d				  -	      .byte	%01000100	; RETROPUTER
    920  2e8d				  -	      .byte	%01000100	; RETROPUTER
    921  2e8d				  -	      .byte	%00000100	; RETROPUTER
    922  2e8d				  -
    923  2e8d				  -			;byte %00000000 ; RETROPUTER
    924  2e8d				  -
    925  2e8d				  -	      .byte	%01111110	; RETROPUTER
    926  2e8d				  -	      .byte	%01000110	; RETROPUTER
    927  2e8d				  -	      .byte	%00000110	; RETROPUTER
    928  2e8d				  -	      .byte	%00000110	; RETROPUTER
    929  2e8d				  -	      .byte	%01111100	; RETROPUTER
    930  2e8d				  -	      .byte	%01000000	; RETROPUTER
    931  2e8d				  -	      .byte	%01000000	; RETROPUTER
    932  2e8d				  -	      .byte	%01111110	; RETROPUTER
    933  2e8d				  -
    934  2e8d				  -			;byte %00000000 ; RETROPUTER
    935  2e8d				  -
    936  2e8d				  -	      .byte	%01111110	; RETROPUTER
    937  2e8d				  -	      .byte	%01000110	; RETROPUTER
    938  2e8d				  -	      .byte	%01000110	; RETROPUTER
    939  2e8d				  -	      .byte	%01000110	; RETROPUTER
    940  2e8d				  -	      .byte	%01111100	; RETROPUTER
    941  2e8d				  -	      .byte	%01000000	; RETROPUTER
    942  2e8d				  -	      .byte	%01000010	; RETROPUTER
    943  2e8d				  -	      .byte	%01111110	; RETROPUTER
    944  2e8d				  -
    945  2e8d				  -			;byte %00000000 ; RETROPUTER
    946  2e8d				  -
    947  2e8d				  -	      .byte	%00001100	; RETROPUTER
    948  2e8d				  -	      .byte	%00001100	; RETROPUTER
    949  2e8d				  -	      .byte	%00001100	; RETROPUTER
    950  2e8d				  -	      .byte	%00001100	; RETROPUTER
    951  2e8d				  -	      .byte	%00000100	; RETROPUTER
    952  2e8d				  -	      .byte	%00000010	; RETROPUTER
    953  2e8d				  -	      .byte	%01000010	; RETROPUTER
    954  2e8d				  -	      .byte	%01111110	; RETROPUTER
    955  2e8d				  -
    956  2e8d				  -			;byte %00000000 ; RETROPUTER
    957  2e8d				  -
    958  2e8d				  -	      .byte	%01111110	; RETROPUTER
    959  2e8d				  -	      .byte	%01000110	; RETROPUTER
    960  2e8d				  -	      .byte	%01000110	; RETROPUTER
    961  2e8d				  -	      .byte	%01000110	; RETROPUTER
    962  2e8d				  -	      .byte	%01111110	; RETROPUTER
    963  2e8d				  -	      .byte	%01000010	; RETROPUTER
    964  2e8d				  -	      .byte	%01000010	; RETROPUTER
    965  2e8d				  -	      .byte	%01111110	; RETROPUTER
    966  2e8d				  -
    967  2e8d				  -			;byte %00000000 ; RETROPUTER
    968  2e8d				  -
    969  2e8d				  -	      .byte	%00000110	; RETROPUTER
    970  2e8d				  -	      .byte	%00000110	; RETROPUTER
    971  2e8d				  -	      .byte	%00000110	; RETROPUTER
    972  2e8d				  -	      .byte	%00000010	; RETROPUTER
    973  2e8d				  -	      .byte	%01111110	; RETROPUTER
    974  2e8d				  -	      .byte	%01000010	; RETROPUTER
    975  2e8d				  -	      .byte	%01000010	; RETROPUTER
    976  2e8d				  -	      .byte	%01111110	; RETROPUTER
    977  2e8d				  -
    978  2e8d					      endif		; RETROPUTER
    979  2e8d
    980  2e8d				  -	      if	fontstyle == CURVES
    981  2e8d				  -
    982  2e8d				  -			;byte %00000000 ; CURVES
    983  2e8d				  -
    984  2e8d				  -	      .byte	%00111100	; CURVES
    985  2e8d				  -	      .byte	%01111110	; CURVES
    986  2e8d				  -	      .byte	%01100110	; CURVES
    987  2e8d				  -	      .byte	%01100110	; CURVES
    988  2e8d				  -	      .byte	%01100110	; CURVES
    989  2e8d				  -	      .byte	%01100110	; CURVES
    990  2e8d				  -	      .byte	%01111110	; CURVES
    991  2e8d				  -	      .byte	%00111100	; CURVES
    992  2e8d				  -
    993  2e8d				  -			;byte %00000000 ; CURVES
    994  2e8d				  -
    995  2e8d				  -	      .byte	%00011000	; CURVES
    996  2e8d				  -	      .byte	%00011000	; CURVES
    997  2e8d				  -	      .byte	%00011000	; CURVES
    998  2e8d				  -	      .byte	%00011000	; CURVES
    999  2e8d				  -	      .byte	%00011000	; CURVES
   1000  2e8d				  -	      .byte	%00011000	; CURVES
   1001  2e8d				  -	      .byte	%01111000	; CURVES
   1002  2e8d				  -	      .byte	%01110000	; CURVES
   1003  2e8d				  -
   1004  2e8d				  -			;byte %00000000 ; CURVES
   1005  2e8d				  -
   1006  2e8d				  -	      .byte	%01111110	; CURVES
   1007  2e8d				  -	      .byte	%01111110	; CURVES
   1008  2e8d				  -	      .byte	%01100000	; CURVES
   1009  2e8d				  -	      .byte	%01111100	; CURVES
   1010  2e8d				  -	      .byte	%00111110	; CURVES
   1011  2e8d				  -	      .byte	%00000110	; CURVES
   1012  2e8d				  -	      .byte	%01111110	; CURVES
   1013  2e8d				  -	      .byte	%01111100	; CURVES
   1014  2e8d				  -
   1015  2e8d				  -			;byte %00000000 ; CURVES
   1016  2e8d				  -
   1017  2e8d				  -	      .byte	%01111100	; CURVES
   1018  2e8d				  -	      .byte	%01111110	; CURVES
   1019  2e8d				  -	      .byte	%00001110	; CURVES
   1020  2e8d				  -	      .byte	%00111100	; CURVES
   1021  2e8d				  -	      .byte	%00111100	; CURVES
   1022  2e8d				  -	      .byte	%00001110	; CURVES
   1023  2e8d				  -	      .byte	%01111110	; CURVES
   1024  2e8d				  -	      .byte	%01111100	; CURVES
   1025  2e8d				  -
   1026  2e8d				  -			;byte %00000000 ; CURVES
   1027  2e8d				  -
   1028  2e8d				  -	      .byte	%00000110	; CURVES
   1029  2e8d				  -	      .byte	%00000110	; CURVES
   1030  2e8d				  -	      .byte	%00111110	; CURVES
   1031  2e8d				  -	      .byte	%01111110	; CURVES
   1032  2e8d				  -	      .byte	%01100110	; CURVES
   1033  2e8d				  -	      .byte	%01100110	; CURVES
   1034  2e8d				  -	      .byte	%01100110	; CURVES
   1035  2e8d				  -	      .byte	%01100110	; CURVES
   1036  2e8d				  -
   1037  2e8d				  -			;byte %00000000 ; CURVES
   1038  2e8d				  -
   1039  2e8d				  -	      .byte	%01111100	; CURVES
   1040  2e8d				  -	      .byte	%01111110	; CURVES
   1041  2e8d				  -	      .byte	%00000110	; CURVES
   1042  2e8d				  -	      .byte	%01111110	; CURVES
   1043  2e8d				  -	      .byte	%01111100	; CURVES
   1044  2e8d				  -	      .byte	%01100000	; CURVES
   1045  2e8d				  -	      .byte	%01111110	; CURVES
   1046  2e8d				  -	      .byte	%01111110	; CURVES
   1047  2e8d				  -
   1048  2e8d				  -			;byte %00000000 ; CURVES
   1049  2e8d				  -
   1050  2e8d				  -	      .byte	%00111100	; CURVES
   1051  2e8d				  -	      .byte	%01111110	; CURVES
   1052  2e8d				  -	      .byte	%01100110	; CURVES
   1053  2e8d				  -	      .byte	%01111110	; CURVES
   1054  2e8d				  -	      .byte	%01111100	; CURVES
   1055  2e8d				  -	      .byte	%01100000	; CURVES
   1056  2e8d				  -	      .byte	%01111110	; CURVES
   1057  2e8d				  -	      .byte	%00111110	; CURVES
   1058  2e8d				  -
   1059  2e8d				  -			;byte %00000000 ; CURVES
   1060  2e8d				  -
   1061  2e8d				  -	      .byte	%00000110	; CURVES
   1062  2e8d				  -	      .byte	%00000110	; CURVES
   1063  2e8d				  -	      .byte	%00000110	; CURVES
   1064  2e8d				  -	      .byte	%00000110	; CURVES
   1065  2e8d				  -	      .byte	%00000110	; CURVES
   1066  2e8d				  -	      .byte	%01100110	; CURVES
   1067  2e8d				  -	      .byte	%01111110	; CURVES
   1068  2e8d				  -	      .byte	%00111100	; CURVES
   1069  2e8d				  -
   1070  2e8d				  -			;byte %00000000 ; CURVES
   1071  2e8d				  -
   1072  2e8d				  -	      .byte	%00111100	; CURVES
   1073  2e8d				  -	      .byte	%01111110	; CURVES
   1074  2e8d				  -	      .byte	%01100110	; CURVES
   1075  2e8d				  -	      .byte	%01111110	; CURVES
   1076  2e8d				  -	      .byte	%00111100	; CURVES
   1077  2e8d				  -	      .byte	%01100110	; CURVES
   1078  2e8d				  -	      .byte	%01111110	; CURVES
   1079  2e8d				  -	      .byte	%00111100	; CURVES
   1080  2e8d				  -
   1081  2e8d				  -			;byte %00000000 ; CURVES
   1082  2e8d				  -
   1083  2e8d				  -	      .byte	%01111100	; CURVES
   1084  2e8d				  -	      .byte	%01111110	; CURVES
   1085  2e8d				  -	      .byte	%00000110	; CURVES
   1086  2e8d				  -	      .byte	%00111110	; CURVES
   1087  2e8d				  -	      .byte	%01111110	; CURVES
   1088  2e8d				  -	      .byte	%01100110	; CURVES
   1089  2e8d				  -	      .byte	%01111110	; CURVES
   1090  2e8d				  -	      .byte	%00111100	; CURVES
   1091  2e8d				  -
   1092  2e8d					      endif		; CURVES
   1093  2e8d
   1094  2e8d
   1095  2e8d				  -	      if	fontstyle == HUSKY
   1096  2e8d				  -
   1097  2e8d				  -			;byte %00000000 ; HUSKY
   1098  2e8d				  -
   1099  2e8d				  -	      .byte	%01111100	; HUSKY
   1100  2e8d				  -	      .byte	%11111110	; HUSKY
   1101  2e8d				  -	      .byte	%11101110	; HUSKY
   1102  2e8d				  -	      .byte	%11101110	; HUSKY
   1103  2e8d				  -	      .byte	%11101110	; HUSKY
   1104  2e8d				  -	      .byte	%11101110	; HUSKY
   1105  2e8d				  -	      .byte	%11111110	; HUSKY
   1106  2e8d				  -	      .byte	%01111100	; HUSKY
   1107  2e8d				  -
   1108  2e8d				  -			;byte %00000000 ; HUSKY
   1109  2e8d				  -
   1110  2e8d				  -	      .byte	%00111000	; HUSKY
   1111  2e8d				  -	      .byte	%00111000	; HUSKY
   1112  2e8d				  -	      .byte	%00111000	; HUSKY
   1113  2e8d				  -	      .byte	%00111000	; HUSKY
   1114  2e8d				  -	      .byte	%00111000	; HUSKY
   1115  2e8d				  -	      .byte	%00111000	; HUSKY
   1116  2e8d				  -	      .byte	%00111000	; HUSKY
   1117  2e8d				  -	      .byte	%00111000	; HUSKY
   1118  2e8d				  -
   1119  2e8d				  -			;byte %00000000 ; HUSKY
   1120  2e8d				  -
   1121  2e8d				  -	      .byte	%11111110	; HUSKY
   1122  2e8d				  -	      .byte	%11111110	; HUSKY
   1123  2e8d				  -	      .byte	%11100000	; HUSKY
   1124  2e8d				  -	      .byte	%11111100	; HUSKY
   1125  2e8d				  -	      .byte	%01111110	; HUSKY
   1126  2e8d				  -	      .byte	%00001110	; HUSKY
   1127  2e8d				  -	      .byte	%11111110	; HUSKY
   1128  2e8d				  -	      .byte	%11111100	; HUSKY
   1129  2e8d				  -
   1130  2e8d				  -			;byte %00000000 ; HUSKY
   1131  2e8d				  -
   1132  2e8d				  -	      .byte	%11111100	; HUSKY
   1133  2e8d				  -	      .byte	%11111110	; HUSKY
   1134  2e8d				  -	      .byte	%00001110	; HUSKY
   1135  2e8d				  -	      .byte	%11111100	; HUSKY
   1136  2e8d				  -	      .byte	%11111100	; HUSKY
   1137  2e8d				  -	      .byte	%00001110	; HUSKY
   1138  2e8d				  -	      .byte	%11111110	; HUSKY
   1139  2e8d				  -	      .byte	%11111100	; HUSKY
   1140  2e8d				  -
   1141  2e8d				  -			;byte %00000000 ; HUSKY
   1142  2e8d				  -
   1143  2e8d				  -	      .byte	%00011100	; HUSKY
   1144  2e8d				  -	      .byte	%00011100	; HUSKY
   1145  2e8d				  -	      .byte	%11111110	; HUSKY
   1146  2e8d				  -	      .byte	%11111110	; HUSKY
   1147  2e8d				  -	      .byte	%11011100	; HUSKY
   1148  2e8d				  -	      .byte	%11011100	; HUSKY
   1149  2e8d				  -	      .byte	%00011100	; HUSKY
   1150  2e8d				  -	      .byte	%00011100	; HUSKY
   1151  2e8d				  -
   1152  2e8d				  -			;byte %00000000 ; HUSKY
   1153  2e8d				  -
   1154  2e8d				  -	      .byte	%11111100	; HUSKY
   1155  2e8d				  -	      .byte	%11111110	; HUSKY
   1156  2e8d				  -	      .byte	%00001110	; HUSKY
   1157  2e8d				  -	      .byte	%11111110	; HUSKY
   1158  2e8d				  -	      .byte	%11111100	; HUSKY
   1159  2e8d				  -	      .byte	%11100000	; HUSKY
   1160  2e8d				  -	      .byte	%11111110	; HUSKY
   1161  2e8d				  -	      .byte	%11111110	; HUSKY
   1162  2e8d				  -
   1163  2e8d				  -			;byte %00000000 ; HUSKY
   1164  2e8d				  -
   1165  2e8d				  -	      .byte	%01111100	; HUSKY
   1166  2e8d				  -	      .byte	%11111110	; HUSKY
   1167  2e8d				  -	      .byte	%11101110	; HUSKY
   1168  2e8d				  -	      .byte	%11111110	; HUSKY
   1169  2e8d				  -	      .byte	%11111100	; HUSKY
   1170  2e8d				  -	      .byte	%11100000	; HUSKY
   1171  2e8d				  -	      .byte	%11111110	; HUSKY
   1172  2e8d				  -	      .byte	%01111110	; HUSKY
   1173  2e8d				  -
   1174  2e8d				  -			;byte %00000000 ; HUSKY
   1175  2e8d				  -
   1176  2e8d				  -	      .byte	%00111000	; HUSKY
   1177  2e8d				  -	      .byte	%00111000	; HUSKY
   1178  2e8d				  -	      .byte	%00111000	; HUSKY
   1179  2e8d				  -	      .byte	%00111000	; HUSKY
   1180  2e8d				  -	      .byte	%00011100	; HUSKY
   1181  2e8d				  -	      .byte	%00001110	; HUSKY
   1182  2e8d				  -	      .byte	%11111110	; HUSKY
   1183  2e8d				  -	      .byte	%11111110	; HUSKY
   1184  2e8d				  -
   1185  2e8d				  -			;byte %00000000 ; HUSKY
   1186  2e8d				  -
   1187  2e8d				  -	      .byte	%01111100	; HUSKY
   1188  2e8d				  -	      .byte	%11111110	; HUSKY
   1189  2e8d				  -	      .byte	%11101110	; HUSKY
   1190  2e8d				  -	      .byte	%11111110	; HUSKY
   1191  2e8d				  -	      .byte	%01111100	; HUSKY
   1192  2e8d				  -	      .byte	%11101110	; HUSKY
   1193  2e8d				  -	      .byte	%11111110	; HUSKY
   1194  2e8d				  -	      .byte	%01111100	; HUSKY
   1195  2e8d				  -
   1196  2e8d				  -			;byte %00000000 ; HUSKY
   1197  2e8d				  -
   1198  2e8d				  -	      .byte	%11111100	; HUSKY
   1199  2e8d				  -	      .byte	%11111110	; HUSKY
   1200  2e8d				  -	      .byte	%00001110	; HUSKY
   1201  2e8d				  -	      .byte	%01111110	; HUSKY
   1202  2e8d				  -	      .byte	%11111110	; HUSKY
   1203  2e8d				  -	      .byte	%11101110	; HUSKY
   1204  2e8d				  -	      .byte	%11111110	; HUSKY
   1205  2e8d				  -	      .byte	%01111100	; HUSKY
   1206  2e8d				  -
   1207  2e8d					      endif		; HUSKY
   1208  2e8d
   1209  2e8d
   1210  2e8d				  -	      if	fontstyle == SNAKE
   1211  2e8d				  -
   1212  2e8d				  -			;byte %00000000 ; SNAKE
   1213  2e8d				  -
   1214  2e8d				  -	      .byte	%01111110	; SNAKE
   1215  2e8d				  -	      .byte	%01000010	; SNAKE
   1216  2e8d				  -	      .byte	%01000010	; SNAKE
   1217  2e8d				  -	      .byte	%01000010	; SNAKE
   1218  2e8d				  -	      .byte	%01000010	; SNAKE
   1219  2e8d				  -	      .byte	%01000010	; SNAKE
   1220  2e8d				  -	      .byte	%01000010	; SNAKE
   1221  2e8d				  -	      .byte	%01111110	; SNAKE
   1222  2e8d				  -
   1223  2e8d				  -			;byte %00000000 ; SNAKE
   1224  2e8d				  -
   1225  2e8d				  -	      .byte	%00111000	; SNAKE
   1226  2e8d				  -	      .byte	%00101000	; SNAKE
   1227  2e8d				  -	      .byte	%00001000	; SNAKE
   1228  2e8d				  -	      .byte	%00001000	; SNAKE
   1229  2e8d				  -	      .byte	%00001000	; SNAKE
   1230  2e8d				  -	      .byte	%00001000	; SNAKE
   1231  2e8d				  -	      .byte	%00001000	; SNAKE
   1232  2e8d				  -	      .byte	%00111000	; SNAKE
   1233  2e8d				  -
   1234  2e8d				  -			;byte %00000000 ; SNAKE
   1235  2e8d				  -
   1236  2e8d				  -	      .byte	%01111110	; SNAKE
   1237  2e8d				  -	      .byte	%01000010	; SNAKE
   1238  2e8d				  -	      .byte	%01000110	; SNAKE
   1239  2e8d				  -	      .byte	%01000000	; SNAKE
   1240  2e8d				  -	      .byte	%01111110	; SNAKE
   1241  2e8d				  -	      .byte	%00000010	; SNAKE
   1242  2e8d				  -	      .byte	%01000010	; SNAKE
   1243  2e8d				  -	      .byte	%01111110	; SNAKE
   1244  2e8d				  -
   1245  2e8d				  -			;byte %00000000 ; SNAKE
   1246  2e8d				  -
   1247  2e8d				  -	      .byte	%01111110	; SNAKE
   1248  2e8d				  -	      .byte	%01000010	; SNAKE
   1249  2e8d				  -	      .byte	%01100010	; SNAKE
   1250  2e8d				  -	      .byte	%00000010	; SNAKE
   1251  2e8d				  -	      .byte	%01111110	; SNAKE
   1252  2e8d				  -	      .byte	%00000010	; SNAKE
   1253  2e8d				  -	      .byte	%01000010	; SNAKE
   1254  2e8d				  -	      .byte	%01111110	; SNAKE
   1255  2e8d				  -
   1256  2e8d				  -			;byte %00000000 ; SNAKE
   1257  2e8d				  -
   1258  2e8d				  -	      .byte	%00001110	; SNAKE
   1259  2e8d				  -	      .byte	%00001010	; SNAKE
   1260  2e8d				  -	      .byte	%00000010	; SNAKE
   1261  2e8d				  -	      .byte	%01111110	; SNAKE
   1262  2e8d				  -	      .byte	%01000010	; SNAKE
   1263  2e8d				  -	      .byte	%01000010	; SNAKE
   1264  2e8d				  -	      .byte	%01000010	; SNAKE
   1265  2e8d				  -	      .byte	%01100110	; SNAKE
   1266  2e8d				  -
   1267  2e8d				  -			;byte %00000000 ; SNAKE
   1268  2e8d				  -
   1269  2e8d				  -	      .byte	%01111110	; SNAKE
   1270  2e8d				  -	      .byte	%01000010	; SNAKE
   1271  2e8d				  -	      .byte	%01100010	; SNAKE
   1272  2e8d				  -	      .byte	%00000010	; SNAKE
   1273  2e8d				  -	      .byte	%01111110	; SNAKE
   1274  2e8d				  -	      .byte	%01000000	; SNAKE
   1275  2e8d				  -	      .byte	%01000010	; SNAKE
   1276  2e8d				  -	      .byte	%01111110	; SNAKE
   1277  2e8d				  -
   1278  2e8d				  -			;byte %00000000 ; SNAKE
   1279  2e8d				  -
   1280  2e8d				  -	      .byte	%01111110	; SNAKE
   1281  2e8d				  -	      .byte	%01000010	; SNAKE
   1282  2e8d				  -	      .byte	%01000010	; SNAKE
   1283  2e8d				  -	      .byte	%01111110	; SNAKE
   1284  2e8d				  -	      .byte	%01000000	; SNAKE
   1285  2e8d				  -	      .byte	%01000110	; SNAKE
   1286  2e8d				  -	      .byte	%01000010	; SNAKE
   1287  2e8d				  -	      .byte	%01111110	; SNAKE
   1288  2e8d				  -
   1289  2e8d				  -			;byte %00000000 ; SNAKE
   1290  2e8d				  -
   1291  2e8d				  -	      .byte	%00000110	; SNAKE
   1292  2e8d				  -	      .byte	%00000010	; SNAKE
   1293  2e8d				  -	      .byte	%00000010	; SNAKE
   1294  2e8d				  -	      .byte	%00000010	; SNAKE
   1295  2e8d				  -	      .byte	%00000010	; SNAKE
   1296  2e8d				  -	      .byte	%01100010	; SNAKE
   1297  2e8d				  -	      .byte	%01000010	; SNAKE
   1298  2e8d				  -	      .byte	%01111110	; SNAKE
   1299  2e8d				  -
   1300  2e8d				  -			;byte %00000000 ; SNAKE
   1301  2e8d				  -
   1302  2e8d				  -	      .byte	%01111110	; SNAKE
   1303  2e8d				  -	      .byte	%01000010	; SNAKE
   1304  2e8d				  -	      .byte	%01000010	; SNAKE
   1305  2e8d				  -	      .byte	%01000010	; SNAKE
   1306  2e8d				  -	      .byte	%01111110	; SNAKE
   1307  2e8d				  -	      .byte	%01000010	; SNAKE
   1308  2e8d				  -	      .byte	%01000010	; SNAKE
   1309  2e8d				  -	      .byte	%01111110	; SNAKE
   1310  2e8d				  -
   1311  2e8d				  -			;byte %00000000 ; SNAKE
   1312  2e8d				  -
   1313  2e8d				  -	      .byte	%00001110	; SNAKE
   1314  2e8d				  -	      .byte	%00001010	; SNAKE
   1315  2e8d				  -	      .byte	%00000010	; SNAKE
   1316  2e8d				  -	      .byte	%00000010	; SNAKE
   1317  2e8d				  -	      .byte	%01111110	; SNAKE
   1318  2e8d				  -	      .byte	%01000010	; SNAKE
   1319  2e8d				  -	      .byte	%01000010	; SNAKE
   1320  2e8d				  -	      .byte	%01111110	; SNAKE
   1321  2e8d				  -
   1322  2e8d				  -
   1323  2e8d					      endif		; SNAKE
   1324  2e8d
   1325  2e8d				  -	      if	fontstyle == PLOK
   1326  2e8d				  -
   1327  2e8d				  -			;byte %00000000 ; PLOK
   1328  2e8d				  -
   1329  2e8d				  -	      .byte	%00000000	; PLOK
   1330  2e8d				  -	      .byte	%00111000	; PLOK
   1331  2e8d				  -	      .byte	%01100100	; PLOK
   1332  2e8d				  -	      .byte	%01100010	; PLOK
   1333  2e8d				  -	      .byte	%01100010	; PLOK
   1334  2e8d				  -	      .byte	%00110110	; PLOK
   1335  2e8d				  -	      .byte	%00011100	; PLOK
   1336  2e8d				  -	      .byte	%00000000	; PLOK
   1337  2e8d				  -
   1338  2e8d				  -			;byte %00000000 ; PLOK
   1339  2e8d				  -
   1340  2e8d				  -	      .byte	%00000000	; PLOK
   1341  2e8d				  -	      .byte	%00010000	; PLOK
   1342  2e8d				  -	      .byte	%00011100	; PLOK
   1343  2e8d				  -	      .byte	%00011100	; PLOK
   1344  2e8d				  -	      .byte	%00011000	; PLOK
   1345  2e8d				  -	      .byte	%00111000	; PLOK
   1346  2e8d				  -	      .byte	%00011000	; PLOK
   1347  2e8d				  -	      .byte	%00000000	; PLOK
   1348  2e8d				  -
   1349  2e8d				  -			;byte %00000000 ; PLOK
   1350  2e8d				  -
   1351  2e8d				  -	      .byte	%00000000	; PLOK
   1352  2e8d				  -	      .byte	%00001110	; PLOK
   1353  2e8d				  -	      .byte	%01111110	; PLOK
   1354  2e8d				  -	      .byte	%00011000	; PLOK
   1355  2e8d				  -	      .byte	%00001100	; PLOK
   1356  2e8d				  -	      .byte	%00000110	; PLOK
   1357  2e8d				  -	      .byte	%00111100	; PLOK
   1358  2e8d				  -	      .byte	%00000000	; PLOK
   1359  2e8d				  -
   1360  2e8d				  -			;byte %00000000 ; PLOK
   1361  2e8d				  -
   1362  2e8d				  -	      .byte	%00000000	; PLOK
   1363  2e8d				  -	      .byte	%00111100	; PLOK
   1364  2e8d				  -	      .byte	%01101110	; PLOK
   1365  2e8d				  -	      .byte	%00001110	; PLOK
   1366  2e8d				  -	      .byte	%00011100	; PLOK
   1367  2e8d				  -	      .byte	%00000110	; PLOK
   1368  2e8d				  -	      .byte	%01111100	; PLOK
   1369  2e8d				  -	      .byte	%00000000	; PLOK
   1370  2e8d				  -
   1371  2e8d				  -			;byte %00000000 ; PLOK
   1372  2e8d				  -
   1373  2e8d				  -	      .byte	%00000000	; PLOK
   1374  2e8d				  -	      .byte	%00011000	; PLOK
   1375  2e8d				  -	      .byte	%01111110	; PLOK
   1376  2e8d				  -	      .byte	%01101100	; PLOK
   1377  2e8d				  -	      .byte	%00100100	; PLOK
   1378  2e8d				  -	      .byte	%00110000	; PLOK
   1379  2e8d				  -	      .byte	%00110000	; PLOK
   1380  2e8d				  -	      .byte	%00000000	; PLOK
   1381  2e8d				  -
   1382  2e8d				  -			;byte %00000000 ; PLOK
   1383  2e8d				  -
   1384  2e8d				  -	      .byte	%00000000	; PLOK
   1385  2e8d				  -	      .byte	%00111100	; PLOK
   1386  2e8d				  -	      .byte	%01001110	; PLOK
   1387  2e8d				  -	      .byte	%00011100	; PLOK
   1388  2e8d				  -	      .byte	%01100000	; PLOK
   1389  2e8d				  -	      .byte	%01111100	; PLOK
   1390  2e8d				  -	      .byte	%00011100	; PLOK
   1391  2e8d				  -	      .byte	%00000000	; PLOK
   1392  2e8d				  -
   1393  2e8d				  -			;byte %00000000 ; PLOK
   1394  2e8d				  -
   1395  2e8d				  -	      .byte	%00000000	; PLOK
   1396  2e8d				  -	      .byte	%00111100	; PLOK
   1397  2e8d				  -	      .byte	%01000110	; PLOK
   1398  2e8d				  -	      .byte	%01101100	; PLOK
   1399  2e8d				  -	      .byte	%01110000	; PLOK
   1400  2e8d				  -	      .byte	%00111000	; PLOK
   1401  2e8d				  -	      .byte	%00010000	; PLOK
   1402  2e8d				  -	      .byte	%00000000	; PLOK
   1403  2e8d				  -
   1404  2e8d				  -			;byte %00000000 ; PLOK
   1405  2e8d				  -
   1406  2e8d				  -	      .byte	%00000000	; PLOK
   1407  2e8d				  -	      .byte	%00111100	; PLOK
   1408  2e8d				  -	      .byte	%00011100	; PLOK
   1409  2e8d				  -	      .byte	%00001100	; PLOK
   1410  2e8d				  -	      .byte	%00000110	; PLOK
   1411  2e8d				  -	      .byte	%01111110	; PLOK
   1412  2e8d				  -	      .byte	%00110000	; PLOK
   1413  2e8d				  -	      .byte	%00000000	; PLOK
   1414  2e8d				  -
   1415  2e8d				  -			;byte %00000000 ; PLOK
   1416  2e8d				  -
   1417  2e8d				  -	      .byte	%00000000	; PLOK
   1418  2e8d				  -	      .byte	%00111100	; PLOK
   1419  2e8d				  -	      .byte	%01001110	; PLOK
   1420  2e8d				  -	      .byte	%01101110	; PLOK
   1421  2e8d				  -	      .byte	%00111100	; PLOK
   1422  2e8d				  -	      .byte	%01100100	; PLOK
   1423  2e8d				  -	      .byte	%00111000	; PLOK
   1424  2e8d				  -	      .byte	%00000000	; PLOK
   1425  2e8d				  -
   1426  2e8d				  -			;byte %00000000 ; PLOK
   1427  2e8d				  -
   1428  2e8d				  -	      .byte	%00000000	; PLOK
   1429  2e8d				  -	      .byte	%00011000	; PLOK
   1430  2e8d				  -	      .byte	%00001100	; PLOK
   1431  2e8d				  -	      .byte	%00011100	; PLOK
   1432  2e8d				  -	      .byte	%00100110	; PLOK
   1433  2e8d				  -	      .byte	%01001110	; PLOK
   1434  2e8d				  -	      .byte	%00111100	; PLOK
   1435  2e8d				  -	      .byte	%00000000	; PLOK
   1436  2e8d				  -
   1437  2e8d					      endif		; PLOK
   1438  2e8d
   1439  2e8d							; ### any characters that aren't font specific follow...
   1440  2e8d
   1441  2e8d				  -	      ifconst	fontcharSPACE
   1442  2e8d				  -			;byte %00000000 ; SYMBOLS
   1443  2e8d				  -
   1444  2e8d				  -	      .byte	%00000000	; SYMBOLS
   1445  2e8d				  -	      .byte	%00000000	; SYMBOLS
   1446  2e8d				  -	      .byte	%00000000	; SYMBOLS
   1447  2e8d				  -	      .byte	%00000000	; SYMBOLS
   1448  2e8d				  -	      .byte	%00000000	; SYMBOLS
   1449  2e8d				  -	      .byte	%00000000	; SYMBOLS
   1450  2e8d				  -	      .byte	%00000000	; SYMBOLS
   1451  2e8d				  -	      .byte	%00000000	; SYMBOLS
   1452  2e8d				  -
   1453  2e8d				  -			;byte %00000000 ; SYMBOLS
   1454  2e8d					      endif		; fontcharSPACE
   1455  2e8d
   1456  2e8d				  -	      ifconst	fontcharDOLLAR
   1457  2e8d				  -			;byte %00000000 ; SYMBOLS
   1458  2e8d				  -
   1459  2e8d				  -	      .byte	%00000000	; SYMBOLS
   1460  2e8d				  -	      .byte	%00010000	; SYMBOLS
   1461  2e8d				  -	      .byte	%01111100	; SYMBOLS
   1462  2e8d				  -	      .byte	%00010010	; SYMBOLS
   1463  2e8d				  -	      .byte	%01111100	; SYMBOLS
   1464  2e8d				  -	      .byte	%10010000	; SYMBOLS
   1465  2e8d				  -	      .byte	%01111100	; SYMBOLS
   1466  2e8d				  -	      .byte	%00010000	; SYMBOLS
   1467  2e8d				  -
   1468  2e8d				  -			;byte %00000000 ; SYMBOLS
   1469  2e8d				  -
   1470  2e8d					      endif		; fontcharDOLLAR
   1471  2e8d
   1472  2e8d				  -	      ifconst	fontcharPOUND
   1473  2e8d				  -			;byte %00000000 ; SYMBOLS
   1474  2e8d				  -
   1475  2e8d				  -	      .byte	%01111110	; SYMBOLS
   1476  2e8d				  -	      .byte	%01000000	; SYMBOLS
   1477  2e8d				  -	      .byte	%00100000	; SYMBOLS
   1478  2e8d				  -	      .byte	%00100000	; SYMBOLS
   1479  2e8d				  -	      .byte	%01111000	; SYMBOLS
   1480  2e8d				  -	      .byte	%00100000	; SYMBOLS
   1481  2e8d				  -	      .byte	%00100010	; SYMBOLS
   1482  2e8d				  -	      .byte	%00011100	; SYMBOLS
   1483  2e8d				  -
   1484  2e8d				  -			;byte %00000000 ; SYMBOLS
   1485  2e8d				  -
   1486  2e8d					      endif		; fontcharPOUND
   1487  2e8d
   1488  2e8d
   1489  2e8d				  -	      ifconst	fontcharMRHAPPY
   1490  2e8d				  -			;byte %00000000 ; SYMBOLS
   1491  2e8d				  -
   1492  2e8d				  -	      .byte	%00111100	; SYMBOLS
   1493  2e8d				  -	      .byte	%01100110	; SYMBOLS
   1494  2e8d				  -	      .byte	%01011010	; SYMBOLS
   1495  2e8d				  -	      .byte	%01111110	; SYMBOLS
   1496  2e8d				  -	      .byte	%01111110	; SYMBOLS
   1497  2e8d				  -	      .byte	%01011010	; SYMBOLS
   1498  2e8d				  -	      .byte	%01111110	; SYMBOLS
   1499  2e8d				  -	      .byte	%00111100	; SYMBOLS
   1500  2e8d				  -
   1501  2e8d				  -			;byte %00000000 ; SYMBOLS
   1502  2e8d				  -
   1503  2e8d					      endif		; fontcharMRHAPPY
   1504  2e8d
   1505  2e8d				  -	      ifconst	fontcharMRSAD
   1506  2e8d				  -			;byte %00000000 ; SYMBOLS
   1507  2e8d				  -
   1508  2e8d				  -	      .byte	%00111100	; SYMBOLS
   1509  2e8d				  -	      .byte	%01011010	; SYMBOLS
   1510  2e8d				  -	      .byte	%01100110	; SYMBOLS
   1511  2e8d				  -	      .byte	%01111110	; SYMBOLS
   1512  2e8d				  -	      .byte	%01111110	; SYMBOLS
   1513  2e8d				  -	      .byte	%01011010	; SYMBOLS
   1514  2e8d				  -	      .byte	%01111110	; SYMBOLS
   1515  2e8d				  -	      .byte	%00111100	; SYMBOLS
   1516  2e8d				  -
   1517  2e8d				  -			;byte %00000000 ; SYMBOLS
   1518  2e8d				  -
   1519  2e8d					      endif		; fontcharMRSAD
   1520  2e8d
   1521  2e8d
   1522  2e8d				  -	      ifconst	fontcharCOPYRIGHT
   1523  2e8d				  -			;byte %00000000 ; SYMBOLS
   1524  2e8d				  -
   1525  2e8d				  -	      .byte	%00000000	; SYMBOLS
   1526  2e8d				  -	      .byte	%00111000	; SYMBOLS
   1527  2e8d				  -	      .byte	%01000100	; SYMBOLS
   1528  2e8d				  -	      .byte	%10111010	; SYMBOLS
   1529  2e8d				  -	      .byte	%10100010	; SYMBOLS
   1530  2e8d				  -	      .byte	%10111010	; SYMBOLS
   1531  2e8d				  -	      .byte	%01000100	; SYMBOLS
   1532  2e8d				  -	      .byte	%00111000	; SYMBOLS
   1533  2e8d				  -
   1534  2e8d				  -			;byte %00000000 ; SYMBOLS
   1535  2e8d				  -
   1536  2e8d					      endif		; fontcharCOPYRIGHT
   1537  2e8d
   1538  2e8d
   1539  2e8d				  -	      ifconst	fontcharFUJI
   1540  2e8d				  -
   1541  2e8d				  -			;byte %00000000 ; ** these commented-out blanks are for the preview generation program
   1542  2e8d				  -
   1543  2e8d				  -	      .byte	%01110000	; SYMBOLS
   1544  2e8d				  -	      .byte	%01111001	; SYMBOLS
   1545  2e8d				  -	      .byte	%00011101	; SYMBOLS
   1546  2e8d				  -	      .byte	%00001101	; SYMBOLS
   1547  2e8d				  -	      .byte	%00001101	; SYMBOLS
   1548  2e8d				  -	      .byte	%00001101	; SYMBOLS
   1549  2e8d				  -	      .byte	%00001101	; SYMBOLS
   1550  2e8d				  -	      .byte	%00000000	; SYMBOLS
   1551  2e8d				  -
   1552  2e8d				  -			;byte %00000000 ; SYMBOLS
   1553  2e8d				  -
   1554  2e8d				  -	      .byte	%00001110	; SYMBOLS
   1555  2e8d				  -	      .byte	%10011110	; SYMBOLS
   1556  2e8d				  -	      .byte	%10111000	; SYMBOLS
   1557  2e8d				  -	      .byte	%10110000	; SYMBOLS
   1558  2e8d				  -	      .byte	%10110000	; SYMBOLS
   1559  2e8d				  -	      .byte	%10110000	; SYMBOLS
   1560  2e8d				  -	      .byte	%10110000	; SYMBOLS
   1561  2e8d				  -	      .byte	%00000000	; SYMBOLS
   1562  2e8d				  -
   1563  2e8d				  -			;byte %00000000 ; SYMBOLS
   1564  2e8d				  -
   1565  2e8d					      endif		; fontcharFUJI
   1566  2e8d
   1567  2e8d
   1568  2e8d				  -	      ifconst	fontcharHEART
   1569  2e8d				  -			;byte %00000000 ; SYMBOLS
   1570  2e8d				  -
   1571  2e8d				  -	      .byte	%00010000	; SYMBOLS
   1572  2e8d				  -	      .byte	%00111000	; SYMBOLS
   1573  2e8d				  -	      .byte	%01111100	; SYMBOLS
   1574  2e8d				  -	      .byte	%01111100	; SYMBOLS
   1575  2e8d				  -	      .byte	%11111110	; SYMBOLS
   1576  2e8d				  -	      .byte	%11111110	; SYMBOLS
   1577  2e8d				  -	      .byte	%11101110	; SYMBOLS
   1578  2e8d				  -	      .byte	%01000100	; SYMBOLS
   1579  2e8d				  -
   1580  2e8d				  -			;byte %00000000 ; SYMBOLS
   1581  2e8d				  -
   1582  2e8d					      endif		; fontcharHEART
   1583  2e8d
   1584  2e8d				  -	      ifconst	fontcharDIAMOND
   1585  2e8d				  -			;byte %00000000 ; SYMBOLS
   1586  2e8d				  -
   1587  2e8d				  -	      .byte	%00010000	; SYMBOLS
   1588  2e8d				  -	      .byte	%00111000	; SYMBOLS
   1589  2e8d				  -	      .byte	%01111100	; SYMBOLS
   1590  2e8d				  -	      .byte	%11111110	; SYMBOLS
   1591  2e8d				  -	      .byte	%11111110	; SYMBOLS
   1592  2e8d				  -	      .byte	%01111100	; SYMBOLS
   1593  2e8d				  -	      .byte	%00111000	; SYMBOLS
   1594  2e8d				  -	      .byte	%00010000	; SYMBOLS
   1595  2e8d				  -
   1596  2e8d				  -			;byte %00000000 ; SYMBOLS
   1597  2e8d				  -
   1598  2e8d					      endif		; fontcharDIAMOND
   1599  2e8d
   1600  2e8d				  -	      ifconst	fontcharSPADE
   1601  2e8d				  -			;byte %00000000 ; SYMBOLS
   1602  2e8d				  -
   1603  2e8d				  -	      .byte	%00111000	; SYMBOLS
   1604  2e8d				  -	      .byte	%00010000	; SYMBOLS
   1605  2e8d				  -	      .byte	%01010100	; SYMBOLS
   1606  2e8d				  -	      .byte	%11111110	; SYMBOLS
   1607  2e8d				  -	      .byte	%11111110	; SYMBOLS
   1608  2e8d				  -	      .byte	%01111100	; SYMBOLS
   1609  2e8d				  -	      .byte	%00111000	; SYMBOLS
   1610  2e8d				  -	      .byte	%00010000	; SYMBOLS
   1611  2e8d				  -
   1612  2e8d				  -			;byte %00000000 ; SYMBOLS
   1613  2e8d				  -
   1614  2e8d					      endif		; fontcharSPADE
   1615  2e8d
   1616  2e8d				  -	      ifconst	fontcharCLUB
   1617  2e8d				  -			;byte %00000000 ; SYMBOLS
   1618  2e8d				  -
   1619  2e8d				  -	      .byte	%00111000	; SYMBOLS
   1620  2e8d				  -	      .byte	%00010000	; SYMBOLS
   1621  2e8d				  -	      .byte	%11010110	; SYMBOLS
   1622  2e8d				  -	      .byte	%11111110	; SYMBOLS
   1623  2e8d				  -	      .byte	%11010110	; SYMBOLS
   1624  2e8d				  -	      .byte	%00111000	; SYMBOLS
   1625  2e8d				  -	      .byte	%00111000	; SYMBOLS
   1626  2e8d				  -	      .byte	%00000000	; SYMBOLS
   1627  2e8d				  -
   1628  2e8d				  -			;byte %00000000 ; SYMBOLS
   1629  2e8d				  -
   1630  2e8d					      endif		; fontcharCLUB
   1631  2e8d
   1632  2e8d
   1633  2e8d				  -	      ifconst	fontcharCOLON
   1634  2e8d				  -			;byte %00000000 ; SYMBOLS
   1635  2e8d				  -
   1636  2e8d				  -	      .byte	%00000000	; SYMBOLS
   1637  2e8d				  -	      .byte	%00011000	; SYMBOLS
   1638  2e8d				  -	      .byte	%00011000	; SYMBOLS
   1639  2e8d				  -	      .byte	%00000000	; SYMBOLS
   1640  2e8d				  -	      .byte	%00000000	; SYMBOLS
   1641  2e8d				  -	      .byte	%00011000	; SYMBOLS
   1642  2e8d				  -	      .byte	%00011000	; SYMBOLS
   1643  2e8d				  -	      .byte	%00000000	; SYMBOLS
   1644  2e8d				  -
   1645  2e8d				  -			;byte %00000000 ; SYMBOLS
   1646  2e8d				  -
   1647  2e8d					      endif		; fontcharCOLON
   1648  2e8d
   1649  2e8d
   1650  2e8d				  -	      ifconst	fontcharBLOCK
   1651  2e8d				  -
   1652  2e8d				  -			;byte %00000000 ; SYMBOLS
   1653  2e8d				  -
   1654  2e8d				  -	      .byte	%11111111	; SYMBOLS
   1655  2e8d				  -	      .byte	%11111111	; SYMBOLS
   1656  2e8d				  -	      .byte	%11111111	; SYMBOLS
   1657  2e8d				  -	      .byte	%11111111	; SYMBOLS
   1658  2e8d				  -	      .byte	%11111111	; SYMBOLS
   1659  2e8d				  -	      .byte	%11111111	; SYMBOLS
   1660  2e8d				  -	      .byte	%11111111	; SYMBOLS
   1661  2e8d				  -	      .byte	%11111111	; SYMBOLS
   1662  2e8d				  -
   1663  2e8d				  -			;byte %00000000 ; SYMBOLS
   1664  2e8d				  -
   1665  2e8d					      endif		; fontcharBLOCK
   1666  2e8d
   1667  2e8d				  -	      ifconst	fontcharUNDERLINE
   1668  2e8d				  -
   1669  2e8d				  -			;byte %00000000 ; SYMBOLS
   1670  2e8d				  -
   1671  2e8d				  -	      .byte	%11111111	; SYMBOLS
   1672  2e8d				  -	      .byte	%00000000	; SYMBOLS
   1673  2e8d				  -	      .byte	%00000000	; SYMBOLS
   1674  2e8d				  -	      .byte	%00000000	; SYMBOLS
   1675  2e8d				  -	      .byte	%00000000	; SYMBOLS
   1676  2e8d				  -	      .byte	%00000000	; SYMBOLS
   1677  2e8d				  -	      .byte	%00000000	; SYMBOLS
   1678  2e8d				  -	      .byte	%00000000	; SYMBOLS
   1679  2e8d				  -
   1680  2e8d				  -			;byte %00000000 ; SYMBOLS
   1681  2e8d				  -
   1682  2e8d					      endif		; fontcharUNDERLINE
   1683  2e8d
   1684  2e8d				  -	      ifconst	fontcharARISIDE
   1685  2e8d				  -			;byte %00000000 ; SYMBOLS
   1686  2e8d				  -
   1687  2e8d				  -	      .byte	%00000000	; SYMBOLS
   1688  2e8d				  -	      .byte	%00101010	; SYMBOLS
   1689  2e8d				  -	      .byte	%00101010	; SYMBOLS
   1690  2e8d				  -	      .byte	%00101100	; SYMBOLS
   1691  2e8d				  -	      .byte	%01111111	; SYMBOLS
   1692  2e8d				  -	      .byte	%00110111	; SYMBOLS
   1693  2e8d				  -	      .byte	%00000010	; SYMBOLS
   1694  2e8d				  -	      .byte	%00000001	; SYMBOLS
   1695  2e8d				  -
   1696  2e8d				  -			;byte %00000000 ; SYMBOLS
   1697  2e8d				  -
   1698  2e8d					      endif		; fontcharARISIDE
   1699  2e8d
   1700  2e8d				  -	      ifconst	fontcharARIFACE
   1701  2e8d				  -			;byte %00000000 ; SYMBOLS
   1702  2e8d				  -
   1703  2e8d				  -	      .byte	%00001000	; SYMBOLS
   1704  2e8d				  -	      .byte	%00011100	; SYMBOLS
   1705  2e8d				  -	      .byte	%00111110	; SYMBOLS
   1706  2e8d				  -	      .byte	%00101010	; SYMBOLS
   1707  2e8d				  -	      .byte	%00011100	; SYMBOLS
   1708  2e8d				  -	      .byte	%01010100	; SYMBOLS
   1709  2e8d				  -	      .byte	%00100100	; SYMBOLS
   1710  2e8d				  -	      .byte	%00000010	; SYMBOLS
   1711  2e8d				  -
   1712  2e8d				  -			;byte %00000000 ; SYMBOLS
   1713  2e8d				  -
   1714  2e8d				  -
   1715  2e8d					      endif		; fontcharARIRACE
   1716  2e8d
------- FILE titlescreen/asm/titlescreen.asm
    303  2e8d					      endif
    304  2e8d
    305  2e8d					      ifconst	mk_gameselect_on
------- FILE titlescreen/gameselect_image.asm LEVEL 3 PASS 3
      0  2e8d					      include	"titlescreen/gameselect_image.asm"
      1  2e8d				  -	      ifnconst	bmp_gameselect_color
      2  2e8d				  -bmp_gameselect_color
      3  2e8d					      endif
      4  2e8d		       0f		      .byte.b	$0f
      5  2e8e
      6  2e8e				  -	      if	>. != >[.+5]
      7  2e8e				  -	      align	256
      8  2e8e					      endif
      9  2e8e				   bmp_gameselect_CHAR0
     10  2e8e
     11  2e8e		       7a		      .byte.b	%01111010
     12  2e8f		       8a		      .byte.b	%10001010
     13  2e90		       bb		      .byte.b	%10111011
     14  2e91		       82		      .byte.b	%10000010
     15  2e92		       79		      .byte.b	%01111001
     16  2e93
     17  2e93				  -	      if	>. != >[.+5]
     18  2e93				  -	      align	256
     19  2e93					      endif
     20  2e93				   bmp_gameselect_CHAR1
     21  2e93
     22  2e93		       51		      .byte.b	%01010001
     23  2e94		       51		      .byte.b	%01010001
     24  2e95		       d5		      .byte.b	%11010101
     25  2e96		       5b		      .byte.b	%01011011
     26  2e97		       91		      .byte.b	%10010001
     27  2e98
     28  2e98				  -	      if	>. != >[.+5]
     29  2e98				  -	      align	256
     30  2e98					      endif
     31  2e98				   bmp_gameselect_CHAR2
     32  2e98		       78		      .byte.b	%01111000
     33  2e99		       40		      .byte.b	%01000000
     34  2e9a		       70		      .byte.b	%01110000
     35  2e9b		       40		      .byte.b	%01000000
     36  2e9c		       78		      .byte.b	%01111000
     37  2e9d
     38  2e9d				  -	      if	>. != >[.+5]
     39  2e9d				  -	      align	256
     40  2e9d					      endif
     41  2e9d				   bmp_gameselect_CHAR3
     42  2e9d		       00		      .byte.b	%00000000
     43  2e9e		       00		      .byte.b	%00000000
     44  2e9f		       00		      .byte.b	%00000000
     45  2ea0		       00		      .byte.b	%00000000
     46  2ea1		       00		      .byte.b	%00000000
     47  2ea2
     48  2ea2				  -	      if	>. != >[.+80]
     49  2ea2				  -	      align	256
     50  2ea2					      endif
     51  2ea2
     52  2ea2				   font_gameselect_img
     53  2ea2		       3c		      .byte.b	%00111100
     54  2ea3		       66		      .byte.b	%01100110
     55  2ea4		       66		      .byte.b	%01100110
     56  2ea5		       66		      .byte.b	%01100110
     57  2ea6		       3c		      .byte.b	%00111100
     58  2ea7
     59  2ea7		       3c		      .byte.b	%00111100
     60  2ea8		       18		      .byte.b	%00011000
     61  2ea9		       18		      .byte.b	%00011000
     62  2eaa		       18		      .byte.b	%00011000
     63  2eab		       38		      .byte.b	%00111000
     64  2eac
     65  2eac		       7e		      .byte.b	%01111110
     66  2ead		       60		      .byte.b	%01100000
     67  2eae		       3c		      .byte.b	%00111100
     68  2eaf		       06		      .byte.b	%00000110
     69  2eb0		       7c		      .byte.b	%01111100
     70  2eb1
     71  2eb1		       7c		      .byte.b	%01111100
     72  2eb2		       06		      .byte.b	%00000110
     73  2eb3		       1c		      .byte.b	%00011100
     74  2eb4		       06		      .byte.b	%00000110
     75  2eb5		       7c		      .byte.b	%01111100
     76  2eb6
     77  2eb6		       06		      .byte.b	%00000110
     78  2eb7		       06		      .byte.b	%00000110
     79  2eb8		       7e		      .byte.b	%01111110
     80  2eb9		       66		      .byte.b	%01100110
     81  2eba		       66		      .byte.b	%01100110
     82  2ebb
     83  2ebb		       7c		      .byte.b	%01111100
     84  2ebc		       06		      .byte.b	%00000110
     85  2ebd		       7c		      .byte.b	%01111100
     86  2ebe		       60		      .byte.b	%01100000
     87  2ebf		       7e		      .byte.b	%01111110
     88  2ec0
     89  2ec0		       3c		      .byte.b	%00111100
     90  2ec1		       66		      .byte.b	%01100110
     91  2ec2		       7c		      .byte.b	%01111100
     92  2ec3		       60		      .byte.b	%01100000
     93  2ec4		       3c		      .byte.b	%00111100
     94  2ec5
     95  2ec5		       18		      .byte.b	%00011000
     96  2ec6		       18		      .byte.b	%00011000
     97  2ec7		       0c		      .byte.b	%00001100
     98  2ec8		       06		      .byte.b	%00000110
     99  2ec9		       7e		      .byte.b	%01111110
    100  2eca
    101  2eca		       3c		      .byte.b	%00111100
    102  2ecb		       66		      .byte.b	%01100110
    103  2ecc		       3c		      .byte.b	%00111100
    104  2ecd		       66		      .byte.b	%01100110
    105  2ece		       3c		      .byte.b	%00111100
    106  2ecf
    107  2ecf		       3c		      .byte.b	%00111100
    108  2ed0		       06		      .byte.b	%00000110
    109  2ed1		       3e		      .byte.b	%00111110
    110  2ed2		       66		      .byte.b	%01100110
    111  2ed3		       3c		      .byte.b	%00111100
    112  2ed4
    113  2ed4				  -	      ifnconst	gamenumber
    114  2ed4				  -gamenumber
    115  2ed4					      endif
    116  2ed4		       00		      .byte.b	0
    117  2ed5
------- FILE titlescreen/asm/titlescreen.asm
    307  2ed5					      endif
    308  2ed5
    309  2ed5				  -	      ifconst	mk_player_on
    310  2ed5				  -	      include	"titlescreen/asm/player_kernel.asm"
    311  2ed5					      endif		;mk_player_on
    312  2ed5
    313  2ed5
------- FILE d:\Firmaplus\Firmaplus_intern\Atari\PlusROM\Projekte-batariBasic\CaveApocalypse\C.A.V.E. Apocalypse.bas.asm
   6256  2ed5
   6257  2ed5				   .
   6258  2ed5							; 
   6259  2ed5
   6260  2ed5				   .L0526		;  asm
   6261  2ed5
   6262  2ed5				   minikernel
   6263  2ed5
   6264  2ed5		       85 02		      sta	WSYNC
   6265  2ed7
   6266  2ed7		       a5 08		      lda	scback
   6267  2ed9
   6268  2ed9		       85 09		      sta	COLUBK
   6269  2edb
   6270  2edb		       60		      rts
   6271  2edc
   6272  2edc				  -	      if	(<*) > (<(*+7))
   6273  2edc				  -	      repeat	($100-<*)
   6274  2edc				  -	      .byte	0
   6275  2edc				  -	      repend
   6276  2edc					      endif
   6277  2edc				   playercolorL0262_1
   6278  2edc		       1e		      .byte.b	_1E
   6279  2edd		       82		      .byte.b	_82
   6280  2ede		       84		      .byte.b	_84
   6281  2edf		       46		      .byte.b	_46
   6282  2ee0		       44		      .byte.b	_44
   6283  2ee1		       42		      .byte.b	_42
   6284  2ee2		       12		      .byte.b	_12
   6285  2ee3		       08		      .byte.b	_08
   6286  2ee4				  -	      if	(<*) > (<(*+7))
   6287  2ee4				  -	      repeat	($100-<*)
   6288  2ee4				  -	      .byte	0
   6289  2ee4				  -	      repend
   6290  2ee4					      endif
   6291  2ee4				   player12then_1
   6292  2ee4		       1b		      .byte.b	%00011011
   6293  2ee5		       0e		      .byte.b	%00001110
   6294  2ee6		       1f		      .byte.b	%00011111
   6295  2ee7		       bd		      .byte.b	%10111101
   6296  2ee8		       f9		      .byte.b	%11111001
   6297  2ee9		       9e		      .byte.b	%10011110
   6298  2eea		       08		      .byte.b	%00001000
   6299  2eeb		       7c		      .byte.b	%01111100
   6300  2eec				  -	      if	(<*) > (<(*+7))
   6301  2eec				  -	      repeat	($100-<*)
   6302  2eec				  -	      .byte	0
   6303  2eec				  -	      repend
   6304  2eec					      endif
   6305  2eec				   player13then_1
   6306  2eec		       1b		      .byte.b	%00011011
   6307  2eed		       0e		      .byte.b	%00001110
   6308  2eee		       1f		      .byte.b	%00011111
   6309  2eef		       bd		      .byte.b	%10111101
   6310  2ef0		       f9		      .byte.b	%11111001
   6311  2ef1		       9e		      .byte.b	%10011110
   6312  2ef2		       08		      .byte.b	%00001000
   6313  2ef3		       1f		      .byte.b	%00011111
   6314  2ef4				  -	      if	(<*) > (<(*+6))
   6315  2ef4				  -	      repeat	($100-<*)
   6316  2ef4				  -	      .byte	0
   6317  2ef4				  -	      repend
   6318  2ef4					      endif
   6319  2ef4				   player14then_0
   6320  2ef4		       55		      .byte.b	%01010101
   6321  2ef5		       aa		      .byte.b	%10101010
   6322  2ef6		       ff		      .byte.b	%11111111
   6323  2ef7		       3c		      .byte.b	%00111100
   6324  2ef8		       18		      .byte.b	%00011000
   6325  2ef9		       08		      .byte.b	%00001000
   6326  2efa		       04		      .byte.b	%00000100
   6327  2efb					      if	(<*) > (<(*+6))
   6328  2efb					      repeat	($100-<*)
   6329  2efb		       00		      .byte.b	0
   6328  2efb					      repend
   6329  2efc		       00		      .byte.b	0
   6328  2efc					      repend
   6329  2efd		       00		      .byte.b	0
   6328  2efd					      repend
   6329  2efe		       00		      .byte.b	0
   6328  2efe					      repend
   6329  2eff		       00		      .byte.b	0
   6330  2f00					      repend
   6331  2f00					      endif
   6332  2f00				   player15then_0
   6333  2f00		       aa		      .byte.b	%10101010
   6334  2f01		       55		      .byte.b	%01010101
   6335  2f02		       ff		      .byte.b	%11111111
   6336  2f03		       3c		      .byte.b	%00111100
   6337  2f04		       18		      .byte.b	%00011000
   6338  2f05		       08		      .byte.b	%00001000
   6339  2f06		       04		      .byte.b	%00000100
   6340  2f07				  -	      if	(<*) > (<(*+11))
   6341  2f07				  -	      repeat	($100-<*)
   6342  2f07				  -	      .byte	0
   6343  2f07				  -	      repend
   6344  2f07					      endif
   6345  2f07				   playerL0299_0
   6346  2f07		       a0		      .byte.b	%10100000
   6347  2f08		       40		      .byte.b	%01000000
   6348  2f09		       e0		      .byte.b	%11100000
   6349  2f0a		       a0		      .byte.b	%10100000
   6350  2f0b		       40		      .byte.b	%01000000
   6351  2f0c		       00		      .byte.b	%00000000
   6352  2f0d		       00		      .byte.b	%00000000
   6353  2f0e		       05		      .byte.b	%00000101
   6354  2f0f		       02		      .byte.b	%00000010
   6355  2f10		       07		      .byte.b	%00000111
   6356  2f11		       05		      .byte.b	%00000101
   6357  2f12		       02		      .byte.b	%00000010
   6358  2f13				  -	      if	(<*) > (<(*+24))
   6359  2f13				  -	      repeat	($100-<*)
   6360  2f13				  -	      .byte	0
   6361  2f13				  -	      repend
   6362  2f13					      endif
   6363  2f13				   playerL0301_0
   6364  2f13		       38		      .byte.b	%00111000
   6365  2f14		       20		      .byte.b	%00100000
   6366  2f15		       20		      .byte.b	%00100000
   6367  2f16		       20		      .byte.b	%00100000
   6368  2f17		       20		      .byte.b	%00100000
   6369  2f18		       00		      .byte.b	%00000000
   6370  2f19		       38		      .byte.b	%00111000
   6371  2f1a		       20		      .byte.b	%00100000
   6372  2f1b		       30		      .byte.b	%00110000
   6373  2f1c		       20		      .byte.b	%00100000
   6374  2f1d		       38		      .byte.b	%00111000
   6375  2f1e		       00		      .byte.b	%00000000
   6376  2f1f		       10		      .byte.b	%00010000
   6377  2f20		       28		      .byte.b	%00101000
   6378  2f21		       28		      .byte.b	%00101000
   6379  2f22		       28		      .byte.b	%00101000
   6380  2f23		       28		      .byte.b	%00101000
   6381  2f24		       00		      .byte.b	%00000000
   6382  2f25		       20		      .byte.b	%00100000
   6383  2f26		       20		      .byte.b	%00100000
   6384  2f27		       30		      .byte.b	%00110000
   6385  2f28		       20		      .byte.b	%00100000
   6386  2f29		       ba		      .byte.b	%10111010
   6387  2f2a		       82		      .byte.b	%10000010
   6388  2f2b		       fe		      .byte.b	%11111110
   6389  2f2c				  -	      if	(<*) > (<(*+3))
   6390  2f2c				  -	      repeat	($100-<*)
   6391  2f2c				  -	      .byte	0
   6392  2f2c				  -	      repend
   6393  2f2c					      endif
   6394  2f2c				   player16then_0
   6395  2f2c		       a6		      .byte.b	%10100110
   6396  2f2d		       42		      .byte.b	%01000010
   6397  2f2e		       63		      .byte.b	%01100011
   6398  2f2f		       42		      .byte.b	%01000010
   6399  2f30				  -	      if	(<*) > (<(*+3))
   6400  2f30				  -	      repeat	($100-<*)
   6401  2f30				  -	      .byte	0
   6402  2f30				  -	      repend
   6403  2f30					      endif
   6404  2f30				   player17then_0
   6405  2f30		       c5		      .byte.b	%11000101
   6406  2f31		       42		      .byte.b	%01000010
   6407  2f32		       63		      .byte.b	%01100011
   6408  2f33		       42		      .byte.b	%01000010
   6409  2f34					      if	ECHOFIRST
      61 bytes of ROM space left in bank 2
   6410  2f34					      echo	"    ",[(scoretable - *)]d , "bytes of ROM space left in bank 2")
   6411  2f34					      endif
   6412  2f34		       00 01	   ECHOFIRST  =	1
   6413  2f34
   6414  2f34
   6415  2f34							; Provided under the CC0 license. See the included LICENSE.txt for details.
   6416  2f34
   6417  2f34							; feel free to modify the score graphics - just keep each digit 8 high
   6418  2f34							; and keep the conditional compilation stuff intact
   6419  2f34				  -	      ifconst	ROM2k
   6420  2f34				  -	      ifconst	PlusROM_functions
   6421  2f34				  -	      ORG	$F7AC-16
   6422  2f34				  -	      else
   6423  2f34				  -	      ORG	$F7AC-8
   6424  2f34				  -	      endif
   6425  2f34					      else
   6426  2f34					      ifconst	bankswitch
   6427  2f34					      if	bankswitch == 8
   6428  2f71					      ORG	$2F94-bscode_length
   6429  2f71					      RORG	$FF94-bscode_length
   6430  2f71					      endif
   6431  2f71				  -	      if	bankswitch == 16
   6432  2f71				  -	      ORG	$4F94-bscode_length
   6433  2f71				  -	      RORG	$FF94-bscode_length
   6434  2f71					      endif
   6435  2f71				  -	      if	bankswitch == 32
   6436  2f71				  -	      ORG	$8F94-bscode_length
   6437  2f71				  -	      RORG	$FF94-bscode_length
   6438  2f71					      endif
   6439  2f71				  -	      if	bankswitch == 64
   6440  2f71				  -	      ORG	$10F80-bscode_length
   6441  2f71				  -	      RORG	$1FF80-bscode_length
   6442  2f71					      endif
   6443  2f71				  -	      else
   6444  2f71				  -	      ifconst	PlusROM_functions
   6445  2f71				  -	      ORG	$FF98
   6446  2f71				  -	      else
   6447  2f71				  -	      ORG	$FF9C
   6448  2f71				  -	      endif
   6449  2f71					      endif
   6450  2f71					      endif
   6451  2f71
   6452  2f71							; font equates
   6453  2f71		       00 01	   .21stcentury =	1
   6454  2f71		       00 02	   alarmclock =	2
   6455  2f71		       00 03	   handwritten =	3
   6456  2f71		       00 04	   interrupted =	4
   6457  2f71		       00 05	   retroputer =	5
   6458  2f71		       00 06	   whimsey    =	6
   6459  2f71		       00 07	   tiny       =	7
   6460  2f71		       00 08	   hex	      =	8
   6461  2f71
   6462  2f71				  -	      ifconst	font
   6463  2f71				  -	      if	font == hex
   6464  2f71				  -	      ORG	. - 48
   6465  2f71				  -	      endif
   6466  2f71					      endif
   6467  2f71
   6468  2f71				   scoretable
   6469  2f71
   6470  2f71				  -	      ifconst	font
   6471  2f71				  -	      if	font == .21stcentury
   6472  2f71				  -	      include	"score_graphics.asm.21stcentury"
   6473  2f71				  -	      endif
   6474  2f71				  -	      if	font == alarmclock
   6475  2f71				  -	      include	"score_graphics.asm.alarmclock"
   6476  2f71				  -	      endif
   6477  2f71				  -	      if	font == handwritten
   6478  2f71				  -	      include	"score_graphics.asm.handwritten"
   6479  2f71				  -	      endif
   6480  2f71				  -	      if	font == interrupted
   6481  2f71				  -	      include	"score_graphics.asm.interrupted"
   6482  2f71				  -	      endif
   6483  2f71				  -	      if	font == retroputer
   6484  2f71				  -	      include	"score_graphics.asm.retroputer"
   6485  2f71				  -	      endif
   6486  2f71				  -	      if	font == whimsey
   6487  2f71				  -	      include	"score_graphics.asm.whimsey"
   6488  2f71				  -	      endif
   6489  2f71				  -	      if	font == tiny
   6490  2f71				  -	      include	"score_graphics.asm.tiny"
   6491  2f71				  -	      endif
   6492  2f71				  -	      if	font == hex
   6493  2f71				  -	      include	"score_graphics.asm.hex"
   6494  2f71				  -	      endif
   6495  2f71					      else		; default font
   6496  2f71
   6497  2f71		       3c		      .byte.b	%00111100
   6498  2f72		       66		      .byte.b	%01100110
   6499  2f73		       66		      .byte.b	%01100110
   6500  2f74		       66		      .byte.b	%01100110
   6501  2f75		       66		      .byte.b	%01100110
   6502  2f76		       66		      .byte.b	%01100110
   6503  2f77		       66		      .byte.b	%01100110
   6504  2f78		       3c		      .byte.b	%00111100
   6505  2f79
   6506  2f79		       7e		      .byte.b	%01111110
   6507  2f7a		       18		      .byte.b	%00011000
   6508  2f7b		       18		      .byte.b	%00011000
   6509  2f7c		       18		      .byte.b	%00011000
   6510  2f7d		       18		      .byte.b	%00011000
   6511  2f7e		       38		      .byte.b	%00111000
   6512  2f7f		       18		      .byte.b	%00011000
   6513  2f80		       08		      .byte.b	%00001000
   6514  2f81
   6515  2f81		       7e		      .byte.b	%01111110
   6516  2f82		       60		      .byte.b	%01100000
   6517  2f83		       60		      .byte.b	%01100000
   6518  2f84		       3c		      .byte.b	%00111100
   6519  2f85		       06		      .byte.b	%00000110
   6520  2f86		       06		      .byte.b	%00000110
   6521  2f87		       46		      .byte.b	%01000110
   6522  2f88		       3c		      .byte.b	%00111100
   6523  2f89
   6524  2f89		       3c		      .byte.b	%00111100
   6525  2f8a		       46		      .byte.b	%01000110
   6526  2f8b		       06		      .byte.b	%00000110
   6527  2f8c		       06		      .byte.b	%00000110
   6528  2f8d		       1c		      .byte.b	%00011100
   6529  2f8e		       06		      .byte.b	%00000110
   6530  2f8f		       46		      .byte.b	%01000110
   6531  2f90		       3c		      .byte.b	%00111100
   6532  2f91
   6533  2f91		       0c		      .byte.b	%00001100
   6534  2f92		       0c		      .byte.b	%00001100
   6535  2f93		       7e		      .byte.b	%01111110
   6536  2f94		       4c		      .byte.b	%01001100
   6537  2f95		       4c		      .byte.b	%01001100
   6538  2f96		       2c		      .byte.b	%00101100
   6539  2f97		       1c		      .byte.b	%00011100
   6540  2f98		       0c		      .byte.b	%00001100
   6541  2f99
   6542  2f99		       3c		      .byte.b	%00111100
   6543  2f9a		       46		      .byte.b	%01000110
   6544  2f9b		       06		      .byte.b	%00000110
   6545  2f9c		       06		      .byte.b	%00000110
   6546  2f9d		       3c		      .byte.b	%00111100
   6547  2f9e		       60		      .byte.b	%01100000
   6548  2f9f		       60		      .byte.b	%01100000
   6549  2fa0		       7e		      .byte.b	%01111110
   6550  2fa1
   6551  2fa1		       3c		      .byte.b	%00111100
   6552  2fa2		       66		      .byte.b	%01100110
   6553  2fa3		       66		      .byte.b	%01100110
   6554  2fa4		       66		      .byte.b	%01100110
   6555  2fa5		       7c		      .byte.b	%01111100
   6556  2fa6		       60		      .byte.b	%01100000
   6557  2fa7		       62		      .byte.b	%01100010
   6558  2fa8		       3c		      .byte.b	%00111100
   6559  2fa9
   6560  2fa9		       30		      .byte.b	%00110000
   6561  2faa		       30		      .byte.b	%00110000
   6562  2fab		       30		      .byte.b	%00110000
   6563  2fac		       18		      .byte.b	%00011000
   6564  2fad		       0c		      .byte.b	%00001100
   6565  2fae		       06		      .byte.b	%00000110
   6566  2faf		       42		      .byte.b	%01000010
   6567  2fb0		       3e		      .byte.b	%00111110
   6568  2fb1
   6569  2fb1		       3c		      .byte.b	%00111100
   6570  2fb2		       66		      .byte.b	%01100110
   6571  2fb3		       66		      .byte.b	%01100110
   6572  2fb4		       66		      .byte.b	%01100110
   6573  2fb5		       3c		      .byte.b	%00111100
   6574  2fb6		       66		      .byte.b	%01100110
   6575  2fb7		       66		      .byte.b	%01100110
   6576  2fb8		       3c		      .byte.b	%00111100
   6577  2fb9
   6578  2fb9		       3c		      .byte.b	%00111100
   6579  2fba		       46		      .byte.b	%01000110
   6580  2fbb		       06		      .byte.b	%00000110
   6581  2fbc		       3e		      .byte.b	%00111110
   6582  2fbd		       66		      .byte.b	%01100110
   6583  2fbe		       66		      .byte.b	%01100110
   6584  2fbf		       66		      .byte.b	%01100110
   6585  2fc0		       3c		      .byte.b	%00111100
   6586  2fc1
   6587  2fc1					      ifnconst	DPC_kernel_options
   6588  2fc1
   6589  2fc1		       00		      .byte.b	%00000000
   6590  2fc2		       00		      .byte.b	%00000000
   6591  2fc3		       00		      .byte.b	%00000000
   6592  2fc4		       00		      .byte.b	%00000000
   6593  2fc5		       00		      .byte.b	%00000000
   6594  2fc6		       00		      .byte.b	%00000000
   6595  2fc7		       00		      .byte.b	%00000000
   6596  2fc8		       00		      .byte.b	%00000000
   6597  2fc9
   6598  2fc9					      endif
   6599  2fc9
   6600  2fc9					      endif
   6601  2fc9
   6602  2fc9				  -	      ifconst	ROM2k
   6603  2fc9				  -	      ifconst	PlusROM_functions
   6604  2fc9				  -	      ORG	$F7F0
   6605  2fc9				  -	      .byte	0	; WriteToBuffer
   6606  2fc9				  -	      .byte	0	; WriteSendBuffer
   6607  2fc9				  -	      .byte	0	; ReceiveBuffer
   6608  2fc9				  -	      .byte	$ff	; ReceiveBufferSize (none zero for detection of PlusROM support)
   6609  2fc9				  -	      ORG	$F7FA
   6610  2fc9				  -	      else
   6611  2fc9				  -	      ORG	$F7FC
   6612  2fc9				  -	      endif
   6613  2fc9					      else
   6614  2fc9					      ifconst	bankswitch
   6615  2fc9					      if	bankswitch == 8
   6616  2fd1					      ORG	$2FF4-bscode_length
   6617  2fd1					      RORG	$FFF4-bscode_length
   6618  2fd1					      endif
   6619  2fd1				  -	      if	bankswitch == 16
   6620  2fd1				  -	      ORG	$4FF4-bscode_length
   6621  2fd1				  -	      RORG	$FFF4-bscode_length
   6622  2fd1					      endif
   6623  2fd1				  -	      if	bankswitch == 32
   6624  2fd1				  -	      ORG	$8FF4-bscode_length
   6625  2fd1				  -	      RORG	$FFF4-bscode_length
   6626  2fd1					      endif
   6627  2fd1				  -	      if	bankswitch == 64
   6628  2fd1				  -	      ORG	$10FE0-bscode_length
   6629  2fd1				  -	      RORG	$1FFE0-bscode_length
   6630  2fd1					      endif
   6631  2fd1				  -	      else
   6632  2fd1				  -	      ifconst	PlusROM_functions
   6633  2fd1				  -	      ORG	$FFF0
   6634  2fd1				  -	      .byte	0	; WriteToBuffer
   6635  2fd1				  -	      .byte	0	; WriteSendBuffer
   6636  2fd1				  -	      .byte	0	; ReceiveBuffer
   6637  2fd1				  -	      .byte	$ff	; ReceiveBufferSize (none zero for detection of PlusROM support)
   6638  2fd1				  -	      ORG	$FFFA
   6639  2fd1				  -	      else
   6640  2fd1				  -	      ORG	$FFFC
   6641  2fd1				  -	      endif
   6642  2fd1					      endif
   6643  2fd1					      endif
   6644  2fd1							; Provided under the CC0 license. See the included LICENSE.txt for details.
   6645  2fd1
   6646  2fd1							; every bank has this stuff at the same place
   6647  2fd1							; this code can switch to/from any bank at any entry point
   6648  2fd1							; and can preserve register values
   6649  2fd1							; note: lines not starting with a space are not placed in all banks
   6650  2fd1							;
   6651  2fd1							; line below tells the compiler how long this is - do not remove
   6652  2fd1							;size=35
   6653  2fd1
   6654  2fd1				   begin_bscode
   6655  2fd1		       a2 ff		      ldx	#$ff
   6656  2fd3				  -	      ifconst	FASTFETCH	; using DPC+
   6657  2fd3				  -	      stx	FASTFETCH
   6658  2fd3					      endif
   6659  2fd3		       9a		      txs
   6660  2fd4				  -	      if	bankswitch == 64
   6661  2fd4				  -	      lda	#(((>(start-1)) & $0F) | $F0)
   6662  2fd4					      else
   6663  2fd4		       a9 f3		      lda	#>(start-1)
   6664  2fd6					      endif
   6665  2fd6		       48		      pha
   6666  2fd7		       a9 51		      lda	#<(start-1)
   6667  2fd9		       48		      pha
   6668  2fda
   6669  2fda				   BS_return
   6670  2fda		       48		      pha
   6671  2fdb		       8a		      txa
   6672  2fdc		       48		      pha
   6673  2fdd		       ba		      tsx
   6674  2fde
   6675  2fde					      if	bankswitch != 64
   6676  2fde		       b5 04		      lda	4,x	; get high byte of return address
   6677  2fe0
   6678  2fe0		       2a		      rol
   6679  2fe1		       2a		      rol
   6680  2fe2		       2a		      rol
   6681  2fe3		       2a		      rol
   6682  2fe4		       29 01		      and	#bs_mask	;1 3 or 7 for F8/F6/F4
   6683  2fe6		       aa		      tax
   6684  2fe7		       e8		      inx
   6685  2fe8				  -	      else
   6686  2fe8				  -	      lda	4,x	; get high byte of return address
   6687  2fe8				  -	      tay
   6688  2fe8				  -	      ora	#$10	; change our bank nibble into a valid rom mirror
   6689  2fe8				  -	      sta	4,x
   6690  2fe8				  -	      tya
   6691  2fe8				  -	      lsr
   6692  2fe8				  -	      lsr
   6693  2fe8				  -	      lsr
   6694  2fe8				  -	      lsr
   6695  2fe8				  -	      tax
   6696  2fe8				  -	      inx
   6697  2fe8					      endif
   6698  2fe8
   6699  2fe8				   BS_jsr
   6700  2fe8		       bd f7 1f 	      lda	bankswitch_hotspot-1,x
   6701  2feb		       68		      pla
   6702  2fec		       aa		      tax
   6703  2fed		       68		      pla
   6704  2fee		       60		      rts
   6705  2fef				  -	      if	((* & $1FFF) > ((bankswitch_hotspot & $1FFF) - 1))
   6706  2fef				  -	      echo	"WARNING: size parameter in banksw.asm too small - the program probably will not work."
   6707  2fef				  -	      echo	"Change to",[(*-begin_bscode+1)&$FF]d,"and try again."
   6708  2fef					      endif
   6709  2fef							; Provided under the CC0 license. See the included LICENSE.txt for details.
   6710  2fef
   6711  2fef					      ifconst	bankswitch
   6712  2fef					      if	bankswitch == 8
   6713  2fef					      ifconst	PlusROM_functions
   6714  2ff0					      ORG	$2FF0
   6715  2ff0					      RORG	$FFF0
   6716  2ff0		       00		      .byte.b	0	; WriteToBuffer
   6717  2ff1		       00		      .byte.b	0	; WriteSendBuffer
   6718  2ff2		       00		      .byte.b	0	; ReceiveBuffer
   6719  2ff3		       ff		      .byte.b	$ff	; ReceiveBufferSize (none zero for detection of PlusROM support)
   6720  2ffa					      ORG	$2FFA
   6721  2ffa					      RORG	$FFFA
   6722  2ffa		       b2 1c		      .word.w	(PlusROM_API-$C000)
   6723  2ffc				  -	      else
   6724  2ffc				  -	      ORG	$2FFC
   6725  2ffc				  -	      RORG	$FFFC
   6726  2ffc					      endif
   6727  2ffc					      endif
   6728  2ffc				  -	      if	bankswitch == 16
   6729  2ffc				  -	      ifconst	PlusROM_functions
   6730  2ffc				  -	      ORG	$4FF0
   6731  2ffc				  -	      RORG	$FFF0
   6732  2ffc				  -	      .byte	0	; WriteToBuffer
   6733  2ffc				  -	      .byte	0	; WriteSendBuffer
   6734  2ffc				  -	      .byte	0	; ReceiveBuffer
   6735  2ffc				  -	      .byte	$ff	; ReceiveBufferSize (none zero for detection of PlusROM support)
   6736  2ffc				  -	      ORG	$4FFA
   6737  2ffc				  -	      RORG	$FFFA
   6738  2ffc				  -	      .word	(PlusROM_API-$9000)
   6739  2ffc				  -	      else
   6740  2ffc				  -	      ORG	$4FFC
   6741  2ffc				  -	      RORG	$FFFC
   6742  2ffc				  -	      endif
   6743  2ffc					      endif
   6744  2ffc				  -	      if	bankswitch == 32
   6745  2ffc				  -	      ifconst	PlusROM_functions
   6746  2ffc				  -	      ORG	$8FF0
   6747  2ffc				  -	      RORG	$FFF0
   6748  2ffc				  -	      .byte	0	; WriteToBuffer
   6749  2ffc				  -	      .byte	0	; WriteSendBuffer
   6750  2ffc				  -	      .byte	0	; ReceiveBuffer
   6751  2ffc				  -	      .byte	$ff	; ReceiveBufferSize (none zero for detection of PlusROM support)
   6752  2ffc				  -	      ORG	$8FFA
   6753  2ffc				  -	      RORG	$FFFA
   6754  2ffc				  -	      .word	(PlusROM_API-$5000)
   6755  2ffc				  -	      else
   6756  2ffc				  -	      ORG	$8FFC
   6757  2ffc				  -	      RORG	$FFFC
   6758  2ffc				  -	      endif
   6759  2ffc					      endif
   6760  2ffc				  -	      if	bankswitch == 64
   6761  2ffc				  -	      ORG	$10FF0
   6762  2ffc				  -	      RORG	$1FFF0
   6763  2ffc				  -	      lda	$ffe0	; we use wasted space to assist stella with EF format auto-detection
   6764  2ffc				  -	      ORG	$10FF8
   6765  2ffc				  -	      RORG	$1FFF8
   6766  2ffc				  -	      ifconst	superchip
   6767  2ffc				  -	      .byte	"E","F","S","C"
   6768  2ffc				  -	      else
   6769  2ffc				  -	      .byte	"E","F","E","F"
   6770  2ffc				  -	      endif
   6771  2ffc				  -	      ORG	$10FFC
   6772  2ffc				  -	      RORG	$1FFFC
   6773  2ffc					      endif
   6774  2ffc				  -	      else
   6775  2ffc				  -	      ifconst	ROM2k
   6776  2ffc				  -	      ifconst	PlusROM_functions
   6777  2ffc				  -	      ORG	$F7FA
   6778  2ffc				  -	      .word	(PlusROM_API-$E000)
   6779  2ffc				  -	      else
   6780  2ffc				  -	      ORG	$F7FC
   6781  2ffc				  -	      endif
   6782  2ffc				  -	      else
   6783  2ffc				  -	      ifconst	PlusROM_functions
   6784  2ffc				  -	      ORG	$FFFA
   6785  2ffc				  -	      .word	(PlusROM_API-$E000)
   6786  2ffc				  -	      else
   6787  2ffc				  -	      ORG	$FFFC
   6788  2ffc				  -	      endif
   6789  2ffc				  -	      endif
   6790  2ffc					      endif
   6791  2ffc		       52 f3		      .word.w	(start & $ffff)
   6792  2ffe		       52 f3		      .word.w	(start & $ffff)
