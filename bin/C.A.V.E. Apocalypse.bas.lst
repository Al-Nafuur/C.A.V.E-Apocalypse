------- FILE d:\Firmaplus\Firmaplus_intern\Atari\PlusROM\Projekte-batariBasic\CaveApocalypse\C.A.V.E. Apocalypse.bas.asm LEVEL 1 PASS 3
      1  3000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  3000 ????
      3  3000 ????				      processor	6502
------- FILE vcs.h LEVEL 2 PASS 3
      0  3000 ????				      include	"vcs.h"
      1  3000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  3000 ????
      3  3000 ????						; VCS.H
      4  3000 ????						; Version 1.05, 13/November/2003
      5  3000 ????
      6  3000 ????	       00 69	   VERSION_VCS =	105
      7  3000 ????
      8  3000 ????						; THIS IS A PRELIMINARY RELEASE OF *THE* "STANDARD" VCS.H
      9  3000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
     10  3000 ????						; PLEASE DO *NOT* REDISTRIBUTE THIS FILE!
     11  3000 ????						;
     12  3000 ????						; This file defines hardware registers and memory mapping for the
     13  3000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     14  3000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     15  3000 ????						; available at at http://www.atari2600.org/dasm
     16  3000 ????						;
     17  3000 ????						; Many thanks to the original author(s) of this file, and to everyone who has
     18  3000 ????						; contributed to understanding the Atari 2600.  If you take issue with the
     19  3000 ????						; contents, or naming of registers, please write to me (atari2600@taswegian.com)
     20  3000 ????						; with your views.  Please contribute, if you think you can improve this
     21  3000 ????						; file!
     22  3000 ????						;
     23  3000 ????						; Latest Revisions...
     24  3000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     25  3000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     26  3000 ????						;			    This will allow conditional code to verify VCS.H being
     27  3000 ????						;			    used for code assembly.
     28  3000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     29  3000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     30  3000 ????						;			 mirrored reading/writing differences.	This is more a 
     31  3000 ????						;			 readability issue, and binary compatibility with disassembled
     32  3000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     33  3000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     34  3000 ????						;			 which was broken by the use of segments in this file, as
     35  3000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     36  3000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     37  3000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     38  3000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     39  3000 ????						;						   it is safe to leave it undefined, and the base address will
     40  3000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     41  3000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     42  3000 ????						;			  - register definitions are now generated through assignment
     43  3000 ????						;			    in uninitialised segments.	This allows a changeable base
     44  3000 ????						;			    address architecture.
     45  3000 ????						; 1.0	22/MAR/2003		Initial release
     46  3000 ????
     47  3000 ????
     48  3000 ????						;-------------------------------------------------------------------------------
     49  3000 ????
     50  3000 ????						; TIA_BASE_ADDRESS
     51  3000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     52  3000 ????						; Normally 0, the base address should (externally, before including this file)
     53  3000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     54  3000 ????						; The reason is that this bankswitching scheme treats any access to locations
     55  3000 ????						; < $40 as a bankswitch.
     56  3000 ????
     57  3000 ????			  -	      IFNCONST	TIA_BASE_ADDRESS
     58  3000 ????			  -TIA_BASE_ADDRESS =	0
     59  3000 ????				      ENDIF
     60  3000 ????
     61  3000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     62  3000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     63  3000 ????						; *OR* by declaring the label before including this file, eg:
     64  3000 ????						; TIA_BASE_ADDRESS = $40
     65  3000 ????						;   include "vcs.h"
     66  3000 ????
     67  3000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     68  3000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     69  3000 ????						; for the mirrored ROM hardware registers.
     70  3000 ????
     71  3000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     72  3000 ????						; using the -D command-line switch, as required.  If the addresses are not defined, 
     73  3000 ????						; they defaut to the TIA_BASE_ADDRESS.
     74  3000 ????
     75  3000 ????			  -	      IFNCONST	TIA_BASE_READ_ADDRESS
     76  3000 ????			  -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     77  3000 ????				      ENDIF
     78  3000 ????
     79  3000 ????			  -	      IFNCONST	TIA_BASE_WRITE_ADDRESS
     80  3000 ????			  -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     81  3000 ????				      ENDIF
     82  3000 ????
     83  3000 ????						;-------------------------------------------------------------------------------
     84  3000 ????
     85 U002d ????				      SEG.U	TIA_REGISTERS_WRITE
     86 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     87 U0000
     88 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     89 U0000
     90 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     91 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     92 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     93 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     94 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     95 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     96 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     97 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     98 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     99 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
    100 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
    101 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    102 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    103 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    104 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    105 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    106 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    107 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    108 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    109 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    110 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    111 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    112 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    113 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    114 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    115 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    116 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    117 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    118 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    119 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    120 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    121 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    122 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    123 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    124 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    125 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    126 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    127 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    128 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    129 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    130 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    131 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    132 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    133 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    134 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    135 U002d
    136 U002d							;-------------------------------------------------------------------------------
    137 U002d
    138 U000e ????				      SEG.U	TIA_REGISTERS_READ
    139 U0000					      ORG	TIA_BASE_READ_ADDRESS
    140 U0000
    141 U0000							;											bit 7	 bit 6
    142 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    143 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    144 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    145 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    146 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    147 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    148 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    149 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    150 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    151 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    152 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    153 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    154 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    155 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    156 U000e
    157 U000e							;-------------------------------------------------------------------------------
    158 U000e
    159 U0298 ????				      SEG.U	RIOT
    160 U0280					      ORG	$280
    161 U0280
    162 U0280							; RIOT MEMORY MAP
    163 U0280
    164 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    165 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    166 U0281
    167 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    168 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    169 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    170 U0284		       00	   INTIM      ds	1	; $284		Timer output
    171 U0285
    172 U0285		       00	   TIMINT     ds	1	; $285
    173 U0286
    174 U0286							; Unused/undefined registers ($285-$294)
    175 U0286
    176 U0286		       00		      ds	1	; $286
    177 U0287		       00		      ds	1	; $287
    178 U0288		       00		      ds	1	; $288
    179 U0289		       00		      ds	1	; $289
    180 U028a		       00		      ds	1	; $28A
    181 U028b		       00		      ds	1	; $28B
    182 U028c		       00		      ds	1	; $28C
    183 U028d		       00		      ds	1	; $28D
    184 U028e		       00		      ds	1	; $28E
    185 U028f		       00		      ds	1	; $28F
    186 U0290		       00		      ds	1	; $290
    187 U0291		       00		      ds	1	; $291
    188 U0292		       00		      ds	1	; $292
    189 U0293		       00		      ds	1	; $293
    190 U0294
    191 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    192 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    193 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    194 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    195 U0298
    196 U0298							;-------------------------------------------------------------------------------
    197 U0298							; The following required for back-compatibility with code which does not use
    198 U0298							; segments.
    199 U0298
    200  3000 ????				      SEG
    201  3000 ????
    202  3000 ????						; EOF
------- FILE d:\Firmaplus\Firmaplus_intern\Atari\PlusROM\Projekte-batariBasic\CaveApocalypse\C.A.V.E. Apocalypse.bas.asm
------- FILE macro.h LEVEL 2 PASS 3
      0  3000 ????				      include	"macro.h"
      1  3000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  3000 ????
      3  3000 ????						; MACRO.H
      4  3000 ????						; Version 1.05, 13/NOVEMBER/2003
      5  3000 ????
      6  3000 ????	       00 69	   VERSION_MACRO =	105
      7  3000 ????
      8  3000 ????						;
      9  3000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
     10  3000 ????						; PLEASE DO *NOT* REDISTRIBUTE MODIFIED VERSIONS OF THIS FILE!
     11  3000 ????						;
     12  3000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     13  3000 ????						; It is distributed as a companion machine-specific support package
     14  3000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     15  3000 ????						; available at at http://www.atari2600.org/dasm
     16  3000 ????						;
     17  3000 ????						; Many thanks to the people who have contributed.  If you take issue with the
     18  3000 ????						; contents, or would like to add something, please write to me
     19  3000 ????						; (atari2600@taswegian.com) with your contribution.
     20  3000 ????						;
     21  3000 ????						; Latest Revisions...
     22  3000 ????						;
     23  3000 ????						; 1.05  14/NOV/2003	  - Added VERSION_MACRO equate (which will reflect 100x version #)
     24  3000 ????						;			    This will allow conditional code to verify MACRO.H being
     25  3000 ????						;			    used for code assembly.
     26  3000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     27  3000 ????						;
     28  3000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     29  3000 ????						;
     30  3000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     31  3000 ????						;			   (standardised macro for vertical synch code)
     32  3000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added. 
     33  3000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     34  3000 ????						; 1.0	22/MAR/2003		Initial release
     35  3000 ????
     36  3000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage, 
     37  3000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     38  3000 ????						;   If you do not allow illegal opcode usage, you must include this file 
     39  3000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     40  3000 ????						;   registers and require them to be defined first).
     41  3000 ????
     42  3000 ????						; Available macros...
     43  3000 ????						;   SLEEP n		 - sleep for n cycles
     44  3000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     45  3000 ????						;   CLEAN_START	 - set machine to known state on startup
     46  3000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     47  3000 ????
     48  3000 ????						;-------------------------------------------------------------------------------
     49  3000 ????						; SLEEP duration
     50  3000 ????						; Original author: Thomas Jentzsch
     51  3000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     52  3000 ????						; useful for code where precise timing is required.
     53  3000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     54  3000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     55  3000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     56  3000 ????
     57  3000 ????				      MAC	sleep
     58  3000 ????			   .CYCLES    SET	{1}
     59  3000 ????
     60  3000 ????				      IF	.CYCLES < 2
     61  3000 ????				      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     62  3000 ????				      ERR
     63  3000 ????				      ENDIF
     64  3000 ????
     65  3000 ????				      IF	.CYCLES & 1
     66  3000 ????				      IFNCONST	NO_ILLEGAL_OPCODES
     67  3000 ????				      nop	0
     68  3000 ????				      ELSE
     69  3000 ????				      bit	VSYNC
     70  3000 ????				      ENDIF
     71  3000 ????			   .CYCLES    SET	.CYCLES - 3
     72  3000 ????				      ENDIF
     73  3000 ????
     74  3000 ????				      REPEAT	.CYCLES / 2
     75  3000 ????				      nop
     76  3000 ????				      REPEND
     77  3000 ????				      ENDM		;usage: SLEEP n (n>1)
     78  3000 ????
     79  3000 ????						;-------------------------------------------------------------------------------
     80  3000 ????						; VERTICAL_SYNC
     81  3000 ????						; Original author: Manuel Polik
     82  3000 ????						; Inserts the code required for a proper 3 scannline 
     83  3000 ????						; vertical sync sequence
     84  3000 ????						;
     85  3000 ????						; Note: Alters the accumulator
     86  3000 ????						;
     87  3000 ????						; IN:
     88  3000 ????						; OUT: A = 1
     89  3000 ????
     90  3000 ????				      MAC	vertical_sync
     91  3000 ????				      LDA	#$02	; A = VSYNC enable
     92  3000 ????				      STA	WSYNC	; Finish current line
     93  3000 ????				      STA	VSYNC	; Start vertical sync
     94  3000 ????				      STA	WSYNC	; 1st line vertical sync
     95  3000 ????				      STA	WSYNC	; 2nd line vertical sync
     96  3000 ????				      LSR		; A = VSYNC disable
     97  3000 ????				      STA	WSYNC	; 3rd line vertical sync
     98  3000 ????				      STA	VSYNC	; Stop vertical sync
     99  3000 ????				      ENDM
    100  3000 ????
    101  3000 ????						;-------------------------------------------------------------------------------
    102  3000 ????						; CLEAN_START
    103  3000 ????						; Original author: Andrew Davie
    104  3000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
    105  3000 ????						; Sets stack pointer to $FF, and all registers to 0
    106  3000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    107  3000 ????						; Use as very first section of code on boot (ie: at reset)
    108  3000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    109  3000 ????
    110  3000 ????				      MAC	clean_start
    111  3000 ????				      sei
    112  3000 ????				      cld
    113  3000 ????
    114  3000 ????				      ldx	#0
    115  3000 ????				      txa
    116  3000 ????				      tay
    117  3000 ????			   .CLEAR_STACK dex
    118  3000 ????				      txs
    119  3000 ????				      pha
    120  3000 ????				      bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    121  3000 ????
    122  3000 ????				      ENDM
    123  3000 ????
    124  3000 ????						;-------------------------------------------------------
    125  3000 ????						; SET_POINTER
    126  3000 ????						; Original author: Manuel Rotschkar
    127  3000 ????						;
    128  3000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    129  3000 ????						;
    130  3000 ????						; Usage: SET_POINTER pointer, address
    131  3000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    132  3000 ????						;
    133  3000 ????						; Note: Alters the accumulator, NZ flags
    134  3000 ????						; IN 1: 2 byte RAM location reserved for pointer
    135  3000 ????						; IN 2: absolute address
    136  3000 ????
    137  3000 ????				      MAC	set_pointer
    138  3000 ????			   .POINTER   SET	{1}
    139  3000 ????			   .ADDRESS   SET	{2}
    140  3000 ????
    141  3000 ????				      LDA	#<.ADDRESS	; Get Lowbyte of Address
    142  3000 ????				      STA	.POINTER	; Store in pointer
    143  3000 ????				      LDA	#>.ADDRESS	; Get Hibyte of Address
    144  3000 ????				      STA	.POINTER+1	; Store in pointer+1
    145  3000 ????
    146  3000 ????				      ENDM
    147  3000 ????
    148  3000 ????						; EOF
------- FILE d:\Firmaplus\Firmaplus_intern\Atari\PlusROM\Projekte-batariBasic\CaveApocalypse\C.A.V.E. Apocalypse.bas.asm
------- FILE 2600basic.h LEVEL 2 PASS 3
      0  3000 ????				      include	"2600basic.h"
      1  3000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  3000 ????
      3  3000 ????				      processor	6502
------- FILE vcs.h LEVEL 3 PASS 3
      0  3000 ????				      include	"vcs.h"
      1  3000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  3000 ????
      3  3000 ????						; VCS.H
      4  3000 ????						; Version 1.05, 13/November/2003
      5  3000 ????
      6  3000 ????	       00 69	   VERSION_VCS =	105
      7  3000 ????
      8  3000 ????						; THIS IS A PRELIMINARY RELEASE OF *THE* "STANDARD" VCS.H
      9  3000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
     10  3000 ????						; PLEASE DO *NOT* REDISTRIBUTE THIS FILE!
     11  3000 ????						;
     12  3000 ????						; This file defines hardware registers and memory mapping for the
     13  3000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     14  3000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     15  3000 ????						; available at at http://www.atari2600.org/dasm
     16  3000 ????						;
     17  3000 ????						; Many thanks to the original author(s) of this file, and to everyone who has
     18  3000 ????						; contributed to understanding the Atari 2600.  If you take issue with the
     19  3000 ????						; contents, or naming of registers, please write to me (atari2600@taswegian.com)
     20  3000 ????						; with your views.  Please contribute, if you think you can improve this
     21  3000 ????						; file!
     22  3000 ????						;
     23  3000 ????						; Latest Revisions...
     24  3000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     25  3000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     26  3000 ????						;			    This will allow conditional code to verify VCS.H being
     27  3000 ????						;			    used for code assembly.
     28  3000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     29  3000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     30  3000 ????						;			 mirrored reading/writing differences.	This is more a 
     31  3000 ????						;			 readability issue, and binary compatibility with disassembled
     32  3000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     33  3000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     34  3000 ????						;			 which was broken by the use of segments in this file, as
     35  3000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     36  3000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     37  3000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     38  3000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     39  3000 ????						;						   it is safe to leave it undefined, and the base address will
     40  3000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     41  3000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     42  3000 ????						;			  - register definitions are now generated through assignment
     43  3000 ????						;			    in uninitialised segments.	This allows a changeable base
     44  3000 ????						;			    address architecture.
     45  3000 ????						; 1.0	22/MAR/2003		Initial release
     46  3000 ????
     47  3000 ????
     48  3000 ????						;-------------------------------------------------------------------------------
     49  3000 ????
     50  3000 ????						; TIA_BASE_ADDRESS
     51  3000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     52  3000 ????						; Normally 0, the base address should (externally, before including this file)
     53  3000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     54  3000 ????						; The reason is that this bankswitching scheme treats any access to locations
     55  3000 ????						; < $40 as a bankswitch.
     56  3000 ????
     57  3000 ????			  -	      IFNCONST	TIA_BASE_ADDRESS
     58  3000 ????			  -TIA_BASE_ADDRESS =	0
     59  3000 ????				      ENDIF
     60  3000 ????
     61  3000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     62  3000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     63  3000 ????						; *OR* by declaring the label before including this file, eg:
     64  3000 ????						; TIA_BASE_ADDRESS = $40
     65  3000 ????						;   include "vcs.h"
     66  3000 ????
     67  3000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     68  3000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     69  3000 ????						; for the mirrored ROM hardware registers.
     70  3000 ????
     71  3000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     72  3000 ????						; using the -D command-line switch, as required.  If the addresses are not defined, 
     73  3000 ????						; they defaut to the TIA_BASE_ADDRESS.
     74  3000 ????
     75  3000 ????			  -	      IFNCONST	TIA_BASE_READ_ADDRESS
     76  3000 ????			  -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     77  3000 ????				      ENDIF
     78  3000 ????
     79  3000 ????			  -	      IFNCONST	TIA_BASE_WRITE_ADDRESS
     80  3000 ????			  -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     81  3000 ????				      ENDIF
     82  3000 ????
     83  3000 ????						;-------------------------------------------------------------------------------
     84  3000 ????
     85 U002d					      SEG.U	TIA_REGISTERS_WRITE
     86 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     87 U0000
     88 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     89 U0000
     90 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     91 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     92 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     93 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     94 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     95 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     96 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     97 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     98 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     99 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
    100 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
    101 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    102 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    103 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    104 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    105 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    106 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    107 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    108 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    109 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    110 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    111 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    112 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    113 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    114 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    115 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    116 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    117 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    118 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    119 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    120 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    121 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    122 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    123 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    124 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    125 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    126 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    127 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    128 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    129 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    130 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    131 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    132 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    133 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    134 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    135 U002d
    136 U002d							;-------------------------------------------------------------------------------
    137 U002d
    138 U000e					      SEG.U	TIA_REGISTERS_READ
    139 U0000					      ORG	TIA_BASE_READ_ADDRESS
    140 U0000
    141 U0000							;											bit 7	 bit 6
    142 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    143 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    144 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    145 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    146 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    147 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    148 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    149 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    150 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    151 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    152 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    153 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    154 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    155 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    156 U000e
    157 U000e							;-------------------------------------------------------------------------------
    158 U000e
    159 U0298					      SEG.U	RIOT
    160 U0280					      ORG	$280
    161 U0280
    162 U0280							; RIOT MEMORY MAP
    163 U0280
    164 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    165 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    166 U0281
    167 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    168 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    169 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    170 U0284		       00	   INTIM      ds	1	; $284		Timer output
    171 U0285
    172 U0285		       00	   TIMINT     ds	1	; $285
    173 U0286
    174 U0286							; Unused/undefined registers ($285-$294)
    175 U0286
    176 U0286		       00		      ds	1	; $286
    177 U0287		       00		      ds	1	; $287
    178 U0288		       00		      ds	1	; $288
    179 U0289		       00		      ds	1	; $289
    180 U028a		       00		      ds	1	; $28A
    181 U028b		       00		      ds	1	; $28B
    182 U028c		       00		      ds	1	; $28C
    183 U028d		       00		      ds	1	; $28D
    184 U028e		       00		      ds	1	; $28E
    185 U028f		       00		      ds	1	; $28F
    186 U0290		       00		      ds	1	; $290
    187 U0291		       00		      ds	1	; $291
    188 U0292		       00		      ds	1	; $292
    189 U0293		       00		      ds	1	; $293
    190 U0294
    191 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    192 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    193 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    194 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    195 U0298
    196 U0298							;-------------------------------------------------------------------------------
    197 U0298							; The following required for back-compatibility with code which does not use
    198 U0298							; segments.
    199 U0298
    200  3000 ????				      SEG
    201  3000 ????
    202  3000 ????						; EOF
------- FILE 2600basic.h
------- FILE macro.h LEVEL 3 PASS 3
      0  3000 ????				      include	"macro.h"
      1  3000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  3000 ????
      3  3000 ????						; MACRO.H
      4  3000 ????						; Version 1.05, 13/NOVEMBER/2003
      5  3000 ????
      6  3000 ????	       00 69	   VERSION_MACRO =	105
      7  3000 ????
      8  3000 ????						;
      9  3000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
     10  3000 ????						; PLEASE DO *NOT* REDISTRIBUTE MODIFIED VERSIONS OF THIS FILE!
     11  3000 ????						;
     12  3000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     13  3000 ????						; It is distributed as a companion machine-specific support package
     14  3000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     15  3000 ????						; available at at http://www.atari2600.org/dasm
     16  3000 ????						;
     17  3000 ????						; Many thanks to the people who have contributed.  If you take issue with the
     18  3000 ????						; contents, or would like to add something, please write to me
     19  3000 ????						; (atari2600@taswegian.com) with your contribution.
     20  3000 ????						;
     21  3000 ????						; Latest Revisions...
     22  3000 ????						;
     23  3000 ????						; 1.05  14/NOV/2003	  - Added VERSION_MACRO equate (which will reflect 100x version #)
     24  3000 ????						;			    This will allow conditional code to verify MACRO.H being
     25  3000 ????						;			    used for code assembly.
     26  3000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     27  3000 ????						;
     28  3000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     29  3000 ????						;
     30  3000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     31  3000 ????						;			   (standardised macro for vertical synch code)
     32  3000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added. 
     33  3000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     34  3000 ????						; 1.0	22/MAR/2003		Initial release
     35  3000 ????
     36  3000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage, 
     37  3000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     38  3000 ????						;   If you do not allow illegal opcode usage, you must include this file 
     39  3000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     40  3000 ????						;   registers and require them to be defined first).
     41  3000 ????
     42  3000 ????						; Available macros...
     43  3000 ????						;   SLEEP n		 - sleep for n cycles
     44  3000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     45  3000 ????						;   CLEAN_START	 - set machine to known state on startup
     46  3000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     47  3000 ????
     48  3000 ????						;-------------------------------------------------------------------------------
     49  3000 ????						; SLEEP duration
     50  3000 ????						; Original author: Thomas Jentzsch
     51  3000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     52  3000 ????						; useful for code where precise timing is required.
     53  3000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     54  3000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     55  3000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     56  3000 ????
     57  3000 ????				      MAC	sleep
     58  3000 ????			   .CYCLES    SET	{1}
     59  3000 ????
     60  3000 ????				      IF	.CYCLES < 2
     61  3000 ????				      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     62  3000 ????				      ERR
     63  3000 ????				      ENDIF
     64  3000 ????
     65  3000 ????				      IF	.CYCLES & 1
     66  3000 ????				      IFNCONST	NO_ILLEGAL_OPCODES
     67  3000 ????				      nop	0
     68  3000 ????				      ELSE
     69  3000 ????				      bit	VSYNC
     70  3000 ????				      ENDIF
     71  3000 ????			   .CYCLES    SET	.CYCLES - 3
     72  3000 ????				      ENDIF
     73  3000 ????
     74  3000 ????				      REPEAT	.CYCLES / 2
     75  3000 ????				      nop
     76  3000 ????				      REPEND
     77  3000 ????				      ENDM		;usage: SLEEP n (n>1)
     78  3000 ????
     79  3000 ????						;-------------------------------------------------------------------------------
     80  3000 ????						; VERTICAL_SYNC
     81  3000 ????						; Original author: Manuel Polik
     82  3000 ????						; Inserts the code required for a proper 3 scannline 
     83  3000 ????						; vertical sync sequence
     84  3000 ????						;
     85  3000 ????						; Note: Alters the accumulator
     86  3000 ????						;
     87  3000 ????						; IN:
     88  3000 ????						; OUT: A = 1
     89  3000 ????
     90  3000 ????				      MAC	vertical_sync
     91  3000 ????				      LDA	#$02	; A = VSYNC enable
     92  3000 ????				      STA	WSYNC	; Finish current line
     93  3000 ????				      STA	VSYNC	; Start vertical sync
     94  3000 ????				      STA	WSYNC	; 1st line vertical sync
     95  3000 ????				      STA	WSYNC	; 2nd line vertical sync
     96  3000 ????				      LSR		; A = VSYNC disable
     97  3000 ????				      STA	WSYNC	; 3rd line vertical sync
     98  3000 ????				      STA	VSYNC	; Stop vertical sync
     99  3000 ????				      ENDM
    100  3000 ????
    101  3000 ????						;-------------------------------------------------------------------------------
    102  3000 ????						; CLEAN_START
    103  3000 ????						; Original author: Andrew Davie
    104  3000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
    105  3000 ????						; Sets stack pointer to $FF, and all registers to 0
    106  3000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    107  3000 ????						; Use as very first section of code on boot (ie: at reset)
    108  3000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    109  3000 ????
    110  3000 ????				      MAC	clean_start
    111  3000 ????				      sei
    112  3000 ????				      cld
    113  3000 ????
    114  3000 ????				      ldx	#0
    115  3000 ????				      txa
    116  3000 ????				      tay
    117  3000 ????			   .CLEAR_STACK dex
    118  3000 ????				      txs
    119  3000 ????				      pha
    120  3000 ????				      bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    121  3000 ????
    122  3000 ????				      ENDM
    123  3000 ????
    124  3000 ????						;-------------------------------------------------------
    125  3000 ????						; SET_POINTER
    126  3000 ????						; Original author: Manuel Rotschkar
    127  3000 ????						;
    128  3000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    129  3000 ????						;
    130  3000 ????						; Usage: SET_POINTER pointer, address
    131  3000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    132  3000 ????						;
    133  3000 ????						; Note: Alters the accumulator, NZ flags
    134  3000 ????						; IN 1: 2 byte RAM location reserved for pointer
    135  3000 ????						; IN 2: absolute address
    136  3000 ????
    137  3000 ????				      MAC	set_pointer
    138  3000 ????			   .POINTER   SET	{1}
    139  3000 ????			   .ADDRESS   SET	{2}
    140  3000 ????
    141  3000 ????				      LDA	#<.ADDRESS	; Get Lowbyte of Address
    142  3000 ????				      STA	.POINTER	; Store in pointer
    143  3000 ????				      LDA	#>.ADDRESS	; Get Hibyte of Address
    144  3000 ????				      STA	.POINTER+1	; Store in pointer+1
    145  3000 ????
    146  3000 ????				      ENDM
    147  3000 ????
    148  3000 ????						; EOF
------- FILE 2600basic.h
------- FILE 2600basic_variable_redefs.h LEVEL 3 PASS 3
      0  3000 ????				      include	"2600basic_variable_redefs.h"
      1  3000 ????						; This file contains variable mapping and other information for the current project.
      2  3000 ????
      3  3000 ????	       00 23	   bscode_length =	35
      4  3000 ????	       00 1d	   _SD_Touch_Enemy_length =	.skipL0520-_SD_Touch_Enemy
      5  3000 ????
      6  3000 ????	       00 21	   _SD_Shoot_Enemy_length =	.skipL0519-_SD_Shoot_Enemy
      7  3000 ????
      8  3000 ????	       00 45	   _SD_Shoot_Miss_length =	.skipL0518-_SD_Shoot_Miss
      9  3000 ????
     10  3000 ????	       00 35	   _SD_Shot_Wall_length =	.skipL0517-_SD_Shot_Wall
     11  3000 ????
     12  3000 ????	       f0 6f	   w_extra_wall_startpos_y =	w111
     13  3000 ????
     14  3000 ????	       f0 ef	   r_extra_wall_startpos_y =	r111
     15  3000 ????
     16  3000 ????	       f0 6e	   w_extra_wall_startpos_x =	w110
     17  3000 ????
     18  3000 ????	       f0 ee	   r_extra_wall_startpos_x =	r110
     19  3000 ????
     20  3000 ????	       f0 6d	   w_extra_wall_height =	w109
     21  3000 ????
     22  3000 ????	       f0 ed	   r_extra_wall_height =	r109
     23  3000 ????
     24  3000 ????	       f0 6c	   w_extra_wall_width =	w108
     25  3000 ????
     26  3000 ????	       f0 ec	   r_extra_wall_width =	r108
     27  3000 ????
     28  3000 ????	       f0 6b	   w_extra_wall_type_and_range =	w107
     29  3000 ????
     30  3000 ????	       f0 eb	   r_extra_wall_type_and_range =	r107
     31  3000 ????
     32  3000 ????	       f0 6a	   w_roommate_startpos_y =	w106
     33  3000 ????
     34  3000 ????	       f0 ea	   r_roommate_startpos_y =	r106
     35  3000 ????
     36  3000 ????	       f0 69	   w_roommate_startpos_x =	w105
     37  3000 ????
     38  3000 ????	       f0 e9	   r_roommate_startpos_x =	r105
     39  3000 ????
     40  3000 ????	       f0 68	   w_roommate_type_and_range =	w104
     41  3000 ????
     42  3000 ????	       f0 e8	   r_roommate_type_and_range =	r104
     43  3000 ????
     44  3000 ????	       f0 67	   w_room_color_bottom =	w103
     45  3000 ????
     46  3000 ????	       f0 e7	   r_room_color_bottom =	r103
     47  3000 ????
     48  3000 ????	       f0 63	   w_room_color_middle =	w099
     49  3000 ????
     50  3000 ????	       f0 e3	   r_room_color_middle =	r099
     51  3000 ????
     52  3000 ????	       f0 62	   w_room_color_top =	w098
     53  3000 ????
     54  3000 ????	       f0 e2	   r_room_color_top =	r098
     55  3000 ????
     56  3000 ????	       f0 e1	   r_Bit0_room_type_top =	r097
     57  3000 ????
     58  3000 ????	       f0 e1	   w_BitOp_room_type =	r097
     59  3000 ????
     60  3000 ????	       f0 e1	   r_BitOp_room_type =	r097
     61  3000 ????
     62  3000 ????	       f0 61	   w_room_definition_start =	w097
     63  3000 ????
     64  3000 ????	       00 ad	   extra_wall_type =	var9
     65  3000 ????
     66  3000 ????	       00 ac	   max_priv_level_bcd3 =	var8
     67  3000 ????
     68  3000 ????	       00 ab	   max_priv_level_bcd2 =	var7
     69  3000 ????
     70  3000 ????	       00 aa	   max_priv_level_bcd1 =	var6
     71  3000 ????
     72  3000 ????	       00 a9	   max_pub_level_bcd3 =	var5
     73  3000 ????
     74  3000 ????	       00 a8	   max_pub_level_bcd2 =	var4
     75  3000 ????
     76  3000 ????	       00 a7	   max_pub_level_bcd1 =	var3
     77  3000 ????
     78  3000 ????	       00 a6	   gamenumber =	var2
     79  3000 ????
     80  3000 ????	       00 a5	   new_room_player1x =	var1
     81  3000 ????
     82  3000 ????	       00 a4	   new_room_player1y =	var0
     83  3000 ????
     84  3000 ????	       00 ec	   _Bit7_M0_Moving =	y
     85  3000 ????
     86  3000 ????	       00 ec	   _Bit6_Flip_P1 =	y
     87  3000 ????
     88  3000 ????	       00 ec	   _Bit5_Request_Pending =	y
     89  3000 ????
     90  3000 ????	       00 ec	   _Bit4_Game_Over =	y
     91  3000 ????
     92  3000 ????	       00 ec	   _Bit3_Ball_Shot_Moving =	y
     93  3000 ????
     94  3000 ????	       00 ec	   _Bit2_Level_finished =	y
     95  3000 ????
     96  3000 ????	       00 ec	   _Bit1_Wall_Dir =	y
     97  3000 ????
     98  3000 ????	       00 ec	   _Bit0_roommate_Dir =	y
     99  3000 ????
    100  3000 ????	       00 ec	   _Bit_Game_State =	y
    101  3000 ????
    102  3000 ????	       00 86	   P1y_position =	player1y
    103  3000 ????	       00 e9	   P1y_velocity =	v
    104  3000 ????	       00 91	   M0y_position =	missile0y
    105  3000 ????	       00 e6	   M0y_velocity =	s
    106  3000 ????	       00 89	   Bally_position =	bally
    107  3000 ????	       00 e3	   Bally_velocity =	p
    108  3000 ????	       00 e1	   Safe_Point_P1_y =	n
    109  3000 ????
    110  3000 ????	       00 e0	   Safe_Point_P1_x =	m
    111  3000 ????
    112  3000 ????	       00 df	   _Bit2_New_Room_Flip_P1 =	l
    113  3000 ????
    114  3000 ????	       00 df	   _Bit1_Safe_Point_P1_Flip =	l
    115  3000 ????
    116  3000 ????	       00 df	   _Bit0_Safe_Point_reached =	l
    117  3000 ????
    118  3000 ????	       00 df	   _BitOp_Safe_Point_New_Room =	l
    119  3000 ????
    120  3000 ????	       00 de	   roommate_type =	k
    121  3000 ????
    122  3000 ????	       00 dd	   roommate_move_x =	j
    123  3000 ????
    124  3000 ????	       00 dc	   extra_wall_move_x =	i
    125  3000 ????
    126  3000 ????	       00 db	   _Ch0_Counter =	h
    127  3000 ????
    128  3000 ????	       00 da	   _Ch0_Duration =	g
    129  3000 ????
    130  3000 ????	       00 d9	   _Ch0_Sound =	f
    131  3000 ????
    132  3000 ????	       00 d8	   _Bit3_P1_Dir_Right =	e
    133  3000 ????
    134  3000 ????	       00 d8	   _Bit2_P1_Dir_Left =	e
    135  3000 ????
    136  3000 ????	       00 d8	   _Bit1_P1_Dir_Down =	e
    137  3000 ????
    138  3000 ????	       00 d8	   _Bit0_P1_Dir_Up =	e
    139  3000 ????
    140  3000 ????	       00 d8	   _BitOp_P1_Dir =	e
    141  3000 ????
    142  3000 ????	       00 d7	   _Bit3_M0_Dir_Right =	d
    143  3000 ????
    144  3000 ????	       00 d7	   _Bit2_M0_Dir_Left =	d
    145  3000 ????
    146  3000 ????	       00 d7	   _Bit1_M0_Dir_Down =	d
    147  3000 ????
    148  3000 ????	       00 d7	   _Bit0_M0_Dir_Up =	d
    149  3000 ????
    150  3000 ????	       00 d7	   _BitOp_M0_Dir =	d
    151  3000 ????
    152  3000 ????	       00 d6	   _Bit3_Ball_Shot_Dir_Right2 =	c
    153  3000 ????
    154  3000 ????	       00 d6	   _Bit2_Ball_Shot_Dir_Right1 =	c
    155  3000 ????
    156  3000 ????	       00 d6	   _Bit1_Ball_Shot_Dir_Left2 =	c
    157  3000 ????
    158  3000 ????	       00 d6	   _Bit0_Ball_Shot_Dir_Left1 =	c
    159  3000 ????
    160  3000 ????	       00 d6	   _BitOp_Ball_Shot_Dir =	c
    161  3000 ????
    162  3000 ????	       00 d5	   frame_counter =	b
    163  3000 ????
    164  3000 ????	       00 d4	   delay_counter =	a
    165  3000 ????
    166  3000 ????	       00 95	   _sc3       =	score + 2
    167  3000 ????
    168  3000 ????	       00 94	   _sc2       =	score + 1
    169  3000 ????
    170  3000 ????	       00 93	   _sc1       =	score
    171  3000 ????
    172  3000 ????	       00 fe	   _FE	      =	$FE
    173  3000 ????
    174  3000 ????	       00 fc	   _FC	      =	$FC
    175  3000 ????
    176  3000 ????	       00 fa	   _FA	      =	$FA
    177  3000 ????
    178  3000 ????	       00 f8	   _F8	      =	$F8
    179  3000 ????
    180  3000 ????	       00 f6	   _F6	      =	$F6
    181  3000 ????
    182  3000 ????	       00 f4	   _F4	      =	$F4
    183  3000 ????
    184  3000 ????	       00 f2	   _F2	      =	$F2
    185  3000 ????
    186  3000 ????	       00 f0	   _F0	      =	$F0
    187  3000 ????
    188  3000 ????	       00 ee	   _EE	      =	$EE
    189  3000 ????
    190  3000 ????	       00 ec	   _EC	      =	$EC
    191  3000 ????
    192  3000 ????	       00 ea	   _EA	      =	$EA
    193  3000 ????
    194  3000 ????	       00 e8	   _E8	      =	$E8
    195  3000 ????
    196  3000 ????	       00 e6	   _E6	      =	$E6
    197  3000 ????
    198  3000 ????	       00 e4	   _E4	      =	$E4
    199  3000 ????
    200  3000 ????	       00 e2	   _E2	      =	$E2
    201  3000 ????
    202  3000 ????	       00 e0	   _E0	      =	$E0
    203  3000 ????
    204  3000 ????	       00 de	   _DE	      =	$DE
    205  3000 ????
    206  3000 ????	       00 dc	   _DC	      =	$DC
    207  3000 ????
    208  3000 ????	       00 da	   _DA	      =	$DA
    209  3000 ????
    210  3000 ????	       00 d8	   _D8	      =	$D8
    211  3000 ????
    212  3000 ????	       00 d6	   _D6	      =	$D6
    213  3000 ????
    214  3000 ????	       00 d4	   _D4	      =	$D4
    215  3000 ????
    216  3000 ????	       00 d2	   _D2	      =	$D2
    217  3000 ????
    218  3000 ????	       00 d0	   _D0	      =	$D0
    219  3000 ????
    220  3000 ????	       00 ce	   _CE	      =	$CE
    221  3000 ????
    222  3000 ????	       00 cc	   _CC	      =	$CC
    223  3000 ????
    224  3000 ????	       00 ca	   _CA	      =	$CA
    225  3000 ????
    226  3000 ????	       00 c8	   _C8	      =	$C8
    227  3000 ????
    228  3000 ????	       00 c6	   _C6	      =	$C6
    229  3000 ????
    230  3000 ????	       00 c4	   _C4	      =	$C4
    231  3000 ????
    232  3000 ????	       00 c2	   _C2	      =	$C2
    233  3000 ????
    234  3000 ????	       00 c0	   _C0	      =	$C0
    235  3000 ????
    236  3000 ????	       00 be	   _BE	      =	$BE
    237  3000 ????
    238  3000 ????	       00 bc	   _BC	      =	$BC
    239  3000 ????
    240  3000 ????	       00 ba	   _BA	      =	$BA
    241  3000 ????
    242  3000 ????	       00 b8	   _B8	      =	$B8
    243  3000 ????
    244  3000 ????	       00 b6	   _B6	      =	$B6
    245  3000 ????
    246  3000 ????	       00 b4	   _B4	      =	$B4
    247  3000 ????
    248  3000 ????	       00 b2	   _B2	      =	$B2
    249  3000 ????
    250  3000 ????	       00 b0	   _B0	      =	$B0
    251  3000 ????
    252  3000 ????	       00 ae	   _AE	      =	$AE
    253  3000 ????
    254  3000 ????	       00 ac	   _AC	      =	$AC
    255  3000 ????
    256  3000 ????	       00 aa	   _AA	      =	$AA
    257  3000 ????
    258  3000 ????	       00 a8	   _A8	      =	$A8
    259  3000 ????
    260  3000 ????	       00 a6	   _A6	      =	$A6
    261  3000 ????
    262  3000 ????	       00 a4	   _A4	      =	$A4
    263  3000 ????
    264  3000 ????	       00 a2	   _A2	      =	$A2
    265  3000 ????
    266  3000 ????	       00 a0	   _A0	      =	$A0
    267  3000 ????
    268  3000 ????	       00 9e	   _9E	      =	$9E
    269  3000 ????
    270  3000 ????	       00 9c	   _9C	      =	$9C
    271  3000 ????
    272  3000 ????	       00 9a	   _9A	      =	$9A
    273  3000 ????
    274  3000 ????	       00 98	   _98	      =	$98
    275  3000 ????
    276  3000 ????	       00 96	   _96	      =	$96
    277  3000 ????
    278  3000 ????	       00 94	   _94	      =	$94
    279  3000 ????
    280  3000 ????	       00 92	   _92	      =	$92
    281  3000 ????
    282  3000 ????	       00 90	   _90	      =	$90
    283  3000 ????
    284  3000 ????	       00 8e	   _8E	      =	$8E
    285  3000 ????
    286  3000 ????	       00 8c	   _8C	      =	$8C
    287  3000 ????
    288  3000 ????	       00 8a	   _8A	      =	$8A
    289  3000 ????
    290  3000 ????	       00 88	   _88	      =	$88
    291  3000 ????
    292  3000 ????	       00 86	   _86	      =	$86
    293  3000 ????
    294  3000 ????	       00 84	   _84	      =	$84
    295  3000 ????
    296  3000 ????	       00 82	   _82	      =	$82
    297  3000 ????
    298  3000 ????	       00 80	   _80	      =	$80
    299  3000 ????
    300  3000 ????	       00 7e	   _7E	      =	$7E
    301  3000 ????
    302  3000 ????	       00 7c	   _7C	      =	$7C
    303  3000 ????
    304  3000 ????	       00 7a	   _7A	      =	$7A
    305  3000 ????
    306  3000 ????	       00 78	   _78	      =	$78
    307  3000 ????
    308  3000 ????	       00 76	   _76	      =	$76
    309  3000 ????
    310  3000 ????	       00 74	   _74	      =	$74
    311  3000 ????
    312  3000 ????	       00 72	   _72	      =	$72
    313  3000 ????
    314  3000 ????	       00 70	   _70	      =	$70
    315  3000 ????
    316  3000 ????	       00 6e	   _6E	      =	$6E
    317  3000 ????
    318  3000 ????	       00 6c	   _6C	      =	$6C
    319  3000 ????
    320  3000 ????	       00 6a	   _6A	      =	$6A
    321  3000 ????
    322  3000 ????	       00 68	   _68	      =	$68
    323  3000 ????
    324  3000 ????	       00 66	   _66	      =	$66
    325  3000 ????
    326  3000 ????	       00 64	   _64	      =	$64
    327  3000 ????
    328  3000 ????	       00 62	   _62	      =	$62
    329  3000 ????
    330  3000 ????	       00 60	   _60	      =	$60
    331  3000 ????
    332  3000 ????	       00 5e	   _5E	      =	$5E
    333  3000 ????
    334  3000 ????	       00 5c	   _5C	      =	$5C
    335  3000 ????
    336  3000 ????	       00 5a	   _5A	      =	$5A
    337  3000 ????
    338  3000 ????	       00 58	   _58	      =	$58
    339  3000 ????
    340  3000 ????	       00 56	   _56	      =	$56
    341  3000 ????
    342  3000 ????	       00 54	   _54	      =	$54
    343  3000 ????
    344  3000 ????	       00 52	   _52	      =	$52
    345  3000 ????
    346  3000 ????	       00 50	   _50	      =	$50
    347  3000 ????
    348  3000 ????	       00 4e	   _4E	      =	$4E
    349  3000 ????
    350  3000 ????	       00 4c	   _4C	      =	$4C
    351  3000 ????
    352  3000 ????	       00 4a	   _4A	      =	$4A
    353  3000 ????
    354  3000 ????	       00 48	   _48	      =	$48
    355  3000 ????
    356  3000 ????	       00 46	   _46	      =	$46
    357  3000 ????
    358  3000 ????	       00 44	   _44	      =	$44
    359  3000 ????
    360  3000 ????	       00 42	   _42	      =	$42
    361  3000 ????
    362  3000 ????	       00 40	   _40	      =	$40
    363  3000 ????
    364  3000 ????	       00 3e	   _3E	      =	$3E
    365  3000 ????
    366  3000 ????	       00 3c	   _3C	      =	$3C
    367  3000 ????
    368  3000 ????	       00 3a	   _3A	      =	$3A
    369  3000 ????
    370  3000 ????	       00 38	   _38	      =	$38
    371  3000 ????
    372  3000 ????	       00 36	   _36	      =	$36
    373  3000 ????
    374  3000 ????	       00 34	   _34	      =	$34
    375  3000 ????
    376  3000 ????	       00 32	   _32	      =	$32
    377  3000 ????
    378  3000 ????	       00 30	   _30	      =	$30
    379  3000 ????
    380  3000 ????	       00 2e	   _2E	      =	$2E
    381  3000 ????
    382  3000 ????	       00 2c	   _2C	      =	$2C
    383  3000 ????
    384  3000 ????	       00 2a	   _2A	      =	$2A
    385  3000 ????
    386  3000 ????	       00 28	   _28	      =	$28
    387  3000 ????
    388  3000 ????	       00 26	   _26	      =	$26
    389  3000 ????
    390  3000 ????	       00 24	   _24	      =	$24
    391  3000 ????
    392  3000 ????	       00 22	   _22	      =	$22
    393  3000 ????
    394  3000 ????	       00 20	   _20	      =	$20
    395  3000 ????
    396  3000 ????	       00 1e	   _1E	      =	$1E
    397  3000 ????
    398  3000 ????	       00 1c	   _1C	      =	$1C
    399  3000 ????
    400  3000 ????	       00 1a	   _1A	      =	$1A
    401  3000 ????
    402  3000 ????	       00 18	   _18	      =	$18
    403  3000 ????
    404  3000 ????	       00 16	   _16	      =	$16
    405  3000 ????
    406  3000 ????	       00 14	   _14	      =	$14
    407  3000 ????
    408  3000 ????	       00 12	   _12	      =	$12
    409  3000 ????
    410  3000 ????	       00 10	   _10	      =	$10
    411  3000 ????
    412  3000 ????	       00 0e	   _0E	      =	$0E
    413  3000 ????
    414  3000 ????	       00 0c	   _0C	      =	$0C
    415  3000 ????
    416  3000 ????	       00 0a	   _0A	      =	$0A
    417  3000 ????
    418  3000 ????	       00 08	   _08	      =	$08
    419  3000 ????
    420  3000 ????	       00 06	   _06	      =	$06
    421  3000 ????
    422  3000 ????	       00 04	   _04	      =	$04
    423  3000 ????
    424  3000 ????	       00 02	   _02	      =	$02
    425  3000 ????
    426  3000 ????	       00 00	   _00	      =	$00
    427  3000 ????
    428  3000 ????	       00 09	   req_load_menu =	9
    429  3000 ????
    430  3000 ????	       00 08	   req_safe_point =	8
    431  3000 ????
    432  3000 ????	       00 07	   req_level_reset =	7
    433  3000 ????
    434  3000 ????	       00 06	   req_move_down =	6
    435  3000 ????
    436  3000 ????	       00 05	   req_move_right =	5
    437  3000 ????
    438  3000 ????	       00 04	   req_move_up =	4
    439  3000 ????
    440  3000 ????	       00 03	   req_move_left =	3
    441  3000 ????
    442  3000 ????	       00 02	   req_game_over =	2
    443  3000 ????
    444  3000 ????	       00 01	   req_level_up =	1
    445  3000 ????
    446  3000 ????	       00 00	   req_load   =	0
    447  3000 ????
    448  3000 ????	       00 06	   response_menu_size =	6
    449  3000 ????
    450  3000 ????	       00 1a	   response_size_minus_1 =	26
    451  3000 ????
    452  3000 ????	       00 08	   scback     =	#$08
    453  3000 ????
    454  3000 ????	       00 94	   _M_Edge_Right =	148
    455  3000 ????
    456  3000 ????	       00 0e	   _M_Edge_Left =	14
    457  3000 ????
    458  3000 ????	       00 58	   _M_Edge_Bottom =	88
    459  3000 ????
    460  3000 ????	       00 02	   _M_Edge_Top =	2
    461  3000 ????
    462  3000 ????	       00 4c	   player_max_y =	76
    463  3000 ????
    464  3000 ????	       00 02	   player_min_y =	2
    465  3000 ????
    466  3000 ????	       00 86	   player_max_x =	134
    467  3000 ????
    468  3000 ????	       00 0a	   player_min_x =	10
    469  3000 ????
    470  3000 ????	       00 01	   pfscore    =	1
    471  3000 ????
    472  3000 ????	       00 04	   pfres      =	4
    473  3000 ????
    474  3000 ????	       00 01	   superchip  =	1
    475  3000 ????	       00 01	   bs_mask    =	1
    476  3000 ????	       00 08	   bankswitch =	8
    477  3000 ????	       1f f8	   bankswitch_hotspot =	$1FF8
    478  3000 ????	       00 01	   PFcolors   =	1
    479  3000 ????	       00 01	   player1colors =	1
------- FILE 2600basic.h
      7  3000 ????
      8  3000 ????	       00 80	   player0x   =	$80
      9  3000 ????	       00 81	   player1x   =	$81
     10  3000 ????	       00 82	   missile0x  =	$82
     11  3000 ????	       00 83	   missile1x  =	$83
     12  3000 ????	       00 84	   ballx      =	$84
     13  3000 ????
     14  3000 ????	       00 85	   objecty    =	$85
     15  3000 ????	       00 85	   player0y   =	$85
     16  3000 ????	       00 86	   player1y   =	$86
     17  3000 ????	       00 87	   missile1height =	$87
     18  3000 ????	       00 88	   missile1y  =	$88
     19  3000 ????	       00 89	   bally      =	$89
     20  3000 ????
     21  3000 ????	       00 87	   player1color =	$87	; replaces missile 1
     22  3000 ????
     23  3000 ????	       00 8a	   player0pointer =	$8A	;uses $8A-$8B
     24  3000 ????	       00 8a	   player0pointerlo =	$8A
     25  3000 ????	       00 8b	   player0pointerhi =	$8B
     26  3000 ????	       00 8c	   player1pointer =	$8C	; $8C-$8D
     27  3000 ????	       00 8c	   player1pointerlo =	$8C
     28  3000 ????	       00 8d	   player1pointerhi =	$8D
     29  3000 ????
     30  3000 ????	       00 8e	   player0height =	$8E
     31  3000 ????	       00 8f	   player1height =	$8F
     32  3000 ????	       00 90	   missile0height =	$90
     33  3000 ????	       00 91	   missile0y  =	$91
     34  3000 ????	       00 92	   ballheight =	$92
     35  3000 ????
     36  3000 ????	       00 90	   currentpaddle =	$90	; replaces missile 0 (and can't be used with playercolor)
     37  3000 ????	       00 91	   paddle     =	$91	; replaces missile 0
     38  3000 ????	       00 82	   player0colorstore =	$82	; replaces missile 0
     39  3000 ????	       00 90	   player0color =	$90	; replaces missile 0
     40  3000 ????
     41  3000 ????	       00 93	   score      =	$93	; $93-$95
     42  3000 ????	       00 96	   scorepointers =	$96	; $96-$9B = 6 bytes
     43  3000 ????	       00 9c	   temp1      =	$9C	;used by kernel.  can be used in program too, but
     44  3000 ????	       00 9d	   temp2      =	$9D	;are obliterated when drawscreen is called.
     45  3000 ????	       00 9e	   temp3      =	$9E
     46  3000 ????	       00 9f	   temp4      =	$9F
     47  3000 ????	       00 a0	   temp5      =	$A0
     48  3000 ????	       00 a1	   temp6      =	$A1
     49  3000 ????
     50  3000 ????	       00 a2	   rand       =	$A2
     51  3000 ????	       00 a3	   scorecolor =	$A3
     52  3000 ????
     53  3000 ????	       00 a4	   var0       =	$A4
     54  3000 ????	       00 a5	   var1       =	$A5
     55  3000 ????	       00 a6	   var2       =	$A6
     56  3000 ????	       00 a7	   var3       =	$A7
     57  3000 ????	       00 a8	   var4       =	$A8
     58  3000 ????	       00 a9	   var5       =	$A9
     59  3000 ????	       00 aa	   var6       =	$AA
     60  3000 ????	       00 ab	   var7       =	$AB
     61  3000 ????	       00 ac	   var8       =	$AC
     62  3000 ????	       00 ad	   var9       =	$AD
     63  3000 ????	       00 ae	   var10      =	$AE
     64  3000 ????	       00 af	   var11      =	$AF
     65  3000 ????	       00 b0	   var12      =	$B0
     66  3000 ????	       00 b1	   var13      =	$B1
     67  3000 ????	       00 b2	   var14      =	$B2
     68  3000 ????	       00 b3	   var15      =	$B3
     69  3000 ????	       00 b4	   var16      =	$B4
     70  3000 ????	       00 b5	   var17      =	$B5
     71  3000 ????	       00 b6	   var18      =	$B6
     72  3000 ????	       00 b7	   var19      =	$B7
     73  3000 ????	       00 b8	   var20      =	$B8
     74  3000 ????	       00 b9	   var21      =	$B9
     75  3000 ????	       00 ba	   var22      =	$BA
     76  3000 ????	       00 bb	   var23      =	$BB
     77  3000 ????	       00 bc	   var24      =	$BC
     78  3000 ????	       00 bd	   var25      =	$BD
     79  3000 ????	       00 be	   var26      =	$BE
     80  3000 ????	       00 bf	   var27      =	$BF
     81  3000 ????	       00 c0	   var28      =	$C0
     82  3000 ????	       00 c1	   var29      =	$C1
     83  3000 ????	       00 c2	   var30      =	$C2
     84  3000 ????	       00 c3	   var31      =	$C3
     85  3000 ????	       00 c4	   var32      =	$C4
     86  3000 ????	       00 c5	   var33      =	$C5
     87  3000 ????	       00 c6	   var34      =	$C6
     88  3000 ????	       00 c7	   var35      =	$C7
     89  3000 ????	       00 c8	   var36      =	$C8
     90  3000 ????	       00 c9	   var37      =	$C9
     91  3000 ????	       00 ca	   var38      =	$CA
     92  3000 ????	       00 cb	   var39      =	$CB
     93  3000 ????	       00 cc	   var40      =	$CC
     94  3000 ????	       00 cd	   var41      =	$CD
     95  3000 ????	       00 ce	   var42      =	$CE
     96  3000 ????	       00 cf	   var43      =	$CF
     97  3000 ????	       00 d0	   var44      =	$D0
     98  3000 ????	       00 d1	   var45      =	$D1
     99  3000 ????	       00 d2	   var46      =	$D2
    100  3000 ????	       00 d3	   var47      =	$D3
    101  3000 ????
    102  3000 ????	       00 d4	   A	      =	$d4
    103  3000 ????	       00 d4	   a	      =	$d4
    104  3000 ????	       00 d5	   B	      =	$d5
    105  3000 ????	       00 d5	   b	      =	$d5
    106  3000 ????	       00 d6	   C	      =	$d6
    107  3000 ????	       00 d6	   c	      =	$d6
    108  3000 ????	       00 d7	   D	      =	$d7
    109  3000 ????	       00 d7	   d	      =	$d7
    110  3000 ????	       00 d8	   E	      =	$d8
    111  3000 ????	       00 d8	   e	      =	$d8
    112  3000 ????	       00 d9	   F	      =	$d9
    113  3000 ????	       00 d9	   f	      =	$d9
    114  3000 ????	       00 da	   G	      =	$da
    115  3000 ????	       00 da	   g	      =	$da
    116  3000 ????	       00 db	   H	      =	$db
    117  3000 ????	       00 db	   h	      =	$db
    118  3000 ????	       00 dc	   I	      =	$dc
    119  3000 ????	       00 dc	   i	      =	$dc
    120  3000 ????	       00 dd	   J	      =	$dd
    121  3000 ????	       00 dd	   j	      =	$dd
    122  3000 ????	       00 de	   K	      =	$de
    123  3000 ????	       00 de	   k	      =	$de
    124  3000 ????	       00 df	   L	      =	$df
    125  3000 ????	       00 df	   l	      =	$df
    126  3000 ????	       00 e0	   M	      =	$e0
    127  3000 ????	       00 e0	   m	      =	$e0
    128  3000 ????	       00 e1	   N	      =	$e1
    129  3000 ????	       00 e1	   n	      =	$e1
    130  3000 ????	       00 e2	   O	      =	$e2
    131  3000 ????	       00 e2	   o	      =	$e2
    132  3000 ????	       00 e3	   P	      =	$e3
    133  3000 ????	       00 e3	   p	      =	$e3
    134  3000 ????	       00 e4	   Q	      =	$e4
    135  3000 ????	       00 e4	   q	      =	$e4
    136  3000 ????	       00 e5	   R	      =	$e5
    137  3000 ????	       00 e5	   r	      =	$e5
    138  3000 ????	       00 e6	   S	      =	$e6
    139  3000 ????	       00 e6	   s	      =	$e6
    140  3000 ????	       00 e7	   T	      =	$e7
    141  3000 ????	       00 e7	   t	      =	$e7
    142  3000 ????	       00 e8	   U	      =	$e8
    143  3000 ????	       00 e8	   u	      =	$e8
    144  3000 ????	       00 e9	   V	      =	$e9
    145  3000 ????	       00 e9	   v	      =	$e9
    146  3000 ????	       00 ea	   W	      =	$ea
    147  3000 ????	       00 ea	   w	      =	$ea
    148  3000 ????	       00 eb	   X	      =	$eb
    149  3000 ????	       00 eb	   x	      =	$eb
    150  3000 ????	       00 ec	   Y	      =	$ec
    151  3000 ????	       00 ec	   y	      =	$ec
    152  3000 ????	       00 ed	   Z	      =	$ed
    153  3000 ????	       00 ed	   z	      =	$ed
    154  3000 ????
    155  3000 ????	       00 ee	   temp7      =	$ee	; This is used to aid in bankswitching
    156  3000 ????	       00 ef	   playfieldpos =	$ef
    157  3000 ????
    158  3000 ????						; available for other uses, or if unused, provide more stack space
    159  3000 ????
    160  3000 ????	       00 f0	   aux1       =	$f0
    161  3000 ????	       00 f1	   aux2       =	$f1
    162  3000 ????	       00 f2	   aux3       =	$f2
    163  3000 ????	       00 f3	   aux4       =	$f3
    164  3000 ????	       00 f4	   aux5       =	$f4
    165  3000 ????	       00 f5	   aux6       =	$f5
    166  3000 ????
    167  3000 ????						; playfield color/height pointers
    168  3000 ????	       00 f0	   pfcolortable =	$f0	; and $d5
    169  3000 ????	       00 f0	   pfheighttable =	$f0	; and $d5
    170  3000 ????						; the above pointers are the same because if color and height are both used together,
    171  3000 ????						; they must used absolute indexed and cannot use pointers
    172  3000 ????
    173  3000 ????	       00 f2	   lifepointer =	$f2	; pointer to "lives" shape
    174  3000 ????						; upper 3 bits of $f2 contain the number of lives
    175  3000 ????	       00 f4	   lifecolor  =	$f4
    176  3000 ????	       00 f3	   lives      =	$f3	; # lives >> 5
    177  3000 ????	       00 f5	   statusbarlength =	$f5	; only uses upper 5 bits; other bits free
    178  3000 ????
    179  3000 ????	       00 f2	   pfscore1   =	$f2	; optional playfield bytes in score
    180  3000 ????	       00 f3	   pfscore2   =	$f3
    181  3000 ????	       00 f4	   pfscorecolor =	$f4
    182  3000 ????
    183  3000 ????	       00 f6	   stack1     =	$f6
    184  3000 ????	       00 f7	   stack2     =	$f7
    185  3000 ????	       00 f8	   stack3     =	$f8
    186  3000 ????	       00 f9	   stack4     =	$f9
    187  3000 ????						; the stack bytes above may be used in the kernel
    188  3000 ????						; stack = F6-F7, F8-F9, FA-FB, FC-FD, FE-FF
    189  3000 ????
    190  3000 ????				      MAC	return
    191  3000 ????				      ifnconst	bankswitch
    192  3000 ????				      rts
    193  3000 ????				      else
    194  3000 ????				      jmp	BS_return
    195  3000 ????				      endif
    196  3000 ????				      ENDM		; auto-return from either a regular or bankswitched module
    197  3000 ????
    198  3000 ????				      ifconst	superchip
    199  3000 ????	       10 d0	   playfieldbase =	$10D0
------- FILE superchip.h LEVEL 3 PASS 3
      0  3000 ????				      include	superchip.h
      1  3000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  3000 ????
      3  3000 ????	       f0 00	   write_RAM  =	$F000
      4  3000 ????	       f0 00	   wRAM       =	$F000
      5  3000 ????	       f0 00	   w000       =	$F000
      6  3000 ????	       f0 01	   w001       =	$F001
      7  3000 ????	       f0 02	   w002       =	$F002
      8  3000 ????	       f0 03	   w003       =	$F003
      9  3000 ????	       f0 04	   w004       =	$F004
     10  3000 ????	       f0 05	   w005       =	$F005
     11  3000 ????	       f0 06	   w006       =	$F006
     12  3000 ????	       f0 07	   w007       =	$F007
     13  3000 ????	       f0 08	   w008       =	$F008
     14  3000 ????	       f0 09	   w009       =	$F009
     15  3000 ????	       f0 0a	   w010       =	$F00A
     16  3000 ????	       f0 0b	   w011       =	$F00B
     17  3000 ????	       f0 0c	   w012       =	$F00C
     18  3000 ????	       f0 0d	   w013       =	$F00D
     19  3000 ????	       f0 0e	   w014       =	$F00E
     20  3000 ????	       f0 0f	   w015       =	$F00F
     21  3000 ????	       f0 10	   w016       =	$F010
     22  3000 ????	       f0 11	   w017       =	$F011
     23  3000 ????	       f0 12	   w018       =	$F012
     24  3000 ????	       f0 13	   w019       =	$F013
     25  3000 ????	       f0 14	   w020       =	$F014
     26  3000 ????	       f0 15	   w021       =	$F015
     27  3000 ????	       f0 16	   w022       =	$F016
     28  3000 ????	       f0 17	   w023       =	$F017
     29  3000 ????	       f0 18	   w024       =	$F018
     30  3000 ????	       f0 19	   w025       =	$F019
     31  3000 ????	       f0 1a	   w026       =	$F01A
     32  3000 ????	       f0 1b	   w027       =	$F01B
     33  3000 ????	       f0 1c	   w028       =	$F01C
     34  3000 ????	       f0 1d	   w029       =	$F01D
     35  3000 ????	       f0 1e	   w030       =	$F01E
     36  3000 ????	       f0 1f	   w031       =	$F01F
     37  3000 ????	       f0 20	   w032       =	$F020
     38  3000 ????	       f0 21	   w033       =	$F021
     39  3000 ????	       f0 22	   w034       =	$F022
     40  3000 ????	       f0 23	   w035       =	$F023
     41  3000 ????	       f0 24	   w036       =	$F024
     42  3000 ????	       f0 25	   w037       =	$F025
     43  3000 ????	       f0 26	   w038       =	$F026
     44  3000 ????	       f0 27	   w039       =	$F027
     45  3000 ????	       f0 28	   w040       =	$F028
     46  3000 ????	       f0 29	   w041       =	$F029
     47  3000 ????	       f0 2a	   w042       =	$F02A
     48  3000 ????	       f0 2b	   w043       =	$F02B
     49  3000 ????	       f0 2c	   w044       =	$F02C
     50  3000 ????	       f0 2d	   w045       =	$F02D
     51  3000 ????	       f0 2e	   w046       =	$F02E
     52  3000 ????	       f0 2f	   w047       =	$F02F
     53  3000 ????	       f0 30	   w048       =	$F030
     54  3000 ????	       f0 31	   w049       =	$F031
     55  3000 ????	       f0 32	   w050       =	$F032
     56  3000 ????	       f0 33	   w051       =	$F033
     57  3000 ????	       f0 34	   w052       =	$F034
     58  3000 ????	       f0 35	   w053       =	$F035
     59  3000 ????	       f0 36	   w054       =	$F036
     60  3000 ????	       f0 37	   w055       =	$F037
     61  3000 ????	       f0 38	   w056       =	$F038
     62  3000 ????	       f0 39	   w057       =	$F039
     63  3000 ????	       f0 3a	   w058       =	$F03A
     64  3000 ????	       f0 3b	   w059       =	$F03B
     65  3000 ????	       f0 3c	   w060       =	$F03C
     66  3000 ????	       f0 3d	   w061       =	$F03D
     67  3000 ????	       f0 3e	   w062       =	$F03E
     68  3000 ????	       f0 3f	   w063       =	$F03F
     69  3000 ????	       f0 40	   w064       =	$F040
     70  3000 ????	       f0 41	   w065       =	$F041
     71  3000 ????	       f0 42	   w066       =	$F042
     72  3000 ????	       f0 43	   w067       =	$F043
     73  3000 ????	       f0 44	   w068       =	$F044
     74  3000 ????	       f0 45	   w069       =	$F045
     75  3000 ????	       f0 46	   w070       =	$F046
     76  3000 ????	       f0 47	   w071       =	$F047
     77  3000 ????	       f0 48	   w072       =	$F048
     78  3000 ????	       f0 49	   w073       =	$F049
     79  3000 ????	       f0 4a	   w074       =	$F04A
     80  3000 ????	       f0 4b	   w075       =	$F04B
     81  3000 ????	       f0 4c	   w076       =	$F04C
     82  3000 ????	       f0 4d	   w077       =	$F04D
     83  3000 ????	       f0 4e	   w078       =	$F04E
     84  3000 ????	       f0 4f	   w079       =	$F04F
     85  3000 ????	       f0 50	   w080       =	$F050
     86  3000 ????	       f0 51	   w081       =	$F051
     87  3000 ????	       f0 52	   w082       =	$F052
     88  3000 ????	       f0 53	   w083       =	$F053
     89  3000 ????	       f0 54	   w084       =	$F054
     90  3000 ????	       f0 55	   w085       =	$F055
     91  3000 ????	       f0 56	   w086       =	$F056
     92  3000 ????	       f0 57	   w087       =	$F057
     93  3000 ????	       f0 58	   w088       =	$F058
     94  3000 ????	       f0 59	   w089       =	$F059
     95  3000 ????	       f0 5a	   w090       =	$F05A
     96  3000 ????	       f0 5b	   w091       =	$F05B
     97  3000 ????	       f0 5c	   w092       =	$F05C
     98  3000 ????	       f0 5d	   w093       =	$F05D
     99  3000 ????	       f0 5e	   w094       =	$F05E
    100  3000 ????	       f0 5f	   w095       =	$F05F
    101  3000 ????	       f0 60	   w096       =	$F060
    102  3000 ????	       f0 61	   w097       =	$F061
    103  3000 ????	       f0 62	   w098       =	$F062
    104  3000 ????	       f0 63	   w099       =	$F063
    105  3000 ????	       f0 64	   w100       =	$F064
    106  3000 ????	       f0 65	   w101       =	$F065
    107  3000 ????	       f0 66	   w102       =	$F066
    108  3000 ????	       f0 67	   w103       =	$F067
    109  3000 ????	       f0 68	   w104       =	$F068
    110  3000 ????	       f0 69	   w105       =	$F069
    111  3000 ????	       f0 6a	   w106       =	$F06A
    112  3000 ????	       f0 6b	   w107       =	$F06B
    113  3000 ????	       f0 6c	   w108       =	$F06C
    114  3000 ????	       f0 6d	   w109       =	$F06D
    115  3000 ????	       f0 6e	   w110       =	$F06E
    116  3000 ????	       f0 6f	   w111       =	$F06F
    117  3000 ????	       f0 70	   w112       =	$F070
    118  3000 ????	       f0 71	   w113       =	$F071
    119  3000 ????	       f0 72	   w114       =	$F072
    120  3000 ????	       f0 73	   w115       =	$F073
    121  3000 ????	       f0 74	   w116       =	$F074
    122  3000 ????	       f0 75	   w117       =	$F075
    123  3000 ????	       f0 76	   w118       =	$F076
    124  3000 ????	       f0 77	   w119       =	$F077
    125  3000 ????	       f0 78	   w120       =	$F078
    126  3000 ????	       f0 79	   w121       =	$F079
    127  3000 ????	       f0 7a	   w122       =	$F07A
    128  3000 ????	       f0 7b	   w123       =	$F07B
    129  3000 ????	       f0 7c	   w124       =	$F07C
    130  3000 ????	       f0 7d	   w125       =	$F07D
    131  3000 ????	       f0 7e	   w126       =	$F07E
    132  3000 ????	       f0 7f	   w127       =	$F07F
    133  3000 ????
    134  3000 ????	       f0 80	   read_RAM   =	$F080
    135  3000 ????	       f0 80	   rRAM       =	$F080
    136  3000 ????	       f0 80	   r000       =	$F080
    137  3000 ????	       f0 81	   r001       =	$F081
    138  3000 ????	       f0 82	   r002       =	$F082
    139  3000 ????	       f0 83	   r003       =	$F083
    140  3000 ????	       f0 84	   r004       =	$F084
    141  3000 ????	       f0 85	   r005       =	$F085
    142  3000 ????	       f0 86	   r006       =	$F086
    143  3000 ????	       f0 87	   r007       =	$F087
    144  3000 ????	       f0 88	   r008       =	$F088
    145  3000 ????	       f0 89	   r009       =	$F089
    146  3000 ????	       f0 8a	   r010       =	$F08A
    147  3000 ????	       f0 8b	   r011       =	$F08B
    148  3000 ????	       f0 8c	   r012       =	$F08C
    149  3000 ????	       f0 8d	   r013       =	$F08D
    150  3000 ????	       f0 8e	   r014       =	$F08E
    151  3000 ????	       f0 8f	   r015       =	$F08F
    152  3000 ????	       f0 90	   r016       =	$F090
    153  3000 ????	       f0 91	   r017       =	$F091
    154  3000 ????	       f0 92	   r018       =	$F092
    155  3000 ????	       f0 93	   r019       =	$F093
    156  3000 ????	       f0 94	   r020       =	$F094
    157  3000 ????	       f0 95	   r021       =	$F095
    158  3000 ????	       f0 96	   r022       =	$F096
    159  3000 ????	       f0 97	   r023       =	$F097
    160  3000 ????	       f0 98	   r024       =	$F098
    161  3000 ????	       f0 99	   r025       =	$F099
    162  3000 ????	       f0 9a	   r026       =	$F09A
    163  3000 ????	       f0 9b	   r027       =	$F09B
    164  3000 ????	       f0 9c	   r028       =	$F09C
    165  3000 ????	       f0 9d	   r029       =	$F09D
    166  3000 ????	       f0 9e	   r030       =	$F09E
    167  3000 ????	       f0 9f	   r031       =	$F09F
    168  3000 ????	       f0 a0	   r032       =	$F0A0
    169  3000 ????	       f0 a1	   r033       =	$F0A1
    170  3000 ????	       f0 a2	   r034       =	$F0A2
    171  3000 ????	       f0 a3	   r035       =	$F0A3
    172  3000 ????	       f0 a4	   r036       =	$F0A4
    173  3000 ????	       f0 a5	   r037       =	$F0A5
    174  3000 ????	       f0 a6	   r038       =	$F0A6
    175  3000 ????	       f0 a7	   r039       =	$F0A7
    176  3000 ????	       f0 a8	   r040       =	$F0A8
    177  3000 ????	       f0 a9	   r041       =	$F0A9
    178  3000 ????	       f0 aa	   r042       =	$F0AA
    179  3000 ????	       f0 ab	   r043       =	$F0AB
    180  3000 ????	       f0 ac	   r044       =	$F0AC
    181  3000 ????	       f0 ad	   r045       =	$F0AD
    182  3000 ????	       f0 ae	   r046       =	$F0AE
    183  3000 ????	       f0 af	   r047       =	$F0AF
    184  3000 ????	       f0 b0	   r048       =	$F0B0
    185  3000 ????	       f0 b1	   r049       =	$F0B1
    186  3000 ????	       f0 b2	   r050       =	$F0B2
    187  3000 ????	       f0 b3	   r051       =	$F0B3
    188  3000 ????	       f0 b4	   r052       =	$F0B4
    189  3000 ????	       f0 b5	   r053       =	$F0B5
    190  3000 ????	       f0 b6	   r054       =	$F0B6
    191  3000 ????	       f0 b7	   r055       =	$F0B7
    192  3000 ????	       f0 b8	   r056       =	$F0B8
    193  3000 ????	       f0 b9	   r057       =	$F0B9
    194  3000 ????	       f0 ba	   r058       =	$F0BA
    195  3000 ????	       f0 bb	   r059       =	$F0BB
    196  3000 ????	       f0 bc	   r060       =	$F0BC
    197  3000 ????	       f0 bd	   r061       =	$F0BD
    198  3000 ????	       f0 be	   r062       =	$F0BE
    199  3000 ????	       f0 bf	   r063       =	$F0BF
    200  3000 ????	       f0 c0	   r064       =	$F0C0
    201  3000 ????	       f0 c1	   r065       =	$F0C1
    202  3000 ????	       f0 c2	   r066       =	$F0C2
    203  3000 ????	       f0 c3	   r067       =	$F0C3
    204  3000 ????	       f0 c4	   r068       =	$F0C4
    205  3000 ????	       f0 c5	   r069       =	$F0C5
    206  3000 ????	       f0 c6	   r070       =	$F0C6
    207  3000 ????	       f0 c7	   r071       =	$F0C7
    208  3000 ????	       f0 c8	   r072       =	$F0C8
    209  3000 ????	       f0 c9	   r073       =	$F0C9
    210  3000 ????	       f0 ca	   r074       =	$F0CA
    211  3000 ????	       f0 cb	   r075       =	$F0CB
    212  3000 ????	       f0 cc	   r076       =	$F0CC
    213  3000 ????	       f0 cd	   r077       =	$F0CD
    214  3000 ????	       f0 ce	   r078       =	$F0CE
    215  3000 ????	       f0 cf	   r079       =	$F0CF
    216  3000 ????	       f0 d0	   r080       =	$F0D0
    217  3000 ????	       f0 d1	   r081       =	$F0D1
    218  3000 ????	       f0 d2	   r082       =	$F0D2
    219  3000 ????	       f0 d3	   r083       =	$F0D3
    220  3000 ????	       f0 d4	   r084       =	$F0D4
    221  3000 ????	       f0 d5	   r085       =	$F0D5
    222  3000 ????	       f0 d6	   r086       =	$F0D6
    223  3000 ????	       f0 d7	   r087       =	$F0D7
    224  3000 ????	       f0 d8	   r088       =	$F0D8
    225  3000 ????	       f0 d9	   r089       =	$F0D9
    226  3000 ????	       f0 da	   r090       =	$F0DA
    227  3000 ????	       f0 db	   r091       =	$F0DB
    228  3000 ????	       f0 dc	   r092       =	$F0DC
    229  3000 ????	       f0 dd	   r093       =	$F0DD
    230  3000 ????	       f0 de	   r094       =	$F0DE
    231  3000 ????	       f0 df	   r095       =	$F0DF
    232  3000 ????	       f0 e0	   r096       =	$F0E0
    233  3000 ????	       f0 e1	   r097       =	$F0E1
    234  3000 ????	       f0 e2	   r098       =	$F0E2
    235  3000 ????	       f0 e3	   r099       =	$F0E3
    236  3000 ????	       f0 e4	   r100       =	$F0E4
    237  3000 ????	       f0 e5	   r101       =	$F0E5
    238  3000 ????	       f0 e6	   r102       =	$F0E6
    239  3000 ????	       f0 e7	   r103       =	$F0E7
    240  3000 ????	       f0 e8	   r104       =	$F0E8
    241  3000 ????	       f0 e9	   r105       =	$F0E9
    242  3000 ????	       f0 ea	   r106       =	$F0EA
    243  3000 ????	       f0 eb	   r107       =	$F0EB
    244  3000 ????	       f0 ec	   r108       =	$F0EC
    245  3000 ????	       f0 ed	   r109       =	$F0ED
    246  3000 ????	       f0 ee	   r110       =	$F0EE
    247  3000 ????	       f0 ef	   r111       =	$F0EF
    248  3000 ????	       f0 f0	   r112       =	$F0F0
    249  3000 ????	       f0 f1	   r113       =	$F0F1
    250  3000 ????	       f0 f2	   r114       =	$F0F2
    251  3000 ????	       f0 f3	   r115       =	$F0F3
    252  3000 ????	       f0 f4	   r116       =	$F0F4
    253  3000 ????	       f0 f5	   r117       =	$F0F5
    254  3000 ????	       f0 f6	   r118       =	$F0F6
    255  3000 ????	       f0 f7	   r119       =	$F0F7
    256  3000 ????	       f0 f8	   r120       =	$F0F8
    257  3000 ????	       f0 f9	   r121       =	$F0F9
    258  3000 ????	       f0 fa	   r122       =	$F0FA
    259  3000 ????	       f0 fb	   r123       =	$F0FB
    260  3000 ????	       f0 fc	   r124       =	$F0FC
    261  3000 ????	       f0 fd	   r125       =	$F0FD
    262  3000 ????	       f0 fe	   r126       =	$F0FE
    263  3000 ????	       f0 ff	   r127       =	$F0FF
------- FILE 2600basic.h
    201  3000 ????			  -	      else
    202  3000 ????			  -playfieldbase =	$A4
    203  3000 ????				      endif
    204  3000 ????
    205  3000 ????				      ifnconst	pfhalfwidth
    206  3000 ????	       00 04	   pfwidth    =	4
    207  3000 ????	       00 0e	   PF1L       =	PF1
    208  3000 ????	       00 0f	   PF2L       =	PF2
    209  3000 ????	       00 0e	   PF1R       =	PF1
    210  3000 ????	       00 0f	   PF2R       =	PF2
    211  3000 ????	       00 00	   pfadjust   =	0
    212  3000 ????			  -	      else
    213  3000 ????			  -pfwidth    =	2
    214  3000 ????			  -	      ifconst	pfcenter
    215  3000 ????			  -PF1L       =	$3F	; no effect
    216  3000 ????			  -PF2L       =	PF2
    217  3000 ????			  -PF1R       =	$3F
    218  3000 ????			  -PF2R       =	PF2	; no effect
    219  3000 ????			  -pfadjust   =	1
    220  3000 ????			  -	      else
    221  3000 ????			  -PF1L       =	PF1
    222  3000 ????			  -PF2L       =	PF2
    223  3000 ????			  -PF1R       =	$3F	; no effect
    224  3000 ????			  -PF2R       =	$3F	; no effect
    225  3000 ????			  -pfadjust   =	0
    226  3000 ????			  -	      endif
    227  3000 ????				      endif
    228  3000 ????
    229  3000 ????						; define playfield start based on height
    230  3000 ????			  -	      ifnconst	pfres
    231  3000 ????			  -playfield  =	playfieldbase
    232  3000 ????				      else
    233  3000 ????	       10 f0	   playfield  =	playfieldbase-(pfres-12*(4/pfwidth))*pfwidth
    234  3000 ????				      endif
------- FILE d:\Firmaplus\Firmaplus_intern\Atari\PlusROM\Projekte-batariBasic\CaveApocalypse\C.A.V.E. Apocalypse.bas.asm
------- FILE 2600basic_variable_redefs.h LEVEL 2 PASS 3
      0  3000 ????				      include	"2600basic_variable_redefs.h"
      1  3000 ????						; This file contains variable mapping and other information for the current project.
      2  3000 ????
      3  3000 ????	       00 23	   bscode_length =	35
      4  3000 ????	       00 1d	   _SD_Touch_Enemy_length =	.skipL0520-_SD_Touch_Enemy
      5  3000 ????
      6  3000 ????	       00 21	   _SD_Shoot_Enemy_length =	.skipL0519-_SD_Shoot_Enemy
      7  3000 ????
      8  3000 ????	       00 45	   _SD_Shoot_Miss_length =	.skipL0518-_SD_Shoot_Miss
      9  3000 ????
     10  3000 ????	       00 35	   _SD_Shot_Wall_length =	.skipL0517-_SD_Shot_Wall
     11  3000 ????
     12  3000 ????	       f0 6f	   w_extra_wall_startpos_y =	w111
     13  3000 ????
     14  3000 ????	       f0 ef	   r_extra_wall_startpos_y =	r111
     15  3000 ????
     16  3000 ????	       f0 6e	   w_extra_wall_startpos_x =	w110
     17  3000 ????
     18  3000 ????	       f0 ee	   r_extra_wall_startpos_x =	r110
     19  3000 ????
     20  3000 ????	       f0 6d	   w_extra_wall_height =	w109
     21  3000 ????
     22  3000 ????	       f0 ed	   r_extra_wall_height =	r109
     23  3000 ????
     24  3000 ????	       f0 6c	   w_extra_wall_width =	w108
     25  3000 ????
     26  3000 ????	       f0 ec	   r_extra_wall_width =	r108
     27  3000 ????
     28  3000 ????	       f0 6b	   w_extra_wall_type_and_range =	w107
     29  3000 ????
     30  3000 ????	       f0 eb	   r_extra_wall_type_and_range =	r107
     31  3000 ????
     32  3000 ????	       f0 6a	   w_roommate_startpos_y =	w106
     33  3000 ????
     34  3000 ????	       f0 ea	   r_roommate_startpos_y =	r106
     35  3000 ????
     36  3000 ????	       f0 69	   w_roommate_startpos_x =	w105
     37  3000 ????
     38  3000 ????	       f0 e9	   r_roommate_startpos_x =	r105
     39  3000 ????
     40  3000 ????	       f0 68	   w_roommate_type_and_range =	w104
     41  3000 ????
     42  3000 ????	       f0 e8	   r_roommate_type_and_range =	r104
     43  3000 ????
     44  3000 ????	       f0 67	   w_room_color_bottom =	w103
     45  3000 ????
     46  3000 ????	       f0 e7	   r_room_color_bottom =	r103
     47  3000 ????
     48  3000 ????	       f0 63	   w_room_color_middle =	w099
     49  3000 ????
     50  3000 ????	       f0 e3	   r_room_color_middle =	r099
     51  3000 ????
     52  3000 ????	       f0 62	   w_room_color_top =	w098
     53  3000 ????
     54  3000 ????	       f0 e2	   r_room_color_top =	r098
     55  3000 ????
     56  3000 ????	       f0 e1	   r_Bit0_room_type_top =	r097
     57  3000 ????
     58  3000 ????	       f0 e1	   w_BitOp_room_type =	r097
     59  3000 ????
     60  3000 ????	       f0 e1	   r_BitOp_room_type =	r097
     61  3000 ????
     62  3000 ????	       f0 61	   w_room_definition_start =	w097
     63  3000 ????
     64  3000 ????	       00 ad	   extra_wall_type =	var9
     65  3000 ????
     66  3000 ????	       00 ac	   max_priv_level_bcd3 =	var8
     67  3000 ????
     68  3000 ????	       00 ab	   max_priv_level_bcd2 =	var7
     69  3000 ????
     70  3000 ????	       00 aa	   max_priv_level_bcd1 =	var6
     71  3000 ????
     72  3000 ????	       00 a9	   max_pub_level_bcd3 =	var5
     73  3000 ????
     74  3000 ????	       00 a8	   max_pub_level_bcd2 =	var4
     75  3000 ????
     76  3000 ????	       00 a7	   max_pub_level_bcd1 =	var3
     77  3000 ????
     78  3000 ????	       00 a6	   gamenumber =	var2
     79  3000 ????
     80  3000 ????	       00 a5	   new_room_player1x =	var1
     81  3000 ????
     82  3000 ????	       00 a4	   new_room_player1y =	var0
     83  3000 ????
     84  3000 ????	       00 ec	   _Bit7_M0_Moving =	y
     85  3000 ????
     86  3000 ????	       00 ec	   _Bit6_Flip_P1 =	y
     87  3000 ????
     88  3000 ????	       00 ec	   _Bit5_Request_Pending =	y
     89  3000 ????
     90  3000 ????	       00 ec	   _Bit4_Game_Over =	y
     91  3000 ????
     92  3000 ????	       00 ec	   _Bit3_Ball_Shot_Moving =	y
     93  3000 ????
     94  3000 ????	       00 ec	   _Bit2_Level_finished =	y
     95  3000 ????
     96  3000 ????	       00 ec	   _Bit1_Wall_Dir =	y
     97  3000 ????
     98  3000 ????	       00 ec	   _Bit0_roommate_Dir =	y
     99  3000 ????
    100  3000 ????	       00 ec	   _Bit_Game_State =	y
    101  3000 ????
    102  3000 ????	       00 86	   P1y_position =	player1y
    103  3000 ????	       00 e9	   P1y_velocity =	v
    104  3000 ????	       00 91	   M0y_position =	missile0y
    105  3000 ????	       00 e6	   M0y_velocity =	s
    106  3000 ????	       00 89	   Bally_position =	bally
    107  3000 ????	       00 e3	   Bally_velocity =	p
    108  3000 ????	       00 e1	   Safe_Point_P1_y =	n
    109  3000 ????
    110  3000 ????	       00 e0	   Safe_Point_P1_x =	m
    111  3000 ????
    112  3000 ????	       00 df	   _Bit2_New_Room_Flip_P1 =	l
    113  3000 ????
    114  3000 ????	       00 df	   _Bit1_Safe_Point_P1_Flip =	l
    115  3000 ????
    116  3000 ????	       00 df	   _Bit0_Safe_Point_reached =	l
    117  3000 ????
    118  3000 ????	       00 df	   _BitOp_Safe_Point_New_Room =	l
    119  3000 ????
    120  3000 ????	       00 de	   roommate_type =	k
    121  3000 ????
    122  3000 ????	       00 dd	   roommate_move_x =	j
    123  3000 ????
    124  3000 ????	       00 dc	   extra_wall_move_x =	i
    125  3000 ????
    126  3000 ????	       00 db	   _Ch0_Counter =	h
    127  3000 ????
    128  3000 ????	       00 da	   _Ch0_Duration =	g
    129  3000 ????
    130  3000 ????	       00 d9	   _Ch0_Sound =	f
    131  3000 ????
    132  3000 ????	       00 d8	   _Bit3_P1_Dir_Right =	e
    133  3000 ????
    134  3000 ????	       00 d8	   _Bit2_P1_Dir_Left =	e
    135  3000 ????
    136  3000 ????	       00 d8	   _Bit1_P1_Dir_Down =	e
    137  3000 ????
    138  3000 ????	       00 d8	   _Bit0_P1_Dir_Up =	e
    139  3000 ????
    140  3000 ????	       00 d8	   _BitOp_P1_Dir =	e
    141  3000 ????
    142  3000 ????	       00 d7	   _Bit3_M0_Dir_Right =	d
    143  3000 ????
    144  3000 ????	       00 d7	   _Bit2_M0_Dir_Left =	d
    145  3000 ????
    146  3000 ????	       00 d7	   _Bit1_M0_Dir_Down =	d
    147  3000 ????
    148  3000 ????	       00 d7	   _Bit0_M0_Dir_Up =	d
    149  3000 ????
    150  3000 ????	       00 d7	   _BitOp_M0_Dir =	d
    151  3000 ????
    152  3000 ????	       00 d6	   _Bit3_Ball_Shot_Dir_Right2 =	c
    153  3000 ????
    154  3000 ????	       00 d6	   _Bit2_Ball_Shot_Dir_Right1 =	c
    155  3000 ????
    156  3000 ????	       00 d6	   _Bit1_Ball_Shot_Dir_Left2 =	c
    157  3000 ????
    158  3000 ????	       00 d6	   _Bit0_Ball_Shot_Dir_Left1 =	c
    159  3000 ????
    160  3000 ????	       00 d6	   _BitOp_Ball_Shot_Dir =	c
    161  3000 ????
    162  3000 ????	       00 d5	   frame_counter =	b
    163  3000 ????
    164  3000 ????	       00 d4	   delay_counter =	a
    165  3000 ????
    166  3000 ????	       00 95	   _sc3       =	score + 2
    167  3000 ????
    168  3000 ????	       00 94	   _sc2       =	score + 1
    169  3000 ????
    170  3000 ????	       00 93	   _sc1       =	score
    171  3000 ????
    172  3000 ????	       00 fe	   _FE	      =	$FE
    173  3000 ????
    174  3000 ????	       00 fc	   _FC	      =	$FC
    175  3000 ????
    176  3000 ????	       00 fa	   _FA	      =	$FA
    177  3000 ????
    178  3000 ????	       00 f8	   _F8	      =	$F8
    179  3000 ????
    180  3000 ????	       00 f6	   _F6	      =	$F6
    181  3000 ????
    182  3000 ????	       00 f4	   _F4	      =	$F4
    183  3000 ????
    184  3000 ????	       00 f2	   _F2	      =	$F2
    185  3000 ????
    186  3000 ????	       00 f0	   _F0	      =	$F0
    187  3000 ????
    188  3000 ????	       00 ee	   _EE	      =	$EE
    189  3000 ????
    190  3000 ????	       00 ec	   _EC	      =	$EC
    191  3000 ????
    192  3000 ????	       00 ea	   _EA	      =	$EA
    193  3000 ????
    194  3000 ????	       00 e8	   _E8	      =	$E8
    195  3000 ????
    196  3000 ????	       00 e6	   _E6	      =	$E6
    197  3000 ????
    198  3000 ????	       00 e4	   _E4	      =	$E4
    199  3000 ????
    200  3000 ????	       00 e2	   _E2	      =	$E2
    201  3000 ????
    202  3000 ????	       00 e0	   _E0	      =	$E0
    203  3000 ????
    204  3000 ????	       00 de	   _DE	      =	$DE
    205  3000 ????
    206  3000 ????	       00 dc	   _DC	      =	$DC
    207  3000 ????
    208  3000 ????	       00 da	   _DA	      =	$DA
    209  3000 ????
    210  3000 ????	       00 d8	   _D8	      =	$D8
    211  3000 ????
    212  3000 ????	       00 d6	   _D6	      =	$D6
    213  3000 ????
    214  3000 ????	       00 d4	   _D4	      =	$D4
    215  3000 ????
    216  3000 ????	       00 d2	   _D2	      =	$D2
    217  3000 ????
    218  3000 ????	       00 d0	   _D0	      =	$D0
    219  3000 ????
    220  3000 ????	       00 ce	   _CE	      =	$CE
    221  3000 ????
    222  3000 ????	       00 cc	   _CC	      =	$CC
    223  3000 ????
    224  3000 ????	       00 ca	   _CA	      =	$CA
    225  3000 ????
    226  3000 ????	       00 c8	   _C8	      =	$C8
    227  3000 ????
    228  3000 ????	       00 c6	   _C6	      =	$C6
    229  3000 ????
    230  3000 ????	       00 c4	   _C4	      =	$C4
    231  3000 ????
    232  3000 ????	       00 c2	   _C2	      =	$C2
    233  3000 ????
    234  3000 ????	       00 c0	   _C0	      =	$C0
    235  3000 ????
    236  3000 ????	       00 be	   _BE	      =	$BE
    237  3000 ????
    238  3000 ????	       00 bc	   _BC	      =	$BC
    239  3000 ????
    240  3000 ????	       00 ba	   _BA	      =	$BA
    241  3000 ????
    242  3000 ????	       00 b8	   _B8	      =	$B8
    243  3000 ????
    244  3000 ????	       00 b6	   _B6	      =	$B6
    245  3000 ????
    246  3000 ????	       00 b4	   _B4	      =	$B4
    247  3000 ????
    248  3000 ????	       00 b2	   _B2	      =	$B2
    249  3000 ????
    250  3000 ????	       00 b0	   _B0	      =	$B0
    251  3000 ????
    252  3000 ????	       00 ae	   _AE	      =	$AE
    253  3000 ????
    254  3000 ????	       00 ac	   _AC	      =	$AC
    255  3000 ????
    256  3000 ????	       00 aa	   _AA	      =	$AA
    257  3000 ????
    258  3000 ????	       00 a8	   _A8	      =	$A8
    259  3000 ????
    260  3000 ????	       00 a6	   _A6	      =	$A6
    261  3000 ????
    262  3000 ????	       00 a4	   _A4	      =	$A4
    263  3000 ????
    264  3000 ????	       00 a2	   _A2	      =	$A2
    265  3000 ????
    266  3000 ????	       00 a0	   _A0	      =	$A0
    267  3000 ????
    268  3000 ????	       00 9e	   _9E	      =	$9E
    269  3000 ????
    270  3000 ????	       00 9c	   _9C	      =	$9C
    271  3000 ????
    272  3000 ????	       00 9a	   _9A	      =	$9A
    273  3000 ????
    274  3000 ????	       00 98	   _98	      =	$98
    275  3000 ????
    276  3000 ????	       00 96	   _96	      =	$96
    277  3000 ????
    278  3000 ????	       00 94	   _94	      =	$94
    279  3000 ????
    280  3000 ????	       00 92	   _92	      =	$92
    281  3000 ????
    282  3000 ????	       00 90	   _90	      =	$90
    283  3000 ????
    284  3000 ????	       00 8e	   _8E	      =	$8E
    285  3000 ????
    286  3000 ????	       00 8c	   _8C	      =	$8C
    287  3000 ????
    288  3000 ????	       00 8a	   _8A	      =	$8A
    289  3000 ????
    290  3000 ????	       00 88	   _88	      =	$88
    291  3000 ????
    292  3000 ????	       00 86	   _86	      =	$86
    293  3000 ????
    294  3000 ????	       00 84	   _84	      =	$84
    295  3000 ????
    296  3000 ????	       00 82	   _82	      =	$82
    297  3000 ????
    298  3000 ????	       00 80	   _80	      =	$80
    299  3000 ????
    300  3000 ????	       00 7e	   _7E	      =	$7E
    301  3000 ????
    302  3000 ????	       00 7c	   _7C	      =	$7C
    303  3000 ????
    304  3000 ????	       00 7a	   _7A	      =	$7A
    305  3000 ????
    306  3000 ????	       00 78	   _78	      =	$78
    307  3000 ????
    308  3000 ????	       00 76	   _76	      =	$76
    309  3000 ????
    310  3000 ????	       00 74	   _74	      =	$74
    311  3000 ????
    312  3000 ????	       00 72	   _72	      =	$72
    313  3000 ????
    314  3000 ????	       00 70	   _70	      =	$70
    315  3000 ????
    316  3000 ????	       00 6e	   _6E	      =	$6E
    317  3000 ????
    318  3000 ????	       00 6c	   _6C	      =	$6C
    319  3000 ????
    320  3000 ????	       00 6a	   _6A	      =	$6A
    321  3000 ????
    322  3000 ????	       00 68	   _68	      =	$68
    323  3000 ????
    324  3000 ????	       00 66	   _66	      =	$66
    325  3000 ????
    326  3000 ????	       00 64	   _64	      =	$64
    327  3000 ????
    328  3000 ????	       00 62	   _62	      =	$62
    329  3000 ????
    330  3000 ????	       00 60	   _60	      =	$60
    331  3000 ????
    332  3000 ????	       00 5e	   _5E	      =	$5E
    333  3000 ????
    334  3000 ????	       00 5c	   _5C	      =	$5C
    335  3000 ????
    336  3000 ????	       00 5a	   _5A	      =	$5A
    337  3000 ????
    338  3000 ????	       00 58	   _58	      =	$58
    339  3000 ????
    340  3000 ????	       00 56	   _56	      =	$56
    341  3000 ????
    342  3000 ????	       00 54	   _54	      =	$54
    343  3000 ????
    344  3000 ????	       00 52	   _52	      =	$52
    345  3000 ????
    346  3000 ????	       00 50	   _50	      =	$50
    347  3000 ????
    348  3000 ????	       00 4e	   _4E	      =	$4E
    349  3000 ????
    350  3000 ????	       00 4c	   _4C	      =	$4C
    351  3000 ????
    352  3000 ????	       00 4a	   _4A	      =	$4A
    353  3000 ????
    354  3000 ????	       00 48	   _48	      =	$48
    355  3000 ????
    356  3000 ????	       00 46	   _46	      =	$46
    357  3000 ????
    358  3000 ????	       00 44	   _44	      =	$44
    359  3000 ????
    360  3000 ????	       00 42	   _42	      =	$42
    361  3000 ????
    362  3000 ????	       00 40	   _40	      =	$40
    363  3000 ????
    364  3000 ????	       00 3e	   _3E	      =	$3E
    365  3000 ????
    366  3000 ????	       00 3c	   _3C	      =	$3C
    367  3000 ????
    368  3000 ????	       00 3a	   _3A	      =	$3A
    369  3000 ????
    370  3000 ????	       00 38	   _38	      =	$38
    371  3000 ????
    372  3000 ????	       00 36	   _36	      =	$36
    373  3000 ????
    374  3000 ????	       00 34	   _34	      =	$34
    375  3000 ????
    376  3000 ????	       00 32	   _32	      =	$32
    377  3000 ????
    378  3000 ????	       00 30	   _30	      =	$30
    379  3000 ????
    380  3000 ????	       00 2e	   _2E	      =	$2E
    381  3000 ????
    382  3000 ????	       00 2c	   _2C	      =	$2C
    383  3000 ????
    384  3000 ????	       00 2a	   _2A	      =	$2A
    385  3000 ????
    386  3000 ????	       00 28	   _28	      =	$28
    387  3000 ????
    388  3000 ????	       00 26	   _26	      =	$26
    389  3000 ????
    390  3000 ????	       00 24	   _24	      =	$24
    391  3000 ????
    392  3000 ????	       00 22	   _22	      =	$22
    393  3000 ????
    394  3000 ????	       00 20	   _20	      =	$20
    395  3000 ????
    396  3000 ????	       00 1e	   _1E	      =	$1E
    397  3000 ????
    398  3000 ????	       00 1c	   _1C	      =	$1C
    399  3000 ????
    400  3000 ????	       00 1a	   _1A	      =	$1A
    401  3000 ????
    402  3000 ????	       00 18	   _18	      =	$18
    403  3000 ????
    404  3000 ????	       00 16	   _16	      =	$16
    405  3000 ????
    406  3000 ????	       00 14	   _14	      =	$14
    407  3000 ????
    408  3000 ????	       00 12	   _12	      =	$12
    409  3000 ????
    410  3000 ????	       00 10	   _10	      =	$10
    411  3000 ????
    412  3000 ????	       00 0e	   _0E	      =	$0E
    413  3000 ????
    414  3000 ????	       00 0c	   _0C	      =	$0C
    415  3000 ????
    416  3000 ????	       00 0a	   _0A	      =	$0A
    417  3000 ????
    418  3000 ????	       00 08	   _08	      =	$08
    419  3000 ????
    420  3000 ????	       00 06	   _06	      =	$06
    421  3000 ????
    422  3000 ????	       00 04	   _04	      =	$04
    423  3000 ????
    424  3000 ????	       00 02	   _02	      =	$02
    425  3000 ????
    426  3000 ????	       00 00	   _00	      =	$00
    427  3000 ????
    428  3000 ????	       00 09	   req_load_menu =	9
    429  3000 ????
    430  3000 ????	       00 08	   req_safe_point =	8
    431  3000 ????
    432  3000 ????	       00 07	   req_level_reset =	7
    433  3000 ????
    434  3000 ????	       00 06	   req_move_down =	6
    435  3000 ????
    436  3000 ????	       00 05	   req_move_right =	5
    437  3000 ????
    438  3000 ????	       00 04	   req_move_up =	4
    439  3000 ????
    440  3000 ????	       00 03	   req_move_left =	3
    441  3000 ????
    442  3000 ????	       00 02	   req_game_over =	2
    443  3000 ????
    444  3000 ????	       00 01	   req_level_up =	1
    445  3000 ????
    446  3000 ????	       00 00	   req_load   =	0
    447  3000 ????
    448  3000 ????	       00 06	   response_menu_size =	6
    449  3000 ????
    450  3000 ????	       00 1a	   response_size_minus_1 =	26
    451  3000 ????
    452  3000 ????	       00 08	   scback     =	#$08
    453  3000 ????
    454  3000 ????	       00 94	   _M_Edge_Right =	148
    455  3000 ????
    456  3000 ????	       00 0e	   _M_Edge_Left =	14
    457  3000 ????
    458  3000 ????	       00 58	   _M_Edge_Bottom =	88
    459  3000 ????
    460  3000 ????	       00 02	   _M_Edge_Top =	2
    461  3000 ????
    462  3000 ????	       00 4c	   player_max_y =	76
    463  3000 ????
    464  3000 ????	       00 02	   player_min_y =	2
    465  3000 ????
    466  3000 ????	       00 86	   player_max_x =	134
    467  3000 ????
    468  3000 ????	       00 0a	   player_min_x =	10
    469  3000 ????
    470  3000 ????	       00 01	   pfscore    =	1
    471  3000 ????
    472  3000 ????	       00 04	   pfres      =	4
    473  3000 ????
    474  3000 ????	       00 01	   superchip  =	1
    475  3000 ????	       00 01	   bs_mask    =	1
    476  3000 ????	       00 08	   bankswitch =	8
    477  3000 ????	       1f f8	   bankswitch_hotspot =	$1FF8
    478  3000 ????	       00 01	   PFcolors   =	1
    479  3000 ????	       00 01	   player1colors =	1
------- FILE d:\Firmaplus\Firmaplus_intern\Atari\PlusROM\Projekte-batariBasic\CaveApocalypse\C.A.V.E. Apocalypse.bas.asm
      8  3000 ????				      ifconst	bankswitch
      9  3000 ????				      if	bankswitch == 8
     10  1000					      ORG	$1000
     11  1000					      RORG	$D000
     12  1000					      endif
     13  1000				  -	      if	bankswitch == 16
     14  1000				  -	      ORG	$1000
     15  1000				  -	      RORG	$9000
     16  1000					      endif
     17  1000				  -	      if	bankswitch == 32
     18  1000				  -	      ORG	$1000
     19  1000				  -	      RORG	$1000
     20  1000					      endif
     21  1000				  -	      if	bankswitch == 64
     22  1000				  -	      ORG	$1000
     23  1000				  -	      RORG	$1000
     24  1000					      endif
     25  1000				  -	      else
     26  1000				  -	      ORG	$F000
     27  1000					      endif
     28  1000					      repeat	256
     29  1000		       ff		      .byte.b	$ff
     28  1000					      repend
     29  1001		       ff		      .byte.b	$ff
     28  1001					      repend
     29  1002		       ff		      .byte.b	$ff
     28  1002					      repend
     29  1003		       ff		      .byte.b	$ff
     28  1003					      repend
     29  1004		       ff		      .byte.b	$ff
     28  1004					      repend
     29  1005		       ff		      .byte.b	$ff
     28  1005					      repend
     29  1006		       ff		      .byte.b	$ff
     28  1006					      repend
     29  1007		       ff		      .byte.b	$ff
     28  1007					      repend
     29  1008		       ff		      .byte.b	$ff
     28  1008					      repend
     29  1009		       ff		      .byte.b	$ff
     28  1009					      repend
     29  100a		       ff		      .byte.b	$ff
     28  100a					      repend
     29  100b		       ff		      .byte.b	$ff
     28  100b					      repend
     29  100c		       ff		      .byte.b	$ff
     28  100c					      repend
     29  100d		       ff		      .byte.b	$ff
     28  100d					      repend
     29  100e		       ff		      .byte.b	$ff
     28  100e					      repend
     29  100f		       ff		      .byte.b	$ff
     28  100f					      repend
     29  1010		       ff		      .byte.b	$ff
     28  1010					      repend
     29  1011		       ff		      .byte.b	$ff
     28  1011					      repend
     29  1012		       ff		      .byte.b	$ff
     28  1012					      repend
     29  1013		       ff		      .byte.b	$ff
     28  1013					      repend
     29  1014		       ff		      .byte.b	$ff
     28  1014					      repend
     29  1015		       ff		      .byte.b	$ff
     28  1015					      repend
     29  1016		       ff		      .byte.b	$ff
     28  1016					      repend
     29  1017		       ff		      .byte.b	$ff
     28  1017					      repend
     29  1018		       ff		      .byte.b	$ff
     28  1018					      repend
     29  1019		       ff		      .byte.b	$ff
     28  1019					      repend
     29  101a		       ff		      .byte.b	$ff
     28  101a					      repend
     29  101b		       ff		      .byte.b	$ff
     28  101b					      repend
     29  101c		       ff		      .byte.b	$ff
     28  101c					      repend
     29  101d		       ff		      .byte.b	$ff
     28  101d					      repend
     29  101e		       ff		      .byte.b	$ff
     28  101e					      repend
     29  101f		       ff		      .byte.b	$ff
     28  101f					      repend
     29  1020		       ff		      .byte.b	$ff
     28  1020					      repend
     29  1021		       ff		      .byte.b	$ff
     28  1021					      repend
     29  1022		       ff		      .byte.b	$ff
     28  1022					      repend
     29  1023		       ff		      .byte.b	$ff
     28  1023					      repend
     29  1024		       ff		      .byte.b	$ff
     28  1024					      repend
     29  1025		       ff		      .byte.b	$ff
     28  1025					      repend
     29  1026		       ff		      .byte.b	$ff
     28  1026					      repend
     29  1027		       ff		      .byte.b	$ff
     28  1027					      repend
     29  1028		       ff		      .byte.b	$ff
     28  1028					      repend
     29  1029		       ff		      .byte.b	$ff
     28  1029					      repend
     29  102a		       ff		      .byte.b	$ff
     28  102a					      repend
     29  102b		       ff		      .byte.b	$ff
     28  102b					      repend
     29  102c		       ff		      .byte.b	$ff
     28  102c					      repend
     29  102d		       ff		      .byte.b	$ff
     28  102d					      repend
     29  102e		       ff		      .byte.b	$ff
     28  102e					      repend
     29  102f		       ff		      .byte.b	$ff
     28  102f					      repend
     29  1030		       ff		      .byte.b	$ff
     28  1030					      repend
     29  1031		       ff		      .byte.b	$ff
     28  1031					      repend
     29  1032		       ff		      .byte.b	$ff
     28  1032					      repend
     29  1033		       ff		      .byte.b	$ff
     28  1033					      repend
     29  1034		       ff		      .byte.b	$ff
     28  1034					      repend
     29  1035		       ff		      .byte.b	$ff
     28  1035					      repend
     29  1036		       ff		      .byte.b	$ff
     28  1036					      repend
     29  1037		       ff		      .byte.b	$ff
     28  1037					      repend
     29  1038		       ff		      .byte.b	$ff
     28  1038					      repend
     29  1039		       ff		      .byte.b	$ff
     28  1039					      repend
     29  103a		       ff		      .byte.b	$ff
     28  103a					      repend
     29  103b		       ff		      .byte.b	$ff
     28  103b					      repend
     29  103c		       ff		      .byte.b	$ff
     28  103c					      repend
     29  103d		       ff		      .byte.b	$ff
     28  103d					      repend
     29  103e		       ff		      .byte.b	$ff
     28  103e					      repend
     29  103f		       ff		      .byte.b	$ff
     28  103f					      repend
     29  1040		       ff		      .byte.b	$ff
     28  1040					      repend
     29  1041		       ff		      .byte.b	$ff
     28  1041					      repend
     29  1042		       ff		      .byte.b	$ff
     28  1042					      repend
     29  1043		       ff		      .byte.b	$ff
     28  1043					      repend
     29  1044		       ff		      .byte.b	$ff
     28  1044					      repend
     29  1045		       ff		      .byte.b	$ff
     28  1045					      repend
     29  1046		       ff		      .byte.b	$ff
     28  1046					      repend
     29  1047		       ff		      .byte.b	$ff
     28  1047					      repend
     29  1048		       ff		      .byte.b	$ff
     28  1048					      repend
     29  1049		       ff		      .byte.b	$ff
     28  1049					      repend
     29  104a		       ff		      .byte.b	$ff
     28  104a					      repend
     29  104b		       ff		      .byte.b	$ff
     28  104b					      repend
     29  104c		       ff		      .byte.b	$ff
     28  104c					      repend
     29  104d		       ff		      .byte.b	$ff
     28  104d					      repend
     29  104e		       ff		      .byte.b	$ff
     28  104e					      repend
     29  104f		       ff		      .byte.b	$ff
     28  104f					      repend
     29  1050		       ff		      .byte.b	$ff
     28  1050					      repend
     29  1051		       ff		      .byte.b	$ff
     28  1051					      repend
     29  1052		       ff		      .byte.b	$ff
     28  1052					      repend
     29  1053		       ff		      .byte.b	$ff
     28  1053					      repend
     29  1054		       ff		      .byte.b	$ff
     28  1054					      repend
     29  1055		       ff		      .byte.b	$ff
     28  1055					      repend
     29  1056		       ff		      .byte.b	$ff
     28  1056					      repend
     29  1057		       ff		      .byte.b	$ff
     28  1057					      repend
     29  1058		       ff		      .byte.b	$ff
     28  1058					      repend
     29  1059		       ff		      .byte.b	$ff
     28  1059					      repend
     29  105a		       ff		      .byte.b	$ff
     28  105a					      repend
     29  105b		       ff		      .byte.b	$ff
     28  105b					      repend
     29  105c		       ff		      .byte.b	$ff
     28  105c					      repend
     29  105d		       ff		      .byte.b	$ff
     28  105d					      repend
     29  105e		       ff		      .byte.b	$ff
     28  105e					      repend
     29  105f		       ff		      .byte.b	$ff
     28  105f					      repend
     29  1060		       ff		      .byte.b	$ff
     28  1060					      repend
     29  1061		       ff		      .byte.b	$ff
     28  1061					      repend
     29  1062		       ff		      .byte.b	$ff
     28  1062					      repend
     29  1063		       ff		      .byte.b	$ff
     28  1063					      repend
     29  1064		       ff		      .byte.b	$ff
     28  1064					      repend
     29  1065		       ff		      .byte.b	$ff
     28  1065					      repend
     29  1066		       ff		      .byte.b	$ff
     28  1066					      repend
     29  1067		       ff		      .byte.b	$ff
     28  1067					      repend
     29  1068		       ff		      .byte.b	$ff
     28  1068					      repend
     29  1069		       ff		      .byte.b	$ff
     28  1069					      repend
     29  106a		       ff		      .byte.b	$ff
     28  106a					      repend
     29  106b		       ff		      .byte.b	$ff
     28  106b					      repend
     29  106c		       ff		      .byte.b	$ff
     28  106c					      repend
     29  106d		       ff		      .byte.b	$ff
     28  106d					      repend
     29  106e		       ff		      .byte.b	$ff
     28  106e					      repend
     29  106f		       ff		      .byte.b	$ff
     28  106f					      repend
     29  1070		       ff		      .byte.b	$ff
     28  1070					      repend
     29  1071		       ff		      .byte.b	$ff
     28  1071					      repend
     29  1072		       ff		      .byte.b	$ff
     28  1072					      repend
     29  1073		       ff		      .byte.b	$ff
     28  1073					      repend
     29  1074		       ff		      .byte.b	$ff
     28  1074					      repend
     29  1075		       ff		      .byte.b	$ff
     28  1075					      repend
     29  1076		       ff		      .byte.b	$ff
     28  1076					      repend
     29  1077		       ff		      .byte.b	$ff
     28  1077					      repend
     29  1078		       ff		      .byte.b	$ff
     28  1078					      repend
     29  1079		       ff		      .byte.b	$ff
     28  1079					      repend
     29  107a		       ff		      .byte.b	$ff
     28  107a					      repend
     29  107b		       ff		      .byte.b	$ff
     28  107b					      repend
     29  107c		       ff		      .byte.b	$ff
     28  107c					      repend
     29  107d		       ff		      .byte.b	$ff
     28  107d					      repend
     29  107e		       ff		      .byte.b	$ff
     28  107e					      repend
     29  107f		       ff		      .byte.b	$ff
     28  107f					      repend
     29  1080		       ff		      .byte.b	$ff
     28  1080					      repend
     29  1081		       ff		      .byte.b	$ff
     28  1081					      repend
     29  1082		       ff		      .byte.b	$ff
     28  1082					      repend
     29  1083		       ff		      .byte.b	$ff
     28  1083					      repend
     29  1084		       ff		      .byte.b	$ff
     28  1084					      repend
     29  1085		       ff		      .byte.b	$ff
     28  1085					      repend
     29  1086		       ff		      .byte.b	$ff
     28  1086					      repend
     29  1087		       ff		      .byte.b	$ff
     28  1087					      repend
     29  1088		       ff		      .byte.b	$ff
     28  1088					      repend
     29  1089		       ff		      .byte.b	$ff
     28  1089					      repend
     29  108a		       ff		      .byte.b	$ff
     28  108a					      repend
     29  108b		       ff		      .byte.b	$ff
     28  108b					      repend
     29  108c		       ff		      .byte.b	$ff
     28  108c					      repend
     29  108d		       ff		      .byte.b	$ff
     28  108d					      repend
     29  108e		       ff		      .byte.b	$ff
     28  108e					      repend
     29  108f		       ff		      .byte.b	$ff
     28  108f					      repend
     29  1090		       ff		      .byte.b	$ff
     28  1090					      repend
     29  1091		       ff		      .byte.b	$ff
     28  1091					      repend
     29  1092		       ff		      .byte.b	$ff
     28  1092					      repend
     29  1093		       ff		      .byte.b	$ff
     28  1093					      repend
     29  1094		       ff		      .byte.b	$ff
     28  1094					      repend
     29  1095		       ff		      .byte.b	$ff
     28  1095					      repend
     29  1096		       ff		      .byte.b	$ff
     28  1096					      repend
     29  1097		       ff		      .byte.b	$ff
     28  1097					      repend
     29  1098		       ff		      .byte.b	$ff
     28  1098					      repend
     29  1099		       ff		      .byte.b	$ff
     28  1099					      repend
     29  109a		       ff		      .byte.b	$ff
     28  109a					      repend
     29  109b		       ff		      .byte.b	$ff
     28  109b					      repend
     29  109c		       ff		      .byte.b	$ff
     28  109c					      repend
     29  109d		       ff		      .byte.b	$ff
     28  109d					      repend
     29  109e		       ff		      .byte.b	$ff
     28  109e					      repend
     29  109f		       ff		      .byte.b	$ff
     28  109f					      repend
     29  10a0		       ff		      .byte.b	$ff
     28  10a0					      repend
     29  10a1		       ff		      .byte.b	$ff
     28  10a1					      repend
     29  10a2		       ff		      .byte.b	$ff
     28  10a2					      repend
     29  10a3		       ff		      .byte.b	$ff
     28  10a3					      repend
     29  10a4		       ff		      .byte.b	$ff
     28  10a4					      repend
     29  10a5		       ff		      .byte.b	$ff
     28  10a5					      repend
     29  10a6		       ff		      .byte.b	$ff
     28  10a6					      repend
     29  10a7		       ff		      .byte.b	$ff
     28  10a7					      repend
     29  10a8		       ff		      .byte.b	$ff
     28  10a8					      repend
     29  10a9		       ff		      .byte.b	$ff
     28  10a9					      repend
     29  10aa		       ff		      .byte.b	$ff
     28  10aa					      repend
     29  10ab		       ff		      .byte.b	$ff
     28  10ab					      repend
     29  10ac		       ff		      .byte.b	$ff
     28  10ac					      repend
     29  10ad		       ff		      .byte.b	$ff
     28  10ad					      repend
     29  10ae		       ff		      .byte.b	$ff
     28  10ae					      repend
     29  10af		       ff		      .byte.b	$ff
     28  10af					      repend
     29  10b0		       ff		      .byte.b	$ff
     28  10b0					      repend
     29  10b1		       ff		      .byte.b	$ff
     28  10b1					      repend
     29  10b2		       ff		      .byte.b	$ff
     28  10b2					      repend
     29  10b3		       ff		      .byte.b	$ff
     28  10b3					      repend
     29  10b4		       ff		      .byte.b	$ff
     28  10b4					      repend
     29  10b5		       ff		      .byte.b	$ff
     28  10b5					      repend
     29  10b6		       ff		      .byte.b	$ff
     28  10b6					      repend
     29  10b7		       ff		      .byte.b	$ff
     28  10b7					      repend
     29  10b8		       ff		      .byte.b	$ff
     28  10b8					      repend
     29  10b9		       ff		      .byte.b	$ff
     28  10b9					      repend
     29  10ba		       ff		      .byte.b	$ff
     28  10ba					      repend
     29  10bb		       ff		      .byte.b	$ff
     28  10bb					      repend
     29  10bc		       ff		      .byte.b	$ff
     28  10bc					      repend
     29  10bd		       ff		      .byte.b	$ff
     28  10bd					      repend
     29  10be		       ff		      .byte.b	$ff
     28  10be					      repend
     29  10bf		       ff		      .byte.b	$ff
     28  10bf					      repend
     29  10c0		       ff		      .byte.b	$ff
     28  10c0					      repend
     29  10c1		       ff		      .byte.b	$ff
     28  10c1					      repend
     29  10c2		       ff		      .byte.b	$ff
     28  10c2					      repend
     29  10c3		       ff		      .byte.b	$ff
     28  10c3					      repend
     29  10c4		       ff		      .byte.b	$ff
     28  10c4					      repend
     29  10c5		       ff		      .byte.b	$ff
     28  10c5					      repend
     29  10c6		       ff		      .byte.b	$ff
     28  10c6					      repend
     29  10c7		       ff		      .byte.b	$ff
     28  10c7					      repend
     29  10c8		       ff		      .byte.b	$ff
     28  10c8					      repend
     29  10c9		       ff		      .byte.b	$ff
     28  10c9					      repend
     29  10ca		       ff		      .byte.b	$ff
     28  10ca					      repend
     29  10cb		       ff		      .byte.b	$ff
     28  10cb					      repend
     29  10cc		       ff		      .byte.b	$ff
     28  10cc					      repend
     29  10cd		       ff		      .byte.b	$ff
     28  10cd					      repend
     29  10ce		       ff		      .byte.b	$ff
     28  10ce					      repend
     29  10cf		       ff		      .byte.b	$ff
     28  10cf					      repend
     29  10d0		       ff		      .byte.b	$ff
     28  10d0					      repend
     29  10d1		       ff		      .byte.b	$ff
     28  10d1					      repend
     29  10d2		       ff		      .byte.b	$ff
     28  10d2					      repend
     29  10d3		       ff		      .byte.b	$ff
     28  10d3					      repend
     29  10d4		       ff		      .byte.b	$ff
     28  10d4					      repend
     29  10d5		       ff		      .byte.b	$ff
     28  10d5					      repend
     29  10d6		       ff		      .byte.b	$ff
     28  10d6					      repend
     29  10d7		       ff		      .byte.b	$ff
     28  10d7					      repend
     29  10d8		       ff		      .byte.b	$ff
     28  10d8					      repend
     29  10d9		       ff		      .byte.b	$ff
     28  10d9					      repend
     29  10da		       ff		      .byte.b	$ff
     28  10da					      repend
     29  10db		       ff		      .byte.b	$ff
     28  10db					      repend
     29  10dc		       ff		      .byte.b	$ff
     28  10dc					      repend
     29  10dd		       ff		      .byte.b	$ff
     28  10dd					      repend
     29  10de		       ff		      .byte.b	$ff
     28  10de					      repend
     29  10df		       ff		      .byte.b	$ff
     28  10df					      repend
     29  10e0		       ff		      .byte.b	$ff
     28  10e0					      repend
     29  10e1		       ff		      .byte.b	$ff
     28  10e1					      repend
     29  10e2		       ff		      .byte.b	$ff
     28  10e2					      repend
     29  10e3		       ff		      .byte.b	$ff
     28  10e3					      repend
     29  10e4		       ff		      .byte.b	$ff
     28  10e4					      repend
     29  10e5		       ff		      .byte.b	$ff
     28  10e5					      repend
     29  10e6		       ff		      .byte.b	$ff
     28  10e6					      repend
     29  10e7		       ff		      .byte.b	$ff
     28  10e7					      repend
     29  10e8		       ff		      .byte.b	$ff
     28  10e8					      repend
     29  10e9		       ff		      .byte.b	$ff
     28  10e9					      repend
     29  10ea		       ff		      .byte.b	$ff
     28  10ea					      repend
     29  10eb		       ff		      .byte.b	$ff
     28  10eb					      repend
     29  10ec		       ff		      .byte.b	$ff
     28  10ec					      repend
     29  10ed		       ff		      .byte.b	$ff
     28  10ed					      repend
     29  10ee		       ff		      .byte.b	$ff
     28  10ee					      repend
     29  10ef		       ff		      .byte.b	$ff
     28  10ef					      repend
     29  10f0		       ff		      .byte.b	$ff
     28  10f0					      repend
     29  10f1		       ff		      .byte.b	$ff
     28  10f1					      repend
     29  10f2		       ff		      .byte.b	$ff
     28  10f2					      repend
     29  10f3		       ff		      .byte.b	$ff
     28  10f3					      repend
     29  10f4		       ff		      .byte.b	$ff
     28  10f4					      repend
     29  10f5		       ff		      .byte.b	$ff
     28  10f5					      repend
     29  10f6		       ff		      .byte.b	$ff
     28  10f6					      repend
     29  10f7		       ff		      .byte.b	$ff
     28  10f7					      repend
     29  10f8		       ff		      .byte.b	$ff
     28  10f8					      repend
     29  10f9		       ff		      .byte.b	$ff
     28  10f9					      repend
     29  10fa		       ff		      .byte.b	$ff
     28  10fa					      repend
     29  10fb		       ff		      .byte.b	$ff
     28  10fb					      repend
     29  10fc		       ff		      .byte.b	$ff
     28  10fc					      repend
     29  10fd		       ff		      .byte.b	$ff
     28  10fd					      repend
     29  10fe		       ff		      .byte.b	$ff
     28  10fe					      repend
     29  10ff		       ff		      .byte.b	$ff
     30  1100					      repend
     31  1100				   game
     32  1100				   .L00 		;  inline PlusROM_functions.asm
     33  1100
------- FILE PlusROM_functions.asm LEVEL 2 PASS 3
      0  1100					      include	PlusROM_functions.asm
      1  1100		       00 01	   PlusROM_functions =	1
      2  1100		       1f f0	   WriteToBuffer =	$1ff0
      3  1100		       1f f1	   WriteSendBuffer =	$1ff1
      4  1100		       1f f2	   ReceiveBuffer =	$1ff2
      5  1100		       1f f3	   ReceiveBufferSize =	$1ff3
      6  1100
      7  1100					      MAC	set_plusrom_api
      8  1100				   PlusROM_API
      9  1100					      .byte	{1}, 0, {2}, 0
     10  1100					      ENDM		; {1} = path, {2} = domain
     11  1100
------- FILE d:\Firmaplus\Firmaplus_intern\Atari\PlusROM\Projekte-batariBasic\CaveApocalypse\C.A.V.E. Apocalypse.bas.asm
     35  1100
     36  1100				   .
     37  1100							; 
     38  1100
     39  1100				   .L01 		;  set kernel_options pfcolors player1colors
     40  1100
     41  1100				   .L02 		;  set romsize 8kSC
     42  1100
     43  1100				   .L03 		;  set smartbranching on
     44  1100
     45  1100				   .
     46  1100							; 
     47  1100
     48  1100				   .L04 		;  const pfres = 4
     49  1100
     50  1100				   .L05 		;  const pfscore  =  1
     51  1100
     52  1100				   .
     53  1100							; 
     54  1100
     55  1100				   .L06 		;  rem gravity is acceleration (https://atariage.com/forums/topic/226881-gravity/?do=findComment&comment=3017307)
     56  1100
     57  1100				   .L07 		;  rem the smallest fraction is 1/256 rounded up here to 0.004
     58  1100
     59  1100				   .L08 		;  rem assuming gravity is applied each drawscreen this should
     60  1100
     61  1100				   .L09 		;  rem work out to ~7 pixels in 1 second, 28 pixels in 2 seconds
     62  1100
     63  1100				   .L010		;  rem 63 pixels in 3 seconds
     64  1100
     65  1100							;.gravity_player1.0.004.
     66  1100				   .L011		;  def gravity_player1 = 0.004
     67  1100
     68  1100							;.gravity_missile0.0.024.
     69  1100				   .L012		;  def gravity_missile0 = 0.024
     70  1100
     71  1100				   .
     72  1100							; 
     73  1100
     74  1100				   .L013		;  const player_min_x	=  10
     75  1100
     76  1100				   .L014		;  const player_max_x	=  134
     77  1100
     78  1100				   .L015		;  const player_min_y	=  2
     79  1100
     80  1100				   .L016		;  const player_max_y	=  76
     81  1100
     82  1100				   .L017		;  const _M_Edge_Top  =  2
     83  1100
     84  1100				   .L018		;  const _M_Edge_Bottom  =  88
     85  1100
     86  1100				   .L019		;  const _M_Edge_Left	=  14
     87  1100
     88  1100				   .L020		;  const _M_Edge_Right  =  148
     89  1100
     90  1100				   .
     91  1100							; 
     92  1100
     93  1100				   .L021		;  const scback  =  #$08
     94  1100
     95  1100				   .
     96  1100							; 
     97  1100
     98  1100				   .L022		;  const response_size_minus_1  =  26
     99  1100
    100  1100				   .L023		;  const response_menu_size  =  6
    101  1100
    102  1100				   .
    103  1100							; 
    104  1100
    105  1100				   .
    106  1100							; 
    107  1100
    108  1100				   .
    109  1100							; 
    110  1100
    111  1100				   .
    112  1100							; 
    113  1100
    114  1100				   .L024		;  const req_load  =  0
    115  1100
    116  1100				   .L025		;  const req_level_up	=  1
    117  1100
    118  1100				   .L026		;  const req_game_over  =  2
    119  1100
    120  1100				   .L027		;  const req_move_left  =  3
    121  1100
    122  1100				   .L028		;  const req_move_up  =  4
    123  1100
    124  1100				   .L029		;  const req_move_right  =  5
    125  1100
    126  1100				   .L030		;  const req_move_down  =  6
    127  1100
    128  1100				   .L031		;  const req_level_reset  =  7
    129  1100
    130  1100				   .L032		;  const req_safe_point  =  8
    131  1100
    132  1100				   .L033		;  const req_load_menu  =  9
    133  1100
    134  1100				   .
    135  1100							; 
    136  1100
    137  1100				   .L034		;  const _00  =  $00
    138  1100
    139  1100				   .L035		;  const _02  =  $02
    140  1100
    141  1100				   .L036		;  const _04  =  $04
    142  1100
    143  1100				   .L037		;  const _06  =  $06
    144  1100
    145  1100				   .L038		;  const _08  =  $08
    146  1100
    147  1100				   .L039		;  const _0A  =  $0A
    148  1100
    149  1100				   .L040		;  const _0C  =  $0C
    150  1100
    151  1100				   .L041		;  const _0E  =  $0E
    152  1100
    153  1100				   .L042		;  const _10  =  $10
    154  1100
    155  1100				   .L043		;  const _12  =  $12
    156  1100
    157  1100				   .L044		;  const _14  =  $14
    158  1100
    159  1100				   .L045		;  const _16  =  $16
    160  1100
    161  1100				   .L046		;  const _18  =  $18
    162  1100
    163  1100				   .L047		;  const _1A  =  $1A
    164  1100
    165  1100				   .L048		;  const _1C  =  $1C
    166  1100
    167  1100				   .L049		;  const _1E  =  $1E
    168  1100
    169  1100				   .L050		;  const _20  =  $20
    170  1100
    171  1100				   .L051		;  const _22  =  $22
    172  1100
    173  1100				   .L052		;  const _24  =  $24
    174  1100
    175  1100				   .L053		;  const _26  =  $26
    176  1100
    177  1100				   .L054		;  const _28  =  $28
    178  1100
    179  1100				   .L055		;  const _2A  =  $2A
    180  1100
    181  1100				   .L056		;  const _2C  =  $2C
    182  1100
    183  1100				   .L057		;  const _2E  =  $2E
    184  1100
    185  1100				   .L058		;  const _30  =  $30
    186  1100
    187  1100				   .L059		;  const _32  =  $32
    188  1100
    189  1100				   .L060		;  const _34  =  $34
    190  1100
    191  1100				   .L061		;  const _36  =  $36
    192  1100
    193  1100				   .L062		;  const _38  =  $38
    194  1100
    195  1100				   .L063		;  const _3A  =  $3A
    196  1100
    197  1100				   .L064		;  const _3C  =  $3C
    198  1100
    199  1100				   .L065		;  const _3E  =  $3E
    200  1100
    201  1100				   .L066		;  const _40  =  $40
    202  1100
    203  1100				   .L067		;  const _42  =  $42
    204  1100
    205  1100				   .L068		;  const _44  =  $44
    206  1100
    207  1100				   .L069		;  const _46  =  $46
    208  1100
    209  1100				   .L070		;  const _48  =  $48
    210  1100
    211  1100				   .L071		;  const _4A  =  $4A
    212  1100
    213  1100				   .L072		;  const _4C  =  $4C
    214  1100
    215  1100				   .L073		;  const _4E  =  $4E
    216  1100
    217  1100				   .L074		;  const _50  =  $50
    218  1100
    219  1100				   .L075		;  const _52  =  $52
    220  1100
    221  1100				   .L076		;  const _54  =  $54
    222  1100
    223  1100				   .L077		;  const _56  =  $56
    224  1100
    225  1100				   .L078		;  const _58  =  $58
    226  1100
    227  1100				   .L079		;  const _5A  =  $5A
    228  1100
    229  1100				   .L080		;  const _5C  =  $5C
    230  1100
    231  1100				   .L081		;  const _5E  =  $5E
    232  1100
    233  1100				   .L082		;  const _60  =  $60
    234  1100
    235  1100				   .L083		;  const _62  =  $62
    236  1100
    237  1100				   .L084		;  const _64  =  $64
    238  1100
    239  1100				   .L085		;  const _66  =  $66
    240  1100
    241  1100				   .L086		;  const _68  =  $68
    242  1100
    243  1100				   .L087		;  const _6A  =  $6A
    244  1100
    245  1100				   .L088		;  const _6C  =  $6C
    246  1100
    247  1100				   .L089		;  const _6E  =  $6E
    248  1100
    249  1100				   .L090		;  const _70  =  $70
    250  1100
    251  1100				   .L091		;  const _72  =  $72
    252  1100
    253  1100				   .L092		;  const _74  =  $74
    254  1100
    255  1100				   .L093		;  const _76  =  $76
    256  1100
    257  1100				   .L094		;  const _78  =  $78
    258  1100
    259  1100				   .L095		;  const _7A  =  $7A
    260  1100
    261  1100				   .L096		;  const _7C  =  $7C
    262  1100
    263  1100				   .L097		;  const _7E  =  $7E
    264  1100
    265  1100				   .L098		;  const _80  =  $80
    266  1100
    267  1100				   .L099		;  const _82  =  $82
    268  1100
    269  1100				   .L0100		;  const _84  =  $84
    270  1100
    271  1100				   .L0101		;  const _86  =  $86
    272  1100
    273  1100				   .L0102		;  const _88  =  $88
    274  1100
    275  1100				   .L0103		;  const _8A  =  $8A
    276  1100
    277  1100				   .L0104		;  const _8C  =  $8C
    278  1100
    279  1100				   .L0105		;  const _8E  =  $8E
    280  1100
    281  1100				   .L0106		;  const _90  =  $90
    282  1100
    283  1100				   .L0107		;  const _92  =  $92
    284  1100
    285  1100				   .L0108		;  const _94  =  $94
    286  1100
    287  1100				   .L0109		;  const _96  =  $96
    288  1100
    289  1100				   .L0110		;  const _98  =  $98
    290  1100
    291  1100				   .L0111		;  const _9A  =  $9A
    292  1100
    293  1100				   .L0112		;  const _9C  =  $9C
    294  1100
    295  1100				   .L0113		;  const _9E  =  $9E
    296  1100
    297  1100				   .L0114		;  const _A0  =  $A0
    298  1100
    299  1100				   .L0115		;  const _A2  =  $A2
    300  1100
    301  1100				   .L0116		;  const _A4  =  $A4
    302  1100
    303  1100				   .L0117		;  const _A6  =  $A6
    304  1100
    305  1100				   .L0118		;  const _A8  =  $A8
    306  1100
    307  1100				   .L0119		;  const _AA  =  $AA
    308  1100
    309  1100				   .L0120		;  const _AC  =  $AC
    310  1100
    311  1100				   .L0121		;  const _AE  =  $AE
    312  1100
    313  1100				   .L0122		;  const _B0  =  $B0
    314  1100
    315  1100				   .L0123		;  const _B2  =  $B2
    316  1100
    317  1100				   .L0124		;  const _B4  =  $B4
    318  1100
    319  1100				   .L0125		;  const _B6  =  $B6
    320  1100
    321  1100				   .L0126		;  const _B8  =  $B8
    322  1100
    323  1100				   .L0127		;  const _BA  =  $BA
    324  1100
    325  1100				   .L0128		;  const _BC  =  $BC
    326  1100
    327  1100				   .L0129		;  const _BE  =  $BE
    328  1100
    329  1100				   .L0130		;  const _C0  =  $C0
    330  1100
    331  1100				   .L0131		;  const _C2  =  $C2
    332  1100
    333  1100				   .L0132		;  const _C4  =  $C4
    334  1100
    335  1100				   .L0133		;  const _C6  =  $C6
    336  1100
    337  1100				   .L0134		;  const _C8  =  $C8
    338  1100
    339  1100				   .L0135		;  const _CA  =  $CA
    340  1100
    341  1100				   .L0136		;  const _CC  =  $CC
    342  1100
    343  1100				   .L0137		;  const _CE  =  $CE
    344  1100
    345  1100				   .L0138		;  const _D0  =  $D0
    346  1100
    347  1100				   .L0139		;  const _D2  =  $D2
    348  1100
    349  1100				   .L0140		;  const _D4  =  $D4
    350  1100
    351  1100				   .L0141		;  const _D6  =  $D6
    352  1100
    353  1100				   .L0142		;  const _D8  =  $D8
    354  1100
    355  1100				   .L0143		;  const _DA  =  $DA
    356  1100
    357  1100				   .L0144		;  const _DC  =  $DC
    358  1100
    359  1100				   .L0145		;  const _DE  =  $DE
    360  1100
    361  1100				   .L0146		;  const _E0  =  $E0
    362  1100
    363  1100				   .L0147		;  const _E2  =  $E2
    364  1100
    365  1100				   .L0148		;  const _E4  =  $E4
    366  1100
    367  1100				   .L0149		;  const _E6  =  $E6
    368  1100
    369  1100				   .L0150		;  const _E8  =  $E8
    370  1100
    371  1100				   .L0151		;  const _EA  =  $EA
    372  1100
    373  1100				   .L0152		;  const _EC  =  $EC
    374  1100
    375  1100				   .L0153		;  const _EE  =  $EE
    376  1100
    377  1100				   .L0154		;  const _F0  =  $F0
    378  1100
    379  1100				   .L0155		;  const _F2  =  $F2
    380  1100
    381  1100				   .L0156		;  const _F4  =  $F4
    382  1100
    383  1100				   .L0157		;  const _F6  =  $F6
    384  1100
    385  1100				   .L0158		;  const _F8  =  $F8
    386  1100
    387  1100				   .L0159		;  const _FA  =  $FA
    388  1100
    389  1100				   .L0160		;  const _FC  =  $FC
    390  1100
    391  1100				   .L0161		;  const _FE  =  $FE
    392  1100
    393  1100				   .
    394  1100							; 
    395  1100
    396  1100				   .
    397  1100							; 
    398  1100
    399  1100				   .
    400  1100							; 
    401  1100
    402  1100				   .
    403  1100							; 
    404  1100
    405  1100				   .
    406  1100							; 
    407  1100
    408  1100				   .
    409  1100							; 
    410  1100
    411  1100				   .
    412  1100							; 
    413  1100
    414  1100				   .
    415  1100							; 
    416  1100
    417  1100				   .
    418  1100							; 
    419  1100
    420  1100				   .
    421  1100							; 
    422  1100
    423  1100				   .
    424  1100							; 
    425  1100
    426  1100				   .
    427  1100							; 
    428  1100
    429  1100				   .
    430  1100							; 
    431  1100
    432  1100				   .
    433  1100							; 
    434  1100
    435  1100				   .
    436  1100							; 
    437  1100
    438  1100				   .
    439  1100							; 
    440  1100
    441  1100				   .
    442  1100							; 
    443  1100
    444  1100				   .
    445  1100							; 
    446  1100
    447  1100				   .
    448  1100							; 
    449  1100
    450  1100				   .
    451  1100							; 
    452  1100
    453  1100				   .
    454  1100							; 
    455  1100
    456  1100				   .
    457  1100							; 
    458  1100
    459  1100				   .
    460  1100							; 
    461  1100
    462  1100				   .
    463  1100							; 
    464  1100
    465  1100				   .
    466  1100							; 
    467  1100
    468  1100				   .
    469  1100							; 
    470  1100
    471  1100				   .
    472  1100							; 
    473  1100
    474  1100				   .
    475  1100							; 
    476  1100
    477  1100				   .
    478  1100							; 
    479  1100
    480  1100				   .
    481  1100							; 
    482  1100
    483  1100				   .
    484  1100							; 
    485  1100
    486  1100				   .
    487  1100							; 
    488  1100
    489  1100				   .
    490  1100							; 
    491  1100
    492  1100				   .
    493  1100							; 
    494  1100
    495  1100				   .
    496  1100							; 
    497  1100
    498  1100				   .
    499  1100							; 
    500  1100
    501  1100				   .
    502  1100							; 
    503  1100
    504  1100				   .
    505  1100							; 
    506  1100
    507  1100				   .
    508  1100							; 
    509  1100
    510  1100				   .
    511  1100							; 
    512  1100
    513  1100				   .
    514  1100							; 
    515  1100
    516  1100				   .
    517  1100							; 
    518  1100
    519  1100				   .
    520  1100							; 
    521  1100
    522  1100				   .
    523  1100							; 
    524  1100
    525  1100				   .
    526  1100							; 
    527  1100
    528  1100				   .
    529  1100							; 
    530  1100
    531  1100				   .
    532  1100							; 
    533  1100
    534  1100				   .
    535  1100							; 
    536  1100
    537  1100				   .
    538  1100							; 
    539  1100
    540  1100				   .
    541  1100							; 
    542  1100
    543  1100				   .
    544  1100							; 
    545  1100
    546  1100				   .
    547  1100							; 
    548  1100
    549  1100				   .
    550  1100							; 
    551  1100
    552  1100				   .
    553  1100							; 
    554  1100
    555  1100				   .
    556  1100							; 
    557  1100
    558  1100				   .
    559  1100							; 
    560  1100
    561  1100				   .
    562  1100							; 
    563  1100
    564  1100				   .
    565  1100							; 
    566  1100
    567  1100				   .
    568  1100							; 
    569  1100
    570  1100				   .
    571  1100							; 
    572  1100
    573  1100				   .
    574  1100							; 
    575  1100
    576  1100				   .
    577  1100							; 
    578  1100
    579  1100				   .
    580  1100							; 
    581  1100
    582  1100				   .
    583  1100							; 
    584  1100
    585  1100				   .
    586  1100							; 
    587  1100
    588  1100				   .
    589  1100							; 
    590  1100
    591  1100				   .
    592  1100							; 
    593  1100
    594  1100				   .
    595  1100							; 
    596  1100
    597  1100				   .
    598  1100							; 
    599  1100
    600  1100				   .
    601  1100							; 
    602  1100
    603  1100				   .
    604  1100							; 
    605  1100
    606  1100				   .
    607  1100							; 
    608  1100
    609  1100				   .
    610  1100							; 
    611  1100
    612  1100				   .
    613  1100							; 
    614  1100
    615  1100				   .
    616  1100							; 
    617  1100
    618  1100				   .
    619  1100							; 
    620  1100
    621  1100				   .
    622  1100							; 
    623  1100
    624  1100				   .
    625  1100							; 
    626  1100
    627  1100				   .
    628  1100							; 
    629  1100
    630  1100				   .
    631  1100							; 
    632  1100
    633  1100				   .
    634  1100							; 
    635  1100
    636  1100				   .
    637  1100							; 
    638  1100
    639  1100				   .
    640  1100							; 
    641  1100
    642  1100				   .
    643  1100							; 
    644  1100
    645  1100				   .
    646  1100							; 
    647  1100
    648  1100				   .
    649  1100							; 
    650  1100
    651  1100				   .
    652  1100							; 
    653  1100
    654  1100				   .
    655  1100							; 
    656  1100
    657  1100				   .
    658  1100							; 
    659  1100
    660  1100				   .
    661  1100							; 
    662  1100
    663  1100				   .
    664  1100							; 
    665  1100
    666  1100				   .
    667  1100							; 
    668  1100
    669  1100				   .
    670  1100							; 
    671  1100
    672  1100				   .
    673  1100							; 
    674  1100
    675  1100				   .
    676  1100							; 
    677  1100
    678  1100				   .
    679  1100							; 
    680  1100
    681  1100				   .
    682  1100							; 
    683  1100
    684  1100				   .
    685  1100							; 
    686  1100
    687  1100				   .
    688  1100							; 
    689  1100
    690  1100				   .
    691  1100							; 
    692  1100
    693  1100				   .
    694  1100							; 
    695  1100
    696  1100				   .
    697  1100							; 
    698  1100
    699  1100				   .
    700  1100							; 
    701  1100
    702  1100				   .
    703  1100							; 
    704  1100
    705  1100				   .
    706  1100							; 
    707  1100
    708  1100				   .
    709  1100							; 
    710  1100
    711  1100				   .
    712  1100							; 
    713  1100
    714  1100				   .
    715  1100							; 
    716  1100
    717  1100				   .
    718  1100							; 
    719  1100
    720  1100				   .
    721  1100							; 
    722  1100
    723  1100				   .
    724  1100							; 
    725  1100
    726  1100				   .
    727  1100							; 
    728  1100
    729  1100				   .
    730  1100							; 
    731  1100
    732  1100				   .
    733  1100							; 
    734  1100
    735  1100				   .
    736  1100							; 
    737  1100
    738  1100				   .
    739  1100							; 
    740  1100
    741  1100				   .
    742  1100							; 
    743  1100
    744  1100				   .
    745  1100							; 
    746  1100
    747  1100				   .
    748  1100							; 
    749  1100
    750  1100				   .
    751  1100							; 
    752  1100
    753  1100				   .
    754  1100							; 
    755  1100
    756  1100				   .
    757  1100							; 
    758  1100
    759  1100				   .
    760  1100							; 
    761  1100
    762  1100				   .
    763  1100							; 
    764  1100
    765  1100				   .
    766  1100							; 
    767  1100
    768  1100				   .
    769  1100							; 
    770  1100
    771  1100				   .
    772  1100							; 
    773  1100
    774  1100				   .
    775  1100							; 
    776  1100
    777  1100				   .
    778  1100							; 
    779  1100
    780  1100				   .
    781  1100							; 
    782  1100
    783  1100				   .
    784  1100							; 
    785  1100
    786  1100				   .
    787  1100							; 
    788  1100
    789  1100				   .
    790  1100							; 
    791  1100
    792  1100				   .
    793  1100							; 
    794  1100
    795  1100				   .
    796  1100							; 
    797  1100
    798  1100				   .
    799  1100							; 
    800  1100
    801  1100				   .
    802  1100							; 
    803  1100
    804  1100				   .
    805  1100							; 
    806  1100
    807  1100				   .
    808  1100							; 
    809  1100
    810  1100				   .
    811  1100							; 
    812  1100
    813  1100				   .
    814  1100							; 
    815  1100
    816  1100				   .
    817  1100							; 
    818  1100
    819  1100				   .
    820  1100							; 
    821  1100
    822  1100				   .
    823  1100							; 
    824  1100
    825  1100				   .
    826  1100							; 
    827  1100
    828  1100				   .
    829  1100							; 
    830  1100
    831  1100				   .L0162		;  dim _sc1  =  score
    832  1100
    833  1100				   .L0163		;  dim _sc2  =  score + 1
    834  1100
    835  1100				   .L0164		;  dim _sc3  =  score + 2
    836  1100
    837  1100				   .
    838  1100							; 
    839  1100
    840  1100				   .
    841  1100							; 
    842  1100
    843  1100				   .L0165		;  dim delay_counter  =  a
    844  1100
    845  1100				   .L0166		;  dim frame_counter  =  b
    846  1100
    847  1100				   .
    848  1100							; 
    849  1100
    850  1100				   .L0167		;  dim _BitOp_Ball_Shot_Dir  =  c
    851  1100
    852  1100				   .L0168		;  dim _Bit0_Ball_Shot_Dir_Left1  =  c
    853  1100
    854  1100				   .L0169		;  dim _Bit1_Ball_Shot_Dir_Left2  =  c
    855  1100
    856  1100				   .L0170		;  dim _Bit2_Ball_Shot_Dir_Right1  =  c
    857  1100
    858  1100				   .L0171		;  dim _Bit3_Ball_Shot_Dir_Right2  =  c
    859  1100
    860  1100				   .
    861  1100							; 
    862  1100
    863  1100				   .L0172		;  dim _BitOp_M0_Dir  =  d
    864  1100
    865  1100				   .L0173		;  dim _Bit0_M0_Dir_Up  =  d
    866  1100
    867  1100				   .L0174		;  dim _Bit1_M0_Dir_Down  =  d
    868  1100
    869  1100				   .L0175		;  dim _Bit2_M0_Dir_Left  =  d
    870  1100
    871  1100				   .L0176		;  dim _Bit3_M0_Dir_Right  =  d
    872  1100
    873  1100				   .
    874  1100							; 
    875  1100
    876  1100				   .L0177		;  dim _BitOp_P1_Dir  =  e
    877  1100
    878  1100				   .L0178		;  dim _Bit0_P1_Dir_Up  =  e
    879  1100
    880  1100				   .L0179		;  dim _Bit1_P1_Dir_Down  =  e
    881  1100
    882  1100				   .L0180		;  dim _Bit2_P1_Dir_Left  =  e
    883  1100
    884  1100				   .L0181		;  dim _Bit3_P1_Dir_Right  =  e
    885  1100
    886  1100				   .
    887  1100							; 
    888  1100
    889  1100				   .
    890  1100							; 
    891  1100
    892  1100				   .L0182		;  dim _Ch0_Sound  =  f
    893  1100
    894  1100				   .L0183		;  dim _Ch0_Duration  =  g
    895  1100
    896  1100				   .L0184		;  dim _Ch0_Counter  =  h
    897  1100
    898  1100				   .
    899  1100							; 
    900  1100
    901  1100				   .L0185		;  dim extra_wall_move_x  =  i
    902  1100
    903  1100				   .L0186		;  dim roommate_move_x  =  j
    904  1100
    905  1100				   .L0187		;  dim roommate_type  =  k
    906  1100
    907  1100				   .
    908  1100							; 
    909  1100
    910  1100				   .L0188		;  dim _BitOp_Safe_Point_New_Room  =  l
    911  1100
    912  1100				   .L0189		;  dim _Bit0_Safe_Point_reached  =  l
    913  1100
    914  1100				   .L0190		;  dim _Bit1_Safe_Point_P1_Flip  =  l
    915  1100
    916  1100				   .L0191		;  dim _Bit2_New_Room_Flip_P1	=  l
    917  1100
    918  1100				   .L0192		;  dim Safe_Point_P1_x  =  m
    919  1100
    920  1100				   .L0193		;  dim Safe_Point_P1_y  =  n
    921  1100
    922  1100				   .
    923  1100							; 
    924  1100
    925  1100				   .L0194		;  rem 16 bit velocity
    926  1100
    927  1100				   .L0195		;  dim Bally_velocity	=  p.q
    928  1100
    929  1100				   .L0196		;  rem 16 bit ball y position
    930  1100
    931  1100				   .L0197		;  dim Bally_position	=  bally.r
    932  1100
    933  1100				   .
    934  1100							; 
    935  1100
    936  1100				   .L0198		;  rem 16 bit velocity
    937  1100
    938  1100				   .L0199		;  dim M0y_velocity  =  s.t
    939  1100
    940  1100				   .L0200		;  rem 16 bit missile0 y position
    941  1100
    942  1100				   .L0201		;  dim M0y_position  =  missile0y.u
    943  1100
    944  1100				   .
    945  1100							; 
    946  1100
    947  1100				   .L0202		;  rem 16 bit velocity
    948  1100
    949  1100				   .L0203		;  dim P1y_velocity  =  v.w
    950  1100
    951  1100				   .L0204		;  rem 16 bit player1 y position
    952  1100
    953  1100				   .L0205		;  dim P1y_position  =  player1y.x
    954  1100
    955  1100				   .
    956  1100							; 
    957  1100
    958  1100				   .L0206		;  rem Various game states
    959  1100
    960  1100				   .L0207		;  dim _Bit_Game_State  =  y
    961  1100
    962  1100				   .L0208		;  dim _Bit0_roommate_Dir  =  y
    963  1100
    964  1100				   .L0209		;  dim _Bit1_Wall_Dir	=  y
    965  1100
    966  1100				   .L0210		;  dim _Bit2_Level_finished  =  y
    967  1100
    968  1100				   .L0211		;  dim _Bit3_Ball_Shot_Moving	=  y
    969  1100
    970  1100				   .L0212		;  dim _Bit4_Game_Over  =  y
    971  1100
    972  1100				   .L0213		;  dim _Bit5_Request_Pending  =  y
    973  1100
    974  1100				   .L0214		;  dim _Bit6_Flip_P1  =  y
    975  1100
    976  1100				   .L0215		;  dim _Bit7_M0_Moving  =  y
    977  1100
    978  1100				   .
    979  1100							; 
    980  1100
    981  1100				   .L0216		;  dim new_room_player1y  =  var0
    982  1100
    983  1100				   .L0217		;  dim new_room_player1x  =  var1
    984  1100
    985  1100				   .L0218		;  dim gamenumber  =  var2
    986  1100
    987  1100				   .
    988  1100							; 
    989  1100
    990  1100				   .L0219		;  dim max_pub_level_bcd1  =  var3
    991  1100
    992  1100				   .L0220		;  dim max_pub_level_bcd2  =  var4
    993  1100
    994  1100				   .L0221		;  dim max_pub_level_bcd3  =  var5
    995  1100
    996  1100				   .L0222		;  dim max_priv_level_bcd1  =	var6
    997  1100
    998  1100				   .L0223		;  dim max_priv_level_bcd2  =	var7
    999  1100
   1000  1100				   .L0224		;  dim max_priv_level_bcd3  =	var8
   1001  1100
   1002  1100				   .
   1003  1100							; 
   1004  1100
   1005  1100				   .L0225		;  dim extra_wall_type  =  var9
   1006  1100
   1007  1100				   .
   1008  1100							; 
   1009  1100
   1010  1100				   .
   1011  1100							; 
   1012  1100
   1013  1100				   .
   1014  1100							; 
   1015  1100
   1016  1100				   .L0226		;  dim w_room_definition_start  =  w097
   1017  1100
   1018  1100				   .
   1019  1100							; 
   1020  1100
   1021  1100				   .L0227		;  dim r_BitOp_room_type  =  r097
   1022  1100
   1023  1100				   .L0228		;  dim w_BitOp_room_type  =  r097
   1024  1100
   1025  1100				   .L0229		;  dim r_Bit0_room_type_top  =  r097
   1026  1100
   1027  1100				   .L0230		;  dim r_room_color_top  =  r098
   1028  1100
   1029  1100				   .L0231		;  dim w_room_color_top  =  w098
   1030  1100
   1031  1100				   .L0232		;  dim r_room_color_middle  =	r099
   1032  1100
   1033  1100				   .L0233		;  dim w_room_color_middle  =	w099
   1034  1100
   1035  1100				   .L0234		;  dim r_room_color_bottom  =	r103
   1036  1100
   1037  1100				   .L0235		;  dim w_room_color_bottom  =	w103
   1038  1100
   1039  1100				   .L0236		;  dim r_roommate_type_and_range  =  r104
   1040  1100
   1041  1100				   .L0237		;  dim w_roommate_type_and_range  =  w104
   1042  1100
   1043  1100				   .L0238		;  dim r_roommate_startpos_x  =  r105
   1044  1100
   1045  1100				   .L0239		;  dim w_roommate_startpos_x  =  w105
   1046  1100
   1047  1100				   .L0240		;  dim r_roommate_startpos_y  =  r106
   1048  1100
   1049  1100				   .L0241		;  dim w_roommate_startpos_y  =  w106
   1050  1100
   1051  1100				   .L0242		;  dim r_extra_wall_type_and_range  =	r107
   1052  1100
   1053  1100				   .L0243		;  dim w_extra_wall_type_and_range  =	w107
   1054  1100
   1055  1100				   .L0244		;  dim r_extra_wall_width  =  r108
   1056  1100
   1057  1100				   .L0245		;  dim w_extra_wall_width  =  w108
   1058  1100
   1059  1100				   .L0246		;  dim r_extra_wall_height  =	r109
   1060  1100
   1061  1100				   .L0247		;  dim w_extra_wall_height  =	w109
   1062  1100
   1063  1100				   .L0248		;  dim r_extra_wall_startpos_x  =  r110
   1064  1100
   1065  1100				   .L0249		;  dim w_extra_wall_startpos_x  =  w110
   1066  1100
   1067  1100				   .L0250		;  dim r_extra_wall_startpos_y  =  r111
   1068  1100
   1069  1100				   .L0251		;  dim w_extra_wall_startpos_y  =  w111
   1070  1100
   1071  1100				   .
   1072  1100							; 
   1073  1100
   1074  1100				   .
   1075  1100							; 
   1076  1100
   1077  1100				   ._Start
   1078  1100							; _Start
   1079  1100
   1080  1100				   .L0252		;  asm
   1081  1100
   1082  1100		       a9 00		      lda	#0
   1083  1102
   1084  1102		       a2 4b		      ldx	#75
   1085  1104
   1086  1104				   .clear_ram
   1087  1104
   1088  1104		       ca		      dex
   1089  1105
   1090  1105		       95 a4		      sta	var0,x
   1091  1107
   1092  1107		       d0 fb		      bne	.clear_ram
   1093  1109
   1094  1109				   .
   1095  1109							; 
   1096  1109
   1097  1109				   .L0253		;  WriteSendBuffer  =	req_load_menu  :  _Bit5_Request_Pending{5}  =  1  :  COLUP0  =	_1C  :	scorecolor  =  _0E
   1098  1109
   1099  1109		       a9 09		      LDA	#req_load_menu
   1100  110b		       8d f1 1f 	      STA	WriteSendBuffer
   1101  110e		       a5 ec		      LDA	_Bit5_Request_Pending
   1102  1110		       09 20		      ORA	#32
   1103  1112		       85 ec		      STA	_Bit5_Request_Pending
   1104  1114		       a9 1c		      LDA	#_1C
   1105  1116		       85 06		      STA	COLUP0
   1106  1118		       a9 0e		      LDA	#_0E
   1107  111a		       85 a3		      STA	scorecolor
   1108  111c				   .L0254		;  gamenumber	=  1  :  score	=  1  :  missile0height  =  1
   1109  111c
   1110  111c		       a9 01		      LDA	#1
   1111  111e		       85 a6		      STA	gamenumber
   1112  1120		       a9 01		      LDA	#$01
   1113  1122		       85 95		      STA	score+2
   1114  1124		       a9 00		      LDA	#$00
   1115  1126		       85 94		      STA	score+1
   1116  1128		       a9 00		      LDA	#$00
   1117  112a		       85 93		      STA	score
   1118  112c		       a9 01		      LDA	#1
   1119  112e		       85 90		      STA	missile0height
   1120  1130				   .L0255		;  new_room_player1y  =  player_min_y	:  Safe_Point_P1_y  =  player_min_y
   1121  1130
   1122  1130		       a9 02		      LDA	#player_min_y
   1123  1132		       85 a4		      STA	new_room_player1y
   1124  1134		       85 e1		      STA	Safe_Point_P1_y
   1125  1136				   .L0256		;  new_room_player1x  =  30  :  player1x  =  30  :  Safe_Point_P1_x  =  30
   1126  1136
   1127  1136		       a9 1e		      LDA	#30
   1128  1138		       85 a5		      STA	new_room_player1x
   1129  113a		       85 81		      STA	player1x
   1130  113c		       85 e0		      STA	Safe_Point_P1_x
   1131  113e				   .L0257		;  AUDV0  =  0  :  AUDV1  =  0  :  frame_counter  =  0  :  player0x  =  0  :  bally  =  0  :  player1y  =  0
   1132  113e
   1133  113e		       a9 00		      LDA	#0
   1134  1140		       85 19		      STA	AUDV0
   1135  1142		       85 1a		      STA	AUDV1
   1136  1144		       85 d5		      STA	frame_counter
   1137  1146		       85 80		      STA	player0x
   1138  1148		       85 89		      STA	bally
   1139  114a		       85 86		      STA	player1y
   1140  114c				   .L0258		;  missile0x  =  200  :  missile0y  =	200  :	w_extra_wall_startpos_x  =  200  :  w_roommate_startpos_y  =  200  :  player0y	=  200
   1141  114c
   1142  114c		       a9 c8		      LDA	#200
   1143  114e		       85 82		      STA	missile0x
   1144  1150		       85 91		      STA	missile0y
   1145  1152		       8d 6e f0 	      STA	w_extra_wall_startpos_x
   1146  1155		       8d 6a f0 	      STA	w_roommate_startpos_y
   1147  1158		       85 85		      STA	player0y
   1148  115a				   .
   1149  115a							; 
   1150  115a
   1151  115a				   .
   1152  115a							; 
   1153  115a
   1154  115a				   .L0259		;  pfclear
   1155  115a
   1156  115a		       a9 00		      LDA	#0
   1157  115c		       85 ee		      sta	temp7
   1158  115e		       a9 d1		      lda	#>(ret_point1-1)
   1159  1160		       48		      pha
   1160  1161		       a9 73		      lda	#<(ret_point1-1)
   1161  1163		       48		      pha
   1162  1164		       a9 f3		      lda	#>(pfclear-1)
   1163  1166		       48		      pha
   1164  1167		       a9 8f		      lda	#<(pfclear-1)
   1165  1169		       48		      pha
   1166  116a		       a5 ee		      lda	temp7
   1167  116c		       48		      pha
   1168  116d		       8a		      txa
   1169  116e		       48		      pha
   1170  116f		       a2 02		      ldx	#2
   1171  1171		       4c e8 ff 	      jmp	BS_jsr
   1172  1174				   ret_point1
   1173  1174				   .L0260		;  player1color:
   1174  1174
   1175  1174		       a2 dc		      LDX	#<playercolorL0260_1
   1176  1176		       86 87		      STX	player1color
   1177  1178		       a9 fe		      LDA	#>playercolorL0260_1
   1178  117a		       85 88		      STA	player1color+1
   1179  117c				   .
   1180  117c							; 
   1181  117c
   1182  117c				   .
   1183  117c							; 
   1184  117c
   1185  117c				   .
   1186  117c							; 
   1187  117c
   1188  117c				   .
   1189  117c							; 
   1190  117c
   1191  117c				   ._titlescreen_menu
   1192  117c							; _titlescreen_menu
   1193  117c
   1194  117c				   .L0261		;  COLUBK  =  _00
   1195  117c
   1196  117c		       a9 00		      LDA	#_00
   1197  117e		       85 09		      STA	COLUBK
   1198  1180				   .
   1199  1180							; 
   1200  1180
   1201  1180				   .L0262		;  gosub titledrawscreen bank2
   1202  1180
   1203  1180		       85 ee		      sta	temp7
   1204  1182		       a9 d1		      lda	#>(ret_point2-1)
   1205  1184		       48		      pha
   1206  1185		       a9 97		      lda	#<(ret_point2-1)
   1207  1187		       48		      pha
   1208  1188		       a9 f6		      lda	#>(.titledrawscreen-1)
   1209  118a		       48		      pha
   1210  118b		       a9 22		      lda	#<(.titledrawscreen-1)
   1211  118d		       48		      pha
   1212  118e		       a5 ee		      lda	temp7
   1213  1190		       48		      pha
   1214  1191		       8a		      txa
   1215  1192		       48		      pha
   1216  1193		       a2 02		      ldx	#2
   1217  1195		       4c e8 ff 	      jmp	BS_jsr
   1218  1198				   ret_point2
   1219  1198				   .
   1220  1198							; 
   1221  1198
   1222  1198				   .L0263		;  if delay_counter  >  0 then delay_counter  =  delay_counter  -  1  :  goto _titlescreen_menu
   1223  1198
   1224  1198		       a9 00		      LDA	#0
   1225  119a		       c5 d4		      CMP	delay_counter
   1226  119c		       b0 05		      BCS	.skipL0263
   1227  119e				   .condpart0
   1228  119e		       c6 d4		      DEC	delay_counter
   1229  11a0		       4c 7c d1 	      jmp	._titlescreen_menu
   1230  11a3
   1231  11a3				   .skipL0263
   1232  11a3				   .
   1233  11a3							; 
   1234  11a3
   1235  11a3				   .L0264		;  if ReceiveBufferSize  <  response_menu_size then _Skip_Read_Menu_Response
   1236  11a3
   1237  11a3		       ad f3 1f 	      LDA	ReceiveBufferSize
   1238  11a6		       c9 06		      CMP	#response_menu_size
   1239  11a8					      if	((* - ._Skip_Read_Menu_Response) < 127) && ((* - ._Skip_Read_Menu_Response) > -128)
   1240  11a8		       90 24		      bcc	._Skip_Read_Menu_Response
   1241  11aa				  -	      else
   1242  11aa				  -	      bcs	.0skip_Skip_Read_Menu_Response
   1243  11aa				  -	      jmp	._Skip_Read_Menu_Response
   1244  11aa				  -.0skip_Skip_Read_Menu_Response
   1245  11aa					      endif
   1246  11aa				   .L0265		;  _Bit5_Request_Pending{5}  =  0
   1247  11aa
   1248  11aa		       a5 ec		      LDA	_Bit5_Request_Pending
   1249  11ac		       29 df		      AND	#223
   1250  11ae		       85 ec		      STA	_Bit5_Request_Pending
   1251  11b0				   .L0266		;  max_pub_level_bcd1	=  ReceiveBuffer
   1252  11b0
   1253  11b0		       ad f2 1f 	      LDA	ReceiveBuffer
   1254  11b3		       85 a7		      STA	max_pub_level_bcd1
   1255  11b5				   .L0267		;  max_pub_level_bcd2	=  ReceiveBuffer
   1256  11b5
   1257  11b5		       ad f2 1f 	      LDA	ReceiveBuffer
   1258  11b8		       85 a8		      STA	max_pub_level_bcd2
   1259  11ba				   .L0268		;  max_pub_level_bcd3	=  ReceiveBuffer
   1260  11ba
   1261  11ba		       ad f2 1f 	      LDA	ReceiveBuffer
   1262  11bd		       85 a9		      STA	max_pub_level_bcd3
   1263  11bf				   .L0269		;  max_priv_level_bcd1  =  ReceiveBuffer
   1264  11bf
   1265  11bf		       ad f2 1f 	      LDA	ReceiveBuffer
   1266  11c2		       85 aa		      STA	max_priv_level_bcd1
   1267  11c4				   .L0270		;  max_priv_level_bcd2  =  ReceiveBuffer
   1268  11c4
   1269  11c4		       ad f2 1f 	      LDA	ReceiveBuffer
   1270  11c7		       85 ab		      STA	max_priv_level_bcd2
   1271  11c9				   .L0271		;  max_priv_level_bcd3  =  ReceiveBuffer
   1272  11c9
   1273  11c9		       ad f2 1f 	      LDA	ReceiveBuffer
   1274  11cc		       85 ac		      STA	max_priv_level_bcd3
   1275  11ce				   ._Skip_Read_Menu_Response
   1276  11ce							; _Skip_Read_Menu_Response
   1277  11ce
   1278  11ce				   .
   1279  11ce							; 
   1280  11ce
   1281  11ce				   .L0272		;  if _Bit5_Request_Pending{5} then _titlescreen_menu
   1282  11ce
   1283  11ce		       a5 ec		      LDA	_Bit5_Request_Pending
   1284  11d0		       29 20		      AND	#32
   1285  11d2					      if	((* - ._titlescreen_menu) < 127) && ((* - ._titlescreen_menu) > -128)
   1286  11d2		       d0 a8		      BNE	._titlescreen_menu
   1287  11d4				  -	      else
   1288  11d4				  -	      beq	.1skip_titlescreen_menu
   1289  11d4				  -	      jmp	._titlescreen_menu
   1290  11d4				  -.1skip_titlescreen_menu
   1291  11d4					      endif
   1292  11d4				   .
   1293  11d4							; 
   1294  11d4
   1295  11d4				   .L0273		;  if joy0left then score  =  score  -  100  :  delay_counter	=  5
   1296  11d4
   1297  11d4		       2c 80 02 	      bit	SWCHA
   1298  11d7		       70 19		      BVS	.skipL0273
   1299  11d9				   .condpart1
   1300  11d9		       f8		      SED
   1301  11da		       38		      SEC
   1302  11db		       a5 95		      LDA	score+2
   1303  11dd		       e9 00		      SBC	#$00
   1304  11df		       85 95		      STA	score+2
   1305  11e1		       a5 94		      LDA	score+1
   1306  11e3		       e9 01		      SBC	#$01
   1307  11e5		       85 94		      STA	score+1
   1308  11e7		       a5 93		      LDA	score
   1309  11e9		       e9 00		      SBC	#$00
   1310  11eb		       85 93		      STA	score
   1311  11ed		       d8		      CLD
   1312  11ee		       a9 05		      LDA	#5
   1313  11f0		       85 d4		      STA	delay_counter
   1314  11f2				   .skipL0273
   1315  11f2				   .L0274		;  if joy0down then score  =  score  -  1  :  delay_counter  =  5
   1316  11f2
   1317  11f2		       a9 20		      lda	#$20
   1318  11f4		       2c 80 02 	      bit	SWCHA
   1319  11f7		       d0 19		      BNE	.skipL0274
   1320  11f9				   .condpart2
   1321  11f9		       f8		      SED
   1322  11fa		       38		      SEC
   1323  11fb		       a5 95		      LDA	score+2
   1324  11fd		       e9 01		      SBC	#$01
   1325  11ff		       85 95		      STA	score+2
   1326  1201		       a5 94		      LDA	score+1
   1327  1203		       e9 00		      SBC	#$00
   1328  1205		       85 94		      STA	score+1
   1329  1207		       a5 93		      LDA	score
   1330  1209		       e9 00		      SBC	#$00
   1331  120b		       85 93		      STA	score
   1332  120d		       d8		      CLD
   1333  120e		       a9 05		      LDA	#5
   1334  1210		       85 d4		      STA	delay_counter
   1335  1212				   .skipL0274
   1336  1212				   .L0275		;  if joy0right then score  =	score  +  100  :  delay_counter  =  5
   1337  1212
   1338  1212		       2c 80 02 	      bit	SWCHA
   1339  1215		       30 13		      BMI	.skipL0275
   1340  1217				   .condpart3
   1341  1217		       f8		      SED
   1342  1218		       18		      CLC
   1343  1219		       a5 94		      LDA	score+1
   1344  121b		       69 01		      ADC	#$01
   1345  121d		       85 94		      STA	score+1
   1346  121f		       a5 93		      LDA	score
   1347  1221		       69 00		      ADC	#$00
   1348  1223		       85 93		      STA	score
   1349  1225		       d8		      CLD
   1350  1226		       a9 05		      LDA	#5
   1351  1228		       85 d4		      STA	delay_counter
   1352  122a				   .skipL0275
   1353  122a				   .L0276		;  if joy0up then score  =  score  +  1  :  delay_counter  =  5
   1354  122a
   1355  122a		       a9 10		      lda	#$10
   1356  122c		       2c 80 02 	      bit	SWCHA
   1357  122f		       d0 19		      BNE	.skipL0276
   1358  1231				   .condpart4
   1359  1231		       f8		      SED
   1360  1232		       18		      CLC
   1361  1233		       a5 95		      LDA	score+2
   1362  1235		       69 01		      ADC	#$01
   1363  1237		       85 95		      STA	score+2
   1364  1239		       a5 94		      LDA	score+1
   1365  123b		       69 00		      ADC	#$00
   1366  123d		       85 94		      STA	score+1
   1367  123f		       a5 93		      LDA	score
   1368  1241		       69 00		      ADC	#$00
   1369  1243		       85 93		      STA	score
   1370  1245		       d8		      CLD
   1371  1246		       a9 05		      LDA	#5
   1372  1248		       85 d4		      STA	delay_counter
   1373  124a				   .skipL0276
   1374  124a				   .
   1375  124a							; 
   1376  124a
   1377  124a				   .
   1378  124a							; 
   1379  124a
   1380  124a				   .L0277		;  asm
   1381  124a
   1382  124a		       f8		      sed		; Set the Decimal Mode Flag
   1383  124b
   1384  124b		       a5 a9		      lda	max_pub_level_bcd3	; Load the Accumulator
   1385  124d
   1386  124d		       c5 95		      cmp	_sc3	; Compare Memory and the Accumulator
   1387  124f
   1388  124f		       a5 a8		      lda	max_pub_level_bcd2	; Load the Accumulator
   1389  1251
   1390  1251		       e5 94		      sbc	_sc2	; Subtract With Carry
   1391  1253
   1392  1253		       a5 a7		      lda	max_pub_level_bcd1	; Load the Accumulator
   1393  1255
   1394  1255		       e5 93		      sbc	_sc1	; Subtract With Carry
   1395  1257
   1396  1257		       d8		      cld		; Clear the Decimal Flag
   1397  1258
   1398  1258		       b0 0c		      bcs	._Skip_Level_Reset	; Branch if Carry Set
   1399  125a
   1400  125a							; (goto label if carry is set)
   1401  125a
   1402  125a				   .L0278		;  score  =  1
   1403  125a
   1404  125a		       a9 01		      LDA	#$01
   1405  125c		       85 95		      STA	score+2
   1406  125e		       a9 00		      LDA	#$00
   1407  1260		       85 94		      STA	score+1
   1408  1262		       a9 00		      LDA	#$00
   1409  1264		       85 93		      STA	score
   1410  1266				   .
   1411  1266							; 
   1412  1266
   1413  1266				   ._Skip_Level_Reset
   1414  1266							; _Skip_Level_Reset
   1415  1266
   1416  1266				   .L0279		;  if _sc1  =	0  &&  _sc2  =	0  &&  _sc3  =	0 then _sc1  =	max_pub_level_bcd1  :  _sc2  =	max_pub_level_bcd2  :  _sc3  =	max_pub_level_bcd3
   1417  1266
   1418  1266		       a5 93		      LDA	_sc1
   1419  1268		       c9 00		      CMP	#0
   1420  126a		       d0 18		      BNE	.skipL0279
   1421  126c				   .condpart5
   1422  126c		       a5 94		      LDA	_sc2
   1423  126e		       c9 00		      CMP	#0
   1424  1270		       d0 12		      BNE	.skip5then
   1425  1272				   .condpart6
   1426  1272		       a5 95		      LDA	_sc3
   1427  1274		       c9 00		      CMP	#0
   1428  1276		       d0 0c		      BNE	.skip6then
   1429  1278				   .condpart7
   1430  1278		       a5 a7		      LDA	max_pub_level_bcd1
   1431  127a		       85 93		      STA	_sc1
   1432  127c		       a5 a8		      LDA	max_pub_level_bcd2
   1433  127e		       85 94		      STA	_sc2
   1434  1280		       a5 a9		      LDA	max_pub_level_bcd3
   1435  1282		       85 95		      STA	_sc3
   1436  1284				   .skip6then
   1437  1284				   .skip5then
   1438  1284				   .skipL0279
   1439  1284				   .
   1440  1284							; 
   1441  1284
   1442  1284				   .L0280		;  if switchselect then gamenumber  =	gamenumber  +  1  :  delay_counter  =  20  :  if gamenumber  >	2 then gamenumber  =  1
   1443  1284
   1444  1284		       a9 02		      lda	#2
   1445  1286		       2c 82 02 	      bit	SWCHB
   1446  1289		       d0 10		      BNE	.skipL0280
   1447  128b				   .condpart8
   1448  128b		       e6 a6		      INC	gamenumber
   1449  128d		       a9 14		      LDA	#20
   1450  128f		       85 d4		      STA	delay_counter
   1451  1291		       a9 02		      LDA	#2
   1452  1293		       c5 a6		      CMP	gamenumber
   1453  1295		       b0 04		      BCS	.skip8then
   1454  1297				   .condpart9
   1455  1297		       a9 01		      LDA	#1
   1456  1299		       85 a6		      STA	gamenumber
   1457  129b				   .skip8then
   1458  129b				   .skipL0280
   1459  129b				   .L0281		;  if !joy0fire then goto _titlescreen_menu
   1460  129b
   1461  129b		       24 0c		      bit	INPT4
   1462  129d		       10 03		      BPL	.skipL0281
   1463  129f				   .condpart10
   1464  129f		       4c 7c d1 	      jmp	._titlescreen_menu
   1465  12a2
   1466  12a2				   .skipL0281
   1467  12a2				   .
   1468  12a2							; 
   1469  12a2
   1470  12a2				   .L0282		;  WriteToBuffer  =  _sc1  :  WriteToBuffer  =  _sc2  :  WriteToBuffer  =  _sc3  :  WriteToBuffer  =  gamenumber  :  WriteSendBuffer  =  req_load  :  _Bit5_Request_Pending{5}  =  1
   1471  12a2
   1472  12a2		       a5 93		      LDA	_sc1
   1473  12a4		       8d f0 1f 	      STA	WriteToBuffer
   1474  12a7		       a5 94		      LDA	_sc2
   1475  12a9		       8d f0 1f 	      STA	WriteToBuffer
   1476  12ac		       a5 95		      LDA	_sc3
   1477  12ae		       8d f0 1f 	      STA	WriteToBuffer
   1478  12b1		       a5 a6		      LDA	gamenumber
   1479  12b3		       8d f0 1f 	      STA	WriteToBuffer
   1480  12b6		       a9 00		      LDA	#req_load
   1481  12b8		       8d f1 1f 	      STA	WriteSendBuffer
   1482  12bb		       a5 ec		      LDA	_Bit5_Request_Pending
   1483  12bd		       09 20		      ORA	#32
   1484  12bf		       85 ec		      STA	_Bit5_Request_Pending
   1485  12c1				   .
   1486  12c1							; 
   1487  12c1
   1488  12c1				   .L0283		;  player1y  =  player_min_y  :  score  =  0  :  _Bit4_Game_Over{4}  =  0
   1489  12c1
   1490  12c1		       a9 02		      LDA	#player_min_y
   1491  12c3		       85 86		      STA	player1y
   1492  12c5		       a9 00		      LDA	#$00
   1493  12c7		       85 95		      STA	score+2
   1494  12c9		       a9 00		      LDA	#$00
   1495  12cb		       85 94		      STA	score+1
   1496  12cd		       a9 00		      LDA	#$00
   1497  12cf		       85 93		      STA	score
   1498  12d1		       a5 ec		      LDA	_Bit4_Game_Over
   1499  12d3		       29 ef		      AND	#239
   1500  12d5		       85 ec		      STA	_Bit4_Game_Over
   1501  12d7				   .L0284		;  pfscore1  =  %00101010  :  pfscore2  =  255  :  pfscorecolor  =  _1C
   1502  12d7
   1503  12d7		       a9 2a		      LDA	#%00101010
   1504  12d9		       85 f2		      STA	pfscore1
   1505  12db		       a9 ff		      LDA	#255
   1506  12dd		       85 f3		      STA	pfscore2
   1507  12df		       a9 1c		      LDA	#_1C
   1508  12e1		       85 f4		      STA	pfscorecolor
   1509  12e3				   .
   1510  12e3							; 
   1511  12e3
   1512  12e3				   .
   1513  12e3							; 
   1514  12e3
   1515  12e3				   .L0285		;  asm
   1516  12e3
   1517  12e3		       a9 f0		      lda	#>(r_room_color_middle-132+pfres*pfwidth)
   1518  12e5
   1519  12e5		       85 f1		      sta	pfcolortable+1
   1520  12e7
   1521  12e7		       a9 6f		      lda	#<(r_room_color_middle-132+pfres*pfwidth)
   1522  12e9
   1523  12e9		       85 f0		      sta	pfcolortable
   1524  12eb
   1525  12eb				   .
   1526  12eb							; 
   1527  12eb
   1528  12eb				   .
   1529  12eb							; 
   1530  12eb
   1531  12eb				   .
   1532  12eb							; 
   1533  12eb
   1534  12eb				   .
   1535  12eb							; 
   1536  12eb
   1537  12eb				   .
   1538  12eb							; 
   1539  12eb
   1540  12eb				   .
   1541  12eb							; 
   1542  12eb
   1543  12eb				   .__Main_Loop
   1544  12eb							; __Main_Loop
   1545  12eb
   1546  12eb				   .L0286		;  COLUPF  =  r_room_color_top
   1547  12eb
   1548  12eb		       ad e2 f0 	      LDA	r_room_color_top
   1549  12ee		       85 08		      STA	COLUPF
   1550  12f0				   .L0287		;  NUSIZ1  =  $05
   1551  12f0
   1552  12f0		       a9 05		      LDA	#$05
   1553  12f2		       85 05		      STA	NUSIZ1
   1554  12f4				   .L0288		;  NUSIZ0  =  $10
   1555  12f4
   1556  12f4		       a9 10		      LDA	#$10
   1557  12f6		       85 04		      STA	NUSIZ0
   1558  12f8				   .L0289		;  COLUBK  =  _00
   1559  12f8
   1560  12f8		       a9 00		      LDA	#_00
   1561  12fa		       85 09		      STA	COLUBK
   1562  12fc				   .
   1563  12fc							; 
   1564  12fc
   1565  12fc				   .L0290		;  if switchreset then goto _Start
   1566  12fc
   1567  12fc		       a9 01		      lda	#1
   1568  12fe		       2c 82 02 	      bit	SWCHB
   1569  1301		       d0 03		      BNE	.skipL0290
   1570  1303				   .condpart11
   1571  1303		       4c 00 d1 	      jmp	._Start
   1572  1306
   1573  1306				   .skipL0290
   1574  1306				   .
   1575  1306							; 
   1576  1306
   1577  1306				   .L0291		;  if frame_counter{2} then player1: 
   1578  1306
   1579  1306		       a5 d5		      LDA	frame_counter
   1580  1308		       29 04		      AND	#4
   1581  130a		       f0 0c		      BEQ	.skipL0291
   1582  130c				   .condpart12
   1583  130c		       a2 e4		      LDX	#<player12then_1
   1584  130e		       86 8c		      STX	player1pointerlo
   1585  1310		       a9 fe		      LDA	#>player12then_1
   1586  1312		       85 8d		      STA	player1pointerhi
   1587  1314		       a9 07		      LDA	#7
   1588  1316		       85 8f		      STA	player1height
   1589  1318				   .skipL0291
   1590  1318				   .L0292		;  if ! frame_counter{2} then player1:
   1591  1318
   1592  1318		       a5 d5		      LDA	frame_counter
   1593  131a		       29 04		      AND	#4
   1594  131c		       d0 0c		      BNE	.skipL0292
   1595  131e				   .condpart13
   1596  131e		       a2 ec		      LDX	#<player13then_1
   1597  1320		       86 8c		      STX	player1pointerlo
   1598  1322		       a9 fe		      LDA	#>player13then_1
   1599  1324		       85 8d		      STA	player1pointerhi
   1600  1326		       a9 07		      LDA	#7
   1601  1328		       85 8f		      STA	player1height
   1602  132a				   .skipL0292
   1603  132a				   .
   1604  132a							; 
   1605  132a
   1606  132a				   .L0293		;  on roommate_type goto _roommate_Enemy_def _roommate_Air_Missile_def _roommate_Fuel_def _roommate_Soldier_def
   1607  132a
   1608  132a		       a6 de		      LDX	roommate_type
   1609  132c		       bd 35 d3 	      LDA	.L0293jumptablehi,x
   1610  132f		       48		      PHA
   1611  1330		       bd 39 d3 	      LDA	.L0293jumptablelo,x
   1612  1333		       48		      PHA
   1613  1334		       60		      RTS
   1614  1335				   .L0293jumptablehi
   1615  1335		       d3		      .byte.b	>(._roommate_Enemy_def-1)
   1616  1336		       d3		      .byte.b	>(._roommate_Air_Missile_def-1)
   1617  1337		       d3		      .byte.b	>(._roommate_Fuel_def-1)
   1618  1338		       d3		      .byte.b	>(._roommate_Soldier_def-1)
   1619  1339				   .L0293jumptablelo
   1620  1339		       3c		      .byte.b	<(._roommate_Enemy_def-1)
   1621  133a		       63		      .byte.b	<(._roommate_Air_Missile_def-1)
   1622  133b		       72		      .byte.b	<(._roommate_Fuel_def-1)
   1623  133c		       81		      .byte.b	<(._roommate_Soldier_def-1)
   1624  133d				   .
   1625  133d							; 
   1626  133d
   1627  133d				   ._roommate_Enemy_def
   1628  133d							; _roommate_Enemy_def
   1629  133d
   1630  133d				   .L0294		;  if frame_counter{2} then player0: 
   1631  133d
   1632  133d		       a5 d5		      LDA	frame_counter
   1633  133f		       29 04		      AND	#4
   1634  1341		       f0 0c		      BEQ	.skipL0294
   1635  1343				   .condpart14
   1636  1343		       a2 f4		      LDX	#<player14then_0
   1637  1345		       86 8a		      STX	player0pointerlo
   1638  1347		       a9 fe		      LDA	#>player14then_0
   1639  1349		       85 8b		      STA	player0pointerhi
   1640  134b		       a9 06		      LDA	#6
   1641  134d		       85 8e		      STA	player0height
   1642  134f				   .skipL0294
   1643  134f				   .L0295		;  if !frame_counter{2} then player0: 
   1644  134f
   1645  134f		       a5 d5		      LDA	frame_counter
   1646  1351		       29 04		      AND	#4
   1647  1353		       d0 0c		      BNE	.skipL0295
   1648  1355				   .condpart15
   1649  1355		       a2 00		      LDX	#<player15then_0
   1650  1357		       86 8a		      STX	player0pointerlo
   1651  1359		       a9 ff		      LDA	#>player15then_0
   1652  135b		       85 8b		      STA	player0pointerhi
   1653  135d		       a9 06		      LDA	#6
   1654  135f		       85 8e		      STA	player0height
   1655  1361				   .skipL0295
   1656  1361				   .L0296		;  goto _roommate_End_def
   1657  1361
   1658  1361		       4c a6 d3 	      jmp	._roommate_End_def
   1659  1364
   1660  1364				   .
   1661  1364							; 
   1662  1364
   1663  1364				   ._roommate_Air_Missile_def
   1664  1364							; _roommate_Air_Missile_def
   1665  1364
   1666  1364				   .L0297		;  player0: 
   1667  1364
   1668  1364		       a2 07		      LDX	#<playerL0297_0
   1669  1366		       86 8a		      STX	player0pointerlo
   1670  1368		       a9 ff		      LDA	#>playerL0297_0
   1671  136a		       85 8b		      STA	player0pointerhi
   1672  136c		       a9 0b		      LDA	#11
   1673  136e		       85 8e		      STA	player0height
   1674  1370				   .L0298		;  goto _roommate_End_def
   1675  1370
   1676  1370		       4c a6 d3 	      jmp	._roommate_End_def
   1677  1373
   1678  1373				   .
   1679  1373							; 
   1680  1373
   1681  1373				   ._roommate_Fuel_def
   1682  1373							; _roommate_Fuel_def
   1683  1373
   1684  1373				   .L0299		;  player0: 
   1685  1373
   1686  1373		       a2 13		      LDX	#<playerL0299_0
   1687  1375		       86 8a		      STX	player0pointerlo
   1688  1377		       a9 ff		      LDA	#>playerL0299_0
   1689  1379		       85 8b		      STA	player0pointerhi
   1690  137b		       a9 18		      LDA	#24
   1691  137d		       85 8e		      STA	player0height
   1692  137f				   .L0300		;  goto _roommate_End_def
   1693  137f
   1694  137f		       4c a6 d3 	      jmp	._roommate_End_def
   1695  1382
   1696  1382				   .
   1697  1382							; 
   1698  1382
   1699  1382				   ._roommate_Soldier_def
   1700  1382							; _roommate_Soldier_def
   1701  1382
   1702  1382				   .L0301		;  if frame_counter{2} then player0: 
   1703  1382
   1704  1382		       a5 d5		      LDA	frame_counter
   1705  1384		       29 04		      AND	#4
   1706  1386		       f0 0c		      BEQ	.skipL0301
   1707  1388				   .condpart16
   1708  1388		       a2 2c		      LDX	#<player16then_0
   1709  138a		       86 8a		      STX	player0pointerlo
   1710  138c		       a9 ff		      LDA	#>player16then_0
   1711  138e		       85 8b		      STA	player0pointerhi
   1712  1390		       a9 03		      LDA	#3
   1713  1392		       85 8e		      STA	player0height
   1714  1394				   .skipL0301
   1715  1394				   .L0302		;  if !frame_counter{2} then player0: 
   1716  1394
   1717  1394		       a5 d5		      LDA	frame_counter
   1718  1396		       29 04		      AND	#4
   1719  1398		       d0 0c		      BNE	.skipL0302
   1720  139a				   .condpart17
   1721  139a		       a2 30		      LDX	#<player17then_0
   1722  139c		       86 8a		      STX	player0pointerlo
   1723  139e		       a9 ff		      LDA	#>player17then_0
   1724  13a0		       85 8b		      STA	player0pointerhi
   1725  13a2		       a9 03		      LDA	#3
   1726  13a4		       85 8e		      STA	player0height
   1727  13a6				   .skipL0302
   1728  13a6				   ._roommate_End_def
   1729  13a6							; _roommate_End_def
   1730  13a6
   1731  13a6				   .
   1732  13a6							; 
   1733  13a6
   1734  13a6				   .
   1735  13a6							; 
   1736  13a6
   1737  13a6				   .L0303		;  if !frame_counter{4} then _Skip_Wall_Movement
   1738  13a6
   1739  13a6		       a5 d5		      LDA	frame_counter
   1740  13a8		       29 10		      AND	#16
   1741  13aa					      if	((* - ._Skip_Wall_Movement) < 127) && ((* - ._Skip_Wall_Movement) > -128)
   1742  13aa		       f0 2d		      BEQ	._Skip_Wall_Movement
   1743  13ac				  -	      else
   1744  13ac				  -	      bne	.2skip_Skip_Wall_Movement
   1745  13ac				  -	      jmp	._Skip_Wall_Movement
   1746  13ac				  -.2skip_Skip_Wall_Movement
   1747  13ac					      endif
   1748  13ac				   .L0304		;  if extra_wall_type	<  2 then _Finish_Interior_Movement
   1749  13ac
   1750  13ac		       a5 ad		      LDA	extra_wall_type
   1751  13ae		       c9 02		      CMP	#2
   1752  13b0					      if	((* - ._Finish_Interior_Movement) < 127) && ((* - ._Finish_Interior_Movement) > -128)
   1753  13b0		       90 51		      bcc	._Finish_Interior_Movement
   1754  13b2				  -	      else
   1755  13b2				  -	      bcs	.3skip_Finish_Interior_Movement
   1756  13b2				  -	      jmp	._Finish_Interior_Movement
   1757  13b2				  -.3skip_Finish_Interior_Movement
   1758  13b2					      endif
   1759  13b2				   .L0305		;  if _Bit1_Wall_Dir{1} then extra_wall_move_x  =  extra_wall_move_x  -  1 else extra_wall_move_x  =  extra_wall_move_x  +  1
   1760  13b2
   1761  13b2		       a5 ec		      LDA	_Bit1_Wall_Dir
   1762  13b4		       29 02		      AND	#2
   1763  13b6		       f0 05		      BEQ	.skipL0305
   1764  13b8				   .condpart18
   1765  13b8		       c6 dc		      DEC	extra_wall_move_x
   1766  13ba		       4c bf d3 	      jmp	.skipelse0
   1767  13bd				   .skipL0305
   1768  13bd		       e6 dc		      INC	extra_wall_move_x
   1769  13bf				   .skipelse0
   1770  13bf				   .L0306		;  if extra_wall_move_x  =  r_extra_wall_type_and_range then _Bit1_Wall_Dir{1}  =  1
   1771  13bf
   1772  13bf		       a5 dc		      LDA	extra_wall_move_x
   1773  13c1		       cd eb f0 	      CMP	r_extra_wall_type_and_range
   1774  13c4		       d0 06		      BNE	.skipL0306
   1775  13c6				   .condpart19
   1776  13c6		       a5 ec		      LDA	_Bit1_Wall_Dir
   1777  13c8		       09 02		      ORA	#2
   1778  13ca		       85 ec		      STA	_Bit1_Wall_Dir
   1779  13cc				   .skipL0306
   1780  13cc				   .L0307		;  if !extra_wall_move_x then _Bit1_Wall_Dir{1}  =  0
   1781  13cc
   1782  13cc		       a5 dc		      LDA	extra_wall_move_x
   1783  13ce		       d0 06		      BNE	.skipL0307
   1784  13d0				   .condpart20
   1785  13d0		       a5 ec		      LDA	_Bit1_Wall_Dir
   1786  13d2		       29 fd		      AND	#253
   1787  13d4		       85 ec		      STA	_Bit1_Wall_Dir
   1788  13d6				   .skipL0307
   1789  13d6				   .L0308		;  goto _Finish_Interior_Movement
   1790  13d6
   1791  13d6		       4c 03 d4 	      jmp	._Finish_Interior_Movement
   1792  13d9
   1793  13d9				   ._Skip_Wall_Movement
   1794  13d9							; _Skip_Wall_Movement
   1795  13d9
   1796  13d9				   .
   1797  13d9							; 
   1798  13d9
   1799  13d9				   .L0309		;  if r_roommate_type_and_range  <  4 then _Finish_Interior_Movement
   1800  13d9
   1801  13d9		       ad e8 f0 	      LDA	r_roommate_type_and_range
   1802  13dc		       c9 04		      CMP	#4
   1803  13de					      if	((* - ._Finish_Interior_Movement) < 127) && ((* - ._Finish_Interior_Movement) > -128)
   1804  13de		       90 23		      bcc	._Finish_Interior_Movement
   1805  13e0				  -	      else
   1806  13e0				  -	      bcs	.4skip_Finish_Interior_Movement
   1807  13e0				  -	      jmp	._Finish_Interior_Movement
   1808  13e0				  -.4skip_Finish_Interior_Movement
   1809  13e0					      endif
   1810  13e0				   .L0310		;  if _Bit0_roommate_Dir{0} then roommate_move_x  =  roommate_move_x  -  1 else roommate_move_x  =  roommate_move_x  +  1
   1811  13e0
   1812  13e0		       a5 ec		      LDA	_Bit0_roommate_Dir
   1813  13e2		       4a		      LSR
   1814  13e3		       90 05		      BCC	.skipL0310
   1815  13e5				   .condpart21
   1816  13e5		       c6 dd		      DEC	roommate_move_x
   1817  13e7		       4c ec d3 	      jmp	.skipelse1
   1818  13ea				   .skipL0310
   1819  13ea		       e6 dd		      INC	roommate_move_x
   1820  13ec				   .skipelse1
   1821  13ec				   .L0311		;  if roommate_move_x	=  r_roommate_type_and_range then _Bit0_roommate_Dir{0}  =  1
   1822  13ec
   1823  13ec		       a5 dd		      LDA	roommate_move_x
   1824  13ee		       cd e8 f0 	      CMP	r_roommate_type_and_range
   1825  13f1		       d0 06		      BNE	.skipL0311
   1826  13f3				   .condpart22
   1827  13f3		       a5 ec		      LDA	_Bit0_roommate_Dir
   1828  13f5		       09 01		      ORA	#1
   1829  13f7		       85 ec		      STA	_Bit0_roommate_Dir
   1830  13f9				   .skipL0311
   1831  13f9				   .L0312		;  if !roommate_move_x then _Bit0_roommate_Dir{0}  =  0
   1832  13f9
   1833  13f9		       a5 dd		      LDA	roommate_move_x
   1834  13fb		       d0 06		      BNE	.skipL0312
   1835  13fd				   .condpart23
   1836  13fd		       a5 ec		      LDA	_Bit0_roommate_Dir
   1837  13ff		       29 fe		      AND	#254
   1838  1401		       85 ec		      STA	_Bit0_roommate_Dir
   1839  1403				   .skipL0312
   1840  1403				   .
   1841  1403							; 
   1842  1403
   1843  1403				   ._Finish_Interior_Movement
   1844  1403							; _Finish_Interior_Movement
   1845  1403
   1846  1403				   .
   1847  1403							; 
   1848  1403
   1849  1403				   .L0313		;  frame_counter  =  frame_counter  +	1
   1850  1403
   1851  1403		       e6 d5		      INC	frame_counter
   1852  1405				   .
   1853  1405							; 
   1854  1405
   1855  1405				   .
   1856  1405							; 
   1857  1405
   1858  1405				   .L0314		;  if r_extra_wall_startpos_x	=  200 then _Skip_extra_Wall
   1859  1405
   1860  1405		       ad ee f0 	      LDA	r_extra_wall_startpos_x
   1861  1408		       c9 c8		      CMP	#200
   1862  140a					      if	((* - ._Skip_extra_Wall) < 127) && ((* - ._Skip_extra_Wall) > -128)
   1863  140a		       f0 2d		      BEQ	._Skip_extra_Wall
   1864  140c				  -	      else
   1865  140c				  -	      bne	.5skip_Skip_extra_Wall
   1866  140c				  -	      jmp	._Skip_extra_Wall
   1867  140c				  -.5skip_Skip_extra_Wall
   1868  140c					      endif
   1869  140c				   .L0315		;  ballx  =  r_extra_wall_startpos_x  +  extra_wall_move_x
   1870  140c
   1871  140c		       ad ee f0 	      LDA	r_extra_wall_startpos_x
   1872  140f		       18		      CLC
   1873  1410		       65 dc		      ADC	extra_wall_move_x
   1874  1412		       85 84		      STA	ballx
   1875  1414				   .L0316		;  if extra_wall_type	=  1  &&  frame_counter  <  r_extra_wall_type_and_range then bally  =  0 else bally  =	r_extra_wall_startpos_y
   1876  1414
   1877  1414		       a5 ad		      LDA	extra_wall_type
   1878  1416		       c9 01		      CMP	#1
   1879  1418		       d0 0e		      BNE	.skipL0316
   1880  141a				   .condpart24
   1881  141a		       a5 d5		      LDA	frame_counter
   1882  141c		       cd eb f0 	      CMP	r_extra_wall_type_and_range
   1883  141f		       b0 07		      BCS	.skip24then
   1884  1421				   .condpart25
   1885  1421		       a9 00		      LDA	#0
   1886  1423		       85 89		      STA	bally
   1887  1425		       4c 2d d4 	      jmp	.skipelse2
   1888  1428				   .skip24then
   1889  1428				   .skipL0316
   1890  1428		       ad ef f0 	      LDA	r_extra_wall_startpos_y
   1891  142b		       85 89		      STA	bally
   1892  142d				   .skipelse2
   1893  142d				   .L0317		;  ballheight	=  r_extra_wall_height
   1894  142d
   1895  142d		       ad ed f0 	      LDA	r_extra_wall_height
   1896  1430		       85 92		      STA	ballheight
   1897  1432				   .L0318		;  CTRLPF  =  r_extra_wall_width  |  1
   1898  1432
   1899  1432		       ad ec f0 	      LDA	r_extra_wall_width
   1900  1435		       09 01		      ORA	#1
   1901  1437		       85 0a		      STA	CTRLPF
   1902  1439				   ._Skip_extra_Wall
   1903  1439							; _Skip_extra_Wall
   1904  1439
   1905  1439				   .
   1906  1439							; 
   1907  1439
   1908  1439				   .L0319		;  if !_Bit3_Ball_Shot_Moving{3} then _Skip_ball_shot
   1909  1439
   1910  1439		       a5 ec		      LDA	_Bit3_Ball_Shot_Moving
   1911  143b		       29 08		      AND	#8
   1912  143d					      if	((* - ._Skip_ball_shot) < 127) && ((* - ._Skip_ball_shot) > -128)
   1913  143d		       f0 08		      BEQ	._Skip_ball_shot
   1914  143f				  -	      else
   1915  143f				  -	      bne	.6skip_Skip_ball_shot
   1916  143f				  -	      jmp	._Skip_ball_shot
   1917  143f				  -.6skip_Skip_ball_shot
   1918  143f					      endif
   1919  143f				   .L0320		;  ballheight	=  2
   1920  143f
   1921  143f		       a9 02		      LDA	#2
   1922  1441		       85 92		      STA	ballheight
   1923  1443				   .L0321		;  CTRLPF  =  %00010001
   1924  1443
   1925  1443		       a9 11		      LDA	#%00010001
   1926  1445		       85 0a		      STA	CTRLPF
   1927  1447				   ._Skip_ball_shot
   1928  1447							; _Skip_ball_shot
   1929  1447
   1930  1447				   .
   1931  1447							; 
   1932  1447
   1933  1447				   .
   1934  1447							; 
   1935  1447
   1936  1447				   .L0322		;  if r_roommate_startpos_y  =  200 then _Skip_enemy
   1937  1447
   1938  1447		       ad ea f0 	      LDA	r_roommate_startpos_y
   1939  144a		       c9 c8		      CMP	#200
   1940  144c					      if	((* - ._Skip_enemy) < 127) && ((* - ._Skip_enemy) > -128)
   1941  144c		       f0 0d		      BEQ	._Skip_enemy
   1942  144e				  -	      else
   1943  144e				  -	      bne	.7skip_Skip_enemy
   1944  144e				  -	      jmp	._Skip_enemy
   1945  144e				  -.7skip_Skip_enemy
   1946  144e					      endif
   1947  144e				   .L0323		;  player0x  =  r_roommate_startpos_x	+  roommate_move_x
   1948  144e
   1949  144e		       ad e9 f0 	      LDA	r_roommate_startpos_x
   1950  1451		       18		      CLC
   1951  1452		       65 dd		      ADC	roommate_move_x
   1952  1454		       85 80		      STA	player0x
   1953  1456				   .L0324		;  player0y  =  r_roommate_startpos_y
   1954  1456
   1955  1456		       ad ea f0 	      LDA	r_roommate_startpos_y
   1956  1459		       85 85		      STA	player0y
   1957  145b				   ._Skip_enemy
   1958  145b							; _Skip_enemy
   1959  145b
   1960  145b				   .
   1961  145b							; 
   1962  145b
   1963  145b				   .
   1964  145b							; 
   1965  145b
   1966  145b				   .
   1967  145b							; 
   1968  145b
   1969  145b				   .
   1970  145b							; 
   1971  145b
   1972  145b				   .L0325		;  if delay_counter  >  0 then delay_counter  =  delay_counter  -  1  :  goto _skip_game_action
   1973  145b
   1974  145b		       a9 00		      LDA	#0
   1975  145d		       c5 d4		      CMP	delay_counter
   1976  145f		       b0 05		      BCS	.skipL0325
   1977  1461				   .condpart26
   1978  1461		       c6 d4		      DEC	delay_counter
   1979  1463		       4c 7f d9 	      jmp	._skip_game_action
   1980  1466
   1981  1466				   .skipL0325
   1982  1466				   .
   1983  1466							; 
   1984  1466
   1985  1466				   .L0326		;  if ReceiveBufferSize  >  response_size_minus_1 then goto _Change_Room
   1986  1466
   1987  1466		       a9 1a		      LDA	#response_size_minus_1
   1988  1468		       cd f3 1f 	      CMP	ReceiveBufferSize
   1989  146b		       b0 03		      BCS	.skipL0326
   1990  146d				   .condpart27
   1991  146d		       4c ab db 	      jmp	._Change_Room
   1992  1470
   1993  1470				   .skipL0326
   1994  1470				   .
   1995  1470							; 
   1996  1470
   1997  1470				   .L0327		;  if _Bit5_Request_Pending{5}  ||  _Bit4_Game_Over{4} then goto _skip_game_action
   1998  1470
   1999  1470		       a5 ec		      LDA	_Bit5_Request_Pending
   2000  1472		       29 20		      AND	#32
   2001  1474		       f0 03		      BEQ	.skipL0327
   2002  1476				   .condpart28
   2003  1476		       4c 7f d4 	      jmp	.condpart29
   2004  1479				   .skipL0327
   2005  1479		       a5 ec		      LDA	_Bit4_Game_Over
   2006  147b		       29 10		      AND	#16
   2007  147d		       f0 03		      BEQ	.skip3OR
   2008  147f				   .condpart29
   2009  147f		       4c 7f d9 	      jmp	._skip_game_action
   2010  1482
   2011  1482				   .skip3OR
   2012  1482				   .
   2013  1482							; 
   2014  1482
   2015  1482				   .L0328		;  if !_Bit2_Level_finished{2} then _game_action
   2016  1482
   2017  1482		       a5 ec		      LDA	_Bit2_Level_finished
   2018  1484		       29 04		      AND	#4
   2019  1486					      if	((* - ._game_action) < 127) && ((* - ._game_action) > -128)
   2020  1486		       f0 5d		      BEQ	._game_action
   2021  1488				  -	      else
   2022  1488				  -	      bne	.8skip_game_action
   2023  1488				  -	      jmp	._game_action
   2024  1488				  -.8skip_game_action
   2025  1488					      endif
   2026  1488				   .
   2027  1488							; 
   2028  1488
   2029  1488				   .
   2030  1488							; 
   2031  1488
   2032  1488				   .L0329		;  if pfscore2 then pfscore2  =  pfscore2  /  2  :  score  =  score  +  100  :  goto _bonus_sound_delay
   2033  1488
   2034  1488		       a5 f3		      LDA	pfscore2
   2035  148a		       f0 17		      BEQ	.skipL0329
   2036  148c				   .condpart30
   2037  148c		       a5 f3		      LDA	pfscore2
   2038  148e		       4a		      lsr
   2039  148f		       85 f3		      STA	pfscore2
   2040  1491		       f8		      SED
   2041  1492		       18		      CLC
   2042  1493		       a5 94		      LDA	score+1
   2043  1495		       69 01		      ADC	#$01
   2044  1497		       85 94		      STA	score+1
   2045  1499		       a5 93		      LDA	score
   2046  149b		       69 00		      ADC	#$00
   2047  149d		       85 93		      STA	score
   2048  149f		       d8		      CLD
   2049  14a0		       4c d2 d4 	      jmp	._bonus_sound_delay
   2050  14a3
   2051  14a3				   .skipL0329
   2052  14a3				   .
   2053  14a3							; 
   2054  14a3
   2055  14a3				   .
   2056  14a3							; 
   2057  14a3
   2058  14a3				   .L0330		;  if pfscore1 then pfscore1  =  pfscore1  /  4  :  score  =  score  +  200  :  goto _bonus_sound_delay
   2059  14a3
   2060  14a3		       a5 f2		      LDA	pfscore1
   2061  14a5		       f0 18		      BEQ	.skipL0330
   2062  14a7				   .condpart31
   2063  14a7		       a5 f2		      LDA	pfscore1
   2064  14a9		       4a		      lsr
   2065  14aa		       4a		      lsr
   2066  14ab		       85 f2		      STA	pfscore1
   2067  14ad		       f8		      SED
   2068  14ae		       18		      CLC
   2069  14af		       a5 94		      LDA	score+1
   2070  14b1		       69 02		      ADC	#$02
   2071  14b3		       85 94		      STA	score+1
   2072  14b5		       a5 93		      LDA	score
   2073  14b7		       69 00		      ADC	#$00
   2074  14b9		       85 93		      STA	score
   2075  14bb		       d8		      CLD
   2076  14bc		       4c d2 d4 	      jmp	._bonus_sound_delay
   2077  14bf
   2078  14bf				   .skipL0330
   2079  14bf				   .L0331		;  if joy0fire then _Bit2_Level_finished{2}  =  0  :  goto _Level_Up else goto _skip_game_action
   2080  14bf
   2081  14bf		       24 0c		      bit	INPT4
   2082  14c1		       30 0c		      BMI	.skipL0331
   2083  14c3				   .condpart32
   2084  14c3		       a5 ec		      LDA	_Bit2_Level_finished
   2085  14c5		       29 fb		      AND	#251
   2086  14c7		       85 ec		      STA	_Bit2_Level_finished
   2087  14c9		       4c 35 db 	      jmp	._Level_Up
   2088  14cc		       4c d2 d4 	      jmp	.skipelse3
   2089  14cf				   .skipL0331
   2090  14cf		       4c 7f d9 	      jmp	._skip_game_action
   2091  14d2
   2092  14d2				   .skipelse3
   2093  14d2				   ._bonus_sound_delay
   2094  14d2							; _bonus_sound_delay
   2095  14d2
   2096  14d2				   .L0332		;  _Ch0_Sound	=  3  :  _Ch0_Duration	=  1  :  _Ch0_Counter  =  0
   2097  14d2
   2098  14d2		       a9 03		      LDA	#3
   2099  14d4		       85 d9		      STA	_Ch0_Sound
   2100  14d6		       a9 01		      LDA	#1
   2101  14d8		       85 da		      STA	_Ch0_Duration
   2102  14da		       a9 00		      LDA	#0
   2103  14dc		       85 db		      STA	_Ch0_Counter
   2104  14de				   .L0333		;  delay_counter  =  25
   2105  14de
   2106  14de		       a9 19		      LDA	#25
   2107  14e0		       85 d4		      STA	delay_counter
   2108  14e2				   .
   2109  14e2							; 
   2110  14e2
   2111  14e2				   .L0334		;  goto _skip_game_action
   2112  14e2
   2113  14e2		       4c 7f d9 	      jmp	._skip_game_action
   2114  14e5
   2115  14e5				   .
   2116  14e5							; 
   2117  14e5
   2118  14e5				   .
   2119  14e5							; 
   2120  14e5
   2121  14e5				   ._game_action
   2122  14e5							; _game_action
   2123  14e5
   2124  14e5				   .
   2125  14e5							; 
   2126  14e5
   2127  14e5				   .L0335		;  if frame_counter then _Skip_dec_game_counter
   2128  14e5
   2129  14e5		       a5 d5		      LDA	frame_counter
   2130  14e7					      if	((* - ._Skip_dec_game_counter) < 127) && ((* - ._Skip_dec_game_counter) > -128)
   2131  14e7		       d0 2b		      BNE	._Skip_dec_game_counter
   2132  14e9				  -	      else
   2133  14e9				  -	      beq	.9skip_Skip_dec_game_counter
   2134  14e9				  -	      jmp	._Skip_dec_game_counter
   2135  14e9				  -.9skip_Skip_dec_game_counter
   2136  14e9					      endif
   2137  14e9				   .
   2138  14e9							; 
   2139  14e9
   2140  14e9				   .L0336		;  if !pfscore2 then _Decrease_live_counter
   2141  14e9
   2142  14e9		       a5 f3		      LDA	pfscore2
   2143  14eb					      if	((* - ._Decrease_live_counter) < 127) && ((* - ._Decrease_live_counter) > -128)
   2144  14eb		       f0 08		      BEQ	._Decrease_live_counter
   2145  14ed				  -	      else
   2146  14ed				  -	      bne	.10skip_Decrease_live_counter
   2147  14ed				  -	      jmp	._Decrease_live_counter
   2148  14ed				  -.10skip_Decrease_live_counter
   2149  14ed					      endif
   2150  14ed				   .L0337		;  pfscore2  =  pfscore2  /  2
   2151  14ed
   2152  14ed		       a5 f3		      LDA	pfscore2
   2153  14ef		       4a		      lsr
   2154  14f0		       85 f3		      STA	pfscore2
   2155  14f2				   .L0338		;  goto _Skip_dec_game_counter
   2156  14f2
   2157  14f2		       4c 14 d5 	      jmp	._Skip_dec_game_counter
   2158  14f5
   2159  14f5				   ._Decrease_live_counter
   2160  14f5							; _Decrease_live_counter
   2161  14f5
   2162  14f5				   .L0339		;  pfscore1  =  pfscore1  /  4
   2163  14f5
   2164  14f5		       a5 f2		      LDA	pfscore1
   2165  14f7		       4a		      lsr
   2166  14f8		       4a		      lsr
   2167  14f9		       85 f2		      STA	pfscore1
   2168  14fb				   .
   2169  14fb							; 
   2170  14fb
   2171  14fb				   .L0340		;  _Ch0_Sound	=  4  :  _Ch0_Duration	=  1  :  _Ch0_Counter  =  0
   2172  14fb
   2173  14fb		       a9 04		      LDA	#4
   2174  14fd		       85 d9		      STA	_Ch0_Sound
   2175  14ff		       a9 01		      LDA	#1
   2176  1501		       85 da		      STA	_Ch0_Duration
   2177  1503		       a9 00		      LDA	#0
   2178  1505		       85 db		      STA	_Ch0_Counter
   2179  1507				   .L0341		;  if !pfscore1 then goto _Set_Game_Over else goto _Reset_Level
   2180  1507
   2181  1507		       a5 f2		      LDA	pfscore1
   2182  1509		       d0 06		      BNE	.skipL0341
   2183  150b				   .condpart33
   2184  150b		       4c de da 	      jmp	._Set_Game_Over
   2185  150e		       4c 14 d5 	      jmp	.skipelse4
   2186  1511				   .skipL0341
   2187  1511		       4c fb da 	      jmp	._Reset_Level
   2188  1514
   2189  1514				   .skipelse4
   2190  1514				   ._Skip_dec_game_counter
   2191  1514							; _Skip_dec_game_counter
   2192  1514
   2193  1514				   .
   2194  1514							; 
   2195  1514
   2196  1514				   .
   2197  1514							; 
   2198  1514
   2199  1514				   .
   2200  1514							; 
   2201  1514
   2202  1514				   .L0342		;  if player0y  =  200 then goto __Skip_Enemy_Fire
   2203  1514
   2204  1514		       a5 85		      LDA	player0y
   2205  1516		       c9 c8		      CMP	#200
   2206  1518		       d0 03		      BNE	.skipL0342
   2207  151a				   .condpart34
   2208  151a		       4c a9 d5 	      jmp	.__Skip_Enemy_Fire
   2209  151d
   2210  151d				   .skipL0342
   2211  151d				   .L0343		;  if _Bit3_Ball_Shot_Moving{3}  ||  roommate_type then goto __Skip_Enemy_Fire
   2212  151d
   2213  151d		       a5 ec		      LDA	_Bit3_Ball_Shot_Moving
   2214  151f		       29 08		      AND	#8
   2215  1521		       f0 03		      BEQ	.skipL0343
   2216  1523				   .condpart35
   2217  1523		       4c 2a d5 	      jmp	.condpart36
   2218  1526				   .skipL0343
   2219  1526		       a5 de		      LDA	roommate_type
   2220  1528		       f0 03		      BEQ	.skip4OR
   2221  152a				   .condpart36
   2222  152a		       4c a9 d5 	      jmp	.__Skip_Enemy_Fire
   2223  152d
   2224  152d				   .skip4OR
   2225  152d				   .
   2226  152d							; 
   2227  152d
   2228  152d				   .L0344		;  _Bit3_Ball_Shot_Moving{3}  =  1  :	_BitOp_Ball_Shot_Dir  =  0  :  Bally_velocity  =  0.0  :  q  =	0
   2229  152d
   2230  152d		       a5 ec		      LDA	_Bit3_Ball_Shot_Moving
   2231  152f		       09 08		      ORA	#8
   2232  1531		       85 ec		      STA	_Bit3_Ball_Shot_Moving
   2233  1533		       a9 00		      LDA	#0
   2234  1535		       85 d6		      STA	_BitOp_Ball_Shot_Dir
   2235  1537		       a2 00		      LDX	#0
   2236  1539		       86 e4		      STX	q
   2237  153b		       a9 00		      LDA	#0
   2238  153d		       85 e3		      STA	Bally_velocity
   2239  153f		       a9 00		      LDA	#0
   2240  1541		       85 e4		      STA	q
   2241  1543				   .
   2242  1543							; 
   2243  1543
   2244  1543				   .L0345		;  ballx  =  player0x	+  4  :  bally	=  player0y  -	5
   2245  1543
   2246  1543		       a5 80		      LDA	player0x
   2247  1545		       18		      CLC
   2248  1546		       69 04		      ADC	#4
   2249  1548		       85 84		      STA	ballx
   2250  154a		       a5 85		      LDA	player0y
   2251  154c		       38		      SEC
   2252  154d		       e9 05		      SBC	#5
   2253  154f		       85 89		      STA	bally
   2254  1551				   .
   2255  1551							; 
   2256  1551
   2257  1551				   .
   2258  1551							; 
   2259  1551
   2260  1551				   .L0346		;  if _Ch0_Sound  <>  3 then _Ch0_Sound  =  2	:  _Ch0_Duration  =  1	:  _Ch0_Counter  =  0
   2261  1551
   2262  1551		       a5 d9		      LDA	_Ch0_Sound
   2263  1553		       c9 03		      CMP	#3
   2264  1555		       f0 0c		      BEQ	.skipL0346
   2265  1557				   .condpart37
   2266  1557		       a9 02		      LDA	#2
   2267  1559		       85 d9		      STA	_Ch0_Sound
   2268  155b		       a9 01		      LDA	#1
   2269  155d		       85 da		      STA	_Ch0_Duration
   2270  155f		       a9 00		      LDA	#0
   2271  1561		       85 db		      STA	_Ch0_Counter
   2272  1563				   .skipL0346
   2273  1563				   .
   2274  1563							; 
   2275  1563
   2276  1563				   .L0347		;  if player1x  >  player0x then _Bit2_Ball_Shot_Dir_Right1{2}  =  1 else _Bit0_Ball_Shot_Dir_Left1{0}  =  1
   2277  1563
   2278  1563		       a5 80		      LDA	player0x
   2279  1565		       c5 81		      CMP	player1x
   2280  1567		       b0 09		      BCS	.skipL0347
   2281  1569				   .condpart38
   2282  1569		       a5 d6		      LDA	_Bit2_Ball_Shot_Dir_Right1
   2283  156b		       09 04		      ORA	#4
   2284  156d		       85 d6		      STA	_Bit2_Ball_Shot_Dir_Right1
   2285  156f		       4c 78 d5 	      jmp	.skipelse5
   2286  1572				   .skipL0347
   2287  1572		       a5 d6		      LDA	_Bit0_Ball_Shot_Dir_Left1
   2288  1574		       09 01		      ORA	#1
   2289  1576		       85 d6		      STA	_Bit0_Ball_Shot_Dir_Left1
   2290  1578				   .skipelse5
   2291  1578				   .L0348		;  if !_Bit2_Ball_Shot_Dir_Right1{2} then __Skip_Additional_Right
   2292  1578
   2293  1578		       a5 d6		      LDA	_Bit2_Ball_Shot_Dir_Right1
   2294  157a		       29 04		      AND	#4
   2295  157c					      if	((* - .__Skip_Additional_Right) < 127) && ((* - .__Skip_Additional_Right) > -128)
   2296  157c		       f0 13		      BEQ	.__Skip_Additional_Right
   2297  157e				  -	      else
   2298  157e				  -	      bne	.11skip__Skip_Additional_Right
   2299  157e				  -	      jmp	.__Skip_Additional_Right
   2300  157e				  -.11skip__Skip_Additional_Right
   2301  157e					      endif
   2302  157e				   .L0349		;  temp4  =  player1x	-  player0x
   2303  157e
   2304  157e		       a5 81		      LDA	player1x
   2305  1580		       38		      SEC
   2306  1581		       e5 80		      SBC	player0x
   2307  1583		       85 9f		      STA	temp4
   2308  1585				   .L0350		;  if temp4  >  25 then _Bit3_Ball_Shot_Dir_Right2{3}	=  1
   2309  1585
   2310  1585		       a9 19		      LDA	#25
   2311  1587		       c5 9f		      CMP	temp4
   2312  1589		       b0 06		      BCS	.skipL0350
   2313  158b				   .condpart39
   2314  158b		       a5 d6		      LDA	_Bit3_Ball_Shot_Dir_Right2
   2315  158d		       09 08		      ORA	#8
   2316  158f		       85 d6		      STA	_Bit3_Ball_Shot_Dir_Right2
   2317  1591				   .skipL0350
   2318  1591				   .__Skip_Additional_Right
   2319  1591							; __Skip_Additional_Right
   2320  1591
   2321  1591				   .L0351		;  if !_Bit0_Ball_Shot_Dir_Left1{0} then __Skip_Enemy_Fire
   2322  1591
   2323  1591		       a5 d6		      LDA	_Bit0_Ball_Shot_Dir_Left1
   2324  1593		       4a		      LSR
   2325  1594					      if	((* - .__Skip_Enemy_Fire) < 127) && ((* - .__Skip_Enemy_Fire) > -128)
   2326  1594		       90 13		      bcc	.__Skip_Enemy_Fire
   2327  1596				  -	      else
   2328  1596				  -	      bcs	.12skip__Skip_Enemy_Fire
   2329  1596				  -	      jmp	.__Skip_Enemy_Fire
   2330  1596				  -.12skip__Skip_Enemy_Fire
   2331  1596					      endif
   2332  1596				   .L0352		;  temp4  =  player0x	-  player1x
   2333  1596
   2334  1596		       a5 80		      LDA	player0x
   2335  1598		       38		      SEC
   2336  1599		       e5 81		      SBC	player1x
   2337  159b		       85 9f		      STA	temp4
   2338  159d				   .L0353		;  if temp4  >  25 then _Bit1_Ball_Shot_Dir_Left2{1}  =  1
   2339  159d
   2340  159d		       a9 19		      LDA	#25
   2341  159f		       c5 9f		      CMP	temp4
   2342  15a1		       b0 06		      BCS	.skipL0353
   2343  15a3				   .condpart40
   2344  15a3		       a5 d6		      LDA	_Bit1_Ball_Shot_Dir_Left2
   2345  15a5		       09 02		      ORA	#2
   2346  15a7		       85 d6		      STA	_Bit1_Ball_Shot_Dir_Left2
   2347  15a9				   .skipL0353
   2348  15a9				   .
   2349  15a9							; 
   2350  15a9
   2351  15a9				   .__Skip_Enemy_Fire
   2352  15a9							; __Skip_Enemy_Fire
   2353  15a9
   2354  15a9				   .
   2355  15a9							; 
   2356  15a9
   2357  15a9				   .
   2358  15a9							; 
   2359  15a9
   2360  15a9				   .
   2361  15a9							; 
   2362  15a9
   2363  15a9				   .L0354		;  if !_Bit3_Ball_Shot_Moving{3} then goto __Skip_Enemy_Missile
   2364  15a9
   2365  15a9		       a5 ec		      LDA	_Bit3_Ball_Shot_Moving
   2366  15ab		       29 08		      AND	#8
   2367  15ad		       d0 03		      BNE	.skipL0354
   2368  15af				   .condpart41
   2369  15af		       4c 2a d6 	      jmp	.__Skip_Enemy_Missile
   2370  15b2
   2371  15b2				   .skipL0354
   2372  15b2				   .
   2373  15b2							; 
   2374  15b2
   2375  15b2				   .
   2376  15b2							; 
   2377  15b2
   2378  15b2				   .L0355		;  if bally  >  player1y then bally  =  bally	-  1
   2379  15b2
   2380  15b2		       a5 86		      LDA	player1y
   2381  15b4		       c5 89		      CMP	bally
   2382  15b6		       b0 02		      BCS	.skipL0355
   2383  15b8				   .condpart42
   2384  15b8		       c6 89		      DEC	bally
   2385  15ba				   .skipL0355
   2386  15ba				   .L0356		;  if _Bit0_Ball_Shot_Dir_Left1{0} then ballx	=  ballx  -  1	:  if _Bit1_Ball_Shot_Dir_Left2{1} then ballx  =  ballx  -  1
   2387  15ba
   2388  15ba		       a5 d6		      LDA	_Bit0_Ball_Shot_Dir_Left1
   2389  15bc		       4a		      LSR
   2390  15bd		       90 0a		      BCC	.skipL0356
   2391  15bf				   .condpart43
   2392  15bf		       c6 84		      DEC	ballx
   2393  15c1		       a5 d6		      LDA	_Bit1_Ball_Shot_Dir_Left2
   2394  15c3		       29 02		      AND	#2
   2395  15c5		       f0 02		      BEQ	.skip43then
   2396  15c7				   .condpart44
   2397  15c7		       c6 84		      DEC	ballx
   2398  15c9				   .skip43then
   2399  15c9				   .skipL0356
   2400  15c9				   .L0357		;  if _Bit2_Ball_Shot_Dir_Right1{2} then ballx  =  ballx  +  1  :  if _Bit3_Ball_Shot_Dir_Right2{3} then ballx  =  ballx  +  1
   2401  15c9
   2402  15c9		       a5 d6		      LDA	_Bit2_Ball_Shot_Dir_Right1
   2403  15cb		       29 04		      AND	#4
   2404  15cd		       f0 0a		      BEQ	.skipL0357
   2405  15cf				   .condpart45
   2406  15cf		       e6 84		      INC	ballx
   2407  15d1		       a5 d6		      LDA	_Bit3_Ball_Shot_Dir_Right2
   2408  15d3		       29 08		      AND	#8
   2409  15d5		       f0 02		      BEQ	.skip45then
   2410  15d7				   .condpart46
   2411  15d7		       e6 84		      INC	ballx
   2412  15d9				   .skip45then
   2413  15d9				   .skipL0357
   2414  15d9				   .
   2415  15d9							; 
   2416  15d9
   2417  15d9				   .L0358		;  rem apply gravity
   2418  15d9
   2419  15d9				   .L0359		;  Bally_velocity  =  Bally_velocity  +  gravity_missile0
   2420  15d9
   2421  15d9		       a5 e4		      LDA	q
   2422  15db		       18		      CLC
   2423  15dc		       69 06		      ADC	#6
   2424  15de		       85 e4		      STA	q
   2425  15e0		       a5 e3		      LDA	Bally_velocity
   2426  15e2		       69 00		      ADC	#0
   2427  15e4		       85 e3		      STA	Bally_velocity
   2428  15e6				   .L0360		;  Bally_position  =  Bally_position  +  Bally_velocity
   2429  15e6
   2430  15e6		       a5 e5		      LDA	r
   2431  15e8		       18		      CLC
   2432  15e9		       65 e4		      ADC	q
   2433  15eb		       85 e5		      STA	r
   2434  15ed		       a5 89		      LDA	Bally_position
   2435  15ef		       65 e3		      ADC	Bally_velocity
   2436  15f1		       85 89		      STA	Bally_position
   2437  15f3				   .
   2438  15f3							; 
   2439  15f3
   2440  15f3				   .
   2441  15f3							; 
   2442  15f3
   2443  15f3				   .
   2444  15f3							; 
   2445  15f3
   2446  15f3				   .L0361		;  if bally  <  _M_Edge_Top then goto __Delete_Enemy_Missile
   2447  15f3
   2448  15f3		       a5 89		      LDA	bally
   2449  15f5		       c9 02		      CMP	#_M_Edge_Top
   2450  15f7		       b0 03		      BCS	.skipL0361
   2451  15f9				   .condpart47
   2452  15f9		       4c 1e d6 	      jmp	.__Delete_Enemy_Missile
   2453  15fc
   2454  15fc				   .skipL0361
   2455  15fc				   .L0362		;  if bally  >  _M_Edge_Bottom then goto __Delete_Enemy_Missile
   2456  15fc
   2457  15fc		       a9 58		      LDA	#_M_Edge_Bottom
   2458  15fe		       c5 89		      CMP	bally
   2459  1600		       b0 03		      BCS	.skipL0362
   2460  1602				   .condpart48
   2461  1602		       4c 1e d6 	      jmp	.__Delete_Enemy_Missile
   2462  1605
   2463  1605				   .skipL0362
   2464  1605				   .L0363		;  if ballx  <  _M_Edge_Left then goto __Delete_Enemy_Missile
   2465  1605
   2466  1605		       a5 84		      LDA	ballx
   2467  1607		       c9 0e		      CMP	#_M_Edge_Left
   2468  1609		       b0 03		      BCS	.skipL0363
   2469  160b				   .condpart49
   2470  160b		       4c 1e d6 	      jmp	.__Delete_Enemy_Missile
   2471  160e
   2472  160e				   .skipL0363
   2473  160e				   .L0364		;  if ballx  >  _M_Edge_Right then goto __Delete_Enemy_Missile
   2474  160e
   2475  160e		       a9 94		      LDA	#_M_Edge_Right
   2476  1610		       c5 84		      CMP	ballx
   2477  1612		       b0 03		      BCS	.skipL0364
   2478  1614				   .condpart50
   2479  1614		       4c 1e d6 	      jmp	.__Delete_Enemy_Missile
   2480  1617
   2481  1617				   .skipL0364
   2482  1617				   .
   2483  1617							; 
   2484  1617
   2485  1617				   .
   2486  1617							; 
   2487  1617
   2488  1617				   .L0365		;  if !collision(playfield,ball) then goto __Skip_Enemy_Missile
   2489  1617
   2490  1617		       24 06		      bit	CXBLPF
   2491  1619		       30 03		      BMI	.skipL0365
   2492  161b				   .condpart51
   2493  161b		       4c 2a d6 	      jmp	.__Skip_Enemy_Missile
   2494  161e
   2495  161e				   .skipL0365
   2496  161e				   .
   2497  161e							; 
   2498  161e
   2499  161e				   .__Delete_Enemy_Missile
   2500  161e							; __Delete_Enemy_Missile
   2501  161e
   2502  161e				   .
   2503  161e							; 
   2504  161e
   2505  161e				   .
   2506  161e							; 
   2507  161e
   2508  161e				   .L0366		;  _Bit3_Ball_Shot_Moving{3}  =  0  :	ballx  =  200  :  bally  =  200
   2509  161e
   2510  161e		       a5 ec		      LDA	_Bit3_Ball_Shot_Moving
   2511  1620		       29 f7		      AND	#247
   2512  1622		       85 ec		      STA	_Bit3_Ball_Shot_Moving
   2513  1624		       a9 c8		      LDA	#200
   2514  1626		       85 84		      STA	ballx
   2515  1628		       85 89		      STA	bally
   2516  162a				   .
   2517  162a							; 
   2518  162a
   2519  162a				   .__Skip_Enemy_Missile
   2520  162a							; __Skip_Enemy_Missile
   2521  162a
   2522  162a				   .
   2523  162a							; 
   2524  162a
   2525  162a				   .
   2526  162a							; 
   2527  162a
   2528  162a				   .
   2529  162a							; 
   2530  162a
   2531  162a				   .
   2532  162a							; 
   2533  162a
   2534  162a				   .
   2535  162a							; 
   2536  162a
   2537  162a				   .L0367		;  if !joy0fire then goto __Skip_Fire
   2538  162a
   2539  162a		       24 0c		      bit	INPT4
   2540  162c		       10 03		      BPL	.skipL0367
   2541  162e				   .condpart52
   2542  162e		       4c c0 d6 	      jmp	.__Skip_Fire
   2543  1631
   2544  1631				   .skipL0367
   2545  1631				   .
   2546  1631							; 
   2547  1631
   2548  1631				   .
   2549  1631							; 
   2550  1631
   2551  1631				   .L0368		;  if _Bit7_M0_Moving{7}  ||  _Bit0_P1_Dir_Up{0} then goto __Skip_Fire
   2552  1631
   2553  1631		       24 ec		      BIT	_Bit7_M0_Moving
   2554  1633		       10 03		      BPL	.skipL0368
   2555  1635				   .condpart53
   2556  1635		       4c 3d d6 	      jmp	.condpart54
   2557  1638				   .skipL0368
   2558  1638		       a5 d8		      LDA	_Bit0_P1_Dir_Up
   2559  163a		       4a		      LSR
   2560  163b		       90 03		      BCC	.skip5OR
   2561  163d				   .condpart54
   2562  163d		       4c c0 d6 	      jmp	.__Skip_Fire
   2563  1640
   2564  1640				   .skip5OR
   2565  1640				   .
   2566  1640							; 
   2567  1640
   2568  1640				   .
   2569  1640							; 
   2570  1640
   2571  1640				   .
   2572  1640							; 
   2573  1640
   2574  1640				   .L0369		;  _BitOp_M0_Dir  =  _BitOp_P1_Dir
   2575  1640
   2576  1640		       a5 d8		      LDA	_BitOp_P1_Dir
   2577  1642		       85 d7		      STA	_BitOp_M0_Dir
   2578  1644				   .
   2579  1644							; 
   2580  1644
   2581  1644				   .L0370		;  if _BitOp_M0_Dir  =  0  &&	_Bit6_Flip_P1{6} then _BitOp_M0_Dir  =	4
   2582  1644
   2583  1644		       a5 d7		      LDA	_BitOp_M0_Dir
   2584  1646		       c9 00		      CMP	#0
   2585  1648		       d0 08		      BNE	.skipL0370
   2586  164a				   .condpart55
   2587  164a		       24 ec		      BIT	_Bit6_Flip_P1
   2588  164c		       50 04		      BVC	.skip55then
   2589  164e				   .condpart56
   2590  164e		       a9 04		      LDA	#4
   2591  1650		       85 d7		      STA	_BitOp_M0_Dir
   2592  1652				   .skip55then
   2593  1652				   .skipL0370
   2594  1652				   .L0371		;  if _BitOp_M0_Dir  =  0  &&	! _Bit6_Flip_P1{6} then _BitOp_M0_Dir  =  8
   2595  1652
   2596  1652		       a5 d7		      LDA	_BitOp_M0_Dir
   2597  1654		       c9 00		      CMP	#0
   2598  1656		       d0 08		      BNE	.skipL0371
   2599  1658				   .condpart57
   2600  1658		       24 ec		      BIT	_Bit6_Flip_P1
   2601  165a		       70 04		      BVS	.skip57then
   2602  165c				   .condpart58
   2603  165c		       a9 08		      LDA	#8
   2604  165e		       85 d7		      STA	_BitOp_M0_Dir
   2605  1660				   .skip57then
   2606  1660				   .skipL0371
   2607  1660				   .
   2608  1660							; 
   2609  1660
   2610  1660				   .
   2611  1660							; 
   2612  1660
   2613  1660				   .L0372		;  _Bit7_M0_Moving{7}	=  1
   2614  1660
   2615  1660		       a5 ec		      LDA	_Bit7_M0_Moving
   2616  1662		       09 80		      ORA	#128
   2617  1664		       85 ec		      STA	_Bit7_M0_Moving
   2618  1666				   .
   2619  1666							; 
   2620  1666
   2621  1666				   .
   2622  1666							; 
   2623  1666
   2624  1666				   .L0373		;  M0y_velocity  =  0.0  :  u	=  0
   2625  1666
   2626  1666		       a2 00		      LDX	#0
   2627  1668		       86 e7		      STX	t
   2628  166a		       a9 00		      LDA	#0
   2629  166c		       85 e6		      STA	M0y_velocity
   2630  166e		       a9 00		      LDA	#0
   2631  1670		       85 e8		      STA	u
   2632  1672				   .
   2633  1672							; 
   2634  1672
   2635  1672				   .
   2636  1672							; 
   2637  1672
   2638  1672				   .L0374		;  if _Bit1_M0_Dir_Down{1} then missile0x  =  player1x  +  9  :  missile0y  =	player1y  -  1
   2639  1672
   2640  1672		       a5 d7		      LDA	_Bit1_M0_Dir_Down
   2641  1674		       29 02		      AND	#2
   2642  1676		       f0 0e		      BEQ	.skipL0374
   2643  1678				   .condpart59
   2644  1678		       a5 81		      LDA	player1x
   2645  167a		       18		      CLC
   2646  167b		       69 09		      ADC	#9
   2647  167d		       85 82		      STA	missile0x
   2648  167f		       a5 86		      LDA	player1y
   2649  1681		       38		      SEC
   2650  1682		       e9 01		      SBC	#1
   2651  1684		       85 91		      STA	missile0y
   2652  1686				   .skipL0374
   2653  1686				   .L0375		;  if _Bit2_M0_Dir_Left{2} then missile0x  =  player1x  +  2  :  missile0y  =	player1y  -  3
   2654  1686
   2655  1686		       a5 d7		      LDA	_Bit2_M0_Dir_Left
   2656  1688		       29 04		      AND	#4
   2657  168a		       f0 0e		      BEQ	.skipL0375
   2658  168c				   .condpart60
   2659  168c		       a5 81		      LDA	player1x
   2660  168e		       18		      CLC
   2661  168f		       69 02		      ADC	#2
   2662  1691		       85 82		      STA	missile0x
   2663  1693		       a5 86		      LDA	player1y
   2664  1695		       38		      SEC
   2665  1696		       e9 03		      SBC	#3
   2666  1698		       85 91		      STA	missile0y
   2667  169a				   .skipL0375
   2668  169a				   .L0376		;  if _Bit3_M0_Dir_Right{3} then missile0x  =	player1x  +  16  :  missile0y  =  player1y  -  3
   2669  169a
   2670  169a		       a5 d7		      LDA	_Bit3_M0_Dir_Right
   2671  169c		       29 08		      AND	#8
   2672  169e		       f0 0e		      BEQ	.skipL0376
   2673  16a0				   .condpart61
   2674  16a0		       a5 81		      LDA	player1x
   2675  16a2		       18		      CLC
   2676  16a3		       69 10		      ADC	#16
   2677  16a5		       85 82		      STA	missile0x
   2678  16a7		       a5 86		      LDA	player1y
   2679  16a9		       38		      SEC
   2680  16aa		       e9 03		      SBC	#3
   2681  16ac		       85 91		      STA	missile0y
   2682  16ae				   .skipL0376
   2683  16ae				   .
   2684  16ae							; 
   2685  16ae
   2686  16ae				   .
   2687  16ae							; 
   2688  16ae
   2689  16ae				   .L0377		;  if _Ch0_Sound  <>  3 then _Ch0_Sound  =  2	:  _Ch0_Duration  =  1	:  _Ch0_Counter  =  0
   2690  16ae
   2691  16ae		       a5 d9		      LDA	_Ch0_Sound
   2692  16b0		       c9 03		      CMP	#3
   2693  16b2		       f0 0c		      BEQ	.skipL0377
   2694  16b4				   .condpart62
   2695  16b4		       a9 02		      LDA	#2
   2696  16b6		       85 d9		      STA	_Ch0_Sound
   2697  16b8		       a9 01		      LDA	#1
   2698  16ba		       85 da		      STA	_Ch0_Duration
   2699  16bc		       a9 00		      LDA	#0
   2700  16be		       85 db		      STA	_Ch0_Counter
   2701  16c0				   .skipL0377
   2702  16c0				   .
   2703  16c0							; 
   2704  16c0
   2705  16c0				   .__Skip_Fire
   2706  16c0							; __Skip_Fire
   2707  16c0
   2708  16c0				   .
   2709  16c0							; 
   2710  16c0
   2711  16c0				   .
   2712  16c0							; 
   2713  16c0
   2714  16c0				   .
   2715  16c0							; 
   2716  16c0
   2717  16c0				   .
   2718  16c0							; 
   2719  16c0
   2720  16c0				   .L0378		;  if !_Bit7_M0_Moving{7} then goto __Skip_Missile
   2721  16c0
   2722  16c0		       24 ec		      BIT	_Bit7_M0_Moving
   2723  16c2		       30 03		      BMI	.skipL0378
   2724  16c4				   .condpart63
   2725  16c4		       4c 3f d7 	      jmp	.__Skip_Missile
   2726  16c7
   2727  16c7				   .skipL0378
   2728  16c7				   .
   2729  16c7							; 
   2730  16c7
   2731  16c7				   .
   2732  16c7							; 
   2733  16c7
   2734  16c7				   .L0379		;  if _Bit1_M0_Dir_Down{1} then missile0y  =  missile0y  +  2
   2735  16c7
   2736  16c7		       a5 d7		      LDA	_Bit1_M0_Dir_Down
   2737  16c9		       29 02		      AND	#2
   2738  16cb		       f0 07		      BEQ	.skipL0379
   2739  16cd				   .condpart64
   2740  16cd		       a5 91		      LDA	missile0y
   2741  16cf		       18		      CLC
   2742  16d0		       69 02		      ADC	#2
   2743  16d2		       85 91		      STA	missile0y
   2744  16d4				   .skipL0379
   2745  16d4				   .L0380		;  if _Bit2_M0_Dir_Left{2} then missile0x  =  missile0x  -  2
   2746  16d4
   2747  16d4		       a5 d7		      LDA	_Bit2_M0_Dir_Left
   2748  16d6		       29 04		      AND	#4
   2749  16d8		       f0 07		      BEQ	.skipL0380
   2750  16da				   .condpart65
   2751  16da		       a5 82		      LDA	missile0x
   2752  16dc		       38		      SEC
   2753  16dd		       e9 02		      SBC	#2
   2754  16df		       85 82		      STA	missile0x
   2755  16e1				   .skipL0380
   2756  16e1				   .L0381		;  if _Bit3_M0_Dir_Right{3} then missile0x  =	missile0x  +  2
   2757  16e1
   2758  16e1		       a5 d7		      LDA	_Bit3_M0_Dir_Right
   2759  16e3		       29 08		      AND	#8
   2760  16e5		       f0 07		      BEQ	.skipL0381
   2761  16e7				   .condpart66
   2762  16e7		       a5 82		      LDA	missile0x
   2763  16e9		       18		      CLC
   2764  16ea		       69 02		      ADC	#2
   2765  16ec		       85 82		      STA	missile0x
   2766  16ee				   .skipL0381
   2767  16ee				   .
   2768  16ee							; 
   2769  16ee
   2770  16ee				   .L0382		;  rem apply gravity
   2771  16ee
   2772  16ee				   .L0383		;  M0y_velocity  =  M0y_velocity  +  gravity_missile0
   2773  16ee
   2774  16ee		       a5 e7		      LDA	t
   2775  16f0		       18		      CLC
   2776  16f1		       69 06		      ADC	#6
   2777  16f3		       85 e7		      STA	t
   2778  16f5		       a5 e6		      LDA	M0y_velocity
   2779  16f7		       69 00		      ADC	#0
   2780  16f9		       85 e6		      STA	M0y_velocity
   2781  16fb				   .L0384		;  M0y_position  =  M0y_position  +  M0y_velocity
   2782  16fb
   2783  16fb		       a5 e8		      LDA	u
   2784  16fd		       18		      CLC
   2785  16fe		       65 e7		      ADC	t
   2786  1700		       85 e8		      STA	u
   2787  1702		       a5 91		      LDA	M0y_position
   2788  1704		       65 e6		      ADC	M0y_velocity
   2789  1706		       85 91		      STA	M0y_position
   2790  1708				   .
   2791  1708							; 
   2792  1708
   2793  1708				   .
   2794  1708							; 
   2795  1708
   2796  1708				   .
   2797  1708							; 
   2798  1708
   2799  1708				   .L0385		;  if missile0y  <  _M_Edge_Top then goto __Delete_Missile
   2800  1708
   2801  1708		       a5 91		      LDA	missile0y
   2802  170a		       c9 02		      CMP	#_M_Edge_Top
   2803  170c		       b0 03		      BCS	.skipL0385
   2804  170e				   .condpart67
   2805  170e		       4c 33 d7 	      jmp	.__Delete_Missile
   2806  1711
   2807  1711				   .skipL0385
   2808  1711				   .L0386		;  if missile0y  >  _M_Edge_Bottom then goto __Delete_Missile
   2809  1711
   2810  1711		       a9 58		      LDA	#_M_Edge_Bottom
   2811  1713		       c5 91		      CMP	missile0y
   2812  1715		       b0 03		      BCS	.skipL0386
   2813  1717				   .condpart68
   2814  1717		       4c 33 d7 	      jmp	.__Delete_Missile
   2815  171a
   2816  171a				   .skipL0386
   2817  171a				   .L0387		;  if missile0x  <  _M_Edge_Left then goto __Delete_Missile
   2818  171a
   2819  171a		       a5 82		      LDA	missile0x
   2820  171c		       c9 0e		      CMP	#_M_Edge_Left
   2821  171e		       b0 03		      BCS	.skipL0387
   2822  1720				   .condpart69
   2823  1720		       4c 33 d7 	      jmp	.__Delete_Missile
   2824  1723
   2825  1723				   .skipL0387
   2826  1723				   .L0388		;  if missile0x  >  _M_Edge_Right then goto __Delete_Missile
   2827  1723
   2828  1723		       a9 94		      LDA	#_M_Edge_Right
   2829  1725		       c5 82		      CMP	missile0x
   2830  1727		       b0 03		      BCS	.skipL0388
   2831  1729				   .condpart70
   2832  1729		       4c 33 d7 	      jmp	.__Delete_Missile
   2833  172c
   2834  172c				   .skipL0388
   2835  172c				   .
   2836  172c							; 
   2837  172c
   2838  172c				   .
   2839  172c							; 
   2840  172c
   2841  172c				   .L0389		;  if !collision(playfield,missile0) then goto __Skip_Missile
   2842  172c
   2843  172c		       24 04		      bit	CXM0FB
   2844  172e		       30 03		      BMI	.skipL0389
   2845  1730				   .condpart71
   2846  1730		       4c 3f d7 	      jmp	.__Skip_Missile
   2847  1733
   2848  1733				   .skipL0389
   2849  1733				   .
   2850  1733							; 
   2851  1733
   2852  1733				   .
   2853  1733							; 
   2854  1733
   2855  1733				   .
   2856  1733							; 
   2857  1733
   2858  1733				   .
   2859  1733							; 
   2860  1733
   2861  1733				   .__Delete_Missile
   2862  1733							; __Delete_Missile
   2863  1733
   2864  1733				   .
   2865  1733							; 
   2866  1733
   2867  1733				   .
   2868  1733							; 
   2869  1733
   2870  1733				   .L0390		;  _Bit7_M0_Moving{7}	=  0  :  missile0x  =  200  :  missile0y  =  200
   2871  1733
   2872  1733		       a5 ec		      LDA	_Bit7_M0_Moving
   2873  1735		       29 7f		      AND	#127
   2874  1737		       85 ec		      STA	_Bit7_M0_Moving
   2875  1739		       a9 c8		      LDA	#200
   2876  173b		       85 82		      STA	missile0x
   2877  173d		       85 91		      STA	missile0y
   2878  173f				   .
   2879  173f							; 
   2880  173f
   2881  173f				   .__Skip_Missile
   2882  173f							; __Skip_Missile
   2883  173f
   2884  173f				   .
   2885  173f							; 
   2886  173f
   2887  173f				   .
   2888  173f							; 
   2889  173f
   2890  173f				   .
   2891  173f							; 
   2892  173f
   2893  173f				   .
   2894  173f							; 
   2895  173f
   2896  173f				   .L0391		;  if !collision(player0,missile0) then __Skip_Shot_Enemy
   2897  173f
   2898  173f		       24 00		      bit	CXM0P
   2899  1741					      if	((* - .__Skip_Shot_Enemy) < 127) && ((* - .__Skip_Shot_Enemy) > -128)
   2900  1741		       50 38		      bvc	.__Skip_Shot_Enemy
   2901  1743				  -	      else
   2902  1743				  -	      bvs	.13skip__Skip_Shot_Enemy
   2903  1743				  -	      jmp	.__Skip_Shot_Enemy
   2904  1743				  -.13skip__Skip_Shot_Enemy
   2905  1743					      endif
   2906  1743				   .
   2907  1743							; 
   2908  1743
   2909  1743				   .
   2910  1743							; 
   2911  1743
   2912  1743				   .L0392		;  _Bit7_M0_Moving{7}	=  0  :  missile0x  =  200  :  missile0y  =  200
   2913  1743
   2914  1743		       a5 ec		      LDA	_Bit7_M0_Moving
   2915  1745		       29 7f		      AND	#127
   2916  1747		       85 ec		      STA	_Bit7_M0_Moving
   2917  1749		       a9 c8		      LDA	#200
   2918  174b		       85 82		      STA	missile0x
   2919  174d		       85 91		      STA	missile0y
   2920  174f				   .
   2921  174f							; 
   2922  174f
   2923  174f				   .L0393		;  if roommate_type  >  1 then __Skip_Shot_Enemy
   2924  174f
   2925  174f		       a9 01		      LDA	#1
   2926  1751		       c5 de		      CMP	roommate_type
   2927  1753					      if	((* - .__Skip_Shot_Enemy) < 127) && ((* - .__Skip_Shot_Enemy) > -128)
   2928  1753		       90 26		      bcc	.__Skip_Shot_Enemy
   2929  1755				  -	      else
   2930  1755				  -	      bcs	.14skip__Skip_Shot_Enemy
   2931  1755				  -	      jmp	.__Skip_Shot_Enemy
   2932  1755				  -.14skip__Skip_Shot_Enemy
   2933  1755					      endif
   2934  1755				   .
   2935  1755							; 
   2936  1755
   2937  1755				   .L0394		;  _Ch0_Sound	=  1  :  _Ch0_Duration	=  1  :  _Ch0_Counter  =  0
   2938  1755
   2939  1755		       a9 01		      LDA	#1
   2940  1757		       85 d9		      STA	_Ch0_Sound
   2941  1759		       85 da		      STA	_Ch0_Duration
   2942  175b		       a9 00		      LDA	#0
   2943  175d		       85 db		      STA	_Ch0_Counter
   2944  175f				   .
   2945  175f							; 
   2946  175f
   2947  175f				   .
   2948  175f							; 
   2949  175f
   2950  175f				   .L0395		;  player0y  =  200  :  w_roommate_startpos_y	=  200	:  score  =  score  +  40
   2951  175f
   2952  175f		       a9 c8		      LDA	#200
   2953  1761		       85 85		      STA	player0y
   2954  1763		       8d 6a f0 	      STA	w_roommate_startpos_y
   2955  1766		       f8		      SED
   2956  1767		       18		      CLC
   2957  1768		       a5 95		      LDA	score+2
   2958  176a		       69 40		      ADC	#$40
   2959  176c		       85 95		      STA	score+2
   2960  176e		       a5 94		      LDA	score+1
   2961  1770		       69 00		      ADC	#$00
   2962  1772		       85 94		      STA	score+1
   2963  1774		       a5 93		      LDA	score
   2964  1776		       69 00		      ADC	#$00
   2965  1778		       85 93		      STA	score
   2966  177a		       d8		      CLD
   2967  177b				   .
   2968  177b							; 
   2969  177b
   2970  177b				   .__Skip_Shot_Enemy
   2971  177b							; __Skip_Shot_Enemy
   2972  177b
   2973  177b				   .
   2974  177b							; 
   2975  177b
   2976  177b				   .
   2977  177b							; 
   2978  177b
   2979  177b				   .
   2980  177b							; 
   2981  177b
   2982  177b				   .
   2983  177b							; 
   2984  177b
   2985  177b				   .L0396		;  if !collision(ball,missile0) then __Skip_Shot_Extra_Wall
   2986  177b
   2987  177b		       24 04		      bit	CXM0FB
   2988  177d					      if	((* - .__Skip_Shot_Extra_Wall) < 127) && ((* - .__Skip_Shot_Extra_Wall) > -128)
   2989  177d		       50 38		      bvc	.__Skip_Shot_Extra_Wall
   2990  177f				  -	      else
   2991  177f				  -	      bvs	.15skip__Skip_Shot_Extra_Wall
   2992  177f				  -	      jmp	.__Skip_Shot_Extra_Wall
   2993  177f				  -.15skip__Skip_Shot_Extra_Wall
   2994  177f					      endif
   2995  177f				   .
   2996  177f							; 
   2997  177f
   2998  177f				   .
   2999  177f							; 
   3000  177f
   3001  177f				   .L0397		;  _Bit7_M0_Moving{7}	=  0  :  missile0x  =  200  :  missile0y  =  200
   3002  177f
   3003  177f		       a5 ec		      LDA	_Bit7_M0_Moving
   3004  1781		       29 7f		      AND	#127
   3005  1783		       85 ec		      STA	_Bit7_M0_Moving
   3006  1785		       a9 c8		      LDA	#200
   3007  1787		       85 82		      STA	missile0x
   3008  1789		       85 91		      STA	missile0y
   3009  178b				   .
   3010  178b							; 
   3011  178b
   3012  178b				   .
   3013  178b							; 
   3014  178b
   3015  178b				   .L0398		;  if extra_wall_type then __Skip_Shot_Extra_Wall
   3016  178b
   3017  178b		       a5 ad		      LDA	extra_wall_type
   3018  178d					      if	((* - .__Skip_Shot_Extra_Wall) < 127) && ((* - .__Skip_Shot_Extra_Wall) > -128)
   3019  178d		       d0 28		      BNE	.__Skip_Shot_Extra_Wall
   3020  178f				  -	      else
   3021  178f				  -	      beq	.16skip__Skip_Shot_Extra_Wall
   3022  178f				  -	      jmp	.__Skip_Shot_Extra_Wall
   3023  178f				  -.16skip__Skip_Shot_Extra_Wall
   3024  178f					      endif
   3025  178f				   .
   3026  178f							; 
   3027  178f
   3028  178f				   .L0399		;  _Ch0_Sound	=  1  :  _Ch0_Duration	=  1  :  _Ch0_Counter  =  0
   3029  178f
   3030  178f		       a9 01		      LDA	#1
   3031  1791		       85 d9		      STA	_Ch0_Sound
   3032  1793		       85 da		      STA	_Ch0_Duration
   3033  1795		       a9 00		      LDA	#0
   3034  1797		       85 db		      STA	_Ch0_Counter
   3035  1799				   .L0400		;  w_extra_wall_startpos_x  =	200  :	bally  =  0  :	score  =  score  +  10
   3036  1799
   3037  1799		       a9 c8		      LDA	#200
   3038  179b		       8d 6e f0 	      STA	w_extra_wall_startpos_x
   3039  179e		       a9 00		      LDA	#0
   3040  17a0		       85 89		      STA	bally
   3041  17a2		       f8		      SED
   3042  17a3		       18		      CLC
   3043  17a4		       a5 95		      LDA	score+2
   3044  17a6		       69 10		      ADC	#$10
   3045  17a8		       85 95		      STA	score+2
   3046  17aa		       a5 94		      LDA	score+1
   3047  17ac		       69 00		      ADC	#$00
   3048  17ae		       85 94		      STA	score+1
   3049  17b0		       a5 93		      LDA	score
   3050  17b2		       69 00		      ADC	#$00
   3051  17b4		       85 93		      STA	score
   3052  17b6		       d8		      CLD
   3053  17b7				   .
   3054  17b7							; 
   3055  17b7
   3056  17b7				   .__Skip_Shot_Extra_Wall
   3057  17b7							; __Skip_Shot_Extra_Wall
   3058  17b7
   3059  17b7				   .
   3060  17b7							; 
   3061  17b7
   3062  17b7				   .
   3063  17b7							; 
   3064  17b7
   3065  17b7				   .
   3066  17b7							; 
   3067  17b7
   3068  17b7				   .L0401		;  if !collision(player1,player0) then goto __Skip_P1_Touched_P0
   3069  17b7
   3070  17b7		       24 07		      bit	CXPPMM
   3071  17b9		       30 03		      BMI	.skipL0401
   3072  17bb				   .condpart72
   3073  17bb		       4c 47 d8 	      jmp	.__Skip_P1_Touched_P0
   3074  17be
   3075  17be				   .skipL0401
   3076  17be				   .
   3077  17be							; 
   3078  17be
   3079  17be				   .
   3080  17be							; 
   3081  17be
   3082  17be				   .L0402		;  if roommate_type  <  2 then goto _Decrease_live_counter
   3083  17be
   3084  17be		       a5 de		      LDA	roommate_type
   3085  17c0		       c9 02		      CMP	#2
   3086  17c2		       b0 03		      BCS	.skipL0402
   3087  17c4				   .condpart73
   3088  17c4		       4c f5 d4 	      jmp	._Decrease_live_counter
   3089  17c7
   3090  17c7				   .skipL0402
   3091  17c7				   .
   3092  17c7							; 
   3093  17c7
   3094  17c7				   .
   3095  17c7							; 
   3096  17c7
   3097  17c7				   .L0403		;  if _Ch0_Sound  <>  3 then _Ch0_Sound  =  3	:  _Ch0_Duration  =  1	:  _Ch0_Counter  =  0
   3098  17c7
   3099  17c7		       a5 d9		      LDA	_Ch0_Sound
   3100  17c9		       c9 03		      CMP	#3
   3101  17cb		       f0 0c		      BEQ	.skipL0403
   3102  17cd				   .condpart74
   3103  17cd		       a9 03		      LDA	#3
   3104  17cf		       85 d9		      STA	_Ch0_Sound
   3105  17d1		       a9 01		      LDA	#1
   3106  17d3		       85 da		      STA	_Ch0_Duration
   3107  17d5		       a9 00		      LDA	#0
   3108  17d7		       85 db		      STA	_Ch0_Counter
   3109  17d9				   .skipL0403
   3110  17d9				   .L0404		;  if roommate_type  =  3 then _Bit2_Level_finished{2}  =  1  :  player0y  =  200  :  w_roommate_startpos_y  =  200  :  score	=  score  +  frame_counter  :  goto _skip_game_action
   3111  17d9
   3112  17d9		       a5 de		      LDA	roommate_type
   3113  17db		       c9 03		      CMP	#3
   3114  17dd		       d0 25		      BNE	.skipL0404
   3115  17df				   .condpart75
   3116  17df		       a5 ec		      LDA	_Bit2_Level_finished
   3117  17e1		       09 04		      ORA	#4
   3118  17e3		       85 ec		      STA	_Bit2_Level_finished
   3119  17e5		       a9 c8		      LDA	#200
   3120  17e7		       85 85		      STA	player0y
   3121  17e9		       8d 6a f0 	      STA	w_roommate_startpos_y
   3122  17ec		       f8		      SED
   3123  17ed		       18		      CLC
   3124  17ee		       a5 95		      LDA	score+2
   3125  17f0		       65 d5		      ADC	frame_counter
   3126  17f2		       85 95		      STA	score+2
   3127  17f4		       a5 94		      LDA	score+1
   3128  17f6		       69 00		      ADC	#0
   3129  17f8		       85 94		      STA	score+1
   3130  17fa		       a5 93		      LDA	score
   3131  17fc		       69 00		      ADC	#0
   3132  17fe		       85 93		      STA	score
   3133  1800		       d8		      CLD
   3134  1801		       4c 7f d9 	      jmp	._skip_game_action
   3135  1804
   3136  1804				   .skipL0404
   3137  1804				   .L0405		;  if roommate_type  =  2 then P1y_velocity  =  0.0  :  x  =  0  :  pfscore2  =  pfscore2  *  2  |  1	:  player1y  =	player1y  -  1	:  if !_Bit0_Safe_Point_reached{0} then WriteSendBuffer  =  req_safe_point  :  _Bit0_Safe_Point_reached{0}  =  1  :  Safe_Point_P1_x  =  player1x  :  Safe_Point_P1_y  =  player1y  :  _Bit1_Safe_Point_P1_Flip{1}  =  _Bit6_Flip_P1{6}
   3138  1804
   3139  1804		       a5 de		      LDA	roommate_type
   3140  1806		       c9 02		      CMP	#2
   3141  1808		       d0 3d		      BNE	.skipL0405
   3142  180a				   .condpart76
   3143  180a		       a2 00		      LDX	#0
   3144  180c		       86 ea		      STX	w
   3145  180e		       a9 00		      LDA	#0
   3146  1810		       85 e9		      STA	P1y_velocity
   3147  1812		       a9 00		      LDA	#0
   3148  1814		       85 eb		      STA	x
   3149  1816							; complex statement detected
   3150  1816		       a5 f3		      LDA	pfscore2
   3151  1818		       0a		      asl
   3152  1819		       09 01		      ORA	#1
   3153  181b		       85 f3		      STA	pfscore2
   3154  181d		       c6 86		      DEC	player1y
   3155  181f		       a5 df		      LDA	_Bit0_Safe_Point_reached
   3156  1821		       4a		      LSR
   3157  1822		       b0 23		      BCS	.skip76then
   3158  1824				   .condpart77
   3159  1824		       a9 08		      LDA	#req_safe_point
   3160  1826		       8d f1 1f 	      STA	WriteSendBuffer
   3161  1829		       a5 df		      LDA	_Bit0_Safe_Point_reached
   3162  182b		       09 01		      ORA	#1
   3163  182d		       85 df		      STA	_Bit0_Safe_Point_reached
   3164  182f		       a5 81		      LDA	player1x
   3165  1831		       85 e0		      STA	Safe_Point_P1_x
   3166  1833		       a5 86		      LDA	player1y
   3167  1835		       85 e1		      STA	Safe_Point_P1_y
   3168  1837		       a5 ec		      LDA	_Bit6_Flip_P1
   3169  1839		       29 40		      AND	#64
   3170  183b		       08		      PHP
   3171  183c		       a5 df		      LDA	_Bit1_Safe_Point_P1_Flip
   3172  183e		       29 fd		      AND	#253
   3173  1840		       28		      PLP
   3174  1841		       f0 02		      .byte.b	$F0, $02
   3175  1843		       09 02		      ORA	#2
   3176  1845		       85 df		      STA	_Bit1_Safe_Point_P1_Flip
   3177  1847				   .skip76then
   3178  1847				   .skipL0405
   3179  1847				   .__Skip_P1_Touched_P0
   3180  1847							; __Skip_P1_Touched_P0
   3181  1847
   3182  1847				   .
   3183  1847							; 
   3184  1847
   3185  1847				   .
   3186  1847							; 
   3187  1847
   3188  1847				   .
   3189  1847							; 
   3190  1847
   3191  1847				   .L0406		;  if collision(player1,ball)	||  collision(player1,playfield) then goto _Decrease_live_counter
   3192  1847
   3193  1847		       24 03		      bit	CXP1FB
   3194  1849		       50 03		      BVC	.skipL0406
   3195  184b				   .condpart78
   3196  184b		       4c 52 d8 	      jmp	.condpart79
   3197  184e				   .skipL0406
   3198  184e		       24 03		      bit	CXP1FB
   3199  1850		       10 03		      BPL	.skip8OR
   3200  1852				   .condpart79
   3201  1852		       4c f5 d4 	      jmp	._Decrease_live_counter
   3202  1855
   3203  1855				   .skip8OR
   3204  1855				   .
   3205  1855							; 
   3206  1855
   3207  1855				   .
   3208  1855							; 
   3209  1855
   3210  1855				   .L0407		;  _BitOp_P1_Dir  =  _BitOp_P1_Dir  &	$F0
   3211  1855
   3212  1855		       a5 d8		      LDA	_BitOp_P1_Dir
   3213  1857		       29 f0		      AND	#$F0
   3214  1859		       85 d8		      STA	_BitOp_P1_Dir
   3215  185b				   .
   3216  185b							; 
   3217  185b
   3218  185b				   .L0408		;  if joy0up then P1y_velocity  =  0.0  :  x  =  0  :	player1y  =  player1y  -  1  :	_Bit0_P1_Dir_Up{0}  =  1  :  goto skip_gravity
   3219  185b
   3220  185b		       a9 10		      lda	#$10
   3221  185d		       2c 80 02 	      bit	SWCHA
   3222  1860		       d0 17		      BNE	.skipL0408
   3223  1862				   .condpart80
   3224  1862		       a2 00		      LDX	#0
   3225  1864		       86 ea		      STX	w
   3226  1866		       a9 00		      LDA	#0
   3227  1868		       85 e9		      STA	P1y_velocity
   3228  186a		       a9 00		      LDA	#0
   3229  186c		       85 eb		      STA	x
   3230  186e		       c6 86		      DEC	player1y
   3231  1870		       a5 d8		      LDA	_Bit0_P1_Dir_Up
   3232  1872		       09 01		      ORA	#1
   3233  1874		       85 d8		      STA	_Bit0_P1_Dir_Up
   3234  1876		       4c a2 d8 	      jmp	.skip_gravity
   3235  1879
   3236  1879				   .skipL0408
   3237  1879				   .L0409		;  if joy0down then player1y  =  player1y  +  1  :  _Bit1_P1_Dir_Down{1}  =  1
   3238  1879
   3239  1879		       a9 20		      lda	#$20
   3240  187b		       2c 80 02 	      bit	SWCHA
   3241  187e		       d0 08		      BNE	.skipL0409
   3242  1880				   .condpart81
   3243  1880		       e6 86		      INC	player1y
   3244  1882		       a5 d8		      LDA	_Bit1_P1_Dir_Down
   3245  1884		       09 02		      ORA	#2
   3246  1886		       85 d8		      STA	_Bit1_P1_Dir_Down
   3247  1888				   .skipL0409
   3248  1888				   .
   3249  1888							; 
   3250  1888
   3251  1888				   .L0410		;  rem apply gravity
   3252  1888
   3253  1888				   .L0411		;  P1y_velocity  =  P1y_velocity  +  gravity_player1
   3254  1888
   3255  1888		       a5 ea		      LDA	w
   3256  188a		       18		      CLC
   3257  188b		       69 01		      ADC	#1
   3258  188d		       85 ea		      STA	w
   3259  188f		       a5 e9		      LDA	P1y_velocity
   3260  1891		       69 00		      ADC	#0
   3261  1893		       85 e9		      STA	P1y_velocity
   3262  1895				   .L0412		;  P1y_position  =  P1y_position  +  P1y_velocity
   3263  1895
   3264  1895		       a5 eb		      LDA	x
   3265  1897		       18		      CLC
   3266  1898		       65 ea		      ADC	w
   3267  189a		       85 eb		      STA	x
   3268  189c		       a5 86		      LDA	P1y_position
   3269  189e		       65 e9		      ADC	P1y_velocity
   3270  18a0		       85 86		      STA	P1y_position
   3271  18a2				   .
   3272  18a2							; 
   3273  18a2
   3274  18a2				   .skip_gravity
   3275  18a2							; skip_gravity
   3276  18a2
   3277  18a2				   .
   3278  18a2							; 
   3279  18a2
   3280  18a2				   .L0413		;  if joy0left then _Bit6_Flip_P1{6}  =  1  :	_Bit2_P1_Dir_Left{2}  =  1  :  player1x  =  player1x  -  1  :  goto _skip_move
   3281  18a2
   3282  18a2		       2c 80 02 	      bit	SWCHA
   3283  18a5		       70 11		      BVS	.skipL0413
   3284  18a7				   .condpart82
   3285  18a7		       a5 ec		      LDA	_Bit6_Flip_P1
   3286  18a9		       09 40		      ORA	#64
   3287  18ab		       85 ec		      STA	_Bit6_Flip_P1
   3288  18ad		       a5 d8		      LDA	_Bit2_P1_Dir_Left
   3289  18af		       09 04		      ORA	#4
   3290  18b1		       85 d8		      STA	_Bit2_P1_Dir_Left
   3291  18b3		       c6 81		      DEC	player1x
   3292  18b5		       4c cb d8 	      jmp	._skip_move
   3293  18b8
   3294  18b8				   .skipL0413
   3295  18b8				   .L0414		;  if joy0right then _Bit6_Flip_P1{6}	=  0  :  _Bit3_P1_Dir_Right{3}	=  1  :  player1x  =  player1x	+  1
   3296  18b8
   3297  18b8		       2c 80 02 	      bit	SWCHA
   3298  18bb		       30 0e		      BMI	.skipL0414
   3299  18bd				   .condpart83
   3300  18bd		       a5 ec		      LDA	_Bit6_Flip_P1
   3301  18bf		       29 bf		      AND	#191
   3302  18c1		       85 ec		      STA	_Bit6_Flip_P1
   3303  18c3		       a5 d8		      LDA	_Bit3_P1_Dir_Right
   3304  18c5		       09 08		      ORA	#8
   3305  18c7		       85 d8		      STA	_Bit3_P1_Dir_Right
   3306  18c9		       e6 81		      INC	player1x
   3307  18cb				   .skipL0414
   3308  18cb				   ._skip_move
   3309  18cb							; _skip_move
   3310  18cb
   3311  18cb				   .
   3312  18cb							; 
   3313  18cb
   3314  18cb				   .
   3315  18cb							; 
   3316  18cb
   3317  18cb				   .L0415		;  if player1y  <  player_min_y  &&  r_Bit0_room_type_top{0} then player1y  =	player_min_y  :  goto _skip_game_action
   3318  18cb
   3319  18cb		       a5 86		      LDA	player1y
   3320  18cd		       c9 02		      CMP	#player_min_y
   3321  18cf		       b0 0d		      BCS	.skipL0415
   3322  18d1				   .condpart84
   3323  18d1		       ad e1 f0 	      LDA	r_Bit0_room_type_top
   3324  18d4		       4a		      LSR
   3325  18d5		       90 07		      BCC	.skip84then
   3326  18d7				   .condpart85
   3327  18d7		       a9 02		      LDA	#player_min_y
   3328  18d9		       85 86		      STA	player1y
   3329  18db		       4c 7f d9 	      jmp	._skip_game_action
   3330  18de
   3331  18de				   .skip84then
   3332  18de				   .skipL0415
   3333  18de				   .
   3334  18de							; 
   3335  18de
   3336  18de				   .L0416		;  if player1x  <  player_min_x then _Bit2_New_Room_Flip_P1{2}  =  _Bit6_Flip_P1{6}  :  new_room_player1y  =  player1y  :  new_room_player1x  =  player_max_x	:  gosub _Add_Room_State  :  WriteSendBuffer  =  req_move_left	:  goto _skip_game_action
   3337  18de
   3338  18de		       a5 81		      LDA	player1x
   3339  18e0		       c9 0a		      CMP	#player_min_x
   3340  18e2		       b0 23		      BCS	.skipL0416
   3341  18e4				   .condpart86
   3342  18e4		       a5 ec		      LDA	_Bit6_Flip_P1
   3343  18e6		       29 40		      AND	#64
   3344  18e8		       08		      PHP
   3345  18e9		       a5 df		      LDA	_Bit2_New_Room_Flip_P1
   3346  18eb		       29 fb		      AND	#251
   3347  18ed		       28		      PLP
   3348  18ee		       f0 02		      .byte.b	$F0, $02
   3349  18f0		       09 04		      ORA	#4
   3350  18f2		       85 df		      STA	_Bit2_New_Room_Flip_P1
   3351  18f4		       a5 86		      LDA	player1y
   3352  18f6		       85 a4		      STA	new_room_player1y
   3353  18f8		       a9 86		      LDA	#player_max_x
   3354  18fa		       85 a5		      STA	new_room_player1x
   3355  18fc		       20 68 db 	      jsr	._Add_Room_State
   3356  18ff		       a9 03		      LDA	#req_move_left
   3357  1901		       8d f1 1f 	      STA	WriteSendBuffer
   3358  1904		       4c 7f d9 	      jmp	._skip_game_action
   3359  1907
   3360  1907				   .skipL0416
   3361  1907				   .L0417		;  if player1y  <  player_min_y then _Bit2_New_Room_Flip_P1{2}  =  _Bit6_Flip_P1{6}  :  new_room_player1x  =  player1x  :  new_room_player1y  =  player_max_y	:  gosub _Add_Room_State  :  WriteSendBuffer  =  req_move_up  :  goto _skip_game_action
   3362  1907
   3363  1907		       a5 86		      LDA	player1y
   3364  1909		       c9 02		      CMP	#player_min_y
   3365  190b		       b0 23		      BCS	.skipL0417
   3366  190d				   .condpart87
   3367  190d		       a5 ec		      LDA	_Bit6_Flip_P1
   3368  190f		       29 40		      AND	#64
   3369  1911		       08		      PHP
   3370  1912		       a5 df		      LDA	_Bit2_New_Room_Flip_P1
   3371  1914		       29 fb		      AND	#251
   3372  1916		       28		      PLP
   3373  1917		       f0 02		      .byte.b	$F0, $02
   3374  1919		       09 04		      ORA	#4
   3375  191b		       85 df		      STA	_Bit2_New_Room_Flip_P1
   3376  191d		       a5 81		      LDA	player1x
   3377  191f		       85 a5		      STA	new_room_player1x
   3378  1921		       a9 4c		      LDA	#player_max_y
   3379  1923		       85 a4		      STA	new_room_player1y
   3380  1925		       20 68 db 	      jsr	._Add_Room_State
   3381  1928		       a9 04		      LDA	#req_move_up
   3382  192a		       8d f1 1f 	      STA	WriteSendBuffer
   3383  192d		       4c 7f d9 	      jmp	._skip_game_action
   3384  1930
   3385  1930				   .skipL0417
   3386  1930				   .L0418		;  if player1x  >  player_max_x then _Bit2_New_Room_Flip_P1{2}  =  _Bit6_Flip_P1{6}  :  new_room_player1y  =  player1y  :  new_room_player1x  =  player_min_x	:  gosub _Add_Room_State  :  WriteSendBuffer  =  req_move_right  :  goto _skip_game_action
   3387  1930
   3388  1930		       a9 86		      LDA	#player_max_x
   3389  1932		       c5 81		      CMP	player1x
   3390  1934		       b0 23		      BCS	.skipL0418
   3391  1936				   .condpart88
   3392  1936		       a5 ec		      LDA	_Bit6_Flip_P1
   3393  1938		       29 40		      AND	#64
   3394  193a		       08		      PHP
   3395  193b		       a5 df		      LDA	_Bit2_New_Room_Flip_P1
   3396  193d		       29 fb		      AND	#251
   3397  193f		       28		      PLP
   3398  1940		       f0 02		      .byte.b	$F0, $02
   3399  1942		       09 04		      ORA	#4
   3400  1944		       85 df		      STA	_Bit2_New_Room_Flip_P1
   3401  1946		       a5 86		      LDA	player1y
   3402  1948		       85 a4		      STA	new_room_player1y
   3403  194a		       a9 0a		      LDA	#player_min_x
   3404  194c		       85 a5		      STA	new_room_player1x
   3405  194e		       20 68 db 	      jsr	._Add_Room_State
   3406  1951		       a9 05		      LDA	#req_move_right
   3407  1953		       8d f1 1f 	      STA	WriteSendBuffer
   3408  1956		       4c 7f d9 	      jmp	._skip_game_action
   3409  1959
   3410  1959				   .skipL0418
   3411  1959				   .L0419		;  if player1y  >  player_max_y then _Bit2_New_Room_Flip_P1{2}  =  _Bit6_Flip_P1{6}  :  new_room_player1x  =  player1x  :  new_room_player1y  =  player_min_y	:  gosub _Add_Room_State  :  WriteSendBuffer  =  req_move_down
   3412  1959
   3413  1959		       a9 4c		      LDA	#player_max_y
   3414  195b		       c5 86		      CMP	player1y
   3415  195d		       b0 20		      BCS	.skipL0419
   3416  195f				   .condpart89
   3417  195f		       a5 ec		      LDA	_Bit6_Flip_P1
   3418  1961		       29 40		      AND	#64
   3419  1963		       08		      PHP
   3420  1964		       a5 df		      LDA	_Bit2_New_Room_Flip_P1
   3421  1966		       29 fb		      AND	#251
   3422  1968		       28		      PLP
   3423  1969		       f0 02		      .byte.b	$F0, $02
   3424  196b		       09 04		      ORA	#4
   3425  196d		       85 df		      STA	_Bit2_New_Room_Flip_P1
   3426  196f		       a5 81		      LDA	player1x
   3427  1971		       85 a5		      STA	new_room_player1x
   3428  1973		       a9 02		      LDA	#player_min_y
   3429  1975		       85 a4		      STA	new_room_player1y
   3430  1977		       20 68 db 	      jsr	._Add_Room_State
   3431  197a		       a9 06		      LDA	#req_move_down
   3432  197c		       8d f1 1f 	      STA	WriteSendBuffer
   3433  197f				   .skipL0419
   3434  197f				   .
   3435  197f							; 
   3436  197f
   3437  197f				   ._skip_game_action
   3438  197f							; _skip_game_action
   3439  197f
   3440  197f				   .
   3441  197f							; 
   3442  197f
   3443  197f				   .
   3444  197f							; 
   3445  197f
   3446  197f				   .L0420		;  if !_Ch0_Sound then goto __Skip_Ch_0
   3447  197f
   3448  197f		       a5 d9		      LDA	_Ch0_Sound
   3449  1981		       d0 03		      BNE	.skipL0420
   3450  1983				   .condpart90
   3451  1983		       4c b2 da 	      jmp	.__Skip_Ch_0
   3452  1986
   3453  1986				   .skipL0420
   3454  1986				   .
   3455  1986							; 
   3456  1986
   3457  1986				   .
   3458  1986							; 
   3459  1986
   3460  1986				   .L0421		;  _Ch0_Duration  =  _Ch0_Duration  -	1
   3461  1986
   3462  1986		       c6 da		      DEC	_Ch0_Duration
   3463  1988				   .
   3464  1988							; 
   3465  1988
   3466  1988				   .
   3467  1988							; 
   3468  1988
   3469  1988				   .
   3470  1988							; 
   3471  1988
   3472  1988				   .L0422		;  if _Ch0_Duration then goto __Skip_Ch_0
   3473  1988
   3474  1988		       a5 da		      LDA	_Ch0_Duration
   3475  198a		       f0 03		      BEQ	.skipL0422
   3476  198c				   .condpart91
   3477  198c		       4c b2 da 	      jmp	.__Skip_Ch_0
   3478  198f
   3479  198f				   .skipL0422
   3480  198f				   .
   3481  198f							; 
   3482  198f
   3483  198f				   .
   3484  198f							; 
   3485  198f
   3486  198f				   .
   3487  198f							; 
   3488  198f
   3489  198f				   .
   3490  198f							; 
   3491  198f
   3492  198f				   .L0423		;  if _Ch0_Sound  <>  1 then goto __Skip_Ch0_Sound_001
   3493  198f
   3494  198f		       a5 d9		      LDA	_Ch0_Sound
   3495  1991		       c9 01		      CMP	#1
   3496  1993		       f0 03		      BEQ	.skipL0423
   3497  1995				   .condpart92
   3498  1995		       4c dd d9 	      jmp	.__Skip_Ch0_Sound_001
   3499  1998
   3500  1998				   .skipL0423
   3501  1998				   .
   3502  1998							; 
   3503  1998
   3504  1998				   .
   3505  1998							; 
   3506  1998
   3507  1998				   .L0424		;  temp4  =  _SD_Shot_Wall[_Ch0_Counter]
   3508  1998
   3509  1998		       a6 db		      LDX	_Ch0_Counter
   3510  199a		       bd 06 dc 	      LDA	_SD_Shot_Wall,x
   3511  199d		       85 9f		      STA	temp4
   3512  199f				   .
   3513  199f							; 
   3514  199f
   3515  199f				   .
   3516  199f							; 
   3517  199f
   3518  199f				   .L0425		;  if temp4  =  255 then goto __Clear_Ch_0
   3519  199f
   3520  199f		       a5 9f		      LDA	temp4
   3521  19a1		       c9 ff		      CMP	#255
   3522  19a3		       d0 03		      BNE	.skipL0425
   3523  19a5				   .condpart93
   3524  19a5		       4c ac da 	      jmp	.__Clear_Ch_0
   3525  19a8
   3526  19a8				   .skipL0425
   3527  19a8				   .
   3528  19a8							; 
   3529  19a8
   3530  19a8				   .
   3531  19a8							; 
   3532  19a8
   3533  19a8				   .L0426		;  _Ch0_Counter  =  _Ch0_Counter  +  1
   3534  19a8
   3535  19a8		       e6 db		      INC	_Ch0_Counter
   3536  19aa				   .L0427		;  temp5  =  _SD_Shot_Wall[_Ch0_Counter]  :  _Ch0_Counter  =  _Ch0_Counter  +	1
   3537  19aa
   3538  19aa		       a6 db		      LDX	_Ch0_Counter
   3539  19ac		       bd 06 dc 	      LDA	_SD_Shot_Wall,x
   3540  19af		       85 a0		      STA	temp5
   3541  19b1		       e6 db		      INC	_Ch0_Counter
   3542  19b3				   .L0428		;  temp6  =  _SD_Shot_Wall[_Ch0_Counter]  :  _Ch0_Counter  =  _Ch0_Counter  +	1
   3543  19b3
   3544  19b3		       a6 db		      LDX	_Ch0_Counter
   3545  19b5		       bd 06 dc 	      LDA	_SD_Shot_Wall,x
   3546  19b8		       85 a1		      STA	temp6
   3547  19ba		       e6 db		      INC	_Ch0_Counter
   3548  19bc				   .L0429		;  if _Ch0_Counter{0} then COLUBK  =  _E0
   3549  19bc
   3550  19bc		       a5 db		      LDA	_Ch0_Counter
   3551  19be		       4a		      LSR
   3552  19bf		       90 04		      BCC	.skipL0429
   3553  19c1				   .condpart94
   3554  19c1		       a9 e0		      LDA	#_E0
   3555  19c3		       85 09		      STA	COLUBK
   3556  19c5				   .skipL0429
   3557  19c5				   .
   3558  19c5							; 
   3559  19c5
   3560  19c5				   .
   3561  19c5							; 
   3562  19c5
   3563  19c5				   .L0430		;  AUDV0  =  temp4
   3564  19c5
   3565  19c5		       a5 9f		      LDA	temp4
   3566  19c7		       85 19		      STA	AUDV0
   3567  19c9				   .L0431		;  AUDC0  =  temp5
   3568  19c9
   3569  19c9		       a5 a0		      LDA	temp5
   3570  19cb		       85 15		      STA	AUDC0
   3571  19cd				   .L0432		;  AUDF0  =  temp6
   3572  19cd
   3573  19cd		       a5 a1		      LDA	temp6
   3574  19cf		       85 17		      STA	AUDF0
   3575  19d1				   .
   3576  19d1							; 
   3577  19d1
   3578  19d1				   .
   3579  19d1							; 
   3580  19d1
   3581  19d1				   .L0433		;  _Ch0_Duration  =  _SD_Shot_Wall[_Ch0_Counter]  :  _Ch0_Counter  =  _Ch0_Counter  +	1
   3582  19d1
   3583  19d1		       a6 db		      LDX	_Ch0_Counter
   3584  19d3		       bd 06 dc 	      LDA	_SD_Shot_Wall,x
   3585  19d6		       85 da		      STA	_Ch0_Duration
   3586  19d8		       e6 db		      INC	_Ch0_Counter
   3587  19da				   .
   3588  19da							; 
   3589  19da
   3590  19da				   .
   3591  19da							; 
   3592  19da
   3593  19da				   .L0434		;  goto __Skip_Ch_0
   3594  19da
   3595  19da		       4c b2 da 	      jmp	.__Skip_Ch_0
   3596  19dd
   3597  19dd				   .
   3598  19dd							; 
   3599  19dd
   3600  19dd				   .__Skip_Ch0_Sound_001
   3601  19dd							; __Skip_Ch0_Sound_001
   3602  19dd
   3603  19dd				   .
   3604  19dd							; 
   3605  19dd
   3606  19dd				   .
   3607  19dd							; 
   3608  19dd
   3609  19dd				   .
   3610  19dd							; 
   3611  19dd
   3612  19dd				   .
   3613  19dd							; 
   3614  19dd
   3615  19dd				   .L0435		;  if _Ch0_Sound  <>  2 then goto __Skip_Ch0_Sound_002
   3616  19dd
   3617  19dd		       a5 d9		      LDA	_Ch0_Sound
   3618  19df		       c9 02		      CMP	#2
   3619  19e1		       f0 03		      BEQ	.skipL0435
   3620  19e3				   .condpart95
   3621  19e3		       4c 22 da 	      jmp	.__Skip_Ch0_Sound_002
   3622  19e6
   3623  19e6				   .skipL0435
   3624  19e6				   .
   3625  19e6							; 
   3626  19e6
   3627  19e6				   .
   3628  19e6							; 
   3629  19e6
   3630  19e6				   .L0436		;  temp4  =  _SD_Shoot_Miss[_Ch0_Counter]
   3631  19e6
   3632  19e6		       a6 db		      LDX	_Ch0_Counter
   3633  19e8		       bd 3e dc 	      LDA	_SD_Shoot_Miss,x
   3634  19eb		       85 9f		      STA	temp4
   3635  19ed				   .
   3636  19ed							; 
   3637  19ed
   3638  19ed				   .
   3639  19ed							; 
   3640  19ed
   3641  19ed				   .L0437		;  if temp4  =  255 then goto __Clear_Ch_0
   3642  19ed
   3643  19ed		       a5 9f		      LDA	temp4
   3644  19ef		       c9 ff		      CMP	#255
   3645  19f1		       d0 03		      BNE	.skipL0437
   3646  19f3				   .condpart96
   3647  19f3		       4c ac da 	      jmp	.__Clear_Ch_0
   3648  19f6
   3649  19f6				   .skipL0437
   3650  19f6				   .
   3651  19f6							; 
   3652  19f6
   3653  19f6				   .
   3654  19f6							; 
   3655  19f6
   3656  19f6				   .L0438		;  _Ch0_Counter  =  _Ch0_Counter  +  1
   3657  19f6
   3658  19f6		       e6 db		      INC	_Ch0_Counter
   3659  19f8				   .L0439		;  temp5  =  _SD_Shoot_Miss[_Ch0_Counter]  :  _Ch0_Counter  =	_Ch0_Counter  +  1
   3660  19f8
   3661  19f8		       a6 db		      LDX	_Ch0_Counter
   3662  19fa		       bd 3e dc 	      LDA	_SD_Shoot_Miss,x
   3663  19fd		       85 a0		      STA	temp5
   3664  19ff		       e6 db		      INC	_Ch0_Counter
   3665  1a01				   .L0440		;  temp6  =  _SD_Shoot_Miss[_Ch0_Counter]  :  _Ch0_Counter  =	_Ch0_Counter  +  1
   3666  1a01
   3667  1a01		       a6 db		      LDX	_Ch0_Counter
   3668  1a03		       bd 3e dc 	      LDA	_SD_Shoot_Miss,x
   3669  1a06		       85 a1		      STA	temp6
   3670  1a08		       e6 db		      INC	_Ch0_Counter
   3671  1a0a				   .
   3672  1a0a							; 
   3673  1a0a
   3674  1a0a				   .
   3675  1a0a							; 
   3676  1a0a
   3677  1a0a				   .L0441		;  AUDV0  =  temp4
   3678  1a0a
   3679  1a0a		       a5 9f		      LDA	temp4
   3680  1a0c		       85 19		      STA	AUDV0
   3681  1a0e				   .L0442		;  AUDC0  =  temp5
   3682  1a0e
   3683  1a0e		       a5 a0		      LDA	temp5
   3684  1a10		       85 15		      STA	AUDC0
   3685  1a12				   .L0443		;  AUDF0  =  temp6
   3686  1a12
   3687  1a12		       a5 a1		      LDA	temp6
   3688  1a14		       85 17		      STA	AUDF0
   3689  1a16				   .
   3690  1a16							; 
   3691  1a16
   3692  1a16				   .
   3693  1a16							; 
   3694  1a16
   3695  1a16				   .L0444		;  _Ch0_Duration  =  _SD_Shoot_Miss[_Ch0_Counter]  :  _Ch0_Counter  =	_Ch0_Counter  +  1
   3696  1a16
   3697  1a16		       a6 db		      LDX	_Ch0_Counter
   3698  1a18		       bd 3e dc 	      LDA	_SD_Shoot_Miss,x
   3699  1a1b		       85 da		      STA	_Ch0_Duration
   3700  1a1d		       e6 db		      INC	_Ch0_Counter
   3701  1a1f				   .
   3702  1a1f							; 
   3703  1a1f
   3704  1a1f				   .
   3705  1a1f							; 
   3706  1a1f
   3707  1a1f				   .L0445		;  goto __Skip_Ch_0
   3708  1a1f
   3709  1a1f		       4c b2 da 	      jmp	.__Skip_Ch_0
   3710  1a22
   3711  1a22				   .
   3712  1a22							; 
   3713  1a22
   3714  1a22				   .__Skip_Ch0_Sound_002
   3715  1a22							; __Skip_Ch0_Sound_002
   3716  1a22
   3717  1a22				   .
   3718  1a22							; 
   3719  1a22
   3720  1a22				   .
   3721  1a22							; 
   3722  1a22
   3723  1a22				   .
   3724  1a22							; 
   3725  1a22
   3726  1a22				   .
   3727  1a22							; 
   3728  1a22
   3729  1a22				   .L0446		;  if _Ch0_Sound  <>  3 then goto __Skip_Ch0_Sound_003
   3730  1a22
   3731  1a22		       a5 d9		      LDA	_Ch0_Sound
   3732  1a24		       c9 03		      CMP	#3
   3733  1a26		       f0 03		      BEQ	.skipL0446
   3734  1a28				   .condpart97
   3735  1a28		       4c 67 da 	      jmp	.__Skip_Ch0_Sound_003
   3736  1a2b
   3737  1a2b				   .skipL0446
   3738  1a2b				   .
   3739  1a2b							; 
   3740  1a2b
   3741  1a2b				   .
   3742  1a2b							; 
   3743  1a2b
   3744  1a2b				   .L0447		;  temp4  =  _SD_Shoot_Enemy[_Ch0_Counter]
   3745  1a2b
   3746  1a2b		       a6 db		      LDX	_Ch0_Counter
   3747  1a2d		       bd 86 dc 	      LDA	_SD_Shoot_Enemy,x
   3748  1a30		       85 9f		      STA	temp4
   3749  1a32				   .
   3750  1a32							; 
   3751  1a32
   3752  1a32				   .
   3753  1a32							; 
   3754  1a32
   3755  1a32				   .L0448		;  if temp4  =  255 then goto __Clear_Ch_0
   3756  1a32
   3757  1a32		       a5 9f		      LDA	temp4
   3758  1a34		       c9 ff		      CMP	#255
   3759  1a36		       d0 03		      BNE	.skipL0448
   3760  1a38				   .condpart98
   3761  1a38		       4c ac da 	      jmp	.__Clear_Ch_0
   3762  1a3b
   3763  1a3b				   .skipL0448
   3764  1a3b				   .
   3765  1a3b							; 
   3766  1a3b
   3767  1a3b				   .
   3768  1a3b							; 
   3769  1a3b
   3770  1a3b				   .L0449		;  _Ch0_Counter  =  _Ch0_Counter  +  1
   3771  1a3b
   3772  1a3b		       e6 db		      INC	_Ch0_Counter
   3773  1a3d				   .L0450		;  temp5  =  _SD_Shoot_Enemy[_Ch0_Counter]  :	_Ch0_Counter  =  _Ch0_Counter  +  1
   3774  1a3d
   3775  1a3d		       a6 db		      LDX	_Ch0_Counter
   3776  1a3f		       bd 86 dc 	      LDA	_SD_Shoot_Enemy,x
   3777  1a42		       85 a0		      STA	temp5
   3778  1a44		       e6 db		      INC	_Ch0_Counter
   3779  1a46				   .L0451		;  temp6  =  _SD_Shoot_Enemy[_Ch0_Counter]  :	_Ch0_Counter  =  _Ch0_Counter  +  1
   3780  1a46
   3781  1a46		       a6 db		      LDX	_Ch0_Counter
   3782  1a48		       bd 86 dc 	      LDA	_SD_Shoot_Enemy,x
   3783  1a4b		       85 a1		      STA	temp6
   3784  1a4d		       e6 db		      INC	_Ch0_Counter
   3785  1a4f				   .
   3786  1a4f							; 
   3787  1a4f
   3788  1a4f				   .
   3789  1a4f							; 
   3790  1a4f
   3791  1a4f				   .L0452		;  AUDV0  =  temp4
   3792  1a4f
   3793  1a4f		       a5 9f		      LDA	temp4
   3794  1a51		       85 19		      STA	AUDV0
   3795  1a53				   .L0453		;  AUDC0  =  temp5
   3796  1a53
   3797  1a53		       a5 a0		      LDA	temp5
   3798  1a55		       85 15		      STA	AUDC0
   3799  1a57				   .L0454		;  AUDF0  =  temp6
   3800  1a57
   3801  1a57		       a5 a1		      LDA	temp6
   3802  1a59		       85 17		      STA	AUDF0
   3803  1a5b				   .
   3804  1a5b							; 
   3805  1a5b
   3806  1a5b				   .
   3807  1a5b							; 
   3808  1a5b
   3809  1a5b				   .L0455		;  _Ch0_Duration  =  _SD_Shoot_Enemy[_Ch0_Counter]  :	_Ch0_Counter  =  _Ch0_Counter  +  1
   3810  1a5b
   3811  1a5b		       a6 db		      LDX	_Ch0_Counter
   3812  1a5d		       bd 86 dc 	      LDA	_SD_Shoot_Enemy,x
   3813  1a60		       85 da		      STA	_Ch0_Duration
   3814  1a62		       e6 db		      INC	_Ch0_Counter
   3815  1a64				   .
   3816  1a64							; 
   3817  1a64
   3818  1a64				   .
   3819  1a64							; 
   3820  1a64
   3821  1a64				   .L0456		;  goto __Skip_Ch_0
   3822  1a64
   3823  1a64		       4c b2 da 	      jmp	.__Skip_Ch_0
   3824  1a67
   3825  1a67				   .
   3826  1a67							; 
   3827  1a67
   3828  1a67				   .__Skip_Ch0_Sound_003
   3829  1a67							; __Skip_Ch0_Sound_003
   3830  1a67
   3831  1a67				   .
   3832  1a67							; 
   3833  1a67
   3834  1a67				   .
   3835  1a67							; 
   3836  1a67
   3837  1a67				   .
   3838  1a67							; 
   3839  1a67
   3840  1a67				   .
   3841  1a67							; 
   3842  1a67
   3843  1a67				   .L0457		;  if _Ch0_Sound  <>  4 then goto __Skip_Ch0_Sound_004
   3844  1a67
   3845  1a67		       a5 d9		      LDA	_Ch0_Sound
   3846  1a69		       c9 04		      CMP	#4
   3847  1a6b		       f0 03		      BEQ	.skipL0457
   3848  1a6d				   .condpart99
   3849  1a6d		       4c ac da 	      jmp	.__Skip_Ch0_Sound_004
   3850  1a70
   3851  1a70				   .skipL0457
   3852  1a70				   .
   3853  1a70							; 
   3854  1a70
   3855  1a70				   .
   3856  1a70							; 
   3857  1a70
   3858  1a70				   .L0458		;  temp4  =  _SD_Touch_Enemy[_Ch0_Counter]
   3859  1a70
   3860  1a70		       a6 db		      LDX	_Ch0_Counter
   3861  1a72		       bd aa dc 	      LDA	_SD_Touch_Enemy,x
   3862  1a75		       85 9f		      STA	temp4
   3863  1a77				   .
   3864  1a77							; 
   3865  1a77
   3866  1a77				   .
   3867  1a77							; 
   3868  1a77
   3869  1a77				   .L0459		;  if temp4  =  255 then goto __Clear_Ch_0
   3870  1a77
   3871  1a77		       a5 9f		      LDA	temp4
   3872  1a79		       c9 ff		      CMP	#255
   3873  1a7b		       d0 03		      BNE	.skipL0459
   3874  1a7d				   .condpart100
   3875  1a7d		       4c ac da 	      jmp	.__Clear_Ch_0
   3876  1a80
   3877  1a80				   .skipL0459
   3878  1a80				   .
   3879  1a80							; 
   3880  1a80
   3881  1a80				   .
   3882  1a80							; 
   3883  1a80
   3884  1a80				   .L0460		;  _Ch0_Counter  =  _Ch0_Counter  +  1
   3885  1a80
   3886  1a80		       e6 db		      INC	_Ch0_Counter
   3887  1a82				   .L0461		;  temp5  =  _SD_Touch_Enemy[_Ch0_Counter]  :	_Ch0_Counter  =  _Ch0_Counter  +  1
   3888  1a82
   3889  1a82		       a6 db		      LDX	_Ch0_Counter
   3890  1a84		       bd aa dc 	      LDA	_SD_Touch_Enemy,x
   3891  1a87		       85 a0		      STA	temp5
   3892  1a89		       e6 db		      INC	_Ch0_Counter
   3893  1a8b				   .L0462		;  temp6  =  _SD_Touch_Enemy[_Ch0_Counter]  :	_Ch0_Counter  =  _Ch0_Counter  +  1
   3894  1a8b
   3895  1a8b		       a6 db		      LDX	_Ch0_Counter
   3896  1a8d		       bd aa dc 	      LDA	_SD_Touch_Enemy,x
   3897  1a90		       85 a1		      STA	temp6
   3898  1a92		       e6 db		      INC	_Ch0_Counter
   3899  1a94				   .
   3900  1a94							; 
   3901  1a94
   3902  1a94				   .
   3903  1a94							; 
   3904  1a94
   3905  1a94				   .L0463		;  AUDV0  =  temp4
   3906  1a94
   3907  1a94		       a5 9f		      LDA	temp4
   3908  1a96		       85 19		      STA	AUDV0
   3909  1a98				   .L0464		;  AUDC0  =  temp5
   3910  1a98
   3911  1a98		       a5 a0		      LDA	temp5
   3912  1a9a		       85 15		      STA	AUDC0
   3913  1a9c				   .L0465		;  AUDF0  =  temp6
   3914  1a9c
   3915  1a9c		       a5 a1		      LDA	temp6
   3916  1a9e		       85 17		      STA	AUDF0
   3917  1aa0				   .
   3918  1aa0							; 
   3919  1aa0
   3920  1aa0				   .
   3921  1aa0							; 
   3922  1aa0
   3923  1aa0				   .L0466		;  _Ch0_Duration  =  _SD_Touch_Enemy[_Ch0_Counter]  :	_Ch0_Counter  =  _Ch0_Counter  +  1
   3924  1aa0
   3925  1aa0		       a6 db		      LDX	_Ch0_Counter
   3926  1aa2		       bd aa dc 	      LDA	_SD_Touch_Enemy,x
   3927  1aa5		       85 da		      STA	_Ch0_Duration
   3928  1aa7		       e6 db		      INC	_Ch0_Counter
   3929  1aa9				   .
   3930  1aa9							; 
   3931  1aa9
   3932  1aa9				   .
   3933  1aa9							; 
   3934  1aa9
   3935  1aa9				   .L0467		;  goto __Skip_Ch_0
   3936  1aa9
   3937  1aa9		       4c b2 da 	      jmp	.__Skip_Ch_0
   3938  1aac
   3939  1aac				   .
   3940  1aac							; 
   3941  1aac
   3942  1aac				   .__Skip_Ch0_Sound_004
   3943  1aac							; __Skip_Ch0_Sound_004
   3944  1aac
   3945  1aac				   .
   3946  1aac							; 
   3947  1aac
   3948  1aac				   .
   3949  1aac							; 
   3950  1aac
   3951  1aac				   .__Clear_Ch_0
   3952  1aac							; __Clear_Ch_0
   3953  1aac
   3954  1aac				   .L0468		;  _Ch0_Sound	=  0  :  AUDV0	=  0
   3955  1aac
   3956  1aac		       a9 00		      LDA	#0
   3957  1aae		       85 d9		      STA	_Ch0_Sound
   3958  1ab0		       85 19		      STA	AUDV0
   3959  1ab2				   .
   3960  1ab2							; 
   3961  1ab2
   3962  1ab2				   .
   3963  1ab2							; 
   3964  1ab2
   3965  1ab2				   .__Skip_Ch_0
   3966  1ab2							; __Skip_Ch_0
   3967  1ab2
   3968  1ab2				   .
   3969  1ab2							; 
   3970  1ab2
   3971  1ab2				   .
   3972  1ab2							; 
   3973  1ab2
   3974  1ab2				   .
   3975  1ab2							; 
   3976  1ab2
   3977  1ab2				   .
   3978  1ab2							; 
   3979  1ab2
   3980  1ab2				   .L0469		;  if _Bit6_Flip_P1{6} then REFP1  =  8
   3981  1ab2
   3982  1ab2		       24 ec		      BIT	_Bit6_Flip_P1
   3983  1ab4		       50 04		      BVC	.skipL0469
   3984  1ab6				   .condpart101
   3985  1ab6		       a9 08		      LDA	#8
   3986  1ab8		       85 0c		      STA	REFP1
   3987  1aba				   .skipL0469
   3988  1aba				   .L0470		;  if _Bit0_roommate_Dir{0} then REFP0  =  8
   3989  1aba
   3990  1aba		       a5 ec		      LDA	_Bit0_roommate_Dir
   3991  1abc		       4a		      LSR
   3992  1abd		       90 04		      BCC	.skipL0470
   3993  1abf				   .condpart102
   3994  1abf		       a9 08		      LDA	#8
   3995  1ac1		       85 0b		      STA	REFP0
   3996  1ac3				   .skipL0470
   3997  1ac3				   .
   3998  1ac3							; 
   3999  1ac3
   4000  1ac3				   .L0471		;  drawscreen
   4001  1ac3
   4002  1ac3		       85 ee		      sta	temp7
   4003  1ac5		       a9 da		      lda	#>(ret_point3-1)
   4004  1ac7		       48		      pha
   4005  1ac8		       a9 da		      lda	#<(ret_point3-1)
   4006  1aca		       48		      pha
   4007  1acb		       a9 f5		      lda	#>(drawscreen-1)
   4008  1acd		       48		      pha
   4009  1ace		       a9 82		      lda	#<(drawscreen-1)
   4010  1ad0		       48		      pha
   4011  1ad1		       a5 ee		      lda	temp7
   4012  1ad3		       48		      pha
   4013  1ad4		       8a		      txa
   4014  1ad5		       48		      pha
   4015  1ad6		       a2 02		      ldx	#2
   4016  1ad8		       4c e8 ff 	      jmp	BS_jsr
   4017  1adb				   ret_point3
   4018  1adb				   .
   4019  1adb							; 
   4020  1adb
   4021  1adb				   .L0472		;  goto __Main_Loop
   4022  1adb
   4023  1adb		       4c eb d2 	      jmp	.__Main_Loop
   4024  1ade
   4025  1ade				   .
   4026  1ade							; 
   4027  1ade
   4028  1ade				   .
   4029  1ade							; 
   4030  1ade
   4031  1ade				   .
   4032  1ade							; 
   4033  1ade
   4034  1ade				   .
   4035  1ade							; 
   4036  1ade
   4037  1ade				   .
   4038  1ade							; 
   4039  1ade
   4040  1ade				   ._Set_Game_Over
   4041  1ade							; _Set_Game_Over
   4042  1ade
   4043  1ade				   .L0473		;  WriteToBuffer  =  _sc1
   4044  1ade
   4045  1ade		       a5 93		      LDA	_sc1
   4046  1ae0		       8d f0 1f 	      STA	WriteToBuffer
   4047  1ae3				   .L0474		;  WriteToBuffer  =  _sc2
   4048  1ae3
   4049  1ae3		       a5 94		      LDA	_sc2
   4050  1ae5		       8d f0 1f 	      STA	WriteToBuffer
   4051  1ae8				   .L0475		;  WriteToBuffer  =  _sc3
   4052  1ae8
   4053  1ae8		       a5 95		      LDA	_sc3
   4054  1aea		       8d f0 1f 	      STA	WriteToBuffer
   4055  1aed				   .L0476		;  WriteSendBuffer  =	req_game_over
   4056  1aed
   4057  1aed		       a9 02		      LDA	#req_game_over
   4058  1aef		       8d f1 1f 	      STA	WriteSendBuffer
   4059  1af2				   .L0477		;  _Bit4_Game_Over{4}	=  1
   4060  1af2
   4061  1af2		       a5 ec		      LDA	_Bit4_Game_Over
   4062  1af4		       09 10		      ORA	#16
   4063  1af6		       85 ec		      STA	_Bit4_Game_Over
   4064  1af8				   .L0478		;  goto _skip_game_action
   4065  1af8
   4066  1af8		       4c 7f d9 	      jmp	._skip_game_action
   4067  1afb
   4068  1afb				   .
   4069  1afb							; 
   4070  1afb
   4071  1afb				   ._Reset_Level
   4072  1afb							; _Reset_Level
   4073  1afb
   4074  1afb				   .L0479		;  WriteSendBuffer  =	req_level_reset
   4075  1afb
   4076  1afb		       a9 07		      LDA	#req_level_reset
   4077  1afd		       8d f1 1f 	      STA	WriteSendBuffer
   4078  1b00				   .L0480		;  _Bit2_New_Room_Flip_P1{2}  =  _Bit1_Safe_Point_P1_Flip{1}
   4079  1b00
   4080  1b00		       a5 df		      LDA	_Bit1_Safe_Point_P1_Flip
   4081  1b02		       29 02		      AND	#2
   4082  1b04		       08		      PHP
   4083  1b05		       a5 df		      LDA	_Bit2_New_Room_Flip_P1
   4084  1b07		       29 fb		      AND	#251
   4085  1b09		       28		      PLP
   4086  1b0a		       f0 02		      .byte.b	$F0, $02
   4087  1b0c		       09 04		      ORA	#4
   4088  1b0e		       85 df		      STA	_Bit2_New_Room_Flip_P1
   4089  1b10				   .
   4090  1b10							; 
   4091  1b10
   4092  1b10				   ._Common_Reset
   4093  1b10							; _Common_Reset
   4094  1b10
   4095  1b10				   .L0481		;  delay_counter  =  60
   4096  1b10
   4097  1b10		       a9 3c		      LDA	#60
   4098  1b12		       85 d4		      STA	delay_counter
   4099  1b14				   .L0482		;  _Bit5_Request_Pending{5}  =  1
   4100  1b14
   4101  1b14		       a5 ec		      LDA	_Bit5_Request_Pending
   4102  1b16		       09 20		      ORA	#32
   4103  1b18		       85 ec		      STA	_Bit5_Request_Pending
   4104  1b1a				   .L0483		;  pfscore2  =  255
   4105  1b1a
   4106  1b1a		       a9 ff		      LDA	#255
   4107  1b1c		       85 f3		      STA	pfscore2
   4108  1b1e				   .L0484		;  P1y_velocity  =  0.0  :  x	=  0
   4109  1b1e
   4110  1b1e		       a2 00		      LDX	#0
   4111  1b20		       86 ea		      STX	w
   4112  1b22		       a9 00		      LDA	#0
   4113  1b24		       85 e9		      STA	P1y_velocity
   4114  1b26		       a9 00		      LDA	#0
   4115  1b28		       85 eb		      STA	x
   4116  1b2a				   .L0485		;  new_room_player1x  =  Safe_Point_P1_x
   4117  1b2a
   4118  1b2a		       a5 e0		      LDA	Safe_Point_P1_x
   4119  1b2c		       85 a5		      STA	new_room_player1x
   4120  1b2e				   .L0486		;  new_room_player1y  =  Safe_Point_P1_y
   4121  1b2e
   4122  1b2e		       a5 e1		      LDA	Safe_Point_P1_y
   4123  1b30		       85 a4		      STA	new_room_player1y
   4124  1b32				   .L0487		;  goto _skip_game_action
   4125  1b32
   4126  1b32		       4c 7f d9 	      jmp	._skip_game_action
   4127  1b35
   4128  1b35				   .
   4129  1b35							; 
   4130  1b35
   4131  1b35				   ._Level_Up
   4132  1b35							; _Level_Up
   4133  1b35
   4134  1b35				   .L0488		;  WriteToBuffer  =  _sc1
   4135  1b35
   4136  1b35		       a5 93		      LDA	_sc1
   4137  1b37		       8d f0 1f 	      STA	WriteToBuffer
   4138  1b3a				   .L0489		;  WriteToBuffer  =  _sc2
   4139  1b3a
   4140  1b3a		       a5 94		      LDA	_sc2
   4141  1b3c		       8d f0 1f 	      STA	WriteToBuffer
   4142  1b3f				   .L0490		;  WriteToBuffer  =  _sc3
   4143  1b3f
   4144  1b3f		       a5 95		      LDA	_sc3
   4145  1b41		       8d f0 1f 	      STA	WriteToBuffer
   4146  1b44				   .L0491		;  WriteSendBuffer  =	req_level_up
   4147  1b44
   4148  1b44		       a9 01		      LDA	#req_level_up
   4149  1b46		       8d f1 1f 	      STA	WriteSendBuffer
   4150  1b49				   .L0492		;  _BitOp_Safe_Point_New_Room	=  0
   4151  1b49
   4152  1b49		       a9 00		      LDA	#0
   4153  1b4b		       85 df		      STA	_BitOp_Safe_Point_New_Room
   4154  1b4d				   .L0493		;  Safe_Point_P1_x  =	30
   4155  1b4d
   4156  1b4d		       a9 1e		      LDA	#30
   4157  1b4f		       85 e0		      STA	Safe_Point_P1_x
   4158  1b51				   .L0494		;  Safe_Point_P1_y  =	player_min_y
   4159  1b51
   4160  1b51		       a9 02		      LDA	#player_min_y
   4161  1b53		       85 e1		      STA	Safe_Point_P1_y
   4162  1b55				   .L0495		;  pfscore1  =  %00101010
   4163  1b55
   4164  1b55		       a9 2a		      LDA	#%00101010
   4165  1b57		       85 f2		      STA	pfscore1
   4166  1b59				   .L0496		;  score  =  0
   4167  1b59
   4168  1b59		       a9 00		      LDA	#$00
   4169  1b5b		       85 95		      STA	score+2
   4170  1b5d		       a9 00		      LDA	#$00
   4171  1b5f		       85 94		      STA	score+1
   4172  1b61		       a9 00		      LDA	#$00
   4173  1b63		       85 93		      STA	score
   4174  1b65				   .L0497		;  goto _Common_Reset
   4175  1b65
   4176  1b65		       4c 10 db 	      jmp	._Common_Reset
   4177  1b68
   4178  1b68				   .
   4179  1b68							; 
   4180  1b68
   4181  1b68				   .
   4182  1b68							; 
   4183  1b68
   4184  1b68				   .
   4185  1b68							; 
   4186  1b68
   4187  1b68				   ._Add_Room_State
   4188  1b68							; _Add_Room_State
   4189  1b68
   4190  1b68				   .L0498		;  _Bit5_Request_Pending{5}  =  1
   4191  1b68
   4192  1b68		       a5 ec		      LDA	_Bit5_Request_Pending
   4193  1b6a		       09 20		      ORA	#32
   4194  1b6c		       85 ec		      STA	_Bit5_Request_Pending
   4195  1b6e				   .L0499		;  WriteToBuffer  =  r104
   4196  1b6e
   4197  1b6e		       ad e8 f0 	      LDA	r104
   4198  1b71		       8d f0 1f 	      STA	WriteToBuffer
   4199  1b74				   .L0500		;  WriteToBuffer  =  r105
   4200  1b74
   4201  1b74		       ad e9 f0 	      LDA	r105
   4202  1b77		       8d f0 1f 	      STA	WriteToBuffer
   4203  1b7a				   .L0501		;  WriteToBuffer  =  r106
   4204  1b7a
   4205  1b7a		       ad ea f0 	      LDA	r106
   4206  1b7d		       8d f0 1f 	      STA	WriteToBuffer
   4207  1b80				   .L0502		;  WriteToBuffer  =  r107
   4208  1b80
   4209  1b80		       ad eb f0 	      LDA	r107
   4210  1b83		       8d f0 1f 	      STA	WriteToBuffer
   4211  1b86				   .L0503		;  WriteToBuffer  =  r108
   4212  1b86
   4213  1b86		       ad ec f0 	      LDA	r108
   4214  1b89		       8d f0 1f 	      STA	WriteToBuffer
   4215  1b8c				   .L0504		;  WriteToBuffer  =  r109
   4216  1b8c
   4217  1b8c		       ad ed f0 	      LDA	r109
   4218  1b8f		       8d f0 1f 	      STA	WriteToBuffer
   4219  1b92				   .L0505		;  WriteToBuffer  =  r110
   4220  1b92
   4221  1b92		       ad ee f0 	      LDA	r110
   4222  1b95		       8d f0 1f 	      STA	WriteToBuffer
   4223  1b98				   .L0506		;  WriteToBuffer  =  r111
   4224  1b98
   4225  1b98		       ad ef f0 	      LDA	r111
   4226  1b9b		       8d f0 1f 	      STA	WriteToBuffer
   4227  1b9e				   .L0507		;  return
   4228  1b9e
   4229  1b9e		       ba		      tsx
   4230  1b9f		       b5 02		      lda	2,x	; check return address
   4231  1ba1		       49 db		      eor	#(>*)	; vs. current PCH
   4232  1ba3		       29 e0		      and	#$E0	;  mask off all but top 3 bits
   4233  1ba5		       f0 03		      beq	*+5	; if equal, do normal return
   4234  1ba7		       4c da ff 	      JMP	BS_return
   4235  1baa		       60		      RTS
   4236  1bab				   .
   4237  1bab							; 
   4238  1bab
   4239  1bab				   .
   4240  1bab							; 
   4241  1bab
   4242  1bab				   .
   4243  1bab							; 
   4244  1bab
   4245  1bab				   .
   4246  1bab							; 
   4247  1bab
   4248  1bab				   ._Change_Room
   4249  1bab							; _Change_Room
   4250  1bab
   4251  1bab				   .L0508		;  delay_counter  =  2  :  player0y  =  200
   4252  1bab
   4253  1bab		       a9 02		      LDA	#2
   4254  1bad		       85 d4		      STA	delay_counter
   4255  1baf		       a9 c8		      LDA	#200
   4256  1bb1		       85 85		      STA	player0y
   4257  1bb3				   .L0509		;  _Bit_Game_State  =	_Bit_Game_State  &  %11111100
   4258  1bb3
   4259  1bb3		       a5 ec		      LDA	_Bit_Game_State
   4260  1bb5		       29 fc		      AND	#%11111100
   4261  1bb7		       85 ec		      STA	_Bit_Game_State
   4262  1bb9				   .L0510		;  _Bit5_Request_Pending{5}  =  0
   4263  1bb9
   4264  1bb9		       a5 ec		      LDA	_Bit5_Request_Pending
   4265  1bbb		       29 df		      AND	#223
   4266  1bbd		       85 ec		      STA	_Bit5_Request_Pending
   4267  1bbf				   .L0511		;  _Bit0_Safe_Point_reached{0}  =  0
   4268  1bbf
   4269  1bbf		       a5 df		      LDA	_Bit0_Safe_Point_reached
   4270  1bc1		       29 fe		      AND	#254
   4271  1bc3		       85 df		      STA	_Bit0_Safe_Point_reached
   4272  1bc5				   .L0512		;  player1y  =  new_room_player1y  :  player1x  =  new_room_player1x  :  _Bit6_Flip_P1{6}  =  _Bit2_New_Room_Flip_P1{2}
   4273  1bc5
   4274  1bc5		       a5 a4		      LDA	new_room_player1y
   4275  1bc7		       85 86		      STA	player1y
   4276  1bc9		       a5 a5		      LDA	new_room_player1x
   4277  1bcb		       85 81		      STA	player1x
   4278  1bcd		       a5 df		      LDA	_Bit2_New_Room_Flip_P1
   4279  1bcf		       29 04		      AND	#4
   4280  1bd1		       08		      PHP
   4281  1bd2		       a5 ec		      LDA	_Bit6_Flip_P1
   4282  1bd4		       29 bf		      AND	#191
   4283  1bd6		       28		      PLP
   4284  1bd7		       f0 02		      .byte.b	$F0, $02
   4285  1bd9		       09 40		      ORA	#64
   4286  1bdb		       85 ec		      STA	_Bit6_Flip_P1
   4287  1bdd				   .L0513		;  asm
   4288  1bdd
   4289  1bdd		       a9 00		      LDA	#0
   4290  1bdf
   4291  1bdf		       85 89		      STA	bally
   4292  1be1
   4293  1be1		       85 dc		      STA	extra_wall_move_x
   4294  1be3
   4295  1be3		       85 dd		      STA	roommate_move_x
   4296  1be5
   4297  1be5		       aa		      TAX
   4298  1be6
   4299  1be6				   .copy_loop
   4300  1be6
   4301  1be6		       ad f2 1f 	      LDA	ReceiveBuffer	; 4
   4302  1be9
   4303  1be9		       9d 61 f0 	      STA	w_room_definition_start,x	; 5   @9
   4304  1bec
   4305  1bec		       e8		      INX		; 2   @11
   4306  1bed
   4307  1bed		       ad f3 1f 	      LDA	ReceiveBufferSize	; 4   @15
   4308  1bf0
   4309  1bf0		       d0 f4		      BNE	.copy_loop	; 2/3 @18
   4310  1bf2
   4311  1bf2				   .L0514		;  roommate_type  =  r_roommate_type_and_range  &  3
   4312  1bf2
   4313  1bf2		       ad e8 f0 	      LDA	r_roommate_type_and_range
   4314  1bf5		       29 03		      AND	#3
   4315  1bf7		       85 de		      STA	roommate_type
   4316  1bf9				   .L0515		;  extra_wall_type  =	r_extra_wall_type_and_range  &	3
   4317  1bf9
   4318  1bf9		       ad eb f0 	      LDA	r_extra_wall_type_and_range
   4319  1bfc		       29 03		      AND	#3
   4320  1bfe		       85 ad		      STA	extra_wall_type
   4321  1c00				   .L0516		;  goto _skip_game_action
   4322  1c00
   4323  1c00		       4c 7f d9 	      jmp	._skip_game_action
   4324  1c03
   4325  1c03				   .
   4326  1c03							; 
   4327  1c03
   4328  1c03				   .
   4329  1c03							; 
   4330  1c03
   4331  1c03				   .
   4332  1c03							; 
   4333  1c03
   4334  1c03				   .
   4335  1c03							; 
   4336  1c03
   4337  1c03				   .
   4338  1c03							; 
   4339  1c03
   4340  1c03				   .
   4341  1c03							; 
   4342  1c03
   4343  1c03				   .L0517		;  data _SD_Shot_Wall
   4344  1c03
   4345  1c03		       4c 3b dc 	      JMP	.skipL0517
   4346  1c06				   _SD_Shot_Wall
   4347  1c06		       08 08 00 	      .byte.b	8,8,0
   4348  1c09
   4349  1c09		       01		      .byte.b	1
   4350  1c0a
   4351  1c0a		       08 08 01 	      .byte.b	8,8,1
   4352  1c0d
   4353  1c0d		       01		      .byte.b	1
   4354  1c0e
   4355  1c0e		       08 0e 01 	      .byte.b	8,14,1
   4356  1c11
   4357  1c11		       01		      .byte.b	1
   4358  1c12
   4359  1c12		       08 08 00 	      .byte.b	8,8,0
   4360  1c15
   4361  1c15		       01		      .byte.b	1
   4362  1c16
   4363  1c16		       08 08 02 	      .byte.b	8,8,2
   4364  1c19
   4365  1c19		       01		      .byte.b	1
   4366  1c1a
   4367  1c1a		       08 0e 02 	      .byte.b	8,14,2
   4368  1c1d
   4369  1c1d		       01		      .byte.b	1
   4370  1c1e
   4371  1c1e		       08 08 01 	      .byte.b	8,8,1
   4372  1c21
   4373  1c21		       01		      .byte.b	1
   4374  1c22
   4375  1c22		       07 08 03 	      .byte.b	7,8,3
   4376  1c25
   4377  1c25		       01		      .byte.b	1
   4378  1c26
   4379  1c26		       06 08 02 	      .byte.b	6,8,2
   4380  1c29
   4381  1c29		       01		      .byte.b	1
   4382  1c2a
   4383  1c2a		       05 08 04 	      .byte.b	5,8,4
   4384  1c2d
   4385  1c2d		       01		      .byte.b	1
   4386  1c2e
   4387  1c2e		       04 08 03 	      .byte.b	4,8,3
   4388  1c31
   4389  1c31		       01		      .byte.b	1
   4390  1c32
   4391  1c32		       03 08 05 	      .byte.b	3,8,5
   4392  1c35
   4393  1c35		       01		      .byte.b	1
   4394  1c36
   4395  1c36		       02 0e 04 	      .byte.b	2,14,4
   4396  1c39
   4397  1c39		       04		      .byte.b	4
   4398  1c3a
   4399  1c3a		       ff		      .byte.b	255
   4400  1c3b
   4401  1c3b				   .skipL0517
   4402  1c3b				   .
   4403  1c3b							; 
   4404  1c3b
   4405  1c3b				   .
   4406  1c3b							; 
   4407  1c3b
   4408  1c3b				   .L0518		;  data _SD_Shoot_Miss
   4409  1c3b
   4410  1c3b		       4c 83 dc 	      JMP	.skipL0518
   4411  1c3e				   _SD_Shoot_Miss
   4412  1c3e		       08 0f 00 	      .byte.b	8,15,0
   4413  1c41
   4414  1c41		       01		      .byte.b	1
   4415  1c42
   4416  1c42		       0c 0f 01 	      .byte.b	12,15,1
   4417  1c45
   4418  1c45		       01		      .byte.b	1
   4419  1c46
   4420  1c46		       08 07 14 	      .byte.b	8,7,20
   4421  1c49
   4422  1c49		       01		      .byte.b	1
   4423  1c4a
   4424  1c4a		       0a 0f 03 	      .byte.b	10,15,3
   4425  1c4d
   4426  1c4d		       01		      .byte.b	1
   4427  1c4e
   4428  1c4e		       08 07 16 	      .byte.b	8,7,22
   4429  1c51
   4430  1c51		       01		      .byte.b	1
   4431  1c52
   4432  1c52		       0a 0f 05 	      .byte.b	10,15,5
   4433  1c55
   4434  1c55		       01		      .byte.b	1
   4435  1c56
   4436  1c56		       08 0f 06 	      .byte.b	8,15,6
   4437  1c59
   4438  1c59		       01		      .byte.b	1
   4439  1c5a
   4440  1c5a		       0a 07 18 	      .byte.b	10,7,24
   4441  1c5d
   4442  1c5d		       01		      .byte.b	1
   4443  1c5e
   4444  1c5e		       08 0f 08 	      .byte.b	8,15,8
   4445  1c61
   4446  1c61		       01		      .byte.b	1
   4447  1c62
   4448  1c62		       09 07 1b 	      .byte.b	9,7,27
   4449  1c65
   4450  1c65		       01		      .byte.b	1
   4451  1c66
   4452  1c66		       08 0f 0a 	      .byte.b	8,15,10
   4453  1c69
   4454  1c69		       01		      .byte.b	1
   4455  1c6a
   4456  1c6a		       07 0e 0b 	      .byte.b	7,14,11
   4457  1c6d
   4458  1c6d		       01		      .byte.b	1
   4459  1c6e
   4460  1c6e		       06 0f 0c 	      .byte.b	6,15,12
   4461  1c71
   4462  1c71		       01		      .byte.b	1
   4463  1c72
   4464  1c72		       05 06 0d 	      .byte.b	5,6,13
   4465  1c75
   4466  1c75		       01		      .byte.b	1
   4467  1c76
   4468  1c76		       04 0f 0e 	      .byte.b	4,15,14
   4469  1c79
   4470  1c79		       01		      .byte.b	1
   4471  1c7a
   4472  1c7a		       03 06 1b 	      .byte.b	3,6,27
   4473  1c7d
   4474  1c7d		       01		      .byte.b	1
   4475  1c7e
   4476  1c7e		       02 06 1e 	      .byte.b	2,6,30
   4477  1c81
   4478  1c81		       08		      .byte.b	8
   4479  1c82
   4480  1c82		       ff		      .byte.b	255
   4481  1c83
   4482  1c83				   .skipL0518
   4483  1c83				   .
   4484  1c83							; 
   4485  1c83
   4486  1c83				   .
   4487  1c83							; 
   4488  1c83
   4489  1c83				   .L0519		;  data _SD_Shoot_Enemy
   4490  1c83
   4491  1c83		       4c a7 dc 	      JMP	.skipL0519
   4492  1c86				   _SD_Shoot_Enemy
   4493  1c86		       0c 04 17 	      .byte.b	12,4,23
   4494  1c89
   4495  1c89		       04		      .byte.b	4
   4496  1c8a
   4497  1c8a		       0a 04 1d 	      .byte.b	10,4,29
   4498  1c8d
   4499  1c8d		       04		      .byte.b	4
   4500  1c8e
   4501  1c8e		       08 04 17 	      .byte.b	8,4,23
   4502  1c91
   4503  1c91		       04		      .byte.b	4
   4504  1c92
   4505  1c92		       06 04 1d 	      .byte.b	6,4,29
   4506  1c95
   4507  1c95		       04		      .byte.b	4
   4508  1c96
   4509  1c96		       04 04 17 	      .byte.b	4,4,23
   4510  1c99
   4511  1c99		       04		      .byte.b	4
   4512  1c9a
   4513  1c9a		       03 04 1d 	      .byte.b	3,4,29
   4514  1c9d
   4515  1c9d		       04		      .byte.b	4
   4516  1c9e
   4517  1c9e		       02 04 17 	      .byte.b	2,4,23
   4518  1ca1
   4519  1ca1		       01		      .byte.b	1
   4520  1ca2
   4521  1ca2		       01 04 1d 	      .byte.b	1,4,29
   4522  1ca5
   4523  1ca5		       01		      .byte.b	1
   4524  1ca6
   4525  1ca6		       ff		      .byte.b	255
   4526  1ca7
   4527  1ca7				   .skipL0519
   4528  1ca7				   .
   4529  1ca7							; 
   4530  1ca7
   4531  1ca7				   .
   4532  1ca7							; 
   4533  1ca7
   4534  1ca7				   .L0520		;  data _SD_Touch_Enemy
   4535  1ca7
   4536  1ca7		       4c c7 dc 	      JMP	.skipL0520
   4537  1caa				   _SD_Touch_Enemy
   4538  1caa		       02 07 0b 	      .byte.b	2,7,11
   4539  1cad
   4540  1cad		       02		      .byte.b	2
   4541  1cae
   4542  1cae		       0a 07 0c 	      .byte.b	10,7,12
   4543  1cb1
   4544  1cb1		       02		      .byte.b	2
   4545  1cb2
   4546  1cb2		       08 07 0d 	      .byte.b	8,7,13
   4547  1cb5
   4548  1cb5		       02		      .byte.b	2
   4549  1cb6
   4550  1cb6		       08 07 0e 	      .byte.b	8,7,14
   4551  1cb9
   4552  1cb9		       02		      .byte.b	2
   4553  1cba
   4554  1cba		       08 07 15 	      .byte.b	8,7,21
   4555  1cbd
   4556  1cbd		       08		      .byte.b	8
   4557  1cbe
   4558  1cbe		       04 07 16 	      .byte.b	4,7,22
   4559  1cc1
   4560  1cc1		       02		      .byte.b	2
   4561  1cc2
   4562  1cc2		       02 07 17 	      .byte.b	2,7,23
   4563  1cc5
   4564  1cc5		       01		      .byte.b	1
   4565  1cc6
   4566  1cc6		       ff		      .byte.b	255
   4567  1cc7
   4568  1cc7				   .skipL0520
   4569  1cc7				   .
   4570  1cc7							; 
   4571  1cc7
   4572  1cc7				   .
   4573  1cc7							; 
   4574  1cc7
   4575  1cc7				   .
   4576  1cc7							; 
   4577  1cc7
   4578  1cc7				   .
   4579  1cc7							; 
   4580  1cc7
   4581  1cc7				   .L0521		;  asm
   4582  1cc7
      0  1cc7					      SET_PLUSROM_API	"a.php", "ca.firmaplus.de"
      1  1cc7				   PlusROM_API
      2  1cc7		       61 2e 70 68*	      .byte.b	"a.php", 0, "ca.firmaplus.de", 0
   4584  1cdd
   4585  1cdd				   .
   4586  1cdd							; 
   4587  1cdd
   4588  1cdd				   .
   4589  1cdd							; 
   4590  1cdd
   4591  1cdd				   .
   4592  1cdd							; 
   4593  1cdd
   4594  1cdd				   .
   4595  1cdd							; 
   4596  1cdd
   4597  1cdd				   .
   4598  1cdd							; 
   4599  1cdd
   4600  1cdd				   .L0522		;  bank 2
   4601  1cdd
   4602  1cdd					      if	ECHO1
      756 bytes of ROM space left in bank 1
   4603  1cdd					      echo	"    ",[(start_bank1 - *)]d , "bytes of ROM space left in bank 1")
   4604  1cdd					      endif
   4605  1cdd		       00 01	   ECHO1      =	1
   4606  1fd1					      ORG	$1FF4-bscode_length
   4607  1fd1					      RORG	$DFF4-bscode_length
   4608  1fd1		       a2 ff	   start_bank1 ldx	#$ff
   4609  1fd3				  -	      ifconst	FASTFETCH	; using DPC+
   4610  1fd3				  -	      stx	FASTFETCH
   4611  1fd3					      endif
   4612  1fd3		       9a		      txs
   4613  1fd4				  -	      if	bankswitch == 64
   4614  1fd4				  -	      lda	#(((>(start-1)) & $0F) | $F0)
   4615  1fd4					      else
   4616  1fd4		       a9 f3		      lda	#>(start-1)
   4617  1fd6					      endif
   4618  1fd6		       48		      pha
   4619  1fd7		       a9 51		      lda	#<(start-1)
   4620  1fd9		       48		      pha
   4621  1fda		       48		      pha
   4622  1fdb		       8a		      txa
   4623  1fdc		       48		      pha
   4624  1fdd		       ba		      tsx
   4625  1fde					      if	bankswitch != 64
   4626  1fde		       b5 04		      lda	4,x	; get high byte of return address
   4627  1fe0		       2a		      rol
   4628  1fe1		       2a		      rol
   4629  1fe2		       2a		      rol
   4630  1fe3		       2a		      rol
   4631  1fe4		       29 01		      and	#bs_mask	;1 3 or 7 for F8/F6/F4
   4632  1fe6		       aa		      tax
   4633  1fe7		       e8		      inx
   4634  1fe8				  -	      else
   4635  1fe8				  -	      lda	4,x	; get high byte of return address
   4636  1fe8				  -	      tay
   4637  1fe8				  -	      ora	#$10	; change our bank nibble into a valid rom mirror
   4638  1fe8				  -	      sta	4,x
   4639  1fe8				  -	      tya
   4640  1fe8				  -	      lsr
   4641  1fe8				  -	      lsr
   4642  1fe8				  -	      lsr
   4643  1fe8				  -	      lsr
   4644  1fe8				  -	      tax
   4645  1fe8				  -	      inx
   4646  1fe8					      endif
   4647  1fe8		       bd f7 1f 	      lda	bankswitch_hotspot-1,x
   4648  1feb		       68		      pla
   4649  1fec		       aa		      tax
   4650  1fed		       68		      pla
   4651  1fee		       60		      rts
   4652  1fef				  -	      if	((* & $1FFF) > ((bankswitch_hotspot & $1FFF) - 1))
   4653  1fef				  -	      echo	"WARNING: size parameter in banksw.asm too small - the program probably will not work."
   4654  1fef				  -	      echo	"Change to",[(*-begin_bscode+1)&$FF]d,"and try again."
   4655  1fef					      endif
   4656  1ffc					      ORG	$1FFC
   4657  1ffc					      RORG	$DFFC
   4658  1ffc		       d1 df		      .word.w	(start_bank1 & $ffff)
   4659  1ffe		       d1 df		      .word.w	(start_bank1 & $ffff)
   4660  2000					      ORG	$2000
   4661  2000					      RORG	$F000
   4662  2000					      repeat	256
   4663  2000		       ff		      .byte.b	$ff
   4662  2000					      repend
   4663  2001		       ff		      .byte.b	$ff
   4662  2001					      repend
   4663  2002		       ff		      .byte.b	$ff
   4662  2002					      repend
   4663  2003		       ff		      .byte.b	$ff
   4662  2003					      repend
   4663  2004		       ff		      .byte.b	$ff
   4662  2004					      repend
   4663  2005		       ff		      .byte.b	$ff
   4662  2005					      repend
   4663  2006		       ff		      .byte.b	$ff
   4662  2006					      repend
   4663  2007		       ff		      .byte.b	$ff
   4662  2007					      repend
   4663  2008		       ff		      .byte.b	$ff
   4662  2008					      repend
   4663  2009		       ff		      .byte.b	$ff
   4662  2009					      repend
   4663  200a		       ff		      .byte.b	$ff
   4662  200a					      repend
   4663  200b		       ff		      .byte.b	$ff
   4662  200b					      repend
   4663  200c		       ff		      .byte.b	$ff
   4662  200c					      repend
   4663  200d		       ff		      .byte.b	$ff
   4662  200d					      repend
   4663  200e		       ff		      .byte.b	$ff
   4662  200e					      repend
   4663  200f		       ff		      .byte.b	$ff
   4662  200f					      repend
   4663  2010		       ff		      .byte.b	$ff
   4662  2010					      repend
   4663  2011		       ff		      .byte.b	$ff
   4662  2011					      repend
   4663  2012		       ff		      .byte.b	$ff
   4662  2012					      repend
   4663  2013		       ff		      .byte.b	$ff
   4662  2013					      repend
   4663  2014		       ff		      .byte.b	$ff
   4662  2014					      repend
   4663  2015		       ff		      .byte.b	$ff
   4662  2015					      repend
   4663  2016		       ff		      .byte.b	$ff
   4662  2016					      repend
   4663  2017		       ff		      .byte.b	$ff
   4662  2017					      repend
   4663  2018		       ff		      .byte.b	$ff
   4662  2018					      repend
   4663  2019		       ff		      .byte.b	$ff
   4662  2019					      repend
   4663  201a		       ff		      .byte.b	$ff
   4662  201a					      repend
   4663  201b		       ff		      .byte.b	$ff
   4662  201b					      repend
   4663  201c		       ff		      .byte.b	$ff
   4662  201c					      repend
   4663  201d		       ff		      .byte.b	$ff
   4662  201d					      repend
   4663  201e		       ff		      .byte.b	$ff
   4662  201e					      repend
   4663  201f		       ff		      .byte.b	$ff
   4662  201f					      repend
   4663  2020		       ff		      .byte.b	$ff
   4662  2020					      repend
   4663  2021		       ff		      .byte.b	$ff
   4662  2021					      repend
   4663  2022		       ff		      .byte.b	$ff
   4662  2022					      repend
   4663  2023		       ff		      .byte.b	$ff
   4662  2023					      repend
   4663  2024		       ff		      .byte.b	$ff
   4662  2024					      repend
   4663  2025		       ff		      .byte.b	$ff
   4662  2025					      repend
   4663  2026		       ff		      .byte.b	$ff
   4662  2026					      repend
   4663  2027		       ff		      .byte.b	$ff
   4662  2027					      repend
   4663  2028		       ff		      .byte.b	$ff
   4662  2028					      repend
   4663  2029		       ff		      .byte.b	$ff
   4662  2029					      repend
   4663  202a		       ff		      .byte.b	$ff
   4662  202a					      repend
   4663  202b		       ff		      .byte.b	$ff
   4662  202b					      repend
   4663  202c		       ff		      .byte.b	$ff
   4662  202c					      repend
   4663  202d		       ff		      .byte.b	$ff
   4662  202d					      repend
   4663  202e		       ff		      .byte.b	$ff
   4662  202e					      repend
   4663  202f		       ff		      .byte.b	$ff
   4662  202f					      repend
   4663  2030		       ff		      .byte.b	$ff
   4662  2030					      repend
   4663  2031		       ff		      .byte.b	$ff
   4662  2031					      repend
   4663  2032		       ff		      .byte.b	$ff
   4662  2032					      repend
   4663  2033		       ff		      .byte.b	$ff
   4662  2033					      repend
   4663  2034		       ff		      .byte.b	$ff
   4662  2034					      repend
   4663  2035		       ff		      .byte.b	$ff
   4662  2035					      repend
   4663  2036		       ff		      .byte.b	$ff
   4662  2036					      repend
   4663  2037		       ff		      .byte.b	$ff
   4662  2037					      repend
   4663  2038		       ff		      .byte.b	$ff
   4662  2038					      repend
   4663  2039		       ff		      .byte.b	$ff
   4662  2039					      repend
   4663  203a		       ff		      .byte.b	$ff
   4662  203a					      repend
   4663  203b		       ff		      .byte.b	$ff
   4662  203b					      repend
   4663  203c		       ff		      .byte.b	$ff
   4662  203c					      repend
   4663  203d		       ff		      .byte.b	$ff
   4662  203d					      repend
   4663  203e		       ff		      .byte.b	$ff
   4662  203e					      repend
   4663  203f		       ff		      .byte.b	$ff
   4662  203f					      repend
   4663  2040		       ff		      .byte.b	$ff
   4662  2040					      repend
   4663  2041		       ff		      .byte.b	$ff
   4662  2041					      repend
   4663  2042		       ff		      .byte.b	$ff
   4662  2042					      repend
   4663  2043		       ff		      .byte.b	$ff
   4662  2043					      repend
   4663  2044		       ff		      .byte.b	$ff
   4662  2044					      repend
   4663  2045		       ff		      .byte.b	$ff
   4662  2045					      repend
   4663  2046		       ff		      .byte.b	$ff
   4662  2046					      repend
   4663  2047		       ff		      .byte.b	$ff
   4662  2047					      repend
   4663  2048		       ff		      .byte.b	$ff
   4662  2048					      repend
   4663  2049		       ff		      .byte.b	$ff
   4662  2049					      repend
   4663  204a		       ff		      .byte.b	$ff
   4662  204a					      repend
   4663  204b		       ff		      .byte.b	$ff
   4662  204b					      repend
   4663  204c		       ff		      .byte.b	$ff
   4662  204c					      repend
   4663  204d		       ff		      .byte.b	$ff
   4662  204d					      repend
   4663  204e		       ff		      .byte.b	$ff
   4662  204e					      repend
   4663  204f		       ff		      .byte.b	$ff
   4662  204f					      repend
   4663  2050		       ff		      .byte.b	$ff
   4662  2050					      repend
   4663  2051		       ff		      .byte.b	$ff
   4662  2051					      repend
   4663  2052		       ff		      .byte.b	$ff
   4662  2052					      repend
   4663  2053		       ff		      .byte.b	$ff
   4662  2053					      repend
   4663  2054		       ff		      .byte.b	$ff
   4662  2054					      repend
   4663  2055		       ff		      .byte.b	$ff
   4662  2055					      repend
   4663  2056		       ff		      .byte.b	$ff
   4662  2056					      repend
   4663  2057		       ff		      .byte.b	$ff
   4662  2057					      repend
   4663  2058		       ff		      .byte.b	$ff
   4662  2058					      repend
   4663  2059		       ff		      .byte.b	$ff
   4662  2059					      repend
   4663  205a		       ff		      .byte.b	$ff
   4662  205a					      repend
   4663  205b		       ff		      .byte.b	$ff
   4662  205b					      repend
   4663  205c		       ff		      .byte.b	$ff
   4662  205c					      repend
   4663  205d		       ff		      .byte.b	$ff
   4662  205d					      repend
   4663  205e		       ff		      .byte.b	$ff
   4662  205e					      repend
   4663  205f		       ff		      .byte.b	$ff
   4662  205f					      repend
   4663  2060		       ff		      .byte.b	$ff
   4662  2060					      repend
   4663  2061		       ff		      .byte.b	$ff
   4662  2061					      repend
   4663  2062		       ff		      .byte.b	$ff
   4662  2062					      repend
   4663  2063		       ff		      .byte.b	$ff
   4662  2063					      repend
   4663  2064		       ff		      .byte.b	$ff
   4662  2064					      repend
   4663  2065		       ff		      .byte.b	$ff
   4662  2065					      repend
   4663  2066		       ff		      .byte.b	$ff
   4662  2066					      repend
   4663  2067		       ff		      .byte.b	$ff
   4662  2067					      repend
   4663  2068		       ff		      .byte.b	$ff
   4662  2068					      repend
   4663  2069		       ff		      .byte.b	$ff
   4662  2069					      repend
   4663  206a		       ff		      .byte.b	$ff
   4662  206a					      repend
   4663  206b		       ff		      .byte.b	$ff
   4662  206b					      repend
   4663  206c		       ff		      .byte.b	$ff
   4662  206c					      repend
   4663  206d		       ff		      .byte.b	$ff
   4662  206d					      repend
   4663  206e		       ff		      .byte.b	$ff
   4662  206e					      repend
   4663  206f		       ff		      .byte.b	$ff
   4662  206f					      repend
   4663  2070		       ff		      .byte.b	$ff
   4662  2070					      repend
   4663  2071		       ff		      .byte.b	$ff
   4662  2071					      repend
   4663  2072		       ff		      .byte.b	$ff
   4662  2072					      repend
   4663  2073		       ff		      .byte.b	$ff
   4662  2073					      repend
   4663  2074		       ff		      .byte.b	$ff
   4662  2074					      repend
   4663  2075		       ff		      .byte.b	$ff
   4662  2075					      repend
   4663  2076		       ff		      .byte.b	$ff
   4662  2076					      repend
   4663  2077		       ff		      .byte.b	$ff
   4662  2077					      repend
   4663  2078		       ff		      .byte.b	$ff
   4662  2078					      repend
   4663  2079		       ff		      .byte.b	$ff
   4662  2079					      repend
   4663  207a		       ff		      .byte.b	$ff
   4662  207a					      repend
   4663  207b		       ff		      .byte.b	$ff
   4662  207b					      repend
   4663  207c		       ff		      .byte.b	$ff
   4662  207c					      repend
   4663  207d		       ff		      .byte.b	$ff
   4662  207d					      repend
   4663  207e		       ff		      .byte.b	$ff
   4662  207e					      repend
   4663  207f		       ff		      .byte.b	$ff
   4662  207f					      repend
   4663  2080		       ff		      .byte.b	$ff
   4662  2080					      repend
   4663  2081		       ff		      .byte.b	$ff
   4662  2081					      repend
   4663  2082		       ff		      .byte.b	$ff
   4662  2082					      repend
   4663  2083		       ff		      .byte.b	$ff
   4662  2083					      repend
   4663  2084		       ff		      .byte.b	$ff
   4662  2084					      repend
   4663  2085		       ff		      .byte.b	$ff
   4662  2085					      repend
   4663  2086		       ff		      .byte.b	$ff
   4662  2086					      repend
   4663  2087		       ff		      .byte.b	$ff
   4662  2087					      repend
   4663  2088		       ff		      .byte.b	$ff
   4662  2088					      repend
   4663  2089		       ff		      .byte.b	$ff
   4662  2089					      repend
   4663  208a		       ff		      .byte.b	$ff
   4662  208a					      repend
   4663  208b		       ff		      .byte.b	$ff
   4662  208b					      repend
   4663  208c		       ff		      .byte.b	$ff
   4662  208c					      repend
   4663  208d		       ff		      .byte.b	$ff
   4662  208d					      repend
   4663  208e		       ff		      .byte.b	$ff
   4662  208e					      repend
   4663  208f		       ff		      .byte.b	$ff
   4662  208f					      repend
   4663  2090		       ff		      .byte.b	$ff
   4662  2090					      repend
   4663  2091		       ff		      .byte.b	$ff
   4662  2091					      repend
   4663  2092		       ff		      .byte.b	$ff
   4662  2092					      repend
   4663  2093		       ff		      .byte.b	$ff
   4662  2093					      repend
   4663  2094		       ff		      .byte.b	$ff
   4662  2094					      repend
   4663  2095		       ff		      .byte.b	$ff
   4662  2095					      repend
   4663  2096		       ff		      .byte.b	$ff
   4662  2096					      repend
   4663  2097		       ff		      .byte.b	$ff
   4662  2097					      repend
   4663  2098		       ff		      .byte.b	$ff
   4662  2098					      repend
   4663  2099		       ff		      .byte.b	$ff
   4662  2099					      repend
   4663  209a		       ff		      .byte.b	$ff
   4662  209a					      repend
   4663  209b		       ff		      .byte.b	$ff
   4662  209b					      repend
   4663  209c		       ff		      .byte.b	$ff
   4662  209c					      repend
   4663  209d		       ff		      .byte.b	$ff
   4662  209d					      repend
   4663  209e		       ff		      .byte.b	$ff
   4662  209e					      repend
   4663  209f		       ff		      .byte.b	$ff
   4662  209f					      repend
   4663  20a0		       ff		      .byte.b	$ff
   4662  20a0					      repend
   4663  20a1		       ff		      .byte.b	$ff
   4662  20a1					      repend
   4663  20a2		       ff		      .byte.b	$ff
   4662  20a2					      repend
   4663  20a3		       ff		      .byte.b	$ff
   4662  20a3					      repend
   4663  20a4		       ff		      .byte.b	$ff
   4662  20a4					      repend
   4663  20a5		       ff		      .byte.b	$ff
   4662  20a5					      repend
   4663  20a6		       ff		      .byte.b	$ff
   4662  20a6					      repend
   4663  20a7		       ff		      .byte.b	$ff
   4662  20a7					      repend
   4663  20a8		       ff		      .byte.b	$ff
   4662  20a8					      repend
   4663  20a9		       ff		      .byte.b	$ff
   4662  20a9					      repend
   4663  20aa		       ff		      .byte.b	$ff
   4662  20aa					      repend
   4663  20ab		       ff		      .byte.b	$ff
   4662  20ab					      repend
   4663  20ac		       ff		      .byte.b	$ff
   4662  20ac					      repend
   4663  20ad		       ff		      .byte.b	$ff
   4662  20ad					      repend
   4663  20ae		       ff		      .byte.b	$ff
   4662  20ae					      repend
   4663  20af		       ff		      .byte.b	$ff
   4662  20af					      repend
   4663  20b0		       ff		      .byte.b	$ff
   4662  20b0					      repend
   4663  20b1		       ff		      .byte.b	$ff
   4662  20b1					      repend
   4663  20b2		       ff		      .byte.b	$ff
   4662  20b2					      repend
   4663  20b3		       ff		      .byte.b	$ff
   4662  20b3					      repend
   4663  20b4		       ff		      .byte.b	$ff
   4662  20b4					      repend
   4663  20b5		       ff		      .byte.b	$ff
   4662  20b5					      repend
   4663  20b6		       ff		      .byte.b	$ff
   4662  20b6					      repend
   4663  20b7		       ff		      .byte.b	$ff
   4662  20b7					      repend
   4663  20b8		       ff		      .byte.b	$ff
   4662  20b8					      repend
   4663  20b9		       ff		      .byte.b	$ff
   4662  20b9					      repend
   4663  20ba		       ff		      .byte.b	$ff
   4662  20ba					      repend
   4663  20bb		       ff		      .byte.b	$ff
   4662  20bb					      repend
   4663  20bc		       ff		      .byte.b	$ff
   4662  20bc					      repend
   4663  20bd		       ff		      .byte.b	$ff
   4662  20bd					      repend
   4663  20be		       ff		      .byte.b	$ff
   4662  20be					      repend
   4663  20bf		       ff		      .byte.b	$ff
   4662  20bf					      repend
   4663  20c0		       ff		      .byte.b	$ff
   4662  20c0					      repend
   4663  20c1		       ff		      .byte.b	$ff
   4662  20c1					      repend
   4663  20c2		       ff		      .byte.b	$ff
   4662  20c2					      repend
   4663  20c3		       ff		      .byte.b	$ff
   4662  20c3					      repend
   4663  20c4		       ff		      .byte.b	$ff
   4662  20c4					      repend
   4663  20c5		       ff		      .byte.b	$ff
   4662  20c5					      repend
   4663  20c6		       ff		      .byte.b	$ff
   4662  20c6					      repend
   4663  20c7		       ff		      .byte.b	$ff
   4662  20c7					      repend
   4663  20c8		       ff		      .byte.b	$ff
   4662  20c8					      repend
   4663  20c9		       ff		      .byte.b	$ff
   4662  20c9					      repend
   4663  20ca		       ff		      .byte.b	$ff
   4662  20ca					      repend
   4663  20cb		       ff		      .byte.b	$ff
   4662  20cb					      repend
   4663  20cc		       ff		      .byte.b	$ff
   4662  20cc					      repend
   4663  20cd		       ff		      .byte.b	$ff
   4662  20cd					      repend
   4663  20ce		       ff		      .byte.b	$ff
   4662  20ce					      repend
   4663  20cf		       ff		      .byte.b	$ff
   4662  20cf					      repend
   4663  20d0		       ff		      .byte.b	$ff
   4662  20d0					      repend
   4663  20d1		       ff		      .byte.b	$ff
   4662  20d1					      repend
   4663  20d2		       ff		      .byte.b	$ff
   4662  20d2					      repend
   4663  20d3		       ff		      .byte.b	$ff
   4662  20d3					      repend
   4663  20d4		       ff		      .byte.b	$ff
   4662  20d4					      repend
   4663  20d5		       ff		      .byte.b	$ff
   4662  20d5					      repend
   4663  20d6		       ff		      .byte.b	$ff
   4662  20d6					      repend
   4663  20d7		       ff		      .byte.b	$ff
   4662  20d7					      repend
   4663  20d8		       ff		      .byte.b	$ff
   4662  20d8					      repend
   4663  20d9		       ff		      .byte.b	$ff
   4662  20d9					      repend
   4663  20da		       ff		      .byte.b	$ff
   4662  20da					      repend
   4663  20db		       ff		      .byte.b	$ff
   4662  20db					      repend
   4663  20dc		       ff		      .byte.b	$ff
   4662  20dc					      repend
   4663  20dd		       ff		      .byte.b	$ff
   4662  20dd					      repend
   4663  20de		       ff		      .byte.b	$ff
   4662  20de					      repend
   4663  20df		       ff		      .byte.b	$ff
   4662  20df					      repend
   4663  20e0		       ff		      .byte.b	$ff
   4662  20e0					      repend
   4663  20e1		       ff		      .byte.b	$ff
   4662  20e1					      repend
   4663  20e2		       ff		      .byte.b	$ff
   4662  20e2					      repend
   4663  20e3		       ff		      .byte.b	$ff
   4662  20e3					      repend
   4663  20e4		       ff		      .byte.b	$ff
   4662  20e4					      repend
   4663  20e5		       ff		      .byte.b	$ff
   4662  20e5					      repend
   4663  20e6		       ff		      .byte.b	$ff
   4662  20e6					      repend
   4663  20e7		       ff		      .byte.b	$ff
   4662  20e7					      repend
   4663  20e8		       ff		      .byte.b	$ff
   4662  20e8					      repend
   4663  20e9		       ff		      .byte.b	$ff
   4662  20e9					      repend
   4663  20ea		       ff		      .byte.b	$ff
   4662  20ea					      repend
   4663  20eb		       ff		      .byte.b	$ff
   4662  20eb					      repend
   4663  20ec		       ff		      .byte.b	$ff
   4662  20ec					      repend
   4663  20ed		       ff		      .byte.b	$ff
   4662  20ed					      repend
   4663  20ee		       ff		      .byte.b	$ff
   4662  20ee					      repend
   4663  20ef		       ff		      .byte.b	$ff
   4662  20ef					      repend
   4663  20f0		       ff		      .byte.b	$ff
   4662  20f0					      repend
   4663  20f1		       ff		      .byte.b	$ff
   4662  20f1					      repend
   4663  20f2		       ff		      .byte.b	$ff
   4662  20f2					      repend
   4663  20f3		       ff		      .byte.b	$ff
   4662  20f3					      repend
   4663  20f4		       ff		      .byte.b	$ff
   4662  20f4					      repend
   4663  20f5		       ff		      .byte.b	$ff
   4662  20f5					      repend
   4663  20f6		       ff		      .byte.b	$ff
   4662  20f6					      repend
   4663  20f7		       ff		      .byte.b	$ff
   4662  20f7					      repend
   4663  20f8		       ff		      .byte.b	$ff
   4662  20f8					      repend
   4663  20f9		       ff		      .byte.b	$ff
   4662  20f9					      repend
   4663  20fa		       ff		      .byte.b	$ff
   4662  20fa					      repend
   4663  20fb		       ff		      .byte.b	$ff
   4662  20fb					      repend
   4663  20fc		       ff		      .byte.b	$ff
   4662  20fc					      repend
   4663  20fd		       ff		      .byte.b	$ff
   4662  20fd					      repend
   4663  20fe		       ff		      .byte.b	$ff
   4662  20fe					      repend
   4663  20ff		       ff		      .byte.b	$ff
   4664  2100					      repend
   4665  2100							; Provided under the CC0 license. See the included LICENSE.txt for details.
   4666  2100
   4667  2100							; This is a 2-line kernel!
   4668  2100					      ifnconst	vertical_reflect
   4669  2100				   kernel
   4670  2100					      endif
   4671  2100		       85 02		      sta	WSYNC
   4672  2102		       a9 ff		      lda	#255
   4673  2104		       8d 96 02 	      sta	TIM64T
   4674  2107
   4675  2107		       a9 01		      lda	#1
   4676  2109		       85 27		      sta	VDELBL
   4677  210b		       85 25		      sta	VDELP0
   4678  210d		       a6 92		      ldx	ballheight
   4679  210f		       e8		      inx
   4680  2110		       e8		      inx
   4681  2111		       86 9f		      stx	temp4
   4682  2113		       a5 86		      lda	player1y
   4683  2115		       85 9e		      sta	temp3
   4684  2117
   4685  2117				  -	      ifconst	shakescreen
   4686  2117				  -	      jsr	doshakescreen
   4687  2117					      else
   4688  2117		       a6 90		      ldx	missile0height
   4689  2119		       e8		      inx
   4690  211a					      endif
   4691  211a
   4692  211a		       e8		      inx
   4693  211b		       86 f6		      stx	stack1
   4694  211d
   4695  211d		       a5 89		      lda	bally
   4696  211f		       85 f7		      sta	stack2
   4697  2121
   4698  2121		       a5 85		      lda	player0y
   4699  2123		       a2 00		      ldx	#0
   4700  2125		       85 02		      sta	WSYNC
   4701  2127		       86 1b		      stx	GRP0
   4702  2129		       86 1c		      stx	GRP1
   4703  212b		       86 0e		      stx	PF1L
   4704  212d		       86 0f		      stx	PF2
   4705  212f		       86 2c		      stx	CXCLR
   4706  2131				  -	      ifconst	readpaddle
   4707  2131				  -	      stx	paddle
   4708  2131					      else
      0  2131					      sleep	3
      1  2131				   .CYCLES    SET	3
      2  2131
      3  2131				  -	      IF	.CYCLES < 2
      4  2131				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  2131				  -	      ERR
      6  2131					      ENDIF
      7  2131
      8  2131					      IF	.CYCLES & 1
      9  2131					      IFNCONST	NO_ILLEGAL_OPCODES
     10  2131		       04 00		      nop	0
     11  2133				  -	      ELSE
     12  2133				  -	      bit	VSYNC
     13  2133					      ENDIF
     14  2133				   .CYCLES    SET	.CYCLES - 3
     15  2133					      ENDIF
     16  2133
     17  2133				  -	      REPEAT	.CYCLES / 2
     18  2133				  -	      nop
     19  2133					      REPEND
   4710  2133					      endif
   4711  2133
   4712  2133		       95 9d		      sta	temp2,x
   4713  2135
   4714  2135							;store these so they can be retrieved later
   4715  2135				  -	      ifnconst	pfres
   4716  2135				  -	      ldx	#128-44+(4-pfwidth)*12
   4717  2135					      else
   4718  2135		       a2 74		      ldx	#132-pfres*pfwidth
   4719  2137					      endif
   4720  2137
   4721  2137		       c6 85		      dec	player0y
   4722  2139
   4723  2139		       a5 91		      lda	missile0y
   4724  213b		       85 a0		      sta	temp5
   4725  213d		       a5 88		      lda	missile1y
   4726  213f		       85 a1		      sta	temp6
   4727  2141
   4728  2141		       a5 ef		      lda	playfieldpos
   4729  2143		       85 9c		      sta	temp1
   4730  2145
   4731  2145				  -	      ifconst	pfrowheight
   4732  2145				  -	      lda	#pfrowheight+2
   4733  2145					      else
   4734  2145				  -	      ifnconst	pfres
   4735  2145				  -	      lda	#10
   4736  2145					      else
   4737  2145		       a9 1a		      lda	#(96/pfres)+2	; try to come close to the real size
   4738  2147					      endif
   4739  2147					      endif
   4740  2147		       18		      clc
   4741  2148		       e5 ef		      sbc	playfieldpos
   4742  214a		       85 ef		      sta	playfieldpos
   4743  214c		       4c 78 f1 	      jmp	.startkernel
   4744  214f
   4745  214f				   .skipDrawP0
   4746  214f		       a9 00		      lda	#0
   4747  2151		       a8		      tay
   4748  2152		       4c aa f1 	      jmp	.continueP0
   4749  2155
   4750  2155				   .skipDrawP1
   4751  2155		       a9 00		      lda	#0
   4752  2157		       a8		      tay
   4753  2158		       4c 82 f1 	      jmp	.continueP1
   4754  215b
   4755  215b				   .kerloop		; enter at cycle 59??
   4756  215b
   4757  215b				   continuekernel
      0  215b					      sleep	2
      1  215b				   .CYCLES    SET	2
      2  215b
      3  215b				  -	      IF	.CYCLES < 2
      4  215b				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  215b				  -	      ERR
      6  215b					      ENDIF
      7  215b
      8  215b				  -	      IF	.CYCLES & 1
      9  215b				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  215b				  -	      nop	0
     11  215b				  -	      ELSE
     12  215b				  -	      bit	VSYNC
     13  215b				  -	      ENDIF
     14  215b				  -.CYCLES    SET	.CYCLES - 3
     15  215b					      ENDIF
     16  215b
     17  215b					      REPEAT	.CYCLES / 2
     18  215b		       ea		      nop
     19  215c					      REPEND
   4759  215c				   continuekernel2
   4760  215c		       a5 92		      lda	ballheight
   4761  215e
   4762  215e					      ifconst	pfres
   4763  215e		       bc 7c 10 	      ldy	playfield+pfres*pfwidth-132,x
   4764  2161		       84 0e		      sty	PF1L	;3
   4765  2163		       bc 7d 10 	      ldy	playfield+pfres*pfwidth-131-pfadjust,x
   4766  2166		       84 0f		      sty	PF2L	;3
   4767  2168		       bc 7f 10 	      ldy	playfield+pfres*pfwidth-129,x
   4768  216b		       84 0e		      sty	PF1R	; 3 too early?
   4769  216d		       bc 7e 10 	      ldy	playfield+pfres*pfwidth-130-pfadjust,x
   4770  2170		       84 0f		      sty	PF2R	;3
   4771  2172				  -	      else
   4772  2172				  -	      ldy	playfield-48+pfwidth*12+44-128,x
   4773  2172				  -	      sty	PF1L	;3
   4774  2172				  -	      ldy	playfield-48+pfwidth*12+45-128-pfadjust,x	;4
   4775  2172				  -	      sty	PF2L	;3
   4776  2172				  -	      ldy	playfield-48+pfwidth*12+47-128,x	;4
   4777  2172				  -	      sty	PF1R	; 3 too early?
   4778  2172				  -	      ldy	playfield-48+pfwidth*12+46-128-pfadjust,x	;4
   4779  2172				  -	      sty	PF2R	;3
   4780  2172					      endif
   4781  2172
   4782  2172							; should be playfield+$38 for width=2
   4783  2172
   4784  2172		       c7 89		      dcp	bally
   4785  2174		       2a		      rol
   4786  2175		       2a		      rol
   4787  2176							; rol
   4788  2176							; rol
   4789  2176				   goback
   4790  2176		       85 1f		      sta	ENABL
   4791  2178				   .startkernel
   4792  2178		       a5 8f		      lda	player1height	;3
   4793  217a		       c7 86		      dcp	player1y	;5
   4794  217c		       90 d7		      bcc	.skipDrawP1	;2
   4795  217e		       a4 86		      ldy	player1y	;3
   4796  2180		       b1 8c		      lda	(player1pointer),y	;5; player0pointer must be selected carefully by the compiler
   4797  2182							; so it doesn't cross a page boundary!
   4798  2182
   4799  2182				   .continueP1
   4800  2182		       85 1c		      sta	GRP1	;3
   4801  2184
   4802  2184				  -	      ifnconst	player1colors
   4803  2184				  -	      lda	missile1height	;3
   4804  2184				  -	      dcp	missile1y	;5
   4805  2184				  -	      rol		;2
   4806  2184				  -	      rol		;2
   4807  2184				  -	      sta	ENAM1	;3
   4808  2184					      else
   4809  2184		       b1 87		      lda	(player1color),y
   4810  2186		       85 07		      sta	COLUP1
   4811  2188					      ifnconst	playercolors
      0  2188					      sleep	7
      1  2188				   .CYCLES    SET	7
      2  2188
      3  2188				  -	      IF	.CYCLES < 2
      4  2188				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  2188				  -	      ERR
      6  2188					      ENDIF
      7  2188
      8  2188					      IF	.CYCLES & 1
      9  2188					      IFNCONST	NO_ILLEGAL_OPCODES
     10  2188		       04 00		      nop	0
     11  218a				  -	      ELSE
     12  218a				  -	      bit	VSYNC
     13  218a					      ENDIF
     14  218a				   .CYCLES    SET	.CYCLES - 3
     15  218a					      ENDIF
     16  218a
     17  218a					      REPEAT	.CYCLES / 2
     18  218a		       ea		      nop
     17  218a					      REPEND
     18  218b		       ea		      nop
     19  218c					      REPEND
   4813  218c				  -	      else
   4814  218c				  -	      lda.w	player0colorstore
   4815  218c				  -	      sta	COLUP0
   4816  218c					      endif
   4817  218c					      endif
   4818  218c
   4819  218c					      ifconst	pfres
   4820  218c		       bd 7c 10 	      lda	playfield+pfres*pfwidth-132,x
   4821  218f		       85 0e		      sta	PF1L	;3
   4822  2191		       bd 7d 10 	      lda	playfield+pfres*pfwidth-131-pfadjust,x
   4823  2194		       85 0f		      sta	PF2L	;3
   4824  2196		       bd 7f 10 	      lda	playfield+pfres*pfwidth-129,x
   4825  2199		       85 0e		      sta	PF1R	; 3 too early?
   4826  219b		       bd 7e 10 	      lda	playfield+pfres*pfwidth-130-pfadjust,x
   4827  219e		       85 0f		      sta	PF2R	;3
   4828  21a0				  -	      else
   4829  21a0				  -	      lda	playfield-48+pfwidth*12+44-128,x	;4
   4830  21a0				  -	      sta	PF1L	;3
   4831  21a0				  -	      lda	playfield-48+pfwidth*12+45-128-pfadjust,x	;4
   4832  21a0				  -	      sta	PF2L	;3
   4833  21a0				  -	      lda	playfield-48+pfwidth*12+47-128,x	;4
   4834  21a0				  -	      sta	PF1R	; 3 too early?
   4835  21a0				  -	      lda	playfield-48+pfwidth*12+46-128-pfadjust,x	;4
   4836  21a0				  -	      sta	PF2R	;3
   4837  21a0					      endif
   4838  21a0							; sleep 3
   4839  21a0
   4840  21a0		       a5 8e		      lda	player0height
   4841  21a2		       c7 85		      dcp	player0y
   4842  21a4		       90 a9		      bcc	.skipDrawP0
   4843  21a6		       a4 85		      ldy	player0y
   4844  21a8		       b1 8a		      lda	(player0pointer),y
   4845  21aa				   .continueP0
   4846  21aa		       85 1b		      sta	GRP0
   4847  21ac
   4848  21ac					      ifnconst	no_blank_lines
   4849  21ac					      ifnconst	playercolors
   4850  21ac		       a5 90		      lda	missile0height	;3
   4851  21ae		       c7 91		      dcp	missile0y	;5
   4852  21b0		       e5 f6		      sbc	stack1
   4853  21b2		       85 1d		      sta	ENAM0	;3
   4854  21b4				  -	      else
   4855  21b4				  -	      lda	(player0color),y
   4856  21b4				  -	      sta	player0colorstore
   4857  21b4				  -	      sleep	6
   4858  21b4					      endif
   4859  21b4		       c6 9c		      dec	temp1
   4860  21b6		       d0 a3		      bne	continuekernel
   4861  21b8				  -	      else
   4862  21b8				  -	      dec	temp1
   4863  21b8				  -	      beq	altkernel2
   4864  21b8				  -	      ifconst	readpaddle
   4865  21b8				  -	      ldy	currentpaddle
   4866  21b8				  -	      lda	INPT0,y
   4867  21b8				  -	      bpl	noreadpaddle
   4868  21b8				  -	      inc	paddle
   4869  21b8				  -	      jmp	continuekernel2
   4870  21b8				  -noreadpaddle
   4871  21b8				  -	      sleep	2
   4872  21b8				  -	      jmp	continuekernel
   4873  21b8				  -	      else
   4874  21b8				  -	      ifnconst	playercolors
   4875  21b8				  -	      ifconst	PFcolors
   4876  21b8				  -	      txa
   4877  21b8				  -	      tay
   4878  21b8				  -	      lda	(pfcolortable),y
   4879  21b8				  -	      ifnconst	backgroundchange
   4880  21b8				  -	      sta	COLUPF
   4881  21b8				  -	      else
   4882  21b8				  -	      sta	COLUBK
   4883  21b8				  -	      endif
   4884  21b8				  -	      jmp	continuekernel
   4885  21b8				  -	      else
   4886  21b8				  -	      ifconst	kernelmacrodef
   4887  21b8				  -	      kernelmacro
   4888  21b8				  -	      else
   4889  21b8				  -	      sleep	12
   4890  21b8				  -	      endif
   4891  21b8				  -	      endif
   4892  21b8				  -	      else
   4893  21b8				  -	      lda	(player0color),y
   4894  21b8				  -	      sta	player0colorstore
   4895  21b8				  -	      sleep	4
   4896  21b8				  -	      endif
   4897  21b8				  -	      jmp	continuekernel
   4898  21b8				  -	      endif
   4899  21b8				  -altkernel2
   4900  21b8				  -	      txa
   4901  21b8				  -	      ifnconst	vertical_reflect
   4902  21b8				  -	      sbx	#256-pfwidth
   4903  21b8				  -	      else
   4904  21b8				  -	      sbx	#256-pfwidth/2
   4905  21b8				  -	      endif
   4906  21b8				  -	      bmi	lastkernelline
   4907  21b8				  -	      ifconst	pfrowheight
   4908  21b8				  -	      lda	#pfrowheight
   4909  21b8				  -	      else
   4910  21b8				  -	      ifnconst	pfres
   4911  21b8				  -	      lda	#8
   4912  21b8				  -	      else
   4913  21b8				  -	      lda	#(96/pfres)	; try to come close to the real size
   4914  21b8				  -	      endif
   4915  21b8				  -	      endif
   4916  21b8				  -	      sta	temp1
   4917  21b8				  -	      jmp	continuekernel
   4918  21b8					      endif
   4919  21b8
   4920  21b8				   altkernel
   4921  21b8
   4922  21b8				  -	      ifconst	PFmaskvalue
   4923  21b8				  -	      lda	#PFmaskvalue
   4924  21b8					      else
   4925  21b8		       a9 00		      lda	#0
   4926  21ba					      endif
   4927  21ba		       85 0e		      sta	PF1L
   4928  21bc		       85 0f		      sta	PF2
   4929  21be
   4930  21be
   4931  21be							;sleep 3
   4932  21be
   4933  21be							;28 cycles to fix things
   4934  21be							;minus 11=17
   4935  21be
   4936  21be							; lax temp4
   4937  21be							; clc
   4938  21be		       8a		      txa
   4939  21bf					      ifnconst	vertical_reflect
   4940  21bf		       cb fc		      sbx	#256-pfwidth
   4941  21c1				  -	      else
   4942  21c1				  -	      sbx	#256-pfwidth/2
   4943  21c1					      endif
   4944  21c1
   4945  21c1		       30 12		      bmi	lastkernelline
   4946  21c3
   4947  21c3				  -	      ifconst	PFcolorandheight
   4948  21c3				  -	      ifconst	pfres
   4949  21c3				  -	      ldy	playfieldcolorandheight-131+pfres*pfwidth,x
   4950  21c3				  -	      else
   4951  21c3				  -	      ldy	playfieldcolorandheight-87,x
   4952  21c3				  -	      endif
   4953  21c3				  -	      ifnconst	backgroundchange
   4954  21c3				  -	      sty	COLUPF
   4955  21c3				  -	      else
   4956  21c3				  -	      sty	COLUBK
   4957  21c3				  -	      endif
   4958  21c3				  -	      ifconst	pfres
   4959  21c3				  -	      lda	playfieldcolorandheight-132+pfres*pfwidth,x
   4960  21c3				  -	      else
   4961  21c3				  -	      lda	playfieldcolorandheight-88,x
   4962  21c3				  -	      endif
   4963  21c3				  -	      sta.w	temp1
   4964  21c3					      endif
   4965  21c3				  -	      ifconst	PFheights
   4966  21c3				  -	      lsr
   4967  21c3				  -	      lsr
   4968  21c3				  -	      tay
   4969  21c3				  -	      lda	(pfheighttable),y
   4970  21c3				  -	      sta.w	temp1
   4971  21c3					      endif
   4972  21c3					      ifconst	PFcolors
   4973  21c3		       a8		      tay
   4974  21c4		       b1 f0		      lda	(pfcolortable),y
   4975  21c6					      ifnconst	backgroundchange
   4976  21c6		       85 08		      sta	COLUPF
   4977  21c8				  -	      else
   4978  21c8				  -	      sta	COLUBK
   4979  21c8					      endif
   4980  21c8				  -	      ifconst	pfrowheight
   4981  21c8				  -	      lda	#pfrowheight
   4982  21c8					      else
   4983  21c8				  -	      ifnconst	pfres
   4984  21c8				  -	      lda	#8
   4985  21c8					      else
   4986  21c8		       a9 18		      lda	#(96/pfres)	; try to come close to the real size
   4987  21ca					      endif
   4988  21ca					      endif
   4989  21ca		       85 9c		      sta	temp1
   4990  21cc					      endif
   4991  21cc					      ifnconst	PFcolorandheight
   4992  21cc				  -	      ifnconst	PFcolors
   4993  21cc				  -	      ifnconst	PFheights
   4994  21cc				  -	      ifnconst	no_blank_lines
   4995  21cc				  -			; read paddle 0
   4996  21cc				  -			; lo-res paddle read
   4997  21cc				  -			; bit INPT0
   4998  21cc				  -			; bmi paddleskipread
   4999  21cc				  -			; inc paddle0
   5000  21cc				  -			;donepaddleskip
   5001  21cc				  -	      sleep	10
   5002  21cc				  -	      ifconst	pfrowheight
   5003  21cc				  -	      lda	#pfrowheight
   5004  21cc				  -	      else
   5005  21cc				  -	      ifnconst	pfres
   5006  21cc				  -	      lda	#8
   5007  21cc				  -	      else
   5008  21cc				  -	      lda	#(96/pfres)	; try to come close to the real size
   5009  21cc				  -	      endif
   5010  21cc				  -	      endif
   5011  21cc				  -	      sta	temp1
   5012  21cc				  -	      endif
   5013  21cc				  -	      endif
   5014  21cc					      endif
   5015  21cc					      endif
   5016  21cc
   5017  21cc
   5018  21cc		       a5 92		      lda	ballheight
   5019  21ce		       c7 89		      dcp	bally
   5020  21d0		       e5 9f		      sbc	temp4
   5021  21d2
   5022  21d2
   5023  21d2		       4c 76 f1 	      jmp	goback
   5024  21d5
   5025  21d5
   5026  21d5					      ifnconst	no_blank_lines
   5027  21d5				   lastkernelline
   5028  21d5				  -	      ifnconst	PFcolors
   5029  21d5				  -	      sleep	10
   5030  21d5					      else
   5031  21d5		       a0 7c		      ldy	#124
   5032  21d7		       b1 f0		      lda	(pfcolortable),y
   5033  21d9		       85 08		      sta	COLUPF
   5034  21db					      endif
   5035  21db
   5036  21db				  -	      ifconst	PFheights
   5037  21db				  -	      ldx	#1
   5038  21db				  -			;sleep 4
   5039  21db				  -	      sleep	3	; this was over 1 cycle
   5040  21db					      else
   5041  21db		       a6 ef		      ldx	playfieldpos
   5042  21dd							;sleep 3
      0  21dd					      sleep	2	; this was over 1 cycle
      1  21dd				   .CYCLES    SET	2
      2  21dd
      3  21dd				  -	      IF	.CYCLES < 2
      4  21dd				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  21dd				  -	      ERR
      6  21dd					      ENDIF
      7  21dd
      8  21dd				  -	      IF	.CYCLES & 1
      9  21dd				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  21dd				  -	      nop	0
     11  21dd				  -	      ELSE
     12  21dd				  -	      bit	VSYNC
     13  21dd				  -	      ENDIF
     14  21dd				  -.CYCLES    SET	.CYCLES - 3
     15  21dd					      ENDIF
     16  21dd
     17  21dd					      REPEAT	.CYCLES / 2
     18  21dd		       ea		      nop
     19  21de					      REPEND
   5044  21de					      endif
   5045  21de
   5046  21de		       4c 1b f2 	      jmp	enterlastkernel
   5047  21e1
   5048  21e1				  -	      else
   5049  21e1				  -lastkernelline
   5050  21e1				  -
   5051  21e1				  -	      ifconst	PFheights
   5052  21e1				  -	      ldx	#1
   5053  21e1				  -			;sleep 5
   5054  21e1				  -	      sleep	4	; this was over 1 cycle
   5055  21e1				  -	      else
   5056  21e1				  -	      ldx	playfieldpos
   5057  21e1				  -			;sleep 4
   5058  21e1				  -	      sleep	3	; this was over 1 cycle
   5059  21e1				  -	      endif
   5060  21e1				  -
   5061  21e1				  -	      cpx	#0
   5062  21e1				  -	      bne	.enterfromNBL
   5063  21e1				  -	      jmp	no_blank_lines_bailout
   5064  21e1					      endif
   5065  21e1
   5066  21e1					      if	((<*)>$d5)
   5067  2200		       00 00 00 00*	      align	256
   5068  2200					      endif
   5069  2200							; this is a kludge to prevent page wrapping - fix!!!
   5070  2200
   5071  2200				   .skipDrawlastP1
   5072  2200		       a9 00		      lda	#0
   5073  2202		       a8		      tay		; added so we don't cross a page
   5074  2203		       4c 2d f2 	      jmp	.continuelastP1
   5075  2206
   5076  2206				   .endkerloop		; enter at cycle 59??
   5077  2206
   5078  2206		       ea		      nop
   5079  2207
   5080  2207				   .enterfromNBL
   5081  2207					      ifconst	pfres
   5082  2207		       ac fc 10 	      ldy.w	playfield+pfres*pfwidth-4
   5083  220a		       84 0e		      sty	PF1L	;3
   5084  220c		       ac fd 10 	      ldy.w	playfield+pfres*pfwidth-3-pfadjust
   5085  220f		       84 0f		      sty	PF2L	;3
   5086  2211		       ac ff 10 	      ldy.w	playfield+pfres*pfwidth-1
   5087  2214		       84 0e		      sty	PF1R	; possibly too early?
   5088  2216		       ac fe 10 	      ldy.w	playfield+pfres*pfwidth-2-pfadjust
   5089  2219		       84 0f		      sty	PF2R	;3
   5090  221b				  -	      else
   5091  221b				  -	      ldy.w	playfield-48+pfwidth*12+44
   5092  221b				  -	      sty	PF1L	;3
   5093  221b				  -	      ldy.w	playfield-48+pfwidth*12+45-pfadjust
   5094  221b				  -	      sty	PF2L	;3
   5095  221b				  -	      ldy.w	playfield-48+pfwidth*12+47
   5096  221b				  -	      sty	PF1R	; possibly too early?
   5097  221b				  -	      ldy.w	playfield-48+pfwidth*12+46-pfadjust
   5098  221b				  -	      sty	PF2R	;3
   5099  221b					      endif
   5100  221b
   5101  221b				   enterlastkernel
   5102  221b		       a5 92		      lda	ballheight
   5103  221d
   5104  221d							; tya
   5105  221d		       c7 89		      dcp	bally
   5106  221f							; sleep 4
   5107  221f
   5108  221f							; sbc stack3
   5109  221f		       2a		      rol
   5110  2220		       2a		      rol
   5111  2221		       85 1f		      sta	ENABL
   5112  2223
   5113  2223		       a5 8f		      lda	player1height	;3
   5114  2225		       c7 86		      dcp	player1y	;5
   5115  2227		       90 d7		      bcc	.skipDrawlastP1
   5116  2229		       a4 86		      ldy	player1y	;3
   5117  222b		       b1 8c		      lda	(player1pointer),y	;5; player0pointer must be selected carefully by the compiler
   5118  222d							; so it doesn't cross a page boundary!
   5119  222d
   5120  222d				   .continuelastP1
   5121  222d		       85 1c		      sta	GRP1	;3
   5122  222f
   5123  222f				  -	      ifnconst	player1colors
   5124  222f				  -	      lda	missile1height	;3
   5125  222f				  -	      dcp	missile1y	;5
   5126  222f					      else
   5127  222f		       b1 87		      lda	(player1color),y
   5128  2231		       85 07		      sta	COLUP1
   5129  2233					      endif
   5130  2233
   5131  2233		       ca		      dex
   5132  2234							;dec temp4 ; might try putting this above PF writes
   5133  2234		       f0 36		      beq	endkernel
   5134  2236
   5135  2236
   5136  2236					      ifconst	pfres
   5137  2236		       ac fc 10 	      ldy.w	playfield+pfres*pfwidth-4
   5138  2239		       84 0e		      sty	PF1L	;3
   5139  223b		       ac fd 10 	      ldy.w	playfield+pfres*pfwidth-3-pfadjust
   5140  223e		       84 0f		      sty	PF2L	;3
   5141  2240		       ac ff 10 	      ldy.w	playfield+pfres*pfwidth-1
   5142  2243		       84 0e		      sty	PF1R	; possibly too early?
   5143  2245		       ac fe 10 	      ldy.w	playfield+pfres*pfwidth-2-pfadjust
   5144  2248		       84 0f		      sty	PF2R	;3
   5145  224a				  -	      else
   5146  224a				  -	      ldy.w	playfield-48+pfwidth*12+44
   5147  224a				  -	      sty	PF1L	;3
   5148  224a				  -	      ldy.w	playfield-48+pfwidth*12+45-pfadjust
   5149  224a				  -	      sty	PF2L	;3
   5150  224a				  -	      ldy.w	playfield-48+pfwidth*12+47
   5151  224a				  -	      sty	PF1R	; possibly too early?
   5152  224a				  -	      ldy.w	playfield-48+pfwidth*12+46-pfadjust
   5153  224a				  -	      sty	PF2R	;3
   5154  224a					      endif
   5155  224a
   5156  224a				  -	      ifnconst	player1colors
   5157  224a				  -	      rol		;2
   5158  224a				  -	      rol		;2
   5159  224a				  -	      sta	ENAM1	;3
   5160  224a					      else
   5161  224a					      ifnconst	playercolors
      0  224a					      sleep	7
      1  224a				   .CYCLES    SET	7
      2  224a
      3  224a				  -	      IF	.CYCLES < 2
      4  224a				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  224a				  -	      ERR
      6  224a					      ENDIF
      7  224a
      8  224a					      IF	.CYCLES & 1
      9  224a					      IFNCONST	NO_ILLEGAL_OPCODES
     10  224a		       04 00		      nop	0
     11  224c				  -	      ELSE
     12  224c				  -	      bit	VSYNC
     13  224c					      ENDIF
     14  224c				   .CYCLES    SET	.CYCLES - 3
     15  224c					      ENDIF
     16  224c
     17  224c					      REPEAT	.CYCLES / 2
     18  224c		       ea		      nop
     17  224c					      REPEND
     18  224d		       ea		      nop
     19  224e					      REPEND
   5163  224e				  -	      else
   5164  224e				  -	      lda.w	player0colorstore
   5165  224e				  -	      sta	COLUP0
   5166  224e					      endif
   5167  224e					      endif
   5168  224e
   5169  224e		       ad 8e 00 	      lda.w	player0height
   5170  2251		       c7 85		      dcp	player0y
   5171  2253		       90 11		      bcc	.skipDrawlastP0
   5172  2255		       a4 85		      ldy	player0y
   5173  2257		       b1 8a		      lda	(player0pointer),y
   5174  2259				   .continuelastP0
   5175  2259		       85 1b		      sta	GRP0
   5176  225b
   5177  225b
   5178  225b
   5179  225b					      ifnconst	no_blank_lines
   5180  225b		       a5 90		      lda	missile0height	;3
   5181  225d		       c7 91		      dcp	missile0y	;5
   5182  225f		       e5 f6		      sbc	stack1
   5183  2261		       85 1d		      sta	ENAM0	;3
   5184  2263		       4c 06 f2 	      jmp	.endkerloop
   5185  2266				  -	      else
   5186  2266				  -	      ifconst	readpaddle
   5187  2266				  -	      ldy	currentpaddle
   5188  2266				  -	      lda	INPT0,y
   5189  2266				  -	      bpl	noreadpaddle2
   5190  2266				  -	      inc	paddle
   5191  2266				  -	      jmp	.endkerloop
   5192  2266				  -noreadpaddle2
   5193  2266				  -	      sleep	4
   5194  2266				  -	      jmp	.endkerloop
   5195  2266				  -	      else		; no_blank_lines and no paddle reading
   5196  2266				  -	      pla
   5197  2266				  -	      pha		; 14 cycles in 4 bytes
   5198  2266				  -	      pla
   5199  2266				  -	      pha
   5200  2266				  -			; sleep 14
   5201  2266				  -	      jmp	.endkerloop
   5202  2266				  -	      endif
   5203  2266					      endif
   5204  2266
   5205  2266
   5206  2266							; ifconst donepaddleskip
   5207  2266							;paddleskipread
   5208  2266							; this is kind of lame, since it requires 4 cycles from a page boundary crossing
   5209  2266							; plus we get a lo-res paddle read
   5210  2266							; bmi donepaddleskip
   5211  2266							; endif
   5212  2266
   5213  2266				   .skipDrawlastP0
   5214  2266		       a9 00		      lda	#0
   5215  2268		       a8		      tay
   5216  2269		       4c 59 f2 	      jmp	.continuelastP0
   5217  226c
   5218  226c				  -	      ifconst	no_blank_lines
   5219  226c				  -no_blank_lines_bailout
   5220  226c				  -	      ldx	#0
   5221  226c					      endif
   5222  226c
   5223  226c				   endkernel
   5224  226c							; 6 digit score routine
   5225  226c		       86 0e		      stx	PF1
   5226  226e		       86 0f		      stx	PF2
   5227  2270		       86 0d		      stx	PF0
   5228  2272		       18		      clc
   5229  2273
   5230  2273				  -	      ifconst	pfrowheight
   5231  2273				  -	      lda	#pfrowheight+2
   5232  2273					      else
   5233  2273				  -	      ifnconst	pfres
   5234  2273				  -	      lda	#10
   5235  2273					      else
   5236  2273		       a9 1a		      lda	#(96/pfres)+2	; try to come close to the real size
   5237  2275					      endif
   5238  2275					      endif
   5239  2275
   5240  2275		       e5 ef		      sbc	playfieldpos
   5241  2277		       85 ef		      sta	playfieldpos
   5242  2279		       8a		      txa
   5243  227a
   5244  227a				  -	      ifconst	shakescreen
   5245  227a				  -	      bit	shakescreen
   5246  227a				  -	      bmi	noshakescreen2
   5247  227a				  -	      ldx	#$3D
   5248  227a				  -noshakescreen2
   5249  227a					      endif
   5250  227a
   5251  227a		       95 02		      sta	WSYNC,x
   5252  227c
   5253  227c							; STA WSYNC ;first one, need one more
   5254  227c		       85 0b		      sta	REFP0
   5255  227e		       85 0c		      sta	REFP1
   5256  2280		       85 1b		      STA	GRP0
   5257  2282		       85 1c		      STA	GRP1
   5258  2284							; STA PF1
   5259  2284							; STA PF2
   5260  2284		       85 2b		      sta	HMCLR
   5261  2286		       85 1d		      sta	ENAM0
   5262  2288		       85 1e		      sta	ENAM1
   5263  228a		       85 1f		      sta	ENABL
   5264  228c
   5265  228c		       a5 9d		      lda	temp2	;restore variables that were obliterated by kernel
   5266  228e		       85 85		      sta	player0y
   5267  2290		       a5 9e		      lda	temp3
   5268  2292		       85 86		      sta	player1y
   5269  2294				  -	      ifnconst	player1colors
   5270  2294				  -	      lda	temp6
   5271  2294				  -	      sta	missile1y
   5272  2294					      endif
   5273  2294					      ifnconst	playercolors
   5274  2294					      ifnconst	readpaddle
   5275  2294		       a5 a0		      lda	temp5
   5276  2296		       85 91		      sta	missile0y
   5277  2298					      endif
   5278  2298					      endif
   5279  2298		       a5 f7		      lda	stack2
   5280  229a		       85 89		      sta	bally
   5281  229c
   5282  229c							; strangely, this isn't required any more. might have
   5283  229c							; resulted from the no_blank_lines score bounce fix
   5284  229c							;ifconst no_blank_lines
   5285  229c							;sta WSYNC
   5286  229c							;endif
   5287  229c
   5288  229c		       ad 84 02 	      lda	INTIM
   5289  229f		       18		      clc
   5290  22a0					      ifnconst	vblank_time
   5291  22a0		       69 8e		      adc	#43+12+87
   5292  22a2				  -	      else
   5293  22a2				  -	      adc	#vblank_time+12+87
   5294  22a2				  -
   5295  22a2					      endif
   5296  22a2							; sta WSYNC
   5297  22a2		       8d 96 02 	      sta	TIM64T
   5298  22a5
   5299  22a5					      ifconst	minikernel
   5300  22a5		       20 d5 fe 	      jsr	minikernel
   5301  22a8					      endif
   5302  22a8
   5303  22a8							; now reassign temp vars for score pointers
   5304  22a8
   5305  22a8							; score pointers contain:
   5306  22a8							; score1-5: lo1,lo2,lo3,lo4,lo5,lo6
   5307  22a8							; swap lo2->temp1
   5308  22a8							; swap lo4->temp3
   5309  22a8							; swap lo6->temp5
   5310  22a8					      ifnconst	noscore
   5311  22a8		       a5 97		      lda	scorepointers+1
   5312  22aa							; ldy temp1
   5313  22aa		       85 9c		      sta	temp1
   5314  22ac							; sty scorepointers+1
   5315  22ac
   5316  22ac		       a5 99		      lda	scorepointers+3
   5317  22ae							; ldy temp3
   5318  22ae		       85 9e		      sta	temp3
   5319  22b0							; sty scorepointers+3
   5320  22b0
   5321  22b0
   5322  22b0		       85 2b		      sta	HMCLR
   5323  22b2		       ba		      tsx
   5324  22b3		       86 f6		      stx	stack1
   5325  22b5		       a2 e0		      ldx	#$E0
   5326  22b7		       86 20		      stx	HMP0
   5327  22b9
   5328  22b9		       a5 a3		      LDA	scorecolor
   5329  22bb		       85 06		      STA	COLUP0
   5330  22bd		       85 07		      STA	COLUP1
   5331  22bf				  -	      ifconst	scorefade
   5332  22bf				  -	      STA	stack2
   5333  22bf					      endif
   5334  22bf					      ifconst	pfscore
   5335  22bf		       a5 f4		      lda	pfscorecolor
   5336  22c1		       85 08		      sta	COLUPF
   5337  22c3					      endif
   5338  22c3		       85 02		      sta	WSYNC
   5339  22c5		       a2 00		      ldx	#0
   5340  22c7		       86 1b		      STx	GRP0
   5341  22c9		       86 1c		      STx	GRP1	; seems to be needed because of vdel
   5342  22cb
   5343  22cb		       a5 9b		      lda	scorepointers+5
   5344  22cd							; ldy temp5
   5345  22cd		       95 a0		      sta	temp5,x
   5346  22cf							; sty scorepointers+5
   5347  22cf		       a9 ff		      lda	#>scoretable
   5348  22d1		       85 97		      sta	scorepointers+1
   5349  22d3		       85 99		      sta	scorepointers+3
   5350  22d5		       85 9b		      sta	scorepointers+5
   5351  22d7		       85 9d		      sta	temp2
   5352  22d9		       85 9f		      sta	temp4
   5353  22db		       85 a1		      sta	temp6
   5354  22dd		       a0 07		      LDY	#7
   5355  22df		       84 25		      STY	VDELP0
   5356  22e1		       85 10		      STA	RESP0
   5357  22e3		       85 11		      STA	RESP1
   5358  22e5
   5359  22e5
   5360  22e5		       a9 03		      LDA	#$03
   5361  22e7		       85 04		      STA	NUSIZ0
   5362  22e9		       85 05		      STA	NUSIZ1
   5363  22eb		       85 26		      STA	VDELP1
   5364  22ed		       a9 f0		      LDA	#$F0
   5365  22ef		       85 21		      STA	HMP1
   5366  22f1		       b1 96		      lda	(scorepointers),y
   5367  22f3		       85 1b		      sta	GRP0
   5368  22f5		       85 2a		      STA	HMOVE	; cycle 73 ?
   5369  22f7		       4c 09 f3 	      jmp	beginscore
   5370  22fa
   5371  22fa
   5372  22fa					      if	((<*)>$d4)
   5373  2300		       00 00 00 00*	      align	256	; kludge that potentially wastes space! should be fixed!
   5374  2300					      endif
   5375  2300
   5376  2300				   loop2
   5377  2300		       b1 96		      lda	(scorepointers),y	;+5 68 204
   5378  2302		       85 1b		      sta	GRP0	;+3 71 213 D1 -- -- --
   5379  2304					      ifconst	pfscore
   5380  2304		       ad f2 00 	      lda.w	pfscore1
   5381  2307		       85 0e		      sta	PF1
   5382  2309				  -	      else
   5383  2309				  -	      ifconst	scorefade
   5384  2309				  -	      sleep	2
   5385  2309				  -	      dec	stack2	; decrement the temporary scorecolor
   5386  2309				  -	      else
   5387  2309				  -	      sleep	7
   5388  2309				  -	      endif
   5389  2309					      endif
   5390  2309							; cycle 0
   5391  2309				   beginscore
   5392  2309		       b1 9e		      lda	(scorepointers+$8),y	;+5 5 15
   5393  230b		       85 1c		      sta	GRP1	;+3 8 24 D1 D1 D2 --
   5394  230d		       b1 9c		      lda	(scorepointers+$6),y	;+5 13 39
   5395  230f		       85 1b		      sta	GRP0	;+3 16 48 D3 D1 D2 D2
   5396  2311		       b3 98		      lax	(scorepointers+$2),y	;+5 29 87
   5397  2313		       9a		      txs
   5398  2314		       b3 9a		      lax	(scorepointers+$4),y	;+5 36 108
   5399  2316				  -	      ifconst	scorefade
   5400  2316				  -	      lda	stack2
   5401  2316					      else
      0  2316					      sleep	3
      1  2316				   .CYCLES    SET	3
      2  2316
      3  2316				  -	      IF	.CYCLES < 2
      4  2316				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  2316				  -	      ERR
      6  2316					      ENDIF
      7  2316
      8  2316					      IF	.CYCLES & 1
      9  2316					      IFNCONST	NO_ILLEGAL_OPCODES
     10  2316		       04 00		      nop	0
     11  2318				  -	      ELSE
     12  2318				  -	      bit	VSYNC
     13  2318					      ENDIF
     14  2318				   .CYCLES    SET	.CYCLES - 3
     15  2318					      ENDIF
     16  2318
     17  2318				  -	      REPEAT	.CYCLES / 2
     18  2318				  -	      nop
     19  2318					      REPEND
   5403  2318					      endif
   5404  2318
   5405  2318					      ifconst	pfscore
   5406  2318		       a5 f3		      lda	pfscore2
   5407  231a		       85 0e		      sta	PF1
   5408  231c				  -	      else
   5409  231c				  -	      ifconst	scorefade
   5410  231c				  -	      sta	COLUP0
   5411  231c				  -	      sta	COLUP1
   5412  231c				  -	      else
   5413  231c				  -	      sleep	6
   5414  231c				  -	      endif
   5415  231c					      endif
   5416  231c
   5417  231c		       b1 a0		      lda	(scorepointers+$A),y	;+5 21 63
   5418  231e		       86 1c		      stx	GRP1	;+3 44 132 D3 D3 D4 D2!
   5419  2320		       ba		      tsx
   5420  2321		       86 1b		      stx	GRP0	;+3 47 141 D5 D3! D4 D4
   5421  2323		       85 1c		      sta	GRP1	;+3 50 150 D5 D5 D6 D4!
   5422  2325		       84 1b		      sty	GRP0	;+3 53 159 D4* D5! D6 D6
   5423  2327		       88		      dey
   5424  2328		       10 d6		      bpl	loop2	;+2 60 180
   5425  232a
   5426  232a		       a6 f6		      ldx	stack1
   5427  232c		       9a		      txs
   5428  232d							; lda scorepointers+1
   5429  232d		       a4 9c		      ldy	temp1
   5430  232f							; sta temp1
   5431  232f		       84 97		      sty	scorepointers+1
   5432  2331
   5433  2331		       a9 00		      LDA	#0
   5434  2333		       85 0e		      sta	PF1
   5435  2335		       85 1b		      STA	GRP0
   5436  2337		       85 1c		      STA	GRP1
   5437  2339		       85 25		      STA	VDELP0
   5438  233b		       85 26		      STA	VDELP1	;do we need these
   5439  233d		       85 04		      STA	NUSIZ0
   5440  233f		       85 05		      STA	NUSIZ1
   5441  2341
   5442  2341							; lda scorepointers+3
   5443  2341		       a4 9e		      ldy	temp3
   5444  2343							; sta temp3
   5445  2343		       84 99		      sty	scorepointers+3
   5446  2345
   5447  2345							; lda scorepointers+5
   5448  2345		       a4 a0		      ldy	temp5
   5449  2347							; sta temp5
   5450  2347		       84 9b		      sty	scorepointers+5
   5451  2349					      endif		;noscore
   5452  2349		       a9 c2		      LDA	#%11000010
   5453  234b		       85 02		      sta	WSYNC
   5454  234d		       85 01		      STA	VBLANK
      0  234f					      RETURN
      1  234f				  -	      ifnconst	bankswitch
      2  234f				  -	      rts
      3  234f					      else
      4  234f		       4c da ff 	      jmp	BS_return
      5  2352					      endif
   5456  2352
   5457  2352				  -	      ifconst	shakescreen
   5458  2352				  -doshakescreen
   5459  2352				  -	      bit	shakescreen
   5460  2352				  -	      bmi	noshakescreen
   5461  2352				  -	      sta	WSYNC
   5462  2352				  -noshakescreen
   5463  2352				  -	      ldx	missile0height
   5464  2352				  -	      inx
   5465  2352				  -	      rts
   5466  2352					      endif
   5467  2352
   5468  2352							; Provided under the CC0 license. See the included LICENSE.txt for details.
   5469  2352
   5470  2352				   start
   5471  2352		       78		      sei
   5472  2353		       d8		      cld
   5473  2354		       a0 00		      ldy	#0
   5474  2356		       a5 d0		      lda	$D0
   5475  2358		       c9 2c		      cmp	#$2C	;check RAM location #1
   5476  235a		       d0 07		      bne	MachineIs2600
   5477  235c		       a5 d1		      lda	$D1
   5478  235e		       c9 a9		      cmp	#$A9	;check RAM location #2
   5479  2360		       d0 01		      bne	MachineIs2600
   5480  2362		       88		      dey
   5481  2363				   MachineIs2600
   5482  2363		       a2 00		      ldx	#0
   5483  2365		       8a		      txa
   5484  2366				   clearmem
   5485  2366		       e8		      inx
   5486  2367		       9a		      txs
   5487  2368		       48		      pha
   5488  2369		       d0 fb		      bne	clearmem
   5489  236b		       84 9c		      sty	temp1
   5490  236d					      ifnconst	multisprite
   5491  236d				  -	      ifconst	pfrowheight
   5492  236d				  -	      lda	#pfrowheight
   5493  236d					      else
   5494  236d					      ifconst	pfres
   5495  236d		       a9 18		      lda	#(96/pfres)
   5496  236f				  -	      else
   5497  236f				  -	      lda	#8
   5498  236f					      endif
   5499  236f					      endif
   5500  236f		       85 ef		      sta	playfieldpos
   5501  2371					      endif
   5502  2371		       a2 05		      ldx	#5
   5503  2373				   initscore
   5504  2373		       a9 71		      lda	#<scoretable
   5505  2375		       95 96		      sta	scorepointers,x
   5506  2377		       ca		      dex
   5507  2378		       10 f9		      bpl	initscore
   5508  237a		       a9 01		      lda	#1
   5509  237c		       85 0a		      sta	CTRLPF
   5510  237e		       0d 84 02 	      ora	INTIM
   5511  2381		       85 a2		      sta	rand
   5512  2383
   5513  2383				  -	      ifconst	multisprite
   5514  2383				  -	      jsr	multisprite_setup
   5515  2383					      endif
   5516  2383
   5517  2383				  -	      ifnconst	bankswitch
   5518  2383				  -	      jmp	game
   5519  2383					      else
   5520  2383		       a9 d0		      lda	#>(game-1)
   5521  2385		       48		      pha
   5522  2386		       a9 ff		      lda	#<(game-1)
   5523  2388		       48		      pha
   5524  2389		       48		      pha
   5525  238a		       48		      pha
   5526  238b		       a2 01		      ldx	#1
   5527  238d		       4c e8 ff 	      jmp	BS_jsr
   5528  2390					      endif
   5529  2390							; Provided under the CC0 license. See the included LICENSE.txt for details.
   5530  2390
   5531  2390							; playfield drawing routines
   5532  2390							; you get a 32x12 bitmapped display in a single color :)
   5533  2390							; 0-31 and 0-11
   5534  2390
   5535  2390				   pfclear		; clears playfield - or fill with pattern
   5536  2390					      ifconst	pfres
   5537  2390		       a2 0f		      ldx	#pfres*pfwidth-1
   5538  2392				  -	      else
   5539  2392				  -	      ldx	#47-(4-pfwidth)*12	; will this work?
   5540  2392					      endif
   5541  2392				   pfclear_loop
   5542  2392				  -	      ifnconst	superchip
   5543  2392				  -	      sta	playfield,x
   5544  2392					      else
   5545  2392		       9d 70 10 	      sta	playfield-128,x
   5546  2395					      endif
   5547  2395		       ca		      dex
   5548  2396		       10 fa		      bpl	pfclear_loop
      0  2398					      RETURN
      1  2398				  -	      ifnconst	bankswitch
      2  2398				  -	      rts
      3  2398					      else
      4  2398		       4c da ff 	      jmp	BS_return
      5  239b					      endif
   5550  239b
   5551  239b				   setuppointers
   5552  239b		       86 9d		      stx	temp2	; store on.off.flip value
   5553  239d		       aa		      tax		; put x-value in x 
   5554  239e		       4a		      lsr
   5555  239f		       4a		      lsr
   5556  23a0		       4a		      lsr		; divide x pos by 8 
   5557  23a1		       85 9c		      sta	temp1
   5558  23a3		       98		      tya
   5559  23a4		       0a		      asl
   5560  23a5					      if	pfwidth=4
   5561  23a5		       0a		      asl		; multiply y pos by 4
   5562  23a6					      endif		; else multiply by 2
   5563  23a6		       18		      clc
   5564  23a7		       65 9c		      adc	temp1	; add them together to get actual memory location offset
   5565  23a9		       a8		      tay		; put the value in y
   5566  23aa		       a5 9d		      lda	temp2	; restore on.off.flip value
   5567  23ac		       60		      rts
   5568  23ad
   5569  23ad				   pfread
   5570  23ad							;x=xvalue, y=yvalue
   5571  23ad		       20 9b f3 	      jsr	setuppointers
   5572  23b0		       bd 45 f4 	      lda	setbyte,x
   5573  23b3		       39 f0 10 	      and	playfield,y
   5574  23b6		       5d 45 f4 	      eor	setbyte,x
   5575  23b9							; beq readzero
   5576  23b9							; lda #1
   5577  23b9							; readzero
      0  23b9					      RETURN
      1  23b9				  -	      ifnconst	bankswitch
      2  23b9				  -	      rts
      3  23b9					      else
      4  23b9		       4c da ff 	      jmp	BS_return
      5  23bc					      endif
   5579  23bc
   5580  23bc				   pfpixel
   5581  23bc							;x=xvalue, y=yvalue, a=0,1,2
   5582  23bc		       20 9b f3 	      jsr	setuppointers
   5583  23bf
   5584  23bf					      ifconst	bankswitch
   5585  23bf		       a5 9d		      lda	temp2	; load on.off.flip value (0,1, or 2)
   5586  23c1		       f0 0f		      beq	pixelon_r	; if "on" go to on
   5587  23c3		       4a		      lsr
   5588  23c4		       b0 18		      bcs	pixeloff_r	; value is 1 if true
   5589  23c6		       b9 f0 10 	      lda	playfield,y	; if here, it's "flip"
   5590  23c9		       5d 45 f4 	      eor	setbyte,x
   5591  23cc					      ifconst	superchip
   5592  23cc		       99 70 10 	      sta	playfield-128,y
   5593  23cf				  -	      else
   5594  23cf				  -	      sta	playfield,y
   5595  23cf					      endif
      0  23cf					      RETURN
      1  23cf				  -	      ifnconst	bankswitch
      2  23cf				  -	      rts
      3  23cf					      else
      4  23cf		       4c da ff 	      jmp	BS_return
      5  23d2					      endif
   5597  23d2				   pixelon_r
   5598  23d2		       b9 f0 10 	      lda	playfield,y
   5599  23d5		       1d 45 f4 	      ora	setbyte,x
   5600  23d8					      ifconst	superchip
   5601  23d8		       99 70 10 	      sta	playfield-128,y
   5602  23db				  -	      else
   5603  23db				  -	      sta	playfield,y
   5604  23db					      endif
      0  23db					      RETURN
      1  23db				  -	      ifnconst	bankswitch
      2  23db				  -	      rts
      3  23db					      else
      4  23db		       4c da ff 	      jmp	BS_return
      5  23de					      endif
   5606  23de				   pixeloff_r
   5607  23de		       bd 45 f4 	      lda	setbyte,x
   5608  23e1		       49 ff		      eor	#$ff
   5609  23e3		       39 f0 10 	      and	playfield,y
   5610  23e6					      ifconst	superchip
   5611  23e6		       99 70 10 	      sta	playfield-128,y
   5612  23e9				  -	      else
   5613  23e9				  -	      sta	playfield,y
   5614  23e9					      endif
      0  23e9					      RETURN
      1  23e9				  -	      ifnconst	bankswitch
      2  23e9				  -	      rts
      3  23e9					      else
      4  23e9		       4c da ff 	      jmp	BS_return
      5  23ec					      endif
   5616  23ec
   5617  23ec				  -	      else
   5618  23ec				  -	      jmp	plotpoint
   5619  23ec					      endif
   5620  23ec
   5621  23ec				   pfhline
   5622  23ec							;x=xvalue, y=yvalue, a=0,1,2, temp3=endx
   5623  23ec		       20 9b f3 	      jsr	setuppointers
   5624  23ef		       4c f9 f3 	      jmp	noinc
   5625  23f2				   keepgoing
   5626  23f2		       e8		      inx
   5627  23f3		       8a		      txa
   5628  23f4		       29 07		      and	#7
   5629  23f6		       d0 01		      bne	noinc
   5630  23f8		       c8		      iny
   5631  23f9				   noinc
   5632  23f9		       20 1e f4 	      jsr	plotpoint
   5633  23fc		       e4 9e		      cpx	temp3
   5634  23fe		       30 f2		      bmi	keepgoing
      0  2400					      RETURN
      1  2400				  -	      ifnconst	bankswitch
      2  2400				  -	      rts
      3  2400					      else
      4  2400		       4c da ff 	      jmp	BS_return
      5  2403					      endif
   5636  2403
   5637  2403				   pfvline
   5638  2403							;x=xvalue, y=yvalue, a=0,1,2, temp3=endx
   5639  2403		       20 9b f3 	      jsr	setuppointers
   5640  2406		       84 9c		      sty	temp1	; store memory location offset
   5641  2408		       e6 9e		      inc	temp3	; increase final x by 1 
   5642  240a		       a5 9e		      lda	temp3
   5643  240c		       0a		      asl
   5644  240d					      if	pfwidth=4
   5645  240d		       0a		      asl		; multiply by 4
   5646  240e					      endif		; else multiply by 2
   5647  240e		       85 9e		      sta	temp3	; store it
   5648  2410							; Thanks to Michael Rideout for fixing a bug in this code
   5649  2410							; right now, temp1=y=starting memory location, temp3=final
   5650  2410							; x should equal original x value
   5651  2410				   keepgoingy
   5652  2410		       20 1e f4 	      jsr	plotpoint
   5653  2413		       c8		      iny
   5654  2414		       c8		      iny
   5655  2415					      if	pfwidth=4
   5656  2415		       c8		      iny
   5657  2416		       c8		      iny
   5658  2417					      endif
   5659  2417		       c4 9e		      cpy	temp3
   5660  2419		       30 f5		      bmi	keepgoingy
      0  241b					      RETURN
      1  241b				  -	      ifnconst	bankswitch
      2  241b				  -	      rts
      3  241b					      else
      4  241b		       4c da ff 	      jmp	BS_return
      5  241e					      endif
   5662  241e
   5663  241e				   plotpoint
   5664  241e		       a5 9d		      lda	temp2	; load on.off.flip value (0,1, or 2)
   5665  2420		       f0 0d		      beq	pixelon	; if "on" go to on
   5666  2422		       4a		      lsr
   5667  2423		       b0 14		      bcs	pixeloff	; value is 1 if true
   5668  2425		       b9 f0 10 	      lda	playfield,y	; if here, it's "flip"
   5669  2428		       5d 45 f4 	      eor	setbyte,x
   5670  242b					      ifconst	superchip
   5671  242b		       99 70 10 	      sta	playfield-128,y
   5672  242e				  -	      else
   5673  242e				  -	      sta	playfield,y
   5674  242e					      endif
   5675  242e		       60		      rts
   5676  242f				   pixelon
   5677  242f		       b9 f0 10 	      lda	playfield,y
   5678  2432		       1d 45 f4 	      ora	setbyte,x
   5679  2435					      ifconst	superchip
   5680  2435		       99 70 10 	      sta	playfield-128,y
   5681  2438				  -	      else
   5682  2438				  -	      sta	playfield,y
   5683  2438					      endif
   5684  2438		       60		      rts
   5685  2439				   pixeloff
   5686  2439		       bd 45 f4 	      lda	setbyte,x
   5687  243c		       49 ff		      eor	#$ff
   5688  243e		       39 f0 10 	      and	playfield,y
   5689  2441					      ifconst	superchip
   5690  2441		       99 70 10 	      sta	playfield-128,y
   5691  2444				  -	      else
   5692  2444				  -	      sta	playfield,y
   5693  2444					      endif
   5694  2444		       60		      rts
   5695  2445
   5696  2445				   setbyte
   5697  2445					      ifnconst	pfcenter
   5698  2445		       80		      .byte.b	$80
   5699  2446		       40		      .byte.b	$40
   5700  2447		       20		      .byte.b	$20
   5701  2448		       10		      .byte.b	$10
   5702  2449		       08		      .byte.b	$08
   5703  244a		       04		      .byte.b	$04
   5704  244b		       02		      .byte.b	$02
   5705  244c		       01		      .byte.b	$01
   5706  244d					      endif
   5707  244d		       01		      .byte.b	$01
   5708  244e		       02		      .byte.b	$02
   5709  244f		       04		      .byte.b	$04
   5710  2450		       08		      .byte.b	$08
   5711  2451		       10		      .byte.b	$10
   5712  2452		       20		      .byte.b	$20
   5713  2453		       40		      .byte.b	$40
   5714  2454		       80		      .byte.b	$80
   5715  2455		       80		      .byte.b	$80
   5716  2456		       40		      .byte.b	$40
   5717  2457		       20		      .byte.b	$20
   5718  2458		       10		      .byte.b	$10
   5719  2459		       08		      .byte.b	$08
   5720  245a		       04		      .byte.b	$04
   5721  245b		       02		      .byte.b	$02
   5722  245c		       01		      .byte.b	$01
   5723  245d		       01		      .byte.b	$01
   5724  245e		       02		      .byte.b	$02
   5725  245f		       04		      .byte.b	$04
   5726  2460		       08		      .byte.b	$08
   5727  2461		       10		      .byte.b	$10
   5728  2462		       20		      .byte.b	$20
   5729  2463		       40		      .byte.b	$40
   5730  2464		       80		      .byte.b	$80
   5731  2465							; Provided under the CC0 license. See the included LICENSE.txt for details.
   5732  2465
   5733  2465				   pfscroll		;(a=0 left, 1 right, 2 up, 4 down, 6=upup, 12=downdown)
   5734  2465		       d0 2a		      bne	notleft
   5735  2467							;left
   5736  2467					      ifconst	pfres
   5737  2467		       a2 10		      ldx	#pfres*4
   5738  2469				  -	      else
   5739  2469				  -	      ldx	#48
   5740  2469					      endif
   5741  2469				   leftloop
   5742  2469		       bd ef 10 	      lda	playfield-1,x
   5743  246c		       4a		      lsr
   5744  246d
   5745  246d					      ifconst	superchip
   5746  246d		       bd ee 10 	      lda	playfield-2,x
   5747  2470		       2a		      rol
   5748  2471		       9d 6e 10 	      sta	playfield-130,x
   5749  2474		       bd ed 10 	      lda	playfield-3,x
   5750  2477		       6a		      ror
   5751  2478		       9d 6d 10 	      sta	playfield-131,x
   5752  247b		       bd ec 10 	      lda	playfield-4,x
   5753  247e		       2a		      rol
   5754  247f		       9d 6c 10 	      sta	playfield-132,x
   5755  2482		       bd ef 10 	      lda	playfield-1,x
   5756  2485		       6a		      ror
   5757  2486		       9d 6f 10 	      sta	playfield-129,x
   5758  2489				  -	      else
   5759  2489				  -	      rol	playfield-2,x
   5760  2489				  -	      ror	playfield-3,x
   5761  2489				  -	      rol	playfield-4,x
   5762  2489				  -	      ror	playfield-1,x
   5763  2489					      endif
   5764  2489
   5765  2489		       8a		      txa
   5766  248a		       cb 04		      sbx	#4
   5767  248c		       d0 db		      bne	leftloop
      0  248e					      RETURN
      1  248e				  -	      ifnconst	bankswitch
      2  248e				  -	      rts
      3  248e					      else
      4  248e		       4c da ff 	      jmp	BS_return
      5  2491					      endif
   5769  2491
   5770  2491				   notleft
   5771  2491		       4a		      lsr
   5772  2492		       90 2a		      bcc	notright
   5773  2494							;right
   5774  2494
   5775  2494					      ifconst	pfres
   5776  2494		       a2 10		      ldx	#pfres*4
   5777  2496				  -	      else
   5778  2496				  -	      ldx	#48
   5779  2496					      endif
   5780  2496				   rightloop
   5781  2496		       bd ec 10 	      lda	playfield-4,x
   5782  2499		       4a		      lsr
   5783  249a					      ifconst	superchip
   5784  249a		       bd ed 10 	      lda	playfield-3,x
   5785  249d		       2a		      rol
   5786  249e		       9d 6d 10 	      sta	playfield-131,x
   5787  24a1		       bd ee 10 	      lda	playfield-2,x
   5788  24a4		       6a		      ror
   5789  24a5		       9d 6e 10 	      sta	playfield-130,x
   5790  24a8		       bd ef 10 	      lda	playfield-1,x
   5791  24ab		       2a		      rol
   5792  24ac		       9d 6f 10 	      sta	playfield-129,x
   5793  24af		       bd ec 10 	      lda	playfield-4,x
   5794  24b2		       6a		      ror
   5795  24b3		       9d 6c 10 	      sta	playfield-132,x
   5796  24b6				  -	      else
   5797  24b6				  -	      rol	playfield-3,x
   5798  24b6				  -	      ror	playfield-2,x
   5799  24b6				  -	      rol	playfield-1,x
   5800  24b6				  -	      ror	playfield-4,x
   5801  24b6					      endif
   5802  24b6		       8a		      txa
   5803  24b7		       cb 04		      sbx	#4
   5804  24b9		       d0 db		      bne	rightloop
      0  24bb					      RETURN
      1  24bb				  -	      ifnconst	bankswitch
      2  24bb				  -	      rts
      3  24bb					      else
      4  24bb		       4c da ff 	      jmp	BS_return
      5  24be					      endif
   5806  24be
   5807  24be				   notright
   5808  24be		       4a		      lsr
   5809  24bf		       90 5b		      bcc	notup
   5810  24c1							;up
   5811  24c1		       4a		      lsr
   5812  24c2		       90 02		      bcc	onedecup
   5813  24c4		       c6 ef		      dec	playfieldpos
   5814  24c6				   onedecup
   5815  24c6		       c6 ef		      dec	playfieldpos
   5816  24c8		       f0 02		      beq	shiftdown
   5817  24ca		       10 4d		      bpl	noshiftdown2
   5818  24cc				   shiftdown
   5819  24cc				  -	      ifconst	pfrowheight
   5820  24cc				  -	      lda	#pfrowheight
   5821  24cc					      else
   5822  24cc				  -	      ifnconst	pfres
   5823  24cc				  -	      lda	#8
   5824  24cc					      else
   5825  24cc		       a9 18		      lda	#(96/pfres)	; try to come close to the real size
   5826  24ce					      endif
   5827  24ce					      endif
   5828  24ce
   5829  24ce		       85 ef		      sta	playfieldpos
   5830  24d0		       ad f3 10 	      lda	playfield+3
   5831  24d3		       85 9f		      sta	temp4
   5832  24d5		       ad f2 10 	      lda	playfield+2
   5833  24d8		       85 9e		      sta	temp3
   5834  24da		       ad f1 10 	      lda	playfield+1
   5835  24dd		       85 9d		      sta	temp2
   5836  24df		       ad f0 10 	      lda	playfield
   5837  24e2		       85 9c		      sta	temp1
   5838  24e4		       a2 00		      ldx	#0
   5839  24e6				   up2
   5840  24e6		       bd f4 10 	      lda	playfield+4,x
   5841  24e9					      ifconst	superchip
   5842  24e9		       9d 70 10 	      sta	playfield-128,x
   5843  24ec		       bd f5 10 	      lda	playfield+5,x
   5844  24ef		       9d 71 10 	      sta	playfield-127,x
   5845  24f2		       bd f6 10 	      lda	playfield+6,x
   5846  24f5		       9d 72 10 	      sta	playfield-126,x
   5847  24f8		       bd f7 10 	      lda	playfield+7,x
   5848  24fb		       9d 73 10 	      sta	playfield-125,x
   5849  24fe				  -	      else
   5850  24fe				  -	      sta	playfield,x
   5851  24fe				  -	      lda	playfield+5,x
   5852  24fe				  -	      sta	playfield+1,x
   5853  24fe				  -	      lda	playfield+6,x
   5854  24fe				  -	      sta	playfield+2,x
   5855  24fe				  -	      lda	playfield+7,x
   5856  24fe				  -	      sta	playfield+3,x
   5857  24fe					      endif
   5858  24fe		       8a		      txa
   5859  24ff		       cb fc		      sbx	#252
   5860  2501					      ifconst	pfres
   5861  2501		       e0 0c		      cpx	#(pfres-1)*4
   5862  2503				  -	      else
   5863  2503				  -	      cpx	#44
   5864  2503					      endif
   5865  2503		       d0 e1		      bne	up2
   5866  2505
   5867  2505		       a5 9f		      lda	temp4
   5868  2507
   5869  2507					      ifconst	superchip
   5870  2507					      ifconst	pfres
   5871  2507		       8d 7f 10 	      sta	playfield+pfres*4-129
   5872  250a		       a5 9e		      lda	temp3
   5873  250c		       8d 7e 10 	      sta	playfield+pfres*4-130
   5874  250f		       a5 9d		      lda	temp2
   5875  2511		       8d 7d 10 	      sta	playfield+pfres*4-131
   5876  2514		       a5 9c		      lda	temp1
   5877  2516		       8d 7c 10 	      sta	playfield+pfres*4-132
   5878  2519				  -	      else
   5879  2519				  -	      sta	playfield+47-128
   5880  2519				  -	      lda	temp3
   5881  2519				  -	      sta	playfield+46-128
   5882  2519				  -	      lda	temp2
   5883  2519				  -	      sta	playfield+45-128
   5884  2519				  -	      lda	temp1
   5885  2519				  -	      sta	playfield+44-128
   5886  2519					      endif
   5887  2519				  -	      else
   5888  2519				  -	      ifconst	pfres
   5889  2519				  -	      sta	playfield+pfres*4-1
   5890  2519				  -	      lda	temp3
   5891  2519				  -	      sta	playfield+pfres*4-2
   5892  2519				  -	      lda	temp2
   5893  2519				  -	      sta	playfield+pfres*4-3
   5894  2519				  -	      lda	temp1
   5895  2519				  -	      sta	playfield+pfres*4-4
   5896  2519				  -	      else
   5897  2519				  -	      sta	playfield+47
   5898  2519				  -	      lda	temp3
   5899  2519				  -	      sta	playfield+46
   5900  2519				  -	      lda	temp2
   5901  2519				  -	      sta	playfield+45
   5902  2519				  -	      lda	temp1
   5903  2519				  -	      sta	playfield+44
   5904  2519				  -	      endif
   5905  2519					      endif
   5906  2519				   noshiftdown2
      0  2519					      RETURN
      1  2519				  -	      ifnconst	bankswitch
      2  2519				  -	      rts
      3  2519					      else
      4  2519		       4c da ff 	      jmp	BS_return
      5  251c					      endif
   5908  251c
   5909  251c
   5910  251c				   notup
   5911  251c							;down
   5912  251c		       4a		      lsr
   5913  251d		       b0 02		      bcs	oneincup
   5914  251f		       e6 ef		      inc	playfieldpos
   5915  2521				   oneincup
   5916  2521		       e6 ef		      inc	playfieldpos
   5917  2523		       a5 ef		      lda	playfieldpos
   5918  2525
   5919  2525				  -	      ifconst	pfrowheight
   5920  2525				  -	      cmp	#pfrowheight+1
   5921  2525					      else
   5922  2525				  -	      ifnconst	pfres
   5923  2525				  -	      cmp	#9
   5924  2525					      else
   5925  2525		       c9 19		      cmp	#(96/pfres)+1	; try to come close to the real size
   5926  2527					      endif
   5927  2527					      endif
   5928  2527
   5929  2527		       90 4b		      bcc	noshiftdown
   5930  2529		       a9 01		      lda	#1
   5931  252b		       85 ef		      sta	playfieldpos
   5932  252d
   5933  252d					      ifconst	pfres
   5934  252d		       ad ff 10 	      lda	playfield+pfres*4-1
   5935  2530		       85 9f		      sta	temp4
   5936  2532		       ad fe 10 	      lda	playfield+pfres*4-2
   5937  2535		       85 9e		      sta	temp3
   5938  2537		       ad fd 10 	      lda	playfield+pfres*4-3
   5939  253a		       85 9d		      sta	temp2
   5940  253c		       ad fc 10 	      lda	playfield+pfres*4-4
   5941  253f				  -	      else
   5942  253f				  -	      lda	playfield+47
   5943  253f				  -	      sta	temp4
   5944  253f				  -	      lda	playfield+46
   5945  253f				  -	      sta	temp3
   5946  253f				  -	      lda	playfield+45
   5947  253f				  -	      sta	temp2
   5948  253f				  -	      lda	playfield+44
   5949  253f					      endif
   5950  253f
   5951  253f		       85 9c		      sta	temp1
   5952  2541
   5953  2541					      ifconst	pfres
   5954  2541		       a2 0c		      ldx	#(pfres-1)*4
   5955  2543				  -	      else
   5956  2543				  -	      ldx	#44
   5957  2543					      endif
   5958  2543				   down2
   5959  2543		       bd ef 10 	      lda	playfield-1,x
   5960  2546					      ifconst	superchip
   5961  2546		       9d 73 10 	      sta	playfield-125,x
   5962  2549		       bd ee 10 	      lda	playfield-2,x
   5963  254c		       9d 72 10 	      sta	playfield-126,x
   5964  254f		       bd ed 10 	      lda	playfield-3,x
   5965  2552		       9d 71 10 	      sta	playfield-127,x
   5966  2555		       bd ec 10 	      lda	playfield-4,x
   5967  2558		       9d 70 10 	      sta	playfield-128,x
   5968  255b				  -	      else
   5969  255b				  -	      sta	playfield+3,x
   5970  255b				  -	      lda	playfield-2,x
   5971  255b				  -	      sta	playfield+2,x
   5972  255b				  -	      lda	playfield-3,x
   5973  255b				  -	      sta	playfield+1,x
   5974  255b				  -	      lda	playfield-4,x
   5975  255b				  -	      sta	playfield,x
   5976  255b					      endif
   5977  255b		       8a		      txa
   5978  255c		       cb 04		      sbx	#4
   5979  255e		       d0 e3		      bne	down2
   5980  2560
   5981  2560		       a5 9f		      lda	temp4
   5982  2562					      ifconst	superchip
   5983  2562		       8d 73 10 	      sta	playfield-125
   5984  2565		       a5 9e		      lda	temp3
   5985  2567		       8d 72 10 	      sta	playfield-126
   5986  256a		       a5 9d		      lda	temp2
   5987  256c		       8d 71 10 	      sta	playfield-127
   5988  256f		       a5 9c		      lda	temp1
   5989  2571		       8d 70 10 	      sta	playfield-128
   5990  2574				  -	      else
   5991  2574				  -	      sta	playfield+3
   5992  2574				  -	      lda	temp3
   5993  2574				  -	      sta	playfield+2
   5994  2574				  -	      lda	temp2
   5995  2574				  -	      sta	playfield+1
   5996  2574				  -	      lda	temp1
   5997  2574				  -	      sta	playfield
   5998  2574					      endif
   5999  2574				   noshiftdown
      0  2574					      RETURN
      1  2574				  -	      ifnconst	bankswitch
      2  2574				  -	      rts
      3  2574					      else
      4  2574		       4c da ff 	      jmp	BS_return
      5  2577					      endif
   6001  2577							; Provided under the CC0 license. See the included LICENSE.txt for details.
   6002  2577
   6003  2577							;standard routines needed for pretty much all games
   6004  2577							; just the random number generator is left - maybe we should remove this asm file altogether?
   6005  2577							; repositioning code and score pointer setup moved to overscan
   6006  2577							; read switches, joysticks now compiler generated (more efficient)
   6007  2577
   6008  2577				   randomize
   6009  2577		       a5 a2		      lda	rand
   6010  2579		       4a		      lsr
   6011  257a				  -	      ifconst	rand16
   6012  257a				  -	      rol	rand16
   6013  257a					      endif
   6014  257a		       90 02		      bcc	noeor
   6015  257c		       49 b4		      eor	#$B4
   6016  257e				   noeor
   6017  257e		       85 a2		      sta	rand
   6018  2580				  -	      ifconst	rand16
   6019  2580				  -	      eor	rand16
   6020  2580					      endif
      0  2580					      RETURN
      1  2580				  -	      ifnconst	bankswitch
      2  2580				  -	      rts
      3  2580					      else
      4  2580		       4c da ff 	      jmp	BS_return
      5  2583					      endif
   6022  2583							; Provided under the CC0 license. See the included LICENSE.txt for details.
   6023  2583
   6024  2583				   drawscreen
   6025  2583				  -	      ifconst	debugscore
   6026  2583				  -	      ldx	#14
   6027  2583				  -	      lda	INTIM	; display # cycles left in the score
   6028  2583				  -
   6029  2583				  -	      ifconst	mincycles
   6030  2583				  -	      lda	mincycles
   6031  2583				  -	      cmp	INTIM
   6032  2583				  -	      lda	mincycles
   6033  2583				  -	      bcc	nochange
   6034  2583				  -	      lda	INTIM
   6035  2583				  -	      sta	mincycles
   6036  2583				  -nochange
   6037  2583				  -	      endif
   6038  2583				  -
   6039  2583				  -			; cmp #$2B
   6040  2583				  -			; bcs no_cycles_left
   6041  2583				  -	      bmi	cycles_left
   6042  2583				  -	      ldx	#64
   6043  2583				  -	      eor	#$ff	;make negative
   6044  2583				  -cycles_left
   6045  2583				  -	      stx	scorecolor
   6046  2583				  -	      and	#$7f	; clear sign bit
   6047  2583				  -	      tax
   6048  2583				  -	      lda	scorebcd,x
   6049  2583				  -	      sta	score+2
   6050  2583				  -	      lda	scorebcd1,x
   6051  2583				  -	      sta	score+1
   6052  2583				  -	      jmp	done_debugscore
   6053  2583				  -scorebcd
   6054  2583				  -	      .byte	$00, $64, $28, $92, $56, $20, $84, $48, $12, $76, $40
   6055  2583				  -	      .byte	$04, $68, $32, $96, $60, $24, $88, $52, $16, $80, $44
   6056  2583				  -	      .byte	$08, $72, $36, $00, $64, $28, $92, $56, $20, $84, $48
   6057  2583				  -	      .byte	$12, $76, $40, $04, $68, $32, $96, $60, $24, $88
   6058  2583				  -scorebcd1
   6059  2583				  -	      .byte	0, 0, 1, 1, 2, 3, 3, 4, 5, 5, 6
   6060  2583				  -	      .byte	7, 7, 8, 8, 9, $10, $10, $11, $12, $12, $13
   6061  2583				  -	      .byte	$14, $14, $15, $16, $16, $17, $17, $18, $19, $19, $20
   6062  2583				  -	      .byte	$21, $21, $22, $23, $23, $24, $24, $25, $26, $26
   6063  2583				  -done_debugscore
   6064  2583					      endif
   6065  2583
   6066  2583				  -	      ifconst	debugcycles
   6067  2583				  -	      lda	INTIM	; if we go over, it mucks up the background color
   6068  2583				  -			; cmp #$2B
   6069  2583				  -			; BCC overscan
   6070  2583				  -	      bmi	overscan
   6071  2583				  -	      sta	COLUBK
   6072  2583				  -	      bcs	doneoverscan
   6073  2583					      endif
   6074  2583
   6075  2583				   overscan
   6076  2583				  -	      ifconst	interlaced
   6077  2583				  -	      PHP
   6078  2583				  -	      PLA
   6079  2583				  -	      EOR	#4	; flip interrupt bit
   6080  2583				  -	      PHA
   6081  2583				  -	      PLP
   6082  2583				  -	      AND	#4	; isolate the interrupt bit
   6083  2583				  -	      TAX		; save it for later
   6084  2583					      endif
   6085  2583
   6086  2583				   overscanloop
   6087  2583		       ad 84 02 	      lda	INTIM	;wait for sync
   6088  2586		       30 fb		      bmi	overscanloop
   6089  2588				   doneoverscan
   6090  2588
   6091  2588							;do VSYNC
   6092  2588
   6093  2588				  -	      ifconst	interlaced
   6094  2588				  -	      CPX	#4
   6095  2588				  -	      BNE	oddframevsync
   6096  2588					      endif
   6097  2588
   6098  2588		       a9 02		      lda	#2
   6099  258a		       85 02		      sta	WSYNC
   6100  258c		       85 00		      sta	VSYNC
   6101  258e		       85 02		      STA	WSYNC
   6102  2590		       85 02		      STA	WSYNC
   6103  2592		       4a		      lsr
   6104  2593		       85 02		      STA	WSYNC
   6105  2595		       85 00		      STA	VSYNC
   6106  2597		       85 01		      sta	VBLANK
   6107  2599					      ifnconst	overscan_time
   6108  2599		       a9 a5		      lda	#37+128
   6109  259b				  -	      else
   6110  259b				  -	      lda	#overscan_time+128
   6111  259b					      endif
   6112  259b		       8d 96 02 	      sta	TIM64T
   6113  259e
   6114  259e				  -	      ifconst	interlaced
   6115  259e				  -	      jmp	postsync
   6116  259e				  -
   6117  259e				  -oddframevsync
   6118  259e				  -	      sta	WSYNC
   6119  259e				  -
   6120  259e				  -	      LDA	($80,X)	; 11 waste
   6121  259e				  -	      LDA	($80,X)	; 11 waste
   6122  259e				  -	      LDA	($80,X)	; 11 waste
   6123  259e				  -
   6124  259e				  -	      lda	#2
   6125  259e				  -	      sta	VSYNC
   6126  259e				  -	      sta	WSYNC
   6127  259e				  -	      sta	WSYNC
   6128  259e				  -	      sta	WSYNC
   6129  259e				  -
   6130  259e				  -	      LDA	($80,X)	; 11 waste
   6131  259e				  -	      LDA	($80,X)	; 11 waste
   6132  259e				  -	      LDA	($80,X)	; 11 waste
   6133  259e				  -
   6134  259e				  -	      lda	#0
   6135  259e				  -	      sta	VSYNC
   6136  259e				  -	      sta	VBLANK
   6137  259e				  -	      ifnconst	overscan_time
   6138  259e				  -	      lda	#37+128
   6139  259e				  -	      else
   6140  259e				  -	      lda	#overscan_time+128
   6141  259e				  -	      endif
   6142  259e				  -	      sta	TIM64T
   6143  259e				  -
   6144  259e				  -postsync
   6145  259e					      endif
   6146  259e
   6147  259e				  -	      ifconst	legacy
   6148  259e				  -	      if	legacy < 100
   6149  259e				  -	      ldx	#4
   6150  259e				  -adjustloop
   6151  259e				  -	      lda	player0x,x
   6152  259e				  -	      sec
   6153  259e				  -	      sbc	#14	;?
   6154  259e				  -	      sta	player0x,x
   6155  259e				  -	      dex
   6156  259e				  -	      bpl	adjustloop
   6157  259e				  -	      endif
   6158  259e					      endif
   6159  259e				  -	      if	((<*)>$e9)&&((<*)<$fa)
   6160  259e				  -	      repeat	($fa-(<*))
   6161  259e				  -	      nop
   6162  259e				  -	      repend
   6163  259e					      endif
   6164  259e		       85 02		      sta	WSYNC
   6165  25a0		       a2 04		      ldx	#4
      0  25a2					      SLEEP	3
      1  25a2				   .CYCLES    SET	3
      2  25a2
      3  25a2				  -	      IF	.CYCLES < 2
      4  25a2				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  25a2				  -	      ERR
      6  25a2					      ENDIF
      7  25a2
      8  25a2					      IF	.CYCLES & 1
      9  25a2					      IFNCONST	NO_ILLEGAL_OPCODES
     10  25a2		       04 00		      nop	0
     11  25a4				  -	      ELSE
     12  25a4				  -	      bit	VSYNC
     13  25a4					      ENDIF
     14  25a4				   .CYCLES    SET	.CYCLES - 3
     15  25a4					      ENDIF
     16  25a4
     17  25a4				  -	      REPEAT	.CYCLES / 2
     18  25a4				  -	      nop
     19  25a4					      REPEND
   6167  25a4				   HorPosLoop		; 5
   6168  25a4		       b5 80		      lda	player0x,X	;+4 9
   6169  25a6		       38		      sec		;+2 11
   6170  25a7				   DivideLoop
   6171  25a7		       e9 0f		      sbc	#15
   6172  25a9		       b0 fc		      bcs	DivideLoop	;+4 15
   6173  25ab		       95 9c		      sta	temp1,X	;+4 19
   6174  25ad		       95 10		      sta	RESP0,X	;+4 23
   6175  25af		       85 02		      sta	WSYNC
   6176  25b1		       ca		      dex
   6177  25b2		       10 f0		      bpl	HorPosLoop	;+5 5
   6178  25b4							; 4
   6179  25b4
   6180  25b4		       a2 04		      ldx	#4
   6181  25b6		       b4 9c		      ldy	temp1,X
   6182  25b8		       b9 14 f5 	      lda	repostable-256,Y
   6183  25bb		       95 20		      sta	HMP0,X	;+14 18
   6184  25bd
   6185  25bd		       ca		      dex
   6186  25be		       b4 9c		      ldy	temp1,X
   6187  25c0		       b9 14 f5 	      lda	repostable-256,Y
   6188  25c3		       95 20		      sta	HMP0,X	;+14 32
   6189  25c5
   6190  25c5		       ca		      dex
   6191  25c6		       b4 9c		      ldy	temp1,X
   6192  25c8		       b9 14 f5 	      lda	repostable-256,Y
   6193  25cb		       95 20		      sta	HMP0,X	;+14 46
   6194  25cd
   6195  25cd		       ca		      dex
   6196  25ce		       b4 9c		      ldy	temp1,X
   6197  25d0		       b9 14 f5 	      lda	repostable-256,Y
   6198  25d3		       95 20		      sta	HMP0,X	;+14 60
   6199  25d5
   6200  25d5		       ca		      dex
   6201  25d6		       b4 9c		      ldy	temp1,X
   6202  25d8		       b9 14 f5 	      lda	repostable-256,Y
   6203  25db		       95 20		      sta	HMP0,X	;+14 74
   6204  25dd
   6205  25dd		       85 02		      sta	WSYNC
   6206  25df
   6207  25df		       85 2a		      sta	HMOVE	;+3 3
   6208  25e1
   6209  25e1
   6210  25e1				  -	      ifconst	legacy
   6211  25e1				  -	      if	legacy < 100
   6212  25e1				  -	      ldx	#4
   6213  25e1				  -adjustloop2
   6214  25e1				  -	      lda	player0x,x
   6215  25e1				  -	      clc
   6216  25e1				  -	      adc	#14	;?
   6217  25e1				  -	      sta	player0x,x
   6218  25e1				  -	      dex
   6219  25e1				  -	      bpl	adjustloop2
   6220  25e1				  -	      endif
   6221  25e1					      endif
   6222  25e1
   6223  25e1
   6224  25e1
   6225  25e1
   6226  25e1							;set score pointers
   6227  25e1		       a7 95		      lax	score+2
   6228  25e3		       20 14 f6 	      jsr	scorepointerset
   6229  25e6		       84 9b		      sty	scorepointers+5
   6230  25e8		       86 98		      stx	scorepointers+2
   6231  25ea		       a7 94		      lax	score+1
   6232  25ec		       20 14 f6 	      jsr	scorepointerset
   6233  25ef		       84 9a		      sty	scorepointers+4
   6234  25f1		       86 97		      stx	scorepointers+1
   6235  25f3		       a7 93		      lax	score
   6236  25f5		       20 14 f6 	      jsr	scorepointerset
   6237  25f8		       84 99		      sty	scorepointers+3
   6238  25fa		       86 96		      stx	scorepointers
   6239  25fc
   6240  25fc				   vblk
   6241  25fc							; run possible vblank bB code
   6242  25fc				  -	      ifconst	vblank_bB_code
   6243  25fc				  -	      jsr	vblank_bB_code
   6244  25fc					      endif
   6245  25fc				   vblk2
   6246  25fc		       ad 84 02 	      LDA	INTIM
   6247  25ff		       30 fb		      bmi	vblk2
   6248  2601		       4c 00 f1 	      jmp	kernel
   6249  2604
   6250  2604
   6251  2604		       80 70 60 50*	      .byte.b	$80,$70,$60,$50,$40,$30,$20,$10,$00
   6252  260d		       f0 e0 d0 c0*	      .byte.b	$F0,$E0,$D0,$C0,$B0,$A0,$90
   6253  2614				   repostable
   6254  2614
   6255  2614				   scorepointerset
   6256  2614		       29 0f		      and	#$0F
   6257  2616		       0a		      asl
   6258  2617		       0a		      asl
   6259  2618		       0a		      asl
   6260  2619		       69 71		      adc	#<scoretable
   6261  261b		       a8		      tay
   6262  261c		       8a		      txa
   6263  261d							; and #$F0
   6264  261d							; lsr
   6265  261d		       4b f0		      asr	#$F0
   6266  261f		       69 71		      adc	#<scoretable
   6267  2621		       aa		      tax
   6268  2622		       60		      rts
   6269  2623							;bB.asm
   6270  2623							; bB.asm file is split here
   6271  2623				   .
   6272  2623							; 
   6273  2623
   6274  2623				   .L0523		;  asm
   6275  2623
------- FILE titlescreen/asm/titlescreen.asm LEVEL 2 PASS 3
      0  2623					      include	"titlescreen/asm/titlescreen.asm"
      1  2623
------- FILE titlescreen/asm/layoutmacros.asm LEVEL 3 PASS 3
      0  2623					      include	"titlescreen/asm/layoutmacros.asm"
      1  2623
      2  2623							; the macro's used in the "titlescreen_layout.asm" file
      3  2623
      4  2623					      MAC	draw_96x2_1
      5  2623				   mk_96x2_1_on =	1
      6  2623					      jsr	draw_bmp_96x2_1
      7  2623					      ENDM
      8  2623
      9  2623					      MAC	draw_96x2_2
     10  2623				   mk_96x2_2_on =	1
     11  2623					      jsr	draw_bmp_96x2_2
     12  2623					      ENDM
     13  2623
     14  2623					      MAC	draw_96x2_3
     15  2623				   mk_96x2_3_on =	1
     16  2623					      jsr	draw_bmp_96x2_3
     17  2623					      ENDM
     18  2623
     19  2623					      MAC	draw_96x2_4
     20  2623				   mk_96x2_4_on =	1
     21  2623					      jsr	draw_bmp_96x2_4
     22  2623					      ENDM
     23  2623
     24  2623					      MAC	draw_96x2_5
     25  2623				   mk_96x2_5_on =	1
     26  2623					      jsr	draw_bmp_96x2_5
     27  2623					      ENDM
     28  2623
     29  2623					      MAC	draw_96x2_6
     30  2623				   mk_96x2_6_on =	1
     31  2623					      jsr	draw_bmp_96x2_6
     32  2623					      ENDM
     33  2623
     34  2623					      MAC	draw_96x2_7
     35  2623				   mk_96x2_7_on =	1
     36  2623					      jsr	draw_bmp_96x2_7
     37  2623					      ENDM
     38  2623
     39  2623					      MAC	draw_96x2_8
     40  2623				   mk_96x2_8_on =	1
     41  2623					      jsr	draw_bmp_96x2_8
     42  2623					      ENDM
     43  2623
     44  2623					      MAC	draw_48x1_1
     45  2623				   mk_48x1_X_on =	1
     46  2623				   mk_48x1_1_on =	1
     47  2623					      jsr	draw_bmp_48x1_1
     48  2623					      ENDM
     49  2623
     50  2623					      MAC	draw_48x1_2
     51  2623				   mk_48x1_X_on =	1
     52  2623				   mk_48x1_2_on =	1
     53  2623					      jsr	draw_bmp_48x1_2
     54  2623					      ENDM
     55  2623
     56  2623					      MAC	draw_48x1_3
     57  2623				   mk_48x1_X_on =	1
     58  2623				   mk_48x1_3_on =	1
     59  2623					      jsr	draw_bmp_48x1_3
     60  2623					      ENDM
     61  2623
     62  2623					      MAC	draw_48x1_4
     63  2623				   mk_48x1_X_on =	1
     64  2623				   mk_48x1_4_on =	1
     65  2623					      jsr	draw_bmp_48x1_4
     66  2623					      ENDM
     67  2623
     68  2623					      MAC	draw_48x1_5
     69  2623				   mk_48x1_X_on =	1
     70  2623				   mk_48x1_5_on =	1
     71  2623					      jsr	draw_bmp_48x1_5
     72  2623					      ENDM
     73  2623
     74  2623					      MAC	draw_48x1_6
     75  2623				   mk_48x1_X_on =	1
     76  2623				   mk_48x1_6_on =	1
     77  2623					      jsr	draw_bmp_48x1_6
     78  2623					      ENDM
     79  2623
     80  2623					      MAC	draw_48x1_7
     81  2623				   mk_48x1_X_on =	1
     82  2623				   mk_48x1_7_on =	1
     83  2623					      jsr	draw_bmp_48x1_7
     84  2623					      ENDM
     85  2623
     86  2623					      MAC	draw_48x1_8
     87  2623				   mk_48x1_X_on =	1
     88  2623				   mk_48x1_8_on =	1
     89  2623					      jsr	draw_bmp_48x1_8
     90  2623					      ENDM
     91  2623
     92  2623
     93  2623					      MAC	draw_48x2_1
     94  2623				   mk_48x2_X_on =	1
     95  2623				   mk_48x2_1_on =	1
     96  2623					      jsr	draw_bmp_48x2_1
     97  2623					      ENDM
     98  2623
     99  2623					      MAC	draw_48x2_2
    100  2623				   mk_48x2_X_on =	1
    101  2623				   mk_48x2_2_on =	1
    102  2623					      jsr	draw_bmp_48x2_2
    103  2623					      ENDM
    104  2623
    105  2623					      MAC	draw_48x2_3
    106  2623				   mk_48x2_X_on =	1
    107  2623				   mk_48x2_3_on =	1
    108  2623					      jsr	draw_bmp_48x2_3
    109  2623					      ENDM
    110  2623
    111  2623					      MAC	draw_48x2_4
    112  2623				   mk_48x2_X_on =	1
    113  2623				   mk_48x2_4_on =	1
    114  2623					      jsr	draw_bmp_48x2_4
    115  2623					      ENDM
    116  2623
    117  2623					      MAC	draw_48x2_5
    118  2623				   mk_48x2_X_on =	1
    119  2623				   mk_48x2_5_on =	1
    120  2623					      jsr	draw_bmp_48x2_5
    121  2623					      ENDM
    122  2623
    123  2623					      MAC	draw_48x2_6
    124  2623				   mk_48x2_X_on =	1
    125  2623				   mk_48x2_6_on =	1
    126  2623					      jsr	draw_bmp_48x2_6
    127  2623					      ENDM
    128  2623
    129  2623					      MAC	draw_48x2_7
    130  2623				   mk_48x2_X_on =	1
    131  2623				   mk_48x2_7_on =	1
    132  2623					      jsr	draw_bmp_48x2_7
    133  2623					      ENDM
    134  2623
    135  2623					      MAC	draw_48x2_8
    136  2623				   mk_48x2_X_on =	1
    137  2623				   mk_48x2_8_on =	1
    138  2623					      jsr	draw_bmp_48x2_8
    139  2623					      ENDM
    140  2623
    141  2623					      MAC	draw_player
    142  2623				   mk_player_on =	1
    143  2623					      jsr	draw_player_display
    144  2623					      ENDM
    145  2623
    146  2623					      MAC	draw_score
    147  2623				   mk_score_on =	1
    148  2623				   mk_48x1_X_on =	1
    149  2623					      jsr	draw_score_display
    150  2623					      ENDM
    151  2623
    152  2623					      MAC	draw_gameselect
    153  2623				   mk_gameselect_on =	1
    154  2623				   mk_48x1_X_on =	1
    155  2623					      jsr	draw_gameselect_display
    156  2623					      ENDM
    157  2623
    158  2623					      MAC	draw_space
    159  2623					      ldy	#{1}
    160  2623				   .loop
    161  2623					      sta	WSYNC
    162  2623					      dey
    163  2623					      bne	.loop
    164  2623					      ENDM
    165  2623
------- FILE titlescreen/asm/titlescreen.asm
------- FILE titlescreen/asm/dpcfix.asm LEVEL 3 PASS 3
      0  2623					      include	"titlescreen/asm/dpcfix.asm"
      1  2623							; reassign variables that DPC+ doesn't have
      2  2623
      3  2623				  -	      ifnconst	aux2
      4  2623				  -aux2       =	player2x
      5  2623					      endif
      6  2623				  -	      ifnconst	aux4
      7  2623				  -aux4       =	player4x
      8  2623					      endif
      9  2623				  -	      ifnconst	aux5
     10  2623				  -aux5       =	player5x
     11  2623					      endif
     12  2623				  -	      ifnconst	aux6
     13  2623				  -aux6       =	player6x
     14  2623					      endif
     15  2623
     16  2623				  -	      ifnconst	player0pointer
     17  2623				  -player0pointer =	player2y
     18  2623					      endif
     19  2623				  -	      ifnconst	player1pointer
     20  2623				  -player1pointer =	player2height	; to player3height
     21  2623					      endif
     22  2623				  -	      ifnconst	player1color
     23  2623				  -player1color =	player4height	; to player5height
     24  2623					      endif
     25  2623				  -	      ifnconst	scorepointers
     26  2623				  -scorepointers =	player6height	; to NUSIZ8
     27  2623					      endif
------- FILE titlescreen/asm/titlescreen.asm
------- FILE titlescreen/titlescreen_layout.asm LEVEL 3 PASS 3
      0  2623					      include	"titlescreen/titlescreen_layout.asm"
      1  2623
      2  2623							; To use a minikernel, just list it below. They'll be drawn on the screen in
      3  2623							; in the order they were listed.
      4  2623							;
      5  2623							; If a minikernel isn't listed, it won't be compiled into your program, and
      6  2623							; it won't use any rom space.
      7  2623
      8  2623					      MAC	titlescreenlayout
      9  2623					      draw_96x2_1
     10  2623					      draw_gameselect
     11  2623					      draw_48x2_1
     12  2623					      draw_score
     13  2623					      ENDM
     14  2623
     15  2623							; minikernel choices are:
     16  2623							;
     17  2623							; draw_48x1_1, draw_48x1_2, draw_48x1_3
     18  2623							;	The first, second, and third 48-wide single-line bitmap minikernels
     19  2623							;
     20  2623							; draw_48x2_1, draw_48x2_2, draw_48x2_3
     21  2623							;	The first, second, and third 48-wide double-line bitmap minikernels
     22  2623							;
     23  2623							; draw_96x2_1, draw_96x2_2, draw_96x2_3
     24  2623							;	The first, second, and third 96-wide double-line bitmap minikernels
     25  2623							;
     26  2623							; draw_gameselect
     27  2623							;	The game selection display minikernel
     28  2623							;
     29  2623							; draw_score
     30  2623							;	A minikernel that draws the score
     31  2623							;
     32  2623							; draw_space 10
     33  2623							;	A minikernel used to add blank space between other minikernels
------- FILE titlescreen/asm/titlescreen.asm
      5  2623
      6  2623				   .titledrawscreen
      7  2623				   title_eat_overscan
      8  2623							;bB runs in overscan. Wait for the overscan to run out...
      9  2623		       18		      clc
     10  2624		       ad 84 02 	      lda	INTIM
     11  2627		       30 fa		      bmi	title_eat_overscan
     12  2629		       4c 2c f6 	      jmp	title_do_vertical_sync
     13  262c
     14  262c				   title_do_vertical_sync
     15  262c		       a9 02		      lda	#2
     16  262e		       85 02		      sta	WSYNC	;one line with VSYNC
     17  2630		       85 00		      sta	VSYNC	;enable VSYNC
     18  2632		       85 02		      sta	WSYNC	;one line with VSYNC
     19  2634		       85 02		      sta	WSYNC	;one line with VSYNC
     20  2636		       a9 00		      lda	#0
     21  2638		       85 02		      sta	WSYNC	;one line with VSYNC
     22  263a		       85 00		      sta	VSYNC	;turn off VSYNC
     23  263c
     24  263c							;lda #42+128
     25  263c					      ifnconst	vblank_time
     26  263c		       a9 aa		      lda	#42+128
     27  263e				  -	      else
     28  263e				  -	      lda	#vblank_time+128
     29  263e					      endif
     30  263e
     31  263e		       8d 96 02 	      sta	TIM64T
     32  2641
     33  2641		       00 82	   titleframe =	missile0x
     34  2641		       e6 82		      inc	titleframe	; increment the frame counter
     35  2643
     36  2643				  -	      ifconst	.title_vblank
     37  2643				  -	      jsr	.title_vblank
     38  2643					      endif
     39  2643
     40  2643				   title_vblank_loop
     41  2643		       ad 84 02 	      lda	INTIM
     42  2646		       30 fb		      bmi	title_vblank_loop
     43  2648		       a9 00		      lda	#0
     44  264a		       85 02		      sta	WSYNC
     45  264c		       85 01		      sta	VBLANK
     46  264e		       85 1d		      sta	ENAM0
     47  2650		       85 1f		      sta	ENABL
     48  2652
     49  2652				   title_playfield
     50  2652
     51  2652							; ======== BEGIN of the custom kernel!!!!! All of the work is done in the playfield.
     52  2652
     53  2652		       a9 e6		      lda	#230
     54  2654		       8d 96 02 	      sta	TIM64T
     55  2657
     56  2657		       a9 01		      lda	#1
     57  2659		       85 0a		      sta	CTRLPF
     58  265b		       18		      clc
     59  265c
     60  265c		       a9 00		      lda	#0
     61  265e		       85 0b		      sta	REFP0
     62  2660		       85 0c		      sta	REFP1
     63  2662		       85 02		      sta	WSYNC
     64  2664		       ad a0 f6 	      lda	titlescreencolor
     65  2667		       85 09		      sta	COLUBK
     66  2669
      0  2669					      titlescreenlayout
      0  2669					      draw_96x2_1
      1  2669		       00 01	   mk_96x2_1_on =	1
      2  2669		       20 12 f8 	      jsr	draw_bmp_96x2_1
      0  266c					      draw_gameselect
      1  266c		       00 01	   mk_gameselect_on =	1
      2  266c		       00 01	   mk_48x1_X_on =	1
      3  266c		       20 53 fa 	      jsr	draw_gameselect_display
      0  266f					      draw_48x2_1
      1  266f		       00 01	   mk_48x2_X_on =	1
      2  266f		       00 01	   mk_48x2_1_on =	1
      3  266f		       20 a1 f6 	      jsr	draw_bmp_48x2_1
      0  2672					      draw_score
      1  2672		       00 01	   mk_score_on =	1
      2  2672		       00 01	   mk_48x1_X_on =	1
      3  2672		       20 81 f9 	      jsr	draw_score_display
     68  2675
     69  2675		       4c c9 fa 	      jmp	PFWAIT	; kernel is done. Finish off the screen
     70  2678
------- FILE titlescreen/asm/position48.asm LEVEL 3 PASS 3
      0  2678					      include	"titlescreen/asm/position48.asm"
      1  2678
      2  2678				   position48
      3  2678
      4  2678							;postion P0 and P1
      5  2678
      6  2678		       85 02		      sta	WSYNC
      7  267a
      8  267a		       a9 90		      lda	#$90	;2
      9  267c		       85 20		      sta	HMP0	;3
     10  267e		       a9 a0		      lda	#$A0	;2
     11  2680		       85 21		      sta	HMP1	;3
     12  2682
     13  2682		       e6 9c		      inc	temp1
     14  2684		       c6 9c		      dec	temp1
     15  2686		       e6 9c		      inc	temp1
     16  2688		       c6 9c		      dec	temp1
     17  268a		       e6 9c		      inc	temp1
      0  268c					      sleep	2
      1  268c				   .CYCLES    SET	2
      2  268c
      3  268c				  -	      IF	.CYCLES < 2
      4  268c				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  268c				  -	      ERR
      6  268c					      ENDIF
      7  268c
      8  268c				  -	      IF	.CYCLES & 1
      9  268c				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  268c				  -	      nop	0
     11  268c				  -	      ELSE
     12  268c				  -	      bit	VSYNC
     13  268c				  -	      ENDIF
     14  268c				  -.CYCLES    SET	.CYCLES - 3
     15  268c					      ENDIF
     16  268c
     17  268c					      REPEAT	.CYCLES / 2
     18  268c		       ea		      nop
     19  268d					      REPEND
     19  268d		       85 10		      sta	RESP0	;  +3
     20  268f		       85 11		      sta	RESP1	;  +3
     21  2691		       c6 9c		      dec	temp1	;  +5
     22  2693		       e6 9c		      inc	temp1	;  +5
     23  2695		       c6 9c		      dec	temp1	;  +5
     24  2697		       e6 9c		      inc	temp1	;  +5
     25  2699		       c6 9c		      dec	temp1	;  +5
      0  269b					      sleep	3
      1  269b				   .CYCLES    SET	3
      2  269b
      3  269b				  -	      IF	.CYCLES < 2
      4  269b				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  269b				  -	      ERR
      6  269b					      ENDIF
      7  269b
      8  269b					      IF	.CYCLES & 1
      9  269b					      IFNCONST	NO_ILLEGAL_OPCODES
     10  269b		       04 00		      nop	0
     11  269d				  -	      ELSE
     12  269d				  -	      bit	VSYNC
     13  269d					      ENDIF
     14  269d				   .CYCLES    SET	.CYCLES - 3
     15  269d					      ENDIF
     16  269d
     17  269d				  -	      REPEAT	.CYCLES / 2
     18  269d				  -	      nop
     19  269d					      REPEND
     27  269d		       85 2a		      sta	HMOVE	; +76
     28  269f		       60		      RTS
     29  26a0
------- FILE titlescreen/asm/titlescreen.asm
------- FILE titlescreen/titlescreen_color.asm LEVEL 3 PASS 3
      0  26a0					      include	"titlescreen/titlescreen_color.asm"
      1  26a0
      2  26a0							; This is where the titlescreen background color gets set.
      3  26a0							; You can also do a "dim titlescreencolor=[letter]" in bB
      4  26a0							; if you want to change the color on the fly.
      5  26a0
      6  26a0				  -	      ifnconst	titlescreencolor
      7  26a0				  -titlescreencolor
      8  26a0					      endif
      9  26a0		       00		      .byte.b	$00
     10  26a1
------- FILE titlescreen/asm/titlescreen.asm
     73  26a1
     74  26a1				  -	      ifconst	mk_48x1_1_on
     75  26a1				  -	      include	"titlescreen/asm/48x1_1_kernel.asm"
     76  26a1					      endif		;mk_48x1_1_on
     77  26a1
     78  26a1				  -	      ifconst	mk_48x1_2_on
     79  26a1				  -	      include	"titlescreen/asm/48x1_2_kernel.asm"
     80  26a1					      endif		;mk_48x1_2_on
     81  26a1
     82  26a1				  -	      ifconst	mk_48x1_3_on
     83  26a1				  -	      include	"titlescreen/asm/48x1_3_kernel.asm"
     84  26a1					      endif		;mk_48x1_3_on
     85  26a1
     86  26a1				  -	      ifconst	mk_48x1_4_on
     87  26a1				  -	      include	"titlescreen/asm/48x1_4_kernel.asm"
     88  26a1					      endif		;mk_48x1_4_on
     89  26a1
     90  26a1				  -	      ifconst	mk_48x1_5_on
     91  26a1				  -	      include	"titlescreen/asm/48x1_5_kernel.asm"
     92  26a1					      endif		;mk_48x1_5_on
     93  26a1
     94  26a1				  -	      ifconst	mk_48x1_6_on
     95  26a1				  -	      include	"titlescreen/asm/48x1_6_kernel.asm"
     96  26a1					      endif		;mk_48x1_6_on
     97  26a1
     98  26a1				  -	      ifconst	mk_48x1_7_on
     99  26a1				  -	      include	"titlescreen/asm/48x1_7_kernel.asm"
    100  26a1					      endif		;mk_48x1_7_on
    101  26a1
    102  26a1				  -	      ifconst	mk_48x1_8_on
    103  26a1				  -	      include	"titlescreen/asm/48x1_8_kernel.asm"
    104  26a1					      endif		;mk_48x1_8_on
    105  26a1
    106  26a1					      ifconst	mk_48x2_1_on
------- FILE titlescreen/asm/48x2_1_kernel.asm LEVEL 3 PASS 3
      0  26a1					      include	"titlescreen/asm/48x2_1_kernel.asm"
      1  26a1
      2  26a1				   draw_bmp_48x2_1
      3  26a1
      4  26a1		       a9 de		      lda	#<(bmp_48x2_1_colors-1+bmp_48x2_1_height-bmp_48x2_1_window)
      5  26a3				  -	      ifconst	bmp_48x2_1_index
      6  26a3				  -	      sec
      7  26a3				  -	      sbc	bmp_48x2_1_index
      8  26a3					      endif
      9  26a3		       85 f4		      sta	aux5+0
     10  26a5		       a9 fa		      lda	#>(bmp_48x2_1_colors-1+bmp_48x2_1_height-bmp_48x2_1_window)
     11  26a7		       85 f5		      sta	aux5+1
     12  26a9
     13  26a9		       a0 0b		      ldy	#11
     14  26ab				   bmp_48x2_1_pointersetup
     15  26ab		       b9 e0 f6 	      lda	bmp_48x2_1_values,y
     16  26ae		       99 96 00 	      sta	scorepointers,y
     17  26b1		       88		      dey
     18  26b2		       b9 e0 f6 	      lda	bmp_48x2_1_values,y
     19  26b5				  -	      ifconst	bmp_48x2_1_index
     20  26b5				  -	      sec
     21  26b5				  -	      sbc	bmp_48x2_1_index
     22  26b5					      endif
     23  26b5		       99 96 00 	      sta	scorepointers,y
     24  26b8		       88		      dey
     25  26b9		       10 f0		      bpl	bmp_48x2_1_pointersetup
     26  26bb
     27  26bb
     28  26bb		       a0 04		      ldy	#(bmp_48x2_1_window-1)
     29  26bd		       84 f1		      sty	aux2
     30  26bf
     31  26bf		       c8		      iny
     32  26c0		       b1 f4		      lda	(aux5),y
     33  26c2		       88		      dey
     34  26c3
     35  26c3		       85 06		      sta	COLUP0	;3
     36  26c5		       85 07		      sta	COLUP1	;3
     37  26c7		       85 2b		      sta	HMCLR	;3
     38  26c9
     39  26c9		       ad a0 f6 	      lda	titlescreencolor
     40  26cc		       85 08		      sta	COLUPF
     41  26ce
     42  26ce					      ifconst	bmp_48x2_1_background
     43  26ce		       ad e6 fa 	      lda	bmp_48x2_1_background
     44  26d1				  -	      else
     45  26d1				  -	      lda	titlescreencolor
     46  26d1					      endif
     47  26d1		       85 f3		      sta	aux4
     48  26d3					      ifconst	bmp_48x2_1_PF1
     49  26d3		       ad e4 fa 	      lda	bmp_48x2_1_PF1
     50  26d6				  -	      else
     51  26d6				  -	      lda	#0
     52  26d6				  -	      nop
     53  26d6					      endif
     54  26d6		       85 0e		      sta	PF1
     55  26d8
     56  26d8					      ifconst	bmp_48x2_1_PF2
     57  26d8		       ad e5 fa 	      lda	bmp_48x2_1_PF2
     58  26db				  -	      else
     59  26db				  -	      lda	#0
     60  26db				  -	      nop
     61  26db					      endif
     62  26db		       85 0f		      sta	PF2
     63  26dd
     64  26dd		       4c 67 f7 	      jmp	draw_bmp_48x2_X
     65  26e0
     66  26e0				   bmp_48x2_1_values
     67  26e0		       e7 fa		      .word.w	(bmp_48x2_1_00+#bmp_48x2_1_height-#bmp_48x2_1_window)
     68  26e2		       ed fa		      .word.w	(bmp_48x2_1_01+#bmp_48x2_1_height-#bmp_48x2_1_window)
     69  26e4		       f3 fa		      .word.w	(bmp_48x2_1_02+#bmp_48x2_1_height-#bmp_48x2_1_window)
     70  26e6		       f9 fa		      .word.w	(bmp_48x2_1_03+#bmp_48x2_1_height-#bmp_48x2_1_window)
     71  26e8		       00 fb		      .word.w	(bmp_48x2_1_04+#bmp_48x2_1_height-#bmp_48x2_1_window)
     72  26ea		       06 fb		      .word.w	(bmp_48x2_1_05+#bmp_48x2_1_height-#bmp_48x2_1_window)
     73  26ec
------- FILE titlescreen/asm/titlescreen.asm
    108  26ec					      endif		;mk_48x2_1_on
    109  26ec
    110  26ec				  -	      ifconst	mk_48x2_2_on
    111  26ec				  -	      include	"titlescreen/asm/48x2_2_kernel.asm"
    112  26ec					      endif		;mk_48x2_2_on
    113  26ec
    114  26ec				  -	      ifconst	mk_48x2_3_on
    115  26ec				  -	      include	"titlescreen/asm/48x2_3_kernel.asm"
    116  26ec					      endif		;mk_48x2_3_on
    117  26ec
    118  26ec				  -	      ifconst	mk_48x2_4_on
    119  26ec				  -	      include	"titlescreen/asm/48x2_4_kernel.asm"
    120  26ec					      endif		;mk_48x2_4_on
    121  26ec
    122  26ec				  -	      ifconst	mk_48x2_5_on
    123  26ec				  -	      include	"titlescreen/asm/48x2_5_kernel.asm"
    124  26ec					      endif		;mk_48x2_5_on
    125  26ec
    126  26ec				  -	      ifconst	mk_48x2_6_on
    127  26ec				  -	      include	"titlescreen/asm/48x2_6_kernel.asm"
    128  26ec					      endif		;mk_48x2_6_on
    129  26ec
    130  26ec				  -	      ifconst	mk_48x2_7_on
    131  26ec				  -	      include	"titlescreen/asm/48x2_7_kernel.asm"
    132  26ec					      endif		;mk_48x2_7_on
    133  26ec
    134  26ec				  -	      ifconst	mk_48x2_8_on
    135  26ec				  -	      include	"titlescreen/asm/48x2_8_kernel.asm"
    136  26ec					      endif		;mk_48x2_8_on
    137  26ec
    138  26ec					      ifconst	mk_48x1_X_on
------- FILE titlescreen/asm/48x1_X_kernel.asm LEVEL 3 PASS 3
      0  26ec					      include	"titlescreen/asm/48x1_X_kernel.asm"
      1  26ec				   draw_bmp_48x1_X
      2  26ec
      3  26ec		       a9 03		      lda	#3
      4  26ee		       85 04		      sta	NUSIZ0	;3=Player and Missile are drawn twice 32 clocks apart
      5  26f0		       85 05		      sta	NUSIZ1	;3=Player and Missile are drawn twice 32 clocks apart
      6  26f2
      7  26f2		       ba		      tsx
      8  26f3		       86 f6		      stx	stack1	;save the stack pointer
      9  26f5
     10  26f5		       20 78 f6 	      jsr	position48
     11  26f8
     12  26f8		       a9 03		      lda	#3	;2
     13  26fa		       85 25		      sta	VDELP0	;3
     14  26fc		       85 26		      sta	VDELP1	;3
     15  26fe
     16  26fe		       a9 01		      lda	#1	;2
     17  2700		       85 0a		      sta	CTRLPF	;3
     18  2702
     19  2702							;enough cycles have passed for the HMOV, so we can clear HMCLR
     20  2702		       85 2b		      sta	HMCLR
     21  2704
     22  2704		       85 02		      sta	WSYNC
     23  2706
     24  2706		       e6 9c		      inc	temp1	;5
     25  2708		       c6 9c		      dec	temp1	;5
     26  270a		       e6 9c		      inc	temp1	;5
     27  270c		       c6 9c		      dec	temp1	;5
     28  270e		       e6 9c		      inc	temp1	;5
     29  2710		       c6 9c		      dec	temp1	;5
     30  2712		       e6 9c		      inc	temp1	;5
     31  2714		       c6 9c		      dec	temp1	;5
     32  2716		       e6 9c		      inc	temp1	;5
     33  2718		       c6 9c		      dec	temp1	;5
     34  271a
      0  271a					      sleep	5
      1  271a				   .CYCLES    SET	5
      2  271a
      3  271a				  -	      IF	.CYCLES < 2
      4  271a				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  271a				  -	      ERR
      6  271a					      ENDIF
      7  271a
      8  271a					      IF	.CYCLES & 1
      9  271a					      IFNCONST	NO_ILLEGAL_OPCODES
     10  271a		       04 00		      nop	0
     11  271c				  -	      ELSE
     12  271c				  -	      bit	VSYNC
     13  271c					      ENDIF
     14  271c				   .CYCLES    SET	.CYCLES - 3
     15  271c					      ENDIF
     16  271c
     17  271c					      REPEAT	.CYCLES / 2
     18  271c		       ea		      nop
     19  271d					      REPEND
     36  271d
     37  271d		       c8		      iny
     38  271e
     39  271e		       4c 21 f7 	      jmp	pf48x1_X_loop_entry
     40  2721
     41  2721				  -	      if	>. != >[.+$2a]
     42  2721				  -	      align	256
     43  2721					      endif
     44  2721
     45  2721				   pf48x1_X_loop_entry
     46  2721				   pf48x1_X_loop
     47  2721		       88		      dey		;2
     48  2722		       84 f1		      sty	aux2	;3
     49  2724		       b1 96		      lda	(scorepointers+0),y	;5
     50  2726		       85 1b		      sta	GRP0	;3
     51  2728
     52  2728		       b1 98		      lda	(scorepointers+2),y	;5
     53  272a		       85 1c		      sta	GRP1	;3
     54  272c		       b1 9a		      lda	(scorepointers+4),y	;5
     55  272e		       85 1b		      sta	GRP0	;3
     56  2730
      0  2730					      sleep	2	; I could make this indirect, if we want to burn more rom
      1  2730				   .CYCLES    SET	2
      2  2730
      3  2730				  -	      IF	.CYCLES < 2
      4  2730				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  2730				  -	      ERR
      6  2730					      ENDIF
      7  2730
      8  2730				  -	      IF	.CYCLES & 1
      9  2730				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  2730				  -	      nop	0
     11  2730				  -	      ELSE
     12  2730				  -	      bit	VSYNC
     13  2730				  -	      ENDIF
     14  2730				  -.CYCLES    SET	.CYCLES - 3
     15  2730					      ENDIF
     16  2730
     17  2730					      REPEAT	.CYCLES / 2
     18  2730		       ea		      nop
     19  2731					      REPEND
     58  2731		       a5 f3		      lda	aux4	;3
     59  2733		       85 08		      sta	COLUPF	;3 this is a big fat waste...
     60  2735
     61  2735		       b3 a0		      lax	(scorepointers+10),y	;5
     62  2737		       b1 9e		      lda	(scorepointers+8),y	;5
     63  2739		       85 f7		      sta	stack2	;3
     64  273b		       b1 9c		      lda	(scorepointers+6),y	;5
     65  273d		       a4 f7		      ldy	stack2	;3
     66  273f
     67  273f		       85 1c		      sta	GRP1	;3
     68  2741		       84 1b		      sty	GRP0	;3
     69  2743		       86 1c		      stx	GRP1	;3
     70  2745		       84 1b		      sty	GRP0	;3
     71  2747
     72  2747		       a4 f1		      ldy	aux2	;3
     73  2749		       d0 d6		      bne	pf48x1_X_loop	;2/3
     74  274b
     75  274b				   pf48x1_X_codeend
     76  274b							;echo "critical code in 48x1 is ",(pf48x1_X_codeend-pf48x1_X_loop), " bytes long."
     77  274b
     78  274b		       a9 00		      lda	#0
     79  274d		       85 1b		      sta	GRP0
     80  274f		       85 1c		      sta	GRP1
     81  2751		       85 1b		      sta	GRP0
     82  2753		       85 1c		      sta	GRP1
     83  2755		       85 1f		      sta	ENABL
     84  2757		       85 1d		      sta	ENAM0
     85  2759		       85 25		      sta	VDELP0
     86  275b		       85 26		      sta	VDELP1
     87  275d		       85 0d		      sta	PF0
     88  275f		       85 0e		      sta	PF1
     89  2761		       85 0f		      sta	PF2
     90  2763
     91  2763		       a6 f6		      ldx	stack1	;restore the stack pointer
     92  2765		       9a		      txs
     93  2766		       60		      rts
------- FILE titlescreen/asm/titlescreen.asm
    140  2767					      endif		;mk_48x1_X_on
    141  2767
    142  2767					      ifconst	mk_48x2_X_on
------- FILE titlescreen/asm/48x2_X_kernel.asm LEVEL 3 PASS 3
      0  2767					      include	"titlescreen/asm/48x2_X_kernel.asm"
      1  2767				   draw_bmp_48x2_X
      2  2767
      3  2767		       a9 00		      lda	#0
      4  2769		       85 1b		      sta	GRP0
      5  276b		       85 1c		      sta	GRP1
      6  276d
      7  276d		       a9 03		      lda	#3
      8  276f		       85 04		      sta	NUSIZ0	;3=Player and Missile are drawn twice 32 clocks apart
      9  2771		       85 05		      sta	NUSIZ1	;3=Player and Missile are drawn twice 32 clocks apart
     10  2773
     11  2773		       ba		      tsx
     12  2774		       86 f6		      stx	stack1	;save the stack pointer
     13  2776
     14  2776		       20 78 f6 	      jsr	position48
     15  2779
     16  2779		       a9 03		      lda	#3	;2
     17  277b		       85 25		      sta	VDELP0	;3
     18  277d		       85 26		      sta	VDELP1	;3
     19  277f
     20  277f		       a9 01		      lda	#1	;2
     21  2781		       85 0a		      sta	CTRLPF	;3
     22  2783
     23  2783							;enough cycles have passed for the HMOV, so we can clear HMCLR
     24  2783		       85 2b		      sta	HMCLR
     25  2785		       85 02		      sta	WSYNC
     26  2787
     27  2787
     28  2787							;sleep (63)		;63
     29  2787		       e6 9c		      inc	temp1
     30  2789		       c6 9c		      dec	temp1
     31  278b		       e6 9c		      inc	temp1
     32  278d		       c6 9c		      dec	temp1
     33  278f		       e6 9c		      inc	temp1
     34  2791		       c6 9c		      dec	temp1
     35  2793		       e6 9c		      inc	temp1
     36  2795		       c6 9c		      dec	temp1
     37  2797		       e6 9c		      inc	temp1
     38  2799		       c6 9c		      dec	temp1
     39  279b		       e6 9c		      inc	temp1
     40  279d		       c6 9c		      dec	temp1
      0  279f					      sleep	3
      1  279f				   .CYCLES    SET	3
      2  279f
      3  279f				  -	      IF	.CYCLES < 2
      4  279f				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  279f				  -	      ERR
      6  279f					      ENDIF
      7  279f
      8  279f					      IF	.CYCLES & 1
      9  279f					      IFNCONST	NO_ILLEGAL_OPCODES
     10  279f		       04 00		      nop	0
     11  27a1				  -	      ELSE
     12  27a1				  -	      bit	VSYNC
     13  27a1					      ENDIF
     14  27a1				   .CYCLES    SET	.CYCLES - 3
     15  27a1					      ENDIF
     16  27a1
     17  27a1				  -	      REPEAT	.CYCLES / 2
     18  27a1				  -	      nop
     19  27a1					      REPEND
     42  27a1
     43  27a1		       a5 f3		      lda	aux4	;3
     44  27a3		       85 08		      sta	COLUPF	;3
     45  27a5
     46  27a5		       4c a8 f7 	      jmp	pf48x2_X_loop	;3
     47  27a8
     48  27a8				  -	      if	>. != >[.+$52]
     49  27a8				  -	      align	256
     50  27a8					      endif
     51  27a8
     52  27a8				   pf48x2_X_loop
     53  27a8
     54  27a8		       b1 96		      lda	(scorepointers+0),y	;5
     55  27aa		       85 1b		      sta	GRP0	;3
     56  27ac		       b1 98		      lda	(scorepointers+2),y	;5
     57  27ae		       85 1c		      sta	GRP1	;3
     58  27b0		       b1 9a		      lda	(scorepointers+4),y	;5
     59  27b2		       85 1b		      sta	GRP0	;3
     60  27b4
     61  27b4		       b3 a0		      lax	(scorepointers+10),y	;5
     62  27b6		       b1 9e		      lda	(scorepointers+8),y	;5
     63  27b8		       85 f7		      sta	stack2	;3
     64  27ba		       b1 9c		      lda	(scorepointers+6),y	;5
     65  27bc		       a4 f7		      ldy	stack2	;3
     66  27be
     67  27be		       85 1c		      sta	GRP1	;3
     68  27c0		       84 1b		      sty	GRP0	;3
     69  27c2		       86 1c		      stx	GRP1	;3
     70  27c4		       84 1b		      sty	GRP0	;3
     71  27c6
     72  27c6		       a4 f1		      ldy	aux2	;3
     73  27c8
     74  27c8		       b1 f4		      lda	(aux5),y	;5
     75  27ca		       85 91		      sta	missile0y	;3
     76  27cc
      0  27cc					      sleep	3
      1  27cc				   .CYCLES    SET	3
      2  27cc
      3  27cc				  -	      IF	.CYCLES < 2
      4  27cc				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  27cc				  -	      ERR
      6  27cc					      ENDIF
      7  27cc
      8  27cc					      IF	.CYCLES & 1
      9  27cc					      IFNCONST	NO_ILLEGAL_OPCODES
     10  27cc		       04 00		      nop	0
     11  27ce				  -	      ELSE
     12  27ce				  -	      bit	VSYNC
     13  27ce					      ENDIF
     14  27ce				   .CYCLES    SET	.CYCLES - 3
     15  27ce					      ENDIF
     16  27ce
     17  27ce				  -	      REPEAT	.CYCLES / 2
     18  27ce				  -	      nop
     19  27ce					      REPEND
     78  27ce
     79  27ce		       c6 f1		      dec	aux2	;5
     80  27d0
     81  27d0
     82  27d0		       b1 96		      lda	(scorepointers+0),y	;5
     83  27d2		       85 1b		      sta	GRP0	;3
     84  27d4		       b1 98		      lda	(scorepointers+2),y	;5
     85  27d6		       85 1c		      sta	GRP1	;3
     86  27d8		       b1 9a		      lda	(scorepointers+4),y	;5
     87  27da		       85 1b		      sta	GRP0	;3
     88  27dc
     89  27dc		       b3 a0		      lax	(scorepointers+10),y	;5
     90  27de		       b1 9e		      lda	(scorepointers+8),y	;5
     91  27e0		       85 f7		      sta	stack2	;3
     92  27e2		       b1 9c		      lda	(scorepointers+6),y	;5
     93  27e4		       a4 f7		      ldy	stack2	;3
     94  27e6
     95  27e6		       85 1c		      sta	GRP1	;3
     96  27e8		       84 1b		      sty	GRP0	;3
     97  27ea		       86 1c		      stx	GRP1	;3
     98  27ec		       84 1b		      sty	GRP0	;3
     99  27ee
      0  27ee					      sleep	4
      1  27ee				   .CYCLES    SET	4
      2  27ee
      3  27ee				  -	      IF	.CYCLES < 2
      4  27ee				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  27ee				  -	      ERR
      6  27ee					      ENDIF
      7  27ee
      8  27ee				  -	      IF	.CYCLES & 1
      9  27ee				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  27ee				  -	      nop	0
     11  27ee				  -	      ELSE
     12  27ee				  -	      bit	VSYNC
     13  27ee				  -	      ENDIF
     14  27ee				  -.CYCLES    SET	.CYCLES - 3
     15  27ee					      ENDIF
     16  27ee
     17  27ee					      REPEAT	.CYCLES / 2
     18  27ee		       ea		      nop
     17  27ee					      REPEND
     18  27ef		       ea		      nop
     19  27f0					      REPEND
    101  27f0
    102  27f0		       a5 91		      lda	missile0y
    103  27f2		       85 07		      sta	COLUP1
    104  27f4		       85 06		      sta	COLUP0
    105  27f6
    106  27f6		       a4 f1		      ldy	aux2	;3
    107  27f8		       10 ae		      bpl	pf48x2_X_loop	;2/3
    108  27fa
    109  27fa
    110  27fa				   pf48x2_X_codeend
    111  27fa							;echo "critical code in 48x2 is ",(pf48x2_X_codeend-pf48x2_X_loop), " bytes long."
    112  27fa
    113  27fa		       a9 00		      lda	#0
    114  27fc		       85 1b		      sta	GRP0
    115  27fe		       85 1c		      sta	GRP1
    116  2800		       85 1b		      sta	GRP0
    117  2802		       85 1c		      sta	GRP1
    118  2804		       85 25		      sta	VDELP0
    119  2806		       85 26		      sta	VDELP1
    120  2808		       85 0d		      sta	PF0
    121  280a		       85 0e		      sta	PF1
    122  280c		       85 0f		      sta	PF2
    123  280e
    124  280e		       a6 f6		      ldx	stack1	;restore the stack pointer
    125  2810		       9a		      txs
    126  2811		       60		      rts
------- FILE titlescreen/asm/titlescreen.asm
    144  2812					      endif		;mk_48x2_X_on
    145  2812
    146  2812
    147  2812					      ifconst	mk_96x2_1_on
------- FILE titlescreen/asm/96x2_1_kernel.asm LEVEL 3 PASS 3
      0  2812					      include	"titlescreen/asm/96x2_1_kernel.asm"
      1  2812				   draw_bmp_96x2_1
      2  2812
      3  2812				  -	      ifconst	bmp_96x2_1_index
      4  2812				  -	      lda	#(bmp_96x2_1_height-1)
      5  2812				  -	      sec
      6  2812				  -	      sbc	bmp_96x2_1_index
      7  2812				  -	      tay
      8  2812				  -	      sbc	#bmp_96x2_1_window
      9  2812				  -	      sta	temp1
     10  2812					      else
     11  2812		       a0 3b		      ldy	#(bmp_96x2_1_window-1)
     12  2814		       a9 ff		      lda	#255
     13  2816		       85 9c		      sta	temp1
     14  2818					      endif
     15  2818
     16  2818		       a9 03		      lda	#3
     17  281a		       85 04		      sta	NUSIZ0	;3=Player and Missile are drawn twice 32 clocks apart
     18  281c		       85 05		      sta	NUSIZ1	;3=Player and Missile are drawn twice 32 clocks apart
     19  281e		       a9 00		      lda	#0
     20  2820
     21  2820		       b9 0d fb 	      lda	bmp_96x2_1_colors,y	;4
     22  2823				  -	      ifconst	bmp_96x2_1_fade
     23  2823				  -	      and	bmp_96x2_1_fade
     24  2823					      endif
     25  2823		       85 06		      sta	COLUP0	;3
     26  2825		       85 07		      sta	COLUP1	;3
     27  2827		       85 2b		      sta	HMCLR	;3
     28  2829
     29  2829		       a5 82		      lda	titleframe
     30  282b		       29 01		      and	#1
     31  282d		       f0 03		      beq	jmp_pf96x2_1_frame0
     32  282f		       4c d9 f8 	      jmp	pf96x2_1_frame1
     33  2832				   jmp_pf96x2_1_frame0
     34  2832		       4c 35 f8 	      jmp	pf96x2_1_frame0
     35  2835
     36  2835				   pf96x2_1_frame0
     37  2835							;postion P0 and P1
     38  2835		       85 02		      sta	WSYNC
     39  2837		       a9 e0		      lda	#%11100000
     40  2839		       85 20		      sta	HMP0
     41  283b		       a9 10		      lda	#%00010000
     42  283d		       85 21		      sta	HMP1
     43  283f		       85 02		      sta	WSYNC
      0  2841					      sleep	28
      1  2841				   .CYCLES    SET	28
      2  2841
      3  2841				  -	      IF	.CYCLES < 2
      4  2841				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  2841				  -	      ERR
      6  2841					      ENDIF
      7  2841
      8  2841				  -	      IF	.CYCLES & 1
      9  2841				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  2841				  -	      nop	0
     11  2841				  -	      ELSE
     12  2841				  -	      bit	VSYNC
     13  2841				  -	      ENDIF
     14  2841				  -.CYCLES    SET	.CYCLES - 3
     15  2841					      ENDIF
     16  2841
     17  2841					      REPEAT	.CYCLES / 2
     18  2841		       ea		      nop
     17  2841					      REPEND
     18  2842		       ea		      nop
     17  2842					      REPEND
     18  2843		       ea		      nop
     17  2843					      REPEND
     18  2844		       ea		      nop
     17  2844					      REPEND
     18  2845		       ea		      nop
     17  2845					      REPEND
     18  2846		       ea		      nop
     17  2846					      REPEND
     18  2847		       ea		      nop
     17  2847					      REPEND
     18  2848		       ea		      nop
     17  2848					      REPEND
     18  2849		       ea		      nop
     17  2849					      REPEND
     18  284a		       ea		      nop
     17  284a					      REPEND
     18  284b		       ea		      nop
     17  284b					      REPEND
     18  284c		       ea		      nop
     17  284c					      REPEND
     18  284d		       ea		      nop
     17  284d					      REPEND
     18  284e		       ea		      nop
     19  284f					      REPEND
     45  284f		       85 10		      sta	RESP0
      0  2851					      sleep	14
      1  2851				   .CYCLES    SET	14
      2  2851
      3  2851				  -	      IF	.CYCLES < 2
      4  2851				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  2851				  -	      ERR
      6  2851					      ENDIF
      7  2851
      8  2851				  -	      IF	.CYCLES & 1
      9  2851				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  2851				  -	      nop	0
     11  2851				  -	      ELSE
     12  2851				  -	      bit	VSYNC
     13  2851				  -	      ENDIF
     14  2851				  -.CYCLES    SET	.CYCLES - 3
     15  2851					      ENDIF
     16  2851
     17  2851					      REPEAT	.CYCLES / 2
     18  2851		       ea		      nop
     17  2851					      REPEND
     18  2852		       ea		      nop
     17  2852					      REPEND
     18  2853		       ea		      nop
     17  2853					      REPEND
     18  2854		       ea		      nop
     17  2854					      REPEND
     18  2855		       ea		      nop
     17  2855					      REPEND
     18  2856		       ea		      nop
     17  2856					      REPEND
     18  2857		       ea		      nop
     19  2858					      REPEND
     47  2858		       85 11		      sta	RESP1
     48  285a		       85 02		      sta	WSYNC
     49  285c		       85 2a		      sta	HMOVE
     50  285e
     51  285e		       85 02		      sta	WSYNC
     52  2860		       85 2b		      sta	HMCLR
     53  2862		       85 02		      sta	WSYNC
     54  2864
      0  2864					      sleep	4
      1  2864				   .CYCLES    SET	4
      2  2864
      3  2864				  -	      IF	.CYCLES < 2
      4  2864				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  2864				  -	      ERR
      6  2864					      ENDIF
      7  2864
      8  2864				  -	      IF	.CYCLES & 1
      9  2864				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  2864				  -	      nop	0
     11  2864				  -	      ELSE
     12  2864				  -	      bit	VSYNC
     13  2864				  -	      ENDIF
     14  2864				  -.CYCLES    SET	.CYCLES - 3
     15  2864					      ENDIF
     16  2864
     17  2864					      REPEAT	.CYCLES / 2
     18  2864		       ea		      nop
     17  2864					      REPEND
     18  2865		       ea		      nop
     19  2866					      REPEND
     56  2866		       4c 69 f8 	      jmp	pfline_96x2_1_frame0
     57  2869							;align so our branch doesn't unexpectedly cross a page...
     58  2869				  -	      if	>. != >[.+$70]
     59  2869				  -	      align	256
     60  2869					      endif
     61  2869
     62  2869				   pfline_96x2_1_frame0
     63  2869		       a9 80		      lda	#$80	;2
     64  286b		       85 20		      sta	HMP0	;3
     65  286d		       85 21		      sta	HMP1	;3
     66  286f
     67  286f		       b9 b4 fc 	      lda	bmp_96x2_1_06,y	;4
     68  2872		       85 1c		      sta	GRP1	;3
     69  2874
     70  2874		       b9 49 fb 	      lda	bmp_96x2_1_00,y
     71  2877		       85 1b		      sta	GRP0
     72  2879		       b9 c1 fb 	      lda	bmp_96x2_1_02,y
     73  287c		       85 1b		      sta	GRP0
     74  287e		       b9 3c fc 	      lda	bmp_96x2_1_04,y
     75  2881		       85 1b		      sta	GRP0
     76  2883
      0  2883					      sleep	2
      1  2883				   .CYCLES    SET	2
      2  2883
      3  2883				  -	      IF	.CYCLES < 2
      4  2883				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  2883				  -	      ERR
      6  2883					      ENDIF
      7  2883
      8  2883				  -	      IF	.CYCLES & 1
      9  2883				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  2883				  -	      nop	0
     11  2883				  -	      ELSE
     12  2883				  -	      bit	VSYNC
     13  2883				  -	      ENDIF
     14  2883				  -.CYCLES    SET	.CYCLES - 3
     15  2883					      ENDIF
     16  2883
     17  2883					      REPEAT	.CYCLES / 2
     18  2883		       ea		      nop
     19  2884					      REPEND
     78  2884
     79  2884		       b9 3c fd 	      lda	bmp_96x2_1_08,y
     80  2887		       85 1c		      sta	GRP1
     81  2889		       b9 b4 fd 	      lda	bmp_96x2_1_10,y
     82  288c		       85 1c		      sta	GRP1
     83  288e
     84  288e		       b9 85 fb 	      lda	bmp_96x2_1_01,y
     85  2891		       85 1b		      sta	GRP0
     86  2893
      0  2893					      sleep	8
      1  2893				   .CYCLES    SET	8
      2  2893
      3  2893				  -	      IF	.CYCLES < 2
      4  2893				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  2893				  -	      ERR
      6  2893					      ENDIF
      7  2893
      8  2893				  -	      IF	.CYCLES & 1
      9  2893				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  2893				  -	      nop	0
     11  2893				  -	      ELSE
     12  2893				  -	      bit	VSYNC
     13  2893				  -	      ENDIF
     14  2893				  -.CYCLES    SET	.CYCLES - 3
     15  2893					      ENDIF
     16  2893
     17  2893					      REPEAT	.CYCLES / 2
     18  2893		       ea		      nop
     17  2893					      REPEND
     18  2894		       ea		      nop
     17  2894					      REPEND
     18  2895		       ea		      nop
     17  2895					      REPEND
     18  2896		       ea		      nop
     19  2897					      REPEND
     88  2897
     89  2897							;sta WSYNC	;=0
     90  2897		       85 2a		      sta	HMOVE	;3 - NORMAL HMOVE
     91  2899
     92  2899		       b9 0c fb 	      lda	bmp_96x2_1_colors-1,y	;4 - get the title color early and store it for later
     93  289c				  -	      ifconst	bmp_96x2_1_fade
     94  289c				  -	      and	bmp_96x2_1_fade
     95  289c					      else
      0  289c					      sleep	3
      1  289c				   .CYCLES    SET	3
      2  289c
      3  289c				  -	      IF	.CYCLES < 2
      4  289c				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  289c				  -	      ERR
      6  289c					      ENDIF
      7  289c
      8  289c					      IF	.CYCLES & 1
      9  289c					      IFNCONST	NO_ILLEGAL_OPCODES
     10  289c		       04 00		      nop	0
     11  289e				  -	      ELSE
     12  289e				  -	      bit	VSYNC
     13  289e					      ENDIF
     14  289e				   .CYCLES    SET	.CYCLES - 3
     15  289e					      ENDIF
     16  289e
     17  289e				  -	      REPEAT	.CYCLES / 2
     18  289e				  -	      nop
     19  289e					      REPEND
     97  289e					      endif
     98  289e		       aa		      tax
     99  289f
    100  289f		       a9 00		      lda	#0	;2
    101  28a1		       85 20		      sta	HMP0	;3
    102  28a3		       85 21		      sta	HMP1	;3
    103  28a5
      0  28a5					      sleep	7
      1  28a5				   .CYCLES    SET	7
      2  28a5
      3  28a5				  -	      IF	.CYCLES < 2
      4  28a5				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  28a5				  -	      ERR
      6  28a5					      ENDIF
      7  28a5
      8  28a5					      IF	.CYCLES & 1
      9  28a5					      IFNCONST	NO_ILLEGAL_OPCODES
     10  28a5		       04 00		      nop	0
     11  28a7				  -	      ELSE
     12  28a7				  -	      bit	VSYNC
     13  28a7					      ENDIF
     14  28a7				   .CYCLES    SET	.CYCLES - 3
     15  28a7					      ENDIF
     16  28a7
     17  28a7					      REPEAT	.CYCLES / 2
     18  28a7		       ea		      nop
     17  28a7					      REPEND
     18  28a8		       ea		      nop
     19  28a9					      REPEND
    105  28a9
    106  28a9		       b9 00 fd 	      lda	bmp_96x2_1_07,y
    107  28ac		       85 1c		      sta	GRP1
    108  28ae
    109  28ae		       b9 00 fc 	      lda	bmp_96x2_1_03,y	;5
    110  28b1		       85 1b		      sta	GRP0	;3 =  8
    111  28b3		       b9 78 fc 	      lda	bmp_96x2_1_05,y	;5
    112  28b6		       85 1b		      sta	GRP0	;3 =  8
    113  28b8
      0  28b8					      sleep	2
      1  28b8				   .CYCLES    SET	2
      2  28b8
      3  28b8				  -	      IF	.CYCLES < 2
      4  28b8				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  28b8				  -	      ERR
      6  28b8					      ENDIF
      7  28b8
      8  28b8				  -	      IF	.CYCLES & 1
      9  28b8				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  28b8				  -	      nop	0
     11  28b8				  -	      ELSE
     12  28b8				  -	      bit	VSYNC
     13  28b8				  -	      ENDIF
     14  28b8				  -.CYCLES    SET	.CYCLES - 3
     15  28b8					      ENDIF
     16  28b8
     17  28b8					      REPEAT	.CYCLES / 2
     18  28b8		       ea		      nop
     19  28b9					      REPEND
    115  28b9
    116  28b9		       b9 78 fd 	      lda	bmp_96x2_1_09,y	;5
    117  28bc		       85 1c		      sta	GRP1	;3 =  8
    118  28be		       b9 00 fe 	      lda	bmp_96x2_1_11,y	;5
    119  28c1		       85 1c		      sta	GRP1	;3 =  8
    120  28c3
      0  28c3					      sleep	2
      1  28c3				   .CYCLES    SET	2
      2  28c3
      3  28c3				  -	      IF	.CYCLES < 2
      4  28c3				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  28c3				  -	      ERR
      6  28c3					      ENDIF
      7  28c3
      8  28c3				  -	      IF	.CYCLES & 1
      9  28c3				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  28c3				  -	      nop	0
     11  28c3				  -	      ELSE
     12  28c3				  -	      bit	VSYNC
     13  28c3				  -	      ENDIF
     14  28c3				  -.CYCLES    SET	.CYCLES - 3
     15  28c3					      ENDIF
     16  28c3
     17  28c3					      REPEAT	.CYCLES / 2
     18  28c3		       ea		      nop
     19  28c4					      REPEND
    122  28c4		       86 07		      stx	COLUP1
    123  28c6		       86 06		      stx	COLUP0
    124  28c8
    125  28c8		       85 2a		      sta	HMOVE	;3 - CYCLE 74 HMOVE
      0  28ca					      sleep	2
      1  28ca				   .CYCLES    SET	2
      2  28ca
      3  28ca				  -	      IF	.CYCLES < 2
      4  28ca				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  28ca				  -	      ERR
      6  28ca					      ENDIF
      7  28ca
      8  28ca				  -	      IF	.CYCLES & 1
      9  28ca				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  28ca				  -	      nop	0
     11  28ca				  -	      ELSE
     12  28ca				  -	      bit	VSYNC
     13  28ca				  -	      ENDIF
     14  28ca				  -.CYCLES    SET	.CYCLES - 3
     15  28ca					      ENDIF
     16  28ca
     17  28ca					      REPEAT	.CYCLES / 2
     18  28ca		       ea		      nop
     19  28cb					      REPEND
    127  28cb		       88		      dey
    128  28cc
    129  28cc		       c4 9c		      cpy	temp1	;3
    130  28ce		       d0 99		      bne	pfline_96x2_1_frame0	;2/3
    131  28d0
    132  28d0				   pf96x2_1_0codeend
    133  28d0							;echo "critical code #1 in 96x2_1 is ",(pf96x2_1_0codeend-pfline_96x2_1_frame0), " bytes long."
    134  28d0
    135  28d0		       a9 00		      lda	#0
    136  28d2		       85 1b		      sta	GRP0
    137  28d4		       85 1c		      sta	GRP1
    138  28d6		       4c 7e f9 	      jmp	pfdone_96x2_1
    139  28d9
    140  28d9
    141  28d9				   pf96x2_1_frame1
    142  28d9
    143  28d9							;postion P0 and P1
    144  28d9		       85 02		      sta	WSYNC
    145  28db		       a9 20		      lda	#%00100000
    146  28dd		       85 20		      sta	HMP0
    147  28df		       a9 00		      lda	#0
    148  28e1		       a9 f0		      lda	#%11110000
    149  28e3		       85 21		      sta	HMP1
    150  28e5		       85 02		      sta	WSYNC
      0  28e7					      sleep	32
      1  28e7				   .CYCLES    SET	32
      2  28e7
      3  28e7				  -	      IF	.CYCLES < 2
      4  28e7				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  28e7				  -	      ERR
      6  28e7					      ENDIF
      7  28e7
      8  28e7				  -	      IF	.CYCLES & 1
      9  28e7				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  28e7				  -	      nop	0
     11  28e7				  -	      ELSE
     12  28e7				  -	      bit	VSYNC
     13  28e7				  -	      ENDIF
     14  28e7				  -.CYCLES    SET	.CYCLES - 3
     15  28e7					      ENDIF
     16  28e7
     17  28e7					      REPEAT	.CYCLES / 2
     18  28e7		       ea		      nop
     17  28e7					      REPEND
     18  28e8		       ea		      nop
     17  28e8					      REPEND
     18  28e9		       ea		      nop
     17  28e9					      REPEND
     18  28ea		       ea		      nop
     17  28ea					      REPEND
     18  28eb		       ea		      nop
     17  28eb					      REPEND
     18  28ec		       ea		      nop
     17  28ec					      REPEND
     18  28ed		       ea		      nop
     17  28ed					      REPEND
     18  28ee		       ea		      nop
     17  28ee					      REPEND
     18  28ef		       ea		      nop
     17  28ef					      REPEND
     18  28f0		       ea		      nop
     17  28f0					      REPEND
     18  28f1		       ea		      nop
     17  28f1					      REPEND
     18  28f2		       ea		      nop
     17  28f2					      REPEND
     18  28f3		       ea		      nop
     17  28f3					      REPEND
     18  28f4		       ea		      nop
     17  28f4					      REPEND
     18  28f5		       ea		      nop
     17  28f5					      REPEND
     18  28f6		       ea		      nop
     19  28f7					      REPEND
    152  28f7		       85 10		      sta	RESP0
      0  28f9					      sleep	12
      1  28f9				   .CYCLES    SET	12
      2  28f9
      3  28f9				  -	      IF	.CYCLES < 2
      4  28f9				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  28f9				  -	      ERR
      6  28f9					      ENDIF
      7  28f9
      8  28f9				  -	      IF	.CYCLES & 1
      9  28f9				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  28f9				  -	      nop	0
     11  28f9				  -	      ELSE
     12  28f9				  -	      bit	VSYNC
     13  28f9				  -	      ENDIF
     14  28f9				  -.CYCLES    SET	.CYCLES - 3
     15  28f9					      ENDIF
     16  28f9
     17  28f9					      REPEAT	.CYCLES / 2
     18  28f9		       ea		      nop
     17  28f9					      REPEND
     18  28fa		       ea		      nop
     17  28fa					      REPEND
     18  28fb		       ea		      nop
     17  28fb					      REPEND
     18  28fc		       ea		      nop
     17  28fc					      REPEND
     18  28fd		       ea		      nop
     17  28fd					      REPEND
     18  28fe		       ea		      nop
     19  28ff					      REPEND
    154  28ff		       85 11		      sta	RESP1
    155  2901		       85 02		      sta	WSYNC
    156  2903		       85 2a		      sta	HMOVE
    157  2905
    158  2905		       85 02		      sta	WSYNC
    159  2907		       85 2b		      sta	HMCLR
    160  2909
    161  2909
    162  2909
    163  2909		       85 02		      sta	WSYNC
      0  290b					      sleep	3
      1  290b				   .CYCLES    SET	3
      2  290b
      3  290b				  -	      IF	.CYCLES < 2
      4  290b				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  290b				  -	      ERR
      6  290b					      ENDIF
      7  290b
      8  290b					      IF	.CYCLES & 1
      9  290b					      IFNCONST	NO_ILLEGAL_OPCODES
     10  290b		       04 00		      nop	0
     11  290d				  -	      ELSE
     12  290d				  -	      bit	VSYNC
     13  290d					      ENDIF
     14  290d				   .CYCLES    SET	.CYCLES - 3
     15  290d					      ENDIF
     16  290d
     17  290d				  -	      REPEAT	.CYCLES / 2
     18  290d				  -	      nop
     19  290d					      REPEND
    165  290d		       4c 10 f9 	      jmp	pfline_96x2_1_frame1
    166  2910
    167  2910							;align so our branch doesn't unexpectedly cross a page...
    168  2910				  -	      if	>. != >[.+$70]
    169  2910				  -	      align	256
    170  2910					      endif
    171  2910
    172  2910				   pfline_96x2_1_frame1
    173  2910
    174  2910		       85 2a		      sta	HMOVE
    175  2912
    176  2912		       b9 00 fd 	      lda	bmp_96x2_1_07,y	;4
    177  2915		       85 1c		      sta	GRP1	;3
    178  2917
    179  2917		       a9 00		      lda	#$0	;2
    180  2919		       85 20		      sta	HMP0	;3
    181  291b		       85 21		      sta	HMP1	;3
    182  291d
    183  291d		       b9 85 fb 	      lda	bmp_96x2_1_01,y
    184  2920		       8d 1b 00 	      sta.w	GRP0
    185  2923		       b9 00 fc 	      lda	bmp_96x2_1_03,y
    186  2926		       85 1b		      sta	GRP0
    187  2928		       b9 78 fc 	      lda	bmp_96x2_1_05,y
    188  292b		       85 1b		      sta	GRP0
    189  292d
      0  292d					      sleep	2
      1  292d				   .CYCLES    SET	2
      2  292d
      3  292d				  -	      IF	.CYCLES < 2
      4  292d				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  292d				  -	      ERR
      6  292d					      ENDIF
      7  292d
      8  292d				  -	      IF	.CYCLES & 1
      9  292d				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  292d				  -	      nop	0
     11  292d				  -	      ELSE
     12  292d				  -	      bit	VSYNC
     13  292d				  -	      ENDIF
     14  292d				  -.CYCLES    SET	.CYCLES - 3
     15  292d					      ENDIF
     16  292d
     17  292d					      REPEAT	.CYCLES / 2
     18  292d		       ea		      nop
     19  292e					      REPEND
    191  292e
    192  292e		       b9 78 fd 	      lda	bmp_96x2_1_09,y
    193  2931		       85 1c		      sta	GRP1
    194  2933		       b9 00 fe 	      lda	bmp_96x2_1_11,y
    195  2936		       85 1c		      sta	GRP1
    196  2938
    197  2938		       b9 49 fb 	      lda	bmp_96x2_1_00,y
    198  293b		       85 1b		      sta	GRP0
    199  293d
    200  293d		       8d 2a 00 	      sta.w	HMOVE	;3 - cycle 74
    201  2940
    202  2940							;sta WSYNC	;=0 -----------------------------------------
    203  2940
    204  2940		       b9 b4 fc 	      lda	bmp_96x2_1_06,y
    205  2943		       85 1c		      sta	GRP1
    206  2945
      0  2945					      sleep	8
      1  2945				   .CYCLES    SET	8
      2  2945
      3  2945				  -	      IF	.CYCLES < 2
      4  2945				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  2945				  -	      ERR
      6  2945					      ENDIF
      7  2945
      8  2945				  -	      IF	.CYCLES & 1
      9  2945				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  2945				  -	      nop	0
     11  2945				  -	      ELSE
     12  2945				  -	      bit	VSYNC
     13  2945				  -	      ENDIF
     14  2945				  -.CYCLES    SET	.CYCLES - 3
     15  2945					      ENDIF
     16  2945
     17  2945					      REPEAT	.CYCLES / 2
     18  2945		       ea		      nop
     17  2945					      REPEND
     18  2946		       ea		      nop
     17  2946					      REPEND
     18  2947		       ea		      nop
     17  2947					      REPEND
     18  2948		       ea		      nop
     19  2949					      REPEND
    208  2949
    209  2949		       b9 0c fb 	      lda	bmp_96x2_1_colors-1,y	;get the title color early and store it for later
    210  294c		       aa		      tax		;2
    211  294d
      0  294d					      sleep	3
      1  294d				   .CYCLES    SET	3
      2  294d
      3  294d				  -	      IF	.CYCLES < 2
      4  294d				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  294d				  -	      ERR
      6  294d					      ENDIF
      7  294d
      8  294d					      IF	.CYCLES & 1
      9  294d					      IFNCONST	NO_ILLEGAL_OPCODES
     10  294d		       04 00		      nop	0
     11  294f				  -	      ELSE
     12  294f				  -	      bit	VSYNC
     13  294f					      ENDIF
     14  294f				   .CYCLES    SET	.CYCLES - 3
     15  294f					      ENDIF
     16  294f
     17  294f				  -	      REPEAT	.CYCLES / 2
     18  294f				  -	      nop
     19  294f					      REPEND
    213  294f
    214  294f		       a9 80		      lda	#$80	;2
    215  2951		       85 20		      sta	HMP0	;3
    216  2953		       85 21		      sta	HMP1	;3
    217  2955
    218  2955
    219  2955		       b9 c1 fb 	      lda	bmp_96x2_1_02,y	;5
    220  2958		       85 1b		      sta	GRP0	;3 =  8
    221  295a
    222  295a		       b9 3c fc 	      lda	bmp_96x2_1_04,y	;5
    223  295d		       85 1b		      sta	GRP0	;3 =  8
    224  295f
      0  295f					      sleep	2
      1  295f				   .CYCLES    SET	2
      2  295f
      3  295f				  -	      IF	.CYCLES < 2
      4  295f				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  295f				  -	      ERR
      6  295f					      ENDIF
      7  295f
      8  295f				  -	      IF	.CYCLES & 1
      9  295f				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  295f				  -	      nop	0
     11  295f				  -	      ELSE
     12  295f				  -	      bit	VSYNC
     13  295f				  -	      ENDIF
     14  295f				  -.CYCLES    SET	.CYCLES - 3
     15  295f					      ENDIF
     16  295f
     17  295f					      REPEAT	.CYCLES / 2
     18  295f		       ea		      nop
     19  2960					      REPEND
    226  2960
    227  2960		       b9 3c fd 	      lda	bmp_96x2_1_08,y	;5
    228  2963		       85 1c		      sta	GRP1	;3 =  8
    229  2965
    230  2965		       b9 b4 fd 	      lda	bmp_96x2_1_10,y	;5
    231  2968		       85 1c		      sta	GRP1	;3 =  8
    232  296a
      0  296a					      sleep	4
      1  296a				   .CYCLES    SET	4
      2  296a
      3  296a				  -	      IF	.CYCLES < 2
      4  296a				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  296a				  -	      ERR
      6  296a					      ENDIF
      7  296a
      8  296a				  -	      IF	.CYCLES & 1
      9  296a				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  296a				  -	      nop	0
     11  296a				  -	      ELSE
     12  296a				  -	      bit	VSYNC
     13  296a				  -	      ENDIF
     14  296a				  -.CYCLES    SET	.CYCLES - 3
     15  296a					      ENDIF
     16  296a
     17  296a					      REPEAT	.CYCLES / 2
     18  296a		       ea		      nop
     17  296a					      REPEND
     18  296b		       ea		      nop
     19  296c					      REPEND
    234  296c
    235  296c		       88		      dey
    236  296d
    237  296d		       8a		      txa
    238  296e				  -	      ifconst	bmp_96x2_1_fade
    239  296e				  -	      and	bmp_96x2_1_fade
    240  296e					      else
      0  296e					      sleep	3
      1  296e				   .CYCLES    SET	3
      2  296e
      3  296e				  -	      IF	.CYCLES < 2
      4  296e				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  296e				  -	      ERR
      6  296e					      ENDIF
      7  296e
      8  296e					      IF	.CYCLES & 1
      9  296e					      IFNCONST	NO_ILLEGAL_OPCODES
     10  296e		       04 00		      nop	0
     11  2970				  -	      ELSE
     12  2970				  -	      bit	VSYNC
     13  2970					      ENDIF
     14  2970				   .CYCLES    SET	.CYCLES - 3
     15  2970					      ENDIF
     16  2970
     17  2970				  -	      REPEAT	.CYCLES / 2
     18  2970				  -	      nop
     19  2970					      REPEND
    242  2970					      endif
    243  2970		       85 07		      sta	COLUP1	;3
    244  2972		       85 06		      sta	COLUP0	;3
    245  2974
    246  2974		       c4 9c		      cpy	temp1	;2
    247  2976		       d0 98		      bne	pfline_96x2_1_frame1	;2/3
    248  2978
    249  2978				   pf96x2_1_1codeend
    250  2978							;echo "critical code #2 in 96x2_1 is ",(pf96x2_1_1codeend-pfline_96x2_1_frame1), " bytes long."
    251  2978
    252  2978		       a9 00		      lda	#0
    253  297a		       85 1b		      sta	GRP0
    254  297c		       85 1c		      sta	GRP1
    255  297e
    256  297e				   pfdone_96x2_1
    257  297e		       85 02		      sta	WSYNC	; debug
    258  2980
    259  2980		       60		      rts
------- FILE titlescreen/asm/titlescreen.asm
    149  2981					      endif		;mk_96x2_1_on
    150  2981
    151  2981				  -	      ifconst	mk_96x2_2_on
    152  2981				  -	      include	"titlescreen/asm/96x2_2_kernel.asm"
    153  2981					      endif		;mk_96x2_2_on
    154  2981
    155  2981				  -	      ifconst	mk_96x2_3_on
    156  2981				  -	      include	"titlescreen/asm/96x2_3_kernel.asm"
    157  2981					      endif		;mk_96x2_3_on
    158  2981
    159  2981				  -	      ifconst	mk_96x2_4_on
    160  2981				  -	      include	"titlescreen/asm/96x2_4_kernel.asm"
    161  2981					      endif		;mk_96x2_4_on
    162  2981
    163  2981				  -	      ifconst	mk_96x2_5_on
    164  2981				  -	      include	"titlescreen/asm/96x2_5_kernel.asm"
    165  2981					      endif		;mk_96x2_5_on
    166  2981
    167  2981				  -	      ifconst	mk_96x2_6_on
    168  2981				  -	      include	"titlescreen/asm/96x2_6_kernel.asm"
    169  2981					      endif		;mk_96x2_6_on
    170  2981
    171  2981				  -	      ifconst	mk_96x2_7_on
    172  2981				  -	      include	"titlescreen/asm/96x2_7_kernel.asm"
    173  2981					      endif		;mk_96x2_7_on
    174  2981
    175  2981				  -	      ifconst	mk_96x2_8_on
    176  2981				  -	      include	"titlescreen/asm/96x2_8_kernel.asm"
    177  2981					      endif		;mk_96x2_8_on
    178  2981
    179  2981					      ifconst	mk_score_on
------- FILE titlescreen/asm/score_kernel.asm LEVEL 3 PASS 3
      0  2981					      include	"titlescreen/asm/score_kernel.asm"
      1  2981							; The batari Basic score kernel
      2  2981							; This minikernel is not under the same license as the rest of the
      3  2981							; titlescreen code. Refer to the bB license before you use this in
      4  2981							; a non-bB program.
      5  2981
      6  2981				   draw_score_display
      7  2981
      8  2981		       a7 93		      lax	score+0
      9  2983		       20 43 fa 	      jsr	miniscorepointerset
     10  2986		       84 9e		      sty	scorepointers+8
     11  2988		       86 96		      stx	scorepointers+0
     12  298a		       a7 94		      lax	score+1
     13  298c		       20 43 fa 	      jsr	miniscorepointerset
     14  298f		       84 9a		      sty	scorepointers+4
     15  2991		       86 9c		      stx	scorepointers+6
     16  2993		       a7 95		      lax	score+2
     17  2995		       20 43 fa 	      jsr	miniscorepointerset
     18  2998		       84 a0		      sty	scorepointers+10
     19  299a		       86 98		      stx	scorepointers+2
     20  299c
     21  299c		       85 2b		      sta	HMCLR
     22  299e		       ba		      tsx
     23  299f		       86 f6		      stx	stack1
     24  29a1							;ldx #$20
     25  29a1		       a2 60		      ldx	#$60
     26  29a3		       86 20		      stx	HMP0
     27  29a5
     28  29a5		       a2 00		      ldx	#0
     29  29a7		       85 02		      sta	WSYNC	;   0
     30  29a9		       86 1b		      STx	GRP0	; 3 3
     31  29ab		       86 1c		      STx	GRP1	; 3 6 seems to be needed because of vdel
     32  29ad
      0  29ad					      sleep	7	; 7 13
      1  29ad				   .CYCLES    SET	7
      2  29ad
      3  29ad				  -	      IF	.CYCLES < 2
      4  29ad				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  29ad				  -	      ERR
      6  29ad					      ENDIF
      7  29ad
      8  29ad					      IF	.CYCLES & 1
      9  29ad					      IFNCONST	NO_ILLEGAL_OPCODES
     10  29ad		       04 00		      nop	0
     11  29af				  -	      ELSE
     12  29af				  -	      bit	VSYNC
     13  29af					      ENDIF
     14  29af				   .CYCLES    SET	.CYCLES - 3
     15  29af					      ENDIF
     16  29af
     17  29af					      REPEAT	.CYCLES / 2
     18  29af		       ea		      nop
     17  29af					      REPEND
     18  29b0		       ea		      nop
     19  29b1					      REPEND
     34  29b1
     35  29b1		       a9 fe		      lda	#>miniscoretable	; 2 15
     36  29b3		       95 97		      sta	scorepointers+1,x	; 4 19
     37  29b5		       95 99		      sta	scorepointers+3,x	; 4 23
     38  29b7		       95 9b		      sta	scorepointers+5,x	; 4 27
     39  29b9		       95 9d		      sta	scorepointers+7,x	; 4 31
     40  29bb		       95 9f		      sta	scorepointers+9,x	; 4 35
     41  29bd		       95 a1		      sta	scorepointers+11,x	; 4 39
     42  29bf
     43  29bf		       a0 07		      LDY	#7	; 2 41
     44  29c1		       85 10		      STA	RESP0	; 3 44
     45  29c3		       85 11		      STA	RESP1	; 3 47
     46  29c5
     47  29c5		       a9 03		      LDA	#$03	; 2 49
     48  29c7		       85 04		      STA	NUSIZ0	; 3 52
     49  29c9		       95 05		      STA	NUSIZ1,x	; 4 56
     50  29cb		       85 25		      STA	VDELP0	; 3 59
     51  29cd		       85 26		      STA	VDELP1	; 3 62
     52  29cf							;LDA #$30		; 2 64
     53  29cf		       a9 70		      LDA	#$70	; 2 64
     54  29d1		       85 21		      STA	HMP1	; 3 67
     55  29d3		       a5 a3		      LDA	scorecolor	; 3 70
     56  29d5		       85 2a		      STA	HMOVE	; cycle 73 ?
     57  29d7				  -	      ifconst	score_kernel_fade
     58  29d7				  -	      and	score_kernel_fade
     59  29d7					      endif
     60  29d7
     61  29d7		       85 06		      STA	COLUP0
     62  29d9		       85 07		      STA	COLUP1
     63  29db				  -	      ifconst	scorefade
     64  29db				  -	      STA	stack2	; scorefade
     65  29db					      endif
     66  29db		       b1 96		      lda	(scorepointers),y
     67  29dd		       85 1b		      sta	GRP0
     68  29df		       b1 9e		      lda	(scorepointers+8),y
     69  29e1		       85 02		      sta	WSYNC
      0  29e3					      sleep	2
      1  29e3				   .CYCLES    SET	2
      2  29e3
      3  29e3				  -	      IF	.CYCLES < 2
      4  29e3				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  29e3				  -	      ERR
      6  29e3					      ENDIF
      7  29e3
      8  29e3				  -	      IF	.CYCLES & 1
      9  29e3				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  29e3				  -	      nop	0
     11  29e3				  -	      ELSE
     12  29e3				  -	      bit	VSYNC
     13  29e3				  -	      ENDIF
     14  29e3				  -.CYCLES    SET	.CYCLES - 3
     15  29e3					      ENDIF
     16  29e3
     17  29e3					      REPEAT	.CYCLES / 2
     18  29e3		       ea		      nop
     19  29e4					      REPEND
     71  29e4		       4c 0b fa 	      jmp	beginscoreloop
     72  29e7
     73  29e7					      if	((<*)>$28)
     74  2a00		       00 00 00 00*	      align	256	; kludge that potentially wastes space!  should be fixed!
     75  2a00					      endif
     76  2a00
     77  2a00				   scoreloop2
     78  2a00				  -	      ifconst	scorefade
     79  2a00				  -	      lda	stack2
     80  2a00				  -	      sta	COLUP0
     81  2a00				  -	      sta	COLUP1
     82  2a00					      else
      0  2a00					      sleep	9
      1  2a00				   .CYCLES    SET	9
      2  2a00
      3  2a00				  -	      IF	.CYCLES < 2
      4  2a00				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  2a00				  -	      ERR
      6  2a00					      ENDIF
      7  2a00
      8  2a00					      IF	.CYCLES & 1
      9  2a00					      IFNCONST	NO_ILLEGAL_OPCODES
     10  2a00		       04 00		      nop	0
     11  2a02				  -	      ELSE
     12  2a02				  -	      bit	VSYNC
     13  2a02					      ENDIF
     14  2a02				   .CYCLES    SET	.CYCLES - 3
     15  2a02					      ENDIF
     16  2a02
     17  2a02					      REPEAT	.CYCLES / 2
     18  2a02		       ea		      nop
     17  2a02					      REPEND
     18  2a03		       ea		      nop
     17  2a03					      REPEND
     18  2a04		       ea		      nop
     19  2a05					      REPEND
     84  2a05					      endif
     85  2a05		       b1 96		      lda	(scorepointers),y	;+5  68  204
     86  2a07		       85 1b		      sta	GRP0	;+3  71  213	   D1	  --	  --	 --
     87  2a09		       b1 9e		      lda	(scorepointers+$8),y	;+5   5   15
     88  2a0b							; cycle 0
     89  2a0b				   beginscoreloop
     90  2a0b		       85 1c		      sta	GRP1	;+3   8   24	   D1	  D1	  D2	 --
     91  2a0d		       b1 9c		      lda	(scorepointers+$6),y	;+5  13   39
     92  2a0f		       85 1b		      sta	GRP0	;+3  16   48	   D3	  D1	  D2	 D2
     93  2a11		       b3 98		      lax	(scorepointers+$2),y	;+5  29   87
     94  2a13		       9a		      txs
     95  2a14		       b3 9a		      lax	(scorepointers+$4),y	;+5  36  108
     96  2a16
     97  2a16				  -	      ifconst	scorefade
     98  2a16				  -	      dec	stack2
     99  2a16					      else
      0  2a16					      sleep	5
      1  2a16				   .CYCLES    SET	5
      2  2a16
      3  2a16				  -	      IF	.CYCLES < 2
      4  2a16				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  2a16				  -	      ERR
      6  2a16					      ENDIF
      7  2a16
      8  2a16					      IF	.CYCLES & 1
      9  2a16					      IFNCONST	NO_ILLEGAL_OPCODES
     10  2a16		       04 00		      nop	0
     11  2a18				  -	      ELSE
     12  2a18				  -	      bit	VSYNC
     13  2a18					      ENDIF
     14  2a18				   .CYCLES    SET	.CYCLES - 3
     15  2a18					      ENDIF
     16  2a18
     17  2a18					      REPEAT	.CYCLES / 2
     18  2a18		       ea		      nop
     19  2a19					      REPEND
    101  2a19					      endif
      0  2a19					      sleep	2
      1  2a19				   .CYCLES    SET	2
      2  2a19
      3  2a19				  -	      IF	.CYCLES < 2
      4  2a19				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  2a19				  -	      ERR
      6  2a19					      ENDIF
      7  2a19
      8  2a19				  -	      IF	.CYCLES & 1
      9  2a19				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  2a19				  -	      nop	0
     11  2a19				  -	      ELSE
     12  2a19				  -	      bit	VSYNC
     13  2a19				  -	      ENDIF
     14  2a19				  -.CYCLES    SET	.CYCLES - 3
     15  2a19					      ENDIF
     16  2a19
     17  2a19					      REPEAT	.CYCLES / 2
     18  2a19		       ea		      nop
     19  2a1a					      REPEND
    103  2a1a
    104  2a1a		       b1 a0		      lda	(scorepointers+$A),y	;+5  21   63 DIGIT 6
    105  2a1c		       86 1c		      stx	GRP1	;+3  44  132	   D3	  D3	  D4	 D2!
    106  2a1e		       ba		      tsx
    107  2a1f		       86 1b		      stx	GRP0	;+3  47  141	   D5	  D3!	  D4	 D4
    108  2a21		       85 1c		      sta	GRP1	;+3  50  150	   D5	  D5	  D6	 D4!
    109  2a23
    110  2a23		       84 1b		      sty	GRP0	;+3  53  159	   D4*	  D5!	  D6	 D6
    111  2a25		       88		      dey
    112  2a26		       10 d8		      bpl	scoreloop2	;+2  60  180
    113  2a28				   scoreloop2end
    114  2a28
    115  2a28							;echo "critical size: ",(scoreloop2end-scoreloop2)
    116  2a28
    117  2a28
    118  2a28		       a6 f6		      ldx	stack1
    119  2a2a		       9a		      txs
    120  2a2b
    121  2a2b		       a9 00		      LDA	#0
    122  2a2d		       85 0e		      sta	PF1
    123  2a2f		       85 1b		      STA	GRP0
    124  2a31		       85 1c		      STA	GRP1
    125  2a33		       85 25		      STA	VDELP0
    126  2a35		       85 26		      STA	VDELP1
    127  2a37		       85 04		      STA	NUSIZ0
    128  2a39		       85 05		      STA	NUSIZ1
    129  2a3b
    130  2a3b							; clear out the score pointers in case they're stolen DPC variables...
    131  2a3b		       a2 0b		      ldx	#11
    132  2a3d				   clearscoreploop
    133  2a3d		       95 96		      sta	scorepointers,x
    134  2a3f		       ca		      dex
    135  2a40		       10 fb		      bpl	clearscoreploop
    136  2a42
    137  2a42
    138  2a42							;;ldy temp3
    139  2a42							;ldy scorepointers+8
    140  2a42							;sty scorepointers+3
    141  2a42
    142  2a42							;;ldy temp5
    143  2a42							;ldy scorepointers+10
    144  2a42							;sty scorepointers+5
    145  2a42		       60		      rts
    146  2a43
    147  2a43				   miniscorepointerset
    148  2a43		       29 0f		      and	#$0F
    149  2a45		       0a		      asl
    150  2a46		       0a		      asl
    151  2a47		       0a		      asl
    152  2a48		       69 3d		      adc	#<miniscoretable
    153  2a4a		       a8		      tay
    154  2a4b		       8a		      txa
    155  2a4c		       29 f0		      and	#$F0
    156  2a4e		       4a		      lsr
    157  2a4f		       69 3d		      adc	#<miniscoretable
    158  2a51		       aa		      tax
    159  2a52		       60		      rts
    160  2a53
------- FILE titlescreen/asm/titlescreen.asm
    181  2a53					      endif		;mk_score_on
    182  2a53
    183  2a53					      ifconst	mk_gameselect_on
------- FILE titlescreen/asm/gameselect_kernel.asm LEVEL 3 PASS 3
      0  2a53					      include	"titlescreen/asm/gameselect_kernel.asm"
      1  2a53
      2  2a53				   draw_gameselect_display
      3  2a53		       a9 00		      lda	#0
      4  2a55		       85 1b		      sta	GRP0
      5  2a57		       85 1c		      sta	GRP1
      6  2a59
      7  2a59		       a0 04		      ldy	#4
      8  2a5b		       84 f1		      sty	aux2
      9  2a5d
     10  2a5d		       ad 8d fe 	      lda	bmp_gameselect_color
     11  2a60		       85 06		      sta	COLUP0
     12  2a62		       85 07		      sta	COLUP1
     13  2a64
     14  2a64							;change gamenumber to a BCD number and stick it in temp5
     15  2a64		       a5 a6		      lda	gamenumber
     16  2a66		       85 9e		      sta	temp3
     17  2a68		       a9 00		      lda	#0
     18  2a6a		       85 9f		      sta	temp4
     19  2a6c		       a2 08		      ldx	#8
     20  2a6e		       18		      clc
     21  2a6f		       f8		      sed
     22  2a70				   converttobcd
     23  2a70		       06 9e		      asl	temp3
     24  2a72		       a5 9f		      lda	temp4
     25  2a74		       65 9f		      adc	temp4
     26  2a76		       85 9f		      sta	temp4
     27  2a78		       ca		      dex
     28  2a79		       d0 f5		      bne	converttobcd
     29  2a7b		       d8		      cld
     30  2a7c
     31  2a7c		       a5 9f		      lda	temp4
     32  2a7e		       29 0f		      and	#$0f
     33  2a80		       85 9e		      sta	temp3
     34  2a82		       0a		      asl
     35  2a83		       0a		      asl
     36  2a84		       18		      clc
     37  2a85		       65 9e		      adc	temp3	; *5
     38  2a87		       18		      clc
     39  2a88		       69 a2		      adc	#<(font_gameselect_img)
     40  2a8a		       85 a0		      sta	scorepointers+10
     41  2a8c
     42  2a8c		       a5 9f		      lda	temp4
     43  2a8e		       29 f0		      and	#$f0
     44  2a90		       4a		      lsr
     45  2a91		       4a		      lsr
     46  2a92		       85 9e		      sta	temp3
     47  2a94		       4a		      lsr
     48  2a95		       4a		      lsr
     49  2a96		       18		      clc
     50  2a97		       65 9e		      adc	temp3	; *5
     51  2a99		       18		      clc
     52  2a9a		       69 a2		      adc	#<(font_gameselect_img)
     53  2a9c		       85 9e		      sta	scorepointers+8
     54  2a9e
     55  2a9e
     56  2a9e							;setup score pointers to point at my bitmap slices instead
     57  2a9e		       a9 8e		      lda	#<(bmp_gameselect_CHAR0)
     58  2aa0		       85 96		      sta	scorepointers+0
     59  2aa2		       a9 fe		      lda	#>(bmp_gameselect_CHAR0)
     60  2aa4		       85 97		      sta	scorepointers+1
     61  2aa6		       a9 93		      lda	#<(bmp_gameselect_CHAR1)
     62  2aa8		       85 98		      sta	scorepointers+2
     63  2aaa		       a9 fe		      lda	#>(bmp_gameselect_CHAR1)
     64  2aac		       85 99		      sta	scorepointers+3
     65  2aae		       a9 98		      lda	#<(bmp_gameselect_CHAR2)
     66  2ab0		       85 9a		      sta	scorepointers+4
     67  2ab2		       a9 fe		      lda	#>(bmp_gameselect_CHAR2)
     68  2ab4		       85 9b		      sta	scorepointers+5
     69  2ab6		       a9 9d		      lda	#<(bmp_gameselect_CHAR3)
     70  2ab8		       85 9c		      sta	scorepointers+6
     71  2aba		       a9 fe		      lda	#>(bmp_gameselect_CHAR3)
     72  2abc		       85 9d		      sta	scorepointers+7
     73  2abe
     74  2abe		       a9 fe		      lda	#>(font_gameselect_img)
     75  2ac0		       85 9f		      sta	scorepointers+9
     76  2ac2
     77  2ac2		       a9 fe		      lda	#>(font_gameselect_img)
     78  2ac4		       85 a1		      sta	scorepointers+11
     79  2ac6
     80  2ac6		       4c ec f6 	      jmp	draw_bmp_48x1_X
------- FILE titlescreen/asm/titlescreen.asm
    185  2ac9					      endif		;mk_gameselect_on
    186  2ac9
    187  2ac9				   PFWAIT
    188  2ac9		       ad 84 02 	      lda	INTIM
    189  2acc		       d0 fb		      bne	PFWAIT
    190  2ace		       85 02		      sta	WSYNC
    191  2ad0
    192  2ad0				   OVERSCAN
    193  2ad0					      ifnconst	overscan_time
    194  2ad0		       a9 a2		      lda	#34+128
    195  2ad2				  -	      else
    196  2ad2				  -	      lda	#overscan_time+128-5
    197  2ad2					      endif
    198  2ad2		       8d 96 02 	      sta	TIM64T
    199  2ad5
    200  2ad5							;fix height variables we borrowed, so DPC doesn't crash on drawscreen...
    201  2ad5				  -	      ifconst	player9height
    202  2ad5				  -	      ldy	#8
    203  2ad5				  -	      lda	#0
    204  2ad5				  -	      sta	player0height
    205  2ad5				  -.playerheightfixloop
    206  2ad5				  -	      sta	player1height,y
    207  2ad5				  -	      ifconst	_NUSIZ1
    208  2ad5				  -	      sta	_NUSIZ1,y
    209  2ad5				  -	      endif
    210  2ad5				  -	      dey
    211  2ad5				  -	      bpl	.playerheightfixloop
    212  2ad5					      endif
    213  2ad5
    214  2ad5		       a9 c2		      lda	#%11000010
    215  2ad7		       85 02		      sta	WSYNC
    216  2ad9		       85 01		      sta	VBLANK
      0  2adb					      RETURN
      1  2adb				  -	      ifnconst	bankswitch
      2  2adb				  -	      rts
      3  2adb					      else
      4  2adb		       4c da ff 	      jmp	BS_return
      5  2ade					      endif
    218  2ade
    219  2ade				  -	      ifconst	mk_48x1_1_on
    220  2ade				  -	      include	"titlescreen/48x1_1_image.asm"
    221  2ade					      endif
    222  2ade				  -	      ifconst	mk_48x1_2_on
    223  2ade				  -	      include	"titlescreen/48x1_2_image.asm"
    224  2ade					      endif
    225  2ade				  -	      ifconst	mk_48x1_3_on
    226  2ade				  -	      include	"titlescreen/48x1_3_image.asm"
    227  2ade					      endif
    228  2ade				  -	      ifconst	mk_48x1_4_on
    229  2ade				  -	      include	"titlescreen/48x1_4_image.asm"
    230  2ade					      endif
    231  2ade				  -	      ifconst	mk_48x1_5_on
    232  2ade				  -	      include	"titlescreen/48x1_5_image.asm"
    233  2ade					      endif
    234  2ade				  -	      ifconst	mk_48x1_6_on
    235  2ade				  -	      include	"titlescreen/48x1_6_image.asm"
    236  2ade					      endif
    237  2ade				  -	      ifconst	mk_48x1_7_on
    238  2ade				  -	      include	"titlescreen/48x1_7_image.asm"
    239  2ade					      endif
    240  2ade				  -	      ifconst	mk_48x1_8_on
    241  2ade				  -	      include	"titlescreen/48x1_8_image.asm"
    242  2ade					      endif
    243  2ade
    244  2ade
    245  2ade					      ifconst	mk_48x2_1_on
------- FILE titlescreen/48x2_1_image.asm LEVEL 3 PASS 3
      0  2ade					      include	"titlescreen/48x2_1_image.asm"
      1  2ade
      2  2ade							;*** The height of the displayed data...
      3  2ade		       00 05	   bmp_48x2_1_window =	5
      4  2ade
      5  2ade							;*** The height of the bitmap data. This can be larger than
      6  2ade							;*** the displayed data height, if you're scrolling or animating
      7  2ade							;*** the data...
      8  2ade		       00 05	   bmp_48x2_1_height =	5
      9  2ade
     10  2ade				  -	      if	>. != >[.+(bmp_48x2_1_height)]
     11  2ade				  -	      align	256
     12  2ade					      endif
     13  2ade		       00		      BYTE.b	0	; leave this here!
     14  2adf
     15  2adf
     16  2adf							;*** The color of each line in the bitmap, in reverse order...
     17  2adf				   bmp_48x2_1_colors
     18  2adf		       84		      BYTE.b	_84
     19  2ae0		       88		      BYTE.b	_88
     20  2ae1		       48		      BYTE.b	_48
     21  2ae2		       46		      BYTE.b	_46
     22  2ae3		       44		      BYTE.b	_44
     23  2ae4
     24  2ae4				  -	      ifnconst	bmp_48x2_1_PF1
     25  2ae4				  -bmp_48x2_1_PF1
     26  2ae4					      endif
     27  2ae4		       00		      BYTE.b	%00000000
     28  2ae5				  -	      ifnconst	bmp_48x2_1_PF2
     29  2ae5				  -bmp_48x2_1_PF2
     30  2ae5					      endif
     31  2ae5		       00		      BYTE.b	%00000000
     32  2ae6				  -	      ifnconst	bmp_48x2_1_background
     33  2ae6				  -bmp_48x2_1_background
     34  2ae6					      endif
     35  2ae6		       c2		      BYTE.b	$c2
     36  2ae7
     37  2ae7				  -	      if	>. != >[.+bmp_48x2_1_height]
     38  2ae7				  -	      align	256
     39  2ae7					      endif
     40  2ae7
     41  2ae7
     42  2ae7				   bmp_48x2_1_00
     43  2ae7		       ee		      BYTE.b	%11101110
     44  2ae8		       88		      BYTE.b	%10001000
     45  2ae9		       8c		      BYTE.b	%10001100
     46  2aea		       88		      BYTE.b	%10001000
     47  2aeb		       8e		      BYTE.b	%10001110
     48  2aec		       88		      BYTE.b	%10001000
     49  2aed
     50  2aed				  -	      if	>. != >[.+(bmp_48x2_1_height)]
     51  2aed				  -	      align	256
     52  2aed					      endif
     53  2aed
     54  2aed				   bmp_48x2_1_01
     55  2aed		       4e		      BYTE.b	%01001110
     56  2aee		       48		      BYTE.b	%01001000
     57  2aef		       ac		      BYTE.b	%10101100
     58  2af0		       a8		      BYTE.b	%10101000
     59  2af1		       ae		      BYTE.b	%10101110
     60  2af2		       48		      BYTE.b	%01001000
     61  2af3
     62  2af3				  -	      if	>. != >[.+(bmp_48x2_1_height)]
     63  2af3				  -	      align	256
     64  2af3					      endif
     65  2af3
     66  2af3				   bmp_48x2_1_02
     67  2af3		       e0		      BYTE.b	%11100000
     68  2af4		       80		      BYTE.b	%10000000
     69  2af5		       80		      BYTE.b	%10000000
     70  2af6		       80		      BYTE.b	%10000000
     71  2af7		       80		      BYTE.b	%10000000
     72  2af8		       80		      BYTE.b	%10000000
     73  2af9
     74  2af9				  -	      if	>. != >[.+(bmp_48x2_1_height)]
     75  2af9				  -	      align	256
     76  2af9					      endif
     77  2af9
     78  2af9				   bmp_48x2_1_03
     79  2af9		       00		      BYTE.b	%00000000
     80  2afa		       00		      BYTE.b	%00000000
     81  2afb		       00		      BYTE.b	%00000000
     82  2afc		       00		      BYTE.b	%00000000
     83  2afd		       00		      BYTE.b	%00000000
     84  2afe		       00		      BYTE.b	%00000000
     85  2aff
     86  2aff					      if	>. != >[.+(bmp_48x2_1_height)]
     87  2b00		       00		      align	256
     88  2b00					      endif
     89  2b00
     90  2b00				   bmp_48x2_1_04
     91  2b00		       00		      BYTE.b	%00000000
     92  2b01		       00		      BYTE.b	%00000000
     93  2b02		       00		      BYTE.b	%00000000
     94  2b03		       00		      BYTE.b	%00000000
     95  2b04		       00		      BYTE.b	%00000000
     96  2b05		       00		      BYTE.b	%00000000
     97  2b06
     98  2b06				  -	      if	>. != >[.+(bmp_48x2_1_height)]
     99  2b06				  -	      align	256
    100  2b06					      endif
    101  2b06
    102  2b06				   bmp_48x2_1_05
    103  2b06		       00		      BYTE.b	%00000000
    104  2b07		       00		      BYTE.b	%00000000
    105  2b08		       00		      BYTE.b	%00000000
    106  2b09		       00		      BYTE.b	%00000000
    107  2b0a		       00		      BYTE.b	%00000000
    108  2b0b		       00		      BYTE.b	%00000000
    109  2b0c
------- FILE titlescreen/asm/titlescreen.asm
    247  2b0c					      endif
    248  2b0c				  -	      ifconst	mk_48x2_2_on
    249  2b0c				  -	      include	"titlescreen/48x2_2_image.asm"
    250  2b0c					      endif
    251  2b0c				  -	      ifconst	mk_48x2_3_on
    252  2b0c				  -	      include	"titlescreen/48x2_3_image.asm"
    253  2b0c					      endif
    254  2b0c				  -	      ifconst	mk_48x2_4_on
    255  2b0c				  -	      include	"titlescreen/48x2_4_image.asm"
    256  2b0c					      endif
    257  2b0c				  -	      ifconst	mk_48x2_5_on
    258  2b0c				  -	      include	"titlescreen/48x2_5_image.asm"
    259  2b0c					      endif
    260  2b0c				  -	      ifconst	mk_48x2_6_on
    261  2b0c				  -	      include	"titlescreen/48x2_6_image.asm"
    262  2b0c					      endif
    263  2b0c				  -	      ifconst	mk_48x2_7_on
    264  2b0c				  -	      include	"titlescreen/48x2_7_image.asm"
    265  2b0c					      endif
    266  2b0c
    267  2b0c				  -	      ifconst	mk_48x2_8_on
    268  2b0c				  -	      include	"titlescreen/48x2_8_image.asm"
    269  2b0c					      endif
    270  2b0c
    271  2b0c
    272  2b0c					      ifconst	mk_96x2_1_on
------- FILE titlescreen/96x2_1_image.asm LEVEL 3 PASS 3
      0  2b0c					      include	"titlescreen/96x2_1_image.asm"
      1  2b0c
      2  2b0c							;*** The height of the displayed data...
      3  2b0c		       00 3c	   bmp_96x2_1_window =	60
      4  2b0c
      5  2b0c							;*** The height of the bitmap data. This can be larger than
      6  2b0c							;*** the displayed data height, if you're scrolling or animating
      7  2b0c							;*** the data...
      8  2b0c		       00 3c	   bmp_96x2_1_height =	60
      9  2b0c
     10  2b0c
     11  2b0c				  -	      if	>. != >[.+(bmp_96x2_1_height)]
     12  2b0c				  -	      align	256
     13  2b0c					      endif
     14  2b0c		       00		      BYTE.b	$00	; leave this here!
     15  2b0d
     16  2b0d
     17  2b0d							;*** The color of each line in the bitmap, in reverse order...
     18  2b0d				   bmp_96x2_1_colors
     19  2b0d		       0e		      BYTE.b	$0E
     20  2b0e		       0e		      BYTE.b	$0E
     21  2b0f		       0e		      BYTE.b	$0E
     22  2b10		       0e		      BYTE.b	$0E
     23  2b11		       0e		      BYTE.b	$0E
     24  2b12		       0e		      BYTE.b	$0E
     25  2b13		       0e		      BYTE.b	$0E
     26  2b14		       0e		      BYTE.b	$0E
     27  2b15		       0e		      BYTE.b	$0E
     28  2b16		       0e		      BYTE.b	$0E
     29  2b17		       0e		      BYTE.b	$0E
     30  2b18		       0e		      BYTE.b	$0E
     31  2b19		       0e		      BYTE.b	$0E
     32  2b1a		       0e		      BYTE.b	$0E
     33  2b1b		       0e		      BYTE.b	$0E
     34  2b1c		       0e		      BYTE.b	$0E
     35  2b1d		       0e		      BYTE.b	$0E
     36  2b1e		       0e		      BYTE.b	$0E
     37  2b1f		       0e		      BYTE.b	$0E
     38  2b20		       0e		      BYTE.b	$0E
     39  2b21		       0e		      BYTE.b	$0E
     40  2b22		       0e		      BYTE.b	$0E
     41  2b23		       0e		      BYTE.b	$0E
     42  2b24		       0e		      BYTE.b	$0E
     43  2b25		       0e		      BYTE.b	$0E
     44  2b26		       0e		      BYTE.b	$0E
     45  2b27		       0e		      BYTE.b	$0E
     46  2b28		       0e		      BYTE.b	$0E
     47  2b29		       0e		      BYTE.b	$0E
     48  2b2a		       82		      BYTE.b	_82
     49  2b2b		       82		      BYTE.b	_82
     50  2b2c		       82		      BYTE.b	_82
     51  2b2d		       82		      BYTE.b	_82
     52  2b2e		       82		      BYTE.b	_82
     53  2b2f		       82		      BYTE.b	_82
     54  2b30		       84		      BYTE.b	_84
     55  2b31		       84		      BYTE.b	_84
     56  2b32		       88		      BYTE.b	_88
     57  2b33		       88		      BYTE.b	_88
     58  2b34		       8a		      BYTE.b	_8A
     59  2b35		       8a		      BYTE.b	_8A
     60  2b36		       8a		      BYTE.b	_8A
     61  2b37		       8c		      BYTE.b	_8C
     62  2b38		       8c		      BYTE.b	_8C
     63  2b39		       8c		      BYTE.b	_8C
     64  2b3a		       8c		      BYTE.b	_8C
     65  2b3b		       0e		      BYTE.b	$0E
     66  2b3c		       0e		      BYTE.b	$0E
     67  2b3d		       4a		      BYTE.b	_4A
     68  2b3e		       4a		      BYTE.b	_4A
     69  2b3f		       4a		      BYTE.b	_4A
     70  2b40		       48		      BYTE.b	_48
     71  2b41		       48		      BYTE.b	_48
     72  2b42		       48		      BYTE.b	_48
     73  2b43		       46		      BYTE.b	_46
     74  2b44		       46		      BYTE.b	_46
     75  2b45		       44		      BYTE.b	_44
     76  2b46		       44		      BYTE.b	_44
     77  2b47		       42		      BYTE.b	_42
     78  2b48		       42		      BYTE.b	_42
     79  2b49
     80  2b49
     81  2b49				  -	      if	>. != >[.+(bmp_96x2_1_height)]
     82  2b49				  -	      align	256
     83  2b49					      endif
     84  2b49
     85  2b49				   bmp_96x2_1_00
     86  2b49		       44		      BYTE.b	%01000100
     87  2b4a		       92		      BYTE.b	%10010010
     88  2b4b		       ba		      BYTE.b	%10111010
     89  2b4c		       92		      BYTE.b	%10010010
     90  2b4d		       44		      BYTE.b	%01000100
     91  2b4e		       00		      BYTE.b	%00000000
     92  2b4f		       00		      BYTE.b	%00000000
     93  2b50		       00		      BYTE.b	%00000000
     94  2b51		       00		      BYTE.b	%00000000
     95  2b52		       00		      BYTE.b	%00000000
     96  2b53		       00		      BYTE.b	%00000000
     97  2b54		       00		      BYTE.b	%00000000
     98  2b55		       00		      BYTE.b	%00000000
     99  2b56		       00		      BYTE.b	%00000000
    100  2b57		       00		      BYTE.b	%00000000
    101  2b58		       00		      BYTE.b	%00000000
    102  2b59		       00		      BYTE.b	%00000000
    103  2b5a		       00		      BYTE.b	%00000000
    104  2b5b		       00		      BYTE.b	%00000000
    105  2b5c		       00		      BYTE.b	%00000000
    106  2b5d		       00		      BYTE.b	%00000000
    107  2b5e		       00		      BYTE.b	%00000000
    108  2b5f		       00		      BYTE.b	%00000000
    109  2b60		       00		      BYTE.b	%00000000
    110  2b61		       00		      BYTE.b	%00000000
    111  2b62		       00		      BYTE.b	%00000000
    112  2b63		       00		      BYTE.b	%00000000
    113  2b64		       00		      BYTE.b	%00000000
    114  2b65		       00		      BYTE.b	%00000000
    115  2b66		       00		      BYTE.b	%00000000
    116  2b67		       00		      BYTE.b	%00000000
    117  2b68		       00		      BYTE.b	%00000000
    118  2b69		       00		      BYTE.b	%00000000
    119  2b6a		       00		      BYTE.b	%00000000
    120  2b6b		       00		      BYTE.b	%00000000
    121  2b6c		       00		      BYTE.b	%00000000
    122  2b6d		       00		      BYTE.b	%00000000
    123  2b6e		       00		      BYTE.b	%00000000
    124  2b6f		       00		      BYTE.b	%00000000
    125  2b70		       00		      BYTE.b	%00000000
    126  2b71		       00		      BYTE.b	%00000000
    127  2b72		       00		      BYTE.b	%00000000
    128  2b73		       00		      BYTE.b	%00000000
    129  2b74		       00		      BYTE.b	%00000000
    130  2b75		       00		      BYTE.b	%00000000
    131  2b76		       00		      BYTE.b	%00000000
    132  2b77		       00		      BYTE.b	%00000000
    133  2b78		       00		      BYTE.b	%00000000
    134  2b79		       3e		      BYTE.b	%00111110
    135  2b7a		       7f		      BYTE.b	%01111111
    136  2b7b		       ff		      BYTE.b	%11111111
    137  2b7c		       f1		      BYTE.b	%11110001
    138  2b7d		       e0		      BYTE.b	%11100000
    139  2b7e		       e0		      BYTE.b	%11100000
    140  2b7f		       f0		      BYTE.b	%11110000
    141  2b80		       70		      BYTE.b	%01110000
    142  2b81		       3c		      BYTE.b	%00111100
    143  2b82		       3f		      BYTE.b	%00111111
    144  2b83		       1f		      BYTE.b	%00011111
    145  2b84		       07		      BYTE.b	%00000111
    146  2b85
    147  2b85				  -	      if	>. != >[.+(bmp_96x2_1_height)]
    148  2b85				  -	      align	256
    149  2b85					      endif
    150  2b85
    151  2b85				   bmp_96x2_1_01
    152  2b85		       00		      BYTE.b	%00000000
    153  2b86		       00		      BYTE.b	%00000000
    154  2b87		       00		      BYTE.b	%00000000
    155  2b88		       00		      BYTE.b	%00000000
    156  2b89		       00		      BYTE.b	%00000000
    157  2b8a		       00		      BYTE.b	%00000000
    158  2b8b		       0f		      BYTE.b	%00001111
    159  2b8c		       1f		      BYTE.b	%00011111
    160  2b8d		       3f		      BYTE.b	%00111111
    161  2b8e		       7f		      BYTE.b	%01111111
    162  2b8f		       7f		      BYTE.b	%01111111
    163  2b90		       30		      BYTE.b	%00110000
    164  2b91		       30		      BYTE.b	%00110000
    165  2b92		       18		      BYTE.b	%00011000
    166  2b93		       0c		      BYTE.b	%00001100
    167  2b94		       07		      BYTE.b	%00000111
    168  2b95		       03		      BYTE.b	%00000011
    169  2b96		       00		      BYTE.b	%00000000
    170  2b97		       00		      BYTE.b	%00000000
    171  2b98		       00		      BYTE.b	%00000000
    172  2b99		       00		      BYTE.b	%00000000
    173  2b9a		       00		      BYTE.b	%00000000
    174  2b9b		       00		      BYTE.b	%00000000
    175  2b9c		       00		      BYTE.b	%00000000
    176  2b9d		       00		      BYTE.b	%00000000
    177  2b9e		       7f		      BYTE.b	%01111111
    178  2b9f		       ff		      BYTE.b	%11111111
    179  2ba0		       00		      BYTE.b	%00000000
    180  2ba1		       00		      BYTE.b	%00000000
    181  2ba2		       00		      BYTE.b	%00000000
    182  2ba3		       00		      BYTE.b	%00000000
    183  2ba4		       00		      BYTE.b	%00000000
    184  2ba5		       00		      BYTE.b	%00000000
    185  2ba6		       c0		      BYTE.b	%11000000
    186  2ba7		       e1		      BYTE.b	%11100001
    187  2ba8		       ff		      BYTE.b	%11111111
    188  2ba9		       7f		      BYTE.b	%01111111
    189  2baa		       7f		      BYTE.b	%01111111
    190  2bab		       33		      BYTE.b	%00110011
    191  2bac		       1b		      BYTE.b	%00011011
    192  2bad		       1f		      BYTE.b	%00011111
    193  2bae		       0f		      BYTE.b	%00001111
    194  2baf		       0f		      BYTE.b	%00001111
    195  2bb0		       07		      BYTE.b	%00000111
    196  2bb1		       03		      BYTE.b	%00000011
    197  2bb2		       00		      BYTE.b	%00000000
    198  2bb3		       00		      BYTE.b	%00000000
    199  2bb4		       00		      BYTE.b	%00000000
    200  2bb5		       0c		      BYTE.b	%00001100
    201  2bb6		       0c		      BYTE.b	%00001100
    202  2bb7		       c0		      BYTE.b	%11000000
    203  2bb8		       c0		      BYTE.b	%11000000
    204  2bb9		       c0		      BYTE.b	%11000000
    205  2bba		       00		      BYTE.b	%00000000
    206  2bbb		       00		      BYTE.b	%00000000
    207  2bbc		       00		      BYTE.b	%00000000
    208  2bbd		       c0		      BYTE.b	%11000000
    209  2bbe		       c0		      BYTE.b	%11000000
    210  2bbf		       c0		      BYTE.b	%11000000
    211  2bc0		       c0		      BYTE.b	%11000000
    212  2bc1
    213  2bc1				  -	      if	>. != >[.+(bmp_96x2_1_height)]
    214  2bc1				  -	      align	256
    215  2bc1					      endif
    216  2bc1
    217  2bc1				   bmp_96x2_1_02
    218  2bc1		       07		      BYTE.b	%00000111
    219  2bc2		       1f		      BYTE.b	%00011111
    220  2bc3		       1c		      BYTE.b	%00011100
    221  2bc4		       00		      BYTE.b	%00000000
    222  2bc5		       00		      BYTE.b	%00000000
    223  2bc6		       ff		      BYTE.b	%11111111
    224  2bc7		       ff		      BYTE.b	%11111111
    225  2bc8		       ff		      BYTE.b	%11111111
    226  2bc9		       ff		      BYTE.b	%11111111
    227  2bca		       ff		      BYTE.b	%11111111
    228  2bcb		       ff		      BYTE.b	%11111111
    229  2bcc		       03		      BYTE.b	%00000011
    230  2bcd		       01		      BYTE.b	%00000001
    231  2bce		       01		      BYTE.b	%00000001
    232  2bcf		       00		      BYTE.b	%00000000
    233  2bd0		       00		      BYTE.b	%00000000
    234  2bd1		       e0		      BYTE.b	%11100000
    235  2bd2		       ff		      BYTE.b	%11111111
    236  2bd3		       1f		      BYTE.b	%00011111
    237  2bd4		       03		      BYTE.b	%00000011
    238  2bd5		       00		      BYTE.b	%00000000
    239  2bd6		       00		      BYTE.b	%00000000
    240  2bd7		       00		      BYTE.b	%00000000
    241  2bd8		       00		      BYTE.b	%00000000
    242  2bd9		       00		      BYTE.b	%00000000
    243  2bda		       ff		      BYTE.b	%11111111
    244  2bdb		       ff		      BYTE.b	%11111111
    245  2bdc		       00		      BYTE.b	%00000000
    246  2bdd		       00		      BYTE.b	%00000000
    247  2bde		       1c		      BYTE.b	%00011100
    248  2bdf		       1c		      BYTE.b	%00011100
    249  2be0		       1c		      BYTE.b	%00011100
    250  2be1		       1c		      BYTE.b	%00011100
    251  2be2		       df		      BYTE.b	%11011111
    252  2be3		       df		      BYTE.b	%11011111
    253  2be4		       df		      BYTE.b	%11011111
    254  2be5		       9c		      BYTE.b	%10011100
    255  2be6		       9c		      BYTE.b	%10011100
    256  2be7		       9f		      BYTE.b	%10011111
    257  2be8		       9f		      BYTE.b	%10011111
    258  2be9		       9f		      BYTE.b	%10011111
    259  2bea		       00		      BYTE.b	%00000000
    260  2beb		       00		      BYTE.b	%00000000
    261  2bec		       00		      BYTE.b	%00000000
    262  2bed		       00		      BYTE.b	%00000000
    263  2bee		       00		      BYTE.b	%00000000
    264  2bef		       00		      BYTE.b	%00000000
    265  2bf0		       00		      BYTE.b	%00000000
    266  2bf1		       30		      BYTE.b	%00110000
    267  2bf2		       38		      BYTE.b	%00111000
    268  2bf3		       3f		      BYTE.b	%00111111
    269  2bf4		       1f		      BYTE.b	%00011111
    270  2bf5		       1f		      BYTE.b	%00011111
    271  2bf6		       0c		      BYTE.b	%00001100
    272  2bf7		       06		      BYTE.b	%00000110
    273  2bf8		       07		      BYTE.b	%00000111
    274  2bf9		       03		      BYTE.b	%00000011
    275  2bfa		       03		      BYTE.b	%00000011
    276  2bfb		       01		      BYTE.b	%00000001
    277  2bfc		       00		      BYTE.b	%00000000
    278  2bfd
    279  2bfd					      if	>. != >[.+(bmp_96x2_1_height)]
    280  2c00		       00 00 00 	      align	256
    281  2c00					      endif
    282  2c00
    283  2c00				   bmp_96x2_1_03
    284  2c00		       ff		      BYTE.b	%11111111
    285  2c01		       ff		      BYTE.b	%11111111
    286  2c02		       e0		      BYTE.b	%11100000
    287  2c03		       e0		      BYTE.b	%11100000
    288  2c04		       fc		      BYTE.b	%11111100
    289  2c05		       ff		      BYTE.b	%11111111
    290  2c06		       ff		      BYTE.b	%11111111
    291  2c07		       80		      BYTE.b	%10000000
    292  2c08		       00		      BYTE.b	%00000000
    293  2c09		       00		      BYTE.b	%00000000
    294  2c0a		       00		      BYTE.b	%00000000
    295  2c0b		       00		      BYTE.b	%00000000
    296  2c0c		       80		      BYTE.b	%10000000
    297  2c0d		       80		      BYTE.b	%10000000
    298  2c0e		       c0		      BYTE.b	%11000000
    299  2c0f		       c0		      BYTE.b	%11000000
    300  2c10		       60		      BYTE.b	%01100000
    301  2c11		       ff		      BYTE.b	%11111111
    302  2c12		       ff		      BYTE.b	%11111111
    303  2c13		       ff		      BYTE.b	%11111111
    304  2c14		       1f		      BYTE.b	%00011111
    305  2c15		       07		      BYTE.b	%00000111
    306  2c16		       01		      BYTE.b	%00000001
    307  2c17		       00		      BYTE.b	%00000000
    308  2c18		       00		      BYTE.b	%00000000
    309  2c19		       ff		      BYTE.b	%11111111
    310  2c1a		       ff		      BYTE.b	%11111111
    311  2c1b		       00		      BYTE.b	%00000000
    312  2c1c		       00		      BYTE.b	%00000000
    313  2c1d		       00		      BYTE.b	%00000000
    314  2c1e		       00		      BYTE.b	%00000000
    315  2c1f		       00		      BYTE.b	%00000000
    316  2c20		       00		      BYTE.b	%00000000
    317  2c21		       83		      BYTE.b	%10000011
    318  2c22		       c7		      BYTE.b	%11000111
    319  2c23		       ef		      BYTE.b	%11101111
    320  2c24		       ee		      BYTE.b	%11101110
    321  2c25		       ee		      BYTE.b	%11101110
    322  2c26		       ef		      BYTE.b	%11101111
    323  2c27		       c7		      BYTE.b	%11000111
    324  2c28		       c3		      BYTE.b	%11000011
    325  2c29		       00		      BYTE.b	%00000000
    326  2c2a		       00		      BYTE.b	%00000000
    327  2c2b		       00		      BYTE.b	%00000000
    328  2c2c		       00		      BYTE.b	%00000000
    329  2c2d		       00		      BYTE.b	%00000000
    330  2c2e		       00		      BYTE.b	%00000000
    331  2c2f		       00		      BYTE.b	%00000000
    332  2c30		       31		      BYTE.b	%00110001
    333  2c31		       71		      BYTE.b	%01110001
    334  2c32		       f0		      BYTE.b	%11110000
    335  2c33		       e0		      BYTE.b	%11100000
    336  2c34		       e0		      BYTE.b	%11100000
    337  2c35		       e0		      BYTE.b	%11100000
    338  2c36		       e0		      BYTE.b	%11100000
    339  2c37		       e0		      BYTE.b	%11100000
    340  2c38		       c0		      BYTE.b	%11000000
    341  2c39		       c0		      BYTE.b	%11000000
    342  2c3a		       c0		      BYTE.b	%11000000
    343  2c3b		       c0		      BYTE.b	%11000000
    344  2c3c
    345  2c3c				  -	      if	>. != >[.+(bmp_96x2_1_height)]
    346  2c3c				  -	      align	256
    347  2c3c					      endif
    348  2c3c
    349  2c3c				   bmp_96x2_1_04
    350  2c3c		       ff		      BYTE.b	%11111111
    351  2c3d		       ff		      BYTE.b	%11111111
    352  2c3e		       01		      BYTE.b	%00000001
    353  2c3f		       01		      BYTE.b	%00000001
    354  2c40		       01		      BYTE.b	%00000001
    355  2c41		       ff		      BYTE.b	%11111111
    356  2c42		       ff		      BYTE.b	%11111111
    357  2c43		       01		      BYTE.b	%00000001
    358  2c44		       00		      BYTE.b	%00000000
    359  2c45		       00		      BYTE.b	%00000000
    360  2c46		       00		      BYTE.b	%00000000
    361  2c47		       00		      BYTE.b	%00000000
    362  2c48		       00		      BYTE.b	%00000000
    363  2c49		       00		      BYTE.b	%00000000
    364  2c4a		       00		      BYTE.b	%00000000
    365  2c4b		       00		      BYTE.b	%00000000
    366  2c4c		       01		      BYTE.b	%00000001
    367  2c4d		       ff		      BYTE.b	%11111111
    368  2c4e		       ff		      BYTE.b	%11111111
    369  2c4f		       ff		      BYTE.b	%11111111
    370  2c50		       ff		      BYTE.b	%11111111
    371  2c51		       ff		      BYTE.b	%11111111
    372  2c52		       ff		      BYTE.b	%11111111
    373  2c53		       07		      BYTE.b	%00000111
    374  2c54		       00		      BYTE.b	%00000000
    375  2c55		       ff		      BYTE.b	%11111111
    376  2c56		       ff		      BYTE.b	%11111111
    377  2c57		       00		      BYTE.b	%00000000
    378  2c58		       00		      BYTE.b	%00000000
    379  2c59		       00		      BYTE.b	%00000000
    380  2c5a		       00		      BYTE.b	%00000000
    381  2c5b		       00		      BYTE.b	%00000000
    382  2c5c		       00		      BYTE.b	%00000000
    383  2c5d		       83		      BYTE.b	%10000011
    384  2c5e		       c7		      BYTE.b	%11000111
    385  2c5f		       ef		      BYTE.b	%11101111
    386  2c60		       ee		      BYTE.b	%11101110
    387  2c61		       ee		      BYTE.b	%11101110
    388  2c62		       e7		      BYTE.b	%11100111
    389  2c63		       c7		      BYTE.b	%11000111
    390  2c64		       c3		      BYTE.b	%11000011
    391  2c65		       00		      BYTE.b	%00000000
    392  2c66		       00		      BYTE.b	%00000000
    393  2c67		       00		      BYTE.b	%00000000
    394  2c68		       00		      BYTE.b	%00000000
    395  2c69		       00		      BYTE.b	%00000000
    396  2c6a		       00		      BYTE.b	%00000000
    397  2c6b		       00		      BYTE.b	%00000000
    398  2c6c		       80		      BYTE.b	%10000000
    399  2c6d		       80		      BYTE.b	%10000000
    400  2c6e		       01		      BYTE.b	%00000001
    401  2c6f		       01		      BYTE.b	%00000001
    402  2c70		       01		      BYTE.b	%00000001
    403  2c71		       03		      BYTE.b	%00000011
    404  2c72		       03		      BYTE.b	%00000011
    405  2c73		       03		      BYTE.b	%00000011
    406  2c74		       03		      BYTE.b	%00000011
    407  2c75		       07		      BYTE.b	%00000111
    408  2c76		       07		      BYTE.b	%00000111
    409  2c77		       07		      BYTE.b	%00000111
    410  2c78
    411  2c78				  -	      if	>. != >[.+(bmp_96x2_1_height)]
    412  2c78				  -	      align	256
    413  2c78					      endif
    414  2c78
    415  2c78				   bmp_96x2_1_05
    416  2c78		       fc		      BYTE.b	%11111100
    417  2c79		       fc		      BYTE.b	%11111100
    418  2c7a		       c0		      BYTE.b	%11000000
    419  2c7b		       c0		      BYTE.b	%11000000
    420  2c7c		       c0		      BYTE.b	%11000000
    421  2c7d		       f0		      BYTE.b	%11110000
    422  2c7e		       fe		      BYTE.b	%11111110
    423  2c7f		       ff		      BYTE.b	%11111111
    424  2c80		       ff		      BYTE.b	%11111111
    425  2c81		       ff		      BYTE.b	%11111111
    426  2c82		       ff		      BYTE.b	%11111111
    427  2c83		       ff		      BYTE.b	%11111111
    428  2c84		       ff		      BYTE.b	%11111111
    429  2c85		       ff		      BYTE.b	%11111111
    430  2c86		       ff		      BYTE.b	%11111111
    431  2c87		       ff		      BYTE.b	%11111111
    432  2c88		       ff		      BYTE.b	%11111111
    433  2c89		       ff		      BYTE.b	%11111111
    434  2c8a		       ff		      BYTE.b	%11111111
    435  2c8b		       ff		      BYTE.b	%11111111
    436  2c8c		       ff		      BYTE.b	%11111111
    437  2c8d		       ff		      BYTE.b	%11111111
    438  2c8e		       ff		      BYTE.b	%11111111
    439  2c8f		       ff		      BYTE.b	%11111111
    440  2c90		       fc		      BYTE.b	%11111100
    441  2c91		       ff		      BYTE.b	%11111111
    442  2c92		       ff		      BYTE.b	%11111111
    443  2c93		       00		      BYTE.b	%00000000
    444  2c94		       00		      BYTE.b	%00000000
    445  2c95		       00		      BYTE.b	%00000000
    446  2c96		       00		      BYTE.b	%00000000
    447  2c97		       00		      BYTE.b	%00000000
    448  2c98		       00		      BYTE.b	%00000000
    449  2c99		       c7		      BYTE.b	%11000111
    450  2c9a		       ef		      BYTE.b	%11101111
    451  2c9b		       ef		      BYTE.b	%11101111
    452  2c9c		       0e		      BYTE.b	%00001110
    453  2c9d		       0e		      BYTE.b	%00001110
    454  2c9e		       ef		      BYTE.b	%11101111
    455  2c9f		       e7		      BYTE.b	%11100111
    456  2ca0		       c1		      BYTE.b	%11000001
    457  2ca1		       00		      BYTE.b	%00000000
    458  2ca2		       00		      BYTE.b	%00000000
    459  2ca3		       00		      BYTE.b	%00000000
    460  2ca4		       00		      BYTE.b	%00000000
    461  2ca5		       00		      BYTE.b	%00000000
    462  2ca6		       00		      BYTE.b	%00000000
    463  2ca7		       00		      BYTE.b	%00000000
    464  2ca8		       c0		      BYTE.b	%11000000
    465  2ca9		       e0		      BYTE.b	%11100000
    466  2caa		       e0		      BYTE.b	%11100000
    467  2cab		       e0		      BYTE.b	%11100000
    468  2cac		       f0		      BYTE.b	%11110000
    469  2cad		       b0		      BYTE.b	%10110000
    470  2cae		       b8		      BYTE.b	%10111000
    471  2caf		       38		      BYTE.b	%00111000
    472  2cb0		       1c		      BYTE.b	%00011100
    473  2cb1		       1c		      BYTE.b	%00011100
    474  2cb2		       1e		      BYTE.b	%00011110
    475  2cb3		       0e		      BYTE.b	%00001110
    476  2cb4
    477  2cb4				  -	      if	>. != >[.+(bmp_96x2_1_height)]
    478  2cb4				  -	      align	256
    479  2cb4					      endif
    480  2cb4
    481  2cb4				   bmp_96x2_1_06
    482  2cb4		       00		      BYTE.b	%00000000
    483  2cb5		       00		      BYTE.b	%00000000
    484  2cb6		       00		      BYTE.b	%00000000
    485  2cb7		       00		      BYTE.b	%00000000
    486  2cb8		       00		      BYTE.b	%00000000
    487  2cb9		       00		      BYTE.b	%00000000
    488  2cba		       00		      BYTE.b	%00000000
    489  2cbb		       80		      BYTE.b	%10000000
    490  2cbc		       e0		      BYTE.b	%11100000
    491  2cbd		       f0		      BYTE.b	%11110000
    492  2cbe		       fc		      BYTE.b	%11111100
    493  2cbf		       ff		      BYTE.b	%11111111
    494  2cc0		       ff		      BYTE.b	%11111111
    495  2cc1		       ff		      BYTE.b	%11111111
    496  2cc2		       ff		      BYTE.b	%11111111
    497  2cc3		       ff		      BYTE.b	%11111111
    498  2cc4		       ff		      BYTE.b	%11111111
    499  2cc5		       ff		      BYTE.b	%11111111
    500  2cc6		       f8		      BYTE.b	%11111000
    501  2cc7		       f8		      BYTE.b	%11111000
    502  2cc8		       f0		      BYTE.b	%11110000
    503  2cc9		       f0		      BYTE.b	%11110000
    504  2cca		       f0		      BYTE.b	%11110000
    505  2ccb		       80		      BYTE.b	%10000000
    506  2ccc		       00		      BYTE.b	%00000000
    507  2ccd		       ff		      BYTE.b	%11111111
    508  2cce		       ff		      BYTE.b	%11111111
    509  2ccf		       00		      BYTE.b	%00000000
    510  2cd0		       00		      BYTE.b	%00000000
    511  2cd1		       00		      BYTE.b	%00000000
    512  2cd2		       00		      BYTE.b	%00000000
    513  2cd3		       00		      BYTE.b	%00000000
    514  2cd4		       00		      BYTE.b	%00000000
    515  2cd5		       b7		      BYTE.b	%10110111
    516  2cd6		       f7		      BYTE.b	%11110111
    517  2cd7		       f7		      BYTE.b	%11110111
    518  2cd8		       77		      BYTE.b	%01110111
    519  2cd9		       77		      BYTE.b	%01110111
    520  2cda		       f7		      BYTE.b	%11110111
    521  2cdb		       f7		      BYTE.b	%11110111
    522  2cdc		       e7		      BYTE.b	%11100111
    523  2cdd		       07		      BYTE.b	%00000111
    524  2cde		       07		      BYTE.b	%00000111
    525  2cdf		       07		      BYTE.b	%00000111
    526  2ce0		       07		      BYTE.b	%00000111
    527  2ce1		       07		      BYTE.b	%00000111
    528  2ce2		       00		      BYTE.b	%00000000
    529  2ce3		       00		      BYTE.b	%00000000
    530  2ce4		       60		      BYTE.b	%01100000
    531  2ce5		       61		      BYTE.b	%01100001
    532  2ce6		       01		      BYTE.b	%00000001
    533  2ce7		       01		      BYTE.b	%00000001
    534  2ce8		       01		      BYTE.b	%00000001
    535  2ce9		       01		      BYTE.b	%00000001
    536  2cea		       01		      BYTE.b	%00000001
    537  2ceb		       01		      BYTE.b	%00000001
    538  2cec		       01		      BYTE.b	%00000001
    539  2ced		       01		      BYTE.b	%00000001
    540  2cee		       01		      BYTE.b	%00000001
    541  2cef		       01		      BYTE.b	%00000001
    542  2cf0
    543  2cf0					      if	>. != >[.+(bmp_96x2_1_height)]
    544  2d00		       00 00 00 00*	      align	256
    545  2d00					      endif
    546  2d00
    547  2d00				   bmp_96x2_1_07
    548  2d00		       00		      BYTE.b	%00000000
    549  2d01		       00		      BYTE.b	%00000000
    550  2d02		       00		      BYTE.b	%00000000
    551  2d03		       00		      BYTE.b	%00000000
    552  2d04		       00		      BYTE.b	%00000000
    553  2d05		       00		      BYTE.b	%00000000
    554  2d06		       00		      BYTE.b	%00000000
    555  2d07		       00		      BYTE.b	%00000000
    556  2d08		       00		      BYTE.b	%00000000
    557  2d09		       00		      BYTE.b	%00000000
    558  2d0a		       00		      BYTE.b	%00000000
    559  2d0b		       00		      BYTE.b	%00000000
    560  2d0c		       ff		      BYTE.b	%11111111
    561  2d0d		       ff		      BYTE.b	%11111111
    562  2d0e		       ff		      BYTE.b	%11111111
    563  2d0f		       ff		      BYTE.b	%11111111
    564  2d10		       ff		      BYTE.b	%11111111
    565  2d11		       ff		      BYTE.b	%11111111
    566  2d12		       00		      BYTE.b	%00000000
    567  2d13		       00		      BYTE.b	%00000000
    568  2d14		       00		      BYTE.b	%00000000
    569  2d15		       00		      BYTE.b	%00000000
    570  2d16		       00		      BYTE.b	%00000000
    571  2d17		       00		      BYTE.b	%00000000
    572  2d18		       00		      BYTE.b	%00000000
    573  2d19		       ff		      BYTE.b	%11111111
    574  2d1a		       ff		      BYTE.b	%11111111
    575  2d1b		       00		      BYTE.b	%00000000
    576  2d1c		       00		      BYTE.b	%00000000
    577  2d1d		       38		      BYTE.b	%00111000
    578  2d1e		       38		      BYTE.b	%00111000
    579  2d1f		       3c		      BYTE.b	%00111100
    580  2d20		       1c		      BYTE.b	%00011100
    581  2d21		       1e		      BYTE.b	%00011110
    582  2d22		       1e		      BYTE.b	%00011110
    583  2d23		       1f		      BYTE.b	%00011111
    584  2d24		       1f		      BYTE.b	%00011111
    585  2d25		       3f		      BYTE.b	%00111111
    586  2d26		       33		      BYTE.b	%00110011
    587  2d27		       73		      BYTE.b	%01110011
    588  2d28		       71		      BYTE.b	%01110001
    589  2d29		       00		      BYTE.b	%00000000
    590  2d2a		       00		      BYTE.b	%00000000
    591  2d2b		       00		      BYTE.b	%00000000
    592  2d2c		       00		      BYTE.b	%00000000
    593  2d2d		       00		      BYTE.b	%00000000
    594  2d2e		       00		      BYTE.b	%00000000
    595  2d2f		       00		      BYTE.b	%00000000
    596  2d30		       fe		      BYTE.b	%11111110
    597  2d31		       fe		      BYTE.b	%11111110
    598  2d32		       fe		      BYTE.b	%11111110
    599  2d33		       c0		      BYTE.b	%11000000
    600  2d34		       fe		      BYTE.b	%11111110
    601  2d35		       fe		      BYTE.b	%11111110
    602  2d36		       fe		      BYTE.b	%11111110
    603  2d37		       c0		      BYTE.b	%11000000
    604  2d38		       c0		      BYTE.b	%11000000
    605  2d39		       fe		      BYTE.b	%11111110
    606  2d3a		       fe		      BYTE.b	%11111110
    607  2d3b		       fe		      BYTE.b	%11111110
    608  2d3c
    609  2d3c				  -	      if	>. != >[.+(bmp_96x2_1_height)]
    610  2d3c				  -	      align	256
    611  2d3c					      endif
    612  2d3c
    613  2d3c				   bmp_96x2_1_08
    614  2d3c		       00		      BYTE.b	%00000000
    615  2d3d		       00		      BYTE.b	%00000000
    616  2d3e		       00		      BYTE.b	%00000000
    617  2d3f		       00		      BYTE.b	%00000000
    618  2d40		       00		      BYTE.b	%00000000
    619  2d41		       00		      BYTE.b	%00000000
    620  2d42		       00		      BYTE.b	%00000000
    621  2d43		       00		      BYTE.b	%00000000
    622  2d44		       00		      BYTE.b	%00000000
    623  2d45		       00		      BYTE.b	%00000000
    624  2d46		       00		      BYTE.b	%00000000
    625  2d47		       00		      BYTE.b	%00000000
    626  2d48		       e0		      BYTE.b	%11100000
    627  2d49		       ff		      BYTE.b	%11111111
    628  2d4a		       ff		      BYTE.b	%11111111
    629  2d4b		       ff		      BYTE.b	%11111111
    630  2d4c		       ff		      BYTE.b	%11111111
    631  2d4d		       fc		      BYTE.b	%11111100
    632  2d4e		       00		      BYTE.b	%00000000
    633  2d4f		       00		      BYTE.b	%00000000
    634  2d50		       00		      BYTE.b	%00000000
    635  2d51		       00		      BYTE.b	%00000000
    636  2d52		       00		      BYTE.b	%00000000
    637  2d53		       00		      BYTE.b	%00000000
    638  2d54		       00		      BYTE.b	%00000000
    639  2d55		       ff		      BYTE.b	%11111111
    640  2d56		       ff		      BYTE.b	%11111111
    641  2d57		       00		      BYTE.b	%00000000
    642  2d58		       00		      BYTE.b	%00000000
    643  2d59		       38		      BYTE.b	%00111000
    644  2d5a		       38		      BYTE.b	%00111000
    645  2d5b		       38		      BYTE.b	%00111000
    646  2d5c		       38		      BYTE.b	%00111000
    647  2d5d		       3f		      BYTE.b	%00111111
    648  2d5e		       3f		      BYTE.b	%00111111
    649  2d5f		       3f		      BYTE.b	%00111111
    650  2d60		       39		      BYTE.b	%00111001
    651  2d61		       b9		      BYTE.b	%10111001
    652  2d62		       bf		      BYTE.b	%10111111
    653  2d63		       ff		      BYTE.b	%11111111
    654  2d64		       ff		      BYTE.b	%11111111
    655  2d65		       00		      BYTE.b	%00000000
    656  2d66		       00		      BYTE.b	%00000000
    657  2d67		       00		      BYTE.b	%00000000
    658  2d68		       00		      BYTE.b	%00000000
    659  2d69		       00		      BYTE.b	%00000000
    660  2d6a		       00		      BYTE.b	%00000000
    661  2d6b		       00		      BYTE.b	%00000000
    662  2d6c		       30		      BYTE.b	%00110000
    663  2d6d		       30		      BYTE.b	%00110000
    664  2d6e		       00		      BYTE.b	%00000000
    665  2d6f		       00		      BYTE.b	%00000000
    666  2d70		       00		      BYTE.b	%00000000
    667  2d71		       00		      BYTE.b	%00000000
    668  2d72		       00		      BYTE.b	%00000000
    669  2d73		       00		      BYTE.b	%00000000
    670  2d74		       00		      BYTE.b	%00000000
    671  2d75		       00		      BYTE.b	%00000000
    672  2d76		       00		      BYTE.b	%00000000
    673  2d77		       00		      BYTE.b	%00000000
    674  2d78
    675  2d78				  -	      if	>. != >[.+(bmp_96x2_1_height)]
    676  2d78				  -	      align	256
    677  2d78					      endif
    678  2d78
    679  2d78				   bmp_96x2_1_09
    680  2d78		       00		      BYTE.b	%00000000
    681  2d79		       00		      BYTE.b	%00000000
    682  2d7a		       00		      BYTE.b	%00000000
    683  2d7b		       00		      BYTE.b	%00000000
    684  2d7c		       00		      BYTE.b	%00000000
    685  2d7d		       00		      BYTE.b	%00000000
    686  2d7e		       00		      BYTE.b	%00000000
    687  2d7f		       00		      BYTE.b	%00000000
    688  2d80		       00		      BYTE.b	%00000000
    689  2d81		       00		      BYTE.b	%00000000
    690  2d82		       00		      BYTE.b	%00000000
    691  2d83		       00		      BYTE.b	%00000000
    692  2d84		       00		      BYTE.b	%00000000
    693  2d85		       ff		      BYTE.b	%11111111
    694  2d86		       ff		      BYTE.b	%11111111
    695  2d87		       ff		      BYTE.b	%11111111
    696  2d88		       ff		      BYTE.b	%11111111
    697  2d89		       00		      BYTE.b	%00000000
    698  2d8a		       00		      BYTE.b	%00000000
    699  2d8b		       00		      BYTE.b	%00000000
    700  2d8c		       00		      BYTE.b	%00000000
    701  2d8d		       00		      BYTE.b	%00000000
    702  2d8e		       00		      BYTE.b	%00000000
    703  2d8f		       00		      BYTE.b	%00000000
    704  2d90		       00		      BYTE.b	%00000000
    705  2d91		       ff		      BYTE.b	%11111111
    706  2d92		       ff		      BYTE.b	%11111111
    707  2d93		       00		      BYTE.b	%00000000
    708  2d94		       00		      BYTE.b	%00000000
    709  2d95		       00		      BYTE.b	%00000000
    710  2d96		       00		      BYTE.b	%00000000
    711  2d97		       00		      BYTE.b	%00000000
    712  2d98		       00		      BYTE.b	%00000000
    713  2d99		       0f		      BYTE.b	%00001111
    714  2d9a		       8f		      BYTE.b	%10001111
    715  2d9b		       c3		      BYTE.b	%11000011
    716  2d9c		       c7		      BYTE.b	%11000111
    717  2d9d		       ce		      BYTE.b	%11001110
    718  2d9e		       cf		      BYTE.b	%11001111
    719  2d9f		       8f		      BYTE.b	%10001111
    720  2da0		       87		      BYTE.b	%10000111
    721  2da1		       00		      BYTE.b	%00000000
    722  2da2		       00		      BYTE.b	%00000000
    723  2da3		       00		      BYTE.b	%00000000
    724  2da4		       00		      BYTE.b	%00000000
    725  2da5		       00		      BYTE.b	%00000000
    726  2da6		       00		      BYTE.b	%00000000
    727  2da7		       00		      BYTE.b	%00000000
    728  2da8		       00		      BYTE.b	%00000000
    729  2da9		       00		      BYTE.b	%00000000
    730  2daa		       00		      BYTE.b	%00000000
    731  2dab		       00		      BYTE.b	%00000000
    732  2dac		       00		      BYTE.b	%00000000
    733  2dad		       00		      BYTE.b	%00000000
    734  2dae		       00		      BYTE.b	%00000000
    735  2daf		       00		      BYTE.b	%00000000
    736  2db0		       00		      BYTE.b	%00000000
    737  2db1		       00		      BYTE.b	%00000000
    738  2db2		       00		      BYTE.b	%00000000
    739  2db3		       00		      BYTE.b	%00000000
    740  2db4
    741  2db4				  -	      if	>. != >[.+(bmp_96x2_1_height)]
    742  2db4				  -	      align	256
    743  2db4					      endif
    744  2db4
    745  2db4				   bmp_96x2_1_10
    746  2db4		       00		      BYTE.b	%00000000
    747  2db5		       00		      BYTE.b	%00000000
    748  2db6		       00		      BYTE.b	%00000000
    749  2db7		       00		      BYTE.b	%00000000
    750  2db8		       00		      BYTE.b	%00000000
    751  2db9		       00		      BYTE.b	%00000000
    752  2dba		       00		      BYTE.b	%00000000
    753  2dbb		       00		      BYTE.b	%00000000
    754  2dbc		       00		      BYTE.b	%00000000
    755  2dbd		       01		      BYTE.b	%00000001
    756  2dbe		       07		      BYTE.b	%00000111
    757  2dbf		       0f		      BYTE.b	%00001111
    758  2dc0		       1f		      BYTE.b	%00011111
    759  2dc1		       ff		      BYTE.b	%11111111
    760  2dc2		       ff		      BYTE.b	%11111111
    761  2dc3		       ff		      BYTE.b	%11111111
    762  2dc4		       ff		      BYTE.b	%11111111
    763  2dc5		       1f		      BYTE.b	%00011111
    764  2dc6		       1f		      BYTE.b	%00011111
    765  2dc7		       0f		      BYTE.b	%00001111
    766  2dc8		       0f		      BYTE.b	%00001111
    767  2dc9		       07		      BYTE.b	%00000111
    768  2dca		       03		      BYTE.b	%00000011
    769  2dcb		       03		      BYTE.b	%00000011
    770  2dcc		       01		      BYTE.b	%00000001
    771  2dcd		       01		      BYTE.b	%00000001
    772  2dce		       80		      BYTE.b	%10000000
    773  2dcf		       00		      BYTE.b	%00000000
    774  2dd0		       00		      BYTE.b	%00000000
    775  2dd1		       00		      BYTE.b	%00000000
    776  2dd2		       00		      BYTE.b	%00000000
    777  2dd3		       00		      BYTE.b	%00000000
    778  2dd4		       00		      BYTE.b	%00000000
    779  2dd5		       87		      BYTE.b	%10000111
    780  2dd6		       cf		      BYTE.b	%11001111
    781  2dd7		       df		      BYTE.b	%11011111
    782  2dd8		       9d		      BYTE.b	%10011101
    783  2dd9		       1e		      BYTE.b	%00011110
    784  2dda		       df		      BYTE.b	%11011111
    785  2ddb		       cf		      BYTE.b	%11001111
    786  2ddc		       c7		      BYTE.b	%11000111
    787  2ddd		       00		      BYTE.b	%00000000
    788  2dde		       00		      BYTE.b	%00000000
    789  2ddf		       00		      BYTE.b	%00000000
    790  2de0		       00		      BYTE.b	%00000000
    791  2de1		       00		      BYTE.b	%00000000
    792  2de2		       00		      BYTE.b	%00000000
    793  2de3		       00		      BYTE.b	%00000000
    794  2de4		       00		      BYTE.b	%00000000
    795  2de5		       00		      BYTE.b	%00000000
    796  2de6		       00		      BYTE.b	%00000000
    797  2de7		       00		      BYTE.b	%00000000
    798  2de8		       00		      BYTE.b	%00000000
    799  2de9		       00		      BYTE.b	%00000000
    800  2dea		       00		      BYTE.b	%00000000
    801  2deb		       00		      BYTE.b	%00000000
    802  2dec		       00		      BYTE.b	%00000000
    803  2ded		       00		      BYTE.b	%00000000
    804  2dee		       00		      BYTE.b	%00000000
    805  2def		       00		      BYTE.b	%00000000
    806  2df0
    807  2df0					      if	>. != >[.+(bmp_96x2_1_height)]
    808  2e00		       00 00 00 00*	      align	256
    809  2e00					      endif
    810  2e00
    811  2e00				   bmp_96x2_1_11
    812  2e00		       00		      BYTE.b	%00000000
    813  2e01		       00		      BYTE.b	%00000000
    814  2e02		       00		      BYTE.b	%00000000
    815  2e03		       00		      BYTE.b	%00000000
    816  2e04		       00		      BYTE.b	%00000000
    817  2e05		       00		      BYTE.b	%00000000
    818  2e06		       00		      BYTE.b	%00000000
    819  2e07		       40		      BYTE.b	%01000000
    820  2e08		       fc		      BYTE.b	%11111100
    821  2e09		       fc		      BYTE.b	%11111100
    822  2e0a		       f8		      BYTE.b	%11111000
    823  2e0b		       f8		      BYTE.b	%11111000
    824  2e0c		       fc		      BYTE.b	%11111100
    825  2e0d		       fe		      BYTE.b	%11111110
    826  2e0e		       ff		      BYTE.b	%11111111
    827  2e0f		       ff		      BYTE.b	%11111111
    828  2e10		       fe		      BYTE.b	%11111110
    829  2e11		       fe		      BYTE.b	%11111110
    830  2e12		       fc		      BYTE.b	%11111100
    831  2e13		       fc		      BYTE.b	%11111100
    832  2e14		       f8		      BYTE.b	%11111000
    833  2e15		       fc		      BYTE.b	%11111100
    834  2e16		       fc		      BYTE.b	%11111100
    835  2e17		       fc		      BYTE.b	%11111100
    836  2e18		       fe		      BYTE.b	%11111110
    837  2e19		       fe		      BYTE.b	%11111110
    838  2e1a		       fe		      BYTE.b	%11111110
    839  2e1b		       7f		      BYTE.b	%01111111
    840  2e1c		       7f		      BYTE.b	%01111111
    841  2e1d		       3f		      BYTE.b	%00111111
    842  2e1e		       1f		      BYTE.b	%00011111
    843  2e1f		       00		      BYTE.b	%00000000
    844  2e20		       00		      BYTE.b	%00000000
    845  2e21		       c0		      BYTE.b	%11000000
    846  2e22		       e0		      BYTE.b	%11100000
    847  2e23		       80		      BYTE.b	%10000000
    848  2e24		       c0		      BYTE.b	%11000000
    849  2e25		       e0		      BYTE.b	%11100000
    850  2e26		       e0		      BYTE.b	%11100000
    851  2e27		       e0		      BYTE.b	%11100000
    852  2e28		       c0		      BYTE.b	%11000000
    853  2e29		       00		      BYTE.b	%00000000
    854  2e2a		       00		      BYTE.b	%00000000
    855  2e2b		       00		      BYTE.b	%00000000
    856  2e2c		       00		      BYTE.b	%00000000
    857  2e2d		       00		      BYTE.b	%00000000
    858  2e2e		       00		      BYTE.b	%00000000
    859  2e2f		       00		      BYTE.b	%00000000
    860  2e30		       00		      BYTE.b	%00000000
    861  2e31		       00		      BYTE.b	%00000000
    862  2e32		       00		      BYTE.b	%00000000
    863  2e33		       00		      BYTE.b	%00000000
    864  2e34		       00		      BYTE.b	%00000000
    865  2e35		       00		      BYTE.b	%00000000
    866  2e36		       00		      BYTE.b	%00000000
    867  2e37		       00		      BYTE.b	%00000000
    868  2e38		       00		      BYTE.b	%00000000
    869  2e39		       00		      BYTE.b	%00000000
    870  2e3a		       00		      BYTE.b	%00000000
    871  2e3b		       00		      BYTE.b	%00000000
------- FILE titlescreen/asm/titlescreen.asm
    274  2e3c					      endif
    275  2e3c				  -	      ifconst	mk_96x2_2_on
    276  2e3c				  -	      include	"titlescreen/96x2_2_image.asm"
    277  2e3c					      endif
    278  2e3c				  -	      ifconst	mk_96x2_3_on
    279  2e3c				  -	      include	"titlescreen/96x2_3_image.asm"
    280  2e3c					      endif
    281  2e3c				  -	      ifconst	mk_96x2_4_on
    282  2e3c				  -	      include	"titlescreen/96x2_4_image.asm"
    283  2e3c					      endif
    284  2e3c				  -	      ifconst	mk_96x2_5_on
    285  2e3c				  -	      include	"titlescreen/96x2_5_image.asm"
    286  2e3c					      endif
    287  2e3c				  -	      ifconst	mk_96x2_6_on
    288  2e3c				  -	      include	"titlescreen/96x2_6_image.asm"
    289  2e3c					      endif
    290  2e3c				  -	      ifconst	mk_96x2_7_on
    291  2e3c				  -	      include	"titlescreen/96x2_7_image.asm"
    292  2e3c					      endif
    293  2e3c				  -	      ifconst	mk_96x2_8_on
    294  2e3c				  -	      include	"titlescreen/96x2_8_image.asm"
    295  2e3c					      endif
    296  2e3c
    297  2e3c				  -	      ifconst	mk_player_on
    298  2e3c				  -	      include	"titlescreen/player_image.asm"
    299  2e3c					      endif
    300  2e3c
    301  2e3c					      ifconst	mk_score_on
------- FILE titlescreen/score_image.asm LEVEL 3 PASS 3
      0  2e3c					      include	"titlescreen/score_image.asm"
      1  2e3c							; feel free to modify the score graphics - just keep each digit 8 high
      2  2e3c							; if you're looking to want to modify any one font, pick on the
      3  2e3c
      4  2e3c				  -	      ifnconst	scorecolor
      5  2e3c				  -scorecolor
      6  2e3c					      endif
      7  2e3c							; ** change this value for a different scorecolor under DPC+
      8  2e3c							;    for other kernels, just use the scorecolor variable
      9  2e3c		       0f		      .byte.b	$0f
     10  2e3d
     11  2e3d				  -	      ifnconst	NOFONT
     12  2e3d				  -NOFONT     =	0
     13  2e3d					      endif
     14  2e3d				  -	      ifnconst	STOCK
     15  2e3d				  -STOCK      =	1	;_FONTNAME
     16  2e3d					      endif
     17  2e3d				  -	      ifnconst	NEWCENTURY
     18  2e3d				  -NEWCENTURY =	2	;_FONTNAME
     19  2e3d					      endif
     20  2e3d				  -	      ifnconst	WHIMSEY
     21  2e3d				  -WHIMSEY    =	3	;_FONTNAME
     22  2e3d					      endif
     23  2e3d				  -	      ifnconst	ALARMCLOCK
     24  2e3d				  -ALARMCLOCK =	4	;_FONTNAME
     25  2e3d					      endif
     26  2e3d				  -	      ifnconst	HANDWRITTEN
     27  2e3d				  -HANDWRITTEN =	5	;_FONTNAME
     28  2e3d					      endif
     29  2e3d				  -	      ifnconst	INTERRUPTED
     30  2e3d				  -INTERRUPTED =	6	;_FONTNAME
     31  2e3d					      endif
     32  2e3d				  -	      ifnconst	TINY
     33  2e3d				  -TINY       =	7	;_FONTNAME
     34  2e3d					      endif
     35  2e3d				  -	      ifnconst	RETROPUTER
     36  2e3d				  -RETROPUTER =	8	;_FONTNAME
     37  2e3d					      endif
     38  2e3d				  -	      ifnconst	CURVES
     39  2e3d				  -CURVES     =	9	;_FONTNAME
     40  2e3d					      endif
     41  2e3d				  -	      ifnconst	HUSKY
     42  2e3d				  -HUSKY      =	10	;_FONTNAME
     43  2e3d					      endif
     44  2e3d				  -	      ifnconst	SNAKE
     45  2e3d				  -SNAKE      =	11	;_FONTNAME
     46  2e3d					      endif
     47  2e3d				  -	      ifnconst	PLOK
     48  2e3d				  -PLOK       =	13	;_FONTNAME
     49  2e3d					      endif
     50  2e3d
     51  2e3d				  -	      ifnconst	SYMBOLS
     52  2e3d				  -SYMBOLS    =	0	;_FONTNAME
     53  2e3d					      endif
     54  2e3d
     55  2e3d							; ### setup some defaults
     56  2e3d				  -	      ifnconst	fontstyle
     57  2e3d				  -fontstyle  =	STOCK
     58  2e3d					      endif
     59  2e3d
     60  2e3d							;fix up the table alignment, if necessary
     61  2e3d				  -	      if	>. != >[.+81]
     62  2e3d				  -	      align	256
     63  2e3d					      endif
     64  2e3d
     65  2e3d
     66  2e3d				   miniscoretable
     67  2e3d
     68  2e3d					      if	fontstyle == STOCK
     69  2e3d
     70  2e3d							;byte %00000000 ; STOCK
     71  2e3d
     72  2e3d		       3c		      .byte.b	%00111100	; STOCK
     73  2e3e		       66		      .byte.b	%01100110	; STOCK
     74  2e3f		       66		      .byte.b	%01100110	; STOCK
     75  2e40		       66		      .byte.b	%01100110	; STOCK
     76  2e41		       66		      .byte.b	%01100110	; STOCK
     77  2e42		       66		      .byte.b	%01100110	; STOCK
     78  2e43		       66		      .byte.b	%01100110	; STOCK
     79  2e44		       3c		      .byte.b	%00111100	; STOCK
     80  2e45
     81  2e45							;byte %00000000 ; STOCK
     82  2e45
     83  2e45		       7e		      .byte.b	%01111110	; STOCK
     84  2e46		       18		      .byte.b	%00011000	; STOCK
     85  2e47		       18		      .byte.b	%00011000	; STOCK
     86  2e48		       18		      .byte.b	%00011000	; STOCK
     87  2e49		       18		      .byte.b	%00011000	; STOCK
     88  2e4a		       38		      .byte.b	%00111000	; STOCK
     89  2e4b		       18		      .byte.b	%00011000	; STOCK
     90  2e4c		       08		      .byte.b	%00001000	; STOCK
     91  2e4d
     92  2e4d							;byte %00000000 ; STOCK
     93  2e4d
     94  2e4d		       7e		      .byte.b	%01111110	; STOCK
     95  2e4e		       60		      .byte.b	%01100000	; STOCK
     96  2e4f		       60		      .byte.b	%01100000	; STOCK
     97  2e50		       3c		      .byte.b	%00111100	; STOCK
     98  2e51		       06		      .byte.b	%00000110	; STOCK
     99  2e52		       06		      .byte.b	%00000110	; STOCK
    100  2e53		       46		      .byte.b	%01000110	; STOCK
    101  2e54		       3c		      .byte.b	%00111100	; STOCK
    102  2e55
    103  2e55							;byte %00000000 ; STOCK
    104  2e55
    105  2e55		       3c		      .byte.b	%00111100	; STOCK
    106  2e56		       46		      .byte.b	%01000110	; STOCK
    107  2e57		       06		      .byte.b	%00000110	; STOCK
    108  2e58		       06		      .byte.b	%00000110	; STOCK
    109  2e59		       1c		      .byte.b	%00011100	; STOCK
    110  2e5a		       06		      .byte.b	%00000110	; STOCK
    111  2e5b		       46		      .byte.b	%01000110	; STOCK
    112  2e5c		       3c		      .byte.b	%00111100	; STOCK
    113  2e5d
    114  2e5d							;byte %00000000 ; STOCK
    115  2e5d
    116  2e5d		       0c		      .byte.b	%00001100	; STOCK
    117  2e5e		       0c		      .byte.b	%00001100	; STOCK
    118  2e5f		       7e		      .byte.b	%01111110	; STOCK
    119  2e60		       4c		      .byte.b	%01001100	; STOCK
    120  2e61		       4c		      .byte.b	%01001100	; STOCK
    121  2e62		       2c		      .byte.b	%00101100	; STOCK
    122  2e63		       1c		      .byte.b	%00011100	; STOCK
    123  2e64		       0c		      .byte.b	%00001100	; STOCK
    124  2e65
    125  2e65							;byte %00000000 ; STOCK
    126  2e65
    127  2e65		       3c		      .byte.b	%00111100	; STOCK
    128  2e66		       46		      .byte.b	%01000110	; STOCK
    129  2e67		       06		      .byte.b	%00000110	; STOCK
    130  2e68		       06		      .byte.b	%00000110	; STOCK
    131  2e69		       3c		      .byte.b	%00111100	; STOCK
    132  2e6a		       60		      .byte.b	%01100000	; STOCK
    133  2e6b		       60		      .byte.b	%01100000	; STOCK
    134  2e6c		       7e		      .byte.b	%01111110	; STOCK
    135  2e6d
    136  2e6d							;byte %00000000 ; STOCK
    137  2e6d
    138  2e6d		       3c		      .byte.b	%00111100	; STOCK
    139  2e6e		       66		      .byte.b	%01100110	; STOCK
    140  2e6f		       66		      .byte.b	%01100110	; STOCK
    141  2e70		       66		      .byte.b	%01100110	; STOCK
    142  2e71		       7c		      .byte.b	%01111100	; STOCK
    143  2e72		       60		      .byte.b	%01100000	; STOCK
    144  2e73		       62		      .byte.b	%01100010	; STOCK
    145  2e74		       3c		      .byte.b	%00111100	; STOCK
    146  2e75
    147  2e75							;byte %00000000 ; STOCK
    148  2e75
    149  2e75		       30		      .byte.b	%00110000	; STOCK
    150  2e76		       30		      .byte.b	%00110000	; STOCK
    151  2e77		       30		      .byte.b	%00110000	; STOCK
    152  2e78		       18		      .byte.b	%00011000	; STOCK
    153  2e79		       0c		      .byte.b	%00001100	; STOCK
    154  2e7a		       06		      .byte.b	%00000110	; STOCK
    155  2e7b		       42		      .byte.b	%01000010	; STOCK
    156  2e7c		       3e		      .byte.b	%00111110	; STOCK
    157  2e7d
    158  2e7d							;byte %00000000 ; STOCK
    159  2e7d
    160  2e7d		       3c		      .byte.b	%00111100	; STOCK
    161  2e7e		       66		      .byte.b	%01100110	; STOCK
    162  2e7f		       66		      .byte.b	%01100110	; STOCK
    163  2e80		       66		      .byte.b	%01100110	; STOCK
    164  2e81		       3c		      .byte.b	%00111100	; STOCK
    165  2e82		       66		      .byte.b	%01100110	; STOCK
    166  2e83		       66		      .byte.b	%01100110	; STOCK
    167  2e84		       3c		      .byte.b	%00111100	; STOCK
    168  2e85
    169  2e85							;byte %00000000 ; STOCK
    170  2e85
    171  2e85		       3c		      .byte.b	%00111100	; STOCK
    172  2e86		       46		      .byte.b	%01000110	; STOCK
    173  2e87		       06		      .byte.b	%00000110	; STOCK
    174  2e88		       3e		      .byte.b	%00111110	; STOCK
    175  2e89		       66		      .byte.b	%01100110	; STOCK
    176  2e8a		       66		      .byte.b	%01100110	; STOCK
    177  2e8b		       66		      .byte.b	%01100110	; STOCK
    178  2e8c		       3c		      .byte.b	%00111100	; STOCK
    179  2e8d
    180  2e8d					      endif		; STOCK
    181  2e8d
    182  2e8d				  -	      if	fontstyle == NEWCENTURY
    183  2e8d				  -			;byte %00000000 ; NEWCENTURY
    184  2e8d				  -
    185  2e8d				  -	      .byte	%00111100	; NEWCENTURY
    186  2e8d				  -	      .byte	%01000010	; NEWCENTURY
    187  2e8d				  -	      .byte	%01000010	; NEWCENTURY
    188  2e8d				  -	      .byte	%01000010	; NEWCENTURY
    189  2e8d				  -	      .byte	%00100100	; NEWCENTURY
    190  2e8d				  -	      .byte	%00100100	; NEWCENTURY
    191  2e8d				  -	      .byte	%00100100	; NEWCENTURY
    192  2e8d				  -	      .byte	%00011000	; NEWCENTURY
    193  2e8d				  -
    194  2e8d				  -			;byte %00000000 ; NEWCENTURY
    195  2e8d				  -
    196  2e8d				  -	      .byte	%00001000	; NEWCENTURY
    197  2e8d				  -	      .byte	%00001000	; NEWCENTURY
    198  2e8d				  -	      .byte	%00001000	; NEWCENTURY
    199  2e8d				  -	      .byte	%00001000	; NEWCENTURY
    200  2e8d				  -	      .byte	%00001000	; NEWCENTURY
    201  2e8d				  -	      .byte	%00001000	; NEWCENTURY
    202  2e8d				  -	      .byte	%00001000	; NEWCENTURY
    203  2e8d				  -	      .byte	%00001000	; NEWCENTURY
    204  2e8d				  -
    205  2e8d				  -			;byte %00000000 ; NEWCENTURY
    206  2e8d				  -
    207  2e8d				  -	      .byte	%01111110	; NEWCENTURY
    208  2e8d				  -	      .byte	%01000000	; NEWCENTURY
    209  2e8d				  -	      .byte	%01000000	; NEWCENTURY
    210  2e8d				  -	      .byte	%00100000	; NEWCENTURY
    211  2e8d				  -	      .byte	%00011100	; NEWCENTURY
    212  2e8d				  -	      .byte	%00000010	; NEWCENTURY
    213  2e8d				  -	      .byte	%00000010	; NEWCENTURY
    214  2e8d				  -	      .byte	%00011100	; NEWCENTURY
    215  2e8d				  -
    216  2e8d				  -			;byte %00000000 ; NEWCENTURY
    217  2e8d				  -
    218  2e8d				  -	      .byte	%01111100	; NEWCENTURY
    219  2e8d				  -	      .byte	%00000010	; NEWCENTURY
    220  2e8d				  -	      .byte	%00000010	; NEWCENTURY
    221  2e8d				  -	      .byte	%00000010	; NEWCENTURY
    222  2e8d				  -	      .byte	%00111100	; NEWCENTURY
    223  2e8d				  -	      .byte	%00000010	; NEWCENTURY
    224  2e8d				  -	      .byte	%00000010	; NEWCENTURY
    225  2e8d				  -	      .byte	%00011100	; NEWCENTURY
    226  2e8d				  -
    227  2e8d				  -			;byte %00000000 ; NEWCENTURY
    228  2e8d				  -
    229  2e8d				  -	      .byte	%00000010	; NEWCENTURY
    230  2e8d				  -	      .byte	%00000010	; NEWCENTURY
    231  2e8d				  -	      .byte	%00000010	; NEWCENTURY
    232  2e8d				  -	      .byte	%00111110	; NEWCENTURY
    233  2e8d				  -	      .byte	%00100010	; NEWCENTURY
    234  2e8d				  -	      .byte	%00100010	; NEWCENTURY
    235  2e8d				  -	      .byte	%00010010	; NEWCENTURY
    236  2e8d				  -	      .byte	%00010010	; NEWCENTURY
    237  2e8d				  -
    238  2e8d				  -			;byte %00000000 ; NEWCENTURY
    239  2e8d				  -
    240  2e8d				  -	      .byte	%01111100	; NEWCENTURY
    241  2e8d				  -	      .byte	%00000010	; NEWCENTURY
    242  2e8d				  -	      .byte	%00000010	; NEWCENTURY
    243  2e8d				  -	      .byte	%00000010	; NEWCENTURY
    244  2e8d				  -	      .byte	%01111100	; NEWCENTURY
    245  2e8d				  -	      .byte	%01000000	; NEWCENTURY
    246  2e8d				  -	      .byte	%01000000	; NEWCENTURY
    247  2e8d				  -	      .byte	%01111000	; NEWCENTURY
    248  2e8d				  -
    249  2e8d				  -			;byte %00000000 ; NEWCENTURY
    250  2e8d				  -
    251  2e8d				  -	      .byte	%00111100	; NEWCENTURY
    252  2e8d				  -	      .byte	%01000010	; NEWCENTURY
    253  2e8d				  -	      .byte	%01000010	; NEWCENTURY
    254  2e8d				  -	      .byte	%01000010	; NEWCENTURY
    255  2e8d				  -	      .byte	%01111100	; NEWCENTURY
    256  2e8d				  -	      .byte	%01000000	; NEWCENTURY
    257  2e8d				  -	      .byte	%01000000	; NEWCENTURY
    258  2e8d				  -	      .byte	%00110000	; NEWCENTURY
    259  2e8d				  -
    260  2e8d				  -			;byte %00000000 ; NEWCENTURY
    261  2e8d				  -
    262  2e8d				  -	      .byte	%00010000	; NEWCENTURY
    263  2e8d				  -	      .byte	%00010000	; NEWCENTURY
    264  2e8d				  -	      .byte	%00001000	; NEWCENTURY
    265  2e8d				  -	      .byte	%00001000	; NEWCENTURY
    266  2e8d				  -	      .byte	%00000100	; NEWCENTURY
    267  2e8d				  -	      .byte	%00000100	; NEWCENTURY
    268  2e8d				  -	      .byte	%00000010	; NEWCENTURY
    269  2e8d				  -	      .byte	%00011110	; NEWCENTURY
    270  2e8d				  -
    271  2e8d				  -			;byte %00000000 ; NEWCENTURY
    272  2e8d				  -
    273  2e8d				  -	      .byte	%00111100	; NEWCENTURY
    274  2e8d				  -	      .byte	%01000010	; NEWCENTURY
    275  2e8d				  -	      .byte	%01000010	; NEWCENTURY
    276  2e8d				  -	      .byte	%01000010	; NEWCENTURY
    277  2e8d				  -	      .byte	%00111100	; NEWCENTURY
    278  2e8d				  -	      .byte	%00100100	; NEWCENTURY
    279  2e8d				  -	      .byte	%00100100	; NEWCENTURY
    280  2e8d				  -	      .byte	%00011000	; NEWCENTURY
    281  2e8d				  -
    282  2e8d				  -			;byte %00000000 ; NEWCENTURY
    283  2e8d				  -
    284  2e8d				  -	      .byte	%00111100	; NEWCENTURY
    285  2e8d				  -	      .byte	%00000010	; NEWCENTURY
    286  2e8d				  -	      .byte	%00000010	; NEWCENTURY
    287  2e8d				  -	      .byte	%00000010	; NEWCENTURY
    288  2e8d				  -	      .byte	%00001110	; NEWCENTURY
    289  2e8d				  -	      .byte	%00010010	; NEWCENTURY
    290  2e8d				  -	      .byte	%00010010	; NEWCENTURY
    291  2e8d				  -	      .byte	%00001100	; NEWCENTURY
    292  2e8d				  -
    293  2e8d					      endif		; NEWCENTURY
    294  2e8d
    295  2e8d				  -	      if	fontstyle == WHIMSEY
    296  2e8d				  -			;byte %00000000 ; WHIMSEY
    297  2e8d				  -
    298  2e8d				  -	      .byte	%00111100	; WHIMSEY
    299  2e8d				  -	      .byte	%01111110	; WHIMSEY
    300  2e8d				  -	      .byte	%01111110	; WHIMSEY
    301  2e8d				  -	      .byte	%01111110	; WHIMSEY
    302  2e8d				  -	      .byte	%01110110	; WHIMSEY
    303  2e8d				  -	      .byte	%01110110	; WHIMSEY
    304  2e8d				  -	      .byte	%01110110	; WHIMSEY
    305  2e8d				  -	      .byte	%00111100	; WHIMSEY
    306  2e8d				  -
    307  2e8d				  -			;byte %00000000 ; WHIMSEY
    308  2e8d				  -
    309  2e8d				  -	      .byte	%01111110	; WHIMSEY
    310  2e8d				  -	      .byte	%01111110	; WHIMSEY
    311  2e8d				  -	      .byte	%01111110	; WHIMSEY
    312  2e8d				  -	      .byte	%00011000	; WHIMSEY
    313  2e8d				  -	      .byte	%00011000	; WHIMSEY
    314  2e8d				  -	      .byte	%00011000	; WHIMSEY
    315  2e8d				  -	      .byte	%01111000	; WHIMSEY
    316  2e8d				  -	      .byte	%00011000	; WHIMSEY
    317  2e8d				  -
    318  2e8d				  -			;byte %00000000 ; WHIMSEY
    319  2e8d				  -
    320  2e8d				  -	      .byte	%01111110	; WHIMSEY
    321  2e8d				  -	      .byte	%01111110	; WHIMSEY
    322  2e8d				  -	      .byte	%01111110	; WHIMSEY
    323  2e8d				  -	      .byte	%01111000	; WHIMSEY
    324  2e8d				  -	      .byte	%00111100	; WHIMSEY
    325  2e8d				  -	      .byte	%00001110	; WHIMSEY
    326  2e8d				  -	      .byte	%01100110	; WHIMSEY
    327  2e8d				  -	      .byte	%00111100	; WHIMSEY
    328  2e8d				  -
    329  2e8d				  -			;byte %00000000 ; WHIMSEY
    330  2e8d				  -
    331  2e8d				  -	      .byte	%00111100	; WHIMSEY
    332  2e8d				  -	      .byte	%01111110	; WHIMSEY
    333  2e8d				  -	      .byte	%01111110	; WHIMSEY
    334  2e8d				  -	      .byte	%01101110	; WHIMSEY
    335  2e8d				  -	      .byte	%00001110	; WHIMSEY
    336  2e8d				  -	      .byte	%00111100	; WHIMSEY
    337  2e8d				  -	      .byte	%00011100	; WHIMSEY
    338  2e8d				  -	      .byte	%01111110	; WHIMSEY
    339  2e8d				  -
    340  2e8d				  -			;byte %00000000 ; WHIMSEY
    341  2e8d				  -
    342  2e8d				  -	      .byte	%00011100	; WHIMSEY
    343  2e8d				  -	      .byte	%00011100	; WHIMSEY
    344  2e8d				  -	      .byte	%01111110	; WHIMSEY
    345  2e8d				  -	      .byte	%01011100	; WHIMSEY
    346  2e8d				  -	      .byte	%01011100	; WHIMSEY
    347  2e8d				  -	      .byte	%00011100	; WHIMSEY
    348  2e8d				  -	      .byte	%00011100	; WHIMSEY
    349  2e8d				  -	      .byte	%00011100	; WHIMSEY
    350  2e8d				  -
    351  2e8d				  -			;byte %00000000 ; WHIMSEY
    352  2e8d				  -
    353  2e8d				  -	      .byte	%00111100	; WHIMSEY
    354  2e8d				  -	      .byte	%01111110	; WHIMSEY
    355  2e8d				  -	      .byte	%01111110	; WHIMSEY
    356  2e8d				  -	      .byte	%01101110	; WHIMSEY
    357  2e8d				  -	      .byte	%00001110	; WHIMSEY
    358  2e8d				  -	      .byte	%01111100	; WHIMSEY
    359  2e8d				  -	      .byte	%01110000	; WHIMSEY
    360  2e8d				  -	      .byte	%01111110	; WHIMSEY
    361  2e8d				  -
    362  2e8d				  -			;byte %00000000 ; WHIMSEY
    363  2e8d				  -
    364  2e8d				  -	      .byte	%00111100	; WHIMSEY
    365  2e8d				  -	      .byte	%01111110	; WHIMSEY
    366  2e8d				  -	      .byte	%01111110	; WHIMSEY
    367  2e8d				  -	      .byte	%01110110	; WHIMSEY
    368  2e8d				  -	      .byte	%01110110	; WHIMSEY
    369  2e8d				  -	      .byte	%01111100	; WHIMSEY
    370  2e8d				  -	      .byte	%01110000	; WHIMSEY
    371  2e8d				  -	      .byte	%00111110	; WHIMSEY
    372  2e8d				  -
    373  2e8d				  -			;byte %00000000 ; WHIMSEY
    374  2e8d				  -
    375  2e8d				  -	      .byte	%01111000	; WHIMSEY
    376  2e8d				  -	      .byte	%01111000	; WHIMSEY
    377  2e8d				  -	      .byte	%01111000	; WHIMSEY
    378  2e8d				  -	      .byte	%00111100	; WHIMSEY
    379  2e8d				  -	      .byte	%00011100	; WHIMSEY
    380  2e8d				  -	      .byte	%00001110	; WHIMSEY
    381  2e8d				  -	      .byte	%00001110	; WHIMSEY
    382  2e8d				  -	      .byte	%01111110	; WHIMSEY
    383  2e8d				  -
    384  2e8d				  -			;byte %00000000 ; WHIMSEY
    385  2e8d				  -
    386  2e8d				  -	      .byte	%00111100	; WHIMSEY
    387  2e8d				  -	      .byte	%01111110	; WHIMSEY
    388  2e8d				  -	      .byte	%01111110	; WHIMSEY
    389  2e8d				  -	      .byte	%01110110	; WHIMSEY
    390  2e8d				  -	      .byte	%01110110	; WHIMSEY
    391  2e8d				  -	      .byte	%00111100	; WHIMSEY
    392  2e8d				  -	      .byte	%01110110	; WHIMSEY
    393  2e8d				  -	      .byte	%00111100	; WHIMSEY
    394  2e8d				  -
    395  2e8d				  -			;byte %00000000 ; WHIMSEY
    396  2e8d				  -
    397  2e8d				  -	      .byte	%00111100	; WHIMSEY
    398  2e8d				  -	      .byte	%01111110	; WHIMSEY
    399  2e8d				  -	      .byte	%01111110	; WHIMSEY
    400  2e8d				  -	      .byte	%01110110	; WHIMSEY
    401  2e8d				  -	      .byte	%00000110	; WHIMSEY
    402  2e8d				  -	      .byte	%00111110	; WHIMSEY
    403  2e8d				  -	      .byte	%01110110	; WHIMSEY
    404  2e8d				  -	      .byte	%00111100	; WHIMSEY
    405  2e8d				  -
    406  2e8d					      endif		; WHIMSEY
    407  2e8d
    408  2e8d				  -	      if	fontstyle == ALARMCLOCK
    409  2e8d				  -
    410  2e8d				  -			;byte %00000000 ; ALARMCLOCK
    411  2e8d				  -
    412  2e8d				  -	      .byte	%00111100	; ALARMCLOCK
    413  2e8d				  -	      .byte	%01000010	; ALARMCLOCK
    414  2e8d				  -	      .byte	%01000010	; ALARMCLOCK
    415  2e8d				  -	      .byte	%01000010	; ALARMCLOCK
    416  2e8d				  -	      .byte	%00000000	; ALARMCLOCK
    417  2e8d				  -	      .byte	%01000010	; ALARMCLOCK
    418  2e8d				  -	      .byte	%01000010	; ALARMCLOCK
    419  2e8d				  -	      .byte	%00111100	; ALARMCLOCK
    420  2e8d				  -
    421  2e8d				  -			;byte %00000000 ; ALARMCLOCK
    422  2e8d				  -
    423  2e8d				  -	      .byte	%00000000	; ALARMCLOCK
    424  2e8d				  -	      .byte	%00000010	; ALARMCLOCK
    425  2e8d				  -	      .byte	%00000010	; ALARMCLOCK
    426  2e8d				  -	      .byte	%00000010	; ALARMCLOCK
    427  2e8d				  -	      .byte	%00000000	; ALARMCLOCK
    428  2e8d				  -	      .byte	%00000010	; ALARMCLOCK
    429  2e8d				  -	      .byte	%00000010	; ALARMCLOCK
    430  2e8d				  -	      .byte	%00000000	; ALARMCLOCK
    431  2e8d				  -
    432  2e8d				  -			;byte %00000000 ; ALARMCLOCK
    433  2e8d				  -
    434  2e8d				  -	      .byte	%00111100	; ALARMCLOCK
    435  2e8d				  -	      .byte	%01000000	; ALARMCLOCK
    436  2e8d				  -	      .byte	%01000000	; ALARMCLOCK
    437  2e8d				  -	      .byte	%01000000	; ALARMCLOCK
    438  2e8d				  -	      .byte	%00111100	; ALARMCLOCK
    439  2e8d				  -	      .byte	%00000010	; ALARMCLOCK
    440  2e8d				  -	      .byte	%00000010	; ALARMCLOCK
    441  2e8d				  -	      .byte	%00111100	; ALARMCLOCK
    442  2e8d				  -
    443  2e8d				  -			;byte %00000000 ; ALARMCLOCK
    444  2e8d				  -
    445  2e8d				  -	      .byte	%00111100	; ALARMCLOCK
    446  2e8d				  -	      .byte	%00000010	; ALARMCLOCK
    447  2e8d				  -	      .byte	%00000010	; ALARMCLOCK
    448  2e8d				  -	      .byte	%00000010	; ALARMCLOCK
    449  2e8d				  -	      .byte	%00111100	; ALARMCLOCK
    450  2e8d				  -	      .byte	%00000010	; ALARMCLOCK
    451  2e8d				  -	      .byte	%00000010	; ALARMCLOCK
    452  2e8d				  -	      .byte	%00111100	; ALARMCLOCK
    453  2e8d				  -
    454  2e8d				  -			;byte %00000000 ; ALARMCLOCK
    455  2e8d				  -
    456  2e8d				  -	      .byte	%00000000	; ALARMCLOCK
    457  2e8d				  -	      .byte	%00000010	; ALARMCLOCK
    458  2e8d				  -	      .byte	%00000010	; ALARMCLOCK
    459  2e8d				  -	      .byte	%00000010	; ALARMCLOCK
    460  2e8d				  -	      .byte	%00111100	; ALARMCLOCK
    461  2e8d				  -	      .byte	%01000010	; ALARMCLOCK
    462  2e8d				  -	      .byte	%01000010	; ALARMCLOCK
    463  2e8d				  -	      .byte	%00000000	; ALARMCLOCK
    464  2e8d				  -
    465  2e8d				  -			;byte %00000000 ; ALARMCLOCK
    466  2e8d				  -
    467  2e8d				  -	      .byte	%00111100	; ALARMCLOCK
    468  2e8d				  -	      .byte	%00000010	; ALARMCLOCK
    469  2e8d				  -	      .byte	%00000010	; ALARMCLOCK
    470  2e8d				  -	      .byte	%00000010	; ALARMCLOCK
    471  2e8d				  -	      .byte	%00111100	; ALARMCLOCK
    472  2e8d				  -	      .byte	%01000000	; ALARMCLOCK
    473  2e8d				  -	      .byte	%01000000	; ALARMCLOCK
    474  2e8d				  -	      .byte	%00111100	; ALARMCLOCK
    475  2e8d				  -
    476  2e8d				  -			;byte %00000000 ; ALARMCLOCK
    477  2e8d				  -
    478  2e8d				  -	      .byte	%00111100	; ALARMCLOCK
    479  2e8d				  -	      .byte	%01000010	; ALARMCLOCK
    480  2e8d				  -	      .byte	%01000010	; ALARMCLOCK
    481  2e8d				  -	      .byte	%01000010	; ALARMCLOCK
    482  2e8d				  -	      .byte	%00111100	; ALARMCLOCK
    483  2e8d				  -	      .byte	%01000000	; ALARMCLOCK
    484  2e8d				  -	      .byte	%01000000	; ALARMCLOCK
    485  2e8d				  -	      .byte	%00111100	; ALARMCLOCK
    486  2e8d				  -
    487  2e8d				  -			;byte %00000000 ; ALARMCLOCK
    488  2e8d				  -
    489  2e8d				  -	      .byte	%00000000	; ALARMCLOCK
    490  2e8d				  -	      .byte	%00000010	; ALARMCLOCK
    491  2e8d				  -	      .byte	%00000010	; ALARMCLOCK
    492  2e8d				  -	      .byte	%00000010	; ALARMCLOCK
    493  2e8d				  -	      .byte	%00000000	; ALARMCLOCK
    494  2e8d				  -	      .byte	%00000010	; ALARMCLOCK
    495  2e8d				  -	      .byte	%00000010	; ALARMCLOCK
    496  2e8d				  -	      .byte	%00111100	; ALARMCLOCK
    497  2e8d				  -
    498  2e8d				  -			;byte %00000000 ; ALARMCLOCK
    499  2e8d				  -
    500  2e8d				  -	      .byte	%00111100	; ALARMCLOCK
    501  2e8d				  -	      .byte	%01000010	; ALARMCLOCK
    502  2e8d				  -	      .byte	%01000010	; ALARMCLOCK
    503  2e8d				  -	      .byte	%01000010	; ALARMCLOCK
    504  2e8d				  -	      .byte	%00111100	; ALARMCLOCK
    505  2e8d				  -	      .byte	%01000010	; ALARMCLOCK
    506  2e8d				  -	      .byte	%01000010	; ALARMCLOCK
    507  2e8d				  -	      .byte	%00111100	; ALARMCLOCK
    508  2e8d				  -
    509  2e8d				  -			;byte %00000000 ; ALARMCLOCK
    510  2e8d				  -
    511  2e8d				  -	      .byte	%00111100	; ALARMCLOCK
    512  2e8d				  -	      .byte	%00000010	; ALARMCLOCK
    513  2e8d				  -	      .byte	%00000010	; ALARMCLOCK
    514  2e8d				  -	      .byte	%00000010	; ALARMCLOCK
    515  2e8d				  -	      .byte	%00111100	; ALARMCLOCK
    516  2e8d				  -	      .byte	%01000010	; ALARMCLOCK
    517  2e8d				  -	      .byte	%01000010	; ALARMCLOCK
    518  2e8d				  -	      .byte	%00111100	; ALARMCLOCK
    519  2e8d				  -
    520  2e8d				  -
    521  2e8d					      endif		; ALARMCLOCK
    522  2e8d
    523  2e8d				  -	      if	fontstyle == HANDWRITTEN
    524  2e8d				  -
    525  2e8d				  -			;byte %00000000 ; HANDWRITTEN
    526  2e8d				  -
    527  2e8d				  -	      .byte	%00110000	; HANDWRITTEN
    528  2e8d				  -	      .byte	%01001000	; HANDWRITTEN
    529  2e8d				  -	      .byte	%01001000	; HANDWRITTEN
    530  2e8d				  -	      .byte	%01001000	; HANDWRITTEN
    531  2e8d				  -	      .byte	%00100100	; HANDWRITTEN
    532  2e8d				  -	      .byte	%00100100	; HANDWRITTEN
    533  2e8d				  -	      .byte	%00010010	; HANDWRITTEN
    534  2e8d				  -	      .byte	%00001100	; HANDWRITTEN
    535  2e8d				  -
    536  2e8d				  -			;byte %00000000 ; HANDWRITTEN
    537  2e8d				  -
    538  2e8d				  -	      .byte	%00010000	; HANDWRITTEN
    539  2e8d				  -	      .byte	%00010000	; HANDWRITTEN
    540  2e8d				  -	      .byte	%00010000	; HANDWRITTEN
    541  2e8d				  -	      .byte	%00001000	; HANDWRITTEN
    542  2e8d				  -	      .byte	%00001000	; HANDWRITTEN
    543  2e8d				  -	      .byte	%00001000	; HANDWRITTEN
    544  2e8d				  -	      .byte	%00000100	; HANDWRITTEN
    545  2e8d				  -	      .byte	%00000100	; HANDWRITTEN
    546  2e8d				  -
    547  2e8d				  -			;byte %00000000 ; HANDWRITTEN
    548  2e8d				  -
    549  2e8d				  -	      .byte	%01110000	; HANDWRITTEN
    550  2e8d				  -	      .byte	%01001100	; HANDWRITTEN
    551  2e8d				  -	      .byte	%01000000	; HANDWRITTEN
    552  2e8d				  -	      .byte	%00100000	; HANDWRITTEN
    553  2e8d				  -	      .byte	%00011000	; HANDWRITTEN
    554  2e8d				  -	      .byte	%00000100	; HANDWRITTEN
    555  2e8d				  -	      .byte	%00100010	; HANDWRITTEN
    556  2e8d				  -	      .byte	%00011100	; HANDWRITTEN
    557  2e8d				  -
    558  2e8d				  -			;byte %00000000 ; HANDWRITTEN
    559  2e8d				  -
    560  2e8d				  -	      .byte	%00110000	; HANDWRITTEN
    561  2e8d				  -	      .byte	%01001000	; HANDWRITTEN
    562  2e8d				  -	      .byte	%00000100	; HANDWRITTEN
    563  2e8d				  -	      .byte	%00000100	; HANDWRITTEN
    564  2e8d				  -	      .byte	%00011000	; HANDWRITTEN
    565  2e8d				  -	      .byte	%00000100	; HANDWRITTEN
    566  2e8d				  -	      .byte	%00100010	; HANDWRITTEN
    567  2e8d				  -	      .byte	%00011100	; HANDWRITTEN
    568  2e8d				  -
    569  2e8d				  -			;byte %00000000 ; HANDWRITTEN
    570  2e8d				  -
    571  2e8d				  -	      .byte	%00010000	; HANDWRITTEN
    572  2e8d				  -	      .byte	%00010000	; HANDWRITTEN
    573  2e8d				  -	      .byte	%00001000	; HANDWRITTEN
    574  2e8d				  -	      .byte	%01111000	; HANDWRITTEN
    575  2e8d				  -	      .byte	%01000100	; HANDWRITTEN
    576  2e8d				  -	      .byte	%00100100	; HANDWRITTEN
    577  2e8d				  -	      .byte	%00010010	; HANDWRITTEN
    578  2e8d				  -	      .byte	%00000010	; HANDWRITTEN
    579  2e8d				  -
    580  2e8d				  -			;byte %00000000 ; HANDWRITTEN
    581  2e8d				  -
    582  2e8d				  -	      .byte	%00110000	; HANDWRITTEN
    583  2e8d				  -	      .byte	%01001000	; HANDWRITTEN
    584  2e8d				  -	      .byte	%00000100	; HANDWRITTEN
    585  2e8d				  -	      .byte	%00000100	; HANDWRITTEN
    586  2e8d				  -	      .byte	%00011000	; HANDWRITTEN
    587  2e8d				  -	      .byte	%00100000	; HANDWRITTEN
    588  2e8d				  -	      .byte	%00010010	; HANDWRITTEN
    589  2e8d				  -	      .byte	%00001100	; HANDWRITTEN
    590  2e8d				  -
    591  2e8d				  -			;byte %00000000 ; HANDWRITTEN
    592  2e8d				  -
    593  2e8d				  -	      .byte	%00010000	; HANDWRITTEN
    594  2e8d				  -	      .byte	%00101000	; HANDWRITTEN
    595  2e8d				  -	      .byte	%00100100	; HANDWRITTEN
    596  2e8d				  -	      .byte	%00100100	; HANDWRITTEN
    597  2e8d				  -	      .byte	%00011000	; HANDWRITTEN
    598  2e8d				  -	      .byte	%00010000	; HANDWRITTEN
    599  2e8d				  -	      .byte	%00001000	; HANDWRITTEN
    600  2e8d				  -	      .byte	%00000110	; HANDWRITTEN
    601  2e8d				  -
    602  2e8d				  -			;byte %00000000 ; HANDWRITTEN
    603  2e8d				  -
    604  2e8d				  -	      .byte	%00010000	; HANDWRITTEN
    605  2e8d				  -	      .byte	%00010000	; HANDWRITTEN
    606  2e8d				  -	      .byte	%00010000	; HANDWRITTEN
    607  2e8d				  -	      .byte	%00001000	; HANDWRITTEN
    608  2e8d				  -	      .byte	%00000100	; HANDWRITTEN
    609  2e8d				  -	      .byte	%00000100	; HANDWRITTEN
    610  2e8d				  -	      .byte	%00110010	; HANDWRITTEN
    611  2e8d				  -	      .byte	%00001110	; HANDWRITTEN
    612  2e8d				  -
    613  2e8d				  -			;byte %00000000 ; HANDWRITTEN
    614  2e8d				  -
    615  2e8d				  -	      .byte	%00110000	; HANDWRITTEN
    616  2e8d				  -	      .byte	%01001000	; HANDWRITTEN
    617  2e8d				  -	      .byte	%01000100	; HANDWRITTEN
    618  2e8d				  -	      .byte	%00100100	; HANDWRITTEN
    619  2e8d				  -	      .byte	%00011100	; HANDWRITTEN
    620  2e8d				  -	      .byte	%00010010	; HANDWRITTEN
    621  2e8d				  -	      .byte	%00001010	; HANDWRITTEN
    622  2e8d				  -	      .byte	%00000110	; HANDWRITTEN
    623  2e8d				  -
    624  2e8d				  -			;byte %00000000 ; HANDWRITTEN
    625  2e8d				  -
    626  2e8d				  -	      .byte	%00010000	; HANDWRITTEN
    627  2e8d				  -	      .byte	%00010000	; HANDWRITTEN
    628  2e8d				  -	      .byte	%00001000	; HANDWRITTEN
    629  2e8d				  -	      .byte	%00001000	; HANDWRITTEN
    630  2e8d				  -	      .byte	%00011100	; HANDWRITTEN
    631  2e8d				  -	      .byte	%00100100	; HANDWRITTEN
    632  2e8d				  -	      .byte	%00010010	; HANDWRITTEN
    633  2e8d				  -	      .byte	%00001100	; HANDWRITTEN
    634  2e8d				  -
    635  2e8d					      endif		; HANDWRITTEN
    636  2e8d
    637  2e8d				  -	      if	fontstyle == INTERRUPTED
    638  2e8d				  -
    639  2e8d				  -			;byte %00000000 ; INTERRUPTED
    640  2e8d				  -
    641  2e8d				  -	      .byte	%00110100	; INTERRUPTED
    642  2e8d				  -	      .byte	%01100110	; INTERRUPTED
    643  2e8d				  -	      .byte	%01100110	; INTERRUPTED
    644  2e8d				  -	      .byte	%01100110	; INTERRUPTED
    645  2e8d				  -	      .byte	%01100110	; INTERRUPTED
    646  2e8d				  -	      .byte	%01100110	; INTERRUPTED
    647  2e8d				  -	      .byte	%01100110	; INTERRUPTED
    648  2e8d				  -	      .byte	%00110100	; INTERRUPTED
    649  2e8d				  -
    650  2e8d				  -			;byte %00000000 ; INTERRUPTED
    651  2e8d				  -
    652  2e8d				  -	      .byte	%00111100	; INTERRUPTED
    653  2e8d				  -	      .byte	%00000000	; INTERRUPTED
    654  2e8d				  -	      .byte	%00011000	; INTERRUPTED
    655  2e8d				  -	      .byte	%00011000	; INTERRUPTED
    656  2e8d				  -	      .byte	%00011000	; INTERRUPTED
    657  2e8d				  -	      .byte	%00011000	; INTERRUPTED
    658  2e8d				  -	      .byte	%00011000	; INTERRUPTED
    659  2e8d				  -	      .byte	%00111000	; INTERRUPTED
    660  2e8d				  -
    661  2e8d				  -			;byte %00000000 ; INTERRUPTED
    662  2e8d				  -
    663  2e8d				  -	      .byte	%01101110	; INTERRUPTED
    664  2e8d				  -	      .byte	%01100000	; INTERRUPTED
    665  2e8d				  -	      .byte	%00110000	; INTERRUPTED
    666  2e8d				  -	      .byte	%00011000	; INTERRUPTED
    667  2e8d				  -	      .byte	%00001100	; INTERRUPTED
    668  2e8d				  -	      .byte	%00000110	; INTERRUPTED
    669  2e8d				  -	      .byte	%01000110	; INTERRUPTED
    670  2e8d				  -	      .byte	%00111100	; INTERRUPTED
    671  2e8d				  -
    672  2e8d				  -			;byte %00000000 ; INTERRUPTED
    673  2e8d				  -
    674  2e8d				  -	      .byte	%01111100	; INTERRUPTED
    675  2e8d				  -	      .byte	%00000110	; INTERRUPTED
    676  2e8d				  -	      .byte	%00000110	; INTERRUPTED
    677  2e8d				  -	      .byte	%00000110	; INTERRUPTED
    678  2e8d				  -	      .byte	%01110110	; INTERRUPTED
    679  2e8d				  -	      .byte	%00000110	; INTERRUPTED
    680  2e8d				  -	      .byte	%00000110	; INTERRUPTED
    681  2e8d				  -	      .byte	%01110100	; INTERRUPTED
    682  2e8d				  -
    683  2e8d				  -			;byte %00000000 ; INTERRUPTED
    684  2e8d				  -
    685  2e8d				  -	      .byte	%00000110	; INTERRUPTED
    686  2e8d				  -	      .byte	%00000110	; INTERRUPTED
    687  2e8d				  -	      .byte	%00000110	; INTERRUPTED
    688  2e8d				  -	      .byte	%00000110	; INTERRUPTED
    689  2e8d				  -	      .byte	%01110110	; INTERRUPTED
    690  2e8d				  -	      .byte	%01100110	; INTERRUPTED
    691  2e8d				  -	      .byte	%01100110	; INTERRUPTED
    692  2e8d				  -	      .byte	%01100110	; INTERRUPTED
    693  2e8d				  -
    694  2e8d				  -			;byte %00000000 ; INTERRUPTED
    695  2e8d				  -
    696  2e8d				  -	      .byte	%01111100	; INTERRUPTED
    697  2e8d				  -	      .byte	%00000110	; INTERRUPTED
    698  2e8d				  -	      .byte	%00000110	; INTERRUPTED
    699  2e8d				  -	      .byte	%00000110	; INTERRUPTED
    700  2e8d				  -	      .byte	%01111100	; INTERRUPTED
    701  2e8d				  -	      .byte	%01100000	; INTERRUPTED
    702  2e8d				  -	      .byte	%01100000	; INTERRUPTED
    703  2e8d				  -	      .byte	%01101110	; INTERRUPTED
    704  2e8d				  -
    705  2e8d				  -			;byte %00000000 ; INTERRUPTED
    706  2e8d				  -
    707  2e8d				  -	      .byte	%00101100	; INTERRUPTED
    708  2e8d				  -	      .byte	%01100110	; INTERRUPTED
    709  2e8d				  -	      .byte	%01100110	; INTERRUPTED
    710  2e8d				  -	      .byte	%01100110	; INTERRUPTED
    711  2e8d				  -	      .byte	%01101100	; INTERRUPTED
    712  2e8d				  -	      .byte	%01100000	; INTERRUPTED
    713  2e8d				  -	      .byte	%00110000	; INTERRUPTED
    714  2e8d				  -	      .byte	%00011100	; INTERRUPTED
    715  2e8d				  -
    716  2e8d				  -			;byte %00000000 ; INTERRUPTED
    717  2e8d				  -
    718  2e8d				  -	      .byte	%00011000	; INTERRUPTED
    719  2e8d				  -	      .byte	%00011000	; INTERRUPTED
    720  2e8d				  -	      .byte	%00011000	; INTERRUPTED
    721  2e8d				  -	      .byte	%00011100	; INTERRUPTED
    722  2e8d				  -	      .byte	%00001110	; INTERRUPTED
    723  2e8d				  -	      .byte	%00000110	; INTERRUPTED
    724  2e8d				  -	      .byte	%00000000	; INTERRUPTED
    725  2e8d				  -	      .byte	%01111110	; INTERRUPTED
    726  2e8d				  -
    727  2e8d				  -			;byte %00000000 ; INTERRUPTED
    728  2e8d				  -
    729  2e8d				  -	      .byte	%00110100	; INTERRUPTED
    730  2e8d				  -	      .byte	%01100110	; INTERRUPTED
    731  2e8d				  -	      .byte	%01100110	; INTERRUPTED
    732  2e8d				  -	      .byte	%01100110	; INTERRUPTED
    733  2e8d				  -	      .byte	%00110100	; INTERRUPTED
    734  2e8d				  -	      .byte	%01100110	; INTERRUPTED
    735  2e8d				  -	      .byte	%01100110	; INTERRUPTED
    736  2e8d				  -	      .byte	%00110100	; INTERRUPTED
    737  2e8d				  -
    738  2e8d				  -			;byte %00000000 ; INTERRUPTED
    739  2e8d				  -
    740  2e8d				  -	      .byte	%00111000	; INTERRUPTED
    741  2e8d				  -	      .byte	%00001100	; INTERRUPTED
    742  2e8d				  -	      .byte	%00000110	; INTERRUPTED
    743  2e8d				  -	      .byte	%00110110	; INTERRUPTED
    744  2e8d				  -	      .byte	%01100110	; INTERRUPTED
    745  2e8d				  -	      .byte	%01100110	; INTERRUPTED
    746  2e8d				  -	      .byte	%01100110	; INTERRUPTED
    747  2e8d				  -	      .byte	%00110100	; INTERRUPTED
    748  2e8d				  -
    749  2e8d					      endif		; INTERRUPTED
    750  2e8d
    751  2e8d
    752  2e8d				  -	      if	fontstyle == TINY
    753  2e8d				  -
    754  2e8d				  -			;byte %00000000 ; TINY
    755  2e8d				  -
    756  2e8d				  -	      .byte	%00000000	; TINY
    757  2e8d				  -	      .byte	%00111000	; TINY
    758  2e8d				  -	      .byte	%00101000	; TINY
    759  2e8d				  -	      .byte	%00101000	; TINY
    760  2e8d				  -	      .byte	%00101000	; TINY
    761  2e8d				  -	      .byte	%00111000	; TINY
    762  2e8d				  -	      .byte	%00000000	; TINY
    763  2e8d				  -	      .byte	%00000000	; TINY
    764  2e8d				  -
    765  2e8d				  -			;byte %00000000 ; TINY
    766  2e8d				  -
    767  2e8d				  -	      .byte	%00000000	; TINY
    768  2e8d				  -	      .byte	%00010000	; TINY
    769  2e8d				  -	      .byte	%00010000	; TINY
    770  2e8d				  -	      .byte	%00010000	; TINY
    771  2e8d				  -	      .byte	%00010000	; TINY
    772  2e8d				  -	      .byte	%00010000	; TINY
    773  2e8d				  -	      .byte	%00000000	; TINY
    774  2e8d				  -	      .byte	%00000000	; TINY
    775  2e8d				  -
    776  2e8d				  -			;byte %00000000 ; TINY
    777  2e8d				  -
    778  2e8d				  -	      .byte	%00000000	; TINY
    779  2e8d				  -	      .byte	%00111000	; TINY
    780  2e8d				  -	      .byte	%00100000	; TINY
    781  2e8d				  -	      .byte	%00111000	; TINY
    782  2e8d				  -	      .byte	%00001000	; TINY
    783  2e8d				  -	      .byte	%00111000	; TINY
    784  2e8d				  -	      .byte	%00000000	; TINY
    785  2e8d				  -	      .byte	%00000000	; TINY
    786  2e8d				  -
    787  2e8d				  -			;byte %00000000 ; TINY
    788  2e8d				  -
    789  2e8d				  -	      .byte	%00000000	; TINY
    790  2e8d				  -	      .byte	%00111000	; TINY
    791  2e8d				  -	      .byte	%00001000	; TINY
    792  2e8d				  -	      .byte	%00111000	; TINY
    793  2e8d				  -	      .byte	%00001000	; TINY
    794  2e8d				  -	      .byte	%00111000	; TINY
    795  2e8d				  -	      .byte	%00000000	; TINY
    796  2e8d				  -	      .byte	%00000000	; TINY
    797  2e8d				  -
    798  2e8d				  -			;byte %00000000 ; TINY
    799  2e8d				  -
    800  2e8d				  -	      .byte	%00000000	; TINY
    801  2e8d				  -	      .byte	%00001000	; TINY
    802  2e8d				  -	      .byte	%00001000	; TINY
    803  2e8d				  -	      .byte	%00111000	; TINY
    804  2e8d				  -	      .byte	%00101000	; TINY
    805  2e8d				  -	      .byte	%00101000	; TINY
    806  2e8d				  -	      .byte	%00000000	; TINY
    807  2e8d				  -	      .byte	%00000000	; TINY
    808  2e8d				  -
    809  2e8d				  -			;byte %00000000 ; TINY
    810  2e8d				  -
    811  2e8d				  -	      .byte	%00000000	; TINY
    812  2e8d				  -	      .byte	%00111000	; TINY
    813  2e8d				  -	      .byte	%00001000	; TINY
    814  2e8d				  -	      .byte	%00111000	; TINY
    815  2e8d				  -	      .byte	%00100000	; TINY
    816  2e8d				  -	      .byte	%00111000	; TINY
    817  2e8d				  -	      .byte	%00000000	; TINY
    818  2e8d				  -	      .byte	%00000000	; TINY
    819  2e8d				  -
    820  2e8d				  -			;byte %00000000 ; TINY
    821  2e8d				  -
    822  2e8d				  -	      .byte	%00000000	; TINY
    823  2e8d				  -	      .byte	%00111000	; TINY
    824  2e8d				  -	      .byte	%00101000	; TINY
    825  2e8d				  -	      .byte	%00111000	; TINY
    826  2e8d				  -	      .byte	%00100000	; TINY
    827  2e8d				  -	      .byte	%00111000	; TINY
    828  2e8d				  -	      .byte	%00000000	; TINY
    829  2e8d				  -	      .byte	%00000000	; TINY
    830  2e8d				  -
    831  2e8d				  -			;byte %00000000 ; TINY
    832  2e8d				  -
    833  2e8d				  -	      .byte	%00000000	; TINY
    834  2e8d				  -	      .byte	%00001000	; TINY
    835  2e8d				  -	      .byte	%00001000	; TINY
    836  2e8d				  -	      .byte	%00001000	; TINY
    837  2e8d				  -	      .byte	%00001000	; TINY
    838  2e8d				  -	      .byte	%00111000	; TINY
    839  2e8d				  -	      .byte	%00000000	; TINY
    840  2e8d				  -	      .byte	%00000000	; TINY
    841  2e8d				  -
    842  2e8d				  -			;byte %00000000 ; TINY
    843  2e8d				  -
    844  2e8d				  -	      .byte	%00000000	; TINY
    845  2e8d				  -	      .byte	%00111000	; TINY
    846  2e8d				  -	      .byte	%00101000	; TINY
    847  2e8d				  -	      .byte	%00111000	; TINY
    848  2e8d				  -	      .byte	%00101000	; TINY
    849  2e8d				  -	      .byte	%00111000	; TINY
    850  2e8d				  -	      .byte	%00000000	; TINY
    851  2e8d				  -	      .byte	%00000000	; TINY
    852  2e8d				  -
    853  2e8d				  -			;byte %00000000 ; TINY
    854  2e8d				  -
    855  2e8d				  -	      .byte	%00000000	; TINY
    856  2e8d				  -	      .byte	%00001000	; TINY
    857  2e8d				  -	      .byte	%00001000	; TINY
    858  2e8d				  -	      .byte	%00111000	; TINY
    859  2e8d				  -	      .byte	%00101000	; TINY
    860  2e8d				  -	      .byte	%00111000	; TINY
    861  2e8d				  -	      .byte	%00000000	; TINY
    862  2e8d				  -	      .byte	%00000000	; TINY
    863  2e8d				  -
    864  2e8d					      endif		; TINY
    865  2e8d
    866  2e8d				  -	      if	fontstyle == RETROPUTER
    867  2e8d				  -
    868  2e8d				  -			;byte %00000000 ; RETROPUTER
    869  2e8d				  -
    870  2e8d				  -	      .byte	%01111110	; RETROPUTER
    871  2e8d				  -	      .byte	%01000110	; RETROPUTER
    872  2e8d				  -	      .byte	%01000110	; RETROPUTER
    873  2e8d				  -	      .byte	%01000110	; RETROPUTER
    874  2e8d				  -	      .byte	%01100010	; RETROPUTER
    875  2e8d				  -	      .byte	%01100010	; RETROPUTER
    876  2e8d				  -	      .byte	%01100010	; RETROPUTER
    877  2e8d				  -	      .byte	%01111110	; RETROPUTER
    878  2e8d				  -
    879  2e8d				  -			;byte %00000000 ; RETROPUTER
    880  2e8d				  -
    881  2e8d				  -	      .byte	%00111000	; RETROPUTER
    882  2e8d				  -	      .byte	%00111000	; RETROPUTER
    883  2e8d				  -	      .byte	%00111000	; RETROPUTER
    884  2e8d				  -	      .byte	%00111000	; RETROPUTER
    885  2e8d				  -	      .byte	%00011000	; RETROPUTER
    886  2e8d				  -	      .byte	%00011000	; RETROPUTER
    887  2e8d				  -	      .byte	%00011000	; RETROPUTER
    888  2e8d				  -	      .byte	%00011000	; RETROPUTER
    889  2e8d				  -
    890  2e8d				  -			;byte %00000000 ; RETROPUTER
    891  2e8d				  -
    892  2e8d				  -	      .byte	%01111110	; RETROPUTER
    893  2e8d				  -	      .byte	%01100000	; RETROPUTER
    894  2e8d				  -	      .byte	%01100000	; RETROPUTER
    895  2e8d				  -	      .byte	%01100000	; RETROPUTER
    896  2e8d				  -	      .byte	%00111110	; RETROPUTER
    897  2e8d				  -	      .byte	%00000010	; RETROPUTER
    898  2e8d				  -	      .byte	%01000010	; RETROPUTER
    899  2e8d				  -	      .byte	%01111110	; RETROPUTER
    900  2e8d				  -
    901  2e8d				  -			;byte %00000000 ; RETROPUTER
    902  2e8d				  -
    903  2e8d				  -	      .byte	%01111110	; RETROPUTER
    904  2e8d				  -	      .byte	%01000110	; RETROPUTER
    905  2e8d				  -	      .byte	%00000110	; RETROPUTER
    906  2e8d				  -	      .byte	%00000110	; RETROPUTER
    907  2e8d				  -	      .byte	%00111110	; RETROPUTER
    908  2e8d				  -	      .byte	%00000010	; RETROPUTER
    909  2e8d				  -	      .byte	%01000010	; RETROPUTER
    910  2e8d				  -	      .byte	%01111110	; RETROPUTER
    911  2e8d				  -
    912  2e8d				  -			;byte %00000000 ; RETROPUTER
    913  2e8d				  -
    914  2e8d				  -	      .byte	%00001100	; RETROPUTER
    915  2e8d				  -	      .byte	%00001100	; RETROPUTER
    916  2e8d				  -	      .byte	%00001100	; RETROPUTER
    917  2e8d				  -	      .byte	%01111110	; RETROPUTER
    918  2e8d				  -	      .byte	%01000100	; RETROPUTER
    919  2e8d				  -	      .byte	%01000100	; RETROPUTER
    920  2e8d				  -	      .byte	%01000100	; RETROPUTER
    921  2e8d				  -	      .byte	%00000100	; RETROPUTER
    922  2e8d				  -
    923  2e8d				  -			;byte %00000000 ; RETROPUTER
    924  2e8d				  -
    925  2e8d				  -	      .byte	%01111110	; RETROPUTER
    926  2e8d				  -	      .byte	%01000110	; RETROPUTER
    927  2e8d				  -	      .byte	%00000110	; RETROPUTER
    928  2e8d				  -	      .byte	%00000110	; RETROPUTER
    929  2e8d				  -	      .byte	%01111100	; RETROPUTER
    930  2e8d				  -	      .byte	%01000000	; RETROPUTER
    931  2e8d				  -	      .byte	%01000000	; RETROPUTER
    932  2e8d				  -	      .byte	%01111110	; RETROPUTER
    933  2e8d				  -
    934  2e8d				  -			;byte %00000000 ; RETROPUTER
    935  2e8d				  -
    936  2e8d				  -	      .byte	%01111110	; RETROPUTER
    937  2e8d				  -	      .byte	%01000110	; RETROPUTER
    938  2e8d				  -	      .byte	%01000110	; RETROPUTER
    939  2e8d				  -	      .byte	%01000110	; RETROPUTER
    940  2e8d				  -	      .byte	%01111100	; RETROPUTER
    941  2e8d				  -	      .byte	%01000000	; RETROPUTER
    942  2e8d				  -	      .byte	%01000010	; RETROPUTER
    943  2e8d				  -	      .byte	%01111110	; RETROPUTER
    944  2e8d				  -
    945  2e8d				  -			;byte %00000000 ; RETROPUTER
    946  2e8d				  -
    947  2e8d				  -	      .byte	%00001100	; RETROPUTER
    948  2e8d				  -	      .byte	%00001100	; RETROPUTER
    949  2e8d				  -	      .byte	%00001100	; RETROPUTER
    950  2e8d				  -	      .byte	%00001100	; RETROPUTER
    951  2e8d				  -	      .byte	%00000100	; RETROPUTER
    952  2e8d				  -	      .byte	%00000010	; RETROPUTER
    953  2e8d				  -	      .byte	%01000010	; RETROPUTER
    954  2e8d				  -	      .byte	%01111110	; RETROPUTER
    955  2e8d				  -
    956  2e8d				  -			;byte %00000000 ; RETROPUTER
    957  2e8d				  -
    958  2e8d				  -	      .byte	%01111110	; RETROPUTER
    959  2e8d				  -	      .byte	%01000110	; RETROPUTER
    960  2e8d				  -	      .byte	%01000110	; RETROPUTER
    961  2e8d				  -	      .byte	%01000110	; RETROPUTER
    962  2e8d				  -	      .byte	%01111110	; RETROPUTER
    963  2e8d				  -	      .byte	%01000010	; RETROPUTER
    964  2e8d				  -	      .byte	%01000010	; RETROPUTER
    965  2e8d				  -	      .byte	%01111110	; RETROPUTER
    966  2e8d				  -
    967  2e8d				  -			;byte %00000000 ; RETROPUTER
    968  2e8d				  -
    969  2e8d				  -	      .byte	%00000110	; RETROPUTER
    970  2e8d				  -	      .byte	%00000110	; RETROPUTER
    971  2e8d				  -	      .byte	%00000110	; RETROPUTER
    972  2e8d				  -	      .byte	%00000010	; RETROPUTER
    973  2e8d				  -	      .byte	%01111110	; RETROPUTER
    974  2e8d				  -	      .byte	%01000010	; RETROPUTER
    975  2e8d				  -	      .byte	%01000010	; RETROPUTER
    976  2e8d				  -	      .byte	%01111110	; RETROPUTER
    977  2e8d				  -
    978  2e8d					      endif		; RETROPUTER
    979  2e8d
    980  2e8d				  -	      if	fontstyle == CURVES
    981  2e8d				  -
    982  2e8d				  -			;byte %00000000 ; CURVES
    983  2e8d				  -
    984  2e8d				  -	      .byte	%00111100	; CURVES
    985  2e8d				  -	      .byte	%01111110	; CURVES
    986  2e8d				  -	      .byte	%01100110	; CURVES
    987  2e8d				  -	      .byte	%01100110	; CURVES
    988  2e8d				  -	      .byte	%01100110	; CURVES
    989  2e8d				  -	      .byte	%01100110	; CURVES
    990  2e8d				  -	      .byte	%01111110	; CURVES
    991  2e8d				  -	      .byte	%00111100	; CURVES
    992  2e8d				  -
    993  2e8d				  -			;byte %00000000 ; CURVES
    994  2e8d				  -
    995  2e8d				  -	      .byte	%00011000	; CURVES
    996  2e8d				  -	      .byte	%00011000	; CURVES
    997  2e8d				  -	      .byte	%00011000	; CURVES
    998  2e8d				  -	      .byte	%00011000	; CURVES
    999  2e8d				  -	      .byte	%00011000	; CURVES
   1000  2e8d				  -	      .byte	%00011000	; CURVES
   1001  2e8d				  -	      .byte	%01111000	; CURVES
   1002  2e8d				  -	      .byte	%01110000	; CURVES
   1003  2e8d				  -
   1004  2e8d				  -			;byte %00000000 ; CURVES
   1005  2e8d				  -
   1006  2e8d				  -	      .byte	%01111110	; CURVES
   1007  2e8d				  -	      .byte	%01111110	; CURVES
   1008  2e8d				  -	      .byte	%01100000	; CURVES
   1009  2e8d				  -	      .byte	%01111100	; CURVES
   1010  2e8d				  -	      .byte	%00111110	; CURVES
   1011  2e8d				  -	      .byte	%00000110	; CURVES
   1012  2e8d				  -	      .byte	%01111110	; CURVES
   1013  2e8d				  -	      .byte	%01111100	; CURVES
   1014  2e8d				  -
   1015  2e8d				  -			;byte %00000000 ; CURVES
   1016  2e8d				  -
   1017  2e8d				  -	      .byte	%01111100	; CURVES
   1018  2e8d				  -	      .byte	%01111110	; CURVES
   1019  2e8d				  -	      .byte	%00001110	; CURVES
   1020  2e8d				  -	      .byte	%00111100	; CURVES
   1021  2e8d				  -	      .byte	%00111100	; CURVES
   1022  2e8d				  -	      .byte	%00001110	; CURVES
   1023  2e8d				  -	      .byte	%01111110	; CURVES
   1024  2e8d				  -	      .byte	%01111100	; CURVES
   1025  2e8d				  -
   1026  2e8d				  -			;byte %00000000 ; CURVES
   1027  2e8d				  -
   1028  2e8d				  -	      .byte	%00000110	; CURVES
   1029  2e8d				  -	      .byte	%00000110	; CURVES
   1030  2e8d				  -	      .byte	%00111110	; CURVES
   1031  2e8d				  -	      .byte	%01111110	; CURVES
   1032  2e8d				  -	      .byte	%01100110	; CURVES
   1033  2e8d				  -	      .byte	%01100110	; CURVES
   1034  2e8d				  -	      .byte	%01100110	; CURVES
   1035  2e8d				  -	      .byte	%01100110	; CURVES
   1036  2e8d				  -
   1037  2e8d				  -			;byte %00000000 ; CURVES
   1038  2e8d				  -
   1039  2e8d				  -	      .byte	%01111100	; CURVES
   1040  2e8d				  -	      .byte	%01111110	; CURVES
   1041  2e8d				  -	      .byte	%00000110	; CURVES
   1042  2e8d				  -	      .byte	%01111110	; CURVES
   1043  2e8d				  -	      .byte	%01111100	; CURVES
   1044  2e8d				  -	      .byte	%01100000	; CURVES
   1045  2e8d				  -	      .byte	%01111110	; CURVES
   1046  2e8d				  -	      .byte	%01111110	; CURVES
   1047  2e8d				  -
   1048  2e8d				  -			;byte %00000000 ; CURVES
   1049  2e8d				  -
   1050  2e8d				  -	      .byte	%00111100	; CURVES
   1051  2e8d				  -	      .byte	%01111110	; CURVES
   1052  2e8d				  -	      .byte	%01100110	; CURVES
   1053  2e8d				  -	      .byte	%01111110	; CURVES
   1054  2e8d				  -	      .byte	%01111100	; CURVES
   1055  2e8d				  -	      .byte	%01100000	; CURVES
   1056  2e8d				  -	      .byte	%01111110	; CURVES
   1057  2e8d				  -	      .byte	%00111110	; CURVES
   1058  2e8d				  -
   1059  2e8d				  -			;byte %00000000 ; CURVES
   1060  2e8d				  -
   1061  2e8d				  -	      .byte	%00000110	; CURVES
   1062  2e8d				  -	      .byte	%00000110	; CURVES
   1063  2e8d				  -	      .byte	%00000110	; CURVES
   1064  2e8d				  -	      .byte	%00000110	; CURVES
   1065  2e8d				  -	      .byte	%00000110	; CURVES
   1066  2e8d				  -	      .byte	%01100110	; CURVES
   1067  2e8d				  -	      .byte	%01111110	; CURVES
   1068  2e8d				  -	      .byte	%00111100	; CURVES
   1069  2e8d				  -
   1070  2e8d				  -			;byte %00000000 ; CURVES
   1071  2e8d				  -
   1072  2e8d				  -	      .byte	%00111100	; CURVES
   1073  2e8d				  -	      .byte	%01111110	; CURVES
   1074  2e8d				  -	      .byte	%01100110	; CURVES
   1075  2e8d				  -	      .byte	%01111110	; CURVES
   1076  2e8d				  -	      .byte	%00111100	; CURVES
   1077  2e8d				  -	      .byte	%01100110	; CURVES
   1078  2e8d				  -	      .byte	%01111110	; CURVES
   1079  2e8d				  -	      .byte	%00111100	; CURVES
   1080  2e8d				  -
   1081  2e8d				  -			;byte %00000000 ; CURVES
   1082  2e8d				  -
   1083  2e8d				  -	      .byte	%01111100	; CURVES
   1084  2e8d				  -	      .byte	%01111110	; CURVES
   1085  2e8d				  -	      .byte	%00000110	; CURVES
   1086  2e8d				  -	      .byte	%00111110	; CURVES
   1087  2e8d				  -	      .byte	%01111110	; CURVES
   1088  2e8d				  -	      .byte	%01100110	; CURVES
   1089  2e8d				  -	      .byte	%01111110	; CURVES
   1090  2e8d				  -	      .byte	%00111100	; CURVES
   1091  2e8d				  -
   1092  2e8d					      endif		; CURVES
   1093  2e8d
   1094  2e8d
   1095  2e8d				  -	      if	fontstyle == HUSKY
   1096  2e8d				  -
   1097  2e8d				  -			;byte %00000000 ; HUSKY
   1098  2e8d				  -
   1099  2e8d				  -	      .byte	%01111100	; HUSKY
   1100  2e8d				  -	      .byte	%11111110	; HUSKY
   1101  2e8d				  -	      .byte	%11101110	; HUSKY
   1102  2e8d				  -	      .byte	%11101110	; HUSKY
   1103  2e8d				  -	      .byte	%11101110	; HUSKY
   1104  2e8d				  -	      .byte	%11101110	; HUSKY
   1105  2e8d				  -	      .byte	%11111110	; HUSKY
   1106  2e8d				  -	      .byte	%01111100	; HUSKY
   1107  2e8d				  -
   1108  2e8d				  -			;byte %00000000 ; HUSKY
   1109  2e8d				  -
   1110  2e8d				  -	      .byte	%00111000	; HUSKY
   1111  2e8d				  -	      .byte	%00111000	; HUSKY
   1112  2e8d				  -	      .byte	%00111000	; HUSKY
   1113  2e8d				  -	      .byte	%00111000	; HUSKY
   1114  2e8d				  -	      .byte	%00111000	; HUSKY
   1115  2e8d				  -	      .byte	%00111000	; HUSKY
   1116  2e8d				  -	      .byte	%00111000	; HUSKY
   1117  2e8d				  -	      .byte	%00111000	; HUSKY
   1118  2e8d				  -
   1119  2e8d				  -			;byte %00000000 ; HUSKY
   1120  2e8d				  -
   1121  2e8d				  -	      .byte	%11111110	; HUSKY
   1122  2e8d				  -	      .byte	%11111110	; HUSKY
   1123  2e8d				  -	      .byte	%11100000	; HUSKY
   1124  2e8d				  -	      .byte	%11111100	; HUSKY
   1125  2e8d				  -	      .byte	%01111110	; HUSKY
   1126  2e8d				  -	      .byte	%00001110	; HUSKY
   1127  2e8d				  -	      .byte	%11111110	; HUSKY
   1128  2e8d				  -	      .byte	%11111100	; HUSKY
   1129  2e8d				  -
   1130  2e8d				  -			;byte %00000000 ; HUSKY
   1131  2e8d				  -
   1132  2e8d				  -	      .byte	%11111100	; HUSKY
   1133  2e8d				  -	      .byte	%11111110	; HUSKY
   1134  2e8d				  -	      .byte	%00001110	; HUSKY
   1135  2e8d				  -	      .byte	%11111100	; HUSKY
   1136  2e8d				  -	      .byte	%11111100	; HUSKY
   1137  2e8d				  -	      .byte	%00001110	; HUSKY
   1138  2e8d				  -	      .byte	%11111110	; HUSKY
   1139  2e8d				  -	      .byte	%11111100	; HUSKY
   1140  2e8d				  -
   1141  2e8d				  -			;byte %00000000 ; HUSKY
   1142  2e8d				  -
   1143  2e8d				  -	      .byte	%00011100	; HUSKY
   1144  2e8d				  -	      .byte	%00011100	; HUSKY
   1145  2e8d				  -	      .byte	%11111110	; HUSKY
   1146  2e8d				  -	      .byte	%11111110	; HUSKY
   1147  2e8d				  -	      .byte	%11011100	; HUSKY
   1148  2e8d				  -	      .byte	%11011100	; HUSKY
   1149  2e8d				  -	      .byte	%00011100	; HUSKY
   1150  2e8d				  -	      .byte	%00011100	; HUSKY
   1151  2e8d				  -
   1152  2e8d				  -			;byte %00000000 ; HUSKY
   1153  2e8d				  -
   1154  2e8d				  -	      .byte	%11111100	; HUSKY
   1155  2e8d				  -	      .byte	%11111110	; HUSKY
   1156  2e8d				  -	      .byte	%00001110	; HUSKY
   1157  2e8d				  -	      .byte	%11111110	; HUSKY
   1158  2e8d				  -	      .byte	%11111100	; HUSKY
   1159  2e8d				  -	      .byte	%11100000	; HUSKY
   1160  2e8d				  -	      .byte	%11111110	; HUSKY
   1161  2e8d				  -	      .byte	%11111110	; HUSKY
   1162  2e8d				  -
   1163  2e8d				  -			;byte %00000000 ; HUSKY
   1164  2e8d				  -
   1165  2e8d				  -	      .byte	%01111100	; HUSKY
   1166  2e8d				  -	      .byte	%11111110	; HUSKY
   1167  2e8d				  -	      .byte	%11101110	; HUSKY
   1168  2e8d				  -	      .byte	%11111110	; HUSKY
   1169  2e8d				  -	      .byte	%11111100	; HUSKY
   1170  2e8d				  -	      .byte	%11100000	; HUSKY
   1171  2e8d				  -	      .byte	%11111110	; HUSKY
   1172  2e8d				  -	      .byte	%01111110	; HUSKY
   1173  2e8d				  -
   1174  2e8d				  -			;byte %00000000 ; HUSKY
   1175  2e8d				  -
   1176  2e8d				  -	      .byte	%00111000	; HUSKY
   1177  2e8d				  -	      .byte	%00111000	; HUSKY
   1178  2e8d				  -	      .byte	%00111000	; HUSKY
   1179  2e8d				  -	      .byte	%00111000	; HUSKY
   1180  2e8d				  -	      .byte	%00011100	; HUSKY
   1181  2e8d				  -	      .byte	%00001110	; HUSKY
   1182  2e8d				  -	      .byte	%11111110	; HUSKY
   1183  2e8d				  -	      .byte	%11111110	; HUSKY
   1184  2e8d				  -
   1185  2e8d				  -			;byte %00000000 ; HUSKY
   1186  2e8d				  -
   1187  2e8d				  -	      .byte	%01111100	; HUSKY
   1188  2e8d				  -	      .byte	%11111110	; HUSKY
   1189  2e8d				  -	      .byte	%11101110	; HUSKY
   1190  2e8d				  -	      .byte	%11111110	; HUSKY
   1191  2e8d				  -	      .byte	%01111100	; HUSKY
   1192  2e8d				  -	      .byte	%11101110	; HUSKY
   1193  2e8d				  -	      .byte	%11111110	; HUSKY
   1194  2e8d				  -	      .byte	%01111100	; HUSKY
   1195  2e8d				  -
   1196  2e8d				  -			;byte %00000000 ; HUSKY
   1197  2e8d				  -
   1198  2e8d				  -	      .byte	%11111100	; HUSKY
   1199  2e8d				  -	      .byte	%11111110	; HUSKY
   1200  2e8d				  -	      .byte	%00001110	; HUSKY
   1201  2e8d				  -	      .byte	%01111110	; HUSKY
   1202  2e8d				  -	      .byte	%11111110	; HUSKY
   1203  2e8d				  -	      .byte	%11101110	; HUSKY
   1204  2e8d				  -	      .byte	%11111110	; HUSKY
   1205  2e8d				  -	      .byte	%01111100	; HUSKY
   1206  2e8d				  -
   1207  2e8d					      endif		; HUSKY
   1208  2e8d
   1209  2e8d
   1210  2e8d				  -	      if	fontstyle == SNAKE
   1211  2e8d				  -
   1212  2e8d				  -			;byte %00000000 ; SNAKE
   1213  2e8d				  -
   1214  2e8d				  -	      .byte	%01111110	; SNAKE
   1215  2e8d				  -	      .byte	%01000010	; SNAKE
   1216  2e8d				  -	      .byte	%01000010	; SNAKE
   1217  2e8d				  -	      .byte	%01000010	; SNAKE
   1218  2e8d				  -	      .byte	%01000010	; SNAKE
   1219  2e8d				  -	      .byte	%01000010	; SNAKE
   1220  2e8d				  -	      .byte	%01000010	; SNAKE
   1221  2e8d				  -	      .byte	%01111110	; SNAKE
   1222  2e8d				  -
   1223  2e8d				  -			;byte %00000000 ; SNAKE
   1224  2e8d				  -
   1225  2e8d				  -	      .byte	%00111000	; SNAKE
   1226  2e8d				  -	      .byte	%00101000	; SNAKE
   1227  2e8d				  -	      .byte	%00001000	; SNAKE
   1228  2e8d				  -	      .byte	%00001000	; SNAKE
   1229  2e8d				  -	      .byte	%00001000	; SNAKE
   1230  2e8d				  -	      .byte	%00001000	; SNAKE
   1231  2e8d				  -	      .byte	%00001000	; SNAKE
   1232  2e8d				  -	      .byte	%00111000	; SNAKE
   1233  2e8d				  -
   1234  2e8d				  -			;byte %00000000 ; SNAKE
   1235  2e8d				  -
   1236  2e8d				  -	      .byte	%01111110	; SNAKE
   1237  2e8d				  -	      .byte	%01000010	; SNAKE
   1238  2e8d				  -	      .byte	%01000110	; SNAKE
   1239  2e8d				  -	      .byte	%01000000	; SNAKE
   1240  2e8d				  -	      .byte	%01111110	; SNAKE
   1241  2e8d				  -	      .byte	%00000010	; SNAKE
   1242  2e8d				  -	      .byte	%01000010	; SNAKE
   1243  2e8d				  -	      .byte	%01111110	; SNAKE
   1244  2e8d				  -
   1245  2e8d				  -			;byte %00000000 ; SNAKE
   1246  2e8d				  -
   1247  2e8d				  -	      .byte	%01111110	; SNAKE
   1248  2e8d				  -	      .byte	%01000010	; SNAKE
   1249  2e8d				  -	      .byte	%01100010	; SNAKE
   1250  2e8d				  -	      .byte	%00000010	; SNAKE
   1251  2e8d				  -	      .byte	%01111110	; SNAKE
   1252  2e8d				  -	      .byte	%00000010	; SNAKE
   1253  2e8d				  -	      .byte	%01000010	; SNAKE
   1254  2e8d				  -	      .byte	%01111110	; SNAKE
   1255  2e8d				  -
   1256  2e8d				  -			;byte %00000000 ; SNAKE
   1257  2e8d				  -
   1258  2e8d				  -	      .byte	%00001110	; SNAKE
   1259  2e8d				  -	      .byte	%00001010	; SNAKE
   1260  2e8d				  -	      .byte	%00000010	; SNAKE
   1261  2e8d				  -	      .byte	%01111110	; SNAKE
   1262  2e8d				  -	      .byte	%01000010	; SNAKE
   1263  2e8d				  -	      .byte	%01000010	; SNAKE
   1264  2e8d				  -	      .byte	%01000010	; SNAKE
   1265  2e8d				  -	      .byte	%01100110	; SNAKE
   1266  2e8d				  -
   1267  2e8d				  -			;byte %00000000 ; SNAKE
   1268  2e8d				  -
   1269  2e8d				  -	      .byte	%01111110	; SNAKE
   1270  2e8d				  -	      .byte	%01000010	; SNAKE
   1271  2e8d				  -	      .byte	%01100010	; SNAKE
   1272  2e8d				  -	      .byte	%00000010	; SNAKE
   1273  2e8d				  -	      .byte	%01111110	; SNAKE
   1274  2e8d				  -	      .byte	%01000000	; SNAKE
   1275  2e8d				  -	      .byte	%01000010	; SNAKE
   1276  2e8d				  -	      .byte	%01111110	; SNAKE
   1277  2e8d				  -
   1278  2e8d				  -			;byte %00000000 ; SNAKE
   1279  2e8d				  -
   1280  2e8d				  -	      .byte	%01111110	; SNAKE
   1281  2e8d				  -	      .byte	%01000010	; SNAKE
   1282  2e8d				  -	      .byte	%01000010	; SNAKE
   1283  2e8d				  -	      .byte	%01111110	; SNAKE
   1284  2e8d				  -	      .byte	%01000000	; SNAKE
   1285  2e8d				  -	      .byte	%01000110	; SNAKE
   1286  2e8d				  -	      .byte	%01000010	; SNAKE
   1287  2e8d				  -	      .byte	%01111110	; SNAKE
   1288  2e8d				  -
   1289  2e8d				  -			;byte %00000000 ; SNAKE
   1290  2e8d				  -
   1291  2e8d				  -	      .byte	%00000110	; SNAKE
   1292  2e8d				  -	      .byte	%00000010	; SNAKE
   1293  2e8d				  -	      .byte	%00000010	; SNAKE
   1294  2e8d				  -	      .byte	%00000010	; SNAKE
   1295  2e8d				  -	      .byte	%00000010	; SNAKE
   1296  2e8d				  -	      .byte	%01100010	; SNAKE
   1297  2e8d				  -	      .byte	%01000010	; SNAKE
   1298  2e8d				  -	      .byte	%01111110	; SNAKE
   1299  2e8d				  -
   1300  2e8d				  -			;byte %00000000 ; SNAKE
   1301  2e8d				  -
   1302  2e8d				  -	      .byte	%01111110	; SNAKE
   1303  2e8d				  -	      .byte	%01000010	; SNAKE
   1304  2e8d				  -	      .byte	%01000010	; SNAKE
   1305  2e8d				  -	      .byte	%01000010	; SNAKE
   1306  2e8d				  -	      .byte	%01111110	; SNAKE
   1307  2e8d				  -	      .byte	%01000010	; SNAKE
   1308  2e8d				  -	      .byte	%01000010	; SNAKE
   1309  2e8d				  -	      .byte	%01111110	; SNAKE
   1310  2e8d				  -
   1311  2e8d				  -			;byte %00000000 ; SNAKE
   1312  2e8d				  -
   1313  2e8d				  -	      .byte	%00001110	; SNAKE
   1314  2e8d				  -	      .byte	%00001010	; SNAKE
   1315  2e8d				  -	      .byte	%00000010	; SNAKE
   1316  2e8d				  -	      .byte	%00000010	; SNAKE
   1317  2e8d				  -	      .byte	%01111110	; SNAKE
   1318  2e8d				  -	      .byte	%01000010	; SNAKE
   1319  2e8d				  -	      .byte	%01000010	; SNAKE
   1320  2e8d				  -	      .byte	%01111110	; SNAKE
   1321  2e8d				  -
   1322  2e8d				  -
   1323  2e8d					      endif		; SNAKE
   1324  2e8d
   1325  2e8d				  -	      if	fontstyle == PLOK
   1326  2e8d				  -
   1327  2e8d				  -			;byte %00000000 ; PLOK
   1328  2e8d				  -
   1329  2e8d				  -	      .byte	%00000000	; PLOK
   1330  2e8d				  -	      .byte	%00111000	; PLOK
   1331  2e8d				  -	      .byte	%01100100	; PLOK
   1332  2e8d				  -	      .byte	%01100010	; PLOK
   1333  2e8d				  -	      .byte	%01100010	; PLOK
   1334  2e8d				  -	      .byte	%00110110	; PLOK
   1335  2e8d				  -	      .byte	%00011100	; PLOK
   1336  2e8d				  -	      .byte	%00000000	; PLOK
   1337  2e8d				  -
   1338  2e8d				  -			;byte %00000000 ; PLOK
   1339  2e8d				  -
   1340  2e8d				  -	      .byte	%00000000	; PLOK
   1341  2e8d				  -	      .byte	%00010000	; PLOK
   1342  2e8d				  -	      .byte	%00011100	; PLOK
   1343  2e8d				  -	      .byte	%00011100	; PLOK
   1344  2e8d				  -	      .byte	%00011000	; PLOK
   1345  2e8d				  -	      .byte	%00111000	; PLOK
   1346  2e8d				  -	      .byte	%00011000	; PLOK
   1347  2e8d				  -	      .byte	%00000000	; PLOK
   1348  2e8d				  -
   1349  2e8d				  -			;byte %00000000 ; PLOK
   1350  2e8d				  -
   1351  2e8d				  -	      .byte	%00000000	; PLOK
   1352  2e8d				  -	      .byte	%00001110	; PLOK
   1353  2e8d				  -	      .byte	%01111110	; PLOK
   1354  2e8d				  -	      .byte	%00011000	; PLOK
   1355  2e8d				  -	      .byte	%00001100	; PLOK
   1356  2e8d				  -	      .byte	%00000110	; PLOK
   1357  2e8d				  -	      .byte	%00111100	; PLOK
   1358  2e8d				  -	      .byte	%00000000	; PLOK
   1359  2e8d				  -
   1360  2e8d				  -			;byte %00000000 ; PLOK
   1361  2e8d				  -
   1362  2e8d				  -	      .byte	%00000000	; PLOK
   1363  2e8d				  -	      .byte	%00111100	; PLOK
   1364  2e8d				  -	      .byte	%01101110	; PLOK
   1365  2e8d				  -	      .byte	%00001110	; PLOK
   1366  2e8d				  -	      .byte	%00011100	; PLOK
   1367  2e8d				  -	      .byte	%00000110	; PLOK
   1368  2e8d				  -	      .byte	%01111100	; PLOK
   1369  2e8d				  -	      .byte	%00000000	; PLOK
   1370  2e8d				  -
   1371  2e8d				  -			;byte %00000000 ; PLOK
   1372  2e8d				  -
   1373  2e8d				  -	      .byte	%00000000	; PLOK
   1374  2e8d				  -	      .byte	%00011000	; PLOK
   1375  2e8d				  -	      .byte	%01111110	; PLOK
   1376  2e8d				  -	      .byte	%01101100	; PLOK
   1377  2e8d				  -	      .byte	%00100100	; PLOK
   1378  2e8d				  -	      .byte	%00110000	; PLOK
   1379  2e8d				  -	      .byte	%00110000	; PLOK
   1380  2e8d				  -	      .byte	%00000000	; PLOK
   1381  2e8d				  -
   1382  2e8d				  -			;byte %00000000 ; PLOK
   1383  2e8d				  -
   1384  2e8d				  -	      .byte	%00000000	; PLOK
   1385  2e8d				  -	      .byte	%00111100	; PLOK
   1386  2e8d				  -	      .byte	%01001110	; PLOK
   1387  2e8d				  -	      .byte	%00011100	; PLOK
   1388  2e8d				  -	      .byte	%01100000	; PLOK
   1389  2e8d				  -	      .byte	%01111100	; PLOK
   1390  2e8d				  -	      .byte	%00011100	; PLOK
   1391  2e8d				  -	      .byte	%00000000	; PLOK
   1392  2e8d				  -
   1393  2e8d				  -			;byte %00000000 ; PLOK
   1394  2e8d				  -
   1395  2e8d				  -	      .byte	%00000000	; PLOK
   1396  2e8d				  -	      .byte	%00111100	; PLOK
   1397  2e8d				  -	      .byte	%01000110	; PLOK
   1398  2e8d				  -	      .byte	%01101100	; PLOK
   1399  2e8d				  -	      .byte	%01110000	; PLOK
   1400  2e8d				  -	      .byte	%00111000	; PLOK
   1401  2e8d				  -	      .byte	%00010000	; PLOK
   1402  2e8d				  -	      .byte	%00000000	; PLOK
   1403  2e8d				  -
   1404  2e8d				  -			;byte %00000000 ; PLOK
   1405  2e8d				  -
   1406  2e8d				  -	      .byte	%00000000	; PLOK
   1407  2e8d				  -	      .byte	%00111100	; PLOK
   1408  2e8d				  -	      .byte	%00011100	; PLOK
   1409  2e8d				  -	      .byte	%00001100	; PLOK
   1410  2e8d				  -	      .byte	%00000110	; PLOK
   1411  2e8d				  -	      .byte	%01111110	; PLOK
   1412  2e8d				  -	      .byte	%00110000	; PLOK
   1413  2e8d				  -	      .byte	%00000000	; PLOK
   1414  2e8d				  -
   1415  2e8d				  -			;byte %00000000 ; PLOK
   1416  2e8d				  -
   1417  2e8d				  -	      .byte	%00000000	; PLOK
   1418  2e8d				  -	      .byte	%00111100	; PLOK
   1419  2e8d				  -	      .byte	%01001110	; PLOK
   1420  2e8d				  -	      .byte	%01101110	; PLOK
   1421  2e8d				  -	      .byte	%00111100	; PLOK
   1422  2e8d				  -	      .byte	%01100100	; PLOK
   1423  2e8d				  -	      .byte	%00111000	; PLOK
   1424  2e8d				  -	      .byte	%00000000	; PLOK
   1425  2e8d				  -
   1426  2e8d				  -			;byte %00000000 ; PLOK
   1427  2e8d				  -
   1428  2e8d				  -	      .byte	%00000000	; PLOK
   1429  2e8d				  -	      .byte	%00011000	; PLOK
   1430  2e8d				  -	      .byte	%00001100	; PLOK
   1431  2e8d				  -	      .byte	%00011100	; PLOK
   1432  2e8d				  -	      .byte	%00100110	; PLOK
   1433  2e8d				  -	      .byte	%01001110	; PLOK
   1434  2e8d				  -	      .byte	%00111100	; PLOK
   1435  2e8d				  -	      .byte	%00000000	; PLOK
   1436  2e8d				  -
   1437  2e8d					      endif		; PLOK
   1438  2e8d
   1439  2e8d							; ### any characters that aren't font specific follow...
   1440  2e8d
   1441  2e8d				  -	      ifconst	fontcharSPACE
   1442  2e8d				  -			;byte %00000000 ; SYMBOLS
   1443  2e8d				  -
   1444  2e8d				  -	      .byte	%00000000	; SYMBOLS
   1445  2e8d				  -	      .byte	%00000000	; SYMBOLS
   1446  2e8d				  -	      .byte	%00000000	; SYMBOLS
   1447  2e8d				  -	      .byte	%00000000	; SYMBOLS
   1448  2e8d				  -	      .byte	%00000000	; SYMBOLS
   1449  2e8d				  -	      .byte	%00000000	; SYMBOLS
   1450  2e8d				  -	      .byte	%00000000	; SYMBOLS
   1451  2e8d				  -	      .byte	%00000000	; SYMBOLS
   1452  2e8d				  -
   1453  2e8d				  -			;byte %00000000 ; SYMBOLS
   1454  2e8d					      endif		; fontcharSPACE
   1455  2e8d
   1456  2e8d				  -	      ifconst	fontcharDOLLAR
   1457  2e8d				  -			;byte %00000000 ; SYMBOLS
   1458  2e8d				  -
   1459  2e8d				  -	      .byte	%00000000	; SYMBOLS
   1460  2e8d				  -	      .byte	%00010000	; SYMBOLS
   1461  2e8d				  -	      .byte	%01111100	; SYMBOLS
   1462  2e8d				  -	      .byte	%00010010	; SYMBOLS
   1463  2e8d				  -	      .byte	%01111100	; SYMBOLS
   1464  2e8d				  -	      .byte	%10010000	; SYMBOLS
   1465  2e8d				  -	      .byte	%01111100	; SYMBOLS
   1466  2e8d				  -	      .byte	%00010000	; SYMBOLS
   1467  2e8d				  -
   1468  2e8d				  -			;byte %00000000 ; SYMBOLS
   1469  2e8d				  -
   1470  2e8d					      endif		; fontcharDOLLAR
   1471  2e8d
   1472  2e8d				  -	      ifconst	fontcharPOUND
   1473  2e8d				  -			;byte %00000000 ; SYMBOLS
   1474  2e8d				  -
   1475  2e8d				  -	      .byte	%01111110	; SYMBOLS
   1476  2e8d				  -	      .byte	%01000000	; SYMBOLS
   1477  2e8d				  -	      .byte	%00100000	; SYMBOLS
   1478  2e8d				  -	      .byte	%00100000	; SYMBOLS
   1479  2e8d				  -	      .byte	%01111000	; SYMBOLS
   1480  2e8d				  -	      .byte	%00100000	; SYMBOLS
   1481  2e8d				  -	      .byte	%00100010	; SYMBOLS
   1482  2e8d				  -	      .byte	%00011100	; SYMBOLS
   1483  2e8d				  -
   1484  2e8d				  -			;byte %00000000 ; SYMBOLS
   1485  2e8d				  -
   1486  2e8d					      endif		; fontcharPOUND
   1487  2e8d
   1488  2e8d
   1489  2e8d				  -	      ifconst	fontcharMRHAPPY
   1490  2e8d				  -			;byte %00000000 ; SYMBOLS
   1491  2e8d				  -
   1492  2e8d				  -	      .byte	%00111100	; SYMBOLS
   1493  2e8d				  -	      .byte	%01100110	; SYMBOLS
   1494  2e8d				  -	      .byte	%01011010	; SYMBOLS
   1495  2e8d				  -	      .byte	%01111110	; SYMBOLS
   1496  2e8d				  -	      .byte	%01111110	; SYMBOLS
   1497  2e8d				  -	      .byte	%01011010	; SYMBOLS
   1498  2e8d				  -	      .byte	%01111110	; SYMBOLS
   1499  2e8d				  -	      .byte	%00111100	; SYMBOLS
   1500  2e8d				  -
   1501  2e8d				  -			;byte %00000000 ; SYMBOLS
   1502  2e8d				  -
   1503  2e8d					      endif		; fontcharMRHAPPY
   1504  2e8d
   1505  2e8d				  -	      ifconst	fontcharMRSAD
   1506  2e8d				  -			;byte %00000000 ; SYMBOLS
   1507  2e8d				  -
   1508  2e8d				  -	      .byte	%00111100	; SYMBOLS
   1509  2e8d				  -	      .byte	%01011010	; SYMBOLS
   1510  2e8d				  -	      .byte	%01100110	; SYMBOLS
   1511  2e8d				  -	      .byte	%01111110	; SYMBOLS
   1512  2e8d				  -	      .byte	%01111110	; SYMBOLS
   1513  2e8d				  -	      .byte	%01011010	; SYMBOLS
   1514  2e8d				  -	      .byte	%01111110	; SYMBOLS
   1515  2e8d				  -	      .byte	%00111100	; SYMBOLS
   1516  2e8d				  -
   1517  2e8d				  -			;byte %00000000 ; SYMBOLS
   1518  2e8d				  -
   1519  2e8d					      endif		; fontcharMRSAD
   1520  2e8d
   1521  2e8d
   1522  2e8d				  -	      ifconst	fontcharCOPYRIGHT
   1523  2e8d				  -			;byte %00000000 ; SYMBOLS
   1524  2e8d				  -
   1525  2e8d				  -	      .byte	%00000000	; SYMBOLS
   1526  2e8d				  -	      .byte	%00111000	; SYMBOLS
   1527  2e8d				  -	      .byte	%01000100	; SYMBOLS
   1528  2e8d				  -	      .byte	%10111010	; SYMBOLS
   1529  2e8d				  -	      .byte	%10100010	; SYMBOLS
   1530  2e8d				  -	      .byte	%10111010	; SYMBOLS
   1531  2e8d				  -	      .byte	%01000100	; SYMBOLS
   1532  2e8d				  -	      .byte	%00111000	; SYMBOLS
   1533  2e8d				  -
   1534  2e8d				  -			;byte %00000000 ; SYMBOLS
   1535  2e8d				  -
   1536  2e8d					      endif		; fontcharCOPYRIGHT
   1537  2e8d
   1538  2e8d
   1539  2e8d				  -	      ifconst	fontcharFUJI
   1540  2e8d				  -
   1541  2e8d				  -			;byte %00000000 ; ** these commented-out blanks are for the preview generation program
   1542  2e8d				  -
   1543  2e8d				  -	      .byte	%01110000	; SYMBOLS
   1544  2e8d				  -	      .byte	%01111001	; SYMBOLS
   1545  2e8d				  -	      .byte	%00011101	; SYMBOLS
   1546  2e8d				  -	      .byte	%00001101	; SYMBOLS
   1547  2e8d				  -	      .byte	%00001101	; SYMBOLS
   1548  2e8d				  -	      .byte	%00001101	; SYMBOLS
   1549  2e8d				  -	      .byte	%00001101	; SYMBOLS
   1550  2e8d				  -	      .byte	%00000000	; SYMBOLS
   1551  2e8d				  -
   1552  2e8d				  -			;byte %00000000 ; SYMBOLS
   1553  2e8d				  -
   1554  2e8d				  -	      .byte	%00001110	; SYMBOLS
   1555  2e8d				  -	      .byte	%10011110	; SYMBOLS
   1556  2e8d				  -	      .byte	%10111000	; SYMBOLS
   1557  2e8d				  -	      .byte	%10110000	; SYMBOLS
   1558  2e8d				  -	      .byte	%10110000	; SYMBOLS
   1559  2e8d				  -	      .byte	%10110000	; SYMBOLS
   1560  2e8d				  -	      .byte	%10110000	; SYMBOLS
   1561  2e8d				  -	      .byte	%00000000	; SYMBOLS
   1562  2e8d				  -
   1563  2e8d				  -			;byte %00000000 ; SYMBOLS
   1564  2e8d				  -
   1565  2e8d					      endif		; fontcharFUJI
   1566  2e8d
   1567  2e8d
   1568  2e8d				  -	      ifconst	fontcharHEART
   1569  2e8d				  -			;byte %00000000 ; SYMBOLS
   1570  2e8d				  -
   1571  2e8d				  -	      .byte	%00010000	; SYMBOLS
   1572  2e8d				  -	      .byte	%00111000	; SYMBOLS
   1573  2e8d				  -	      .byte	%01111100	; SYMBOLS
   1574  2e8d				  -	      .byte	%01111100	; SYMBOLS
   1575  2e8d				  -	      .byte	%11111110	; SYMBOLS
   1576  2e8d				  -	      .byte	%11111110	; SYMBOLS
   1577  2e8d				  -	      .byte	%11101110	; SYMBOLS
   1578  2e8d				  -	      .byte	%01000100	; SYMBOLS
   1579  2e8d				  -
   1580  2e8d				  -			;byte %00000000 ; SYMBOLS
   1581  2e8d				  -
   1582  2e8d					      endif		; fontcharHEART
   1583  2e8d
   1584  2e8d				  -	      ifconst	fontcharDIAMOND
   1585  2e8d				  -			;byte %00000000 ; SYMBOLS
   1586  2e8d				  -
   1587  2e8d				  -	      .byte	%00010000	; SYMBOLS
   1588  2e8d				  -	      .byte	%00111000	; SYMBOLS
   1589  2e8d				  -	      .byte	%01111100	; SYMBOLS
   1590  2e8d				  -	      .byte	%11111110	; SYMBOLS
   1591  2e8d				  -	      .byte	%11111110	; SYMBOLS
   1592  2e8d				  -	      .byte	%01111100	; SYMBOLS
   1593  2e8d				  -	      .byte	%00111000	; SYMBOLS
   1594  2e8d				  -	      .byte	%00010000	; SYMBOLS
   1595  2e8d				  -
   1596  2e8d				  -			;byte %00000000 ; SYMBOLS
   1597  2e8d				  -
   1598  2e8d					      endif		; fontcharDIAMOND
   1599  2e8d
   1600  2e8d				  -	      ifconst	fontcharSPADE
   1601  2e8d				  -			;byte %00000000 ; SYMBOLS
   1602  2e8d				  -
   1603  2e8d				  -	      .byte	%00111000	; SYMBOLS
   1604  2e8d				  -	      .byte	%00010000	; SYMBOLS
   1605  2e8d				  -	      .byte	%01010100	; SYMBOLS
   1606  2e8d				  -	      .byte	%11111110	; SYMBOLS
   1607  2e8d				  -	      .byte	%11111110	; SYMBOLS
   1608  2e8d				  -	      .byte	%01111100	; SYMBOLS
   1609  2e8d				  -	      .byte	%00111000	; SYMBOLS
   1610  2e8d				  -	      .byte	%00010000	; SYMBOLS
   1611  2e8d				  -
   1612  2e8d				  -			;byte %00000000 ; SYMBOLS
   1613  2e8d				  -
   1614  2e8d					      endif		; fontcharSPADE
   1615  2e8d
   1616  2e8d				  -	      ifconst	fontcharCLUB
   1617  2e8d				  -			;byte %00000000 ; SYMBOLS
   1618  2e8d				  -
   1619  2e8d				  -	      .byte	%00111000	; SYMBOLS
   1620  2e8d				  -	      .byte	%00010000	; SYMBOLS
   1621  2e8d				  -	      .byte	%11010110	; SYMBOLS
   1622  2e8d				  -	      .byte	%11111110	; SYMBOLS
   1623  2e8d				  -	      .byte	%11010110	; SYMBOLS
   1624  2e8d				  -	      .byte	%00111000	; SYMBOLS
   1625  2e8d				  -	      .byte	%00111000	; SYMBOLS
   1626  2e8d				  -	      .byte	%00000000	; SYMBOLS
   1627  2e8d				  -
   1628  2e8d				  -			;byte %00000000 ; SYMBOLS
   1629  2e8d				  -
   1630  2e8d					      endif		; fontcharCLUB
   1631  2e8d
   1632  2e8d
   1633  2e8d				  -	      ifconst	fontcharCOLON
   1634  2e8d				  -			;byte %00000000 ; SYMBOLS
   1635  2e8d				  -
   1636  2e8d				  -	      .byte	%00000000	; SYMBOLS
   1637  2e8d				  -	      .byte	%00011000	; SYMBOLS
   1638  2e8d				  -	      .byte	%00011000	; SYMBOLS
   1639  2e8d				  -	      .byte	%00000000	; SYMBOLS
   1640  2e8d				  -	      .byte	%00000000	; SYMBOLS
   1641  2e8d				  -	      .byte	%00011000	; SYMBOLS
   1642  2e8d				  -	      .byte	%00011000	; SYMBOLS
   1643  2e8d				  -	      .byte	%00000000	; SYMBOLS
   1644  2e8d				  -
   1645  2e8d				  -			;byte %00000000 ; SYMBOLS
   1646  2e8d				  -
   1647  2e8d					      endif		; fontcharCOLON
   1648  2e8d
   1649  2e8d
   1650  2e8d				  -	      ifconst	fontcharBLOCK
   1651  2e8d				  -
   1652  2e8d				  -			;byte %00000000 ; SYMBOLS
   1653  2e8d				  -
   1654  2e8d				  -	      .byte	%11111111	; SYMBOLS
   1655  2e8d				  -	      .byte	%11111111	; SYMBOLS
   1656  2e8d				  -	      .byte	%11111111	; SYMBOLS
   1657  2e8d				  -	      .byte	%11111111	; SYMBOLS
   1658  2e8d				  -	      .byte	%11111111	; SYMBOLS
   1659  2e8d				  -	      .byte	%11111111	; SYMBOLS
   1660  2e8d				  -	      .byte	%11111111	; SYMBOLS
   1661  2e8d				  -	      .byte	%11111111	; SYMBOLS
   1662  2e8d				  -
   1663  2e8d				  -			;byte %00000000 ; SYMBOLS
   1664  2e8d				  -
   1665  2e8d					      endif		; fontcharBLOCK
   1666  2e8d
   1667  2e8d				  -	      ifconst	fontcharUNDERLINE
   1668  2e8d				  -
   1669  2e8d				  -			;byte %00000000 ; SYMBOLS
   1670  2e8d				  -
   1671  2e8d				  -	      .byte	%11111111	; SYMBOLS
   1672  2e8d				  -	      .byte	%00000000	; SYMBOLS
   1673  2e8d				  -	      .byte	%00000000	; SYMBOLS
   1674  2e8d				  -	      .byte	%00000000	; SYMBOLS
   1675  2e8d				  -	      .byte	%00000000	; SYMBOLS
   1676  2e8d				  -	      .byte	%00000000	; SYMBOLS
   1677  2e8d				  -	      .byte	%00000000	; SYMBOLS
   1678  2e8d				  -	      .byte	%00000000	; SYMBOLS
   1679  2e8d				  -
   1680  2e8d				  -			;byte %00000000 ; SYMBOLS
   1681  2e8d				  -
   1682  2e8d					      endif		; fontcharUNDERLINE
   1683  2e8d
   1684  2e8d				  -	      ifconst	fontcharARISIDE
   1685  2e8d				  -			;byte %00000000 ; SYMBOLS
   1686  2e8d				  -
   1687  2e8d				  -	      .byte	%00000000	; SYMBOLS
   1688  2e8d				  -	      .byte	%00101010	; SYMBOLS
   1689  2e8d				  -	      .byte	%00101010	; SYMBOLS
   1690  2e8d				  -	      .byte	%00101100	; SYMBOLS
   1691  2e8d				  -	      .byte	%01111111	; SYMBOLS
   1692  2e8d				  -	      .byte	%00110111	; SYMBOLS
   1693  2e8d				  -	      .byte	%00000010	; SYMBOLS
   1694  2e8d				  -	      .byte	%00000001	; SYMBOLS
   1695  2e8d				  -
   1696  2e8d				  -			;byte %00000000 ; SYMBOLS
   1697  2e8d				  -
   1698  2e8d					      endif		; fontcharARISIDE
   1699  2e8d
   1700  2e8d				  -	      ifconst	fontcharARIFACE
   1701  2e8d				  -			;byte %00000000 ; SYMBOLS
   1702  2e8d				  -
   1703  2e8d				  -	      .byte	%00001000	; SYMBOLS
   1704  2e8d				  -	      .byte	%00011100	; SYMBOLS
   1705  2e8d				  -	      .byte	%00111110	; SYMBOLS
   1706  2e8d				  -	      .byte	%00101010	; SYMBOLS
   1707  2e8d				  -	      .byte	%00011100	; SYMBOLS
   1708  2e8d				  -	      .byte	%01010100	; SYMBOLS
   1709  2e8d				  -	      .byte	%00100100	; SYMBOLS
   1710  2e8d				  -	      .byte	%00000010	; SYMBOLS
   1711  2e8d				  -
   1712  2e8d				  -			;byte %00000000 ; SYMBOLS
   1713  2e8d				  -
   1714  2e8d				  -
   1715  2e8d					      endif		; fontcharARIRACE
   1716  2e8d
------- FILE titlescreen/asm/titlescreen.asm
    303  2e8d					      endif
    304  2e8d
    305  2e8d					      ifconst	mk_gameselect_on
------- FILE titlescreen/gameselect_image.asm LEVEL 3 PASS 3
      0  2e8d					      include	"titlescreen/gameselect_image.asm"
      1  2e8d				  -	      ifnconst	bmp_gameselect_color
      2  2e8d				  -bmp_gameselect_color
      3  2e8d					      endif
      4  2e8d		       0f		      .byte.b	$0f
      5  2e8e
      6  2e8e				  -	      if	>. != >[.+5]
      7  2e8e				  -	      align	256
      8  2e8e					      endif
      9  2e8e				   bmp_gameselect_CHAR0
     10  2e8e
     11  2e8e		       7a		      .byte.b	%01111010
     12  2e8f		       8a		      .byte.b	%10001010
     13  2e90		       bb		      .byte.b	%10111011
     14  2e91		       82		      .byte.b	%10000010
     15  2e92		       79		      .byte.b	%01111001
     16  2e93
     17  2e93				  -	      if	>. != >[.+5]
     18  2e93				  -	      align	256
     19  2e93					      endif
     20  2e93				   bmp_gameselect_CHAR1
     21  2e93
     22  2e93		       51		      .byte.b	%01010001
     23  2e94		       51		      .byte.b	%01010001
     24  2e95		       d5		      .byte.b	%11010101
     25  2e96		       5b		      .byte.b	%01011011
     26  2e97		       91		      .byte.b	%10010001
     27  2e98
     28  2e98				  -	      if	>. != >[.+5]
     29  2e98				  -	      align	256
     30  2e98					      endif
     31  2e98				   bmp_gameselect_CHAR2
     32  2e98		       78		      .byte.b	%01111000
     33  2e99		       40		      .byte.b	%01000000
     34  2e9a		       70		      .byte.b	%01110000
     35  2e9b		       40		      .byte.b	%01000000
     36  2e9c		       78		      .byte.b	%01111000
     37  2e9d
     38  2e9d				  -	      if	>. != >[.+5]
     39  2e9d				  -	      align	256
     40  2e9d					      endif
     41  2e9d				   bmp_gameselect_CHAR3
     42  2e9d		       00		      .byte.b	%00000000
     43  2e9e		       00		      .byte.b	%00000000
     44  2e9f		       00		      .byte.b	%00000000
     45  2ea0		       00		      .byte.b	%00000000
     46  2ea1		       00		      .byte.b	%00000000
     47  2ea2
     48  2ea2				  -	      if	>. != >[.+80]
     49  2ea2				  -	      align	256
     50  2ea2					      endif
     51  2ea2
     52  2ea2				   font_gameselect_img
     53  2ea2		       3c		      .byte.b	%00111100
     54  2ea3		       66		      .byte.b	%01100110
     55  2ea4		       66		      .byte.b	%01100110
     56  2ea5		       66		      .byte.b	%01100110
     57  2ea6		       3c		      .byte.b	%00111100
     58  2ea7
     59  2ea7		       3c		      .byte.b	%00111100
     60  2ea8		       18		      .byte.b	%00011000
     61  2ea9		       18		      .byte.b	%00011000
     62  2eaa		       18		      .byte.b	%00011000
     63  2eab		       38		      .byte.b	%00111000
     64  2eac
     65  2eac		       7e		      .byte.b	%01111110
     66  2ead		       60		      .byte.b	%01100000
     67  2eae		       3c		      .byte.b	%00111100
     68  2eaf		       06		      .byte.b	%00000110
     69  2eb0		       7c		      .byte.b	%01111100
     70  2eb1
     71  2eb1		       7c		      .byte.b	%01111100
     72  2eb2		       06		      .byte.b	%00000110
     73  2eb3		       1c		      .byte.b	%00011100
     74  2eb4		       06		      .byte.b	%00000110
     75  2eb5		       7c		      .byte.b	%01111100
     76  2eb6
     77  2eb6		       06		      .byte.b	%00000110
     78  2eb7		       06		      .byte.b	%00000110
     79  2eb8		       7e		      .byte.b	%01111110
     80  2eb9		       66		      .byte.b	%01100110
     81  2eba		       66		      .byte.b	%01100110
     82  2ebb
     83  2ebb		       7c		      .byte.b	%01111100
     84  2ebc		       06		      .byte.b	%00000110
     85  2ebd		       7c		      .byte.b	%01111100
     86  2ebe		       60		      .byte.b	%01100000
     87  2ebf		       7e		      .byte.b	%01111110
     88  2ec0
     89  2ec0		       3c		      .byte.b	%00111100
     90  2ec1		       66		      .byte.b	%01100110
     91  2ec2		       7c		      .byte.b	%01111100
     92  2ec3		       60		      .byte.b	%01100000
     93  2ec4		       3c		      .byte.b	%00111100
     94  2ec5
     95  2ec5		       18		      .byte.b	%00011000
     96  2ec6		       18		      .byte.b	%00011000
     97  2ec7		       0c		      .byte.b	%00001100
     98  2ec8		       06		      .byte.b	%00000110
     99  2ec9		       7e		      .byte.b	%01111110
    100  2eca
    101  2eca		       3c		      .byte.b	%00111100
    102  2ecb		       66		      .byte.b	%01100110
    103  2ecc		       3c		      .byte.b	%00111100
    104  2ecd		       66		      .byte.b	%01100110
    105  2ece		       3c		      .byte.b	%00111100
    106  2ecf
    107  2ecf		       3c		      .byte.b	%00111100
    108  2ed0		       06		      .byte.b	%00000110
    109  2ed1		       3e		      .byte.b	%00111110
    110  2ed2		       66		      .byte.b	%01100110
    111  2ed3		       3c		      .byte.b	%00111100
    112  2ed4
    113  2ed4				  -	      ifnconst	gamenumber
    114  2ed4				  -gamenumber
    115  2ed4					      endif
    116  2ed4		       00		      .byte.b	0
    117  2ed5
------- FILE titlescreen/asm/titlescreen.asm
    307  2ed5					      endif
    308  2ed5
    309  2ed5				  -	      ifconst	mk_player_on
    310  2ed5				  -	      include	"titlescreen/asm/player_kernel.asm"
    311  2ed5					      endif		;mk_player_on
    312  2ed5
    313  2ed5
------- FILE d:\Firmaplus\Firmaplus_intern\Atari\PlusROM\Projekte-batariBasic\CaveApocalypse\C.A.V.E. Apocalypse.bas.asm
   6277  2ed5
   6278  2ed5				   .
   6279  2ed5							; 
   6280  2ed5
   6281  2ed5				   .L0524		;  asm
   6282  2ed5
   6283  2ed5				   minikernel
   6284  2ed5
   6285  2ed5		       85 02		      sta	WSYNC
   6286  2ed7
   6287  2ed7		       a5 08		      lda	scback
   6288  2ed9
   6289  2ed9		       85 09		      sta	COLUBK
   6290  2edb
   6291  2edb		       60		      rts
   6292  2edc
   6293  2edc				  -	      if	(<*) > (<(*+7))
   6294  2edc				  -	      repeat	($100-<*)
   6295  2edc				  -	      .byte	0
   6296  2edc				  -	      repend
   6297  2edc					      endif
   6298  2edc				   playercolorL0260_1
   6299  2edc		       1e		      .byte.b	_1E
   6300  2edd		       82		      .byte.b	_82
   6301  2ede		       84		      .byte.b	_84
   6302  2edf		       46		      .byte.b	_46
   6303  2ee0		       44		      .byte.b	_44
   6304  2ee1		       42		      .byte.b	_42
   6305  2ee2		       12		      .byte.b	_12
   6306  2ee3		       08		      .byte.b	_08
   6307  2ee4				  -	      if	(<*) > (<(*+7))
   6308  2ee4				  -	      repeat	($100-<*)
   6309  2ee4				  -	      .byte	0
   6310  2ee4				  -	      repend
   6311  2ee4					      endif
   6312  2ee4				   player12then_1
   6313  2ee4		       1b		      .byte.b	%00011011
   6314  2ee5		       0e		      .byte.b	%00001110
   6315  2ee6		       1f		      .byte.b	%00011111
   6316  2ee7		       bd		      .byte.b	%10111101
   6317  2ee8		       f9		      .byte.b	%11111001
   6318  2ee9		       9e		      .byte.b	%10011110
   6319  2eea		       08		      .byte.b	%00001000
   6320  2eeb		       7c		      .byte.b	%01111100
   6321  2eec				  -	      if	(<*) > (<(*+7))
   6322  2eec				  -	      repeat	($100-<*)
   6323  2eec				  -	      .byte	0
   6324  2eec				  -	      repend
   6325  2eec					      endif
   6326  2eec				   player13then_1
   6327  2eec		       1b		      .byte.b	%00011011
   6328  2eed		       0e		      .byte.b	%00001110
   6329  2eee		       1f		      .byte.b	%00011111
   6330  2eef		       bd		      .byte.b	%10111101
   6331  2ef0		       f9		      .byte.b	%11111001
   6332  2ef1		       9e		      .byte.b	%10011110
   6333  2ef2		       08		      .byte.b	%00001000
   6334  2ef3		       1f		      .byte.b	%00011111
   6335  2ef4				  -	      if	(<*) > (<(*+6))
   6336  2ef4				  -	      repeat	($100-<*)
   6337  2ef4				  -	      .byte	0
   6338  2ef4				  -	      repend
   6339  2ef4					      endif
   6340  2ef4				   player14then_0
   6341  2ef4		       55		      .byte.b	%01010101
   6342  2ef5		       aa		      .byte.b	%10101010
   6343  2ef6		       ff		      .byte.b	%11111111
   6344  2ef7		       3c		      .byte.b	%00111100
   6345  2ef8		       18		      .byte.b	%00011000
   6346  2ef9		       08		      .byte.b	%00001000
   6347  2efa		       04		      .byte.b	%00000100
   6348  2efb					      if	(<*) > (<(*+6))
   6349  2efb					      repeat	($100-<*)
   6350  2efb		       00		      .byte.b	0
   6349  2efb					      repend
   6350  2efc		       00		      .byte.b	0
   6349  2efc					      repend
   6350  2efd		       00		      .byte.b	0
   6349  2efd					      repend
   6350  2efe		       00		      .byte.b	0
   6349  2efe					      repend
   6350  2eff		       00		      .byte.b	0
   6351  2f00					      repend
   6352  2f00					      endif
   6353  2f00				   player15then_0
   6354  2f00		       aa		      .byte.b	%10101010
   6355  2f01		       55		      .byte.b	%01010101
   6356  2f02		       ff		      .byte.b	%11111111
   6357  2f03		       3c		      .byte.b	%00111100
   6358  2f04		       18		      .byte.b	%00011000
   6359  2f05		       08		      .byte.b	%00001000
   6360  2f06		       04		      .byte.b	%00000100
   6361  2f07				  -	      if	(<*) > (<(*+11))
   6362  2f07				  -	      repeat	($100-<*)
   6363  2f07				  -	      .byte	0
   6364  2f07				  -	      repend
   6365  2f07					      endif
   6366  2f07				   playerL0297_0
   6367  2f07		       a0		      .byte.b	%10100000
   6368  2f08		       40		      .byte.b	%01000000
   6369  2f09		       e0		      .byte.b	%11100000
   6370  2f0a		       a0		      .byte.b	%10100000
   6371  2f0b		       40		      .byte.b	%01000000
   6372  2f0c		       00		      .byte.b	%00000000
   6373  2f0d		       00		      .byte.b	%00000000
   6374  2f0e		       05		      .byte.b	%00000101
   6375  2f0f		       02		      .byte.b	%00000010
   6376  2f10		       07		      .byte.b	%00000111
   6377  2f11		       05		      .byte.b	%00000101
   6378  2f12		       02		      .byte.b	%00000010
   6379  2f13				  -	      if	(<*) > (<(*+24))
   6380  2f13				  -	      repeat	($100-<*)
   6381  2f13				  -	      .byte	0
   6382  2f13				  -	      repend
   6383  2f13					      endif
   6384  2f13				   playerL0299_0
   6385  2f13		       3c		      .byte.b	%00111100
   6386  2f14		       20		      .byte.b	%00100000
   6387  2f15		       20		      .byte.b	%00100000
   6388  2f16		       20		      .byte.b	%00100000
   6389  2f17		       20		      .byte.b	%00100000
   6390  2f18		       00		      .byte.b	%00000000
   6391  2f19		       3c		      .byte.b	%00111100
   6392  2f1a		       20		      .byte.b	%00100000
   6393  2f1b		       38		      .byte.b	%00111000
   6394  2f1c		       20		      .byte.b	%00100000
   6395  2f1d		       3c		      .byte.b	%00111100
   6396  2f1e		       00		      .byte.b	%00000000
   6397  2f1f		       18		      .byte.b	%00011000
   6398  2f20		       24		      .byte.b	%00100100
   6399  2f21		       24		      .byte.b	%00100100
   6400  2f22		       24		      .byte.b	%00100100
   6401  2f23		       24		      .byte.b	%00100100
   6402  2f24		       00		      .byte.b	%00000000
   6403  2f25		       20		      .byte.b	%00100000
   6404  2f26		       20		      .byte.b	%00100000
   6405  2f27		       38		      .byte.b	%00111000
   6406  2f28		       20		      .byte.b	%00100000
   6407  2f29		       bd		      .byte.b	%10111101
   6408  2f2a		       81		      .byte.b	%10000001
   6409  2f2b		       ff		      .byte.b	%11111111
   6410  2f2c				  -	      if	(<*) > (<(*+3))
   6411  2f2c				  -	      repeat	($100-<*)
   6412  2f2c				  -	      .byte	0
   6413  2f2c				  -	      repend
   6414  2f2c					      endif
   6415  2f2c				   player16then_0
   6416  2f2c		       a6		      .byte.b	%10100110
   6417  2f2d		       42		      .byte.b	%01000010
   6418  2f2e		       63		      .byte.b	%01100011
   6419  2f2f		       42		      .byte.b	%01000010
   6420  2f30				  -	      if	(<*) > (<(*+3))
   6421  2f30				  -	      repeat	($100-<*)
   6422  2f30				  -	      .byte	0
   6423  2f30				  -	      repend
   6424  2f30					      endif
   6425  2f30				   player17then_0
   6426  2f30		       c5		      .byte.b	%11000101
   6427  2f31		       42		      .byte.b	%01000010
   6428  2f32		       63		      .byte.b	%01100011
   6429  2f33		       42		      .byte.b	%01000010
   6430  2f34					      if	ECHOFIRST
      61 bytes of ROM space left in bank 2
   6431  2f34					      echo	"    ",[(scoretable - *)]d , "bytes of ROM space left in bank 2")
   6432  2f34					      endif
   6433  2f34		       00 01	   ECHOFIRST  =	1
   6434  2f34
   6435  2f34
   6436  2f34							; Provided under the CC0 license. See the included LICENSE.txt for details.
   6437  2f34
   6438  2f34							; feel free to modify the score graphics - just keep each digit 8 high
   6439  2f34							; and keep the conditional compilation stuff intact
   6440  2f34				  -	      ifconst	ROM2k
   6441  2f34				  -	      ifconst	PlusROM_functions
   6442  2f34				  -	      ORG	$F7AC-16
   6443  2f34				  -	      else
   6444  2f34				  -	      ORG	$F7AC-8
   6445  2f34				  -	      endif
   6446  2f34					      else
   6447  2f34					      ifconst	bankswitch
   6448  2f34					      if	bankswitch == 8
   6449  2f71					      ORG	$2F94-bscode_length
   6450  2f71					      RORG	$FF94-bscode_length
   6451  2f71					      endif
   6452  2f71				  -	      if	bankswitch == 16
   6453  2f71				  -	      ORG	$4F94-bscode_length
   6454  2f71				  -	      RORG	$FF94-bscode_length
   6455  2f71					      endif
   6456  2f71				  -	      if	bankswitch == 32
   6457  2f71				  -	      ORG	$8F94-bscode_length
   6458  2f71				  -	      RORG	$FF94-bscode_length
   6459  2f71					      endif
   6460  2f71				  -	      if	bankswitch == 64
   6461  2f71				  -	      ORG	$10F80-bscode_length
   6462  2f71				  -	      RORG	$1FF80-bscode_length
   6463  2f71					      endif
   6464  2f71				  -	      else
   6465  2f71				  -	      ifconst	PlusROM_functions
   6466  2f71				  -	      ORG	$FF98
   6467  2f71				  -	      else
   6468  2f71				  -	      ORG	$FF9C
   6469  2f71				  -	      endif
   6470  2f71					      endif
   6471  2f71					      endif
   6472  2f71
   6473  2f71							; font equates
   6474  2f71		       00 01	   .21stcentury =	1
   6475  2f71		       00 02	   alarmclock =	2
   6476  2f71		       00 03	   handwritten =	3
   6477  2f71		       00 04	   interrupted =	4
   6478  2f71		       00 05	   retroputer =	5
   6479  2f71		       00 06	   whimsey    =	6
   6480  2f71		       00 07	   tiny       =	7
   6481  2f71		       00 08	   hex	      =	8
   6482  2f71
   6483  2f71				  -	      ifconst	font
   6484  2f71				  -	      if	font == hex
   6485  2f71				  -	      ORG	. - 48
   6486  2f71				  -	      endif
   6487  2f71					      endif
   6488  2f71
   6489  2f71				   scoretable
   6490  2f71
   6491  2f71				  -	      ifconst	font
   6492  2f71				  -	      if	font == .21stcentury
   6493  2f71				  -	      include	"score_graphics.asm.21stcentury"
   6494  2f71				  -	      endif
   6495  2f71				  -	      if	font == alarmclock
   6496  2f71				  -	      include	"score_graphics.asm.alarmclock"
   6497  2f71				  -	      endif
   6498  2f71				  -	      if	font == handwritten
   6499  2f71				  -	      include	"score_graphics.asm.handwritten"
   6500  2f71				  -	      endif
   6501  2f71				  -	      if	font == interrupted
   6502  2f71				  -	      include	"score_graphics.asm.interrupted"
   6503  2f71				  -	      endif
   6504  2f71				  -	      if	font == retroputer
   6505  2f71				  -	      include	"score_graphics.asm.retroputer"
   6506  2f71				  -	      endif
   6507  2f71				  -	      if	font == whimsey
   6508  2f71				  -	      include	"score_graphics.asm.whimsey"
   6509  2f71				  -	      endif
   6510  2f71				  -	      if	font == tiny
   6511  2f71				  -	      include	"score_graphics.asm.tiny"
   6512  2f71				  -	      endif
   6513  2f71				  -	      if	font == hex
   6514  2f71				  -	      include	"score_graphics.asm.hex"
   6515  2f71				  -	      endif
   6516  2f71					      else		; default font
   6517  2f71
   6518  2f71		       3c		      .byte.b	%00111100
   6519  2f72		       66		      .byte.b	%01100110
   6520  2f73		       66		      .byte.b	%01100110
   6521  2f74		       66		      .byte.b	%01100110
   6522  2f75		       66		      .byte.b	%01100110
   6523  2f76		       66		      .byte.b	%01100110
   6524  2f77		       66		      .byte.b	%01100110
   6525  2f78		       3c		      .byte.b	%00111100
   6526  2f79
   6527  2f79		       7e		      .byte.b	%01111110
   6528  2f7a		       18		      .byte.b	%00011000
   6529  2f7b		       18		      .byte.b	%00011000
   6530  2f7c		       18		      .byte.b	%00011000
   6531  2f7d		       18		      .byte.b	%00011000
   6532  2f7e		       38		      .byte.b	%00111000
   6533  2f7f		       18		      .byte.b	%00011000
   6534  2f80		       08		      .byte.b	%00001000
   6535  2f81
   6536  2f81		       7e		      .byte.b	%01111110
   6537  2f82		       60		      .byte.b	%01100000
   6538  2f83		       60		      .byte.b	%01100000
   6539  2f84		       3c		      .byte.b	%00111100
   6540  2f85		       06		      .byte.b	%00000110
   6541  2f86		       06		      .byte.b	%00000110
   6542  2f87		       46		      .byte.b	%01000110
   6543  2f88		       3c		      .byte.b	%00111100
   6544  2f89
   6545  2f89		       3c		      .byte.b	%00111100
   6546  2f8a		       46		      .byte.b	%01000110
   6547  2f8b		       06		      .byte.b	%00000110
   6548  2f8c		       06		      .byte.b	%00000110
   6549  2f8d		       1c		      .byte.b	%00011100
   6550  2f8e		       06		      .byte.b	%00000110
   6551  2f8f		       46		      .byte.b	%01000110
   6552  2f90		       3c		      .byte.b	%00111100
   6553  2f91
   6554  2f91		       0c		      .byte.b	%00001100
   6555  2f92		       0c		      .byte.b	%00001100
   6556  2f93		       7e		      .byte.b	%01111110
   6557  2f94		       4c		      .byte.b	%01001100
   6558  2f95		       4c		      .byte.b	%01001100
   6559  2f96		       2c		      .byte.b	%00101100
   6560  2f97		       1c		      .byte.b	%00011100
   6561  2f98		       0c		      .byte.b	%00001100
   6562  2f99
   6563  2f99		       3c		      .byte.b	%00111100
   6564  2f9a		       46		      .byte.b	%01000110
   6565  2f9b		       06		      .byte.b	%00000110
   6566  2f9c		       06		      .byte.b	%00000110
   6567  2f9d		       3c		      .byte.b	%00111100
   6568  2f9e		       60		      .byte.b	%01100000
   6569  2f9f		       60		      .byte.b	%01100000
   6570  2fa0		       7e		      .byte.b	%01111110
   6571  2fa1
   6572  2fa1		       3c		      .byte.b	%00111100
   6573  2fa2		       66		      .byte.b	%01100110
   6574  2fa3		       66		      .byte.b	%01100110
   6575  2fa4		       66		      .byte.b	%01100110
   6576  2fa5		       7c		      .byte.b	%01111100
   6577  2fa6		       60		      .byte.b	%01100000
   6578  2fa7		       62		      .byte.b	%01100010
   6579  2fa8		       3c		      .byte.b	%00111100
   6580  2fa9
   6581  2fa9		       30		      .byte.b	%00110000
   6582  2faa		       30		      .byte.b	%00110000
   6583  2fab		       30		      .byte.b	%00110000
   6584  2fac		       18		      .byte.b	%00011000
   6585  2fad		       0c		      .byte.b	%00001100
   6586  2fae		       06		      .byte.b	%00000110
   6587  2faf		       42		      .byte.b	%01000010
   6588  2fb0		       3e		      .byte.b	%00111110
   6589  2fb1
   6590  2fb1		       3c		      .byte.b	%00111100
   6591  2fb2		       66		      .byte.b	%01100110
   6592  2fb3		       66		      .byte.b	%01100110
   6593  2fb4		       66		      .byte.b	%01100110
   6594  2fb5		       3c		      .byte.b	%00111100
   6595  2fb6		       66		      .byte.b	%01100110
   6596  2fb7		       66		      .byte.b	%01100110
   6597  2fb8		       3c		      .byte.b	%00111100
   6598  2fb9
   6599  2fb9		       3c		      .byte.b	%00111100
   6600  2fba		       46		      .byte.b	%01000110
   6601  2fbb		       06		      .byte.b	%00000110
   6602  2fbc		       3e		      .byte.b	%00111110
   6603  2fbd		       66		      .byte.b	%01100110
   6604  2fbe		       66		      .byte.b	%01100110
   6605  2fbf		       66		      .byte.b	%01100110
   6606  2fc0		       3c		      .byte.b	%00111100
   6607  2fc1
   6608  2fc1					      ifnconst	DPC_kernel_options
   6609  2fc1
   6610  2fc1		       00		      .byte.b	%00000000
   6611  2fc2		       00		      .byte.b	%00000000
   6612  2fc3		       00		      .byte.b	%00000000
   6613  2fc4		       00		      .byte.b	%00000000
   6614  2fc5		       00		      .byte.b	%00000000
   6615  2fc6		       00		      .byte.b	%00000000
   6616  2fc7		       00		      .byte.b	%00000000
   6617  2fc8		       00		      .byte.b	%00000000
   6618  2fc9
   6619  2fc9					      endif
   6620  2fc9
   6621  2fc9					      endif
   6622  2fc9
   6623  2fc9				  -	      ifconst	ROM2k
   6624  2fc9				  -	      ifconst	PlusROM_functions
   6625  2fc9				  -	      ORG	$F7F0
   6626  2fc9				  -	      .byte	0	; WriteToBuffer
   6627  2fc9				  -	      .byte	0	; WriteSendBuffer
   6628  2fc9				  -	      .byte	0	; ReceiveBuffer
   6629  2fc9				  -	      .byte	$ff	; ReceiveBufferSize (none zero for detection of PlusROM support)
   6630  2fc9				  -	      ORG	$F7FA
   6631  2fc9				  -	      else
   6632  2fc9				  -	      ORG	$F7FC
   6633  2fc9				  -	      endif
   6634  2fc9					      else
   6635  2fc9					      ifconst	bankswitch
   6636  2fc9					      if	bankswitch == 8
   6637  2fd1					      ORG	$2FF4-bscode_length
   6638  2fd1					      RORG	$FFF4-bscode_length
   6639  2fd1					      endif
   6640  2fd1				  -	      if	bankswitch == 16
   6641  2fd1				  -	      ORG	$4FF4-bscode_length
   6642  2fd1				  -	      RORG	$FFF4-bscode_length
   6643  2fd1					      endif
   6644  2fd1				  -	      if	bankswitch == 32
   6645  2fd1				  -	      ORG	$8FF4-bscode_length
   6646  2fd1				  -	      RORG	$FFF4-bscode_length
   6647  2fd1					      endif
   6648  2fd1				  -	      if	bankswitch == 64
   6649  2fd1				  -	      ORG	$10FE0-bscode_length
   6650  2fd1				  -	      RORG	$1FFE0-bscode_length
   6651  2fd1					      endif
   6652  2fd1				  -	      else
   6653  2fd1				  -	      ifconst	PlusROM_functions
   6654  2fd1				  -	      ORG	$FFF0
   6655  2fd1				  -	      .byte	0	; WriteToBuffer
   6656  2fd1				  -	      .byte	0	; WriteSendBuffer
   6657  2fd1				  -	      .byte	0	; ReceiveBuffer
   6658  2fd1				  -	      .byte	$ff	; ReceiveBufferSize (none zero for detection of PlusROM support)
   6659  2fd1				  -	      ORG	$FFFA
   6660  2fd1				  -	      else
   6661  2fd1				  -	      ORG	$FFFC
   6662  2fd1				  -	      endif
   6663  2fd1					      endif
   6664  2fd1					      endif
   6665  2fd1							; Provided under the CC0 license. See the included LICENSE.txt for details.
   6666  2fd1
   6667  2fd1							; every bank has this stuff at the same place
   6668  2fd1							; this code can switch to/from any bank at any entry point
   6669  2fd1							; and can preserve register values
   6670  2fd1							; note: lines not starting with a space are not placed in all banks
   6671  2fd1							;
   6672  2fd1							; line below tells the compiler how long this is - do not remove
   6673  2fd1							;size=35
   6674  2fd1
   6675  2fd1				   begin_bscode
   6676  2fd1		       a2 ff		      ldx	#$ff
   6677  2fd3				  -	      ifconst	FASTFETCH	; using DPC+
   6678  2fd3				  -	      stx	FASTFETCH
   6679  2fd3					      endif
   6680  2fd3		       9a		      txs
   6681  2fd4				  -	      if	bankswitch == 64
   6682  2fd4				  -	      lda	#(((>(start-1)) & $0F) | $F0)
   6683  2fd4					      else
   6684  2fd4		       a9 f3		      lda	#>(start-1)
   6685  2fd6					      endif
   6686  2fd6		       48		      pha
   6687  2fd7		       a9 51		      lda	#<(start-1)
   6688  2fd9		       48		      pha
   6689  2fda
   6690  2fda				   BS_return
   6691  2fda		       48		      pha
   6692  2fdb		       8a		      txa
   6693  2fdc		       48		      pha
   6694  2fdd		       ba		      tsx
   6695  2fde
   6696  2fde					      if	bankswitch != 64
   6697  2fde		       b5 04		      lda	4,x	; get high byte of return address
   6698  2fe0
   6699  2fe0		       2a		      rol
   6700  2fe1		       2a		      rol
   6701  2fe2		       2a		      rol
   6702  2fe3		       2a		      rol
   6703  2fe4		       29 01		      and	#bs_mask	;1 3 or 7 for F8/F6/F4
   6704  2fe6		       aa		      tax
   6705  2fe7		       e8		      inx
   6706  2fe8				  -	      else
   6707  2fe8				  -	      lda	4,x	; get high byte of return address
   6708  2fe8				  -	      tay
   6709  2fe8				  -	      ora	#$10	; change our bank nibble into a valid rom mirror
   6710  2fe8				  -	      sta	4,x
   6711  2fe8				  -	      tya
   6712  2fe8				  -	      lsr
   6713  2fe8				  -	      lsr
   6714  2fe8				  -	      lsr
   6715  2fe8				  -	      lsr
   6716  2fe8				  -	      tax
   6717  2fe8				  -	      inx
   6718  2fe8					      endif
   6719  2fe8
   6720  2fe8				   BS_jsr
   6721  2fe8		       bd f7 1f 	      lda	bankswitch_hotspot-1,x
   6722  2feb		       68		      pla
   6723  2fec		       aa		      tax
   6724  2fed		       68		      pla
   6725  2fee		       60		      rts
   6726  2fef				  -	      if	((* & $1FFF) > ((bankswitch_hotspot & $1FFF) - 1))
   6727  2fef				  -	      echo	"WARNING: size parameter in banksw.asm too small - the program probably will not work."
   6728  2fef				  -	      echo	"Change to",[(*-begin_bscode+1)&$FF]d,"and try again."
   6729  2fef					      endif
   6730  2fef							; Provided under the CC0 license. See the included LICENSE.txt for details.
   6731  2fef
   6732  2fef					      ifconst	bankswitch
   6733  2fef					      if	bankswitch == 8
   6734  2fef					      ifconst	PlusROM_functions
   6735  2ff0					      ORG	$2FF0
   6736  2ff0					      RORG	$FFF0
   6737  2ff0		       00		      .byte.b	0	; WriteToBuffer
   6738  2ff1		       00		      .byte.b	0	; WriteSendBuffer
   6739  2ff2		       00		      .byte.b	0	; ReceiveBuffer
   6740  2ff3		       ff		      .byte.b	$ff	; ReceiveBufferSize (none zero for detection of PlusROM support)
   6741  2ffa					      ORG	$2FFA
   6742  2ffa					      RORG	$FFFA
   6743  2ffa		       c7 1c		      .word.w	(PlusROM_API-$C000)
   6744  2ffc				  -	      else
   6745  2ffc				  -	      ORG	$2FFC
   6746  2ffc				  -	      RORG	$FFFC
   6747  2ffc					      endif
   6748  2ffc					      endif
   6749  2ffc				  -	      if	bankswitch == 16
   6750  2ffc				  -	      ifconst	PlusROM_functions
   6751  2ffc				  -	      ORG	$4FF0
   6752  2ffc				  -	      RORG	$FFF0
   6753  2ffc				  -	      .byte	0	; WriteToBuffer
   6754  2ffc				  -	      .byte	0	; WriteSendBuffer
   6755  2ffc				  -	      .byte	0	; ReceiveBuffer
   6756  2ffc				  -	      .byte	$ff	; ReceiveBufferSize (none zero for detection of PlusROM support)
   6757  2ffc				  -	      ORG	$4FFA
   6758  2ffc				  -	      RORG	$FFFA
   6759  2ffc				  -	      .word	(PlusROM_API-$9000)
   6760  2ffc				  -	      else
   6761  2ffc				  -	      ORG	$4FFC
   6762  2ffc				  -	      RORG	$FFFC
   6763  2ffc				  -	      endif
   6764  2ffc					      endif
   6765  2ffc				  -	      if	bankswitch == 32
   6766  2ffc				  -	      ifconst	PlusROM_functions
   6767  2ffc				  -	      ORG	$8FF0
   6768  2ffc				  -	      RORG	$FFF0
   6769  2ffc				  -	      .byte	0	; WriteToBuffer
   6770  2ffc				  -	      .byte	0	; WriteSendBuffer
   6771  2ffc				  -	      .byte	0	; ReceiveBuffer
   6772  2ffc				  -	      .byte	$ff	; ReceiveBufferSize (none zero for detection of PlusROM support)
   6773  2ffc				  -	      ORG	$8FFA
   6774  2ffc				  -	      RORG	$FFFA
   6775  2ffc				  -	      .word	(PlusROM_API-$5000)
   6776  2ffc				  -	      else
   6777  2ffc				  -	      ORG	$8FFC
   6778  2ffc				  -	      RORG	$FFFC
   6779  2ffc				  -	      endif
   6780  2ffc					      endif
   6781  2ffc				  -	      if	bankswitch == 64
   6782  2ffc				  -	      ORG	$10FF0
   6783  2ffc				  -	      RORG	$1FFF0
   6784  2ffc				  -	      lda	$ffe0	; we use wasted space to assist stella with EF format auto-detection
   6785  2ffc				  -	      ORG	$10FF8
   6786  2ffc				  -	      RORG	$1FFF8
   6787  2ffc				  -	      ifconst	superchip
   6788  2ffc				  -	      .byte	"E","F","S","C"
   6789  2ffc				  -	      else
   6790  2ffc				  -	      .byte	"E","F","E","F"
   6791  2ffc				  -	      endif
   6792  2ffc				  -	      ORG	$10FFC
   6793  2ffc				  -	      RORG	$1FFFC
   6794  2ffc					      endif
   6795  2ffc				  -	      else
   6796  2ffc				  -	      ifconst	ROM2k
   6797  2ffc				  -	      ifconst	PlusROM_functions
   6798  2ffc				  -	      ORG	$F7FA
   6799  2ffc				  -	      .word	(PlusROM_API-$E000)
   6800  2ffc				  -	      else
   6801  2ffc				  -	      ORG	$F7FC
   6802  2ffc				  -	      endif
   6803  2ffc				  -	      else
   6804  2ffc				  -	      ifconst	PlusROM_functions
   6805  2ffc				  -	      ORG	$FFFA
   6806  2ffc				  -	      .word	(PlusROM_API-$E000)
   6807  2ffc				  -	      else
   6808  2ffc				  -	      ORG	$FFFC
   6809  2ffc				  -	      endif
   6810  2ffc				  -	      endif
   6811  2ffc					      endif
   6812  2ffc		       52 f3		      .word.w	(start & $ffff)
   6813  2ffe		       52 f3		      .word.w	(start & $ffff)
