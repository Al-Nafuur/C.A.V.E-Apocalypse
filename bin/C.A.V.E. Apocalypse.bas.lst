------- FILE d:\Firmaplus\Firmaplus_intern\Atari\PlusROM\Projekte-batariBasic\CaveApocalypse\C.A.V.E. Apocalypse.bas.asm LEVEL 1 PASS 3
      1  3000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  3000 ????
      3  3000 ????				      processor	6502
------- FILE vcs.h LEVEL 2 PASS 3
      0  3000 ????				      include	"vcs.h"
      1  3000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  3000 ????
      3  3000 ????						; VCS.H
      4  3000 ????						; Version 1.05, 13/November/2003
      5  3000 ????
      6  3000 ????	       00 69	   VERSION_VCS =	105
      7  3000 ????
      8  3000 ????						; THIS IS A PRELIMINARY RELEASE OF *THE* "STANDARD" VCS.H
      9  3000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
     10  3000 ????						; PLEASE DO *NOT* REDISTRIBUTE THIS FILE!
     11  3000 ????						;
     12  3000 ????						; This file defines hardware registers and memory mapping for the
     13  3000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     14  3000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     15  3000 ????						; available at at http://www.atari2600.org/dasm
     16  3000 ????						;
     17  3000 ????						; Many thanks to the original author(s) of this file, and to everyone who has
     18  3000 ????						; contributed to understanding the Atari 2600.  If you take issue with the
     19  3000 ????						; contents, or naming of registers, please write to me (atari2600@taswegian.com)
     20  3000 ????						; with your views.  Please contribute, if you think you can improve this
     21  3000 ????						; file!
     22  3000 ????						;
     23  3000 ????						; Latest Revisions...
     24  3000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     25  3000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     26  3000 ????						;			    This will allow conditional code to verify VCS.H being
     27  3000 ????						;			    used for code assembly.
     28  3000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     29  3000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     30  3000 ????						;			 mirrored reading/writing differences.	This is more a 
     31  3000 ????						;			 readability issue, and binary compatibility with disassembled
     32  3000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     33  3000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     34  3000 ????						;			 which was broken by the use of segments in this file, as
     35  3000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     36  3000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     37  3000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     38  3000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     39  3000 ????						;						   it is safe to leave it undefined, and the base address will
     40  3000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     41  3000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     42  3000 ????						;			  - register definitions are now generated through assignment
     43  3000 ????						;			    in uninitialised segments.	This allows a changeable base
     44  3000 ????						;			    address architecture.
     45  3000 ????						; 1.0	22/MAR/2003		Initial release
     46  3000 ????
     47  3000 ????
     48  3000 ????						;-------------------------------------------------------------------------------
     49  3000 ????
     50  3000 ????						; TIA_BASE_ADDRESS
     51  3000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     52  3000 ????						; Normally 0, the base address should (externally, before including this file)
     53  3000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     54  3000 ????						; The reason is that this bankswitching scheme treats any access to locations
     55  3000 ????						; < $40 as a bankswitch.
     56  3000 ????
     57  3000 ????			  -	      IFNCONST	TIA_BASE_ADDRESS
     58  3000 ????			  -TIA_BASE_ADDRESS =	0
     59  3000 ????				      ENDIF
     60  3000 ????
     61  3000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     62  3000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     63  3000 ????						; *OR* by declaring the label before including this file, eg:
     64  3000 ????						; TIA_BASE_ADDRESS = $40
     65  3000 ????						;   include "vcs.h"
     66  3000 ????
     67  3000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     68  3000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     69  3000 ????						; for the mirrored ROM hardware registers.
     70  3000 ????
     71  3000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     72  3000 ????						; using the -D command-line switch, as required.  If the addresses are not defined, 
     73  3000 ????						; they defaut to the TIA_BASE_ADDRESS.
     74  3000 ????
     75  3000 ????			  -	      IFNCONST	TIA_BASE_READ_ADDRESS
     76  3000 ????			  -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     77  3000 ????				      ENDIF
     78  3000 ????
     79  3000 ????			  -	      IFNCONST	TIA_BASE_WRITE_ADDRESS
     80  3000 ????			  -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     81  3000 ????				      ENDIF
     82  3000 ????
     83  3000 ????						;-------------------------------------------------------------------------------
     84  3000 ????
     85 U002d ????				      SEG.U	TIA_REGISTERS_WRITE
     86 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     87 U0000
     88 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     89 U0000
     90 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     91 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     92 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     93 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     94 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     95 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     96 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     97 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     98 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     99 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
    100 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
    101 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    102 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    103 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    104 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    105 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    106 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    107 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    108 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    109 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    110 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    111 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    112 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    113 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    114 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    115 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    116 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    117 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    118 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    119 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    120 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    121 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    122 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    123 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    124 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    125 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    126 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    127 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    128 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    129 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    130 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    131 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    132 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    133 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    134 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    135 U002d
    136 U002d							;-------------------------------------------------------------------------------
    137 U002d
    138 U000e ????				      SEG.U	TIA_REGISTERS_READ
    139 U0000					      ORG	TIA_BASE_READ_ADDRESS
    140 U0000
    141 U0000							;											bit 7	 bit 6
    142 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    143 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    144 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    145 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    146 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    147 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    148 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    149 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    150 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    151 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    152 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    153 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    154 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    155 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    156 U000e
    157 U000e							;-------------------------------------------------------------------------------
    158 U000e
    159 U0298 ????				      SEG.U	RIOT
    160 U0280					      ORG	$280
    161 U0280
    162 U0280							; RIOT MEMORY MAP
    163 U0280
    164 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    165 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    166 U0281
    167 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    168 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    169 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    170 U0284		       00	   INTIM      ds	1	; $284		Timer output
    171 U0285
    172 U0285		       00	   TIMINT     ds	1	; $285
    173 U0286
    174 U0286							; Unused/undefined registers ($285-$294)
    175 U0286
    176 U0286		       00		      ds	1	; $286
    177 U0287		       00		      ds	1	; $287
    178 U0288		       00		      ds	1	; $288
    179 U0289		       00		      ds	1	; $289
    180 U028a		       00		      ds	1	; $28A
    181 U028b		       00		      ds	1	; $28B
    182 U028c		       00		      ds	1	; $28C
    183 U028d		       00		      ds	1	; $28D
    184 U028e		       00		      ds	1	; $28E
    185 U028f		       00		      ds	1	; $28F
    186 U0290		       00		      ds	1	; $290
    187 U0291		       00		      ds	1	; $291
    188 U0292		       00		      ds	1	; $292
    189 U0293		       00		      ds	1	; $293
    190 U0294
    191 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    192 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    193 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    194 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    195 U0298
    196 U0298							;-------------------------------------------------------------------------------
    197 U0298							; The following required for back-compatibility with code which does not use
    198 U0298							; segments.
    199 U0298
    200  3000 ????				      SEG
    201  3000 ????
    202  3000 ????						; EOF
------- FILE d:\Firmaplus\Firmaplus_intern\Atari\PlusROM\Projekte-batariBasic\CaveApocalypse\C.A.V.E. Apocalypse.bas.asm
------- FILE macro.h LEVEL 2 PASS 3
      0  3000 ????				      include	"macro.h"
      1  3000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  3000 ????
      3  3000 ????						; MACRO.H
      4  3000 ????						; Version 1.05, 13/NOVEMBER/2003
      5  3000 ????
      6  3000 ????	       00 69	   VERSION_MACRO =	105
      7  3000 ????
      8  3000 ????						;
      9  3000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
     10  3000 ????						; PLEASE DO *NOT* REDISTRIBUTE MODIFIED VERSIONS OF THIS FILE!
     11  3000 ????						;
     12  3000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     13  3000 ????						; It is distributed as a companion machine-specific support package
     14  3000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     15  3000 ????						; available at at http://www.atari2600.org/dasm
     16  3000 ????						;
     17  3000 ????						; Many thanks to the people who have contributed.  If you take issue with the
     18  3000 ????						; contents, or would like to add something, please write to me
     19  3000 ????						; (atari2600@taswegian.com) with your contribution.
     20  3000 ????						;
     21  3000 ????						; Latest Revisions...
     22  3000 ????						;
     23  3000 ????						; 1.05  14/NOV/2003	  - Added VERSION_MACRO equate (which will reflect 100x version #)
     24  3000 ????						;			    This will allow conditional code to verify MACRO.H being
     25  3000 ????						;			    used for code assembly.
     26  3000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     27  3000 ????						;
     28  3000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     29  3000 ????						;
     30  3000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     31  3000 ????						;			   (standardised macro for vertical synch code)
     32  3000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added. 
     33  3000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     34  3000 ????						; 1.0	22/MAR/2003		Initial release
     35  3000 ????
     36  3000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage, 
     37  3000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     38  3000 ????						;   If you do not allow illegal opcode usage, you must include this file 
     39  3000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     40  3000 ????						;   registers and require them to be defined first).
     41  3000 ????
     42  3000 ????						; Available macros...
     43  3000 ????						;   SLEEP n		 - sleep for n cycles
     44  3000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     45  3000 ????						;   CLEAN_START	 - set machine to known state on startup
     46  3000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     47  3000 ????
     48  3000 ????						;-------------------------------------------------------------------------------
     49  3000 ????						; SLEEP duration
     50  3000 ????						; Original author: Thomas Jentzsch
     51  3000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     52  3000 ????						; useful for code where precise timing is required.
     53  3000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     54  3000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     55  3000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     56  3000 ????
     57  3000 ????				      MAC	sleep
     58  3000 ????			   .CYCLES    SET	{1}
     59  3000 ????
     60  3000 ????				      IF	.CYCLES < 2
     61  3000 ????				      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     62  3000 ????				      ERR
     63  3000 ????				      ENDIF
     64  3000 ????
     65  3000 ????				      IF	.CYCLES & 1
     66  3000 ????				      IFNCONST	NO_ILLEGAL_OPCODES
     67  3000 ????				      nop	0
     68  3000 ????				      ELSE
     69  3000 ????				      bit	VSYNC
     70  3000 ????				      ENDIF
     71  3000 ????			   .CYCLES    SET	.CYCLES - 3
     72  3000 ????				      ENDIF
     73  3000 ????
     74  3000 ????				      REPEAT	.CYCLES / 2
     75  3000 ????				      nop
     76  3000 ????				      REPEND
     77  3000 ????				      ENDM		;usage: SLEEP n (n>1)
     78  3000 ????
     79  3000 ????						;-------------------------------------------------------------------------------
     80  3000 ????						; VERTICAL_SYNC
     81  3000 ????						; Original author: Manuel Polik
     82  3000 ????						; Inserts the code required for a proper 3 scannline 
     83  3000 ????						; vertical sync sequence
     84  3000 ????						;
     85  3000 ????						; Note: Alters the accumulator
     86  3000 ????						;
     87  3000 ????						; IN:
     88  3000 ????						; OUT: A = 1
     89  3000 ????
     90  3000 ????				      MAC	vertical_sync
     91  3000 ????				      LDA	#$02	; A = VSYNC enable
     92  3000 ????				      STA	WSYNC	; Finish current line
     93  3000 ????				      STA	VSYNC	; Start vertical sync
     94  3000 ????				      STA	WSYNC	; 1st line vertical sync
     95  3000 ????				      STA	WSYNC	; 2nd line vertical sync
     96  3000 ????				      LSR		; A = VSYNC disable
     97  3000 ????				      STA	WSYNC	; 3rd line vertical sync
     98  3000 ????				      STA	VSYNC	; Stop vertical sync
     99  3000 ????				      ENDM
    100  3000 ????
    101  3000 ????						;-------------------------------------------------------------------------------
    102  3000 ????						; CLEAN_START
    103  3000 ????						; Original author: Andrew Davie
    104  3000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
    105  3000 ????						; Sets stack pointer to $FF, and all registers to 0
    106  3000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    107  3000 ????						; Use as very first section of code on boot (ie: at reset)
    108  3000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    109  3000 ????
    110  3000 ????				      MAC	clean_start
    111  3000 ????				      sei
    112  3000 ????				      cld
    113  3000 ????
    114  3000 ????				      ldx	#0
    115  3000 ????				      txa
    116  3000 ????				      tay
    117  3000 ????			   .CLEAR_STACK dex
    118  3000 ????				      txs
    119  3000 ????				      pha
    120  3000 ????				      bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    121  3000 ????
    122  3000 ????				      ENDM
    123  3000 ????
    124  3000 ????						;-------------------------------------------------------
    125  3000 ????						; SET_POINTER
    126  3000 ????						; Original author: Manuel Rotschkar
    127  3000 ????						;
    128  3000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    129  3000 ????						;
    130  3000 ????						; Usage: SET_POINTER pointer, address
    131  3000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    132  3000 ????						;
    133  3000 ????						; Note: Alters the accumulator, NZ flags
    134  3000 ????						; IN 1: 2 byte RAM location reserved for pointer
    135  3000 ????						; IN 2: absolute address
    136  3000 ????
    137  3000 ????				      MAC	set_pointer
    138  3000 ????			   .POINTER   SET	{1}
    139  3000 ????			   .ADDRESS   SET	{2}
    140  3000 ????
    141  3000 ????				      LDA	#<.ADDRESS	; Get Lowbyte of Address
    142  3000 ????				      STA	.POINTER	; Store in pointer
    143  3000 ????				      LDA	#>.ADDRESS	; Get Hibyte of Address
    144  3000 ????				      STA	.POINTER+1	; Store in pointer+1
    145  3000 ????
    146  3000 ????				      ENDM
    147  3000 ????
    148  3000 ????						; EOF
------- FILE d:\Firmaplus\Firmaplus_intern\Atari\PlusROM\Projekte-batariBasic\CaveApocalypse\C.A.V.E. Apocalypse.bas.asm
------- FILE 2600basic.h LEVEL 2 PASS 3
      0  3000 ????				      include	"2600basic.h"
      1  3000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  3000 ????
      3  3000 ????				      processor	6502
------- FILE vcs.h LEVEL 3 PASS 3
      0  3000 ????				      include	"vcs.h"
      1  3000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  3000 ????
      3  3000 ????						; VCS.H
      4  3000 ????						; Version 1.05, 13/November/2003
      5  3000 ????
      6  3000 ????	       00 69	   VERSION_VCS =	105
      7  3000 ????
      8  3000 ????						; THIS IS A PRELIMINARY RELEASE OF *THE* "STANDARD" VCS.H
      9  3000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
     10  3000 ????						; PLEASE DO *NOT* REDISTRIBUTE THIS FILE!
     11  3000 ????						;
     12  3000 ????						; This file defines hardware registers and memory mapping for the
     13  3000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     14  3000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     15  3000 ????						; available at at http://www.atari2600.org/dasm
     16  3000 ????						;
     17  3000 ????						; Many thanks to the original author(s) of this file, and to everyone who has
     18  3000 ????						; contributed to understanding the Atari 2600.  If you take issue with the
     19  3000 ????						; contents, or naming of registers, please write to me (atari2600@taswegian.com)
     20  3000 ????						; with your views.  Please contribute, if you think you can improve this
     21  3000 ????						; file!
     22  3000 ????						;
     23  3000 ????						; Latest Revisions...
     24  3000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     25  3000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     26  3000 ????						;			    This will allow conditional code to verify VCS.H being
     27  3000 ????						;			    used for code assembly.
     28  3000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     29  3000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     30  3000 ????						;			 mirrored reading/writing differences.	This is more a 
     31  3000 ????						;			 readability issue, and binary compatibility with disassembled
     32  3000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     33  3000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     34  3000 ????						;			 which was broken by the use of segments in this file, as
     35  3000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     36  3000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     37  3000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     38  3000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     39  3000 ????						;						   it is safe to leave it undefined, and the base address will
     40  3000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     41  3000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     42  3000 ????						;			  - register definitions are now generated through assignment
     43  3000 ????						;			    in uninitialised segments.	This allows a changeable base
     44  3000 ????						;			    address architecture.
     45  3000 ????						; 1.0	22/MAR/2003		Initial release
     46  3000 ????
     47  3000 ????
     48  3000 ????						;-------------------------------------------------------------------------------
     49  3000 ????
     50  3000 ????						; TIA_BASE_ADDRESS
     51  3000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     52  3000 ????						; Normally 0, the base address should (externally, before including this file)
     53  3000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     54  3000 ????						; The reason is that this bankswitching scheme treats any access to locations
     55  3000 ????						; < $40 as a bankswitch.
     56  3000 ????
     57  3000 ????			  -	      IFNCONST	TIA_BASE_ADDRESS
     58  3000 ????			  -TIA_BASE_ADDRESS =	0
     59  3000 ????				      ENDIF
     60  3000 ????
     61  3000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     62  3000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     63  3000 ????						; *OR* by declaring the label before including this file, eg:
     64  3000 ????						; TIA_BASE_ADDRESS = $40
     65  3000 ????						;   include "vcs.h"
     66  3000 ????
     67  3000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     68  3000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     69  3000 ????						; for the mirrored ROM hardware registers.
     70  3000 ????
     71  3000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     72  3000 ????						; using the -D command-line switch, as required.  If the addresses are not defined, 
     73  3000 ????						; they defaut to the TIA_BASE_ADDRESS.
     74  3000 ????
     75  3000 ????			  -	      IFNCONST	TIA_BASE_READ_ADDRESS
     76  3000 ????			  -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     77  3000 ????				      ENDIF
     78  3000 ????
     79  3000 ????			  -	      IFNCONST	TIA_BASE_WRITE_ADDRESS
     80  3000 ????			  -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     81  3000 ????				      ENDIF
     82  3000 ????
     83  3000 ????						;-------------------------------------------------------------------------------
     84  3000 ????
     85 U002d					      SEG.U	TIA_REGISTERS_WRITE
     86 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     87 U0000
     88 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     89 U0000
     90 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     91 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     92 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     93 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     94 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     95 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     96 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     97 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     98 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     99 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
    100 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
    101 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    102 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    103 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    104 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    105 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    106 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    107 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    108 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    109 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    110 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    111 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    112 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    113 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    114 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    115 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    116 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    117 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    118 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    119 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    120 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    121 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    122 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    123 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    124 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    125 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    126 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    127 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    128 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    129 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    130 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    131 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    132 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    133 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    134 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    135 U002d
    136 U002d							;-------------------------------------------------------------------------------
    137 U002d
    138 U000e					      SEG.U	TIA_REGISTERS_READ
    139 U0000					      ORG	TIA_BASE_READ_ADDRESS
    140 U0000
    141 U0000							;											bit 7	 bit 6
    142 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    143 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    144 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    145 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    146 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    147 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    148 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    149 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    150 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    151 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    152 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    153 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    154 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    155 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    156 U000e
    157 U000e							;-------------------------------------------------------------------------------
    158 U000e
    159 U0298					      SEG.U	RIOT
    160 U0280					      ORG	$280
    161 U0280
    162 U0280							; RIOT MEMORY MAP
    163 U0280
    164 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    165 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    166 U0281
    167 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    168 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    169 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    170 U0284		       00	   INTIM      ds	1	; $284		Timer output
    171 U0285
    172 U0285		       00	   TIMINT     ds	1	; $285
    173 U0286
    174 U0286							; Unused/undefined registers ($285-$294)
    175 U0286
    176 U0286		       00		      ds	1	; $286
    177 U0287		       00		      ds	1	; $287
    178 U0288		       00		      ds	1	; $288
    179 U0289		       00		      ds	1	; $289
    180 U028a		       00		      ds	1	; $28A
    181 U028b		       00		      ds	1	; $28B
    182 U028c		       00		      ds	1	; $28C
    183 U028d		       00		      ds	1	; $28D
    184 U028e		       00		      ds	1	; $28E
    185 U028f		       00		      ds	1	; $28F
    186 U0290		       00		      ds	1	; $290
    187 U0291		       00		      ds	1	; $291
    188 U0292		       00		      ds	1	; $292
    189 U0293		       00		      ds	1	; $293
    190 U0294
    191 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    192 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    193 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    194 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    195 U0298
    196 U0298							;-------------------------------------------------------------------------------
    197 U0298							; The following required for back-compatibility with code which does not use
    198 U0298							; segments.
    199 U0298
    200  3000 ????				      SEG
    201  3000 ????
    202  3000 ????						; EOF
------- FILE 2600basic.h
------- FILE macro.h LEVEL 3 PASS 3
      0  3000 ????				      include	"macro.h"
      1  3000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  3000 ????
      3  3000 ????						; MACRO.H
      4  3000 ????						; Version 1.05, 13/NOVEMBER/2003
      5  3000 ????
      6  3000 ????	       00 69	   VERSION_MACRO =	105
      7  3000 ????
      8  3000 ????						;
      9  3000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
     10  3000 ????						; PLEASE DO *NOT* REDISTRIBUTE MODIFIED VERSIONS OF THIS FILE!
     11  3000 ????						;
     12  3000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     13  3000 ????						; It is distributed as a companion machine-specific support package
     14  3000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     15  3000 ????						; available at at http://www.atari2600.org/dasm
     16  3000 ????						;
     17  3000 ????						; Many thanks to the people who have contributed.  If you take issue with the
     18  3000 ????						; contents, or would like to add something, please write to me
     19  3000 ????						; (atari2600@taswegian.com) with your contribution.
     20  3000 ????						;
     21  3000 ????						; Latest Revisions...
     22  3000 ????						;
     23  3000 ????						; 1.05  14/NOV/2003	  - Added VERSION_MACRO equate (which will reflect 100x version #)
     24  3000 ????						;			    This will allow conditional code to verify MACRO.H being
     25  3000 ????						;			    used for code assembly.
     26  3000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     27  3000 ????						;
     28  3000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     29  3000 ????						;
     30  3000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     31  3000 ????						;			   (standardised macro for vertical synch code)
     32  3000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added. 
     33  3000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     34  3000 ????						; 1.0	22/MAR/2003		Initial release
     35  3000 ????
     36  3000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage, 
     37  3000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     38  3000 ????						;   If you do not allow illegal opcode usage, you must include this file 
     39  3000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     40  3000 ????						;   registers and require them to be defined first).
     41  3000 ????
     42  3000 ????						; Available macros...
     43  3000 ????						;   SLEEP n		 - sleep for n cycles
     44  3000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     45  3000 ????						;   CLEAN_START	 - set machine to known state on startup
     46  3000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     47  3000 ????
     48  3000 ????						;-------------------------------------------------------------------------------
     49  3000 ????						; SLEEP duration
     50  3000 ????						; Original author: Thomas Jentzsch
     51  3000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     52  3000 ????						; useful for code where precise timing is required.
     53  3000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     54  3000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     55  3000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     56  3000 ????
     57  3000 ????				      MAC	sleep
     58  3000 ????			   .CYCLES    SET	{1}
     59  3000 ????
     60  3000 ????				      IF	.CYCLES < 2
     61  3000 ????				      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     62  3000 ????				      ERR
     63  3000 ????				      ENDIF
     64  3000 ????
     65  3000 ????				      IF	.CYCLES & 1
     66  3000 ????				      IFNCONST	NO_ILLEGAL_OPCODES
     67  3000 ????				      nop	0
     68  3000 ????				      ELSE
     69  3000 ????				      bit	VSYNC
     70  3000 ????				      ENDIF
     71  3000 ????			   .CYCLES    SET	.CYCLES - 3
     72  3000 ????				      ENDIF
     73  3000 ????
     74  3000 ????				      REPEAT	.CYCLES / 2
     75  3000 ????				      nop
     76  3000 ????				      REPEND
     77  3000 ????				      ENDM		;usage: SLEEP n (n>1)
     78  3000 ????
     79  3000 ????						;-------------------------------------------------------------------------------
     80  3000 ????						; VERTICAL_SYNC
     81  3000 ????						; Original author: Manuel Polik
     82  3000 ????						; Inserts the code required for a proper 3 scannline 
     83  3000 ????						; vertical sync sequence
     84  3000 ????						;
     85  3000 ????						; Note: Alters the accumulator
     86  3000 ????						;
     87  3000 ????						; IN:
     88  3000 ????						; OUT: A = 1
     89  3000 ????
     90  3000 ????				      MAC	vertical_sync
     91  3000 ????				      LDA	#$02	; A = VSYNC enable
     92  3000 ????				      STA	WSYNC	; Finish current line
     93  3000 ????				      STA	VSYNC	; Start vertical sync
     94  3000 ????				      STA	WSYNC	; 1st line vertical sync
     95  3000 ????				      STA	WSYNC	; 2nd line vertical sync
     96  3000 ????				      LSR		; A = VSYNC disable
     97  3000 ????				      STA	WSYNC	; 3rd line vertical sync
     98  3000 ????				      STA	VSYNC	; Stop vertical sync
     99  3000 ????				      ENDM
    100  3000 ????
    101  3000 ????						;-------------------------------------------------------------------------------
    102  3000 ????						; CLEAN_START
    103  3000 ????						; Original author: Andrew Davie
    104  3000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
    105  3000 ????						; Sets stack pointer to $FF, and all registers to 0
    106  3000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    107  3000 ????						; Use as very first section of code on boot (ie: at reset)
    108  3000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    109  3000 ????
    110  3000 ????				      MAC	clean_start
    111  3000 ????				      sei
    112  3000 ????				      cld
    113  3000 ????
    114  3000 ????				      ldx	#0
    115  3000 ????				      txa
    116  3000 ????				      tay
    117  3000 ????			   .CLEAR_STACK dex
    118  3000 ????				      txs
    119  3000 ????				      pha
    120  3000 ????				      bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    121  3000 ????
    122  3000 ????				      ENDM
    123  3000 ????
    124  3000 ????						;-------------------------------------------------------
    125  3000 ????						; SET_POINTER
    126  3000 ????						; Original author: Manuel Rotschkar
    127  3000 ????						;
    128  3000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    129  3000 ????						;
    130  3000 ????						; Usage: SET_POINTER pointer, address
    131  3000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    132  3000 ????						;
    133  3000 ????						; Note: Alters the accumulator, NZ flags
    134  3000 ????						; IN 1: 2 byte RAM location reserved for pointer
    135  3000 ????						; IN 2: absolute address
    136  3000 ????
    137  3000 ????				      MAC	set_pointer
    138  3000 ????			   .POINTER   SET	{1}
    139  3000 ????			   .ADDRESS   SET	{2}
    140  3000 ????
    141  3000 ????				      LDA	#<.ADDRESS	; Get Lowbyte of Address
    142  3000 ????				      STA	.POINTER	; Store in pointer
    143  3000 ????				      LDA	#>.ADDRESS	; Get Hibyte of Address
    144  3000 ????				      STA	.POINTER+1	; Store in pointer+1
    145  3000 ????
    146  3000 ????				      ENDM
    147  3000 ????
    148  3000 ????						; EOF
------- FILE 2600basic.h
------- FILE 2600basic_variable_redefs.h LEVEL 3 PASS 3
      0  3000 ????				      include	"2600basic_variable_redefs.h"
      1  3000 ????						; This file contains variable mapping and other information for the current project.
      2  3000 ????
      3  3000 ????	       00 23	   bscode_length =	35
      4  3000 ????	       00 1d	   _SD_Touch_Enemy_length =	.skipL0401-_SD_Touch_Enemy
      5  3000 ????
      6  3000 ????	       00 21	   _SD_Shoot_Enemy_length =	.skipL0400-_SD_Shoot_Enemy
      7  3000 ????
      8  3000 ????	       00 45	   _SD_Shoot_Miss_length =	.skipL0399-_SD_Shoot_Miss
      9  3000 ????
     10  3000 ????	       00 35	   _SD_Shot_Wall_length =	.skipL0398-_SD_Shot_Wall
     11  3000 ????
     12  3000 ????	       f0 64	   w_room_definition_start =	w100
     13  3000 ????
     14  3000 ????	       f0 64	   w_room_color_top =	w100
     15  3000 ????
     16  3000 ????	       f0 e4	   r_room_color_top =	r100
     17  3000 ????
     18  3000 ????	       f0 65	   w_room_color_middle =	w101
     19  3000 ????
     20  3000 ????	       f0 e5	   r_room_color_middle =	r101
     21  3000 ????
     22  3000 ????	       f0 69	   w_room_color_bottom =	w105
     23  3000 ????
     24  3000 ????	       f0 e9	   r_room_color_bottom =	r105
     25  3000 ????
     26  3000 ????	       f0 6a	   w_roommate_type_and_range =	w106
     27  3000 ????
     28  3000 ????	       f0 ea	   r_roommate_type_and_range =	r106
     29  3000 ????
     30  3000 ????	       f0 6b	   w_roommate_y_startpos =	w107
     31  3000 ????
     32  3000 ????	       f0 eb	   r_roommate_y_startpos =	r107
     33  3000 ????
     34  3000 ????	       f0 6c	   w_roommate_x_startpos =	w108
     35  3000 ????
     36  3000 ????	       f0 ec	   r_roommate_x_startpos =	r108
     37  3000 ????
     38  3000 ????	       f0 6d	   w_extra_wall_width =	w109
     39  3000 ????
     40  3000 ????	       f0 ed	   r_extra_wall_width =	r109
     41  3000 ????
     42  3000 ????	       f0 6e	   w_extra_wall_type =	w110
     43  3000 ????
     44  3000 ????	       f0 ee	   r_extra_wall_type =	r110
     45  3000 ????
     46  3000 ????	       f0 6f	   w_extra_wall_startpos =	w111
     47  3000 ????
     48  3000 ????	       f0 ef	   r_extra_wall_startpos =	r111
     49  3000 ????
     50  3000 ????	       00 ec	   _Bit7_M0_Moving =	y
     51  3000 ????
     52  3000 ????	       00 ec	   _Bit6_Flip_P0 =	y
     53  3000 ????
     54  3000 ????	       00 ec	   _Bit1_Wall_Dir =	y
     55  3000 ????
     56  3000 ????	       00 ec	   _Bit0_roommate_Dir =	y
     57  3000 ????
     58  3000 ????	       00 ec	   _BitOp_misc =	y
     59  3000 ????
     60  3000 ????	       00 86	   P1y_position =	player1y
     61  3000 ????	       00 e9	   P1y_velocity =	v
     62  3000 ????	       00 91	   M0y_position =	missile0y
     63  3000 ????	       00 e6	   M0y_velocity =	s
     64  3000 ????	       00 df	   roommate_type =	l
     65  3000 ????
     66  3000 ????	       00 de	   roommate_move_x =	k
     67  3000 ????
     68  3000 ????	       00 dd	   extra_wall_move_x =	j
     69  3000 ????
     70  3000 ????	       00 dc	   _Ch0_Counter =	i
     71  3000 ????
     72  3000 ????	       00 db	   _Ch0_Duration =	h
     73  3000 ????
     74  3000 ????	       00 da	   _Ch0_Sound =	g
     75  3000 ????
     76  3000 ????	       00 d9	   P1_facing  =	f
     77  3000 ????
     78  3000 ????	       00 d8	   _Bit3_P1_Dir_Right =	e
     79  3000 ????
     80  3000 ????	       00 d8	   _Bit2_P1_Dir_Left =	e
     81  3000 ????
     82  3000 ????	       00 d8	   _Bit1_P1_Dir_Down =	e
     83  3000 ????
     84  3000 ????	       00 d8	   _Bit0_P1_Dir_Up =	e
     85  3000 ????
     86  3000 ????	       00 d8	   _BitOp_P1_Dir =	e
     87  3000 ????
     88  3000 ????	       00 d7	   _Bit3_M0_Dir_Right =	d
     89  3000 ????
     90  3000 ????	       00 d7	   _Bit2_M0_Dir_Left =	d
     91  3000 ????
     92  3000 ????	       00 d7	   _Bit1_M0_Dir_Down =	d
     93  3000 ????
     94  3000 ????	       00 d7	   _Bit0_M0_Dir_Up =	d
     95  3000 ????
     96  3000 ????	       00 d7	   _BitOp_M0_Dir =	d
     97  3000 ????
     98  3000 ????	       00 d6	   frame_counter =	c
     99  3000 ????
    100  3000 ????	       00 d5	   delay_counter =	b
    101  3000 ????
    102  3000 ????	       00 d4	   request_pending =	a
    103  3000 ????
    104  3000 ????	       00 95	   _sc3       =	score + 2
    105  3000 ????
    106  3000 ????	       00 94	   _sc2       =	score + 1
    107  3000 ????
    108  3000 ????	       00 93	   _sc1       =	score
    109  3000 ????
    110  3000 ????	       00 fe	   _FE	      =	$FE
    111  3000 ????
    112  3000 ????	       00 fc	   _FC	      =	$FC
    113  3000 ????
    114  3000 ????	       00 fa	   _FA	      =	$FA
    115  3000 ????
    116  3000 ????	       00 f8	   _F8	      =	$F8
    117  3000 ????
    118  3000 ????	       00 f6	   _F6	      =	$F6
    119  3000 ????
    120  3000 ????	       00 f4	   _F4	      =	$F4
    121  3000 ????
    122  3000 ????	       00 f2	   _F2	      =	$F2
    123  3000 ????
    124  3000 ????	       00 f0	   _F0	      =	$F0
    125  3000 ????
    126  3000 ????	       00 ee	   _EE	      =	$EE
    127  3000 ????
    128  3000 ????	       00 ec	   _EC	      =	$EC
    129  3000 ????
    130  3000 ????	       00 ea	   _EA	      =	$EA
    131  3000 ????
    132  3000 ????	       00 e8	   _E8	      =	$E8
    133  3000 ????
    134  3000 ????	       00 e6	   _E6	      =	$E6
    135  3000 ????
    136  3000 ????	       00 e4	   _E4	      =	$E4
    137  3000 ????
    138  3000 ????	       00 e2	   _E2	      =	$E2
    139  3000 ????
    140  3000 ????	       00 e0	   _E0	      =	$E0
    141  3000 ????
    142  3000 ????	       00 de	   _DE	      =	$DE
    143  3000 ????
    144  3000 ????	       00 dc	   _DC	      =	$DC
    145  3000 ????
    146  3000 ????	       00 da	   _DA	      =	$DA
    147  3000 ????
    148  3000 ????	       00 d8	   _D8	      =	$D8
    149  3000 ????
    150  3000 ????	       00 d6	   _D6	      =	$D6
    151  3000 ????
    152  3000 ????	       00 d4	   _D4	      =	$D4
    153  3000 ????
    154  3000 ????	       00 d2	   _D2	      =	$D2
    155  3000 ????
    156  3000 ????	       00 d0	   _D0	      =	$D0
    157  3000 ????
    158  3000 ????	       00 ce	   _CE	      =	$CE
    159  3000 ????
    160  3000 ????	       00 cc	   _CC	      =	$CC
    161  3000 ????
    162  3000 ????	       00 ca	   _CA	      =	$CA
    163  3000 ????
    164  3000 ????	       00 c8	   _C8	      =	$C8
    165  3000 ????
    166  3000 ????	       00 c6	   _C6	      =	$C6
    167  3000 ????
    168  3000 ????	       00 c4	   _C4	      =	$C4
    169  3000 ????
    170  3000 ????	       00 c2	   _C2	      =	$C2
    171  3000 ????
    172  3000 ????	       00 c0	   _C0	      =	$C0
    173  3000 ????
    174  3000 ????	       00 be	   _BE	      =	$BE
    175  3000 ????
    176  3000 ????	       00 bc	   _BC	      =	$BC
    177  3000 ????
    178  3000 ????	       00 ba	   _BA	      =	$BA
    179  3000 ????
    180  3000 ????	       00 b8	   _B8	      =	$B8
    181  3000 ????
    182  3000 ????	       00 b6	   _B6	      =	$B6
    183  3000 ????
    184  3000 ????	       00 b4	   _B4	      =	$B4
    185  3000 ????
    186  3000 ????	       00 b2	   _B2	      =	$B2
    187  3000 ????
    188  3000 ????	       00 b0	   _B0	      =	$B0
    189  3000 ????
    190  3000 ????	       00 ae	   _AE	      =	$AE
    191  3000 ????
    192  3000 ????	       00 ac	   _AC	      =	$AC
    193  3000 ????
    194  3000 ????	       00 aa	   _AA	      =	$AA
    195  3000 ????
    196  3000 ????	       00 a8	   _A8	      =	$A8
    197  3000 ????
    198  3000 ????	       00 a6	   _A6	      =	$A6
    199  3000 ????
    200  3000 ????	       00 a4	   _A4	      =	$A4
    201  3000 ????
    202  3000 ????	       00 a2	   _A2	      =	$A2
    203  3000 ????
    204  3000 ????	       00 a0	   _A0	      =	$A0
    205  3000 ????
    206  3000 ????	       00 9e	   _9E	      =	$9E
    207  3000 ????
    208  3000 ????	       00 9c	   _9C	      =	$9C
    209  3000 ????
    210  3000 ????	       00 9a	   _9A	      =	$9A
    211  3000 ????
    212  3000 ????	       00 98	   _98	      =	$98
    213  3000 ????
    214  3000 ????	       00 96	   _96	      =	$96
    215  3000 ????
    216  3000 ????	       00 94	   _94	      =	$94
    217  3000 ????
    218  3000 ????	       00 92	   _92	      =	$92
    219  3000 ????
    220  3000 ????	       00 90	   _90	      =	$90
    221  3000 ????
    222  3000 ????	       00 8e	   _8E	      =	$8E
    223  3000 ????
    224  3000 ????	       00 8c	   _8C	      =	$8C
    225  3000 ????
    226  3000 ????	       00 8a	   _8A	      =	$8A
    227  3000 ????
    228  3000 ????	       00 88	   _88	      =	$88
    229  3000 ????
    230  3000 ????	       00 86	   _86	      =	$86
    231  3000 ????
    232  3000 ????	       00 84	   _84	      =	$84
    233  3000 ????
    234  3000 ????	       00 82	   _82	      =	$82
    235  3000 ????
    236  3000 ????	       00 80	   _80	      =	$80
    237  3000 ????
    238  3000 ????	       00 7e	   _7E	      =	$7E
    239  3000 ????
    240  3000 ????	       00 7c	   _7C	      =	$7C
    241  3000 ????
    242  3000 ????	       00 7a	   _7A	      =	$7A
    243  3000 ????
    244  3000 ????	       00 78	   _78	      =	$78
    245  3000 ????
    246  3000 ????	       00 76	   _76	      =	$76
    247  3000 ????
    248  3000 ????	       00 74	   _74	      =	$74
    249  3000 ????
    250  3000 ????	       00 72	   _72	      =	$72
    251  3000 ????
    252  3000 ????	       00 70	   _70	      =	$70
    253  3000 ????
    254  3000 ????	       00 6e	   _6E	      =	$6E
    255  3000 ????
    256  3000 ????	       00 6c	   _6C	      =	$6C
    257  3000 ????
    258  3000 ????	       00 6a	   _6A	      =	$6A
    259  3000 ????
    260  3000 ????	       00 68	   _68	      =	$68
    261  3000 ????
    262  3000 ????	       00 66	   _66	      =	$66
    263  3000 ????
    264  3000 ????	       00 64	   _64	      =	$64
    265  3000 ????
    266  3000 ????	       00 62	   _62	      =	$62
    267  3000 ????
    268  3000 ????	       00 60	   _60	      =	$60
    269  3000 ????
    270  3000 ????	       00 5e	   _5E	      =	$5E
    271  3000 ????
    272  3000 ????	       00 5c	   _5C	      =	$5C
    273  3000 ????
    274  3000 ????	       00 5a	   _5A	      =	$5A
    275  3000 ????
    276  3000 ????	       00 58	   _58	      =	$58
    277  3000 ????
    278  3000 ????	       00 56	   _56	      =	$56
    279  3000 ????
    280  3000 ????	       00 54	   _54	      =	$54
    281  3000 ????
    282  3000 ????	       00 52	   _52	      =	$52
    283  3000 ????
    284  3000 ????	       00 50	   _50	      =	$50
    285  3000 ????
    286  3000 ????	       00 4e	   _4E	      =	$4E
    287  3000 ????
    288  3000 ????	       00 4c	   _4C	      =	$4C
    289  3000 ????
    290  3000 ????	       00 4a	   _4A	      =	$4A
    291  3000 ????
    292  3000 ????	       00 48	   _48	      =	$48
    293  3000 ????
    294  3000 ????	       00 46	   _46	      =	$46
    295  3000 ????
    296  3000 ????	       00 44	   _44	      =	$44
    297  3000 ????
    298  3000 ????	       00 42	   _42	      =	$42
    299  3000 ????
    300  3000 ????	       00 40	   _40	      =	$40
    301  3000 ????
    302  3000 ????	       00 3e	   _3E	      =	$3E
    303  3000 ????
    304  3000 ????	       00 3c	   _3C	      =	$3C
    305  3000 ????
    306  3000 ????	       00 3a	   _3A	      =	$3A
    307  3000 ????
    308  3000 ????	       00 38	   _38	      =	$38
    309  3000 ????
    310  3000 ????	       00 36	   _36	      =	$36
    311  3000 ????
    312  3000 ????	       00 34	   _34	      =	$34
    313  3000 ????
    314  3000 ????	       00 32	   _32	      =	$32
    315  3000 ????
    316  3000 ????	       00 30	   _30	      =	$30
    317  3000 ????
    318  3000 ????	       00 2e	   _2E	      =	$2E
    319  3000 ????
    320  3000 ????	       00 2c	   _2C	      =	$2C
    321  3000 ????
    322  3000 ????	       00 2a	   _2A	      =	$2A
    323  3000 ????
    324  3000 ????	       00 28	   _28	      =	$28
    325  3000 ????
    326  3000 ????	       00 26	   _26	      =	$26
    327  3000 ????
    328  3000 ????	       00 24	   _24	      =	$24
    329  3000 ????
    330  3000 ????	       00 22	   _22	      =	$22
    331  3000 ????
    332  3000 ????	       00 20	   _20	      =	$20
    333  3000 ????
    334  3000 ????	       00 1e	   _1E	      =	$1E
    335  3000 ????
    336  3000 ????	       00 1c	   _1C	      =	$1C
    337  3000 ????
    338  3000 ????	       00 1a	   _1A	      =	$1A
    339  3000 ????
    340  3000 ????	       00 18	   _18	      =	$18
    341  3000 ????
    342  3000 ????	       00 16	   _16	      =	$16
    343  3000 ????
    344  3000 ????	       00 14	   _14	      =	$14
    345  3000 ????
    346  3000 ????	       00 12	   _12	      =	$12
    347  3000 ????
    348  3000 ????	       00 10	   _10	      =	$10
    349  3000 ????
    350  3000 ????	       00 0e	   _0E	      =	$0E
    351  3000 ????
    352  3000 ????	       00 0c	   _0C	      =	$0C
    353  3000 ????
    354  3000 ????	       00 0a	   _0A	      =	$0A
    355  3000 ????
    356  3000 ????	       00 08	   _08	      =	$08
    357  3000 ????
    358  3000 ????	       00 06	   _06	      =	$06
    359  3000 ????
    360  3000 ????	       00 04	   _04	      =	$04
    361  3000 ????
    362  3000 ????	       00 02	   _02	      =	$02
    363  3000 ????
    364  3000 ????	       00 00	   _00	      =	$00
    365  3000 ????
    366  3000 ????	       00 07	   req_level_reset =	7
    367  3000 ????
    368  3000 ????	       00 06	   req_move_down =	6
    369  3000 ????
    370  3000 ????	       00 05	   req_move_right =	5
    371  3000 ????
    372  3000 ????	       00 04	   req_move_up =	4
    373  3000 ????
    374  3000 ????	       00 03	   req_move_left =	3
    375  3000 ????
    376  3000 ????	       00 02	   req_game_over =	2
    377  3000 ????
    378  3000 ????	       00 01	   req_level_up =	1
    379  3000 ????
    380  3000 ????	       00 00	   req_load   =	0
    381  3000 ????
    382  3000 ????	       00 17	   response_size_minus_1 =	23
    383  3000 ????
    384  3000 ????	       00 08	   scback     =	#$08
    385  3000 ????
    386  3000 ????	       00 94	   _M_Edge_Right =	148
    387  3000 ????
    388  3000 ????	       00 0e	   _M_Edge_Left =	14
    389  3000 ????
    390  3000 ????	       00 58	   _M_Edge_Bottom =	88
    391  3000 ????
    392  3000 ????	       00 02	   _M_Edge_Top =	2
    393  3000 ????
    394  3000 ????	       00 4c	   player_max_y =	76
    395  3000 ????
    396  3000 ????	       00 02	   player_min_y =	2
    397  3000 ????
    398  3000 ????	       00 86	   player_max_x =	134
    399  3000 ????
    400  3000 ????	       00 0a	   player_min_x =	10
    401  3000 ????
    402  3000 ????	       00 01	   pfscore    =	1
    403  3000 ????
    404  3000 ????	       00 04	   pfres      =	4
    405  3000 ????
    406  3000 ????	       00 01	   superchip  =	1
    407  3000 ????	       00 01	   bs_mask    =	1
    408  3000 ????	       00 08	   bankswitch =	8
    409  3000 ????	       1f f8	   bankswitch_hotspot =	$1FF8
    410  3000 ????	       00 01	   PFcolors   =	1
    411  3000 ????	       00 01	   player1colors =	1
------- FILE 2600basic.h
      7  3000 ????
      8  3000 ????	       00 80	   player0x   =	$80
      9  3000 ????	       00 81	   player1x   =	$81
     10  3000 ????	       00 82	   missile0x  =	$82
     11  3000 ????	       00 83	   missile1x  =	$83
     12  3000 ????	       00 84	   ballx      =	$84
     13  3000 ????
     14  3000 ????	       00 85	   objecty    =	$85
     15  3000 ????	       00 85	   player0y   =	$85
     16  3000 ????	       00 86	   player1y   =	$86
     17  3000 ????	       00 87	   missile1height =	$87
     18  3000 ????	       00 88	   missile1y  =	$88
     19  3000 ????	       00 89	   bally      =	$89
     20  3000 ????
     21  3000 ????	       00 87	   player1color =	$87	; replaces missile 1
     22  3000 ????
     23  3000 ????	       00 8a	   player0pointer =	$8A	;uses $8A-$8B
     24  3000 ????	       00 8a	   player0pointerlo =	$8A
     25  3000 ????	       00 8b	   player0pointerhi =	$8B
     26  3000 ????	       00 8c	   player1pointer =	$8C	; $8C-$8D
     27  3000 ????	       00 8c	   player1pointerlo =	$8C
     28  3000 ????	       00 8d	   player1pointerhi =	$8D
     29  3000 ????
     30  3000 ????	       00 8e	   player0height =	$8E
     31  3000 ????	       00 8f	   player1height =	$8F
     32  3000 ????	       00 90	   missile0height =	$90
     33  3000 ????	       00 91	   missile0y  =	$91
     34  3000 ????	       00 92	   ballheight =	$92
     35  3000 ????
     36  3000 ????	       00 90	   currentpaddle =	$90	; replaces missile 0 (and can't be used with playercolor)
     37  3000 ????	       00 91	   paddle     =	$91	; replaces missile 0
     38  3000 ????	       00 82	   player0colorstore =	$82	; replaces missile 0
     39  3000 ????	       00 90	   player0color =	$90	; replaces missile 0
     40  3000 ????
     41  3000 ????	       00 93	   score      =	$93	; $93-$95
     42  3000 ????	       00 96	   scorepointers =	$96	; $96-$9B = 6 bytes
     43  3000 ????	       00 9c	   temp1      =	$9C	;used by kernel.  can be used in program too, but
     44  3000 ????	       00 9d	   temp2      =	$9D	;are obliterated when drawscreen is called.
     45  3000 ????	       00 9e	   temp3      =	$9E
     46  3000 ????	       00 9f	   temp4      =	$9F
     47  3000 ????	       00 a0	   temp5      =	$A0
     48  3000 ????	       00 a1	   temp6      =	$A1
     49  3000 ????
     50  3000 ????	       00 a2	   rand       =	$A2
     51  3000 ????	       00 a3	   scorecolor =	$A3
     52  3000 ????
     53  3000 ????	       00 a4	   var0       =	$A4
     54  3000 ????	       00 a5	   var1       =	$A5
     55  3000 ????	       00 a6	   var2       =	$A6
     56  3000 ????	       00 a7	   var3       =	$A7
     57  3000 ????	       00 a8	   var4       =	$A8
     58  3000 ????	       00 a9	   var5       =	$A9
     59  3000 ????	       00 aa	   var6       =	$AA
     60  3000 ????	       00 ab	   var7       =	$AB
     61  3000 ????	       00 ac	   var8       =	$AC
     62  3000 ????	       00 ad	   var9       =	$AD
     63  3000 ????	       00 ae	   var10      =	$AE
     64  3000 ????	       00 af	   var11      =	$AF
     65  3000 ????	       00 b0	   var12      =	$B0
     66  3000 ????	       00 b1	   var13      =	$B1
     67  3000 ????	       00 b2	   var14      =	$B2
     68  3000 ????	       00 b3	   var15      =	$B3
     69  3000 ????	       00 b4	   var16      =	$B4
     70  3000 ????	       00 b5	   var17      =	$B5
     71  3000 ????	       00 b6	   var18      =	$B6
     72  3000 ????	       00 b7	   var19      =	$B7
     73  3000 ????	       00 b8	   var20      =	$B8
     74  3000 ????	       00 b9	   var21      =	$B9
     75  3000 ????	       00 ba	   var22      =	$BA
     76  3000 ????	       00 bb	   var23      =	$BB
     77  3000 ????	       00 bc	   var24      =	$BC
     78  3000 ????	       00 bd	   var25      =	$BD
     79  3000 ????	       00 be	   var26      =	$BE
     80  3000 ????	       00 bf	   var27      =	$BF
     81  3000 ????	       00 c0	   var28      =	$C0
     82  3000 ????	       00 c1	   var29      =	$C1
     83  3000 ????	       00 c2	   var30      =	$C2
     84  3000 ????	       00 c3	   var31      =	$C3
     85  3000 ????	       00 c4	   var32      =	$C4
     86  3000 ????	       00 c5	   var33      =	$C5
     87  3000 ????	       00 c6	   var34      =	$C6
     88  3000 ????	       00 c7	   var35      =	$C7
     89  3000 ????	       00 c8	   var36      =	$C8
     90  3000 ????	       00 c9	   var37      =	$C9
     91  3000 ????	       00 ca	   var38      =	$CA
     92  3000 ????	       00 cb	   var39      =	$CB
     93  3000 ????	       00 cc	   var40      =	$CC
     94  3000 ????	       00 cd	   var41      =	$CD
     95  3000 ????	       00 ce	   var42      =	$CE
     96  3000 ????	       00 cf	   var43      =	$CF
     97  3000 ????	       00 d0	   var44      =	$D0
     98  3000 ????	       00 d1	   var45      =	$D1
     99  3000 ????	       00 d2	   var46      =	$D2
    100  3000 ????	       00 d3	   var47      =	$D3
    101  3000 ????
    102  3000 ????	       00 d4	   A	      =	$d4
    103  3000 ????	       00 d4	   a	      =	$d4
    104  3000 ????	       00 d5	   B	      =	$d5
    105  3000 ????	       00 d5	   b	      =	$d5
    106  3000 ????	       00 d6	   C	      =	$d6
    107  3000 ????	       00 d6	   c	      =	$d6
    108  3000 ????	       00 d7	   D	      =	$d7
    109  3000 ????	       00 d7	   d	      =	$d7
    110  3000 ????	       00 d8	   E	      =	$d8
    111  3000 ????	       00 d8	   e	      =	$d8
    112  3000 ????	       00 d9	   F	      =	$d9
    113  3000 ????	       00 d9	   f	      =	$d9
    114  3000 ????	       00 da	   G	      =	$da
    115  3000 ????	       00 da	   g	      =	$da
    116  3000 ????	       00 db	   H	      =	$db
    117  3000 ????	       00 db	   h	      =	$db
    118  3000 ????	       00 dc	   I	      =	$dc
    119  3000 ????	       00 dc	   i	      =	$dc
    120  3000 ????	       00 dd	   J	      =	$dd
    121  3000 ????	       00 dd	   j	      =	$dd
    122  3000 ????	       00 de	   K	      =	$de
    123  3000 ????	       00 de	   k	      =	$de
    124  3000 ????	       00 df	   L	      =	$df
    125  3000 ????	       00 df	   l	      =	$df
    126  3000 ????	       00 e0	   M	      =	$e0
    127  3000 ????	       00 e0	   m	      =	$e0
    128  3000 ????	       00 e1	   N	      =	$e1
    129  3000 ????	       00 e1	   n	      =	$e1
    130  3000 ????	       00 e2	   O	      =	$e2
    131  3000 ????	       00 e2	   o	      =	$e2
    132  3000 ????	       00 e3	   P	      =	$e3
    133  3000 ????	       00 e3	   p	      =	$e3
    134  3000 ????	       00 e4	   Q	      =	$e4
    135  3000 ????	       00 e4	   q	      =	$e4
    136  3000 ????	       00 e5	   R	      =	$e5
    137  3000 ????	       00 e5	   r	      =	$e5
    138  3000 ????	       00 e6	   S	      =	$e6
    139  3000 ????	       00 e6	   s	      =	$e6
    140  3000 ????	       00 e7	   T	      =	$e7
    141  3000 ????	       00 e7	   t	      =	$e7
    142  3000 ????	       00 e8	   U	      =	$e8
    143  3000 ????	       00 e8	   u	      =	$e8
    144  3000 ????	       00 e9	   V	      =	$e9
    145  3000 ????	       00 e9	   v	      =	$e9
    146  3000 ????	       00 ea	   W	      =	$ea
    147  3000 ????	       00 ea	   w	      =	$ea
    148  3000 ????	       00 eb	   X	      =	$eb
    149  3000 ????	       00 eb	   x	      =	$eb
    150  3000 ????	       00 ec	   Y	      =	$ec
    151  3000 ????	       00 ec	   y	      =	$ec
    152  3000 ????	       00 ed	   Z	      =	$ed
    153  3000 ????	       00 ed	   z	      =	$ed
    154  3000 ????
    155  3000 ????	       00 ee	   temp7      =	$ee	; This is used to aid in bankswitching
    156  3000 ????	       00 ef	   playfieldpos =	$ef
    157  3000 ????
    158  3000 ????						; available for other uses, or if unused, provide more stack space
    159  3000 ????
    160  3000 ????	       00 f0	   aux1       =	$f0
    161  3000 ????	       00 f1	   aux2       =	$f1
    162  3000 ????	       00 f2	   aux3       =	$f2
    163  3000 ????	       00 f3	   aux4       =	$f3
    164  3000 ????	       00 f4	   aux5       =	$f4
    165  3000 ????	       00 f5	   aux6       =	$f5
    166  3000 ????
    167  3000 ????						; playfield color/height pointers
    168  3000 ????	       00 f0	   pfcolortable =	$f0	; and $d5
    169  3000 ????	       00 f0	   pfheighttable =	$f0	; and $d5
    170  3000 ????						; the above pointers are the same because if color and height are both used together,
    171  3000 ????						; they must used absolute indexed and cannot use pointers
    172  3000 ????
    173  3000 ????	       00 f2	   lifepointer =	$f2	; pointer to "lives" shape
    174  3000 ????						; upper 3 bits of $f2 contain the number of lives
    175  3000 ????	       00 f4	   lifecolor  =	$f4
    176  3000 ????	       00 f3	   lives      =	$f3	; # lives >> 5
    177  3000 ????	       00 f5	   statusbarlength =	$f5	; only uses upper 5 bits; other bits free
    178  3000 ????
    179  3000 ????	       00 f2	   pfscore1   =	$f2	; optional playfield bytes in score
    180  3000 ????	       00 f3	   pfscore2   =	$f3
    181  3000 ????	       00 f4	   pfscorecolor =	$f4
    182  3000 ????
    183  3000 ????	       00 f6	   stack1     =	$f6
    184  3000 ????	       00 f7	   stack2     =	$f7
    185  3000 ????	       00 f8	   stack3     =	$f8
    186  3000 ????	       00 f9	   stack4     =	$f9
    187  3000 ????						; the stack bytes above may be used in the kernel
    188  3000 ????						; stack = F6-F7, F8-F9, FA-FB, FC-FD, FE-FF
    189  3000 ????
    190  3000 ????				      MAC	return
    191  3000 ????				      ifnconst	bankswitch
    192  3000 ????				      rts
    193  3000 ????				      else
    194  3000 ????				      jmp	BS_return
    195  3000 ????				      endif
    196  3000 ????				      ENDM		; auto-return from either a regular or bankswitched module
    197  3000 ????
    198  3000 ????				      ifconst	superchip
    199  3000 ????	       10 d0	   playfieldbase =	$10D0
------- FILE superchip.h LEVEL 3 PASS 3
      0  3000 ????				      include	superchip.h
      1  3000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  3000 ????
      3  3000 ????	       f0 00	   write_RAM  =	$F000
      4  3000 ????	       f0 00	   wRAM       =	$F000
      5  3000 ????	       f0 00	   w000       =	$F000
      6  3000 ????	       f0 01	   w001       =	$F001
      7  3000 ????	       f0 02	   w002       =	$F002
      8  3000 ????	       f0 03	   w003       =	$F003
      9  3000 ????	       f0 04	   w004       =	$F004
     10  3000 ????	       f0 05	   w005       =	$F005
     11  3000 ????	       f0 06	   w006       =	$F006
     12  3000 ????	       f0 07	   w007       =	$F007
     13  3000 ????	       f0 08	   w008       =	$F008
     14  3000 ????	       f0 09	   w009       =	$F009
     15  3000 ????	       f0 0a	   w010       =	$F00A
     16  3000 ????	       f0 0b	   w011       =	$F00B
     17  3000 ????	       f0 0c	   w012       =	$F00C
     18  3000 ????	       f0 0d	   w013       =	$F00D
     19  3000 ????	       f0 0e	   w014       =	$F00E
     20  3000 ????	       f0 0f	   w015       =	$F00F
     21  3000 ????	       f0 10	   w016       =	$F010
     22  3000 ????	       f0 11	   w017       =	$F011
     23  3000 ????	       f0 12	   w018       =	$F012
     24  3000 ????	       f0 13	   w019       =	$F013
     25  3000 ????	       f0 14	   w020       =	$F014
     26  3000 ????	       f0 15	   w021       =	$F015
     27  3000 ????	       f0 16	   w022       =	$F016
     28  3000 ????	       f0 17	   w023       =	$F017
     29  3000 ????	       f0 18	   w024       =	$F018
     30  3000 ????	       f0 19	   w025       =	$F019
     31  3000 ????	       f0 1a	   w026       =	$F01A
     32  3000 ????	       f0 1b	   w027       =	$F01B
     33  3000 ????	       f0 1c	   w028       =	$F01C
     34  3000 ????	       f0 1d	   w029       =	$F01D
     35  3000 ????	       f0 1e	   w030       =	$F01E
     36  3000 ????	       f0 1f	   w031       =	$F01F
     37  3000 ????	       f0 20	   w032       =	$F020
     38  3000 ????	       f0 21	   w033       =	$F021
     39  3000 ????	       f0 22	   w034       =	$F022
     40  3000 ????	       f0 23	   w035       =	$F023
     41  3000 ????	       f0 24	   w036       =	$F024
     42  3000 ????	       f0 25	   w037       =	$F025
     43  3000 ????	       f0 26	   w038       =	$F026
     44  3000 ????	       f0 27	   w039       =	$F027
     45  3000 ????	       f0 28	   w040       =	$F028
     46  3000 ????	       f0 29	   w041       =	$F029
     47  3000 ????	       f0 2a	   w042       =	$F02A
     48  3000 ????	       f0 2b	   w043       =	$F02B
     49  3000 ????	       f0 2c	   w044       =	$F02C
     50  3000 ????	       f0 2d	   w045       =	$F02D
     51  3000 ????	       f0 2e	   w046       =	$F02E
     52  3000 ????	       f0 2f	   w047       =	$F02F
     53  3000 ????	       f0 30	   w048       =	$F030
     54  3000 ????	       f0 31	   w049       =	$F031
     55  3000 ????	       f0 32	   w050       =	$F032
     56  3000 ????	       f0 33	   w051       =	$F033
     57  3000 ????	       f0 34	   w052       =	$F034
     58  3000 ????	       f0 35	   w053       =	$F035
     59  3000 ????	       f0 36	   w054       =	$F036
     60  3000 ????	       f0 37	   w055       =	$F037
     61  3000 ????	       f0 38	   w056       =	$F038
     62  3000 ????	       f0 39	   w057       =	$F039
     63  3000 ????	       f0 3a	   w058       =	$F03A
     64  3000 ????	       f0 3b	   w059       =	$F03B
     65  3000 ????	       f0 3c	   w060       =	$F03C
     66  3000 ????	       f0 3d	   w061       =	$F03D
     67  3000 ????	       f0 3e	   w062       =	$F03E
     68  3000 ????	       f0 3f	   w063       =	$F03F
     69  3000 ????	       f0 40	   w064       =	$F040
     70  3000 ????	       f0 41	   w065       =	$F041
     71  3000 ????	       f0 42	   w066       =	$F042
     72  3000 ????	       f0 43	   w067       =	$F043
     73  3000 ????	       f0 44	   w068       =	$F044
     74  3000 ????	       f0 45	   w069       =	$F045
     75  3000 ????	       f0 46	   w070       =	$F046
     76  3000 ????	       f0 47	   w071       =	$F047
     77  3000 ????	       f0 48	   w072       =	$F048
     78  3000 ????	       f0 49	   w073       =	$F049
     79  3000 ????	       f0 4a	   w074       =	$F04A
     80  3000 ????	       f0 4b	   w075       =	$F04B
     81  3000 ????	       f0 4c	   w076       =	$F04C
     82  3000 ????	       f0 4d	   w077       =	$F04D
     83  3000 ????	       f0 4e	   w078       =	$F04E
     84  3000 ????	       f0 4f	   w079       =	$F04F
     85  3000 ????	       f0 50	   w080       =	$F050
     86  3000 ????	       f0 51	   w081       =	$F051
     87  3000 ????	       f0 52	   w082       =	$F052
     88  3000 ????	       f0 53	   w083       =	$F053
     89  3000 ????	       f0 54	   w084       =	$F054
     90  3000 ????	       f0 55	   w085       =	$F055
     91  3000 ????	       f0 56	   w086       =	$F056
     92  3000 ????	       f0 57	   w087       =	$F057
     93  3000 ????	       f0 58	   w088       =	$F058
     94  3000 ????	       f0 59	   w089       =	$F059
     95  3000 ????	       f0 5a	   w090       =	$F05A
     96  3000 ????	       f0 5b	   w091       =	$F05B
     97  3000 ????	       f0 5c	   w092       =	$F05C
     98  3000 ????	       f0 5d	   w093       =	$F05D
     99  3000 ????	       f0 5e	   w094       =	$F05E
    100  3000 ????	       f0 5f	   w095       =	$F05F
    101  3000 ????	       f0 60	   w096       =	$F060
    102  3000 ????	       f0 61	   w097       =	$F061
    103  3000 ????	       f0 62	   w098       =	$F062
    104  3000 ????	       f0 63	   w099       =	$F063
    105  3000 ????	       f0 64	   w100       =	$F064
    106  3000 ????	       f0 65	   w101       =	$F065
    107  3000 ????	       f0 66	   w102       =	$F066
    108  3000 ????	       f0 67	   w103       =	$F067
    109  3000 ????	       f0 68	   w104       =	$F068
    110  3000 ????	       f0 69	   w105       =	$F069
    111  3000 ????	       f0 6a	   w106       =	$F06A
    112  3000 ????	       f0 6b	   w107       =	$F06B
    113  3000 ????	       f0 6c	   w108       =	$F06C
    114  3000 ????	       f0 6d	   w109       =	$F06D
    115  3000 ????	       f0 6e	   w110       =	$F06E
    116  3000 ????	       f0 6f	   w111       =	$F06F
    117  3000 ????	       f0 70	   w112       =	$F070
    118  3000 ????	       f0 71	   w113       =	$F071
    119  3000 ????	       f0 72	   w114       =	$F072
    120  3000 ????	       f0 73	   w115       =	$F073
    121  3000 ????	       f0 74	   w116       =	$F074
    122  3000 ????	       f0 75	   w117       =	$F075
    123  3000 ????	       f0 76	   w118       =	$F076
    124  3000 ????	       f0 77	   w119       =	$F077
    125  3000 ????	       f0 78	   w120       =	$F078
    126  3000 ????	       f0 79	   w121       =	$F079
    127  3000 ????	       f0 7a	   w122       =	$F07A
    128  3000 ????	       f0 7b	   w123       =	$F07B
    129  3000 ????	       f0 7c	   w124       =	$F07C
    130  3000 ????	       f0 7d	   w125       =	$F07D
    131  3000 ????	       f0 7e	   w126       =	$F07E
    132  3000 ????	       f0 7f	   w127       =	$F07F
    133  3000 ????
    134  3000 ????	       f0 80	   read_RAM   =	$F080
    135  3000 ????	       f0 80	   rRAM       =	$F080
    136  3000 ????	       f0 80	   r000       =	$F080
    137  3000 ????	       f0 81	   r001       =	$F081
    138  3000 ????	       f0 82	   r002       =	$F082
    139  3000 ????	       f0 83	   r003       =	$F083
    140  3000 ????	       f0 84	   r004       =	$F084
    141  3000 ????	       f0 85	   r005       =	$F085
    142  3000 ????	       f0 86	   r006       =	$F086
    143  3000 ????	       f0 87	   r007       =	$F087
    144  3000 ????	       f0 88	   r008       =	$F088
    145  3000 ????	       f0 89	   r009       =	$F089
    146  3000 ????	       f0 8a	   r010       =	$F08A
    147  3000 ????	       f0 8b	   r011       =	$F08B
    148  3000 ????	       f0 8c	   r012       =	$F08C
    149  3000 ????	       f0 8d	   r013       =	$F08D
    150  3000 ????	       f0 8e	   r014       =	$F08E
    151  3000 ????	       f0 8f	   r015       =	$F08F
    152  3000 ????	       f0 90	   r016       =	$F090
    153  3000 ????	       f0 91	   r017       =	$F091
    154  3000 ????	       f0 92	   r018       =	$F092
    155  3000 ????	       f0 93	   r019       =	$F093
    156  3000 ????	       f0 94	   r020       =	$F094
    157  3000 ????	       f0 95	   r021       =	$F095
    158  3000 ????	       f0 96	   r022       =	$F096
    159  3000 ????	       f0 97	   r023       =	$F097
    160  3000 ????	       f0 98	   r024       =	$F098
    161  3000 ????	       f0 99	   r025       =	$F099
    162  3000 ????	       f0 9a	   r026       =	$F09A
    163  3000 ????	       f0 9b	   r027       =	$F09B
    164  3000 ????	       f0 9c	   r028       =	$F09C
    165  3000 ????	       f0 9d	   r029       =	$F09D
    166  3000 ????	       f0 9e	   r030       =	$F09E
    167  3000 ????	       f0 9f	   r031       =	$F09F
    168  3000 ????	       f0 a0	   r032       =	$F0A0
    169  3000 ????	       f0 a1	   r033       =	$F0A1
    170  3000 ????	       f0 a2	   r034       =	$F0A2
    171  3000 ????	       f0 a3	   r035       =	$F0A3
    172  3000 ????	       f0 a4	   r036       =	$F0A4
    173  3000 ????	       f0 a5	   r037       =	$F0A5
    174  3000 ????	       f0 a6	   r038       =	$F0A6
    175  3000 ????	       f0 a7	   r039       =	$F0A7
    176  3000 ????	       f0 a8	   r040       =	$F0A8
    177  3000 ????	       f0 a9	   r041       =	$F0A9
    178  3000 ????	       f0 aa	   r042       =	$F0AA
    179  3000 ????	       f0 ab	   r043       =	$F0AB
    180  3000 ????	       f0 ac	   r044       =	$F0AC
    181  3000 ????	       f0 ad	   r045       =	$F0AD
    182  3000 ????	       f0 ae	   r046       =	$F0AE
    183  3000 ????	       f0 af	   r047       =	$F0AF
    184  3000 ????	       f0 b0	   r048       =	$F0B0
    185  3000 ????	       f0 b1	   r049       =	$F0B1
    186  3000 ????	       f0 b2	   r050       =	$F0B2
    187  3000 ????	       f0 b3	   r051       =	$F0B3
    188  3000 ????	       f0 b4	   r052       =	$F0B4
    189  3000 ????	       f0 b5	   r053       =	$F0B5
    190  3000 ????	       f0 b6	   r054       =	$F0B6
    191  3000 ????	       f0 b7	   r055       =	$F0B7
    192  3000 ????	       f0 b8	   r056       =	$F0B8
    193  3000 ????	       f0 b9	   r057       =	$F0B9
    194  3000 ????	       f0 ba	   r058       =	$F0BA
    195  3000 ????	       f0 bb	   r059       =	$F0BB
    196  3000 ????	       f0 bc	   r060       =	$F0BC
    197  3000 ????	       f0 bd	   r061       =	$F0BD
    198  3000 ????	       f0 be	   r062       =	$F0BE
    199  3000 ????	       f0 bf	   r063       =	$F0BF
    200  3000 ????	       f0 c0	   r064       =	$F0C0
    201  3000 ????	       f0 c1	   r065       =	$F0C1
    202  3000 ????	       f0 c2	   r066       =	$F0C2
    203  3000 ????	       f0 c3	   r067       =	$F0C3
    204  3000 ????	       f0 c4	   r068       =	$F0C4
    205  3000 ????	       f0 c5	   r069       =	$F0C5
    206  3000 ????	       f0 c6	   r070       =	$F0C6
    207  3000 ????	       f0 c7	   r071       =	$F0C7
    208  3000 ????	       f0 c8	   r072       =	$F0C8
    209  3000 ????	       f0 c9	   r073       =	$F0C9
    210  3000 ????	       f0 ca	   r074       =	$F0CA
    211  3000 ????	       f0 cb	   r075       =	$F0CB
    212  3000 ????	       f0 cc	   r076       =	$F0CC
    213  3000 ????	       f0 cd	   r077       =	$F0CD
    214  3000 ????	       f0 ce	   r078       =	$F0CE
    215  3000 ????	       f0 cf	   r079       =	$F0CF
    216  3000 ????	       f0 d0	   r080       =	$F0D0
    217  3000 ????	       f0 d1	   r081       =	$F0D1
    218  3000 ????	       f0 d2	   r082       =	$F0D2
    219  3000 ????	       f0 d3	   r083       =	$F0D3
    220  3000 ????	       f0 d4	   r084       =	$F0D4
    221  3000 ????	       f0 d5	   r085       =	$F0D5
    222  3000 ????	       f0 d6	   r086       =	$F0D6
    223  3000 ????	       f0 d7	   r087       =	$F0D7
    224  3000 ????	       f0 d8	   r088       =	$F0D8
    225  3000 ????	       f0 d9	   r089       =	$F0D9
    226  3000 ????	       f0 da	   r090       =	$F0DA
    227  3000 ????	       f0 db	   r091       =	$F0DB
    228  3000 ????	       f0 dc	   r092       =	$F0DC
    229  3000 ????	       f0 dd	   r093       =	$F0DD
    230  3000 ????	       f0 de	   r094       =	$F0DE
    231  3000 ????	       f0 df	   r095       =	$F0DF
    232  3000 ????	       f0 e0	   r096       =	$F0E0
    233  3000 ????	       f0 e1	   r097       =	$F0E1
    234  3000 ????	       f0 e2	   r098       =	$F0E2
    235  3000 ????	       f0 e3	   r099       =	$F0E3
    236  3000 ????	       f0 e4	   r100       =	$F0E4
    237  3000 ????	       f0 e5	   r101       =	$F0E5
    238  3000 ????	       f0 e6	   r102       =	$F0E6
    239  3000 ????	       f0 e7	   r103       =	$F0E7
    240  3000 ????	       f0 e8	   r104       =	$F0E8
    241  3000 ????	       f0 e9	   r105       =	$F0E9
    242  3000 ????	       f0 ea	   r106       =	$F0EA
    243  3000 ????	       f0 eb	   r107       =	$F0EB
    244  3000 ????	       f0 ec	   r108       =	$F0EC
    245  3000 ????	       f0 ed	   r109       =	$F0ED
    246  3000 ????	       f0 ee	   r110       =	$F0EE
    247  3000 ????	       f0 ef	   r111       =	$F0EF
    248  3000 ????	       f0 f0	   r112       =	$F0F0
    249  3000 ????	       f0 f1	   r113       =	$F0F1
    250  3000 ????	       f0 f2	   r114       =	$F0F2
    251  3000 ????	       f0 f3	   r115       =	$F0F3
    252  3000 ????	       f0 f4	   r116       =	$F0F4
    253  3000 ????	       f0 f5	   r117       =	$F0F5
    254  3000 ????	       f0 f6	   r118       =	$F0F6
    255  3000 ????	       f0 f7	   r119       =	$F0F7
    256  3000 ????	       f0 f8	   r120       =	$F0F8
    257  3000 ????	       f0 f9	   r121       =	$F0F9
    258  3000 ????	       f0 fa	   r122       =	$F0FA
    259  3000 ????	       f0 fb	   r123       =	$F0FB
    260  3000 ????	       f0 fc	   r124       =	$F0FC
    261  3000 ????	       f0 fd	   r125       =	$F0FD
    262  3000 ????	       f0 fe	   r126       =	$F0FE
    263  3000 ????	       f0 ff	   r127       =	$F0FF
------- FILE 2600basic.h
    201  3000 ????			  -	      else
    202  3000 ????			  -playfieldbase =	$A4
    203  3000 ????				      endif
    204  3000 ????
    205  3000 ????				      ifnconst	pfhalfwidth
    206  3000 ????	       00 04	   pfwidth    =	4
    207  3000 ????	       00 0e	   PF1L       =	PF1
    208  3000 ????	       00 0f	   PF2L       =	PF2
    209  3000 ????	       00 0e	   PF1R       =	PF1
    210  3000 ????	       00 0f	   PF2R       =	PF2
    211  3000 ????	       00 00	   pfadjust   =	0
    212  3000 ????			  -	      else
    213  3000 ????			  -pfwidth    =	2
    214  3000 ????			  -	      ifconst	pfcenter
    215  3000 ????			  -PF1L       =	$3F	; no effect
    216  3000 ????			  -PF2L       =	PF2
    217  3000 ????			  -PF1R       =	$3F
    218  3000 ????			  -PF2R       =	PF2	; no effect
    219  3000 ????			  -pfadjust   =	1
    220  3000 ????			  -	      else
    221  3000 ????			  -PF1L       =	PF1
    222  3000 ????			  -PF2L       =	PF2
    223  3000 ????			  -PF1R       =	$3F	; no effect
    224  3000 ????			  -PF2R       =	$3F	; no effect
    225  3000 ????			  -pfadjust   =	0
    226  3000 ????			  -	      endif
    227  3000 ????				      endif
    228  3000 ????
    229  3000 ????						; define playfield start based on height
    230  3000 ????			  -	      ifnconst	pfres
    231  3000 ????			  -playfield  =	playfieldbase
    232  3000 ????				      else
    233  3000 ????	       10 f0	   playfield  =	playfieldbase-(pfres-12*(4/pfwidth))*pfwidth
    234  3000 ????				      endif
------- FILE d:\Firmaplus\Firmaplus_intern\Atari\PlusROM\Projekte-batariBasic\CaveApocalypse\C.A.V.E. Apocalypse.bas.asm
------- FILE 2600basic_variable_redefs.h LEVEL 2 PASS 3
      0  3000 ????				      include	"2600basic_variable_redefs.h"
      1  3000 ????						; This file contains variable mapping and other information for the current project.
      2  3000 ????
      3  3000 ????	       00 23	   bscode_length =	35
      4  3000 ????	       00 1d	   _SD_Touch_Enemy_length =	.skipL0401-_SD_Touch_Enemy
      5  3000 ????
      6  3000 ????	       00 21	   _SD_Shoot_Enemy_length =	.skipL0400-_SD_Shoot_Enemy
      7  3000 ????
      8  3000 ????	       00 45	   _SD_Shoot_Miss_length =	.skipL0399-_SD_Shoot_Miss
      9  3000 ????
     10  3000 ????	       00 35	   _SD_Shot_Wall_length =	.skipL0398-_SD_Shot_Wall
     11  3000 ????
     12  3000 ????	       f0 64	   w_room_definition_start =	w100
     13  3000 ????
     14  3000 ????	       f0 64	   w_room_color_top =	w100
     15  3000 ????
     16  3000 ????	       f0 e4	   r_room_color_top =	r100
     17  3000 ????
     18  3000 ????	       f0 65	   w_room_color_middle =	w101
     19  3000 ????
     20  3000 ????	       f0 e5	   r_room_color_middle =	r101
     21  3000 ????
     22  3000 ????	       f0 69	   w_room_color_bottom =	w105
     23  3000 ????
     24  3000 ????	       f0 e9	   r_room_color_bottom =	r105
     25  3000 ????
     26  3000 ????	       f0 6a	   w_roommate_type_and_range =	w106
     27  3000 ????
     28  3000 ????	       f0 ea	   r_roommate_type_and_range =	r106
     29  3000 ????
     30  3000 ????	       f0 6b	   w_roommate_y_startpos =	w107
     31  3000 ????
     32  3000 ????	       f0 eb	   r_roommate_y_startpos =	r107
     33  3000 ????
     34  3000 ????	       f0 6c	   w_roommate_x_startpos =	w108
     35  3000 ????
     36  3000 ????	       f0 ec	   r_roommate_x_startpos =	r108
     37  3000 ????
     38  3000 ????	       f0 6d	   w_extra_wall_width =	w109
     39  3000 ????
     40  3000 ????	       f0 ed	   r_extra_wall_width =	r109
     41  3000 ????
     42  3000 ????	       f0 6e	   w_extra_wall_type =	w110
     43  3000 ????
     44  3000 ????	       f0 ee	   r_extra_wall_type =	r110
     45  3000 ????
     46  3000 ????	       f0 6f	   w_extra_wall_startpos =	w111
     47  3000 ????
     48  3000 ????	       f0 ef	   r_extra_wall_startpos =	r111
     49  3000 ????
     50  3000 ????	       00 ec	   _Bit7_M0_Moving =	y
     51  3000 ????
     52  3000 ????	       00 ec	   _Bit6_Flip_P0 =	y
     53  3000 ????
     54  3000 ????	       00 ec	   _Bit1_Wall_Dir =	y
     55  3000 ????
     56  3000 ????	       00 ec	   _Bit0_roommate_Dir =	y
     57  3000 ????
     58  3000 ????	       00 ec	   _BitOp_misc =	y
     59  3000 ????
     60  3000 ????	       00 86	   P1y_position =	player1y
     61  3000 ????	       00 e9	   P1y_velocity =	v
     62  3000 ????	       00 91	   M0y_position =	missile0y
     63  3000 ????	       00 e6	   M0y_velocity =	s
     64  3000 ????	       00 df	   roommate_type =	l
     65  3000 ????
     66  3000 ????	       00 de	   roommate_move_x =	k
     67  3000 ????
     68  3000 ????	       00 dd	   extra_wall_move_x =	j
     69  3000 ????
     70  3000 ????	       00 dc	   _Ch0_Counter =	i
     71  3000 ????
     72  3000 ????	       00 db	   _Ch0_Duration =	h
     73  3000 ????
     74  3000 ????	       00 da	   _Ch0_Sound =	g
     75  3000 ????
     76  3000 ????	       00 d9	   P1_facing  =	f
     77  3000 ????
     78  3000 ????	       00 d8	   _Bit3_P1_Dir_Right =	e
     79  3000 ????
     80  3000 ????	       00 d8	   _Bit2_P1_Dir_Left =	e
     81  3000 ????
     82  3000 ????	       00 d8	   _Bit1_P1_Dir_Down =	e
     83  3000 ????
     84  3000 ????	       00 d8	   _Bit0_P1_Dir_Up =	e
     85  3000 ????
     86  3000 ????	       00 d8	   _BitOp_P1_Dir =	e
     87  3000 ????
     88  3000 ????	       00 d7	   _Bit3_M0_Dir_Right =	d
     89  3000 ????
     90  3000 ????	       00 d7	   _Bit2_M0_Dir_Left =	d
     91  3000 ????
     92  3000 ????	       00 d7	   _Bit1_M0_Dir_Down =	d
     93  3000 ????
     94  3000 ????	       00 d7	   _Bit0_M0_Dir_Up =	d
     95  3000 ????
     96  3000 ????	       00 d7	   _BitOp_M0_Dir =	d
     97  3000 ????
     98  3000 ????	       00 d6	   frame_counter =	c
     99  3000 ????
    100  3000 ????	       00 d5	   delay_counter =	b
    101  3000 ????
    102  3000 ????	       00 d4	   request_pending =	a
    103  3000 ????
    104  3000 ????	       00 95	   _sc3       =	score + 2
    105  3000 ????
    106  3000 ????	       00 94	   _sc2       =	score + 1
    107  3000 ????
    108  3000 ????	       00 93	   _sc1       =	score
    109  3000 ????
    110  3000 ????	       00 fe	   _FE	      =	$FE
    111  3000 ????
    112  3000 ????	       00 fc	   _FC	      =	$FC
    113  3000 ????
    114  3000 ????	       00 fa	   _FA	      =	$FA
    115  3000 ????
    116  3000 ????	       00 f8	   _F8	      =	$F8
    117  3000 ????
    118  3000 ????	       00 f6	   _F6	      =	$F6
    119  3000 ????
    120  3000 ????	       00 f4	   _F4	      =	$F4
    121  3000 ????
    122  3000 ????	       00 f2	   _F2	      =	$F2
    123  3000 ????
    124  3000 ????	       00 f0	   _F0	      =	$F0
    125  3000 ????
    126  3000 ????	       00 ee	   _EE	      =	$EE
    127  3000 ????
    128  3000 ????	       00 ec	   _EC	      =	$EC
    129  3000 ????
    130  3000 ????	       00 ea	   _EA	      =	$EA
    131  3000 ????
    132  3000 ????	       00 e8	   _E8	      =	$E8
    133  3000 ????
    134  3000 ????	       00 e6	   _E6	      =	$E6
    135  3000 ????
    136  3000 ????	       00 e4	   _E4	      =	$E4
    137  3000 ????
    138  3000 ????	       00 e2	   _E2	      =	$E2
    139  3000 ????
    140  3000 ????	       00 e0	   _E0	      =	$E0
    141  3000 ????
    142  3000 ????	       00 de	   _DE	      =	$DE
    143  3000 ????
    144  3000 ????	       00 dc	   _DC	      =	$DC
    145  3000 ????
    146  3000 ????	       00 da	   _DA	      =	$DA
    147  3000 ????
    148  3000 ????	       00 d8	   _D8	      =	$D8
    149  3000 ????
    150  3000 ????	       00 d6	   _D6	      =	$D6
    151  3000 ????
    152  3000 ????	       00 d4	   _D4	      =	$D4
    153  3000 ????
    154  3000 ????	       00 d2	   _D2	      =	$D2
    155  3000 ????
    156  3000 ????	       00 d0	   _D0	      =	$D0
    157  3000 ????
    158  3000 ????	       00 ce	   _CE	      =	$CE
    159  3000 ????
    160  3000 ????	       00 cc	   _CC	      =	$CC
    161  3000 ????
    162  3000 ????	       00 ca	   _CA	      =	$CA
    163  3000 ????
    164  3000 ????	       00 c8	   _C8	      =	$C8
    165  3000 ????
    166  3000 ????	       00 c6	   _C6	      =	$C6
    167  3000 ????
    168  3000 ????	       00 c4	   _C4	      =	$C4
    169  3000 ????
    170  3000 ????	       00 c2	   _C2	      =	$C2
    171  3000 ????
    172  3000 ????	       00 c0	   _C0	      =	$C0
    173  3000 ????
    174  3000 ????	       00 be	   _BE	      =	$BE
    175  3000 ????
    176  3000 ????	       00 bc	   _BC	      =	$BC
    177  3000 ????
    178  3000 ????	       00 ba	   _BA	      =	$BA
    179  3000 ????
    180  3000 ????	       00 b8	   _B8	      =	$B8
    181  3000 ????
    182  3000 ????	       00 b6	   _B6	      =	$B6
    183  3000 ????
    184  3000 ????	       00 b4	   _B4	      =	$B4
    185  3000 ????
    186  3000 ????	       00 b2	   _B2	      =	$B2
    187  3000 ????
    188  3000 ????	       00 b0	   _B0	      =	$B0
    189  3000 ????
    190  3000 ????	       00 ae	   _AE	      =	$AE
    191  3000 ????
    192  3000 ????	       00 ac	   _AC	      =	$AC
    193  3000 ????
    194  3000 ????	       00 aa	   _AA	      =	$AA
    195  3000 ????
    196  3000 ????	       00 a8	   _A8	      =	$A8
    197  3000 ????
    198  3000 ????	       00 a6	   _A6	      =	$A6
    199  3000 ????
    200  3000 ????	       00 a4	   _A4	      =	$A4
    201  3000 ????
    202  3000 ????	       00 a2	   _A2	      =	$A2
    203  3000 ????
    204  3000 ????	       00 a0	   _A0	      =	$A0
    205  3000 ????
    206  3000 ????	       00 9e	   _9E	      =	$9E
    207  3000 ????
    208  3000 ????	       00 9c	   _9C	      =	$9C
    209  3000 ????
    210  3000 ????	       00 9a	   _9A	      =	$9A
    211  3000 ????
    212  3000 ????	       00 98	   _98	      =	$98
    213  3000 ????
    214  3000 ????	       00 96	   _96	      =	$96
    215  3000 ????
    216  3000 ????	       00 94	   _94	      =	$94
    217  3000 ????
    218  3000 ????	       00 92	   _92	      =	$92
    219  3000 ????
    220  3000 ????	       00 90	   _90	      =	$90
    221  3000 ????
    222  3000 ????	       00 8e	   _8E	      =	$8E
    223  3000 ????
    224  3000 ????	       00 8c	   _8C	      =	$8C
    225  3000 ????
    226  3000 ????	       00 8a	   _8A	      =	$8A
    227  3000 ????
    228  3000 ????	       00 88	   _88	      =	$88
    229  3000 ????
    230  3000 ????	       00 86	   _86	      =	$86
    231  3000 ????
    232  3000 ????	       00 84	   _84	      =	$84
    233  3000 ????
    234  3000 ????	       00 82	   _82	      =	$82
    235  3000 ????
    236  3000 ????	       00 80	   _80	      =	$80
    237  3000 ????
    238  3000 ????	       00 7e	   _7E	      =	$7E
    239  3000 ????
    240  3000 ????	       00 7c	   _7C	      =	$7C
    241  3000 ????
    242  3000 ????	       00 7a	   _7A	      =	$7A
    243  3000 ????
    244  3000 ????	       00 78	   _78	      =	$78
    245  3000 ????
    246  3000 ????	       00 76	   _76	      =	$76
    247  3000 ????
    248  3000 ????	       00 74	   _74	      =	$74
    249  3000 ????
    250  3000 ????	       00 72	   _72	      =	$72
    251  3000 ????
    252  3000 ????	       00 70	   _70	      =	$70
    253  3000 ????
    254  3000 ????	       00 6e	   _6E	      =	$6E
    255  3000 ????
    256  3000 ????	       00 6c	   _6C	      =	$6C
    257  3000 ????
    258  3000 ????	       00 6a	   _6A	      =	$6A
    259  3000 ????
    260  3000 ????	       00 68	   _68	      =	$68
    261  3000 ????
    262  3000 ????	       00 66	   _66	      =	$66
    263  3000 ????
    264  3000 ????	       00 64	   _64	      =	$64
    265  3000 ????
    266  3000 ????	       00 62	   _62	      =	$62
    267  3000 ????
    268  3000 ????	       00 60	   _60	      =	$60
    269  3000 ????
    270  3000 ????	       00 5e	   _5E	      =	$5E
    271  3000 ????
    272  3000 ????	       00 5c	   _5C	      =	$5C
    273  3000 ????
    274  3000 ????	       00 5a	   _5A	      =	$5A
    275  3000 ????
    276  3000 ????	       00 58	   _58	      =	$58
    277  3000 ????
    278  3000 ????	       00 56	   _56	      =	$56
    279  3000 ????
    280  3000 ????	       00 54	   _54	      =	$54
    281  3000 ????
    282  3000 ????	       00 52	   _52	      =	$52
    283  3000 ????
    284  3000 ????	       00 50	   _50	      =	$50
    285  3000 ????
    286  3000 ????	       00 4e	   _4E	      =	$4E
    287  3000 ????
    288  3000 ????	       00 4c	   _4C	      =	$4C
    289  3000 ????
    290  3000 ????	       00 4a	   _4A	      =	$4A
    291  3000 ????
    292  3000 ????	       00 48	   _48	      =	$48
    293  3000 ????
    294  3000 ????	       00 46	   _46	      =	$46
    295  3000 ????
    296  3000 ????	       00 44	   _44	      =	$44
    297  3000 ????
    298  3000 ????	       00 42	   _42	      =	$42
    299  3000 ????
    300  3000 ????	       00 40	   _40	      =	$40
    301  3000 ????
    302  3000 ????	       00 3e	   _3E	      =	$3E
    303  3000 ????
    304  3000 ????	       00 3c	   _3C	      =	$3C
    305  3000 ????
    306  3000 ????	       00 3a	   _3A	      =	$3A
    307  3000 ????
    308  3000 ????	       00 38	   _38	      =	$38
    309  3000 ????
    310  3000 ????	       00 36	   _36	      =	$36
    311  3000 ????
    312  3000 ????	       00 34	   _34	      =	$34
    313  3000 ????
    314  3000 ????	       00 32	   _32	      =	$32
    315  3000 ????
    316  3000 ????	       00 30	   _30	      =	$30
    317  3000 ????
    318  3000 ????	       00 2e	   _2E	      =	$2E
    319  3000 ????
    320  3000 ????	       00 2c	   _2C	      =	$2C
    321  3000 ????
    322  3000 ????	       00 2a	   _2A	      =	$2A
    323  3000 ????
    324  3000 ????	       00 28	   _28	      =	$28
    325  3000 ????
    326  3000 ????	       00 26	   _26	      =	$26
    327  3000 ????
    328  3000 ????	       00 24	   _24	      =	$24
    329  3000 ????
    330  3000 ????	       00 22	   _22	      =	$22
    331  3000 ????
    332  3000 ????	       00 20	   _20	      =	$20
    333  3000 ????
    334  3000 ????	       00 1e	   _1E	      =	$1E
    335  3000 ????
    336  3000 ????	       00 1c	   _1C	      =	$1C
    337  3000 ????
    338  3000 ????	       00 1a	   _1A	      =	$1A
    339  3000 ????
    340  3000 ????	       00 18	   _18	      =	$18
    341  3000 ????
    342  3000 ????	       00 16	   _16	      =	$16
    343  3000 ????
    344  3000 ????	       00 14	   _14	      =	$14
    345  3000 ????
    346  3000 ????	       00 12	   _12	      =	$12
    347  3000 ????
    348  3000 ????	       00 10	   _10	      =	$10
    349  3000 ????
    350  3000 ????	       00 0e	   _0E	      =	$0E
    351  3000 ????
    352  3000 ????	       00 0c	   _0C	      =	$0C
    353  3000 ????
    354  3000 ????	       00 0a	   _0A	      =	$0A
    355  3000 ????
    356  3000 ????	       00 08	   _08	      =	$08
    357  3000 ????
    358  3000 ????	       00 06	   _06	      =	$06
    359  3000 ????
    360  3000 ????	       00 04	   _04	      =	$04
    361  3000 ????
    362  3000 ????	       00 02	   _02	      =	$02
    363  3000 ????
    364  3000 ????	       00 00	   _00	      =	$00
    365  3000 ????
    366  3000 ????	       00 07	   req_level_reset =	7
    367  3000 ????
    368  3000 ????	       00 06	   req_move_down =	6
    369  3000 ????
    370  3000 ????	       00 05	   req_move_right =	5
    371  3000 ????
    372  3000 ????	       00 04	   req_move_up =	4
    373  3000 ????
    374  3000 ????	       00 03	   req_move_left =	3
    375  3000 ????
    376  3000 ????	       00 02	   req_game_over =	2
    377  3000 ????
    378  3000 ????	       00 01	   req_level_up =	1
    379  3000 ????
    380  3000 ????	       00 00	   req_load   =	0
    381  3000 ????
    382  3000 ????	       00 17	   response_size_minus_1 =	23
    383  3000 ????
    384  3000 ????	       00 08	   scback     =	#$08
    385  3000 ????
    386  3000 ????	       00 94	   _M_Edge_Right =	148
    387  3000 ????
    388  3000 ????	       00 0e	   _M_Edge_Left =	14
    389  3000 ????
    390  3000 ????	       00 58	   _M_Edge_Bottom =	88
    391  3000 ????
    392  3000 ????	       00 02	   _M_Edge_Top =	2
    393  3000 ????
    394  3000 ????	       00 4c	   player_max_y =	76
    395  3000 ????
    396  3000 ????	       00 02	   player_min_y =	2
    397  3000 ????
    398  3000 ????	       00 86	   player_max_x =	134
    399  3000 ????
    400  3000 ????	       00 0a	   player_min_x =	10
    401  3000 ????
    402  3000 ????	       00 01	   pfscore    =	1
    403  3000 ????
    404  3000 ????	       00 04	   pfres      =	4
    405  3000 ????
    406  3000 ????	       00 01	   superchip  =	1
    407  3000 ????	       00 01	   bs_mask    =	1
    408  3000 ????	       00 08	   bankswitch =	8
    409  3000 ????	       1f f8	   bankswitch_hotspot =	$1FF8
    410  3000 ????	       00 01	   PFcolors   =	1
    411  3000 ????	       00 01	   player1colors =	1
------- FILE d:\Firmaplus\Firmaplus_intern\Atari\PlusROM\Projekte-batariBasic\CaveApocalypse\C.A.V.E. Apocalypse.bas.asm
      8  3000 ????				      ifconst	bankswitch
      9  3000 ????				      if	bankswitch == 8
     10  1000					      ORG	$1000
     11  1000					      RORG	$D000
     12  1000					      endif
     13  1000				  -	      if	bankswitch == 16
     14  1000				  -	      ORG	$1000
     15  1000				  -	      RORG	$9000
     16  1000					      endif
     17  1000				  -	      if	bankswitch == 32
     18  1000				  -	      ORG	$1000
     19  1000				  -	      RORG	$1000
     20  1000					      endif
     21  1000				  -	      if	bankswitch == 64
     22  1000				  -	      ORG	$1000
     23  1000				  -	      RORG	$1000
     24  1000					      endif
     25  1000				  -	      else
     26  1000				  -	      ORG	$F000
     27  1000					      endif
     28  1000					      repeat	256
     29  1000		       ff		      .byte.b	$ff
     28  1000					      repend
     29  1001		       ff		      .byte.b	$ff
     28  1001					      repend
     29  1002		       ff		      .byte.b	$ff
     28  1002					      repend
     29  1003		       ff		      .byte.b	$ff
     28  1003					      repend
     29  1004		       ff		      .byte.b	$ff
     28  1004					      repend
     29  1005		       ff		      .byte.b	$ff
     28  1005					      repend
     29  1006		       ff		      .byte.b	$ff
     28  1006					      repend
     29  1007		       ff		      .byte.b	$ff
     28  1007					      repend
     29  1008		       ff		      .byte.b	$ff
     28  1008					      repend
     29  1009		       ff		      .byte.b	$ff
     28  1009					      repend
     29  100a		       ff		      .byte.b	$ff
     28  100a					      repend
     29  100b		       ff		      .byte.b	$ff
     28  100b					      repend
     29  100c		       ff		      .byte.b	$ff
     28  100c					      repend
     29  100d		       ff		      .byte.b	$ff
     28  100d					      repend
     29  100e		       ff		      .byte.b	$ff
     28  100e					      repend
     29  100f		       ff		      .byte.b	$ff
     28  100f					      repend
     29  1010		       ff		      .byte.b	$ff
     28  1010					      repend
     29  1011		       ff		      .byte.b	$ff
     28  1011					      repend
     29  1012		       ff		      .byte.b	$ff
     28  1012					      repend
     29  1013		       ff		      .byte.b	$ff
     28  1013					      repend
     29  1014		       ff		      .byte.b	$ff
     28  1014					      repend
     29  1015		       ff		      .byte.b	$ff
     28  1015					      repend
     29  1016		       ff		      .byte.b	$ff
     28  1016					      repend
     29  1017		       ff		      .byte.b	$ff
     28  1017					      repend
     29  1018		       ff		      .byte.b	$ff
     28  1018					      repend
     29  1019		       ff		      .byte.b	$ff
     28  1019					      repend
     29  101a		       ff		      .byte.b	$ff
     28  101a					      repend
     29  101b		       ff		      .byte.b	$ff
     28  101b					      repend
     29  101c		       ff		      .byte.b	$ff
     28  101c					      repend
     29  101d		       ff		      .byte.b	$ff
     28  101d					      repend
     29  101e		       ff		      .byte.b	$ff
     28  101e					      repend
     29  101f		       ff		      .byte.b	$ff
     28  101f					      repend
     29  1020		       ff		      .byte.b	$ff
     28  1020					      repend
     29  1021		       ff		      .byte.b	$ff
     28  1021					      repend
     29  1022		       ff		      .byte.b	$ff
     28  1022					      repend
     29  1023		       ff		      .byte.b	$ff
     28  1023					      repend
     29  1024		       ff		      .byte.b	$ff
     28  1024					      repend
     29  1025		       ff		      .byte.b	$ff
     28  1025					      repend
     29  1026		       ff		      .byte.b	$ff
     28  1026					      repend
     29  1027		       ff		      .byte.b	$ff
     28  1027					      repend
     29  1028		       ff		      .byte.b	$ff
     28  1028					      repend
     29  1029		       ff		      .byte.b	$ff
     28  1029					      repend
     29  102a		       ff		      .byte.b	$ff
     28  102a					      repend
     29  102b		       ff		      .byte.b	$ff
     28  102b					      repend
     29  102c		       ff		      .byte.b	$ff
     28  102c					      repend
     29  102d		       ff		      .byte.b	$ff
     28  102d					      repend
     29  102e		       ff		      .byte.b	$ff
     28  102e					      repend
     29  102f		       ff		      .byte.b	$ff
     28  102f					      repend
     29  1030		       ff		      .byte.b	$ff
     28  1030					      repend
     29  1031		       ff		      .byte.b	$ff
     28  1031					      repend
     29  1032		       ff		      .byte.b	$ff
     28  1032					      repend
     29  1033		       ff		      .byte.b	$ff
     28  1033					      repend
     29  1034		       ff		      .byte.b	$ff
     28  1034					      repend
     29  1035		       ff		      .byte.b	$ff
     28  1035					      repend
     29  1036		       ff		      .byte.b	$ff
     28  1036					      repend
     29  1037		       ff		      .byte.b	$ff
     28  1037					      repend
     29  1038		       ff		      .byte.b	$ff
     28  1038					      repend
     29  1039		       ff		      .byte.b	$ff
     28  1039					      repend
     29  103a		       ff		      .byte.b	$ff
     28  103a					      repend
     29  103b		       ff		      .byte.b	$ff
     28  103b					      repend
     29  103c		       ff		      .byte.b	$ff
     28  103c					      repend
     29  103d		       ff		      .byte.b	$ff
     28  103d					      repend
     29  103e		       ff		      .byte.b	$ff
     28  103e					      repend
     29  103f		       ff		      .byte.b	$ff
     28  103f					      repend
     29  1040		       ff		      .byte.b	$ff
     28  1040					      repend
     29  1041		       ff		      .byte.b	$ff
     28  1041					      repend
     29  1042		       ff		      .byte.b	$ff
     28  1042					      repend
     29  1043		       ff		      .byte.b	$ff
     28  1043					      repend
     29  1044		       ff		      .byte.b	$ff
     28  1044					      repend
     29  1045		       ff		      .byte.b	$ff
     28  1045					      repend
     29  1046		       ff		      .byte.b	$ff
     28  1046					      repend
     29  1047		       ff		      .byte.b	$ff
     28  1047					      repend
     29  1048		       ff		      .byte.b	$ff
     28  1048					      repend
     29  1049		       ff		      .byte.b	$ff
     28  1049					      repend
     29  104a		       ff		      .byte.b	$ff
     28  104a					      repend
     29  104b		       ff		      .byte.b	$ff
     28  104b					      repend
     29  104c		       ff		      .byte.b	$ff
     28  104c					      repend
     29  104d		       ff		      .byte.b	$ff
     28  104d					      repend
     29  104e		       ff		      .byte.b	$ff
     28  104e					      repend
     29  104f		       ff		      .byte.b	$ff
     28  104f					      repend
     29  1050		       ff		      .byte.b	$ff
     28  1050					      repend
     29  1051		       ff		      .byte.b	$ff
     28  1051					      repend
     29  1052		       ff		      .byte.b	$ff
     28  1052					      repend
     29  1053		       ff		      .byte.b	$ff
     28  1053					      repend
     29  1054		       ff		      .byte.b	$ff
     28  1054					      repend
     29  1055		       ff		      .byte.b	$ff
     28  1055					      repend
     29  1056		       ff		      .byte.b	$ff
     28  1056					      repend
     29  1057		       ff		      .byte.b	$ff
     28  1057					      repend
     29  1058		       ff		      .byte.b	$ff
     28  1058					      repend
     29  1059		       ff		      .byte.b	$ff
     28  1059					      repend
     29  105a		       ff		      .byte.b	$ff
     28  105a					      repend
     29  105b		       ff		      .byte.b	$ff
     28  105b					      repend
     29  105c		       ff		      .byte.b	$ff
     28  105c					      repend
     29  105d		       ff		      .byte.b	$ff
     28  105d					      repend
     29  105e		       ff		      .byte.b	$ff
     28  105e					      repend
     29  105f		       ff		      .byte.b	$ff
     28  105f					      repend
     29  1060		       ff		      .byte.b	$ff
     28  1060					      repend
     29  1061		       ff		      .byte.b	$ff
     28  1061					      repend
     29  1062		       ff		      .byte.b	$ff
     28  1062					      repend
     29  1063		       ff		      .byte.b	$ff
     28  1063					      repend
     29  1064		       ff		      .byte.b	$ff
     28  1064					      repend
     29  1065		       ff		      .byte.b	$ff
     28  1065					      repend
     29  1066		       ff		      .byte.b	$ff
     28  1066					      repend
     29  1067		       ff		      .byte.b	$ff
     28  1067					      repend
     29  1068		       ff		      .byte.b	$ff
     28  1068					      repend
     29  1069		       ff		      .byte.b	$ff
     28  1069					      repend
     29  106a		       ff		      .byte.b	$ff
     28  106a					      repend
     29  106b		       ff		      .byte.b	$ff
     28  106b					      repend
     29  106c		       ff		      .byte.b	$ff
     28  106c					      repend
     29  106d		       ff		      .byte.b	$ff
     28  106d					      repend
     29  106e		       ff		      .byte.b	$ff
     28  106e					      repend
     29  106f		       ff		      .byte.b	$ff
     28  106f					      repend
     29  1070		       ff		      .byte.b	$ff
     28  1070					      repend
     29  1071		       ff		      .byte.b	$ff
     28  1071					      repend
     29  1072		       ff		      .byte.b	$ff
     28  1072					      repend
     29  1073		       ff		      .byte.b	$ff
     28  1073					      repend
     29  1074		       ff		      .byte.b	$ff
     28  1074					      repend
     29  1075		       ff		      .byte.b	$ff
     28  1075					      repend
     29  1076		       ff		      .byte.b	$ff
     28  1076					      repend
     29  1077		       ff		      .byte.b	$ff
     28  1077					      repend
     29  1078		       ff		      .byte.b	$ff
     28  1078					      repend
     29  1079		       ff		      .byte.b	$ff
     28  1079					      repend
     29  107a		       ff		      .byte.b	$ff
     28  107a					      repend
     29  107b		       ff		      .byte.b	$ff
     28  107b					      repend
     29  107c		       ff		      .byte.b	$ff
     28  107c					      repend
     29  107d		       ff		      .byte.b	$ff
     28  107d					      repend
     29  107e		       ff		      .byte.b	$ff
     28  107e					      repend
     29  107f		       ff		      .byte.b	$ff
     28  107f					      repend
     29  1080		       ff		      .byte.b	$ff
     28  1080					      repend
     29  1081		       ff		      .byte.b	$ff
     28  1081					      repend
     29  1082		       ff		      .byte.b	$ff
     28  1082					      repend
     29  1083		       ff		      .byte.b	$ff
     28  1083					      repend
     29  1084		       ff		      .byte.b	$ff
     28  1084					      repend
     29  1085		       ff		      .byte.b	$ff
     28  1085					      repend
     29  1086		       ff		      .byte.b	$ff
     28  1086					      repend
     29  1087		       ff		      .byte.b	$ff
     28  1087					      repend
     29  1088		       ff		      .byte.b	$ff
     28  1088					      repend
     29  1089		       ff		      .byte.b	$ff
     28  1089					      repend
     29  108a		       ff		      .byte.b	$ff
     28  108a					      repend
     29  108b		       ff		      .byte.b	$ff
     28  108b					      repend
     29  108c		       ff		      .byte.b	$ff
     28  108c					      repend
     29  108d		       ff		      .byte.b	$ff
     28  108d					      repend
     29  108e		       ff		      .byte.b	$ff
     28  108e					      repend
     29  108f		       ff		      .byte.b	$ff
     28  108f					      repend
     29  1090		       ff		      .byte.b	$ff
     28  1090					      repend
     29  1091		       ff		      .byte.b	$ff
     28  1091					      repend
     29  1092		       ff		      .byte.b	$ff
     28  1092					      repend
     29  1093		       ff		      .byte.b	$ff
     28  1093					      repend
     29  1094		       ff		      .byte.b	$ff
     28  1094					      repend
     29  1095		       ff		      .byte.b	$ff
     28  1095					      repend
     29  1096		       ff		      .byte.b	$ff
     28  1096					      repend
     29  1097		       ff		      .byte.b	$ff
     28  1097					      repend
     29  1098		       ff		      .byte.b	$ff
     28  1098					      repend
     29  1099		       ff		      .byte.b	$ff
     28  1099					      repend
     29  109a		       ff		      .byte.b	$ff
     28  109a					      repend
     29  109b		       ff		      .byte.b	$ff
     28  109b					      repend
     29  109c		       ff		      .byte.b	$ff
     28  109c					      repend
     29  109d		       ff		      .byte.b	$ff
     28  109d					      repend
     29  109e		       ff		      .byte.b	$ff
     28  109e					      repend
     29  109f		       ff		      .byte.b	$ff
     28  109f					      repend
     29  10a0		       ff		      .byte.b	$ff
     28  10a0					      repend
     29  10a1		       ff		      .byte.b	$ff
     28  10a1					      repend
     29  10a2		       ff		      .byte.b	$ff
     28  10a2					      repend
     29  10a3		       ff		      .byte.b	$ff
     28  10a3					      repend
     29  10a4		       ff		      .byte.b	$ff
     28  10a4					      repend
     29  10a5		       ff		      .byte.b	$ff
     28  10a5					      repend
     29  10a6		       ff		      .byte.b	$ff
     28  10a6					      repend
     29  10a7		       ff		      .byte.b	$ff
     28  10a7					      repend
     29  10a8		       ff		      .byte.b	$ff
     28  10a8					      repend
     29  10a9		       ff		      .byte.b	$ff
     28  10a9					      repend
     29  10aa		       ff		      .byte.b	$ff
     28  10aa					      repend
     29  10ab		       ff		      .byte.b	$ff
     28  10ab					      repend
     29  10ac		       ff		      .byte.b	$ff
     28  10ac					      repend
     29  10ad		       ff		      .byte.b	$ff
     28  10ad					      repend
     29  10ae		       ff		      .byte.b	$ff
     28  10ae					      repend
     29  10af		       ff		      .byte.b	$ff
     28  10af					      repend
     29  10b0		       ff		      .byte.b	$ff
     28  10b0					      repend
     29  10b1		       ff		      .byte.b	$ff
     28  10b1					      repend
     29  10b2		       ff		      .byte.b	$ff
     28  10b2					      repend
     29  10b3		       ff		      .byte.b	$ff
     28  10b3					      repend
     29  10b4		       ff		      .byte.b	$ff
     28  10b4					      repend
     29  10b5		       ff		      .byte.b	$ff
     28  10b5					      repend
     29  10b6		       ff		      .byte.b	$ff
     28  10b6					      repend
     29  10b7		       ff		      .byte.b	$ff
     28  10b7					      repend
     29  10b8		       ff		      .byte.b	$ff
     28  10b8					      repend
     29  10b9		       ff		      .byte.b	$ff
     28  10b9					      repend
     29  10ba		       ff		      .byte.b	$ff
     28  10ba					      repend
     29  10bb		       ff		      .byte.b	$ff
     28  10bb					      repend
     29  10bc		       ff		      .byte.b	$ff
     28  10bc					      repend
     29  10bd		       ff		      .byte.b	$ff
     28  10bd					      repend
     29  10be		       ff		      .byte.b	$ff
     28  10be					      repend
     29  10bf		       ff		      .byte.b	$ff
     28  10bf					      repend
     29  10c0		       ff		      .byte.b	$ff
     28  10c0					      repend
     29  10c1		       ff		      .byte.b	$ff
     28  10c1					      repend
     29  10c2		       ff		      .byte.b	$ff
     28  10c2					      repend
     29  10c3		       ff		      .byte.b	$ff
     28  10c3					      repend
     29  10c4		       ff		      .byte.b	$ff
     28  10c4					      repend
     29  10c5		       ff		      .byte.b	$ff
     28  10c5					      repend
     29  10c6		       ff		      .byte.b	$ff
     28  10c6					      repend
     29  10c7		       ff		      .byte.b	$ff
     28  10c7					      repend
     29  10c8		       ff		      .byte.b	$ff
     28  10c8					      repend
     29  10c9		       ff		      .byte.b	$ff
     28  10c9					      repend
     29  10ca		       ff		      .byte.b	$ff
     28  10ca					      repend
     29  10cb		       ff		      .byte.b	$ff
     28  10cb					      repend
     29  10cc		       ff		      .byte.b	$ff
     28  10cc					      repend
     29  10cd		       ff		      .byte.b	$ff
     28  10cd					      repend
     29  10ce		       ff		      .byte.b	$ff
     28  10ce					      repend
     29  10cf		       ff		      .byte.b	$ff
     28  10cf					      repend
     29  10d0		       ff		      .byte.b	$ff
     28  10d0					      repend
     29  10d1		       ff		      .byte.b	$ff
     28  10d1					      repend
     29  10d2		       ff		      .byte.b	$ff
     28  10d2					      repend
     29  10d3		       ff		      .byte.b	$ff
     28  10d3					      repend
     29  10d4		       ff		      .byte.b	$ff
     28  10d4					      repend
     29  10d5		       ff		      .byte.b	$ff
     28  10d5					      repend
     29  10d6		       ff		      .byte.b	$ff
     28  10d6					      repend
     29  10d7		       ff		      .byte.b	$ff
     28  10d7					      repend
     29  10d8		       ff		      .byte.b	$ff
     28  10d8					      repend
     29  10d9		       ff		      .byte.b	$ff
     28  10d9					      repend
     29  10da		       ff		      .byte.b	$ff
     28  10da					      repend
     29  10db		       ff		      .byte.b	$ff
     28  10db					      repend
     29  10dc		       ff		      .byte.b	$ff
     28  10dc					      repend
     29  10dd		       ff		      .byte.b	$ff
     28  10dd					      repend
     29  10de		       ff		      .byte.b	$ff
     28  10de					      repend
     29  10df		       ff		      .byte.b	$ff
     28  10df					      repend
     29  10e0		       ff		      .byte.b	$ff
     28  10e0					      repend
     29  10e1		       ff		      .byte.b	$ff
     28  10e1					      repend
     29  10e2		       ff		      .byte.b	$ff
     28  10e2					      repend
     29  10e3		       ff		      .byte.b	$ff
     28  10e3					      repend
     29  10e4		       ff		      .byte.b	$ff
     28  10e4					      repend
     29  10e5		       ff		      .byte.b	$ff
     28  10e5					      repend
     29  10e6		       ff		      .byte.b	$ff
     28  10e6					      repend
     29  10e7		       ff		      .byte.b	$ff
     28  10e7					      repend
     29  10e8		       ff		      .byte.b	$ff
     28  10e8					      repend
     29  10e9		       ff		      .byte.b	$ff
     28  10e9					      repend
     29  10ea		       ff		      .byte.b	$ff
     28  10ea					      repend
     29  10eb		       ff		      .byte.b	$ff
     28  10eb					      repend
     29  10ec		       ff		      .byte.b	$ff
     28  10ec					      repend
     29  10ed		       ff		      .byte.b	$ff
     28  10ed					      repend
     29  10ee		       ff		      .byte.b	$ff
     28  10ee					      repend
     29  10ef		       ff		      .byte.b	$ff
     28  10ef					      repend
     29  10f0		       ff		      .byte.b	$ff
     28  10f0					      repend
     29  10f1		       ff		      .byte.b	$ff
     28  10f1					      repend
     29  10f2		       ff		      .byte.b	$ff
     28  10f2					      repend
     29  10f3		       ff		      .byte.b	$ff
     28  10f3					      repend
     29  10f4		       ff		      .byte.b	$ff
     28  10f4					      repend
     29  10f5		       ff		      .byte.b	$ff
     28  10f5					      repend
     29  10f6		       ff		      .byte.b	$ff
     28  10f6					      repend
     29  10f7		       ff		      .byte.b	$ff
     28  10f7					      repend
     29  10f8		       ff		      .byte.b	$ff
     28  10f8					      repend
     29  10f9		       ff		      .byte.b	$ff
     28  10f9					      repend
     29  10fa		       ff		      .byte.b	$ff
     28  10fa					      repend
     29  10fb		       ff		      .byte.b	$ff
     28  10fb					      repend
     29  10fc		       ff		      .byte.b	$ff
     28  10fc					      repend
     29  10fd		       ff		      .byte.b	$ff
     28  10fd					      repend
     29  10fe		       ff		      .byte.b	$ff
     28  10fe					      repend
     29  10ff		       ff		      .byte.b	$ff
     30  1100					      repend
     31  1100				   game
     32  1100				   .L00 		;  inline PlusROM_functions.asm
     33  1100
------- FILE PlusROM_functions.asm LEVEL 2 PASS 3
      0  1100					      include	PlusROM_functions.asm
      1  1100		       00 01	   PlusROM_functions =	1
      2  1100		       1f f0	   WriteToBuffer =	$1ff0
      3  1100		       1f f1	   WriteSendBuffer =	$1ff1
      4  1100		       1f f2	   ReceiveBuffer =	$1ff2
      5  1100		       1f f3	   ReceiveBufferSize =	$1ff3
      6  1100
      7  1100					      MAC	set_plusrom_api
      8  1100				   PlusROM_API
      9  1100					      .byte	{1}, 0, {2}, 0
     10  1100					      ENDM		; {1} = path, {2} = domain
     11  1100
------- FILE d:\Firmaplus\Firmaplus_intern\Atari\PlusROM\Projekte-batariBasic\CaveApocalypse\C.A.V.E. Apocalypse.bas.asm
     35  1100
     36  1100				   .
     37  1100							; 
     38  1100
     39  1100				   .L01 		;  set kernel_options pfcolors player1colors
     40  1100
     41  1100				   .L02 		;  set romsize 8kSC
     42  1100
     43  1100				   .L03 		;  set smartbranching on
     44  1100
     45  1100				   .
     46  1100							; 
     47  1100
     48  1100				   .L04 		;  const pfres = 4
     49  1100
     50  1100				   .L05 		;  const pfscore  =  1
     51  1100
     52  1100				   .
     53  1100							; 
     54  1100
     55  1100				   .L06 		;  rem gravity is acceleration (https://atariage.com/forums/topic/226881-gravity/?do=findComment&comment=3017307)
     56  1100
     57  1100				   .L07 		;  rem the smallest fraction is 1/256 rounded up here to 0.004
     58  1100
     59  1100				   .L08 		;  rem assuming gravity is applied each drawscreen this should
     60  1100
     61  1100				   .L09 		;  rem work out to ~7 pixels in 1 second, 28 pixels in 2 seconds
     62  1100
     63  1100				   .L010		;  rem 63 pixels in 3 seconds
     64  1100
     65  1100							;.gravity_player1.0.004.
     66  1100				   .L011		;  def gravity_player1 = 0.004
     67  1100
     68  1100							;.gravity_missile0.0.024.
     69  1100				   .L012		;  def gravity_missile0 = 0.024
     70  1100
     71  1100				   .
     72  1100							; 
     73  1100
     74  1100				   .L013		;  const player_min_x	=  10
     75  1100
     76  1100				   .L014		;  const player_max_x	=  134
     77  1100
     78  1100				   .L015		;  const player_min_y	=  2
     79  1100
     80  1100				   .L016		;  const player_max_y	=  76
     81  1100
     82  1100				   .L017		;  const _M_Edge_Top  =  2
     83  1100
     84  1100				   .L018		;  const _M_Edge_Bottom  =  88
     85  1100
     86  1100				   .L019		;  const _M_Edge_Left	=  14
     87  1100
     88  1100				   .L020		;  const _M_Edge_Right  =  148
     89  1100
     90  1100				   .
     91  1100							; 
     92  1100
     93  1100				   .L021		;  const scback  =  #$08
     94  1100
     95  1100				   .
     96  1100							; 
     97  1100
     98  1100				   .L022		;  const response_size_minus_1  =  23
     99  1100
    100  1100				   .
    101  1100							; 
    102  1100
    103  1100				   .
    104  1100							; 
    105  1100
    106  1100				   .
    107  1100							; 
    108  1100
    109  1100				   .
    110  1100							; 
    111  1100
    112  1100				   .L023		;  const req_load  =  0
    113  1100
    114  1100				   .L024		;  const req_level_up	=  1
    115  1100
    116  1100				   .L025		;  const req_game_over  =  2
    117  1100
    118  1100				   .L026		;  const req_move_left  =  3
    119  1100
    120  1100				   .L027		;  const req_move_up  =  4
    121  1100
    122  1100				   .L028		;  const req_move_right  =  5
    123  1100
    124  1100				   .L029		;  const req_move_down  =  6
    125  1100
    126  1100				   .L030		;  const req_level_reset  =  7
    127  1100
    128  1100				   .
    129  1100							; 
    130  1100
    131  1100				   .L031		;  const _00  =  $00
    132  1100
    133  1100				   .L032		;  const _02  =  $02
    134  1100
    135  1100				   .L033		;  const _04  =  $04
    136  1100
    137  1100				   .L034		;  const _06  =  $06
    138  1100
    139  1100				   .L035		;  const _08  =  $08
    140  1100
    141  1100				   .L036		;  const _0A  =  $0A
    142  1100
    143  1100				   .L037		;  const _0C  =  $0C
    144  1100
    145  1100				   .L038		;  const _0E  =  $0E
    146  1100
    147  1100				   .L039		;  const _10  =  $10
    148  1100
    149  1100				   .L040		;  const _12  =  $12
    150  1100
    151  1100				   .L041		;  const _14  =  $14
    152  1100
    153  1100				   .L042		;  const _16  =  $16
    154  1100
    155  1100				   .L043		;  const _18  =  $18
    156  1100
    157  1100				   .L044		;  const _1A  =  $1A
    158  1100
    159  1100				   .L045		;  const _1C  =  $1C
    160  1100
    161  1100				   .L046		;  const _1E  =  $1E
    162  1100
    163  1100				   .L047		;  const _20  =  $20
    164  1100
    165  1100				   .L048		;  const _22  =  $22
    166  1100
    167  1100				   .L049		;  const _24  =  $24
    168  1100
    169  1100				   .L050		;  const _26  =  $26
    170  1100
    171  1100				   .L051		;  const _28  =  $28
    172  1100
    173  1100				   .L052		;  const _2A  =  $2A
    174  1100
    175  1100				   .L053		;  const _2C  =  $2C
    176  1100
    177  1100				   .L054		;  const _2E  =  $2E
    178  1100
    179  1100				   .L055		;  const _30  =  $30
    180  1100
    181  1100				   .L056		;  const _32  =  $32
    182  1100
    183  1100				   .L057		;  const _34  =  $34
    184  1100
    185  1100				   .L058		;  const _36  =  $36
    186  1100
    187  1100				   .L059		;  const _38  =  $38
    188  1100
    189  1100				   .L060		;  const _3A  =  $3A
    190  1100
    191  1100				   .L061		;  const _3C  =  $3C
    192  1100
    193  1100				   .L062		;  const _3E  =  $3E
    194  1100
    195  1100				   .L063		;  const _40  =  $40
    196  1100
    197  1100				   .L064		;  const _42  =  $42
    198  1100
    199  1100				   .L065		;  const _44  =  $44
    200  1100
    201  1100				   .L066		;  const _46  =  $46
    202  1100
    203  1100				   .L067		;  const _48  =  $48
    204  1100
    205  1100				   .L068		;  const _4A  =  $4A
    206  1100
    207  1100				   .L069		;  const _4C  =  $4C
    208  1100
    209  1100				   .L070		;  const _4E  =  $4E
    210  1100
    211  1100				   .L071		;  const _50  =  $50
    212  1100
    213  1100				   .L072		;  const _52  =  $52
    214  1100
    215  1100				   .L073		;  const _54  =  $54
    216  1100
    217  1100				   .L074		;  const _56  =  $56
    218  1100
    219  1100				   .L075		;  const _58  =  $58
    220  1100
    221  1100				   .L076		;  const _5A  =  $5A
    222  1100
    223  1100				   .L077		;  const _5C  =  $5C
    224  1100
    225  1100				   .L078		;  const _5E  =  $5E
    226  1100
    227  1100				   .L079		;  const _60  =  $60
    228  1100
    229  1100				   .L080		;  const _62  =  $62
    230  1100
    231  1100				   .L081		;  const _64  =  $64
    232  1100
    233  1100				   .L082		;  const _66  =  $66
    234  1100
    235  1100				   .L083		;  const _68  =  $68
    236  1100
    237  1100				   .L084		;  const _6A  =  $6A
    238  1100
    239  1100				   .L085		;  const _6C  =  $6C
    240  1100
    241  1100				   .L086		;  const _6E  =  $6E
    242  1100
    243  1100				   .L087		;  const _70  =  $70
    244  1100
    245  1100				   .L088		;  const _72  =  $72
    246  1100
    247  1100				   .L089		;  const _74  =  $74
    248  1100
    249  1100				   .L090		;  const _76  =  $76
    250  1100
    251  1100				   .L091		;  const _78  =  $78
    252  1100
    253  1100				   .L092		;  const _7A  =  $7A
    254  1100
    255  1100				   .L093		;  const _7C  =  $7C
    256  1100
    257  1100				   .L094		;  const _7E  =  $7E
    258  1100
    259  1100				   .L095		;  const _80  =  $80
    260  1100
    261  1100				   .L096		;  const _82  =  $82
    262  1100
    263  1100				   .L097		;  const _84  =  $84
    264  1100
    265  1100				   .L098		;  const _86  =  $86
    266  1100
    267  1100				   .L099		;  const _88  =  $88
    268  1100
    269  1100				   .L0100		;  const _8A  =  $8A
    270  1100
    271  1100				   .L0101		;  const _8C  =  $8C
    272  1100
    273  1100				   .L0102		;  const _8E  =  $8E
    274  1100
    275  1100				   .L0103		;  const _90  =  $90
    276  1100
    277  1100				   .L0104		;  const _92  =  $92
    278  1100
    279  1100				   .L0105		;  const _94  =  $94
    280  1100
    281  1100				   .L0106		;  const _96  =  $96
    282  1100
    283  1100				   .L0107		;  const _98  =  $98
    284  1100
    285  1100				   .L0108		;  const _9A  =  $9A
    286  1100
    287  1100				   .L0109		;  const _9C  =  $9C
    288  1100
    289  1100				   .L0110		;  const _9E  =  $9E
    290  1100
    291  1100				   .L0111		;  const _A0  =  $A0
    292  1100
    293  1100				   .L0112		;  const _A2  =  $A2
    294  1100
    295  1100				   .L0113		;  const _A4  =  $A4
    296  1100
    297  1100				   .L0114		;  const _A6  =  $A6
    298  1100
    299  1100				   .L0115		;  const _A8  =  $A8
    300  1100
    301  1100				   .L0116		;  const _AA  =  $AA
    302  1100
    303  1100				   .L0117		;  const _AC  =  $AC
    304  1100
    305  1100				   .L0118		;  const _AE  =  $AE
    306  1100
    307  1100				   .L0119		;  const _B0  =  $B0
    308  1100
    309  1100				   .L0120		;  const _B2  =  $B2
    310  1100
    311  1100				   .L0121		;  const _B4  =  $B4
    312  1100
    313  1100				   .L0122		;  const _B6  =  $B6
    314  1100
    315  1100				   .L0123		;  const _B8  =  $B8
    316  1100
    317  1100				   .L0124		;  const _BA  =  $BA
    318  1100
    319  1100				   .L0125		;  const _BC  =  $BC
    320  1100
    321  1100				   .L0126		;  const _BE  =  $BE
    322  1100
    323  1100				   .L0127		;  const _C0  =  $C0
    324  1100
    325  1100				   .L0128		;  const _C2  =  $C2
    326  1100
    327  1100				   .L0129		;  const _C4  =  $C4
    328  1100
    329  1100				   .L0130		;  const _C6  =  $C6
    330  1100
    331  1100				   .L0131		;  const _C8  =  $C8
    332  1100
    333  1100				   .L0132		;  const _CA  =  $CA
    334  1100
    335  1100				   .L0133		;  const _CC  =  $CC
    336  1100
    337  1100				   .L0134		;  const _CE  =  $CE
    338  1100
    339  1100				   .L0135		;  const _D0  =  $D0
    340  1100
    341  1100				   .L0136		;  const _D2  =  $D2
    342  1100
    343  1100				   .L0137		;  const _D4  =  $D4
    344  1100
    345  1100				   .L0138		;  const _D6  =  $D6
    346  1100
    347  1100				   .L0139		;  const _D8  =  $D8
    348  1100
    349  1100				   .L0140		;  const _DA  =  $DA
    350  1100
    351  1100				   .L0141		;  const _DC  =  $DC
    352  1100
    353  1100				   .L0142		;  const _DE  =  $DE
    354  1100
    355  1100				   .L0143		;  const _E0  =  $E0
    356  1100
    357  1100				   .L0144		;  const _E2  =  $E2
    358  1100
    359  1100				   .L0145		;  const _E4  =  $E4
    360  1100
    361  1100				   .L0146		;  const _E6  =  $E6
    362  1100
    363  1100				   .L0147		;  const _E8  =  $E8
    364  1100
    365  1100				   .L0148		;  const _EA  =  $EA
    366  1100
    367  1100				   .L0149		;  const _EC  =  $EC
    368  1100
    369  1100				   .L0150		;  const _EE  =  $EE
    370  1100
    371  1100				   .L0151		;  const _F0  =  $F0
    372  1100
    373  1100				   .L0152		;  const _F2  =  $F2
    374  1100
    375  1100				   .L0153		;  const _F4  =  $F4
    376  1100
    377  1100				   .L0154		;  const _F6  =  $F6
    378  1100
    379  1100				   .L0155		;  const _F8  =  $F8
    380  1100
    381  1100				   .L0156		;  const _FA  =  $FA
    382  1100
    383  1100				   .L0157		;  const _FC  =  $FC
    384  1100
    385  1100				   .L0158		;  const _FE  =  $FE
    386  1100
    387  1100				   .
    388  1100							; 
    389  1100
    390  1100				   .
    391  1100							; 
    392  1100
    393  1100				   .
    394  1100							; 
    395  1100
    396  1100				   .
    397  1100							; 
    398  1100
    399  1100				   .
    400  1100							; 
    401  1100
    402  1100				   .
    403  1100							; 
    404  1100
    405  1100				   .
    406  1100							; 
    407  1100
    408  1100				   .
    409  1100							; 
    410  1100
    411  1100				   .
    412  1100							; 
    413  1100
    414  1100				   .
    415  1100							; 
    416  1100
    417  1100				   .
    418  1100							; 
    419  1100
    420  1100				   .
    421  1100							; 
    422  1100
    423  1100				   .
    424  1100							; 
    425  1100
    426  1100				   .
    427  1100							; 
    428  1100
    429  1100				   .
    430  1100							; 
    431  1100
    432  1100				   .
    433  1100							; 
    434  1100
    435  1100				   .
    436  1100							; 
    437  1100
    438  1100				   .
    439  1100							; 
    440  1100
    441  1100				   .
    442  1100							; 
    443  1100
    444  1100				   .
    445  1100							; 
    446  1100
    447  1100				   .
    448  1100							; 
    449  1100
    450  1100				   .
    451  1100							; 
    452  1100
    453  1100				   .
    454  1100							; 
    455  1100
    456  1100				   .
    457  1100							; 
    458  1100
    459  1100				   .
    460  1100							; 
    461  1100
    462  1100				   .
    463  1100							; 
    464  1100
    465  1100				   .
    466  1100							; 
    467  1100
    468  1100				   .
    469  1100							; 
    470  1100
    471  1100				   .
    472  1100							; 
    473  1100
    474  1100				   .
    475  1100							; 
    476  1100
    477  1100				   .
    478  1100							; 
    479  1100
    480  1100				   .
    481  1100							; 
    482  1100
    483  1100				   .
    484  1100							; 
    485  1100
    486  1100				   .
    487  1100							; 
    488  1100
    489  1100				   .
    490  1100							; 
    491  1100
    492  1100				   .
    493  1100							; 
    494  1100
    495  1100				   .
    496  1100							; 
    497  1100
    498  1100				   .
    499  1100							; 
    500  1100
    501  1100				   .
    502  1100							; 
    503  1100
    504  1100				   .
    505  1100							; 
    506  1100
    507  1100				   .
    508  1100							; 
    509  1100
    510  1100				   .
    511  1100							; 
    512  1100
    513  1100				   .
    514  1100							; 
    515  1100
    516  1100				   .
    517  1100							; 
    518  1100
    519  1100				   .
    520  1100							; 
    521  1100
    522  1100				   .
    523  1100							; 
    524  1100
    525  1100				   .
    526  1100							; 
    527  1100
    528  1100				   .
    529  1100							; 
    530  1100
    531  1100				   .
    532  1100							; 
    533  1100
    534  1100				   .
    535  1100							; 
    536  1100
    537  1100				   .
    538  1100							; 
    539  1100
    540  1100				   .
    541  1100							; 
    542  1100
    543  1100				   .
    544  1100							; 
    545  1100
    546  1100				   .
    547  1100							; 
    548  1100
    549  1100				   .
    550  1100							; 
    551  1100
    552  1100				   .
    553  1100							; 
    554  1100
    555  1100				   .
    556  1100							; 
    557  1100
    558  1100				   .
    559  1100							; 
    560  1100
    561  1100				   .
    562  1100							; 
    563  1100
    564  1100				   .
    565  1100							; 
    566  1100
    567  1100				   .
    568  1100							; 
    569  1100
    570  1100				   .
    571  1100							; 
    572  1100
    573  1100				   .
    574  1100							; 
    575  1100
    576  1100				   .
    577  1100							; 
    578  1100
    579  1100				   .
    580  1100							; 
    581  1100
    582  1100				   .
    583  1100							; 
    584  1100
    585  1100				   .
    586  1100							; 
    587  1100
    588  1100				   .
    589  1100							; 
    590  1100
    591  1100				   .
    592  1100							; 
    593  1100
    594  1100				   .
    595  1100							; 
    596  1100
    597  1100				   .
    598  1100							; 
    599  1100
    600  1100				   .
    601  1100							; 
    602  1100
    603  1100				   .
    604  1100							; 
    605  1100
    606  1100				   .
    607  1100							; 
    608  1100
    609  1100				   .
    610  1100							; 
    611  1100
    612  1100				   .
    613  1100							; 
    614  1100
    615  1100				   .
    616  1100							; 
    617  1100
    618  1100				   .
    619  1100							; 
    620  1100
    621  1100				   .
    622  1100							; 
    623  1100
    624  1100				   .
    625  1100							; 
    626  1100
    627  1100				   .
    628  1100							; 
    629  1100
    630  1100				   .
    631  1100							; 
    632  1100
    633  1100				   .
    634  1100							; 
    635  1100
    636  1100				   .
    637  1100							; 
    638  1100
    639  1100				   .
    640  1100							; 
    641  1100
    642  1100				   .
    643  1100							; 
    644  1100
    645  1100				   .
    646  1100							; 
    647  1100
    648  1100				   .
    649  1100							; 
    650  1100
    651  1100				   .
    652  1100							; 
    653  1100
    654  1100				   .
    655  1100							; 
    656  1100
    657  1100				   .
    658  1100							; 
    659  1100
    660  1100				   .
    661  1100							; 
    662  1100
    663  1100				   .
    664  1100							; 
    665  1100
    666  1100				   .
    667  1100							; 
    668  1100
    669  1100				   .
    670  1100							; 
    671  1100
    672  1100				   .
    673  1100							; 
    674  1100
    675  1100				   .
    676  1100							; 
    677  1100
    678  1100				   .
    679  1100							; 
    680  1100
    681  1100				   .
    682  1100							; 
    683  1100
    684  1100				   .
    685  1100							; 
    686  1100
    687  1100				   .
    688  1100							; 
    689  1100
    690  1100				   .
    691  1100							; 
    692  1100
    693  1100				   .
    694  1100							; 
    695  1100
    696  1100				   .
    697  1100							; 
    698  1100
    699  1100				   .
    700  1100							; 
    701  1100
    702  1100				   .
    703  1100							; 
    704  1100
    705  1100				   .
    706  1100							; 
    707  1100
    708  1100				   .
    709  1100							; 
    710  1100
    711  1100				   .
    712  1100							; 
    713  1100
    714  1100				   .
    715  1100							; 
    716  1100
    717  1100				   .
    718  1100							; 
    719  1100
    720  1100				   .
    721  1100							; 
    722  1100
    723  1100				   .
    724  1100							; 
    725  1100
    726  1100				   .
    727  1100							; 
    728  1100
    729  1100				   .
    730  1100							; 
    731  1100
    732  1100				   .
    733  1100							; 
    734  1100
    735  1100				   .
    736  1100							; 
    737  1100
    738  1100				   .
    739  1100							; 
    740  1100
    741  1100				   .
    742  1100							; 
    743  1100
    744  1100				   .
    745  1100							; 
    746  1100
    747  1100				   .
    748  1100							; 
    749  1100
    750  1100				   .
    751  1100							; 
    752  1100
    753  1100				   .
    754  1100							; 
    755  1100
    756  1100				   .
    757  1100							; 
    758  1100
    759  1100				   .
    760  1100							; 
    761  1100
    762  1100				   .
    763  1100							; 
    764  1100
    765  1100				   .
    766  1100							; 
    767  1100
    768  1100				   .
    769  1100							; 
    770  1100
    771  1100				   .
    772  1100							; 
    773  1100
    774  1100				   .
    775  1100							; 
    776  1100
    777  1100				   .
    778  1100							; 
    779  1100
    780  1100				   .
    781  1100							; 
    782  1100
    783  1100				   .
    784  1100							; 
    785  1100
    786  1100				   .
    787  1100							; 
    788  1100
    789  1100				   .
    790  1100							; 
    791  1100
    792  1100				   .
    793  1100							; 
    794  1100
    795  1100				   .
    796  1100							; 
    797  1100
    798  1100				   .
    799  1100							; 
    800  1100
    801  1100				   .
    802  1100							; 
    803  1100
    804  1100				   .
    805  1100							; 
    806  1100
    807  1100				   .
    808  1100							; 
    809  1100
    810  1100				   .
    811  1100							; 
    812  1100
    813  1100				   .
    814  1100							; 
    815  1100
    816  1100				   .
    817  1100							; 
    818  1100
    819  1100				   .
    820  1100							; 
    821  1100
    822  1100				   .
    823  1100							; 
    824  1100
    825  1100				   .
    826  1100							; 
    827  1100
    828  1100				   .
    829  1100							; 
    830  1100
    831  1100				   .
    832  1100							; 
    833  1100
    834  1100				   .
    835  1100							; 
    836  1100
    837  1100				   .L0159		;  dim _sc1  =  score
    838  1100
    839  1100				   .L0160		;  dim _sc2  =  score + 1
    840  1100
    841  1100				   .L0161		;  dim _sc3  =  score + 2
    842  1100
    843  1100				   .
    844  1100							; 
    845  1100
    846  1100				   .L0162		;  dim request_pending  =  a
    847  1100
    848  1100				   .L0163		;  dim delay_counter  =  b
    849  1100
    850  1100				   .L0164		;  dim frame_counter  =  c
    851  1100
    852  1100				   .
    853  1100							; 
    854  1100
    855  1100				   .L0165		;  dim _BitOp_M0_Dir  =  d
    856  1100
    857  1100				   .L0166		;  dim _Bit0_M0_Dir_Up  =  d
    858  1100
    859  1100				   .L0167		;  dim _Bit1_M0_Dir_Down  =  d
    860  1100
    861  1100				   .L0168		;  dim _Bit2_M0_Dir_Left  =  d
    862  1100
    863  1100				   .L0169		;  dim _Bit3_M0_Dir_Right  =  d
    864  1100
    865  1100				   .
    866  1100							; 
    867  1100
    868  1100				   .L0170		;  dim _BitOp_P1_Dir  =  e
    869  1100
    870  1100				   .L0171		;  dim _Bit0_P1_Dir_Up  =  e
    871  1100
    872  1100				   .L0172		;  dim _Bit1_P1_Dir_Down  =  e
    873  1100
    874  1100				   .L0173		;  dim _Bit2_P1_Dir_Left  =  e
    875  1100
    876  1100				   .L0174		;  dim _Bit3_P1_Dir_Right  =  e
    877  1100
    878  1100				   .L0175		;  dim P1_facing  =  f
    879  1100
    880  1100				   .
    881  1100							; 
    882  1100
    883  1100				   .L0176		;  dim _Ch0_Sound  =  g
    884  1100
    885  1100				   .L0177		;  dim _Ch0_Duration  =  h
    886  1100
    887  1100				   .L0178		;  dim _Ch0_Counter  =  i
    888  1100
    889  1100				   .
    890  1100							; 
    891  1100
    892  1100				   .L0179		;  dim extra_wall_move_x  =  j
    893  1100
    894  1100				   .L0180		;  dim roommate_move_x  =  k
    895  1100
    896  1100				   .L0181		;  dim roommate_type  =  l
    897  1100
    898  1100				   .
    899  1100							; 
    900  1100
    901  1100				   .
    902  1100							; 
    903  1100
    904  1100				   .L0182		;  rem 16 bit velocity
    905  1100
    906  1100				   .L0183		;  dim M0y_velocity  =  s.t
    907  1100
    908  1100				   .L0184		;  rem 16 bit missile0 y position
    909  1100
    910  1100				   .L0185		;  dim M0y_position  =  missile0y.u
    911  1100
    912  1100				   .
    913  1100							; 
    914  1100
    915  1100				   .L0186		;  rem 16 bit velocity
    916  1100
    917  1100				   .L0187		;  dim P1y_velocity  =  v.w
    918  1100
    919  1100				   .L0188		;  rem 16 bit player1 y position
    920  1100
    921  1100				   .L0189		;  dim P1y_position  =  player1y.x
    922  1100
    923  1100				   .
    924  1100							; 
    925  1100
    926  1100				   .L0190		;  rem First nibble of y is for direction
    927  1100
    928  1100				   .L0191		;  dim _BitOp_misc  =	y
    929  1100
    930  1100				   .L0192		;  dim _Bit0_roommate_Dir  =  y
    931  1100
    932  1100				   .L0193		;  dim _Bit1_Wall_Dir	=  y
    933  1100
    934  1100				   .L0194		;  dim _Bit6_Flip_P0  =  y
    935  1100
    936  1100				   .L0195		;  dim _Bit7_M0_Moving  =  y
    937  1100
    938  1100				   .
    939  1100							; 
    940  1100
    941  1100				   .
    942  1100							; 
    943  1100
    944  1100				   .L0196		;  dim r_extra_wall_startpos  =  r111
    945  1100
    946  1100				   .L0197		;  dim w_extra_wall_startpos  =  w111
    947  1100
    948  1100				   .L0198		;  dim r_extra_wall_type  =  r110
    949  1100
    950  1100				   .L0199		;  dim w_extra_wall_type  =  w110
    951  1100
    952  1100				   .L0200		;  dim r_extra_wall_width  =  r109
    953  1100
    954  1100				   .L0201		;  dim w_extra_wall_width  =  w109
    955  1100
    956  1100				   .L0202		;  dim r_roommate_x_startpos  =  r108
    957  1100
    958  1100				   .L0203		;  dim w_roommate_x_startpos  =  w108
    959  1100
    960  1100				   .L0204		;  dim r_roommate_y_startpos  =  r107
    961  1100
    962  1100				   .L0205		;  dim w_roommate_y_startpos  =  w107
    963  1100
    964  1100				   .L0206		;  dim r_roommate_type_and_range  =  r106
    965  1100
    966  1100				   .L0207		;  dim w_roommate_type_and_range  =  w106
    967  1100
    968  1100				   .L0208		;  dim r_room_color_bottom  =	r105
    969  1100
    970  1100				   .L0209		;  dim w_room_color_bottom  =	w105
    971  1100
    972  1100				   .L0210		;  dim r_room_color_middle  =	r101
    973  1100
    974  1100				   .L0211		;  dim w_room_color_middle  =	w101
    975  1100
    976  1100				   .L0212		;  dim r_room_color_top  =  r100
    977  1100
    978  1100				   .L0213		;  dim w_room_color_top  =  w100
    979  1100
    980  1100				   .
    981  1100							; 
    982  1100
    983  1100				   .
    984  1100							; 
    985  1100
    986  1100				   .
    987  1100							; 
    988  1100
    989  1100				   .L0214		;  dim w_room_definition_start  =  w100
    990  1100
    991  1100				   .
    992  1100							; 
    993  1100
    994  1100				   .
    995  1100							; 
    996  1100
    997  1100				   .
    998  1100							; 
    999  1100
   1000  1100				   .
   1001  1100							; 
   1002  1100
   1003  1100				   ._Start
   1004  1100							; _Start
   1005  1100
   1006  1100				   .L0215		;  WriteSendBuffer  =	req_load  :  request_pending  =  1
   1007  1100
   1008  1100		       a9 00		      LDA	#req_load
   1009  1102		       8d f1 1f 	      STA	WriteSendBuffer
   1010  1105		       a9 01		      LDA	#1
   1011  1107		       85 d4		      STA	request_pending
   1012  1109				   .L0216		;  frame_counter  =  0  :  COLUP0  =  _1C
   1013  1109
   1014  1109		       a9 00		      LDA	#0
   1015  110b		       85 d6		      STA	frame_counter
   1016  110d		       a9 1c		      LDA	#_1C
   1017  110f		       85 06		      STA	COLUP0
   1018  1111				   .L0217		;  score  =  0  :  pfscore1  =  255  :  pfscore2  =  255  :  pfscorecolor  =  _1C  :  scorecolor  =  _0E
   1019  1111
   1020  1111		       a9 00		      LDA	#$00
   1021  1113		       85 95		      STA	score+2
   1022  1115		       a9 00		      LDA	#$00
   1023  1117		       85 94		      STA	score+1
   1024  1119		       a9 00		      LDA	#$00
   1025  111b		       85 93		      STA	score
   1026  111d		       a9 ff		      LDA	#255
   1027  111f		       85 f2		      STA	pfscore1
   1028  1121		       85 f3		      STA	pfscore2
   1029  1123		       a9 1c		      LDA	#_1C
   1030  1125		       85 f4		      STA	pfscorecolor
   1031  1127		       a9 0e		      LDA	#_0E
   1032  1129		       85 a3		      STA	scorecolor
   1033  112b				   .L0218		;  player1x  =  30  :	player1y  =  0
   1034  112b
   1035  112b		       a9 1e		      LDA	#30
   1036  112d		       85 81		      STA	player1x
   1037  112f		       a9 00		      LDA	#0
   1038  1131		       85 86		      STA	player1y
   1039  1133				   .L0219		;  AUDV0  =  0  :  AUDV1  =  0
   1040  1133
   1041  1133		       a9 00		      LDA	#0
   1042  1135		       85 19		      STA	AUDV0
   1043  1137		       85 1a		      STA	AUDV1
   1044  1139				   .L0220		;  missile0x  =  200  :  missile0y  =	200  :	missile0height	=  1  :  bally	=  0
   1045  1139
   1046  1139		       a9 c8		      LDA	#200
   1047  113b		       85 82		      STA	missile0x
   1048  113d		       85 91		      STA	missile0y
   1049  113f		       a9 01		      LDA	#1
   1050  1141		       85 90		      STA	missile0height
   1051  1143		       a9 00		      LDA	#0
   1052  1145		       85 89		      STA	bally
   1053  1147				   .L0221		;  w_extra_wall_startpos  =  200
   1054  1147
   1055  1147		       a9 c8		      LDA	#200
   1056  1149		       8d 6f f0 	      STA	w_extra_wall_startpos
   1057  114c				   .L0222		;  w_roommate_y_startpos  =  200  :  player0y	=  200	:  player0x  =	0
   1058  114c
   1059  114c		       a9 c8		      LDA	#200
   1060  114e		       8d 6b f0 	      STA	w_roommate_y_startpos
   1061  1151		       85 85		      STA	player0y
   1062  1153		       a9 00		      LDA	#0
   1063  1155		       85 80		      STA	player0x
   1064  1157				   .
   1065  1157							; 
   1066  1157
   1067  1157				   .L0223		;  pfclear
   1068  1157
   1069  1157		       a9 00		      LDA	#0
   1070  1159		       85 ee		      sta	temp7
   1071  115b		       a9 d1		      lda	#>(ret_point1-1)
   1072  115d		       48		      pha
   1073  115e		       a9 70		      lda	#<(ret_point1-1)
   1074  1160		       48		      pha
   1075  1161		       a9 f3		      lda	#>(pfclear-1)
   1076  1163		       48		      pha
   1077  1164		       a9 8f		      lda	#<(pfclear-1)
   1078  1166		       48		      pha
   1079  1167		       a5 ee		      lda	temp7
   1080  1169		       48		      pha
   1081  116a		       8a		      txa
   1082  116b		       48		      pha
   1083  116c		       a2 02		      ldx	#2
   1084  116e		       4c e8 ff 	      jmp	BS_jsr
   1085  1171				   ret_point1
   1086  1171				   .L0224		;  playfield:
   1087  1171
   1088  1171					      ifconst	pfres
   1089  1171		       a2 0b		      ldx	#(3>pfres)*(pfres*pfwidth-1)+(3<=pfres)*11
   1090  1173				  -	      else
   1091  1173				  -	      ldx	#((3*pfwidth-1)*((3*pfwidth-1)<47))+(47*((3*pfwidth-1)>=47))
   1092  1173					      endif
   1093  1173		       4c 82 d1 	      jmp	pflabel0
   1094  1176				   PF_data0
   1095  1176		       ff 0f		      .byte.b	%11111111, %00001111
   1096  1178					      if	(pfwidth>2)
   1097  1178		       1f ff		      .byte.b	%00011111, %11111111
   1098  117a					      endif
   1099  117a		       f8 00		      .byte.b	%11111000, %00000000
   1100  117c					      if	(pfwidth>2)
   1101  117c		       00 fc		      .byte.b	%00000000, %11111100
   1102  117e					      endif
   1103  117e		       ff 0f		      .byte.b	%11111111, %00001111
   1104  1180					      if	(pfwidth>2)
   1105  1180		       1f ff		      .byte.b	%00011111, %11111111
   1106  1182					      endif
   1107  1182				   pflabel0
   1108  1182		       bd 76 d1 	      lda	PF_data0,x
   1109  1185		       9d 70 10 	      sta	playfield-128,x
   1110  1188		       ca		      dex
   1111  1189		       10 f7		      bpl	pflabel0
   1112  118b				   .
   1113  118b							; 
   1114  118b
   1115  118b				   .L0225		;  player1color:
   1116  118b
   1117  118b		       a2 2a		      LDX	#<playercolorL0225_1
   1118  118d		       86 87		      STX	player1color
   1119  118f		       a9 f6		      LDA	#>playercolorL0225_1
   1120  1191		       85 88		      STA	player1color+1
   1121  1193				   .
   1122  1193							; 
   1123  1193
   1124  1193				   .
   1125  1193							; 
   1126  1193
   1127  1193				   .
   1128  1193							; 
   1129  1193
   1130  1193				   .L0226		;  w_room_color_top  =  _22  :  w_room_color_middle  =  _24  :  w_room_color_bottom  =  _26
   1131  1193
   1132  1193		       a9 22		      LDA	#_22
   1133  1195		       8d 64 f0 	      STA	w_room_color_top
   1134  1198		       a9 24		      LDA	#_24
   1135  119a		       8d 65 f0 	      STA	w_room_color_middle
   1136  119d		       a9 26		      LDA	#_26
   1137  119f		       8d 69 f0 	      STA	w_room_color_bottom
   1138  11a2				   .L0227		;  asm
   1139  11a2
   1140  11a2		       a9 f0		      lda	#>(r_room_color_middle-132+pfres*pfwidth)
   1141  11a4
   1142  11a4		       85 f1		      sta	pfcolortable+1
   1143  11a6
   1144  11a6		       a9 71		      lda	#<(r_room_color_middle-132+pfres*pfwidth)
   1145  11a8
   1146  11a8		       85 f0		      sta	pfcolortable
   1147  11aa
   1148  11aa				   ._inital_wait
   1149  11aa							; _inital_wait
   1150  11aa
   1151  11aa				   .L0228		;  COLUPF  =  r_room_color_top
   1152  11aa
   1153  11aa		       ad e4 f0 	      LDA	r_room_color_top
   1154  11ad		       85 08		      STA	COLUPF
   1155  11af				   .L0229		;  COLUBK  =  _00
   1156  11af
   1157  11af		       a9 00		      LDA	#_00
   1158  11b1		       85 09		      STA	COLUBK
   1159  11b3				   .L0230		;  drawscreen
   1160  11b3
   1161  11b3		       85 ee		      sta	temp7
   1162  11b5		       a9 d1		      lda	#>(ret_point2-1)
   1163  11b7		       48		      pha
   1164  11b8		       a9 ca		      lda	#<(ret_point2-1)
   1165  11ba		       48		      pha
   1166  11bb		       a9 f5		      lda	#>(drawscreen-1)
   1167  11bd		       48		      pha
   1168  11be		       a9 82		      lda	#<(drawscreen-1)
   1169  11c0		       48		      pha
   1170  11c1		       a5 ee		      lda	temp7
   1171  11c3		       48		      pha
   1172  11c4		       8a		      txa
   1173  11c5		       48		      pha
   1174  11c6		       a2 02		      ldx	#2
   1175  11c8		       4c e8 ff 	      jmp	BS_jsr
   1176  11cb				   ret_point2
   1177  11cb				   .L0231		;  if ! joy0fire then goto _inital_wait
   1178  11cb
   1179  11cb		       24 0c		      bit	INPT4
   1180  11cd		       10 03		      BPL	.skipL0231
   1181  11cf				   .condpart0
   1182  11cf		       4c aa d1 	      jmp	._inital_wait
   1183  11d2
   1184  11d2				   .skipL0231
   1185  11d2				   .
   1186  11d2							; 
   1187  11d2
   1188  11d2				   .L0232		;  player1y  =  player_min_y
   1189  11d2
   1190  11d2		       a9 02		      LDA	#player_min_y
   1191  11d4		       85 86		      STA	player1y
   1192  11d6				   .
   1193  11d6							; 
   1194  11d6
   1195  11d6				   .
   1196  11d6							; 
   1197  11d6
   1198  11d6				   .L0233		;  w_room_color_top  =  _82  :  w_room_color_middle  =  _84  :  w_room_color_bottom  =  _86
   1199  11d6
   1200  11d6		       a9 82		      LDA	#_82
   1201  11d8		       8d 64 f0 	      STA	w_room_color_top
   1202  11db		       a9 84		      LDA	#_84
   1203  11dd		       8d 65 f0 	      STA	w_room_color_middle
   1204  11e0		       a9 86		      LDA	#_86
   1205  11e2		       8d 69 f0 	      STA	w_room_color_bottom
   1206  11e5				   .
   1207  11e5							; 
   1208  11e5
   1209  11e5				   .__Main_Loop
   1210  11e5							; __Main_Loop
   1211  11e5
   1212  11e5				   .L0234		;  COLUPF  =  r_room_color_top
   1213  11e5
   1214  11e5		       ad e4 f0 	      LDA	r_room_color_top
   1215  11e8		       85 08		      STA	COLUPF
   1216  11ea				   .L0235		;  NUSIZ1  =  $05
   1217  11ea
   1218  11ea		       a9 05		      LDA	#$05
   1219  11ec		       85 05		      STA	NUSIZ1
   1220  11ee				   .L0236		;  NUSIZ0  =  $10
   1221  11ee
   1222  11ee		       a9 10		      LDA	#$10
   1223  11f0		       85 04		      STA	NUSIZ0
   1224  11f2				   .L0237		;  COLUBK  =  _00
   1225  11f2
   1226  11f2		       a9 00		      LDA	#_00
   1227  11f4		       85 09		      STA	COLUBK
   1228  11f6				   .
   1229  11f6							; 
   1230  11f6
   1231  11f6				   .L0238		;  if switchreset then goto _Start
   1232  11f6
   1233  11f6		       a9 01		      lda	#1
   1234  11f8		       2c 82 02 	      bit	SWCHB
   1235  11fb		       d0 03		      BNE	.skipL0238
   1236  11fd				   .condpart1
   1237  11fd		       4c 00 d1 	      jmp	._Start
   1238  1200
   1239  1200				   .skipL0238
   1240  1200				   .
   1241  1200							; 
   1242  1200
   1243  1200				   .L0239		;  if frame_counter{2} then player1: 
   1244  1200
   1245  1200		       a5 d6		      LDA	frame_counter
   1246  1202		       29 04		      AND	#4
   1247  1204		       f0 0c		      BEQ	.skipL0239
   1248  1206				   .condpart2
   1249  1206		       a2 32		      LDX	#<player2then_1
   1250  1208		       86 8c		      STX	player1pointerlo
   1251  120a		       a9 f6		      LDA	#>player2then_1
   1252  120c		       85 8d		      STA	player1pointerhi
   1253  120e		       a9 07		      LDA	#7
   1254  1210		       85 8f		      STA	player1height
   1255  1212				   .skipL0239
   1256  1212				   .L0240		;  if ! frame_counter{2} then player1:
   1257  1212
   1258  1212		       a5 d6		      LDA	frame_counter
   1259  1214		       29 04		      AND	#4
   1260  1216		       d0 0c		      BNE	.skipL0240
   1261  1218				   .condpart3
   1262  1218		       a2 3a		      LDX	#<player3then_1
   1263  121a		       86 8c		      STX	player1pointerlo
   1264  121c		       a9 f6		      LDA	#>player3then_1
   1265  121e		       85 8d		      STA	player1pointerhi
   1266  1220		       a9 07		      LDA	#7
   1267  1222		       85 8f		      STA	player1height
   1268  1224				   .skipL0240
   1269  1224				   .
   1270  1224							; 
   1271  1224
   1272  1224				   .L0241		;  on roommate_type goto _roommate_Enemy_def _roommate_Air_Missile_def _roommate_Fuel_def _roommate_Soldier_def
   1273  1224
   1274  1224		       a6 df		      LDX	roommate_type
   1275  1226		       bd 2f d2 	      LDA	.L0241jumptablehi,x
   1276  1229		       48		      PHA
   1277  122a		       bd 33 d2 	      LDA	.L0241jumptablelo,x
   1278  122d		       48		      PHA
   1279  122e		       60		      RTS
   1280  122f				   .L0241jumptablehi
   1281  122f		       d2		      .byte.b	>(._roommate_Enemy_def-1)
   1282  1230		       d2		      .byte.b	>(._roommate_Air_Missile_def-1)
   1283  1231		       d2		      .byte.b	>(._roommate_Fuel_def-1)
   1284  1232		       d2		      .byte.b	>(._roommate_Soldier_def-1)
   1285  1233				   .L0241jumptablelo
   1286  1233		       36		      .byte.b	<(._roommate_Enemy_def-1)
   1287  1234		       5d		      .byte.b	<(._roommate_Air_Missile_def-1)
   1288  1235		       6c		      .byte.b	<(._roommate_Fuel_def-1)
   1289  1236		       7b		      .byte.b	<(._roommate_Soldier_def-1)
   1290  1237				   .
   1291  1237							; 
   1292  1237
   1293  1237				   ._roommate_Enemy_def
   1294  1237							; _roommate_Enemy_def
   1295  1237
   1296  1237				   .L0242		;  if frame_counter{2} then player0: 
   1297  1237
   1298  1237		       a5 d6		      LDA	frame_counter
   1299  1239		       29 04		      AND	#4
   1300  123b		       f0 0c		      BEQ	.skipL0242
   1301  123d				   .condpart4
   1302  123d		       a2 42		      LDX	#<player4then_0
   1303  123f		       86 8a		      STX	player0pointerlo
   1304  1241		       a9 f6		      LDA	#>player4then_0
   1305  1243		       85 8b		      STA	player0pointerhi
   1306  1245		       a9 06		      LDA	#6
   1307  1247		       85 8e		      STA	player0height
   1308  1249				   .skipL0242
   1309  1249				   .L0243		;  if !frame_counter{2} then player0: 
   1310  1249
   1311  1249		       a5 d6		      LDA	frame_counter
   1312  124b		       29 04		      AND	#4
   1313  124d		       d0 0c		      BNE	.skipL0243
   1314  124f				   .condpart5
   1315  124f		       a2 49		      LDX	#<player5then_0
   1316  1251		       86 8a		      STX	player0pointerlo
   1317  1253		       a9 f6		      LDA	#>player5then_0
   1318  1255		       85 8b		      STA	player0pointerhi
   1319  1257		       a9 06		      LDA	#6
   1320  1259		       85 8e		      STA	player0height
   1321  125b				   .skipL0243
   1322  125b				   .L0244		;  goto _roommate_End_def
   1323  125b
   1324  125b		       4c a0 d2 	      jmp	._roommate_End_def
   1325  125e
   1326  125e				   .
   1327  125e							; 
   1328  125e
   1329  125e				   ._roommate_Air_Missile_def
   1330  125e							; _roommate_Air_Missile_def
   1331  125e
   1332  125e				   .L0245		;  player0: 
   1333  125e
   1334  125e		       a2 50		      LDX	#<playerL0245_0
   1335  1260		       86 8a		      STX	player0pointerlo
   1336  1262		       a9 f6		      LDA	#>playerL0245_0
   1337  1264		       85 8b		      STA	player0pointerhi
   1338  1266		       a9 0b		      LDA	#11
   1339  1268		       85 8e		      STA	player0height
   1340  126a				   .L0246		;  goto _roommate_End_def
   1341  126a
   1342  126a		       4c a0 d2 	      jmp	._roommate_End_def
   1343  126d
   1344  126d				   .
   1345  126d							; 
   1346  126d
   1347  126d				   ._roommate_Fuel_def
   1348  126d							; _roommate_Fuel_def
   1349  126d
   1350  126d				   .L0247		;  player0: 
   1351  126d
   1352  126d		       a2 5c		      LDX	#<playerL0247_0
   1353  126f		       86 8a		      STX	player0pointerlo
   1354  1271		       a9 f6		      LDA	#>playerL0247_0
   1355  1273		       85 8b		      STA	player0pointerhi
   1356  1275		       a9 19		      LDA	#25
   1357  1277		       85 8e		      STA	player0height
   1358  1279				   .L0248		;    goto _roommate_End_def
   1359  1279
   1360  1279		       4c a0 d2 	      jmp	._roommate_End_def
   1361  127c
   1362  127c				   .
   1363  127c							; 
   1364  127c
   1365  127c				   ._roommate_Soldier_def
   1366  127c							; _roommate_Soldier_def
   1367  127c
   1368  127c				   .L0249		;    if frame_counter{2} then player0: 
   1369  127c
   1370  127c		       a5 d6		      LDA	frame_counter
   1371  127e		       29 04		      AND	#4
   1372  1280		       f0 0c		      BEQ	.skipL0249
   1373  1282				   .condpart6
   1374  1282		       a2 76		      LDX	#<player6then_0
   1375  1284		       86 8a		      STX	player0pointerlo
   1376  1286		       a9 f6		      LDA	#>player6then_0
   1377  1288		       85 8b		      STA	player0pointerhi
   1378  128a		       a9 03		      LDA	#3
   1379  128c		       85 8e		      STA	player0height
   1380  128e				   .skipL0249
   1381  128e				   .L0250		;  if !frame_counter{2} then player0: 
   1382  128e
   1383  128e		       a5 d6		      LDA	frame_counter
   1384  1290		       29 04		      AND	#4
   1385  1292		       d0 0c		      BNE	.skipL0250
   1386  1294				   .condpart7
   1387  1294		       a2 7a		      LDX	#<player7then_0
   1388  1296		       86 8a		      STX	player0pointerlo
   1389  1298		       a9 f6		      LDA	#>player7then_0
   1390  129a		       85 8b		      STA	player0pointerhi
   1391  129c		       a9 03		      LDA	#3
   1392  129e		       85 8e		      STA	player0height
   1393  12a0				   .skipL0250
   1394  12a0				   ._roommate_End_def
   1395  12a0							; _roommate_End_def
   1396  12a0
   1397  12a0				   .
   1398  12a0							; 
   1399  12a0
   1400  12a0				   .
   1401  12a0							; 
   1402  12a0
   1403  12a0				   .L0251		;  if r_extra_wall_type  <  4 then _Skip_Wall_Movement
   1404  12a0
   1405  12a0		       ad ee f0 	      LDA	r_extra_wall_type
   1406  12a3		       c9 04		      CMP	#4
   1407  12a5					      if	((* - ._Skip_Wall_Movement) < 127) && ((* - ._Skip_Wall_Movement) > -128)
   1408  12a5		       90 30		      bcc	._Skip_Wall_Movement
   1409  12a7				  -	      else
   1410  12a7				  -	      bcs	.0skip_Skip_Wall_Movement
   1411  12a7				  -	      jmp	._Skip_Wall_Movement
   1412  12a7				  -.0skip_Skip_Wall_Movement
   1413  12a7					      endif
   1414  12a7				   .L0252		;  if _Bit1_Wall_Dir{1} then _Wall_move_left
   1415  12a7
   1416  12a7		       a5 ec		      LDA	_Bit1_Wall_Dir
   1417  12a9		       29 02		      AND	#2
   1418  12ab					      if	((* - ._Wall_move_left) < 127) && ((* - ._Wall_move_left) > -128)
   1419  12ab		       d0 18		      BNE	._Wall_move_left
   1420  12ad				  -	      else
   1421  12ad				  -	      beq	.1skip_Wall_move_left
   1422  12ad				  -	      jmp	._Wall_move_left
   1423  12ad				  -.1skip_Wall_move_left
   1424  12ad					      endif
   1425  12ad				   .L0253		;  if frame_counter{4} then extra_wall_move_x	=  extra_wall_move_x  +  1  :  if extra_wall_move_x  =	r_extra_wall_type then _Bit1_Wall_Dir{1}  =  1
   1426  12ad
   1427  12ad		       a5 d6		      LDA	frame_counter
   1428  12af		       29 10		      AND	#16
   1429  12b1		       f0 0f		      BEQ	.skipL0253
   1430  12b3				   .condpart8
   1431  12b3		       e6 dd		      INC	extra_wall_move_x
   1432  12b5		       a5 dd		      LDA	extra_wall_move_x
   1433  12b7		       cd ee f0 	      CMP	r_extra_wall_type
   1434  12ba		       d0 06		      BNE	.skip8then
   1435  12bc				   .condpart9
   1436  12bc		       a5 ec		      LDA	_Bit1_Wall_Dir
   1437  12be		       09 02		      ORA	#2
   1438  12c0		       85 ec		      STA	_Bit1_Wall_Dir
   1439  12c2				   .skip8then
   1440  12c2				   .skipL0253
   1441  12c2				   .L0254		;  goto _Skip_Wall_Movement
   1442  12c2
   1443  12c2		       4c d7 d2 	      jmp	._Skip_Wall_Movement
   1444  12c5
   1445  12c5				   ._Wall_move_left
   1446  12c5							; _Wall_move_left
   1447  12c5
   1448  12c5				   .L0255		;  if frame_counter{4} then extra_wall_move_x	=  extra_wall_move_x  -  1  :  if !extra_wall_move_x then _Bit1_Wall_Dir{1}  =	0
   1449  12c5
   1450  12c5		       a5 d6		      LDA	frame_counter
   1451  12c7		       29 10		      AND	#16
   1452  12c9		       f0 0c		      BEQ	.skipL0255
   1453  12cb				   .condpart10
   1454  12cb		       c6 dd		      DEC	extra_wall_move_x
   1455  12cd		       a5 dd		      LDA	extra_wall_move_x
   1456  12cf		       d0 06		      BNE	.skip10then
   1457  12d1				   .condpart11
   1458  12d1		       a5 ec		      LDA	_Bit1_Wall_Dir
   1459  12d3		       29 fd		      AND	#253
   1460  12d5		       85 ec		      STA	_Bit1_Wall_Dir
   1461  12d7				   .skip10then
   1462  12d7				   .skipL0255
   1463  12d7				   ._Skip_Wall_Movement
   1464  12d7							; _Skip_Wall_Movement
   1465  12d7
   1466  12d7				   .
   1467  12d7							; 
   1468  12d7
   1469  12d7				   .L0256		;  if r_roommate_type_and_range  <  4 then _Skip_Enemy_Movement
   1470  12d7
   1471  12d7		       ad ea f0 	      LDA	r_roommate_type_and_range
   1472  12da		       c9 04		      CMP	#4
   1473  12dc					      if	((* - ._Skip_Enemy_Movement) < 127) && ((* - ._Skip_Enemy_Movement) > -128)
   1474  12dc		       90 2f		      bcc	._Skip_Enemy_Movement
   1475  12de				  -	      else
   1476  12de				  -	      bcs	.2skip_Skip_Enemy_Movement
   1477  12de				  -	      jmp	._Skip_Enemy_Movement
   1478  12de				  -.2skip_Skip_Enemy_Movement
   1479  12de					      endif
   1480  12de				   .L0257		;  if _Bit0_roommate_Dir{0} then _Enemy_move_left
   1481  12de
   1482  12de		       a5 ec		      LDA	_Bit0_roommate_Dir
   1483  12e0		       4a		      LSR
   1484  12e1					      if	((* - ._Enemy_move_left) < 127) && ((* - ._Enemy_move_left) > -128)
   1485  12e1		       b0 18		      bcs	._Enemy_move_left
   1486  12e3				  -	      else
   1487  12e3				  -	      bcc	.3skip_Enemy_move_left
   1488  12e3				  -	      jmp	._Enemy_move_left
   1489  12e3				  -.3skip_Enemy_move_left
   1490  12e3					      endif
   1491  12e3				   .L0258		;  if !frame_counter{4} then roommate_move_x  =  roommate_move_x  +  1  :  if roommate_move_x	=  r_roommate_type_and_range then _Bit0_roommate_Dir{0}  =  1
   1492  12e3
   1493  12e3		       a5 d6		      LDA	frame_counter
   1494  12e5		       29 10		      AND	#16
   1495  12e7		       d0 0f		      BNE	.skipL0258
   1496  12e9				   .condpart12
   1497  12e9		       e6 de		      INC	roommate_move_x
   1498  12eb		       a5 de		      LDA	roommate_move_x
   1499  12ed		       cd ea f0 	      CMP	r_roommate_type_and_range
   1500  12f0		       d0 06		      BNE	.skip12then
   1501  12f2				   .condpart13
   1502  12f2		       a5 ec		      LDA	_Bit0_roommate_Dir
   1503  12f4		       09 01		      ORA	#1
   1504  12f6		       85 ec		      STA	_Bit0_roommate_Dir
   1505  12f8				   .skip12then
   1506  12f8				   .skipL0258
   1507  12f8				   .L0259		;  goto _Skip_Enemy_Movement
   1508  12f8
   1509  12f8		       4c 0d d3 	      jmp	._Skip_Enemy_Movement
   1510  12fb
   1511  12fb				   ._Enemy_move_left
   1512  12fb							; _Enemy_move_left
   1513  12fb
   1514  12fb				   .L0260		;  if !frame_counter{4} then roommate_move_x  =  roommate_move_x  -  1  :  if !roommate_move_x then _Bit0_roommate_Dir{0}  =  0
   1515  12fb
   1516  12fb		       a5 d6		      LDA	frame_counter
   1517  12fd		       29 10		      AND	#16
   1518  12ff		       d0 0c		      BNE	.skipL0260
   1519  1301				   .condpart14
   1520  1301		       c6 de		      DEC	roommate_move_x
   1521  1303		       a5 de		      LDA	roommate_move_x
   1522  1305		       d0 06		      BNE	.skip14then
   1523  1307				   .condpart15
   1524  1307		       a5 ec		      LDA	_Bit0_roommate_Dir
   1525  1309		       29 fe		      AND	#254
   1526  130b		       85 ec		      STA	_Bit0_roommate_Dir
   1527  130d				   .skip14then
   1528  130d				   .skipL0260
   1529  130d				   ._Skip_Enemy_Movement
   1530  130d							; _Skip_Enemy_Movement
   1531  130d
   1532  130d				   .
   1533  130d							; 
   1534  130d
   1535  130d				   .L0261		;  frame_counter  =  frame_counter  +	1
   1536  130d
   1537  130d		       e6 d6		      INC	frame_counter
   1538  130f				   .
   1539  130f							; 
   1540  130f
   1541  130f				   .
   1542  130f							; 
   1543  130f
   1544  130f				   .L0262		;  if ReceiveBufferSize  >  response_size_minus_1 then goto change_room
   1545  130f
   1546  130f		       a9 17		      LDA	#response_size_minus_1
   1547  1311		       cd f3 1f 	      CMP	ReceiveBufferSize
   1548  1314		       b0 03		      BCS	.skipL0262
   1549  1316				   .condpart16
   1550  1316		       4c 98 d9 	      jmp	.change_room
   1551  1319
   1552  1319				   .skipL0262
   1553  1319				   .
   1554  1319							; 
   1555  1319
   1556  1319				   .L0263		;  if request_pending	||  !pfscore1 then goto _skip_game_action
   1557  1319
   1558  1319		       a5 d4		      LDA	request_pending
   1559  131b		       f0 03		      BEQ	.skipL0263
   1560  131d				   .condpart17
   1561  131d		       4c 24 d3 	      jmp	.condpart18
   1562  1320				   .skipL0263
   1563  1320		       a5 f2		      LDA	pfscore1
   1564  1322		       d0 03		      BNE	.skip0OR
   1565  1324				   .condpart18
   1566  1324		       4c 49 d7 	      jmp	._skip_game_action
   1567  1327
   1568  1327				   .skip0OR
   1569  1327				   .
   1570  1327							; 
   1571  1327
   1572  1327				   .L0264		;  if frame_counter then _Skip_dec_game_counter
   1573  1327
   1574  1327		       a5 d6		      LDA	frame_counter
   1575  1329					      if	((* - ._Skip_dec_game_counter) < 127) && ((* - ._Skip_dec_game_counter) > -128)
   1576  1329		       d0 24		      BNE	._Skip_dec_game_counter
   1577  132b				  -	      else
   1578  132b				  -	      beq	.4skip_Skip_dec_game_counter
   1579  132b				  -	      jmp	._Skip_dec_game_counter
   1580  132b				  -.4skip_Skip_dec_game_counter
   1581  132b					      endif
   1582  132b				   .
   1583  132b							; 
   1584  132b
   1585  132b				   .L0265		;  if !pfscore2 then _Decrease_small_counter
   1586  132b
   1587  132b		       a5 f3		      LDA	pfscore2
   1588  132d					      if	((* - ._Decrease_small_counter) < 127) && ((* - ._Decrease_small_counter) > -128)
   1589  132d		       f0 08		      BEQ	._Decrease_small_counter
   1590  132f				  -	      else
   1591  132f				  -	      bne	.5skip_Decrease_small_counter
   1592  132f				  -	      jmp	._Decrease_small_counter
   1593  132f				  -.5skip_Decrease_small_counter
   1594  132f					      endif
   1595  132f				   .L0266		;  pfscore2  =  pfscore2  /  2
   1596  132f
   1597  132f		       a5 f3		      LDA	pfscore2
   1598  1331		       4a		      lsr
   1599  1332		       85 f3		      STA	pfscore2
   1600  1334				   .L0267		;  goto _Skip_dec_game_counter
   1601  1334
   1602  1334		       4c 4f d3 	      jmp	._Skip_dec_game_counter
   1603  1337
   1604  1337				   ._Decrease_small_counter
   1605  1337							; _Decrease_small_counter
   1606  1337
   1607  1337				   .L0268		;  pfscore1  =  pfscore1  /  2
   1608  1337
   1609  1337		       a5 f2		      LDA	pfscore1
   1610  1339		       4a		      lsr
   1611  133a		       85 f2		      STA	pfscore1
   1612  133c				   .
   1613  133c							; 
   1614  133c
   1615  133c				   .L0269		;  if !pfscore1 then _Ch0_Sound  =  4	:  _Ch0_Duration  =  1	:  _Ch0_Counter  =  0  :  goto _skip_game_action
   1616  133c
   1617  133c		       a5 f2		      LDA	pfscore1
   1618  133e		       d0 0f		      BNE	.skipL0269
   1619  1340				   .condpart19
   1620  1340		       a9 04		      LDA	#4
   1621  1342		       85 da		      STA	_Ch0_Sound
   1622  1344		       a9 01		      LDA	#1
   1623  1346		       85 db		      STA	_Ch0_Duration
   1624  1348		       a9 00		      LDA	#0
   1625  134a		       85 dc		      STA	_Ch0_Counter
   1626  134c		       4c 49 d7 	      jmp	._skip_game_action
   1627  134f
   1628  134f				   .skipL0269
   1629  134f				   .
   1630  134f							; 
   1631  134f
   1632  134f				   ._Skip_dec_game_counter
   1633  134f							; _Skip_dec_game_counter
   1634  134f
   1635  134f				   .L0270		;  if delay_counter  >  0 then delay_counter  =  delay_counter  -  1  :  goto _skip_game_action
   1636  134f
   1637  134f		       a9 00		      LDA	#0
   1638  1351		       c5 d5		      CMP	delay_counter
   1639  1353		       b0 05		      BCS	.skipL0270
   1640  1355				   .condpart20
   1641  1355		       c6 d5		      DEC	delay_counter
   1642  1357		       4c 49 d7 	      jmp	._skip_game_action
   1643  135a
   1644  135a				   .skipL0270
   1645  135a				   .
   1646  135a							; 
   1647  135a
   1648  135a				   .
   1649  135a							; 
   1650  135a
   1651  135a				   .
   1652  135a							; 
   1653  135a
   1654  135a				   .L0271		;  if !joy0fire then goto __Skip_Fire
   1655  135a
   1656  135a		       24 0c		      bit	INPT4
   1657  135c		       10 03		      BPL	.skipL0271
   1658  135e				   .condpart21
   1659  135e		       4c f0 d3 	      jmp	.__Skip_Fire
   1660  1361
   1661  1361				   .skipL0271
   1662  1361				   .
   1663  1361							; 
   1664  1361
   1665  1361				   .
   1666  1361							; 
   1667  1361
   1668  1361				   .L0272		;  if _Bit7_M0_Moving{7} then goto __Skip_Fire
   1669  1361
   1670  1361		       24 ec		      BIT	_Bit7_M0_Moving
   1671  1363		       10 03		      BPL	.skipL0272
   1672  1365				   .condpart22
   1673  1365		       4c f0 d3 	      jmp	.__Skip_Fire
   1674  1368
   1675  1368				   .skipL0272
   1676  1368				   .
   1677  1368							; 
   1678  1368
   1679  1368				   .
   1680  1368							; 
   1681  1368
   1682  1368				   .
   1683  1368							; 
   1684  1368
   1685  1368				   .L0273		;  _BitOp_M0_Dir  =  _BitOp_P1_Dir
   1686  1368
   1687  1368		       a5 d8		      LDA	_BitOp_P1_Dir
   1688  136a		       85 d7		      STA	_BitOp_M0_Dir
   1689  136c				   .
   1690  136c							; 
   1691  136c
   1692  136c				   .
   1693  136c							; 
   1694  136c
   1695  136c				   .L0274		;  if _Bit0_M0_Dir_Up{0} then goto __Skip_Fire
   1696  136c
   1697  136c		       a5 d7		      LDA	_Bit0_M0_Dir_Up
   1698  136e		       4a		      LSR
   1699  136f		       90 03		      BCC	.skipL0274
   1700  1371				   .condpart23
   1701  1371		       4c f0 d3 	      jmp	.__Skip_Fire
   1702  1374
   1703  1374				   .skipL0274
   1704  1374				   .
   1705  1374							; 
   1706  1374
   1707  1374				   .L0275		;  if _BitOp_M0_Dir  =  0  &&	_Bit6_Flip_P0{6} then _BitOp_M0_Dir  =	4
   1708  1374
   1709  1374		       a5 d7		      LDA	_BitOp_M0_Dir
   1710  1376		       c9 00		      CMP	#0
   1711  1378		       d0 08		      BNE	.skipL0275
   1712  137a				   .condpart24
   1713  137a		       24 ec		      BIT	_Bit6_Flip_P0
   1714  137c		       50 04		      BVC	.skip24then
   1715  137e				   .condpart25
   1716  137e		       a9 04		      LDA	#4
   1717  1380		       85 d7		      STA	_BitOp_M0_Dir
   1718  1382				   .skip24then
   1719  1382				   .skipL0275
   1720  1382				   .L0276		;  if _BitOp_M0_Dir  =  0  &&	! _Bit6_Flip_P0{6} then _BitOp_M0_Dir  =  8
   1721  1382
   1722  1382		       a5 d7		      LDA	_BitOp_M0_Dir
   1723  1384		       c9 00		      CMP	#0
   1724  1386		       d0 08		      BNE	.skipL0276
   1725  1388				   .condpart26
   1726  1388		       24 ec		      BIT	_Bit6_Flip_P0
   1727  138a		       70 04		      BVS	.skip26then
   1728  138c				   .condpart27
   1729  138c		       a9 08		      LDA	#8
   1730  138e		       85 d7		      STA	_BitOp_M0_Dir
   1731  1390				   .skip26then
   1732  1390				   .skipL0276
   1733  1390				   .
   1734  1390							; 
   1735  1390
   1736  1390				   .
   1737  1390							; 
   1738  1390
   1739  1390				   .L0277		;  _Bit7_M0_Moving{7}	=  1
   1740  1390
   1741  1390		       a5 ec		      LDA	_Bit7_M0_Moving
   1742  1392		       09 80		      ORA	#128
   1743  1394		       85 ec		      STA	_Bit7_M0_Moving
   1744  1396				   .
   1745  1396							; 
   1746  1396
   1747  1396				   .
   1748  1396							; 
   1749  1396
   1750  1396				   .L0278		;  M0y_velocity  =  0.0  :  u	=  0
   1751  1396
   1752  1396		       a2 00		      LDX	#0
   1753  1398		       86 e7		      STX	t
   1754  139a		       a9 00		      LDA	#0
   1755  139c		       85 e6		      STA	M0y_velocity
   1756  139e		       a9 00		      LDA	#0
   1757  13a0		       85 e8		      STA	u
   1758  13a2				   .
   1759  13a2							; 
   1760  13a2
   1761  13a2				   .
   1762  13a2							; 
   1763  13a2
   1764  13a2				   .L0279		;  if _Bit1_M0_Dir_Down{1} then missile0x  =  player1x  +  9  :  missile0y  =	player1y  -  1
   1765  13a2
   1766  13a2		       a5 d7		      LDA	_Bit1_M0_Dir_Down
   1767  13a4		       29 02		      AND	#2
   1768  13a6		       f0 0e		      BEQ	.skipL0279
   1769  13a8				   .condpart28
   1770  13a8		       a5 81		      LDA	player1x
   1771  13aa		       18		      CLC
   1772  13ab		       69 09		      ADC	#9
   1773  13ad		       85 82		      STA	missile0x
   1774  13af		       a5 86		      LDA	player1y
   1775  13b1		       38		      SEC
   1776  13b2		       e9 01		      SBC	#1
   1777  13b4		       85 91		      STA	missile0y
   1778  13b6				   .skipL0279
   1779  13b6				   .L0280		;  if _Bit2_M0_Dir_Left{2} then missile0x  =  player1x  +  2  :  missile0y  =	player1y  -  3
   1780  13b6
   1781  13b6		       a5 d7		      LDA	_Bit2_M0_Dir_Left
   1782  13b8		       29 04		      AND	#4
   1783  13ba		       f0 0e		      BEQ	.skipL0280
   1784  13bc				   .condpart29
   1785  13bc		       a5 81		      LDA	player1x
   1786  13be		       18		      CLC
   1787  13bf		       69 02		      ADC	#2
   1788  13c1		       85 82		      STA	missile0x
   1789  13c3		       a5 86		      LDA	player1y
   1790  13c5		       38		      SEC
   1791  13c6		       e9 03		      SBC	#3
   1792  13c8		       85 91		      STA	missile0y
   1793  13ca				   .skipL0280
   1794  13ca				   .L0281		;  if _Bit3_M0_Dir_Right{3} then missile0x  =	player1x  +  16  :  missile0y  =  player1y  -  3
   1795  13ca
   1796  13ca		       a5 d7		      LDA	_Bit3_M0_Dir_Right
   1797  13cc		       29 08		      AND	#8
   1798  13ce		       f0 0e		      BEQ	.skipL0281
   1799  13d0				   .condpart30
   1800  13d0		       a5 81		      LDA	player1x
   1801  13d2		       18		      CLC
   1802  13d3		       69 10		      ADC	#16
   1803  13d5		       85 82		      STA	missile0x
   1804  13d7		       a5 86		      LDA	player1y
   1805  13d9		       38		      SEC
   1806  13da		       e9 03		      SBC	#3
   1807  13dc		       85 91		      STA	missile0y
   1808  13de				   .skipL0281
   1809  13de				   .
   1810  13de							; 
   1811  13de
   1812  13de				   .
   1813  13de							; 
   1814  13de
   1815  13de				   .L0282		;  if _Ch0_Sound  <>  3 then _Ch0_Sound  =  2	:  _Ch0_Duration  =  1	:  _Ch0_Counter  =  0
   1816  13de
   1817  13de		       a5 da		      LDA	_Ch0_Sound
   1818  13e0		       c9 03		      CMP	#3
   1819  13e2		       f0 0c		      BEQ	.skipL0282
   1820  13e4				   .condpart31
   1821  13e4		       a9 02		      LDA	#2
   1822  13e6		       85 da		      STA	_Ch0_Sound
   1823  13e8		       a9 01		      LDA	#1
   1824  13ea		       85 db		      STA	_Ch0_Duration
   1825  13ec		       a9 00		      LDA	#0
   1826  13ee		       85 dc		      STA	_Ch0_Counter
   1827  13f0				   .skipL0282
   1828  13f0				   .
   1829  13f0							; 
   1830  13f0
   1831  13f0				   .__Skip_Fire
   1832  13f0							; __Skip_Fire
   1833  13f0
   1834  13f0				   .
   1835  13f0							; 
   1836  13f0
   1837  13f0				   .
   1838  13f0							; 
   1839  13f0
   1840  13f0				   .
   1841  13f0							; 
   1842  13f0
   1843  13f0				   .
   1844  13f0							; 
   1845  13f0
   1846  13f0				   .L0283		;  if !_Bit7_M0_Moving{7} then goto __Skip_Missile
   1847  13f0
   1848  13f0		       24 ec		      BIT	_Bit7_M0_Moving
   1849  13f2		       30 03		      BMI	.skipL0283
   1850  13f4				   .condpart32
   1851  13f4		       4c 81 d4 	      jmp	.__Skip_Missile
   1852  13f7
   1853  13f7				   .skipL0283
   1854  13f7				   .
   1855  13f7							; 
   1856  13f7
   1857  13f7				   .
   1858  13f7							; 
   1859  13f7
   1860  13f7				   .L0284		;  if _Bit1_M0_Dir_Down{1} then missile0y  =  missile0y  +  2
   1861  13f7
   1862  13f7		       a5 d7		      LDA	_Bit1_M0_Dir_Down
   1863  13f9		       29 02		      AND	#2
   1864  13fb		       f0 07		      BEQ	.skipL0284
   1865  13fd				   .condpart33
   1866  13fd		       a5 91		      LDA	missile0y
   1867  13ff		       18		      CLC
   1868  1400		       69 02		      ADC	#2
   1869  1402		       85 91		      STA	missile0y
   1870  1404				   .skipL0284
   1871  1404				   .L0285		;  if _Bit2_M0_Dir_Left{2} then missile0x  =  missile0x  -  2
   1872  1404
   1873  1404		       a5 d7		      LDA	_Bit2_M0_Dir_Left
   1874  1406		       29 04		      AND	#4
   1875  1408		       f0 07		      BEQ	.skipL0285
   1876  140a				   .condpart34
   1877  140a		       a5 82		      LDA	missile0x
   1878  140c		       38		      SEC
   1879  140d		       e9 02		      SBC	#2
   1880  140f		       85 82		      STA	missile0x
   1881  1411				   .skipL0285
   1882  1411				   .L0286		;  if _Bit3_M0_Dir_Right{3} then missile0x  =	missile0x  +  2
   1883  1411
   1884  1411		       a5 d7		      LDA	_Bit3_M0_Dir_Right
   1885  1413		       29 08		      AND	#8
   1886  1415		       f0 07		      BEQ	.skipL0286
   1887  1417				   .condpart35
   1888  1417		       a5 82		      LDA	missile0x
   1889  1419		       18		      CLC
   1890  141a		       69 02		      ADC	#2
   1891  141c		       85 82		      STA	missile0x
   1892  141e				   .skipL0286
   1893  141e				   .
   1894  141e							; 
   1895  141e
   1896  141e				   .L0287		;  rem apply gravity
   1897  141e
   1898  141e				   .L0288		;  M0y_velocity  =  M0y_velocity  +  gravity_missile0
   1899  141e
   1900  141e		       a5 e7		      LDA	t
   1901  1420		       18		      CLC
   1902  1421		       69 06		      ADC	#6
   1903  1423		       85 e7		      STA	t
   1904  1425		       a5 e6		      LDA	M0y_velocity
   1905  1427		       69 00		      ADC	#0
   1906  1429		       85 e6		      STA	M0y_velocity
   1907  142b				   .L0289		;  M0y_position  =  M0y_position  +  M0y_velocity
   1908  142b
   1909  142b		       a5 e8		      LDA	u
   1910  142d		       18		      CLC
   1911  142e		       65 e7		      ADC	t
   1912  1430		       85 e8		      STA	u
   1913  1432		       a5 91		      LDA	M0y_position
   1914  1434		       65 e6		      ADC	M0y_velocity
   1915  1436		       85 91		      STA	M0y_position
   1916  1438				   .
   1917  1438							; 
   1918  1438
   1919  1438				   .
   1920  1438							; 
   1921  1438
   1922  1438				   .
   1923  1438							; 
   1924  1438
   1925  1438				   .L0290		;  if missile0y  <  _M_Edge_Top then goto __Delete_Missile
   1926  1438
   1927  1438		       a5 91		      LDA	missile0y
   1928  143a		       c9 02		      CMP	#_M_Edge_Top
   1929  143c		       b0 03		      BCS	.skipL0290
   1930  143e				   .condpart36
   1931  143e		       4c 75 d4 	      jmp	.__Delete_Missile
   1932  1441
   1933  1441				   .skipL0290
   1934  1441				   .L0291		;  if missile0y  >  _M_Edge_Bottom then goto __Delete_Missile
   1935  1441
   1936  1441		       a9 58		      LDA	#_M_Edge_Bottom
   1937  1443		       c5 91		      CMP	missile0y
   1938  1445		       b0 03		      BCS	.skipL0291
   1939  1447				   .condpart37
   1940  1447		       4c 75 d4 	      jmp	.__Delete_Missile
   1941  144a
   1942  144a				   .skipL0291
   1943  144a				   .L0292		;  if missile0x  <  _M_Edge_Left then goto __Delete_Missile
   1944  144a
   1945  144a		       a5 82		      LDA	missile0x
   1946  144c		       c9 0e		      CMP	#_M_Edge_Left
   1947  144e		       b0 03		      BCS	.skipL0292
   1948  1450				   .condpart38
   1949  1450		       4c 75 d4 	      jmp	.__Delete_Missile
   1950  1453
   1951  1453				   .skipL0292
   1952  1453				   .L0293		;  if missile0x  >  _M_Edge_Right then goto __Delete_Missile
   1953  1453
   1954  1453		       a9 94		      LDA	#_M_Edge_Right
   1955  1455		       c5 82		      CMP	missile0x
   1956  1457		       b0 03		      BCS	.skipL0293
   1957  1459				   .condpart39
   1958  1459		       4c 75 d4 	      jmp	.__Delete_Missile
   1959  145c
   1960  145c				   .skipL0293
   1961  145c				   .
   1962  145c							; 
   1963  145c
   1964  145c				   .
   1965  145c							; 
   1966  145c
   1967  145c				   .L0294		;  if !collision(playfield,missile0) then goto __Skip_Missile
   1968  145c
   1969  145c		       24 04		      bit	CXM0FB
   1970  145e		       30 03		      BMI	.skipL0294
   1971  1460				   .condpart40
   1972  1460		       4c 81 d4 	      jmp	.__Skip_Missile
   1973  1463
   1974  1463				   .skipL0294
   1975  1463				   .
   1976  1463							; 
   1977  1463
   1978  1463				   .
   1979  1463							; 
   1980  1463
   1981  1463				   .L0295		;  if _Ch0_Sound  <>  3 then _Ch0_Sound  =  4	:  _Ch0_Duration  =  1	:  _Ch0_Counter  =  0
   1982  1463
   1983  1463		       a5 da		      LDA	_Ch0_Sound
   1984  1465		       c9 03		      CMP	#3
   1985  1467		       f0 0c		      BEQ	.skipL0295
   1986  1469				   .condpart41
   1987  1469		       a9 04		      LDA	#4
   1988  146b		       85 da		      STA	_Ch0_Sound
   1989  146d		       a9 01		      LDA	#1
   1990  146f		       85 db		      STA	_Ch0_Duration
   1991  1471		       a9 00		      LDA	#0
   1992  1473		       85 dc		      STA	_Ch0_Counter
   1993  1475				   .skipL0295
   1994  1475				   .
   1995  1475							; 
   1996  1475
   1997  1475				   .__Delete_Missile
   1998  1475							; __Delete_Missile
   1999  1475
   2000  1475				   .
   2001  1475							; 
   2002  1475
   2003  1475				   .
   2004  1475							; 
   2005  1475
   2006  1475				   .L0296		;  _Bit7_M0_Moving{7}	=  0  :  missile0x  =  200  :  missile0y  =  200
   2007  1475
   2008  1475		       a5 ec		      LDA	_Bit7_M0_Moving
   2009  1477		       29 7f		      AND	#127
   2010  1479		       85 ec		      STA	_Bit7_M0_Moving
   2011  147b		       a9 c8		      LDA	#200
   2012  147d		       85 82		      STA	missile0x
   2013  147f		       85 91		      STA	missile0y
   2014  1481				   .
   2015  1481							; 
   2016  1481
   2017  1481				   .__Skip_Missile
   2018  1481							; __Skip_Missile
   2019  1481
   2020  1481				   .
   2021  1481							; 
   2022  1481
   2023  1481				   .
   2024  1481							; 
   2025  1481
   2026  1481				   .
   2027  1481							; 
   2028  1481
   2029  1481				   .
   2030  1481							; 
   2031  1481
   2032  1481				   .L0297		;  if !collision(player0,missile0) then __Skip_Shot_Enemy
   2033  1481
   2034  1481		       24 00		      bit	CXM0P
   2035  1483					      if	((* - .__Skip_Shot_Enemy) < 127) && ((* - .__Skip_Shot_Enemy) > -128)
   2036  1483		       50 38		      bvc	.__Skip_Shot_Enemy
   2037  1485				  -	      else
   2038  1485				  -	      bvs	.6skip__Skip_Shot_Enemy
   2039  1485				  -	      jmp	.__Skip_Shot_Enemy
   2040  1485				  -.6skip__Skip_Shot_Enemy
   2041  1485					      endif
   2042  1485				   .
   2043  1485							; 
   2044  1485
   2045  1485				   .
   2046  1485							; 
   2047  1485
   2048  1485				   .L0298		;  _Bit7_M0_Moving{7}	=  0  :  missile0x  =  200  :  missile0y  =  200
   2049  1485
   2050  1485		       a5 ec		      LDA	_Bit7_M0_Moving
   2051  1487		       29 7f		      AND	#127
   2052  1489		       85 ec		      STA	_Bit7_M0_Moving
   2053  148b		       a9 c8		      LDA	#200
   2054  148d		       85 82		      STA	missile0x
   2055  148f		       85 91		      STA	missile0y
   2056  1491				   .
   2057  1491							; 
   2058  1491
   2059  1491				   .L0299		;  if roommate_type  >  1 then __Skip_Shot_Enemy
   2060  1491
   2061  1491		       a9 01		      LDA	#1
   2062  1493		       c5 df		      CMP	roommate_type
   2063  1495					      if	((* - .__Skip_Shot_Enemy) < 127) && ((* - .__Skip_Shot_Enemy) > -128)
   2064  1495		       90 26		      bcc	.__Skip_Shot_Enemy
   2065  1497				  -	      else
   2066  1497				  -	      bcs	.7skip__Skip_Shot_Enemy
   2067  1497				  -	      jmp	.__Skip_Shot_Enemy
   2068  1497				  -.7skip__Skip_Shot_Enemy
   2069  1497					      endif
   2070  1497				   .
   2071  1497							; 
   2072  1497
   2073  1497				   .L0300		;  _Ch0_Sound	=  1  :  _Ch0_Duration	=  1  :  _Ch0_Counter  =  0
   2074  1497
   2075  1497		       a9 01		      LDA	#1
   2076  1499		       85 da		      STA	_Ch0_Sound
   2077  149b		       85 db		      STA	_Ch0_Duration
   2078  149d		       a9 00		      LDA	#0
   2079  149f		       85 dc		      STA	_Ch0_Counter
   2080  14a1				   .
   2081  14a1							; 
   2082  14a1
   2083  14a1				   .
   2084  14a1							; 
   2085  14a1
   2086  14a1				   .L0301		;  player0y  =  200  :  w_roommate_y_startpos	=  200	:  score  =  score  +  40
   2087  14a1
   2088  14a1		       a9 c8		      LDA	#200
   2089  14a3		       85 85		      STA	player0y
   2090  14a5		       8d 6b f0 	      STA	w_roommate_y_startpos
   2091  14a8		       f8		      SED
   2092  14a9		       18		      CLC
   2093  14aa		       a5 95		      LDA	score+2
   2094  14ac		       69 40		      ADC	#$40
   2095  14ae		       85 95		      STA	score+2
   2096  14b0		       a5 94		      LDA	score+1
   2097  14b2		       69 00		      ADC	#$00
   2098  14b4		       85 94		      STA	score+1
   2099  14b6		       a5 93		      LDA	score
   2100  14b8		       69 00		      ADC	#$00
   2101  14ba		       85 93		      STA	score
   2102  14bc		       d8		      CLD
   2103  14bd				   .
   2104  14bd							; 
   2105  14bd
   2106  14bd				   .__Skip_Shot_Enemy
   2107  14bd							; __Skip_Shot_Enemy
   2108  14bd
   2109  14bd				   .
   2110  14bd							; 
   2111  14bd
   2112  14bd				   .
   2113  14bd							; 
   2114  14bd
   2115  14bd				   .
   2116  14bd							; 
   2117  14bd
   2118  14bd				   .
   2119  14bd							; 
   2120  14bd
   2121  14bd				   .L0302		;  if !collision(ball,missile0) then __Skip_Shot_Extra_Wall
   2122  14bd
   2123  14bd		       24 04		      bit	CXM0FB
   2124  14bf					      if	((* - .__Skip_Shot_Extra_Wall) < 127) && ((* - .__Skip_Shot_Extra_Wall) > -128)
   2125  14bf		       50 3b		      bvc	.__Skip_Shot_Extra_Wall
   2126  14c1				  -	      else
   2127  14c1				  -	      bvs	.8skip__Skip_Shot_Extra_Wall
   2128  14c1				  -	      jmp	.__Skip_Shot_Extra_Wall
   2129  14c1				  -.8skip__Skip_Shot_Extra_Wall
   2130  14c1					      endif
   2131  14c1				   .
   2132  14c1							; 
   2133  14c1
   2134  14c1				   .
   2135  14c1							; 
   2136  14c1
   2137  14c1				   .L0303		;  _Bit7_M0_Moving{7}	=  0  :  missile0x  =  200  :  missile0y  =  200
   2138  14c1
   2139  14c1		       a5 ec		      LDA	_Bit7_M0_Moving
   2140  14c3		       29 7f		      AND	#127
   2141  14c5		       85 ec		      STA	_Bit7_M0_Moving
   2142  14c7		       a9 c8		      LDA	#200
   2143  14c9		       85 82		      STA	missile0x
   2144  14cb		       85 91		      STA	missile0y
   2145  14cd				   .
   2146  14cd							; 
   2147  14cd
   2148  14cd				   .
   2149  14cd							; 
   2150  14cd
   2151  14cd				   .L0304		;  if r_extra_wall_type  >  3 then __Skip_Shot_Extra_Wall
   2152  14cd
   2153  14cd		       a9 03		      LDA	#3
   2154  14cf		       cd ee f0 	      CMP	r_extra_wall_type
   2155  14d2					      if	((* - .__Skip_Shot_Extra_Wall) < 127) && ((* - .__Skip_Shot_Extra_Wall) > -128)
   2156  14d2		       90 28		      bcc	.__Skip_Shot_Extra_Wall
   2157  14d4				  -	      else
   2158  14d4				  -	      bcs	.9skip__Skip_Shot_Extra_Wall
   2159  14d4				  -	      jmp	.__Skip_Shot_Extra_Wall
   2160  14d4				  -.9skip__Skip_Shot_Extra_Wall
   2161  14d4					      endif
   2162  14d4				   .
   2163  14d4							; 
   2164  14d4
   2165  14d4				   .L0305		;  _Ch0_Sound	=  1  :  _Ch0_Duration	=  1  :  _Ch0_Counter  =  0
   2166  14d4
   2167  14d4		       a9 01		      LDA	#1
   2168  14d6		       85 da		      STA	_Ch0_Sound
   2169  14d8		       85 db		      STA	_Ch0_Duration
   2170  14da		       a9 00		      LDA	#0
   2171  14dc		       85 dc		      STA	_Ch0_Counter
   2172  14de				   .L0306		;  w_extra_wall_startpos  =  200  :  bally  =	0  :  score  =	score  +  10
   2173  14de
   2174  14de		       a9 c8		      LDA	#200
   2175  14e0		       8d 6f f0 	      STA	w_extra_wall_startpos
   2176  14e3		       a9 00		      LDA	#0
   2177  14e5		       85 89		      STA	bally
   2178  14e7		       f8		      SED
   2179  14e8		       18		      CLC
   2180  14e9		       a5 95		      LDA	score+2
   2181  14eb		       69 10		      ADC	#$10
   2182  14ed		       85 95		      STA	score+2
   2183  14ef		       a5 94		      LDA	score+1
   2184  14f1		       69 00		      ADC	#$00
   2185  14f3		       85 94		      STA	score+1
   2186  14f5		       a5 93		      LDA	score
   2187  14f7		       69 00		      ADC	#$00
   2188  14f9		       85 93		      STA	score
   2189  14fb		       d8		      CLD
   2190  14fc				   .
   2191  14fc							; 
   2192  14fc
   2193  14fc				   .__Skip_Shot_Extra_Wall
   2194  14fc							; __Skip_Shot_Extra_Wall
   2195  14fc
   2196  14fc				   .
   2197  14fc							; 
   2198  14fc
   2199  14fc				   .
   2200  14fc							; 
   2201  14fc
   2202  14fc				   .
   2203  14fc							; 
   2204  14fc
   2205  14fc				   .L0307		;  if !collision(player1,player0) then goto __Skip_P1_Touched_P0
   2206  14fc
   2207  14fc		       24 07		      bit	CXPPMM
   2208  14fe		       30 03		      BMI	.skipL0307
   2209  1500				   .condpart42
   2210  1500		       4c 94 d5 	      jmp	.__Skip_P1_Touched_P0
   2211  1503
   2212  1503				   .skipL0307
   2213  1503				   .
   2214  1503							; 
   2215  1503
   2216  1503				   .
   2217  1503							; 
   2218  1503
   2219  1503				   .L0308		;  if roommate_type  >  1 then __Skip_P1_Touched_Enemy
   2220  1503
   2221  1503		       a9 01		      LDA	#1
   2222  1505		       c5 df		      CMP	roommate_type
   2223  1507					      if	((* - .__Skip_P1_Touched_Enemy) < 127) && ((* - .__Skip_P1_Touched_Enemy) > -128)
   2224  1507		       90 2f		      bcc	.__Skip_P1_Touched_Enemy
   2225  1509				  -	      else
   2226  1509				  -	      bcs	.10skip__Skip_P1_Touched_Enemy
   2227  1509				  -	      jmp	.__Skip_P1_Touched_Enemy
   2228  1509				  -.10skip__Skip_P1_Touched_Enemy
   2229  1509					      endif
   2230  1509				   .L0309		;  if _Ch0_Sound  <>  4 then _Ch0_Sound  =  4	:  _Ch0_Duration  =  1	:  _Ch0_Counter  =  0
   2231  1509
   2232  1509		       a5 da		      LDA	_Ch0_Sound
   2233  150b		       c9 04		      CMP	#4
   2234  150d		       f0 0c		      BEQ	.skipL0309
   2235  150f				   .condpart43
   2236  150f		       a9 04		      LDA	#4
   2237  1511		       85 da		      STA	_Ch0_Sound
   2238  1513		       a9 01		      LDA	#1
   2239  1515		       85 db		      STA	_Ch0_Duration
   2240  1517		       a9 00		      LDA	#0
   2241  1519		       85 dc		      STA	_Ch0_Counter
   2242  151b				   .skipL0309
   2243  151b				   .L0310		;  WriteSendBuffer  =	req_level_reset  :  request_pending  =	1  :  player1y	=  player_min_y  :  player1x  =  30  :	pfscore1  =  255  :  pfscore2  =  255  :  goto _skip_game_action
   2244  151b
   2245  151b		       a9 07		      LDA	#req_level_reset
   2246  151d		       8d f1 1f 	      STA	WriteSendBuffer
   2247  1520		       a9 01		      LDA	#1
   2248  1522		       85 d4		      STA	request_pending
   2249  1524		       a9 02		      LDA	#player_min_y
   2250  1526		       85 86		      STA	player1y
   2251  1528		       a9 1e		      LDA	#30
   2252  152a		       85 81		      STA	player1x
   2253  152c		       a9 ff		      LDA	#255
   2254  152e		       85 f2		      STA	pfscore1
   2255  1530		       85 f3		      STA	pfscore2
   2256  1532		       4c 49 d7 	      jmp	._skip_game_action
   2257  1535
   2258  1535				   .L0311		;  goto __Skip_P1_Touched_P0
   2259  1535
   2260  1535		       4c 94 d5 	      jmp	.__Skip_P1_Touched_P0
   2261  1538
   2262  1538				   .__Skip_P1_Touched_Enemy
   2263  1538							; __Skip_P1_Touched_Enemy
   2264  1538
   2265  1538				   .L0312		;  if _Ch0_Sound  <>  3 then _Ch0_Sound  =  3	:  _Ch0_Duration  =  1	:  _Ch0_Counter  =  0
   2266  1538
   2267  1538		       a5 da		      LDA	_Ch0_Sound
   2268  153a		       c9 03		      CMP	#3
   2269  153c		       f0 0c		      BEQ	.skipL0312
   2270  153e				   .condpart44
   2271  153e		       a9 03		      LDA	#3
   2272  1540		       85 da		      STA	_Ch0_Sound
   2273  1542		       a9 01		      LDA	#1
   2274  1544		       85 db		      STA	_Ch0_Duration
   2275  1546		       a9 00		      LDA	#0
   2276  1548		       85 dc		      STA	_Ch0_Counter
   2277  154a				   .skipL0312
   2278  154a				   .L0313		;  if roommate_type  =  3 then WriteToBuffer  =  _sc1	:  WriteToBuffer  =  _sc2  :  WriteToBuffer  =	_sc3  :  WriteSendBuffer  =  req_level_up  :  request_pending  =  1  :	pfscore1  =  255  :  pfscore2  =  255  :  player1y  =  player_min_y  :	player1x  =  30  :  score  =  0  :  goto _skip_game_action
   2279  154a
   2280  154a		       a5 df		      LDA	roommate_type
   2281  154c		       c9 03		      CMP	#3
   2282  154e		       d0 35		      BNE	.skipL0313
   2283  1550				   .condpart45
   2284  1550		       a5 93		      LDA	_sc1
   2285  1552		       8d f0 1f 	      STA	WriteToBuffer
   2286  1555		       a5 94		      LDA	_sc2
   2287  1557		       8d f0 1f 	      STA	WriteToBuffer
   2288  155a		       a5 95		      LDA	_sc3
   2289  155c		       8d f0 1f 	      STA	WriteToBuffer
   2290  155f		       a9 01		      LDA	#req_level_up
   2291  1561		       8d f1 1f 	      STA	WriteSendBuffer
   2292  1564		       a9 01		      LDA	#1
   2293  1566		       85 d4		      STA	request_pending
   2294  1568		       a9 ff		      LDA	#255
   2295  156a		       85 f2		      STA	pfscore1
   2296  156c		       85 f3		      STA	pfscore2
   2297  156e		       a9 02		      LDA	#player_min_y
   2298  1570		       85 86		      STA	player1y
   2299  1572		       a9 1e		      LDA	#30
   2300  1574		       85 81		      STA	player1x
   2301  1576		       a9 00		      LDA	#$00
   2302  1578		       85 95		      STA	score+2
   2303  157a		       a9 00		      LDA	#$00
   2304  157c		       85 94		      STA	score+1
   2305  157e		       a9 00		      LDA	#$00
   2306  1580		       85 93		      STA	score
   2307  1582		       4c 49 d7 	      jmp	._skip_game_action
   2308  1585
   2309  1585				   .skipL0313
   2310  1585				   .L0314		;  if roommate_type  =  2 then pfscore2  =  pfscore2  *  2  |	1  :  player1y	=  player1y  -	1
   2311  1585
   2312  1585		       a5 df		      LDA	roommate_type
   2313  1587		       c9 02		      CMP	#2
   2314  1589		       d0 09		      BNE	.skipL0314
   2315  158b				   .condpart46
   2316  158b							; complex statement detected
   2317  158b		       a5 f3		      LDA	pfscore2
   2318  158d		       0a		      asl
   2319  158e		       09 01		      ORA	#1
   2320  1590		       85 f3		      STA	pfscore2
   2321  1592		       c6 86		      DEC	player1y
   2322  1594				   .skipL0314
   2323  1594				   .__Skip_P1_Touched_P0
   2324  1594							; __Skip_P1_Touched_P0
   2325  1594
   2326  1594				   .
   2327  1594							; 
   2328  1594
   2329  1594				   .
   2330  1594							; 
   2331  1594
   2332  1594				   .
   2333  1594							; 
   2334  1594
   2335  1594				   .L0315		;  if !collision(player1,ball) then goto __Skip_P1_Touched_Ball
   2336  1594
   2337  1594		       24 03		      bit	CXP1FB
   2338  1596		       70 03		      BVS	.skipL0315
   2339  1598				   .condpart47
   2340  1598		       4c c7 d5 	      jmp	.__Skip_P1_Touched_Ball
   2341  159b
   2342  159b				   .skipL0315
   2343  159b				   .
   2344  159b							; 
   2345  159b
   2346  159b				   .
   2347  159b							; 
   2348  159b
   2349  159b				   .L0316		;  if _Ch0_Sound  <>  4 then _Ch0_Sound  =  4	:  _Ch0_Duration  =  1	:  _Ch0_Counter  =  0
   2350  159b
   2351  159b		       a5 da		      LDA	_Ch0_Sound
   2352  159d		       c9 04		      CMP	#4
   2353  159f		       f0 0c		      BEQ	.skipL0316
   2354  15a1				   .condpart48
   2355  15a1		       a9 04		      LDA	#4
   2356  15a3		       85 da		      STA	_Ch0_Sound
   2357  15a5		       a9 01		      LDA	#1
   2358  15a7		       85 db		      STA	_Ch0_Duration
   2359  15a9		       a9 00		      LDA	#0
   2360  15ab		       85 dc		      STA	_Ch0_Counter
   2361  15ad				   .skipL0316
   2362  15ad				   .L0317		;  WriteSendBuffer  =	req_level_reset  :  request_pending  =	1  :  player1y	=  player_min_y  :  player1x  =  30  :	pfscore1  =  255  :  pfscore2  =  255  :  goto _skip_game_action
   2363  15ad
   2364  15ad		       a9 07		      LDA	#req_level_reset
   2365  15af		       8d f1 1f 	      STA	WriteSendBuffer
   2366  15b2		       a9 01		      LDA	#1
   2367  15b4		       85 d4		      STA	request_pending
   2368  15b6		       a9 02		      LDA	#player_min_y
   2369  15b8		       85 86		      STA	player1y
   2370  15ba		       a9 1e		      LDA	#30
   2371  15bc		       85 81		      STA	player1x
   2372  15be		       a9 ff		      LDA	#255
   2373  15c0		       85 f2		      STA	pfscore1
   2374  15c2		       85 f3		      STA	pfscore2
   2375  15c4		       4c 49 d7 	      jmp	._skip_game_action
   2376  15c7
   2377  15c7				   .__Skip_P1_Touched_Ball
   2378  15c7							; __Skip_P1_Touched_Ball
   2379  15c7
   2380  15c7				   .
   2381  15c7							; 
   2382  15c7
   2383  15c7				   .L0318		;  if !collision(player1,playfield) then goto __Skip_P1_Touched_Playfield
   2384  15c7
   2385  15c7		       24 03		      bit	CXP1FB
   2386  15c9		       30 03		      BMI	.skipL0318
   2387  15cb				   .condpart49
   2388  15cb		       4c fa d5 	      jmp	.__Skip_P1_Touched_Playfield
   2389  15ce
   2390  15ce				   .skipL0318
   2391  15ce				   .
   2392  15ce							; 
   2393  15ce
   2394  15ce				   .
   2395  15ce							; 
   2396  15ce
   2397  15ce				   .L0319		;  if _Ch0_Sound  <>  4 then _Ch0_Sound  =  4	:  _Ch0_Duration  =  1	:  _Ch0_Counter  =  0
   2398  15ce
   2399  15ce		       a5 da		      LDA	_Ch0_Sound
   2400  15d0		       c9 04		      CMP	#4
   2401  15d2		       f0 0c		      BEQ	.skipL0319
   2402  15d4				   .condpart50
   2403  15d4		       a9 04		      LDA	#4
   2404  15d6		       85 da		      STA	_Ch0_Sound
   2405  15d8		       a9 01		      LDA	#1
   2406  15da		       85 db		      STA	_Ch0_Duration
   2407  15dc		       a9 00		      LDA	#0
   2408  15de		       85 dc		      STA	_Ch0_Counter
   2409  15e0				   .skipL0319
   2410  15e0				   .L0320		;  WriteSendBuffer  =	req_level_reset  :  request_pending  =	1  :  player1y	=  player_min_y  :  player1x  =  30  :	pfscore1  =  255  :  pfscore2  =  255  :  goto _skip_game_action
   2411  15e0
   2412  15e0		       a9 07		      LDA	#req_level_reset
   2413  15e2		       8d f1 1f 	      STA	WriteSendBuffer
   2414  15e5		       a9 01		      LDA	#1
   2415  15e7		       85 d4		      STA	request_pending
   2416  15e9		       a9 02		      LDA	#player_min_y
   2417  15eb		       85 86		      STA	player1y
   2418  15ed		       a9 1e		      LDA	#30
   2419  15ef		       85 81		      STA	player1x
   2420  15f1		       a9 ff		      LDA	#255
   2421  15f3		       85 f2		      STA	pfscore1
   2422  15f5		       85 f3		      STA	pfscore2
   2423  15f7		       4c 49 d7 	      jmp	._skip_game_action
   2424  15fa
   2425  15fa				   .__Skip_P1_Touched_Playfield
   2426  15fa							; __Skip_P1_Touched_Playfield
   2427  15fa
   2428  15fa				   .
   2429  15fa							; 
   2430  15fa
   2431  15fa				   .
   2432  15fa							; 
   2433  15fa
   2434  15fa				   .
   2435  15fa							; 
   2436  15fa
   2437  15fa				   .
   2438  15fa							; 
   2439  15fa
   2440  15fa				   .L0321		;  if r_extra_wall_startpos  =  200 then goto _Skip_extra_Wall
   2441  15fa
   2442  15fa		       ad ef f0 	      LDA	r_extra_wall_startpos
   2443  15fd		       c9 c8		      CMP	#200
   2444  15ff		       d0 03		      BNE	.skipL0321
   2445  1601				   .condpart51
   2446  1601		       4c 1b d6 	      jmp	._Skip_extra_Wall
   2447  1604
   2448  1604				   .skipL0321
   2449  1604				   .L0322		;  ballx  =  r_extra_wall_startpos  +	extra_wall_move_x
   2450  1604
   2451  1604		       ad ef f0 	      LDA	r_extra_wall_startpos
   2452  1607		       18		      CLC
   2453  1608		       65 dd		      ADC	extra_wall_move_x
   2454  160a		       85 84		      STA	ballx
   2455  160c				   .L0323		;  bally  =  47
   2456  160c
   2457  160c		       a9 2f		      LDA	#47
   2458  160e		       85 89		      STA	bally
   2459  1610				   .L0324		;  ballheight	=  23
   2460  1610
   2461  1610		       a9 17		      LDA	#23
   2462  1612		       85 92		      STA	ballheight
   2463  1614				   .L0325		;  CTRLPF  =  r_extra_wall_width  |  1
   2464  1614
   2465  1614		       ad ed f0 	      LDA	r_extra_wall_width
   2466  1617		       09 01		      ORA	#1
   2467  1619		       85 0a		      STA	CTRLPF
   2468  161b				   ._Skip_extra_Wall
   2469  161b							; _Skip_extra_Wall
   2470  161b
   2471  161b				   .
   2472  161b							; 
   2473  161b
   2474  161b				   .
   2475  161b							; 
   2476  161b
   2477  161b				   .L0326		;  if r_roommate_y_startpos  =  200 then goto _Skip_enemy
   2478  161b
   2479  161b		       ad eb f0 	      LDA	r_roommate_y_startpos
   2480  161e		       c9 c8		      CMP	#200
   2481  1620		       d0 03		      BNE	.skipL0326
   2482  1622				   .condpart52
   2483  1622		       4c 32 d6 	      jmp	._Skip_enemy
   2484  1625
   2485  1625				   .skipL0326
   2486  1625				   .L0327		;  player0x  =  r_roommate_x_startpos	+  roommate_move_x
   2487  1625
   2488  1625		       ad ec f0 	      LDA	r_roommate_x_startpos
   2489  1628		       18		      CLC
   2490  1629		       65 de		      ADC	roommate_move_x
   2491  162b		       85 80		      STA	player0x
   2492  162d				   .L0328		;  player0y  =  r_roommate_y_startpos
   2493  162d
   2494  162d		       ad eb f0 	      LDA	r_roommate_y_startpos
   2495  1630		       85 85		      STA	player0y
   2496  1632				   ._Skip_enemy
   2497  1632							; _Skip_enemy
   2498  1632
   2499  1632				   .
   2500  1632							; 
   2501  1632
   2502  1632				   .
   2503  1632							; 
   2504  1632
   2505  1632				   .
   2506  1632							; 
   2507  1632
   2508  1632				   .L0329		;  if collision(player1,playfield)  &&  _Bit2_P1_Dir_Left{2} then player1x  =	player1x  +  1
   2509  1632
   2510  1632		       24 03		      bit	CXP1FB
   2511  1634		       10 08		      BPL	.skipL0329
   2512  1636				   .condpart53
   2513  1636		       a5 d8		      LDA	_Bit2_P1_Dir_Left
   2514  1638		       29 04		      AND	#4
   2515  163a		       f0 02		      BEQ	.skip53then
   2516  163c				   .condpart54
   2517  163c		       e6 81		      INC	player1x
   2518  163e				   .skip53then
   2519  163e				   .skipL0329
   2520  163e				   .L0330		;  if collision(player1,playfield)  &&  _Bit3_P1_Dir_Right{3} then player1x  =  player1x  -  1
   2521  163e
   2522  163e		       24 03		      bit	CXP1FB
   2523  1640		       10 08		      BPL	.skipL0330
   2524  1642				   .condpart55
   2525  1642		       a5 d8		      LDA	_Bit3_P1_Dir_Right
   2526  1644		       29 08		      AND	#8
   2527  1646		       f0 02		      BEQ	.skip55then
   2528  1648				   .condpart56
   2529  1648		       c6 81		      DEC	player1x
   2530  164a				   .skip55then
   2531  164a				   .skipL0330
   2532  164a				   .L0331		;  if collision(player1,playfield)  &&  _Bit0_P1_Dir_Up{0} then player1y  =  player1y	+  1
   2533  164a
   2534  164a		       24 03		      bit	CXP1FB
   2535  164c		       10 07		      BPL	.skipL0331
   2536  164e				   .condpart57
   2537  164e		       a5 d8		      LDA	_Bit0_P1_Dir_Up
   2538  1650		       4a		      LSR
   2539  1651		       90 02		      BCC	.skip57then
   2540  1653				   .condpart58
   2541  1653		       e6 86		      INC	player1y
   2542  1655				   .skip57then
   2543  1655				   .skipL0331
   2544  1655				   .L0332		;  if collision(player1,playfield)  &&  _Bit1_P1_Dir_Down{1} then player1y  =	player1y  -  1
   2545  1655
   2546  1655		       24 03		      bit	CXP1FB
   2547  1657		       10 08		      BPL	.skipL0332
   2548  1659				   .condpart59
   2549  1659		       a5 d8		      LDA	_Bit1_P1_Dir_Down
   2550  165b		       29 02		      AND	#2
   2551  165d		       f0 02		      BEQ	.skip59then
   2552  165f				   .condpart60
   2553  165f		       c6 86		      DEC	player1y
   2554  1661				   .skip59then
   2555  1661				   .skipL0332
   2556  1661				   .
   2557  1661							; 
   2558  1661
   2559  1661				   .L0333		;  _BitOp_P1_Dir  =  _BitOp_P1_Dir  &	$F0
   2560  1661
   2561  1661		       a5 d8		      LDA	_BitOp_P1_Dir
   2562  1663		       29 f0		      AND	#$F0
   2563  1665		       85 d8		      STA	_BitOp_P1_Dir
   2564  1667				   .
   2565  1667							; 
   2566  1667
   2567  1667				   .L0334		;  if joy0up then P1y_velocity  =  0.0  :  player1y  =  player1y  -  1  :  _Bit0_P1_Dir_Up{0}	=  1  :  x  =  0  :  goto skip_gravity
   2568  1667
   2569  1667		       a9 10		      lda	#$10
   2570  1669		       2c 80 02 	      bit	SWCHA
   2571  166c		       d0 17		      BNE	.skipL0334
   2572  166e				   .condpart61
   2573  166e		       a2 00		      LDX	#0
   2574  1670		       86 ea		      STX	w
   2575  1672		       a9 00		      LDA	#0
   2576  1674		       85 e9		      STA	P1y_velocity
   2577  1676		       c6 86		      DEC	player1y
   2578  1678		       a5 d8		      LDA	_Bit0_P1_Dir_Up
   2579  167a		       09 01		      ORA	#1
   2580  167c		       85 d8		      STA	_Bit0_P1_Dir_Up
   2581  167e		       a9 00		      LDA	#0
   2582  1680		       85 eb		      STA	x
   2583  1682		       4c cc d6 	      jmp	.skip_gravity
   2584  1685
   2585  1685				   .skipL0334
   2586  1685				   .L0335		;  if joy0down then P1y_velocity  =  0.0  :  player1y	=  player1y  +	1  :  _Bit1_P1_Dir_Down{1}  =  1  :  x	=  0  :  goto skip_gravity
   2587  1685
   2588  1685		       a9 20		      lda	#$20
   2589  1687		       2c 80 02 	      bit	SWCHA
   2590  168a		       d0 17		      BNE	.skipL0335
   2591  168c				   .condpart62
   2592  168c		       a2 00		      LDX	#0
   2593  168e		       86 ea		      STX	w
   2594  1690		       a9 00		      LDA	#0
   2595  1692		       85 e9		      STA	P1y_velocity
   2596  1694		       e6 86		      INC	player1y
   2597  1696		       a5 d8		      LDA	_Bit1_P1_Dir_Down
   2598  1698		       09 02		      ORA	#2
   2599  169a		       85 d8		      STA	_Bit1_P1_Dir_Down
   2600  169c		       a9 00		      LDA	#0
   2601  169e		       85 eb		      STA	x
   2602  16a0		       4c cc d6 	      jmp	.skip_gravity
   2603  16a3
   2604  16a3				   .skipL0335
   2605  16a3				   .
   2606  16a3							; 
   2607  16a3
   2608  16a3				   .L0336		;  if collision(player1,playfield) then P1y_velocity  =  0.0  :  goto skip_gravity
   2609  16a3
   2610  16a3		       24 03		      bit	CXP1FB
   2611  16a5		       10 0b		      BPL	.skipL0336
   2612  16a7				   .condpart63
   2613  16a7		       a2 00		      LDX	#0
   2614  16a9		       86 ea		      STX	w
   2615  16ab		       a9 00		      LDA	#0
   2616  16ad		       85 e9		      STA	P1y_velocity
   2617  16af		       4c cc d6 	      jmp	.skip_gravity
   2618  16b2
   2619  16b2				   .skipL0336
   2620  16b2				   .
   2621  16b2							; 
   2622  16b2
   2623  16b2				   .L0337		;  rem apply gravity
   2624  16b2
   2625  16b2				   .L0338		;  P1y_velocity  =  P1y_velocity  +  gravity_player1
   2626  16b2
   2627  16b2		       a5 ea		      LDA	w
   2628  16b4		       18		      CLC
   2629  16b5		       69 01		      ADC	#1
   2630  16b7		       85 ea		      STA	w
   2631  16b9		       a5 e9		      LDA	P1y_velocity
   2632  16bb		       69 00		      ADC	#0
   2633  16bd		       85 e9		      STA	P1y_velocity
   2634  16bf				   .L0339		;  P1y_position  =  P1y_position  +  P1y_velocity
   2635  16bf
   2636  16bf		       a5 eb		      LDA	x
   2637  16c1		       18		      CLC
   2638  16c2		       65 ea		      ADC	w
   2639  16c4		       85 eb		      STA	x
   2640  16c6		       a5 86		      LDA	P1y_position
   2641  16c8		       65 e9		      ADC	P1y_velocity
   2642  16ca		       85 86		      STA	P1y_position
   2643  16cc				   .
   2644  16cc							; 
   2645  16cc
   2646  16cc				   .skip_gravity
   2647  16cc							; skip_gravity
   2648  16cc
   2649  16cc				   .
   2650  16cc							; 
   2651  16cc
   2652  16cc				   .L0340		;  if joy0left then _Bit6_Flip_P0{6}  =  1  :	_Bit2_P1_Dir_Left{2}  =  1  :  player1x  =  player1x  -  1  :  goto _skip_move
   2653  16cc
   2654  16cc		       2c 80 02 	      bit	SWCHA
   2655  16cf		       70 11		      BVS	.skipL0340
   2656  16d1				   .condpart64
   2657  16d1		       a5 ec		      LDA	_Bit6_Flip_P0
   2658  16d3		       09 40		      ORA	#64
   2659  16d5		       85 ec		      STA	_Bit6_Flip_P0
   2660  16d7		       a5 d8		      LDA	_Bit2_P1_Dir_Left
   2661  16d9		       09 04		      ORA	#4
   2662  16db		       85 d8		      STA	_Bit2_P1_Dir_Left
   2663  16dd		       c6 81		      DEC	player1x
   2664  16df		       4c f5 d6 	      jmp	._skip_move
   2665  16e2
   2666  16e2				   .skipL0340
   2667  16e2				   .L0341		;  if joy0right then _Bit6_Flip_P0{6}	=  0  :  _Bit3_P1_Dir_Right{3}	=  1  :  player1x  =  player1x	+  1
   2668  16e2
   2669  16e2		       2c 80 02 	      bit	SWCHA
   2670  16e5		       30 0e		      BMI	.skipL0341
   2671  16e7				   .condpart65
   2672  16e7		       a5 ec		      LDA	_Bit6_Flip_P0
   2673  16e9		       29 bf		      AND	#191
   2674  16eb		       85 ec		      STA	_Bit6_Flip_P0
   2675  16ed		       a5 d8		      LDA	_Bit3_P1_Dir_Right
   2676  16ef		       09 08		      ORA	#8
   2677  16f1		       85 d8		      STA	_Bit3_P1_Dir_Right
   2678  16f3		       e6 81		      INC	player1x
   2679  16f5				   .skipL0341
   2680  16f5				   ._skip_move
   2681  16f5							; _skip_move
   2682  16f5
   2683  16f5				   .
   2684  16f5							; 
   2685  16f5
   2686  16f5				   .
   2687  16f5							; 
   2688  16f5
   2689  16f5				   .L0342		;  if player1x  <  player_min_x then player1x	=  player_max_x  :  gosub _send_room_state  :  WriteSendBuffer	=  req_move_left  :  goto _skip_game_action
   2690  16f5
   2691  16f5		       a5 81		      LDA	player1x
   2692  16f7		       c9 0a		      CMP	#player_min_x
   2693  16f9		       b0 0f		      BCS	.skipL0342
   2694  16fb				   .condpart66
   2695  16fb		       a9 86		      LDA	#player_max_x
   2696  16fd		       85 81		      STA	player1x
   2697  16ff		       20 63 d9 	      jsr	._send_room_state
   2698  1702		       a9 03		      LDA	#req_move_left
   2699  1704		       8d f1 1f 	      STA	WriteSendBuffer
   2700  1707		       4c 49 d7 	      jmp	._skip_game_action
   2701  170a
   2702  170a				   .skipL0342
   2703  170a				   .L0343		;  if player1y  <  player_min_y then player1y	=  player_max_y  :  gosub _send_room_state  :  WriteSendBuffer	=  req_move_up	:  goto _skip_game_action
   2704  170a
   2705  170a		       a5 86		      LDA	player1y
   2706  170c		       c9 02		      CMP	#player_min_y
   2707  170e		       b0 0f		      BCS	.skipL0343
   2708  1710				   .condpart67
   2709  1710		       a9 4c		      LDA	#player_max_y
   2710  1712		       85 86		      STA	player1y
   2711  1714		       20 63 d9 	      jsr	._send_room_state
   2712  1717		       a9 04		      LDA	#req_move_up
   2713  1719		       8d f1 1f 	      STA	WriteSendBuffer
   2714  171c		       4c 49 d7 	      jmp	._skip_game_action
   2715  171f
   2716  171f				   .skipL0343
   2717  171f				   .L0344		;  if player1x  >  player_max_x then player1x	=  player_min_x  :  gosub _send_room_state  :  WriteSendBuffer	=  req_move_right  :  goto _skip_game_action
   2718  171f
   2719  171f		       a9 86		      LDA	#player_max_x
   2720  1721		       c5 81		      CMP	player1x
   2721  1723		       b0 0f		      BCS	.skipL0344
   2722  1725				   .condpart68
   2723  1725		       a9 0a		      LDA	#player_min_x
   2724  1727		       85 81		      STA	player1x
   2725  1729		       20 63 d9 	      jsr	._send_room_state
   2726  172c		       a9 05		      LDA	#req_move_right
   2727  172e		       8d f1 1f 	      STA	WriteSendBuffer
   2728  1731		       4c 49 d7 	      jmp	._skip_game_action
   2729  1734
   2730  1734				   .skipL0344
   2731  1734				   .L0345		;  if player1y  >  player_max_y then player1y	=  player_min_y  :  gosub _send_room_state  :  WriteSendBuffer	=  req_move_down  :  goto _skip_game_action
   2732  1734
   2733  1734		       a9 4c		      LDA	#player_max_y
   2734  1736		       c5 86		      CMP	player1y
   2735  1738		       b0 0f		      BCS	.skipL0345
   2736  173a				   .condpart69
   2737  173a		       a9 02		      LDA	#player_min_y
   2738  173c		       85 86		      STA	player1y
   2739  173e		       20 63 d9 	      jsr	._send_room_state
   2740  1741		       a9 06		      LDA	#req_move_down
   2741  1743		       8d f1 1f 	      STA	WriteSendBuffer
   2742  1746		       4c 49 d7 	      jmp	._skip_game_action
   2743  1749
   2744  1749				   .skipL0345
   2745  1749				   .
   2746  1749							; 
   2747  1749
   2748  1749				   ._skip_game_action
   2749  1749							; _skip_game_action
   2750  1749
   2751  1749				   .
   2752  1749							; 
   2753  1749
   2754  1749				   .
   2755  1749							; 
   2756  1749
   2757  1749				   .L0346		;  if !_Ch0_Sound then goto __Skip_Ch_0
   2758  1749
   2759  1749		       a5 da		      LDA	_Ch0_Sound
   2760  174b		       d0 03		      BNE	.skipL0346
   2761  174d				   .condpart70
   2762  174d		       4c 7c d8 	      jmp	.__Skip_Ch_0
   2763  1750
   2764  1750				   .skipL0346
   2765  1750				   .
   2766  1750							; 
   2767  1750
   2768  1750				   .
   2769  1750							; 
   2770  1750
   2771  1750				   .L0347		;  _Ch0_Duration  =  _Ch0_Duration  -	1
   2772  1750
   2773  1750		       c6 db		      DEC	_Ch0_Duration
   2774  1752				   .
   2775  1752							; 
   2776  1752
   2777  1752				   .
   2778  1752							; 
   2779  1752
   2780  1752				   .
   2781  1752							; 
   2782  1752
   2783  1752				   .L0348		;  if _Ch0_Duration then goto __Skip_Ch_0
   2784  1752
   2785  1752		       a5 db		      LDA	_Ch0_Duration
   2786  1754		       f0 03		      BEQ	.skipL0348
   2787  1756				   .condpart71
   2788  1756		       4c 7c d8 	      jmp	.__Skip_Ch_0
   2789  1759
   2790  1759				   .skipL0348
   2791  1759				   .
   2792  1759							; 
   2793  1759
   2794  1759				   .
   2795  1759							; 
   2796  1759
   2797  1759				   .
   2798  1759							; 
   2799  1759
   2800  1759				   .
   2801  1759							; 
   2802  1759
   2803  1759				   .L0349		;  if _Ch0_Sound  <>  1 then goto __Skip_Ch0_Sound_001
   2804  1759
   2805  1759		       a5 da		      LDA	_Ch0_Sound
   2806  175b		       c9 01		      CMP	#1
   2807  175d		       f0 03		      BEQ	.skipL0349
   2808  175f				   .condpart72
   2809  175f		       4c a7 d7 	      jmp	.__Skip_Ch0_Sound_001
   2810  1762
   2811  1762				   .skipL0349
   2812  1762				   .
   2813  1762							; 
   2814  1762
   2815  1762				   .
   2816  1762							; 
   2817  1762
   2818  1762				   .L0350		;  temp4  =  _SD_Shot_Wall[_Ch0_Counter]
   2819  1762
   2820  1762		       a6 dc		      LDX	_Ch0_Counter
   2821  1764		       bd a2 d8 	      LDA	_SD_Shot_Wall,x
   2822  1767		       85 9f		      STA	temp4
   2823  1769				   .
   2824  1769							; 
   2825  1769
   2826  1769				   .
   2827  1769							; 
   2828  1769
   2829  1769				   .L0351		;  if temp4  =  255 then goto __Clear_Ch_0
   2830  1769
   2831  1769		       a5 9f		      LDA	temp4
   2832  176b		       c9 ff		      CMP	#255
   2833  176d		       d0 03		      BNE	.skipL0351
   2834  176f				   .condpart73
   2835  176f		       4c 76 d8 	      jmp	.__Clear_Ch_0
   2836  1772
   2837  1772				   .skipL0351
   2838  1772				   .
   2839  1772							; 
   2840  1772
   2841  1772				   .
   2842  1772							; 
   2843  1772
   2844  1772				   .L0352		;  _Ch0_Counter  =  _Ch0_Counter  +  1
   2845  1772
   2846  1772		       e6 dc		      INC	_Ch0_Counter
   2847  1774				   .L0353		;  temp5  =  _SD_Shot_Wall[_Ch0_Counter]  :  _Ch0_Counter  =  _Ch0_Counter  +	1
   2848  1774
   2849  1774		       a6 dc		      LDX	_Ch0_Counter
   2850  1776		       bd a2 d8 	      LDA	_SD_Shot_Wall,x
   2851  1779		       85 a0		      STA	temp5
   2852  177b		       e6 dc		      INC	_Ch0_Counter
   2853  177d				   .L0354		;  temp6  =  _SD_Shot_Wall[_Ch0_Counter]  :  _Ch0_Counter  =  _Ch0_Counter  +	1
   2854  177d
   2855  177d		       a6 dc		      LDX	_Ch0_Counter
   2856  177f		       bd a2 d8 	      LDA	_SD_Shot_Wall,x
   2857  1782		       85 a1		      STA	temp6
   2858  1784		       e6 dc		      INC	_Ch0_Counter
   2859  1786				   .L0355		;  if _Ch0_Counter{0} then COLUBK  =  _E0
   2860  1786
   2861  1786		       a5 dc		      LDA	_Ch0_Counter
   2862  1788		       4a		      LSR
   2863  1789		       90 04		      BCC	.skipL0355
   2864  178b				   .condpart74
   2865  178b		       a9 e0		      LDA	#_E0
   2866  178d		       85 09		      STA	COLUBK
   2867  178f				   .skipL0355
   2868  178f				   .
   2869  178f							; 
   2870  178f
   2871  178f				   .
   2872  178f							; 
   2873  178f
   2874  178f				   .L0356		;  AUDV0  =  temp4
   2875  178f
   2876  178f		       a5 9f		      LDA	temp4
   2877  1791		       85 19		      STA	AUDV0
   2878  1793				   .L0357		;  AUDC0  =  temp5
   2879  1793
   2880  1793		       a5 a0		      LDA	temp5
   2881  1795		       85 15		      STA	AUDC0
   2882  1797				   .L0358		;  AUDF0  =  temp6
   2883  1797
   2884  1797		       a5 a1		      LDA	temp6
   2885  1799		       85 17		      STA	AUDF0
   2886  179b				   .
   2887  179b							; 
   2888  179b
   2889  179b				   .
   2890  179b							; 
   2891  179b
   2892  179b				   .L0359		;  _Ch0_Duration  =  _SD_Shot_Wall[_Ch0_Counter]  :  _Ch0_Counter  =  _Ch0_Counter  +	1
   2893  179b
   2894  179b		       a6 dc		      LDX	_Ch0_Counter
   2895  179d		       bd a2 d8 	      LDA	_SD_Shot_Wall,x
   2896  17a0		       85 db		      STA	_Ch0_Duration
   2897  17a2		       e6 dc		      INC	_Ch0_Counter
   2898  17a4				   .
   2899  17a4							; 
   2900  17a4
   2901  17a4				   .
   2902  17a4							; 
   2903  17a4
   2904  17a4				   .L0360		;  goto __Skip_Ch_0
   2905  17a4
   2906  17a4		       4c 7c d8 	      jmp	.__Skip_Ch_0
   2907  17a7
   2908  17a7				   .
   2909  17a7							; 
   2910  17a7
   2911  17a7				   .__Skip_Ch0_Sound_001
   2912  17a7							; __Skip_Ch0_Sound_001
   2913  17a7
   2914  17a7				   .
   2915  17a7							; 
   2916  17a7
   2917  17a7				   .
   2918  17a7							; 
   2919  17a7
   2920  17a7				   .
   2921  17a7							; 
   2922  17a7
   2923  17a7				   .
   2924  17a7							; 
   2925  17a7
   2926  17a7				   .L0361		;  if _Ch0_Sound  <>  2 then goto __Skip_Ch0_Sound_002
   2927  17a7
   2928  17a7		       a5 da		      LDA	_Ch0_Sound
   2929  17a9		       c9 02		      CMP	#2
   2930  17ab		       f0 03		      BEQ	.skipL0361
   2931  17ad				   .condpart75
   2932  17ad		       4c ec d7 	      jmp	.__Skip_Ch0_Sound_002
   2933  17b0
   2934  17b0				   .skipL0361
   2935  17b0				   .
   2936  17b0							; 
   2937  17b0
   2938  17b0				   .
   2939  17b0							; 
   2940  17b0
   2941  17b0				   .L0362		;  temp4  =  _SD_Shoot_Miss[_Ch0_Counter]
   2942  17b0
   2943  17b0		       a6 dc		      LDX	_Ch0_Counter
   2944  17b2		       bd da d8 	      LDA	_SD_Shoot_Miss,x
   2945  17b5		       85 9f		      STA	temp4
   2946  17b7				   .
   2947  17b7							; 
   2948  17b7
   2949  17b7				   .
   2950  17b7							; 
   2951  17b7
   2952  17b7				   .L0363		;  if temp4  =  255 then goto __Clear_Ch_0
   2953  17b7
   2954  17b7		       a5 9f		      LDA	temp4
   2955  17b9		       c9 ff		      CMP	#255
   2956  17bb		       d0 03		      BNE	.skipL0363
   2957  17bd				   .condpart76
   2958  17bd		       4c 76 d8 	      jmp	.__Clear_Ch_0
   2959  17c0
   2960  17c0				   .skipL0363
   2961  17c0				   .
   2962  17c0							; 
   2963  17c0
   2964  17c0				   .
   2965  17c0							; 
   2966  17c0
   2967  17c0				   .L0364		;  _Ch0_Counter  =  _Ch0_Counter  +  1
   2968  17c0
   2969  17c0		       e6 dc		      INC	_Ch0_Counter
   2970  17c2				   .L0365		;  temp5  =  _SD_Shoot_Miss[_Ch0_Counter]  :  _Ch0_Counter  =	_Ch0_Counter  +  1
   2971  17c2
   2972  17c2		       a6 dc		      LDX	_Ch0_Counter
   2973  17c4		       bd da d8 	      LDA	_SD_Shoot_Miss,x
   2974  17c7		       85 a0		      STA	temp5
   2975  17c9		       e6 dc		      INC	_Ch0_Counter
   2976  17cb				   .L0366		;  temp6  =  _SD_Shoot_Miss[_Ch0_Counter]  :  _Ch0_Counter  =	_Ch0_Counter  +  1
   2977  17cb
   2978  17cb		       a6 dc		      LDX	_Ch0_Counter
   2979  17cd		       bd da d8 	      LDA	_SD_Shoot_Miss,x
   2980  17d0		       85 a1		      STA	temp6
   2981  17d2		       e6 dc		      INC	_Ch0_Counter
   2982  17d4				   .
   2983  17d4							; 
   2984  17d4
   2985  17d4				   .
   2986  17d4							; 
   2987  17d4
   2988  17d4				   .L0367		;  AUDV0  =  temp4
   2989  17d4
   2990  17d4		       a5 9f		      LDA	temp4
   2991  17d6		       85 19		      STA	AUDV0
   2992  17d8				   .L0368		;  AUDC0  =  temp5
   2993  17d8
   2994  17d8		       a5 a0		      LDA	temp5
   2995  17da		       85 15		      STA	AUDC0
   2996  17dc				   .L0369		;  AUDF0  =  temp6
   2997  17dc
   2998  17dc		       a5 a1		      LDA	temp6
   2999  17de		       85 17		      STA	AUDF0
   3000  17e0				   .
   3001  17e0							; 
   3002  17e0
   3003  17e0				   .
   3004  17e0							; 
   3005  17e0
   3006  17e0				   .L0370		;  _Ch0_Duration  =  _SD_Shoot_Miss[_Ch0_Counter]  :  _Ch0_Counter  =	_Ch0_Counter  +  1
   3007  17e0
   3008  17e0		       a6 dc		      LDX	_Ch0_Counter
   3009  17e2		       bd da d8 	      LDA	_SD_Shoot_Miss,x
   3010  17e5		       85 db		      STA	_Ch0_Duration
   3011  17e7		       e6 dc		      INC	_Ch0_Counter
   3012  17e9				   .
   3013  17e9							; 
   3014  17e9
   3015  17e9				   .
   3016  17e9							; 
   3017  17e9
   3018  17e9				   .L0371		;  goto __Skip_Ch_0
   3019  17e9
   3020  17e9		       4c 7c d8 	      jmp	.__Skip_Ch_0
   3021  17ec
   3022  17ec				   .
   3023  17ec							; 
   3024  17ec
   3025  17ec				   .__Skip_Ch0_Sound_002
   3026  17ec							; __Skip_Ch0_Sound_002
   3027  17ec
   3028  17ec				   .
   3029  17ec							; 
   3030  17ec
   3031  17ec				   .
   3032  17ec							; 
   3033  17ec
   3034  17ec				   .
   3035  17ec							; 
   3036  17ec
   3037  17ec				   .
   3038  17ec							; 
   3039  17ec
   3040  17ec				   .L0372		;  if _Ch0_Sound  <>  3 then goto __Skip_Ch0_Sound_003
   3041  17ec
   3042  17ec		       a5 da		      LDA	_Ch0_Sound
   3043  17ee		       c9 03		      CMP	#3
   3044  17f0		       f0 03		      BEQ	.skipL0372
   3045  17f2				   .condpart77
   3046  17f2		       4c 31 d8 	      jmp	.__Skip_Ch0_Sound_003
   3047  17f5
   3048  17f5				   .skipL0372
   3049  17f5				   .
   3050  17f5							; 
   3051  17f5
   3052  17f5				   .
   3053  17f5							; 
   3054  17f5
   3055  17f5				   .L0373		;  temp4  =  _SD_Shoot_Enemy[_Ch0_Counter]
   3056  17f5
   3057  17f5		       a6 dc		      LDX	_Ch0_Counter
   3058  17f7		       bd 22 d9 	      LDA	_SD_Shoot_Enemy,x
   3059  17fa		       85 9f		      STA	temp4
   3060  17fc				   .
   3061  17fc							; 
   3062  17fc
   3063  17fc				   .
   3064  17fc							; 
   3065  17fc
   3066  17fc				   .L0374		;  if temp4  =  255 then goto __Clear_Ch_0
   3067  17fc
   3068  17fc		       a5 9f		      LDA	temp4
   3069  17fe		       c9 ff		      CMP	#255
   3070  1800		       d0 03		      BNE	.skipL0374
   3071  1802				   .condpart78
   3072  1802		       4c 76 d8 	      jmp	.__Clear_Ch_0
   3073  1805
   3074  1805				   .skipL0374
   3075  1805				   .
   3076  1805							; 
   3077  1805
   3078  1805				   .
   3079  1805							; 
   3080  1805
   3081  1805				   .L0375		;  _Ch0_Counter  =  _Ch0_Counter  +  1
   3082  1805
   3083  1805		       e6 dc		      INC	_Ch0_Counter
   3084  1807				   .L0376		;  temp5  =  _SD_Shoot_Enemy[_Ch0_Counter]  :	_Ch0_Counter  =  _Ch0_Counter  +  1
   3085  1807
   3086  1807		       a6 dc		      LDX	_Ch0_Counter
   3087  1809		       bd 22 d9 	      LDA	_SD_Shoot_Enemy,x
   3088  180c		       85 a0		      STA	temp5
   3089  180e		       e6 dc		      INC	_Ch0_Counter
   3090  1810				   .L0377		;  temp6  =  _SD_Shoot_Enemy[_Ch0_Counter]  :	_Ch0_Counter  =  _Ch0_Counter  +  1
   3091  1810
   3092  1810		       a6 dc		      LDX	_Ch0_Counter
   3093  1812		       bd 22 d9 	      LDA	_SD_Shoot_Enemy,x
   3094  1815		       85 a1		      STA	temp6
   3095  1817		       e6 dc		      INC	_Ch0_Counter
   3096  1819				   .
   3097  1819							; 
   3098  1819
   3099  1819				   .
   3100  1819							; 
   3101  1819
   3102  1819				   .L0378		;  AUDV0  =  temp4
   3103  1819
   3104  1819		       a5 9f		      LDA	temp4
   3105  181b		       85 19		      STA	AUDV0
   3106  181d				   .L0379		;  AUDC0  =  temp5
   3107  181d
   3108  181d		       a5 a0		      LDA	temp5
   3109  181f		       85 15		      STA	AUDC0
   3110  1821				   .L0380		;  AUDF0  =  temp6
   3111  1821
   3112  1821		       a5 a1		      LDA	temp6
   3113  1823		       85 17		      STA	AUDF0
   3114  1825				   .
   3115  1825							; 
   3116  1825
   3117  1825				   .
   3118  1825							; 
   3119  1825
   3120  1825				   .L0381		;  _Ch0_Duration  =  _SD_Shoot_Enemy[_Ch0_Counter]  :	_Ch0_Counter  =  _Ch0_Counter  +  1
   3121  1825
   3122  1825		       a6 dc		      LDX	_Ch0_Counter
   3123  1827		       bd 22 d9 	      LDA	_SD_Shoot_Enemy,x
   3124  182a		       85 db		      STA	_Ch0_Duration
   3125  182c		       e6 dc		      INC	_Ch0_Counter
   3126  182e				   .
   3127  182e							; 
   3128  182e
   3129  182e				   .
   3130  182e							; 
   3131  182e
   3132  182e				   .L0382		;  goto __Skip_Ch_0
   3133  182e
   3134  182e		       4c 7c d8 	      jmp	.__Skip_Ch_0
   3135  1831
   3136  1831				   .
   3137  1831							; 
   3138  1831
   3139  1831				   .__Skip_Ch0_Sound_003
   3140  1831							; __Skip_Ch0_Sound_003
   3141  1831
   3142  1831				   .
   3143  1831							; 
   3144  1831
   3145  1831				   .
   3146  1831							; 
   3147  1831
   3148  1831				   .
   3149  1831							; 
   3150  1831
   3151  1831				   .
   3152  1831							; 
   3153  1831
   3154  1831				   .L0383		;  if _Ch0_Sound  <>  4 then goto __Skip_Ch0_Sound_004
   3155  1831
   3156  1831		       a5 da		      LDA	_Ch0_Sound
   3157  1833		       c9 04		      CMP	#4
   3158  1835		       f0 03		      BEQ	.skipL0383
   3159  1837				   .condpart79
   3160  1837		       4c 76 d8 	      jmp	.__Skip_Ch0_Sound_004
   3161  183a
   3162  183a				   .skipL0383
   3163  183a				   .
   3164  183a							; 
   3165  183a
   3166  183a				   .
   3167  183a							; 
   3168  183a
   3169  183a				   .L0384		;  temp4  =  _SD_Touch_Enemy[_Ch0_Counter]
   3170  183a
   3171  183a		       a6 dc		      LDX	_Ch0_Counter
   3172  183c		       bd 46 d9 	      LDA	_SD_Touch_Enemy,x
   3173  183f		       85 9f		      STA	temp4
   3174  1841				   .
   3175  1841							; 
   3176  1841
   3177  1841				   .
   3178  1841							; 
   3179  1841
   3180  1841				   .L0385		;  if temp4  =  255 then goto __Clear_Ch_0
   3181  1841
   3182  1841		       a5 9f		      LDA	temp4
   3183  1843		       c9 ff		      CMP	#255
   3184  1845		       d0 03		      BNE	.skipL0385
   3185  1847				   .condpart80
   3186  1847		       4c 76 d8 	      jmp	.__Clear_Ch_0
   3187  184a
   3188  184a				   .skipL0385
   3189  184a				   .
   3190  184a							; 
   3191  184a
   3192  184a				   .
   3193  184a							; 
   3194  184a
   3195  184a				   .L0386		;  _Ch0_Counter  =  _Ch0_Counter  +  1
   3196  184a
   3197  184a		       e6 dc		      INC	_Ch0_Counter
   3198  184c				   .L0387		;  temp5  =  _SD_Touch_Enemy[_Ch0_Counter]  :	_Ch0_Counter  =  _Ch0_Counter  +  1
   3199  184c
   3200  184c		       a6 dc		      LDX	_Ch0_Counter
   3201  184e		       bd 46 d9 	      LDA	_SD_Touch_Enemy,x
   3202  1851		       85 a0		      STA	temp5
   3203  1853		       e6 dc		      INC	_Ch0_Counter
   3204  1855				   .L0388		;  temp6  =  _SD_Touch_Enemy[_Ch0_Counter]  :	_Ch0_Counter  =  _Ch0_Counter  +  1
   3205  1855
   3206  1855		       a6 dc		      LDX	_Ch0_Counter
   3207  1857		       bd 46 d9 	      LDA	_SD_Touch_Enemy,x
   3208  185a		       85 a1		      STA	temp6
   3209  185c		       e6 dc		      INC	_Ch0_Counter
   3210  185e				   .
   3211  185e							; 
   3212  185e
   3213  185e				   .
   3214  185e							; 
   3215  185e
   3216  185e				   .L0389		;  AUDV0  =  temp4
   3217  185e
   3218  185e		       a5 9f		      LDA	temp4
   3219  1860		       85 19		      STA	AUDV0
   3220  1862				   .L0390		;  AUDC0  =  temp5
   3221  1862
   3222  1862		       a5 a0		      LDA	temp5
   3223  1864		       85 15		      STA	AUDC0
   3224  1866				   .L0391		;  AUDF0  =  temp6
   3225  1866
   3226  1866		       a5 a1		      LDA	temp6
   3227  1868		       85 17		      STA	AUDF0
   3228  186a				   .
   3229  186a							; 
   3230  186a
   3231  186a				   .
   3232  186a							; 
   3233  186a
   3234  186a				   .L0392		;  _Ch0_Duration  =  _SD_Touch_Enemy[_Ch0_Counter]  :	_Ch0_Counter  =  _Ch0_Counter  +  1
   3235  186a
   3236  186a		       a6 dc		      LDX	_Ch0_Counter
   3237  186c		       bd 46 d9 	      LDA	_SD_Touch_Enemy,x
   3238  186f		       85 db		      STA	_Ch0_Duration
   3239  1871		       e6 dc		      INC	_Ch0_Counter
   3240  1873				   .
   3241  1873							; 
   3242  1873
   3243  1873				   .
   3244  1873							; 
   3245  1873
   3246  1873				   .L0393		;  goto __Skip_Ch_0
   3247  1873
   3248  1873		       4c 7c d8 	      jmp	.__Skip_Ch_0
   3249  1876
   3250  1876				   .
   3251  1876							; 
   3252  1876
   3253  1876				   .__Skip_Ch0_Sound_004
   3254  1876							; __Skip_Ch0_Sound_004
   3255  1876
   3256  1876				   .
   3257  1876							; 
   3258  1876
   3259  1876				   .
   3260  1876							; 
   3261  1876
   3262  1876				   .__Clear_Ch_0
   3263  1876							; __Clear_Ch_0
   3264  1876
   3265  1876				   .L0394		;  _Ch0_Sound	=  0  :  AUDV0	=  0
   3266  1876
   3267  1876		       a9 00		      LDA	#0
   3268  1878		       85 da		      STA	_Ch0_Sound
   3269  187a		       85 19		      STA	AUDV0
   3270  187c				   .
   3271  187c							; 
   3272  187c
   3273  187c				   .
   3274  187c							; 
   3275  187c
   3276  187c				   .__Skip_Ch_0
   3277  187c							; __Skip_Ch_0
   3278  187c
   3279  187c				   .
   3280  187c							; 
   3281  187c
   3282  187c				   .
   3283  187c							; 
   3284  187c
   3285  187c				   .
   3286  187c							; 
   3287  187c
   3288  187c				   .
   3289  187c							; 
   3290  187c
   3291  187c				   .L0395		;  if _Bit6_Flip_P0{6} then REFP1  =  8
   3292  187c
   3293  187c		       24 ec		      BIT	_Bit6_Flip_P0
   3294  187e		       50 04		      BVC	.skipL0395
   3295  1880				   .condpart81
   3296  1880		       a9 08		      LDA	#8
   3297  1882		       85 0c		      STA	REFP1
   3298  1884				   .skipL0395
   3299  1884				   .
   3300  1884							; 
   3301  1884
   3302  1884				   .L0396		;  drawscreen
   3303  1884
   3304  1884		       85 ee		      sta	temp7
   3305  1886		       a9 d8		      lda	#>(ret_point3-1)
   3306  1888		       48		      pha
   3307  1889		       a9 9b		      lda	#<(ret_point3-1)
   3308  188b		       48		      pha
   3309  188c		       a9 f5		      lda	#>(drawscreen-1)
   3310  188e		       48		      pha
   3311  188f		       a9 82		      lda	#<(drawscreen-1)
   3312  1891		       48		      pha
   3313  1892		       a5 ee		      lda	temp7
   3314  1894		       48		      pha
   3315  1895		       8a		      txa
   3316  1896		       48		      pha
   3317  1897		       a2 02		      ldx	#2
   3318  1899		       4c e8 ff 	      jmp	BS_jsr
   3319  189c				   ret_point3
   3320  189c				   .
   3321  189c							; 
   3322  189c
   3323  189c				   .L0397		;  goto __Main_Loop
   3324  189c
   3325  189c		       4c e5 d1 	      jmp	.__Main_Loop
   3326  189f
   3327  189f				   .
   3328  189f							; 
   3329  189f
   3330  189f				   .
   3331  189f							; 
   3332  189f
   3333  189f				   .
   3334  189f							; 
   3335  189f
   3336  189f				   .
   3337  189f							; 
   3338  189f
   3339  189f				   .
   3340  189f							; 
   3341  189f
   3342  189f				   .L0398		;  data _SD_Shot_Wall
   3343  189f
   3344  189f		       4c d7 d8 	      JMP	.skipL0398
   3345  18a2				   _SD_Shot_Wall
   3346  18a2		       08 08 00 	      .byte.b	8,8,0
   3347  18a5
   3348  18a5		       01		      .byte.b	1
   3349  18a6
   3350  18a6		       08 08 01 	      .byte.b	8,8,1
   3351  18a9
   3352  18a9		       01		      .byte.b	1
   3353  18aa
   3354  18aa		       08 0e 01 	      .byte.b	8,14,1
   3355  18ad
   3356  18ad		       01		      .byte.b	1
   3357  18ae
   3358  18ae		       08 08 00 	      .byte.b	8,8,0
   3359  18b1
   3360  18b1		       01		      .byte.b	1
   3361  18b2
   3362  18b2		       08 08 02 	      .byte.b	8,8,2
   3363  18b5
   3364  18b5		       01		      .byte.b	1
   3365  18b6
   3366  18b6		       08 0e 02 	      .byte.b	8,14,2
   3367  18b9
   3368  18b9		       01		      .byte.b	1
   3369  18ba
   3370  18ba		       08 08 01 	      .byte.b	8,8,1
   3371  18bd
   3372  18bd		       01		      .byte.b	1
   3373  18be
   3374  18be		       07 08 03 	      .byte.b	7,8,3
   3375  18c1
   3376  18c1		       01		      .byte.b	1
   3377  18c2
   3378  18c2		       06 08 02 	      .byte.b	6,8,2
   3379  18c5
   3380  18c5		       01		      .byte.b	1
   3381  18c6
   3382  18c6		       05 08 04 	      .byte.b	5,8,4
   3383  18c9
   3384  18c9		       01		      .byte.b	1
   3385  18ca
   3386  18ca		       04 08 03 	      .byte.b	4,8,3
   3387  18cd
   3388  18cd		       01		      .byte.b	1
   3389  18ce
   3390  18ce		       03 08 05 	      .byte.b	3,8,5
   3391  18d1
   3392  18d1		       01		      .byte.b	1
   3393  18d2
   3394  18d2		       02 0e 04 	      .byte.b	2,14,4
   3395  18d5
   3396  18d5		       04		      .byte.b	4
   3397  18d6
   3398  18d6		       ff		      .byte.b	255
   3399  18d7
   3400  18d7				   .skipL0398
   3401  18d7				   .
   3402  18d7							; 
   3403  18d7
   3404  18d7				   .
   3405  18d7							; 
   3406  18d7
   3407  18d7				   .L0399		;  data _SD_Shoot_Miss
   3408  18d7
   3409  18d7		       4c 1f d9 	      JMP	.skipL0399
   3410  18da				   _SD_Shoot_Miss
   3411  18da		       08 0f 00 	      .byte.b	8,15,0
   3412  18dd
   3413  18dd		       01		      .byte.b	1
   3414  18de
   3415  18de		       0c 0f 01 	      .byte.b	12,15,1
   3416  18e1
   3417  18e1		       01		      .byte.b	1
   3418  18e2
   3419  18e2		       08 07 14 	      .byte.b	8,7,20
   3420  18e5
   3421  18e5		       01		      .byte.b	1
   3422  18e6
   3423  18e6		       0a 0f 03 	      .byte.b	10,15,3
   3424  18e9
   3425  18e9		       01		      .byte.b	1
   3426  18ea
   3427  18ea		       08 07 16 	      .byte.b	8,7,22
   3428  18ed
   3429  18ed		       01		      .byte.b	1
   3430  18ee
   3431  18ee		       0a 0f 05 	      .byte.b	10,15,5
   3432  18f1
   3433  18f1		       01		      .byte.b	1
   3434  18f2
   3435  18f2		       08 0f 06 	      .byte.b	8,15,6
   3436  18f5
   3437  18f5		       01		      .byte.b	1
   3438  18f6
   3439  18f6		       0a 07 18 	      .byte.b	10,7,24
   3440  18f9
   3441  18f9		       01		      .byte.b	1
   3442  18fa
   3443  18fa		       08 0f 08 	      .byte.b	8,15,8
   3444  18fd
   3445  18fd		       01		      .byte.b	1
   3446  18fe
   3447  18fe		       09 07 1b 	      .byte.b	9,7,27
   3448  1901
   3449  1901		       01		      .byte.b	1
   3450  1902
   3451  1902		       08 0f 0a 	      .byte.b	8,15,10
   3452  1905
   3453  1905		       01		      .byte.b	1
   3454  1906
   3455  1906		       07 0e 0b 	      .byte.b	7,14,11
   3456  1909
   3457  1909		       01		      .byte.b	1
   3458  190a
   3459  190a		       06 0f 0c 	      .byte.b	6,15,12
   3460  190d
   3461  190d		       01		      .byte.b	1
   3462  190e
   3463  190e		       05 06 0d 	      .byte.b	5,6,13
   3464  1911
   3465  1911		       01		      .byte.b	1
   3466  1912
   3467  1912		       04 0f 0e 	      .byte.b	4,15,14
   3468  1915
   3469  1915		       01		      .byte.b	1
   3470  1916
   3471  1916		       03 06 1b 	      .byte.b	3,6,27
   3472  1919
   3473  1919		       01		      .byte.b	1
   3474  191a
   3475  191a		       02 06 1e 	      .byte.b	2,6,30
   3476  191d
   3477  191d		       08		      .byte.b	8
   3478  191e
   3479  191e		       ff		      .byte.b	255
   3480  191f
   3481  191f				   .skipL0399
   3482  191f				   .
   3483  191f							; 
   3484  191f
   3485  191f				   .
   3486  191f							; 
   3487  191f
   3488  191f				   .L0400		;  data _SD_Shoot_Enemy
   3489  191f
   3490  191f		       4c 43 d9 	      JMP	.skipL0400
   3491  1922				   _SD_Shoot_Enemy
   3492  1922		       0c 04 17 	      .byte.b	12,4,23
   3493  1925
   3494  1925		       04		      .byte.b	4
   3495  1926
   3496  1926		       0a 04 1d 	      .byte.b	10,4,29
   3497  1929
   3498  1929		       04		      .byte.b	4
   3499  192a
   3500  192a		       08 04 17 	      .byte.b	8,4,23
   3501  192d
   3502  192d		       04		      .byte.b	4
   3503  192e
   3504  192e		       06 04 1d 	      .byte.b	6,4,29
   3505  1931
   3506  1931		       04		      .byte.b	4
   3507  1932
   3508  1932		       04 04 17 	      .byte.b	4,4,23
   3509  1935
   3510  1935		       04		      .byte.b	4
   3511  1936
   3512  1936		       03 04 1d 	      .byte.b	3,4,29
   3513  1939
   3514  1939		       04		      .byte.b	4
   3515  193a
   3516  193a		       02 04 17 	      .byte.b	2,4,23
   3517  193d
   3518  193d		       01		      .byte.b	1
   3519  193e
   3520  193e		       01 04 1d 	      .byte.b	1,4,29
   3521  1941
   3522  1941		       01		      .byte.b	1
   3523  1942
   3524  1942		       ff		      .byte.b	255
   3525  1943
   3526  1943				   .skipL0400
   3527  1943				   .
   3528  1943							; 
   3529  1943
   3530  1943				   .
   3531  1943							; 
   3532  1943
   3533  1943				   .L0401		;  data _SD_Touch_Enemy
   3534  1943
   3535  1943		       4c 63 d9 	      JMP	.skipL0401
   3536  1946				   _SD_Touch_Enemy
   3537  1946		       02 07 0b 	      .byte.b	2,7,11
   3538  1949
   3539  1949		       02		      .byte.b	2
   3540  194a
   3541  194a		       0a 07 0c 	      .byte.b	10,7,12
   3542  194d
   3543  194d		       02		      .byte.b	2
   3544  194e
   3545  194e		       08 07 0d 	      .byte.b	8,7,13
   3546  1951
   3547  1951		       02		      .byte.b	2
   3548  1952
   3549  1952		       08 07 0e 	      .byte.b	8,7,14
   3550  1955
   3551  1955		       02		      .byte.b	2
   3552  1956
   3553  1956		       08 07 15 	      .byte.b	8,7,21
   3554  1959
   3555  1959		       08		      .byte.b	8
   3556  195a
   3557  195a		       04 07 16 	      .byte.b	4,7,22
   3558  195d
   3559  195d		       02		      .byte.b	2
   3560  195e
   3561  195e		       02 07 17 	      .byte.b	2,7,23
   3562  1961
   3563  1961		       01		      .byte.b	1
   3564  1962
   3565  1962		       ff		      .byte.b	255
   3566  1963
   3567  1963				   .skipL0401
   3568  1963				   .
   3569  1963							; 
   3570  1963
   3571  1963				   .
   3572  1963							; 
   3573  1963
   3574  1963				   .
   3575  1963							; 
   3576  1963
   3577  1963				   .
   3578  1963							; 
   3579  1963
   3580  1963				   .
   3581  1963							; 
   3582  1963
   3583  1963				   .
   3584  1963							; 
   3585  1963
   3586  1963				   .
   3587  1963							; 
   3588  1963
   3589  1963				   .
   3590  1963							; 
   3591  1963
   3592  1963				   .L0402		;  rem Add the room state of the room we are just leaving to the request to store it at the backend
   3593  1963
   3594  1963				   ._send_room_state
   3595  1963							; _send_room_state
   3596  1963
   3597  1963				   .L0403		;  request_pending  =	1
   3598  1963
   3599  1963		       a9 01		      LDA	#1
   3600  1965		       85 d4		      STA	request_pending
   3601  1967				   .L0404		;  WriteToBuffer  =  r106
   3602  1967
   3603  1967		       ad ea f0 	      LDA	r106
   3604  196a		       8d f0 1f 	      STA	WriteToBuffer
   3605  196d				   .L0405		;  WriteToBuffer  =  r107
   3606  196d
   3607  196d		       ad eb f0 	      LDA	r107
   3608  1970		       8d f0 1f 	      STA	WriteToBuffer
   3609  1973				   .L0406		;  WriteToBuffer  =  r108
   3610  1973
   3611  1973		       ad ec f0 	      LDA	r108
   3612  1976		       8d f0 1f 	      STA	WriteToBuffer
   3613  1979				   .L0407		;  WriteToBuffer  =  r109
   3614  1979
   3615  1979		       ad ed f0 	      LDA	r109
   3616  197c		       8d f0 1f 	      STA	WriteToBuffer
   3617  197f				   .L0408		;  WriteToBuffer  =  r110
   3618  197f
   3619  197f		       ad ee f0 	      LDA	r110
   3620  1982		       8d f0 1f 	      STA	WriteToBuffer
   3621  1985				   .L0409		;  WriteToBuffer  =  r111
   3622  1985
   3623  1985		       ad ef f0 	      LDA	r111
   3624  1988		       8d f0 1f 	      STA	WriteToBuffer
   3625  198b				   .L0410		;  return
   3626  198b
   3627  198b		       ba		      tsx
   3628  198c		       b5 02		      lda	2,x	; check return address
   3629  198e		       49 d9		      eor	#(>*)	; vs. current PCH
   3630  1990		       29 e0		      and	#$E0	;  mask off all but top 3 bits
   3631  1992		       f0 03		      beq	*+5	; if equal, do normal return
   3632  1994		       4c da ff 	      JMP	BS_return
   3633  1997		       60		      RTS
   3634  1998				   .
   3635  1998							; 
   3636  1998
   3637  1998				   .
   3638  1998							; 
   3639  1998
   3640  1998				   .L0411		;  rem loading room (12 pf bytes + interior ) from backend
   3641  1998
   3642  1998				   .L0412		;  rem and write to SC/playfield RAM 
   3643  1998
   3644  1998				   .change_room
   3645  1998							; change_room
   3646  1998
   3647  1998				   .L0413		;  delay_counter  =  2  :  player0y  =  200
   3648  1998
   3649  1998		       a9 02		      LDA	#2
   3650  199a		       85 d5		      STA	delay_counter
   3651  199c		       a9 c8		      LDA	#200
   3652  199e		       85 85		      STA	player0y
   3653  19a0				   .L0414		;  _BitOp_misc  =  _BitOp_misc  &  %11111100
   3654  19a0
   3655  19a0		       a5 ec		      LDA	_BitOp_misc
   3656  19a2		       29 fc		      AND	#%11111100
   3657  19a4		       85 ec		      STA	_BitOp_misc
   3658  19a6				   .L0415		;  asm
   3659  19a6
   3660  19a6		       a9 00		      LDA	#0
   3661  19a8
   3662  19a8		       85 d4		      STA	request_pending
   3663  19aa
   3664  19aa		       85 89		      STA	bally
   3665  19ac
   3666  19ac		       85 dd		      STA	extra_wall_move_x
   3667  19ae
   3668  19ae		       85 de		      STA	roommate_move_x
   3669  19b0
   3670  19b0		       aa		      TAX
   3671  19b1
   3672  19b1				   .copy_loop
   3673  19b1
   3674  19b1		       ad f2 1f 	      LDA	ReceiveBuffer	; 4
   3675  19b4
   3676  19b4		       9d 64 f0 	      STA	w_room_definition_start,x	; 5   @9
   3677  19b7
   3678  19b7		       e8		      INX		; 2   @11
   3679  19b8
   3680  19b8		       ad f3 1f 	      LDA	ReceiveBufferSize	; 4   @15
   3681  19bb
   3682  19bb		       d0 f4		      BNE	.copy_loop	; 2/3 @18
   3683  19bd
   3684  19bd				   .L0416		;  roommate_type  =  r_roommate_type_and_range  &  3
   3685  19bd
   3686  19bd		       ad ea f0 	      LDA	r_roommate_type_and_range
   3687  19c0		       29 03		      AND	#3
   3688  19c2		       85 df		      STA	roommate_type
   3689  19c4				   .L0417		;  goto _skip_game_action
   3690  19c4
   3691  19c4		       4c 49 d7 	      jmp	._skip_game_action
   3692  19c7
   3693  19c7				   .
   3694  19c7							; 
   3695  19c7
   3696  19c7				   .
   3697  19c7							; 
   3698  19c7
   3699  19c7				   .
   3700  19c7							; 
   3701  19c7
   3702  19c7				   .L0418		;  rem define PlusROM backend URL here
   3703  19c7
   3704  19c7				   .L0419		;  rem don't let your program flow run into this code
   3705  19c7
   3706  19c7				   .L0420		;  asm
   3707  19c7
      0  19c7					      SET_PLUSROM_API	"a.php", "ca.firmaplus.de"
      1  19c7				   PlusROM_API
      2  19c7		       61 2e 70 68*	      .byte.b	"a.php", 0, "ca.firmaplus.de", 0
   3709  19dd
   3710  19dd				   .
   3711  19dd							; 
   3712  19dd
   3713  19dd				   .L0421		;  bank 2
   3714  19dd
   3715  19dd					      if	ECHO1
      1524 bytes of ROM space left in bank 1
   3716  19dd					      echo	"    ",[(start_bank1 - *)]d , "bytes of ROM space left in bank 1")
   3717  19dd					      endif
   3718  19dd		       00 01	   ECHO1      =	1
   3719  1fd1					      ORG	$1FF4-bscode_length
   3720  1fd1					      RORG	$DFF4-bscode_length
   3721  1fd1		       a2 ff	   start_bank1 ldx	#$ff
   3722  1fd3				  -	      ifconst	FASTFETCH	; using DPC+
   3723  1fd3				  -	      stx	FASTFETCH
   3724  1fd3					      endif
   3725  1fd3		       9a		      txs
   3726  1fd4				  -	      if	bankswitch == 64
   3727  1fd4				  -	      lda	#(((>(start-1)) & $0F) | $F0)
   3728  1fd4					      else
   3729  1fd4		       a9 f3		      lda	#>(start-1)
   3730  1fd6					      endif
   3731  1fd6		       48		      pha
   3732  1fd7		       a9 51		      lda	#<(start-1)
   3733  1fd9		       48		      pha
   3734  1fda		       48		      pha
   3735  1fdb		       8a		      txa
   3736  1fdc		       48		      pha
   3737  1fdd		       ba		      tsx
   3738  1fde					      if	bankswitch != 64
   3739  1fde		       b5 04		      lda	4,x	; get high byte of return address
   3740  1fe0		       2a		      rol
   3741  1fe1		       2a		      rol
   3742  1fe2		       2a		      rol
   3743  1fe3		       2a		      rol
   3744  1fe4		       29 01		      and	#bs_mask	;1 3 or 7 for F8/F6/F4
   3745  1fe6		       aa		      tax
   3746  1fe7		       e8		      inx
   3747  1fe8				  -	      else
   3748  1fe8				  -	      lda	4,x	; get high byte of return address
   3749  1fe8				  -	      tay
   3750  1fe8				  -	      ora	#$10	; change our bank nibble into a valid rom mirror
   3751  1fe8				  -	      sta	4,x
   3752  1fe8				  -	      tya
   3753  1fe8				  -	      lsr
   3754  1fe8				  -	      lsr
   3755  1fe8				  -	      lsr
   3756  1fe8				  -	      lsr
   3757  1fe8				  -	      tax
   3758  1fe8				  -	      inx
   3759  1fe8					      endif
   3760  1fe8		       bd f7 1f 	      lda	bankswitch_hotspot-1,x
   3761  1feb		       68		      pla
   3762  1fec		       aa		      tax
   3763  1fed		       68		      pla
   3764  1fee		       60		      rts
   3765  1fef				  -	      if	((* & $1FFF) > ((bankswitch_hotspot & $1FFF) - 1))
   3766  1fef				  -	      echo	"WARNING: size parameter in banksw.asm too small - the program probably will not work."
   3767  1fef				  -	      echo	"Change to",[(*-begin_bscode+1)&$FF]d,"and try again."
   3768  1fef					      endif
   3769  1ffc					      ORG	$1FFC
   3770  1ffc					      RORG	$DFFC
   3771  1ffc		       d1 df		      .word.w	(start_bank1 & $ffff)
   3772  1ffe		       d1 df		      .word.w	(start_bank1 & $ffff)
   3773  2000					      ORG	$2000
   3774  2000					      RORG	$F000
   3775  2000					      repeat	256
   3776  2000		       ff		      .byte.b	$ff
   3775  2000					      repend
   3776  2001		       ff		      .byte.b	$ff
   3775  2001					      repend
   3776  2002		       ff		      .byte.b	$ff
   3775  2002					      repend
   3776  2003		       ff		      .byte.b	$ff
   3775  2003					      repend
   3776  2004		       ff		      .byte.b	$ff
   3775  2004					      repend
   3776  2005		       ff		      .byte.b	$ff
   3775  2005					      repend
   3776  2006		       ff		      .byte.b	$ff
   3775  2006					      repend
   3776  2007		       ff		      .byte.b	$ff
   3775  2007					      repend
   3776  2008		       ff		      .byte.b	$ff
   3775  2008					      repend
   3776  2009		       ff		      .byte.b	$ff
   3775  2009					      repend
   3776  200a		       ff		      .byte.b	$ff
   3775  200a					      repend
   3776  200b		       ff		      .byte.b	$ff
   3775  200b					      repend
   3776  200c		       ff		      .byte.b	$ff
   3775  200c					      repend
   3776  200d		       ff		      .byte.b	$ff
   3775  200d					      repend
   3776  200e		       ff		      .byte.b	$ff
   3775  200e					      repend
   3776  200f		       ff		      .byte.b	$ff
   3775  200f					      repend
   3776  2010		       ff		      .byte.b	$ff
   3775  2010					      repend
   3776  2011		       ff		      .byte.b	$ff
   3775  2011					      repend
   3776  2012		       ff		      .byte.b	$ff
   3775  2012					      repend
   3776  2013		       ff		      .byte.b	$ff
   3775  2013					      repend
   3776  2014		       ff		      .byte.b	$ff
   3775  2014					      repend
   3776  2015		       ff		      .byte.b	$ff
   3775  2015					      repend
   3776  2016		       ff		      .byte.b	$ff
   3775  2016					      repend
   3776  2017		       ff		      .byte.b	$ff
   3775  2017					      repend
   3776  2018		       ff		      .byte.b	$ff
   3775  2018					      repend
   3776  2019		       ff		      .byte.b	$ff
   3775  2019					      repend
   3776  201a		       ff		      .byte.b	$ff
   3775  201a					      repend
   3776  201b		       ff		      .byte.b	$ff
   3775  201b					      repend
   3776  201c		       ff		      .byte.b	$ff
   3775  201c					      repend
   3776  201d		       ff		      .byte.b	$ff
   3775  201d					      repend
   3776  201e		       ff		      .byte.b	$ff
   3775  201e					      repend
   3776  201f		       ff		      .byte.b	$ff
   3775  201f					      repend
   3776  2020		       ff		      .byte.b	$ff
   3775  2020					      repend
   3776  2021		       ff		      .byte.b	$ff
   3775  2021					      repend
   3776  2022		       ff		      .byte.b	$ff
   3775  2022					      repend
   3776  2023		       ff		      .byte.b	$ff
   3775  2023					      repend
   3776  2024		       ff		      .byte.b	$ff
   3775  2024					      repend
   3776  2025		       ff		      .byte.b	$ff
   3775  2025					      repend
   3776  2026		       ff		      .byte.b	$ff
   3775  2026					      repend
   3776  2027		       ff		      .byte.b	$ff
   3775  2027					      repend
   3776  2028		       ff		      .byte.b	$ff
   3775  2028					      repend
   3776  2029		       ff		      .byte.b	$ff
   3775  2029					      repend
   3776  202a		       ff		      .byte.b	$ff
   3775  202a					      repend
   3776  202b		       ff		      .byte.b	$ff
   3775  202b					      repend
   3776  202c		       ff		      .byte.b	$ff
   3775  202c					      repend
   3776  202d		       ff		      .byte.b	$ff
   3775  202d					      repend
   3776  202e		       ff		      .byte.b	$ff
   3775  202e					      repend
   3776  202f		       ff		      .byte.b	$ff
   3775  202f					      repend
   3776  2030		       ff		      .byte.b	$ff
   3775  2030					      repend
   3776  2031		       ff		      .byte.b	$ff
   3775  2031					      repend
   3776  2032		       ff		      .byte.b	$ff
   3775  2032					      repend
   3776  2033		       ff		      .byte.b	$ff
   3775  2033					      repend
   3776  2034		       ff		      .byte.b	$ff
   3775  2034					      repend
   3776  2035		       ff		      .byte.b	$ff
   3775  2035					      repend
   3776  2036		       ff		      .byte.b	$ff
   3775  2036					      repend
   3776  2037		       ff		      .byte.b	$ff
   3775  2037					      repend
   3776  2038		       ff		      .byte.b	$ff
   3775  2038					      repend
   3776  2039		       ff		      .byte.b	$ff
   3775  2039					      repend
   3776  203a		       ff		      .byte.b	$ff
   3775  203a					      repend
   3776  203b		       ff		      .byte.b	$ff
   3775  203b					      repend
   3776  203c		       ff		      .byte.b	$ff
   3775  203c					      repend
   3776  203d		       ff		      .byte.b	$ff
   3775  203d					      repend
   3776  203e		       ff		      .byte.b	$ff
   3775  203e					      repend
   3776  203f		       ff		      .byte.b	$ff
   3775  203f					      repend
   3776  2040		       ff		      .byte.b	$ff
   3775  2040					      repend
   3776  2041		       ff		      .byte.b	$ff
   3775  2041					      repend
   3776  2042		       ff		      .byte.b	$ff
   3775  2042					      repend
   3776  2043		       ff		      .byte.b	$ff
   3775  2043					      repend
   3776  2044		       ff		      .byte.b	$ff
   3775  2044					      repend
   3776  2045		       ff		      .byte.b	$ff
   3775  2045					      repend
   3776  2046		       ff		      .byte.b	$ff
   3775  2046					      repend
   3776  2047		       ff		      .byte.b	$ff
   3775  2047					      repend
   3776  2048		       ff		      .byte.b	$ff
   3775  2048					      repend
   3776  2049		       ff		      .byte.b	$ff
   3775  2049					      repend
   3776  204a		       ff		      .byte.b	$ff
   3775  204a					      repend
   3776  204b		       ff		      .byte.b	$ff
   3775  204b					      repend
   3776  204c		       ff		      .byte.b	$ff
   3775  204c					      repend
   3776  204d		       ff		      .byte.b	$ff
   3775  204d					      repend
   3776  204e		       ff		      .byte.b	$ff
   3775  204e					      repend
   3776  204f		       ff		      .byte.b	$ff
   3775  204f					      repend
   3776  2050		       ff		      .byte.b	$ff
   3775  2050					      repend
   3776  2051		       ff		      .byte.b	$ff
   3775  2051					      repend
   3776  2052		       ff		      .byte.b	$ff
   3775  2052					      repend
   3776  2053		       ff		      .byte.b	$ff
   3775  2053					      repend
   3776  2054		       ff		      .byte.b	$ff
   3775  2054					      repend
   3776  2055		       ff		      .byte.b	$ff
   3775  2055					      repend
   3776  2056		       ff		      .byte.b	$ff
   3775  2056					      repend
   3776  2057		       ff		      .byte.b	$ff
   3775  2057					      repend
   3776  2058		       ff		      .byte.b	$ff
   3775  2058					      repend
   3776  2059		       ff		      .byte.b	$ff
   3775  2059					      repend
   3776  205a		       ff		      .byte.b	$ff
   3775  205a					      repend
   3776  205b		       ff		      .byte.b	$ff
   3775  205b					      repend
   3776  205c		       ff		      .byte.b	$ff
   3775  205c					      repend
   3776  205d		       ff		      .byte.b	$ff
   3775  205d					      repend
   3776  205e		       ff		      .byte.b	$ff
   3775  205e					      repend
   3776  205f		       ff		      .byte.b	$ff
   3775  205f					      repend
   3776  2060		       ff		      .byte.b	$ff
   3775  2060					      repend
   3776  2061		       ff		      .byte.b	$ff
   3775  2061					      repend
   3776  2062		       ff		      .byte.b	$ff
   3775  2062					      repend
   3776  2063		       ff		      .byte.b	$ff
   3775  2063					      repend
   3776  2064		       ff		      .byte.b	$ff
   3775  2064					      repend
   3776  2065		       ff		      .byte.b	$ff
   3775  2065					      repend
   3776  2066		       ff		      .byte.b	$ff
   3775  2066					      repend
   3776  2067		       ff		      .byte.b	$ff
   3775  2067					      repend
   3776  2068		       ff		      .byte.b	$ff
   3775  2068					      repend
   3776  2069		       ff		      .byte.b	$ff
   3775  2069					      repend
   3776  206a		       ff		      .byte.b	$ff
   3775  206a					      repend
   3776  206b		       ff		      .byte.b	$ff
   3775  206b					      repend
   3776  206c		       ff		      .byte.b	$ff
   3775  206c					      repend
   3776  206d		       ff		      .byte.b	$ff
   3775  206d					      repend
   3776  206e		       ff		      .byte.b	$ff
   3775  206e					      repend
   3776  206f		       ff		      .byte.b	$ff
   3775  206f					      repend
   3776  2070		       ff		      .byte.b	$ff
   3775  2070					      repend
   3776  2071		       ff		      .byte.b	$ff
   3775  2071					      repend
   3776  2072		       ff		      .byte.b	$ff
   3775  2072					      repend
   3776  2073		       ff		      .byte.b	$ff
   3775  2073					      repend
   3776  2074		       ff		      .byte.b	$ff
   3775  2074					      repend
   3776  2075		       ff		      .byte.b	$ff
   3775  2075					      repend
   3776  2076		       ff		      .byte.b	$ff
   3775  2076					      repend
   3776  2077		       ff		      .byte.b	$ff
   3775  2077					      repend
   3776  2078		       ff		      .byte.b	$ff
   3775  2078					      repend
   3776  2079		       ff		      .byte.b	$ff
   3775  2079					      repend
   3776  207a		       ff		      .byte.b	$ff
   3775  207a					      repend
   3776  207b		       ff		      .byte.b	$ff
   3775  207b					      repend
   3776  207c		       ff		      .byte.b	$ff
   3775  207c					      repend
   3776  207d		       ff		      .byte.b	$ff
   3775  207d					      repend
   3776  207e		       ff		      .byte.b	$ff
   3775  207e					      repend
   3776  207f		       ff		      .byte.b	$ff
   3775  207f					      repend
   3776  2080		       ff		      .byte.b	$ff
   3775  2080					      repend
   3776  2081		       ff		      .byte.b	$ff
   3775  2081					      repend
   3776  2082		       ff		      .byte.b	$ff
   3775  2082					      repend
   3776  2083		       ff		      .byte.b	$ff
   3775  2083					      repend
   3776  2084		       ff		      .byte.b	$ff
   3775  2084					      repend
   3776  2085		       ff		      .byte.b	$ff
   3775  2085					      repend
   3776  2086		       ff		      .byte.b	$ff
   3775  2086					      repend
   3776  2087		       ff		      .byte.b	$ff
   3775  2087					      repend
   3776  2088		       ff		      .byte.b	$ff
   3775  2088					      repend
   3776  2089		       ff		      .byte.b	$ff
   3775  2089					      repend
   3776  208a		       ff		      .byte.b	$ff
   3775  208a					      repend
   3776  208b		       ff		      .byte.b	$ff
   3775  208b					      repend
   3776  208c		       ff		      .byte.b	$ff
   3775  208c					      repend
   3776  208d		       ff		      .byte.b	$ff
   3775  208d					      repend
   3776  208e		       ff		      .byte.b	$ff
   3775  208e					      repend
   3776  208f		       ff		      .byte.b	$ff
   3775  208f					      repend
   3776  2090		       ff		      .byte.b	$ff
   3775  2090					      repend
   3776  2091		       ff		      .byte.b	$ff
   3775  2091					      repend
   3776  2092		       ff		      .byte.b	$ff
   3775  2092					      repend
   3776  2093		       ff		      .byte.b	$ff
   3775  2093					      repend
   3776  2094		       ff		      .byte.b	$ff
   3775  2094					      repend
   3776  2095		       ff		      .byte.b	$ff
   3775  2095					      repend
   3776  2096		       ff		      .byte.b	$ff
   3775  2096					      repend
   3776  2097		       ff		      .byte.b	$ff
   3775  2097					      repend
   3776  2098		       ff		      .byte.b	$ff
   3775  2098					      repend
   3776  2099		       ff		      .byte.b	$ff
   3775  2099					      repend
   3776  209a		       ff		      .byte.b	$ff
   3775  209a					      repend
   3776  209b		       ff		      .byte.b	$ff
   3775  209b					      repend
   3776  209c		       ff		      .byte.b	$ff
   3775  209c					      repend
   3776  209d		       ff		      .byte.b	$ff
   3775  209d					      repend
   3776  209e		       ff		      .byte.b	$ff
   3775  209e					      repend
   3776  209f		       ff		      .byte.b	$ff
   3775  209f					      repend
   3776  20a0		       ff		      .byte.b	$ff
   3775  20a0					      repend
   3776  20a1		       ff		      .byte.b	$ff
   3775  20a1					      repend
   3776  20a2		       ff		      .byte.b	$ff
   3775  20a2					      repend
   3776  20a3		       ff		      .byte.b	$ff
   3775  20a3					      repend
   3776  20a4		       ff		      .byte.b	$ff
   3775  20a4					      repend
   3776  20a5		       ff		      .byte.b	$ff
   3775  20a5					      repend
   3776  20a6		       ff		      .byte.b	$ff
   3775  20a6					      repend
   3776  20a7		       ff		      .byte.b	$ff
   3775  20a7					      repend
   3776  20a8		       ff		      .byte.b	$ff
   3775  20a8					      repend
   3776  20a9		       ff		      .byte.b	$ff
   3775  20a9					      repend
   3776  20aa		       ff		      .byte.b	$ff
   3775  20aa					      repend
   3776  20ab		       ff		      .byte.b	$ff
   3775  20ab					      repend
   3776  20ac		       ff		      .byte.b	$ff
   3775  20ac					      repend
   3776  20ad		       ff		      .byte.b	$ff
   3775  20ad					      repend
   3776  20ae		       ff		      .byte.b	$ff
   3775  20ae					      repend
   3776  20af		       ff		      .byte.b	$ff
   3775  20af					      repend
   3776  20b0		       ff		      .byte.b	$ff
   3775  20b0					      repend
   3776  20b1		       ff		      .byte.b	$ff
   3775  20b1					      repend
   3776  20b2		       ff		      .byte.b	$ff
   3775  20b2					      repend
   3776  20b3		       ff		      .byte.b	$ff
   3775  20b3					      repend
   3776  20b4		       ff		      .byte.b	$ff
   3775  20b4					      repend
   3776  20b5		       ff		      .byte.b	$ff
   3775  20b5					      repend
   3776  20b6		       ff		      .byte.b	$ff
   3775  20b6					      repend
   3776  20b7		       ff		      .byte.b	$ff
   3775  20b7					      repend
   3776  20b8		       ff		      .byte.b	$ff
   3775  20b8					      repend
   3776  20b9		       ff		      .byte.b	$ff
   3775  20b9					      repend
   3776  20ba		       ff		      .byte.b	$ff
   3775  20ba					      repend
   3776  20bb		       ff		      .byte.b	$ff
   3775  20bb					      repend
   3776  20bc		       ff		      .byte.b	$ff
   3775  20bc					      repend
   3776  20bd		       ff		      .byte.b	$ff
   3775  20bd					      repend
   3776  20be		       ff		      .byte.b	$ff
   3775  20be					      repend
   3776  20bf		       ff		      .byte.b	$ff
   3775  20bf					      repend
   3776  20c0		       ff		      .byte.b	$ff
   3775  20c0					      repend
   3776  20c1		       ff		      .byte.b	$ff
   3775  20c1					      repend
   3776  20c2		       ff		      .byte.b	$ff
   3775  20c2					      repend
   3776  20c3		       ff		      .byte.b	$ff
   3775  20c3					      repend
   3776  20c4		       ff		      .byte.b	$ff
   3775  20c4					      repend
   3776  20c5		       ff		      .byte.b	$ff
   3775  20c5					      repend
   3776  20c6		       ff		      .byte.b	$ff
   3775  20c6					      repend
   3776  20c7		       ff		      .byte.b	$ff
   3775  20c7					      repend
   3776  20c8		       ff		      .byte.b	$ff
   3775  20c8					      repend
   3776  20c9		       ff		      .byte.b	$ff
   3775  20c9					      repend
   3776  20ca		       ff		      .byte.b	$ff
   3775  20ca					      repend
   3776  20cb		       ff		      .byte.b	$ff
   3775  20cb					      repend
   3776  20cc		       ff		      .byte.b	$ff
   3775  20cc					      repend
   3776  20cd		       ff		      .byte.b	$ff
   3775  20cd					      repend
   3776  20ce		       ff		      .byte.b	$ff
   3775  20ce					      repend
   3776  20cf		       ff		      .byte.b	$ff
   3775  20cf					      repend
   3776  20d0		       ff		      .byte.b	$ff
   3775  20d0					      repend
   3776  20d1		       ff		      .byte.b	$ff
   3775  20d1					      repend
   3776  20d2		       ff		      .byte.b	$ff
   3775  20d2					      repend
   3776  20d3		       ff		      .byte.b	$ff
   3775  20d3					      repend
   3776  20d4		       ff		      .byte.b	$ff
   3775  20d4					      repend
   3776  20d5		       ff		      .byte.b	$ff
   3775  20d5					      repend
   3776  20d6		       ff		      .byte.b	$ff
   3775  20d6					      repend
   3776  20d7		       ff		      .byte.b	$ff
   3775  20d7					      repend
   3776  20d8		       ff		      .byte.b	$ff
   3775  20d8					      repend
   3776  20d9		       ff		      .byte.b	$ff
   3775  20d9					      repend
   3776  20da		       ff		      .byte.b	$ff
   3775  20da					      repend
   3776  20db		       ff		      .byte.b	$ff
   3775  20db					      repend
   3776  20dc		       ff		      .byte.b	$ff
   3775  20dc					      repend
   3776  20dd		       ff		      .byte.b	$ff
   3775  20dd					      repend
   3776  20de		       ff		      .byte.b	$ff
   3775  20de					      repend
   3776  20df		       ff		      .byte.b	$ff
   3775  20df					      repend
   3776  20e0		       ff		      .byte.b	$ff
   3775  20e0					      repend
   3776  20e1		       ff		      .byte.b	$ff
   3775  20e1					      repend
   3776  20e2		       ff		      .byte.b	$ff
   3775  20e2					      repend
   3776  20e3		       ff		      .byte.b	$ff
   3775  20e3					      repend
   3776  20e4		       ff		      .byte.b	$ff
   3775  20e4					      repend
   3776  20e5		       ff		      .byte.b	$ff
   3775  20e5					      repend
   3776  20e6		       ff		      .byte.b	$ff
   3775  20e6					      repend
   3776  20e7		       ff		      .byte.b	$ff
   3775  20e7					      repend
   3776  20e8		       ff		      .byte.b	$ff
   3775  20e8					      repend
   3776  20e9		       ff		      .byte.b	$ff
   3775  20e9					      repend
   3776  20ea		       ff		      .byte.b	$ff
   3775  20ea					      repend
   3776  20eb		       ff		      .byte.b	$ff
   3775  20eb					      repend
   3776  20ec		       ff		      .byte.b	$ff
   3775  20ec					      repend
   3776  20ed		       ff		      .byte.b	$ff
   3775  20ed					      repend
   3776  20ee		       ff		      .byte.b	$ff
   3775  20ee					      repend
   3776  20ef		       ff		      .byte.b	$ff
   3775  20ef					      repend
   3776  20f0		       ff		      .byte.b	$ff
   3775  20f0					      repend
   3776  20f1		       ff		      .byte.b	$ff
   3775  20f1					      repend
   3776  20f2		       ff		      .byte.b	$ff
   3775  20f2					      repend
   3776  20f3		       ff		      .byte.b	$ff
   3775  20f3					      repend
   3776  20f4		       ff		      .byte.b	$ff
   3775  20f4					      repend
   3776  20f5		       ff		      .byte.b	$ff
   3775  20f5					      repend
   3776  20f6		       ff		      .byte.b	$ff
   3775  20f6					      repend
   3776  20f7		       ff		      .byte.b	$ff
   3775  20f7					      repend
   3776  20f8		       ff		      .byte.b	$ff
   3775  20f8					      repend
   3776  20f9		       ff		      .byte.b	$ff
   3775  20f9					      repend
   3776  20fa		       ff		      .byte.b	$ff
   3775  20fa					      repend
   3776  20fb		       ff		      .byte.b	$ff
   3775  20fb					      repend
   3776  20fc		       ff		      .byte.b	$ff
   3775  20fc					      repend
   3776  20fd		       ff		      .byte.b	$ff
   3775  20fd					      repend
   3776  20fe		       ff		      .byte.b	$ff
   3775  20fe					      repend
   3776  20ff		       ff		      .byte.b	$ff
   3777  2100					      repend
   3778  2100							; Provided under the CC0 license. See the included LICENSE.txt for details.
   3779  2100
   3780  2100							; This is a 2-line kernel!
   3781  2100					      ifnconst	vertical_reflect
   3782  2100				   kernel
   3783  2100					      endif
   3784  2100		       85 02		      sta	WSYNC
   3785  2102		       a9 ff		      lda	#255
   3786  2104		       8d 96 02 	      sta	TIM64T
   3787  2107
   3788  2107		       a9 01		      lda	#1
   3789  2109		       85 27		      sta	VDELBL
   3790  210b		       85 25		      sta	VDELP0
   3791  210d		       a6 92		      ldx	ballheight
   3792  210f		       e8		      inx
   3793  2110		       e8		      inx
   3794  2111		       86 9f		      stx	temp4
   3795  2113		       a5 86		      lda	player1y
   3796  2115		       85 9e		      sta	temp3
   3797  2117
   3798  2117				  -	      ifconst	shakescreen
   3799  2117				  -	      jsr	doshakescreen
   3800  2117					      else
   3801  2117		       a6 90		      ldx	missile0height
   3802  2119		       e8		      inx
   3803  211a					      endif
   3804  211a
   3805  211a		       e8		      inx
   3806  211b		       86 f6		      stx	stack1
   3807  211d
   3808  211d		       a5 89		      lda	bally
   3809  211f		       85 f7		      sta	stack2
   3810  2121
   3811  2121		       a5 85		      lda	player0y
   3812  2123		       a2 00		      ldx	#0
   3813  2125		       85 02		      sta	WSYNC
   3814  2127		       86 1b		      stx	GRP0
   3815  2129		       86 1c		      stx	GRP1
   3816  212b		       86 0e		      stx	PF1L
   3817  212d		       86 0f		      stx	PF2
   3818  212f		       86 2c		      stx	CXCLR
   3819  2131				  -	      ifconst	readpaddle
   3820  2131				  -	      stx	paddle
   3821  2131					      else
      0  2131					      sleep	3
      1  2131				   .CYCLES    SET	3
      2  2131
      3  2131				  -	      IF	.CYCLES < 2
      4  2131				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  2131				  -	      ERR
      6  2131					      ENDIF
      7  2131
      8  2131					      IF	.CYCLES & 1
      9  2131					      IFNCONST	NO_ILLEGAL_OPCODES
     10  2131		       04 00		      nop	0
     11  2133				  -	      ELSE
     12  2133				  -	      bit	VSYNC
     13  2133					      ENDIF
     14  2133				   .CYCLES    SET	.CYCLES - 3
     15  2133					      ENDIF
     16  2133
     17  2133				  -	      REPEAT	.CYCLES / 2
     18  2133				  -	      nop
     19  2133					      REPEND
   3823  2133					      endif
   3824  2133
   3825  2133		       95 9d		      sta	temp2,x
   3826  2135
   3827  2135							;store these so they can be retrieved later
   3828  2135				  -	      ifnconst	pfres
   3829  2135				  -	      ldx	#128-44+(4-pfwidth)*12
   3830  2135					      else
   3831  2135		       a2 74		      ldx	#132-pfres*pfwidth
   3832  2137					      endif
   3833  2137
   3834  2137		       c6 85		      dec	player0y
   3835  2139
   3836  2139		       a5 91		      lda	missile0y
   3837  213b		       85 a0		      sta	temp5
   3838  213d		       a5 88		      lda	missile1y
   3839  213f		       85 a1		      sta	temp6
   3840  2141
   3841  2141		       a5 ef		      lda	playfieldpos
   3842  2143		       85 9c		      sta	temp1
   3843  2145
   3844  2145				  -	      ifconst	pfrowheight
   3845  2145				  -	      lda	#pfrowheight+2
   3846  2145					      else
   3847  2145				  -	      ifnconst	pfres
   3848  2145				  -	      lda	#10
   3849  2145					      else
   3850  2145		       a9 1a		      lda	#(96/pfres)+2	; try to come close to the real size
   3851  2147					      endif
   3852  2147					      endif
   3853  2147		       18		      clc
   3854  2148		       e5 ef		      sbc	playfieldpos
   3855  214a		       85 ef		      sta	playfieldpos
   3856  214c		       4c 78 f1 	      jmp	.startkernel
   3857  214f
   3858  214f				   .skipDrawP0
   3859  214f		       a9 00		      lda	#0
   3860  2151		       a8		      tay
   3861  2152		       4c aa f1 	      jmp	.continueP0
   3862  2155
   3863  2155				   .skipDrawP1
   3864  2155		       a9 00		      lda	#0
   3865  2157		       a8		      tay
   3866  2158		       4c 82 f1 	      jmp	.continueP1
   3867  215b
   3868  215b				   .kerloop		; enter at cycle 59??
   3869  215b
   3870  215b				   continuekernel
      0  215b					      sleep	2
      1  215b				   .CYCLES    SET	2
      2  215b
      3  215b				  -	      IF	.CYCLES < 2
      4  215b				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  215b				  -	      ERR
      6  215b					      ENDIF
      7  215b
      8  215b				  -	      IF	.CYCLES & 1
      9  215b				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  215b				  -	      nop	0
     11  215b				  -	      ELSE
     12  215b				  -	      bit	VSYNC
     13  215b				  -	      ENDIF
     14  215b				  -.CYCLES    SET	.CYCLES - 3
     15  215b					      ENDIF
     16  215b
     17  215b					      REPEAT	.CYCLES / 2
     18  215b		       ea		      nop
     19  215c					      REPEND
   3872  215c				   continuekernel2
   3873  215c		       a5 92		      lda	ballheight
   3874  215e
   3875  215e					      ifconst	pfres
   3876  215e		       bc 7c 10 	      ldy	playfield+pfres*pfwidth-132,x
   3877  2161		       84 0e		      sty	PF1L	;3
   3878  2163		       bc 7d 10 	      ldy	playfield+pfres*pfwidth-131-pfadjust,x
   3879  2166		       84 0f		      sty	PF2L	;3
   3880  2168		       bc 7f 10 	      ldy	playfield+pfres*pfwidth-129,x
   3881  216b		       84 0e		      sty	PF1R	; 3 too early?
   3882  216d		       bc 7e 10 	      ldy	playfield+pfres*pfwidth-130-pfadjust,x
   3883  2170		       84 0f		      sty	PF2R	;3
   3884  2172				  -	      else
   3885  2172				  -	      ldy	playfield-48+pfwidth*12+44-128,x
   3886  2172				  -	      sty	PF1L	;3
   3887  2172				  -	      ldy	playfield-48+pfwidth*12+45-128-pfadjust,x	;4
   3888  2172				  -	      sty	PF2L	;3
   3889  2172				  -	      ldy	playfield-48+pfwidth*12+47-128,x	;4
   3890  2172				  -	      sty	PF1R	; 3 too early?
   3891  2172				  -	      ldy	playfield-48+pfwidth*12+46-128-pfadjust,x	;4
   3892  2172				  -	      sty	PF2R	;3
   3893  2172					      endif
   3894  2172
   3895  2172							; should be playfield+$38 for width=2
   3896  2172
   3897  2172		       c7 89		      dcp	bally
   3898  2174		       2a		      rol
   3899  2175		       2a		      rol
   3900  2176							; rol
   3901  2176							; rol
   3902  2176				   goback
   3903  2176		       85 1f		      sta	ENABL
   3904  2178				   .startkernel
   3905  2178		       a5 8f		      lda	player1height	;3
   3906  217a		       c7 86		      dcp	player1y	;5
   3907  217c		       90 d7		      bcc	.skipDrawP1	;2
   3908  217e		       a4 86		      ldy	player1y	;3
   3909  2180		       b1 8c		      lda	(player1pointer),y	;5; player0pointer must be selected carefully by the compiler
   3910  2182							; so it doesn't cross a page boundary!
   3911  2182
   3912  2182				   .continueP1
   3913  2182		       85 1c		      sta	GRP1	;3
   3914  2184
   3915  2184				  -	      ifnconst	player1colors
   3916  2184				  -	      lda	missile1height	;3
   3917  2184				  -	      dcp	missile1y	;5
   3918  2184				  -	      rol		;2
   3919  2184				  -	      rol		;2
   3920  2184				  -	      sta	ENAM1	;3
   3921  2184					      else
   3922  2184		       b1 87		      lda	(player1color),y
   3923  2186		       85 07		      sta	COLUP1
   3924  2188					      ifnconst	playercolors
      0  2188					      sleep	7
      1  2188				   .CYCLES    SET	7
      2  2188
      3  2188				  -	      IF	.CYCLES < 2
      4  2188				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  2188				  -	      ERR
      6  2188					      ENDIF
      7  2188
      8  2188					      IF	.CYCLES & 1
      9  2188					      IFNCONST	NO_ILLEGAL_OPCODES
     10  2188		       04 00		      nop	0
     11  218a				  -	      ELSE
     12  218a				  -	      bit	VSYNC
     13  218a					      ENDIF
     14  218a				   .CYCLES    SET	.CYCLES - 3
     15  218a					      ENDIF
     16  218a
     17  218a					      REPEAT	.CYCLES / 2
     18  218a		       ea		      nop
     17  218a					      REPEND
     18  218b		       ea		      nop
     19  218c					      REPEND
   3926  218c				  -	      else
   3927  218c				  -	      lda.w	player0colorstore
   3928  218c				  -	      sta	COLUP0
   3929  218c					      endif
   3930  218c					      endif
   3931  218c
   3932  218c					      ifconst	pfres
   3933  218c		       bd 7c 10 	      lda	playfield+pfres*pfwidth-132,x
   3934  218f		       85 0e		      sta	PF1L	;3
   3935  2191		       bd 7d 10 	      lda	playfield+pfres*pfwidth-131-pfadjust,x
   3936  2194		       85 0f		      sta	PF2L	;3
   3937  2196		       bd 7f 10 	      lda	playfield+pfres*pfwidth-129,x
   3938  2199		       85 0e		      sta	PF1R	; 3 too early?
   3939  219b		       bd 7e 10 	      lda	playfield+pfres*pfwidth-130-pfadjust,x
   3940  219e		       85 0f		      sta	PF2R	;3
   3941  21a0				  -	      else
   3942  21a0				  -	      lda	playfield-48+pfwidth*12+44-128,x	;4
   3943  21a0				  -	      sta	PF1L	;3
   3944  21a0				  -	      lda	playfield-48+pfwidth*12+45-128-pfadjust,x	;4
   3945  21a0				  -	      sta	PF2L	;3
   3946  21a0				  -	      lda	playfield-48+pfwidth*12+47-128,x	;4
   3947  21a0				  -	      sta	PF1R	; 3 too early?
   3948  21a0				  -	      lda	playfield-48+pfwidth*12+46-128-pfadjust,x	;4
   3949  21a0				  -	      sta	PF2R	;3
   3950  21a0					      endif
   3951  21a0							; sleep 3
   3952  21a0
   3953  21a0		       a5 8e		      lda	player0height
   3954  21a2		       c7 85		      dcp	player0y
   3955  21a4		       90 a9		      bcc	.skipDrawP0
   3956  21a6		       a4 85		      ldy	player0y
   3957  21a8		       b1 8a		      lda	(player0pointer),y
   3958  21aa				   .continueP0
   3959  21aa		       85 1b		      sta	GRP0
   3960  21ac
   3961  21ac					      ifnconst	no_blank_lines
   3962  21ac					      ifnconst	playercolors
   3963  21ac		       a5 90		      lda	missile0height	;3
   3964  21ae		       c7 91		      dcp	missile0y	;5
   3965  21b0		       e5 f6		      sbc	stack1
   3966  21b2		       85 1d		      sta	ENAM0	;3
   3967  21b4				  -	      else
   3968  21b4				  -	      lda	(player0color),y
   3969  21b4				  -	      sta	player0colorstore
   3970  21b4				  -	      sleep	6
   3971  21b4					      endif
   3972  21b4		       c6 9c		      dec	temp1
   3973  21b6		       d0 a3		      bne	continuekernel
   3974  21b8				  -	      else
   3975  21b8				  -	      dec	temp1
   3976  21b8				  -	      beq	altkernel2
   3977  21b8				  -	      ifconst	readpaddle
   3978  21b8				  -	      ldy	currentpaddle
   3979  21b8				  -	      lda	INPT0,y
   3980  21b8				  -	      bpl	noreadpaddle
   3981  21b8				  -	      inc	paddle
   3982  21b8				  -	      jmp	continuekernel2
   3983  21b8				  -noreadpaddle
   3984  21b8				  -	      sleep	2
   3985  21b8				  -	      jmp	continuekernel
   3986  21b8				  -	      else
   3987  21b8				  -	      ifnconst	playercolors
   3988  21b8				  -	      ifconst	PFcolors
   3989  21b8				  -	      txa
   3990  21b8				  -	      tay
   3991  21b8				  -	      lda	(pfcolortable),y
   3992  21b8				  -	      ifnconst	backgroundchange
   3993  21b8				  -	      sta	COLUPF
   3994  21b8				  -	      else
   3995  21b8				  -	      sta	COLUBK
   3996  21b8				  -	      endif
   3997  21b8				  -	      jmp	continuekernel
   3998  21b8				  -	      else
   3999  21b8				  -	      ifconst	kernelmacrodef
   4000  21b8				  -	      kernelmacro
   4001  21b8				  -	      else
   4002  21b8				  -	      sleep	12
   4003  21b8				  -	      endif
   4004  21b8				  -	      endif
   4005  21b8				  -	      else
   4006  21b8				  -	      lda	(player0color),y
   4007  21b8				  -	      sta	player0colorstore
   4008  21b8				  -	      sleep	4
   4009  21b8				  -	      endif
   4010  21b8				  -	      jmp	continuekernel
   4011  21b8				  -	      endif
   4012  21b8				  -altkernel2
   4013  21b8				  -	      txa
   4014  21b8				  -	      ifnconst	vertical_reflect
   4015  21b8				  -	      sbx	#256-pfwidth
   4016  21b8				  -	      else
   4017  21b8				  -	      sbx	#256-pfwidth/2
   4018  21b8				  -	      endif
   4019  21b8				  -	      bmi	lastkernelline
   4020  21b8				  -	      ifconst	pfrowheight
   4021  21b8				  -	      lda	#pfrowheight
   4022  21b8				  -	      else
   4023  21b8				  -	      ifnconst	pfres
   4024  21b8				  -	      lda	#8
   4025  21b8				  -	      else
   4026  21b8				  -	      lda	#(96/pfres)	; try to come close to the real size
   4027  21b8				  -	      endif
   4028  21b8				  -	      endif
   4029  21b8				  -	      sta	temp1
   4030  21b8				  -	      jmp	continuekernel
   4031  21b8					      endif
   4032  21b8
   4033  21b8				   altkernel
   4034  21b8
   4035  21b8				  -	      ifconst	PFmaskvalue
   4036  21b8				  -	      lda	#PFmaskvalue
   4037  21b8					      else
   4038  21b8		       a9 00		      lda	#0
   4039  21ba					      endif
   4040  21ba		       85 0e		      sta	PF1L
   4041  21bc		       85 0f		      sta	PF2
   4042  21be
   4043  21be
   4044  21be							;sleep 3
   4045  21be
   4046  21be							;28 cycles to fix things
   4047  21be							;minus 11=17
   4048  21be
   4049  21be							; lax temp4
   4050  21be							; clc
   4051  21be		       8a		      txa
   4052  21bf					      ifnconst	vertical_reflect
   4053  21bf		       cb fc		      sbx	#256-pfwidth
   4054  21c1				  -	      else
   4055  21c1				  -	      sbx	#256-pfwidth/2
   4056  21c1					      endif
   4057  21c1
   4058  21c1		       30 12		      bmi	lastkernelline
   4059  21c3
   4060  21c3				  -	      ifconst	PFcolorandheight
   4061  21c3				  -	      ifconst	pfres
   4062  21c3				  -	      ldy	playfieldcolorandheight-131+pfres*pfwidth,x
   4063  21c3				  -	      else
   4064  21c3				  -	      ldy	playfieldcolorandheight-87,x
   4065  21c3				  -	      endif
   4066  21c3				  -	      ifnconst	backgroundchange
   4067  21c3				  -	      sty	COLUPF
   4068  21c3				  -	      else
   4069  21c3				  -	      sty	COLUBK
   4070  21c3				  -	      endif
   4071  21c3				  -	      ifconst	pfres
   4072  21c3				  -	      lda	playfieldcolorandheight-132+pfres*pfwidth,x
   4073  21c3				  -	      else
   4074  21c3				  -	      lda	playfieldcolorandheight-88,x
   4075  21c3				  -	      endif
   4076  21c3				  -	      sta.w	temp1
   4077  21c3					      endif
   4078  21c3				  -	      ifconst	PFheights
   4079  21c3				  -	      lsr
   4080  21c3				  -	      lsr
   4081  21c3				  -	      tay
   4082  21c3				  -	      lda	(pfheighttable),y
   4083  21c3				  -	      sta.w	temp1
   4084  21c3					      endif
   4085  21c3					      ifconst	PFcolors
   4086  21c3		       a8		      tay
   4087  21c4		       b1 f0		      lda	(pfcolortable),y
   4088  21c6					      ifnconst	backgroundchange
   4089  21c6		       85 08		      sta	COLUPF
   4090  21c8				  -	      else
   4091  21c8				  -	      sta	COLUBK
   4092  21c8					      endif
   4093  21c8				  -	      ifconst	pfrowheight
   4094  21c8				  -	      lda	#pfrowheight
   4095  21c8					      else
   4096  21c8				  -	      ifnconst	pfres
   4097  21c8				  -	      lda	#8
   4098  21c8					      else
   4099  21c8		       a9 18		      lda	#(96/pfres)	; try to come close to the real size
   4100  21ca					      endif
   4101  21ca					      endif
   4102  21ca		       85 9c		      sta	temp1
   4103  21cc					      endif
   4104  21cc					      ifnconst	PFcolorandheight
   4105  21cc				  -	      ifnconst	PFcolors
   4106  21cc				  -	      ifnconst	PFheights
   4107  21cc				  -	      ifnconst	no_blank_lines
   4108  21cc				  -			; read paddle 0
   4109  21cc				  -			; lo-res paddle read
   4110  21cc				  -			; bit INPT0
   4111  21cc				  -			; bmi paddleskipread
   4112  21cc				  -			; inc paddle0
   4113  21cc				  -			;donepaddleskip
   4114  21cc				  -	      sleep	10
   4115  21cc				  -	      ifconst	pfrowheight
   4116  21cc				  -	      lda	#pfrowheight
   4117  21cc				  -	      else
   4118  21cc				  -	      ifnconst	pfres
   4119  21cc				  -	      lda	#8
   4120  21cc				  -	      else
   4121  21cc				  -	      lda	#(96/pfres)	; try to come close to the real size
   4122  21cc				  -	      endif
   4123  21cc				  -	      endif
   4124  21cc				  -	      sta	temp1
   4125  21cc				  -	      endif
   4126  21cc				  -	      endif
   4127  21cc					      endif
   4128  21cc					      endif
   4129  21cc
   4130  21cc
   4131  21cc		       a5 92		      lda	ballheight
   4132  21ce		       c7 89		      dcp	bally
   4133  21d0		       e5 9f		      sbc	temp4
   4134  21d2
   4135  21d2
   4136  21d2		       4c 76 f1 	      jmp	goback
   4137  21d5
   4138  21d5
   4139  21d5					      ifnconst	no_blank_lines
   4140  21d5				   lastkernelline
   4141  21d5				  -	      ifnconst	PFcolors
   4142  21d5				  -	      sleep	10
   4143  21d5					      else
   4144  21d5		       a0 7c		      ldy	#124
   4145  21d7		       b1 f0		      lda	(pfcolortable),y
   4146  21d9		       85 08		      sta	COLUPF
   4147  21db					      endif
   4148  21db
   4149  21db				  -	      ifconst	PFheights
   4150  21db				  -	      ldx	#1
   4151  21db				  -			;sleep 4
   4152  21db				  -	      sleep	3	; this was over 1 cycle
   4153  21db					      else
   4154  21db		       a6 ef		      ldx	playfieldpos
   4155  21dd							;sleep 3
      0  21dd					      sleep	2	; this was over 1 cycle
      1  21dd				   .CYCLES    SET	2
      2  21dd
      3  21dd				  -	      IF	.CYCLES < 2
      4  21dd				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  21dd				  -	      ERR
      6  21dd					      ENDIF
      7  21dd
      8  21dd				  -	      IF	.CYCLES & 1
      9  21dd				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  21dd				  -	      nop	0
     11  21dd				  -	      ELSE
     12  21dd				  -	      bit	VSYNC
     13  21dd				  -	      ENDIF
     14  21dd				  -.CYCLES    SET	.CYCLES - 3
     15  21dd					      ENDIF
     16  21dd
     17  21dd					      REPEAT	.CYCLES / 2
     18  21dd		       ea		      nop
     19  21de					      REPEND
   4157  21de					      endif
   4158  21de
   4159  21de		       4c 1b f2 	      jmp	enterlastkernel
   4160  21e1
   4161  21e1				  -	      else
   4162  21e1				  -lastkernelline
   4163  21e1				  -
   4164  21e1				  -	      ifconst	PFheights
   4165  21e1				  -	      ldx	#1
   4166  21e1				  -			;sleep 5
   4167  21e1				  -	      sleep	4	; this was over 1 cycle
   4168  21e1				  -	      else
   4169  21e1				  -	      ldx	playfieldpos
   4170  21e1				  -			;sleep 4
   4171  21e1				  -	      sleep	3	; this was over 1 cycle
   4172  21e1				  -	      endif
   4173  21e1				  -
   4174  21e1				  -	      cpx	#0
   4175  21e1				  -	      bne	.enterfromNBL
   4176  21e1				  -	      jmp	no_blank_lines_bailout
   4177  21e1					      endif
   4178  21e1
   4179  21e1					      if	((<*)>$d5)
   4180  2200		       00 00 00 00*	      align	256
   4181  2200					      endif
   4182  2200							; this is a kludge to prevent page wrapping - fix!!!
   4183  2200
   4184  2200				   .skipDrawlastP1
   4185  2200		       a9 00		      lda	#0
   4186  2202		       a8		      tay		; added so we don't cross a page
   4187  2203		       4c 2d f2 	      jmp	.continuelastP1
   4188  2206
   4189  2206				   .endkerloop		; enter at cycle 59??
   4190  2206
   4191  2206		       ea		      nop
   4192  2207
   4193  2207				   .enterfromNBL
   4194  2207					      ifconst	pfres
   4195  2207		       ac fc 10 	      ldy.w	playfield+pfres*pfwidth-4
   4196  220a		       84 0e		      sty	PF1L	;3
   4197  220c		       ac fd 10 	      ldy.w	playfield+pfres*pfwidth-3-pfadjust
   4198  220f		       84 0f		      sty	PF2L	;3
   4199  2211		       ac ff 10 	      ldy.w	playfield+pfres*pfwidth-1
   4200  2214		       84 0e		      sty	PF1R	; possibly too early?
   4201  2216		       ac fe 10 	      ldy.w	playfield+pfres*pfwidth-2-pfadjust
   4202  2219		       84 0f		      sty	PF2R	;3
   4203  221b				  -	      else
   4204  221b				  -	      ldy.w	playfield-48+pfwidth*12+44
   4205  221b				  -	      sty	PF1L	;3
   4206  221b				  -	      ldy.w	playfield-48+pfwidth*12+45-pfadjust
   4207  221b				  -	      sty	PF2L	;3
   4208  221b				  -	      ldy.w	playfield-48+pfwidth*12+47
   4209  221b				  -	      sty	PF1R	; possibly too early?
   4210  221b				  -	      ldy.w	playfield-48+pfwidth*12+46-pfadjust
   4211  221b				  -	      sty	PF2R	;3
   4212  221b					      endif
   4213  221b
   4214  221b				   enterlastkernel
   4215  221b		       a5 92		      lda	ballheight
   4216  221d
   4217  221d							; tya
   4218  221d		       c7 89		      dcp	bally
   4219  221f							; sleep 4
   4220  221f
   4221  221f							; sbc stack3
   4222  221f		       2a		      rol
   4223  2220		       2a		      rol
   4224  2221		       85 1f		      sta	ENABL
   4225  2223
   4226  2223		       a5 8f		      lda	player1height	;3
   4227  2225		       c7 86		      dcp	player1y	;5
   4228  2227		       90 d7		      bcc	.skipDrawlastP1
   4229  2229		       a4 86		      ldy	player1y	;3
   4230  222b		       b1 8c		      lda	(player1pointer),y	;5; player0pointer must be selected carefully by the compiler
   4231  222d							; so it doesn't cross a page boundary!
   4232  222d
   4233  222d				   .continuelastP1
   4234  222d		       85 1c		      sta	GRP1	;3
   4235  222f
   4236  222f				  -	      ifnconst	player1colors
   4237  222f				  -	      lda	missile1height	;3
   4238  222f				  -	      dcp	missile1y	;5
   4239  222f					      else
   4240  222f		       b1 87		      lda	(player1color),y
   4241  2231		       85 07		      sta	COLUP1
   4242  2233					      endif
   4243  2233
   4244  2233		       ca		      dex
   4245  2234							;dec temp4 ; might try putting this above PF writes
   4246  2234		       f0 36		      beq	endkernel
   4247  2236
   4248  2236
   4249  2236					      ifconst	pfres
   4250  2236		       ac fc 10 	      ldy.w	playfield+pfres*pfwidth-4
   4251  2239		       84 0e		      sty	PF1L	;3
   4252  223b		       ac fd 10 	      ldy.w	playfield+pfres*pfwidth-3-pfadjust
   4253  223e		       84 0f		      sty	PF2L	;3
   4254  2240		       ac ff 10 	      ldy.w	playfield+pfres*pfwidth-1
   4255  2243		       84 0e		      sty	PF1R	; possibly too early?
   4256  2245		       ac fe 10 	      ldy.w	playfield+pfres*pfwidth-2-pfadjust
   4257  2248		       84 0f		      sty	PF2R	;3
   4258  224a				  -	      else
   4259  224a				  -	      ldy.w	playfield-48+pfwidth*12+44
   4260  224a				  -	      sty	PF1L	;3
   4261  224a				  -	      ldy.w	playfield-48+pfwidth*12+45-pfadjust
   4262  224a				  -	      sty	PF2L	;3
   4263  224a				  -	      ldy.w	playfield-48+pfwidth*12+47
   4264  224a				  -	      sty	PF1R	; possibly too early?
   4265  224a				  -	      ldy.w	playfield-48+pfwidth*12+46-pfadjust
   4266  224a				  -	      sty	PF2R	;3
   4267  224a					      endif
   4268  224a
   4269  224a				  -	      ifnconst	player1colors
   4270  224a				  -	      rol		;2
   4271  224a				  -	      rol		;2
   4272  224a				  -	      sta	ENAM1	;3
   4273  224a					      else
   4274  224a					      ifnconst	playercolors
      0  224a					      sleep	7
      1  224a				   .CYCLES    SET	7
      2  224a
      3  224a				  -	      IF	.CYCLES < 2
      4  224a				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  224a				  -	      ERR
      6  224a					      ENDIF
      7  224a
      8  224a					      IF	.CYCLES & 1
      9  224a					      IFNCONST	NO_ILLEGAL_OPCODES
     10  224a		       04 00		      nop	0
     11  224c				  -	      ELSE
     12  224c				  -	      bit	VSYNC
     13  224c					      ENDIF
     14  224c				   .CYCLES    SET	.CYCLES - 3
     15  224c					      ENDIF
     16  224c
     17  224c					      REPEAT	.CYCLES / 2
     18  224c		       ea		      nop
     17  224c					      REPEND
     18  224d		       ea		      nop
     19  224e					      REPEND
   4276  224e				  -	      else
   4277  224e				  -	      lda.w	player0colorstore
   4278  224e				  -	      sta	COLUP0
   4279  224e					      endif
   4280  224e					      endif
   4281  224e
   4282  224e		       ad 8e 00 	      lda.w	player0height
   4283  2251		       c7 85		      dcp	player0y
   4284  2253		       90 11		      bcc	.skipDrawlastP0
   4285  2255		       a4 85		      ldy	player0y
   4286  2257		       b1 8a		      lda	(player0pointer),y
   4287  2259				   .continuelastP0
   4288  2259		       85 1b		      sta	GRP0
   4289  225b
   4290  225b
   4291  225b
   4292  225b					      ifnconst	no_blank_lines
   4293  225b		       a5 90		      lda	missile0height	;3
   4294  225d		       c7 91		      dcp	missile0y	;5
   4295  225f		       e5 f6		      sbc	stack1
   4296  2261		       85 1d		      sta	ENAM0	;3
   4297  2263		       4c 06 f2 	      jmp	.endkerloop
   4298  2266				  -	      else
   4299  2266				  -	      ifconst	readpaddle
   4300  2266				  -	      ldy	currentpaddle
   4301  2266				  -	      lda	INPT0,y
   4302  2266				  -	      bpl	noreadpaddle2
   4303  2266				  -	      inc	paddle
   4304  2266				  -	      jmp	.endkerloop
   4305  2266				  -noreadpaddle2
   4306  2266				  -	      sleep	4
   4307  2266				  -	      jmp	.endkerloop
   4308  2266				  -	      else		; no_blank_lines and no paddle reading
   4309  2266				  -	      pla
   4310  2266				  -	      pha		; 14 cycles in 4 bytes
   4311  2266				  -	      pla
   4312  2266				  -	      pha
   4313  2266				  -			; sleep 14
   4314  2266				  -	      jmp	.endkerloop
   4315  2266				  -	      endif
   4316  2266					      endif
   4317  2266
   4318  2266
   4319  2266							; ifconst donepaddleskip
   4320  2266							;paddleskipread
   4321  2266							; this is kind of lame, since it requires 4 cycles from a page boundary crossing
   4322  2266							; plus we get a lo-res paddle read
   4323  2266							; bmi donepaddleskip
   4324  2266							; endif
   4325  2266
   4326  2266				   .skipDrawlastP0
   4327  2266		       a9 00		      lda	#0
   4328  2268		       a8		      tay
   4329  2269		       4c 59 f2 	      jmp	.continuelastP0
   4330  226c
   4331  226c				  -	      ifconst	no_blank_lines
   4332  226c				  -no_blank_lines_bailout
   4333  226c				  -	      ldx	#0
   4334  226c					      endif
   4335  226c
   4336  226c				   endkernel
   4337  226c							; 6 digit score routine
   4338  226c		       86 0e		      stx	PF1
   4339  226e		       86 0f		      stx	PF2
   4340  2270		       86 0d		      stx	PF0
   4341  2272		       18		      clc
   4342  2273
   4343  2273				  -	      ifconst	pfrowheight
   4344  2273				  -	      lda	#pfrowheight+2
   4345  2273					      else
   4346  2273				  -	      ifnconst	pfres
   4347  2273				  -	      lda	#10
   4348  2273					      else
   4349  2273		       a9 1a		      lda	#(96/pfres)+2	; try to come close to the real size
   4350  2275					      endif
   4351  2275					      endif
   4352  2275
   4353  2275		       e5 ef		      sbc	playfieldpos
   4354  2277		       85 ef		      sta	playfieldpos
   4355  2279		       8a		      txa
   4356  227a
   4357  227a				  -	      ifconst	shakescreen
   4358  227a				  -	      bit	shakescreen
   4359  227a				  -	      bmi	noshakescreen2
   4360  227a				  -	      ldx	#$3D
   4361  227a				  -noshakescreen2
   4362  227a					      endif
   4363  227a
   4364  227a		       95 02		      sta	WSYNC,x
   4365  227c
   4366  227c							; STA WSYNC ;first one, need one more
   4367  227c		       85 0b		      sta	REFP0
   4368  227e		       85 0c		      sta	REFP1
   4369  2280		       85 1b		      STA	GRP0
   4370  2282		       85 1c		      STA	GRP1
   4371  2284							; STA PF1
   4372  2284							; STA PF2
   4373  2284		       85 2b		      sta	HMCLR
   4374  2286		       85 1d		      sta	ENAM0
   4375  2288		       85 1e		      sta	ENAM1
   4376  228a		       85 1f		      sta	ENABL
   4377  228c
   4378  228c		       a5 9d		      lda	temp2	;restore variables that were obliterated by kernel
   4379  228e		       85 85		      sta	player0y
   4380  2290		       a5 9e		      lda	temp3
   4381  2292		       85 86		      sta	player1y
   4382  2294				  -	      ifnconst	player1colors
   4383  2294				  -	      lda	temp6
   4384  2294				  -	      sta	missile1y
   4385  2294					      endif
   4386  2294					      ifnconst	playercolors
   4387  2294					      ifnconst	readpaddle
   4388  2294		       a5 a0		      lda	temp5
   4389  2296		       85 91		      sta	missile0y
   4390  2298					      endif
   4391  2298					      endif
   4392  2298		       a5 f7		      lda	stack2
   4393  229a		       85 89		      sta	bally
   4394  229c
   4395  229c							; strangely, this isn't required any more. might have
   4396  229c							; resulted from the no_blank_lines score bounce fix
   4397  229c							;ifconst no_blank_lines
   4398  229c							;sta WSYNC
   4399  229c							;endif
   4400  229c
   4401  229c		       ad 84 02 	      lda	INTIM
   4402  229f		       18		      clc
   4403  22a0					      ifnconst	vblank_time
   4404  22a0		       69 8e		      adc	#43+12+87
   4405  22a2				  -	      else
   4406  22a2				  -	      adc	#vblank_time+12+87
   4407  22a2				  -
   4408  22a2					      endif
   4409  22a2							; sta WSYNC
   4410  22a2		       8d 96 02 	      sta	TIM64T
   4411  22a5
   4412  22a5				  -	      ifconst	minikernel
   4413  22a5				  -	      jsr	minikernel
   4414  22a5					      endif
   4415  22a5
   4416  22a5							; now reassign temp vars for score pointers
   4417  22a5
   4418  22a5							; score pointers contain:
   4419  22a5							; score1-5: lo1,lo2,lo3,lo4,lo5,lo6
   4420  22a5							; swap lo2->temp1
   4421  22a5							; swap lo4->temp3
   4422  22a5							; swap lo6->temp5
   4423  22a5					      ifnconst	noscore
   4424  22a5		       a5 97		      lda	scorepointers+1
   4425  22a7							; ldy temp1
   4426  22a7		       85 9c		      sta	temp1
   4427  22a9							; sty scorepointers+1
   4428  22a9
   4429  22a9		       a5 99		      lda	scorepointers+3
   4430  22ab							; ldy temp3
   4431  22ab		       85 9e		      sta	temp3
   4432  22ad							; sty scorepointers+3
   4433  22ad
   4434  22ad
   4435  22ad		       85 2b		      sta	HMCLR
   4436  22af		       ba		      tsx
   4437  22b0		       86 f6		      stx	stack1
   4438  22b2		       a2 e0		      ldx	#$E0
   4439  22b4		       86 20		      stx	HMP0
   4440  22b6
   4441  22b6		       a5 a3		      LDA	scorecolor
   4442  22b8		       85 06		      STA	COLUP0
   4443  22ba		       85 07		      STA	COLUP1
   4444  22bc				  -	      ifconst	scorefade
   4445  22bc				  -	      STA	stack2
   4446  22bc					      endif
   4447  22bc					      ifconst	pfscore
   4448  22bc		       a5 f4		      lda	pfscorecolor
   4449  22be		       85 08		      sta	COLUPF
   4450  22c0					      endif
   4451  22c0		       85 02		      sta	WSYNC
   4452  22c2		       a2 00		      ldx	#0
   4453  22c4		       86 1b		      STx	GRP0
   4454  22c6		       86 1c		      STx	GRP1	; seems to be needed because of vdel
   4455  22c8
   4456  22c8		       a5 9b		      lda	scorepointers+5
   4457  22ca							; ldy temp5
   4458  22ca		       95 a0		      sta	temp5,x
   4459  22cc							; sty scorepointers+5
   4460  22cc		       a9 ff		      lda	#>scoretable
   4461  22ce		       85 97		      sta	scorepointers+1
   4462  22d0		       85 99		      sta	scorepointers+3
   4463  22d2		       85 9b		      sta	scorepointers+5
   4464  22d4		       85 9d		      sta	temp2
   4465  22d6		       85 9f		      sta	temp4
   4466  22d8		       85 a1		      sta	temp6
   4467  22da		       a0 07		      LDY	#7
   4468  22dc		       84 25		      STY	VDELP0
   4469  22de		       85 10		      STA	RESP0
   4470  22e0		       85 11		      STA	RESP1
   4471  22e2
   4472  22e2
   4473  22e2		       a9 03		      LDA	#$03
   4474  22e4		       85 04		      STA	NUSIZ0
   4475  22e6		       85 05		      STA	NUSIZ1
   4476  22e8		       85 26		      STA	VDELP1
   4477  22ea		       a9 f0		      LDA	#$F0
   4478  22ec		       85 21		      STA	HMP1
   4479  22ee		       b1 96		      lda	(scorepointers),y
   4480  22f0		       85 1b		      sta	GRP0
   4481  22f2		       85 2a		      STA	HMOVE	; cycle 73 ?
   4482  22f4		       4c 09 f3 	      jmp	beginscore
   4483  22f7
   4484  22f7
   4485  22f7					      if	((<*)>$d4)
   4486  2300		       00 00 00 00*	      align	256	; kludge that potentially wastes space! should be fixed!
   4487  2300					      endif
   4488  2300
   4489  2300				   loop2
   4490  2300		       b1 96		      lda	(scorepointers),y	;+5 68 204
   4491  2302		       85 1b		      sta	GRP0	;+3 71 213 D1 -- -- --
   4492  2304					      ifconst	pfscore
   4493  2304		       ad f2 00 	      lda.w	pfscore1
   4494  2307		       85 0e		      sta	PF1
   4495  2309				  -	      else
   4496  2309				  -	      ifconst	scorefade
   4497  2309				  -	      sleep	2
   4498  2309				  -	      dec	stack2	; decrement the temporary scorecolor
   4499  2309				  -	      else
   4500  2309				  -	      sleep	7
   4501  2309				  -	      endif
   4502  2309					      endif
   4503  2309							; cycle 0
   4504  2309				   beginscore
   4505  2309		       b1 9e		      lda	(scorepointers+$8),y	;+5 5 15
   4506  230b		       85 1c		      sta	GRP1	;+3 8 24 D1 D1 D2 --
   4507  230d		       b1 9c		      lda	(scorepointers+$6),y	;+5 13 39
   4508  230f		       85 1b		      sta	GRP0	;+3 16 48 D3 D1 D2 D2
   4509  2311		       b3 98		      lax	(scorepointers+$2),y	;+5 29 87
   4510  2313		       9a		      txs
   4511  2314		       b3 9a		      lax	(scorepointers+$4),y	;+5 36 108
   4512  2316				  -	      ifconst	scorefade
   4513  2316				  -	      lda	stack2
   4514  2316					      else
      0  2316					      sleep	3
      1  2316				   .CYCLES    SET	3
      2  2316
      3  2316				  -	      IF	.CYCLES < 2
      4  2316				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  2316				  -	      ERR
      6  2316					      ENDIF
      7  2316
      8  2316					      IF	.CYCLES & 1
      9  2316					      IFNCONST	NO_ILLEGAL_OPCODES
     10  2316		       04 00		      nop	0
     11  2318				  -	      ELSE
     12  2318				  -	      bit	VSYNC
     13  2318					      ENDIF
     14  2318				   .CYCLES    SET	.CYCLES - 3
     15  2318					      ENDIF
     16  2318
     17  2318				  -	      REPEAT	.CYCLES / 2
     18  2318				  -	      nop
     19  2318					      REPEND
   4516  2318					      endif
   4517  2318
   4518  2318					      ifconst	pfscore
   4519  2318		       a5 f3		      lda	pfscore2
   4520  231a		       85 0e		      sta	PF1
   4521  231c				  -	      else
   4522  231c				  -	      ifconst	scorefade
   4523  231c				  -	      sta	COLUP0
   4524  231c				  -	      sta	COLUP1
   4525  231c				  -	      else
   4526  231c				  -	      sleep	6
   4527  231c				  -	      endif
   4528  231c					      endif
   4529  231c
   4530  231c		       b1 a0		      lda	(scorepointers+$A),y	;+5 21 63
   4531  231e		       86 1c		      stx	GRP1	;+3 44 132 D3 D3 D4 D2!
   4532  2320		       ba		      tsx
   4533  2321		       86 1b		      stx	GRP0	;+3 47 141 D5 D3! D4 D4
   4534  2323		       85 1c		      sta	GRP1	;+3 50 150 D5 D5 D6 D4!
   4535  2325		       84 1b		      sty	GRP0	;+3 53 159 D4* D5! D6 D6
   4536  2327		       88		      dey
   4537  2328		       10 d6		      bpl	loop2	;+2 60 180
   4538  232a
   4539  232a		       a6 f6		      ldx	stack1
   4540  232c		       9a		      txs
   4541  232d							; lda scorepointers+1
   4542  232d		       a4 9c		      ldy	temp1
   4543  232f							; sta temp1
   4544  232f		       84 97		      sty	scorepointers+1
   4545  2331
   4546  2331		       a9 00		      LDA	#0
   4547  2333		       85 0e		      sta	PF1
   4548  2335		       85 1b		      STA	GRP0
   4549  2337		       85 1c		      STA	GRP1
   4550  2339		       85 25		      STA	VDELP0
   4551  233b		       85 26		      STA	VDELP1	;do we need these
   4552  233d		       85 04		      STA	NUSIZ0
   4553  233f		       85 05		      STA	NUSIZ1
   4554  2341
   4555  2341							; lda scorepointers+3
   4556  2341		       a4 9e		      ldy	temp3
   4557  2343							; sta temp3
   4558  2343		       84 99		      sty	scorepointers+3
   4559  2345
   4560  2345							; lda scorepointers+5
   4561  2345		       a4 a0		      ldy	temp5
   4562  2347							; sta temp5
   4563  2347		       84 9b		      sty	scorepointers+5
   4564  2349					      endif		;noscore
   4565  2349		       a9 c2		      LDA	#%11000010
   4566  234b		       85 02		      sta	WSYNC
   4567  234d		       85 01		      STA	VBLANK
      0  234f					      RETURN
      1  234f				  -	      ifnconst	bankswitch
      2  234f				  -	      rts
      3  234f					      else
      4  234f		       4c da ff 	      jmp	BS_return
      5  2352					      endif
   4569  2352
   4570  2352				  -	      ifconst	shakescreen
   4571  2352				  -doshakescreen
   4572  2352				  -	      bit	shakescreen
   4573  2352				  -	      bmi	noshakescreen
   4574  2352				  -	      sta	WSYNC
   4575  2352				  -noshakescreen
   4576  2352				  -	      ldx	missile0height
   4577  2352				  -	      inx
   4578  2352				  -	      rts
   4579  2352					      endif
   4580  2352
   4581  2352							; Provided under the CC0 license. See the included LICENSE.txt for details.
   4582  2352
   4583  2352				   start
   4584  2352		       78		      sei
   4585  2353		       d8		      cld
   4586  2354		       a0 00		      ldy	#0
   4587  2356		       a5 d0		      lda	$D0
   4588  2358		       c9 2c		      cmp	#$2C	;check RAM location #1
   4589  235a		       d0 07		      bne	MachineIs2600
   4590  235c		       a5 d1		      lda	$D1
   4591  235e		       c9 a9		      cmp	#$A9	;check RAM location #2
   4592  2360		       d0 01		      bne	MachineIs2600
   4593  2362		       88		      dey
   4594  2363				   MachineIs2600
   4595  2363		       a2 00		      ldx	#0
   4596  2365		       8a		      txa
   4597  2366				   clearmem
   4598  2366		       e8		      inx
   4599  2367		       9a		      txs
   4600  2368		       48		      pha
   4601  2369		       d0 fb		      bne	clearmem
   4602  236b		       84 9c		      sty	temp1
   4603  236d					      ifnconst	multisprite
   4604  236d				  -	      ifconst	pfrowheight
   4605  236d				  -	      lda	#pfrowheight
   4606  236d					      else
   4607  236d					      ifconst	pfres
   4608  236d		       a9 18		      lda	#(96/pfres)
   4609  236f				  -	      else
   4610  236f				  -	      lda	#8
   4611  236f					      endif
   4612  236f					      endif
   4613  236f		       85 ef		      sta	playfieldpos
   4614  2371					      endif
   4615  2371		       a2 05		      ldx	#5
   4616  2373				   initscore
   4617  2373		       a9 71		      lda	#<scoretable
   4618  2375		       95 96		      sta	scorepointers,x
   4619  2377		       ca		      dex
   4620  2378		       10 f9		      bpl	initscore
   4621  237a		       a9 01		      lda	#1
   4622  237c		       85 0a		      sta	CTRLPF
   4623  237e		       0d 84 02 	      ora	INTIM
   4624  2381		       85 a2		      sta	rand
   4625  2383
   4626  2383				  -	      ifconst	multisprite
   4627  2383				  -	      jsr	multisprite_setup
   4628  2383					      endif
   4629  2383
   4630  2383				  -	      ifnconst	bankswitch
   4631  2383				  -	      jmp	game
   4632  2383					      else
   4633  2383		       a9 d0		      lda	#>(game-1)
   4634  2385		       48		      pha
   4635  2386		       a9 ff		      lda	#<(game-1)
   4636  2388		       48		      pha
   4637  2389		       48		      pha
   4638  238a		       48		      pha
   4639  238b		       a2 01		      ldx	#1
   4640  238d		       4c e8 ff 	      jmp	BS_jsr
   4641  2390					      endif
   4642  2390							; Provided under the CC0 license. See the included LICENSE.txt for details.
   4643  2390
   4644  2390							; playfield drawing routines
   4645  2390							; you get a 32x12 bitmapped display in a single color :)
   4646  2390							; 0-31 and 0-11
   4647  2390
   4648  2390				   pfclear		; clears playfield - or fill with pattern
   4649  2390					      ifconst	pfres
   4650  2390		       a2 0f		      ldx	#pfres*pfwidth-1
   4651  2392				  -	      else
   4652  2392				  -	      ldx	#47-(4-pfwidth)*12	; will this work?
   4653  2392					      endif
   4654  2392				   pfclear_loop
   4655  2392				  -	      ifnconst	superchip
   4656  2392				  -	      sta	playfield,x
   4657  2392					      else
   4658  2392		       9d 70 10 	      sta	playfield-128,x
   4659  2395					      endif
   4660  2395		       ca		      dex
   4661  2396		       10 fa		      bpl	pfclear_loop
      0  2398					      RETURN
      1  2398				  -	      ifnconst	bankswitch
      2  2398				  -	      rts
      3  2398					      else
      4  2398		       4c da ff 	      jmp	BS_return
      5  239b					      endif
   4663  239b
   4664  239b				   setuppointers
   4665  239b		       86 9d		      stx	temp2	; store on.off.flip value
   4666  239d		       aa		      tax		; put x-value in x 
   4667  239e		       4a		      lsr
   4668  239f		       4a		      lsr
   4669  23a0		       4a		      lsr		; divide x pos by 8 
   4670  23a1		       85 9c		      sta	temp1
   4671  23a3		       98		      tya
   4672  23a4		       0a		      asl
   4673  23a5					      if	pfwidth=4
   4674  23a5		       0a		      asl		; multiply y pos by 4
   4675  23a6					      endif		; else multiply by 2
   4676  23a6		       18		      clc
   4677  23a7		       65 9c		      adc	temp1	; add them together to get actual memory location offset
   4678  23a9		       a8		      tay		; put the value in y
   4679  23aa		       a5 9d		      lda	temp2	; restore on.off.flip value
   4680  23ac		       60		      rts
   4681  23ad
   4682  23ad				   pfread
   4683  23ad							;x=xvalue, y=yvalue
   4684  23ad		       20 9b f3 	      jsr	setuppointers
   4685  23b0		       bd 45 f4 	      lda	setbyte,x
   4686  23b3		       39 f0 10 	      and	playfield,y
   4687  23b6		       5d 45 f4 	      eor	setbyte,x
   4688  23b9							; beq readzero
   4689  23b9							; lda #1
   4690  23b9							; readzero
      0  23b9					      RETURN
      1  23b9				  -	      ifnconst	bankswitch
      2  23b9				  -	      rts
      3  23b9					      else
      4  23b9		       4c da ff 	      jmp	BS_return
      5  23bc					      endif
   4692  23bc
   4693  23bc				   pfpixel
   4694  23bc							;x=xvalue, y=yvalue, a=0,1,2
   4695  23bc		       20 9b f3 	      jsr	setuppointers
   4696  23bf
   4697  23bf					      ifconst	bankswitch
   4698  23bf		       a5 9d		      lda	temp2	; load on.off.flip value (0,1, or 2)
   4699  23c1		       f0 0f		      beq	pixelon_r	; if "on" go to on
   4700  23c3		       4a		      lsr
   4701  23c4		       b0 18		      bcs	pixeloff_r	; value is 1 if true
   4702  23c6		       b9 f0 10 	      lda	playfield,y	; if here, it's "flip"
   4703  23c9		       5d 45 f4 	      eor	setbyte,x
   4704  23cc					      ifconst	superchip
   4705  23cc		       99 70 10 	      sta	playfield-128,y
   4706  23cf				  -	      else
   4707  23cf				  -	      sta	playfield,y
   4708  23cf					      endif
      0  23cf					      RETURN
      1  23cf				  -	      ifnconst	bankswitch
      2  23cf				  -	      rts
      3  23cf					      else
      4  23cf		       4c da ff 	      jmp	BS_return
      5  23d2					      endif
   4710  23d2				   pixelon_r
   4711  23d2		       b9 f0 10 	      lda	playfield,y
   4712  23d5		       1d 45 f4 	      ora	setbyte,x
   4713  23d8					      ifconst	superchip
   4714  23d8		       99 70 10 	      sta	playfield-128,y
   4715  23db				  -	      else
   4716  23db				  -	      sta	playfield,y
   4717  23db					      endif
      0  23db					      RETURN
      1  23db				  -	      ifnconst	bankswitch
      2  23db				  -	      rts
      3  23db					      else
      4  23db		       4c da ff 	      jmp	BS_return
      5  23de					      endif
   4719  23de				   pixeloff_r
   4720  23de		       bd 45 f4 	      lda	setbyte,x
   4721  23e1		       49 ff		      eor	#$ff
   4722  23e3		       39 f0 10 	      and	playfield,y
   4723  23e6					      ifconst	superchip
   4724  23e6		       99 70 10 	      sta	playfield-128,y
   4725  23e9				  -	      else
   4726  23e9				  -	      sta	playfield,y
   4727  23e9					      endif
      0  23e9					      RETURN
      1  23e9				  -	      ifnconst	bankswitch
      2  23e9				  -	      rts
      3  23e9					      else
      4  23e9		       4c da ff 	      jmp	BS_return
      5  23ec					      endif
   4729  23ec
   4730  23ec				  -	      else
   4731  23ec				  -	      jmp	plotpoint
   4732  23ec					      endif
   4733  23ec
   4734  23ec				   pfhline
   4735  23ec							;x=xvalue, y=yvalue, a=0,1,2, temp3=endx
   4736  23ec		       20 9b f3 	      jsr	setuppointers
   4737  23ef		       4c f9 f3 	      jmp	noinc
   4738  23f2				   keepgoing
   4739  23f2		       e8		      inx
   4740  23f3		       8a		      txa
   4741  23f4		       29 07		      and	#7
   4742  23f6		       d0 01		      bne	noinc
   4743  23f8		       c8		      iny
   4744  23f9				   noinc
   4745  23f9		       20 1e f4 	      jsr	plotpoint
   4746  23fc		       e4 9e		      cpx	temp3
   4747  23fe		       30 f2		      bmi	keepgoing
      0  2400					      RETURN
      1  2400				  -	      ifnconst	bankswitch
      2  2400				  -	      rts
      3  2400					      else
      4  2400		       4c da ff 	      jmp	BS_return
      5  2403					      endif
   4749  2403
   4750  2403				   pfvline
   4751  2403							;x=xvalue, y=yvalue, a=0,1,2, temp3=endx
   4752  2403		       20 9b f3 	      jsr	setuppointers
   4753  2406		       84 9c		      sty	temp1	; store memory location offset
   4754  2408		       e6 9e		      inc	temp3	; increase final x by 1 
   4755  240a		       a5 9e		      lda	temp3
   4756  240c		       0a		      asl
   4757  240d					      if	pfwidth=4
   4758  240d		       0a		      asl		; multiply by 4
   4759  240e					      endif		; else multiply by 2
   4760  240e		       85 9e		      sta	temp3	; store it
   4761  2410							; Thanks to Michael Rideout for fixing a bug in this code
   4762  2410							; right now, temp1=y=starting memory location, temp3=final
   4763  2410							; x should equal original x value
   4764  2410				   keepgoingy
   4765  2410		       20 1e f4 	      jsr	plotpoint
   4766  2413		       c8		      iny
   4767  2414		       c8		      iny
   4768  2415					      if	pfwidth=4
   4769  2415		       c8		      iny
   4770  2416		       c8		      iny
   4771  2417					      endif
   4772  2417		       c4 9e		      cpy	temp3
   4773  2419		       30 f5		      bmi	keepgoingy
      0  241b					      RETURN
      1  241b				  -	      ifnconst	bankswitch
      2  241b				  -	      rts
      3  241b					      else
      4  241b		       4c da ff 	      jmp	BS_return
      5  241e					      endif
   4775  241e
   4776  241e				   plotpoint
   4777  241e		       a5 9d		      lda	temp2	; load on.off.flip value (0,1, or 2)
   4778  2420		       f0 0d		      beq	pixelon	; if "on" go to on
   4779  2422		       4a		      lsr
   4780  2423		       b0 14		      bcs	pixeloff	; value is 1 if true
   4781  2425		       b9 f0 10 	      lda	playfield,y	; if here, it's "flip"
   4782  2428		       5d 45 f4 	      eor	setbyte,x
   4783  242b					      ifconst	superchip
   4784  242b		       99 70 10 	      sta	playfield-128,y
   4785  242e				  -	      else
   4786  242e				  -	      sta	playfield,y
   4787  242e					      endif
   4788  242e		       60		      rts
   4789  242f				   pixelon
   4790  242f		       b9 f0 10 	      lda	playfield,y
   4791  2432		       1d 45 f4 	      ora	setbyte,x
   4792  2435					      ifconst	superchip
   4793  2435		       99 70 10 	      sta	playfield-128,y
   4794  2438				  -	      else
   4795  2438				  -	      sta	playfield,y
   4796  2438					      endif
   4797  2438		       60		      rts
   4798  2439				   pixeloff
   4799  2439		       bd 45 f4 	      lda	setbyte,x
   4800  243c		       49 ff		      eor	#$ff
   4801  243e		       39 f0 10 	      and	playfield,y
   4802  2441					      ifconst	superchip
   4803  2441		       99 70 10 	      sta	playfield-128,y
   4804  2444				  -	      else
   4805  2444				  -	      sta	playfield,y
   4806  2444					      endif
   4807  2444		       60		      rts
   4808  2445
   4809  2445				   setbyte
   4810  2445					      ifnconst	pfcenter
   4811  2445		       80		      .byte.b	$80
   4812  2446		       40		      .byte.b	$40
   4813  2447		       20		      .byte.b	$20
   4814  2448		       10		      .byte.b	$10
   4815  2449		       08		      .byte.b	$08
   4816  244a		       04		      .byte.b	$04
   4817  244b		       02		      .byte.b	$02
   4818  244c		       01		      .byte.b	$01
   4819  244d					      endif
   4820  244d		       01		      .byte.b	$01
   4821  244e		       02		      .byte.b	$02
   4822  244f		       04		      .byte.b	$04
   4823  2450		       08		      .byte.b	$08
   4824  2451		       10		      .byte.b	$10
   4825  2452		       20		      .byte.b	$20
   4826  2453		       40		      .byte.b	$40
   4827  2454		       80		      .byte.b	$80
   4828  2455		       80		      .byte.b	$80
   4829  2456		       40		      .byte.b	$40
   4830  2457		       20		      .byte.b	$20
   4831  2458		       10		      .byte.b	$10
   4832  2459		       08		      .byte.b	$08
   4833  245a		       04		      .byte.b	$04
   4834  245b		       02		      .byte.b	$02
   4835  245c		       01		      .byte.b	$01
   4836  245d		       01		      .byte.b	$01
   4837  245e		       02		      .byte.b	$02
   4838  245f		       04		      .byte.b	$04
   4839  2460		       08		      .byte.b	$08
   4840  2461		       10		      .byte.b	$10
   4841  2462		       20		      .byte.b	$20
   4842  2463		       40		      .byte.b	$40
   4843  2464		       80		      .byte.b	$80
   4844  2465							; Provided under the CC0 license. See the included LICENSE.txt for details.
   4845  2465
   4846  2465				   pfscroll		;(a=0 left, 1 right, 2 up, 4 down, 6=upup, 12=downdown)
   4847  2465		       d0 2a		      bne	notleft
   4848  2467							;left
   4849  2467					      ifconst	pfres
   4850  2467		       a2 10		      ldx	#pfres*4
   4851  2469				  -	      else
   4852  2469				  -	      ldx	#48
   4853  2469					      endif
   4854  2469				   leftloop
   4855  2469		       bd ef 10 	      lda	playfield-1,x
   4856  246c		       4a		      lsr
   4857  246d
   4858  246d					      ifconst	superchip
   4859  246d		       bd ee 10 	      lda	playfield-2,x
   4860  2470		       2a		      rol
   4861  2471		       9d 6e 10 	      sta	playfield-130,x
   4862  2474		       bd ed 10 	      lda	playfield-3,x
   4863  2477		       6a		      ror
   4864  2478		       9d 6d 10 	      sta	playfield-131,x
   4865  247b		       bd ec 10 	      lda	playfield-4,x
   4866  247e		       2a		      rol
   4867  247f		       9d 6c 10 	      sta	playfield-132,x
   4868  2482		       bd ef 10 	      lda	playfield-1,x
   4869  2485		       6a		      ror
   4870  2486		       9d 6f 10 	      sta	playfield-129,x
   4871  2489				  -	      else
   4872  2489				  -	      rol	playfield-2,x
   4873  2489				  -	      ror	playfield-3,x
   4874  2489				  -	      rol	playfield-4,x
   4875  2489				  -	      ror	playfield-1,x
   4876  2489					      endif
   4877  2489
   4878  2489		       8a		      txa
   4879  248a		       cb 04		      sbx	#4
   4880  248c		       d0 db		      bne	leftloop
      0  248e					      RETURN
      1  248e				  -	      ifnconst	bankswitch
      2  248e				  -	      rts
      3  248e					      else
      4  248e		       4c da ff 	      jmp	BS_return
      5  2491					      endif
   4882  2491
   4883  2491				   notleft
   4884  2491		       4a		      lsr
   4885  2492		       90 2a		      bcc	notright
   4886  2494							;right
   4887  2494
   4888  2494					      ifconst	pfres
   4889  2494		       a2 10		      ldx	#pfres*4
   4890  2496				  -	      else
   4891  2496				  -	      ldx	#48
   4892  2496					      endif
   4893  2496				   rightloop
   4894  2496		       bd ec 10 	      lda	playfield-4,x
   4895  2499		       4a		      lsr
   4896  249a					      ifconst	superchip
   4897  249a		       bd ed 10 	      lda	playfield-3,x
   4898  249d		       2a		      rol
   4899  249e		       9d 6d 10 	      sta	playfield-131,x
   4900  24a1		       bd ee 10 	      lda	playfield-2,x
   4901  24a4		       6a		      ror
   4902  24a5		       9d 6e 10 	      sta	playfield-130,x
   4903  24a8		       bd ef 10 	      lda	playfield-1,x
   4904  24ab		       2a		      rol
   4905  24ac		       9d 6f 10 	      sta	playfield-129,x
   4906  24af		       bd ec 10 	      lda	playfield-4,x
   4907  24b2		       6a		      ror
   4908  24b3		       9d 6c 10 	      sta	playfield-132,x
   4909  24b6				  -	      else
   4910  24b6				  -	      rol	playfield-3,x
   4911  24b6				  -	      ror	playfield-2,x
   4912  24b6				  -	      rol	playfield-1,x
   4913  24b6				  -	      ror	playfield-4,x
   4914  24b6					      endif
   4915  24b6		       8a		      txa
   4916  24b7		       cb 04		      sbx	#4
   4917  24b9		       d0 db		      bne	rightloop
      0  24bb					      RETURN
      1  24bb				  -	      ifnconst	bankswitch
      2  24bb				  -	      rts
      3  24bb					      else
      4  24bb		       4c da ff 	      jmp	BS_return
      5  24be					      endif
   4919  24be
   4920  24be				   notright
   4921  24be		       4a		      lsr
   4922  24bf		       90 5b		      bcc	notup
   4923  24c1							;up
   4924  24c1		       4a		      lsr
   4925  24c2		       90 02		      bcc	onedecup
   4926  24c4		       c6 ef		      dec	playfieldpos
   4927  24c6				   onedecup
   4928  24c6		       c6 ef		      dec	playfieldpos
   4929  24c8		       f0 02		      beq	shiftdown
   4930  24ca		       10 4d		      bpl	noshiftdown2
   4931  24cc				   shiftdown
   4932  24cc				  -	      ifconst	pfrowheight
   4933  24cc				  -	      lda	#pfrowheight
   4934  24cc					      else
   4935  24cc				  -	      ifnconst	pfres
   4936  24cc				  -	      lda	#8
   4937  24cc					      else
   4938  24cc		       a9 18		      lda	#(96/pfres)	; try to come close to the real size
   4939  24ce					      endif
   4940  24ce					      endif
   4941  24ce
   4942  24ce		       85 ef		      sta	playfieldpos
   4943  24d0		       ad f3 10 	      lda	playfield+3
   4944  24d3		       85 9f		      sta	temp4
   4945  24d5		       ad f2 10 	      lda	playfield+2
   4946  24d8		       85 9e		      sta	temp3
   4947  24da		       ad f1 10 	      lda	playfield+1
   4948  24dd		       85 9d		      sta	temp2
   4949  24df		       ad f0 10 	      lda	playfield
   4950  24e2		       85 9c		      sta	temp1
   4951  24e4		       a2 00		      ldx	#0
   4952  24e6				   up2
   4953  24e6		       bd f4 10 	      lda	playfield+4,x
   4954  24e9					      ifconst	superchip
   4955  24e9		       9d 70 10 	      sta	playfield-128,x
   4956  24ec		       bd f5 10 	      lda	playfield+5,x
   4957  24ef		       9d 71 10 	      sta	playfield-127,x
   4958  24f2		       bd f6 10 	      lda	playfield+6,x
   4959  24f5		       9d 72 10 	      sta	playfield-126,x
   4960  24f8		       bd f7 10 	      lda	playfield+7,x
   4961  24fb		       9d 73 10 	      sta	playfield-125,x
   4962  24fe				  -	      else
   4963  24fe				  -	      sta	playfield,x
   4964  24fe				  -	      lda	playfield+5,x
   4965  24fe				  -	      sta	playfield+1,x
   4966  24fe				  -	      lda	playfield+6,x
   4967  24fe				  -	      sta	playfield+2,x
   4968  24fe				  -	      lda	playfield+7,x
   4969  24fe				  -	      sta	playfield+3,x
   4970  24fe					      endif
   4971  24fe		       8a		      txa
   4972  24ff		       cb fc		      sbx	#252
   4973  2501					      ifconst	pfres
   4974  2501		       e0 0c		      cpx	#(pfres-1)*4
   4975  2503				  -	      else
   4976  2503				  -	      cpx	#44
   4977  2503					      endif
   4978  2503		       d0 e1		      bne	up2
   4979  2505
   4980  2505		       a5 9f		      lda	temp4
   4981  2507
   4982  2507					      ifconst	superchip
   4983  2507					      ifconst	pfres
   4984  2507		       8d 7f 10 	      sta	playfield+pfres*4-129
   4985  250a		       a5 9e		      lda	temp3
   4986  250c		       8d 7e 10 	      sta	playfield+pfres*4-130
   4987  250f		       a5 9d		      lda	temp2
   4988  2511		       8d 7d 10 	      sta	playfield+pfres*4-131
   4989  2514		       a5 9c		      lda	temp1
   4990  2516		       8d 7c 10 	      sta	playfield+pfres*4-132
   4991  2519				  -	      else
   4992  2519				  -	      sta	playfield+47-128
   4993  2519				  -	      lda	temp3
   4994  2519				  -	      sta	playfield+46-128
   4995  2519				  -	      lda	temp2
   4996  2519				  -	      sta	playfield+45-128
   4997  2519				  -	      lda	temp1
   4998  2519				  -	      sta	playfield+44-128
   4999  2519					      endif
   5000  2519				  -	      else
   5001  2519				  -	      ifconst	pfres
   5002  2519				  -	      sta	playfield+pfres*4-1
   5003  2519				  -	      lda	temp3
   5004  2519				  -	      sta	playfield+pfres*4-2
   5005  2519				  -	      lda	temp2
   5006  2519				  -	      sta	playfield+pfres*4-3
   5007  2519				  -	      lda	temp1
   5008  2519				  -	      sta	playfield+pfres*4-4
   5009  2519				  -	      else
   5010  2519				  -	      sta	playfield+47
   5011  2519				  -	      lda	temp3
   5012  2519				  -	      sta	playfield+46
   5013  2519				  -	      lda	temp2
   5014  2519				  -	      sta	playfield+45
   5015  2519				  -	      lda	temp1
   5016  2519				  -	      sta	playfield+44
   5017  2519				  -	      endif
   5018  2519					      endif
   5019  2519				   noshiftdown2
      0  2519					      RETURN
      1  2519				  -	      ifnconst	bankswitch
      2  2519				  -	      rts
      3  2519					      else
      4  2519		       4c da ff 	      jmp	BS_return
      5  251c					      endif
   5021  251c
   5022  251c
   5023  251c				   notup
   5024  251c							;down
   5025  251c		       4a		      lsr
   5026  251d		       b0 02		      bcs	oneincup
   5027  251f		       e6 ef		      inc	playfieldpos
   5028  2521				   oneincup
   5029  2521		       e6 ef		      inc	playfieldpos
   5030  2523		       a5 ef		      lda	playfieldpos
   5031  2525
   5032  2525				  -	      ifconst	pfrowheight
   5033  2525				  -	      cmp	#pfrowheight+1
   5034  2525					      else
   5035  2525				  -	      ifnconst	pfres
   5036  2525				  -	      cmp	#9
   5037  2525					      else
   5038  2525		       c9 19		      cmp	#(96/pfres)+1	; try to come close to the real size
   5039  2527					      endif
   5040  2527					      endif
   5041  2527
   5042  2527		       90 4b		      bcc	noshiftdown
   5043  2529		       a9 01		      lda	#1
   5044  252b		       85 ef		      sta	playfieldpos
   5045  252d
   5046  252d					      ifconst	pfres
   5047  252d		       ad ff 10 	      lda	playfield+pfres*4-1
   5048  2530		       85 9f		      sta	temp4
   5049  2532		       ad fe 10 	      lda	playfield+pfres*4-2
   5050  2535		       85 9e		      sta	temp3
   5051  2537		       ad fd 10 	      lda	playfield+pfres*4-3
   5052  253a		       85 9d		      sta	temp2
   5053  253c		       ad fc 10 	      lda	playfield+pfres*4-4
   5054  253f				  -	      else
   5055  253f				  -	      lda	playfield+47
   5056  253f				  -	      sta	temp4
   5057  253f				  -	      lda	playfield+46
   5058  253f				  -	      sta	temp3
   5059  253f				  -	      lda	playfield+45
   5060  253f				  -	      sta	temp2
   5061  253f				  -	      lda	playfield+44
   5062  253f					      endif
   5063  253f
   5064  253f		       85 9c		      sta	temp1
   5065  2541
   5066  2541					      ifconst	pfres
   5067  2541		       a2 0c		      ldx	#(pfres-1)*4
   5068  2543				  -	      else
   5069  2543				  -	      ldx	#44
   5070  2543					      endif
   5071  2543				   down2
   5072  2543		       bd ef 10 	      lda	playfield-1,x
   5073  2546					      ifconst	superchip
   5074  2546		       9d 73 10 	      sta	playfield-125,x
   5075  2549		       bd ee 10 	      lda	playfield-2,x
   5076  254c		       9d 72 10 	      sta	playfield-126,x
   5077  254f		       bd ed 10 	      lda	playfield-3,x
   5078  2552		       9d 71 10 	      sta	playfield-127,x
   5079  2555		       bd ec 10 	      lda	playfield-4,x
   5080  2558		       9d 70 10 	      sta	playfield-128,x
   5081  255b				  -	      else
   5082  255b				  -	      sta	playfield+3,x
   5083  255b				  -	      lda	playfield-2,x
   5084  255b				  -	      sta	playfield+2,x
   5085  255b				  -	      lda	playfield-3,x
   5086  255b				  -	      sta	playfield+1,x
   5087  255b				  -	      lda	playfield-4,x
   5088  255b				  -	      sta	playfield,x
   5089  255b					      endif
   5090  255b		       8a		      txa
   5091  255c		       cb 04		      sbx	#4
   5092  255e		       d0 e3		      bne	down2
   5093  2560
   5094  2560		       a5 9f		      lda	temp4
   5095  2562					      ifconst	superchip
   5096  2562		       8d 73 10 	      sta	playfield-125
   5097  2565		       a5 9e		      lda	temp3
   5098  2567		       8d 72 10 	      sta	playfield-126
   5099  256a		       a5 9d		      lda	temp2
   5100  256c		       8d 71 10 	      sta	playfield-127
   5101  256f		       a5 9c		      lda	temp1
   5102  2571		       8d 70 10 	      sta	playfield-128
   5103  2574				  -	      else
   5104  2574				  -	      sta	playfield+3
   5105  2574				  -	      lda	temp3
   5106  2574				  -	      sta	playfield+2
   5107  2574				  -	      lda	temp2
   5108  2574				  -	      sta	playfield+1
   5109  2574				  -	      lda	temp1
   5110  2574				  -	      sta	playfield
   5111  2574					      endif
   5112  2574				   noshiftdown
      0  2574					      RETURN
      1  2574				  -	      ifnconst	bankswitch
      2  2574				  -	      rts
      3  2574					      else
      4  2574		       4c da ff 	      jmp	BS_return
      5  2577					      endif
   5114  2577							; Provided under the CC0 license. See the included LICENSE.txt for details.
   5115  2577
   5116  2577							;standard routines needed for pretty much all games
   5117  2577							; just the random number generator is left - maybe we should remove this asm file altogether?
   5118  2577							; repositioning code and score pointer setup moved to overscan
   5119  2577							; read switches, joysticks now compiler generated (more efficient)
   5120  2577
   5121  2577				   randomize
   5122  2577		       a5 a2		      lda	rand
   5123  2579		       4a		      lsr
   5124  257a				  -	      ifconst	rand16
   5125  257a				  -	      rol	rand16
   5126  257a					      endif
   5127  257a		       90 02		      bcc	noeor
   5128  257c		       49 b4		      eor	#$B4
   5129  257e				   noeor
   5130  257e		       85 a2		      sta	rand
   5131  2580				  -	      ifconst	rand16
   5132  2580				  -	      eor	rand16
   5133  2580					      endif
      0  2580					      RETURN
      1  2580				  -	      ifnconst	bankswitch
      2  2580				  -	      rts
      3  2580					      else
      4  2580		       4c da ff 	      jmp	BS_return
      5  2583					      endif
   5135  2583							; Provided under the CC0 license. See the included LICENSE.txt for details.
   5136  2583
   5137  2583				   drawscreen
   5138  2583				  -	      ifconst	debugscore
   5139  2583				  -	      ldx	#14
   5140  2583				  -	      lda	INTIM	; display # cycles left in the score
   5141  2583				  -
   5142  2583				  -	      ifconst	mincycles
   5143  2583				  -	      lda	mincycles
   5144  2583				  -	      cmp	INTIM
   5145  2583				  -	      lda	mincycles
   5146  2583				  -	      bcc	nochange
   5147  2583				  -	      lda	INTIM
   5148  2583				  -	      sta	mincycles
   5149  2583				  -nochange
   5150  2583				  -	      endif
   5151  2583				  -
   5152  2583				  -			; cmp #$2B
   5153  2583				  -			; bcs no_cycles_left
   5154  2583				  -	      bmi	cycles_left
   5155  2583				  -	      ldx	#64
   5156  2583				  -	      eor	#$ff	;make negative
   5157  2583				  -cycles_left
   5158  2583				  -	      stx	scorecolor
   5159  2583				  -	      and	#$7f	; clear sign bit
   5160  2583				  -	      tax
   5161  2583				  -	      lda	scorebcd,x
   5162  2583				  -	      sta	score+2
   5163  2583				  -	      lda	scorebcd1,x
   5164  2583				  -	      sta	score+1
   5165  2583				  -	      jmp	done_debugscore
   5166  2583				  -scorebcd
   5167  2583				  -	      .byte	$00, $64, $28, $92, $56, $20, $84, $48, $12, $76, $40
   5168  2583				  -	      .byte	$04, $68, $32, $96, $60, $24, $88, $52, $16, $80, $44
   5169  2583				  -	      .byte	$08, $72, $36, $00, $64, $28, $92, $56, $20, $84, $48
   5170  2583				  -	      .byte	$12, $76, $40, $04, $68, $32, $96, $60, $24, $88
   5171  2583				  -scorebcd1
   5172  2583				  -	      .byte	0, 0, 1, 1, 2, 3, 3, 4, 5, 5, 6
   5173  2583				  -	      .byte	7, 7, 8, 8, 9, $10, $10, $11, $12, $12, $13
   5174  2583				  -	      .byte	$14, $14, $15, $16, $16, $17, $17, $18, $19, $19, $20
   5175  2583				  -	      .byte	$21, $21, $22, $23, $23, $24, $24, $25, $26, $26
   5176  2583				  -done_debugscore
   5177  2583					      endif
   5178  2583
   5179  2583				  -	      ifconst	debugcycles
   5180  2583				  -	      lda	INTIM	; if we go over, it mucks up the background color
   5181  2583				  -			; cmp #$2B
   5182  2583				  -			; BCC overscan
   5183  2583				  -	      bmi	overscan
   5184  2583				  -	      sta	COLUBK
   5185  2583				  -	      bcs	doneoverscan
   5186  2583					      endif
   5187  2583
   5188  2583				   overscan
   5189  2583				  -	      ifconst	interlaced
   5190  2583				  -	      PHP
   5191  2583				  -	      PLA
   5192  2583				  -	      EOR	#4	; flip interrupt bit
   5193  2583				  -	      PHA
   5194  2583				  -	      PLP
   5195  2583				  -	      AND	#4	; isolate the interrupt bit
   5196  2583				  -	      TAX		; save it for later
   5197  2583					      endif
   5198  2583
   5199  2583				   overscanloop
   5200  2583		       ad 84 02 	      lda	INTIM	;wait for sync
   5201  2586		       30 fb		      bmi	overscanloop
   5202  2588				   doneoverscan
   5203  2588
   5204  2588							;do VSYNC
   5205  2588
   5206  2588				  -	      ifconst	interlaced
   5207  2588				  -	      CPX	#4
   5208  2588				  -	      BNE	oddframevsync
   5209  2588					      endif
   5210  2588
   5211  2588		       a9 02		      lda	#2
   5212  258a		       85 02		      sta	WSYNC
   5213  258c		       85 00		      sta	VSYNC
   5214  258e		       85 02		      STA	WSYNC
   5215  2590		       85 02		      STA	WSYNC
   5216  2592		       4a		      lsr
   5217  2593		       85 02		      STA	WSYNC
   5218  2595		       85 00		      STA	VSYNC
   5219  2597		       85 01		      sta	VBLANK
   5220  2599					      ifnconst	overscan_time
   5221  2599		       a9 a5		      lda	#37+128
   5222  259b				  -	      else
   5223  259b				  -	      lda	#overscan_time+128
   5224  259b					      endif
   5225  259b		       8d 96 02 	      sta	TIM64T
   5226  259e
   5227  259e				  -	      ifconst	interlaced
   5228  259e				  -	      jmp	postsync
   5229  259e				  -
   5230  259e				  -oddframevsync
   5231  259e				  -	      sta	WSYNC
   5232  259e				  -
   5233  259e				  -	      LDA	($80,X)	; 11 waste
   5234  259e				  -	      LDA	($80,X)	; 11 waste
   5235  259e				  -	      LDA	($80,X)	; 11 waste
   5236  259e				  -
   5237  259e				  -	      lda	#2
   5238  259e				  -	      sta	VSYNC
   5239  259e				  -	      sta	WSYNC
   5240  259e				  -	      sta	WSYNC
   5241  259e				  -	      sta	WSYNC
   5242  259e				  -
   5243  259e				  -	      LDA	($80,X)	; 11 waste
   5244  259e				  -	      LDA	($80,X)	; 11 waste
   5245  259e				  -	      LDA	($80,X)	; 11 waste
   5246  259e				  -
   5247  259e				  -	      lda	#0
   5248  259e				  -	      sta	VSYNC
   5249  259e				  -	      sta	VBLANK
   5250  259e				  -	      ifnconst	overscan_time
   5251  259e				  -	      lda	#37+128
   5252  259e				  -	      else
   5253  259e				  -	      lda	#overscan_time+128
   5254  259e				  -	      endif
   5255  259e				  -	      sta	TIM64T
   5256  259e				  -
   5257  259e				  -postsync
   5258  259e					      endif
   5259  259e
   5260  259e				  -	      ifconst	legacy
   5261  259e				  -	      if	legacy < 100
   5262  259e				  -	      ldx	#4
   5263  259e				  -adjustloop
   5264  259e				  -	      lda	player0x,x
   5265  259e				  -	      sec
   5266  259e				  -	      sbc	#14	;?
   5267  259e				  -	      sta	player0x,x
   5268  259e				  -	      dex
   5269  259e				  -	      bpl	adjustloop
   5270  259e				  -	      endif
   5271  259e					      endif
   5272  259e				  -	      if	((<*)>$e9)&&((<*)<$fa)
   5273  259e				  -	      repeat	($fa-(<*))
   5274  259e				  -	      nop
   5275  259e				  -	      repend
   5276  259e					      endif
   5277  259e		       85 02		      sta	WSYNC
   5278  25a0		       a2 04		      ldx	#4
      0  25a2					      SLEEP	3
      1  25a2				   .CYCLES    SET	3
      2  25a2
      3  25a2				  -	      IF	.CYCLES < 2
      4  25a2				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  25a2				  -	      ERR
      6  25a2					      ENDIF
      7  25a2
      8  25a2					      IF	.CYCLES & 1
      9  25a2					      IFNCONST	NO_ILLEGAL_OPCODES
     10  25a2		       04 00		      nop	0
     11  25a4				  -	      ELSE
     12  25a4				  -	      bit	VSYNC
     13  25a4					      ENDIF
     14  25a4				   .CYCLES    SET	.CYCLES - 3
     15  25a4					      ENDIF
     16  25a4
     17  25a4				  -	      REPEAT	.CYCLES / 2
     18  25a4				  -	      nop
     19  25a4					      REPEND
   5280  25a4				   HorPosLoop		; 5
   5281  25a4		       b5 80		      lda	player0x,X	;+4 9
   5282  25a6		       38		      sec		;+2 11
   5283  25a7				   DivideLoop
   5284  25a7		       e9 0f		      sbc	#15
   5285  25a9		       b0 fc		      bcs	DivideLoop	;+4 15
   5286  25ab		       95 9c		      sta	temp1,X	;+4 19
   5287  25ad		       95 10		      sta	RESP0,X	;+4 23
   5288  25af		       85 02		      sta	WSYNC
   5289  25b1		       ca		      dex
   5290  25b2		       10 f0		      bpl	HorPosLoop	;+5 5
   5291  25b4							; 4
   5292  25b4
   5293  25b4		       a2 04		      ldx	#4
   5294  25b6		       b4 9c		      ldy	temp1,X
   5295  25b8		       b9 14 f5 	      lda	repostable-256,Y
   5296  25bb		       95 20		      sta	HMP0,X	;+14 18
   5297  25bd
   5298  25bd		       ca		      dex
   5299  25be		       b4 9c		      ldy	temp1,X
   5300  25c0		       b9 14 f5 	      lda	repostable-256,Y
   5301  25c3		       95 20		      sta	HMP0,X	;+14 32
   5302  25c5
   5303  25c5		       ca		      dex
   5304  25c6		       b4 9c		      ldy	temp1,X
   5305  25c8		       b9 14 f5 	      lda	repostable-256,Y
   5306  25cb		       95 20		      sta	HMP0,X	;+14 46
   5307  25cd
   5308  25cd		       ca		      dex
   5309  25ce		       b4 9c		      ldy	temp1,X
   5310  25d0		       b9 14 f5 	      lda	repostable-256,Y
   5311  25d3		       95 20		      sta	HMP0,X	;+14 60
   5312  25d5
   5313  25d5		       ca		      dex
   5314  25d6		       b4 9c		      ldy	temp1,X
   5315  25d8		       b9 14 f5 	      lda	repostable-256,Y
   5316  25db		       95 20		      sta	HMP0,X	;+14 74
   5317  25dd
   5318  25dd		       85 02		      sta	WSYNC
   5319  25df
   5320  25df		       85 2a		      sta	HMOVE	;+3 3
   5321  25e1
   5322  25e1
   5323  25e1				  -	      ifconst	legacy
   5324  25e1				  -	      if	legacy < 100
   5325  25e1				  -	      ldx	#4
   5326  25e1				  -adjustloop2
   5327  25e1				  -	      lda	player0x,x
   5328  25e1				  -	      clc
   5329  25e1				  -	      adc	#14	;?
   5330  25e1				  -	      sta	player0x,x
   5331  25e1				  -	      dex
   5332  25e1				  -	      bpl	adjustloop2
   5333  25e1				  -	      endif
   5334  25e1					      endif
   5335  25e1
   5336  25e1
   5337  25e1
   5338  25e1
   5339  25e1							;set score pointers
   5340  25e1		       a7 95		      lax	score+2
   5341  25e3		       20 14 f6 	      jsr	scorepointerset
   5342  25e6		       84 9b		      sty	scorepointers+5
   5343  25e8		       86 98		      stx	scorepointers+2
   5344  25ea		       a7 94		      lax	score+1
   5345  25ec		       20 14 f6 	      jsr	scorepointerset
   5346  25ef		       84 9a		      sty	scorepointers+4
   5347  25f1		       86 97		      stx	scorepointers+1
   5348  25f3		       a7 93		      lax	score
   5349  25f5		       20 14 f6 	      jsr	scorepointerset
   5350  25f8		       84 99		      sty	scorepointers+3
   5351  25fa		       86 96		      stx	scorepointers
   5352  25fc
   5353  25fc				   vblk
   5354  25fc							; run possible vblank bB code
   5355  25fc				  -	      ifconst	vblank_bB_code
   5356  25fc				  -	      jsr	vblank_bB_code
   5357  25fc					      endif
   5358  25fc				   vblk2
   5359  25fc		       ad 84 02 	      LDA	INTIM
   5360  25ff		       30 fb		      bmi	vblk2
   5361  2601		       4c 00 f1 	      jmp	kernel
   5362  2604
   5363  2604
   5364  2604		       80 70 60 50*	      .byte.b	$80,$70,$60,$50,$40,$30,$20,$10,$00
   5365  260d		       f0 e0 d0 c0*	      .byte.b	$F0,$E0,$D0,$C0,$B0,$A0,$90
   5366  2614				   repostable
   5367  2614
   5368  2614				   scorepointerset
   5369  2614		       29 0f		      and	#$0F
   5370  2616		       0a		      asl
   5371  2617		       0a		      asl
   5372  2618		       0a		      asl
   5373  2619		       69 71		      adc	#<scoretable
   5374  261b		       a8		      tay
   5375  261c		       8a		      txa
   5376  261d							; and #$F0
   5377  261d							; lsr
   5378  261d		       4b f0		      asr	#$F0
   5379  261f		       69 71		      adc	#<scoretable
   5380  2621		       aa		      tax
   5381  2622		       60		      rts
   5382  2623							;bB.asm
   5383  2623							; bB.asm file is split here
   5384  2623				   .
   5385  2623							; 
   5386  2623
   5387  2623				   .L0422		;  asm
   5388  2623
   5389  2623				   XXminikernel
   5390  2623
   5391  2623		       85 02		      sta	WSYNC
   5392  2625
   5393  2625		       a5 08		      lda	scback
   5394  2627
   5395  2627		       85 09		      sta	COLUBK
   5396  2629
   5397  2629		       60		      rts
   5398  262a
   5399  262a				  -	      if	(<*) > (<(*+7))
   5400  262a				  -	      repeat	($100-<*)
   5401  262a				  -	      .byte	0
   5402  262a				  -	      repend
   5403  262a					      endif
   5404  262a				   playercolorL0225_1
   5405  262a		       1e		      .byte.b	_1E
   5406  262b		       82		      .byte.b	_82
   5407  262c		       84		      .byte.b	_84
   5408  262d		       46		      .byte.b	_46
   5409  262e		       44		      .byte.b	_44
   5410  262f		       42		      .byte.b	_42
   5411  2630		       12		      .byte.b	_12
   5412  2631		       08		      .byte.b	_08
   5413  2632				  -	      if	(<*) > (<(*+7))
   5414  2632				  -	      repeat	($100-<*)
   5415  2632				  -	      .byte	0
   5416  2632				  -	      repend
   5417  2632					      endif
   5418  2632				   player2then_1
   5419  2632		       1b		      .byte.b	%00011011
   5420  2633		       0e		      .byte.b	%00001110
   5421  2634		       1f		      .byte.b	%00011111
   5422  2635		       bd		      .byte.b	%10111101
   5423  2636		       f9		      .byte.b	%11111001
   5424  2637		       9e		      .byte.b	%10011110
   5425  2638		       08		      .byte.b	%00001000
   5426  2639		       7c		      .byte.b	%01111100
   5427  263a				  -	      if	(<*) > (<(*+7))
   5428  263a				  -	      repeat	($100-<*)
   5429  263a				  -	      .byte	0
   5430  263a				  -	      repend
   5431  263a					      endif
   5432  263a				   player3then_1
   5433  263a		       1b		      .byte.b	%00011011
   5434  263b		       0e		      .byte.b	%00001110
   5435  263c		       1f		      .byte.b	%00011111
   5436  263d		       bd		      .byte.b	%10111101
   5437  263e		       f9		      .byte.b	%11111001
   5438  263f		       9e		      .byte.b	%10011110
   5439  2640		       08		      .byte.b	%00001000
   5440  2641		       1f		      .byte.b	%00011111
   5441  2642				  -	      if	(<*) > (<(*+6))
   5442  2642				  -	      repeat	($100-<*)
   5443  2642				  -	      .byte	0
   5444  2642				  -	      repend
   5445  2642					      endif
   5446  2642				   player4then_0
   5447  2642		       55		      .byte.b	%01010101
   5448  2643		       aa		      .byte.b	%10101010
   5449  2644		       ff		      .byte.b	%11111111
   5450  2645		       3c		      .byte.b	%00111100
   5451  2646		       18		      .byte.b	%00011000
   5452  2647		       08		      .byte.b	%00001000
   5453  2648		       04		      .byte.b	%00000100
   5454  2649				  -	      if	(<*) > (<(*+6))
   5455  2649				  -	      repeat	($100-<*)
   5456  2649				  -	      .byte	0
   5457  2649				  -	      repend
   5458  2649					      endif
   5459  2649				   player5then_0
   5460  2649		       aa		      .byte.b	%10101010
   5461  264a		       55		      .byte.b	%01010101
   5462  264b		       ff		      .byte.b	%11111111
   5463  264c		       3c		      .byte.b	%00111100
   5464  264d		       18		      .byte.b	%00011000
   5465  264e		       08		      .byte.b	%00001000
   5466  264f		       04		      .byte.b	%00000100
   5467  2650				  -	      if	(<*) > (<(*+11))
   5468  2650				  -	      repeat	($100-<*)
   5469  2650				  -	      .byte	0
   5470  2650				  -	      repend
   5471  2650					      endif
   5472  2650				   playerL0245_0
   5473  2650		       a0		      .byte.b	%10100000
   5474  2651		       40		      .byte.b	%01000000
   5475  2652		       e0		      .byte.b	%11100000
   5476  2653		       a0		      .byte.b	%10100000
   5477  2654		       40		      .byte.b	%01000000
   5478  2655		       00		      .byte.b	%00000000
   5479  2656		       00		      .byte.b	%00000000
   5480  2657		       05		      .byte.b	%00000101
   5481  2658		       02		      .byte.b	%00000010
   5482  2659		       07		      .byte.b	%00000111
   5483  265a		       05		      .byte.b	%00000101
   5484  265b		       02		      .byte.b	%00000010
   5485  265c				  -	      if	(<*) > (<(*+25))
   5486  265c				  -	      repeat	($100-<*)
   5487  265c				  -	      .byte	0
   5488  265c				  -	      repend
   5489  265c					      endif
   5490  265c				   playerL0247_0
   5491  265c		       38		      .byte.b	%00111000
   5492  265d		       20		      .byte.b	%00100000
   5493  265e		       20		      .byte.b	%00100000
   5494  265f		       20		      .byte.b	%00100000
   5495  2660		       20		      .byte.b	%00100000
   5496  2661		       00		      .byte.b	%00000000
   5497  2662		       38		      .byte.b	%00111000
   5498  2663		       20		      .byte.b	%00100000
   5499  2664		       30		      .byte.b	%00110000
   5500  2665		       20		      .byte.b	%00100000
   5501  2666		       38		      .byte.b	%00111000
   5502  2667		       00		      .byte.b	%00000000
   5503  2668		       10		      .byte.b	%00010000
   5504  2669		       28		      .byte.b	%00101000
   5505  266a		       28		      .byte.b	%00101000
   5506  266b		       28		      .byte.b	%00101000
   5507  266c		       28		      .byte.b	%00101000
   5508  266d		       00		      .byte.b	%00000000
   5509  266e		       20		      .byte.b	%00100000
   5510  266f		       20		      .byte.b	%00100000
   5511  2670		       30		      .byte.b	%00110000
   5512  2671		       20		      .byte.b	%00100000
   5513  2672		       ba		      .byte.b	%10111010
   5514  2673		       82		      .byte.b	%10000010
   5515  2674		       fe		      .byte.b	%11111110
   5516  2675		       00		      .byte.b
   5517  2676				  -	      if	(<*) > (<(*+3))
   5518  2676				  -	      repeat	($100-<*)
   5519  2676				  -	      .byte	0
   5520  2676				  -	      repend
   5521  2676					      endif
   5522  2676				   player6then_0
   5523  2676		       a6		      .byte.b	%10100110
   5524  2677		       42		      .byte.b	%01000010
   5525  2678		       c6		      .byte.b	%11000110
   5526  2679		       42		      .byte.b	%01000010
   5527  267a				  -	      if	(<*) > (<(*+3))
   5528  267a				  -	      repeat	($100-<*)
   5529  267a				  -	      .byte	0
   5530  267a				  -	      repend
   5531  267a					      endif
   5532  267a				   player7then_0
   5533  267a		       c5		      .byte.b	%11000101
   5534  267b		       42		      .byte.b	%01000010
   5535  267c		       c6		      .byte.b	%11000110
   5536  267d		       42		      .byte.b	%01000010
   5537  267e					      if	ECHOFIRST
      2291 bytes of ROM space left in bank 2
   5538  267e					      echo	"    ",[(scoretable - *)]d , "bytes of ROM space left in bank 2")
   5539  267e					      endif
   5540  267e		       00 01	   ECHOFIRST  =	1
   5541  267e
   5542  267e
   5543  267e							; Provided under the CC0 license. See the included LICENSE.txt for details.
   5544  267e
   5545  267e							; feel free to modify the score graphics - just keep each digit 8 high
   5546  267e							; and keep the conditional compilation stuff intact
   5547  267e				  -	      ifconst	ROM2k
   5548  267e				  -	      ifconst	PlusROM_functions
   5549  267e				  -	      ORG	$F7AC-16
   5550  267e				  -	      else
   5551  267e				  -	      ORG	$F7AC-8
   5552  267e				  -	      endif
   5553  267e					      else
   5554  267e					      ifconst	bankswitch
   5555  267e					      if	bankswitch == 8
   5556  2f71					      ORG	$2F94-bscode_length
   5557  2f71					      RORG	$FF94-bscode_length
   5558  2f71					      endif
   5559  2f71				  -	      if	bankswitch == 16
   5560  2f71				  -	      ORG	$4F94-bscode_length
   5561  2f71				  -	      RORG	$FF94-bscode_length
   5562  2f71					      endif
   5563  2f71				  -	      if	bankswitch == 32
   5564  2f71				  -	      ORG	$8F94-bscode_length
   5565  2f71				  -	      RORG	$FF94-bscode_length
   5566  2f71					      endif
   5567  2f71				  -	      if	bankswitch == 64
   5568  2f71				  -	      ORG	$10F80-bscode_length
   5569  2f71				  -	      RORG	$1FF80-bscode_length
   5570  2f71					      endif
   5571  2f71				  -	      else
   5572  2f71				  -	      ifconst	PlusROM_functions
   5573  2f71				  -	      ORG	$FF98
   5574  2f71				  -	      else
   5575  2f71				  -	      ORG	$FF9C
   5576  2f71				  -	      endif
   5577  2f71					      endif
   5578  2f71					      endif
   5579  2f71
   5580  2f71							; font equates
   5581  2f71		       00 01	   .21stcentury =	1
   5582  2f71		       00 02	   alarmclock =	2
   5583  2f71		       00 03	   handwritten =	3
   5584  2f71		       00 04	   interrupted =	4
   5585  2f71		       00 05	   retroputer =	5
   5586  2f71		       00 06	   whimsey    =	6
   5587  2f71		       00 07	   tiny       =	7
   5588  2f71		       00 08	   hex	      =	8
   5589  2f71
   5590  2f71				  -	      ifconst	font
   5591  2f71				  -	      if	font == hex
   5592  2f71				  -	      ORG	. - 48
   5593  2f71				  -	      endif
   5594  2f71					      endif
   5595  2f71
   5596  2f71				   scoretable
   5597  2f71
   5598  2f71				  -	      ifconst	font
   5599  2f71				  -	      if	font == .21stcentury
   5600  2f71				  -	      include	"score_graphics.asm.21stcentury"
   5601  2f71				  -	      endif
   5602  2f71				  -	      if	font == alarmclock
   5603  2f71				  -	      include	"score_graphics.asm.alarmclock"
   5604  2f71				  -	      endif
   5605  2f71				  -	      if	font == handwritten
   5606  2f71				  -	      include	"score_graphics.asm.handwritten"
   5607  2f71				  -	      endif
   5608  2f71				  -	      if	font == interrupted
   5609  2f71				  -	      include	"score_graphics.asm.interrupted"
   5610  2f71				  -	      endif
   5611  2f71				  -	      if	font == retroputer
   5612  2f71				  -	      include	"score_graphics.asm.retroputer"
   5613  2f71				  -	      endif
   5614  2f71				  -	      if	font == whimsey
   5615  2f71				  -	      include	"score_graphics.asm.whimsey"
   5616  2f71				  -	      endif
   5617  2f71				  -	      if	font == tiny
   5618  2f71				  -	      include	"score_graphics.asm.tiny"
   5619  2f71				  -	      endif
   5620  2f71				  -	      if	font == hex
   5621  2f71				  -	      include	"score_graphics.asm.hex"
   5622  2f71				  -	      endif
   5623  2f71					      else		; default font
   5624  2f71
   5625  2f71		       3c		      .byte.b	%00111100
   5626  2f72		       66		      .byte.b	%01100110
   5627  2f73		       66		      .byte.b	%01100110
   5628  2f74		       66		      .byte.b	%01100110
   5629  2f75		       66		      .byte.b	%01100110
   5630  2f76		       66		      .byte.b	%01100110
   5631  2f77		       66		      .byte.b	%01100110
   5632  2f78		       3c		      .byte.b	%00111100
   5633  2f79
   5634  2f79		       7e		      .byte.b	%01111110
   5635  2f7a		       18		      .byte.b	%00011000
   5636  2f7b		       18		      .byte.b	%00011000
   5637  2f7c		       18		      .byte.b	%00011000
   5638  2f7d		       18		      .byte.b	%00011000
   5639  2f7e		       38		      .byte.b	%00111000
   5640  2f7f		       18		      .byte.b	%00011000
   5641  2f80		       08		      .byte.b	%00001000
   5642  2f81
   5643  2f81		       7e		      .byte.b	%01111110
   5644  2f82		       60		      .byte.b	%01100000
   5645  2f83		       60		      .byte.b	%01100000
   5646  2f84		       3c		      .byte.b	%00111100
   5647  2f85		       06		      .byte.b	%00000110
   5648  2f86		       06		      .byte.b	%00000110
   5649  2f87		       46		      .byte.b	%01000110
   5650  2f88		       3c		      .byte.b	%00111100
   5651  2f89
   5652  2f89		       3c		      .byte.b	%00111100
   5653  2f8a		       46		      .byte.b	%01000110
   5654  2f8b		       06		      .byte.b	%00000110
   5655  2f8c		       06		      .byte.b	%00000110
   5656  2f8d		       1c		      .byte.b	%00011100
   5657  2f8e		       06		      .byte.b	%00000110
   5658  2f8f		       46		      .byte.b	%01000110
   5659  2f90		       3c		      .byte.b	%00111100
   5660  2f91
   5661  2f91		       0c		      .byte.b	%00001100
   5662  2f92		       0c		      .byte.b	%00001100
   5663  2f93		       7e		      .byte.b	%01111110
   5664  2f94		       4c		      .byte.b	%01001100
   5665  2f95		       4c		      .byte.b	%01001100
   5666  2f96		       2c		      .byte.b	%00101100
   5667  2f97		       1c		      .byte.b	%00011100
   5668  2f98		       0c		      .byte.b	%00001100
   5669  2f99
   5670  2f99		       3c		      .byte.b	%00111100
   5671  2f9a		       46		      .byte.b	%01000110
   5672  2f9b		       06		      .byte.b	%00000110
   5673  2f9c		       06		      .byte.b	%00000110
   5674  2f9d		       3c		      .byte.b	%00111100
   5675  2f9e		       60		      .byte.b	%01100000
   5676  2f9f		       60		      .byte.b	%01100000
   5677  2fa0		       7e		      .byte.b	%01111110
   5678  2fa1
   5679  2fa1		       3c		      .byte.b	%00111100
   5680  2fa2		       66		      .byte.b	%01100110
   5681  2fa3		       66		      .byte.b	%01100110
   5682  2fa4		       66		      .byte.b	%01100110
   5683  2fa5		       7c		      .byte.b	%01111100
   5684  2fa6		       60		      .byte.b	%01100000
   5685  2fa7		       62		      .byte.b	%01100010
   5686  2fa8		       3c		      .byte.b	%00111100
   5687  2fa9
   5688  2fa9		       30		      .byte.b	%00110000
   5689  2faa		       30		      .byte.b	%00110000
   5690  2fab		       30		      .byte.b	%00110000
   5691  2fac		       18		      .byte.b	%00011000
   5692  2fad		       0c		      .byte.b	%00001100
   5693  2fae		       06		      .byte.b	%00000110
   5694  2faf		       42		      .byte.b	%01000010
   5695  2fb0		       3e		      .byte.b	%00111110
   5696  2fb1
   5697  2fb1		       3c		      .byte.b	%00111100
   5698  2fb2		       66		      .byte.b	%01100110
   5699  2fb3		       66		      .byte.b	%01100110
   5700  2fb4		       66		      .byte.b	%01100110
   5701  2fb5		       3c		      .byte.b	%00111100
   5702  2fb6		       66		      .byte.b	%01100110
   5703  2fb7		       66		      .byte.b	%01100110
   5704  2fb8		       3c		      .byte.b	%00111100
   5705  2fb9
   5706  2fb9		       3c		      .byte.b	%00111100
   5707  2fba		       46		      .byte.b	%01000110
   5708  2fbb		       06		      .byte.b	%00000110
   5709  2fbc		       3e		      .byte.b	%00111110
   5710  2fbd		       66		      .byte.b	%01100110
   5711  2fbe		       66		      .byte.b	%01100110
   5712  2fbf		       66		      .byte.b	%01100110
   5713  2fc0		       3c		      .byte.b	%00111100
   5714  2fc1
   5715  2fc1					      ifnconst	DPC_kernel_options
   5716  2fc1
   5717  2fc1		       00		      .byte.b	%00000000
   5718  2fc2		       00		      .byte.b	%00000000
   5719  2fc3		       00		      .byte.b	%00000000
   5720  2fc4		       00		      .byte.b	%00000000
   5721  2fc5		       00		      .byte.b	%00000000
   5722  2fc6		       00		      .byte.b	%00000000
   5723  2fc7		       00		      .byte.b	%00000000
   5724  2fc8		       00		      .byte.b	%00000000
   5725  2fc9
   5726  2fc9					      endif
   5727  2fc9
   5728  2fc9					      endif
   5729  2fc9
   5730  2fc9				  -	      ifconst	ROM2k
   5731  2fc9				  -	      ifconst	PlusROM_functions
   5732  2fc9				  -	      ORG	$F7F0
   5733  2fc9				  -	      .byte	0	; WriteToBuffer
   5734  2fc9				  -	      .byte	0	; WriteSendBuffer
   5735  2fc9				  -	      .byte	0	; ReceiveBuffer
   5736  2fc9				  -	      .byte	$ff	; ReceiveBufferSize (none zero for detection of PlusROM support)
   5737  2fc9				  -	      ORG	$F7FA
   5738  2fc9				  -	      else
   5739  2fc9				  -	      ORG	$F7FC
   5740  2fc9				  -	      endif
   5741  2fc9					      else
   5742  2fc9					      ifconst	bankswitch
   5743  2fc9					      if	bankswitch == 8
   5744  2fd1					      ORG	$2FF4-bscode_length
   5745  2fd1					      RORG	$FFF4-bscode_length
   5746  2fd1					      endif
   5747  2fd1				  -	      if	bankswitch == 16
   5748  2fd1				  -	      ORG	$4FF4-bscode_length
   5749  2fd1				  -	      RORG	$FFF4-bscode_length
   5750  2fd1					      endif
   5751  2fd1				  -	      if	bankswitch == 32
   5752  2fd1				  -	      ORG	$8FF4-bscode_length
   5753  2fd1				  -	      RORG	$FFF4-bscode_length
   5754  2fd1					      endif
   5755  2fd1				  -	      if	bankswitch == 64
   5756  2fd1				  -	      ORG	$10FE0-bscode_length
   5757  2fd1				  -	      RORG	$1FFE0-bscode_length
   5758  2fd1					      endif
   5759  2fd1				  -	      else
   5760  2fd1				  -	      ifconst	PlusROM_functions
   5761  2fd1				  -	      ORG	$FFF0
   5762  2fd1				  -	      .byte	0	; WriteToBuffer
   5763  2fd1				  -	      .byte	0	; WriteSendBuffer
   5764  2fd1				  -	      .byte	0	; ReceiveBuffer
   5765  2fd1				  -	      .byte	$ff	; ReceiveBufferSize (none zero for detection of PlusROM support)
   5766  2fd1				  -	      ORG	$FFFA
   5767  2fd1				  -	      else
   5768  2fd1				  -	      ORG	$FFFC
   5769  2fd1				  -	      endif
   5770  2fd1					      endif
   5771  2fd1					      endif
   5772  2fd1							; Provided under the CC0 license. See the included LICENSE.txt for details.
   5773  2fd1
   5774  2fd1							; every bank has this stuff at the same place
   5775  2fd1							; this code can switch to/from any bank at any entry point
   5776  2fd1							; and can preserve register values
   5777  2fd1							; note: lines not starting with a space are not placed in all banks
   5778  2fd1							;
   5779  2fd1							; line below tells the compiler how long this is - do not remove
   5780  2fd1							;size=35
   5781  2fd1
   5782  2fd1				   begin_bscode
   5783  2fd1		       a2 ff		      ldx	#$ff
   5784  2fd3				  -	      ifconst	FASTFETCH	; using DPC+
   5785  2fd3				  -	      stx	FASTFETCH
   5786  2fd3					      endif
   5787  2fd3		       9a		      txs
   5788  2fd4				  -	      if	bankswitch == 64
   5789  2fd4				  -	      lda	#(((>(start-1)) & $0F) | $F0)
   5790  2fd4					      else
   5791  2fd4		       a9 f3		      lda	#>(start-1)
   5792  2fd6					      endif
   5793  2fd6		       48		      pha
   5794  2fd7		       a9 51		      lda	#<(start-1)
   5795  2fd9		       48		      pha
   5796  2fda
   5797  2fda				   BS_return
   5798  2fda		       48		      pha
   5799  2fdb		       8a		      txa
   5800  2fdc		       48		      pha
   5801  2fdd		       ba		      tsx
   5802  2fde
   5803  2fde					      if	bankswitch != 64
   5804  2fde		       b5 04		      lda	4,x	; get high byte of return address
   5805  2fe0
   5806  2fe0		       2a		      rol
   5807  2fe1		       2a		      rol
   5808  2fe2		       2a		      rol
   5809  2fe3		       2a		      rol
   5810  2fe4		       29 01		      and	#bs_mask	;1 3 or 7 for F8/F6/F4
   5811  2fe6		       aa		      tax
   5812  2fe7		       e8		      inx
   5813  2fe8				  -	      else
   5814  2fe8				  -	      lda	4,x	; get high byte of return address
   5815  2fe8				  -	      tay
   5816  2fe8				  -	      ora	#$10	; change our bank nibble into a valid rom mirror
   5817  2fe8				  -	      sta	4,x
   5818  2fe8				  -	      tya
   5819  2fe8				  -	      lsr
   5820  2fe8				  -	      lsr
   5821  2fe8				  -	      lsr
   5822  2fe8				  -	      lsr
   5823  2fe8				  -	      tax
   5824  2fe8				  -	      inx
   5825  2fe8					      endif
   5826  2fe8
   5827  2fe8				   BS_jsr
   5828  2fe8		       bd f7 1f 	      lda	bankswitch_hotspot-1,x
   5829  2feb		       68		      pla
   5830  2fec		       aa		      tax
   5831  2fed		       68		      pla
   5832  2fee		       60		      rts
   5833  2fef				  -	      if	((* & $1FFF) > ((bankswitch_hotspot & $1FFF) - 1))
   5834  2fef				  -	      echo	"WARNING: size parameter in banksw.asm too small - the program probably will not work."
   5835  2fef				  -	      echo	"Change to",[(*-begin_bscode+1)&$FF]d,"and try again."
   5836  2fef					      endif
   5837  2fef							; Provided under the CC0 license. See the included LICENSE.txt for details.
   5838  2fef
   5839  2fef					      ifconst	bankswitch
   5840  2fef					      if	bankswitch == 8
   5841  2fef					      ifconst	PlusROM_functions
   5842  2ff0					      ORG	$2FF0
   5843  2ff0					      RORG	$FFF0
   5844  2ff0		       00		      .byte.b	0	; WriteToBuffer
   5845  2ff1		       00		      .byte.b	0	; WriteSendBuffer
   5846  2ff2		       00		      .byte.b	0	; ReceiveBuffer
   5847  2ff3		       ff		      .byte.b	$ff	; ReceiveBufferSize (none zero for detection of PlusROM support)
   5848  2ffa					      ORG	$2FFA
   5849  2ffa					      RORG	$FFFA
   5850  2ffa		       c7 19		      .word.w	(PlusROM_API-$C000)
   5851  2ffc				  -	      else
   5852  2ffc				  -	      ORG	$2FFC
   5853  2ffc				  -	      RORG	$FFFC
   5854  2ffc					      endif
   5855  2ffc					      endif
   5856  2ffc				  -	      if	bankswitch == 16
   5857  2ffc				  -	      ifconst	PlusROM_functions
   5858  2ffc				  -	      ORG	$4FF0
   5859  2ffc				  -	      RORG	$FFF0
   5860  2ffc				  -	      .byte	0	; WriteToBuffer
   5861  2ffc				  -	      .byte	0	; WriteSendBuffer
   5862  2ffc				  -	      .byte	0	; ReceiveBuffer
   5863  2ffc				  -	      .byte	$ff	; ReceiveBufferSize (none zero for detection of PlusROM support)
   5864  2ffc				  -	      ORG	$4FFA
   5865  2ffc				  -	      RORG	$FFFA
   5866  2ffc				  -	      .word	(PlusROM_API-$9000)
   5867  2ffc				  -	      else
   5868  2ffc				  -	      ORG	$4FFC
   5869  2ffc				  -	      RORG	$FFFC
   5870  2ffc				  -	      endif
   5871  2ffc					      endif
   5872  2ffc				  -	      if	bankswitch == 32
   5873  2ffc				  -	      ifconst	PlusROM_functions
   5874  2ffc				  -	      ORG	$8FF0
   5875  2ffc				  -	      RORG	$FFF0
   5876  2ffc				  -	      .byte	0	; WriteToBuffer
   5877  2ffc				  -	      .byte	0	; WriteSendBuffer
   5878  2ffc				  -	      .byte	0	; ReceiveBuffer
   5879  2ffc				  -	      .byte	$ff	; ReceiveBufferSize (none zero for detection of PlusROM support)
   5880  2ffc				  -	      ORG	$8FFA
   5881  2ffc				  -	      RORG	$FFFA
   5882  2ffc				  -	      .word	(PlusROM_API-$5000)
   5883  2ffc				  -	      else
   5884  2ffc				  -	      ORG	$8FFC
   5885  2ffc				  -	      RORG	$FFFC
   5886  2ffc				  -	      endif
   5887  2ffc					      endif
   5888  2ffc				  -	      if	bankswitch == 64
   5889  2ffc				  -	      ORG	$10FF0
   5890  2ffc				  -	      RORG	$1FFF0
   5891  2ffc				  -	      lda	$ffe0	; we use wasted space to assist stella with EF format auto-detection
   5892  2ffc				  -	      ORG	$10FF8
   5893  2ffc				  -	      RORG	$1FFF8
   5894  2ffc				  -	      ifconst	superchip
   5895  2ffc				  -	      .byte	"E","F","S","C"
   5896  2ffc				  -	      else
   5897  2ffc				  -	      .byte	"E","F","E","F"
   5898  2ffc				  -	      endif
   5899  2ffc				  -	      ORG	$10FFC
   5900  2ffc				  -	      RORG	$1FFFC
   5901  2ffc					      endif
   5902  2ffc				  -	      else
   5903  2ffc				  -	      ifconst	ROM2k
   5904  2ffc				  -	      ifconst	PlusROM_functions
   5905  2ffc				  -	      ORG	$F7FA
   5906  2ffc				  -	      .word	(PlusROM_API-$E000)
   5907  2ffc				  -	      else
   5908  2ffc				  -	      ORG	$F7FC
   5909  2ffc				  -	      endif
   5910  2ffc				  -	      else
   5911  2ffc				  -	      ifconst	PlusROM_functions
   5912  2ffc				  -	      ORG	$FFFA
   5913  2ffc				  -	      .word	(PlusROM_API-$E000)
   5914  2ffc				  -	      else
   5915  2ffc				  -	      ORG	$FFFC
   5916  2ffc				  -	      endif
   5917  2ffc				  -	      endif
   5918  2ffc					      endif
   5919  2ffc		       52 f3		      .word.w	(start & $ffff)
   5920  2ffe		       52 f3		      .word.w	(start & $ffff)
