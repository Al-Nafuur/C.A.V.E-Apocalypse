------- FILE d:\Firmaplus\Firmaplus_intern\Atari\PlusROM\Projekte-batariBasic\CaveApocalypse\C.A.V.E. Apocalypse.bas.asm LEVEL 1 PASS 3
      1  5000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  5000 ????
      3  5000 ????				      processor	6502
------- FILE vcs.h LEVEL 2 PASS 3
      0  5000 ????				      include	"vcs.h"
      1  5000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  5000 ????
      3  5000 ????						; VCS.H
      4  5000 ????						; Version 1.05, 13/November/2003
      5  5000 ????
      6  5000 ????	       00 69	   VERSION_VCS =	105
      7  5000 ????
      8  5000 ????						; THIS IS A PRELIMINARY RELEASE OF *THE* "STANDARD" VCS.H
      9  5000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
     10  5000 ????						; PLEASE DO *NOT* REDISTRIBUTE THIS FILE!
     11  5000 ????						;
     12  5000 ????						; This file defines hardware registers and memory mapping for the
     13  5000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     14  5000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     15  5000 ????						; available at at http://www.atari2600.org/dasm
     16  5000 ????						;
     17  5000 ????						; Many thanks to the original author(s) of this file, and to everyone who has
     18  5000 ????						; contributed to understanding the Atari 2600.  If you take issue with the
     19  5000 ????						; contents, or naming of registers, please write to me (atari2600@taswegian.com)
     20  5000 ????						; with your views.  Please contribute, if you think you can improve this
     21  5000 ????						; file!
     22  5000 ????						;
     23  5000 ????						; Latest Revisions...
     24  5000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     25  5000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     26  5000 ????						;			    This will allow conditional code to verify VCS.H being
     27  5000 ????						;			    used for code assembly.
     28  5000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     29  5000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     30  5000 ????						;			 mirrored reading/writing differences.	This is more a 
     31  5000 ????						;			 readability issue, and binary compatibility with disassembled
     32  5000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     33  5000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     34  5000 ????						;			 which was broken by the use of segments in this file, as
     35  5000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     36  5000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     37  5000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     38  5000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     39  5000 ????						;						   it is safe to leave it undefined, and the base address will
     40  5000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     41  5000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     42  5000 ????						;			  - register definitions are now generated through assignment
     43  5000 ????						;			    in uninitialised segments.	This allows a changeable base
     44  5000 ????						;			    address architecture.
     45  5000 ????						; 1.0	22/MAR/2003		Initial release
     46  5000 ????
     47  5000 ????
     48  5000 ????						;-------------------------------------------------------------------------------
     49  5000 ????
     50  5000 ????						; TIA_BASE_ADDRESS
     51  5000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     52  5000 ????						; Normally 0, the base address should (externally, before including this file)
     53  5000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     54  5000 ????						; The reason is that this bankswitching scheme treats any access to locations
     55  5000 ????						; < $40 as a bankswitch.
     56  5000 ????
     57  5000 ????			  -	      IFNCONST	TIA_BASE_ADDRESS
     58  5000 ????			  -TIA_BASE_ADDRESS =	0
     59  5000 ????				      ENDIF
     60  5000 ????
     61  5000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     62  5000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     63  5000 ????						; *OR* by declaring the label before including this file, eg:
     64  5000 ????						; TIA_BASE_ADDRESS = $40
     65  5000 ????						;   include "vcs.h"
     66  5000 ????
     67  5000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     68  5000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     69  5000 ????						; for the mirrored ROM hardware registers.
     70  5000 ????
     71  5000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     72  5000 ????						; using the -D command-line switch, as required.  If the addresses are not defined, 
     73  5000 ????						; they defaut to the TIA_BASE_ADDRESS.
     74  5000 ????
     75  5000 ????			  -	      IFNCONST	TIA_BASE_READ_ADDRESS
     76  5000 ????			  -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     77  5000 ????				      ENDIF
     78  5000 ????
     79  5000 ????			  -	      IFNCONST	TIA_BASE_WRITE_ADDRESS
     80  5000 ????			  -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     81  5000 ????				      ENDIF
     82  5000 ????
     83  5000 ????						;-------------------------------------------------------------------------------
     84  5000 ????
     85 U002d ????				      SEG.U	TIA_REGISTERS_WRITE
     86 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     87 U0000
     88 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     89 U0000
     90 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     91 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     92 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     93 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     94 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     95 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     96 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     97 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     98 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     99 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
    100 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
    101 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    102 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    103 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    104 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    105 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    106 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    107 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    108 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    109 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    110 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    111 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    112 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    113 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    114 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    115 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    116 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    117 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    118 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    119 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    120 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    121 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    122 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    123 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    124 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    125 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    126 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    127 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    128 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    129 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    130 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    131 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    132 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    133 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    134 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    135 U002d
    136 U002d							;-------------------------------------------------------------------------------
    137 U002d
    138 U000e ????				      SEG.U	TIA_REGISTERS_READ
    139 U0000					      ORG	TIA_BASE_READ_ADDRESS
    140 U0000
    141 U0000							;											bit 7	 bit 6
    142 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    143 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    144 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    145 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    146 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    147 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    148 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    149 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    150 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    151 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    152 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    153 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    154 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    155 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    156 U000e
    157 U000e							;-------------------------------------------------------------------------------
    158 U000e
    159 U0298 ????				      SEG.U	RIOT
    160 U0280					      ORG	$280
    161 U0280
    162 U0280							; RIOT MEMORY MAP
    163 U0280
    164 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    165 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    166 U0281
    167 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    168 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    169 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    170 U0284		       00	   INTIM      ds	1	; $284		Timer output
    171 U0285
    172 U0285		       00	   TIMINT     ds	1	; $285
    173 U0286
    174 U0286							; Unused/undefined registers ($285-$294)
    175 U0286
    176 U0286		       00		      ds	1	; $286
    177 U0287		       00		      ds	1	; $287
    178 U0288		       00		      ds	1	; $288
    179 U0289		       00		      ds	1	; $289
    180 U028a		       00		      ds	1	; $28A
    181 U028b		       00		      ds	1	; $28B
    182 U028c		       00		      ds	1	; $28C
    183 U028d		       00		      ds	1	; $28D
    184 U028e		       00		      ds	1	; $28E
    185 U028f		       00		      ds	1	; $28F
    186 U0290		       00		      ds	1	; $290
    187 U0291		       00		      ds	1	; $291
    188 U0292		       00		      ds	1	; $292
    189 U0293		       00		      ds	1	; $293
    190 U0294
    191 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    192 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    193 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    194 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    195 U0298
    196 U0298							;-------------------------------------------------------------------------------
    197 U0298							; The following required for back-compatibility with code which does not use
    198 U0298							; segments.
    199 U0298
    200  5000 ????				      SEG
    201  5000 ????
    202  5000 ????						; EOF
------- FILE d:\Firmaplus\Firmaplus_intern\Atari\PlusROM\Projekte-batariBasic\CaveApocalypse\C.A.V.E. Apocalypse.bas.asm
------- FILE macro.h LEVEL 2 PASS 3
      0  5000 ????				      include	"macro.h"
      1  5000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  5000 ????
      3  5000 ????						; MACRO.H
      4  5000 ????						; Version 1.05, 13/NOVEMBER/2003
      5  5000 ????
      6  5000 ????	       00 69	   VERSION_MACRO =	105
      7  5000 ????
      8  5000 ????						;
      9  5000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
     10  5000 ????						; PLEASE DO *NOT* REDISTRIBUTE MODIFIED VERSIONS OF THIS FILE!
     11  5000 ????						;
     12  5000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     13  5000 ????						; It is distributed as a companion machine-specific support package
     14  5000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     15  5000 ????						; available at at http://www.atari2600.org/dasm
     16  5000 ????						;
     17  5000 ????						; Many thanks to the people who have contributed.  If you take issue with the
     18  5000 ????						; contents, or would like to add something, please write to me
     19  5000 ????						; (atari2600@taswegian.com) with your contribution.
     20  5000 ????						;
     21  5000 ????						; Latest Revisions...
     22  5000 ????						;
     23  5000 ????						; 1.05  14/NOV/2003	  - Added VERSION_MACRO equate (which will reflect 100x version #)
     24  5000 ????						;			    This will allow conditional code to verify MACRO.H being
     25  5000 ????						;			    used for code assembly.
     26  5000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     27  5000 ????						;
     28  5000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     29  5000 ????						;
     30  5000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     31  5000 ????						;			   (standardised macro for vertical synch code)
     32  5000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added. 
     33  5000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     34  5000 ????						; 1.0	22/MAR/2003		Initial release
     35  5000 ????
     36  5000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage, 
     37  5000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     38  5000 ????						;   If you do not allow illegal opcode usage, you must include this file 
     39  5000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     40  5000 ????						;   registers and require them to be defined first).
     41  5000 ????
     42  5000 ????						; Available macros...
     43  5000 ????						;   SLEEP n		 - sleep for n cycles
     44  5000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     45  5000 ????						;   CLEAN_START	 - set machine to known state on startup
     46  5000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     47  5000 ????
     48  5000 ????						;-------------------------------------------------------------------------------
     49  5000 ????						; SLEEP duration
     50  5000 ????						; Original author: Thomas Jentzsch
     51  5000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     52  5000 ????						; useful for code where precise timing is required.
     53  5000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     54  5000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     55  5000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     56  5000 ????
     57  5000 ????				      MAC	sleep
     58  5000 ????			   .CYCLES    SET	{1}
     59  5000 ????
     60  5000 ????				      IF	.CYCLES < 2
     61  5000 ????				      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     62  5000 ????				      ERR
     63  5000 ????				      ENDIF
     64  5000 ????
     65  5000 ????				      IF	.CYCLES & 1
     66  5000 ????				      IFNCONST	NO_ILLEGAL_OPCODES
     67  5000 ????				      nop	0
     68  5000 ????				      ELSE
     69  5000 ????				      bit	VSYNC
     70  5000 ????				      ENDIF
     71  5000 ????			   .CYCLES    SET	.CYCLES - 3
     72  5000 ????				      ENDIF
     73  5000 ????
     74  5000 ????				      REPEAT	.CYCLES / 2
     75  5000 ????				      nop
     76  5000 ????				      REPEND
     77  5000 ????				      ENDM		;usage: SLEEP n (n>1)
     78  5000 ????
     79  5000 ????						;-------------------------------------------------------------------------------
     80  5000 ????						; VERTICAL_SYNC
     81  5000 ????						; Original author: Manuel Polik
     82  5000 ????						; Inserts the code required for a proper 3 scannline 
     83  5000 ????						; vertical sync sequence
     84  5000 ????						;
     85  5000 ????						; Note: Alters the accumulator
     86  5000 ????						;
     87  5000 ????						; IN:
     88  5000 ????						; OUT: A = 1
     89  5000 ????
     90  5000 ????				      MAC	vertical_sync
     91  5000 ????				      LDA	#$02	; A = VSYNC enable
     92  5000 ????				      STA	WSYNC	; Finish current line
     93  5000 ????				      STA	VSYNC	; Start vertical sync
     94  5000 ????				      STA	WSYNC	; 1st line vertical sync
     95  5000 ????				      STA	WSYNC	; 2nd line vertical sync
     96  5000 ????				      LSR		; A = VSYNC disable
     97  5000 ????				      STA	WSYNC	; 3rd line vertical sync
     98  5000 ????				      STA	VSYNC	; Stop vertical sync
     99  5000 ????				      ENDM
    100  5000 ????
    101  5000 ????						;-------------------------------------------------------------------------------
    102  5000 ????						; CLEAN_START
    103  5000 ????						; Original author: Andrew Davie
    104  5000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
    105  5000 ????						; Sets stack pointer to $FF, and all registers to 0
    106  5000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    107  5000 ????						; Use as very first section of code on boot (ie: at reset)
    108  5000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    109  5000 ????
    110  5000 ????				      MAC	clean_start
    111  5000 ????				      sei
    112  5000 ????				      cld
    113  5000 ????
    114  5000 ????				      ldx	#0
    115  5000 ????				      txa
    116  5000 ????				      tay
    117  5000 ????			   .CLEAR_STACK dex
    118  5000 ????				      txs
    119  5000 ????				      pha
    120  5000 ????				      bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    121  5000 ????
    122  5000 ????				      ENDM
    123  5000 ????
    124  5000 ????						;-------------------------------------------------------
    125  5000 ????						; SET_POINTER
    126  5000 ????						; Original author: Manuel Rotschkar
    127  5000 ????						;
    128  5000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    129  5000 ????						;
    130  5000 ????						; Usage: SET_POINTER pointer, address
    131  5000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    132  5000 ????						;
    133  5000 ????						; Note: Alters the accumulator, NZ flags
    134  5000 ????						; IN 1: 2 byte RAM location reserved for pointer
    135  5000 ????						; IN 2: absolute address
    136  5000 ????
    137  5000 ????				      MAC	set_pointer
    138  5000 ????			   .POINTER   SET	{1}
    139  5000 ????			   .ADDRESS   SET	{2}
    140  5000 ????
    141  5000 ????				      LDA	#<.ADDRESS	; Get Lowbyte of Address
    142  5000 ????				      STA	.POINTER	; Store in pointer
    143  5000 ????				      LDA	#>.ADDRESS	; Get Hibyte of Address
    144  5000 ????				      STA	.POINTER+1	; Store in pointer+1
    145  5000 ????
    146  5000 ????				      ENDM
    147  5000 ????
    148  5000 ????						; EOF
------- FILE d:\Firmaplus\Firmaplus_intern\Atari\PlusROM\Projekte-batariBasic\CaveApocalypse\C.A.V.E. Apocalypse.bas.asm
------- FILE 2600basic.h LEVEL 2 PASS 3
      0  5000 ????				      include	"2600basic.h"
      1  5000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  5000 ????
      3  5000 ????				      processor	6502
------- FILE vcs.h LEVEL 3 PASS 3
      0  5000 ????				      include	"vcs.h"
      1  5000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  5000 ????
      3  5000 ????						; VCS.H
      4  5000 ????						; Version 1.05, 13/November/2003
      5  5000 ????
      6  5000 ????	       00 69	   VERSION_VCS =	105
      7  5000 ????
      8  5000 ????						; THIS IS A PRELIMINARY RELEASE OF *THE* "STANDARD" VCS.H
      9  5000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
     10  5000 ????						; PLEASE DO *NOT* REDISTRIBUTE THIS FILE!
     11  5000 ????						;
     12  5000 ????						; This file defines hardware registers and memory mapping for the
     13  5000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     14  5000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     15  5000 ????						; available at at http://www.atari2600.org/dasm
     16  5000 ????						;
     17  5000 ????						; Many thanks to the original author(s) of this file, and to everyone who has
     18  5000 ????						; contributed to understanding the Atari 2600.  If you take issue with the
     19  5000 ????						; contents, or naming of registers, please write to me (atari2600@taswegian.com)
     20  5000 ????						; with your views.  Please contribute, if you think you can improve this
     21  5000 ????						; file!
     22  5000 ????						;
     23  5000 ????						; Latest Revisions...
     24  5000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     25  5000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     26  5000 ????						;			    This will allow conditional code to verify VCS.H being
     27  5000 ????						;			    used for code assembly.
     28  5000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     29  5000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     30  5000 ????						;			 mirrored reading/writing differences.	This is more a 
     31  5000 ????						;			 readability issue, and binary compatibility with disassembled
     32  5000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     33  5000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     34  5000 ????						;			 which was broken by the use of segments in this file, as
     35  5000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     36  5000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     37  5000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     38  5000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     39  5000 ????						;						   it is safe to leave it undefined, and the base address will
     40  5000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     41  5000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     42  5000 ????						;			  - register definitions are now generated through assignment
     43  5000 ????						;			    in uninitialised segments.	This allows a changeable base
     44  5000 ????						;			    address architecture.
     45  5000 ????						; 1.0	22/MAR/2003		Initial release
     46  5000 ????
     47  5000 ????
     48  5000 ????						;-------------------------------------------------------------------------------
     49  5000 ????
     50  5000 ????						; TIA_BASE_ADDRESS
     51  5000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     52  5000 ????						; Normally 0, the base address should (externally, before including this file)
     53  5000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     54  5000 ????						; The reason is that this bankswitching scheme treats any access to locations
     55  5000 ????						; < $40 as a bankswitch.
     56  5000 ????
     57  5000 ????			  -	      IFNCONST	TIA_BASE_ADDRESS
     58  5000 ????			  -TIA_BASE_ADDRESS =	0
     59  5000 ????				      ENDIF
     60  5000 ????
     61  5000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     62  5000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     63  5000 ????						; *OR* by declaring the label before including this file, eg:
     64  5000 ????						; TIA_BASE_ADDRESS = $40
     65  5000 ????						;   include "vcs.h"
     66  5000 ????
     67  5000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     68  5000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     69  5000 ????						; for the mirrored ROM hardware registers.
     70  5000 ????
     71  5000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     72  5000 ????						; using the -D command-line switch, as required.  If the addresses are not defined, 
     73  5000 ????						; they defaut to the TIA_BASE_ADDRESS.
     74  5000 ????
     75  5000 ????			  -	      IFNCONST	TIA_BASE_READ_ADDRESS
     76  5000 ????			  -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     77  5000 ????				      ENDIF
     78  5000 ????
     79  5000 ????			  -	      IFNCONST	TIA_BASE_WRITE_ADDRESS
     80  5000 ????			  -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     81  5000 ????				      ENDIF
     82  5000 ????
     83  5000 ????						;-------------------------------------------------------------------------------
     84  5000 ????
     85 U002d					      SEG.U	TIA_REGISTERS_WRITE
     86 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     87 U0000
     88 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     89 U0000
     90 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     91 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     92 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     93 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     94 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     95 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     96 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     97 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     98 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     99 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
    100 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
    101 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    102 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    103 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    104 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    105 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    106 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    107 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    108 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    109 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    110 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    111 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    112 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    113 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    114 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    115 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    116 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    117 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    118 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    119 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    120 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    121 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    122 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    123 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    124 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    125 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    126 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    127 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    128 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    129 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    130 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    131 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    132 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    133 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    134 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    135 U002d
    136 U002d							;-------------------------------------------------------------------------------
    137 U002d
    138 U000e					      SEG.U	TIA_REGISTERS_READ
    139 U0000					      ORG	TIA_BASE_READ_ADDRESS
    140 U0000
    141 U0000							;											bit 7	 bit 6
    142 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    143 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    144 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    145 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    146 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    147 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    148 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    149 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    150 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    151 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    152 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    153 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    154 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    155 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    156 U000e
    157 U000e							;-------------------------------------------------------------------------------
    158 U000e
    159 U0298					      SEG.U	RIOT
    160 U0280					      ORG	$280
    161 U0280
    162 U0280							; RIOT MEMORY MAP
    163 U0280
    164 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    165 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    166 U0281
    167 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    168 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    169 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    170 U0284		       00	   INTIM      ds	1	; $284		Timer output
    171 U0285
    172 U0285		       00	   TIMINT     ds	1	; $285
    173 U0286
    174 U0286							; Unused/undefined registers ($285-$294)
    175 U0286
    176 U0286		       00		      ds	1	; $286
    177 U0287		       00		      ds	1	; $287
    178 U0288		       00		      ds	1	; $288
    179 U0289		       00		      ds	1	; $289
    180 U028a		       00		      ds	1	; $28A
    181 U028b		       00		      ds	1	; $28B
    182 U028c		       00		      ds	1	; $28C
    183 U028d		       00		      ds	1	; $28D
    184 U028e		       00		      ds	1	; $28E
    185 U028f		       00		      ds	1	; $28F
    186 U0290		       00		      ds	1	; $290
    187 U0291		       00		      ds	1	; $291
    188 U0292		       00		      ds	1	; $292
    189 U0293		       00		      ds	1	; $293
    190 U0294
    191 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    192 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    193 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    194 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    195 U0298
    196 U0298							;-------------------------------------------------------------------------------
    197 U0298							; The following required for back-compatibility with code which does not use
    198 U0298							; segments.
    199 U0298
    200  5000 ????				      SEG
    201  5000 ????
    202  5000 ????						; EOF
------- FILE 2600basic.h
------- FILE macro.h LEVEL 3 PASS 3
      0  5000 ????				      include	"macro.h"
      1  5000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  5000 ????
      3  5000 ????						; MACRO.H
      4  5000 ????						; Version 1.05, 13/NOVEMBER/2003
      5  5000 ????
      6  5000 ????	       00 69	   VERSION_MACRO =	105
      7  5000 ????
      8  5000 ????						;
      9  5000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
     10  5000 ????						; PLEASE DO *NOT* REDISTRIBUTE MODIFIED VERSIONS OF THIS FILE!
     11  5000 ????						;
     12  5000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     13  5000 ????						; It is distributed as a companion machine-specific support package
     14  5000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     15  5000 ????						; available at at http://www.atari2600.org/dasm
     16  5000 ????						;
     17  5000 ????						; Many thanks to the people who have contributed.  If you take issue with the
     18  5000 ????						; contents, or would like to add something, please write to me
     19  5000 ????						; (atari2600@taswegian.com) with your contribution.
     20  5000 ????						;
     21  5000 ????						; Latest Revisions...
     22  5000 ????						;
     23  5000 ????						; 1.05  14/NOV/2003	  - Added VERSION_MACRO equate (which will reflect 100x version #)
     24  5000 ????						;			    This will allow conditional code to verify MACRO.H being
     25  5000 ????						;			    used for code assembly.
     26  5000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     27  5000 ????						;
     28  5000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     29  5000 ????						;
     30  5000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     31  5000 ????						;			   (standardised macro for vertical synch code)
     32  5000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added. 
     33  5000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     34  5000 ????						; 1.0	22/MAR/2003		Initial release
     35  5000 ????
     36  5000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage, 
     37  5000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     38  5000 ????						;   If you do not allow illegal opcode usage, you must include this file 
     39  5000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     40  5000 ????						;   registers and require them to be defined first).
     41  5000 ????
     42  5000 ????						; Available macros...
     43  5000 ????						;   SLEEP n		 - sleep for n cycles
     44  5000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     45  5000 ????						;   CLEAN_START	 - set machine to known state on startup
     46  5000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     47  5000 ????
     48  5000 ????						;-------------------------------------------------------------------------------
     49  5000 ????						; SLEEP duration
     50  5000 ????						; Original author: Thomas Jentzsch
     51  5000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     52  5000 ????						; useful for code where precise timing is required.
     53  5000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     54  5000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     55  5000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     56  5000 ????
     57  5000 ????				      MAC	sleep
     58  5000 ????			   .CYCLES    SET	{1}
     59  5000 ????
     60  5000 ????				      IF	.CYCLES < 2
     61  5000 ????				      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     62  5000 ????				      ERR
     63  5000 ????				      ENDIF
     64  5000 ????
     65  5000 ????				      IF	.CYCLES & 1
     66  5000 ????				      IFNCONST	NO_ILLEGAL_OPCODES
     67  5000 ????				      nop	0
     68  5000 ????				      ELSE
     69  5000 ????				      bit	VSYNC
     70  5000 ????				      ENDIF
     71  5000 ????			   .CYCLES    SET	.CYCLES - 3
     72  5000 ????				      ENDIF
     73  5000 ????
     74  5000 ????				      REPEAT	.CYCLES / 2
     75  5000 ????				      nop
     76  5000 ????				      REPEND
     77  5000 ????				      ENDM		;usage: SLEEP n (n>1)
     78  5000 ????
     79  5000 ????						;-------------------------------------------------------------------------------
     80  5000 ????						; VERTICAL_SYNC
     81  5000 ????						; Original author: Manuel Polik
     82  5000 ????						; Inserts the code required for a proper 3 scannline 
     83  5000 ????						; vertical sync sequence
     84  5000 ????						;
     85  5000 ????						; Note: Alters the accumulator
     86  5000 ????						;
     87  5000 ????						; IN:
     88  5000 ????						; OUT: A = 1
     89  5000 ????
     90  5000 ????				      MAC	vertical_sync
     91  5000 ????				      LDA	#$02	; A = VSYNC enable
     92  5000 ????				      STA	WSYNC	; Finish current line
     93  5000 ????				      STA	VSYNC	; Start vertical sync
     94  5000 ????				      STA	WSYNC	; 1st line vertical sync
     95  5000 ????				      STA	WSYNC	; 2nd line vertical sync
     96  5000 ????				      LSR		; A = VSYNC disable
     97  5000 ????				      STA	WSYNC	; 3rd line vertical sync
     98  5000 ????				      STA	VSYNC	; Stop vertical sync
     99  5000 ????				      ENDM
    100  5000 ????
    101  5000 ????						;-------------------------------------------------------------------------------
    102  5000 ????						; CLEAN_START
    103  5000 ????						; Original author: Andrew Davie
    104  5000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
    105  5000 ????						; Sets stack pointer to $FF, and all registers to 0
    106  5000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    107  5000 ????						; Use as very first section of code on boot (ie: at reset)
    108  5000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    109  5000 ????
    110  5000 ????				      MAC	clean_start
    111  5000 ????				      sei
    112  5000 ????				      cld
    113  5000 ????
    114  5000 ????				      ldx	#0
    115  5000 ????				      txa
    116  5000 ????				      tay
    117  5000 ????			   .CLEAR_STACK dex
    118  5000 ????				      txs
    119  5000 ????				      pha
    120  5000 ????				      bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    121  5000 ????
    122  5000 ????				      ENDM
    123  5000 ????
    124  5000 ????						;-------------------------------------------------------
    125  5000 ????						; SET_POINTER
    126  5000 ????						; Original author: Manuel Rotschkar
    127  5000 ????						;
    128  5000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    129  5000 ????						;
    130  5000 ????						; Usage: SET_POINTER pointer, address
    131  5000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    132  5000 ????						;
    133  5000 ????						; Note: Alters the accumulator, NZ flags
    134  5000 ????						; IN 1: 2 byte RAM location reserved for pointer
    135  5000 ????						; IN 2: absolute address
    136  5000 ????
    137  5000 ????				      MAC	set_pointer
    138  5000 ????			   .POINTER   SET	{1}
    139  5000 ????			   .ADDRESS   SET	{2}
    140  5000 ????
    141  5000 ????				      LDA	#<.ADDRESS	; Get Lowbyte of Address
    142  5000 ????				      STA	.POINTER	; Store in pointer
    143  5000 ????				      LDA	#>.ADDRESS	; Get Hibyte of Address
    144  5000 ????				      STA	.POINTER+1	; Store in pointer+1
    145  5000 ????
    146  5000 ????				      ENDM
    147  5000 ????
    148  5000 ????						; EOF
------- FILE 2600basic.h
------- FILE 2600basic_variable_redefs.h LEVEL 3 PASS 3
      0  5000 ????				      include	"2600basic_variable_redefs.h"
      1  5000 ????						; This file contains variable mapping and other information for the current project.
      2  5000 ????
      3  5000 ????	       00 fc	   text_strings_length =	.skipL0633-text_strings
      4  5000 ????
      5  5000 ????	       00 23	   bscode_length =	35
      6  5000 ????	       00 b2	   _SD_Music01 =	var14
      7  5000 ????	       00 1d	   _SD_Touch_Enemy_length =	.skipL0591-_SD_Touch_Enemy
      8  5000 ????
      9  5000 ????	       00 21	   _SD_Shoot_Enemy_length =	.skipL0590-_SD_Shoot_Enemy
     10  5000 ????
     11  5000 ????	       00 45	   _SD_Shoot_Miss_length =	.skipL0589-_SD_Shoot_Miss
     12  5000 ????
     13  5000 ????	       00 35	   _SD_Shot_Wall_length =	.skipL0588-_SD_Shot_Wall
     14  5000 ????
     15  5000 ????	       f0 5f	   w_Bit0_room_type_top =	w_BitOp_room_type
     16  5000 ????
     17  5000 ????	       f0 df	   r_Bit0_room_type_top =	r_BitOp_room_type
     18  5000 ????
     19  5000 ????	       f0 6f	   w_extra_wall_startpos_2_y =	w111
     20  5000 ????
     21  5000 ????	       f0 ef	   r_extra_wall_startpos_2_y =	r111
     22  5000 ????
     23  5000 ????	       f0 6e	   w_extra_wall_startpos_2_x =	w110
     24  5000 ????
     25  5000 ????	       f0 ee	   r_extra_wall_startpos_2_x =	r110
     26  5000 ????
     27  5000 ????	       f0 6d	   w_extra_wall_startpos_1_y =	w109
     28  5000 ????
     29  5000 ????	       f0 ed	   r_extra_wall_startpos_1_y =	r109
     30  5000 ????
     31  5000 ????	       f0 6c	   w_extra_wall_startpos_1_x =	w108
     32  5000 ????
     33  5000 ????	       f0 ec	   r_extra_wall_startpos_1_x =	r108
     34  5000 ????
     35  5000 ????	       f0 6b	   w_extra_wall_height =	w107
     36  5000 ????
     37  5000 ????	       f0 eb	   r_extra_wall_height =	r107
     38  5000 ????
     39  5000 ????	       f0 6a	   w_extra_wall_width =	w106
     40  5000 ????
     41  5000 ????	       f0 ea	   r_extra_wall_width =	r106
     42  5000 ????
     43  5000 ????	       f0 69	   w_extra_wall_type_and_range =	w105
     44  5000 ????
     45  5000 ????	       f0 e9	   r_extra_wall_type_and_range =	r105
     46  5000 ????
     47  5000 ????	       f0 68	   w_roommate_startpos_y =	w104
     48  5000 ????
     49  5000 ????	       f0 e8	   r_roommate_startpos_y =	r104
     50  5000 ????
     51  5000 ????	       f0 67	   w_roommate_startpos_x =	w103
     52  5000 ????
     53  5000 ????	       f0 e7	   r_roommate_startpos_x =	r103
     54  5000 ????
     55  5000 ????	       f0 66	   w_roommate_type_and_range =	w102
     56  5000 ????
     57  5000 ????	       f0 e6	   r_roommate_type_and_range =	r102
     58  5000 ????
     59  5000 ????	       f0 65	   w_room_color_bottom =	w101
     60  5000 ????
     61  5000 ????	       f0 e5	   r_room_color_bottom =	r101
     62  5000 ????
     63  5000 ????	       f0 64	   w_room_color_waste4 =	w100
     64  5000 ????
     65  5000 ????	       f0 e4	   r_room_color_waste3 =	r100
     66  5000 ????
     67  5000 ????	       f0 63	   w_room_color_waste2 =	w099
     68  5000 ????
     69  5000 ????	       f0 e3	   r_room_color_waste2 =	r099
     70  5000 ????
     71  5000 ????	       f0 62	   w_room_color_waste1 =	w098
     72  5000 ????
     73  5000 ????	       f0 e2	   r_room_color_waste1 =	r098
     74  5000 ????
     75  5000 ????	       f0 61	   w_room_color_middle =	w097
     76  5000 ????
     77  5000 ????	       f0 e1	   r_room_color_middle =	r097
     78  5000 ????
     79  5000 ????	       f0 60	   w_room_color_top =	w096
     80  5000 ????
     81  5000 ????	       f0 e0	   r_room_color_top =	r096
     82  5000 ????
     83  5000 ????	       f0 5f	   w_BitOp_room_type =	w095
     84  5000 ????
     85  5000 ????	       f0 df	   r_BitOp_room_type =	r095
     86  5000 ????
     87  5000 ????	       f0 5e	   w_men_to_rescue_in_this_level =	w094
     88  5000 ????
     89  5000 ????	       f0 de	   r_men_to_rescue_in_this_level =	r094
     90  5000 ????
     91  5000 ????	       f0 5d	   w_level_bonus_bcd_points =	w093
     92  5000 ????
     93  5000 ????	       f0 dd	   r_level_bonus_bcd_points =	r093
     94  5000 ????
     95  5000 ????	       f0 5d	   w_room_definition_start =	w093
     96  5000 ????
     97  5000 ????	       00 d3	   Game_Status =	var47
     98  5000 ????
     99  5000 ????	       00 b4	   next_shoot_rand =	var16
    100  5000 ????
    101  5000 ????	       00 b1	   bonus_bcd_counter =	var13
    102  5000 ????
    103  5000 ????	       00 b0	   TextIndex  =	var12
    104  5000 ????
    105  5000 ????	       00 b0	   men_to_rescue =	var12
    106  5000 ????
    107  5000 ????	       00 af	   ball_shoot_y =	var11
    108  5000 ????
    109  5000 ????	       00 ae	   ball_shoot_x =	var10
    110  5000 ????
    111  5000 ????	       00 ad	   has_private_levels =	var9
    112  5000 ????
    113  5000 ????	       00 ac	   max_priv_level_bcd3 =	var8
    114  5000 ????
    115  5000 ????	       00 ab	   max_priv_level_bcd2 =	var7
    116  5000 ????
    117  5000 ????	       00 aa	   max_priv_level_bcd1 =	var6
    118  5000 ????
    119  5000 ????	       00 a9	   max_pub_level_bcd3 =	var5
    120  5000 ????
    121  5000 ????	       00 a8	   max_pub_level_bcd2 =	var4
    122  5000 ????
    123  5000 ????	       00 a7	   max_pub_level_bcd1 =	var3
    124  5000 ????
    125  5000 ????	       00 a6	   gamenumber =	var2
    126  5000 ????
    127  5000 ????	       00 a5	   new_room_player1x =	var1
    128  5000 ????
    129  5000 ????	       00 a4	   new_room_player1y =	var0
    130  5000 ????
    131  5000 ????	       00 ed	   rand16     =	z
    132  5000 ????
    133  5000 ????	       00 ec	   _Bit7_FireB_Restrainer =	y
    134  5000 ????
    135  5000 ????	       00 ec	   _Bit6_Flip_P1 =	y
    136  5000 ????
    137  5000 ????	       00 ec	   _Bit5_Request_Pending =	y
    138  5000 ????
    139  5000 ????	       00 ec	   _Bit4_Wall_Dir =	y
    140  5000 ????
    141  5000 ????	       00 ec	   _Bit3_Safe_Point_reached =	y
    142  5000 ????
    143  5000 ????	       00 ec	   _Bit2_roommate_Dir =	y
    144  5000 ????
    145  5000 ????	       00 ec	   _Bit_Game_State =	y
    146  5000 ????
    147  5000 ????	       00 86	   P1y_position =	player1y
    148  5000 ????	       00 e9	   P1y_velocity =	v
    149  5000 ????	       00 91	   M0y_position =	missile0y
    150  5000 ????	       00 e6	   M0y_velocity =	s
    151  5000 ????	       00 af	   Bally_position =	ball_shoot_y
    152  5000 ????	       00 e3	   Bally_velocity =	p
    153  5000 ????	       00 e2	   _Ch1_Duration =	o
    154  5000 ????
    155  5000 ????	       00 e1	   Safe_Point_P1_y =	n
    156  5000 ????
    157  5000 ????	       00 e0	   Safe_Point_P1_x =	m
    158  5000 ????
    159  5000 ????	       00 df	   _Bit1_Safe_Point_P1_Flip =	l
    160  5000 ????
    161  5000 ????	       00 df	   _Bit0_New_Room_P1_Flip =	l
    162  5000 ????
    163  5000 ????	       00 df	   _BitOp_Flip_positions =	l
    164  5000 ????
    165  5000 ????	       00 de	   roommate_type =	k
    166  5000 ????
    167  5000 ????	       00 dd	   roommate_move_x =	j
    168  5000 ????
    169  5000 ????	       00 dc	   extra_wall_move_x =	i
    170  5000 ????
    171  5000 ????	       00 db	   _Ch0_Counter =	h
    172  5000 ????
    173  5000 ????	       00 da	   _Ch0_Duration =	g
    174  5000 ????
    175  5000 ????	       00 d9	   _Ch0_Sound =	f
    176  5000 ????
    177  5000 ????	       00 d8	   _Bit3_P1_Dir_Right =	e
    178  5000 ????
    179  5000 ????	       00 d8	   _Bit2_P1_Dir_Left =	e
    180  5000 ????
    181  5000 ????	       00 d8	   _Bit1_P1_Dir_Down =	e
    182  5000 ????
    183  5000 ????	       00 d8	   _Bit0_P1_Dir_Up =	e
    184  5000 ????
    185  5000 ????	       00 d8	   _BitOp_P1_Dir =	e
    186  5000 ????
    187  5000 ????	       00 d7	   _Bit3_M0_Dir_Right =	d
    188  5000 ????
    189  5000 ????	       00 d7	   _Bit2_M0_Dir_Left =	d
    190  5000 ????
    191  5000 ????	       00 d7	   _Bit1_M0_Dir_Down =	d
    192  5000 ????
    193  5000 ????	       00 d7	   _Bit0_M0_Dir_Up =	d
    194  5000 ????
    195  5000 ????	       00 d7	   _BitOp_M0_Dir =	d
    196  5000 ????
    197  5000 ????	       00 d6	   _Bit3_Ball_Shot_Dir_Right2 =	c
    198  5000 ????
    199  5000 ????	       00 d6	   _Bit2_Ball_Shot_Dir_Right1 =	c
    200  5000 ????
    201  5000 ????	       00 d6	   _Bit1_Ball_Shot_Dir_Left2 =	c
    202  5000 ????
    203  5000 ????	       00 d6	   _Bit0_Ball_Shot_Dir_Left1 =	c
    204  5000 ????
    205  5000 ????	       00 d6	   _BitOp_Ball_Shot_Dir =	c
    206  5000 ????
    207  5000 ????	       00 d5	   frame_counter =	b
    208  5000 ????
    209  5000 ????	       00 d4	   delay_counter =	a
    210  5000 ????
    211  5000 ????	       00 95	   _sc3       =	score + 2
    212  5000 ????
    213  5000 ????	       00 94	   _sc2       =	score + 1
    214  5000 ????
    215  5000 ????	       00 93	   _sc1       =	score
    216  5000 ????
    217  5000 ????	       00 fe	   _FE	      =	$FE
    218  5000 ????
    219  5000 ????	       00 fc	   _FC	      =	$FC
    220  5000 ????
    221  5000 ????	       00 fa	   _FA	      =	$FA
    222  5000 ????
    223  5000 ????	       00 f8	   _F8	      =	$F8
    224  5000 ????
    225  5000 ????	       00 f6	   _F6	      =	$F6
    226  5000 ????
    227  5000 ????	       00 f4	   _F4	      =	$F4
    228  5000 ????
    229  5000 ????	       00 f2	   _F2	      =	$F2
    230  5000 ????
    231  5000 ????	       00 f0	   _F0	      =	$F0
    232  5000 ????
    233  5000 ????	       00 ee	   _EE	      =	$EE
    234  5000 ????
    235  5000 ????	       00 ec	   _EC	      =	$EC
    236  5000 ????
    237  5000 ????	       00 ea	   _EA	      =	$EA
    238  5000 ????
    239  5000 ????	       00 e8	   _E8	      =	$E8
    240  5000 ????
    241  5000 ????	       00 e6	   _E6	      =	$E6
    242  5000 ????
    243  5000 ????	       00 e4	   _E4	      =	$E4
    244  5000 ????
    245  5000 ????	       00 e2	   _E2	      =	$E2
    246  5000 ????
    247  5000 ????	       00 e0	   _E0	      =	$E0
    248  5000 ????
    249  5000 ????	       00 de	   _DE	      =	$DE
    250  5000 ????
    251  5000 ????	       00 dc	   _DC	      =	$DC
    252  5000 ????
    253  5000 ????	       00 da	   _DA	      =	$DA
    254  5000 ????
    255  5000 ????	       00 d8	   _D8	      =	$D8
    256  5000 ????
    257  5000 ????	       00 d6	   _D6	      =	$D6
    258  5000 ????
    259  5000 ????	       00 d4	   _D4	      =	$D4
    260  5000 ????
    261  5000 ????	       00 d2	   _D2	      =	$D2
    262  5000 ????
    263  5000 ????	       00 d0	   _D0	      =	$D0
    264  5000 ????
    265  5000 ????	       00 ce	   _CE	      =	$CE
    266  5000 ????
    267  5000 ????	       00 cc	   _CC	      =	$CC
    268  5000 ????
    269  5000 ????	       00 ca	   _CA	      =	$CA
    270  5000 ????
    271  5000 ????	       00 c8	   _C8	      =	$C8
    272  5000 ????
    273  5000 ????	       00 c6	   _C6	      =	$C6
    274  5000 ????
    275  5000 ????	       00 c4	   _C4	      =	$C4
    276  5000 ????
    277  5000 ????	       00 c2	   _C2	      =	$C2
    278  5000 ????
    279  5000 ????	       00 c0	   _C0	      =	$C0
    280  5000 ????
    281  5000 ????	       00 be	   _BE	      =	$BE
    282  5000 ????
    283  5000 ????	       00 bc	   _BC	      =	$BC
    284  5000 ????
    285  5000 ????	       00 ba	   _BA	      =	$BA
    286  5000 ????
    287  5000 ????	       00 b8	   _B8	      =	$B8
    288  5000 ????
    289  5000 ????	       00 b6	   _B6	      =	$B6
    290  5000 ????
    291  5000 ????	       00 b4	   _B4	      =	$B4
    292  5000 ????
    293  5000 ????	       00 b2	   _B2	      =	$B2
    294  5000 ????
    295  5000 ????	       00 b0	   _B0	      =	$B0
    296  5000 ????
    297  5000 ????	       00 ae	   _AE	      =	$AE
    298  5000 ????
    299  5000 ????	       00 ac	   _AC	      =	$AC
    300  5000 ????
    301  5000 ????	       00 aa	   _AA	      =	$AA
    302  5000 ????
    303  5000 ????	       00 a8	   _A8	      =	$A8
    304  5000 ????
    305  5000 ????	       00 a6	   _A6	      =	$A6
    306  5000 ????
    307  5000 ????	       00 a4	   _A4	      =	$A4
    308  5000 ????
    309  5000 ????	       00 a2	   _A2	      =	$A2
    310  5000 ????
    311  5000 ????	       00 a0	   _A0	      =	$A0
    312  5000 ????
    313  5000 ????	       00 9e	   _9E	      =	$9E
    314  5000 ????
    315  5000 ????	       00 9c	   _9C	      =	$9C
    316  5000 ????
    317  5000 ????	       00 9a	   _9A	      =	$9A
    318  5000 ????
    319  5000 ????	       00 98	   _98	      =	$98
    320  5000 ????
    321  5000 ????	       00 96	   _96	      =	$96
    322  5000 ????
    323  5000 ????	       00 94	   _94	      =	$94
    324  5000 ????
    325  5000 ????	       00 92	   _92	      =	$92
    326  5000 ????
    327  5000 ????	       00 90	   _90	      =	$90
    328  5000 ????
    329  5000 ????	       00 8e	   _8E	      =	$8E
    330  5000 ????
    331  5000 ????	       00 8c	   _8C	      =	$8C
    332  5000 ????
    333  5000 ????	       00 8a	   _8A	      =	$8A
    334  5000 ????
    335  5000 ????	       00 88	   _88	      =	$88
    336  5000 ????
    337  5000 ????	       00 86	   _86	      =	$86
    338  5000 ????
    339  5000 ????	       00 84	   _84	      =	$84
    340  5000 ????
    341  5000 ????	       00 82	   _82	      =	$82
    342  5000 ????
    343  5000 ????	       00 80	   _80	      =	$80
    344  5000 ????
    345  5000 ????	       00 7e	   _7E	      =	$7E
    346  5000 ????
    347  5000 ????	       00 7c	   _7C	      =	$7C
    348  5000 ????
    349  5000 ????	       00 7a	   _7A	      =	$7A
    350  5000 ????
    351  5000 ????	       00 78	   _78	      =	$78
    352  5000 ????
    353  5000 ????	       00 76	   _76	      =	$76
    354  5000 ????
    355  5000 ????	       00 74	   _74	      =	$74
    356  5000 ????
    357  5000 ????	       00 72	   _72	      =	$72
    358  5000 ????
    359  5000 ????	       00 70	   _70	      =	$70
    360  5000 ????
    361  5000 ????	       00 6e	   _6E	      =	$6E
    362  5000 ????
    363  5000 ????	       00 6c	   _6C	      =	$6C
    364  5000 ????
    365  5000 ????	       00 6a	   _6A	      =	$6A
    366  5000 ????
    367  5000 ????	       00 68	   _68	      =	$68
    368  5000 ????
    369  5000 ????	       00 66	   _66	      =	$66
    370  5000 ????
    371  5000 ????	       00 64	   _64	      =	$64
    372  5000 ????
    373  5000 ????	       00 62	   _62	      =	$62
    374  5000 ????
    375  5000 ????	       00 60	   _60	      =	$60
    376  5000 ????
    377  5000 ????	       00 5e	   _5E	      =	$5E
    378  5000 ????
    379  5000 ????	       00 5c	   _5C	      =	$5C
    380  5000 ????
    381  5000 ????	       00 5a	   _5A	      =	$5A
    382  5000 ????
    383  5000 ????	       00 58	   _58	      =	$58
    384  5000 ????
    385  5000 ????	       00 56	   _56	      =	$56
    386  5000 ????
    387  5000 ????	       00 54	   _54	      =	$54
    388  5000 ????
    389  5000 ????	       00 52	   _52	      =	$52
    390  5000 ????
    391  5000 ????	       00 50	   _50	      =	$50
    392  5000 ????
    393  5000 ????	       00 4e	   _4E	      =	$4E
    394  5000 ????
    395  5000 ????	       00 4c	   _4C	      =	$4C
    396  5000 ????
    397  5000 ????	       00 4a	   _4A	      =	$4A
    398  5000 ????
    399  5000 ????	       00 48	   _48	      =	$48
    400  5000 ????
    401  5000 ????	       00 46	   _46	      =	$46
    402  5000 ????
    403  5000 ????	       00 44	   _44	      =	$44
    404  5000 ????
    405  5000 ????	       00 42	   _42	      =	$42
    406  5000 ????
    407  5000 ????	       00 40	   _40	      =	$40
    408  5000 ????
    409  5000 ????	       00 3e	   _3E	      =	$3E
    410  5000 ????
    411  5000 ????	       00 3c	   _3C	      =	$3C
    412  5000 ????
    413  5000 ????	       00 3a	   _3A	      =	$3A
    414  5000 ????
    415  5000 ????	       00 38	   _38	      =	$38
    416  5000 ????
    417  5000 ????	       00 36	   _36	      =	$36
    418  5000 ????
    419  5000 ????	       00 34	   _34	      =	$34
    420  5000 ????
    421  5000 ????	       00 32	   _32	      =	$32
    422  5000 ????
    423  5000 ????	       00 30	   _30	      =	$30
    424  5000 ????
    425  5000 ????	       00 2e	   _2E	      =	$2E
    426  5000 ????
    427  5000 ????	       00 2c	   _2C	      =	$2C
    428  5000 ????
    429  5000 ????	       00 2a	   _2A	      =	$2A
    430  5000 ????
    431  5000 ????	       00 28	   _28	      =	$28
    432  5000 ????
    433  5000 ????	       00 26	   _26	      =	$26
    434  5000 ????
    435  5000 ????	       00 24	   _24	      =	$24
    436  5000 ????
    437  5000 ????	       00 22	   _22	      =	$22
    438  5000 ????
    439  5000 ????	       00 20	   _20	      =	$20
    440  5000 ????
    441  5000 ????	       00 1e	   _1E	      =	$1E
    442  5000 ????
    443  5000 ????	       00 1c	   _1C	      =	$1C
    444  5000 ????
    445  5000 ????	       00 1a	   _1A	      =	$1A
    446  5000 ????
    447  5000 ????	       00 18	   _18	      =	$18
    448  5000 ????
    449  5000 ????	       00 16	   _16	      =	$16
    450  5000 ????
    451  5000 ????	       00 14	   _14	      =	$14
    452  5000 ????
    453  5000 ????	       00 12	   _12	      =	$12
    454  5000 ????
    455  5000 ????	       00 10	   _10	      =	$10
    456  5000 ????
    457  5000 ????	       00 0e	   _0E	      =	$0E
    458  5000 ????
    459  5000 ????	       00 0c	   _0C	      =	$0C
    460  5000 ????
    461  5000 ????	       00 0a	   _0A	      =	$0A
    462  5000 ????
    463  5000 ????	       00 08	   _08	      =	$08
    464  5000 ????
    465  5000 ????	       00 06	   _06	      =	$06
    466  5000 ????
    467  5000 ????	       00 04	   _04	      =	$04
    468  5000 ????
    469  5000 ????	       00 02	   _02	      =	$02
    470  5000 ????
    471  5000 ????	       00 00	   _00	      =	$00
    472  5000 ????
    473  5000 ????	       00 09	   req_load_menu =	9
    474  5000 ????
    475  5000 ????	       00 08	   req_safe_point =	8
    476  5000 ????
    477  5000 ????	       00 07	   req_level_reset =	7
    478  5000 ????
    479  5000 ????	       00 06	   req_move_down =	6
    480  5000 ????
    481  5000 ????	       00 05	   req_move_right =	5
    482  5000 ????
    483  5000 ????	       00 04	   req_move_up =	4
    484  5000 ????
    485  5000 ????	       00 03	   req_move_left =	3
    486  5000 ????
    487  5000 ????	       00 02	   req_game_over =	2
    488  5000 ????
    489  5000 ????	       00 01	   req_level_up =	1
    490  5000 ????
    491  5000 ????	       00 00	   req_load   =	0
    492  5000 ????
    493  5000 ????	       00 03	   game_state_heli_explosion =	3
    494  5000 ????
    495  5000 ????	       00 02	   game_state_level_finished =	2
    496  5000 ????
    497  5000 ????	       00 01	   game_state_game_over =	1
    498  5000 ????
    499  5000 ????	       00 00	   game_state_run =	0
    500  5000 ????
    501  5000 ????	       00 06	   response_menu_size =	6
    502  5000 ????
    503  5000 ????	       00 1e	   response_size_minus_1 =	30
    504  5000 ????
    505  5000 ????	       00 94	   _M_Edge_Right =	148
    506  5000 ????
    507  5000 ????	       00 0e	   _M_Edge_Left =	14
    508  5000 ????
    509  5000 ????	       00 58	   _M_Edge_Bottom =	88
    510  5000 ????
    511  5000 ????	       00 02	   _M_Edge_Top =	2
    512  5000 ????
    513  5000 ????	       00 4c	   player_max_y =	76
    514  5000 ????
    515  5000 ????	       00 02	   player_min_y =	2
    516  5000 ????
    517  5000 ????	       00 86	   player_max_x =	134
    518  5000 ????
    519  5000 ????	       00 0a	   player_min_x =	10
    520  5000 ????
    521  5000 ????	       00 08	   textbkcolor =	$08
    522  5000 ????
    523  5000 ????	       00 08	   scorebkcolor =	$08
    524  5000 ????
    525  5000 ????	       00 01	   pfscore    =	1
    526  5000 ????
    527  5000 ????	       00 04	   pfres      =	4
    528  5000 ????
    529  5000 ????	       00 01	   superchip  =	1
    530  5000 ????	       00 03	   bs_mask    =	3
    531  5000 ????	       00 10	   bankswitch =	16
    532  5000 ????	       1f f6	   bankswitch_hotspot =	$1FF6
    533  5000 ????	       00 01	   PFcolors   =	1
    534  5000 ????	       00 01	   player1colors =	1
------- FILE 2600basic.h
      7  5000 ????
      8  5000 ????	       00 80	   player0x   =	$80
      9  5000 ????	       00 81	   player1x   =	$81
     10  5000 ????	       00 82	   missile0x  =	$82
     11  5000 ????	       00 83	   missile1x  =	$83
     12  5000 ????	       00 84	   ballx      =	$84
     13  5000 ????
     14  5000 ????	       00 85	   objecty    =	$85
     15  5000 ????	       00 85	   player0y   =	$85
     16  5000 ????	       00 86	   player1y   =	$86
     17  5000 ????	       00 87	   missile1height =	$87
     18  5000 ????	       00 88	   missile1y  =	$88
     19  5000 ????	       00 89	   bally      =	$89
     20  5000 ????
     21  5000 ????	       00 87	   player1color =	$87	; replaces missile 1
     22  5000 ????
     23  5000 ????	       00 8a	   player0pointer =	$8A	;uses $8A-$8B
     24  5000 ????	       00 8a	   player0pointerlo =	$8A
     25  5000 ????	       00 8b	   player0pointerhi =	$8B
     26  5000 ????	       00 8c	   player1pointer =	$8C	; $8C-$8D
     27  5000 ????	       00 8c	   player1pointerlo =	$8C
     28  5000 ????	       00 8d	   player1pointerhi =	$8D
     29  5000 ????
     30  5000 ????	       00 8e	   player0height =	$8E
     31  5000 ????	       00 8f	   player1height =	$8F
     32  5000 ????	       00 90	   missile0height =	$90
     33  5000 ????	       00 91	   missile0y  =	$91
     34  5000 ????	       00 92	   ballheight =	$92
     35  5000 ????
     36  5000 ????	       00 90	   currentpaddle =	$90	; replaces missile 0 (and can't be used with playercolor)
     37  5000 ????	       00 91	   paddle     =	$91	; replaces missile 0
     38  5000 ????	       00 82	   player0colorstore =	$82	; replaces missile 0
     39  5000 ????	       00 90	   player0color =	$90	; replaces missile 0
     40  5000 ????
     41  5000 ????	       00 93	   score      =	$93	; $93-$95
     42  5000 ????	       00 96	   scorepointers =	$96	; $96-$9B = 6 bytes
     43  5000 ????	       00 9c	   temp1      =	$9C	;used by kernel.  can be used in program too, but
     44  5000 ????	       00 9d	   temp2      =	$9D	;are obliterated when drawscreen is called.
     45  5000 ????	       00 9e	   temp3      =	$9E
     46  5000 ????	       00 9f	   temp4      =	$9F
     47  5000 ????	       00 a0	   temp5      =	$A0
     48  5000 ????	       00 a1	   temp6      =	$A1
     49  5000 ????
     50  5000 ????	       00 a2	   rand       =	$A2
     51  5000 ????	       00 a3	   scorecolor =	$A3
     52  5000 ????
     53  5000 ????	       00 a4	   var0       =	$A4
     54  5000 ????	       00 a5	   var1       =	$A5
     55  5000 ????	       00 a6	   var2       =	$A6
     56  5000 ????	       00 a7	   var3       =	$A7
     57  5000 ????	       00 a8	   var4       =	$A8
     58  5000 ????	       00 a9	   var5       =	$A9
     59  5000 ????	       00 aa	   var6       =	$AA
     60  5000 ????	       00 ab	   var7       =	$AB
     61  5000 ????	       00 ac	   var8       =	$AC
     62  5000 ????	       00 ad	   var9       =	$AD
     63  5000 ????	       00 ae	   var10      =	$AE
     64  5000 ????	       00 af	   var11      =	$AF
     65  5000 ????	       00 b0	   var12      =	$B0
     66  5000 ????	       00 b1	   var13      =	$B1
     67  5000 ????	       00 b2	   var14      =	$B2
     68  5000 ????	       00 b3	   var15      =	$B3
     69  5000 ????	       00 b4	   var16      =	$B4
     70  5000 ????	       00 b5	   var17      =	$B5
     71  5000 ????	       00 b6	   var18      =	$B6
     72  5000 ????	       00 b7	   var19      =	$B7
     73  5000 ????	       00 b8	   var20      =	$B8
     74  5000 ????	       00 b9	   var21      =	$B9
     75  5000 ????	       00 ba	   var22      =	$BA
     76  5000 ????	       00 bb	   var23      =	$BB
     77  5000 ????	       00 bc	   var24      =	$BC
     78  5000 ????	       00 bd	   var25      =	$BD
     79  5000 ????	       00 be	   var26      =	$BE
     80  5000 ????	       00 bf	   var27      =	$BF
     81  5000 ????	       00 c0	   var28      =	$C0
     82  5000 ????	       00 c1	   var29      =	$C1
     83  5000 ????	       00 c2	   var30      =	$C2
     84  5000 ????	       00 c3	   var31      =	$C3
     85  5000 ????	       00 c4	   var32      =	$C4
     86  5000 ????	       00 c5	   var33      =	$C5
     87  5000 ????	       00 c6	   var34      =	$C6
     88  5000 ????	       00 c7	   var35      =	$C7
     89  5000 ????	       00 c8	   var36      =	$C8
     90  5000 ????	       00 c9	   var37      =	$C9
     91  5000 ????	       00 ca	   var38      =	$CA
     92  5000 ????	       00 cb	   var39      =	$CB
     93  5000 ????	       00 cc	   var40      =	$CC
     94  5000 ????	       00 cd	   var41      =	$CD
     95  5000 ????	       00 ce	   var42      =	$CE
     96  5000 ????	       00 cf	   var43      =	$CF
     97  5000 ????	       00 d0	   var44      =	$D0
     98  5000 ????	       00 d1	   var45      =	$D1
     99  5000 ????	       00 d2	   var46      =	$D2
    100  5000 ????	       00 d3	   var47      =	$D3
    101  5000 ????
    102  5000 ????	       00 d4	   A	      =	$d4
    103  5000 ????	       00 d4	   a	      =	$d4
    104  5000 ????	       00 d5	   B	      =	$d5
    105  5000 ????	       00 d5	   b	      =	$d5
    106  5000 ????	       00 d6	   C	      =	$d6
    107  5000 ????	       00 d6	   c	      =	$d6
    108  5000 ????	       00 d7	   D	      =	$d7
    109  5000 ????	       00 d7	   d	      =	$d7
    110  5000 ????	       00 d8	   E	      =	$d8
    111  5000 ????	       00 d8	   e	      =	$d8
    112  5000 ????	       00 d9	   F	      =	$d9
    113  5000 ????	       00 d9	   f	      =	$d9
    114  5000 ????	       00 da	   G	      =	$da
    115  5000 ????	       00 da	   g	      =	$da
    116  5000 ????	       00 db	   H	      =	$db
    117  5000 ????	       00 db	   h	      =	$db
    118  5000 ????	       00 dc	   I	      =	$dc
    119  5000 ????	       00 dc	   i	      =	$dc
    120  5000 ????	       00 dd	   J	      =	$dd
    121  5000 ????	       00 dd	   j	      =	$dd
    122  5000 ????	       00 de	   K	      =	$de
    123  5000 ????	       00 de	   k	      =	$de
    124  5000 ????	       00 df	   L	      =	$df
    125  5000 ????	       00 df	   l	      =	$df
    126  5000 ????	       00 e0	   M	      =	$e0
    127  5000 ????	       00 e0	   m	      =	$e0
    128  5000 ????	       00 e1	   N	      =	$e1
    129  5000 ????	       00 e1	   n	      =	$e1
    130  5000 ????	       00 e2	   O	      =	$e2
    131  5000 ????	       00 e2	   o	      =	$e2
    132  5000 ????	       00 e3	   P	      =	$e3
    133  5000 ????	       00 e3	   p	      =	$e3
    134  5000 ????	       00 e4	   Q	      =	$e4
    135  5000 ????	       00 e4	   q	      =	$e4
    136  5000 ????	       00 e5	   R	      =	$e5
    137  5000 ????	       00 e5	   r	      =	$e5
    138  5000 ????	       00 e6	   S	      =	$e6
    139  5000 ????	       00 e6	   s	      =	$e6
    140  5000 ????	       00 e7	   T	      =	$e7
    141  5000 ????	       00 e7	   t	      =	$e7
    142  5000 ????	       00 e8	   U	      =	$e8
    143  5000 ????	       00 e8	   u	      =	$e8
    144  5000 ????	       00 e9	   V	      =	$e9
    145  5000 ????	       00 e9	   v	      =	$e9
    146  5000 ????	       00 ea	   W	      =	$ea
    147  5000 ????	       00 ea	   w	      =	$ea
    148  5000 ????	       00 eb	   X	      =	$eb
    149  5000 ????	       00 eb	   x	      =	$eb
    150  5000 ????	       00 ec	   Y	      =	$ec
    151  5000 ????	       00 ec	   y	      =	$ec
    152  5000 ????	       00 ed	   Z	      =	$ed
    153  5000 ????	       00 ed	   z	      =	$ed
    154  5000 ????
    155  5000 ????	       00 ee	   temp7      =	$ee	; This is used to aid in bankswitching
    156  5000 ????	       00 ef	   playfieldpos =	$ef
    157  5000 ????
    158  5000 ????						; available for other uses, or if unused, provide more stack space
    159  5000 ????
    160  5000 ????	       00 f0	   aux1       =	$f0
    161  5000 ????	       00 f1	   aux2       =	$f1
    162  5000 ????	       00 f2	   aux3       =	$f2
    163  5000 ????	       00 f3	   aux4       =	$f3
    164  5000 ????	       00 f4	   aux5       =	$f4
    165  5000 ????	       00 f5	   aux6       =	$f5
    166  5000 ????
    167  5000 ????						; playfield color/height pointers
    168  5000 ????	       00 f0	   pfcolortable =	$f0	; and $d5
    169  5000 ????	       00 f0	   pfheighttable =	$f0	; and $d5
    170  5000 ????						; the above pointers are the same because if color and height are both used together,
    171  5000 ????						; they must used absolute indexed and cannot use pointers
    172  5000 ????
    173  5000 ????	       00 f2	   lifepointer =	$f2	; pointer to "lives" shape
    174  5000 ????						; upper 3 bits of $f2 contain the number of lives
    175  5000 ????	       00 f4	   lifecolor  =	$f4
    176  5000 ????	       00 f3	   lives      =	$f3	; # lives >> 5
    177  5000 ????	       00 f5	   statusbarlength =	$f5	; only uses upper 5 bits; other bits free
    178  5000 ????
    179  5000 ????	       00 f2	   pfscore1   =	$f2	; optional playfield bytes in score
    180  5000 ????	       00 f3	   pfscore2   =	$f3
    181  5000 ????	       00 f4	   pfscorecolor =	$f4
    182  5000 ????
    183  5000 ????	       00 f6	   stack1     =	$f6
    184  5000 ????	       00 f7	   stack2     =	$f7
    185  5000 ????	       00 f8	   stack3     =	$f8
    186  5000 ????	       00 f9	   stack4     =	$f9
    187  5000 ????						; the stack bytes above may be used in the kernel
    188  5000 ????						; stack = F6-F7, F8-F9, FA-FB, FC-FD, FE-FF
    189  5000 ????
    190  5000 ????				      MAC	return
    191  5000 ????				      ifnconst	bankswitch
    192  5000 ????				      rts
    193  5000 ????				      else
    194  5000 ????				      jmp	BS_return
    195  5000 ????				      endif
    196  5000 ????				      ENDM		; auto-return from either a regular or bankswitched module
    197  5000 ????
    198  5000 ????				      ifconst	superchip
    199  5000 ????	       10 d0	   playfieldbase =	$10D0
------- FILE superchip.h LEVEL 3 PASS 3
      0  5000 ????				      include	superchip.h
      1  5000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  5000 ????
      3  5000 ????	       f0 00	   write_RAM  =	$F000
      4  5000 ????	       f0 00	   wRAM       =	$F000
      5  5000 ????	       f0 00	   w000       =	$F000
      6  5000 ????	       f0 01	   w001       =	$F001
      7  5000 ????	       f0 02	   w002       =	$F002
      8  5000 ????	       f0 03	   w003       =	$F003
      9  5000 ????	       f0 04	   w004       =	$F004
     10  5000 ????	       f0 05	   w005       =	$F005
     11  5000 ????	       f0 06	   w006       =	$F006
     12  5000 ????	       f0 07	   w007       =	$F007
     13  5000 ????	       f0 08	   w008       =	$F008
     14  5000 ????	       f0 09	   w009       =	$F009
     15  5000 ????	       f0 0a	   w010       =	$F00A
     16  5000 ????	       f0 0b	   w011       =	$F00B
     17  5000 ????	       f0 0c	   w012       =	$F00C
     18  5000 ????	       f0 0d	   w013       =	$F00D
     19  5000 ????	       f0 0e	   w014       =	$F00E
     20  5000 ????	       f0 0f	   w015       =	$F00F
     21  5000 ????	       f0 10	   w016       =	$F010
     22  5000 ????	       f0 11	   w017       =	$F011
     23  5000 ????	       f0 12	   w018       =	$F012
     24  5000 ????	       f0 13	   w019       =	$F013
     25  5000 ????	       f0 14	   w020       =	$F014
     26  5000 ????	       f0 15	   w021       =	$F015
     27  5000 ????	       f0 16	   w022       =	$F016
     28  5000 ????	       f0 17	   w023       =	$F017
     29  5000 ????	       f0 18	   w024       =	$F018
     30  5000 ????	       f0 19	   w025       =	$F019
     31  5000 ????	       f0 1a	   w026       =	$F01A
     32  5000 ????	       f0 1b	   w027       =	$F01B
     33  5000 ????	       f0 1c	   w028       =	$F01C
     34  5000 ????	       f0 1d	   w029       =	$F01D
     35  5000 ????	       f0 1e	   w030       =	$F01E
     36  5000 ????	       f0 1f	   w031       =	$F01F
     37  5000 ????	       f0 20	   w032       =	$F020
     38  5000 ????	       f0 21	   w033       =	$F021
     39  5000 ????	       f0 22	   w034       =	$F022
     40  5000 ????	       f0 23	   w035       =	$F023
     41  5000 ????	       f0 24	   w036       =	$F024
     42  5000 ????	       f0 25	   w037       =	$F025
     43  5000 ????	       f0 26	   w038       =	$F026
     44  5000 ????	       f0 27	   w039       =	$F027
     45  5000 ????	       f0 28	   w040       =	$F028
     46  5000 ????	       f0 29	   w041       =	$F029
     47  5000 ????	       f0 2a	   w042       =	$F02A
     48  5000 ????	       f0 2b	   w043       =	$F02B
     49  5000 ????	       f0 2c	   w044       =	$F02C
     50  5000 ????	       f0 2d	   w045       =	$F02D
     51  5000 ????	       f0 2e	   w046       =	$F02E
     52  5000 ????	       f0 2f	   w047       =	$F02F
     53  5000 ????	       f0 30	   w048       =	$F030
     54  5000 ????	       f0 31	   w049       =	$F031
     55  5000 ????	       f0 32	   w050       =	$F032
     56  5000 ????	       f0 33	   w051       =	$F033
     57  5000 ????	       f0 34	   w052       =	$F034
     58  5000 ????	       f0 35	   w053       =	$F035
     59  5000 ????	       f0 36	   w054       =	$F036
     60  5000 ????	       f0 37	   w055       =	$F037
     61  5000 ????	       f0 38	   w056       =	$F038
     62  5000 ????	       f0 39	   w057       =	$F039
     63  5000 ????	       f0 3a	   w058       =	$F03A
     64  5000 ????	       f0 3b	   w059       =	$F03B
     65  5000 ????	       f0 3c	   w060       =	$F03C
     66  5000 ????	       f0 3d	   w061       =	$F03D
     67  5000 ????	       f0 3e	   w062       =	$F03E
     68  5000 ????	       f0 3f	   w063       =	$F03F
     69  5000 ????	       f0 40	   w064       =	$F040
     70  5000 ????	       f0 41	   w065       =	$F041
     71  5000 ????	       f0 42	   w066       =	$F042
     72  5000 ????	       f0 43	   w067       =	$F043
     73  5000 ????	       f0 44	   w068       =	$F044
     74  5000 ????	       f0 45	   w069       =	$F045
     75  5000 ????	       f0 46	   w070       =	$F046
     76  5000 ????	       f0 47	   w071       =	$F047
     77  5000 ????	       f0 48	   w072       =	$F048
     78  5000 ????	       f0 49	   w073       =	$F049
     79  5000 ????	       f0 4a	   w074       =	$F04A
     80  5000 ????	       f0 4b	   w075       =	$F04B
     81  5000 ????	       f0 4c	   w076       =	$F04C
     82  5000 ????	       f0 4d	   w077       =	$F04D
     83  5000 ????	       f0 4e	   w078       =	$F04E
     84  5000 ????	       f0 4f	   w079       =	$F04F
     85  5000 ????	       f0 50	   w080       =	$F050
     86  5000 ????	       f0 51	   w081       =	$F051
     87  5000 ????	       f0 52	   w082       =	$F052
     88  5000 ????	       f0 53	   w083       =	$F053
     89  5000 ????	       f0 54	   w084       =	$F054
     90  5000 ????	       f0 55	   w085       =	$F055
     91  5000 ????	       f0 56	   w086       =	$F056
     92  5000 ????	       f0 57	   w087       =	$F057
     93  5000 ????	       f0 58	   w088       =	$F058
     94  5000 ????	       f0 59	   w089       =	$F059
     95  5000 ????	       f0 5a	   w090       =	$F05A
     96  5000 ????	       f0 5b	   w091       =	$F05B
     97  5000 ????	       f0 5c	   w092       =	$F05C
     98  5000 ????	       f0 5d	   w093       =	$F05D
     99  5000 ????	       f0 5e	   w094       =	$F05E
    100  5000 ????	       f0 5f	   w095       =	$F05F
    101  5000 ????	       f0 60	   w096       =	$F060
    102  5000 ????	       f0 61	   w097       =	$F061
    103  5000 ????	       f0 62	   w098       =	$F062
    104  5000 ????	       f0 63	   w099       =	$F063
    105  5000 ????	       f0 64	   w100       =	$F064
    106  5000 ????	       f0 65	   w101       =	$F065
    107  5000 ????	       f0 66	   w102       =	$F066
    108  5000 ????	       f0 67	   w103       =	$F067
    109  5000 ????	       f0 68	   w104       =	$F068
    110  5000 ????	       f0 69	   w105       =	$F069
    111  5000 ????	       f0 6a	   w106       =	$F06A
    112  5000 ????	       f0 6b	   w107       =	$F06B
    113  5000 ????	       f0 6c	   w108       =	$F06C
    114  5000 ????	       f0 6d	   w109       =	$F06D
    115  5000 ????	       f0 6e	   w110       =	$F06E
    116  5000 ????	       f0 6f	   w111       =	$F06F
    117  5000 ????	       f0 70	   w112       =	$F070
    118  5000 ????	       f0 71	   w113       =	$F071
    119  5000 ????	       f0 72	   w114       =	$F072
    120  5000 ????	       f0 73	   w115       =	$F073
    121  5000 ????	       f0 74	   w116       =	$F074
    122  5000 ????	       f0 75	   w117       =	$F075
    123  5000 ????	       f0 76	   w118       =	$F076
    124  5000 ????	       f0 77	   w119       =	$F077
    125  5000 ????	       f0 78	   w120       =	$F078
    126  5000 ????	       f0 79	   w121       =	$F079
    127  5000 ????	       f0 7a	   w122       =	$F07A
    128  5000 ????	       f0 7b	   w123       =	$F07B
    129  5000 ????	       f0 7c	   w124       =	$F07C
    130  5000 ????	       f0 7d	   w125       =	$F07D
    131  5000 ????	       f0 7e	   w126       =	$F07E
    132  5000 ????	       f0 7f	   w127       =	$F07F
    133  5000 ????
    134  5000 ????	       f0 80	   read_RAM   =	$F080
    135  5000 ????	       f0 80	   rRAM       =	$F080
    136  5000 ????	       f0 80	   r000       =	$F080
    137  5000 ????	       f0 81	   r001       =	$F081
    138  5000 ????	       f0 82	   r002       =	$F082
    139  5000 ????	       f0 83	   r003       =	$F083
    140  5000 ????	       f0 84	   r004       =	$F084
    141  5000 ????	       f0 85	   r005       =	$F085
    142  5000 ????	       f0 86	   r006       =	$F086
    143  5000 ????	       f0 87	   r007       =	$F087
    144  5000 ????	       f0 88	   r008       =	$F088
    145  5000 ????	       f0 89	   r009       =	$F089
    146  5000 ????	       f0 8a	   r010       =	$F08A
    147  5000 ????	       f0 8b	   r011       =	$F08B
    148  5000 ????	       f0 8c	   r012       =	$F08C
    149  5000 ????	       f0 8d	   r013       =	$F08D
    150  5000 ????	       f0 8e	   r014       =	$F08E
    151  5000 ????	       f0 8f	   r015       =	$F08F
    152  5000 ????	       f0 90	   r016       =	$F090
    153  5000 ????	       f0 91	   r017       =	$F091
    154  5000 ????	       f0 92	   r018       =	$F092
    155  5000 ????	       f0 93	   r019       =	$F093
    156  5000 ????	       f0 94	   r020       =	$F094
    157  5000 ????	       f0 95	   r021       =	$F095
    158  5000 ????	       f0 96	   r022       =	$F096
    159  5000 ????	       f0 97	   r023       =	$F097
    160  5000 ????	       f0 98	   r024       =	$F098
    161  5000 ????	       f0 99	   r025       =	$F099
    162  5000 ????	       f0 9a	   r026       =	$F09A
    163  5000 ????	       f0 9b	   r027       =	$F09B
    164  5000 ????	       f0 9c	   r028       =	$F09C
    165  5000 ????	       f0 9d	   r029       =	$F09D
    166  5000 ????	       f0 9e	   r030       =	$F09E
    167  5000 ????	       f0 9f	   r031       =	$F09F
    168  5000 ????	       f0 a0	   r032       =	$F0A0
    169  5000 ????	       f0 a1	   r033       =	$F0A1
    170  5000 ????	       f0 a2	   r034       =	$F0A2
    171  5000 ????	       f0 a3	   r035       =	$F0A3
    172  5000 ????	       f0 a4	   r036       =	$F0A4
    173  5000 ????	       f0 a5	   r037       =	$F0A5
    174  5000 ????	       f0 a6	   r038       =	$F0A6
    175  5000 ????	       f0 a7	   r039       =	$F0A7
    176  5000 ????	       f0 a8	   r040       =	$F0A8
    177  5000 ????	       f0 a9	   r041       =	$F0A9
    178  5000 ????	       f0 aa	   r042       =	$F0AA
    179  5000 ????	       f0 ab	   r043       =	$F0AB
    180  5000 ????	       f0 ac	   r044       =	$F0AC
    181  5000 ????	       f0 ad	   r045       =	$F0AD
    182  5000 ????	       f0 ae	   r046       =	$F0AE
    183  5000 ????	       f0 af	   r047       =	$F0AF
    184  5000 ????	       f0 b0	   r048       =	$F0B0
    185  5000 ????	       f0 b1	   r049       =	$F0B1
    186  5000 ????	       f0 b2	   r050       =	$F0B2
    187  5000 ????	       f0 b3	   r051       =	$F0B3
    188  5000 ????	       f0 b4	   r052       =	$F0B4
    189  5000 ????	       f0 b5	   r053       =	$F0B5
    190  5000 ????	       f0 b6	   r054       =	$F0B6
    191  5000 ????	       f0 b7	   r055       =	$F0B7
    192  5000 ????	       f0 b8	   r056       =	$F0B8
    193  5000 ????	       f0 b9	   r057       =	$F0B9
    194  5000 ????	       f0 ba	   r058       =	$F0BA
    195  5000 ????	       f0 bb	   r059       =	$F0BB
    196  5000 ????	       f0 bc	   r060       =	$F0BC
    197  5000 ????	       f0 bd	   r061       =	$F0BD
    198  5000 ????	       f0 be	   r062       =	$F0BE
    199  5000 ????	       f0 bf	   r063       =	$F0BF
    200  5000 ????	       f0 c0	   r064       =	$F0C0
    201  5000 ????	       f0 c1	   r065       =	$F0C1
    202  5000 ????	       f0 c2	   r066       =	$F0C2
    203  5000 ????	       f0 c3	   r067       =	$F0C3
    204  5000 ????	       f0 c4	   r068       =	$F0C4
    205  5000 ????	       f0 c5	   r069       =	$F0C5
    206  5000 ????	       f0 c6	   r070       =	$F0C6
    207  5000 ????	       f0 c7	   r071       =	$F0C7
    208  5000 ????	       f0 c8	   r072       =	$F0C8
    209  5000 ????	       f0 c9	   r073       =	$F0C9
    210  5000 ????	       f0 ca	   r074       =	$F0CA
    211  5000 ????	       f0 cb	   r075       =	$F0CB
    212  5000 ????	       f0 cc	   r076       =	$F0CC
    213  5000 ????	       f0 cd	   r077       =	$F0CD
    214  5000 ????	       f0 ce	   r078       =	$F0CE
    215  5000 ????	       f0 cf	   r079       =	$F0CF
    216  5000 ????	       f0 d0	   r080       =	$F0D0
    217  5000 ????	       f0 d1	   r081       =	$F0D1
    218  5000 ????	       f0 d2	   r082       =	$F0D2
    219  5000 ????	       f0 d3	   r083       =	$F0D3
    220  5000 ????	       f0 d4	   r084       =	$F0D4
    221  5000 ????	       f0 d5	   r085       =	$F0D5
    222  5000 ????	       f0 d6	   r086       =	$F0D6
    223  5000 ????	       f0 d7	   r087       =	$F0D7
    224  5000 ????	       f0 d8	   r088       =	$F0D8
    225  5000 ????	       f0 d9	   r089       =	$F0D9
    226  5000 ????	       f0 da	   r090       =	$F0DA
    227  5000 ????	       f0 db	   r091       =	$F0DB
    228  5000 ????	       f0 dc	   r092       =	$F0DC
    229  5000 ????	       f0 dd	   r093       =	$F0DD
    230  5000 ????	       f0 de	   r094       =	$F0DE
    231  5000 ????	       f0 df	   r095       =	$F0DF
    232  5000 ????	       f0 e0	   r096       =	$F0E0
    233  5000 ????	       f0 e1	   r097       =	$F0E1
    234  5000 ????	       f0 e2	   r098       =	$F0E2
    235  5000 ????	       f0 e3	   r099       =	$F0E3
    236  5000 ????	       f0 e4	   r100       =	$F0E4
    237  5000 ????	       f0 e5	   r101       =	$F0E5
    238  5000 ????	       f0 e6	   r102       =	$F0E6
    239  5000 ????	       f0 e7	   r103       =	$F0E7
    240  5000 ????	       f0 e8	   r104       =	$F0E8
    241  5000 ????	       f0 e9	   r105       =	$F0E9
    242  5000 ????	       f0 ea	   r106       =	$F0EA
    243  5000 ????	       f0 eb	   r107       =	$F0EB
    244  5000 ????	       f0 ec	   r108       =	$F0EC
    245  5000 ????	       f0 ed	   r109       =	$F0ED
    246  5000 ????	       f0 ee	   r110       =	$F0EE
    247  5000 ????	       f0 ef	   r111       =	$F0EF
    248  5000 ????	       f0 f0	   r112       =	$F0F0
    249  5000 ????	       f0 f1	   r113       =	$F0F1
    250  5000 ????	       f0 f2	   r114       =	$F0F2
    251  5000 ????	       f0 f3	   r115       =	$F0F3
    252  5000 ????	       f0 f4	   r116       =	$F0F4
    253  5000 ????	       f0 f5	   r117       =	$F0F5
    254  5000 ????	       f0 f6	   r118       =	$F0F6
    255  5000 ????	       f0 f7	   r119       =	$F0F7
    256  5000 ????	       f0 f8	   r120       =	$F0F8
    257  5000 ????	       f0 f9	   r121       =	$F0F9
    258  5000 ????	       f0 fa	   r122       =	$F0FA
    259  5000 ????	       f0 fb	   r123       =	$F0FB
    260  5000 ????	       f0 fc	   r124       =	$F0FC
    261  5000 ????	       f0 fd	   r125       =	$F0FD
    262  5000 ????	       f0 fe	   r126       =	$F0FE
    263  5000 ????	       f0 ff	   r127       =	$F0FF
------- FILE 2600basic.h
    201  5000 ????			  -	      else
    202  5000 ????			  -playfieldbase =	$A4
    203  5000 ????				      endif
    204  5000 ????
    205  5000 ????				      ifnconst	pfhalfwidth
    206  5000 ????	       00 04	   pfwidth    =	4
    207  5000 ????	       00 0e	   PF1L       =	PF1
    208  5000 ????	       00 0f	   PF2L       =	PF2
    209  5000 ????	       00 0e	   PF1R       =	PF1
    210  5000 ????	       00 0f	   PF2R       =	PF2
    211  5000 ????	       00 00	   pfadjust   =	0
    212  5000 ????			  -	      else
    213  5000 ????			  -pfwidth    =	2
    214  5000 ????			  -	      ifconst	pfcenter
    215  5000 ????			  -PF1L       =	$3F	; no effect
    216  5000 ????			  -PF2L       =	PF2
    217  5000 ????			  -PF1R       =	$3F
    218  5000 ????			  -PF2R       =	PF2	; no effect
    219  5000 ????			  -pfadjust   =	1
    220  5000 ????			  -	      else
    221  5000 ????			  -PF1L       =	PF1
    222  5000 ????			  -PF2L       =	PF2
    223  5000 ????			  -PF1R       =	$3F	; no effect
    224  5000 ????			  -PF2R       =	$3F	; no effect
    225  5000 ????			  -pfadjust   =	0
    226  5000 ????			  -	      endif
    227  5000 ????				      endif
    228  5000 ????
    229  5000 ????						; define playfield start based on height
    230  5000 ????			  -	      ifnconst	pfres
    231  5000 ????			  -playfield  =	playfieldbase
    232  5000 ????				      else
    233  5000 ????	       10 f0	   playfield  =	playfieldbase-(pfres-12*(4/pfwidth))*pfwidth
    234  5000 ????				      endif
------- FILE d:\Firmaplus\Firmaplus_intern\Atari\PlusROM\Projekte-batariBasic\CaveApocalypse\C.A.V.E. Apocalypse.bas.asm
------- FILE 2600basic_variable_redefs.h LEVEL 2 PASS 3
      0  5000 ????				      include	"2600basic_variable_redefs.h"
      1  5000 ????						; This file contains variable mapping and other information for the current project.
      2  5000 ????
      3  5000 ????	       00 fc	   text_strings_length =	.skipL0633-text_strings
      4  5000 ????
      5  5000 ????	       00 23	   bscode_length =	35
      6  5000 ????	       00 b2	   _SD_Music01 =	var14
      7  5000 ????	       00 1d	   _SD_Touch_Enemy_length =	.skipL0591-_SD_Touch_Enemy
      8  5000 ????
      9  5000 ????	       00 21	   _SD_Shoot_Enemy_length =	.skipL0590-_SD_Shoot_Enemy
     10  5000 ????
     11  5000 ????	       00 45	   _SD_Shoot_Miss_length =	.skipL0589-_SD_Shoot_Miss
     12  5000 ????
     13  5000 ????	       00 35	   _SD_Shot_Wall_length =	.skipL0588-_SD_Shot_Wall
     14  5000 ????
     15  5000 ????	       f0 5f	   w_Bit0_room_type_top =	w_BitOp_room_type
     16  5000 ????
     17  5000 ????	       f0 df	   r_Bit0_room_type_top =	r_BitOp_room_type
     18  5000 ????
     19  5000 ????	       f0 6f	   w_extra_wall_startpos_2_y =	w111
     20  5000 ????
     21  5000 ????	       f0 ef	   r_extra_wall_startpos_2_y =	r111
     22  5000 ????
     23  5000 ????	       f0 6e	   w_extra_wall_startpos_2_x =	w110
     24  5000 ????
     25  5000 ????	       f0 ee	   r_extra_wall_startpos_2_x =	r110
     26  5000 ????
     27  5000 ????	       f0 6d	   w_extra_wall_startpos_1_y =	w109
     28  5000 ????
     29  5000 ????	       f0 ed	   r_extra_wall_startpos_1_y =	r109
     30  5000 ????
     31  5000 ????	       f0 6c	   w_extra_wall_startpos_1_x =	w108
     32  5000 ????
     33  5000 ????	       f0 ec	   r_extra_wall_startpos_1_x =	r108
     34  5000 ????
     35  5000 ????	       f0 6b	   w_extra_wall_height =	w107
     36  5000 ????
     37  5000 ????	       f0 eb	   r_extra_wall_height =	r107
     38  5000 ????
     39  5000 ????	       f0 6a	   w_extra_wall_width =	w106
     40  5000 ????
     41  5000 ????	       f0 ea	   r_extra_wall_width =	r106
     42  5000 ????
     43  5000 ????	       f0 69	   w_extra_wall_type_and_range =	w105
     44  5000 ????
     45  5000 ????	       f0 e9	   r_extra_wall_type_and_range =	r105
     46  5000 ????
     47  5000 ????	       f0 68	   w_roommate_startpos_y =	w104
     48  5000 ????
     49  5000 ????	       f0 e8	   r_roommate_startpos_y =	r104
     50  5000 ????
     51  5000 ????	       f0 67	   w_roommate_startpos_x =	w103
     52  5000 ????
     53  5000 ????	       f0 e7	   r_roommate_startpos_x =	r103
     54  5000 ????
     55  5000 ????	       f0 66	   w_roommate_type_and_range =	w102
     56  5000 ????
     57  5000 ????	       f0 e6	   r_roommate_type_and_range =	r102
     58  5000 ????
     59  5000 ????	       f0 65	   w_room_color_bottom =	w101
     60  5000 ????
     61  5000 ????	       f0 e5	   r_room_color_bottom =	r101
     62  5000 ????
     63  5000 ????	       f0 64	   w_room_color_waste4 =	w100
     64  5000 ????
     65  5000 ????	       f0 e4	   r_room_color_waste3 =	r100
     66  5000 ????
     67  5000 ????	       f0 63	   w_room_color_waste2 =	w099
     68  5000 ????
     69  5000 ????	       f0 e3	   r_room_color_waste2 =	r099
     70  5000 ????
     71  5000 ????	       f0 62	   w_room_color_waste1 =	w098
     72  5000 ????
     73  5000 ????	       f0 e2	   r_room_color_waste1 =	r098
     74  5000 ????
     75  5000 ????	       f0 61	   w_room_color_middle =	w097
     76  5000 ????
     77  5000 ????	       f0 e1	   r_room_color_middle =	r097
     78  5000 ????
     79  5000 ????	       f0 60	   w_room_color_top =	w096
     80  5000 ????
     81  5000 ????	       f0 e0	   r_room_color_top =	r096
     82  5000 ????
     83  5000 ????	       f0 5f	   w_BitOp_room_type =	w095
     84  5000 ????
     85  5000 ????	       f0 df	   r_BitOp_room_type =	r095
     86  5000 ????
     87  5000 ????	       f0 5e	   w_men_to_rescue_in_this_level =	w094
     88  5000 ????
     89  5000 ????	       f0 de	   r_men_to_rescue_in_this_level =	r094
     90  5000 ????
     91  5000 ????	       f0 5d	   w_level_bonus_bcd_points =	w093
     92  5000 ????
     93  5000 ????	       f0 dd	   r_level_bonus_bcd_points =	r093
     94  5000 ????
     95  5000 ????	       f0 5d	   w_room_definition_start =	w093
     96  5000 ????
     97  5000 ????	       00 d3	   Game_Status =	var47
     98  5000 ????
     99  5000 ????	       00 b4	   next_shoot_rand =	var16
    100  5000 ????
    101  5000 ????	       00 b1	   bonus_bcd_counter =	var13
    102  5000 ????
    103  5000 ????	       00 b0	   TextIndex  =	var12
    104  5000 ????
    105  5000 ????	       00 b0	   men_to_rescue =	var12
    106  5000 ????
    107  5000 ????	       00 af	   ball_shoot_y =	var11
    108  5000 ????
    109  5000 ????	       00 ae	   ball_shoot_x =	var10
    110  5000 ????
    111  5000 ????	       00 ad	   has_private_levels =	var9
    112  5000 ????
    113  5000 ????	       00 ac	   max_priv_level_bcd3 =	var8
    114  5000 ????
    115  5000 ????	       00 ab	   max_priv_level_bcd2 =	var7
    116  5000 ????
    117  5000 ????	       00 aa	   max_priv_level_bcd1 =	var6
    118  5000 ????
    119  5000 ????	       00 a9	   max_pub_level_bcd3 =	var5
    120  5000 ????
    121  5000 ????	       00 a8	   max_pub_level_bcd2 =	var4
    122  5000 ????
    123  5000 ????	       00 a7	   max_pub_level_bcd1 =	var3
    124  5000 ????
    125  5000 ????	       00 a6	   gamenumber =	var2
    126  5000 ????
    127  5000 ????	       00 a5	   new_room_player1x =	var1
    128  5000 ????
    129  5000 ????	       00 a4	   new_room_player1y =	var0
    130  5000 ????
    131  5000 ????	       00 ed	   rand16     =	z
    132  5000 ????
    133  5000 ????	       00 ec	   _Bit7_FireB_Restrainer =	y
    134  5000 ????
    135  5000 ????	       00 ec	   _Bit6_Flip_P1 =	y
    136  5000 ????
    137  5000 ????	       00 ec	   _Bit5_Request_Pending =	y
    138  5000 ????
    139  5000 ????	       00 ec	   _Bit4_Wall_Dir =	y
    140  5000 ????
    141  5000 ????	       00 ec	   _Bit3_Safe_Point_reached =	y
    142  5000 ????
    143  5000 ????	       00 ec	   _Bit2_roommate_Dir =	y
    144  5000 ????
    145  5000 ????	       00 ec	   _Bit_Game_State =	y
    146  5000 ????
    147  5000 ????	       00 86	   P1y_position =	player1y
    148  5000 ????	       00 e9	   P1y_velocity =	v
    149  5000 ????	       00 91	   M0y_position =	missile0y
    150  5000 ????	       00 e6	   M0y_velocity =	s
    151  5000 ????	       00 af	   Bally_position =	ball_shoot_y
    152  5000 ????	       00 e3	   Bally_velocity =	p
    153  5000 ????	       00 e2	   _Ch1_Duration =	o
    154  5000 ????
    155  5000 ????	       00 e1	   Safe_Point_P1_y =	n
    156  5000 ????
    157  5000 ????	       00 e0	   Safe_Point_P1_x =	m
    158  5000 ????
    159  5000 ????	       00 df	   _Bit1_Safe_Point_P1_Flip =	l
    160  5000 ????
    161  5000 ????	       00 df	   _Bit0_New_Room_P1_Flip =	l
    162  5000 ????
    163  5000 ????	       00 df	   _BitOp_Flip_positions =	l
    164  5000 ????
    165  5000 ????	       00 de	   roommate_type =	k
    166  5000 ????
    167  5000 ????	       00 dd	   roommate_move_x =	j
    168  5000 ????
    169  5000 ????	       00 dc	   extra_wall_move_x =	i
    170  5000 ????
    171  5000 ????	       00 db	   _Ch0_Counter =	h
    172  5000 ????
    173  5000 ????	       00 da	   _Ch0_Duration =	g
    174  5000 ????
    175  5000 ????	       00 d9	   _Ch0_Sound =	f
    176  5000 ????
    177  5000 ????	       00 d8	   _Bit3_P1_Dir_Right =	e
    178  5000 ????
    179  5000 ????	       00 d8	   _Bit2_P1_Dir_Left =	e
    180  5000 ????
    181  5000 ????	       00 d8	   _Bit1_P1_Dir_Down =	e
    182  5000 ????
    183  5000 ????	       00 d8	   _Bit0_P1_Dir_Up =	e
    184  5000 ????
    185  5000 ????	       00 d8	   _BitOp_P1_Dir =	e
    186  5000 ????
    187  5000 ????	       00 d7	   _Bit3_M0_Dir_Right =	d
    188  5000 ????
    189  5000 ????	       00 d7	   _Bit2_M0_Dir_Left =	d
    190  5000 ????
    191  5000 ????	       00 d7	   _Bit1_M0_Dir_Down =	d
    192  5000 ????
    193  5000 ????	       00 d7	   _Bit0_M0_Dir_Up =	d
    194  5000 ????
    195  5000 ????	       00 d7	   _BitOp_M0_Dir =	d
    196  5000 ????
    197  5000 ????	       00 d6	   _Bit3_Ball_Shot_Dir_Right2 =	c
    198  5000 ????
    199  5000 ????	       00 d6	   _Bit2_Ball_Shot_Dir_Right1 =	c
    200  5000 ????
    201  5000 ????	       00 d6	   _Bit1_Ball_Shot_Dir_Left2 =	c
    202  5000 ????
    203  5000 ????	       00 d6	   _Bit0_Ball_Shot_Dir_Left1 =	c
    204  5000 ????
    205  5000 ????	       00 d6	   _BitOp_Ball_Shot_Dir =	c
    206  5000 ????
    207  5000 ????	       00 d5	   frame_counter =	b
    208  5000 ????
    209  5000 ????	       00 d4	   delay_counter =	a
    210  5000 ????
    211  5000 ????	       00 95	   _sc3       =	score + 2
    212  5000 ????
    213  5000 ????	       00 94	   _sc2       =	score + 1
    214  5000 ????
    215  5000 ????	       00 93	   _sc1       =	score
    216  5000 ????
    217  5000 ????	       00 fe	   _FE	      =	$FE
    218  5000 ????
    219  5000 ????	       00 fc	   _FC	      =	$FC
    220  5000 ????
    221  5000 ????	       00 fa	   _FA	      =	$FA
    222  5000 ????
    223  5000 ????	       00 f8	   _F8	      =	$F8
    224  5000 ????
    225  5000 ????	       00 f6	   _F6	      =	$F6
    226  5000 ????
    227  5000 ????	       00 f4	   _F4	      =	$F4
    228  5000 ????
    229  5000 ????	       00 f2	   _F2	      =	$F2
    230  5000 ????
    231  5000 ????	       00 f0	   _F0	      =	$F0
    232  5000 ????
    233  5000 ????	       00 ee	   _EE	      =	$EE
    234  5000 ????
    235  5000 ????	       00 ec	   _EC	      =	$EC
    236  5000 ????
    237  5000 ????	       00 ea	   _EA	      =	$EA
    238  5000 ????
    239  5000 ????	       00 e8	   _E8	      =	$E8
    240  5000 ????
    241  5000 ????	       00 e6	   _E6	      =	$E6
    242  5000 ????
    243  5000 ????	       00 e4	   _E4	      =	$E4
    244  5000 ????
    245  5000 ????	       00 e2	   _E2	      =	$E2
    246  5000 ????
    247  5000 ????	       00 e0	   _E0	      =	$E0
    248  5000 ????
    249  5000 ????	       00 de	   _DE	      =	$DE
    250  5000 ????
    251  5000 ????	       00 dc	   _DC	      =	$DC
    252  5000 ????
    253  5000 ????	       00 da	   _DA	      =	$DA
    254  5000 ????
    255  5000 ????	       00 d8	   _D8	      =	$D8
    256  5000 ????
    257  5000 ????	       00 d6	   _D6	      =	$D6
    258  5000 ????
    259  5000 ????	       00 d4	   _D4	      =	$D4
    260  5000 ????
    261  5000 ????	       00 d2	   _D2	      =	$D2
    262  5000 ????
    263  5000 ????	       00 d0	   _D0	      =	$D0
    264  5000 ????
    265  5000 ????	       00 ce	   _CE	      =	$CE
    266  5000 ????
    267  5000 ????	       00 cc	   _CC	      =	$CC
    268  5000 ????
    269  5000 ????	       00 ca	   _CA	      =	$CA
    270  5000 ????
    271  5000 ????	       00 c8	   _C8	      =	$C8
    272  5000 ????
    273  5000 ????	       00 c6	   _C6	      =	$C6
    274  5000 ????
    275  5000 ????	       00 c4	   _C4	      =	$C4
    276  5000 ????
    277  5000 ????	       00 c2	   _C2	      =	$C2
    278  5000 ????
    279  5000 ????	       00 c0	   _C0	      =	$C0
    280  5000 ????
    281  5000 ????	       00 be	   _BE	      =	$BE
    282  5000 ????
    283  5000 ????	       00 bc	   _BC	      =	$BC
    284  5000 ????
    285  5000 ????	       00 ba	   _BA	      =	$BA
    286  5000 ????
    287  5000 ????	       00 b8	   _B8	      =	$B8
    288  5000 ????
    289  5000 ????	       00 b6	   _B6	      =	$B6
    290  5000 ????
    291  5000 ????	       00 b4	   _B4	      =	$B4
    292  5000 ????
    293  5000 ????	       00 b2	   _B2	      =	$B2
    294  5000 ????
    295  5000 ????	       00 b0	   _B0	      =	$B0
    296  5000 ????
    297  5000 ????	       00 ae	   _AE	      =	$AE
    298  5000 ????
    299  5000 ????	       00 ac	   _AC	      =	$AC
    300  5000 ????
    301  5000 ????	       00 aa	   _AA	      =	$AA
    302  5000 ????
    303  5000 ????	       00 a8	   _A8	      =	$A8
    304  5000 ????
    305  5000 ????	       00 a6	   _A6	      =	$A6
    306  5000 ????
    307  5000 ????	       00 a4	   _A4	      =	$A4
    308  5000 ????
    309  5000 ????	       00 a2	   _A2	      =	$A2
    310  5000 ????
    311  5000 ????	       00 a0	   _A0	      =	$A0
    312  5000 ????
    313  5000 ????	       00 9e	   _9E	      =	$9E
    314  5000 ????
    315  5000 ????	       00 9c	   _9C	      =	$9C
    316  5000 ????
    317  5000 ????	       00 9a	   _9A	      =	$9A
    318  5000 ????
    319  5000 ????	       00 98	   _98	      =	$98
    320  5000 ????
    321  5000 ????	       00 96	   _96	      =	$96
    322  5000 ????
    323  5000 ????	       00 94	   _94	      =	$94
    324  5000 ????
    325  5000 ????	       00 92	   _92	      =	$92
    326  5000 ????
    327  5000 ????	       00 90	   _90	      =	$90
    328  5000 ????
    329  5000 ????	       00 8e	   _8E	      =	$8E
    330  5000 ????
    331  5000 ????	       00 8c	   _8C	      =	$8C
    332  5000 ????
    333  5000 ????	       00 8a	   _8A	      =	$8A
    334  5000 ????
    335  5000 ????	       00 88	   _88	      =	$88
    336  5000 ????
    337  5000 ????	       00 86	   _86	      =	$86
    338  5000 ????
    339  5000 ????	       00 84	   _84	      =	$84
    340  5000 ????
    341  5000 ????	       00 82	   _82	      =	$82
    342  5000 ????
    343  5000 ????	       00 80	   _80	      =	$80
    344  5000 ????
    345  5000 ????	       00 7e	   _7E	      =	$7E
    346  5000 ????
    347  5000 ????	       00 7c	   _7C	      =	$7C
    348  5000 ????
    349  5000 ????	       00 7a	   _7A	      =	$7A
    350  5000 ????
    351  5000 ????	       00 78	   _78	      =	$78
    352  5000 ????
    353  5000 ????	       00 76	   _76	      =	$76
    354  5000 ????
    355  5000 ????	       00 74	   _74	      =	$74
    356  5000 ????
    357  5000 ????	       00 72	   _72	      =	$72
    358  5000 ????
    359  5000 ????	       00 70	   _70	      =	$70
    360  5000 ????
    361  5000 ????	       00 6e	   _6E	      =	$6E
    362  5000 ????
    363  5000 ????	       00 6c	   _6C	      =	$6C
    364  5000 ????
    365  5000 ????	       00 6a	   _6A	      =	$6A
    366  5000 ????
    367  5000 ????	       00 68	   _68	      =	$68
    368  5000 ????
    369  5000 ????	       00 66	   _66	      =	$66
    370  5000 ????
    371  5000 ????	       00 64	   _64	      =	$64
    372  5000 ????
    373  5000 ????	       00 62	   _62	      =	$62
    374  5000 ????
    375  5000 ????	       00 60	   _60	      =	$60
    376  5000 ????
    377  5000 ????	       00 5e	   _5E	      =	$5E
    378  5000 ????
    379  5000 ????	       00 5c	   _5C	      =	$5C
    380  5000 ????
    381  5000 ????	       00 5a	   _5A	      =	$5A
    382  5000 ????
    383  5000 ????	       00 58	   _58	      =	$58
    384  5000 ????
    385  5000 ????	       00 56	   _56	      =	$56
    386  5000 ????
    387  5000 ????	       00 54	   _54	      =	$54
    388  5000 ????
    389  5000 ????	       00 52	   _52	      =	$52
    390  5000 ????
    391  5000 ????	       00 50	   _50	      =	$50
    392  5000 ????
    393  5000 ????	       00 4e	   _4E	      =	$4E
    394  5000 ????
    395  5000 ????	       00 4c	   _4C	      =	$4C
    396  5000 ????
    397  5000 ????	       00 4a	   _4A	      =	$4A
    398  5000 ????
    399  5000 ????	       00 48	   _48	      =	$48
    400  5000 ????
    401  5000 ????	       00 46	   _46	      =	$46
    402  5000 ????
    403  5000 ????	       00 44	   _44	      =	$44
    404  5000 ????
    405  5000 ????	       00 42	   _42	      =	$42
    406  5000 ????
    407  5000 ????	       00 40	   _40	      =	$40
    408  5000 ????
    409  5000 ????	       00 3e	   _3E	      =	$3E
    410  5000 ????
    411  5000 ????	       00 3c	   _3C	      =	$3C
    412  5000 ????
    413  5000 ????	       00 3a	   _3A	      =	$3A
    414  5000 ????
    415  5000 ????	       00 38	   _38	      =	$38
    416  5000 ????
    417  5000 ????	       00 36	   _36	      =	$36
    418  5000 ????
    419  5000 ????	       00 34	   _34	      =	$34
    420  5000 ????
    421  5000 ????	       00 32	   _32	      =	$32
    422  5000 ????
    423  5000 ????	       00 30	   _30	      =	$30
    424  5000 ????
    425  5000 ????	       00 2e	   _2E	      =	$2E
    426  5000 ????
    427  5000 ????	       00 2c	   _2C	      =	$2C
    428  5000 ????
    429  5000 ????	       00 2a	   _2A	      =	$2A
    430  5000 ????
    431  5000 ????	       00 28	   _28	      =	$28
    432  5000 ????
    433  5000 ????	       00 26	   _26	      =	$26
    434  5000 ????
    435  5000 ????	       00 24	   _24	      =	$24
    436  5000 ????
    437  5000 ????	       00 22	   _22	      =	$22
    438  5000 ????
    439  5000 ????	       00 20	   _20	      =	$20
    440  5000 ????
    441  5000 ????	       00 1e	   _1E	      =	$1E
    442  5000 ????
    443  5000 ????	       00 1c	   _1C	      =	$1C
    444  5000 ????
    445  5000 ????	       00 1a	   _1A	      =	$1A
    446  5000 ????
    447  5000 ????	       00 18	   _18	      =	$18
    448  5000 ????
    449  5000 ????	       00 16	   _16	      =	$16
    450  5000 ????
    451  5000 ????	       00 14	   _14	      =	$14
    452  5000 ????
    453  5000 ????	       00 12	   _12	      =	$12
    454  5000 ????
    455  5000 ????	       00 10	   _10	      =	$10
    456  5000 ????
    457  5000 ????	       00 0e	   _0E	      =	$0E
    458  5000 ????
    459  5000 ????	       00 0c	   _0C	      =	$0C
    460  5000 ????
    461  5000 ????	       00 0a	   _0A	      =	$0A
    462  5000 ????
    463  5000 ????	       00 08	   _08	      =	$08
    464  5000 ????
    465  5000 ????	       00 06	   _06	      =	$06
    466  5000 ????
    467  5000 ????	       00 04	   _04	      =	$04
    468  5000 ????
    469  5000 ????	       00 02	   _02	      =	$02
    470  5000 ????
    471  5000 ????	       00 00	   _00	      =	$00
    472  5000 ????
    473  5000 ????	       00 09	   req_load_menu =	9
    474  5000 ????
    475  5000 ????	       00 08	   req_safe_point =	8
    476  5000 ????
    477  5000 ????	       00 07	   req_level_reset =	7
    478  5000 ????
    479  5000 ????	       00 06	   req_move_down =	6
    480  5000 ????
    481  5000 ????	       00 05	   req_move_right =	5
    482  5000 ????
    483  5000 ????	       00 04	   req_move_up =	4
    484  5000 ????
    485  5000 ????	       00 03	   req_move_left =	3
    486  5000 ????
    487  5000 ????	       00 02	   req_game_over =	2
    488  5000 ????
    489  5000 ????	       00 01	   req_level_up =	1
    490  5000 ????
    491  5000 ????	       00 00	   req_load   =	0
    492  5000 ????
    493  5000 ????	       00 03	   game_state_heli_explosion =	3
    494  5000 ????
    495  5000 ????	       00 02	   game_state_level_finished =	2
    496  5000 ????
    497  5000 ????	       00 01	   game_state_game_over =	1
    498  5000 ????
    499  5000 ????	       00 00	   game_state_run =	0
    500  5000 ????
    501  5000 ????	       00 06	   response_menu_size =	6
    502  5000 ????
    503  5000 ????	       00 1e	   response_size_minus_1 =	30
    504  5000 ????
    505  5000 ????	       00 94	   _M_Edge_Right =	148
    506  5000 ????
    507  5000 ????	       00 0e	   _M_Edge_Left =	14
    508  5000 ????
    509  5000 ????	       00 58	   _M_Edge_Bottom =	88
    510  5000 ????
    511  5000 ????	       00 02	   _M_Edge_Top =	2
    512  5000 ????
    513  5000 ????	       00 4c	   player_max_y =	76
    514  5000 ????
    515  5000 ????	       00 02	   player_min_y =	2
    516  5000 ????
    517  5000 ????	       00 86	   player_max_x =	134
    518  5000 ????
    519  5000 ????	       00 0a	   player_min_x =	10
    520  5000 ????
    521  5000 ????	       00 08	   textbkcolor =	$08
    522  5000 ????
    523  5000 ????	       00 08	   scorebkcolor =	$08
    524  5000 ????
    525  5000 ????	       00 01	   pfscore    =	1
    526  5000 ????
    527  5000 ????	       00 04	   pfres      =	4
    528  5000 ????
    529  5000 ????	       00 01	   superchip  =	1
    530  5000 ????	       00 03	   bs_mask    =	3
    531  5000 ????	       00 10	   bankswitch =	16
    532  5000 ????	       1f f6	   bankswitch_hotspot =	$1FF6
    533  5000 ????	       00 01	   PFcolors   =	1
    534  5000 ????	       00 01	   player1colors =	1
------- FILE d:\Firmaplus\Firmaplus_intern\Atari\PlusROM\Projekte-batariBasic\CaveApocalypse\C.A.V.E. Apocalypse.bas.asm
      8  5000 ????				      ifconst	bankswitch
      9  5000 ????			  -	      if	bankswitch == 8
     10  5000 ????			  -	      ORG	$1000
     11  5000 ????			  -	      RORG	$D000
     12  5000 ????				      endif
     13  5000 ????				      if	bankswitch == 16
     14  1000					      ORG	$1000
     15  1000					      RORG	$9000
     16  1000					      endif
     17  1000				  -	      if	bankswitch == 32
     18  1000				  -	      ORG	$1000
     19  1000				  -	      RORG	$1000
     20  1000					      endif
     21  1000				  -	      if	bankswitch == 64
     22  1000				  -	      ORG	$1000
     23  1000				  -	      RORG	$1000
     24  1000					      endif
     25  1000				  -	      else
     26  1000				  -	      ORG	$F000
     27  1000					      endif
     28  1000					      repeat	256
     29  1000		       ff		      .byte.b	$ff
     28  1000					      repend
     29  1001		       ff		      .byte.b	$ff
     28  1001					      repend
     29  1002		       ff		      .byte.b	$ff
     28  1002					      repend
     29  1003		       ff		      .byte.b	$ff
     28  1003					      repend
     29  1004		       ff		      .byte.b	$ff
     28  1004					      repend
     29  1005		       ff		      .byte.b	$ff
     28  1005					      repend
     29  1006		       ff		      .byte.b	$ff
     28  1006					      repend
     29  1007		       ff		      .byte.b	$ff
     28  1007					      repend
     29  1008		       ff		      .byte.b	$ff
     28  1008					      repend
     29  1009		       ff		      .byte.b	$ff
     28  1009					      repend
     29  100a		       ff		      .byte.b	$ff
     28  100a					      repend
     29  100b		       ff		      .byte.b	$ff
     28  100b					      repend
     29  100c		       ff		      .byte.b	$ff
     28  100c					      repend
     29  100d		       ff		      .byte.b	$ff
     28  100d					      repend
     29  100e		       ff		      .byte.b	$ff
     28  100e					      repend
     29  100f		       ff		      .byte.b	$ff
     28  100f					      repend
     29  1010		       ff		      .byte.b	$ff
     28  1010					      repend
     29  1011		       ff		      .byte.b	$ff
     28  1011					      repend
     29  1012		       ff		      .byte.b	$ff
     28  1012					      repend
     29  1013		       ff		      .byte.b	$ff
     28  1013					      repend
     29  1014		       ff		      .byte.b	$ff
     28  1014					      repend
     29  1015		       ff		      .byte.b	$ff
     28  1015					      repend
     29  1016		       ff		      .byte.b	$ff
     28  1016					      repend
     29  1017		       ff		      .byte.b	$ff
     28  1017					      repend
     29  1018		       ff		      .byte.b	$ff
     28  1018					      repend
     29  1019		       ff		      .byte.b	$ff
     28  1019					      repend
     29  101a		       ff		      .byte.b	$ff
     28  101a					      repend
     29  101b		       ff		      .byte.b	$ff
     28  101b					      repend
     29  101c		       ff		      .byte.b	$ff
     28  101c					      repend
     29  101d		       ff		      .byte.b	$ff
     28  101d					      repend
     29  101e		       ff		      .byte.b	$ff
     28  101e					      repend
     29  101f		       ff		      .byte.b	$ff
     28  101f					      repend
     29  1020		       ff		      .byte.b	$ff
     28  1020					      repend
     29  1021		       ff		      .byte.b	$ff
     28  1021					      repend
     29  1022		       ff		      .byte.b	$ff
     28  1022					      repend
     29  1023		       ff		      .byte.b	$ff
     28  1023					      repend
     29  1024		       ff		      .byte.b	$ff
     28  1024					      repend
     29  1025		       ff		      .byte.b	$ff
     28  1025					      repend
     29  1026		       ff		      .byte.b	$ff
     28  1026					      repend
     29  1027		       ff		      .byte.b	$ff
     28  1027					      repend
     29  1028		       ff		      .byte.b	$ff
     28  1028					      repend
     29  1029		       ff		      .byte.b	$ff
     28  1029					      repend
     29  102a		       ff		      .byte.b	$ff
     28  102a					      repend
     29  102b		       ff		      .byte.b	$ff
     28  102b					      repend
     29  102c		       ff		      .byte.b	$ff
     28  102c					      repend
     29  102d		       ff		      .byte.b	$ff
     28  102d					      repend
     29  102e		       ff		      .byte.b	$ff
     28  102e					      repend
     29  102f		       ff		      .byte.b	$ff
     28  102f					      repend
     29  1030		       ff		      .byte.b	$ff
     28  1030					      repend
     29  1031		       ff		      .byte.b	$ff
     28  1031					      repend
     29  1032		       ff		      .byte.b	$ff
     28  1032					      repend
     29  1033		       ff		      .byte.b	$ff
     28  1033					      repend
     29  1034		       ff		      .byte.b	$ff
     28  1034					      repend
     29  1035		       ff		      .byte.b	$ff
     28  1035					      repend
     29  1036		       ff		      .byte.b	$ff
     28  1036					      repend
     29  1037		       ff		      .byte.b	$ff
     28  1037					      repend
     29  1038		       ff		      .byte.b	$ff
     28  1038					      repend
     29  1039		       ff		      .byte.b	$ff
     28  1039					      repend
     29  103a		       ff		      .byte.b	$ff
     28  103a					      repend
     29  103b		       ff		      .byte.b	$ff
     28  103b					      repend
     29  103c		       ff		      .byte.b	$ff
     28  103c					      repend
     29  103d		       ff		      .byte.b	$ff
     28  103d					      repend
     29  103e		       ff		      .byte.b	$ff
     28  103e					      repend
     29  103f		       ff		      .byte.b	$ff
     28  103f					      repend
     29  1040		       ff		      .byte.b	$ff
     28  1040					      repend
     29  1041		       ff		      .byte.b	$ff
     28  1041					      repend
     29  1042		       ff		      .byte.b	$ff
     28  1042					      repend
     29  1043		       ff		      .byte.b	$ff
     28  1043					      repend
     29  1044		       ff		      .byte.b	$ff
     28  1044					      repend
     29  1045		       ff		      .byte.b	$ff
     28  1045					      repend
     29  1046		       ff		      .byte.b	$ff
     28  1046					      repend
     29  1047		       ff		      .byte.b	$ff
     28  1047					      repend
     29  1048		       ff		      .byte.b	$ff
     28  1048					      repend
     29  1049		       ff		      .byte.b	$ff
     28  1049					      repend
     29  104a		       ff		      .byte.b	$ff
     28  104a					      repend
     29  104b		       ff		      .byte.b	$ff
     28  104b					      repend
     29  104c		       ff		      .byte.b	$ff
     28  104c					      repend
     29  104d		       ff		      .byte.b	$ff
     28  104d					      repend
     29  104e		       ff		      .byte.b	$ff
     28  104e					      repend
     29  104f		       ff		      .byte.b	$ff
     28  104f					      repend
     29  1050		       ff		      .byte.b	$ff
     28  1050					      repend
     29  1051		       ff		      .byte.b	$ff
     28  1051					      repend
     29  1052		       ff		      .byte.b	$ff
     28  1052					      repend
     29  1053		       ff		      .byte.b	$ff
     28  1053					      repend
     29  1054		       ff		      .byte.b	$ff
     28  1054					      repend
     29  1055		       ff		      .byte.b	$ff
     28  1055					      repend
     29  1056		       ff		      .byte.b	$ff
     28  1056					      repend
     29  1057		       ff		      .byte.b	$ff
     28  1057					      repend
     29  1058		       ff		      .byte.b	$ff
     28  1058					      repend
     29  1059		       ff		      .byte.b	$ff
     28  1059					      repend
     29  105a		       ff		      .byte.b	$ff
     28  105a					      repend
     29  105b		       ff		      .byte.b	$ff
     28  105b					      repend
     29  105c		       ff		      .byte.b	$ff
     28  105c					      repend
     29  105d		       ff		      .byte.b	$ff
     28  105d					      repend
     29  105e		       ff		      .byte.b	$ff
     28  105e					      repend
     29  105f		       ff		      .byte.b	$ff
     28  105f					      repend
     29  1060		       ff		      .byte.b	$ff
     28  1060					      repend
     29  1061		       ff		      .byte.b	$ff
     28  1061					      repend
     29  1062		       ff		      .byte.b	$ff
     28  1062					      repend
     29  1063		       ff		      .byte.b	$ff
     28  1063					      repend
     29  1064		       ff		      .byte.b	$ff
     28  1064					      repend
     29  1065		       ff		      .byte.b	$ff
     28  1065					      repend
     29  1066		       ff		      .byte.b	$ff
     28  1066					      repend
     29  1067		       ff		      .byte.b	$ff
     28  1067					      repend
     29  1068		       ff		      .byte.b	$ff
     28  1068					      repend
     29  1069		       ff		      .byte.b	$ff
     28  1069					      repend
     29  106a		       ff		      .byte.b	$ff
     28  106a					      repend
     29  106b		       ff		      .byte.b	$ff
     28  106b					      repend
     29  106c		       ff		      .byte.b	$ff
     28  106c					      repend
     29  106d		       ff		      .byte.b	$ff
     28  106d					      repend
     29  106e		       ff		      .byte.b	$ff
     28  106e					      repend
     29  106f		       ff		      .byte.b	$ff
     28  106f					      repend
     29  1070		       ff		      .byte.b	$ff
     28  1070					      repend
     29  1071		       ff		      .byte.b	$ff
     28  1071					      repend
     29  1072		       ff		      .byte.b	$ff
     28  1072					      repend
     29  1073		       ff		      .byte.b	$ff
     28  1073					      repend
     29  1074		       ff		      .byte.b	$ff
     28  1074					      repend
     29  1075		       ff		      .byte.b	$ff
     28  1075					      repend
     29  1076		       ff		      .byte.b	$ff
     28  1076					      repend
     29  1077		       ff		      .byte.b	$ff
     28  1077					      repend
     29  1078		       ff		      .byte.b	$ff
     28  1078					      repend
     29  1079		       ff		      .byte.b	$ff
     28  1079					      repend
     29  107a		       ff		      .byte.b	$ff
     28  107a					      repend
     29  107b		       ff		      .byte.b	$ff
     28  107b					      repend
     29  107c		       ff		      .byte.b	$ff
     28  107c					      repend
     29  107d		       ff		      .byte.b	$ff
     28  107d					      repend
     29  107e		       ff		      .byte.b	$ff
     28  107e					      repend
     29  107f		       ff		      .byte.b	$ff
     28  107f					      repend
     29  1080		       ff		      .byte.b	$ff
     28  1080					      repend
     29  1081		       ff		      .byte.b	$ff
     28  1081					      repend
     29  1082		       ff		      .byte.b	$ff
     28  1082					      repend
     29  1083		       ff		      .byte.b	$ff
     28  1083					      repend
     29  1084		       ff		      .byte.b	$ff
     28  1084					      repend
     29  1085		       ff		      .byte.b	$ff
     28  1085					      repend
     29  1086		       ff		      .byte.b	$ff
     28  1086					      repend
     29  1087		       ff		      .byte.b	$ff
     28  1087					      repend
     29  1088		       ff		      .byte.b	$ff
     28  1088					      repend
     29  1089		       ff		      .byte.b	$ff
     28  1089					      repend
     29  108a		       ff		      .byte.b	$ff
     28  108a					      repend
     29  108b		       ff		      .byte.b	$ff
     28  108b					      repend
     29  108c		       ff		      .byte.b	$ff
     28  108c					      repend
     29  108d		       ff		      .byte.b	$ff
     28  108d					      repend
     29  108e		       ff		      .byte.b	$ff
     28  108e					      repend
     29  108f		       ff		      .byte.b	$ff
     28  108f					      repend
     29  1090		       ff		      .byte.b	$ff
     28  1090					      repend
     29  1091		       ff		      .byte.b	$ff
     28  1091					      repend
     29  1092		       ff		      .byte.b	$ff
     28  1092					      repend
     29  1093		       ff		      .byte.b	$ff
     28  1093					      repend
     29  1094		       ff		      .byte.b	$ff
     28  1094					      repend
     29  1095		       ff		      .byte.b	$ff
     28  1095					      repend
     29  1096		       ff		      .byte.b	$ff
     28  1096					      repend
     29  1097		       ff		      .byte.b	$ff
     28  1097					      repend
     29  1098		       ff		      .byte.b	$ff
     28  1098					      repend
     29  1099		       ff		      .byte.b	$ff
     28  1099					      repend
     29  109a		       ff		      .byte.b	$ff
     28  109a					      repend
     29  109b		       ff		      .byte.b	$ff
     28  109b					      repend
     29  109c		       ff		      .byte.b	$ff
     28  109c					      repend
     29  109d		       ff		      .byte.b	$ff
     28  109d					      repend
     29  109e		       ff		      .byte.b	$ff
     28  109e					      repend
     29  109f		       ff		      .byte.b	$ff
     28  109f					      repend
     29  10a0		       ff		      .byte.b	$ff
     28  10a0					      repend
     29  10a1		       ff		      .byte.b	$ff
     28  10a1					      repend
     29  10a2		       ff		      .byte.b	$ff
     28  10a2					      repend
     29  10a3		       ff		      .byte.b	$ff
     28  10a3					      repend
     29  10a4		       ff		      .byte.b	$ff
     28  10a4					      repend
     29  10a5		       ff		      .byte.b	$ff
     28  10a5					      repend
     29  10a6		       ff		      .byte.b	$ff
     28  10a6					      repend
     29  10a7		       ff		      .byte.b	$ff
     28  10a7					      repend
     29  10a8		       ff		      .byte.b	$ff
     28  10a8					      repend
     29  10a9		       ff		      .byte.b	$ff
     28  10a9					      repend
     29  10aa		       ff		      .byte.b	$ff
     28  10aa					      repend
     29  10ab		       ff		      .byte.b	$ff
     28  10ab					      repend
     29  10ac		       ff		      .byte.b	$ff
     28  10ac					      repend
     29  10ad		       ff		      .byte.b	$ff
     28  10ad					      repend
     29  10ae		       ff		      .byte.b	$ff
     28  10ae					      repend
     29  10af		       ff		      .byte.b	$ff
     28  10af					      repend
     29  10b0		       ff		      .byte.b	$ff
     28  10b0					      repend
     29  10b1		       ff		      .byte.b	$ff
     28  10b1					      repend
     29  10b2		       ff		      .byte.b	$ff
     28  10b2					      repend
     29  10b3		       ff		      .byte.b	$ff
     28  10b3					      repend
     29  10b4		       ff		      .byte.b	$ff
     28  10b4					      repend
     29  10b5		       ff		      .byte.b	$ff
     28  10b5					      repend
     29  10b6		       ff		      .byte.b	$ff
     28  10b6					      repend
     29  10b7		       ff		      .byte.b	$ff
     28  10b7					      repend
     29  10b8		       ff		      .byte.b	$ff
     28  10b8					      repend
     29  10b9		       ff		      .byte.b	$ff
     28  10b9					      repend
     29  10ba		       ff		      .byte.b	$ff
     28  10ba					      repend
     29  10bb		       ff		      .byte.b	$ff
     28  10bb					      repend
     29  10bc		       ff		      .byte.b	$ff
     28  10bc					      repend
     29  10bd		       ff		      .byte.b	$ff
     28  10bd					      repend
     29  10be		       ff		      .byte.b	$ff
     28  10be					      repend
     29  10bf		       ff		      .byte.b	$ff
     28  10bf					      repend
     29  10c0		       ff		      .byte.b	$ff
     28  10c0					      repend
     29  10c1		       ff		      .byte.b	$ff
     28  10c1					      repend
     29  10c2		       ff		      .byte.b	$ff
     28  10c2					      repend
     29  10c3		       ff		      .byte.b	$ff
     28  10c3					      repend
     29  10c4		       ff		      .byte.b	$ff
     28  10c4					      repend
     29  10c5		       ff		      .byte.b	$ff
     28  10c5					      repend
     29  10c6		       ff		      .byte.b	$ff
     28  10c6					      repend
     29  10c7		       ff		      .byte.b	$ff
     28  10c7					      repend
     29  10c8		       ff		      .byte.b	$ff
     28  10c8					      repend
     29  10c9		       ff		      .byte.b	$ff
     28  10c9					      repend
     29  10ca		       ff		      .byte.b	$ff
     28  10ca					      repend
     29  10cb		       ff		      .byte.b	$ff
     28  10cb					      repend
     29  10cc		       ff		      .byte.b	$ff
     28  10cc					      repend
     29  10cd		       ff		      .byte.b	$ff
     28  10cd					      repend
     29  10ce		       ff		      .byte.b	$ff
     28  10ce					      repend
     29  10cf		       ff		      .byte.b	$ff
     28  10cf					      repend
     29  10d0		       ff		      .byte.b	$ff
     28  10d0					      repend
     29  10d1		       ff		      .byte.b	$ff
     28  10d1					      repend
     29  10d2		       ff		      .byte.b	$ff
     28  10d2					      repend
     29  10d3		       ff		      .byte.b	$ff
     28  10d3					      repend
     29  10d4		       ff		      .byte.b	$ff
     28  10d4					      repend
     29  10d5		       ff		      .byte.b	$ff
     28  10d5					      repend
     29  10d6		       ff		      .byte.b	$ff
     28  10d6					      repend
     29  10d7		       ff		      .byte.b	$ff
     28  10d7					      repend
     29  10d8		       ff		      .byte.b	$ff
     28  10d8					      repend
     29  10d9		       ff		      .byte.b	$ff
     28  10d9					      repend
     29  10da		       ff		      .byte.b	$ff
     28  10da					      repend
     29  10db		       ff		      .byte.b	$ff
     28  10db					      repend
     29  10dc		       ff		      .byte.b	$ff
     28  10dc					      repend
     29  10dd		       ff		      .byte.b	$ff
     28  10dd					      repend
     29  10de		       ff		      .byte.b	$ff
     28  10de					      repend
     29  10df		       ff		      .byte.b	$ff
     28  10df					      repend
     29  10e0		       ff		      .byte.b	$ff
     28  10e0					      repend
     29  10e1		       ff		      .byte.b	$ff
     28  10e1					      repend
     29  10e2		       ff		      .byte.b	$ff
     28  10e2					      repend
     29  10e3		       ff		      .byte.b	$ff
     28  10e3					      repend
     29  10e4		       ff		      .byte.b	$ff
     28  10e4					      repend
     29  10e5		       ff		      .byte.b	$ff
     28  10e5					      repend
     29  10e6		       ff		      .byte.b	$ff
     28  10e6					      repend
     29  10e7		       ff		      .byte.b	$ff
     28  10e7					      repend
     29  10e8		       ff		      .byte.b	$ff
     28  10e8					      repend
     29  10e9		       ff		      .byte.b	$ff
     28  10e9					      repend
     29  10ea		       ff		      .byte.b	$ff
     28  10ea					      repend
     29  10eb		       ff		      .byte.b	$ff
     28  10eb					      repend
     29  10ec		       ff		      .byte.b	$ff
     28  10ec					      repend
     29  10ed		       ff		      .byte.b	$ff
     28  10ed					      repend
     29  10ee		       ff		      .byte.b	$ff
     28  10ee					      repend
     29  10ef		       ff		      .byte.b	$ff
     28  10ef					      repend
     29  10f0		       ff		      .byte.b	$ff
     28  10f0					      repend
     29  10f1		       ff		      .byte.b	$ff
     28  10f1					      repend
     29  10f2		       ff		      .byte.b	$ff
     28  10f2					      repend
     29  10f3		       ff		      .byte.b	$ff
     28  10f3					      repend
     29  10f4		       ff		      .byte.b	$ff
     28  10f4					      repend
     29  10f5		       ff		      .byte.b	$ff
     28  10f5					      repend
     29  10f6		       ff		      .byte.b	$ff
     28  10f6					      repend
     29  10f7		       ff		      .byte.b	$ff
     28  10f7					      repend
     29  10f8		       ff		      .byte.b	$ff
     28  10f8					      repend
     29  10f9		       ff		      .byte.b	$ff
     28  10f9					      repend
     29  10fa		       ff		      .byte.b	$ff
     28  10fa					      repend
     29  10fb		       ff		      .byte.b	$ff
     28  10fb					      repend
     29  10fc		       ff		      .byte.b	$ff
     28  10fc					      repend
     29  10fd		       ff		      .byte.b	$ff
     28  10fd					      repend
     29  10fe		       ff		      .byte.b	$ff
     28  10fe					      repend
     29  10ff		       ff		      .byte.b	$ff
     30  1100					      repend
     31  1100				   game
     32  1100				   .L00 		;  inline PlusROM_functions.asm
     33  1100
------- FILE PlusROM_functions.asm LEVEL 2 PASS 3
      0  1100					      include	PlusROM_functions.asm
      1  1100		       00 01	   PlusROM_functions =	1
      2  1100		       1f f0	   WriteToBuffer =	$1ff0
      3  1100		       1f f1	   WriteSendBuffer =	$1ff1
      4  1100		       1f f2	   ReceiveBuffer =	$1ff2
      5  1100		       1f f3	   ReceiveBufferSize =	$1ff3
      6  1100
      7  1100					      MAC	set_plusrom_api
      8  1100				   OLD_RORG   =	*
      9  1100					      REND
     10  1100				   PlusROM_API
     11  1100					      .byte	{1}, 0, {2}, 0
     12  1100					      ECHO	"Size of PlusROM API definition: ", [( * - PlusROM_API )]d
     13  1100					      RORG	(OLD_RORG + ( * - PlusROM_API ))
     14  1100					      ENDM		; {1} = path, {2} = domain
     15  1100
------- FILE d:\Firmaplus\Firmaplus_intern\Atari\PlusROM\Projekte-batariBasic\CaveApocalypse\C.A.V.E. Apocalypse.bas.asm
     35  1100
     36  1100				   .
     37  1100							; 
     38  1100
     39  1100				   .L01 		;  set kernel_options pfcolors player1colors
     40  1100
     41  1100				   .L02 		;  set romsize 16kSC
     42  1100
     43  1100				   .L03 		;  set smartbranching on
     44  1100
     45  1100				   .
     46  1100							; 
     47  1100
     48  1100				   .
     49  1100							; 
     50  1100
     51  1100				   .
     52  1100							; 
     53  1100
     54  1100				   .L04 		;  const pfres = 4
     55  1100
     56  1100				   .L05 		;  const pfscore = 1
     57  1100
     58  1100				   .L06 		;  const scorebkcolor = $08
     59  1100
     60  1100				   .L07 		;  const textbkcolor = $08
     61  1100
     62  1100				   .
     63  1100							; 
     64  1100
     65  1100				   .L08 		;  rem gravity is acceleration (https://atariage.com/forums/topic/226881-gravity/?do=findComment&comment=3017307)
     66  1100
     67  1100				   .L09 		;  rem by AA user bogax (https://atariage.com/forums/profile/22687-bogax/)
     68  1100
     69  1100				   .L010		;  rem the smallest fraction is 1/256 rounded up here to 0.004
     70  1100
     71  1100				   .L011		;  rem assuming gravity is applied each drawscreen this should
     72  1100
     73  1100				   .L012		;  rem work out to ~7 pixels in 1 second, 28 pixels in 2 seconds
     74  1100
     75  1100				   .L013		;  rem 63 pixels in 3 seconds
     76  1100
     77  1100							;.gravity_player1.0.004.
     78  1100				   .L014		;  def gravity_player1 = 0.004
     79  1100
     80  1100							;.gravity_ball.0.008.
     81  1100				   .L015		;  def gravity_ball = 0.008
     82  1100
     83  1100							;.gravity_missile0.0.024.
     84  1100				   .L016		;  def gravity_missile0 = 0.024
     85  1100
     86  1100				   .
     87  1100							; 
     88  1100
     89  1100				   .L017		;  const player_min_x	=  10
     90  1100
     91  1100				   .L018		;  const player_max_x	=  134
     92  1100
     93  1100				   .L019		;  const player_min_y	=  2
     94  1100
     95  1100				   .L020		;  const player_max_y	=  76
     96  1100
     97  1100				   .L021		;  const _M_Edge_Top  =  2
     98  1100
     99  1100				   .L022		;  const _M_Edge_Bottom  =  88
    100  1100
    101  1100				   .L023		;  const _M_Edge_Left	=  14
    102  1100
    103  1100				   .L024		;  const _M_Edge_Right  =  148
    104  1100
    105  1100				   .
    106  1100							; 
    107  1100
    108  1100				   .L025		;  const response_size_minus_1  =  30
    109  1100
    110  1100				   .L026		;  const response_menu_size  =  6
    111  1100
    112  1100				   .
    113  1100							; 
    114  1100
    115  1100				   .L027		;  const game_state_run  =  0
    116  1100
    117  1100				   .L028		;  const game_state_game_over	=  1
    118  1100
    119  1100				   .L029		;  const game_state_level_finished  =	2
    120  1100
    121  1100				   .L030		;  const game_state_heli_explosion  =	3
    122  1100
    123  1100				   .
    124  1100							; 
    125  1100
    126  1100							;.bonus_level_timer.100.
    127  1100				   .L031		;  def bonus_level_timer = 100
    128  1100
    129  1100							;.bonus_level_lives.200.
    130  1100				   .L032		;  def bonus_level_lives = 200
    131  1100
    132  1100							;.bonus_hit_wall.10.
    133  1100				   .L033		;  def bonus_hit_wall = 10
    134  1100
    135  1100							;.bonus_hit_active_wall.30.
    136  1100				   .L034		;  def bonus_hit_active_wall = 30
    137  1100
    138  1100							;.bonus_hit_air_missile.40.
    139  1100				   .L035		;  def bonus_hit_air_missile = 40
    140  1100
    141  1100							;.bonus_hit_tank.60.
    142  1100				   .L036		;  def bonus_hit_tank = 60
    143  1100
    144  1100							;.bonus_man_rescue.150.
    145  1100				   .L037		;  def bonus_man_rescue = 150
    146  1100
    147  1100				   .
    148  1100							; 
    149  1100
    150  1100				   .
    151  1100							; 
    152  1100
    153  1100				   .
    154  1100							; 
    155  1100
    156  1100				   .
    157  1100							; 
    158  1100
    159  1100				   .L038		;  const req_load  =  0
    160  1100
    161  1100				   .L039		;  const req_level_up	=  1
    162  1100
    163  1100				   .L040		;  const req_game_over  =  2
    164  1100
    165  1100				   .L041		;  const req_move_left  =  3
    166  1100
    167  1100				   .L042		;  const req_move_up  =  4
    168  1100
    169  1100				   .L043		;  const req_move_right  =  5
    170  1100
    171  1100				   .L044		;  const req_move_down  =  6
    172  1100
    173  1100				   .L045		;  const req_level_reset  =  7
    174  1100
    175  1100				   .L046		;  const req_safe_point  =  8
    176  1100
    177  1100				   .L047		;  const req_load_menu  =  9
    178  1100
    179  1100				   .
    180  1100							; 
    181  1100
    182  1100				   .L048		;  const _00  =  $00
    183  1100
    184  1100				   .L049		;  const _02  =  $02
    185  1100
    186  1100				   .L050		;  const _04  =  $04
    187  1100
    188  1100				   .L051		;  const _06  =  $06
    189  1100
    190  1100				   .L052		;  const _08  =  $08
    191  1100
    192  1100				   .L053		;  const _0A  =  $0A
    193  1100
    194  1100				   .L054		;  const _0C  =  $0C
    195  1100
    196  1100				   .L055		;  const _0E  =  $0E
    197  1100
    198  1100				   .L056		;  const _10  =  $10
    199  1100
    200  1100				   .L057		;  const _12  =  $12
    201  1100
    202  1100				   .L058		;  const _14  =  $14
    203  1100
    204  1100				   .L059		;  const _16  =  $16
    205  1100
    206  1100				   .L060		;  const _18  =  $18
    207  1100
    208  1100				   .L061		;  const _1A  =  $1A
    209  1100
    210  1100				   .L062		;  const _1C  =  $1C
    211  1100
    212  1100				   .L063		;  const _1E  =  $1E
    213  1100
    214  1100				   .L064		;  const _20  =  $20
    215  1100
    216  1100				   .L065		;  const _22  =  $22
    217  1100
    218  1100				   .L066		;  const _24  =  $24
    219  1100
    220  1100				   .L067		;  const _26  =  $26
    221  1100
    222  1100				   .L068		;  const _28  =  $28
    223  1100
    224  1100				   .L069		;  const _2A  =  $2A
    225  1100
    226  1100				   .L070		;  const _2C  =  $2C
    227  1100
    228  1100				   .L071		;  const _2E  =  $2E
    229  1100
    230  1100				   .L072		;  const _30  =  $30
    231  1100
    232  1100				   .L073		;  const _32  =  $32
    233  1100
    234  1100				   .L074		;  const _34  =  $34
    235  1100
    236  1100				   .L075		;  const _36  =  $36
    237  1100
    238  1100				   .L076		;  const _38  =  $38
    239  1100
    240  1100				   .L077		;  const _3A  =  $3A
    241  1100
    242  1100				   .L078		;  const _3C  =  $3C
    243  1100
    244  1100				   .L079		;  const _3E  =  $3E
    245  1100
    246  1100				   .L080		;  const _40  =  $40
    247  1100
    248  1100				   .L081		;  const _42  =  $42
    249  1100
    250  1100				   .L082		;  const _44  =  $44
    251  1100
    252  1100				   .L083		;  const _46  =  $46
    253  1100
    254  1100				   .L084		;  const _48  =  $48
    255  1100
    256  1100				   .L085		;  const _4A  =  $4A
    257  1100
    258  1100				   .L086		;  const _4C  =  $4C
    259  1100
    260  1100				   .L087		;  const _4E  =  $4E
    261  1100
    262  1100				   .L088		;  const _50  =  $50
    263  1100
    264  1100				   .L089		;  const _52  =  $52
    265  1100
    266  1100				   .L090		;  const _54  =  $54
    267  1100
    268  1100				   .L091		;  const _56  =  $56
    269  1100
    270  1100				   .L092		;  const _58  =  $58
    271  1100
    272  1100				   .L093		;  const _5A  =  $5A
    273  1100
    274  1100				   .L094		;  const _5C  =  $5C
    275  1100
    276  1100				   .L095		;  const _5E  =  $5E
    277  1100
    278  1100				   .L096		;  const _60  =  $60
    279  1100
    280  1100				   .L097		;  const _62  =  $62
    281  1100
    282  1100				   .L098		;  const _64  =  $64
    283  1100
    284  1100				   .L099		;  const _66  =  $66
    285  1100
    286  1100				   .L0100		;  const _68  =  $68
    287  1100
    288  1100				   .L0101		;  const _6A  =  $6A
    289  1100
    290  1100				   .L0102		;  const _6C  =  $6C
    291  1100
    292  1100				   .L0103		;  const _6E  =  $6E
    293  1100
    294  1100				   .L0104		;  const _70  =  $70
    295  1100
    296  1100				   .L0105		;  const _72  =  $72
    297  1100
    298  1100				   .L0106		;  const _74  =  $74
    299  1100
    300  1100				   .L0107		;  const _76  =  $76
    301  1100
    302  1100				   .L0108		;  const _78  =  $78
    303  1100
    304  1100				   .L0109		;  const _7A  =  $7A
    305  1100
    306  1100				   .L0110		;  const _7C  =  $7C
    307  1100
    308  1100				   .L0111		;  const _7E  =  $7E
    309  1100
    310  1100				   .L0112		;  const _80  =  $80
    311  1100
    312  1100				   .L0113		;  const _82  =  $82
    313  1100
    314  1100				   .L0114		;  const _84  =  $84
    315  1100
    316  1100				   .L0115		;  const _86  =  $86
    317  1100
    318  1100				   .L0116		;  const _88  =  $88
    319  1100
    320  1100				   .L0117		;  const _8A  =  $8A
    321  1100
    322  1100				   .L0118		;  const _8C  =  $8C
    323  1100
    324  1100				   .L0119		;  const _8E  =  $8E
    325  1100
    326  1100				   .L0120		;  const _90  =  $90
    327  1100
    328  1100				   .L0121		;  const _92  =  $92
    329  1100
    330  1100				   .L0122		;  const _94  =  $94
    331  1100
    332  1100				   .L0123		;  const _96  =  $96
    333  1100
    334  1100				   .L0124		;  const _98  =  $98
    335  1100
    336  1100				   .L0125		;  const _9A  =  $9A
    337  1100
    338  1100				   .L0126		;  const _9C  =  $9C
    339  1100
    340  1100				   .L0127		;  const _9E  =  $9E
    341  1100
    342  1100				   .L0128		;  const _A0  =  $A0
    343  1100
    344  1100				   .L0129		;  const _A2  =  $A2
    345  1100
    346  1100				   .L0130		;  const _A4  =  $A4
    347  1100
    348  1100				   .L0131		;  const _A6  =  $A6
    349  1100
    350  1100				   .L0132		;  const _A8  =  $A8
    351  1100
    352  1100				   .L0133		;  const _AA  =  $AA
    353  1100
    354  1100				   .L0134		;  const _AC  =  $AC
    355  1100
    356  1100				   .L0135		;  const _AE  =  $AE
    357  1100
    358  1100				   .L0136		;  const _B0  =  $B0
    359  1100
    360  1100				   .L0137		;  const _B2  =  $B2
    361  1100
    362  1100				   .L0138		;  const _B4  =  $B4
    363  1100
    364  1100				   .L0139		;  const _B6  =  $B6
    365  1100
    366  1100				   .L0140		;  const _B8  =  $B8
    367  1100
    368  1100				   .L0141		;  const _BA  =  $BA
    369  1100
    370  1100				   .L0142		;  const _BC  =  $BC
    371  1100
    372  1100				   .L0143		;  const _BE  =  $BE
    373  1100
    374  1100				   .L0144		;  const _C0  =  $C0
    375  1100
    376  1100				   .L0145		;  const _C2  =  $C2
    377  1100
    378  1100				   .L0146		;  const _C4  =  $C4
    379  1100
    380  1100				   .L0147		;  const _C6  =  $C6
    381  1100
    382  1100				   .L0148		;  const _C8  =  $C8
    383  1100
    384  1100				   .L0149		;  const _CA  =  $CA
    385  1100
    386  1100				   .L0150		;  const _CC  =  $CC
    387  1100
    388  1100				   .L0151		;  const _CE  =  $CE
    389  1100
    390  1100				   .L0152		;  const _D0  =  $D0
    391  1100
    392  1100				   .L0153		;  const _D2  =  $D2
    393  1100
    394  1100				   .L0154		;  const _D4  =  $D4
    395  1100
    396  1100				   .L0155		;  const _D6  =  $D6
    397  1100
    398  1100				   .L0156		;  const _D8  =  $D8
    399  1100
    400  1100				   .L0157		;  const _DA  =  $DA
    401  1100
    402  1100				   .L0158		;  const _DC  =  $DC
    403  1100
    404  1100				   .L0159		;  const _DE  =  $DE
    405  1100
    406  1100				   .L0160		;  const _E0  =  $E0
    407  1100
    408  1100				   .L0161		;  const _E2  =  $E2
    409  1100
    410  1100				   .L0162		;  const _E4  =  $E4
    411  1100
    412  1100				   .L0163		;  const _E6  =  $E6
    413  1100
    414  1100				   .L0164		;  const _E8  =  $E8
    415  1100
    416  1100				   .L0165		;  const _EA  =  $EA
    417  1100
    418  1100				   .L0166		;  const _EC  =  $EC
    419  1100
    420  1100				   .L0167		;  const _EE  =  $EE
    421  1100
    422  1100				   .L0168		;  const _F0  =  $F0
    423  1100
    424  1100				   .L0169		;  const _F2  =  $F2
    425  1100
    426  1100				   .L0170		;  const _F4  =  $F4
    427  1100
    428  1100				   .L0171		;  const _F6  =  $F6
    429  1100
    430  1100				   .L0172		;  const _F8  =  $F8
    431  1100
    432  1100				   .L0173		;  const _FA  =  $FA
    433  1100
    434  1100				   .L0174		;  const _FC  =  $FC
    435  1100
    436  1100				   .L0175		;  const _FE  =  $FE
    437  1100
    438  1100				   .
    439  1100							; 
    440  1100
    441  1100				   .
    442  1100							; 
    443  1100
    444  1100				   .
    445  1100							; 
    446  1100
    447  1100				   .
    448  1100							; 
    449  1100
    450  1100				   .
    451  1100							; 
    452  1100
    453  1100				   .
    454  1100							; 
    455  1100
    456  1100				   .
    457  1100							; 
    458  1100
    459  1100				   .
    460  1100							; 
    461  1100
    462  1100				   .
    463  1100							; 
    464  1100
    465  1100				   .
    466  1100							; 
    467  1100
    468  1100				   .
    469  1100							; 
    470  1100
    471  1100				   .
    472  1100							; 
    473  1100
    474  1100				   .
    475  1100							; 
    476  1100
    477  1100				   .
    478  1100							; 
    479  1100
    480  1100				   .
    481  1100							; 
    482  1100
    483  1100				   .
    484  1100							; 
    485  1100
    486  1100				   .
    487  1100							; 
    488  1100
    489  1100				   .
    490  1100							; 
    491  1100
    492  1100				   .
    493  1100							; 
    494  1100
    495  1100				   .
    496  1100							; 
    497  1100
    498  1100				   .
    499  1100							; 
    500  1100
    501  1100				   .
    502  1100							; 
    503  1100
    504  1100				   .
    505  1100							; 
    506  1100
    507  1100				   .
    508  1100							; 
    509  1100
    510  1100				   .
    511  1100							; 
    512  1100
    513  1100				   .
    514  1100							; 
    515  1100
    516  1100				   .
    517  1100							; 
    518  1100
    519  1100				   .
    520  1100							; 
    521  1100
    522  1100				   .
    523  1100							; 
    524  1100
    525  1100				   .
    526  1100							; 
    527  1100
    528  1100				   .
    529  1100							; 
    530  1100
    531  1100				   .
    532  1100							; 
    533  1100
    534  1100				   .
    535  1100							; 
    536  1100
    537  1100				   .
    538  1100							; 
    539  1100
    540  1100				   .
    541  1100							; 
    542  1100
    543  1100				   .
    544  1100							; 
    545  1100
    546  1100				   .
    547  1100							; 
    548  1100
    549  1100				   .
    550  1100							; 
    551  1100
    552  1100				   .
    553  1100							; 
    554  1100
    555  1100				   .
    556  1100							; 
    557  1100
    558  1100				   .
    559  1100							; 
    560  1100
    561  1100				   .
    562  1100							; 
    563  1100
    564  1100				   .
    565  1100							; 
    566  1100
    567  1100				   .
    568  1100							; 
    569  1100
    570  1100				   .
    571  1100							; 
    572  1100
    573  1100				   .
    574  1100							; 
    575  1100
    576  1100				   .
    577  1100							; 
    578  1100
    579  1100				   .
    580  1100							; 
    581  1100
    582  1100				   .
    583  1100							; 
    584  1100
    585  1100				   .
    586  1100							; 
    587  1100
    588  1100				   .
    589  1100							; 
    590  1100
    591  1100				   .
    592  1100							; 
    593  1100
    594  1100				   .
    595  1100							; 
    596  1100
    597  1100				   .
    598  1100							; 
    599  1100
    600  1100				   .
    601  1100							; 
    602  1100
    603  1100				   .
    604  1100							; 
    605  1100
    606  1100				   .
    607  1100							; 
    608  1100
    609  1100				   .
    610  1100							; 
    611  1100
    612  1100				   .
    613  1100							; 
    614  1100
    615  1100				   .
    616  1100							; 
    617  1100
    618  1100				   .
    619  1100							; 
    620  1100
    621  1100				   .
    622  1100							; 
    623  1100
    624  1100				   .
    625  1100							; 
    626  1100
    627  1100				   .
    628  1100							; 
    629  1100
    630  1100				   .
    631  1100							; 
    632  1100
    633  1100				   .
    634  1100							; 
    635  1100
    636  1100				   .
    637  1100							; 
    638  1100
    639  1100				   .
    640  1100							; 
    641  1100
    642  1100				   .
    643  1100							; 
    644  1100
    645  1100				   .
    646  1100							; 
    647  1100
    648  1100				   .
    649  1100							; 
    650  1100
    651  1100				   .
    652  1100							; 
    653  1100
    654  1100				   .
    655  1100							; 
    656  1100
    657  1100				   .
    658  1100							; 
    659  1100
    660  1100				   .
    661  1100							; 
    662  1100
    663  1100				   .
    664  1100							; 
    665  1100
    666  1100				   .
    667  1100							; 
    668  1100
    669  1100				   .
    670  1100							; 
    671  1100
    672  1100				   .
    673  1100							; 
    674  1100
    675  1100				   .
    676  1100							; 
    677  1100
    678  1100				   .
    679  1100							; 
    680  1100
    681  1100				   .
    682  1100							; 
    683  1100
    684  1100				   .
    685  1100							; 
    686  1100
    687  1100				   .
    688  1100							; 
    689  1100
    690  1100				   .
    691  1100							; 
    692  1100
    693  1100				   .
    694  1100							; 
    695  1100
    696  1100				   .
    697  1100							; 
    698  1100
    699  1100				   .
    700  1100							; 
    701  1100
    702  1100				   .
    703  1100							; 
    704  1100
    705  1100				   .
    706  1100							; 
    707  1100
    708  1100				   .
    709  1100							; 
    710  1100
    711  1100				   .
    712  1100							; 
    713  1100
    714  1100				   .
    715  1100							; 
    716  1100
    717  1100				   .
    718  1100							; 
    719  1100
    720  1100				   .
    721  1100							; 
    722  1100
    723  1100				   .
    724  1100							; 
    725  1100
    726  1100				   .
    727  1100							; 
    728  1100
    729  1100				   .
    730  1100							; 
    731  1100
    732  1100				   .
    733  1100							; 
    734  1100
    735  1100				   .
    736  1100							; 
    737  1100
    738  1100				   .
    739  1100							; 
    740  1100
    741  1100				   .
    742  1100							; 
    743  1100
    744  1100				   .
    745  1100							; 
    746  1100
    747  1100				   .
    748  1100							; 
    749  1100
    750  1100				   .
    751  1100							; 
    752  1100
    753  1100				   .
    754  1100							; 
    755  1100
    756  1100				   .
    757  1100							; 
    758  1100
    759  1100				   .
    760  1100							; 
    761  1100
    762  1100				   .
    763  1100							; 
    764  1100
    765  1100				   .
    766  1100							; 
    767  1100
    768  1100				   .
    769  1100							; 
    770  1100
    771  1100				   .
    772  1100							; 
    773  1100
    774  1100				   .
    775  1100							; 
    776  1100
    777  1100				   .
    778  1100							; 
    779  1100
    780  1100				   .
    781  1100							; 
    782  1100
    783  1100				   .
    784  1100							; 
    785  1100
    786  1100				   .
    787  1100							; 
    788  1100
    789  1100				   .
    790  1100							; 
    791  1100
    792  1100				   .
    793  1100							; 
    794  1100
    795  1100				   .
    796  1100							; 
    797  1100
    798  1100				   .
    799  1100							; 
    800  1100
    801  1100				   .
    802  1100							; 
    803  1100
    804  1100				   .
    805  1100							; 
    806  1100
    807  1100				   .
    808  1100							; 
    809  1100
    810  1100				   .
    811  1100							; 
    812  1100
    813  1100				   .
    814  1100							; 
    815  1100
    816  1100				   .
    817  1100							; 
    818  1100
    819  1100				   .
    820  1100							; 
    821  1100
    822  1100				   .
    823  1100							; 
    824  1100
    825  1100				   .
    826  1100							; 
    827  1100
    828  1100				   .
    829  1100							; 
    830  1100
    831  1100				   .
    832  1100							; 
    833  1100
    834  1100				   .
    835  1100							; 
    836  1100
    837  1100				   .
    838  1100							; 
    839  1100
    840  1100				   .
    841  1100							; 
    842  1100
    843  1100				   .
    844  1100							; 
    845  1100
    846  1100				   .
    847  1100							; 
    848  1100
    849  1100				   .
    850  1100							; 
    851  1100
    852  1100				   .
    853  1100							; 
    854  1100
    855  1100				   .
    856  1100							; 
    857  1100
    858  1100				   .
    859  1100							; 
    860  1100
    861  1100				   .
    862  1100							; 
    863  1100
    864  1100				   .
    865  1100							; 
    866  1100
    867  1100				   .
    868  1100							; 
    869  1100
    870  1100				   .
    871  1100							; 
    872  1100
    873  1100				   .
    874  1100							; 
    875  1100
    876  1100				   .L0176		;  dim _sc1  =  score
    877  1100
    878  1100				   .L0177		;  dim _sc2  =  score + 1
    879  1100
    880  1100				   .L0178		;  dim _sc3  =  score + 2
    881  1100
    882  1100				   .
    883  1100							; 
    884  1100
    885  1100				   .
    886  1100							; 
    887  1100
    888  1100				   .L0179		;  dim delay_counter  =  a
    889  1100
    890  1100				   .L0180		;  dim frame_counter  =  b
    891  1100
    892  1100				   .
    893  1100							; 
    894  1100
    895  1100				   .L0181		;  dim _BitOp_Ball_Shot_Dir  =  c
    896  1100
    897  1100				   .L0182		;  dim _Bit0_Ball_Shot_Dir_Left1  =  c
    898  1100
    899  1100				   .L0183		;  dim _Bit1_Ball_Shot_Dir_Left2  =  c
    900  1100
    901  1100				   .L0184		;  dim _Bit2_Ball_Shot_Dir_Right1  =  c
    902  1100
    903  1100				   .L0185		;  dim _Bit3_Ball_Shot_Dir_Right2  =  c
    904  1100
    905  1100				   .
    906  1100							; 
    907  1100
    908  1100				   .L0186		;  dim _BitOp_M0_Dir  =  d
    909  1100
    910  1100				   .L0187		;  dim _Bit0_M0_Dir_Up  =  d
    911  1100
    912  1100				   .L0188		;  dim _Bit1_M0_Dir_Down  =  d
    913  1100
    914  1100				   .L0189		;  dim _Bit2_M0_Dir_Left  =  d
    915  1100
    916  1100				   .L0190		;  dim _Bit3_M0_Dir_Right  =  d
    917  1100
    918  1100				   .
    919  1100							; 
    920  1100
    921  1100				   .L0191		;  dim _BitOp_P1_Dir  =  e
    922  1100
    923  1100				   .L0192		;  dim _Bit0_P1_Dir_Up  =  e
    924  1100
    925  1100				   .L0193		;  dim _Bit1_P1_Dir_Down  =  e
    926  1100
    927  1100				   .L0194		;  dim _Bit2_P1_Dir_Left  =  e
    928  1100
    929  1100				   .L0195		;  dim _Bit3_P1_Dir_Right  =  e
    930  1100
    931  1100				   .
    932  1100							; 
    933  1100
    934  1100				   .
    935  1100							; 
    936  1100
    937  1100				   .L0196		;  dim _Ch0_Sound  =  f
    938  1100
    939  1100				   .L0197		;  dim _Ch0_Duration  =  g
    940  1100
    941  1100				   .L0198		;  dim _Ch0_Counter  =  h
    942  1100
    943  1100				   .
    944  1100							; 
    945  1100
    946  1100				   .L0199		;  dim extra_wall_move_x  =  i
    947  1100
    948  1100				   .L0200		;  dim roommate_move_x  =  j
    949  1100
    950  1100				   .L0201		;  dim roommate_type  =  k
    951  1100
    952  1100				   .
    953  1100							; 
    954  1100
    955  1100				   .L0202		;  dim _BitOp_Flip_positions  =  l
    956  1100
    957  1100				   .L0203		;  dim _Bit0_New_Room_P1_Flip	=  l
    958  1100
    959  1100				   .L0204		;  dim _Bit1_Safe_Point_P1_Flip  =  l
    960  1100
    961  1100				   .L0205		;  dim Safe_Point_P1_x  =  m
    962  1100
    963  1100				   .L0206		;  dim Safe_Point_P1_y  =  n
    964  1100
    965  1100				   .
    966  1100							; 
    967  1100
    968  1100				   .L0207		;  dim _Ch1_Duration  =  o
    969  1100
    970  1100				   .
    971  1100							; 
    972  1100
    973  1100				   .
    974  1100							; 
    975  1100
    976  1100				   .L0208		;  rem 16 bit velocity
    977  1100
    978  1100				   .L0209		;  dim Bally_velocity	=  p.q
    979  1100
    980  1100				   .L0210		;  rem 16 bit ball y position
    981  1100
    982  1100				   .L0211		;  dim Bally_position	=  ball_shoot_y.r
    983  1100
    984  1100				   .
    985  1100							; 
    986  1100
    987  1100				   .L0212		;  rem 16 bit velocity
    988  1100
    989  1100				   .L0213		;  dim M0y_velocity  =  s.t
    990  1100
    991  1100				   .L0214		;  rem 16 bit missile0 y position
    992  1100
    993  1100				   .L0215		;  dim M0y_position  =  missile0y.u
    994  1100
    995  1100				   .
    996  1100							; 
    997  1100
    998  1100				   .L0216		;  rem 16 bit velocity
    999  1100
   1000  1100				   .L0217		;  dim P1y_velocity  =  v.w
   1001  1100
   1002  1100				   .L0218		;  rem 16 bit player1 y position
   1003  1100
   1004  1100				   .L0219		;  dim P1y_position  =  player1y.x
   1005  1100
   1006  1100				   .
   1007  1100							; 
   1008  1100
   1009  1100				   .L0220		;  rem Various game states
   1010  1100
   1011  1100				   .L0221		;  dim _Bit_Game_State  =  y
   1012  1100
   1013  1100				   .
   1014  1100							; 
   1015  1100
   1016  1100				   .L0222		;  dim _Bit2_roommate_Dir  =  y
   1017  1100
   1018  1100				   .L0223		;  dim _Bit3_Safe_Point_reached  =  y
   1019  1100
   1020  1100				   .L0224		;  dim _Bit4_Wall_Dir	=  y
   1021  1100
   1022  1100				   .L0225		;  dim _Bit5_Request_Pending  =  y
   1023  1100
   1024  1100				   .L0226		;  dim _Bit6_Flip_P1  =  y
   1025  1100
   1026  1100				   .L0227		;  dim _Bit7_FireB_Restrainer	=  y
   1027  1100
   1028  1100				   .
   1029  1100							; 
   1030  1100
   1031  1100				   .L0228		;  dim rand16	=  z
   1032  1100
   1033  1100				   .
   1034  1100							; 
   1035  1100
   1036  1100				   .
   1037  1100							; 
   1038  1100
   1039  1100				   .L0229		;  dim new_room_player1y  =  var0
   1040  1100
   1041  1100				   .L0230		;  dim new_room_player1x  =  var1
   1042  1100
   1043  1100				   .L0231		;  dim gamenumber  =  var2
   1044  1100
   1045  1100				   .
   1046  1100							; 
   1047  1100
   1048  1100				   .L0232		;  dim max_pub_level_bcd1  =  var3
   1049  1100
   1050  1100				   .L0233		;  dim max_pub_level_bcd2  =  var4
   1051  1100
   1052  1100				   .L0234		;  dim max_pub_level_bcd3  =  var5
   1053  1100
   1054  1100				   .L0235		;  dim max_priv_level_bcd1  =	var6
   1055  1100
   1056  1100				   .L0236		;  dim max_priv_level_bcd2  =	var7
   1057  1100
   1058  1100				   .L0237		;  dim max_priv_level_bcd3  =	var8
   1059  1100
   1060  1100				   .
   1061  1100							; 
   1062  1100
   1063  1100				   .L0238		;  dim has_private_levels  =  var9
   1064  1100
   1065  1100				   .L0239		;  dim ball_shoot_x  =  var10
   1066  1100
   1067  1100				   .L0240		;  dim ball_shoot_y  =  var11
   1068  1100
   1069  1100				   .
   1070  1100							; 
   1071  1100
   1072  1100				   .L0241		;  dim men_to_rescue  =  var12
   1073  1100
   1074  1100				   .L0242		;  dim TextIndex  =  var12
   1075  1100
   1076  1100				   .
   1077  1100							; 
   1078  1100
   1079  1100				   .L0243		;  dim bonus_bcd_counter  =  var13
   1080  1100
   1081  1100				   .
   1082  1100							; 
   1083  1100
   1084  1100				   .
   1085  1100							; 
   1086  1100
   1087  1100				   .
   1088  1100							; 
   1089  1100
   1090  1100				   .L0244		;  dim next_shoot_rand  =  var16
   1091  1100
   1092  1100				   .
   1093  1100							; 
   1094  1100
   1095  1100				   .L0245		;  dim Game_Status  =	var47
   1096  1100
   1097  1100				   .
   1098  1100							; 
   1099  1100
   1100  1100				   .
   1101  1100							; 
   1102  1100
   1103  1100				   .
   1104  1100							; 
   1105  1100
   1106  1100				   .
   1107  1100							; 
   1108  1100
   1109  1100				   .
   1110  1100							; 
   1111  1100
   1112  1100				   .
   1113  1100							; 
   1114  1100
   1115  1100				   .
   1116  1100							; 
   1117  1100
   1118  1100				   .
   1119  1100							; 
   1120  1100
   1121  1100				   .
   1122  1100							; 
   1123  1100
   1124  1100				   .
   1125  1100							; 
   1126  1100
   1127  1100				   .
   1128  1100							; 
   1129  1100
   1130  1100				   .L0246		;  dim w_room_definition_start  =  w093
   1131  1100
   1132  1100				   .
   1133  1100							; 
   1134  1100
   1135  1100				   .L0247		;  dim r_level_bonus_bcd_points  =  r093
   1136  1100
   1137  1100				   .L0248		;  dim w_level_bonus_bcd_points  =  w093
   1138  1100
   1139  1100				   .L0249		;  dim r_men_to_rescue_in_this_level =  r094
   1140  1100
   1141  1100				   .L0250		;  dim w_men_to_rescue_in_this_level =  w094
   1142  1100
   1143  1100				   .L0251		;  dim r_BitOp_room_type  =  r095
   1144  1100
   1145  1100				   .L0252		;  dim w_BitOp_room_type  =  w095
   1146  1100
   1147  1100				   .L0253		;  dim r_room_color_top  =  r096
   1148  1100
   1149  1100				   .L0254		;  dim w_room_color_top  =  w096
   1150  1100
   1151  1100				   .L0255		;  dim r_room_color_middle  =	r097
   1152  1100
   1153  1100				   .L0256		;  dim w_room_color_middle  =	w097
   1154  1100
   1155  1100				   .L0257		;  dim r_room_color_waste1  =	r098
   1156  1100
   1157  1100				   .L0258		;  dim w_room_color_waste1  =	w098
   1158  1100
   1159  1100				   .L0259		;  dim r_room_color_waste2  =	r099
   1160  1100
   1161  1100				   .L0260		;  dim w_room_color_waste2  =	w099
   1162  1100
   1163  1100				   .L0261		;  dim r_room_color_waste3  =	r100
   1164  1100
   1165  1100				   .L0262		;  dim w_room_color_waste4  =	w100
   1166  1100
   1167  1100				   .L0263		;  dim r_room_color_bottom  =	r101
   1168  1100
   1169  1100				   .L0264		;  dim w_room_color_bottom  =	w101
   1170  1100
   1171  1100				   .L0265		;  dim r_roommate_type_and_range  =  r102
   1172  1100
   1173  1100				   .L0266		;  dim w_roommate_type_and_range  =  w102
   1174  1100
   1175  1100				   .L0267		;  dim r_roommate_startpos_x  =  r103
   1176  1100
   1177  1100				   .L0268		;  dim w_roommate_startpos_x  =  w103
   1178  1100
   1179  1100				   .L0269		;  dim r_roommate_startpos_y  =  r104
   1180  1100
   1181  1100				   .L0270		;  dim w_roommate_startpos_y  =  w104
   1182  1100
   1183  1100				   .L0271		;  dim r_extra_wall_type_and_range  =	r105
   1184  1100
   1185  1100				   .L0272		;  dim w_extra_wall_type_and_range  =	w105
   1186  1100
   1187  1100				   .L0273		;  dim r_extra_wall_width  =  r106
   1188  1100
   1189  1100				   .L0274		;  dim w_extra_wall_width  =  w106
   1190  1100
   1191  1100				   .L0275		;  dim r_extra_wall_height  =	r107
   1192  1100
   1193  1100				   .L0276		;  dim w_extra_wall_height  =	w107
   1194  1100
   1195  1100				   .L0277		;  dim r_extra_wall_startpos_1_x  =  r108
   1196  1100
   1197  1100				   .L0278		;  dim w_extra_wall_startpos_1_x  =  w108
   1198  1100
   1199  1100				   .L0279		;  dim r_extra_wall_startpos_1_y  =  r109
   1200  1100
   1201  1100				   .L0280		;  dim w_extra_wall_startpos_1_y  =  w109
   1202  1100
   1203  1100				   .L0281		;  dim r_extra_wall_startpos_2_x  =  r110
   1204  1100
   1205  1100				   .L0282		;  dim w_extra_wall_startpos_2_x  =  w110
   1206  1100
   1207  1100				   .L0283		;  dim r_extra_wall_startpos_2_y  =  r111
   1208  1100
   1209  1100				   .L0284		;  dim w_extra_wall_startpos_2_y  =  w111
   1210  1100
   1211  1100				   .
   1212  1100							; 
   1213  1100
   1214  1100				   .L0285		;  dim r_Bit0_room_type_top  =  r_BitOp_room_type
   1215  1100
   1216  1100				   .L0286		;  dim w_Bit0_room_type_top  =  w_BitOp_room_type
   1217  1100
   1218  1100				   .
   1219  1100							; 
   1220  1100
   1221  1100				   .
   1222  1100							; 
   1223  1100
   1224  1100				   .
   1225  1100							; 
   1226  1100
   1227  1100				   .
   1228  1100							; 
   1229  1100
   1230  1100				   .
   1231  1100							; 
   1232  1100
   1233  1100				   ._Start
   1234  1100							; _Start
   1235  1100
   1236  1100				   .L0287		;  asm
   1237  1100
   1238  1100		       a9 00		      lda	#0
   1239  1102
   1240  1102		       a2 4a		      ldx	#74
   1241  1104
   1242  1104				   .clear_ram
   1243  1104
   1244  1104		       ca		      dex
   1245  1105
   1246  1105		       95 a4		      sta	var0,x
   1247  1107
   1248  1107		       d0 fb		      bne	.clear_ram
   1249  1109
   1250  1109				   .
   1251  1109							; 
   1252  1109
   1253  1109				   .L0288		;  WriteSendBuffer  =	req_load_menu  :  _Bit5_Request_Pending{5}  =  1  :  COLUP0  =	_1C  :	scorecolor  =  _0E
   1254  1109
   1255  1109		       a9 09		      LDA	#req_load_menu
   1256  110b		       8d f1 1f 	      STA	WriteSendBuffer
   1257  110e		       a5 ec		      LDA	_Bit5_Request_Pending
   1258  1110		       09 20		      ORA	#32
   1259  1112		       85 ec		      STA	_Bit5_Request_Pending
   1260  1114		       a9 1c		      LDA	#_1C
   1261  1116		       85 06		      STA	COLUP0
   1262  1118		       a9 0e		      LDA	#_0E
   1263  111a		       85 a3		      STA	scorecolor
   1264  111c				   .L0289		;  score  =  1
   1265  111c
   1266  111c		       a9 01		      LDA	#$01
   1267  111e		       85 95		      STA	score+2
   1268  1120		       a9 00		      LDA	#$00
   1269  1122		       85 94		      STA	score+1
   1270  1124		       a9 00		      LDA	#$00
   1271  1126		       85 93		      STA	score
   1272  1128				   .L0290		;  gamenumber	=  1  :  missile0height  =  1
   1273  1128
   1274  1128		       a9 01		      LDA	#1
   1275  112a		       85 a6		      STA	gamenumber
   1276  112c		       85 90		      STA	missile0height
   1277  112e				   .L0291		;  _Bit7_FireB_Restrainer{7}  =  1
   1278  112e
   1279  112e		       a5 ec		      LDA	_Bit7_FireB_Restrainer
   1280  1130		       09 80		      ORA	#128
   1281  1132		       85 ec		      STA	_Bit7_FireB_Restrainer
   1282  1134				   .L0292		;  new_room_player1y  =  player_min_y	:  Safe_Point_P1_y  =  player_min_y
   1283  1134
   1284  1134		       a9 02		      LDA	#player_min_y
   1285  1136		       85 a4		      STA	new_room_player1y
   1286  1138		       85 e1		      STA	Safe_Point_P1_y
   1287  113a				   .L0293		;  new_room_player1x  =  30  :  player1x  =  30  :  Safe_Point_P1_x  =  30
   1288  113a
   1289  113a		       a9 1e		      LDA	#30
   1290  113c		       85 a5		      STA	new_room_player1x
   1291  113e		       85 81		      STA	player1x
   1292  1140		       85 e0		      STA	Safe_Point_P1_x
   1293  1142				   .L0294		;  AUDV0  =  0  :  AUDV1  =  0  :  frame_counter  =  0  :  player0x  =  0  :  bally  =  0  :  player1y  =  0
   1294  1142
   1295  1142		       a9 00		      LDA	#0
   1296  1144		       85 19		      STA	AUDV0
   1297  1146		       85 1a		      STA	AUDV1
   1298  1148		       85 d5		      STA	frame_counter
   1299  114a		       85 80		      STA	player0x
   1300  114c		       85 89		      STA	bally
   1301  114e		       85 86		      STA	player1y
   1302  1150				   .L0295		;  missile0x  =  200  :  missile0y  =	200  :	w_extra_wall_startpos_1_x  =  200  :  w_roommate_startpos_y  =	200  :	player0y  =  200
   1303  1150
   1304  1150		       a9 c8		      LDA	#200
   1305  1152		       85 82		      STA	missile0x
   1306  1154		       85 91		      STA	missile0y
   1307  1156		       8d 6c f0 	      STA	w_extra_wall_startpos_1_x
   1308  1159		       8d 68 f0 	      STA	w_roommate_startpos_y
   1309  115c		       85 85		      STA	player0y
   1310  115e				   .
   1311  115e							; 
   1312  115e
   1313  115e				   .
   1314  115e							; 
   1315  115e
   1316  115e				   .
   1317  115e							; 
   1318  115e
   1319  115e				   .
   1320  115e							; 
   1321  115e
   1322  115e				   .
   1323  115e							; 
   1324  115e
   1325  115e				   .L0296		;  pfclear
   1326  115e
   1327  115e		       a9 00		      LDA	#0
   1328  1160		       85 ee		      sta	temp7
   1329  1162		       a9 91		      lda	#>(ret_point1-1)
   1330  1164		       48		      pha
   1331  1165		       a9 77		      lda	#<(ret_point1-1)
   1332  1167		       48		      pha
   1333  1168		       a9 f2		      lda	#>(pfclear-1)
   1334  116a		       48		      pha
   1335  116b		       a9 ee		      lda	#<(pfclear-1)
   1336  116d		       48		      pha
   1337  116e		       a5 ee		      lda	temp7
   1338  1170		       48		      pha
   1339  1171		       8a		      txa
   1340  1172		       48		      pha
   1341  1173		       a2 04		      ldx	#4
   1342  1175		       4c e8 ff 	      jmp	BS_jsr
   1343  1178				   ret_point1
   1344  1178				   .L0297		;  player1color:
   1345  1178
   1346  1178		       a2 15		      LDX	#<playercolorL0297_1
   1347  117a		       86 87		      STX	player1color
   1348  117c		       a9 fc		      LDA	#>playercolorL0297_1
   1349  117e		       85 88		      STA	player1color+1
   1350  1180				   .
   1351  1180							; 
   1352  1180
   1353  1180				   .L0298		;  goto _titlescreen_menu bank2
   1354  1180
   1355  1180		       85 ee		      sta	temp7
   1356  1182		       a9 b0		      lda	#>(._titlescreen_menu-1)
   1357  1184		       48		      pha
   1358  1185		       a9 ff		      lda	#<(._titlescreen_menu-1)
   1359  1187		       48		      pha
   1360  1188		       a5 ee		      lda	temp7
   1361  118a		       48		      pha
   1362  118b		       8a		      txa
   1363  118c		       48		      pha
   1364  118d		       a2 02		      ldx	#2
   1365  118f		       4c e8 ff 	      jmp	BS_jsr
   1366  1192				   .
   1367  1192							; 
   1368  1192
   1369  1192				   .
   1370  1192							; 
   1371  1192
   1372  1192				   .
   1373  1192							; 
   1374  1192
   1375  1192				   .
   1376  1192							; 
   1377  1192
   1378  1192				   .__Main_Loop
   1379  1192							; __Main_Loop
   1380  1192
   1381  1192				   .L0299		;  if switchreset then goto _Reset_To_Start
   1382  1192
   1383  1192		       a9 01		      lda	#1
   1384  1194		       2c 82 02 	      bit	SWCHB
   1385  1197		       d0 03		      BNE	.skipL0299
   1386  1199				   .condpart0
   1387  1199		       4c 1a 9d 	      jmp	._Reset_To_Start
   1388  119c
   1389  119c				   .skipL0299
   1390  119c				   .
   1391  119c							; 
   1392  119c
   1393  119c				   .L0300		;  COLUPF  =  r_room_color_top
   1394  119c
   1395  119c		       ad e0 f0 	      LDA	r_room_color_top
   1396  119f		       85 08		      STA	COLUPF
   1397  11a1				   .L0301		;  NUSIZ1  =  $05
   1398  11a1
   1399  11a1		       a9 05		      LDA	#$05
   1400  11a3		       85 05		      STA	NUSIZ1
   1401  11a5				   .L0302		;  NUSIZ0  =  $10
   1402  11a5
   1403  11a5		       a9 10		      LDA	#$10
   1404  11a7		       85 04		      STA	NUSIZ0
   1405  11a9				   .L0303		;  COLUBK  =  _00
   1406  11a9
   1407  11a9		       a9 00		      LDA	#_00
   1408  11ab		       85 09		      STA	COLUBK
   1409  11ad				   .L0304		;  TextColor  =  $0E
   1410  11ad
   1411  11ad		       a9 0e		      LDA	#$0E
   1412  11af		       85 f5		      STA	TextColor
   1413  11b1				   .
   1414  11b1							; 
   1415  11b1
   1416  11b1				   .L0305		;  if frame_counter{2} then player1: 
   1417  11b1
   1418  11b1		       a5 d5		      LDA	frame_counter
   1419  11b3		       29 04		      AND	#4
   1420  11b5		       f0 0c		      BEQ	.skipL0305
   1421  11b7				   .condpart1
   1422  11b7		       a2 1d		      LDX	#<player1then_1
   1423  11b9		       86 8c		      STX	player1pointerlo
   1424  11bb		       a9 fc		      LDA	#>player1then_1
   1425  11bd		       85 8d		      STA	player1pointerhi
   1426  11bf		       a9 07		      LDA	#7
   1427  11c1		       85 8f		      STA	player1height
   1428  11c3				   .skipL0305
   1429  11c3				   .L0306		;  if ! frame_counter{2} then player1:
   1430  11c3
   1431  11c3		       a5 d5		      LDA	frame_counter
   1432  11c5		       29 04		      AND	#4
   1433  11c7		       d0 0c		      BNE	.skipL0306
   1434  11c9				   .condpart2
   1435  11c9		       a2 25		      LDX	#<player2then_1
   1436  11cb		       86 8c		      STX	player1pointerlo
   1437  11cd		       a9 fc		      LDA	#>player2then_1
   1438  11cf		       85 8d		      STA	player1pointerhi
   1439  11d1		       a9 07		      LDA	#7
   1440  11d3		       85 8f		      STA	player1height
   1441  11d5				   .skipL0306
   1442  11d5				   .
   1443  11d5							; 
   1444  11d5
   1445  11d5				   .L0307		;  on roommate_type goto _roommate_Enemy_def _roommate_Air_Missile_def _roommate_Fuel_def _roommate_Soldier_def
   1446  11d5
   1447  11d5		       a6 de		      LDX	roommate_type
   1448  11d7		       bd e0 91 	      LDA	.L0307jumptablehi,x
   1449  11da		       48		      PHA
   1450  11db		       bd e4 91 	      LDA	.L0307jumptablelo,x
   1451  11de		       48		      PHA
   1452  11df		       60		      RTS
   1453  11e0				   .L0307jumptablehi
   1454  11e0		       91		      .byte.b	>(._roommate_Enemy_def-1)
   1455  11e1		       92		      .byte.b	>(._roommate_Air_Missile_def-1)
   1456  11e2		       92		      .byte.b	>(._roommate_Fuel_def-1)
   1457  11e3		       92		      .byte.b	>(._roommate_Soldier_def-1)
   1458  11e4				   .L0307jumptablelo
   1459  11e4		       e7		      .byte.b	<(._roommate_Enemy_def-1)
   1460  11e5		       0e		      .byte.b	<(._roommate_Air_Missile_def-1)
   1461  11e6		       1d		      .byte.b	<(._roommate_Fuel_def-1)
   1462  11e7		       2c		      .byte.b	<(._roommate_Soldier_def-1)
   1463  11e8				   .
   1464  11e8							; 
   1465  11e8
   1466  11e8				   ._roommate_Enemy_def
   1467  11e8							; _roommate_Enemy_def
   1468  11e8
   1469  11e8				   .L0308		;  if frame_counter{2} then player0: 
   1470  11e8
   1471  11e8		       a5 d5		      LDA	frame_counter
   1472  11ea		       29 04		      AND	#4
   1473  11ec		       f0 0c		      BEQ	.skipL0308
   1474  11ee				   .condpart3
   1475  11ee		       a2 2d		      LDX	#<player3then_0
   1476  11f0		       86 8a		      STX	player0pointerlo
   1477  11f2		       a9 fc		      LDA	#>player3then_0
   1478  11f4		       85 8b		      STA	player0pointerhi
   1479  11f6		       a9 06		      LDA	#6
   1480  11f8		       85 8e		      STA	player0height
   1481  11fa				   .skipL0308
   1482  11fa				   .L0309		;  if !frame_counter{2} then player0: 
   1483  11fa
   1484  11fa		       a5 d5		      LDA	frame_counter
   1485  11fc		       29 04		      AND	#4
   1486  11fe		       d0 0c		      BNE	.skipL0309
   1487  1200				   .condpart4
   1488  1200		       a2 34		      LDX	#<player4then_0
   1489  1202		       86 8a		      STX	player0pointerlo
   1490  1204		       a9 fc		      LDA	#>player4then_0
   1491  1206		       85 8b		      STA	player0pointerhi
   1492  1208		       a9 06		      LDA	#6
   1493  120a		       85 8e		      STA	player0height
   1494  120c				   .skipL0309
   1495  120c				   .L0310		;  goto _roommate_End_def
   1496  120c
   1497  120c		       4c 51 92 	      jmp	._roommate_End_def
   1498  120f
   1499  120f				   .
   1500  120f							; 
   1501  120f
   1502  120f				   ._roommate_Air_Missile_def
   1503  120f							; _roommate_Air_Missile_def
   1504  120f
   1505  120f				   .L0311		;  player0: 
   1506  120f
   1507  120f		       a2 3b		      LDX	#<playerL0311_0
   1508  1211		       86 8a		      STX	player0pointerlo
   1509  1213		       a9 fc		      LDA	#>playerL0311_0
   1510  1215		       85 8b		      STA	player0pointerhi
   1511  1217		       a9 0b		      LDA	#11
   1512  1219		       85 8e		      STA	player0height
   1513  121b				   .L0312		;  goto _roommate_End_def
   1514  121b
   1515  121b		       4c 51 92 	      jmp	._roommate_End_def
   1516  121e
   1517  121e				   .
   1518  121e							; 
   1519  121e
   1520  121e				   ._roommate_Fuel_def
   1521  121e							; _roommate_Fuel_def
   1522  121e
   1523  121e				   .L0313		;  player0: 
   1524  121e
   1525  121e		       a2 47		      LDX	#<playerL0313_0
   1526  1220		       86 8a		      STX	player0pointerlo
   1527  1222		       a9 fc		      LDA	#>playerL0313_0
   1528  1224		       85 8b		      STA	player0pointerhi
   1529  1226		       a9 18		      LDA	#24
   1530  1228		       85 8e		      STA	player0height
   1531  122a				   .L0314		;  goto _roommate_End_def
   1532  122a
   1533  122a		       4c 51 92 	      jmp	._roommate_End_def
   1534  122d
   1535  122d				   .
   1536  122d							; 
   1537  122d
   1538  122d				   ._roommate_Soldier_def
   1539  122d							; _roommate_Soldier_def
   1540  122d
   1541  122d				   .L0315		;  if frame_counter{2} then player0: 
   1542  122d
   1543  122d		       a5 d5		      LDA	frame_counter
   1544  122f		       29 04		      AND	#4
   1545  1231		       f0 0c		      BEQ	.skipL0315
   1546  1233				   .condpart5
   1547  1233		       a2 60		      LDX	#<player5then_0
   1548  1235		       86 8a		      STX	player0pointerlo
   1549  1237		       a9 fc		      LDA	#>player5then_0
   1550  1239		       85 8b		      STA	player0pointerhi
   1551  123b		       a9 03		      LDA	#3
   1552  123d		       85 8e		      STA	player0height
   1553  123f				   .skipL0315
   1554  123f				   .L0316		;  if !frame_counter{2} then player0: 
   1555  123f
   1556  123f		       a5 d5		      LDA	frame_counter
   1557  1241		       29 04		      AND	#4
   1558  1243		       d0 0c		      BNE	.skipL0316
   1559  1245				   .condpart6
   1560  1245		       a2 64		      LDX	#<player6then_0
   1561  1247		       86 8a		      STX	player0pointerlo
   1562  1249		       a9 fc		      LDA	#>player6then_0
   1563  124b		       85 8b		      STA	player0pointerhi
   1564  124d		       a9 03		      LDA	#3
   1565  124f		       85 8e		      STA	player0height
   1566  1251				   .skipL0316
   1567  1251				   ._roommate_End_def
   1568  1251							; _roommate_End_def
   1569  1251
   1570  1251				   .
   1571  1251							; 
   1572  1251
   1573  1251				   .
   1574  1251							; 
   1575  1251
   1576  1251				   .L0317		;  if !frame_counter{4} then _Skip_Wall_Movement
   1577  1251
   1578  1251		       a5 d5		      LDA	frame_counter
   1579  1253		       29 10		      AND	#16
   1580  1255					      if	((* - ._Skip_Wall_Movement) < 127) && ((* - ._Skip_Wall_Movement) > -128)
   1581  1255		       f0 35		      BEQ	._Skip_Wall_Movement
   1582  1257				  -	      else
   1583  1257				  -	      bne	.0skip_Skip_Wall_Movement
   1584  1257				  -	      jmp	._Skip_Wall_Movement
   1585  1257				  -.0skip_Skip_Wall_Movement
   1586  1257					      endif
   1587  1257				   .L0318		;  if r_extra_wall_type_and_range{1}  ||  r_extra_wall_type_and_range	<  2 then _Finish_Interior_Movement
   1588  1257
   1589  1257		       ad e9 f0 	      LDA	r_extra_wall_type_and_range
   1590  125a		       29 02		      AND	#2
   1591  125c					      if	((* - ._Finish_Interior_Movement) < 127) && ((* - ._Finish_Interior_Movement) > -128)
   1592  125c		       d0 59		      BNE	._Finish_Interior_Movement
   1593  125e				  -	      else
   1594  125e				  -	      beq	.1skip_Finish_Interior_Movement
   1595  125e				  -	      jmp	._Finish_Interior_Movement
   1596  125e				  -.1skip_Finish_Interior_Movement
   1597  125e					      endif
   1598  125e		       ad e9 f0 	      LDA	r_extra_wall_type_and_range
   1599  1261		       c9 02		      CMP	#2
   1600  1263					      if	((* - ._Finish_Interior_Movement) < 127) && ((* - ._Finish_Interior_Movement) > -128)
   1601  1263		       90 52		      bcc	._Finish_Interior_Movement
   1602  1265				  -	      else
   1603  1265				  -	      bcs	.2skip_Finish_Interior_Movement
   1604  1265				  -	      jmp	._Finish_Interior_Movement
   1605  1265				  -.2skip_Finish_Interior_Movement
   1606  1265					      endif
   1607  1265				   .L0319		;  if _Bit4_Wall_Dir{4} then extra_wall_move_x  =  extra_wall_move_x  -  1 else extra_wall_move_x  =  extra_wall_move_x  +  1
   1608  1265
   1609  1265		       a5 ec		      LDA	_Bit4_Wall_Dir
   1610  1267		       29 10		      AND	#16
   1611  1269		       f0 05		      BEQ	.skipL0319
   1612  126b				   .condpart7
   1613  126b		       c6 dc		      DEC	extra_wall_move_x
   1614  126d		       4c 72 92 	      jmp	.skipelse0
   1615  1270				   .skipL0319
   1616  1270		       e6 dc		      INC	extra_wall_move_x
   1617  1272				   .skipelse0
   1618  1272				   .L0320		;  if extra_wall_move_x  =  r_extra_wall_type_and_range then _Bit4_Wall_Dir{4}  =  1
   1619  1272
   1620  1272		       a5 dc		      LDA	extra_wall_move_x
   1621  1274		       cd e9 f0 	      CMP	r_extra_wall_type_and_range
   1622  1277		       d0 06		      BNE	.skipL0320
   1623  1279				   .condpart8
   1624  1279		       a5 ec		      LDA	_Bit4_Wall_Dir
   1625  127b		       09 10		      ORA	#16
   1626  127d		       85 ec		      STA	_Bit4_Wall_Dir
   1627  127f				   .skipL0320
   1628  127f				   .L0321		;  if !extra_wall_move_x then _Bit4_Wall_Dir{4}  =  0
   1629  127f
   1630  127f		       a5 dc		      LDA	extra_wall_move_x
   1631  1281		       d0 06		      BNE	.skipL0321
   1632  1283				   .condpart9
   1633  1283		       a5 ec		      LDA	_Bit4_Wall_Dir
   1634  1285		       29 ef		      AND	#239
   1635  1287		       85 ec		      STA	_Bit4_Wall_Dir
   1636  1289				   .skipL0321
   1637  1289				   .L0322		;  goto _Finish_Interior_Movement
   1638  1289
   1639  1289		       4c b7 92 	      jmp	._Finish_Interior_Movement
   1640  128c
   1641  128c				   ._Skip_Wall_Movement
   1642  128c							; _Skip_Wall_Movement
   1643  128c
   1644  128c				   .
   1645  128c							; 
   1646  128c
   1647  128c				   .L0323		;  if r_roommate_type_and_range  <  4 then _Finish_Interior_Movement
   1648  128c
   1649  128c		       ad e6 f0 	      LDA	r_roommate_type_and_range
   1650  128f		       c9 04		      CMP	#4
   1651  1291					      if	((* - ._Finish_Interior_Movement) < 127) && ((* - ._Finish_Interior_Movement) > -128)
   1652  1291		       90 24		      bcc	._Finish_Interior_Movement
   1653  1293				  -	      else
   1654  1293				  -	      bcs	.3skip_Finish_Interior_Movement
   1655  1293				  -	      jmp	._Finish_Interior_Movement
   1656  1293				  -.3skip_Finish_Interior_Movement
   1657  1293					      endif
   1658  1293				   .L0324		;  if _Bit2_roommate_Dir{2} then roommate_move_x  =  roommate_move_x  -  1 else roommate_move_x  =  roommate_move_x  +  1
   1659  1293
   1660  1293		       a5 ec		      LDA	_Bit2_roommate_Dir
   1661  1295		       29 04		      AND	#4
   1662  1297		       f0 05		      BEQ	.skipL0324
   1663  1299				   .condpart10
   1664  1299		       c6 dd		      DEC	roommate_move_x
   1665  129b		       4c a0 92 	      jmp	.skipelse1
   1666  129e				   .skipL0324
   1667  129e		       e6 dd		      INC	roommate_move_x
   1668  12a0				   .skipelse1
   1669  12a0				   .L0325		;  if roommate_move_x	=  r_roommate_type_and_range then _Bit2_roommate_Dir{2}  =  1
   1670  12a0
   1671  12a0		       a5 dd		      LDA	roommate_move_x
   1672  12a2		       cd e6 f0 	      CMP	r_roommate_type_and_range
   1673  12a5		       d0 06		      BNE	.skipL0325
   1674  12a7				   .condpart11
   1675  12a7		       a5 ec		      LDA	_Bit2_roommate_Dir
   1676  12a9		       09 04		      ORA	#4
   1677  12ab		       85 ec		      STA	_Bit2_roommate_Dir
   1678  12ad				   .skipL0325
   1679  12ad				   .L0326		;  if !roommate_move_x then _Bit2_roommate_Dir{2}  =  0
   1680  12ad
   1681  12ad		       a5 dd		      LDA	roommate_move_x
   1682  12af		       d0 06		      BNE	.skipL0326
   1683  12b1				   .condpart12
   1684  12b1		       a5 ec		      LDA	_Bit2_roommate_Dir
   1685  12b3		       29 fb		      AND	#251
   1686  12b5		       85 ec		      STA	_Bit2_roommate_Dir
   1687  12b7				   .skipL0326
   1688  12b7				   .
   1689  12b7							; 
   1690  12b7
   1691  12b7				   ._Finish_Interior_Movement
   1692  12b7							; _Finish_Interior_Movement
   1693  12b7
   1694  12b7				   .
   1695  12b7							; 
   1696  12b7
   1697  12b7				   .L0327		;  frame_counter  =  frame_counter  -	1
   1698  12b7
   1699  12b7		       c6 d5		      DEC	frame_counter
   1700  12b9				   .
   1701  12b9							; 
   1702  12b9
   1703  12b9				   .
   1704  12b9							; 
   1705  12b9
   1706  12b9				   .L0328		;  if r_extra_wall_startpos_1_x  =  200 then _Skip_extra_Wall
   1707  12b9
   1708  12b9		       ad ec f0 	      LDA	r_extra_wall_startpos_1_x
   1709  12bc		       c9 c8		      CMP	#200
   1710  12be					      if	((* - ._Skip_extra_Wall) < 127) && ((* - ._Skip_extra_Wall) > -128)
   1711  12be		       f0 62		      BEQ	._Skip_extra_Wall
   1712  12c0				  -	      else
   1713  12c0				  -	      bne	.4skip_Skip_extra_Wall
   1714  12c0				  -	      jmp	._Skip_extra_Wall
   1715  12c0				  -.4skip_Skip_extra_Wall
   1716  12c0					      endif
   1717  12c0				   .L0329		;  if _BitOp_Ball_Shot_Dir  &&  frame_counter{0} then _Skip_extra_Wall
   1718  12c0
   1719  12c0		       a5 d6		      LDA	_BitOp_Ball_Shot_Dir
   1720  12c2		       f0 05		      BEQ	.skipL0329
   1721  12c4				   .condpart13
   1722  12c4		       a5 d5		      LDA	frame_counter
   1723  12c6		       4a		      LSR
   1724  12c7					      if	((* - ._Skip_extra_Wall) < 127) && ((* - ._Skip_extra_Wall) > -128)
   1725  12c7		       b0 59		      bcs	._Skip_extra_Wall
   1726  12c9				  -	      else
   1727  12c9				  -	      bcc	.5skip_Skip_extra_Wall
   1728  12c9				  -	      jmp	._Skip_extra_Wall
   1729  12c9				  -.5skip_Skip_extra_Wall
   1730  12c9					      endif
   1731  12c9				   .skipL0329
   1732  12c9				   .L0330		;  if !r_extra_wall_width  &&	frame_counter{1} then _Set_Second_Wall_pos
   1733  12c9
   1734  12c9		       ad ea f0 	      LDA	r_extra_wall_width
   1735  12cc		       d0 06		      BNE	.skipL0330
   1736  12ce				   .condpart14
   1737  12ce		       a5 d5		      LDA	frame_counter
   1738  12d0		       29 02		      AND	#2
   1739  12d2					      if	((* - ._Set_Second_Wall_pos) < 127) && ((* - ._Set_Second_Wall_pos) > -128)
   1740  12d2		       d0 32		      BNE	._Set_Second_Wall_pos
   1741  12d4				  -	      else
   1742  12d4				  -	      beq	.6skip_Set_Second_Wall_pos
   1743  12d4				  -	      jmp	._Set_Second_Wall_pos
   1744  12d4				  -.6skip_Set_Second_Wall_pos
   1745  12d4					      endif
   1746  12d4				   .skipL0330
   1747  12d4				   .L0331		;  if r_extra_wall_type_and_range{1}  &&  frame_counter  <  r_extra_wall_type_and_range then _Set_Second_Wall_pos
   1748  12d4
   1749  12d4		       ad e9 f0 	      LDA	r_extra_wall_type_and_range
   1750  12d7		       29 02		      AND	#2
   1751  12d9		       f0 07		      BEQ	.skipL0331
   1752  12db				   .condpart15
   1753  12db		       a5 d5		      LDA	frame_counter
   1754  12dd		       cd e9 f0 	      CMP	r_extra_wall_type_and_range
   1755  12e0					      if	((* - ._Set_Second_Wall_pos) < 127) && ((* - ._Set_Second_Wall_pos) > -128)
   1756  12e0		       90 24		      bcc	._Set_Second_Wall_pos
   1757  12e2				  -	      else
   1758  12e2				  -	      bcs	.7skip_Set_Second_Wall_pos
   1759  12e2				  -	      jmp	._Set_Second_Wall_pos
   1760  12e2				  -.7skip_Set_Second_Wall_pos
   1761  12e2					      endif
   1762  12e2				   .skipL0331
   1763  12e2				   .L0332		;  if r_extra_wall_startpos_2_x  <>  200  &&  !r_extra_wall_type_and_range{1}	&&  frame_counter{1} then _Set_Second_Wall_pos
   1764  12e2
   1765  12e2		       ad ee f0 	      LDA	r_extra_wall_startpos_2_x
   1766  12e5		       c9 c8		      CMP	#200
   1767  12e7		       f0 0d		      BEQ	.skipL0332
   1768  12e9				   .condpart16
   1769  12e9		       ad e9 f0 	      LDA	r_extra_wall_type_and_range
   1770  12ec		       29 02		      AND	#2
   1771  12ee		       d0 06		      BNE	.skip16then
   1772  12f0				   .condpart17
   1773  12f0		       a5 d5		      LDA	frame_counter
   1774  12f2		       29 02		      AND	#2
   1775  12f4					      if	((* - ._Set_Second_Wall_pos) < 127) && ((* - ._Set_Second_Wall_pos) > -128)
   1776  12f4		       d0 10		      BNE	._Set_Second_Wall_pos
   1777  12f6				  -	      else
   1778  12f6				  -	      beq	.8skip_Set_Second_Wall_pos
   1779  12f6				  -	      jmp	._Set_Second_Wall_pos
   1780  12f6				  -.8skip_Set_Second_Wall_pos
   1781  12f6					      endif
   1782  12f6				   .skip16then
   1783  12f6				   .skipL0332
   1784  12f6				   .L0333		;  bally  =  r_extra_wall_startpos_1_y  :  ballx  =  r_extra_wall_startpos_1_x  +  extra_wall_move_x
   1785  12f6
   1786  12f6		       ad ed f0 	      LDA	r_extra_wall_startpos_1_y
   1787  12f9		       85 89		      STA	bally
   1788  12fb		       ad ec f0 	      LDA	r_extra_wall_startpos_1_x
   1789  12fe		       18		      CLC
   1790  12ff		       65 dc		      ADC	extra_wall_move_x
   1791  1301		       85 84		      STA	ballx
   1792  1303				   .L0334		;  goto _Skip_Second_Wall_pos
   1793  1303
   1794  1303		       4c 13 93 	      jmp	._Skip_Second_Wall_pos
   1795  1306
   1796  1306				   ._Set_Second_Wall_pos
   1797  1306							; _Set_Second_Wall_pos
   1798  1306
   1799  1306				   .L0335		;  bally  =  r_extra_wall_startpos_2_y  :  ballx  =  r_extra_wall_startpos_2_x  +  extra_wall_move_x
   1800  1306
   1801  1306		       ad ef f0 	      LDA	r_extra_wall_startpos_2_y
   1802  1309		       85 89		      STA	bally
   1803  130b		       ad ee f0 	      LDA	r_extra_wall_startpos_2_x
   1804  130e		       18		      CLC
   1805  130f		       65 dc		      ADC	extra_wall_move_x
   1806  1311		       85 84		      STA	ballx
   1807  1313				   ._Skip_Second_Wall_pos
   1808  1313							; _Skip_Second_Wall_pos
   1809  1313
   1810  1313				   .
   1811  1313							; 
   1812  1313
   1813  1313				   .L0336		;  ballheight	=  r_extra_wall_height
   1814  1313
   1815  1313		       ad eb f0 	      LDA	r_extra_wall_height
   1816  1316		       85 92		      STA	ballheight
   1817  1318				   .L0337		;  CTRLPF  =  r_extra_wall_width  |  1
   1818  1318
   1819  1318		       ad ea f0 	      LDA	r_extra_wall_width
   1820  131b		       09 01		      ORA	#1
   1821  131d		       85 0a		      STA	CTRLPF
   1822  131f				   .L0338		;  goto _Skip_ball_shot
   1823  131f
   1824  131f		       4c 36 93 	      jmp	._Skip_ball_shot
   1825  1322
   1826  1322				   ._Skip_extra_Wall
   1827  1322							; _Skip_extra_Wall
   1828  1322
   1829  1322				   .
   1830  1322							; 
   1831  1322
   1832  1322				   .L0339		;  if !_BitOp_Ball_Shot_Dir then _Skip_ball_shot
   1833  1322
   1834  1322		       a5 d6		      LDA	_BitOp_Ball_Shot_Dir
   1835  1324					      if	((* - ._Skip_ball_shot) < 127) && ((* - ._Skip_ball_shot) > -128)
   1836  1324		       f0 10		      BEQ	._Skip_ball_shot
   1837  1326				  -	      else
   1838  1326				  -	      bne	.9skip_Skip_ball_shot
   1839  1326				  -	      jmp	._Skip_ball_shot
   1840  1326				  -.9skip_Skip_ball_shot
   1841  1326					      endif
   1842  1326				   .L0340		;  ballx  =  ball_shoot_x
   1843  1326
   1844  1326		       a5 ae		      LDA	ball_shoot_x
   1845  1328		       85 84		      STA	ballx
   1846  132a				   .L0341		;  bally  =  ball_shoot_y
   1847  132a
   1848  132a		       a5 af		      LDA	ball_shoot_y
   1849  132c		       85 89		      STA	bally
   1850  132e				   .L0342		;  ballheight	=  1
   1851  132e
   1852  132e		       a9 01		      LDA	#1
   1853  1330		       85 92		      STA	ballheight
   1854  1332				   .L0343		;  CTRLPF  =  %00010001
   1855  1332
   1856  1332		       a9 11		      LDA	#%00010001
   1857  1334		       85 0a		      STA	CTRLPF
   1858  1336				   ._Skip_ball_shot
   1859  1336							; _Skip_ball_shot
   1860  1336
   1861  1336				   .
   1862  1336							; 
   1863  1336
   1864  1336				   .
   1865  1336							; 
   1866  1336
   1867  1336				   .L0344		;  if r_roommate_startpos_y  =  200 then _Skip_enemy
   1868  1336
   1869  1336		       ad e8 f0 	      LDA	r_roommate_startpos_y
   1870  1339		       c9 c8		      CMP	#200
   1871  133b					      if	((* - ._Skip_enemy) < 127) && ((* - ._Skip_enemy) > -128)
   1872  133b		       f0 0d		      BEQ	._Skip_enemy
   1873  133d				  -	      else
   1874  133d				  -	      bne	.10skip_Skip_enemy
   1875  133d				  -	      jmp	._Skip_enemy
   1876  133d				  -.10skip_Skip_enemy
   1877  133d					      endif
   1878  133d				   .L0345		;  player0x  =  r_roommate_startpos_x	+  roommate_move_x
   1879  133d
   1880  133d		       ad e7 f0 	      LDA	r_roommate_startpos_x
   1881  1340		       18		      CLC
   1882  1341		       65 dd		      ADC	roommate_move_x
   1883  1343		       85 80		      STA	player0x
   1884  1345				   .L0346		;  player0y  =  r_roommate_startpos_y
   1885  1345
   1886  1345		       ad e8 f0 	      LDA	r_roommate_startpos_y
   1887  1348		       85 85		      STA	player0y
   1888  134a				   ._Skip_enemy
   1889  134a							; _Skip_enemy
   1890  134a
   1891  134a				   .
   1892  134a							; 
   1893  134a
   1894  134a				   .
   1895  134a							; 
   1896  134a
   1897  134a				   .
   1898  134a							; 
   1899  134a
   1900  134a				   .
   1901  134a							; 
   1902  134a
   1903  134a				   .L0347		;  if delay_counter then delay_counter  =  delay_counter  -  1  :  temp4  =  SWCHA  :	goto _skip_game_action
   1904  134a
   1905  134a		       a5 d4		      LDA	delay_counter
   1906  134c		       f0 0a		      BEQ	.skipL0347
   1907  134e				   .condpart18
   1908  134e		       c6 d4		      DEC	delay_counter
   1909  1350		       ad 80 02 	      LDA	SWCHA
   1910  1353		       85 9f		      STA	temp4
   1911  1355		       4c b5 98 	      jmp	._skip_game_action
   1912  1358
   1913  1358				   .skipL0347
   1914  1358				   .
   1915  1358							; 
   1916  1358
   1917  1358				   .L0348		;  if _Bit5_Request_Pending{5}  &&  ReceiveBufferSize	>  response_size_minus_1 then goto _Change_Room
   1918  1358
   1919  1358		       a5 ec		      LDA	_Bit5_Request_Pending
   1920  135a		       29 20		      AND	#32
   1921  135c		       f0 0a		      BEQ	.skipL0348
   1922  135e				   .condpart19
   1923  135e		       a9 1e		      LDA	#response_size_minus_1
   1924  1360		       cd f3 1f 	      CMP	ReceiveBufferSize
   1925  1363		       b0 03		      BCS	.skip19then
   1926  1365				   .condpart20
   1927  1365		       4c bb 9c 	      jmp	._Change_Room
   1928  1368
   1929  1368				   .skip19then
   1930  1368				   .skipL0348
   1931  1368				   .
   1932  1368							; 
   1933  1368
   1934  1368				   .L0349		;  if _Bit5_Request_Pending{5} then temp4  =  SWCHA  :  goto _skip_game_action
   1935  1368
   1936  1368		       a5 ec		      LDA	_Bit5_Request_Pending
   1937  136a		       29 20		      AND	#32
   1938  136c		       f0 08		      BEQ	.skipL0349
   1939  136e				   .condpart21
   1940  136e		       ad 80 02 	      LDA	SWCHA
   1941  1371		       85 9f		      STA	temp4
   1942  1373		       4c b5 98 	      jmp	._skip_game_action
   1943  1376
   1944  1376				   .skipL0349
   1945  1376				   .
   1946  1376							; 
   1947  1376
   1948  1376				   .
   1949  1376							; 
   1950  1376
   1951  1376				   .L0350		;  on Game_Status goto _game_action _game_over_action _Level_Finished_loop _Explosion_loop
   1952  1376
   1953  1376		       a6 d3		      LDX	Game_Status
   1954  1378		       bd 81 93 	      LDA	.L0350jumptablehi,x
   1955  137b		       48		      PHA
   1956  137c		       bd 85 93 	      LDA	.L0350jumptablelo,x
   1957  137f		       48		      PHA
   1958  1380		       60		      RTS
   1959  1381				   .L0350jumptablehi
   1960  1381		       93		      .byte.b	>(._game_action-1)
   1961  1382		       9a		      .byte.b	>(._game_over_action-1)
   1962  1383		       9a		      .byte.b	>(._Level_Finished_loop-1)
   1963  1384		       9a		      .byte.b	>(._Explosion_loop-1)
   1964  1385				   .L0350jumptablelo
   1965  1385		       88		      .byte.b	<(._game_action-1)
   1966  1386		       71		      .byte.b	<(._game_over_action-1)
   1967  1387		       7b		      .byte.b	<(._Level_Finished_loop-1)
   1968  1388		       f2		      .byte.b	<(._Explosion_loop-1)
   1969  1389				   .
   1970  1389							; 
   1971  1389
   1972  1389				   ._game_action
   1973  1389							; _game_action
   1974  1389
   1975  1389				   .
   1976  1389							; 
   1977  1389
   1978  1389				   .L0351		;  if frame_counter then _Skip_dec_bonus_and_fuel
   1979  1389
   1980  1389		       a5 d5		      LDA	frame_counter
   1981  138b					      if	((* - ._Skip_dec_bonus_and_fuel) < 127) && ((* - ._Skip_dec_bonus_and_fuel) > -128)
   1982  138b		       d0 16		      BNE	._Skip_dec_bonus_and_fuel
   1983  138d				  -	      else
   1984  138d				  -	      beq	.11skip_Skip_dec_bonus_and_fuel
   1985  138d				  -	      jmp	._Skip_dec_bonus_and_fuel
   1986  138d				  -.11skip_Skip_dec_bonus_and_fuel
   1987  138d					      endif
   1988  138d				   .L0352		;  if bonus_bcd_counter then dec bonus_bcd_counter  =	bonus_bcd_counter  -  1
   1989  138d
   1990  138d		       a5 b1		      LDA	bonus_bcd_counter
   1991  138f		       f0 09		      BEQ	.skipL0352
   1992  1391				   .condpart22
   1993  1391		       f8		      SED
   1994  1392		       a5 b1		      LDA	bonus_bcd_counter
   1995  1394		       38		      SEC
   1996  1395		       e9 01		      SBC	#1
   1997  1397		       85 b1		      STA	bonus_bcd_counter
   1998  1399		       d8		      CLD
   1999  139a				   .skipL0352
   2000  139a				   .
   2001  139a							; 
   2002  139a
   2003  139a				   .L0353		;  if pfscore2 then pfscore2  =  pfscore2  /  2
   2004  139a
   2005  139a		       a5 f3		      LDA	pfscore2
   2006  139c		       f0 05		      BEQ	.skipL0353
   2007  139e				   .condpart23
   2008  139e		       a5 f3		      LDA	pfscore2
   2009  13a0		       4a		      lsr
   2010  13a1		       85 f3		      STA	pfscore2
   2011  13a3				   .skipL0353
   2012  13a3				   .
   2013  13a3							; 
   2014  13a3
   2015  13a3				   ._Skip_dec_bonus_and_fuel
   2016  13a3							; _Skip_dec_bonus_and_fuel
   2017  13a3
   2018  13a3				   .
   2019  13a3							; 
   2020  13a3
   2021  13a3				   .L0354		;  if !pfscore2  &&  !_Ch0_Sound then _Ch0_Sound  =  4  :  _Ch0_Duration  =  1  :  _Ch0_Counter  =  0
   2022  13a3
   2023  13a3		       a5 f3		      LDA	pfscore2
   2024  13a5		       d0 10		      BNE	.skipL0354
   2025  13a7				   .condpart24
   2026  13a7		       a5 d9		      LDA	_Ch0_Sound
   2027  13a9		       d0 0c		      BNE	.skip24then
   2028  13ab				   .condpart25
   2029  13ab		       a9 04		      LDA	#4
   2030  13ad		       85 d9		      STA	_Ch0_Sound
   2031  13af		       a9 01		      LDA	#1
   2032  13b1		       85 da		      STA	_Ch0_Duration
   2033  13b3		       a9 00		      LDA	#0
   2034  13b5		       85 db		      STA	_Ch0_Counter
   2035  13b7				   .skip24then
   2036  13b7				   .skipL0354
   2037  13b7				   .
   2038  13b7							; 
   2039  13b7
   2040  13b7				   .
   2041  13b7							; 
   2042  13b7
   2043  13b7				   .L0355		;  if player0y  =  200 then goto __Skip_Enemy_Fire
   2044  13b7
   2045  13b7		       a5 85		      LDA	player0y
   2046  13b9		       c9 c8		      CMP	#200
   2047  13bb		       d0 03		      BNE	.skipL0355
   2048  13bd				   .condpart26
   2049  13bd		       4c 6f 94 	      jmp	.__Skip_Enemy_Fire
   2050  13c0
   2051  13c0				   .skipL0355
   2052  13c0				   .L0356		;  if _BitOp_Ball_Shot_Dir  ||  roommate_type then goto __Skip_Enemy_Fire
   2053  13c0
   2054  13c0		       a5 d6		      LDA	_BitOp_Ball_Shot_Dir
   2055  13c2		       f0 03		      BEQ	.skipL0356
   2056  13c4				   .condpart27
   2057  13c4		       4c cb 93 	      jmp	.condpart28
   2058  13c7				   .skipL0356
   2059  13c7		       a5 de		      LDA	roommate_type
   2060  13c9		       f0 03		      BEQ	.skip8OR
   2061  13cb				   .condpart28
   2062  13cb		       4c 6f 94 	      jmp	.__Skip_Enemy_Fire
   2063  13ce
   2064  13ce				   .skip8OR
   2065  13ce				   .L0357		;  temp4  =  frame_counter  &	127
   2066  13ce
   2067  13ce		       a5 d5		      LDA	frame_counter
   2068  13d0		       29 7f		      AND	#127
   2069  13d2		       85 9f		      STA	temp4
   2070  13d4				   .L0358		;  if temp4  <>  next_shoot_rand then goto __Skip_Enemy_Fire
   2071  13d4
   2072  13d4		       a5 9f		      LDA	temp4
   2073  13d6		       c5 b4		      CMP	next_shoot_rand
   2074  13d8		       f0 03		      BEQ	.skipL0358
   2075  13da				   .condpart29
   2076  13da		       4c 6f 94 	      jmp	.__Skip_Enemy_Fire
   2077  13dd
   2078  13dd				   .skipL0358
   2079  13dd				   .
   2080  13dd							; 
   2081  13dd
   2082  13dd				   .L0359		;  next_shoot_rand  =	 (  rand16  &  127 ) 
   2083  13dd
   2084  13dd							; complex statement detected
   2085  13dd		       85 ee		      sta	temp7
   2086  13df		       a9 93		      lda	#>(ret_point2-1)
   2087  13e1		       48		      pha
   2088  13e2		       a9 f4		      lda	#<(ret_point2-1)
   2089  13e4		       48		      pha
   2090  13e5		       a9 f4		      lda	#>(randomize-1)
   2091  13e7		       48		      pha
   2092  13e8		       a9 d5		      lda	#<(randomize-1)
   2093  13ea		       48		      pha
   2094  13eb		       a5 ee		      lda	temp7
   2095  13ed		       48		      pha
   2096  13ee		       8a		      txa
   2097  13ef		       48		      pha
   2098  13f0		       a2 04		      ldx	#4
   2099  13f2		       4c e8 ff 	      jmp	BS_jsr
   2100  13f5				   ret_point2
   2101  13f5		       29 7f		      AND	#127
   2102  13f7		       85 b4		      STA	next_shoot_rand
   2103  13f9				   .L0360		;  _BitOp_Ball_Shot_Dir  =  0	:  Bally_velocity  =  0.0  :  q  =  0
   2104  13f9
   2105  13f9		       a9 00		      LDA	#0
   2106  13fb		       85 d6		      STA	_BitOp_Ball_Shot_Dir
   2107  13fd		       a2 00		      LDX	#0
   2108  13ff		       86 e4		      STX	q
   2109  1401		       a9 00		      LDA	#0
   2110  1403		       85 e3		      STA	Bally_velocity
   2111  1405		       a9 00		      LDA	#0
   2112  1407		       85 e4		      STA	q
   2113  1409				   .
   2114  1409							; 
   2115  1409
   2116  1409				   .L0361		;  ball_shoot_x  =  player0x  +  4  :	ball_shoot_y  =  player0y  -  5
   2117  1409
   2118  1409		       a5 80		      LDA	player0x
   2119  140b		       18		      CLC
   2120  140c		       69 04		      ADC	#4
   2121  140e		       85 ae		      STA	ball_shoot_x
   2122  1410		       a5 85		      LDA	player0y
   2123  1412		       38		      SEC
   2124  1413		       e9 05		      SBC	#5
   2125  1415		       85 af		      STA	ball_shoot_y
   2126  1417				   .
   2127  1417							; 
   2128  1417
   2129  1417				   .
   2130  1417							; 
   2131  1417
   2132  1417				   .L0362		;  if _Ch0_Sound  <>  3 then _Ch0_Sound  =  2	:  _Ch0_Duration  =  1	:  _Ch0_Counter  =  0
   2133  1417
   2134  1417		       a5 d9		      LDA	_Ch0_Sound
   2135  1419		       c9 03		      CMP	#3
   2136  141b		       f0 0c		      BEQ	.skipL0362
   2137  141d				   .condpart30
   2138  141d		       a9 02		      LDA	#2
   2139  141f		       85 d9		      STA	_Ch0_Sound
   2140  1421		       a9 01		      LDA	#1
   2141  1423		       85 da		      STA	_Ch0_Duration
   2142  1425		       a9 00		      LDA	#0
   2143  1427		       85 db		      STA	_Ch0_Counter
   2144  1429				   .skipL0362
   2145  1429				   .
   2146  1429							; 
   2147  1429
   2148  1429				   .L0363		;  if player1x  >  player0x then _Bit2_Ball_Shot_Dir_Right1{2}  =  1 else _Bit0_Ball_Shot_Dir_Left1{0}  =  1
   2149  1429
   2150  1429		       a5 80		      LDA	player0x
   2151  142b		       c5 81		      CMP	player1x
   2152  142d		       b0 09		      BCS	.skipL0363
   2153  142f				   .condpart31
   2154  142f		       a5 d6		      LDA	_Bit2_Ball_Shot_Dir_Right1
   2155  1431		       09 04		      ORA	#4
   2156  1433		       85 d6		      STA	_Bit2_Ball_Shot_Dir_Right1
   2157  1435		       4c 3e 94 	      jmp	.skipelse2
   2158  1438				   .skipL0363
   2159  1438		       a5 d6		      LDA	_Bit0_Ball_Shot_Dir_Left1
   2160  143a		       09 01		      ORA	#1
   2161  143c		       85 d6		      STA	_Bit0_Ball_Shot_Dir_Left1
   2162  143e				   .skipelse2
   2163  143e				   .L0364		;  if !_Bit2_Ball_Shot_Dir_Right1{2} then __Skip_Additional_Right
   2164  143e
   2165  143e		       a5 d6		      LDA	_Bit2_Ball_Shot_Dir_Right1
   2166  1440		       29 04		      AND	#4
   2167  1442					      if	((* - .__Skip_Additional_Right) < 127) && ((* - .__Skip_Additional_Right) > -128)
   2168  1442		       f0 13		      BEQ	.__Skip_Additional_Right
   2169  1444				  -	      else
   2170  1444				  -	      bne	.12skip__Skip_Additional_Right
   2171  1444				  -	      jmp	.__Skip_Additional_Right
   2172  1444				  -.12skip__Skip_Additional_Right
   2173  1444					      endif
   2174  1444				   .L0365		;  temp4  =  player1x	-  player0x
   2175  1444
   2176  1444		       a5 81		      LDA	player1x
   2177  1446		       38		      SEC
   2178  1447		       e5 80		      SBC	player0x
   2179  1449		       85 9f		      STA	temp4
   2180  144b				   .L0366		;  if temp4  >  25 then _Bit3_Ball_Shot_Dir_Right2{3}	=  1
   2181  144b
   2182  144b		       a9 19		      LDA	#25
   2183  144d		       c5 9f		      CMP	temp4
   2184  144f		       b0 06		      BCS	.skipL0366
   2185  1451				   .condpart32
   2186  1451		       a5 d6		      LDA	_Bit3_Ball_Shot_Dir_Right2
   2187  1453		       09 08		      ORA	#8
   2188  1455		       85 d6		      STA	_Bit3_Ball_Shot_Dir_Right2
   2189  1457				   .skipL0366
   2190  1457				   .__Skip_Additional_Right
   2191  1457							; __Skip_Additional_Right
   2192  1457
   2193  1457				   .L0367		;  if !_Bit0_Ball_Shot_Dir_Left1{0} then __Skip_Enemy_Fire
   2194  1457
   2195  1457		       a5 d6		      LDA	_Bit0_Ball_Shot_Dir_Left1
   2196  1459		       4a		      LSR
   2197  145a					      if	((* - .__Skip_Enemy_Fire) < 127) && ((* - .__Skip_Enemy_Fire) > -128)
   2198  145a		       90 13		      bcc	.__Skip_Enemy_Fire
   2199  145c				  -	      else
   2200  145c				  -	      bcs	.13skip__Skip_Enemy_Fire
   2201  145c				  -	      jmp	.__Skip_Enemy_Fire
   2202  145c				  -.13skip__Skip_Enemy_Fire
   2203  145c					      endif
   2204  145c				   .L0368		;  temp4  =  player0x	-  player1x
   2205  145c
   2206  145c		       a5 80		      LDA	player0x
   2207  145e		       38		      SEC
   2208  145f		       e5 81		      SBC	player1x
   2209  1461		       85 9f		      STA	temp4
   2210  1463				   .L0369		;  if temp4  >  25 then _Bit1_Ball_Shot_Dir_Left2{1}  =  1
   2211  1463
   2212  1463		       a9 19		      LDA	#25
   2213  1465		       c5 9f		      CMP	temp4
   2214  1467		       b0 06		      BCS	.skipL0369
   2215  1469				   .condpart33
   2216  1469		       a5 d6		      LDA	_Bit1_Ball_Shot_Dir_Left2
   2217  146b		       09 02		      ORA	#2
   2218  146d		       85 d6		      STA	_Bit1_Ball_Shot_Dir_Left2
   2219  146f				   .skipL0369
   2220  146f				   .
   2221  146f							; 
   2222  146f
   2223  146f				   .__Skip_Enemy_Fire
   2224  146f							; __Skip_Enemy_Fire
   2225  146f
   2226  146f				   .
   2227  146f							; 
   2228  146f
   2229  146f				   .
   2230  146f							; 
   2231  146f
   2232  146f				   .
   2233  146f							; 
   2234  146f
   2235  146f				   .L0370		;  if !_BitOp_Ball_Shot_Dir then goto __Skip_Enemy_Missile
   2236  146f
   2237  146f		       a5 d6		      LDA	_BitOp_Ball_Shot_Dir
   2238  1471		       d0 03		      BNE	.skipL0370
   2239  1473				   .condpart34
   2240  1473		       4c e7 94 	      jmp	.__Skip_Enemy_Missile
   2241  1476
   2242  1476				   .skipL0370
   2243  1476				   .
   2244  1476							; 
   2245  1476
   2246  1476				   .
   2247  1476							; 
   2248  1476
   2249  1476				   .L0371		;  if ball_shoot_y  >	player1y then ball_shoot_y  =  ball_shoot_y  -	1
   2250  1476
   2251  1476		       a5 86		      LDA	player1y
   2252  1478		       c5 af		      CMP	ball_shoot_y
   2253  147a		       b0 02		      BCS	.skipL0371
   2254  147c				   .condpart35
   2255  147c		       c6 af		      DEC	ball_shoot_y
   2256  147e				   .skipL0371
   2257  147e				   .L0372		;  if _Bit0_Ball_Shot_Dir_Left1{0}  &&  frame_counter{0} then ball_shoot_x  =	ball_shoot_x  -  1  :  if _Bit1_Ball_Shot_Dir_Left2{1} then ball_shoot_x  =  ball_shoot_x  -  1
   2258  147e
   2259  147e		       a5 d6		      LDA	_Bit0_Ball_Shot_Dir_Left1
   2260  1480		       4a		      LSR
   2261  1481		       90 0f		      BCC	.skipL0372
   2262  1483				   .condpart36
   2263  1483		       a5 d5		      LDA	frame_counter
   2264  1485		       4a		      LSR
   2265  1486		       90 0a		      BCC	.skip36then
   2266  1488				   .condpart37
   2267  1488		       c6 ae		      DEC	ball_shoot_x
   2268  148a		       a5 d6		      LDA	_Bit1_Ball_Shot_Dir_Left2
   2269  148c		       29 02		      AND	#2
   2270  148e		       f0 02		      BEQ	.skip37then
   2271  1490				   .condpart38
   2272  1490		       c6 ae		      DEC	ball_shoot_x
   2273  1492				   .skip37then
   2274  1492				   .skip36then
   2275  1492				   .skipL0372
   2276  1492				   .L0373		;  if _Bit2_Ball_Shot_Dir_Right1{2}  &&  frame_counter{0} then ball_shoot_x  =  ball_shoot_x  +  1  :	if _Bit3_Ball_Shot_Dir_Right2{3} then ball_shoot_x  =  ball_shoot_x  +	1
   2277  1492
   2278  1492		       a5 d6		      LDA	_Bit2_Ball_Shot_Dir_Right1
   2279  1494		       29 04		      AND	#4
   2280  1496		       f0 0f		      BEQ	.skipL0373
   2281  1498				   .condpart39
   2282  1498		       a5 d5		      LDA	frame_counter
   2283  149a		       4a		      LSR
   2284  149b		       90 0a		      BCC	.skip39then
   2285  149d				   .condpart40
   2286  149d		       e6 ae		      INC	ball_shoot_x
   2287  149f		       a5 d6		      LDA	_Bit3_Ball_Shot_Dir_Right2
   2288  14a1		       29 08		      AND	#8
   2289  14a3		       f0 02		      BEQ	.skip40then
   2290  14a5				   .condpart41
   2291  14a5		       e6 ae		      INC	ball_shoot_x
   2292  14a7				   .skip40then
   2293  14a7				   .skip39then
   2294  14a7				   .skipL0373
   2295  14a7				   .
   2296  14a7							; 
   2297  14a7
   2298  14a7				   .L0374		;  rem apply gravity
   2299  14a7
   2300  14a7				   .L0375		;  Bally_velocity  =  Bally_velocity  +  gravity_ball
   2301  14a7
   2302  14a7		       a5 e4		      LDA	q
   2303  14a9		       18		      CLC
   2304  14aa		       69 02		      ADC	#2
   2305  14ac		       85 e4		      STA	q
   2306  14ae		       a5 e3		      LDA	Bally_velocity
   2307  14b0		       69 00		      ADC	#0
   2308  14b2		       85 e3		      STA	Bally_velocity
   2309  14b4				   .L0376		;  Bally_position  =  Bally_position  +  Bally_velocity
   2310  14b4
   2311  14b4		       a5 e5		      LDA	r
   2312  14b6		       18		      CLC
   2313  14b7		       65 e4		      ADC	q
   2314  14b9		       85 e5		      STA	r
   2315  14bb		       a5 af		      LDA	Bally_position
   2316  14bd		       65 e3		      ADC	Bally_velocity
   2317  14bf		       85 af		      STA	Bally_position
   2318  14c1				   .
   2319  14c1							; 
   2320  14c1
   2321  14c1				   .
   2322  14c1							; 
   2323  14c1
   2324  14c1				   .
   2325  14c1							; 
   2326  14c1
   2327  14c1				   .L0377		;  if ball_shoot_y  <	_M_Edge_Top then __Delete_Enemy_Missile
   2328  14c1
   2329  14c1		       a5 af		      LDA	ball_shoot_y
   2330  14c3		       c9 02		      CMP	#_M_Edge_Top
   2331  14c5					      if	((* - .__Delete_Enemy_Missile) < 127) && ((* - .__Delete_Enemy_Missile) > -128)
   2332  14c5		       90 16		      bcc	.__Delete_Enemy_Missile
   2333  14c7				  -	      else
   2334  14c7				  -	      bcs	.14skip__Delete_Enemy_Missile
   2335  14c7				  -	      jmp	.__Delete_Enemy_Missile
   2336  14c7				  -.14skip__Delete_Enemy_Missile
   2337  14c7					      endif
   2338  14c7				   .L0378		;  if ball_shoot_y  >	_M_Edge_Bottom then __Delete_Enemy_Missile
   2339  14c7
   2340  14c7		       a9 58		      LDA	#_M_Edge_Bottom
   2341  14c9		       c5 af		      CMP	ball_shoot_y
   2342  14cb					      if	((* - .__Delete_Enemy_Missile) < 127) && ((* - .__Delete_Enemy_Missile) > -128)
   2343  14cb		       90 10		      bcc	.__Delete_Enemy_Missile
   2344  14cd				  -	      else
   2345  14cd				  -	      bcs	.15skip__Delete_Enemy_Missile
   2346  14cd				  -	      jmp	.__Delete_Enemy_Missile
   2347  14cd				  -.15skip__Delete_Enemy_Missile
   2348  14cd					      endif
   2349  14cd				   .L0379		;  if ball_shoot_x  <	_M_Edge_Left then __Delete_Enemy_Missile
   2350  14cd
   2351  14cd		       a5 ae		      LDA	ball_shoot_x
   2352  14cf		       c9 0e		      CMP	#_M_Edge_Left
   2353  14d1					      if	((* - .__Delete_Enemy_Missile) < 127) && ((* - .__Delete_Enemy_Missile) > -128)
   2354  14d1		       90 0a		      bcc	.__Delete_Enemy_Missile
   2355  14d3				  -	      else
   2356  14d3				  -	      bcs	.16skip__Delete_Enemy_Missile
   2357  14d3				  -	      jmp	.__Delete_Enemy_Missile
   2358  14d3				  -.16skip__Delete_Enemy_Missile
   2359  14d3					      endif
   2360  14d3				   .L0380		;  if ball_shoot_x  >	_M_Edge_Right then __Delete_Enemy_Missile
   2361  14d3
   2362  14d3		       a9 94		      LDA	#_M_Edge_Right
   2363  14d5		       c5 ae		      CMP	ball_shoot_x
   2364  14d7					      if	((* - .__Delete_Enemy_Missile) < 127) && ((* - .__Delete_Enemy_Missile) > -128)
   2365  14d7		       90 04		      bcc	.__Delete_Enemy_Missile
   2366  14d9				  -	      else
   2367  14d9				  -	      bcs	.17skip__Delete_Enemy_Missile
   2368  14d9				  -	      jmp	.__Delete_Enemy_Missile
   2369  14d9				  -.17skip__Delete_Enemy_Missile
   2370  14d9					      endif
   2371  14d9				   .
   2372  14d9							; 
   2373  14d9
   2374  14d9				   .
   2375  14d9							; 
   2376  14d9
   2377  14d9				   .L0381		;  if !collision(playfield,ball) then __Skip_Enemy_Missile
   2378  14d9
   2379  14d9		       24 06		      bit	CXBLPF
   2380  14db					      if	((* - .__Skip_Enemy_Missile) < 127) && ((* - .__Skip_Enemy_Missile) > -128)
   2381  14db		       10 0a		      bpl	.__Skip_Enemy_Missile
   2382  14dd				  -	      else
   2383  14dd				  -	      bmi	.18skip__Skip_Enemy_Missile
   2384  14dd				  -	      jmp	.__Skip_Enemy_Missile
   2385  14dd				  -.18skip__Skip_Enemy_Missile
   2386  14dd					      endif
   2387  14dd				   .
   2388  14dd							; 
   2389  14dd
   2390  14dd				   .__Delete_Enemy_Missile
   2391  14dd							; __Delete_Enemy_Missile
   2392  14dd
   2393  14dd				   .
   2394  14dd							; 
   2395  14dd
   2396  14dd				   .
   2397  14dd							; 
   2398  14dd
   2399  14dd				   .L0382		;  _BitOp_Ball_Shot_Dir  =  0	:  ballx  =  200  :  bally  =  200
   2400  14dd
   2401  14dd		       a9 00		      LDA	#0
   2402  14df		       85 d6		      STA	_BitOp_Ball_Shot_Dir
   2403  14e1		       a9 c8		      LDA	#200
   2404  14e3		       85 84		      STA	ballx
   2405  14e5		       85 89		      STA	bally
   2406  14e7				   .
   2407  14e7							; 
   2408  14e7
   2409  14e7				   .__Skip_Enemy_Missile
   2410  14e7							; __Skip_Enemy_Missile
   2411  14e7
   2412  14e7				   .
   2413  14e7							; 
   2414  14e7
   2415  14e7				   .
   2416  14e7							; 
   2417  14e7
   2418  14e7				   .
   2419  14e7							; 
   2420  14e7
   2421  14e7				   .
   2422  14e7							; 
   2423  14e7
   2424  14e7				   .
   2425  14e7							; 
   2426  14e7
   2427  14e7				   .L0383		;  if !joy0fire then _Bit7_FireB_Restrainer{7}  =  0  :  goto __Skip_Fire
   2428  14e7
   2429  14e7		       24 0c		      bit	INPT4
   2430  14e9		       10 09		      BPL	.skipL0383
   2431  14eb				   .condpart42
   2432  14eb		       a5 ec		      LDA	_Bit7_FireB_Restrainer
   2433  14ed		       29 7f		      AND	#127
   2434  14ef		       85 ec		      STA	_Bit7_FireB_Restrainer
   2435  14f1		       4c 72 95 	      jmp	.__Skip_Fire
   2436  14f4
   2437  14f4				   .skipL0383
   2438  14f4				   .L0384		;  if _Bit7_FireB_Restrainer{7} then __Skip_Fire
   2439  14f4
   2440  14f4		       24 ec		      BIT	_Bit7_FireB_Restrainer
   2441  14f6					      if	((* - .__Skip_Fire) < 127) && ((* - .__Skip_Fire) > -128)
   2442  14f6		       30 7a		      bmi	.__Skip_Fire
   2443  14f8				  -	      else
   2444  14f8				  -	      bpl	.19skip__Skip_Fire
   2445  14f8				  -	      jmp	.__Skip_Fire
   2446  14f8				  -.19skip__Skip_Fire
   2447  14f8					      endif
   2448  14f8				   .
   2449  14f8							; 
   2450  14f8
   2451  14f8				   .
   2452  14f8							; 
   2453  14f8
   2454  14f8				   .L0385		;  if _BitOp_M0_Dir  ||  _Bit0_P1_Dir_Up{0} then __Skip_Fire
   2455  14f8
   2456  14f8		       a5 d7		      LDA	_BitOp_M0_Dir
   2457  14fa					      if	((* - .__Skip_Fire) < 127) && ((* - .__Skip_Fire) > -128)
   2458  14fa		       d0 76		      BNE	.__Skip_Fire
   2459  14fc				  -	      else
   2460  14fc				  -	      beq	.20skip__Skip_Fire
   2461  14fc				  -	      jmp	.__Skip_Fire
   2462  14fc				  -.20skip__Skip_Fire
   2463  14fc					      endif
   2464  14fc		       a5 d8		      LDA	_Bit0_P1_Dir_Up
   2465  14fe		       4a		      LSR
   2466  14ff					      if	((* - .__Skip_Fire) < 127) && ((* - .__Skip_Fire) > -128)
   2467  14ff		       b0 71		      bcs	.__Skip_Fire
   2468  1501				  -	      else
   2469  1501				  -	      bcc	.21skip__Skip_Fire
   2470  1501				  -	      jmp	.__Skip_Fire
   2471  1501				  -.21skip__Skip_Fire
   2472  1501					      endif
   2473  1501				   .
   2474  1501							; 
   2475  1501
   2476  1501				   .
   2477  1501							; 
   2478  1501
   2479  1501				   .
   2480  1501							; 
   2481  1501
   2482  1501				   .L0386		;  _BitOp_M0_Dir  =  _BitOp_P1_Dir
   2483  1501
   2484  1501		       a5 d8		      LDA	_BitOp_P1_Dir
   2485  1503		       85 d7		      STA	_BitOp_M0_Dir
   2486  1505				   .
   2487  1505							; 
   2488  1505
   2489  1505				   .L0387		;  if _BitOp_M0_Dir then _Skip_correct_initial_M0_Dir
   2490  1505
   2491  1505		       a5 d7		      LDA	_BitOp_M0_Dir
   2492  1507					      if	((* - ._Skip_correct_initial_M0_Dir) < 127) && ((* - ._Skip_correct_initial_M0_Dir) > -128)
   2493  1507		       d0 0f		      BNE	._Skip_correct_initial_M0_Dir
   2494  1509				  -	      else
   2495  1509				  -	      beq	.22skip_Skip_correct_initial_M0_Dir
   2496  1509				  -	      jmp	._Skip_correct_initial_M0_Dir
   2497  1509				  -.22skip_Skip_correct_initial_M0_Dir
   2498  1509					      endif
   2499  1509				   .L0388		;  if _Bit6_Flip_P1{6} then _BitOp_M0_Dir  =  4 else _BitOp_M0_Dir  =	8
   2500  1509
   2501  1509		       24 ec		      BIT	_Bit6_Flip_P1
   2502  150b		       50 07		      BVC	.skipL0388
   2503  150d				   .condpart43
   2504  150d		       a9 04		      LDA	#4
   2505  150f		       85 d7		      STA	_BitOp_M0_Dir
   2506  1511		       4c 18 95 	      jmp	.skipelse3
   2507  1514				   .skipL0388
   2508  1514		       a9 08		      LDA	#8
   2509  1516		       85 d7		      STA	_BitOp_M0_Dir
   2510  1518				   .skipelse3
   2511  1518				   ._Skip_correct_initial_M0_Dir
   2512  1518							; _Skip_correct_initial_M0_Dir
   2513  1518
   2514  1518				   .
   2515  1518							; 
   2516  1518
   2517  1518				   .
   2518  1518							; 
   2519  1518
   2520  1518				   .L0389		;  M0y_velocity  =  0.0  :  u	=  0
   2521  1518
   2522  1518		       a2 00		      LDX	#0
   2523  151a		       86 e7		      STX	t
   2524  151c		       a9 00		      LDA	#0
   2525  151e		       85 e6		      STA	M0y_velocity
   2526  1520		       a9 00		      LDA	#0
   2527  1522		       85 e8		      STA	u
   2528  1524				   .
   2529  1524							; 
   2530  1524
   2531  1524				   .
   2532  1524							; 
   2533  1524
   2534  1524				   .L0390		;  if _Bit1_M0_Dir_Down{1} then missile0x  =  player1x  +  9  :  missile0y  =	player1y  -  1
   2535  1524
   2536  1524		       a5 d7		      LDA	_Bit1_M0_Dir_Down
   2537  1526		       29 02		      AND	#2
   2538  1528		       f0 0e		      BEQ	.skipL0390
   2539  152a				   .condpart44
   2540  152a		       a5 81		      LDA	player1x
   2541  152c		       18		      CLC
   2542  152d		       69 09		      ADC	#9
   2543  152f		       85 82		      STA	missile0x
   2544  1531		       a5 86		      LDA	player1y
   2545  1533		       38		      SEC
   2546  1534		       e9 01		      SBC	#1
   2547  1536		       85 91		      STA	missile0y
   2548  1538				   .skipL0390
   2549  1538				   .L0391		;  if _Bit2_M0_Dir_Left{2} then missile0x  =  player1x  +  2  :  missile0y  =	player1y  -  3
   2550  1538
   2551  1538		       a5 d7		      LDA	_Bit2_M0_Dir_Left
   2552  153a		       29 04		      AND	#4
   2553  153c		       f0 0e		      BEQ	.skipL0391
   2554  153e				   .condpart45
   2555  153e		       a5 81		      LDA	player1x
   2556  1540		       18		      CLC
   2557  1541		       69 02		      ADC	#2
   2558  1543		       85 82		      STA	missile0x
   2559  1545		       a5 86		      LDA	player1y
   2560  1547		       38		      SEC
   2561  1548		       e9 03		      SBC	#3
   2562  154a		       85 91		      STA	missile0y
   2563  154c				   .skipL0391
   2564  154c				   .L0392		;  if _Bit3_M0_Dir_Right{3} then missile0x  =	player1x  +  16  :  missile0y  =  player1y  -  3
   2565  154c
   2566  154c		       a5 d7		      LDA	_Bit3_M0_Dir_Right
   2567  154e		       29 08		      AND	#8
   2568  1550		       f0 0e		      BEQ	.skipL0392
   2569  1552				   .condpart46
   2570  1552		       a5 81		      LDA	player1x
   2571  1554		       18		      CLC
   2572  1555		       69 10		      ADC	#16
   2573  1557		       85 82		      STA	missile0x
   2574  1559		       a5 86		      LDA	player1y
   2575  155b		       38		      SEC
   2576  155c		       e9 03		      SBC	#3
   2577  155e		       85 91		      STA	missile0y
   2578  1560				   .skipL0392
   2579  1560				   .
   2580  1560							; 
   2581  1560
   2582  1560				   .
   2583  1560							; 
   2584  1560
   2585  1560				   .L0393		;  if _Ch0_Sound  <>  3 then _Ch0_Sound  =  2	:  _Ch0_Duration  =  1	:  _Ch0_Counter  =  0
   2586  1560
   2587  1560		       a5 d9		      LDA	_Ch0_Sound
   2588  1562		       c9 03		      CMP	#3
   2589  1564		       f0 0c		      BEQ	.skipL0393
   2590  1566				   .condpart47
   2591  1566		       a9 02		      LDA	#2
   2592  1568		       85 d9		      STA	_Ch0_Sound
   2593  156a		       a9 01		      LDA	#1
   2594  156c		       85 da		      STA	_Ch0_Duration
   2595  156e		       a9 00		      LDA	#0
   2596  1570		       85 db		      STA	_Ch0_Counter
   2597  1572				   .skipL0393
   2598  1572				   .
   2599  1572							; 
   2600  1572
   2601  1572				   .__Skip_Fire
   2602  1572							; __Skip_Fire
   2603  1572
   2604  1572				   .
   2605  1572							; 
   2606  1572
   2607  1572				   .
   2608  1572							; 
   2609  1572
   2610  1572				   .
   2611  1572							; 
   2612  1572
   2613  1572				   .
   2614  1572							; 
   2615  1572
   2616  1572				   .L0394		;  if !_BitOp_M0_Dir then goto __Skip_Missile
   2617  1572
   2618  1572		       a5 d7		      LDA	_BitOp_M0_Dir
   2619  1574		       d0 03		      BNE	.skipL0394
   2620  1576				   .condpart48
   2621  1576		       4c ef 95 	      jmp	.__Skip_Missile
   2622  1579
   2623  1579				   .skipL0394
   2624  1579				   .
   2625  1579							; 
   2626  1579
   2627  1579				   .
   2628  1579							; 
   2629  1579
   2630  1579				   .L0395		;  if _Bit1_M0_Dir_Down{1} then missile0y  =  missile0y  +  2
   2631  1579
   2632  1579		       a5 d7		      LDA	_Bit1_M0_Dir_Down
   2633  157b		       29 02		      AND	#2
   2634  157d		       f0 07		      BEQ	.skipL0395
   2635  157f				   .condpart49
   2636  157f		       a5 91		      LDA	missile0y
   2637  1581		       18		      CLC
   2638  1582		       69 02		      ADC	#2
   2639  1584		       85 91		      STA	missile0y
   2640  1586				   .skipL0395
   2641  1586				   .L0396		;  if _Bit2_M0_Dir_Left{2} then missile0x  =  missile0x  -  2
   2642  1586
   2643  1586		       a5 d7		      LDA	_Bit2_M0_Dir_Left
   2644  1588		       29 04		      AND	#4
   2645  158a		       f0 07		      BEQ	.skipL0396
   2646  158c				   .condpart50
   2647  158c		       a5 82		      LDA	missile0x
   2648  158e		       38		      SEC
   2649  158f		       e9 02		      SBC	#2
   2650  1591		       85 82		      STA	missile0x
   2651  1593				   .skipL0396
   2652  1593				   .L0397		;  if _Bit3_M0_Dir_Right{3} then missile0x  =	missile0x  +  2
   2653  1593
   2654  1593		       a5 d7		      LDA	_Bit3_M0_Dir_Right
   2655  1595		       29 08		      AND	#8
   2656  1597		       f0 07		      BEQ	.skipL0397
   2657  1599				   .condpart51
   2658  1599		       a5 82		      LDA	missile0x
   2659  159b		       18		      CLC
   2660  159c		       69 02		      ADC	#2
   2661  159e		       85 82		      STA	missile0x
   2662  15a0				   .skipL0397
   2663  15a0				   .
   2664  15a0							; 
   2665  15a0
   2666  15a0				   .L0398		;  rem apply gravity
   2667  15a0
   2668  15a0				   .L0399		;  M0y_velocity  =  M0y_velocity  +  gravity_missile0
   2669  15a0
   2670  15a0		       a5 e7		      LDA	t
   2671  15a2		       18		      CLC
   2672  15a3		       69 06		      ADC	#6
   2673  15a5		       85 e7		      STA	t
   2674  15a7		       a5 e6		      LDA	M0y_velocity
   2675  15a9		       69 00		      ADC	#0
   2676  15ab		       85 e6		      STA	M0y_velocity
   2677  15ad				   .L0400		;  M0y_position  =  M0y_position  +  M0y_velocity
   2678  15ad
   2679  15ad		       a5 e8		      LDA	u
   2680  15af		       18		      CLC
   2681  15b0		       65 e7		      ADC	t
   2682  15b2		       85 e8		      STA	u
   2683  15b4		       a5 91		      LDA	M0y_position
   2684  15b6		       65 e6		      ADC	M0y_velocity
   2685  15b8		       85 91		      STA	M0y_position
   2686  15ba				   .
   2687  15ba							; 
   2688  15ba
   2689  15ba				   .
   2690  15ba							; 
   2691  15ba
   2692  15ba				   .
   2693  15ba							; 
   2694  15ba
   2695  15ba				   .L0401		;  if missile0y  <  _M_Edge_Top then goto __Delete_Missile
   2696  15ba
   2697  15ba		       a5 91		      LDA	missile0y
   2698  15bc		       c9 02		      CMP	#_M_Edge_Top
   2699  15be		       b0 03		      BCS	.skipL0401
   2700  15c0				   .condpart52
   2701  15c0		       4c e5 95 	      jmp	.__Delete_Missile
   2702  15c3
   2703  15c3				   .skipL0401
   2704  15c3				   .L0402		;  if missile0y  >  _M_Edge_Bottom then goto __Delete_Missile
   2705  15c3
   2706  15c3		       a9 58		      LDA	#_M_Edge_Bottom
   2707  15c5		       c5 91		      CMP	missile0y
   2708  15c7		       b0 03		      BCS	.skipL0402
   2709  15c9				   .condpart53
   2710  15c9		       4c e5 95 	      jmp	.__Delete_Missile
   2711  15cc
   2712  15cc				   .skipL0402
   2713  15cc				   .L0403		;  if missile0x  <  _M_Edge_Left then goto __Delete_Missile
   2714  15cc
   2715  15cc		       a5 82		      LDA	missile0x
   2716  15ce		       c9 0e		      CMP	#_M_Edge_Left
   2717  15d0		       b0 03		      BCS	.skipL0403
   2718  15d2				   .condpart54
   2719  15d2		       4c e5 95 	      jmp	.__Delete_Missile
   2720  15d5
   2721  15d5				   .skipL0403
   2722  15d5				   .L0404		;  if missile0x  >  _M_Edge_Right then goto __Delete_Missile
   2723  15d5
   2724  15d5		       a9 94		      LDA	#_M_Edge_Right
   2725  15d7		       c5 82		      CMP	missile0x
   2726  15d9		       b0 03		      BCS	.skipL0404
   2727  15db				   .condpart55
   2728  15db		       4c e5 95 	      jmp	.__Delete_Missile
   2729  15de
   2730  15de				   .skipL0404
   2731  15de				   .
   2732  15de							; 
   2733  15de
   2734  15de				   .
   2735  15de							; 
   2736  15de
   2737  15de				   .L0405		;  if !collision(playfield,missile0) then goto __Skip_Missile
   2738  15de
   2739  15de		       24 04		      bit	CXM0FB
   2740  15e0		       30 03		      BMI	.skipL0405
   2741  15e2				   .condpart56
   2742  15e2		       4c ef 95 	      jmp	.__Skip_Missile
   2743  15e5
   2744  15e5				   .skipL0405
   2745  15e5				   .
   2746  15e5							; 
   2747  15e5
   2748  15e5				   .
   2749  15e5							; 
   2750  15e5
   2751  15e5				   .
   2752  15e5							; 
   2753  15e5
   2754  15e5				   .
   2755  15e5							; 
   2756  15e5
   2757  15e5				   .__Delete_Missile
   2758  15e5							; __Delete_Missile
   2759  15e5
   2760  15e5				   .
   2761  15e5							; 
   2762  15e5
   2763  15e5				   .
   2764  15e5							; 
   2765  15e5
   2766  15e5				   .L0406		;  _BitOp_M0_Dir  =  0  :  missile0x  =  200  :  missile0y  =	200
   2767  15e5
   2768  15e5		       a9 00		      LDA	#0
   2769  15e7		       85 d7		      STA	_BitOp_M0_Dir
   2770  15e9		       a9 c8		      LDA	#200
   2771  15eb		       85 82		      STA	missile0x
   2772  15ed		       85 91		      STA	missile0y
   2773  15ef				   .
   2774  15ef							; 
   2775  15ef
   2776  15ef				   .__Skip_Missile
   2777  15ef							; __Skip_Missile
   2778  15ef
   2779  15ef				   .
   2780  15ef							; 
   2781  15ef
   2782  15ef				   .
   2783  15ef							; 
   2784  15ef
   2785  15ef				   .
   2786  15ef							; 
   2787  15ef
   2788  15ef				   .
   2789  15ef							; 
   2790  15ef
   2791  15ef				   .L0407		;  if !collision(player0,missile0) then __Skip_Shot_Enemy
   2792  15ef
   2793  15ef		       24 00		      bit	CXM0P
   2794  15f1					      if	((* - .__Skip_Shot_Enemy) < 127) && ((* - .__Skip_Shot_Enemy) > -128)
   2795  15f1		       50 52		      bvc	.__Skip_Shot_Enemy
   2796  15f3				  -	      else
   2797  15f3				  -	      bvs	.23skip__Skip_Shot_Enemy
   2798  15f3				  -	      jmp	.__Skip_Shot_Enemy
   2799  15f3				  -.23skip__Skip_Shot_Enemy
   2800  15f3					      endif
   2801  15f3				   .
   2802  15f3							; 
   2803  15f3
   2804  15f3				   .
   2805  15f3							; 
   2806  15f3
   2807  15f3				   .L0408		;  _BitOp_M0_Dir  =  0  :  missile0x  =  200  :  missile0y  =	200
   2808  15f3
   2809  15f3		       a9 00		      LDA	#0
   2810  15f5		       85 d7		      STA	_BitOp_M0_Dir
   2811  15f7		       a9 c8		      LDA	#200
   2812  15f9		       85 82		      STA	missile0x
   2813  15fb		       85 91		      STA	missile0y
   2814  15fd				   .
   2815  15fd							; 
   2816  15fd
   2817  15fd				   .L0409		;  if roommate_type  >  1 then __Skip_Shot_Enemy
   2818  15fd
   2819  15fd		       a9 01		      LDA	#1
   2820  15ff		       c5 de		      CMP	roommate_type
   2821  1601					      if	((* - .__Skip_Shot_Enemy) < 127) && ((* - .__Skip_Shot_Enemy) > -128)
   2822  1601		       90 42		      bcc	.__Skip_Shot_Enemy
   2823  1603				  -	      else
   2824  1603				  -	      bcs	.24skip__Skip_Shot_Enemy
   2825  1603				  -	      jmp	.__Skip_Shot_Enemy
   2826  1603				  -.24skip__Skip_Shot_Enemy
   2827  1603					      endif
   2828  1603				   .
   2829  1603							; 
   2830  1603
   2831  1603				   .L0410		;  _Ch0_Sound	=  1  :  _Ch0_Duration	=  1  :  _Ch0_Counter  =  0
   2832  1603
   2833  1603		       a9 01		      LDA	#1
   2834  1605		       85 d9		      STA	_Ch0_Sound
   2835  1607		       85 da		      STA	_Ch0_Duration
   2836  1609		       a9 00		      LDA	#0
   2837  160b		       85 db		      STA	_Ch0_Counter
   2838  160d				   .
   2839  160d							; 
   2840  160d
   2841  160d				   .
   2842  160d							; 
   2843  160d
   2844  160d				   .L0411		;  player0y  =  200  :  w_roommate_startpos_y	=  200	:  if roommate_type then score	=  score  +  bonus_hit_air_missile else score  =  score  +  bonus_hit_tank
   2845  160d
   2846  160d		       a9 c8		      LDA	#200
   2847  160f		       85 85		      STA	player0y
   2848  1611		       8d 68 f0 	      STA	w_roommate_startpos_y
   2849  1614		       a5 de		      LDA	roommate_type
   2850  1616		       f0 18		      BEQ	.skipL0411
   2851  1618				   .condpart57
   2852  1618		       f8		      SED
   2853  1619		       18		      CLC
   2854  161a		       a5 95		      LDA	score+2
   2855  161c		       69 40		      ADC	#$40
   2856  161e		       85 95		      STA	score+2
   2857  1620		       a5 94		      LDA	score+1
   2858  1622		       69 00		      ADC	#$00
   2859  1624		       85 94		      STA	score+1
   2860  1626		       a5 93		      LDA	score
   2861  1628		       69 00		      ADC	#$00
   2862  162a		       85 93		      STA	score
   2863  162c		       d8		      CLD
   2864  162d		       4c 45 96 	      jmp	.skipelse4
   2865  1630				   .skipL0411
   2866  1630		       f8		      SED
   2867  1631		       18		      CLC
   2868  1632		       a5 95		      LDA	score+2
   2869  1634		       69 60		      ADC	#$60
   2870  1636		       85 95		      STA	score+2
   2871  1638		       a5 94		      LDA	score+1
   2872  163a		       69 00		      ADC	#$00
   2873  163c		       85 94		      STA	score+1
   2874  163e		       a5 93		      LDA	score
   2875  1640		       69 00		      ADC	#$00
   2876  1642		       85 93		      STA	score
   2877  1644		       d8		      CLD
   2878  1645				   .skipelse4
   2879  1645				   .
   2880  1645							; 
   2881  1645
   2882  1645				   .__Skip_Shot_Enemy
   2883  1645							; __Skip_Shot_Enemy
   2884  1645
   2885  1645				   .
   2886  1645							; 
   2887  1645
   2888  1645				   .
   2889  1645							; 
   2890  1645
   2891  1645				   .
   2892  1645							; 
   2893  1645
   2894  1645				   .
   2895  1645							; 
   2896  1645
   2897  1645				   .L0412		;  if !collision(ball,missile0) then __Skip_Shot_Extra_Wall
   2898  1645
   2899  1645		       24 04		      bit	CXM0FB
   2900  1647					      if	((* - .__Skip_Shot_Extra_Wall) < 127) && ((* - .__Skip_Shot_Extra_Wall) > -128)
   2901  1647		       50 61		      bvc	.__Skip_Shot_Extra_Wall
   2902  1649				  -	      else
   2903  1649				  -	      bvs	.25skip__Skip_Shot_Extra_Wall
   2904  1649				  -	      jmp	.__Skip_Shot_Extra_Wall
   2905  1649				  -.25skip__Skip_Shot_Extra_Wall
   2906  1649					      endif
   2907  1649				   .
   2908  1649							; 
   2909  1649
   2910  1649				   .
   2911  1649							; 
   2912  1649
   2913  1649				   .L0413		;  _BitOp_M0_Dir  =  0  :  missile0x  =  200  :  missile0y  =	200
   2914  1649
   2915  1649		       a9 00		      LDA	#0
   2916  164b		       85 d7		      STA	_BitOp_M0_Dir
   2917  164d		       a9 c8		      LDA	#200
   2918  164f		       85 82		      STA	missile0x
   2919  1651		       85 91		      STA	missile0y
   2920  1653				   .
   2921  1653							; 
   2922  1653
   2923  1653				   .L0414		;  if _BitOp_Ball_Shot_Dir then _BitOp_Ball_Shot_Dir  =  0  :	bally  =  0
   2924  1653
   2925  1653		       a5 d6		      LDA	_BitOp_Ball_Shot_Dir
   2926  1655		       f0 06		      BEQ	.skipL0414
   2927  1657				   .condpart58
   2928  1657		       a9 00		      LDA	#0
   2929  1659		       85 d6		      STA	_BitOp_Ball_Shot_Dir
   2930  165b		       85 89		      STA	bally
   2931  165d				   .skipL0414
   2932  165d				   .
   2933  165d							; 
   2934  165d
   2935  165d				   .
   2936  165d							; 
   2937  165d
   2938  165d				   .L0415		;  if r_extra_wall_type_and_range{0} then __Skip_Shot_Extra_Wall
   2939  165d
   2940  165d		       ad e9 f0 	      LDA	r_extra_wall_type_and_range
   2941  1660		       4a		      LSR
   2942  1661					      if	((* - .__Skip_Shot_Extra_Wall) < 127) && ((* - .__Skip_Shot_Extra_Wall) > -128)
   2943  1661		       b0 47		      bcs	.__Skip_Shot_Extra_Wall
   2944  1663				  -	      else
   2945  1663				  -	      bcc	.26skip__Skip_Shot_Extra_Wall
   2946  1663				  -	      jmp	.__Skip_Shot_Extra_Wall
   2947  1663				  -.26skip__Skip_Shot_Extra_Wall
   2948  1663					      endif
   2949  1663				   .
   2950  1663							; 
   2951  1663
   2952  1663				   .L0416		;  _Ch0_Sound	=  1  :  _Ch0_Duration	=  1  :  _Ch0_Counter  =  0
   2953  1663
   2954  1663		       a9 01		      LDA	#1
   2955  1665		       85 d9		      STA	_Ch0_Sound
   2956  1667		       85 da		      STA	_Ch0_Duration
   2957  1669		       a9 00		      LDA	#0
   2958  166b		       85 db		      STA	_Ch0_Counter
   2959  166d				   .L0417		;  bally  =  0  :  w_extra_wall_startpos_1_x  =  200  :  if r_extra_wall_type_and_range  >  2 then score  =  score  +	bonus_hit_active_wall else score  =  score  +  bonus_hit_wall
   2960  166d
   2961  166d		       a9 00		      LDA	#0
   2962  166f		       85 89		      STA	bally
   2963  1671		       a9 c8		      LDA	#200
   2964  1673		       8d 6c f0 	      STA	w_extra_wall_startpos_1_x
   2965  1676		       a9 02		      LDA	#2
   2966  1678		       cd e9 f0 	      CMP	r_extra_wall_type_and_range
   2967  167b		       b0 18		      BCS	.skipL0417
   2968  167d				   .condpart59
   2969  167d		       f8		      SED
   2970  167e		       18		      CLC
   2971  167f		       a5 95		      LDA	score+2
   2972  1681		       69 30		      ADC	#$30
   2973  1683		       85 95		      STA	score+2
   2974  1685		       a5 94		      LDA	score+1
   2975  1687		       69 00		      ADC	#$00
   2976  1689		       85 94		      STA	score+1
   2977  168b		       a5 93		      LDA	score
   2978  168d		       69 00		      ADC	#$00
   2979  168f		       85 93		      STA	score
   2980  1691		       d8		      CLD
   2981  1692		       4c aa 96 	      jmp	.skipelse5
   2982  1695				   .skipL0417
   2983  1695		       f8		      SED
   2984  1696		       18		      CLC
   2985  1697		       a5 95		      LDA	score+2
   2986  1699		       69 10		      ADC	#$10
   2987  169b		       85 95		      STA	score+2
   2988  169d		       a5 94		      LDA	score+1
   2989  169f		       69 00		      ADC	#$00
   2990  16a1		       85 94		      STA	score+1
   2991  16a3		       a5 93		      LDA	score
   2992  16a5		       69 00		      ADC	#$00
   2993  16a7		       85 93		      STA	score
   2994  16a9		       d8		      CLD
   2995  16aa				   .skipelse5
   2996  16aa				   .
   2997  16aa							; 
   2998  16aa
   2999  16aa				   .__Skip_Shot_Extra_Wall
   3000  16aa							; __Skip_Shot_Extra_Wall
   3001  16aa
   3002  16aa				   .
   3003  16aa							; 
   3004  16aa
   3005  16aa				   .
   3006  16aa							; 
   3007  16aa
   3008  16aa				   .
   3009  16aa							; 
   3010  16aa
   3011  16aa				   .L0418		;  if !collision(player1,player0) then goto __Skip_P1_Touched_P0
   3012  16aa
   3013  16aa		       24 07		      bit	CXPPMM
   3014  16ac		       30 03		      BMI	.skipL0418
   3015  16ae				   .condpart60
   3016  16ae		       4c 47 97 	      jmp	.__Skip_P1_Touched_P0
   3017  16b1
   3018  16b1				   .skipL0418
   3019  16b1				   .
   3020  16b1							; 
   3021  16b1
   3022  16b1				   .
   3023  16b1							; 
   3024  16b1
   3025  16b1				   .L0419		;  if roommate_type  <  2 then player0y  =  200  :  w_roommate_startpos_y  =  200  :  goto _Set_Explosion
   3026  16b1
   3027  16b1		       a5 de		      LDA	roommate_type
   3028  16b3		       c9 02		      CMP	#2
   3029  16b5		       b0 0a		      BCS	.skipL0419
   3030  16b7				   .condpart61
   3031  16b7		       a9 c8		      LDA	#200
   3032  16b9		       85 85		      STA	player0y
   3033  16bb		       8d 68 f0 	      STA	w_roommate_startpos_y
   3034  16be		       4c 59 9b 	      jmp	._Set_Explosion
   3035  16c1
   3036  16c1				   .skipL0419
   3037  16c1				   .
   3038  16c1							; 
   3039  16c1
   3040  16c1				   .
   3041  16c1							; 
   3042  16c1
   3043  16c1				   .L0420		;  if _Ch0_Sound  <>  3 then _Ch0_Sound  =  3	:  _Ch0_Duration  =  1	:  _Ch0_Counter  =  0
   3044  16c1
   3045  16c1		       a5 d9		      LDA	_Ch0_Sound
   3046  16c3		       c9 03		      CMP	#3
   3047  16c5		       f0 0c		      BEQ	.skipL0420
   3048  16c7				   .condpart62
   3049  16c7		       a9 03		      LDA	#3
   3050  16c9		       85 d9		      STA	_Ch0_Sound
   3051  16cb		       a9 01		      LDA	#1
   3052  16cd		       85 da		      STA	_Ch0_Duration
   3053  16cf		       a9 00		      LDA	#0
   3054  16d1		       85 db		      STA	_Ch0_Counter
   3055  16d3				   .skipL0420
   3056  16d3				   .L0421		;  if roommate_type  =  3 then men_to_rescue  =  men_to_rescue  -  12	:  player0y  =	200  :	w_roommate_startpos_y  =  200  :  score  =  score  +  bonus_man_rescue	:  if !men_to_rescue then goto _Level_Completed
   3057  16d3
   3058  16d3		       a5 de		      LDA	roommate_type
   3059  16d5		       c9 03		      CMP	#3
   3060  16d7		       d0 2a		      BNE	.skipL0421
   3061  16d9				   .condpart63
   3062  16d9		       a5 b0		      LDA	men_to_rescue
   3063  16db		       38		      SEC
   3064  16dc		       e9 0c		      SBC	#12
   3065  16de		       85 b0		      STA	men_to_rescue
   3066  16e0		       a9 c8		      LDA	#200
   3067  16e2		       85 85		      STA	player0y
   3068  16e4		       8d 68 f0 	      STA	w_roommate_startpos_y
   3069  16e7		       f8		      SED
   3070  16e8		       18		      CLC
   3071  16e9		       a5 95		      LDA	score+2
   3072  16eb		       69 50		      ADC	#$50
   3073  16ed		       85 95		      STA	score+2
   3074  16ef		       a5 94		      LDA	score+1
   3075  16f1		       69 01		      ADC	#$01
   3076  16f3		       85 94		      STA	score+1
   3077  16f5		       a5 93		      LDA	score
   3078  16f7		       69 00		      ADC	#$00
   3079  16f9		       85 93		      STA	score
   3080  16fb		       d8		      CLD
   3081  16fc		       a5 b0		      LDA	men_to_rescue
   3082  16fe		       d0 03		      BNE	.skip63then
   3083  1700				   .condpart64
   3084  1700		       4c 16 9c 	      jmp	._Level_Completed
   3085  1703
   3086  1703				   .skip63then
   3087  1703				   .skipL0421
   3088  1703				   .L0422		;  if roommate_type  =  2 then P1y_velocity  =  0.0  :  x  =  0  :  pfscore2  =  pfscore2  *  2  |  1	:  player1y  =	player1y  -  1	:  if !_Bit3_Safe_Point_reached{3} then WriteSendBuffer  =  req_safe_point  :  _Bit3_Safe_Point_reached{3}  =  1  :  Safe_Point_P1_x  =  player1x  :  Safe_Point_P1_y  =  player1y  :  _Bit1_Safe_Point_P1_Flip{1}  =  _Bit6_Flip_P1{6}
   3089  1703
   3090  1703		       a5 de		      LDA	roommate_type
   3091  1705		       c9 02		      CMP	#2
   3092  1707		       d0 3e		      BNE	.skipL0422
   3093  1709				   .condpart65
   3094  1709		       a2 00		      LDX	#0
   3095  170b		       86 ea		      STX	w
   3096  170d		       a9 00		      LDA	#0
   3097  170f		       85 e9		      STA	P1y_velocity
   3098  1711		       a9 00		      LDA	#0
   3099  1713		       85 eb		      STA	x
   3100  1715							; complex statement detected
   3101  1715		       a5 f3		      LDA	pfscore2
   3102  1717		       0a		      asl
   3103  1718		       09 01		      ORA	#1
   3104  171a		       85 f3		      STA	pfscore2
   3105  171c		       c6 86		      DEC	player1y
   3106  171e		       a5 ec		      LDA	_Bit3_Safe_Point_reached
   3107  1720		       29 08		      AND	#8
   3108  1722		       d0 23		      BNE	.skip65then
   3109  1724				   .condpart66
   3110  1724		       a9 08		      LDA	#req_safe_point
   3111  1726		       8d f1 1f 	      STA	WriteSendBuffer
   3112  1729		       a5 ec		      LDA	_Bit3_Safe_Point_reached
   3113  172b		       09 08		      ORA	#8
   3114  172d		       85 ec		      STA	_Bit3_Safe_Point_reached
   3115  172f		       a5 81		      LDA	player1x
   3116  1731		       85 e0		      STA	Safe_Point_P1_x
   3117  1733		       a5 86		      LDA	player1y
   3118  1735		       85 e1		      STA	Safe_Point_P1_y
   3119  1737		       a5 ec		      LDA	_Bit6_Flip_P1
   3120  1739		       29 40		      AND	#64
   3121  173b		       08		      PHP
   3122  173c		       a5 df		      LDA	_Bit1_Safe_Point_P1_Flip
   3123  173e		       29 fd		      AND	#253
   3124  1740		       28		      PLP
   3125  1741		       f0 02		      .byte.b	$F0, $02
   3126  1743		       09 02		      ORA	#2
   3127  1745		       85 df		      STA	_Bit1_Safe_Point_P1_Flip
   3128  1747				   .skip65then
   3129  1747				   .skipL0422
   3130  1747				   .__Skip_P1_Touched_P0
   3131  1747							; __Skip_P1_Touched_P0
   3132  1747
   3133  1747				   .
   3134  1747							; 
   3135  1747
   3136  1747				   .
   3137  1747							; 
   3138  1747
   3139  1747				   .
   3140  1747							; 
   3141  1747
   3142  1747				   .L0423		;  if collision(player1,ball)	||  collision(player1,playfield) then goto _Set_Explosion
   3143  1747
   3144  1747		       24 03		      bit	CXP1FB
   3145  1749		       50 03		      BVC	.skipL0423
   3146  174b				   .condpart67
   3147  174b		       4c 52 97 	      jmp	.condpart68
   3148  174e				   .skipL0423
   3149  174e		       24 03		      bit	CXP1FB
   3150  1750		       10 03		      BPL	.skip12OR
   3151  1752				   .condpart68
   3152  1752		       4c 59 9b 	      jmp	._Set_Explosion
   3153  1755
   3154  1755				   .skip12OR
   3155  1755				   .
   3156  1755							; 
   3157  1755
   3158  1755				   .
   3159  1755							; 
   3160  1755
   3161  1755				   .
   3162  1755							; 
   3163  1755
   3164  1755				   .
   3165  1755							; 
   3166  1755
   3167  1755				   .
   3168  1755							; 
   3169  1755
   3170  1755				   .L0424		;  temp4  =  _BitOp_P1_Dir
   3171  1755
   3172  1755		       a5 d8		      LDA	_BitOp_P1_Dir
   3173  1757		       85 9f		      STA	temp4
   3174  1759				   .L0425		;  _BitOp_P1_Dir  =  0
   3175  1759
   3176  1759		       a9 00		      LDA	#0
   3177  175b		       85 d8		      STA	_BitOp_P1_Dir
   3178  175d				   .L0426		;  if !joy0up	||  !pfscore2 then _skip_joystick_up
   3179  175d
   3180  175d		       a9 10		      lda	#$10
   3181  175f		       2c 80 02 	      bit	SWCHA
   3182  1762					      if	((* - ._skip_joystick_up) < 127) && ((* - ._skip_joystick_up) > -128)
   3183  1762		       d0 28		      BNE	._skip_joystick_up
   3184  1764				  -	      else
   3185  1764				  -	      beq	.27skip_skip_joystick_up
   3186  1764				  -	      jmp	._skip_joystick_up
   3187  1764				  -.27skip_skip_joystick_up
   3188  1764					      endif
   3189  1764		       a5 f3		      LDA	pfscore2
   3190  1766					      if	((* - ._skip_joystick_up) < 127) && ((* - ._skip_joystick_up) > -128)
   3191  1766		       f0 24		      BEQ	._skip_joystick_up
   3192  1768				  -	      else
   3193  1768				  -	      bne	.28skip_skip_joystick_up
   3194  1768				  -	      jmp	._skip_joystick_up
   3195  1768				  -.28skip_skip_joystick_up
   3196  1768					      endif
   3197  1768				   .L0427		;  if temp4{0}  ||  gamenumber{0} then player1y  =  player1y  -  1
   3198  1768
   3199  1768		       a5 9f		      LDA	temp4
   3200  176a		       4a		      LSR
   3201  176b		       90 03		      BCC	.skipL0427
   3202  176d				   .condpart69
   3203  176d		       4c 75 97 	      jmp	.condpart70
   3204  1770				   .skipL0427
   3205  1770		       a5 a6		      LDA	gamenumber
   3206  1772		       4a		      LSR
   3207  1773		       90 02		      BCC	.skip14OR
   3208  1775				   .condpart70
   3209  1775		       c6 86		      DEC	player1y
   3210  1777				   .skip14OR
   3211  1777				   .L0428		;  P1y_velocity  =  0.0  :  x	=  0  :  _Bit0_P1_Dir_Up{0}  =	1  :  goto skip_gravity
   3212  1777
   3213  1777		       a2 00		      LDX	#0
   3214  1779		       86 ea		      STX	w
   3215  177b		       a9 00		      LDA	#0
   3216  177d		       85 e9		      STA	P1y_velocity
   3217  177f		       a9 00		      LDA	#0
   3218  1781		       85 eb		      STA	x
   3219  1783		       a5 d8		      LDA	_Bit0_P1_Dir_Up
   3220  1785		       09 01		      ORA	#1
   3221  1787		       85 d8		      STA	_Bit0_P1_Dir_Up
   3222  1789		       4c bf 97 	      jmp	.skip_gravity
   3223  178c
   3224  178c				   ._skip_joystick_up
   3225  178c							; _skip_joystick_up
   3226  178c
   3227  178c				   .
   3228  178c							; 
   3229  178c
   3230  178c				   .
   3231  178c							; 
   3232  178c
   3233  178c				   .L0429		;  if joy0down then player1y  =  player1y  +  1  :  _Bit1_P1_Dir_Down{1}  =  1
   3234  178c
   3235  178c		       a9 20		      lda	#$20
   3236  178e		       2c 80 02 	      bit	SWCHA
   3237  1791		       d0 08		      BNE	.skipL0429
   3238  1793				   .condpart71
   3239  1793		       e6 86		      INC	player1y
   3240  1795		       a5 d8		      LDA	_Bit1_P1_Dir_Down
   3241  1797		       09 02		      ORA	#2
   3242  1799		       85 d8		      STA	_Bit1_P1_Dir_Down
   3243  179b				   .skipL0429
   3244  179b				   .
   3245  179b							; 
   3246  179b
   3247  179b				   .L0430		;  if frame_counter{0}  &&  !gamenumber{0} then skip_gravity
   3248  179b
   3249  179b		       a5 d5		      LDA	frame_counter
   3250  179d		       4a		      LSR
   3251  179e		       90 05		      BCC	.skipL0430
   3252  17a0				   .condpart72
   3253  17a0		       a5 a6		      LDA	gamenumber
   3254  17a2		       4a		      LSR
   3255  17a3					      if	((* - .skip_gravity) < 127) && ((* - .skip_gravity) > -128)
   3256  17a3		       90 1a		      bcc	.skip_gravity
   3257  17a5				  -	      else
   3258  17a5				  -	      bcs	.29skipskip_gravity
   3259  17a5				  -	      jmp	.skip_gravity
   3260  17a5				  -.29skipskip_gravity
   3261  17a5					      endif
   3262  17a5				   .skipL0430
   3263  17a5				   .L0431		;  rem apply gravity
   3264  17a5
   3265  17a5				   .L0432		;  P1y_velocity  =  P1y_velocity  +  gravity_player1
   3266  17a5
   3267  17a5		       a5 ea		      LDA	w
   3268  17a7		       18		      CLC
   3269  17a8		       69 01		      ADC	#1
   3270  17aa		       85 ea		      STA	w
   3271  17ac		       a5 e9		      LDA	P1y_velocity
   3272  17ae		       69 00		      ADC	#0
   3273  17b0		       85 e9		      STA	P1y_velocity
   3274  17b2				   .L0433		;  P1y_position  =  P1y_position  +  P1y_velocity
   3275  17b2
   3276  17b2		       a5 eb		      LDA	x
   3277  17b4		       18		      CLC
   3278  17b5		       65 ea		      ADC	w
   3279  17b7		       85 eb		      STA	x
   3280  17b9		       a5 86		      LDA	P1y_position
   3281  17bb		       65 e9		      ADC	P1y_velocity
   3282  17bd		       85 86		      STA	P1y_position
   3283  17bf				   .
   3284  17bf							; 
   3285  17bf
   3286  17bf				   .skip_gravity
   3287  17bf							; skip_gravity
   3288  17bf
   3289  17bf				   .
   3290  17bf							; 
   3291  17bf
   3292  17bf				   .
   3293  17bf							; 
   3294  17bf
   3295  17bf				   .L0434		;  if !joy0left then _skip_joystick_left
   3296  17bf
   3297  17bf		       2c 80 02 	      bit	SWCHA
   3298  17c2					      if	((* - ._skip_joystick_left) < 127) && ((* - ._skip_joystick_left) > -128)
   3299  17c2		       70 1f		      bvs	._skip_joystick_left
   3300  17c4				  -	      else
   3301  17c4				  -	      bvc	.30skip_skip_joystick_left
   3302  17c4				  -	      jmp	._skip_joystick_left
   3303  17c4				  -.30skip_skip_joystick_left
   3304  17c4					      endif
   3305  17c4				   .L0435		;  if temp4{2}  ||  gamenumber{0} then player1x  =  player1x  -  1
   3306  17c4
   3307  17c4		       a5 9f		      LDA	temp4
   3308  17c6		       29 04		      AND	#4
   3309  17c8		       f0 03		      BEQ	.skipL0435
   3310  17ca				   .condpart73
   3311  17ca		       4c d2 97 	      jmp	.condpart74
   3312  17cd				   .skipL0435
   3313  17cd		       a5 a6		      LDA	gamenumber
   3314  17cf		       4a		      LSR
   3315  17d0		       90 02		      BCC	.skip16OR
   3316  17d2				   .condpart74
   3317  17d2		       c6 81		      DEC	player1x
   3318  17d4				   .skip16OR
   3319  17d4				   .L0436		;  _Bit6_Flip_P1{6}  =  1  :  _Bit2_P1_Dir_Left{2}  =	1  :  goto _skip_move
   3320  17d4
   3321  17d4		       a5 ec		      LDA	_Bit6_Flip_P1
   3322  17d6		       09 40		      ORA	#64
   3323  17d8		       85 ec		      STA	_Bit6_Flip_P1
   3324  17da		       a5 d8		      LDA	_Bit2_P1_Dir_Left
   3325  17dc		       09 04		      ORA	#4
   3326  17de		       85 d8		      STA	_Bit2_P1_Dir_Left
   3327  17e0		       4c 04 98 	      jmp	._skip_move
   3328  17e3
   3329  17e3				   ._skip_joystick_left
   3330  17e3							; _skip_joystick_left
   3331  17e3
   3332  17e3				   .
   3333  17e3							; 
   3334  17e3
   3335  17e3				   .
   3336  17e3							; 
   3337  17e3
   3338  17e3				   .L0437		;  if !joy0right then _skip_move
   3339  17e3
   3340  17e3		       2c 80 02 	      bit	SWCHA
   3341  17e6					      if	((* - ._skip_move) < 127) && ((* - ._skip_move) > -128)
   3342  17e6		       30 1c		      bmi	._skip_move
   3343  17e8				  -	      else
   3344  17e8				  -	      bpl	.31skip_skip_move
   3345  17e8				  -	      jmp	._skip_move
   3346  17e8				  -.31skip_skip_move
   3347  17e8					      endif
   3348  17e8				   .L0438		;  if temp4{3}  ||  gamenumber{0} then player1x  =  player1x  +  1
   3349  17e8
   3350  17e8		       a5 9f		      LDA	temp4
   3351  17ea		       29 08		      AND	#8
   3352  17ec		       f0 03		      BEQ	.skipL0438
   3353  17ee				   .condpart75
   3354  17ee		       4c f6 97 	      jmp	.condpart76
   3355  17f1				   .skipL0438
   3356  17f1		       a5 a6		      LDA	gamenumber
   3357  17f3		       4a		      LSR
   3358  17f4		       90 02		      BCC	.skip17OR
   3359  17f6				   .condpart76
   3360  17f6		       e6 81		      INC	player1x
   3361  17f8				   .skip17OR
   3362  17f8				   .L0439		;  _Bit6_Flip_P1{6}  =  0  :  _Bit3_P1_Dir_Right{3}  =  1
   3363  17f8
   3364  17f8		       a5 ec		      LDA	_Bit6_Flip_P1
   3365  17fa		       29 bf		      AND	#191
   3366  17fc		       85 ec		      STA	_Bit6_Flip_P1
   3367  17fe		       a5 d8		      LDA	_Bit3_P1_Dir_Right
   3368  1800		       09 08		      ORA	#8
   3369  1802		       85 d8		      STA	_Bit3_P1_Dir_Right
   3370  1804				   .
   3371  1804							; 
   3372  1804
   3373  1804				   ._skip_move
   3374  1804							; _skip_move
   3375  1804
   3376  1804				   .
   3377  1804							; 
   3378  1804
   3379  1804				   .
   3380  1804							; 
   3381  1804
   3382  1804				   .L0440		;  if player1y  <  player_min_y  &&  r_Bit0_room_type_top{0} then player1y  =	player_min_y
   3383  1804
   3384  1804		       a5 86		      LDA	player1y
   3385  1806		       c9 02		      CMP	#player_min_y
   3386  1808		       b0 0a		      BCS	.skipL0440
   3387  180a				   .condpart77
   3388  180a		       ad df f0 	      LDA	r_Bit0_room_type_top
   3389  180d		       4a		      LSR
   3390  180e		       90 04		      BCC	.skip77then
   3391  1810				   .condpart78
   3392  1810		       a9 02		      LDA	#player_min_y
   3393  1812		       85 86		      STA	player1y
   3394  1814				   .skip77then
   3395  1814				   .skipL0440
   3396  1814				   .
   3397  1814							; 
   3398  1814
   3399  1814				   .
   3400  1814							; 
   3401  1814
   3402  1814				   .L0441		;  if player1x  <  player_min_x then _Bit0_New_Room_P1_Flip{0}  =  _Bit6_Flip_P1{6}  :  new_room_player1y  =  player1y  :  new_room_player1x  =  player_max_x	:  gosub _Add_Room_State  :  WriteSendBuffer  =  req_move_left	:  goto _skip_game_action
   3403  1814
   3404  1814		       a5 81		      LDA	player1x
   3405  1816		       c9 0a		      CMP	#player_min_x
   3406  1818		       b0 23		      BCS	.skipL0441
   3407  181a				   .condpart79
   3408  181a		       a5 ec		      LDA	_Bit6_Flip_P1
   3409  181c		       29 40		      AND	#64
   3410  181e		       08		      PHP
   3411  181f		       a5 df		      LDA	_Bit0_New_Room_P1_Flip
   3412  1821		       29 fe		      AND	#254
   3413  1823		       28		      PLP
   3414  1824		       f0 02		      .byte.b	$F0, $02
   3415  1826		       09 01		      ORA	#1
   3416  1828		       85 df		      STA	_Bit0_New_Room_P1_Flip
   3417  182a		       a5 86		      LDA	player1y
   3418  182c		       85 a4		      STA	new_room_player1y
   3419  182e		       a9 86		      LDA	#player_max_x
   3420  1830		       85 a5		      STA	new_room_player1x
   3421  1832		       20 6c 9c 	      jsr	._Add_Room_State
   3422  1835		       a9 03		      LDA	#req_move_left
   3423  1837		       8d f1 1f 	      STA	WriteSendBuffer
   3424  183a		       4c b5 98 	      jmp	._skip_game_action
   3425  183d
   3426  183d				   .skipL0441
   3427  183d				   .L0442		;  if player1y  <  player_min_y then _Bit0_New_Room_P1_Flip{0}  =  _Bit6_Flip_P1{6}  :  new_room_player1x  =  player1x  :  new_room_player1y  =  player_max_y	:  gosub _Add_Room_State  :  WriteSendBuffer  =  req_move_up  :  goto _skip_game_action
   3428  183d
   3429  183d		       a5 86		      LDA	player1y
   3430  183f		       c9 02		      CMP	#player_min_y
   3431  1841		       b0 23		      BCS	.skipL0442
   3432  1843				   .condpart80
   3433  1843		       a5 ec		      LDA	_Bit6_Flip_P1
   3434  1845		       29 40		      AND	#64
   3435  1847		       08		      PHP
   3436  1848		       a5 df		      LDA	_Bit0_New_Room_P1_Flip
   3437  184a		       29 fe		      AND	#254
   3438  184c		       28		      PLP
   3439  184d		       f0 02		      .byte.b	$F0, $02
   3440  184f		       09 01		      ORA	#1
   3441  1851		       85 df		      STA	_Bit0_New_Room_P1_Flip
   3442  1853		       a5 81		      LDA	player1x
   3443  1855		       85 a5		      STA	new_room_player1x
   3444  1857		       a9 4c		      LDA	#player_max_y
   3445  1859		       85 a4		      STA	new_room_player1y
   3446  185b		       20 6c 9c 	      jsr	._Add_Room_State
   3447  185e		       a9 04		      LDA	#req_move_up
   3448  1860		       8d f1 1f 	      STA	WriteSendBuffer
   3449  1863		       4c b5 98 	      jmp	._skip_game_action
   3450  1866
   3451  1866				   .skipL0442
   3452  1866				   .L0443		;  if player1x  >  player_max_x then _Bit0_New_Room_P1_Flip{0}  =  _Bit6_Flip_P1{6}  :  new_room_player1y  =  player1y  :  new_room_player1x  =  player_min_x	:  gosub _Add_Room_State  :  WriteSendBuffer  =  req_move_right  :  goto _skip_game_action
   3453  1866
   3454  1866		       a9 86		      LDA	#player_max_x
   3455  1868		       c5 81		      CMP	player1x
   3456  186a		       b0 23		      BCS	.skipL0443
   3457  186c				   .condpart81
   3458  186c		       a5 ec		      LDA	_Bit6_Flip_P1
   3459  186e		       29 40		      AND	#64
   3460  1870		       08		      PHP
   3461  1871		       a5 df		      LDA	_Bit0_New_Room_P1_Flip
   3462  1873		       29 fe		      AND	#254
   3463  1875		       28		      PLP
   3464  1876		       f0 02		      .byte.b	$F0, $02
   3465  1878		       09 01		      ORA	#1
   3466  187a		       85 df		      STA	_Bit0_New_Room_P1_Flip
   3467  187c		       a5 86		      LDA	player1y
   3468  187e		       85 a4		      STA	new_room_player1y
   3469  1880		       a9 0a		      LDA	#player_min_x
   3470  1882		       85 a5		      STA	new_room_player1x
   3471  1884		       20 6c 9c 	      jsr	._Add_Room_State
   3472  1887		       a9 05		      LDA	#req_move_right
   3473  1889		       8d f1 1f 	      STA	WriteSendBuffer
   3474  188c		       4c b5 98 	      jmp	._skip_game_action
   3475  188f
   3476  188f				   .skipL0443
   3477  188f				   .L0444		;  if player1y  >  player_max_y then _Bit0_New_Room_P1_Flip{0}  =  _Bit6_Flip_P1{6}  :  new_room_player1x  =  player1x  :  new_room_player1y  =  player_min_y	:  gosub _Add_Room_State  :  WriteSendBuffer  =  req_move_down
   3478  188f
   3479  188f		       a9 4c		      LDA	#player_max_y
   3480  1891		       c5 86		      CMP	player1y
   3481  1893		       b0 20		      BCS	.skipL0444
   3482  1895				   .condpart82
   3483  1895		       a5 ec		      LDA	_Bit6_Flip_P1
   3484  1897		       29 40		      AND	#64
   3485  1899		       08		      PHP
   3486  189a		       a5 df		      LDA	_Bit0_New_Room_P1_Flip
   3487  189c		       29 fe		      AND	#254
   3488  189e		       28		      PLP
   3489  189f		       f0 02		      .byte.b	$F0, $02
   3490  18a1		       09 01		      ORA	#1
   3491  18a3		       85 df		      STA	_Bit0_New_Room_P1_Flip
   3492  18a5		       a5 81		      LDA	player1x
   3493  18a7		       85 a5		      STA	new_room_player1x
   3494  18a9		       a9 02		      LDA	#player_min_y
   3495  18ab		       85 a4		      STA	new_room_player1y
   3496  18ad		       20 6c 9c 	      jsr	._Add_Room_State
   3497  18b0		       a9 06		      LDA	#req_move_down
   3498  18b2		       8d f1 1f 	      STA	WriteSendBuffer
   3499  18b5				   .skipL0444
   3500  18b5				   .
   3501  18b5							; 
   3502  18b5
   3503  18b5				   ._skip_game_action
   3504  18b5							; _skip_game_action
   3505  18b5
   3506  18b5				   .
   3507  18b5							; 
   3508  18b5
   3509  18b5				   .
   3510  18b5							; 
   3511  18b5
   3512  18b5				   .L0445		;  if !_Ch0_Sound then goto __Skip_Ch_0
   3513  18b5
   3514  18b5		       a5 d9		      LDA	_Ch0_Sound
   3515  18b7		       d0 03		      BNE	.skipL0445
   3516  18b9				   .condpart83
   3517  18b9		       4c e8 99 	      jmp	.__Skip_Ch_0
   3518  18bc
   3519  18bc				   .skipL0445
   3520  18bc				   .
   3521  18bc							; 
   3522  18bc
   3523  18bc				   .
   3524  18bc							; 
   3525  18bc
   3526  18bc				   .L0446		;  _Ch0_Duration  =  _Ch0_Duration  -	1
   3527  18bc
   3528  18bc		       c6 da		      DEC	_Ch0_Duration
   3529  18be				   .
   3530  18be							; 
   3531  18be
   3532  18be				   .
   3533  18be							; 
   3534  18be
   3535  18be				   .
   3536  18be							; 
   3537  18be
   3538  18be				   .L0447		;  if _Ch0_Duration then goto __Skip_Ch_0
   3539  18be
   3540  18be		       a5 da		      LDA	_Ch0_Duration
   3541  18c0		       f0 03		      BEQ	.skipL0447
   3542  18c2				   .condpart84
   3543  18c2		       4c e8 99 	      jmp	.__Skip_Ch_0
   3544  18c5
   3545  18c5				   .skipL0447
   3546  18c5				   .
   3547  18c5							; 
   3548  18c5
   3549  18c5				   .
   3550  18c5							; 
   3551  18c5
   3552  18c5				   .
   3553  18c5							; 
   3554  18c5
   3555  18c5				   .
   3556  18c5							; 
   3557  18c5
   3558  18c5				   .L0448		;  if _Ch0_Sound  <>  1 then goto __Skip_Ch0_Sound_001
   3559  18c5
   3560  18c5		       a5 d9		      LDA	_Ch0_Sound
   3561  18c7		       c9 01		      CMP	#1
   3562  18c9		       f0 03		      BEQ	.skipL0448
   3563  18cb				   .condpart85
   3564  18cb		       4c 13 99 	      jmp	.__Skip_Ch0_Sound_001
   3565  18ce
   3566  18ce				   .skipL0448
   3567  18ce				   .
   3568  18ce							; 
   3569  18ce
   3570  18ce				   .
   3571  18ce							; 
   3572  18ce
   3573  18ce				   .L0449		;  temp4  =  _SD_Shot_Wall[_Ch0_Counter]
   3574  18ce
   3575  18ce		       a6 db		      LDX	_Ch0_Counter
   3576  18d0		       bd 2d 9d 	      LDA	_SD_Shot_Wall,x
   3577  18d3		       85 9f		      STA	temp4
   3578  18d5				   .
   3579  18d5							; 
   3580  18d5
   3581  18d5				   .
   3582  18d5							; 
   3583  18d5
   3584  18d5				   .L0450		;  if temp4  =  255 then goto __Clear_Ch_0
   3585  18d5
   3586  18d5		       a5 9f		      LDA	temp4
   3587  18d7		       c9 ff		      CMP	#255
   3588  18d9		       d0 03		      BNE	.skipL0450
   3589  18db				   .condpart86
   3590  18db		       4c e2 99 	      jmp	.__Clear_Ch_0
   3591  18de
   3592  18de				   .skipL0450
   3593  18de				   .
   3594  18de							; 
   3595  18de
   3596  18de				   .
   3597  18de							; 
   3598  18de
   3599  18de				   .L0451		;  _Ch0_Counter  =  _Ch0_Counter  +  1
   3600  18de
   3601  18de		       e6 db		      INC	_Ch0_Counter
   3602  18e0				   .L0452		;  temp5  =  _SD_Shot_Wall[_Ch0_Counter]  :  _Ch0_Counter  =  _Ch0_Counter  +	1
   3603  18e0
   3604  18e0		       a6 db		      LDX	_Ch0_Counter
   3605  18e2		       bd 2d 9d 	      LDA	_SD_Shot_Wall,x
   3606  18e5		       85 a0		      STA	temp5
   3607  18e7		       e6 db		      INC	_Ch0_Counter
   3608  18e9				   .L0453		;  temp6  =  _SD_Shot_Wall[_Ch0_Counter]  :  _Ch0_Counter  =  _Ch0_Counter  +	1
   3609  18e9
   3610  18e9		       a6 db		      LDX	_Ch0_Counter
   3611  18eb		       bd 2d 9d 	      LDA	_SD_Shot_Wall,x
   3612  18ee		       85 a1		      STA	temp6
   3613  18f0		       e6 db		      INC	_Ch0_Counter
   3614  18f2				   .L0454		;  if _Ch0_Counter{0} then COLUBK  =  _E0
   3615  18f2
   3616  18f2		       a5 db		      LDA	_Ch0_Counter
   3617  18f4		       4a		      LSR
   3618  18f5		       90 04		      BCC	.skipL0454
   3619  18f7				   .condpart87
   3620  18f7		       a9 e0		      LDA	#_E0
   3621  18f9		       85 09		      STA	COLUBK
   3622  18fb				   .skipL0454
   3623  18fb				   .
   3624  18fb							; 
   3625  18fb
   3626  18fb				   .
   3627  18fb							; 
   3628  18fb
   3629  18fb				   .L0455		;  AUDV0  =  temp4
   3630  18fb
   3631  18fb		       a5 9f		      LDA	temp4
   3632  18fd		       85 19		      STA	AUDV0
   3633  18ff				   .L0456		;  AUDC0  =  temp5
   3634  18ff
   3635  18ff		       a5 a0		      LDA	temp5
   3636  1901		       85 15		      STA	AUDC0
   3637  1903				   .L0457		;  AUDF0  =  temp6
   3638  1903
   3639  1903		       a5 a1		      LDA	temp6
   3640  1905		       85 17		      STA	AUDF0
   3641  1907				   .
   3642  1907							; 
   3643  1907
   3644  1907				   .
   3645  1907							; 
   3646  1907
   3647  1907				   .L0458		;  _Ch0_Duration  =  _SD_Shot_Wall[_Ch0_Counter]  :  _Ch0_Counter  =  _Ch0_Counter  +	1
   3648  1907
   3649  1907		       a6 db		      LDX	_Ch0_Counter
   3650  1909		       bd 2d 9d 	      LDA	_SD_Shot_Wall,x
   3651  190c		       85 da		      STA	_Ch0_Duration
   3652  190e		       e6 db		      INC	_Ch0_Counter
   3653  1910				   .
   3654  1910							; 
   3655  1910
   3656  1910				   .
   3657  1910							; 
   3658  1910
   3659  1910				   .L0459		;  goto __Skip_Ch_0
   3660  1910
   3661  1910		       4c e8 99 	      jmp	.__Skip_Ch_0
   3662  1913
   3663  1913				   .
   3664  1913							; 
   3665  1913
   3666  1913				   .__Skip_Ch0_Sound_001
   3667  1913							; __Skip_Ch0_Sound_001
   3668  1913
   3669  1913				   .
   3670  1913							; 
   3671  1913
   3672  1913				   .
   3673  1913							; 
   3674  1913
   3675  1913				   .
   3676  1913							; 
   3677  1913
   3678  1913				   .
   3679  1913							; 
   3680  1913
   3681  1913				   .L0460		;  if _Ch0_Sound  <>  2 then goto __Skip_Ch0_Sound_002
   3682  1913
   3683  1913		       a5 d9		      LDA	_Ch0_Sound
   3684  1915		       c9 02		      CMP	#2
   3685  1917		       f0 03		      BEQ	.skipL0460
   3686  1919				   .condpart88
   3687  1919		       4c 58 99 	      jmp	.__Skip_Ch0_Sound_002
   3688  191c
   3689  191c				   .skipL0460
   3690  191c				   .
   3691  191c							; 
   3692  191c
   3693  191c				   .
   3694  191c							; 
   3695  191c
   3696  191c				   .L0461		;  temp4  =  _SD_Shoot_Miss[_Ch0_Counter]
   3697  191c
   3698  191c		       a6 db		      LDX	_Ch0_Counter
   3699  191e		       bd 65 9d 	      LDA	_SD_Shoot_Miss,x
   3700  1921		       85 9f		      STA	temp4
   3701  1923				   .
   3702  1923							; 
   3703  1923
   3704  1923				   .
   3705  1923							; 
   3706  1923
   3707  1923				   .L0462		;  if temp4  =  255 then goto __Clear_Ch_0
   3708  1923
   3709  1923		       a5 9f		      LDA	temp4
   3710  1925		       c9 ff		      CMP	#255
   3711  1927		       d0 03		      BNE	.skipL0462
   3712  1929				   .condpart89
   3713  1929		       4c e2 99 	      jmp	.__Clear_Ch_0
   3714  192c
   3715  192c				   .skipL0462
   3716  192c				   .
   3717  192c							; 
   3718  192c
   3719  192c				   .
   3720  192c							; 
   3721  192c
   3722  192c				   .L0463		;  _Ch0_Counter  =  _Ch0_Counter  +  1
   3723  192c
   3724  192c		       e6 db		      INC	_Ch0_Counter
   3725  192e				   .L0464		;  temp5  =  _SD_Shoot_Miss[_Ch0_Counter]  :  _Ch0_Counter  =	_Ch0_Counter  +  1
   3726  192e
   3727  192e		       a6 db		      LDX	_Ch0_Counter
   3728  1930		       bd 65 9d 	      LDA	_SD_Shoot_Miss,x
   3729  1933		       85 a0		      STA	temp5
   3730  1935		       e6 db		      INC	_Ch0_Counter
   3731  1937				   .L0465		;  temp6  =  _SD_Shoot_Miss[_Ch0_Counter]  :  _Ch0_Counter  =	_Ch0_Counter  +  1
   3732  1937
   3733  1937		       a6 db		      LDX	_Ch0_Counter
   3734  1939		       bd 65 9d 	      LDA	_SD_Shoot_Miss,x
   3735  193c		       85 a1		      STA	temp6
   3736  193e		       e6 db		      INC	_Ch0_Counter
   3737  1940				   .
   3738  1940							; 
   3739  1940
   3740  1940				   .
   3741  1940							; 
   3742  1940
   3743  1940				   .L0466		;  AUDV0  =  temp4
   3744  1940
   3745  1940		       a5 9f		      LDA	temp4
   3746  1942		       85 19		      STA	AUDV0
   3747  1944				   .L0467		;  AUDC0  =  temp5
   3748  1944
   3749  1944		       a5 a0		      LDA	temp5
   3750  1946		       85 15		      STA	AUDC0
   3751  1948				   .L0468		;  AUDF0  =  temp6
   3752  1948
   3753  1948		       a5 a1		      LDA	temp6
   3754  194a		       85 17		      STA	AUDF0
   3755  194c				   .
   3756  194c							; 
   3757  194c
   3758  194c				   .
   3759  194c							; 
   3760  194c
   3761  194c				   .L0469		;  _Ch0_Duration  =  _SD_Shoot_Miss[_Ch0_Counter]  :  _Ch0_Counter  =	_Ch0_Counter  +  1
   3762  194c
   3763  194c		       a6 db		      LDX	_Ch0_Counter
   3764  194e		       bd 65 9d 	      LDA	_SD_Shoot_Miss,x
   3765  1951		       85 da		      STA	_Ch0_Duration
   3766  1953		       e6 db		      INC	_Ch0_Counter
   3767  1955				   .
   3768  1955							; 
   3769  1955
   3770  1955				   .
   3771  1955							; 
   3772  1955
   3773  1955				   .L0470		;  goto __Skip_Ch_0
   3774  1955
   3775  1955		       4c e8 99 	      jmp	.__Skip_Ch_0
   3776  1958
   3777  1958				   .
   3778  1958							; 
   3779  1958
   3780  1958				   .__Skip_Ch0_Sound_002
   3781  1958							; __Skip_Ch0_Sound_002
   3782  1958
   3783  1958				   .
   3784  1958							; 
   3785  1958
   3786  1958				   .
   3787  1958							; 
   3788  1958
   3789  1958				   .
   3790  1958							; 
   3791  1958
   3792  1958				   .
   3793  1958							; 
   3794  1958
   3795  1958				   .L0471		;  if _Ch0_Sound  <>  3 then goto __Skip_Ch0_Sound_003
   3796  1958
   3797  1958		       a5 d9		      LDA	_Ch0_Sound
   3798  195a		       c9 03		      CMP	#3
   3799  195c		       f0 03		      BEQ	.skipL0471
   3800  195e				   .condpart90
   3801  195e		       4c 9d 99 	      jmp	.__Skip_Ch0_Sound_003
   3802  1961
   3803  1961				   .skipL0471
   3804  1961				   .
   3805  1961							; 
   3806  1961
   3807  1961				   .
   3808  1961							; 
   3809  1961
   3810  1961				   .L0472		;  temp4  =  _SD_Shoot_Enemy[_Ch0_Counter]
   3811  1961
   3812  1961		       a6 db		      LDX	_Ch0_Counter
   3813  1963		       bd ad 9d 	      LDA	_SD_Shoot_Enemy,x
   3814  1966		       85 9f		      STA	temp4
   3815  1968				   .
   3816  1968							; 
   3817  1968
   3818  1968				   .
   3819  1968							; 
   3820  1968
   3821  1968				   .L0473		;  if temp4  =  255 then goto __Clear_Ch_0
   3822  1968
   3823  1968		       a5 9f		      LDA	temp4
   3824  196a		       c9 ff		      CMP	#255
   3825  196c		       d0 03		      BNE	.skipL0473
   3826  196e				   .condpart91
   3827  196e		       4c e2 99 	      jmp	.__Clear_Ch_0
   3828  1971
   3829  1971				   .skipL0473
   3830  1971				   .
   3831  1971							; 
   3832  1971
   3833  1971				   .
   3834  1971							; 
   3835  1971
   3836  1971				   .L0474		;  _Ch0_Counter  =  _Ch0_Counter  +  1
   3837  1971
   3838  1971		       e6 db		      INC	_Ch0_Counter
   3839  1973				   .L0475		;  temp5  =  _SD_Shoot_Enemy[_Ch0_Counter]  :	_Ch0_Counter  =  _Ch0_Counter  +  1
   3840  1973
   3841  1973		       a6 db		      LDX	_Ch0_Counter
   3842  1975		       bd ad 9d 	      LDA	_SD_Shoot_Enemy,x
   3843  1978		       85 a0		      STA	temp5
   3844  197a		       e6 db		      INC	_Ch0_Counter
   3845  197c				   .L0476		;  temp6  =  _SD_Shoot_Enemy[_Ch0_Counter]  :	_Ch0_Counter  =  _Ch0_Counter  +  1
   3846  197c
   3847  197c		       a6 db		      LDX	_Ch0_Counter
   3848  197e		       bd ad 9d 	      LDA	_SD_Shoot_Enemy,x
   3849  1981		       85 a1		      STA	temp6
   3850  1983		       e6 db		      INC	_Ch0_Counter
   3851  1985				   .
   3852  1985							; 
   3853  1985
   3854  1985				   .
   3855  1985							; 
   3856  1985
   3857  1985				   .L0477		;  AUDV0  =  temp4
   3858  1985
   3859  1985		       a5 9f		      LDA	temp4
   3860  1987		       85 19		      STA	AUDV0
   3861  1989				   .L0478		;  AUDC0  =  temp5
   3862  1989
   3863  1989		       a5 a0		      LDA	temp5
   3864  198b		       85 15		      STA	AUDC0
   3865  198d				   .L0479		;  AUDF0  =  temp6
   3866  198d
   3867  198d		       a5 a1		      LDA	temp6
   3868  198f		       85 17		      STA	AUDF0
   3869  1991				   .
   3870  1991							; 
   3871  1991
   3872  1991				   .
   3873  1991							; 
   3874  1991
   3875  1991				   .L0480		;  _Ch0_Duration  =  _SD_Shoot_Enemy[_Ch0_Counter]  :	_Ch0_Counter  =  _Ch0_Counter  +  1
   3876  1991
   3877  1991		       a6 db		      LDX	_Ch0_Counter
   3878  1993		       bd ad 9d 	      LDA	_SD_Shoot_Enemy,x
   3879  1996		       85 da		      STA	_Ch0_Duration
   3880  1998		       e6 db		      INC	_Ch0_Counter
   3881  199a				   .
   3882  199a							; 
   3883  199a
   3884  199a				   .
   3885  199a							; 
   3886  199a
   3887  199a				   .L0481		;  goto __Skip_Ch_0
   3888  199a
   3889  199a		       4c e8 99 	      jmp	.__Skip_Ch_0
   3890  199d
   3891  199d				   .
   3892  199d							; 
   3893  199d
   3894  199d				   .__Skip_Ch0_Sound_003
   3895  199d							; __Skip_Ch0_Sound_003
   3896  199d
   3897  199d				   .
   3898  199d							; 
   3899  199d
   3900  199d				   .
   3901  199d							; 
   3902  199d
   3903  199d				   .
   3904  199d							; 
   3905  199d
   3906  199d				   .
   3907  199d							; 
   3908  199d
   3909  199d				   .L0482		;  if _Ch0_Sound  <>  4 then goto __Skip_Ch0_Sound_004
   3910  199d
   3911  199d		       a5 d9		      LDA	_Ch0_Sound
   3912  199f		       c9 04		      CMP	#4
   3913  19a1		       f0 03		      BEQ	.skipL0482
   3914  19a3				   .condpart92
   3915  19a3		       4c e2 99 	      jmp	.__Skip_Ch0_Sound_004
   3916  19a6
   3917  19a6				   .skipL0482
   3918  19a6				   .
   3919  19a6							; 
   3920  19a6
   3921  19a6				   .
   3922  19a6							; 
   3923  19a6
   3924  19a6				   .L0483		;  temp4  =  _SD_Touch_Enemy[_Ch0_Counter]
   3925  19a6
   3926  19a6		       a6 db		      LDX	_Ch0_Counter
   3927  19a8		       bd d1 9d 	      LDA	_SD_Touch_Enemy,x
   3928  19ab		       85 9f		      STA	temp4
   3929  19ad				   .
   3930  19ad							; 
   3931  19ad
   3932  19ad				   .
   3933  19ad							; 
   3934  19ad
   3935  19ad				   .L0484		;  if temp4  =  255 then goto __Clear_Ch_0
   3936  19ad
   3937  19ad		       a5 9f		      LDA	temp4
   3938  19af		       c9 ff		      CMP	#255
   3939  19b1		       d0 03		      BNE	.skipL0484
   3940  19b3				   .condpart93
   3941  19b3		       4c e2 99 	      jmp	.__Clear_Ch_0
   3942  19b6
   3943  19b6				   .skipL0484
   3944  19b6				   .
   3945  19b6							; 
   3946  19b6
   3947  19b6				   .
   3948  19b6							; 
   3949  19b6
   3950  19b6				   .L0485		;  _Ch0_Counter  =  _Ch0_Counter  +  1
   3951  19b6
   3952  19b6		       e6 db		      INC	_Ch0_Counter
   3953  19b8				   .L0486		;  temp5  =  _SD_Touch_Enemy[_Ch0_Counter]  :	_Ch0_Counter  =  _Ch0_Counter  +  1
   3954  19b8
   3955  19b8		       a6 db		      LDX	_Ch0_Counter
   3956  19ba		       bd d1 9d 	      LDA	_SD_Touch_Enemy,x
   3957  19bd		       85 a0		      STA	temp5
   3958  19bf		       e6 db		      INC	_Ch0_Counter
   3959  19c1				   .L0487		;  temp6  =  _SD_Touch_Enemy[_Ch0_Counter]  :	_Ch0_Counter  =  _Ch0_Counter  +  1
   3960  19c1
   3961  19c1		       a6 db		      LDX	_Ch0_Counter
   3962  19c3		       bd d1 9d 	      LDA	_SD_Touch_Enemy,x
   3963  19c6		       85 a1		      STA	temp6
   3964  19c8		       e6 db		      INC	_Ch0_Counter
   3965  19ca				   .
   3966  19ca							; 
   3967  19ca
   3968  19ca				   .
   3969  19ca							; 
   3970  19ca
   3971  19ca				   .L0488		;  AUDV0  =  temp4
   3972  19ca
   3973  19ca		       a5 9f		      LDA	temp4
   3974  19cc		       85 19		      STA	AUDV0
   3975  19ce				   .L0489		;  AUDC0  =  temp5
   3976  19ce
   3977  19ce		       a5 a0		      LDA	temp5
   3978  19d0		       85 15		      STA	AUDC0
   3979  19d2				   .L0490		;  AUDF0  =  temp6
   3980  19d2
   3981  19d2		       a5 a1		      LDA	temp6
   3982  19d4		       85 17		      STA	AUDF0
   3983  19d6				   .
   3984  19d6							; 
   3985  19d6
   3986  19d6				   .
   3987  19d6							; 
   3988  19d6
   3989  19d6				   .L0491		;  _Ch0_Duration  =  _SD_Touch_Enemy[_Ch0_Counter]  :	_Ch0_Counter  =  _Ch0_Counter  +  1
   3990  19d6
   3991  19d6		       a6 db		      LDX	_Ch0_Counter
   3992  19d8		       bd d1 9d 	      LDA	_SD_Touch_Enemy,x
   3993  19db		       85 da		      STA	_Ch0_Duration
   3994  19dd		       e6 db		      INC	_Ch0_Counter
   3995  19df				   .
   3996  19df							; 
   3997  19df
   3998  19df				   .
   3999  19df							; 
   4000  19df
   4001  19df				   .L0492		;  goto __Skip_Ch_0
   4002  19df
   4003  19df		       4c e8 99 	      jmp	.__Skip_Ch_0
   4004  19e2
   4005  19e2				   .
   4006  19e2							; 
   4007  19e2
   4008  19e2				   .__Skip_Ch0_Sound_004
   4009  19e2							; __Skip_Ch0_Sound_004
   4010  19e2
   4011  19e2				   .
   4012  19e2							; 
   4013  19e2
   4014  19e2				   .
   4015  19e2							; 
   4016  19e2
   4017  19e2				   .__Clear_Ch_0
   4018  19e2							; __Clear_Ch_0
   4019  19e2
   4020  19e2				   .L0493		;  _Ch0_Sound	=  0  :  AUDV0	=  0
   4021  19e2
   4022  19e2		       a9 00		      LDA	#0
   4023  19e4		       85 d9		      STA	_Ch0_Sound
   4024  19e6		       85 19		      STA	AUDV0
   4025  19e8				   .
   4026  19e8							; 
   4027  19e8
   4028  19e8				   .
   4029  19e8							; 
   4030  19e8
   4031  19e8				   .__Skip_Ch_0
   4032  19e8							; __Skip_Ch_0
   4033  19e8
   4034  19e8				   .
   4035  19e8							; 
   4036  19e8
   4037  19e8				   .
   4038  19e8							; 
   4039  19e8
   4040  19e8				   .
   4041  19e8							; 
   4042  19e8
   4043  19e8				   .L0494		;  if Game_Status then AUDV1  =  0  :	AUDC1  =  0  :	AUDF1  =  0  :	goto __Skip_Ch_1
   4044  19e8
   4045  19e8		       a5 d3		      LDA	Game_Status
   4046  19ea		       f0 0b		      BEQ	.skipL0494
   4047  19ec				   .condpart94
   4048  19ec		       a9 00		      LDA	#0
   4049  19ee		       85 1a		      STA	AUDV1
   4050  19f0		       85 16		      STA	AUDC1
   4051  19f2		       85 18		      STA	AUDF1
   4052  19f4		       4c 45 9a 	      jmp	.__Skip_Ch_1
   4053  19f7
   4054  19f7				   .skipL0494
   4055  19f7				   .
   4056  19f7							; 
   4057  19f7
   4058  19f7				   .
   4059  19f7							; 
   4060  19f7
   4061  19f7				   .
   4062  19f7							; 
   4063  19f7
   4064  19f7				   .
   4065  19f7							; 
   4066  19f7
   4067  19f7				   .L0495		;  _Ch1_Duration  =  _Ch1_Duration  -	1
   4068  19f7
   4069  19f7		       c6 e2		      DEC	_Ch1_Duration
   4070  19f9				   .
   4071  19f9							; 
   4072  19f9
   4073  19f9				   .
   4074  19f9							; 
   4075  19f9
   4076  19f9				   .
   4077  19f9							; 
   4078  19f9
   4079  19f9				   .
   4080  19f9							; 
   4081  19f9
   4082  19f9				   .L0496		;  if _Ch1_Duration then goto __Skip_Ch_1
   4083  19f9
   4084  19f9		       a5 e2		      LDA	_Ch1_Duration
   4085  19fb		       f0 03		      BEQ	.skipL0496
   4086  19fd				   .condpart95
   4087  19fd		       4c 45 9a 	      jmp	.__Skip_Ch_1
   4088  1a00
   4089  1a00				   .skipL0496
   4090  1a00				   .
   4091  1a00							; 
   4092  1a00
   4093  1a00				   .
   4094  1a00							; 
   4095  1a00
   4096  1a00				   .
   4097  1a00							; 
   4098  1a00
   4099  1a00				   .
   4100  1a00							; 
   4101  1a00
   4102  1a00				   .
   4103  1a00							; 
   4104  1a00
   4105  1a00				   .
   4106  1a00							; 
   4107  1a00
   4108  1a00				   .
   4109  1a00							; 
   4110  1a00
   4111  1a00				   .
   4112  1a00							; 
   4113  1a00
   4114  1a00				   .
   4115  1a00							; 
   4116  1a00
   4117  1a00				   .
   4118  1a00							; 
   4119  1a00
   4120  1a00				   .L0497		;  temp4  =  sread ( _SD_Music01 ) 
   4121  1a00
   4122  1a00		       a2 b2		      ldx	#_SD_Music01
   4123  1a02		       a1 00		      lda	(0,x)
   4124  1a04		       f6 00		      inc	0,x
   4125  1a06		       d0 02		      bne	*+4
   4126  1a08		       f6 01		      inc	1,x
   4127  1a0a		       85 9f		      STA	temp4
   4128  1a0c				   .
   4129  1a0c							; 
   4130  1a0c
   4131  1a0c				   .
   4132  1a0c							; 
   4133  1a0c
   4134  1a0c				   .
   4135  1a0c							; 
   4136  1a0c
   4137  1a0c				   .
   4138  1a0c							; 
   4139  1a0c
   4140  1a0c				   .L0498		;  if temp4  =  255 then goto __BG_Music_Setup_01
   4141  1a0c
   4142  1a0c		       a5 9f		      LDA	temp4
   4143  1a0e		       c9 ff		      CMP	#255
   4144  1a10		       d0 03		      BNE	.skipL0498
   4145  1a12				   .condpart96
   4146  1a12		       4c ee 9d 	      jmp	.__BG_Music_Setup_01
   4147  1a15
   4148  1a15				   .skipL0498
   4149  1a15				   .
   4150  1a15							; 
   4151  1a15
   4152  1a15				   .
   4153  1a15							; 
   4154  1a15
   4155  1a15				   .
   4156  1a15							; 
   4157  1a15
   4158  1a15				   .
   4159  1a15							; 
   4160  1a15
   4161  1a15				   .L0499		;  temp5  =  sread ( _SD_Music01 ) 
   4162  1a15
   4163  1a15		       a2 b2		      ldx	#_SD_Music01
   4164  1a17		       a1 00		      lda	(0,x)
   4165  1a19		       f6 00		      inc	0,x
   4166  1a1b		       d0 02		      bne	*+4
   4167  1a1d		       f6 01		      inc	1,x
   4168  1a1f		       85 a0		      STA	temp5
   4169  1a21				   .L0500		;  temp6  =  sread ( _SD_Music01 ) 
   4170  1a21
   4171  1a21		       a2 b2		      ldx	#_SD_Music01
   4172  1a23		       a1 00		      lda	(0,x)
   4173  1a25		       f6 00		      inc	0,x
   4174  1a27		       d0 02		      bne	*+4
   4175  1a29		       f6 01		      inc	1,x
   4176  1a2b		       85 a1		      STA	temp6
   4177  1a2d				   .
   4178  1a2d							; 
   4179  1a2d
   4180  1a2d				   .
   4181  1a2d							; 
   4182  1a2d
   4183  1a2d				   .
   4184  1a2d							; 
   4185  1a2d
   4186  1a2d				   .
   4187  1a2d							; 
   4188  1a2d
   4189  1a2d				   .L0501		;  AUDV1  =  temp4
   4190  1a2d
   4191  1a2d		       a5 9f		      LDA	temp4
   4192  1a2f		       85 1a		      STA	AUDV1
   4193  1a31				   .L0502		;  AUDC1  =  temp5
   4194  1a31
   4195  1a31		       a5 a0		      LDA	temp5
   4196  1a33		       85 16		      STA	AUDC1
   4197  1a35				   .L0503		;  AUDF1  =  temp6
   4198  1a35
   4199  1a35		       a5 a1		      LDA	temp6
   4200  1a37		       85 18		      STA	AUDF1
   4201  1a39				   .
   4202  1a39							; 
   4203  1a39
   4204  1a39				   .
   4205  1a39							; 
   4206  1a39
   4207  1a39				   .
   4208  1a39							; 
   4209  1a39
   4210  1a39				   .
   4211  1a39							; 
   4212  1a39
   4213  1a39				   .L0504		;  _Ch1_Duration  =  sread ( _SD_Music01 ) 
   4214  1a39
   4215  1a39		       a2 b2		      ldx	#_SD_Music01
   4216  1a3b		       a1 00		      lda	(0,x)
   4217  1a3d		       f6 00		      inc	0,x
   4218  1a3f		       d0 02		      bne	*+4
   4219  1a41		       f6 01		      inc	1,x
   4220  1a43		       85 e2		      STA	_Ch1_Duration
   4221  1a45				   .
   4222  1a45							; 
   4223  1a45
   4224  1a45				   .
   4225  1a45							; 
   4226  1a45
   4227  1a45				   .
   4228  1a45							; 
   4229  1a45
   4230  1a45				   .
   4231  1a45							; 
   4232  1a45
   4233  1a45				   .
   4234  1a45							; 
   4235  1a45
   4236  1a45				   .
   4237  1a45							; 
   4238  1a45
   4239  1a45				   .
   4240  1a45							; 
   4241  1a45
   4242  1a45				   .__Skip_Ch_1
   4243  1a45							; __Skip_Ch_1
   4244  1a45
   4245  1a45				   .
   4246  1a45							; 
   4247  1a45
   4248  1a45				   .
   4249  1a45							; 
   4250  1a45
   4251  1a45				   .
   4252  1a45							; 
   4253  1a45
   4254  1a45				   .
   4255  1a45							; 
   4256  1a45
   4257  1a45				   .
   4258  1a45							; 
   4259  1a45
   4260  1a45				   .
   4261  1a45							; 
   4262  1a45
   4263  1a45				   .
   4264  1a45							; 
   4265  1a45
   4266  1a45				   .
   4267  1a45							; 
   4268  1a45
   4269  1a45				   .L0505		;  if _Bit6_Flip_P1{6} then REFP1  =  8
   4270  1a45
   4271  1a45		       24 ec		      BIT	_Bit6_Flip_P1
   4272  1a47		       50 04		      BVC	.skipL0505
   4273  1a49				   .condpart97
   4274  1a49		       a9 08		      LDA	#8
   4275  1a4b		       85 0c		      STA	REFP1
   4276  1a4d				   .skipL0505
   4277  1a4d				   .L0506		;  if _Bit2_roommate_Dir{2} then REFP0  =  8
   4278  1a4d
   4279  1a4d		       a5 ec		      LDA	_Bit2_roommate_Dir
   4280  1a4f		       29 04		      AND	#4
   4281  1a51		       f0 04		      BEQ	.skipL0506
   4282  1a53				   .condpart98
   4283  1a53		       a9 08		      LDA	#8
   4284  1a55		       85 0b		      STA	REFP0
   4285  1a57				   .skipL0506
   4286  1a57				   .
   4287  1a57							; 
   4288  1a57
   4289  1a57				   .L0507		;  drawscreen
   4290  1a57
   4291  1a57		       85 ee		      sta	temp7
   4292  1a59		       a9 9a		      lda	#>(ret_point3-1)
   4293  1a5b		       48		      pha
   4294  1a5c		       a9 6e		      lda	#<(ret_point3-1)
   4295  1a5e		       48		      pha
   4296  1a5f		       a9 f4		      lda	#>(drawscreen-1)
   4297  1a61		       48		      pha
   4298  1a62		       a9 e5		      lda	#<(drawscreen-1)
   4299  1a64		       48		      pha
   4300  1a65		       a5 ee		      lda	temp7
   4301  1a67		       48		      pha
   4302  1a68		       8a		      txa
   4303  1a69		       48		      pha
   4304  1a6a		       a2 04		      ldx	#4
   4305  1a6c		       4c e8 ff 	      jmp	BS_jsr
   4306  1a6f				   ret_point3
   4307  1a6f				   .
   4308  1a6f							; 
   4309  1a6f
   4310  1a6f				   .L0508		;  goto __Main_Loop
   4311  1a6f
   4312  1a6f		       4c 92 91 	      jmp	.__Main_Loop
   4313  1a72
   4314  1a72				   .
   4315  1a72							; 
   4316  1a72
   4317  1a72				   .
   4318  1a72							; 
   4319  1a72
   4320  1a72				   .
   4321  1a72							; 
   4322  1a72
   4323  1a72				   .
   4324  1a72							; 
   4325  1a72
   4326  1a72				   ._game_over_action
   4327  1a72							; _game_over_action
   4328  1a72
   4329  1a72				   .L0509		;  if joy0fire then goto _Reset_To_Start
   4330  1a72
   4331  1a72		       24 0c		      bit	INPT4
   4332  1a74		       30 03		      BMI	.skipL0509
   4333  1a76				   .condpart99
   4334  1a76		       4c 1a 9d 	      jmp	._Reset_To_Start
   4335  1a79
   4336  1a79				   .skipL0509
   4337  1a79				   .L0510		;  goto _skip_game_action
   4338  1a79
   4339  1a79		       4c b5 98 	      jmp	._skip_game_action
   4340  1a7c
   4341  1a7c				   .
   4342  1a7c							; 
   4343  1a7c
   4344  1a7c				   ._Level_Finished_loop
   4345  1a7c							; _Level_Finished_loop
   4346  1a7c
   4347  1a7c				   .
   4348  1a7c							; 
   4349  1a7c
   4350  1a7c				   .L0511		;  if pfscore2 then pfscore2  =  pfscore2  /  2  :  score  =  score  +  bonus_level_timer  :  goto _bonus_sound_delay
   4351  1a7c
   4352  1a7c		       a5 f3		      LDA	pfscore2
   4353  1a7e		       f0 17		      BEQ	.skipL0511
   4354  1a80				   .condpart100
   4355  1a80		       a5 f3		      LDA	pfscore2
   4356  1a82		       4a		      lsr
   4357  1a83		       85 f3		      STA	pfscore2
   4358  1a85		       f8		      SED
   4359  1a86		       18		      CLC
   4360  1a87		       a5 94		      LDA	score+1
   4361  1a89		       69 01		      ADC	#$01
   4362  1a8b		       85 94		      STA	score+1
   4363  1a8d		       a5 93		      LDA	score
   4364  1a8f		       69 00		      ADC	#$00
   4365  1a91		       85 93		      STA	score
   4366  1a93		       d8		      CLD
   4367  1a94		       4c e0 9a 	      jmp	._bonus_sound_delay
   4368  1a97
   4369  1a97				   .skipL0511
   4370  1a97				   .
   4371  1a97							; 
   4372  1a97
   4373  1a97				   .
   4374  1a97							; 
   4375  1a97
   4376  1a97				   .L0512		;  if pfscore1 then pfscore1  =  pfscore1  /  4  :  score  =  score  +  bonus_level_lives  :  goto _bonus_sound_delay
   4377  1a97
   4378  1a97		       a5 f2		      LDA	pfscore1
   4379  1a99		       f0 18		      BEQ	.skipL0512
   4380  1a9b				   .condpart101
   4381  1a9b		       a5 f2		      LDA	pfscore1
   4382  1a9d		       4a		      lsr
   4383  1a9e		       4a		      lsr
   4384  1a9f		       85 f2		      STA	pfscore1
   4385  1aa1		       f8		      SED
   4386  1aa2		       18		      CLC
   4387  1aa3		       a5 94		      LDA	score+1
   4388  1aa5		       69 02		      ADC	#$02
   4389  1aa7		       85 94		      STA	score+1
   4390  1aa9		       a5 93		      LDA	score
   4391  1aab		       69 00		      ADC	#$00
   4392  1aad		       85 93		      STA	score
   4393  1aaf		       d8		      CLD
   4394  1ab0		       4c e0 9a 	      jmp	._bonus_sound_delay
   4395  1ab3
   4396  1ab3				   .skipL0512
   4397  1ab3				   .L0513		;  if ! _Bit3_Safe_Point_reached{3} then WriteToBuffer  =  _sc1  :  WriteToBuffer  =  _sc2  :	WriteToBuffer  =  _sc3	:  WriteSendBuffer  =  req_level_up  :	_Bit3_Safe_Point_reached{3}  =	1
   4398  1ab3
   4399  1ab3		       a5 ec		      LDA	_Bit3_Safe_Point_reached
   4400  1ab5		       29 08		      AND	#8
   4401  1ab7		       d0 1a		      BNE	.skipL0513
   4402  1ab9				   .condpart102
   4403  1ab9		       a5 93		      LDA	_sc1
   4404  1abb		       8d f0 1f 	      STA	WriteToBuffer
   4405  1abe		       a5 94		      LDA	_sc2
   4406  1ac0		       8d f0 1f 	      STA	WriteToBuffer
   4407  1ac3		       a5 95		      LDA	_sc3
   4408  1ac5		       8d f0 1f 	      STA	WriteToBuffer
   4409  1ac8		       a9 01		      LDA	#req_level_up
   4410  1aca		       8d f1 1f 	      STA	WriteSendBuffer
   4411  1acd		       a5 ec		      LDA	_Bit3_Safe_Point_reached
   4412  1acf		       09 08		      ORA	#8
   4413  1ad1		       85 ec		      STA	_Bit3_Safe_Point_reached
   4414  1ad3				   .skipL0513
   4415  1ad3				   .
   4416  1ad3							; 
   4417  1ad3
   4418  1ad3				   .L0514		;  if joy0fire then goto _Level_Up else goto _skip_game_action
   4419  1ad3
   4420  1ad3		       24 0c		      bit	INPT4
   4421  1ad5		       30 06		      BMI	.skipL0514
   4422  1ad7				   .condpart103
   4423  1ad7		       4c e7 9b 	      jmp	._Level_Up
   4424  1ada		       4c e0 9a 	      jmp	.skipelse6
   4425  1add				   .skipL0514
   4426  1add		       4c b5 98 	      jmp	._skip_game_action
   4427  1ae0
   4428  1ae0				   .skipelse6
   4429  1ae0				   ._bonus_sound_delay
   4430  1ae0							; _bonus_sound_delay
   4431  1ae0
   4432  1ae0				   .L0515		;  _Ch0_Sound	=  3  :  _Ch0_Duration	=  1  :  _Ch0_Counter  =  0
   4433  1ae0
   4434  1ae0		       a9 03		      LDA	#3
   4435  1ae2		       85 d9		      STA	_Ch0_Sound
   4436  1ae4		       a9 01		      LDA	#1
   4437  1ae6		       85 da		      STA	_Ch0_Duration
   4438  1ae8		       a9 00		      LDA	#0
   4439  1aea		       85 db		      STA	_Ch0_Counter
   4440  1aec				   .L0516		;  delay_counter  =  25
   4441  1aec
   4442  1aec		       a9 19		      LDA	#25
   4443  1aee		       85 d4		      STA	delay_counter
   4444  1af0				   .L0517		;  goto _skip_game_action
   4445  1af0
   4446  1af0		       4c b5 98 	      jmp	._skip_game_action
   4447  1af3
   4448  1af3				   .
   4449  1af3							; 
   4450  1af3
   4451  1af3				   ._Explosion_loop
   4452  1af3							; _Explosion_loop
   4453  1af3
   4454  1af3				   .L0518		;  temp4  =  frame_counter  /	8
   4455  1af3
   4456  1af3		       a5 d5		      LDA	frame_counter
   4457  1af5		       4a		      lsr
   4458  1af6		       4a		      lsr
   4459  1af7		       4a		      lsr
   4460  1af8		       85 9f		      STA	temp4
   4461  1afa				   .
   4462  1afa							; 
   4463  1afa
   4464  1afa				   .L0519		;  on temp4 goto _explosion_3_p1 _explosion_2_p1 _explosion_1_p1 _explosion_0_p1
   4465  1afa
   4466  1afa		       a6 9f		      LDX	temp4
   4467  1afc		       bd 05 9b 	      LDA	.L0519jumptablehi,x
   4468  1aff		       48		      PHA
   4469  1b00		       bd 09 9b 	      LDA	.L0519jumptablelo,x
   4470  1b03		       48		      PHA
   4471  1b04		       60		      RTS
   4472  1b05				   .L0519jumptablehi
   4473  1b05		       9b		      .byte.b	>(._explosion_3_p1-1)
   4474  1b06		       9b		      .byte.b	>(._explosion_2_p1-1)
   4475  1b07		       9b		      .byte.b	>(._explosion_1_p1-1)
   4476  1b08		       9b		      .byte.b	>(._explosion_0_p1-1)
   4477  1b09				   .L0519jumptablelo
   4478  1b09		       39		      .byte.b	<(._explosion_3_p1-1)
   4479  1b0a		       2a		      .byte.b	<(._explosion_2_p1-1)
   4480  1b0b		       1b		      .byte.b	<(._explosion_1_p1-1)
   4481  1b0c		       0c		      .byte.b	<(._explosion_0_p1-1)
   4482  1b0d				   .
   4483  1b0d							; 
   4484  1b0d
   4485  1b0d				   ._explosion_0_p1
   4486  1b0d							; _explosion_0_p1
   4487  1b0d
   4488  1b0d				   .L0520		;  player1: 
   4489  1b0d
   4490  1b0d		       a2 68		      LDX	#<playerL0520_1
   4491  1b0f		       86 8c		      STX	player1pointerlo
   4492  1b11		       a9 fc		      LDA	#>playerL0520_1
   4493  1b13		       85 8d		      STA	player1pointerhi
   4494  1b15		       a9 07		      LDA	#7
   4495  1b17		       85 8f		      STA	player1height
   4496  1b19				   .L0521		;  goto _End_Explosion_Definition
   4497  1b19
   4498  1b19		       4c 46 9b 	      jmp	._End_Explosion_Definition
   4499  1b1c
   4500  1b1c				   ._explosion_1_p1
   4501  1b1c							; _explosion_1_p1
   4502  1b1c
   4503  1b1c				   .L0522		;  player1: 
   4504  1b1c
   4505  1b1c		       a2 70		      LDX	#<playerL0522_1
   4506  1b1e		       86 8c		      STX	player1pointerlo
   4507  1b20		       a9 fc		      LDA	#>playerL0522_1
   4508  1b22		       85 8d		      STA	player1pointerhi
   4509  1b24		       a9 07		      LDA	#7
   4510  1b26		       85 8f		      STA	player1height
   4511  1b28				   .L0523		;  goto _End_Explosion_Definition
   4512  1b28
   4513  1b28		       4c 46 9b 	      jmp	._End_Explosion_Definition
   4514  1b2b
   4515  1b2b				   ._explosion_2_p1
   4516  1b2b							; _explosion_2_p1
   4517  1b2b
   4518  1b2b				   .L0524		;  player1: 
   4519  1b2b
   4520  1b2b		       a2 78		      LDX	#<playerL0524_1
   4521  1b2d		       86 8c		      STX	player1pointerlo
   4522  1b2f		       a9 fc		      LDA	#>playerL0524_1
   4523  1b31		       85 8d		      STA	player1pointerhi
   4524  1b33		       a9 07		      LDA	#7
   4525  1b35		       85 8f		      STA	player1height
   4526  1b37				   .L0525		;  goto _End_Explosion_Definition
   4527  1b37
   4528  1b37		       4c 46 9b 	      jmp	._End_Explosion_Definition
   4529  1b3a
   4530  1b3a				   ._explosion_3_p1
   4531  1b3a							; _explosion_3_p1
   4532  1b3a
   4533  1b3a				   .L0526		;  player1: 
   4534  1b3a
   4535  1b3a		       a2 80		      LDX	#<playerL0526_1
   4536  1b3c		       86 8c		      STX	player1pointerlo
   4537  1b3e		       a9 fc		      LDA	#>playerL0526_1
   4538  1b40		       85 8d		      STA	player1pointerhi
   4539  1b42		       a9 07		      LDA	#7
   4540  1b44		       85 8f		      STA	player1height
   4541  1b46				   .
   4542  1b46							; 
   4543  1b46
   4544  1b46				   ._End_Explosion_Definition
   4545  1b46							; _End_Explosion_Definition
   4546  1b46
   4547  1b46				   .L0527		;  if frame_counter  =  0 then Game_Status  =	game_state_run	:  goto _Decrease_live_counter else goto _skip_game_action
   4548  1b46
   4549  1b46		       a5 d5		      LDA	frame_counter
   4550  1b48		       c9 00		      CMP	#0
   4551  1b4a		       d0 0a		      BNE	.skipL0527
   4552  1b4c				   .condpart104
   4553  1b4c		       a9 00		      LDA	#game_state_run
   4554  1b4e		       85 d3		      STA	Game_Status
   4555  1b50		       4c 78 9b 	      jmp	._Decrease_live_counter
   4556  1b53		       4c 59 9b 	      jmp	.skipelse7
   4557  1b56				   .skipL0527
   4558  1b56		       4c b5 98 	      jmp	._skip_game_action
   4559  1b59
   4560  1b59				   .skipelse7
   4561  1b59				   .
   4562  1b59							; 
   4563  1b59
   4564  1b59				   ._Set_Explosion
   4565  1b59							; _Set_Explosion
   4566  1b59
   4567  1b59				   .L0528		;  if _BitOp_Ball_Shot_Dir then _BitOp_Ball_Shot_Dir  =  0  :	bally  =  0
   4568  1b59
   4569  1b59		       a5 d6		      LDA	_BitOp_Ball_Shot_Dir
   4570  1b5b		       f0 06		      BEQ	.skipL0528
   4571  1b5d				   .condpart105
   4572  1b5d		       a9 00		      LDA	#0
   4573  1b5f		       85 d6		      STA	_BitOp_Ball_Shot_Dir
   4574  1b61		       85 89		      STA	bally
   4575  1b63				   .skipL0528
   4576  1b63				   .L0529		;  _Ch0_Sound	=  1  :  _Ch0_Duration	=  1  :  _Ch0_Counter  =  0  :	frame_counter  =  31
   4577  1b63
   4578  1b63		       a9 01		      LDA	#1
   4579  1b65		       85 d9		      STA	_Ch0_Sound
   4580  1b67		       85 da		      STA	_Ch0_Duration
   4581  1b69		       a9 00		      LDA	#0
   4582  1b6b		       85 db		      STA	_Ch0_Counter
   4583  1b6d		       a9 1f		      LDA	#31
   4584  1b6f		       85 d5		      STA	frame_counter
   4585  1b71				   .L0530		;  Game_Status  =  game_state_heli_explosion
   4586  1b71
   4587  1b71		       a9 03		      LDA	#game_state_heli_explosion
   4588  1b73		       85 d3		      STA	Game_Status
   4589  1b75				   .L0531		;  goto _skip_game_action
   4590  1b75
   4591  1b75		       4c b5 98 	      jmp	._skip_game_action
   4592  1b78
   4593  1b78				   .
   4594  1b78							; 
   4595  1b78
   4596  1b78				   ._Decrease_live_counter
   4597  1b78							; _Decrease_live_counter
   4598  1b78
   4599  1b78				   .L0532		;  pfscore1  =  pfscore1  /  4
   4600  1b78
   4601  1b78		       a5 f2		      LDA	pfscore1
   4602  1b7a		       4a		      lsr
   4603  1b7b		       4a		      lsr
   4604  1b7c		       85 f2		      STA	pfscore1
   4605  1b7e				   .L0533		;  player1y  =  200
   4606  1b7e
   4607  1b7e		       a9 c8		      LDA	#200
   4608  1b80		       85 86		      STA	player1y
   4609  1b82				   .L0534		;  if !pfscore1 then goto _Set_Game_Over else goto _Reset_Level
   4610  1b82
   4611  1b82		       a5 f2		      LDA	pfscore1
   4612  1b84		       d0 06		      BNE	.skipL0534
   4613  1b86				   .condpart106
   4614  1b86		       4c 8f 9b 	      jmp	._Set_Game_Over
   4615  1b89		       4c 8f 9b 	      jmp	.skipelse8
   4616  1b8c				   .skipL0534
   4617  1b8c		       4c aa 9b 	      jmp	._Reset_Level
   4618  1b8f
   4619  1b8f				   .skipelse8
   4620  1b8f				   .
   4621  1b8f							; 
   4622  1b8f
   4623  1b8f				   ._Set_Game_Over
   4624  1b8f							; _Set_Game_Over
   4625  1b8f
   4626  1b8f				   .L0535		;  WriteToBuffer  =  _sc1
   4627  1b8f
   4628  1b8f		       a5 93		      LDA	_sc1
   4629  1b91		       8d f0 1f 	      STA	WriteToBuffer
   4630  1b94				   .L0536		;  WriteToBuffer  =  _sc2
   4631  1b94
   4632  1b94		       a5 94		      LDA	_sc2
   4633  1b96		       8d f0 1f 	      STA	WriteToBuffer
   4634  1b99				   .L0537		;  WriteToBuffer  =  _sc3
   4635  1b99
   4636  1b99		       a5 95		      LDA	_sc3
   4637  1b9b		       8d f0 1f 	      STA	WriteToBuffer
   4638  1b9e				   .L0538		;  WriteSendBuffer  =	req_game_over
   4639  1b9e
   4640  1b9e		       a9 02		      LDA	#req_game_over
   4641  1ba0		       8d f1 1f 	      STA	WriteSendBuffer
   4642  1ba3				   .L0539		;  Game_Status  =  game_state_game_over
   4643  1ba3
   4644  1ba3		       a9 01		      LDA	#game_state_game_over
   4645  1ba5		       85 d3		      STA	Game_Status
   4646  1ba7				   .L0540		;  goto _skip_game_action
   4647  1ba7
   4648  1ba7		       4c b5 98 	      jmp	._skip_game_action
   4649  1baa
   4650  1baa				   .
   4651  1baa							; 
   4652  1baa
   4653  1baa				   ._Reset_Level
   4654  1baa							; _Reset_Level
   4655  1baa
   4656  1baa				   .L0541		;  gosub _Add_Room_State
   4657  1baa
   4658  1baa		       20 6c 9c 	      jsr	._Add_Room_State
   4659  1bad
   4660  1bad				   .L0542		;  WriteSendBuffer  =	req_level_reset
   4661  1bad
   4662  1bad		       a9 07		      LDA	#req_level_reset
   4663  1baf		       8d f1 1f 	      STA	WriteSendBuffer
   4664  1bb2				   .L0543		;  _Bit0_New_Room_P1_Flip{0}  =  _Bit1_Safe_Point_P1_Flip{1}
   4665  1bb2
   4666  1bb2		       a5 df		      LDA	_Bit1_Safe_Point_P1_Flip
   4667  1bb4		       29 02		      AND	#2
   4668  1bb6		       08		      PHP
   4669  1bb7		       a5 df		      LDA	_Bit0_New_Room_P1_Flip
   4670  1bb9		       29 fe		      AND	#254
   4671  1bbb		       28		      PLP
   4672  1bbc		       f0 02		      .byte.b	$F0, $02
   4673  1bbe		       09 01		      ORA	#1
   4674  1bc0		       85 df		      STA	_Bit0_New_Room_P1_Flip
   4675  1bc2				   .L0544		;  delay_counter  =  60
   4676  1bc2
   4677  1bc2		       a9 3c		      LDA	#60
   4678  1bc4		       85 d4		      STA	delay_counter
   4679  1bc6				   .
   4680  1bc6							; 
   4681  1bc6
   4682  1bc6				   ._Common_Reset
   4683  1bc6							; _Common_Reset
   4684  1bc6
   4685  1bc6				   .L0545		;  _Bit5_Request_Pending{5}  =  1
   4686  1bc6
   4687  1bc6		       a5 ec		      LDA	_Bit5_Request_Pending
   4688  1bc8		       09 20		      ORA	#32
   4689  1bca		       85 ec		      STA	_Bit5_Request_Pending
   4690  1bcc				   .L0546		;  pfscore2  =  255
   4691  1bcc
   4692  1bcc		       a9 ff		      LDA	#255
   4693  1bce		       85 f3		      STA	pfscore2
   4694  1bd0				   .L0547		;  P1y_velocity  =  0.0  :  x	=  0
   4695  1bd0
   4696  1bd0		       a2 00		      LDX	#0
   4697  1bd2		       86 ea		      STX	w
   4698  1bd4		       a9 00		      LDA	#0
   4699  1bd6		       85 e9		      STA	P1y_velocity
   4700  1bd8		       a9 00		      LDA	#0
   4701  1bda		       85 eb		      STA	x
   4702  1bdc				   .L0548		;  new_room_player1x  =  Safe_Point_P1_x
   4703  1bdc
   4704  1bdc		       a5 e0		      LDA	Safe_Point_P1_x
   4705  1bde		       85 a5		      STA	new_room_player1x
   4706  1be0				   .L0549		;  new_room_player1y  =  Safe_Point_P1_y
   4707  1be0
   4708  1be0		       a5 e1		      LDA	Safe_Point_P1_y
   4709  1be2		       85 a4		      STA	new_room_player1y
   4710  1be4				   .L0550		;  goto _skip_game_action
   4711  1be4
   4712  1be4		       4c b5 98 	      jmp	._skip_game_action
   4713  1be7
   4714  1be7				   .
   4715  1be7							; 
   4716  1be7
   4717  1be7				   ._Level_Up
   4718  1be7							; _Level_Up
   4719  1be7
   4720  1be7				   .L0551		;  Game_Status  =  game_state_run
   4721  1be7
   4722  1be7		       a9 00		      LDA	#game_state_run
   4723  1be9		       85 d3		      STA	Game_Status
   4724  1beb				   .L0552		;  _Bit7_FireB_Restrainer{7}  =  1  :	_Bit5_Request_Pending{5}  =  1
   4725  1beb
   4726  1beb		       a5 ec		      LDA	_Bit7_FireB_Restrainer
   4727  1bed		       09 80		      ORA	#128
   4728  1bef		       85 ec		      STA	_Bit7_FireB_Restrainer
   4729  1bf1		       a5 ec		      LDA	_Bit5_Request_Pending
   4730  1bf3		       09 20		      ORA	#32
   4731  1bf5		       85 ec		      STA	_Bit5_Request_Pending
   4732  1bf7				   .L0553		;  score  =  0  :  _BitOp_Flip_positions  =  0
   4733  1bf7
   4734  1bf7		       a9 00		      LDA	#$00
   4735  1bf9		       85 95		      STA	score+2
   4736  1bfb		       a9 00		      LDA	#$00
   4737  1bfd		       85 94		      STA	score+1
   4738  1bff		       a9 00		      LDA	#$00
   4739  1c01		       85 93		      STA	score
   4740  1c03		       a9 00		      LDA	#0
   4741  1c05		       85 df		      STA	_BitOp_Flip_positions
   4742  1c07				   .L0554		;  Safe_Point_P1_x  =	30
   4743  1c07
   4744  1c07		       a9 1e		      LDA	#30
   4745  1c09		       85 e0		      STA	Safe_Point_P1_x
   4746  1c0b				   .L0555		;  Safe_Point_P1_y  =	player_min_y
   4747  1c0b
   4748  1c0b		       a9 02		      LDA	#player_min_y
   4749  1c0d		       85 e1		      STA	Safe_Point_P1_y
   4750  1c0f				   .L0556		;  pfscore1  =  %00101010
   4751  1c0f
   4752  1c0f		       a9 2a		      LDA	#%00101010
   4753  1c11		       85 f2		      STA	pfscore1
   4754  1c13				   .L0557		;  goto _Common_Reset
   4755  1c13
   4756  1c13		       4c c6 9b 	      jmp	._Common_Reset
   4757  1c16
   4758  1c16				   .
   4759  1c16							; 
   4760  1c16
   4761  1c16				   ._Level_Completed
   4762  1c16							; _Level_Completed
   4763  1c16
   4764  1c16				   .L0558		;  Game_Status  =  game_state_level_finished
   4765  1c16
   4766  1c16		       a9 02		      LDA	#game_state_level_finished
   4767  1c18		       85 d3		      STA	Game_Status
   4768  1c1a				   .L0559		;  temp4  =  frame_counter  /	2
   4769  1c1a
   4770  1c1a		       a5 d5		      LDA	frame_counter
   4771  1c1c		       4a		      lsr
   4772  1c1d		       85 9f		      STA	temp4
   4773  1c1f				   .L0560		;  temp5  =  temp4  &	$0F  :	if temp5  >  9 then temp4  =  temp4  +	6
   4774  1c1f
   4775  1c1f		       a5 9f		      LDA	temp4
   4776  1c21		       29 0f		      AND	#$0F
   4777  1c23		       85 a0		      STA	temp5
   4778  1c25		       a9 09		      LDA	#9
   4779  1c27		       c5 a0		      CMP	temp5
   4780  1c29		       b0 07		      BCS	.skipL0560
   4781  1c2b				   .condpart107
   4782  1c2b		       a5 9f		      LDA	temp4
   4783  1c2d		       18		      CLC
   4784  1c2e		       69 06		      ADC	#6
   4785  1c30		       85 9f		      STA	temp4
   4786  1c32				   .skipL0560
   4787  1c32				   .L0561		;  temp5  =  temp4  &	$F0  :	if temp5  >  $90 then temp4  =	temp4  +  $60
   4788  1c32
   4789  1c32		       a5 9f		      LDA	temp4
   4790  1c34		       29 f0		      AND	#$F0
   4791  1c36		       85 a0		      STA	temp5
   4792  1c38		       a9 90		      LDA	#$90
   4793  1c3a		       c5 a0		      CMP	temp5
   4794  1c3c		       b0 07		      BCS	.skipL0561
   4795  1c3e				   .condpart108
   4796  1c3e		       a5 9f		      LDA	temp4
   4797  1c40		       18		      CLC
   4798  1c41		       69 60		      ADC	#$60
   4799  1c43		       85 9f		      STA	temp4
   4800  1c45				   .skipL0561
   4801  1c45				   .L0562		;  score  =  score  +	temp4
   4802  1c45
   4803  1c45		       f8		      SED
   4804  1c46		       18		      CLC
   4805  1c47		       a5 95		      LDA	score+2
   4806  1c49		       65 9f		      ADC	temp4
   4807  1c4b
   4808  1c4b		       85 95		      STA	score+2
   4809  1c4d		       a5 94		      LDA	score+1
   4810  1c4f		       69 00		      ADC	#$00
   4811  1c51		       85 94		      STA	score+1
   4812  1c53		       a5 93		      LDA	score
   4813  1c55		       69 00		      ADC	#$00
   4814  1c57		       85 93		      STA	score
   4815  1c59		       d8		      CLD
   4816  1c5a				   .L0563		;  asm
   4817  1c5a
   4818  1c5a		       f8		      sed
   4819  1c5b
   4820  1c5b		       18		      clc
   4821  1c5c
   4822  1c5c		       a5 94		      lda	_sc2
   4823  1c5e
   4824  1c5e		       65 b1		      adc	bonus_bcd_counter
   4825  1c60
   4826  1c60		       85 94		      sta	_sc2
   4827  1c62
   4828  1c62		       a5 93		      lda	_sc1
   4829  1c64
   4830  1c64		       69 00		      adc	#0
   4831  1c66
   4832  1c66		       85 93		      sta	_sc1
   4833  1c68
   4834  1c68		       d8		      cld
   4835  1c69
   4836  1c69				   .L0564		;  goto _skip_game_action
   4837  1c69
   4838  1c69		       4c b5 98 	      jmp	._skip_game_action
   4839  1c6c
   4840  1c6c				   .
   4841  1c6c							; 
   4842  1c6c
   4843  1c6c				   .
   4844  1c6c							; 
   4845  1c6c
   4846  1c6c				   .
   4847  1c6c							; 
   4848  1c6c
   4849  1c6c				   ._Add_Room_State
   4850  1c6c							; _Add_Room_State
   4851  1c6c
   4852  1c6c				   .L0565		;  _Bit5_Request_Pending{5}  =  1
   4853  1c6c
   4854  1c6c		       a5 ec		      LDA	_Bit5_Request_Pending
   4855  1c6e		       09 20		      ORA	#32
   4856  1c70		       85 ec		      STA	_Bit5_Request_Pending
   4857  1c72				   .L0566		;  WriteToBuffer  =  r102
   4858  1c72
   4859  1c72		       ad e6 f0 	      LDA	r102
   4860  1c75		       8d f0 1f 	      STA	WriteToBuffer
   4861  1c78				   .L0567		;  WriteToBuffer  =  r103
   4862  1c78
   4863  1c78		       ad e7 f0 	      LDA	r103
   4864  1c7b		       8d f0 1f 	      STA	WriteToBuffer
   4865  1c7e				   .L0568		;  WriteToBuffer  =  r104
   4866  1c7e
   4867  1c7e		       ad e8 f0 	      LDA	r104
   4868  1c81		       8d f0 1f 	      STA	WriteToBuffer
   4869  1c84				   .L0569		;  WriteToBuffer  =  r105
   4870  1c84
   4871  1c84		       ad e9 f0 	      LDA	r105
   4872  1c87		       8d f0 1f 	      STA	WriteToBuffer
   4873  1c8a				   .L0570		;  WriteToBuffer  =  r106
   4874  1c8a
   4875  1c8a		       ad ea f0 	      LDA	r106
   4876  1c8d		       8d f0 1f 	      STA	WriteToBuffer
   4877  1c90				   .L0571		;  WriteToBuffer  =  r107
   4878  1c90
   4879  1c90		       ad eb f0 	      LDA	r107
   4880  1c93		       8d f0 1f 	      STA	WriteToBuffer
   4881  1c96				   .L0572		;  WriteToBuffer  =  r108
   4882  1c96
   4883  1c96		       ad ec f0 	      LDA	r108
   4884  1c99		       8d f0 1f 	      STA	WriteToBuffer
   4885  1c9c				   .L0573		;  WriteToBuffer  =  r109
   4886  1c9c
   4887  1c9c		       ad ed f0 	      LDA	r109
   4888  1c9f		       8d f0 1f 	      STA	WriteToBuffer
   4889  1ca2				   .L0574		;  WriteToBuffer  =  r110
   4890  1ca2
   4891  1ca2		       ad ee f0 	      LDA	r110
   4892  1ca5		       8d f0 1f 	      STA	WriteToBuffer
   4893  1ca8				   .L0575		;  WriteToBuffer  =  r111
   4894  1ca8
   4895  1ca8		       ad ef f0 	      LDA	r111
   4896  1cab		       8d f0 1f 	      STA	WriteToBuffer
   4897  1cae				   .L0576		;  return
   4898  1cae
   4899  1cae		       ba		      tsx
   4900  1caf		       b5 02		      lda	2,x	; check return address
   4901  1cb1		       49 9c		      eor	#(>*)	; vs. current PCH
   4902  1cb3		       29 e0		      and	#$E0	;  mask off all but top 3 bits
   4903  1cb5		       f0 03		      beq	*+5	; if equal, do normal return
   4904  1cb7		       4c da ff 	      JMP	BS_return
   4905  1cba		       60		      RTS
   4906  1cbb				   .
   4907  1cbb							; 
   4908  1cbb
   4909  1cbb				   .
   4910  1cbb							; 
   4911  1cbb
   4912  1cbb				   .
   4913  1cbb							; 
   4914  1cbb
   4915  1cbb				   .
   4916  1cbb							; 
   4917  1cbb
   4918  1cbb				   ._Change_Room
   4919  1cbb							; _Change_Room
   4920  1cbb
   4921  1cbb				   .L0577		;  delay_counter  =  2
   4922  1cbb
   4923  1cbb		       a9 02		      LDA	#2
   4924  1cbd		       85 d4		      STA	delay_counter
   4925  1cbf				   .L0578		;  player0y  =  200  :  ball_shoot_x  =  200  :  ball_shoot_y	=  200	:  missile0x  =  200  :  missile0y  =  200
   4926  1cbf
   4927  1cbf		       a9 c8		      LDA	#200
   4928  1cc1		       85 85		      STA	player0y
   4929  1cc3		       85 ae		      STA	ball_shoot_x
   4930  1cc5		       85 af		      STA	ball_shoot_y
   4931  1cc7		       85 82		      STA	missile0x
   4932  1cc9		       85 91		      STA	missile0y
   4933  1ccb				   .
   4934  1ccb							; 
   4935  1ccb
   4936  1ccb				   .
   4937  1ccb							; 
   4938  1ccb
   4939  1ccb				   .L0579		;  _Bit_Game_State  =	_Bit_Game_State  &  %11000011
   4940  1ccb
   4941  1ccb		       a5 ec		      LDA	_Bit_Game_State
   4942  1ccd		       29 c3		      AND	#%11000011
   4943  1ccf		       85 ec		      STA	_Bit_Game_State
   4944  1cd1				   .L0580		;  player1y  =  new_room_player1y  :  player1x  =  new_room_player1x  :  _Bit6_Flip_P1{6}  =  _Bit0_New_Room_P1_Flip{0}
   4945  1cd1
   4946  1cd1		       a5 a4		      LDA	new_room_player1y
   4947  1cd3		       85 86		      STA	player1y
   4948  1cd5		       a5 a5		      LDA	new_room_player1x
   4949  1cd7		       85 81		      STA	player1x
   4950  1cd9		       a5 df		      LDA	_Bit0_New_Room_P1_Flip
   4951  1cdb		       29 01		      AND	#1
   4952  1cdd		       08		      PHP
   4953  1cde		       a5 ec		      LDA	_Bit6_Flip_P1
   4954  1ce0		       29 bf		      AND	#191
   4955  1ce2		       28		      PLP
   4956  1ce3		       f0 02		      .byte.b	$F0, $02
   4957  1ce5		       09 40		      ORA	#64
   4958  1ce7		       85 ec		      STA	_Bit6_Flip_P1
   4959  1ce9				   .L0581		;  asm
   4960  1ce9
   4961  1ce9		       a9 00		      LDA	#0
   4962  1ceb
   4963  1ceb		       85 89		      STA	bally
   4964  1ced
   4965  1ced		       85 d7		      STA	_BitOp_M0_Dir	; delete enemy and player shot
   4966  1cef
   4967  1cef		       85 d6		      STA	_BitOp_Ball_Shot_Dir
   4968  1cf1
   4969  1cf1		       85 dc		      STA	extra_wall_move_x
   4970  1cf3
   4971  1cf3		       85 dd		      STA	roommate_move_x
   4972  1cf5
   4973  1cf5		       aa		      TAX
   4974  1cf6
   4975  1cf6				   .copy_loop
   4976  1cf6
   4977  1cf6		       ad f2 1f 	      LDA	ReceiveBuffer	; 4
   4978  1cf9
   4979  1cf9		       9d 5d f0 	      STA	w_room_definition_start,x	; 5   @9
   4980  1cfc
   4981  1cfc		       e8		      INX		; 2   @11
   4982  1cfd
   4983  1cfd		       ad f3 1f 	      LDA	ReceiveBufferSize	; 4   @15
   4984  1d00
   4985  1d00		       d0 f4		      BNE	.copy_loop	; 2/3 @18
   4986  1d02
   4987  1d02				   .L0582		;  roommate_type  =  r_roommate_type_and_range  &  3
   4988  1d02
   4989  1d02		       ad e6 f0 	      LDA	r_roommate_type_and_range
   4990  1d05		       29 03		      AND	#3
   4991  1d07		       85 de		      STA	roommate_type
   4992  1d09				   .L0583		;  if !men_to_rescue then men_to_rescue  =  r_men_to_rescue_in_this_level  :  bonus_bcd_counter  =  r_level_bonus_bcd_points
   4993  1d09
   4994  1d09		       a5 b0		      LDA	men_to_rescue
   4995  1d0b		       d0 0a		      BNE	.skipL0583
   4996  1d0d				   .condpart109
   4997  1d0d		       ad de f0 	      LDA	r_men_to_rescue_in_this_level
   4998  1d10		       85 b0		      STA	men_to_rescue
   4999  1d12		       ad dd f0 	      LDA	r_level_bonus_bcd_points
   5000  1d15		       85 b1		      STA	bonus_bcd_counter
   5001  1d17				   .skipL0583
   5002  1d17				   .L0584		;  goto _skip_game_action
   5003  1d17
   5004  1d17		       4c b5 98 	      jmp	._skip_game_action
   5005  1d1a
   5006  1d1a				   .
   5007  1d1a							; 
   5008  1d1a
   5009  1d1a				   .
   5010  1d1a							; 
   5011  1d1a
   5012  1d1a				   ._Reset_To_Start
   5013  1d1a							; _Reset_To_Start
   5014  1d1a
   5015  1d1a				   .
   5016  1d1a							; 
   5017  1d1a
   5018  1d1a				   .L0585		;  if ReceiveBufferSize  =  0 then goto _Start
   5019  1d1a
   5020  1d1a		       ad f3 1f 	      LDA	ReceiveBufferSize
   5021  1d1d		       c9 00		      CMP	#0
   5022  1d1f		       d0 03		      BNE	.skipL0585
   5023  1d21				   .condpart110
   5024  1d21		       4c 00 91 	      jmp	._Start
   5025  1d24
   5026  1d24				   .skipL0585
   5027  1d24				   .L0586		;  asm
   5028  1d24
   5029  1d24		       ad f2 1f 	      LDA	ReceiveBuffer	; 4
   5030  1d27
   5031  1d27				   .L0587		;  goto _Reset_To_Start
   5032  1d27
   5033  1d27		       4c 1a 9d 	      jmp	._Reset_To_Start
   5034  1d2a
   5035  1d2a				   .
   5036  1d2a							; 
   5037  1d2a
   5038  1d2a				   .
   5039  1d2a							; 
   5040  1d2a
   5041  1d2a				   .
   5042  1d2a							; 
   5043  1d2a
   5044  1d2a				   .
   5045  1d2a							; 
   5046  1d2a
   5047  1d2a				   .
   5048  1d2a							; 
   5049  1d2a
   5050  1d2a				   .
   5051  1d2a							; 
   5052  1d2a
   5053  1d2a				   .L0588		;  data _SD_Shot_Wall
   5054  1d2a
   5055  1d2a		       4c 62 9d 	      JMP	.skipL0588
   5056  1d2d				   _SD_Shot_Wall
   5057  1d2d		       08 08 00 	      .byte.b	8,8,0
   5058  1d30
   5059  1d30		       01		      .byte.b	1
   5060  1d31
   5061  1d31		       08 08 01 	      .byte.b	8,8,1
   5062  1d34
   5063  1d34		       01		      .byte.b	1
   5064  1d35
   5065  1d35		       08 0e 01 	      .byte.b	8,14,1
   5066  1d38
   5067  1d38		       01		      .byte.b	1
   5068  1d39
   5069  1d39		       08 08 00 	      .byte.b	8,8,0
   5070  1d3c
   5071  1d3c		       01		      .byte.b	1
   5072  1d3d
   5073  1d3d		       08 08 02 	      .byte.b	8,8,2
   5074  1d40
   5075  1d40		       01		      .byte.b	1
   5076  1d41
   5077  1d41		       08 0e 02 	      .byte.b	8,14,2
   5078  1d44
   5079  1d44		       01		      .byte.b	1
   5080  1d45
   5081  1d45		       08 08 01 	      .byte.b	8,8,1
   5082  1d48
   5083  1d48		       01		      .byte.b	1
   5084  1d49
   5085  1d49		       07 08 03 	      .byte.b	7,8,3
   5086  1d4c
   5087  1d4c		       01		      .byte.b	1
   5088  1d4d
   5089  1d4d		       06 08 02 	      .byte.b	6,8,2
   5090  1d50
   5091  1d50		       01		      .byte.b	1
   5092  1d51
   5093  1d51		       05 08 04 	      .byte.b	5,8,4
   5094  1d54
   5095  1d54		       01		      .byte.b	1
   5096  1d55
   5097  1d55		       04 08 03 	      .byte.b	4,8,3
   5098  1d58
   5099  1d58		       01		      .byte.b	1
   5100  1d59
   5101  1d59		       03 08 05 	      .byte.b	3,8,5
   5102  1d5c
   5103  1d5c		       01		      .byte.b	1
   5104  1d5d
   5105  1d5d		       02 0e 04 	      .byte.b	2,14,4
   5106  1d60
   5107  1d60		       04		      .byte.b	4
   5108  1d61
   5109  1d61		       ff		      .byte.b	255
   5110  1d62
   5111  1d62				   .skipL0588
   5112  1d62				   .
   5113  1d62							; 
   5114  1d62
   5115  1d62				   .
   5116  1d62							; 
   5117  1d62
   5118  1d62				   .L0589		;  data _SD_Shoot_Miss
   5119  1d62
   5120  1d62		       4c aa 9d 	      JMP	.skipL0589
   5121  1d65				   _SD_Shoot_Miss
   5122  1d65		       08 0f 00 	      .byte.b	8,15,0
   5123  1d68
   5124  1d68		       01		      .byte.b	1
   5125  1d69
   5126  1d69		       0c 0f 01 	      .byte.b	12,15,1
   5127  1d6c
   5128  1d6c		       01		      .byte.b	1
   5129  1d6d
   5130  1d6d		       08 07 14 	      .byte.b	8,7,20
   5131  1d70
   5132  1d70		       01		      .byte.b	1
   5133  1d71
   5134  1d71		       0a 0f 03 	      .byte.b	10,15,3
   5135  1d74
   5136  1d74		       01		      .byte.b	1
   5137  1d75
   5138  1d75		       08 07 16 	      .byte.b	8,7,22
   5139  1d78
   5140  1d78		       01		      .byte.b	1
   5141  1d79
   5142  1d79		       0a 0f 05 	      .byte.b	10,15,5
   5143  1d7c
   5144  1d7c		       01		      .byte.b	1
   5145  1d7d
   5146  1d7d		       08 0f 06 	      .byte.b	8,15,6
   5147  1d80
   5148  1d80		       01		      .byte.b	1
   5149  1d81
   5150  1d81		       0a 07 18 	      .byte.b	10,7,24
   5151  1d84
   5152  1d84		       01		      .byte.b	1
   5153  1d85
   5154  1d85		       08 0f 08 	      .byte.b	8,15,8
   5155  1d88
   5156  1d88		       01		      .byte.b	1
   5157  1d89
   5158  1d89		       09 07 1b 	      .byte.b	9,7,27
   5159  1d8c
   5160  1d8c		       01		      .byte.b	1
   5161  1d8d
   5162  1d8d		       08 0f 0a 	      .byte.b	8,15,10
   5163  1d90
   5164  1d90		       01		      .byte.b	1
   5165  1d91
   5166  1d91		       07 0e 0b 	      .byte.b	7,14,11
   5167  1d94
   5168  1d94		       01		      .byte.b	1
   5169  1d95
   5170  1d95		       06 0f 0c 	      .byte.b	6,15,12
   5171  1d98
   5172  1d98		       01		      .byte.b	1
   5173  1d99
   5174  1d99		       05 06 0d 	      .byte.b	5,6,13
   5175  1d9c
   5176  1d9c		       01		      .byte.b	1
   5177  1d9d
   5178  1d9d		       04 0f 0e 	      .byte.b	4,15,14
   5179  1da0
   5180  1da0		       01		      .byte.b	1
   5181  1da1
   5182  1da1		       03 06 1b 	      .byte.b	3,6,27
   5183  1da4
   5184  1da4		       01		      .byte.b	1
   5185  1da5
   5186  1da5		       02 06 1e 	      .byte.b	2,6,30
   5187  1da8
   5188  1da8		       08		      .byte.b	8
   5189  1da9
   5190  1da9		       ff		      .byte.b	255
   5191  1daa
   5192  1daa				   .skipL0589
   5193  1daa				   .
   5194  1daa							; 
   5195  1daa
   5196  1daa				   .
   5197  1daa							; 
   5198  1daa
   5199  1daa				   .L0590		;  data _SD_Shoot_Enemy
   5200  1daa
   5201  1daa		       4c ce 9d 	      JMP	.skipL0590
   5202  1dad				   _SD_Shoot_Enemy
   5203  1dad		       0c 04 17 	      .byte.b	12,4,23
   5204  1db0
   5205  1db0		       04		      .byte.b	4
   5206  1db1
   5207  1db1		       0a 04 1d 	      .byte.b	10,4,29
   5208  1db4
   5209  1db4		       04		      .byte.b	4
   5210  1db5
   5211  1db5		       08 04 17 	      .byte.b	8,4,23
   5212  1db8
   5213  1db8		       04		      .byte.b	4
   5214  1db9
   5215  1db9		       06 04 1d 	      .byte.b	6,4,29
   5216  1dbc
   5217  1dbc		       04		      .byte.b	4
   5218  1dbd
   5219  1dbd		       04 04 17 	      .byte.b	4,4,23
   5220  1dc0
   5221  1dc0		       04		      .byte.b	4
   5222  1dc1
   5223  1dc1		       03 04 1d 	      .byte.b	3,4,29
   5224  1dc4
   5225  1dc4		       04		      .byte.b	4
   5226  1dc5
   5227  1dc5		       02 04 17 	      .byte.b	2,4,23
   5228  1dc8
   5229  1dc8		       01		      .byte.b	1
   5230  1dc9
   5231  1dc9		       01 04 1d 	      .byte.b	1,4,29
   5232  1dcc
   5233  1dcc		       01		      .byte.b	1
   5234  1dcd
   5235  1dcd		       ff		      .byte.b	255
   5236  1dce
   5237  1dce				   .skipL0590
   5238  1dce				   .
   5239  1dce							; 
   5240  1dce
   5241  1dce				   .
   5242  1dce							; 
   5243  1dce
   5244  1dce				   .L0591		;  data _SD_Touch_Enemy
   5245  1dce
   5246  1dce		       4c ee 9d 	      JMP	.skipL0591
   5247  1dd1				   _SD_Touch_Enemy
   5248  1dd1		       02 07 0b 	      .byte.b	2,7,11
   5249  1dd4
   5250  1dd4		       02		      .byte.b	2
   5251  1dd5
   5252  1dd5		       0a 07 0c 	      .byte.b	10,7,12
   5253  1dd8
   5254  1dd8		       02		      .byte.b	2
   5255  1dd9
   5256  1dd9		       08 07 0d 	      .byte.b	8,7,13
   5257  1ddc
   5258  1ddc		       02		      .byte.b	2
   5259  1ddd
   5260  1ddd		       08 07 0e 	      .byte.b	8,7,14
   5261  1de0
   5262  1de0		       02		      .byte.b	2
   5263  1de1
   5264  1de1		       08 07 15 	      .byte.b	8,7,21
   5265  1de4
   5266  1de4		       08		      .byte.b	8
   5267  1de5
   5268  1de5		       04 07 16 	      .byte.b	4,7,22
   5269  1de8
   5270  1de8		       02		      .byte.b	2
   5271  1de9
   5272  1de9		       02 07 17 	      .byte.b	2,7,23
   5273  1dec
   5274  1dec		       01		      .byte.b	1
   5275  1ded
   5276  1ded		       ff		      .byte.b	255
   5277  1dee
   5278  1dee				   .skipL0591
   5279  1dee				   .
   5280  1dee							; 
   5281  1dee
   5282  1dee				   .
   5283  1dee							; 
   5284  1dee
   5285  1dee				   .__BG_Music_Setup_01
   5286  1dee							; __BG_Music_Setup_01
   5287  1dee
   5288  1dee				   .
   5289  1dee							; 
   5290  1dee
   5291  1dee				   .L0592		;  sdata _SD_Music01  =  var14
   5292  1dee
   5293  1dee		       a9 f9		      lda	#<_SD_Music01_begin
   5294  1df0		       85 b2		      sta	var14
   5295  1df2		       a9 9d		      lda	#>_SD_Music01_begin
   5296  1df4		       85 b3		      sta	var14+1
   5297  1df6		       4c 02 9e 	      JMP	.skipL0592
   5298  1df9				   _SD_Music01_begin
   5299  1df9		       08 0f 1e 04	      .byte.b	8, 15, 30, 4
   5300  1dfd
   5301  1dfd		       00 00 00 10	      .byte.b	0, 0, 0, 16
   5302  1e01
   5303  1e01		       ff		      .byte.b	255
   5304  1e02
   5305  1e02				   .skipL0592
   5306  1e02				   .
   5307  1e02							; 
   5308  1e02
   5309  1e02				   .L0593		;  _Ch1_Duration  =  1
   5310  1e02
   5311  1e02		       a9 01		      LDA	#1
   5312  1e04		       85 e2		      STA	_Ch1_Duration
   5313  1e06				   .
   5314  1e06							; 
   5315  1e06
   5316  1e06				   .L0594		;  goto __Skip_Ch_1
   5317  1e06
   5318  1e06		       4c 45 9a 	      jmp	.__Skip_Ch_1
   5319  1e09
   5320  1e09				   .
   5321  1e09							; 
   5322  1e09
   5323  1e09				   .
   5324  1e09							; 
   5325  1e09
   5326  1e09				   .
   5327  1e09							; 
   5328  1e09
   5329  1e09				   .
   5330  1e09							; 
   5331  1e09
   5332  1e09				   .
   5333  1e09							; 
   5334  1e09
   5335  1e09				   .
   5336  1e09							; 
   5337  1e09
   5338  1e09				   .
   5339  1e09							; 
   5340  1e09
   5341  1e09				   .
   5342  1e09							; 
   5343  1e09
   5344  1e09				   .
   5345  1e09							; 
   5346  1e09
   5347  1e09				   .
   5348  1e09							; 
   5349  1e09
   5350  1e09				   .
   5351  1e09							; 
   5352  1e09
   5353  1e09				   .
   5354  1e09							; 
   5355  1e09
   5356  1e09				   .
   5357  1e09							; 
   5358  1e09
   5359  1e09				   .
   5360  1e09							; 
   5361  1e09
   5362  1e09				   .
   5363  1e09							; 
   5364  1e09
   5365  1e09				   .
   5366  1e09							; 
   5367  1e09
   5368  1e09				   .
   5369  1e09							; 
   5370  1e09
   5371  1e09				   .
   5372  1e09							; 
   5373  1e09
   5374  1e09				   .
   5375  1e09							; 
   5376  1e09
   5377  1e09				   .
   5378  1e09							; 
   5379  1e09
   5380  1e09				   .L0595		;  bank 2
   5381  1e09
   5382  1e09					      if	ECHO1
      456 bytes of ROM space left in bank 1
   5383  1e09					      echo	"    ",[(start_bank1 - *)]d , "bytes of ROM space left in bank 1")
   5384  1e09					      endif
   5385  1e09		       00 01	   ECHO1      =	1
   5386  1fd1					      ORG	$1FF4-bscode_length
   5387  1fd1					      RORG	$9FF4-bscode_length
   5388  1fd1		       a2 ff	   start_bank1 ldx	#$ff
   5389  1fd3				  -	      ifconst	FASTFETCH	; using DPC+
   5390  1fd3				  -	      stx	FASTFETCH
   5391  1fd3					      endif
   5392  1fd3		       9a		      txs
   5393  1fd4				  -	      if	bankswitch == 64
   5394  1fd4				  -	      lda	#(((>(start-1)) & $0F) | $F0)
   5395  1fd4					      else
   5396  1fd4		       a9 f2		      lda	#>(start-1)
   5397  1fd6					      endif
   5398  1fd6		       48		      pha
   5399  1fd7		       a9 b0		      lda	#<(start-1)
   5400  1fd9		       48		      pha
   5401  1fda		       48		      pha
   5402  1fdb		       8a		      txa
   5403  1fdc		       48		      pha
   5404  1fdd		       ba		      tsx
   5405  1fde					      if	bankswitch != 64
   5406  1fde		       b5 04		      lda	4,x	; get high byte of return address
   5407  1fe0		       2a		      rol
   5408  1fe1		       2a		      rol
   5409  1fe2		       2a		      rol
   5410  1fe3		       2a		      rol
   5411  1fe4		       29 03		      and	#bs_mask	;1 3 or 7 for F8/F6/F4
   5412  1fe6		       aa		      tax
   5413  1fe7		       e8		      inx
   5414  1fe8				  -	      else
   5415  1fe8				  -	      lda	4,x	; get high byte of return address
   5416  1fe8				  -	      tay
   5417  1fe8				  -	      ora	#$10	; change our bank nibble into a valid rom mirror
   5418  1fe8				  -	      sta	4,x
   5419  1fe8				  -	      tya
   5420  1fe8				  -	      lsr
   5421  1fe8				  -	      lsr
   5422  1fe8				  -	      lsr
   5423  1fe8				  -	      lsr
   5424  1fe8				  -	      tax
   5425  1fe8				  -	      inx
   5426  1fe8					      endif
   5427  1fe8		       bd f5 1f 	      lda	bankswitch_hotspot-1,x
   5428  1feb		       68		      pla
   5429  1fec		       aa		      tax
   5430  1fed		       68		      pla
   5431  1fee		       60		      rts
   5432  1fef				  -	      if	((* & $1FFF) > ((bankswitch_hotspot & $1FFF) - 1))
   5433  1fef				  -	      echo	"WARNING: size parameter in banksw.asm too small - the program probably will not work."
   5434  1fef				  -	      echo	"Change to",[(*-begin_bscode+1)&$FF]d,"and try again."
   5435  1fef					      endif
   5436  1ffc					      ORG	$1FFC
   5437  1ffc					      RORG	$9FFC
   5438  1ffc		       d1 9f		      .word.w	(start_bank1 & $ffff)
   5439  1ffe		       d1 9f		      .word.w	(start_bank1 & $ffff)
   5440  2000					      ORG	$2000
   5441  2000					      RORG	$B000
   5442  2000					      repeat	256
   5443  2000		       ff		      .byte.b	$ff
   5442  2000					      repend
   5443  2001		       ff		      .byte.b	$ff
   5442  2001					      repend
   5443  2002		       ff		      .byte.b	$ff
   5442  2002					      repend
   5443  2003		       ff		      .byte.b	$ff
   5442  2003					      repend
   5443  2004		       ff		      .byte.b	$ff
   5442  2004					      repend
   5443  2005		       ff		      .byte.b	$ff
   5442  2005					      repend
   5443  2006		       ff		      .byte.b	$ff
   5442  2006					      repend
   5443  2007		       ff		      .byte.b	$ff
   5442  2007					      repend
   5443  2008		       ff		      .byte.b	$ff
   5442  2008					      repend
   5443  2009		       ff		      .byte.b	$ff
   5442  2009					      repend
   5443  200a		       ff		      .byte.b	$ff
   5442  200a					      repend
   5443  200b		       ff		      .byte.b	$ff
   5442  200b					      repend
   5443  200c		       ff		      .byte.b	$ff
   5442  200c					      repend
   5443  200d		       ff		      .byte.b	$ff
   5442  200d					      repend
   5443  200e		       ff		      .byte.b	$ff
   5442  200e					      repend
   5443  200f		       ff		      .byte.b	$ff
   5442  200f					      repend
   5443  2010		       ff		      .byte.b	$ff
   5442  2010					      repend
   5443  2011		       ff		      .byte.b	$ff
   5442  2011					      repend
   5443  2012		       ff		      .byte.b	$ff
   5442  2012					      repend
   5443  2013		       ff		      .byte.b	$ff
   5442  2013					      repend
   5443  2014		       ff		      .byte.b	$ff
   5442  2014					      repend
   5443  2015		       ff		      .byte.b	$ff
   5442  2015					      repend
   5443  2016		       ff		      .byte.b	$ff
   5442  2016					      repend
   5443  2017		       ff		      .byte.b	$ff
   5442  2017					      repend
   5443  2018		       ff		      .byte.b	$ff
   5442  2018					      repend
   5443  2019		       ff		      .byte.b	$ff
   5442  2019					      repend
   5443  201a		       ff		      .byte.b	$ff
   5442  201a					      repend
   5443  201b		       ff		      .byte.b	$ff
   5442  201b					      repend
   5443  201c		       ff		      .byte.b	$ff
   5442  201c					      repend
   5443  201d		       ff		      .byte.b	$ff
   5442  201d					      repend
   5443  201e		       ff		      .byte.b	$ff
   5442  201e					      repend
   5443  201f		       ff		      .byte.b	$ff
   5442  201f					      repend
   5443  2020		       ff		      .byte.b	$ff
   5442  2020					      repend
   5443  2021		       ff		      .byte.b	$ff
   5442  2021					      repend
   5443  2022		       ff		      .byte.b	$ff
   5442  2022					      repend
   5443  2023		       ff		      .byte.b	$ff
   5442  2023					      repend
   5443  2024		       ff		      .byte.b	$ff
   5442  2024					      repend
   5443  2025		       ff		      .byte.b	$ff
   5442  2025					      repend
   5443  2026		       ff		      .byte.b	$ff
   5442  2026					      repend
   5443  2027		       ff		      .byte.b	$ff
   5442  2027					      repend
   5443  2028		       ff		      .byte.b	$ff
   5442  2028					      repend
   5443  2029		       ff		      .byte.b	$ff
   5442  2029					      repend
   5443  202a		       ff		      .byte.b	$ff
   5442  202a					      repend
   5443  202b		       ff		      .byte.b	$ff
   5442  202b					      repend
   5443  202c		       ff		      .byte.b	$ff
   5442  202c					      repend
   5443  202d		       ff		      .byte.b	$ff
   5442  202d					      repend
   5443  202e		       ff		      .byte.b	$ff
   5442  202e					      repend
   5443  202f		       ff		      .byte.b	$ff
   5442  202f					      repend
   5443  2030		       ff		      .byte.b	$ff
   5442  2030					      repend
   5443  2031		       ff		      .byte.b	$ff
   5442  2031					      repend
   5443  2032		       ff		      .byte.b	$ff
   5442  2032					      repend
   5443  2033		       ff		      .byte.b	$ff
   5442  2033					      repend
   5443  2034		       ff		      .byte.b	$ff
   5442  2034					      repend
   5443  2035		       ff		      .byte.b	$ff
   5442  2035					      repend
   5443  2036		       ff		      .byte.b	$ff
   5442  2036					      repend
   5443  2037		       ff		      .byte.b	$ff
   5442  2037					      repend
   5443  2038		       ff		      .byte.b	$ff
   5442  2038					      repend
   5443  2039		       ff		      .byte.b	$ff
   5442  2039					      repend
   5443  203a		       ff		      .byte.b	$ff
   5442  203a					      repend
   5443  203b		       ff		      .byte.b	$ff
   5442  203b					      repend
   5443  203c		       ff		      .byte.b	$ff
   5442  203c					      repend
   5443  203d		       ff		      .byte.b	$ff
   5442  203d					      repend
   5443  203e		       ff		      .byte.b	$ff
   5442  203e					      repend
   5443  203f		       ff		      .byte.b	$ff
   5442  203f					      repend
   5443  2040		       ff		      .byte.b	$ff
   5442  2040					      repend
   5443  2041		       ff		      .byte.b	$ff
   5442  2041					      repend
   5443  2042		       ff		      .byte.b	$ff
   5442  2042					      repend
   5443  2043		       ff		      .byte.b	$ff
   5442  2043					      repend
   5443  2044		       ff		      .byte.b	$ff
   5442  2044					      repend
   5443  2045		       ff		      .byte.b	$ff
   5442  2045					      repend
   5443  2046		       ff		      .byte.b	$ff
   5442  2046					      repend
   5443  2047		       ff		      .byte.b	$ff
   5442  2047					      repend
   5443  2048		       ff		      .byte.b	$ff
   5442  2048					      repend
   5443  2049		       ff		      .byte.b	$ff
   5442  2049					      repend
   5443  204a		       ff		      .byte.b	$ff
   5442  204a					      repend
   5443  204b		       ff		      .byte.b	$ff
   5442  204b					      repend
   5443  204c		       ff		      .byte.b	$ff
   5442  204c					      repend
   5443  204d		       ff		      .byte.b	$ff
   5442  204d					      repend
   5443  204e		       ff		      .byte.b	$ff
   5442  204e					      repend
   5443  204f		       ff		      .byte.b	$ff
   5442  204f					      repend
   5443  2050		       ff		      .byte.b	$ff
   5442  2050					      repend
   5443  2051		       ff		      .byte.b	$ff
   5442  2051					      repend
   5443  2052		       ff		      .byte.b	$ff
   5442  2052					      repend
   5443  2053		       ff		      .byte.b	$ff
   5442  2053					      repend
   5443  2054		       ff		      .byte.b	$ff
   5442  2054					      repend
   5443  2055		       ff		      .byte.b	$ff
   5442  2055					      repend
   5443  2056		       ff		      .byte.b	$ff
   5442  2056					      repend
   5443  2057		       ff		      .byte.b	$ff
   5442  2057					      repend
   5443  2058		       ff		      .byte.b	$ff
   5442  2058					      repend
   5443  2059		       ff		      .byte.b	$ff
   5442  2059					      repend
   5443  205a		       ff		      .byte.b	$ff
   5442  205a					      repend
   5443  205b		       ff		      .byte.b	$ff
   5442  205b					      repend
   5443  205c		       ff		      .byte.b	$ff
   5442  205c					      repend
   5443  205d		       ff		      .byte.b	$ff
   5442  205d					      repend
   5443  205e		       ff		      .byte.b	$ff
   5442  205e					      repend
   5443  205f		       ff		      .byte.b	$ff
   5442  205f					      repend
   5443  2060		       ff		      .byte.b	$ff
   5442  2060					      repend
   5443  2061		       ff		      .byte.b	$ff
   5442  2061					      repend
   5443  2062		       ff		      .byte.b	$ff
   5442  2062					      repend
   5443  2063		       ff		      .byte.b	$ff
   5442  2063					      repend
   5443  2064		       ff		      .byte.b	$ff
   5442  2064					      repend
   5443  2065		       ff		      .byte.b	$ff
   5442  2065					      repend
   5443  2066		       ff		      .byte.b	$ff
   5442  2066					      repend
   5443  2067		       ff		      .byte.b	$ff
   5442  2067					      repend
   5443  2068		       ff		      .byte.b	$ff
   5442  2068					      repend
   5443  2069		       ff		      .byte.b	$ff
   5442  2069					      repend
   5443  206a		       ff		      .byte.b	$ff
   5442  206a					      repend
   5443  206b		       ff		      .byte.b	$ff
   5442  206b					      repend
   5443  206c		       ff		      .byte.b	$ff
   5442  206c					      repend
   5443  206d		       ff		      .byte.b	$ff
   5442  206d					      repend
   5443  206e		       ff		      .byte.b	$ff
   5442  206e					      repend
   5443  206f		       ff		      .byte.b	$ff
   5442  206f					      repend
   5443  2070		       ff		      .byte.b	$ff
   5442  2070					      repend
   5443  2071		       ff		      .byte.b	$ff
   5442  2071					      repend
   5443  2072		       ff		      .byte.b	$ff
   5442  2072					      repend
   5443  2073		       ff		      .byte.b	$ff
   5442  2073					      repend
   5443  2074		       ff		      .byte.b	$ff
   5442  2074					      repend
   5443  2075		       ff		      .byte.b	$ff
   5442  2075					      repend
   5443  2076		       ff		      .byte.b	$ff
   5442  2076					      repend
   5443  2077		       ff		      .byte.b	$ff
   5442  2077					      repend
   5443  2078		       ff		      .byte.b	$ff
   5442  2078					      repend
   5443  2079		       ff		      .byte.b	$ff
   5442  2079					      repend
   5443  207a		       ff		      .byte.b	$ff
   5442  207a					      repend
   5443  207b		       ff		      .byte.b	$ff
   5442  207b					      repend
   5443  207c		       ff		      .byte.b	$ff
   5442  207c					      repend
   5443  207d		       ff		      .byte.b	$ff
   5442  207d					      repend
   5443  207e		       ff		      .byte.b	$ff
   5442  207e					      repend
   5443  207f		       ff		      .byte.b	$ff
   5442  207f					      repend
   5443  2080		       ff		      .byte.b	$ff
   5442  2080					      repend
   5443  2081		       ff		      .byte.b	$ff
   5442  2081					      repend
   5443  2082		       ff		      .byte.b	$ff
   5442  2082					      repend
   5443  2083		       ff		      .byte.b	$ff
   5442  2083					      repend
   5443  2084		       ff		      .byte.b	$ff
   5442  2084					      repend
   5443  2085		       ff		      .byte.b	$ff
   5442  2085					      repend
   5443  2086		       ff		      .byte.b	$ff
   5442  2086					      repend
   5443  2087		       ff		      .byte.b	$ff
   5442  2087					      repend
   5443  2088		       ff		      .byte.b	$ff
   5442  2088					      repend
   5443  2089		       ff		      .byte.b	$ff
   5442  2089					      repend
   5443  208a		       ff		      .byte.b	$ff
   5442  208a					      repend
   5443  208b		       ff		      .byte.b	$ff
   5442  208b					      repend
   5443  208c		       ff		      .byte.b	$ff
   5442  208c					      repend
   5443  208d		       ff		      .byte.b	$ff
   5442  208d					      repend
   5443  208e		       ff		      .byte.b	$ff
   5442  208e					      repend
   5443  208f		       ff		      .byte.b	$ff
   5442  208f					      repend
   5443  2090		       ff		      .byte.b	$ff
   5442  2090					      repend
   5443  2091		       ff		      .byte.b	$ff
   5442  2091					      repend
   5443  2092		       ff		      .byte.b	$ff
   5442  2092					      repend
   5443  2093		       ff		      .byte.b	$ff
   5442  2093					      repend
   5443  2094		       ff		      .byte.b	$ff
   5442  2094					      repend
   5443  2095		       ff		      .byte.b	$ff
   5442  2095					      repend
   5443  2096		       ff		      .byte.b	$ff
   5442  2096					      repend
   5443  2097		       ff		      .byte.b	$ff
   5442  2097					      repend
   5443  2098		       ff		      .byte.b	$ff
   5442  2098					      repend
   5443  2099		       ff		      .byte.b	$ff
   5442  2099					      repend
   5443  209a		       ff		      .byte.b	$ff
   5442  209a					      repend
   5443  209b		       ff		      .byte.b	$ff
   5442  209b					      repend
   5443  209c		       ff		      .byte.b	$ff
   5442  209c					      repend
   5443  209d		       ff		      .byte.b	$ff
   5442  209d					      repend
   5443  209e		       ff		      .byte.b	$ff
   5442  209e					      repend
   5443  209f		       ff		      .byte.b	$ff
   5442  209f					      repend
   5443  20a0		       ff		      .byte.b	$ff
   5442  20a0					      repend
   5443  20a1		       ff		      .byte.b	$ff
   5442  20a1					      repend
   5443  20a2		       ff		      .byte.b	$ff
   5442  20a2					      repend
   5443  20a3		       ff		      .byte.b	$ff
   5442  20a3					      repend
   5443  20a4		       ff		      .byte.b	$ff
   5442  20a4					      repend
   5443  20a5		       ff		      .byte.b	$ff
   5442  20a5					      repend
   5443  20a6		       ff		      .byte.b	$ff
   5442  20a6					      repend
   5443  20a7		       ff		      .byte.b	$ff
   5442  20a7					      repend
   5443  20a8		       ff		      .byte.b	$ff
   5442  20a8					      repend
   5443  20a9		       ff		      .byte.b	$ff
   5442  20a9					      repend
   5443  20aa		       ff		      .byte.b	$ff
   5442  20aa					      repend
   5443  20ab		       ff		      .byte.b	$ff
   5442  20ab					      repend
   5443  20ac		       ff		      .byte.b	$ff
   5442  20ac					      repend
   5443  20ad		       ff		      .byte.b	$ff
   5442  20ad					      repend
   5443  20ae		       ff		      .byte.b	$ff
   5442  20ae					      repend
   5443  20af		       ff		      .byte.b	$ff
   5442  20af					      repend
   5443  20b0		       ff		      .byte.b	$ff
   5442  20b0					      repend
   5443  20b1		       ff		      .byte.b	$ff
   5442  20b1					      repend
   5443  20b2		       ff		      .byte.b	$ff
   5442  20b2					      repend
   5443  20b3		       ff		      .byte.b	$ff
   5442  20b3					      repend
   5443  20b4		       ff		      .byte.b	$ff
   5442  20b4					      repend
   5443  20b5		       ff		      .byte.b	$ff
   5442  20b5					      repend
   5443  20b6		       ff		      .byte.b	$ff
   5442  20b6					      repend
   5443  20b7		       ff		      .byte.b	$ff
   5442  20b7					      repend
   5443  20b8		       ff		      .byte.b	$ff
   5442  20b8					      repend
   5443  20b9		       ff		      .byte.b	$ff
   5442  20b9					      repend
   5443  20ba		       ff		      .byte.b	$ff
   5442  20ba					      repend
   5443  20bb		       ff		      .byte.b	$ff
   5442  20bb					      repend
   5443  20bc		       ff		      .byte.b	$ff
   5442  20bc					      repend
   5443  20bd		       ff		      .byte.b	$ff
   5442  20bd					      repend
   5443  20be		       ff		      .byte.b	$ff
   5442  20be					      repend
   5443  20bf		       ff		      .byte.b	$ff
   5442  20bf					      repend
   5443  20c0		       ff		      .byte.b	$ff
   5442  20c0					      repend
   5443  20c1		       ff		      .byte.b	$ff
   5442  20c1					      repend
   5443  20c2		       ff		      .byte.b	$ff
   5442  20c2					      repend
   5443  20c3		       ff		      .byte.b	$ff
   5442  20c3					      repend
   5443  20c4		       ff		      .byte.b	$ff
   5442  20c4					      repend
   5443  20c5		       ff		      .byte.b	$ff
   5442  20c5					      repend
   5443  20c6		       ff		      .byte.b	$ff
   5442  20c6					      repend
   5443  20c7		       ff		      .byte.b	$ff
   5442  20c7					      repend
   5443  20c8		       ff		      .byte.b	$ff
   5442  20c8					      repend
   5443  20c9		       ff		      .byte.b	$ff
   5442  20c9					      repend
   5443  20ca		       ff		      .byte.b	$ff
   5442  20ca					      repend
   5443  20cb		       ff		      .byte.b	$ff
   5442  20cb					      repend
   5443  20cc		       ff		      .byte.b	$ff
   5442  20cc					      repend
   5443  20cd		       ff		      .byte.b	$ff
   5442  20cd					      repend
   5443  20ce		       ff		      .byte.b	$ff
   5442  20ce					      repend
   5443  20cf		       ff		      .byte.b	$ff
   5442  20cf					      repend
   5443  20d0		       ff		      .byte.b	$ff
   5442  20d0					      repend
   5443  20d1		       ff		      .byte.b	$ff
   5442  20d1					      repend
   5443  20d2		       ff		      .byte.b	$ff
   5442  20d2					      repend
   5443  20d3		       ff		      .byte.b	$ff
   5442  20d3					      repend
   5443  20d4		       ff		      .byte.b	$ff
   5442  20d4					      repend
   5443  20d5		       ff		      .byte.b	$ff
   5442  20d5					      repend
   5443  20d6		       ff		      .byte.b	$ff
   5442  20d6					      repend
   5443  20d7		       ff		      .byte.b	$ff
   5442  20d7					      repend
   5443  20d8		       ff		      .byte.b	$ff
   5442  20d8					      repend
   5443  20d9		       ff		      .byte.b	$ff
   5442  20d9					      repend
   5443  20da		       ff		      .byte.b	$ff
   5442  20da					      repend
   5443  20db		       ff		      .byte.b	$ff
   5442  20db					      repend
   5443  20dc		       ff		      .byte.b	$ff
   5442  20dc					      repend
   5443  20dd		       ff		      .byte.b	$ff
   5442  20dd					      repend
   5443  20de		       ff		      .byte.b	$ff
   5442  20de					      repend
   5443  20df		       ff		      .byte.b	$ff
   5442  20df					      repend
   5443  20e0		       ff		      .byte.b	$ff
   5442  20e0					      repend
   5443  20e1		       ff		      .byte.b	$ff
   5442  20e1					      repend
   5443  20e2		       ff		      .byte.b	$ff
   5442  20e2					      repend
   5443  20e3		       ff		      .byte.b	$ff
   5442  20e3					      repend
   5443  20e4		       ff		      .byte.b	$ff
   5442  20e4					      repend
   5443  20e5		       ff		      .byte.b	$ff
   5442  20e5					      repend
   5443  20e6		       ff		      .byte.b	$ff
   5442  20e6					      repend
   5443  20e7		       ff		      .byte.b	$ff
   5442  20e7					      repend
   5443  20e8		       ff		      .byte.b	$ff
   5442  20e8					      repend
   5443  20e9		       ff		      .byte.b	$ff
   5442  20e9					      repend
   5443  20ea		       ff		      .byte.b	$ff
   5442  20ea					      repend
   5443  20eb		       ff		      .byte.b	$ff
   5442  20eb					      repend
   5443  20ec		       ff		      .byte.b	$ff
   5442  20ec					      repend
   5443  20ed		       ff		      .byte.b	$ff
   5442  20ed					      repend
   5443  20ee		       ff		      .byte.b	$ff
   5442  20ee					      repend
   5443  20ef		       ff		      .byte.b	$ff
   5442  20ef					      repend
   5443  20f0		       ff		      .byte.b	$ff
   5442  20f0					      repend
   5443  20f1		       ff		      .byte.b	$ff
   5442  20f1					      repend
   5443  20f2		       ff		      .byte.b	$ff
   5442  20f2					      repend
   5443  20f3		       ff		      .byte.b	$ff
   5442  20f3					      repend
   5443  20f4		       ff		      .byte.b	$ff
   5442  20f4					      repend
   5443  20f5		       ff		      .byte.b	$ff
   5442  20f5					      repend
   5443  20f6		       ff		      .byte.b	$ff
   5442  20f6					      repend
   5443  20f7		       ff		      .byte.b	$ff
   5442  20f7					      repend
   5443  20f8		       ff		      .byte.b	$ff
   5442  20f8					      repend
   5443  20f9		       ff		      .byte.b	$ff
   5442  20f9					      repend
   5443  20fa		       ff		      .byte.b	$ff
   5442  20fa					      repend
   5443  20fb		       ff		      .byte.b	$ff
   5442  20fb					      repend
   5443  20fc		       ff		      .byte.b	$ff
   5442  20fc					      repend
   5443  20fd		       ff		      .byte.b	$ff
   5442  20fd					      repend
   5443  20fe		       ff		      .byte.b	$ff
   5442  20fe					      repend
   5443  20ff		       ff		      .byte.b	$ff
   5444  2100					      repend
   5445  2100				   .
   5446  2100							; 
   5447  2100
   5448  2100				   ._titlescreen_menu
   5449  2100							; _titlescreen_menu
   5450  2100
   5451  2100				   .L0596		;  COLUBK  =  _00
   5452  2100
   5453  2100		       a9 00		      LDA	#_00
   5454  2102		       85 09		      STA	COLUBK
   5455  2104				   .
   5456  2104							; 
   5457  2104
   5458  2104				   .L0597		;  gosub titledrawscreen
   5459  2104
   5460  2104		       20 df b2 	      jsr	.titledrawscreen
   5461  2107
   5462  2107				   .
   5463  2107							; 
   5464  2107
   5465  2107				   .L0598		;  if delay_counter then delay_counter  =  delay_counter  -  1  :  goto _titlescreen_menu
   5466  2107
   5467  2107		       a5 d4		      LDA	delay_counter
   5468  2109		       f0 05		      BEQ	.skipL0598
   5469  210b				   .condpart111
   5470  210b		       c6 d4		      DEC	delay_counter
   5471  210d		       4c 00 b1 	      jmp	._titlescreen_menu
   5472  2110
   5473  2110				   .skipL0598
   5474  2110				   .
   5475  2110							; 
   5476  2110
   5477  2110				   .L0599		;  if ReceiveBufferSize  <  response_menu_size then _Skip_Read_Menu_Response
   5478  2110
   5479  2110		       ad f3 1f 	      LDA	ReceiveBufferSize
   5480  2113		       c9 06		      CMP	#response_menu_size
   5481  2115					      if	((* - ._Skip_Read_Menu_Response) < 127) && ((* - ._Skip_Read_Menu_Response) > -128)
   5482  2115		       90 32		      bcc	._Skip_Read_Menu_Response
   5483  2117				  -	      else
   5484  2117				  -	      bcs	.32skip_Skip_Read_Menu_Response
   5485  2117				  -	      jmp	._Skip_Read_Menu_Response
   5486  2117				  -.32skip_Skip_Read_Menu_Response
   5487  2117					      endif
   5488  2117				   .L0600		;  _Bit5_Request_Pending{5}  =  0
   5489  2117
   5490  2117		       a5 ec		      LDA	_Bit5_Request_Pending
   5491  2119		       29 df		      AND	#223
   5492  211b		       85 ec		      STA	_Bit5_Request_Pending
   5493  211d				   .L0601		;  max_pub_level_bcd1	=  ReceiveBuffer
   5494  211d
   5495  211d		       ad f2 1f 	      LDA	ReceiveBuffer
   5496  2120		       85 a7		      STA	max_pub_level_bcd1
   5497  2122				   .L0602		;  max_pub_level_bcd2	=  ReceiveBuffer
   5498  2122
   5499  2122		       ad f2 1f 	      LDA	ReceiveBuffer
   5500  2125		       85 a8		      STA	max_pub_level_bcd2
   5501  2127				   .L0603		;  max_pub_level_bcd3	=  ReceiveBuffer
   5502  2127
   5503  2127		       ad f2 1f 	      LDA	ReceiveBuffer
   5504  212a		       85 a9		      STA	max_pub_level_bcd3
   5505  212c				   .L0604		;  max_priv_level_bcd1  =  ReceiveBuffer
   5506  212c
   5507  212c		       ad f2 1f 	      LDA	ReceiveBuffer
   5508  212f		       85 aa		      STA	max_priv_level_bcd1
   5509  2131				   .L0605		;  max_priv_level_bcd2  =  ReceiveBuffer
   5510  2131
   5511  2131		       ad f2 1f 	      LDA	ReceiveBuffer
   5512  2134		       85 ab		      STA	max_priv_level_bcd2
   5513  2136				   .L0606		;  max_priv_level_bcd3  =  ReceiveBuffer
   5514  2136
   5515  2136		       ad f2 1f 	      LDA	ReceiveBuffer
   5516  2139		       85 ac		      STA	max_priv_level_bcd3
   5517  213b				   .L0607		;  has_private_levels	=  max_priv_level_bcd1	|  max_priv_level_bcd2	|  max_priv_level_bcd3
   5518  213b
   5519  213b							; complex statement detected
   5520  213b		       a5 aa		      LDA	max_priv_level_bcd1
   5521  213d		       48		      PHA
   5522  213e		       a5 ab		      LDA	max_priv_level_bcd2
   5523  2140		       05 ac		      ORA	max_priv_level_bcd3
   5524  2142		       ba		      TSX
   5525  2143		       e8		      INX
   5526  2144		       9a		      TXS
   5527  2145		       15 00		      ORA	$00,x
   5528  2147		       85 ad		      STA	has_private_levels
   5529  2149				   ._Skip_Read_Menu_Response
   5530  2149							; _Skip_Read_Menu_Response
   5531  2149
   5532  2149				   .
   5533  2149							; 
   5534  2149
   5535  2149				   .L0608		;  if _Bit5_Request_Pending{5} then _titlescreen_menu
   5536  2149
   5537  2149		       a5 ec		      LDA	_Bit5_Request_Pending
   5538  214b		       29 20		      AND	#32
   5539  214d					      if	((* - ._titlescreen_menu) < 127) && ((* - ._titlescreen_menu) > -128)
   5540  214d		       d0 b1		      BNE	._titlescreen_menu
   5541  214f				  -	      else
   5542  214f				  -	      beq	.33skip_titlescreen_menu
   5543  214f				  -	      jmp	._titlescreen_menu
   5544  214f				  -.33skip_titlescreen_menu
   5545  214f					      endif
   5546  214f				   .
   5547  214f							; 
   5548  214f
   5549  214f				   .L0609		;  if joy0left then score  =  score  -  100  :  delay_counter	=  5
   5550  214f
   5551  214f		       2c 80 02 	      bit	SWCHA
   5552  2152		       70 19		      BVS	.skipL0609
   5553  2154				   .condpart112
   5554  2154		       f8		      SED
   5555  2155		       38		      SEC
   5556  2156		       a5 95		      LDA	score+2
   5557  2158		       e9 00		      SBC	#$00
   5558  215a		       85 95		      STA	score+2
   5559  215c		       a5 94		      LDA	score+1
   5560  215e		       e9 01		      SBC	#$01
   5561  2160		       85 94		      STA	score+1
   5562  2162		       a5 93		      LDA	score
   5563  2164		       e9 00		      SBC	#$00
   5564  2166		       85 93		      STA	score
   5565  2168		       d8		      CLD
   5566  2169		       a9 05		      LDA	#5
   5567  216b		       85 d4		      STA	delay_counter
   5568  216d				   .skipL0609
   5569  216d				   .L0610		;  if joy0down then score  =  score  -  1  :  delay_counter  =  5
   5570  216d
   5571  216d		       a9 20		      lda	#$20
   5572  216f		       2c 80 02 	      bit	SWCHA
   5573  2172		       d0 19		      BNE	.skipL0610
   5574  2174				   .condpart113
   5575  2174		       f8		      SED
   5576  2175		       38		      SEC
   5577  2176		       a5 95		      LDA	score+2
   5578  2178		       e9 01		      SBC	#$01
   5579  217a		       85 95		      STA	score+2
   5580  217c		       a5 94		      LDA	score+1
   5581  217e		       e9 00		      SBC	#$00
   5582  2180		       85 94		      STA	score+1
   5583  2182		       a5 93		      LDA	score
   5584  2184		       e9 00		      SBC	#$00
   5585  2186		       85 93		      STA	score
   5586  2188		       d8		      CLD
   5587  2189		       a9 05		      LDA	#5
   5588  218b		       85 d4		      STA	delay_counter
   5589  218d				   .skipL0610
   5590  218d				   .L0611		;  if joy0right then score  =	score  +  100  :  delay_counter  =  5
   5591  218d
   5592  218d		       2c 80 02 	      bit	SWCHA
   5593  2190		       30 13		      BMI	.skipL0611
   5594  2192				   .condpart114
   5595  2192		       f8		      SED
   5596  2193		       18		      CLC
   5597  2194		       a5 94		      LDA	score+1
   5598  2196		       69 01		      ADC	#$01
   5599  2198		       85 94		      STA	score+1
   5600  219a		       a5 93		      LDA	score
   5601  219c		       69 00		      ADC	#$00
   5602  219e		       85 93		      STA	score
   5603  21a0		       d8		      CLD
   5604  21a1		       a9 05		      LDA	#5
   5605  21a3		       85 d4		      STA	delay_counter
   5606  21a5				   .skipL0611
   5607  21a5				   .L0612		;  if joy0up then score  =  score  +  1  :  delay_counter  =  5
   5608  21a5
   5609  21a5		       a9 10		      lda	#$10
   5610  21a7		       2c 80 02 	      bit	SWCHA
   5611  21aa		       d0 19		      BNE	.skipL0612
   5612  21ac				   .condpart115
   5613  21ac		       f8		      SED
   5614  21ad		       18		      CLC
   5615  21ae		       a5 95		      LDA	score+2
   5616  21b0		       69 01		      ADC	#$01
   5617  21b2		       85 95		      STA	score+2
   5618  21b4		       a5 94		      LDA	score+1
   5619  21b6		       69 00		      ADC	#$00
   5620  21b8		       85 94		      STA	score+1
   5621  21ba		       a5 93		      LDA	score
   5622  21bc		       69 00		      ADC	#$00
   5623  21be		       85 93		      STA	score
   5624  21c0		       d8		      CLD
   5625  21c1		       a9 05		      LDA	#5
   5626  21c3		       85 d4		      STA	delay_counter
   5627  21c5				   .skipL0612
   5628  21c5				   .
   5629  21c5							; 
   5630  21c5
   5631  21c5				   .
   5632  21c5							; 
   5633  21c5
   5634  21c5				   .L0613		;  if gamenumber  >  4 then _User_Level_Compare
   5635  21c5
   5636  21c5		       a9 04		      LDA	#4
   5637  21c7		       c5 a6		      CMP	gamenumber
   5638  21c9					      if	((* - ._User_Level_Compare) < 127) && ((* - ._User_Level_Compare) > -128)
   5639  21c9		       90 13		      bcc	._User_Level_Compare
   5640  21cb				  -	      else
   5641  21cb				  -	      bcs	.34skip_User_Level_Compare
   5642  21cb				  -	      jmp	._User_Level_Compare
   5643  21cb				  -.34skip_User_Level_Compare
   5644  21cb					      endif
   5645  21cb				   .
   5646  21cb							; 
   5647  21cb
   5648  21cb				   .L0614		;  asm
   5649  21cb
   5650  21cb		       f8		      sed		; Set the Decimal Mode Flag
   5651  21cc
   5652  21cc		       a5 a9		      lda	max_pub_level_bcd3	; Load the Accumulator
   5653  21ce
   5654  21ce		       c5 95		      cmp	_sc3	; Compare Memory and the Accumulator
   5655  21d0
   5656  21d0		       a5 a8		      lda	max_pub_level_bcd2	; Load the Accumulator
   5657  21d2
   5658  21d2		       e5 94		      sbc	_sc2	; Subtract With Carry
   5659  21d4
   5660  21d4		       a5 a7		      lda	max_pub_level_bcd1	; Load the Accumulator
   5661  21d6
   5662  21d6		       e5 93		      sbc	_sc1	; Subtract With Carry
   5663  21d8
   5664  21d8		       d8		      cld		; Clear the Decimal Flag
   5665  21d9
   5666  21d9		       b0 1f		      bcs	._Skip_Level_Reset	; Branch if Carry Set
   5667  21db
   5668  21db							; (goto label if carry is set)
   5669  21db
   5670  21db		       4c ee b1 	      jmp	._Level_Reset
   5671  21de
   5672  21de
   5673  21de
   5674  21de				   ._User_Level_Compare
   5675  21de
   5676  21de		       f8		      sed		; Set the Decimal Mode Flag
   5677  21df
   5678  21df		       a5 ac		      lda	max_priv_level_bcd3	; Load the Accumulator
   5679  21e1
   5680  21e1		       c5 95		      cmp	_sc3	; Compare Memory and the Accumulator
   5681  21e3
   5682  21e3		       a5 ab		      lda	max_priv_level_bcd2	; Load the Accumulator
   5683  21e5
   5684  21e5		       e5 94		      sbc	_sc2	; Subtract With Carry
   5685  21e7
   5686  21e7		       a5 aa		      lda	max_priv_level_bcd1	; Load the Accumulator
   5687  21e9
   5688  21e9		       e5 93		      sbc	_sc1	; Subtract With Carry
   5689  21eb
   5690  21eb		       d8		      cld		; Clear the Decimal Flag
   5691  21ec
   5692  21ec		       b0 0c		      bcs	._Skip_Level_Reset	; Branch if Carry Set
   5693  21ee
   5694  21ee							; (goto label if carry is set)
   5695  21ee
   5696  21ee
   5697  21ee
   5698  21ee				   ._Level_Reset
   5699  21ee							; _Level_Reset
   5700  21ee
   5701  21ee				   .L0615		;  score  =  1
   5702  21ee
   5703  21ee		       a9 01		      LDA	#$01
   5704  21f0		       85 95		      STA	score+2
   5705  21f2		       a9 00		      LDA	#$00
   5706  21f4		       85 94		      STA	score+1
   5707  21f6		       a9 00		      LDA	#$00
   5708  21f8		       85 93		      STA	score
   5709  21fa				   .
   5710  21fa							; 
   5711  21fa
   5712  21fa				   ._Skip_Level_Reset
   5713  21fa							; _Skip_Level_Reset
   5714  21fa
   5715  21fa				   .L0616		;  if gamenumber  <  5  &&  _sc1  =  0  &&  _sc2  =  0  &&  _sc3  =  0 then _sc1  =  max_pub_level_bcd1  :  _sc2  =  max_pub_level_bcd2  :  _sc3  =  max_pub_level_bcd3
   5716  21fa
   5717  21fa		       a5 a6		      LDA	gamenumber
   5718  21fc		       c9 05		      CMP	#5
   5719  21fe		       b0 1e		      BCS	.skipL0616
   5720  2200				   .condpart116
   5721  2200		       a5 93		      LDA	_sc1
   5722  2202		       c9 00		      CMP	#0
   5723  2204		       d0 18		      BNE	.skip116then
   5724  2206				   .condpart117
   5725  2206		       a5 94		      LDA	_sc2
   5726  2208		       c9 00		      CMP	#0
   5727  220a		       d0 12		      BNE	.skip117then
   5728  220c				   .condpart118
   5729  220c		       a5 95		      LDA	_sc3
   5730  220e		       c9 00		      CMP	#0
   5731  2210		       d0 0c		      BNE	.skip118then
   5732  2212				   .condpart119
   5733  2212		       a5 a7		      LDA	max_pub_level_bcd1
   5734  2214		       85 93		      STA	_sc1
   5735  2216		       a5 a8		      LDA	max_pub_level_bcd2
   5736  2218		       85 94		      STA	_sc2
   5737  221a		       a5 a9		      LDA	max_pub_level_bcd3
   5738  221c		       85 95		      STA	_sc3
   5739  221e				   .skip118then
   5740  221e				   .skip117then
   5741  221e				   .skip116then
   5742  221e				   .skipL0616
   5743  221e				   .L0617		;  if gamenumber  >  4  &&  _sc1  =  0  &&  _sc2  =  0  &&  _sc3  =  0 then _sc1  =  max_priv_level_bcd1  :  _sc2  =  max_priv_level_bcd2  :  _sc3  =	max_priv_level_bcd3
   5744  221e
   5745  221e		       a9 04		      LDA	#4
   5746  2220		       c5 a6		      CMP	gamenumber
   5747  2222		       b0 1e		      BCS	.skipL0617
   5748  2224				   .condpart120
   5749  2224		       a5 93		      LDA	_sc1
   5750  2226		       c9 00		      CMP	#0
   5751  2228		       d0 18		      BNE	.skip120then
   5752  222a				   .condpart121
   5753  222a		       a5 94		      LDA	_sc2
   5754  222c		       c9 00		      CMP	#0
   5755  222e		       d0 12		      BNE	.skip121then
   5756  2230				   .condpart122
   5757  2230		       a5 95		      LDA	_sc3
   5758  2232		       c9 00		      CMP	#0
   5759  2234		       d0 0c		      BNE	.skip122then
   5760  2236				   .condpart123
   5761  2236		       a5 aa		      LDA	max_priv_level_bcd1
   5762  2238		       85 93		      STA	_sc1
   5763  223a		       a5 ab		      LDA	max_priv_level_bcd2
   5764  223c		       85 94		      STA	_sc2
   5765  223e		       a5 ac		      LDA	max_priv_level_bcd3
   5766  2240		       85 95		      STA	_sc3
   5767  2242				   .skip122then
   5768  2242				   .skip121then
   5769  2242				   .skip120then
   5770  2242				   .skipL0617
   5771  2242				   .
   5772  2242							; 
   5773  2242
   5774  2242				   .L0618		;  if has_private_levels then temp4  =  8 else temp4  =  4
   5775  2242
   5776  2242		       a5 ad		      LDA	has_private_levels
   5777  2244		       f0 07		      BEQ	.skipL0618
   5778  2246				   .condpart124
   5779  2246		       a9 08		      LDA	#8
   5780  2248		       85 9f		      STA	temp4
   5781  224a		       4c 51 b2 	      jmp	.skipelse9
   5782  224d				   .skipL0618
   5783  224d		       a9 04		      LDA	#4
   5784  224f		       85 9f		      STA	temp4
   5785  2251				   .skipelse9
   5786  2251				   .L0619		;  if switchselect then gamenumber  =	gamenumber  +  1  :  delay_counter  =  20  :  if gamenumber  >	temp4 then gamenumber  =  1
   5787  2251
   5788  2251		       a9 02		      lda	#2
   5789  2253		       2c 82 02 	      bit	SWCHB
   5790  2256		       d0 10		      BNE	.skipL0619
   5791  2258				   .condpart125
   5792  2258		       e6 a6		      INC	gamenumber
   5793  225a		       a9 14		      LDA	#20
   5794  225c		       85 d4		      STA	delay_counter
   5795  225e		       a5 9f		      LDA	temp4
   5796  2260		       c5 a6		      CMP	gamenumber
   5797  2262		       b0 04		      BCS	.skip125then
   5798  2264				   .condpart126
   5799  2264		       a9 01		      LDA	#1
   5800  2266		       85 a6		      STA	gamenumber
   5801  2268				   .skip125then
   5802  2268				   .skipL0619
   5803  2268				   .L0620		;  if !joy0fire then _Bit7_FireB_Restrainer{7}  =  0  :  goto _titlescreen_menu
   5804  2268
   5805  2268		       24 0c		      bit	INPT4
   5806  226a		       10 09		      BPL	.skipL0620
   5807  226c				   .condpart127
   5808  226c		       a5 ec		      LDA	_Bit7_FireB_Restrainer
   5809  226e		       29 7f		      AND	#127
   5810  2270		       85 ec		      STA	_Bit7_FireB_Restrainer
   5811  2272		       4c 00 b1 	      jmp	._titlescreen_menu
   5812  2275
   5813  2275				   .skipL0620
   5814  2275				   .L0621		;  if _Bit7_FireB_Restrainer{7} then goto _titlescreen_menu
   5815  2275
   5816  2275		       24 ec		      BIT	_Bit7_FireB_Restrainer
   5817  2277		       10 03		      BPL	.skipL0621
   5818  2279				   .condpart128
   5819  2279		       4c 00 b1 	      jmp	._titlescreen_menu
   5820  227c
   5821  227c				   .skipL0621
   5822  227c				   .
   5823  227c							; 
   5824  227c
   5825  227c				   .
   5826  227c							; 
   5827  227c
   5828  227c				   .
   5829  227c							; 
   5830  227c
   5831  227c				   .L0622		;  WriteToBuffer  =  _sc1  :  WriteToBuffer  =  _sc2  :  WriteToBuffer  =  _sc3  :  WriteToBuffer  =  gamenumber  :  WriteSendBuffer  =  req_load  :  _Bit5_Request_Pending{5}  =  1
   5832  227c
   5833  227c		       a5 93		      LDA	_sc1
   5834  227e		       8d f0 1f 	      STA	WriteToBuffer
   5835  2281		       a5 94		      LDA	_sc2
   5836  2283		       8d f0 1f 	      STA	WriteToBuffer
   5837  2286		       a5 95		      LDA	_sc3
   5838  2288		       8d f0 1f 	      STA	WriteToBuffer
   5839  228b		       a5 a6		      LDA	gamenumber
   5840  228d		       8d f0 1f 	      STA	WriteToBuffer
   5841  2290		       a9 00		      LDA	#req_load
   5842  2292		       8d f1 1f 	      STA	WriteSendBuffer
   5843  2295		       a5 ec		      LDA	_Bit5_Request_Pending
   5844  2297		       09 20		      ORA	#32
   5845  2299		       85 ec		      STA	_Bit5_Request_Pending
   5846  229b				   .
   5847  229b							; 
   5848  229b
   5849  229b				   .L0623		;  _Bit7_FireB_Restrainer{7}  =  1
   5850  229b
   5851  229b		       a5 ec		      LDA	_Bit7_FireB_Restrainer
   5852  229d		       09 80		      ORA	#128
   5853  229f		       85 ec		      STA	_Bit7_FireB_Restrainer
   5854  22a1				   .
   5855  22a1							; 
   5856  22a1
   5857  22a1				   .L0624		;  player1y  =  player_min_y  :  Game_Status  =  game_state_run
   5858  22a1
   5859  22a1		       a9 02		      LDA	#player_min_y
   5860  22a3		       85 86		      STA	player1y
   5861  22a5		       a9 00		      LDA	#game_state_run
   5862  22a7		       85 d3		      STA	Game_Status
   5863  22a9				   .L0625		;  score  =  0  :  men_to_rescue  =  0
   5864  22a9
   5865  22a9		       a9 00		      LDA	#$00
   5866  22ab		       85 95		      STA	score+2
   5867  22ad		       a9 00		      LDA	#$00
   5868  22af		       85 94		      STA	score+1
   5869  22b1		       a9 00		      LDA	#$00
   5870  22b3		       85 93		      STA	score
   5871  22b5		       a9 00		      LDA	#0
   5872  22b7		       85 b0		      STA	men_to_rescue
   5873  22b9				   .L0626		;  pfscore1  =  %00101010  :  pfscore2  =  255  :  pfscorecolor  =  _1C
   5874  22b9
   5875  22b9		       a9 2a		      LDA	#%00101010
   5876  22bb		       85 f2		      STA	pfscore1
   5877  22bd		       a9 ff		      LDA	#255
   5878  22bf		       85 f3		      STA	pfscore2
   5879  22c1		       a9 1c		      LDA	#_1C
   5880  22c3		       85 f4		      STA	pfscorecolor
   5881  22c5				   .
   5882  22c5							; 
   5883  22c5
   5884  22c5				   .
   5885  22c5							; 
   5886  22c5
   5887  22c5				   .
   5888  22c5							; 
   5889  22c5
   5890  22c5				   .L0627		;  asm
   5891  22c5
   5892  22c5		       a9 f0		      lda	#>(r_room_color_middle-132+pfres*pfwidth)
   5893  22c7
   5894  22c7		       85 f1		      sta	pfcolortable+1
   5895  22c9
   5896  22c9		       a9 6d		      lda	#<(r_room_color_middle-132+pfres*pfwidth)
   5897  22cb
   5898  22cb		       85 f0		      sta	pfcolortable
   5899  22cd
   5900  22cd				   .L0628		;  goto __BG_Music_Setup_01 bank1
   5901  22cd
   5902  22cd		       85 ee		      sta	temp7
   5903  22cf		       a9 9d		      lda	#>(.__BG_Music_Setup_01-1)
   5904  22d1		       48		      pha
   5905  22d2		       a9 ed		      lda	#<(.__BG_Music_Setup_01-1)
   5906  22d4		       48		      pha
   5907  22d5		       a5 ee		      lda	temp7
   5908  22d7		       48		      pha
   5909  22d8		       8a		      txa
   5910  22d9		       48		      pha
   5911  22da		       a2 01		      ldx	#1
   5912  22dc		       4c e8 ff 	      jmp	BS_jsr
   5913  22df				   .
   5914  22df							; 
   5915  22df
   5916  22df				   .L0629		;  asm
   5917  22df
------- FILE titlescreen/asm/titlescreen.asm LEVEL 2 PASS 3
      0  22df					      include	"titlescreen/asm/titlescreen.asm"
      1  22df
------- FILE titlescreen/asm/layoutmacros.asm LEVEL 3 PASS 3
      0  22df					      include	"titlescreen/asm/layoutmacros.asm"
      1  22df
      2  22df							; the macro's used in the "titlescreen_layout.asm" file
      3  22df
      4  22df					      MAC	draw_96x2_1
      5  22df				   mk_96x2_1_on =	1
      6  22df					      jsr	draw_bmp_96x2_1
      7  22df					      ENDM
      8  22df
      9  22df					      MAC	draw_96x2_2
     10  22df				   mk_96x2_2_on =	1
     11  22df					      jsr	draw_bmp_96x2_2
     12  22df					      ENDM
     13  22df
     14  22df					      MAC	draw_96x2_3
     15  22df				   mk_96x2_3_on =	1
     16  22df					      jsr	draw_bmp_96x2_3
     17  22df					      ENDM
     18  22df
     19  22df					      MAC	draw_96x2_4
     20  22df				   mk_96x2_4_on =	1
     21  22df					      jsr	draw_bmp_96x2_4
     22  22df					      ENDM
     23  22df
     24  22df					      MAC	draw_96x2_5
     25  22df				   mk_96x2_5_on =	1
     26  22df					      jsr	draw_bmp_96x2_5
     27  22df					      ENDM
     28  22df
     29  22df					      MAC	draw_96x2_6
     30  22df				   mk_96x2_6_on =	1
     31  22df					      jsr	draw_bmp_96x2_6
     32  22df					      ENDM
     33  22df
     34  22df					      MAC	draw_96x2_7
     35  22df				   mk_96x2_7_on =	1
     36  22df					      jsr	draw_bmp_96x2_7
     37  22df					      ENDM
     38  22df
     39  22df					      MAC	draw_96x2_8
     40  22df				   mk_96x2_8_on =	1
     41  22df					      jsr	draw_bmp_96x2_8
     42  22df					      ENDM
     43  22df
     44  22df					      MAC	draw_48x1_1
     45  22df				   mk_48x1_X_on =	1
     46  22df				   mk_48x1_1_on =	1
     47  22df					      jsr	draw_bmp_48x1_1
     48  22df					      ENDM
     49  22df
     50  22df					      MAC	draw_48x1_2
     51  22df				   mk_48x1_X_on =	1
     52  22df				   mk_48x1_2_on =	1
     53  22df					      jsr	draw_bmp_48x1_2
     54  22df					      ENDM
     55  22df
     56  22df					      MAC	draw_48x1_3
     57  22df				   mk_48x1_X_on =	1
     58  22df				   mk_48x1_3_on =	1
     59  22df					      jsr	draw_bmp_48x1_3
     60  22df					      ENDM
     61  22df
     62  22df					      MAC	draw_48x1_4
     63  22df				   mk_48x1_X_on =	1
     64  22df				   mk_48x1_4_on =	1
     65  22df					      jsr	draw_bmp_48x1_4
     66  22df					      ENDM
     67  22df
     68  22df					      MAC	draw_48x1_5
     69  22df				   mk_48x1_X_on =	1
     70  22df				   mk_48x1_5_on =	1
     71  22df					      jsr	draw_bmp_48x1_5
     72  22df					      ENDM
     73  22df
     74  22df					      MAC	draw_48x1_6
     75  22df				   mk_48x1_X_on =	1
     76  22df				   mk_48x1_6_on =	1
     77  22df					      jsr	draw_bmp_48x1_6
     78  22df					      ENDM
     79  22df
     80  22df					      MAC	draw_48x1_7
     81  22df				   mk_48x1_X_on =	1
     82  22df				   mk_48x1_7_on =	1
     83  22df					      jsr	draw_bmp_48x1_7
     84  22df					      ENDM
     85  22df
     86  22df					      MAC	draw_48x1_8
     87  22df				   mk_48x1_X_on =	1
     88  22df				   mk_48x1_8_on =	1
     89  22df					      jsr	draw_bmp_48x1_8
     90  22df					      ENDM
     91  22df
     92  22df
     93  22df					      MAC	draw_48x2_1
     94  22df				   mk_48x2_X_on =	1
     95  22df				   mk_48x2_1_on =	1
     96  22df					      jsr	draw_bmp_48x2_1
     97  22df					      ENDM
     98  22df
     99  22df					      MAC	draw_48x2_2
    100  22df				   mk_48x2_X_on =	1
    101  22df				   mk_48x2_2_on =	1
    102  22df					      jsr	draw_bmp_48x2_2
    103  22df					      ENDM
    104  22df
    105  22df					      MAC	draw_48x2_3
    106  22df				   mk_48x2_X_on =	1
    107  22df				   mk_48x2_3_on =	1
    108  22df					      jsr	draw_bmp_48x2_3
    109  22df					      ENDM
    110  22df
    111  22df					      MAC	draw_48x2_4
    112  22df				   mk_48x2_X_on =	1
    113  22df				   mk_48x2_4_on =	1
    114  22df					      jsr	draw_bmp_48x2_4
    115  22df					      ENDM
    116  22df
    117  22df					      MAC	draw_48x2_5
    118  22df				   mk_48x2_X_on =	1
    119  22df				   mk_48x2_5_on =	1
    120  22df					      jsr	draw_bmp_48x2_5
    121  22df					      ENDM
    122  22df
    123  22df					      MAC	draw_48x2_6
    124  22df				   mk_48x2_X_on =	1
    125  22df				   mk_48x2_6_on =	1
    126  22df					      jsr	draw_bmp_48x2_6
    127  22df					      ENDM
    128  22df
    129  22df					      MAC	draw_48x2_7
    130  22df				   mk_48x2_X_on =	1
    131  22df				   mk_48x2_7_on =	1
    132  22df					      jsr	draw_bmp_48x2_7
    133  22df					      ENDM
    134  22df
    135  22df					      MAC	draw_48x2_8
    136  22df				   mk_48x2_X_on =	1
    137  22df				   mk_48x2_8_on =	1
    138  22df					      jsr	draw_bmp_48x2_8
    139  22df					      ENDM
    140  22df
    141  22df					      MAC	draw_player
    142  22df				   mk_player_on =	1
    143  22df					      jsr	draw_player_display
    144  22df					      ENDM
    145  22df
    146  22df					      MAC	draw_score
    147  22df				   mk_score_on =	1
    148  22df				   mk_48x1_X_on =	1
    149  22df					      jsr	draw_score_display
    150  22df					      ENDM
    151  22df
    152  22df					      MAC	draw_gameselect
    153  22df				   mk_gameselect_on =	1
    154  22df				   mk_48x1_X_on =	1
    155  22df					      jsr	draw_gameselect_display
    156  22df					      ENDM
    157  22df
    158  22df					      MAC	draw_space
    159  22df					      ldy	#{1}
    160  22df				   .loop
    161  22df					      sta	WSYNC
    162  22df					      dey
    163  22df					      bne	.loop
    164  22df					      ENDM
    165  22df
------- FILE titlescreen/asm/titlescreen.asm
------- FILE titlescreen/asm/dpcfix.asm LEVEL 3 PASS 3
      0  22df					      include	"titlescreen/asm/dpcfix.asm"
      1  22df							; reassign variables that DPC+ doesn't have
      2  22df
      3  22df				  -	      ifnconst	aux2
      4  22df				  -aux2       =	player2x
      5  22df					      endif
      6  22df				  -	      ifnconst	aux4
      7  22df				  -aux4       =	player4x
      8  22df					      endif
      9  22df				  -	      ifnconst	aux5
     10  22df				  -aux5       =	player5x
     11  22df					      endif
     12  22df				  -	      ifnconst	aux6
     13  22df				  -aux6       =	player6x
     14  22df					      endif
     15  22df
     16  22df				  -	      ifnconst	player0pointer
     17  22df				  -player0pointer =	player2y
     18  22df					      endif
     19  22df				  -	      ifnconst	player1pointer
     20  22df				  -player1pointer =	player2height	; to player3height
     21  22df					      endif
     22  22df				  -	      ifnconst	player1color
     23  22df				  -player1color =	player4height	; to player5height
     24  22df					      endif
     25  22df				  -	      ifnconst	scorepointers
     26  22df				  -scorepointers =	player6height	; to NUSIZ8
     27  22df					      endif
------- FILE titlescreen/asm/titlescreen.asm
------- FILE titlescreen/titlescreen_layout.asm LEVEL 3 PASS 3
      0  22df					      include	"titlescreen/titlescreen_layout.asm"
      1  22df
      2  22df							; To use a minikernel, just list it below. They'll be drawn on the screen in
      3  22df							; in the order they were listed.
      4  22df							;
      5  22df							; If a minikernel isn't listed, it won't be compiled into your program, and
      6  22df							; it won't use any rom space.
      7  22df
      8  22df					      MAC	titlescreenlayout
      9  22df					      draw_96x2_1
     10  22df					      draw_gameselect
     11  22df					      draw_48x2_1
     12  22df					      draw_score
     13  22df					      ENDM
     14  22df
     15  22df							; minikernel choices are:
     16  22df							;
     17  22df							; draw_48x1_1, draw_48x1_2, draw_48x1_3
     18  22df							;	The first, second, and third 48-wide single-line bitmap minikernels
     19  22df							;
     20  22df							; draw_48x2_1, draw_48x2_2, draw_48x2_3
     21  22df							;	The first, second, and third 48-wide double-line bitmap minikernels
     22  22df							;
     23  22df							; draw_96x2_1, draw_96x2_2, draw_96x2_3
     24  22df							;	The first, second, and third 96-wide double-line bitmap minikernels
     25  22df							;
     26  22df							; draw_gameselect
     27  22df							;	The game selection display minikernel
     28  22df							;
     29  22df							; draw_score
     30  22df							;	A minikernel that draws the score
     31  22df							;
     32  22df							; draw_space 10
     33  22df							;	A minikernel used to add blank space between other minikernels
------- FILE titlescreen/asm/titlescreen.asm
      5  22df
      6  22df				   .titledrawscreen
      7  22df				   title_eat_overscan
      8  22df							;bB runs in overscan. Wait for the overscan to run out...
      9  22df		       18		      clc
     10  22e0		       ad 84 02 	      lda	INTIM
     11  22e3		       30 fa		      bmi	title_eat_overscan
     12  22e5		       4c e8 b2 	      jmp	title_do_vertical_sync
     13  22e8
     14  22e8				   title_do_vertical_sync
     15  22e8		       a9 02		      lda	#2
     16  22ea		       85 02		      sta	WSYNC	;one line with VSYNC
     17  22ec		       85 00		      sta	VSYNC	;enable VSYNC
     18  22ee		       85 02		      sta	WSYNC	;one line with VSYNC
     19  22f0		       85 02		      sta	WSYNC	;one line with VSYNC
     20  22f2		       a9 00		      lda	#0
     21  22f4		       85 02		      sta	WSYNC	;one line with VSYNC
     22  22f6		       85 00		      sta	VSYNC	;turn off VSYNC
     23  22f8
     24  22f8							;lda #42+128
     25  22f8					      ifnconst	vblank_time
     26  22f8		       a9 aa		      lda	#42+128
     27  22fa				  -	      else
     28  22fa				  -	      lda	#vblank_time+128
     29  22fa					      endif
     30  22fa
     31  22fa		       8d 96 02 	      sta	TIM64T
     32  22fd
     33  22fd		       00 82	   titleframe =	missile0x
     34  22fd		       e6 82		      inc	titleframe	; increment the frame counter
     35  22ff
     36  22ff				  -	      ifconst	.title_vblank
     37  22ff				  -	      jsr	.title_vblank
     38  22ff					      endif
     39  22ff
     40  22ff				   title_vblank_loop
     41  22ff		       ad 84 02 	      lda	INTIM
     42  2302		       30 fb		      bmi	title_vblank_loop
     43  2304		       a9 00		      lda	#0
     44  2306		       85 02		      sta	WSYNC
     45  2308		       85 01		      sta	VBLANK
     46  230a		       85 1d		      sta	ENAM0
     47  230c		       85 1f		      sta	ENABL
     48  230e
     49  230e				   title_playfield
     50  230e
     51  230e							; ======== BEGIN of the custom kernel!!!!! All of the work is done in the playfield.
     52  230e
     53  230e		       a9 e6		      lda	#230
     54  2310		       8d 96 02 	      sta	TIM64T
     55  2313
     56  2313		       a9 01		      lda	#1
     57  2315		       85 0a		      sta	CTRLPF
     58  2317		       18		      clc
     59  2318
     60  2318		       a9 00		      lda	#0
     61  231a		       85 0b		      sta	REFP0
     62  231c		       85 0c		      sta	REFP1
     63  231e		       85 02		      sta	WSYNC
     64  2320		       ad 58 b3 	      lda	titlescreencolor
     65  2323		       85 09		      sta	COLUBK
     66  2325
      0  2325					      titlescreenlayout
      0  2325					      draw_96x2_1
      1  2325		       00 01	   mk_96x2_1_on =	1
      2  2325		       20 f1 b4 	      jsr	draw_bmp_96x2_1
      0  2328					      draw_gameselect
      1  2328		       00 01	   mk_gameselect_on =	1
      2  2328		       00 01	   mk_48x1_X_on =	1
      3  2328		       20 53 b7 	      jsr	draw_gameselect_display
      0  232b					      draw_48x2_1
      1  232b		       00 01	   mk_48x2_X_on =	1
      2  232b		       00 01	   mk_48x2_1_on =	1
      3  232b		       20 5d b3 	      jsr	draw_bmp_48x2_1
      0  232e					      draw_score
      1  232e		       00 01	   mk_score_on =	1
      2  232e		       00 01	   mk_48x1_X_on =	1
      3  232e		       20 71 b6 	      jsr	draw_score_display
     68  2331
     69  2331		       4c c9 b7 	      jmp	PFWAIT	; kernel is done. Finish off the screen
     70  2334
------- FILE titlescreen/asm/position48.asm LEVEL 3 PASS 3
      0  2334					      include	"titlescreen/asm/position48.asm"
      1  2334
      2  2334				   position48
      3  2334
      4  2334							;postion P0 and P1
      5  2334
      6  2334		       85 02		      sta	WSYNC
      7  2336
      8  2336		       a9 90		      lda	#$90	;2
      9  2338		       85 20		      sta	HMP0	;3
     10  233a		       a9 a0		      lda	#$A0	;2
     11  233c		       85 21		      sta	HMP1	;3
     12  233e
     13  233e		       e6 9c		      inc	temp1
     14  2340		       c6 9c		      dec	temp1
     15  2342		       e6 9c		      inc	temp1
     16  2344		       c6 9c		      dec	temp1
     17  2346		       e6 9c		      inc	temp1
      0  2348					      sleep	2
      1  2348				   .CYCLES    SET	2
      2  2348
      3  2348				  -	      IF	.CYCLES < 2
      4  2348				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  2348				  -	      ERR
      6  2348					      ENDIF
      7  2348
      8  2348				  -	      IF	.CYCLES & 1
      9  2348				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  2348				  -	      nop	0
     11  2348				  -	      ELSE
     12  2348				  -	      bit	VSYNC
     13  2348				  -	      ENDIF
     14  2348				  -.CYCLES    SET	.CYCLES - 3
     15  2348					      ENDIF
     16  2348
     17  2348					      REPEAT	.CYCLES / 2
     18  2348		       ea		      nop
     19  2349					      REPEND
     19  2349		       85 10		      sta	RESP0	;  +3
     20  234b		       85 11		      sta	RESP1	;  +3
     21  234d		       c6 9c		      dec	temp1	;  +5
     22  234f		       e6 9c		      inc	temp1	;  +5
     23  2351		       c6 9c		      dec	temp1	;  +5
     24  2353		       e6 9c		      inc	temp1	;  +5
     25  2355		       c6 9c		      dec	temp1	;  +5
      0  2357					      sleep	3
      1  2357				   .CYCLES    SET	3
      2  2357
      3  2357				  -	      IF	.CYCLES < 2
      4  2357				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  2357				  -	      ERR
      6  2357					      ENDIF
      7  2357
      8  2357					      IF	.CYCLES & 1
      9  2357					      IFNCONST	NO_ILLEGAL_OPCODES
     10  2357		       04 00		      nop	0
     11  2359				  -	      ELSE
     12  2359				  -	      bit	VSYNC
     13  2359					      ENDIF
     14  2359				   .CYCLES    SET	.CYCLES - 3
     15  2359					      ENDIF
     16  2359
     17  2359				  -	      REPEAT	.CYCLES / 2
     18  2359				  -	      nop
     19  2359					      REPEND
     27  2359		       85 2a		      sta	HMOVE	; +76
     28  235b		       60		      RTS
     29  235c
------- FILE titlescreen/asm/titlescreen.asm
------- FILE titlescreen/titlescreen_color.asm LEVEL 3 PASS 3
      0  235c					      include	"titlescreen/titlescreen_color.asm"
      1  235c
      2  235c							; This is where the titlescreen background color gets set.
      3  235c							; You can also do a "dim titlescreencolor=[letter]" in bB
      4  235c							; if you want to change the color on the fly.
      5  235c
      6  235c				  -	      ifnconst	titlescreencolor
      7  235c				  -titlescreencolor
      8  235c					      endif
      9  235c		       00		      .byte.b	$00
     10  235d
------- FILE titlescreen/asm/titlescreen.asm
     73  235d
     74  235d				  -	      ifconst	mk_48x1_1_on
     75  235d				  -	      include	"titlescreen/asm/48x1_1_kernel.asm"
     76  235d					      endif		;mk_48x1_1_on
     77  235d
     78  235d				  -	      ifconst	mk_48x1_2_on
     79  235d				  -	      include	"titlescreen/asm/48x1_2_kernel.asm"
     80  235d					      endif		;mk_48x1_2_on
     81  235d
     82  235d				  -	      ifconst	mk_48x1_3_on
     83  235d				  -	      include	"titlescreen/asm/48x1_3_kernel.asm"
     84  235d					      endif		;mk_48x1_3_on
     85  235d
     86  235d				  -	      ifconst	mk_48x1_4_on
     87  235d				  -	      include	"titlescreen/asm/48x1_4_kernel.asm"
     88  235d					      endif		;mk_48x1_4_on
     89  235d
     90  235d				  -	      ifconst	mk_48x1_5_on
     91  235d				  -	      include	"titlescreen/asm/48x1_5_kernel.asm"
     92  235d					      endif		;mk_48x1_5_on
     93  235d
     94  235d				  -	      ifconst	mk_48x1_6_on
     95  235d				  -	      include	"titlescreen/asm/48x1_6_kernel.asm"
     96  235d					      endif		;mk_48x1_6_on
     97  235d
     98  235d				  -	      ifconst	mk_48x1_7_on
     99  235d				  -	      include	"titlescreen/asm/48x1_7_kernel.asm"
    100  235d					      endif		;mk_48x1_7_on
    101  235d
    102  235d				  -	      ifconst	mk_48x1_8_on
    103  235d				  -	      include	"titlescreen/asm/48x1_8_kernel.asm"
    104  235d					      endif		;mk_48x1_8_on
    105  235d
    106  235d					      ifconst	mk_48x2_1_on
------- FILE titlescreen/asm/48x2_1_kernel.asm LEVEL 3 PASS 3
      0  235d					      include	"titlescreen/asm/48x2_1_kernel.asm"
      1  235d
      2  235d				   draw_bmp_48x2_1
      3  235d
      4  235d		       a9 de		      lda	#<(bmp_48x2_1_colors-1+bmp_48x2_1_height-bmp_48x2_1_window)
      5  235f				  -	      ifconst	bmp_48x2_1_index
      6  235f				  -	      sec
      7  235f				  -	      sbc	bmp_48x2_1_index
      8  235f					      endif
      9  235f		       85 f4		      sta	aux5+0
     10  2361		       a9 b7		      lda	#>(bmp_48x2_1_colors-1+bmp_48x2_1_height-bmp_48x2_1_window)
     11  2363		       85 f5		      sta	aux5+1
     12  2365
     13  2365		       a0 0b		      ldy	#11
     14  2367				   bmp_48x2_1_pointersetup
     15  2367		       b9 9c b3 	      lda	bmp_48x2_1_values,y
     16  236a		       99 96 00 	      sta	scorepointers,y
     17  236d		       88		      dey
     18  236e		       b9 9c b3 	      lda	bmp_48x2_1_values,y
     19  2371				  -	      ifconst	bmp_48x2_1_index
     20  2371				  -	      sec
     21  2371				  -	      sbc	bmp_48x2_1_index
     22  2371					      endif
     23  2371		       99 96 00 	      sta	scorepointers,y
     24  2374		       88		      dey
     25  2375		       10 f0		      bpl	bmp_48x2_1_pointersetup
     26  2377
     27  2377
     28  2377		       a0 04		      ldy	#(bmp_48x2_1_window-1)
     29  2379		       84 f1		      sty	aux2
     30  237b
     31  237b		       c8		      iny
     32  237c		       b1 f4		      lda	(aux5),y
     33  237e		       88		      dey
     34  237f
     35  237f		       85 06		      sta	COLUP0	;3
     36  2381		       85 07		      sta	COLUP1	;3
     37  2383		       85 2b		      sta	HMCLR	;3
     38  2385
     39  2385		       ad 58 b3 	      lda	titlescreencolor
     40  2388		       85 08		      sta	COLUPF
     41  238a
     42  238a					      ifconst	bmp_48x2_1_background
     43  238a		       ad e6 b7 	      lda	bmp_48x2_1_background
     44  238d				  -	      else
     45  238d				  -	      lda	titlescreencolor
     46  238d					      endif
     47  238d		       85 f3		      sta	aux4
     48  238f					      ifconst	bmp_48x2_1_PF1
     49  238f		       ad e4 b7 	      lda	bmp_48x2_1_PF1
     50  2392				  -	      else
     51  2392				  -	      lda	#0
     52  2392				  -	      nop
     53  2392					      endif
     54  2392		       85 0e		      sta	PF1
     55  2394
     56  2394					      ifconst	bmp_48x2_1_PF2
     57  2394		       ad e5 b7 	      lda	bmp_48x2_1_PF2
     58  2397				  -	      else
     59  2397				  -	      lda	#0
     60  2397				  -	      nop
     61  2397					      endif
     62  2397		       85 0f		      sta	PF2
     63  2399
     64  2399		       4c 46 b4 	      jmp	draw_bmp_48x2_X
     65  239c
     66  239c				   bmp_48x2_1_values
     67  239c		       e7 b7		      .word.w	(bmp_48x2_1_00+#bmp_48x2_1_height-#bmp_48x2_1_window)
     68  239e		       ed b7		      .word.w	(bmp_48x2_1_01+#bmp_48x2_1_height-#bmp_48x2_1_window)
     69  23a0		       f3 b7		      .word.w	(bmp_48x2_1_02+#bmp_48x2_1_height-#bmp_48x2_1_window)
     70  23a2		       f9 b7		      .word.w	(bmp_48x2_1_03+#bmp_48x2_1_height-#bmp_48x2_1_window)
     71  23a4		       00 b8		      .word.w	(bmp_48x2_1_04+#bmp_48x2_1_height-#bmp_48x2_1_window)
     72  23a6		       06 b8		      .word.w	(bmp_48x2_1_05+#bmp_48x2_1_height-#bmp_48x2_1_window)
     73  23a8
------- FILE titlescreen/asm/titlescreen.asm
    108  23a8					      endif		;mk_48x2_1_on
    109  23a8
    110  23a8				  -	      ifconst	mk_48x2_2_on
    111  23a8				  -	      include	"titlescreen/asm/48x2_2_kernel.asm"
    112  23a8					      endif		;mk_48x2_2_on
    113  23a8
    114  23a8				  -	      ifconst	mk_48x2_3_on
    115  23a8				  -	      include	"titlescreen/asm/48x2_3_kernel.asm"
    116  23a8					      endif		;mk_48x2_3_on
    117  23a8
    118  23a8				  -	      ifconst	mk_48x2_4_on
    119  23a8				  -	      include	"titlescreen/asm/48x2_4_kernel.asm"
    120  23a8					      endif		;mk_48x2_4_on
    121  23a8
    122  23a8				  -	      ifconst	mk_48x2_5_on
    123  23a8				  -	      include	"titlescreen/asm/48x2_5_kernel.asm"
    124  23a8					      endif		;mk_48x2_5_on
    125  23a8
    126  23a8				  -	      ifconst	mk_48x2_6_on
    127  23a8				  -	      include	"titlescreen/asm/48x2_6_kernel.asm"
    128  23a8					      endif		;mk_48x2_6_on
    129  23a8
    130  23a8				  -	      ifconst	mk_48x2_7_on
    131  23a8				  -	      include	"titlescreen/asm/48x2_7_kernel.asm"
    132  23a8					      endif		;mk_48x2_7_on
    133  23a8
    134  23a8				  -	      ifconst	mk_48x2_8_on
    135  23a8				  -	      include	"titlescreen/asm/48x2_8_kernel.asm"
    136  23a8					      endif		;mk_48x2_8_on
    137  23a8
    138  23a8					      ifconst	mk_48x1_X_on
------- FILE titlescreen/asm/48x1_X_kernel.asm LEVEL 3 PASS 3
      0  23a8					      include	"titlescreen/asm/48x1_X_kernel.asm"
      1  23a8				   draw_bmp_48x1_X
      2  23a8
      3  23a8		       a9 03		      lda	#3
      4  23aa		       85 04		      sta	NUSIZ0	;3=Player and Missile are drawn twice 32 clocks apart
      5  23ac		       85 05		      sta	NUSIZ1	;3=Player and Missile are drawn twice 32 clocks apart
      6  23ae
      7  23ae		       ba		      tsx
      8  23af		       86 f6		      stx	stack1	;save the stack pointer
      9  23b1
     10  23b1		       20 34 b3 	      jsr	position48
     11  23b4
     12  23b4		       a9 03		      lda	#3	;2
     13  23b6		       85 25		      sta	VDELP0	;3
     14  23b8		       85 26		      sta	VDELP1	;3
     15  23ba
     16  23ba		       a9 01		      lda	#1	;2
     17  23bc		       85 0a		      sta	CTRLPF	;3
     18  23be
     19  23be							;enough cycles have passed for the HMOV, so we can clear HMCLR
     20  23be		       85 2b		      sta	HMCLR
     21  23c0
     22  23c0		       85 02		      sta	WSYNC
     23  23c2
     24  23c2		       e6 9c		      inc	temp1	;5
     25  23c4		       c6 9c		      dec	temp1	;5
     26  23c6		       e6 9c		      inc	temp1	;5
     27  23c8		       c6 9c		      dec	temp1	;5
     28  23ca		       e6 9c		      inc	temp1	;5
     29  23cc		       c6 9c		      dec	temp1	;5
     30  23ce		       e6 9c		      inc	temp1	;5
     31  23d0		       c6 9c		      dec	temp1	;5
     32  23d2		       e6 9c		      inc	temp1	;5
     33  23d4		       c6 9c		      dec	temp1	;5
     34  23d6
      0  23d6					      sleep	5
      1  23d6				   .CYCLES    SET	5
      2  23d6
      3  23d6				  -	      IF	.CYCLES < 2
      4  23d6				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  23d6				  -	      ERR
      6  23d6					      ENDIF
      7  23d6
      8  23d6					      IF	.CYCLES & 1
      9  23d6					      IFNCONST	NO_ILLEGAL_OPCODES
     10  23d6		       04 00		      nop	0
     11  23d8				  -	      ELSE
     12  23d8				  -	      bit	VSYNC
     13  23d8					      ENDIF
     14  23d8				   .CYCLES    SET	.CYCLES - 3
     15  23d8					      ENDIF
     16  23d8
     17  23d8					      REPEAT	.CYCLES / 2
     18  23d8		       ea		      nop
     19  23d9					      REPEND
     36  23d9
     37  23d9		       c8		      iny
     38  23da
     39  23da		       4c 00 b4 	      jmp	pf48x1_X_loop_entry
     40  23dd
     41  23dd					      if	>. != >[.+$2a]
     42  2400		       00 00 00 00*	      align	256
     43  2400					      endif
     44  2400
     45  2400				   pf48x1_X_loop_entry
     46  2400				   pf48x1_X_loop
     47  2400		       88		      dey		;2
     48  2401		       84 f1		      sty	aux2	;3
     49  2403		       b1 96		      lda	(scorepointers+0),y	;5
     50  2405		       85 1b		      sta	GRP0	;3
     51  2407
     52  2407		       b1 98		      lda	(scorepointers+2),y	;5
     53  2409		       85 1c		      sta	GRP1	;3
     54  240b		       b1 9a		      lda	(scorepointers+4),y	;5
     55  240d		       85 1b		      sta	GRP0	;3
     56  240f
      0  240f					      sleep	2	; I could make this indirect, if we want to burn more rom
      1  240f				   .CYCLES    SET	2
      2  240f
      3  240f				  -	      IF	.CYCLES < 2
      4  240f				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  240f				  -	      ERR
      6  240f					      ENDIF
      7  240f
      8  240f				  -	      IF	.CYCLES & 1
      9  240f				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  240f				  -	      nop	0
     11  240f				  -	      ELSE
     12  240f				  -	      bit	VSYNC
     13  240f				  -	      ENDIF
     14  240f				  -.CYCLES    SET	.CYCLES - 3
     15  240f					      ENDIF
     16  240f
     17  240f					      REPEAT	.CYCLES / 2
     18  240f		       ea		      nop
     19  2410					      REPEND
     58  2410		       a5 f3		      lda	aux4	;3
     59  2412		       85 08		      sta	COLUPF	;3 this is a big fat waste...
     60  2414
     61  2414		       b3 a0		      lax	(scorepointers+10),y	;5
     62  2416		       b1 9e		      lda	(scorepointers+8),y	;5
     63  2418		       85 f7		      sta	stack2	;3
     64  241a		       b1 9c		      lda	(scorepointers+6),y	;5
     65  241c		       a4 f7		      ldy	stack2	;3
     66  241e
     67  241e		       85 1c		      sta	GRP1	;3
     68  2420		       84 1b		      sty	GRP0	;3
     69  2422		       86 1c		      stx	GRP1	;3
     70  2424		       84 1b		      sty	GRP0	;3
     71  2426
     72  2426		       a4 f1		      ldy	aux2	;3
     73  2428		       d0 d6		      bne	pf48x1_X_loop	;2/3
     74  242a
     75  242a				   pf48x1_X_codeend
     76  242a							;echo "critical code in 48x1 is ",(pf48x1_X_codeend-pf48x1_X_loop), " bytes long."
     77  242a
     78  242a		       a9 00		      lda	#0
     79  242c		       85 1b		      sta	GRP0
     80  242e		       85 1c		      sta	GRP1
     81  2430		       85 1b		      sta	GRP0
     82  2432		       85 1c		      sta	GRP1
     83  2434		       85 1f		      sta	ENABL
     84  2436		       85 1d		      sta	ENAM0
     85  2438		       85 25		      sta	VDELP0
     86  243a		       85 26		      sta	VDELP1
     87  243c		       85 0d		      sta	PF0
     88  243e		       85 0e		      sta	PF1
     89  2440		       85 0f		      sta	PF2
     90  2442
     91  2442		       a6 f6		      ldx	stack1	;restore the stack pointer
     92  2444		       9a		      txs
     93  2445		       60		      rts
------- FILE titlescreen/asm/titlescreen.asm
    140  2446					      endif		;mk_48x1_X_on
    141  2446
    142  2446					      ifconst	mk_48x2_X_on
------- FILE titlescreen/asm/48x2_X_kernel.asm LEVEL 3 PASS 3
      0  2446					      include	"titlescreen/asm/48x2_X_kernel.asm"
      1  2446				   draw_bmp_48x2_X
      2  2446
      3  2446		       a9 00		      lda	#0
      4  2448		       85 1b		      sta	GRP0
      5  244a		       85 1c		      sta	GRP1
      6  244c
      7  244c		       a9 03		      lda	#3
      8  244e		       85 04		      sta	NUSIZ0	;3=Player and Missile are drawn twice 32 clocks apart
      9  2450		       85 05		      sta	NUSIZ1	;3=Player and Missile are drawn twice 32 clocks apart
     10  2452
     11  2452		       ba		      tsx
     12  2453		       86 f6		      stx	stack1	;save the stack pointer
     13  2455
     14  2455		       20 34 b3 	      jsr	position48
     15  2458
     16  2458		       a9 03		      lda	#3	;2
     17  245a		       85 25		      sta	VDELP0	;3
     18  245c		       85 26		      sta	VDELP1	;3
     19  245e
     20  245e		       a9 01		      lda	#1	;2
     21  2460		       85 0a		      sta	CTRLPF	;3
     22  2462
     23  2462							;enough cycles have passed for the HMOV, so we can clear HMCLR
     24  2462		       85 2b		      sta	HMCLR
     25  2464		       85 02		      sta	WSYNC
     26  2466
     27  2466
     28  2466							;sleep (63)		;63
     29  2466		       e6 9c		      inc	temp1
     30  2468		       c6 9c		      dec	temp1
     31  246a		       e6 9c		      inc	temp1
     32  246c		       c6 9c		      dec	temp1
     33  246e		       e6 9c		      inc	temp1
     34  2470		       c6 9c		      dec	temp1
     35  2472		       e6 9c		      inc	temp1
     36  2474		       c6 9c		      dec	temp1
     37  2476		       e6 9c		      inc	temp1
     38  2478		       c6 9c		      dec	temp1
     39  247a		       e6 9c		      inc	temp1
     40  247c		       c6 9c		      dec	temp1
      0  247e					      sleep	3
      1  247e				   .CYCLES    SET	3
      2  247e
      3  247e				  -	      IF	.CYCLES < 2
      4  247e				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  247e				  -	      ERR
      6  247e					      ENDIF
      7  247e
      8  247e					      IF	.CYCLES & 1
      9  247e					      IFNCONST	NO_ILLEGAL_OPCODES
     10  247e		       04 00		      nop	0
     11  2480				  -	      ELSE
     12  2480				  -	      bit	VSYNC
     13  2480					      ENDIF
     14  2480				   .CYCLES    SET	.CYCLES - 3
     15  2480					      ENDIF
     16  2480
     17  2480				  -	      REPEAT	.CYCLES / 2
     18  2480				  -	      nop
     19  2480					      REPEND
     42  2480
     43  2480		       a5 f3		      lda	aux4	;3
     44  2482		       85 08		      sta	COLUPF	;3
     45  2484
     46  2484		       4c 87 b4 	      jmp	pf48x2_X_loop	;3
     47  2487
     48  2487				  -	      if	>. != >[.+$52]
     49  2487				  -	      align	256
     50  2487					      endif
     51  2487
     52  2487				   pf48x2_X_loop
     53  2487
     54  2487		       b1 96		      lda	(scorepointers+0),y	;5
     55  2489		       85 1b		      sta	GRP0	;3
     56  248b		       b1 98		      lda	(scorepointers+2),y	;5
     57  248d		       85 1c		      sta	GRP1	;3
     58  248f		       b1 9a		      lda	(scorepointers+4),y	;5
     59  2491		       85 1b		      sta	GRP0	;3
     60  2493
     61  2493		       b3 a0		      lax	(scorepointers+10),y	;5
     62  2495		       b1 9e		      lda	(scorepointers+8),y	;5
     63  2497		       85 f7		      sta	stack2	;3
     64  2499		       b1 9c		      lda	(scorepointers+6),y	;5
     65  249b		       a4 f7		      ldy	stack2	;3
     66  249d
     67  249d		       85 1c		      sta	GRP1	;3
     68  249f		       84 1b		      sty	GRP0	;3
     69  24a1		       86 1c		      stx	GRP1	;3
     70  24a3		       84 1b		      sty	GRP0	;3
     71  24a5
     72  24a5		       a4 f1		      ldy	aux2	;3
     73  24a7
     74  24a7		       b1 f4		      lda	(aux5),y	;5
     75  24a9		       85 91		      sta	missile0y	;3
     76  24ab
      0  24ab					      sleep	3
      1  24ab				   .CYCLES    SET	3
      2  24ab
      3  24ab				  -	      IF	.CYCLES < 2
      4  24ab				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  24ab				  -	      ERR
      6  24ab					      ENDIF
      7  24ab
      8  24ab					      IF	.CYCLES & 1
      9  24ab					      IFNCONST	NO_ILLEGAL_OPCODES
     10  24ab		       04 00		      nop	0
     11  24ad				  -	      ELSE
     12  24ad				  -	      bit	VSYNC
     13  24ad					      ENDIF
     14  24ad				   .CYCLES    SET	.CYCLES - 3
     15  24ad					      ENDIF
     16  24ad
     17  24ad				  -	      REPEAT	.CYCLES / 2
     18  24ad				  -	      nop
     19  24ad					      REPEND
     78  24ad
     79  24ad		       c6 f1		      dec	aux2	;5
     80  24af
     81  24af
     82  24af		       b1 96		      lda	(scorepointers+0),y	;5
     83  24b1		       85 1b		      sta	GRP0	;3
     84  24b3		       b1 98		      lda	(scorepointers+2),y	;5
     85  24b5		       85 1c		      sta	GRP1	;3
     86  24b7		       b1 9a		      lda	(scorepointers+4),y	;5
     87  24b9		       85 1b		      sta	GRP0	;3
     88  24bb
     89  24bb		       b3 a0		      lax	(scorepointers+10),y	;5
     90  24bd		       b1 9e		      lda	(scorepointers+8),y	;5
     91  24bf		       85 f7		      sta	stack2	;3
     92  24c1		       b1 9c		      lda	(scorepointers+6),y	;5
     93  24c3		       a4 f7		      ldy	stack2	;3
     94  24c5
     95  24c5		       85 1c		      sta	GRP1	;3
     96  24c7		       84 1b		      sty	GRP0	;3
     97  24c9		       86 1c		      stx	GRP1	;3
     98  24cb		       84 1b		      sty	GRP0	;3
     99  24cd
      0  24cd					      sleep	4
      1  24cd				   .CYCLES    SET	4
      2  24cd
      3  24cd				  -	      IF	.CYCLES < 2
      4  24cd				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  24cd				  -	      ERR
      6  24cd					      ENDIF
      7  24cd
      8  24cd				  -	      IF	.CYCLES & 1
      9  24cd				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  24cd				  -	      nop	0
     11  24cd				  -	      ELSE
     12  24cd				  -	      bit	VSYNC
     13  24cd				  -	      ENDIF
     14  24cd				  -.CYCLES    SET	.CYCLES - 3
     15  24cd					      ENDIF
     16  24cd
     17  24cd					      REPEAT	.CYCLES / 2
     18  24cd		       ea		      nop
     17  24cd					      REPEND
     18  24ce		       ea		      nop
     19  24cf					      REPEND
    101  24cf
    102  24cf		       a5 91		      lda	missile0y
    103  24d1		       85 07		      sta	COLUP1
    104  24d3		       85 06		      sta	COLUP0
    105  24d5
    106  24d5		       a4 f1		      ldy	aux2	;3
    107  24d7		       10 ae		      bpl	pf48x2_X_loop	;2/3
    108  24d9
    109  24d9
    110  24d9				   pf48x2_X_codeend
    111  24d9							;echo "critical code in 48x2 is ",(pf48x2_X_codeend-pf48x2_X_loop), " bytes long."
    112  24d9
    113  24d9		       a9 00		      lda	#0
    114  24db		       85 1b		      sta	GRP0
    115  24dd		       85 1c		      sta	GRP1
    116  24df		       85 1b		      sta	GRP0
    117  24e1		       85 1c		      sta	GRP1
    118  24e3		       85 25		      sta	VDELP0
    119  24e5		       85 26		      sta	VDELP1
    120  24e7		       85 0d		      sta	PF0
    121  24e9		       85 0e		      sta	PF1
    122  24eb		       85 0f		      sta	PF2
    123  24ed
    124  24ed		       a6 f6		      ldx	stack1	;restore the stack pointer
    125  24ef		       9a		      txs
    126  24f0		       60		      rts
------- FILE titlescreen/asm/titlescreen.asm
    144  24f1					      endif		;mk_48x2_X_on
    145  24f1
    146  24f1
    147  24f1					      ifconst	mk_96x2_1_on
------- FILE titlescreen/asm/96x2_1_kernel.asm LEVEL 3 PASS 3
      0  24f1					      include	"titlescreen/asm/96x2_1_kernel.asm"
      1  24f1				   draw_bmp_96x2_1
      2  24f1
      3  24f1				  -	      ifconst	bmp_96x2_1_index
      4  24f1				  -	      lda	#(bmp_96x2_1_height-1)
      5  24f1				  -	      sec
      6  24f1				  -	      sbc	bmp_96x2_1_index
      7  24f1				  -	      tay
      8  24f1				  -	      sbc	#bmp_96x2_1_window
      9  24f1				  -	      sta	temp1
     10  24f1					      else
     11  24f1		       a0 3b		      ldy	#(bmp_96x2_1_window-1)
     12  24f3		       a9 ff		      lda	#255
     13  24f5		       85 9c		      sta	temp1
     14  24f7					      endif
     15  24f7
     16  24f7		       a9 03		      lda	#3
     17  24f9		       85 04		      sta	NUSIZ0	;3=Player and Missile are drawn twice 32 clocks apart
     18  24fb		       85 05		      sta	NUSIZ1	;3=Player and Missile are drawn twice 32 clocks apart
     19  24fd		       a9 00		      lda	#0
     20  24ff
     21  24ff		       b9 0d b8 	      lda	bmp_96x2_1_colors,y	;4
     22  2502				  -	      ifconst	bmp_96x2_1_fade
     23  2502				  -	      and	bmp_96x2_1_fade
     24  2502					      endif
     25  2502		       85 06		      sta	COLUP0	;3
     26  2504		       85 07		      sta	COLUP1	;3
     27  2506		       85 2b		      sta	HMCLR	;3
     28  2508
     29  2508		       a5 82		      lda	titleframe
     30  250a		       29 01		      and	#1
     31  250c		       f0 03		      beq	jmp_pf96x2_1_frame0
     32  250e		       4c b8 b5 	      jmp	pf96x2_1_frame1
     33  2511				   jmp_pf96x2_1_frame0
     34  2511		       4c 14 b5 	      jmp	pf96x2_1_frame0
     35  2514
     36  2514				   pf96x2_1_frame0
     37  2514							;postion P0 and P1
     38  2514		       85 02		      sta	WSYNC
     39  2516		       a9 e0		      lda	#%11100000
     40  2518		       85 20		      sta	HMP0
     41  251a		       a9 10		      lda	#%00010000
     42  251c		       85 21		      sta	HMP1
     43  251e		       85 02		      sta	WSYNC
      0  2520					      sleep	28
      1  2520				   .CYCLES    SET	28
      2  2520
      3  2520				  -	      IF	.CYCLES < 2
      4  2520				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  2520				  -	      ERR
      6  2520					      ENDIF
      7  2520
      8  2520				  -	      IF	.CYCLES & 1
      9  2520				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  2520				  -	      nop	0
     11  2520				  -	      ELSE
     12  2520				  -	      bit	VSYNC
     13  2520				  -	      ENDIF
     14  2520				  -.CYCLES    SET	.CYCLES - 3
     15  2520					      ENDIF
     16  2520
     17  2520					      REPEAT	.CYCLES / 2
     18  2520		       ea		      nop
     17  2520					      REPEND
     18  2521		       ea		      nop
     17  2521					      REPEND
     18  2522		       ea		      nop
     17  2522					      REPEND
     18  2523		       ea		      nop
     17  2523					      REPEND
     18  2524		       ea		      nop
     17  2524					      REPEND
     18  2525		       ea		      nop
     17  2525					      REPEND
     18  2526		       ea		      nop
     17  2526					      REPEND
     18  2527		       ea		      nop
     17  2527					      REPEND
     18  2528		       ea		      nop
     17  2528					      REPEND
     18  2529		       ea		      nop
     17  2529					      REPEND
     18  252a		       ea		      nop
     17  252a					      REPEND
     18  252b		       ea		      nop
     17  252b					      REPEND
     18  252c		       ea		      nop
     17  252c					      REPEND
     18  252d		       ea		      nop
     19  252e					      REPEND
     45  252e		       85 10		      sta	RESP0
      0  2530					      sleep	14
      1  2530				   .CYCLES    SET	14
      2  2530
      3  2530				  -	      IF	.CYCLES < 2
      4  2530				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  2530				  -	      ERR
      6  2530					      ENDIF
      7  2530
      8  2530				  -	      IF	.CYCLES & 1
      9  2530				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  2530				  -	      nop	0
     11  2530				  -	      ELSE
     12  2530				  -	      bit	VSYNC
     13  2530				  -	      ENDIF
     14  2530				  -.CYCLES    SET	.CYCLES - 3
     15  2530					      ENDIF
     16  2530
     17  2530					      REPEAT	.CYCLES / 2
     18  2530		       ea		      nop
     17  2530					      REPEND
     18  2531		       ea		      nop
     17  2531					      REPEND
     18  2532		       ea		      nop
     17  2532					      REPEND
     18  2533		       ea		      nop
     17  2533					      REPEND
     18  2534		       ea		      nop
     17  2534					      REPEND
     18  2535		       ea		      nop
     17  2535					      REPEND
     18  2536		       ea		      nop
     19  2537					      REPEND
     47  2537		       85 11		      sta	RESP1
     48  2539		       85 02		      sta	WSYNC
     49  253b		       85 2a		      sta	HMOVE
     50  253d
     51  253d		       85 02		      sta	WSYNC
     52  253f		       85 2b		      sta	HMCLR
     53  2541		       85 02		      sta	WSYNC
     54  2543
      0  2543					      sleep	4
      1  2543				   .CYCLES    SET	4
      2  2543
      3  2543				  -	      IF	.CYCLES < 2
      4  2543				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  2543				  -	      ERR
      6  2543					      ENDIF
      7  2543
      8  2543				  -	      IF	.CYCLES & 1
      9  2543				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  2543				  -	      nop	0
     11  2543				  -	      ELSE
     12  2543				  -	      bit	VSYNC
     13  2543				  -	      ENDIF
     14  2543				  -.CYCLES    SET	.CYCLES - 3
     15  2543					      ENDIF
     16  2543
     17  2543					      REPEAT	.CYCLES / 2
     18  2543		       ea		      nop
     17  2543					      REPEND
     18  2544		       ea		      nop
     19  2545					      REPEND
     56  2545		       4c 48 b5 	      jmp	pfline_96x2_1_frame0
     57  2548							;align so our branch doesn't unexpectedly cross a page...
     58  2548				  -	      if	>. != >[.+$70]
     59  2548				  -	      align	256
     60  2548					      endif
     61  2548
     62  2548				   pfline_96x2_1_frame0
     63  2548		       a9 80		      lda	#$80	;2
     64  254a		       85 20		      sta	HMP0	;3
     65  254c		       85 21		      sta	HMP1	;3
     66  254e
     67  254e		       b9 b4 b9 	      lda	bmp_96x2_1_06,y	;4
     68  2551		       85 1c		      sta	GRP1	;3
     69  2553
     70  2553		       b9 49 b8 	      lda	bmp_96x2_1_00,y
     71  2556		       85 1b		      sta	GRP0
     72  2558		       b9 c1 b8 	      lda	bmp_96x2_1_02,y
     73  255b		       85 1b		      sta	GRP0
     74  255d		       b9 3c b9 	      lda	bmp_96x2_1_04,y
     75  2560		       85 1b		      sta	GRP0
     76  2562
      0  2562					      sleep	2
      1  2562				   .CYCLES    SET	2
      2  2562
      3  2562				  -	      IF	.CYCLES < 2
      4  2562				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  2562				  -	      ERR
      6  2562					      ENDIF
      7  2562
      8  2562				  -	      IF	.CYCLES & 1
      9  2562				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  2562				  -	      nop	0
     11  2562				  -	      ELSE
     12  2562				  -	      bit	VSYNC
     13  2562				  -	      ENDIF
     14  2562				  -.CYCLES    SET	.CYCLES - 3
     15  2562					      ENDIF
     16  2562
     17  2562					      REPEAT	.CYCLES / 2
     18  2562		       ea		      nop
     19  2563					      REPEND
     78  2563
     79  2563		       b9 3c ba 	      lda	bmp_96x2_1_08,y
     80  2566		       85 1c		      sta	GRP1
     81  2568		       b9 b4 ba 	      lda	bmp_96x2_1_10,y
     82  256b		       85 1c		      sta	GRP1
     83  256d
     84  256d		       b9 85 b8 	      lda	bmp_96x2_1_01,y
     85  2570		       85 1b		      sta	GRP0
     86  2572
      0  2572					      sleep	8
      1  2572				   .CYCLES    SET	8
      2  2572
      3  2572				  -	      IF	.CYCLES < 2
      4  2572				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  2572				  -	      ERR
      6  2572					      ENDIF
      7  2572
      8  2572				  -	      IF	.CYCLES & 1
      9  2572				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  2572				  -	      nop	0
     11  2572				  -	      ELSE
     12  2572				  -	      bit	VSYNC
     13  2572				  -	      ENDIF
     14  2572				  -.CYCLES    SET	.CYCLES - 3
     15  2572					      ENDIF
     16  2572
     17  2572					      REPEAT	.CYCLES / 2
     18  2572		       ea		      nop
     17  2572					      REPEND
     18  2573		       ea		      nop
     17  2573					      REPEND
     18  2574		       ea		      nop
     17  2574					      REPEND
     18  2575		       ea		      nop
     19  2576					      REPEND
     88  2576
     89  2576							;sta WSYNC	;=0
     90  2576		       85 2a		      sta	HMOVE	;3 - NORMAL HMOVE
     91  2578
     92  2578		       b9 0c b8 	      lda	bmp_96x2_1_colors-1,y	;4 - get the title color early and store it for later
     93  257b				  -	      ifconst	bmp_96x2_1_fade
     94  257b				  -	      and	bmp_96x2_1_fade
     95  257b					      else
      0  257b					      sleep	3
      1  257b				   .CYCLES    SET	3
      2  257b
      3  257b				  -	      IF	.CYCLES < 2
      4  257b				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  257b				  -	      ERR
      6  257b					      ENDIF
      7  257b
      8  257b					      IF	.CYCLES & 1
      9  257b					      IFNCONST	NO_ILLEGAL_OPCODES
     10  257b		       04 00		      nop	0
     11  257d				  -	      ELSE
     12  257d				  -	      bit	VSYNC
     13  257d					      ENDIF
     14  257d				   .CYCLES    SET	.CYCLES - 3
     15  257d					      ENDIF
     16  257d
     17  257d				  -	      REPEAT	.CYCLES / 2
     18  257d				  -	      nop
     19  257d					      REPEND
     97  257d					      endif
     98  257d		       aa		      tax
     99  257e
    100  257e		       a9 00		      lda	#0	;2
    101  2580		       85 20		      sta	HMP0	;3
    102  2582		       85 21		      sta	HMP1	;3
    103  2584
      0  2584					      sleep	7
      1  2584				   .CYCLES    SET	7
      2  2584
      3  2584				  -	      IF	.CYCLES < 2
      4  2584				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  2584				  -	      ERR
      6  2584					      ENDIF
      7  2584
      8  2584					      IF	.CYCLES & 1
      9  2584					      IFNCONST	NO_ILLEGAL_OPCODES
     10  2584		       04 00		      nop	0
     11  2586				  -	      ELSE
     12  2586				  -	      bit	VSYNC
     13  2586					      ENDIF
     14  2586				   .CYCLES    SET	.CYCLES - 3
     15  2586					      ENDIF
     16  2586
     17  2586					      REPEAT	.CYCLES / 2
     18  2586		       ea		      nop
     17  2586					      REPEND
     18  2587		       ea		      nop
     19  2588					      REPEND
    105  2588
    106  2588		       b9 00 ba 	      lda	bmp_96x2_1_07,y
    107  258b		       85 1c		      sta	GRP1
    108  258d
    109  258d		       b9 00 b9 	      lda	bmp_96x2_1_03,y	;5
    110  2590		       85 1b		      sta	GRP0	;3 =  8
    111  2592		       b9 78 b9 	      lda	bmp_96x2_1_05,y	;5
    112  2595		       85 1b		      sta	GRP0	;3 =  8
    113  2597
      0  2597					      sleep	2
      1  2597				   .CYCLES    SET	2
      2  2597
      3  2597				  -	      IF	.CYCLES < 2
      4  2597				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  2597				  -	      ERR
      6  2597					      ENDIF
      7  2597
      8  2597				  -	      IF	.CYCLES & 1
      9  2597				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  2597				  -	      nop	0
     11  2597				  -	      ELSE
     12  2597				  -	      bit	VSYNC
     13  2597				  -	      ENDIF
     14  2597				  -.CYCLES    SET	.CYCLES - 3
     15  2597					      ENDIF
     16  2597
     17  2597					      REPEAT	.CYCLES / 2
     18  2597		       ea		      nop
     19  2598					      REPEND
    115  2598
    116  2598		       b9 78 ba 	      lda	bmp_96x2_1_09,y	;5
    117  259b		       85 1c		      sta	GRP1	;3 =  8
    118  259d		       b9 00 bb 	      lda	bmp_96x2_1_11,y	;5
    119  25a0		       85 1c		      sta	GRP1	;3 =  8
    120  25a2
      0  25a2					      sleep	2
      1  25a2				   .CYCLES    SET	2
      2  25a2
      3  25a2				  -	      IF	.CYCLES < 2
      4  25a2				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  25a2				  -	      ERR
      6  25a2					      ENDIF
      7  25a2
      8  25a2				  -	      IF	.CYCLES & 1
      9  25a2				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  25a2				  -	      nop	0
     11  25a2				  -	      ELSE
     12  25a2				  -	      bit	VSYNC
     13  25a2				  -	      ENDIF
     14  25a2				  -.CYCLES    SET	.CYCLES - 3
     15  25a2					      ENDIF
     16  25a2
     17  25a2					      REPEAT	.CYCLES / 2
     18  25a2		       ea		      nop
     19  25a3					      REPEND
    122  25a3		       86 07		      stx	COLUP1
    123  25a5		       86 06		      stx	COLUP0
    124  25a7
    125  25a7		       85 2a		      sta	HMOVE	;3 - CYCLE 74 HMOVE
      0  25a9					      sleep	2
      1  25a9				   .CYCLES    SET	2
      2  25a9
      3  25a9				  -	      IF	.CYCLES < 2
      4  25a9				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  25a9				  -	      ERR
      6  25a9					      ENDIF
      7  25a9
      8  25a9				  -	      IF	.CYCLES & 1
      9  25a9				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  25a9				  -	      nop	0
     11  25a9				  -	      ELSE
     12  25a9				  -	      bit	VSYNC
     13  25a9				  -	      ENDIF
     14  25a9				  -.CYCLES    SET	.CYCLES - 3
     15  25a9					      ENDIF
     16  25a9
     17  25a9					      REPEAT	.CYCLES / 2
     18  25a9		       ea		      nop
     19  25aa					      REPEND
    127  25aa		       88		      dey
    128  25ab
    129  25ab		       c4 9c		      cpy	temp1	;3
    130  25ad		       d0 99		      bne	pfline_96x2_1_frame0	;2/3
    131  25af
    132  25af				   pf96x2_1_0codeend
    133  25af							;echo "critical code #1 in 96x2_1 is ",(pf96x2_1_0codeend-pfline_96x2_1_frame0), " bytes long."
    134  25af
    135  25af		       a9 00		      lda	#0
    136  25b1		       85 1b		      sta	GRP0
    137  25b3		       85 1c		      sta	GRP1
    138  25b5		       4c 6e b6 	      jmp	pfdone_96x2_1
    139  25b8
    140  25b8
    141  25b8				   pf96x2_1_frame1
    142  25b8
    143  25b8							;postion P0 and P1
    144  25b8		       85 02		      sta	WSYNC
    145  25ba		       a9 20		      lda	#%00100000
    146  25bc		       85 20		      sta	HMP0
    147  25be		       a9 00		      lda	#0
    148  25c0		       a9 f0		      lda	#%11110000
    149  25c2		       85 21		      sta	HMP1
    150  25c4		       85 02		      sta	WSYNC
      0  25c6					      sleep	32
      1  25c6				   .CYCLES    SET	32
      2  25c6
      3  25c6				  -	      IF	.CYCLES < 2
      4  25c6				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  25c6				  -	      ERR
      6  25c6					      ENDIF
      7  25c6
      8  25c6				  -	      IF	.CYCLES & 1
      9  25c6				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  25c6				  -	      nop	0
     11  25c6				  -	      ELSE
     12  25c6				  -	      bit	VSYNC
     13  25c6				  -	      ENDIF
     14  25c6				  -.CYCLES    SET	.CYCLES - 3
     15  25c6					      ENDIF
     16  25c6
     17  25c6					      REPEAT	.CYCLES / 2
     18  25c6		       ea		      nop
     17  25c6					      REPEND
     18  25c7		       ea		      nop
     17  25c7					      REPEND
     18  25c8		       ea		      nop
     17  25c8					      REPEND
     18  25c9		       ea		      nop
     17  25c9					      REPEND
     18  25ca		       ea		      nop
     17  25ca					      REPEND
     18  25cb		       ea		      nop
     17  25cb					      REPEND
     18  25cc		       ea		      nop
     17  25cc					      REPEND
     18  25cd		       ea		      nop
     17  25cd					      REPEND
     18  25ce		       ea		      nop
     17  25ce					      REPEND
     18  25cf		       ea		      nop
     17  25cf					      REPEND
     18  25d0		       ea		      nop
     17  25d0					      REPEND
     18  25d1		       ea		      nop
     17  25d1					      REPEND
     18  25d2		       ea		      nop
     17  25d2					      REPEND
     18  25d3		       ea		      nop
     17  25d3					      REPEND
     18  25d4		       ea		      nop
     17  25d4					      REPEND
     18  25d5		       ea		      nop
     19  25d6					      REPEND
    152  25d6		       85 10		      sta	RESP0
      0  25d8					      sleep	12
      1  25d8				   .CYCLES    SET	12
      2  25d8
      3  25d8				  -	      IF	.CYCLES < 2
      4  25d8				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  25d8				  -	      ERR
      6  25d8					      ENDIF
      7  25d8
      8  25d8				  -	      IF	.CYCLES & 1
      9  25d8				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  25d8				  -	      nop	0
     11  25d8				  -	      ELSE
     12  25d8				  -	      bit	VSYNC
     13  25d8				  -	      ENDIF
     14  25d8				  -.CYCLES    SET	.CYCLES - 3
     15  25d8					      ENDIF
     16  25d8
     17  25d8					      REPEAT	.CYCLES / 2
     18  25d8		       ea		      nop
     17  25d8					      REPEND
     18  25d9		       ea		      nop
     17  25d9					      REPEND
     18  25da		       ea		      nop
     17  25da					      REPEND
     18  25db		       ea		      nop
     17  25db					      REPEND
     18  25dc		       ea		      nop
     17  25dc					      REPEND
     18  25dd		       ea		      nop
     19  25de					      REPEND
    154  25de		       85 11		      sta	RESP1
    155  25e0		       85 02		      sta	WSYNC
    156  25e2		       85 2a		      sta	HMOVE
    157  25e4
    158  25e4		       85 02		      sta	WSYNC
    159  25e6		       85 2b		      sta	HMCLR
    160  25e8
    161  25e8
    162  25e8
    163  25e8		       85 02		      sta	WSYNC
      0  25ea					      sleep	3
      1  25ea				   .CYCLES    SET	3
      2  25ea
      3  25ea				  -	      IF	.CYCLES < 2
      4  25ea				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  25ea				  -	      ERR
      6  25ea					      ENDIF
      7  25ea
      8  25ea					      IF	.CYCLES & 1
      9  25ea					      IFNCONST	NO_ILLEGAL_OPCODES
     10  25ea		       04 00		      nop	0
     11  25ec				  -	      ELSE
     12  25ec				  -	      bit	VSYNC
     13  25ec					      ENDIF
     14  25ec				   .CYCLES    SET	.CYCLES - 3
     15  25ec					      ENDIF
     16  25ec
     17  25ec				  -	      REPEAT	.CYCLES / 2
     18  25ec				  -	      nop
     19  25ec					      REPEND
    165  25ec		       4c 00 b6 	      jmp	pfline_96x2_1_frame1
    166  25ef
    167  25ef							;align so our branch doesn't unexpectedly cross a page...
    168  25ef					      if	>. != >[.+$70]
    169  2600		       00 00 00 00*	      align	256
    170  2600					      endif
    171  2600
    172  2600				   pfline_96x2_1_frame1
    173  2600
    174  2600		       85 2a		      sta	HMOVE
    175  2602
    176  2602		       b9 00 ba 	      lda	bmp_96x2_1_07,y	;4
    177  2605		       85 1c		      sta	GRP1	;3
    178  2607
    179  2607		       a9 00		      lda	#$0	;2
    180  2609		       85 20		      sta	HMP0	;3
    181  260b		       85 21		      sta	HMP1	;3
    182  260d
    183  260d		       b9 85 b8 	      lda	bmp_96x2_1_01,y
    184  2610		       8d 1b 00 	      sta.w	GRP0
    185  2613		       b9 00 b9 	      lda	bmp_96x2_1_03,y
    186  2616		       85 1b		      sta	GRP0
    187  2618		       b9 78 b9 	      lda	bmp_96x2_1_05,y
    188  261b		       85 1b		      sta	GRP0
    189  261d
      0  261d					      sleep	2
      1  261d				   .CYCLES    SET	2
      2  261d
      3  261d				  -	      IF	.CYCLES < 2
      4  261d				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  261d				  -	      ERR
      6  261d					      ENDIF
      7  261d
      8  261d				  -	      IF	.CYCLES & 1
      9  261d				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  261d				  -	      nop	0
     11  261d				  -	      ELSE
     12  261d				  -	      bit	VSYNC
     13  261d				  -	      ENDIF
     14  261d				  -.CYCLES    SET	.CYCLES - 3
     15  261d					      ENDIF
     16  261d
     17  261d					      REPEAT	.CYCLES / 2
     18  261d		       ea		      nop
     19  261e					      REPEND
    191  261e
    192  261e		       b9 78 ba 	      lda	bmp_96x2_1_09,y
    193  2621		       85 1c		      sta	GRP1
    194  2623		       b9 00 bb 	      lda	bmp_96x2_1_11,y
    195  2626		       85 1c		      sta	GRP1
    196  2628
    197  2628		       b9 49 b8 	      lda	bmp_96x2_1_00,y
    198  262b		       85 1b		      sta	GRP0
    199  262d
    200  262d		       8d 2a 00 	      sta.w	HMOVE	;3 - cycle 74
    201  2630
    202  2630							;sta WSYNC	;=0 -----------------------------------------
    203  2630
    204  2630		       b9 b4 b9 	      lda	bmp_96x2_1_06,y
    205  2633		       85 1c		      sta	GRP1
    206  2635
      0  2635					      sleep	8
      1  2635				   .CYCLES    SET	8
      2  2635
      3  2635				  -	      IF	.CYCLES < 2
      4  2635				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  2635				  -	      ERR
      6  2635					      ENDIF
      7  2635
      8  2635				  -	      IF	.CYCLES & 1
      9  2635				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  2635				  -	      nop	0
     11  2635				  -	      ELSE
     12  2635				  -	      bit	VSYNC
     13  2635				  -	      ENDIF
     14  2635				  -.CYCLES    SET	.CYCLES - 3
     15  2635					      ENDIF
     16  2635
     17  2635					      REPEAT	.CYCLES / 2
     18  2635		       ea		      nop
     17  2635					      REPEND
     18  2636		       ea		      nop
     17  2636					      REPEND
     18  2637		       ea		      nop
     17  2637					      REPEND
     18  2638		       ea		      nop
     19  2639					      REPEND
    208  2639
    209  2639		       b9 0c b8 	      lda	bmp_96x2_1_colors-1,y	;get the title color early and store it for later
    210  263c		       aa		      tax		;2
    211  263d
      0  263d					      sleep	3
      1  263d				   .CYCLES    SET	3
      2  263d
      3  263d				  -	      IF	.CYCLES < 2
      4  263d				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  263d				  -	      ERR
      6  263d					      ENDIF
      7  263d
      8  263d					      IF	.CYCLES & 1
      9  263d					      IFNCONST	NO_ILLEGAL_OPCODES
     10  263d		       04 00		      nop	0
     11  263f				  -	      ELSE
     12  263f				  -	      bit	VSYNC
     13  263f					      ENDIF
     14  263f				   .CYCLES    SET	.CYCLES - 3
     15  263f					      ENDIF
     16  263f
     17  263f				  -	      REPEAT	.CYCLES / 2
     18  263f				  -	      nop
     19  263f					      REPEND
    213  263f
    214  263f		       a9 80		      lda	#$80	;2
    215  2641		       85 20		      sta	HMP0	;3
    216  2643		       85 21		      sta	HMP1	;3
    217  2645
    218  2645
    219  2645		       b9 c1 b8 	      lda	bmp_96x2_1_02,y	;5
    220  2648		       85 1b		      sta	GRP0	;3 =  8
    221  264a
    222  264a		       b9 3c b9 	      lda	bmp_96x2_1_04,y	;5
    223  264d		       85 1b		      sta	GRP0	;3 =  8
    224  264f
      0  264f					      sleep	2
      1  264f				   .CYCLES    SET	2
      2  264f
      3  264f				  -	      IF	.CYCLES < 2
      4  264f				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  264f				  -	      ERR
      6  264f					      ENDIF
      7  264f
      8  264f				  -	      IF	.CYCLES & 1
      9  264f				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  264f				  -	      nop	0
     11  264f				  -	      ELSE
     12  264f				  -	      bit	VSYNC
     13  264f				  -	      ENDIF
     14  264f				  -.CYCLES    SET	.CYCLES - 3
     15  264f					      ENDIF
     16  264f
     17  264f					      REPEAT	.CYCLES / 2
     18  264f		       ea		      nop
     19  2650					      REPEND
    226  2650
    227  2650		       b9 3c ba 	      lda	bmp_96x2_1_08,y	;5
    228  2653		       85 1c		      sta	GRP1	;3 =  8
    229  2655
    230  2655		       b9 b4 ba 	      lda	bmp_96x2_1_10,y	;5
    231  2658		       85 1c		      sta	GRP1	;3 =  8
    232  265a
      0  265a					      sleep	4
      1  265a				   .CYCLES    SET	4
      2  265a
      3  265a				  -	      IF	.CYCLES < 2
      4  265a				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  265a				  -	      ERR
      6  265a					      ENDIF
      7  265a
      8  265a				  -	      IF	.CYCLES & 1
      9  265a				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  265a				  -	      nop	0
     11  265a				  -	      ELSE
     12  265a				  -	      bit	VSYNC
     13  265a				  -	      ENDIF
     14  265a				  -.CYCLES    SET	.CYCLES - 3
     15  265a					      ENDIF
     16  265a
     17  265a					      REPEAT	.CYCLES / 2
     18  265a		       ea		      nop
     17  265a					      REPEND
     18  265b		       ea		      nop
     19  265c					      REPEND
    234  265c
    235  265c		       88		      dey
    236  265d
    237  265d		       8a		      txa
    238  265e				  -	      ifconst	bmp_96x2_1_fade
    239  265e				  -	      and	bmp_96x2_1_fade
    240  265e					      else
      0  265e					      sleep	3
      1  265e				   .CYCLES    SET	3
      2  265e
      3  265e				  -	      IF	.CYCLES < 2
      4  265e				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  265e				  -	      ERR
      6  265e					      ENDIF
      7  265e
      8  265e					      IF	.CYCLES & 1
      9  265e					      IFNCONST	NO_ILLEGAL_OPCODES
     10  265e		       04 00		      nop	0
     11  2660				  -	      ELSE
     12  2660				  -	      bit	VSYNC
     13  2660					      ENDIF
     14  2660				   .CYCLES    SET	.CYCLES - 3
     15  2660					      ENDIF
     16  2660
     17  2660				  -	      REPEAT	.CYCLES / 2
     18  2660				  -	      nop
     19  2660					      REPEND
    242  2660					      endif
    243  2660		       85 07		      sta	COLUP1	;3
    244  2662		       85 06		      sta	COLUP0	;3
    245  2664
    246  2664		       c4 9c		      cpy	temp1	;2
    247  2666		       d0 98		      bne	pfline_96x2_1_frame1	;2/3
    248  2668
    249  2668				   pf96x2_1_1codeend
    250  2668							;echo "critical code #2 in 96x2_1 is ",(pf96x2_1_1codeend-pfline_96x2_1_frame1), " bytes long."
    251  2668
    252  2668		       a9 00		      lda	#0
    253  266a		       85 1b		      sta	GRP0
    254  266c		       85 1c		      sta	GRP1
    255  266e
    256  266e				   pfdone_96x2_1
    257  266e		       85 02		      sta	WSYNC	; debug
    258  2670
    259  2670		       60		      rts
------- FILE titlescreen/asm/titlescreen.asm
    149  2671					      endif		;mk_96x2_1_on
    150  2671
    151  2671				  -	      ifconst	mk_96x2_2_on
    152  2671				  -	      include	"titlescreen/asm/96x2_2_kernel.asm"
    153  2671					      endif		;mk_96x2_2_on
    154  2671
    155  2671				  -	      ifconst	mk_96x2_3_on
    156  2671				  -	      include	"titlescreen/asm/96x2_3_kernel.asm"
    157  2671					      endif		;mk_96x2_3_on
    158  2671
    159  2671				  -	      ifconst	mk_96x2_4_on
    160  2671				  -	      include	"titlescreen/asm/96x2_4_kernel.asm"
    161  2671					      endif		;mk_96x2_4_on
    162  2671
    163  2671				  -	      ifconst	mk_96x2_5_on
    164  2671				  -	      include	"titlescreen/asm/96x2_5_kernel.asm"
    165  2671					      endif		;mk_96x2_5_on
    166  2671
    167  2671				  -	      ifconst	mk_96x2_6_on
    168  2671				  -	      include	"titlescreen/asm/96x2_6_kernel.asm"
    169  2671					      endif		;mk_96x2_6_on
    170  2671
    171  2671				  -	      ifconst	mk_96x2_7_on
    172  2671				  -	      include	"titlescreen/asm/96x2_7_kernel.asm"
    173  2671					      endif		;mk_96x2_7_on
    174  2671
    175  2671				  -	      ifconst	mk_96x2_8_on
    176  2671				  -	      include	"titlescreen/asm/96x2_8_kernel.asm"
    177  2671					      endif		;mk_96x2_8_on
    178  2671
    179  2671					      ifconst	mk_score_on
------- FILE titlescreen/asm/score_kernel.asm LEVEL 3 PASS 3
      0  2671					      include	"titlescreen/asm/score_kernel.asm"
      1  2671							; The batari Basic score kernel
      2  2671							; This minikernel is not under the same license as the rest of the
      3  2671							; titlescreen code. Refer to the bB license before you use this in
      4  2671							; a non-bB program.
      5  2671
      6  2671				   draw_score_display
      7  2671
      8  2671		       a7 93		      lax	score+0
      9  2673		       20 43 b7 	      jsr	miniscorepointerset
     10  2676		       84 9e		      sty	scorepointers+8
     11  2678		       86 96		      stx	scorepointers+0
     12  267a		       a7 94		      lax	score+1
     13  267c		       20 43 b7 	      jsr	miniscorepointerset
     14  267f		       84 9a		      sty	scorepointers+4
     15  2681		       86 9c		      stx	scorepointers+6
     16  2683		       a7 95		      lax	score+2
     17  2685		       20 43 b7 	      jsr	miniscorepointerset
     18  2688		       84 a0		      sty	scorepointers+10
     19  268a		       86 98		      stx	scorepointers+2
     20  268c
     21  268c		       85 2b		      sta	HMCLR
     22  268e		       ba		      tsx
     23  268f		       86 f6		      stx	stack1
     24  2691							;ldx #$20
     25  2691		       a2 60		      ldx	#$60
     26  2693		       86 20		      stx	HMP0
     27  2695
     28  2695		       a2 00		      ldx	#0
     29  2697		       85 02		      sta	WSYNC	;   0
     30  2699		       86 1b		      STx	GRP0	; 3 3
     31  269b		       86 1c		      STx	GRP1	; 3 6 seems to be needed because of vdel
     32  269d
      0  269d					      sleep	7	; 7 13
      1  269d				   .CYCLES    SET	7
      2  269d
      3  269d				  -	      IF	.CYCLES < 2
      4  269d				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  269d				  -	      ERR
      6  269d					      ENDIF
      7  269d
      8  269d					      IF	.CYCLES & 1
      9  269d					      IFNCONST	NO_ILLEGAL_OPCODES
     10  269d		       04 00		      nop	0
     11  269f				  -	      ELSE
     12  269f				  -	      bit	VSYNC
     13  269f					      ENDIF
     14  269f				   .CYCLES    SET	.CYCLES - 3
     15  269f					      ENDIF
     16  269f
     17  269f					      REPEAT	.CYCLES / 2
     18  269f		       ea		      nop
     17  269f					      REPEND
     18  26a0		       ea		      nop
     19  26a1					      REPEND
     34  26a1
     35  26a1		       a9 bb		      lda	#>miniscoretable	; 2 15
     36  26a3		       95 97		      sta	scorepointers+1,x	; 4 19
     37  26a5		       95 99		      sta	scorepointers+3,x	; 4 23
     38  26a7		       95 9b		      sta	scorepointers+5,x	; 4 27
     39  26a9		       95 9d		      sta	scorepointers+7,x	; 4 31
     40  26ab		       95 9f		      sta	scorepointers+9,x	; 4 35
     41  26ad		       95 a1		      sta	scorepointers+11,x	; 4 39
     42  26af
     43  26af		       a0 07		      LDY	#7	; 2 41
     44  26b1		       85 10		      STA	RESP0	; 3 44
     45  26b3		       85 11		      STA	RESP1	; 3 47
     46  26b5
     47  26b5		       a9 03		      LDA	#$03	; 2 49
     48  26b7		       85 04		      STA	NUSIZ0	; 3 52
     49  26b9		       95 05		      STA	NUSIZ1,x	; 4 56
     50  26bb		       85 25		      STA	VDELP0	; 3 59
     51  26bd		       85 26		      STA	VDELP1	; 3 62
     52  26bf							;LDA #$30		; 2 64
     53  26bf		       a9 70		      LDA	#$70	; 2 64
     54  26c1		       85 21		      STA	HMP1	; 3 67
     55  26c3		       a5 a3		      LDA	scorecolor	; 3 70
     56  26c5		       85 2a		      STA	HMOVE	; cycle 73 ?
     57  26c7				  -	      ifconst	score_kernel_fade
     58  26c7				  -	      and	score_kernel_fade
     59  26c7					      endif
     60  26c7
     61  26c7		       85 06		      STA	COLUP0
     62  26c9		       85 07		      STA	COLUP1
     63  26cb				  -	      ifconst	scorefade
     64  26cb				  -	      STA	stack2	; scorefade
     65  26cb					      endif
     66  26cb		       b1 96		      lda	(scorepointers),y
     67  26cd		       85 1b		      sta	GRP0
     68  26cf		       b1 9e		      lda	(scorepointers+8),y
     69  26d1		       85 02		      sta	WSYNC
      0  26d3					      sleep	2
      1  26d3				   .CYCLES    SET	2
      2  26d3
      3  26d3				  -	      IF	.CYCLES < 2
      4  26d3				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  26d3				  -	      ERR
      6  26d3					      ENDIF
      7  26d3
      8  26d3				  -	      IF	.CYCLES & 1
      9  26d3				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  26d3				  -	      nop	0
     11  26d3				  -	      ELSE
     12  26d3				  -	      bit	VSYNC
     13  26d3				  -	      ENDIF
     14  26d3				  -.CYCLES    SET	.CYCLES - 3
     15  26d3					      ENDIF
     16  26d3
     17  26d3					      REPEAT	.CYCLES / 2
     18  26d3		       ea		      nop
     19  26d4					      REPEND
     71  26d4		       4c 0b b7 	      jmp	beginscoreloop
     72  26d7
     73  26d7					      if	((<*)>$28)
     74  2700		       00 00 00 00*	      align	256	; kludge that potentially wastes space!  should be fixed!
     75  2700					      endif
     76  2700
     77  2700				   scoreloop2
     78  2700				  -	      ifconst	scorefade
     79  2700				  -	      lda	stack2
     80  2700				  -	      sta	COLUP0
     81  2700				  -	      sta	COLUP1
     82  2700					      else
      0  2700					      sleep	9
      1  2700				   .CYCLES    SET	9
      2  2700
      3  2700				  -	      IF	.CYCLES < 2
      4  2700				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  2700				  -	      ERR
      6  2700					      ENDIF
      7  2700
      8  2700					      IF	.CYCLES & 1
      9  2700					      IFNCONST	NO_ILLEGAL_OPCODES
     10  2700		       04 00		      nop	0
     11  2702				  -	      ELSE
     12  2702				  -	      bit	VSYNC
     13  2702					      ENDIF
     14  2702				   .CYCLES    SET	.CYCLES - 3
     15  2702					      ENDIF
     16  2702
     17  2702					      REPEAT	.CYCLES / 2
     18  2702		       ea		      nop
     17  2702					      REPEND
     18  2703		       ea		      nop
     17  2703					      REPEND
     18  2704		       ea		      nop
     19  2705					      REPEND
     84  2705					      endif
     85  2705		       b1 96		      lda	(scorepointers),y	;+5  68  204
     86  2707		       85 1b		      sta	GRP0	;+3  71  213	   D1	  --	  --	 --
     87  2709		       b1 9e		      lda	(scorepointers+$8),y	;+5   5   15
     88  270b							; cycle 0
     89  270b				   beginscoreloop
     90  270b		       85 1c		      sta	GRP1	;+3   8   24	   D1	  D1	  D2	 --
     91  270d		       b1 9c		      lda	(scorepointers+$6),y	;+5  13   39
     92  270f		       85 1b		      sta	GRP0	;+3  16   48	   D3	  D1	  D2	 D2
     93  2711		       b3 98		      lax	(scorepointers+$2),y	;+5  29   87
     94  2713		       9a		      txs
     95  2714		       b3 9a		      lax	(scorepointers+$4),y	;+5  36  108
     96  2716
     97  2716				  -	      ifconst	scorefade
     98  2716				  -	      dec	stack2
     99  2716					      else
      0  2716					      sleep	5
      1  2716				   .CYCLES    SET	5
      2  2716
      3  2716				  -	      IF	.CYCLES < 2
      4  2716				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  2716				  -	      ERR
      6  2716					      ENDIF
      7  2716
      8  2716					      IF	.CYCLES & 1
      9  2716					      IFNCONST	NO_ILLEGAL_OPCODES
     10  2716		       04 00		      nop	0
     11  2718				  -	      ELSE
     12  2718				  -	      bit	VSYNC
     13  2718					      ENDIF
     14  2718				   .CYCLES    SET	.CYCLES - 3
     15  2718					      ENDIF
     16  2718
     17  2718					      REPEAT	.CYCLES / 2
     18  2718		       ea		      nop
     19  2719					      REPEND
    101  2719					      endif
      0  2719					      sleep	2
      1  2719				   .CYCLES    SET	2
      2  2719
      3  2719				  -	      IF	.CYCLES < 2
      4  2719				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  2719				  -	      ERR
      6  2719					      ENDIF
      7  2719
      8  2719				  -	      IF	.CYCLES & 1
      9  2719				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  2719				  -	      nop	0
     11  2719				  -	      ELSE
     12  2719				  -	      bit	VSYNC
     13  2719				  -	      ENDIF
     14  2719				  -.CYCLES    SET	.CYCLES - 3
     15  2719					      ENDIF
     16  2719
     17  2719					      REPEAT	.CYCLES / 2
     18  2719		       ea		      nop
     19  271a					      REPEND
    103  271a
    104  271a		       b1 a0		      lda	(scorepointers+$A),y	;+5  21   63 DIGIT 6
    105  271c		       86 1c		      stx	GRP1	;+3  44  132	   D3	  D3	  D4	 D2!
    106  271e		       ba		      tsx
    107  271f		       86 1b		      stx	GRP0	;+3  47  141	   D5	  D3!	  D4	 D4
    108  2721		       85 1c		      sta	GRP1	;+3  50  150	   D5	  D5	  D6	 D4!
    109  2723
    110  2723		       84 1b		      sty	GRP0	;+3  53  159	   D4*	  D5!	  D6	 D6
    111  2725		       88		      dey
    112  2726		       10 d8		      bpl	scoreloop2	;+2  60  180
    113  2728				   scoreloop2end
    114  2728
    115  2728							;echo "critical size: ",(scoreloop2end-scoreloop2)
    116  2728
    117  2728
    118  2728		       a6 f6		      ldx	stack1
    119  272a		       9a		      txs
    120  272b
    121  272b		       a9 00		      LDA	#0
    122  272d		       85 0e		      sta	PF1
    123  272f		       85 1b		      STA	GRP0
    124  2731		       85 1c		      STA	GRP1
    125  2733		       85 25		      STA	VDELP0
    126  2735		       85 26		      STA	VDELP1
    127  2737		       85 04		      STA	NUSIZ0
    128  2739		       85 05		      STA	NUSIZ1
    129  273b
    130  273b							; clear out the score pointers in case they're stolen DPC variables...
    131  273b		       a2 0b		      ldx	#11
    132  273d				   clearscoreploop
    133  273d		       95 96		      sta	scorepointers,x
    134  273f		       ca		      dex
    135  2740		       10 fb		      bpl	clearscoreploop
    136  2742
    137  2742
    138  2742							;;ldy temp3
    139  2742							;ldy scorepointers+8
    140  2742							;sty scorepointers+3
    141  2742
    142  2742							;;ldy temp5
    143  2742							;ldy scorepointers+10
    144  2742							;sty scorepointers+5
    145  2742		       60		      rts
    146  2743
    147  2743				   miniscorepointerset
    148  2743		       29 0f		      and	#$0F
    149  2745		       0a		      asl
    150  2746		       0a		      asl
    151  2747		       0a		      asl
    152  2748		       69 3d		      adc	#<miniscoretable
    153  274a		       a8		      tay
    154  274b		       8a		      txa
    155  274c		       29 f0		      and	#$F0
    156  274e		       4a		      lsr
    157  274f		       69 3d		      adc	#<miniscoretable
    158  2751		       aa		      tax
    159  2752		       60		      rts
    160  2753
------- FILE titlescreen/asm/titlescreen.asm
    181  2753					      endif		;mk_score_on
    182  2753
    183  2753					      ifconst	mk_gameselect_on
------- FILE titlescreen/asm/gameselect_kernel.asm LEVEL 3 PASS 3
      0  2753					      include	"titlescreen/asm/gameselect_kernel.asm"
      1  2753
      2  2753				   draw_gameselect_display
      3  2753		       a9 00		      lda	#0
      4  2755		       85 1b		      sta	GRP0
      5  2757		       85 1c		      sta	GRP1
      6  2759
      7  2759		       a0 04		      ldy	#4
      8  275b		       84 f1		      sty	aux2
      9  275d
     10  275d		       ad 8d bb 	      lda	bmp_gameselect_color
     11  2760		       85 06		      sta	COLUP0
     12  2762		       85 07		      sta	COLUP1
     13  2764
     14  2764							;change gamenumber to a BCD number and stick it in temp5
     15  2764		       a5 a6		      lda	gamenumber
     16  2766		       85 9e		      sta	temp3
     17  2768		       a9 00		      lda	#0
     18  276a		       85 9f		      sta	temp4
     19  276c		       a2 08		      ldx	#8
     20  276e		       18		      clc
     21  276f		       f8		      sed
     22  2770				   converttobcd
     23  2770		       06 9e		      asl	temp3
     24  2772		       a5 9f		      lda	temp4
     25  2774		       65 9f		      adc	temp4
     26  2776		       85 9f		      sta	temp4
     27  2778		       ca		      dex
     28  2779		       d0 f5		      bne	converttobcd
     29  277b		       d8		      cld
     30  277c
     31  277c		       a5 9f		      lda	temp4
     32  277e		       29 0f		      and	#$0f
     33  2780		       85 9e		      sta	temp3
     34  2782		       0a		      asl
     35  2783		       0a		      asl
     36  2784		       18		      clc
     37  2785		       65 9e		      adc	temp3	; *5
     38  2787		       18		      clc
     39  2788		       69 a2		      adc	#<(font_gameselect_img)
     40  278a		       85 a0		      sta	scorepointers+10
     41  278c
     42  278c		       a5 9f		      lda	temp4
     43  278e		       29 f0		      and	#$f0
     44  2790		       4a		      lsr
     45  2791		       4a		      lsr
     46  2792		       85 9e		      sta	temp3
     47  2794		       4a		      lsr
     48  2795		       4a		      lsr
     49  2796		       18		      clc
     50  2797		       65 9e		      adc	temp3	; *5
     51  2799		       18		      clc
     52  279a		       69 a2		      adc	#<(font_gameselect_img)
     53  279c		       85 9e		      sta	scorepointers+8
     54  279e
     55  279e
     56  279e							;setup score pointers to point at my bitmap slices instead
     57  279e		       a9 8e		      lda	#<(bmp_gameselect_CHAR0)
     58  27a0		       85 96		      sta	scorepointers+0
     59  27a2		       a9 bb		      lda	#>(bmp_gameselect_CHAR0)
     60  27a4		       85 97		      sta	scorepointers+1
     61  27a6		       a9 93		      lda	#<(bmp_gameselect_CHAR1)
     62  27a8		       85 98		      sta	scorepointers+2
     63  27aa		       a9 bb		      lda	#>(bmp_gameselect_CHAR1)
     64  27ac		       85 99		      sta	scorepointers+3
     65  27ae		       a9 98		      lda	#<(bmp_gameselect_CHAR2)
     66  27b0		       85 9a		      sta	scorepointers+4
     67  27b2		       a9 bb		      lda	#>(bmp_gameselect_CHAR2)
     68  27b4		       85 9b		      sta	scorepointers+5
     69  27b6		       a9 9d		      lda	#<(bmp_gameselect_CHAR3)
     70  27b8		       85 9c		      sta	scorepointers+6
     71  27ba		       a9 bb		      lda	#>(bmp_gameselect_CHAR3)
     72  27bc		       85 9d		      sta	scorepointers+7
     73  27be
     74  27be		       a9 bb		      lda	#>(font_gameselect_img)
     75  27c0		       85 9f		      sta	scorepointers+9
     76  27c2
     77  27c2		       a9 bb		      lda	#>(font_gameselect_img)
     78  27c4		       85 a1		      sta	scorepointers+11
     79  27c6
     80  27c6		       4c a8 b3 	      jmp	draw_bmp_48x1_X
------- FILE titlescreen/asm/titlescreen.asm
    185  27c9					      endif		;mk_gameselect_on
    186  27c9
    187  27c9				   PFWAIT
    188  27c9		       ad 84 02 	      lda	INTIM
    189  27cc		       d0 fb		      bne	PFWAIT
    190  27ce		       85 02		      sta	WSYNC
    191  27d0
    192  27d0				   OVERSCAN
    193  27d0					      ifnconst	overscan_time
    194  27d0		       a9 a2		      lda	#34+128
    195  27d2				  -	      else
    196  27d2				  -	      lda	#overscan_time+128-5
    197  27d2					      endif
    198  27d2		       8d 96 02 	      sta	TIM64T
    199  27d5
    200  27d5							;fix height variables we borrowed, so DPC doesn't crash on drawscreen...
    201  27d5				  -	      ifconst	player9height
    202  27d5				  -	      ldy	#8
    203  27d5				  -	      lda	#0
    204  27d5				  -	      sta	player0height
    205  27d5				  -.playerheightfixloop
    206  27d5				  -	      sta	player1height,y
    207  27d5				  -	      ifconst	_NUSIZ1
    208  27d5				  -	      sta	_NUSIZ1,y
    209  27d5				  -	      endif
    210  27d5				  -	      dey
    211  27d5				  -	      bpl	.playerheightfixloop
    212  27d5					      endif
    213  27d5
    214  27d5		       a9 c2		      lda	#%11000010
    215  27d7		       85 02		      sta	WSYNC
    216  27d9		       85 01		      sta	VBLANK
      0  27db					      RETURN
      1  27db				  -	      ifnconst	bankswitch
      2  27db				  -	      rts
      3  27db					      else
      4  27db		       4c da ff 	      jmp	BS_return
      5  27de					      endif
    218  27de
    219  27de				  -	      ifconst	mk_48x1_1_on
    220  27de				  -	      include	"titlescreen/48x1_1_image.asm"
    221  27de					      endif
    222  27de				  -	      ifconst	mk_48x1_2_on
    223  27de				  -	      include	"titlescreen/48x1_2_image.asm"
    224  27de					      endif
    225  27de				  -	      ifconst	mk_48x1_3_on
    226  27de				  -	      include	"titlescreen/48x1_3_image.asm"
    227  27de					      endif
    228  27de				  -	      ifconst	mk_48x1_4_on
    229  27de				  -	      include	"titlescreen/48x1_4_image.asm"
    230  27de					      endif
    231  27de				  -	      ifconst	mk_48x1_5_on
    232  27de				  -	      include	"titlescreen/48x1_5_image.asm"
    233  27de					      endif
    234  27de				  -	      ifconst	mk_48x1_6_on
    235  27de				  -	      include	"titlescreen/48x1_6_image.asm"
    236  27de					      endif
    237  27de				  -	      ifconst	mk_48x1_7_on
    238  27de				  -	      include	"titlescreen/48x1_7_image.asm"
    239  27de					      endif
    240  27de				  -	      ifconst	mk_48x1_8_on
    241  27de				  -	      include	"titlescreen/48x1_8_image.asm"
    242  27de					      endif
    243  27de
    244  27de
    245  27de					      ifconst	mk_48x2_1_on
------- FILE titlescreen/48x2_1_image.asm LEVEL 3 PASS 3
      0  27de					      include	"titlescreen/48x2_1_image.asm"
      1  27de
      2  27de							;*** The height of the displayed data...
      3  27de		       00 05	   bmp_48x2_1_window =	5
      4  27de
      5  27de							;*** The height of the bitmap data. This can be larger than
      6  27de							;*** the displayed data height, if you're scrolling or animating
      7  27de							;*** the data...
      8  27de		       00 05	   bmp_48x2_1_height =	5
      9  27de
     10  27de				  -	      if	>. != >[.+(bmp_48x2_1_height)]
     11  27de				  -	      align	256
     12  27de					      endif
     13  27de		       00		      BYTE.b	0	; leave this here!
     14  27df
     15  27df
     16  27df							;*** The color of each line in the bitmap, in reverse order...
     17  27df				   bmp_48x2_1_colors
     18  27df		       84		      BYTE.b	_84
     19  27e0		       88		      BYTE.b	_88
     20  27e1		       48		      BYTE.b	_48
     21  27e2		       46		      BYTE.b	_46
     22  27e3		       44		      BYTE.b	_44
     23  27e4
     24  27e4				  -	      ifnconst	bmp_48x2_1_PF1
     25  27e4				  -bmp_48x2_1_PF1
     26  27e4					      endif
     27  27e4		       00		      BYTE.b	%00000000
     28  27e5				  -	      ifnconst	bmp_48x2_1_PF2
     29  27e5				  -bmp_48x2_1_PF2
     30  27e5					      endif
     31  27e5		       00		      BYTE.b	%00000000
     32  27e6				  -	      ifnconst	bmp_48x2_1_background
     33  27e6				  -bmp_48x2_1_background
     34  27e6					      endif
     35  27e6		       c2		      BYTE.b	$c2
     36  27e7
     37  27e7				  -	      if	>. != >[.+bmp_48x2_1_height]
     38  27e7				  -	      align	256
     39  27e7					      endif
     40  27e7
     41  27e7
     42  27e7				   bmp_48x2_1_00
     43  27e7		       ee		      BYTE.b	%11101110
     44  27e8		       88		      BYTE.b	%10001000
     45  27e9		       8c		      BYTE.b	%10001100
     46  27ea		       88		      BYTE.b	%10001000
     47  27eb		       8e		      BYTE.b	%10001110
     48  27ec		       88		      BYTE.b	%10001000
     49  27ed
     50  27ed				  -	      if	>. != >[.+(bmp_48x2_1_height)]
     51  27ed				  -	      align	256
     52  27ed					      endif
     53  27ed
     54  27ed				   bmp_48x2_1_01
     55  27ed		       4e		      BYTE.b	%01001110
     56  27ee		       48		      BYTE.b	%01001000
     57  27ef		       ac		      BYTE.b	%10101100
     58  27f0		       a8		      BYTE.b	%10101000
     59  27f1		       ae		      BYTE.b	%10101110
     60  27f2		       48		      BYTE.b	%01001000
     61  27f3
     62  27f3				  -	      if	>. != >[.+(bmp_48x2_1_height)]
     63  27f3				  -	      align	256
     64  27f3					      endif
     65  27f3
     66  27f3				   bmp_48x2_1_02
     67  27f3		       e0		      BYTE.b	%11100000
     68  27f4		       80		      BYTE.b	%10000000
     69  27f5		       80		      BYTE.b	%10000000
     70  27f6		       80		      BYTE.b	%10000000
     71  27f7		       80		      BYTE.b	%10000000
     72  27f8		       80		      BYTE.b	%10000000
     73  27f9
     74  27f9				  -	      if	>. != >[.+(bmp_48x2_1_height)]
     75  27f9				  -	      align	256
     76  27f9					      endif
     77  27f9
     78  27f9				   bmp_48x2_1_03
     79  27f9		       00		      BYTE.b	%00000000
     80  27fa		       00		      BYTE.b	%00000000
     81  27fb		       00		      BYTE.b	%00000000
     82  27fc		       00		      BYTE.b	%00000000
     83  27fd		       00		      BYTE.b	%00000000
     84  27fe		       00		      BYTE.b	%00000000
     85  27ff
     86  27ff					      if	>. != >[.+(bmp_48x2_1_height)]
     87  2800		       00		      align	256
     88  2800					      endif
     89  2800
     90  2800				   bmp_48x2_1_04
     91  2800		       00		      BYTE.b	%00000000
     92  2801		       00		      BYTE.b	%00000000
     93  2802		       00		      BYTE.b	%00000000
     94  2803		       00		      BYTE.b	%00000000
     95  2804		       00		      BYTE.b	%00000000
     96  2805		       00		      BYTE.b	%00000000
     97  2806
     98  2806				  -	      if	>. != >[.+(bmp_48x2_1_height)]
     99  2806				  -	      align	256
    100  2806					      endif
    101  2806
    102  2806				   bmp_48x2_1_05
    103  2806		       00		      BYTE.b	%00000000
    104  2807		       00		      BYTE.b	%00000000
    105  2808		       00		      BYTE.b	%00000000
    106  2809		       00		      BYTE.b	%00000000
    107  280a		       00		      BYTE.b	%00000000
    108  280b		       00		      BYTE.b	%00000000
    109  280c
------- FILE titlescreen/asm/titlescreen.asm
    247  280c					      endif
    248  280c				  -	      ifconst	mk_48x2_2_on
    249  280c				  -	      include	"titlescreen/48x2_2_image.asm"
    250  280c					      endif
    251  280c				  -	      ifconst	mk_48x2_3_on
    252  280c				  -	      include	"titlescreen/48x2_3_image.asm"
    253  280c					      endif
    254  280c				  -	      ifconst	mk_48x2_4_on
    255  280c				  -	      include	"titlescreen/48x2_4_image.asm"
    256  280c					      endif
    257  280c				  -	      ifconst	mk_48x2_5_on
    258  280c				  -	      include	"titlescreen/48x2_5_image.asm"
    259  280c					      endif
    260  280c				  -	      ifconst	mk_48x2_6_on
    261  280c				  -	      include	"titlescreen/48x2_6_image.asm"
    262  280c					      endif
    263  280c				  -	      ifconst	mk_48x2_7_on
    264  280c				  -	      include	"titlescreen/48x2_7_image.asm"
    265  280c					      endif
    266  280c
    267  280c				  -	      ifconst	mk_48x2_8_on
    268  280c				  -	      include	"titlescreen/48x2_8_image.asm"
    269  280c					      endif
    270  280c
    271  280c
    272  280c					      ifconst	mk_96x2_1_on
------- FILE titlescreen/96x2_1_image.asm LEVEL 3 PASS 3
      0  280c					      include	"titlescreen/96x2_1_image.asm"
      1  280c
      2  280c							;*** The height of the displayed data...
      3  280c		       00 3c	   bmp_96x2_1_window =	60
      4  280c
      5  280c							;*** The height of the bitmap data. This can be larger than
      6  280c							;*** the displayed data height, if you're scrolling or animating
      7  280c							;*** the data...
      8  280c		       00 3c	   bmp_96x2_1_height =	60
      9  280c
     10  280c
     11  280c				  -	      if	>. != >[.+(bmp_96x2_1_height)]
     12  280c				  -	      align	256
     13  280c					      endif
     14  280c		       00		      BYTE.b	$00	; leave this here!
     15  280d
     16  280d
     17  280d							;*** The color of each line in the bitmap, in reverse order...
     18  280d				   bmp_96x2_1_colors
     19  280d		       0e		      BYTE.b	$0E
     20  280e		       0e		      BYTE.b	$0E
     21  280f		       0e		      BYTE.b	$0E
     22  2810		       0e		      BYTE.b	$0E
     23  2811		       0e		      BYTE.b	$0E
     24  2812		       0e		      BYTE.b	$0E
     25  2813		       0e		      BYTE.b	$0E
     26  2814		       0e		      BYTE.b	$0E
     27  2815		       0e		      BYTE.b	$0E
     28  2816		       0e		      BYTE.b	$0E
     29  2817		       0e		      BYTE.b	$0E
     30  2818		       0e		      BYTE.b	$0E
     31  2819		       0e		      BYTE.b	$0E
     32  281a		       0e		      BYTE.b	$0E
     33  281b		       0e		      BYTE.b	$0E
     34  281c		       0e		      BYTE.b	$0E
     35  281d		       0e		      BYTE.b	$0E
     36  281e		       0e		      BYTE.b	$0E
     37  281f		       0e		      BYTE.b	$0E
     38  2820		       0e		      BYTE.b	$0E
     39  2821		       0e		      BYTE.b	$0E
     40  2822		       0e		      BYTE.b	$0E
     41  2823		       0e		      BYTE.b	$0E
     42  2824		       0e		      BYTE.b	$0E
     43  2825		       0e		      BYTE.b	$0E
     44  2826		       0e		      BYTE.b	$0E
     45  2827		       0e		      BYTE.b	$0E
     46  2828		       0e		      BYTE.b	$0E
     47  2829		       0e		      BYTE.b	$0E
     48  282a		       0e		      BYTE.b	$0E
     49  282b		       0e		      BYTE.b	$0E
     50  282c		       0e		      BYTE.b	$0E
     51  282d		       0e		      BYTE.b	$0E
     52  282e		       0e		      BYTE.b	$0E
     53  282f		       0e		      BYTE.b	$0E
     54  2830		       0e		      BYTE.b	$0E
     55  2831		       0e		      BYTE.b	$0E
     56  2832		       82		      BYTE.b	_82
     57  2833		       82		      BYTE.b	_82
     58  2834		       84		      BYTE.b	_84
     59  2835		       84		      BYTE.b	_84
     60  2836		       88		      BYTE.b	_88
     61  2837		       8a		      BYTE.b	_8A
     62  2838		       8c		      BYTE.b	_8C
     63  2839		       8c		      BYTE.b	_8C
     64  283a		       4a		      BYTE.b	_4A
     65  283b		       4a		      BYTE.b	_4A
     66  283c		       4a		      BYTE.b	_4A
     67  283d		       48		      BYTE.b	_48
     68  283e		       48		      BYTE.b	_48
     69  283f		       48		      BYTE.b	_48
     70  2840		       46		      BYTE.b	_46
     71  2841		       46		      BYTE.b	_46
     72  2842		       46		      BYTE.b	_46
     73  2843		       44		      BYTE.b	_44
     74  2844		       44		      BYTE.b	_44
     75  2845		       44		      BYTE.b	_44
     76  2846		       42		      BYTE.b	_42
     77  2847		       42		      BYTE.b	_42
     78  2848		       42		      BYTE.b	_42
     79  2849
     80  2849
     81  2849				  -	      if	>. != >[.+(bmp_96x2_1_height)]
     82  2849				  -	      align	256
     83  2849					      endif
     84  2849
     85  2849				   bmp_96x2_1_00
     86  2849		       00		      BYTE.b	%00000000
     87  284a		       00		      BYTE.b	%00000000
     88  284b		       00		      BYTE.b	%00000000
     89  284c		       00		      BYTE.b	%00000000
     90  284d		       00		      BYTE.b	%00000000
     91  284e		       00		      BYTE.b	%00000000
     92  284f		       00		      BYTE.b	%00000000
     93  2850		       00		      BYTE.b	%00000000
     94  2851		       00		      BYTE.b	%00000000
     95  2852		       00		      BYTE.b	%00000000
     96  2853		       00		      BYTE.b	%00000000
     97  2854		       00		      BYTE.b	%00000000
     98  2855		       00		      BYTE.b	%00000000
     99  2856		       00		      BYTE.b	%00000000
    100  2857		       00		      BYTE.b	%00000000
    101  2858		       00		      BYTE.b	%00000000
    102  2859		       00		      BYTE.b	%00000000
    103  285a		       00		      BYTE.b	%00000000
    104  285b		       00		      BYTE.b	%00000000
    105  285c		       00		      BYTE.b	%00000000
    106  285d		       00		      BYTE.b	%00000000
    107  285e		       00		      BYTE.b	%00000000
    108  285f		       00		      BYTE.b	%00000000
    109  2860		       00		      BYTE.b	%00000000
    110  2861		       00		      BYTE.b	%00000000
    111  2862		       00		      BYTE.b	%00000000
    112  2863		       00		      BYTE.b	%00000000
    113  2864		       00		      BYTE.b	%00000000
    114  2865		       00		      BYTE.b	%00000000
    115  2866		       00		      BYTE.b	%00000000
    116  2867		       00		      BYTE.b	%00000000
    117  2868		       00		      BYTE.b	%00000000
    118  2869		       00		      BYTE.b	%00000000
    119  286a		       00		      BYTE.b	%00000000
    120  286b		       00		      BYTE.b	%00000000
    121  286c		       00		      BYTE.b	%00000000
    122  286d		       00		      BYTE.b	%00000000
    123  286e		       00		      BYTE.b	%00000000
    124  286f		       00		      BYTE.b	%00000000
    125  2870		       00		      BYTE.b	%00000000
    126  2871		       00		      BYTE.b	%00000000
    127  2872		       00		      BYTE.b	%00000000
    128  2873		       00		      BYTE.b	%00000000
    129  2874		       00		      BYTE.b	%00000000
    130  2875		       00		      BYTE.b	%00000000
    131  2876		       00		      BYTE.b	%00000000
    132  2877		       00		      BYTE.b	%00000000
    133  2878		       00		      BYTE.b	%00000000
    134  2879		       00		      BYTE.b	%00000000
    135  287a		       00		      BYTE.b	%00000000
    136  287b		       00		      BYTE.b	%00000000
    137  287c		       00		      BYTE.b	%00000000
    138  287d		       00		      BYTE.b	%00000000
    139  287e		       00		      BYTE.b	%00000000
    140  287f		       00		      BYTE.b	%00000000
    141  2880		       00		      BYTE.b	%00000000
    142  2881		       00		      BYTE.b	%00000000
    143  2882		       00		      BYTE.b	%00000000
    144  2883		       00		      BYTE.b	%00000000
    145  2884		       00		      BYTE.b	%00000000
    146  2885
    147  2885				  -	      if	>. != >[.+(bmp_96x2_1_height)]
    148  2885				  -	      align	256
    149  2885					      endif
    150  2885
    151  2885				   bmp_96x2_1_01
    152  2885		       0d		      BYTE.b	%00001101
    153  2886		       0d		      BYTE.b	%00001101
    154  2887		       00		      BYTE.b	%00000000
    155  2888		       00		      BYTE.b	%00000000
    156  2889		       00		      BYTE.b	%00000000
    157  288a		       00		      BYTE.b	%00000000
    158  288b		       00		      BYTE.b	%00000000
    159  288c		       01		      BYTE.b	%00000001
    160  288d		       06		      BYTE.b	%00000110
    161  288e		       0e		      BYTE.b	%00001110
    162  288f		       0f		      BYTE.b	%00001111
    163  2890		       0f		      BYTE.b	%00001111
    164  2891		       0e		      BYTE.b	%00001110
    165  2892		       06		      BYTE.b	%00000110
    166  2893		       02		      BYTE.b	%00000010
    167  2894		       01		      BYTE.b	%00000001
    168  2895		       00		      BYTE.b	%00000000
    169  2896		       00		      BYTE.b	%00000000
    170  2897		       00		      BYTE.b	%00000000
    171  2898		       00		      BYTE.b	%00000000
    172  2899		       00		      BYTE.b	%00000000
    173  289a		       00		      BYTE.b	%00000000
    174  289b		       00		      BYTE.b	%00000000
    175  289c		       00		      BYTE.b	%00000000
    176  289d		       00		      BYTE.b	%00000000
    177  289e		       00		      BYTE.b	%00000000
    178  289f		       00		      BYTE.b	%00000000
    179  28a0		       00		      BYTE.b	%00000000
    180  28a1		       00		      BYTE.b	%00000000
    181  28a2		       00		      BYTE.b	%00000000
    182  28a3		       00		      BYTE.b	%00000000
    183  28a4		       00		      BYTE.b	%00000000
    184  28a5		       00		      BYTE.b	%00000000
    185  28a6		       00		      BYTE.b	%00000000
    186  28a7		       00		      BYTE.b	%00000000
    187  28a8		       1f		      BYTE.b	%00011111
    188  28a9		       00		      BYTE.b	%00000000
    189  28aa		       00		      BYTE.b	%00000000
    190  28ab		       00		      BYTE.b	%00000000
    191  28ac		       00		      BYTE.b	%00000000
    192  28ad		       01		      BYTE.b	%00000001
    193  28ae		       01		      BYTE.b	%00000001
    194  28af		       00		      BYTE.b	%00000000
    195  28b0		       01		      BYTE.b	%00000001
    196  28b1		       00		      BYTE.b	%00000000
    197  28b2		       00		      BYTE.b	%00000000
    198  28b3		       03		      BYTE.b	%00000011
    199  28b4		       03		      BYTE.b	%00000011
    200  28b5		       0f		      BYTE.b	%00001111
    201  28b6		       0f		      BYTE.b	%00001111
    202  28b7		       3c		      BYTE.b	%00111100
    203  28b8		       3c		      BYTE.b	%00111100
    204  28b9		       3c		      BYTE.b	%00111100
    205  28ba		       3c		      BYTE.b	%00111100
    206  28bb		       3c		      BYTE.b	%00111100
    207  28bc		       0f		      BYTE.b	%00001111
    208  28bd		       0f		      BYTE.b	%00001111
    209  28be		       03		      BYTE.b	%00000011
    210  28bf		       03		      BYTE.b	%00000011
    211  28c0		       00		      BYTE.b	%00000000
    212  28c1
    213  28c1				  -	      if	>. != >[.+(bmp_96x2_1_height)]
    214  28c1				  -	      align	256
    215  28c1					      endif
    216  28c1
    217  28c1				   bmp_96x2_1_02
    218  28c1		       fe		      BYTE.b	%11111110
    219  28c2		       e0		      BYTE.b	%11100000
    220  28c3		       12		      BYTE.b	%00010010
    221  28c4		       1f		      BYTE.b	%00011111
    222  28c5		       0f		      BYTE.b	%00001111
    223  28c6		       12		      BYTE.b	%00010010
    224  28c7		       60		      BYTE.b	%01100000
    225  28c8		       80		      BYTE.b	%10000000
    226  28c9		       1f		      BYTE.b	%00011111
    227  28ca		       6f		      BYTE.b	%01101111
    228  28cb		       81		      BYTE.b	%10000001
    229  28cc		       80		      BYTE.b	%10000000
    230  28cd		       00		      BYTE.b	%00000000
    231  28ce		       00		      BYTE.b	%00000000
    232  28cf		       00		      BYTE.b	%00000000
    233  28d0		       8c		      BYTE.b	%10001100
    234  28d1		       62		      BYTE.b	%01100010
    235  28d2		       11		      BYTE.b	%00010001
    236  28d3		       0c		      BYTE.b	%00001100
    237  28d4		       02		      BYTE.b	%00000010
    238  28d5		       01		      BYTE.b	%00000001
    239  28d6		       00		      BYTE.b	%00000000
    240  28d7		       00		      BYTE.b	%00000000
    241  28d8		       00		      BYTE.b	%00000000
    242  28d9		       00		      BYTE.b	%00000000
    243  28da		       00		      BYTE.b	%00000000
    244  28db		       00		      BYTE.b	%00000000
    245  28dc		       00		      BYTE.b	%00000000
    246  28dd		       00		      BYTE.b	%00000000
    247  28de		       00		      BYTE.b	%00000000
    248  28df		       00		      BYTE.b	%00000000
    249  28e0		       00		      BYTE.b	%00000000
    250  28e1		       00		      BYTE.b	%00000000
    251  28e2		       00		      BYTE.b	%00000000
    252  28e3		       00		      BYTE.b	%00000000
    253  28e4		       ff		      BYTE.b	%11111111
    254  28e5		       00		      BYTE.b	%00000000
    255  28e6		       00		      BYTE.b	%00000000
    256  28e7		       04		      BYTE.b	%00000100
    257  28e8		       f4		      BYTE.b	%11110100
    258  28e9		       37		      BYTE.b	%00110111
    259  28ea		       94		      BYTE.b	%10010100
    260  28eb		       f4		      BYTE.b	%11110100
    261  28ec		       16		      BYTE.b	%00010110
    262  28ed		       e7		      BYTE.b	%11100111
    263  28ee		       00		      BYTE.b	%00000000
    264  28ef		       fc		      BYTE.b	%11111100
    265  28f0		       fc		      BYTE.b	%11111100
    266  28f1		       0f		      BYTE.b	%00001111
    267  28f2		       0f		      BYTE.b	%00001111
    268  28f3		       00		      BYTE.b	%00000000
    269  28f4		       00		      BYTE.b	%00000000
    270  28f5		       00		      BYTE.b	%00000000
    271  28f6		       00		      BYTE.b	%00000000
    272  28f7		       00		      BYTE.b	%00000000
    273  28f8		       0f		      BYTE.b	%00001111
    274  28f9		       0f		      BYTE.b	%00001111
    275  28fa		       fc		      BYTE.b	%11111100
    276  28fb		       fc		      BYTE.b	%11111100
    277  28fc		       00		      BYTE.b	%00000000
    278  28fd
    279  28fd					      if	>. != >[.+(bmp_96x2_1_height)]
    280  2900		       00 00 00 	      align	256
    281  2900					      endif
    282  2900
    283  2900				   bmp_96x2_1_03
    284  2900		       03		      BYTE.b	%00000011
    285  2901		       0c		      BYTE.b	%00001100
    286  2902		       0c		      BYTE.b	%00001100
    287  2903		       83		      BYTE.b	%10000011
    288  2904		       f0		      BYTE.b	%11110000
    289  2905		       00		      BYTE.b	%00000000
    290  2906		       00		      BYTE.b	%00000000
    291  2907		       00		      BYTE.b	%00000000
    292  2908		       e0		      BYTE.b	%11100000
    293  2909		       ff		      BYTE.b	%11111111
    294  290a		       ff		      BYTE.b	%11111111
    295  290b		       7e		      BYTE.b	%01111110
    296  290c		       0e		      BYTE.b	%00001110
    297  290d		       0f		      BYTE.b	%00001111
    298  290e		       1f		      BYTE.b	%00011111
    299  290f		       13		      BYTE.b	%00010011
    300  2910		       0d		      BYTE.b	%00001101
    301  2911		       8c		      BYTE.b	%10001100
    302  2912		       0c		      BYTE.b	%00001100
    303  2913		       10		      BYTE.b	%00010000
    304  2914		       f0		      BYTE.b	%11110000
    305  2915		       62		      BYTE.b	%01100010
    306  2916		       11		      BYTE.b	%00010001
    307  2917		       0c		      BYTE.b	%00001100
    308  2918		       02		      BYTE.b	%00000010
    309  2919		       01		      BYTE.b	%00000001
    310  291a		       00		      BYTE.b	%00000000
    311  291b		       00		      BYTE.b	%00000000
    312  291c		       00		      BYTE.b	%00000000
    313  291d		       00		      BYTE.b	%00000000
    314  291e		       00		      BYTE.b	%00000000
    315  291f		       00		      BYTE.b	%00000000
    316  2920		       00		      BYTE.b	%00000000
    317  2921		       00		      BYTE.b	%00000000
    318  2922		       00		      BYTE.b	%00000000
    319  2923		       ff		      BYTE.b	%11111111
    320  2924		       00		      BYTE.b	%00000000
    321  2925		       00		      BYTE.b	%00000000
    322  2926		       00		      BYTE.b	%00000000
    323  2927		       0e		      BYTE.b	%00001110
    324  2928		       93		      BYTE.b	%10010011
    325  2929		       d1		      BYTE.b	%11010001
    326  292a		       51		      BYTE.b	%01010001
    327  292b		       59		      BYTE.b	%01011001
    328  292c		       8e		      BYTE.b	%10001110
    329  292d		       00		      BYTE.b	%00000000
    330  292e		       6f		      BYTE.b	%01101111
    331  292f		       6f		      BYTE.b	%01101111
    332  2930		       0f		      BYTE.b	%00001111
    333  2931		       0f		      BYTE.b	%00001111
    334  2932		       0f		      BYTE.b	%00001111
    335  2933		       0f		      BYTE.b	%00001111
    336  2934		       0f		      BYTE.b	%00001111
    337  2935		       0f		      BYTE.b	%00001111
    338  2936		       0f		      BYTE.b	%00001111
    339  2937		       03		      BYTE.b	%00000011
    340  2938		       03		      BYTE.b	%00000011
    341  2939		       00		      BYTE.b	%00000000
    342  293a		       00		      BYTE.b	%00000000
    343  293b		       00		      BYTE.b	%00000000
    344  293c
    345  293c				  -	      if	>. != >[.+(bmp_96x2_1_height)]
    346  293c				  -	      align	256
    347  293c					      endif
    348  293c
    349  293c				   bmp_96x2_1_04
    350  293c		       80		      BYTE.b	%10000000
    351  293d		       00		      BYTE.b	%00000000
    352  293e		       03		      BYTE.b	%00000011
    353  293f		       f3		      BYTE.b	%11110011
    354  2940		       00		      BYTE.b	%00000000
    355  2941		       00		      BYTE.b	%00000000
    356  2942		       00		      BYTE.b	%00000000
    357  2943		       00		      BYTE.b	%00000000
    358  2944		       02		      BYTE.b	%00000010
    359  2945		       81		      BYTE.b	%10000001
    360  2946		       92		      BYTE.b	%10010010
    361  2947		       73		      BYTE.b	%01110011
    362  2948		       73		      BYTE.b	%01110011
    363  2949		       93		      BYTE.b	%10010011
    364  294a		       83		      BYTE.b	%10000011
    365  294b		       e0		      BYTE.b	%11100000
    366  294c		       ff		      BYTE.b	%11111111
    367  294d		       1f		      BYTE.b	%00011111
    368  294e		       0f		      BYTE.b	%00001111
    369  294f		       03		      BYTE.b	%00000011
    370  2950		       02		      BYTE.b	%00000010
    371  2951		       0f		      BYTE.b	%00001111
    372  2952		       8f		      BYTE.b	%10001111
    373  2953		       0f		      BYTE.b	%00001111
    374  2954		       0f		      BYTE.b	%00001111
    375  2955		       8f		      BYTE.b	%10001111
    376  2956		       6f		      BYTE.b	%01101111
    377  2957		       0f		      BYTE.b	%00001111
    378  2958		       1f		      BYTE.b	%00011111
    379  2959		       00		      BYTE.b	%00000000
    380  295a		       03		      BYTE.b	%00000011
    381  295b		       03		      BYTE.b	%00000011
    382  295c		       01		      BYTE.b	%00000001
    383  295d		       01		      BYTE.b	%00000001
    384  295e		       00		      BYTE.b	%00000000
    385  295f		       dd		      BYTE.b	%11011101
    386  2960		       0d		      BYTE.b	%00001101
    387  2961		       00		      BYTE.b	%00000000
    388  2962		       00		      BYTE.b	%00000000
    389  2963		       38		      BYTE.b	%00111000
    390  2964		       4d		      BYTE.b	%01001101
    391  2965		       41		      BYTE.b	%01000001
    392  2966		       40		      BYTE.b	%01000000
    393  2967		       65		      BYTE.b	%01100101
    394  2968		       38		      BYTE.b	%00111000
    395  2969		       00		      BYTE.b	%00000000
    396  296a		       03		      BYTE.b	%00000011
    397  296b		       03		      BYTE.b	%00000011
    398  296c		       03		      BYTE.b	%00000011
    399  296d		       03		      BYTE.b	%00000011
    400  296e		       ff		      BYTE.b	%11111111
    401  296f		       ff		      BYTE.b	%11111111
    402  2970		       03		      BYTE.b	%00000011
    403  2971		       03		      BYTE.b	%00000011
    404  2972		       03		      BYTE.b	%00000011
    405  2973		       cf		      BYTE.b	%11001111
    406  2974		       cf		      BYTE.b	%11001111
    407  2975		       fc		      BYTE.b	%11111100
    408  2976		       fc		      BYTE.b	%11111100
    409  2977		       00		      BYTE.b	%00000000
    410  2978
    411  2978				  -	      if	>. != >[.+(bmp_96x2_1_height)]
    412  2978				  -	      align	256
    413  2978					      endif
    414  2978
    415  2978				   bmp_96x2_1_05
    416  2978		       00		      BYTE.b	%00000000
    417  2979		       00		      BYTE.b	%00000000
    418  297a		       9e		      BYTE.b	%10011110
    419  297b		       ff		      BYTE.b	%11111111
    420  297c		       00		      BYTE.b	%00000000
    421  297d		       00		      BYTE.b	%00000000
    422  297e		       00		      BYTE.b	%00000000
    423  297f		       00		      BYTE.b	%00000000
    424  2980		       6c		      BYTE.b	%01101100
    425  2981		       91		      BYTE.b	%10010001
    426  2982		       6d		      BYTE.b	%01101101
    427  2983		       fd		      BYTE.b	%11111101
    428  2984		       fd		      BYTE.b	%11111101
    429  2985		       fc		      BYTE.b	%11111100
    430  2986		       fc		      BYTE.b	%11111100
    431  2987		       01		      BYTE.b	%00000001
    432  2988		       ff		      BYTE.b	%11111111
    433  2989		       ff		      BYTE.b	%11111111
    434  298a		       ff		      BYTE.b	%11111111
    435  298b		       ff		      BYTE.b	%11111111
    436  298c		       00		      BYTE.b	%00000000
    437  298d		       fe		      BYTE.b	%11111110
    438  298e		       fe		      BYTE.b	%11111110
    439  298f		       fe		      BYTE.b	%11111110
    440  2990		       fe		      BYTE.b	%11111110
    441  2991		       fe		      BYTE.b	%11111110
    442  2992		       fe		      BYTE.b	%11111110
    443  2993		       fe		      BYTE.b	%11111110
    444  2994		       fe		      BYTE.b	%11111110
    445  2995		       00		      BYTE.b	%00000000
    446  2996		       f0		      BYTE.b	%11110000
    447  2997		       f0		      BYTE.b	%11110000
    448  2998		       e0		      BYTE.b	%11100000
    449  2999		       e0		      BYTE.b	%11100000
    450  299a		       00		      BYTE.b	%00000000
    451  299b		       f7		      BYTE.b	%11110111
    452  299c		       f6		      BYTE.b	%11110110
    453  299d		       00		      BYTE.b	%00000000
    454  299e		       00		      BYTE.b	%00000000
    455  299f		       f3		      BYTE.b	%11110011
    456  29a0		       36		      BYTE.b	%00110110
    457  29a1		       94		      BYTE.b	%10010100
    458  29a2		       f4		      BYTE.b	%11110100
    459  29a3		       14		      BYTE.b	%00010100
    460  29a4		       e2		      BYTE.b	%11100010
    461  29a5		       00		      BYTE.b	%00000000
    462  29a6		       d8		      BYTE.b	%11011000
    463  29a7		       d8		      BYTE.b	%11011000
    464  29a8		       c0		      BYTE.b	%11000000
    465  29a9		       c0		      BYTE.b	%11000000
    466  29aa		       c0		      BYTE.b	%11000000
    467  29ab		       c3		      BYTE.b	%11000011
    468  29ac		       c3		      BYTE.b	%11000011
    469  29ad		       c3		      BYTE.b	%11000011
    470  29ae		       c3		      BYTE.b	%11000011
    471  29af		       03		      BYTE.b	%00000011
    472  29b0		       03		      BYTE.b	%00000011
    473  29b1		       03		      BYTE.b	%00000011
    474  29b2		       00		      BYTE.b	%00000000
    475  29b3		       00		      BYTE.b	%00000000
    476  29b4
    477  29b4				  -	      if	>. != >[.+(bmp_96x2_1_height)]
    478  29b4				  -	      align	256
    479  29b4					      endif
    480  29b4
    481  29b4				   bmp_96x2_1_06
    482  29b4		       00		      BYTE.b	%00000000
    483  29b5		       00		      BYTE.b	%00000000
    484  29b6		       00		      BYTE.b	%00000000
    485  29b7		       e0		      BYTE.b	%11100000
    486  29b8		       10		      BYTE.b	%00010000
    487  29b9		       0c		      BYTE.b	%00001100
    488  29ba		       02		      BYTE.b	%00000010
    489  29bb		       01		      BYTE.b	%00000001
    490  29bc		       01		      BYTE.b	%00000001
    491  29bd		       90		      BYTE.b	%10010000
    492  29be		       90		      BYTE.b	%10010000
    493  29bf		       90		      BYTE.b	%10010000
    494  29c0		       8f		      BYTE.b	%10001111
    495  29c1		       10		      BYTE.b	%00010000
    496  29c2		       6f		      BYTE.b	%01101111
    497  29c3		       9f		      BYTE.b	%10011111
    498  29c4		       ff		      BYTE.b	%11111111
    499  29c5		       fe		      BYTE.b	%11111110
    500  29c6		       fd		      BYTE.b	%11111101
    501  29c7		       e1		      BYTE.b	%11100001
    502  29c8		       00		      BYTE.b	%00000000
    503  29c9		       6d		      BYTE.b	%01101101
    504  29ca		       12		      BYTE.b	%00010010
    505  29cb		       6d		      BYTE.b	%01101101
    506  29cc		       7f		      BYTE.b	%01111111
    507  29cd		       7f		      BYTE.b	%01111111
    508  29ce		       7f		      BYTE.b	%01111111
    509  29cf		       7f		      BYTE.b	%01111111
    510  29d0		       0c		      BYTE.b	%00001100
    511  29d1		       00		      BYTE.b	%00000000
    512  29d2		       00		      BYTE.b	%00000000
    513  29d3		       00		      BYTE.b	%00000000
    514  29d4		       00		      BYTE.b	%00000000
    515  29d5		       00		      BYTE.b	%00000000
    516  29d6		       00		      BYTE.b	%00000000
    517  29d7		       7f		      BYTE.b	%01111111
    518  29d8		       00		      BYTE.b	%00000000
    519  29d9		       0e		      BYTE.b	%00001110
    520  29da		       01		      BYTE.b	%00000001
    521  29db		       81		      BYTE.b	%10000001
    522  29dc		       4f		      BYTE.b	%01001111
    523  29dd		       1b		      BYTE.b	%00011011
    524  29de		       11		      BYTE.b	%00010001
    525  29df		       11		      BYTE.b	%00010001
    526  29e0		       00		      BYTE.b	%00000000
    527  29e1		       0c		      BYTE.b	%00001100
    528  29e2		       0c		      BYTE.b	%00001100
    529  29e3		       3f		      BYTE.b	%00111111
    530  29e4		       3f		      BYTE.b	%00111111
    531  29e5		       ff		      BYTE.b	%11111111
    532  29e6		       ff		      BYTE.b	%11111111
    533  29e7		       f3		      BYTE.b	%11110011
    534  29e8		       f3		      BYTE.b	%11110011
    535  29e9		       c0		      BYTE.b	%11000000
    536  29ea		       c0		      BYTE.b	%11000000
    537  29eb		       c0		      BYTE.b	%11000000
    538  29ec		       c0		      BYTE.b	%11000000
    539  29ed		       c0		      BYTE.b	%11000000
    540  29ee		       00		      BYTE.b	%00000000
    541  29ef		       00		      BYTE.b	%00000000
    542  29f0
    543  29f0					      if	>. != >[.+(bmp_96x2_1_height)]
    544  2a00		       00 00 00 00*	      align	256
    545  2a00					      endif
    546  2a00
    547  2a00				   bmp_96x2_1_07
    548  2a00		       00		      BYTE.b	%00000000
    549  2a01		       00		      BYTE.b	%00000000
    550  2a02		       00		      BYTE.b	%00000000
    551  2a03		       00		      BYTE.b	%00000000
    552  2a04		       00		      BYTE.b	%00000000
    553  2a05		       00		      BYTE.b	%00000000
    554  2a06		       00		      BYTE.b	%00000000
    555  2a07		       80		      BYTE.b	%10000000
    556  2a08		       80		      BYTE.b	%10000000
    557  2a09		       60		      BYTE.b	%01100000
    558  2a0a		       10		      BYTE.b	%00010000
    559  2a0b		       0e		      BYTE.b	%00001110
    560  2a0c		       fe		      BYTE.b	%11111110
    561  2a0d		       1f		      BYTE.b	%00011111
    562  2a0e		       f0		      BYTE.b	%11110000
    563  2a0f		       ef		      BYTE.b	%11101111
    564  2a10		       9e		      BYTE.b	%10011110
    565  2a11		       7e		      BYTE.b	%01111110
    566  2a12		       fc		      BYTE.b	%11111100
    567  2a13		       e0		      BYTE.b	%11100000
    568  2a14		       00		      BYTE.b	%00000000
    569  2a15		       80		      BYTE.b	%10000000
    570  2a16		       00		      BYTE.b	%00000000
    571  2a17		       90		      BYTE.b	%10010000
    572  2a18		       9c		      BYTE.b	%10011100
    573  2a19		       9c		      BYTE.b	%10011100
    574  2a1a		       90		      BYTE.b	%10010000
    575  2a1b		       80		      BYTE.b	%10000000
    576  2a1c		       00		      BYTE.b	%00000000
    577  2a1d		       00		      BYTE.b	%00000000
    578  2a1e		       00		      BYTE.b	%00000000
    579  2a1f		       00		      BYTE.b	%00000000
    580  2a20		       00		      BYTE.b	%00000000
    581  2a21		       00		      BYTE.b	%00000000
    582  2a22		       00		      BYTE.b	%00000000
    583  2a23		       ff		      BYTE.b	%11111111
    584  2a24		       00		      BYTE.b	%00000000
    585  2a25		       40		      BYTE.b	%01000000
    586  2a26		       41		      BYTE.b	%01000001
    587  2a27		       79		      BYTE.b	%01111001
    588  2a28		       4c		      BYTE.b	%01001100
    589  2a29		       45		      BYTE.b	%01000101
    590  2a2a		       65		      BYTE.b	%01100101
    591  2a2b		       78		      BYTE.b	%01111000
    592  2a2c		       00		      BYTE.b	%00000000
    593  2a2d		       01		      BYTE.b	%00000001
    594  2a2e		       0d		      BYTE.b	%00001101
    595  2a2f		       0d		      BYTE.b	%00001101
    596  2a30		       01		      BYTE.b	%00000001
    597  2a31		       c1		      BYTE.b	%11000001
    598  2a32		       c1		      BYTE.b	%11000001
    599  2a33		       e1		      BYTE.b	%11100001
    600  2a34		       e1		      BYTE.b	%11100001
    601  2a35		       e1		      BYTE.b	%11100001
    602  2a36		       e1		      BYTE.b	%11100001
    603  2a37		       e1		      BYTE.b	%11100001
    604  2a38		       e1		      BYTE.b	%11100001
    605  2a39		       e1		      BYTE.b	%11100001
    606  2a3a		       00		      BYTE.b	%00000000
    607  2a3b		       00		      BYTE.b	%00000000
    608  2a3c
    609  2a3c				  -	      if	>. != >[.+(bmp_96x2_1_height)]
    610  2a3c				  -	      align	256
    611  2a3c					      endif
    612  2a3c
    613  2a3c				   bmp_96x2_1_08
    614  2a3c		       00		      BYTE.b	%00000000
    615  2a3d		       00		      BYTE.b	%00000000
    616  2a3e		       00		      BYTE.b	%00000000
    617  2a3f		       00		      BYTE.b	%00000000
    618  2a40		       00		      BYTE.b	%00000000
    619  2a41		       00		      BYTE.b	%00000000
    620  2a42		       00		      BYTE.b	%00000000
    621  2a43		       00		      BYTE.b	%00000000
    622  2a44		       00		      BYTE.b	%00000000
    623  2a45		       00		      BYTE.b	%00000000
    624  2a46		       00		      BYTE.b	%00000000
    625  2a47		       7f		      BYTE.b	%01111111
    626  2a48		       00		      BYTE.b	%00000000
    627  2a49		       ff		      BYTE.b	%11111111
    628  2a4a		       00		      BYTE.b	%00000000
    629  2a4b		       fe		      BYTE.b	%11111110
    630  2a4c		       7f		      BYTE.b	%01111111
    631  2a4d		       01		      BYTE.b	%00000001
    632  2a4e		       00		      BYTE.b	%00000000
    633  2a4f		       00		      BYTE.b	%00000000
    634  2a50		       00		      BYTE.b	%00000000
    635  2a51		       00		      BYTE.b	%00000000
    636  2a52		       00		      BYTE.b	%00000000
    637  2a53		       00		      BYTE.b	%00000000
    638  2a54		       00		      BYTE.b	%00000000
    639  2a55		       00		      BYTE.b	%00000000
    640  2a56		       00		      BYTE.b	%00000000
    641  2a57		       00		      BYTE.b	%00000000
    642  2a58		       00		      BYTE.b	%00000000
    643  2a59		       00		      BYTE.b	%00000000
    644  2a5a		       00		      BYTE.b	%00000000
    645  2a5b		       00		      BYTE.b	%00000000
    646  2a5c		       00		      BYTE.b	%00000000
    647  2a5d		       00		      BYTE.b	%00000000
    648  2a5e		       00		      BYTE.b	%00000000
    649  2a5f		       ff		      BYTE.b	%11111111
    650  2a60		       00		      BYTE.b	%00000000
    651  2a61		       00		      BYTE.b	%00000000
    652  2a62		       e3		      BYTE.b	%11100011
    653  2a63		       16		      BYTE.b	%00010110
    654  2a64		       37		      BYTE.b	%00110111
    655  2a65		       e5		      BYTE.b	%11100101
    656  2a66		       14		      BYTE.b	%00010100
    657  2a67		       e3		      BYTE.b	%11100011
    658  2a68		       00		      BYTE.b	%00000000
    659  2a69		       ff		      BYTE.b	%11111111
    660  2a6a		       ff		      BYTE.b	%11111111
    661  2a6b		       e0		      BYTE.b	%11100000
    662  2a6c		       e0		      BYTE.b	%11100000
    663  2a6d		       e0		      BYTE.b	%11100000
    664  2a6e		       e0		      BYTE.b	%11100000
    665  2a6f		       ff		      BYTE.b	%11111111
    666  2a70		       ff		      BYTE.b	%11111111
    667  2a71		       e0		      BYTE.b	%11100000
    668  2a72		       e0		      BYTE.b	%11100000
    669  2a73		       e0		      BYTE.b	%11100000
    670  2a74		       ff		      BYTE.b	%11111111
    671  2a75		       ff		      BYTE.b	%11111111
    672  2a76		       00		      BYTE.b	%00000000
    673  2a77		       00		      BYTE.b	%00000000
    674  2a78
    675  2a78				  -	      if	>. != >[.+(bmp_96x2_1_height)]
    676  2a78				  -	      align	256
    677  2a78					      endif
    678  2a78
    679  2a78				   bmp_96x2_1_09
    680  2a78		       00		      BYTE.b	%00000000
    681  2a79		       00		      BYTE.b	%00000000
    682  2a7a		       00		      BYTE.b	%00000000
    683  2a7b		       00		      BYTE.b	%00000000
    684  2a7c		       00		      BYTE.b	%00000000
    685  2a7d		       00		      BYTE.b	%00000000
    686  2a7e		       00		      BYTE.b	%00000000
    687  2a7f		       00		      BYTE.b	%00000000
    688  2a80		       7c		      BYTE.b	%01111100
    689  2a81		       7c		      BYTE.b	%01111100
    690  2a82		       7e		      BYTE.b	%01111110
    691  2a83		       ff		      BYTE.b	%11111111
    692  2a84		       0f		      BYTE.b	%00001111
    693  2a85		       e0		      BYTE.b	%11100000
    694  2a86		       0c		      BYTE.b	%00001100
    695  2a87		       0c		      BYTE.b	%00001100
    696  2a88		       82		      BYTE.b	%10000010
    697  2a89		       81		      BYTE.b	%10000001
    698  2a8a		       61		      BYTE.b	%01100001
    699  2a8b		       10		      BYTE.b	%00010000
    700  2a8c		       0d		      BYTE.b	%00001101
    701  2a8d		       0d		      BYTE.b	%00001101
    702  2a8e		       01		      BYTE.b	%00000001
    703  2a8f		       03		      BYTE.b	%00000011
    704  2a90		       03		      BYTE.b	%00000011
    705  2a91		       01		      BYTE.b	%00000001
    706  2a92		       01		      BYTE.b	%00000001
    707  2a93		       01		      BYTE.b	%00000001
    708  2a94		       01		      BYTE.b	%00000001
    709  2a95		       01		      BYTE.b	%00000001
    710  2a96		       00		      BYTE.b	%00000000
    711  2a97		       00		      BYTE.b	%00000000
    712  2a98		       00		      BYTE.b	%00000000
    713  2a99		       00		      BYTE.b	%00000000
    714  2a9a		       00		      BYTE.b	%00000000
    715  2a9b		       e0		      BYTE.b	%11100000
    716  2a9c		       00		      BYTE.b	%00000000
    717  2a9d		       00		      BYTE.b	%00000000
    718  2a9e		       80		      BYTE.b	%10000000
    719  2a9f		       c0		      BYTE.b	%11000000
    720  2aa0		       20		      BYTE.b	%00100000
    721  2aa1		       80		      BYTE.b	%10000000
    722  2aa2		       c0		      BYTE.b	%11000000
    723  2aa3		       80		      BYTE.b	%10000000
    724  2aa4		       00		      BYTE.b	%00000000
    725  2aa5		       f8		      BYTE.b	%11111000
    726  2aa6		       fb		      BYTE.b	%11111011
    727  2aa7		       03		      BYTE.b	%00000011
    728  2aa8		       00		      BYTE.b	%00000000
    729  2aa9		       00		      BYTE.b	%00000000
    730  2aaa		       00		      BYTE.b	%00000000
    731  2aab		       80		      BYTE.b	%10000000
    732  2aac		       80		      BYTE.b	%10000000
    733  2aad		       00		      BYTE.b	%00000000
    734  2aae		       00		      BYTE.b	%00000000
    735  2aaf		       00		      BYTE.b	%00000000
    736  2ab0		       f8		      BYTE.b	%11111000
    737  2ab1		       f8		      BYTE.b	%11111000
    738  2ab2		       00		      BYTE.b	%00000000
    739  2ab3		       00		      BYTE.b	%00000000
    740  2ab4
    741  2ab4				  -	      if	>. != >[.+(bmp_96x2_1_height)]
    742  2ab4				  -	      align	256
    743  2ab4					      endif
    744  2ab4
    745  2ab4				   bmp_96x2_1_10
    746  2ab4		       00		      BYTE.b	%00000000
    747  2ab5		       00		      BYTE.b	%00000000
    748  2ab6		       00		      BYTE.b	%00000000
    749  2ab7		       00		      BYTE.b	%00000000
    750  2ab8		       00		      BYTE.b	%00000000
    751  2ab9		       00		      BYTE.b	%00000000
    752  2aba		       00		      BYTE.b	%00000000
    753  2abb		       00		      BYTE.b	%00000000
    754  2abc		       00		      BYTE.b	%00000000
    755  2abd		       00		      BYTE.b	%00000000
    756  2abe		       00		      BYTE.b	%00000000
    757  2abf		       80		      BYTE.b	%10000000
    758  2ac0		       e0		      BYTE.b	%11100000
    759  2ac1		       70		      BYTE.b	%01110000
    760  2ac2		       1e		      BYTE.b	%00011110
    761  2ac3		       0e		      BYTE.b	%00001110
    762  2ac4		       0e		      BYTE.b	%00001110
    763  2ac5		       8c		      BYTE.b	%10001100
    764  2ac6		       90		      BYTE.b	%10010000
    765  2ac7		       70		      BYTE.b	%01110000
    766  2ac8		       f0		      BYTE.b	%11110000
    767  2ac9		       f0		      BYTE.b	%11110000
    768  2aca		       f0		      BYTE.b	%11110000
    769  2acb		       f0		      BYTE.b	%11110000
    770  2acc		       f0		      BYTE.b	%11110000
    771  2acd		       f0		      BYTE.b	%11110000
    772  2ace		       f0		      BYTE.b	%11110000
    773  2acf		       fc		      BYTE.b	%11111100
    774  2ad0		       fc		      BYTE.b	%11111100
    775  2ad1		       fc		      BYTE.b	%11111100
    776  2ad2		       7c		      BYTE.b	%01111100
    777  2ad3		       7c		      BYTE.b	%01111100
    778  2ad4		       7e		      BYTE.b	%01111110
    779  2ad5		       1e		      BYTE.b	%00011110
    780  2ad6		       00		      BYTE.b	%00000000
    781  2ad7		       00		      BYTE.b	%00000000
    782  2ad8		       00		      BYTE.b	%00000000
    783  2ad9		       00		      BYTE.b	%00000000
    784  2ada		       00		      BYTE.b	%00000000
    785  2adb		       00		      BYTE.b	%00000000
    786  2adc		       00		      BYTE.b	%00000000
    787  2add		       00		      BYTE.b	%00000000
    788  2ade		       00		      BYTE.b	%00000000
    789  2adf		       00		      BYTE.b	%00000000
    790  2ae0		       00		      BYTE.b	%00000000
    791  2ae1		       00		      BYTE.b	%00000000
    792  2ae2		       00		      BYTE.b	%00000000
    793  2ae3		       00		      BYTE.b	%00000000
    794  2ae4		       00		      BYTE.b	%00000000
    795  2ae5		       00		      BYTE.b	%00000000
    796  2ae6		       00		      BYTE.b	%00000000
    797  2ae7		       00		      BYTE.b	%00000000
    798  2ae8		       00		      BYTE.b	%00000000
    799  2ae9		       00		      BYTE.b	%00000000
    800  2aea		       00		      BYTE.b	%00000000
    801  2aeb		       00		      BYTE.b	%00000000
    802  2aec		       00		      BYTE.b	%00000000
    803  2aed		       00		      BYTE.b	%00000000
    804  2aee		       00		      BYTE.b	%00000000
    805  2aef		       00		      BYTE.b	%00000000
    806  2af0
    807  2af0					      if	>. != >[.+(bmp_96x2_1_height)]
    808  2b00		       00 00 00 00*	      align	256
    809  2b00					      endif
    810  2b00
    811  2b00				   bmp_96x2_1_11
    812  2b00		       00		      BYTE.b	%00000000
    813  2b01		       00		      BYTE.b	%00000000
    814  2b02		       00		      BYTE.b	%00000000
    815  2b03		       00		      BYTE.b	%00000000
    816  2b04		       00		      BYTE.b	%00000000
    817  2b05		       00		      BYTE.b	%00000000
    818  2b06		       00		      BYTE.b	%00000000
    819  2b07		       00		      BYTE.b	%00000000
    820  2b08		       00		      BYTE.b	%00000000
    821  2b09		       00		      BYTE.b	%00000000
    822  2b0a		       00		      BYTE.b	%00000000
    823  2b0b		       00		      BYTE.b	%00000000
    824  2b0c		       00		      BYTE.b	%00000000
    825  2b0d		       00		      BYTE.b	%00000000
    826  2b0e		       00		      BYTE.b	%00000000
    827  2b0f		       00		      BYTE.b	%00000000
    828  2b10		       00		      BYTE.b	%00000000
    829  2b11		       00		      BYTE.b	%00000000
    830  2b12		       00		      BYTE.b	%00000000
    831  2b13		       00		      BYTE.b	%00000000
    832  2b14		       00		      BYTE.b	%00000000
    833  2b15		       00		      BYTE.b	%00000000
    834  2b16		       00		      BYTE.b	%00000000
    835  2b17		       00		      BYTE.b	%00000000
    836  2b18		       00		      BYTE.b	%00000000
    837  2b19		       00		      BYTE.b	%00000000
    838  2b1a		       00		      BYTE.b	%00000000
    839  2b1b		       00		      BYTE.b	%00000000
    840  2b1c		       00		      BYTE.b	%00000000
    841  2b1d		       00		      BYTE.b	%00000000
    842  2b1e		       00		      BYTE.b	%00000000
    843  2b1f		       00		      BYTE.b	%00000000
    844  2b20		       00		      BYTE.b	%00000000
    845  2b21		       00		      BYTE.b	%00000000
    846  2b22		       00		      BYTE.b	%00000000
    847  2b23		       00		      BYTE.b	%00000000
    848  2b24		       00		      BYTE.b	%00000000
    849  2b25		       00		      BYTE.b	%00000000
    850  2b26		       00		      BYTE.b	%00000000
    851  2b27		       00		      BYTE.b	%00000000
    852  2b28		       00		      BYTE.b	%00000000
    853  2b29		       00		      BYTE.b	%00000000
    854  2b2a		       00		      BYTE.b	%00000000
    855  2b2b		       00		      BYTE.b	%00000000
    856  2b2c		       00		      BYTE.b	%00000000
    857  2b2d		       00		      BYTE.b	%00000000
    858  2b2e		       00		      BYTE.b	%00000000
    859  2b2f		       00		      BYTE.b	%00000000
    860  2b30		       00		      BYTE.b	%00000000
    861  2b31		       00		      BYTE.b	%00000000
    862  2b32		       00		      BYTE.b	%00000000
    863  2b33		       00		      BYTE.b	%00000000
    864  2b34		       00		      BYTE.b	%00000000
    865  2b35		       00		      BYTE.b	%00000000
    866  2b36		       00		      BYTE.b	%00000000
    867  2b37		       00		      BYTE.b	%00000000
    868  2b38		       00		      BYTE.b	%00000000
    869  2b39		       00		      BYTE.b	%00000000
    870  2b3a		       00		      BYTE.b	%00000000
    871  2b3b		       00		      BYTE.b	%00000000
    872  2b3c
------- FILE titlescreen/asm/titlescreen.asm
    274  2b3c					      endif
    275  2b3c				  -	      ifconst	mk_96x2_2_on
    276  2b3c				  -	      include	"titlescreen/96x2_2_image.asm"
    277  2b3c					      endif
    278  2b3c				  -	      ifconst	mk_96x2_3_on
    279  2b3c				  -	      include	"titlescreen/96x2_3_image.asm"
    280  2b3c					      endif
    281  2b3c				  -	      ifconst	mk_96x2_4_on
    282  2b3c				  -	      include	"titlescreen/96x2_4_image.asm"
    283  2b3c					      endif
    284  2b3c				  -	      ifconst	mk_96x2_5_on
    285  2b3c				  -	      include	"titlescreen/96x2_5_image.asm"
    286  2b3c					      endif
    287  2b3c				  -	      ifconst	mk_96x2_6_on
    288  2b3c				  -	      include	"titlescreen/96x2_6_image.asm"
    289  2b3c					      endif
    290  2b3c				  -	      ifconst	mk_96x2_7_on
    291  2b3c				  -	      include	"titlescreen/96x2_7_image.asm"
    292  2b3c					      endif
    293  2b3c				  -	      ifconst	mk_96x2_8_on
    294  2b3c				  -	      include	"titlescreen/96x2_8_image.asm"
    295  2b3c					      endif
    296  2b3c
    297  2b3c				  -	      ifconst	mk_player_on
    298  2b3c				  -	      include	"titlescreen/player_image.asm"
    299  2b3c					      endif
    300  2b3c
    301  2b3c					      ifconst	mk_score_on
------- FILE titlescreen/score_image.asm LEVEL 3 PASS 3
      0  2b3c					      include	"titlescreen/score_image.asm"
      1  2b3c							; feel free to modify the score graphics - just keep each digit 8 high
      2  2b3c							; if you're looking to want to modify any one font, pick on the
      3  2b3c
      4  2b3c				  -	      ifnconst	scorecolor
      5  2b3c				  -scorecolor
      6  2b3c					      endif
      7  2b3c							; ** change this value for a different scorecolor under DPC+
      8  2b3c							;    for other kernels, just use the scorecolor variable
      9  2b3c		       0f		      .byte.b	$0f
     10  2b3d
     11  2b3d				  -	      ifnconst	NOFONT
     12  2b3d				  -NOFONT     =	0
     13  2b3d					      endif
     14  2b3d				  -	      ifnconst	STOCK
     15  2b3d				  -STOCK      =	1	;_FONTNAME
     16  2b3d					      endif
     17  2b3d				  -	      ifnconst	NEWCENTURY
     18  2b3d				  -NEWCENTURY =	2	;_FONTNAME
     19  2b3d					      endif
     20  2b3d				  -	      ifnconst	WHIMSEY
     21  2b3d				  -WHIMSEY    =	3	;_FONTNAME
     22  2b3d					      endif
     23  2b3d				  -	      ifnconst	ALARMCLOCK
     24  2b3d				  -ALARMCLOCK =	4	;_FONTNAME
     25  2b3d					      endif
     26  2b3d				  -	      ifnconst	HANDWRITTEN
     27  2b3d				  -HANDWRITTEN =	5	;_FONTNAME
     28  2b3d					      endif
     29  2b3d				  -	      ifnconst	INTERRUPTED
     30  2b3d				  -INTERRUPTED =	6	;_FONTNAME
     31  2b3d					      endif
     32  2b3d				  -	      ifnconst	TINY
     33  2b3d				  -TINY       =	7	;_FONTNAME
     34  2b3d					      endif
     35  2b3d				  -	      ifnconst	RETROPUTER
     36  2b3d				  -RETROPUTER =	8	;_FONTNAME
     37  2b3d					      endif
     38  2b3d				  -	      ifnconst	CURVES
     39  2b3d				  -CURVES     =	9	;_FONTNAME
     40  2b3d					      endif
     41  2b3d				  -	      ifnconst	HUSKY
     42  2b3d				  -HUSKY      =	10	;_FONTNAME
     43  2b3d					      endif
     44  2b3d				  -	      ifnconst	SNAKE
     45  2b3d				  -SNAKE      =	11	;_FONTNAME
     46  2b3d					      endif
     47  2b3d				  -	      ifnconst	PLOK
     48  2b3d				  -PLOK       =	13	;_FONTNAME
     49  2b3d					      endif
     50  2b3d
     51  2b3d				  -	      ifnconst	SYMBOLS
     52  2b3d				  -SYMBOLS    =	0	;_FONTNAME
     53  2b3d					      endif
     54  2b3d
     55  2b3d							; ### setup some defaults
     56  2b3d				  -	      ifnconst	fontstyle
     57  2b3d				  -fontstyle  =	STOCK
     58  2b3d					      endif
     59  2b3d
     60  2b3d							;fix up the table alignment, if necessary
     61  2b3d				  -	      if	>. != >[.+81]
     62  2b3d				  -	      align	256
     63  2b3d					      endif
     64  2b3d
     65  2b3d
     66  2b3d				   miniscoretable
     67  2b3d
     68  2b3d					      if	fontstyle == STOCK
     69  2b3d
     70  2b3d							;byte %00000000 ; STOCK
     71  2b3d
     72  2b3d		       3c		      .byte.b	%00111100	; STOCK
     73  2b3e		       66		      .byte.b	%01100110	; STOCK
     74  2b3f		       66		      .byte.b	%01100110	; STOCK
     75  2b40		       66		      .byte.b	%01100110	; STOCK
     76  2b41		       66		      .byte.b	%01100110	; STOCK
     77  2b42		       66		      .byte.b	%01100110	; STOCK
     78  2b43		       66		      .byte.b	%01100110	; STOCK
     79  2b44		       3c		      .byte.b	%00111100	; STOCK
     80  2b45
     81  2b45							;byte %00000000 ; STOCK
     82  2b45
     83  2b45		       7e		      .byte.b	%01111110	; STOCK
     84  2b46		       18		      .byte.b	%00011000	; STOCK
     85  2b47		       18		      .byte.b	%00011000	; STOCK
     86  2b48		       18		      .byte.b	%00011000	; STOCK
     87  2b49		       18		      .byte.b	%00011000	; STOCK
     88  2b4a		       38		      .byte.b	%00111000	; STOCK
     89  2b4b		       18		      .byte.b	%00011000	; STOCK
     90  2b4c		       08		      .byte.b	%00001000	; STOCK
     91  2b4d
     92  2b4d							;byte %00000000 ; STOCK
     93  2b4d
     94  2b4d		       7e		      .byte.b	%01111110	; STOCK
     95  2b4e		       60		      .byte.b	%01100000	; STOCK
     96  2b4f		       60		      .byte.b	%01100000	; STOCK
     97  2b50		       3c		      .byte.b	%00111100	; STOCK
     98  2b51		       06		      .byte.b	%00000110	; STOCK
     99  2b52		       06		      .byte.b	%00000110	; STOCK
    100  2b53		       46		      .byte.b	%01000110	; STOCK
    101  2b54		       3c		      .byte.b	%00111100	; STOCK
    102  2b55
    103  2b55							;byte %00000000 ; STOCK
    104  2b55
    105  2b55		       3c		      .byte.b	%00111100	; STOCK
    106  2b56		       46		      .byte.b	%01000110	; STOCK
    107  2b57		       06		      .byte.b	%00000110	; STOCK
    108  2b58		       06		      .byte.b	%00000110	; STOCK
    109  2b59		       1c		      .byte.b	%00011100	; STOCK
    110  2b5a		       06		      .byte.b	%00000110	; STOCK
    111  2b5b		       46		      .byte.b	%01000110	; STOCK
    112  2b5c		       3c		      .byte.b	%00111100	; STOCK
    113  2b5d
    114  2b5d							;byte %00000000 ; STOCK
    115  2b5d
    116  2b5d		       0c		      .byte.b	%00001100	; STOCK
    117  2b5e		       0c		      .byte.b	%00001100	; STOCK
    118  2b5f		       7e		      .byte.b	%01111110	; STOCK
    119  2b60		       4c		      .byte.b	%01001100	; STOCK
    120  2b61		       4c		      .byte.b	%01001100	; STOCK
    121  2b62		       2c		      .byte.b	%00101100	; STOCK
    122  2b63		       1c		      .byte.b	%00011100	; STOCK
    123  2b64		       0c		      .byte.b	%00001100	; STOCK
    124  2b65
    125  2b65							;byte %00000000 ; STOCK
    126  2b65
    127  2b65		       3c		      .byte.b	%00111100	; STOCK
    128  2b66		       46		      .byte.b	%01000110	; STOCK
    129  2b67		       06		      .byte.b	%00000110	; STOCK
    130  2b68		       06		      .byte.b	%00000110	; STOCK
    131  2b69		       3c		      .byte.b	%00111100	; STOCK
    132  2b6a		       60		      .byte.b	%01100000	; STOCK
    133  2b6b		       60		      .byte.b	%01100000	; STOCK
    134  2b6c		       7e		      .byte.b	%01111110	; STOCK
    135  2b6d
    136  2b6d							;byte %00000000 ; STOCK
    137  2b6d
    138  2b6d		       3c		      .byte.b	%00111100	; STOCK
    139  2b6e		       66		      .byte.b	%01100110	; STOCK
    140  2b6f		       66		      .byte.b	%01100110	; STOCK
    141  2b70		       66		      .byte.b	%01100110	; STOCK
    142  2b71		       7c		      .byte.b	%01111100	; STOCK
    143  2b72		       60		      .byte.b	%01100000	; STOCK
    144  2b73		       62		      .byte.b	%01100010	; STOCK
    145  2b74		       3c		      .byte.b	%00111100	; STOCK
    146  2b75
    147  2b75							;byte %00000000 ; STOCK
    148  2b75
    149  2b75		       30		      .byte.b	%00110000	; STOCK
    150  2b76		       30		      .byte.b	%00110000	; STOCK
    151  2b77		       30		      .byte.b	%00110000	; STOCK
    152  2b78		       18		      .byte.b	%00011000	; STOCK
    153  2b79		       0c		      .byte.b	%00001100	; STOCK
    154  2b7a		       06		      .byte.b	%00000110	; STOCK
    155  2b7b		       42		      .byte.b	%01000010	; STOCK
    156  2b7c		       3e		      .byte.b	%00111110	; STOCK
    157  2b7d
    158  2b7d							;byte %00000000 ; STOCK
    159  2b7d
    160  2b7d		       3c		      .byte.b	%00111100	; STOCK
    161  2b7e		       66		      .byte.b	%01100110	; STOCK
    162  2b7f		       66		      .byte.b	%01100110	; STOCK
    163  2b80		       66		      .byte.b	%01100110	; STOCK
    164  2b81		       3c		      .byte.b	%00111100	; STOCK
    165  2b82		       66		      .byte.b	%01100110	; STOCK
    166  2b83		       66		      .byte.b	%01100110	; STOCK
    167  2b84		       3c		      .byte.b	%00111100	; STOCK
    168  2b85
    169  2b85							;byte %00000000 ; STOCK
    170  2b85
    171  2b85		       3c		      .byte.b	%00111100	; STOCK
    172  2b86		       46		      .byte.b	%01000110	; STOCK
    173  2b87		       06		      .byte.b	%00000110	; STOCK
    174  2b88		       3e		      .byte.b	%00111110	; STOCK
    175  2b89		       66		      .byte.b	%01100110	; STOCK
    176  2b8a		       66		      .byte.b	%01100110	; STOCK
    177  2b8b		       66		      .byte.b	%01100110	; STOCK
    178  2b8c		       3c		      .byte.b	%00111100	; STOCK
    179  2b8d
    180  2b8d					      endif		; STOCK
    181  2b8d
    182  2b8d				  -	      if	fontstyle == NEWCENTURY
    183  2b8d				  -			;byte %00000000 ; NEWCENTURY
    184  2b8d				  -
    185  2b8d				  -	      .byte	%00111100	; NEWCENTURY
    186  2b8d				  -	      .byte	%01000010	; NEWCENTURY
    187  2b8d				  -	      .byte	%01000010	; NEWCENTURY
    188  2b8d				  -	      .byte	%01000010	; NEWCENTURY
    189  2b8d				  -	      .byte	%00100100	; NEWCENTURY
    190  2b8d				  -	      .byte	%00100100	; NEWCENTURY
    191  2b8d				  -	      .byte	%00100100	; NEWCENTURY
    192  2b8d				  -	      .byte	%00011000	; NEWCENTURY
    193  2b8d				  -
    194  2b8d				  -			;byte %00000000 ; NEWCENTURY
    195  2b8d				  -
    196  2b8d				  -	      .byte	%00001000	; NEWCENTURY
    197  2b8d				  -	      .byte	%00001000	; NEWCENTURY
    198  2b8d				  -	      .byte	%00001000	; NEWCENTURY
    199  2b8d				  -	      .byte	%00001000	; NEWCENTURY
    200  2b8d				  -	      .byte	%00001000	; NEWCENTURY
    201  2b8d				  -	      .byte	%00001000	; NEWCENTURY
    202  2b8d				  -	      .byte	%00001000	; NEWCENTURY
    203  2b8d				  -	      .byte	%00001000	; NEWCENTURY
    204  2b8d				  -
    205  2b8d				  -			;byte %00000000 ; NEWCENTURY
    206  2b8d				  -
    207  2b8d				  -	      .byte	%01111110	; NEWCENTURY
    208  2b8d				  -	      .byte	%01000000	; NEWCENTURY
    209  2b8d				  -	      .byte	%01000000	; NEWCENTURY
    210  2b8d				  -	      .byte	%00100000	; NEWCENTURY
    211  2b8d				  -	      .byte	%00011100	; NEWCENTURY
    212  2b8d				  -	      .byte	%00000010	; NEWCENTURY
    213  2b8d				  -	      .byte	%00000010	; NEWCENTURY
    214  2b8d				  -	      .byte	%00011100	; NEWCENTURY
    215  2b8d				  -
    216  2b8d				  -			;byte %00000000 ; NEWCENTURY
    217  2b8d				  -
    218  2b8d				  -	      .byte	%01111100	; NEWCENTURY
    219  2b8d				  -	      .byte	%00000010	; NEWCENTURY
    220  2b8d				  -	      .byte	%00000010	; NEWCENTURY
    221  2b8d				  -	      .byte	%00000010	; NEWCENTURY
    222  2b8d				  -	      .byte	%00111100	; NEWCENTURY
    223  2b8d				  -	      .byte	%00000010	; NEWCENTURY
    224  2b8d				  -	      .byte	%00000010	; NEWCENTURY
    225  2b8d				  -	      .byte	%00011100	; NEWCENTURY
    226  2b8d				  -
    227  2b8d				  -			;byte %00000000 ; NEWCENTURY
    228  2b8d				  -
    229  2b8d				  -	      .byte	%00000010	; NEWCENTURY
    230  2b8d				  -	      .byte	%00000010	; NEWCENTURY
    231  2b8d				  -	      .byte	%00000010	; NEWCENTURY
    232  2b8d				  -	      .byte	%00111110	; NEWCENTURY
    233  2b8d				  -	      .byte	%00100010	; NEWCENTURY
    234  2b8d				  -	      .byte	%00100010	; NEWCENTURY
    235  2b8d				  -	      .byte	%00010010	; NEWCENTURY
    236  2b8d				  -	      .byte	%00010010	; NEWCENTURY
    237  2b8d				  -
    238  2b8d				  -			;byte %00000000 ; NEWCENTURY
    239  2b8d				  -
    240  2b8d				  -	      .byte	%01111100	; NEWCENTURY
    241  2b8d				  -	      .byte	%00000010	; NEWCENTURY
    242  2b8d				  -	      .byte	%00000010	; NEWCENTURY
    243  2b8d				  -	      .byte	%00000010	; NEWCENTURY
    244  2b8d				  -	      .byte	%01111100	; NEWCENTURY
    245  2b8d				  -	      .byte	%01000000	; NEWCENTURY
    246  2b8d				  -	      .byte	%01000000	; NEWCENTURY
    247  2b8d				  -	      .byte	%01111000	; NEWCENTURY
    248  2b8d				  -
    249  2b8d				  -			;byte %00000000 ; NEWCENTURY
    250  2b8d				  -
    251  2b8d				  -	      .byte	%00111100	; NEWCENTURY
    252  2b8d				  -	      .byte	%01000010	; NEWCENTURY
    253  2b8d				  -	      .byte	%01000010	; NEWCENTURY
    254  2b8d				  -	      .byte	%01000010	; NEWCENTURY
    255  2b8d				  -	      .byte	%01111100	; NEWCENTURY
    256  2b8d				  -	      .byte	%01000000	; NEWCENTURY
    257  2b8d				  -	      .byte	%01000000	; NEWCENTURY
    258  2b8d				  -	      .byte	%00110000	; NEWCENTURY
    259  2b8d				  -
    260  2b8d				  -			;byte %00000000 ; NEWCENTURY
    261  2b8d				  -
    262  2b8d				  -	      .byte	%00010000	; NEWCENTURY
    263  2b8d				  -	      .byte	%00010000	; NEWCENTURY
    264  2b8d				  -	      .byte	%00001000	; NEWCENTURY
    265  2b8d				  -	      .byte	%00001000	; NEWCENTURY
    266  2b8d				  -	      .byte	%00000100	; NEWCENTURY
    267  2b8d				  -	      .byte	%00000100	; NEWCENTURY
    268  2b8d				  -	      .byte	%00000010	; NEWCENTURY
    269  2b8d				  -	      .byte	%00011110	; NEWCENTURY
    270  2b8d				  -
    271  2b8d				  -			;byte %00000000 ; NEWCENTURY
    272  2b8d				  -
    273  2b8d				  -	      .byte	%00111100	; NEWCENTURY
    274  2b8d				  -	      .byte	%01000010	; NEWCENTURY
    275  2b8d				  -	      .byte	%01000010	; NEWCENTURY
    276  2b8d				  -	      .byte	%01000010	; NEWCENTURY
    277  2b8d				  -	      .byte	%00111100	; NEWCENTURY
    278  2b8d				  -	      .byte	%00100100	; NEWCENTURY
    279  2b8d				  -	      .byte	%00100100	; NEWCENTURY
    280  2b8d				  -	      .byte	%00011000	; NEWCENTURY
    281  2b8d				  -
    282  2b8d				  -			;byte %00000000 ; NEWCENTURY
    283  2b8d				  -
    284  2b8d				  -	      .byte	%00111100	; NEWCENTURY
    285  2b8d				  -	      .byte	%00000010	; NEWCENTURY
    286  2b8d				  -	      .byte	%00000010	; NEWCENTURY
    287  2b8d				  -	      .byte	%00000010	; NEWCENTURY
    288  2b8d				  -	      .byte	%00001110	; NEWCENTURY
    289  2b8d				  -	      .byte	%00010010	; NEWCENTURY
    290  2b8d				  -	      .byte	%00010010	; NEWCENTURY
    291  2b8d				  -	      .byte	%00001100	; NEWCENTURY
    292  2b8d				  -
    293  2b8d					      endif		; NEWCENTURY
    294  2b8d
    295  2b8d				  -	      if	fontstyle == WHIMSEY
    296  2b8d				  -			;byte %00000000 ; WHIMSEY
    297  2b8d				  -
    298  2b8d				  -	      .byte	%00111100	; WHIMSEY
    299  2b8d				  -	      .byte	%01111110	; WHIMSEY
    300  2b8d				  -	      .byte	%01111110	; WHIMSEY
    301  2b8d				  -	      .byte	%01111110	; WHIMSEY
    302  2b8d				  -	      .byte	%01110110	; WHIMSEY
    303  2b8d				  -	      .byte	%01110110	; WHIMSEY
    304  2b8d				  -	      .byte	%01110110	; WHIMSEY
    305  2b8d				  -	      .byte	%00111100	; WHIMSEY
    306  2b8d				  -
    307  2b8d				  -			;byte %00000000 ; WHIMSEY
    308  2b8d				  -
    309  2b8d				  -	      .byte	%01111110	; WHIMSEY
    310  2b8d				  -	      .byte	%01111110	; WHIMSEY
    311  2b8d				  -	      .byte	%01111110	; WHIMSEY
    312  2b8d				  -	      .byte	%00011000	; WHIMSEY
    313  2b8d				  -	      .byte	%00011000	; WHIMSEY
    314  2b8d				  -	      .byte	%00011000	; WHIMSEY
    315  2b8d				  -	      .byte	%01111000	; WHIMSEY
    316  2b8d				  -	      .byte	%00011000	; WHIMSEY
    317  2b8d				  -
    318  2b8d				  -			;byte %00000000 ; WHIMSEY
    319  2b8d				  -
    320  2b8d				  -	      .byte	%01111110	; WHIMSEY
    321  2b8d				  -	      .byte	%01111110	; WHIMSEY
    322  2b8d				  -	      .byte	%01111110	; WHIMSEY
    323  2b8d				  -	      .byte	%01111000	; WHIMSEY
    324  2b8d				  -	      .byte	%00111100	; WHIMSEY
    325  2b8d				  -	      .byte	%00001110	; WHIMSEY
    326  2b8d				  -	      .byte	%01100110	; WHIMSEY
    327  2b8d				  -	      .byte	%00111100	; WHIMSEY
    328  2b8d				  -
    329  2b8d				  -			;byte %00000000 ; WHIMSEY
    330  2b8d				  -
    331  2b8d				  -	      .byte	%00111100	; WHIMSEY
    332  2b8d				  -	      .byte	%01111110	; WHIMSEY
    333  2b8d				  -	      .byte	%01111110	; WHIMSEY
    334  2b8d				  -	      .byte	%01101110	; WHIMSEY
    335  2b8d				  -	      .byte	%00001110	; WHIMSEY
    336  2b8d				  -	      .byte	%00111100	; WHIMSEY
    337  2b8d				  -	      .byte	%00011100	; WHIMSEY
    338  2b8d				  -	      .byte	%01111110	; WHIMSEY
    339  2b8d				  -
    340  2b8d				  -			;byte %00000000 ; WHIMSEY
    341  2b8d				  -
    342  2b8d				  -	      .byte	%00011100	; WHIMSEY
    343  2b8d				  -	      .byte	%00011100	; WHIMSEY
    344  2b8d				  -	      .byte	%01111110	; WHIMSEY
    345  2b8d				  -	      .byte	%01011100	; WHIMSEY
    346  2b8d				  -	      .byte	%01011100	; WHIMSEY
    347  2b8d				  -	      .byte	%00011100	; WHIMSEY
    348  2b8d				  -	      .byte	%00011100	; WHIMSEY
    349  2b8d				  -	      .byte	%00011100	; WHIMSEY
    350  2b8d				  -
    351  2b8d				  -			;byte %00000000 ; WHIMSEY
    352  2b8d				  -
    353  2b8d				  -	      .byte	%00111100	; WHIMSEY
    354  2b8d				  -	      .byte	%01111110	; WHIMSEY
    355  2b8d				  -	      .byte	%01111110	; WHIMSEY
    356  2b8d				  -	      .byte	%01101110	; WHIMSEY
    357  2b8d				  -	      .byte	%00001110	; WHIMSEY
    358  2b8d				  -	      .byte	%01111100	; WHIMSEY
    359  2b8d				  -	      .byte	%01110000	; WHIMSEY
    360  2b8d				  -	      .byte	%01111110	; WHIMSEY
    361  2b8d				  -
    362  2b8d				  -			;byte %00000000 ; WHIMSEY
    363  2b8d				  -
    364  2b8d				  -	      .byte	%00111100	; WHIMSEY
    365  2b8d				  -	      .byte	%01111110	; WHIMSEY
    366  2b8d				  -	      .byte	%01111110	; WHIMSEY
    367  2b8d				  -	      .byte	%01110110	; WHIMSEY
    368  2b8d				  -	      .byte	%01110110	; WHIMSEY
    369  2b8d				  -	      .byte	%01111100	; WHIMSEY
    370  2b8d				  -	      .byte	%01110000	; WHIMSEY
    371  2b8d				  -	      .byte	%00111110	; WHIMSEY
    372  2b8d				  -
    373  2b8d				  -			;byte %00000000 ; WHIMSEY
    374  2b8d				  -
    375  2b8d				  -	      .byte	%01111000	; WHIMSEY
    376  2b8d				  -	      .byte	%01111000	; WHIMSEY
    377  2b8d				  -	      .byte	%01111000	; WHIMSEY
    378  2b8d				  -	      .byte	%00111100	; WHIMSEY
    379  2b8d				  -	      .byte	%00011100	; WHIMSEY
    380  2b8d				  -	      .byte	%00001110	; WHIMSEY
    381  2b8d				  -	      .byte	%00001110	; WHIMSEY
    382  2b8d				  -	      .byte	%01111110	; WHIMSEY
    383  2b8d				  -
    384  2b8d				  -			;byte %00000000 ; WHIMSEY
    385  2b8d				  -
    386  2b8d				  -	      .byte	%00111100	; WHIMSEY
    387  2b8d				  -	      .byte	%01111110	; WHIMSEY
    388  2b8d				  -	      .byte	%01111110	; WHIMSEY
    389  2b8d				  -	      .byte	%01110110	; WHIMSEY
    390  2b8d				  -	      .byte	%01110110	; WHIMSEY
    391  2b8d				  -	      .byte	%00111100	; WHIMSEY
    392  2b8d				  -	      .byte	%01110110	; WHIMSEY
    393  2b8d				  -	      .byte	%00111100	; WHIMSEY
    394  2b8d				  -
    395  2b8d				  -			;byte %00000000 ; WHIMSEY
    396  2b8d				  -
    397  2b8d				  -	      .byte	%00111100	; WHIMSEY
    398  2b8d				  -	      .byte	%01111110	; WHIMSEY
    399  2b8d				  -	      .byte	%01111110	; WHIMSEY
    400  2b8d				  -	      .byte	%01110110	; WHIMSEY
    401  2b8d				  -	      .byte	%00000110	; WHIMSEY
    402  2b8d				  -	      .byte	%00111110	; WHIMSEY
    403  2b8d				  -	      .byte	%01110110	; WHIMSEY
    404  2b8d				  -	      .byte	%00111100	; WHIMSEY
    405  2b8d				  -
    406  2b8d					      endif		; WHIMSEY
    407  2b8d
    408  2b8d				  -	      if	fontstyle == ALARMCLOCK
    409  2b8d				  -
    410  2b8d				  -			;byte %00000000 ; ALARMCLOCK
    411  2b8d				  -
    412  2b8d				  -	      .byte	%00111100	; ALARMCLOCK
    413  2b8d				  -	      .byte	%01000010	; ALARMCLOCK
    414  2b8d				  -	      .byte	%01000010	; ALARMCLOCK
    415  2b8d				  -	      .byte	%01000010	; ALARMCLOCK
    416  2b8d				  -	      .byte	%00000000	; ALARMCLOCK
    417  2b8d				  -	      .byte	%01000010	; ALARMCLOCK
    418  2b8d				  -	      .byte	%01000010	; ALARMCLOCK
    419  2b8d				  -	      .byte	%00111100	; ALARMCLOCK
    420  2b8d				  -
    421  2b8d				  -			;byte %00000000 ; ALARMCLOCK
    422  2b8d				  -
    423  2b8d				  -	      .byte	%00000000	; ALARMCLOCK
    424  2b8d				  -	      .byte	%00000010	; ALARMCLOCK
    425  2b8d				  -	      .byte	%00000010	; ALARMCLOCK
    426  2b8d				  -	      .byte	%00000010	; ALARMCLOCK
    427  2b8d				  -	      .byte	%00000000	; ALARMCLOCK
    428  2b8d				  -	      .byte	%00000010	; ALARMCLOCK
    429  2b8d				  -	      .byte	%00000010	; ALARMCLOCK
    430  2b8d				  -	      .byte	%00000000	; ALARMCLOCK
    431  2b8d				  -
    432  2b8d				  -			;byte %00000000 ; ALARMCLOCK
    433  2b8d				  -
    434  2b8d				  -	      .byte	%00111100	; ALARMCLOCK
    435  2b8d				  -	      .byte	%01000000	; ALARMCLOCK
    436  2b8d				  -	      .byte	%01000000	; ALARMCLOCK
    437  2b8d				  -	      .byte	%01000000	; ALARMCLOCK
    438  2b8d				  -	      .byte	%00111100	; ALARMCLOCK
    439  2b8d				  -	      .byte	%00000010	; ALARMCLOCK
    440  2b8d				  -	      .byte	%00000010	; ALARMCLOCK
    441  2b8d				  -	      .byte	%00111100	; ALARMCLOCK
    442  2b8d				  -
    443  2b8d				  -			;byte %00000000 ; ALARMCLOCK
    444  2b8d				  -
    445  2b8d				  -	      .byte	%00111100	; ALARMCLOCK
    446  2b8d				  -	      .byte	%00000010	; ALARMCLOCK
    447  2b8d				  -	      .byte	%00000010	; ALARMCLOCK
    448  2b8d				  -	      .byte	%00000010	; ALARMCLOCK
    449  2b8d				  -	      .byte	%00111100	; ALARMCLOCK
    450  2b8d				  -	      .byte	%00000010	; ALARMCLOCK
    451  2b8d				  -	      .byte	%00000010	; ALARMCLOCK
    452  2b8d				  -	      .byte	%00111100	; ALARMCLOCK
    453  2b8d				  -
    454  2b8d				  -			;byte %00000000 ; ALARMCLOCK
    455  2b8d				  -
    456  2b8d				  -	      .byte	%00000000	; ALARMCLOCK
    457  2b8d				  -	      .byte	%00000010	; ALARMCLOCK
    458  2b8d				  -	      .byte	%00000010	; ALARMCLOCK
    459  2b8d				  -	      .byte	%00000010	; ALARMCLOCK
    460  2b8d				  -	      .byte	%00111100	; ALARMCLOCK
    461  2b8d				  -	      .byte	%01000010	; ALARMCLOCK
    462  2b8d				  -	      .byte	%01000010	; ALARMCLOCK
    463  2b8d				  -	      .byte	%00000000	; ALARMCLOCK
    464  2b8d				  -
    465  2b8d				  -			;byte %00000000 ; ALARMCLOCK
    466  2b8d				  -
    467  2b8d				  -	      .byte	%00111100	; ALARMCLOCK
    468  2b8d				  -	      .byte	%00000010	; ALARMCLOCK
    469  2b8d				  -	      .byte	%00000010	; ALARMCLOCK
    470  2b8d				  -	      .byte	%00000010	; ALARMCLOCK
    471  2b8d				  -	      .byte	%00111100	; ALARMCLOCK
    472  2b8d				  -	      .byte	%01000000	; ALARMCLOCK
    473  2b8d				  -	      .byte	%01000000	; ALARMCLOCK
    474  2b8d				  -	      .byte	%00111100	; ALARMCLOCK
    475  2b8d				  -
    476  2b8d				  -			;byte %00000000 ; ALARMCLOCK
    477  2b8d				  -
    478  2b8d				  -	      .byte	%00111100	; ALARMCLOCK
    479  2b8d				  -	      .byte	%01000010	; ALARMCLOCK
    480  2b8d				  -	      .byte	%01000010	; ALARMCLOCK
    481  2b8d				  -	      .byte	%01000010	; ALARMCLOCK
    482  2b8d				  -	      .byte	%00111100	; ALARMCLOCK
    483  2b8d				  -	      .byte	%01000000	; ALARMCLOCK
    484  2b8d				  -	      .byte	%01000000	; ALARMCLOCK
    485  2b8d				  -	      .byte	%00111100	; ALARMCLOCK
    486  2b8d				  -
    487  2b8d				  -			;byte %00000000 ; ALARMCLOCK
    488  2b8d				  -
    489  2b8d				  -	      .byte	%00000000	; ALARMCLOCK
    490  2b8d				  -	      .byte	%00000010	; ALARMCLOCK
    491  2b8d				  -	      .byte	%00000010	; ALARMCLOCK
    492  2b8d				  -	      .byte	%00000010	; ALARMCLOCK
    493  2b8d				  -	      .byte	%00000000	; ALARMCLOCK
    494  2b8d				  -	      .byte	%00000010	; ALARMCLOCK
    495  2b8d				  -	      .byte	%00000010	; ALARMCLOCK
    496  2b8d				  -	      .byte	%00111100	; ALARMCLOCK
    497  2b8d				  -
    498  2b8d				  -			;byte %00000000 ; ALARMCLOCK
    499  2b8d				  -
    500  2b8d				  -	      .byte	%00111100	; ALARMCLOCK
    501  2b8d				  -	      .byte	%01000010	; ALARMCLOCK
    502  2b8d				  -	      .byte	%01000010	; ALARMCLOCK
    503  2b8d				  -	      .byte	%01000010	; ALARMCLOCK
    504  2b8d				  -	      .byte	%00111100	; ALARMCLOCK
    505  2b8d				  -	      .byte	%01000010	; ALARMCLOCK
    506  2b8d				  -	      .byte	%01000010	; ALARMCLOCK
    507  2b8d				  -	      .byte	%00111100	; ALARMCLOCK
    508  2b8d				  -
    509  2b8d				  -			;byte %00000000 ; ALARMCLOCK
    510  2b8d				  -
    511  2b8d				  -	      .byte	%00111100	; ALARMCLOCK
    512  2b8d				  -	      .byte	%00000010	; ALARMCLOCK
    513  2b8d				  -	      .byte	%00000010	; ALARMCLOCK
    514  2b8d				  -	      .byte	%00000010	; ALARMCLOCK
    515  2b8d				  -	      .byte	%00111100	; ALARMCLOCK
    516  2b8d				  -	      .byte	%01000010	; ALARMCLOCK
    517  2b8d				  -	      .byte	%01000010	; ALARMCLOCK
    518  2b8d				  -	      .byte	%00111100	; ALARMCLOCK
    519  2b8d				  -
    520  2b8d				  -
    521  2b8d					      endif		; ALARMCLOCK
    522  2b8d
    523  2b8d				  -	      if	fontstyle == HANDWRITTEN
    524  2b8d				  -
    525  2b8d				  -			;byte %00000000 ; HANDWRITTEN
    526  2b8d				  -
    527  2b8d				  -	      .byte	%00110000	; HANDWRITTEN
    528  2b8d				  -	      .byte	%01001000	; HANDWRITTEN
    529  2b8d				  -	      .byte	%01001000	; HANDWRITTEN
    530  2b8d				  -	      .byte	%01001000	; HANDWRITTEN
    531  2b8d				  -	      .byte	%00100100	; HANDWRITTEN
    532  2b8d				  -	      .byte	%00100100	; HANDWRITTEN
    533  2b8d				  -	      .byte	%00010010	; HANDWRITTEN
    534  2b8d				  -	      .byte	%00001100	; HANDWRITTEN
    535  2b8d				  -
    536  2b8d				  -			;byte %00000000 ; HANDWRITTEN
    537  2b8d				  -
    538  2b8d				  -	      .byte	%00010000	; HANDWRITTEN
    539  2b8d				  -	      .byte	%00010000	; HANDWRITTEN
    540  2b8d				  -	      .byte	%00010000	; HANDWRITTEN
    541  2b8d				  -	      .byte	%00001000	; HANDWRITTEN
    542  2b8d				  -	      .byte	%00001000	; HANDWRITTEN
    543  2b8d				  -	      .byte	%00001000	; HANDWRITTEN
    544  2b8d				  -	      .byte	%00000100	; HANDWRITTEN
    545  2b8d				  -	      .byte	%00000100	; HANDWRITTEN
    546  2b8d				  -
    547  2b8d				  -			;byte %00000000 ; HANDWRITTEN
    548  2b8d				  -
    549  2b8d				  -	      .byte	%01110000	; HANDWRITTEN
    550  2b8d				  -	      .byte	%01001100	; HANDWRITTEN
    551  2b8d				  -	      .byte	%01000000	; HANDWRITTEN
    552  2b8d				  -	      .byte	%00100000	; HANDWRITTEN
    553  2b8d				  -	      .byte	%00011000	; HANDWRITTEN
    554  2b8d				  -	      .byte	%00000100	; HANDWRITTEN
    555  2b8d				  -	      .byte	%00100010	; HANDWRITTEN
    556  2b8d				  -	      .byte	%00011100	; HANDWRITTEN
    557  2b8d				  -
    558  2b8d				  -			;byte %00000000 ; HANDWRITTEN
    559  2b8d				  -
    560  2b8d				  -	      .byte	%00110000	; HANDWRITTEN
    561  2b8d				  -	      .byte	%01001000	; HANDWRITTEN
    562  2b8d				  -	      .byte	%00000100	; HANDWRITTEN
    563  2b8d				  -	      .byte	%00000100	; HANDWRITTEN
    564  2b8d				  -	      .byte	%00011000	; HANDWRITTEN
    565  2b8d				  -	      .byte	%00000100	; HANDWRITTEN
    566  2b8d				  -	      .byte	%00100010	; HANDWRITTEN
    567  2b8d				  -	      .byte	%00011100	; HANDWRITTEN
    568  2b8d				  -
    569  2b8d				  -			;byte %00000000 ; HANDWRITTEN
    570  2b8d				  -
    571  2b8d				  -	      .byte	%00010000	; HANDWRITTEN
    572  2b8d				  -	      .byte	%00010000	; HANDWRITTEN
    573  2b8d				  -	      .byte	%00001000	; HANDWRITTEN
    574  2b8d				  -	      .byte	%01111000	; HANDWRITTEN
    575  2b8d				  -	      .byte	%01000100	; HANDWRITTEN
    576  2b8d				  -	      .byte	%00100100	; HANDWRITTEN
    577  2b8d				  -	      .byte	%00010010	; HANDWRITTEN
    578  2b8d				  -	      .byte	%00000010	; HANDWRITTEN
    579  2b8d				  -
    580  2b8d				  -			;byte %00000000 ; HANDWRITTEN
    581  2b8d				  -
    582  2b8d				  -	      .byte	%00110000	; HANDWRITTEN
    583  2b8d				  -	      .byte	%01001000	; HANDWRITTEN
    584  2b8d				  -	      .byte	%00000100	; HANDWRITTEN
    585  2b8d				  -	      .byte	%00000100	; HANDWRITTEN
    586  2b8d				  -	      .byte	%00011000	; HANDWRITTEN
    587  2b8d				  -	      .byte	%00100000	; HANDWRITTEN
    588  2b8d				  -	      .byte	%00010010	; HANDWRITTEN
    589  2b8d				  -	      .byte	%00001100	; HANDWRITTEN
    590  2b8d				  -
    591  2b8d				  -			;byte %00000000 ; HANDWRITTEN
    592  2b8d				  -
    593  2b8d				  -	      .byte	%00010000	; HANDWRITTEN
    594  2b8d				  -	      .byte	%00101000	; HANDWRITTEN
    595  2b8d				  -	      .byte	%00100100	; HANDWRITTEN
    596  2b8d				  -	      .byte	%00100100	; HANDWRITTEN
    597  2b8d				  -	      .byte	%00011000	; HANDWRITTEN
    598  2b8d				  -	      .byte	%00010000	; HANDWRITTEN
    599  2b8d				  -	      .byte	%00001000	; HANDWRITTEN
    600  2b8d				  -	      .byte	%00000110	; HANDWRITTEN
    601  2b8d				  -
    602  2b8d				  -			;byte %00000000 ; HANDWRITTEN
    603  2b8d				  -
    604  2b8d				  -	      .byte	%00010000	; HANDWRITTEN
    605  2b8d				  -	      .byte	%00010000	; HANDWRITTEN
    606  2b8d				  -	      .byte	%00010000	; HANDWRITTEN
    607  2b8d				  -	      .byte	%00001000	; HANDWRITTEN
    608  2b8d				  -	      .byte	%00000100	; HANDWRITTEN
    609  2b8d				  -	      .byte	%00000100	; HANDWRITTEN
    610  2b8d				  -	      .byte	%00110010	; HANDWRITTEN
    611  2b8d				  -	      .byte	%00001110	; HANDWRITTEN
    612  2b8d				  -
    613  2b8d				  -			;byte %00000000 ; HANDWRITTEN
    614  2b8d				  -
    615  2b8d				  -	      .byte	%00110000	; HANDWRITTEN
    616  2b8d				  -	      .byte	%01001000	; HANDWRITTEN
    617  2b8d				  -	      .byte	%01000100	; HANDWRITTEN
    618  2b8d				  -	      .byte	%00100100	; HANDWRITTEN
    619  2b8d				  -	      .byte	%00011100	; HANDWRITTEN
    620  2b8d				  -	      .byte	%00010010	; HANDWRITTEN
    621  2b8d				  -	      .byte	%00001010	; HANDWRITTEN
    622  2b8d				  -	      .byte	%00000110	; HANDWRITTEN
    623  2b8d				  -
    624  2b8d				  -			;byte %00000000 ; HANDWRITTEN
    625  2b8d				  -
    626  2b8d				  -	      .byte	%00010000	; HANDWRITTEN
    627  2b8d				  -	      .byte	%00010000	; HANDWRITTEN
    628  2b8d				  -	      .byte	%00001000	; HANDWRITTEN
    629  2b8d				  -	      .byte	%00001000	; HANDWRITTEN
    630  2b8d				  -	      .byte	%00011100	; HANDWRITTEN
    631  2b8d				  -	      .byte	%00100100	; HANDWRITTEN
    632  2b8d				  -	      .byte	%00010010	; HANDWRITTEN
    633  2b8d				  -	      .byte	%00001100	; HANDWRITTEN
    634  2b8d				  -
    635  2b8d					      endif		; HANDWRITTEN
    636  2b8d
    637  2b8d				  -	      if	fontstyle == INTERRUPTED
    638  2b8d				  -
    639  2b8d				  -			;byte %00000000 ; INTERRUPTED
    640  2b8d				  -
    641  2b8d				  -	      .byte	%00110100	; INTERRUPTED
    642  2b8d				  -	      .byte	%01100110	; INTERRUPTED
    643  2b8d				  -	      .byte	%01100110	; INTERRUPTED
    644  2b8d				  -	      .byte	%01100110	; INTERRUPTED
    645  2b8d				  -	      .byte	%01100110	; INTERRUPTED
    646  2b8d				  -	      .byte	%01100110	; INTERRUPTED
    647  2b8d				  -	      .byte	%01100110	; INTERRUPTED
    648  2b8d				  -	      .byte	%00110100	; INTERRUPTED
    649  2b8d				  -
    650  2b8d				  -			;byte %00000000 ; INTERRUPTED
    651  2b8d				  -
    652  2b8d				  -	      .byte	%00111100	; INTERRUPTED
    653  2b8d				  -	      .byte	%00000000	; INTERRUPTED
    654  2b8d				  -	      .byte	%00011000	; INTERRUPTED
    655  2b8d				  -	      .byte	%00011000	; INTERRUPTED
    656  2b8d				  -	      .byte	%00011000	; INTERRUPTED
    657  2b8d				  -	      .byte	%00011000	; INTERRUPTED
    658  2b8d				  -	      .byte	%00011000	; INTERRUPTED
    659  2b8d				  -	      .byte	%00111000	; INTERRUPTED
    660  2b8d				  -
    661  2b8d				  -			;byte %00000000 ; INTERRUPTED
    662  2b8d				  -
    663  2b8d				  -	      .byte	%01101110	; INTERRUPTED
    664  2b8d				  -	      .byte	%01100000	; INTERRUPTED
    665  2b8d				  -	      .byte	%00110000	; INTERRUPTED
    666  2b8d				  -	      .byte	%00011000	; INTERRUPTED
    667  2b8d				  -	      .byte	%00001100	; INTERRUPTED
    668  2b8d				  -	      .byte	%00000110	; INTERRUPTED
    669  2b8d				  -	      .byte	%01000110	; INTERRUPTED
    670  2b8d				  -	      .byte	%00111100	; INTERRUPTED
    671  2b8d				  -
    672  2b8d				  -			;byte %00000000 ; INTERRUPTED
    673  2b8d				  -
    674  2b8d				  -	      .byte	%01111100	; INTERRUPTED
    675  2b8d				  -	      .byte	%00000110	; INTERRUPTED
    676  2b8d				  -	      .byte	%00000110	; INTERRUPTED
    677  2b8d				  -	      .byte	%00000110	; INTERRUPTED
    678  2b8d				  -	      .byte	%01110110	; INTERRUPTED
    679  2b8d				  -	      .byte	%00000110	; INTERRUPTED
    680  2b8d				  -	      .byte	%00000110	; INTERRUPTED
    681  2b8d				  -	      .byte	%01110100	; INTERRUPTED
    682  2b8d				  -
    683  2b8d				  -			;byte %00000000 ; INTERRUPTED
    684  2b8d				  -
    685  2b8d				  -	      .byte	%00000110	; INTERRUPTED
    686  2b8d				  -	      .byte	%00000110	; INTERRUPTED
    687  2b8d				  -	      .byte	%00000110	; INTERRUPTED
    688  2b8d				  -	      .byte	%00000110	; INTERRUPTED
    689  2b8d				  -	      .byte	%01110110	; INTERRUPTED
    690  2b8d				  -	      .byte	%01100110	; INTERRUPTED
    691  2b8d				  -	      .byte	%01100110	; INTERRUPTED
    692  2b8d				  -	      .byte	%01100110	; INTERRUPTED
    693  2b8d				  -
    694  2b8d				  -			;byte %00000000 ; INTERRUPTED
    695  2b8d				  -
    696  2b8d				  -	      .byte	%01111100	; INTERRUPTED
    697  2b8d				  -	      .byte	%00000110	; INTERRUPTED
    698  2b8d				  -	      .byte	%00000110	; INTERRUPTED
    699  2b8d				  -	      .byte	%00000110	; INTERRUPTED
    700  2b8d				  -	      .byte	%01111100	; INTERRUPTED
    701  2b8d				  -	      .byte	%01100000	; INTERRUPTED
    702  2b8d				  -	      .byte	%01100000	; INTERRUPTED
    703  2b8d				  -	      .byte	%01101110	; INTERRUPTED
    704  2b8d				  -
    705  2b8d				  -			;byte %00000000 ; INTERRUPTED
    706  2b8d				  -
    707  2b8d				  -	      .byte	%00101100	; INTERRUPTED
    708  2b8d				  -	      .byte	%01100110	; INTERRUPTED
    709  2b8d				  -	      .byte	%01100110	; INTERRUPTED
    710  2b8d				  -	      .byte	%01100110	; INTERRUPTED
    711  2b8d				  -	      .byte	%01101100	; INTERRUPTED
    712  2b8d				  -	      .byte	%01100000	; INTERRUPTED
    713  2b8d				  -	      .byte	%00110000	; INTERRUPTED
    714  2b8d				  -	      .byte	%00011100	; INTERRUPTED
    715  2b8d				  -
    716  2b8d				  -			;byte %00000000 ; INTERRUPTED
    717  2b8d				  -
    718  2b8d				  -	      .byte	%00011000	; INTERRUPTED
    719  2b8d				  -	      .byte	%00011000	; INTERRUPTED
    720  2b8d				  -	      .byte	%00011000	; INTERRUPTED
    721  2b8d				  -	      .byte	%00011100	; INTERRUPTED
    722  2b8d				  -	      .byte	%00001110	; INTERRUPTED
    723  2b8d				  -	      .byte	%00000110	; INTERRUPTED
    724  2b8d				  -	      .byte	%00000000	; INTERRUPTED
    725  2b8d				  -	      .byte	%01111110	; INTERRUPTED
    726  2b8d				  -
    727  2b8d				  -			;byte %00000000 ; INTERRUPTED
    728  2b8d				  -
    729  2b8d				  -	      .byte	%00110100	; INTERRUPTED
    730  2b8d				  -	      .byte	%01100110	; INTERRUPTED
    731  2b8d				  -	      .byte	%01100110	; INTERRUPTED
    732  2b8d				  -	      .byte	%01100110	; INTERRUPTED
    733  2b8d				  -	      .byte	%00110100	; INTERRUPTED
    734  2b8d				  -	      .byte	%01100110	; INTERRUPTED
    735  2b8d				  -	      .byte	%01100110	; INTERRUPTED
    736  2b8d				  -	      .byte	%00110100	; INTERRUPTED
    737  2b8d				  -
    738  2b8d				  -			;byte %00000000 ; INTERRUPTED
    739  2b8d				  -
    740  2b8d				  -	      .byte	%00111000	; INTERRUPTED
    741  2b8d				  -	      .byte	%00001100	; INTERRUPTED
    742  2b8d				  -	      .byte	%00000110	; INTERRUPTED
    743  2b8d				  -	      .byte	%00110110	; INTERRUPTED
    744  2b8d				  -	      .byte	%01100110	; INTERRUPTED
    745  2b8d				  -	      .byte	%01100110	; INTERRUPTED
    746  2b8d				  -	      .byte	%01100110	; INTERRUPTED
    747  2b8d				  -	      .byte	%00110100	; INTERRUPTED
    748  2b8d				  -
    749  2b8d					      endif		; INTERRUPTED
    750  2b8d
    751  2b8d
    752  2b8d				  -	      if	fontstyle == TINY
    753  2b8d				  -
    754  2b8d				  -			;byte %00000000 ; TINY
    755  2b8d				  -
    756  2b8d				  -	      .byte	%00000000	; TINY
    757  2b8d				  -	      .byte	%00111000	; TINY
    758  2b8d				  -	      .byte	%00101000	; TINY
    759  2b8d				  -	      .byte	%00101000	; TINY
    760  2b8d				  -	      .byte	%00101000	; TINY
    761  2b8d				  -	      .byte	%00111000	; TINY
    762  2b8d				  -	      .byte	%00000000	; TINY
    763  2b8d				  -	      .byte	%00000000	; TINY
    764  2b8d				  -
    765  2b8d				  -			;byte %00000000 ; TINY
    766  2b8d				  -
    767  2b8d				  -	      .byte	%00000000	; TINY
    768  2b8d				  -	      .byte	%00010000	; TINY
    769  2b8d				  -	      .byte	%00010000	; TINY
    770  2b8d				  -	      .byte	%00010000	; TINY
    771  2b8d				  -	      .byte	%00010000	; TINY
    772  2b8d				  -	      .byte	%00010000	; TINY
    773  2b8d				  -	      .byte	%00000000	; TINY
    774  2b8d				  -	      .byte	%00000000	; TINY
    775  2b8d				  -
    776  2b8d				  -			;byte %00000000 ; TINY
    777  2b8d				  -
    778  2b8d				  -	      .byte	%00000000	; TINY
    779  2b8d				  -	      .byte	%00111000	; TINY
    780  2b8d				  -	      .byte	%00100000	; TINY
    781  2b8d				  -	      .byte	%00111000	; TINY
    782  2b8d				  -	      .byte	%00001000	; TINY
    783  2b8d				  -	      .byte	%00111000	; TINY
    784  2b8d				  -	      .byte	%00000000	; TINY
    785  2b8d				  -	      .byte	%00000000	; TINY
    786  2b8d				  -
    787  2b8d				  -			;byte %00000000 ; TINY
    788  2b8d				  -
    789  2b8d				  -	      .byte	%00000000	; TINY
    790  2b8d				  -	      .byte	%00111000	; TINY
    791  2b8d				  -	      .byte	%00001000	; TINY
    792  2b8d				  -	      .byte	%00111000	; TINY
    793  2b8d				  -	      .byte	%00001000	; TINY
    794  2b8d				  -	      .byte	%00111000	; TINY
    795  2b8d				  -	      .byte	%00000000	; TINY
    796  2b8d				  -	      .byte	%00000000	; TINY
    797  2b8d				  -
    798  2b8d				  -			;byte %00000000 ; TINY
    799  2b8d				  -
    800  2b8d				  -	      .byte	%00000000	; TINY
    801  2b8d				  -	      .byte	%00001000	; TINY
    802  2b8d				  -	      .byte	%00001000	; TINY
    803  2b8d				  -	      .byte	%00111000	; TINY
    804  2b8d				  -	      .byte	%00101000	; TINY
    805  2b8d				  -	      .byte	%00101000	; TINY
    806  2b8d				  -	      .byte	%00000000	; TINY
    807  2b8d				  -	      .byte	%00000000	; TINY
    808  2b8d				  -
    809  2b8d				  -			;byte %00000000 ; TINY
    810  2b8d				  -
    811  2b8d				  -	      .byte	%00000000	; TINY
    812  2b8d				  -	      .byte	%00111000	; TINY
    813  2b8d				  -	      .byte	%00001000	; TINY
    814  2b8d				  -	      .byte	%00111000	; TINY
    815  2b8d				  -	      .byte	%00100000	; TINY
    816  2b8d				  -	      .byte	%00111000	; TINY
    817  2b8d				  -	      .byte	%00000000	; TINY
    818  2b8d				  -	      .byte	%00000000	; TINY
    819  2b8d				  -
    820  2b8d				  -			;byte %00000000 ; TINY
    821  2b8d				  -
    822  2b8d				  -	      .byte	%00000000	; TINY
    823  2b8d				  -	      .byte	%00111000	; TINY
    824  2b8d				  -	      .byte	%00101000	; TINY
    825  2b8d				  -	      .byte	%00111000	; TINY
    826  2b8d				  -	      .byte	%00100000	; TINY
    827  2b8d				  -	      .byte	%00111000	; TINY
    828  2b8d				  -	      .byte	%00000000	; TINY
    829  2b8d				  -	      .byte	%00000000	; TINY
    830  2b8d				  -
    831  2b8d				  -			;byte %00000000 ; TINY
    832  2b8d				  -
    833  2b8d				  -	      .byte	%00000000	; TINY
    834  2b8d				  -	      .byte	%00001000	; TINY
    835  2b8d				  -	      .byte	%00001000	; TINY
    836  2b8d				  -	      .byte	%00001000	; TINY
    837  2b8d				  -	      .byte	%00001000	; TINY
    838  2b8d				  -	      .byte	%00111000	; TINY
    839  2b8d				  -	      .byte	%00000000	; TINY
    840  2b8d				  -	      .byte	%00000000	; TINY
    841  2b8d				  -
    842  2b8d				  -			;byte %00000000 ; TINY
    843  2b8d				  -
    844  2b8d				  -	      .byte	%00000000	; TINY
    845  2b8d				  -	      .byte	%00111000	; TINY
    846  2b8d				  -	      .byte	%00101000	; TINY
    847  2b8d				  -	      .byte	%00111000	; TINY
    848  2b8d				  -	      .byte	%00101000	; TINY
    849  2b8d				  -	      .byte	%00111000	; TINY
    850  2b8d				  -	      .byte	%00000000	; TINY
    851  2b8d				  -	      .byte	%00000000	; TINY
    852  2b8d				  -
    853  2b8d				  -			;byte %00000000 ; TINY
    854  2b8d				  -
    855  2b8d				  -	      .byte	%00000000	; TINY
    856  2b8d				  -	      .byte	%00001000	; TINY
    857  2b8d				  -	      .byte	%00001000	; TINY
    858  2b8d				  -	      .byte	%00111000	; TINY
    859  2b8d				  -	      .byte	%00101000	; TINY
    860  2b8d				  -	      .byte	%00111000	; TINY
    861  2b8d				  -	      .byte	%00000000	; TINY
    862  2b8d				  -	      .byte	%00000000	; TINY
    863  2b8d				  -
    864  2b8d					      endif		; TINY
    865  2b8d
    866  2b8d				  -	      if	fontstyle == RETROPUTER
    867  2b8d				  -
    868  2b8d				  -			;byte %00000000 ; RETROPUTER
    869  2b8d				  -
    870  2b8d				  -	      .byte	%01111110	; RETROPUTER
    871  2b8d				  -	      .byte	%01000110	; RETROPUTER
    872  2b8d				  -	      .byte	%01000110	; RETROPUTER
    873  2b8d				  -	      .byte	%01000110	; RETROPUTER
    874  2b8d				  -	      .byte	%01100010	; RETROPUTER
    875  2b8d				  -	      .byte	%01100010	; RETROPUTER
    876  2b8d				  -	      .byte	%01100010	; RETROPUTER
    877  2b8d				  -	      .byte	%01111110	; RETROPUTER
    878  2b8d				  -
    879  2b8d				  -			;byte %00000000 ; RETROPUTER
    880  2b8d				  -
    881  2b8d				  -	      .byte	%00111000	; RETROPUTER
    882  2b8d				  -	      .byte	%00111000	; RETROPUTER
    883  2b8d				  -	      .byte	%00111000	; RETROPUTER
    884  2b8d				  -	      .byte	%00111000	; RETROPUTER
    885  2b8d				  -	      .byte	%00011000	; RETROPUTER
    886  2b8d				  -	      .byte	%00011000	; RETROPUTER
    887  2b8d				  -	      .byte	%00011000	; RETROPUTER
    888  2b8d				  -	      .byte	%00011000	; RETROPUTER
    889  2b8d				  -
    890  2b8d				  -			;byte %00000000 ; RETROPUTER
    891  2b8d				  -
    892  2b8d				  -	      .byte	%01111110	; RETROPUTER
    893  2b8d				  -	      .byte	%01100000	; RETROPUTER
    894  2b8d				  -	      .byte	%01100000	; RETROPUTER
    895  2b8d				  -	      .byte	%01100000	; RETROPUTER
    896  2b8d				  -	      .byte	%00111110	; RETROPUTER
    897  2b8d				  -	      .byte	%00000010	; RETROPUTER
    898  2b8d				  -	      .byte	%01000010	; RETROPUTER
    899  2b8d				  -	      .byte	%01111110	; RETROPUTER
    900  2b8d				  -
    901  2b8d				  -			;byte %00000000 ; RETROPUTER
    902  2b8d				  -
    903  2b8d				  -	      .byte	%01111110	; RETROPUTER
    904  2b8d				  -	      .byte	%01000110	; RETROPUTER
    905  2b8d				  -	      .byte	%00000110	; RETROPUTER
    906  2b8d				  -	      .byte	%00000110	; RETROPUTER
    907  2b8d				  -	      .byte	%00111110	; RETROPUTER
    908  2b8d				  -	      .byte	%00000010	; RETROPUTER
    909  2b8d				  -	      .byte	%01000010	; RETROPUTER
    910  2b8d				  -	      .byte	%01111110	; RETROPUTER
    911  2b8d				  -
    912  2b8d				  -			;byte %00000000 ; RETROPUTER
    913  2b8d				  -
    914  2b8d				  -	      .byte	%00001100	; RETROPUTER
    915  2b8d				  -	      .byte	%00001100	; RETROPUTER
    916  2b8d				  -	      .byte	%00001100	; RETROPUTER
    917  2b8d				  -	      .byte	%01111110	; RETROPUTER
    918  2b8d				  -	      .byte	%01000100	; RETROPUTER
    919  2b8d				  -	      .byte	%01000100	; RETROPUTER
    920  2b8d				  -	      .byte	%01000100	; RETROPUTER
    921  2b8d				  -	      .byte	%00000100	; RETROPUTER
    922  2b8d				  -
    923  2b8d				  -			;byte %00000000 ; RETROPUTER
    924  2b8d				  -
    925  2b8d				  -	      .byte	%01111110	; RETROPUTER
    926  2b8d				  -	      .byte	%01000110	; RETROPUTER
    927  2b8d				  -	      .byte	%00000110	; RETROPUTER
    928  2b8d				  -	      .byte	%00000110	; RETROPUTER
    929  2b8d				  -	      .byte	%01111100	; RETROPUTER
    930  2b8d				  -	      .byte	%01000000	; RETROPUTER
    931  2b8d				  -	      .byte	%01000000	; RETROPUTER
    932  2b8d				  -	      .byte	%01111110	; RETROPUTER
    933  2b8d				  -
    934  2b8d				  -			;byte %00000000 ; RETROPUTER
    935  2b8d				  -
    936  2b8d				  -	      .byte	%01111110	; RETROPUTER
    937  2b8d				  -	      .byte	%01000110	; RETROPUTER
    938  2b8d				  -	      .byte	%01000110	; RETROPUTER
    939  2b8d				  -	      .byte	%01000110	; RETROPUTER
    940  2b8d				  -	      .byte	%01111100	; RETROPUTER
    941  2b8d				  -	      .byte	%01000000	; RETROPUTER
    942  2b8d				  -	      .byte	%01000010	; RETROPUTER
    943  2b8d				  -	      .byte	%01111110	; RETROPUTER
    944  2b8d				  -
    945  2b8d				  -			;byte %00000000 ; RETROPUTER
    946  2b8d				  -
    947  2b8d				  -	      .byte	%00001100	; RETROPUTER
    948  2b8d				  -	      .byte	%00001100	; RETROPUTER
    949  2b8d				  -	      .byte	%00001100	; RETROPUTER
    950  2b8d				  -	      .byte	%00001100	; RETROPUTER
    951  2b8d				  -	      .byte	%00000100	; RETROPUTER
    952  2b8d				  -	      .byte	%00000010	; RETROPUTER
    953  2b8d				  -	      .byte	%01000010	; RETROPUTER
    954  2b8d				  -	      .byte	%01111110	; RETROPUTER
    955  2b8d				  -
    956  2b8d				  -			;byte %00000000 ; RETROPUTER
    957  2b8d				  -
    958  2b8d				  -	      .byte	%01111110	; RETROPUTER
    959  2b8d				  -	      .byte	%01000110	; RETROPUTER
    960  2b8d				  -	      .byte	%01000110	; RETROPUTER
    961  2b8d				  -	      .byte	%01000110	; RETROPUTER
    962  2b8d				  -	      .byte	%01111110	; RETROPUTER
    963  2b8d				  -	      .byte	%01000010	; RETROPUTER
    964  2b8d				  -	      .byte	%01000010	; RETROPUTER
    965  2b8d				  -	      .byte	%01111110	; RETROPUTER
    966  2b8d				  -
    967  2b8d				  -			;byte %00000000 ; RETROPUTER
    968  2b8d				  -
    969  2b8d				  -	      .byte	%00000110	; RETROPUTER
    970  2b8d				  -	      .byte	%00000110	; RETROPUTER
    971  2b8d				  -	      .byte	%00000110	; RETROPUTER
    972  2b8d				  -	      .byte	%00000010	; RETROPUTER
    973  2b8d				  -	      .byte	%01111110	; RETROPUTER
    974  2b8d				  -	      .byte	%01000010	; RETROPUTER
    975  2b8d				  -	      .byte	%01000010	; RETROPUTER
    976  2b8d				  -	      .byte	%01111110	; RETROPUTER
    977  2b8d				  -
    978  2b8d					      endif		; RETROPUTER
    979  2b8d
    980  2b8d				  -	      if	fontstyle == CURVES
    981  2b8d				  -
    982  2b8d				  -			;byte %00000000 ; CURVES
    983  2b8d				  -
    984  2b8d				  -	      .byte	%00111100	; CURVES
    985  2b8d				  -	      .byte	%01111110	; CURVES
    986  2b8d				  -	      .byte	%01100110	; CURVES
    987  2b8d				  -	      .byte	%01100110	; CURVES
    988  2b8d				  -	      .byte	%01100110	; CURVES
    989  2b8d				  -	      .byte	%01100110	; CURVES
    990  2b8d				  -	      .byte	%01111110	; CURVES
    991  2b8d				  -	      .byte	%00111100	; CURVES
    992  2b8d				  -
    993  2b8d				  -			;byte %00000000 ; CURVES
    994  2b8d				  -
    995  2b8d				  -	      .byte	%00011000	; CURVES
    996  2b8d				  -	      .byte	%00011000	; CURVES
    997  2b8d				  -	      .byte	%00011000	; CURVES
    998  2b8d				  -	      .byte	%00011000	; CURVES
    999  2b8d				  -	      .byte	%00011000	; CURVES
   1000  2b8d				  -	      .byte	%00011000	; CURVES
   1001  2b8d				  -	      .byte	%01111000	; CURVES
   1002  2b8d				  -	      .byte	%01110000	; CURVES
   1003  2b8d				  -
   1004  2b8d				  -			;byte %00000000 ; CURVES
   1005  2b8d				  -
   1006  2b8d				  -	      .byte	%01111110	; CURVES
   1007  2b8d				  -	      .byte	%01111110	; CURVES
   1008  2b8d				  -	      .byte	%01100000	; CURVES
   1009  2b8d				  -	      .byte	%01111100	; CURVES
   1010  2b8d				  -	      .byte	%00111110	; CURVES
   1011  2b8d				  -	      .byte	%00000110	; CURVES
   1012  2b8d				  -	      .byte	%01111110	; CURVES
   1013  2b8d				  -	      .byte	%01111100	; CURVES
   1014  2b8d				  -
   1015  2b8d				  -			;byte %00000000 ; CURVES
   1016  2b8d				  -
   1017  2b8d				  -	      .byte	%01111100	; CURVES
   1018  2b8d				  -	      .byte	%01111110	; CURVES
   1019  2b8d				  -	      .byte	%00001110	; CURVES
   1020  2b8d				  -	      .byte	%00111100	; CURVES
   1021  2b8d				  -	      .byte	%00111100	; CURVES
   1022  2b8d				  -	      .byte	%00001110	; CURVES
   1023  2b8d				  -	      .byte	%01111110	; CURVES
   1024  2b8d				  -	      .byte	%01111100	; CURVES
   1025  2b8d				  -
   1026  2b8d				  -			;byte %00000000 ; CURVES
   1027  2b8d				  -
   1028  2b8d				  -	      .byte	%00000110	; CURVES
   1029  2b8d				  -	      .byte	%00000110	; CURVES
   1030  2b8d				  -	      .byte	%00111110	; CURVES
   1031  2b8d				  -	      .byte	%01111110	; CURVES
   1032  2b8d				  -	      .byte	%01100110	; CURVES
   1033  2b8d				  -	      .byte	%01100110	; CURVES
   1034  2b8d				  -	      .byte	%01100110	; CURVES
   1035  2b8d				  -	      .byte	%01100110	; CURVES
   1036  2b8d				  -
   1037  2b8d				  -			;byte %00000000 ; CURVES
   1038  2b8d				  -
   1039  2b8d				  -	      .byte	%01111100	; CURVES
   1040  2b8d				  -	      .byte	%01111110	; CURVES
   1041  2b8d				  -	      .byte	%00000110	; CURVES
   1042  2b8d				  -	      .byte	%01111110	; CURVES
   1043  2b8d				  -	      .byte	%01111100	; CURVES
   1044  2b8d				  -	      .byte	%01100000	; CURVES
   1045  2b8d				  -	      .byte	%01111110	; CURVES
   1046  2b8d				  -	      .byte	%01111110	; CURVES
   1047  2b8d				  -
   1048  2b8d				  -			;byte %00000000 ; CURVES
   1049  2b8d				  -
   1050  2b8d				  -	      .byte	%00111100	; CURVES
   1051  2b8d				  -	      .byte	%01111110	; CURVES
   1052  2b8d				  -	      .byte	%01100110	; CURVES
   1053  2b8d				  -	      .byte	%01111110	; CURVES
   1054  2b8d				  -	      .byte	%01111100	; CURVES
   1055  2b8d				  -	      .byte	%01100000	; CURVES
   1056  2b8d				  -	      .byte	%01111110	; CURVES
   1057  2b8d				  -	      .byte	%00111110	; CURVES
   1058  2b8d				  -
   1059  2b8d				  -			;byte %00000000 ; CURVES
   1060  2b8d				  -
   1061  2b8d				  -	      .byte	%00000110	; CURVES
   1062  2b8d				  -	      .byte	%00000110	; CURVES
   1063  2b8d				  -	      .byte	%00000110	; CURVES
   1064  2b8d				  -	      .byte	%00000110	; CURVES
   1065  2b8d				  -	      .byte	%00000110	; CURVES
   1066  2b8d				  -	      .byte	%01100110	; CURVES
   1067  2b8d				  -	      .byte	%01111110	; CURVES
   1068  2b8d				  -	      .byte	%00111100	; CURVES
   1069  2b8d				  -
   1070  2b8d				  -			;byte %00000000 ; CURVES
   1071  2b8d				  -
   1072  2b8d				  -	      .byte	%00111100	; CURVES
   1073  2b8d				  -	      .byte	%01111110	; CURVES
   1074  2b8d				  -	      .byte	%01100110	; CURVES
   1075  2b8d				  -	      .byte	%01111110	; CURVES
   1076  2b8d				  -	      .byte	%00111100	; CURVES
   1077  2b8d				  -	      .byte	%01100110	; CURVES
   1078  2b8d				  -	      .byte	%01111110	; CURVES
   1079  2b8d				  -	      .byte	%00111100	; CURVES
   1080  2b8d				  -
   1081  2b8d				  -			;byte %00000000 ; CURVES
   1082  2b8d				  -
   1083  2b8d				  -	      .byte	%01111100	; CURVES
   1084  2b8d				  -	      .byte	%01111110	; CURVES
   1085  2b8d				  -	      .byte	%00000110	; CURVES
   1086  2b8d				  -	      .byte	%00111110	; CURVES
   1087  2b8d				  -	      .byte	%01111110	; CURVES
   1088  2b8d				  -	      .byte	%01100110	; CURVES
   1089  2b8d				  -	      .byte	%01111110	; CURVES
   1090  2b8d				  -	      .byte	%00111100	; CURVES
   1091  2b8d				  -
   1092  2b8d					      endif		; CURVES
   1093  2b8d
   1094  2b8d
   1095  2b8d				  -	      if	fontstyle == HUSKY
   1096  2b8d				  -
   1097  2b8d				  -			;byte %00000000 ; HUSKY
   1098  2b8d				  -
   1099  2b8d				  -	      .byte	%01111100	; HUSKY
   1100  2b8d				  -	      .byte	%11111110	; HUSKY
   1101  2b8d				  -	      .byte	%11101110	; HUSKY
   1102  2b8d				  -	      .byte	%11101110	; HUSKY
   1103  2b8d				  -	      .byte	%11101110	; HUSKY
   1104  2b8d				  -	      .byte	%11101110	; HUSKY
   1105  2b8d				  -	      .byte	%11111110	; HUSKY
   1106  2b8d				  -	      .byte	%01111100	; HUSKY
   1107  2b8d				  -
   1108  2b8d				  -			;byte %00000000 ; HUSKY
   1109  2b8d				  -
   1110  2b8d				  -	      .byte	%00111000	; HUSKY
   1111  2b8d				  -	      .byte	%00111000	; HUSKY
   1112  2b8d				  -	      .byte	%00111000	; HUSKY
   1113  2b8d				  -	      .byte	%00111000	; HUSKY
   1114  2b8d				  -	      .byte	%00111000	; HUSKY
   1115  2b8d				  -	      .byte	%00111000	; HUSKY
   1116  2b8d				  -	      .byte	%00111000	; HUSKY
   1117  2b8d				  -	      .byte	%00111000	; HUSKY
   1118  2b8d				  -
   1119  2b8d				  -			;byte %00000000 ; HUSKY
   1120  2b8d				  -
   1121  2b8d				  -	      .byte	%11111110	; HUSKY
   1122  2b8d				  -	      .byte	%11111110	; HUSKY
   1123  2b8d				  -	      .byte	%11100000	; HUSKY
   1124  2b8d				  -	      .byte	%11111100	; HUSKY
   1125  2b8d				  -	      .byte	%01111110	; HUSKY
   1126  2b8d				  -	      .byte	%00001110	; HUSKY
   1127  2b8d				  -	      .byte	%11111110	; HUSKY
   1128  2b8d				  -	      .byte	%11111100	; HUSKY
   1129  2b8d				  -
   1130  2b8d				  -			;byte %00000000 ; HUSKY
   1131  2b8d				  -
   1132  2b8d				  -	      .byte	%11111100	; HUSKY
   1133  2b8d				  -	      .byte	%11111110	; HUSKY
   1134  2b8d				  -	      .byte	%00001110	; HUSKY
   1135  2b8d				  -	      .byte	%11111100	; HUSKY
   1136  2b8d				  -	      .byte	%11111100	; HUSKY
   1137  2b8d				  -	      .byte	%00001110	; HUSKY
   1138  2b8d				  -	      .byte	%11111110	; HUSKY
   1139  2b8d				  -	      .byte	%11111100	; HUSKY
   1140  2b8d				  -
   1141  2b8d				  -			;byte %00000000 ; HUSKY
   1142  2b8d				  -
   1143  2b8d				  -	      .byte	%00011100	; HUSKY
   1144  2b8d				  -	      .byte	%00011100	; HUSKY
   1145  2b8d				  -	      .byte	%11111110	; HUSKY
   1146  2b8d				  -	      .byte	%11111110	; HUSKY
   1147  2b8d				  -	      .byte	%11011100	; HUSKY
   1148  2b8d				  -	      .byte	%11011100	; HUSKY
   1149  2b8d				  -	      .byte	%00011100	; HUSKY
   1150  2b8d				  -	      .byte	%00011100	; HUSKY
   1151  2b8d				  -
   1152  2b8d				  -			;byte %00000000 ; HUSKY
   1153  2b8d				  -
   1154  2b8d				  -	      .byte	%11111100	; HUSKY
   1155  2b8d				  -	      .byte	%11111110	; HUSKY
   1156  2b8d				  -	      .byte	%00001110	; HUSKY
   1157  2b8d				  -	      .byte	%11111110	; HUSKY
   1158  2b8d				  -	      .byte	%11111100	; HUSKY
   1159  2b8d				  -	      .byte	%11100000	; HUSKY
   1160  2b8d				  -	      .byte	%11111110	; HUSKY
   1161  2b8d				  -	      .byte	%11111110	; HUSKY
   1162  2b8d				  -
   1163  2b8d				  -			;byte %00000000 ; HUSKY
   1164  2b8d				  -
   1165  2b8d				  -	      .byte	%01111100	; HUSKY
   1166  2b8d				  -	      .byte	%11111110	; HUSKY
   1167  2b8d				  -	      .byte	%11101110	; HUSKY
   1168  2b8d				  -	      .byte	%11111110	; HUSKY
   1169  2b8d				  -	      .byte	%11111100	; HUSKY
   1170  2b8d				  -	      .byte	%11100000	; HUSKY
   1171  2b8d				  -	      .byte	%11111110	; HUSKY
   1172  2b8d				  -	      .byte	%01111110	; HUSKY
   1173  2b8d				  -
   1174  2b8d				  -			;byte %00000000 ; HUSKY
   1175  2b8d				  -
   1176  2b8d				  -	      .byte	%00111000	; HUSKY
   1177  2b8d				  -	      .byte	%00111000	; HUSKY
   1178  2b8d				  -	      .byte	%00111000	; HUSKY
   1179  2b8d				  -	      .byte	%00111000	; HUSKY
   1180  2b8d				  -	      .byte	%00011100	; HUSKY
   1181  2b8d				  -	      .byte	%00001110	; HUSKY
   1182  2b8d				  -	      .byte	%11111110	; HUSKY
   1183  2b8d				  -	      .byte	%11111110	; HUSKY
   1184  2b8d				  -
   1185  2b8d				  -			;byte %00000000 ; HUSKY
   1186  2b8d				  -
   1187  2b8d				  -	      .byte	%01111100	; HUSKY
   1188  2b8d				  -	      .byte	%11111110	; HUSKY
   1189  2b8d				  -	      .byte	%11101110	; HUSKY
   1190  2b8d				  -	      .byte	%11111110	; HUSKY
   1191  2b8d				  -	      .byte	%01111100	; HUSKY
   1192  2b8d				  -	      .byte	%11101110	; HUSKY
   1193  2b8d				  -	      .byte	%11111110	; HUSKY
   1194  2b8d				  -	      .byte	%01111100	; HUSKY
   1195  2b8d				  -
   1196  2b8d				  -			;byte %00000000 ; HUSKY
   1197  2b8d				  -
   1198  2b8d				  -	      .byte	%11111100	; HUSKY
   1199  2b8d				  -	      .byte	%11111110	; HUSKY
   1200  2b8d				  -	      .byte	%00001110	; HUSKY
   1201  2b8d				  -	      .byte	%01111110	; HUSKY
   1202  2b8d				  -	      .byte	%11111110	; HUSKY
   1203  2b8d				  -	      .byte	%11101110	; HUSKY
   1204  2b8d				  -	      .byte	%11111110	; HUSKY
   1205  2b8d				  -	      .byte	%01111100	; HUSKY
   1206  2b8d				  -
   1207  2b8d					      endif		; HUSKY
   1208  2b8d
   1209  2b8d
   1210  2b8d				  -	      if	fontstyle == SNAKE
   1211  2b8d				  -
   1212  2b8d				  -			;byte %00000000 ; SNAKE
   1213  2b8d				  -
   1214  2b8d				  -	      .byte	%01111110	; SNAKE
   1215  2b8d				  -	      .byte	%01000010	; SNAKE
   1216  2b8d				  -	      .byte	%01000010	; SNAKE
   1217  2b8d				  -	      .byte	%01000010	; SNAKE
   1218  2b8d				  -	      .byte	%01000010	; SNAKE
   1219  2b8d				  -	      .byte	%01000010	; SNAKE
   1220  2b8d				  -	      .byte	%01000010	; SNAKE
   1221  2b8d				  -	      .byte	%01111110	; SNAKE
   1222  2b8d				  -
   1223  2b8d				  -			;byte %00000000 ; SNAKE
   1224  2b8d				  -
   1225  2b8d				  -	      .byte	%00111000	; SNAKE
   1226  2b8d				  -	      .byte	%00101000	; SNAKE
   1227  2b8d				  -	      .byte	%00001000	; SNAKE
   1228  2b8d				  -	      .byte	%00001000	; SNAKE
   1229  2b8d				  -	      .byte	%00001000	; SNAKE
   1230  2b8d				  -	      .byte	%00001000	; SNAKE
   1231  2b8d				  -	      .byte	%00001000	; SNAKE
   1232  2b8d				  -	      .byte	%00111000	; SNAKE
   1233  2b8d				  -
   1234  2b8d				  -			;byte %00000000 ; SNAKE
   1235  2b8d				  -
   1236  2b8d				  -	      .byte	%01111110	; SNAKE
   1237  2b8d				  -	      .byte	%01000010	; SNAKE
   1238  2b8d				  -	      .byte	%01000110	; SNAKE
   1239  2b8d				  -	      .byte	%01000000	; SNAKE
   1240  2b8d				  -	      .byte	%01111110	; SNAKE
   1241  2b8d				  -	      .byte	%00000010	; SNAKE
   1242  2b8d				  -	      .byte	%01000010	; SNAKE
   1243  2b8d				  -	      .byte	%01111110	; SNAKE
   1244  2b8d				  -
   1245  2b8d				  -			;byte %00000000 ; SNAKE
   1246  2b8d				  -
   1247  2b8d				  -	      .byte	%01111110	; SNAKE
   1248  2b8d				  -	      .byte	%01000010	; SNAKE
   1249  2b8d				  -	      .byte	%01100010	; SNAKE
   1250  2b8d				  -	      .byte	%00000010	; SNAKE
   1251  2b8d				  -	      .byte	%01111110	; SNAKE
   1252  2b8d				  -	      .byte	%00000010	; SNAKE
   1253  2b8d				  -	      .byte	%01000010	; SNAKE
   1254  2b8d				  -	      .byte	%01111110	; SNAKE
   1255  2b8d				  -
   1256  2b8d				  -			;byte %00000000 ; SNAKE
   1257  2b8d				  -
   1258  2b8d				  -	      .byte	%00001110	; SNAKE
   1259  2b8d				  -	      .byte	%00001010	; SNAKE
   1260  2b8d				  -	      .byte	%00000010	; SNAKE
   1261  2b8d				  -	      .byte	%01111110	; SNAKE
   1262  2b8d				  -	      .byte	%01000010	; SNAKE
   1263  2b8d				  -	      .byte	%01000010	; SNAKE
   1264  2b8d				  -	      .byte	%01000010	; SNAKE
   1265  2b8d				  -	      .byte	%01100110	; SNAKE
   1266  2b8d				  -
   1267  2b8d				  -			;byte %00000000 ; SNAKE
   1268  2b8d				  -
   1269  2b8d				  -	      .byte	%01111110	; SNAKE
   1270  2b8d				  -	      .byte	%01000010	; SNAKE
   1271  2b8d				  -	      .byte	%01100010	; SNAKE
   1272  2b8d				  -	      .byte	%00000010	; SNAKE
   1273  2b8d				  -	      .byte	%01111110	; SNAKE
   1274  2b8d				  -	      .byte	%01000000	; SNAKE
   1275  2b8d				  -	      .byte	%01000010	; SNAKE
   1276  2b8d				  -	      .byte	%01111110	; SNAKE
   1277  2b8d				  -
   1278  2b8d				  -			;byte %00000000 ; SNAKE
   1279  2b8d				  -
   1280  2b8d				  -	      .byte	%01111110	; SNAKE
   1281  2b8d				  -	      .byte	%01000010	; SNAKE
   1282  2b8d				  -	      .byte	%01000010	; SNAKE
   1283  2b8d				  -	      .byte	%01111110	; SNAKE
   1284  2b8d				  -	      .byte	%01000000	; SNAKE
   1285  2b8d				  -	      .byte	%01000110	; SNAKE
   1286  2b8d				  -	      .byte	%01000010	; SNAKE
   1287  2b8d				  -	      .byte	%01111110	; SNAKE
   1288  2b8d				  -
   1289  2b8d				  -			;byte %00000000 ; SNAKE
   1290  2b8d				  -
   1291  2b8d				  -	      .byte	%00000110	; SNAKE
   1292  2b8d				  -	      .byte	%00000010	; SNAKE
   1293  2b8d				  -	      .byte	%00000010	; SNAKE
   1294  2b8d				  -	      .byte	%00000010	; SNAKE
   1295  2b8d				  -	      .byte	%00000010	; SNAKE
   1296  2b8d				  -	      .byte	%01100010	; SNAKE
   1297  2b8d				  -	      .byte	%01000010	; SNAKE
   1298  2b8d				  -	      .byte	%01111110	; SNAKE
   1299  2b8d				  -
   1300  2b8d				  -			;byte %00000000 ; SNAKE
   1301  2b8d				  -
   1302  2b8d				  -	      .byte	%01111110	; SNAKE
   1303  2b8d				  -	      .byte	%01000010	; SNAKE
   1304  2b8d				  -	      .byte	%01000010	; SNAKE
   1305  2b8d				  -	      .byte	%01000010	; SNAKE
   1306  2b8d				  -	      .byte	%01111110	; SNAKE
   1307  2b8d				  -	      .byte	%01000010	; SNAKE
   1308  2b8d				  -	      .byte	%01000010	; SNAKE
   1309  2b8d				  -	      .byte	%01111110	; SNAKE
   1310  2b8d				  -
   1311  2b8d				  -			;byte %00000000 ; SNAKE
   1312  2b8d				  -
   1313  2b8d				  -	      .byte	%00001110	; SNAKE
   1314  2b8d				  -	      .byte	%00001010	; SNAKE
   1315  2b8d				  -	      .byte	%00000010	; SNAKE
   1316  2b8d				  -	      .byte	%00000010	; SNAKE
   1317  2b8d				  -	      .byte	%01111110	; SNAKE
   1318  2b8d				  -	      .byte	%01000010	; SNAKE
   1319  2b8d				  -	      .byte	%01000010	; SNAKE
   1320  2b8d				  -	      .byte	%01111110	; SNAKE
   1321  2b8d				  -
   1322  2b8d				  -
   1323  2b8d					      endif		; SNAKE
   1324  2b8d
   1325  2b8d				  -	      if	fontstyle == PLOK
   1326  2b8d				  -
   1327  2b8d				  -			;byte %00000000 ; PLOK
   1328  2b8d				  -
   1329  2b8d				  -	      .byte	%00000000	; PLOK
   1330  2b8d				  -	      .byte	%00111000	; PLOK
   1331  2b8d				  -	      .byte	%01100100	; PLOK
   1332  2b8d				  -	      .byte	%01100010	; PLOK
   1333  2b8d				  -	      .byte	%01100010	; PLOK
   1334  2b8d				  -	      .byte	%00110110	; PLOK
   1335  2b8d				  -	      .byte	%00011100	; PLOK
   1336  2b8d				  -	      .byte	%00000000	; PLOK
   1337  2b8d				  -
   1338  2b8d				  -			;byte %00000000 ; PLOK
   1339  2b8d				  -
   1340  2b8d				  -	      .byte	%00000000	; PLOK
   1341  2b8d				  -	      .byte	%00010000	; PLOK
   1342  2b8d				  -	      .byte	%00011100	; PLOK
   1343  2b8d				  -	      .byte	%00011100	; PLOK
   1344  2b8d				  -	      .byte	%00011000	; PLOK
   1345  2b8d				  -	      .byte	%00111000	; PLOK
   1346  2b8d				  -	      .byte	%00011000	; PLOK
   1347  2b8d				  -	      .byte	%00000000	; PLOK
   1348  2b8d				  -
   1349  2b8d				  -			;byte %00000000 ; PLOK
   1350  2b8d				  -
   1351  2b8d				  -	      .byte	%00000000	; PLOK
   1352  2b8d				  -	      .byte	%00001110	; PLOK
   1353  2b8d				  -	      .byte	%01111110	; PLOK
   1354  2b8d				  -	      .byte	%00011000	; PLOK
   1355  2b8d				  -	      .byte	%00001100	; PLOK
   1356  2b8d				  -	      .byte	%00000110	; PLOK
   1357  2b8d				  -	      .byte	%00111100	; PLOK
   1358  2b8d				  -	      .byte	%00000000	; PLOK
   1359  2b8d				  -
   1360  2b8d				  -			;byte %00000000 ; PLOK
   1361  2b8d				  -
   1362  2b8d				  -	      .byte	%00000000	; PLOK
   1363  2b8d				  -	      .byte	%00111100	; PLOK
   1364  2b8d				  -	      .byte	%01101110	; PLOK
   1365  2b8d				  -	      .byte	%00001110	; PLOK
   1366  2b8d				  -	      .byte	%00011100	; PLOK
   1367  2b8d				  -	      .byte	%00000110	; PLOK
   1368  2b8d				  -	      .byte	%01111100	; PLOK
   1369  2b8d				  -	      .byte	%00000000	; PLOK
   1370  2b8d				  -
   1371  2b8d				  -			;byte %00000000 ; PLOK
   1372  2b8d				  -
   1373  2b8d				  -	      .byte	%00000000	; PLOK
   1374  2b8d				  -	      .byte	%00011000	; PLOK
   1375  2b8d				  -	      .byte	%01111110	; PLOK
   1376  2b8d				  -	      .byte	%01101100	; PLOK
   1377  2b8d				  -	      .byte	%00100100	; PLOK
   1378  2b8d				  -	      .byte	%00110000	; PLOK
   1379  2b8d				  -	      .byte	%00110000	; PLOK
   1380  2b8d				  -	      .byte	%00000000	; PLOK
   1381  2b8d				  -
   1382  2b8d				  -			;byte %00000000 ; PLOK
   1383  2b8d				  -
   1384  2b8d				  -	      .byte	%00000000	; PLOK
   1385  2b8d				  -	      .byte	%00111100	; PLOK
   1386  2b8d				  -	      .byte	%01001110	; PLOK
   1387  2b8d				  -	      .byte	%00011100	; PLOK
   1388  2b8d				  -	      .byte	%01100000	; PLOK
   1389  2b8d				  -	      .byte	%01111100	; PLOK
   1390  2b8d				  -	      .byte	%00011100	; PLOK
   1391  2b8d				  -	      .byte	%00000000	; PLOK
   1392  2b8d				  -
   1393  2b8d				  -			;byte %00000000 ; PLOK
   1394  2b8d				  -
   1395  2b8d				  -	      .byte	%00000000	; PLOK
   1396  2b8d				  -	      .byte	%00111100	; PLOK
   1397  2b8d				  -	      .byte	%01000110	; PLOK
   1398  2b8d				  -	      .byte	%01101100	; PLOK
   1399  2b8d				  -	      .byte	%01110000	; PLOK
   1400  2b8d				  -	      .byte	%00111000	; PLOK
   1401  2b8d				  -	      .byte	%00010000	; PLOK
   1402  2b8d				  -	      .byte	%00000000	; PLOK
   1403  2b8d				  -
   1404  2b8d				  -			;byte %00000000 ; PLOK
   1405  2b8d				  -
   1406  2b8d				  -	      .byte	%00000000	; PLOK
   1407  2b8d				  -	      .byte	%00111100	; PLOK
   1408  2b8d				  -	      .byte	%00011100	; PLOK
   1409  2b8d				  -	      .byte	%00001100	; PLOK
   1410  2b8d				  -	      .byte	%00000110	; PLOK
   1411  2b8d				  -	      .byte	%01111110	; PLOK
   1412  2b8d				  -	      .byte	%00110000	; PLOK
   1413  2b8d				  -	      .byte	%00000000	; PLOK
   1414  2b8d				  -
   1415  2b8d				  -			;byte %00000000 ; PLOK
   1416  2b8d				  -
   1417  2b8d				  -	      .byte	%00000000	; PLOK
   1418  2b8d				  -	      .byte	%00111100	; PLOK
   1419  2b8d				  -	      .byte	%01001110	; PLOK
   1420  2b8d				  -	      .byte	%01101110	; PLOK
   1421  2b8d				  -	      .byte	%00111100	; PLOK
   1422  2b8d				  -	      .byte	%01100100	; PLOK
   1423  2b8d				  -	      .byte	%00111000	; PLOK
   1424  2b8d				  -	      .byte	%00000000	; PLOK
   1425  2b8d				  -
   1426  2b8d				  -			;byte %00000000 ; PLOK
   1427  2b8d				  -
   1428  2b8d				  -	      .byte	%00000000	; PLOK
   1429  2b8d				  -	      .byte	%00011000	; PLOK
   1430  2b8d				  -	      .byte	%00001100	; PLOK
   1431  2b8d				  -	      .byte	%00011100	; PLOK
   1432  2b8d				  -	      .byte	%00100110	; PLOK
   1433  2b8d				  -	      .byte	%01001110	; PLOK
   1434  2b8d				  -	      .byte	%00111100	; PLOK
   1435  2b8d				  -	      .byte	%00000000	; PLOK
   1436  2b8d				  -
   1437  2b8d					      endif		; PLOK
   1438  2b8d
   1439  2b8d							; ### any characters that aren't font specific follow...
   1440  2b8d
   1441  2b8d				  -	      ifconst	fontcharSPACE
   1442  2b8d				  -			;byte %00000000 ; SYMBOLS
   1443  2b8d				  -
   1444  2b8d				  -	      .byte	%00000000	; SYMBOLS
   1445  2b8d				  -	      .byte	%00000000	; SYMBOLS
   1446  2b8d				  -	      .byte	%00000000	; SYMBOLS
   1447  2b8d				  -	      .byte	%00000000	; SYMBOLS
   1448  2b8d				  -	      .byte	%00000000	; SYMBOLS
   1449  2b8d				  -	      .byte	%00000000	; SYMBOLS
   1450  2b8d				  -	      .byte	%00000000	; SYMBOLS
   1451  2b8d				  -	      .byte	%00000000	; SYMBOLS
   1452  2b8d				  -
   1453  2b8d				  -			;byte %00000000 ; SYMBOLS
   1454  2b8d					      endif		; fontcharSPACE
   1455  2b8d
   1456  2b8d				  -	      ifconst	fontcharDOLLAR
   1457  2b8d				  -			;byte %00000000 ; SYMBOLS
   1458  2b8d				  -
   1459  2b8d				  -	      .byte	%00000000	; SYMBOLS
   1460  2b8d				  -	      .byte	%00010000	; SYMBOLS
   1461  2b8d				  -	      .byte	%01111100	; SYMBOLS
   1462  2b8d				  -	      .byte	%00010010	; SYMBOLS
   1463  2b8d				  -	      .byte	%01111100	; SYMBOLS
   1464  2b8d				  -	      .byte	%10010000	; SYMBOLS
   1465  2b8d				  -	      .byte	%01111100	; SYMBOLS
   1466  2b8d				  -	      .byte	%00010000	; SYMBOLS
   1467  2b8d				  -
   1468  2b8d				  -			;byte %00000000 ; SYMBOLS
   1469  2b8d				  -
   1470  2b8d					      endif		; fontcharDOLLAR
   1471  2b8d
   1472  2b8d				  -	      ifconst	fontcharPOUND
   1473  2b8d				  -			;byte %00000000 ; SYMBOLS
   1474  2b8d				  -
   1475  2b8d				  -	      .byte	%01111110	; SYMBOLS
   1476  2b8d				  -	      .byte	%01000000	; SYMBOLS
   1477  2b8d				  -	      .byte	%00100000	; SYMBOLS
   1478  2b8d				  -	      .byte	%00100000	; SYMBOLS
   1479  2b8d				  -	      .byte	%01111000	; SYMBOLS
   1480  2b8d				  -	      .byte	%00100000	; SYMBOLS
   1481  2b8d				  -	      .byte	%00100010	; SYMBOLS
   1482  2b8d				  -	      .byte	%00011100	; SYMBOLS
   1483  2b8d				  -
   1484  2b8d				  -			;byte %00000000 ; SYMBOLS
   1485  2b8d				  -
   1486  2b8d					      endif		; fontcharPOUND
   1487  2b8d
   1488  2b8d
   1489  2b8d				  -	      ifconst	fontcharMRHAPPY
   1490  2b8d				  -			;byte %00000000 ; SYMBOLS
   1491  2b8d				  -
   1492  2b8d				  -	      .byte	%00111100	; SYMBOLS
   1493  2b8d				  -	      .byte	%01100110	; SYMBOLS
   1494  2b8d				  -	      .byte	%01011010	; SYMBOLS
   1495  2b8d				  -	      .byte	%01111110	; SYMBOLS
   1496  2b8d				  -	      .byte	%01111110	; SYMBOLS
   1497  2b8d				  -	      .byte	%01011010	; SYMBOLS
   1498  2b8d				  -	      .byte	%01111110	; SYMBOLS
   1499  2b8d				  -	      .byte	%00111100	; SYMBOLS
   1500  2b8d				  -
   1501  2b8d				  -			;byte %00000000 ; SYMBOLS
   1502  2b8d				  -
   1503  2b8d					      endif		; fontcharMRHAPPY
   1504  2b8d
   1505  2b8d				  -	      ifconst	fontcharMRSAD
   1506  2b8d				  -			;byte %00000000 ; SYMBOLS
   1507  2b8d				  -
   1508  2b8d				  -	      .byte	%00111100	; SYMBOLS
   1509  2b8d				  -	      .byte	%01011010	; SYMBOLS
   1510  2b8d				  -	      .byte	%01100110	; SYMBOLS
   1511  2b8d				  -	      .byte	%01111110	; SYMBOLS
   1512  2b8d				  -	      .byte	%01111110	; SYMBOLS
   1513  2b8d				  -	      .byte	%01011010	; SYMBOLS
   1514  2b8d				  -	      .byte	%01111110	; SYMBOLS
   1515  2b8d				  -	      .byte	%00111100	; SYMBOLS
   1516  2b8d				  -
   1517  2b8d				  -			;byte %00000000 ; SYMBOLS
   1518  2b8d				  -
   1519  2b8d					      endif		; fontcharMRSAD
   1520  2b8d
   1521  2b8d
   1522  2b8d				  -	      ifconst	fontcharCOPYRIGHT
   1523  2b8d				  -			;byte %00000000 ; SYMBOLS
   1524  2b8d				  -
   1525  2b8d				  -	      .byte	%00000000	; SYMBOLS
   1526  2b8d				  -	      .byte	%00111000	; SYMBOLS
   1527  2b8d				  -	      .byte	%01000100	; SYMBOLS
   1528  2b8d				  -	      .byte	%10111010	; SYMBOLS
   1529  2b8d				  -	      .byte	%10100010	; SYMBOLS
   1530  2b8d				  -	      .byte	%10111010	; SYMBOLS
   1531  2b8d				  -	      .byte	%01000100	; SYMBOLS
   1532  2b8d				  -	      .byte	%00111000	; SYMBOLS
   1533  2b8d				  -
   1534  2b8d				  -			;byte %00000000 ; SYMBOLS
   1535  2b8d				  -
   1536  2b8d					      endif		; fontcharCOPYRIGHT
   1537  2b8d
   1538  2b8d
   1539  2b8d				  -	      ifconst	fontcharFUJI
   1540  2b8d				  -
   1541  2b8d				  -			;byte %00000000 ; ** these commented-out blanks are for the preview generation program
   1542  2b8d				  -
   1543  2b8d				  -	      .byte	%01110000	; SYMBOLS
   1544  2b8d				  -	      .byte	%01111001	; SYMBOLS
   1545  2b8d				  -	      .byte	%00011101	; SYMBOLS
   1546  2b8d				  -	      .byte	%00001101	; SYMBOLS
   1547  2b8d				  -	      .byte	%00001101	; SYMBOLS
   1548  2b8d				  -	      .byte	%00001101	; SYMBOLS
   1549  2b8d				  -	      .byte	%00001101	; SYMBOLS
   1550  2b8d				  -	      .byte	%00000000	; SYMBOLS
   1551  2b8d				  -
   1552  2b8d				  -			;byte %00000000 ; SYMBOLS
   1553  2b8d				  -
   1554  2b8d				  -	      .byte	%00001110	; SYMBOLS
   1555  2b8d				  -	      .byte	%10011110	; SYMBOLS
   1556  2b8d				  -	      .byte	%10111000	; SYMBOLS
   1557  2b8d				  -	      .byte	%10110000	; SYMBOLS
   1558  2b8d				  -	      .byte	%10110000	; SYMBOLS
   1559  2b8d				  -	      .byte	%10110000	; SYMBOLS
   1560  2b8d				  -	      .byte	%10110000	; SYMBOLS
   1561  2b8d				  -	      .byte	%00000000	; SYMBOLS
   1562  2b8d				  -
   1563  2b8d				  -			;byte %00000000 ; SYMBOLS
   1564  2b8d				  -
   1565  2b8d					      endif		; fontcharFUJI
   1566  2b8d
   1567  2b8d
   1568  2b8d				  -	      ifconst	fontcharHEART
   1569  2b8d				  -			;byte %00000000 ; SYMBOLS
   1570  2b8d				  -
   1571  2b8d				  -	      .byte	%00010000	; SYMBOLS
   1572  2b8d				  -	      .byte	%00111000	; SYMBOLS
   1573  2b8d				  -	      .byte	%01111100	; SYMBOLS
   1574  2b8d				  -	      .byte	%01111100	; SYMBOLS
   1575  2b8d				  -	      .byte	%11111110	; SYMBOLS
   1576  2b8d				  -	      .byte	%11111110	; SYMBOLS
   1577  2b8d				  -	      .byte	%11101110	; SYMBOLS
   1578  2b8d				  -	      .byte	%01000100	; SYMBOLS
   1579  2b8d				  -
   1580  2b8d				  -			;byte %00000000 ; SYMBOLS
   1581  2b8d				  -
   1582  2b8d					      endif		; fontcharHEART
   1583  2b8d
   1584  2b8d				  -	      ifconst	fontcharDIAMOND
   1585  2b8d				  -			;byte %00000000 ; SYMBOLS
   1586  2b8d				  -
   1587  2b8d				  -	      .byte	%00010000	; SYMBOLS
   1588  2b8d				  -	      .byte	%00111000	; SYMBOLS
   1589  2b8d				  -	      .byte	%01111100	; SYMBOLS
   1590  2b8d				  -	      .byte	%11111110	; SYMBOLS
   1591  2b8d				  -	      .byte	%11111110	; SYMBOLS
   1592  2b8d				  -	      .byte	%01111100	; SYMBOLS
   1593  2b8d				  -	      .byte	%00111000	; SYMBOLS
   1594  2b8d				  -	      .byte	%00010000	; SYMBOLS
   1595  2b8d				  -
   1596  2b8d				  -			;byte %00000000 ; SYMBOLS
   1597  2b8d				  -
   1598  2b8d					      endif		; fontcharDIAMOND
   1599  2b8d
   1600  2b8d				  -	      ifconst	fontcharSPADE
   1601  2b8d				  -			;byte %00000000 ; SYMBOLS
   1602  2b8d				  -
   1603  2b8d				  -	      .byte	%00111000	; SYMBOLS
   1604  2b8d				  -	      .byte	%00010000	; SYMBOLS
   1605  2b8d				  -	      .byte	%01010100	; SYMBOLS
   1606  2b8d				  -	      .byte	%11111110	; SYMBOLS
   1607  2b8d				  -	      .byte	%11111110	; SYMBOLS
   1608  2b8d				  -	      .byte	%01111100	; SYMBOLS
   1609  2b8d				  -	      .byte	%00111000	; SYMBOLS
   1610  2b8d				  -	      .byte	%00010000	; SYMBOLS
   1611  2b8d				  -
   1612  2b8d				  -			;byte %00000000 ; SYMBOLS
   1613  2b8d				  -
   1614  2b8d					      endif		; fontcharSPADE
   1615  2b8d
   1616  2b8d				  -	      ifconst	fontcharCLUB
   1617  2b8d				  -			;byte %00000000 ; SYMBOLS
   1618  2b8d				  -
   1619  2b8d				  -	      .byte	%00111000	; SYMBOLS
   1620  2b8d				  -	      .byte	%00010000	; SYMBOLS
   1621  2b8d				  -	      .byte	%11010110	; SYMBOLS
   1622  2b8d				  -	      .byte	%11111110	; SYMBOLS
   1623  2b8d				  -	      .byte	%11010110	; SYMBOLS
   1624  2b8d				  -	      .byte	%00111000	; SYMBOLS
   1625  2b8d				  -	      .byte	%00111000	; SYMBOLS
   1626  2b8d				  -	      .byte	%00000000	; SYMBOLS
   1627  2b8d				  -
   1628  2b8d				  -			;byte %00000000 ; SYMBOLS
   1629  2b8d				  -
   1630  2b8d					      endif		; fontcharCLUB
   1631  2b8d
   1632  2b8d
   1633  2b8d				  -	      ifconst	fontcharCOLON
   1634  2b8d				  -			;byte %00000000 ; SYMBOLS
   1635  2b8d				  -
   1636  2b8d				  -	      .byte	%00000000	; SYMBOLS
   1637  2b8d				  -	      .byte	%00011000	; SYMBOLS
   1638  2b8d				  -	      .byte	%00011000	; SYMBOLS
   1639  2b8d				  -	      .byte	%00000000	; SYMBOLS
   1640  2b8d				  -	      .byte	%00000000	; SYMBOLS
   1641  2b8d				  -	      .byte	%00011000	; SYMBOLS
   1642  2b8d				  -	      .byte	%00011000	; SYMBOLS
   1643  2b8d				  -	      .byte	%00000000	; SYMBOLS
   1644  2b8d				  -
   1645  2b8d				  -			;byte %00000000 ; SYMBOLS
   1646  2b8d				  -
   1647  2b8d					      endif		; fontcharCOLON
   1648  2b8d
   1649  2b8d
   1650  2b8d				  -	      ifconst	fontcharBLOCK
   1651  2b8d				  -
   1652  2b8d				  -			;byte %00000000 ; SYMBOLS
   1653  2b8d				  -
   1654  2b8d				  -	      .byte	%11111111	; SYMBOLS
   1655  2b8d				  -	      .byte	%11111111	; SYMBOLS
   1656  2b8d				  -	      .byte	%11111111	; SYMBOLS
   1657  2b8d				  -	      .byte	%11111111	; SYMBOLS
   1658  2b8d				  -	      .byte	%11111111	; SYMBOLS
   1659  2b8d				  -	      .byte	%11111111	; SYMBOLS
   1660  2b8d				  -	      .byte	%11111111	; SYMBOLS
   1661  2b8d				  -	      .byte	%11111111	; SYMBOLS
   1662  2b8d				  -
   1663  2b8d				  -			;byte %00000000 ; SYMBOLS
   1664  2b8d				  -
   1665  2b8d					      endif		; fontcharBLOCK
   1666  2b8d
   1667  2b8d				  -	      ifconst	fontcharUNDERLINE
   1668  2b8d				  -
   1669  2b8d				  -			;byte %00000000 ; SYMBOLS
   1670  2b8d				  -
   1671  2b8d				  -	      .byte	%11111111	; SYMBOLS
   1672  2b8d				  -	      .byte	%00000000	; SYMBOLS
   1673  2b8d				  -	      .byte	%00000000	; SYMBOLS
   1674  2b8d				  -	      .byte	%00000000	; SYMBOLS
   1675  2b8d				  -	      .byte	%00000000	; SYMBOLS
   1676  2b8d				  -	      .byte	%00000000	; SYMBOLS
   1677  2b8d				  -	      .byte	%00000000	; SYMBOLS
   1678  2b8d				  -	      .byte	%00000000	; SYMBOLS
   1679  2b8d				  -
   1680  2b8d				  -			;byte %00000000 ; SYMBOLS
   1681  2b8d				  -
   1682  2b8d					      endif		; fontcharUNDERLINE
   1683  2b8d
   1684  2b8d				  -	      ifconst	fontcharARISIDE
   1685  2b8d				  -			;byte %00000000 ; SYMBOLS
   1686  2b8d				  -
   1687  2b8d				  -	      .byte	%00000000	; SYMBOLS
   1688  2b8d				  -	      .byte	%00101010	; SYMBOLS
   1689  2b8d				  -	      .byte	%00101010	; SYMBOLS
   1690  2b8d				  -	      .byte	%00101100	; SYMBOLS
   1691  2b8d				  -	      .byte	%01111111	; SYMBOLS
   1692  2b8d				  -	      .byte	%00110111	; SYMBOLS
   1693  2b8d				  -	      .byte	%00000010	; SYMBOLS
   1694  2b8d				  -	      .byte	%00000001	; SYMBOLS
   1695  2b8d				  -
   1696  2b8d				  -			;byte %00000000 ; SYMBOLS
   1697  2b8d				  -
   1698  2b8d					      endif		; fontcharARISIDE
   1699  2b8d
   1700  2b8d				  -	      ifconst	fontcharARIFACE
   1701  2b8d				  -			;byte %00000000 ; SYMBOLS
   1702  2b8d				  -
   1703  2b8d				  -	      .byte	%00001000	; SYMBOLS
   1704  2b8d				  -	      .byte	%00011100	; SYMBOLS
   1705  2b8d				  -	      .byte	%00111110	; SYMBOLS
   1706  2b8d				  -	      .byte	%00101010	; SYMBOLS
   1707  2b8d				  -	      .byte	%00011100	; SYMBOLS
   1708  2b8d				  -	      .byte	%01010100	; SYMBOLS
   1709  2b8d				  -	      .byte	%00100100	; SYMBOLS
   1710  2b8d				  -	      .byte	%00000010	; SYMBOLS
   1711  2b8d				  -
   1712  2b8d				  -			;byte %00000000 ; SYMBOLS
   1713  2b8d				  -
   1714  2b8d				  -
   1715  2b8d					      endif		; fontcharARIRACE
   1716  2b8d
------- FILE titlescreen/asm/titlescreen.asm
    303  2b8d					      endif
    304  2b8d
    305  2b8d					      ifconst	mk_gameselect_on
------- FILE titlescreen/gameselect_image.asm LEVEL 3 PASS 3
      0  2b8d					      include	"titlescreen/gameselect_image.asm"
      1  2b8d				  -	      ifnconst	bmp_gameselect_color
      2  2b8d				  -bmp_gameselect_color
      3  2b8d					      endif
      4  2b8d		       0f		      .byte.b	$0f
      5  2b8e
      6  2b8e				  -	      if	>. != >[.+5]
      7  2b8e				  -	      align	256
      8  2b8e					      endif
      9  2b8e				   bmp_gameselect_CHAR0
     10  2b8e
     11  2b8e		       7a		      .byte.b	%01111010
     12  2b8f		       8a		      .byte.b	%10001010
     13  2b90		       bb		      .byte.b	%10111011
     14  2b91		       82		      .byte.b	%10000010
     15  2b92		       79		      .byte.b	%01111001
     16  2b93
     17  2b93				  -	      if	>. != >[.+5]
     18  2b93				  -	      align	256
     19  2b93					      endif
     20  2b93				   bmp_gameselect_CHAR1
     21  2b93
     22  2b93		       51		      .byte.b	%01010001
     23  2b94		       51		      .byte.b	%01010001
     24  2b95		       d5		      .byte.b	%11010101
     25  2b96		       5b		      .byte.b	%01011011
     26  2b97		       91		      .byte.b	%10010001
     27  2b98
     28  2b98				  -	      if	>. != >[.+5]
     29  2b98				  -	      align	256
     30  2b98					      endif
     31  2b98				   bmp_gameselect_CHAR2
     32  2b98		       78		      .byte.b	%01111000
     33  2b99		       40		      .byte.b	%01000000
     34  2b9a		       70		      .byte.b	%01110000
     35  2b9b		       40		      .byte.b	%01000000
     36  2b9c		       78		      .byte.b	%01111000
     37  2b9d
     38  2b9d				  -	      if	>. != >[.+5]
     39  2b9d				  -	      align	256
     40  2b9d					      endif
     41  2b9d				   bmp_gameselect_CHAR3
     42  2b9d		       00		      .byte.b	%00000000
     43  2b9e		       00		      .byte.b	%00000000
     44  2b9f		       00		      .byte.b	%00000000
     45  2ba0		       00		      .byte.b	%00000000
     46  2ba1		       00		      .byte.b	%00000000
     47  2ba2
     48  2ba2				  -	      if	>. != >[.+80]
     49  2ba2				  -	      align	256
     50  2ba2					      endif
     51  2ba2
     52  2ba2				   font_gameselect_img
     53  2ba2		       3c		      .byte.b	%00111100
     54  2ba3		       66		      .byte.b	%01100110
     55  2ba4		       66		      .byte.b	%01100110
     56  2ba5		       66		      .byte.b	%01100110
     57  2ba6		       3c		      .byte.b	%00111100
     58  2ba7
     59  2ba7		       3c		      .byte.b	%00111100
     60  2ba8		       18		      .byte.b	%00011000
     61  2ba9		       18		      .byte.b	%00011000
     62  2baa		       18		      .byte.b	%00011000
     63  2bab		       38		      .byte.b	%00111000
     64  2bac
     65  2bac		       7e		      .byte.b	%01111110
     66  2bad		       60		      .byte.b	%01100000
     67  2bae		       3c		      .byte.b	%00111100
     68  2baf		       06		      .byte.b	%00000110
     69  2bb0		       7c		      .byte.b	%01111100
     70  2bb1
     71  2bb1		       7c		      .byte.b	%01111100
     72  2bb2		       06		      .byte.b	%00000110
     73  2bb3		       1c		      .byte.b	%00011100
     74  2bb4		       06		      .byte.b	%00000110
     75  2bb5		       7c		      .byte.b	%01111100
     76  2bb6
     77  2bb6		       06		      .byte.b	%00000110
     78  2bb7		       06		      .byte.b	%00000110
     79  2bb8		       7e		      .byte.b	%01111110
     80  2bb9		       66		      .byte.b	%01100110
     81  2bba		       66		      .byte.b	%01100110
     82  2bbb
     83  2bbb		       7c		      .byte.b	%01111100
     84  2bbc		       06		      .byte.b	%00000110
     85  2bbd		       7c		      .byte.b	%01111100
     86  2bbe		       60		      .byte.b	%01100000
     87  2bbf		       7e		      .byte.b	%01111110
     88  2bc0
     89  2bc0		       3c		      .byte.b	%00111100
     90  2bc1		       66		      .byte.b	%01100110
     91  2bc2		       7c		      .byte.b	%01111100
     92  2bc3		       60		      .byte.b	%01100000
     93  2bc4		       3c		      .byte.b	%00111100
     94  2bc5
     95  2bc5		       18		      .byte.b	%00011000
     96  2bc6		       18		      .byte.b	%00011000
     97  2bc7		       0c		      .byte.b	%00001100
     98  2bc8		       06		      .byte.b	%00000110
     99  2bc9		       7e		      .byte.b	%01111110
    100  2bca
    101  2bca		       3c		      .byte.b	%00111100
    102  2bcb		       66		      .byte.b	%01100110
    103  2bcc		       3c		      .byte.b	%00111100
    104  2bcd		       66		      .byte.b	%01100110
    105  2bce		       3c		      .byte.b	%00111100
    106  2bcf
    107  2bcf		       3c		      .byte.b	%00111100
    108  2bd0		       06		      .byte.b	%00000110
    109  2bd1		       3e		      .byte.b	%00111110
    110  2bd2		       66		      .byte.b	%01100110
    111  2bd3		       3c		      .byte.b	%00111100
    112  2bd4
    113  2bd4				  -	      ifnconst	gamenumber
    114  2bd4				  -gamenumber
    115  2bd4					      endif
    116  2bd4		       00		      .byte.b	0
    117  2bd5
------- FILE titlescreen/asm/titlescreen.asm
    307  2bd5					      endif
    308  2bd5
    309  2bd5				  -	      ifconst	mk_player_on
    310  2bd5				  -	      include	"titlescreen/asm/player_kernel.asm"
    311  2bd5					      endif		;mk_player_on
    312  2bd5
    313  2bd5
------- FILE d:\Firmaplus\Firmaplus_intern\Atari\PlusROM\Projekte-batariBasic\CaveApocalypse\C.A.V.E. Apocalypse.bas.asm
   5919  2bd5
   5920  2bd5				   .
   5921  2bd5							; 
   5922  2bd5
   5923  2bd5				   .
   5924  2bd5							; 
   5925  2bd5
   5926  2bd5				   .
   5927  2bd5							; 
   5928  2bd5
   5929  2bd5				   .
   5930  2bd5							; 
   5931  2bd5
   5932  2bd5				   .
   5933  2bd5							; 
   5934  2bd5
   5935  2bd5				   .L0630		;  bank 3
   5936  2bd5
   5937  2bd5					      if	ECHO2
      1020 bytes of ROM space left in bank 2
   5938  2bd5					      echo	"    ",[(start_bank2 - *)]d , "bytes of ROM space left in bank 2")
   5939  2bd5					      endif
   5940  2bd5		       00 01	   ECHO2      =	1
   5941  2fd1					      ORG	$2FF4-bscode_length
   5942  2fd1					      RORG	$BFF4-bscode_length
   5943  2fd1		       a2 ff	   start_bank2 ldx	#$ff
   5944  2fd3				  -	      ifconst	FASTFETCH	; using DPC+
   5945  2fd3				  -	      stx	FASTFETCH
   5946  2fd3					      endif
   5947  2fd3		       9a		      txs
   5948  2fd4				  -	      if	bankswitch == 64
   5949  2fd4				  -	      lda	#(((>(start-1)) & $0F) | $F0)
   5950  2fd4					      else
   5951  2fd4		       a9 f2		      lda	#>(start-1)
   5952  2fd6					      endif
   5953  2fd6		       48		      pha
   5954  2fd7		       a9 b0		      lda	#<(start-1)
   5955  2fd9		       48		      pha
   5956  2fda		       48		      pha
   5957  2fdb		       8a		      txa
   5958  2fdc		       48		      pha
   5959  2fdd		       ba		      tsx
   5960  2fde					      if	bankswitch != 64
   5961  2fde		       b5 04		      lda	4,x	; get high byte of return address
   5962  2fe0		       2a		      rol
   5963  2fe1		       2a		      rol
   5964  2fe2		       2a		      rol
   5965  2fe3		       2a		      rol
   5966  2fe4		       29 03		      and	#bs_mask	;1 3 or 7 for F8/F6/F4
   5967  2fe6		       aa		      tax
   5968  2fe7		       e8		      inx
   5969  2fe8				  -	      else
   5970  2fe8				  -	      lda	4,x	; get high byte of return address
   5971  2fe8				  -	      tay
   5972  2fe8				  -	      ora	#$10	; change our bank nibble into a valid rom mirror
   5973  2fe8				  -	      sta	4,x
   5974  2fe8				  -	      tya
   5975  2fe8				  -	      lsr
   5976  2fe8				  -	      lsr
   5977  2fe8				  -	      lsr
   5978  2fe8				  -	      lsr
   5979  2fe8				  -	      tax
   5980  2fe8				  -	      inx
   5981  2fe8					      endif
   5982  2fe8		       bd f5 1f 	      lda	bankswitch_hotspot-1,x
   5983  2feb		       68		      pla
   5984  2fec		       aa		      tax
   5985  2fed		       68		      pla
   5986  2fee		       60		      rts
   5987  2fef				  -	      if	((* & $1FFF) > ((bankswitch_hotspot & $1FFF) - 1))
   5988  2fef				  -	      echo	"WARNING: size parameter in banksw.asm too small - the program probably will not work."
   5989  2fef				  -	      echo	"Change to",[(*-begin_bscode+1)&$FF]d,"and try again."
   5990  2fef					      endif
   5991  2ffc					      ORG	$2FFC
   5992  2ffc					      RORG	$BFFC
   5993  2ffc		       d1 bf		      .word.w	(start_bank2 & $ffff)
   5994  2ffe		       d1 bf		      .word.w	(start_bank2 & $ffff)
   5995  3000					      ORG	$3000
   5996  3000					      RORG	$D000
   5997  3000					      repeat	256
   5998  3000		       ff		      .byte.b	$ff
   5997  3000					      repend
   5998  3001		       ff		      .byte.b	$ff
   5997  3001					      repend
   5998  3002		       ff		      .byte.b	$ff
   5997  3002					      repend
   5998  3003		       ff		      .byte.b	$ff
   5997  3003					      repend
   5998  3004		       ff		      .byte.b	$ff
   5997  3004					      repend
   5998  3005		       ff		      .byte.b	$ff
   5997  3005					      repend
   5998  3006		       ff		      .byte.b	$ff
   5997  3006					      repend
   5998  3007		       ff		      .byte.b	$ff
   5997  3007					      repend
   5998  3008		       ff		      .byte.b	$ff
   5997  3008					      repend
   5998  3009		       ff		      .byte.b	$ff
   5997  3009					      repend
   5998  300a		       ff		      .byte.b	$ff
   5997  300a					      repend
   5998  300b		       ff		      .byte.b	$ff
   5997  300b					      repend
   5998  300c		       ff		      .byte.b	$ff
   5997  300c					      repend
   5998  300d		       ff		      .byte.b	$ff
   5997  300d					      repend
   5998  300e		       ff		      .byte.b	$ff
   5997  300e					      repend
   5998  300f		       ff		      .byte.b	$ff
   5997  300f					      repend
   5998  3010		       ff		      .byte.b	$ff
   5997  3010					      repend
   5998  3011		       ff		      .byte.b	$ff
   5997  3011					      repend
   5998  3012		       ff		      .byte.b	$ff
   5997  3012					      repend
   5998  3013		       ff		      .byte.b	$ff
   5997  3013					      repend
   5998  3014		       ff		      .byte.b	$ff
   5997  3014					      repend
   5998  3015		       ff		      .byte.b	$ff
   5997  3015					      repend
   5998  3016		       ff		      .byte.b	$ff
   5997  3016					      repend
   5998  3017		       ff		      .byte.b	$ff
   5997  3017					      repend
   5998  3018		       ff		      .byte.b	$ff
   5997  3018					      repend
   5998  3019		       ff		      .byte.b	$ff
   5997  3019					      repend
   5998  301a		       ff		      .byte.b	$ff
   5997  301a					      repend
   5998  301b		       ff		      .byte.b	$ff
   5997  301b					      repend
   5998  301c		       ff		      .byte.b	$ff
   5997  301c					      repend
   5998  301d		       ff		      .byte.b	$ff
   5997  301d					      repend
   5998  301e		       ff		      .byte.b	$ff
   5997  301e					      repend
   5998  301f		       ff		      .byte.b	$ff
   5997  301f					      repend
   5998  3020		       ff		      .byte.b	$ff
   5997  3020					      repend
   5998  3021		       ff		      .byte.b	$ff
   5997  3021					      repend
   5998  3022		       ff		      .byte.b	$ff
   5997  3022					      repend
   5998  3023		       ff		      .byte.b	$ff
   5997  3023					      repend
   5998  3024		       ff		      .byte.b	$ff
   5997  3024					      repend
   5998  3025		       ff		      .byte.b	$ff
   5997  3025					      repend
   5998  3026		       ff		      .byte.b	$ff
   5997  3026					      repend
   5998  3027		       ff		      .byte.b	$ff
   5997  3027					      repend
   5998  3028		       ff		      .byte.b	$ff
   5997  3028					      repend
   5998  3029		       ff		      .byte.b	$ff
   5997  3029					      repend
   5998  302a		       ff		      .byte.b	$ff
   5997  302a					      repend
   5998  302b		       ff		      .byte.b	$ff
   5997  302b					      repend
   5998  302c		       ff		      .byte.b	$ff
   5997  302c					      repend
   5998  302d		       ff		      .byte.b	$ff
   5997  302d					      repend
   5998  302e		       ff		      .byte.b	$ff
   5997  302e					      repend
   5998  302f		       ff		      .byte.b	$ff
   5997  302f					      repend
   5998  3030		       ff		      .byte.b	$ff
   5997  3030					      repend
   5998  3031		       ff		      .byte.b	$ff
   5997  3031					      repend
   5998  3032		       ff		      .byte.b	$ff
   5997  3032					      repend
   5998  3033		       ff		      .byte.b	$ff
   5997  3033					      repend
   5998  3034		       ff		      .byte.b	$ff
   5997  3034					      repend
   5998  3035		       ff		      .byte.b	$ff
   5997  3035					      repend
   5998  3036		       ff		      .byte.b	$ff
   5997  3036					      repend
   5998  3037		       ff		      .byte.b	$ff
   5997  3037					      repend
   5998  3038		       ff		      .byte.b	$ff
   5997  3038					      repend
   5998  3039		       ff		      .byte.b	$ff
   5997  3039					      repend
   5998  303a		       ff		      .byte.b	$ff
   5997  303a					      repend
   5998  303b		       ff		      .byte.b	$ff
   5997  303b					      repend
   5998  303c		       ff		      .byte.b	$ff
   5997  303c					      repend
   5998  303d		       ff		      .byte.b	$ff
   5997  303d					      repend
   5998  303e		       ff		      .byte.b	$ff
   5997  303e					      repend
   5998  303f		       ff		      .byte.b	$ff
   5997  303f					      repend
   5998  3040		       ff		      .byte.b	$ff
   5997  3040					      repend
   5998  3041		       ff		      .byte.b	$ff
   5997  3041					      repend
   5998  3042		       ff		      .byte.b	$ff
   5997  3042					      repend
   5998  3043		       ff		      .byte.b	$ff
   5997  3043					      repend
   5998  3044		       ff		      .byte.b	$ff
   5997  3044					      repend
   5998  3045		       ff		      .byte.b	$ff
   5997  3045					      repend
   5998  3046		       ff		      .byte.b	$ff
   5997  3046					      repend
   5998  3047		       ff		      .byte.b	$ff
   5997  3047					      repend
   5998  3048		       ff		      .byte.b	$ff
   5997  3048					      repend
   5998  3049		       ff		      .byte.b	$ff
   5997  3049					      repend
   5998  304a		       ff		      .byte.b	$ff
   5997  304a					      repend
   5998  304b		       ff		      .byte.b	$ff
   5997  304b					      repend
   5998  304c		       ff		      .byte.b	$ff
   5997  304c					      repend
   5998  304d		       ff		      .byte.b	$ff
   5997  304d					      repend
   5998  304e		       ff		      .byte.b	$ff
   5997  304e					      repend
   5998  304f		       ff		      .byte.b	$ff
   5997  304f					      repend
   5998  3050		       ff		      .byte.b	$ff
   5997  3050					      repend
   5998  3051		       ff		      .byte.b	$ff
   5997  3051					      repend
   5998  3052		       ff		      .byte.b	$ff
   5997  3052					      repend
   5998  3053		       ff		      .byte.b	$ff
   5997  3053					      repend
   5998  3054		       ff		      .byte.b	$ff
   5997  3054					      repend
   5998  3055		       ff		      .byte.b	$ff
   5997  3055					      repend
   5998  3056		       ff		      .byte.b	$ff
   5997  3056					      repend
   5998  3057		       ff		      .byte.b	$ff
   5997  3057					      repend
   5998  3058		       ff		      .byte.b	$ff
   5997  3058					      repend
   5998  3059		       ff		      .byte.b	$ff
   5997  3059					      repend
   5998  305a		       ff		      .byte.b	$ff
   5997  305a					      repend
   5998  305b		       ff		      .byte.b	$ff
   5997  305b					      repend
   5998  305c		       ff		      .byte.b	$ff
   5997  305c					      repend
   5998  305d		       ff		      .byte.b	$ff
   5997  305d					      repend
   5998  305e		       ff		      .byte.b	$ff
   5997  305e					      repend
   5998  305f		       ff		      .byte.b	$ff
   5997  305f					      repend
   5998  3060		       ff		      .byte.b	$ff
   5997  3060					      repend
   5998  3061		       ff		      .byte.b	$ff
   5997  3061					      repend
   5998  3062		       ff		      .byte.b	$ff
   5997  3062					      repend
   5998  3063		       ff		      .byte.b	$ff
   5997  3063					      repend
   5998  3064		       ff		      .byte.b	$ff
   5997  3064					      repend
   5998  3065		       ff		      .byte.b	$ff
   5997  3065					      repend
   5998  3066		       ff		      .byte.b	$ff
   5997  3066					      repend
   5998  3067		       ff		      .byte.b	$ff
   5997  3067					      repend
   5998  3068		       ff		      .byte.b	$ff
   5997  3068					      repend
   5998  3069		       ff		      .byte.b	$ff
   5997  3069					      repend
   5998  306a		       ff		      .byte.b	$ff
   5997  306a					      repend
   5998  306b		       ff		      .byte.b	$ff
   5997  306b					      repend
   5998  306c		       ff		      .byte.b	$ff
   5997  306c					      repend
   5998  306d		       ff		      .byte.b	$ff
   5997  306d					      repend
   5998  306e		       ff		      .byte.b	$ff
   5997  306e					      repend
   5998  306f		       ff		      .byte.b	$ff
   5997  306f					      repend
   5998  3070		       ff		      .byte.b	$ff
   5997  3070					      repend
   5998  3071		       ff		      .byte.b	$ff
   5997  3071					      repend
   5998  3072		       ff		      .byte.b	$ff
   5997  3072					      repend
   5998  3073		       ff		      .byte.b	$ff
   5997  3073					      repend
   5998  3074		       ff		      .byte.b	$ff
   5997  3074					      repend
   5998  3075		       ff		      .byte.b	$ff
   5997  3075					      repend
   5998  3076		       ff		      .byte.b	$ff
   5997  3076					      repend
   5998  3077		       ff		      .byte.b	$ff
   5997  3077					      repend
   5998  3078		       ff		      .byte.b	$ff
   5997  3078					      repend
   5998  3079		       ff		      .byte.b	$ff
   5997  3079					      repend
   5998  307a		       ff		      .byte.b	$ff
   5997  307a					      repend
   5998  307b		       ff		      .byte.b	$ff
   5997  307b					      repend
   5998  307c		       ff		      .byte.b	$ff
   5997  307c					      repend
   5998  307d		       ff		      .byte.b	$ff
   5997  307d					      repend
   5998  307e		       ff		      .byte.b	$ff
   5997  307e					      repend
   5998  307f		       ff		      .byte.b	$ff
   5997  307f					      repend
   5998  3080		       ff		      .byte.b	$ff
   5997  3080					      repend
   5998  3081		       ff		      .byte.b	$ff
   5997  3081					      repend
   5998  3082		       ff		      .byte.b	$ff
   5997  3082					      repend
   5998  3083		       ff		      .byte.b	$ff
   5997  3083					      repend
   5998  3084		       ff		      .byte.b	$ff
   5997  3084					      repend
   5998  3085		       ff		      .byte.b	$ff
   5997  3085					      repend
   5998  3086		       ff		      .byte.b	$ff
   5997  3086					      repend
   5998  3087		       ff		      .byte.b	$ff
   5997  3087					      repend
   5998  3088		       ff		      .byte.b	$ff
   5997  3088					      repend
   5998  3089		       ff		      .byte.b	$ff
   5997  3089					      repend
   5998  308a		       ff		      .byte.b	$ff
   5997  308a					      repend
   5998  308b		       ff		      .byte.b	$ff
   5997  308b					      repend
   5998  308c		       ff		      .byte.b	$ff
   5997  308c					      repend
   5998  308d		       ff		      .byte.b	$ff
   5997  308d					      repend
   5998  308e		       ff		      .byte.b	$ff
   5997  308e					      repend
   5998  308f		       ff		      .byte.b	$ff
   5997  308f					      repend
   5998  3090		       ff		      .byte.b	$ff
   5997  3090					      repend
   5998  3091		       ff		      .byte.b	$ff
   5997  3091					      repend
   5998  3092		       ff		      .byte.b	$ff
   5997  3092					      repend
   5998  3093		       ff		      .byte.b	$ff
   5997  3093					      repend
   5998  3094		       ff		      .byte.b	$ff
   5997  3094					      repend
   5998  3095		       ff		      .byte.b	$ff
   5997  3095					      repend
   5998  3096		       ff		      .byte.b	$ff
   5997  3096					      repend
   5998  3097		       ff		      .byte.b	$ff
   5997  3097					      repend
   5998  3098		       ff		      .byte.b	$ff
   5997  3098					      repend
   5998  3099		       ff		      .byte.b	$ff
   5997  3099					      repend
   5998  309a		       ff		      .byte.b	$ff
   5997  309a					      repend
   5998  309b		       ff		      .byte.b	$ff
   5997  309b					      repend
   5998  309c		       ff		      .byte.b	$ff
   5997  309c					      repend
   5998  309d		       ff		      .byte.b	$ff
   5997  309d					      repend
   5998  309e		       ff		      .byte.b	$ff
   5997  309e					      repend
   5998  309f		       ff		      .byte.b	$ff
   5997  309f					      repend
   5998  30a0		       ff		      .byte.b	$ff
   5997  30a0					      repend
   5998  30a1		       ff		      .byte.b	$ff
   5997  30a1					      repend
   5998  30a2		       ff		      .byte.b	$ff
   5997  30a2					      repend
   5998  30a3		       ff		      .byte.b	$ff
   5997  30a3					      repend
   5998  30a4		       ff		      .byte.b	$ff
   5997  30a4					      repend
   5998  30a5		       ff		      .byte.b	$ff
   5997  30a5					      repend
   5998  30a6		       ff		      .byte.b	$ff
   5997  30a6					      repend
   5998  30a7		       ff		      .byte.b	$ff
   5997  30a7					      repend
   5998  30a8		       ff		      .byte.b	$ff
   5997  30a8					      repend
   5998  30a9		       ff		      .byte.b	$ff
   5997  30a9					      repend
   5998  30aa		       ff		      .byte.b	$ff
   5997  30aa					      repend
   5998  30ab		       ff		      .byte.b	$ff
   5997  30ab					      repend
   5998  30ac		       ff		      .byte.b	$ff
   5997  30ac					      repend
   5998  30ad		       ff		      .byte.b	$ff
   5997  30ad					      repend
   5998  30ae		       ff		      .byte.b	$ff
   5997  30ae					      repend
   5998  30af		       ff		      .byte.b	$ff
   5997  30af					      repend
   5998  30b0		       ff		      .byte.b	$ff
   5997  30b0					      repend
   5998  30b1		       ff		      .byte.b	$ff
   5997  30b1					      repend
   5998  30b2		       ff		      .byte.b	$ff
   5997  30b2					      repend
   5998  30b3		       ff		      .byte.b	$ff
   5997  30b3					      repend
   5998  30b4		       ff		      .byte.b	$ff
   5997  30b4					      repend
   5998  30b5		       ff		      .byte.b	$ff
   5997  30b5					      repend
   5998  30b6		       ff		      .byte.b	$ff
   5997  30b6					      repend
   5998  30b7		       ff		      .byte.b	$ff
   5997  30b7					      repend
   5998  30b8		       ff		      .byte.b	$ff
   5997  30b8					      repend
   5998  30b9		       ff		      .byte.b	$ff
   5997  30b9					      repend
   5998  30ba		       ff		      .byte.b	$ff
   5997  30ba					      repend
   5998  30bb		       ff		      .byte.b	$ff
   5997  30bb					      repend
   5998  30bc		       ff		      .byte.b	$ff
   5997  30bc					      repend
   5998  30bd		       ff		      .byte.b	$ff
   5997  30bd					      repend
   5998  30be		       ff		      .byte.b	$ff
   5997  30be					      repend
   5998  30bf		       ff		      .byte.b	$ff
   5997  30bf					      repend
   5998  30c0		       ff		      .byte.b	$ff
   5997  30c0					      repend
   5998  30c1		       ff		      .byte.b	$ff
   5997  30c1					      repend
   5998  30c2		       ff		      .byte.b	$ff
   5997  30c2					      repend
   5998  30c3		       ff		      .byte.b	$ff
   5997  30c3					      repend
   5998  30c4		       ff		      .byte.b	$ff
   5997  30c4					      repend
   5998  30c5		       ff		      .byte.b	$ff
   5997  30c5					      repend
   5998  30c6		       ff		      .byte.b	$ff
   5997  30c6					      repend
   5998  30c7		       ff		      .byte.b	$ff
   5997  30c7					      repend
   5998  30c8		       ff		      .byte.b	$ff
   5997  30c8					      repend
   5998  30c9		       ff		      .byte.b	$ff
   5997  30c9					      repend
   5998  30ca		       ff		      .byte.b	$ff
   5997  30ca					      repend
   5998  30cb		       ff		      .byte.b	$ff
   5997  30cb					      repend
   5998  30cc		       ff		      .byte.b	$ff
   5997  30cc					      repend
   5998  30cd		       ff		      .byte.b	$ff
   5997  30cd					      repend
   5998  30ce		       ff		      .byte.b	$ff
   5997  30ce					      repend
   5998  30cf		       ff		      .byte.b	$ff
   5997  30cf					      repend
   5998  30d0		       ff		      .byte.b	$ff
   5997  30d0					      repend
   5998  30d1		       ff		      .byte.b	$ff
   5997  30d1					      repend
   5998  30d2		       ff		      .byte.b	$ff
   5997  30d2					      repend
   5998  30d3		       ff		      .byte.b	$ff
   5997  30d3					      repend
   5998  30d4		       ff		      .byte.b	$ff
   5997  30d4					      repend
   5998  30d5		       ff		      .byte.b	$ff
   5997  30d5					      repend
   5998  30d6		       ff		      .byte.b	$ff
   5997  30d6					      repend
   5998  30d7		       ff		      .byte.b	$ff
   5997  30d7					      repend
   5998  30d8		       ff		      .byte.b	$ff
   5997  30d8					      repend
   5998  30d9		       ff		      .byte.b	$ff
   5997  30d9					      repend
   5998  30da		       ff		      .byte.b	$ff
   5997  30da					      repend
   5998  30db		       ff		      .byte.b	$ff
   5997  30db					      repend
   5998  30dc		       ff		      .byte.b	$ff
   5997  30dc					      repend
   5998  30dd		       ff		      .byte.b	$ff
   5997  30dd					      repend
   5998  30de		       ff		      .byte.b	$ff
   5997  30de					      repend
   5998  30df		       ff		      .byte.b	$ff
   5997  30df					      repend
   5998  30e0		       ff		      .byte.b	$ff
   5997  30e0					      repend
   5998  30e1		       ff		      .byte.b	$ff
   5997  30e1					      repend
   5998  30e2		       ff		      .byte.b	$ff
   5997  30e2					      repend
   5998  30e3		       ff		      .byte.b	$ff
   5997  30e3					      repend
   5998  30e4		       ff		      .byte.b	$ff
   5997  30e4					      repend
   5998  30e5		       ff		      .byte.b	$ff
   5997  30e5					      repend
   5998  30e6		       ff		      .byte.b	$ff
   5997  30e6					      repend
   5998  30e7		       ff		      .byte.b	$ff
   5997  30e7					      repend
   5998  30e8		       ff		      .byte.b	$ff
   5997  30e8					      repend
   5998  30e9		       ff		      .byte.b	$ff
   5997  30e9					      repend
   5998  30ea		       ff		      .byte.b	$ff
   5997  30ea					      repend
   5998  30eb		       ff		      .byte.b	$ff
   5997  30eb					      repend
   5998  30ec		       ff		      .byte.b	$ff
   5997  30ec					      repend
   5998  30ed		       ff		      .byte.b	$ff
   5997  30ed					      repend
   5998  30ee		       ff		      .byte.b	$ff
   5997  30ee					      repend
   5998  30ef		       ff		      .byte.b	$ff
   5997  30ef					      repend
   5998  30f0		       ff		      .byte.b	$ff
   5997  30f0					      repend
   5998  30f1		       ff		      .byte.b	$ff
   5997  30f1					      repend
   5998  30f2		       ff		      .byte.b	$ff
   5997  30f2					      repend
   5998  30f3		       ff		      .byte.b	$ff
   5997  30f3					      repend
   5998  30f4		       ff		      .byte.b	$ff
   5997  30f4					      repend
   5998  30f5		       ff		      .byte.b	$ff
   5997  30f5					      repend
   5998  30f6		       ff		      .byte.b	$ff
   5997  30f6					      repend
   5998  30f7		       ff		      .byte.b	$ff
   5997  30f7					      repend
   5998  30f8		       ff		      .byte.b	$ff
   5997  30f8					      repend
   5998  30f9		       ff		      .byte.b	$ff
   5997  30f9					      repend
   5998  30fa		       ff		      .byte.b	$ff
   5997  30fa					      repend
   5998  30fb		       ff		      .byte.b	$ff
   5997  30fb					      repend
   5998  30fc		       ff		      .byte.b	$ff
   5997  30fc					      repend
   5998  30fd		       ff		      .byte.b	$ff
   5997  30fd					      repend
   5998  30fe		       ff		      .byte.b	$ff
   5997  30fe					      repend
   5998  30ff		       ff		      .byte.b	$ff
   5999  3100					      repend
   6000  3100				   .
   6001  3100							; 
   6002  3100
   6003  3100				   .
   6004  3100							; 
   6005  3100
   6006  3100				   .
   6007  3100							; 
   6008  3100
   6009  3100				   .
   6010  3100							; 
   6011  3100
   6012  3100				   .
   6013  3100							; 
   6014  3100
   6015  3100				   .L0631		;  bank 4
   6016  3100
   6017  3100					      if	ECHO3
      3793 bytes of ROM space left in bank 3
   6018  3100					      echo	"    ",[(start_bank3 - *)]d , "bytes of ROM space left in bank 3")
   6019  3100					      endif
   6020  3100		       00 01	   ECHO3      =	1
   6021  3fd1					      ORG	$3FF4-bscode_length
   6022  3fd1					      RORG	$DFF4-bscode_length
   6023  3fd1		       a2 ff	   start_bank3 ldx	#$ff
   6024  3fd3				  -	      ifconst	FASTFETCH	; using DPC+
   6025  3fd3				  -	      stx	FASTFETCH
   6026  3fd3					      endif
   6027  3fd3		       9a		      txs
   6028  3fd4				  -	      if	bankswitch == 64
   6029  3fd4				  -	      lda	#(((>(start-1)) & $0F) | $F0)
   6030  3fd4					      else
   6031  3fd4		       a9 f2		      lda	#>(start-1)
   6032  3fd6					      endif
   6033  3fd6		       48		      pha
   6034  3fd7		       a9 b0		      lda	#<(start-1)
   6035  3fd9		       48		      pha
   6036  3fda		       48		      pha
   6037  3fdb		       8a		      txa
   6038  3fdc		       48		      pha
   6039  3fdd		       ba		      tsx
   6040  3fde					      if	bankswitch != 64
   6041  3fde		       b5 04		      lda	4,x	; get high byte of return address
   6042  3fe0		       2a		      rol
   6043  3fe1		       2a		      rol
   6044  3fe2		       2a		      rol
   6045  3fe3		       2a		      rol
   6046  3fe4		       29 03		      and	#bs_mask	;1 3 or 7 for F8/F6/F4
   6047  3fe6		       aa		      tax
   6048  3fe7		       e8		      inx
   6049  3fe8				  -	      else
   6050  3fe8				  -	      lda	4,x	; get high byte of return address
   6051  3fe8				  -	      tay
   6052  3fe8				  -	      ora	#$10	; change our bank nibble into a valid rom mirror
   6053  3fe8				  -	      sta	4,x
   6054  3fe8				  -	      tya
   6055  3fe8				  -	      lsr
   6056  3fe8				  -	      lsr
   6057  3fe8				  -	      lsr
   6058  3fe8				  -	      lsr
   6059  3fe8				  -	      tax
   6060  3fe8				  -	      inx
   6061  3fe8					      endif
   6062  3fe8		       bd f5 1f 	      lda	bankswitch_hotspot-1,x
   6063  3feb		       68		      pla
   6064  3fec		       aa		      tax
   6065  3fed		       68		      pla
   6066  3fee		       60		      rts
   6067  3fef				  -	      if	((* & $1FFF) > ((bankswitch_hotspot & $1FFF) - 1))
   6068  3fef				  -	      echo	"WARNING: size parameter in banksw.asm too small - the program probably will not work."
   6069  3fef				  -	      echo	"Change to",[(*-begin_bscode+1)&$FF]d,"and try again."
   6070  3fef					      endif
   6071  3ffc					      ORG	$3FFC
   6072  3ffc					      RORG	$DFFC
   6073  3ffc		       d1 df		      .word.w	(start_bank3 & $ffff)
   6074  3ffe		       d1 df		      .word.w	(start_bank3 & $ffff)
   6075  4000					      ORG	$4000
   6076  4000					      RORG	$F000
   6077  4000					      repeat	256
   6078  4000		       ff		      .byte.b	$ff
   6077  4000					      repend
   6078  4001		       ff		      .byte.b	$ff
   6077  4001					      repend
   6078  4002		       ff		      .byte.b	$ff
   6077  4002					      repend
   6078  4003		       ff		      .byte.b	$ff
   6077  4003					      repend
   6078  4004		       ff		      .byte.b	$ff
   6077  4004					      repend
   6078  4005		       ff		      .byte.b	$ff
   6077  4005					      repend
   6078  4006		       ff		      .byte.b	$ff
   6077  4006					      repend
   6078  4007		       ff		      .byte.b	$ff
   6077  4007					      repend
   6078  4008		       ff		      .byte.b	$ff
   6077  4008					      repend
   6078  4009		       ff		      .byte.b	$ff
   6077  4009					      repend
   6078  400a		       ff		      .byte.b	$ff
   6077  400a					      repend
   6078  400b		       ff		      .byte.b	$ff
   6077  400b					      repend
   6078  400c		       ff		      .byte.b	$ff
   6077  400c					      repend
   6078  400d		       ff		      .byte.b	$ff
   6077  400d					      repend
   6078  400e		       ff		      .byte.b	$ff
   6077  400e					      repend
   6078  400f		       ff		      .byte.b	$ff
   6077  400f					      repend
   6078  4010		       ff		      .byte.b	$ff
   6077  4010					      repend
   6078  4011		       ff		      .byte.b	$ff
   6077  4011					      repend
   6078  4012		       ff		      .byte.b	$ff
   6077  4012					      repend
   6078  4013		       ff		      .byte.b	$ff
   6077  4013					      repend
   6078  4014		       ff		      .byte.b	$ff
   6077  4014					      repend
   6078  4015		       ff		      .byte.b	$ff
   6077  4015					      repend
   6078  4016		       ff		      .byte.b	$ff
   6077  4016					      repend
   6078  4017		       ff		      .byte.b	$ff
   6077  4017					      repend
   6078  4018		       ff		      .byte.b	$ff
   6077  4018					      repend
   6078  4019		       ff		      .byte.b	$ff
   6077  4019					      repend
   6078  401a		       ff		      .byte.b	$ff
   6077  401a					      repend
   6078  401b		       ff		      .byte.b	$ff
   6077  401b					      repend
   6078  401c		       ff		      .byte.b	$ff
   6077  401c					      repend
   6078  401d		       ff		      .byte.b	$ff
   6077  401d					      repend
   6078  401e		       ff		      .byte.b	$ff
   6077  401e					      repend
   6078  401f		       ff		      .byte.b	$ff
   6077  401f					      repend
   6078  4020		       ff		      .byte.b	$ff
   6077  4020					      repend
   6078  4021		       ff		      .byte.b	$ff
   6077  4021					      repend
   6078  4022		       ff		      .byte.b	$ff
   6077  4022					      repend
   6078  4023		       ff		      .byte.b	$ff
   6077  4023					      repend
   6078  4024		       ff		      .byte.b	$ff
   6077  4024					      repend
   6078  4025		       ff		      .byte.b	$ff
   6077  4025					      repend
   6078  4026		       ff		      .byte.b	$ff
   6077  4026					      repend
   6078  4027		       ff		      .byte.b	$ff
   6077  4027					      repend
   6078  4028		       ff		      .byte.b	$ff
   6077  4028					      repend
   6078  4029		       ff		      .byte.b	$ff
   6077  4029					      repend
   6078  402a		       ff		      .byte.b	$ff
   6077  402a					      repend
   6078  402b		       ff		      .byte.b	$ff
   6077  402b					      repend
   6078  402c		       ff		      .byte.b	$ff
   6077  402c					      repend
   6078  402d		       ff		      .byte.b	$ff
   6077  402d					      repend
   6078  402e		       ff		      .byte.b	$ff
   6077  402e					      repend
   6078  402f		       ff		      .byte.b	$ff
   6077  402f					      repend
   6078  4030		       ff		      .byte.b	$ff
   6077  4030					      repend
   6078  4031		       ff		      .byte.b	$ff
   6077  4031					      repend
   6078  4032		       ff		      .byte.b	$ff
   6077  4032					      repend
   6078  4033		       ff		      .byte.b	$ff
   6077  4033					      repend
   6078  4034		       ff		      .byte.b	$ff
   6077  4034					      repend
   6078  4035		       ff		      .byte.b	$ff
   6077  4035					      repend
   6078  4036		       ff		      .byte.b	$ff
   6077  4036					      repend
   6078  4037		       ff		      .byte.b	$ff
   6077  4037					      repend
   6078  4038		       ff		      .byte.b	$ff
   6077  4038					      repend
   6078  4039		       ff		      .byte.b	$ff
   6077  4039					      repend
   6078  403a		       ff		      .byte.b	$ff
   6077  403a					      repend
   6078  403b		       ff		      .byte.b	$ff
   6077  403b					      repend
   6078  403c		       ff		      .byte.b	$ff
   6077  403c					      repend
   6078  403d		       ff		      .byte.b	$ff
   6077  403d					      repend
   6078  403e		       ff		      .byte.b	$ff
   6077  403e					      repend
   6078  403f		       ff		      .byte.b	$ff
   6077  403f					      repend
   6078  4040		       ff		      .byte.b	$ff
   6077  4040					      repend
   6078  4041		       ff		      .byte.b	$ff
   6077  4041					      repend
   6078  4042		       ff		      .byte.b	$ff
   6077  4042					      repend
   6078  4043		       ff		      .byte.b	$ff
   6077  4043					      repend
   6078  4044		       ff		      .byte.b	$ff
   6077  4044					      repend
   6078  4045		       ff		      .byte.b	$ff
   6077  4045					      repend
   6078  4046		       ff		      .byte.b	$ff
   6077  4046					      repend
   6078  4047		       ff		      .byte.b	$ff
   6077  4047					      repend
   6078  4048		       ff		      .byte.b	$ff
   6077  4048					      repend
   6078  4049		       ff		      .byte.b	$ff
   6077  4049					      repend
   6078  404a		       ff		      .byte.b	$ff
   6077  404a					      repend
   6078  404b		       ff		      .byte.b	$ff
   6077  404b					      repend
   6078  404c		       ff		      .byte.b	$ff
   6077  404c					      repend
   6078  404d		       ff		      .byte.b	$ff
   6077  404d					      repend
   6078  404e		       ff		      .byte.b	$ff
   6077  404e					      repend
   6078  404f		       ff		      .byte.b	$ff
   6077  404f					      repend
   6078  4050		       ff		      .byte.b	$ff
   6077  4050					      repend
   6078  4051		       ff		      .byte.b	$ff
   6077  4051					      repend
   6078  4052		       ff		      .byte.b	$ff
   6077  4052					      repend
   6078  4053		       ff		      .byte.b	$ff
   6077  4053					      repend
   6078  4054		       ff		      .byte.b	$ff
   6077  4054					      repend
   6078  4055		       ff		      .byte.b	$ff
   6077  4055					      repend
   6078  4056		       ff		      .byte.b	$ff
   6077  4056					      repend
   6078  4057		       ff		      .byte.b	$ff
   6077  4057					      repend
   6078  4058		       ff		      .byte.b	$ff
   6077  4058					      repend
   6078  4059		       ff		      .byte.b	$ff
   6077  4059					      repend
   6078  405a		       ff		      .byte.b	$ff
   6077  405a					      repend
   6078  405b		       ff		      .byte.b	$ff
   6077  405b					      repend
   6078  405c		       ff		      .byte.b	$ff
   6077  405c					      repend
   6078  405d		       ff		      .byte.b	$ff
   6077  405d					      repend
   6078  405e		       ff		      .byte.b	$ff
   6077  405e					      repend
   6078  405f		       ff		      .byte.b	$ff
   6077  405f					      repend
   6078  4060		       ff		      .byte.b	$ff
   6077  4060					      repend
   6078  4061		       ff		      .byte.b	$ff
   6077  4061					      repend
   6078  4062		       ff		      .byte.b	$ff
   6077  4062					      repend
   6078  4063		       ff		      .byte.b	$ff
   6077  4063					      repend
   6078  4064		       ff		      .byte.b	$ff
   6077  4064					      repend
   6078  4065		       ff		      .byte.b	$ff
   6077  4065					      repend
   6078  4066		       ff		      .byte.b	$ff
   6077  4066					      repend
   6078  4067		       ff		      .byte.b	$ff
   6077  4067					      repend
   6078  4068		       ff		      .byte.b	$ff
   6077  4068					      repend
   6078  4069		       ff		      .byte.b	$ff
   6077  4069					      repend
   6078  406a		       ff		      .byte.b	$ff
   6077  406a					      repend
   6078  406b		       ff		      .byte.b	$ff
   6077  406b					      repend
   6078  406c		       ff		      .byte.b	$ff
   6077  406c					      repend
   6078  406d		       ff		      .byte.b	$ff
   6077  406d					      repend
   6078  406e		       ff		      .byte.b	$ff
   6077  406e					      repend
   6078  406f		       ff		      .byte.b	$ff
   6077  406f					      repend
   6078  4070		       ff		      .byte.b	$ff
   6077  4070					      repend
   6078  4071		       ff		      .byte.b	$ff
   6077  4071					      repend
   6078  4072		       ff		      .byte.b	$ff
   6077  4072					      repend
   6078  4073		       ff		      .byte.b	$ff
   6077  4073					      repend
   6078  4074		       ff		      .byte.b	$ff
   6077  4074					      repend
   6078  4075		       ff		      .byte.b	$ff
   6077  4075					      repend
   6078  4076		       ff		      .byte.b	$ff
   6077  4076					      repend
   6078  4077		       ff		      .byte.b	$ff
   6077  4077					      repend
   6078  4078		       ff		      .byte.b	$ff
   6077  4078					      repend
   6078  4079		       ff		      .byte.b	$ff
   6077  4079					      repend
   6078  407a		       ff		      .byte.b	$ff
   6077  407a					      repend
   6078  407b		       ff		      .byte.b	$ff
   6077  407b					      repend
   6078  407c		       ff		      .byte.b	$ff
   6077  407c					      repend
   6078  407d		       ff		      .byte.b	$ff
   6077  407d					      repend
   6078  407e		       ff		      .byte.b	$ff
   6077  407e					      repend
   6078  407f		       ff		      .byte.b	$ff
   6077  407f					      repend
   6078  4080		       ff		      .byte.b	$ff
   6077  4080					      repend
   6078  4081		       ff		      .byte.b	$ff
   6077  4081					      repend
   6078  4082		       ff		      .byte.b	$ff
   6077  4082					      repend
   6078  4083		       ff		      .byte.b	$ff
   6077  4083					      repend
   6078  4084		       ff		      .byte.b	$ff
   6077  4084					      repend
   6078  4085		       ff		      .byte.b	$ff
   6077  4085					      repend
   6078  4086		       ff		      .byte.b	$ff
   6077  4086					      repend
   6078  4087		       ff		      .byte.b	$ff
   6077  4087					      repend
   6078  4088		       ff		      .byte.b	$ff
   6077  4088					      repend
   6078  4089		       ff		      .byte.b	$ff
   6077  4089					      repend
   6078  408a		       ff		      .byte.b	$ff
   6077  408a					      repend
   6078  408b		       ff		      .byte.b	$ff
   6077  408b					      repend
   6078  408c		       ff		      .byte.b	$ff
   6077  408c					      repend
   6078  408d		       ff		      .byte.b	$ff
   6077  408d					      repend
   6078  408e		       ff		      .byte.b	$ff
   6077  408e					      repend
   6078  408f		       ff		      .byte.b	$ff
   6077  408f					      repend
   6078  4090		       ff		      .byte.b	$ff
   6077  4090					      repend
   6078  4091		       ff		      .byte.b	$ff
   6077  4091					      repend
   6078  4092		       ff		      .byte.b	$ff
   6077  4092					      repend
   6078  4093		       ff		      .byte.b	$ff
   6077  4093					      repend
   6078  4094		       ff		      .byte.b	$ff
   6077  4094					      repend
   6078  4095		       ff		      .byte.b	$ff
   6077  4095					      repend
   6078  4096		       ff		      .byte.b	$ff
   6077  4096					      repend
   6078  4097		       ff		      .byte.b	$ff
   6077  4097					      repend
   6078  4098		       ff		      .byte.b	$ff
   6077  4098					      repend
   6078  4099		       ff		      .byte.b	$ff
   6077  4099					      repend
   6078  409a		       ff		      .byte.b	$ff
   6077  409a					      repend
   6078  409b		       ff		      .byte.b	$ff
   6077  409b					      repend
   6078  409c		       ff		      .byte.b	$ff
   6077  409c					      repend
   6078  409d		       ff		      .byte.b	$ff
   6077  409d					      repend
   6078  409e		       ff		      .byte.b	$ff
   6077  409e					      repend
   6078  409f		       ff		      .byte.b	$ff
   6077  409f					      repend
   6078  40a0		       ff		      .byte.b	$ff
   6077  40a0					      repend
   6078  40a1		       ff		      .byte.b	$ff
   6077  40a1					      repend
   6078  40a2		       ff		      .byte.b	$ff
   6077  40a2					      repend
   6078  40a3		       ff		      .byte.b	$ff
   6077  40a3					      repend
   6078  40a4		       ff		      .byte.b	$ff
   6077  40a4					      repend
   6078  40a5		       ff		      .byte.b	$ff
   6077  40a5					      repend
   6078  40a6		       ff		      .byte.b	$ff
   6077  40a6					      repend
   6078  40a7		       ff		      .byte.b	$ff
   6077  40a7					      repend
   6078  40a8		       ff		      .byte.b	$ff
   6077  40a8					      repend
   6078  40a9		       ff		      .byte.b	$ff
   6077  40a9					      repend
   6078  40aa		       ff		      .byte.b	$ff
   6077  40aa					      repend
   6078  40ab		       ff		      .byte.b	$ff
   6077  40ab					      repend
   6078  40ac		       ff		      .byte.b	$ff
   6077  40ac					      repend
   6078  40ad		       ff		      .byte.b	$ff
   6077  40ad					      repend
   6078  40ae		       ff		      .byte.b	$ff
   6077  40ae					      repend
   6078  40af		       ff		      .byte.b	$ff
   6077  40af					      repend
   6078  40b0		       ff		      .byte.b	$ff
   6077  40b0					      repend
   6078  40b1		       ff		      .byte.b	$ff
   6077  40b1					      repend
   6078  40b2		       ff		      .byte.b	$ff
   6077  40b2					      repend
   6078  40b3		       ff		      .byte.b	$ff
   6077  40b3					      repend
   6078  40b4		       ff		      .byte.b	$ff
   6077  40b4					      repend
   6078  40b5		       ff		      .byte.b	$ff
   6077  40b5					      repend
   6078  40b6		       ff		      .byte.b	$ff
   6077  40b6					      repend
   6078  40b7		       ff		      .byte.b	$ff
   6077  40b7					      repend
   6078  40b8		       ff		      .byte.b	$ff
   6077  40b8					      repend
   6078  40b9		       ff		      .byte.b	$ff
   6077  40b9					      repend
   6078  40ba		       ff		      .byte.b	$ff
   6077  40ba					      repend
   6078  40bb		       ff		      .byte.b	$ff
   6077  40bb					      repend
   6078  40bc		       ff		      .byte.b	$ff
   6077  40bc					      repend
   6078  40bd		       ff		      .byte.b	$ff
   6077  40bd					      repend
   6078  40be		       ff		      .byte.b	$ff
   6077  40be					      repend
   6078  40bf		       ff		      .byte.b	$ff
   6077  40bf					      repend
   6078  40c0		       ff		      .byte.b	$ff
   6077  40c0					      repend
   6078  40c1		       ff		      .byte.b	$ff
   6077  40c1					      repend
   6078  40c2		       ff		      .byte.b	$ff
   6077  40c2					      repend
   6078  40c3		       ff		      .byte.b	$ff
   6077  40c3					      repend
   6078  40c4		       ff		      .byte.b	$ff
   6077  40c4					      repend
   6078  40c5		       ff		      .byte.b	$ff
   6077  40c5					      repend
   6078  40c6		       ff		      .byte.b	$ff
   6077  40c6					      repend
   6078  40c7		       ff		      .byte.b	$ff
   6077  40c7					      repend
   6078  40c8		       ff		      .byte.b	$ff
   6077  40c8					      repend
   6078  40c9		       ff		      .byte.b	$ff
   6077  40c9					      repend
   6078  40ca		       ff		      .byte.b	$ff
   6077  40ca					      repend
   6078  40cb		       ff		      .byte.b	$ff
   6077  40cb					      repend
   6078  40cc		       ff		      .byte.b	$ff
   6077  40cc					      repend
   6078  40cd		       ff		      .byte.b	$ff
   6077  40cd					      repend
   6078  40ce		       ff		      .byte.b	$ff
   6077  40ce					      repend
   6078  40cf		       ff		      .byte.b	$ff
   6077  40cf					      repend
   6078  40d0		       ff		      .byte.b	$ff
   6077  40d0					      repend
   6078  40d1		       ff		      .byte.b	$ff
   6077  40d1					      repend
   6078  40d2		       ff		      .byte.b	$ff
   6077  40d2					      repend
   6078  40d3		       ff		      .byte.b	$ff
   6077  40d3					      repend
   6078  40d4		       ff		      .byte.b	$ff
   6077  40d4					      repend
   6078  40d5		       ff		      .byte.b	$ff
   6077  40d5					      repend
   6078  40d6		       ff		      .byte.b	$ff
   6077  40d6					      repend
   6078  40d7		       ff		      .byte.b	$ff
   6077  40d7					      repend
   6078  40d8		       ff		      .byte.b	$ff
   6077  40d8					      repend
   6078  40d9		       ff		      .byte.b	$ff
   6077  40d9					      repend
   6078  40da		       ff		      .byte.b	$ff
   6077  40da					      repend
   6078  40db		       ff		      .byte.b	$ff
   6077  40db					      repend
   6078  40dc		       ff		      .byte.b	$ff
   6077  40dc					      repend
   6078  40dd		       ff		      .byte.b	$ff
   6077  40dd					      repend
   6078  40de		       ff		      .byte.b	$ff
   6077  40de					      repend
   6078  40df		       ff		      .byte.b	$ff
   6077  40df					      repend
   6078  40e0		       ff		      .byte.b	$ff
   6077  40e0					      repend
   6078  40e1		       ff		      .byte.b	$ff
   6077  40e1					      repend
   6078  40e2		       ff		      .byte.b	$ff
   6077  40e2					      repend
   6078  40e3		       ff		      .byte.b	$ff
   6077  40e3					      repend
   6078  40e4		       ff		      .byte.b	$ff
   6077  40e4					      repend
   6078  40e5		       ff		      .byte.b	$ff
   6077  40e5					      repend
   6078  40e6		       ff		      .byte.b	$ff
   6077  40e6					      repend
   6078  40e7		       ff		      .byte.b	$ff
   6077  40e7					      repend
   6078  40e8		       ff		      .byte.b	$ff
   6077  40e8					      repend
   6078  40e9		       ff		      .byte.b	$ff
   6077  40e9					      repend
   6078  40ea		       ff		      .byte.b	$ff
   6077  40ea					      repend
   6078  40eb		       ff		      .byte.b	$ff
   6077  40eb					      repend
   6078  40ec		       ff		      .byte.b	$ff
   6077  40ec					      repend
   6078  40ed		       ff		      .byte.b	$ff
   6077  40ed					      repend
   6078  40ee		       ff		      .byte.b	$ff
   6077  40ee					      repend
   6078  40ef		       ff		      .byte.b	$ff
   6077  40ef					      repend
   6078  40f0		       ff		      .byte.b	$ff
   6077  40f0					      repend
   6078  40f1		       ff		      .byte.b	$ff
   6077  40f1					      repend
   6078  40f2		       ff		      .byte.b	$ff
   6077  40f2					      repend
   6078  40f3		       ff		      .byte.b	$ff
   6077  40f3					      repend
   6078  40f4		       ff		      .byte.b	$ff
   6077  40f4					      repend
   6078  40f5		       ff		      .byte.b	$ff
   6077  40f5					      repend
   6078  40f6		       ff		      .byte.b	$ff
   6077  40f6					      repend
   6078  40f7		       ff		      .byte.b	$ff
   6077  40f7					      repend
   6078  40f8		       ff		      .byte.b	$ff
   6077  40f8					      repend
   6078  40f9		       ff		      .byte.b	$ff
   6077  40f9					      repend
   6078  40fa		       ff		      .byte.b	$ff
   6077  40fa					      repend
   6078  40fb		       ff		      .byte.b	$ff
   6077  40fb					      repend
   6078  40fc		       ff		      .byte.b	$ff
   6077  40fc					      repend
   6078  40fd		       ff		      .byte.b	$ff
   6077  40fd					      repend
   6078  40fe		       ff		      .byte.b	$ff
   6077  40fe					      repend
   6078  40ff		       ff		      .byte.b	$ff
   6079  4100					      repend
   6080  4100							; Provided under the CC0 license. See the included LICENSE.txt for details.
   6081  4100
   6082  4100							; This is a 2-line kernel!
   6083  4100					      ifnconst	vertical_reflect
   6084  4100				   kernel
   6085  4100					      endif
   6086  4100		       85 02		      sta	WSYNC
   6087  4102		       a9 ff		      lda	#255
   6088  4104		       8d 96 02 	      sta	TIM64T
   6089  4107
   6090  4107		       a9 01		      lda	#1
   6091  4109		       85 27		      sta	VDELBL
   6092  410b		       85 25		      sta	VDELP0
   6093  410d		       a6 92		      ldx	ballheight
   6094  410f		       e8		      inx
   6095  4110		       e8		      inx
   6096  4111		       86 9f		      stx	temp4
   6097  4113		       a5 86		      lda	player1y
   6098  4115		       85 9e		      sta	temp3
   6099  4117
   6100  4117				  -	      ifconst	shakescreen
   6101  4117				  -	      jsr	doshakescreen
   6102  4117					      else
   6103  4117		       a6 90		      ldx	missile0height
   6104  4119		       e8		      inx
   6105  411a					      endif
   6106  411a
   6107  411a		       e8		      inx
   6108  411b		       86 f6		      stx	stack1
   6109  411d
   6110  411d		       a5 89		      lda	bally
   6111  411f		       85 f7		      sta	stack2
   6112  4121
   6113  4121		       a5 85		      lda	player0y
   6114  4123		       a2 00		      ldx	#0
   6115  4125		       85 02		      sta	WSYNC
   6116  4127		       86 1b		      stx	GRP0
   6117  4129		       86 1c		      stx	GRP1
   6118  412b		       86 0e		      stx	PF1L
   6119  412d		       86 0f		      stx	PF2
   6120  412f		       86 2c		      stx	CXCLR
   6121  4131				  -	      ifconst	readpaddle
   6122  4131				  -	      stx	paddle
   6123  4131					      else
      0  4131					      sleep	3
      1  4131				   .CYCLES    SET	3
      2  4131
      3  4131				  -	      IF	.CYCLES < 2
      4  4131				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  4131				  -	      ERR
      6  4131					      ENDIF
      7  4131
      8  4131					      IF	.CYCLES & 1
      9  4131					      IFNCONST	NO_ILLEGAL_OPCODES
     10  4131		       04 00		      nop	0
     11  4133				  -	      ELSE
     12  4133				  -	      bit	VSYNC
     13  4133					      ENDIF
     14  4133				   .CYCLES    SET	.CYCLES - 3
     15  4133					      ENDIF
     16  4133
     17  4133				  -	      REPEAT	.CYCLES / 2
     18  4133				  -	      nop
     19  4133					      REPEND
   6125  4133					      endif
   6126  4133
   6127  4133		       95 9d		      sta	temp2,x
   6128  4135
   6129  4135							;store these so they can be retrieved later
   6130  4135				  -	      ifnconst	pfres
   6131  4135				  -	      ldx	#128-44+(4-pfwidth)*12
   6132  4135					      else
   6133  4135		       a2 74		      ldx	#132-pfres*pfwidth
   6134  4137					      endif
   6135  4137
   6136  4137		       c6 85		      dec	player0y
   6137  4139
   6138  4139		       a5 91		      lda	missile0y
   6139  413b		       85 a0		      sta	temp5
   6140  413d		       a5 88		      lda	missile1y
   6141  413f		       85 a1		      sta	temp6
   6142  4141
   6143  4141		       a5 ef		      lda	playfieldpos
   6144  4143		       85 9c		      sta	temp1
   6145  4145
   6146  4145				  -	      ifconst	pfrowheight
   6147  4145				  -	      lda	#pfrowheight+2
   6148  4145					      else
   6149  4145				  -	      ifnconst	pfres
   6150  4145				  -	      lda	#10
   6151  4145					      else
   6152  4145		       a9 1a		      lda	#(96/pfres)+2	; try to come close to the real size
   6153  4147					      endif
   6154  4147					      endif
   6155  4147		       18		      clc
   6156  4148		       e5 ef		      sbc	playfieldpos
   6157  414a		       85 ef		      sta	playfieldpos
   6158  414c		       4c 78 f1 	      jmp	.startkernel
   6159  414f
   6160  414f				   .skipDrawP0
   6161  414f		       a9 00		      lda	#0
   6162  4151		       a8		      tay
   6163  4152		       4c aa f1 	      jmp	.continueP0
   6164  4155
   6165  4155				   .skipDrawP1
   6166  4155		       a9 00		      lda	#0
   6167  4157		       a8		      tay
   6168  4158		       4c 82 f1 	      jmp	.continueP1
   6169  415b
   6170  415b				   .kerloop		; enter at cycle 59??
   6171  415b
   6172  415b				   continuekernel
      0  415b					      sleep	2
      1  415b				   .CYCLES    SET	2
      2  415b
      3  415b				  -	      IF	.CYCLES < 2
      4  415b				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  415b				  -	      ERR
      6  415b					      ENDIF
      7  415b
      8  415b				  -	      IF	.CYCLES & 1
      9  415b				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  415b				  -	      nop	0
     11  415b				  -	      ELSE
     12  415b				  -	      bit	VSYNC
     13  415b				  -	      ENDIF
     14  415b				  -.CYCLES    SET	.CYCLES - 3
     15  415b					      ENDIF
     16  415b
     17  415b					      REPEAT	.CYCLES / 2
     18  415b		       ea		      nop
     19  415c					      REPEND
   6174  415c				   continuekernel2
   6175  415c		       a5 92		      lda	ballheight
   6176  415e
   6177  415e					      ifconst	pfres
   6178  415e		       bc 7c 10 	      ldy	playfield+pfres*pfwidth-132,x
   6179  4161		       84 0e		      sty	PF1L	;3
   6180  4163		       bc 7d 10 	      ldy	playfield+pfres*pfwidth-131-pfadjust,x
   6181  4166		       84 0f		      sty	PF2L	;3
   6182  4168		       bc 7f 10 	      ldy	playfield+pfres*pfwidth-129,x
   6183  416b		       84 0e		      sty	PF1R	; 3 too early?
   6184  416d		       bc 7e 10 	      ldy	playfield+pfres*pfwidth-130-pfadjust,x
   6185  4170		       84 0f		      sty	PF2R	;3
   6186  4172				  -	      else
   6187  4172				  -	      ldy	playfield-48+pfwidth*12+44-128,x
   6188  4172				  -	      sty	PF1L	;3
   6189  4172				  -	      ldy	playfield-48+pfwidth*12+45-128-pfadjust,x	;4
   6190  4172				  -	      sty	PF2L	;3
   6191  4172				  -	      ldy	playfield-48+pfwidth*12+47-128,x	;4
   6192  4172				  -	      sty	PF1R	; 3 too early?
   6193  4172				  -	      ldy	playfield-48+pfwidth*12+46-128-pfadjust,x	;4
   6194  4172				  -	      sty	PF2R	;3
   6195  4172					      endif
   6196  4172
   6197  4172							; should be playfield+$38 for width=2
   6198  4172
   6199  4172		       c7 89		      dcp	bally
   6200  4174		       2a		      rol
   6201  4175		       2a		      rol
   6202  4176							; rol
   6203  4176							; rol
   6204  4176				   goback
   6205  4176		       85 1f		      sta	ENABL
   6206  4178				   .startkernel
   6207  4178		       a5 8f		      lda	player1height	;3
   6208  417a		       c7 86		      dcp	player1y	;5
   6209  417c		       90 d7		      bcc	.skipDrawP1	;2
   6210  417e		       a4 86		      ldy	player1y	;3
   6211  4180		       b1 8c		      lda	(player1pointer),y	;5; player0pointer must be selected carefully by the compiler
   6212  4182							; so it doesn't cross a page boundary!
   6213  4182
   6214  4182				   .continueP1
   6215  4182		       85 1c		      sta	GRP1	;3
   6216  4184
   6217  4184				  -	      ifnconst	player1colors
   6218  4184				  -	      lda	missile1height	;3
   6219  4184				  -	      dcp	missile1y	;5
   6220  4184				  -	      rol		;2
   6221  4184				  -	      rol		;2
   6222  4184				  -	      sta	ENAM1	;3
   6223  4184					      else
   6224  4184		       b1 87		      lda	(player1color),y
   6225  4186		       85 07		      sta	COLUP1
   6226  4188					      ifnconst	playercolors
      0  4188					      sleep	7
      1  4188				   .CYCLES    SET	7
      2  4188
      3  4188				  -	      IF	.CYCLES < 2
      4  4188				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  4188				  -	      ERR
      6  4188					      ENDIF
      7  4188
      8  4188					      IF	.CYCLES & 1
      9  4188					      IFNCONST	NO_ILLEGAL_OPCODES
     10  4188		       04 00		      nop	0
     11  418a				  -	      ELSE
     12  418a				  -	      bit	VSYNC
     13  418a					      ENDIF
     14  418a				   .CYCLES    SET	.CYCLES - 3
     15  418a					      ENDIF
     16  418a
     17  418a					      REPEAT	.CYCLES / 2
     18  418a		       ea		      nop
     17  418a					      REPEND
     18  418b		       ea		      nop
     19  418c					      REPEND
   6228  418c				  -	      else
   6229  418c				  -	      lda.w	player0colorstore
   6230  418c				  -	      sta	COLUP0
   6231  418c					      endif
   6232  418c					      endif
   6233  418c
   6234  418c					      ifconst	pfres
   6235  418c		       bd 7c 10 	      lda	playfield+pfres*pfwidth-132,x
   6236  418f		       85 0e		      sta	PF1L	;3
   6237  4191		       bd 7d 10 	      lda	playfield+pfres*pfwidth-131-pfadjust,x
   6238  4194		       85 0f		      sta	PF2L	;3
   6239  4196		       bd 7f 10 	      lda	playfield+pfres*pfwidth-129,x
   6240  4199		       85 0e		      sta	PF1R	; 3 too early?
   6241  419b		       bd 7e 10 	      lda	playfield+pfres*pfwidth-130-pfadjust,x
   6242  419e		       85 0f		      sta	PF2R	;3
   6243  41a0				  -	      else
   6244  41a0				  -	      lda	playfield-48+pfwidth*12+44-128,x	;4
   6245  41a0				  -	      sta	PF1L	;3
   6246  41a0				  -	      lda	playfield-48+pfwidth*12+45-128-pfadjust,x	;4
   6247  41a0				  -	      sta	PF2L	;3
   6248  41a0				  -	      lda	playfield-48+pfwidth*12+47-128,x	;4
   6249  41a0				  -	      sta	PF1R	; 3 too early?
   6250  41a0				  -	      lda	playfield-48+pfwidth*12+46-128-pfadjust,x	;4
   6251  41a0				  -	      sta	PF2R	;3
   6252  41a0					      endif
   6253  41a0							; sleep 3
   6254  41a0
   6255  41a0		       a5 8e		      lda	player0height
   6256  41a2		       c7 85		      dcp	player0y
   6257  41a4		       90 a9		      bcc	.skipDrawP0
   6258  41a6		       a4 85		      ldy	player0y
   6259  41a8		       b1 8a		      lda	(player0pointer),y
   6260  41aa				   .continueP0
   6261  41aa		       85 1b		      sta	GRP0
   6262  41ac
   6263  41ac					      ifnconst	no_blank_lines
   6264  41ac					      ifnconst	playercolors
   6265  41ac		       a5 90		      lda	missile0height	;3
   6266  41ae		       c7 91		      dcp	missile0y	;5
   6267  41b0		       e5 f6		      sbc	stack1
   6268  41b2		       85 1d		      sta	ENAM0	;3
   6269  41b4				  -	      else
   6270  41b4				  -	      lda	(player0color),y
   6271  41b4				  -	      sta	player0colorstore
   6272  41b4				  -	      sleep	6
   6273  41b4					      endif
   6274  41b4		       c6 9c		      dec	temp1
   6275  41b6		       d0 a3		      bne	continuekernel
   6276  41b8				  -	      else
   6277  41b8				  -	      dec	temp1
   6278  41b8				  -	      beq	altkernel2
   6279  41b8				  -	      ifconst	readpaddle
   6280  41b8				  -	      ldy	currentpaddle
   6281  41b8				  -	      lda	INPT0,y
   6282  41b8				  -	      bpl	noreadpaddle
   6283  41b8				  -	      inc	paddle
   6284  41b8				  -	      jmp	continuekernel2
   6285  41b8				  -noreadpaddle
   6286  41b8				  -	      sleep	2
   6287  41b8				  -	      jmp	continuekernel
   6288  41b8				  -	      else
   6289  41b8				  -	      ifnconst	playercolors
   6290  41b8				  -	      ifconst	PFcolors
   6291  41b8				  -	      txa
   6292  41b8				  -	      tay
   6293  41b8				  -	      lda	(pfcolortable),y
   6294  41b8				  -	      ifnconst	backgroundchange
   6295  41b8				  -	      sta	COLUPF
   6296  41b8				  -	      else
   6297  41b8				  -	      sta	COLUBK
   6298  41b8				  -	      endif
   6299  41b8				  -	      jmp	continuekernel
   6300  41b8				  -	      else
   6301  41b8				  -	      ifconst	kernelmacrodef
   6302  41b8				  -	      kernelmacro
   6303  41b8				  -	      else
   6304  41b8				  -	      sleep	12
   6305  41b8				  -	      endif
   6306  41b8				  -	      endif
   6307  41b8				  -	      else
   6308  41b8				  -	      lda	(player0color),y
   6309  41b8				  -	      sta	player0colorstore
   6310  41b8				  -	      sleep	4
   6311  41b8				  -	      endif
   6312  41b8				  -	      jmp	continuekernel
   6313  41b8				  -	      endif
   6314  41b8				  -altkernel2
   6315  41b8				  -	      txa
   6316  41b8				  -	      ifnconst	vertical_reflect
   6317  41b8				  -	      sbx	#256-pfwidth
   6318  41b8				  -	      else
   6319  41b8				  -	      sbx	#256-pfwidth/2
   6320  41b8				  -	      endif
   6321  41b8				  -	      bmi	lastkernelline
   6322  41b8				  -	      ifconst	pfrowheight
   6323  41b8				  -	      lda	#pfrowheight
   6324  41b8				  -	      else
   6325  41b8				  -	      ifnconst	pfres
   6326  41b8				  -	      lda	#8
   6327  41b8				  -	      else
   6328  41b8				  -	      lda	#(96/pfres)	; try to come close to the real size
   6329  41b8				  -	      endif
   6330  41b8				  -	      endif
   6331  41b8				  -	      sta	temp1
   6332  41b8				  -	      jmp	continuekernel
   6333  41b8					      endif
   6334  41b8
   6335  41b8				   altkernel
   6336  41b8
   6337  41b8				  -	      ifconst	PFmaskvalue
   6338  41b8				  -	      lda	#PFmaskvalue
   6339  41b8					      else
   6340  41b8		       a9 00		      lda	#0
   6341  41ba					      endif
   6342  41ba		       85 0e		      sta	PF1L
   6343  41bc		       85 0f		      sta	PF2
   6344  41be
   6345  41be
   6346  41be							;sleep 3
   6347  41be
   6348  41be							;28 cycles to fix things
   6349  41be							;minus 11=17
   6350  41be
   6351  41be							; lax temp4
   6352  41be							; clc
   6353  41be		       8a		      txa
   6354  41bf					      ifnconst	vertical_reflect
   6355  41bf		       cb fc		      sbx	#256-pfwidth
   6356  41c1				  -	      else
   6357  41c1				  -	      sbx	#256-pfwidth/2
   6358  41c1					      endif
   6359  41c1
   6360  41c1		       30 12		      bmi	lastkernelline
   6361  41c3
   6362  41c3				  -	      ifconst	PFcolorandheight
   6363  41c3				  -	      ifconst	pfres
   6364  41c3				  -	      ldy	playfieldcolorandheight-131+pfres*pfwidth,x
   6365  41c3				  -	      else
   6366  41c3				  -	      ldy	playfieldcolorandheight-87,x
   6367  41c3				  -	      endif
   6368  41c3				  -	      ifnconst	backgroundchange
   6369  41c3				  -	      sty	COLUPF
   6370  41c3				  -	      else
   6371  41c3				  -	      sty	COLUBK
   6372  41c3				  -	      endif
   6373  41c3				  -	      ifconst	pfres
   6374  41c3				  -	      lda	playfieldcolorandheight-132+pfres*pfwidth,x
   6375  41c3				  -	      else
   6376  41c3				  -	      lda	playfieldcolorandheight-88,x
   6377  41c3				  -	      endif
   6378  41c3				  -	      sta.w	temp1
   6379  41c3					      endif
   6380  41c3				  -	      ifconst	PFheights
   6381  41c3				  -	      lsr
   6382  41c3				  -	      lsr
   6383  41c3				  -	      tay
   6384  41c3				  -	      lda	(pfheighttable),y
   6385  41c3				  -	      sta.w	temp1
   6386  41c3					      endif
   6387  41c3					      ifconst	PFcolors
   6388  41c3		       a8		      tay
   6389  41c4		       b1 f0		      lda	(pfcolortable),y
   6390  41c6					      ifnconst	backgroundchange
   6391  41c6		       85 08		      sta	COLUPF
   6392  41c8				  -	      else
   6393  41c8				  -	      sta	COLUBK
   6394  41c8					      endif
   6395  41c8				  -	      ifconst	pfrowheight
   6396  41c8				  -	      lda	#pfrowheight
   6397  41c8					      else
   6398  41c8				  -	      ifnconst	pfres
   6399  41c8				  -	      lda	#8
   6400  41c8					      else
   6401  41c8		       a9 18		      lda	#(96/pfres)	; try to come close to the real size
   6402  41ca					      endif
   6403  41ca					      endif
   6404  41ca		       85 9c		      sta	temp1
   6405  41cc					      endif
   6406  41cc					      ifnconst	PFcolorandheight
   6407  41cc				  -	      ifnconst	PFcolors
   6408  41cc				  -	      ifnconst	PFheights
   6409  41cc				  -	      ifnconst	no_blank_lines
   6410  41cc				  -			; read paddle 0
   6411  41cc				  -			; lo-res paddle read
   6412  41cc				  -			; bit INPT0
   6413  41cc				  -			; bmi paddleskipread
   6414  41cc				  -			; inc paddle0
   6415  41cc				  -			;donepaddleskip
   6416  41cc				  -	      sleep	10
   6417  41cc				  -	      ifconst	pfrowheight
   6418  41cc				  -	      lda	#pfrowheight
   6419  41cc				  -	      else
   6420  41cc				  -	      ifnconst	pfres
   6421  41cc				  -	      lda	#8
   6422  41cc				  -	      else
   6423  41cc				  -	      lda	#(96/pfres)	; try to come close to the real size
   6424  41cc				  -	      endif
   6425  41cc				  -	      endif
   6426  41cc				  -	      sta	temp1
   6427  41cc				  -	      endif
   6428  41cc				  -	      endif
   6429  41cc					      endif
   6430  41cc					      endif
   6431  41cc
   6432  41cc
   6433  41cc		       a5 92		      lda	ballheight
   6434  41ce		       c7 89		      dcp	bally
   6435  41d0		       e5 9f		      sbc	temp4
   6436  41d2
   6437  41d2
   6438  41d2		       4c 76 f1 	      jmp	goback
   6439  41d5
   6440  41d5
   6441  41d5					      ifnconst	no_blank_lines
   6442  41d5				   lastkernelline
   6443  41d5				  -	      ifnconst	PFcolors
   6444  41d5				  -	      sleep	10
   6445  41d5					      else
   6446  41d5		       a0 7c		      ldy	#124
   6447  41d7		       b1 f0		      lda	(pfcolortable),y
   6448  41d9		       85 08		      sta	COLUPF
   6449  41db					      endif
   6450  41db
   6451  41db				  -	      ifconst	PFheights
   6452  41db				  -	      ldx	#1
   6453  41db				  -			;sleep 4
   6454  41db				  -	      sleep	3	; this was over 1 cycle
   6455  41db					      else
   6456  41db		       a6 ef		      ldx	playfieldpos
   6457  41dd							;sleep 3
      0  41dd					      sleep	2	; this was over 1 cycle
      1  41dd				   .CYCLES    SET	2
      2  41dd
      3  41dd				  -	      IF	.CYCLES < 2
      4  41dd				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  41dd				  -	      ERR
      6  41dd					      ENDIF
      7  41dd
      8  41dd				  -	      IF	.CYCLES & 1
      9  41dd				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  41dd				  -	      nop	0
     11  41dd				  -	      ELSE
     12  41dd				  -	      bit	VSYNC
     13  41dd				  -	      ENDIF
     14  41dd				  -.CYCLES    SET	.CYCLES - 3
     15  41dd					      ENDIF
     16  41dd
     17  41dd					      REPEAT	.CYCLES / 2
     18  41dd		       ea		      nop
     19  41de					      REPEND
   6459  41de					      endif
   6460  41de
   6461  41de		       4c 1b f2 	      jmp	enterlastkernel
   6462  41e1
   6463  41e1				  -	      else
   6464  41e1				  -lastkernelline
   6465  41e1				  -
   6466  41e1				  -	      ifconst	PFheights
   6467  41e1				  -	      ldx	#1
   6468  41e1				  -			;sleep 5
   6469  41e1				  -	      sleep	4	; this was over 1 cycle
   6470  41e1				  -	      else
   6471  41e1				  -	      ldx	playfieldpos
   6472  41e1				  -			;sleep 4
   6473  41e1				  -	      sleep	3	; this was over 1 cycle
   6474  41e1				  -	      endif
   6475  41e1				  -
   6476  41e1				  -	      cpx	#0
   6477  41e1				  -	      bne	.enterfromNBL
   6478  41e1				  -	      jmp	no_blank_lines_bailout
   6479  41e1					      endif
   6480  41e1
   6481  41e1					      if	((<*)>$d5)
   6482  4200		       00 00 00 00*	      align	256
   6483  4200					      endif
   6484  4200							; this is a kludge to prevent page wrapping - fix!!!
   6485  4200
   6486  4200				   .skipDrawlastP1
   6487  4200		       a9 00		      lda	#0
   6488  4202		       a8		      tay		; added so we don't cross a page
   6489  4203		       4c 2d f2 	      jmp	.continuelastP1
   6490  4206
   6491  4206				   .endkerloop		; enter at cycle 59??
   6492  4206
   6493  4206		       ea		      nop
   6494  4207
   6495  4207				   .enterfromNBL
   6496  4207					      ifconst	pfres
   6497  4207		       ac fc 10 	      ldy.w	playfield+pfres*pfwidth-4
   6498  420a		       84 0e		      sty	PF1L	;3
   6499  420c		       ac fd 10 	      ldy.w	playfield+pfres*pfwidth-3-pfadjust
   6500  420f		       84 0f		      sty	PF2L	;3
   6501  4211		       ac ff 10 	      ldy.w	playfield+pfres*pfwidth-1
   6502  4214		       84 0e		      sty	PF1R	; possibly too early?
   6503  4216		       ac fe 10 	      ldy.w	playfield+pfres*pfwidth-2-pfadjust
   6504  4219		       84 0f		      sty	PF2R	;3
   6505  421b				  -	      else
   6506  421b				  -	      ldy.w	playfield-48+pfwidth*12+44
   6507  421b				  -	      sty	PF1L	;3
   6508  421b				  -	      ldy.w	playfield-48+pfwidth*12+45-pfadjust
   6509  421b				  -	      sty	PF2L	;3
   6510  421b				  -	      ldy.w	playfield-48+pfwidth*12+47
   6511  421b				  -	      sty	PF1R	; possibly too early?
   6512  421b				  -	      ldy.w	playfield-48+pfwidth*12+46-pfadjust
   6513  421b				  -	      sty	PF2R	;3
   6514  421b					      endif
   6515  421b
   6516  421b				   enterlastkernel
   6517  421b		       a5 92		      lda	ballheight
   6518  421d
   6519  421d							; tya
   6520  421d		       c7 89		      dcp	bally
   6521  421f							; sleep 4
   6522  421f
   6523  421f							; sbc stack3
   6524  421f		       2a		      rol
   6525  4220		       2a		      rol
   6526  4221		       85 1f		      sta	ENABL
   6527  4223
   6528  4223		       a5 8f		      lda	player1height	;3
   6529  4225		       c7 86		      dcp	player1y	;5
   6530  4227		       90 d7		      bcc	.skipDrawlastP1
   6531  4229		       a4 86		      ldy	player1y	;3
   6532  422b		       b1 8c		      lda	(player1pointer),y	;5; player0pointer must be selected carefully by the compiler
   6533  422d							; so it doesn't cross a page boundary!
   6534  422d
   6535  422d				   .continuelastP1
   6536  422d		       85 1c		      sta	GRP1	;3
   6537  422f
   6538  422f				  -	      ifnconst	player1colors
   6539  422f				  -	      lda	missile1height	;3
   6540  422f				  -	      dcp	missile1y	;5
   6541  422f					      else
   6542  422f		       b1 87		      lda	(player1color),y
   6543  4231		       85 07		      sta	COLUP1
   6544  4233					      endif
   6545  4233
   6546  4233		       ca		      dex
   6547  4234							;dec temp4 ; might try putting this above PF writes
   6548  4234		       f0 36		      beq	endkernel
   6549  4236
   6550  4236
   6551  4236					      ifconst	pfres
   6552  4236		       ac fc 10 	      ldy.w	playfield+pfres*pfwidth-4
   6553  4239		       84 0e		      sty	PF1L	;3
   6554  423b		       ac fd 10 	      ldy.w	playfield+pfres*pfwidth-3-pfadjust
   6555  423e		       84 0f		      sty	PF2L	;3
   6556  4240		       ac ff 10 	      ldy.w	playfield+pfres*pfwidth-1
   6557  4243		       84 0e		      sty	PF1R	; possibly too early?
   6558  4245		       ac fe 10 	      ldy.w	playfield+pfres*pfwidth-2-pfadjust
   6559  4248		       84 0f		      sty	PF2R	;3
   6560  424a				  -	      else
   6561  424a				  -	      ldy.w	playfield-48+pfwidth*12+44
   6562  424a				  -	      sty	PF1L	;3
   6563  424a				  -	      ldy.w	playfield-48+pfwidth*12+45-pfadjust
   6564  424a				  -	      sty	PF2L	;3
   6565  424a				  -	      ldy.w	playfield-48+pfwidth*12+47
   6566  424a				  -	      sty	PF1R	; possibly too early?
   6567  424a				  -	      ldy.w	playfield-48+pfwidth*12+46-pfadjust
   6568  424a				  -	      sty	PF2R	;3
   6569  424a					      endif
   6570  424a
   6571  424a				  -	      ifnconst	player1colors
   6572  424a				  -	      rol		;2
   6573  424a				  -	      rol		;2
   6574  424a				  -	      sta	ENAM1	;3
   6575  424a					      else
   6576  424a					      ifnconst	playercolors
      0  424a					      sleep	7
      1  424a				   .CYCLES    SET	7
      2  424a
      3  424a				  -	      IF	.CYCLES < 2
      4  424a				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  424a				  -	      ERR
      6  424a					      ENDIF
      7  424a
      8  424a					      IF	.CYCLES & 1
      9  424a					      IFNCONST	NO_ILLEGAL_OPCODES
     10  424a		       04 00		      nop	0
     11  424c				  -	      ELSE
     12  424c				  -	      bit	VSYNC
     13  424c					      ENDIF
     14  424c				   .CYCLES    SET	.CYCLES - 3
     15  424c					      ENDIF
     16  424c
     17  424c					      REPEAT	.CYCLES / 2
     18  424c		       ea		      nop
     17  424c					      REPEND
     18  424d		       ea		      nop
     19  424e					      REPEND
   6578  424e				  -	      else
   6579  424e				  -	      lda.w	player0colorstore
   6580  424e				  -	      sta	COLUP0
   6581  424e					      endif
   6582  424e					      endif
   6583  424e
   6584  424e		       ad 8e 00 	      lda.w	player0height
   6585  4251		       c7 85		      dcp	player0y
   6586  4253		       90 11		      bcc	.skipDrawlastP0
   6587  4255		       a4 85		      ldy	player0y
   6588  4257		       b1 8a		      lda	(player0pointer),y
   6589  4259				   .continuelastP0
   6590  4259		       85 1b		      sta	GRP0
   6591  425b
   6592  425b
   6593  425b
   6594  425b					      ifnconst	no_blank_lines
   6595  425b		       a5 90		      lda	missile0height	;3
   6596  425d		       c7 91		      dcp	missile0y	;5
   6597  425f		       e5 f6		      sbc	stack1
   6598  4261		       85 1d		      sta	ENAM0	;3
   6599  4263		       4c 06 f2 	      jmp	.endkerloop
   6600  4266				  -	      else
   6601  4266				  -	      ifconst	readpaddle
   6602  4266				  -	      ldy	currentpaddle
   6603  4266				  -	      lda	INPT0,y
   6604  4266				  -	      bpl	noreadpaddle2
   6605  4266				  -	      inc	paddle
   6606  4266				  -	      jmp	.endkerloop
   6607  4266				  -noreadpaddle2
   6608  4266				  -	      sleep	4
   6609  4266				  -	      jmp	.endkerloop
   6610  4266				  -	      else		; no_blank_lines and no paddle reading
   6611  4266				  -	      pla
   6612  4266				  -	      pha		; 14 cycles in 4 bytes
   6613  4266				  -	      pla
   6614  4266				  -	      pha
   6615  4266				  -			; sleep 14
   6616  4266				  -	      jmp	.endkerloop
   6617  4266				  -	      endif
   6618  4266					      endif
   6619  4266
   6620  4266
   6621  4266							; ifconst donepaddleskip
   6622  4266							;paddleskipread
   6623  4266							; this is kind of lame, since it requires 4 cycles from a page boundary crossing
   6624  4266							; plus we get a lo-res paddle read
   6625  4266							; bmi donepaddleskip
   6626  4266							; endif
   6627  4266
   6628  4266				   .skipDrawlastP0
   6629  4266		       a9 00		      lda	#0
   6630  4268		       a8		      tay
   6631  4269		       4c 59 f2 	      jmp	.continuelastP0
   6632  426c
   6633  426c				  -	      ifconst	no_blank_lines
   6634  426c				  -no_blank_lines_bailout
   6635  426c				  -	      ldx	#0
   6636  426c					      endif
   6637  426c
   6638  426c				   endkernel
   6639  426c							; 6 digit score routine
   6640  426c		       86 0e		      stx	PF1
   6641  426e		       86 0f		      stx	PF2
   6642  4270		       86 0d		      stx	PF0
   6643  4272		       18		      clc
   6644  4273
   6645  4273				  -	      ifconst	pfrowheight
   6646  4273				  -	      lda	#pfrowheight+2
   6647  4273					      else
   6648  4273				  -	      ifnconst	pfres
   6649  4273				  -	      lda	#10
   6650  4273					      else
   6651  4273		       a9 1a		      lda	#(96/pfres)+2	; try to come close to the real size
   6652  4275					      endif
   6653  4275					      endif
   6654  4275
   6655  4275		       e5 ef		      sbc	playfieldpos
   6656  4277		       85 ef		      sta	playfieldpos
   6657  4279		       8a		      txa
   6658  427a
   6659  427a				  -	      ifconst	shakescreen
   6660  427a				  -	      bit	shakescreen
   6661  427a				  -	      bmi	noshakescreen2
   6662  427a				  -	      ldx	#$3D
   6663  427a				  -noshakescreen2
   6664  427a					      endif
   6665  427a
   6666  427a		       95 02		      sta	WSYNC,x
   6667  427c
   6668  427c							; STA WSYNC ;first one, need one more
   6669  427c		       85 0b		      sta	REFP0
   6670  427e		       85 0c		      sta	REFP1
   6671  4280		       85 1b		      STA	GRP0
   6672  4282		       85 1c		      STA	GRP1
   6673  4284							; STA PF1
   6674  4284							; STA PF2
   6675  4284		       85 2b		      sta	HMCLR
   6676  4286		       85 1d		      sta	ENAM0
   6677  4288		       85 1e		      sta	ENAM1
   6678  428a		       85 1f		      sta	ENABL
   6679  428c
   6680  428c		       a5 9d		      lda	temp2	;restore variables that were obliterated by kernel
   6681  428e		       85 85		      sta	player0y
   6682  4290		       a5 9e		      lda	temp3
   6683  4292		       85 86		      sta	player1y
   6684  4294				  -	      ifnconst	player1colors
   6685  4294				  -	      lda	temp6
   6686  4294				  -	      sta	missile1y
   6687  4294					      endif
   6688  4294					      ifnconst	playercolors
   6689  4294					      ifnconst	readpaddle
   6690  4294		       a5 a0		      lda	temp5
   6691  4296		       85 91		      sta	missile0y
   6692  4298					      endif
   6693  4298					      endif
   6694  4298		       a5 f7		      lda	stack2
   6695  429a		       85 89		      sta	bally
   6696  429c
   6697  429c							; strangely, this isn't required any more. might have
   6698  429c							; resulted from the no_blank_lines score bounce fix
   6699  429c							;ifconst no_blank_lines
   6700  429c							;sta WSYNC
   6701  429c							;endif
   6702  429c
   6703  429c		       ad 84 02 	      lda	INTIM
   6704  429f		       18		      clc
   6705  42a0					      ifnconst	vblank_time
   6706  42a0		       69 8e		      adc	#43+12+87
   6707  42a2				  -	      else
   6708  42a2				  -	      adc	#vblank_time+12+87
   6709  42a2				  -
   6710  42a2					      endif
   6711  42a2							; sta WSYNC
   6712  42a2		       8d 96 02 	      sta	TIM64T
   6713  42a5
   6714  42a5					      ifconst	minikernel
   6715  42a5		       20 86 f5 	      jsr	minikernel
   6716  42a8					      endif
   6717  42a8
   6718  42a8							; now reassign temp vars for score pointers
   6719  42a8
   6720  42a8							; score pointers contain:
   6721  42a8							; score1-5: lo1,lo2,lo3,lo4,lo5,lo6
   6722  42a8							; swap lo2->temp1
   6723  42a8							; swap lo4->temp3
   6724  42a8							; swap lo6->temp5
   6725  42a8				  -	      ifnconst	noscore
   6726  42a8				  -	      lda	scorepointers+1
   6727  42a8				  -			; ldy temp1
   6728  42a8				  -	      sta	temp1
   6729  42a8				  -			; sty scorepointers+1
   6730  42a8				  -
   6731  42a8				  -	      lda	scorepointers+3
   6732  42a8				  -			; ldy temp3
   6733  42a8				  -	      sta	temp3
   6734  42a8				  -			; sty scorepointers+3
   6735  42a8				  -
   6736  42a8				  -
   6737  42a8				  -	      sta	HMCLR
   6738  42a8				  -	      tsx
   6739  42a8				  -	      stx	stack1
   6740  42a8				  -	      ldx	#$E0
   6741  42a8				  -	      stx	HMP0
   6742  42a8				  -
   6743  42a8				  -	      LDA	scorecolor
   6744  42a8				  -	      STA	COLUP0
   6745  42a8				  -	      STA	COLUP1
   6746  42a8				  -	      ifconst	scorefade
   6747  42a8				  -	      STA	stack2
   6748  42a8				  -	      endif
   6749  42a8				  -	      ifconst	pfscore
   6750  42a8				  -	      lda	pfscorecolor
   6751  42a8				  -	      sta	COLUPF
   6752  42a8				  -	      endif
   6753  42a8				  -	      sta	WSYNC
   6754  42a8				  -	      ldx	#0
   6755  42a8				  -	      STx	GRP0
   6756  42a8				  -	      STx	GRP1	; seems to be needed because of vdel
   6757  42a8				  -
   6758  42a8				  -	      lda	scorepointers+5
   6759  42a8				  -			; ldy temp5
   6760  42a8				  -	      sta	temp5,x
   6761  42a8				  -			; sty scorepointers+5
   6762  42a8				  -	      lda	#>scoretable
   6763  42a8				  -	      sta	scorepointers+1
   6764  42a8				  -	      sta	scorepointers+3
   6765  42a8				  -	      sta	scorepointers+5
   6766  42a8				  -	      sta	temp2
   6767  42a8				  -	      sta	temp4
   6768  42a8				  -	      sta	temp6
   6769  42a8				  -	      LDY	#7
   6770  42a8				  -	      STY	VDELP0
   6771  42a8				  -	      STA	RESP0
   6772  42a8				  -	      STA	RESP1
   6773  42a8				  -
   6774  42a8				  -
   6775  42a8				  -	      LDA	#$03
   6776  42a8				  -	      STA	NUSIZ0
   6777  42a8				  -	      STA	NUSIZ1
   6778  42a8				  -	      STA	VDELP1
   6779  42a8				  -	      LDA	#$F0
   6780  42a8				  -	      STA	HMP1
   6781  42a8				  -	      lda	(scorepointers),y
   6782  42a8				  -	      sta	GRP0
   6783  42a8				  -	      STA	HMOVE	; cycle 73 ?
   6784  42a8				  -	      jmp	beginscore
   6785  42a8				  -
   6786  42a8				  -
   6787  42a8				  -	      if	((<*)>$d4)
   6788  42a8				  -	      align	256	; kludge that potentially wastes space! should be fixed!
   6789  42a8				  -	      endif
   6790  42a8				  -
   6791  42a8				  -loop2
   6792  42a8				  -	      lda	(scorepointers),y	;+5 68 204
   6793  42a8				  -	      sta	GRP0	;+3 71 213 D1 -- -- --
   6794  42a8				  -	      ifconst	pfscore
   6795  42a8				  -	      lda.w	pfscore1
   6796  42a8				  -	      sta	PF1
   6797  42a8				  -	      else
   6798  42a8				  -	      ifconst	scorefade
   6799  42a8				  -	      sleep	2
   6800  42a8				  -	      dec	stack2	; decrement the temporary scorecolor
   6801  42a8				  -	      else
   6802  42a8				  -	      sleep	7
   6803  42a8				  -	      endif
   6804  42a8				  -	      endif
   6805  42a8				  -			; cycle 0
   6806  42a8				  -beginscore
   6807  42a8				  -	      lda	(scorepointers+$8),y	;+5 5 15
   6808  42a8				  -	      sta	GRP1	;+3 8 24 D1 D1 D2 --
   6809  42a8				  -	      lda	(scorepointers+$6),y	;+5 13 39
   6810  42a8				  -	      sta	GRP0	;+3 16 48 D3 D1 D2 D2
   6811  42a8				  -	      lax	(scorepointers+$2),y	;+5 29 87
   6812  42a8				  -	      txs
   6813  42a8				  -	      lax	(scorepointers+$4),y	;+5 36 108
   6814  42a8				  -	      ifconst	scorefade
   6815  42a8				  -	      lda	stack2
   6816  42a8				  -	      else
   6817  42a8				  -	      sleep	3
   6818  42a8				  -	      endif
   6819  42a8				  -
   6820  42a8				  -	      ifconst	pfscore
   6821  42a8				  -	      lda	pfscore2
   6822  42a8				  -	      sta	PF1
   6823  42a8				  -	      else
   6824  42a8				  -	      ifconst	scorefade
   6825  42a8				  -	      sta	COLUP0
   6826  42a8				  -	      sta	COLUP1
   6827  42a8				  -	      else
   6828  42a8				  -	      sleep	6
   6829  42a8				  -	      endif
   6830  42a8				  -	      endif
   6831  42a8				  -
   6832  42a8				  -	      lda	(scorepointers+$A),y	;+5 21 63
   6833  42a8				  -	      stx	GRP1	;+3 44 132 D3 D3 D4 D2!
   6834  42a8				  -	      tsx
   6835  42a8				  -	      stx	GRP0	;+3 47 141 D5 D3! D4 D4
   6836  42a8				  -	      sta	GRP1	;+3 50 150 D5 D5 D6 D4!
   6837  42a8				  -	      sty	GRP0	;+3 53 159 D4* D5! D6 D6
   6838  42a8				  -	      dey
   6839  42a8				  -	      bpl	loop2	;+2 60 180
   6840  42a8				  -
   6841  42a8				  -	      ldx	stack1
   6842  42a8				  -	      txs
   6843  42a8				  -			; lda scorepointers+1
   6844  42a8				  -	      ldy	temp1
   6845  42a8				  -			; sta temp1
   6846  42a8				  -	      sty	scorepointers+1
   6847  42a8				  -
   6848  42a8				  -	      LDA	#0
   6849  42a8				  -	      sta	PF1
   6850  42a8				  -	      STA	GRP0
   6851  42a8				  -	      STA	GRP1
   6852  42a8				  -	      STA	VDELP0
   6853  42a8				  -	      STA	VDELP1	;do we need these
   6854  42a8				  -	      STA	NUSIZ0
   6855  42a8				  -	      STA	NUSIZ1
   6856  42a8				  -
   6857  42a8				  -			; lda scorepointers+3
   6858  42a8				  -	      ldy	temp3
   6859  42a8				  -			; sta temp3
   6860  42a8				  -	      sty	scorepointers+3
   6861  42a8				  -
   6862  42a8				  -			; lda scorepointers+5
   6863  42a8				  -	      ldy	temp5
   6864  42a8				  -			; sta temp5
   6865  42a8				  -	      sty	scorepointers+5
   6866  42a8					      endif		;noscore
   6867  42a8				  -	      ifconst	readpaddle
   6868  42a8				  -	      lda	#%11000010
   6869  42a8					      else
   6870  42a8				  -	      ifconst	qtcontroller
   6871  42a8				  -	      lda	qtcontroller
   6872  42a8				  -	      lsr		; bit 0 in carry
   6873  42a8				  -	      lda	#4
   6874  42a8				  -	      ror		; carry into top of A
   6875  42a8					      else
   6876  42a8		       a9 02		      lda	#2
   6877  42aa					      endif		; qtcontroller
   6878  42aa					      endif		; readpaddle
   6879  42aa		       85 02		      sta	WSYNC
   6880  42ac		       85 01		      sta	VBLANK
      0  42ae					      RETURN
      1  42ae				  -	      ifnconst	bankswitch
      2  42ae				  -	      rts
      3  42ae					      else
      4  42ae		       4c da ff 	      jmp	BS_return
      5  42b1					      endif
   6882  42b1				  -	      ifconst	shakescreen
   6883  42b1				  -doshakescreen
   6884  42b1				  -	      bit	shakescreen
   6885  42b1				  -	      bmi	noshakescreen
   6886  42b1				  -	      sta	WSYNC
   6887  42b1				  -noshakescreen
   6888  42b1				  -	      ldx	missile0height
   6889  42b1				  -	      inx
   6890  42b1				  -	      rts
   6891  42b1					      endif
   6892  42b1
   6893  42b1							; Provided under the CC0 license. See the included LICENSE.txt for details.
   6894  42b1
   6895  42b1				   start
   6896  42b1		       78		      sei
   6897  42b2		       d8		      cld
   6898  42b3		       a0 00		      ldy	#0
   6899  42b5		       a5 d0		      lda	$D0
   6900  42b7		       c9 2c		      cmp	#$2C	;check RAM location #1
   6901  42b9		       d0 07		      bne	MachineIs2600
   6902  42bb		       a5 d1		      lda	$D1
   6903  42bd		       c9 a9		      cmp	#$A9	;check RAM location #2
   6904  42bf		       d0 01		      bne	MachineIs2600
   6905  42c1		       88		      dey
   6906  42c2				   MachineIs2600
   6907  42c2		       a2 00		      ldx	#0
   6908  42c4		       8a		      txa
   6909  42c5				   clearmem
   6910  42c5		       e8		      inx
   6911  42c6		       9a		      txs
   6912  42c7		       48		      pha
   6913  42c8		       d0 fb		      bne	clearmem
   6914  42ca		       84 9c		      sty	temp1
   6915  42cc					      ifnconst	multisprite
   6916  42cc				  -	      ifconst	pfrowheight
   6917  42cc				  -	      lda	#pfrowheight
   6918  42cc					      else
   6919  42cc					      ifconst	pfres
   6920  42cc		       a9 18		      lda	#(96/pfres)
   6921  42ce				  -	      else
   6922  42ce				  -	      lda	#8
   6923  42ce					      endif
   6924  42ce					      endif
   6925  42ce		       85 ef		      sta	playfieldpos
   6926  42d0					      endif
   6927  42d0		       a2 05		      ldx	#5
   6928  42d2				   initscore
   6929  42d2		       a9 71		      lda	#<scoretable
   6930  42d4		       95 96		      sta	scorepointers,x
   6931  42d6		       ca		      dex
   6932  42d7		       10 f9		      bpl	initscore
   6933  42d9		       a9 01		      lda	#1
   6934  42db		       85 0a		      sta	CTRLPF
   6935  42dd		       0d 84 02 	      ora	INTIM
   6936  42e0		       85 a2		      sta	rand
   6937  42e2
   6938  42e2				  -	      ifconst	multisprite
   6939  42e2				  -	      jsr	multisprite_setup
   6940  42e2					      endif
   6941  42e2
   6942  42e2				  -	      ifnconst	bankswitch
   6943  42e2				  -	      jmp	game
   6944  42e2					      else
   6945  42e2		       a9 90		      lda	#>(game-1)
   6946  42e4		       48		      pha
   6947  42e5		       a9 ff		      lda	#<(game-1)
   6948  42e7		       48		      pha
   6949  42e8		       48		      pha
   6950  42e9		       48		      pha
   6951  42ea		       a2 01		      ldx	#1
   6952  42ec		       4c e8 ff 	      jmp	BS_jsr
   6953  42ef					      endif
   6954  42ef							; Provided under the CC0 license. See the included LICENSE.txt for details.
   6955  42ef
   6956  42ef							; playfield drawing routines
   6957  42ef							; you get a 32x12 bitmapped display in a single color :)
   6958  42ef							; 0-31 and 0-11
   6959  42ef
   6960  42ef				   pfclear		; clears playfield - or fill with pattern
   6961  42ef					      ifconst	pfres
   6962  42ef		       a2 0f		      ldx	#pfres*pfwidth-1
   6963  42f1				  -	      else
   6964  42f1				  -	      ldx	#47-(4-pfwidth)*12	; will this work?
   6965  42f1					      endif
   6966  42f1				   pfclear_loop
   6967  42f1				  -	      ifnconst	superchip
   6968  42f1				  -	      sta	playfield,x
   6969  42f1					      else
   6970  42f1		       9d 70 10 	      sta	playfield-128,x
   6971  42f4					      endif
   6972  42f4		       ca		      dex
   6973  42f5		       10 fa		      bpl	pfclear_loop
      0  42f7					      RETURN
      1  42f7				  -	      ifnconst	bankswitch
      2  42f7				  -	      rts
      3  42f7					      else
      4  42f7		       4c da ff 	      jmp	BS_return
      5  42fa					      endif
   6975  42fa
   6976  42fa				   setuppointers
   6977  42fa		       86 9d		      stx	temp2	; store on.off.flip value
   6978  42fc		       aa		      tax		; put x-value in x 
   6979  42fd		       4a		      lsr
   6980  42fe		       4a		      lsr
   6981  42ff		       4a		      lsr		; divide x pos by 8 
   6982  4300		       85 9c		      sta	temp1
   6983  4302		       98		      tya
   6984  4303		       0a		      asl
   6985  4304					      if	pfwidth=4
   6986  4304		       0a		      asl		; multiply y pos by 4
   6987  4305					      endif		; else multiply by 2
   6988  4305		       18		      clc
   6989  4306		       65 9c		      adc	temp1	; add them together to get actual memory location offset
   6990  4308		       a8		      tay		; put the value in y
   6991  4309		       a5 9d		      lda	temp2	; restore on.off.flip value
   6992  430b		       60		      rts
   6993  430c
   6994  430c				   pfread
   6995  430c							;x=xvalue, y=yvalue
   6996  430c		       20 fa f2 	      jsr	setuppointers
   6997  430f		       bd a4 f3 	      lda	setbyte,x
   6998  4312		       39 f0 10 	      and	playfield,y
   6999  4315		       5d a4 f3 	      eor	setbyte,x
   7000  4318							; beq readzero
   7001  4318							; lda #1
   7002  4318							; readzero
      0  4318					      RETURN
      1  4318				  -	      ifnconst	bankswitch
      2  4318				  -	      rts
      3  4318					      else
      4  4318		       4c da ff 	      jmp	BS_return
      5  431b					      endif
   7004  431b
   7005  431b				   pfpixel
   7006  431b							;x=xvalue, y=yvalue, a=0,1,2
   7007  431b		       20 fa f2 	      jsr	setuppointers
   7008  431e
   7009  431e					      ifconst	bankswitch
   7010  431e		       a5 9d		      lda	temp2	; load on.off.flip value (0,1, or 2)
   7011  4320		       f0 0f		      beq	pixelon_r	; if "on" go to on
   7012  4322		       4a		      lsr
   7013  4323		       b0 18		      bcs	pixeloff_r	; value is 1 if true
   7014  4325		       b9 f0 10 	      lda	playfield,y	; if here, it's "flip"
   7015  4328		       5d a4 f3 	      eor	setbyte,x
   7016  432b					      ifconst	superchip
   7017  432b		       99 70 10 	      sta	playfield-128,y
   7018  432e				  -	      else
   7019  432e				  -	      sta	playfield,y
   7020  432e					      endif
      0  432e					      RETURN
      1  432e				  -	      ifnconst	bankswitch
      2  432e				  -	      rts
      3  432e					      else
      4  432e		       4c da ff 	      jmp	BS_return
      5  4331					      endif
   7022  4331				   pixelon_r
   7023  4331		       b9 f0 10 	      lda	playfield,y
   7024  4334		       1d a4 f3 	      ora	setbyte,x
   7025  4337					      ifconst	superchip
   7026  4337		       99 70 10 	      sta	playfield-128,y
   7027  433a				  -	      else
   7028  433a				  -	      sta	playfield,y
   7029  433a					      endif
      0  433a					      RETURN
      1  433a				  -	      ifnconst	bankswitch
      2  433a				  -	      rts
      3  433a					      else
      4  433a		       4c da ff 	      jmp	BS_return
      5  433d					      endif
   7031  433d				   pixeloff_r
   7032  433d		       bd a4 f3 	      lda	setbyte,x
   7033  4340		       49 ff		      eor	#$ff
   7034  4342		       39 f0 10 	      and	playfield,y
   7035  4345					      ifconst	superchip
   7036  4345		       99 70 10 	      sta	playfield-128,y
   7037  4348				  -	      else
   7038  4348				  -	      sta	playfield,y
   7039  4348					      endif
      0  4348					      RETURN
      1  4348				  -	      ifnconst	bankswitch
      2  4348				  -	      rts
      3  4348					      else
      4  4348		       4c da ff 	      jmp	BS_return
      5  434b					      endif
   7041  434b
   7042  434b				  -	      else
   7043  434b				  -	      jmp	plotpoint
   7044  434b					      endif
   7045  434b
   7046  434b				   pfhline
   7047  434b							;x=xvalue, y=yvalue, a=0,1,2, temp3=endx
   7048  434b		       20 fa f2 	      jsr	setuppointers
   7049  434e		       4c 58 f3 	      jmp	noinc
   7050  4351				   keepgoing
   7051  4351		       e8		      inx
   7052  4352		       8a		      txa
   7053  4353		       29 07		      and	#7
   7054  4355		       d0 01		      bne	noinc
   7055  4357		       c8		      iny
   7056  4358				   noinc
   7057  4358		       20 7d f3 	      jsr	plotpoint
   7058  435b		       e4 9e		      cpx	temp3
   7059  435d		       30 f2		      bmi	keepgoing
      0  435f					      RETURN
      1  435f				  -	      ifnconst	bankswitch
      2  435f				  -	      rts
      3  435f					      else
      4  435f		       4c da ff 	      jmp	BS_return
      5  4362					      endif
   7061  4362
   7062  4362				   pfvline
   7063  4362							;x=xvalue, y=yvalue, a=0,1,2, temp3=endx
   7064  4362		       20 fa f2 	      jsr	setuppointers
   7065  4365		       84 9c		      sty	temp1	; store memory location offset
   7066  4367		       e6 9e		      inc	temp3	; increase final x by 1 
   7067  4369		       a5 9e		      lda	temp3
   7068  436b		       0a		      asl
   7069  436c					      if	pfwidth=4
   7070  436c		       0a		      asl		; multiply by 4
   7071  436d					      endif		; else multiply by 2
   7072  436d		       85 9e		      sta	temp3	; store it
   7073  436f							; Thanks to Michael Rideout for fixing a bug in this code
   7074  436f							; right now, temp1=y=starting memory location, temp3=final
   7075  436f							; x should equal original x value
   7076  436f				   keepgoingy
   7077  436f		       20 7d f3 	      jsr	plotpoint
   7078  4372		       c8		      iny
   7079  4373		       c8		      iny
   7080  4374					      if	pfwidth=4
   7081  4374		       c8		      iny
   7082  4375		       c8		      iny
   7083  4376					      endif
   7084  4376		       c4 9e		      cpy	temp3
   7085  4378		       30 f5		      bmi	keepgoingy
      0  437a					      RETURN
      1  437a				  -	      ifnconst	bankswitch
      2  437a				  -	      rts
      3  437a					      else
      4  437a		       4c da ff 	      jmp	BS_return
      5  437d					      endif
   7087  437d
   7088  437d				   plotpoint
   7089  437d		       a5 9d		      lda	temp2	; load on.off.flip value (0,1, or 2)
   7090  437f		       f0 0d		      beq	pixelon	; if "on" go to on
   7091  4381		       4a		      lsr
   7092  4382		       b0 14		      bcs	pixeloff	; value is 1 if true
   7093  4384		       b9 f0 10 	      lda	playfield,y	; if here, it's "flip"
   7094  4387		       5d a4 f3 	      eor	setbyte,x
   7095  438a					      ifconst	superchip
   7096  438a		       99 70 10 	      sta	playfield-128,y
   7097  438d				  -	      else
   7098  438d				  -	      sta	playfield,y
   7099  438d					      endif
   7100  438d		       60		      rts
   7101  438e				   pixelon
   7102  438e		       b9 f0 10 	      lda	playfield,y
   7103  4391		       1d a4 f3 	      ora	setbyte,x
   7104  4394					      ifconst	superchip
   7105  4394		       99 70 10 	      sta	playfield-128,y
   7106  4397				  -	      else
   7107  4397				  -	      sta	playfield,y
   7108  4397					      endif
   7109  4397		       60		      rts
   7110  4398				   pixeloff
   7111  4398		       bd a4 f3 	      lda	setbyte,x
   7112  439b		       49 ff		      eor	#$ff
   7113  439d		       39 f0 10 	      and	playfield,y
   7114  43a0					      ifconst	superchip
   7115  43a0		       99 70 10 	      sta	playfield-128,y
   7116  43a3				  -	      else
   7117  43a3				  -	      sta	playfield,y
   7118  43a3					      endif
   7119  43a3		       60		      rts
   7120  43a4
   7121  43a4				   setbyte
   7122  43a4					      ifnconst	pfcenter
   7123  43a4		       80		      .byte.b	$80
   7124  43a5		       40		      .byte.b	$40
   7125  43a6		       20		      .byte.b	$20
   7126  43a7		       10		      .byte.b	$10
   7127  43a8		       08		      .byte.b	$08
   7128  43a9		       04		      .byte.b	$04
   7129  43aa		       02		      .byte.b	$02
   7130  43ab		       01		      .byte.b	$01
   7131  43ac					      endif
   7132  43ac		       01		      .byte.b	$01
   7133  43ad		       02		      .byte.b	$02
   7134  43ae		       04		      .byte.b	$04
   7135  43af		       08		      .byte.b	$08
   7136  43b0		       10		      .byte.b	$10
   7137  43b1		       20		      .byte.b	$20
   7138  43b2		       40		      .byte.b	$40
   7139  43b3		       80		      .byte.b	$80
   7140  43b4		       80		      .byte.b	$80
   7141  43b5		       40		      .byte.b	$40
   7142  43b6		       20		      .byte.b	$20
   7143  43b7		       10		      .byte.b	$10
   7144  43b8		       08		      .byte.b	$08
   7145  43b9		       04		      .byte.b	$04
   7146  43ba		       02		      .byte.b	$02
   7147  43bb		       01		      .byte.b	$01
   7148  43bc		       01		      .byte.b	$01
   7149  43bd		       02		      .byte.b	$02
   7150  43be		       04		      .byte.b	$04
   7151  43bf		       08		      .byte.b	$08
   7152  43c0		       10		      .byte.b	$10
   7153  43c1		       20		      .byte.b	$20
   7154  43c2		       40		      .byte.b	$40
   7155  43c3		       80		      .byte.b	$80
   7156  43c4							; Provided under the CC0 license. See the included LICENSE.txt for details.
   7157  43c4
   7158  43c4				   pfscroll		;(a=0 left, 1 right, 2 up, 4 down, 6=upup, 12=downdown)
   7159  43c4		       d0 2a		      bne	notleft
   7160  43c6							;left
   7161  43c6					      ifconst	pfres
   7162  43c6		       a2 10		      ldx	#pfres*4
   7163  43c8				  -	      else
   7164  43c8				  -	      ldx	#48
   7165  43c8					      endif
   7166  43c8				   leftloop
   7167  43c8		       bd ef 10 	      lda	playfield-1,x
   7168  43cb		       4a		      lsr
   7169  43cc
   7170  43cc					      ifconst	superchip
   7171  43cc		       bd ee 10 	      lda	playfield-2,x
   7172  43cf		       2a		      rol
   7173  43d0		       9d 6e 10 	      sta	playfield-130,x
   7174  43d3		       bd ed 10 	      lda	playfield-3,x
   7175  43d6		       6a		      ror
   7176  43d7		       9d 6d 10 	      sta	playfield-131,x
   7177  43da		       bd ec 10 	      lda	playfield-4,x
   7178  43dd		       2a		      rol
   7179  43de		       9d 6c 10 	      sta	playfield-132,x
   7180  43e1		       bd ef 10 	      lda	playfield-1,x
   7181  43e4		       6a		      ror
   7182  43e5		       9d 6f 10 	      sta	playfield-129,x
   7183  43e8				  -	      else
   7184  43e8				  -	      rol	playfield-2,x
   7185  43e8				  -	      ror	playfield-3,x
   7186  43e8				  -	      rol	playfield-4,x
   7187  43e8				  -	      ror	playfield-1,x
   7188  43e8					      endif
   7189  43e8
   7190  43e8		       8a		      txa
   7191  43e9		       cb 04		      sbx	#4
   7192  43eb		       d0 db		      bne	leftloop
      0  43ed					      RETURN
      1  43ed				  -	      ifnconst	bankswitch
      2  43ed				  -	      rts
      3  43ed					      else
      4  43ed		       4c da ff 	      jmp	BS_return
      5  43f0					      endif
   7194  43f0
   7195  43f0				   notleft
   7196  43f0		       4a		      lsr
   7197  43f1		       90 2a		      bcc	notright
   7198  43f3							;right
   7199  43f3
   7200  43f3					      ifconst	pfres
   7201  43f3		       a2 10		      ldx	#pfres*4
   7202  43f5				  -	      else
   7203  43f5				  -	      ldx	#48
   7204  43f5					      endif
   7205  43f5				   rightloop
   7206  43f5		       bd ec 10 	      lda	playfield-4,x
   7207  43f8		       4a		      lsr
   7208  43f9					      ifconst	superchip
   7209  43f9		       bd ed 10 	      lda	playfield-3,x
   7210  43fc		       2a		      rol
   7211  43fd		       9d 6d 10 	      sta	playfield-131,x
   7212  4400		       bd ee 10 	      lda	playfield-2,x
   7213  4403		       6a		      ror
   7214  4404		       9d 6e 10 	      sta	playfield-130,x
   7215  4407		       bd ef 10 	      lda	playfield-1,x
   7216  440a		       2a		      rol
   7217  440b		       9d 6f 10 	      sta	playfield-129,x
   7218  440e		       bd ec 10 	      lda	playfield-4,x
   7219  4411		       6a		      ror
   7220  4412		       9d 6c 10 	      sta	playfield-132,x
   7221  4415				  -	      else
   7222  4415				  -	      rol	playfield-3,x
   7223  4415				  -	      ror	playfield-2,x
   7224  4415				  -	      rol	playfield-1,x
   7225  4415				  -	      ror	playfield-4,x
   7226  4415					      endif
   7227  4415		       8a		      txa
   7228  4416		       cb 04		      sbx	#4
   7229  4418		       d0 db		      bne	rightloop
      0  441a					      RETURN
      1  441a				  -	      ifnconst	bankswitch
      2  441a				  -	      rts
      3  441a					      else
      4  441a		       4c da ff 	      jmp	BS_return
      5  441d					      endif
   7231  441d
   7232  441d				   notright
   7233  441d		       4a		      lsr
   7234  441e		       90 5b		      bcc	notup
   7235  4420							;up
   7236  4420		       4a		      lsr
   7237  4421		       90 02		      bcc	onedecup
   7238  4423		       c6 ef		      dec	playfieldpos
   7239  4425				   onedecup
   7240  4425		       c6 ef		      dec	playfieldpos
   7241  4427		       f0 02		      beq	shiftdown
   7242  4429		       10 4d		      bpl	noshiftdown2
   7243  442b				   shiftdown
   7244  442b				  -	      ifconst	pfrowheight
   7245  442b				  -	      lda	#pfrowheight
   7246  442b					      else
   7247  442b				  -	      ifnconst	pfres
   7248  442b				  -	      lda	#8
   7249  442b					      else
   7250  442b		       a9 18		      lda	#(96/pfres)	; try to come close to the real size
   7251  442d					      endif
   7252  442d					      endif
   7253  442d
   7254  442d		       85 ef		      sta	playfieldpos
   7255  442f		       ad f3 10 	      lda	playfield+3
   7256  4432		       85 9f		      sta	temp4
   7257  4434		       ad f2 10 	      lda	playfield+2
   7258  4437		       85 9e		      sta	temp3
   7259  4439		       ad f1 10 	      lda	playfield+1
   7260  443c		       85 9d		      sta	temp2
   7261  443e		       ad f0 10 	      lda	playfield
   7262  4441		       85 9c		      sta	temp1
   7263  4443		       a2 00		      ldx	#0
   7264  4445				   up2
   7265  4445		       bd f4 10 	      lda	playfield+4,x
   7266  4448					      ifconst	superchip
   7267  4448		       9d 70 10 	      sta	playfield-128,x
   7268  444b		       bd f5 10 	      lda	playfield+5,x
   7269  444e		       9d 71 10 	      sta	playfield-127,x
   7270  4451		       bd f6 10 	      lda	playfield+6,x
   7271  4454		       9d 72 10 	      sta	playfield-126,x
   7272  4457		       bd f7 10 	      lda	playfield+7,x
   7273  445a		       9d 73 10 	      sta	playfield-125,x
   7274  445d				  -	      else
   7275  445d				  -	      sta	playfield,x
   7276  445d				  -	      lda	playfield+5,x
   7277  445d				  -	      sta	playfield+1,x
   7278  445d				  -	      lda	playfield+6,x
   7279  445d				  -	      sta	playfield+2,x
   7280  445d				  -	      lda	playfield+7,x
   7281  445d				  -	      sta	playfield+3,x
   7282  445d					      endif
   7283  445d		       8a		      txa
   7284  445e		       cb fc		      sbx	#252
   7285  4460					      ifconst	pfres
   7286  4460		       e0 0c		      cpx	#(pfres-1)*4
   7287  4462				  -	      else
   7288  4462				  -	      cpx	#44
   7289  4462					      endif
   7290  4462		       d0 e1		      bne	up2
   7291  4464
   7292  4464		       a5 9f		      lda	temp4
   7293  4466
   7294  4466					      ifconst	superchip
   7295  4466					      ifconst	pfres
   7296  4466		       8d 7f 10 	      sta	playfield+pfres*4-129
   7297  4469		       a5 9e		      lda	temp3
   7298  446b		       8d 7e 10 	      sta	playfield+pfres*4-130
   7299  446e		       a5 9d		      lda	temp2
   7300  4470		       8d 7d 10 	      sta	playfield+pfres*4-131
   7301  4473		       a5 9c		      lda	temp1
   7302  4475		       8d 7c 10 	      sta	playfield+pfres*4-132
   7303  4478				  -	      else
   7304  4478				  -	      sta	playfield+47-128
   7305  4478				  -	      lda	temp3
   7306  4478				  -	      sta	playfield+46-128
   7307  4478				  -	      lda	temp2
   7308  4478				  -	      sta	playfield+45-128
   7309  4478				  -	      lda	temp1
   7310  4478				  -	      sta	playfield+44-128
   7311  4478					      endif
   7312  4478				  -	      else
   7313  4478				  -	      ifconst	pfres
   7314  4478				  -	      sta	playfield+pfres*4-1
   7315  4478				  -	      lda	temp3
   7316  4478				  -	      sta	playfield+pfres*4-2
   7317  4478				  -	      lda	temp2
   7318  4478				  -	      sta	playfield+pfres*4-3
   7319  4478				  -	      lda	temp1
   7320  4478				  -	      sta	playfield+pfres*4-4
   7321  4478				  -	      else
   7322  4478				  -	      sta	playfield+47
   7323  4478				  -	      lda	temp3
   7324  4478				  -	      sta	playfield+46
   7325  4478				  -	      lda	temp2
   7326  4478				  -	      sta	playfield+45
   7327  4478				  -	      lda	temp1
   7328  4478				  -	      sta	playfield+44
   7329  4478				  -	      endif
   7330  4478					      endif
   7331  4478				   noshiftdown2
      0  4478					      RETURN
      1  4478				  -	      ifnconst	bankswitch
      2  4478				  -	      rts
      3  4478					      else
      4  4478		       4c da ff 	      jmp	BS_return
      5  447b					      endif
   7333  447b
   7334  447b
   7335  447b				   notup
   7336  447b							;down
   7337  447b		       4a		      lsr
   7338  447c		       b0 02		      bcs	oneincup
   7339  447e		       e6 ef		      inc	playfieldpos
   7340  4480				   oneincup
   7341  4480		       e6 ef		      inc	playfieldpos
   7342  4482		       a5 ef		      lda	playfieldpos
   7343  4484
   7344  4484				  -	      ifconst	pfrowheight
   7345  4484				  -	      cmp	#pfrowheight+1
   7346  4484					      else
   7347  4484				  -	      ifnconst	pfres
   7348  4484				  -	      cmp	#9
   7349  4484					      else
   7350  4484		       c9 19		      cmp	#(96/pfres)+1	; try to come close to the real size
   7351  4486					      endif
   7352  4486					      endif
   7353  4486
   7354  4486		       90 4b		      bcc	noshiftdown
   7355  4488		       a9 01		      lda	#1
   7356  448a		       85 ef		      sta	playfieldpos
   7357  448c
   7358  448c					      ifconst	pfres
   7359  448c		       ad ff 10 	      lda	playfield+pfres*4-1
   7360  448f		       85 9f		      sta	temp4
   7361  4491		       ad fe 10 	      lda	playfield+pfres*4-2
   7362  4494		       85 9e		      sta	temp3
   7363  4496		       ad fd 10 	      lda	playfield+pfres*4-3
   7364  4499		       85 9d		      sta	temp2
   7365  449b		       ad fc 10 	      lda	playfield+pfres*4-4
   7366  449e				  -	      else
   7367  449e				  -	      lda	playfield+47
   7368  449e				  -	      sta	temp4
   7369  449e				  -	      lda	playfield+46
   7370  449e				  -	      sta	temp3
   7371  449e				  -	      lda	playfield+45
   7372  449e				  -	      sta	temp2
   7373  449e				  -	      lda	playfield+44
   7374  449e					      endif
   7375  449e
   7376  449e		       85 9c		      sta	temp1
   7377  44a0
   7378  44a0					      ifconst	pfres
   7379  44a0		       a2 0c		      ldx	#(pfres-1)*4
   7380  44a2				  -	      else
   7381  44a2				  -	      ldx	#44
   7382  44a2					      endif
   7383  44a2				   down2
   7384  44a2		       bd ef 10 	      lda	playfield-1,x
   7385  44a5					      ifconst	superchip
   7386  44a5		       9d 73 10 	      sta	playfield-125,x
   7387  44a8		       bd ee 10 	      lda	playfield-2,x
   7388  44ab		       9d 72 10 	      sta	playfield-126,x
   7389  44ae		       bd ed 10 	      lda	playfield-3,x
   7390  44b1		       9d 71 10 	      sta	playfield-127,x
   7391  44b4		       bd ec 10 	      lda	playfield-4,x
   7392  44b7		       9d 70 10 	      sta	playfield-128,x
   7393  44ba				  -	      else
   7394  44ba				  -	      sta	playfield+3,x
   7395  44ba				  -	      lda	playfield-2,x
   7396  44ba				  -	      sta	playfield+2,x
   7397  44ba				  -	      lda	playfield-3,x
   7398  44ba				  -	      sta	playfield+1,x
   7399  44ba				  -	      lda	playfield-4,x
   7400  44ba				  -	      sta	playfield,x
   7401  44ba					      endif
   7402  44ba		       8a		      txa
   7403  44bb		       cb 04		      sbx	#4
   7404  44bd		       d0 e3		      bne	down2
   7405  44bf
   7406  44bf		       a5 9f		      lda	temp4
   7407  44c1					      ifconst	superchip
   7408  44c1		       8d 73 10 	      sta	playfield-125
   7409  44c4		       a5 9e		      lda	temp3
   7410  44c6		       8d 72 10 	      sta	playfield-126
   7411  44c9		       a5 9d		      lda	temp2
   7412  44cb		       8d 71 10 	      sta	playfield-127
   7413  44ce		       a5 9c		      lda	temp1
   7414  44d0		       8d 70 10 	      sta	playfield-128
   7415  44d3				  -	      else
   7416  44d3				  -	      sta	playfield+3
   7417  44d3				  -	      lda	temp3
   7418  44d3				  -	      sta	playfield+2
   7419  44d3				  -	      lda	temp2
   7420  44d3				  -	      sta	playfield+1
   7421  44d3				  -	      lda	temp1
   7422  44d3				  -	      sta	playfield
   7423  44d3					      endif
   7424  44d3				   noshiftdown
      0  44d3					      RETURN
      1  44d3				  -	      ifnconst	bankswitch
      2  44d3				  -	      rts
      3  44d3					      else
      4  44d3		       4c da ff 	      jmp	BS_return
      5  44d6					      endif
   7426  44d6							; Provided under the CC0 license. See the included LICENSE.txt for details.
   7427  44d6
   7428  44d6							;standard routines needed for pretty much all games
   7429  44d6							; just the random number generator is left - maybe we should remove this asm file altogether?
   7430  44d6							; repositioning code and score pointer setup moved to overscan
   7431  44d6							; read switches, joysticks now compiler generated (more efficient)
   7432  44d6
   7433  44d6				   randomize
   7434  44d6		       a5 a2		      lda	rand
   7435  44d8		       4a		      lsr
   7436  44d9					      ifconst	rand16
   7437  44d9		       26 ed		      rol	rand16
   7438  44db					      endif
   7439  44db		       90 02		      bcc	noeor
   7440  44dd		       49 b4		      eor	#$B4
   7441  44df				   noeor
   7442  44df		       85 a2		      sta	rand
   7443  44e1					      ifconst	rand16
   7444  44e1		       45 ed		      eor	rand16
   7445  44e3					      endif
      0  44e3					      RETURN
      1  44e3				  -	      ifnconst	bankswitch
      2  44e3				  -	      rts
      3  44e3					      else
      4  44e3		       4c da ff 	      jmp	BS_return
      5  44e6					      endif
   7447  44e6							; Provided under the CC0 license. See the included LICENSE.txt for details.
   7448  44e6
   7449  44e6				   drawscreen
   7450  44e6				  -	      ifconst	debugscore
   7451  44e6				  -	      ldx	#14
   7452  44e6				  -	      lda	INTIM	; display # cycles left in the score
   7453  44e6				  -
   7454  44e6				  -	      ifconst	mincycles
   7455  44e6				  -	      lda	mincycles
   7456  44e6				  -	      cmp	INTIM
   7457  44e6				  -	      lda	mincycles
   7458  44e6				  -	      bcc	nochange
   7459  44e6				  -	      lda	INTIM
   7460  44e6				  -	      sta	mincycles
   7461  44e6				  -nochange
   7462  44e6				  -	      endif
   7463  44e6				  -
   7464  44e6				  -			; cmp #$2B
   7465  44e6				  -			; bcs no_cycles_left
   7466  44e6				  -	      bmi	cycles_left
   7467  44e6				  -	      ldx	#64
   7468  44e6				  -	      eor	#$ff	;make negative
   7469  44e6				  -cycles_left
   7470  44e6				  -	      stx	scorecolor
   7471  44e6				  -	      and	#$7f	; clear sign bit
   7472  44e6				  -	      tax
   7473  44e6				  -	      lda	scorebcd,x
   7474  44e6				  -	      sta	score+2
   7475  44e6				  -	      lda	scorebcd1,x
   7476  44e6				  -	      sta	score+1
   7477  44e6				  -	      jmp	done_debugscore
   7478  44e6				  -scorebcd
   7479  44e6				  -	      .byte	$00, $64, $28, $92, $56, $20, $84, $48, $12, $76, $40
   7480  44e6				  -	      .byte	$04, $68, $32, $96, $60, $24, $88, $52, $16, $80, $44
   7481  44e6				  -	      .byte	$08, $72, $36, $00, $64, $28, $92, $56, $20, $84, $48
   7482  44e6				  -	      .byte	$12, $76, $40, $04, $68, $32, $96, $60, $24, $88
   7483  44e6				  -scorebcd1
   7484  44e6				  -	      .byte	0, 0, 1, 1, 2, 3, 3, 4, 5, 5, 6
   7485  44e6				  -	      .byte	7, 7, 8, 8, 9, $10, $10, $11, $12, $12, $13
   7486  44e6				  -	      .byte	$14, $14, $15, $16, $16, $17, $17, $18, $19, $19, $20
   7487  44e6				  -	      .byte	$21, $21, $22, $23, $23, $24, $24, $25, $26, $26
   7488  44e6				  -done_debugscore
   7489  44e6					      endif
   7490  44e6
   7491  44e6				  -	      ifconst	debugcycles
   7492  44e6				  -	      lda	INTIM	; if we go over, it mucks up the background color
   7493  44e6				  -			; cmp #$2B
   7494  44e6				  -			; BCC overscan
   7495  44e6				  -	      bmi	overscan
   7496  44e6				  -	      sta	COLUBK
   7497  44e6				  -	      bcs	doneoverscan
   7498  44e6					      endif
   7499  44e6
   7500  44e6				   overscan
   7501  44e6				  -	      ifconst	interlaced
   7502  44e6				  -	      PHP
   7503  44e6				  -	      PLA
   7504  44e6				  -	      EOR	#4	; flip interrupt bit
   7505  44e6				  -	      PHA
   7506  44e6				  -	      PLP
   7507  44e6				  -	      AND	#4	; isolate the interrupt bit
   7508  44e6				  -	      TAX		; save it for later
   7509  44e6					      endif
   7510  44e6
   7511  44e6				   overscanloop
   7512  44e6		       ad 84 02 	      lda	INTIM	;wait for sync
   7513  44e9		       30 fb		      bmi	overscanloop
   7514  44eb				   doneoverscan
   7515  44eb
   7516  44eb							;do VSYNC
   7517  44eb
   7518  44eb				  -	      ifconst	interlaced
   7519  44eb				  -	      CPX	#4
   7520  44eb				  -	      BNE	oddframevsync
   7521  44eb					      endif
   7522  44eb
   7523  44eb		       a9 02		      lda	#2
   7524  44ed		       85 02		      sta	WSYNC
   7525  44ef		       85 00		      sta	VSYNC
   7526  44f1		       85 02		      STA	WSYNC
   7527  44f3		       85 02		      STA	WSYNC
   7528  44f5		       4a		      lsr
   7529  44f6		       85 02		      STA	WSYNC
   7530  44f8		       85 00		      STA	VSYNC
   7531  44fa		       85 01		      sta	VBLANK
   7532  44fc					      ifnconst	overscan_time
   7533  44fc		       a9 a5		      lda	#37+128
   7534  44fe				  -	      else
   7535  44fe				  -	      lda	#overscan_time+128
   7536  44fe					      endif
   7537  44fe		       8d 96 02 	      sta	TIM64T
   7538  4501
   7539  4501				  -	      ifconst	interlaced
   7540  4501				  -	      jmp	postsync
   7541  4501				  -
   7542  4501				  -oddframevsync
   7543  4501				  -	      sta	WSYNC
   7544  4501				  -
   7545  4501				  -	      LDA	($80,X)	; 11 waste
   7546  4501				  -	      LDA	($80,X)	; 11 waste
   7547  4501				  -	      LDA	($80,X)	; 11 waste
   7548  4501				  -
   7549  4501				  -	      lda	#2
   7550  4501				  -	      sta	VSYNC
   7551  4501				  -	      sta	WSYNC
   7552  4501				  -	      sta	WSYNC
   7553  4501				  -	      sta	WSYNC
   7554  4501				  -
   7555  4501				  -	      LDA	($80,X)	; 11 waste
   7556  4501				  -	      LDA	($80,X)	; 11 waste
   7557  4501				  -	      LDA	($80,X)	; 11 waste
   7558  4501				  -
   7559  4501				  -	      lda	#0
   7560  4501				  -	      sta	VSYNC
   7561  4501				  -	      sta	VBLANK
   7562  4501				  -	      ifnconst	overscan_time
   7563  4501				  -	      lda	#37+128
   7564  4501				  -	      else
   7565  4501				  -	      lda	#overscan_time+128
   7566  4501				  -	      endif
   7567  4501				  -	      sta	TIM64T
   7568  4501				  -
   7569  4501				  -postsync
   7570  4501					      endif
   7571  4501
   7572  4501				  -	      ifconst	legacy
   7573  4501				  -	      if	legacy < 100
   7574  4501				  -	      ldx	#4
   7575  4501				  -adjustloop
   7576  4501				  -	      lda	player0x,x
   7577  4501				  -	      sec
   7578  4501				  -	      sbc	#14	;?
   7579  4501				  -	      sta	player0x,x
   7580  4501				  -	      dex
   7581  4501				  -	      bpl	adjustloop
   7582  4501				  -	      endif
   7583  4501					      endif
   7584  4501				  -	      if	((<*)>$e9)&&((<*)<$fa)
   7585  4501				  -	      repeat	($fa-(<*))
   7586  4501				  -	      nop
   7587  4501				  -	      repend
   7588  4501					      endif
   7589  4501		       85 02		      sta	WSYNC
   7590  4503		       a2 04		      ldx	#4
      0  4505					      SLEEP	3
      1  4505				   .CYCLES    SET	3
      2  4505
      3  4505				  -	      IF	.CYCLES < 2
      4  4505				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  4505				  -	      ERR
      6  4505					      ENDIF
      7  4505
      8  4505					      IF	.CYCLES & 1
      9  4505					      IFNCONST	NO_ILLEGAL_OPCODES
     10  4505		       04 00		      nop	0
     11  4507				  -	      ELSE
     12  4507				  -	      bit	VSYNC
     13  4507					      ENDIF
     14  4507				   .CYCLES    SET	.CYCLES - 3
     15  4507					      ENDIF
     16  4507
     17  4507				  -	      REPEAT	.CYCLES / 2
     18  4507				  -	      nop
     19  4507					      REPEND
   7592  4507				   HorPosLoop		; 5
   7593  4507		       b5 80		      lda	player0x,X	;+4 9
   7594  4509		       38		      sec		;+2 11
   7595  450a				   DivideLoop
   7596  450a		       e9 0f		      sbc	#15
   7597  450c		       b0 fc		      bcs	DivideLoop	;+4 15
   7598  450e		       95 9c		      sta	temp1,X	;+4 19
   7599  4510		       95 10		      sta	RESP0,X	;+4 23
   7600  4512		       85 02		      sta	WSYNC
   7601  4514		       ca		      dex
   7602  4515		       10 f0		      bpl	HorPosLoop	;+5 5
   7603  4517							; 4
   7604  4517
   7605  4517		       a2 04		      ldx	#4
   7606  4519		       b4 9c		      ldy	temp1,X
   7607  451b		       b9 77 f4 	      lda	repostable-256,Y
   7608  451e		       95 20		      sta	HMP0,X	;+14 18
   7609  4520
   7610  4520		       ca		      dex
   7611  4521		       b4 9c		      ldy	temp1,X
   7612  4523		       b9 77 f4 	      lda	repostable-256,Y
   7613  4526		       95 20		      sta	HMP0,X	;+14 32
   7614  4528
   7615  4528		       ca		      dex
   7616  4529		       b4 9c		      ldy	temp1,X
   7617  452b		       b9 77 f4 	      lda	repostable-256,Y
   7618  452e		       95 20		      sta	HMP0,X	;+14 46
   7619  4530
   7620  4530		       ca		      dex
   7621  4531		       b4 9c		      ldy	temp1,X
   7622  4533		       b9 77 f4 	      lda	repostable-256,Y
   7623  4536		       95 20		      sta	HMP0,X	;+14 60
   7624  4538
   7625  4538		       ca		      dex
   7626  4539		       b4 9c		      ldy	temp1,X
   7627  453b		       b9 77 f4 	      lda	repostable-256,Y
   7628  453e		       95 20		      sta	HMP0,X	;+14 74
   7629  4540
   7630  4540		       85 02		      sta	WSYNC
   7631  4542
   7632  4542		       85 2a		      sta	HMOVE	;+3 3
   7633  4544
   7634  4544
   7635  4544				  -	      ifconst	legacy
   7636  4544				  -	      if	legacy < 100
   7637  4544				  -	      ldx	#4
   7638  4544				  -adjustloop2
   7639  4544				  -	      lda	player0x,x
   7640  4544				  -	      clc
   7641  4544				  -	      adc	#14	;?
   7642  4544				  -	      sta	player0x,x
   7643  4544				  -	      dex
   7644  4544				  -	      bpl	adjustloop2
   7645  4544				  -	      endif
   7646  4544					      endif
   7647  4544
   7648  4544
   7649  4544
   7650  4544
   7651  4544							;set score pointers
   7652  4544		       a7 95		      lax	score+2
   7653  4546		       20 77 f5 	      jsr	scorepointerset
   7654  4549		       84 9b		      sty	scorepointers+5
   7655  454b		       86 98		      stx	scorepointers+2
   7656  454d		       a7 94		      lax	score+1
   7657  454f		       20 77 f5 	      jsr	scorepointerset
   7658  4552		       84 9a		      sty	scorepointers+4
   7659  4554		       86 97		      stx	scorepointers+1
   7660  4556		       a7 93		      lax	score
   7661  4558		       20 77 f5 	      jsr	scorepointerset
   7662  455b		       84 99		      sty	scorepointers+3
   7663  455d		       86 96		      stx	scorepointers
   7664  455f
   7665  455f				   vblk
   7666  455f							; run possible vblank bB code
   7667  455f				  -	      ifconst	vblank_bB_code
   7668  455f				  -	      jsr	vblank_bB_code
   7669  455f					      endif
   7670  455f				   vblk2
   7671  455f		       ad 84 02 	      LDA	INTIM
   7672  4562		       30 fb		      bmi	vblk2
   7673  4564		       4c 00 f1 	      jmp	kernel
   7674  4567
   7675  4567
   7676  4567		       80 70 60 50*	      .byte.b	$80,$70,$60,$50,$40,$30,$20,$10,$00
   7677  4570		       f0 e0 d0 c0*	      .byte.b	$F0,$E0,$D0,$C0,$B0,$A0,$90
   7678  4577				   repostable
   7679  4577
   7680  4577				   scorepointerset
   7681  4577		       29 0f		      and	#$0F
   7682  4579		       0a		      asl
   7683  457a		       0a		      asl
   7684  457b		       0a		      asl
   7685  457c		       69 71		      adc	#<scoretable
   7686  457e		       a8		      tay
   7687  457f		       8a		      txa
   7688  4580							; and #$F0
   7689  4580							; lsr
   7690  4580		       4b f0		      asr	#$F0
   7691  4582		       69 71		      adc	#<scoretable
   7692  4584		       aa		      tax
   7693  4585		       60		      rts
   7694  4586							;bB.asm
   7695  4586							; bB.asm file is split here
   7696  4586				   .
   7697  4586							; 
   7698  4586
   7699  4586				   .L0632		;  asm
   7700  4586
------- FILE text12/text12a.asm LEVEL 2 PASS 3
      0  4586					      include	"text12/text12a.asm"
      1  4586				  -	      ifconst	SpriteGfxIndex
      2  4586				  -TextDataPtr =	SpriteGfxIndex
      3  4586					      else
      4  4586		       00 f6	   TextDataPtr =	stack1
      5  4586					      endif
      6  4586		       00 f5	   TextColor  =	statusbarlength
      7  4586		       00 01	   noscore    =	1
      8  4586					      ifconst	fontstyle
      9  4586				  -	      ifconst	SQUISH
     10  4586				  -	      if	fontstyle == SQUISH
     11  4586				  -scorecount =	4
     12  4586				  -	      endif
     13  4586					      endif
     14  4586					      endif
     15  4586
     16  4586				  -	      ifnconst	scorecount
     17  4586				  -scorecount =	7
     18  4586					      endif
     19  4586
     20  4586				  -	      ifnconst	textbkcolor
     21  4586				  -textbkcolor =	0
     22  4586					      endif
     23  4586
     24  4586
     25  4586
     26  4586				   minikernel
     27  4586
     28  4586		       85 02		      sta	WSYNC	; 3	 (0)
     29  4588					      ifconst	scorebkcolor
     30  4588					      ifnconst	noscoretxt
     31  4588		       a9 08		      lda	#scorebkcolor
     32  458a		       85 09		      sta	COLUBK
     33  458c					      endif
     34  458c					      endif
     35  458c		       a2 00		      ldx	#0	; 2	 (2)
     36  458e		       86 1b		      stx	GRP0	; 3	 (5)
     37  4590		       86 1c		      stx	GRP1	; 3	 (8)
     38  4592		       a0 d0		      ldy	#$D0	; 2	 (10)
     39  4594		       84 20		      sty	HMP0	; 3	 (13)
     40  4596		       a5 97		      lda	scorepointers+1
     41  4598		       85 9c		      sta	temp1
     42  459a		       a5 99		      lda	scorepointers+3
     43  459c		       85 9e		      sta	temp3
     44  459e		       a5 9b		      lda	scorepointers+5
     45  45a0		       85 a0		      sta	temp5
     46  45a2		       ba		      tsx
     47  45a3		       86 ee		      stx	temp7
     48  45a5		       a0 01		      ldy	#1
     49  45a7		       84 25		      sty	VDELP0
     50  45a9		       84 26		      sty	VDELP1
     51  45ab		       a5 a3		      lda	scorecolor
     52  45ad
     53  45ad		       85 02		      sta	WSYNC	; 3	 (0)
     54  45af					      ifnconst	noscoretxt
      0  45af					      sleep	3	; 3	 (3)
      1  45af				   .CYCLES    SET	3
      2  45af
      3  45af				  -	      IF	.CYCLES < 2
      4  45af				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  45af				  -	      ERR
      6  45af					      ENDIF
      7  45af
      8  45af					      IF	.CYCLES & 1
      9  45af					      IFNCONST	NO_ILLEGAL_OPCODES
     10  45af		       04 00		      nop	0
     11  45b1				  -	      ELSE
     12  45b1				  -	      bit	VSYNC
     13  45b1					      ENDIF
     14  45b1				   .CYCLES    SET	.CYCLES - 3
     15  45b1					      ENDIF
     16  45b1
     17  45b1				  -	      REPEAT	.CYCLES / 2
     18  45b1				  -	      nop
     19  45b1					      REPEND
     56  45b1					      endif
     57  45b1		       85 06		      sta	COLUP0	; 3	 (6)
     58  45b3		       85 07		      sta	COLUP1	; 3	 (9)
     59  45b5				  -	      ifconst	scorefade
     60  45b5				  -	      STA	stack2	; 3	 (12)
     61  45b5				  -	      sleep	3	; 3	 (15)
     62  45b5					      else
     63  45b5					      ifconst	pfscore
     64  45b5		       a5 f4		      lda	pfscorecolor	; 3	 (12)
     65  45b7		       85 08		      sta	COLUPF	; 3	 (15)
     66  45b9				  -	      else
     67  45b9				  -	      sleep	6
     68  45b9					      endif
     69  45b9					      endif
     70  45b9		       a9 03		      lda	#3	; 2	 (17)
     71  45bb		       85 04		      sta	NUSIZ0	; 3	 (20)
     72  45bd		       85 05		      sta	NUSIZ1	; 3	 (23*)
     73  45bf
     74  45bf		       a9 ff		      lda	#>scoretable	; 2	 (25)
     75  45c1		       85 97		      sta	scorepointers+1	; 3	 (28)
     76  45c3		       85 99		      sta	scorepointers+3	; 3	 (31)
     77  45c5		       85 9b		      sta	scorepointers+5	; 3	 (34)
     78  45c7		       85 9d		      sta	temp2	; 3	 (37)
     79  45c9		       85 9f		      sta	temp4	; 3	 (40)
     80  45cb		       85 10		      sta	RESP0	; 3	 (43)
     81  45cd		       85 11		      sta	RESP1	; 3	 (46)
     82  45cf		       85 a1		      sta	temp6	; 3	 (49)
     83  45d1		       a0 e0		      ldy	#$E0	; 2	 (51)
     84  45d3		       84 21		      sty	HMP1	; 3	 (54)
     85  45d5		       a0 07		      ldy	#scorecount	; 2	 (56)
     86  45d7		       b1 96		      lda	(scorepointers),y	; 5	 (61)
     87  45d9		       85 1b		      sta	GRP0	; 3	 (64)
     88  45db					      ifconst	pfscore
     89  45db		       a5 f2		      lda	pfscore1	; 3	 (67)
     90  45dd		       85 0e		      sta	PF1	; 3	 (70)
     91  45df				  -	      else
     92  45df				  -	      sleep	6	; 6	 (70)
     93  45df					      endif
     94  45df		       85 2a		      sta	HMOVE	; 3	 (73)
     95  45e1				   posthmove
     96  45e1					      ifnconst	noscoretxt
     97  45e1		       4c 09 f6 	      jmp	begintextscore	; 3	(76/0)
     98  45e4
     99  45e4
    100  45e4					      if	>. != >[.+score_loop_height]
    101  4600		       00 00 00 00*	      align	256
    102  4600					      endif
    103  4600
    104  4600				   textscoreloop
    105  4600		       b1 96		      lda	(scorepointers),y	; 5	 (66)
    106  4602		       85 1b		      sta	GRP0	; 3	 (69)
    107  4604					      ifconst	pfscore
    108  4604		       ad f2 00 	      lda.w	pfscore1	; 4	 (73)
    109  4607		       85 0e		      sta	PF1	; 3	 (76/0)
    110  4609				  -	      else
    111  4609				  -	      ifconst	scorefade
    112  4609				  -	      sleep	2	; 2	 (71)
    113  4609				  -	      dec	stack2	; 5	 (76/0)
    114  4609				  -	      else
    115  4609				  -	      sleep	7	; 7	 (76/0)
    116  4609				  -	      endif
    117  4609					      endif
    118  4609							; cycle 0
    119  4609				   begintextscore
    120  4609		       b1 9e		      lda	(scorepointers+$8),y	; 5	 (5)
    121  460b		       85 1c		      sta	GRP1	; 3	 (8)
    122  460d		       b1 9c		      lda	(scorepointers+$6),y	; 5	 (13)
    123  460f		       85 1b		      sta	GRP0	; 3	 (16)
    124  4611		       b3 98		      lax	(scorepointers+$2),y	; 5	 (21)
    125  4613		       9a		      txs		; 2	 (23*)
    126  4614		       b3 9a		      lax	(scorepointers+$4),y	; 5	 (28)
    127  4616				  -	      ifconst	scorefade
    128  4616				  -	      lda	stack2	; 3	 (31)
    129  4616					      else
      0  4616					      sleep	3	; 3	 (31)
      1  4616				   .CYCLES    SET	3
      2  4616
      3  4616				  -	      IF	.CYCLES < 2
      4  4616				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  4616				  -	      ERR
      6  4616					      ENDIF
      7  4616
      8  4616					      IF	.CYCLES & 1
      9  4616					      IFNCONST	NO_ILLEGAL_OPCODES
     10  4616		       04 00		      nop	0
     11  4618				  -	      ELSE
     12  4618				  -	      bit	VSYNC
     13  4618					      ENDIF
     14  4618				   .CYCLES    SET	.CYCLES - 3
     15  4618					      ENDIF
     16  4618
     17  4618				  -	      REPEAT	.CYCLES / 2
     18  4618				  -	      nop
     19  4618					      REPEND
    131  4618					      endif
    132  4618
    133  4618					      ifconst	pfscore
    134  4618		       a5 f3		      lda	pfscore2	; 3	 (34)
    135  461a		       85 0e		      sta	PF1	; 3	 (37)
    136  461c				  -	      else
    137  461c				  -	      ifconst	scorefade
    138  461c				  -	      sta	COLUP0	; 3	 (34)
    139  461c				  -	      sta	COLUP1	; 3	 (37)
    140  461c				  -	      else
    141  461c				  -	      sleep	6	; 6	 (37)
    142  461c				  -	      endif
    143  461c					      endif
    144  461c
    145  461c		       b1 a0		      lda	(scorepointers+$A),y	; 5	 (42)
    146  461e		       86 1c		      stx	GRP1	; 3	 (45)
    147  4620		       ba		      tsx		; 2	 (47)
    148  4621		       86 1b		      stx	GRP0	; 3	 (50)
    149  4623		       85 1c		      sta	GRP1	; 3	 (53)
    150  4625		       84 1b		      sty	GRP0	; 3	 (56)
    151  4627		       88		      dey		; 2	 (58)
    152  4628		       10 d6		      bpl	textscoreloop	; 3	 (61)
    153  462a					      endif
    154  462a
    155  462a		       00 2a	   score_loop_height =	* - textscoreloop
    156  462a
    157  462a		       a6 ee		      ldx	temp7	; 63
    158  462c		       9a		      txs		; 65
    159  462d		       a0 00		      ldy	#0	; 2	 (67)
    160  462f		       84 0e		      sty	PF1	; 3	 (70)
    161  4631		       84 1b		      sty	GRP0	; 3	 (73)
    162  4633		       84 1c		      sty	GRP1	; 3	 (76/0)
    163  4635		       84 1b		      sty	GRP0	; 3	 (3)
    164  4637		       a9 08		      lda	#textbkcolor
    165  4639		       85 09		      sta	COLUBK	; 3	 (6)
    166  463b
    167  463b				  -	      ifconst	extendedtxt
    168  463b				  -	      sty	stack2	; 3	 (9)
    169  463b				  -	      sty	temp7	; 3	 (12)
    170  463b				  -	      lax	TextIndex	; 3	 (15)
    171  463b				  -	      asl		; 2	 (17)
    172  463b				  -	      rol	stack2	; 5	 (22)
    173  463b				  -	      asl		; 2	 (24*)
    174  463b				  -	      rol	stack2	; 5	 (29)
    175  463b				  -	      asl		; 2	 (31)
    176  463b				  -	      rol	stack2	; 5	 (36)
    177  463b				  -	      sta	stack1	; 3	 (39)
    178  463b				  -	      txa		; 2	 (41)
    179  463b				  -	      asl		; 2	 (43)
    180  463b				  -	      rol	temp7	; 5	 (48)
    181  463b				  -	      asl		; 2	 (50)
    182  463b				  -	      rol	temp7	; 5	 (55)
    183  463b				  -	      clc		; 2	 (57)
    184  463b				  -	      adc	stack1	; 3	 (60)
    185  463b				  -	      sta	temp1	; 3	 (63)
    186  463b				  -	      lda	stack2	; 3	 (66)
    187  463b				  -	      adc	temp7	; 3	 (69) ; use existing carry from last operation
    188  463b					      endif
    189  463b
    190  463b				  -	      ifconst	extendedtxt
    191  463b				  -	      adc	#>text_strings	; carry already clear
    192  463b					      else
    193  463b		       a9 fb		      lda	#>text_strings
    194  463d					      endif
    195  463d		       85 f7		      sta	TextDataPtr+1
    196  463f		       a9 02		      lda	#<text_strings
    197  4641		       85 f6		      sta	TextDataPtr
    198  4643
    199  4643				  -	      ifconst	textbank
    200  4643				  -	      sta	temp7
    201  4643				  -	      lda	#>(textkernel-1)
    202  4643				  -	      pha
    203  4643				  -	      lda	#<(textkernel-1)
    204  4643				  -	      pha
    205  4643				  -	      lda	temp7
    206  4643				  -	      pha		; *** save A
    207  4643				  -	      txa
    208  4643				  -	      pha		; *** save X
    209  4643				  -	      ldx	#textbank
    210  4643				  -	      jmp	BS_jsr
    211  4643					      else
    212  4643		       4c 47 f6 	      jmp	textkernel
    213  4646					      endif
    214  4646
    215  4646				   posttextkernel
    216  4646
    217  4646		       60		      rts
------- FILE d:\Firmaplus\Firmaplus_intern\Atari\PlusROM\Projekte-batariBasic\CaveApocalypse\C.A.V.E. Apocalypse.bas.asm
   7702  4647
------- FILE text12/text12b.asm LEVEL 2 PASS 3
      0  4647					      include	"text12/text12b.asm"
      1  4647					      ifconst	bs_mask
      2  4647				  -	      ifconst	FASTFETCH	; using DPC+
      3  4647				  -KERNELBANK =	1
      4  4647					      else
      5  4647		       00 04	   KERNELBANK =	(bs_mask + 1)
      6  4647					      endif
      7  4647					      endif
      8  4647
      9  4647
     10  4647				   textkernel
     11  4647		       a5 f5		      lda	TextColor
     12  4649		       85 06		      sta	COLUP0
     13  464b		       85 07		      sta	COLUP1
     14  464d		       a9 0b		      lda	#11
     15  464f		       aa		      tax
     16  4650		       18		      clc
     17  4651				  -	      ifconst	extendedtxt
     18  4651				  -	      adc	temp1
     19  4651					      else
     20  4651		       65 b0		      adc	TextIndex
     21  4653					      endif
     22  4653		       a8		      tay
     23  4654				   TextPointersLoop
     24  4654		       b1 f6		      lda	(TextDataPtr),y
     25  4656		       95 96		      sta	scorepointers,x
     26  4658		       88		      dey
     27  4659		       ca		      dex
     28  465a		       10 f8		      bpl	TextPointersLoop
     29  465c
     30  465c		       a6 96		      ldx	scorepointers+0
     31  465e		       bd 00 f9 	      lda	left_text,x
     32  4661		       a6 97		      ldx	scorepointers+1
     33  4663		       1d 00 fa 	      ora	right_text,x
     34  4666		       a0 00		      ldy	#0
     35  4668
     36  4668				   firstbreak
     37  4668							; Text line 1 / 5
     38  4668
     39  4668							;line 1
     40  4668		       85 02		      sta	WSYNC	; 3	 (0)
     41  466a		       a0 08		      ldy	#textbkcolor	; 2	 (2)
     42  466c		       84 06		      sty	COLUP0	; 3	 (5)
     43  466e		       84 07		      sty	COLUP1	; 3	 (8)
     44  4670		       85 1b		      sta	GRP0	; 3	 (11)
     45  4672
     46  4672		       a6 98		      ldx	scorepointers+2	; 3	 (14)
     47  4674		       bd 00 f9 	      lda	left_text,x	; 4	 (18)
     48  4677		       a6 99		      ldx	scorepointers+3	; 3	 (21)
     49  4679		       1d 00 fa 	      ora	right_text,x	; 4	 (25*)
     50  467c		       85 1c		      sta	GRP1	; 3	 (28)
     51  467e
     52  467e		       a6 9a		      ldx	scorepointers+4	; 3	 (31)
     53  4680		       bd 00 f9 	      lda	left_text,x	; 4	 (35)
     54  4683		       a6 9b		      ldx	scorepointers+5	; 3	 (38)
     55  4685		       1d 00 fa 	      ora	right_text,x	; 4	 (42)
     56  4688		       85 1b		      sta	GRP0	; 3	 (45)
     57  468a
     58  468a		       a6 9c		      ldx	scorepointers+6	; 3	 (48) 3 in A
     59  468c		       bd 00 f9 	      lda	left_text,x	; 4	 (52)
     60  468f		       a6 9d		      ldx	scorepointers+7	; 3	 (55)
     61  4691		       1d 00 fa 	      ora	right_text,x	; 4	 (59)
     62  4694
     63  4694		       a4 f5		      ldy	TextColor	; 3	 (62)
     64  4696		       84 07		      sty	COLUP1	; 3	 (65)
     65  4698
     66  4698							;line 2
     67  4698		       85 02		      sta	WSYNC	; 3	 (0)
     68  469a		       84 06		      sty	COLUP0	; 3	 (3)
     69  469c		       a8		      tay		; 2	 (5) 3 in Y
     70  469d
     71  469d		       a6 9e		      ldx	scorepointers+8	; 3	 (8) 4
     72  469f		       bd 00 f9 	      lda	left_text,x	; 4	 (12)
     73  46a2		       a6 9f		      ldx	scorepointers+9	; 3	 (15)
     74  46a4		       1d 00 fa 	      ora	right_text,x	; 4	 (19)
     75  46a7		       85 f6		      sta	stack1	; 3	 (22)
     76  46a9
     77  46a9		       a6 a0		      ldx	scorepointers+10	; 3	 (25*) 5 in A
     78  46ab		       bd 00 f9 	      lda	left_text,x	; 4	 (29)
     79  46ae		       a6 a1		      ldx	scorepointers+11	; 3	 (32)
     80  46b0		       1d 00 fa 	      ora	right_text,x	; 4	 (36)
     81  46b3
     82  46b3		       a6 f6		      ldx	stack1	; 3	 (39) 4 in X
     83  46b5					      ifnconst	noscoretxt
      0  46b5					      sleep	5	; 7	 (46)
      1  46b5				   .CYCLES    SET	5
      2  46b5
      3  46b5				  -	      IF	.CYCLES < 2
      4  46b5				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  46b5				  -	      ERR
      6  46b5					      ENDIF
      7  46b5
      8  46b5					      IF	.CYCLES & 1
      9  46b5					      IFNCONST	NO_ILLEGAL_OPCODES
     10  46b5		       04 00		      nop	0
     11  46b7				  -	      ELSE
     12  46b7				  -	      bit	VSYNC
     13  46b7					      ENDIF
     14  46b7				   .CYCLES    SET	.CYCLES - 3
     15  46b7					      ENDIF
     16  46b7
     17  46b7					      REPEAT	.CYCLES / 2
     18  46b7		       ea		      nop
     19  46b8					      REPEND
     85  46b8				  -	      else
     86  46b8				  -	      sleep	2
     87  46b8					      endif
     88  46b8		       84 1c		      sty	GRP1	; 3	 (49) 3 -> [GRP1] ; 2 -> GRP0
     89  46ba		       86 1b		      stx	GRP0	; 3	 (52) 4 -> [GRP0] ; 3 -> GRP1
     90  46bc		       85 1c		      sta	GRP1	; 3	 (55) 5 -> [GRP1] ; 4 -> GRP0
     91  46be		       85 1b		      sta	GRP0	; 3	 (58) 5 -> GRP1
     92  46c0
     93  46c0		       a0 02		      ldy	#2	; 2	 (60)
     94  46c2		       a6 96		      ldx	scorepointers+0	; 3	 (63)
     95  46c4		       bd 01 f9 	      lda	left_text+1,x	; 4	 (67)
     96  46c7		       a6 97		      ldx	scorepointers+1	; 3	 (70)
     97  46c9		       1d 01 fa 	      ora	right_text+1,x	; 4	 (74)
     98  46cc							;    sleep 4
     99  46cc
    100  46cc							; Text line 2 / 5
    101  46cc				   endl1
    102  46cc							;line 1
    103  46cc		       85 02		      sta	WSYNC	; 3	 (0)
    104  46ce		       a0 08		      ldy	#textbkcolor	; 2	 (2)
    105  46d0		       84 06		      sty	COLUP0	; 3	 (5)
    106  46d2		       84 07		      sty	COLUP1	; 3	 (8)
    107  46d4		       85 1b		      sta	GRP0	; 3	 (11)
    108  46d6
    109  46d6		       a6 98		      ldx	scorepointers+2	; 3	 (9)
    110  46d8		       bd 01 f9 	      lda	left_text+1,x	; 4	 (13)
    111  46db		       a6 99		      ldx	scorepointers+3	; 3	 (16)
    112  46dd		       1d 01 fa 	      ora	right_text+1,x	; 4	 (20)
    113  46e0		       85 1c		      sta	GRP1	; 3	 (23*)
    114  46e2
    115  46e2		       a6 9a		      ldx	scorepointers+4	; 3	 (26)
    116  46e4		       bd 01 f9 	      lda	left_text+1,x	; 4	 (30)
    117  46e7		       a6 9b		      ldx	scorepointers+5	; 3	 (33)
    118  46e9		       1d 01 fa 	      ora	right_text+1,x	; 4	 (37)
    119  46ec		       85 1b		      sta	GRP0	; 3	 (40)
    120  46ee
    121  46ee		       a6 9c		      ldx	scorepointers+6	; 3	 (43) 3 in A
    122  46f0		       bd 01 f9 	      lda	left_text+1,x	; 4	 (47)
    123  46f3		       a6 9d		      ldx	scorepointers+7	; 3	 (50)
    124  46f5		       1d 01 fa 	      ora	right_text+1,x	; 4	 (54)
    125  46f8
    126  46f8		       a4 f5		      ldy	TextColor	; 2	 (56)
    127  46fa		       84 07		      sty	COLUP1	; 3	 (59)
    128  46fc
    129  46fc							;line 2
    130  46fc		       85 02		      sta	WSYNC	; 3	 (0)
    131  46fe		       84 06		      sty	COLUP0	; 3	 (3)
    132  4700		       a8		      tay		; 2	 (5) 3 in Y
    133  4701
    134  4701		       a6 9e		      ldx	scorepointers+8	; 3	 (8) 4
    135  4703		       bd 01 f9 	      lda	left_text+1,x	; 4	 (12)
    136  4706		       a6 9f		      ldx	scorepointers+9	; 3	 (15)
    137  4708		       1d 01 fa 	      ora	right_text+1,x	; 4	 (19)
    138  470b		       85 f6		      sta	stack1	; 3	 (22)
    139  470d
    140  470d		       a6 a0		      ldx	scorepointers+10	; 3	 (25*) 5 in A
    141  470f		       bd 01 f9 	      lda	left_text+1,x	; 4	 (29)
    142  4712		       a6 a1		      ldx	scorepointers+11	; 3	 (32)
    143  4714		       1d 01 fa 	      ora	right_text+1,x	; 4	 (36)
    144  4717
    145  4717		       a6 f6		      ldx	stack1	; 3	 (39) 4 in X
    146  4719					      ifnconst	noscoretxt
      0  4719					      sleep	5	; 7	 (46)
      1  4719				   .CYCLES    SET	5
      2  4719
      3  4719				  -	      IF	.CYCLES < 2
      4  4719				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  4719				  -	      ERR
      6  4719					      ENDIF
      7  4719
      8  4719					      IF	.CYCLES & 1
      9  4719					      IFNCONST	NO_ILLEGAL_OPCODES
     10  4719		       04 00		      nop	0
     11  471b				  -	      ELSE
     12  471b				  -	      bit	VSYNC
     13  471b					      ENDIF
     14  471b				   .CYCLES    SET	.CYCLES - 3
     15  471b					      ENDIF
     16  471b
     17  471b					      REPEAT	.CYCLES / 2
     18  471b		       ea		      nop
     19  471c					      REPEND
    148  471c				  -	      else
    149  471c				  -	      sleep	2
    150  471c					      endif
    151  471c		       84 1c		      sty	GRP1	; 3	 (49) 3 -> [GRP1] ; 2 -> GRP0
    152  471e		       86 1b		      stx	GRP0	; 3	 (52) 4 -> [GRP0] ; 3 -> GRP1
    153  4720		       85 1c		      sta	GRP1	; 3	 (55) 5 -> [GRP1] ; 4 -> GRP0
    154  4722		       85 1b		      sta	GRP0	; 3	 (58) 5 -> GRP1
    155  4724
    156  4724		       a0 02		      ldy	#2	; 2	 (56)
    157  4726		       a6 96		      ldx	scorepointers+0	; 3	 (59)
    158  4728		       bd 02 f9 	      lda	left_text+2,x	; 4	 (63)
    159  472b		       a6 97		      ldx	scorepointers+1	; 3	 (66)
    160  472d		       1d 02 fa 	      ora	right_text+2,x	; 4	 (70)
    161  4730							;    sleep 4
    162  4730
    163  4730							; Text line 3 / 5
    164  4730				   endl2
    165  4730							;line 1
    166  4730		       85 02		      sta	WSYNC	; 3	 (0)
    167  4732		       a0 08		      ldy	#textbkcolor	; 2	 (2)
    168  4734		       84 06		      sty	COLUP0	; 3	 (5)
    169  4736		       84 07		      sty	COLUP1	; 3	 (8)
    170  4738		       85 1b		      sta	GRP0	; 3	 (11)
    171  473a
    172  473a		       a6 98		      ldx	scorepointers+2	; 3	 (9)
    173  473c		       bd 02 f9 	      lda	left_text+2,x	; 4	 (13)
    174  473f		       a6 99		      ldx	scorepointers+3	; 3	 (16)
    175  4741		       1d 02 fa 	      ora	right_text+2,x	; 4	 (20)
    176  4744		       85 1c		      sta	GRP1	; 3	 (23*)
    177  4746
    178  4746		       a6 9a		      ldx	scorepointers+4	; 3	 (26)
    179  4748		       bd 02 f9 	      lda	left_text+2,x	; 4	 (30)
    180  474b		       a6 9b		      ldx	scorepointers+5	; 3	 (33)
    181  474d		       1d 02 fa 	      ora	right_text+2,x	; 4	 (37)
    182  4750		       85 1b		      sta	GRP0	; 3	 (40)
    183  4752
    184  4752		       a6 9c		      ldx	scorepointers+6	; 3	 (43) 3 in A
    185  4754		       bd 02 f9 	      lda	left_text+2,x	; 4	 (47)
    186  4757		       a6 9d		      ldx	scorepointers+7	; 3	 (50)
    187  4759		       1d 02 fa 	      ora	right_text+2,x	; 4	 (54)
    188  475c
    189  475c		       a4 f5		      ldy	TextColor	; 2	 (56)
    190  475e		       84 07		      sty	COLUP1	; 3	 (59)
    191  4760
    192  4760							;line 2
    193  4760		       85 02		      sta	WSYNC	; 3	 (0)
    194  4762		       84 06		      sty	COLUP0	; 3	 (3)
    195  4764		       a8		      tay		; 2	 (5) 3 in Y
    196  4765
    197  4765		       a6 9e		      ldx	scorepointers+8	; 3	 (8) 4
    198  4767		       bd 02 f9 	      lda	left_text+2,x	; 4	 (12)
    199  476a		       a6 9f		      ldx	scorepointers+9	; 3	 (15)
    200  476c		       1d 02 fa 	      ora	right_text+2,x	; 4	 (19)
    201  476f		       85 f6		      sta	stack1	; 3	 (22)
    202  4771
    203  4771		       a6 a0		      ldx	scorepointers+10	; 3	 (25*) 5 in A
    204  4773		       bd 02 f9 	      lda	left_text+2,x	; 4	 (29)
    205  4776		       a6 a1		      ldx	scorepointers+11	; 3	 (32)
    206  4778		       1d 02 fa 	      ora	right_text+2,x	; 4	 (36)
    207  477b
    208  477b		       a6 f6		      ldx	stack1	; 3	 (39) 4 in X
    209  477d					      ifnconst	noscoretxt
      0  477d					      sleep	5	; 7	 (46)
      1  477d				   .CYCLES    SET	5
      2  477d
      3  477d				  -	      IF	.CYCLES < 2
      4  477d				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  477d				  -	      ERR
      6  477d					      ENDIF
      7  477d
      8  477d					      IF	.CYCLES & 1
      9  477d					      IFNCONST	NO_ILLEGAL_OPCODES
     10  477d		       04 00		      nop	0
     11  477f				  -	      ELSE
     12  477f				  -	      bit	VSYNC
     13  477f					      ENDIF
     14  477f				   .CYCLES    SET	.CYCLES - 3
     15  477f					      ENDIF
     16  477f
     17  477f					      REPEAT	.CYCLES / 2
     18  477f		       ea		      nop
     19  4780					      REPEND
    211  4780				  -	      else
    212  4780				  -	      sleep	2
    213  4780					      endif
    214  4780		       84 1c		      sty	GRP1	; 3	 (45) 3 -> [GRP1] ; 2 -> GRP0
    215  4782		       86 1b		      stx	GRP0	; 3	 (48) 4 -> [GRP0] ; 3 -> GRP1
    216  4784		       85 1c		      sta	GRP1	; 3	 (51) 5 -> [GRP1] ; 4 -> GRP0
    217  4786		       85 1b		      sta	GRP0	; 3	 (54) 5 -> GRP1
    218  4788
    219  4788		       a0 02		      ldy	#2	; 2	 (56)
    220  478a		       a6 96		      ldx	scorepointers+0	; 3	 (59)
    221  478c		       bd 03 f9 	      lda	left_text+3,x	; 4	 (63)
    222  478f		       a6 97		      ldx	scorepointers+1	; 3	 (66)
    223  4791		       1d 03 fa 	      ora	right_text+3,x	; 4	 (70)
    224  4794							;    sleep 2
    225  4794
    226  4794							; Text line 4 / 5
    227  4794
    228  4794							;line 1
    229  4794		       85 02		      sta	WSYNC	; 3	 (0)
    230  4796		       a0 08		      ldy	#textbkcolor	; 2	 (2)
    231  4798		       84 06		      sty	COLUP0	; 3	 (5)
    232  479a		       84 07		      sty	COLUP1	; 3	 (8)
    233  479c		       85 1b		      sta	GRP0	; 3	 (11)
    234  479e
    235  479e		       a6 98		      ldx	scorepointers+2	; 3	 (9)
    236  47a0		       bd 03 f9 	      lda	left_text+3,x	; 4	 (13)
    237  47a3		       a6 99		      ldx	scorepointers+3	; 3	 (16)
    238  47a5		       1d 03 fa 	      ora	right_text+3,x	; 4	 (20)
    239  47a8		       85 1c		      sta	GRP1	; 3	 (23*)
    240  47aa
    241  47aa		       a6 9a		      ldx	scorepointers+4	; 3	 (26)
    242  47ac		       bd 03 f9 	      lda	left_text+3,x	; 4	 (30)
    243  47af		       a6 9b		      ldx	scorepointers+5	; 3	 (33)
    244  47b1		       1d 03 fa 	      ora	right_text+3,x	; 4	 (37)
    245  47b4		       85 1b		      sta	GRP0	; 3	 (40)
    246  47b6
    247  47b6		       a6 9c		      ldx	scorepointers+6	; 3	 (43) 3 in A
    248  47b8		       bd 03 f9 	      lda	left_text+3,x	; 4	 (47)
    249  47bb		       a6 9d		      ldx	scorepointers+7	; 3	 (50)
    250  47bd		       1d 03 fa 	      ora	right_text+3,x	; 4	 (54)
    251  47c0
    252  47c0		       a4 f5		      ldy	TextColor	; 2	 (56)
    253  47c2		       84 07		      sty	COLUP1	; 3	 (59)
    254  47c4
    255  47c4							;line 2
    256  47c4		       85 02		      sta	WSYNC	; 3	 (0)
    257  47c6		       84 06		      sty	COLUP0	; 3	 (3)
    258  47c8		       a8		      tay		; 2	 (5) 3 in Y
    259  47c9
    260  47c9		       a6 9e		      ldx	scorepointers+8	; 3	 (8) 4
    261  47cb		       bd 03 f9 	      lda	left_text+3,x	; 4	 (12)
    262  47ce		       a6 9f		      ldx	scorepointers+9	; 3	 (15)
    263  47d0		       1d 03 fa 	      ora	right_text+3,x	; 4	 (19)
    264  47d3		       85 f6		      sta	stack1	; 3	 (22)
    265  47d5
    266  47d5		       a6 a0		      ldx	scorepointers+10	; 3	 (25*) 5 in A
    267  47d7		       bd 03 f9 	      lda	left_text+3,x	; 4	 (29)
    268  47da		       a6 a1		      ldx	scorepointers+11	; 3	 (32)
    269  47dc		       1d 03 fa 	      ora	right_text+3,x	; 4	 (36)
    270  47df
    271  47df		       a6 f6		      ldx	stack1	; 3	 (39) 4 in X
    272  47e1					      ifnconst	noscoretxt
      0  47e1					      sleep	5	; 7	 (46)
      1  47e1				   .CYCLES    SET	5
      2  47e1
      3  47e1				  -	      IF	.CYCLES < 2
      4  47e1				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  47e1				  -	      ERR
      6  47e1					      ENDIF
      7  47e1
      8  47e1					      IF	.CYCLES & 1
      9  47e1					      IFNCONST	NO_ILLEGAL_OPCODES
     10  47e1		       04 00		      nop	0
     11  47e3				  -	      ELSE
     12  47e3				  -	      bit	VSYNC
     13  47e3					      ENDIF
     14  47e3				   .CYCLES    SET	.CYCLES - 3
     15  47e3					      ENDIF
     16  47e3
     17  47e3					      REPEAT	.CYCLES / 2
     18  47e3		       ea		      nop
     19  47e4					      REPEND
    274  47e4				  -	      else
    275  47e4				  -	      sleep	2
    276  47e4					      endif
    277  47e4		       84 1c		      sty	GRP1	; 3	 (45) 3 -> [GRP1] ; 2 -> GRP0
    278  47e6		       86 1b		      stx	GRP0	; 3	 (48) 4 -> [GRP0] ; 3 -> GRP1
    279  47e8		       85 1c		      sta	GRP1	; 3	 (51) 5 -> [GRP1] ; 4 -> GRP0
    280  47ea		       85 1b		      sta	GRP0	; 3	 (54) 5 -> GRP1
    281  47ec
    282  47ec		       a0 02		      ldy	#2	; 2	 (56)
    283  47ee		       a6 96		      ldx	scorepointers+0	; 3	 (59)
    284  47f0		       bd 04 f9 	      lda	left_text+4,x	; 4	 (63)
    285  47f3		       a6 97		      ldx	scorepointers+1	; 3	 (66)
    286  47f5		       1d 04 fa 	      ora	right_text+4,x	; 4	 (70)
    287  47f8							;    sleep 2
    288  47f8
    289  47f8							; Text line 5 / 5
    290  47f8
    291  47f8							;line 1
    292  47f8		       85 02		      sta	WSYNC	; 3	 (0)
    293  47fa		       a0 08		      ldy	#textbkcolor	; 2	 (2)
    294  47fc		       84 06		      sty	COLUP0	; 3	 (5)
    295  47fe		       84 07		      sty	COLUP1	; 3	 (8)
    296  4800		       85 1b		      sta	GRP0	; 3	 (11)
    297  4802
    298  4802		       a6 98		      ldx	scorepointers+2	; 3	 (9)
    299  4804		       bd 04 f9 	      lda	left_text+4,x	; 4	 (13)
    300  4807		       a6 99		      ldx	scorepointers+3	; 3	 (16)
    301  4809		       1d 04 fa 	      ora	right_text+4,x	; 4	 (20)
    302  480c		       85 1c		      sta	GRP1	; 3	 (23*)
    303  480e
    304  480e		       a6 9a		      ldx	scorepointers+4	; 3	 (26)
    305  4810		       bd 04 f9 	      lda	left_text+4,x	; 4	 (30)
    306  4813		       a6 9b		      ldx	scorepointers+5	; 3	 (33)
    307  4815		       1d 04 fa 	      ora	right_text+4,x	; 4	 (37)
    308  4818		       85 1b		      sta	GRP0	; 3	 (40)
    309  481a
    310  481a		       a6 9c		      ldx	scorepointers+6	; 3	 (43) 3 in A
    311  481c		       bd 04 f9 	      lda	left_text+4,x	; 4	 (47)
    312  481f		       a6 9d		      ldx	scorepointers+7	; 3	 (50)
    313  4821		       1d 04 fa 	      ora	right_text+4,x	; 4	 (54)
    314  4824
    315  4824		       a4 f5		      ldy	TextColor	; 2	 (56)
    316  4826		       84 07		      sty	COLUP1	; 3	 (59)
    317  4828
    318  4828							;line 2
    319  4828		       85 02		      sta	WSYNC	; 3	 (0)
    320  482a		       84 06		      sty	COLUP0	; 3	 (3)
    321  482c		       a8		      tay		; 2	 (5) 3 in Y
    322  482d
    323  482d		       a6 9e		      ldx	scorepointers+8	; 3	 (8) 4
    324  482f		       bd 04 f9 	      lda	left_text+4,x	; 4	 (12)
    325  4832		       a6 9f		      ldx	scorepointers+9	; 3	 (15)
    326  4834		       1d 04 fa 	      ora	right_text+4,x	; 4	 (19)
    327  4837		       85 f6		      sta	stack1	; 3	 (22)
    328  4839
    329  4839		       a6 a0		      ldx	scorepointers+10	; 3	 (25*) 5 in A
    330  483b		       bd 04 f9 	      lda	left_text+4,x	; 4	 (29)
    331  483e		       a6 a1		      ldx	scorepointers+11	; 3	 (32)
    332  4840		       1d 04 fa 	      ora	right_text+4,x	; 4	 (36)
    333  4843
    334  4843		       a6 f6		      ldx	stack1	; 3	 (39) 4 in X
    335  4845					      ifnconst	noscoretxt
      0  4845					      sleep	5	; 7	 (46)
      1  4845				   .CYCLES    SET	5
      2  4845
      3  4845				  -	      IF	.CYCLES < 2
      4  4845				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  4845				  -	      ERR
      6  4845					      ENDIF
      7  4845
      8  4845					      IF	.CYCLES & 1
      9  4845					      IFNCONST	NO_ILLEGAL_OPCODES
     10  4845		       04 00		      nop	0
     11  4847				  -	      ELSE
     12  4847				  -	      bit	VSYNC
     13  4847					      ENDIF
     14  4847				   .CYCLES    SET	.CYCLES - 3
     15  4847					      ENDIF
     16  4847
     17  4847					      REPEAT	.CYCLES / 2
     18  4847		       ea		      nop
     19  4848					      REPEND
    337  4848				  -	      else
    338  4848				  -	      sleep	2
    339  4848					      endif
    340  4848		       84 1c		      sty	GRP1	; 3	 (45) 3 -> [GRP1] ; 2 -> GRP0
    341  484a		       86 1b		      stx	GRP0	; 3	 (48) 4 -> [GRP0] ; 3 -> GRP1
    342  484c		       85 1c		      sta	GRP1	; 3	 (51) 5 -> [GRP1] ; 4 -> GRP0
    343  484e		       85 1b		      sta	GRP0	; 3	 (54) 5 -> GRP1
    344  4850
    345  4850		       a9 00		      lda	#0
    346  4852		       85 1b		      sta	GRP0
    347  4854		       85 1c		      sta	GRP1
    348  4856		       85 1b		      sta	GRP0
    349  4858		       85 04		      sta	NUSIZ0
    350  485a		       85 05		      sta	NUSIZ1
    351  485c		       85 25		      sta	VDELP0
    352  485e		       85 26		      sta	VDELP1
    353  4860
    354  4860				  -	      ifconst	textbank
    355  4860				  -	      sta	temp7
    356  4860				  -	      lda	#>(posttextkernel-1)
    357  4860				  -	      pha
    358  4860				  -	      lda	#<(posttextkernel-1)
    359  4860				  -	      pha
    360  4860				  -	      lda	temp7
    361  4860				  -	      pha		; *** save A
    362  4860				  -	      txa
    363  4860				  -	      pha		; *** save X
    364  4860				  -	      ldx	#KERNELBANK
    365  4860				  -	      jmp	BS_jsr
    366  4860					      else
    367  4860		       4c 46 f6 	      jmp	posttextkernel
    368  4863					      endif
    369  4863
    370  4863					      if	>. != >[.+text_data_height]
    371  4900		       00 00 00 00*	      align	256
    372  4900					      endif
    373  4900
    374  4900				   text_data
    375  4900
    376  4900				   left_text
    377  4900
    378  4900		       00 00	   __A	      =	* - text_data	; baseline (0)
    379  4900		       20		      .byte.b	%00100000
    380  4901		       50		      .byte.b	%01010000
    381  4902		       70		      .byte.b	%01110000
    382  4903		       50		      .byte.b	%01010000
    383  4904		       50		      .byte.b	%01010000
    384  4905
    385  4905		       00 05	   __B	      =	* - text_data
    386  4905		       60		      .byte.b	%01100000
    387  4906		       50		      .byte.b	%01010000
    388  4907		       60		      .byte.b	%01100000
    389  4908		       50		      .byte.b	%01010000
    390  4909		       60		      .byte.b	%01100000
    391  490a
    392  490a		       00 0a	   __C	      =	* - text_data
    393  490a		       30		      .byte.b	%00110000
    394  490b		       40		      .byte.b	%01000000
    395  490c		       40		      .byte.b	%01000000
    396  490d		       40		      .byte.b	%01000000
    397  490e		       30		      .byte.b	%00110000
    398  490f
    399  490f		       00 0f	   __D	      =	* - text_data
    400  490f		       60		      .byte.b	%01100000
    401  4910		       50		      .byte.b	%01010000
    402  4911		       50		      .byte.b	%01010000
    403  4912		       50		      .byte.b	%01010000
    404  4913		       60		      .byte.b	%01100000
    405  4914
    406  4914		       00 14	   __E	      =	* - text_data
    407  4914		       70		      .byte.b	%01110000
    408  4915		       40		      .byte.b	%01000000
    409  4916		       60		      .byte.b	%01100000
    410  4917		       40		      .byte.b	%01000000
    411  4918		       70		      .byte.b	%01110000
    412  4919
    413  4919		       00 19	   __F	      =	* - text_data
    414  4919		       70		      .byte.b	%01110000
    415  491a		       40		      .byte.b	%01000000
    416  491b		       60		      .byte.b	%01100000
    417  491c		       40		      .byte.b	%01000000
    418  491d		       40		      .byte.b	%01000000
    419  491e
    420  491e		       00 1e	   __G	      =	* - text_data
    421  491e		       30		      .byte.b	%00110000
    422  491f		       40		      .byte.b	%01000000
    423  4920		       50		      .byte.b	%01010000
    424  4921		       50		      .byte.b	%01010000
    425  4922		       20		      .byte.b	%00100000
    426  4923
    427  4923		       00 23	   __H	      =	* - text_data
    428  4923		       50		      .byte.b	%01010000
    429  4924		       50		      .byte.b	%01010000
    430  4925		       70		      .byte.b	%01110000
    431  4926		       50		      .byte.b	%01010000
    432  4927		       50		      .byte.b	%01010000
    433  4928
    434  4928		       00 28	   __I	      =	* - text_data
    435  4928		       70		      .byte.b	%01110000
    436  4929		       20		      .byte.b	%00100000
    437  492a		       20		      .byte.b	%00100000
    438  492b		       20		      .byte.b	%00100000
    439  492c		       70		      .byte.b	%01110000
    440  492d
    441  492d		       00 2d	   __J	      =	* - text_data
    442  492d		       10		      .byte.b	%00010000
    443  492e		       10		      .byte.b	%00010000
    444  492f		       10		      .byte.b	%00010000
    445  4930		       50		      .byte.b	%01010000
    446  4931		       20		      .byte.b	%00100000
    447  4932
    448  4932		       00 32	   __K	      =	* - text_data
    449  4932		       50		      .byte.b	%01010000
    450  4933		       50		      .byte.b	%01010000
    451  4934		       60		      .byte.b	%01100000
    452  4935		       50		      .byte.b	%01010000
    453  4936		       50		      .byte.b	%01010000
    454  4937
    455  4937		       00 37	   __L	      =	* - text_data
    456  4937		       40		      .byte.b	%01000000
    457  4938		       40		      .byte.b	%01000000
    458  4939		       40		      .byte.b	%01000000
    459  493a		       40		      .byte.b	%01000000
    460  493b		       70		      .byte.b	%01110000
    461  493c
    462  493c		       00 3c	   __M	      =	* - text_data
    463  493c		       50		      .byte.b	%01010000
    464  493d		       70		      .byte.b	%01110000
    465  493e		       70		      .byte.b	%01110000
    466  493f		       50		      .byte.b	%01010000
    467  4940		       50		      .byte.b	%01010000
    468  4941
    469  4941		       00 41	   __N	      =	* - text_data
    470  4941		       60		      .byte.b	%01100000
    471  4942		       50		      .byte.b	%01010000
    472  4943		       50		      .byte.b	%01010000
    473  4944		       50		      .byte.b	%01010000
    474  4945		       50		      .byte.b	%01010000
    475  4946
    476  4946		       00 46	   __O	      =	* - text_data
    477  4946		       20		      .byte.b	%00100000
    478  4947		       50		      .byte.b	%01010000
    479  4948		       50		      .byte.b	%01010000
    480  4949		       50		      .byte.b	%01010000
    481  494a		       20		      .byte.b	%00100000
    482  494b
    483  494b		       00 4b	   __P	      =	* - text_data
    484  494b		       60		      .byte.b	%01100000
    485  494c		       50		      .byte.b	%01010000
    486  494d		       60		      .byte.b	%01100000
    487  494e		       40		      .byte.b	%01000000
    488  494f		       40		      .byte.b	%01000000
    489  4950
    490  4950		       00 50	   __Q	      =	* - text_data
    491  4950		       20		      .byte.b	%00100000
    492  4951		       50		      .byte.b	%01010000
    493  4952		       50		      .byte.b	%01010000
    494  4953		       50		      .byte.b	%01010000
    495  4954		       30		      .byte.b	%00110000
    496  4955
    497  4955		       00 55	   __R	      =	* - text_data
    498  4955		       60		      .byte.b	%01100000
    499  4956		       50		      .byte.b	%01010000
    500  4957		       60		      .byte.b	%01100000
    501  4958		       50		      .byte.b	%01010000
    502  4959		       50		      .byte.b	%01010000
    503  495a
    504  495a		       00 5a	   __S	      =	* - text_data
    505  495a		       30		      .byte.b	%00110000
    506  495b		       40		      .byte.b	%01000000
    507  495c		       20		      .byte.b	%00100000
    508  495d		       10		      .byte.b	%00010000
    509  495e		       60		      .byte.b	%01100000
    510  495f
    511  495f		       00 5f	   __T	      =	* - text_data
    512  495f		       70		      .byte.b	%01110000
    513  4960		       20		      .byte.b	%00100000
    514  4961		       20		      .byte.b	%00100000
    515  4962		       20		      .byte.b	%00100000
    516  4963		       20		      .byte.b	%00100000
    517  4964
    518  4964		       00 64	   __U	      =	* - text_data
    519  4964		       50		      .byte.b	%01010000
    520  4965		       50		      .byte.b	%01010000
    521  4966		       50		      .byte.b	%01010000
    522  4967		       50		      .byte.b	%01010000
    523  4968		       70		      .byte.b	%01110000
    524  4969
    525  4969		       00 69	   __V	      =	* - text_data
    526  4969		       50		      .byte.b	%01010000
    527  496a		       50		      .byte.b	%01010000
    528  496b		       50		      .byte.b	%01010000
    529  496c		       50		      .byte.b	%01010000
    530  496d		       20		      .byte.b	%00100000
    531  496e
    532  496e		       00 6e	   __W	      =	* - text_data
    533  496e		       50		      .byte.b	%01010000
    534  496f		       50		      .byte.b	%01010000
    535  4970		       70		      .byte.b	%01110000
    536  4971		       70		      .byte.b	%01110000
    537  4972		       50		      .byte.b	%01010000
    538  4973
    539  4973		       00 73	   __X	      =	* - text_data
    540  4973		       50		      .byte.b	%01010000
    541  4974		       50		      .byte.b	%01010000
    542  4975		       20		      .byte.b	%00100000
    543  4976		       50		      .byte.b	%01010000
    544  4977		       50		      .byte.b	%01010000
    545  4978
    546  4978		       00 78	   __Y	      =	* - text_data
    547  4978		       50		      .byte.b	%01010000
    548  4979		       50		      .byte.b	%01010000
    549  497a		       20		      .byte.b	%00100000
    550  497b		       20		      .byte.b	%00100000
    551  497c		       20		      .byte.b	%00100000
    552  497d
    553  497d		       00 7d	   __Z	      =	* - text_data
    554  497d		       70		      .byte.b	%01110000
    555  497e		       10		      .byte.b	%00010000
    556  497f		       20		      .byte.b	%00100000
    557  4980		       40		      .byte.b	%01000000
    558  4981		       70		      .byte.b	%01110000
    559  4982
    560  4982		       00 82	   __0	      =	* - text_data
    561  4982		       70		      .byte.b	%01110000
    562  4983		       50		      .byte.b	%01010000
    563  4984		       50		      .byte.b	%01010000
    564  4985		       50		      .byte.b	%01010000
    565  4986		       70		      .byte.b	%01110000
    566  4987
    567  4987		       00 87	   __1	      =	* - text_data
    568  4987		       20		      .byte.b	%00100000
    569  4988		       60		      .byte.b	%01100000
    570  4989		       20		      .byte.b	%00100000
    571  498a		       20		      .byte.b	%00100000
    572  498b		       70		      .byte.b	%01110000
    573  498c
    574  498c		       00 8c	   __2	      =	* - text_data
    575  498c		       60		      .byte.b	%01100000
    576  498d		       10		      .byte.b	%00010000
    577  498e		       20		      .byte.b	%00100000
    578  498f		       40		      .byte.b	%01000000
    579  4990		       70		      .byte.b	%01110000
    580  4991
    581  4991		       00 91	   __3	      =	* - text_data
    582  4991		       60		      .byte.b	%01100000
    583  4992		       10		      .byte.b	%00010000
    584  4993		       20		      .byte.b	%00100000
    585  4994		       10		      .byte.b	%00010000
    586  4995		       60		      .byte.b	%01100000
    587  4996
    588  4996		       00 96	   __4	      =	* - text_data
    589  4996		       50		      .byte.b	%01010000
    590  4997		       50		      .byte.b	%01010000
    591  4998		       70		      .byte.b	%01110000
    592  4999		       10		      .byte.b	%00010000
    593  499a		       10		      .byte.b	%00010000
    594  499b
    595  499b		       00 9b	   __5	      =	* - text_data
    596  499b		       70		      .byte.b	%01110000
    597  499c		       40		      .byte.b	%01000000
    598  499d		       60		      .byte.b	%01100000
    599  499e		       10		      .byte.b	%00010000
    600  499f		       60		      .byte.b	%01100000
    601  49a0
    602  49a0		       00 a0	   __6	      =	* - text_data
    603  49a0		       30		      .byte.b	%00110000
    604  49a1		       40		      .byte.b	%01000000
    605  49a2		       60		      .byte.b	%01100000
    606  49a3		       50		      .byte.b	%01010000
    607  49a4		       20		      .byte.b	%00100000
    608  49a5
    609  49a5		       00 a5	   __7	      =	* - text_data
    610  49a5		       70		      .byte.b	%01110000
    611  49a6		       10		      .byte.b	%00010000
    612  49a7		       20		      .byte.b	%00100000
    613  49a8		       40		      .byte.b	%01000000
    614  49a9		       40		      .byte.b	%01000000
    615  49aa
    616  49aa		       00 aa	   __8	      =	* - text_data
    617  49aa		       20		      .byte.b	%00100000
    618  49ab		       50		      .byte.b	%01010000
    619  49ac		       20		      .byte.b	%00100000
    620  49ad		       50		      .byte.b	%01010000
    621  49ae		       20		      .byte.b	%00100000
    622  49af
    623  49af		       00 af	   __9	      =	* - text_data
    624  49af		       20		      .byte.b	%00100000
    625  49b0		       50		      .byte.b	%01010000
    626  49b1		       30		      .byte.b	%00110000
    627  49b2		       10		      .byte.b	%00010000
    628  49b3		       60		      .byte.b	%01100000
    629  49b4
    630  49b4		       00 b4	   _sp	      =	* - text_data
    631  49b4		       00		      .byte.b	%00000000
    632  49b5		       00		      .byte.b	%00000000
    633  49b6		       00		      .byte.b	%00000000
    634  49b7		       00		      .byte.b	%00000000
    635  49b8		       00		      .byte.b	%00000000
    636  49b9
    637  49b9		       00 b9	   _pd	      =	* - text_data
    638  49b9		       00		      .byte.b	%00000000
    639  49ba		       00		      .byte.b	%00000000
    640  49bb		       00		      .byte.b	%00000000
    641  49bc		       00		      .byte.b	%00000000
    642  49bd		       20		      .byte.b	%00100000
    643  49be
    644  49be		       00 be	   _qu	      =	* - text_data
    645  49be		       60		      .byte.b	%01100000
    646  49bf		       10		      .byte.b	%00010000
    647  49c0		       20		      .byte.b	%00100000
    648  49c1		       00		      .byte.b	%00000000
    649  49c2		       20		      .byte.b	%00100000
    650  49c3
    651  49c3		       00 c3	   _ex	      =	* - text_data
    652  49c3		       20		      .byte.b	%00100000
    653  49c4		       20		      .byte.b	%00100000
    654  49c5		       20		      .byte.b	%00100000
    655  49c6		       00		      .byte.b	%00000000
    656  49c7		       20		      .byte.b	%00100000
    657  49c8
    658  49c8		       00 c8	   _cm	      =	* - text_data
    659  49c8		       00		      .byte.b	%00000000
    660  49c9		       00		      .byte.b	%00000000
    661  49ca		       00		      .byte.b	%00000000
    662  49cb		       20		      .byte.b	%00100000
    663  49cc		       40		      .byte.b	%01000000
    664  49cd
    665  49cd		       00 cd	   _hy	      =	* - text_data
    666  49cd		       00		      .byte.b	%00000000
    667  49ce		       00		      .byte.b	%00000000
    668  49cf		       70		      .byte.b	%01110000
    669  49d0		       00		      .byte.b	%00000000
    670  49d1		       00		      .byte.b	%00000000
    671  49d2
    672  49d2		       00 d2	   _pl	      =	* - text_data
    673  49d2		       20		      .byte.b	%00100000
    674  49d3		       20		      .byte.b	%00100000
    675  49d4		       70		      .byte.b	%01110000
    676  49d5		       20		      .byte.b	%00100000
    677  49d6		       20		      .byte.b	%00100000
    678  49d7
    679  49d7		       00 d7	   _ap	      =	* - text_data
    680  49d7		       20		      .byte.b	%00100000
    681  49d8		       40		      .byte.b	%01000000
    682  49d9		       00		      .byte.b	%00000000
    683  49da		       00		      .byte.b	%00000000
    684  49db		       00		      .byte.b	%00000000
    685  49dc
    686  49dc		       00 dc	   _lp	      =	* - text_data
    687  49dc		       20		      .byte.b	%00100000
    688  49dd		       40		      .byte.b	%01000000
    689  49de		       40		      .byte.b	%01000000
    690  49df		       40		      .byte.b	%01000000
    691  49e0		       20		      .byte.b	%00100000
    692  49e1
    693  49e1		       00 e1	   _rp	      =	* - text_data
    694  49e1		       20		      .byte.b	%00100000
    695  49e2		       10		      .byte.b	%00010000
    696  49e3		       10		      .byte.b	%00010000
    697  49e4		       10		      .byte.b	%00010000
    698  49e5		       20		      .byte.b	%00100000
    699  49e6
    700  49e6		       00 e6	   _co	      =	* - text_data
    701  49e6		       00		      .byte.b	%00000000
    702  49e7		       40		      .byte.b	%01000000
    703  49e8		       00		      .byte.b	%00000000
    704  49e9		       40		      .byte.b	%01000000
    705  49ea		       00		      .byte.b	%00000000
    706  49eb
    707  49eb		       00 eb	   _sl	      =	* - text_data
    708  49eb		       10		      .byte.b	%00010000
    709  49ec		       10		      .byte.b	%00010000
    710  49ed		       20		      .byte.b	%00100000
    711  49ee		       40		      .byte.b	%01000000
    712  49ef		       40		      .byte.b	%01000000
    713  49f0
    714  49f0		       00 f0	   _eq	      =	* - text_data
    715  49f0		       00		      .byte.b	%00000000
    716  49f1		       70		      .byte.b	%01110000
    717  49f2		       00		      .byte.b	%00000000
    718  49f3		       70		      .byte.b	%01110000
    719  49f4		       00		      .byte.b	%00000000
    720  49f5
    721  49f5		       00 f5	   _qt	      =	* - text_data
    722  49f5		       50		      .byte.b	%01010000
    723  49f6		       50		      .byte.b	%01010000
    724  49f7		       00		      .byte.b	%00000000
    725  49f8		       00		      .byte.b	%00000000
    726  49f9		       00		      .byte.b	%00000000
    727  49fa
    728  49fa		       00 fa	   _po	      =	* - text_data
    729  49fa				   _ht
    730  49fa		       50		      .byte.b	%01010000
    731  49fb		       f0		      .byte.b	%11110000
    732  49fc		       50		      .byte.b	%01010000
    733  49fd		       f0		      .byte.b	%11110000
    734  49fe		       50		      .byte.b	%01010000
    735  49ff
    736  49ff
    737  49ff		       00 ff	   text_data_height =	* - text_data
    738  49ff
    739  49ff					      if	>. != >[.+text_data_height]
    740  4a00		       00		      align	256
    741  4a00					      endif
    742  4a00
    743  4a00				   right_text
    744  4a00
    745  4a00							; A
    746  4a00		       02		      .byte.b	%00000010
    747  4a01		       05		      .byte.b	%00000101
    748  4a02		       07		      .byte.b	%00000111
    749  4a03		       05		      .byte.b	%00000101
    750  4a04		       05		      .byte.b	%00000101
    751  4a05
    752  4a05
    753  4a05							; B
    754  4a05		       06		      .byte.b	%00000110
    755  4a06		       05		      .byte.b	%00000101
    756  4a07		       06		      .byte.b	%00000110
    757  4a08		       05		      .byte.b	%00000101
    758  4a09		       06		      .byte.b	%00000110
    759  4a0a
    760  4a0a							; C
    761  4a0a		       03		      .byte.b	%00000011
    762  4a0b		       04		      .byte.b	%00000100
    763  4a0c		       04		      .byte.b	%00000100
    764  4a0d		       04		      .byte.b	%00000100
    765  4a0e		       03		      .byte.b	%00000011
    766  4a0f
    767  4a0f							; D
    768  4a0f		       06		      .byte.b	%00000110
    769  4a10		       05		      .byte.b	%00000101
    770  4a11		       05		      .byte.b	%00000101
    771  4a12		       05		      .byte.b	%00000101
    772  4a13		       06		      .byte.b	%00000110
    773  4a14
    774  4a14							; E
    775  4a14		       07		      .byte.b	%00000111
    776  4a15		       04		      .byte.b	%00000100
    777  4a16		       06		      .byte.b	%00000110
    778  4a17		       04		      .byte.b	%00000100
    779  4a18		       07		      .byte.b	%00000111
    780  4a19
    781  4a19							; F
    782  4a19		       07		      .byte.b	%00000111
    783  4a1a		       04		      .byte.b	%00000100
    784  4a1b		       06		      .byte.b	%00000110
    785  4a1c		       04		      .byte.b	%00000100
    786  4a1d		       04		      .byte.b	%00000100
    787  4a1e
    788  4a1e							; G
    789  4a1e		       03		      .byte.b	%00000011
    790  4a1f		       04		      .byte.b	%00000100
    791  4a20		       05		      .byte.b	%00000101
    792  4a21		       05		      .byte.b	%00000101
    793  4a22		       02		      .byte.b	%00000010
    794  4a23
    795  4a23							; H
    796  4a23		       05		      .byte.b	%00000101
    797  4a24		       05		      .byte.b	%00000101
    798  4a25		       07		      .byte.b	%00000111
    799  4a26		       05		      .byte.b	%00000101
    800  4a27		       05		      .byte.b	%00000101
    801  4a28
    802  4a28							; I
    803  4a28		       07		      .byte.b	%00000111
    804  4a29		       02		      .byte.b	%00000010
    805  4a2a		       02		      .byte.b	%00000010
    806  4a2b		       02		      .byte.b	%00000010
    807  4a2c		       07		      .byte.b	%00000111
    808  4a2d
    809  4a2d							; J
    810  4a2d		       01		      .byte.b	%00000001
    811  4a2e		       01		      .byte.b	%00000001
    812  4a2f		       01		      .byte.b	%00000001
    813  4a30		       05		      .byte.b	%00000101
    814  4a31		       02		      .byte.b	%00000010
    815  4a32
    816  4a32							; K
    817  4a32		       05		      .byte.b	%00000101
    818  4a33		       05		      .byte.b	%00000101
    819  4a34		       06		      .byte.b	%00000110
    820  4a35		       05		      .byte.b	%00000101
    821  4a36		       05		      .byte.b	%00000101
    822  4a37
    823  4a37							; L
    824  4a37		       04		      .byte.b	%00000100
    825  4a38		       04		      .byte.b	%00000100
    826  4a39		       04		      .byte.b	%00000100
    827  4a3a		       04		      .byte.b	%00000100
    828  4a3b		       07		      .byte.b	%00000111
    829  4a3c
    830  4a3c							; M
    831  4a3c		       05		      .byte.b	%00000101
    832  4a3d		       07		      .byte.b	%00000111
    833  4a3e		       07		      .byte.b	%00000111
    834  4a3f		       05		      .byte.b	%00000101
    835  4a40		       05		      .byte.b	%00000101
    836  4a41
    837  4a41							; N
    838  4a41		       06		      .byte.b	%00000110
    839  4a42		       05		      .byte.b	%00000101
    840  4a43		       05		      .byte.b	%00000101
    841  4a44		       05		      .byte.b	%00000101
    842  4a45		       05		      .byte.b	%00000101
    843  4a46
    844  4a46							; O
    845  4a46		       02		      .byte.b	%00000010
    846  4a47		       05		      .byte.b	%00000101
    847  4a48		       05		      .byte.b	%00000101
    848  4a49		       05		      .byte.b	%00000101
    849  4a4a		       02		      .byte.b	%00000010
    850  4a4b
    851  4a4b							; P
    852  4a4b		       06		      .byte.b	%00000110
    853  4a4c		       05		      .byte.b	%00000101
    854  4a4d		       06		      .byte.b	%00000110
    855  4a4e		       04		      .byte.b	%00000100
    856  4a4f		       04		      .byte.b	%00000100
    857  4a50
    858  4a50							; Q
    859  4a50		       02		      .byte.b	%00000010
    860  4a51		       05		      .byte.b	%00000101
    861  4a52		       05		      .byte.b	%00000101
    862  4a53		       05		      .byte.b	%00000101
    863  4a54		       03		      .byte.b	%00000011
    864  4a55
    865  4a55							; R
    866  4a55		       06		      .byte.b	%00000110
    867  4a56		       05		      .byte.b	%00000101
    868  4a57		       06		      .byte.b	%00000110
    869  4a58		       05		      .byte.b	%00000101
    870  4a59		       05		      .byte.b	%00000101
    871  4a5a
    872  4a5a							; S
    873  4a5a		       03		      .byte.b	%00000011
    874  4a5b		       04		      .byte.b	%00000100
    875  4a5c		       02		      .byte.b	%00000010
    876  4a5d		       01		      .byte.b	%00000001
    877  4a5e		       06		      .byte.b	%00000110
    878  4a5f
    879  4a5f							; T
    880  4a5f		       07		      .byte.b	%00000111
    881  4a60		       02		      .byte.b	%00000010
    882  4a61		       02		      .byte.b	%00000010
    883  4a62		       02		      .byte.b	%00000010
    884  4a63		       02		      .byte.b	%00000010
    885  4a64
    886  4a64							; U
    887  4a64		       05		      .byte.b	%00000101
    888  4a65		       05		      .byte.b	%00000101
    889  4a66		       05		      .byte.b	%00000101
    890  4a67		       05		      .byte.b	%00000101
    891  4a68		       07		      .byte.b	%00000111
    892  4a69
    893  4a69							; V
    894  4a69		       05		      .byte.b	%00000101
    895  4a6a		       05		      .byte.b	%00000101
    896  4a6b		       05		      .byte.b	%00000101
    897  4a6c		       05		      .byte.b	%00000101
    898  4a6d		       02		      .byte.b	%00000010
    899  4a6e
    900  4a6e							; W
    901  4a6e		       05		      .byte.b	%00000101
    902  4a6f		       05		      .byte.b	%00000101
    903  4a70		       07		      .byte.b	%00000111
    904  4a71		       07		      .byte.b	%00000111
    905  4a72		       05		      .byte.b	%00000101
    906  4a73
    907  4a73							; X
    908  4a73		       05		      .byte.b	%00000101
    909  4a74		       05		      .byte.b	%00000101
    910  4a75		       02		      .byte.b	%00000010
    911  4a76		       05		      .byte.b	%00000101
    912  4a77		       05		      .byte.b	%00000101
    913  4a78
    914  4a78							; Y
    915  4a78		       05		      .byte.b	%00000101
    916  4a79		       05		      .byte.b	%00000101
    917  4a7a		       02		      .byte.b	%00000010
    918  4a7b		       02		      .byte.b	%00000010
    919  4a7c		       02		      .byte.b	%00000010
    920  4a7d
    921  4a7d							; Z
    922  4a7d		       07		      .byte.b	%00000111
    923  4a7e		       01		      .byte.b	%00000001
    924  4a7f		       02		      .byte.b	%00000010
    925  4a80		       04		      .byte.b	%00000100
    926  4a81		       07		      .byte.b	%00000111
    927  4a82
    928  4a82							; 0
    929  4a82		       07		      .byte.b	%00000111
    930  4a83		       05		      .byte.b	%00000101
    931  4a84		       05		      .byte.b	%00000101
    932  4a85		       05		      .byte.b	%00000101
    933  4a86		       07		      .byte.b	%00000111
    934  4a87
    935  4a87							; 1
    936  4a87		       02		      .byte.b	%00000010
    937  4a88		       06		      .byte.b	%00000110
    938  4a89		       02		      .byte.b	%00000010
    939  4a8a		       02		      .byte.b	%00000010
    940  4a8b		       07		      .byte.b	%00000111
    941  4a8c
    942  4a8c							; 2
    943  4a8c		       06		      .byte.b	%00000110
    944  4a8d		       01		      .byte.b	%00000001
    945  4a8e		       02		      .byte.b	%00000010
    946  4a8f		       04		      .byte.b	%00000100
    947  4a90		       07		      .byte.b	%00000111
    948  4a91
    949  4a91							; 3
    950  4a91		       06		      .byte.b	%00000110
    951  4a92		       01		      .byte.b	%00000001
    952  4a93		       02		      .byte.b	%00000010
    953  4a94		       01		      .byte.b	%00000001
    954  4a95		       06		      .byte.b	%00000110
    955  4a96
    956  4a96							; 4
    957  4a96		       05		      .byte.b	%00000101
    958  4a97		       05		      .byte.b	%00000101
    959  4a98		       07		      .byte.b	%00000111
    960  4a99		       01		      .byte.b	%00000001
    961  4a9a		       01		      .byte.b	%00000001
    962  4a9b
    963  4a9b							; 5
    964  4a9b		       07		      .byte.b	%00000111
    965  4a9c		       04		      .byte.b	%00000100
    966  4a9d		       06		      .byte.b	%00000110
    967  4a9e		       01		      .byte.b	%00000001
    968  4a9f		       06		      .byte.b	%00000110
    969  4aa0
    970  4aa0							; 6
    971  4aa0		       03		      .byte.b	%00000011
    972  4aa1		       04		      .byte.b	%00000100
    973  4aa2		       06		      .byte.b	%00000110
    974  4aa3		       05		      .byte.b	%00000101
    975  4aa4		       02		      .byte.b	%00000010
    976  4aa5
    977  4aa5							; 7
    978  4aa5		       07		      .byte.b	%00000111
    979  4aa6		       01		      .byte.b	%00000001
    980  4aa7		       02		      .byte.b	%00000010
    981  4aa8		       04		      .byte.b	%00000100
    982  4aa9		       04		      .byte.b	%00000100
    983  4aaa
    984  4aaa							; 8
    985  4aaa		       02		      .byte.b	%00000010
    986  4aab		       05		      .byte.b	%00000101
    987  4aac		       02		      .byte.b	%00000010
    988  4aad		       05		      .byte.b	%00000101
    989  4aae		       02		      .byte.b	%00000010
    990  4aaf
    991  4aaf							; 9
    992  4aaf		       02		      .byte.b	%00000010
    993  4ab0		       05		      .byte.b	%00000101
    994  4ab1		       03		      .byte.b	%00000011
    995  4ab2		       01		      .byte.b	%00000001
    996  4ab3		       06		      .byte.b	%00000110
    997  4ab4
    998  4ab4							; space
    999  4ab4		       00		      .byte.b	%00000000
   1000  4ab5		       00		      .byte.b	%00000000
   1001  4ab6		       00		      .byte.b	%00000000
   1002  4ab7		       00		      .byte.b	%00000000
   1003  4ab8		       00		      .byte.b	%00000000
   1004  4ab9
   1005  4ab9							; period
   1006  4ab9		       00		      .byte.b	%00000000
   1007  4aba		       00		      .byte.b	%00000000
   1008  4abb		       00		      .byte.b	%00000000
   1009  4abc		       00		      .byte.b	%00000000
   1010  4abd		       02		      .byte.b	%00000010
   1011  4abe
   1012  4abe							; question mark
   1013  4abe		       06		      .byte.b	%00000110
   1014  4abf		       01		      .byte.b	%00000001
   1015  4ac0		       02		      .byte.b	%00000010
   1016  4ac1		       00		      .byte.b	%00000000
   1017  4ac2		       02		      .byte.b	%00000010
   1018  4ac3
   1019  4ac3							; exclamation point
   1020  4ac3		       02		      .byte.b	%00000010
   1021  4ac4		       02		      .byte.b	%00000010
   1022  4ac5		       02		      .byte.b	%00000010
   1023  4ac6		       00		      .byte.b	%00000000
   1024  4ac7		       02		      .byte.b	%00000010
   1025  4ac8
   1026  4ac8							; comma
   1027  4ac8		       00		      .byte.b	%00000000
   1028  4ac9		       00		      .byte.b	%00000000
   1029  4aca		       00		      .byte.b	%00000000
   1030  4acb		       02		      .byte.b	%00000010
   1031  4acc		       04		      .byte.b	%00000100
   1032  4acd
   1033  4acd							; hyphen
   1034  4acd		       00		      .byte.b	%00000000
   1035  4ace		       00		      .byte.b	%00000000
   1036  4acf		       07		      .byte.b	%00000111
   1037  4ad0		       00		      .byte.b	%00000000
   1038  4ad1		       00		      .byte.b	%00000000
   1039  4ad2
   1040  4ad2							; plus
   1041  4ad2		       02		      .byte.b	%00000010
   1042  4ad3		       02		      .byte.b	%00000010
   1043  4ad4		       07		      .byte.b	%00000111
   1044  4ad5		       02		      .byte.b	%00000010
   1045  4ad6		       02		      .byte.b	%00000010
   1046  4ad7
   1047  4ad7							; apostrophe
   1048  4ad7		       02		      .byte.b	%00000010
   1049  4ad8		       04		      .byte.b	%00000100
   1050  4ad9		       00		      .byte.b	%00000000
   1051  4ada		       00		      .byte.b	%00000000
   1052  4adb		       00		      .byte.b	%00000000
   1053  4adc
   1054  4adc							; left parenthesis
   1055  4adc		       02		      .byte.b	%00000010
   1056  4add		       04		      .byte.b	%00000100
   1057  4ade		       04		      .byte.b	%00000100
   1058  4adf		       04		      .byte.b	%00000100
   1059  4ae0		       02		      .byte.b	%00000010
   1060  4ae1
   1061  4ae1							; right parenthesis
   1062  4ae1		       02		      .byte.b	%00000010
   1063  4ae2		       01		      .byte.b	%00000001
   1064  4ae3		       01		      .byte.b	%00000001
   1065  4ae4		       01		      .byte.b	%00000001
   1066  4ae5		       02		      .byte.b	%00000010
   1067  4ae6
   1068  4ae6							; colon
   1069  4ae6		       00		      .byte.b	%00000000
   1070  4ae7		       04		      .byte.b	%00000100
   1071  4ae8		       00		      .byte.b	%00000000
   1072  4ae9		       04		      .byte.b	%00000100
   1073  4aea		       00		      .byte.b	%00000000
   1074  4aeb
   1075  4aeb							;slash
   1076  4aeb		       01		      .byte.b	%00000001
   1077  4aec		       01		      .byte.b	%00000001
   1078  4aed		       02		      .byte.b	%00000010
   1079  4aee		       04		      .byte.b	%00000100
   1080  4aef		       04		      .byte.b	%00000100
   1081  4af0
   1082  4af0							; equal
   1083  4af0		       00		      .byte.b	%00000000
   1084  4af1		       07		      .byte.b	%00000111
   1085  4af2		       00		      .byte.b	%00000000
   1086  4af3		       07		      .byte.b	%00000111
   1087  4af4		       00		      .byte.b	%00000000
   1088  4af5
   1089  4af5							; quote
   1090  4af5		       05		      .byte.b	%00000101
   1091  4af6		       05		      .byte.b	%00000101
   1092  4af7		       00		      .byte.b	%00000000
   1093  4af8		       00		      .byte.b	%00000000
   1094  4af9		       00		      .byte.b	%00000000
   1095  4afa
   1096  4afa							; pound sign
   1097  4afa		       05		      .byte.b	%00000101
   1098  4afb		       0f		      .byte.b	%00001111
   1099  4afc		       05		      .byte.b	%00000101
   1100  4afd		       0f		      .byte.b	%00001111
   1101  4afe		       05		      .byte.b	%00000101
------- FILE d:\Firmaplus\Firmaplus_intern\Atari\PlusROM\Projekte-batariBasic\CaveApocalypse\C.A.V.E. Apocalypse.bas.asm
   7704  4aff
   7705  4aff				   .
   7706  4aff							; 
   7707  4aff
   7708  4aff				   .L0633		;  data text_strings
   7709  4aff
   7710  4aff		       4c fe fb 	      JMP	.skipL0633
   7711  4b02				   text_strings
   7712  4b02		       00 37 37 b4*	      .byte.b	__A, __L, __L, _sp, __M, __E, __N, _sp, __S, __A, __V, __E	; __R, __E, __S, __C, __U, __E, __D
   7713  4b0e
   7714  4b0e		       b4 8c b4 3c*	      .byte.b	_sp, __2, _sp, __M, __E, __N, _sp, __L, __E, __F, __T, _sp
   7715  4b1a
   7716  4b1a		       b4 96 b4 3c*	      .byte.b	_sp, __4, _sp, __M, __E, __N, _sp, __L, __E, __F, __T, _sp
   7717  4b26
   7718  4b26		       b4 a0 b4 3c*	      .byte.b	_sp, __6, _sp, __M, __E, __N, _sp, __L, __E, __F, __T, _sp
   7719  4b32
   7720  4b32		       b4 aa b4 3c*	      .byte.b	_sp, __8, _sp, __M, __E, __N, _sp, __L, __E, __F, __T, _sp
   7721  4b3e
   7722  4b3e		       87 82 b4 3c*	      .byte.b	__1, __0, _sp, __M, __E, __N, _sp, __L, __E, __F, __T, _sp
   7723  4b4a
   7724  4b4a		       87 8c b4 3c*	      .byte.b	__1, __2, _sp, __M, __E, __N, _sp, __L, __E, __F, __T, _sp
   7725  4b56
   7726  4b56		       87 96 b4 3c*	      .byte.b	__1, __4, _sp, __M, __E, __N, _sp, __L, __E, __F, __T, _sp
   7727  4b62
   7728  4b62		       87 a0 b4 3c*	      .byte.b	__1, __6, _sp, __M, __E, __N, _sp, __L, __E, __F, __T, _sp
   7729  4b6e
   7730  4b6e		       87 aa b4 3c*	      .byte.b	__1, __8, _sp, __M, __E, __N, _sp, __L, __E, __F, __T, _sp
   7731  4b7a
   7732  4b7a		       8c 82 b4 3c*	      .byte.b	__2, __0, _sp, __M, __E, __N, _sp, __L, __E, __F, __T, _sp
   7733  4b86
   7734  4b86		       8c 8c b4 3c*	      .byte.b	__2, __2, _sp, __M, __E, __N, _sp, __L, __E, __F, __T, _sp
   7735  4b92
   7736  4b92		       8c 96 b4 3c*	      .byte.b	__2, __4, _sp, __M, __E, __N, _sp, __L, __E, __F, __T, _sp
   7737  4b9e
   7738  4b9e		       8c a0 b4 3c*	      .byte.b	__2, __6, _sp, __M, __E, __N, _sp, __L, __E, __F, __T, _sp
   7739  4baa
   7740  4baa		       8c aa b4 3c*	      .byte.b	__2, __8, _sp, __M, __E, __N, _sp, __L, __E, __F, __T, _sp
   7741  4bb6
   7742  4bb6		       91 82 b4 3c*	      .byte.b	__3, __0, _sp, __M, __E, __N, _sp, __L, __E, __F, __T, _sp
   7743  4bc2
   7744  4bc2		       91 8c b4 3c*	      .byte.b	__3, __2, _sp, __M, __E, __N, _sp, __L, __E, __F, __T, _sp
   7745  4bce
   7746  4bce		       91 96 b4 3c*	      .byte.b	__3, __4, _sp, __M, __E, __N, _sp, __L, __E, __F, __T, _sp
   7747  4bda
   7748  4bda		       91 a0 b4 3c*	      .byte.b	__3, __6, _sp, __M, __E, __N, _sp, __L, __E, __F, __T, _sp
   7749  4be6
   7750  4be6		       91 aa b4 3c*	      .byte.b	__3, __8, _sp, __M, __E, __N, _sp, __L, __E, __F, __T, _sp
   7751  4bf2
   7752  4bf2		       96 82 b4 3c*	      .byte.b	__4, __0, _sp, __M, __E, __N, _sp, __L, __E, __F, __T, _sp
   7753  4bfe
   7754  4bfe				   .skipL0633
   7755  4bfe				   .
   7756  4bfe							; 
   7757  4bfe
   7758  4bfe				   .
   7759  4bfe							; 
   7760  4bfe
   7761  4bfe				   .
   7762  4bfe							; 
   7763  4bfe
   7764  4bfe				   .L0634		;  asm
   7765  4bfe
      0  4bfe					      SET_PLUSROM_API	"a2.php", "ca.firmaplus.de"
      1  4bfe		       fb fe	   OLD_RORG   =	*
      2  4bfe					      REND
      3  4bfe				   PlusROM_API
      4  4bfe		       61 32 2e 70*	      .byte.b	"a2.php", 0, "ca.firmaplus.de", 0
 Size of PlusROM API definition:  23
      5  4bfe					      ECHO	"Size of PlusROM API definition: ", [( * - PlusROM_API )]d
      6  4c15					      RORG	(OLD_RORG + ( * - PlusROM_API ))
   7767  4c15
   7768  4c15				   .
   7769  4c15							; 
   7770  4c15
   7771  4c15				  -	      if	(<*) > (<(*+7))
   7772  4c15				  -	      repeat	($100-<*)
   7773  4c15				  -	      .byte	0
   7774  4c15				  -	      repend
   7775  4c15					      endif
   7776  4c15				   playercolorL0297_1
   7777  4c15		       1e		      .byte.b	_1E
   7778  4c16		       82		      .byte.b	_82
   7779  4c17		       84		      .byte.b	_84
   7780  4c18		       46		      .byte.b	_46
   7781  4c19		       44		      .byte.b	_44
   7782  4c1a		       42		      .byte.b	_42
   7783  4c1b		       12		      .byte.b	_12
   7784  4c1c		       08		      .byte.b	_08
   7785  4c1d				  -	      if	(<*) > (<(*+7))
   7786  4c1d				  -	      repeat	($100-<*)
   7787  4c1d				  -	      .byte	0
   7788  4c1d				  -	      repend
   7789  4c1d					      endif
   7790  4c1d				   player1then_1
   7791  4c1d		       1b		      .byte.b	%00011011
   7792  4c1e		       0e		      .byte.b	%00001110
   7793  4c1f		       1f		      .byte.b	%00011111
   7794  4c20		       bd		      .byte.b	%10111101
   7795  4c21		       f9		      .byte.b	%11111001
   7796  4c22		       9e		      .byte.b	%10011110
   7797  4c23		       08		      .byte.b	%00001000
   7798  4c24		       7c		      .byte.b	%01111100
   7799  4c25				  -	      if	(<*) > (<(*+7))
   7800  4c25				  -	      repeat	($100-<*)
   7801  4c25				  -	      .byte	0
   7802  4c25				  -	      repend
   7803  4c25					      endif
   7804  4c25				   player2then_1
   7805  4c25		       1b		      .byte.b	%00011011
   7806  4c26		       0e		      .byte.b	%00001110
   7807  4c27		       1f		      .byte.b	%00011111
   7808  4c28		       bd		      .byte.b	%10111101
   7809  4c29		       f9		      .byte.b	%11111001
   7810  4c2a		       9e		      .byte.b	%10011110
   7811  4c2b		       08		      .byte.b	%00001000
   7812  4c2c		       1f		      .byte.b	%00011111
   7813  4c2d				  -	      if	(<*) > (<(*+6))
   7814  4c2d				  -	      repeat	($100-<*)
   7815  4c2d				  -	      .byte	0
   7816  4c2d				  -	      repend
   7817  4c2d					      endif
   7818  4c2d				   player3then_0
   7819  4c2d		       55		      .byte.b	%01010101
   7820  4c2e		       aa		      .byte.b	%10101010
   7821  4c2f		       ff		      .byte.b	%11111111
   7822  4c30		       3c		      .byte.b	%00111100
   7823  4c31		       18		      .byte.b	%00011000
   7824  4c32		       08		      .byte.b	%00001000
   7825  4c33		       04		      .byte.b	%00000100
   7826  4c34				  -	      if	(<*) > (<(*+6))
   7827  4c34				  -	      repeat	($100-<*)
   7828  4c34				  -	      .byte	0
   7829  4c34				  -	      repend
   7830  4c34					      endif
   7831  4c34				   player4then_0
   7832  4c34		       aa		      .byte.b	%10101010
   7833  4c35		       55		      .byte.b	%01010101
   7834  4c36		       ff		      .byte.b	%11111111
   7835  4c37		       3c		      .byte.b	%00111100
   7836  4c38		       18		      .byte.b	%00011000
   7837  4c39		       08		      .byte.b	%00001000
   7838  4c3a		       04		      .byte.b	%00000100
   7839  4c3b				  -	      if	(<*) > (<(*+11))
   7840  4c3b				  -	      repeat	($100-<*)
   7841  4c3b				  -	      .byte	0
   7842  4c3b				  -	      repend
   7843  4c3b					      endif
   7844  4c3b				   playerL0311_0
   7845  4c3b		       a0		      .byte.b	%10100000
   7846  4c3c		       40		      .byte.b	%01000000
   7847  4c3d		       e0		      .byte.b	%11100000
   7848  4c3e		       a0		      .byte.b	%10100000
   7849  4c3f		       40		      .byte.b	%01000000
   7850  4c40		       00		      .byte.b	%00000000
   7851  4c41		       00		      .byte.b	%00000000
   7852  4c42		       05		      .byte.b	%00000101
   7853  4c43		       02		      .byte.b	%00000010
   7854  4c44		       07		      .byte.b	%00000111
   7855  4c45		       05		      .byte.b	%00000101
   7856  4c46		       02		      .byte.b	%00000010
   7857  4c47				  -	      if	(<*) > (<(*+24))
   7858  4c47				  -	      repeat	($100-<*)
   7859  4c47				  -	      .byte	0
   7860  4c47				  -	      repend
   7861  4c47					      endif
   7862  4c47				   playerL0313_0
   7863  4c47		       3c		      .byte.b	%00111100
   7864  4c48		       20		      .byte.b	%00100000
   7865  4c49		       20		      .byte.b	%00100000
   7866  4c4a		       20		      .byte.b	%00100000
   7867  4c4b		       20		      .byte.b	%00100000
   7868  4c4c		       00		      .byte.b	%00000000
   7869  4c4d		       3c		      .byte.b	%00111100
   7870  4c4e		       20		      .byte.b	%00100000
   7871  4c4f		       38		      .byte.b	%00111000
   7872  4c50		       20		      .byte.b	%00100000
   7873  4c51		       3c		      .byte.b	%00111100
   7874  4c52		       00		      .byte.b	%00000000
   7875  4c53		       18		      .byte.b	%00011000
   7876  4c54		       24		      .byte.b	%00100100
   7877  4c55		       24		      .byte.b	%00100100
   7878  4c56		       24		      .byte.b	%00100100
   7879  4c57		       24		      .byte.b	%00100100
   7880  4c58		       00		      .byte.b	%00000000
   7881  4c59		       20		      .byte.b	%00100000
   7882  4c5a		       20		      .byte.b	%00100000
   7883  4c5b		       38		      .byte.b	%00111000
   7884  4c5c		       20		      .byte.b	%00100000
   7885  4c5d		       bd		      .byte.b	%10111101
   7886  4c5e		       81		      .byte.b	%10000001
   7887  4c5f		       ff		      .byte.b	%11111111
   7888  4c60				  -	      if	(<*) > (<(*+3))
   7889  4c60				  -	      repeat	($100-<*)
   7890  4c60				  -	      .byte	0
   7891  4c60				  -	      repend
   7892  4c60					      endif
   7893  4c60				   player5then_0
   7894  4c60		       a6		      .byte.b	%10100110
   7895  4c61		       42		      .byte.b	%01000010
   7896  4c62		       63		      .byte.b	%01100011
   7897  4c63		       42		      .byte.b	%01000010
   7898  4c64				  -	      if	(<*) > (<(*+3))
   7899  4c64				  -	      repeat	($100-<*)
   7900  4c64				  -	      .byte	0
   7901  4c64				  -	      repend
   7902  4c64					      endif
   7903  4c64				   player6then_0
   7904  4c64		       c5		      .byte.b	%11000101
   7905  4c65		       42		      .byte.b	%01000010
   7906  4c66		       63		      .byte.b	%01100011
   7907  4c67		       42		      .byte.b	%01000010
   7908  4c68				  -	      if	(<*) > (<(*+7))
   7909  4c68				  -	      repeat	($100-<*)
   7910  4c68				  -	      .byte	0
   7911  4c68				  -	      repend
   7912  4c68					      endif
   7913  4c68				   playerL0520_1
   7914  4c68		       00		      .byte.b	%00000000
   7915  4c69		       00		      .byte.b	%00000000
   7916  4c6a		       28		      .byte.b	%00101000
   7917  4c6b		       10		      .byte.b	%00010000
   7918  4c6c		       24		      .byte.b	%00100100
   7919  4c6d		       00		      .byte.b	%00000000
   7920  4c6e		       00		      .byte.b	%00000000
   7921  4c6f		       00		      .byte.b	%00000000
   7922  4c70				  -	      if	(<*) > (<(*+7))
   7923  4c70				  -	      repeat	($100-<*)
   7924  4c70				  -	      .byte	0
   7925  4c70				  -	      repend
   7926  4c70					      endif
   7927  4c70				   playerL0522_1
   7928  4c70		       00		      .byte.b	%00000000
   7929  4c71		       42		      .byte.b	%01000010
   7930  4c72		       40		      .byte.b	%01000000
   7931  4c73		       18		      .byte.b	%00011000
   7932  4c74		       00		      .byte.b	%00000000
   7933  4c75		       42		      .byte.b	%01000010
   7934  4c76		       00		      .byte.b	%00000000
   7935  4c77		       00		      .byte.b	%00000000
   7936  4c78				  -	      if	(<*) > (<(*+7))
   7937  4c78				  -	      repeat	($100-<*)
   7938  4c78				  -	      .byte	0
   7939  4c78				  -	      repend
   7940  4c78					      endif
   7941  4c78				   playerL0524_1
   7942  4c78		       89		      .byte.b	%10001001
   7943  4c79		       52		      .byte.b	%01010010
   7944  4c7a		       00		      .byte.b	%00000000
   7945  4c7b		       44		      .byte.b	%01000100
   7946  4c7c		       10		      .byte.b	%00010000
   7947  4c7d		       42		      .byte.b	%01000010
   7948  4c7e		       81		      .byte.b	%10000001
   7949  4c7f		       00		      .byte.b	%00000000
   7950  4c80				  -	      if	(<*) > (<(*+7))
   7951  4c80				  -	      repeat	($100-<*)
   7952  4c80				  -	      .byte	0
   7953  4c80				  -	      repend
   7954  4c80					      endif
   7955  4c80				   playerL0526_1
   7956  4c80		       91		      .byte.b	%10010001
   7957  4c81		       42		      .byte.b	%01000010
   7958  4c82		       50		      .byte.b	%01010000
   7959  4c83		       81		      .byte.b	%10000001
   7960  4c84		       00		      .byte.b	%00000000
   7961  4c85		       00		      .byte.b	%00000000
   7962  4c86		       10		      .byte.b	%00010000
   7963  4c87		       91		      .byte.b	%10010001
   7964  4c88					      if	ECHOFIRST
      745 bytes of ROM space left in bank 4
   7965  4c88					      echo	"    ",[(scoretable - *)]d , "bytes of ROM space left in bank 4")
   7966  4c88					      endif
   7967  4c88		       00 01	   ECHOFIRST  =	1
   7968  4c88
   7969  4c88
   7970  4c88							; Provided under the CC0 license. See the included LICENSE.txt for details.
   7971  4c88
   7972  4c88							; feel free to modify the score graphics - just keep each digit 8 high
   7973  4c88							; and keep the conditional compilation stuff intact
   7974  4c88				  -	      ifconst	ROM2k
   7975  4c88				  -	      ifconst	PlusROM_functions
   7976  4c88				  -	      ORG	$F7AC-16
   7977  4c88				  -	      else
   7978  4c88				  -	      ORG	$F7AC-8
   7979  4c88				  -	      endif
   7980  4c88					      else
   7981  4c88					      ifconst	bankswitch
   7982  4c88				  -	      if	bankswitch == 8
   7983  4c88				  -	      ORG	$2F94-bscode_length
   7984  4c88				  -	      RORG	$FF94-bscode_length
   7985  4c88					      endif
   7986  4c88					      if	bankswitch == 16
   7987  4f71					      ORG	$4F94-bscode_length
   7988  4f71					      RORG	$FF94-bscode_length
   7989  4f71					      endif
   7990  4f71				  -	      if	bankswitch == 32
   7991  4f71				  -	      ORG	$8F94-bscode_length
   7992  4f71				  -	      RORG	$FF94-bscode_length
   7993  4f71					      endif
   7994  4f71				  -	      if	bankswitch == 64
   7995  4f71				  -	      ORG	$10F80-bscode_length
   7996  4f71				  -	      RORG	$1FF80-bscode_length
   7997  4f71					      endif
   7998  4f71				  -	      else
   7999  4f71				  -	      ifconst	PlusROM_functions
   8000  4f71				  -	      ORG	$FF98
   8001  4f71				  -	      else
   8002  4f71				  -	      ORG	$FF9C
   8003  4f71				  -	      endif
   8004  4f71					      endif
   8005  4f71					      endif
   8006  4f71
   8007  4f71							; font equates
   8008  4f71		       00 01	   .21stcentury =	1
   8009  4f71		       00 02	   alarmclock =	2
   8010  4f71		       00 03	   handwritten =	3
   8011  4f71		       00 04	   interrupted =	4
   8012  4f71		       00 05	   retroputer =	5
   8013  4f71		       00 06	   whimsey    =	6
   8014  4f71		       00 07	   tiny       =	7
   8015  4f71		       00 08	   hex	      =	8
   8016  4f71
   8017  4f71				  -	      ifconst	font
   8018  4f71				  -	      if	font == hex
   8019  4f71				  -	      ORG	. - 48
   8020  4f71				  -	      endif
   8021  4f71					      endif
   8022  4f71
   8023  4f71				   scoretable
   8024  4f71
   8025  4f71				  -	      ifconst	font
   8026  4f71				  -	      if	font == .21stcentury
   8027  4f71				  -	      include	"score_graphics.asm.21stcentury"
   8028  4f71				  -	      endif
   8029  4f71				  -	      if	font == alarmclock
   8030  4f71				  -	      include	"score_graphics.asm.alarmclock"
   8031  4f71				  -	      endif
   8032  4f71				  -	      if	font == handwritten
   8033  4f71				  -	      include	"score_graphics.asm.handwritten"
   8034  4f71				  -	      endif
   8035  4f71				  -	      if	font == interrupted
   8036  4f71				  -	      include	"score_graphics.asm.interrupted"
   8037  4f71				  -	      endif
   8038  4f71				  -	      if	font == retroputer
   8039  4f71				  -	      include	"score_graphics.asm.retroputer"
   8040  4f71				  -	      endif
   8041  4f71				  -	      if	font == whimsey
   8042  4f71				  -	      include	"score_graphics.asm.whimsey"
   8043  4f71				  -	      endif
   8044  4f71				  -	      if	font == tiny
   8045  4f71				  -	      include	"score_graphics.asm.tiny"
   8046  4f71				  -	      endif
   8047  4f71				  -	      if	font == hex
   8048  4f71				  -	      include	"score_graphics.asm.hex"
   8049  4f71				  -	      endif
   8050  4f71					      else		; default font
   8051  4f71
   8052  4f71		       3c		      .byte.b	%00111100
   8053  4f72		       66		      .byte.b	%01100110
   8054  4f73		       66		      .byte.b	%01100110
   8055  4f74		       66		      .byte.b	%01100110
   8056  4f75		       66		      .byte.b	%01100110
   8057  4f76		       66		      .byte.b	%01100110
   8058  4f77		       66		      .byte.b	%01100110
   8059  4f78		       3c		      .byte.b	%00111100
   8060  4f79
   8061  4f79		       7e		      .byte.b	%01111110
   8062  4f7a		       18		      .byte.b	%00011000
   8063  4f7b		       18		      .byte.b	%00011000
   8064  4f7c		       18		      .byte.b	%00011000
   8065  4f7d		       18		      .byte.b	%00011000
   8066  4f7e		       38		      .byte.b	%00111000
   8067  4f7f		       18		      .byte.b	%00011000
   8068  4f80		       08		      .byte.b	%00001000
   8069  4f81
   8070  4f81		       7e		      .byte.b	%01111110
   8071  4f82		       60		      .byte.b	%01100000
   8072  4f83		       60		      .byte.b	%01100000
   8073  4f84		       3c		      .byte.b	%00111100
   8074  4f85		       06		      .byte.b	%00000110
   8075  4f86		       06		      .byte.b	%00000110
   8076  4f87		       46		      .byte.b	%01000110
   8077  4f88		       3c		      .byte.b	%00111100
   8078  4f89
   8079  4f89		       3c		      .byte.b	%00111100
   8080  4f8a		       46		      .byte.b	%01000110
   8081  4f8b		       06		      .byte.b	%00000110
   8082  4f8c		       06		      .byte.b	%00000110
   8083  4f8d		       1c		      .byte.b	%00011100
   8084  4f8e		       06		      .byte.b	%00000110
   8085  4f8f		       46		      .byte.b	%01000110
   8086  4f90		       3c		      .byte.b	%00111100
   8087  4f91
   8088  4f91		       0c		      .byte.b	%00001100
   8089  4f92		       0c		      .byte.b	%00001100
   8090  4f93		       7e		      .byte.b	%01111110
   8091  4f94		       4c		      .byte.b	%01001100
   8092  4f95		       4c		      .byte.b	%01001100
   8093  4f96		       2c		      .byte.b	%00101100
   8094  4f97		       1c		      .byte.b	%00011100
   8095  4f98		       0c		      .byte.b	%00001100
   8096  4f99
   8097  4f99		       3c		      .byte.b	%00111100
   8098  4f9a		       46		      .byte.b	%01000110
   8099  4f9b		       06		      .byte.b	%00000110
   8100  4f9c		       06		      .byte.b	%00000110
   8101  4f9d		       3c		      .byte.b	%00111100
   8102  4f9e		       60		      .byte.b	%01100000
   8103  4f9f		       60		      .byte.b	%01100000
   8104  4fa0		       7e		      .byte.b	%01111110
   8105  4fa1
   8106  4fa1		       3c		      .byte.b	%00111100
   8107  4fa2		       66		      .byte.b	%01100110
   8108  4fa3		       66		      .byte.b	%01100110
   8109  4fa4		       66		      .byte.b	%01100110
   8110  4fa5		       7c		      .byte.b	%01111100
   8111  4fa6		       60		      .byte.b	%01100000
   8112  4fa7		       62		      .byte.b	%01100010
   8113  4fa8		       3c		      .byte.b	%00111100
   8114  4fa9
   8115  4fa9		       30		      .byte.b	%00110000
   8116  4faa		       30		      .byte.b	%00110000
   8117  4fab		       30		      .byte.b	%00110000
   8118  4fac		       18		      .byte.b	%00011000
   8119  4fad		       0c		      .byte.b	%00001100
   8120  4fae		       06		      .byte.b	%00000110
   8121  4faf		       42		      .byte.b	%01000010
   8122  4fb0		       3e		      .byte.b	%00111110
   8123  4fb1
   8124  4fb1		       3c		      .byte.b	%00111100
   8125  4fb2		       66		      .byte.b	%01100110
   8126  4fb3		       66		      .byte.b	%01100110
   8127  4fb4		       66		      .byte.b	%01100110
   8128  4fb5		       3c		      .byte.b	%00111100
   8129  4fb6		       66		      .byte.b	%01100110
   8130  4fb7		       66		      .byte.b	%01100110
   8131  4fb8		       3c		      .byte.b	%00111100
   8132  4fb9
   8133  4fb9		       3c		      .byte.b	%00111100
   8134  4fba		       46		      .byte.b	%01000110
   8135  4fbb		       06		      .byte.b	%00000110
   8136  4fbc		       3e		      .byte.b	%00111110
   8137  4fbd		       66		      .byte.b	%01100110
   8138  4fbe		       66		      .byte.b	%01100110
   8139  4fbf		       66		      .byte.b	%01100110
   8140  4fc0		       3c		      .byte.b	%00111100
   8141  4fc1
   8142  4fc1					      ifnconst	DPC_kernel_options
   8143  4fc1
   8144  4fc1		       00		      .byte.b	%00000000
   8145  4fc2		       00		      .byte.b	%00000000
   8146  4fc3		       00		      .byte.b	%00000000
   8147  4fc4		       00		      .byte.b	%00000000
   8148  4fc5		       00		      .byte.b	%00000000
   8149  4fc6		       00		      .byte.b	%00000000
   8150  4fc7		       00		      .byte.b	%00000000
   8151  4fc8		       00		      .byte.b	%00000000
   8152  4fc9
   8153  4fc9					      endif
   8154  4fc9
   8155  4fc9					      endif
   8156  4fc9
   8157  4fc9				  -	      ifconst	ROM2k
   8158  4fc9				  -	      ifconst	PlusROM_functions
   8159  4fc9				  -	      ORG	$F7F0
   8160  4fc9				  -	      .byte	0	; WriteToBuffer
   8161  4fc9				  -	      .byte	0	; WriteSendBuffer
   8162  4fc9				  -	      .byte	0	; ReceiveBuffer
   8163  4fc9				  -	      .byte	$ff	; ReceiveBufferSize (none zero for detection of PlusROM support)
   8164  4fc9				  -	      ORG	$F7FA
   8165  4fc9				  -	      else
   8166  4fc9				  -	      ORG	$F7FC
   8167  4fc9				  -	      endif
   8168  4fc9					      else
   8169  4fc9					      ifconst	bankswitch
   8170  4fc9				  -	      if	bankswitch == 8
   8171  4fc9				  -	      ORG	$2FF4-bscode_length
   8172  4fc9				  -	      RORG	$FFF4-bscode_length
   8173  4fc9					      endif
   8174  4fc9					      if	bankswitch == 16
   8175  4fd1					      ORG	$4FF4-bscode_length
   8176  4fd1					      RORG	$FFF4-bscode_length
   8177  4fd1					      endif
   8178  4fd1				  -	      if	bankswitch == 32
   8179  4fd1				  -	      ORG	$8FF4-bscode_length
   8180  4fd1				  -	      RORG	$FFF4-bscode_length
   8181  4fd1					      endif
   8182  4fd1				  -	      if	bankswitch == 64
   8183  4fd1				  -	      ORG	$10FE0-bscode_length
   8184  4fd1				  -	      RORG	$1FFE0-bscode_length
   8185  4fd1					      endif
   8186  4fd1				  -	      else
   8187  4fd1				  -	      ifconst	PlusROM_functions
   8188  4fd1				  -	      ORG	$FFF0
   8189  4fd1				  -	      .byte	0	; WriteToBuffer
   8190  4fd1				  -	      .byte	0	; WriteSendBuffer
   8191  4fd1				  -	      .byte	0	; ReceiveBuffer
   8192  4fd1				  -	      .byte	$ff	; ReceiveBufferSize (none zero for detection of PlusROM support)
   8193  4fd1				  -	      ORG	$FFFA
   8194  4fd1				  -	      else
   8195  4fd1				  -	      ORG	$FFFC
   8196  4fd1				  -	      endif
   8197  4fd1					      endif
   8198  4fd1					      endif
   8199  4fd1							; Provided under the CC0 license. See the included LICENSE.txt for details.
   8200  4fd1
   8201  4fd1							; every bank has this stuff at the same place
   8202  4fd1							; this code can switch to/from any bank at any entry point
   8203  4fd1							; and can preserve register values
   8204  4fd1							; note: lines not starting with a space are not placed in all banks
   8205  4fd1							;
   8206  4fd1							; line below tells the compiler how long this is - do not remove
   8207  4fd1							;size=35
   8208  4fd1
   8209  4fd1				   begin_bscode
   8210  4fd1		       a2 ff		      ldx	#$ff
   8211  4fd3				  -	      ifconst	FASTFETCH	; using DPC+
   8212  4fd3				  -	      stx	FASTFETCH
   8213  4fd3					      endif
   8214  4fd3		       9a		      txs
   8215  4fd4				  -	      if	bankswitch == 64
   8216  4fd4				  -	      lda	#(((>(start-1)) & $0F) | $F0)
   8217  4fd4					      else
   8218  4fd4		       a9 f2		      lda	#>(start-1)
   8219  4fd6					      endif
   8220  4fd6		       48		      pha
   8221  4fd7		       a9 b0		      lda	#<(start-1)
   8222  4fd9		       48		      pha
   8223  4fda
   8224  4fda				   BS_return
   8225  4fda		       48		      pha
   8226  4fdb		       8a		      txa
   8227  4fdc		       48		      pha
   8228  4fdd		       ba		      tsx
   8229  4fde
   8230  4fde					      if	bankswitch != 64
   8231  4fde		       b5 04		      lda	4,x	; get high byte of return address
   8232  4fe0
   8233  4fe0		       2a		      rol
   8234  4fe1		       2a		      rol
   8235  4fe2		       2a		      rol
   8236  4fe3		       2a		      rol
   8237  4fe4		       29 03		      and	#bs_mask	;1 3 or 7 for F8/F6/F4
   8238  4fe6		       aa		      tax
   8239  4fe7		       e8		      inx
   8240  4fe8				  -	      else
   8241  4fe8				  -	      lda	4,x	; get high byte of return address
   8242  4fe8				  -	      tay
   8243  4fe8				  -	      ora	#$10	; change our bank nibble into a valid rom mirror
   8244  4fe8				  -	      sta	4,x
   8245  4fe8				  -	      tya
   8246  4fe8				  -	      lsr
   8247  4fe8				  -	      lsr
   8248  4fe8				  -	      lsr
   8249  4fe8				  -	      lsr
   8250  4fe8				  -	      tax
   8251  4fe8				  -	      inx
   8252  4fe8					      endif
   8253  4fe8
   8254  4fe8				   BS_jsr
   8255  4fe8		       bd f5 1f 	      lda	bankswitch_hotspot-1,x
   8256  4feb		       68		      pla
   8257  4fec		       aa		      tax
   8258  4fed		       68		      pla
   8259  4fee		       60		      rts
   8260  4fef				  -	      if	((* & $1FFF) > ((bankswitch_hotspot & $1FFF) - 1))
   8261  4fef				  -	      echo	"WARNING: size parameter in banksw.asm too small - the program probably will not work."
   8262  4fef				  -	      echo	"Change to",[(*-begin_bscode+1)&$FF]d,"and try again."
   8263  4fef					      endif
   8264  4fef							; Provided under the CC0 license. See the included LICENSE.txt for details.
   8265  4fef
   8266  4fef					      ifconst	bankswitch
   8267  4fef				  -	      if	bankswitch == 8
   8268  4fef				  -	      ifconst	PlusROM_functions
   8269  4fef				  -	      ORG	$2FF0
   8270  4fef				  -	      RORG	$FFF0
   8271  4fef				  -	      .byte	0	; WriteToBuffer
   8272  4fef				  -	      .byte	0	; WriteSendBuffer
   8273  4fef				  -	      .byte	0	; ReceiveBuffer
   8274  4fef				  -	      .byte	$ff	; ReceiveBufferSize (none zero for detection of PlusROM support)
   8275  4fef				  -	      ORG	$2FFA
   8276  4fef				  -	      RORG	$FFFA
   8277  4fef				  -	      .word	(PlusROM_API)
   8278  4fef				  -	      else
   8279  4fef				  -	      ORG	$2FFC
   8280  4fef				  -	      RORG	$FFFC
   8281  4fef				  -	      endif
   8282  4fef					      endif
   8283  4fef					      if	bankswitch == 16
   8284  4fef					      ifconst	PlusROM_functions
   8285  4ff0					      ORG	$4FF0
   8286  4ff0					      RORG	$FFF0
   8287  4ff0		       00		      .byte.b	0	; WriteToBuffer
   8288  4ff1		       00		      .byte.b	0	; WriteSendBuffer
   8289  4ff2		       00		      .byte.b	0	; ReceiveBuffer
   8290  4ff3		       ff		      .byte.b	$ff	; ReceiveBufferSize (none zero for detection of PlusROM support)
   8291  4ffa					      ORG	$4FFA
   8292  4ffa					      RORG	$FFFA
   8293  4ffa		       fe 4b		      .word.w	(PlusROM_API)
   8294  4ffc				  -	      else
   8295  4ffc				  -	      ORG	$4FFC
   8296  4ffc				  -	      RORG	$FFFC
   8297  4ffc					      endif
   8298  4ffc					      endif
   8299  4ffc				  -	      if	bankswitch == 32
   8300  4ffc				  -	      ifconst	PlusROM_functions
   8301  4ffc				  -	      ORG	$8FF0
   8302  4ffc				  -	      RORG	$FFF0
   8303  4ffc				  -	      .byte	0	; WriteToBuffer
   8304  4ffc				  -	      .byte	0	; WriteSendBuffer
   8305  4ffc				  -	      .byte	0	; ReceiveBuffer
   8306  4ffc				  -	      .byte	$ff	; ReceiveBufferSize (none zero for detection of PlusROM support)
   8307  4ffc				  -	      ORG	$8FFA
   8308  4ffc				  -	      RORG	$FFFA
   8309  4ffc				  -	      .word	(PlusROM_API)
   8310  4ffc				  -	      else
   8311  4ffc				  -	      ORG	$8FFC
   8312  4ffc				  -	      RORG	$FFFC
   8313  4ffc				  -	      endif
   8314  4ffc					      endif
   8315  4ffc				  -	      if	bankswitch == 64
   8316  4ffc				  -	      ORG	$10FF0
   8317  4ffc				  -	      RORG	$1FFF0
   8318  4ffc				  -	      lda	$ffe0	; we use wasted space to assist stella with EF format auto-detection
   8319  4ffc				  -	      ORG	$10FF8
   8320  4ffc				  -	      RORG	$1FFF8
   8321  4ffc				  -	      ifconst	superchip
   8322  4ffc				  -	      .byte	"E","F","S","C"
   8323  4ffc				  -	      else
   8324  4ffc				  -	      .byte	"E","F","E","F"
   8325  4ffc				  -	      endif
   8326  4ffc				  -	      ORG	$10FFC
   8327  4ffc				  -	      RORG	$1FFFC
   8328  4ffc					      endif
   8329  4ffc				  -	      else
   8330  4ffc				  -	      ifconst	ROM2k
   8331  4ffc				  -	      ifconst	PlusROM_functions
   8332  4ffc				  -	      ORG	$F7FA
   8333  4ffc				  -	      .word	(PlusROM_API)
   8334  4ffc				  -	      else
   8335  4ffc				  -	      ORG	$F7FC
   8336  4ffc				  -	      endif
   8337  4ffc				  -	      else
   8338  4ffc				  -	      ifconst	PlusROM_functions
   8339  4ffc				  -	      ORG	$FFFA
   8340  4ffc				  -	      .word	(PlusROM_API)
   8341  4ffc				  -	      else
   8342  4ffc				  -	      ORG	$FFFC
   8343  4ffc				  -	      endif
   8344  4ffc				  -	      endif
   8345  4ffc					      endif
   8346  4ffc		       b1 f2		      .word.w	(start & $ffff)
   8347  4ffe		       b1 f2		      .word.w	(start & $ffff)
