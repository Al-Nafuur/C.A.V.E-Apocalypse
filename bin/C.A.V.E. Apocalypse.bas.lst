------- FILE d:\Firmaplus\Firmaplus_intern\Atari\PlusROM\Projekte-batariBasic\CaveApocalypse\C.A.V.E. Apocalypse.bas.asm LEVEL 1 PASS 3
      1  5000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  5000 ????
      3  5000 ????				      processor	6502
------- FILE vcs.h LEVEL 2 PASS 3
      0  5000 ????				      include	"vcs.h"
      1  5000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  5000 ????
      3  5000 ????						; VCS.H
      4  5000 ????						; Version 1.05, 13/November/2003
      5  5000 ????
      6  5000 ????	       00 69	   VERSION_VCS =	105
      7  5000 ????
      8  5000 ????						; THIS IS A PRELIMINARY RELEASE OF *THE* "STANDARD" VCS.H
      9  5000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
     10  5000 ????						; PLEASE DO *NOT* REDISTRIBUTE THIS FILE!
     11  5000 ????						;
     12  5000 ????						; This file defines hardware registers and memory mapping for the
     13  5000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     14  5000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     15  5000 ????						; available at at http://www.atari2600.org/dasm
     16  5000 ????						;
     17  5000 ????						; Many thanks to the original author(s) of this file, and to everyone who has
     18  5000 ????						; contributed to understanding the Atari 2600.  If you take issue with the
     19  5000 ????						; contents, or naming of registers, please write to me (atari2600@taswegian.com)
     20  5000 ????						; with your views.  Please contribute, if you think you can improve this
     21  5000 ????						; file!
     22  5000 ????						;
     23  5000 ????						; Latest Revisions...
     24  5000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     25  5000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     26  5000 ????						;			    This will allow conditional code to verify VCS.H being
     27  5000 ????						;			    used for code assembly.
     28  5000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     29  5000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     30  5000 ????						;			 mirrored reading/writing differences.	This is more a 
     31  5000 ????						;			 readability issue, and binary compatibility with disassembled
     32  5000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     33  5000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     34  5000 ????						;			 which was broken by the use of segments in this file, as
     35  5000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     36  5000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     37  5000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     38  5000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     39  5000 ????						;						   it is safe to leave it undefined, and the base address will
     40  5000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     41  5000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     42  5000 ????						;			  - register definitions are now generated through assignment
     43  5000 ????						;			    in uninitialised segments.	This allows a changeable base
     44  5000 ????						;			    address architecture.
     45  5000 ????						; 1.0	22/MAR/2003		Initial release
     46  5000 ????
     47  5000 ????
     48  5000 ????						;-------------------------------------------------------------------------------
     49  5000 ????
     50  5000 ????						; TIA_BASE_ADDRESS
     51  5000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     52  5000 ????						; Normally 0, the base address should (externally, before including this file)
     53  5000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     54  5000 ????						; The reason is that this bankswitching scheme treats any access to locations
     55  5000 ????						; < $40 as a bankswitch.
     56  5000 ????
     57  5000 ????			  -	      IFNCONST	TIA_BASE_ADDRESS
     58  5000 ????			  -TIA_BASE_ADDRESS =	0
     59  5000 ????				      ENDIF
     60  5000 ????
     61  5000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     62  5000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     63  5000 ????						; *OR* by declaring the label before including this file, eg:
     64  5000 ????						; TIA_BASE_ADDRESS = $40
     65  5000 ????						;   include "vcs.h"
     66  5000 ????
     67  5000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     68  5000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     69  5000 ????						; for the mirrored ROM hardware registers.
     70  5000 ????
     71  5000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     72  5000 ????						; using the -D command-line switch, as required.  If the addresses are not defined, 
     73  5000 ????						; they defaut to the TIA_BASE_ADDRESS.
     74  5000 ????
     75  5000 ????			  -	      IFNCONST	TIA_BASE_READ_ADDRESS
     76  5000 ????			  -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     77  5000 ????				      ENDIF
     78  5000 ????
     79  5000 ????			  -	      IFNCONST	TIA_BASE_WRITE_ADDRESS
     80  5000 ????			  -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     81  5000 ????				      ENDIF
     82  5000 ????
     83  5000 ????						;-------------------------------------------------------------------------------
     84  5000 ????
     85 U002d ????				      SEG.U	TIA_REGISTERS_WRITE
     86 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     87 U0000
     88 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     89 U0000
     90 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     91 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     92 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     93 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     94 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     95 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     96 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     97 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     98 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     99 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
    100 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
    101 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    102 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    103 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    104 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    105 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    106 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    107 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    108 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    109 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    110 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    111 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    112 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    113 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    114 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    115 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    116 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    117 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    118 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    119 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    120 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    121 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    122 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    123 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    124 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    125 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    126 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    127 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    128 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    129 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    130 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    131 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    132 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    133 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    134 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    135 U002d
    136 U002d							;-------------------------------------------------------------------------------
    137 U002d
    138 U000e ????				      SEG.U	TIA_REGISTERS_READ
    139 U0000					      ORG	TIA_BASE_READ_ADDRESS
    140 U0000
    141 U0000							;											bit 7	 bit 6
    142 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    143 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    144 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    145 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    146 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    147 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    148 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    149 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    150 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    151 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    152 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    153 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    154 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    155 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    156 U000e
    157 U000e							;-------------------------------------------------------------------------------
    158 U000e
    159 U0298 ????				      SEG.U	RIOT
    160 U0280					      ORG	$280
    161 U0280
    162 U0280							; RIOT MEMORY MAP
    163 U0280
    164 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    165 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    166 U0281
    167 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    168 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    169 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    170 U0284		       00	   INTIM      ds	1	; $284		Timer output
    171 U0285
    172 U0285		       00	   TIMINT     ds	1	; $285
    173 U0286
    174 U0286							; Unused/undefined registers ($285-$294)
    175 U0286
    176 U0286		       00		      ds	1	; $286
    177 U0287		       00		      ds	1	; $287
    178 U0288		       00		      ds	1	; $288
    179 U0289		       00		      ds	1	; $289
    180 U028a		       00		      ds	1	; $28A
    181 U028b		       00		      ds	1	; $28B
    182 U028c		       00		      ds	1	; $28C
    183 U028d		       00		      ds	1	; $28D
    184 U028e		       00		      ds	1	; $28E
    185 U028f		       00		      ds	1	; $28F
    186 U0290		       00		      ds	1	; $290
    187 U0291		       00		      ds	1	; $291
    188 U0292		       00		      ds	1	; $292
    189 U0293		       00		      ds	1	; $293
    190 U0294
    191 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    192 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    193 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    194 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    195 U0298
    196 U0298							;-------------------------------------------------------------------------------
    197 U0298							; The following required for back-compatibility with code which does not use
    198 U0298							; segments.
    199 U0298
    200  5000 ????				      SEG
    201  5000 ????
    202  5000 ????						; EOF
------- FILE d:\Firmaplus\Firmaplus_intern\Atari\PlusROM\Projekte-batariBasic\CaveApocalypse\C.A.V.E. Apocalypse.bas.asm
------- FILE macro.h LEVEL 2 PASS 3
      0  5000 ????				      include	"macro.h"
      1  5000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  5000 ????
      3  5000 ????						; MACRO.H
      4  5000 ????						; Version 1.05, 13/NOVEMBER/2003
      5  5000 ????
      6  5000 ????	       00 69	   VERSION_MACRO =	105
      7  5000 ????
      8  5000 ????						;
      9  5000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
     10  5000 ????						; PLEASE DO *NOT* REDISTRIBUTE MODIFIED VERSIONS OF THIS FILE!
     11  5000 ????						;
     12  5000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     13  5000 ????						; It is distributed as a companion machine-specific support package
     14  5000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     15  5000 ????						; available at at http://www.atari2600.org/dasm
     16  5000 ????						;
     17  5000 ????						; Many thanks to the people who have contributed.  If you take issue with the
     18  5000 ????						; contents, or would like to add something, please write to me
     19  5000 ????						; (atari2600@taswegian.com) with your contribution.
     20  5000 ????						;
     21  5000 ????						; Latest Revisions...
     22  5000 ????						;
     23  5000 ????						; 1.05  14/NOV/2003	  - Added VERSION_MACRO equate (which will reflect 100x version #)
     24  5000 ????						;			    This will allow conditional code to verify MACRO.H being
     25  5000 ????						;			    used for code assembly.
     26  5000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     27  5000 ????						;
     28  5000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     29  5000 ????						;
     30  5000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     31  5000 ????						;			   (standardised macro for vertical synch code)
     32  5000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added. 
     33  5000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     34  5000 ????						; 1.0	22/MAR/2003		Initial release
     35  5000 ????
     36  5000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage, 
     37  5000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     38  5000 ????						;   If you do not allow illegal opcode usage, you must include this file 
     39  5000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     40  5000 ????						;   registers and require them to be defined first).
     41  5000 ????
     42  5000 ????						; Available macros...
     43  5000 ????						;   SLEEP n		 - sleep for n cycles
     44  5000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     45  5000 ????						;   CLEAN_START	 - set machine to known state on startup
     46  5000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     47  5000 ????
     48  5000 ????						;-------------------------------------------------------------------------------
     49  5000 ????						; SLEEP duration
     50  5000 ????						; Original author: Thomas Jentzsch
     51  5000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     52  5000 ????						; useful for code where precise timing is required.
     53  5000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     54  5000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     55  5000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     56  5000 ????
     57  5000 ????				      MAC	sleep
     58  5000 ????			   .CYCLES    SET	{1}
     59  5000 ????
     60  5000 ????				      IF	.CYCLES < 2
     61  5000 ????				      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     62  5000 ????				      ERR
     63  5000 ????				      ENDIF
     64  5000 ????
     65  5000 ????				      IF	.CYCLES & 1
     66  5000 ????				      IFNCONST	NO_ILLEGAL_OPCODES
     67  5000 ????				      nop	0
     68  5000 ????				      ELSE
     69  5000 ????				      bit	VSYNC
     70  5000 ????				      ENDIF
     71  5000 ????			   .CYCLES    SET	.CYCLES - 3
     72  5000 ????				      ENDIF
     73  5000 ????
     74  5000 ????				      REPEAT	.CYCLES / 2
     75  5000 ????				      nop
     76  5000 ????				      REPEND
     77  5000 ????				      ENDM		;usage: SLEEP n (n>1)
     78  5000 ????
     79  5000 ????						;-------------------------------------------------------------------------------
     80  5000 ????						; VERTICAL_SYNC
     81  5000 ????						; Original author: Manuel Polik
     82  5000 ????						; Inserts the code required for a proper 3 scannline 
     83  5000 ????						; vertical sync sequence
     84  5000 ????						;
     85  5000 ????						; Note: Alters the accumulator
     86  5000 ????						;
     87  5000 ????						; IN:
     88  5000 ????						; OUT: A = 1
     89  5000 ????
     90  5000 ????				      MAC	vertical_sync
     91  5000 ????				      LDA	#$02	; A = VSYNC enable
     92  5000 ????				      STA	WSYNC	; Finish current line
     93  5000 ????				      STA	VSYNC	; Start vertical sync
     94  5000 ????				      STA	WSYNC	; 1st line vertical sync
     95  5000 ????				      STA	WSYNC	; 2nd line vertical sync
     96  5000 ????				      LSR		; A = VSYNC disable
     97  5000 ????				      STA	WSYNC	; 3rd line vertical sync
     98  5000 ????				      STA	VSYNC	; Stop vertical sync
     99  5000 ????				      ENDM
    100  5000 ????
    101  5000 ????						;-------------------------------------------------------------------------------
    102  5000 ????						; CLEAN_START
    103  5000 ????						; Original author: Andrew Davie
    104  5000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
    105  5000 ????						; Sets stack pointer to $FF, and all registers to 0
    106  5000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    107  5000 ????						; Use as very first section of code on boot (ie: at reset)
    108  5000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    109  5000 ????
    110  5000 ????				      MAC	clean_start
    111  5000 ????				      sei
    112  5000 ????				      cld
    113  5000 ????
    114  5000 ????				      ldx	#0
    115  5000 ????				      txa
    116  5000 ????				      tay
    117  5000 ????			   .CLEAR_STACK dex
    118  5000 ????				      txs
    119  5000 ????				      pha
    120  5000 ????				      bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    121  5000 ????
    122  5000 ????				      ENDM
    123  5000 ????
    124  5000 ????						;-------------------------------------------------------
    125  5000 ????						; SET_POINTER
    126  5000 ????						; Original author: Manuel Rotschkar
    127  5000 ????						;
    128  5000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    129  5000 ????						;
    130  5000 ????						; Usage: SET_POINTER pointer, address
    131  5000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    132  5000 ????						;
    133  5000 ????						; Note: Alters the accumulator, NZ flags
    134  5000 ????						; IN 1: 2 byte RAM location reserved for pointer
    135  5000 ????						; IN 2: absolute address
    136  5000 ????
    137  5000 ????				      MAC	set_pointer
    138  5000 ????			   .POINTER   SET	{1}
    139  5000 ????			   .ADDRESS   SET	{2}
    140  5000 ????
    141  5000 ????				      LDA	#<.ADDRESS	; Get Lowbyte of Address
    142  5000 ????				      STA	.POINTER	; Store in pointer
    143  5000 ????				      LDA	#>.ADDRESS	; Get Hibyte of Address
    144  5000 ????				      STA	.POINTER+1	; Store in pointer+1
    145  5000 ????
    146  5000 ????				      ENDM
    147  5000 ????
    148  5000 ????						; EOF
------- FILE d:\Firmaplus\Firmaplus_intern\Atari\PlusROM\Projekte-batariBasic\CaveApocalypse\C.A.V.E. Apocalypse.bas.asm
------- FILE 2600basic.h LEVEL 2 PASS 3
      0  5000 ????				      include	"2600basic.h"
      1  5000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  5000 ????
      3  5000 ????				      processor	6502
------- FILE vcs.h LEVEL 3 PASS 3
      0  5000 ????				      include	"vcs.h"
      1  5000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  5000 ????
      3  5000 ????						; VCS.H
      4  5000 ????						; Version 1.05, 13/November/2003
      5  5000 ????
      6  5000 ????	       00 69	   VERSION_VCS =	105
      7  5000 ????
      8  5000 ????						; THIS IS A PRELIMINARY RELEASE OF *THE* "STANDARD" VCS.H
      9  5000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
     10  5000 ????						; PLEASE DO *NOT* REDISTRIBUTE THIS FILE!
     11  5000 ????						;
     12  5000 ????						; This file defines hardware registers and memory mapping for the
     13  5000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     14  5000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     15  5000 ????						; available at at http://www.atari2600.org/dasm
     16  5000 ????						;
     17  5000 ????						; Many thanks to the original author(s) of this file, and to everyone who has
     18  5000 ????						; contributed to understanding the Atari 2600.  If you take issue with the
     19  5000 ????						; contents, or naming of registers, please write to me (atari2600@taswegian.com)
     20  5000 ????						; with your views.  Please contribute, if you think you can improve this
     21  5000 ????						; file!
     22  5000 ????						;
     23  5000 ????						; Latest Revisions...
     24  5000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     25  5000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     26  5000 ????						;			    This will allow conditional code to verify VCS.H being
     27  5000 ????						;			    used for code assembly.
     28  5000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     29  5000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     30  5000 ????						;			 mirrored reading/writing differences.	This is more a 
     31  5000 ????						;			 readability issue, and binary compatibility with disassembled
     32  5000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     33  5000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     34  5000 ????						;			 which was broken by the use of segments in this file, as
     35  5000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     36  5000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     37  5000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     38  5000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     39  5000 ????						;						   it is safe to leave it undefined, and the base address will
     40  5000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     41  5000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     42  5000 ????						;			  - register definitions are now generated through assignment
     43  5000 ????						;			    in uninitialised segments.	This allows a changeable base
     44  5000 ????						;			    address architecture.
     45  5000 ????						; 1.0	22/MAR/2003		Initial release
     46  5000 ????
     47  5000 ????
     48  5000 ????						;-------------------------------------------------------------------------------
     49  5000 ????
     50  5000 ????						; TIA_BASE_ADDRESS
     51  5000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     52  5000 ????						; Normally 0, the base address should (externally, before including this file)
     53  5000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     54  5000 ????						; The reason is that this bankswitching scheme treats any access to locations
     55  5000 ????						; < $40 as a bankswitch.
     56  5000 ????
     57  5000 ????			  -	      IFNCONST	TIA_BASE_ADDRESS
     58  5000 ????			  -TIA_BASE_ADDRESS =	0
     59  5000 ????				      ENDIF
     60  5000 ????
     61  5000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     62  5000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     63  5000 ????						; *OR* by declaring the label before including this file, eg:
     64  5000 ????						; TIA_BASE_ADDRESS = $40
     65  5000 ????						;   include "vcs.h"
     66  5000 ????
     67  5000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     68  5000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     69  5000 ????						; for the mirrored ROM hardware registers.
     70  5000 ????
     71  5000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     72  5000 ????						; using the -D command-line switch, as required.  If the addresses are not defined, 
     73  5000 ????						; they defaut to the TIA_BASE_ADDRESS.
     74  5000 ????
     75  5000 ????			  -	      IFNCONST	TIA_BASE_READ_ADDRESS
     76  5000 ????			  -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     77  5000 ????				      ENDIF
     78  5000 ????
     79  5000 ????			  -	      IFNCONST	TIA_BASE_WRITE_ADDRESS
     80  5000 ????			  -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     81  5000 ????				      ENDIF
     82  5000 ????
     83  5000 ????						;-------------------------------------------------------------------------------
     84  5000 ????
     85 U002d					      SEG.U	TIA_REGISTERS_WRITE
     86 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     87 U0000
     88 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     89 U0000
     90 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     91 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     92 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     93 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     94 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     95 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     96 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     97 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     98 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     99 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
    100 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
    101 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    102 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    103 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    104 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    105 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    106 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    107 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    108 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    109 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    110 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    111 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    112 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    113 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    114 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    115 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    116 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    117 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    118 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    119 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    120 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    121 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    122 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    123 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    124 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    125 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    126 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    127 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    128 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    129 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    130 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    131 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    132 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    133 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    134 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    135 U002d
    136 U002d							;-------------------------------------------------------------------------------
    137 U002d
    138 U000e					      SEG.U	TIA_REGISTERS_READ
    139 U0000					      ORG	TIA_BASE_READ_ADDRESS
    140 U0000
    141 U0000							;											bit 7	 bit 6
    142 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    143 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    144 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    145 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    146 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    147 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    148 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    149 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    150 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    151 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    152 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    153 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    154 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    155 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    156 U000e
    157 U000e							;-------------------------------------------------------------------------------
    158 U000e
    159 U0298					      SEG.U	RIOT
    160 U0280					      ORG	$280
    161 U0280
    162 U0280							; RIOT MEMORY MAP
    163 U0280
    164 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    165 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    166 U0281
    167 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    168 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    169 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    170 U0284		       00	   INTIM      ds	1	; $284		Timer output
    171 U0285
    172 U0285		       00	   TIMINT     ds	1	; $285
    173 U0286
    174 U0286							; Unused/undefined registers ($285-$294)
    175 U0286
    176 U0286		       00		      ds	1	; $286
    177 U0287		       00		      ds	1	; $287
    178 U0288		       00		      ds	1	; $288
    179 U0289		       00		      ds	1	; $289
    180 U028a		       00		      ds	1	; $28A
    181 U028b		       00		      ds	1	; $28B
    182 U028c		       00		      ds	1	; $28C
    183 U028d		       00		      ds	1	; $28D
    184 U028e		       00		      ds	1	; $28E
    185 U028f		       00		      ds	1	; $28F
    186 U0290		       00		      ds	1	; $290
    187 U0291		       00		      ds	1	; $291
    188 U0292		       00		      ds	1	; $292
    189 U0293		       00		      ds	1	; $293
    190 U0294
    191 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    192 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    193 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    194 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    195 U0298
    196 U0298							;-------------------------------------------------------------------------------
    197 U0298							; The following required for back-compatibility with code which does not use
    198 U0298							; segments.
    199 U0298
    200  5000 ????				      SEG
    201  5000 ????
    202  5000 ????						; EOF
------- FILE 2600basic.h
------- FILE macro.h LEVEL 3 PASS 3
      0  5000 ????				      include	"macro.h"
      1  5000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  5000 ????
      3  5000 ????						; MACRO.H
      4  5000 ????						; Version 1.05, 13/NOVEMBER/2003
      5  5000 ????
      6  5000 ????	       00 69	   VERSION_MACRO =	105
      7  5000 ????
      8  5000 ????						;
      9  5000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
     10  5000 ????						; PLEASE DO *NOT* REDISTRIBUTE MODIFIED VERSIONS OF THIS FILE!
     11  5000 ????						;
     12  5000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     13  5000 ????						; It is distributed as a companion machine-specific support package
     14  5000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     15  5000 ????						; available at at http://www.atari2600.org/dasm
     16  5000 ????						;
     17  5000 ????						; Many thanks to the people who have contributed.  If you take issue with the
     18  5000 ????						; contents, or would like to add something, please write to me
     19  5000 ????						; (atari2600@taswegian.com) with your contribution.
     20  5000 ????						;
     21  5000 ????						; Latest Revisions...
     22  5000 ????						;
     23  5000 ????						; 1.05  14/NOV/2003	  - Added VERSION_MACRO equate (which will reflect 100x version #)
     24  5000 ????						;			    This will allow conditional code to verify MACRO.H being
     25  5000 ????						;			    used for code assembly.
     26  5000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     27  5000 ????						;
     28  5000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     29  5000 ????						;
     30  5000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     31  5000 ????						;			   (standardised macro for vertical synch code)
     32  5000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added. 
     33  5000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     34  5000 ????						; 1.0	22/MAR/2003		Initial release
     35  5000 ????
     36  5000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage, 
     37  5000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     38  5000 ????						;   If you do not allow illegal opcode usage, you must include this file 
     39  5000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     40  5000 ????						;   registers and require them to be defined first).
     41  5000 ????
     42  5000 ????						; Available macros...
     43  5000 ????						;   SLEEP n		 - sleep for n cycles
     44  5000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     45  5000 ????						;   CLEAN_START	 - set machine to known state on startup
     46  5000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     47  5000 ????
     48  5000 ????						;-------------------------------------------------------------------------------
     49  5000 ????						; SLEEP duration
     50  5000 ????						; Original author: Thomas Jentzsch
     51  5000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     52  5000 ????						; useful for code where precise timing is required.
     53  5000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     54  5000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     55  5000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     56  5000 ????
     57  5000 ????				      MAC	sleep
     58  5000 ????			   .CYCLES    SET	{1}
     59  5000 ????
     60  5000 ????				      IF	.CYCLES < 2
     61  5000 ????				      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     62  5000 ????				      ERR
     63  5000 ????				      ENDIF
     64  5000 ????
     65  5000 ????				      IF	.CYCLES & 1
     66  5000 ????				      IFNCONST	NO_ILLEGAL_OPCODES
     67  5000 ????				      nop	0
     68  5000 ????				      ELSE
     69  5000 ????				      bit	VSYNC
     70  5000 ????				      ENDIF
     71  5000 ????			   .CYCLES    SET	.CYCLES - 3
     72  5000 ????				      ENDIF
     73  5000 ????
     74  5000 ????				      REPEAT	.CYCLES / 2
     75  5000 ????				      nop
     76  5000 ????				      REPEND
     77  5000 ????				      ENDM		;usage: SLEEP n (n>1)
     78  5000 ????
     79  5000 ????						;-------------------------------------------------------------------------------
     80  5000 ????						; VERTICAL_SYNC
     81  5000 ????						; Original author: Manuel Polik
     82  5000 ????						; Inserts the code required for a proper 3 scannline 
     83  5000 ????						; vertical sync sequence
     84  5000 ????						;
     85  5000 ????						; Note: Alters the accumulator
     86  5000 ????						;
     87  5000 ????						; IN:
     88  5000 ????						; OUT: A = 1
     89  5000 ????
     90  5000 ????				      MAC	vertical_sync
     91  5000 ????				      LDA	#$02	; A = VSYNC enable
     92  5000 ????				      STA	WSYNC	; Finish current line
     93  5000 ????				      STA	VSYNC	; Start vertical sync
     94  5000 ????				      STA	WSYNC	; 1st line vertical sync
     95  5000 ????				      STA	WSYNC	; 2nd line vertical sync
     96  5000 ????				      LSR		; A = VSYNC disable
     97  5000 ????				      STA	WSYNC	; 3rd line vertical sync
     98  5000 ????				      STA	VSYNC	; Stop vertical sync
     99  5000 ????				      ENDM
    100  5000 ????
    101  5000 ????						;-------------------------------------------------------------------------------
    102  5000 ????						; CLEAN_START
    103  5000 ????						; Original author: Andrew Davie
    104  5000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
    105  5000 ????						; Sets stack pointer to $FF, and all registers to 0
    106  5000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    107  5000 ????						; Use as very first section of code on boot (ie: at reset)
    108  5000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    109  5000 ????
    110  5000 ????				      MAC	clean_start
    111  5000 ????				      sei
    112  5000 ????				      cld
    113  5000 ????
    114  5000 ????				      ldx	#0
    115  5000 ????				      txa
    116  5000 ????				      tay
    117  5000 ????			   .CLEAR_STACK dex
    118  5000 ????				      txs
    119  5000 ????				      pha
    120  5000 ????				      bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    121  5000 ????
    122  5000 ????				      ENDM
    123  5000 ????
    124  5000 ????						;-------------------------------------------------------
    125  5000 ????						; SET_POINTER
    126  5000 ????						; Original author: Manuel Rotschkar
    127  5000 ????						;
    128  5000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    129  5000 ????						;
    130  5000 ????						; Usage: SET_POINTER pointer, address
    131  5000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    132  5000 ????						;
    133  5000 ????						; Note: Alters the accumulator, NZ flags
    134  5000 ????						; IN 1: 2 byte RAM location reserved for pointer
    135  5000 ????						; IN 2: absolute address
    136  5000 ????
    137  5000 ????				      MAC	set_pointer
    138  5000 ????			   .POINTER   SET	{1}
    139  5000 ????			   .ADDRESS   SET	{2}
    140  5000 ????
    141  5000 ????				      LDA	#<.ADDRESS	; Get Lowbyte of Address
    142  5000 ????				      STA	.POINTER	; Store in pointer
    143  5000 ????				      LDA	#>.ADDRESS	; Get Hibyte of Address
    144  5000 ????				      STA	.POINTER+1	; Store in pointer+1
    145  5000 ????
    146  5000 ????				      ENDM
    147  5000 ????
    148  5000 ????						; EOF
------- FILE 2600basic.h
------- FILE 2600basic_variable_redefs.h LEVEL 3 PASS 3
      0  5000 ????				      include	"2600basic_variable_redefs.h"
      1  5000 ????						; This file contains variable mapping and other information for the current project.
      2  5000 ????
      3  5000 ????	       00 fc	   text_strings_length =	.skipL0562-text_strings
      4  5000 ????
      5  5000 ????	       00 23	   bscode_length =	35
      6  5000 ????	       00 1d	   _SD_Touch_Enemy_length =	.skipL0556-_SD_Touch_Enemy
      7  5000 ????
      8  5000 ????	       00 21	   _SD_Shoot_Enemy_length =	.skipL0555-_SD_Shoot_Enemy
      9  5000 ????
     10  5000 ????	       00 45	   _SD_Shoot_Miss_length =	.skipL0554-_SD_Shoot_Miss
     11  5000 ????
     12  5000 ????	       00 35	   _SD_Shot_Wall_length =	.skipL0553-_SD_Shot_Wall
     13  5000 ????
     14  5000 ????	       f0 6f	   w_extra_wall_startpos_y =	w111
     15  5000 ????
     16  5000 ????	       f0 ef	   r_extra_wall_startpos_y =	r111
     17  5000 ????
     18  5000 ????	       f0 6e	   w_extra_wall_startpos_x =	w110
     19  5000 ????
     20  5000 ????	       f0 ee	   r_extra_wall_startpos_x =	r110
     21  5000 ????
     22  5000 ????	       f0 6d	   w_extra_wall_height =	w109
     23  5000 ????
     24  5000 ????	       f0 ed	   r_extra_wall_height =	r109
     25  5000 ????
     26  5000 ????	       f0 6c	   w_extra_wall_width =	w108
     27  5000 ????
     28  5000 ????	       f0 ec	   r_extra_wall_width =	r108
     29  5000 ????
     30  5000 ????	       f0 6b	   w_extra_wall_type_and_range =	w107
     31  5000 ????
     32  5000 ????	       f0 eb	   r_extra_wall_type_and_range =	r107
     33  5000 ????
     34  5000 ????	       f0 6a	   w_roommate_startpos_y =	w106
     35  5000 ????
     36  5000 ????	       f0 ea	   r_roommate_startpos_y =	r106
     37  5000 ????
     38  5000 ????	       f0 69	   w_roommate_startpos_x =	w105
     39  5000 ????
     40  5000 ????	       f0 e9	   r_roommate_startpos_x =	r105
     41  5000 ????
     42  5000 ????	       f0 68	   w_roommate_type_and_range =	w104
     43  5000 ????
     44  5000 ????	       f0 e8	   r_roommate_type_and_range =	r104
     45  5000 ????
     46  5000 ????	       f0 67	   w_room_color_bottom =	w103
     47  5000 ????
     48  5000 ????	       f0 e7	   r_room_color_bottom =	r103
     49  5000 ????
     50  5000 ????	       f0 63	   w_room_color_middle =	w099
     51  5000 ????
     52  5000 ????	       f0 e3	   r_room_color_middle =	r099
     53  5000 ????
     54  5000 ????	       f0 62	   w_room_color_top =	w098
     55  5000 ????
     56  5000 ????	       f0 e2	   r_room_color_top =	r098
     57  5000 ????
     58  5000 ????	       f0 61	   w_Bit0_room_type_top =	w097
     59  5000 ????
     60  5000 ????	       f0 e1	   r_Bit0_room_type_top =	r097
     61  5000 ????
     62  5000 ????	       f0 61	   w_BitOp_room_type =	w097
     63  5000 ????
     64  5000 ????	       f0 e1	   r_BitOp_room_type =	r097
     65  5000 ????
     66  5000 ????	       f0 60	   w_men_to_rescue_in_this_level =	w096
     67  5000 ????
     68  5000 ????	       f0 e0	   r_men_to_rescue_in_this_level =	r096
     69  5000 ????
     70  5000 ????	       f0 5f	   w_level_bonus_bcd_points =	w095
     71  5000 ????
     72  5000 ????	       f0 df	   r_level_bonus_bcd_points =	r095
     73  5000 ????
     74  5000 ????	       f0 5f	   w_room_definition_start =	w095
     75  5000 ????
     76  5000 ????	       00 b1	   bonus_bcd_counter =	var13
     77  5000 ????
     78  5000 ????	       00 b0	   TextIndex  =	var12
     79  5000 ????
     80  5000 ????	       00 b0	   men_to_rescue =	var12
     81  5000 ????
     82  5000 ????	       00 af	   ball_shoot_y =	var11
     83  5000 ????
     84  5000 ????	       00 ae	   ball_shoot_x =	var10
     85  5000 ????
     86  5000 ????	       00 ad	   has_private_levels =	var9
     87  5000 ????
     88  5000 ????	       00 ac	   max_priv_level_bcd3 =	var8
     89  5000 ????
     90  5000 ????	       00 ab	   max_priv_level_bcd2 =	var7
     91  5000 ????
     92  5000 ????	       00 aa	   max_priv_level_bcd1 =	var6
     93  5000 ????
     94  5000 ????	       00 a9	   max_pub_level_bcd3 =	var5
     95  5000 ????
     96  5000 ????	       00 a8	   max_pub_level_bcd2 =	var4
     97  5000 ????
     98  5000 ????	       00 a7	   max_pub_level_bcd1 =	var3
     99  5000 ????
    100  5000 ????	       00 a6	   gamenumber =	var2
    101  5000 ????
    102  5000 ????	       00 a5	   new_room_player1x =	var1
    103  5000 ????
    104  5000 ????	       00 a4	   new_room_player1y =	var0
    105  5000 ????
    106  5000 ????	       00 ec	   _Bit7_FireB_Restrainer =	y
    107  5000 ????
    108  5000 ????	       00 ec	   _Bit6_Flip_P1 =	y
    109  5000 ????
    110  5000 ????	       00 ec	   _Bit5_Request_Pending =	y
    111  5000 ????
    112  5000 ????	       00 ec	   _Bit4_Game_Over =	y
    113  5000 ????
    114  5000 ????	       00 ec	   _Bit3_Safe_Point_reached =	y
    115  5000 ????
    116  5000 ????	       00 ec	   _Bit2_Level_finished =	y
    117  5000 ????
    118  5000 ????	       00 ec	   _Bit1_Wall_Dir =	y
    119  5000 ????
    120  5000 ????	       00 ec	   _Bit0_roommate_Dir =	y
    121  5000 ????
    122  5000 ????	       00 ec	   _Bit_Game_State =	y
    123  5000 ????
    124  5000 ????	       00 86	   P1y_position =	player1y
    125  5000 ????	       00 e9	   P1y_velocity =	v
    126  5000 ????	       00 91	   M0y_position =	missile0y
    127  5000 ????	       00 e6	   M0y_velocity =	s
    128  5000 ????	       00 af	   Bally_position =	ball_shoot_y
    129  5000 ????	       00 e3	   Bally_velocity =	p
    130  5000 ????	       00 e1	   Safe_Point_P1_y =	n
    131  5000 ????
    132  5000 ????	       00 e0	   Safe_Point_P1_x =	m
    133  5000 ????
    134  5000 ????	       00 df	   _Bit1_Safe_Point_P1_Flip =	l
    135  5000 ????
    136  5000 ????	       00 df	   _Bit0_New_Room_P1_Flip =	l
    137  5000 ????
    138  5000 ????	       00 df	   _BitOp_Flip_positions =	l
    139  5000 ????
    140  5000 ????	       00 de	   roommate_type =	k
    141  5000 ????
    142  5000 ????	       00 dd	   roommate_move_x =	j
    143  5000 ????
    144  5000 ????	       00 dc	   extra_wall_move_x =	i
    145  5000 ????
    146  5000 ????	       00 db	   _Ch0_Counter =	h
    147  5000 ????
    148  5000 ????	       00 da	   _Ch0_Duration =	g
    149  5000 ????
    150  5000 ????	       00 d9	   _Ch0_Sound =	f
    151  5000 ????
    152  5000 ????	       00 d8	   _Bit3_P1_Dir_Right =	e
    153  5000 ????
    154  5000 ????	       00 d8	   _Bit2_P1_Dir_Left =	e
    155  5000 ????
    156  5000 ????	       00 d8	   _Bit1_P1_Dir_Down =	e
    157  5000 ????
    158  5000 ????	       00 d8	   _Bit0_P1_Dir_Up =	e
    159  5000 ????
    160  5000 ????	       00 d8	   _BitOp_P1_Dir =	e
    161  5000 ????
    162  5000 ????	       00 d7	   _Bit3_M0_Dir_Right =	d
    163  5000 ????
    164  5000 ????	       00 d7	   _Bit2_M0_Dir_Left =	d
    165  5000 ????
    166  5000 ????	       00 d7	   _Bit1_M0_Dir_Down =	d
    167  5000 ????
    168  5000 ????	       00 d7	   _Bit0_M0_Dir_Up =	d
    169  5000 ????
    170  5000 ????	       00 d7	   _BitOp_M0_Dir =	d
    171  5000 ????
    172  5000 ????	       00 d6	   _Bit3_Ball_Shot_Dir_Right2 =	c
    173  5000 ????
    174  5000 ????	       00 d6	   _Bit2_Ball_Shot_Dir_Right1 =	c
    175  5000 ????
    176  5000 ????	       00 d6	   _Bit1_Ball_Shot_Dir_Left2 =	c
    177  5000 ????
    178  5000 ????	       00 d6	   _Bit0_Ball_Shot_Dir_Left1 =	c
    179  5000 ????
    180  5000 ????	       00 d6	   _BitOp_Ball_Shot_Dir =	c
    181  5000 ????
    182  5000 ????	       00 d5	   frame_counter =	b
    183  5000 ????
    184  5000 ????	       00 d4	   delay_counter =	a
    185  5000 ????
    186  5000 ????	       00 95	   _sc3       =	score + 2
    187  5000 ????
    188  5000 ????	       00 94	   _sc2       =	score + 1
    189  5000 ????
    190  5000 ????	       00 93	   _sc1       =	score
    191  5000 ????
    192  5000 ????	       00 fe	   _FE	      =	$FE
    193  5000 ????
    194  5000 ????	       00 fc	   _FC	      =	$FC
    195  5000 ????
    196  5000 ????	       00 fa	   _FA	      =	$FA
    197  5000 ????
    198  5000 ????	       00 f8	   _F8	      =	$F8
    199  5000 ????
    200  5000 ????	       00 f6	   _F6	      =	$F6
    201  5000 ????
    202  5000 ????	       00 f4	   _F4	      =	$F4
    203  5000 ????
    204  5000 ????	       00 f2	   _F2	      =	$F2
    205  5000 ????
    206  5000 ????	       00 f0	   _F0	      =	$F0
    207  5000 ????
    208  5000 ????	       00 ee	   _EE	      =	$EE
    209  5000 ????
    210  5000 ????	       00 ec	   _EC	      =	$EC
    211  5000 ????
    212  5000 ????	       00 ea	   _EA	      =	$EA
    213  5000 ????
    214  5000 ????	       00 e8	   _E8	      =	$E8
    215  5000 ????
    216  5000 ????	       00 e6	   _E6	      =	$E6
    217  5000 ????
    218  5000 ????	       00 e4	   _E4	      =	$E4
    219  5000 ????
    220  5000 ????	       00 e2	   _E2	      =	$E2
    221  5000 ????
    222  5000 ????	       00 e0	   _E0	      =	$E0
    223  5000 ????
    224  5000 ????	       00 de	   _DE	      =	$DE
    225  5000 ????
    226  5000 ????	       00 dc	   _DC	      =	$DC
    227  5000 ????
    228  5000 ????	       00 da	   _DA	      =	$DA
    229  5000 ????
    230  5000 ????	       00 d8	   _D8	      =	$D8
    231  5000 ????
    232  5000 ????	       00 d6	   _D6	      =	$D6
    233  5000 ????
    234  5000 ????	       00 d4	   _D4	      =	$D4
    235  5000 ????
    236  5000 ????	       00 d2	   _D2	      =	$D2
    237  5000 ????
    238  5000 ????	       00 d0	   _D0	      =	$D0
    239  5000 ????
    240  5000 ????	       00 ce	   _CE	      =	$CE
    241  5000 ????
    242  5000 ????	       00 cc	   _CC	      =	$CC
    243  5000 ????
    244  5000 ????	       00 ca	   _CA	      =	$CA
    245  5000 ????
    246  5000 ????	       00 c8	   _C8	      =	$C8
    247  5000 ????
    248  5000 ????	       00 c6	   _C6	      =	$C6
    249  5000 ????
    250  5000 ????	       00 c4	   _C4	      =	$C4
    251  5000 ????
    252  5000 ????	       00 c2	   _C2	      =	$C2
    253  5000 ????
    254  5000 ????	       00 c0	   _C0	      =	$C0
    255  5000 ????
    256  5000 ????	       00 be	   _BE	      =	$BE
    257  5000 ????
    258  5000 ????	       00 bc	   _BC	      =	$BC
    259  5000 ????
    260  5000 ????	       00 ba	   _BA	      =	$BA
    261  5000 ????
    262  5000 ????	       00 b8	   _B8	      =	$B8
    263  5000 ????
    264  5000 ????	       00 b6	   _B6	      =	$B6
    265  5000 ????
    266  5000 ????	       00 b4	   _B4	      =	$B4
    267  5000 ????
    268  5000 ????	       00 b2	   _B2	      =	$B2
    269  5000 ????
    270  5000 ????	       00 b0	   _B0	      =	$B0
    271  5000 ????
    272  5000 ????	       00 ae	   _AE	      =	$AE
    273  5000 ????
    274  5000 ????	       00 ac	   _AC	      =	$AC
    275  5000 ????
    276  5000 ????	       00 aa	   _AA	      =	$AA
    277  5000 ????
    278  5000 ????	       00 a8	   _A8	      =	$A8
    279  5000 ????
    280  5000 ????	       00 a6	   _A6	      =	$A6
    281  5000 ????
    282  5000 ????	       00 a4	   _A4	      =	$A4
    283  5000 ????
    284  5000 ????	       00 a2	   _A2	      =	$A2
    285  5000 ????
    286  5000 ????	       00 a0	   _A0	      =	$A0
    287  5000 ????
    288  5000 ????	       00 9e	   _9E	      =	$9E
    289  5000 ????
    290  5000 ????	       00 9c	   _9C	      =	$9C
    291  5000 ????
    292  5000 ????	       00 9a	   _9A	      =	$9A
    293  5000 ????
    294  5000 ????	       00 98	   _98	      =	$98
    295  5000 ????
    296  5000 ????	       00 96	   _96	      =	$96
    297  5000 ????
    298  5000 ????	       00 94	   _94	      =	$94
    299  5000 ????
    300  5000 ????	       00 92	   _92	      =	$92
    301  5000 ????
    302  5000 ????	       00 90	   _90	      =	$90
    303  5000 ????
    304  5000 ????	       00 8e	   _8E	      =	$8E
    305  5000 ????
    306  5000 ????	       00 8c	   _8C	      =	$8C
    307  5000 ????
    308  5000 ????	       00 8a	   _8A	      =	$8A
    309  5000 ????
    310  5000 ????	       00 88	   _88	      =	$88
    311  5000 ????
    312  5000 ????	       00 86	   _86	      =	$86
    313  5000 ????
    314  5000 ????	       00 84	   _84	      =	$84
    315  5000 ????
    316  5000 ????	       00 82	   _82	      =	$82
    317  5000 ????
    318  5000 ????	       00 80	   _80	      =	$80
    319  5000 ????
    320  5000 ????	       00 7e	   _7E	      =	$7E
    321  5000 ????
    322  5000 ????	       00 7c	   _7C	      =	$7C
    323  5000 ????
    324  5000 ????	       00 7a	   _7A	      =	$7A
    325  5000 ????
    326  5000 ????	       00 78	   _78	      =	$78
    327  5000 ????
    328  5000 ????	       00 76	   _76	      =	$76
    329  5000 ????
    330  5000 ????	       00 74	   _74	      =	$74
    331  5000 ????
    332  5000 ????	       00 72	   _72	      =	$72
    333  5000 ????
    334  5000 ????	       00 70	   _70	      =	$70
    335  5000 ????
    336  5000 ????	       00 6e	   _6E	      =	$6E
    337  5000 ????
    338  5000 ????	       00 6c	   _6C	      =	$6C
    339  5000 ????
    340  5000 ????	       00 6a	   _6A	      =	$6A
    341  5000 ????
    342  5000 ????	       00 68	   _68	      =	$68
    343  5000 ????
    344  5000 ????	       00 66	   _66	      =	$66
    345  5000 ????
    346  5000 ????	       00 64	   _64	      =	$64
    347  5000 ????
    348  5000 ????	       00 62	   _62	      =	$62
    349  5000 ????
    350  5000 ????	       00 60	   _60	      =	$60
    351  5000 ????
    352  5000 ????	       00 5e	   _5E	      =	$5E
    353  5000 ????
    354  5000 ????	       00 5c	   _5C	      =	$5C
    355  5000 ????
    356  5000 ????	       00 5a	   _5A	      =	$5A
    357  5000 ????
    358  5000 ????	       00 58	   _58	      =	$58
    359  5000 ????
    360  5000 ????	       00 56	   _56	      =	$56
    361  5000 ????
    362  5000 ????	       00 54	   _54	      =	$54
    363  5000 ????
    364  5000 ????	       00 52	   _52	      =	$52
    365  5000 ????
    366  5000 ????	       00 50	   _50	      =	$50
    367  5000 ????
    368  5000 ????	       00 4e	   _4E	      =	$4E
    369  5000 ????
    370  5000 ????	       00 4c	   _4C	      =	$4C
    371  5000 ????
    372  5000 ????	       00 4a	   _4A	      =	$4A
    373  5000 ????
    374  5000 ????	       00 48	   _48	      =	$48
    375  5000 ????
    376  5000 ????	       00 46	   _46	      =	$46
    377  5000 ????
    378  5000 ????	       00 44	   _44	      =	$44
    379  5000 ????
    380  5000 ????	       00 42	   _42	      =	$42
    381  5000 ????
    382  5000 ????	       00 40	   _40	      =	$40
    383  5000 ????
    384  5000 ????	       00 3e	   _3E	      =	$3E
    385  5000 ????
    386  5000 ????	       00 3c	   _3C	      =	$3C
    387  5000 ????
    388  5000 ????	       00 3a	   _3A	      =	$3A
    389  5000 ????
    390  5000 ????	       00 38	   _38	      =	$38
    391  5000 ????
    392  5000 ????	       00 36	   _36	      =	$36
    393  5000 ????
    394  5000 ????	       00 34	   _34	      =	$34
    395  5000 ????
    396  5000 ????	       00 32	   _32	      =	$32
    397  5000 ????
    398  5000 ????	       00 30	   _30	      =	$30
    399  5000 ????
    400  5000 ????	       00 2e	   _2E	      =	$2E
    401  5000 ????
    402  5000 ????	       00 2c	   _2C	      =	$2C
    403  5000 ????
    404  5000 ????	       00 2a	   _2A	      =	$2A
    405  5000 ????
    406  5000 ????	       00 28	   _28	      =	$28
    407  5000 ????
    408  5000 ????	       00 26	   _26	      =	$26
    409  5000 ????
    410  5000 ????	       00 24	   _24	      =	$24
    411  5000 ????
    412  5000 ????	       00 22	   _22	      =	$22
    413  5000 ????
    414  5000 ????	       00 20	   _20	      =	$20
    415  5000 ????
    416  5000 ????	       00 1e	   _1E	      =	$1E
    417  5000 ????
    418  5000 ????	       00 1c	   _1C	      =	$1C
    419  5000 ????
    420  5000 ????	       00 1a	   _1A	      =	$1A
    421  5000 ????
    422  5000 ????	       00 18	   _18	      =	$18
    423  5000 ????
    424  5000 ????	       00 16	   _16	      =	$16
    425  5000 ????
    426  5000 ????	       00 14	   _14	      =	$14
    427  5000 ????
    428  5000 ????	       00 12	   _12	      =	$12
    429  5000 ????
    430  5000 ????	       00 10	   _10	      =	$10
    431  5000 ????
    432  5000 ????	       00 0e	   _0E	      =	$0E
    433  5000 ????
    434  5000 ????	       00 0c	   _0C	      =	$0C
    435  5000 ????
    436  5000 ????	       00 0a	   _0A	      =	$0A
    437  5000 ????
    438  5000 ????	       00 08	   _08	      =	$08
    439  5000 ????
    440  5000 ????	       00 06	   _06	      =	$06
    441  5000 ????
    442  5000 ????	       00 04	   _04	      =	$04
    443  5000 ????
    444  5000 ????	       00 02	   _02	      =	$02
    445  5000 ????
    446  5000 ????	       00 00	   _00	      =	$00
    447  5000 ????
    448  5000 ????	       00 09	   req_load_menu =	9
    449  5000 ????
    450  5000 ????	       00 08	   req_safe_point =	8
    451  5000 ????
    452  5000 ????	       00 07	   req_level_reset =	7
    453  5000 ????
    454  5000 ????	       00 06	   req_move_down =	6
    455  5000 ????
    456  5000 ????	       00 05	   req_move_right =	5
    457  5000 ????
    458  5000 ????	       00 04	   req_move_up =	4
    459  5000 ????
    460  5000 ????	       00 03	   req_move_left =	3
    461  5000 ????
    462  5000 ????	       00 02	   req_game_over =	2
    463  5000 ????
    464  5000 ????	       00 01	   req_level_up =	1
    465  5000 ????
    466  5000 ????	       00 00	   req_load   =	0
    467  5000 ????
    468  5000 ????	       00 06	   response_menu_size =	6
    469  5000 ????
    470  5000 ????	       00 1c	   response_size_minus_1 =	28
    471  5000 ????
    472  5000 ????	       00 94	   _M_Edge_Right =	148
    473  5000 ????
    474  5000 ????	       00 0e	   _M_Edge_Left =	14
    475  5000 ????
    476  5000 ????	       00 58	   _M_Edge_Bottom =	88
    477  5000 ????
    478  5000 ????	       00 02	   _M_Edge_Top =	2
    479  5000 ????
    480  5000 ????	       00 4c	   player_max_y =	76
    481  5000 ????
    482  5000 ????	       00 02	   player_min_y =	2
    483  5000 ????
    484  5000 ????	       00 86	   player_max_x =	134
    485  5000 ????
    486  5000 ????	       00 0a	   player_min_x =	10
    487  5000 ????
    488  5000 ????	       00 08	   textbkcolor =	$08
    489  5000 ????
    490  5000 ????	       00 08	   scorebkcolor =	$08
    491  5000 ????
    492  5000 ????	       00 01	   pfscore    =	1
    493  5000 ????
    494  5000 ????	       00 04	   pfres      =	4
    495  5000 ????
    496  5000 ????	       00 01	   superchip  =	1
    497  5000 ????	       00 03	   bs_mask    =	3
    498  5000 ????	       00 10	   bankswitch =	16
    499  5000 ????	       1f f6	   bankswitch_hotspot =	$1FF6
    500  5000 ????	       00 01	   PFcolors   =	1
    501  5000 ????	       00 01	   player1colors =	1
------- FILE 2600basic.h
      7  5000 ????
      8  5000 ????	       00 80	   player0x   =	$80
      9  5000 ????	       00 81	   player1x   =	$81
     10  5000 ????	       00 82	   missile0x  =	$82
     11  5000 ????	       00 83	   missile1x  =	$83
     12  5000 ????	       00 84	   ballx      =	$84
     13  5000 ????
     14  5000 ????	       00 85	   objecty    =	$85
     15  5000 ????	       00 85	   player0y   =	$85
     16  5000 ????	       00 86	   player1y   =	$86
     17  5000 ????	       00 87	   missile1height =	$87
     18  5000 ????	       00 88	   missile1y  =	$88
     19  5000 ????	       00 89	   bally      =	$89
     20  5000 ????
     21  5000 ????	       00 87	   player1color =	$87	; replaces missile 1
     22  5000 ????
     23  5000 ????	       00 8a	   player0pointer =	$8A	;uses $8A-$8B
     24  5000 ????	       00 8a	   player0pointerlo =	$8A
     25  5000 ????	       00 8b	   player0pointerhi =	$8B
     26  5000 ????	       00 8c	   player1pointer =	$8C	; $8C-$8D
     27  5000 ????	       00 8c	   player1pointerlo =	$8C
     28  5000 ????	       00 8d	   player1pointerhi =	$8D
     29  5000 ????
     30  5000 ????	       00 8e	   player0height =	$8E
     31  5000 ????	       00 8f	   player1height =	$8F
     32  5000 ????	       00 90	   missile0height =	$90
     33  5000 ????	       00 91	   missile0y  =	$91
     34  5000 ????	       00 92	   ballheight =	$92
     35  5000 ????
     36  5000 ????	       00 90	   currentpaddle =	$90	; replaces missile 0 (and can't be used with playercolor)
     37  5000 ????	       00 91	   paddle     =	$91	; replaces missile 0
     38  5000 ????	       00 82	   player0colorstore =	$82	; replaces missile 0
     39  5000 ????	       00 90	   player0color =	$90	; replaces missile 0
     40  5000 ????
     41  5000 ????	       00 93	   score      =	$93	; $93-$95
     42  5000 ????	       00 96	   scorepointers =	$96	; $96-$9B = 6 bytes
     43  5000 ????	       00 9c	   temp1      =	$9C	;used by kernel.  can be used in program too, but
     44  5000 ????	       00 9d	   temp2      =	$9D	;are obliterated when drawscreen is called.
     45  5000 ????	       00 9e	   temp3      =	$9E
     46  5000 ????	       00 9f	   temp4      =	$9F
     47  5000 ????	       00 a0	   temp5      =	$A0
     48  5000 ????	       00 a1	   temp6      =	$A1
     49  5000 ????
     50  5000 ????	       00 a2	   rand       =	$A2
     51  5000 ????	       00 a3	   scorecolor =	$A3
     52  5000 ????
     53  5000 ????	       00 a4	   var0       =	$A4
     54  5000 ????	       00 a5	   var1       =	$A5
     55  5000 ????	       00 a6	   var2       =	$A6
     56  5000 ????	       00 a7	   var3       =	$A7
     57  5000 ????	       00 a8	   var4       =	$A8
     58  5000 ????	       00 a9	   var5       =	$A9
     59  5000 ????	       00 aa	   var6       =	$AA
     60  5000 ????	       00 ab	   var7       =	$AB
     61  5000 ????	       00 ac	   var8       =	$AC
     62  5000 ????	       00 ad	   var9       =	$AD
     63  5000 ????	       00 ae	   var10      =	$AE
     64  5000 ????	       00 af	   var11      =	$AF
     65  5000 ????	       00 b0	   var12      =	$B0
     66  5000 ????	       00 b1	   var13      =	$B1
     67  5000 ????	       00 b2	   var14      =	$B2
     68  5000 ????	       00 b3	   var15      =	$B3
     69  5000 ????	       00 b4	   var16      =	$B4
     70  5000 ????	       00 b5	   var17      =	$B5
     71  5000 ????	       00 b6	   var18      =	$B6
     72  5000 ????	       00 b7	   var19      =	$B7
     73  5000 ????	       00 b8	   var20      =	$B8
     74  5000 ????	       00 b9	   var21      =	$B9
     75  5000 ????	       00 ba	   var22      =	$BA
     76  5000 ????	       00 bb	   var23      =	$BB
     77  5000 ????	       00 bc	   var24      =	$BC
     78  5000 ????	       00 bd	   var25      =	$BD
     79  5000 ????	       00 be	   var26      =	$BE
     80  5000 ????	       00 bf	   var27      =	$BF
     81  5000 ????	       00 c0	   var28      =	$C0
     82  5000 ????	       00 c1	   var29      =	$C1
     83  5000 ????	       00 c2	   var30      =	$C2
     84  5000 ????	       00 c3	   var31      =	$C3
     85  5000 ????	       00 c4	   var32      =	$C4
     86  5000 ????	       00 c5	   var33      =	$C5
     87  5000 ????	       00 c6	   var34      =	$C6
     88  5000 ????	       00 c7	   var35      =	$C7
     89  5000 ????	       00 c8	   var36      =	$C8
     90  5000 ????	       00 c9	   var37      =	$C9
     91  5000 ????	       00 ca	   var38      =	$CA
     92  5000 ????	       00 cb	   var39      =	$CB
     93  5000 ????	       00 cc	   var40      =	$CC
     94  5000 ????	       00 cd	   var41      =	$CD
     95  5000 ????	       00 ce	   var42      =	$CE
     96  5000 ????	       00 cf	   var43      =	$CF
     97  5000 ????	       00 d0	   var44      =	$D0
     98  5000 ????	       00 d1	   var45      =	$D1
     99  5000 ????	       00 d2	   var46      =	$D2
    100  5000 ????	       00 d3	   var47      =	$D3
    101  5000 ????
    102  5000 ????	       00 d4	   A	      =	$d4
    103  5000 ????	       00 d4	   a	      =	$d4
    104  5000 ????	       00 d5	   B	      =	$d5
    105  5000 ????	       00 d5	   b	      =	$d5
    106  5000 ????	       00 d6	   C	      =	$d6
    107  5000 ????	       00 d6	   c	      =	$d6
    108  5000 ????	       00 d7	   D	      =	$d7
    109  5000 ????	       00 d7	   d	      =	$d7
    110  5000 ????	       00 d8	   E	      =	$d8
    111  5000 ????	       00 d8	   e	      =	$d8
    112  5000 ????	       00 d9	   F	      =	$d9
    113  5000 ????	       00 d9	   f	      =	$d9
    114  5000 ????	       00 da	   G	      =	$da
    115  5000 ????	       00 da	   g	      =	$da
    116  5000 ????	       00 db	   H	      =	$db
    117  5000 ????	       00 db	   h	      =	$db
    118  5000 ????	       00 dc	   I	      =	$dc
    119  5000 ????	       00 dc	   i	      =	$dc
    120  5000 ????	       00 dd	   J	      =	$dd
    121  5000 ????	       00 dd	   j	      =	$dd
    122  5000 ????	       00 de	   K	      =	$de
    123  5000 ????	       00 de	   k	      =	$de
    124  5000 ????	       00 df	   L	      =	$df
    125  5000 ????	       00 df	   l	      =	$df
    126  5000 ????	       00 e0	   M	      =	$e0
    127  5000 ????	       00 e0	   m	      =	$e0
    128  5000 ????	       00 e1	   N	      =	$e1
    129  5000 ????	       00 e1	   n	      =	$e1
    130  5000 ????	       00 e2	   O	      =	$e2
    131  5000 ????	       00 e2	   o	      =	$e2
    132  5000 ????	       00 e3	   P	      =	$e3
    133  5000 ????	       00 e3	   p	      =	$e3
    134  5000 ????	       00 e4	   Q	      =	$e4
    135  5000 ????	       00 e4	   q	      =	$e4
    136  5000 ????	       00 e5	   R	      =	$e5
    137  5000 ????	       00 e5	   r	      =	$e5
    138  5000 ????	       00 e6	   S	      =	$e6
    139  5000 ????	       00 e6	   s	      =	$e6
    140  5000 ????	       00 e7	   T	      =	$e7
    141  5000 ????	       00 e7	   t	      =	$e7
    142  5000 ????	       00 e8	   U	      =	$e8
    143  5000 ????	       00 e8	   u	      =	$e8
    144  5000 ????	       00 e9	   V	      =	$e9
    145  5000 ????	       00 e9	   v	      =	$e9
    146  5000 ????	       00 ea	   W	      =	$ea
    147  5000 ????	       00 ea	   w	      =	$ea
    148  5000 ????	       00 eb	   X	      =	$eb
    149  5000 ????	       00 eb	   x	      =	$eb
    150  5000 ????	       00 ec	   Y	      =	$ec
    151  5000 ????	       00 ec	   y	      =	$ec
    152  5000 ????	       00 ed	   Z	      =	$ed
    153  5000 ????	       00 ed	   z	      =	$ed
    154  5000 ????
    155  5000 ????	       00 ee	   temp7      =	$ee	; This is used to aid in bankswitching
    156  5000 ????	       00 ef	   playfieldpos =	$ef
    157  5000 ????
    158  5000 ????						; available for other uses, or if unused, provide more stack space
    159  5000 ????
    160  5000 ????	       00 f0	   aux1       =	$f0
    161  5000 ????	       00 f1	   aux2       =	$f1
    162  5000 ????	       00 f2	   aux3       =	$f2
    163  5000 ????	       00 f3	   aux4       =	$f3
    164  5000 ????	       00 f4	   aux5       =	$f4
    165  5000 ????	       00 f5	   aux6       =	$f5
    166  5000 ????
    167  5000 ????						; playfield color/height pointers
    168  5000 ????	       00 f0	   pfcolortable =	$f0	; and $d5
    169  5000 ????	       00 f0	   pfheighttable =	$f0	; and $d5
    170  5000 ????						; the above pointers are the same because if color and height are both used together,
    171  5000 ????						; they must used absolute indexed and cannot use pointers
    172  5000 ????
    173  5000 ????	       00 f2	   lifepointer =	$f2	; pointer to "lives" shape
    174  5000 ????						; upper 3 bits of $f2 contain the number of lives
    175  5000 ????	       00 f4	   lifecolor  =	$f4
    176  5000 ????	       00 f3	   lives      =	$f3	; # lives >> 5
    177  5000 ????	       00 f5	   statusbarlength =	$f5	; only uses upper 5 bits; other bits free
    178  5000 ????
    179  5000 ????	       00 f2	   pfscore1   =	$f2	; optional playfield bytes in score
    180  5000 ????	       00 f3	   pfscore2   =	$f3
    181  5000 ????	       00 f4	   pfscorecolor =	$f4
    182  5000 ????
    183  5000 ????	       00 f6	   stack1     =	$f6
    184  5000 ????	       00 f7	   stack2     =	$f7
    185  5000 ????	       00 f8	   stack3     =	$f8
    186  5000 ????	       00 f9	   stack4     =	$f9
    187  5000 ????						; the stack bytes above may be used in the kernel
    188  5000 ????						; stack = F6-F7, F8-F9, FA-FB, FC-FD, FE-FF
    189  5000 ????
    190  5000 ????				      MAC	return
    191  5000 ????				      ifnconst	bankswitch
    192  5000 ????				      rts
    193  5000 ????				      else
    194  5000 ????				      jmp	BS_return
    195  5000 ????				      endif
    196  5000 ????				      ENDM		; auto-return from either a regular or bankswitched module
    197  5000 ????
    198  5000 ????				      ifconst	superchip
    199  5000 ????	       10 d0	   playfieldbase =	$10D0
------- FILE superchip.h LEVEL 3 PASS 3
      0  5000 ????				      include	superchip.h
      1  5000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  5000 ????
      3  5000 ????	       f0 00	   write_RAM  =	$F000
      4  5000 ????	       f0 00	   wRAM       =	$F000
      5  5000 ????	       f0 00	   w000       =	$F000
      6  5000 ????	       f0 01	   w001       =	$F001
      7  5000 ????	       f0 02	   w002       =	$F002
      8  5000 ????	       f0 03	   w003       =	$F003
      9  5000 ????	       f0 04	   w004       =	$F004
     10  5000 ????	       f0 05	   w005       =	$F005
     11  5000 ????	       f0 06	   w006       =	$F006
     12  5000 ????	       f0 07	   w007       =	$F007
     13  5000 ????	       f0 08	   w008       =	$F008
     14  5000 ????	       f0 09	   w009       =	$F009
     15  5000 ????	       f0 0a	   w010       =	$F00A
     16  5000 ????	       f0 0b	   w011       =	$F00B
     17  5000 ????	       f0 0c	   w012       =	$F00C
     18  5000 ????	       f0 0d	   w013       =	$F00D
     19  5000 ????	       f0 0e	   w014       =	$F00E
     20  5000 ????	       f0 0f	   w015       =	$F00F
     21  5000 ????	       f0 10	   w016       =	$F010
     22  5000 ????	       f0 11	   w017       =	$F011
     23  5000 ????	       f0 12	   w018       =	$F012
     24  5000 ????	       f0 13	   w019       =	$F013
     25  5000 ????	       f0 14	   w020       =	$F014
     26  5000 ????	       f0 15	   w021       =	$F015
     27  5000 ????	       f0 16	   w022       =	$F016
     28  5000 ????	       f0 17	   w023       =	$F017
     29  5000 ????	       f0 18	   w024       =	$F018
     30  5000 ????	       f0 19	   w025       =	$F019
     31  5000 ????	       f0 1a	   w026       =	$F01A
     32  5000 ????	       f0 1b	   w027       =	$F01B
     33  5000 ????	       f0 1c	   w028       =	$F01C
     34  5000 ????	       f0 1d	   w029       =	$F01D
     35  5000 ????	       f0 1e	   w030       =	$F01E
     36  5000 ????	       f0 1f	   w031       =	$F01F
     37  5000 ????	       f0 20	   w032       =	$F020
     38  5000 ????	       f0 21	   w033       =	$F021
     39  5000 ????	       f0 22	   w034       =	$F022
     40  5000 ????	       f0 23	   w035       =	$F023
     41  5000 ????	       f0 24	   w036       =	$F024
     42  5000 ????	       f0 25	   w037       =	$F025
     43  5000 ????	       f0 26	   w038       =	$F026
     44  5000 ????	       f0 27	   w039       =	$F027
     45  5000 ????	       f0 28	   w040       =	$F028
     46  5000 ????	       f0 29	   w041       =	$F029
     47  5000 ????	       f0 2a	   w042       =	$F02A
     48  5000 ????	       f0 2b	   w043       =	$F02B
     49  5000 ????	       f0 2c	   w044       =	$F02C
     50  5000 ????	       f0 2d	   w045       =	$F02D
     51  5000 ????	       f0 2e	   w046       =	$F02E
     52  5000 ????	       f0 2f	   w047       =	$F02F
     53  5000 ????	       f0 30	   w048       =	$F030
     54  5000 ????	       f0 31	   w049       =	$F031
     55  5000 ????	       f0 32	   w050       =	$F032
     56  5000 ????	       f0 33	   w051       =	$F033
     57  5000 ????	       f0 34	   w052       =	$F034
     58  5000 ????	       f0 35	   w053       =	$F035
     59  5000 ????	       f0 36	   w054       =	$F036
     60  5000 ????	       f0 37	   w055       =	$F037
     61  5000 ????	       f0 38	   w056       =	$F038
     62  5000 ????	       f0 39	   w057       =	$F039
     63  5000 ????	       f0 3a	   w058       =	$F03A
     64  5000 ????	       f0 3b	   w059       =	$F03B
     65  5000 ????	       f0 3c	   w060       =	$F03C
     66  5000 ????	       f0 3d	   w061       =	$F03D
     67  5000 ????	       f0 3e	   w062       =	$F03E
     68  5000 ????	       f0 3f	   w063       =	$F03F
     69  5000 ????	       f0 40	   w064       =	$F040
     70  5000 ????	       f0 41	   w065       =	$F041
     71  5000 ????	       f0 42	   w066       =	$F042
     72  5000 ????	       f0 43	   w067       =	$F043
     73  5000 ????	       f0 44	   w068       =	$F044
     74  5000 ????	       f0 45	   w069       =	$F045
     75  5000 ????	       f0 46	   w070       =	$F046
     76  5000 ????	       f0 47	   w071       =	$F047
     77  5000 ????	       f0 48	   w072       =	$F048
     78  5000 ????	       f0 49	   w073       =	$F049
     79  5000 ????	       f0 4a	   w074       =	$F04A
     80  5000 ????	       f0 4b	   w075       =	$F04B
     81  5000 ????	       f0 4c	   w076       =	$F04C
     82  5000 ????	       f0 4d	   w077       =	$F04D
     83  5000 ????	       f0 4e	   w078       =	$F04E
     84  5000 ????	       f0 4f	   w079       =	$F04F
     85  5000 ????	       f0 50	   w080       =	$F050
     86  5000 ????	       f0 51	   w081       =	$F051
     87  5000 ????	       f0 52	   w082       =	$F052
     88  5000 ????	       f0 53	   w083       =	$F053
     89  5000 ????	       f0 54	   w084       =	$F054
     90  5000 ????	       f0 55	   w085       =	$F055
     91  5000 ????	       f0 56	   w086       =	$F056
     92  5000 ????	       f0 57	   w087       =	$F057
     93  5000 ????	       f0 58	   w088       =	$F058
     94  5000 ????	       f0 59	   w089       =	$F059
     95  5000 ????	       f0 5a	   w090       =	$F05A
     96  5000 ????	       f0 5b	   w091       =	$F05B
     97  5000 ????	       f0 5c	   w092       =	$F05C
     98  5000 ????	       f0 5d	   w093       =	$F05D
     99  5000 ????	       f0 5e	   w094       =	$F05E
    100  5000 ????	       f0 5f	   w095       =	$F05F
    101  5000 ????	       f0 60	   w096       =	$F060
    102  5000 ????	       f0 61	   w097       =	$F061
    103  5000 ????	       f0 62	   w098       =	$F062
    104  5000 ????	       f0 63	   w099       =	$F063
    105  5000 ????	       f0 64	   w100       =	$F064
    106  5000 ????	       f0 65	   w101       =	$F065
    107  5000 ????	       f0 66	   w102       =	$F066
    108  5000 ????	       f0 67	   w103       =	$F067
    109  5000 ????	       f0 68	   w104       =	$F068
    110  5000 ????	       f0 69	   w105       =	$F069
    111  5000 ????	       f0 6a	   w106       =	$F06A
    112  5000 ????	       f0 6b	   w107       =	$F06B
    113  5000 ????	       f0 6c	   w108       =	$F06C
    114  5000 ????	       f0 6d	   w109       =	$F06D
    115  5000 ????	       f0 6e	   w110       =	$F06E
    116  5000 ????	       f0 6f	   w111       =	$F06F
    117  5000 ????	       f0 70	   w112       =	$F070
    118  5000 ????	       f0 71	   w113       =	$F071
    119  5000 ????	       f0 72	   w114       =	$F072
    120  5000 ????	       f0 73	   w115       =	$F073
    121  5000 ????	       f0 74	   w116       =	$F074
    122  5000 ????	       f0 75	   w117       =	$F075
    123  5000 ????	       f0 76	   w118       =	$F076
    124  5000 ????	       f0 77	   w119       =	$F077
    125  5000 ????	       f0 78	   w120       =	$F078
    126  5000 ????	       f0 79	   w121       =	$F079
    127  5000 ????	       f0 7a	   w122       =	$F07A
    128  5000 ????	       f0 7b	   w123       =	$F07B
    129  5000 ????	       f0 7c	   w124       =	$F07C
    130  5000 ????	       f0 7d	   w125       =	$F07D
    131  5000 ????	       f0 7e	   w126       =	$F07E
    132  5000 ????	       f0 7f	   w127       =	$F07F
    133  5000 ????
    134  5000 ????	       f0 80	   read_RAM   =	$F080
    135  5000 ????	       f0 80	   rRAM       =	$F080
    136  5000 ????	       f0 80	   r000       =	$F080
    137  5000 ????	       f0 81	   r001       =	$F081
    138  5000 ????	       f0 82	   r002       =	$F082
    139  5000 ????	       f0 83	   r003       =	$F083
    140  5000 ????	       f0 84	   r004       =	$F084
    141  5000 ????	       f0 85	   r005       =	$F085
    142  5000 ????	       f0 86	   r006       =	$F086
    143  5000 ????	       f0 87	   r007       =	$F087
    144  5000 ????	       f0 88	   r008       =	$F088
    145  5000 ????	       f0 89	   r009       =	$F089
    146  5000 ????	       f0 8a	   r010       =	$F08A
    147  5000 ????	       f0 8b	   r011       =	$F08B
    148  5000 ????	       f0 8c	   r012       =	$F08C
    149  5000 ????	       f0 8d	   r013       =	$F08D
    150  5000 ????	       f0 8e	   r014       =	$F08E
    151  5000 ????	       f0 8f	   r015       =	$F08F
    152  5000 ????	       f0 90	   r016       =	$F090
    153  5000 ????	       f0 91	   r017       =	$F091
    154  5000 ????	       f0 92	   r018       =	$F092
    155  5000 ????	       f0 93	   r019       =	$F093
    156  5000 ????	       f0 94	   r020       =	$F094
    157  5000 ????	       f0 95	   r021       =	$F095
    158  5000 ????	       f0 96	   r022       =	$F096
    159  5000 ????	       f0 97	   r023       =	$F097
    160  5000 ????	       f0 98	   r024       =	$F098
    161  5000 ????	       f0 99	   r025       =	$F099
    162  5000 ????	       f0 9a	   r026       =	$F09A
    163  5000 ????	       f0 9b	   r027       =	$F09B
    164  5000 ????	       f0 9c	   r028       =	$F09C
    165  5000 ????	       f0 9d	   r029       =	$F09D
    166  5000 ????	       f0 9e	   r030       =	$F09E
    167  5000 ????	       f0 9f	   r031       =	$F09F
    168  5000 ????	       f0 a0	   r032       =	$F0A0
    169  5000 ????	       f0 a1	   r033       =	$F0A1
    170  5000 ????	       f0 a2	   r034       =	$F0A2
    171  5000 ????	       f0 a3	   r035       =	$F0A3
    172  5000 ????	       f0 a4	   r036       =	$F0A4
    173  5000 ????	       f0 a5	   r037       =	$F0A5
    174  5000 ????	       f0 a6	   r038       =	$F0A6
    175  5000 ????	       f0 a7	   r039       =	$F0A7
    176  5000 ????	       f0 a8	   r040       =	$F0A8
    177  5000 ????	       f0 a9	   r041       =	$F0A9
    178  5000 ????	       f0 aa	   r042       =	$F0AA
    179  5000 ????	       f0 ab	   r043       =	$F0AB
    180  5000 ????	       f0 ac	   r044       =	$F0AC
    181  5000 ????	       f0 ad	   r045       =	$F0AD
    182  5000 ????	       f0 ae	   r046       =	$F0AE
    183  5000 ????	       f0 af	   r047       =	$F0AF
    184  5000 ????	       f0 b0	   r048       =	$F0B0
    185  5000 ????	       f0 b1	   r049       =	$F0B1
    186  5000 ????	       f0 b2	   r050       =	$F0B2
    187  5000 ????	       f0 b3	   r051       =	$F0B3
    188  5000 ????	       f0 b4	   r052       =	$F0B4
    189  5000 ????	       f0 b5	   r053       =	$F0B5
    190  5000 ????	       f0 b6	   r054       =	$F0B6
    191  5000 ????	       f0 b7	   r055       =	$F0B7
    192  5000 ????	       f0 b8	   r056       =	$F0B8
    193  5000 ????	       f0 b9	   r057       =	$F0B9
    194  5000 ????	       f0 ba	   r058       =	$F0BA
    195  5000 ????	       f0 bb	   r059       =	$F0BB
    196  5000 ????	       f0 bc	   r060       =	$F0BC
    197  5000 ????	       f0 bd	   r061       =	$F0BD
    198  5000 ????	       f0 be	   r062       =	$F0BE
    199  5000 ????	       f0 bf	   r063       =	$F0BF
    200  5000 ????	       f0 c0	   r064       =	$F0C0
    201  5000 ????	       f0 c1	   r065       =	$F0C1
    202  5000 ????	       f0 c2	   r066       =	$F0C2
    203  5000 ????	       f0 c3	   r067       =	$F0C3
    204  5000 ????	       f0 c4	   r068       =	$F0C4
    205  5000 ????	       f0 c5	   r069       =	$F0C5
    206  5000 ????	       f0 c6	   r070       =	$F0C6
    207  5000 ????	       f0 c7	   r071       =	$F0C7
    208  5000 ????	       f0 c8	   r072       =	$F0C8
    209  5000 ????	       f0 c9	   r073       =	$F0C9
    210  5000 ????	       f0 ca	   r074       =	$F0CA
    211  5000 ????	       f0 cb	   r075       =	$F0CB
    212  5000 ????	       f0 cc	   r076       =	$F0CC
    213  5000 ????	       f0 cd	   r077       =	$F0CD
    214  5000 ????	       f0 ce	   r078       =	$F0CE
    215  5000 ????	       f0 cf	   r079       =	$F0CF
    216  5000 ????	       f0 d0	   r080       =	$F0D0
    217  5000 ????	       f0 d1	   r081       =	$F0D1
    218  5000 ????	       f0 d2	   r082       =	$F0D2
    219  5000 ????	       f0 d3	   r083       =	$F0D3
    220  5000 ????	       f0 d4	   r084       =	$F0D4
    221  5000 ????	       f0 d5	   r085       =	$F0D5
    222  5000 ????	       f0 d6	   r086       =	$F0D6
    223  5000 ????	       f0 d7	   r087       =	$F0D7
    224  5000 ????	       f0 d8	   r088       =	$F0D8
    225  5000 ????	       f0 d9	   r089       =	$F0D9
    226  5000 ????	       f0 da	   r090       =	$F0DA
    227  5000 ????	       f0 db	   r091       =	$F0DB
    228  5000 ????	       f0 dc	   r092       =	$F0DC
    229  5000 ????	       f0 dd	   r093       =	$F0DD
    230  5000 ????	       f0 de	   r094       =	$F0DE
    231  5000 ????	       f0 df	   r095       =	$F0DF
    232  5000 ????	       f0 e0	   r096       =	$F0E0
    233  5000 ????	       f0 e1	   r097       =	$F0E1
    234  5000 ????	       f0 e2	   r098       =	$F0E2
    235  5000 ????	       f0 e3	   r099       =	$F0E3
    236  5000 ????	       f0 e4	   r100       =	$F0E4
    237  5000 ????	       f0 e5	   r101       =	$F0E5
    238  5000 ????	       f0 e6	   r102       =	$F0E6
    239  5000 ????	       f0 e7	   r103       =	$F0E7
    240  5000 ????	       f0 e8	   r104       =	$F0E8
    241  5000 ????	       f0 e9	   r105       =	$F0E9
    242  5000 ????	       f0 ea	   r106       =	$F0EA
    243  5000 ????	       f0 eb	   r107       =	$F0EB
    244  5000 ????	       f0 ec	   r108       =	$F0EC
    245  5000 ????	       f0 ed	   r109       =	$F0ED
    246  5000 ????	       f0 ee	   r110       =	$F0EE
    247  5000 ????	       f0 ef	   r111       =	$F0EF
    248  5000 ????	       f0 f0	   r112       =	$F0F0
    249  5000 ????	       f0 f1	   r113       =	$F0F1
    250  5000 ????	       f0 f2	   r114       =	$F0F2
    251  5000 ????	       f0 f3	   r115       =	$F0F3
    252  5000 ????	       f0 f4	   r116       =	$F0F4
    253  5000 ????	       f0 f5	   r117       =	$F0F5
    254  5000 ????	       f0 f6	   r118       =	$F0F6
    255  5000 ????	       f0 f7	   r119       =	$F0F7
    256  5000 ????	       f0 f8	   r120       =	$F0F8
    257  5000 ????	       f0 f9	   r121       =	$F0F9
    258  5000 ????	       f0 fa	   r122       =	$F0FA
    259  5000 ????	       f0 fb	   r123       =	$F0FB
    260  5000 ????	       f0 fc	   r124       =	$F0FC
    261  5000 ????	       f0 fd	   r125       =	$F0FD
    262  5000 ????	       f0 fe	   r126       =	$F0FE
    263  5000 ????	       f0 ff	   r127       =	$F0FF
------- FILE 2600basic.h
    201  5000 ????			  -	      else
    202  5000 ????			  -playfieldbase =	$A4
    203  5000 ????				      endif
    204  5000 ????
    205  5000 ????				      ifnconst	pfhalfwidth
    206  5000 ????	       00 04	   pfwidth    =	4
    207  5000 ????	       00 0e	   PF1L       =	PF1
    208  5000 ????	       00 0f	   PF2L       =	PF2
    209  5000 ????	       00 0e	   PF1R       =	PF1
    210  5000 ????	       00 0f	   PF2R       =	PF2
    211  5000 ????	       00 00	   pfadjust   =	0
    212  5000 ????			  -	      else
    213  5000 ????			  -pfwidth    =	2
    214  5000 ????			  -	      ifconst	pfcenter
    215  5000 ????			  -PF1L       =	$3F	; no effect
    216  5000 ????			  -PF2L       =	PF2
    217  5000 ????			  -PF1R       =	$3F
    218  5000 ????			  -PF2R       =	PF2	; no effect
    219  5000 ????			  -pfadjust   =	1
    220  5000 ????			  -	      else
    221  5000 ????			  -PF1L       =	PF1
    222  5000 ????			  -PF2L       =	PF2
    223  5000 ????			  -PF1R       =	$3F	; no effect
    224  5000 ????			  -PF2R       =	$3F	; no effect
    225  5000 ????			  -pfadjust   =	0
    226  5000 ????			  -	      endif
    227  5000 ????				      endif
    228  5000 ????
    229  5000 ????						; define playfield start based on height
    230  5000 ????			  -	      ifnconst	pfres
    231  5000 ????			  -playfield  =	playfieldbase
    232  5000 ????				      else
    233  5000 ????	       10 f0	   playfield  =	playfieldbase-(pfres-12*(4/pfwidth))*pfwidth
    234  5000 ????				      endif
------- FILE d:\Firmaplus\Firmaplus_intern\Atari\PlusROM\Projekte-batariBasic\CaveApocalypse\C.A.V.E. Apocalypse.bas.asm
------- FILE 2600basic_variable_redefs.h LEVEL 2 PASS 3
      0  5000 ????				      include	"2600basic_variable_redefs.h"
      1  5000 ????						; This file contains variable mapping and other information for the current project.
      2  5000 ????
      3  5000 ????	       00 fc	   text_strings_length =	.skipL0562-text_strings
      4  5000 ????
      5  5000 ????	       00 23	   bscode_length =	35
      6  5000 ????	       00 1d	   _SD_Touch_Enemy_length =	.skipL0556-_SD_Touch_Enemy
      7  5000 ????
      8  5000 ????	       00 21	   _SD_Shoot_Enemy_length =	.skipL0555-_SD_Shoot_Enemy
      9  5000 ????
     10  5000 ????	       00 45	   _SD_Shoot_Miss_length =	.skipL0554-_SD_Shoot_Miss
     11  5000 ????
     12  5000 ????	       00 35	   _SD_Shot_Wall_length =	.skipL0553-_SD_Shot_Wall
     13  5000 ????
     14  5000 ????	       f0 6f	   w_extra_wall_startpos_y =	w111
     15  5000 ????
     16  5000 ????	       f0 ef	   r_extra_wall_startpos_y =	r111
     17  5000 ????
     18  5000 ????	       f0 6e	   w_extra_wall_startpos_x =	w110
     19  5000 ????
     20  5000 ????	       f0 ee	   r_extra_wall_startpos_x =	r110
     21  5000 ????
     22  5000 ????	       f0 6d	   w_extra_wall_height =	w109
     23  5000 ????
     24  5000 ????	       f0 ed	   r_extra_wall_height =	r109
     25  5000 ????
     26  5000 ????	       f0 6c	   w_extra_wall_width =	w108
     27  5000 ????
     28  5000 ????	       f0 ec	   r_extra_wall_width =	r108
     29  5000 ????
     30  5000 ????	       f0 6b	   w_extra_wall_type_and_range =	w107
     31  5000 ????
     32  5000 ????	       f0 eb	   r_extra_wall_type_and_range =	r107
     33  5000 ????
     34  5000 ????	       f0 6a	   w_roommate_startpos_y =	w106
     35  5000 ????
     36  5000 ????	       f0 ea	   r_roommate_startpos_y =	r106
     37  5000 ????
     38  5000 ????	       f0 69	   w_roommate_startpos_x =	w105
     39  5000 ????
     40  5000 ????	       f0 e9	   r_roommate_startpos_x =	r105
     41  5000 ????
     42  5000 ????	       f0 68	   w_roommate_type_and_range =	w104
     43  5000 ????
     44  5000 ????	       f0 e8	   r_roommate_type_and_range =	r104
     45  5000 ????
     46  5000 ????	       f0 67	   w_room_color_bottom =	w103
     47  5000 ????
     48  5000 ????	       f0 e7	   r_room_color_bottom =	r103
     49  5000 ????
     50  5000 ????	       f0 63	   w_room_color_middle =	w099
     51  5000 ????
     52  5000 ????	       f0 e3	   r_room_color_middle =	r099
     53  5000 ????
     54  5000 ????	       f0 62	   w_room_color_top =	w098
     55  5000 ????
     56  5000 ????	       f0 e2	   r_room_color_top =	r098
     57  5000 ????
     58  5000 ????	       f0 61	   w_Bit0_room_type_top =	w097
     59  5000 ????
     60  5000 ????	       f0 e1	   r_Bit0_room_type_top =	r097
     61  5000 ????
     62  5000 ????	       f0 61	   w_BitOp_room_type =	w097
     63  5000 ????
     64  5000 ????	       f0 e1	   r_BitOp_room_type =	r097
     65  5000 ????
     66  5000 ????	       f0 60	   w_men_to_rescue_in_this_level =	w096
     67  5000 ????
     68  5000 ????	       f0 e0	   r_men_to_rescue_in_this_level =	r096
     69  5000 ????
     70  5000 ????	       f0 5f	   w_level_bonus_bcd_points =	w095
     71  5000 ????
     72  5000 ????	       f0 df	   r_level_bonus_bcd_points =	r095
     73  5000 ????
     74  5000 ????	       f0 5f	   w_room_definition_start =	w095
     75  5000 ????
     76  5000 ????	       00 b1	   bonus_bcd_counter =	var13
     77  5000 ????
     78  5000 ????	       00 b0	   TextIndex  =	var12
     79  5000 ????
     80  5000 ????	       00 b0	   men_to_rescue =	var12
     81  5000 ????
     82  5000 ????	       00 af	   ball_shoot_y =	var11
     83  5000 ????
     84  5000 ????	       00 ae	   ball_shoot_x =	var10
     85  5000 ????
     86  5000 ????	       00 ad	   has_private_levels =	var9
     87  5000 ????
     88  5000 ????	       00 ac	   max_priv_level_bcd3 =	var8
     89  5000 ????
     90  5000 ????	       00 ab	   max_priv_level_bcd2 =	var7
     91  5000 ????
     92  5000 ????	       00 aa	   max_priv_level_bcd1 =	var6
     93  5000 ????
     94  5000 ????	       00 a9	   max_pub_level_bcd3 =	var5
     95  5000 ????
     96  5000 ????	       00 a8	   max_pub_level_bcd2 =	var4
     97  5000 ????
     98  5000 ????	       00 a7	   max_pub_level_bcd1 =	var3
     99  5000 ????
    100  5000 ????	       00 a6	   gamenumber =	var2
    101  5000 ????
    102  5000 ????	       00 a5	   new_room_player1x =	var1
    103  5000 ????
    104  5000 ????	       00 a4	   new_room_player1y =	var0
    105  5000 ????
    106  5000 ????	       00 ec	   _Bit7_FireB_Restrainer =	y
    107  5000 ????
    108  5000 ????	       00 ec	   _Bit6_Flip_P1 =	y
    109  5000 ????
    110  5000 ????	       00 ec	   _Bit5_Request_Pending =	y
    111  5000 ????
    112  5000 ????	       00 ec	   _Bit4_Game_Over =	y
    113  5000 ????
    114  5000 ????	       00 ec	   _Bit3_Safe_Point_reached =	y
    115  5000 ????
    116  5000 ????	       00 ec	   _Bit2_Level_finished =	y
    117  5000 ????
    118  5000 ????	       00 ec	   _Bit1_Wall_Dir =	y
    119  5000 ????
    120  5000 ????	       00 ec	   _Bit0_roommate_Dir =	y
    121  5000 ????
    122  5000 ????	       00 ec	   _Bit_Game_State =	y
    123  5000 ????
    124  5000 ????	       00 86	   P1y_position =	player1y
    125  5000 ????	       00 e9	   P1y_velocity =	v
    126  5000 ????	       00 91	   M0y_position =	missile0y
    127  5000 ????	       00 e6	   M0y_velocity =	s
    128  5000 ????	       00 af	   Bally_position =	ball_shoot_y
    129  5000 ????	       00 e3	   Bally_velocity =	p
    130  5000 ????	       00 e1	   Safe_Point_P1_y =	n
    131  5000 ????
    132  5000 ????	       00 e0	   Safe_Point_P1_x =	m
    133  5000 ????
    134  5000 ????	       00 df	   _Bit1_Safe_Point_P1_Flip =	l
    135  5000 ????
    136  5000 ????	       00 df	   _Bit0_New_Room_P1_Flip =	l
    137  5000 ????
    138  5000 ????	       00 df	   _BitOp_Flip_positions =	l
    139  5000 ????
    140  5000 ????	       00 de	   roommate_type =	k
    141  5000 ????
    142  5000 ????	       00 dd	   roommate_move_x =	j
    143  5000 ????
    144  5000 ????	       00 dc	   extra_wall_move_x =	i
    145  5000 ????
    146  5000 ????	       00 db	   _Ch0_Counter =	h
    147  5000 ????
    148  5000 ????	       00 da	   _Ch0_Duration =	g
    149  5000 ????
    150  5000 ????	       00 d9	   _Ch0_Sound =	f
    151  5000 ????
    152  5000 ????	       00 d8	   _Bit3_P1_Dir_Right =	e
    153  5000 ????
    154  5000 ????	       00 d8	   _Bit2_P1_Dir_Left =	e
    155  5000 ????
    156  5000 ????	       00 d8	   _Bit1_P1_Dir_Down =	e
    157  5000 ????
    158  5000 ????	       00 d8	   _Bit0_P1_Dir_Up =	e
    159  5000 ????
    160  5000 ????	       00 d8	   _BitOp_P1_Dir =	e
    161  5000 ????
    162  5000 ????	       00 d7	   _Bit3_M0_Dir_Right =	d
    163  5000 ????
    164  5000 ????	       00 d7	   _Bit2_M0_Dir_Left =	d
    165  5000 ????
    166  5000 ????	       00 d7	   _Bit1_M0_Dir_Down =	d
    167  5000 ????
    168  5000 ????	       00 d7	   _Bit0_M0_Dir_Up =	d
    169  5000 ????
    170  5000 ????	       00 d7	   _BitOp_M0_Dir =	d
    171  5000 ????
    172  5000 ????	       00 d6	   _Bit3_Ball_Shot_Dir_Right2 =	c
    173  5000 ????
    174  5000 ????	       00 d6	   _Bit2_Ball_Shot_Dir_Right1 =	c
    175  5000 ????
    176  5000 ????	       00 d6	   _Bit1_Ball_Shot_Dir_Left2 =	c
    177  5000 ????
    178  5000 ????	       00 d6	   _Bit0_Ball_Shot_Dir_Left1 =	c
    179  5000 ????
    180  5000 ????	       00 d6	   _BitOp_Ball_Shot_Dir =	c
    181  5000 ????
    182  5000 ????	       00 d5	   frame_counter =	b
    183  5000 ????
    184  5000 ????	       00 d4	   delay_counter =	a
    185  5000 ????
    186  5000 ????	       00 95	   _sc3       =	score + 2
    187  5000 ????
    188  5000 ????	       00 94	   _sc2       =	score + 1
    189  5000 ????
    190  5000 ????	       00 93	   _sc1       =	score
    191  5000 ????
    192  5000 ????	       00 fe	   _FE	      =	$FE
    193  5000 ????
    194  5000 ????	       00 fc	   _FC	      =	$FC
    195  5000 ????
    196  5000 ????	       00 fa	   _FA	      =	$FA
    197  5000 ????
    198  5000 ????	       00 f8	   _F8	      =	$F8
    199  5000 ????
    200  5000 ????	       00 f6	   _F6	      =	$F6
    201  5000 ????
    202  5000 ????	       00 f4	   _F4	      =	$F4
    203  5000 ????
    204  5000 ????	       00 f2	   _F2	      =	$F2
    205  5000 ????
    206  5000 ????	       00 f0	   _F0	      =	$F0
    207  5000 ????
    208  5000 ????	       00 ee	   _EE	      =	$EE
    209  5000 ????
    210  5000 ????	       00 ec	   _EC	      =	$EC
    211  5000 ????
    212  5000 ????	       00 ea	   _EA	      =	$EA
    213  5000 ????
    214  5000 ????	       00 e8	   _E8	      =	$E8
    215  5000 ????
    216  5000 ????	       00 e6	   _E6	      =	$E6
    217  5000 ????
    218  5000 ????	       00 e4	   _E4	      =	$E4
    219  5000 ????
    220  5000 ????	       00 e2	   _E2	      =	$E2
    221  5000 ????
    222  5000 ????	       00 e0	   _E0	      =	$E0
    223  5000 ????
    224  5000 ????	       00 de	   _DE	      =	$DE
    225  5000 ????
    226  5000 ????	       00 dc	   _DC	      =	$DC
    227  5000 ????
    228  5000 ????	       00 da	   _DA	      =	$DA
    229  5000 ????
    230  5000 ????	       00 d8	   _D8	      =	$D8
    231  5000 ????
    232  5000 ????	       00 d6	   _D6	      =	$D6
    233  5000 ????
    234  5000 ????	       00 d4	   _D4	      =	$D4
    235  5000 ????
    236  5000 ????	       00 d2	   _D2	      =	$D2
    237  5000 ????
    238  5000 ????	       00 d0	   _D0	      =	$D0
    239  5000 ????
    240  5000 ????	       00 ce	   _CE	      =	$CE
    241  5000 ????
    242  5000 ????	       00 cc	   _CC	      =	$CC
    243  5000 ????
    244  5000 ????	       00 ca	   _CA	      =	$CA
    245  5000 ????
    246  5000 ????	       00 c8	   _C8	      =	$C8
    247  5000 ????
    248  5000 ????	       00 c6	   _C6	      =	$C6
    249  5000 ????
    250  5000 ????	       00 c4	   _C4	      =	$C4
    251  5000 ????
    252  5000 ????	       00 c2	   _C2	      =	$C2
    253  5000 ????
    254  5000 ????	       00 c0	   _C0	      =	$C0
    255  5000 ????
    256  5000 ????	       00 be	   _BE	      =	$BE
    257  5000 ????
    258  5000 ????	       00 bc	   _BC	      =	$BC
    259  5000 ????
    260  5000 ????	       00 ba	   _BA	      =	$BA
    261  5000 ????
    262  5000 ????	       00 b8	   _B8	      =	$B8
    263  5000 ????
    264  5000 ????	       00 b6	   _B6	      =	$B6
    265  5000 ????
    266  5000 ????	       00 b4	   _B4	      =	$B4
    267  5000 ????
    268  5000 ????	       00 b2	   _B2	      =	$B2
    269  5000 ????
    270  5000 ????	       00 b0	   _B0	      =	$B0
    271  5000 ????
    272  5000 ????	       00 ae	   _AE	      =	$AE
    273  5000 ????
    274  5000 ????	       00 ac	   _AC	      =	$AC
    275  5000 ????
    276  5000 ????	       00 aa	   _AA	      =	$AA
    277  5000 ????
    278  5000 ????	       00 a8	   _A8	      =	$A8
    279  5000 ????
    280  5000 ????	       00 a6	   _A6	      =	$A6
    281  5000 ????
    282  5000 ????	       00 a4	   _A4	      =	$A4
    283  5000 ????
    284  5000 ????	       00 a2	   _A2	      =	$A2
    285  5000 ????
    286  5000 ????	       00 a0	   _A0	      =	$A0
    287  5000 ????
    288  5000 ????	       00 9e	   _9E	      =	$9E
    289  5000 ????
    290  5000 ????	       00 9c	   _9C	      =	$9C
    291  5000 ????
    292  5000 ????	       00 9a	   _9A	      =	$9A
    293  5000 ????
    294  5000 ????	       00 98	   _98	      =	$98
    295  5000 ????
    296  5000 ????	       00 96	   _96	      =	$96
    297  5000 ????
    298  5000 ????	       00 94	   _94	      =	$94
    299  5000 ????
    300  5000 ????	       00 92	   _92	      =	$92
    301  5000 ????
    302  5000 ????	       00 90	   _90	      =	$90
    303  5000 ????
    304  5000 ????	       00 8e	   _8E	      =	$8E
    305  5000 ????
    306  5000 ????	       00 8c	   _8C	      =	$8C
    307  5000 ????
    308  5000 ????	       00 8a	   _8A	      =	$8A
    309  5000 ????
    310  5000 ????	       00 88	   _88	      =	$88
    311  5000 ????
    312  5000 ????	       00 86	   _86	      =	$86
    313  5000 ????
    314  5000 ????	       00 84	   _84	      =	$84
    315  5000 ????
    316  5000 ????	       00 82	   _82	      =	$82
    317  5000 ????
    318  5000 ????	       00 80	   _80	      =	$80
    319  5000 ????
    320  5000 ????	       00 7e	   _7E	      =	$7E
    321  5000 ????
    322  5000 ????	       00 7c	   _7C	      =	$7C
    323  5000 ????
    324  5000 ????	       00 7a	   _7A	      =	$7A
    325  5000 ????
    326  5000 ????	       00 78	   _78	      =	$78
    327  5000 ????
    328  5000 ????	       00 76	   _76	      =	$76
    329  5000 ????
    330  5000 ????	       00 74	   _74	      =	$74
    331  5000 ????
    332  5000 ????	       00 72	   _72	      =	$72
    333  5000 ????
    334  5000 ????	       00 70	   _70	      =	$70
    335  5000 ????
    336  5000 ????	       00 6e	   _6E	      =	$6E
    337  5000 ????
    338  5000 ????	       00 6c	   _6C	      =	$6C
    339  5000 ????
    340  5000 ????	       00 6a	   _6A	      =	$6A
    341  5000 ????
    342  5000 ????	       00 68	   _68	      =	$68
    343  5000 ????
    344  5000 ????	       00 66	   _66	      =	$66
    345  5000 ????
    346  5000 ????	       00 64	   _64	      =	$64
    347  5000 ????
    348  5000 ????	       00 62	   _62	      =	$62
    349  5000 ????
    350  5000 ????	       00 60	   _60	      =	$60
    351  5000 ????
    352  5000 ????	       00 5e	   _5E	      =	$5E
    353  5000 ????
    354  5000 ????	       00 5c	   _5C	      =	$5C
    355  5000 ????
    356  5000 ????	       00 5a	   _5A	      =	$5A
    357  5000 ????
    358  5000 ????	       00 58	   _58	      =	$58
    359  5000 ????
    360  5000 ????	       00 56	   _56	      =	$56
    361  5000 ????
    362  5000 ????	       00 54	   _54	      =	$54
    363  5000 ????
    364  5000 ????	       00 52	   _52	      =	$52
    365  5000 ????
    366  5000 ????	       00 50	   _50	      =	$50
    367  5000 ????
    368  5000 ????	       00 4e	   _4E	      =	$4E
    369  5000 ????
    370  5000 ????	       00 4c	   _4C	      =	$4C
    371  5000 ????
    372  5000 ????	       00 4a	   _4A	      =	$4A
    373  5000 ????
    374  5000 ????	       00 48	   _48	      =	$48
    375  5000 ????
    376  5000 ????	       00 46	   _46	      =	$46
    377  5000 ????
    378  5000 ????	       00 44	   _44	      =	$44
    379  5000 ????
    380  5000 ????	       00 42	   _42	      =	$42
    381  5000 ????
    382  5000 ????	       00 40	   _40	      =	$40
    383  5000 ????
    384  5000 ????	       00 3e	   _3E	      =	$3E
    385  5000 ????
    386  5000 ????	       00 3c	   _3C	      =	$3C
    387  5000 ????
    388  5000 ????	       00 3a	   _3A	      =	$3A
    389  5000 ????
    390  5000 ????	       00 38	   _38	      =	$38
    391  5000 ????
    392  5000 ????	       00 36	   _36	      =	$36
    393  5000 ????
    394  5000 ????	       00 34	   _34	      =	$34
    395  5000 ????
    396  5000 ????	       00 32	   _32	      =	$32
    397  5000 ????
    398  5000 ????	       00 30	   _30	      =	$30
    399  5000 ????
    400  5000 ????	       00 2e	   _2E	      =	$2E
    401  5000 ????
    402  5000 ????	       00 2c	   _2C	      =	$2C
    403  5000 ????
    404  5000 ????	       00 2a	   _2A	      =	$2A
    405  5000 ????
    406  5000 ????	       00 28	   _28	      =	$28
    407  5000 ????
    408  5000 ????	       00 26	   _26	      =	$26
    409  5000 ????
    410  5000 ????	       00 24	   _24	      =	$24
    411  5000 ????
    412  5000 ????	       00 22	   _22	      =	$22
    413  5000 ????
    414  5000 ????	       00 20	   _20	      =	$20
    415  5000 ????
    416  5000 ????	       00 1e	   _1E	      =	$1E
    417  5000 ????
    418  5000 ????	       00 1c	   _1C	      =	$1C
    419  5000 ????
    420  5000 ????	       00 1a	   _1A	      =	$1A
    421  5000 ????
    422  5000 ????	       00 18	   _18	      =	$18
    423  5000 ????
    424  5000 ????	       00 16	   _16	      =	$16
    425  5000 ????
    426  5000 ????	       00 14	   _14	      =	$14
    427  5000 ????
    428  5000 ????	       00 12	   _12	      =	$12
    429  5000 ????
    430  5000 ????	       00 10	   _10	      =	$10
    431  5000 ????
    432  5000 ????	       00 0e	   _0E	      =	$0E
    433  5000 ????
    434  5000 ????	       00 0c	   _0C	      =	$0C
    435  5000 ????
    436  5000 ????	       00 0a	   _0A	      =	$0A
    437  5000 ????
    438  5000 ????	       00 08	   _08	      =	$08
    439  5000 ????
    440  5000 ????	       00 06	   _06	      =	$06
    441  5000 ????
    442  5000 ????	       00 04	   _04	      =	$04
    443  5000 ????
    444  5000 ????	       00 02	   _02	      =	$02
    445  5000 ????
    446  5000 ????	       00 00	   _00	      =	$00
    447  5000 ????
    448  5000 ????	       00 09	   req_load_menu =	9
    449  5000 ????
    450  5000 ????	       00 08	   req_safe_point =	8
    451  5000 ????
    452  5000 ????	       00 07	   req_level_reset =	7
    453  5000 ????
    454  5000 ????	       00 06	   req_move_down =	6
    455  5000 ????
    456  5000 ????	       00 05	   req_move_right =	5
    457  5000 ????
    458  5000 ????	       00 04	   req_move_up =	4
    459  5000 ????
    460  5000 ????	       00 03	   req_move_left =	3
    461  5000 ????
    462  5000 ????	       00 02	   req_game_over =	2
    463  5000 ????
    464  5000 ????	       00 01	   req_level_up =	1
    465  5000 ????
    466  5000 ????	       00 00	   req_load   =	0
    467  5000 ????
    468  5000 ????	       00 06	   response_menu_size =	6
    469  5000 ????
    470  5000 ????	       00 1c	   response_size_minus_1 =	28
    471  5000 ????
    472  5000 ????	       00 94	   _M_Edge_Right =	148
    473  5000 ????
    474  5000 ????	       00 0e	   _M_Edge_Left =	14
    475  5000 ????
    476  5000 ????	       00 58	   _M_Edge_Bottom =	88
    477  5000 ????
    478  5000 ????	       00 02	   _M_Edge_Top =	2
    479  5000 ????
    480  5000 ????	       00 4c	   player_max_y =	76
    481  5000 ????
    482  5000 ????	       00 02	   player_min_y =	2
    483  5000 ????
    484  5000 ????	       00 86	   player_max_x =	134
    485  5000 ????
    486  5000 ????	       00 0a	   player_min_x =	10
    487  5000 ????
    488  5000 ????	       00 08	   textbkcolor =	$08
    489  5000 ????
    490  5000 ????	       00 08	   scorebkcolor =	$08
    491  5000 ????
    492  5000 ????	       00 01	   pfscore    =	1
    493  5000 ????
    494  5000 ????	       00 04	   pfres      =	4
    495  5000 ????
    496  5000 ????	       00 01	   superchip  =	1
    497  5000 ????	       00 03	   bs_mask    =	3
    498  5000 ????	       00 10	   bankswitch =	16
    499  5000 ????	       1f f6	   bankswitch_hotspot =	$1FF6
    500  5000 ????	       00 01	   PFcolors   =	1
    501  5000 ????	       00 01	   player1colors =	1
------- FILE d:\Firmaplus\Firmaplus_intern\Atari\PlusROM\Projekte-batariBasic\CaveApocalypse\C.A.V.E. Apocalypse.bas.asm
      8  5000 ????				      ifconst	bankswitch
      9  5000 ????			  -	      if	bankswitch == 8
     10  5000 ????			  -	      ORG	$1000
     11  5000 ????			  -	      RORG	$D000
     12  5000 ????				      endif
     13  5000 ????				      if	bankswitch == 16
     14  1000					      ORG	$1000
     15  1000					      RORG	$9000
     16  1000					      endif
     17  1000				  -	      if	bankswitch == 32
     18  1000				  -	      ORG	$1000
     19  1000				  -	      RORG	$1000
     20  1000					      endif
     21  1000				  -	      if	bankswitch == 64
     22  1000				  -	      ORG	$1000
     23  1000				  -	      RORG	$1000
     24  1000					      endif
     25  1000				  -	      else
     26  1000				  -	      ORG	$F000
     27  1000					      endif
     28  1000					      repeat	256
     29  1000		       ff		      .byte.b	$ff
     28  1000					      repend
     29  1001		       ff		      .byte.b	$ff
     28  1001					      repend
     29  1002		       ff		      .byte.b	$ff
     28  1002					      repend
     29  1003		       ff		      .byte.b	$ff
     28  1003					      repend
     29  1004		       ff		      .byte.b	$ff
     28  1004					      repend
     29  1005		       ff		      .byte.b	$ff
     28  1005					      repend
     29  1006		       ff		      .byte.b	$ff
     28  1006					      repend
     29  1007		       ff		      .byte.b	$ff
     28  1007					      repend
     29  1008		       ff		      .byte.b	$ff
     28  1008					      repend
     29  1009		       ff		      .byte.b	$ff
     28  1009					      repend
     29  100a		       ff		      .byte.b	$ff
     28  100a					      repend
     29  100b		       ff		      .byte.b	$ff
     28  100b					      repend
     29  100c		       ff		      .byte.b	$ff
     28  100c					      repend
     29  100d		       ff		      .byte.b	$ff
     28  100d					      repend
     29  100e		       ff		      .byte.b	$ff
     28  100e					      repend
     29  100f		       ff		      .byte.b	$ff
     28  100f					      repend
     29  1010		       ff		      .byte.b	$ff
     28  1010					      repend
     29  1011		       ff		      .byte.b	$ff
     28  1011					      repend
     29  1012		       ff		      .byte.b	$ff
     28  1012					      repend
     29  1013		       ff		      .byte.b	$ff
     28  1013					      repend
     29  1014		       ff		      .byte.b	$ff
     28  1014					      repend
     29  1015		       ff		      .byte.b	$ff
     28  1015					      repend
     29  1016		       ff		      .byte.b	$ff
     28  1016					      repend
     29  1017		       ff		      .byte.b	$ff
     28  1017					      repend
     29  1018		       ff		      .byte.b	$ff
     28  1018					      repend
     29  1019		       ff		      .byte.b	$ff
     28  1019					      repend
     29  101a		       ff		      .byte.b	$ff
     28  101a					      repend
     29  101b		       ff		      .byte.b	$ff
     28  101b					      repend
     29  101c		       ff		      .byte.b	$ff
     28  101c					      repend
     29  101d		       ff		      .byte.b	$ff
     28  101d					      repend
     29  101e		       ff		      .byte.b	$ff
     28  101e					      repend
     29  101f		       ff		      .byte.b	$ff
     28  101f					      repend
     29  1020		       ff		      .byte.b	$ff
     28  1020					      repend
     29  1021		       ff		      .byte.b	$ff
     28  1021					      repend
     29  1022		       ff		      .byte.b	$ff
     28  1022					      repend
     29  1023		       ff		      .byte.b	$ff
     28  1023					      repend
     29  1024		       ff		      .byte.b	$ff
     28  1024					      repend
     29  1025		       ff		      .byte.b	$ff
     28  1025					      repend
     29  1026		       ff		      .byte.b	$ff
     28  1026					      repend
     29  1027		       ff		      .byte.b	$ff
     28  1027					      repend
     29  1028		       ff		      .byte.b	$ff
     28  1028					      repend
     29  1029		       ff		      .byte.b	$ff
     28  1029					      repend
     29  102a		       ff		      .byte.b	$ff
     28  102a					      repend
     29  102b		       ff		      .byte.b	$ff
     28  102b					      repend
     29  102c		       ff		      .byte.b	$ff
     28  102c					      repend
     29  102d		       ff		      .byte.b	$ff
     28  102d					      repend
     29  102e		       ff		      .byte.b	$ff
     28  102e					      repend
     29  102f		       ff		      .byte.b	$ff
     28  102f					      repend
     29  1030		       ff		      .byte.b	$ff
     28  1030					      repend
     29  1031		       ff		      .byte.b	$ff
     28  1031					      repend
     29  1032		       ff		      .byte.b	$ff
     28  1032					      repend
     29  1033		       ff		      .byte.b	$ff
     28  1033					      repend
     29  1034		       ff		      .byte.b	$ff
     28  1034					      repend
     29  1035		       ff		      .byte.b	$ff
     28  1035					      repend
     29  1036		       ff		      .byte.b	$ff
     28  1036					      repend
     29  1037		       ff		      .byte.b	$ff
     28  1037					      repend
     29  1038		       ff		      .byte.b	$ff
     28  1038					      repend
     29  1039		       ff		      .byte.b	$ff
     28  1039					      repend
     29  103a		       ff		      .byte.b	$ff
     28  103a					      repend
     29  103b		       ff		      .byte.b	$ff
     28  103b					      repend
     29  103c		       ff		      .byte.b	$ff
     28  103c					      repend
     29  103d		       ff		      .byte.b	$ff
     28  103d					      repend
     29  103e		       ff		      .byte.b	$ff
     28  103e					      repend
     29  103f		       ff		      .byte.b	$ff
     28  103f					      repend
     29  1040		       ff		      .byte.b	$ff
     28  1040					      repend
     29  1041		       ff		      .byte.b	$ff
     28  1041					      repend
     29  1042		       ff		      .byte.b	$ff
     28  1042					      repend
     29  1043		       ff		      .byte.b	$ff
     28  1043					      repend
     29  1044		       ff		      .byte.b	$ff
     28  1044					      repend
     29  1045		       ff		      .byte.b	$ff
     28  1045					      repend
     29  1046		       ff		      .byte.b	$ff
     28  1046					      repend
     29  1047		       ff		      .byte.b	$ff
     28  1047					      repend
     29  1048		       ff		      .byte.b	$ff
     28  1048					      repend
     29  1049		       ff		      .byte.b	$ff
     28  1049					      repend
     29  104a		       ff		      .byte.b	$ff
     28  104a					      repend
     29  104b		       ff		      .byte.b	$ff
     28  104b					      repend
     29  104c		       ff		      .byte.b	$ff
     28  104c					      repend
     29  104d		       ff		      .byte.b	$ff
     28  104d					      repend
     29  104e		       ff		      .byte.b	$ff
     28  104e					      repend
     29  104f		       ff		      .byte.b	$ff
     28  104f					      repend
     29  1050		       ff		      .byte.b	$ff
     28  1050					      repend
     29  1051		       ff		      .byte.b	$ff
     28  1051					      repend
     29  1052		       ff		      .byte.b	$ff
     28  1052					      repend
     29  1053		       ff		      .byte.b	$ff
     28  1053					      repend
     29  1054		       ff		      .byte.b	$ff
     28  1054					      repend
     29  1055		       ff		      .byte.b	$ff
     28  1055					      repend
     29  1056		       ff		      .byte.b	$ff
     28  1056					      repend
     29  1057		       ff		      .byte.b	$ff
     28  1057					      repend
     29  1058		       ff		      .byte.b	$ff
     28  1058					      repend
     29  1059		       ff		      .byte.b	$ff
     28  1059					      repend
     29  105a		       ff		      .byte.b	$ff
     28  105a					      repend
     29  105b		       ff		      .byte.b	$ff
     28  105b					      repend
     29  105c		       ff		      .byte.b	$ff
     28  105c					      repend
     29  105d		       ff		      .byte.b	$ff
     28  105d					      repend
     29  105e		       ff		      .byte.b	$ff
     28  105e					      repend
     29  105f		       ff		      .byte.b	$ff
     28  105f					      repend
     29  1060		       ff		      .byte.b	$ff
     28  1060					      repend
     29  1061		       ff		      .byte.b	$ff
     28  1061					      repend
     29  1062		       ff		      .byte.b	$ff
     28  1062					      repend
     29  1063		       ff		      .byte.b	$ff
     28  1063					      repend
     29  1064		       ff		      .byte.b	$ff
     28  1064					      repend
     29  1065		       ff		      .byte.b	$ff
     28  1065					      repend
     29  1066		       ff		      .byte.b	$ff
     28  1066					      repend
     29  1067		       ff		      .byte.b	$ff
     28  1067					      repend
     29  1068		       ff		      .byte.b	$ff
     28  1068					      repend
     29  1069		       ff		      .byte.b	$ff
     28  1069					      repend
     29  106a		       ff		      .byte.b	$ff
     28  106a					      repend
     29  106b		       ff		      .byte.b	$ff
     28  106b					      repend
     29  106c		       ff		      .byte.b	$ff
     28  106c					      repend
     29  106d		       ff		      .byte.b	$ff
     28  106d					      repend
     29  106e		       ff		      .byte.b	$ff
     28  106e					      repend
     29  106f		       ff		      .byte.b	$ff
     28  106f					      repend
     29  1070		       ff		      .byte.b	$ff
     28  1070					      repend
     29  1071		       ff		      .byte.b	$ff
     28  1071					      repend
     29  1072		       ff		      .byte.b	$ff
     28  1072					      repend
     29  1073		       ff		      .byte.b	$ff
     28  1073					      repend
     29  1074		       ff		      .byte.b	$ff
     28  1074					      repend
     29  1075		       ff		      .byte.b	$ff
     28  1075					      repend
     29  1076		       ff		      .byte.b	$ff
     28  1076					      repend
     29  1077		       ff		      .byte.b	$ff
     28  1077					      repend
     29  1078		       ff		      .byte.b	$ff
     28  1078					      repend
     29  1079		       ff		      .byte.b	$ff
     28  1079					      repend
     29  107a		       ff		      .byte.b	$ff
     28  107a					      repend
     29  107b		       ff		      .byte.b	$ff
     28  107b					      repend
     29  107c		       ff		      .byte.b	$ff
     28  107c					      repend
     29  107d		       ff		      .byte.b	$ff
     28  107d					      repend
     29  107e		       ff		      .byte.b	$ff
     28  107e					      repend
     29  107f		       ff		      .byte.b	$ff
     28  107f					      repend
     29  1080		       ff		      .byte.b	$ff
     28  1080					      repend
     29  1081		       ff		      .byte.b	$ff
     28  1081					      repend
     29  1082		       ff		      .byte.b	$ff
     28  1082					      repend
     29  1083		       ff		      .byte.b	$ff
     28  1083					      repend
     29  1084		       ff		      .byte.b	$ff
     28  1084					      repend
     29  1085		       ff		      .byte.b	$ff
     28  1085					      repend
     29  1086		       ff		      .byte.b	$ff
     28  1086					      repend
     29  1087		       ff		      .byte.b	$ff
     28  1087					      repend
     29  1088		       ff		      .byte.b	$ff
     28  1088					      repend
     29  1089		       ff		      .byte.b	$ff
     28  1089					      repend
     29  108a		       ff		      .byte.b	$ff
     28  108a					      repend
     29  108b		       ff		      .byte.b	$ff
     28  108b					      repend
     29  108c		       ff		      .byte.b	$ff
     28  108c					      repend
     29  108d		       ff		      .byte.b	$ff
     28  108d					      repend
     29  108e		       ff		      .byte.b	$ff
     28  108e					      repend
     29  108f		       ff		      .byte.b	$ff
     28  108f					      repend
     29  1090		       ff		      .byte.b	$ff
     28  1090					      repend
     29  1091		       ff		      .byte.b	$ff
     28  1091					      repend
     29  1092		       ff		      .byte.b	$ff
     28  1092					      repend
     29  1093		       ff		      .byte.b	$ff
     28  1093					      repend
     29  1094		       ff		      .byte.b	$ff
     28  1094					      repend
     29  1095		       ff		      .byte.b	$ff
     28  1095					      repend
     29  1096		       ff		      .byte.b	$ff
     28  1096					      repend
     29  1097		       ff		      .byte.b	$ff
     28  1097					      repend
     29  1098		       ff		      .byte.b	$ff
     28  1098					      repend
     29  1099		       ff		      .byte.b	$ff
     28  1099					      repend
     29  109a		       ff		      .byte.b	$ff
     28  109a					      repend
     29  109b		       ff		      .byte.b	$ff
     28  109b					      repend
     29  109c		       ff		      .byte.b	$ff
     28  109c					      repend
     29  109d		       ff		      .byte.b	$ff
     28  109d					      repend
     29  109e		       ff		      .byte.b	$ff
     28  109e					      repend
     29  109f		       ff		      .byte.b	$ff
     28  109f					      repend
     29  10a0		       ff		      .byte.b	$ff
     28  10a0					      repend
     29  10a1		       ff		      .byte.b	$ff
     28  10a1					      repend
     29  10a2		       ff		      .byte.b	$ff
     28  10a2					      repend
     29  10a3		       ff		      .byte.b	$ff
     28  10a3					      repend
     29  10a4		       ff		      .byte.b	$ff
     28  10a4					      repend
     29  10a5		       ff		      .byte.b	$ff
     28  10a5					      repend
     29  10a6		       ff		      .byte.b	$ff
     28  10a6					      repend
     29  10a7		       ff		      .byte.b	$ff
     28  10a7					      repend
     29  10a8		       ff		      .byte.b	$ff
     28  10a8					      repend
     29  10a9		       ff		      .byte.b	$ff
     28  10a9					      repend
     29  10aa		       ff		      .byte.b	$ff
     28  10aa					      repend
     29  10ab		       ff		      .byte.b	$ff
     28  10ab					      repend
     29  10ac		       ff		      .byte.b	$ff
     28  10ac					      repend
     29  10ad		       ff		      .byte.b	$ff
     28  10ad					      repend
     29  10ae		       ff		      .byte.b	$ff
     28  10ae					      repend
     29  10af		       ff		      .byte.b	$ff
     28  10af					      repend
     29  10b0		       ff		      .byte.b	$ff
     28  10b0					      repend
     29  10b1		       ff		      .byte.b	$ff
     28  10b1					      repend
     29  10b2		       ff		      .byte.b	$ff
     28  10b2					      repend
     29  10b3		       ff		      .byte.b	$ff
     28  10b3					      repend
     29  10b4		       ff		      .byte.b	$ff
     28  10b4					      repend
     29  10b5		       ff		      .byte.b	$ff
     28  10b5					      repend
     29  10b6		       ff		      .byte.b	$ff
     28  10b6					      repend
     29  10b7		       ff		      .byte.b	$ff
     28  10b7					      repend
     29  10b8		       ff		      .byte.b	$ff
     28  10b8					      repend
     29  10b9		       ff		      .byte.b	$ff
     28  10b9					      repend
     29  10ba		       ff		      .byte.b	$ff
     28  10ba					      repend
     29  10bb		       ff		      .byte.b	$ff
     28  10bb					      repend
     29  10bc		       ff		      .byte.b	$ff
     28  10bc					      repend
     29  10bd		       ff		      .byte.b	$ff
     28  10bd					      repend
     29  10be		       ff		      .byte.b	$ff
     28  10be					      repend
     29  10bf		       ff		      .byte.b	$ff
     28  10bf					      repend
     29  10c0		       ff		      .byte.b	$ff
     28  10c0					      repend
     29  10c1		       ff		      .byte.b	$ff
     28  10c1					      repend
     29  10c2		       ff		      .byte.b	$ff
     28  10c2					      repend
     29  10c3		       ff		      .byte.b	$ff
     28  10c3					      repend
     29  10c4		       ff		      .byte.b	$ff
     28  10c4					      repend
     29  10c5		       ff		      .byte.b	$ff
     28  10c5					      repend
     29  10c6		       ff		      .byte.b	$ff
     28  10c6					      repend
     29  10c7		       ff		      .byte.b	$ff
     28  10c7					      repend
     29  10c8		       ff		      .byte.b	$ff
     28  10c8					      repend
     29  10c9		       ff		      .byte.b	$ff
     28  10c9					      repend
     29  10ca		       ff		      .byte.b	$ff
     28  10ca					      repend
     29  10cb		       ff		      .byte.b	$ff
     28  10cb					      repend
     29  10cc		       ff		      .byte.b	$ff
     28  10cc					      repend
     29  10cd		       ff		      .byte.b	$ff
     28  10cd					      repend
     29  10ce		       ff		      .byte.b	$ff
     28  10ce					      repend
     29  10cf		       ff		      .byte.b	$ff
     28  10cf					      repend
     29  10d0		       ff		      .byte.b	$ff
     28  10d0					      repend
     29  10d1		       ff		      .byte.b	$ff
     28  10d1					      repend
     29  10d2		       ff		      .byte.b	$ff
     28  10d2					      repend
     29  10d3		       ff		      .byte.b	$ff
     28  10d3					      repend
     29  10d4		       ff		      .byte.b	$ff
     28  10d4					      repend
     29  10d5		       ff		      .byte.b	$ff
     28  10d5					      repend
     29  10d6		       ff		      .byte.b	$ff
     28  10d6					      repend
     29  10d7		       ff		      .byte.b	$ff
     28  10d7					      repend
     29  10d8		       ff		      .byte.b	$ff
     28  10d8					      repend
     29  10d9		       ff		      .byte.b	$ff
     28  10d9					      repend
     29  10da		       ff		      .byte.b	$ff
     28  10da					      repend
     29  10db		       ff		      .byte.b	$ff
     28  10db					      repend
     29  10dc		       ff		      .byte.b	$ff
     28  10dc					      repend
     29  10dd		       ff		      .byte.b	$ff
     28  10dd					      repend
     29  10de		       ff		      .byte.b	$ff
     28  10de					      repend
     29  10df		       ff		      .byte.b	$ff
     28  10df					      repend
     29  10e0		       ff		      .byte.b	$ff
     28  10e0					      repend
     29  10e1		       ff		      .byte.b	$ff
     28  10e1					      repend
     29  10e2		       ff		      .byte.b	$ff
     28  10e2					      repend
     29  10e3		       ff		      .byte.b	$ff
     28  10e3					      repend
     29  10e4		       ff		      .byte.b	$ff
     28  10e4					      repend
     29  10e5		       ff		      .byte.b	$ff
     28  10e5					      repend
     29  10e6		       ff		      .byte.b	$ff
     28  10e6					      repend
     29  10e7		       ff		      .byte.b	$ff
     28  10e7					      repend
     29  10e8		       ff		      .byte.b	$ff
     28  10e8					      repend
     29  10e9		       ff		      .byte.b	$ff
     28  10e9					      repend
     29  10ea		       ff		      .byte.b	$ff
     28  10ea					      repend
     29  10eb		       ff		      .byte.b	$ff
     28  10eb					      repend
     29  10ec		       ff		      .byte.b	$ff
     28  10ec					      repend
     29  10ed		       ff		      .byte.b	$ff
     28  10ed					      repend
     29  10ee		       ff		      .byte.b	$ff
     28  10ee					      repend
     29  10ef		       ff		      .byte.b	$ff
     28  10ef					      repend
     29  10f0		       ff		      .byte.b	$ff
     28  10f0					      repend
     29  10f1		       ff		      .byte.b	$ff
     28  10f1					      repend
     29  10f2		       ff		      .byte.b	$ff
     28  10f2					      repend
     29  10f3		       ff		      .byte.b	$ff
     28  10f3					      repend
     29  10f4		       ff		      .byte.b	$ff
     28  10f4					      repend
     29  10f5		       ff		      .byte.b	$ff
     28  10f5					      repend
     29  10f6		       ff		      .byte.b	$ff
     28  10f6					      repend
     29  10f7		       ff		      .byte.b	$ff
     28  10f7					      repend
     29  10f8		       ff		      .byte.b	$ff
     28  10f8					      repend
     29  10f9		       ff		      .byte.b	$ff
     28  10f9					      repend
     29  10fa		       ff		      .byte.b	$ff
     28  10fa					      repend
     29  10fb		       ff		      .byte.b	$ff
     28  10fb					      repend
     29  10fc		       ff		      .byte.b	$ff
     28  10fc					      repend
     29  10fd		       ff		      .byte.b	$ff
     28  10fd					      repend
     29  10fe		       ff		      .byte.b	$ff
     28  10fe					      repend
     29  10ff		       ff		      .byte.b	$ff
     30  1100					      repend
     31  1100				   game
     32  1100				   .L00 		;  inline PlusROM_functions.asm
     33  1100
------- FILE PlusROM_functions.asm LEVEL 2 PASS 3
      0  1100					      include	PlusROM_functions.asm
      1  1100		       00 01	   PlusROM_functions =	1
      2  1100		       1f f0	   WriteToBuffer =	$1ff0
      3  1100		       1f f1	   WriteSendBuffer =	$1ff1
      4  1100		       1f f2	   ReceiveBuffer =	$1ff2
      5  1100		       1f f3	   ReceiveBufferSize =	$1ff3
      6  1100
      7  1100					      MAC	set_plusrom_api
      8  1100				   OLD_RORG   =	*
      9  1100					      REND
     10  1100				   PlusROM_API
     11  1100					      .byte	{1}, 0, {2}, 0
     12  1100					      ECHO	"Size of PlusROM API definition: ", [( * - PlusROM_API )]d
     13  1100					      RORG	(OLD_RORG + ( * - PlusROM_API ))
     14  1100					      ENDM		; {1} = path, {2} = domain
     15  1100
------- FILE d:\Firmaplus\Firmaplus_intern\Atari\PlusROM\Projekte-batariBasic\CaveApocalypse\C.A.V.E. Apocalypse.bas.asm
     35  1100
     36  1100				   .
     37  1100							; 
     38  1100
     39  1100				   .L01 		;  set kernel_options pfcolors player1colors
     40  1100
     41  1100				   .L02 		;  set romsize 16kSC
     42  1100
     43  1100				   .L03 		;  set smartbranching on
     44  1100
     45  1100				   .
     46  1100							; 
     47  1100
     48  1100				   .L04 		;  const pfres = 4
     49  1100
     50  1100				   .L05 		;  const pfscore = 1
     51  1100
     52  1100				   .L06 		;  const scorebkcolor = $08
     53  1100
     54  1100				   .L07 		;  const textbkcolor = $08
     55  1100
     56  1100				   .
     57  1100							; 
     58  1100
     59  1100				   .L08 		;  rem gravity is acceleration (https://atariage.com/forums/topic/226881-gravity/?do=findComment&comment=3017307)
     60  1100
     61  1100				   .L09 		;  rem by AA user bogax (https://atariage.com/forums/profile/22687-bogax/)
     62  1100
     63  1100				   .L010		;  rem the smallest fraction is 1/256 rounded up here to 0.004
     64  1100
     65  1100				   .L011		;  rem assuming gravity is applied each drawscreen this should
     66  1100
     67  1100				   .L012		;  rem work out to ~7 pixels in 1 second, 28 pixels in 2 seconds
     68  1100
     69  1100				   .L013		;  rem 63 pixels in 3 seconds
     70  1100
     71  1100							;.gravity_player1.0.004.
     72  1100				   .L014		;  def gravity_player1 = 0.004
     73  1100
     74  1100							;.gravity_ball.0.008.
     75  1100				   .L015		;  def gravity_ball = 0.008
     76  1100
     77  1100							;.gravity_missile0.0.024.
     78  1100				   .L016		;  def gravity_missile0 = 0.024
     79  1100
     80  1100				   .
     81  1100							; 
     82  1100
     83  1100				   .L017		;  const player_min_x	=  10
     84  1100
     85  1100				   .L018		;  const player_max_x	=  134
     86  1100
     87  1100				   .L019		;  const player_min_y	=  2
     88  1100
     89  1100				   .L020		;  const player_max_y	=  76
     90  1100
     91  1100				   .L021		;  const _M_Edge_Top  =  2
     92  1100
     93  1100				   .L022		;  const _M_Edge_Bottom  =  88
     94  1100
     95  1100				   .L023		;  const _M_Edge_Left	=  14
     96  1100
     97  1100				   .L024		;  const _M_Edge_Right  =  148
     98  1100
     99  1100				   .
    100  1100							; 
    101  1100
    102  1100				   .L025		;  const response_size_minus_1  =  28
    103  1100
    104  1100				   .L026		;  const response_menu_size  =  6
    105  1100
    106  1100				   .
    107  1100							; 
    108  1100
    109  1100							;.bonus_level_timer.100.
    110  1100				   .L027		;  def bonus_level_timer = 100
    111  1100
    112  1100							;.bonus_level_lives.200.
    113  1100				   .L028		;  def bonus_level_lives = 200
    114  1100
    115  1100							;.bonus_hit_wall.10.
    116  1100				   .L029		;  def bonus_hit_wall = 10
    117  1100
    118  1100							;.bonus_hit_active_wall.30.
    119  1100				   .L030		;  def bonus_hit_active_wall = 30
    120  1100
    121  1100							;.bonus_hit_air_missile.40.
    122  1100				   .L031		;  def bonus_hit_air_missile = 40
    123  1100
    124  1100							;.bonus_hit_tank.60.
    125  1100				   .L032		;  def bonus_hit_tank = 60
    126  1100
    127  1100							;.bonus_man_rescue.150.
    128  1100				   .L033		;  def bonus_man_rescue = 150
    129  1100
    130  1100				   .
    131  1100							; 
    132  1100
    133  1100				   .
    134  1100							; 
    135  1100
    136  1100				   .
    137  1100							; 
    138  1100
    139  1100				   .L034		;  const req_load  =  0
    140  1100
    141  1100				   .L035		;  const req_level_up	=  1
    142  1100
    143  1100				   .L036		;  const req_game_over  =  2
    144  1100
    145  1100				   .L037		;  const req_move_left  =  3
    146  1100
    147  1100				   .L038		;  const req_move_up  =  4
    148  1100
    149  1100				   .L039		;  const req_move_right  =  5
    150  1100
    151  1100				   .L040		;  const req_move_down  =  6
    152  1100
    153  1100				   .L041		;  const req_level_reset  =  7
    154  1100
    155  1100				   .L042		;  const req_safe_point  =  8
    156  1100
    157  1100				   .L043		;  const req_load_menu  =  9
    158  1100
    159  1100				   .
    160  1100							; 
    161  1100
    162  1100				   .L044		;  const _00  =  $00
    163  1100
    164  1100				   .L045		;  const _02  =  $02
    165  1100
    166  1100				   .L046		;  const _04  =  $04
    167  1100
    168  1100				   .L047		;  const _06  =  $06
    169  1100
    170  1100				   .L048		;  const _08  =  $08
    171  1100
    172  1100				   .L049		;  const _0A  =  $0A
    173  1100
    174  1100				   .L050		;  const _0C  =  $0C
    175  1100
    176  1100				   .L051		;  const _0E  =  $0E
    177  1100
    178  1100				   .L052		;  const _10  =  $10
    179  1100
    180  1100				   .L053		;  const _12  =  $12
    181  1100
    182  1100				   .L054		;  const _14  =  $14
    183  1100
    184  1100				   .L055		;  const _16  =  $16
    185  1100
    186  1100				   .L056		;  const _18  =  $18
    187  1100
    188  1100				   .L057		;  const _1A  =  $1A
    189  1100
    190  1100				   .L058		;  const _1C  =  $1C
    191  1100
    192  1100				   .L059		;  const _1E  =  $1E
    193  1100
    194  1100				   .L060		;  const _20  =  $20
    195  1100
    196  1100				   .L061		;  const _22  =  $22
    197  1100
    198  1100				   .L062		;  const _24  =  $24
    199  1100
    200  1100				   .L063		;  const _26  =  $26
    201  1100
    202  1100				   .L064		;  const _28  =  $28
    203  1100
    204  1100				   .L065		;  const _2A  =  $2A
    205  1100
    206  1100				   .L066		;  const _2C  =  $2C
    207  1100
    208  1100				   .L067		;  const _2E  =  $2E
    209  1100
    210  1100				   .L068		;  const _30  =  $30
    211  1100
    212  1100				   .L069		;  const _32  =  $32
    213  1100
    214  1100				   .L070		;  const _34  =  $34
    215  1100
    216  1100				   .L071		;  const _36  =  $36
    217  1100
    218  1100				   .L072		;  const _38  =  $38
    219  1100
    220  1100				   .L073		;  const _3A  =  $3A
    221  1100
    222  1100				   .L074		;  const _3C  =  $3C
    223  1100
    224  1100				   .L075		;  const _3E  =  $3E
    225  1100
    226  1100				   .L076		;  const _40  =  $40
    227  1100
    228  1100				   .L077		;  const _42  =  $42
    229  1100
    230  1100				   .L078		;  const _44  =  $44
    231  1100
    232  1100				   .L079		;  const _46  =  $46
    233  1100
    234  1100				   .L080		;  const _48  =  $48
    235  1100
    236  1100				   .L081		;  const _4A  =  $4A
    237  1100
    238  1100				   .L082		;  const _4C  =  $4C
    239  1100
    240  1100				   .L083		;  const _4E  =  $4E
    241  1100
    242  1100				   .L084		;  const _50  =  $50
    243  1100
    244  1100				   .L085		;  const _52  =  $52
    245  1100
    246  1100				   .L086		;  const _54  =  $54
    247  1100
    248  1100				   .L087		;  const _56  =  $56
    249  1100
    250  1100				   .L088		;  const _58  =  $58
    251  1100
    252  1100				   .L089		;  const _5A  =  $5A
    253  1100
    254  1100				   .L090		;  const _5C  =  $5C
    255  1100
    256  1100				   .L091		;  const _5E  =  $5E
    257  1100
    258  1100				   .L092		;  const _60  =  $60
    259  1100
    260  1100				   .L093		;  const _62  =  $62
    261  1100
    262  1100				   .L094		;  const _64  =  $64
    263  1100
    264  1100				   .L095		;  const _66  =  $66
    265  1100
    266  1100				   .L096		;  const _68  =  $68
    267  1100
    268  1100				   .L097		;  const _6A  =  $6A
    269  1100
    270  1100				   .L098		;  const _6C  =  $6C
    271  1100
    272  1100				   .L099		;  const _6E  =  $6E
    273  1100
    274  1100				   .L0100		;  const _70  =  $70
    275  1100
    276  1100				   .L0101		;  const _72  =  $72
    277  1100
    278  1100				   .L0102		;  const _74  =  $74
    279  1100
    280  1100				   .L0103		;  const _76  =  $76
    281  1100
    282  1100				   .L0104		;  const _78  =  $78
    283  1100
    284  1100				   .L0105		;  const _7A  =  $7A
    285  1100
    286  1100				   .L0106		;  const _7C  =  $7C
    287  1100
    288  1100				   .L0107		;  const _7E  =  $7E
    289  1100
    290  1100				   .L0108		;  const _80  =  $80
    291  1100
    292  1100				   .L0109		;  const _82  =  $82
    293  1100
    294  1100				   .L0110		;  const _84  =  $84
    295  1100
    296  1100				   .L0111		;  const _86  =  $86
    297  1100
    298  1100				   .L0112		;  const _88  =  $88
    299  1100
    300  1100				   .L0113		;  const _8A  =  $8A
    301  1100
    302  1100				   .L0114		;  const _8C  =  $8C
    303  1100
    304  1100				   .L0115		;  const _8E  =  $8E
    305  1100
    306  1100				   .L0116		;  const _90  =  $90
    307  1100
    308  1100				   .L0117		;  const _92  =  $92
    309  1100
    310  1100				   .L0118		;  const _94  =  $94
    311  1100
    312  1100				   .L0119		;  const _96  =  $96
    313  1100
    314  1100				   .L0120		;  const _98  =  $98
    315  1100
    316  1100				   .L0121		;  const _9A  =  $9A
    317  1100
    318  1100				   .L0122		;  const _9C  =  $9C
    319  1100
    320  1100				   .L0123		;  const _9E  =  $9E
    321  1100
    322  1100				   .L0124		;  const _A0  =  $A0
    323  1100
    324  1100				   .L0125		;  const _A2  =  $A2
    325  1100
    326  1100				   .L0126		;  const _A4  =  $A4
    327  1100
    328  1100				   .L0127		;  const _A6  =  $A6
    329  1100
    330  1100				   .L0128		;  const _A8  =  $A8
    331  1100
    332  1100				   .L0129		;  const _AA  =  $AA
    333  1100
    334  1100				   .L0130		;  const _AC  =  $AC
    335  1100
    336  1100				   .L0131		;  const _AE  =  $AE
    337  1100
    338  1100				   .L0132		;  const _B0  =  $B0
    339  1100
    340  1100				   .L0133		;  const _B2  =  $B2
    341  1100
    342  1100				   .L0134		;  const _B4  =  $B4
    343  1100
    344  1100				   .L0135		;  const _B6  =  $B6
    345  1100
    346  1100				   .L0136		;  const _B8  =  $B8
    347  1100
    348  1100				   .L0137		;  const _BA  =  $BA
    349  1100
    350  1100				   .L0138		;  const _BC  =  $BC
    351  1100
    352  1100				   .L0139		;  const _BE  =  $BE
    353  1100
    354  1100				   .L0140		;  const _C0  =  $C0
    355  1100
    356  1100				   .L0141		;  const _C2  =  $C2
    357  1100
    358  1100				   .L0142		;  const _C4  =  $C4
    359  1100
    360  1100				   .L0143		;  const _C6  =  $C6
    361  1100
    362  1100				   .L0144		;  const _C8  =  $C8
    363  1100
    364  1100				   .L0145		;  const _CA  =  $CA
    365  1100
    366  1100				   .L0146		;  const _CC  =  $CC
    367  1100
    368  1100				   .L0147		;  const _CE  =  $CE
    369  1100
    370  1100				   .L0148		;  const _D0  =  $D0
    371  1100
    372  1100				   .L0149		;  const _D2  =  $D2
    373  1100
    374  1100				   .L0150		;  const _D4  =  $D4
    375  1100
    376  1100				   .L0151		;  const _D6  =  $D6
    377  1100
    378  1100				   .L0152		;  const _D8  =  $D8
    379  1100
    380  1100				   .L0153		;  const _DA  =  $DA
    381  1100
    382  1100				   .L0154		;  const _DC  =  $DC
    383  1100
    384  1100				   .L0155		;  const _DE  =  $DE
    385  1100
    386  1100				   .L0156		;  const _E0  =  $E0
    387  1100
    388  1100				   .L0157		;  const _E2  =  $E2
    389  1100
    390  1100				   .L0158		;  const _E4  =  $E4
    391  1100
    392  1100				   .L0159		;  const _E6  =  $E6
    393  1100
    394  1100				   .L0160		;  const _E8  =  $E8
    395  1100
    396  1100				   .L0161		;  const _EA  =  $EA
    397  1100
    398  1100				   .L0162		;  const _EC  =  $EC
    399  1100
    400  1100				   .L0163		;  const _EE  =  $EE
    401  1100
    402  1100				   .L0164		;  const _F0  =  $F0
    403  1100
    404  1100				   .L0165		;  const _F2  =  $F2
    405  1100
    406  1100				   .L0166		;  const _F4  =  $F4
    407  1100
    408  1100				   .L0167		;  const _F6  =  $F6
    409  1100
    410  1100				   .L0168		;  const _F8  =  $F8
    411  1100
    412  1100				   .L0169		;  const _FA  =  $FA
    413  1100
    414  1100				   .L0170		;  const _FC  =  $FC
    415  1100
    416  1100				   .L0171		;  const _FE  =  $FE
    417  1100
    418  1100				   .
    419  1100							; 
    420  1100
    421  1100				   .
    422  1100							; 
    423  1100
    424  1100				   .
    425  1100							; 
    426  1100
    427  1100				   .
    428  1100							; 
    429  1100
    430  1100				   .
    431  1100							; 
    432  1100
    433  1100				   .
    434  1100							; 
    435  1100
    436  1100				   .
    437  1100							; 
    438  1100
    439  1100				   .
    440  1100							; 
    441  1100
    442  1100				   .
    443  1100							; 
    444  1100
    445  1100				   .
    446  1100							; 
    447  1100
    448  1100				   .
    449  1100							; 
    450  1100
    451  1100				   .
    452  1100							; 
    453  1100
    454  1100				   .
    455  1100							; 
    456  1100
    457  1100				   .
    458  1100							; 
    459  1100
    460  1100				   .
    461  1100							; 
    462  1100
    463  1100				   .
    464  1100							; 
    465  1100
    466  1100				   .
    467  1100							; 
    468  1100
    469  1100				   .
    470  1100							; 
    471  1100
    472  1100				   .
    473  1100							; 
    474  1100
    475  1100				   .
    476  1100							; 
    477  1100
    478  1100				   .
    479  1100							; 
    480  1100
    481  1100				   .
    482  1100							; 
    483  1100
    484  1100				   .
    485  1100							; 
    486  1100
    487  1100				   .
    488  1100							; 
    489  1100
    490  1100				   .
    491  1100							; 
    492  1100
    493  1100				   .
    494  1100							; 
    495  1100
    496  1100				   .
    497  1100							; 
    498  1100
    499  1100				   .
    500  1100							; 
    501  1100
    502  1100				   .
    503  1100							; 
    504  1100
    505  1100				   .
    506  1100							; 
    507  1100
    508  1100				   .
    509  1100							; 
    510  1100
    511  1100				   .
    512  1100							; 
    513  1100
    514  1100				   .
    515  1100							; 
    516  1100
    517  1100				   .
    518  1100							; 
    519  1100
    520  1100				   .
    521  1100							; 
    522  1100
    523  1100				   .
    524  1100							; 
    525  1100
    526  1100				   .
    527  1100							; 
    528  1100
    529  1100				   .
    530  1100							; 
    531  1100
    532  1100				   .
    533  1100							; 
    534  1100
    535  1100				   .
    536  1100							; 
    537  1100
    538  1100				   .
    539  1100							; 
    540  1100
    541  1100				   .
    542  1100							; 
    543  1100
    544  1100				   .
    545  1100							; 
    546  1100
    547  1100				   .
    548  1100							; 
    549  1100
    550  1100				   .
    551  1100							; 
    552  1100
    553  1100				   .
    554  1100							; 
    555  1100
    556  1100				   .
    557  1100							; 
    558  1100
    559  1100				   .
    560  1100							; 
    561  1100
    562  1100				   .
    563  1100							; 
    564  1100
    565  1100				   .
    566  1100							; 
    567  1100
    568  1100				   .
    569  1100							; 
    570  1100
    571  1100				   .
    572  1100							; 
    573  1100
    574  1100				   .
    575  1100							; 
    576  1100
    577  1100				   .
    578  1100							; 
    579  1100
    580  1100				   .
    581  1100							; 
    582  1100
    583  1100				   .
    584  1100							; 
    585  1100
    586  1100				   .
    587  1100							; 
    588  1100
    589  1100				   .
    590  1100							; 
    591  1100
    592  1100				   .
    593  1100							; 
    594  1100
    595  1100				   .
    596  1100							; 
    597  1100
    598  1100				   .
    599  1100							; 
    600  1100
    601  1100				   .
    602  1100							; 
    603  1100
    604  1100				   .
    605  1100							; 
    606  1100
    607  1100				   .
    608  1100							; 
    609  1100
    610  1100				   .
    611  1100							; 
    612  1100
    613  1100				   .
    614  1100							; 
    615  1100
    616  1100				   .
    617  1100							; 
    618  1100
    619  1100				   .
    620  1100							; 
    621  1100
    622  1100				   .
    623  1100							; 
    624  1100
    625  1100				   .
    626  1100							; 
    627  1100
    628  1100				   .
    629  1100							; 
    630  1100
    631  1100				   .
    632  1100							; 
    633  1100
    634  1100				   .
    635  1100							; 
    636  1100
    637  1100				   .
    638  1100							; 
    639  1100
    640  1100				   .
    641  1100							; 
    642  1100
    643  1100				   .
    644  1100							; 
    645  1100
    646  1100				   .
    647  1100							; 
    648  1100
    649  1100				   .
    650  1100							; 
    651  1100
    652  1100				   .
    653  1100							; 
    654  1100
    655  1100				   .
    656  1100							; 
    657  1100
    658  1100				   .
    659  1100							; 
    660  1100
    661  1100				   .
    662  1100							; 
    663  1100
    664  1100				   .
    665  1100							; 
    666  1100
    667  1100				   .
    668  1100							; 
    669  1100
    670  1100				   .
    671  1100							; 
    672  1100
    673  1100				   .
    674  1100							; 
    675  1100
    676  1100				   .
    677  1100							; 
    678  1100
    679  1100				   .
    680  1100							; 
    681  1100
    682  1100				   .
    683  1100							; 
    684  1100
    685  1100				   .
    686  1100							; 
    687  1100
    688  1100				   .
    689  1100							; 
    690  1100
    691  1100				   .
    692  1100							; 
    693  1100
    694  1100				   .
    695  1100							; 
    696  1100
    697  1100				   .
    698  1100							; 
    699  1100
    700  1100				   .
    701  1100							; 
    702  1100
    703  1100				   .
    704  1100							; 
    705  1100
    706  1100				   .
    707  1100							; 
    708  1100
    709  1100				   .
    710  1100							; 
    711  1100
    712  1100				   .
    713  1100							; 
    714  1100
    715  1100				   .
    716  1100							; 
    717  1100
    718  1100				   .
    719  1100							; 
    720  1100
    721  1100				   .
    722  1100							; 
    723  1100
    724  1100				   .
    725  1100							; 
    726  1100
    727  1100				   .
    728  1100							; 
    729  1100
    730  1100				   .
    731  1100							; 
    732  1100
    733  1100				   .
    734  1100							; 
    735  1100
    736  1100				   .
    737  1100							; 
    738  1100
    739  1100				   .
    740  1100							; 
    741  1100
    742  1100				   .
    743  1100							; 
    744  1100
    745  1100				   .
    746  1100							; 
    747  1100
    748  1100				   .
    749  1100							; 
    750  1100
    751  1100				   .
    752  1100							; 
    753  1100
    754  1100				   .
    755  1100							; 
    756  1100
    757  1100				   .
    758  1100							; 
    759  1100
    760  1100				   .
    761  1100							; 
    762  1100
    763  1100				   .
    764  1100							; 
    765  1100
    766  1100				   .
    767  1100							; 
    768  1100
    769  1100				   .
    770  1100							; 
    771  1100
    772  1100				   .
    773  1100							; 
    774  1100
    775  1100				   .
    776  1100							; 
    777  1100
    778  1100				   .
    779  1100							; 
    780  1100
    781  1100				   .
    782  1100							; 
    783  1100
    784  1100				   .
    785  1100							; 
    786  1100
    787  1100				   .
    788  1100							; 
    789  1100
    790  1100				   .
    791  1100							; 
    792  1100
    793  1100				   .
    794  1100							; 
    795  1100
    796  1100				   .
    797  1100							; 
    798  1100
    799  1100				   .
    800  1100							; 
    801  1100
    802  1100				   .
    803  1100							; 
    804  1100
    805  1100				   .
    806  1100							; 
    807  1100
    808  1100				   .
    809  1100							; 
    810  1100
    811  1100				   .
    812  1100							; 
    813  1100
    814  1100				   .
    815  1100							; 
    816  1100
    817  1100				   .
    818  1100							; 
    819  1100
    820  1100				   .
    821  1100							; 
    822  1100
    823  1100				   .
    824  1100							; 
    825  1100
    826  1100				   .
    827  1100							; 
    828  1100
    829  1100				   .
    830  1100							; 
    831  1100
    832  1100				   .
    833  1100							; 
    834  1100
    835  1100				   .
    836  1100							; 
    837  1100
    838  1100				   .
    839  1100							; 
    840  1100
    841  1100				   .
    842  1100							; 
    843  1100
    844  1100				   .
    845  1100							; 
    846  1100
    847  1100				   .
    848  1100							; 
    849  1100
    850  1100				   .
    851  1100							; 
    852  1100
    853  1100				   .
    854  1100							; 
    855  1100
    856  1100				   .L0172		;  dim _sc1  =  score
    857  1100
    858  1100				   .L0173		;  dim _sc2  =  score + 1
    859  1100
    860  1100				   .L0174		;  dim _sc3  =  score + 2
    861  1100
    862  1100				   .
    863  1100							; 
    864  1100
    865  1100				   .
    866  1100							; 
    867  1100
    868  1100				   .L0175		;  dim delay_counter  =  a
    869  1100
    870  1100				   .L0176		;  dim frame_counter  =  b
    871  1100
    872  1100				   .
    873  1100							; 
    874  1100
    875  1100				   .L0177		;  dim _BitOp_Ball_Shot_Dir  =  c
    876  1100
    877  1100				   .L0178		;  dim _Bit0_Ball_Shot_Dir_Left1  =  c
    878  1100
    879  1100				   .L0179		;  dim _Bit1_Ball_Shot_Dir_Left2  =  c
    880  1100
    881  1100				   .L0180		;  dim _Bit2_Ball_Shot_Dir_Right1  =  c
    882  1100
    883  1100				   .L0181		;  dim _Bit3_Ball_Shot_Dir_Right2  =  c
    884  1100
    885  1100				   .
    886  1100							; 
    887  1100
    888  1100				   .L0182		;  dim _BitOp_M0_Dir  =  d
    889  1100
    890  1100				   .L0183		;  dim _Bit0_M0_Dir_Up  =  d
    891  1100
    892  1100				   .L0184		;  dim _Bit1_M0_Dir_Down  =  d
    893  1100
    894  1100				   .L0185		;  dim _Bit2_M0_Dir_Left  =  d
    895  1100
    896  1100				   .L0186		;  dim _Bit3_M0_Dir_Right  =  d
    897  1100
    898  1100				   .
    899  1100							; 
    900  1100
    901  1100				   .L0187		;  dim _BitOp_P1_Dir  =  e
    902  1100
    903  1100				   .L0188		;  dim _Bit0_P1_Dir_Up  =  e
    904  1100
    905  1100				   .L0189		;  dim _Bit1_P1_Dir_Down  =  e
    906  1100
    907  1100				   .L0190		;  dim _Bit2_P1_Dir_Left  =  e
    908  1100
    909  1100				   .L0191		;  dim _Bit3_P1_Dir_Right  =  e
    910  1100
    911  1100				   .
    912  1100							; 
    913  1100
    914  1100				   .
    915  1100							; 
    916  1100
    917  1100				   .L0192		;  dim _Ch0_Sound  =  f
    918  1100
    919  1100				   .L0193		;  dim _Ch0_Duration  =  g
    920  1100
    921  1100				   .L0194		;  dim _Ch0_Counter  =  h
    922  1100
    923  1100				   .
    924  1100							; 
    925  1100
    926  1100				   .L0195		;  dim extra_wall_move_x  =  i
    927  1100
    928  1100				   .L0196		;  dim roommate_move_x  =  j
    929  1100
    930  1100				   .L0197		;  dim roommate_type  =  k
    931  1100
    932  1100				   .
    933  1100							; 
    934  1100
    935  1100				   .L0198		;  dim _BitOp_Flip_positions  =  l
    936  1100
    937  1100				   .L0199		;  dim _Bit0_New_Room_P1_Flip	=  l
    938  1100
    939  1100				   .L0200		;  dim _Bit1_Safe_Point_P1_Flip  =  l
    940  1100
    941  1100				   .L0201		;  dim Safe_Point_P1_x  =  m
    942  1100
    943  1100				   .L0202		;  dim Safe_Point_P1_y  =  n
    944  1100
    945  1100				   .
    946  1100							; 
    947  1100
    948  1100				   .L0203		;  rem 16 bit velocity
    949  1100
    950  1100				   .L0204		;  dim Bally_velocity	=  p.q
    951  1100
    952  1100				   .L0205		;  rem 16 bit ball y position
    953  1100
    954  1100				   .L0206		;  dim Bally_position	=  ball_shoot_y.r
    955  1100
    956  1100				   .
    957  1100							; 
    958  1100
    959  1100				   .L0207		;  rem 16 bit velocity
    960  1100
    961  1100				   .L0208		;  dim M0y_velocity  =  s.t
    962  1100
    963  1100				   .L0209		;  rem 16 bit missile0 y position
    964  1100
    965  1100				   .L0210		;  dim M0y_position  =  missile0y.u
    966  1100
    967  1100				   .
    968  1100							; 
    969  1100
    970  1100				   .L0211		;  rem 16 bit velocity
    971  1100
    972  1100				   .L0212		;  dim P1y_velocity  =  v.w
    973  1100
    974  1100				   .L0213		;  rem 16 bit player1 y position
    975  1100
    976  1100				   .L0214		;  dim P1y_position  =  player1y.x
    977  1100
    978  1100				   .
    979  1100							; 
    980  1100
    981  1100				   .L0215		;  rem Various game states
    982  1100
    983  1100				   .L0216		;  dim _Bit_Game_State  =  y
    984  1100
    985  1100				   .L0217		;  dim _Bit0_roommate_Dir  =  y
    986  1100
    987  1100				   .L0218		;  dim _Bit1_Wall_Dir	=  y
    988  1100
    989  1100				   .L0219		;  dim _Bit2_Level_finished  =  y
    990  1100
    991  1100				   .L0220		;  dim _Bit3_Safe_Point_reached  =  y
    992  1100
    993  1100				   .L0221		;  dim _Bit4_Game_Over  =  y
    994  1100
    995  1100				   .L0222		;  dim _Bit5_Request_Pending  =  y
    996  1100
    997  1100				   .L0223		;  dim _Bit6_Flip_P1  =  y
    998  1100
    999  1100				   .L0224		;  dim _Bit7_FireB_Restrainer	=  y
   1000  1100
   1001  1100				   .
   1002  1100							; 
   1003  1100
   1004  1100				   .L0225		;  dim new_room_player1y  =  var0
   1005  1100
   1006  1100				   .L0226		;  dim new_room_player1x  =  var1
   1007  1100
   1008  1100				   .L0227		;  dim gamenumber  =  var2
   1009  1100
   1010  1100				   .
   1011  1100							; 
   1012  1100
   1013  1100				   .L0228		;  dim max_pub_level_bcd1  =  var3
   1014  1100
   1015  1100				   .L0229		;  dim max_pub_level_bcd2  =  var4
   1016  1100
   1017  1100				   .L0230		;  dim max_pub_level_bcd3  =  var5
   1018  1100
   1019  1100				   .L0231		;  dim max_priv_level_bcd1  =	var6
   1020  1100
   1021  1100				   .L0232		;  dim max_priv_level_bcd2  =	var7
   1022  1100
   1023  1100				   .L0233		;  dim max_priv_level_bcd3  =	var8
   1024  1100
   1025  1100				   .
   1026  1100							; 
   1027  1100
   1028  1100				   .L0234		;  dim has_private_levels  =  var9
   1029  1100
   1030  1100				   .L0235		;  dim ball_shoot_x  =  var10
   1031  1100
   1032  1100				   .L0236		;  dim ball_shoot_y  =  var11
   1033  1100
   1034  1100				   .
   1035  1100							; 
   1036  1100
   1037  1100				   .L0237		;  dim men_to_rescue  =  var12
   1038  1100
   1039  1100				   .L0238		;  dim TextIndex  =  var12
   1040  1100
   1041  1100				   .
   1042  1100							; 
   1043  1100
   1044  1100				   .L0239		;  dim bonus_bcd_counter  =  var13
   1045  1100
   1046  1100				   .
   1047  1100							; 
   1048  1100
   1049  1100				   .
   1050  1100							; 
   1051  1100
   1052  1100				   .
   1053  1100							; 
   1054  1100
   1055  1100				   .
   1056  1100							; 
   1057  1100
   1058  1100				   .
   1059  1100							; 
   1060  1100
   1061  1100				   .
   1062  1100							; 
   1063  1100
   1064  1100				   .
   1065  1100							; 
   1066  1100
   1067  1100				   .
   1068  1100							; 
   1069  1100
   1070  1100				   .
   1071  1100							; 
   1072  1100
   1073  1100				   .
   1074  1100							; 
   1075  1100
   1076  1100				   .L0240		;  dim w_room_definition_start  =  w095
   1077  1100
   1078  1100				   .
   1079  1100							; 
   1080  1100
   1081  1100				   .L0241		;  dim r_level_bonus_bcd_points  =  r095
   1082  1100
   1083  1100				   .L0242		;  dim w_level_bonus_bcd_points  =  w095
   1084  1100
   1085  1100				   .L0243		;  dim r_men_to_rescue_in_this_level =  r096
   1086  1100
   1087  1100				   .L0244		;  dim w_men_to_rescue_in_this_level =  w096
   1088  1100
   1089  1100				   .L0245		;  dim r_BitOp_room_type  =  r097
   1090  1100
   1091  1100				   .L0246		;  dim w_BitOp_room_type  =  w097
   1092  1100
   1093  1100				   .L0247		;  dim r_Bit0_room_type_top  =  r097
   1094  1100
   1095  1100				   .L0248		;  dim w_Bit0_room_type_top  =  w097
   1096  1100
   1097  1100				   .L0249		;  dim r_room_color_top  =  r098
   1098  1100
   1099  1100				   .L0250		;  dim w_room_color_top  =  w098
   1100  1100
   1101  1100				   .L0251		;  dim r_room_color_middle  =	r099
   1102  1100
   1103  1100				   .L0252		;  dim w_room_color_middle  =	w099
   1104  1100
   1105  1100				   .L0253		;  dim r_room_color_bottom  =	r103
   1106  1100
   1107  1100				   .L0254		;  dim w_room_color_bottom  =	w103
   1108  1100
   1109  1100				   .L0255		;  dim r_roommate_type_and_range  =  r104
   1110  1100
   1111  1100				   .L0256		;  dim w_roommate_type_and_range  =  w104
   1112  1100
   1113  1100				   .L0257		;  dim r_roommate_startpos_x  =  r105
   1114  1100
   1115  1100				   .L0258		;  dim w_roommate_startpos_x  =  w105
   1116  1100
   1117  1100				   .L0259		;  dim r_roommate_startpos_y  =  r106
   1118  1100
   1119  1100				   .L0260		;  dim w_roommate_startpos_y  =  w106
   1120  1100
   1121  1100				   .L0261		;  dim r_extra_wall_type_and_range  =	r107
   1122  1100
   1123  1100				   .L0262		;  dim w_extra_wall_type_and_range  =	w107
   1124  1100
   1125  1100				   .L0263		;  dim r_extra_wall_width  =  r108
   1126  1100
   1127  1100				   .L0264		;  dim w_extra_wall_width  =  w108
   1128  1100
   1129  1100				   .L0265		;  dim r_extra_wall_height  =	r109
   1130  1100
   1131  1100				   .L0266		;  dim w_extra_wall_height  =	w109
   1132  1100
   1133  1100				   .L0267		;  dim r_extra_wall_startpos_x  =  r110
   1134  1100
   1135  1100				   .L0268		;  dim w_extra_wall_startpos_x  =  w110
   1136  1100
   1137  1100				   .L0269		;  dim r_extra_wall_startpos_y  =  r111
   1138  1100
   1139  1100				   .L0270		;  dim w_extra_wall_startpos_y  =  w111
   1140  1100
   1141  1100				   .
   1142  1100							; 
   1143  1100
   1144  1100				   .
   1145  1100							; 
   1146  1100
   1147  1100				   ._Start
   1148  1100							; _Start
   1149  1100
   1150  1100				   .L0271		;  asm
   1151  1100
   1152  1100		       a9 00		      lda	#0
   1153  1102
   1154  1102		       a2 4b		      ldx	#75
   1155  1104
   1156  1104				   .clear_ram
   1157  1104
   1158  1104		       ca		      dex
   1159  1105
   1160  1105		       95 a4		      sta	var0,x
   1161  1107
   1162  1107		       d0 fb		      bne	.clear_ram
   1163  1109
   1164  1109				   .
   1165  1109							; 
   1166  1109
   1167  1109				   .L0272		;  WriteSendBuffer  =	req_load_menu  :  _Bit5_Request_Pending{5}  =  1  :  COLUP0  =	_1C  :	scorecolor  =  _0E
   1168  1109
   1169  1109		       a9 09		      LDA	#req_load_menu
   1170  110b		       8d f1 1f 	      STA	WriteSendBuffer
   1171  110e		       a5 ec		      LDA	_Bit5_Request_Pending
   1172  1110		       09 20		      ORA	#32
   1173  1112		       85 ec		      STA	_Bit5_Request_Pending
   1174  1114		       a9 1c		      LDA	#_1C
   1175  1116		       85 06		      STA	COLUP0
   1176  1118		       a9 0e		      LDA	#_0E
   1177  111a		       85 a3		      STA	scorecolor
   1178  111c				   .L0273		;  gamenumber	=  1  :  score	=  1  :  missile0height  =  1
   1179  111c
   1180  111c		       a9 01		      LDA	#1
   1181  111e		       85 a6		      STA	gamenumber
   1182  1120		       a9 01		      LDA	#$01
   1183  1122		       85 95		      STA	score+2
   1184  1124		       a9 00		      LDA	#$00
   1185  1126		       85 94		      STA	score+1
   1186  1128		       a9 00		      LDA	#$00
   1187  112a		       85 93		      STA	score
   1188  112c		       a9 01		      LDA	#1
   1189  112e		       85 90		      STA	missile0height
   1190  1130				   .L0274		;  new_room_player1y  =  player_min_y	:  Safe_Point_P1_y  =  player_min_y
   1191  1130
   1192  1130		       a9 02		      LDA	#player_min_y
   1193  1132		       85 a4		      STA	new_room_player1y
   1194  1134		       85 e1		      STA	Safe_Point_P1_y
   1195  1136				   .L0275		;  new_room_player1x  =  30  :  player1x  =  30  :  Safe_Point_P1_x  =  30
   1196  1136
   1197  1136		       a9 1e		      LDA	#30
   1198  1138		       85 a5		      STA	new_room_player1x
   1199  113a		       85 81		      STA	player1x
   1200  113c		       85 e0		      STA	Safe_Point_P1_x
   1201  113e				   .L0276		;  AUDV0  =  0  :  AUDV1  =  0  :  frame_counter  =  0  :  player0x  =  0  :  bally  =  0  :  player1y  =  0
   1202  113e
   1203  113e		       a9 00		      LDA	#0
   1204  1140		       85 19		      STA	AUDV0
   1205  1142		       85 1a		      STA	AUDV1
   1206  1144		       85 d5		      STA	frame_counter
   1207  1146		       85 80		      STA	player0x
   1208  1148		       85 89		      STA	bally
   1209  114a		       85 86		      STA	player1y
   1210  114c				   .L0277		;  missile0x  =  200  :  missile0y  =	200  :	w_extra_wall_startpos_x  =  200  :  w_roommate_startpos_y  =  200  :  player0y	=  200
   1211  114c
   1212  114c		       a9 c8		      LDA	#200
   1213  114e		       85 82		      STA	missile0x
   1214  1150		       85 91		      STA	missile0y
   1215  1152		       8d 6e f0 	      STA	w_extra_wall_startpos_x
   1216  1155		       8d 6a f0 	      STA	w_roommate_startpos_y
   1217  1158		       85 85		      STA	player0y
   1218  115a				   .
   1219  115a							; 
   1220  115a
   1221  115a				   .
   1222  115a							; 
   1223  115a
   1224  115a				   .
   1225  115a							; 
   1226  115a
   1227  115a				   .
   1228  115a							; 
   1229  115a
   1230  115a				   .
   1231  115a							; 
   1232  115a
   1233  115a				   .L0278		;  pfclear
   1234  115a
   1235  115a		       a9 00		      LDA	#0
   1236  115c		       85 ee		      sta	temp7
   1237  115e		       a9 91		      lda	#>(ret_point1-1)
   1238  1160		       48		      pha
   1239  1161		       a9 73		      lda	#<(ret_point1-1)
   1240  1163		       48		      pha
   1241  1164		       a9 f2		      lda	#>(pfclear-1)
   1242  1166		       48		      pha
   1243  1167		       a9 ee		      lda	#<(pfclear-1)
   1244  1169		       48		      pha
   1245  116a		       a5 ee		      lda	temp7
   1246  116c		       48		      pha
   1247  116d		       8a		      txa
   1248  116e		       48		      pha
   1249  116f		       a2 04		      ldx	#4
   1250  1171		       4c e8 ff 	      jmp	BS_jsr
   1251  1174				   ret_point1
   1252  1174				   .L0279		;  player1color:
   1253  1174
   1254  1174		       a2 14		      LDX	#<playercolorL0279_1
   1255  1176		       86 87		      STX	player1color
   1256  1178		       a9 fc		      LDA	#>playercolorL0279_1
   1257  117a		       85 88		      STA	player1color+1
   1258  117c				   .
   1259  117c							; 
   1260  117c
   1261  117c				   .
   1262  117c							; 
   1263  117c
   1264  117c				   .
   1265  117c							; 
   1266  117c
   1267  117c				   .
   1268  117c							; 
   1269  117c
   1270  117c				   ._titlescreen_menu
   1271  117c							; _titlescreen_menu
   1272  117c
   1273  117c				   .L0280		;  COLUBK  =  _00
   1274  117c
   1275  117c		       a9 00		      LDA	#_00
   1276  117e		       85 09		      STA	COLUBK
   1277  1180				   .
   1278  1180							; 
   1279  1180
   1280  1180				   .L0281		;  gosub titledrawscreen bank2
   1281  1180
   1282  1180		       85 ee		      sta	temp7
   1283  1182		       a9 91		      lda	#>(ret_point2-1)
   1284  1184		       48		      pha
   1285  1185		       a9 97		      lda	#<(ret_point2-1)
   1286  1187		       48		      pha
   1287  1188		       a9 b0		      lda	#>(.titledrawscreen-1)
   1288  118a		       48		      pha
   1289  118b		       a9 ff		      lda	#<(.titledrawscreen-1)
   1290  118d		       48		      pha
   1291  118e		       a5 ee		      lda	temp7
   1292  1190		       48		      pha
   1293  1191		       8a		      txa
   1294  1192		       48		      pha
   1295  1193		       a2 02		      ldx	#2
   1296  1195		       4c e8 ff 	      jmp	BS_jsr
   1297  1198				   ret_point2
   1298  1198				   .
   1299  1198							; 
   1300  1198
   1301  1198				   .L0282		;  if delay_counter then delay_counter  =  delay_counter  -  1  :  goto _titlescreen_menu
   1302  1198
   1303  1198		       a5 d4		      LDA	delay_counter
   1304  119a		       f0 05		      BEQ	.skipL0282
   1305  119c				   .condpart0
   1306  119c		       c6 d4		      DEC	delay_counter
   1307  119e		       4c 7c 91 	      jmp	._titlescreen_menu
   1308  11a1
   1309  11a1				   .skipL0282
   1310  11a1				   .
   1311  11a1							; 
   1312  11a1
   1313  11a1				   .L0283		;  if ReceiveBufferSize  <  response_menu_size then _Skip_Read_Menu_Response
   1314  11a1
   1315  11a1		       ad f3 1f 	      LDA	ReceiveBufferSize
   1316  11a4		       c9 06		      CMP	#response_menu_size
   1317  11a6					      if	((* - ._Skip_Read_Menu_Response) < 127) && ((* - ._Skip_Read_Menu_Response) > -128)
   1318  11a6		       90 32		      bcc	._Skip_Read_Menu_Response
   1319  11a8				  -	      else
   1320  11a8				  -	      bcs	.0skip_Skip_Read_Menu_Response
   1321  11a8				  -	      jmp	._Skip_Read_Menu_Response
   1322  11a8				  -.0skip_Skip_Read_Menu_Response
   1323  11a8					      endif
   1324  11a8				   .L0284		;  _Bit5_Request_Pending{5}  =  0
   1325  11a8
   1326  11a8		       a5 ec		      LDA	_Bit5_Request_Pending
   1327  11aa		       29 df		      AND	#223
   1328  11ac		       85 ec		      STA	_Bit5_Request_Pending
   1329  11ae				   .L0285		;  max_pub_level_bcd1	=  ReceiveBuffer
   1330  11ae
   1331  11ae		       ad f2 1f 	      LDA	ReceiveBuffer
   1332  11b1		       85 a7		      STA	max_pub_level_bcd1
   1333  11b3				   .L0286		;  max_pub_level_bcd2	=  ReceiveBuffer
   1334  11b3
   1335  11b3		       ad f2 1f 	      LDA	ReceiveBuffer
   1336  11b6		       85 a8		      STA	max_pub_level_bcd2
   1337  11b8				   .L0287		;  max_pub_level_bcd3	=  ReceiveBuffer
   1338  11b8
   1339  11b8		       ad f2 1f 	      LDA	ReceiveBuffer
   1340  11bb		       85 a9		      STA	max_pub_level_bcd3
   1341  11bd				   .L0288		;  max_priv_level_bcd1  =  ReceiveBuffer
   1342  11bd
   1343  11bd		       ad f2 1f 	      LDA	ReceiveBuffer
   1344  11c0		       85 aa		      STA	max_priv_level_bcd1
   1345  11c2				   .L0289		;  max_priv_level_bcd2  =  ReceiveBuffer
   1346  11c2
   1347  11c2		       ad f2 1f 	      LDA	ReceiveBuffer
   1348  11c5		       85 ab		      STA	max_priv_level_bcd2
   1349  11c7				   .L0290		;  max_priv_level_bcd3  =  ReceiveBuffer
   1350  11c7
   1351  11c7		       ad f2 1f 	      LDA	ReceiveBuffer
   1352  11ca		       85 ac		      STA	max_priv_level_bcd3
   1353  11cc				   .L0291		;  has_private_levels	=  max_priv_level_bcd1	|  max_priv_level_bcd2	|  max_priv_level_bcd3
   1354  11cc
   1355  11cc							; complex statement detected
   1356  11cc		       a5 aa		      LDA	max_priv_level_bcd1
   1357  11ce		       48		      PHA
   1358  11cf		       a5 ab		      LDA	max_priv_level_bcd2
   1359  11d1		       05 ac		      ORA	max_priv_level_bcd3
   1360  11d3		       ba		      TSX
   1361  11d4		       e8		      INX
   1362  11d5		       9a		      TXS
   1363  11d6		       15 00		      ORA	$00,x
   1364  11d8		       85 ad		      STA	has_private_levels
   1365  11da				   ._Skip_Read_Menu_Response
   1366  11da							; _Skip_Read_Menu_Response
   1367  11da
   1368  11da				   .
   1369  11da							; 
   1370  11da
   1371  11da				   .L0292		;  if _Bit5_Request_Pending{5} then _titlescreen_menu
   1372  11da
   1373  11da		       a5 ec		      LDA	_Bit5_Request_Pending
   1374  11dc		       29 20		      AND	#32
   1375  11de					      if	((* - ._titlescreen_menu) < 127) && ((* - ._titlescreen_menu) > -128)
   1376  11de		       d0 9c		      BNE	._titlescreen_menu
   1377  11e0				  -	      else
   1378  11e0				  -	      beq	.1skip_titlescreen_menu
   1379  11e0				  -	      jmp	._titlescreen_menu
   1380  11e0				  -.1skip_titlescreen_menu
   1381  11e0					      endif
   1382  11e0				   .
   1383  11e0							; 
   1384  11e0
   1385  11e0				   .L0293		;  if joy0left then score  =  score  -  100  :  delay_counter	=  5
   1386  11e0
   1387  11e0		       2c 80 02 	      bit	SWCHA
   1388  11e3		       70 19		      BVS	.skipL0293
   1389  11e5				   .condpart1
   1390  11e5		       f8		      SED
   1391  11e6		       38		      SEC
   1392  11e7		       a5 95		      LDA	score+2
   1393  11e9		       e9 00		      SBC	#$00
   1394  11eb		       85 95		      STA	score+2
   1395  11ed		       a5 94		      LDA	score+1
   1396  11ef		       e9 01		      SBC	#$01
   1397  11f1		       85 94		      STA	score+1
   1398  11f3		       a5 93		      LDA	score
   1399  11f5		       e9 00		      SBC	#$00
   1400  11f7		       85 93		      STA	score
   1401  11f9		       d8		      CLD
   1402  11fa		       a9 05		      LDA	#5
   1403  11fc		       85 d4		      STA	delay_counter
   1404  11fe				   .skipL0293
   1405  11fe				   .L0294		;  if joy0down then score  =  score  -  1  :  delay_counter  =  5
   1406  11fe
   1407  11fe		       a9 20		      lda	#$20
   1408  1200		       2c 80 02 	      bit	SWCHA
   1409  1203		       d0 19		      BNE	.skipL0294
   1410  1205				   .condpart2
   1411  1205		       f8		      SED
   1412  1206		       38		      SEC
   1413  1207		       a5 95		      LDA	score+2
   1414  1209		       e9 01		      SBC	#$01
   1415  120b		       85 95		      STA	score+2
   1416  120d		       a5 94		      LDA	score+1
   1417  120f		       e9 00		      SBC	#$00
   1418  1211		       85 94		      STA	score+1
   1419  1213		       a5 93		      LDA	score
   1420  1215		       e9 00		      SBC	#$00
   1421  1217		       85 93		      STA	score
   1422  1219		       d8		      CLD
   1423  121a		       a9 05		      LDA	#5
   1424  121c		       85 d4		      STA	delay_counter
   1425  121e				   .skipL0294
   1426  121e				   .L0295		;  if joy0right then score  =	score  +  100  :  delay_counter  =  5
   1427  121e
   1428  121e		       2c 80 02 	      bit	SWCHA
   1429  1221		       30 13		      BMI	.skipL0295
   1430  1223				   .condpart3
   1431  1223		       f8		      SED
   1432  1224		       18		      CLC
   1433  1225		       a5 94		      LDA	score+1
   1434  1227		       69 01		      ADC	#$01
   1435  1229		       85 94		      STA	score+1
   1436  122b		       a5 93		      LDA	score
   1437  122d		       69 00		      ADC	#$00
   1438  122f		       85 93		      STA	score
   1439  1231		       d8		      CLD
   1440  1232		       a9 05		      LDA	#5
   1441  1234		       85 d4		      STA	delay_counter
   1442  1236				   .skipL0295
   1443  1236				   .L0296		;  if joy0up then score  =  score  +  1  :  delay_counter  =  5
   1444  1236
   1445  1236		       a9 10		      lda	#$10
   1446  1238		       2c 80 02 	      bit	SWCHA
   1447  123b		       d0 19		      BNE	.skipL0296
   1448  123d				   .condpart4
   1449  123d		       f8		      SED
   1450  123e		       18		      CLC
   1451  123f		       a5 95		      LDA	score+2
   1452  1241		       69 01		      ADC	#$01
   1453  1243		       85 95		      STA	score+2
   1454  1245		       a5 94		      LDA	score+1
   1455  1247		       69 00		      ADC	#$00
   1456  1249		       85 94		      STA	score+1
   1457  124b		       a5 93		      LDA	score
   1458  124d		       69 00		      ADC	#$00
   1459  124f		       85 93		      STA	score
   1460  1251		       d8		      CLD
   1461  1252		       a9 05		      LDA	#5
   1462  1254		       85 d4		      STA	delay_counter
   1463  1256				   .skipL0296
   1464  1256				   .
   1465  1256							; 
   1466  1256
   1467  1256				   .
   1468  1256							; 
   1469  1256
   1470  1256				   .L0297		;  if gamenumber  >  2 then _User_Level_Compare
   1471  1256
   1472  1256		       a9 02		      LDA	#2
   1473  1258		       c5 a6		      CMP	gamenumber
   1474  125a					      if	((* - ._User_Level_Compare) < 127) && ((* - ._User_Level_Compare) > -128)
   1475  125a		       90 13		      bcc	._User_Level_Compare
   1476  125c				  -	      else
   1477  125c				  -	      bcs	.2skip_User_Level_Compare
   1478  125c				  -	      jmp	._User_Level_Compare
   1479  125c				  -.2skip_User_Level_Compare
   1480  125c					      endif
   1481  125c				   .
   1482  125c							; 
   1483  125c
   1484  125c				   .L0298		;  asm
   1485  125c
   1486  125c		       f8		      sed		; Set the Decimal Mode Flag
   1487  125d
   1488  125d		       a5 a9		      lda	max_pub_level_bcd3	; Load the Accumulator
   1489  125f
   1490  125f		       c5 95		      cmp	_sc3	; Compare Memory and the Accumulator
   1491  1261
   1492  1261		       a5 a8		      lda	max_pub_level_bcd2	; Load the Accumulator
   1493  1263
   1494  1263		       e5 94		      sbc	_sc2	; Subtract With Carry
   1495  1265
   1496  1265		       a5 a7		      lda	max_pub_level_bcd1	; Load the Accumulator
   1497  1267
   1498  1267		       e5 93		      sbc	_sc1	; Subtract With Carry
   1499  1269
   1500  1269		       d8		      cld		; Clear the Decimal Flag
   1501  126a
   1502  126a		       b0 1f		      bcs	._Skip_Level_Reset	; Branch if Carry Set
   1503  126c
   1504  126c							; (goto label if carry is set)
   1505  126c
   1506  126c		       4c 7f 92 	      jmp	._Level_Reset
   1507  126f
   1508  126f
   1509  126f
   1510  126f				   ._User_Level_Compare
   1511  126f
   1512  126f		       f8		      sed		; Set the Decimal Mode Flag
   1513  1270
   1514  1270		       a5 ac		      lda	max_priv_level_bcd3	; Load the Accumulator
   1515  1272
   1516  1272		       c5 95		      cmp	_sc3	; Compare Memory and the Accumulator
   1517  1274
   1518  1274		       a5 ab		      lda	max_priv_level_bcd2	; Load the Accumulator
   1519  1276
   1520  1276		       e5 94		      sbc	_sc2	; Subtract With Carry
   1521  1278
   1522  1278		       a5 aa		      lda	max_priv_level_bcd1	; Load the Accumulator
   1523  127a
   1524  127a		       e5 93		      sbc	_sc1	; Subtract With Carry
   1525  127c
   1526  127c		       d8		      cld		; Clear the Decimal Flag
   1527  127d
   1528  127d		       b0 0c		      bcs	._Skip_Level_Reset	; Branch if Carry Set
   1529  127f
   1530  127f							; (goto label if carry is set)
   1531  127f
   1532  127f
   1533  127f
   1534  127f				   ._Level_Reset
   1535  127f							; _Level_Reset
   1536  127f
   1537  127f				   .L0299		;  score  =  1
   1538  127f
   1539  127f		       a9 01		      LDA	#$01
   1540  1281		       85 95		      STA	score+2
   1541  1283		       a9 00		      LDA	#$00
   1542  1285		       85 94		      STA	score+1
   1543  1287		       a9 00		      LDA	#$00
   1544  1289		       85 93		      STA	score
   1545  128b				   .
   1546  128b							; 
   1547  128b
   1548  128b				   ._Skip_Level_Reset
   1549  128b							; _Skip_Level_Reset
   1550  128b
   1551  128b				   .L0300		;  if _sc1  =	0  &&  _sc2  =	0  &&  _sc3  =	0 then _sc1  =	max_pub_level_bcd1  :  _sc2  =	max_pub_level_bcd2  :  _sc3  =	max_pub_level_bcd3
   1552  128b
   1553  128b		       a5 93		      LDA	_sc1
   1554  128d		       c9 00		      CMP	#0
   1555  128f		       d0 18		      BNE	.skipL0300
   1556  1291				   .condpart5
   1557  1291		       a5 94		      LDA	_sc2
   1558  1293		       c9 00		      CMP	#0
   1559  1295		       d0 12		      BNE	.skip5then
   1560  1297				   .condpart6
   1561  1297		       a5 95		      LDA	_sc3
   1562  1299		       c9 00		      CMP	#0
   1563  129b		       d0 0c		      BNE	.skip6then
   1564  129d				   .condpart7
   1565  129d		       a5 a7		      LDA	max_pub_level_bcd1
   1566  129f		       85 93		      STA	_sc1
   1567  12a1		       a5 a8		      LDA	max_pub_level_bcd2
   1568  12a3		       85 94		      STA	_sc2
   1569  12a5		       a5 a9		      LDA	max_pub_level_bcd3
   1570  12a7		       85 95		      STA	_sc3
   1571  12a9				   .skip6then
   1572  12a9				   .skip5then
   1573  12a9				   .skipL0300
   1574  12a9				   .
   1575  12a9							; 
   1576  12a9
   1577  12a9				   .L0301		;  if switchselect then gamenumber  =	gamenumber  +  1  :  delay_counter  =  20  :  if gamenumber  >	4  &&  has_private_levels then gamenumber  =  1 else if gamenumber  >  2  &&  !has_private_levels then gamenumber  =  1
   1578  12a9
   1579  12a9		       a9 02		      lda	#2
   1580  12ab		       2c 82 02 	      bit	SWCHB
   1581  12ae		       d0 17		      BNE	.skipL0301
   1582  12b0				   .condpart8
   1583  12b0		       e6 a6		      INC	gamenumber
   1584  12b2		       a9 14		      LDA	#20
   1585  12b4		       85 d4		      STA	delay_counter
   1586  12b6		       a9 04		      LDA	#4
   1587  12b8		       c5 a6		      CMP	gamenumber
   1588  12ba		       b0 0b		      BCS	.skip8then
   1589  12bc				   .condpart9
   1590  12bc		       a5 ad		      LDA	has_private_levels
   1591  12be		       f0 07		      BEQ	.skip9then
   1592  12c0				   .condpart10
   1593  12c0		       a9 01		      LDA	#1
   1594  12c2		       85 a6		      STA	gamenumber
   1595  12c4		       4c d5 92 	      jmp	.skipelse0
   1596  12c7				   .skip9then
   1597  12c7				   .skip8then
   1598  12c7				   .skipL0301
   1599  12c7		       a9 02		      LDA	#2
   1600  12c9		       c5 a6		      CMP	gamenumber
   1601  12cb		       b0 08		      BCS	.skipelse
   1602  12cd				   .condpart11
   1603  12cd		       a5 ad		      LDA	has_private_levels
   1604  12cf		       d0 04		      BNE	.skip11then
   1605  12d1				   .condpart12
   1606  12d1		       a9 01		      LDA	#1
   1607  12d3		       85 a6		      STA	gamenumber
   1608  12d5				   .skip11then
   1609  12d5				   .skipelse
   1610  12d5				   .skipelse0
   1611  12d5				   .L0302		;  if !joy0fire then _Bit7_FireB_Restrainer{7}  =  0  :  goto _titlescreen_menu
   1612  12d5
   1613  12d5		       24 0c		      bit	INPT4
   1614  12d7		       10 09		      BPL	.skipL0302
   1615  12d9				   .condpart13
   1616  12d9		       a5 ec		      LDA	_Bit7_FireB_Restrainer
   1617  12db		       29 7f		      AND	#127
   1618  12dd		       85 ec		      STA	_Bit7_FireB_Restrainer
   1619  12df		       4c 7c 91 	      jmp	._titlescreen_menu
   1620  12e2
   1621  12e2				   .skipL0302
   1622  12e2				   .L0303		;  if _Bit7_FireB_Restrainer{7} then goto _titlescreen_menu
   1623  12e2
   1624  12e2		       24 ec		      BIT	_Bit7_FireB_Restrainer
   1625  12e4		       10 03		      BPL	.skipL0303
   1626  12e6				   .condpart14
   1627  12e6		       4c 7c 91 	      jmp	._titlescreen_menu
   1628  12e9
   1629  12e9				   .skipL0303
   1630  12e9				   .
   1631  12e9							; 
   1632  12e9
   1633  12e9				   .
   1634  12e9							; 
   1635  12e9
   1636  12e9				   .
   1637  12e9							; 
   1638  12e9
   1639  12e9				   .L0304		;  WriteToBuffer  =  _sc1  :  WriteToBuffer  =  _sc2  :  WriteToBuffer  =  _sc3  :  WriteToBuffer  =  gamenumber  :  WriteSendBuffer  =  req_load  :  _Bit5_Request_Pending{5}  =  1
   1640  12e9
   1641  12e9		       a5 93		      LDA	_sc1
   1642  12eb		       8d f0 1f 	      STA	WriteToBuffer
   1643  12ee		       a5 94		      LDA	_sc2
   1644  12f0		       8d f0 1f 	      STA	WriteToBuffer
   1645  12f3		       a5 95		      LDA	_sc3
   1646  12f5		       8d f0 1f 	      STA	WriteToBuffer
   1647  12f8		       a5 a6		      LDA	gamenumber
   1648  12fa		       8d f0 1f 	      STA	WriteToBuffer
   1649  12fd		       a9 00		      LDA	#req_load
   1650  12ff		       8d f1 1f 	      STA	WriteSendBuffer
   1651  1302		       a5 ec		      LDA	_Bit5_Request_Pending
   1652  1304		       09 20		      ORA	#32
   1653  1306		       85 ec		      STA	_Bit5_Request_Pending
   1654  1308				   .
   1655  1308							; 
   1656  1308
   1657  1308				   .L0305		;  _Bit7_FireB_Restrainer{7}  =  1
   1658  1308
   1659  1308		       a5 ec		      LDA	_Bit7_FireB_Restrainer
   1660  130a		       09 80		      ORA	#128
   1661  130c		       85 ec		      STA	_Bit7_FireB_Restrainer
   1662  130e				   .
   1663  130e							; 
   1664  130e
   1665  130e				   .L0306		;  player1y  =  player_min_y  :  _Bit4_Game_Over{4}  =  0
   1666  130e
   1667  130e		       a9 02		      LDA	#player_min_y
   1668  1310		       85 86		      STA	player1y
   1669  1312		       a5 ec		      LDA	_Bit4_Game_Over
   1670  1314		       29 ef		      AND	#239
   1671  1316		       85 ec		      STA	_Bit4_Game_Over
   1672  1318				   .L0307		;  score  =  0  :  men_to_rescue  =  0
   1673  1318
   1674  1318		       a9 00		      LDA	#$00
   1675  131a		       85 95		      STA	score+2
   1676  131c		       a9 00		      LDA	#$00
   1677  131e		       85 94		      STA	score+1
   1678  1320		       a9 00		      LDA	#$00
   1679  1322		       85 93		      STA	score
   1680  1324		       a9 00		      LDA	#0
   1681  1326		       85 b0		      STA	men_to_rescue
   1682  1328				   .L0308		;  pfscore1  =  %00101010  :  pfscore2  =  255  :  pfscorecolor  =  _1C
   1683  1328
   1684  1328		       a9 2a		      LDA	#%00101010
   1685  132a		       85 f2		      STA	pfscore1
   1686  132c		       a9 ff		      LDA	#255
   1687  132e		       85 f3		      STA	pfscore2
   1688  1330		       a9 1c		      LDA	#_1C
   1689  1332		       85 f4		      STA	pfscorecolor
   1690  1334				   .
   1691  1334							; 
   1692  1334
   1693  1334				   .
   1694  1334							; 
   1695  1334
   1696  1334				   .
   1697  1334							; 
   1698  1334
   1699  1334				   .L0309		;  asm
   1700  1334
   1701  1334		       a9 f0		      lda	#>(r_room_color_middle-132+pfres*pfwidth)
   1702  1336
   1703  1336		       85 f1		      sta	pfcolortable+1
   1704  1338
   1705  1338		       a9 6f		      lda	#<(r_room_color_middle-132+pfres*pfwidth)
   1706  133a
   1707  133a		       85 f0		      sta	pfcolortable
   1708  133c
   1709  133c				   .
   1710  133c							; 
   1711  133c
   1712  133c				   .
   1713  133c							; 
   1714  133c
   1715  133c				   .
   1716  133c							; 
   1717  133c
   1718  133c				   .
   1719  133c							; 
   1720  133c
   1721  133c				   .
   1722  133c							; 
   1723  133c
   1724  133c				   .
   1725  133c							; 
   1726  133c
   1727  133c				   .__Main_Loop
   1728  133c							; __Main_Loop
   1729  133c
   1730  133c				   .L0310		;  COLUPF  =  r_room_color_top
   1731  133c
   1732  133c		       ad e2 f0 	      LDA	r_room_color_top
   1733  133f		       85 08		      STA	COLUPF
   1734  1341				   .L0311		;  NUSIZ1  =  $05
   1735  1341
   1736  1341		       a9 05		      LDA	#$05
   1737  1343		       85 05		      STA	NUSIZ1
   1738  1345				   .L0312		;  NUSIZ0  =  $10
   1739  1345
   1740  1345		       a9 10		      LDA	#$10
   1741  1347		       85 04		      STA	NUSIZ0
   1742  1349				   .L0313		;  COLUBK  =  _00
   1743  1349
   1744  1349		       a9 00		      LDA	#_00
   1745  134b		       85 09		      STA	COLUBK
   1746  134d				   .L0314		;  TextColor  =  $0E
   1747  134d
   1748  134d		       a9 0e		      LDA	#$0E
   1749  134f		       85 f5		      STA	TextColor
   1750  1351				   .
   1751  1351							; 
   1752  1351
   1753  1351				   .L0315		;  if switchreset then goto _Start
   1754  1351
   1755  1351		       a9 01		      lda	#1
   1756  1353		       2c 82 02 	      bit	SWCHB
   1757  1356		       d0 03		      BNE	.skipL0315
   1758  1358				   .condpart15
   1759  1358		       4c 00 91 	      jmp	._Start
   1760  135b
   1761  135b				   .skipL0315
   1762  135b				   .
   1763  135b							; 
   1764  135b
   1765  135b				   .L0316		;  if frame_counter{2} then player1: 
   1766  135b
   1767  135b		       a5 d5		      LDA	frame_counter
   1768  135d		       29 04		      AND	#4
   1769  135f		       f0 0c		      BEQ	.skipL0316
   1770  1361				   .condpart16
   1771  1361		       a2 1c		      LDX	#<player16then_1
   1772  1363		       86 8c		      STX	player1pointerlo
   1773  1365		       a9 fc		      LDA	#>player16then_1
   1774  1367		       85 8d		      STA	player1pointerhi
   1775  1369		       a9 07		      LDA	#7
   1776  136b		       85 8f		      STA	player1height
   1777  136d				   .skipL0316
   1778  136d				   .L0317		;  if ! frame_counter{2} then player1:
   1779  136d
   1780  136d		       a5 d5		      LDA	frame_counter
   1781  136f		       29 04		      AND	#4
   1782  1371		       d0 0c		      BNE	.skipL0317
   1783  1373				   .condpart17
   1784  1373		       a2 24		      LDX	#<player17then_1
   1785  1375		       86 8c		      STX	player1pointerlo
   1786  1377		       a9 fc		      LDA	#>player17then_1
   1787  1379		       85 8d		      STA	player1pointerhi
   1788  137b		       a9 07		      LDA	#7
   1789  137d		       85 8f		      STA	player1height
   1790  137f				   .skipL0317
   1791  137f				   .
   1792  137f							; 
   1793  137f
   1794  137f				   .L0318		;  on roommate_type goto _roommate_Enemy_def _roommate_Air_Missile_def _roommate_Fuel_def _roommate_Soldier_def
   1795  137f
   1796  137f		       a6 de		      LDX	roommate_type
   1797  1381		       bd 8a 93 	      LDA	.L0318jumptablehi,x
   1798  1384		       48		      PHA
   1799  1385		       bd 8e 93 	      LDA	.L0318jumptablelo,x
   1800  1388		       48		      PHA
   1801  1389		       60		      RTS
   1802  138a				   .L0318jumptablehi
   1803  138a		       93		      .byte.b	>(._roommate_Enemy_def-1)
   1804  138b		       93		      .byte.b	>(._roommate_Air_Missile_def-1)
   1805  138c		       93		      .byte.b	>(._roommate_Fuel_def-1)
   1806  138d		       93		      .byte.b	>(._roommate_Soldier_def-1)
   1807  138e				   .L0318jumptablelo
   1808  138e		       91		      .byte.b	<(._roommate_Enemy_def-1)
   1809  138f		       b8		      .byte.b	<(._roommate_Air_Missile_def-1)
   1810  1390		       c7		      .byte.b	<(._roommate_Fuel_def-1)
   1811  1391		       d6		      .byte.b	<(._roommate_Soldier_def-1)
   1812  1392				   .
   1813  1392							; 
   1814  1392
   1815  1392				   ._roommate_Enemy_def
   1816  1392							; _roommate_Enemy_def
   1817  1392
   1818  1392				   .L0319		;  if frame_counter{2} then player0: 
   1819  1392
   1820  1392		       a5 d5		      LDA	frame_counter
   1821  1394		       29 04		      AND	#4
   1822  1396		       f0 0c		      BEQ	.skipL0319
   1823  1398				   .condpart18
   1824  1398		       a2 2c		      LDX	#<player18then_0
   1825  139a		       86 8a		      STX	player0pointerlo
   1826  139c		       a9 fc		      LDA	#>player18then_0
   1827  139e		       85 8b		      STA	player0pointerhi
   1828  13a0		       a9 06		      LDA	#6
   1829  13a2		       85 8e		      STA	player0height
   1830  13a4				   .skipL0319
   1831  13a4				   .L0320		;  if !frame_counter{2} then player0: 
   1832  13a4
   1833  13a4		       a5 d5		      LDA	frame_counter
   1834  13a6		       29 04		      AND	#4
   1835  13a8		       d0 0c		      BNE	.skipL0320
   1836  13aa				   .condpart19
   1837  13aa		       a2 33		      LDX	#<player19then_0
   1838  13ac		       86 8a		      STX	player0pointerlo
   1839  13ae		       a9 fc		      LDA	#>player19then_0
   1840  13b0		       85 8b		      STA	player0pointerhi
   1841  13b2		       a9 06		      LDA	#6
   1842  13b4		       85 8e		      STA	player0height
   1843  13b6				   .skipL0320
   1844  13b6				   .L0321		;  goto _roommate_End_def
   1845  13b6
   1846  13b6		       4c fb 93 	      jmp	._roommate_End_def
   1847  13b9
   1848  13b9				   .
   1849  13b9							; 
   1850  13b9
   1851  13b9				   ._roommate_Air_Missile_def
   1852  13b9							; _roommate_Air_Missile_def
   1853  13b9
   1854  13b9				   .L0322		;  player0: 
   1855  13b9
   1856  13b9		       a2 3a		      LDX	#<playerL0322_0
   1857  13bb		       86 8a		      STX	player0pointerlo
   1858  13bd		       a9 fc		      LDA	#>playerL0322_0
   1859  13bf		       85 8b		      STA	player0pointerhi
   1860  13c1		       a9 0b		      LDA	#11
   1861  13c3		       85 8e		      STA	player0height
   1862  13c5				   .L0323		;  goto _roommate_End_def
   1863  13c5
   1864  13c5		       4c fb 93 	      jmp	._roommate_End_def
   1865  13c8
   1866  13c8				   .
   1867  13c8							; 
   1868  13c8
   1869  13c8				   ._roommate_Fuel_def
   1870  13c8							; _roommate_Fuel_def
   1871  13c8
   1872  13c8				   .L0324		;  player0: 
   1873  13c8
   1874  13c8		       a2 46		      LDX	#<playerL0324_0
   1875  13ca		       86 8a		      STX	player0pointerlo
   1876  13cc		       a9 fc		      LDA	#>playerL0324_0
   1877  13ce		       85 8b		      STA	player0pointerhi
   1878  13d0		       a9 18		      LDA	#24
   1879  13d2		       85 8e		      STA	player0height
   1880  13d4				   .L0325		;  goto _roommate_End_def
   1881  13d4
   1882  13d4		       4c fb 93 	      jmp	._roommate_End_def
   1883  13d7
   1884  13d7				   .
   1885  13d7							; 
   1886  13d7
   1887  13d7				   ._roommate_Soldier_def
   1888  13d7							; _roommate_Soldier_def
   1889  13d7
   1890  13d7				   .L0326		;  if frame_counter{2} then player0: 
   1891  13d7
   1892  13d7		       a5 d5		      LDA	frame_counter
   1893  13d9		       29 04		      AND	#4
   1894  13db		       f0 0c		      BEQ	.skipL0326
   1895  13dd				   .condpart20
   1896  13dd		       a2 5f		      LDX	#<player20then_0
   1897  13df		       86 8a		      STX	player0pointerlo
   1898  13e1		       a9 fc		      LDA	#>player20then_0
   1899  13e3		       85 8b		      STA	player0pointerhi
   1900  13e5		       a9 03		      LDA	#3
   1901  13e7		       85 8e		      STA	player0height
   1902  13e9				   .skipL0326
   1903  13e9				   .L0327		;  if !frame_counter{2} then player0: 
   1904  13e9
   1905  13e9		       a5 d5		      LDA	frame_counter
   1906  13eb		       29 04		      AND	#4
   1907  13ed		       d0 0c		      BNE	.skipL0327
   1908  13ef				   .condpart21
   1909  13ef		       a2 63		      LDX	#<player21then_0
   1910  13f1		       86 8a		      STX	player0pointerlo
   1911  13f3		       a9 fc		      LDA	#>player21then_0
   1912  13f5		       85 8b		      STA	player0pointerhi
   1913  13f7		       a9 03		      LDA	#3
   1914  13f9		       85 8e		      STA	player0height
   1915  13fb				   .skipL0327
   1916  13fb				   ._roommate_End_def
   1917  13fb							; _roommate_End_def
   1918  13fb
   1919  13fb				   .
   1920  13fb							; 
   1921  13fb
   1922  13fb				   .
   1923  13fb							; 
   1924  13fb
   1925  13fb				   .L0328		;  if !frame_counter{4} then _Skip_Wall_Movement
   1926  13fb
   1927  13fb		       a5 d5		      LDA	frame_counter
   1928  13fd		       29 10		      AND	#16
   1929  13ff					      if	((* - ._Skip_Wall_Movement) < 127) && ((* - ._Skip_Wall_Movement) > -128)
   1930  13ff		       f0 35		      BEQ	._Skip_Wall_Movement
   1931  1401				  -	      else
   1932  1401				  -	      bne	.3skip_Skip_Wall_Movement
   1933  1401				  -	      jmp	._Skip_Wall_Movement
   1934  1401				  -.3skip_Skip_Wall_Movement
   1935  1401					      endif
   1936  1401				   .L0329		;  if r_extra_wall_type_and_range{1}  ||  r_extra_wall_type_and_range	<  2 then _Finish_Interior_Movement
   1937  1401
   1938  1401		       ad eb f0 	      LDA	r_extra_wall_type_and_range
   1939  1404		       29 02		      AND	#2
   1940  1406					      if	((* - ._Finish_Interior_Movement) < 127) && ((* - ._Finish_Interior_Movement) > -128)
   1941  1406		       d0 58		      BNE	._Finish_Interior_Movement
   1942  1408				  -	      else
   1943  1408				  -	      beq	.4skip_Finish_Interior_Movement
   1944  1408				  -	      jmp	._Finish_Interior_Movement
   1945  1408				  -.4skip_Finish_Interior_Movement
   1946  1408					      endif
   1947  1408		       ad eb f0 	      LDA	r_extra_wall_type_and_range
   1948  140b		       c9 02		      CMP	#2
   1949  140d					      if	((* - ._Finish_Interior_Movement) < 127) && ((* - ._Finish_Interior_Movement) > -128)
   1950  140d		       90 51		      bcc	._Finish_Interior_Movement
   1951  140f				  -	      else
   1952  140f				  -	      bcs	.5skip_Finish_Interior_Movement
   1953  140f				  -	      jmp	._Finish_Interior_Movement
   1954  140f				  -.5skip_Finish_Interior_Movement
   1955  140f					      endif
   1956  140f				   .L0330		;  if _Bit1_Wall_Dir{1} then extra_wall_move_x  =  extra_wall_move_x  -  1 else extra_wall_move_x  =  extra_wall_move_x  +  1
   1957  140f
   1958  140f		       a5 ec		      LDA	_Bit1_Wall_Dir
   1959  1411		       29 02		      AND	#2
   1960  1413		       f0 05		      BEQ	.skipL0330
   1961  1415				   .condpart22
   1962  1415		       c6 dc		      DEC	extra_wall_move_x
   1963  1417		       4c 1c 94 	      jmp	.skipelse1
   1964  141a				   .skipL0330
   1965  141a		       e6 dc		      INC	extra_wall_move_x
   1966  141c				   .skipelse1
   1967  141c				   .L0331		;  if extra_wall_move_x  =  r_extra_wall_type_and_range then _Bit1_Wall_Dir{1}  =  1
   1968  141c
   1969  141c		       a5 dc		      LDA	extra_wall_move_x
   1970  141e		       cd eb f0 	      CMP	r_extra_wall_type_and_range
   1971  1421		       d0 06		      BNE	.skipL0331
   1972  1423				   .condpart23
   1973  1423		       a5 ec		      LDA	_Bit1_Wall_Dir
   1974  1425		       09 02		      ORA	#2
   1975  1427		       85 ec		      STA	_Bit1_Wall_Dir
   1976  1429				   .skipL0331
   1977  1429				   .L0332		;  if !extra_wall_move_x then _Bit1_Wall_Dir{1}  =  0
   1978  1429
   1979  1429		       a5 dc		      LDA	extra_wall_move_x
   1980  142b		       d0 06		      BNE	.skipL0332
   1981  142d				   .condpart24
   1982  142d		       a5 ec		      LDA	_Bit1_Wall_Dir
   1983  142f		       29 fd		      AND	#253
   1984  1431		       85 ec		      STA	_Bit1_Wall_Dir
   1985  1433				   .skipL0332
   1986  1433				   .L0333		;  goto _Finish_Interior_Movement
   1987  1433
   1988  1433		       4c 60 94 	      jmp	._Finish_Interior_Movement
   1989  1436
   1990  1436				   ._Skip_Wall_Movement
   1991  1436							; _Skip_Wall_Movement
   1992  1436
   1993  1436				   .
   1994  1436							; 
   1995  1436
   1996  1436				   .L0334		;  if r_roommate_type_and_range  <  4 then _Finish_Interior_Movement
   1997  1436
   1998  1436		       ad e8 f0 	      LDA	r_roommate_type_and_range
   1999  1439		       c9 04		      CMP	#4
   2000  143b					      if	((* - ._Finish_Interior_Movement) < 127) && ((* - ._Finish_Interior_Movement) > -128)
   2001  143b		       90 23		      bcc	._Finish_Interior_Movement
   2002  143d				  -	      else
   2003  143d				  -	      bcs	.6skip_Finish_Interior_Movement
   2004  143d				  -	      jmp	._Finish_Interior_Movement
   2005  143d				  -.6skip_Finish_Interior_Movement
   2006  143d					      endif
   2007  143d				   .L0335		;  if _Bit0_roommate_Dir{0} then roommate_move_x  =  roommate_move_x  -  1 else roommate_move_x  =  roommate_move_x  +  1
   2008  143d
   2009  143d		       a5 ec		      LDA	_Bit0_roommate_Dir
   2010  143f		       4a		      LSR
   2011  1440		       90 05		      BCC	.skipL0335
   2012  1442				   .condpart25
   2013  1442		       c6 dd		      DEC	roommate_move_x
   2014  1444		       4c 49 94 	      jmp	.skipelse2
   2015  1447				   .skipL0335
   2016  1447		       e6 dd		      INC	roommate_move_x
   2017  1449				   .skipelse2
   2018  1449				   .L0336		;  if roommate_move_x	=  r_roommate_type_and_range then _Bit0_roommate_Dir{0}  =  1
   2019  1449
   2020  1449		       a5 dd		      LDA	roommate_move_x
   2021  144b		       cd e8 f0 	      CMP	r_roommate_type_and_range
   2022  144e		       d0 06		      BNE	.skipL0336
   2023  1450				   .condpart26
   2024  1450		       a5 ec		      LDA	_Bit0_roommate_Dir
   2025  1452		       09 01		      ORA	#1
   2026  1454		       85 ec		      STA	_Bit0_roommate_Dir
   2027  1456				   .skipL0336
   2028  1456				   .L0337		;  if !roommate_move_x then _Bit0_roommate_Dir{0}  =  0
   2029  1456
   2030  1456		       a5 dd		      LDA	roommate_move_x
   2031  1458		       d0 06		      BNE	.skipL0337
   2032  145a				   .condpart27
   2033  145a		       a5 ec		      LDA	_Bit0_roommate_Dir
   2034  145c		       29 fe		      AND	#254
   2035  145e		       85 ec		      STA	_Bit0_roommate_Dir
   2036  1460				   .skipL0337
   2037  1460				   .
   2038  1460							; 
   2039  1460
   2040  1460				   ._Finish_Interior_Movement
   2041  1460							; _Finish_Interior_Movement
   2042  1460
   2043  1460				   .
   2044  1460							; 
   2045  1460
   2046  1460				   .L0338		;  frame_counter  =  frame_counter  -	1
   2047  1460
   2048  1460		       c6 d5		      DEC	frame_counter
   2049  1462				   .
   2050  1462							; 
   2051  1462
   2052  1462				   .
   2053  1462							; 
   2054  1462
   2055  1462				   .L0339		;  if r_extra_wall_startpos_x	=  200 then _Skip_extra_Wall
   2056  1462
   2057  1462		       ad ee f0 	      LDA	r_extra_wall_startpos_x
   2058  1465		       c9 c8		      CMP	#200
   2059  1467					      if	((* - ._Skip_extra_Wall) < 127) && ((* - ._Skip_extra_Wall) > -128)
   2060  1467		       f0 3a		      BEQ	._Skip_extra_Wall
   2061  1469				  -	      else
   2062  1469				  -	      bne	.7skip_Skip_extra_Wall
   2063  1469				  -	      jmp	._Skip_extra_Wall
   2064  1469				  -.7skip_Skip_extra_Wall
   2065  1469					      endif
   2066  1469				   .L0340		;  if _BitOp_Ball_Shot_Dir  &&  frame_counter{0} then _Skip_extra_Wall
   2067  1469
   2068  1469		       a5 d6		      LDA	_BitOp_Ball_Shot_Dir
   2069  146b		       f0 05		      BEQ	.skipL0340
   2070  146d				   .condpart28
   2071  146d		       a5 d5		      LDA	frame_counter
   2072  146f		       4a		      LSR
   2073  1470					      if	((* - ._Skip_extra_Wall) < 127) && ((* - ._Skip_extra_Wall) > -128)
   2074  1470		       b0 31		      bcs	._Skip_extra_Wall
   2075  1472				  -	      else
   2076  1472				  -	      bcc	.8skip_Skip_extra_Wall
   2077  1472				  -	      jmp	._Skip_extra_Wall
   2078  1472				  -.8skip_Skip_extra_Wall
   2079  1472					      endif
   2080  1472				   .skipL0340
   2081  1472				   .L0341		;  ballx  =  r_extra_wall_startpos_x  +  extra_wall_move_x
   2082  1472
   2083  1472		       ad ee f0 	      LDA	r_extra_wall_startpos_x
   2084  1475		       18		      CLC
   2085  1476		       65 dc		      ADC	extra_wall_move_x
   2086  1478		       85 84		      STA	ballx
   2087  147a				   .L0342		;  if r_extra_wall_type_and_range{1}  &&  frame_counter  <  r_extra_wall_type_and_range then bally  =	0 else bally  =  r_extra_wall_startpos_y
   2088  147a
   2089  147a		       ad eb f0 	      LDA	r_extra_wall_type_and_range
   2090  147d		       29 02		      AND	#2
   2091  147f		       f0 0e		      BEQ	.skipL0342
   2092  1481				   .condpart29
   2093  1481		       a5 d5		      LDA	frame_counter
   2094  1483		       cd eb f0 	      CMP	r_extra_wall_type_and_range
   2095  1486		       b0 07		      BCS	.skip29then
   2096  1488				   .condpart30
   2097  1488		       a9 00		      LDA	#0
   2098  148a		       85 89		      STA	bally
   2099  148c		       4c 94 94 	      jmp	.skipelse3
   2100  148f				   .skip29then
   2101  148f				   .skipL0342
   2102  148f		       ad ef f0 	      LDA	r_extra_wall_startpos_y
   2103  1492		       85 89		      STA	bally
   2104  1494				   .skipelse3
   2105  1494				   .L0343		;  ballheight	=  r_extra_wall_height
   2106  1494
   2107  1494		       ad ed f0 	      LDA	r_extra_wall_height
   2108  1497		       85 92		      STA	ballheight
   2109  1499				   .L0344		;  CTRLPF  =  r_extra_wall_width  |  1
   2110  1499
   2111  1499		       ad ec f0 	      LDA	r_extra_wall_width
   2112  149c		       09 01		      ORA	#1
   2113  149e		       85 0a		      STA	CTRLPF
   2114  14a0				   .L0345		;  goto _Skip_ball_shot
   2115  14a0
   2116  14a0		       4c b7 94 	      jmp	._Skip_ball_shot
   2117  14a3
   2118  14a3				   ._Skip_extra_Wall
   2119  14a3							; _Skip_extra_Wall
   2120  14a3
   2121  14a3				   .
   2122  14a3							; 
   2123  14a3
   2124  14a3				   .L0346		;  if !_BitOp_Ball_Shot_Dir then _Skip_ball_shot
   2125  14a3
   2126  14a3		       a5 d6		      LDA	_BitOp_Ball_Shot_Dir
   2127  14a5					      if	((* - ._Skip_ball_shot) < 127) && ((* - ._Skip_ball_shot) > -128)
   2128  14a5		       f0 10		      BEQ	._Skip_ball_shot
   2129  14a7				  -	      else
   2130  14a7				  -	      bne	.9skip_Skip_ball_shot
   2131  14a7				  -	      jmp	._Skip_ball_shot
   2132  14a7				  -.9skip_Skip_ball_shot
   2133  14a7					      endif
   2134  14a7				   .L0347		;  ballx  =  ball_shoot_x
   2135  14a7
   2136  14a7		       a5 ae		      LDA	ball_shoot_x
   2137  14a9		       85 84		      STA	ballx
   2138  14ab				   .L0348		;  bally  =  ball_shoot_y
   2139  14ab
   2140  14ab		       a5 af		      LDA	ball_shoot_y
   2141  14ad		       85 89		      STA	bally
   2142  14af				   .L0349		;  ballheight	=  1
   2143  14af
   2144  14af		       a9 01		      LDA	#1
   2145  14b1		       85 92		      STA	ballheight
   2146  14b3				   .L0350		;  CTRLPF  =  %00010001
   2147  14b3
   2148  14b3		       a9 11		      LDA	#%00010001
   2149  14b5		       85 0a		      STA	CTRLPF
   2150  14b7				   ._Skip_ball_shot
   2151  14b7							; _Skip_ball_shot
   2152  14b7
   2153  14b7				   .
   2154  14b7							; 
   2155  14b7
   2156  14b7				   .
   2157  14b7							; 
   2158  14b7
   2159  14b7				   .L0351		;  if r_roommate_startpos_y  =  200 then _Skip_enemy
   2160  14b7
   2161  14b7		       ad ea f0 	      LDA	r_roommate_startpos_y
   2162  14ba		       c9 c8		      CMP	#200
   2163  14bc					      if	((* - ._Skip_enemy) < 127) && ((* - ._Skip_enemy) > -128)
   2164  14bc		       f0 0d		      BEQ	._Skip_enemy
   2165  14be				  -	      else
   2166  14be				  -	      bne	.10skip_Skip_enemy
   2167  14be				  -	      jmp	._Skip_enemy
   2168  14be				  -.10skip_Skip_enemy
   2169  14be					      endif
   2170  14be				   .L0352		;  player0x  =  r_roommate_startpos_x	+  roommate_move_x
   2171  14be
   2172  14be		       ad e9 f0 	      LDA	r_roommate_startpos_x
   2173  14c1		       18		      CLC
   2174  14c2		       65 dd		      ADC	roommate_move_x
   2175  14c4		       85 80		      STA	player0x
   2176  14c6				   .L0353		;  player0y  =  r_roommate_startpos_y
   2177  14c6
   2178  14c6		       ad ea f0 	      LDA	r_roommate_startpos_y
   2179  14c9		       85 85		      STA	player0y
   2180  14cb				   ._Skip_enemy
   2181  14cb							; _Skip_enemy
   2182  14cb
   2183  14cb				   .
   2184  14cb							; 
   2185  14cb
   2186  14cb				   .
   2187  14cb							; 
   2188  14cb
   2189  14cb				   .
   2190  14cb							; 
   2191  14cb
   2192  14cb				   .
   2193  14cb							; 
   2194  14cb
   2195  14cb				   .L0354		;  if delay_counter then delay_counter  =  delay_counter  -  1  :  temp4  =  SWCHA  :	goto _skip_game_action
   2196  14cb
   2197  14cb		       a5 d4		      LDA	delay_counter
   2198  14cd		       f0 0a		      BEQ	.skipL0354
   2199  14cf				   .condpart31
   2200  14cf		       c6 d4		      DEC	delay_counter
   2201  14d1		       ad 80 02 	      LDA	SWCHA
   2202  14d4		       85 9f		      STA	temp4
   2203  14d6		       4c 4a 9a 	      jmp	._skip_game_action
   2204  14d9
   2205  14d9				   .skipL0354
   2206  14d9				   .
   2207  14d9							; 
   2208  14d9
   2209  14d9				   .L0355		;  if _Bit5_Request_Pending{5}  &&  ReceiveBufferSize	>  response_size_minus_1 then goto _Change_Room
   2210  14d9
   2211  14d9		       a5 ec		      LDA	_Bit5_Request_Pending
   2212  14db		       29 20		      AND	#32
   2213  14dd		       f0 0a		      BEQ	.skipL0355
   2214  14df				   .condpart32
   2215  14df		       a9 1c		      LDA	#response_size_minus_1
   2216  14e1		       cd f3 1f 	      CMP	ReceiveBufferSize
   2217  14e4		       b0 03		      BCS	.skip32then
   2218  14e6				   .condpart33
   2219  14e6		       4c cf 9c 	      jmp	._Change_Room
   2220  14e9
   2221  14e9				   .skip32then
   2222  14e9				   .skipL0355
   2223  14e9				   .
   2224  14e9							; 
   2225  14e9
   2226  14e9				   .L0356		;  if _Bit5_Request_Pending{5}  ||  _Bit4_Game_Over{4} then goto _skip_game_action
   2227  14e9
   2228  14e9		       a5 ec		      LDA	_Bit5_Request_Pending
   2229  14eb		       29 20		      AND	#32
   2230  14ed		       f0 03		      BEQ	.skipL0356
   2231  14ef				   .condpart34
   2232  14ef		       4c f8 94 	      jmp	.condpart35
   2233  14f2				   .skipL0356
   2234  14f2		       a5 ec		      LDA	_Bit4_Game_Over
   2235  14f4		       29 10		      AND	#16
   2236  14f6		       f0 03		      BEQ	.skip8OR
   2237  14f8				   .condpart35
   2238  14f8		       4c 4a 9a 	      jmp	._skip_game_action
   2239  14fb
   2240  14fb				   .skip8OR
   2241  14fb				   .
   2242  14fb							; 
   2243  14fb
   2244  14fb				   .L0357		;  if !_Bit2_Level_finished{2} then _game_action
   2245  14fb
   2246  14fb		       a5 ec		      LDA	_Bit2_Level_finished
   2247  14fd		       29 04		      AND	#4
   2248  14ff					      if	((* - ._game_action) < 127) && ((* - ._game_action) > -128)
   2249  14ff		       f0 77		      BEQ	._game_action
   2250  1501				  -	      else
   2251  1501				  -	      bne	.11skip_game_action
   2252  1501				  -	      jmp	._game_action
   2253  1501				  -.11skip_game_action
   2254  1501					      endif
   2255  1501				   .
   2256  1501							; 
   2257  1501
   2258  1501				   .
   2259  1501							; 
   2260  1501
   2261  1501				   .L0358		;  if pfscore2 then pfscore2  =  pfscore2  /  2  :  score  =  score  +  bonus_level_timer  :  goto _bonus_sound_delay
   2262  1501
   2263  1501		       a5 f3		      LDA	pfscore2
   2264  1503		       f0 17		      BEQ	.skipL0358
   2265  1505				   .condpart36
   2266  1505		       a5 f3		      LDA	pfscore2
   2267  1507		       4a		      lsr
   2268  1508		       85 f3		      STA	pfscore2
   2269  150a		       f8		      SED
   2270  150b		       18		      CLC
   2271  150c		       a5 94		      LDA	score+1
   2272  150e		       69 01		      ADC	#$01
   2273  1510		       85 94		      STA	score+1
   2274  1512		       a5 93		      LDA	score
   2275  1514		       69 00		      ADC	#$00
   2276  1516		       85 93		      STA	score
   2277  1518		       d8		      CLD
   2278  1519		       4c 65 95 	      jmp	._bonus_sound_delay
   2279  151c
   2280  151c				   .skipL0358
   2281  151c				   .
   2282  151c							; 
   2283  151c
   2284  151c				   .
   2285  151c							; 
   2286  151c
   2287  151c				   .L0359		;  if pfscore1 then pfscore1  =  pfscore1  /  4  :  score  =  score  +  bonus_level_lives  :  goto _bonus_sound_delay
   2288  151c
   2289  151c		       a5 f2		      LDA	pfscore1
   2290  151e		       f0 18		      BEQ	.skipL0359
   2291  1520				   .condpart37
   2292  1520		       a5 f2		      LDA	pfscore1
   2293  1522		       4a		      lsr
   2294  1523		       4a		      lsr
   2295  1524		       85 f2		      STA	pfscore1
   2296  1526		       f8		      SED
   2297  1527		       18		      CLC
   2298  1528		       a5 94		      LDA	score+1
   2299  152a		       69 02		      ADC	#$02
   2300  152c		       85 94		      STA	score+1
   2301  152e		       a5 93		      LDA	score
   2302  1530		       69 00		      ADC	#$00
   2303  1532		       85 93		      STA	score
   2304  1534		       d8		      CLD
   2305  1535		       4c 65 95 	      jmp	._bonus_sound_delay
   2306  1538
   2307  1538				   .skipL0359
   2308  1538				   .L0360		;  if ! _Bit3_Safe_Point_reached{3} then WriteToBuffer  =  _sc1  :  WriteToBuffer  =  _sc2  :	WriteToBuffer  =  _sc3	:  WriteSendBuffer  =  req_level_up  :	_Bit3_Safe_Point_reached{3}  =	1
   2309  1538
   2310  1538		       a5 ec		      LDA	_Bit3_Safe_Point_reached
   2311  153a		       29 08		      AND	#8
   2312  153c		       d0 1a		      BNE	.skipL0360
   2313  153e				   .condpart38
   2314  153e		       a5 93		      LDA	_sc1
   2315  1540		       8d f0 1f 	      STA	WriteToBuffer
   2316  1543		       a5 94		      LDA	_sc2
   2317  1545		       8d f0 1f 	      STA	WriteToBuffer
   2318  1548		       a5 95		      LDA	_sc3
   2319  154a		       8d f0 1f 	      STA	WriteToBuffer
   2320  154d		       a9 01		      LDA	#req_level_up
   2321  154f		       8d f1 1f 	      STA	WriteSendBuffer
   2322  1552		       a5 ec		      LDA	_Bit3_Safe_Point_reached
   2323  1554		       09 08		      ORA	#8
   2324  1556		       85 ec		      STA	_Bit3_Safe_Point_reached
   2325  1558				   .skipL0360
   2326  1558				   .
   2327  1558							; 
   2328  1558
   2329  1558				   .L0361		;  if joy0fire then goto _Level_Up else goto _skip_game_action
   2330  1558
   2331  1558		       24 0c		      bit	INPT4
   2332  155a		       30 06		      BMI	.skipL0361
   2333  155c				   .condpart39
   2334  155c		       4c 03 9c 	      jmp	._Level_Up
   2335  155f		       4c 65 95 	      jmp	.skipelse4
   2336  1562				   .skipL0361
   2337  1562		       4c 4a 9a 	      jmp	._skip_game_action
   2338  1565
   2339  1565				   .skipelse4
   2340  1565				   ._bonus_sound_delay
   2341  1565							; _bonus_sound_delay
   2342  1565
   2343  1565				   .L0362		;  _Ch0_Sound	=  3  :  _Ch0_Duration	=  1  :  _Ch0_Counter  =  0
   2344  1565
   2345  1565		       a9 03		      LDA	#3
   2346  1567		       85 d9		      STA	_Ch0_Sound
   2347  1569		       a9 01		      LDA	#1
   2348  156b		       85 da		      STA	_Ch0_Duration
   2349  156d		       a9 00		      LDA	#0
   2350  156f		       85 db		      STA	_Ch0_Counter
   2351  1571				   .L0363		;  delay_counter  =  25
   2352  1571
   2353  1571		       a9 19		      LDA	#25
   2354  1573		       85 d4		      STA	delay_counter
   2355  1575				   .
   2356  1575							; 
   2357  1575
   2358  1575				   .L0364		;  goto _skip_game_action
   2359  1575
   2360  1575		       4c 4a 9a 	      jmp	._skip_game_action
   2361  1578
   2362  1578				   .
   2363  1578							; 
   2364  1578
   2365  1578				   .
   2366  1578							; 
   2367  1578
   2368  1578				   ._game_action
   2369  1578							; _game_action
   2370  1578
   2371  1578				   .
   2372  1578							; 
   2373  1578
   2374  1578				   .L0365		;  if frame_counter then _Skip_dec_game_counter
   2375  1578
   2376  1578		       a5 d5		      LDA	frame_counter
   2377  157a					      if	((* - ._Skip_dec_game_counter) < 127) && ((* - ._Skip_dec_game_counter) > -128)
   2378  157a		       d0 38		      BNE	._Skip_dec_game_counter
   2379  157c				  -	      else
   2380  157c				  -	      beq	.12skip_Skip_dec_game_counter
   2381  157c				  -	      jmp	._Skip_dec_game_counter
   2382  157c				  -.12skip_Skip_dec_game_counter
   2383  157c					      endif
   2384  157c				   .L0366		;  if bonus_bcd_counter then dec bonus_bcd_counter  =	bonus_bcd_counter  -  1
   2385  157c
   2386  157c		       a5 b1		      LDA	bonus_bcd_counter
   2387  157e		       f0 09		      BEQ	.skipL0366
   2388  1580				   .condpart40
   2389  1580		       f8		      SED
   2390  1581		       a5 b1		      LDA	bonus_bcd_counter
   2391  1583		       38		      SEC
   2392  1584		       e9 01		      SBC	#1
   2393  1586		       85 b1		      STA	bonus_bcd_counter
   2394  1588		       d8		      CLD
   2395  1589				   .skipL0366
   2396  1589				   .
   2397  1589							; 
   2398  1589
   2399  1589				   .L0367		;  if !pfscore2 then _Decrease_live_counter
   2400  1589
   2401  1589		       a5 f3		      LDA	pfscore2
   2402  158b					      if	((* - ._Decrease_live_counter) < 127) && ((* - ._Decrease_live_counter) > -128)
   2403  158b		       f0 08		      BEQ	._Decrease_live_counter
   2404  158d				  -	      else
   2405  158d				  -	      bne	.13skip_Decrease_live_counter
   2406  158d				  -	      jmp	._Decrease_live_counter
   2407  158d				  -.13skip_Decrease_live_counter
   2408  158d					      endif
   2409  158d				   .L0368		;  pfscore2  =  pfscore2  /  2
   2410  158d
   2411  158d		       a5 f3		      LDA	pfscore2
   2412  158f		       4a		      lsr
   2413  1590		       85 f3		      STA	pfscore2
   2414  1592				   .L0369		;  goto _Skip_dec_game_counter
   2415  1592
   2416  1592		       4c b4 95 	      jmp	._Skip_dec_game_counter
   2417  1595
   2418  1595				   ._Decrease_live_counter
   2419  1595							; _Decrease_live_counter
   2420  1595
   2421  1595				   .L0370		;  pfscore1  =  pfscore1  /  4
   2422  1595
   2423  1595		       a5 f2		      LDA	pfscore1
   2424  1597		       4a		      lsr
   2425  1598		       4a		      lsr
   2426  1599		       85 f2		      STA	pfscore1
   2427  159b				   .
   2428  159b							; 
   2429  159b
   2430  159b				   .L0371		;  _Ch0_Sound	=  4  :  _Ch0_Duration	=  1  :  _Ch0_Counter  =  0
   2431  159b
   2432  159b		       a9 04		      LDA	#4
   2433  159d		       85 d9		      STA	_Ch0_Sound
   2434  159f		       a9 01		      LDA	#1
   2435  15a1		       85 da		      STA	_Ch0_Duration
   2436  15a3		       a9 00		      LDA	#0
   2437  15a5		       85 db		      STA	_Ch0_Counter
   2438  15a7				   .L0372		;  if !pfscore1 then goto _Set_Game_Over else goto _Reset_Level
   2439  15a7
   2440  15a7		       a5 f2		      LDA	pfscore1
   2441  15a9		       d0 06		      BNE	.skipL0372
   2442  15ab				   .condpart41
   2443  15ab		       4c a9 9b 	      jmp	._Set_Game_Over
   2444  15ae		       4c b4 95 	      jmp	.skipelse5
   2445  15b1				   .skipL0372
   2446  15b1		       4c c6 9b 	      jmp	._Reset_Level
   2447  15b4
   2448  15b4				   .skipelse5
   2449  15b4				   ._Skip_dec_game_counter
   2450  15b4							; _Skip_dec_game_counter
   2451  15b4
   2452  15b4				   .
   2453  15b4							; 
   2454  15b4
   2455  15b4				   .
   2456  15b4							; 
   2457  15b4
   2458  15b4				   .
   2459  15b4							; 
   2460  15b4
   2461  15b4				   .L0373		;  if player0y  =  200 then goto __Skip_Enemy_Fire
   2462  15b4
   2463  15b4		       a5 85		      LDA	player0y
   2464  15b6		       c9 c8		      CMP	#200
   2465  15b8		       d0 03		      BNE	.skipL0373
   2466  15ba				   .condpart42
   2467  15ba		       4c 41 96 	      jmp	.__Skip_Enemy_Fire
   2468  15bd
   2469  15bd				   .skipL0373
   2470  15bd				   .L0374		;  if _BitOp_Ball_Shot_Dir  ||  roommate_type then goto __Skip_Enemy_Fire
   2471  15bd
   2472  15bd		       a5 d6		      LDA	_BitOp_Ball_Shot_Dir
   2473  15bf		       f0 03		      BEQ	.skipL0374
   2474  15c1				   .condpart43
   2475  15c1		       4c c8 95 	      jmp	.condpart44
   2476  15c4				   .skipL0374
   2477  15c4		       a5 de		      LDA	roommate_type
   2478  15c6		       f0 03		      BEQ	.skip9OR
   2479  15c8				   .condpart44
   2480  15c8		       4c 41 96 	      jmp	.__Skip_Enemy_Fire
   2481  15cb
   2482  15cb				   .skip9OR
   2483  15cb				   .
   2484  15cb							; 
   2485  15cb
   2486  15cb				   .L0375		;  _BitOp_Ball_Shot_Dir  =  0	:  Bally_velocity  =  0.0  :  q  =  0
   2487  15cb
   2488  15cb		       a9 00		      LDA	#0
   2489  15cd		       85 d6		      STA	_BitOp_Ball_Shot_Dir
   2490  15cf		       a2 00		      LDX	#0
   2491  15d1		       86 e4		      STX	q
   2492  15d3		       a9 00		      LDA	#0
   2493  15d5		       85 e3		      STA	Bally_velocity
   2494  15d7		       a9 00		      LDA	#0
   2495  15d9		       85 e4		      STA	q
   2496  15db				   .
   2497  15db							; 
   2498  15db
   2499  15db				   .L0376		;  ball_shoot_x  =  player0x  +  4  :	ball_shoot_y  =  player0y  -  5
   2500  15db
   2501  15db		       a5 80		      LDA	player0x
   2502  15dd		       18		      CLC
   2503  15de		       69 04		      ADC	#4
   2504  15e0		       85 ae		      STA	ball_shoot_x
   2505  15e2		       a5 85		      LDA	player0y
   2506  15e4		       38		      SEC
   2507  15e5		       e9 05		      SBC	#5
   2508  15e7		       85 af		      STA	ball_shoot_y
   2509  15e9				   .
   2510  15e9							; 
   2511  15e9
   2512  15e9				   .
   2513  15e9							; 
   2514  15e9
   2515  15e9				   .L0377		;  if _Ch0_Sound  <>  3 then _Ch0_Sound  =  2	:  _Ch0_Duration  =  1	:  _Ch0_Counter  =  0
   2516  15e9
   2517  15e9		       a5 d9		      LDA	_Ch0_Sound
   2518  15eb		       c9 03		      CMP	#3
   2519  15ed		       f0 0c		      BEQ	.skipL0377
   2520  15ef				   .condpart45
   2521  15ef		       a9 02		      LDA	#2
   2522  15f1		       85 d9		      STA	_Ch0_Sound
   2523  15f3		       a9 01		      LDA	#1
   2524  15f5		       85 da		      STA	_Ch0_Duration
   2525  15f7		       a9 00		      LDA	#0
   2526  15f9		       85 db		      STA	_Ch0_Counter
   2527  15fb				   .skipL0377
   2528  15fb				   .
   2529  15fb							; 
   2530  15fb
   2531  15fb				   .L0378		;  if player1x  >  player0x then _Bit2_Ball_Shot_Dir_Right1{2}  =  1 else _Bit0_Ball_Shot_Dir_Left1{0}  =  1
   2532  15fb
   2533  15fb		       a5 80		      LDA	player0x
   2534  15fd		       c5 81		      CMP	player1x
   2535  15ff		       b0 09		      BCS	.skipL0378
   2536  1601				   .condpart46
   2537  1601		       a5 d6		      LDA	_Bit2_Ball_Shot_Dir_Right1
   2538  1603		       09 04		      ORA	#4
   2539  1605		       85 d6		      STA	_Bit2_Ball_Shot_Dir_Right1
   2540  1607		       4c 10 96 	      jmp	.skipelse6
   2541  160a				   .skipL0378
   2542  160a		       a5 d6		      LDA	_Bit0_Ball_Shot_Dir_Left1
   2543  160c		       09 01		      ORA	#1
   2544  160e		       85 d6		      STA	_Bit0_Ball_Shot_Dir_Left1
   2545  1610				   .skipelse6
   2546  1610				   .L0379		;  if !_Bit2_Ball_Shot_Dir_Right1{2} then __Skip_Additional_Right
   2547  1610
   2548  1610		       a5 d6		      LDA	_Bit2_Ball_Shot_Dir_Right1
   2549  1612		       29 04		      AND	#4
   2550  1614					      if	((* - .__Skip_Additional_Right) < 127) && ((* - .__Skip_Additional_Right) > -128)
   2551  1614		       f0 13		      BEQ	.__Skip_Additional_Right
   2552  1616				  -	      else
   2553  1616				  -	      bne	.14skip__Skip_Additional_Right
   2554  1616				  -	      jmp	.__Skip_Additional_Right
   2555  1616				  -.14skip__Skip_Additional_Right
   2556  1616					      endif
   2557  1616				   .L0380		;  temp4  =  player1x	-  player0x
   2558  1616
   2559  1616		       a5 81		      LDA	player1x
   2560  1618		       38		      SEC
   2561  1619		       e5 80		      SBC	player0x
   2562  161b		       85 9f		      STA	temp4
   2563  161d				   .L0381		;  if temp4  >  25 then _Bit3_Ball_Shot_Dir_Right2{3}	=  1
   2564  161d
   2565  161d		       a9 19		      LDA	#25
   2566  161f		       c5 9f		      CMP	temp4
   2567  1621		       b0 06		      BCS	.skipL0381
   2568  1623				   .condpart47
   2569  1623		       a5 d6		      LDA	_Bit3_Ball_Shot_Dir_Right2
   2570  1625		       09 08		      ORA	#8
   2571  1627		       85 d6		      STA	_Bit3_Ball_Shot_Dir_Right2
   2572  1629				   .skipL0381
   2573  1629				   .__Skip_Additional_Right
   2574  1629							; __Skip_Additional_Right
   2575  1629
   2576  1629				   .L0382		;  if !_Bit0_Ball_Shot_Dir_Left1{0} then __Skip_Enemy_Fire
   2577  1629
   2578  1629		       a5 d6		      LDA	_Bit0_Ball_Shot_Dir_Left1
   2579  162b		       4a		      LSR
   2580  162c					      if	((* - .__Skip_Enemy_Fire) < 127) && ((* - .__Skip_Enemy_Fire) > -128)
   2581  162c		       90 13		      bcc	.__Skip_Enemy_Fire
   2582  162e				  -	      else
   2583  162e				  -	      bcs	.15skip__Skip_Enemy_Fire
   2584  162e				  -	      jmp	.__Skip_Enemy_Fire
   2585  162e				  -.15skip__Skip_Enemy_Fire
   2586  162e					      endif
   2587  162e				   .L0383		;  temp4  =  player0x	-  player1x
   2588  162e
   2589  162e		       a5 80		      LDA	player0x
   2590  1630		       38		      SEC
   2591  1631		       e5 81		      SBC	player1x
   2592  1633		       85 9f		      STA	temp4
   2593  1635				   .L0384		;  if temp4  >  25 then _Bit1_Ball_Shot_Dir_Left2{1}  =  1
   2594  1635
   2595  1635		       a9 19		      LDA	#25
   2596  1637		       c5 9f		      CMP	temp4
   2597  1639		       b0 06		      BCS	.skipL0384
   2598  163b				   .condpart48
   2599  163b		       a5 d6		      LDA	_Bit1_Ball_Shot_Dir_Left2
   2600  163d		       09 02		      ORA	#2
   2601  163f		       85 d6		      STA	_Bit1_Ball_Shot_Dir_Left2
   2602  1641				   .skipL0384
   2603  1641				   .
   2604  1641							; 
   2605  1641
   2606  1641				   .__Skip_Enemy_Fire
   2607  1641							; __Skip_Enemy_Fire
   2608  1641
   2609  1641				   .
   2610  1641							; 
   2611  1641
   2612  1641				   .
   2613  1641							; 
   2614  1641
   2615  1641				   .
   2616  1641							; 
   2617  1641
   2618  1641				   .L0385		;  if !_BitOp_Ball_Shot_Dir then goto __Skip_Enemy_Missile
   2619  1641
   2620  1641		       a5 d6		      LDA	_BitOp_Ball_Shot_Dir
   2621  1643		       d0 03		      BNE	.skipL0385
   2622  1645				   .condpart49
   2623  1645		       4c b9 96 	      jmp	.__Skip_Enemy_Missile
   2624  1648
   2625  1648				   .skipL0385
   2626  1648				   .
   2627  1648							; 
   2628  1648
   2629  1648				   .
   2630  1648							; 
   2631  1648
   2632  1648				   .L0386		;  if ball_shoot_y  >	player1y then ball_shoot_y  =  ball_shoot_y  -	1
   2633  1648
   2634  1648		       a5 86		      LDA	player1y
   2635  164a		       c5 af		      CMP	ball_shoot_y
   2636  164c		       b0 02		      BCS	.skipL0386
   2637  164e				   .condpart50
   2638  164e		       c6 af		      DEC	ball_shoot_y
   2639  1650				   .skipL0386
   2640  1650				   .L0387		;  if _Bit0_Ball_Shot_Dir_Left1{0}  &&  frame_counter{0} then ball_shoot_x  =	ball_shoot_x  -  1  :  if _Bit1_Ball_Shot_Dir_Left2{1} then ball_shoot_x  =  ball_shoot_x  -  1
   2641  1650
   2642  1650		       a5 d6		      LDA	_Bit0_Ball_Shot_Dir_Left1
   2643  1652		       4a		      LSR
   2644  1653		       90 0f		      BCC	.skipL0387
   2645  1655				   .condpart51
   2646  1655		       a5 d5		      LDA	frame_counter
   2647  1657		       4a		      LSR
   2648  1658		       90 0a		      BCC	.skip51then
   2649  165a				   .condpart52
   2650  165a		       c6 ae		      DEC	ball_shoot_x
   2651  165c		       a5 d6		      LDA	_Bit1_Ball_Shot_Dir_Left2
   2652  165e		       29 02		      AND	#2
   2653  1660		       f0 02		      BEQ	.skip52then
   2654  1662				   .condpart53
   2655  1662		       c6 ae		      DEC	ball_shoot_x
   2656  1664				   .skip52then
   2657  1664				   .skip51then
   2658  1664				   .skipL0387
   2659  1664				   .L0388		;  if _Bit2_Ball_Shot_Dir_Right1{2}  &&  frame_counter{0} then ball_shoot_x  =  ball_shoot_x  +  1  :	if _Bit3_Ball_Shot_Dir_Right2{3} then ball_shoot_x  =  ball_shoot_x  +	1
   2660  1664
   2661  1664		       a5 d6		      LDA	_Bit2_Ball_Shot_Dir_Right1
   2662  1666		       29 04		      AND	#4
   2663  1668		       f0 0f		      BEQ	.skipL0388
   2664  166a				   .condpart54
   2665  166a		       a5 d5		      LDA	frame_counter
   2666  166c		       4a		      LSR
   2667  166d		       90 0a		      BCC	.skip54then
   2668  166f				   .condpart55
   2669  166f		       e6 ae		      INC	ball_shoot_x
   2670  1671		       a5 d6		      LDA	_Bit3_Ball_Shot_Dir_Right2
   2671  1673		       29 08		      AND	#8
   2672  1675		       f0 02		      BEQ	.skip55then
   2673  1677				   .condpart56
   2674  1677		       e6 ae		      INC	ball_shoot_x
   2675  1679				   .skip55then
   2676  1679				   .skip54then
   2677  1679				   .skipL0388
   2678  1679				   .
   2679  1679							; 
   2680  1679
   2681  1679				   .L0389		;  rem apply gravity
   2682  1679
   2683  1679				   .L0390		;  Bally_velocity  =  Bally_velocity  +  gravity_ball
   2684  1679
   2685  1679		       a5 e4		      LDA	q
   2686  167b		       18		      CLC
   2687  167c		       69 02		      ADC	#2
   2688  167e		       85 e4		      STA	q
   2689  1680		       a5 e3		      LDA	Bally_velocity
   2690  1682		       69 00		      ADC	#0
   2691  1684		       85 e3		      STA	Bally_velocity
   2692  1686				   .L0391		;  Bally_position  =  Bally_position  +  Bally_velocity
   2693  1686
   2694  1686		       a5 e5		      LDA	r
   2695  1688		       18		      CLC
   2696  1689		       65 e4		      ADC	q
   2697  168b		       85 e5		      STA	r
   2698  168d		       a5 af		      LDA	Bally_position
   2699  168f		       65 e3		      ADC	Bally_velocity
   2700  1691		       85 af		      STA	Bally_position
   2701  1693				   .
   2702  1693							; 
   2703  1693
   2704  1693				   .
   2705  1693							; 
   2706  1693
   2707  1693				   .
   2708  1693							; 
   2709  1693
   2710  1693				   .L0392		;  if ball_shoot_y  <	_M_Edge_Top then __Delete_Enemy_Missile
   2711  1693
   2712  1693		       a5 af		      LDA	ball_shoot_y
   2713  1695		       c9 02		      CMP	#_M_Edge_Top
   2714  1697					      if	((* - .__Delete_Enemy_Missile) < 127) && ((* - .__Delete_Enemy_Missile) > -128)
   2715  1697		       90 16		      bcc	.__Delete_Enemy_Missile
   2716  1699				  -	      else
   2717  1699				  -	      bcs	.16skip__Delete_Enemy_Missile
   2718  1699				  -	      jmp	.__Delete_Enemy_Missile
   2719  1699				  -.16skip__Delete_Enemy_Missile
   2720  1699					      endif
   2721  1699				   .L0393		;  if ball_shoot_y  >	_M_Edge_Bottom then __Delete_Enemy_Missile
   2722  1699
   2723  1699		       a9 58		      LDA	#_M_Edge_Bottom
   2724  169b		       c5 af		      CMP	ball_shoot_y
   2725  169d					      if	((* - .__Delete_Enemy_Missile) < 127) && ((* - .__Delete_Enemy_Missile) > -128)
   2726  169d		       90 10		      bcc	.__Delete_Enemy_Missile
   2727  169f				  -	      else
   2728  169f				  -	      bcs	.17skip__Delete_Enemy_Missile
   2729  169f				  -	      jmp	.__Delete_Enemy_Missile
   2730  169f				  -.17skip__Delete_Enemy_Missile
   2731  169f					      endif
   2732  169f				   .L0394		;  if ball_shoot_x  <	_M_Edge_Left then __Delete_Enemy_Missile
   2733  169f
   2734  169f		       a5 ae		      LDA	ball_shoot_x
   2735  16a1		       c9 0e		      CMP	#_M_Edge_Left
   2736  16a3					      if	((* - .__Delete_Enemy_Missile) < 127) && ((* - .__Delete_Enemy_Missile) > -128)
   2737  16a3		       90 0a		      bcc	.__Delete_Enemy_Missile
   2738  16a5				  -	      else
   2739  16a5				  -	      bcs	.18skip__Delete_Enemy_Missile
   2740  16a5				  -	      jmp	.__Delete_Enemy_Missile
   2741  16a5				  -.18skip__Delete_Enemy_Missile
   2742  16a5					      endif
   2743  16a5				   .L0395		;  if ball_shoot_x  >	_M_Edge_Right then __Delete_Enemy_Missile
   2744  16a5
   2745  16a5		       a9 94		      LDA	#_M_Edge_Right
   2746  16a7		       c5 ae		      CMP	ball_shoot_x
   2747  16a9					      if	((* - .__Delete_Enemy_Missile) < 127) && ((* - .__Delete_Enemy_Missile) > -128)
   2748  16a9		       90 04		      bcc	.__Delete_Enemy_Missile
   2749  16ab				  -	      else
   2750  16ab				  -	      bcs	.19skip__Delete_Enemy_Missile
   2751  16ab				  -	      jmp	.__Delete_Enemy_Missile
   2752  16ab				  -.19skip__Delete_Enemy_Missile
   2753  16ab					      endif
   2754  16ab				   .
   2755  16ab							; 
   2756  16ab
   2757  16ab				   .
   2758  16ab							; 
   2759  16ab
   2760  16ab				   .L0396		;  if !collision(playfield,ball) then __Skip_Enemy_Missile
   2761  16ab
   2762  16ab		       24 06		      bit	CXBLPF
   2763  16ad					      if	((* - .__Skip_Enemy_Missile) < 127) && ((* - .__Skip_Enemy_Missile) > -128)
   2764  16ad		       10 0a		      bpl	.__Skip_Enemy_Missile
   2765  16af				  -	      else
   2766  16af				  -	      bmi	.20skip__Skip_Enemy_Missile
   2767  16af				  -	      jmp	.__Skip_Enemy_Missile
   2768  16af				  -.20skip__Skip_Enemy_Missile
   2769  16af					      endif
   2770  16af				   .
   2771  16af							; 
   2772  16af
   2773  16af				   .__Delete_Enemy_Missile
   2774  16af							; __Delete_Enemy_Missile
   2775  16af
   2776  16af				   .
   2777  16af							; 
   2778  16af
   2779  16af				   .
   2780  16af							; 
   2781  16af
   2782  16af				   .L0397		;  _BitOp_Ball_Shot_Dir  =  0	:  ballx  =  200  :  bally  =  200
   2783  16af
   2784  16af		       a9 00		      LDA	#0
   2785  16b1		       85 d6		      STA	_BitOp_Ball_Shot_Dir
   2786  16b3		       a9 c8		      LDA	#200
   2787  16b5		       85 84		      STA	ballx
   2788  16b7		       85 89		      STA	bally
   2789  16b9				   .
   2790  16b9							; 
   2791  16b9
   2792  16b9				   .__Skip_Enemy_Missile
   2793  16b9							; __Skip_Enemy_Missile
   2794  16b9
   2795  16b9				   .
   2796  16b9							; 
   2797  16b9
   2798  16b9				   .
   2799  16b9							; 
   2800  16b9
   2801  16b9				   .
   2802  16b9							; 
   2803  16b9
   2804  16b9				   .
   2805  16b9							; 
   2806  16b9
   2807  16b9				   .
   2808  16b9							; 
   2809  16b9
   2810  16b9				   .L0398		;  if !joy0fire then _Bit7_FireB_Restrainer{7}  =  0  :  goto __Skip_Fire
   2811  16b9
   2812  16b9		       24 0c		      bit	INPT4
   2813  16bb		       10 09		      BPL	.skipL0398
   2814  16bd				   .condpart57
   2815  16bd		       a5 ec		      LDA	_Bit7_FireB_Restrainer
   2816  16bf		       29 7f		      AND	#127
   2817  16c1		       85 ec		      STA	_Bit7_FireB_Restrainer
   2818  16c3		       4c 44 97 	      jmp	.__Skip_Fire
   2819  16c6
   2820  16c6				   .skipL0398
   2821  16c6				   .L0399		;  if _Bit7_FireB_Restrainer{7} then __Skip_Fire
   2822  16c6
   2823  16c6		       24 ec		      BIT	_Bit7_FireB_Restrainer
   2824  16c8					      if	((* - .__Skip_Fire) < 127) && ((* - .__Skip_Fire) > -128)
   2825  16c8		       30 7a		      bmi	.__Skip_Fire
   2826  16ca				  -	      else
   2827  16ca				  -	      bpl	.21skip__Skip_Fire
   2828  16ca				  -	      jmp	.__Skip_Fire
   2829  16ca				  -.21skip__Skip_Fire
   2830  16ca					      endif
   2831  16ca				   .
   2832  16ca							; 
   2833  16ca
   2834  16ca				   .
   2835  16ca							; 
   2836  16ca
   2837  16ca				   .L0400		;  if _BitOp_M0_Dir  ||  _Bit0_P1_Dir_Up{0} then __Skip_Fire
   2838  16ca
   2839  16ca		       a5 d7		      LDA	_BitOp_M0_Dir
   2840  16cc					      if	((* - .__Skip_Fire) < 127) && ((* - .__Skip_Fire) > -128)
   2841  16cc		       d0 76		      BNE	.__Skip_Fire
   2842  16ce				  -	      else
   2843  16ce				  -	      beq	.22skip__Skip_Fire
   2844  16ce				  -	      jmp	.__Skip_Fire
   2845  16ce				  -.22skip__Skip_Fire
   2846  16ce					      endif
   2847  16ce		       a5 d8		      LDA	_Bit0_P1_Dir_Up
   2848  16d0		       4a		      LSR
   2849  16d1					      if	((* - .__Skip_Fire) < 127) && ((* - .__Skip_Fire) > -128)
   2850  16d1		       b0 71		      bcs	.__Skip_Fire
   2851  16d3				  -	      else
   2852  16d3				  -	      bcc	.23skip__Skip_Fire
   2853  16d3				  -	      jmp	.__Skip_Fire
   2854  16d3				  -.23skip__Skip_Fire
   2855  16d3					      endif
   2856  16d3				   .
   2857  16d3							; 
   2858  16d3
   2859  16d3				   .
   2860  16d3							; 
   2861  16d3
   2862  16d3				   .
   2863  16d3							; 
   2864  16d3
   2865  16d3				   .L0401		;  _BitOp_M0_Dir  =  _BitOp_P1_Dir
   2866  16d3
   2867  16d3		       a5 d8		      LDA	_BitOp_P1_Dir
   2868  16d5		       85 d7		      STA	_BitOp_M0_Dir
   2869  16d7				   .
   2870  16d7							; 
   2871  16d7
   2872  16d7				   .L0402		;  if _BitOp_M0_Dir then _Skip_correct_initial_M0_Dir
   2873  16d7
   2874  16d7		       a5 d7		      LDA	_BitOp_M0_Dir
   2875  16d9					      if	((* - ._Skip_correct_initial_M0_Dir) < 127) && ((* - ._Skip_correct_initial_M0_Dir) > -128)
   2876  16d9		       d0 0f		      BNE	._Skip_correct_initial_M0_Dir
   2877  16db				  -	      else
   2878  16db				  -	      beq	.24skip_Skip_correct_initial_M0_Dir
   2879  16db				  -	      jmp	._Skip_correct_initial_M0_Dir
   2880  16db				  -.24skip_Skip_correct_initial_M0_Dir
   2881  16db					      endif
   2882  16db				   .L0403		;  if _Bit6_Flip_P1{6} then _BitOp_M0_Dir  =  4 else _BitOp_M0_Dir  =	8
   2883  16db
   2884  16db		       24 ec		      BIT	_Bit6_Flip_P1
   2885  16dd		       50 07		      BVC	.skipL0403
   2886  16df				   .condpart58
   2887  16df		       a9 04		      LDA	#4
   2888  16e1		       85 d7		      STA	_BitOp_M0_Dir
   2889  16e3		       4c ea 96 	      jmp	.skipelse7
   2890  16e6				   .skipL0403
   2891  16e6		       a9 08		      LDA	#8
   2892  16e8		       85 d7		      STA	_BitOp_M0_Dir
   2893  16ea				   .skipelse7
   2894  16ea				   ._Skip_correct_initial_M0_Dir
   2895  16ea							; _Skip_correct_initial_M0_Dir
   2896  16ea
   2897  16ea				   .
   2898  16ea							; 
   2899  16ea
   2900  16ea				   .
   2901  16ea							; 
   2902  16ea
   2903  16ea				   .L0404		;  M0y_velocity  =  0.0  :  u	=  0
   2904  16ea
   2905  16ea		       a2 00		      LDX	#0
   2906  16ec		       86 e7		      STX	t
   2907  16ee		       a9 00		      LDA	#0
   2908  16f0		       85 e6		      STA	M0y_velocity
   2909  16f2		       a9 00		      LDA	#0
   2910  16f4		       85 e8		      STA	u
   2911  16f6				   .
   2912  16f6							; 
   2913  16f6
   2914  16f6				   .
   2915  16f6							; 
   2916  16f6
   2917  16f6				   .L0405		;  if _Bit1_M0_Dir_Down{1} then missile0x  =  player1x  +  9  :  missile0y  =	player1y  -  1
   2918  16f6
   2919  16f6		       a5 d7		      LDA	_Bit1_M0_Dir_Down
   2920  16f8		       29 02		      AND	#2
   2921  16fa		       f0 0e		      BEQ	.skipL0405
   2922  16fc				   .condpart59
   2923  16fc		       a5 81		      LDA	player1x
   2924  16fe		       18		      CLC
   2925  16ff		       69 09		      ADC	#9
   2926  1701		       85 82		      STA	missile0x
   2927  1703		       a5 86		      LDA	player1y
   2928  1705		       38		      SEC
   2929  1706		       e9 01		      SBC	#1
   2930  1708		       85 91		      STA	missile0y
   2931  170a				   .skipL0405
   2932  170a				   .L0406		;  if _Bit2_M0_Dir_Left{2} then missile0x  =  player1x  +  2  :  missile0y  =	player1y  -  3
   2933  170a
   2934  170a		       a5 d7		      LDA	_Bit2_M0_Dir_Left
   2935  170c		       29 04		      AND	#4
   2936  170e		       f0 0e		      BEQ	.skipL0406
   2937  1710				   .condpart60
   2938  1710		       a5 81		      LDA	player1x
   2939  1712		       18		      CLC
   2940  1713		       69 02		      ADC	#2
   2941  1715		       85 82		      STA	missile0x
   2942  1717		       a5 86		      LDA	player1y
   2943  1719		       38		      SEC
   2944  171a		       e9 03		      SBC	#3
   2945  171c		       85 91		      STA	missile0y
   2946  171e				   .skipL0406
   2947  171e				   .L0407		;  if _Bit3_M0_Dir_Right{3} then missile0x  =	player1x  +  16  :  missile0y  =  player1y  -  3
   2948  171e
   2949  171e		       a5 d7		      LDA	_Bit3_M0_Dir_Right
   2950  1720		       29 08		      AND	#8
   2951  1722		       f0 0e		      BEQ	.skipL0407
   2952  1724				   .condpart61
   2953  1724		       a5 81		      LDA	player1x
   2954  1726		       18		      CLC
   2955  1727		       69 10		      ADC	#16
   2956  1729		       85 82		      STA	missile0x
   2957  172b		       a5 86		      LDA	player1y
   2958  172d		       38		      SEC
   2959  172e		       e9 03		      SBC	#3
   2960  1730		       85 91		      STA	missile0y
   2961  1732				   .skipL0407
   2962  1732				   .
   2963  1732							; 
   2964  1732
   2965  1732				   .
   2966  1732							; 
   2967  1732
   2968  1732				   .L0408		;  if _Ch0_Sound  <>  3 then _Ch0_Sound  =  2	:  _Ch0_Duration  =  1	:  _Ch0_Counter  =  0
   2969  1732
   2970  1732		       a5 d9		      LDA	_Ch0_Sound
   2971  1734		       c9 03		      CMP	#3
   2972  1736		       f0 0c		      BEQ	.skipL0408
   2973  1738				   .condpart62
   2974  1738		       a9 02		      LDA	#2
   2975  173a		       85 d9		      STA	_Ch0_Sound
   2976  173c		       a9 01		      LDA	#1
   2977  173e		       85 da		      STA	_Ch0_Duration
   2978  1740		       a9 00		      LDA	#0
   2979  1742		       85 db		      STA	_Ch0_Counter
   2980  1744				   .skipL0408
   2981  1744				   .
   2982  1744							; 
   2983  1744
   2984  1744				   .__Skip_Fire
   2985  1744							; __Skip_Fire
   2986  1744
   2987  1744				   .
   2988  1744							; 
   2989  1744
   2990  1744				   .
   2991  1744							; 
   2992  1744
   2993  1744				   .
   2994  1744							; 
   2995  1744
   2996  1744				   .
   2997  1744							; 
   2998  1744
   2999  1744				   .L0409		;  if !_BitOp_M0_Dir then goto __Skip_Missile
   3000  1744
   3001  1744		       a5 d7		      LDA	_BitOp_M0_Dir
   3002  1746		       d0 03		      BNE	.skipL0409
   3003  1748				   .condpart63
   3004  1748		       4c c1 97 	      jmp	.__Skip_Missile
   3005  174b
   3006  174b				   .skipL0409
   3007  174b				   .
   3008  174b							; 
   3009  174b
   3010  174b				   .
   3011  174b							; 
   3012  174b
   3013  174b				   .L0410		;  if _Bit1_M0_Dir_Down{1} then missile0y  =  missile0y  +  2
   3014  174b
   3015  174b		       a5 d7		      LDA	_Bit1_M0_Dir_Down
   3016  174d		       29 02		      AND	#2
   3017  174f		       f0 07		      BEQ	.skipL0410
   3018  1751				   .condpart64
   3019  1751		       a5 91		      LDA	missile0y
   3020  1753		       18		      CLC
   3021  1754		       69 02		      ADC	#2
   3022  1756		       85 91		      STA	missile0y
   3023  1758				   .skipL0410
   3024  1758				   .L0411		;  if _Bit2_M0_Dir_Left{2} then missile0x  =  missile0x  -  2
   3025  1758
   3026  1758		       a5 d7		      LDA	_Bit2_M0_Dir_Left
   3027  175a		       29 04		      AND	#4
   3028  175c		       f0 07		      BEQ	.skipL0411
   3029  175e				   .condpart65
   3030  175e		       a5 82		      LDA	missile0x
   3031  1760		       38		      SEC
   3032  1761		       e9 02		      SBC	#2
   3033  1763		       85 82		      STA	missile0x
   3034  1765				   .skipL0411
   3035  1765				   .L0412		;  if _Bit3_M0_Dir_Right{3} then missile0x  =	missile0x  +  2
   3036  1765
   3037  1765		       a5 d7		      LDA	_Bit3_M0_Dir_Right
   3038  1767		       29 08		      AND	#8
   3039  1769		       f0 07		      BEQ	.skipL0412
   3040  176b				   .condpart66
   3041  176b		       a5 82		      LDA	missile0x
   3042  176d		       18		      CLC
   3043  176e		       69 02		      ADC	#2
   3044  1770		       85 82		      STA	missile0x
   3045  1772				   .skipL0412
   3046  1772				   .
   3047  1772							; 
   3048  1772
   3049  1772				   .L0413		;  rem apply gravity
   3050  1772
   3051  1772				   .L0414		;  M0y_velocity  =  M0y_velocity  +  gravity_missile0
   3052  1772
   3053  1772		       a5 e7		      LDA	t
   3054  1774		       18		      CLC
   3055  1775		       69 06		      ADC	#6
   3056  1777		       85 e7		      STA	t
   3057  1779		       a5 e6		      LDA	M0y_velocity
   3058  177b		       69 00		      ADC	#0
   3059  177d		       85 e6		      STA	M0y_velocity
   3060  177f				   .L0415		;  M0y_position  =  M0y_position  +  M0y_velocity
   3061  177f
   3062  177f		       a5 e8		      LDA	u
   3063  1781		       18		      CLC
   3064  1782		       65 e7		      ADC	t
   3065  1784		       85 e8		      STA	u
   3066  1786		       a5 91		      LDA	M0y_position
   3067  1788		       65 e6		      ADC	M0y_velocity
   3068  178a		       85 91		      STA	M0y_position
   3069  178c				   .
   3070  178c							; 
   3071  178c
   3072  178c				   .
   3073  178c							; 
   3074  178c
   3075  178c				   .
   3076  178c							; 
   3077  178c
   3078  178c				   .L0416		;  if missile0y  <  _M_Edge_Top then goto __Delete_Missile
   3079  178c
   3080  178c		       a5 91		      LDA	missile0y
   3081  178e		       c9 02		      CMP	#_M_Edge_Top
   3082  1790		       b0 03		      BCS	.skipL0416
   3083  1792				   .condpart67
   3084  1792		       4c b7 97 	      jmp	.__Delete_Missile
   3085  1795
   3086  1795				   .skipL0416
   3087  1795				   .L0417		;  if missile0y  >  _M_Edge_Bottom then goto __Delete_Missile
   3088  1795
   3089  1795		       a9 58		      LDA	#_M_Edge_Bottom
   3090  1797		       c5 91		      CMP	missile0y
   3091  1799		       b0 03		      BCS	.skipL0417
   3092  179b				   .condpart68
   3093  179b		       4c b7 97 	      jmp	.__Delete_Missile
   3094  179e
   3095  179e				   .skipL0417
   3096  179e				   .L0418		;  if missile0x  <  _M_Edge_Left then goto __Delete_Missile
   3097  179e
   3098  179e		       a5 82		      LDA	missile0x
   3099  17a0		       c9 0e		      CMP	#_M_Edge_Left
   3100  17a2		       b0 03		      BCS	.skipL0418
   3101  17a4				   .condpart69
   3102  17a4		       4c b7 97 	      jmp	.__Delete_Missile
   3103  17a7
   3104  17a7				   .skipL0418
   3105  17a7				   .L0419		;  if missile0x  >  _M_Edge_Right then goto __Delete_Missile
   3106  17a7
   3107  17a7		       a9 94		      LDA	#_M_Edge_Right
   3108  17a9		       c5 82		      CMP	missile0x
   3109  17ab		       b0 03		      BCS	.skipL0419
   3110  17ad				   .condpart70
   3111  17ad		       4c b7 97 	      jmp	.__Delete_Missile
   3112  17b0
   3113  17b0				   .skipL0419
   3114  17b0				   .
   3115  17b0							; 
   3116  17b0
   3117  17b0				   .
   3118  17b0							; 
   3119  17b0
   3120  17b0				   .L0420		;  if !collision(playfield,missile0) then goto __Skip_Missile
   3121  17b0
   3122  17b0		       24 04		      bit	CXM0FB
   3123  17b2		       30 03		      BMI	.skipL0420
   3124  17b4				   .condpart71
   3125  17b4		       4c c1 97 	      jmp	.__Skip_Missile
   3126  17b7
   3127  17b7				   .skipL0420
   3128  17b7				   .
   3129  17b7							; 
   3130  17b7
   3131  17b7				   .
   3132  17b7							; 
   3133  17b7
   3134  17b7				   .
   3135  17b7							; 
   3136  17b7
   3137  17b7				   .
   3138  17b7							; 
   3139  17b7
   3140  17b7				   .__Delete_Missile
   3141  17b7							; __Delete_Missile
   3142  17b7
   3143  17b7				   .
   3144  17b7							; 
   3145  17b7
   3146  17b7				   .
   3147  17b7							; 
   3148  17b7
   3149  17b7				   .L0421		;  _BitOp_M0_Dir  =  0  :  missile0x  =  200  :  missile0y  =	200
   3150  17b7
   3151  17b7		       a9 00		      LDA	#0
   3152  17b9		       85 d7		      STA	_BitOp_M0_Dir
   3153  17bb		       a9 c8		      LDA	#200
   3154  17bd		       85 82		      STA	missile0x
   3155  17bf		       85 91		      STA	missile0y
   3156  17c1				   .
   3157  17c1							; 
   3158  17c1
   3159  17c1				   .__Skip_Missile
   3160  17c1							; __Skip_Missile
   3161  17c1
   3162  17c1				   .
   3163  17c1							; 
   3164  17c1
   3165  17c1				   .
   3166  17c1							; 
   3167  17c1
   3168  17c1				   .
   3169  17c1							; 
   3170  17c1
   3171  17c1				   .
   3172  17c1							; 
   3173  17c1
   3174  17c1				   .L0422		;  if !collision(player0,missile0) then __Skip_Shot_Enemy
   3175  17c1
   3176  17c1		       24 00		      bit	CXM0P
   3177  17c3					      if	((* - .__Skip_Shot_Enemy) < 127) && ((* - .__Skip_Shot_Enemy) > -128)
   3178  17c3		       50 52		      bvc	.__Skip_Shot_Enemy
   3179  17c5				  -	      else
   3180  17c5				  -	      bvs	.25skip__Skip_Shot_Enemy
   3181  17c5				  -	      jmp	.__Skip_Shot_Enemy
   3182  17c5				  -.25skip__Skip_Shot_Enemy
   3183  17c5					      endif
   3184  17c5				   .
   3185  17c5							; 
   3186  17c5
   3187  17c5				   .
   3188  17c5							; 
   3189  17c5
   3190  17c5				   .L0423		;  _BitOp_M0_Dir  =  0  :  missile0x  =  200  :  missile0y  =	200
   3191  17c5
   3192  17c5		       a9 00		      LDA	#0
   3193  17c7		       85 d7		      STA	_BitOp_M0_Dir
   3194  17c9		       a9 c8		      LDA	#200
   3195  17cb		       85 82		      STA	missile0x
   3196  17cd		       85 91		      STA	missile0y
   3197  17cf				   .
   3198  17cf							; 
   3199  17cf
   3200  17cf				   .L0424		;  if roommate_type  >  1 then __Skip_Shot_Enemy
   3201  17cf
   3202  17cf		       a9 01		      LDA	#1
   3203  17d1		       c5 de		      CMP	roommate_type
   3204  17d3					      if	((* - .__Skip_Shot_Enemy) < 127) && ((* - .__Skip_Shot_Enemy) > -128)
   3205  17d3		       90 42		      bcc	.__Skip_Shot_Enemy
   3206  17d5				  -	      else
   3207  17d5				  -	      bcs	.26skip__Skip_Shot_Enemy
   3208  17d5				  -	      jmp	.__Skip_Shot_Enemy
   3209  17d5				  -.26skip__Skip_Shot_Enemy
   3210  17d5					      endif
   3211  17d5				   .
   3212  17d5							; 
   3213  17d5
   3214  17d5				   .L0425		;  _Ch0_Sound	=  1  :  _Ch0_Duration	=  1  :  _Ch0_Counter  =  0
   3215  17d5
   3216  17d5		       a9 01		      LDA	#1
   3217  17d7		       85 d9		      STA	_Ch0_Sound
   3218  17d9		       85 da		      STA	_Ch0_Duration
   3219  17db		       a9 00		      LDA	#0
   3220  17dd		       85 db		      STA	_Ch0_Counter
   3221  17df				   .
   3222  17df							; 
   3223  17df
   3224  17df				   .
   3225  17df							; 
   3226  17df
   3227  17df				   .L0426		;  player0y  =  200  :  w_roommate_startpos_y	=  200	:  if roommate_type then score	=  score  +  bonus_hit_air_missile else score  =  score  +  bonus_hit_tank
   3228  17df
   3229  17df		       a9 c8		      LDA	#200
   3230  17e1		       85 85		      STA	player0y
   3231  17e3		       8d 6a f0 	      STA	w_roommate_startpos_y
   3232  17e6		       a5 de		      LDA	roommate_type
   3233  17e8		       f0 18		      BEQ	.skipL0426
   3234  17ea				   .condpart72
   3235  17ea		       f8		      SED
   3236  17eb		       18		      CLC
   3237  17ec		       a5 95		      LDA	score+2
   3238  17ee		       69 40		      ADC	#$40
   3239  17f0		       85 95		      STA	score+2
   3240  17f2		       a5 94		      LDA	score+1
   3241  17f4		       69 00		      ADC	#$00
   3242  17f6		       85 94		      STA	score+1
   3243  17f8		       a5 93		      LDA	score
   3244  17fa		       69 00		      ADC	#$00
   3245  17fc		       85 93		      STA	score
   3246  17fe		       d8		      CLD
   3247  17ff		       4c 17 98 	      jmp	.skipelse8
   3248  1802				   .skipL0426
   3249  1802		       f8		      SED
   3250  1803		       18		      CLC
   3251  1804		       a5 95		      LDA	score+2
   3252  1806		       69 60		      ADC	#$60
   3253  1808		       85 95		      STA	score+2
   3254  180a		       a5 94		      LDA	score+1
   3255  180c		       69 00		      ADC	#$00
   3256  180e		       85 94		      STA	score+1
   3257  1810		       a5 93		      LDA	score
   3258  1812		       69 00		      ADC	#$00
   3259  1814		       85 93		      STA	score
   3260  1816		       d8		      CLD
   3261  1817				   .skipelse8
   3262  1817				   .
   3263  1817							; 
   3264  1817
   3265  1817				   .__Skip_Shot_Enemy
   3266  1817							; __Skip_Shot_Enemy
   3267  1817
   3268  1817				   .
   3269  1817							; 
   3270  1817
   3271  1817				   .
   3272  1817							; 
   3273  1817
   3274  1817				   .
   3275  1817							; 
   3276  1817
   3277  1817				   .
   3278  1817							; 
   3279  1817
   3280  1817				   .L0427		;  if !collision(ball,missile0) then __Skip_Shot_Extra_Wall
   3281  1817
   3282  1817		       24 04		      bit	CXM0FB
   3283  1819					      if	((* - .__Skip_Shot_Extra_Wall) < 127) && ((* - .__Skip_Shot_Extra_Wall) > -128)
   3284  1819		       50 61		      bvc	.__Skip_Shot_Extra_Wall
   3285  181b				  -	      else
   3286  181b				  -	      bvs	.27skip__Skip_Shot_Extra_Wall
   3287  181b				  -	      jmp	.__Skip_Shot_Extra_Wall
   3288  181b				  -.27skip__Skip_Shot_Extra_Wall
   3289  181b					      endif
   3290  181b				   .
   3291  181b							; 
   3292  181b
   3293  181b				   .
   3294  181b							; 
   3295  181b
   3296  181b				   .L0428		;  _BitOp_M0_Dir  =  0  :  missile0x  =  200  :  missile0y  =	200
   3297  181b
   3298  181b		       a9 00		      LDA	#0
   3299  181d		       85 d7		      STA	_BitOp_M0_Dir
   3300  181f		       a9 c8		      LDA	#200
   3301  1821		       85 82		      STA	missile0x
   3302  1823		       85 91		      STA	missile0y
   3303  1825				   .
   3304  1825							; 
   3305  1825
   3306  1825				   .L0429		;  _BitOp_Ball_Shot_Dir  =  0	:  ball_shoot_x  =  200  :  ball_shoot_y  =  200
   3307  1825
   3308  1825		       a9 00		      LDA	#0
   3309  1827		       85 d6		      STA	_BitOp_Ball_Shot_Dir
   3310  1829		       a9 c8		      LDA	#200
   3311  182b		       85 ae		      STA	ball_shoot_x
   3312  182d		       85 af		      STA	ball_shoot_y
   3313  182f				   .
   3314  182f							; 
   3315  182f
   3316  182f				   .
   3317  182f							; 
   3318  182f
   3319  182f				   .L0430		;  if r_extra_wall_type_and_range{0} then __Skip_Shot_Extra_Wall
   3320  182f
   3321  182f		       ad eb f0 	      LDA	r_extra_wall_type_and_range
   3322  1832		       4a		      LSR
   3323  1833					      if	((* - .__Skip_Shot_Extra_Wall) < 127) && ((* - .__Skip_Shot_Extra_Wall) > -128)
   3324  1833		       b0 47		      bcs	.__Skip_Shot_Extra_Wall
   3325  1835				  -	      else
   3326  1835				  -	      bcc	.28skip__Skip_Shot_Extra_Wall
   3327  1835				  -	      jmp	.__Skip_Shot_Extra_Wall
   3328  1835				  -.28skip__Skip_Shot_Extra_Wall
   3329  1835					      endif
   3330  1835				   .
   3331  1835							; 
   3332  1835
   3333  1835				   .L0431		;  _Ch0_Sound	=  1  :  _Ch0_Duration	=  1  :  _Ch0_Counter  =  0
   3334  1835
   3335  1835		       a9 01		      LDA	#1
   3336  1837		       85 d9		      STA	_Ch0_Sound
   3337  1839		       85 da		      STA	_Ch0_Duration
   3338  183b		       a9 00		      LDA	#0
   3339  183d		       85 db		      STA	_Ch0_Counter
   3340  183f				   .L0432		;  bally  =  0  :  w_extra_wall_startpos_x  =	200  :	if r_extra_wall_type_and_range	>  2 then score  =  score  +  bonus_hit_active_wall else score	=  score  +  bonus_hit_wall
   3341  183f
   3342  183f		       a9 00		      LDA	#0
   3343  1841		       85 89		      STA	bally
   3344  1843		       a9 c8		      LDA	#200
   3345  1845		       8d 6e f0 	      STA	w_extra_wall_startpos_x
   3346  1848		       a9 02		      LDA	#2
   3347  184a		       cd eb f0 	      CMP	r_extra_wall_type_and_range
   3348  184d		       b0 18		      BCS	.skipL0432
   3349  184f				   .condpart73
   3350  184f		       f8		      SED
   3351  1850		       18		      CLC
   3352  1851		       a5 95		      LDA	score+2
   3353  1853		       69 30		      ADC	#$30
   3354  1855		       85 95		      STA	score+2
   3355  1857		       a5 94		      LDA	score+1
   3356  1859		       69 00		      ADC	#$00
   3357  185b		       85 94		      STA	score+1
   3358  185d		       a5 93		      LDA	score
   3359  185f		       69 00		      ADC	#$00
   3360  1861		       85 93		      STA	score
   3361  1863		       d8		      CLD
   3362  1864		       4c 7c 98 	      jmp	.skipelse9
   3363  1867				   .skipL0432
   3364  1867		       f8		      SED
   3365  1868		       18		      CLC
   3366  1869		       a5 95		      LDA	score+2
   3367  186b		       69 10		      ADC	#$10
   3368  186d		       85 95		      STA	score+2
   3369  186f		       a5 94		      LDA	score+1
   3370  1871		       69 00		      ADC	#$00
   3371  1873		       85 94		      STA	score+1
   3372  1875		       a5 93		      LDA	score
   3373  1877		       69 00		      ADC	#$00
   3374  1879		       85 93		      STA	score
   3375  187b		       d8		      CLD
   3376  187c				   .skipelse9
   3377  187c				   .
   3378  187c							; 
   3379  187c
   3380  187c				   .__Skip_Shot_Extra_Wall
   3381  187c							; __Skip_Shot_Extra_Wall
   3382  187c
   3383  187c				   .
   3384  187c							; 
   3385  187c
   3386  187c				   .
   3387  187c							; 
   3388  187c
   3389  187c				   .
   3390  187c							; 
   3391  187c
   3392  187c				   .L0433		;  if !collision(player1,player0) then goto __Skip_P1_Touched_P0
   3393  187c
   3394  187c		       24 07		      bit	CXPPMM
   3395  187e		       30 03		      BMI	.skipL0433
   3396  1880				   .condpart74
   3397  1880		       4c 12 99 	      jmp	.__Skip_P1_Touched_P0
   3398  1883
   3399  1883				   .skipL0433
   3400  1883				   .
   3401  1883							; 
   3402  1883
   3403  1883				   .
   3404  1883							; 
   3405  1883
   3406  1883				   .L0434		;  if roommate_type  <  2 then goto _Decrease_live_counter
   3407  1883
   3408  1883		       a5 de		      LDA	roommate_type
   3409  1885		       c9 02		      CMP	#2
   3410  1887		       b0 03		      BCS	.skipL0434
   3411  1889				   .condpart75
   3412  1889		       4c 95 95 	      jmp	._Decrease_live_counter
   3413  188c
   3414  188c				   .skipL0434
   3415  188c				   .
   3416  188c							; 
   3417  188c
   3418  188c				   .
   3419  188c							; 
   3420  188c
   3421  188c				   .L0435		;  if _Ch0_Sound  <>  3 then _Ch0_Sound  =  3	:  _Ch0_Duration  =  1	:  _Ch0_Counter  =  0
   3422  188c
   3423  188c		       a5 d9		      LDA	_Ch0_Sound
   3424  188e		       c9 03		      CMP	#3
   3425  1890		       f0 0c		      BEQ	.skipL0435
   3426  1892				   .condpart76
   3427  1892		       a9 03		      LDA	#3
   3428  1894		       85 d9		      STA	_Ch0_Sound
   3429  1896		       a9 01		      LDA	#1
   3430  1898		       85 da		      STA	_Ch0_Duration
   3431  189a		       a9 00		      LDA	#0
   3432  189c		       85 db		      STA	_Ch0_Counter
   3433  189e				   .skipL0435
   3434  189e				   .L0436		;  if roommate_type  =  3 then men_to_rescue  =  men_to_rescue  -  12	:  player0y  =	200  :	w_roommate_startpos_y  =  200  :  score  =  score  +  bonus_man_rescue	:  if !men_to_rescue then goto _Level_Completed
   3435  189e
   3436  189e		       a5 de		      LDA	roommate_type
   3437  18a0		       c9 03		      CMP	#3
   3438  18a2		       d0 2a		      BNE	.skipL0436
   3439  18a4				   .condpart77
   3440  18a4		       a5 b0		      LDA	men_to_rescue
   3441  18a6		       38		      SEC
   3442  18a7		       e9 0c		      SBC	#12
   3443  18a9		       85 b0		      STA	men_to_rescue
   3444  18ab		       a9 c8		      LDA	#200
   3445  18ad		       85 85		      STA	player0y
   3446  18af		       8d 6a f0 	      STA	w_roommate_startpos_y
   3447  18b2		       f8		      SED
   3448  18b3		       18		      CLC
   3449  18b4		       a5 95		      LDA	score+2
   3450  18b6		       69 50		      ADC	#$50
   3451  18b8		       85 95		      STA	score+2
   3452  18ba		       a5 94		      LDA	score+1
   3453  18bc		       69 01		      ADC	#$01
   3454  18be		       85 94		      STA	score+1
   3455  18c0		       a5 93		      LDA	score
   3456  18c2		       69 00		      ADC	#$00
   3457  18c4		       85 93		      STA	score
   3458  18c6		       d8		      CLD
   3459  18c7		       a5 b0		      LDA	men_to_rescue
   3460  18c9		       d0 03		      BNE	.skip77then
   3461  18cb				   .condpart78
   3462  18cb		       4c 34 9c 	      jmp	._Level_Completed
   3463  18ce
   3464  18ce				   .skip77then
   3465  18ce				   .skipL0436
   3466  18ce				   .L0437		;  if roommate_type  =  2 then P1y_velocity  =  0.0  :  x  =  0  :  pfscore2  =  pfscore2  *  2  |  1	:  player1y  =	player1y  -  1	:  if !_Bit3_Safe_Point_reached{3} then WriteSendBuffer  =  req_safe_point  :  _Bit3_Safe_Point_reached{3}  =  1  :  Safe_Point_P1_x  =  player1x  :  Safe_Point_P1_y  =  player1y  :  _Bit1_Safe_Point_P1_Flip{1}  =  _Bit6_Flip_P1{6}
   3467  18ce
   3468  18ce		       a5 de		      LDA	roommate_type
   3469  18d0		       c9 02		      CMP	#2
   3470  18d2		       d0 3e		      BNE	.skipL0437
   3471  18d4				   .condpart79
   3472  18d4		       a2 00		      LDX	#0
   3473  18d6		       86 ea		      STX	w
   3474  18d8		       a9 00		      LDA	#0
   3475  18da		       85 e9		      STA	P1y_velocity
   3476  18dc		       a9 00		      LDA	#0
   3477  18de		       85 eb		      STA	x
   3478  18e0							; complex statement detected
   3479  18e0		       a5 f3		      LDA	pfscore2
   3480  18e2		       0a		      asl
   3481  18e3		       09 01		      ORA	#1
   3482  18e5		       85 f3		      STA	pfscore2
   3483  18e7		       c6 86		      DEC	player1y
   3484  18e9		       a5 ec		      LDA	_Bit3_Safe_Point_reached
   3485  18eb		       29 08		      AND	#8
   3486  18ed		       d0 23		      BNE	.skip79then
   3487  18ef				   .condpart80
   3488  18ef		       a9 08		      LDA	#req_safe_point
   3489  18f1		       8d f1 1f 	      STA	WriteSendBuffer
   3490  18f4		       a5 ec		      LDA	_Bit3_Safe_Point_reached
   3491  18f6		       09 08		      ORA	#8
   3492  18f8		       85 ec		      STA	_Bit3_Safe_Point_reached
   3493  18fa		       a5 81		      LDA	player1x
   3494  18fc		       85 e0		      STA	Safe_Point_P1_x
   3495  18fe		       a5 86		      LDA	player1y
   3496  1900		       85 e1		      STA	Safe_Point_P1_y
   3497  1902		       a5 ec		      LDA	_Bit6_Flip_P1
   3498  1904		       29 40		      AND	#64
   3499  1906		       08		      PHP
   3500  1907		       a5 df		      LDA	_Bit1_Safe_Point_P1_Flip
   3501  1909		       29 fd		      AND	#253
   3502  190b		       28		      PLP
   3503  190c		       f0 02		      .byte.b	$F0, $02
   3504  190e		       09 02		      ORA	#2
   3505  1910		       85 df		      STA	_Bit1_Safe_Point_P1_Flip
   3506  1912				   .skip79then
   3507  1912				   .skipL0437
   3508  1912				   .__Skip_P1_Touched_P0
   3509  1912							; __Skip_P1_Touched_P0
   3510  1912
   3511  1912				   .
   3512  1912							; 
   3513  1912
   3514  1912				   .
   3515  1912							; 
   3516  1912
   3517  1912				   .
   3518  1912							; 
   3519  1912
   3520  1912				   .L0438		;  if collision(player1,ball)	||  collision(player1,playfield) then goto _Decrease_live_counter
   3521  1912
   3522  1912		       24 03		      bit	CXP1FB
   3523  1914		       50 03		      BVC	.skipL0438
   3524  1916				   .condpart81
   3525  1916		       4c 1d 99 	      jmp	.condpart82
   3526  1919				   .skipL0438
   3527  1919		       24 03		      bit	CXP1FB
   3528  191b		       10 03		      BPL	.skip13OR
   3529  191d				   .condpart82
   3530  191d		       4c 95 95 	      jmp	._Decrease_live_counter
   3531  1920
   3532  1920				   .skip13OR
   3533  1920				   .
   3534  1920							; 
   3535  1920
   3536  1920				   .
   3537  1920							; 
   3538  1920
   3539  1920				   .L0439		;  _BitOp_P1_Dir  =  _BitOp_P1_Dir  &	$F0
   3540  1920
   3541  1920		       a5 d8		      LDA	_BitOp_P1_Dir
   3542  1922		       29 f0		      AND	#$F0
   3543  1924		       85 d8		      STA	_BitOp_P1_Dir
   3544  1926				   .
   3545  1926							; 
   3546  1926
   3547  1926				   .L0440		;  if joy0up then P1y_velocity  =  0.0  :  x  =  0  :	player1y  =  player1y  -  1  :	_Bit0_P1_Dir_Up{0}  =  1  :  goto skip_gravity
   3548  1926
   3549  1926		       a9 10		      lda	#$10
   3550  1928		       2c 80 02 	      bit	SWCHA
   3551  192b		       d0 17		      BNE	.skipL0440
   3552  192d				   .condpart83
   3553  192d		       a2 00		      LDX	#0
   3554  192f		       86 ea		      STX	w
   3555  1931		       a9 00		      LDA	#0
   3556  1933		       85 e9		      STA	P1y_velocity
   3557  1935		       a9 00		      LDA	#0
   3558  1937		       85 eb		      STA	x
   3559  1939		       c6 86		      DEC	player1y
   3560  193b		       a5 d8		      LDA	_Bit0_P1_Dir_Up
   3561  193d		       09 01		      ORA	#1
   3562  193f		       85 d8		      STA	_Bit0_P1_Dir_Up
   3563  1941		       4c 6d 99 	      jmp	.skip_gravity
   3564  1944
   3565  1944				   .skipL0440
   3566  1944				   .L0441		;  if joy0down then player1y  =  player1y  +  1  :  _Bit1_P1_Dir_Down{1}  =  1
   3567  1944
   3568  1944		       a9 20		      lda	#$20
   3569  1946		       2c 80 02 	      bit	SWCHA
   3570  1949		       d0 08		      BNE	.skipL0441
   3571  194b				   .condpart84
   3572  194b		       e6 86		      INC	player1y
   3573  194d		       a5 d8		      LDA	_Bit1_P1_Dir_Down
   3574  194f		       09 02		      ORA	#2
   3575  1951		       85 d8		      STA	_Bit1_P1_Dir_Down
   3576  1953				   .skipL0441
   3577  1953				   .
   3578  1953							; 
   3579  1953
   3580  1953				   .L0442		;  rem apply gravity
   3581  1953
   3582  1953				   .L0443		;  P1y_velocity  =  P1y_velocity  +  gravity_player1
   3583  1953
   3584  1953		       a5 ea		      LDA	w
   3585  1955		       18		      CLC
   3586  1956		       69 01		      ADC	#1
   3587  1958		       85 ea		      STA	w
   3588  195a		       a5 e9		      LDA	P1y_velocity
   3589  195c		       69 00		      ADC	#0
   3590  195e		       85 e9		      STA	P1y_velocity
   3591  1960				   .L0444		;  P1y_position  =  P1y_position  +  P1y_velocity
   3592  1960
   3593  1960		       a5 eb		      LDA	x
   3594  1962		       18		      CLC
   3595  1963		       65 ea		      ADC	w
   3596  1965		       85 eb		      STA	x
   3597  1967		       a5 86		      LDA	P1y_position
   3598  1969		       65 e9		      ADC	P1y_velocity
   3599  196b		       85 86		      STA	P1y_position
   3600  196d				   .
   3601  196d							; 
   3602  196d
   3603  196d				   .skip_gravity
   3604  196d							; skip_gravity
   3605  196d
   3606  196d				   .
   3607  196d							; 
   3608  196d
   3609  196d				   .L0445		;  if joy0left then _Bit6_Flip_P1{6}  =  1  :	_Bit2_P1_Dir_Left{2}  =  1  :  player1x  =  player1x  -  1  :  goto _skip_move
   3610  196d
   3611  196d		       2c 80 02 	      bit	SWCHA
   3612  1970		       70 11		      BVS	.skipL0445
   3613  1972				   .condpart85
   3614  1972		       a5 ec		      LDA	_Bit6_Flip_P1
   3615  1974		       09 40		      ORA	#64
   3616  1976		       85 ec		      STA	_Bit6_Flip_P1
   3617  1978		       a5 d8		      LDA	_Bit2_P1_Dir_Left
   3618  197a		       09 04		      ORA	#4
   3619  197c		       85 d8		      STA	_Bit2_P1_Dir_Left
   3620  197e		       c6 81		      DEC	player1x
   3621  1980		       4c 96 99 	      jmp	._skip_move
   3622  1983
   3623  1983				   .skipL0445
   3624  1983				   .L0446		;  if joy0right then _Bit6_Flip_P1{6}	=  0  :  _Bit3_P1_Dir_Right{3}	=  1  :  player1x  =  player1x	+  1
   3625  1983
   3626  1983		       2c 80 02 	      bit	SWCHA
   3627  1986		       30 0e		      BMI	.skipL0446
   3628  1988				   .condpart86
   3629  1988		       a5 ec		      LDA	_Bit6_Flip_P1
   3630  198a		       29 bf		      AND	#191
   3631  198c		       85 ec		      STA	_Bit6_Flip_P1
   3632  198e		       a5 d8		      LDA	_Bit3_P1_Dir_Right
   3633  1990		       09 08		      ORA	#8
   3634  1992		       85 d8		      STA	_Bit3_P1_Dir_Right
   3635  1994		       e6 81		      INC	player1x
   3636  1996				   .skipL0446
   3637  1996				   ._skip_move
   3638  1996							; _skip_move
   3639  1996
   3640  1996				   .
   3641  1996							; 
   3642  1996
   3643  1996				   .
   3644  1996							; 
   3645  1996
   3646  1996				   .L0447		;  if player1y  <  player_min_y  &&  r_Bit0_room_type_top{0} then player1y  =	player_min_y  :  goto _skip_game_action
   3647  1996
   3648  1996		       a5 86		      LDA	player1y
   3649  1998		       c9 02		      CMP	#player_min_y
   3650  199a		       b0 0d		      BCS	.skipL0447
   3651  199c				   .condpart87
   3652  199c		       ad e1 f0 	      LDA	r_Bit0_room_type_top
   3653  199f		       4a		      LSR
   3654  19a0		       90 07		      BCC	.skip87then
   3655  19a2				   .condpart88
   3656  19a2		       a9 02		      LDA	#player_min_y
   3657  19a4		       85 86		      STA	player1y
   3658  19a6		       4c 4a 9a 	      jmp	._skip_game_action
   3659  19a9
   3660  19a9				   .skip87then
   3661  19a9				   .skipL0447
   3662  19a9				   .
   3663  19a9							; 
   3664  19a9
   3665  19a9				   .L0448		;  if player1x  <  player_min_x then _Bit0_New_Room_P1_Flip{0}  =  _Bit6_Flip_P1{6}  :  new_room_player1y  =  player1y  :  new_room_player1x  =  player_max_x	:  gosub _Add_Room_State  :  WriteSendBuffer  =  req_move_left	:  goto _skip_game_action
   3666  19a9
   3667  19a9		       a5 81		      LDA	player1x
   3668  19ab		       c9 0a		      CMP	#player_min_x
   3669  19ad		       b0 23		      BCS	.skipL0448
   3670  19af				   .condpart89
   3671  19af		       a5 ec		      LDA	_Bit6_Flip_P1
   3672  19b1		       29 40		      AND	#64
   3673  19b3		       08		      PHP
   3674  19b4		       a5 df		      LDA	_Bit0_New_Room_P1_Flip
   3675  19b6		       29 fe		      AND	#254
   3676  19b8		       28		      PLP
   3677  19b9		       f0 02		      .byte.b	$F0, $02
   3678  19bb		       09 01		      ORA	#1
   3679  19bd		       85 df		      STA	_Bit0_New_Room_P1_Flip
   3680  19bf		       a5 86		      LDA	player1y
   3681  19c1		       85 a4		      STA	new_room_player1y
   3682  19c3		       a9 86		      LDA	#player_max_x
   3683  19c5		       85 a5		      STA	new_room_player1x
   3684  19c7		       20 8c 9c 	      jsr	._Add_Room_State
   3685  19ca		       a9 03		      LDA	#req_move_left
   3686  19cc		       8d f1 1f 	      STA	WriteSendBuffer
   3687  19cf		       4c 4a 9a 	      jmp	._skip_game_action
   3688  19d2
   3689  19d2				   .skipL0448
   3690  19d2				   .L0449		;  if player1y  <  player_min_y then _Bit0_New_Room_P1_Flip{0}  =  _Bit6_Flip_P1{6}  :  new_room_player1x  =  player1x  :  new_room_player1y  =  player_max_y	:  gosub _Add_Room_State  :  WriteSendBuffer  =  req_move_up  :  goto _skip_game_action
   3691  19d2
   3692  19d2		       a5 86		      LDA	player1y
   3693  19d4		       c9 02		      CMP	#player_min_y
   3694  19d6		       b0 23		      BCS	.skipL0449
   3695  19d8				   .condpart90
   3696  19d8		       a5 ec		      LDA	_Bit6_Flip_P1
   3697  19da		       29 40		      AND	#64
   3698  19dc		       08		      PHP
   3699  19dd		       a5 df		      LDA	_Bit0_New_Room_P1_Flip
   3700  19df		       29 fe		      AND	#254
   3701  19e1		       28		      PLP
   3702  19e2		       f0 02		      .byte.b	$F0, $02
   3703  19e4		       09 01		      ORA	#1
   3704  19e6		       85 df		      STA	_Bit0_New_Room_P1_Flip
   3705  19e8		       a5 81		      LDA	player1x
   3706  19ea		       85 a5		      STA	new_room_player1x
   3707  19ec		       a9 4c		      LDA	#player_max_y
   3708  19ee		       85 a4		      STA	new_room_player1y
   3709  19f0		       20 8c 9c 	      jsr	._Add_Room_State
   3710  19f3		       a9 04		      LDA	#req_move_up
   3711  19f5		       8d f1 1f 	      STA	WriteSendBuffer
   3712  19f8		       4c 4a 9a 	      jmp	._skip_game_action
   3713  19fb
   3714  19fb				   .skipL0449
   3715  19fb				   .L0450		;  if player1x  >  player_max_x then _Bit0_New_Room_P1_Flip{0}  =  _Bit6_Flip_P1{6}  :  new_room_player1y  =  player1y  :  new_room_player1x  =  player_min_x	:  gosub _Add_Room_State  :  WriteSendBuffer  =  req_move_right  :  goto _skip_game_action
   3716  19fb
   3717  19fb		       a9 86		      LDA	#player_max_x
   3718  19fd		       c5 81		      CMP	player1x
   3719  19ff		       b0 23		      BCS	.skipL0450
   3720  1a01				   .condpart91
   3721  1a01		       a5 ec		      LDA	_Bit6_Flip_P1
   3722  1a03		       29 40		      AND	#64
   3723  1a05		       08		      PHP
   3724  1a06		       a5 df		      LDA	_Bit0_New_Room_P1_Flip
   3725  1a08		       29 fe		      AND	#254
   3726  1a0a		       28		      PLP
   3727  1a0b		       f0 02		      .byte.b	$F0, $02
   3728  1a0d		       09 01		      ORA	#1
   3729  1a0f		       85 df		      STA	_Bit0_New_Room_P1_Flip
   3730  1a11		       a5 86		      LDA	player1y
   3731  1a13		       85 a4		      STA	new_room_player1y
   3732  1a15		       a9 0a		      LDA	#player_min_x
   3733  1a17		       85 a5		      STA	new_room_player1x
   3734  1a19		       20 8c 9c 	      jsr	._Add_Room_State
   3735  1a1c		       a9 05		      LDA	#req_move_right
   3736  1a1e		       8d f1 1f 	      STA	WriteSendBuffer
   3737  1a21		       4c 4a 9a 	      jmp	._skip_game_action
   3738  1a24
   3739  1a24				   .skipL0450
   3740  1a24				   .L0451		;  if player1y  >  player_max_y then _Bit0_New_Room_P1_Flip{0}  =  _Bit6_Flip_P1{6}  :  new_room_player1x  =  player1x  :  new_room_player1y  =  player_min_y	:  gosub _Add_Room_State  :  WriteSendBuffer  =  req_move_down
   3741  1a24
   3742  1a24		       a9 4c		      LDA	#player_max_y
   3743  1a26		       c5 86		      CMP	player1y
   3744  1a28		       b0 20		      BCS	.skipL0451
   3745  1a2a				   .condpart92
   3746  1a2a		       a5 ec		      LDA	_Bit6_Flip_P1
   3747  1a2c		       29 40		      AND	#64
   3748  1a2e		       08		      PHP
   3749  1a2f		       a5 df		      LDA	_Bit0_New_Room_P1_Flip
   3750  1a31		       29 fe		      AND	#254
   3751  1a33		       28		      PLP
   3752  1a34		       f0 02		      .byte.b	$F0, $02
   3753  1a36		       09 01		      ORA	#1
   3754  1a38		       85 df		      STA	_Bit0_New_Room_P1_Flip
   3755  1a3a		       a5 81		      LDA	player1x
   3756  1a3c		       85 a5		      STA	new_room_player1x
   3757  1a3e		       a9 02		      LDA	#player_min_y
   3758  1a40		       85 a4		      STA	new_room_player1y
   3759  1a42		       20 8c 9c 	      jsr	._Add_Room_State
   3760  1a45		       a9 06		      LDA	#req_move_down
   3761  1a47		       8d f1 1f 	      STA	WriteSendBuffer
   3762  1a4a				   .skipL0451
   3763  1a4a				   .
   3764  1a4a							; 
   3765  1a4a
   3766  1a4a				   ._skip_game_action
   3767  1a4a							; _skip_game_action
   3768  1a4a
   3769  1a4a				   .
   3770  1a4a							; 
   3771  1a4a
   3772  1a4a				   .
   3773  1a4a							; 
   3774  1a4a
   3775  1a4a				   .L0452		;  if !_Ch0_Sound then goto __Skip_Ch_0
   3776  1a4a
   3777  1a4a		       a5 d9		      LDA	_Ch0_Sound
   3778  1a4c		       d0 03		      BNE	.skipL0452
   3779  1a4e				   .condpart93
   3780  1a4e		       4c 7d 9b 	      jmp	.__Skip_Ch_0
   3781  1a51
   3782  1a51				   .skipL0452
   3783  1a51				   .
   3784  1a51							; 
   3785  1a51
   3786  1a51				   .
   3787  1a51							; 
   3788  1a51
   3789  1a51				   .L0453		;  _Ch0_Duration  =  _Ch0_Duration  -	1
   3790  1a51
   3791  1a51		       c6 da		      DEC	_Ch0_Duration
   3792  1a53				   .
   3793  1a53							; 
   3794  1a53
   3795  1a53				   .
   3796  1a53							; 
   3797  1a53
   3798  1a53				   .
   3799  1a53							; 
   3800  1a53
   3801  1a53				   .L0454		;  if _Ch0_Duration then goto __Skip_Ch_0
   3802  1a53
   3803  1a53		       a5 da		      LDA	_Ch0_Duration
   3804  1a55		       f0 03		      BEQ	.skipL0454
   3805  1a57				   .condpart94
   3806  1a57		       4c 7d 9b 	      jmp	.__Skip_Ch_0
   3807  1a5a
   3808  1a5a				   .skipL0454
   3809  1a5a				   .
   3810  1a5a							; 
   3811  1a5a
   3812  1a5a				   .
   3813  1a5a							; 
   3814  1a5a
   3815  1a5a				   .
   3816  1a5a							; 
   3817  1a5a
   3818  1a5a				   .
   3819  1a5a							; 
   3820  1a5a
   3821  1a5a				   .L0455		;  if _Ch0_Sound  <>  1 then goto __Skip_Ch0_Sound_001
   3822  1a5a
   3823  1a5a		       a5 d9		      LDA	_Ch0_Sound
   3824  1a5c		       c9 01		      CMP	#1
   3825  1a5e		       f0 03		      BEQ	.skipL0455
   3826  1a60				   .condpart95
   3827  1a60		       4c a8 9a 	      jmp	.__Skip_Ch0_Sound_001
   3828  1a63
   3829  1a63				   .skipL0455
   3830  1a63				   .
   3831  1a63							; 
   3832  1a63
   3833  1a63				   .
   3834  1a63							; 
   3835  1a63
   3836  1a63				   .L0456		;  temp4  =  _SD_Shot_Wall[_Ch0_Counter]
   3837  1a63
   3838  1a63		       a6 db		      LDX	_Ch0_Counter
   3839  1a65		       bd 31 9d 	      LDA	_SD_Shot_Wall,x
   3840  1a68		       85 9f		      STA	temp4
   3841  1a6a				   .
   3842  1a6a							; 
   3843  1a6a
   3844  1a6a				   .
   3845  1a6a							; 
   3846  1a6a
   3847  1a6a				   .L0457		;  if temp4  =  255 then goto __Clear_Ch_0
   3848  1a6a
   3849  1a6a		       a5 9f		      LDA	temp4
   3850  1a6c		       c9 ff		      CMP	#255
   3851  1a6e		       d0 03		      BNE	.skipL0457
   3852  1a70				   .condpart96
   3853  1a70		       4c 77 9b 	      jmp	.__Clear_Ch_0
   3854  1a73
   3855  1a73				   .skipL0457
   3856  1a73				   .
   3857  1a73							; 
   3858  1a73
   3859  1a73				   .
   3860  1a73							; 
   3861  1a73
   3862  1a73				   .L0458		;  _Ch0_Counter  =  _Ch0_Counter  +  1
   3863  1a73
   3864  1a73		       e6 db		      INC	_Ch0_Counter
   3865  1a75				   .L0459		;  temp5  =  _SD_Shot_Wall[_Ch0_Counter]  :  _Ch0_Counter  =  _Ch0_Counter  +	1
   3866  1a75
   3867  1a75		       a6 db		      LDX	_Ch0_Counter
   3868  1a77		       bd 31 9d 	      LDA	_SD_Shot_Wall,x
   3869  1a7a		       85 a0		      STA	temp5
   3870  1a7c		       e6 db		      INC	_Ch0_Counter
   3871  1a7e				   .L0460		;  temp6  =  _SD_Shot_Wall[_Ch0_Counter]  :  _Ch0_Counter  =  _Ch0_Counter  +	1
   3872  1a7e
   3873  1a7e		       a6 db		      LDX	_Ch0_Counter
   3874  1a80		       bd 31 9d 	      LDA	_SD_Shot_Wall,x
   3875  1a83		       85 a1		      STA	temp6
   3876  1a85		       e6 db		      INC	_Ch0_Counter
   3877  1a87				   .L0461		;  if _Ch0_Counter{0} then COLUBK  =  _E0
   3878  1a87
   3879  1a87		       a5 db		      LDA	_Ch0_Counter
   3880  1a89		       4a		      LSR
   3881  1a8a		       90 04		      BCC	.skipL0461
   3882  1a8c				   .condpart97
   3883  1a8c		       a9 e0		      LDA	#_E0
   3884  1a8e		       85 09		      STA	COLUBK
   3885  1a90				   .skipL0461
   3886  1a90				   .
   3887  1a90							; 
   3888  1a90
   3889  1a90				   .
   3890  1a90							; 
   3891  1a90
   3892  1a90				   .L0462		;  AUDV0  =  temp4
   3893  1a90
   3894  1a90		       a5 9f		      LDA	temp4
   3895  1a92		       85 19		      STA	AUDV0
   3896  1a94				   .L0463		;  AUDC0  =  temp5
   3897  1a94
   3898  1a94		       a5 a0		      LDA	temp5
   3899  1a96		       85 15		      STA	AUDC0
   3900  1a98				   .L0464		;  AUDF0  =  temp6
   3901  1a98
   3902  1a98		       a5 a1		      LDA	temp6
   3903  1a9a		       85 17		      STA	AUDF0
   3904  1a9c				   .
   3905  1a9c							; 
   3906  1a9c
   3907  1a9c				   .
   3908  1a9c							; 
   3909  1a9c
   3910  1a9c				   .L0465		;  _Ch0_Duration  =  _SD_Shot_Wall[_Ch0_Counter]  :  _Ch0_Counter  =  _Ch0_Counter  +	1
   3911  1a9c
   3912  1a9c		       a6 db		      LDX	_Ch0_Counter
   3913  1a9e		       bd 31 9d 	      LDA	_SD_Shot_Wall,x
   3914  1aa1		       85 da		      STA	_Ch0_Duration
   3915  1aa3		       e6 db		      INC	_Ch0_Counter
   3916  1aa5				   .
   3917  1aa5							; 
   3918  1aa5
   3919  1aa5				   .
   3920  1aa5							; 
   3921  1aa5
   3922  1aa5				   .L0466		;  goto __Skip_Ch_0
   3923  1aa5
   3924  1aa5		       4c 7d 9b 	      jmp	.__Skip_Ch_0
   3925  1aa8
   3926  1aa8				   .
   3927  1aa8							; 
   3928  1aa8
   3929  1aa8				   .__Skip_Ch0_Sound_001
   3930  1aa8							; __Skip_Ch0_Sound_001
   3931  1aa8
   3932  1aa8				   .
   3933  1aa8							; 
   3934  1aa8
   3935  1aa8				   .
   3936  1aa8							; 
   3937  1aa8
   3938  1aa8				   .
   3939  1aa8							; 
   3940  1aa8
   3941  1aa8				   .
   3942  1aa8							; 
   3943  1aa8
   3944  1aa8				   .L0467		;  if _Ch0_Sound  <>  2 then goto __Skip_Ch0_Sound_002
   3945  1aa8
   3946  1aa8		       a5 d9		      LDA	_Ch0_Sound
   3947  1aaa		       c9 02		      CMP	#2
   3948  1aac		       f0 03		      BEQ	.skipL0467
   3949  1aae				   .condpart98
   3950  1aae		       4c ed 9a 	      jmp	.__Skip_Ch0_Sound_002
   3951  1ab1
   3952  1ab1				   .skipL0467
   3953  1ab1				   .
   3954  1ab1							; 
   3955  1ab1
   3956  1ab1				   .
   3957  1ab1							; 
   3958  1ab1
   3959  1ab1				   .L0468		;  temp4  =  _SD_Shoot_Miss[_Ch0_Counter]
   3960  1ab1
   3961  1ab1		       a6 db		      LDX	_Ch0_Counter
   3962  1ab3		       bd 69 9d 	      LDA	_SD_Shoot_Miss,x
   3963  1ab6		       85 9f		      STA	temp4
   3964  1ab8				   .
   3965  1ab8							; 
   3966  1ab8
   3967  1ab8				   .
   3968  1ab8							; 
   3969  1ab8
   3970  1ab8				   .L0469		;  if temp4  =  255 then goto __Clear_Ch_0
   3971  1ab8
   3972  1ab8		       a5 9f		      LDA	temp4
   3973  1aba		       c9 ff		      CMP	#255
   3974  1abc		       d0 03		      BNE	.skipL0469
   3975  1abe				   .condpart99
   3976  1abe		       4c 77 9b 	      jmp	.__Clear_Ch_0
   3977  1ac1
   3978  1ac1				   .skipL0469
   3979  1ac1				   .
   3980  1ac1							; 
   3981  1ac1
   3982  1ac1				   .
   3983  1ac1							; 
   3984  1ac1
   3985  1ac1				   .L0470		;  _Ch0_Counter  =  _Ch0_Counter  +  1
   3986  1ac1
   3987  1ac1		       e6 db		      INC	_Ch0_Counter
   3988  1ac3				   .L0471		;  temp5  =  _SD_Shoot_Miss[_Ch0_Counter]  :  _Ch0_Counter  =	_Ch0_Counter  +  1
   3989  1ac3
   3990  1ac3		       a6 db		      LDX	_Ch0_Counter
   3991  1ac5		       bd 69 9d 	      LDA	_SD_Shoot_Miss,x
   3992  1ac8		       85 a0		      STA	temp5
   3993  1aca		       e6 db		      INC	_Ch0_Counter
   3994  1acc				   .L0472		;  temp6  =  _SD_Shoot_Miss[_Ch0_Counter]  :  _Ch0_Counter  =	_Ch0_Counter  +  1
   3995  1acc
   3996  1acc		       a6 db		      LDX	_Ch0_Counter
   3997  1ace		       bd 69 9d 	      LDA	_SD_Shoot_Miss,x
   3998  1ad1		       85 a1		      STA	temp6
   3999  1ad3		       e6 db		      INC	_Ch0_Counter
   4000  1ad5				   .
   4001  1ad5							; 
   4002  1ad5
   4003  1ad5				   .
   4004  1ad5							; 
   4005  1ad5
   4006  1ad5				   .L0473		;  AUDV0  =  temp4
   4007  1ad5
   4008  1ad5		       a5 9f		      LDA	temp4
   4009  1ad7		       85 19		      STA	AUDV0
   4010  1ad9				   .L0474		;  AUDC0  =  temp5
   4011  1ad9
   4012  1ad9		       a5 a0		      LDA	temp5
   4013  1adb		       85 15		      STA	AUDC0
   4014  1add				   .L0475		;  AUDF0  =  temp6
   4015  1add
   4016  1add		       a5 a1		      LDA	temp6
   4017  1adf		       85 17		      STA	AUDF0
   4018  1ae1				   .
   4019  1ae1							; 
   4020  1ae1
   4021  1ae1				   .
   4022  1ae1							; 
   4023  1ae1
   4024  1ae1				   .L0476		;  _Ch0_Duration  =  _SD_Shoot_Miss[_Ch0_Counter]  :  _Ch0_Counter  =	_Ch0_Counter  +  1
   4025  1ae1
   4026  1ae1		       a6 db		      LDX	_Ch0_Counter
   4027  1ae3		       bd 69 9d 	      LDA	_SD_Shoot_Miss,x
   4028  1ae6		       85 da		      STA	_Ch0_Duration
   4029  1ae8		       e6 db		      INC	_Ch0_Counter
   4030  1aea				   .
   4031  1aea							; 
   4032  1aea
   4033  1aea				   .
   4034  1aea							; 
   4035  1aea
   4036  1aea				   .L0477		;  goto __Skip_Ch_0
   4037  1aea
   4038  1aea		       4c 7d 9b 	      jmp	.__Skip_Ch_0
   4039  1aed
   4040  1aed				   .
   4041  1aed							; 
   4042  1aed
   4043  1aed				   .__Skip_Ch0_Sound_002
   4044  1aed							; __Skip_Ch0_Sound_002
   4045  1aed
   4046  1aed				   .
   4047  1aed							; 
   4048  1aed
   4049  1aed				   .
   4050  1aed							; 
   4051  1aed
   4052  1aed				   .
   4053  1aed							; 
   4054  1aed
   4055  1aed				   .
   4056  1aed							; 
   4057  1aed
   4058  1aed				   .L0478		;  if _Ch0_Sound  <>  3 then goto __Skip_Ch0_Sound_003
   4059  1aed
   4060  1aed		       a5 d9		      LDA	_Ch0_Sound
   4061  1aef		       c9 03		      CMP	#3
   4062  1af1		       f0 03		      BEQ	.skipL0478
   4063  1af3				   .condpart100
   4064  1af3		       4c 32 9b 	      jmp	.__Skip_Ch0_Sound_003
   4065  1af6
   4066  1af6				   .skipL0478
   4067  1af6				   .
   4068  1af6							; 
   4069  1af6
   4070  1af6				   .
   4071  1af6							; 
   4072  1af6
   4073  1af6				   .L0479		;  temp4  =  _SD_Shoot_Enemy[_Ch0_Counter]
   4074  1af6
   4075  1af6		       a6 db		      LDX	_Ch0_Counter
   4076  1af8		       bd b1 9d 	      LDA	_SD_Shoot_Enemy,x
   4077  1afb		       85 9f		      STA	temp4
   4078  1afd				   .
   4079  1afd							; 
   4080  1afd
   4081  1afd				   .
   4082  1afd							; 
   4083  1afd
   4084  1afd				   .L0480		;  if temp4  =  255 then goto __Clear_Ch_0
   4085  1afd
   4086  1afd		       a5 9f		      LDA	temp4
   4087  1aff		       c9 ff		      CMP	#255
   4088  1b01		       d0 03		      BNE	.skipL0480
   4089  1b03				   .condpart101
   4090  1b03		       4c 77 9b 	      jmp	.__Clear_Ch_0
   4091  1b06
   4092  1b06				   .skipL0480
   4093  1b06				   .
   4094  1b06							; 
   4095  1b06
   4096  1b06				   .
   4097  1b06							; 
   4098  1b06
   4099  1b06				   .L0481		;  _Ch0_Counter  =  _Ch0_Counter  +  1
   4100  1b06
   4101  1b06		       e6 db		      INC	_Ch0_Counter
   4102  1b08				   .L0482		;  temp5  =  _SD_Shoot_Enemy[_Ch0_Counter]  :	_Ch0_Counter  =  _Ch0_Counter  +  1
   4103  1b08
   4104  1b08		       a6 db		      LDX	_Ch0_Counter
   4105  1b0a		       bd b1 9d 	      LDA	_SD_Shoot_Enemy,x
   4106  1b0d		       85 a0		      STA	temp5
   4107  1b0f		       e6 db		      INC	_Ch0_Counter
   4108  1b11				   .L0483		;  temp6  =  _SD_Shoot_Enemy[_Ch0_Counter]  :	_Ch0_Counter  =  _Ch0_Counter  +  1
   4109  1b11
   4110  1b11		       a6 db		      LDX	_Ch0_Counter
   4111  1b13		       bd b1 9d 	      LDA	_SD_Shoot_Enemy,x
   4112  1b16		       85 a1		      STA	temp6
   4113  1b18		       e6 db		      INC	_Ch0_Counter
   4114  1b1a				   .
   4115  1b1a							; 
   4116  1b1a
   4117  1b1a				   .
   4118  1b1a							; 
   4119  1b1a
   4120  1b1a				   .L0484		;  AUDV0  =  temp4
   4121  1b1a
   4122  1b1a		       a5 9f		      LDA	temp4
   4123  1b1c		       85 19		      STA	AUDV0
   4124  1b1e				   .L0485		;  AUDC0  =  temp5
   4125  1b1e
   4126  1b1e		       a5 a0		      LDA	temp5
   4127  1b20		       85 15		      STA	AUDC0
   4128  1b22				   .L0486		;  AUDF0  =  temp6
   4129  1b22
   4130  1b22		       a5 a1		      LDA	temp6
   4131  1b24		       85 17		      STA	AUDF0
   4132  1b26				   .
   4133  1b26							; 
   4134  1b26
   4135  1b26				   .
   4136  1b26							; 
   4137  1b26
   4138  1b26				   .L0487		;  _Ch0_Duration  =  _SD_Shoot_Enemy[_Ch0_Counter]  :	_Ch0_Counter  =  _Ch0_Counter  +  1
   4139  1b26
   4140  1b26		       a6 db		      LDX	_Ch0_Counter
   4141  1b28		       bd b1 9d 	      LDA	_SD_Shoot_Enemy,x
   4142  1b2b		       85 da		      STA	_Ch0_Duration
   4143  1b2d		       e6 db		      INC	_Ch0_Counter
   4144  1b2f				   .
   4145  1b2f							; 
   4146  1b2f
   4147  1b2f				   .
   4148  1b2f							; 
   4149  1b2f
   4150  1b2f				   .L0488		;  goto __Skip_Ch_0
   4151  1b2f
   4152  1b2f		       4c 7d 9b 	      jmp	.__Skip_Ch_0
   4153  1b32
   4154  1b32				   .
   4155  1b32							; 
   4156  1b32
   4157  1b32				   .__Skip_Ch0_Sound_003
   4158  1b32							; __Skip_Ch0_Sound_003
   4159  1b32
   4160  1b32				   .
   4161  1b32							; 
   4162  1b32
   4163  1b32				   .
   4164  1b32							; 
   4165  1b32
   4166  1b32				   .
   4167  1b32							; 
   4168  1b32
   4169  1b32				   .
   4170  1b32							; 
   4171  1b32
   4172  1b32				   .L0489		;  if _Ch0_Sound  <>  4 then goto __Skip_Ch0_Sound_004
   4173  1b32
   4174  1b32		       a5 d9		      LDA	_Ch0_Sound
   4175  1b34		       c9 04		      CMP	#4
   4176  1b36		       f0 03		      BEQ	.skipL0489
   4177  1b38				   .condpart102
   4178  1b38		       4c 77 9b 	      jmp	.__Skip_Ch0_Sound_004
   4179  1b3b
   4180  1b3b				   .skipL0489
   4181  1b3b				   .
   4182  1b3b							; 
   4183  1b3b
   4184  1b3b				   .
   4185  1b3b							; 
   4186  1b3b
   4187  1b3b				   .L0490		;  temp4  =  _SD_Touch_Enemy[_Ch0_Counter]
   4188  1b3b
   4189  1b3b		       a6 db		      LDX	_Ch0_Counter
   4190  1b3d		       bd d5 9d 	      LDA	_SD_Touch_Enemy,x
   4191  1b40		       85 9f		      STA	temp4
   4192  1b42				   .
   4193  1b42							; 
   4194  1b42
   4195  1b42				   .
   4196  1b42							; 
   4197  1b42
   4198  1b42				   .L0491		;  if temp4  =  255 then goto __Clear_Ch_0
   4199  1b42
   4200  1b42		       a5 9f		      LDA	temp4
   4201  1b44		       c9 ff		      CMP	#255
   4202  1b46		       d0 03		      BNE	.skipL0491
   4203  1b48				   .condpart103
   4204  1b48		       4c 77 9b 	      jmp	.__Clear_Ch_0
   4205  1b4b
   4206  1b4b				   .skipL0491
   4207  1b4b				   .
   4208  1b4b							; 
   4209  1b4b
   4210  1b4b				   .
   4211  1b4b							; 
   4212  1b4b
   4213  1b4b				   .L0492		;  _Ch0_Counter  =  _Ch0_Counter  +  1
   4214  1b4b
   4215  1b4b		       e6 db		      INC	_Ch0_Counter
   4216  1b4d				   .L0493		;  temp5  =  _SD_Touch_Enemy[_Ch0_Counter]  :	_Ch0_Counter  =  _Ch0_Counter  +  1
   4217  1b4d
   4218  1b4d		       a6 db		      LDX	_Ch0_Counter
   4219  1b4f		       bd d5 9d 	      LDA	_SD_Touch_Enemy,x
   4220  1b52		       85 a0		      STA	temp5
   4221  1b54		       e6 db		      INC	_Ch0_Counter
   4222  1b56				   .L0494		;  temp6  =  _SD_Touch_Enemy[_Ch0_Counter]  :	_Ch0_Counter  =  _Ch0_Counter  +  1
   4223  1b56
   4224  1b56		       a6 db		      LDX	_Ch0_Counter
   4225  1b58		       bd d5 9d 	      LDA	_SD_Touch_Enemy,x
   4226  1b5b		       85 a1		      STA	temp6
   4227  1b5d		       e6 db		      INC	_Ch0_Counter
   4228  1b5f				   .
   4229  1b5f							; 
   4230  1b5f
   4231  1b5f				   .
   4232  1b5f							; 
   4233  1b5f
   4234  1b5f				   .L0495		;  AUDV0  =  temp4
   4235  1b5f
   4236  1b5f		       a5 9f		      LDA	temp4
   4237  1b61		       85 19		      STA	AUDV0
   4238  1b63				   .L0496		;  AUDC0  =  temp5
   4239  1b63
   4240  1b63		       a5 a0		      LDA	temp5
   4241  1b65		       85 15		      STA	AUDC0
   4242  1b67				   .L0497		;  AUDF0  =  temp6
   4243  1b67
   4244  1b67		       a5 a1		      LDA	temp6
   4245  1b69		       85 17		      STA	AUDF0
   4246  1b6b				   .
   4247  1b6b							; 
   4248  1b6b
   4249  1b6b				   .
   4250  1b6b							; 
   4251  1b6b
   4252  1b6b				   .L0498		;  _Ch0_Duration  =  _SD_Touch_Enemy[_Ch0_Counter]  :	_Ch0_Counter  =  _Ch0_Counter  +  1
   4253  1b6b
   4254  1b6b		       a6 db		      LDX	_Ch0_Counter
   4255  1b6d		       bd d5 9d 	      LDA	_SD_Touch_Enemy,x
   4256  1b70		       85 da		      STA	_Ch0_Duration
   4257  1b72		       e6 db		      INC	_Ch0_Counter
   4258  1b74				   .
   4259  1b74							; 
   4260  1b74
   4261  1b74				   .
   4262  1b74							; 
   4263  1b74
   4264  1b74				   .L0499		;  goto __Skip_Ch_0
   4265  1b74
   4266  1b74		       4c 7d 9b 	      jmp	.__Skip_Ch_0
   4267  1b77
   4268  1b77				   .
   4269  1b77							; 
   4270  1b77
   4271  1b77				   .__Skip_Ch0_Sound_004
   4272  1b77							; __Skip_Ch0_Sound_004
   4273  1b77
   4274  1b77				   .
   4275  1b77							; 
   4276  1b77
   4277  1b77				   .
   4278  1b77							; 
   4279  1b77
   4280  1b77				   .__Clear_Ch_0
   4281  1b77							; __Clear_Ch_0
   4282  1b77
   4283  1b77				   .L0500		;  _Ch0_Sound	=  0  :  AUDV0	=  0
   4284  1b77
   4285  1b77		       a9 00		      LDA	#0
   4286  1b79		       85 d9		      STA	_Ch0_Sound
   4287  1b7b		       85 19		      STA	AUDV0
   4288  1b7d				   .
   4289  1b7d							; 
   4290  1b7d
   4291  1b7d				   .
   4292  1b7d							; 
   4293  1b7d
   4294  1b7d				   .__Skip_Ch_0
   4295  1b7d							; __Skip_Ch_0
   4296  1b7d
   4297  1b7d				   .
   4298  1b7d							; 
   4299  1b7d
   4300  1b7d				   .
   4301  1b7d							; 
   4302  1b7d
   4303  1b7d				   .
   4304  1b7d							; 
   4305  1b7d
   4306  1b7d				   .
   4307  1b7d							; 
   4308  1b7d
   4309  1b7d				   .L0501		;  if _Bit6_Flip_P1{6} then REFP1  =  8
   4310  1b7d
   4311  1b7d		       24 ec		      BIT	_Bit6_Flip_P1
   4312  1b7f		       50 04		      BVC	.skipL0501
   4313  1b81				   .condpart104
   4314  1b81		       a9 08		      LDA	#8
   4315  1b83		       85 0c		      STA	REFP1
   4316  1b85				   .skipL0501
   4317  1b85				   .L0502		;  if _Bit0_roommate_Dir{0} then REFP0  =  8
   4318  1b85
   4319  1b85		       a5 ec		      LDA	_Bit0_roommate_Dir
   4320  1b87		       4a		      LSR
   4321  1b88		       90 04		      BCC	.skipL0502
   4322  1b8a				   .condpart105
   4323  1b8a		       a9 08		      LDA	#8
   4324  1b8c		       85 0b		      STA	REFP0
   4325  1b8e				   .skipL0502
   4326  1b8e				   .
   4327  1b8e							; 
   4328  1b8e
   4329  1b8e				   .L0503		;  drawscreen
   4330  1b8e
   4331  1b8e		       85 ee		      sta	temp7
   4332  1b90		       a9 9b		      lda	#>(ret_point3-1)
   4333  1b92		       48		      pha
   4334  1b93		       a9 a5		      lda	#<(ret_point3-1)
   4335  1b95		       48		      pha
   4336  1b96		       a9 f4		      lda	#>(drawscreen-1)
   4337  1b98		       48		      pha
   4338  1b99		       a9 e1		      lda	#<(drawscreen-1)
   4339  1b9b		       48		      pha
   4340  1b9c		       a5 ee		      lda	temp7
   4341  1b9e		       48		      pha
   4342  1b9f		       8a		      txa
   4343  1ba0		       48		      pha
   4344  1ba1		       a2 04		      ldx	#4
   4345  1ba3		       4c e8 ff 	      jmp	BS_jsr
   4346  1ba6				   ret_point3
   4347  1ba6				   .
   4348  1ba6							; 
   4349  1ba6
   4350  1ba6				   .L0504		;  goto __Main_Loop
   4351  1ba6
   4352  1ba6		       4c 3c 93 	      jmp	.__Main_Loop
   4353  1ba9
   4354  1ba9				   .
   4355  1ba9							; 
   4356  1ba9
   4357  1ba9				   .
   4358  1ba9							; 
   4359  1ba9
   4360  1ba9				   .
   4361  1ba9							; 
   4362  1ba9
   4363  1ba9				   .
   4364  1ba9							; 
   4365  1ba9
   4366  1ba9				   .
   4367  1ba9							; 
   4368  1ba9
   4369  1ba9				   ._Set_Game_Over
   4370  1ba9							; _Set_Game_Over
   4371  1ba9
   4372  1ba9				   .L0505		;  WriteToBuffer  =  _sc1
   4373  1ba9
   4374  1ba9		       a5 93		      LDA	_sc1
   4375  1bab		       8d f0 1f 	      STA	WriteToBuffer
   4376  1bae				   .L0506		;  WriteToBuffer  =  _sc2
   4377  1bae
   4378  1bae		       a5 94		      LDA	_sc2
   4379  1bb0		       8d f0 1f 	      STA	WriteToBuffer
   4380  1bb3				   .L0507		;  WriteToBuffer  =  _sc3
   4381  1bb3
   4382  1bb3		       a5 95		      LDA	_sc3
   4383  1bb5		       8d f0 1f 	      STA	WriteToBuffer
   4384  1bb8				   .L0508		;  WriteSendBuffer  =	req_game_over
   4385  1bb8
   4386  1bb8		       a9 02		      LDA	#req_game_over
   4387  1bba		       8d f1 1f 	      STA	WriteSendBuffer
   4388  1bbd				   .L0509		;  _Bit4_Game_Over{4}	=  1
   4389  1bbd
   4390  1bbd		       a5 ec		      LDA	_Bit4_Game_Over
   4391  1bbf		       09 10		      ORA	#16
   4392  1bc1		       85 ec		      STA	_Bit4_Game_Over
   4393  1bc3				   .L0510		;  goto _skip_game_action
   4394  1bc3
   4395  1bc3		       4c 4a 9a 	      jmp	._skip_game_action
   4396  1bc6
   4397  1bc6				   .
   4398  1bc6							; 
   4399  1bc6
   4400  1bc6				   ._Reset_Level
   4401  1bc6							; _Reset_Level
   4402  1bc6
   4403  1bc6				   .L0511		;  gosub _Add_Room_State
   4404  1bc6
   4405  1bc6		       20 8c 9c 	      jsr	._Add_Room_State
   4406  1bc9
   4407  1bc9				   .L0512		;  WriteSendBuffer  =	req_level_reset
   4408  1bc9
   4409  1bc9		       a9 07		      LDA	#req_level_reset
   4410  1bcb		       8d f1 1f 	      STA	WriteSendBuffer
   4411  1bce				   .L0513		;  _Bit0_New_Room_P1_Flip{0}  =  _Bit1_Safe_Point_P1_Flip{1}
   4412  1bce
   4413  1bce		       a5 df		      LDA	_Bit1_Safe_Point_P1_Flip
   4414  1bd0		       29 02		      AND	#2
   4415  1bd2		       08		      PHP
   4416  1bd3		       a5 df		      LDA	_Bit0_New_Room_P1_Flip
   4417  1bd5		       29 fe		      AND	#254
   4418  1bd7		       28		      PLP
   4419  1bd8		       f0 02		      .byte.b	$F0, $02
   4420  1bda		       09 01		      ORA	#1
   4421  1bdc		       85 df		      STA	_Bit0_New_Room_P1_Flip
   4422  1bde				   .L0514		;  delay_counter  =  60
   4423  1bde
   4424  1bde		       a9 3c		      LDA	#60
   4425  1be0		       85 d4		      STA	delay_counter
   4426  1be2				   .
   4427  1be2							; 
   4428  1be2
   4429  1be2				   ._Common_Reset
   4430  1be2							; _Common_Reset
   4431  1be2
   4432  1be2				   .L0515		;  _Bit5_Request_Pending{5}  =  1
   4433  1be2
   4434  1be2		       a5 ec		      LDA	_Bit5_Request_Pending
   4435  1be4		       09 20		      ORA	#32
   4436  1be6		       85 ec		      STA	_Bit5_Request_Pending
   4437  1be8				   .L0516		;  pfscore2  =  255
   4438  1be8
   4439  1be8		       a9 ff		      LDA	#255
   4440  1bea		       85 f3		      STA	pfscore2
   4441  1bec				   .L0517		;  P1y_velocity  =  0.0  :  x	=  0
   4442  1bec
   4443  1bec		       a2 00		      LDX	#0
   4444  1bee		       86 ea		      STX	w
   4445  1bf0		       a9 00		      LDA	#0
   4446  1bf2		       85 e9		      STA	P1y_velocity
   4447  1bf4		       a9 00		      LDA	#0
   4448  1bf6		       85 eb		      STA	x
   4449  1bf8				   .L0518		;  new_room_player1x  =  Safe_Point_P1_x
   4450  1bf8
   4451  1bf8		       a5 e0		      LDA	Safe_Point_P1_x
   4452  1bfa		       85 a5		      STA	new_room_player1x
   4453  1bfc				   .L0519		;  new_room_player1y  =  Safe_Point_P1_y
   4454  1bfc
   4455  1bfc		       a5 e1		      LDA	Safe_Point_P1_y
   4456  1bfe		       85 a4		      STA	new_room_player1y
   4457  1c00				   .L0520		;  goto _skip_game_action
   4458  1c00
   4459  1c00		       4c 4a 9a 	      jmp	._skip_game_action
   4460  1c03
   4461  1c03				   .
   4462  1c03							; 
   4463  1c03
   4464  1c03				   ._Level_Up
   4465  1c03							; _Level_Up
   4466  1c03
   4467  1c03				   .L0521		;  _Bit2_Level_finished{2}  =	0
   4468  1c03
   4469  1c03		       a5 ec		      LDA	_Bit2_Level_finished
   4470  1c05		       29 fb		      AND	#251
   4471  1c07		       85 ec		      STA	_Bit2_Level_finished
   4472  1c09				   .L0522		;  _Bit7_FireB_Restrainer{7}  =  1  :	_Bit5_Request_Pending{5}  =  1
   4473  1c09
   4474  1c09		       a5 ec		      LDA	_Bit7_FireB_Restrainer
   4475  1c0b		       09 80		      ORA	#128
   4476  1c0d		       85 ec		      STA	_Bit7_FireB_Restrainer
   4477  1c0f		       a5 ec		      LDA	_Bit5_Request_Pending
   4478  1c11		       09 20		      ORA	#32
   4479  1c13		       85 ec		      STA	_Bit5_Request_Pending
   4480  1c15				   .L0523		;  score  =  0  :  _BitOp_Flip_positions  =  0
   4481  1c15
   4482  1c15		       a9 00		      LDA	#$00
   4483  1c17		       85 95		      STA	score+2
   4484  1c19		       a9 00		      LDA	#$00
   4485  1c1b		       85 94		      STA	score+1
   4486  1c1d		       a9 00		      LDA	#$00
   4487  1c1f		       85 93		      STA	score
   4488  1c21		       a9 00		      LDA	#0
   4489  1c23		       85 df		      STA	_BitOp_Flip_positions
   4490  1c25				   .L0524		;  Safe_Point_P1_x  =	30
   4491  1c25
   4492  1c25		       a9 1e		      LDA	#30
   4493  1c27		       85 e0		      STA	Safe_Point_P1_x
   4494  1c29				   .L0525		;  Safe_Point_P1_y  =	player_min_y
   4495  1c29
   4496  1c29		       a9 02		      LDA	#player_min_y
   4497  1c2b		       85 e1		      STA	Safe_Point_P1_y
   4498  1c2d				   .L0526		;  pfscore1  =  %00101010
   4499  1c2d
   4500  1c2d		       a9 2a		      LDA	#%00101010
   4501  1c2f		       85 f2		      STA	pfscore1
   4502  1c31				   .L0527		;  goto _Common_Reset
   4503  1c31
   4504  1c31		       4c e2 9b 	      jmp	._Common_Reset
   4505  1c34
   4506  1c34				   .
   4507  1c34							; 
   4508  1c34
   4509  1c34				   ._Level_Completed
   4510  1c34							; _Level_Completed
   4511  1c34
   4512  1c34				   .L0528		;  _Bit2_Level_finished{2}  =	1
   4513  1c34
   4514  1c34		       a5 ec		      LDA	_Bit2_Level_finished
   4515  1c36		       09 04		      ORA	#4
   4516  1c38		       85 ec		      STA	_Bit2_Level_finished
   4517  1c3a				   .L0529		;  temp4  =  frame_counter  /	2
   4518  1c3a
   4519  1c3a		       a5 d5		      LDA	frame_counter
   4520  1c3c		       4a		      lsr
   4521  1c3d		       85 9f		      STA	temp4
   4522  1c3f				   .L0530		;  temp5  =  temp4  &	$0F  :	if temp5  >  9 then temp4  =  temp4  +	6
   4523  1c3f
   4524  1c3f		       a5 9f		      LDA	temp4
   4525  1c41		       29 0f		      AND	#$0F
   4526  1c43		       85 a0		      STA	temp5
   4527  1c45		       a9 09		      LDA	#9
   4528  1c47		       c5 a0		      CMP	temp5
   4529  1c49		       b0 07		      BCS	.skipL0530
   4530  1c4b				   .condpart106
   4531  1c4b		       a5 9f		      LDA	temp4
   4532  1c4d		       18		      CLC
   4533  1c4e		       69 06		      ADC	#6
   4534  1c50		       85 9f		      STA	temp4
   4535  1c52				   .skipL0530
   4536  1c52				   .L0531		;  temp5  =  temp4  &	$F0  :	if temp5  >  $90 then temp4  =	temp4  +  $60
   4537  1c52
   4538  1c52		       a5 9f		      LDA	temp4
   4539  1c54		       29 f0		      AND	#$F0
   4540  1c56		       85 a0		      STA	temp5
   4541  1c58		       a9 90		      LDA	#$90
   4542  1c5a		       c5 a0		      CMP	temp5
   4543  1c5c		       b0 07		      BCS	.skipL0531
   4544  1c5e				   .condpart107
   4545  1c5e		       a5 9f		      LDA	temp4
   4546  1c60		       18		      CLC
   4547  1c61		       69 60		      ADC	#$60
   4548  1c63		       85 9f		      STA	temp4
   4549  1c65				   .skipL0531
   4550  1c65				   .L0532		;  score  =  score  +	temp4
   4551  1c65
   4552  1c65		       f8		      SED
   4553  1c66		       18		      CLC
   4554  1c67		       a5 95		      LDA	score+2
   4555  1c69		       65 9f		      ADC	temp4
   4556  1c6b
   4557  1c6b		       85 95		      STA	score+2
   4558  1c6d		       a5 94		      LDA	score+1
   4559  1c6f		       69 00		      ADC	#$00
   4560  1c71		       85 94		      STA	score+1
   4561  1c73		       a5 93		      LDA	score
   4562  1c75		       69 00		      ADC	#$00
   4563  1c77		       85 93		      STA	score
   4564  1c79		       d8		      CLD
   4565  1c7a				   .L0533		;  asm
   4566  1c7a
   4567  1c7a		       f8		      sed
   4568  1c7b
   4569  1c7b		       18		      clc
   4570  1c7c
   4571  1c7c		       a5 94		      lda	_sc2
   4572  1c7e
   4573  1c7e		       65 b1		      adc	bonus_bcd_counter
   4574  1c80
   4575  1c80		       85 94		      sta	_sc2
   4576  1c82
   4577  1c82		       a5 93		      lda	_sc1
   4578  1c84
   4579  1c84		       69 00		      adc	#0
   4580  1c86
   4581  1c86		       85 93		      sta	_sc1
   4582  1c88
   4583  1c88		       d8		      cld
   4584  1c89
   4585  1c89				   .L0534		;  goto _skip_game_action
   4586  1c89
   4587  1c89		       4c 4a 9a 	      jmp	._skip_game_action
   4588  1c8c
   4589  1c8c				   .
   4590  1c8c							; 
   4591  1c8c
   4592  1c8c				   .
   4593  1c8c							; 
   4594  1c8c
   4595  1c8c				   .
   4596  1c8c							; 
   4597  1c8c
   4598  1c8c				   ._Add_Room_State
   4599  1c8c							; _Add_Room_State
   4600  1c8c
   4601  1c8c				   .L0535		;  _Bit5_Request_Pending{5}  =  1
   4602  1c8c
   4603  1c8c		       a5 ec		      LDA	_Bit5_Request_Pending
   4604  1c8e		       09 20		      ORA	#32
   4605  1c90		       85 ec		      STA	_Bit5_Request_Pending
   4606  1c92				   .L0536		;  WriteToBuffer  =  r104
   4607  1c92
   4608  1c92		       ad e8 f0 	      LDA	r104
   4609  1c95		       8d f0 1f 	      STA	WriteToBuffer
   4610  1c98				   .L0537		;  WriteToBuffer  =  r105
   4611  1c98
   4612  1c98		       ad e9 f0 	      LDA	r105
   4613  1c9b		       8d f0 1f 	      STA	WriteToBuffer
   4614  1c9e				   .L0538		;  WriteToBuffer  =  r106
   4615  1c9e
   4616  1c9e		       ad ea f0 	      LDA	r106
   4617  1ca1		       8d f0 1f 	      STA	WriteToBuffer
   4618  1ca4				   .L0539		;  WriteToBuffer  =  r107
   4619  1ca4
   4620  1ca4		       ad eb f0 	      LDA	r107
   4621  1ca7		       8d f0 1f 	      STA	WriteToBuffer
   4622  1caa				   .L0540		;  WriteToBuffer  =  r108
   4623  1caa
   4624  1caa		       ad ec f0 	      LDA	r108
   4625  1cad		       8d f0 1f 	      STA	WriteToBuffer
   4626  1cb0				   .L0541		;  WriteToBuffer  =  r109
   4627  1cb0
   4628  1cb0		       ad ed f0 	      LDA	r109
   4629  1cb3		       8d f0 1f 	      STA	WriteToBuffer
   4630  1cb6				   .L0542		;  WriteToBuffer  =  r110
   4631  1cb6
   4632  1cb6		       ad ee f0 	      LDA	r110
   4633  1cb9		       8d f0 1f 	      STA	WriteToBuffer
   4634  1cbc				   .L0543		;  WriteToBuffer  =  r111
   4635  1cbc
   4636  1cbc		       ad ef f0 	      LDA	r111
   4637  1cbf		       8d f0 1f 	      STA	WriteToBuffer
   4638  1cc2				   .L0544		;  return
   4639  1cc2
   4640  1cc2		       ba		      tsx
   4641  1cc3		       b5 02		      lda	2,x	; check return address
   4642  1cc5		       49 9c		      eor	#(>*)	; vs. current PCH
   4643  1cc7		       29 e0		      and	#$E0	;  mask off all but top 3 bits
   4644  1cc9		       f0 03		      beq	*+5	; if equal, do normal return
   4645  1ccb		       4c da ff 	      JMP	BS_return
   4646  1cce		       60		      RTS
   4647  1ccf				   .
   4648  1ccf							; 
   4649  1ccf
   4650  1ccf				   .
   4651  1ccf							; 
   4652  1ccf
   4653  1ccf				   .
   4654  1ccf							; 
   4655  1ccf
   4656  1ccf				   .
   4657  1ccf							; 
   4658  1ccf
   4659  1ccf				   ._Change_Room
   4660  1ccf							; _Change_Room
   4661  1ccf
   4662  1ccf				   .L0545		;  delay_counter  =  2
   4663  1ccf
   4664  1ccf		       a9 02		      LDA	#2
   4665  1cd1		       85 d4		      STA	delay_counter
   4666  1cd3				   .L0546		;  player0y  =  200  :  ball_shoot_x  =  200  :  ball_shoot_y	=  200	:  missile0x  =  200  :  missile0y  =  200
   4667  1cd3
   4668  1cd3		       a9 c8		      LDA	#200
   4669  1cd5		       85 85		      STA	player0y
   4670  1cd7		       85 ae		      STA	ball_shoot_x
   4671  1cd9		       85 af		      STA	ball_shoot_y
   4672  1cdb		       85 82		      STA	missile0x
   4673  1cdd		       85 91		      STA	missile0y
   4674  1cdf				   .
   4675  1cdf							; 
   4676  1cdf
   4677  1cdf				   .
   4678  1cdf							; 
   4679  1cdf
   4680  1cdf				   .L0547		;  _Bit_Game_State  =	_Bit_Game_State  &  %11010100
   4681  1cdf
   4682  1cdf		       a5 ec		      LDA	_Bit_Game_State
   4683  1ce1		       29 d4		      AND	#%11010100
   4684  1ce3		       85 ec		      STA	_Bit_Game_State
   4685  1ce5				   .L0548		;  player1y  =  new_room_player1y  :  player1x  =  new_room_player1x  :  _Bit6_Flip_P1{6}  =  _Bit0_New_Room_P1_Flip{0}
   4686  1ce5
   4687  1ce5		       a5 a4		      LDA	new_room_player1y
   4688  1ce7		       85 86		      STA	player1y
   4689  1ce9		       a5 a5		      LDA	new_room_player1x
   4690  1ceb		       85 81		      STA	player1x
   4691  1ced		       a5 df		      LDA	_Bit0_New_Room_P1_Flip
   4692  1cef		       29 01		      AND	#1
   4693  1cf1		       08		      PHP
   4694  1cf2		       a5 ec		      LDA	_Bit6_Flip_P1
   4695  1cf4		       29 bf		      AND	#191
   4696  1cf6		       28		      PLP
   4697  1cf7		       f0 02		      .byte.b	$F0, $02
   4698  1cf9		       09 40		      ORA	#64
   4699  1cfb		       85 ec		      STA	_Bit6_Flip_P1
   4700  1cfd				   .L0549		;  asm
   4701  1cfd
   4702  1cfd		       a9 00		      LDA	#0
   4703  1cff
   4704  1cff		       85 89		      STA	bally
   4705  1d01
   4706  1d01		       85 d7		      STA	_BitOp_M0_Dir	; delete enemy and player shot
   4707  1d03
   4708  1d03		       85 d6		      STA	_BitOp_Ball_Shot_Dir
   4709  1d05
   4710  1d05		       85 dc		      STA	extra_wall_move_x
   4711  1d07
   4712  1d07		       85 dd		      STA	roommate_move_x
   4713  1d09
   4714  1d09		       aa		      TAX
   4715  1d0a
   4716  1d0a				   .copy_loop
   4717  1d0a
   4718  1d0a		       ad f2 1f 	      LDA	ReceiveBuffer	; 4
   4719  1d0d
   4720  1d0d		       9d 5f f0 	      STA	w_room_definition_start,x	; 5   @9
   4721  1d10
   4722  1d10		       e8		      INX		; 2   @11
   4723  1d11
   4724  1d11		       ad f3 1f 	      LDA	ReceiveBufferSize	; 4   @15
   4725  1d14
   4726  1d14		       d0 f4		      BNE	.copy_loop	; 2/3 @18
   4727  1d16
   4728  1d16				   .L0550		;  roommate_type  =  r_roommate_type_and_range  &  3
   4729  1d16
   4730  1d16		       ad e8 f0 	      LDA	r_roommate_type_and_range
   4731  1d19		       29 03		      AND	#3
   4732  1d1b		       85 de		      STA	roommate_type
   4733  1d1d				   .L0551		;  if !men_to_rescue then men_to_rescue  =  r_men_to_rescue_in_this_level  :  bonus_bcd_counter  =  r_level_bonus_bcd_points
   4734  1d1d
   4735  1d1d		       a5 b0		      LDA	men_to_rescue
   4736  1d1f		       d0 0a		      BNE	.skipL0551
   4737  1d21				   .condpart108
   4738  1d21		       ad e0 f0 	      LDA	r_men_to_rescue_in_this_level
   4739  1d24		       85 b0		      STA	men_to_rescue
   4740  1d26		       ad df f0 	      LDA	r_level_bonus_bcd_points
   4741  1d29		       85 b1		      STA	bonus_bcd_counter
   4742  1d2b				   .skipL0551
   4743  1d2b				   .L0552		;  goto _skip_game_action
   4744  1d2b
   4745  1d2b		       4c 4a 9a 	      jmp	._skip_game_action
   4746  1d2e
   4747  1d2e				   .
   4748  1d2e							; 
   4749  1d2e
   4750  1d2e				   .
   4751  1d2e							; 
   4752  1d2e
   4753  1d2e				   .
   4754  1d2e							; 
   4755  1d2e
   4756  1d2e				   .
   4757  1d2e							; 
   4758  1d2e
   4759  1d2e				   .
   4760  1d2e							; 
   4761  1d2e
   4762  1d2e				   .
   4763  1d2e							; 
   4764  1d2e
   4765  1d2e				   .L0553		;  data _SD_Shot_Wall
   4766  1d2e
   4767  1d2e		       4c 66 9d 	      JMP	.skipL0553
   4768  1d31				   _SD_Shot_Wall
   4769  1d31		       08 08 00 	      .byte.b	8,8,0
   4770  1d34
   4771  1d34		       01		      .byte.b	1
   4772  1d35
   4773  1d35		       08 08 01 	      .byte.b	8,8,1
   4774  1d38
   4775  1d38		       01		      .byte.b	1
   4776  1d39
   4777  1d39		       08 0e 01 	      .byte.b	8,14,1
   4778  1d3c
   4779  1d3c		       01		      .byte.b	1
   4780  1d3d
   4781  1d3d		       08 08 00 	      .byte.b	8,8,0
   4782  1d40
   4783  1d40		       01		      .byte.b	1
   4784  1d41
   4785  1d41		       08 08 02 	      .byte.b	8,8,2
   4786  1d44
   4787  1d44		       01		      .byte.b	1
   4788  1d45
   4789  1d45		       08 0e 02 	      .byte.b	8,14,2
   4790  1d48
   4791  1d48		       01		      .byte.b	1
   4792  1d49
   4793  1d49		       08 08 01 	      .byte.b	8,8,1
   4794  1d4c
   4795  1d4c		       01		      .byte.b	1
   4796  1d4d
   4797  1d4d		       07 08 03 	      .byte.b	7,8,3
   4798  1d50
   4799  1d50		       01		      .byte.b	1
   4800  1d51
   4801  1d51		       06 08 02 	      .byte.b	6,8,2
   4802  1d54
   4803  1d54		       01		      .byte.b	1
   4804  1d55
   4805  1d55		       05 08 04 	      .byte.b	5,8,4
   4806  1d58
   4807  1d58		       01		      .byte.b	1
   4808  1d59
   4809  1d59		       04 08 03 	      .byte.b	4,8,3
   4810  1d5c
   4811  1d5c		       01		      .byte.b	1
   4812  1d5d
   4813  1d5d		       03 08 05 	      .byte.b	3,8,5
   4814  1d60
   4815  1d60		       01		      .byte.b	1
   4816  1d61
   4817  1d61		       02 0e 04 	      .byte.b	2,14,4
   4818  1d64
   4819  1d64		       04		      .byte.b	4
   4820  1d65
   4821  1d65		       ff		      .byte.b	255
   4822  1d66
   4823  1d66				   .skipL0553
   4824  1d66				   .
   4825  1d66							; 
   4826  1d66
   4827  1d66				   .
   4828  1d66							; 
   4829  1d66
   4830  1d66				   .L0554		;  data _SD_Shoot_Miss
   4831  1d66
   4832  1d66		       4c ae 9d 	      JMP	.skipL0554
   4833  1d69				   _SD_Shoot_Miss
   4834  1d69		       08 0f 00 	      .byte.b	8,15,0
   4835  1d6c
   4836  1d6c		       01		      .byte.b	1
   4837  1d6d
   4838  1d6d		       0c 0f 01 	      .byte.b	12,15,1
   4839  1d70
   4840  1d70		       01		      .byte.b	1
   4841  1d71
   4842  1d71		       08 07 14 	      .byte.b	8,7,20
   4843  1d74
   4844  1d74		       01		      .byte.b	1
   4845  1d75
   4846  1d75		       0a 0f 03 	      .byte.b	10,15,3
   4847  1d78
   4848  1d78		       01		      .byte.b	1
   4849  1d79
   4850  1d79		       08 07 16 	      .byte.b	8,7,22
   4851  1d7c
   4852  1d7c		       01		      .byte.b	1
   4853  1d7d
   4854  1d7d		       0a 0f 05 	      .byte.b	10,15,5
   4855  1d80
   4856  1d80		       01		      .byte.b	1
   4857  1d81
   4858  1d81		       08 0f 06 	      .byte.b	8,15,6
   4859  1d84
   4860  1d84		       01		      .byte.b	1
   4861  1d85
   4862  1d85		       0a 07 18 	      .byte.b	10,7,24
   4863  1d88
   4864  1d88		       01		      .byte.b	1
   4865  1d89
   4866  1d89		       08 0f 08 	      .byte.b	8,15,8
   4867  1d8c
   4868  1d8c		       01		      .byte.b	1
   4869  1d8d
   4870  1d8d		       09 07 1b 	      .byte.b	9,7,27
   4871  1d90
   4872  1d90		       01		      .byte.b	1
   4873  1d91
   4874  1d91		       08 0f 0a 	      .byte.b	8,15,10
   4875  1d94
   4876  1d94		       01		      .byte.b	1
   4877  1d95
   4878  1d95		       07 0e 0b 	      .byte.b	7,14,11
   4879  1d98
   4880  1d98		       01		      .byte.b	1
   4881  1d99
   4882  1d99		       06 0f 0c 	      .byte.b	6,15,12
   4883  1d9c
   4884  1d9c		       01		      .byte.b	1
   4885  1d9d
   4886  1d9d		       05 06 0d 	      .byte.b	5,6,13
   4887  1da0
   4888  1da0		       01		      .byte.b	1
   4889  1da1
   4890  1da1		       04 0f 0e 	      .byte.b	4,15,14
   4891  1da4
   4892  1da4		       01		      .byte.b	1
   4893  1da5
   4894  1da5		       03 06 1b 	      .byte.b	3,6,27
   4895  1da8
   4896  1da8		       01		      .byte.b	1
   4897  1da9
   4898  1da9		       02 06 1e 	      .byte.b	2,6,30
   4899  1dac
   4900  1dac		       08		      .byte.b	8
   4901  1dad
   4902  1dad		       ff		      .byte.b	255
   4903  1dae
   4904  1dae				   .skipL0554
   4905  1dae				   .
   4906  1dae							; 
   4907  1dae
   4908  1dae				   .
   4909  1dae							; 
   4910  1dae
   4911  1dae				   .L0555		;  data _SD_Shoot_Enemy
   4912  1dae
   4913  1dae		       4c d2 9d 	      JMP	.skipL0555
   4914  1db1				   _SD_Shoot_Enemy
   4915  1db1		       0c 04 17 	      .byte.b	12,4,23
   4916  1db4
   4917  1db4		       04		      .byte.b	4
   4918  1db5
   4919  1db5		       0a 04 1d 	      .byte.b	10,4,29
   4920  1db8
   4921  1db8		       04		      .byte.b	4
   4922  1db9
   4923  1db9		       08 04 17 	      .byte.b	8,4,23
   4924  1dbc
   4925  1dbc		       04		      .byte.b	4
   4926  1dbd
   4927  1dbd		       06 04 1d 	      .byte.b	6,4,29
   4928  1dc0
   4929  1dc0		       04		      .byte.b	4
   4930  1dc1
   4931  1dc1		       04 04 17 	      .byte.b	4,4,23
   4932  1dc4
   4933  1dc4		       04		      .byte.b	4
   4934  1dc5
   4935  1dc5		       03 04 1d 	      .byte.b	3,4,29
   4936  1dc8
   4937  1dc8		       04		      .byte.b	4
   4938  1dc9
   4939  1dc9		       02 04 17 	      .byte.b	2,4,23
   4940  1dcc
   4941  1dcc		       01		      .byte.b	1
   4942  1dcd
   4943  1dcd		       01 04 1d 	      .byte.b	1,4,29
   4944  1dd0
   4945  1dd0		       01		      .byte.b	1
   4946  1dd1
   4947  1dd1		       ff		      .byte.b	255
   4948  1dd2
   4949  1dd2				   .skipL0555
   4950  1dd2				   .
   4951  1dd2							; 
   4952  1dd2
   4953  1dd2				   .
   4954  1dd2							; 
   4955  1dd2
   4956  1dd2				   .L0556		;  data _SD_Touch_Enemy
   4957  1dd2
   4958  1dd2		       4c f2 9d 	      JMP	.skipL0556
   4959  1dd5				   _SD_Touch_Enemy
   4960  1dd5		       02 07 0b 	      .byte.b	2,7,11
   4961  1dd8
   4962  1dd8		       02		      .byte.b	2
   4963  1dd9
   4964  1dd9		       0a 07 0c 	      .byte.b	10,7,12
   4965  1ddc
   4966  1ddc		       02		      .byte.b	2
   4967  1ddd
   4968  1ddd		       08 07 0d 	      .byte.b	8,7,13
   4969  1de0
   4970  1de0		       02		      .byte.b	2
   4971  1de1
   4972  1de1		       08 07 0e 	      .byte.b	8,7,14
   4973  1de4
   4974  1de4		       02		      .byte.b	2
   4975  1de5
   4976  1de5		       08 07 15 	      .byte.b	8,7,21
   4977  1de8
   4978  1de8		       08		      .byte.b	8
   4979  1de9
   4980  1de9		       04 07 16 	      .byte.b	4,7,22
   4981  1dec
   4982  1dec		       02		      .byte.b	2
   4983  1ded
   4984  1ded		       02 07 17 	      .byte.b	2,7,23
   4985  1df0
   4986  1df0		       01		      .byte.b	1
   4987  1df1
   4988  1df1		       ff		      .byte.b	255
   4989  1df2
   4990  1df2				   .skipL0556
   4991  1df2				   .
   4992  1df2							; 
   4993  1df2
   4994  1df2				   .
   4995  1df2							; 
   4996  1df2
   4997  1df2				   .
   4998  1df2							; 
   4999  1df2
   5000  1df2				   .
   5001  1df2							; 
   5002  1df2
   5003  1df2				   .
   5004  1df2							; 
   5005  1df2
   5006  1df2				   .L0557		;  bank 2
   5007  1df2
   5008  1df2					      if	ECHO1
      479 bytes of ROM space left in bank 1
   5009  1df2					      echo	"    ",[(start_bank1 - *)]d , "bytes of ROM space left in bank 1")
   5010  1df2					      endif
   5011  1df2		       00 01	   ECHO1      =	1
   5012  1fd1					      ORG	$1FF4-bscode_length
   5013  1fd1					      RORG	$9FF4-bscode_length
   5014  1fd1		       a2 ff	   start_bank1 ldx	#$ff
   5015  1fd3				  -	      ifconst	FASTFETCH	; using DPC+
   5016  1fd3				  -	      stx	FASTFETCH
   5017  1fd3					      endif
   5018  1fd3		       9a		      txs
   5019  1fd4				  -	      if	bankswitch == 64
   5020  1fd4				  -	      lda	#(((>(start-1)) & $0F) | $F0)
   5021  1fd4					      else
   5022  1fd4		       a9 f2		      lda	#>(start-1)
   5023  1fd6					      endif
   5024  1fd6		       48		      pha
   5025  1fd7		       a9 b0		      lda	#<(start-1)
   5026  1fd9		       48		      pha
   5027  1fda		       48		      pha
   5028  1fdb		       8a		      txa
   5029  1fdc		       48		      pha
   5030  1fdd		       ba		      tsx
   5031  1fde					      if	bankswitch != 64
   5032  1fde		       b5 04		      lda	4,x	; get high byte of return address
   5033  1fe0		       2a		      rol
   5034  1fe1		       2a		      rol
   5035  1fe2		       2a		      rol
   5036  1fe3		       2a		      rol
   5037  1fe4		       29 03		      and	#bs_mask	;1 3 or 7 for F8/F6/F4
   5038  1fe6		       aa		      tax
   5039  1fe7		       e8		      inx
   5040  1fe8				  -	      else
   5041  1fe8				  -	      lda	4,x	; get high byte of return address
   5042  1fe8				  -	      tay
   5043  1fe8				  -	      ora	#$10	; change our bank nibble into a valid rom mirror
   5044  1fe8				  -	      sta	4,x
   5045  1fe8				  -	      tya
   5046  1fe8				  -	      lsr
   5047  1fe8				  -	      lsr
   5048  1fe8				  -	      lsr
   5049  1fe8				  -	      lsr
   5050  1fe8				  -	      tax
   5051  1fe8				  -	      inx
   5052  1fe8					      endif
   5053  1fe8		       bd f5 1f 	      lda	bankswitch_hotspot-1,x
   5054  1feb		       68		      pla
   5055  1fec		       aa		      tax
   5056  1fed		       68		      pla
   5057  1fee		       60		      rts
   5058  1fef				  -	      if	((* & $1FFF) > ((bankswitch_hotspot & $1FFF) - 1))
   5059  1fef				  -	      echo	"WARNING: size parameter in banksw.asm too small - the program probably will not work."
   5060  1fef				  -	      echo	"Change to",[(*-begin_bscode+1)&$FF]d,"and try again."
   5061  1fef					      endif
   5062  1ffc					      ORG	$1FFC
   5063  1ffc					      RORG	$9FFC
   5064  1ffc		       d1 9f		      .word.w	(start_bank1 & $ffff)
   5065  1ffe		       d1 9f		      .word.w	(start_bank1 & $ffff)
   5066  2000					      ORG	$2000
   5067  2000					      RORG	$B000
   5068  2000					      repeat	256
   5069  2000		       ff		      .byte.b	$ff
   5068  2000					      repend
   5069  2001		       ff		      .byte.b	$ff
   5068  2001					      repend
   5069  2002		       ff		      .byte.b	$ff
   5068  2002					      repend
   5069  2003		       ff		      .byte.b	$ff
   5068  2003					      repend
   5069  2004		       ff		      .byte.b	$ff
   5068  2004					      repend
   5069  2005		       ff		      .byte.b	$ff
   5068  2005					      repend
   5069  2006		       ff		      .byte.b	$ff
   5068  2006					      repend
   5069  2007		       ff		      .byte.b	$ff
   5068  2007					      repend
   5069  2008		       ff		      .byte.b	$ff
   5068  2008					      repend
   5069  2009		       ff		      .byte.b	$ff
   5068  2009					      repend
   5069  200a		       ff		      .byte.b	$ff
   5068  200a					      repend
   5069  200b		       ff		      .byte.b	$ff
   5068  200b					      repend
   5069  200c		       ff		      .byte.b	$ff
   5068  200c					      repend
   5069  200d		       ff		      .byte.b	$ff
   5068  200d					      repend
   5069  200e		       ff		      .byte.b	$ff
   5068  200e					      repend
   5069  200f		       ff		      .byte.b	$ff
   5068  200f					      repend
   5069  2010		       ff		      .byte.b	$ff
   5068  2010					      repend
   5069  2011		       ff		      .byte.b	$ff
   5068  2011					      repend
   5069  2012		       ff		      .byte.b	$ff
   5068  2012					      repend
   5069  2013		       ff		      .byte.b	$ff
   5068  2013					      repend
   5069  2014		       ff		      .byte.b	$ff
   5068  2014					      repend
   5069  2015		       ff		      .byte.b	$ff
   5068  2015					      repend
   5069  2016		       ff		      .byte.b	$ff
   5068  2016					      repend
   5069  2017		       ff		      .byte.b	$ff
   5068  2017					      repend
   5069  2018		       ff		      .byte.b	$ff
   5068  2018					      repend
   5069  2019		       ff		      .byte.b	$ff
   5068  2019					      repend
   5069  201a		       ff		      .byte.b	$ff
   5068  201a					      repend
   5069  201b		       ff		      .byte.b	$ff
   5068  201b					      repend
   5069  201c		       ff		      .byte.b	$ff
   5068  201c					      repend
   5069  201d		       ff		      .byte.b	$ff
   5068  201d					      repend
   5069  201e		       ff		      .byte.b	$ff
   5068  201e					      repend
   5069  201f		       ff		      .byte.b	$ff
   5068  201f					      repend
   5069  2020		       ff		      .byte.b	$ff
   5068  2020					      repend
   5069  2021		       ff		      .byte.b	$ff
   5068  2021					      repend
   5069  2022		       ff		      .byte.b	$ff
   5068  2022					      repend
   5069  2023		       ff		      .byte.b	$ff
   5068  2023					      repend
   5069  2024		       ff		      .byte.b	$ff
   5068  2024					      repend
   5069  2025		       ff		      .byte.b	$ff
   5068  2025					      repend
   5069  2026		       ff		      .byte.b	$ff
   5068  2026					      repend
   5069  2027		       ff		      .byte.b	$ff
   5068  2027					      repend
   5069  2028		       ff		      .byte.b	$ff
   5068  2028					      repend
   5069  2029		       ff		      .byte.b	$ff
   5068  2029					      repend
   5069  202a		       ff		      .byte.b	$ff
   5068  202a					      repend
   5069  202b		       ff		      .byte.b	$ff
   5068  202b					      repend
   5069  202c		       ff		      .byte.b	$ff
   5068  202c					      repend
   5069  202d		       ff		      .byte.b	$ff
   5068  202d					      repend
   5069  202e		       ff		      .byte.b	$ff
   5068  202e					      repend
   5069  202f		       ff		      .byte.b	$ff
   5068  202f					      repend
   5069  2030		       ff		      .byte.b	$ff
   5068  2030					      repend
   5069  2031		       ff		      .byte.b	$ff
   5068  2031					      repend
   5069  2032		       ff		      .byte.b	$ff
   5068  2032					      repend
   5069  2033		       ff		      .byte.b	$ff
   5068  2033					      repend
   5069  2034		       ff		      .byte.b	$ff
   5068  2034					      repend
   5069  2035		       ff		      .byte.b	$ff
   5068  2035					      repend
   5069  2036		       ff		      .byte.b	$ff
   5068  2036					      repend
   5069  2037		       ff		      .byte.b	$ff
   5068  2037					      repend
   5069  2038		       ff		      .byte.b	$ff
   5068  2038					      repend
   5069  2039		       ff		      .byte.b	$ff
   5068  2039					      repend
   5069  203a		       ff		      .byte.b	$ff
   5068  203a					      repend
   5069  203b		       ff		      .byte.b	$ff
   5068  203b					      repend
   5069  203c		       ff		      .byte.b	$ff
   5068  203c					      repend
   5069  203d		       ff		      .byte.b	$ff
   5068  203d					      repend
   5069  203e		       ff		      .byte.b	$ff
   5068  203e					      repend
   5069  203f		       ff		      .byte.b	$ff
   5068  203f					      repend
   5069  2040		       ff		      .byte.b	$ff
   5068  2040					      repend
   5069  2041		       ff		      .byte.b	$ff
   5068  2041					      repend
   5069  2042		       ff		      .byte.b	$ff
   5068  2042					      repend
   5069  2043		       ff		      .byte.b	$ff
   5068  2043					      repend
   5069  2044		       ff		      .byte.b	$ff
   5068  2044					      repend
   5069  2045		       ff		      .byte.b	$ff
   5068  2045					      repend
   5069  2046		       ff		      .byte.b	$ff
   5068  2046					      repend
   5069  2047		       ff		      .byte.b	$ff
   5068  2047					      repend
   5069  2048		       ff		      .byte.b	$ff
   5068  2048					      repend
   5069  2049		       ff		      .byte.b	$ff
   5068  2049					      repend
   5069  204a		       ff		      .byte.b	$ff
   5068  204a					      repend
   5069  204b		       ff		      .byte.b	$ff
   5068  204b					      repend
   5069  204c		       ff		      .byte.b	$ff
   5068  204c					      repend
   5069  204d		       ff		      .byte.b	$ff
   5068  204d					      repend
   5069  204e		       ff		      .byte.b	$ff
   5068  204e					      repend
   5069  204f		       ff		      .byte.b	$ff
   5068  204f					      repend
   5069  2050		       ff		      .byte.b	$ff
   5068  2050					      repend
   5069  2051		       ff		      .byte.b	$ff
   5068  2051					      repend
   5069  2052		       ff		      .byte.b	$ff
   5068  2052					      repend
   5069  2053		       ff		      .byte.b	$ff
   5068  2053					      repend
   5069  2054		       ff		      .byte.b	$ff
   5068  2054					      repend
   5069  2055		       ff		      .byte.b	$ff
   5068  2055					      repend
   5069  2056		       ff		      .byte.b	$ff
   5068  2056					      repend
   5069  2057		       ff		      .byte.b	$ff
   5068  2057					      repend
   5069  2058		       ff		      .byte.b	$ff
   5068  2058					      repend
   5069  2059		       ff		      .byte.b	$ff
   5068  2059					      repend
   5069  205a		       ff		      .byte.b	$ff
   5068  205a					      repend
   5069  205b		       ff		      .byte.b	$ff
   5068  205b					      repend
   5069  205c		       ff		      .byte.b	$ff
   5068  205c					      repend
   5069  205d		       ff		      .byte.b	$ff
   5068  205d					      repend
   5069  205e		       ff		      .byte.b	$ff
   5068  205e					      repend
   5069  205f		       ff		      .byte.b	$ff
   5068  205f					      repend
   5069  2060		       ff		      .byte.b	$ff
   5068  2060					      repend
   5069  2061		       ff		      .byte.b	$ff
   5068  2061					      repend
   5069  2062		       ff		      .byte.b	$ff
   5068  2062					      repend
   5069  2063		       ff		      .byte.b	$ff
   5068  2063					      repend
   5069  2064		       ff		      .byte.b	$ff
   5068  2064					      repend
   5069  2065		       ff		      .byte.b	$ff
   5068  2065					      repend
   5069  2066		       ff		      .byte.b	$ff
   5068  2066					      repend
   5069  2067		       ff		      .byte.b	$ff
   5068  2067					      repend
   5069  2068		       ff		      .byte.b	$ff
   5068  2068					      repend
   5069  2069		       ff		      .byte.b	$ff
   5068  2069					      repend
   5069  206a		       ff		      .byte.b	$ff
   5068  206a					      repend
   5069  206b		       ff		      .byte.b	$ff
   5068  206b					      repend
   5069  206c		       ff		      .byte.b	$ff
   5068  206c					      repend
   5069  206d		       ff		      .byte.b	$ff
   5068  206d					      repend
   5069  206e		       ff		      .byte.b	$ff
   5068  206e					      repend
   5069  206f		       ff		      .byte.b	$ff
   5068  206f					      repend
   5069  2070		       ff		      .byte.b	$ff
   5068  2070					      repend
   5069  2071		       ff		      .byte.b	$ff
   5068  2071					      repend
   5069  2072		       ff		      .byte.b	$ff
   5068  2072					      repend
   5069  2073		       ff		      .byte.b	$ff
   5068  2073					      repend
   5069  2074		       ff		      .byte.b	$ff
   5068  2074					      repend
   5069  2075		       ff		      .byte.b	$ff
   5068  2075					      repend
   5069  2076		       ff		      .byte.b	$ff
   5068  2076					      repend
   5069  2077		       ff		      .byte.b	$ff
   5068  2077					      repend
   5069  2078		       ff		      .byte.b	$ff
   5068  2078					      repend
   5069  2079		       ff		      .byte.b	$ff
   5068  2079					      repend
   5069  207a		       ff		      .byte.b	$ff
   5068  207a					      repend
   5069  207b		       ff		      .byte.b	$ff
   5068  207b					      repend
   5069  207c		       ff		      .byte.b	$ff
   5068  207c					      repend
   5069  207d		       ff		      .byte.b	$ff
   5068  207d					      repend
   5069  207e		       ff		      .byte.b	$ff
   5068  207e					      repend
   5069  207f		       ff		      .byte.b	$ff
   5068  207f					      repend
   5069  2080		       ff		      .byte.b	$ff
   5068  2080					      repend
   5069  2081		       ff		      .byte.b	$ff
   5068  2081					      repend
   5069  2082		       ff		      .byte.b	$ff
   5068  2082					      repend
   5069  2083		       ff		      .byte.b	$ff
   5068  2083					      repend
   5069  2084		       ff		      .byte.b	$ff
   5068  2084					      repend
   5069  2085		       ff		      .byte.b	$ff
   5068  2085					      repend
   5069  2086		       ff		      .byte.b	$ff
   5068  2086					      repend
   5069  2087		       ff		      .byte.b	$ff
   5068  2087					      repend
   5069  2088		       ff		      .byte.b	$ff
   5068  2088					      repend
   5069  2089		       ff		      .byte.b	$ff
   5068  2089					      repend
   5069  208a		       ff		      .byte.b	$ff
   5068  208a					      repend
   5069  208b		       ff		      .byte.b	$ff
   5068  208b					      repend
   5069  208c		       ff		      .byte.b	$ff
   5068  208c					      repend
   5069  208d		       ff		      .byte.b	$ff
   5068  208d					      repend
   5069  208e		       ff		      .byte.b	$ff
   5068  208e					      repend
   5069  208f		       ff		      .byte.b	$ff
   5068  208f					      repend
   5069  2090		       ff		      .byte.b	$ff
   5068  2090					      repend
   5069  2091		       ff		      .byte.b	$ff
   5068  2091					      repend
   5069  2092		       ff		      .byte.b	$ff
   5068  2092					      repend
   5069  2093		       ff		      .byte.b	$ff
   5068  2093					      repend
   5069  2094		       ff		      .byte.b	$ff
   5068  2094					      repend
   5069  2095		       ff		      .byte.b	$ff
   5068  2095					      repend
   5069  2096		       ff		      .byte.b	$ff
   5068  2096					      repend
   5069  2097		       ff		      .byte.b	$ff
   5068  2097					      repend
   5069  2098		       ff		      .byte.b	$ff
   5068  2098					      repend
   5069  2099		       ff		      .byte.b	$ff
   5068  2099					      repend
   5069  209a		       ff		      .byte.b	$ff
   5068  209a					      repend
   5069  209b		       ff		      .byte.b	$ff
   5068  209b					      repend
   5069  209c		       ff		      .byte.b	$ff
   5068  209c					      repend
   5069  209d		       ff		      .byte.b	$ff
   5068  209d					      repend
   5069  209e		       ff		      .byte.b	$ff
   5068  209e					      repend
   5069  209f		       ff		      .byte.b	$ff
   5068  209f					      repend
   5069  20a0		       ff		      .byte.b	$ff
   5068  20a0					      repend
   5069  20a1		       ff		      .byte.b	$ff
   5068  20a1					      repend
   5069  20a2		       ff		      .byte.b	$ff
   5068  20a2					      repend
   5069  20a3		       ff		      .byte.b	$ff
   5068  20a3					      repend
   5069  20a4		       ff		      .byte.b	$ff
   5068  20a4					      repend
   5069  20a5		       ff		      .byte.b	$ff
   5068  20a5					      repend
   5069  20a6		       ff		      .byte.b	$ff
   5068  20a6					      repend
   5069  20a7		       ff		      .byte.b	$ff
   5068  20a7					      repend
   5069  20a8		       ff		      .byte.b	$ff
   5068  20a8					      repend
   5069  20a9		       ff		      .byte.b	$ff
   5068  20a9					      repend
   5069  20aa		       ff		      .byte.b	$ff
   5068  20aa					      repend
   5069  20ab		       ff		      .byte.b	$ff
   5068  20ab					      repend
   5069  20ac		       ff		      .byte.b	$ff
   5068  20ac					      repend
   5069  20ad		       ff		      .byte.b	$ff
   5068  20ad					      repend
   5069  20ae		       ff		      .byte.b	$ff
   5068  20ae					      repend
   5069  20af		       ff		      .byte.b	$ff
   5068  20af					      repend
   5069  20b0		       ff		      .byte.b	$ff
   5068  20b0					      repend
   5069  20b1		       ff		      .byte.b	$ff
   5068  20b1					      repend
   5069  20b2		       ff		      .byte.b	$ff
   5068  20b2					      repend
   5069  20b3		       ff		      .byte.b	$ff
   5068  20b3					      repend
   5069  20b4		       ff		      .byte.b	$ff
   5068  20b4					      repend
   5069  20b5		       ff		      .byte.b	$ff
   5068  20b5					      repend
   5069  20b6		       ff		      .byte.b	$ff
   5068  20b6					      repend
   5069  20b7		       ff		      .byte.b	$ff
   5068  20b7					      repend
   5069  20b8		       ff		      .byte.b	$ff
   5068  20b8					      repend
   5069  20b9		       ff		      .byte.b	$ff
   5068  20b9					      repend
   5069  20ba		       ff		      .byte.b	$ff
   5068  20ba					      repend
   5069  20bb		       ff		      .byte.b	$ff
   5068  20bb					      repend
   5069  20bc		       ff		      .byte.b	$ff
   5068  20bc					      repend
   5069  20bd		       ff		      .byte.b	$ff
   5068  20bd					      repend
   5069  20be		       ff		      .byte.b	$ff
   5068  20be					      repend
   5069  20bf		       ff		      .byte.b	$ff
   5068  20bf					      repend
   5069  20c0		       ff		      .byte.b	$ff
   5068  20c0					      repend
   5069  20c1		       ff		      .byte.b	$ff
   5068  20c1					      repend
   5069  20c2		       ff		      .byte.b	$ff
   5068  20c2					      repend
   5069  20c3		       ff		      .byte.b	$ff
   5068  20c3					      repend
   5069  20c4		       ff		      .byte.b	$ff
   5068  20c4					      repend
   5069  20c5		       ff		      .byte.b	$ff
   5068  20c5					      repend
   5069  20c6		       ff		      .byte.b	$ff
   5068  20c6					      repend
   5069  20c7		       ff		      .byte.b	$ff
   5068  20c7					      repend
   5069  20c8		       ff		      .byte.b	$ff
   5068  20c8					      repend
   5069  20c9		       ff		      .byte.b	$ff
   5068  20c9					      repend
   5069  20ca		       ff		      .byte.b	$ff
   5068  20ca					      repend
   5069  20cb		       ff		      .byte.b	$ff
   5068  20cb					      repend
   5069  20cc		       ff		      .byte.b	$ff
   5068  20cc					      repend
   5069  20cd		       ff		      .byte.b	$ff
   5068  20cd					      repend
   5069  20ce		       ff		      .byte.b	$ff
   5068  20ce					      repend
   5069  20cf		       ff		      .byte.b	$ff
   5068  20cf					      repend
   5069  20d0		       ff		      .byte.b	$ff
   5068  20d0					      repend
   5069  20d1		       ff		      .byte.b	$ff
   5068  20d1					      repend
   5069  20d2		       ff		      .byte.b	$ff
   5068  20d2					      repend
   5069  20d3		       ff		      .byte.b	$ff
   5068  20d3					      repend
   5069  20d4		       ff		      .byte.b	$ff
   5068  20d4					      repend
   5069  20d5		       ff		      .byte.b	$ff
   5068  20d5					      repend
   5069  20d6		       ff		      .byte.b	$ff
   5068  20d6					      repend
   5069  20d7		       ff		      .byte.b	$ff
   5068  20d7					      repend
   5069  20d8		       ff		      .byte.b	$ff
   5068  20d8					      repend
   5069  20d9		       ff		      .byte.b	$ff
   5068  20d9					      repend
   5069  20da		       ff		      .byte.b	$ff
   5068  20da					      repend
   5069  20db		       ff		      .byte.b	$ff
   5068  20db					      repend
   5069  20dc		       ff		      .byte.b	$ff
   5068  20dc					      repend
   5069  20dd		       ff		      .byte.b	$ff
   5068  20dd					      repend
   5069  20de		       ff		      .byte.b	$ff
   5068  20de					      repend
   5069  20df		       ff		      .byte.b	$ff
   5068  20df					      repend
   5069  20e0		       ff		      .byte.b	$ff
   5068  20e0					      repend
   5069  20e1		       ff		      .byte.b	$ff
   5068  20e1					      repend
   5069  20e2		       ff		      .byte.b	$ff
   5068  20e2					      repend
   5069  20e3		       ff		      .byte.b	$ff
   5068  20e3					      repend
   5069  20e4		       ff		      .byte.b	$ff
   5068  20e4					      repend
   5069  20e5		       ff		      .byte.b	$ff
   5068  20e5					      repend
   5069  20e6		       ff		      .byte.b	$ff
   5068  20e6					      repend
   5069  20e7		       ff		      .byte.b	$ff
   5068  20e7					      repend
   5069  20e8		       ff		      .byte.b	$ff
   5068  20e8					      repend
   5069  20e9		       ff		      .byte.b	$ff
   5068  20e9					      repend
   5069  20ea		       ff		      .byte.b	$ff
   5068  20ea					      repend
   5069  20eb		       ff		      .byte.b	$ff
   5068  20eb					      repend
   5069  20ec		       ff		      .byte.b	$ff
   5068  20ec					      repend
   5069  20ed		       ff		      .byte.b	$ff
   5068  20ed					      repend
   5069  20ee		       ff		      .byte.b	$ff
   5068  20ee					      repend
   5069  20ef		       ff		      .byte.b	$ff
   5068  20ef					      repend
   5069  20f0		       ff		      .byte.b	$ff
   5068  20f0					      repend
   5069  20f1		       ff		      .byte.b	$ff
   5068  20f1					      repend
   5069  20f2		       ff		      .byte.b	$ff
   5068  20f2					      repend
   5069  20f3		       ff		      .byte.b	$ff
   5068  20f3					      repend
   5069  20f4		       ff		      .byte.b	$ff
   5068  20f4					      repend
   5069  20f5		       ff		      .byte.b	$ff
   5068  20f5					      repend
   5069  20f6		       ff		      .byte.b	$ff
   5068  20f6					      repend
   5069  20f7		       ff		      .byte.b	$ff
   5068  20f7					      repend
   5069  20f8		       ff		      .byte.b	$ff
   5068  20f8					      repend
   5069  20f9		       ff		      .byte.b	$ff
   5068  20f9					      repend
   5069  20fa		       ff		      .byte.b	$ff
   5068  20fa					      repend
   5069  20fb		       ff		      .byte.b	$ff
   5068  20fb					      repend
   5069  20fc		       ff		      .byte.b	$ff
   5068  20fc					      repend
   5069  20fd		       ff		      .byte.b	$ff
   5068  20fd					      repend
   5069  20fe		       ff		      .byte.b	$ff
   5068  20fe					      repend
   5069  20ff		       ff		      .byte.b	$ff
   5070  2100					      repend
   5071  2100				   .
   5072  2100							; 
   5073  2100
   5074  2100				   .L0558		;  asm
   5075  2100
------- FILE titlescreen/asm/titlescreen.asm LEVEL 2 PASS 3
      0  2100					      include	"titlescreen/asm/titlescreen.asm"
      1  2100
------- FILE titlescreen/asm/layoutmacros.asm LEVEL 3 PASS 3
      0  2100					      include	"titlescreen/asm/layoutmacros.asm"
      1  2100
      2  2100							; the macro's used in the "titlescreen_layout.asm" file
      3  2100
      4  2100					      MAC	draw_96x2_1
      5  2100				   mk_96x2_1_on =	1
      6  2100					      jsr	draw_bmp_96x2_1
      7  2100					      ENDM
      8  2100
      9  2100					      MAC	draw_96x2_2
     10  2100				   mk_96x2_2_on =	1
     11  2100					      jsr	draw_bmp_96x2_2
     12  2100					      ENDM
     13  2100
     14  2100					      MAC	draw_96x2_3
     15  2100				   mk_96x2_3_on =	1
     16  2100					      jsr	draw_bmp_96x2_3
     17  2100					      ENDM
     18  2100
     19  2100					      MAC	draw_96x2_4
     20  2100				   mk_96x2_4_on =	1
     21  2100					      jsr	draw_bmp_96x2_4
     22  2100					      ENDM
     23  2100
     24  2100					      MAC	draw_96x2_5
     25  2100				   mk_96x2_5_on =	1
     26  2100					      jsr	draw_bmp_96x2_5
     27  2100					      ENDM
     28  2100
     29  2100					      MAC	draw_96x2_6
     30  2100				   mk_96x2_6_on =	1
     31  2100					      jsr	draw_bmp_96x2_6
     32  2100					      ENDM
     33  2100
     34  2100					      MAC	draw_96x2_7
     35  2100				   mk_96x2_7_on =	1
     36  2100					      jsr	draw_bmp_96x2_7
     37  2100					      ENDM
     38  2100
     39  2100					      MAC	draw_96x2_8
     40  2100				   mk_96x2_8_on =	1
     41  2100					      jsr	draw_bmp_96x2_8
     42  2100					      ENDM
     43  2100
     44  2100					      MAC	draw_48x1_1
     45  2100				   mk_48x1_X_on =	1
     46  2100				   mk_48x1_1_on =	1
     47  2100					      jsr	draw_bmp_48x1_1
     48  2100					      ENDM
     49  2100
     50  2100					      MAC	draw_48x1_2
     51  2100				   mk_48x1_X_on =	1
     52  2100				   mk_48x1_2_on =	1
     53  2100					      jsr	draw_bmp_48x1_2
     54  2100					      ENDM
     55  2100
     56  2100					      MAC	draw_48x1_3
     57  2100				   mk_48x1_X_on =	1
     58  2100				   mk_48x1_3_on =	1
     59  2100					      jsr	draw_bmp_48x1_3
     60  2100					      ENDM
     61  2100
     62  2100					      MAC	draw_48x1_4
     63  2100				   mk_48x1_X_on =	1
     64  2100				   mk_48x1_4_on =	1
     65  2100					      jsr	draw_bmp_48x1_4
     66  2100					      ENDM
     67  2100
     68  2100					      MAC	draw_48x1_5
     69  2100				   mk_48x1_X_on =	1
     70  2100				   mk_48x1_5_on =	1
     71  2100					      jsr	draw_bmp_48x1_5
     72  2100					      ENDM
     73  2100
     74  2100					      MAC	draw_48x1_6
     75  2100				   mk_48x1_X_on =	1
     76  2100				   mk_48x1_6_on =	1
     77  2100					      jsr	draw_bmp_48x1_6
     78  2100					      ENDM
     79  2100
     80  2100					      MAC	draw_48x1_7
     81  2100				   mk_48x1_X_on =	1
     82  2100				   mk_48x1_7_on =	1
     83  2100					      jsr	draw_bmp_48x1_7
     84  2100					      ENDM
     85  2100
     86  2100					      MAC	draw_48x1_8
     87  2100				   mk_48x1_X_on =	1
     88  2100				   mk_48x1_8_on =	1
     89  2100					      jsr	draw_bmp_48x1_8
     90  2100					      ENDM
     91  2100
     92  2100
     93  2100					      MAC	draw_48x2_1
     94  2100				   mk_48x2_X_on =	1
     95  2100				   mk_48x2_1_on =	1
     96  2100					      jsr	draw_bmp_48x2_1
     97  2100					      ENDM
     98  2100
     99  2100					      MAC	draw_48x2_2
    100  2100				   mk_48x2_X_on =	1
    101  2100				   mk_48x2_2_on =	1
    102  2100					      jsr	draw_bmp_48x2_2
    103  2100					      ENDM
    104  2100
    105  2100					      MAC	draw_48x2_3
    106  2100				   mk_48x2_X_on =	1
    107  2100				   mk_48x2_3_on =	1
    108  2100					      jsr	draw_bmp_48x2_3
    109  2100					      ENDM
    110  2100
    111  2100					      MAC	draw_48x2_4
    112  2100				   mk_48x2_X_on =	1
    113  2100				   mk_48x2_4_on =	1
    114  2100					      jsr	draw_bmp_48x2_4
    115  2100					      ENDM
    116  2100
    117  2100					      MAC	draw_48x2_5
    118  2100				   mk_48x2_X_on =	1
    119  2100				   mk_48x2_5_on =	1
    120  2100					      jsr	draw_bmp_48x2_5
    121  2100					      ENDM
    122  2100
    123  2100					      MAC	draw_48x2_6
    124  2100				   mk_48x2_X_on =	1
    125  2100				   mk_48x2_6_on =	1
    126  2100					      jsr	draw_bmp_48x2_6
    127  2100					      ENDM
    128  2100
    129  2100					      MAC	draw_48x2_7
    130  2100				   mk_48x2_X_on =	1
    131  2100				   mk_48x2_7_on =	1
    132  2100					      jsr	draw_bmp_48x2_7
    133  2100					      ENDM
    134  2100
    135  2100					      MAC	draw_48x2_8
    136  2100				   mk_48x2_X_on =	1
    137  2100				   mk_48x2_8_on =	1
    138  2100					      jsr	draw_bmp_48x2_8
    139  2100					      ENDM
    140  2100
    141  2100					      MAC	draw_player
    142  2100				   mk_player_on =	1
    143  2100					      jsr	draw_player_display
    144  2100					      ENDM
    145  2100
    146  2100					      MAC	draw_score
    147  2100				   mk_score_on =	1
    148  2100				   mk_48x1_X_on =	1
    149  2100					      jsr	draw_score_display
    150  2100					      ENDM
    151  2100
    152  2100					      MAC	draw_gameselect
    153  2100				   mk_gameselect_on =	1
    154  2100				   mk_48x1_X_on =	1
    155  2100					      jsr	draw_gameselect_display
    156  2100					      ENDM
    157  2100
    158  2100					      MAC	draw_space
    159  2100					      ldy	#{1}
    160  2100				   .loop
    161  2100					      sta	WSYNC
    162  2100					      dey
    163  2100					      bne	.loop
    164  2100					      ENDM
    165  2100
------- FILE titlescreen/asm/titlescreen.asm
------- FILE titlescreen/asm/dpcfix.asm LEVEL 3 PASS 3
      0  2100					      include	"titlescreen/asm/dpcfix.asm"
      1  2100							; reassign variables that DPC+ doesn't have
      2  2100
      3  2100				  -	      ifnconst	aux2
      4  2100				  -aux2       =	player2x
      5  2100					      endif
      6  2100				  -	      ifnconst	aux4
      7  2100				  -aux4       =	player4x
      8  2100					      endif
      9  2100				  -	      ifnconst	aux5
     10  2100				  -aux5       =	player5x
     11  2100					      endif
     12  2100				  -	      ifnconst	aux6
     13  2100				  -aux6       =	player6x
     14  2100					      endif
     15  2100
     16  2100				  -	      ifnconst	player0pointer
     17  2100				  -player0pointer =	player2y
     18  2100					      endif
     19  2100				  -	      ifnconst	player1pointer
     20  2100				  -player1pointer =	player2height	; to player3height
     21  2100					      endif
     22  2100				  -	      ifnconst	player1color
     23  2100				  -player1color =	player4height	; to player5height
     24  2100					      endif
     25  2100				  -	      ifnconst	scorepointers
     26  2100				  -scorepointers =	player6height	; to NUSIZ8
     27  2100					      endif
------- FILE titlescreen/asm/titlescreen.asm
------- FILE titlescreen/titlescreen_layout.asm LEVEL 3 PASS 3
      0  2100					      include	"titlescreen/titlescreen_layout.asm"
      1  2100
      2  2100							; To use a minikernel, just list it below. They'll be drawn on the screen in
      3  2100							; in the order they were listed.
      4  2100							;
      5  2100							; If a minikernel isn't listed, it won't be compiled into your program, and
      6  2100							; it won't use any rom space.
      7  2100
      8  2100					      MAC	titlescreenlayout
      9  2100					      draw_96x2_1
     10  2100					      draw_gameselect
     11  2100					      draw_48x2_1
     12  2100					      draw_score
     13  2100					      ENDM
     14  2100
     15  2100							; minikernel choices are:
     16  2100							;
     17  2100							; draw_48x1_1, draw_48x1_2, draw_48x1_3
     18  2100							;	The first, second, and third 48-wide single-line bitmap minikernels
     19  2100							;
     20  2100							; draw_48x2_1, draw_48x2_2, draw_48x2_3
     21  2100							;	The first, second, and third 48-wide double-line bitmap minikernels
     22  2100							;
     23  2100							; draw_96x2_1, draw_96x2_2, draw_96x2_3
     24  2100							;	The first, second, and third 96-wide double-line bitmap minikernels
     25  2100							;
     26  2100							; draw_gameselect
     27  2100							;	The game selection display minikernel
     28  2100							;
     29  2100							; draw_score
     30  2100							;	A minikernel that draws the score
     31  2100							;
     32  2100							; draw_space 10
     33  2100							;	A minikernel used to add blank space between other minikernels
------- FILE titlescreen/asm/titlescreen.asm
      5  2100
      6  2100				   .titledrawscreen
      7  2100				   title_eat_overscan
      8  2100							;bB runs in overscan. Wait for the overscan to run out...
      9  2100		       18		      clc
     10  2101		       ad 84 02 	      lda	INTIM
     11  2104		       30 fa		      bmi	title_eat_overscan
     12  2106		       4c 09 b1 	      jmp	title_do_vertical_sync
     13  2109
     14  2109				   title_do_vertical_sync
     15  2109		       a9 02		      lda	#2
     16  210b		       85 02		      sta	WSYNC	;one line with VSYNC
     17  210d		       85 00		      sta	VSYNC	;enable VSYNC
     18  210f		       85 02		      sta	WSYNC	;one line with VSYNC
     19  2111		       85 02		      sta	WSYNC	;one line with VSYNC
     20  2113		       a9 00		      lda	#0
     21  2115		       85 02		      sta	WSYNC	;one line with VSYNC
     22  2117		       85 00		      sta	VSYNC	;turn off VSYNC
     23  2119
     24  2119							;lda #42+128
     25  2119					      ifnconst	vblank_time
     26  2119		       a9 aa		      lda	#42+128
     27  211b				  -	      else
     28  211b				  -	      lda	#vblank_time+128
     29  211b					      endif
     30  211b
     31  211b		       8d 96 02 	      sta	TIM64T
     32  211e
     33  211e		       00 82	   titleframe =	missile0x
     34  211e		       e6 82		      inc	titleframe	; increment the frame counter
     35  2120
     36  2120				  -	      ifconst	.title_vblank
     37  2120				  -	      jsr	.title_vblank
     38  2120					      endif
     39  2120
     40  2120				   title_vblank_loop
     41  2120		       ad 84 02 	      lda	INTIM
     42  2123		       30 fb		      bmi	title_vblank_loop
     43  2125		       a9 00		      lda	#0
     44  2127		       85 02		      sta	WSYNC
     45  2129		       85 01		      sta	VBLANK
     46  212b		       85 1d		      sta	ENAM0
     47  212d		       85 1f		      sta	ENABL
     48  212f
     49  212f				   title_playfield
     50  212f
     51  212f							; ======== BEGIN of the custom kernel!!!!! All of the work is done in the playfield.
     52  212f
     53  212f		       a9 e6		      lda	#230
     54  2131		       8d 96 02 	      sta	TIM64T
     55  2134
     56  2134		       a9 01		      lda	#1
     57  2136		       85 0a		      sta	CTRLPF
     58  2138		       18		      clc
     59  2139
     60  2139		       a9 00		      lda	#0
     61  213b		       85 0b		      sta	REFP0
     62  213d		       85 0c		      sta	REFP1
     63  213f		       85 02		      sta	WSYNC
     64  2141		       ad 7d b1 	      lda	titlescreencolor
     65  2144		       85 09		      sta	COLUBK
     66  2146
      0  2146					      titlescreenlayout
      0  2146					      draw_96x2_1
      1  2146		       00 01	   mk_96x2_1_on =	1
      2  2146		       20 f1 b2 	      jsr	draw_bmp_96x2_1
      0  2149					      draw_gameselect
      1  2149		       00 01	   mk_gameselect_on =	1
      2  2149		       00 01	   mk_48x1_X_on =	1
      3  2149		       20 53 b5 	      jsr	draw_gameselect_display
      0  214c					      draw_48x2_1
      1  214c		       00 01	   mk_48x2_X_on =	1
      2  214c		       00 01	   mk_48x2_1_on =	1
      3  214c		       20 7e b1 	      jsr	draw_bmp_48x2_1
      0  214f					      draw_score
      1  214f		       00 01	   mk_score_on =	1
      2  214f		       00 01	   mk_48x1_X_on =	1
      3  214f		       20 71 b4 	      jsr	draw_score_display
     68  2152
     69  2152		       4c c9 b5 	      jmp	PFWAIT	; kernel is done. Finish off the screen
     70  2155
------- FILE titlescreen/asm/position48.asm LEVEL 3 PASS 3
      0  2155					      include	"titlescreen/asm/position48.asm"
      1  2155
      2  2155				   position48
      3  2155
      4  2155							;postion P0 and P1
      5  2155
      6  2155		       85 02		      sta	WSYNC
      7  2157
      8  2157		       a9 90		      lda	#$90	;2
      9  2159		       85 20		      sta	HMP0	;3
     10  215b		       a9 a0		      lda	#$A0	;2
     11  215d		       85 21		      sta	HMP1	;3
     12  215f
     13  215f		       e6 9c		      inc	temp1
     14  2161		       c6 9c		      dec	temp1
     15  2163		       e6 9c		      inc	temp1
     16  2165		       c6 9c		      dec	temp1
     17  2167		       e6 9c		      inc	temp1
      0  2169					      sleep	2
      1  2169				   .CYCLES    SET	2
      2  2169
      3  2169				  -	      IF	.CYCLES < 2
      4  2169				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  2169				  -	      ERR
      6  2169					      ENDIF
      7  2169
      8  2169				  -	      IF	.CYCLES & 1
      9  2169				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  2169				  -	      nop	0
     11  2169				  -	      ELSE
     12  2169				  -	      bit	VSYNC
     13  2169				  -	      ENDIF
     14  2169				  -.CYCLES    SET	.CYCLES - 3
     15  2169					      ENDIF
     16  2169
     17  2169					      REPEAT	.CYCLES / 2
     18  2169		       ea		      nop
     19  216a					      REPEND
     19  216a		       85 10		      sta	RESP0	;  +3
     20  216c		       85 11		      sta	RESP1	;  +3
     21  216e		       c6 9c		      dec	temp1	;  +5
     22  2170		       e6 9c		      inc	temp1	;  +5
     23  2172		       c6 9c		      dec	temp1	;  +5
     24  2174		       e6 9c		      inc	temp1	;  +5
     25  2176		       c6 9c		      dec	temp1	;  +5
      0  2178					      sleep	3
      1  2178				   .CYCLES    SET	3
      2  2178
      3  2178				  -	      IF	.CYCLES < 2
      4  2178				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  2178				  -	      ERR
      6  2178					      ENDIF
      7  2178
      8  2178					      IF	.CYCLES & 1
      9  2178					      IFNCONST	NO_ILLEGAL_OPCODES
     10  2178		       04 00		      nop	0
     11  217a				  -	      ELSE
     12  217a				  -	      bit	VSYNC
     13  217a					      ENDIF
     14  217a				   .CYCLES    SET	.CYCLES - 3
     15  217a					      ENDIF
     16  217a
     17  217a				  -	      REPEAT	.CYCLES / 2
     18  217a				  -	      nop
     19  217a					      REPEND
     27  217a		       85 2a		      sta	HMOVE	; +76
     28  217c		       60		      RTS
     29  217d
------- FILE titlescreen/asm/titlescreen.asm
------- FILE titlescreen/titlescreen_color.asm LEVEL 3 PASS 3
      0  217d					      include	"titlescreen/titlescreen_color.asm"
      1  217d
      2  217d							; This is where the titlescreen background color gets set.
      3  217d							; You can also do a "dim titlescreencolor=[letter]" in bB
      4  217d							; if you want to change the color on the fly.
      5  217d
      6  217d				  -	      ifnconst	titlescreencolor
      7  217d				  -titlescreencolor
      8  217d					      endif
      9  217d		       00		      .byte.b	$00
     10  217e
------- FILE titlescreen/asm/titlescreen.asm
     73  217e
     74  217e				  -	      ifconst	mk_48x1_1_on
     75  217e				  -	      include	"titlescreen/asm/48x1_1_kernel.asm"
     76  217e					      endif		;mk_48x1_1_on
     77  217e
     78  217e				  -	      ifconst	mk_48x1_2_on
     79  217e				  -	      include	"titlescreen/asm/48x1_2_kernel.asm"
     80  217e					      endif		;mk_48x1_2_on
     81  217e
     82  217e				  -	      ifconst	mk_48x1_3_on
     83  217e				  -	      include	"titlescreen/asm/48x1_3_kernel.asm"
     84  217e					      endif		;mk_48x1_3_on
     85  217e
     86  217e				  -	      ifconst	mk_48x1_4_on
     87  217e				  -	      include	"titlescreen/asm/48x1_4_kernel.asm"
     88  217e					      endif		;mk_48x1_4_on
     89  217e
     90  217e				  -	      ifconst	mk_48x1_5_on
     91  217e				  -	      include	"titlescreen/asm/48x1_5_kernel.asm"
     92  217e					      endif		;mk_48x1_5_on
     93  217e
     94  217e				  -	      ifconst	mk_48x1_6_on
     95  217e				  -	      include	"titlescreen/asm/48x1_6_kernel.asm"
     96  217e					      endif		;mk_48x1_6_on
     97  217e
     98  217e				  -	      ifconst	mk_48x1_7_on
     99  217e				  -	      include	"titlescreen/asm/48x1_7_kernel.asm"
    100  217e					      endif		;mk_48x1_7_on
    101  217e
    102  217e				  -	      ifconst	mk_48x1_8_on
    103  217e				  -	      include	"titlescreen/asm/48x1_8_kernel.asm"
    104  217e					      endif		;mk_48x1_8_on
    105  217e
    106  217e					      ifconst	mk_48x2_1_on
------- FILE titlescreen/asm/48x2_1_kernel.asm LEVEL 3 PASS 3
      0  217e					      include	"titlescreen/asm/48x2_1_kernel.asm"
      1  217e
      2  217e				   draw_bmp_48x2_1
      3  217e
      4  217e		       a9 de		      lda	#<(bmp_48x2_1_colors-1+bmp_48x2_1_height-bmp_48x2_1_window)
      5  2180				  -	      ifconst	bmp_48x2_1_index
      6  2180				  -	      sec
      7  2180				  -	      sbc	bmp_48x2_1_index
      8  2180					      endif
      9  2180		       85 f4		      sta	aux5+0
     10  2182		       a9 b5		      lda	#>(bmp_48x2_1_colors-1+bmp_48x2_1_height-bmp_48x2_1_window)
     11  2184		       85 f5		      sta	aux5+1
     12  2186
     13  2186		       a0 0b		      ldy	#11
     14  2188				   bmp_48x2_1_pointersetup
     15  2188		       b9 bd b1 	      lda	bmp_48x2_1_values,y
     16  218b		       99 96 00 	      sta	scorepointers,y
     17  218e		       88		      dey
     18  218f		       b9 bd b1 	      lda	bmp_48x2_1_values,y
     19  2192				  -	      ifconst	bmp_48x2_1_index
     20  2192				  -	      sec
     21  2192				  -	      sbc	bmp_48x2_1_index
     22  2192					      endif
     23  2192		       99 96 00 	      sta	scorepointers,y
     24  2195		       88		      dey
     25  2196		       10 f0		      bpl	bmp_48x2_1_pointersetup
     26  2198
     27  2198
     28  2198		       a0 04		      ldy	#(bmp_48x2_1_window-1)
     29  219a		       84 f1		      sty	aux2
     30  219c
     31  219c		       c8		      iny
     32  219d		       b1 f4		      lda	(aux5),y
     33  219f		       88		      dey
     34  21a0
     35  21a0		       85 06		      sta	COLUP0	;3
     36  21a2		       85 07		      sta	COLUP1	;3
     37  21a4		       85 2b		      sta	HMCLR	;3
     38  21a6
     39  21a6		       ad 7d b1 	      lda	titlescreencolor
     40  21a9		       85 08		      sta	COLUPF
     41  21ab
     42  21ab					      ifconst	bmp_48x2_1_background
     43  21ab		       ad e6 b5 	      lda	bmp_48x2_1_background
     44  21ae				  -	      else
     45  21ae				  -	      lda	titlescreencolor
     46  21ae					      endif
     47  21ae		       85 f3		      sta	aux4
     48  21b0					      ifconst	bmp_48x2_1_PF1
     49  21b0		       ad e4 b5 	      lda	bmp_48x2_1_PF1
     50  21b3				  -	      else
     51  21b3				  -	      lda	#0
     52  21b3				  -	      nop
     53  21b3					      endif
     54  21b3		       85 0e		      sta	PF1
     55  21b5
     56  21b5					      ifconst	bmp_48x2_1_PF2
     57  21b5		       ad e5 b5 	      lda	bmp_48x2_1_PF2
     58  21b8				  -	      else
     59  21b8				  -	      lda	#0
     60  21b8				  -	      nop
     61  21b8					      endif
     62  21b8		       85 0f		      sta	PF2
     63  21ba
     64  21ba		       4c 46 b2 	      jmp	draw_bmp_48x2_X
     65  21bd
     66  21bd				   bmp_48x2_1_values
     67  21bd		       e7 b5		      .word.w	(bmp_48x2_1_00+#bmp_48x2_1_height-#bmp_48x2_1_window)
     68  21bf		       ed b5		      .word.w	(bmp_48x2_1_01+#bmp_48x2_1_height-#bmp_48x2_1_window)
     69  21c1		       f3 b5		      .word.w	(bmp_48x2_1_02+#bmp_48x2_1_height-#bmp_48x2_1_window)
     70  21c3		       f9 b5		      .word.w	(bmp_48x2_1_03+#bmp_48x2_1_height-#bmp_48x2_1_window)
     71  21c5		       00 b6		      .word.w	(bmp_48x2_1_04+#bmp_48x2_1_height-#bmp_48x2_1_window)
     72  21c7		       06 b6		      .word.w	(bmp_48x2_1_05+#bmp_48x2_1_height-#bmp_48x2_1_window)
     73  21c9
------- FILE titlescreen/asm/titlescreen.asm
    108  21c9					      endif		;mk_48x2_1_on
    109  21c9
    110  21c9				  -	      ifconst	mk_48x2_2_on
    111  21c9				  -	      include	"titlescreen/asm/48x2_2_kernel.asm"
    112  21c9					      endif		;mk_48x2_2_on
    113  21c9
    114  21c9				  -	      ifconst	mk_48x2_3_on
    115  21c9				  -	      include	"titlescreen/asm/48x2_3_kernel.asm"
    116  21c9					      endif		;mk_48x2_3_on
    117  21c9
    118  21c9				  -	      ifconst	mk_48x2_4_on
    119  21c9				  -	      include	"titlescreen/asm/48x2_4_kernel.asm"
    120  21c9					      endif		;mk_48x2_4_on
    121  21c9
    122  21c9				  -	      ifconst	mk_48x2_5_on
    123  21c9				  -	      include	"titlescreen/asm/48x2_5_kernel.asm"
    124  21c9					      endif		;mk_48x2_5_on
    125  21c9
    126  21c9				  -	      ifconst	mk_48x2_6_on
    127  21c9				  -	      include	"titlescreen/asm/48x2_6_kernel.asm"
    128  21c9					      endif		;mk_48x2_6_on
    129  21c9
    130  21c9				  -	      ifconst	mk_48x2_7_on
    131  21c9				  -	      include	"titlescreen/asm/48x2_7_kernel.asm"
    132  21c9					      endif		;mk_48x2_7_on
    133  21c9
    134  21c9				  -	      ifconst	mk_48x2_8_on
    135  21c9				  -	      include	"titlescreen/asm/48x2_8_kernel.asm"
    136  21c9					      endif		;mk_48x2_8_on
    137  21c9
    138  21c9					      ifconst	mk_48x1_X_on
------- FILE titlescreen/asm/48x1_X_kernel.asm LEVEL 3 PASS 3
      0  21c9					      include	"titlescreen/asm/48x1_X_kernel.asm"
      1  21c9				   draw_bmp_48x1_X
      2  21c9
      3  21c9		       a9 03		      lda	#3
      4  21cb		       85 04		      sta	NUSIZ0	;3=Player and Missile are drawn twice 32 clocks apart
      5  21cd		       85 05		      sta	NUSIZ1	;3=Player and Missile are drawn twice 32 clocks apart
      6  21cf
      7  21cf		       ba		      tsx
      8  21d0		       86 f6		      stx	stack1	;save the stack pointer
      9  21d2
     10  21d2		       20 55 b1 	      jsr	position48
     11  21d5
     12  21d5		       a9 03		      lda	#3	;2
     13  21d7		       85 25		      sta	VDELP0	;3
     14  21d9		       85 26		      sta	VDELP1	;3
     15  21db
     16  21db		       a9 01		      lda	#1	;2
     17  21dd		       85 0a		      sta	CTRLPF	;3
     18  21df
     19  21df							;enough cycles have passed for the HMOV, so we can clear HMCLR
     20  21df		       85 2b		      sta	HMCLR
     21  21e1
     22  21e1		       85 02		      sta	WSYNC
     23  21e3
     24  21e3		       e6 9c		      inc	temp1	;5
     25  21e5		       c6 9c		      dec	temp1	;5
     26  21e7		       e6 9c		      inc	temp1	;5
     27  21e9		       c6 9c		      dec	temp1	;5
     28  21eb		       e6 9c		      inc	temp1	;5
     29  21ed		       c6 9c		      dec	temp1	;5
     30  21ef		       e6 9c		      inc	temp1	;5
     31  21f1		       c6 9c		      dec	temp1	;5
     32  21f3		       e6 9c		      inc	temp1	;5
     33  21f5		       c6 9c		      dec	temp1	;5
     34  21f7
      0  21f7					      sleep	5
      1  21f7				   .CYCLES    SET	5
      2  21f7
      3  21f7				  -	      IF	.CYCLES < 2
      4  21f7				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  21f7				  -	      ERR
      6  21f7					      ENDIF
      7  21f7
      8  21f7					      IF	.CYCLES & 1
      9  21f7					      IFNCONST	NO_ILLEGAL_OPCODES
     10  21f7		       04 00		      nop	0
     11  21f9				  -	      ELSE
     12  21f9				  -	      bit	VSYNC
     13  21f9					      ENDIF
     14  21f9				   .CYCLES    SET	.CYCLES - 3
     15  21f9					      ENDIF
     16  21f9
     17  21f9					      REPEAT	.CYCLES / 2
     18  21f9		       ea		      nop
     19  21fa					      REPEND
     36  21fa
     37  21fa		       c8		      iny
     38  21fb
     39  21fb		       4c 00 b2 	      jmp	pf48x1_X_loop_entry
     40  21fe
     41  21fe					      if	>. != >[.+$2a]
     42  2200		       00 00		      align	256
     43  2200					      endif
     44  2200
     45  2200				   pf48x1_X_loop_entry
     46  2200				   pf48x1_X_loop
     47  2200		       88		      dey		;2
     48  2201		       84 f1		      sty	aux2	;3
     49  2203		       b1 96		      lda	(scorepointers+0),y	;5
     50  2205		       85 1b		      sta	GRP0	;3
     51  2207
     52  2207		       b1 98		      lda	(scorepointers+2),y	;5
     53  2209		       85 1c		      sta	GRP1	;3
     54  220b		       b1 9a		      lda	(scorepointers+4),y	;5
     55  220d		       85 1b		      sta	GRP0	;3
     56  220f
      0  220f					      sleep	2	; I could make this indirect, if we want to burn more rom
      1  220f				   .CYCLES    SET	2
      2  220f
      3  220f				  -	      IF	.CYCLES < 2
      4  220f				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  220f				  -	      ERR
      6  220f					      ENDIF
      7  220f
      8  220f				  -	      IF	.CYCLES & 1
      9  220f				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  220f				  -	      nop	0
     11  220f				  -	      ELSE
     12  220f				  -	      bit	VSYNC
     13  220f				  -	      ENDIF
     14  220f				  -.CYCLES    SET	.CYCLES - 3
     15  220f					      ENDIF
     16  220f
     17  220f					      REPEAT	.CYCLES / 2
     18  220f		       ea		      nop
     19  2210					      REPEND
     58  2210		       a5 f3		      lda	aux4	;3
     59  2212		       85 08		      sta	COLUPF	;3 this is a big fat waste...
     60  2214
     61  2214		       b3 a0		      lax	(scorepointers+10),y	;5
     62  2216		       b1 9e		      lda	(scorepointers+8),y	;5
     63  2218		       85 f7		      sta	stack2	;3
     64  221a		       b1 9c		      lda	(scorepointers+6),y	;5
     65  221c		       a4 f7		      ldy	stack2	;3
     66  221e
     67  221e		       85 1c		      sta	GRP1	;3
     68  2220		       84 1b		      sty	GRP0	;3
     69  2222		       86 1c		      stx	GRP1	;3
     70  2224		       84 1b		      sty	GRP0	;3
     71  2226
     72  2226		       a4 f1		      ldy	aux2	;3
     73  2228		       d0 d6		      bne	pf48x1_X_loop	;2/3
     74  222a
     75  222a				   pf48x1_X_codeend
     76  222a							;echo "critical code in 48x1 is ",(pf48x1_X_codeend-pf48x1_X_loop), " bytes long."
     77  222a
     78  222a		       a9 00		      lda	#0
     79  222c		       85 1b		      sta	GRP0
     80  222e		       85 1c		      sta	GRP1
     81  2230		       85 1b		      sta	GRP0
     82  2232		       85 1c		      sta	GRP1
     83  2234		       85 1f		      sta	ENABL
     84  2236		       85 1d		      sta	ENAM0
     85  2238		       85 25		      sta	VDELP0
     86  223a		       85 26		      sta	VDELP1
     87  223c		       85 0d		      sta	PF0
     88  223e		       85 0e		      sta	PF1
     89  2240		       85 0f		      sta	PF2
     90  2242
     91  2242		       a6 f6		      ldx	stack1	;restore the stack pointer
     92  2244		       9a		      txs
     93  2245		       60		      rts
------- FILE titlescreen/asm/titlescreen.asm
    140  2246					      endif		;mk_48x1_X_on
    141  2246
    142  2246					      ifconst	mk_48x2_X_on
------- FILE titlescreen/asm/48x2_X_kernel.asm LEVEL 3 PASS 3
      0  2246					      include	"titlescreen/asm/48x2_X_kernel.asm"
      1  2246				   draw_bmp_48x2_X
      2  2246
      3  2246		       a9 00		      lda	#0
      4  2248		       85 1b		      sta	GRP0
      5  224a		       85 1c		      sta	GRP1
      6  224c
      7  224c		       a9 03		      lda	#3
      8  224e		       85 04		      sta	NUSIZ0	;3=Player and Missile are drawn twice 32 clocks apart
      9  2250		       85 05		      sta	NUSIZ1	;3=Player and Missile are drawn twice 32 clocks apart
     10  2252
     11  2252		       ba		      tsx
     12  2253		       86 f6		      stx	stack1	;save the stack pointer
     13  2255
     14  2255		       20 55 b1 	      jsr	position48
     15  2258
     16  2258		       a9 03		      lda	#3	;2
     17  225a		       85 25		      sta	VDELP0	;3
     18  225c		       85 26		      sta	VDELP1	;3
     19  225e
     20  225e		       a9 01		      lda	#1	;2
     21  2260		       85 0a		      sta	CTRLPF	;3
     22  2262
     23  2262							;enough cycles have passed for the HMOV, so we can clear HMCLR
     24  2262		       85 2b		      sta	HMCLR
     25  2264		       85 02		      sta	WSYNC
     26  2266
     27  2266
     28  2266							;sleep (63)		;63
     29  2266		       e6 9c		      inc	temp1
     30  2268		       c6 9c		      dec	temp1
     31  226a		       e6 9c		      inc	temp1
     32  226c		       c6 9c		      dec	temp1
     33  226e		       e6 9c		      inc	temp1
     34  2270		       c6 9c		      dec	temp1
     35  2272		       e6 9c		      inc	temp1
     36  2274		       c6 9c		      dec	temp1
     37  2276		       e6 9c		      inc	temp1
     38  2278		       c6 9c		      dec	temp1
     39  227a		       e6 9c		      inc	temp1
     40  227c		       c6 9c		      dec	temp1
      0  227e					      sleep	3
      1  227e				   .CYCLES    SET	3
      2  227e
      3  227e				  -	      IF	.CYCLES < 2
      4  227e				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  227e				  -	      ERR
      6  227e					      ENDIF
      7  227e
      8  227e					      IF	.CYCLES & 1
      9  227e					      IFNCONST	NO_ILLEGAL_OPCODES
     10  227e		       04 00		      nop	0
     11  2280				  -	      ELSE
     12  2280				  -	      bit	VSYNC
     13  2280					      ENDIF
     14  2280				   .CYCLES    SET	.CYCLES - 3
     15  2280					      ENDIF
     16  2280
     17  2280				  -	      REPEAT	.CYCLES / 2
     18  2280				  -	      nop
     19  2280					      REPEND
     42  2280
     43  2280		       a5 f3		      lda	aux4	;3
     44  2282		       85 08		      sta	COLUPF	;3
     45  2284
     46  2284		       4c 87 b2 	      jmp	pf48x2_X_loop	;3
     47  2287
     48  2287				  -	      if	>. != >[.+$52]
     49  2287				  -	      align	256
     50  2287					      endif
     51  2287
     52  2287				   pf48x2_X_loop
     53  2287
     54  2287		       b1 96		      lda	(scorepointers+0),y	;5
     55  2289		       85 1b		      sta	GRP0	;3
     56  228b		       b1 98		      lda	(scorepointers+2),y	;5
     57  228d		       85 1c		      sta	GRP1	;3
     58  228f		       b1 9a		      lda	(scorepointers+4),y	;5
     59  2291		       85 1b		      sta	GRP0	;3
     60  2293
     61  2293		       b3 a0		      lax	(scorepointers+10),y	;5
     62  2295		       b1 9e		      lda	(scorepointers+8),y	;5
     63  2297		       85 f7		      sta	stack2	;3
     64  2299		       b1 9c		      lda	(scorepointers+6),y	;5
     65  229b		       a4 f7		      ldy	stack2	;3
     66  229d
     67  229d		       85 1c		      sta	GRP1	;3
     68  229f		       84 1b		      sty	GRP0	;3
     69  22a1		       86 1c		      stx	GRP1	;3
     70  22a3		       84 1b		      sty	GRP0	;3
     71  22a5
     72  22a5		       a4 f1		      ldy	aux2	;3
     73  22a7
     74  22a7		       b1 f4		      lda	(aux5),y	;5
     75  22a9		       85 91		      sta	missile0y	;3
     76  22ab
      0  22ab					      sleep	3
      1  22ab				   .CYCLES    SET	3
      2  22ab
      3  22ab				  -	      IF	.CYCLES < 2
      4  22ab				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  22ab				  -	      ERR
      6  22ab					      ENDIF
      7  22ab
      8  22ab					      IF	.CYCLES & 1
      9  22ab					      IFNCONST	NO_ILLEGAL_OPCODES
     10  22ab		       04 00		      nop	0
     11  22ad				  -	      ELSE
     12  22ad				  -	      bit	VSYNC
     13  22ad					      ENDIF
     14  22ad				   .CYCLES    SET	.CYCLES - 3
     15  22ad					      ENDIF
     16  22ad
     17  22ad				  -	      REPEAT	.CYCLES / 2
     18  22ad				  -	      nop
     19  22ad					      REPEND
     78  22ad
     79  22ad		       c6 f1		      dec	aux2	;5
     80  22af
     81  22af
     82  22af		       b1 96		      lda	(scorepointers+0),y	;5
     83  22b1		       85 1b		      sta	GRP0	;3
     84  22b3		       b1 98		      lda	(scorepointers+2),y	;5
     85  22b5		       85 1c		      sta	GRP1	;3
     86  22b7		       b1 9a		      lda	(scorepointers+4),y	;5
     87  22b9		       85 1b		      sta	GRP0	;3
     88  22bb
     89  22bb		       b3 a0		      lax	(scorepointers+10),y	;5
     90  22bd		       b1 9e		      lda	(scorepointers+8),y	;5
     91  22bf		       85 f7		      sta	stack2	;3
     92  22c1		       b1 9c		      lda	(scorepointers+6),y	;5
     93  22c3		       a4 f7		      ldy	stack2	;3
     94  22c5
     95  22c5		       85 1c		      sta	GRP1	;3
     96  22c7		       84 1b		      sty	GRP0	;3
     97  22c9		       86 1c		      stx	GRP1	;3
     98  22cb		       84 1b		      sty	GRP0	;3
     99  22cd
      0  22cd					      sleep	4
      1  22cd				   .CYCLES    SET	4
      2  22cd
      3  22cd				  -	      IF	.CYCLES < 2
      4  22cd				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  22cd				  -	      ERR
      6  22cd					      ENDIF
      7  22cd
      8  22cd				  -	      IF	.CYCLES & 1
      9  22cd				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  22cd				  -	      nop	0
     11  22cd				  -	      ELSE
     12  22cd				  -	      bit	VSYNC
     13  22cd				  -	      ENDIF
     14  22cd				  -.CYCLES    SET	.CYCLES - 3
     15  22cd					      ENDIF
     16  22cd
     17  22cd					      REPEAT	.CYCLES / 2
     18  22cd		       ea		      nop
     17  22cd					      REPEND
     18  22ce		       ea		      nop
     19  22cf					      REPEND
    101  22cf
    102  22cf		       a5 91		      lda	missile0y
    103  22d1		       85 07		      sta	COLUP1
    104  22d3		       85 06		      sta	COLUP0
    105  22d5
    106  22d5		       a4 f1		      ldy	aux2	;3
    107  22d7		       10 ae		      bpl	pf48x2_X_loop	;2/3
    108  22d9
    109  22d9
    110  22d9				   pf48x2_X_codeend
    111  22d9							;echo "critical code in 48x2 is ",(pf48x2_X_codeend-pf48x2_X_loop), " bytes long."
    112  22d9
    113  22d9		       a9 00		      lda	#0
    114  22db		       85 1b		      sta	GRP0
    115  22dd		       85 1c		      sta	GRP1
    116  22df		       85 1b		      sta	GRP0
    117  22e1		       85 1c		      sta	GRP1
    118  22e3		       85 25		      sta	VDELP0
    119  22e5		       85 26		      sta	VDELP1
    120  22e7		       85 0d		      sta	PF0
    121  22e9		       85 0e		      sta	PF1
    122  22eb		       85 0f		      sta	PF2
    123  22ed
    124  22ed		       a6 f6		      ldx	stack1	;restore the stack pointer
    125  22ef		       9a		      txs
    126  22f0		       60		      rts
------- FILE titlescreen/asm/titlescreen.asm
    144  22f1					      endif		;mk_48x2_X_on
    145  22f1
    146  22f1
    147  22f1					      ifconst	mk_96x2_1_on
------- FILE titlescreen/asm/96x2_1_kernel.asm LEVEL 3 PASS 3
      0  22f1					      include	"titlescreen/asm/96x2_1_kernel.asm"
      1  22f1				   draw_bmp_96x2_1
      2  22f1
      3  22f1				  -	      ifconst	bmp_96x2_1_index
      4  22f1				  -	      lda	#(bmp_96x2_1_height-1)
      5  22f1				  -	      sec
      6  22f1				  -	      sbc	bmp_96x2_1_index
      7  22f1				  -	      tay
      8  22f1				  -	      sbc	#bmp_96x2_1_window
      9  22f1				  -	      sta	temp1
     10  22f1					      else
     11  22f1		       a0 3b		      ldy	#(bmp_96x2_1_window-1)
     12  22f3		       a9 ff		      lda	#255
     13  22f5		       85 9c		      sta	temp1
     14  22f7					      endif
     15  22f7
     16  22f7		       a9 03		      lda	#3
     17  22f9		       85 04		      sta	NUSIZ0	;3=Player and Missile are drawn twice 32 clocks apart
     18  22fb		       85 05		      sta	NUSIZ1	;3=Player and Missile are drawn twice 32 clocks apart
     19  22fd		       a9 00		      lda	#0
     20  22ff
     21  22ff		       b9 0d b6 	      lda	bmp_96x2_1_colors,y	;4
     22  2302				  -	      ifconst	bmp_96x2_1_fade
     23  2302				  -	      and	bmp_96x2_1_fade
     24  2302					      endif
     25  2302		       85 06		      sta	COLUP0	;3
     26  2304		       85 07		      sta	COLUP1	;3
     27  2306		       85 2b		      sta	HMCLR	;3
     28  2308
     29  2308		       a5 82		      lda	titleframe
     30  230a		       29 01		      and	#1
     31  230c		       f0 03		      beq	jmp_pf96x2_1_frame0
     32  230e		       4c b8 b3 	      jmp	pf96x2_1_frame1
     33  2311				   jmp_pf96x2_1_frame0
     34  2311		       4c 14 b3 	      jmp	pf96x2_1_frame0
     35  2314
     36  2314				   pf96x2_1_frame0
     37  2314							;postion P0 and P1
     38  2314		       85 02		      sta	WSYNC
     39  2316		       a9 e0		      lda	#%11100000
     40  2318		       85 20		      sta	HMP0
     41  231a		       a9 10		      lda	#%00010000
     42  231c		       85 21		      sta	HMP1
     43  231e		       85 02		      sta	WSYNC
      0  2320					      sleep	28
      1  2320				   .CYCLES    SET	28
      2  2320
      3  2320				  -	      IF	.CYCLES < 2
      4  2320				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  2320				  -	      ERR
      6  2320					      ENDIF
      7  2320
      8  2320				  -	      IF	.CYCLES & 1
      9  2320				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  2320				  -	      nop	0
     11  2320				  -	      ELSE
     12  2320				  -	      bit	VSYNC
     13  2320				  -	      ENDIF
     14  2320				  -.CYCLES    SET	.CYCLES - 3
     15  2320					      ENDIF
     16  2320
     17  2320					      REPEAT	.CYCLES / 2
     18  2320		       ea		      nop
     17  2320					      REPEND
     18  2321		       ea		      nop
     17  2321					      REPEND
     18  2322		       ea		      nop
     17  2322					      REPEND
     18  2323		       ea		      nop
     17  2323					      REPEND
     18  2324		       ea		      nop
     17  2324					      REPEND
     18  2325		       ea		      nop
     17  2325					      REPEND
     18  2326		       ea		      nop
     17  2326					      REPEND
     18  2327		       ea		      nop
     17  2327					      REPEND
     18  2328		       ea		      nop
     17  2328					      REPEND
     18  2329		       ea		      nop
     17  2329					      REPEND
     18  232a		       ea		      nop
     17  232a					      REPEND
     18  232b		       ea		      nop
     17  232b					      REPEND
     18  232c		       ea		      nop
     17  232c					      REPEND
     18  232d		       ea		      nop
     19  232e					      REPEND
     45  232e		       85 10		      sta	RESP0
      0  2330					      sleep	14
      1  2330				   .CYCLES    SET	14
      2  2330
      3  2330				  -	      IF	.CYCLES < 2
      4  2330				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  2330				  -	      ERR
      6  2330					      ENDIF
      7  2330
      8  2330				  -	      IF	.CYCLES & 1
      9  2330				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  2330				  -	      nop	0
     11  2330				  -	      ELSE
     12  2330				  -	      bit	VSYNC
     13  2330				  -	      ENDIF
     14  2330				  -.CYCLES    SET	.CYCLES - 3
     15  2330					      ENDIF
     16  2330
     17  2330					      REPEAT	.CYCLES / 2
     18  2330		       ea		      nop
     17  2330					      REPEND
     18  2331		       ea		      nop
     17  2331					      REPEND
     18  2332		       ea		      nop
     17  2332					      REPEND
     18  2333		       ea		      nop
     17  2333					      REPEND
     18  2334		       ea		      nop
     17  2334					      REPEND
     18  2335		       ea		      nop
     17  2335					      REPEND
     18  2336		       ea		      nop
     19  2337					      REPEND
     47  2337		       85 11		      sta	RESP1
     48  2339		       85 02		      sta	WSYNC
     49  233b		       85 2a		      sta	HMOVE
     50  233d
     51  233d		       85 02		      sta	WSYNC
     52  233f		       85 2b		      sta	HMCLR
     53  2341		       85 02		      sta	WSYNC
     54  2343
      0  2343					      sleep	4
      1  2343				   .CYCLES    SET	4
      2  2343
      3  2343				  -	      IF	.CYCLES < 2
      4  2343				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  2343				  -	      ERR
      6  2343					      ENDIF
      7  2343
      8  2343				  -	      IF	.CYCLES & 1
      9  2343				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  2343				  -	      nop	0
     11  2343				  -	      ELSE
     12  2343				  -	      bit	VSYNC
     13  2343				  -	      ENDIF
     14  2343				  -.CYCLES    SET	.CYCLES - 3
     15  2343					      ENDIF
     16  2343
     17  2343					      REPEAT	.CYCLES / 2
     18  2343		       ea		      nop
     17  2343					      REPEND
     18  2344		       ea		      nop
     19  2345					      REPEND
     56  2345		       4c 48 b3 	      jmp	pfline_96x2_1_frame0
     57  2348							;align so our branch doesn't unexpectedly cross a page...
     58  2348				  -	      if	>. != >[.+$70]
     59  2348				  -	      align	256
     60  2348					      endif
     61  2348
     62  2348				   pfline_96x2_1_frame0
     63  2348		       a9 80		      lda	#$80	;2
     64  234a		       85 20		      sta	HMP0	;3
     65  234c		       85 21		      sta	HMP1	;3
     66  234e
     67  234e		       b9 b4 b7 	      lda	bmp_96x2_1_06,y	;4
     68  2351		       85 1c		      sta	GRP1	;3
     69  2353
     70  2353		       b9 49 b6 	      lda	bmp_96x2_1_00,y
     71  2356		       85 1b		      sta	GRP0
     72  2358		       b9 c1 b6 	      lda	bmp_96x2_1_02,y
     73  235b		       85 1b		      sta	GRP0
     74  235d		       b9 3c b7 	      lda	bmp_96x2_1_04,y
     75  2360		       85 1b		      sta	GRP0
     76  2362
      0  2362					      sleep	2
      1  2362				   .CYCLES    SET	2
      2  2362
      3  2362				  -	      IF	.CYCLES < 2
      4  2362				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  2362				  -	      ERR
      6  2362					      ENDIF
      7  2362
      8  2362				  -	      IF	.CYCLES & 1
      9  2362				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  2362				  -	      nop	0
     11  2362				  -	      ELSE
     12  2362				  -	      bit	VSYNC
     13  2362				  -	      ENDIF
     14  2362				  -.CYCLES    SET	.CYCLES - 3
     15  2362					      ENDIF
     16  2362
     17  2362					      REPEAT	.CYCLES / 2
     18  2362		       ea		      nop
     19  2363					      REPEND
     78  2363
     79  2363		       b9 3c b8 	      lda	bmp_96x2_1_08,y
     80  2366		       85 1c		      sta	GRP1
     81  2368		       b9 b4 b8 	      lda	bmp_96x2_1_10,y
     82  236b		       85 1c		      sta	GRP1
     83  236d
     84  236d		       b9 85 b6 	      lda	bmp_96x2_1_01,y
     85  2370		       85 1b		      sta	GRP0
     86  2372
      0  2372					      sleep	8
      1  2372				   .CYCLES    SET	8
      2  2372
      3  2372				  -	      IF	.CYCLES < 2
      4  2372				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  2372				  -	      ERR
      6  2372					      ENDIF
      7  2372
      8  2372				  -	      IF	.CYCLES & 1
      9  2372				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  2372				  -	      nop	0
     11  2372				  -	      ELSE
     12  2372				  -	      bit	VSYNC
     13  2372				  -	      ENDIF
     14  2372				  -.CYCLES    SET	.CYCLES - 3
     15  2372					      ENDIF
     16  2372
     17  2372					      REPEAT	.CYCLES / 2
     18  2372		       ea		      nop
     17  2372					      REPEND
     18  2373		       ea		      nop
     17  2373					      REPEND
     18  2374		       ea		      nop
     17  2374					      REPEND
     18  2375		       ea		      nop
     19  2376					      REPEND
     88  2376
     89  2376							;sta WSYNC	;=0
     90  2376		       85 2a		      sta	HMOVE	;3 - NORMAL HMOVE
     91  2378
     92  2378		       b9 0c b6 	      lda	bmp_96x2_1_colors-1,y	;4 - get the title color early and store it for later
     93  237b				  -	      ifconst	bmp_96x2_1_fade
     94  237b				  -	      and	bmp_96x2_1_fade
     95  237b					      else
      0  237b					      sleep	3
      1  237b				   .CYCLES    SET	3
      2  237b
      3  237b				  -	      IF	.CYCLES < 2
      4  237b				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  237b				  -	      ERR
      6  237b					      ENDIF
      7  237b
      8  237b					      IF	.CYCLES & 1
      9  237b					      IFNCONST	NO_ILLEGAL_OPCODES
     10  237b		       04 00		      nop	0
     11  237d				  -	      ELSE
     12  237d				  -	      bit	VSYNC
     13  237d					      ENDIF
     14  237d				   .CYCLES    SET	.CYCLES - 3
     15  237d					      ENDIF
     16  237d
     17  237d				  -	      REPEAT	.CYCLES / 2
     18  237d				  -	      nop
     19  237d					      REPEND
     97  237d					      endif
     98  237d		       aa		      tax
     99  237e
    100  237e		       a9 00		      lda	#0	;2
    101  2380		       85 20		      sta	HMP0	;3
    102  2382		       85 21		      sta	HMP1	;3
    103  2384
      0  2384					      sleep	7
      1  2384				   .CYCLES    SET	7
      2  2384
      3  2384				  -	      IF	.CYCLES < 2
      4  2384				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  2384				  -	      ERR
      6  2384					      ENDIF
      7  2384
      8  2384					      IF	.CYCLES & 1
      9  2384					      IFNCONST	NO_ILLEGAL_OPCODES
     10  2384		       04 00		      nop	0
     11  2386				  -	      ELSE
     12  2386				  -	      bit	VSYNC
     13  2386					      ENDIF
     14  2386				   .CYCLES    SET	.CYCLES - 3
     15  2386					      ENDIF
     16  2386
     17  2386					      REPEAT	.CYCLES / 2
     18  2386		       ea		      nop
     17  2386					      REPEND
     18  2387		       ea		      nop
     19  2388					      REPEND
    105  2388
    106  2388		       b9 00 b8 	      lda	bmp_96x2_1_07,y
    107  238b		       85 1c		      sta	GRP1
    108  238d
    109  238d		       b9 00 b7 	      lda	bmp_96x2_1_03,y	;5
    110  2390		       85 1b		      sta	GRP0	;3 =  8
    111  2392		       b9 78 b7 	      lda	bmp_96x2_1_05,y	;5
    112  2395		       85 1b		      sta	GRP0	;3 =  8
    113  2397
      0  2397					      sleep	2
      1  2397				   .CYCLES    SET	2
      2  2397
      3  2397				  -	      IF	.CYCLES < 2
      4  2397				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  2397				  -	      ERR
      6  2397					      ENDIF
      7  2397
      8  2397				  -	      IF	.CYCLES & 1
      9  2397				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  2397				  -	      nop	0
     11  2397				  -	      ELSE
     12  2397				  -	      bit	VSYNC
     13  2397				  -	      ENDIF
     14  2397				  -.CYCLES    SET	.CYCLES - 3
     15  2397					      ENDIF
     16  2397
     17  2397					      REPEAT	.CYCLES / 2
     18  2397		       ea		      nop
     19  2398					      REPEND
    115  2398
    116  2398		       b9 78 b8 	      lda	bmp_96x2_1_09,y	;5
    117  239b		       85 1c		      sta	GRP1	;3 =  8
    118  239d		       b9 00 b9 	      lda	bmp_96x2_1_11,y	;5
    119  23a0		       85 1c		      sta	GRP1	;3 =  8
    120  23a2
      0  23a2					      sleep	2
      1  23a2				   .CYCLES    SET	2
      2  23a2
      3  23a2				  -	      IF	.CYCLES < 2
      4  23a2				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  23a2				  -	      ERR
      6  23a2					      ENDIF
      7  23a2
      8  23a2				  -	      IF	.CYCLES & 1
      9  23a2				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  23a2				  -	      nop	0
     11  23a2				  -	      ELSE
     12  23a2				  -	      bit	VSYNC
     13  23a2				  -	      ENDIF
     14  23a2				  -.CYCLES    SET	.CYCLES - 3
     15  23a2					      ENDIF
     16  23a2
     17  23a2					      REPEAT	.CYCLES / 2
     18  23a2		       ea		      nop
     19  23a3					      REPEND
    122  23a3		       86 07		      stx	COLUP1
    123  23a5		       86 06		      stx	COLUP0
    124  23a7
    125  23a7		       85 2a		      sta	HMOVE	;3 - CYCLE 74 HMOVE
      0  23a9					      sleep	2
      1  23a9				   .CYCLES    SET	2
      2  23a9
      3  23a9				  -	      IF	.CYCLES < 2
      4  23a9				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  23a9				  -	      ERR
      6  23a9					      ENDIF
      7  23a9
      8  23a9				  -	      IF	.CYCLES & 1
      9  23a9				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  23a9				  -	      nop	0
     11  23a9				  -	      ELSE
     12  23a9				  -	      bit	VSYNC
     13  23a9				  -	      ENDIF
     14  23a9				  -.CYCLES    SET	.CYCLES - 3
     15  23a9					      ENDIF
     16  23a9
     17  23a9					      REPEAT	.CYCLES / 2
     18  23a9		       ea		      nop
     19  23aa					      REPEND
    127  23aa		       88		      dey
    128  23ab
    129  23ab		       c4 9c		      cpy	temp1	;3
    130  23ad		       d0 99		      bne	pfline_96x2_1_frame0	;2/3
    131  23af
    132  23af				   pf96x2_1_0codeend
    133  23af							;echo "critical code #1 in 96x2_1 is ",(pf96x2_1_0codeend-pfline_96x2_1_frame0), " bytes long."
    134  23af
    135  23af		       a9 00		      lda	#0
    136  23b1		       85 1b		      sta	GRP0
    137  23b3		       85 1c		      sta	GRP1
    138  23b5		       4c 6e b4 	      jmp	pfdone_96x2_1
    139  23b8
    140  23b8
    141  23b8				   pf96x2_1_frame1
    142  23b8
    143  23b8							;postion P0 and P1
    144  23b8		       85 02		      sta	WSYNC
    145  23ba		       a9 20		      lda	#%00100000
    146  23bc		       85 20		      sta	HMP0
    147  23be		       a9 00		      lda	#0
    148  23c0		       a9 f0		      lda	#%11110000
    149  23c2		       85 21		      sta	HMP1
    150  23c4		       85 02		      sta	WSYNC
      0  23c6					      sleep	32
      1  23c6				   .CYCLES    SET	32
      2  23c6
      3  23c6				  -	      IF	.CYCLES < 2
      4  23c6				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  23c6				  -	      ERR
      6  23c6					      ENDIF
      7  23c6
      8  23c6				  -	      IF	.CYCLES & 1
      9  23c6				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  23c6				  -	      nop	0
     11  23c6				  -	      ELSE
     12  23c6				  -	      bit	VSYNC
     13  23c6				  -	      ENDIF
     14  23c6				  -.CYCLES    SET	.CYCLES - 3
     15  23c6					      ENDIF
     16  23c6
     17  23c6					      REPEAT	.CYCLES / 2
     18  23c6		       ea		      nop
     17  23c6					      REPEND
     18  23c7		       ea		      nop
     17  23c7					      REPEND
     18  23c8		       ea		      nop
     17  23c8					      REPEND
     18  23c9		       ea		      nop
     17  23c9					      REPEND
     18  23ca		       ea		      nop
     17  23ca					      REPEND
     18  23cb		       ea		      nop
     17  23cb					      REPEND
     18  23cc		       ea		      nop
     17  23cc					      REPEND
     18  23cd		       ea		      nop
     17  23cd					      REPEND
     18  23ce		       ea		      nop
     17  23ce					      REPEND
     18  23cf		       ea		      nop
     17  23cf					      REPEND
     18  23d0		       ea		      nop
     17  23d0					      REPEND
     18  23d1		       ea		      nop
     17  23d1					      REPEND
     18  23d2		       ea		      nop
     17  23d2					      REPEND
     18  23d3		       ea		      nop
     17  23d3					      REPEND
     18  23d4		       ea		      nop
     17  23d4					      REPEND
     18  23d5		       ea		      nop
     19  23d6					      REPEND
    152  23d6		       85 10		      sta	RESP0
      0  23d8					      sleep	12
      1  23d8				   .CYCLES    SET	12
      2  23d8
      3  23d8				  -	      IF	.CYCLES < 2
      4  23d8				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  23d8				  -	      ERR
      6  23d8					      ENDIF
      7  23d8
      8  23d8				  -	      IF	.CYCLES & 1
      9  23d8				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  23d8				  -	      nop	0
     11  23d8				  -	      ELSE
     12  23d8				  -	      bit	VSYNC
     13  23d8				  -	      ENDIF
     14  23d8				  -.CYCLES    SET	.CYCLES - 3
     15  23d8					      ENDIF
     16  23d8
     17  23d8					      REPEAT	.CYCLES / 2
     18  23d8		       ea		      nop
     17  23d8					      REPEND
     18  23d9		       ea		      nop
     17  23d9					      REPEND
     18  23da		       ea		      nop
     17  23da					      REPEND
     18  23db		       ea		      nop
     17  23db					      REPEND
     18  23dc		       ea		      nop
     17  23dc					      REPEND
     18  23dd		       ea		      nop
     19  23de					      REPEND
    154  23de		       85 11		      sta	RESP1
    155  23e0		       85 02		      sta	WSYNC
    156  23e2		       85 2a		      sta	HMOVE
    157  23e4
    158  23e4		       85 02		      sta	WSYNC
    159  23e6		       85 2b		      sta	HMCLR
    160  23e8
    161  23e8
    162  23e8
    163  23e8		       85 02		      sta	WSYNC
      0  23ea					      sleep	3
      1  23ea				   .CYCLES    SET	3
      2  23ea
      3  23ea				  -	      IF	.CYCLES < 2
      4  23ea				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  23ea				  -	      ERR
      6  23ea					      ENDIF
      7  23ea
      8  23ea					      IF	.CYCLES & 1
      9  23ea					      IFNCONST	NO_ILLEGAL_OPCODES
     10  23ea		       04 00		      nop	0
     11  23ec				  -	      ELSE
     12  23ec				  -	      bit	VSYNC
     13  23ec					      ENDIF
     14  23ec				   .CYCLES    SET	.CYCLES - 3
     15  23ec					      ENDIF
     16  23ec
     17  23ec				  -	      REPEAT	.CYCLES / 2
     18  23ec				  -	      nop
     19  23ec					      REPEND
    165  23ec		       4c 00 b4 	      jmp	pfline_96x2_1_frame1
    166  23ef
    167  23ef							;align so our branch doesn't unexpectedly cross a page...
    168  23ef					      if	>. != >[.+$70]
    169  2400		       00 00 00 00*	      align	256
    170  2400					      endif
    171  2400
    172  2400				   pfline_96x2_1_frame1
    173  2400
    174  2400		       85 2a		      sta	HMOVE
    175  2402
    176  2402		       b9 00 b8 	      lda	bmp_96x2_1_07,y	;4
    177  2405		       85 1c		      sta	GRP1	;3
    178  2407
    179  2407		       a9 00		      lda	#$0	;2
    180  2409		       85 20		      sta	HMP0	;3
    181  240b		       85 21		      sta	HMP1	;3
    182  240d
    183  240d		       b9 85 b6 	      lda	bmp_96x2_1_01,y
    184  2410		       8d 1b 00 	      sta.w	GRP0
    185  2413		       b9 00 b7 	      lda	bmp_96x2_1_03,y
    186  2416		       85 1b		      sta	GRP0
    187  2418		       b9 78 b7 	      lda	bmp_96x2_1_05,y
    188  241b		       85 1b		      sta	GRP0
    189  241d
      0  241d					      sleep	2
      1  241d				   .CYCLES    SET	2
      2  241d
      3  241d				  -	      IF	.CYCLES < 2
      4  241d				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  241d				  -	      ERR
      6  241d					      ENDIF
      7  241d
      8  241d				  -	      IF	.CYCLES & 1
      9  241d				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  241d				  -	      nop	0
     11  241d				  -	      ELSE
     12  241d				  -	      bit	VSYNC
     13  241d				  -	      ENDIF
     14  241d				  -.CYCLES    SET	.CYCLES - 3
     15  241d					      ENDIF
     16  241d
     17  241d					      REPEAT	.CYCLES / 2
     18  241d		       ea		      nop
     19  241e					      REPEND
    191  241e
    192  241e		       b9 78 b8 	      lda	bmp_96x2_1_09,y
    193  2421		       85 1c		      sta	GRP1
    194  2423		       b9 00 b9 	      lda	bmp_96x2_1_11,y
    195  2426		       85 1c		      sta	GRP1
    196  2428
    197  2428		       b9 49 b6 	      lda	bmp_96x2_1_00,y
    198  242b		       85 1b		      sta	GRP0
    199  242d
    200  242d		       8d 2a 00 	      sta.w	HMOVE	;3 - cycle 74
    201  2430
    202  2430							;sta WSYNC	;=0 -----------------------------------------
    203  2430
    204  2430		       b9 b4 b7 	      lda	bmp_96x2_1_06,y
    205  2433		       85 1c		      sta	GRP1
    206  2435
      0  2435					      sleep	8
      1  2435				   .CYCLES    SET	8
      2  2435
      3  2435				  -	      IF	.CYCLES < 2
      4  2435				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  2435				  -	      ERR
      6  2435					      ENDIF
      7  2435
      8  2435				  -	      IF	.CYCLES & 1
      9  2435				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  2435				  -	      nop	0
     11  2435				  -	      ELSE
     12  2435				  -	      bit	VSYNC
     13  2435				  -	      ENDIF
     14  2435				  -.CYCLES    SET	.CYCLES - 3
     15  2435					      ENDIF
     16  2435
     17  2435					      REPEAT	.CYCLES / 2
     18  2435		       ea		      nop
     17  2435					      REPEND
     18  2436		       ea		      nop
     17  2436					      REPEND
     18  2437		       ea		      nop
     17  2437					      REPEND
     18  2438		       ea		      nop
     19  2439					      REPEND
    208  2439
    209  2439		       b9 0c b6 	      lda	bmp_96x2_1_colors-1,y	;get the title color early and store it for later
    210  243c		       aa		      tax		;2
    211  243d
      0  243d					      sleep	3
      1  243d				   .CYCLES    SET	3
      2  243d
      3  243d				  -	      IF	.CYCLES < 2
      4  243d				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  243d				  -	      ERR
      6  243d					      ENDIF
      7  243d
      8  243d					      IF	.CYCLES & 1
      9  243d					      IFNCONST	NO_ILLEGAL_OPCODES
     10  243d		       04 00		      nop	0
     11  243f				  -	      ELSE
     12  243f				  -	      bit	VSYNC
     13  243f					      ENDIF
     14  243f				   .CYCLES    SET	.CYCLES - 3
     15  243f					      ENDIF
     16  243f
     17  243f				  -	      REPEAT	.CYCLES / 2
     18  243f				  -	      nop
     19  243f					      REPEND
    213  243f
    214  243f		       a9 80		      lda	#$80	;2
    215  2441		       85 20		      sta	HMP0	;3
    216  2443		       85 21		      sta	HMP1	;3
    217  2445
    218  2445
    219  2445		       b9 c1 b6 	      lda	bmp_96x2_1_02,y	;5
    220  2448		       85 1b		      sta	GRP0	;3 =  8
    221  244a
    222  244a		       b9 3c b7 	      lda	bmp_96x2_1_04,y	;5
    223  244d		       85 1b		      sta	GRP0	;3 =  8
    224  244f
      0  244f					      sleep	2
      1  244f				   .CYCLES    SET	2
      2  244f
      3  244f				  -	      IF	.CYCLES < 2
      4  244f				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  244f				  -	      ERR
      6  244f					      ENDIF
      7  244f
      8  244f				  -	      IF	.CYCLES & 1
      9  244f				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  244f				  -	      nop	0
     11  244f				  -	      ELSE
     12  244f				  -	      bit	VSYNC
     13  244f				  -	      ENDIF
     14  244f				  -.CYCLES    SET	.CYCLES - 3
     15  244f					      ENDIF
     16  244f
     17  244f					      REPEAT	.CYCLES / 2
     18  244f		       ea		      nop
     19  2450					      REPEND
    226  2450
    227  2450		       b9 3c b8 	      lda	bmp_96x2_1_08,y	;5
    228  2453		       85 1c		      sta	GRP1	;3 =  8
    229  2455
    230  2455		       b9 b4 b8 	      lda	bmp_96x2_1_10,y	;5
    231  2458		       85 1c		      sta	GRP1	;3 =  8
    232  245a
      0  245a					      sleep	4
      1  245a				   .CYCLES    SET	4
      2  245a
      3  245a				  -	      IF	.CYCLES < 2
      4  245a				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  245a				  -	      ERR
      6  245a					      ENDIF
      7  245a
      8  245a				  -	      IF	.CYCLES & 1
      9  245a				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  245a				  -	      nop	0
     11  245a				  -	      ELSE
     12  245a				  -	      bit	VSYNC
     13  245a				  -	      ENDIF
     14  245a				  -.CYCLES    SET	.CYCLES - 3
     15  245a					      ENDIF
     16  245a
     17  245a					      REPEAT	.CYCLES / 2
     18  245a		       ea		      nop
     17  245a					      REPEND
     18  245b		       ea		      nop
     19  245c					      REPEND
    234  245c
    235  245c		       88		      dey
    236  245d
    237  245d		       8a		      txa
    238  245e				  -	      ifconst	bmp_96x2_1_fade
    239  245e				  -	      and	bmp_96x2_1_fade
    240  245e					      else
      0  245e					      sleep	3
      1  245e				   .CYCLES    SET	3
      2  245e
      3  245e				  -	      IF	.CYCLES < 2
      4  245e				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  245e				  -	      ERR
      6  245e					      ENDIF
      7  245e
      8  245e					      IF	.CYCLES & 1
      9  245e					      IFNCONST	NO_ILLEGAL_OPCODES
     10  245e		       04 00		      nop	0
     11  2460				  -	      ELSE
     12  2460				  -	      bit	VSYNC
     13  2460					      ENDIF
     14  2460				   .CYCLES    SET	.CYCLES - 3
     15  2460					      ENDIF
     16  2460
     17  2460				  -	      REPEAT	.CYCLES / 2
     18  2460				  -	      nop
     19  2460					      REPEND
    242  2460					      endif
    243  2460		       85 07		      sta	COLUP1	;3
    244  2462		       85 06		      sta	COLUP0	;3
    245  2464
    246  2464		       c4 9c		      cpy	temp1	;2
    247  2466		       d0 98		      bne	pfline_96x2_1_frame1	;2/3
    248  2468
    249  2468				   pf96x2_1_1codeend
    250  2468							;echo "critical code #2 in 96x2_1 is ",(pf96x2_1_1codeend-pfline_96x2_1_frame1), " bytes long."
    251  2468
    252  2468		       a9 00		      lda	#0
    253  246a		       85 1b		      sta	GRP0
    254  246c		       85 1c		      sta	GRP1
    255  246e
    256  246e				   pfdone_96x2_1
    257  246e		       85 02		      sta	WSYNC	; debug
    258  2470
    259  2470		       60		      rts
------- FILE titlescreen/asm/titlescreen.asm
    149  2471					      endif		;mk_96x2_1_on
    150  2471
    151  2471				  -	      ifconst	mk_96x2_2_on
    152  2471				  -	      include	"titlescreen/asm/96x2_2_kernel.asm"
    153  2471					      endif		;mk_96x2_2_on
    154  2471
    155  2471				  -	      ifconst	mk_96x2_3_on
    156  2471				  -	      include	"titlescreen/asm/96x2_3_kernel.asm"
    157  2471					      endif		;mk_96x2_3_on
    158  2471
    159  2471				  -	      ifconst	mk_96x2_4_on
    160  2471				  -	      include	"titlescreen/asm/96x2_4_kernel.asm"
    161  2471					      endif		;mk_96x2_4_on
    162  2471
    163  2471				  -	      ifconst	mk_96x2_5_on
    164  2471				  -	      include	"titlescreen/asm/96x2_5_kernel.asm"
    165  2471					      endif		;mk_96x2_5_on
    166  2471
    167  2471				  -	      ifconst	mk_96x2_6_on
    168  2471				  -	      include	"titlescreen/asm/96x2_6_kernel.asm"
    169  2471					      endif		;mk_96x2_6_on
    170  2471
    171  2471				  -	      ifconst	mk_96x2_7_on
    172  2471				  -	      include	"titlescreen/asm/96x2_7_kernel.asm"
    173  2471					      endif		;mk_96x2_7_on
    174  2471
    175  2471				  -	      ifconst	mk_96x2_8_on
    176  2471				  -	      include	"titlescreen/asm/96x2_8_kernel.asm"
    177  2471					      endif		;mk_96x2_8_on
    178  2471
    179  2471					      ifconst	mk_score_on
------- FILE titlescreen/asm/score_kernel.asm LEVEL 3 PASS 3
      0  2471					      include	"titlescreen/asm/score_kernel.asm"
      1  2471							; The batari Basic score kernel
      2  2471							; This minikernel is not under the same license as the rest of the
      3  2471							; titlescreen code. Refer to the bB license before you use this in
      4  2471							; a non-bB program.
      5  2471
      6  2471				   draw_score_display
      7  2471
      8  2471		       a7 93		      lax	score+0
      9  2473		       20 43 b5 	      jsr	miniscorepointerset
     10  2476		       84 9e		      sty	scorepointers+8
     11  2478		       86 96		      stx	scorepointers+0
     12  247a		       a7 94		      lax	score+1
     13  247c		       20 43 b5 	      jsr	miniscorepointerset
     14  247f		       84 9a		      sty	scorepointers+4
     15  2481		       86 9c		      stx	scorepointers+6
     16  2483		       a7 95		      lax	score+2
     17  2485		       20 43 b5 	      jsr	miniscorepointerset
     18  2488		       84 a0		      sty	scorepointers+10
     19  248a		       86 98		      stx	scorepointers+2
     20  248c
     21  248c		       85 2b		      sta	HMCLR
     22  248e		       ba		      tsx
     23  248f		       86 f6		      stx	stack1
     24  2491							;ldx #$20
     25  2491		       a2 60		      ldx	#$60
     26  2493		       86 20		      stx	HMP0
     27  2495
     28  2495		       a2 00		      ldx	#0
     29  2497		       85 02		      sta	WSYNC	;   0
     30  2499		       86 1b		      STx	GRP0	; 3 3
     31  249b		       86 1c		      STx	GRP1	; 3 6 seems to be needed because of vdel
     32  249d
      0  249d					      sleep	7	; 7 13
      1  249d				   .CYCLES    SET	7
      2  249d
      3  249d				  -	      IF	.CYCLES < 2
      4  249d				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  249d				  -	      ERR
      6  249d					      ENDIF
      7  249d
      8  249d					      IF	.CYCLES & 1
      9  249d					      IFNCONST	NO_ILLEGAL_OPCODES
     10  249d		       04 00		      nop	0
     11  249f				  -	      ELSE
     12  249f				  -	      bit	VSYNC
     13  249f					      ENDIF
     14  249f				   .CYCLES    SET	.CYCLES - 3
     15  249f					      ENDIF
     16  249f
     17  249f					      REPEAT	.CYCLES / 2
     18  249f		       ea		      nop
     17  249f					      REPEND
     18  24a0		       ea		      nop
     19  24a1					      REPEND
     34  24a1
     35  24a1		       a9 b9		      lda	#>miniscoretable	; 2 15
     36  24a3		       95 97		      sta	scorepointers+1,x	; 4 19
     37  24a5		       95 99		      sta	scorepointers+3,x	; 4 23
     38  24a7		       95 9b		      sta	scorepointers+5,x	; 4 27
     39  24a9		       95 9d		      sta	scorepointers+7,x	; 4 31
     40  24ab		       95 9f		      sta	scorepointers+9,x	; 4 35
     41  24ad		       95 a1		      sta	scorepointers+11,x	; 4 39
     42  24af
     43  24af		       a0 07		      LDY	#7	; 2 41
     44  24b1		       85 10		      STA	RESP0	; 3 44
     45  24b3		       85 11		      STA	RESP1	; 3 47
     46  24b5
     47  24b5		       a9 03		      LDA	#$03	; 2 49
     48  24b7		       85 04		      STA	NUSIZ0	; 3 52
     49  24b9		       95 05		      STA	NUSIZ1,x	; 4 56
     50  24bb		       85 25		      STA	VDELP0	; 3 59
     51  24bd		       85 26		      STA	VDELP1	; 3 62
     52  24bf							;LDA #$30		; 2 64
     53  24bf		       a9 70		      LDA	#$70	; 2 64
     54  24c1		       85 21		      STA	HMP1	; 3 67
     55  24c3		       a5 a3		      LDA	scorecolor	; 3 70
     56  24c5		       85 2a		      STA	HMOVE	; cycle 73 ?
     57  24c7				  -	      ifconst	score_kernel_fade
     58  24c7				  -	      and	score_kernel_fade
     59  24c7					      endif
     60  24c7
     61  24c7		       85 06		      STA	COLUP0
     62  24c9		       85 07		      STA	COLUP1
     63  24cb				  -	      ifconst	scorefade
     64  24cb				  -	      STA	stack2	; scorefade
     65  24cb					      endif
     66  24cb		       b1 96		      lda	(scorepointers),y
     67  24cd		       85 1b		      sta	GRP0
     68  24cf		       b1 9e		      lda	(scorepointers+8),y
     69  24d1		       85 02		      sta	WSYNC
      0  24d3					      sleep	2
      1  24d3				   .CYCLES    SET	2
      2  24d3
      3  24d3				  -	      IF	.CYCLES < 2
      4  24d3				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  24d3				  -	      ERR
      6  24d3					      ENDIF
      7  24d3
      8  24d3				  -	      IF	.CYCLES & 1
      9  24d3				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  24d3				  -	      nop	0
     11  24d3				  -	      ELSE
     12  24d3				  -	      bit	VSYNC
     13  24d3				  -	      ENDIF
     14  24d3				  -.CYCLES    SET	.CYCLES - 3
     15  24d3					      ENDIF
     16  24d3
     17  24d3					      REPEAT	.CYCLES / 2
     18  24d3		       ea		      nop
     19  24d4					      REPEND
     71  24d4		       4c 0b b5 	      jmp	beginscoreloop
     72  24d7
     73  24d7					      if	((<*)>$28)
     74  2500		       00 00 00 00*	      align	256	; kludge that potentially wastes space!  should be fixed!
     75  2500					      endif
     76  2500
     77  2500				   scoreloop2
     78  2500				  -	      ifconst	scorefade
     79  2500				  -	      lda	stack2
     80  2500				  -	      sta	COLUP0
     81  2500				  -	      sta	COLUP1
     82  2500					      else
      0  2500					      sleep	9
      1  2500				   .CYCLES    SET	9
      2  2500
      3  2500				  -	      IF	.CYCLES < 2
      4  2500				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  2500				  -	      ERR
      6  2500					      ENDIF
      7  2500
      8  2500					      IF	.CYCLES & 1
      9  2500					      IFNCONST	NO_ILLEGAL_OPCODES
     10  2500		       04 00		      nop	0
     11  2502				  -	      ELSE
     12  2502				  -	      bit	VSYNC
     13  2502					      ENDIF
     14  2502				   .CYCLES    SET	.CYCLES - 3
     15  2502					      ENDIF
     16  2502
     17  2502					      REPEAT	.CYCLES / 2
     18  2502		       ea		      nop
     17  2502					      REPEND
     18  2503		       ea		      nop
     17  2503					      REPEND
     18  2504		       ea		      nop
     19  2505					      REPEND
     84  2505					      endif
     85  2505		       b1 96		      lda	(scorepointers),y	;+5  68  204
     86  2507		       85 1b		      sta	GRP0	;+3  71  213	   D1	  --	  --	 --
     87  2509		       b1 9e		      lda	(scorepointers+$8),y	;+5   5   15
     88  250b							; cycle 0
     89  250b				   beginscoreloop
     90  250b		       85 1c		      sta	GRP1	;+3   8   24	   D1	  D1	  D2	 --
     91  250d		       b1 9c		      lda	(scorepointers+$6),y	;+5  13   39
     92  250f		       85 1b		      sta	GRP0	;+3  16   48	   D3	  D1	  D2	 D2
     93  2511		       b3 98		      lax	(scorepointers+$2),y	;+5  29   87
     94  2513		       9a		      txs
     95  2514		       b3 9a		      lax	(scorepointers+$4),y	;+5  36  108
     96  2516
     97  2516				  -	      ifconst	scorefade
     98  2516				  -	      dec	stack2
     99  2516					      else
      0  2516					      sleep	5
      1  2516				   .CYCLES    SET	5
      2  2516
      3  2516				  -	      IF	.CYCLES < 2
      4  2516				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  2516				  -	      ERR
      6  2516					      ENDIF
      7  2516
      8  2516					      IF	.CYCLES & 1
      9  2516					      IFNCONST	NO_ILLEGAL_OPCODES
     10  2516		       04 00		      nop	0
     11  2518				  -	      ELSE
     12  2518				  -	      bit	VSYNC
     13  2518					      ENDIF
     14  2518				   .CYCLES    SET	.CYCLES - 3
     15  2518					      ENDIF
     16  2518
     17  2518					      REPEAT	.CYCLES / 2
     18  2518		       ea		      nop
     19  2519					      REPEND
    101  2519					      endif
      0  2519					      sleep	2
      1  2519				   .CYCLES    SET	2
      2  2519
      3  2519				  -	      IF	.CYCLES < 2
      4  2519				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  2519				  -	      ERR
      6  2519					      ENDIF
      7  2519
      8  2519				  -	      IF	.CYCLES & 1
      9  2519				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  2519				  -	      nop	0
     11  2519				  -	      ELSE
     12  2519				  -	      bit	VSYNC
     13  2519				  -	      ENDIF
     14  2519				  -.CYCLES    SET	.CYCLES - 3
     15  2519					      ENDIF
     16  2519
     17  2519					      REPEAT	.CYCLES / 2
     18  2519		       ea		      nop
     19  251a					      REPEND
    103  251a
    104  251a		       b1 a0		      lda	(scorepointers+$A),y	;+5  21   63 DIGIT 6
    105  251c		       86 1c		      stx	GRP1	;+3  44  132	   D3	  D3	  D4	 D2!
    106  251e		       ba		      tsx
    107  251f		       86 1b		      stx	GRP0	;+3  47  141	   D5	  D3!	  D4	 D4
    108  2521		       85 1c		      sta	GRP1	;+3  50  150	   D5	  D5	  D6	 D4!
    109  2523
    110  2523		       84 1b		      sty	GRP0	;+3  53  159	   D4*	  D5!	  D6	 D6
    111  2525		       88		      dey
    112  2526		       10 d8		      bpl	scoreloop2	;+2  60  180
    113  2528				   scoreloop2end
    114  2528
    115  2528							;echo "critical size: ",(scoreloop2end-scoreloop2)
    116  2528
    117  2528
    118  2528		       a6 f6		      ldx	stack1
    119  252a		       9a		      txs
    120  252b
    121  252b		       a9 00		      LDA	#0
    122  252d		       85 0e		      sta	PF1
    123  252f		       85 1b		      STA	GRP0
    124  2531		       85 1c		      STA	GRP1
    125  2533		       85 25		      STA	VDELP0
    126  2535		       85 26		      STA	VDELP1
    127  2537		       85 04		      STA	NUSIZ0
    128  2539		       85 05		      STA	NUSIZ1
    129  253b
    130  253b							; clear out the score pointers in case they're stolen DPC variables...
    131  253b		       a2 0b		      ldx	#11
    132  253d				   clearscoreploop
    133  253d		       95 96		      sta	scorepointers,x
    134  253f		       ca		      dex
    135  2540		       10 fb		      bpl	clearscoreploop
    136  2542
    137  2542
    138  2542							;;ldy temp3
    139  2542							;ldy scorepointers+8
    140  2542							;sty scorepointers+3
    141  2542
    142  2542							;;ldy temp5
    143  2542							;ldy scorepointers+10
    144  2542							;sty scorepointers+5
    145  2542		       60		      rts
    146  2543
    147  2543				   miniscorepointerset
    148  2543		       29 0f		      and	#$0F
    149  2545		       0a		      asl
    150  2546		       0a		      asl
    151  2547		       0a		      asl
    152  2548		       69 3d		      adc	#<miniscoretable
    153  254a		       a8		      tay
    154  254b		       8a		      txa
    155  254c		       29 f0		      and	#$F0
    156  254e		       4a		      lsr
    157  254f		       69 3d		      adc	#<miniscoretable
    158  2551		       aa		      tax
    159  2552		       60		      rts
    160  2553
------- FILE titlescreen/asm/titlescreen.asm
    181  2553					      endif		;mk_score_on
    182  2553
    183  2553					      ifconst	mk_gameselect_on
------- FILE titlescreen/asm/gameselect_kernel.asm LEVEL 3 PASS 3
      0  2553					      include	"titlescreen/asm/gameselect_kernel.asm"
      1  2553
      2  2553				   draw_gameselect_display
      3  2553		       a9 00		      lda	#0
      4  2555		       85 1b		      sta	GRP0
      5  2557		       85 1c		      sta	GRP1
      6  2559
      7  2559		       a0 04		      ldy	#4
      8  255b		       84 f1		      sty	aux2
      9  255d
     10  255d		       ad 8d b9 	      lda	bmp_gameselect_color
     11  2560		       85 06		      sta	COLUP0
     12  2562		       85 07		      sta	COLUP1
     13  2564
     14  2564							;change gamenumber to a BCD number and stick it in temp5
     15  2564		       a5 a6		      lda	gamenumber
     16  2566		       85 9e		      sta	temp3
     17  2568		       a9 00		      lda	#0
     18  256a		       85 9f		      sta	temp4
     19  256c		       a2 08		      ldx	#8
     20  256e		       18		      clc
     21  256f		       f8		      sed
     22  2570				   converttobcd
     23  2570		       06 9e		      asl	temp3
     24  2572		       a5 9f		      lda	temp4
     25  2574		       65 9f		      adc	temp4
     26  2576		       85 9f		      sta	temp4
     27  2578		       ca		      dex
     28  2579		       d0 f5		      bne	converttobcd
     29  257b		       d8		      cld
     30  257c
     31  257c		       a5 9f		      lda	temp4
     32  257e		       29 0f		      and	#$0f
     33  2580		       85 9e		      sta	temp3
     34  2582		       0a		      asl
     35  2583		       0a		      asl
     36  2584		       18		      clc
     37  2585		       65 9e		      adc	temp3	; *5
     38  2587		       18		      clc
     39  2588		       69 a2		      adc	#<(font_gameselect_img)
     40  258a		       85 a0		      sta	scorepointers+10
     41  258c
     42  258c		       a5 9f		      lda	temp4
     43  258e		       29 f0		      and	#$f0
     44  2590		       4a		      lsr
     45  2591		       4a		      lsr
     46  2592		       85 9e		      sta	temp3
     47  2594		       4a		      lsr
     48  2595		       4a		      lsr
     49  2596		       18		      clc
     50  2597		       65 9e		      adc	temp3	; *5
     51  2599		       18		      clc
     52  259a		       69 a2		      adc	#<(font_gameselect_img)
     53  259c		       85 9e		      sta	scorepointers+8
     54  259e
     55  259e
     56  259e							;setup score pointers to point at my bitmap slices instead
     57  259e		       a9 8e		      lda	#<(bmp_gameselect_CHAR0)
     58  25a0		       85 96		      sta	scorepointers+0
     59  25a2		       a9 b9		      lda	#>(bmp_gameselect_CHAR0)
     60  25a4		       85 97		      sta	scorepointers+1
     61  25a6		       a9 93		      lda	#<(bmp_gameselect_CHAR1)
     62  25a8		       85 98		      sta	scorepointers+2
     63  25aa		       a9 b9		      lda	#>(bmp_gameselect_CHAR1)
     64  25ac		       85 99		      sta	scorepointers+3
     65  25ae		       a9 98		      lda	#<(bmp_gameselect_CHAR2)
     66  25b0		       85 9a		      sta	scorepointers+4
     67  25b2		       a9 b9		      lda	#>(bmp_gameselect_CHAR2)
     68  25b4		       85 9b		      sta	scorepointers+5
     69  25b6		       a9 9d		      lda	#<(bmp_gameselect_CHAR3)
     70  25b8		       85 9c		      sta	scorepointers+6
     71  25ba		       a9 b9		      lda	#>(bmp_gameselect_CHAR3)
     72  25bc		       85 9d		      sta	scorepointers+7
     73  25be
     74  25be		       a9 b9		      lda	#>(font_gameselect_img)
     75  25c0		       85 9f		      sta	scorepointers+9
     76  25c2
     77  25c2		       a9 b9		      lda	#>(font_gameselect_img)
     78  25c4		       85 a1		      sta	scorepointers+11
     79  25c6
     80  25c6		       4c c9 b1 	      jmp	draw_bmp_48x1_X
------- FILE titlescreen/asm/titlescreen.asm
    185  25c9					      endif		;mk_gameselect_on
    186  25c9
    187  25c9				   PFWAIT
    188  25c9		       ad 84 02 	      lda	INTIM
    189  25cc		       d0 fb		      bne	PFWAIT
    190  25ce		       85 02		      sta	WSYNC
    191  25d0
    192  25d0				   OVERSCAN
    193  25d0					      ifnconst	overscan_time
    194  25d0		       a9 a2		      lda	#34+128
    195  25d2				  -	      else
    196  25d2				  -	      lda	#overscan_time+128-5
    197  25d2					      endif
    198  25d2		       8d 96 02 	      sta	TIM64T
    199  25d5
    200  25d5							;fix height variables we borrowed, so DPC doesn't crash on drawscreen...
    201  25d5				  -	      ifconst	player9height
    202  25d5				  -	      ldy	#8
    203  25d5				  -	      lda	#0
    204  25d5				  -	      sta	player0height
    205  25d5				  -.playerheightfixloop
    206  25d5				  -	      sta	player1height,y
    207  25d5				  -	      ifconst	_NUSIZ1
    208  25d5				  -	      sta	_NUSIZ1,y
    209  25d5				  -	      endif
    210  25d5				  -	      dey
    211  25d5				  -	      bpl	.playerheightfixloop
    212  25d5					      endif
    213  25d5
    214  25d5		       a9 c2		      lda	#%11000010
    215  25d7		       85 02		      sta	WSYNC
    216  25d9		       85 01		      sta	VBLANK
      0  25db					      RETURN
      1  25db				  -	      ifnconst	bankswitch
      2  25db				  -	      rts
      3  25db					      else
      4  25db		       4c da ff 	      jmp	BS_return
      5  25de					      endif
    218  25de
    219  25de				  -	      ifconst	mk_48x1_1_on
    220  25de				  -	      include	"titlescreen/48x1_1_image.asm"
    221  25de					      endif
    222  25de				  -	      ifconst	mk_48x1_2_on
    223  25de				  -	      include	"titlescreen/48x1_2_image.asm"
    224  25de					      endif
    225  25de				  -	      ifconst	mk_48x1_3_on
    226  25de				  -	      include	"titlescreen/48x1_3_image.asm"
    227  25de					      endif
    228  25de				  -	      ifconst	mk_48x1_4_on
    229  25de				  -	      include	"titlescreen/48x1_4_image.asm"
    230  25de					      endif
    231  25de				  -	      ifconst	mk_48x1_5_on
    232  25de				  -	      include	"titlescreen/48x1_5_image.asm"
    233  25de					      endif
    234  25de				  -	      ifconst	mk_48x1_6_on
    235  25de				  -	      include	"titlescreen/48x1_6_image.asm"
    236  25de					      endif
    237  25de				  -	      ifconst	mk_48x1_7_on
    238  25de				  -	      include	"titlescreen/48x1_7_image.asm"
    239  25de					      endif
    240  25de				  -	      ifconst	mk_48x1_8_on
    241  25de				  -	      include	"titlescreen/48x1_8_image.asm"
    242  25de					      endif
    243  25de
    244  25de
    245  25de					      ifconst	mk_48x2_1_on
------- FILE titlescreen/48x2_1_image.asm LEVEL 3 PASS 3
      0  25de					      include	"titlescreen/48x2_1_image.asm"
      1  25de
      2  25de							;*** The height of the displayed data...
      3  25de		       00 05	   bmp_48x2_1_window =	5
      4  25de
      5  25de							;*** The height of the bitmap data. This can be larger than
      6  25de							;*** the displayed data height, if you're scrolling or animating
      7  25de							;*** the data...
      8  25de		       00 05	   bmp_48x2_1_height =	5
      9  25de
     10  25de				  -	      if	>. != >[.+(bmp_48x2_1_height)]
     11  25de				  -	      align	256
     12  25de					      endif
     13  25de		       00		      BYTE.b	0	; leave this here!
     14  25df
     15  25df
     16  25df							;*** The color of each line in the bitmap, in reverse order...
     17  25df				   bmp_48x2_1_colors
     18  25df		       84		      BYTE.b	_84
     19  25e0		       88		      BYTE.b	_88
     20  25e1		       48		      BYTE.b	_48
     21  25e2		       46		      BYTE.b	_46
     22  25e3		       44		      BYTE.b	_44
     23  25e4
     24  25e4				  -	      ifnconst	bmp_48x2_1_PF1
     25  25e4				  -bmp_48x2_1_PF1
     26  25e4					      endif
     27  25e4		       00		      BYTE.b	%00000000
     28  25e5				  -	      ifnconst	bmp_48x2_1_PF2
     29  25e5				  -bmp_48x2_1_PF2
     30  25e5					      endif
     31  25e5		       00		      BYTE.b	%00000000
     32  25e6				  -	      ifnconst	bmp_48x2_1_background
     33  25e6				  -bmp_48x2_1_background
     34  25e6					      endif
     35  25e6		       c2		      BYTE.b	$c2
     36  25e7
     37  25e7				  -	      if	>. != >[.+bmp_48x2_1_height]
     38  25e7				  -	      align	256
     39  25e7					      endif
     40  25e7
     41  25e7
     42  25e7				   bmp_48x2_1_00
     43  25e7		       ee		      BYTE.b	%11101110
     44  25e8		       88		      BYTE.b	%10001000
     45  25e9		       8c		      BYTE.b	%10001100
     46  25ea		       88		      BYTE.b	%10001000
     47  25eb		       8e		      BYTE.b	%10001110
     48  25ec		       88		      BYTE.b	%10001000
     49  25ed
     50  25ed				  -	      if	>. != >[.+(bmp_48x2_1_height)]
     51  25ed				  -	      align	256
     52  25ed					      endif
     53  25ed
     54  25ed				   bmp_48x2_1_01
     55  25ed		       4e		      BYTE.b	%01001110
     56  25ee		       48		      BYTE.b	%01001000
     57  25ef		       ac		      BYTE.b	%10101100
     58  25f0		       a8		      BYTE.b	%10101000
     59  25f1		       ae		      BYTE.b	%10101110
     60  25f2		       48		      BYTE.b	%01001000
     61  25f3
     62  25f3				  -	      if	>. != >[.+(bmp_48x2_1_height)]
     63  25f3				  -	      align	256
     64  25f3					      endif
     65  25f3
     66  25f3				   bmp_48x2_1_02
     67  25f3		       e0		      BYTE.b	%11100000
     68  25f4		       80		      BYTE.b	%10000000
     69  25f5		       80		      BYTE.b	%10000000
     70  25f6		       80		      BYTE.b	%10000000
     71  25f7		       80		      BYTE.b	%10000000
     72  25f8		       80		      BYTE.b	%10000000
     73  25f9
     74  25f9				  -	      if	>. != >[.+(bmp_48x2_1_height)]
     75  25f9				  -	      align	256
     76  25f9					      endif
     77  25f9
     78  25f9				   bmp_48x2_1_03
     79  25f9		       00		      BYTE.b	%00000000
     80  25fa		       00		      BYTE.b	%00000000
     81  25fb		       00		      BYTE.b	%00000000
     82  25fc		       00		      BYTE.b	%00000000
     83  25fd		       00		      BYTE.b	%00000000
     84  25fe		       00		      BYTE.b	%00000000
     85  25ff
     86  25ff					      if	>. != >[.+(bmp_48x2_1_height)]
     87  2600		       00		      align	256
     88  2600					      endif
     89  2600
     90  2600				   bmp_48x2_1_04
     91  2600		       00		      BYTE.b	%00000000
     92  2601		       00		      BYTE.b	%00000000
     93  2602		       00		      BYTE.b	%00000000
     94  2603		       00		      BYTE.b	%00000000
     95  2604		       00		      BYTE.b	%00000000
     96  2605		       00		      BYTE.b	%00000000
     97  2606
     98  2606				  -	      if	>. != >[.+(bmp_48x2_1_height)]
     99  2606				  -	      align	256
    100  2606					      endif
    101  2606
    102  2606				   bmp_48x2_1_05
    103  2606		       00		      BYTE.b	%00000000
    104  2607		       00		      BYTE.b	%00000000
    105  2608		       00		      BYTE.b	%00000000
    106  2609		       00		      BYTE.b	%00000000
    107  260a		       00		      BYTE.b	%00000000
    108  260b		       00		      BYTE.b	%00000000
    109  260c
------- FILE titlescreen/asm/titlescreen.asm
    247  260c					      endif
    248  260c				  -	      ifconst	mk_48x2_2_on
    249  260c				  -	      include	"titlescreen/48x2_2_image.asm"
    250  260c					      endif
    251  260c				  -	      ifconst	mk_48x2_3_on
    252  260c				  -	      include	"titlescreen/48x2_3_image.asm"
    253  260c					      endif
    254  260c				  -	      ifconst	mk_48x2_4_on
    255  260c				  -	      include	"titlescreen/48x2_4_image.asm"
    256  260c					      endif
    257  260c				  -	      ifconst	mk_48x2_5_on
    258  260c				  -	      include	"titlescreen/48x2_5_image.asm"
    259  260c					      endif
    260  260c				  -	      ifconst	mk_48x2_6_on
    261  260c				  -	      include	"titlescreen/48x2_6_image.asm"
    262  260c					      endif
    263  260c				  -	      ifconst	mk_48x2_7_on
    264  260c				  -	      include	"titlescreen/48x2_7_image.asm"
    265  260c					      endif
    266  260c
    267  260c				  -	      ifconst	mk_48x2_8_on
    268  260c				  -	      include	"titlescreen/48x2_8_image.asm"
    269  260c					      endif
    270  260c
    271  260c
    272  260c					      ifconst	mk_96x2_1_on
------- FILE titlescreen/96x2_1_image.asm LEVEL 3 PASS 3
      0  260c					      include	"titlescreen/96x2_1_image.asm"
      1  260c
      2  260c							;*** The height of the displayed data...
      3  260c		       00 3c	   bmp_96x2_1_window =	60
      4  260c
      5  260c							;*** The height of the bitmap data. This can be larger than
      6  260c							;*** the displayed data height, if you're scrolling or animating
      7  260c							;*** the data...
      8  260c		       00 3c	   bmp_96x2_1_height =	60
      9  260c
     10  260c
     11  260c				  -	      if	>. != >[.+(bmp_96x2_1_height)]
     12  260c				  -	      align	256
     13  260c					      endif
     14  260c		       00		      BYTE.b	$00	; leave this here!
     15  260d
     16  260d
     17  260d							;*** The color of each line in the bitmap, in reverse order...
     18  260d				   bmp_96x2_1_colors
     19  260d		       0e		      BYTE.b	$0E
     20  260e		       0e		      BYTE.b	$0E
     21  260f		       0e		      BYTE.b	$0E
     22  2610		       0e		      BYTE.b	$0E
     23  2611		       0e		      BYTE.b	$0E
     24  2612		       0e		      BYTE.b	$0E
     25  2613		       0e		      BYTE.b	$0E
     26  2614		       0e		      BYTE.b	$0E
     27  2615		       0e		      BYTE.b	$0E
     28  2616		       0e		      BYTE.b	$0E
     29  2617		       0e		      BYTE.b	$0E
     30  2618		       0e		      BYTE.b	$0E
     31  2619		       0e		      BYTE.b	$0E
     32  261a		       0e		      BYTE.b	$0E
     33  261b		       0e		      BYTE.b	$0E
     34  261c		       0e		      BYTE.b	$0E
     35  261d		       0e		      BYTE.b	$0E
     36  261e		       0e		      BYTE.b	$0E
     37  261f		       0e		      BYTE.b	$0E
     38  2620		       0e		      BYTE.b	$0E
     39  2621		       0e		      BYTE.b	$0E
     40  2622		       0e		      BYTE.b	$0E
     41  2623		       0e		      BYTE.b	$0E
     42  2624		       0e		      BYTE.b	$0E
     43  2625		       0e		      BYTE.b	$0E
     44  2626		       0e		      BYTE.b	$0E
     45  2627		       0e		      BYTE.b	$0E
     46  2628		       0e		      BYTE.b	$0E
     47  2629		       0e		      BYTE.b	$0E
     48  262a		       0e		      BYTE.b	$0E
     49  262b		       0e		      BYTE.b	$0E
     50  262c		       0e		      BYTE.b	$0E
     51  262d		       0e		      BYTE.b	$0E
     52  262e		       0e		      BYTE.b	$0E
     53  262f		       0e		      BYTE.b	$0E
     54  2630		       0e		      BYTE.b	$0E
     55  2631		       0e		      BYTE.b	$0E
     56  2632		       82		      BYTE.b	_82
     57  2633		       82		      BYTE.b	_82
     58  2634		       84		      BYTE.b	_84
     59  2635		       84		      BYTE.b	_84
     60  2636		       88		      BYTE.b	_88
     61  2637		       8a		      BYTE.b	_8A
     62  2638		       8c		      BYTE.b	_8C
     63  2639		       8c		      BYTE.b	_8C
     64  263a		       4a		      BYTE.b	_4A
     65  263b		       4a		      BYTE.b	_4A
     66  263c		       4a		      BYTE.b	_4A
     67  263d		       48		      BYTE.b	_48
     68  263e		       48		      BYTE.b	_48
     69  263f		       48		      BYTE.b	_48
     70  2640		       46		      BYTE.b	_46
     71  2641		       46		      BYTE.b	_46
     72  2642		       46		      BYTE.b	_46
     73  2643		       44		      BYTE.b	_44
     74  2644		       44		      BYTE.b	_44
     75  2645		       44		      BYTE.b	_44
     76  2646		       42		      BYTE.b	_42
     77  2647		       42		      BYTE.b	_42
     78  2648		       42		      BYTE.b	_42
     79  2649
     80  2649
     81  2649				  -	      if	>. != >[.+(bmp_96x2_1_height)]
     82  2649				  -	      align	256
     83  2649					      endif
     84  2649
     85  2649				   bmp_96x2_1_00
     86  2649		       00		      BYTE.b	%00000000
     87  264a		       00		      BYTE.b	%00000000
     88  264b		       00		      BYTE.b	%00000000
     89  264c		       00		      BYTE.b	%00000000
     90  264d		       00		      BYTE.b	%00000000
     91  264e		       00		      BYTE.b	%00000000
     92  264f		       00		      BYTE.b	%00000000
     93  2650		       00		      BYTE.b	%00000000
     94  2651		       00		      BYTE.b	%00000000
     95  2652		       00		      BYTE.b	%00000000
     96  2653		       00		      BYTE.b	%00000000
     97  2654		       00		      BYTE.b	%00000000
     98  2655		       00		      BYTE.b	%00000000
     99  2656		       00		      BYTE.b	%00000000
    100  2657		       00		      BYTE.b	%00000000
    101  2658		       00		      BYTE.b	%00000000
    102  2659		       00		      BYTE.b	%00000000
    103  265a		       00		      BYTE.b	%00000000
    104  265b		       00		      BYTE.b	%00000000
    105  265c		       00		      BYTE.b	%00000000
    106  265d		       00		      BYTE.b	%00000000
    107  265e		       00		      BYTE.b	%00000000
    108  265f		       00		      BYTE.b	%00000000
    109  2660		       00		      BYTE.b	%00000000
    110  2661		       00		      BYTE.b	%00000000
    111  2662		       00		      BYTE.b	%00000000
    112  2663		       00		      BYTE.b	%00000000
    113  2664		       00		      BYTE.b	%00000000
    114  2665		       00		      BYTE.b	%00000000
    115  2666		       00		      BYTE.b	%00000000
    116  2667		       00		      BYTE.b	%00000000
    117  2668		       00		      BYTE.b	%00000000
    118  2669		       00		      BYTE.b	%00000000
    119  266a		       00		      BYTE.b	%00000000
    120  266b		       00		      BYTE.b	%00000000
    121  266c		       00		      BYTE.b	%00000000
    122  266d		       00		      BYTE.b	%00000000
    123  266e		       00		      BYTE.b	%00000000
    124  266f		       00		      BYTE.b	%00000000
    125  2670		       00		      BYTE.b	%00000000
    126  2671		       00		      BYTE.b	%00000000
    127  2672		       00		      BYTE.b	%00000000
    128  2673		       00		      BYTE.b	%00000000
    129  2674		       00		      BYTE.b	%00000000
    130  2675		       00		      BYTE.b	%00000000
    131  2676		       00		      BYTE.b	%00000000
    132  2677		       00		      BYTE.b	%00000000
    133  2678		       00		      BYTE.b	%00000000
    134  2679		       00		      BYTE.b	%00000000
    135  267a		       00		      BYTE.b	%00000000
    136  267b		       00		      BYTE.b	%00000000
    137  267c		       00		      BYTE.b	%00000000
    138  267d		       00		      BYTE.b	%00000000
    139  267e		       00		      BYTE.b	%00000000
    140  267f		       00		      BYTE.b	%00000000
    141  2680		       00		      BYTE.b	%00000000
    142  2681		       00		      BYTE.b	%00000000
    143  2682		       00		      BYTE.b	%00000000
    144  2683		       00		      BYTE.b	%00000000
    145  2684		       00		      BYTE.b	%00000000
    146  2685
    147  2685				  -	      if	>. != >[.+(bmp_96x2_1_height)]
    148  2685				  -	      align	256
    149  2685					      endif
    150  2685
    151  2685				   bmp_96x2_1_01
    152  2685		       0d		      BYTE.b	%00001101
    153  2686		       0d		      BYTE.b	%00001101
    154  2687		       00		      BYTE.b	%00000000
    155  2688		       00		      BYTE.b	%00000000
    156  2689		       00		      BYTE.b	%00000000
    157  268a		       00		      BYTE.b	%00000000
    158  268b		       00		      BYTE.b	%00000000
    159  268c		       01		      BYTE.b	%00000001
    160  268d		       06		      BYTE.b	%00000110
    161  268e		       0e		      BYTE.b	%00001110
    162  268f		       0f		      BYTE.b	%00001111
    163  2690		       0f		      BYTE.b	%00001111
    164  2691		       0e		      BYTE.b	%00001110
    165  2692		       06		      BYTE.b	%00000110
    166  2693		       02		      BYTE.b	%00000010
    167  2694		       01		      BYTE.b	%00000001
    168  2695		       00		      BYTE.b	%00000000
    169  2696		       00		      BYTE.b	%00000000
    170  2697		       00		      BYTE.b	%00000000
    171  2698		       00		      BYTE.b	%00000000
    172  2699		       00		      BYTE.b	%00000000
    173  269a		       00		      BYTE.b	%00000000
    174  269b		       00		      BYTE.b	%00000000
    175  269c		       00		      BYTE.b	%00000000
    176  269d		       00		      BYTE.b	%00000000
    177  269e		       00		      BYTE.b	%00000000
    178  269f		       00		      BYTE.b	%00000000
    179  26a0		       00		      BYTE.b	%00000000
    180  26a1		       00		      BYTE.b	%00000000
    181  26a2		       00		      BYTE.b	%00000000
    182  26a3		       00		      BYTE.b	%00000000
    183  26a4		       00		      BYTE.b	%00000000
    184  26a5		       00		      BYTE.b	%00000000
    185  26a6		       00		      BYTE.b	%00000000
    186  26a7		       00		      BYTE.b	%00000000
    187  26a8		       1f		      BYTE.b	%00011111
    188  26a9		       00		      BYTE.b	%00000000
    189  26aa		       00		      BYTE.b	%00000000
    190  26ab		       00		      BYTE.b	%00000000
    191  26ac		       00		      BYTE.b	%00000000
    192  26ad		       01		      BYTE.b	%00000001
    193  26ae		       01		      BYTE.b	%00000001
    194  26af		       00		      BYTE.b	%00000000
    195  26b0		       01		      BYTE.b	%00000001
    196  26b1		       00		      BYTE.b	%00000000
    197  26b2		       00		      BYTE.b	%00000000
    198  26b3		       03		      BYTE.b	%00000011
    199  26b4		       03		      BYTE.b	%00000011
    200  26b5		       0f		      BYTE.b	%00001111
    201  26b6		       0f		      BYTE.b	%00001111
    202  26b7		       3c		      BYTE.b	%00111100
    203  26b8		       3c		      BYTE.b	%00111100
    204  26b9		       3c		      BYTE.b	%00111100
    205  26ba		       3c		      BYTE.b	%00111100
    206  26bb		       3c		      BYTE.b	%00111100
    207  26bc		       0f		      BYTE.b	%00001111
    208  26bd		       0f		      BYTE.b	%00001111
    209  26be		       03		      BYTE.b	%00000011
    210  26bf		       03		      BYTE.b	%00000011
    211  26c0		       00		      BYTE.b	%00000000
    212  26c1
    213  26c1				  -	      if	>. != >[.+(bmp_96x2_1_height)]
    214  26c1				  -	      align	256
    215  26c1					      endif
    216  26c1
    217  26c1				   bmp_96x2_1_02
    218  26c1		       fe		      BYTE.b	%11111110
    219  26c2		       e0		      BYTE.b	%11100000
    220  26c3		       12		      BYTE.b	%00010010
    221  26c4		       1f		      BYTE.b	%00011111
    222  26c5		       0f		      BYTE.b	%00001111
    223  26c6		       12		      BYTE.b	%00010010
    224  26c7		       60		      BYTE.b	%01100000
    225  26c8		       80		      BYTE.b	%10000000
    226  26c9		       1f		      BYTE.b	%00011111
    227  26ca		       6f		      BYTE.b	%01101111
    228  26cb		       81		      BYTE.b	%10000001
    229  26cc		       80		      BYTE.b	%10000000
    230  26cd		       00		      BYTE.b	%00000000
    231  26ce		       00		      BYTE.b	%00000000
    232  26cf		       00		      BYTE.b	%00000000
    233  26d0		       8c		      BYTE.b	%10001100
    234  26d1		       62		      BYTE.b	%01100010
    235  26d2		       11		      BYTE.b	%00010001
    236  26d3		       0c		      BYTE.b	%00001100
    237  26d4		       02		      BYTE.b	%00000010
    238  26d5		       01		      BYTE.b	%00000001
    239  26d6		       00		      BYTE.b	%00000000
    240  26d7		       00		      BYTE.b	%00000000
    241  26d8		       00		      BYTE.b	%00000000
    242  26d9		       00		      BYTE.b	%00000000
    243  26da		       00		      BYTE.b	%00000000
    244  26db		       00		      BYTE.b	%00000000
    245  26dc		       00		      BYTE.b	%00000000
    246  26dd		       00		      BYTE.b	%00000000
    247  26de		       00		      BYTE.b	%00000000
    248  26df		       00		      BYTE.b	%00000000
    249  26e0		       00		      BYTE.b	%00000000
    250  26e1		       00		      BYTE.b	%00000000
    251  26e2		       00		      BYTE.b	%00000000
    252  26e3		       00		      BYTE.b	%00000000
    253  26e4		       ff		      BYTE.b	%11111111
    254  26e5		       00		      BYTE.b	%00000000
    255  26e6		       00		      BYTE.b	%00000000
    256  26e7		       04		      BYTE.b	%00000100
    257  26e8		       f4		      BYTE.b	%11110100
    258  26e9		       37		      BYTE.b	%00110111
    259  26ea		       94		      BYTE.b	%10010100
    260  26eb		       f4		      BYTE.b	%11110100
    261  26ec		       16		      BYTE.b	%00010110
    262  26ed		       e7		      BYTE.b	%11100111
    263  26ee		       00		      BYTE.b	%00000000
    264  26ef		       fc		      BYTE.b	%11111100
    265  26f0		       fc		      BYTE.b	%11111100
    266  26f1		       0f		      BYTE.b	%00001111
    267  26f2		       0f		      BYTE.b	%00001111
    268  26f3		       00		      BYTE.b	%00000000
    269  26f4		       00		      BYTE.b	%00000000
    270  26f5		       00		      BYTE.b	%00000000
    271  26f6		       00		      BYTE.b	%00000000
    272  26f7		       00		      BYTE.b	%00000000
    273  26f8		       0f		      BYTE.b	%00001111
    274  26f9		       0f		      BYTE.b	%00001111
    275  26fa		       fc		      BYTE.b	%11111100
    276  26fb		       fc		      BYTE.b	%11111100
    277  26fc		       00		      BYTE.b	%00000000
    278  26fd
    279  26fd					      if	>. != >[.+(bmp_96x2_1_height)]
    280  2700		       00 00 00 	      align	256
    281  2700					      endif
    282  2700
    283  2700				   bmp_96x2_1_03
    284  2700		       03		      BYTE.b	%00000011
    285  2701		       0c		      BYTE.b	%00001100
    286  2702		       0c		      BYTE.b	%00001100
    287  2703		       83		      BYTE.b	%10000011
    288  2704		       f0		      BYTE.b	%11110000
    289  2705		       00		      BYTE.b	%00000000
    290  2706		       00		      BYTE.b	%00000000
    291  2707		       00		      BYTE.b	%00000000
    292  2708		       e0		      BYTE.b	%11100000
    293  2709		       ff		      BYTE.b	%11111111
    294  270a		       ff		      BYTE.b	%11111111
    295  270b		       7e		      BYTE.b	%01111110
    296  270c		       0e		      BYTE.b	%00001110
    297  270d		       0f		      BYTE.b	%00001111
    298  270e		       1f		      BYTE.b	%00011111
    299  270f		       13		      BYTE.b	%00010011
    300  2710		       0d		      BYTE.b	%00001101
    301  2711		       8c		      BYTE.b	%10001100
    302  2712		       0c		      BYTE.b	%00001100
    303  2713		       10		      BYTE.b	%00010000
    304  2714		       f0		      BYTE.b	%11110000
    305  2715		       62		      BYTE.b	%01100010
    306  2716		       11		      BYTE.b	%00010001
    307  2717		       0c		      BYTE.b	%00001100
    308  2718		       02		      BYTE.b	%00000010
    309  2719		       01		      BYTE.b	%00000001
    310  271a		       00		      BYTE.b	%00000000
    311  271b		       00		      BYTE.b	%00000000
    312  271c		       00		      BYTE.b	%00000000
    313  271d		       00		      BYTE.b	%00000000
    314  271e		       00		      BYTE.b	%00000000
    315  271f		       00		      BYTE.b	%00000000
    316  2720		       00		      BYTE.b	%00000000
    317  2721		       00		      BYTE.b	%00000000
    318  2722		       00		      BYTE.b	%00000000
    319  2723		       ff		      BYTE.b	%11111111
    320  2724		       00		      BYTE.b	%00000000
    321  2725		       00		      BYTE.b	%00000000
    322  2726		       00		      BYTE.b	%00000000
    323  2727		       0e		      BYTE.b	%00001110
    324  2728		       93		      BYTE.b	%10010011
    325  2729		       d1		      BYTE.b	%11010001
    326  272a		       51		      BYTE.b	%01010001
    327  272b		       59		      BYTE.b	%01011001
    328  272c		       8e		      BYTE.b	%10001110
    329  272d		       00		      BYTE.b	%00000000
    330  272e		       6f		      BYTE.b	%01101111
    331  272f		       6f		      BYTE.b	%01101111
    332  2730		       0f		      BYTE.b	%00001111
    333  2731		       0f		      BYTE.b	%00001111
    334  2732		       0f		      BYTE.b	%00001111
    335  2733		       0f		      BYTE.b	%00001111
    336  2734		       0f		      BYTE.b	%00001111
    337  2735		       0f		      BYTE.b	%00001111
    338  2736		       0f		      BYTE.b	%00001111
    339  2737		       03		      BYTE.b	%00000011
    340  2738		       03		      BYTE.b	%00000011
    341  2739		       00		      BYTE.b	%00000000
    342  273a		       00		      BYTE.b	%00000000
    343  273b		       00		      BYTE.b	%00000000
    344  273c
    345  273c				  -	      if	>. != >[.+(bmp_96x2_1_height)]
    346  273c				  -	      align	256
    347  273c					      endif
    348  273c
    349  273c				   bmp_96x2_1_04
    350  273c		       80		      BYTE.b	%10000000
    351  273d		       00		      BYTE.b	%00000000
    352  273e		       03		      BYTE.b	%00000011
    353  273f		       f3		      BYTE.b	%11110011
    354  2740		       00		      BYTE.b	%00000000
    355  2741		       00		      BYTE.b	%00000000
    356  2742		       00		      BYTE.b	%00000000
    357  2743		       00		      BYTE.b	%00000000
    358  2744		       02		      BYTE.b	%00000010
    359  2745		       81		      BYTE.b	%10000001
    360  2746		       92		      BYTE.b	%10010010
    361  2747		       73		      BYTE.b	%01110011
    362  2748		       73		      BYTE.b	%01110011
    363  2749		       93		      BYTE.b	%10010011
    364  274a		       83		      BYTE.b	%10000011
    365  274b		       e0		      BYTE.b	%11100000
    366  274c		       ff		      BYTE.b	%11111111
    367  274d		       1f		      BYTE.b	%00011111
    368  274e		       0f		      BYTE.b	%00001111
    369  274f		       03		      BYTE.b	%00000011
    370  2750		       02		      BYTE.b	%00000010
    371  2751		       0f		      BYTE.b	%00001111
    372  2752		       8f		      BYTE.b	%10001111
    373  2753		       0f		      BYTE.b	%00001111
    374  2754		       0f		      BYTE.b	%00001111
    375  2755		       8f		      BYTE.b	%10001111
    376  2756		       6f		      BYTE.b	%01101111
    377  2757		       0f		      BYTE.b	%00001111
    378  2758		       1f		      BYTE.b	%00011111
    379  2759		       00		      BYTE.b	%00000000
    380  275a		       03		      BYTE.b	%00000011
    381  275b		       03		      BYTE.b	%00000011
    382  275c		       01		      BYTE.b	%00000001
    383  275d		       01		      BYTE.b	%00000001
    384  275e		       00		      BYTE.b	%00000000
    385  275f		       dd		      BYTE.b	%11011101
    386  2760		       0d		      BYTE.b	%00001101
    387  2761		       00		      BYTE.b	%00000000
    388  2762		       00		      BYTE.b	%00000000
    389  2763		       38		      BYTE.b	%00111000
    390  2764		       4d		      BYTE.b	%01001101
    391  2765		       41		      BYTE.b	%01000001
    392  2766		       40		      BYTE.b	%01000000
    393  2767		       65		      BYTE.b	%01100101
    394  2768		       38		      BYTE.b	%00111000
    395  2769		       00		      BYTE.b	%00000000
    396  276a		       03		      BYTE.b	%00000011
    397  276b		       03		      BYTE.b	%00000011
    398  276c		       03		      BYTE.b	%00000011
    399  276d		       03		      BYTE.b	%00000011
    400  276e		       ff		      BYTE.b	%11111111
    401  276f		       ff		      BYTE.b	%11111111
    402  2770		       03		      BYTE.b	%00000011
    403  2771		       03		      BYTE.b	%00000011
    404  2772		       03		      BYTE.b	%00000011
    405  2773		       cf		      BYTE.b	%11001111
    406  2774		       cf		      BYTE.b	%11001111
    407  2775		       fc		      BYTE.b	%11111100
    408  2776		       fc		      BYTE.b	%11111100
    409  2777		       00		      BYTE.b	%00000000
    410  2778
    411  2778				  -	      if	>. != >[.+(bmp_96x2_1_height)]
    412  2778				  -	      align	256
    413  2778					      endif
    414  2778
    415  2778				   bmp_96x2_1_05
    416  2778		       00		      BYTE.b	%00000000
    417  2779		       00		      BYTE.b	%00000000
    418  277a		       9e		      BYTE.b	%10011110
    419  277b		       ff		      BYTE.b	%11111111
    420  277c		       00		      BYTE.b	%00000000
    421  277d		       00		      BYTE.b	%00000000
    422  277e		       00		      BYTE.b	%00000000
    423  277f		       00		      BYTE.b	%00000000
    424  2780		       6c		      BYTE.b	%01101100
    425  2781		       91		      BYTE.b	%10010001
    426  2782		       6d		      BYTE.b	%01101101
    427  2783		       fd		      BYTE.b	%11111101
    428  2784		       fd		      BYTE.b	%11111101
    429  2785		       fc		      BYTE.b	%11111100
    430  2786		       fc		      BYTE.b	%11111100
    431  2787		       01		      BYTE.b	%00000001
    432  2788		       ff		      BYTE.b	%11111111
    433  2789		       ff		      BYTE.b	%11111111
    434  278a		       ff		      BYTE.b	%11111111
    435  278b		       ff		      BYTE.b	%11111111
    436  278c		       00		      BYTE.b	%00000000
    437  278d		       fe		      BYTE.b	%11111110
    438  278e		       fe		      BYTE.b	%11111110
    439  278f		       fe		      BYTE.b	%11111110
    440  2790		       fe		      BYTE.b	%11111110
    441  2791		       fe		      BYTE.b	%11111110
    442  2792		       fe		      BYTE.b	%11111110
    443  2793		       fe		      BYTE.b	%11111110
    444  2794		       fe		      BYTE.b	%11111110
    445  2795		       00		      BYTE.b	%00000000
    446  2796		       f0		      BYTE.b	%11110000
    447  2797		       f0		      BYTE.b	%11110000
    448  2798		       e0		      BYTE.b	%11100000
    449  2799		       e0		      BYTE.b	%11100000
    450  279a		       00		      BYTE.b	%00000000
    451  279b		       f7		      BYTE.b	%11110111
    452  279c		       f6		      BYTE.b	%11110110
    453  279d		       00		      BYTE.b	%00000000
    454  279e		       00		      BYTE.b	%00000000
    455  279f		       f3		      BYTE.b	%11110011
    456  27a0		       36		      BYTE.b	%00110110
    457  27a1		       94		      BYTE.b	%10010100
    458  27a2		       f4		      BYTE.b	%11110100
    459  27a3		       14		      BYTE.b	%00010100
    460  27a4		       e2		      BYTE.b	%11100010
    461  27a5		       00		      BYTE.b	%00000000
    462  27a6		       d8		      BYTE.b	%11011000
    463  27a7		       d8		      BYTE.b	%11011000
    464  27a8		       c0		      BYTE.b	%11000000
    465  27a9		       c0		      BYTE.b	%11000000
    466  27aa		       c0		      BYTE.b	%11000000
    467  27ab		       c3		      BYTE.b	%11000011
    468  27ac		       c3		      BYTE.b	%11000011
    469  27ad		       c3		      BYTE.b	%11000011
    470  27ae		       c3		      BYTE.b	%11000011
    471  27af		       03		      BYTE.b	%00000011
    472  27b0		       03		      BYTE.b	%00000011
    473  27b1		       03		      BYTE.b	%00000011
    474  27b2		       00		      BYTE.b	%00000000
    475  27b3		       00		      BYTE.b	%00000000
    476  27b4
    477  27b4				  -	      if	>. != >[.+(bmp_96x2_1_height)]
    478  27b4				  -	      align	256
    479  27b4					      endif
    480  27b4
    481  27b4				   bmp_96x2_1_06
    482  27b4		       00		      BYTE.b	%00000000
    483  27b5		       00		      BYTE.b	%00000000
    484  27b6		       00		      BYTE.b	%00000000
    485  27b7		       e0		      BYTE.b	%11100000
    486  27b8		       10		      BYTE.b	%00010000
    487  27b9		       0c		      BYTE.b	%00001100
    488  27ba		       02		      BYTE.b	%00000010
    489  27bb		       01		      BYTE.b	%00000001
    490  27bc		       01		      BYTE.b	%00000001
    491  27bd		       90		      BYTE.b	%10010000
    492  27be		       90		      BYTE.b	%10010000
    493  27bf		       90		      BYTE.b	%10010000
    494  27c0		       8f		      BYTE.b	%10001111
    495  27c1		       10		      BYTE.b	%00010000
    496  27c2		       6f		      BYTE.b	%01101111
    497  27c3		       9f		      BYTE.b	%10011111
    498  27c4		       ff		      BYTE.b	%11111111
    499  27c5		       fe		      BYTE.b	%11111110
    500  27c6		       fd		      BYTE.b	%11111101
    501  27c7		       e1		      BYTE.b	%11100001
    502  27c8		       00		      BYTE.b	%00000000
    503  27c9		       6d		      BYTE.b	%01101101
    504  27ca		       12		      BYTE.b	%00010010
    505  27cb		       6d		      BYTE.b	%01101101
    506  27cc		       7f		      BYTE.b	%01111111
    507  27cd		       7f		      BYTE.b	%01111111
    508  27ce		       7f		      BYTE.b	%01111111
    509  27cf		       7f		      BYTE.b	%01111111
    510  27d0		       0c		      BYTE.b	%00001100
    511  27d1		       00		      BYTE.b	%00000000
    512  27d2		       00		      BYTE.b	%00000000
    513  27d3		       00		      BYTE.b	%00000000
    514  27d4		       00		      BYTE.b	%00000000
    515  27d5		       00		      BYTE.b	%00000000
    516  27d6		       00		      BYTE.b	%00000000
    517  27d7		       7f		      BYTE.b	%01111111
    518  27d8		       00		      BYTE.b	%00000000
    519  27d9		       0e		      BYTE.b	%00001110
    520  27da		       01		      BYTE.b	%00000001
    521  27db		       81		      BYTE.b	%10000001
    522  27dc		       4f		      BYTE.b	%01001111
    523  27dd		       1b		      BYTE.b	%00011011
    524  27de		       11		      BYTE.b	%00010001
    525  27df		       11		      BYTE.b	%00010001
    526  27e0		       00		      BYTE.b	%00000000
    527  27e1		       0c		      BYTE.b	%00001100
    528  27e2		       0c		      BYTE.b	%00001100
    529  27e3		       3f		      BYTE.b	%00111111
    530  27e4		       3f		      BYTE.b	%00111111
    531  27e5		       ff		      BYTE.b	%11111111
    532  27e6		       ff		      BYTE.b	%11111111
    533  27e7		       f3		      BYTE.b	%11110011
    534  27e8		       f3		      BYTE.b	%11110011
    535  27e9		       c0		      BYTE.b	%11000000
    536  27ea		       c0		      BYTE.b	%11000000
    537  27eb		       c0		      BYTE.b	%11000000
    538  27ec		       c0		      BYTE.b	%11000000
    539  27ed		       c0		      BYTE.b	%11000000
    540  27ee		       00		      BYTE.b	%00000000
    541  27ef		       00		      BYTE.b	%00000000
    542  27f0
    543  27f0					      if	>. != >[.+(bmp_96x2_1_height)]
    544  2800		       00 00 00 00*	      align	256
    545  2800					      endif
    546  2800
    547  2800				   bmp_96x2_1_07
    548  2800		       00		      BYTE.b	%00000000
    549  2801		       00		      BYTE.b	%00000000
    550  2802		       00		      BYTE.b	%00000000
    551  2803		       00		      BYTE.b	%00000000
    552  2804		       00		      BYTE.b	%00000000
    553  2805		       00		      BYTE.b	%00000000
    554  2806		       00		      BYTE.b	%00000000
    555  2807		       80		      BYTE.b	%10000000
    556  2808		       80		      BYTE.b	%10000000
    557  2809		       60		      BYTE.b	%01100000
    558  280a		       10		      BYTE.b	%00010000
    559  280b		       0e		      BYTE.b	%00001110
    560  280c		       fe		      BYTE.b	%11111110
    561  280d		       1f		      BYTE.b	%00011111
    562  280e		       f0		      BYTE.b	%11110000
    563  280f		       ef		      BYTE.b	%11101111
    564  2810		       9e		      BYTE.b	%10011110
    565  2811		       7e		      BYTE.b	%01111110
    566  2812		       fc		      BYTE.b	%11111100
    567  2813		       e0		      BYTE.b	%11100000
    568  2814		       00		      BYTE.b	%00000000
    569  2815		       80		      BYTE.b	%10000000
    570  2816		       00		      BYTE.b	%00000000
    571  2817		       90		      BYTE.b	%10010000
    572  2818		       9c		      BYTE.b	%10011100
    573  2819		       9c		      BYTE.b	%10011100
    574  281a		       90		      BYTE.b	%10010000
    575  281b		       80		      BYTE.b	%10000000
    576  281c		       00		      BYTE.b	%00000000
    577  281d		       00		      BYTE.b	%00000000
    578  281e		       00		      BYTE.b	%00000000
    579  281f		       00		      BYTE.b	%00000000
    580  2820		       00		      BYTE.b	%00000000
    581  2821		       00		      BYTE.b	%00000000
    582  2822		       00		      BYTE.b	%00000000
    583  2823		       ff		      BYTE.b	%11111111
    584  2824		       00		      BYTE.b	%00000000
    585  2825		       40		      BYTE.b	%01000000
    586  2826		       41		      BYTE.b	%01000001
    587  2827		       79		      BYTE.b	%01111001
    588  2828		       4c		      BYTE.b	%01001100
    589  2829		       45		      BYTE.b	%01000101
    590  282a		       65		      BYTE.b	%01100101
    591  282b		       78		      BYTE.b	%01111000
    592  282c		       00		      BYTE.b	%00000000
    593  282d		       01		      BYTE.b	%00000001
    594  282e		       0d		      BYTE.b	%00001101
    595  282f		       0d		      BYTE.b	%00001101
    596  2830		       01		      BYTE.b	%00000001
    597  2831		       c1		      BYTE.b	%11000001
    598  2832		       c1		      BYTE.b	%11000001
    599  2833		       e1		      BYTE.b	%11100001
    600  2834		       e1		      BYTE.b	%11100001
    601  2835		       e1		      BYTE.b	%11100001
    602  2836		       e1		      BYTE.b	%11100001
    603  2837		       e1		      BYTE.b	%11100001
    604  2838		       e1		      BYTE.b	%11100001
    605  2839		       e1		      BYTE.b	%11100001
    606  283a		       00		      BYTE.b	%00000000
    607  283b		       00		      BYTE.b	%00000000
    608  283c
    609  283c				  -	      if	>. != >[.+(bmp_96x2_1_height)]
    610  283c				  -	      align	256
    611  283c					      endif
    612  283c
    613  283c				   bmp_96x2_1_08
    614  283c		       00		      BYTE.b	%00000000
    615  283d		       00		      BYTE.b	%00000000
    616  283e		       00		      BYTE.b	%00000000
    617  283f		       00		      BYTE.b	%00000000
    618  2840		       00		      BYTE.b	%00000000
    619  2841		       00		      BYTE.b	%00000000
    620  2842		       00		      BYTE.b	%00000000
    621  2843		       00		      BYTE.b	%00000000
    622  2844		       00		      BYTE.b	%00000000
    623  2845		       00		      BYTE.b	%00000000
    624  2846		       00		      BYTE.b	%00000000
    625  2847		       7f		      BYTE.b	%01111111
    626  2848		       00		      BYTE.b	%00000000
    627  2849		       ff		      BYTE.b	%11111111
    628  284a		       00		      BYTE.b	%00000000
    629  284b		       fe		      BYTE.b	%11111110
    630  284c		       7f		      BYTE.b	%01111111
    631  284d		       01		      BYTE.b	%00000001
    632  284e		       00		      BYTE.b	%00000000
    633  284f		       00		      BYTE.b	%00000000
    634  2850		       00		      BYTE.b	%00000000
    635  2851		       00		      BYTE.b	%00000000
    636  2852		       00		      BYTE.b	%00000000
    637  2853		       00		      BYTE.b	%00000000
    638  2854		       00		      BYTE.b	%00000000
    639  2855		       00		      BYTE.b	%00000000
    640  2856		       00		      BYTE.b	%00000000
    641  2857		       00		      BYTE.b	%00000000
    642  2858		       00		      BYTE.b	%00000000
    643  2859		       00		      BYTE.b	%00000000
    644  285a		       00		      BYTE.b	%00000000
    645  285b		       00		      BYTE.b	%00000000
    646  285c		       00		      BYTE.b	%00000000
    647  285d		       00		      BYTE.b	%00000000
    648  285e		       00		      BYTE.b	%00000000
    649  285f		       ff		      BYTE.b	%11111111
    650  2860		       00		      BYTE.b	%00000000
    651  2861		       00		      BYTE.b	%00000000
    652  2862		       e3		      BYTE.b	%11100011
    653  2863		       16		      BYTE.b	%00010110
    654  2864		       37		      BYTE.b	%00110111
    655  2865		       e5		      BYTE.b	%11100101
    656  2866		       14		      BYTE.b	%00010100
    657  2867		       e3		      BYTE.b	%11100011
    658  2868		       00		      BYTE.b	%00000000
    659  2869		       ff		      BYTE.b	%11111111
    660  286a		       ff		      BYTE.b	%11111111
    661  286b		       e0		      BYTE.b	%11100000
    662  286c		       e0		      BYTE.b	%11100000
    663  286d		       e0		      BYTE.b	%11100000
    664  286e		       e0		      BYTE.b	%11100000
    665  286f		       ff		      BYTE.b	%11111111
    666  2870		       ff		      BYTE.b	%11111111
    667  2871		       e0		      BYTE.b	%11100000
    668  2872		       e0		      BYTE.b	%11100000
    669  2873		       e0		      BYTE.b	%11100000
    670  2874		       ff		      BYTE.b	%11111111
    671  2875		       ff		      BYTE.b	%11111111
    672  2876		       00		      BYTE.b	%00000000
    673  2877		       00		      BYTE.b	%00000000
    674  2878
    675  2878				  -	      if	>. != >[.+(bmp_96x2_1_height)]
    676  2878				  -	      align	256
    677  2878					      endif
    678  2878
    679  2878				   bmp_96x2_1_09
    680  2878		       00		      BYTE.b	%00000000
    681  2879		       00		      BYTE.b	%00000000
    682  287a		       00		      BYTE.b	%00000000
    683  287b		       00		      BYTE.b	%00000000
    684  287c		       00		      BYTE.b	%00000000
    685  287d		       00		      BYTE.b	%00000000
    686  287e		       00		      BYTE.b	%00000000
    687  287f		       00		      BYTE.b	%00000000
    688  2880		       7c		      BYTE.b	%01111100
    689  2881		       7c		      BYTE.b	%01111100
    690  2882		       7e		      BYTE.b	%01111110
    691  2883		       ff		      BYTE.b	%11111111
    692  2884		       0f		      BYTE.b	%00001111
    693  2885		       e0		      BYTE.b	%11100000
    694  2886		       0c		      BYTE.b	%00001100
    695  2887		       0c		      BYTE.b	%00001100
    696  2888		       82		      BYTE.b	%10000010
    697  2889		       81		      BYTE.b	%10000001
    698  288a		       61		      BYTE.b	%01100001
    699  288b		       10		      BYTE.b	%00010000
    700  288c		       0d		      BYTE.b	%00001101
    701  288d		       0d		      BYTE.b	%00001101
    702  288e		       01		      BYTE.b	%00000001
    703  288f		       03		      BYTE.b	%00000011
    704  2890		       03		      BYTE.b	%00000011
    705  2891		       01		      BYTE.b	%00000001
    706  2892		       01		      BYTE.b	%00000001
    707  2893		       01		      BYTE.b	%00000001
    708  2894		       01		      BYTE.b	%00000001
    709  2895		       01		      BYTE.b	%00000001
    710  2896		       00		      BYTE.b	%00000000
    711  2897		       00		      BYTE.b	%00000000
    712  2898		       00		      BYTE.b	%00000000
    713  2899		       00		      BYTE.b	%00000000
    714  289a		       00		      BYTE.b	%00000000
    715  289b		       e0		      BYTE.b	%11100000
    716  289c		       00		      BYTE.b	%00000000
    717  289d		       00		      BYTE.b	%00000000
    718  289e		       80		      BYTE.b	%10000000
    719  289f		       c0		      BYTE.b	%11000000
    720  28a0		       20		      BYTE.b	%00100000
    721  28a1		       80		      BYTE.b	%10000000
    722  28a2		       c0		      BYTE.b	%11000000
    723  28a3		       80		      BYTE.b	%10000000
    724  28a4		       00		      BYTE.b	%00000000
    725  28a5		       f8		      BYTE.b	%11111000
    726  28a6		       fb		      BYTE.b	%11111011
    727  28a7		       03		      BYTE.b	%00000011
    728  28a8		       00		      BYTE.b	%00000000
    729  28a9		       00		      BYTE.b	%00000000
    730  28aa		       00		      BYTE.b	%00000000
    731  28ab		       80		      BYTE.b	%10000000
    732  28ac		       80		      BYTE.b	%10000000
    733  28ad		       00		      BYTE.b	%00000000
    734  28ae		       00		      BYTE.b	%00000000
    735  28af		       00		      BYTE.b	%00000000
    736  28b0		       f8		      BYTE.b	%11111000
    737  28b1		       f8		      BYTE.b	%11111000
    738  28b2		       00		      BYTE.b	%00000000
    739  28b3		       00		      BYTE.b	%00000000
    740  28b4
    741  28b4				  -	      if	>. != >[.+(bmp_96x2_1_height)]
    742  28b4				  -	      align	256
    743  28b4					      endif
    744  28b4
    745  28b4				   bmp_96x2_1_10
    746  28b4		       00		      BYTE.b	%00000000
    747  28b5		       00		      BYTE.b	%00000000
    748  28b6		       00		      BYTE.b	%00000000
    749  28b7		       00		      BYTE.b	%00000000
    750  28b8		       00		      BYTE.b	%00000000
    751  28b9		       00		      BYTE.b	%00000000
    752  28ba		       00		      BYTE.b	%00000000
    753  28bb		       00		      BYTE.b	%00000000
    754  28bc		       00		      BYTE.b	%00000000
    755  28bd		       00		      BYTE.b	%00000000
    756  28be		       00		      BYTE.b	%00000000
    757  28bf		       80		      BYTE.b	%10000000
    758  28c0		       e0		      BYTE.b	%11100000
    759  28c1		       70		      BYTE.b	%01110000
    760  28c2		       1e		      BYTE.b	%00011110
    761  28c3		       0e		      BYTE.b	%00001110
    762  28c4		       0e		      BYTE.b	%00001110
    763  28c5		       8c		      BYTE.b	%10001100
    764  28c6		       90		      BYTE.b	%10010000
    765  28c7		       70		      BYTE.b	%01110000
    766  28c8		       f0		      BYTE.b	%11110000
    767  28c9		       f0		      BYTE.b	%11110000
    768  28ca		       f0		      BYTE.b	%11110000
    769  28cb		       f0		      BYTE.b	%11110000
    770  28cc		       f0		      BYTE.b	%11110000
    771  28cd		       f0		      BYTE.b	%11110000
    772  28ce		       f0		      BYTE.b	%11110000
    773  28cf		       fc		      BYTE.b	%11111100
    774  28d0		       fc		      BYTE.b	%11111100
    775  28d1		       fc		      BYTE.b	%11111100
    776  28d2		       7c		      BYTE.b	%01111100
    777  28d3		       7c		      BYTE.b	%01111100
    778  28d4		       7e		      BYTE.b	%01111110
    779  28d5		       1e		      BYTE.b	%00011110
    780  28d6		       00		      BYTE.b	%00000000
    781  28d7		       00		      BYTE.b	%00000000
    782  28d8		       00		      BYTE.b	%00000000
    783  28d9		       00		      BYTE.b	%00000000
    784  28da		       00		      BYTE.b	%00000000
    785  28db		       00		      BYTE.b	%00000000
    786  28dc		       00		      BYTE.b	%00000000
    787  28dd		       00		      BYTE.b	%00000000
    788  28de		       00		      BYTE.b	%00000000
    789  28df		       00		      BYTE.b	%00000000
    790  28e0		       00		      BYTE.b	%00000000
    791  28e1		       00		      BYTE.b	%00000000
    792  28e2		       00		      BYTE.b	%00000000
    793  28e3		       00		      BYTE.b	%00000000
    794  28e4		       00		      BYTE.b	%00000000
    795  28e5		       00		      BYTE.b	%00000000
    796  28e6		       00		      BYTE.b	%00000000
    797  28e7		       00		      BYTE.b	%00000000
    798  28e8		       00		      BYTE.b	%00000000
    799  28e9		       00		      BYTE.b	%00000000
    800  28ea		       00		      BYTE.b	%00000000
    801  28eb		       00		      BYTE.b	%00000000
    802  28ec		       00		      BYTE.b	%00000000
    803  28ed		       00		      BYTE.b	%00000000
    804  28ee		       00		      BYTE.b	%00000000
    805  28ef		       00		      BYTE.b	%00000000
    806  28f0
    807  28f0					      if	>. != >[.+(bmp_96x2_1_height)]
    808  2900		       00 00 00 00*	      align	256
    809  2900					      endif
    810  2900
    811  2900				   bmp_96x2_1_11
    812  2900		       00		      BYTE.b	%00000000
    813  2901		       00		      BYTE.b	%00000000
    814  2902		       00		      BYTE.b	%00000000
    815  2903		       00		      BYTE.b	%00000000
    816  2904		       00		      BYTE.b	%00000000
    817  2905		       00		      BYTE.b	%00000000
    818  2906		       00		      BYTE.b	%00000000
    819  2907		       00		      BYTE.b	%00000000
    820  2908		       00		      BYTE.b	%00000000
    821  2909		       00		      BYTE.b	%00000000
    822  290a		       00		      BYTE.b	%00000000
    823  290b		       00		      BYTE.b	%00000000
    824  290c		       00		      BYTE.b	%00000000
    825  290d		       00		      BYTE.b	%00000000
    826  290e		       00		      BYTE.b	%00000000
    827  290f		       00		      BYTE.b	%00000000
    828  2910		       00		      BYTE.b	%00000000
    829  2911		       00		      BYTE.b	%00000000
    830  2912		       00		      BYTE.b	%00000000
    831  2913		       00		      BYTE.b	%00000000
    832  2914		       00		      BYTE.b	%00000000
    833  2915		       00		      BYTE.b	%00000000
    834  2916		       00		      BYTE.b	%00000000
    835  2917		       00		      BYTE.b	%00000000
    836  2918		       00		      BYTE.b	%00000000
    837  2919		       00		      BYTE.b	%00000000
    838  291a		       00		      BYTE.b	%00000000
    839  291b		       00		      BYTE.b	%00000000
    840  291c		       00		      BYTE.b	%00000000
    841  291d		       00		      BYTE.b	%00000000
    842  291e		       00		      BYTE.b	%00000000
    843  291f		       00		      BYTE.b	%00000000
    844  2920		       00		      BYTE.b	%00000000
    845  2921		       00		      BYTE.b	%00000000
    846  2922		       00		      BYTE.b	%00000000
    847  2923		       00		      BYTE.b	%00000000
    848  2924		       00		      BYTE.b	%00000000
    849  2925		       00		      BYTE.b	%00000000
    850  2926		       00		      BYTE.b	%00000000
    851  2927		       00		      BYTE.b	%00000000
    852  2928		       00		      BYTE.b	%00000000
    853  2929		       00		      BYTE.b	%00000000
    854  292a		       00		      BYTE.b	%00000000
    855  292b		       00		      BYTE.b	%00000000
    856  292c		       00		      BYTE.b	%00000000
    857  292d		       00		      BYTE.b	%00000000
    858  292e		       00		      BYTE.b	%00000000
    859  292f		       00		      BYTE.b	%00000000
    860  2930		       00		      BYTE.b	%00000000
    861  2931		       00		      BYTE.b	%00000000
    862  2932		       00		      BYTE.b	%00000000
    863  2933		       00		      BYTE.b	%00000000
    864  2934		       00		      BYTE.b	%00000000
    865  2935		       00		      BYTE.b	%00000000
    866  2936		       00		      BYTE.b	%00000000
    867  2937		       00		      BYTE.b	%00000000
    868  2938		       00		      BYTE.b	%00000000
    869  2939		       00		      BYTE.b	%00000000
    870  293a		       00		      BYTE.b	%00000000
    871  293b		       00		      BYTE.b	%00000000
    872  293c
------- FILE titlescreen/asm/titlescreen.asm
    274  293c					      endif
    275  293c				  -	      ifconst	mk_96x2_2_on
    276  293c				  -	      include	"titlescreen/96x2_2_image.asm"
    277  293c					      endif
    278  293c				  -	      ifconst	mk_96x2_3_on
    279  293c				  -	      include	"titlescreen/96x2_3_image.asm"
    280  293c					      endif
    281  293c				  -	      ifconst	mk_96x2_4_on
    282  293c				  -	      include	"titlescreen/96x2_4_image.asm"
    283  293c					      endif
    284  293c				  -	      ifconst	mk_96x2_5_on
    285  293c				  -	      include	"titlescreen/96x2_5_image.asm"
    286  293c					      endif
    287  293c				  -	      ifconst	mk_96x2_6_on
    288  293c				  -	      include	"titlescreen/96x2_6_image.asm"
    289  293c					      endif
    290  293c				  -	      ifconst	mk_96x2_7_on
    291  293c				  -	      include	"titlescreen/96x2_7_image.asm"
    292  293c					      endif
    293  293c				  -	      ifconst	mk_96x2_8_on
    294  293c				  -	      include	"titlescreen/96x2_8_image.asm"
    295  293c					      endif
    296  293c
    297  293c				  -	      ifconst	mk_player_on
    298  293c				  -	      include	"titlescreen/player_image.asm"
    299  293c					      endif
    300  293c
    301  293c					      ifconst	mk_score_on
------- FILE titlescreen/score_image.asm LEVEL 3 PASS 3
      0  293c					      include	"titlescreen/score_image.asm"
      1  293c							; feel free to modify the score graphics - just keep each digit 8 high
      2  293c							; if you're looking to want to modify any one font, pick on the
      3  293c
      4  293c				  -	      ifnconst	scorecolor
      5  293c				  -scorecolor
      6  293c					      endif
      7  293c							; ** change this value for a different scorecolor under DPC+
      8  293c							;    for other kernels, just use the scorecolor variable
      9  293c		       0f		      .byte.b	$0f
     10  293d
     11  293d				  -	      ifnconst	NOFONT
     12  293d				  -NOFONT     =	0
     13  293d					      endif
     14  293d				  -	      ifnconst	STOCK
     15  293d				  -STOCK      =	1	;_FONTNAME
     16  293d					      endif
     17  293d				  -	      ifnconst	NEWCENTURY
     18  293d				  -NEWCENTURY =	2	;_FONTNAME
     19  293d					      endif
     20  293d				  -	      ifnconst	WHIMSEY
     21  293d				  -WHIMSEY    =	3	;_FONTNAME
     22  293d					      endif
     23  293d				  -	      ifnconst	ALARMCLOCK
     24  293d				  -ALARMCLOCK =	4	;_FONTNAME
     25  293d					      endif
     26  293d				  -	      ifnconst	HANDWRITTEN
     27  293d				  -HANDWRITTEN =	5	;_FONTNAME
     28  293d					      endif
     29  293d				  -	      ifnconst	INTERRUPTED
     30  293d				  -INTERRUPTED =	6	;_FONTNAME
     31  293d					      endif
     32  293d				  -	      ifnconst	TINY
     33  293d				  -TINY       =	7	;_FONTNAME
     34  293d					      endif
     35  293d				  -	      ifnconst	RETROPUTER
     36  293d				  -RETROPUTER =	8	;_FONTNAME
     37  293d					      endif
     38  293d				  -	      ifnconst	CURVES
     39  293d				  -CURVES     =	9	;_FONTNAME
     40  293d					      endif
     41  293d				  -	      ifnconst	HUSKY
     42  293d				  -HUSKY      =	10	;_FONTNAME
     43  293d					      endif
     44  293d				  -	      ifnconst	SNAKE
     45  293d				  -SNAKE      =	11	;_FONTNAME
     46  293d					      endif
     47  293d				  -	      ifnconst	PLOK
     48  293d				  -PLOK       =	13	;_FONTNAME
     49  293d					      endif
     50  293d
     51  293d				  -	      ifnconst	SYMBOLS
     52  293d				  -SYMBOLS    =	0	;_FONTNAME
     53  293d					      endif
     54  293d
     55  293d							; ### setup some defaults
     56  293d				  -	      ifnconst	fontstyle
     57  293d				  -fontstyle  =	STOCK
     58  293d					      endif
     59  293d
     60  293d							;fix up the table alignment, if necessary
     61  293d				  -	      if	>. != >[.+81]
     62  293d				  -	      align	256
     63  293d					      endif
     64  293d
     65  293d
     66  293d				   miniscoretable
     67  293d
     68  293d					      if	fontstyle == STOCK
     69  293d
     70  293d							;byte %00000000 ; STOCK
     71  293d
     72  293d		       3c		      .byte.b	%00111100	; STOCK
     73  293e		       66		      .byte.b	%01100110	; STOCK
     74  293f		       66		      .byte.b	%01100110	; STOCK
     75  2940		       66		      .byte.b	%01100110	; STOCK
     76  2941		       66		      .byte.b	%01100110	; STOCK
     77  2942		       66		      .byte.b	%01100110	; STOCK
     78  2943		       66		      .byte.b	%01100110	; STOCK
     79  2944		       3c		      .byte.b	%00111100	; STOCK
     80  2945
     81  2945							;byte %00000000 ; STOCK
     82  2945
     83  2945		       7e		      .byte.b	%01111110	; STOCK
     84  2946		       18		      .byte.b	%00011000	; STOCK
     85  2947		       18		      .byte.b	%00011000	; STOCK
     86  2948		       18		      .byte.b	%00011000	; STOCK
     87  2949		       18		      .byte.b	%00011000	; STOCK
     88  294a		       38		      .byte.b	%00111000	; STOCK
     89  294b		       18		      .byte.b	%00011000	; STOCK
     90  294c		       08		      .byte.b	%00001000	; STOCK
     91  294d
     92  294d							;byte %00000000 ; STOCK
     93  294d
     94  294d		       7e		      .byte.b	%01111110	; STOCK
     95  294e		       60		      .byte.b	%01100000	; STOCK
     96  294f		       60		      .byte.b	%01100000	; STOCK
     97  2950		       3c		      .byte.b	%00111100	; STOCK
     98  2951		       06		      .byte.b	%00000110	; STOCK
     99  2952		       06		      .byte.b	%00000110	; STOCK
    100  2953		       46		      .byte.b	%01000110	; STOCK
    101  2954		       3c		      .byte.b	%00111100	; STOCK
    102  2955
    103  2955							;byte %00000000 ; STOCK
    104  2955
    105  2955		       3c		      .byte.b	%00111100	; STOCK
    106  2956		       46		      .byte.b	%01000110	; STOCK
    107  2957		       06		      .byte.b	%00000110	; STOCK
    108  2958		       06		      .byte.b	%00000110	; STOCK
    109  2959		       1c		      .byte.b	%00011100	; STOCK
    110  295a		       06		      .byte.b	%00000110	; STOCK
    111  295b		       46		      .byte.b	%01000110	; STOCK
    112  295c		       3c		      .byte.b	%00111100	; STOCK
    113  295d
    114  295d							;byte %00000000 ; STOCK
    115  295d
    116  295d		       0c		      .byte.b	%00001100	; STOCK
    117  295e		       0c		      .byte.b	%00001100	; STOCK
    118  295f		       7e		      .byte.b	%01111110	; STOCK
    119  2960		       4c		      .byte.b	%01001100	; STOCK
    120  2961		       4c		      .byte.b	%01001100	; STOCK
    121  2962		       2c		      .byte.b	%00101100	; STOCK
    122  2963		       1c		      .byte.b	%00011100	; STOCK
    123  2964		       0c		      .byte.b	%00001100	; STOCK
    124  2965
    125  2965							;byte %00000000 ; STOCK
    126  2965
    127  2965		       3c		      .byte.b	%00111100	; STOCK
    128  2966		       46		      .byte.b	%01000110	; STOCK
    129  2967		       06		      .byte.b	%00000110	; STOCK
    130  2968		       06		      .byte.b	%00000110	; STOCK
    131  2969		       3c		      .byte.b	%00111100	; STOCK
    132  296a		       60		      .byte.b	%01100000	; STOCK
    133  296b		       60		      .byte.b	%01100000	; STOCK
    134  296c		       7e		      .byte.b	%01111110	; STOCK
    135  296d
    136  296d							;byte %00000000 ; STOCK
    137  296d
    138  296d		       3c		      .byte.b	%00111100	; STOCK
    139  296e		       66		      .byte.b	%01100110	; STOCK
    140  296f		       66		      .byte.b	%01100110	; STOCK
    141  2970		       66		      .byte.b	%01100110	; STOCK
    142  2971		       7c		      .byte.b	%01111100	; STOCK
    143  2972		       60		      .byte.b	%01100000	; STOCK
    144  2973		       62		      .byte.b	%01100010	; STOCK
    145  2974		       3c		      .byte.b	%00111100	; STOCK
    146  2975
    147  2975							;byte %00000000 ; STOCK
    148  2975
    149  2975		       30		      .byte.b	%00110000	; STOCK
    150  2976		       30		      .byte.b	%00110000	; STOCK
    151  2977		       30		      .byte.b	%00110000	; STOCK
    152  2978		       18		      .byte.b	%00011000	; STOCK
    153  2979		       0c		      .byte.b	%00001100	; STOCK
    154  297a		       06		      .byte.b	%00000110	; STOCK
    155  297b		       42		      .byte.b	%01000010	; STOCK
    156  297c		       3e		      .byte.b	%00111110	; STOCK
    157  297d
    158  297d							;byte %00000000 ; STOCK
    159  297d
    160  297d		       3c		      .byte.b	%00111100	; STOCK
    161  297e		       66		      .byte.b	%01100110	; STOCK
    162  297f		       66		      .byte.b	%01100110	; STOCK
    163  2980		       66		      .byte.b	%01100110	; STOCK
    164  2981		       3c		      .byte.b	%00111100	; STOCK
    165  2982		       66		      .byte.b	%01100110	; STOCK
    166  2983		       66		      .byte.b	%01100110	; STOCK
    167  2984		       3c		      .byte.b	%00111100	; STOCK
    168  2985
    169  2985							;byte %00000000 ; STOCK
    170  2985
    171  2985		       3c		      .byte.b	%00111100	; STOCK
    172  2986		       46		      .byte.b	%01000110	; STOCK
    173  2987		       06		      .byte.b	%00000110	; STOCK
    174  2988		       3e		      .byte.b	%00111110	; STOCK
    175  2989		       66		      .byte.b	%01100110	; STOCK
    176  298a		       66		      .byte.b	%01100110	; STOCK
    177  298b		       66		      .byte.b	%01100110	; STOCK
    178  298c		       3c		      .byte.b	%00111100	; STOCK
    179  298d
    180  298d					      endif		; STOCK
    181  298d
    182  298d				  -	      if	fontstyle == NEWCENTURY
    183  298d				  -			;byte %00000000 ; NEWCENTURY
    184  298d				  -
    185  298d				  -	      .byte	%00111100	; NEWCENTURY
    186  298d				  -	      .byte	%01000010	; NEWCENTURY
    187  298d				  -	      .byte	%01000010	; NEWCENTURY
    188  298d				  -	      .byte	%01000010	; NEWCENTURY
    189  298d				  -	      .byte	%00100100	; NEWCENTURY
    190  298d				  -	      .byte	%00100100	; NEWCENTURY
    191  298d				  -	      .byte	%00100100	; NEWCENTURY
    192  298d				  -	      .byte	%00011000	; NEWCENTURY
    193  298d				  -
    194  298d				  -			;byte %00000000 ; NEWCENTURY
    195  298d				  -
    196  298d				  -	      .byte	%00001000	; NEWCENTURY
    197  298d				  -	      .byte	%00001000	; NEWCENTURY
    198  298d				  -	      .byte	%00001000	; NEWCENTURY
    199  298d				  -	      .byte	%00001000	; NEWCENTURY
    200  298d				  -	      .byte	%00001000	; NEWCENTURY
    201  298d				  -	      .byte	%00001000	; NEWCENTURY
    202  298d				  -	      .byte	%00001000	; NEWCENTURY
    203  298d				  -	      .byte	%00001000	; NEWCENTURY
    204  298d				  -
    205  298d				  -			;byte %00000000 ; NEWCENTURY
    206  298d				  -
    207  298d				  -	      .byte	%01111110	; NEWCENTURY
    208  298d				  -	      .byte	%01000000	; NEWCENTURY
    209  298d				  -	      .byte	%01000000	; NEWCENTURY
    210  298d				  -	      .byte	%00100000	; NEWCENTURY
    211  298d				  -	      .byte	%00011100	; NEWCENTURY
    212  298d				  -	      .byte	%00000010	; NEWCENTURY
    213  298d				  -	      .byte	%00000010	; NEWCENTURY
    214  298d				  -	      .byte	%00011100	; NEWCENTURY
    215  298d				  -
    216  298d				  -			;byte %00000000 ; NEWCENTURY
    217  298d				  -
    218  298d				  -	      .byte	%01111100	; NEWCENTURY
    219  298d				  -	      .byte	%00000010	; NEWCENTURY
    220  298d				  -	      .byte	%00000010	; NEWCENTURY
    221  298d				  -	      .byte	%00000010	; NEWCENTURY
    222  298d				  -	      .byte	%00111100	; NEWCENTURY
    223  298d				  -	      .byte	%00000010	; NEWCENTURY
    224  298d				  -	      .byte	%00000010	; NEWCENTURY
    225  298d				  -	      .byte	%00011100	; NEWCENTURY
    226  298d				  -
    227  298d				  -			;byte %00000000 ; NEWCENTURY
    228  298d				  -
    229  298d				  -	      .byte	%00000010	; NEWCENTURY
    230  298d				  -	      .byte	%00000010	; NEWCENTURY
    231  298d				  -	      .byte	%00000010	; NEWCENTURY
    232  298d				  -	      .byte	%00111110	; NEWCENTURY
    233  298d				  -	      .byte	%00100010	; NEWCENTURY
    234  298d				  -	      .byte	%00100010	; NEWCENTURY
    235  298d				  -	      .byte	%00010010	; NEWCENTURY
    236  298d				  -	      .byte	%00010010	; NEWCENTURY
    237  298d				  -
    238  298d				  -			;byte %00000000 ; NEWCENTURY
    239  298d				  -
    240  298d				  -	      .byte	%01111100	; NEWCENTURY
    241  298d				  -	      .byte	%00000010	; NEWCENTURY
    242  298d				  -	      .byte	%00000010	; NEWCENTURY
    243  298d				  -	      .byte	%00000010	; NEWCENTURY
    244  298d				  -	      .byte	%01111100	; NEWCENTURY
    245  298d				  -	      .byte	%01000000	; NEWCENTURY
    246  298d				  -	      .byte	%01000000	; NEWCENTURY
    247  298d				  -	      .byte	%01111000	; NEWCENTURY
    248  298d				  -
    249  298d				  -			;byte %00000000 ; NEWCENTURY
    250  298d				  -
    251  298d				  -	      .byte	%00111100	; NEWCENTURY
    252  298d				  -	      .byte	%01000010	; NEWCENTURY
    253  298d				  -	      .byte	%01000010	; NEWCENTURY
    254  298d				  -	      .byte	%01000010	; NEWCENTURY
    255  298d				  -	      .byte	%01111100	; NEWCENTURY
    256  298d				  -	      .byte	%01000000	; NEWCENTURY
    257  298d				  -	      .byte	%01000000	; NEWCENTURY
    258  298d				  -	      .byte	%00110000	; NEWCENTURY
    259  298d				  -
    260  298d				  -			;byte %00000000 ; NEWCENTURY
    261  298d				  -
    262  298d				  -	      .byte	%00010000	; NEWCENTURY
    263  298d				  -	      .byte	%00010000	; NEWCENTURY
    264  298d				  -	      .byte	%00001000	; NEWCENTURY
    265  298d				  -	      .byte	%00001000	; NEWCENTURY
    266  298d				  -	      .byte	%00000100	; NEWCENTURY
    267  298d				  -	      .byte	%00000100	; NEWCENTURY
    268  298d				  -	      .byte	%00000010	; NEWCENTURY
    269  298d				  -	      .byte	%00011110	; NEWCENTURY
    270  298d				  -
    271  298d				  -			;byte %00000000 ; NEWCENTURY
    272  298d				  -
    273  298d				  -	      .byte	%00111100	; NEWCENTURY
    274  298d				  -	      .byte	%01000010	; NEWCENTURY
    275  298d				  -	      .byte	%01000010	; NEWCENTURY
    276  298d				  -	      .byte	%01000010	; NEWCENTURY
    277  298d				  -	      .byte	%00111100	; NEWCENTURY
    278  298d				  -	      .byte	%00100100	; NEWCENTURY
    279  298d				  -	      .byte	%00100100	; NEWCENTURY
    280  298d				  -	      .byte	%00011000	; NEWCENTURY
    281  298d				  -
    282  298d				  -			;byte %00000000 ; NEWCENTURY
    283  298d				  -
    284  298d				  -	      .byte	%00111100	; NEWCENTURY
    285  298d				  -	      .byte	%00000010	; NEWCENTURY
    286  298d				  -	      .byte	%00000010	; NEWCENTURY
    287  298d				  -	      .byte	%00000010	; NEWCENTURY
    288  298d				  -	      .byte	%00001110	; NEWCENTURY
    289  298d				  -	      .byte	%00010010	; NEWCENTURY
    290  298d				  -	      .byte	%00010010	; NEWCENTURY
    291  298d				  -	      .byte	%00001100	; NEWCENTURY
    292  298d				  -
    293  298d					      endif		; NEWCENTURY
    294  298d
    295  298d				  -	      if	fontstyle == WHIMSEY
    296  298d				  -			;byte %00000000 ; WHIMSEY
    297  298d				  -
    298  298d				  -	      .byte	%00111100	; WHIMSEY
    299  298d				  -	      .byte	%01111110	; WHIMSEY
    300  298d				  -	      .byte	%01111110	; WHIMSEY
    301  298d				  -	      .byte	%01111110	; WHIMSEY
    302  298d				  -	      .byte	%01110110	; WHIMSEY
    303  298d				  -	      .byte	%01110110	; WHIMSEY
    304  298d				  -	      .byte	%01110110	; WHIMSEY
    305  298d				  -	      .byte	%00111100	; WHIMSEY
    306  298d				  -
    307  298d				  -			;byte %00000000 ; WHIMSEY
    308  298d				  -
    309  298d				  -	      .byte	%01111110	; WHIMSEY
    310  298d				  -	      .byte	%01111110	; WHIMSEY
    311  298d				  -	      .byte	%01111110	; WHIMSEY
    312  298d				  -	      .byte	%00011000	; WHIMSEY
    313  298d				  -	      .byte	%00011000	; WHIMSEY
    314  298d				  -	      .byte	%00011000	; WHIMSEY
    315  298d				  -	      .byte	%01111000	; WHIMSEY
    316  298d				  -	      .byte	%00011000	; WHIMSEY
    317  298d				  -
    318  298d				  -			;byte %00000000 ; WHIMSEY
    319  298d				  -
    320  298d				  -	      .byte	%01111110	; WHIMSEY
    321  298d				  -	      .byte	%01111110	; WHIMSEY
    322  298d				  -	      .byte	%01111110	; WHIMSEY
    323  298d				  -	      .byte	%01111000	; WHIMSEY
    324  298d				  -	      .byte	%00111100	; WHIMSEY
    325  298d				  -	      .byte	%00001110	; WHIMSEY
    326  298d				  -	      .byte	%01100110	; WHIMSEY
    327  298d				  -	      .byte	%00111100	; WHIMSEY
    328  298d				  -
    329  298d				  -			;byte %00000000 ; WHIMSEY
    330  298d				  -
    331  298d				  -	      .byte	%00111100	; WHIMSEY
    332  298d				  -	      .byte	%01111110	; WHIMSEY
    333  298d				  -	      .byte	%01111110	; WHIMSEY
    334  298d				  -	      .byte	%01101110	; WHIMSEY
    335  298d				  -	      .byte	%00001110	; WHIMSEY
    336  298d				  -	      .byte	%00111100	; WHIMSEY
    337  298d				  -	      .byte	%00011100	; WHIMSEY
    338  298d				  -	      .byte	%01111110	; WHIMSEY
    339  298d				  -
    340  298d				  -			;byte %00000000 ; WHIMSEY
    341  298d				  -
    342  298d				  -	      .byte	%00011100	; WHIMSEY
    343  298d				  -	      .byte	%00011100	; WHIMSEY
    344  298d				  -	      .byte	%01111110	; WHIMSEY
    345  298d				  -	      .byte	%01011100	; WHIMSEY
    346  298d				  -	      .byte	%01011100	; WHIMSEY
    347  298d				  -	      .byte	%00011100	; WHIMSEY
    348  298d				  -	      .byte	%00011100	; WHIMSEY
    349  298d				  -	      .byte	%00011100	; WHIMSEY
    350  298d				  -
    351  298d				  -			;byte %00000000 ; WHIMSEY
    352  298d				  -
    353  298d				  -	      .byte	%00111100	; WHIMSEY
    354  298d				  -	      .byte	%01111110	; WHIMSEY
    355  298d				  -	      .byte	%01111110	; WHIMSEY
    356  298d				  -	      .byte	%01101110	; WHIMSEY
    357  298d				  -	      .byte	%00001110	; WHIMSEY
    358  298d				  -	      .byte	%01111100	; WHIMSEY
    359  298d				  -	      .byte	%01110000	; WHIMSEY
    360  298d				  -	      .byte	%01111110	; WHIMSEY
    361  298d				  -
    362  298d				  -			;byte %00000000 ; WHIMSEY
    363  298d				  -
    364  298d				  -	      .byte	%00111100	; WHIMSEY
    365  298d				  -	      .byte	%01111110	; WHIMSEY
    366  298d				  -	      .byte	%01111110	; WHIMSEY
    367  298d				  -	      .byte	%01110110	; WHIMSEY
    368  298d				  -	      .byte	%01110110	; WHIMSEY
    369  298d				  -	      .byte	%01111100	; WHIMSEY
    370  298d				  -	      .byte	%01110000	; WHIMSEY
    371  298d				  -	      .byte	%00111110	; WHIMSEY
    372  298d				  -
    373  298d				  -			;byte %00000000 ; WHIMSEY
    374  298d				  -
    375  298d				  -	      .byte	%01111000	; WHIMSEY
    376  298d				  -	      .byte	%01111000	; WHIMSEY
    377  298d				  -	      .byte	%01111000	; WHIMSEY
    378  298d				  -	      .byte	%00111100	; WHIMSEY
    379  298d				  -	      .byte	%00011100	; WHIMSEY
    380  298d				  -	      .byte	%00001110	; WHIMSEY
    381  298d				  -	      .byte	%00001110	; WHIMSEY
    382  298d				  -	      .byte	%01111110	; WHIMSEY
    383  298d				  -
    384  298d				  -			;byte %00000000 ; WHIMSEY
    385  298d				  -
    386  298d				  -	      .byte	%00111100	; WHIMSEY
    387  298d				  -	      .byte	%01111110	; WHIMSEY
    388  298d				  -	      .byte	%01111110	; WHIMSEY
    389  298d				  -	      .byte	%01110110	; WHIMSEY
    390  298d				  -	      .byte	%01110110	; WHIMSEY
    391  298d				  -	      .byte	%00111100	; WHIMSEY
    392  298d				  -	      .byte	%01110110	; WHIMSEY
    393  298d				  -	      .byte	%00111100	; WHIMSEY
    394  298d				  -
    395  298d				  -			;byte %00000000 ; WHIMSEY
    396  298d				  -
    397  298d				  -	      .byte	%00111100	; WHIMSEY
    398  298d				  -	      .byte	%01111110	; WHIMSEY
    399  298d				  -	      .byte	%01111110	; WHIMSEY
    400  298d				  -	      .byte	%01110110	; WHIMSEY
    401  298d				  -	      .byte	%00000110	; WHIMSEY
    402  298d				  -	      .byte	%00111110	; WHIMSEY
    403  298d				  -	      .byte	%01110110	; WHIMSEY
    404  298d				  -	      .byte	%00111100	; WHIMSEY
    405  298d				  -
    406  298d					      endif		; WHIMSEY
    407  298d
    408  298d				  -	      if	fontstyle == ALARMCLOCK
    409  298d				  -
    410  298d				  -			;byte %00000000 ; ALARMCLOCK
    411  298d				  -
    412  298d				  -	      .byte	%00111100	; ALARMCLOCK
    413  298d				  -	      .byte	%01000010	; ALARMCLOCK
    414  298d				  -	      .byte	%01000010	; ALARMCLOCK
    415  298d				  -	      .byte	%01000010	; ALARMCLOCK
    416  298d				  -	      .byte	%00000000	; ALARMCLOCK
    417  298d				  -	      .byte	%01000010	; ALARMCLOCK
    418  298d				  -	      .byte	%01000010	; ALARMCLOCK
    419  298d				  -	      .byte	%00111100	; ALARMCLOCK
    420  298d				  -
    421  298d				  -			;byte %00000000 ; ALARMCLOCK
    422  298d				  -
    423  298d				  -	      .byte	%00000000	; ALARMCLOCK
    424  298d				  -	      .byte	%00000010	; ALARMCLOCK
    425  298d				  -	      .byte	%00000010	; ALARMCLOCK
    426  298d				  -	      .byte	%00000010	; ALARMCLOCK
    427  298d				  -	      .byte	%00000000	; ALARMCLOCK
    428  298d				  -	      .byte	%00000010	; ALARMCLOCK
    429  298d				  -	      .byte	%00000010	; ALARMCLOCK
    430  298d				  -	      .byte	%00000000	; ALARMCLOCK
    431  298d				  -
    432  298d				  -			;byte %00000000 ; ALARMCLOCK
    433  298d				  -
    434  298d				  -	      .byte	%00111100	; ALARMCLOCK
    435  298d				  -	      .byte	%01000000	; ALARMCLOCK
    436  298d				  -	      .byte	%01000000	; ALARMCLOCK
    437  298d				  -	      .byte	%01000000	; ALARMCLOCK
    438  298d				  -	      .byte	%00111100	; ALARMCLOCK
    439  298d				  -	      .byte	%00000010	; ALARMCLOCK
    440  298d				  -	      .byte	%00000010	; ALARMCLOCK
    441  298d				  -	      .byte	%00111100	; ALARMCLOCK
    442  298d				  -
    443  298d				  -			;byte %00000000 ; ALARMCLOCK
    444  298d				  -
    445  298d				  -	      .byte	%00111100	; ALARMCLOCK
    446  298d				  -	      .byte	%00000010	; ALARMCLOCK
    447  298d				  -	      .byte	%00000010	; ALARMCLOCK
    448  298d				  -	      .byte	%00000010	; ALARMCLOCK
    449  298d				  -	      .byte	%00111100	; ALARMCLOCK
    450  298d				  -	      .byte	%00000010	; ALARMCLOCK
    451  298d				  -	      .byte	%00000010	; ALARMCLOCK
    452  298d				  -	      .byte	%00111100	; ALARMCLOCK
    453  298d				  -
    454  298d				  -			;byte %00000000 ; ALARMCLOCK
    455  298d				  -
    456  298d				  -	      .byte	%00000000	; ALARMCLOCK
    457  298d				  -	      .byte	%00000010	; ALARMCLOCK
    458  298d				  -	      .byte	%00000010	; ALARMCLOCK
    459  298d				  -	      .byte	%00000010	; ALARMCLOCK
    460  298d				  -	      .byte	%00111100	; ALARMCLOCK
    461  298d				  -	      .byte	%01000010	; ALARMCLOCK
    462  298d				  -	      .byte	%01000010	; ALARMCLOCK
    463  298d				  -	      .byte	%00000000	; ALARMCLOCK
    464  298d				  -
    465  298d				  -			;byte %00000000 ; ALARMCLOCK
    466  298d				  -
    467  298d				  -	      .byte	%00111100	; ALARMCLOCK
    468  298d				  -	      .byte	%00000010	; ALARMCLOCK
    469  298d				  -	      .byte	%00000010	; ALARMCLOCK
    470  298d				  -	      .byte	%00000010	; ALARMCLOCK
    471  298d				  -	      .byte	%00111100	; ALARMCLOCK
    472  298d				  -	      .byte	%01000000	; ALARMCLOCK
    473  298d				  -	      .byte	%01000000	; ALARMCLOCK
    474  298d				  -	      .byte	%00111100	; ALARMCLOCK
    475  298d				  -
    476  298d				  -			;byte %00000000 ; ALARMCLOCK
    477  298d				  -
    478  298d				  -	      .byte	%00111100	; ALARMCLOCK
    479  298d				  -	      .byte	%01000010	; ALARMCLOCK
    480  298d				  -	      .byte	%01000010	; ALARMCLOCK
    481  298d				  -	      .byte	%01000010	; ALARMCLOCK
    482  298d				  -	      .byte	%00111100	; ALARMCLOCK
    483  298d				  -	      .byte	%01000000	; ALARMCLOCK
    484  298d				  -	      .byte	%01000000	; ALARMCLOCK
    485  298d				  -	      .byte	%00111100	; ALARMCLOCK
    486  298d				  -
    487  298d				  -			;byte %00000000 ; ALARMCLOCK
    488  298d				  -
    489  298d				  -	      .byte	%00000000	; ALARMCLOCK
    490  298d				  -	      .byte	%00000010	; ALARMCLOCK
    491  298d				  -	      .byte	%00000010	; ALARMCLOCK
    492  298d				  -	      .byte	%00000010	; ALARMCLOCK
    493  298d				  -	      .byte	%00000000	; ALARMCLOCK
    494  298d				  -	      .byte	%00000010	; ALARMCLOCK
    495  298d				  -	      .byte	%00000010	; ALARMCLOCK
    496  298d				  -	      .byte	%00111100	; ALARMCLOCK
    497  298d				  -
    498  298d				  -			;byte %00000000 ; ALARMCLOCK
    499  298d				  -
    500  298d				  -	      .byte	%00111100	; ALARMCLOCK
    501  298d				  -	      .byte	%01000010	; ALARMCLOCK
    502  298d				  -	      .byte	%01000010	; ALARMCLOCK
    503  298d				  -	      .byte	%01000010	; ALARMCLOCK
    504  298d				  -	      .byte	%00111100	; ALARMCLOCK
    505  298d				  -	      .byte	%01000010	; ALARMCLOCK
    506  298d				  -	      .byte	%01000010	; ALARMCLOCK
    507  298d				  -	      .byte	%00111100	; ALARMCLOCK
    508  298d				  -
    509  298d				  -			;byte %00000000 ; ALARMCLOCK
    510  298d				  -
    511  298d				  -	      .byte	%00111100	; ALARMCLOCK
    512  298d				  -	      .byte	%00000010	; ALARMCLOCK
    513  298d				  -	      .byte	%00000010	; ALARMCLOCK
    514  298d				  -	      .byte	%00000010	; ALARMCLOCK
    515  298d				  -	      .byte	%00111100	; ALARMCLOCK
    516  298d				  -	      .byte	%01000010	; ALARMCLOCK
    517  298d				  -	      .byte	%01000010	; ALARMCLOCK
    518  298d				  -	      .byte	%00111100	; ALARMCLOCK
    519  298d				  -
    520  298d				  -
    521  298d					      endif		; ALARMCLOCK
    522  298d
    523  298d				  -	      if	fontstyle == HANDWRITTEN
    524  298d				  -
    525  298d				  -			;byte %00000000 ; HANDWRITTEN
    526  298d				  -
    527  298d				  -	      .byte	%00110000	; HANDWRITTEN
    528  298d				  -	      .byte	%01001000	; HANDWRITTEN
    529  298d				  -	      .byte	%01001000	; HANDWRITTEN
    530  298d				  -	      .byte	%01001000	; HANDWRITTEN
    531  298d				  -	      .byte	%00100100	; HANDWRITTEN
    532  298d				  -	      .byte	%00100100	; HANDWRITTEN
    533  298d				  -	      .byte	%00010010	; HANDWRITTEN
    534  298d				  -	      .byte	%00001100	; HANDWRITTEN
    535  298d				  -
    536  298d				  -			;byte %00000000 ; HANDWRITTEN
    537  298d				  -
    538  298d				  -	      .byte	%00010000	; HANDWRITTEN
    539  298d				  -	      .byte	%00010000	; HANDWRITTEN
    540  298d				  -	      .byte	%00010000	; HANDWRITTEN
    541  298d				  -	      .byte	%00001000	; HANDWRITTEN
    542  298d				  -	      .byte	%00001000	; HANDWRITTEN
    543  298d				  -	      .byte	%00001000	; HANDWRITTEN
    544  298d				  -	      .byte	%00000100	; HANDWRITTEN
    545  298d				  -	      .byte	%00000100	; HANDWRITTEN
    546  298d				  -
    547  298d				  -			;byte %00000000 ; HANDWRITTEN
    548  298d				  -
    549  298d				  -	      .byte	%01110000	; HANDWRITTEN
    550  298d				  -	      .byte	%01001100	; HANDWRITTEN
    551  298d				  -	      .byte	%01000000	; HANDWRITTEN
    552  298d				  -	      .byte	%00100000	; HANDWRITTEN
    553  298d				  -	      .byte	%00011000	; HANDWRITTEN
    554  298d				  -	      .byte	%00000100	; HANDWRITTEN
    555  298d				  -	      .byte	%00100010	; HANDWRITTEN
    556  298d				  -	      .byte	%00011100	; HANDWRITTEN
    557  298d				  -
    558  298d				  -			;byte %00000000 ; HANDWRITTEN
    559  298d				  -
    560  298d				  -	      .byte	%00110000	; HANDWRITTEN
    561  298d				  -	      .byte	%01001000	; HANDWRITTEN
    562  298d				  -	      .byte	%00000100	; HANDWRITTEN
    563  298d				  -	      .byte	%00000100	; HANDWRITTEN
    564  298d				  -	      .byte	%00011000	; HANDWRITTEN
    565  298d				  -	      .byte	%00000100	; HANDWRITTEN
    566  298d				  -	      .byte	%00100010	; HANDWRITTEN
    567  298d				  -	      .byte	%00011100	; HANDWRITTEN
    568  298d				  -
    569  298d				  -			;byte %00000000 ; HANDWRITTEN
    570  298d				  -
    571  298d				  -	      .byte	%00010000	; HANDWRITTEN
    572  298d				  -	      .byte	%00010000	; HANDWRITTEN
    573  298d				  -	      .byte	%00001000	; HANDWRITTEN
    574  298d				  -	      .byte	%01111000	; HANDWRITTEN
    575  298d				  -	      .byte	%01000100	; HANDWRITTEN
    576  298d				  -	      .byte	%00100100	; HANDWRITTEN
    577  298d				  -	      .byte	%00010010	; HANDWRITTEN
    578  298d				  -	      .byte	%00000010	; HANDWRITTEN
    579  298d				  -
    580  298d				  -			;byte %00000000 ; HANDWRITTEN
    581  298d				  -
    582  298d				  -	      .byte	%00110000	; HANDWRITTEN
    583  298d				  -	      .byte	%01001000	; HANDWRITTEN
    584  298d				  -	      .byte	%00000100	; HANDWRITTEN
    585  298d				  -	      .byte	%00000100	; HANDWRITTEN
    586  298d				  -	      .byte	%00011000	; HANDWRITTEN
    587  298d				  -	      .byte	%00100000	; HANDWRITTEN
    588  298d				  -	      .byte	%00010010	; HANDWRITTEN
    589  298d				  -	      .byte	%00001100	; HANDWRITTEN
    590  298d				  -
    591  298d				  -			;byte %00000000 ; HANDWRITTEN
    592  298d				  -
    593  298d				  -	      .byte	%00010000	; HANDWRITTEN
    594  298d				  -	      .byte	%00101000	; HANDWRITTEN
    595  298d				  -	      .byte	%00100100	; HANDWRITTEN
    596  298d				  -	      .byte	%00100100	; HANDWRITTEN
    597  298d				  -	      .byte	%00011000	; HANDWRITTEN
    598  298d				  -	      .byte	%00010000	; HANDWRITTEN
    599  298d				  -	      .byte	%00001000	; HANDWRITTEN
    600  298d				  -	      .byte	%00000110	; HANDWRITTEN
    601  298d				  -
    602  298d				  -			;byte %00000000 ; HANDWRITTEN
    603  298d				  -
    604  298d				  -	      .byte	%00010000	; HANDWRITTEN
    605  298d				  -	      .byte	%00010000	; HANDWRITTEN
    606  298d				  -	      .byte	%00010000	; HANDWRITTEN
    607  298d				  -	      .byte	%00001000	; HANDWRITTEN
    608  298d				  -	      .byte	%00000100	; HANDWRITTEN
    609  298d				  -	      .byte	%00000100	; HANDWRITTEN
    610  298d				  -	      .byte	%00110010	; HANDWRITTEN
    611  298d				  -	      .byte	%00001110	; HANDWRITTEN
    612  298d				  -
    613  298d				  -			;byte %00000000 ; HANDWRITTEN
    614  298d				  -
    615  298d				  -	      .byte	%00110000	; HANDWRITTEN
    616  298d				  -	      .byte	%01001000	; HANDWRITTEN
    617  298d				  -	      .byte	%01000100	; HANDWRITTEN
    618  298d				  -	      .byte	%00100100	; HANDWRITTEN
    619  298d				  -	      .byte	%00011100	; HANDWRITTEN
    620  298d				  -	      .byte	%00010010	; HANDWRITTEN
    621  298d				  -	      .byte	%00001010	; HANDWRITTEN
    622  298d				  -	      .byte	%00000110	; HANDWRITTEN
    623  298d				  -
    624  298d				  -			;byte %00000000 ; HANDWRITTEN
    625  298d				  -
    626  298d				  -	      .byte	%00010000	; HANDWRITTEN
    627  298d				  -	      .byte	%00010000	; HANDWRITTEN
    628  298d				  -	      .byte	%00001000	; HANDWRITTEN
    629  298d				  -	      .byte	%00001000	; HANDWRITTEN
    630  298d				  -	      .byte	%00011100	; HANDWRITTEN
    631  298d				  -	      .byte	%00100100	; HANDWRITTEN
    632  298d				  -	      .byte	%00010010	; HANDWRITTEN
    633  298d				  -	      .byte	%00001100	; HANDWRITTEN
    634  298d				  -
    635  298d					      endif		; HANDWRITTEN
    636  298d
    637  298d				  -	      if	fontstyle == INTERRUPTED
    638  298d				  -
    639  298d				  -			;byte %00000000 ; INTERRUPTED
    640  298d				  -
    641  298d				  -	      .byte	%00110100	; INTERRUPTED
    642  298d				  -	      .byte	%01100110	; INTERRUPTED
    643  298d				  -	      .byte	%01100110	; INTERRUPTED
    644  298d				  -	      .byte	%01100110	; INTERRUPTED
    645  298d				  -	      .byte	%01100110	; INTERRUPTED
    646  298d				  -	      .byte	%01100110	; INTERRUPTED
    647  298d				  -	      .byte	%01100110	; INTERRUPTED
    648  298d				  -	      .byte	%00110100	; INTERRUPTED
    649  298d				  -
    650  298d				  -			;byte %00000000 ; INTERRUPTED
    651  298d				  -
    652  298d				  -	      .byte	%00111100	; INTERRUPTED
    653  298d				  -	      .byte	%00000000	; INTERRUPTED
    654  298d				  -	      .byte	%00011000	; INTERRUPTED
    655  298d				  -	      .byte	%00011000	; INTERRUPTED
    656  298d				  -	      .byte	%00011000	; INTERRUPTED
    657  298d				  -	      .byte	%00011000	; INTERRUPTED
    658  298d				  -	      .byte	%00011000	; INTERRUPTED
    659  298d				  -	      .byte	%00111000	; INTERRUPTED
    660  298d				  -
    661  298d				  -			;byte %00000000 ; INTERRUPTED
    662  298d				  -
    663  298d				  -	      .byte	%01101110	; INTERRUPTED
    664  298d				  -	      .byte	%01100000	; INTERRUPTED
    665  298d				  -	      .byte	%00110000	; INTERRUPTED
    666  298d				  -	      .byte	%00011000	; INTERRUPTED
    667  298d				  -	      .byte	%00001100	; INTERRUPTED
    668  298d				  -	      .byte	%00000110	; INTERRUPTED
    669  298d				  -	      .byte	%01000110	; INTERRUPTED
    670  298d				  -	      .byte	%00111100	; INTERRUPTED
    671  298d				  -
    672  298d				  -			;byte %00000000 ; INTERRUPTED
    673  298d				  -
    674  298d				  -	      .byte	%01111100	; INTERRUPTED
    675  298d				  -	      .byte	%00000110	; INTERRUPTED
    676  298d				  -	      .byte	%00000110	; INTERRUPTED
    677  298d				  -	      .byte	%00000110	; INTERRUPTED
    678  298d				  -	      .byte	%01110110	; INTERRUPTED
    679  298d				  -	      .byte	%00000110	; INTERRUPTED
    680  298d				  -	      .byte	%00000110	; INTERRUPTED
    681  298d				  -	      .byte	%01110100	; INTERRUPTED
    682  298d				  -
    683  298d				  -			;byte %00000000 ; INTERRUPTED
    684  298d				  -
    685  298d				  -	      .byte	%00000110	; INTERRUPTED
    686  298d				  -	      .byte	%00000110	; INTERRUPTED
    687  298d				  -	      .byte	%00000110	; INTERRUPTED
    688  298d				  -	      .byte	%00000110	; INTERRUPTED
    689  298d				  -	      .byte	%01110110	; INTERRUPTED
    690  298d				  -	      .byte	%01100110	; INTERRUPTED
    691  298d				  -	      .byte	%01100110	; INTERRUPTED
    692  298d				  -	      .byte	%01100110	; INTERRUPTED
    693  298d				  -
    694  298d				  -			;byte %00000000 ; INTERRUPTED
    695  298d				  -
    696  298d				  -	      .byte	%01111100	; INTERRUPTED
    697  298d				  -	      .byte	%00000110	; INTERRUPTED
    698  298d				  -	      .byte	%00000110	; INTERRUPTED
    699  298d				  -	      .byte	%00000110	; INTERRUPTED
    700  298d				  -	      .byte	%01111100	; INTERRUPTED
    701  298d				  -	      .byte	%01100000	; INTERRUPTED
    702  298d				  -	      .byte	%01100000	; INTERRUPTED
    703  298d				  -	      .byte	%01101110	; INTERRUPTED
    704  298d				  -
    705  298d				  -			;byte %00000000 ; INTERRUPTED
    706  298d				  -
    707  298d				  -	      .byte	%00101100	; INTERRUPTED
    708  298d				  -	      .byte	%01100110	; INTERRUPTED
    709  298d				  -	      .byte	%01100110	; INTERRUPTED
    710  298d				  -	      .byte	%01100110	; INTERRUPTED
    711  298d				  -	      .byte	%01101100	; INTERRUPTED
    712  298d				  -	      .byte	%01100000	; INTERRUPTED
    713  298d				  -	      .byte	%00110000	; INTERRUPTED
    714  298d				  -	      .byte	%00011100	; INTERRUPTED
    715  298d				  -
    716  298d				  -			;byte %00000000 ; INTERRUPTED
    717  298d				  -
    718  298d				  -	      .byte	%00011000	; INTERRUPTED
    719  298d				  -	      .byte	%00011000	; INTERRUPTED
    720  298d				  -	      .byte	%00011000	; INTERRUPTED
    721  298d				  -	      .byte	%00011100	; INTERRUPTED
    722  298d				  -	      .byte	%00001110	; INTERRUPTED
    723  298d				  -	      .byte	%00000110	; INTERRUPTED
    724  298d				  -	      .byte	%00000000	; INTERRUPTED
    725  298d				  -	      .byte	%01111110	; INTERRUPTED
    726  298d				  -
    727  298d				  -			;byte %00000000 ; INTERRUPTED
    728  298d				  -
    729  298d				  -	      .byte	%00110100	; INTERRUPTED
    730  298d				  -	      .byte	%01100110	; INTERRUPTED
    731  298d				  -	      .byte	%01100110	; INTERRUPTED
    732  298d				  -	      .byte	%01100110	; INTERRUPTED
    733  298d				  -	      .byte	%00110100	; INTERRUPTED
    734  298d				  -	      .byte	%01100110	; INTERRUPTED
    735  298d				  -	      .byte	%01100110	; INTERRUPTED
    736  298d				  -	      .byte	%00110100	; INTERRUPTED
    737  298d				  -
    738  298d				  -			;byte %00000000 ; INTERRUPTED
    739  298d				  -
    740  298d				  -	      .byte	%00111000	; INTERRUPTED
    741  298d				  -	      .byte	%00001100	; INTERRUPTED
    742  298d				  -	      .byte	%00000110	; INTERRUPTED
    743  298d				  -	      .byte	%00110110	; INTERRUPTED
    744  298d				  -	      .byte	%01100110	; INTERRUPTED
    745  298d				  -	      .byte	%01100110	; INTERRUPTED
    746  298d				  -	      .byte	%01100110	; INTERRUPTED
    747  298d				  -	      .byte	%00110100	; INTERRUPTED
    748  298d				  -
    749  298d					      endif		; INTERRUPTED
    750  298d
    751  298d
    752  298d				  -	      if	fontstyle == TINY
    753  298d				  -
    754  298d				  -			;byte %00000000 ; TINY
    755  298d				  -
    756  298d				  -	      .byte	%00000000	; TINY
    757  298d				  -	      .byte	%00111000	; TINY
    758  298d				  -	      .byte	%00101000	; TINY
    759  298d				  -	      .byte	%00101000	; TINY
    760  298d				  -	      .byte	%00101000	; TINY
    761  298d				  -	      .byte	%00111000	; TINY
    762  298d				  -	      .byte	%00000000	; TINY
    763  298d				  -	      .byte	%00000000	; TINY
    764  298d				  -
    765  298d				  -			;byte %00000000 ; TINY
    766  298d				  -
    767  298d				  -	      .byte	%00000000	; TINY
    768  298d				  -	      .byte	%00010000	; TINY
    769  298d				  -	      .byte	%00010000	; TINY
    770  298d				  -	      .byte	%00010000	; TINY
    771  298d				  -	      .byte	%00010000	; TINY
    772  298d				  -	      .byte	%00010000	; TINY
    773  298d				  -	      .byte	%00000000	; TINY
    774  298d				  -	      .byte	%00000000	; TINY
    775  298d				  -
    776  298d				  -			;byte %00000000 ; TINY
    777  298d				  -
    778  298d				  -	      .byte	%00000000	; TINY
    779  298d				  -	      .byte	%00111000	; TINY
    780  298d				  -	      .byte	%00100000	; TINY
    781  298d				  -	      .byte	%00111000	; TINY
    782  298d				  -	      .byte	%00001000	; TINY
    783  298d				  -	      .byte	%00111000	; TINY
    784  298d				  -	      .byte	%00000000	; TINY
    785  298d				  -	      .byte	%00000000	; TINY
    786  298d				  -
    787  298d				  -			;byte %00000000 ; TINY
    788  298d				  -
    789  298d				  -	      .byte	%00000000	; TINY
    790  298d				  -	      .byte	%00111000	; TINY
    791  298d				  -	      .byte	%00001000	; TINY
    792  298d				  -	      .byte	%00111000	; TINY
    793  298d				  -	      .byte	%00001000	; TINY
    794  298d				  -	      .byte	%00111000	; TINY
    795  298d				  -	      .byte	%00000000	; TINY
    796  298d				  -	      .byte	%00000000	; TINY
    797  298d				  -
    798  298d				  -			;byte %00000000 ; TINY
    799  298d				  -
    800  298d				  -	      .byte	%00000000	; TINY
    801  298d				  -	      .byte	%00001000	; TINY
    802  298d				  -	      .byte	%00001000	; TINY
    803  298d				  -	      .byte	%00111000	; TINY
    804  298d				  -	      .byte	%00101000	; TINY
    805  298d				  -	      .byte	%00101000	; TINY
    806  298d				  -	      .byte	%00000000	; TINY
    807  298d				  -	      .byte	%00000000	; TINY
    808  298d				  -
    809  298d				  -			;byte %00000000 ; TINY
    810  298d				  -
    811  298d				  -	      .byte	%00000000	; TINY
    812  298d				  -	      .byte	%00111000	; TINY
    813  298d				  -	      .byte	%00001000	; TINY
    814  298d				  -	      .byte	%00111000	; TINY
    815  298d				  -	      .byte	%00100000	; TINY
    816  298d				  -	      .byte	%00111000	; TINY
    817  298d				  -	      .byte	%00000000	; TINY
    818  298d				  -	      .byte	%00000000	; TINY
    819  298d				  -
    820  298d				  -			;byte %00000000 ; TINY
    821  298d				  -
    822  298d				  -	      .byte	%00000000	; TINY
    823  298d				  -	      .byte	%00111000	; TINY
    824  298d				  -	      .byte	%00101000	; TINY
    825  298d				  -	      .byte	%00111000	; TINY
    826  298d				  -	      .byte	%00100000	; TINY
    827  298d				  -	      .byte	%00111000	; TINY
    828  298d				  -	      .byte	%00000000	; TINY
    829  298d				  -	      .byte	%00000000	; TINY
    830  298d				  -
    831  298d				  -			;byte %00000000 ; TINY
    832  298d				  -
    833  298d				  -	      .byte	%00000000	; TINY
    834  298d				  -	      .byte	%00001000	; TINY
    835  298d				  -	      .byte	%00001000	; TINY
    836  298d				  -	      .byte	%00001000	; TINY
    837  298d				  -	      .byte	%00001000	; TINY
    838  298d				  -	      .byte	%00111000	; TINY
    839  298d				  -	      .byte	%00000000	; TINY
    840  298d				  -	      .byte	%00000000	; TINY
    841  298d				  -
    842  298d				  -			;byte %00000000 ; TINY
    843  298d				  -
    844  298d				  -	      .byte	%00000000	; TINY
    845  298d				  -	      .byte	%00111000	; TINY
    846  298d				  -	      .byte	%00101000	; TINY
    847  298d				  -	      .byte	%00111000	; TINY
    848  298d				  -	      .byte	%00101000	; TINY
    849  298d				  -	      .byte	%00111000	; TINY
    850  298d				  -	      .byte	%00000000	; TINY
    851  298d				  -	      .byte	%00000000	; TINY
    852  298d				  -
    853  298d				  -			;byte %00000000 ; TINY
    854  298d				  -
    855  298d				  -	      .byte	%00000000	; TINY
    856  298d				  -	      .byte	%00001000	; TINY
    857  298d				  -	      .byte	%00001000	; TINY
    858  298d				  -	      .byte	%00111000	; TINY
    859  298d				  -	      .byte	%00101000	; TINY
    860  298d				  -	      .byte	%00111000	; TINY
    861  298d				  -	      .byte	%00000000	; TINY
    862  298d				  -	      .byte	%00000000	; TINY
    863  298d				  -
    864  298d					      endif		; TINY
    865  298d
    866  298d				  -	      if	fontstyle == RETROPUTER
    867  298d				  -
    868  298d				  -			;byte %00000000 ; RETROPUTER
    869  298d				  -
    870  298d				  -	      .byte	%01111110	; RETROPUTER
    871  298d				  -	      .byte	%01000110	; RETROPUTER
    872  298d				  -	      .byte	%01000110	; RETROPUTER
    873  298d				  -	      .byte	%01000110	; RETROPUTER
    874  298d				  -	      .byte	%01100010	; RETROPUTER
    875  298d				  -	      .byte	%01100010	; RETROPUTER
    876  298d				  -	      .byte	%01100010	; RETROPUTER
    877  298d				  -	      .byte	%01111110	; RETROPUTER
    878  298d				  -
    879  298d				  -			;byte %00000000 ; RETROPUTER
    880  298d				  -
    881  298d				  -	      .byte	%00111000	; RETROPUTER
    882  298d				  -	      .byte	%00111000	; RETROPUTER
    883  298d				  -	      .byte	%00111000	; RETROPUTER
    884  298d				  -	      .byte	%00111000	; RETROPUTER
    885  298d				  -	      .byte	%00011000	; RETROPUTER
    886  298d				  -	      .byte	%00011000	; RETROPUTER
    887  298d				  -	      .byte	%00011000	; RETROPUTER
    888  298d				  -	      .byte	%00011000	; RETROPUTER
    889  298d				  -
    890  298d				  -			;byte %00000000 ; RETROPUTER
    891  298d				  -
    892  298d				  -	      .byte	%01111110	; RETROPUTER
    893  298d				  -	      .byte	%01100000	; RETROPUTER
    894  298d				  -	      .byte	%01100000	; RETROPUTER
    895  298d				  -	      .byte	%01100000	; RETROPUTER
    896  298d				  -	      .byte	%00111110	; RETROPUTER
    897  298d				  -	      .byte	%00000010	; RETROPUTER
    898  298d				  -	      .byte	%01000010	; RETROPUTER
    899  298d				  -	      .byte	%01111110	; RETROPUTER
    900  298d				  -
    901  298d				  -			;byte %00000000 ; RETROPUTER
    902  298d				  -
    903  298d				  -	      .byte	%01111110	; RETROPUTER
    904  298d				  -	      .byte	%01000110	; RETROPUTER
    905  298d				  -	      .byte	%00000110	; RETROPUTER
    906  298d				  -	      .byte	%00000110	; RETROPUTER
    907  298d				  -	      .byte	%00111110	; RETROPUTER
    908  298d				  -	      .byte	%00000010	; RETROPUTER
    909  298d				  -	      .byte	%01000010	; RETROPUTER
    910  298d				  -	      .byte	%01111110	; RETROPUTER
    911  298d				  -
    912  298d				  -			;byte %00000000 ; RETROPUTER
    913  298d				  -
    914  298d				  -	      .byte	%00001100	; RETROPUTER
    915  298d				  -	      .byte	%00001100	; RETROPUTER
    916  298d				  -	      .byte	%00001100	; RETROPUTER
    917  298d				  -	      .byte	%01111110	; RETROPUTER
    918  298d				  -	      .byte	%01000100	; RETROPUTER
    919  298d				  -	      .byte	%01000100	; RETROPUTER
    920  298d				  -	      .byte	%01000100	; RETROPUTER
    921  298d				  -	      .byte	%00000100	; RETROPUTER
    922  298d				  -
    923  298d				  -			;byte %00000000 ; RETROPUTER
    924  298d				  -
    925  298d				  -	      .byte	%01111110	; RETROPUTER
    926  298d				  -	      .byte	%01000110	; RETROPUTER
    927  298d				  -	      .byte	%00000110	; RETROPUTER
    928  298d				  -	      .byte	%00000110	; RETROPUTER
    929  298d				  -	      .byte	%01111100	; RETROPUTER
    930  298d				  -	      .byte	%01000000	; RETROPUTER
    931  298d				  -	      .byte	%01000000	; RETROPUTER
    932  298d				  -	      .byte	%01111110	; RETROPUTER
    933  298d				  -
    934  298d				  -			;byte %00000000 ; RETROPUTER
    935  298d				  -
    936  298d				  -	      .byte	%01111110	; RETROPUTER
    937  298d				  -	      .byte	%01000110	; RETROPUTER
    938  298d				  -	      .byte	%01000110	; RETROPUTER
    939  298d				  -	      .byte	%01000110	; RETROPUTER
    940  298d				  -	      .byte	%01111100	; RETROPUTER
    941  298d				  -	      .byte	%01000000	; RETROPUTER
    942  298d				  -	      .byte	%01000010	; RETROPUTER
    943  298d				  -	      .byte	%01111110	; RETROPUTER
    944  298d				  -
    945  298d				  -			;byte %00000000 ; RETROPUTER
    946  298d				  -
    947  298d				  -	      .byte	%00001100	; RETROPUTER
    948  298d				  -	      .byte	%00001100	; RETROPUTER
    949  298d				  -	      .byte	%00001100	; RETROPUTER
    950  298d				  -	      .byte	%00001100	; RETROPUTER
    951  298d				  -	      .byte	%00000100	; RETROPUTER
    952  298d				  -	      .byte	%00000010	; RETROPUTER
    953  298d				  -	      .byte	%01000010	; RETROPUTER
    954  298d				  -	      .byte	%01111110	; RETROPUTER
    955  298d				  -
    956  298d				  -			;byte %00000000 ; RETROPUTER
    957  298d				  -
    958  298d				  -	      .byte	%01111110	; RETROPUTER
    959  298d				  -	      .byte	%01000110	; RETROPUTER
    960  298d				  -	      .byte	%01000110	; RETROPUTER
    961  298d				  -	      .byte	%01000110	; RETROPUTER
    962  298d				  -	      .byte	%01111110	; RETROPUTER
    963  298d				  -	      .byte	%01000010	; RETROPUTER
    964  298d				  -	      .byte	%01000010	; RETROPUTER
    965  298d				  -	      .byte	%01111110	; RETROPUTER
    966  298d				  -
    967  298d				  -			;byte %00000000 ; RETROPUTER
    968  298d				  -
    969  298d				  -	      .byte	%00000110	; RETROPUTER
    970  298d				  -	      .byte	%00000110	; RETROPUTER
    971  298d				  -	      .byte	%00000110	; RETROPUTER
    972  298d				  -	      .byte	%00000010	; RETROPUTER
    973  298d				  -	      .byte	%01111110	; RETROPUTER
    974  298d				  -	      .byte	%01000010	; RETROPUTER
    975  298d				  -	      .byte	%01000010	; RETROPUTER
    976  298d				  -	      .byte	%01111110	; RETROPUTER
    977  298d				  -
    978  298d					      endif		; RETROPUTER
    979  298d
    980  298d				  -	      if	fontstyle == CURVES
    981  298d				  -
    982  298d				  -			;byte %00000000 ; CURVES
    983  298d				  -
    984  298d				  -	      .byte	%00111100	; CURVES
    985  298d				  -	      .byte	%01111110	; CURVES
    986  298d				  -	      .byte	%01100110	; CURVES
    987  298d				  -	      .byte	%01100110	; CURVES
    988  298d				  -	      .byte	%01100110	; CURVES
    989  298d				  -	      .byte	%01100110	; CURVES
    990  298d				  -	      .byte	%01111110	; CURVES
    991  298d				  -	      .byte	%00111100	; CURVES
    992  298d				  -
    993  298d				  -			;byte %00000000 ; CURVES
    994  298d				  -
    995  298d				  -	      .byte	%00011000	; CURVES
    996  298d				  -	      .byte	%00011000	; CURVES
    997  298d				  -	      .byte	%00011000	; CURVES
    998  298d				  -	      .byte	%00011000	; CURVES
    999  298d				  -	      .byte	%00011000	; CURVES
   1000  298d				  -	      .byte	%00011000	; CURVES
   1001  298d				  -	      .byte	%01111000	; CURVES
   1002  298d				  -	      .byte	%01110000	; CURVES
   1003  298d				  -
   1004  298d				  -			;byte %00000000 ; CURVES
   1005  298d				  -
   1006  298d				  -	      .byte	%01111110	; CURVES
   1007  298d				  -	      .byte	%01111110	; CURVES
   1008  298d				  -	      .byte	%01100000	; CURVES
   1009  298d				  -	      .byte	%01111100	; CURVES
   1010  298d				  -	      .byte	%00111110	; CURVES
   1011  298d				  -	      .byte	%00000110	; CURVES
   1012  298d				  -	      .byte	%01111110	; CURVES
   1013  298d				  -	      .byte	%01111100	; CURVES
   1014  298d				  -
   1015  298d				  -			;byte %00000000 ; CURVES
   1016  298d				  -
   1017  298d				  -	      .byte	%01111100	; CURVES
   1018  298d				  -	      .byte	%01111110	; CURVES
   1019  298d				  -	      .byte	%00001110	; CURVES
   1020  298d				  -	      .byte	%00111100	; CURVES
   1021  298d				  -	      .byte	%00111100	; CURVES
   1022  298d				  -	      .byte	%00001110	; CURVES
   1023  298d				  -	      .byte	%01111110	; CURVES
   1024  298d				  -	      .byte	%01111100	; CURVES
   1025  298d				  -
   1026  298d				  -			;byte %00000000 ; CURVES
   1027  298d				  -
   1028  298d				  -	      .byte	%00000110	; CURVES
   1029  298d				  -	      .byte	%00000110	; CURVES
   1030  298d				  -	      .byte	%00111110	; CURVES
   1031  298d				  -	      .byte	%01111110	; CURVES
   1032  298d				  -	      .byte	%01100110	; CURVES
   1033  298d				  -	      .byte	%01100110	; CURVES
   1034  298d				  -	      .byte	%01100110	; CURVES
   1035  298d				  -	      .byte	%01100110	; CURVES
   1036  298d				  -
   1037  298d				  -			;byte %00000000 ; CURVES
   1038  298d				  -
   1039  298d				  -	      .byte	%01111100	; CURVES
   1040  298d				  -	      .byte	%01111110	; CURVES
   1041  298d				  -	      .byte	%00000110	; CURVES
   1042  298d				  -	      .byte	%01111110	; CURVES
   1043  298d				  -	      .byte	%01111100	; CURVES
   1044  298d				  -	      .byte	%01100000	; CURVES
   1045  298d				  -	      .byte	%01111110	; CURVES
   1046  298d				  -	      .byte	%01111110	; CURVES
   1047  298d				  -
   1048  298d				  -			;byte %00000000 ; CURVES
   1049  298d				  -
   1050  298d				  -	      .byte	%00111100	; CURVES
   1051  298d				  -	      .byte	%01111110	; CURVES
   1052  298d				  -	      .byte	%01100110	; CURVES
   1053  298d				  -	      .byte	%01111110	; CURVES
   1054  298d				  -	      .byte	%01111100	; CURVES
   1055  298d				  -	      .byte	%01100000	; CURVES
   1056  298d				  -	      .byte	%01111110	; CURVES
   1057  298d				  -	      .byte	%00111110	; CURVES
   1058  298d				  -
   1059  298d				  -			;byte %00000000 ; CURVES
   1060  298d				  -
   1061  298d				  -	      .byte	%00000110	; CURVES
   1062  298d				  -	      .byte	%00000110	; CURVES
   1063  298d				  -	      .byte	%00000110	; CURVES
   1064  298d				  -	      .byte	%00000110	; CURVES
   1065  298d				  -	      .byte	%00000110	; CURVES
   1066  298d				  -	      .byte	%01100110	; CURVES
   1067  298d				  -	      .byte	%01111110	; CURVES
   1068  298d				  -	      .byte	%00111100	; CURVES
   1069  298d				  -
   1070  298d				  -			;byte %00000000 ; CURVES
   1071  298d				  -
   1072  298d				  -	      .byte	%00111100	; CURVES
   1073  298d				  -	      .byte	%01111110	; CURVES
   1074  298d				  -	      .byte	%01100110	; CURVES
   1075  298d				  -	      .byte	%01111110	; CURVES
   1076  298d				  -	      .byte	%00111100	; CURVES
   1077  298d				  -	      .byte	%01100110	; CURVES
   1078  298d				  -	      .byte	%01111110	; CURVES
   1079  298d				  -	      .byte	%00111100	; CURVES
   1080  298d				  -
   1081  298d				  -			;byte %00000000 ; CURVES
   1082  298d				  -
   1083  298d				  -	      .byte	%01111100	; CURVES
   1084  298d				  -	      .byte	%01111110	; CURVES
   1085  298d				  -	      .byte	%00000110	; CURVES
   1086  298d				  -	      .byte	%00111110	; CURVES
   1087  298d				  -	      .byte	%01111110	; CURVES
   1088  298d				  -	      .byte	%01100110	; CURVES
   1089  298d				  -	      .byte	%01111110	; CURVES
   1090  298d				  -	      .byte	%00111100	; CURVES
   1091  298d				  -
   1092  298d					      endif		; CURVES
   1093  298d
   1094  298d
   1095  298d				  -	      if	fontstyle == HUSKY
   1096  298d				  -
   1097  298d				  -			;byte %00000000 ; HUSKY
   1098  298d				  -
   1099  298d				  -	      .byte	%01111100	; HUSKY
   1100  298d				  -	      .byte	%11111110	; HUSKY
   1101  298d				  -	      .byte	%11101110	; HUSKY
   1102  298d				  -	      .byte	%11101110	; HUSKY
   1103  298d				  -	      .byte	%11101110	; HUSKY
   1104  298d				  -	      .byte	%11101110	; HUSKY
   1105  298d				  -	      .byte	%11111110	; HUSKY
   1106  298d				  -	      .byte	%01111100	; HUSKY
   1107  298d				  -
   1108  298d				  -			;byte %00000000 ; HUSKY
   1109  298d				  -
   1110  298d				  -	      .byte	%00111000	; HUSKY
   1111  298d				  -	      .byte	%00111000	; HUSKY
   1112  298d				  -	      .byte	%00111000	; HUSKY
   1113  298d				  -	      .byte	%00111000	; HUSKY
   1114  298d				  -	      .byte	%00111000	; HUSKY
   1115  298d				  -	      .byte	%00111000	; HUSKY
   1116  298d				  -	      .byte	%00111000	; HUSKY
   1117  298d				  -	      .byte	%00111000	; HUSKY
   1118  298d				  -
   1119  298d				  -			;byte %00000000 ; HUSKY
   1120  298d				  -
   1121  298d				  -	      .byte	%11111110	; HUSKY
   1122  298d				  -	      .byte	%11111110	; HUSKY
   1123  298d				  -	      .byte	%11100000	; HUSKY
   1124  298d				  -	      .byte	%11111100	; HUSKY
   1125  298d				  -	      .byte	%01111110	; HUSKY
   1126  298d				  -	      .byte	%00001110	; HUSKY
   1127  298d				  -	      .byte	%11111110	; HUSKY
   1128  298d				  -	      .byte	%11111100	; HUSKY
   1129  298d				  -
   1130  298d				  -			;byte %00000000 ; HUSKY
   1131  298d				  -
   1132  298d				  -	      .byte	%11111100	; HUSKY
   1133  298d				  -	      .byte	%11111110	; HUSKY
   1134  298d				  -	      .byte	%00001110	; HUSKY
   1135  298d				  -	      .byte	%11111100	; HUSKY
   1136  298d				  -	      .byte	%11111100	; HUSKY
   1137  298d				  -	      .byte	%00001110	; HUSKY
   1138  298d				  -	      .byte	%11111110	; HUSKY
   1139  298d				  -	      .byte	%11111100	; HUSKY
   1140  298d				  -
   1141  298d				  -			;byte %00000000 ; HUSKY
   1142  298d				  -
   1143  298d				  -	      .byte	%00011100	; HUSKY
   1144  298d				  -	      .byte	%00011100	; HUSKY
   1145  298d				  -	      .byte	%11111110	; HUSKY
   1146  298d				  -	      .byte	%11111110	; HUSKY
   1147  298d				  -	      .byte	%11011100	; HUSKY
   1148  298d				  -	      .byte	%11011100	; HUSKY
   1149  298d				  -	      .byte	%00011100	; HUSKY
   1150  298d				  -	      .byte	%00011100	; HUSKY
   1151  298d				  -
   1152  298d				  -			;byte %00000000 ; HUSKY
   1153  298d				  -
   1154  298d				  -	      .byte	%11111100	; HUSKY
   1155  298d				  -	      .byte	%11111110	; HUSKY
   1156  298d				  -	      .byte	%00001110	; HUSKY
   1157  298d				  -	      .byte	%11111110	; HUSKY
   1158  298d				  -	      .byte	%11111100	; HUSKY
   1159  298d				  -	      .byte	%11100000	; HUSKY
   1160  298d				  -	      .byte	%11111110	; HUSKY
   1161  298d				  -	      .byte	%11111110	; HUSKY
   1162  298d				  -
   1163  298d				  -			;byte %00000000 ; HUSKY
   1164  298d				  -
   1165  298d				  -	      .byte	%01111100	; HUSKY
   1166  298d				  -	      .byte	%11111110	; HUSKY
   1167  298d				  -	      .byte	%11101110	; HUSKY
   1168  298d				  -	      .byte	%11111110	; HUSKY
   1169  298d				  -	      .byte	%11111100	; HUSKY
   1170  298d				  -	      .byte	%11100000	; HUSKY
   1171  298d				  -	      .byte	%11111110	; HUSKY
   1172  298d				  -	      .byte	%01111110	; HUSKY
   1173  298d				  -
   1174  298d				  -			;byte %00000000 ; HUSKY
   1175  298d				  -
   1176  298d				  -	      .byte	%00111000	; HUSKY
   1177  298d				  -	      .byte	%00111000	; HUSKY
   1178  298d				  -	      .byte	%00111000	; HUSKY
   1179  298d				  -	      .byte	%00111000	; HUSKY
   1180  298d				  -	      .byte	%00011100	; HUSKY
   1181  298d				  -	      .byte	%00001110	; HUSKY
   1182  298d				  -	      .byte	%11111110	; HUSKY
   1183  298d				  -	      .byte	%11111110	; HUSKY
   1184  298d				  -
   1185  298d				  -			;byte %00000000 ; HUSKY
   1186  298d				  -
   1187  298d				  -	      .byte	%01111100	; HUSKY
   1188  298d				  -	      .byte	%11111110	; HUSKY
   1189  298d				  -	      .byte	%11101110	; HUSKY
   1190  298d				  -	      .byte	%11111110	; HUSKY
   1191  298d				  -	      .byte	%01111100	; HUSKY
   1192  298d				  -	      .byte	%11101110	; HUSKY
   1193  298d				  -	      .byte	%11111110	; HUSKY
   1194  298d				  -	      .byte	%01111100	; HUSKY
   1195  298d				  -
   1196  298d				  -			;byte %00000000 ; HUSKY
   1197  298d				  -
   1198  298d				  -	      .byte	%11111100	; HUSKY
   1199  298d				  -	      .byte	%11111110	; HUSKY
   1200  298d				  -	      .byte	%00001110	; HUSKY
   1201  298d				  -	      .byte	%01111110	; HUSKY
   1202  298d				  -	      .byte	%11111110	; HUSKY
   1203  298d				  -	      .byte	%11101110	; HUSKY
   1204  298d				  -	      .byte	%11111110	; HUSKY
   1205  298d				  -	      .byte	%01111100	; HUSKY
   1206  298d				  -
   1207  298d					      endif		; HUSKY
   1208  298d
   1209  298d
   1210  298d				  -	      if	fontstyle == SNAKE
   1211  298d				  -
   1212  298d				  -			;byte %00000000 ; SNAKE
   1213  298d				  -
   1214  298d				  -	      .byte	%01111110	; SNAKE
   1215  298d				  -	      .byte	%01000010	; SNAKE
   1216  298d				  -	      .byte	%01000010	; SNAKE
   1217  298d				  -	      .byte	%01000010	; SNAKE
   1218  298d				  -	      .byte	%01000010	; SNAKE
   1219  298d				  -	      .byte	%01000010	; SNAKE
   1220  298d				  -	      .byte	%01000010	; SNAKE
   1221  298d				  -	      .byte	%01111110	; SNAKE
   1222  298d				  -
   1223  298d				  -			;byte %00000000 ; SNAKE
   1224  298d				  -
   1225  298d				  -	      .byte	%00111000	; SNAKE
   1226  298d				  -	      .byte	%00101000	; SNAKE
   1227  298d				  -	      .byte	%00001000	; SNAKE
   1228  298d				  -	      .byte	%00001000	; SNAKE
   1229  298d				  -	      .byte	%00001000	; SNAKE
   1230  298d				  -	      .byte	%00001000	; SNAKE
   1231  298d				  -	      .byte	%00001000	; SNAKE
   1232  298d				  -	      .byte	%00111000	; SNAKE
   1233  298d				  -
   1234  298d				  -			;byte %00000000 ; SNAKE
   1235  298d				  -
   1236  298d				  -	      .byte	%01111110	; SNAKE
   1237  298d				  -	      .byte	%01000010	; SNAKE
   1238  298d				  -	      .byte	%01000110	; SNAKE
   1239  298d				  -	      .byte	%01000000	; SNAKE
   1240  298d				  -	      .byte	%01111110	; SNAKE
   1241  298d				  -	      .byte	%00000010	; SNAKE
   1242  298d				  -	      .byte	%01000010	; SNAKE
   1243  298d				  -	      .byte	%01111110	; SNAKE
   1244  298d				  -
   1245  298d				  -			;byte %00000000 ; SNAKE
   1246  298d				  -
   1247  298d				  -	      .byte	%01111110	; SNAKE
   1248  298d				  -	      .byte	%01000010	; SNAKE
   1249  298d				  -	      .byte	%01100010	; SNAKE
   1250  298d				  -	      .byte	%00000010	; SNAKE
   1251  298d				  -	      .byte	%01111110	; SNAKE
   1252  298d				  -	      .byte	%00000010	; SNAKE
   1253  298d				  -	      .byte	%01000010	; SNAKE
   1254  298d				  -	      .byte	%01111110	; SNAKE
   1255  298d				  -
   1256  298d				  -			;byte %00000000 ; SNAKE
   1257  298d				  -
   1258  298d				  -	      .byte	%00001110	; SNAKE
   1259  298d				  -	      .byte	%00001010	; SNAKE
   1260  298d				  -	      .byte	%00000010	; SNAKE
   1261  298d				  -	      .byte	%01111110	; SNAKE
   1262  298d				  -	      .byte	%01000010	; SNAKE
   1263  298d				  -	      .byte	%01000010	; SNAKE
   1264  298d				  -	      .byte	%01000010	; SNAKE
   1265  298d				  -	      .byte	%01100110	; SNAKE
   1266  298d				  -
   1267  298d				  -			;byte %00000000 ; SNAKE
   1268  298d				  -
   1269  298d				  -	      .byte	%01111110	; SNAKE
   1270  298d				  -	      .byte	%01000010	; SNAKE
   1271  298d				  -	      .byte	%01100010	; SNAKE
   1272  298d				  -	      .byte	%00000010	; SNAKE
   1273  298d				  -	      .byte	%01111110	; SNAKE
   1274  298d				  -	      .byte	%01000000	; SNAKE
   1275  298d				  -	      .byte	%01000010	; SNAKE
   1276  298d				  -	      .byte	%01111110	; SNAKE
   1277  298d				  -
   1278  298d				  -			;byte %00000000 ; SNAKE
   1279  298d				  -
   1280  298d				  -	      .byte	%01111110	; SNAKE
   1281  298d				  -	      .byte	%01000010	; SNAKE
   1282  298d				  -	      .byte	%01000010	; SNAKE
   1283  298d				  -	      .byte	%01111110	; SNAKE
   1284  298d				  -	      .byte	%01000000	; SNAKE
   1285  298d				  -	      .byte	%01000110	; SNAKE
   1286  298d				  -	      .byte	%01000010	; SNAKE
   1287  298d				  -	      .byte	%01111110	; SNAKE
   1288  298d				  -
   1289  298d				  -			;byte %00000000 ; SNAKE
   1290  298d				  -
   1291  298d				  -	      .byte	%00000110	; SNAKE
   1292  298d				  -	      .byte	%00000010	; SNAKE
   1293  298d				  -	      .byte	%00000010	; SNAKE
   1294  298d				  -	      .byte	%00000010	; SNAKE
   1295  298d				  -	      .byte	%00000010	; SNAKE
   1296  298d				  -	      .byte	%01100010	; SNAKE
   1297  298d				  -	      .byte	%01000010	; SNAKE
   1298  298d				  -	      .byte	%01111110	; SNAKE
   1299  298d				  -
   1300  298d				  -			;byte %00000000 ; SNAKE
   1301  298d				  -
   1302  298d				  -	      .byte	%01111110	; SNAKE
   1303  298d				  -	      .byte	%01000010	; SNAKE
   1304  298d				  -	      .byte	%01000010	; SNAKE
   1305  298d				  -	      .byte	%01000010	; SNAKE
   1306  298d				  -	      .byte	%01111110	; SNAKE
   1307  298d				  -	      .byte	%01000010	; SNAKE
   1308  298d				  -	      .byte	%01000010	; SNAKE
   1309  298d				  -	      .byte	%01111110	; SNAKE
   1310  298d				  -
   1311  298d				  -			;byte %00000000 ; SNAKE
   1312  298d				  -
   1313  298d				  -	      .byte	%00001110	; SNAKE
   1314  298d				  -	      .byte	%00001010	; SNAKE
   1315  298d				  -	      .byte	%00000010	; SNAKE
   1316  298d				  -	      .byte	%00000010	; SNAKE
   1317  298d				  -	      .byte	%01111110	; SNAKE
   1318  298d				  -	      .byte	%01000010	; SNAKE
   1319  298d				  -	      .byte	%01000010	; SNAKE
   1320  298d				  -	      .byte	%01111110	; SNAKE
   1321  298d				  -
   1322  298d				  -
   1323  298d					      endif		; SNAKE
   1324  298d
   1325  298d				  -	      if	fontstyle == PLOK
   1326  298d				  -
   1327  298d				  -			;byte %00000000 ; PLOK
   1328  298d				  -
   1329  298d				  -	      .byte	%00000000	; PLOK
   1330  298d				  -	      .byte	%00111000	; PLOK
   1331  298d				  -	      .byte	%01100100	; PLOK
   1332  298d				  -	      .byte	%01100010	; PLOK
   1333  298d				  -	      .byte	%01100010	; PLOK
   1334  298d				  -	      .byte	%00110110	; PLOK
   1335  298d				  -	      .byte	%00011100	; PLOK
   1336  298d				  -	      .byte	%00000000	; PLOK
   1337  298d				  -
   1338  298d				  -			;byte %00000000 ; PLOK
   1339  298d				  -
   1340  298d				  -	      .byte	%00000000	; PLOK
   1341  298d				  -	      .byte	%00010000	; PLOK
   1342  298d				  -	      .byte	%00011100	; PLOK
   1343  298d				  -	      .byte	%00011100	; PLOK
   1344  298d				  -	      .byte	%00011000	; PLOK
   1345  298d				  -	      .byte	%00111000	; PLOK
   1346  298d				  -	      .byte	%00011000	; PLOK
   1347  298d				  -	      .byte	%00000000	; PLOK
   1348  298d				  -
   1349  298d				  -			;byte %00000000 ; PLOK
   1350  298d				  -
   1351  298d				  -	      .byte	%00000000	; PLOK
   1352  298d				  -	      .byte	%00001110	; PLOK
   1353  298d				  -	      .byte	%01111110	; PLOK
   1354  298d				  -	      .byte	%00011000	; PLOK
   1355  298d				  -	      .byte	%00001100	; PLOK
   1356  298d				  -	      .byte	%00000110	; PLOK
   1357  298d				  -	      .byte	%00111100	; PLOK
   1358  298d				  -	      .byte	%00000000	; PLOK
   1359  298d				  -
   1360  298d				  -			;byte %00000000 ; PLOK
   1361  298d				  -
   1362  298d				  -	      .byte	%00000000	; PLOK
   1363  298d				  -	      .byte	%00111100	; PLOK
   1364  298d				  -	      .byte	%01101110	; PLOK
   1365  298d				  -	      .byte	%00001110	; PLOK
   1366  298d				  -	      .byte	%00011100	; PLOK
   1367  298d				  -	      .byte	%00000110	; PLOK
   1368  298d				  -	      .byte	%01111100	; PLOK
   1369  298d				  -	      .byte	%00000000	; PLOK
   1370  298d				  -
   1371  298d				  -			;byte %00000000 ; PLOK
   1372  298d				  -
   1373  298d				  -	      .byte	%00000000	; PLOK
   1374  298d				  -	      .byte	%00011000	; PLOK
   1375  298d				  -	      .byte	%01111110	; PLOK
   1376  298d				  -	      .byte	%01101100	; PLOK
   1377  298d				  -	      .byte	%00100100	; PLOK
   1378  298d				  -	      .byte	%00110000	; PLOK
   1379  298d				  -	      .byte	%00110000	; PLOK
   1380  298d				  -	      .byte	%00000000	; PLOK
   1381  298d				  -
   1382  298d				  -			;byte %00000000 ; PLOK
   1383  298d				  -
   1384  298d				  -	      .byte	%00000000	; PLOK
   1385  298d				  -	      .byte	%00111100	; PLOK
   1386  298d				  -	      .byte	%01001110	; PLOK
   1387  298d				  -	      .byte	%00011100	; PLOK
   1388  298d				  -	      .byte	%01100000	; PLOK
   1389  298d				  -	      .byte	%01111100	; PLOK
   1390  298d				  -	      .byte	%00011100	; PLOK
   1391  298d				  -	      .byte	%00000000	; PLOK
   1392  298d				  -
   1393  298d				  -			;byte %00000000 ; PLOK
   1394  298d				  -
   1395  298d				  -	      .byte	%00000000	; PLOK
   1396  298d				  -	      .byte	%00111100	; PLOK
   1397  298d				  -	      .byte	%01000110	; PLOK
   1398  298d				  -	      .byte	%01101100	; PLOK
   1399  298d				  -	      .byte	%01110000	; PLOK
   1400  298d				  -	      .byte	%00111000	; PLOK
   1401  298d				  -	      .byte	%00010000	; PLOK
   1402  298d				  -	      .byte	%00000000	; PLOK
   1403  298d				  -
   1404  298d				  -			;byte %00000000 ; PLOK
   1405  298d				  -
   1406  298d				  -	      .byte	%00000000	; PLOK
   1407  298d				  -	      .byte	%00111100	; PLOK
   1408  298d				  -	      .byte	%00011100	; PLOK
   1409  298d				  -	      .byte	%00001100	; PLOK
   1410  298d				  -	      .byte	%00000110	; PLOK
   1411  298d				  -	      .byte	%01111110	; PLOK
   1412  298d				  -	      .byte	%00110000	; PLOK
   1413  298d				  -	      .byte	%00000000	; PLOK
   1414  298d				  -
   1415  298d				  -			;byte %00000000 ; PLOK
   1416  298d				  -
   1417  298d				  -	      .byte	%00000000	; PLOK
   1418  298d				  -	      .byte	%00111100	; PLOK
   1419  298d				  -	      .byte	%01001110	; PLOK
   1420  298d				  -	      .byte	%01101110	; PLOK
   1421  298d				  -	      .byte	%00111100	; PLOK
   1422  298d				  -	      .byte	%01100100	; PLOK
   1423  298d				  -	      .byte	%00111000	; PLOK
   1424  298d				  -	      .byte	%00000000	; PLOK
   1425  298d				  -
   1426  298d				  -			;byte %00000000 ; PLOK
   1427  298d				  -
   1428  298d				  -	      .byte	%00000000	; PLOK
   1429  298d				  -	      .byte	%00011000	; PLOK
   1430  298d				  -	      .byte	%00001100	; PLOK
   1431  298d				  -	      .byte	%00011100	; PLOK
   1432  298d				  -	      .byte	%00100110	; PLOK
   1433  298d				  -	      .byte	%01001110	; PLOK
   1434  298d				  -	      .byte	%00111100	; PLOK
   1435  298d				  -	      .byte	%00000000	; PLOK
   1436  298d				  -
   1437  298d					      endif		; PLOK
   1438  298d
   1439  298d							; ### any characters that aren't font specific follow...
   1440  298d
   1441  298d				  -	      ifconst	fontcharSPACE
   1442  298d				  -			;byte %00000000 ; SYMBOLS
   1443  298d				  -
   1444  298d				  -	      .byte	%00000000	; SYMBOLS
   1445  298d				  -	      .byte	%00000000	; SYMBOLS
   1446  298d				  -	      .byte	%00000000	; SYMBOLS
   1447  298d				  -	      .byte	%00000000	; SYMBOLS
   1448  298d				  -	      .byte	%00000000	; SYMBOLS
   1449  298d				  -	      .byte	%00000000	; SYMBOLS
   1450  298d				  -	      .byte	%00000000	; SYMBOLS
   1451  298d				  -	      .byte	%00000000	; SYMBOLS
   1452  298d				  -
   1453  298d				  -			;byte %00000000 ; SYMBOLS
   1454  298d					      endif		; fontcharSPACE
   1455  298d
   1456  298d				  -	      ifconst	fontcharDOLLAR
   1457  298d				  -			;byte %00000000 ; SYMBOLS
   1458  298d				  -
   1459  298d				  -	      .byte	%00000000	; SYMBOLS
   1460  298d				  -	      .byte	%00010000	; SYMBOLS
   1461  298d				  -	      .byte	%01111100	; SYMBOLS
   1462  298d				  -	      .byte	%00010010	; SYMBOLS
   1463  298d				  -	      .byte	%01111100	; SYMBOLS
   1464  298d				  -	      .byte	%10010000	; SYMBOLS
   1465  298d				  -	      .byte	%01111100	; SYMBOLS
   1466  298d				  -	      .byte	%00010000	; SYMBOLS
   1467  298d				  -
   1468  298d				  -			;byte %00000000 ; SYMBOLS
   1469  298d				  -
   1470  298d					      endif		; fontcharDOLLAR
   1471  298d
   1472  298d				  -	      ifconst	fontcharPOUND
   1473  298d				  -			;byte %00000000 ; SYMBOLS
   1474  298d				  -
   1475  298d				  -	      .byte	%01111110	; SYMBOLS
   1476  298d				  -	      .byte	%01000000	; SYMBOLS
   1477  298d				  -	      .byte	%00100000	; SYMBOLS
   1478  298d				  -	      .byte	%00100000	; SYMBOLS
   1479  298d				  -	      .byte	%01111000	; SYMBOLS
   1480  298d				  -	      .byte	%00100000	; SYMBOLS
   1481  298d				  -	      .byte	%00100010	; SYMBOLS
   1482  298d				  -	      .byte	%00011100	; SYMBOLS
   1483  298d				  -
   1484  298d				  -			;byte %00000000 ; SYMBOLS
   1485  298d				  -
   1486  298d					      endif		; fontcharPOUND
   1487  298d
   1488  298d
   1489  298d				  -	      ifconst	fontcharMRHAPPY
   1490  298d				  -			;byte %00000000 ; SYMBOLS
   1491  298d				  -
   1492  298d				  -	      .byte	%00111100	; SYMBOLS
   1493  298d				  -	      .byte	%01100110	; SYMBOLS
   1494  298d				  -	      .byte	%01011010	; SYMBOLS
   1495  298d				  -	      .byte	%01111110	; SYMBOLS
   1496  298d				  -	      .byte	%01111110	; SYMBOLS
   1497  298d				  -	      .byte	%01011010	; SYMBOLS
   1498  298d				  -	      .byte	%01111110	; SYMBOLS
   1499  298d				  -	      .byte	%00111100	; SYMBOLS
   1500  298d				  -
   1501  298d				  -			;byte %00000000 ; SYMBOLS
   1502  298d				  -
   1503  298d					      endif		; fontcharMRHAPPY
   1504  298d
   1505  298d				  -	      ifconst	fontcharMRSAD
   1506  298d				  -			;byte %00000000 ; SYMBOLS
   1507  298d				  -
   1508  298d				  -	      .byte	%00111100	; SYMBOLS
   1509  298d				  -	      .byte	%01011010	; SYMBOLS
   1510  298d				  -	      .byte	%01100110	; SYMBOLS
   1511  298d				  -	      .byte	%01111110	; SYMBOLS
   1512  298d				  -	      .byte	%01111110	; SYMBOLS
   1513  298d				  -	      .byte	%01011010	; SYMBOLS
   1514  298d				  -	      .byte	%01111110	; SYMBOLS
   1515  298d				  -	      .byte	%00111100	; SYMBOLS
   1516  298d				  -
   1517  298d				  -			;byte %00000000 ; SYMBOLS
   1518  298d				  -
   1519  298d					      endif		; fontcharMRSAD
   1520  298d
   1521  298d
   1522  298d				  -	      ifconst	fontcharCOPYRIGHT
   1523  298d				  -			;byte %00000000 ; SYMBOLS
   1524  298d				  -
   1525  298d				  -	      .byte	%00000000	; SYMBOLS
   1526  298d				  -	      .byte	%00111000	; SYMBOLS
   1527  298d				  -	      .byte	%01000100	; SYMBOLS
   1528  298d				  -	      .byte	%10111010	; SYMBOLS
   1529  298d				  -	      .byte	%10100010	; SYMBOLS
   1530  298d				  -	      .byte	%10111010	; SYMBOLS
   1531  298d				  -	      .byte	%01000100	; SYMBOLS
   1532  298d				  -	      .byte	%00111000	; SYMBOLS
   1533  298d				  -
   1534  298d				  -			;byte %00000000 ; SYMBOLS
   1535  298d				  -
   1536  298d					      endif		; fontcharCOPYRIGHT
   1537  298d
   1538  298d
   1539  298d				  -	      ifconst	fontcharFUJI
   1540  298d				  -
   1541  298d				  -			;byte %00000000 ; ** these commented-out blanks are for the preview generation program
   1542  298d				  -
   1543  298d				  -	      .byte	%01110000	; SYMBOLS
   1544  298d				  -	      .byte	%01111001	; SYMBOLS
   1545  298d				  -	      .byte	%00011101	; SYMBOLS
   1546  298d				  -	      .byte	%00001101	; SYMBOLS
   1547  298d				  -	      .byte	%00001101	; SYMBOLS
   1548  298d				  -	      .byte	%00001101	; SYMBOLS
   1549  298d				  -	      .byte	%00001101	; SYMBOLS
   1550  298d				  -	      .byte	%00000000	; SYMBOLS
   1551  298d				  -
   1552  298d				  -			;byte %00000000 ; SYMBOLS
   1553  298d				  -
   1554  298d				  -	      .byte	%00001110	; SYMBOLS
   1555  298d				  -	      .byte	%10011110	; SYMBOLS
   1556  298d				  -	      .byte	%10111000	; SYMBOLS
   1557  298d				  -	      .byte	%10110000	; SYMBOLS
   1558  298d				  -	      .byte	%10110000	; SYMBOLS
   1559  298d				  -	      .byte	%10110000	; SYMBOLS
   1560  298d				  -	      .byte	%10110000	; SYMBOLS
   1561  298d				  -	      .byte	%00000000	; SYMBOLS
   1562  298d				  -
   1563  298d				  -			;byte %00000000 ; SYMBOLS
   1564  298d				  -
   1565  298d					      endif		; fontcharFUJI
   1566  298d
   1567  298d
   1568  298d				  -	      ifconst	fontcharHEART
   1569  298d				  -			;byte %00000000 ; SYMBOLS
   1570  298d				  -
   1571  298d				  -	      .byte	%00010000	; SYMBOLS
   1572  298d				  -	      .byte	%00111000	; SYMBOLS
   1573  298d				  -	      .byte	%01111100	; SYMBOLS
   1574  298d				  -	      .byte	%01111100	; SYMBOLS
   1575  298d				  -	      .byte	%11111110	; SYMBOLS
   1576  298d				  -	      .byte	%11111110	; SYMBOLS
   1577  298d				  -	      .byte	%11101110	; SYMBOLS
   1578  298d				  -	      .byte	%01000100	; SYMBOLS
   1579  298d				  -
   1580  298d				  -			;byte %00000000 ; SYMBOLS
   1581  298d				  -
   1582  298d					      endif		; fontcharHEART
   1583  298d
   1584  298d				  -	      ifconst	fontcharDIAMOND
   1585  298d				  -			;byte %00000000 ; SYMBOLS
   1586  298d				  -
   1587  298d				  -	      .byte	%00010000	; SYMBOLS
   1588  298d				  -	      .byte	%00111000	; SYMBOLS
   1589  298d				  -	      .byte	%01111100	; SYMBOLS
   1590  298d				  -	      .byte	%11111110	; SYMBOLS
   1591  298d				  -	      .byte	%11111110	; SYMBOLS
   1592  298d				  -	      .byte	%01111100	; SYMBOLS
   1593  298d				  -	      .byte	%00111000	; SYMBOLS
   1594  298d				  -	      .byte	%00010000	; SYMBOLS
   1595  298d				  -
   1596  298d				  -			;byte %00000000 ; SYMBOLS
   1597  298d				  -
   1598  298d					      endif		; fontcharDIAMOND
   1599  298d
   1600  298d				  -	      ifconst	fontcharSPADE
   1601  298d				  -			;byte %00000000 ; SYMBOLS
   1602  298d				  -
   1603  298d				  -	      .byte	%00111000	; SYMBOLS
   1604  298d				  -	      .byte	%00010000	; SYMBOLS
   1605  298d				  -	      .byte	%01010100	; SYMBOLS
   1606  298d				  -	      .byte	%11111110	; SYMBOLS
   1607  298d				  -	      .byte	%11111110	; SYMBOLS
   1608  298d				  -	      .byte	%01111100	; SYMBOLS
   1609  298d				  -	      .byte	%00111000	; SYMBOLS
   1610  298d				  -	      .byte	%00010000	; SYMBOLS
   1611  298d				  -
   1612  298d				  -			;byte %00000000 ; SYMBOLS
   1613  298d				  -
   1614  298d					      endif		; fontcharSPADE
   1615  298d
   1616  298d				  -	      ifconst	fontcharCLUB
   1617  298d				  -			;byte %00000000 ; SYMBOLS
   1618  298d				  -
   1619  298d				  -	      .byte	%00111000	; SYMBOLS
   1620  298d				  -	      .byte	%00010000	; SYMBOLS
   1621  298d				  -	      .byte	%11010110	; SYMBOLS
   1622  298d				  -	      .byte	%11111110	; SYMBOLS
   1623  298d				  -	      .byte	%11010110	; SYMBOLS
   1624  298d				  -	      .byte	%00111000	; SYMBOLS
   1625  298d				  -	      .byte	%00111000	; SYMBOLS
   1626  298d				  -	      .byte	%00000000	; SYMBOLS
   1627  298d				  -
   1628  298d				  -			;byte %00000000 ; SYMBOLS
   1629  298d				  -
   1630  298d					      endif		; fontcharCLUB
   1631  298d
   1632  298d
   1633  298d				  -	      ifconst	fontcharCOLON
   1634  298d				  -			;byte %00000000 ; SYMBOLS
   1635  298d				  -
   1636  298d				  -	      .byte	%00000000	; SYMBOLS
   1637  298d				  -	      .byte	%00011000	; SYMBOLS
   1638  298d				  -	      .byte	%00011000	; SYMBOLS
   1639  298d				  -	      .byte	%00000000	; SYMBOLS
   1640  298d				  -	      .byte	%00000000	; SYMBOLS
   1641  298d				  -	      .byte	%00011000	; SYMBOLS
   1642  298d				  -	      .byte	%00011000	; SYMBOLS
   1643  298d				  -	      .byte	%00000000	; SYMBOLS
   1644  298d				  -
   1645  298d				  -			;byte %00000000 ; SYMBOLS
   1646  298d				  -
   1647  298d					      endif		; fontcharCOLON
   1648  298d
   1649  298d
   1650  298d				  -	      ifconst	fontcharBLOCK
   1651  298d				  -
   1652  298d				  -			;byte %00000000 ; SYMBOLS
   1653  298d				  -
   1654  298d				  -	      .byte	%11111111	; SYMBOLS
   1655  298d				  -	      .byte	%11111111	; SYMBOLS
   1656  298d				  -	      .byte	%11111111	; SYMBOLS
   1657  298d				  -	      .byte	%11111111	; SYMBOLS
   1658  298d				  -	      .byte	%11111111	; SYMBOLS
   1659  298d				  -	      .byte	%11111111	; SYMBOLS
   1660  298d				  -	      .byte	%11111111	; SYMBOLS
   1661  298d				  -	      .byte	%11111111	; SYMBOLS
   1662  298d				  -
   1663  298d				  -			;byte %00000000 ; SYMBOLS
   1664  298d				  -
   1665  298d					      endif		; fontcharBLOCK
   1666  298d
   1667  298d				  -	      ifconst	fontcharUNDERLINE
   1668  298d				  -
   1669  298d				  -			;byte %00000000 ; SYMBOLS
   1670  298d				  -
   1671  298d				  -	      .byte	%11111111	; SYMBOLS
   1672  298d				  -	      .byte	%00000000	; SYMBOLS
   1673  298d				  -	      .byte	%00000000	; SYMBOLS
   1674  298d				  -	      .byte	%00000000	; SYMBOLS
   1675  298d				  -	      .byte	%00000000	; SYMBOLS
   1676  298d				  -	      .byte	%00000000	; SYMBOLS
   1677  298d				  -	      .byte	%00000000	; SYMBOLS
   1678  298d				  -	      .byte	%00000000	; SYMBOLS
   1679  298d				  -
   1680  298d				  -			;byte %00000000 ; SYMBOLS
   1681  298d				  -
   1682  298d					      endif		; fontcharUNDERLINE
   1683  298d
   1684  298d				  -	      ifconst	fontcharARISIDE
   1685  298d				  -			;byte %00000000 ; SYMBOLS
   1686  298d				  -
   1687  298d				  -	      .byte	%00000000	; SYMBOLS
   1688  298d				  -	      .byte	%00101010	; SYMBOLS
   1689  298d				  -	      .byte	%00101010	; SYMBOLS
   1690  298d				  -	      .byte	%00101100	; SYMBOLS
   1691  298d				  -	      .byte	%01111111	; SYMBOLS
   1692  298d				  -	      .byte	%00110111	; SYMBOLS
   1693  298d				  -	      .byte	%00000010	; SYMBOLS
   1694  298d				  -	      .byte	%00000001	; SYMBOLS
   1695  298d				  -
   1696  298d				  -			;byte %00000000 ; SYMBOLS
   1697  298d				  -
   1698  298d					      endif		; fontcharARISIDE
   1699  298d
   1700  298d				  -	      ifconst	fontcharARIFACE
   1701  298d				  -			;byte %00000000 ; SYMBOLS
   1702  298d				  -
   1703  298d				  -	      .byte	%00001000	; SYMBOLS
   1704  298d				  -	      .byte	%00011100	; SYMBOLS
   1705  298d				  -	      .byte	%00111110	; SYMBOLS
   1706  298d				  -	      .byte	%00101010	; SYMBOLS
   1707  298d				  -	      .byte	%00011100	; SYMBOLS
   1708  298d				  -	      .byte	%01010100	; SYMBOLS
   1709  298d				  -	      .byte	%00100100	; SYMBOLS
   1710  298d				  -	      .byte	%00000010	; SYMBOLS
   1711  298d				  -
   1712  298d				  -			;byte %00000000 ; SYMBOLS
   1713  298d				  -
   1714  298d				  -
   1715  298d					      endif		; fontcharARIRACE
   1716  298d
------- FILE titlescreen/asm/titlescreen.asm
    303  298d					      endif
    304  298d
    305  298d					      ifconst	mk_gameselect_on
------- FILE titlescreen/gameselect_image.asm LEVEL 3 PASS 3
      0  298d					      include	"titlescreen/gameselect_image.asm"
      1  298d				  -	      ifnconst	bmp_gameselect_color
      2  298d				  -bmp_gameselect_color
      3  298d					      endif
      4  298d		       0f		      .byte.b	$0f
      5  298e
      6  298e				  -	      if	>. != >[.+5]
      7  298e				  -	      align	256
      8  298e					      endif
      9  298e				   bmp_gameselect_CHAR0
     10  298e
     11  298e		       7a		      .byte.b	%01111010
     12  298f		       8a		      .byte.b	%10001010
     13  2990		       bb		      .byte.b	%10111011
     14  2991		       82		      .byte.b	%10000010
     15  2992		       79		      .byte.b	%01111001
     16  2993
     17  2993				  -	      if	>. != >[.+5]
     18  2993				  -	      align	256
     19  2993					      endif
     20  2993				   bmp_gameselect_CHAR1
     21  2993
     22  2993		       51		      .byte.b	%01010001
     23  2994		       51		      .byte.b	%01010001
     24  2995		       d5		      .byte.b	%11010101
     25  2996		       5b		      .byte.b	%01011011
     26  2997		       91		      .byte.b	%10010001
     27  2998
     28  2998				  -	      if	>. != >[.+5]
     29  2998				  -	      align	256
     30  2998					      endif
     31  2998				   bmp_gameselect_CHAR2
     32  2998		       78		      .byte.b	%01111000
     33  2999		       40		      .byte.b	%01000000
     34  299a		       70		      .byte.b	%01110000
     35  299b		       40		      .byte.b	%01000000
     36  299c		       78		      .byte.b	%01111000
     37  299d
     38  299d				  -	      if	>. != >[.+5]
     39  299d				  -	      align	256
     40  299d					      endif
     41  299d				   bmp_gameselect_CHAR3
     42  299d		       00		      .byte.b	%00000000
     43  299e		       00		      .byte.b	%00000000
     44  299f		       00		      .byte.b	%00000000
     45  29a0		       00		      .byte.b	%00000000
     46  29a1		       00		      .byte.b	%00000000
     47  29a2
     48  29a2				  -	      if	>. != >[.+80]
     49  29a2				  -	      align	256
     50  29a2					      endif
     51  29a2
     52  29a2				   font_gameselect_img
     53  29a2		       3c		      .byte.b	%00111100
     54  29a3		       66		      .byte.b	%01100110
     55  29a4		       66		      .byte.b	%01100110
     56  29a5		       66		      .byte.b	%01100110
     57  29a6		       3c		      .byte.b	%00111100
     58  29a7
     59  29a7		       3c		      .byte.b	%00111100
     60  29a8		       18		      .byte.b	%00011000
     61  29a9		       18		      .byte.b	%00011000
     62  29aa		       18		      .byte.b	%00011000
     63  29ab		       38		      .byte.b	%00111000
     64  29ac
     65  29ac		       7e		      .byte.b	%01111110
     66  29ad		       60		      .byte.b	%01100000
     67  29ae		       3c		      .byte.b	%00111100
     68  29af		       06		      .byte.b	%00000110
     69  29b0		       7c		      .byte.b	%01111100
     70  29b1
     71  29b1		       7c		      .byte.b	%01111100
     72  29b2		       06		      .byte.b	%00000110
     73  29b3		       1c		      .byte.b	%00011100
     74  29b4		       06		      .byte.b	%00000110
     75  29b5		       7c		      .byte.b	%01111100
     76  29b6
     77  29b6		       06		      .byte.b	%00000110
     78  29b7		       06		      .byte.b	%00000110
     79  29b8		       7e		      .byte.b	%01111110
     80  29b9		       66		      .byte.b	%01100110
     81  29ba		       66		      .byte.b	%01100110
     82  29bb
     83  29bb		       7c		      .byte.b	%01111100
     84  29bc		       06		      .byte.b	%00000110
     85  29bd		       7c		      .byte.b	%01111100
     86  29be		       60		      .byte.b	%01100000
     87  29bf		       7e		      .byte.b	%01111110
     88  29c0
     89  29c0		       3c		      .byte.b	%00111100
     90  29c1		       66		      .byte.b	%01100110
     91  29c2		       7c		      .byte.b	%01111100
     92  29c3		       60		      .byte.b	%01100000
     93  29c4		       3c		      .byte.b	%00111100
     94  29c5
     95  29c5		       18		      .byte.b	%00011000
     96  29c6		       18		      .byte.b	%00011000
     97  29c7		       0c		      .byte.b	%00001100
     98  29c8		       06		      .byte.b	%00000110
     99  29c9		       7e		      .byte.b	%01111110
    100  29ca
    101  29ca		       3c		      .byte.b	%00111100
    102  29cb		       66		      .byte.b	%01100110
    103  29cc		       3c		      .byte.b	%00111100
    104  29cd		       66		      .byte.b	%01100110
    105  29ce		       3c		      .byte.b	%00111100
    106  29cf
    107  29cf		       3c		      .byte.b	%00111100
    108  29d0		       06		      .byte.b	%00000110
    109  29d1		       3e		      .byte.b	%00111110
    110  29d2		       66		      .byte.b	%01100110
    111  29d3		       3c		      .byte.b	%00111100
    112  29d4
    113  29d4				  -	      ifnconst	gamenumber
    114  29d4				  -gamenumber
    115  29d4					      endif
    116  29d4		       00		      .byte.b	0
    117  29d5
------- FILE titlescreen/asm/titlescreen.asm
    307  29d5					      endif
    308  29d5
    309  29d5				  -	      ifconst	mk_player_on
    310  29d5				  -	      include	"titlescreen/asm/player_kernel.asm"
    311  29d5					      endif		;mk_player_on
    312  29d5
    313  29d5
------- FILE d:\Firmaplus\Firmaplus_intern\Atari\PlusROM\Projekte-batariBasic\CaveApocalypse\C.A.V.E. Apocalypse.bas.asm
   5077  29d5
   5078  29d5				   .
   5079  29d5							; 
   5080  29d5
   5081  29d5				   .L0559		;  bank 3
   5082  29d5
   5083  29d5					      if	ECHO2
      1532 bytes of ROM space left in bank 2
   5084  29d5					      echo	"    ",[(start_bank2 - *)]d , "bytes of ROM space left in bank 2")
   5085  29d5					      endif
   5086  29d5		       00 01	   ECHO2      =	1
   5087  2fd1					      ORG	$2FF4-bscode_length
   5088  2fd1					      RORG	$BFF4-bscode_length
   5089  2fd1		       a2 ff	   start_bank2 ldx	#$ff
   5090  2fd3				  -	      ifconst	FASTFETCH	; using DPC+
   5091  2fd3				  -	      stx	FASTFETCH
   5092  2fd3					      endif
   5093  2fd3		       9a		      txs
   5094  2fd4				  -	      if	bankswitch == 64
   5095  2fd4				  -	      lda	#(((>(start-1)) & $0F) | $F0)
   5096  2fd4					      else
   5097  2fd4		       a9 f2		      lda	#>(start-1)
   5098  2fd6					      endif
   5099  2fd6		       48		      pha
   5100  2fd7		       a9 b0		      lda	#<(start-1)
   5101  2fd9		       48		      pha
   5102  2fda		       48		      pha
   5103  2fdb		       8a		      txa
   5104  2fdc		       48		      pha
   5105  2fdd		       ba		      tsx
   5106  2fde					      if	bankswitch != 64
   5107  2fde		       b5 04		      lda	4,x	; get high byte of return address
   5108  2fe0		       2a		      rol
   5109  2fe1		       2a		      rol
   5110  2fe2		       2a		      rol
   5111  2fe3		       2a		      rol
   5112  2fe4		       29 03		      and	#bs_mask	;1 3 or 7 for F8/F6/F4
   5113  2fe6		       aa		      tax
   5114  2fe7		       e8		      inx
   5115  2fe8				  -	      else
   5116  2fe8				  -	      lda	4,x	; get high byte of return address
   5117  2fe8				  -	      tay
   5118  2fe8				  -	      ora	#$10	; change our bank nibble into a valid rom mirror
   5119  2fe8				  -	      sta	4,x
   5120  2fe8				  -	      tya
   5121  2fe8				  -	      lsr
   5122  2fe8				  -	      lsr
   5123  2fe8				  -	      lsr
   5124  2fe8				  -	      lsr
   5125  2fe8				  -	      tax
   5126  2fe8				  -	      inx
   5127  2fe8					      endif
   5128  2fe8		       bd f5 1f 	      lda	bankswitch_hotspot-1,x
   5129  2feb		       68		      pla
   5130  2fec		       aa		      tax
   5131  2fed		       68		      pla
   5132  2fee		       60		      rts
   5133  2fef				  -	      if	((* & $1FFF) > ((bankswitch_hotspot & $1FFF) - 1))
   5134  2fef				  -	      echo	"WARNING: size parameter in banksw.asm too small - the program probably will not work."
   5135  2fef				  -	      echo	"Change to",[(*-begin_bscode+1)&$FF]d,"and try again."
   5136  2fef					      endif
   5137  2ffc					      ORG	$2FFC
   5138  2ffc					      RORG	$BFFC
   5139  2ffc		       d1 bf		      .word.w	(start_bank2 & $ffff)
   5140  2ffe		       d1 bf		      .word.w	(start_bank2 & $ffff)
   5141  3000					      ORG	$3000
   5142  3000					      RORG	$D000
   5143  3000					      repeat	256
   5144  3000		       ff		      .byte.b	$ff
   5143  3000					      repend
   5144  3001		       ff		      .byte.b	$ff
   5143  3001					      repend
   5144  3002		       ff		      .byte.b	$ff
   5143  3002					      repend
   5144  3003		       ff		      .byte.b	$ff
   5143  3003					      repend
   5144  3004		       ff		      .byte.b	$ff
   5143  3004					      repend
   5144  3005		       ff		      .byte.b	$ff
   5143  3005					      repend
   5144  3006		       ff		      .byte.b	$ff
   5143  3006					      repend
   5144  3007		       ff		      .byte.b	$ff
   5143  3007					      repend
   5144  3008		       ff		      .byte.b	$ff
   5143  3008					      repend
   5144  3009		       ff		      .byte.b	$ff
   5143  3009					      repend
   5144  300a		       ff		      .byte.b	$ff
   5143  300a					      repend
   5144  300b		       ff		      .byte.b	$ff
   5143  300b					      repend
   5144  300c		       ff		      .byte.b	$ff
   5143  300c					      repend
   5144  300d		       ff		      .byte.b	$ff
   5143  300d					      repend
   5144  300e		       ff		      .byte.b	$ff
   5143  300e					      repend
   5144  300f		       ff		      .byte.b	$ff
   5143  300f					      repend
   5144  3010		       ff		      .byte.b	$ff
   5143  3010					      repend
   5144  3011		       ff		      .byte.b	$ff
   5143  3011					      repend
   5144  3012		       ff		      .byte.b	$ff
   5143  3012					      repend
   5144  3013		       ff		      .byte.b	$ff
   5143  3013					      repend
   5144  3014		       ff		      .byte.b	$ff
   5143  3014					      repend
   5144  3015		       ff		      .byte.b	$ff
   5143  3015					      repend
   5144  3016		       ff		      .byte.b	$ff
   5143  3016					      repend
   5144  3017		       ff		      .byte.b	$ff
   5143  3017					      repend
   5144  3018		       ff		      .byte.b	$ff
   5143  3018					      repend
   5144  3019		       ff		      .byte.b	$ff
   5143  3019					      repend
   5144  301a		       ff		      .byte.b	$ff
   5143  301a					      repend
   5144  301b		       ff		      .byte.b	$ff
   5143  301b					      repend
   5144  301c		       ff		      .byte.b	$ff
   5143  301c					      repend
   5144  301d		       ff		      .byte.b	$ff
   5143  301d					      repend
   5144  301e		       ff		      .byte.b	$ff
   5143  301e					      repend
   5144  301f		       ff		      .byte.b	$ff
   5143  301f					      repend
   5144  3020		       ff		      .byte.b	$ff
   5143  3020					      repend
   5144  3021		       ff		      .byte.b	$ff
   5143  3021					      repend
   5144  3022		       ff		      .byte.b	$ff
   5143  3022					      repend
   5144  3023		       ff		      .byte.b	$ff
   5143  3023					      repend
   5144  3024		       ff		      .byte.b	$ff
   5143  3024					      repend
   5144  3025		       ff		      .byte.b	$ff
   5143  3025					      repend
   5144  3026		       ff		      .byte.b	$ff
   5143  3026					      repend
   5144  3027		       ff		      .byte.b	$ff
   5143  3027					      repend
   5144  3028		       ff		      .byte.b	$ff
   5143  3028					      repend
   5144  3029		       ff		      .byte.b	$ff
   5143  3029					      repend
   5144  302a		       ff		      .byte.b	$ff
   5143  302a					      repend
   5144  302b		       ff		      .byte.b	$ff
   5143  302b					      repend
   5144  302c		       ff		      .byte.b	$ff
   5143  302c					      repend
   5144  302d		       ff		      .byte.b	$ff
   5143  302d					      repend
   5144  302e		       ff		      .byte.b	$ff
   5143  302e					      repend
   5144  302f		       ff		      .byte.b	$ff
   5143  302f					      repend
   5144  3030		       ff		      .byte.b	$ff
   5143  3030					      repend
   5144  3031		       ff		      .byte.b	$ff
   5143  3031					      repend
   5144  3032		       ff		      .byte.b	$ff
   5143  3032					      repend
   5144  3033		       ff		      .byte.b	$ff
   5143  3033					      repend
   5144  3034		       ff		      .byte.b	$ff
   5143  3034					      repend
   5144  3035		       ff		      .byte.b	$ff
   5143  3035					      repend
   5144  3036		       ff		      .byte.b	$ff
   5143  3036					      repend
   5144  3037		       ff		      .byte.b	$ff
   5143  3037					      repend
   5144  3038		       ff		      .byte.b	$ff
   5143  3038					      repend
   5144  3039		       ff		      .byte.b	$ff
   5143  3039					      repend
   5144  303a		       ff		      .byte.b	$ff
   5143  303a					      repend
   5144  303b		       ff		      .byte.b	$ff
   5143  303b					      repend
   5144  303c		       ff		      .byte.b	$ff
   5143  303c					      repend
   5144  303d		       ff		      .byte.b	$ff
   5143  303d					      repend
   5144  303e		       ff		      .byte.b	$ff
   5143  303e					      repend
   5144  303f		       ff		      .byte.b	$ff
   5143  303f					      repend
   5144  3040		       ff		      .byte.b	$ff
   5143  3040					      repend
   5144  3041		       ff		      .byte.b	$ff
   5143  3041					      repend
   5144  3042		       ff		      .byte.b	$ff
   5143  3042					      repend
   5144  3043		       ff		      .byte.b	$ff
   5143  3043					      repend
   5144  3044		       ff		      .byte.b	$ff
   5143  3044					      repend
   5144  3045		       ff		      .byte.b	$ff
   5143  3045					      repend
   5144  3046		       ff		      .byte.b	$ff
   5143  3046					      repend
   5144  3047		       ff		      .byte.b	$ff
   5143  3047					      repend
   5144  3048		       ff		      .byte.b	$ff
   5143  3048					      repend
   5144  3049		       ff		      .byte.b	$ff
   5143  3049					      repend
   5144  304a		       ff		      .byte.b	$ff
   5143  304a					      repend
   5144  304b		       ff		      .byte.b	$ff
   5143  304b					      repend
   5144  304c		       ff		      .byte.b	$ff
   5143  304c					      repend
   5144  304d		       ff		      .byte.b	$ff
   5143  304d					      repend
   5144  304e		       ff		      .byte.b	$ff
   5143  304e					      repend
   5144  304f		       ff		      .byte.b	$ff
   5143  304f					      repend
   5144  3050		       ff		      .byte.b	$ff
   5143  3050					      repend
   5144  3051		       ff		      .byte.b	$ff
   5143  3051					      repend
   5144  3052		       ff		      .byte.b	$ff
   5143  3052					      repend
   5144  3053		       ff		      .byte.b	$ff
   5143  3053					      repend
   5144  3054		       ff		      .byte.b	$ff
   5143  3054					      repend
   5144  3055		       ff		      .byte.b	$ff
   5143  3055					      repend
   5144  3056		       ff		      .byte.b	$ff
   5143  3056					      repend
   5144  3057		       ff		      .byte.b	$ff
   5143  3057					      repend
   5144  3058		       ff		      .byte.b	$ff
   5143  3058					      repend
   5144  3059		       ff		      .byte.b	$ff
   5143  3059					      repend
   5144  305a		       ff		      .byte.b	$ff
   5143  305a					      repend
   5144  305b		       ff		      .byte.b	$ff
   5143  305b					      repend
   5144  305c		       ff		      .byte.b	$ff
   5143  305c					      repend
   5144  305d		       ff		      .byte.b	$ff
   5143  305d					      repend
   5144  305e		       ff		      .byte.b	$ff
   5143  305e					      repend
   5144  305f		       ff		      .byte.b	$ff
   5143  305f					      repend
   5144  3060		       ff		      .byte.b	$ff
   5143  3060					      repend
   5144  3061		       ff		      .byte.b	$ff
   5143  3061					      repend
   5144  3062		       ff		      .byte.b	$ff
   5143  3062					      repend
   5144  3063		       ff		      .byte.b	$ff
   5143  3063					      repend
   5144  3064		       ff		      .byte.b	$ff
   5143  3064					      repend
   5144  3065		       ff		      .byte.b	$ff
   5143  3065					      repend
   5144  3066		       ff		      .byte.b	$ff
   5143  3066					      repend
   5144  3067		       ff		      .byte.b	$ff
   5143  3067					      repend
   5144  3068		       ff		      .byte.b	$ff
   5143  3068					      repend
   5144  3069		       ff		      .byte.b	$ff
   5143  3069					      repend
   5144  306a		       ff		      .byte.b	$ff
   5143  306a					      repend
   5144  306b		       ff		      .byte.b	$ff
   5143  306b					      repend
   5144  306c		       ff		      .byte.b	$ff
   5143  306c					      repend
   5144  306d		       ff		      .byte.b	$ff
   5143  306d					      repend
   5144  306e		       ff		      .byte.b	$ff
   5143  306e					      repend
   5144  306f		       ff		      .byte.b	$ff
   5143  306f					      repend
   5144  3070		       ff		      .byte.b	$ff
   5143  3070					      repend
   5144  3071		       ff		      .byte.b	$ff
   5143  3071					      repend
   5144  3072		       ff		      .byte.b	$ff
   5143  3072					      repend
   5144  3073		       ff		      .byte.b	$ff
   5143  3073					      repend
   5144  3074		       ff		      .byte.b	$ff
   5143  3074					      repend
   5144  3075		       ff		      .byte.b	$ff
   5143  3075					      repend
   5144  3076		       ff		      .byte.b	$ff
   5143  3076					      repend
   5144  3077		       ff		      .byte.b	$ff
   5143  3077					      repend
   5144  3078		       ff		      .byte.b	$ff
   5143  3078					      repend
   5144  3079		       ff		      .byte.b	$ff
   5143  3079					      repend
   5144  307a		       ff		      .byte.b	$ff
   5143  307a					      repend
   5144  307b		       ff		      .byte.b	$ff
   5143  307b					      repend
   5144  307c		       ff		      .byte.b	$ff
   5143  307c					      repend
   5144  307d		       ff		      .byte.b	$ff
   5143  307d					      repend
   5144  307e		       ff		      .byte.b	$ff
   5143  307e					      repend
   5144  307f		       ff		      .byte.b	$ff
   5143  307f					      repend
   5144  3080		       ff		      .byte.b	$ff
   5143  3080					      repend
   5144  3081		       ff		      .byte.b	$ff
   5143  3081					      repend
   5144  3082		       ff		      .byte.b	$ff
   5143  3082					      repend
   5144  3083		       ff		      .byte.b	$ff
   5143  3083					      repend
   5144  3084		       ff		      .byte.b	$ff
   5143  3084					      repend
   5144  3085		       ff		      .byte.b	$ff
   5143  3085					      repend
   5144  3086		       ff		      .byte.b	$ff
   5143  3086					      repend
   5144  3087		       ff		      .byte.b	$ff
   5143  3087					      repend
   5144  3088		       ff		      .byte.b	$ff
   5143  3088					      repend
   5144  3089		       ff		      .byte.b	$ff
   5143  3089					      repend
   5144  308a		       ff		      .byte.b	$ff
   5143  308a					      repend
   5144  308b		       ff		      .byte.b	$ff
   5143  308b					      repend
   5144  308c		       ff		      .byte.b	$ff
   5143  308c					      repend
   5144  308d		       ff		      .byte.b	$ff
   5143  308d					      repend
   5144  308e		       ff		      .byte.b	$ff
   5143  308e					      repend
   5144  308f		       ff		      .byte.b	$ff
   5143  308f					      repend
   5144  3090		       ff		      .byte.b	$ff
   5143  3090					      repend
   5144  3091		       ff		      .byte.b	$ff
   5143  3091					      repend
   5144  3092		       ff		      .byte.b	$ff
   5143  3092					      repend
   5144  3093		       ff		      .byte.b	$ff
   5143  3093					      repend
   5144  3094		       ff		      .byte.b	$ff
   5143  3094					      repend
   5144  3095		       ff		      .byte.b	$ff
   5143  3095					      repend
   5144  3096		       ff		      .byte.b	$ff
   5143  3096					      repend
   5144  3097		       ff		      .byte.b	$ff
   5143  3097					      repend
   5144  3098		       ff		      .byte.b	$ff
   5143  3098					      repend
   5144  3099		       ff		      .byte.b	$ff
   5143  3099					      repend
   5144  309a		       ff		      .byte.b	$ff
   5143  309a					      repend
   5144  309b		       ff		      .byte.b	$ff
   5143  309b					      repend
   5144  309c		       ff		      .byte.b	$ff
   5143  309c					      repend
   5144  309d		       ff		      .byte.b	$ff
   5143  309d					      repend
   5144  309e		       ff		      .byte.b	$ff
   5143  309e					      repend
   5144  309f		       ff		      .byte.b	$ff
   5143  309f					      repend
   5144  30a0		       ff		      .byte.b	$ff
   5143  30a0					      repend
   5144  30a1		       ff		      .byte.b	$ff
   5143  30a1					      repend
   5144  30a2		       ff		      .byte.b	$ff
   5143  30a2					      repend
   5144  30a3		       ff		      .byte.b	$ff
   5143  30a3					      repend
   5144  30a4		       ff		      .byte.b	$ff
   5143  30a4					      repend
   5144  30a5		       ff		      .byte.b	$ff
   5143  30a5					      repend
   5144  30a6		       ff		      .byte.b	$ff
   5143  30a6					      repend
   5144  30a7		       ff		      .byte.b	$ff
   5143  30a7					      repend
   5144  30a8		       ff		      .byte.b	$ff
   5143  30a8					      repend
   5144  30a9		       ff		      .byte.b	$ff
   5143  30a9					      repend
   5144  30aa		       ff		      .byte.b	$ff
   5143  30aa					      repend
   5144  30ab		       ff		      .byte.b	$ff
   5143  30ab					      repend
   5144  30ac		       ff		      .byte.b	$ff
   5143  30ac					      repend
   5144  30ad		       ff		      .byte.b	$ff
   5143  30ad					      repend
   5144  30ae		       ff		      .byte.b	$ff
   5143  30ae					      repend
   5144  30af		       ff		      .byte.b	$ff
   5143  30af					      repend
   5144  30b0		       ff		      .byte.b	$ff
   5143  30b0					      repend
   5144  30b1		       ff		      .byte.b	$ff
   5143  30b1					      repend
   5144  30b2		       ff		      .byte.b	$ff
   5143  30b2					      repend
   5144  30b3		       ff		      .byte.b	$ff
   5143  30b3					      repend
   5144  30b4		       ff		      .byte.b	$ff
   5143  30b4					      repend
   5144  30b5		       ff		      .byte.b	$ff
   5143  30b5					      repend
   5144  30b6		       ff		      .byte.b	$ff
   5143  30b6					      repend
   5144  30b7		       ff		      .byte.b	$ff
   5143  30b7					      repend
   5144  30b8		       ff		      .byte.b	$ff
   5143  30b8					      repend
   5144  30b9		       ff		      .byte.b	$ff
   5143  30b9					      repend
   5144  30ba		       ff		      .byte.b	$ff
   5143  30ba					      repend
   5144  30bb		       ff		      .byte.b	$ff
   5143  30bb					      repend
   5144  30bc		       ff		      .byte.b	$ff
   5143  30bc					      repend
   5144  30bd		       ff		      .byte.b	$ff
   5143  30bd					      repend
   5144  30be		       ff		      .byte.b	$ff
   5143  30be					      repend
   5144  30bf		       ff		      .byte.b	$ff
   5143  30bf					      repend
   5144  30c0		       ff		      .byte.b	$ff
   5143  30c0					      repend
   5144  30c1		       ff		      .byte.b	$ff
   5143  30c1					      repend
   5144  30c2		       ff		      .byte.b	$ff
   5143  30c2					      repend
   5144  30c3		       ff		      .byte.b	$ff
   5143  30c3					      repend
   5144  30c4		       ff		      .byte.b	$ff
   5143  30c4					      repend
   5144  30c5		       ff		      .byte.b	$ff
   5143  30c5					      repend
   5144  30c6		       ff		      .byte.b	$ff
   5143  30c6					      repend
   5144  30c7		       ff		      .byte.b	$ff
   5143  30c7					      repend
   5144  30c8		       ff		      .byte.b	$ff
   5143  30c8					      repend
   5144  30c9		       ff		      .byte.b	$ff
   5143  30c9					      repend
   5144  30ca		       ff		      .byte.b	$ff
   5143  30ca					      repend
   5144  30cb		       ff		      .byte.b	$ff
   5143  30cb					      repend
   5144  30cc		       ff		      .byte.b	$ff
   5143  30cc					      repend
   5144  30cd		       ff		      .byte.b	$ff
   5143  30cd					      repend
   5144  30ce		       ff		      .byte.b	$ff
   5143  30ce					      repend
   5144  30cf		       ff		      .byte.b	$ff
   5143  30cf					      repend
   5144  30d0		       ff		      .byte.b	$ff
   5143  30d0					      repend
   5144  30d1		       ff		      .byte.b	$ff
   5143  30d1					      repend
   5144  30d2		       ff		      .byte.b	$ff
   5143  30d2					      repend
   5144  30d3		       ff		      .byte.b	$ff
   5143  30d3					      repend
   5144  30d4		       ff		      .byte.b	$ff
   5143  30d4					      repend
   5144  30d5		       ff		      .byte.b	$ff
   5143  30d5					      repend
   5144  30d6		       ff		      .byte.b	$ff
   5143  30d6					      repend
   5144  30d7		       ff		      .byte.b	$ff
   5143  30d7					      repend
   5144  30d8		       ff		      .byte.b	$ff
   5143  30d8					      repend
   5144  30d9		       ff		      .byte.b	$ff
   5143  30d9					      repend
   5144  30da		       ff		      .byte.b	$ff
   5143  30da					      repend
   5144  30db		       ff		      .byte.b	$ff
   5143  30db					      repend
   5144  30dc		       ff		      .byte.b	$ff
   5143  30dc					      repend
   5144  30dd		       ff		      .byte.b	$ff
   5143  30dd					      repend
   5144  30de		       ff		      .byte.b	$ff
   5143  30de					      repend
   5144  30df		       ff		      .byte.b	$ff
   5143  30df					      repend
   5144  30e0		       ff		      .byte.b	$ff
   5143  30e0					      repend
   5144  30e1		       ff		      .byte.b	$ff
   5143  30e1					      repend
   5144  30e2		       ff		      .byte.b	$ff
   5143  30e2					      repend
   5144  30e3		       ff		      .byte.b	$ff
   5143  30e3					      repend
   5144  30e4		       ff		      .byte.b	$ff
   5143  30e4					      repend
   5144  30e5		       ff		      .byte.b	$ff
   5143  30e5					      repend
   5144  30e6		       ff		      .byte.b	$ff
   5143  30e6					      repend
   5144  30e7		       ff		      .byte.b	$ff
   5143  30e7					      repend
   5144  30e8		       ff		      .byte.b	$ff
   5143  30e8					      repend
   5144  30e9		       ff		      .byte.b	$ff
   5143  30e9					      repend
   5144  30ea		       ff		      .byte.b	$ff
   5143  30ea					      repend
   5144  30eb		       ff		      .byte.b	$ff
   5143  30eb					      repend
   5144  30ec		       ff		      .byte.b	$ff
   5143  30ec					      repend
   5144  30ed		       ff		      .byte.b	$ff
   5143  30ed					      repend
   5144  30ee		       ff		      .byte.b	$ff
   5143  30ee					      repend
   5144  30ef		       ff		      .byte.b	$ff
   5143  30ef					      repend
   5144  30f0		       ff		      .byte.b	$ff
   5143  30f0					      repend
   5144  30f1		       ff		      .byte.b	$ff
   5143  30f1					      repend
   5144  30f2		       ff		      .byte.b	$ff
   5143  30f2					      repend
   5144  30f3		       ff		      .byte.b	$ff
   5143  30f3					      repend
   5144  30f4		       ff		      .byte.b	$ff
   5143  30f4					      repend
   5144  30f5		       ff		      .byte.b	$ff
   5143  30f5					      repend
   5144  30f6		       ff		      .byte.b	$ff
   5143  30f6					      repend
   5144  30f7		       ff		      .byte.b	$ff
   5143  30f7					      repend
   5144  30f8		       ff		      .byte.b	$ff
   5143  30f8					      repend
   5144  30f9		       ff		      .byte.b	$ff
   5143  30f9					      repend
   5144  30fa		       ff		      .byte.b	$ff
   5143  30fa					      repend
   5144  30fb		       ff		      .byte.b	$ff
   5143  30fb					      repend
   5144  30fc		       ff		      .byte.b	$ff
   5143  30fc					      repend
   5144  30fd		       ff		      .byte.b	$ff
   5143  30fd					      repend
   5144  30fe		       ff		      .byte.b	$ff
   5143  30fe					      repend
   5144  30ff		       ff		      .byte.b	$ff
   5145  3100					      repend
   5146  3100				   .
   5147  3100							; 
   5148  3100
   5149  3100				   .L0560		;  bank 4
   5150  3100
   5151  3100					      if	ECHO3
      3793 bytes of ROM space left in bank 3
   5152  3100					      echo	"    ",[(start_bank3 - *)]d , "bytes of ROM space left in bank 3")
   5153  3100					      endif
   5154  3100		       00 01	   ECHO3      =	1
   5155  3fd1					      ORG	$3FF4-bscode_length
   5156  3fd1					      RORG	$DFF4-bscode_length
   5157  3fd1		       a2 ff	   start_bank3 ldx	#$ff
   5158  3fd3				  -	      ifconst	FASTFETCH	; using DPC+
   5159  3fd3				  -	      stx	FASTFETCH
   5160  3fd3					      endif
   5161  3fd3		       9a		      txs
   5162  3fd4				  -	      if	bankswitch == 64
   5163  3fd4				  -	      lda	#(((>(start-1)) & $0F) | $F0)
   5164  3fd4					      else
   5165  3fd4		       a9 f2		      lda	#>(start-1)
   5166  3fd6					      endif
   5167  3fd6		       48		      pha
   5168  3fd7		       a9 b0		      lda	#<(start-1)
   5169  3fd9		       48		      pha
   5170  3fda		       48		      pha
   5171  3fdb		       8a		      txa
   5172  3fdc		       48		      pha
   5173  3fdd		       ba		      tsx
   5174  3fde					      if	bankswitch != 64
   5175  3fde		       b5 04		      lda	4,x	; get high byte of return address
   5176  3fe0		       2a		      rol
   5177  3fe1		       2a		      rol
   5178  3fe2		       2a		      rol
   5179  3fe3		       2a		      rol
   5180  3fe4		       29 03		      and	#bs_mask	;1 3 or 7 for F8/F6/F4
   5181  3fe6		       aa		      tax
   5182  3fe7		       e8		      inx
   5183  3fe8				  -	      else
   5184  3fe8				  -	      lda	4,x	; get high byte of return address
   5185  3fe8				  -	      tay
   5186  3fe8				  -	      ora	#$10	; change our bank nibble into a valid rom mirror
   5187  3fe8				  -	      sta	4,x
   5188  3fe8				  -	      tya
   5189  3fe8				  -	      lsr
   5190  3fe8				  -	      lsr
   5191  3fe8				  -	      lsr
   5192  3fe8				  -	      lsr
   5193  3fe8				  -	      tax
   5194  3fe8				  -	      inx
   5195  3fe8					      endif
   5196  3fe8		       bd f5 1f 	      lda	bankswitch_hotspot-1,x
   5197  3feb		       68		      pla
   5198  3fec		       aa		      tax
   5199  3fed		       68		      pla
   5200  3fee		       60		      rts
   5201  3fef				  -	      if	((* & $1FFF) > ((bankswitch_hotspot & $1FFF) - 1))
   5202  3fef				  -	      echo	"WARNING: size parameter in banksw.asm too small - the program probably will not work."
   5203  3fef				  -	      echo	"Change to",[(*-begin_bscode+1)&$FF]d,"and try again."
   5204  3fef					      endif
   5205  3ffc					      ORG	$3FFC
   5206  3ffc					      RORG	$DFFC
   5207  3ffc		       d1 df		      .word.w	(start_bank3 & $ffff)
   5208  3ffe		       d1 df		      .word.w	(start_bank3 & $ffff)
   5209  4000					      ORG	$4000
   5210  4000					      RORG	$F000
   5211  4000					      repeat	256
   5212  4000		       ff		      .byte.b	$ff
   5211  4000					      repend
   5212  4001		       ff		      .byte.b	$ff
   5211  4001					      repend
   5212  4002		       ff		      .byte.b	$ff
   5211  4002					      repend
   5212  4003		       ff		      .byte.b	$ff
   5211  4003					      repend
   5212  4004		       ff		      .byte.b	$ff
   5211  4004					      repend
   5212  4005		       ff		      .byte.b	$ff
   5211  4005					      repend
   5212  4006		       ff		      .byte.b	$ff
   5211  4006					      repend
   5212  4007		       ff		      .byte.b	$ff
   5211  4007					      repend
   5212  4008		       ff		      .byte.b	$ff
   5211  4008					      repend
   5212  4009		       ff		      .byte.b	$ff
   5211  4009					      repend
   5212  400a		       ff		      .byte.b	$ff
   5211  400a					      repend
   5212  400b		       ff		      .byte.b	$ff
   5211  400b					      repend
   5212  400c		       ff		      .byte.b	$ff
   5211  400c					      repend
   5212  400d		       ff		      .byte.b	$ff
   5211  400d					      repend
   5212  400e		       ff		      .byte.b	$ff
   5211  400e					      repend
   5212  400f		       ff		      .byte.b	$ff
   5211  400f					      repend
   5212  4010		       ff		      .byte.b	$ff
   5211  4010					      repend
   5212  4011		       ff		      .byte.b	$ff
   5211  4011					      repend
   5212  4012		       ff		      .byte.b	$ff
   5211  4012					      repend
   5212  4013		       ff		      .byte.b	$ff
   5211  4013					      repend
   5212  4014		       ff		      .byte.b	$ff
   5211  4014					      repend
   5212  4015		       ff		      .byte.b	$ff
   5211  4015					      repend
   5212  4016		       ff		      .byte.b	$ff
   5211  4016					      repend
   5212  4017		       ff		      .byte.b	$ff
   5211  4017					      repend
   5212  4018		       ff		      .byte.b	$ff
   5211  4018					      repend
   5212  4019		       ff		      .byte.b	$ff
   5211  4019					      repend
   5212  401a		       ff		      .byte.b	$ff
   5211  401a					      repend
   5212  401b		       ff		      .byte.b	$ff
   5211  401b					      repend
   5212  401c		       ff		      .byte.b	$ff
   5211  401c					      repend
   5212  401d		       ff		      .byte.b	$ff
   5211  401d					      repend
   5212  401e		       ff		      .byte.b	$ff
   5211  401e					      repend
   5212  401f		       ff		      .byte.b	$ff
   5211  401f					      repend
   5212  4020		       ff		      .byte.b	$ff
   5211  4020					      repend
   5212  4021		       ff		      .byte.b	$ff
   5211  4021					      repend
   5212  4022		       ff		      .byte.b	$ff
   5211  4022					      repend
   5212  4023		       ff		      .byte.b	$ff
   5211  4023					      repend
   5212  4024		       ff		      .byte.b	$ff
   5211  4024					      repend
   5212  4025		       ff		      .byte.b	$ff
   5211  4025					      repend
   5212  4026		       ff		      .byte.b	$ff
   5211  4026					      repend
   5212  4027		       ff		      .byte.b	$ff
   5211  4027					      repend
   5212  4028		       ff		      .byte.b	$ff
   5211  4028					      repend
   5212  4029		       ff		      .byte.b	$ff
   5211  4029					      repend
   5212  402a		       ff		      .byte.b	$ff
   5211  402a					      repend
   5212  402b		       ff		      .byte.b	$ff
   5211  402b					      repend
   5212  402c		       ff		      .byte.b	$ff
   5211  402c					      repend
   5212  402d		       ff		      .byte.b	$ff
   5211  402d					      repend
   5212  402e		       ff		      .byte.b	$ff
   5211  402e					      repend
   5212  402f		       ff		      .byte.b	$ff
   5211  402f					      repend
   5212  4030		       ff		      .byte.b	$ff
   5211  4030					      repend
   5212  4031		       ff		      .byte.b	$ff
   5211  4031					      repend
   5212  4032		       ff		      .byte.b	$ff
   5211  4032					      repend
   5212  4033		       ff		      .byte.b	$ff
   5211  4033					      repend
   5212  4034		       ff		      .byte.b	$ff
   5211  4034					      repend
   5212  4035		       ff		      .byte.b	$ff
   5211  4035					      repend
   5212  4036		       ff		      .byte.b	$ff
   5211  4036					      repend
   5212  4037		       ff		      .byte.b	$ff
   5211  4037					      repend
   5212  4038		       ff		      .byte.b	$ff
   5211  4038					      repend
   5212  4039		       ff		      .byte.b	$ff
   5211  4039					      repend
   5212  403a		       ff		      .byte.b	$ff
   5211  403a					      repend
   5212  403b		       ff		      .byte.b	$ff
   5211  403b					      repend
   5212  403c		       ff		      .byte.b	$ff
   5211  403c					      repend
   5212  403d		       ff		      .byte.b	$ff
   5211  403d					      repend
   5212  403e		       ff		      .byte.b	$ff
   5211  403e					      repend
   5212  403f		       ff		      .byte.b	$ff
   5211  403f					      repend
   5212  4040		       ff		      .byte.b	$ff
   5211  4040					      repend
   5212  4041		       ff		      .byte.b	$ff
   5211  4041					      repend
   5212  4042		       ff		      .byte.b	$ff
   5211  4042					      repend
   5212  4043		       ff		      .byte.b	$ff
   5211  4043					      repend
   5212  4044		       ff		      .byte.b	$ff
   5211  4044					      repend
   5212  4045		       ff		      .byte.b	$ff
   5211  4045					      repend
   5212  4046		       ff		      .byte.b	$ff
   5211  4046					      repend
   5212  4047		       ff		      .byte.b	$ff
   5211  4047					      repend
   5212  4048		       ff		      .byte.b	$ff
   5211  4048					      repend
   5212  4049		       ff		      .byte.b	$ff
   5211  4049					      repend
   5212  404a		       ff		      .byte.b	$ff
   5211  404a					      repend
   5212  404b		       ff		      .byte.b	$ff
   5211  404b					      repend
   5212  404c		       ff		      .byte.b	$ff
   5211  404c					      repend
   5212  404d		       ff		      .byte.b	$ff
   5211  404d					      repend
   5212  404e		       ff		      .byte.b	$ff
   5211  404e					      repend
   5212  404f		       ff		      .byte.b	$ff
   5211  404f					      repend
   5212  4050		       ff		      .byte.b	$ff
   5211  4050					      repend
   5212  4051		       ff		      .byte.b	$ff
   5211  4051					      repend
   5212  4052		       ff		      .byte.b	$ff
   5211  4052					      repend
   5212  4053		       ff		      .byte.b	$ff
   5211  4053					      repend
   5212  4054		       ff		      .byte.b	$ff
   5211  4054					      repend
   5212  4055		       ff		      .byte.b	$ff
   5211  4055					      repend
   5212  4056		       ff		      .byte.b	$ff
   5211  4056					      repend
   5212  4057		       ff		      .byte.b	$ff
   5211  4057					      repend
   5212  4058		       ff		      .byte.b	$ff
   5211  4058					      repend
   5212  4059		       ff		      .byte.b	$ff
   5211  4059					      repend
   5212  405a		       ff		      .byte.b	$ff
   5211  405a					      repend
   5212  405b		       ff		      .byte.b	$ff
   5211  405b					      repend
   5212  405c		       ff		      .byte.b	$ff
   5211  405c					      repend
   5212  405d		       ff		      .byte.b	$ff
   5211  405d					      repend
   5212  405e		       ff		      .byte.b	$ff
   5211  405e					      repend
   5212  405f		       ff		      .byte.b	$ff
   5211  405f					      repend
   5212  4060		       ff		      .byte.b	$ff
   5211  4060					      repend
   5212  4061		       ff		      .byte.b	$ff
   5211  4061					      repend
   5212  4062		       ff		      .byte.b	$ff
   5211  4062					      repend
   5212  4063		       ff		      .byte.b	$ff
   5211  4063					      repend
   5212  4064		       ff		      .byte.b	$ff
   5211  4064					      repend
   5212  4065		       ff		      .byte.b	$ff
   5211  4065					      repend
   5212  4066		       ff		      .byte.b	$ff
   5211  4066					      repend
   5212  4067		       ff		      .byte.b	$ff
   5211  4067					      repend
   5212  4068		       ff		      .byte.b	$ff
   5211  4068					      repend
   5212  4069		       ff		      .byte.b	$ff
   5211  4069					      repend
   5212  406a		       ff		      .byte.b	$ff
   5211  406a					      repend
   5212  406b		       ff		      .byte.b	$ff
   5211  406b					      repend
   5212  406c		       ff		      .byte.b	$ff
   5211  406c					      repend
   5212  406d		       ff		      .byte.b	$ff
   5211  406d					      repend
   5212  406e		       ff		      .byte.b	$ff
   5211  406e					      repend
   5212  406f		       ff		      .byte.b	$ff
   5211  406f					      repend
   5212  4070		       ff		      .byte.b	$ff
   5211  4070					      repend
   5212  4071		       ff		      .byte.b	$ff
   5211  4071					      repend
   5212  4072		       ff		      .byte.b	$ff
   5211  4072					      repend
   5212  4073		       ff		      .byte.b	$ff
   5211  4073					      repend
   5212  4074		       ff		      .byte.b	$ff
   5211  4074					      repend
   5212  4075		       ff		      .byte.b	$ff
   5211  4075					      repend
   5212  4076		       ff		      .byte.b	$ff
   5211  4076					      repend
   5212  4077		       ff		      .byte.b	$ff
   5211  4077					      repend
   5212  4078		       ff		      .byte.b	$ff
   5211  4078					      repend
   5212  4079		       ff		      .byte.b	$ff
   5211  4079					      repend
   5212  407a		       ff		      .byte.b	$ff
   5211  407a					      repend
   5212  407b		       ff		      .byte.b	$ff
   5211  407b					      repend
   5212  407c		       ff		      .byte.b	$ff
   5211  407c					      repend
   5212  407d		       ff		      .byte.b	$ff
   5211  407d					      repend
   5212  407e		       ff		      .byte.b	$ff
   5211  407e					      repend
   5212  407f		       ff		      .byte.b	$ff
   5211  407f					      repend
   5212  4080		       ff		      .byte.b	$ff
   5211  4080					      repend
   5212  4081		       ff		      .byte.b	$ff
   5211  4081					      repend
   5212  4082		       ff		      .byte.b	$ff
   5211  4082					      repend
   5212  4083		       ff		      .byte.b	$ff
   5211  4083					      repend
   5212  4084		       ff		      .byte.b	$ff
   5211  4084					      repend
   5212  4085		       ff		      .byte.b	$ff
   5211  4085					      repend
   5212  4086		       ff		      .byte.b	$ff
   5211  4086					      repend
   5212  4087		       ff		      .byte.b	$ff
   5211  4087					      repend
   5212  4088		       ff		      .byte.b	$ff
   5211  4088					      repend
   5212  4089		       ff		      .byte.b	$ff
   5211  4089					      repend
   5212  408a		       ff		      .byte.b	$ff
   5211  408a					      repend
   5212  408b		       ff		      .byte.b	$ff
   5211  408b					      repend
   5212  408c		       ff		      .byte.b	$ff
   5211  408c					      repend
   5212  408d		       ff		      .byte.b	$ff
   5211  408d					      repend
   5212  408e		       ff		      .byte.b	$ff
   5211  408e					      repend
   5212  408f		       ff		      .byte.b	$ff
   5211  408f					      repend
   5212  4090		       ff		      .byte.b	$ff
   5211  4090					      repend
   5212  4091		       ff		      .byte.b	$ff
   5211  4091					      repend
   5212  4092		       ff		      .byte.b	$ff
   5211  4092					      repend
   5212  4093		       ff		      .byte.b	$ff
   5211  4093					      repend
   5212  4094		       ff		      .byte.b	$ff
   5211  4094					      repend
   5212  4095		       ff		      .byte.b	$ff
   5211  4095					      repend
   5212  4096		       ff		      .byte.b	$ff
   5211  4096					      repend
   5212  4097		       ff		      .byte.b	$ff
   5211  4097					      repend
   5212  4098		       ff		      .byte.b	$ff
   5211  4098					      repend
   5212  4099		       ff		      .byte.b	$ff
   5211  4099					      repend
   5212  409a		       ff		      .byte.b	$ff
   5211  409a					      repend
   5212  409b		       ff		      .byte.b	$ff
   5211  409b					      repend
   5212  409c		       ff		      .byte.b	$ff
   5211  409c					      repend
   5212  409d		       ff		      .byte.b	$ff
   5211  409d					      repend
   5212  409e		       ff		      .byte.b	$ff
   5211  409e					      repend
   5212  409f		       ff		      .byte.b	$ff
   5211  409f					      repend
   5212  40a0		       ff		      .byte.b	$ff
   5211  40a0					      repend
   5212  40a1		       ff		      .byte.b	$ff
   5211  40a1					      repend
   5212  40a2		       ff		      .byte.b	$ff
   5211  40a2					      repend
   5212  40a3		       ff		      .byte.b	$ff
   5211  40a3					      repend
   5212  40a4		       ff		      .byte.b	$ff
   5211  40a4					      repend
   5212  40a5		       ff		      .byte.b	$ff
   5211  40a5					      repend
   5212  40a6		       ff		      .byte.b	$ff
   5211  40a6					      repend
   5212  40a7		       ff		      .byte.b	$ff
   5211  40a7					      repend
   5212  40a8		       ff		      .byte.b	$ff
   5211  40a8					      repend
   5212  40a9		       ff		      .byte.b	$ff
   5211  40a9					      repend
   5212  40aa		       ff		      .byte.b	$ff
   5211  40aa					      repend
   5212  40ab		       ff		      .byte.b	$ff
   5211  40ab					      repend
   5212  40ac		       ff		      .byte.b	$ff
   5211  40ac					      repend
   5212  40ad		       ff		      .byte.b	$ff
   5211  40ad					      repend
   5212  40ae		       ff		      .byte.b	$ff
   5211  40ae					      repend
   5212  40af		       ff		      .byte.b	$ff
   5211  40af					      repend
   5212  40b0		       ff		      .byte.b	$ff
   5211  40b0					      repend
   5212  40b1		       ff		      .byte.b	$ff
   5211  40b1					      repend
   5212  40b2		       ff		      .byte.b	$ff
   5211  40b2					      repend
   5212  40b3		       ff		      .byte.b	$ff
   5211  40b3					      repend
   5212  40b4		       ff		      .byte.b	$ff
   5211  40b4					      repend
   5212  40b5		       ff		      .byte.b	$ff
   5211  40b5					      repend
   5212  40b6		       ff		      .byte.b	$ff
   5211  40b6					      repend
   5212  40b7		       ff		      .byte.b	$ff
   5211  40b7					      repend
   5212  40b8		       ff		      .byte.b	$ff
   5211  40b8					      repend
   5212  40b9		       ff		      .byte.b	$ff
   5211  40b9					      repend
   5212  40ba		       ff		      .byte.b	$ff
   5211  40ba					      repend
   5212  40bb		       ff		      .byte.b	$ff
   5211  40bb					      repend
   5212  40bc		       ff		      .byte.b	$ff
   5211  40bc					      repend
   5212  40bd		       ff		      .byte.b	$ff
   5211  40bd					      repend
   5212  40be		       ff		      .byte.b	$ff
   5211  40be					      repend
   5212  40bf		       ff		      .byte.b	$ff
   5211  40bf					      repend
   5212  40c0		       ff		      .byte.b	$ff
   5211  40c0					      repend
   5212  40c1		       ff		      .byte.b	$ff
   5211  40c1					      repend
   5212  40c2		       ff		      .byte.b	$ff
   5211  40c2					      repend
   5212  40c3		       ff		      .byte.b	$ff
   5211  40c3					      repend
   5212  40c4		       ff		      .byte.b	$ff
   5211  40c4					      repend
   5212  40c5		       ff		      .byte.b	$ff
   5211  40c5					      repend
   5212  40c6		       ff		      .byte.b	$ff
   5211  40c6					      repend
   5212  40c7		       ff		      .byte.b	$ff
   5211  40c7					      repend
   5212  40c8		       ff		      .byte.b	$ff
   5211  40c8					      repend
   5212  40c9		       ff		      .byte.b	$ff
   5211  40c9					      repend
   5212  40ca		       ff		      .byte.b	$ff
   5211  40ca					      repend
   5212  40cb		       ff		      .byte.b	$ff
   5211  40cb					      repend
   5212  40cc		       ff		      .byte.b	$ff
   5211  40cc					      repend
   5212  40cd		       ff		      .byte.b	$ff
   5211  40cd					      repend
   5212  40ce		       ff		      .byte.b	$ff
   5211  40ce					      repend
   5212  40cf		       ff		      .byte.b	$ff
   5211  40cf					      repend
   5212  40d0		       ff		      .byte.b	$ff
   5211  40d0					      repend
   5212  40d1		       ff		      .byte.b	$ff
   5211  40d1					      repend
   5212  40d2		       ff		      .byte.b	$ff
   5211  40d2					      repend
   5212  40d3		       ff		      .byte.b	$ff
   5211  40d3					      repend
   5212  40d4		       ff		      .byte.b	$ff
   5211  40d4					      repend
   5212  40d5		       ff		      .byte.b	$ff
   5211  40d5					      repend
   5212  40d6		       ff		      .byte.b	$ff
   5211  40d6					      repend
   5212  40d7		       ff		      .byte.b	$ff
   5211  40d7					      repend
   5212  40d8		       ff		      .byte.b	$ff
   5211  40d8					      repend
   5212  40d9		       ff		      .byte.b	$ff
   5211  40d9					      repend
   5212  40da		       ff		      .byte.b	$ff
   5211  40da					      repend
   5212  40db		       ff		      .byte.b	$ff
   5211  40db					      repend
   5212  40dc		       ff		      .byte.b	$ff
   5211  40dc					      repend
   5212  40dd		       ff		      .byte.b	$ff
   5211  40dd					      repend
   5212  40de		       ff		      .byte.b	$ff
   5211  40de					      repend
   5212  40df		       ff		      .byte.b	$ff
   5211  40df					      repend
   5212  40e0		       ff		      .byte.b	$ff
   5211  40e0					      repend
   5212  40e1		       ff		      .byte.b	$ff
   5211  40e1					      repend
   5212  40e2		       ff		      .byte.b	$ff
   5211  40e2					      repend
   5212  40e3		       ff		      .byte.b	$ff
   5211  40e3					      repend
   5212  40e4		       ff		      .byte.b	$ff
   5211  40e4					      repend
   5212  40e5		       ff		      .byte.b	$ff
   5211  40e5					      repend
   5212  40e6		       ff		      .byte.b	$ff
   5211  40e6					      repend
   5212  40e7		       ff		      .byte.b	$ff
   5211  40e7					      repend
   5212  40e8		       ff		      .byte.b	$ff
   5211  40e8					      repend
   5212  40e9		       ff		      .byte.b	$ff
   5211  40e9					      repend
   5212  40ea		       ff		      .byte.b	$ff
   5211  40ea					      repend
   5212  40eb		       ff		      .byte.b	$ff
   5211  40eb					      repend
   5212  40ec		       ff		      .byte.b	$ff
   5211  40ec					      repend
   5212  40ed		       ff		      .byte.b	$ff
   5211  40ed					      repend
   5212  40ee		       ff		      .byte.b	$ff
   5211  40ee					      repend
   5212  40ef		       ff		      .byte.b	$ff
   5211  40ef					      repend
   5212  40f0		       ff		      .byte.b	$ff
   5211  40f0					      repend
   5212  40f1		       ff		      .byte.b	$ff
   5211  40f1					      repend
   5212  40f2		       ff		      .byte.b	$ff
   5211  40f2					      repend
   5212  40f3		       ff		      .byte.b	$ff
   5211  40f3					      repend
   5212  40f4		       ff		      .byte.b	$ff
   5211  40f4					      repend
   5212  40f5		       ff		      .byte.b	$ff
   5211  40f5					      repend
   5212  40f6		       ff		      .byte.b	$ff
   5211  40f6					      repend
   5212  40f7		       ff		      .byte.b	$ff
   5211  40f7					      repend
   5212  40f8		       ff		      .byte.b	$ff
   5211  40f8					      repend
   5212  40f9		       ff		      .byte.b	$ff
   5211  40f9					      repend
   5212  40fa		       ff		      .byte.b	$ff
   5211  40fa					      repend
   5212  40fb		       ff		      .byte.b	$ff
   5211  40fb					      repend
   5212  40fc		       ff		      .byte.b	$ff
   5211  40fc					      repend
   5212  40fd		       ff		      .byte.b	$ff
   5211  40fd					      repend
   5212  40fe		       ff		      .byte.b	$ff
   5211  40fe					      repend
   5212  40ff		       ff		      .byte.b	$ff
   5213  4100					      repend
   5214  4100							; Provided under the CC0 license. See the included LICENSE.txt for details.
   5215  4100
   5216  4100							; This is a 2-line kernel!
   5217  4100					      ifnconst	vertical_reflect
   5218  4100				   kernel
   5219  4100					      endif
   5220  4100		       85 02		      sta	WSYNC
   5221  4102		       a9 ff		      lda	#255
   5222  4104		       8d 96 02 	      sta	TIM64T
   5223  4107
   5224  4107		       a9 01		      lda	#1
   5225  4109		       85 27		      sta	VDELBL
   5226  410b		       85 25		      sta	VDELP0
   5227  410d		       a6 92		      ldx	ballheight
   5228  410f		       e8		      inx
   5229  4110		       e8		      inx
   5230  4111		       86 9f		      stx	temp4
   5231  4113		       a5 86		      lda	player1y
   5232  4115		       85 9e		      sta	temp3
   5233  4117
   5234  4117				  -	      ifconst	shakescreen
   5235  4117				  -	      jsr	doshakescreen
   5236  4117					      else
   5237  4117		       a6 90		      ldx	missile0height
   5238  4119		       e8		      inx
   5239  411a					      endif
   5240  411a
   5241  411a		       e8		      inx
   5242  411b		       86 f6		      stx	stack1
   5243  411d
   5244  411d		       a5 89		      lda	bally
   5245  411f		       85 f7		      sta	stack2
   5246  4121
   5247  4121		       a5 85		      lda	player0y
   5248  4123		       a2 00		      ldx	#0
   5249  4125		       85 02		      sta	WSYNC
   5250  4127		       86 1b		      stx	GRP0
   5251  4129		       86 1c		      stx	GRP1
   5252  412b		       86 0e		      stx	PF1L
   5253  412d		       86 0f		      stx	PF2
   5254  412f		       86 2c		      stx	CXCLR
   5255  4131				  -	      ifconst	readpaddle
   5256  4131				  -	      stx	paddle
   5257  4131					      else
      0  4131					      sleep	3
      1  4131				   .CYCLES    SET	3
      2  4131
      3  4131				  -	      IF	.CYCLES < 2
      4  4131				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  4131				  -	      ERR
      6  4131					      ENDIF
      7  4131
      8  4131					      IF	.CYCLES & 1
      9  4131					      IFNCONST	NO_ILLEGAL_OPCODES
     10  4131		       04 00		      nop	0
     11  4133				  -	      ELSE
     12  4133				  -	      bit	VSYNC
     13  4133					      ENDIF
     14  4133				   .CYCLES    SET	.CYCLES - 3
     15  4133					      ENDIF
     16  4133
     17  4133				  -	      REPEAT	.CYCLES / 2
     18  4133				  -	      nop
     19  4133					      REPEND
   5259  4133					      endif
   5260  4133
   5261  4133		       95 9d		      sta	temp2,x
   5262  4135
   5263  4135							;store these so they can be retrieved later
   5264  4135				  -	      ifnconst	pfres
   5265  4135				  -	      ldx	#128-44+(4-pfwidth)*12
   5266  4135					      else
   5267  4135		       a2 74		      ldx	#132-pfres*pfwidth
   5268  4137					      endif
   5269  4137
   5270  4137		       c6 85		      dec	player0y
   5271  4139
   5272  4139		       a5 91		      lda	missile0y
   5273  413b		       85 a0		      sta	temp5
   5274  413d		       a5 88		      lda	missile1y
   5275  413f		       85 a1		      sta	temp6
   5276  4141
   5277  4141		       a5 ef		      lda	playfieldpos
   5278  4143		       85 9c		      sta	temp1
   5279  4145
   5280  4145				  -	      ifconst	pfrowheight
   5281  4145				  -	      lda	#pfrowheight+2
   5282  4145					      else
   5283  4145				  -	      ifnconst	pfres
   5284  4145				  -	      lda	#10
   5285  4145					      else
   5286  4145		       a9 1a		      lda	#(96/pfres)+2	; try to come close to the real size
   5287  4147					      endif
   5288  4147					      endif
   5289  4147		       18		      clc
   5290  4148		       e5 ef		      sbc	playfieldpos
   5291  414a		       85 ef		      sta	playfieldpos
   5292  414c		       4c 78 f1 	      jmp	.startkernel
   5293  414f
   5294  414f				   .skipDrawP0
   5295  414f		       a9 00		      lda	#0
   5296  4151		       a8		      tay
   5297  4152		       4c aa f1 	      jmp	.continueP0
   5298  4155
   5299  4155				   .skipDrawP1
   5300  4155		       a9 00		      lda	#0
   5301  4157		       a8		      tay
   5302  4158		       4c 82 f1 	      jmp	.continueP1
   5303  415b
   5304  415b				   .kerloop		; enter at cycle 59??
   5305  415b
   5306  415b				   continuekernel
      0  415b					      sleep	2
      1  415b				   .CYCLES    SET	2
      2  415b
      3  415b				  -	      IF	.CYCLES < 2
      4  415b				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  415b				  -	      ERR
      6  415b					      ENDIF
      7  415b
      8  415b				  -	      IF	.CYCLES & 1
      9  415b				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  415b				  -	      nop	0
     11  415b				  -	      ELSE
     12  415b				  -	      bit	VSYNC
     13  415b				  -	      ENDIF
     14  415b				  -.CYCLES    SET	.CYCLES - 3
     15  415b					      ENDIF
     16  415b
     17  415b					      REPEAT	.CYCLES / 2
     18  415b		       ea		      nop
     19  415c					      REPEND
   5308  415c				   continuekernel2
   5309  415c		       a5 92		      lda	ballheight
   5310  415e
   5311  415e					      ifconst	pfres
   5312  415e		       bc 7c 10 	      ldy	playfield+pfres*pfwidth-132,x
   5313  4161		       84 0e		      sty	PF1L	;3
   5314  4163		       bc 7d 10 	      ldy	playfield+pfres*pfwidth-131-pfadjust,x
   5315  4166		       84 0f		      sty	PF2L	;3
   5316  4168		       bc 7f 10 	      ldy	playfield+pfres*pfwidth-129,x
   5317  416b		       84 0e		      sty	PF1R	; 3 too early?
   5318  416d		       bc 7e 10 	      ldy	playfield+pfres*pfwidth-130-pfadjust,x
   5319  4170		       84 0f		      sty	PF2R	;3
   5320  4172				  -	      else
   5321  4172				  -	      ldy	playfield-48+pfwidth*12+44-128,x
   5322  4172				  -	      sty	PF1L	;3
   5323  4172				  -	      ldy	playfield-48+pfwidth*12+45-128-pfadjust,x	;4
   5324  4172				  -	      sty	PF2L	;3
   5325  4172				  -	      ldy	playfield-48+pfwidth*12+47-128,x	;4
   5326  4172				  -	      sty	PF1R	; 3 too early?
   5327  4172				  -	      ldy	playfield-48+pfwidth*12+46-128-pfadjust,x	;4
   5328  4172				  -	      sty	PF2R	;3
   5329  4172					      endif
   5330  4172
   5331  4172							; should be playfield+$38 for width=2
   5332  4172
   5333  4172		       c7 89		      dcp	bally
   5334  4174		       2a		      rol
   5335  4175		       2a		      rol
   5336  4176							; rol
   5337  4176							; rol
   5338  4176				   goback
   5339  4176		       85 1f		      sta	ENABL
   5340  4178				   .startkernel
   5341  4178		       a5 8f		      lda	player1height	;3
   5342  417a		       c7 86		      dcp	player1y	;5
   5343  417c		       90 d7		      bcc	.skipDrawP1	;2
   5344  417e		       a4 86		      ldy	player1y	;3
   5345  4180		       b1 8c		      lda	(player1pointer),y	;5; player0pointer must be selected carefully by the compiler
   5346  4182							; so it doesn't cross a page boundary!
   5347  4182
   5348  4182				   .continueP1
   5349  4182		       85 1c		      sta	GRP1	;3
   5350  4184
   5351  4184				  -	      ifnconst	player1colors
   5352  4184				  -	      lda	missile1height	;3
   5353  4184				  -	      dcp	missile1y	;5
   5354  4184				  -	      rol		;2
   5355  4184				  -	      rol		;2
   5356  4184				  -	      sta	ENAM1	;3
   5357  4184					      else
   5358  4184		       b1 87		      lda	(player1color),y
   5359  4186		       85 07		      sta	COLUP1
   5360  4188					      ifnconst	playercolors
      0  4188					      sleep	7
      1  4188				   .CYCLES    SET	7
      2  4188
      3  4188				  -	      IF	.CYCLES < 2
      4  4188				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  4188				  -	      ERR
      6  4188					      ENDIF
      7  4188
      8  4188					      IF	.CYCLES & 1
      9  4188					      IFNCONST	NO_ILLEGAL_OPCODES
     10  4188		       04 00		      nop	0
     11  418a				  -	      ELSE
     12  418a				  -	      bit	VSYNC
     13  418a					      ENDIF
     14  418a				   .CYCLES    SET	.CYCLES - 3
     15  418a					      ENDIF
     16  418a
     17  418a					      REPEAT	.CYCLES / 2
     18  418a		       ea		      nop
     17  418a					      REPEND
     18  418b		       ea		      nop
     19  418c					      REPEND
   5362  418c				  -	      else
   5363  418c				  -	      lda.w	player0colorstore
   5364  418c				  -	      sta	COLUP0
   5365  418c					      endif
   5366  418c					      endif
   5367  418c
   5368  418c					      ifconst	pfres
   5369  418c		       bd 7c 10 	      lda	playfield+pfres*pfwidth-132,x
   5370  418f		       85 0e		      sta	PF1L	;3
   5371  4191		       bd 7d 10 	      lda	playfield+pfres*pfwidth-131-pfadjust,x
   5372  4194		       85 0f		      sta	PF2L	;3
   5373  4196		       bd 7f 10 	      lda	playfield+pfres*pfwidth-129,x
   5374  4199		       85 0e		      sta	PF1R	; 3 too early?
   5375  419b		       bd 7e 10 	      lda	playfield+pfres*pfwidth-130-pfadjust,x
   5376  419e		       85 0f		      sta	PF2R	;3
   5377  41a0				  -	      else
   5378  41a0				  -	      lda	playfield-48+pfwidth*12+44-128,x	;4
   5379  41a0				  -	      sta	PF1L	;3
   5380  41a0				  -	      lda	playfield-48+pfwidth*12+45-128-pfadjust,x	;4
   5381  41a0				  -	      sta	PF2L	;3
   5382  41a0				  -	      lda	playfield-48+pfwidth*12+47-128,x	;4
   5383  41a0				  -	      sta	PF1R	; 3 too early?
   5384  41a0				  -	      lda	playfield-48+pfwidth*12+46-128-pfadjust,x	;4
   5385  41a0				  -	      sta	PF2R	;3
   5386  41a0					      endif
   5387  41a0							; sleep 3
   5388  41a0
   5389  41a0		       a5 8e		      lda	player0height
   5390  41a2		       c7 85		      dcp	player0y
   5391  41a4		       90 a9		      bcc	.skipDrawP0
   5392  41a6		       a4 85		      ldy	player0y
   5393  41a8		       b1 8a		      lda	(player0pointer),y
   5394  41aa				   .continueP0
   5395  41aa		       85 1b		      sta	GRP0
   5396  41ac
   5397  41ac					      ifnconst	no_blank_lines
   5398  41ac					      ifnconst	playercolors
   5399  41ac		       a5 90		      lda	missile0height	;3
   5400  41ae		       c7 91		      dcp	missile0y	;5
   5401  41b0		       e5 f6		      sbc	stack1
   5402  41b2		       85 1d		      sta	ENAM0	;3
   5403  41b4				  -	      else
   5404  41b4				  -	      lda	(player0color),y
   5405  41b4				  -	      sta	player0colorstore
   5406  41b4				  -	      sleep	6
   5407  41b4					      endif
   5408  41b4		       c6 9c		      dec	temp1
   5409  41b6		       d0 a3		      bne	continuekernel
   5410  41b8				  -	      else
   5411  41b8				  -	      dec	temp1
   5412  41b8				  -	      beq	altkernel2
   5413  41b8				  -	      ifconst	readpaddle
   5414  41b8				  -	      ldy	currentpaddle
   5415  41b8				  -	      lda	INPT0,y
   5416  41b8				  -	      bpl	noreadpaddle
   5417  41b8				  -	      inc	paddle
   5418  41b8				  -	      jmp	continuekernel2
   5419  41b8				  -noreadpaddle
   5420  41b8				  -	      sleep	2
   5421  41b8				  -	      jmp	continuekernel
   5422  41b8				  -	      else
   5423  41b8				  -	      ifnconst	playercolors
   5424  41b8				  -	      ifconst	PFcolors
   5425  41b8				  -	      txa
   5426  41b8				  -	      tay
   5427  41b8				  -	      lda	(pfcolortable),y
   5428  41b8				  -	      ifnconst	backgroundchange
   5429  41b8				  -	      sta	COLUPF
   5430  41b8				  -	      else
   5431  41b8				  -	      sta	COLUBK
   5432  41b8				  -	      endif
   5433  41b8				  -	      jmp	continuekernel
   5434  41b8				  -	      else
   5435  41b8				  -	      ifconst	kernelmacrodef
   5436  41b8				  -	      kernelmacro
   5437  41b8				  -	      else
   5438  41b8				  -	      sleep	12
   5439  41b8				  -	      endif
   5440  41b8				  -	      endif
   5441  41b8				  -	      else
   5442  41b8				  -	      lda	(player0color),y
   5443  41b8				  -	      sta	player0colorstore
   5444  41b8				  -	      sleep	4
   5445  41b8				  -	      endif
   5446  41b8				  -	      jmp	continuekernel
   5447  41b8				  -	      endif
   5448  41b8				  -altkernel2
   5449  41b8				  -	      txa
   5450  41b8				  -	      ifnconst	vertical_reflect
   5451  41b8				  -	      sbx	#256-pfwidth
   5452  41b8				  -	      else
   5453  41b8				  -	      sbx	#256-pfwidth/2
   5454  41b8				  -	      endif
   5455  41b8				  -	      bmi	lastkernelline
   5456  41b8				  -	      ifconst	pfrowheight
   5457  41b8				  -	      lda	#pfrowheight
   5458  41b8				  -	      else
   5459  41b8				  -	      ifnconst	pfres
   5460  41b8				  -	      lda	#8
   5461  41b8				  -	      else
   5462  41b8				  -	      lda	#(96/pfres)	; try to come close to the real size
   5463  41b8				  -	      endif
   5464  41b8				  -	      endif
   5465  41b8				  -	      sta	temp1
   5466  41b8				  -	      jmp	continuekernel
   5467  41b8					      endif
   5468  41b8
   5469  41b8				   altkernel
   5470  41b8
   5471  41b8				  -	      ifconst	PFmaskvalue
   5472  41b8				  -	      lda	#PFmaskvalue
   5473  41b8					      else
   5474  41b8		       a9 00		      lda	#0
   5475  41ba					      endif
   5476  41ba		       85 0e		      sta	PF1L
   5477  41bc		       85 0f		      sta	PF2
   5478  41be
   5479  41be
   5480  41be							;sleep 3
   5481  41be
   5482  41be							;28 cycles to fix things
   5483  41be							;minus 11=17
   5484  41be
   5485  41be							; lax temp4
   5486  41be							; clc
   5487  41be		       8a		      txa
   5488  41bf					      ifnconst	vertical_reflect
   5489  41bf		       cb fc		      sbx	#256-pfwidth
   5490  41c1				  -	      else
   5491  41c1				  -	      sbx	#256-pfwidth/2
   5492  41c1					      endif
   5493  41c1
   5494  41c1		       30 12		      bmi	lastkernelline
   5495  41c3
   5496  41c3				  -	      ifconst	PFcolorandheight
   5497  41c3				  -	      ifconst	pfres
   5498  41c3				  -	      ldy	playfieldcolorandheight-131+pfres*pfwidth,x
   5499  41c3				  -	      else
   5500  41c3				  -	      ldy	playfieldcolorandheight-87,x
   5501  41c3				  -	      endif
   5502  41c3				  -	      ifnconst	backgroundchange
   5503  41c3				  -	      sty	COLUPF
   5504  41c3				  -	      else
   5505  41c3				  -	      sty	COLUBK
   5506  41c3				  -	      endif
   5507  41c3				  -	      ifconst	pfres
   5508  41c3				  -	      lda	playfieldcolorandheight-132+pfres*pfwidth,x
   5509  41c3				  -	      else
   5510  41c3				  -	      lda	playfieldcolorandheight-88,x
   5511  41c3				  -	      endif
   5512  41c3				  -	      sta.w	temp1
   5513  41c3					      endif
   5514  41c3				  -	      ifconst	PFheights
   5515  41c3				  -	      lsr
   5516  41c3				  -	      lsr
   5517  41c3				  -	      tay
   5518  41c3				  -	      lda	(pfheighttable),y
   5519  41c3				  -	      sta.w	temp1
   5520  41c3					      endif
   5521  41c3					      ifconst	PFcolors
   5522  41c3		       a8		      tay
   5523  41c4		       b1 f0		      lda	(pfcolortable),y
   5524  41c6					      ifnconst	backgroundchange
   5525  41c6		       85 08		      sta	COLUPF
   5526  41c8				  -	      else
   5527  41c8				  -	      sta	COLUBK
   5528  41c8					      endif
   5529  41c8				  -	      ifconst	pfrowheight
   5530  41c8				  -	      lda	#pfrowheight
   5531  41c8					      else
   5532  41c8				  -	      ifnconst	pfres
   5533  41c8				  -	      lda	#8
   5534  41c8					      else
   5535  41c8		       a9 18		      lda	#(96/pfres)	; try to come close to the real size
   5536  41ca					      endif
   5537  41ca					      endif
   5538  41ca		       85 9c		      sta	temp1
   5539  41cc					      endif
   5540  41cc					      ifnconst	PFcolorandheight
   5541  41cc				  -	      ifnconst	PFcolors
   5542  41cc				  -	      ifnconst	PFheights
   5543  41cc				  -	      ifnconst	no_blank_lines
   5544  41cc				  -			; read paddle 0
   5545  41cc				  -			; lo-res paddle read
   5546  41cc				  -			; bit INPT0
   5547  41cc				  -			; bmi paddleskipread
   5548  41cc				  -			; inc paddle0
   5549  41cc				  -			;donepaddleskip
   5550  41cc				  -	      sleep	10
   5551  41cc				  -	      ifconst	pfrowheight
   5552  41cc				  -	      lda	#pfrowheight
   5553  41cc				  -	      else
   5554  41cc				  -	      ifnconst	pfres
   5555  41cc				  -	      lda	#8
   5556  41cc				  -	      else
   5557  41cc				  -	      lda	#(96/pfres)	; try to come close to the real size
   5558  41cc				  -	      endif
   5559  41cc				  -	      endif
   5560  41cc				  -	      sta	temp1
   5561  41cc				  -	      endif
   5562  41cc				  -	      endif
   5563  41cc					      endif
   5564  41cc					      endif
   5565  41cc
   5566  41cc
   5567  41cc		       a5 92		      lda	ballheight
   5568  41ce		       c7 89		      dcp	bally
   5569  41d0		       e5 9f		      sbc	temp4
   5570  41d2
   5571  41d2
   5572  41d2		       4c 76 f1 	      jmp	goback
   5573  41d5
   5574  41d5
   5575  41d5					      ifnconst	no_blank_lines
   5576  41d5				   lastkernelline
   5577  41d5				  -	      ifnconst	PFcolors
   5578  41d5				  -	      sleep	10
   5579  41d5					      else
   5580  41d5		       a0 7c		      ldy	#124
   5581  41d7		       b1 f0		      lda	(pfcolortable),y
   5582  41d9		       85 08		      sta	COLUPF
   5583  41db					      endif
   5584  41db
   5585  41db				  -	      ifconst	PFheights
   5586  41db				  -	      ldx	#1
   5587  41db				  -			;sleep 4
   5588  41db				  -	      sleep	3	; this was over 1 cycle
   5589  41db					      else
   5590  41db		       a6 ef		      ldx	playfieldpos
   5591  41dd							;sleep 3
      0  41dd					      sleep	2	; this was over 1 cycle
      1  41dd				   .CYCLES    SET	2
      2  41dd
      3  41dd				  -	      IF	.CYCLES < 2
      4  41dd				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  41dd				  -	      ERR
      6  41dd					      ENDIF
      7  41dd
      8  41dd				  -	      IF	.CYCLES & 1
      9  41dd				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  41dd				  -	      nop	0
     11  41dd				  -	      ELSE
     12  41dd				  -	      bit	VSYNC
     13  41dd				  -	      ENDIF
     14  41dd				  -.CYCLES    SET	.CYCLES - 3
     15  41dd					      ENDIF
     16  41dd
     17  41dd					      REPEAT	.CYCLES / 2
     18  41dd		       ea		      nop
     19  41de					      REPEND
   5593  41de					      endif
   5594  41de
   5595  41de		       4c 1b f2 	      jmp	enterlastkernel
   5596  41e1
   5597  41e1				  -	      else
   5598  41e1				  -lastkernelline
   5599  41e1				  -
   5600  41e1				  -	      ifconst	PFheights
   5601  41e1				  -	      ldx	#1
   5602  41e1				  -			;sleep 5
   5603  41e1				  -	      sleep	4	; this was over 1 cycle
   5604  41e1				  -	      else
   5605  41e1				  -	      ldx	playfieldpos
   5606  41e1				  -			;sleep 4
   5607  41e1				  -	      sleep	3	; this was over 1 cycle
   5608  41e1				  -	      endif
   5609  41e1				  -
   5610  41e1				  -	      cpx	#0
   5611  41e1				  -	      bne	.enterfromNBL
   5612  41e1				  -	      jmp	no_blank_lines_bailout
   5613  41e1					      endif
   5614  41e1
   5615  41e1					      if	((<*)>$d5)
   5616  4200		       00 00 00 00*	      align	256
   5617  4200					      endif
   5618  4200							; this is a kludge to prevent page wrapping - fix!!!
   5619  4200
   5620  4200				   .skipDrawlastP1
   5621  4200		       a9 00		      lda	#0
   5622  4202		       a8		      tay		; added so we don't cross a page
   5623  4203		       4c 2d f2 	      jmp	.continuelastP1
   5624  4206
   5625  4206				   .endkerloop		; enter at cycle 59??
   5626  4206
   5627  4206		       ea		      nop
   5628  4207
   5629  4207				   .enterfromNBL
   5630  4207					      ifconst	pfres
   5631  4207		       ac fc 10 	      ldy.w	playfield+pfres*pfwidth-4
   5632  420a		       84 0e		      sty	PF1L	;3
   5633  420c		       ac fd 10 	      ldy.w	playfield+pfres*pfwidth-3-pfadjust
   5634  420f		       84 0f		      sty	PF2L	;3
   5635  4211		       ac ff 10 	      ldy.w	playfield+pfres*pfwidth-1
   5636  4214		       84 0e		      sty	PF1R	; possibly too early?
   5637  4216		       ac fe 10 	      ldy.w	playfield+pfres*pfwidth-2-pfadjust
   5638  4219		       84 0f		      sty	PF2R	;3
   5639  421b				  -	      else
   5640  421b				  -	      ldy.w	playfield-48+pfwidth*12+44
   5641  421b				  -	      sty	PF1L	;3
   5642  421b				  -	      ldy.w	playfield-48+pfwidth*12+45-pfadjust
   5643  421b				  -	      sty	PF2L	;3
   5644  421b				  -	      ldy.w	playfield-48+pfwidth*12+47
   5645  421b				  -	      sty	PF1R	; possibly too early?
   5646  421b				  -	      ldy.w	playfield-48+pfwidth*12+46-pfadjust
   5647  421b				  -	      sty	PF2R	;3
   5648  421b					      endif
   5649  421b
   5650  421b				   enterlastkernel
   5651  421b		       a5 92		      lda	ballheight
   5652  421d
   5653  421d							; tya
   5654  421d		       c7 89		      dcp	bally
   5655  421f							; sleep 4
   5656  421f
   5657  421f							; sbc stack3
   5658  421f		       2a		      rol
   5659  4220		       2a		      rol
   5660  4221		       85 1f		      sta	ENABL
   5661  4223
   5662  4223		       a5 8f		      lda	player1height	;3
   5663  4225		       c7 86		      dcp	player1y	;5
   5664  4227		       90 d7		      bcc	.skipDrawlastP1
   5665  4229		       a4 86		      ldy	player1y	;3
   5666  422b		       b1 8c		      lda	(player1pointer),y	;5; player0pointer must be selected carefully by the compiler
   5667  422d							; so it doesn't cross a page boundary!
   5668  422d
   5669  422d				   .continuelastP1
   5670  422d		       85 1c		      sta	GRP1	;3
   5671  422f
   5672  422f				  -	      ifnconst	player1colors
   5673  422f				  -	      lda	missile1height	;3
   5674  422f				  -	      dcp	missile1y	;5
   5675  422f					      else
   5676  422f		       b1 87		      lda	(player1color),y
   5677  4231		       85 07		      sta	COLUP1
   5678  4233					      endif
   5679  4233
   5680  4233		       ca		      dex
   5681  4234							;dec temp4 ; might try putting this above PF writes
   5682  4234		       f0 36		      beq	endkernel
   5683  4236
   5684  4236
   5685  4236					      ifconst	pfres
   5686  4236		       ac fc 10 	      ldy.w	playfield+pfres*pfwidth-4
   5687  4239		       84 0e		      sty	PF1L	;3
   5688  423b		       ac fd 10 	      ldy.w	playfield+pfres*pfwidth-3-pfadjust
   5689  423e		       84 0f		      sty	PF2L	;3
   5690  4240		       ac ff 10 	      ldy.w	playfield+pfres*pfwidth-1
   5691  4243		       84 0e		      sty	PF1R	; possibly too early?
   5692  4245		       ac fe 10 	      ldy.w	playfield+pfres*pfwidth-2-pfadjust
   5693  4248		       84 0f		      sty	PF2R	;3
   5694  424a				  -	      else
   5695  424a				  -	      ldy.w	playfield-48+pfwidth*12+44
   5696  424a				  -	      sty	PF1L	;3
   5697  424a				  -	      ldy.w	playfield-48+pfwidth*12+45-pfadjust
   5698  424a				  -	      sty	PF2L	;3
   5699  424a				  -	      ldy.w	playfield-48+pfwidth*12+47
   5700  424a				  -	      sty	PF1R	; possibly too early?
   5701  424a				  -	      ldy.w	playfield-48+pfwidth*12+46-pfadjust
   5702  424a				  -	      sty	PF2R	;3
   5703  424a					      endif
   5704  424a
   5705  424a				  -	      ifnconst	player1colors
   5706  424a				  -	      rol		;2
   5707  424a				  -	      rol		;2
   5708  424a				  -	      sta	ENAM1	;3
   5709  424a					      else
   5710  424a					      ifnconst	playercolors
      0  424a					      sleep	7
      1  424a				   .CYCLES    SET	7
      2  424a
      3  424a				  -	      IF	.CYCLES < 2
      4  424a				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  424a				  -	      ERR
      6  424a					      ENDIF
      7  424a
      8  424a					      IF	.CYCLES & 1
      9  424a					      IFNCONST	NO_ILLEGAL_OPCODES
     10  424a		       04 00		      nop	0
     11  424c				  -	      ELSE
     12  424c				  -	      bit	VSYNC
     13  424c					      ENDIF
     14  424c				   .CYCLES    SET	.CYCLES - 3
     15  424c					      ENDIF
     16  424c
     17  424c					      REPEAT	.CYCLES / 2
     18  424c		       ea		      nop
     17  424c					      REPEND
     18  424d		       ea		      nop
     19  424e					      REPEND
   5712  424e				  -	      else
   5713  424e				  -	      lda.w	player0colorstore
   5714  424e				  -	      sta	COLUP0
   5715  424e					      endif
   5716  424e					      endif
   5717  424e
   5718  424e		       ad 8e 00 	      lda.w	player0height
   5719  4251		       c7 85		      dcp	player0y
   5720  4253		       90 11		      bcc	.skipDrawlastP0
   5721  4255		       a4 85		      ldy	player0y
   5722  4257		       b1 8a		      lda	(player0pointer),y
   5723  4259				   .continuelastP0
   5724  4259		       85 1b		      sta	GRP0
   5725  425b
   5726  425b
   5727  425b
   5728  425b					      ifnconst	no_blank_lines
   5729  425b		       a5 90		      lda	missile0height	;3
   5730  425d		       c7 91		      dcp	missile0y	;5
   5731  425f		       e5 f6		      sbc	stack1
   5732  4261		       85 1d		      sta	ENAM0	;3
   5733  4263		       4c 06 f2 	      jmp	.endkerloop
   5734  4266				  -	      else
   5735  4266				  -	      ifconst	readpaddle
   5736  4266				  -	      ldy	currentpaddle
   5737  4266				  -	      lda	INPT0,y
   5738  4266				  -	      bpl	noreadpaddle2
   5739  4266				  -	      inc	paddle
   5740  4266				  -	      jmp	.endkerloop
   5741  4266				  -noreadpaddle2
   5742  4266				  -	      sleep	4
   5743  4266				  -	      jmp	.endkerloop
   5744  4266				  -	      else		; no_blank_lines and no paddle reading
   5745  4266				  -	      pla
   5746  4266				  -	      pha		; 14 cycles in 4 bytes
   5747  4266				  -	      pla
   5748  4266				  -	      pha
   5749  4266				  -			; sleep 14
   5750  4266				  -	      jmp	.endkerloop
   5751  4266				  -	      endif
   5752  4266					      endif
   5753  4266
   5754  4266
   5755  4266							; ifconst donepaddleskip
   5756  4266							;paddleskipread
   5757  4266							; this is kind of lame, since it requires 4 cycles from a page boundary crossing
   5758  4266							; plus we get a lo-res paddle read
   5759  4266							; bmi donepaddleskip
   5760  4266							; endif
   5761  4266
   5762  4266				   .skipDrawlastP0
   5763  4266		       a9 00		      lda	#0
   5764  4268		       a8		      tay
   5765  4269		       4c 59 f2 	      jmp	.continuelastP0
   5766  426c
   5767  426c				  -	      ifconst	no_blank_lines
   5768  426c				  -no_blank_lines_bailout
   5769  426c				  -	      ldx	#0
   5770  426c					      endif
   5771  426c
   5772  426c				   endkernel
   5773  426c							; 6 digit score routine
   5774  426c		       86 0e		      stx	PF1
   5775  426e		       86 0f		      stx	PF2
   5776  4270		       86 0d		      stx	PF0
   5777  4272		       18		      clc
   5778  4273
   5779  4273				  -	      ifconst	pfrowheight
   5780  4273				  -	      lda	#pfrowheight+2
   5781  4273					      else
   5782  4273				  -	      ifnconst	pfres
   5783  4273				  -	      lda	#10
   5784  4273					      else
   5785  4273		       a9 1a		      lda	#(96/pfres)+2	; try to come close to the real size
   5786  4275					      endif
   5787  4275					      endif
   5788  4275
   5789  4275		       e5 ef		      sbc	playfieldpos
   5790  4277		       85 ef		      sta	playfieldpos
   5791  4279		       8a		      txa
   5792  427a
   5793  427a				  -	      ifconst	shakescreen
   5794  427a				  -	      bit	shakescreen
   5795  427a				  -	      bmi	noshakescreen2
   5796  427a				  -	      ldx	#$3D
   5797  427a				  -noshakescreen2
   5798  427a					      endif
   5799  427a
   5800  427a		       95 02		      sta	WSYNC,x
   5801  427c
   5802  427c							; STA WSYNC ;first one, need one more
   5803  427c		       85 0b		      sta	REFP0
   5804  427e		       85 0c		      sta	REFP1
   5805  4280		       85 1b		      STA	GRP0
   5806  4282		       85 1c		      STA	GRP1
   5807  4284							; STA PF1
   5808  4284							; STA PF2
   5809  4284		       85 2b		      sta	HMCLR
   5810  4286		       85 1d		      sta	ENAM0
   5811  4288		       85 1e		      sta	ENAM1
   5812  428a		       85 1f		      sta	ENABL
   5813  428c
   5814  428c		       a5 9d		      lda	temp2	;restore variables that were obliterated by kernel
   5815  428e		       85 85		      sta	player0y
   5816  4290		       a5 9e		      lda	temp3
   5817  4292		       85 86		      sta	player1y
   5818  4294				  -	      ifnconst	player1colors
   5819  4294				  -	      lda	temp6
   5820  4294				  -	      sta	missile1y
   5821  4294					      endif
   5822  4294					      ifnconst	playercolors
   5823  4294					      ifnconst	readpaddle
   5824  4294		       a5 a0		      lda	temp5
   5825  4296		       85 91		      sta	missile0y
   5826  4298					      endif
   5827  4298					      endif
   5828  4298		       a5 f7		      lda	stack2
   5829  429a		       85 89		      sta	bally
   5830  429c
   5831  429c							; strangely, this isn't required any more. might have
   5832  429c							; resulted from the no_blank_lines score bounce fix
   5833  429c							;ifconst no_blank_lines
   5834  429c							;sta WSYNC
   5835  429c							;endif
   5836  429c
   5837  429c		       ad 84 02 	      lda	INTIM
   5838  429f		       18		      clc
   5839  42a0					      ifnconst	vblank_time
   5840  42a0		       69 8e		      adc	#43+12+87
   5841  42a2				  -	      else
   5842  42a2				  -	      adc	#vblank_time+12+87
   5843  42a2				  -
   5844  42a2					      endif
   5845  42a2							; sta WSYNC
   5846  42a2		       8d 96 02 	      sta	TIM64T
   5847  42a5
   5848  42a5					      ifconst	minikernel
   5849  42a5		       20 82 f5 	      jsr	minikernel
   5850  42a8					      endif
   5851  42a8
   5852  42a8							; now reassign temp vars for score pointers
   5853  42a8
   5854  42a8							; score pointers contain:
   5855  42a8							; score1-5: lo1,lo2,lo3,lo4,lo5,lo6
   5856  42a8							; swap lo2->temp1
   5857  42a8							; swap lo4->temp3
   5858  42a8							; swap lo6->temp5
   5859  42a8				  -	      ifnconst	noscore
   5860  42a8				  -	      lda	scorepointers+1
   5861  42a8				  -			; ldy temp1
   5862  42a8				  -	      sta	temp1
   5863  42a8				  -			; sty scorepointers+1
   5864  42a8				  -
   5865  42a8				  -	      lda	scorepointers+3
   5866  42a8				  -			; ldy temp3
   5867  42a8				  -	      sta	temp3
   5868  42a8				  -			; sty scorepointers+3
   5869  42a8				  -
   5870  42a8				  -
   5871  42a8				  -	      sta	HMCLR
   5872  42a8				  -	      tsx
   5873  42a8				  -	      stx	stack1
   5874  42a8				  -	      ldx	#$E0
   5875  42a8				  -	      stx	HMP0
   5876  42a8				  -
   5877  42a8				  -	      LDA	scorecolor
   5878  42a8				  -	      STA	COLUP0
   5879  42a8				  -	      STA	COLUP1
   5880  42a8				  -	      ifconst	scorefade
   5881  42a8				  -	      STA	stack2
   5882  42a8				  -	      endif
   5883  42a8				  -	      ifconst	pfscore
   5884  42a8				  -	      lda	pfscorecolor
   5885  42a8				  -	      sta	COLUPF
   5886  42a8				  -	      endif
   5887  42a8				  -	      sta	WSYNC
   5888  42a8				  -	      ldx	#0
   5889  42a8				  -	      STx	GRP0
   5890  42a8				  -	      STx	GRP1	; seems to be needed because of vdel
   5891  42a8				  -
   5892  42a8				  -	      lda	scorepointers+5
   5893  42a8				  -			; ldy temp5
   5894  42a8				  -	      sta	temp5,x
   5895  42a8				  -			; sty scorepointers+5
   5896  42a8				  -	      lda	#>scoretable
   5897  42a8				  -	      sta	scorepointers+1
   5898  42a8				  -	      sta	scorepointers+3
   5899  42a8				  -	      sta	scorepointers+5
   5900  42a8				  -	      sta	temp2
   5901  42a8				  -	      sta	temp4
   5902  42a8				  -	      sta	temp6
   5903  42a8				  -	      LDY	#7
   5904  42a8				  -	      STY	VDELP0
   5905  42a8				  -	      STA	RESP0
   5906  42a8				  -	      STA	RESP1
   5907  42a8				  -
   5908  42a8				  -
   5909  42a8				  -	      LDA	#$03
   5910  42a8				  -	      STA	NUSIZ0
   5911  42a8				  -	      STA	NUSIZ1
   5912  42a8				  -	      STA	VDELP1
   5913  42a8				  -	      LDA	#$F0
   5914  42a8				  -	      STA	HMP1
   5915  42a8				  -	      lda	(scorepointers),y
   5916  42a8				  -	      sta	GRP0
   5917  42a8				  -	      STA	HMOVE	; cycle 73 ?
   5918  42a8				  -	      jmp	beginscore
   5919  42a8				  -
   5920  42a8				  -
   5921  42a8				  -	      if	((<*)>$d4)
   5922  42a8				  -	      align	256	; kludge that potentially wastes space! should be fixed!
   5923  42a8				  -	      endif
   5924  42a8				  -
   5925  42a8				  -loop2
   5926  42a8				  -	      lda	(scorepointers),y	;+5 68 204
   5927  42a8				  -	      sta	GRP0	;+3 71 213 D1 -- -- --
   5928  42a8				  -	      ifconst	pfscore
   5929  42a8				  -	      lda.w	pfscore1
   5930  42a8				  -	      sta	PF1
   5931  42a8				  -	      else
   5932  42a8				  -	      ifconst	scorefade
   5933  42a8				  -	      sleep	2
   5934  42a8				  -	      dec	stack2	; decrement the temporary scorecolor
   5935  42a8				  -	      else
   5936  42a8				  -	      sleep	7
   5937  42a8				  -	      endif
   5938  42a8				  -	      endif
   5939  42a8				  -			; cycle 0
   5940  42a8				  -beginscore
   5941  42a8				  -	      lda	(scorepointers+$8),y	;+5 5 15
   5942  42a8				  -	      sta	GRP1	;+3 8 24 D1 D1 D2 --
   5943  42a8				  -	      lda	(scorepointers+$6),y	;+5 13 39
   5944  42a8				  -	      sta	GRP0	;+3 16 48 D3 D1 D2 D2
   5945  42a8				  -	      lax	(scorepointers+$2),y	;+5 29 87
   5946  42a8				  -	      txs
   5947  42a8				  -	      lax	(scorepointers+$4),y	;+5 36 108
   5948  42a8				  -	      ifconst	scorefade
   5949  42a8				  -	      lda	stack2
   5950  42a8				  -	      else
   5951  42a8				  -	      sleep	3
   5952  42a8				  -	      endif
   5953  42a8				  -
   5954  42a8				  -	      ifconst	pfscore
   5955  42a8				  -	      lda	pfscore2
   5956  42a8				  -	      sta	PF1
   5957  42a8				  -	      else
   5958  42a8				  -	      ifconst	scorefade
   5959  42a8				  -	      sta	COLUP0
   5960  42a8				  -	      sta	COLUP1
   5961  42a8				  -	      else
   5962  42a8				  -	      sleep	6
   5963  42a8				  -	      endif
   5964  42a8				  -	      endif
   5965  42a8				  -
   5966  42a8				  -	      lda	(scorepointers+$A),y	;+5 21 63
   5967  42a8				  -	      stx	GRP1	;+3 44 132 D3 D3 D4 D2!
   5968  42a8				  -	      tsx
   5969  42a8				  -	      stx	GRP0	;+3 47 141 D5 D3! D4 D4
   5970  42a8				  -	      sta	GRP1	;+3 50 150 D5 D5 D6 D4!
   5971  42a8				  -	      sty	GRP0	;+3 53 159 D4* D5! D6 D6
   5972  42a8				  -	      dey
   5973  42a8				  -	      bpl	loop2	;+2 60 180
   5974  42a8				  -
   5975  42a8				  -	      ldx	stack1
   5976  42a8				  -	      txs
   5977  42a8				  -			; lda scorepointers+1
   5978  42a8				  -	      ldy	temp1
   5979  42a8				  -			; sta temp1
   5980  42a8				  -	      sty	scorepointers+1
   5981  42a8				  -
   5982  42a8				  -	      LDA	#0
   5983  42a8				  -	      sta	PF1
   5984  42a8				  -	      STA	GRP0
   5985  42a8				  -	      STA	GRP1
   5986  42a8				  -	      STA	VDELP0
   5987  42a8				  -	      STA	VDELP1	;do we need these
   5988  42a8				  -	      STA	NUSIZ0
   5989  42a8				  -	      STA	NUSIZ1
   5990  42a8				  -
   5991  42a8				  -			; lda scorepointers+3
   5992  42a8				  -	      ldy	temp3
   5993  42a8				  -			; sta temp3
   5994  42a8				  -	      sty	scorepointers+3
   5995  42a8				  -
   5996  42a8				  -			; lda scorepointers+5
   5997  42a8				  -	      ldy	temp5
   5998  42a8				  -			; sta temp5
   5999  42a8				  -	      sty	scorepointers+5
   6000  42a8					      endif		;noscore
   6001  42a8				  -	      ifconst	readpaddle
   6002  42a8				  -	      lda	#%11000010
   6003  42a8					      else
   6004  42a8				  -	      ifconst	qtcontroller
   6005  42a8				  -	      lda	qtcontroller
   6006  42a8				  -	      lsr		; bit 0 in carry
   6007  42a8				  -	      lda	#4
   6008  42a8				  -	      ror		; carry into top of A
   6009  42a8					      else
   6010  42a8		       a9 02		      lda	#2
   6011  42aa					      endif		; qtcontroller
   6012  42aa					      endif		; readpaddle
   6013  42aa		       85 02		      sta	WSYNC
   6014  42ac		       85 01		      sta	VBLANK
      0  42ae					      RETURN
      1  42ae				  -	      ifnconst	bankswitch
      2  42ae				  -	      rts
      3  42ae					      else
      4  42ae		       4c da ff 	      jmp	BS_return
      5  42b1					      endif
   6016  42b1				  -	      ifconst	shakescreen
   6017  42b1				  -doshakescreen
   6018  42b1				  -	      bit	shakescreen
   6019  42b1				  -	      bmi	noshakescreen
   6020  42b1				  -	      sta	WSYNC
   6021  42b1				  -noshakescreen
   6022  42b1				  -	      ldx	missile0height
   6023  42b1				  -	      inx
   6024  42b1				  -	      rts
   6025  42b1					      endif
   6026  42b1
   6027  42b1							; Provided under the CC0 license. See the included LICENSE.txt for details.
   6028  42b1
   6029  42b1				   start
   6030  42b1		       78		      sei
   6031  42b2		       d8		      cld
   6032  42b3		       a0 00		      ldy	#0
   6033  42b5		       a5 d0		      lda	$D0
   6034  42b7		       c9 2c		      cmp	#$2C	;check RAM location #1
   6035  42b9		       d0 07		      bne	MachineIs2600
   6036  42bb		       a5 d1		      lda	$D1
   6037  42bd		       c9 a9		      cmp	#$A9	;check RAM location #2
   6038  42bf		       d0 01		      bne	MachineIs2600
   6039  42c1		       88		      dey
   6040  42c2				   MachineIs2600
   6041  42c2		       a2 00		      ldx	#0
   6042  42c4		       8a		      txa
   6043  42c5				   clearmem
   6044  42c5		       e8		      inx
   6045  42c6		       9a		      txs
   6046  42c7		       48		      pha
   6047  42c8		       d0 fb		      bne	clearmem
   6048  42ca		       84 9c		      sty	temp1
   6049  42cc					      ifnconst	multisprite
   6050  42cc				  -	      ifconst	pfrowheight
   6051  42cc				  -	      lda	#pfrowheight
   6052  42cc					      else
   6053  42cc					      ifconst	pfres
   6054  42cc		       a9 18		      lda	#(96/pfres)
   6055  42ce				  -	      else
   6056  42ce				  -	      lda	#8
   6057  42ce					      endif
   6058  42ce					      endif
   6059  42ce		       85 ef		      sta	playfieldpos
   6060  42d0					      endif
   6061  42d0		       a2 05		      ldx	#5
   6062  42d2				   initscore
   6063  42d2		       a9 71		      lda	#<scoretable
   6064  42d4		       95 96		      sta	scorepointers,x
   6065  42d6		       ca		      dex
   6066  42d7		       10 f9		      bpl	initscore
   6067  42d9		       a9 01		      lda	#1
   6068  42db		       85 0a		      sta	CTRLPF
   6069  42dd		       0d 84 02 	      ora	INTIM
   6070  42e0		       85 a2		      sta	rand
   6071  42e2
   6072  42e2				  -	      ifconst	multisprite
   6073  42e2				  -	      jsr	multisprite_setup
   6074  42e2					      endif
   6075  42e2
   6076  42e2				  -	      ifnconst	bankswitch
   6077  42e2				  -	      jmp	game
   6078  42e2					      else
   6079  42e2		       a9 90		      lda	#>(game-1)
   6080  42e4		       48		      pha
   6081  42e5		       a9 ff		      lda	#<(game-1)
   6082  42e7		       48		      pha
   6083  42e8		       48		      pha
   6084  42e9		       48		      pha
   6085  42ea		       a2 01		      ldx	#1
   6086  42ec		       4c e8 ff 	      jmp	BS_jsr
   6087  42ef					      endif
   6088  42ef							; Provided under the CC0 license. See the included LICENSE.txt for details.
   6089  42ef
   6090  42ef							; playfield drawing routines
   6091  42ef							; you get a 32x12 bitmapped display in a single color :)
   6092  42ef							; 0-31 and 0-11
   6093  42ef
   6094  42ef				   pfclear		; clears playfield - or fill with pattern
   6095  42ef					      ifconst	pfres
   6096  42ef		       a2 0f		      ldx	#pfres*pfwidth-1
   6097  42f1				  -	      else
   6098  42f1				  -	      ldx	#47-(4-pfwidth)*12	; will this work?
   6099  42f1					      endif
   6100  42f1				   pfclear_loop
   6101  42f1				  -	      ifnconst	superchip
   6102  42f1				  -	      sta	playfield,x
   6103  42f1					      else
   6104  42f1		       9d 70 10 	      sta	playfield-128,x
   6105  42f4					      endif
   6106  42f4		       ca		      dex
   6107  42f5		       10 fa		      bpl	pfclear_loop
      0  42f7					      RETURN
      1  42f7				  -	      ifnconst	bankswitch
      2  42f7				  -	      rts
      3  42f7					      else
      4  42f7		       4c da ff 	      jmp	BS_return
      5  42fa					      endif
   6109  42fa
   6110  42fa				   setuppointers
   6111  42fa		       86 9d		      stx	temp2	; store on.off.flip value
   6112  42fc		       aa		      tax		; put x-value in x 
   6113  42fd		       4a		      lsr
   6114  42fe		       4a		      lsr
   6115  42ff		       4a		      lsr		; divide x pos by 8 
   6116  4300		       85 9c		      sta	temp1
   6117  4302		       98		      tya
   6118  4303		       0a		      asl
   6119  4304					      if	pfwidth=4
   6120  4304		       0a		      asl		; multiply y pos by 4
   6121  4305					      endif		; else multiply by 2
   6122  4305		       18		      clc
   6123  4306		       65 9c		      adc	temp1	; add them together to get actual memory location offset
   6124  4308		       a8		      tay		; put the value in y
   6125  4309		       a5 9d		      lda	temp2	; restore on.off.flip value
   6126  430b		       60		      rts
   6127  430c
   6128  430c				   pfread
   6129  430c							;x=xvalue, y=yvalue
   6130  430c		       20 fa f2 	      jsr	setuppointers
   6131  430f		       bd a4 f3 	      lda	setbyte,x
   6132  4312		       39 f0 10 	      and	playfield,y
   6133  4315		       5d a4 f3 	      eor	setbyte,x
   6134  4318							; beq readzero
   6135  4318							; lda #1
   6136  4318							; readzero
      0  4318					      RETURN
      1  4318				  -	      ifnconst	bankswitch
      2  4318				  -	      rts
      3  4318					      else
      4  4318		       4c da ff 	      jmp	BS_return
      5  431b					      endif
   6138  431b
   6139  431b				   pfpixel
   6140  431b							;x=xvalue, y=yvalue, a=0,1,2
   6141  431b		       20 fa f2 	      jsr	setuppointers
   6142  431e
   6143  431e					      ifconst	bankswitch
   6144  431e		       a5 9d		      lda	temp2	; load on.off.flip value (0,1, or 2)
   6145  4320		       f0 0f		      beq	pixelon_r	; if "on" go to on
   6146  4322		       4a		      lsr
   6147  4323		       b0 18		      bcs	pixeloff_r	; value is 1 if true
   6148  4325		       b9 f0 10 	      lda	playfield,y	; if here, it's "flip"
   6149  4328		       5d a4 f3 	      eor	setbyte,x
   6150  432b					      ifconst	superchip
   6151  432b		       99 70 10 	      sta	playfield-128,y
   6152  432e				  -	      else
   6153  432e				  -	      sta	playfield,y
   6154  432e					      endif
      0  432e					      RETURN
      1  432e				  -	      ifnconst	bankswitch
      2  432e				  -	      rts
      3  432e					      else
      4  432e		       4c da ff 	      jmp	BS_return
      5  4331					      endif
   6156  4331				   pixelon_r
   6157  4331		       b9 f0 10 	      lda	playfield,y
   6158  4334		       1d a4 f3 	      ora	setbyte,x
   6159  4337					      ifconst	superchip
   6160  4337		       99 70 10 	      sta	playfield-128,y
   6161  433a				  -	      else
   6162  433a				  -	      sta	playfield,y
   6163  433a					      endif
      0  433a					      RETURN
      1  433a				  -	      ifnconst	bankswitch
      2  433a				  -	      rts
      3  433a					      else
      4  433a		       4c da ff 	      jmp	BS_return
      5  433d					      endif
   6165  433d				   pixeloff_r
   6166  433d		       bd a4 f3 	      lda	setbyte,x
   6167  4340		       49 ff		      eor	#$ff
   6168  4342		       39 f0 10 	      and	playfield,y
   6169  4345					      ifconst	superchip
   6170  4345		       99 70 10 	      sta	playfield-128,y
   6171  4348				  -	      else
   6172  4348				  -	      sta	playfield,y
   6173  4348					      endif
      0  4348					      RETURN
      1  4348				  -	      ifnconst	bankswitch
      2  4348				  -	      rts
      3  4348					      else
      4  4348		       4c da ff 	      jmp	BS_return
      5  434b					      endif
   6175  434b
   6176  434b				  -	      else
   6177  434b				  -	      jmp	plotpoint
   6178  434b					      endif
   6179  434b
   6180  434b				   pfhline
   6181  434b							;x=xvalue, y=yvalue, a=0,1,2, temp3=endx
   6182  434b		       20 fa f2 	      jsr	setuppointers
   6183  434e		       4c 58 f3 	      jmp	noinc
   6184  4351				   keepgoing
   6185  4351		       e8		      inx
   6186  4352		       8a		      txa
   6187  4353		       29 07		      and	#7
   6188  4355		       d0 01		      bne	noinc
   6189  4357		       c8		      iny
   6190  4358				   noinc
   6191  4358		       20 7d f3 	      jsr	plotpoint
   6192  435b		       e4 9e		      cpx	temp3
   6193  435d		       30 f2		      bmi	keepgoing
      0  435f					      RETURN
      1  435f				  -	      ifnconst	bankswitch
      2  435f				  -	      rts
      3  435f					      else
      4  435f		       4c da ff 	      jmp	BS_return
      5  4362					      endif
   6195  4362
   6196  4362				   pfvline
   6197  4362							;x=xvalue, y=yvalue, a=0,1,2, temp3=endx
   6198  4362		       20 fa f2 	      jsr	setuppointers
   6199  4365		       84 9c		      sty	temp1	; store memory location offset
   6200  4367		       e6 9e		      inc	temp3	; increase final x by 1 
   6201  4369		       a5 9e		      lda	temp3
   6202  436b		       0a		      asl
   6203  436c					      if	pfwidth=4
   6204  436c		       0a		      asl		; multiply by 4
   6205  436d					      endif		; else multiply by 2
   6206  436d		       85 9e		      sta	temp3	; store it
   6207  436f							; Thanks to Michael Rideout for fixing a bug in this code
   6208  436f							; right now, temp1=y=starting memory location, temp3=final
   6209  436f							; x should equal original x value
   6210  436f				   keepgoingy
   6211  436f		       20 7d f3 	      jsr	plotpoint
   6212  4372		       c8		      iny
   6213  4373		       c8		      iny
   6214  4374					      if	pfwidth=4
   6215  4374		       c8		      iny
   6216  4375		       c8		      iny
   6217  4376					      endif
   6218  4376		       c4 9e		      cpy	temp3
   6219  4378		       30 f5		      bmi	keepgoingy
      0  437a					      RETURN
      1  437a				  -	      ifnconst	bankswitch
      2  437a				  -	      rts
      3  437a					      else
      4  437a		       4c da ff 	      jmp	BS_return
      5  437d					      endif
   6221  437d
   6222  437d				   plotpoint
   6223  437d		       a5 9d		      lda	temp2	; load on.off.flip value (0,1, or 2)
   6224  437f		       f0 0d		      beq	pixelon	; if "on" go to on
   6225  4381		       4a		      lsr
   6226  4382		       b0 14		      bcs	pixeloff	; value is 1 if true
   6227  4384		       b9 f0 10 	      lda	playfield,y	; if here, it's "flip"
   6228  4387		       5d a4 f3 	      eor	setbyte,x
   6229  438a					      ifconst	superchip
   6230  438a		       99 70 10 	      sta	playfield-128,y
   6231  438d				  -	      else
   6232  438d				  -	      sta	playfield,y
   6233  438d					      endif
   6234  438d		       60		      rts
   6235  438e				   pixelon
   6236  438e		       b9 f0 10 	      lda	playfield,y
   6237  4391		       1d a4 f3 	      ora	setbyte,x
   6238  4394					      ifconst	superchip
   6239  4394		       99 70 10 	      sta	playfield-128,y
   6240  4397				  -	      else
   6241  4397				  -	      sta	playfield,y
   6242  4397					      endif
   6243  4397		       60		      rts
   6244  4398				   pixeloff
   6245  4398		       bd a4 f3 	      lda	setbyte,x
   6246  439b		       49 ff		      eor	#$ff
   6247  439d		       39 f0 10 	      and	playfield,y
   6248  43a0					      ifconst	superchip
   6249  43a0		       99 70 10 	      sta	playfield-128,y
   6250  43a3				  -	      else
   6251  43a3				  -	      sta	playfield,y
   6252  43a3					      endif
   6253  43a3		       60		      rts
   6254  43a4
   6255  43a4				   setbyte
   6256  43a4					      ifnconst	pfcenter
   6257  43a4		       80		      .byte.b	$80
   6258  43a5		       40		      .byte.b	$40
   6259  43a6		       20		      .byte.b	$20
   6260  43a7		       10		      .byte.b	$10
   6261  43a8		       08		      .byte.b	$08
   6262  43a9		       04		      .byte.b	$04
   6263  43aa		       02		      .byte.b	$02
   6264  43ab		       01		      .byte.b	$01
   6265  43ac					      endif
   6266  43ac		       01		      .byte.b	$01
   6267  43ad		       02		      .byte.b	$02
   6268  43ae		       04		      .byte.b	$04
   6269  43af		       08		      .byte.b	$08
   6270  43b0		       10		      .byte.b	$10
   6271  43b1		       20		      .byte.b	$20
   6272  43b2		       40		      .byte.b	$40
   6273  43b3		       80		      .byte.b	$80
   6274  43b4		       80		      .byte.b	$80
   6275  43b5		       40		      .byte.b	$40
   6276  43b6		       20		      .byte.b	$20
   6277  43b7		       10		      .byte.b	$10
   6278  43b8		       08		      .byte.b	$08
   6279  43b9		       04		      .byte.b	$04
   6280  43ba		       02		      .byte.b	$02
   6281  43bb		       01		      .byte.b	$01
   6282  43bc		       01		      .byte.b	$01
   6283  43bd		       02		      .byte.b	$02
   6284  43be		       04		      .byte.b	$04
   6285  43bf		       08		      .byte.b	$08
   6286  43c0		       10		      .byte.b	$10
   6287  43c1		       20		      .byte.b	$20
   6288  43c2		       40		      .byte.b	$40
   6289  43c3		       80		      .byte.b	$80
   6290  43c4							; Provided under the CC0 license. See the included LICENSE.txt for details.
   6291  43c4
   6292  43c4				   pfscroll		;(a=0 left, 1 right, 2 up, 4 down, 6=upup, 12=downdown)
   6293  43c4		       d0 2a		      bne	notleft
   6294  43c6							;left
   6295  43c6					      ifconst	pfres
   6296  43c6		       a2 10		      ldx	#pfres*4
   6297  43c8				  -	      else
   6298  43c8				  -	      ldx	#48
   6299  43c8					      endif
   6300  43c8				   leftloop
   6301  43c8		       bd ef 10 	      lda	playfield-1,x
   6302  43cb		       4a		      lsr
   6303  43cc
   6304  43cc					      ifconst	superchip
   6305  43cc		       bd ee 10 	      lda	playfield-2,x
   6306  43cf		       2a		      rol
   6307  43d0		       9d 6e 10 	      sta	playfield-130,x
   6308  43d3		       bd ed 10 	      lda	playfield-3,x
   6309  43d6		       6a		      ror
   6310  43d7		       9d 6d 10 	      sta	playfield-131,x
   6311  43da		       bd ec 10 	      lda	playfield-4,x
   6312  43dd		       2a		      rol
   6313  43de		       9d 6c 10 	      sta	playfield-132,x
   6314  43e1		       bd ef 10 	      lda	playfield-1,x
   6315  43e4		       6a		      ror
   6316  43e5		       9d 6f 10 	      sta	playfield-129,x
   6317  43e8				  -	      else
   6318  43e8				  -	      rol	playfield-2,x
   6319  43e8				  -	      ror	playfield-3,x
   6320  43e8				  -	      rol	playfield-4,x
   6321  43e8				  -	      ror	playfield-1,x
   6322  43e8					      endif
   6323  43e8
   6324  43e8		       8a		      txa
   6325  43e9		       cb 04		      sbx	#4
   6326  43eb		       d0 db		      bne	leftloop
      0  43ed					      RETURN
      1  43ed				  -	      ifnconst	bankswitch
      2  43ed				  -	      rts
      3  43ed					      else
      4  43ed		       4c da ff 	      jmp	BS_return
      5  43f0					      endif
   6328  43f0
   6329  43f0				   notleft
   6330  43f0		       4a		      lsr
   6331  43f1		       90 2a		      bcc	notright
   6332  43f3							;right
   6333  43f3
   6334  43f3					      ifconst	pfres
   6335  43f3		       a2 10		      ldx	#pfres*4
   6336  43f5				  -	      else
   6337  43f5				  -	      ldx	#48
   6338  43f5					      endif
   6339  43f5				   rightloop
   6340  43f5		       bd ec 10 	      lda	playfield-4,x
   6341  43f8		       4a		      lsr
   6342  43f9					      ifconst	superchip
   6343  43f9		       bd ed 10 	      lda	playfield-3,x
   6344  43fc		       2a		      rol
   6345  43fd		       9d 6d 10 	      sta	playfield-131,x
   6346  4400		       bd ee 10 	      lda	playfield-2,x
   6347  4403		       6a		      ror
   6348  4404		       9d 6e 10 	      sta	playfield-130,x
   6349  4407		       bd ef 10 	      lda	playfield-1,x
   6350  440a		       2a		      rol
   6351  440b		       9d 6f 10 	      sta	playfield-129,x
   6352  440e		       bd ec 10 	      lda	playfield-4,x
   6353  4411		       6a		      ror
   6354  4412		       9d 6c 10 	      sta	playfield-132,x
   6355  4415				  -	      else
   6356  4415				  -	      rol	playfield-3,x
   6357  4415				  -	      ror	playfield-2,x
   6358  4415				  -	      rol	playfield-1,x
   6359  4415				  -	      ror	playfield-4,x
   6360  4415					      endif
   6361  4415		       8a		      txa
   6362  4416		       cb 04		      sbx	#4
   6363  4418		       d0 db		      bne	rightloop
      0  441a					      RETURN
      1  441a				  -	      ifnconst	bankswitch
      2  441a				  -	      rts
      3  441a					      else
      4  441a		       4c da ff 	      jmp	BS_return
      5  441d					      endif
   6365  441d
   6366  441d				   notright
   6367  441d		       4a		      lsr
   6368  441e		       90 5b		      bcc	notup
   6369  4420							;up
   6370  4420		       4a		      lsr
   6371  4421		       90 02		      bcc	onedecup
   6372  4423		       c6 ef		      dec	playfieldpos
   6373  4425				   onedecup
   6374  4425		       c6 ef		      dec	playfieldpos
   6375  4427		       f0 02		      beq	shiftdown
   6376  4429		       10 4d		      bpl	noshiftdown2
   6377  442b				   shiftdown
   6378  442b				  -	      ifconst	pfrowheight
   6379  442b				  -	      lda	#pfrowheight
   6380  442b					      else
   6381  442b				  -	      ifnconst	pfres
   6382  442b				  -	      lda	#8
   6383  442b					      else
   6384  442b		       a9 18		      lda	#(96/pfres)	; try to come close to the real size
   6385  442d					      endif
   6386  442d					      endif
   6387  442d
   6388  442d		       85 ef		      sta	playfieldpos
   6389  442f		       ad f3 10 	      lda	playfield+3
   6390  4432		       85 9f		      sta	temp4
   6391  4434		       ad f2 10 	      lda	playfield+2
   6392  4437		       85 9e		      sta	temp3
   6393  4439		       ad f1 10 	      lda	playfield+1
   6394  443c		       85 9d		      sta	temp2
   6395  443e		       ad f0 10 	      lda	playfield
   6396  4441		       85 9c		      sta	temp1
   6397  4443		       a2 00		      ldx	#0
   6398  4445				   up2
   6399  4445		       bd f4 10 	      lda	playfield+4,x
   6400  4448					      ifconst	superchip
   6401  4448		       9d 70 10 	      sta	playfield-128,x
   6402  444b		       bd f5 10 	      lda	playfield+5,x
   6403  444e		       9d 71 10 	      sta	playfield-127,x
   6404  4451		       bd f6 10 	      lda	playfield+6,x
   6405  4454		       9d 72 10 	      sta	playfield-126,x
   6406  4457		       bd f7 10 	      lda	playfield+7,x
   6407  445a		       9d 73 10 	      sta	playfield-125,x
   6408  445d				  -	      else
   6409  445d				  -	      sta	playfield,x
   6410  445d				  -	      lda	playfield+5,x
   6411  445d				  -	      sta	playfield+1,x
   6412  445d				  -	      lda	playfield+6,x
   6413  445d				  -	      sta	playfield+2,x
   6414  445d				  -	      lda	playfield+7,x
   6415  445d				  -	      sta	playfield+3,x
   6416  445d					      endif
   6417  445d		       8a		      txa
   6418  445e		       cb fc		      sbx	#252
   6419  4460					      ifconst	pfres
   6420  4460		       e0 0c		      cpx	#(pfres-1)*4
   6421  4462				  -	      else
   6422  4462				  -	      cpx	#44
   6423  4462					      endif
   6424  4462		       d0 e1		      bne	up2
   6425  4464
   6426  4464		       a5 9f		      lda	temp4
   6427  4466
   6428  4466					      ifconst	superchip
   6429  4466					      ifconst	pfres
   6430  4466		       8d 7f 10 	      sta	playfield+pfres*4-129
   6431  4469		       a5 9e		      lda	temp3
   6432  446b		       8d 7e 10 	      sta	playfield+pfres*4-130
   6433  446e		       a5 9d		      lda	temp2
   6434  4470		       8d 7d 10 	      sta	playfield+pfres*4-131
   6435  4473		       a5 9c		      lda	temp1
   6436  4475		       8d 7c 10 	      sta	playfield+pfres*4-132
   6437  4478				  -	      else
   6438  4478				  -	      sta	playfield+47-128
   6439  4478				  -	      lda	temp3
   6440  4478				  -	      sta	playfield+46-128
   6441  4478				  -	      lda	temp2
   6442  4478				  -	      sta	playfield+45-128
   6443  4478				  -	      lda	temp1
   6444  4478				  -	      sta	playfield+44-128
   6445  4478					      endif
   6446  4478				  -	      else
   6447  4478				  -	      ifconst	pfres
   6448  4478				  -	      sta	playfield+pfres*4-1
   6449  4478				  -	      lda	temp3
   6450  4478				  -	      sta	playfield+pfres*4-2
   6451  4478				  -	      lda	temp2
   6452  4478				  -	      sta	playfield+pfres*4-3
   6453  4478				  -	      lda	temp1
   6454  4478				  -	      sta	playfield+pfres*4-4
   6455  4478				  -	      else
   6456  4478				  -	      sta	playfield+47
   6457  4478				  -	      lda	temp3
   6458  4478				  -	      sta	playfield+46
   6459  4478				  -	      lda	temp2
   6460  4478				  -	      sta	playfield+45
   6461  4478				  -	      lda	temp1
   6462  4478				  -	      sta	playfield+44
   6463  4478				  -	      endif
   6464  4478					      endif
   6465  4478				   noshiftdown2
      0  4478					      RETURN
      1  4478				  -	      ifnconst	bankswitch
      2  4478				  -	      rts
      3  4478					      else
      4  4478		       4c da ff 	      jmp	BS_return
      5  447b					      endif
   6467  447b
   6468  447b
   6469  447b				   notup
   6470  447b							;down
   6471  447b		       4a		      lsr
   6472  447c		       b0 02		      bcs	oneincup
   6473  447e		       e6 ef		      inc	playfieldpos
   6474  4480				   oneincup
   6475  4480		       e6 ef		      inc	playfieldpos
   6476  4482		       a5 ef		      lda	playfieldpos
   6477  4484
   6478  4484				  -	      ifconst	pfrowheight
   6479  4484				  -	      cmp	#pfrowheight+1
   6480  4484					      else
   6481  4484				  -	      ifnconst	pfres
   6482  4484				  -	      cmp	#9
   6483  4484					      else
   6484  4484		       c9 19		      cmp	#(96/pfres)+1	; try to come close to the real size
   6485  4486					      endif
   6486  4486					      endif
   6487  4486
   6488  4486		       90 4b		      bcc	noshiftdown
   6489  4488		       a9 01		      lda	#1
   6490  448a		       85 ef		      sta	playfieldpos
   6491  448c
   6492  448c					      ifconst	pfres
   6493  448c		       ad ff 10 	      lda	playfield+pfres*4-1
   6494  448f		       85 9f		      sta	temp4
   6495  4491		       ad fe 10 	      lda	playfield+pfres*4-2
   6496  4494		       85 9e		      sta	temp3
   6497  4496		       ad fd 10 	      lda	playfield+pfres*4-3
   6498  4499		       85 9d		      sta	temp2
   6499  449b		       ad fc 10 	      lda	playfield+pfres*4-4
   6500  449e				  -	      else
   6501  449e				  -	      lda	playfield+47
   6502  449e				  -	      sta	temp4
   6503  449e				  -	      lda	playfield+46
   6504  449e				  -	      sta	temp3
   6505  449e				  -	      lda	playfield+45
   6506  449e				  -	      sta	temp2
   6507  449e				  -	      lda	playfield+44
   6508  449e					      endif
   6509  449e
   6510  449e		       85 9c		      sta	temp1
   6511  44a0
   6512  44a0					      ifconst	pfres
   6513  44a0		       a2 0c		      ldx	#(pfres-1)*4
   6514  44a2				  -	      else
   6515  44a2				  -	      ldx	#44
   6516  44a2					      endif
   6517  44a2				   down2
   6518  44a2		       bd ef 10 	      lda	playfield-1,x
   6519  44a5					      ifconst	superchip
   6520  44a5		       9d 73 10 	      sta	playfield-125,x
   6521  44a8		       bd ee 10 	      lda	playfield-2,x
   6522  44ab		       9d 72 10 	      sta	playfield-126,x
   6523  44ae		       bd ed 10 	      lda	playfield-3,x
   6524  44b1		       9d 71 10 	      sta	playfield-127,x
   6525  44b4		       bd ec 10 	      lda	playfield-4,x
   6526  44b7		       9d 70 10 	      sta	playfield-128,x
   6527  44ba				  -	      else
   6528  44ba				  -	      sta	playfield+3,x
   6529  44ba				  -	      lda	playfield-2,x
   6530  44ba				  -	      sta	playfield+2,x
   6531  44ba				  -	      lda	playfield-3,x
   6532  44ba				  -	      sta	playfield+1,x
   6533  44ba				  -	      lda	playfield-4,x
   6534  44ba				  -	      sta	playfield,x
   6535  44ba					      endif
   6536  44ba		       8a		      txa
   6537  44bb		       cb 04		      sbx	#4
   6538  44bd		       d0 e3		      bne	down2
   6539  44bf
   6540  44bf		       a5 9f		      lda	temp4
   6541  44c1					      ifconst	superchip
   6542  44c1		       8d 73 10 	      sta	playfield-125
   6543  44c4		       a5 9e		      lda	temp3
   6544  44c6		       8d 72 10 	      sta	playfield-126
   6545  44c9		       a5 9d		      lda	temp2
   6546  44cb		       8d 71 10 	      sta	playfield-127
   6547  44ce		       a5 9c		      lda	temp1
   6548  44d0		       8d 70 10 	      sta	playfield-128
   6549  44d3				  -	      else
   6550  44d3				  -	      sta	playfield+3
   6551  44d3				  -	      lda	temp3
   6552  44d3				  -	      sta	playfield+2
   6553  44d3				  -	      lda	temp2
   6554  44d3				  -	      sta	playfield+1
   6555  44d3				  -	      lda	temp1
   6556  44d3				  -	      sta	playfield
   6557  44d3					      endif
   6558  44d3				   noshiftdown
      0  44d3					      RETURN
      1  44d3				  -	      ifnconst	bankswitch
      2  44d3				  -	      rts
      3  44d3					      else
      4  44d3		       4c da ff 	      jmp	BS_return
      5  44d6					      endif
   6560  44d6							; Provided under the CC0 license. See the included LICENSE.txt for details.
   6561  44d6
   6562  44d6							;standard routines needed for pretty much all games
   6563  44d6							; just the random number generator is left - maybe we should remove this asm file altogether?
   6564  44d6							; repositioning code and score pointer setup moved to overscan
   6565  44d6							; read switches, joysticks now compiler generated (more efficient)
   6566  44d6
   6567  44d6				   randomize
   6568  44d6		       a5 a2		      lda	rand
   6569  44d8		       4a		      lsr
   6570  44d9				  -	      ifconst	rand16
   6571  44d9				  -	      rol	rand16
   6572  44d9					      endif
   6573  44d9		       90 02		      bcc	noeor
   6574  44db		       49 b4		      eor	#$B4
   6575  44dd				   noeor
   6576  44dd		       85 a2		      sta	rand
   6577  44df				  -	      ifconst	rand16
   6578  44df				  -	      eor	rand16
   6579  44df					      endif
      0  44df					      RETURN
      1  44df				  -	      ifnconst	bankswitch
      2  44df				  -	      rts
      3  44df					      else
      4  44df		       4c da ff 	      jmp	BS_return
      5  44e2					      endif
   6581  44e2							; Provided under the CC0 license. See the included LICENSE.txt for details.
   6582  44e2
   6583  44e2				   drawscreen
   6584  44e2				  -	      ifconst	debugscore
   6585  44e2				  -	      ldx	#14
   6586  44e2				  -	      lda	INTIM	; display # cycles left in the score
   6587  44e2				  -
   6588  44e2				  -	      ifconst	mincycles
   6589  44e2				  -	      lda	mincycles
   6590  44e2				  -	      cmp	INTIM
   6591  44e2				  -	      lda	mincycles
   6592  44e2				  -	      bcc	nochange
   6593  44e2				  -	      lda	INTIM
   6594  44e2				  -	      sta	mincycles
   6595  44e2				  -nochange
   6596  44e2				  -	      endif
   6597  44e2				  -
   6598  44e2				  -			; cmp #$2B
   6599  44e2				  -			; bcs no_cycles_left
   6600  44e2				  -	      bmi	cycles_left
   6601  44e2				  -	      ldx	#64
   6602  44e2				  -	      eor	#$ff	;make negative
   6603  44e2				  -cycles_left
   6604  44e2				  -	      stx	scorecolor
   6605  44e2				  -	      and	#$7f	; clear sign bit
   6606  44e2				  -	      tax
   6607  44e2				  -	      lda	scorebcd,x
   6608  44e2				  -	      sta	score+2
   6609  44e2				  -	      lda	scorebcd1,x
   6610  44e2				  -	      sta	score+1
   6611  44e2				  -	      jmp	done_debugscore
   6612  44e2				  -scorebcd
   6613  44e2				  -	      .byte	$00, $64, $28, $92, $56, $20, $84, $48, $12, $76, $40
   6614  44e2				  -	      .byte	$04, $68, $32, $96, $60, $24, $88, $52, $16, $80, $44
   6615  44e2				  -	      .byte	$08, $72, $36, $00, $64, $28, $92, $56, $20, $84, $48
   6616  44e2				  -	      .byte	$12, $76, $40, $04, $68, $32, $96, $60, $24, $88
   6617  44e2				  -scorebcd1
   6618  44e2				  -	      .byte	0, 0, 1, 1, 2, 3, 3, 4, 5, 5, 6
   6619  44e2				  -	      .byte	7, 7, 8, 8, 9, $10, $10, $11, $12, $12, $13
   6620  44e2				  -	      .byte	$14, $14, $15, $16, $16, $17, $17, $18, $19, $19, $20
   6621  44e2				  -	      .byte	$21, $21, $22, $23, $23, $24, $24, $25, $26, $26
   6622  44e2				  -done_debugscore
   6623  44e2					      endif
   6624  44e2
   6625  44e2				  -	      ifconst	debugcycles
   6626  44e2				  -	      lda	INTIM	; if we go over, it mucks up the background color
   6627  44e2				  -			; cmp #$2B
   6628  44e2				  -			; BCC overscan
   6629  44e2				  -	      bmi	overscan
   6630  44e2				  -	      sta	COLUBK
   6631  44e2				  -	      bcs	doneoverscan
   6632  44e2					      endif
   6633  44e2
   6634  44e2				   overscan
   6635  44e2				  -	      ifconst	interlaced
   6636  44e2				  -	      PHP
   6637  44e2				  -	      PLA
   6638  44e2				  -	      EOR	#4	; flip interrupt bit
   6639  44e2				  -	      PHA
   6640  44e2				  -	      PLP
   6641  44e2				  -	      AND	#4	; isolate the interrupt bit
   6642  44e2				  -	      TAX		; save it for later
   6643  44e2					      endif
   6644  44e2
   6645  44e2				   overscanloop
   6646  44e2		       ad 84 02 	      lda	INTIM	;wait for sync
   6647  44e5		       30 fb		      bmi	overscanloop
   6648  44e7				   doneoverscan
   6649  44e7
   6650  44e7							;do VSYNC
   6651  44e7
   6652  44e7				  -	      ifconst	interlaced
   6653  44e7				  -	      CPX	#4
   6654  44e7				  -	      BNE	oddframevsync
   6655  44e7					      endif
   6656  44e7
   6657  44e7		       a9 02		      lda	#2
   6658  44e9		       85 02		      sta	WSYNC
   6659  44eb		       85 00		      sta	VSYNC
   6660  44ed		       85 02		      STA	WSYNC
   6661  44ef		       85 02		      STA	WSYNC
   6662  44f1		       4a		      lsr
   6663  44f2		       85 02		      STA	WSYNC
   6664  44f4		       85 00		      STA	VSYNC
   6665  44f6		       85 01		      sta	VBLANK
   6666  44f8					      ifnconst	overscan_time
   6667  44f8		       a9 a5		      lda	#37+128
   6668  44fa				  -	      else
   6669  44fa				  -	      lda	#overscan_time+128
   6670  44fa					      endif
   6671  44fa		       8d 96 02 	      sta	TIM64T
   6672  44fd
   6673  44fd				  -	      ifconst	interlaced
   6674  44fd				  -	      jmp	postsync
   6675  44fd				  -
   6676  44fd				  -oddframevsync
   6677  44fd				  -	      sta	WSYNC
   6678  44fd				  -
   6679  44fd				  -	      LDA	($80,X)	; 11 waste
   6680  44fd				  -	      LDA	($80,X)	; 11 waste
   6681  44fd				  -	      LDA	($80,X)	; 11 waste
   6682  44fd				  -
   6683  44fd				  -	      lda	#2
   6684  44fd				  -	      sta	VSYNC
   6685  44fd				  -	      sta	WSYNC
   6686  44fd				  -	      sta	WSYNC
   6687  44fd				  -	      sta	WSYNC
   6688  44fd				  -
   6689  44fd				  -	      LDA	($80,X)	; 11 waste
   6690  44fd				  -	      LDA	($80,X)	; 11 waste
   6691  44fd				  -	      LDA	($80,X)	; 11 waste
   6692  44fd				  -
   6693  44fd				  -	      lda	#0
   6694  44fd				  -	      sta	VSYNC
   6695  44fd				  -	      sta	VBLANK
   6696  44fd				  -	      ifnconst	overscan_time
   6697  44fd				  -	      lda	#37+128
   6698  44fd				  -	      else
   6699  44fd				  -	      lda	#overscan_time+128
   6700  44fd				  -	      endif
   6701  44fd				  -	      sta	TIM64T
   6702  44fd				  -
   6703  44fd				  -postsync
   6704  44fd					      endif
   6705  44fd
   6706  44fd				  -	      ifconst	legacy
   6707  44fd				  -	      if	legacy < 100
   6708  44fd				  -	      ldx	#4
   6709  44fd				  -adjustloop
   6710  44fd				  -	      lda	player0x,x
   6711  44fd				  -	      sec
   6712  44fd				  -	      sbc	#14	;?
   6713  44fd				  -	      sta	player0x,x
   6714  44fd				  -	      dex
   6715  44fd				  -	      bpl	adjustloop
   6716  44fd				  -	      endif
   6717  44fd					      endif
   6718  44fd				  -	      if	((<*)>$e9)&&((<*)<$fa)
   6719  44fd				  -	      repeat	($fa-(<*))
   6720  44fd				  -	      nop
   6721  44fd				  -	      repend
   6722  44fd					      endif
   6723  44fd		       85 02		      sta	WSYNC
   6724  44ff		       a2 04		      ldx	#4
      0  4501					      SLEEP	3
      1  4501				   .CYCLES    SET	3
      2  4501
      3  4501				  -	      IF	.CYCLES < 2
      4  4501				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  4501				  -	      ERR
      6  4501					      ENDIF
      7  4501
      8  4501					      IF	.CYCLES & 1
      9  4501					      IFNCONST	NO_ILLEGAL_OPCODES
     10  4501		       04 00		      nop	0
     11  4503				  -	      ELSE
     12  4503				  -	      bit	VSYNC
     13  4503					      ENDIF
     14  4503				   .CYCLES    SET	.CYCLES - 3
     15  4503					      ENDIF
     16  4503
     17  4503				  -	      REPEAT	.CYCLES / 2
     18  4503				  -	      nop
     19  4503					      REPEND
   6726  4503				   HorPosLoop		; 5
   6727  4503		       b5 80		      lda	player0x,X	;+4 9
   6728  4505		       38		      sec		;+2 11
   6729  4506				   DivideLoop
   6730  4506		       e9 0f		      sbc	#15
   6731  4508		       b0 fc		      bcs	DivideLoop	;+4 15
   6732  450a		       95 9c		      sta	temp1,X	;+4 19
   6733  450c		       95 10		      sta	RESP0,X	;+4 23
   6734  450e		       85 02		      sta	WSYNC
   6735  4510		       ca		      dex
   6736  4511		       10 f0		      bpl	HorPosLoop	;+5 5
   6737  4513							; 4
   6738  4513
   6739  4513		       a2 04		      ldx	#4
   6740  4515		       b4 9c		      ldy	temp1,X
   6741  4517		       b9 73 f4 	      lda	repostable-256,Y
   6742  451a		       95 20		      sta	HMP0,X	;+14 18
   6743  451c
   6744  451c		       ca		      dex
   6745  451d		       b4 9c		      ldy	temp1,X
   6746  451f		       b9 73 f4 	      lda	repostable-256,Y
   6747  4522		       95 20		      sta	HMP0,X	;+14 32
   6748  4524
   6749  4524		       ca		      dex
   6750  4525		       b4 9c		      ldy	temp1,X
   6751  4527		       b9 73 f4 	      lda	repostable-256,Y
   6752  452a		       95 20		      sta	HMP0,X	;+14 46
   6753  452c
   6754  452c		       ca		      dex
   6755  452d		       b4 9c		      ldy	temp1,X
   6756  452f		       b9 73 f4 	      lda	repostable-256,Y
   6757  4532		       95 20		      sta	HMP0,X	;+14 60
   6758  4534
   6759  4534		       ca		      dex
   6760  4535		       b4 9c		      ldy	temp1,X
   6761  4537		       b9 73 f4 	      lda	repostable-256,Y
   6762  453a		       95 20		      sta	HMP0,X	;+14 74
   6763  453c
   6764  453c		       85 02		      sta	WSYNC
   6765  453e
   6766  453e		       85 2a		      sta	HMOVE	;+3 3
   6767  4540
   6768  4540
   6769  4540				  -	      ifconst	legacy
   6770  4540				  -	      if	legacy < 100
   6771  4540				  -	      ldx	#4
   6772  4540				  -adjustloop2
   6773  4540				  -	      lda	player0x,x
   6774  4540				  -	      clc
   6775  4540				  -	      adc	#14	;?
   6776  4540				  -	      sta	player0x,x
   6777  4540				  -	      dex
   6778  4540				  -	      bpl	adjustloop2
   6779  4540				  -	      endif
   6780  4540					      endif
   6781  4540
   6782  4540
   6783  4540
   6784  4540
   6785  4540							;set score pointers
   6786  4540		       a7 95		      lax	score+2
   6787  4542		       20 73 f5 	      jsr	scorepointerset
   6788  4545		       84 9b		      sty	scorepointers+5
   6789  4547		       86 98		      stx	scorepointers+2
   6790  4549		       a7 94		      lax	score+1
   6791  454b		       20 73 f5 	      jsr	scorepointerset
   6792  454e		       84 9a		      sty	scorepointers+4
   6793  4550		       86 97		      stx	scorepointers+1
   6794  4552		       a7 93		      lax	score
   6795  4554		       20 73 f5 	      jsr	scorepointerset
   6796  4557		       84 99		      sty	scorepointers+3
   6797  4559		       86 96		      stx	scorepointers
   6798  455b
   6799  455b				   vblk
   6800  455b							; run possible vblank bB code
   6801  455b				  -	      ifconst	vblank_bB_code
   6802  455b				  -	      jsr	vblank_bB_code
   6803  455b					      endif
   6804  455b				   vblk2
   6805  455b		       ad 84 02 	      LDA	INTIM
   6806  455e		       30 fb		      bmi	vblk2
   6807  4560		       4c 00 f1 	      jmp	kernel
   6808  4563
   6809  4563
   6810  4563		       80 70 60 50*	      .byte.b	$80,$70,$60,$50,$40,$30,$20,$10,$00
   6811  456c		       f0 e0 d0 c0*	      .byte.b	$F0,$E0,$D0,$C0,$B0,$A0,$90
   6812  4573				   repostable
   6813  4573
   6814  4573				   scorepointerset
   6815  4573		       29 0f		      and	#$0F
   6816  4575		       0a		      asl
   6817  4576		       0a		      asl
   6818  4577		       0a		      asl
   6819  4578		       69 71		      adc	#<scoretable
   6820  457a		       a8		      tay
   6821  457b		       8a		      txa
   6822  457c							; and #$F0
   6823  457c							; lsr
   6824  457c		       4b f0		      asr	#$F0
   6825  457e		       69 71		      adc	#<scoretable
   6826  4580		       aa		      tax
   6827  4581		       60		      rts
   6828  4582							;bB.asm
   6829  4582							; bB.asm file is split here
   6830  4582				   .
   6831  4582							; 
   6832  4582
   6833  4582				   .L0561		;  asm
   6834  4582
------- FILE text12/text12a.asm LEVEL 2 PASS 3
      0  4582					      include	"text12/text12a.asm"
      1  4582				  -	      ifconst	SpriteGfxIndex
      2  4582				  -TextDataPtr =	SpriteGfxIndex
      3  4582					      else
      4  4582		       00 f6	   TextDataPtr =	stack1
      5  4582					      endif
      6  4582		       00 f5	   TextColor  =	statusbarlength
      7  4582		       00 01	   noscore    =	1
      8  4582					      ifconst	fontstyle
      9  4582				  -	      ifconst	SQUISH
     10  4582				  -	      if	fontstyle == SQUISH
     11  4582				  -scorecount =	4
     12  4582				  -	      endif
     13  4582					      endif
     14  4582					      endif
     15  4582
     16  4582				  -	      ifnconst	scorecount
     17  4582				  -scorecount =	7
     18  4582					      endif
     19  4582
     20  4582				  -	      ifnconst	textbkcolor
     21  4582				  -textbkcolor =	0
     22  4582					      endif
     23  4582
     24  4582
     25  4582
     26  4582				   minikernel
     27  4582
     28  4582		       85 02		      sta	WSYNC	; 3	 (0)
     29  4584					      ifconst	scorebkcolor
     30  4584					      ifnconst	noscoretxt
     31  4584		       a9 08		      lda	#scorebkcolor
     32  4586		       85 09		      sta	COLUBK
     33  4588					      endif
     34  4588					      endif
     35  4588		       a2 00		      ldx	#0	; 2	 (2)
     36  458a		       86 1b		      stx	GRP0	; 3	 (5)
     37  458c		       86 1c		      stx	GRP1	; 3	 (8)
     38  458e		       a0 d0		      ldy	#$D0	; 2	 (10)
     39  4590		       84 20		      sty	HMP0	; 3	 (13)
     40  4592		       a5 97		      lda	scorepointers+1
     41  4594		       85 9c		      sta	temp1
     42  4596		       a5 99		      lda	scorepointers+3
     43  4598		       85 9e		      sta	temp3
     44  459a		       a5 9b		      lda	scorepointers+5
     45  459c		       85 a0		      sta	temp5
     46  459e		       ba		      tsx
     47  459f		       86 ee		      stx	temp7
     48  45a1		       a0 01		      ldy	#1
     49  45a3		       84 25		      sty	VDELP0
     50  45a5		       84 26		      sty	VDELP1
     51  45a7		       a5 a3		      lda	scorecolor
     52  45a9
     53  45a9		       85 02		      sta	WSYNC	; 3	 (0)
     54  45ab					      ifnconst	noscoretxt
      0  45ab					      sleep	3	; 3	 (3)
      1  45ab				   .CYCLES    SET	3
      2  45ab
      3  45ab				  -	      IF	.CYCLES < 2
      4  45ab				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  45ab				  -	      ERR
      6  45ab					      ENDIF
      7  45ab
      8  45ab					      IF	.CYCLES & 1
      9  45ab					      IFNCONST	NO_ILLEGAL_OPCODES
     10  45ab		       04 00		      nop	0
     11  45ad				  -	      ELSE
     12  45ad				  -	      bit	VSYNC
     13  45ad					      ENDIF
     14  45ad				   .CYCLES    SET	.CYCLES - 3
     15  45ad					      ENDIF
     16  45ad
     17  45ad				  -	      REPEAT	.CYCLES / 2
     18  45ad				  -	      nop
     19  45ad					      REPEND
     56  45ad					      endif
     57  45ad		       85 06		      sta	COLUP0	; 3	 (6)
     58  45af		       85 07		      sta	COLUP1	; 3	 (9)
     59  45b1				  -	      ifconst	scorefade
     60  45b1				  -	      STA	stack2	; 3	 (12)
     61  45b1				  -	      sleep	3	; 3	 (15)
     62  45b1					      else
     63  45b1					      ifconst	pfscore
     64  45b1		       a5 f4		      lda	pfscorecolor	; 3	 (12)
     65  45b3		       85 08		      sta	COLUPF	; 3	 (15)
     66  45b5				  -	      else
     67  45b5				  -	      sleep	6
     68  45b5					      endif
     69  45b5					      endif
     70  45b5		       a9 03		      lda	#3	; 2	 (17)
     71  45b7		       85 04		      sta	NUSIZ0	; 3	 (20)
     72  45b9		       85 05		      sta	NUSIZ1	; 3	 (23*)
     73  45bb
     74  45bb		       a9 ff		      lda	#>scoretable	; 2	 (25)
     75  45bd		       85 97		      sta	scorepointers+1	; 3	 (28)
     76  45bf		       85 99		      sta	scorepointers+3	; 3	 (31)
     77  45c1		       85 9b		      sta	scorepointers+5	; 3	 (34)
     78  45c3		       85 9d		      sta	temp2	; 3	 (37)
     79  45c5		       85 9f		      sta	temp4	; 3	 (40)
     80  45c7		       85 10		      sta	RESP0	; 3	 (43)
     81  45c9		       85 11		      sta	RESP1	; 3	 (46)
     82  45cb		       85 a1		      sta	temp6	; 3	 (49)
     83  45cd		       a0 e0		      ldy	#$E0	; 2	 (51)
     84  45cf		       84 21		      sty	HMP1	; 3	 (54)
     85  45d1		       a0 07		      ldy	#scorecount	; 2	 (56)
     86  45d3		       b1 96		      lda	(scorepointers),y	; 5	 (61)
     87  45d5		       85 1b		      sta	GRP0	; 3	 (64)
     88  45d7					      ifconst	pfscore
     89  45d7		       a5 f2		      lda	pfscore1	; 3	 (67)
     90  45d9		       85 0e		      sta	PF1	; 3	 (70)
     91  45db				  -	      else
     92  45db				  -	      sleep	6	; 6	 (70)
     93  45db					      endif
     94  45db		       85 2a		      sta	HMOVE	; 3	 (73)
     95  45dd				   posthmove
     96  45dd					      ifnconst	noscoretxt
     97  45dd		       4c 09 f6 	      jmp	begintextscore	; 3	(76/0)
     98  45e0
     99  45e0
    100  45e0					      if	>. != >[.+score_loop_height]
    101  4600		       00 00 00 00*	      align	256
    102  4600					      endif
    103  4600
    104  4600				   textscoreloop
    105  4600		       b1 96		      lda	(scorepointers),y	; 5	 (66)
    106  4602		       85 1b		      sta	GRP0	; 3	 (69)
    107  4604					      ifconst	pfscore
    108  4604		       ad f2 00 	      lda.w	pfscore1	; 4	 (73)
    109  4607		       85 0e		      sta	PF1	; 3	 (76/0)
    110  4609				  -	      else
    111  4609				  -	      ifconst	scorefade
    112  4609				  -	      sleep	2	; 2	 (71)
    113  4609				  -	      dec	stack2	; 5	 (76/0)
    114  4609				  -	      else
    115  4609				  -	      sleep	7	; 7	 (76/0)
    116  4609				  -	      endif
    117  4609					      endif
    118  4609							; cycle 0
    119  4609				   begintextscore
    120  4609		       b1 9e		      lda	(scorepointers+$8),y	; 5	 (5)
    121  460b		       85 1c		      sta	GRP1	; 3	 (8)
    122  460d		       b1 9c		      lda	(scorepointers+$6),y	; 5	 (13)
    123  460f		       85 1b		      sta	GRP0	; 3	 (16)
    124  4611		       b3 98		      lax	(scorepointers+$2),y	; 5	 (21)
    125  4613		       9a		      txs		; 2	 (23*)
    126  4614		       b3 9a		      lax	(scorepointers+$4),y	; 5	 (28)
    127  4616				  -	      ifconst	scorefade
    128  4616				  -	      lda	stack2	; 3	 (31)
    129  4616					      else
      0  4616					      sleep	3	; 3	 (31)
      1  4616				   .CYCLES    SET	3
      2  4616
      3  4616				  -	      IF	.CYCLES < 2
      4  4616				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  4616				  -	      ERR
      6  4616					      ENDIF
      7  4616
      8  4616					      IF	.CYCLES & 1
      9  4616					      IFNCONST	NO_ILLEGAL_OPCODES
     10  4616		       04 00		      nop	0
     11  4618				  -	      ELSE
     12  4618				  -	      bit	VSYNC
     13  4618					      ENDIF
     14  4618				   .CYCLES    SET	.CYCLES - 3
     15  4618					      ENDIF
     16  4618
     17  4618				  -	      REPEAT	.CYCLES / 2
     18  4618				  -	      nop
     19  4618					      REPEND
    131  4618					      endif
    132  4618
    133  4618					      ifconst	pfscore
    134  4618		       a5 f3		      lda	pfscore2	; 3	 (34)
    135  461a		       85 0e		      sta	PF1	; 3	 (37)
    136  461c				  -	      else
    137  461c				  -	      ifconst	scorefade
    138  461c				  -	      sta	COLUP0	; 3	 (34)
    139  461c				  -	      sta	COLUP1	; 3	 (37)
    140  461c				  -	      else
    141  461c				  -	      sleep	6	; 6	 (37)
    142  461c				  -	      endif
    143  461c					      endif
    144  461c
    145  461c		       b1 a0		      lda	(scorepointers+$A),y	; 5	 (42)
    146  461e		       86 1c		      stx	GRP1	; 3	 (45)
    147  4620		       ba		      tsx		; 2	 (47)
    148  4621		       86 1b		      stx	GRP0	; 3	 (50)
    149  4623		       85 1c		      sta	GRP1	; 3	 (53)
    150  4625		       84 1b		      sty	GRP0	; 3	 (56)
    151  4627		       88		      dey		; 2	 (58)
    152  4628		       10 d6		      bpl	textscoreloop	; 3	 (61)
    153  462a					      endif
    154  462a
    155  462a		       00 2a	   score_loop_height =	* - textscoreloop
    156  462a
    157  462a		       a6 ee		      ldx	temp7	; 63
    158  462c		       9a		      txs		; 65
    159  462d		       a0 00		      ldy	#0	; 2	 (67)
    160  462f		       84 0e		      sty	PF1	; 3	 (70)
    161  4631		       84 1b		      sty	GRP0	; 3	 (73)
    162  4633		       84 1c		      sty	GRP1	; 3	 (76/0)
    163  4635		       84 1b		      sty	GRP0	; 3	 (3)
    164  4637		       a9 08		      lda	#textbkcolor
    165  4639		       85 09		      sta	COLUBK	; 3	 (6)
    166  463b
    167  463b				  -	      ifconst	extendedtxt
    168  463b				  -	      sty	stack2	; 3	 (9)
    169  463b				  -	      sty	temp7	; 3	 (12)
    170  463b				  -	      lax	TextIndex	; 3	 (15)
    171  463b				  -	      asl		; 2	 (17)
    172  463b				  -	      rol	stack2	; 5	 (22)
    173  463b				  -	      asl		; 2	 (24*)
    174  463b				  -	      rol	stack2	; 5	 (29)
    175  463b				  -	      asl		; 2	 (31)
    176  463b				  -	      rol	stack2	; 5	 (36)
    177  463b				  -	      sta	stack1	; 3	 (39)
    178  463b				  -	      txa		; 2	 (41)
    179  463b				  -	      asl		; 2	 (43)
    180  463b				  -	      rol	temp7	; 5	 (48)
    181  463b				  -	      asl		; 2	 (50)
    182  463b				  -	      rol	temp7	; 5	 (55)
    183  463b				  -	      clc		; 2	 (57)
    184  463b				  -	      adc	stack1	; 3	 (60)
    185  463b				  -	      sta	temp1	; 3	 (63)
    186  463b				  -	      lda	stack2	; 3	 (66)
    187  463b				  -	      adc	temp7	; 3	 (69) ; use existing carry from last operation
    188  463b					      endif
    189  463b
    190  463b				  -	      ifconst	extendedtxt
    191  463b				  -	      adc	#>text_strings	; carry already clear
    192  463b					      else
    193  463b		       a9 fb		      lda	#>text_strings
    194  463d					      endif
    195  463d		       85 f7		      sta	TextDataPtr+1
    196  463f		       a9 02		      lda	#<text_strings
    197  4641		       85 f6		      sta	TextDataPtr
    198  4643
    199  4643				  -	      ifconst	textbank
    200  4643				  -	      sta	temp7
    201  4643				  -	      lda	#>(textkernel-1)
    202  4643				  -	      pha
    203  4643				  -	      lda	#<(textkernel-1)
    204  4643				  -	      pha
    205  4643				  -	      lda	temp7
    206  4643				  -	      pha		; *** save A
    207  4643				  -	      txa
    208  4643				  -	      pha		; *** save X
    209  4643				  -	      ldx	#textbank
    210  4643				  -	      jmp	BS_jsr
    211  4643					      else
    212  4643		       4c 47 f6 	      jmp	textkernel
    213  4646					      endif
    214  4646
    215  4646				   posttextkernel
    216  4646
    217  4646		       60		      rts
------- FILE d:\Firmaplus\Firmaplus_intern\Atari\PlusROM\Projekte-batariBasic\CaveApocalypse\C.A.V.E. Apocalypse.bas.asm
   6836  4647
------- FILE text12/text12b.asm LEVEL 2 PASS 3
      0  4647					      include	"text12/text12b.asm"
      1  4647					      ifconst	bs_mask
      2  4647				  -	      ifconst	FASTFETCH	; using DPC+
      3  4647				  -KERNELBANK =	1
      4  4647					      else
      5  4647		       00 04	   KERNELBANK =	(bs_mask + 1)
      6  4647					      endif
      7  4647					      endif
      8  4647
      9  4647
     10  4647				   textkernel
     11  4647		       a5 f5		      lda	TextColor
     12  4649		       85 06		      sta	COLUP0
     13  464b		       85 07		      sta	COLUP1
     14  464d		       a9 0b		      lda	#11
     15  464f		       aa		      tax
     16  4650		       18		      clc
     17  4651				  -	      ifconst	extendedtxt
     18  4651				  -	      adc	temp1
     19  4651					      else
     20  4651		       65 b0		      adc	TextIndex
     21  4653					      endif
     22  4653		       a8		      tay
     23  4654				   TextPointersLoop
     24  4654		       b1 f6		      lda	(TextDataPtr),y
     25  4656		       95 96		      sta	scorepointers,x
     26  4658		       88		      dey
     27  4659		       ca		      dex
     28  465a		       10 f8		      bpl	TextPointersLoop
     29  465c
     30  465c		       a6 96		      ldx	scorepointers+0
     31  465e		       bd 00 f9 	      lda	left_text,x
     32  4661		       a6 97		      ldx	scorepointers+1
     33  4663		       1d 00 fa 	      ora	right_text,x
     34  4666		       a0 00		      ldy	#0
     35  4668
     36  4668				   firstbreak
     37  4668							; Text line 1 / 5
     38  4668
     39  4668							;line 1
     40  4668		       85 02		      sta	WSYNC	; 3	 (0)
     41  466a		       a0 08		      ldy	#textbkcolor	; 2	 (2)
     42  466c		       84 06		      sty	COLUP0	; 3	 (5)
     43  466e		       84 07		      sty	COLUP1	; 3	 (8)
     44  4670		       85 1b		      sta	GRP0	; 3	 (11)
     45  4672
     46  4672		       a6 98		      ldx	scorepointers+2	; 3	 (14)
     47  4674		       bd 00 f9 	      lda	left_text,x	; 4	 (18)
     48  4677		       a6 99		      ldx	scorepointers+3	; 3	 (21)
     49  4679		       1d 00 fa 	      ora	right_text,x	; 4	 (25*)
     50  467c		       85 1c		      sta	GRP1	; 3	 (28)
     51  467e
     52  467e		       a6 9a		      ldx	scorepointers+4	; 3	 (31)
     53  4680		       bd 00 f9 	      lda	left_text,x	; 4	 (35)
     54  4683		       a6 9b		      ldx	scorepointers+5	; 3	 (38)
     55  4685		       1d 00 fa 	      ora	right_text,x	; 4	 (42)
     56  4688		       85 1b		      sta	GRP0	; 3	 (45)
     57  468a
     58  468a		       a6 9c		      ldx	scorepointers+6	; 3	 (48) 3 in A
     59  468c		       bd 00 f9 	      lda	left_text,x	; 4	 (52)
     60  468f		       a6 9d		      ldx	scorepointers+7	; 3	 (55)
     61  4691		       1d 00 fa 	      ora	right_text,x	; 4	 (59)
     62  4694
     63  4694		       a4 f5		      ldy	TextColor	; 3	 (62)
     64  4696		       84 07		      sty	COLUP1	; 3	 (65)
     65  4698
     66  4698							;line 2
     67  4698		       85 02		      sta	WSYNC	; 3	 (0)
     68  469a		       84 06		      sty	COLUP0	; 3	 (3)
     69  469c		       a8		      tay		; 2	 (5) 3 in Y
     70  469d
     71  469d		       a6 9e		      ldx	scorepointers+8	; 3	 (8) 4
     72  469f		       bd 00 f9 	      lda	left_text,x	; 4	 (12)
     73  46a2		       a6 9f		      ldx	scorepointers+9	; 3	 (15)
     74  46a4		       1d 00 fa 	      ora	right_text,x	; 4	 (19)
     75  46a7		       85 f6		      sta	stack1	; 3	 (22)
     76  46a9
     77  46a9		       a6 a0		      ldx	scorepointers+10	; 3	 (25*) 5 in A
     78  46ab		       bd 00 f9 	      lda	left_text,x	; 4	 (29)
     79  46ae		       a6 a1		      ldx	scorepointers+11	; 3	 (32)
     80  46b0		       1d 00 fa 	      ora	right_text,x	; 4	 (36)
     81  46b3
     82  46b3		       a6 f6		      ldx	stack1	; 3	 (39) 4 in X
     83  46b5					      ifnconst	noscoretxt
      0  46b5					      sleep	5	; 7	 (46)
      1  46b5				   .CYCLES    SET	5
      2  46b5
      3  46b5				  -	      IF	.CYCLES < 2
      4  46b5				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  46b5				  -	      ERR
      6  46b5					      ENDIF
      7  46b5
      8  46b5					      IF	.CYCLES & 1
      9  46b5					      IFNCONST	NO_ILLEGAL_OPCODES
     10  46b5		       04 00		      nop	0
     11  46b7				  -	      ELSE
     12  46b7				  -	      bit	VSYNC
     13  46b7					      ENDIF
     14  46b7				   .CYCLES    SET	.CYCLES - 3
     15  46b7					      ENDIF
     16  46b7
     17  46b7					      REPEAT	.CYCLES / 2
     18  46b7		       ea		      nop
     19  46b8					      REPEND
     85  46b8				  -	      else
     86  46b8				  -	      sleep	2
     87  46b8					      endif
     88  46b8		       84 1c		      sty	GRP1	; 3	 (49) 3 -> [GRP1] ; 2 -> GRP0
     89  46ba		       86 1b		      stx	GRP0	; 3	 (52) 4 -> [GRP0] ; 3 -> GRP1
     90  46bc		       85 1c		      sta	GRP1	; 3	 (55) 5 -> [GRP1] ; 4 -> GRP0
     91  46be		       85 1b		      sta	GRP0	; 3	 (58) 5 -> GRP1
     92  46c0
     93  46c0		       a0 02		      ldy	#2	; 2	 (60)
     94  46c2		       a6 96		      ldx	scorepointers+0	; 3	 (63)
     95  46c4		       bd 01 f9 	      lda	left_text+1,x	; 4	 (67)
     96  46c7		       a6 97		      ldx	scorepointers+1	; 3	 (70)
     97  46c9		       1d 01 fa 	      ora	right_text+1,x	; 4	 (74)
     98  46cc							;    sleep 4
     99  46cc
    100  46cc							; Text line 2 / 5
    101  46cc				   endl1
    102  46cc							;line 1
    103  46cc		       85 02		      sta	WSYNC	; 3	 (0)
    104  46ce		       a0 08		      ldy	#textbkcolor	; 2	 (2)
    105  46d0		       84 06		      sty	COLUP0	; 3	 (5)
    106  46d2		       84 07		      sty	COLUP1	; 3	 (8)
    107  46d4		       85 1b		      sta	GRP0	; 3	 (11)
    108  46d6
    109  46d6		       a6 98		      ldx	scorepointers+2	; 3	 (9)
    110  46d8		       bd 01 f9 	      lda	left_text+1,x	; 4	 (13)
    111  46db		       a6 99		      ldx	scorepointers+3	; 3	 (16)
    112  46dd		       1d 01 fa 	      ora	right_text+1,x	; 4	 (20)
    113  46e0		       85 1c		      sta	GRP1	; 3	 (23*)
    114  46e2
    115  46e2		       a6 9a		      ldx	scorepointers+4	; 3	 (26)
    116  46e4		       bd 01 f9 	      lda	left_text+1,x	; 4	 (30)
    117  46e7		       a6 9b		      ldx	scorepointers+5	; 3	 (33)
    118  46e9		       1d 01 fa 	      ora	right_text+1,x	; 4	 (37)
    119  46ec		       85 1b		      sta	GRP0	; 3	 (40)
    120  46ee
    121  46ee		       a6 9c		      ldx	scorepointers+6	; 3	 (43) 3 in A
    122  46f0		       bd 01 f9 	      lda	left_text+1,x	; 4	 (47)
    123  46f3		       a6 9d		      ldx	scorepointers+7	; 3	 (50)
    124  46f5		       1d 01 fa 	      ora	right_text+1,x	; 4	 (54)
    125  46f8
    126  46f8		       a4 f5		      ldy	TextColor	; 2	 (56)
    127  46fa		       84 07		      sty	COLUP1	; 3	 (59)
    128  46fc
    129  46fc							;line 2
    130  46fc		       85 02		      sta	WSYNC	; 3	 (0)
    131  46fe		       84 06		      sty	COLUP0	; 3	 (3)
    132  4700		       a8		      tay		; 2	 (5) 3 in Y
    133  4701
    134  4701		       a6 9e		      ldx	scorepointers+8	; 3	 (8) 4
    135  4703		       bd 01 f9 	      lda	left_text+1,x	; 4	 (12)
    136  4706		       a6 9f		      ldx	scorepointers+9	; 3	 (15)
    137  4708		       1d 01 fa 	      ora	right_text+1,x	; 4	 (19)
    138  470b		       85 f6		      sta	stack1	; 3	 (22)
    139  470d
    140  470d		       a6 a0		      ldx	scorepointers+10	; 3	 (25*) 5 in A
    141  470f		       bd 01 f9 	      lda	left_text+1,x	; 4	 (29)
    142  4712		       a6 a1		      ldx	scorepointers+11	; 3	 (32)
    143  4714		       1d 01 fa 	      ora	right_text+1,x	; 4	 (36)
    144  4717
    145  4717		       a6 f6		      ldx	stack1	; 3	 (39) 4 in X
    146  4719					      ifnconst	noscoretxt
      0  4719					      sleep	5	; 7	 (46)
      1  4719				   .CYCLES    SET	5
      2  4719
      3  4719				  -	      IF	.CYCLES < 2
      4  4719				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  4719				  -	      ERR
      6  4719					      ENDIF
      7  4719
      8  4719					      IF	.CYCLES & 1
      9  4719					      IFNCONST	NO_ILLEGAL_OPCODES
     10  4719		       04 00		      nop	0
     11  471b				  -	      ELSE
     12  471b				  -	      bit	VSYNC
     13  471b					      ENDIF
     14  471b				   .CYCLES    SET	.CYCLES - 3
     15  471b					      ENDIF
     16  471b
     17  471b					      REPEAT	.CYCLES / 2
     18  471b		       ea		      nop
     19  471c					      REPEND
    148  471c				  -	      else
    149  471c				  -	      sleep	2
    150  471c					      endif
    151  471c		       84 1c		      sty	GRP1	; 3	 (49) 3 -> [GRP1] ; 2 -> GRP0
    152  471e		       86 1b		      stx	GRP0	; 3	 (52) 4 -> [GRP0] ; 3 -> GRP1
    153  4720		       85 1c		      sta	GRP1	; 3	 (55) 5 -> [GRP1] ; 4 -> GRP0
    154  4722		       85 1b		      sta	GRP0	; 3	 (58) 5 -> GRP1
    155  4724
    156  4724		       a0 02		      ldy	#2	; 2	 (56)
    157  4726		       a6 96		      ldx	scorepointers+0	; 3	 (59)
    158  4728		       bd 02 f9 	      lda	left_text+2,x	; 4	 (63)
    159  472b		       a6 97		      ldx	scorepointers+1	; 3	 (66)
    160  472d		       1d 02 fa 	      ora	right_text+2,x	; 4	 (70)
    161  4730							;    sleep 4
    162  4730
    163  4730							; Text line 3 / 5
    164  4730				   endl2
    165  4730							;line 1
    166  4730		       85 02		      sta	WSYNC	; 3	 (0)
    167  4732		       a0 08		      ldy	#textbkcolor	; 2	 (2)
    168  4734		       84 06		      sty	COLUP0	; 3	 (5)
    169  4736		       84 07		      sty	COLUP1	; 3	 (8)
    170  4738		       85 1b		      sta	GRP0	; 3	 (11)
    171  473a
    172  473a		       a6 98		      ldx	scorepointers+2	; 3	 (9)
    173  473c		       bd 02 f9 	      lda	left_text+2,x	; 4	 (13)
    174  473f		       a6 99		      ldx	scorepointers+3	; 3	 (16)
    175  4741		       1d 02 fa 	      ora	right_text+2,x	; 4	 (20)
    176  4744		       85 1c		      sta	GRP1	; 3	 (23*)
    177  4746
    178  4746		       a6 9a		      ldx	scorepointers+4	; 3	 (26)
    179  4748		       bd 02 f9 	      lda	left_text+2,x	; 4	 (30)
    180  474b		       a6 9b		      ldx	scorepointers+5	; 3	 (33)
    181  474d		       1d 02 fa 	      ora	right_text+2,x	; 4	 (37)
    182  4750		       85 1b		      sta	GRP0	; 3	 (40)
    183  4752
    184  4752		       a6 9c		      ldx	scorepointers+6	; 3	 (43) 3 in A
    185  4754		       bd 02 f9 	      lda	left_text+2,x	; 4	 (47)
    186  4757		       a6 9d		      ldx	scorepointers+7	; 3	 (50)
    187  4759		       1d 02 fa 	      ora	right_text+2,x	; 4	 (54)
    188  475c
    189  475c		       a4 f5		      ldy	TextColor	; 2	 (56)
    190  475e		       84 07		      sty	COLUP1	; 3	 (59)
    191  4760
    192  4760							;line 2
    193  4760		       85 02		      sta	WSYNC	; 3	 (0)
    194  4762		       84 06		      sty	COLUP0	; 3	 (3)
    195  4764		       a8		      tay		; 2	 (5) 3 in Y
    196  4765
    197  4765		       a6 9e		      ldx	scorepointers+8	; 3	 (8) 4
    198  4767		       bd 02 f9 	      lda	left_text+2,x	; 4	 (12)
    199  476a		       a6 9f		      ldx	scorepointers+9	; 3	 (15)
    200  476c		       1d 02 fa 	      ora	right_text+2,x	; 4	 (19)
    201  476f		       85 f6		      sta	stack1	; 3	 (22)
    202  4771
    203  4771		       a6 a0		      ldx	scorepointers+10	; 3	 (25*) 5 in A
    204  4773		       bd 02 f9 	      lda	left_text+2,x	; 4	 (29)
    205  4776		       a6 a1		      ldx	scorepointers+11	; 3	 (32)
    206  4778		       1d 02 fa 	      ora	right_text+2,x	; 4	 (36)
    207  477b
    208  477b		       a6 f6		      ldx	stack1	; 3	 (39) 4 in X
    209  477d					      ifnconst	noscoretxt
      0  477d					      sleep	5	; 7	 (46)
      1  477d				   .CYCLES    SET	5
      2  477d
      3  477d				  -	      IF	.CYCLES < 2
      4  477d				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  477d				  -	      ERR
      6  477d					      ENDIF
      7  477d
      8  477d					      IF	.CYCLES & 1
      9  477d					      IFNCONST	NO_ILLEGAL_OPCODES
     10  477d		       04 00		      nop	0
     11  477f				  -	      ELSE
     12  477f				  -	      bit	VSYNC
     13  477f					      ENDIF
     14  477f				   .CYCLES    SET	.CYCLES - 3
     15  477f					      ENDIF
     16  477f
     17  477f					      REPEAT	.CYCLES / 2
     18  477f		       ea		      nop
     19  4780					      REPEND
    211  4780				  -	      else
    212  4780				  -	      sleep	2
    213  4780					      endif
    214  4780		       84 1c		      sty	GRP1	; 3	 (45) 3 -> [GRP1] ; 2 -> GRP0
    215  4782		       86 1b		      stx	GRP0	; 3	 (48) 4 -> [GRP0] ; 3 -> GRP1
    216  4784		       85 1c		      sta	GRP1	; 3	 (51) 5 -> [GRP1] ; 4 -> GRP0
    217  4786		       85 1b		      sta	GRP0	; 3	 (54) 5 -> GRP1
    218  4788
    219  4788		       a0 02		      ldy	#2	; 2	 (56)
    220  478a		       a6 96		      ldx	scorepointers+0	; 3	 (59)
    221  478c		       bd 03 f9 	      lda	left_text+3,x	; 4	 (63)
    222  478f		       a6 97		      ldx	scorepointers+1	; 3	 (66)
    223  4791		       1d 03 fa 	      ora	right_text+3,x	; 4	 (70)
    224  4794							;    sleep 2
    225  4794
    226  4794							; Text line 4 / 5
    227  4794
    228  4794							;line 1
    229  4794		       85 02		      sta	WSYNC	; 3	 (0)
    230  4796		       a0 08		      ldy	#textbkcolor	; 2	 (2)
    231  4798		       84 06		      sty	COLUP0	; 3	 (5)
    232  479a		       84 07		      sty	COLUP1	; 3	 (8)
    233  479c		       85 1b		      sta	GRP0	; 3	 (11)
    234  479e
    235  479e		       a6 98		      ldx	scorepointers+2	; 3	 (9)
    236  47a0		       bd 03 f9 	      lda	left_text+3,x	; 4	 (13)
    237  47a3		       a6 99		      ldx	scorepointers+3	; 3	 (16)
    238  47a5		       1d 03 fa 	      ora	right_text+3,x	; 4	 (20)
    239  47a8		       85 1c		      sta	GRP1	; 3	 (23*)
    240  47aa
    241  47aa		       a6 9a		      ldx	scorepointers+4	; 3	 (26)
    242  47ac		       bd 03 f9 	      lda	left_text+3,x	; 4	 (30)
    243  47af		       a6 9b		      ldx	scorepointers+5	; 3	 (33)
    244  47b1		       1d 03 fa 	      ora	right_text+3,x	; 4	 (37)
    245  47b4		       85 1b		      sta	GRP0	; 3	 (40)
    246  47b6
    247  47b6		       a6 9c		      ldx	scorepointers+6	; 3	 (43) 3 in A
    248  47b8		       bd 03 f9 	      lda	left_text+3,x	; 4	 (47)
    249  47bb		       a6 9d		      ldx	scorepointers+7	; 3	 (50)
    250  47bd		       1d 03 fa 	      ora	right_text+3,x	; 4	 (54)
    251  47c0
    252  47c0		       a4 f5		      ldy	TextColor	; 2	 (56)
    253  47c2		       84 07		      sty	COLUP1	; 3	 (59)
    254  47c4
    255  47c4							;line 2
    256  47c4		       85 02		      sta	WSYNC	; 3	 (0)
    257  47c6		       84 06		      sty	COLUP0	; 3	 (3)
    258  47c8		       a8		      tay		; 2	 (5) 3 in Y
    259  47c9
    260  47c9		       a6 9e		      ldx	scorepointers+8	; 3	 (8) 4
    261  47cb		       bd 03 f9 	      lda	left_text+3,x	; 4	 (12)
    262  47ce		       a6 9f		      ldx	scorepointers+9	; 3	 (15)
    263  47d0		       1d 03 fa 	      ora	right_text+3,x	; 4	 (19)
    264  47d3		       85 f6		      sta	stack1	; 3	 (22)
    265  47d5
    266  47d5		       a6 a0		      ldx	scorepointers+10	; 3	 (25*) 5 in A
    267  47d7		       bd 03 f9 	      lda	left_text+3,x	; 4	 (29)
    268  47da		       a6 a1		      ldx	scorepointers+11	; 3	 (32)
    269  47dc		       1d 03 fa 	      ora	right_text+3,x	; 4	 (36)
    270  47df
    271  47df		       a6 f6		      ldx	stack1	; 3	 (39) 4 in X
    272  47e1					      ifnconst	noscoretxt
      0  47e1					      sleep	5	; 7	 (46)
      1  47e1				   .CYCLES    SET	5
      2  47e1
      3  47e1				  -	      IF	.CYCLES < 2
      4  47e1				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  47e1				  -	      ERR
      6  47e1					      ENDIF
      7  47e1
      8  47e1					      IF	.CYCLES & 1
      9  47e1					      IFNCONST	NO_ILLEGAL_OPCODES
     10  47e1		       04 00		      nop	0
     11  47e3				  -	      ELSE
     12  47e3				  -	      bit	VSYNC
     13  47e3					      ENDIF
     14  47e3				   .CYCLES    SET	.CYCLES - 3
     15  47e3					      ENDIF
     16  47e3
     17  47e3					      REPEAT	.CYCLES / 2
     18  47e3		       ea		      nop
     19  47e4					      REPEND
    274  47e4				  -	      else
    275  47e4				  -	      sleep	2
    276  47e4					      endif
    277  47e4		       84 1c		      sty	GRP1	; 3	 (45) 3 -> [GRP1] ; 2 -> GRP0
    278  47e6		       86 1b		      stx	GRP0	; 3	 (48) 4 -> [GRP0] ; 3 -> GRP1
    279  47e8		       85 1c		      sta	GRP1	; 3	 (51) 5 -> [GRP1] ; 4 -> GRP0
    280  47ea		       85 1b		      sta	GRP0	; 3	 (54) 5 -> GRP1
    281  47ec
    282  47ec		       a0 02		      ldy	#2	; 2	 (56)
    283  47ee		       a6 96		      ldx	scorepointers+0	; 3	 (59)
    284  47f0		       bd 04 f9 	      lda	left_text+4,x	; 4	 (63)
    285  47f3		       a6 97		      ldx	scorepointers+1	; 3	 (66)
    286  47f5		       1d 04 fa 	      ora	right_text+4,x	; 4	 (70)
    287  47f8							;    sleep 2
    288  47f8
    289  47f8							; Text line 5 / 5
    290  47f8
    291  47f8							;line 1
    292  47f8		       85 02		      sta	WSYNC	; 3	 (0)
    293  47fa		       a0 08		      ldy	#textbkcolor	; 2	 (2)
    294  47fc		       84 06		      sty	COLUP0	; 3	 (5)
    295  47fe		       84 07		      sty	COLUP1	; 3	 (8)
    296  4800		       85 1b		      sta	GRP0	; 3	 (11)
    297  4802
    298  4802		       a6 98		      ldx	scorepointers+2	; 3	 (9)
    299  4804		       bd 04 f9 	      lda	left_text+4,x	; 4	 (13)
    300  4807		       a6 99		      ldx	scorepointers+3	; 3	 (16)
    301  4809		       1d 04 fa 	      ora	right_text+4,x	; 4	 (20)
    302  480c		       85 1c		      sta	GRP1	; 3	 (23*)
    303  480e
    304  480e		       a6 9a		      ldx	scorepointers+4	; 3	 (26)
    305  4810		       bd 04 f9 	      lda	left_text+4,x	; 4	 (30)
    306  4813		       a6 9b		      ldx	scorepointers+5	; 3	 (33)
    307  4815		       1d 04 fa 	      ora	right_text+4,x	; 4	 (37)
    308  4818		       85 1b		      sta	GRP0	; 3	 (40)
    309  481a
    310  481a		       a6 9c		      ldx	scorepointers+6	; 3	 (43) 3 in A
    311  481c		       bd 04 f9 	      lda	left_text+4,x	; 4	 (47)
    312  481f		       a6 9d		      ldx	scorepointers+7	; 3	 (50)
    313  4821		       1d 04 fa 	      ora	right_text+4,x	; 4	 (54)
    314  4824
    315  4824		       a4 f5		      ldy	TextColor	; 2	 (56)
    316  4826		       84 07		      sty	COLUP1	; 3	 (59)
    317  4828
    318  4828							;line 2
    319  4828		       85 02		      sta	WSYNC	; 3	 (0)
    320  482a		       84 06		      sty	COLUP0	; 3	 (3)
    321  482c		       a8		      tay		; 2	 (5) 3 in Y
    322  482d
    323  482d		       a6 9e		      ldx	scorepointers+8	; 3	 (8) 4
    324  482f		       bd 04 f9 	      lda	left_text+4,x	; 4	 (12)
    325  4832		       a6 9f		      ldx	scorepointers+9	; 3	 (15)
    326  4834		       1d 04 fa 	      ora	right_text+4,x	; 4	 (19)
    327  4837		       85 f6		      sta	stack1	; 3	 (22)
    328  4839
    329  4839		       a6 a0		      ldx	scorepointers+10	; 3	 (25*) 5 in A
    330  483b		       bd 04 f9 	      lda	left_text+4,x	; 4	 (29)
    331  483e		       a6 a1		      ldx	scorepointers+11	; 3	 (32)
    332  4840		       1d 04 fa 	      ora	right_text+4,x	; 4	 (36)
    333  4843
    334  4843		       a6 f6		      ldx	stack1	; 3	 (39) 4 in X
    335  4845					      ifnconst	noscoretxt
      0  4845					      sleep	5	; 7	 (46)
      1  4845				   .CYCLES    SET	5
      2  4845
      3  4845				  -	      IF	.CYCLES < 2
      4  4845				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  4845				  -	      ERR
      6  4845					      ENDIF
      7  4845
      8  4845					      IF	.CYCLES & 1
      9  4845					      IFNCONST	NO_ILLEGAL_OPCODES
     10  4845		       04 00		      nop	0
     11  4847				  -	      ELSE
     12  4847				  -	      bit	VSYNC
     13  4847					      ENDIF
     14  4847				   .CYCLES    SET	.CYCLES - 3
     15  4847					      ENDIF
     16  4847
     17  4847					      REPEAT	.CYCLES / 2
     18  4847		       ea		      nop
     19  4848					      REPEND
    337  4848				  -	      else
    338  4848				  -	      sleep	2
    339  4848					      endif
    340  4848		       84 1c		      sty	GRP1	; 3	 (45) 3 -> [GRP1] ; 2 -> GRP0
    341  484a		       86 1b		      stx	GRP0	; 3	 (48) 4 -> [GRP0] ; 3 -> GRP1
    342  484c		       85 1c		      sta	GRP1	; 3	 (51) 5 -> [GRP1] ; 4 -> GRP0
    343  484e		       85 1b		      sta	GRP0	; 3	 (54) 5 -> GRP1
    344  4850
    345  4850		       a9 00		      lda	#0
    346  4852		       85 1b		      sta	GRP0
    347  4854		       85 1c		      sta	GRP1
    348  4856		       85 1b		      sta	GRP0
    349  4858		       85 04		      sta	NUSIZ0
    350  485a		       85 05		      sta	NUSIZ1
    351  485c		       85 25		      sta	VDELP0
    352  485e		       85 26		      sta	VDELP1
    353  4860
    354  4860				  -	      ifconst	textbank
    355  4860				  -	      sta	temp7
    356  4860				  -	      lda	#>(posttextkernel-1)
    357  4860				  -	      pha
    358  4860				  -	      lda	#<(posttextkernel-1)
    359  4860				  -	      pha
    360  4860				  -	      lda	temp7
    361  4860				  -	      pha		; *** save A
    362  4860				  -	      txa
    363  4860				  -	      pha		; *** save X
    364  4860				  -	      ldx	#KERNELBANK
    365  4860				  -	      jmp	BS_jsr
    366  4860					      else
    367  4860		       4c 46 f6 	      jmp	posttextkernel
    368  4863					      endif
    369  4863
    370  4863					      if	>. != >[.+text_data_height]
    371  4900		       00 00 00 00*	      align	256
    372  4900					      endif
    373  4900
    374  4900				   text_data
    375  4900
    376  4900				   left_text
    377  4900
    378  4900		       00 00	   __A	      =	* - text_data	; baseline (0)
    379  4900		       20		      .byte.b	%00100000
    380  4901		       50		      .byte.b	%01010000
    381  4902		       70		      .byte.b	%01110000
    382  4903		       50		      .byte.b	%01010000
    383  4904		       50		      .byte.b	%01010000
    384  4905
    385  4905		       00 05	   __B	      =	* - text_data
    386  4905		       60		      .byte.b	%01100000
    387  4906		       50		      .byte.b	%01010000
    388  4907		       60		      .byte.b	%01100000
    389  4908		       50		      .byte.b	%01010000
    390  4909		       60		      .byte.b	%01100000
    391  490a
    392  490a		       00 0a	   __C	      =	* - text_data
    393  490a		       30		      .byte.b	%00110000
    394  490b		       40		      .byte.b	%01000000
    395  490c		       40		      .byte.b	%01000000
    396  490d		       40		      .byte.b	%01000000
    397  490e		       30		      .byte.b	%00110000
    398  490f
    399  490f		       00 0f	   __D	      =	* - text_data
    400  490f		       60		      .byte.b	%01100000
    401  4910		       50		      .byte.b	%01010000
    402  4911		       50		      .byte.b	%01010000
    403  4912		       50		      .byte.b	%01010000
    404  4913		       60		      .byte.b	%01100000
    405  4914
    406  4914		       00 14	   __E	      =	* - text_data
    407  4914		       70		      .byte.b	%01110000
    408  4915		       40		      .byte.b	%01000000
    409  4916		       60		      .byte.b	%01100000
    410  4917		       40		      .byte.b	%01000000
    411  4918		       70		      .byte.b	%01110000
    412  4919
    413  4919		       00 19	   __F	      =	* - text_data
    414  4919		       70		      .byte.b	%01110000
    415  491a		       40		      .byte.b	%01000000
    416  491b		       60		      .byte.b	%01100000
    417  491c		       40		      .byte.b	%01000000
    418  491d		       40		      .byte.b	%01000000
    419  491e
    420  491e		       00 1e	   __G	      =	* - text_data
    421  491e		       30		      .byte.b	%00110000
    422  491f		       40		      .byte.b	%01000000
    423  4920		       50		      .byte.b	%01010000
    424  4921		       50		      .byte.b	%01010000
    425  4922		       20		      .byte.b	%00100000
    426  4923
    427  4923		       00 23	   __H	      =	* - text_data
    428  4923		       50		      .byte.b	%01010000
    429  4924		       50		      .byte.b	%01010000
    430  4925		       70		      .byte.b	%01110000
    431  4926		       50		      .byte.b	%01010000
    432  4927		       50		      .byte.b	%01010000
    433  4928
    434  4928		       00 28	   __I	      =	* - text_data
    435  4928		       70		      .byte.b	%01110000
    436  4929		       20		      .byte.b	%00100000
    437  492a		       20		      .byte.b	%00100000
    438  492b		       20		      .byte.b	%00100000
    439  492c		       70		      .byte.b	%01110000
    440  492d
    441  492d		       00 2d	   __J	      =	* - text_data
    442  492d		       10		      .byte.b	%00010000
    443  492e		       10		      .byte.b	%00010000
    444  492f		       10		      .byte.b	%00010000
    445  4930		       50		      .byte.b	%01010000
    446  4931		       20		      .byte.b	%00100000
    447  4932
    448  4932		       00 32	   __K	      =	* - text_data
    449  4932		       50		      .byte.b	%01010000
    450  4933		       50		      .byte.b	%01010000
    451  4934		       60		      .byte.b	%01100000
    452  4935		       50		      .byte.b	%01010000
    453  4936		       50		      .byte.b	%01010000
    454  4937
    455  4937		       00 37	   __L	      =	* - text_data
    456  4937		       40		      .byte.b	%01000000
    457  4938		       40		      .byte.b	%01000000
    458  4939		       40		      .byte.b	%01000000
    459  493a		       40		      .byte.b	%01000000
    460  493b		       70		      .byte.b	%01110000
    461  493c
    462  493c		       00 3c	   __M	      =	* - text_data
    463  493c		       50		      .byte.b	%01010000
    464  493d		       70		      .byte.b	%01110000
    465  493e		       70		      .byte.b	%01110000
    466  493f		       50		      .byte.b	%01010000
    467  4940		       50		      .byte.b	%01010000
    468  4941
    469  4941		       00 41	   __N	      =	* - text_data
    470  4941		       60		      .byte.b	%01100000
    471  4942		       50		      .byte.b	%01010000
    472  4943		       50		      .byte.b	%01010000
    473  4944		       50		      .byte.b	%01010000
    474  4945		       50		      .byte.b	%01010000
    475  4946
    476  4946		       00 46	   __O	      =	* - text_data
    477  4946		       20		      .byte.b	%00100000
    478  4947		       50		      .byte.b	%01010000
    479  4948		       50		      .byte.b	%01010000
    480  4949		       50		      .byte.b	%01010000
    481  494a		       20		      .byte.b	%00100000
    482  494b
    483  494b		       00 4b	   __P	      =	* - text_data
    484  494b		       60		      .byte.b	%01100000
    485  494c		       50		      .byte.b	%01010000
    486  494d		       60		      .byte.b	%01100000
    487  494e		       40		      .byte.b	%01000000
    488  494f		       40		      .byte.b	%01000000
    489  4950
    490  4950		       00 50	   __Q	      =	* - text_data
    491  4950		       20		      .byte.b	%00100000
    492  4951		       50		      .byte.b	%01010000
    493  4952		       50		      .byte.b	%01010000
    494  4953		       50		      .byte.b	%01010000
    495  4954		       30		      .byte.b	%00110000
    496  4955
    497  4955		       00 55	   __R	      =	* - text_data
    498  4955		       60		      .byte.b	%01100000
    499  4956		       50		      .byte.b	%01010000
    500  4957		       60		      .byte.b	%01100000
    501  4958		       50		      .byte.b	%01010000
    502  4959		       50		      .byte.b	%01010000
    503  495a
    504  495a		       00 5a	   __S	      =	* - text_data
    505  495a		       30		      .byte.b	%00110000
    506  495b		       40		      .byte.b	%01000000
    507  495c		       20		      .byte.b	%00100000
    508  495d		       10		      .byte.b	%00010000
    509  495e		       60		      .byte.b	%01100000
    510  495f
    511  495f		       00 5f	   __T	      =	* - text_data
    512  495f		       70		      .byte.b	%01110000
    513  4960		       20		      .byte.b	%00100000
    514  4961		       20		      .byte.b	%00100000
    515  4962		       20		      .byte.b	%00100000
    516  4963		       20		      .byte.b	%00100000
    517  4964
    518  4964		       00 64	   __U	      =	* - text_data
    519  4964		       50		      .byte.b	%01010000
    520  4965		       50		      .byte.b	%01010000
    521  4966		       50		      .byte.b	%01010000
    522  4967		       50		      .byte.b	%01010000
    523  4968		       70		      .byte.b	%01110000
    524  4969
    525  4969		       00 69	   __V	      =	* - text_data
    526  4969		       50		      .byte.b	%01010000
    527  496a		       50		      .byte.b	%01010000
    528  496b		       50		      .byte.b	%01010000
    529  496c		       50		      .byte.b	%01010000
    530  496d		       20		      .byte.b	%00100000
    531  496e
    532  496e		       00 6e	   __W	      =	* - text_data
    533  496e		       50		      .byte.b	%01010000
    534  496f		       50		      .byte.b	%01010000
    535  4970		       70		      .byte.b	%01110000
    536  4971		       70		      .byte.b	%01110000
    537  4972		       50		      .byte.b	%01010000
    538  4973
    539  4973		       00 73	   __X	      =	* - text_data
    540  4973		       50		      .byte.b	%01010000
    541  4974		       50		      .byte.b	%01010000
    542  4975		       20		      .byte.b	%00100000
    543  4976		       50		      .byte.b	%01010000
    544  4977		       50		      .byte.b	%01010000
    545  4978
    546  4978		       00 78	   __Y	      =	* - text_data
    547  4978		       50		      .byte.b	%01010000
    548  4979		       50		      .byte.b	%01010000
    549  497a		       20		      .byte.b	%00100000
    550  497b		       20		      .byte.b	%00100000
    551  497c		       20		      .byte.b	%00100000
    552  497d
    553  497d		       00 7d	   __Z	      =	* - text_data
    554  497d		       70		      .byte.b	%01110000
    555  497e		       10		      .byte.b	%00010000
    556  497f		       20		      .byte.b	%00100000
    557  4980		       40		      .byte.b	%01000000
    558  4981		       70		      .byte.b	%01110000
    559  4982
    560  4982		       00 82	   __0	      =	* - text_data
    561  4982		       70		      .byte.b	%01110000
    562  4983		       50		      .byte.b	%01010000
    563  4984		       50		      .byte.b	%01010000
    564  4985		       50		      .byte.b	%01010000
    565  4986		       70		      .byte.b	%01110000
    566  4987
    567  4987		       00 87	   __1	      =	* - text_data
    568  4987		       20		      .byte.b	%00100000
    569  4988		       60		      .byte.b	%01100000
    570  4989		       20		      .byte.b	%00100000
    571  498a		       20		      .byte.b	%00100000
    572  498b		       70		      .byte.b	%01110000
    573  498c
    574  498c		       00 8c	   __2	      =	* - text_data
    575  498c		       60		      .byte.b	%01100000
    576  498d		       10		      .byte.b	%00010000
    577  498e		       20		      .byte.b	%00100000
    578  498f		       40		      .byte.b	%01000000
    579  4990		       70		      .byte.b	%01110000
    580  4991
    581  4991		       00 91	   __3	      =	* - text_data
    582  4991		       60		      .byte.b	%01100000
    583  4992		       10		      .byte.b	%00010000
    584  4993		       20		      .byte.b	%00100000
    585  4994		       10		      .byte.b	%00010000
    586  4995		       60		      .byte.b	%01100000
    587  4996
    588  4996		       00 96	   __4	      =	* - text_data
    589  4996		       50		      .byte.b	%01010000
    590  4997		       50		      .byte.b	%01010000
    591  4998		       70		      .byte.b	%01110000
    592  4999		       10		      .byte.b	%00010000
    593  499a		       10		      .byte.b	%00010000
    594  499b
    595  499b		       00 9b	   __5	      =	* - text_data
    596  499b		       70		      .byte.b	%01110000
    597  499c		       40		      .byte.b	%01000000
    598  499d		       60		      .byte.b	%01100000
    599  499e		       10		      .byte.b	%00010000
    600  499f		       60		      .byte.b	%01100000
    601  49a0
    602  49a0		       00 a0	   __6	      =	* - text_data
    603  49a0		       30		      .byte.b	%00110000
    604  49a1		       40		      .byte.b	%01000000
    605  49a2		       60		      .byte.b	%01100000
    606  49a3		       50		      .byte.b	%01010000
    607  49a4		       20		      .byte.b	%00100000
    608  49a5
    609  49a5		       00 a5	   __7	      =	* - text_data
    610  49a5		       70		      .byte.b	%01110000
    611  49a6		       10		      .byte.b	%00010000
    612  49a7		       20		      .byte.b	%00100000
    613  49a8		       40		      .byte.b	%01000000
    614  49a9		       40		      .byte.b	%01000000
    615  49aa
    616  49aa		       00 aa	   __8	      =	* - text_data
    617  49aa		       20		      .byte.b	%00100000
    618  49ab		       50		      .byte.b	%01010000
    619  49ac		       20		      .byte.b	%00100000
    620  49ad		       50		      .byte.b	%01010000
    621  49ae		       20		      .byte.b	%00100000
    622  49af
    623  49af		       00 af	   __9	      =	* - text_data
    624  49af		       20		      .byte.b	%00100000
    625  49b0		       50		      .byte.b	%01010000
    626  49b1		       30		      .byte.b	%00110000
    627  49b2		       10		      .byte.b	%00010000
    628  49b3		       60		      .byte.b	%01100000
    629  49b4
    630  49b4		       00 b4	   _sp	      =	* - text_data
    631  49b4		       00		      .byte.b	%00000000
    632  49b5		       00		      .byte.b	%00000000
    633  49b6		       00		      .byte.b	%00000000
    634  49b7		       00		      .byte.b	%00000000
    635  49b8		       00		      .byte.b	%00000000
    636  49b9
    637  49b9		       00 b9	   _pd	      =	* - text_data
    638  49b9		       00		      .byte.b	%00000000
    639  49ba		       00		      .byte.b	%00000000
    640  49bb		       00		      .byte.b	%00000000
    641  49bc		       00		      .byte.b	%00000000
    642  49bd		       20		      .byte.b	%00100000
    643  49be
    644  49be		       00 be	   _qu	      =	* - text_data
    645  49be		       60		      .byte.b	%01100000
    646  49bf		       10		      .byte.b	%00010000
    647  49c0		       20		      .byte.b	%00100000
    648  49c1		       00		      .byte.b	%00000000
    649  49c2		       20		      .byte.b	%00100000
    650  49c3
    651  49c3		       00 c3	   _ex	      =	* - text_data
    652  49c3		       20		      .byte.b	%00100000
    653  49c4		       20		      .byte.b	%00100000
    654  49c5		       20		      .byte.b	%00100000
    655  49c6		       00		      .byte.b	%00000000
    656  49c7		       20		      .byte.b	%00100000
    657  49c8
    658  49c8		       00 c8	   _cm	      =	* - text_data
    659  49c8		       00		      .byte.b	%00000000
    660  49c9		       00		      .byte.b	%00000000
    661  49ca		       00		      .byte.b	%00000000
    662  49cb		       20		      .byte.b	%00100000
    663  49cc		       40		      .byte.b	%01000000
    664  49cd
    665  49cd		       00 cd	   _hy	      =	* - text_data
    666  49cd		       00		      .byte.b	%00000000
    667  49ce		       00		      .byte.b	%00000000
    668  49cf		       70		      .byte.b	%01110000
    669  49d0		       00		      .byte.b	%00000000
    670  49d1		       00		      .byte.b	%00000000
    671  49d2
    672  49d2		       00 d2	   _pl	      =	* - text_data
    673  49d2		       20		      .byte.b	%00100000
    674  49d3		       20		      .byte.b	%00100000
    675  49d4		       70		      .byte.b	%01110000
    676  49d5		       20		      .byte.b	%00100000
    677  49d6		       20		      .byte.b	%00100000
    678  49d7
    679  49d7		       00 d7	   _ap	      =	* - text_data
    680  49d7		       20		      .byte.b	%00100000
    681  49d8		       40		      .byte.b	%01000000
    682  49d9		       00		      .byte.b	%00000000
    683  49da		       00		      .byte.b	%00000000
    684  49db		       00		      .byte.b	%00000000
    685  49dc
    686  49dc		       00 dc	   _lp	      =	* - text_data
    687  49dc		       20		      .byte.b	%00100000
    688  49dd		       40		      .byte.b	%01000000
    689  49de		       40		      .byte.b	%01000000
    690  49df		       40		      .byte.b	%01000000
    691  49e0		       20		      .byte.b	%00100000
    692  49e1
    693  49e1		       00 e1	   _rp	      =	* - text_data
    694  49e1		       20		      .byte.b	%00100000
    695  49e2		       10		      .byte.b	%00010000
    696  49e3		       10		      .byte.b	%00010000
    697  49e4		       10		      .byte.b	%00010000
    698  49e5		       20		      .byte.b	%00100000
    699  49e6
    700  49e6		       00 e6	   _co	      =	* - text_data
    701  49e6		       00		      .byte.b	%00000000
    702  49e7		       40		      .byte.b	%01000000
    703  49e8		       00		      .byte.b	%00000000
    704  49e9		       40		      .byte.b	%01000000
    705  49ea		       00		      .byte.b	%00000000
    706  49eb
    707  49eb		       00 eb	   _sl	      =	* - text_data
    708  49eb		       10		      .byte.b	%00010000
    709  49ec		       10		      .byte.b	%00010000
    710  49ed		       20		      .byte.b	%00100000
    711  49ee		       40		      .byte.b	%01000000
    712  49ef		       40		      .byte.b	%01000000
    713  49f0
    714  49f0		       00 f0	   _eq	      =	* - text_data
    715  49f0		       00		      .byte.b	%00000000
    716  49f1		       70		      .byte.b	%01110000
    717  49f2		       00		      .byte.b	%00000000
    718  49f3		       70		      .byte.b	%01110000
    719  49f4		       00		      .byte.b	%00000000
    720  49f5
    721  49f5		       00 f5	   _qt	      =	* - text_data
    722  49f5		       50		      .byte.b	%01010000
    723  49f6		       50		      .byte.b	%01010000
    724  49f7		       00		      .byte.b	%00000000
    725  49f8		       00		      .byte.b	%00000000
    726  49f9		       00		      .byte.b	%00000000
    727  49fa
    728  49fa		       00 fa	   _po	      =	* - text_data
    729  49fa				   _ht
    730  49fa		       50		      .byte.b	%01010000
    731  49fb		       f0		      .byte.b	%11110000
    732  49fc		       50		      .byte.b	%01010000
    733  49fd		       f0		      .byte.b	%11110000
    734  49fe		       50		      .byte.b	%01010000
    735  49ff
    736  49ff
    737  49ff		       00 ff	   text_data_height =	* - text_data
    738  49ff
    739  49ff					      if	>. != >[.+text_data_height]
    740  4a00		       00		      align	256
    741  4a00					      endif
    742  4a00
    743  4a00				   right_text
    744  4a00
    745  4a00							; A
    746  4a00		       02		      .byte.b	%00000010
    747  4a01		       05		      .byte.b	%00000101
    748  4a02		       07		      .byte.b	%00000111
    749  4a03		       05		      .byte.b	%00000101
    750  4a04		       05		      .byte.b	%00000101
    751  4a05
    752  4a05
    753  4a05							; B
    754  4a05		       06		      .byte.b	%00000110
    755  4a06		       05		      .byte.b	%00000101
    756  4a07		       06		      .byte.b	%00000110
    757  4a08		       05		      .byte.b	%00000101
    758  4a09		       06		      .byte.b	%00000110
    759  4a0a
    760  4a0a							; C
    761  4a0a		       03		      .byte.b	%00000011
    762  4a0b		       04		      .byte.b	%00000100
    763  4a0c		       04		      .byte.b	%00000100
    764  4a0d		       04		      .byte.b	%00000100
    765  4a0e		       03		      .byte.b	%00000011
    766  4a0f
    767  4a0f							; D
    768  4a0f		       06		      .byte.b	%00000110
    769  4a10		       05		      .byte.b	%00000101
    770  4a11		       05		      .byte.b	%00000101
    771  4a12		       05		      .byte.b	%00000101
    772  4a13		       06		      .byte.b	%00000110
    773  4a14
    774  4a14							; E
    775  4a14		       07		      .byte.b	%00000111
    776  4a15		       04		      .byte.b	%00000100
    777  4a16		       06		      .byte.b	%00000110
    778  4a17		       04		      .byte.b	%00000100
    779  4a18		       07		      .byte.b	%00000111
    780  4a19
    781  4a19							; F
    782  4a19		       07		      .byte.b	%00000111
    783  4a1a		       04		      .byte.b	%00000100
    784  4a1b		       06		      .byte.b	%00000110
    785  4a1c		       04		      .byte.b	%00000100
    786  4a1d		       04		      .byte.b	%00000100
    787  4a1e
    788  4a1e							; G
    789  4a1e		       03		      .byte.b	%00000011
    790  4a1f		       04		      .byte.b	%00000100
    791  4a20		       05		      .byte.b	%00000101
    792  4a21		       05		      .byte.b	%00000101
    793  4a22		       02		      .byte.b	%00000010
    794  4a23
    795  4a23							; H
    796  4a23		       05		      .byte.b	%00000101
    797  4a24		       05		      .byte.b	%00000101
    798  4a25		       07		      .byte.b	%00000111
    799  4a26		       05		      .byte.b	%00000101
    800  4a27		       05		      .byte.b	%00000101
    801  4a28
    802  4a28							; I
    803  4a28		       07		      .byte.b	%00000111
    804  4a29		       02		      .byte.b	%00000010
    805  4a2a		       02		      .byte.b	%00000010
    806  4a2b		       02		      .byte.b	%00000010
    807  4a2c		       07		      .byte.b	%00000111
    808  4a2d
    809  4a2d							; J
    810  4a2d		       01		      .byte.b	%00000001
    811  4a2e		       01		      .byte.b	%00000001
    812  4a2f		       01		      .byte.b	%00000001
    813  4a30		       05		      .byte.b	%00000101
    814  4a31		       02		      .byte.b	%00000010
    815  4a32
    816  4a32							; K
    817  4a32		       05		      .byte.b	%00000101
    818  4a33		       05		      .byte.b	%00000101
    819  4a34		       06		      .byte.b	%00000110
    820  4a35		       05		      .byte.b	%00000101
    821  4a36		       05		      .byte.b	%00000101
    822  4a37
    823  4a37							; L
    824  4a37		       04		      .byte.b	%00000100
    825  4a38		       04		      .byte.b	%00000100
    826  4a39		       04		      .byte.b	%00000100
    827  4a3a		       04		      .byte.b	%00000100
    828  4a3b		       07		      .byte.b	%00000111
    829  4a3c
    830  4a3c							; M
    831  4a3c		       05		      .byte.b	%00000101
    832  4a3d		       07		      .byte.b	%00000111
    833  4a3e		       07		      .byte.b	%00000111
    834  4a3f		       05		      .byte.b	%00000101
    835  4a40		       05		      .byte.b	%00000101
    836  4a41
    837  4a41							; N
    838  4a41		       06		      .byte.b	%00000110
    839  4a42		       05		      .byte.b	%00000101
    840  4a43		       05		      .byte.b	%00000101
    841  4a44		       05		      .byte.b	%00000101
    842  4a45		       05		      .byte.b	%00000101
    843  4a46
    844  4a46							; O
    845  4a46		       02		      .byte.b	%00000010
    846  4a47		       05		      .byte.b	%00000101
    847  4a48		       05		      .byte.b	%00000101
    848  4a49		       05		      .byte.b	%00000101
    849  4a4a		       02		      .byte.b	%00000010
    850  4a4b
    851  4a4b							; P
    852  4a4b		       06		      .byte.b	%00000110
    853  4a4c		       05		      .byte.b	%00000101
    854  4a4d		       06		      .byte.b	%00000110
    855  4a4e		       04		      .byte.b	%00000100
    856  4a4f		       04		      .byte.b	%00000100
    857  4a50
    858  4a50							; Q
    859  4a50		       02		      .byte.b	%00000010
    860  4a51		       05		      .byte.b	%00000101
    861  4a52		       05		      .byte.b	%00000101
    862  4a53		       05		      .byte.b	%00000101
    863  4a54		       03		      .byte.b	%00000011
    864  4a55
    865  4a55							; R
    866  4a55		       06		      .byte.b	%00000110
    867  4a56		       05		      .byte.b	%00000101
    868  4a57		       06		      .byte.b	%00000110
    869  4a58		       05		      .byte.b	%00000101
    870  4a59		       05		      .byte.b	%00000101
    871  4a5a
    872  4a5a							; S
    873  4a5a		       03		      .byte.b	%00000011
    874  4a5b		       04		      .byte.b	%00000100
    875  4a5c		       02		      .byte.b	%00000010
    876  4a5d		       01		      .byte.b	%00000001
    877  4a5e		       06		      .byte.b	%00000110
    878  4a5f
    879  4a5f							; T
    880  4a5f		       07		      .byte.b	%00000111
    881  4a60		       02		      .byte.b	%00000010
    882  4a61		       02		      .byte.b	%00000010
    883  4a62		       02		      .byte.b	%00000010
    884  4a63		       02		      .byte.b	%00000010
    885  4a64
    886  4a64							; U
    887  4a64		       05		      .byte.b	%00000101
    888  4a65		       05		      .byte.b	%00000101
    889  4a66		       05		      .byte.b	%00000101
    890  4a67		       05		      .byte.b	%00000101
    891  4a68		       07		      .byte.b	%00000111
    892  4a69
    893  4a69							; V
    894  4a69		       05		      .byte.b	%00000101
    895  4a6a		       05		      .byte.b	%00000101
    896  4a6b		       05		      .byte.b	%00000101
    897  4a6c		       05		      .byte.b	%00000101
    898  4a6d		       02		      .byte.b	%00000010
    899  4a6e
    900  4a6e							; W
    901  4a6e		       05		      .byte.b	%00000101
    902  4a6f		       05		      .byte.b	%00000101
    903  4a70		       07		      .byte.b	%00000111
    904  4a71		       07		      .byte.b	%00000111
    905  4a72		       05		      .byte.b	%00000101
    906  4a73
    907  4a73							; X
    908  4a73		       05		      .byte.b	%00000101
    909  4a74		       05		      .byte.b	%00000101
    910  4a75		       02		      .byte.b	%00000010
    911  4a76		       05		      .byte.b	%00000101
    912  4a77		       05		      .byte.b	%00000101
    913  4a78
    914  4a78							; Y
    915  4a78		       05		      .byte.b	%00000101
    916  4a79		       05		      .byte.b	%00000101
    917  4a7a		       02		      .byte.b	%00000010
    918  4a7b		       02		      .byte.b	%00000010
    919  4a7c		       02		      .byte.b	%00000010
    920  4a7d
    921  4a7d							; Z
    922  4a7d		       07		      .byte.b	%00000111
    923  4a7e		       01		      .byte.b	%00000001
    924  4a7f		       02		      .byte.b	%00000010
    925  4a80		       04		      .byte.b	%00000100
    926  4a81		       07		      .byte.b	%00000111
    927  4a82
    928  4a82							; 0
    929  4a82		       07		      .byte.b	%00000111
    930  4a83		       05		      .byte.b	%00000101
    931  4a84		       05		      .byte.b	%00000101
    932  4a85		       05		      .byte.b	%00000101
    933  4a86		       07		      .byte.b	%00000111
    934  4a87
    935  4a87							; 1
    936  4a87		       02		      .byte.b	%00000010
    937  4a88		       06		      .byte.b	%00000110
    938  4a89		       02		      .byte.b	%00000010
    939  4a8a		       02		      .byte.b	%00000010
    940  4a8b		       07		      .byte.b	%00000111
    941  4a8c
    942  4a8c							; 2
    943  4a8c		       06		      .byte.b	%00000110
    944  4a8d		       01		      .byte.b	%00000001
    945  4a8e		       02		      .byte.b	%00000010
    946  4a8f		       04		      .byte.b	%00000100
    947  4a90		       07		      .byte.b	%00000111
    948  4a91
    949  4a91							; 3
    950  4a91		       06		      .byte.b	%00000110
    951  4a92		       01		      .byte.b	%00000001
    952  4a93		       02		      .byte.b	%00000010
    953  4a94		       01		      .byte.b	%00000001
    954  4a95		       06		      .byte.b	%00000110
    955  4a96
    956  4a96							; 4
    957  4a96		       05		      .byte.b	%00000101
    958  4a97		       05		      .byte.b	%00000101
    959  4a98		       07		      .byte.b	%00000111
    960  4a99		       01		      .byte.b	%00000001
    961  4a9a		       01		      .byte.b	%00000001
    962  4a9b
    963  4a9b							; 5
    964  4a9b		       07		      .byte.b	%00000111
    965  4a9c		       04		      .byte.b	%00000100
    966  4a9d		       06		      .byte.b	%00000110
    967  4a9e		       01		      .byte.b	%00000001
    968  4a9f		       06		      .byte.b	%00000110
    969  4aa0
    970  4aa0							; 6
    971  4aa0		       03		      .byte.b	%00000011
    972  4aa1		       04		      .byte.b	%00000100
    973  4aa2		       06		      .byte.b	%00000110
    974  4aa3		       05		      .byte.b	%00000101
    975  4aa4		       02		      .byte.b	%00000010
    976  4aa5
    977  4aa5							; 7
    978  4aa5		       07		      .byte.b	%00000111
    979  4aa6		       01		      .byte.b	%00000001
    980  4aa7		       02		      .byte.b	%00000010
    981  4aa8		       04		      .byte.b	%00000100
    982  4aa9		       04		      .byte.b	%00000100
    983  4aaa
    984  4aaa							; 8
    985  4aaa		       02		      .byte.b	%00000010
    986  4aab		       05		      .byte.b	%00000101
    987  4aac		       02		      .byte.b	%00000010
    988  4aad		       05		      .byte.b	%00000101
    989  4aae		       02		      .byte.b	%00000010
    990  4aaf
    991  4aaf							; 9
    992  4aaf		       02		      .byte.b	%00000010
    993  4ab0		       05		      .byte.b	%00000101
    994  4ab1		       03		      .byte.b	%00000011
    995  4ab2		       01		      .byte.b	%00000001
    996  4ab3		       06		      .byte.b	%00000110
    997  4ab4
    998  4ab4							; space
    999  4ab4		       00		      .byte.b	%00000000
   1000  4ab5		       00		      .byte.b	%00000000
   1001  4ab6		       00		      .byte.b	%00000000
   1002  4ab7		       00		      .byte.b	%00000000
   1003  4ab8		       00		      .byte.b	%00000000
   1004  4ab9
   1005  4ab9							; period
   1006  4ab9		       00		      .byte.b	%00000000
   1007  4aba		       00		      .byte.b	%00000000
   1008  4abb		       00		      .byte.b	%00000000
   1009  4abc		       00		      .byte.b	%00000000
   1010  4abd		       02		      .byte.b	%00000010
   1011  4abe
   1012  4abe							; question mark
   1013  4abe		       06		      .byte.b	%00000110
   1014  4abf		       01		      .byte.b	%00000001
   1015  4ac0		       02		      .byte.b	%00000010
   1016  4ac1		       00		      .byte.b	%00000000
   1017  4ac2		       02		      .byte.b	%00000010
   1018  4ac3
   1019  4ac3							; exclamation point
   1020  4ac3		       02		      .byte.b	%00000010
   1021  4ac4		       02		      .byte.b	%00000010
   1022  4ac5		       02		      .byte.b	%00000010
   1023  4ac6		       00		      .byte.b	%00000000
   1024  4ac7		       02		      .byte.b	%00000010
   1025  4ac8
   1026  4ac8							; comma
   1027  4ac8		       00		      .byte.b	%00000000
   1028  4ac9		       00		      .byte.b	%00000000
   1029  4aca		       00		      .byte.b	%00000000
   1030  4acb		       02		      .byte.b	%00000010
   1031  4acc		       04		      .byte.b	%00000100
   1032  4acd
   1033  4acd							; hyphen
   1034  4acd		       00		      .byte.b	%00000000
   1035  4ace		       00		      .byte.b	%00000000
   1036  4acf		       07		      .byte.b	%00000111
   1037  4ad0		       00		      .byte.b	%00000000
   1038  4ad1		       00		      .byte.b	%00000000
   1039  4ad2
   1040  4ad2							; plus
   1041  4ad2		       02		      .byte.b	%00000010
   1042  4ad3		       02		      .byte.b	%00000010
   1043  4ad4		       07		      .byte.b	%00000111
   1044  4ad5		       02		      .byte.b	%00000010
   1045  4ad6		       02		      .byte.b	%00000010
   1046  4ad7
   1047  4ad7							; apostrophe
   1048  4ad7		       02		      .byte.b	%00000010
   1049  4ad8		       04		      .byte.b	%00000100
   1050  4ad9		       00		      .byte.b	%00000000
   1051  4ada		       00		      .byte.b	%00000000
   1052  4adb		       00		      .byte.b	%00000000
   1053  4adc
   1054  4adc							; left parenthesis
   1055  4adc		       02		      .byte.b	%00000010
   1056  4add		       04		      .byte.b	%00000100
   1057  4ade		       04		      .byte.b	%00000100
   1058  4adf		       04		      .byte.b	%00000100
   1059  4ae0		       02		      .byte.b	%00000010
   1060  4ae1
   1061  4ae1							; right parenthesis
   1062  4ae1		       02		      .byte.b	%00000010
   1063  4ae2		       01		      .byte.b	%00000001
   1064  4ae3		       01		      .byte.b	%00000001
   1065  4ae4		       01		      .byte.b	%00000001
   1066  4ae5		       02		      .byte.b	%00000010
   1067  4ae6
   1068  4ae6							; colon
   1069  4ae6		       00		      .byte.b	%00000000
   1070  4ae7		       04		      .byte.b	%00000100
   1071  4ae8		       00		      .byte.b	%00000000
   1072  4ae9		       04		      .byte.b	%00000100
   1073  4aea		       00		      .byte.b	%00000000
   1074  4aeb
   1075  4aeb							;slash
   1076  4aeb		       01		      .byte.b	%00000001
   1077  4aec		       01		      .byte.b	%00000001
   1078  4aed		       02		      .byte.b	%00000010
   1079  4aee		       04		      .byte.b	%00000100
   1080  4aef		       04		      .byte.b	%00000100
   1081  4af0
   1082  4af0							; equal
   1083  4af0		       00		      .byte.b	%00000000
   1084  4af1		       07		      .byte.b	%00000111
   1085  4af2		       00		      .byte.b	%00000000
   1086  4af3		       07		      .byte.b	%00000111
   1087  4af4		       00		      .byte.b	%00000000
   1088  4af5
   1089  4af5							; quote
   1090  4af5		       05		      .byte.b	%00000101
   1091  4af6		       05		      .byte.b	%00000101
   1092  4af7		       00		      .byte.b	%00000000
   1093  4af8		       00		      .byte.b	%00000000
   1094  4af9		       00		      .byte.b	%00000000
   1095  4afa
   1096  4afa							; pound sign
   1097  4afa		       05		      .byte.b	%00000101
   1098  4afb		       0f		      .byte.b	%00001111
   1099  4afc		       05		      .byte.b	%00000101
   1100  4afd		       0f		      .byte.b	%00001111
   1101  4afe		       05		      .byte.b	%00000101
------- FILE d:\Firmaplus\Firmaplus_intern\Atari\PlusROM\Projekte-batariBasic\CaveApocalypse\C.A.V.E. Apocalypse.bas.asm
   6838  4aff
   6839  4aff				   .
   6840  4aff							; 
   6841  4aff
   6842  4aff				   .L0562		;  data text_strings
   6843  4aff
   6844  4aff		       4c fe fb 	      JMP	.skipL0562
   6845  4b02				   text_strings
   6846  4b02		       00 37 37 b4*	      .byte.b	__A, __L, __L, _sp, __M, __E, __N, _sp, __S, __A, __V, __E	; __R, __E, __S, __C, __U, __E, __D
   6847  4b0e
   6848  4b0e		       b4 8c b4 3c*	      .byte.b	_sp, __2, _sp, __M, __E, __N, _sp, __L, __E, __F, __T, _sp
   6849  4b1a
   6850  4b1a		       b4 96 b4 3c*	      .byte.b	_sp, __4, _sp, __M, __E, __N, _sp, __L, __E, __F, __T, _sp
   6851  4b26
   6852  4b26		       b4 a0 b4 3c*	      .byte.b	_sp, __6, _sp, __M, __E, __N, _sp, __L, __E, __F, __T, _sp
   6853  4b32
   6854  4b32		       b4 aa b4 3c*	      .byte.b	_sp, __8, _sp, __M, __E, __N, _sp, __L, __E, __F, __T, _sp
   6855  4b3e
   6856  4b3e		       87 82 b4 3c*	      .byte.b	__1, __0, _sp, __M, __E, __N, _sp, __L, __E, __F, __T, _sp
   6857  4b4a
   6858  4b4a		       87 8c b4 3c*	      .byte.b	__1, __2, _sp, __M, __E, __N, _sp, __L, __E, __F, __T, _sp
   6859  4b56
   6860  4b56		       87 96 b4 3c*	      .byte.b	__1, __4, _sp, __M, __E, __N, _sp, __L, __E, __F, __T, _sp
   6861  4b62
   6862  4b62		       87 a0 b4 3c*	      .byte.b	__1, __6, _sp, __M, __E, __N, _sp, __L, __E, __F, __T, _sp
   6863  4b6e
   6864  4b6e		       87 aa b4 3c*	      .byte.b	__1, __8, _sp, __M, __E, __N, _sp, __L, __E, __F, __T, _sp
   6865  4b7a
   6866  4b7a		       8c 82 b4 3c*	      .byte.b	__2, __0, _sp, __M, __E, __N, _sp, __L, __E, __F, __T, _sp
   6867  4b86
   6868  4b86		       8c 8c b4 3c*	      .byte.b	__2, __2, _sp, __M, __E, __N, _sp, __L, __E, __F, __T, _sp
   6869  4b92
   6870  4b92		       8c 96 b4 3c*	      .byte.b	__2, __4, _sp, __M, __E, __N, _sp, __L, __E, __F, __T, _sp
   6871  4b9e
   6872  4b9e		       8c a0 b4 3c*	      .byte.b	__2, __6, _sp, __M, __E, __N, _sp, __L, __E, __F, __T, _sp
   6873  4baa
   6874  4baa		       8c aa b4 3c*	      .byte.b	__2, __8, _sp, __M, __E, __N, _sp, __L, __E, __F, __T, _sp
   6875  4bb6
   6876  4bb6		       91 82 b4 3c*	      .byte.b	__3, __0, _sp, __M, __E, __N, _sp, __L, __E, __F, __T, _sp
   6877  4bc2
   6878  4bc2		       91 8c b4 3c*	      .byte.b	__3, __2, _sp, __M, __E, __N, _sp, __L, __E, __F, __T, _sp
   6879  4bce
   6880  4bce		       91 96 b4 3c*	      .byte.b	__3, __4, _sp, __M, __E, __N, _sp, __L, __E, __F, __T, _sp
   6881  4bda
   6882  4bda		       91 a0 b4 3c*	      .byte.b	__3, __6, _sp, __M, __E, __N, _sp, __L, __E, __F, __T, _sp
   6883  4be6
   6884  4be6		       91 aa b4 3c*	      .byte.b	__3, __8, _sp, __M, __E, __N, _sp, __L, __E, __F, __T, _sp
   6885  4bf2
   6886  4bf2		       96 82 b4 3c*	      .byte.b	__4, __0, _sp, __M, __E, __N, _sp, __L, __E, __F, __T, _sp
   6887  4bfe
   6888  4bfe				   .skipL0562
   6889  4bfe				   .
   6890  4bfe							; 
   6891  4bfe
   6892  4bfe				   .
   6893  4bfe							; 
   6894  4bfe
   6895  4bfe				   .
   6896  4bfe							; 
   6897  4bfe
   6898  4bfe				   .L0563		;  asm
   6899  4bfe
      0  4bfe					      SET_PLUSROM_API	"a.php", "ca.firmaplus.de"
      1  4bfe		       fb fe	   OLD_RORG   =	*
      2  4bfe					      REND
      3  4bfe				   PlusROM_API
      4  4bfe		       61 2e 70 68*	      .byte.b	"a.php", 0, "ca.firmaplus.de", 0
 Size of PlusROM API definition:  22
      5  4bfe					      ECHO	"Size of PlusROM API definition: ", [( * - PlusROM_API )]d
      6  4c14					      RORG	(OLD_RORG + ( * - PlusROM_API ))
   6901  4c14
   6902  4c14				  -	      if	(<*) > (<(*+7))
   6903  4c14				  -	      repeat	($100-<*)
   6904  4c14				  -	      .byte	0
   6905  4c14				  -	      repend
   6906  4c14					      endif
   6907  4c14				   playercolorL0279_1
   6908  4c14		       1e		      .byte.b	_1E
   6909  4c15		       82		      .byte.b	_82
   6910  4c16		       84		      .byte.b	_84
   6911  4c17		       46		      .byte.b	_46
   6912  4c18		       44		      .byte.b	_44
   6913  4c19		       42		      .byte.b	_42
   6914  4c1a		       12		      .byte.b	_12
   6915  4c1b		       08		      .byte.b	_08
   6916  4c1c				  -	      if	(<*) > (<(*+7))
   6917  4c1c				  -	      repeat	($100-<*)
   6918  4c1c				  -	      .byte	0
   6919  4c1c				  -	      repend
   6920  4c1c					      endif
   6921  4c1c				   player16then_1
   6922  4c1c		       1b		      .byte.b	%00011011
   6923  4c1d		       0e		      .byte.b	%00001110
   6924  4c1e		       1f		      .byte.b	%00011111
   6925  4c1f		       bd		      .byte.b	%10111101
   6926  4c20		       f9		      .byte.b	%11111001
   6927  4c21		       9e		      .byte.b	%10011110
   6928  4c22		       08		      .byte.b	%00001000
   6929  4c23		       7c		      .byte.b	%01111100
   6930  4c24				  -	      if	(<*) > (<(*+7))
   6931  4c24				  -	      repeat	($100-<*)
   6932  4c24				  -	      .byte	0
   6933  4c24				  -	      repend
   6934  4c24					      endif
   6935  4c24				   player17then_1
   6936  4c24		       1b		      .byte.b	%00011011
   6937  4c25		       0e		      .byte.b	%00001110
   6938  4c26		       1f		      .byte.b	%00011111
   6939  4c27		       bd		      .byte.b	%10111101
   6940  4c28		       f9		      .byte.b	%11111001
   6941  4c29		       9e		      .byte.b	%10011110
   6942  4c2a		       08		      .byte.b	%00001000
   6943  4c2b		       1f		      .byte.b	%00011111
   6944  4c2c				  -	      if	(<*) > (<(*+6))
   6945  4c2c				  -	      repeat	($100-<*)
   6946  4c2c				  -	      .byte	0
   6947  4c2c				  -	      repend
   6948  4c2c					      endif
   6949  4c2c				   player18then_0
   6950  4c2c		       55		      .byte.b	%01010101
   6951  4c2d		       aa		      .byte.b	%10101010
   6952  4c2e		       ff		      .byte.b	%11111111
   6953  4c2f		       3c		      .byte.b	%00111100
   6954  4c30		       18		      .byte.b	%00011000
   6955  4c31		       08		      .byte.b	%00001000
   6956  4c32		       04		      .byte.b	%00000100
   6957  4c33				  -	      if	(<*) > (<(*+6))
   6958  4c33				  -	      repeat	($100-<*)
   6959  4c33				  -	      .byte	0
   6960  4c33				  -	      repend
   6961  4c33					      endif
   6962  4c33				   player19then_0
   6963  4c33		       aa		      .byte.b	%10101010
   6964  4c34		       55		      .byte.b	%01010101
   6965  4c35		       ff		      .byte.b	%11111111
   6966  4c36		       3c		      .byte.b	%00111100
   6967  4c37		       18		      .byte.b	%00011000
   6968  4c38		       08		      .byte.b	%00001000
   6969  4c39		       04		      .byte.b	%00000100
   6970  4c3a				  -	      if	(<*) > (<(*+11))
   6971  4c3a				  -	      repeat	($100-<*)
   6972  4c3a				  -	      .byte	0
   6973  4c3a				  -	      repend
   6974  4c3a					      endif
   6975  4c3a				   playerL0322_0
   6976  4c3a		       a0		      .byte.b	%10100000
   6977  4c3b		       40		      .byte.b	%01000000
   6978  4c3c		       e0		      .byte.b	%11100000
   6979  4c3d		       a0		      .byte.b	%10100000
   6980  4c3e		       40		      .byte.b	%01000000
   6981  4c3f		       00		      .byte.b	%00000000
   6982  4c40		       00		      .byte.b	%00000000
   6983  4c41		       05		      .byte.b	%00000101
   6984  4c42		       02		      .byte.b	%00000010
   6985  4c43		       07		      .byte.b	%00000111
   6986  4c44		       05		      .byte.b	%00000101
   6987  4c45		       02		      .byte.b	%00000010
   6988  4c46				  -	      if	(<*) > (<(*+24))
   6989  4c46				  -	      repeat	($100-<*)
   6990  4c46				  -	      .byte	0
   6991  4c46				  -	      repend
   6992  4c46					      endif
   6993  4c46				   playerL0324_0
   6994  4c46		       3c		      .byte.b	%00111100
   6995  4c47		       20		      .byte.b	%00100000
   6996  4c48		       20		      .byte.b	%00100000
   6997  4c49		       20		      .byte.b	%00100000
   6998  4c4a		       20		      .byte.b	%00100000
   6999  4c4b		       00		      .byte.b	%00000000
   7000  4c4c		       3c		      .byte.b	%00111100
   7001  4c4d		       20		      .byte.b	%00100000
   7002  4c4e		       38		      .byte.b	%00111000
   7003  4c4f		       20		      .byte.b	%00100000
   7004  4c50		       3c		      .byte.b	%00111100
   7005  4c51		       00		      .byte.b	%00000000
   7006  4c52		       18		      .byte.b	%00011000
   7007  4c53		       24		      .byte.b	%00100100
   7008  4c54		       24		      .byte.b	%00100100
   7009  4c55		       24		      .byte.b	%00100100
   7010  4c56		       24		      .byte.b	%00100100
   7011  4c57		       00		      .byte.b	%00000000
   7012  4c58		       20		      .byte.b	%00100000
   7013  4c59		       20		      .byte.b	%00100000
   7014  4c5a		       38		      .byte.b	%00111000
   7015  4c5b		       20		      .byte.b	%00100000
   7016  4c5c		       bd		      .byte.b	%10111101
   7017  4c5d		       81		      .byte.b	%10000001
   7018  4c5e		       ff		      .byte.b	%11111111
   7019  4c5f				  -	      if	(<*) > (<(*+3))
   7020  4c5f				  -	      repeat	($100-<*)
   7021  4c5f				  -	      .byte	0
   7022  4c5f				  -	      repend
   7023  4c5f					      endif
   7024  4c5f				   player20then_0
   7025  4c5f		       a6		      .byte.b	%10100110
   7026  4c60		       42		      .byte.b	%01000010
   7027  4c61		       63		      .byte.b	%01100011
   7028  4c62		       42		      .byte.b	%01000010
   7029  4c63				  -	      if	(<*) > (<(*+3))
   7030  4c63				  -	      repeat	($100-<*)
   7031  4c63				  -	      .byte	0
   7032  4c63				  -	      repend
   7033  4c63					      endif
   7034  4c63				   player21then_0
   7035  4c63		       c5		      .byte.b	%11000101
   7036  4c64		       42		      .byte.b	%01000010
   7037  4c65		       63		      .byte.b	%01100011
   7038  4c66		       42		      .byte.b	%01000010
   7039  4c67					      if	ECHOFIRST
      778 bytes of ROM space left in bank 4
   7040  4c67					      echo	"    ",[(scoretable - *)]d , "bytes of ROM space left in bank 4")
   7041  4c67					      endif
   7042  4c67		       00 01	   ECHOFIRST  =	1
   7043  4c67
   7044  4c67
   7045  4c67							; Provided under the CC0 license. See the included LICENSE.txt for details.
   7046  4c67
   7047  4c67							; feel free to modify the score graphics - just keep each digit 8 high
   7048  4c67							; and keep the conditional compilation stuff intact
   7049  4c67				  -	      ifconst	ROM2k
   7050  4c67				  -	      ifconst	PlusROM_functions
   7051  4c67				  -	      ORG	$F7AC-16
   7052  4c67				  -	      else
   7053  4c67				  -	      ORG	$F7AC-8
   7054  4c67				  -	      endif
   7055  4c67					      else
   7056  4c67					      ifconst	bankswitch
   7057  4c67				  -	      if	bankswitch == 8
   7058  4c67				  -	      ORG	$2F94-bscode_length
   7059  4c67				  -	      RORG	$FF94-bscode_length
   7060  4c67					      endif
   7061  4c67					      if	bankswitch == 16
   7062  4f71					      ORG	$4F94-bscode_length
   7063  4f71					      RORG	$FF94-bscode_length
   7064  4f71					      endif
   7065  4f71				  -	      if	bankswitch == 32
   7066  4f71				  -	      ORG	$8F94-bscode_length
   7067  4f71				  -	      RORG	$FF94-bscode_length
   7068  4f71					      endif
   7069  4f71				  -	      if	bankswitch == 64
   7070  4f71				  -	      ORG	$10F80-bscode_length
   7071  4f71				  -	      RORG	$1FF80-bscode_length
   7072  4f71					      endif
   7073  4f71				  -	      else
   7074  4f71				  -	      ifconst	PlusROM_functions
   7075  4f71				  -	      ORG	$FF98
   7076  4f71				  -	      else
   7077  4f71				  -	      ORG	$FF9C
   7078  4f71				  -	      endif
   7079  4f71					      endif
   7080  4f71					      endif
   7081  4f71
   7082  4f71							; font equates
   7083  4f71		       00 01	   .21stcentury =	1
   7084  4f71		       00 02	   alarmclock =	2
   7085  4f71		       00 03	   handwritten =	3
   7086  4f71		       00 04	   interrupted =	4
   7087  4f71		       00 05	   retroputer =	5
   7088  4f71		       00 06	   whimsey    =	6
   7089  4f71		       00 07	   tiny       =	7
   7090  4f71		       00 08	   hex	      =	8
   7091  4f71
   7092  4f71				  -	      ifconst	font
   7093  4f71				  -	      if	font == hex
   7094  4f71				  -	      ORG	. - 48
   7095  4f71				  -	      endif
   7096  4f71					      endif
   7097  4f71
   7098  4f71				   scoretable
   7099  4f71
   7100  4f71				  -	      ifconst	font
   7101  4f71				  -	      if	font == .21stcentury
   7102  4f71				  -	      include	"score_graphics.asm.21stcentury"
   7103  4f71				  -	      endif
   7104  4f71				  -	      if	font == alarmclock
   7105  4f71				  -	      include	"score_graphics.asm.alarmclock"
   7106  4f71				  -	      endif
   7107  4f71				  -	      if	font == handwritten
   7108  4f71				  -	      include	"score_graphics.asm.handwritten"
   7109  4f71				  -	      endif
   7110  4f71				  -	      if	font == interrupted
   7111  4f71				  -	      include	"score_graphics.asm.interrupted"
   7112  4f71				  -	      endif
   7113  4f71				  -	      if	font == retroputer
   7114  4f71				  -	      include	"score_graphics.asm.retroputer"
   7115  4f71				  -	      endif
   7116  4f71				  -	      if	font == whimsey
   7117  4f71				  -	      include	"score_graphics.asm.whimsey"
   7118  4f71				  -	      endif
   7119  4f71				  -	      if	font == tiny
   7120  4f71				  -	      include	"score_graphics.asm.tiny"
   7121  4f71				  -	      endif
   7122  4f71				  -	      if	font == hex
   7123  4f71				  -	      include	"score_graphics.asm.hex"
   7124  4f71				  -	      endif
   7125  4f71					      else		; default font
   7126  4f71
   7127  4f71		       3c		      .byte.b	%00111100
   7128  4f72		       66		      .byte.b	%01100110
   7129  4f73		       66		      .byte.b	%01100110
   7130  4f74		       66		      .byte.b	%01100110
   7131  4f75		       66		      .byte.b	%01100110
   7132  4f76		       66		      .byte.b	%01100110
   7133  4f77		       66		      .byte.b	%01100110
   7134  4f78		       3c		      .byte.b	%00111100
   7135  4f79
   7136  4f79		       7e		      .byte.b	%01111110
   7137  4f7a		       18		      .byte.b	%00011000
   7138  4f7b		       18		      .byte.b	%00011000
   7139  4f7c		       18		      .byte.b	%00011000
   7140  4f7d		       18		      .byte.b	%00011000
   7141  4f7e		       38		      .byte.b	%00111000
   7142  4f7f		       18		      .byte.b	%00011000
   7143  4f80		       08		      .byte.b	%00001000
   7144  4f81
   7145  4f81		       7e		      .byte.b	%01111110
   7146  4f82		       60		      .byte.b	%01100000
   7147  4f83		       60		      .byte.b	%01100000
   7148  4f84		       3c		      .byte.b	%00111100
   7149  4f85		       06		      .byte.b	%00000110
   7150  4f86		       06		      .byte.b	%00000110
   7151  4f87		       46		      .byte.b	%01000110
   7152  4f88		       3c		      .byte.b	%00111100
   7153  4f89
   7154  4f89		       3c		      .byte.b	%00111100
   7155  4f8a		       46		      .byte.b	%01000110
   7156  4f8b		       06		      .byte.b	%00000110
   7157  4f8c		       06		      .byte.b	%00000110
   7158  4f8d		       1c		      .byte.b	%00011100
   7159  4f8e		       06		      .byte.b	%00000110
   7160  4f8f		       46		      .byte.b	%01000110
   7161  4f90		       3c		      .byte.b	%00111100
   7162  4f91
   7163  4f91		       0c		      .byte.b	%00001100
   7164  4f92		       0c		      .byte.b	%00001100
   7165  4f93		       7e		      .byte.b	%01111110
   7166  4f94		       4c		      .byte.b	%01001100
   7167  4f95		       4c		      .byte.b	%01001100
   7168  4f96		       2c		      .byte.b	%00101100
   7169  4f97		       1c		      .byte.b	%00011100
   7170  4f98		       0c		      .byte.b	%00001100
   7171  4f99
   7172  4f99		       3c		      .byte.b	%00111100
   7173  4f9a		       46		      .byte.b	%01000110
   7174  4f9b		       06		      .byte.b	%00000110
   7175  4f9c		       06		      .byte.b	%00000110
   7176  4f9d		       3c		      .byte.b	%00111100
   7177  4f9e		       60		      .byte.b	%01100000
   7178  4f9f		       60		      .byte.b	%01100000
   7179  4fa0		       7e		      .byte.b	%01111110
   7180  4fa1
   7181  4fa1		       3c		      .byte.b	%00111100
   7182  4fa2		       66		      .byte.b	%01100110
   7183  4fa3		       66		      .byte.b	%01100110
   7184  4fa4		       66		      .byte.b	%01100110
   7185  4fa5		       7c		      .byte.b	%01111100
   7186  4fa6		       60		      .byte.b	%01100000
   7187  4fa7		       62		      .byte.b	%01100010
   7188  4fa8		       3c		      .byte.b	%00111100
   7189  4fa9
   7190  4fa9		       30		      .byte.b	%00110000
   7191  4faa		       30		      .byte.b	%00110000
   7192  4fab		       30		      .byte.b	%00110000
   7193  4fac		       18		      .byte.b	%00011000
   7194  4fad		       0c		      .byte.b	%00001100
   7195  4fae		       06		      .byte.b	%00000110
   7196  4faf		       42		      .byte.b	%01000010
   7197  4fb0		       3e		      .byte.b	%00111110
   7198  4fb1
   7199  4fb1		       3c		      .byte.b	%00111100
   7200  4fb2		       66		      .byte.b	%01100110
   7201  4fb3		       66		      .byte.b	%01100110
   7202  4fb4		       66		      .byte.b	%01100110
   7203  4fb5		       3c		      .byte.b	%00111100
   7204  4fb6		       66		      .byte.b	%01100110
   7205  4fb7		       66		      .byte.b	%01100110
   7206  4fb8		       3c		      .byte.b	%00111100
   7207  4fb9
   7208  4fb9		       3c		      .byte.b	%00111100
   7209  4fba		       46		      .byte.b	%01000110
   7210  4fbb		       06		      .byte.b	%00000110
   7211  4fbc		       3e		      .byte.b	%00111110
   7212  4fbd		       66		      .byte.b	%01100110
   7213  4fbe		       66		      .byte.b	%01100110
   7214  4fbf		       66		      .byte.b	%01100110
   7215  4fc0		       3c		      .byte.b	%00111100
   7216  4fc1
   7217  4fc1					      ifnconst	DPC_kernel_options
   7218  4fc1
   7219  4fc1		       00		      .byte.b	%00000000
   7220  4fc2		       00		      .byte.b	%00000000
   7221  4fc3		       00		      .byte.b	%00000000
   7222  4fc4		       00		      .byte.b	%00000000
   7223  4fc5		       00		      .byte.b	%00000000
   7224  4fc6		       00		      .byte.b	%00000000
   7225  4fc7		       00		      .byte.b	%00000000
   7226  4fc8		       00		      .byte.b	%00000000
   7227  4fc9
   7228  4fc9					      endif
   7229  4fc9
   7230  4fc9					      endif
   7231  4fc9
   7232  4fc9				  -	      ifconst	ROM2k
   7233  4fc9				  -	      ifconst	PlusROM_functions
   7234  4fc9				  -	      ORG	$F7F0
   7235  4fc9				  -	      .byte	0	; WriteToBuffer
   7236  4fc9				  -	      .byte	0	; WriteSendBuffer
   7237  4fc9				  -	      .byte	0	; ReceiveBuffer
   7238  4fc9				  -	      .byte	$ff	; ReceiveBufferSize (none zero for detection of PlusROM support)
   7239  4fc9				  -	      ORG	$F7FA
   7240  4fc9				  -	      else
   7241  4fc9				  -	      ORG	$F7FC
   7242  4fc9				  -	      endif
   7243  4fc9					      else
   7244  4fc9					      ifconst	bankswitch
   7245  4fc9				  -	      if	bankswitch == 8
   7246  4fc9				  -	      ORG	$2FF4-bscode_length
   7247  4fc9				  -	      RORG	$FFF4-bscode_length
   7248  4fc9					      endif
   7249  4fc9					      if	bankswitch == 16
   7250  4fd1					      ORG	$4FF4-bscode_length
   7251  4fd1					      RORG	$FFF4-bscode_length
   7252  4fd1					      endif
   7253  4fd1				  -	      if	bankswitch == 32
   7254  4fd1				  -	      ORG	$8FF4-bscode_length
   7255  4fd1				  -	      RORG	$FFF4-bscode_length
   7256  4fd1					      endif
   7257  4fd1				  -	      if	bankswitch == 64
   7258  4fd1				  -	      ORG	$10FE0-bscode_length
   7259  4fd1				  -	      RORG	$1FFE0-bscode_length
   7260  4fd1					      endif
   7261  4fd1				  -	      else
   7262  4fd1				  -	      ifconst	PlusROM_functions
   7263  4fd1				  -	      ORG	$FFF0
   7264  4fd1				  -	      .byte	0	; WriteToBuffer
   7265  4fd1				  -	      .byte	0	; WriteSendBuffer
   7266  4fd1				  -	      .byte	0	; ReceiveBuffer
   7267  4fd1				  -	      .byte	$ff	; ReceiveBufferSize (none zero for detection of PlusROM support)
   7268  4fd1				  -	      ORG	$FFFA
   7269  4fd1				  -	      else
   7270  4fd1				  -	      ORG	$FFFC
   7271  4fd1				  -	      endif
   7272  4fd1					      endif
   7273  4fd1					      endif
   7274  4fd1							; Provided under the CC0 license. See the included LICENSE.txt for details.
   7275  4fd1
   7276  4fd1							; every bank has this stuff at the same place
   7277  4fd1							; this code can switch to/from any bank at any entry point
   7278  4fd1							; and can preserve register values
   7279  4fd1							; note: lines not starting with a space are not placed in all banks
   7280  4fd1							;
   7281  4fd1							; line below tells the compiler how long this is - do not remove
   7282  4fd1							;size=35
   7283  4fd1
   7284  4fd1				   begin_bscode
   7285  4fd1		       a2 ff		      ldx	#$ff
   7286  4fd3				  -	      ifconst	FASTFETCH	; using DPC+
   7287  4fd3				  -	      stx	FASTFETCH
   7288  4fd3					      endif
   7289  4fd3		       9a		      txs
   7290  4fd4				  -	      if	bankswitch == 64
   7291  4fd4				  -	      lda	#(((>(start-1)) & $0F) | $F0)
   7292  4fd4					      else
   7293  4fd4		       a9 f2		      lda	#>(start-1)
   7294  4fd6					      endif
   7295  4fd6		       48		      pha
   7296  4fd7		       a9 b0		      lda	#<(start-1)
   7297  4fd9		       48		      pha
   7298  4fda
   7299  4fda				   BS_return
   7300  4fda		       48		      pha
   7301  4fdb		       8a		      txa
   7302  4fdc		       48		      pha
   7303  4fdd		       ba		      tsx
   7304  4fde
   7305  4fde					      if	bankswitch != 64
   7306  4fde		       b5 04		      lda	4,x	; get high byte of return address
   7307  4fe0
   7308  4fe0		       2a		      rol
   7309  4fe1		       2a		      rol
   7310  4fe2		       2a		      rol
   7311  4fe3		       2a		      rol
   7312  4fe4		       29 03		      and	#bs_mask	;1 3 or 7 for F8/F6/F4
   7313  4fe6		       aa		      tax
   7314  4fe7		       e8		      inx
   7315  4fe8				  -	      else
   7316  4fe8				  -	      lda	4,x	; get high byte of return address
   7317  4fe8				  -	      tay
   7318  4fe8				  -	      ora	#$10	; change our bank nibble into a valid rom mirror
   7319  4fe8				  -	      sta	4,x
   7320  4fe8				  -	      tya
   7321  4fe8				  -	      lsr
   7322  4fe8				  -	      lsr
   7323  4fe8				  -	      lsr
   7324  4fe8				  -	      lsr
   7325  4fe8				  -	      tax
   7326  4fe8				  -	      inx
   7327  4fe8					      endif
   7328  4fe8
   7329  4fe8				   BS_jsr
   7330  4fe8		       bd f5 1f 	      lda	bankswitch_hotspot-1,x
   7331  4feb		       68		      pla
   7332  4fec		       aa		      tax
   7333  4fed		       68		      pla
   7334  4fee		       60		      rts
   7335  4fef				  -	      if	((* & $1FFF) > ((bankswitch_hotspot & $1FFF) - 1))
   7336  4fef				  -	      echo	"WARNING: size parameter in banksw.asm too small - the program probably will not work."
   7337  4fef				  -	      echo	"Change to",[(*-begin_bscode+1)&$FF]d,"and try again."
   7338  4fef					      endif
   7339  4fef							; Provided under the CC0 license. See the included LICENSE.txt for details.
   7340  4fef
   7341  4fef					      ifconst	bankswitch
   7342  4fef				  -	      if	bankswitch == 8
   7343  4fef				  -	      ifconst	PlusROM_functions
   7344  4fef				  -	      ORG	$2FF0
   7345  4fef				  -	      RORG	$FFF0
   7346  4fef				  -	      .byte	0	; WriteToBuffer
   7347  4fef				  -	      .byte	0	; WriteSendBuffer
   7348  4fef				  -	      .byte	0	; ReceiveBuffer
   7349  4fef				  -	      .byte	$ff	; ReceiveBufferSize (none zero for detection of PlusROM support)
   7350  4fef				  -	      ORG	$2FFA
   7351  4fef				  -	      RORG	$FFFA
   7352  4fef				  -	      .word	(PlusROM_API)
   7353  4fef				  -	      else
   7354  4fef				  -	      ORG	$2FFC
   7355  4fef				  -	      RORG	$FFFC
   7356  4fef				  -	      endif
   7357  4fef					      endif
   7358  4fef					      if	bankswitch == 16
   7359  4fef					      ifconst	PlusROM_functions
   7360  4ff0					      ORG	$4FF0
   7361  4ff0					      RORG	$FFF0
   7362  4ff0		       00		      .byte.b	0	; WriteToBuffer
   7363  4ff1		       00		      .byte.b	0	; WriteSendBuffer
   7364  4ff2		       00		      .byte.b	0	; ReceiveBuffer
   7365  4ff3		       ff		      .byte.b	$ff	; ReceiveBufferSize (none zero for detection of PlusROM support)
   7366  4ffa					      ORG	$4FFA
   7367  4ffa					      RORG	$FFFA
   7368  4ffa		       fe 4b		      .word.w	(PlusROM_API)
   7369  4ffc				  -	      else
   7370  4ffc				  -	      ORG	$4FFC
   7371  4ffc				  -	      RORG	$FFFC
   7372  4ffc					      endif
   7373  4ffc					      endif
   7374  4ffc				  -	      if	bankswitch == 32
   7375  4ffc				  -	      ifconst	PlusROM_functions
   7376  4ffc				  -	      ORG	$8FF0
   7377  4ffc				  -	      RORG	$FFF0
   7378  4ffc				  -	      .byte	0	; WriteToBuffer
   7379  4ffc				  -	      .byte	0	; WriteSendBuffer
   7380  4ffc				  -	      .byte	0	; ReceiveBuffer
   7381  4ffc				  -	      .byte	$ff	; ReceiveBufferSize (none zero for detection of PlusROM support)
   7382  4ffc				  -	      ORG	$8FFA
   7383  4ffc				  -	      RORG	$FFFA
   7384  4ffc				  -	      .word	(PlusROM_API)
   7385  4ffc				  -	      else
   7386  4ffc				  -	      ORG	$8FFC
   7387  4ffc				  -	      RORG	$FFFC
   7388  4ffc				  -	      endif
   7389  4ffc					      endif
   7390  4ffc				  -	      if	bankswitch == 64
   7391  4ffc				  -	      ORG	$10FF0
   7392  4ffc				  -	      RORG	$1FFF0
   7393  4ffc				  -	      lda	$ffe0	; we use wasted space to assist stella with EF format auto-detection
   7394  4ffc				  -	      ORG	$10FF8
   7395  4ffc				  -	      RORG	$1FFF8
   7396  4ffc				  -	      ifconst	superchip
   7397  4ffc				  -	      .byte	"E","F","S","C"
   7398  4ffc				  -	      else
   7399  4ffc				  -	      .byte	"E","F","E","F"
   7400  4ffc				  -	      endif
   7401  4ffc				  -	      ORG	$10FFC
   7402  4ffc				  -	      RORG	$1FFFC
   7403  4ffc					      endif
   7404  4ffc				  -	      else
   7405  4ffc				  -	      ifconst	ROM2k
   7406  4ffc				  -	      ifconst	PlusROM_functions
   7407  4ffc				  -	      ORG	$F7FA
   7408  4ffc				  -	      .word	(PlusROM_API)
   7409  4ffc				  -	      else
   7410  4ffc				  -	      ORG	$F7FC
   7411  4ffc				  -	      endif
   7412  4ffc				  -	      else
   7413  4ffc				  -	      ifconst	PlusROM_functions
   7414  4ffc				  -	      ORG	$FFFA
   7415  4ffc				  -	      .word	(PlusROM_API)
   7416  4ffc				  -	      else
   7417  4ffc				  -	      ORG	$FFFC
   7418  4ffc				  -	      endif
   7419  4ffc				  -	      endif
   7420  4ffc					      endif
   7421  4ffc		       b1 f2		      .word.w	(start & $ffff)
   7422  4ffe		       b1 f2		      .word.w	(start & $ffff)
