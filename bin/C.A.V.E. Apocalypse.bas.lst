------- FILE d:\Firmaplus\Firmaplus_intern\Atari\PlusROM\Projekte-batariBasic\CaveApocalypse\C.A.V.E. Apocalypse.bas.asm LEVEL 1 PASS 3
      1  3000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  3000 ????
      3  3000 ????				      processor	6502
------- FILE vcs.h LEVEL 2 PASS 3
      0  3000 ????				      include	"vcs.h"
      1  3000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  3000 ????
      3  3000 ????						; VCS.H
      4  3000 ????						; Version 1.05, 13/November/2003
      5  3000 ????
      6  3000 ????	       00 69	   VERSION_VCS =	105
      7  3000 ????
      8  3000 ????						; THIS IS A PRELIMINARY RELEASE OF *THE* "STANDARD" VCS.H
      9  3000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
     10  3000 ????						; PLEASE DO *NOT* REDISTRIBUTE THIS FILE!
     11  3000 ????						;
     12  3000 ????						; This file defines hardware registers and memory mapping for the
     13  3000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     14  3000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     15  3000 ????						; available at at http://www.atari2600.org/dasm
     16  3000 ????						;
     17  3000 ????						; Many thanks to the original author(s) of this file, and to everyone who has
     18  3000 ????						; contributed to understanding the Atari 2600.  If you take issue with the
     19  3000 ????						; contents, or naming of registers, please write to me (atari2600@taswegian.com)
     20  3000 ????						; with your views.  Please contribute, if you think you can improve this
     21  3000 ????						; file!
     22  3000 ????						;
     23  3000 ????						; Latest Revisions...
     24  3000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     25  3000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     26  3000 ????						;			    This will allow conditional code to verify VCS.H being
     27  3000 ????						;			    used for code assembly.
     28  3000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     29  3000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     30  3000 ????						;			 mirrored reading/writing differences.	This is more a 
     31  3000 ????						;			 readability issue, and binary compatibility with disassembled
     32  3000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     33  3000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     34  3000 ????						;			 which was broken by the use of segments in this file, as
     35  3000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     36  3000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     37  3000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     38  3000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     39  3000 ????						;						   it is safe to leave it undefined, and the base address will
     40  3000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     41  3000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     42  3000 ????						;			  - register definitions are now generated through assignment
     43  3000 ????						;			    in uninitialised segments.	This allows a changeable base
     44  3000 ????						;			    address architecture.
     45  3000 ????						; 1.0	22/MAR/2003		Initial release
     46  3000 ????
     47  3000 ????
     48  3000 ????						;-------------------------------------------------------------------------------
     49  3000 ????
     50  3000 ????						; TIA_BASE_ADDRESS
     51  3000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     52  3000 ????						; Normally 0, the base address should (externally, before including this file)
     53  3000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     54  3000 ????						; The reason is that this bankswitching scheme treats any access to locations
     55  3000 ????						; < $40 as a bankswitch.
     56  3000 ????
     57  3000 ????			  -	      IFNCONST	TIA_BASE_ADDRESS
     58  3000 ????			  -TIA_BASE_ADDRESS =	0
     59  3000 ????				      ENDIF
     60  3000 ????
     61  3000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     62  3000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     63  3000 ????						; *OR* by declaring the label before including this file, eg:
     64  3000 ????						; TIA_BASE_ADDRESS = $40
     65  3000 ????						;   include "vcs.h"
     66  3000 ????
     67  3000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     68  3000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     69  3000 ????						; for the mirrored ROM hardware registers.
     70  3000 ????
     71  3000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     72  3000 ????						; using the -D command-line switch, as required.  If the addresses are not defined, 
     73  3000 ????						; they defaut to the TIA_BASE_ADDRESS.
     74  3000 ????
     75  3000 ????			  -	      IFNCONST	TIA_BASE_READ_ADDRESS
     76  3000 ????			  -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     77  3000 ????				      ENDIF
     78  3000 ????
     79  3000 ????			  -	      IFNCONST	TIA_BASE_WRITE_ADDRESS
     80  3000 ????			  -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     81  3000 ????				      ENDIF
     82  3000 ????
     83  3000 ????						;-------------------------------------------------------------------------------
     84  3000 ????
     85 U002d ????				      SEG.U	TIA_REGISTERS_WRITE
     86 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     87 U0000
     88 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     89 U0000
     90 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     91 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     92 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     93 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     94 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     95 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     96 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     97 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     98 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     99 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
    100 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
    101 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    102 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    103 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    104 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    105 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    106 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    107 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    108 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    109 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    110 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    111 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    112 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    113 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    114 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    115 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    116 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    117 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    118 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    119 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    120 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    121 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    122 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    123 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    124 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    125 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    126 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    127 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    128 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    129 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    130 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    131 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    132 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    133 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    134 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    135 U002d
    136 U002d							;-------------------------------------------------------------------------------
    137 U002d
    138 U000e ????				      SEG.U	TIA_REGISTERS_READ
    139 U0000					      ORG	TIA_BASE_READ_ADDRESS
    140 U0000
    141 U0000							;											bit 7	 bit 6
    142 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    143 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    144 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    145 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    146 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    147 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    148 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    149 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    150 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    151 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    152 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    153 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    154 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    155 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    156 U000e
    157 U000e							;-------------------------------------------------------------------------------
    158 U000e
    159 U0298 ????				      SEG.U	RIOT
    160 U0280					      ORG	$280
    161 U0280
    162 U0280							; RIOT MEMORY MAP
    163 U0280
    164 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    165 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    166 U0281
    167 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    168 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    169 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    170 U0284		       00	   INTIM      ds	1	; $284		Timer output
    171 U0285
    172 U0285		       00	   TIMINT     ds	1	; $285
    173 U0286
    174 U0286							; Unused/undefined registers ($285-$294)
    175 U0286
    176 U0286		       00		      ds	1	; $286
    177 U0287		       00		      ds	1	; $287
    178 U0288		       00		      ds	1	; $288
    179 U0289		       00		      ds	1	; $289
    180 U028a		       00		      ds	1	; $28A
    181 U028b		       00		      ds	1	; $28B
    182 U028c		       00		      ds	1	; $28C
    183 U028d		       00		      ds	1	; $28D
    184 U028e		       00		      ds	1	; $28E
    185 U028f		       00		      ds	1	; $28F
    186 U0290		       00		      ds	1	; $290
    187 U0291		       00		      ds	1	; $291
    188 U0292		       00		      ds	1	; $292
    189 U0293		       00		      ds	1	; $293
    190 U0294
    191 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    192 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    193 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    194 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    195 U0298
    196 U0298							;-------------------------------------------------------------------------------
    197 U0298							; The following required for back-compatibility with code which does not use
    198 U0298							; segments.
    199 U0298
    200  3000 ????				      SEG
    201  3000 ????
    202  3000 ????						; EOF
------- FILE d:\Firmaplus\Firmaplus_intern\Atari\PlusROM\Projekte-batariBasic\CaveApocalypse\C.A.V.E. Apocalypse.bas.asm
------- FILE macro.h LEVEL 2 PASS 3
      0  3000 ????				      include	"macro.h"
      1  3000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  3000 ????
      3  3000 ????						; MACRO.H
      4  3000 ????						; Version 1.05, 13/NOVEMBER/2003
      5  3000 ????
      6  3000 ????	       00 69	   VERSION_MACRO =	105
      7  3000 ????
      8  3000 ????						;
      9  3000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
     10  3000 ????						; PLEASE DO *NOT* REDISTRIBUTE MODIFIED VERSIONS OF THIS FILE!
     11  3000 ????						;
     12  3000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     13  3000 ????						; It is distributed as a companion machine-specific support package
     14  3000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     15  3000 ????						; available at at http://www.atari2600.org/dasm
     16  3000 ????						;
     17  3000 ????						; Many thanks to the people who have contributed.  If you take issue with the
     18  3000 ????						; contents, or would like to add something, please write to me
     19  3000 ????						; (atari2600@taswegian.com) with your contribution.
     20  3000 ????						;
     21  3000 ????						; Latest Revisions...
     22  3000 ????						;
     23  3000 ????						; 1.05  14/NOV/2003	  - Added VERSION_MACRO equate (which will reflect 100x version #)
     24  3000 ????						;			    This will allow conditional code to verify MACRO.H being
     25  3000 ????						;			    used for code assembly.
     26  3000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     27  3000 ????						;
     28  3000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     29  3000 ????						;
     30  3000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     31  3000 ????						;			   (standardised macro for vertical synch code)
     32  3000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added. 
     33  3000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     34  3000 ????						; 1.0	22/MAR/2003		Initial release
     35  3000 ????
     36  3000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage, 
     37  3000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     38  3000 ????						;   If you do not allow illegal opcode usage, you must include this file 
     39  3000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     40  3000 ????						;   registers and require them to be defined first).
     41  3000 ????
     42  3000 ????						; Available macros...
     43  3000 ????						;   SLEEP n		 - sleep for n cycles
     44  3000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     45  3000 ????						;   CLEAN_START	 - set machine to known state on startup
     46  3000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     47  3000 ????
     48  3000 ????						;-------------------------------------------------------------------------------
     49  3000 ????						; SLEEP duration
     50  3000 ????						; Original author: Thomas Jentzsch
     51  3000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     52  3000 ????						; useful for code where precise timing is required.
     53  3000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     54  3000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     55  3000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     56  3000 ????
     57  3000 ????				      MAC	sleep
     58  3000 ????			   .CYCLES    SET	{1}
     59  3000 ????
     60  3000 ????				      IF	.CYCLES < 2
     61  3000 ????				      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     62  3000 ????				      ERR
     63  3000 ????				      ENDIF
     64  3000 ????
     65  3000 ????				      IF	.CYCLES & 1
     66  3000 ????				      IFNCONST	NO_ILLEGAL_OPCODES
     67  3000 ????				      nop	0
     68  3000 ????				      ELSE
     69  3000 ????				      bit	VSYNC
     70  3000 ????				      ENDIF
     71  3000 ????			   .CYCLES    SET	.CYCLES - 3
     72  3000 ????				      ENDIF
     73  3000 ????
     74  3000 ????				      REPEAT	.CYCLES / 2
     75  3000 ????				      nop
     76  3000 ????				      REPEND
     77  3000 ????				      ENDM		;usage: SLEEP n (n>1)
     78  3000 ????
     79  3000 ????						;-------------------------------------------------------------------------------
     80  3000 ????						; VERTICAL_SYNC
     81  3000 ????						; Original author: Manuel Polik
     82  3000 ????						; Inserts the code required for a proper 3 scannline 
     83  3000 ????						; vertical sync sequence
     84  3000 ????						;
     85  3000 ????						; Note: Alters the accumulator
     86  3000 ????						;
     87  3000 ????						; IN:
     88  3000 ????						; OUT: A = 1
     89  3000 ????
     90  3000 ????				      MAC	vertical_sync
     91  3000 ????				      LDA	#$02	; A = VSYNC enable
     92  3000 ????				      STA	WSYNC	; Finish current line
     93  3000 ????				      STA	VSYNC	; Start vertical sync
     94  3000 ????				      STA	WSYNC	; 1st line vertical sync
     95  3000 ????				      STA	WSYNC	; 2nd line vertical sync
     96  3000 ????				      LSR		; A = VSYNC disable
     97  3000 ????				      STA	WSYNC	; 3rd line vertical sync
     98  3000 ????				      STA	VSYNC	; Stop vertical sync
     99  3000 ????				      ENDM
    100  3000 ????
    101  3000 ????						;-------------------------------------------------------------------------------
    102  3000 ????						; CLEAN_START
    103  3000 ????						; Original author: Andrew Davie
    104  3000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
    105  3000 ????						; Sets stack pointer to $FF, and all registers to 0
    106  3000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    107  3000 ????						; Use as very first section of code on boot (ie: at reset)
    108  3000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    109  3000 ????
    110  3000 ????				      MAC	clean_start
    111  3000 ????				      sei
    112  3000 ????				      cld
    113  3000 ????
    114  3000 ????				      ldx	#0
    115  3000 ????				      txa
    116  3000 ????				      tay
    117  3000 ????			   .CLEAR_STACK dex
    118  3000 ????				      txs
    119  3000 ????				      pha
    120  3000 ????				      bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    121  3000 ????
    122  3000 ????				      ENDM
    123  3000 ????
    124  3000 ????						;-------------------------------------------------------
    125  3000 ????						; SET_POINTER
    126  3000 ????						; Original author: Manuel Rotschkar
    127  3000 ????						;
    128  3000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    129  3000 ????						;
    130  3000 ????						; Usage: SET_POINTER pointer, address
    131  3000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    132  3000 ????						;
    133  3000 ????						; Note: Alters the accumulator, NZ flags
    134  3000 ????						; IN 1: 2 byte RAM location reserved for pointer
    135  3000 ????						; IN 2: absolute address
    136  3000 ????
    137  3000 ????				      MAC	set_pointer
    138  3000 ????			   .POINTER   SET	{1}
    139  3000 ????			   .ADDRESS   SET	{2}
    140  3000 ????
    141  3000 ????				      LDA	#<.ADDRESS	; Get Lowbyte of Address
    142  3000 ????				      STA	.POINTER	; Store in pointer
    143  3000 ????				      LDA	#>.ADDRESS	; Get Hibyte of Address
    144  3000 ????				      STA	.POINTER+1	; Store in pointer+1
    145  3000 ????
    146  3000 ????				      ENDM
    147  3000 ????
    148  3000 ????						; EOF
------- FILE d:\Firmaplus\Firmaplus_intern\Atari\PlusROM\Projekte-batariBasic\CaveApocalypse\C.A.V.E. Apocalypse.bas.asm
------- FILE 2600basic.h LEVEL 2 PASS 3
      0  3000 ????				      include	"2600basic.h"
      1  3000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  3000 ????
      3  3000 ????				      processor	6502
------- FILE vcs.h LEVEL 3 PASS 3
      0  3000 ????				      include	"vcs.h"
      1  3000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  3000 ????
      3  3000 ????						; VCS.H
      4  3000 ????						; Version 1.05, 13/November/2003
      5  3000 ????
      6  3000 ????	       00 69	   VERSION_VCS =	105
      7  3000 ????
      8  3000 ????						; THIS IS A PRELIMINARY RELEASE OF *THE* "STANDARD" VCS.H
      9  3000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
     10  3000 ????						; PLEASE DO *NOT* REDISTRIBUTE THIS FILE!
     11  3000 ????						;
     12  3000 ????						; This file defines hardware registers and memory mapping for the
     13  3000 ????						; Atari 2600. It is distributed as a companion machine-specific support package
     14  3000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     15  3000 ????						; available at at http://www.atari2600.org/dasm
     16  3000 ????						;
     17  3000 ????						; Many thanks to the original author(s) of this file, and to everyone who has
     18  3000 ????						; contributed to understanding the Atari 2600.  If you take issue with the
     19  3000 ????						; contents, or naming of registers, please write to me (atari2600@taswegian.com)
     20  3000 ????						; with your views.  Please contribute, if you think you can improve this
     21  3000 ????						; file!
     22  3000 ????						;
     23  3000 ????						; Latest Revisions...
     24  3000 ????						; 1.05  13/NOV/2003	  - Correction to 1.04 - now functions as requested by MR.
     25  3000 ????						;			  - Added VERSION_VCS equate (which will reflect 100x version #)
     26  3000 ????						;			    This will allow conditional code to verify VCS.H being
     27  3000 ????						;			    used for code assembly.
     28  3000 ????						; 1.04  12/NOV/2003	 Added TIA_BASE_WRITE_ADDRESS and TIA_BASE_READ_ADDRESS for
     29  3000 ????						;			 convenient disassembly/reassembly compatibility for hardware
     30  3000 ????						;			 mirrored reading/writing differences.	This is more a 
     31  3000 ????						;			 readability issue, and binary compatibility with disassembled
     32  3000 ????						;			 and reassembled sources.  Per Manuel Rotschkar's suggestion.
     33  3000 ????						; 1.03  12/MAY/2003	 Added SEG segment at end of file to fix old-code compatibility
     34  3000 ????						;			 which was broken by the use of segments in this file, as
     35  3000 ????						;			 reported by Manuel Polik on [stella] 11/MAY/2003
     36  3000 ????						; 1.02  22/MAR/2003	 Added TIMINT($285)
     37  3000 ????						; 1.01				Constant offset added to allow use for 3F-style bankswitching
     38  3000 ????						;						 - define TIA_BASE_ADDRESS as $40 for Tigervision carts, otherwise
     39  3000 ????						;						   it is safe to leave it undefined, and the base address will
     40  3000 ????						;						   be set to 0.  Thanks to Eckhard Stolberg for the suggestion.
     41  3000 ????						;			    Note, may use -DLABEL=EXPRESSION to define TIA_BASE_ADDRESS
     42  3000 ????						;			  - register definitions are now generated through assignment
     43  3000 ????						;			    in uninitialised segments.	This allows a changeable base
     44  3000 ????						;			    address architecture.
     45  3000 ????						; 1.0	22/MAR/2003		Initial release
     46  3000 ????
     47  3000 ????
     48  3000 ????						;-------------------------------------------------------------------------------
     49  3000 ????
     50  3000 ????						; TIA_BASE_ADDRESS
     51  3000 ????						; The TIA_BASE_ADDRESS defines the base address of access to TIA registers.
     52  3000 ????						; Normally 0, the base address should (externally, before including this file)
     53  3000 ????						; be set to $40 when creating 3F-bankswitched (and other?) cartridges.
     54  3000 ????						; The reason is that this bankswitching scheme treats any access to locations
     55  3000 ????						; < $40 as a bankswitch.
     56  3000 ????
     57  3000 ????			  -	      IFNCONST	TIA_BASE_ADDRESS
     58  3000 ????			  -TIA_BASE_ADDRESS =	0
     59  3000 ????				      ENDIF
     60  3000 ????
     61  3000 ????						; Note: The address may be defined on the command-line using the -D switch, eg:
     62  3000 ????						; dasm.exe code.asm -DTIA_BASE_ADDRESS=$40 -f3 -v5 -ocode.bin
     63  3000 ????						; *OR* by declaring the label before including this file, eg:
     64  3000 ????						; TIA_BASE_ADDRESS = $40
     65  3000 ????						;   include "vcs.h"
     66  3000 ????
     67  3000 ????						; Alternate read/write address capability - allows for some disassembly compatibility
     68  3000 ????						; usage ; to allow reassembly to binary perfect copies).  This is essentially catering
     69  3000 ????						; for the mirrored ROM hardware registers.
     70  3000 ????
     71  3000 ????						; Usage: As per above, define the TIA_BASE_READ_ADDRESS and/or TIA_BASE_WRITE_ADDRESS
     72  3000 ????						; using the -D command-line switch, as required.  If the addresses are not defined, 
     73  3000 ????						; they defaut to the TIA_BASE_ADDRESS.
     74  3000 ????
     75  3000 ????			  -	      IFNCONST	TIA_BASE_READ_ADDRESS
     76  3000 ????			  -TIA_BASE_READ_ADDRESS =	TIA_BASE_ADDRESS
     77  3000 ????				      ENDIF
     78  3000 ????
     79  3000 ????			  -	      IFNCONST	TIA_BASE_WRITE_ADDRESS
     80  3000 ????			  -TIA_BASE_WRITE_ADDRESS =	TIA_BASE_ADDRESS
     81  3000 ????				      ENDIF
     82  3000 ????
     83  3000 ????						;-------------------------------------------------------------------------------
     84  3000 ????
     85 U002d					      SEG.U	TIA_REGISTERS_WRITE
     86 U0000					      ORG	TIA_BASE_WRITE_ADDRESS
     87 U0000
     88 U0000							; DO NOT CHANGE THE RELATIVE ORDERING OF REGISTERS!
     89 U0000
     90 U0000		       00	   VSYNC      ds	1	; $00	 0000 00x0   Vertical Sync Set-Clear
     91 U0001		       00	   VBLANK     ds	1	; $01	 xx00 00x0   Vertical Blank Set-Clear
     92 U0002		       00	   WSYNC      ds	1	; $02	 ---- ----   Wait for Horizontal Blank
     93 U0003		       00	   RSYNC      ds	1	; $03	 ---- ----   Reset Horizontal Sync Counter
     94 U0004		       00	   NUSIZ0     ds	1	; $04	 00xx 0xxx   Number-Size player/missle 0
     95 U0005		       00	   NUSIZ1     ds	1	; $05	 00xx 0xxx   Number-Size player/missle 1
     96 U0006		       00	   COLUP0     ds	1	; $06	 xxxx xxx0   Color-Luminance Player 0
     97 U0007		       00	   COLUP1     ds	1	; $07	 xxxx xxx0   Color-Luminance Player 1
     98 U0008		       00	   COLUPF     ds	1	; $08	 xxxx xxx0   Color-Luminance Playfield
     99 U0009		       00	   COLUBK     ds	1	; $09	 xxxx xxx0   Color-Luminance Background
    100 U000a		       00	   CTRLPF     ds	1	; $0A	 00xx 0xxx   Control Playfield, Ball, Collisions
    101 U000b		       00	   REFP0      ds	1	; $0B	 0000 x000   Reflection Player 0
    102 U000c		       00	   REFP1      ds	1	; $0C	 0000 x000   Reflection Player 1
    103 U000d		       00	   PF0	      ds	1	; $0D	 xxxx 0000   Playfield Register Byte 0
    104 U000e		       00	   PF1	      ds	1	; $0E	 xxxx xxxx   Playfield Register Byte 1
    105 U000f		       00	   PF2	      ds	1	; $0F	 xxxx xxxx   Playfield Register Byte 2
    106 U0010		       00	   RESP0      ds	1	; $10	 ---- ----   Reset Player 0
    107 U0011		       00	   RESP1      ds	1	; $11	 ---- ----   Reset Player 1
    108 U0012		       00	   RESM0      ds	1	; $12	 ---- ----   Reset Missle 0
    109 U0013		       00	   RESM1      ds	1	; $13	 ---- ----   Reset Missle 1
    110 U0014		       00	   RESBL      ds	1	; $14	 ---- ----   Reset Ball
    111 U0015		       00	   AUDC0      ds	1	; $15	 0000 xxxx   Audio Control 0
    112 U0016		       00	   AUDC1      ds	1	; $16	 0000 xxxx   Audio Control 1
    113 U0017		       00	   AUDF0      ds	1	; $17	 000x xxxx   Audio Frequency 0
    114 U0018		       00	   AUDF1      ds	1	; $18	 000x xxxx   Audio Frequency 1
    115 U0019		       00	   AUDV0      ds	1	; $19	 0000 xxxx   Audio Volume 0
    116 U001a		       00	   AUDV1      ds	1	; $1A	 0000 xxxx   Audio Volume 1
    117 U001b		       00	   GRP0       ds	1	; $1B	 xxxx xxxx   Graphics Register Player 0
    118 U001c		       00	   GRP1       ds	1	; $1C	 xxxx xxxx   Graphics Register Player 1
    119 U001d		       00	   ENAM0      ds	1	; $1D	 0000 00x0   Graphics Enable Missle 0
    120 U001e		       00	   ENAM1      ds	1	; $1E	 0000 00x0   Graphics Enable Missle 1
    121 U001f		       00	   ENABL      ds	1	; $1F	 0000 00x0   Graphics Enable Ball
    122 U0020		       00	   HMP0       ds	1	; $20	 xxxx 0000   Horizontal Motion Player 0
    123 U0021		       00	   HMP1       ds	1	; $21	 xxxx 0000   Horizontal Motion Player 1
    124 U0022		       00	   HMM0       ds	1	; $22	 xxxx 0000   Horizontal Motion Missle 0
    125 U0023		       00	   HMM1       ds	1	; $23	 xxxx 0000   Horizontal Motion Missle 1
    126 U0024		       00	   HMBL       ds	1	; $24	 xxxx 0000   Horizontal Motion Ball
    127 U0025		       00	   VDELP0     ds	1	; $25	 0000 000x   Vertical Delay Player 0
    128 U0026		       00	   VDELP1     ds	1	; $26	 0000 000x   Vertical Delay Player 1
    129 U0027		       00	   VDELBL     ds	1	; $27	 0000 000x   Vertical Delay Ball
    130 U0028		       00	   RESMP0     ds	1	; $28	 0000 00x0   Reset Missle 0 to Player 0
    131 U0029		       00	   RESMP1     ds	1	; $29	 0000 00x0   Reset Missle 1 to Player 1
    132 U002a		       00	   HMOVE      ds	1	; $2A	 ---- ----   Apply Horizontal Motion
    133 U002b		       00	   HMCLR      ds	1	; $2B	 ---- ----   Clear Horizontal Move Registers
    134 U002c		       00	   CXCLR      ds	1	; $2C	 ---- ----   Clear Collision Latches
    135 U002d
    136 U002d							;-------------------------------------------------------------------------------
    137 U002d
    138 U000e					      SEG.U	TIA_REGISTERS_READ
    139 U0000					      ORG	TIA_BASE_READ_ADDRESS
    140 U0000
    141 U0000							;											bit 7	 bit 6
    142 U0000		       00	   CXM0P      ds	1	; $00	     xx00 0000	     Read Collision  M0-P1   M0-P0
    143 U0001		       00	   CXM1P      ds	1	; $01	     xx00 0000			     M1-P0   M1-P1
    144 U0002		       00	   CXP0FB     ds	1	; $02	     xx00 0000			     P0-PF   P0-BL
    145 U0003		       00	   CXP1FB     ds	1	; $03	     xx00 0000			     P1-PF   P1-BL
    146 U0004		       00	   CXM0FB     ds	1	; $04	     xx00 0000			     M0-PF   M0-BL
    147 U0005		       00	   CXM1FB     ds	1	; $05	     xx00 0000			     M1-PF   M1-BL
    148 U0006		       00	   CXBLPF     ds	1	; $06	     x000 0000			     BL-PF   -----
    149 U0007		       00	   CXPPMM     ds	1	; $07	     xx00 0000			     P0-P1   M0-M1
    150 U0008		       00	   INPT0      ds	1	; $08	     x000 0000	     Read Pot Port 0
    151 U0009		       00	   INPT1      ds	1	; $09	     x000 0000	     Read Pot Port 1
    152 U000a		       00	   INPT2      ds	1	; $0A	     x000 0000	     Read Pot Port 2
    153 U000b		       00	   INPT3      ds	1	; $0B	     x000 0000	     Read Pot Port 3
    154 U000c		       00	   INPT4      ds	1	; $0C		x000 0000	 Read Input (Trigger) 0
    155 U000d		       00	   INPT5      ds	1	; $0D		x000 0000	 Read Input (Trigger) 1
    156 U000e
    157 U000e							;-------------------------------------------------------------------------------
    158 U000e
    159 U0298					      SEG.U	RIOT
    160 U0280					      ORG	$280
    161 U0280
    162 U0280							; RIOT MEMORY MAP
    163 U0280
    164 U0280		       00	   SWCHA      ds	1	; $280      Port A data register for joysticks:
    165 U0281							;			Bits 4-7 for player 1.  Bits 0-3 for player 2.
    166 U0281
    167 U0281		       00	   SWACNT     ds	1	; $281      Port A data direction register (DDR)
    168 U0282		       00	   SWCHB      ds	1	; $282		Port B data (console switches)
    169 U0283		       00	   SWBCNT     ds	1	; $283      Port B DDR
    170 U0284		       00	   INTIM      ds	1	; $284		Timer output
    171 U0285
    172 U0285		       00	   TIMINT     ds	1	; $285
    173 U0286
    174 U0286							; Unused/undefined registers ($285-$294)
    175 U0286
    176 U0286		       00		      ds	1	; $286
    177 U0287		       00		      ds	1	; $287
    178 U0288		       00		      ds	1	; $288
    179 U0289		       00		      ds	1	; $289
    180 U028a		       00		      ds	1	; $28A
    181 U028b		       00		      ds	1	; $28B
    182 U028c		       00		      ds	1	; $28C
    183 U028d		       00		      ds	1	; $28D
    184 U028e		       00		      ds	1	; $28E
    185 U028f		       00		      ds	1	; $28F
    186 U0290		       00		      ds	1	; $290
    187 U0291		       00		      ds	1	; $291
    188 U0292		       00		      ds	1	; $292
    189 U0293		       00		      ds	1	; $293
    190 U0294
    191 U0294		       00	   TIM1T      ds	1	; $294		set 1 clock interval
    192 U0295		       00	   TIM8T      ds	1	; $295      set 8 clock interval
    193 U0296		       00	   TIM64T     ds	1	; $296      set 64 clock interval
    194 U0297		       00	   T1024T     ds	1	; $297      set 1024 clock interval
    195 U0298
    196 U0298							;-------------------------------------------------------------------------------
    197 U0298							; The following required for back-compatibility with code which does not use
    198 U0298							; segments.
    199 U0298
    200  3000 ????				      SEG
    201  3000 ????
    202  3000 ????						; EOF
------- FILE 2600basic.h
------- FILE macro.h LEVEL 3 PASS 3
      0  3000 ????				      include	"macro.h"
      1  3000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  3000 ????
      3  3000 ????						; MACRO.H
      4  3000 ????						; Version 1.05, 13/NOVEMBER/2003
      5  3000 ????
      6  3000 ????	       00 69	   VERSION_MACRO =	105
      7  3000 ????
      8  3000 ????						;
      9  3000 ????						; THIS FILE IS EXPLICITLY SUPPORTED AS A DASM-PREFERRED COMPANION FILE
     10  3000 ????						; PLEASE DO *NOT* REDISTRIBUTE MODIFIED VERSIONS OF THIS FILE!
     11  3000 ????						;
     12  3000 ????						; This file defines DASM macros useful for development for the Atari 2600.
     13  3000 ????						; It is distributed as a companion machine-specific support package
     14  3000 ????						; for the DASM compiler. Updates to this file, DASM, and associated tools are
     15  3000 ????						; available at at http://www.atari2600.org/dasm
     16  3000 ????						;
     17  3000 ????						; Many thanks to the people who have contributed.  If you take issue with the
     18  3000 ????						; contents, or would like to add something, please write to me
     19  3000 ????						; (atari2600@taswegian.com) with your contribution.
     20  3000 ????						;
     21  3000 ????						; Latest Revisions...
     22  3000 ????						;
     23  3000 ????						; 1.05  14/NOV/2003	  - Added VERSION_MACRO equate (which will reflect 100x version #)
     24  3000 ????						;			    This will allow conditional code to verify MACRO.H being
     25  3000 ????						;			    used for code assembly.
     26  3000 ????						; 1.04  13/NOV/2003	 - SET_POINTER macro added (16-bit address load)
     27  3000 ????						;
     28  3000 ????						; 1.03  23/JUN/2003	 - CLEAN_START macro added - clears TIA, RAM, registers
     29  3000 ????						;
     30  3000 ????						; 1.02  14/JUN/2003	 - VERTICAL_SYNC macro added
     31  3000 ????						;			   (standardised macro for vertical synch code)
     32  3000 ????						; 1.01  22/MAR/2003	 - SLEEP macro added. 
     33  3000 ????						;			 - NO_ILLEGAL_OPCODES switch implemented
     34  3000 ????						; 1.0	22/MAR/2003		Initial release
     35  3000 ????
     36  3000 ????						; Note: These macros use illegal opcodes.  To disable illegal opcode usage, 
     37  3000 ????						;   define the symbol NO_ILLEGAL_OPCODES (-DNO_ILLEGAL_OPCODES=1 on command-line).
     38  3000 ????						;   If you do not allow illegal opcode usage, you must include this file 
     39  3000 ????						;   *after* including VCS.H (as the non-illegal opcodes access hardware
     40  3000 ????						;   registers and require them to be defined first).
     41  3000 ????
     42  3000 ????						; Available macros...
     43  3000 ????						;   SLEEP n		 - sleep for n cycles
     44  3000 ????						;   VERTICAL_SYNC	 - correct 3 scanline vertical synch code
     45  3000 ????						;   CLEAN_START	 - set machine to known state on startup
     46  3000 ????						;   SET_POINTER	 - load a 16-bit absolute to a 16-bit variable
     47  3000 ????
     48  3000 ????						;-------------------------------------------------------------------------------
     49  3000 ????						; SLEEP duration
     50  3000 ????						; Original author: Thomas Jentzsch
     51  3000 ????						; Inserts code which takes the specified number of cycles to execute.	This is
     52  3000 ????						; useful for code where precise timing is required.
     53  3000 ????						; ILLEGAL-OPCODE VERSION DOES NOT AFFECT FLAGS OR REGISTERS.
     54  3000 ????						; LEGAL OPCODE VERSION MAY AFFECT FLAGS
     55  3000 ????						; Uses illegal opcode (DASM 2.20.01 onwards).
     56  3000 ????
     57  3000 ????				      MAC	sleep
     58  3000 ????			   .CYCLES    SET	{1}
     59  3000 ????
     60  3000 ????				      IF	.CYCLES < 2
     61  3000 ????				      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
     62  3000 ????				      ERR
     63  3000 ????				      ENDIF
     64  3000 ????
     65  3000 ????				      IF	.CYCLES & 1
     66  3000 ????				      IFNCONST	NO_ILLEGAL_OPCODES
     67  3000 ????				      nop	0
     68  3000 ????				      ELSE
     69  3000 ????				      bit	VSYNC
     70  3000 ????				      ENDIF
     71  3000 ????			   .CYCLES    SET	.CYCLES - 3
     72  3000 ????				      ENDIF
     73  3000 ????
     74  3000 ????				      REPEAT	.CYCLES / 2
     75  3000 ????				      nop
     76  3000 ????				      REPEND
     77  3000 ????				      ENDM		;usage: SLEEP n (n>1)
     78  3000 ????
     79  3000 ????						;-------------------------------------------------------------------------------
     80  3000 ????						; VERTICAL_SYNC
     81  3000 ????						; Original author: Manuel Polik
     82  3000 ????						; Inserts the code required for a proper 3 scannline 
     83  3000 ????						; vertical sync sequence
     84  3000 ????						;
     85  3000 ????						; Note: Alters the accumulator
     86  3000 ????						;
     87  3000 ????						; IN:
     88  3000 ????						; OUT: A = 1
     89  3000 ????
     90  3000 ????				      MAC	vertical_sync
     91  3000 ????				      LDA	#$02	; A = VSYNC enable
     92  3000 ????				      STA	WSYNC	; Finish current line
     93  3000 ????				      STA	VSYNC	; Start vertical sync
     94  3000 ????				      STA	WSYNC	; 1st line vertical sync
     95  3000 ????				      STA	WSYNC	; 2nd line vertical sync
     96  3000 ????				      LSR		; A = VSYNC disable
     97  3000 ????				      STA	WSYNC	; 3rd line vertical sync
     98  3000 ????				      STA	VSYNC	; Stop vertical sync
     99  3000 ????				      ENDM
    100  3000 ????
    101  3000 ????						;-------------------------------------------------------------------------------
    102  3000 ????						; CLEAN_START
    103  3000 ????						; Original author: Andrew Davie
    104  3000 ????						; Standardised start-up code, clears stack, all TIA registers and RAM to 0
    105  3000 ????						; Sets stack pointer to $FF, and all registers to 0
    106  3000 ????						; Sets decimal mode off, sets interrupt flag (kind of un-necessary)
    107  3000 ????						; Use as very first section of code on boot (ie: at reset)
    108  3000 ????						; Code written to minimise total ROM usage - uses weird 6502 knowledge :)
    109  3000 ????
    110  3000 ????				      MAC	clean_start
    111  3000 ????				      sei
    112  3000 ????				      cld
    113  3000 ????
    114  3000 ????				      ldx	#0
    115  3000 ????				      txa
    116  3000 ????				      tay
    117  3000 ????			   .CLEAR_STACK dex
    118  3000 ????				      txs
    119  3000 ????				      pha
    120  3000 ????				      bne	.CLEAR_STACK	; SP=$FF, X = A = Y = 0
    121  3000 ????
    122  3000 ????				      ENDM
    123  3000 ????
    124  3000 ????						;-------------------------------------------------------
    125  3000 ????						; SET_POINTER
    126  3000 ????						; Original author: Manuel Rotschkar
    127  3000 ????						;
    128  3000 ????						; Sets a 2 byte RAM pointer to an absolute address.
    129  3000 ????						;
    130  3000 ????						; Usage: SET_POINTER pointer, address
    131  3000 ????						; Example: SET_POINTER SpritePTR, SpriteData
    132  3000 ????						;
    133  3000 ????						; Note: Alters the accumulator, NZ flags
    134  3000 ????						; IN 1: 2 byte RAM location reserved for pointer
    135  3000 ????						; IN 2: absolute address
    136  3000 ????
    137  3000 ????				      MAC	set_pointer
    138  3000 ????			   .POINTER   SET	{1}
    139  3000 ????			   .ADDRESS   SET	{2}
    140  3000 ????
    141  3000 ????				      LDA	#<.ADDRESS	; Get Lowbyte of Address
    142  3000 ????				      STA	.POINTER	; Store in pointer
    143  3000 ????				      LDA	#>.ADDRESS	; Get Hibyte of Address
    144  3000 ????				      STA	.POINTER+1	; Store in pointer+1
    145  3000 ????
    146  3000 ????				      ENDM
    147  3000 ????
    148  3000 ????						; EOF
------- FILE 2600basic.h
------- FILE 2600basic_variable_redefs.h LEVEL 3 PASS 3
      0  3000 ????				      include	"2600basic_variable_redefs.h"
      1  3000 ????						; This file contains variable mapping and other information for the current project.
      2  3000 ????
      3  3000 ????	       00 23	   bscode_length =	35
      4  3000 ????	       00 1d	   _SD_Touch_Enemy_length =	.skipL0371-_SD_Touch_Enemy
      5  3000 ????
      6  3000 ????	       00 21	   _SD_Shoot_Enemy_length =	.skipL0370-_SD_Shoot_Enemy
      7  3000 ????
      8  3000 ????	       00 45	   _SD_Shoot_Miss_length =	.skipL0369-_SD_Shoot_Miss
      9  3000 ????
     10  3000 ????	       00 35	   _SD_Shot_Wall_length =	.skipL0368-_SD_Shot_Wall
     11  3000 ????
     12  3000 ????	       f0 6a	   w_room_definition_start =	w106
     13  3000 ????
     14  3000 ????	       f0 6a	   w_P0_type_and_range =	w106
     15  3000 ????
     16  3000 ????	       f0 ea	   r_P0_type_and_range =	r106
     17  3000 ????
     18  3000 ????	       f0 6b	   w_enemy_y_startpos =	w107
     19  3000 ????
     20  3000 ????	       f0 eb	   r_enemy_y_startpos =	r107
     21  3000 ????
     22  3000 ????	       f0 6c	   w_enemy_x_startpos =	w108
     23  3000 ????
     24  3000 ????	       f0 ec	   r_enemy_x_startpos =	r108
     25  3000 ????
     26  3000 ????	       f0 6d	   w_extra_wall_width =	w109
     27  3000 ????
     28  3000 ????	       f0 ed	   r_extra_wall_width =	r109
     29  3000 ????
     30  3000 ????	       f0 6e	   w_extra_wall_type =	w110
     31  3000 ????
     32  3000 ????	       f0 ee	   r_extra_wall_type =	r110
     33  3000 ????
     34  3000 ????	       f0 6f	   w_extra_wall_startpos =	w111
     35  3000 ????
     36  3000 ????	       f0 ef	   r_extra_wall_startpos =	r111
     37  3000 ????
     38  3000 ????	       00 ec	   _Bit7_M0_Moving =	y
     39  3000 ????
     40  3000 ????	       00 ec	   _Bit6_Flip_P0 =	y
     41  3000 ????
     42  3000 ????	       00 ec	   _Bit1_Wall_Dir =	y
     43  3000 ????
     44  3000 ????	       00 ec	   _Bit0_P0_Dir =	y
     45  3000 ????
     46  3000 ????	       00 ec	   _BitOp_misc =	y
     47  3000 ????
     48  3000 ????	       00 86	   P1y_position =	player1y
     49  3000 ????	       00 e9	   P1y_velocity =	v
     50  3000 ????	       00 91	   M0y_position =	missile0y
     51  3000 ????	       00 e6	   M0y_velocity =	s
     52  3000 ????	       00 df	   roommate_type =	l
     53  3000 ????
     54  3000 ????	       00 de	   roommate_move_x =	k
     55  3000 ????
     56  3000 ????	       00 dd	   extra_wall_move_x =	j
     57  3000 ????
     58  3000 ????	       00 dc	   _Ch0_Counter =	i
     59  3000 ????
     60  3000 ????	       00 db	   _Ch0_Duration =	h
     61  3000 ????
     62  3000 ????	       00 da	   _Ch0_Sound =	g
     63  3000 ????
     64  3000 ????	       00 d9	   P1_facing  =	f
     65  3000 ????
     66  3000 ????	       00 d8	   _Bit3_P1_Dir_Right =	e
     67  3000 ????
     68  3000 ????	       00 d8	   _Bit2_P1_Dir_Left =	e
     69  3000 ????
     70  3000 ????	       00 d8	   _Bit1_P1_Dir_Down =	e
     71  3000 ????
     72  3000 ????	       00 d8	   _Bit0_P1_Dir_Up =	e
     73  3000 ????
     74  3000 ????	       00 d8	   _BitOp_P1_Dir =	e
     75  3000 ????
     76  3000 ????	       00 d7	   _Bit3_M0_Dir_Right =	d
     77  3000 ????
     78  3000 ????	       00 d7	   _Bit2_M0_Dir_Left =	d
     79  3000 ????
     80  3000 ????	       00 d7	   _Bit1_M0_Dir_Down =	d
     81  3000 ????
     82  3000 ????	       00 d7	   _Bit0_M0_Dir_Up =	d
     83  3000 ????
     84  3000 ????	       00 d7	   _BitOp_M0_Dir =	d
     85  3000 ????
     86  3000 ????	       00 d6	   frame_counter =	c
     87  3000 ????
     88  3000 ????	       00 d5	   delay_counter =	b
     89  3000 ????
     90  3000 ????	       00 d4	   request_pending =	a
     91  3000 ????
     92  3000 ????	       00 fe	   _FE	      =	$FE
     93  3000 ????
     94  3000 ????	       00 fc	   _FC	      =	$FC
     95  3000 ????
     96  3000 ????	       00 fa	   _FA	      =	$FA
     97  3000 ????
     98  3000 ????	       00 f8	   _F8	      =	$F8
     99  3000 ????
    100  3000 ????	       00 f6	   _F6	      =	$F6
    101  3000 ????
    102  3000 ????	       00 f4	   _F4	      =	$F4
    103  3000 ????
    104  3000 ????	       00 f2	   _F2	      =	$F2
    105  3000 ????
    106  3000 ????	       00 f0	   _F0	      =	$F0
    107  3000 ????
    108  3000 ????	       00 ee	   _EE	      =	$EE
    109  3000 ????
    110  3000 ????	       00 ec	   _EC	      =	$EC
    111  3000 ????
    112  3000 ????	       00 ea	   _EA	      =	$EA
    113  3000 ????
    114  3000 ????	       00 e8	   _E8	      =	$E8
    115  3000 ????
    116  3000 ????	       00 e6	   _E6	      =	$E6
    117  3000 ????
    118  3000 ????	       00 e4	   _E4	      =	$E4
    119  3000 ????
    120  3000 ????	       00 e2	   _E2	      =	$E2
    121  3000 ????
    122  3000 ????	       00 e0	   _E0	      =	$E0
    123  3000 ????
    124  3000 ????	       00 de	   _DE	      =	$DE
    125  3000 ????
    126  3000 ????	       00 dc	   _DC	      =	$DC
    127  3000 ????
    128  3000 ????	       00 da	   _DA	      =	$DA
    129  3000 ????
    130  3000 ????	       00 d8	   _D8	      =	$D8
    131  3000 ????
    132  3000 ????	       00 d6	   _D6	      =	$D6
    133  3000 ????
    134  3000 ????	       00 d4	   _D4	      =	$D4
    135  3000 ????
    136  3000 ????	       00 d2	   _D2	      =	$D2
    137  3000 ????
    138  3000 ????	       00 d0	   _D0	      =	$D0
    139  3000 ????
    140  3000 ????	       00 ce	   _CE	      =	$CE
    141  3000 ????
    142  3000 ????	       00 cc	   _CC	      =	$CC
    143  3000 ????
    144  3000 ????	       00 ca	   _CA	      =	$CA
    145  3000 ????
    146  3000 ????	       00 c8	   _C8	      =	$C8
    147  3000 ????
    148  3000 ????	       00 c6	   _C6	      =	$C6
    149  3000 ????
    150  3000 ????	       00 c4	   _C4	      =	$C4
    151  3000 ????
    152  3000 ????	       00 c2	   _C2	      =	$C2
    153  3000 ????
    154  3000 ????	       00 c0	   _C0	      =	$C0
    155  3000 ????
    156  3000 ????	       00 be	   _BE	      =	$BE
    157  3000 ????
    158  3000 ????	       00 bc	   _BC	      =	$BC
    159  3000 ????
    160  3000 ????	       00 ba	   _BA	      =	$BA
    161  3000 ????
    162  3000 ????	       00 b8	   _B8	      =	$B8
    163  3000 ????
    164  3000 ????	       00 b6	   _B6	      =	$B6
    165  3000 ????
    166  3000 ????	       00 b4	   _B4	      =	$B4
    167  3000 ????
    168  3000 ????	       00 b2	   _B2	      =	$B2
    169  3000 ????
    170  3000 ????	       00 b0	   _B0	      =	$B0
    171  3000 ????
    172  3000 ????	       00 ae	   _AE	      =	$AE
    173  3000 ????
    174  3000 ????	       00 ac	   _AC	      =	$AC
    175  3000 ????
    176  3000 ????	       00 aa	   _AA	      =	$AA
    177  3000 ????
    178  3000 ????	       00 a8	   _A8	      =	$A8
    179  3000 ????
    180  3000 ????	       00 a6	   _A6	      =	$A6
    181  3000 ????
    182  3000 ????	       00 a4	   _A4	      =	$A4
    183  3000 ????
    184  3000 ????	       00 a2	   _A2	      =	$A2
    185  3000 ????
    186  3000 ????	       00 a0	   _A0	      =	$A0
    187  3000 ????
    188  3000 ????	       00 9e	   _9E	      =	$9E
    189  3000 ????
    190  3000 ????	       00 9c	   _9C	      =	$9C
    191  3000 ????
    192  3000 ????	       00 9a	   _9A	      =	$9A
    193  3000 ????
    194  3000 ????	       00 98	   _98	      =	$98
    195  3000 ????
    196  3000 ????	       00 96	   _96	      =	$96
    197  3000 ????
    198  3000 ????	       00 94	   _94	      =	$94
    199  3000 ????
    200  3000 ????	       00 92	   _92	      =	$92
    201  3000 ????
    202  3000 ????	       00 90	   _90	      =	$90
    203  3000 ????
    204  3000 ????	       00 8e	   _8E	      =	$8E
    205  3000 ????
    206  3000 ????	       00 8c	   _8C	      =	$8C
    207  3000 ????
    208  3000 ????	       00 8a	   _8A	      =	$8A
    209  3000 ????
    210  3000 ????	       00 88	   _88	      =	$88
    211  3000 ????
    212  3000 ????	       00 86	   _86	      =	$86
    213  3000 ????
    214  3000 ????	       00 84	   _84	      =	$84
    215  3000 ????
    216  3000 ????	       00 82	   _82	      =	$82
    217  3000 ????
    218  3000 ????	       00 80	   _80	      =	$80
    219  3000 ????
    220  3000 ????	       00 7e	   _7E	      =	$7E
    221  3000 ????
    222  3000 ????	       00 7c	   _7C	      =	$7C
    223  3000 ????
    224  3000 ????	       00 7a	   _7A	      =	$7A
    225  3000 ????
    226  3000 ????	       00 78	   _78	      =	$78
    227  3000 ????
    228  3000 ????	       00 76	   _76	      =	$76
    229  3000 ????
    230  3000 ????	       00 74	   _74	      =	$74
    231  3000 ????
    232  3000 ????	       00 72	   _72	      =	$72
    233  3000 ????
    234  3000 ????	       00 70	   _70	      =	$70
    235  3000 ????
    236  3000 ????	       00 6e	   _6E	      =	$6E
    237  3000 ????
    238  3000 ????	       00 6c	   _6C	      =	$6C
    239  3000 ????
    240  3000 ????	       00 6a	   _6A	      =	$6A
    241  3000 ????
    242  3000 ????	       00 68	   _68	      =	$68
    243  3000 ????
    244  3000 ????	       00 66	   _66	      =	$66
    245  3000 ????
    246  3000 ????	       00 64	   _64	      =	$64
    247  3000 ????
    248  3000 ????	       00 62	   _62	      =	$62
    249  3000 ????
    250  3000 ????	       00 60	   _60	      =	$60
    251  3000 ????
    252  3000 ????	       00 5e	   _5E	      =	$5E
    253  3000 ????
    254  3000 ????	       00 5c	   _5C	      =	$5C
    255  3000 ????
    256  3000 ????	       00 5a	   _5A	      =	$5A
    257  3000 ????
    258  3000 ????	       00 58	   _58	      =	$58
    259  3000 ????
    260  3000 ????	       00 56	   _56	      =	$56
    261  3000 ????
    262  3000 ????	       00 54	   _54	      =	$54
    263  3000 ????
    264  3000 ????	       00 52	   _52	      =	$52
    265  3000 ????
    266  3000 ????	       00 50	   _50	      =	$50
    267  3000 ????
    268  3000 ????	       00 4e	   _4E	      =	$4E
    269  3000 ????
    270  3000 ????	       00 4c	   _4C	      =	$4C
    271  3000 ????
    272  3000 ????	       00 4a	   _4A	      =	$4A
    273  3000 ????
    274  3000 ????	       00 48	   _48	      =	$48
    275  3000 ????
    276  3000 ????	       00 46	   _46	      =	$46
    277  3000 ????
    278  3000 ????	       00 44	   _44	      =	$44
    279  3000 ????
    280  3000 ????	       00 42	   _42	      =	$42
    281  3000 ????
    282  3000 ????	       00 40	   _40	      =	$40
    283  3000 ????
    284  3000 ????	       00 3e	   _3E	      =	$3E
    285  3000 ????
    286  3000 ????	       00 3c	   _3C	      =	$3C
    287  3000 ????
    288  3000 ????	       00 3a	   _3A	      =	$3A
    289  3000 ????
    290  3000 ????	       00 38	   _38	      =	$38
    291  3000 ????
    292  3000 ????	       00 36	   _36	      =	$36
    293  3000 ????
    294  3000 ????	       00 34	   _34	      =	$34
    295  3000 ????
    296  3000 ????	       00 32	   _32	      =	$32
    297  3000 ????
    298  3000 ????	       00 30	   _30	      =	$30
    299  3000 ????
    300  3000 ????	       00 2e	   _2E	      =	$2E
    301  3000 ????
    302  3000 ????	       00 2c	   _2C	      =	$2C
    303  3000 ????
    304  3000 ????	       00 2a	   _2A	      =	$2A
    305  3000 ????
    306  3000 ????	       00 28	   _28	      =	$28
    307  3000 ????
    308  3000 ????	       00 26	   _26	      =	$26
    309  3000 ????
    310  3000 ????	       00 24	   _24	      =	$24
    311  3000 ????
    312  3000 ????	       00 22	   _22	      =	$22
    313  3000 ????
    314  3000 ????	       00 20	   _20	      =	$20
    315  3000 ????
    316  3000 ????	       00 1e	   _1E	      =	$1E
    317  3000 ????
    318  3000 ????	       00 1c	   _1C	      =	$1C
    319  3000 ????
    320  3000 ????	       00 1a	   _1A	      =	$1A
    321  3000 ????
    322  3000 ????	       00 18	   _18	      =	$18
    323  3000 ????
    324  3000 ????	       00 16	   _16	      =	$16
    325  3000 ????
    326  3000 ????	       00 14	   _14	      =	$14
    327  3000 ????
    328  3000 ????	       00 12	   _12	      =	$12
    329  3000 ????
    330  3000 ????	       00 10	   _10	      =	$10
    331  3000 ????
    332  3000 ????	       00 0e	   _0E	      =	$0E
    333  3000 ????
    334  3000 ????	       00 0c	   _0C	      =	$0C
    335  3000 ????
    336  3000 ????	       00 0a	   _0A	      =	$0A
    337  3000 ????
    338  3000 ????	       00 08	   _08	      =	$08
    339  3000 ????
    340  3000 ????	       00 06	   _06	      =	$06
    341  3000 ????
    342  3000 ????	       00 04	   _04	      =	$04
    343  3000 ????
    344  3000 ????	       00 02	   _02	      =	$02
    345  3000 ????
    346  3000 ????	       00 00	   _00	      =	$00
    347  3000 ????
    348  3000 ????	       00 08	   scback     =	#$08
    349  3000 ????
    350  3000 ????	       00 94	   _M_Edge_Right =	148
    351  3000 ????
    352  3000 ????	       00 0e	   _M_Edge_Left =	14
    353  3000 ????
    354  3000 ????	       00 58	   _M_Edge_Bottom =	88
    355  3000 ????
    356  3000 ????	       00 02	   _M_Edge_Top =	2
    357  3000 ????
    358  3000 ????	       00 4c	   player_max_y =	76
    359  3000 ????
    360  3000 ????	       00 02	   player_min_y =	2
    361  3000 ????
    362  3000 ????	       00 86	   player_max_x =	134
    363  3000 ????
    364  3000 ????	       00 0a	   player_min_x =	10
    365  3000 ????
    366  3000 ????	       00 01	   pfscore    =	1
    367  3000 ????
    368  3000 ????	       00 04	   pfres      =	4
    369  3000 ????
    370  3000 ????	       00 01	   superchip  =	1
    371  3000 ????	       00 01	   bs_mask    =	1
    372  3000 ????	       00 08	   bankswitch =	8
    373  3000 ????	       1f f8	   bankswitch_hotspot =	$1FF8
    374  3000 ????	       00 01	   PFcolors   =	1
    375  3000 ????	       00 01	   player1colors =	1
------- FILE 2600basic.h
      7  3000 ????
      8  3000 ????	       00 80	   player0x   =	$80
      9  3000 ????	       00 81	   player1x   =	$81
     10  3000 ????	       00 82	   missile0x  =	$82
     11  3000 ????	       00 83	   missile1x  =	$83
     12  3000 ????	       00 84	   ballx      =	$84
     13  3000 ????
     14  3000 ????	       00 85	   objecty    =	$85
     15  3000 ????	       00 85	   player0y   =	$85
     16  3000 ????	       00 86	   player1y   =	$86
     17  3000 ????	       00 87	   missile1height =	$87
     18  3000 ????	       00 88	   missile1y  =	$88
     19  3000 ????	       00 89	   bally      =	$89
     20  3000 ????
     21  3000 ????	       00 87	   player1color =	$87	; replaces missile 1
     22  3000 ????
     23  3000 ????	       00 8a	   player0pointer =	$8A	;uses $8A-$8B
     24  3000 ????	       00 8a	   player0pointerlo =	$8A
     25  3000 ????	       00 8b	   player0pointerhi =	$8B
     26  3000 ????	       00 8c	   player1pointer =	$8C	; $8C-$8D
     27  3000 ????	       00 8c	   player1pointerlo =	$8C
     28  3000 ????	       00 8d	   player1pointerhi =	$8D
     29  3000 ????
     30  3000 ????	       00 8e	   player0height =	$8E
     31  3000 ????	       00 8f	   player1height =	$8F
     32  3000 ????	       00 90	   missile0height =	$90
     33  3000 ????	       00 91	   missile0y  =	$91
     34  3000 ????	       00 92	   ballheight =	$92
     35  3000 ????
     36  3000 ????	       00 90	   currentpaddle =	$90	; replaces missile 0 (and can't be used with playercolor)
     37  3000 ????	       00 91	   paddle     =	$91	; replaces missile 0
     38  3000 ????	       00 82	   player0colorstore =	$82	; replaces missile 0
     39  3000 ????	       00 90	   player0color =	$90	; replaces missile 0
     40  3000 ????
     41  3000 ????	       00 93	   score      =	$93	; $93-$95
     42  3000 ????	       00 96	   scorepointers =	$96	; $96-$9B = 6 bytes
     43  3000 ????	       00 9c	   temp1      =	$9C	;used by kernel.  can be used in program too, but
     44  3000 ????	       00 9d	   temp2      =	$9D	;are obliterated when drawscreen is called.
     45  3000 ????	       00 9e	   temp3      =	$9E
     46  3000 ????	       00 9f	   temp4      =	$9F
     47  3000 ????	       00 a0	   temp5      =	$A0
     48  3000 ????	       00 a1	   temp6      =	$A1
     49  3000 ????
     50  3000 ????	       00 a2	   rand       =	$A2
     51  3000 ????	       00 a3	   scorecolor =	$A3
     52  3000 ????
     53  3000 ????	       00 a4	   var0       =	$A4
     54  3000 ????	       00 a5	   var1       =	$A5
     55  3000 ????	       00 a6	   var2       =	$A6
     56  3000 ????	       00 a7	   var3       =	$A7
     57  3000 ????	       00 a8	   var4       =	$A8
     58  3000 ????	       00 a9	   var5       =	$A9
     59  3000 ????	       00 aa	   var6       =	$AA
     60  3000 ????	       00 ab	   var7       =	$AB
     61  3000 ????	       00 ac	   var8       =	$AC
     62  3000 ????	       00 ad	   var9       =	$AD
     63  3000 ????	       00 ae	   var10      =	$AE
     64  3000 ????	       00 af	   var11      =	$AF
     65  3000 ????	       00 b0	   var12      =	$B0
     66  3000 ????	       00 b1	   var13      =	$B1
     67  3000 ????	       00 b2	   var14      =	$B2
     68  3000 ????	       00 b3	   var15      =	$B3
     69  3000 ????	       00 b4	   var16      =	$B4
     70  3000 ????	       00 b5	   var17      =	$B5
     71  3000 ????	       00 b6	   var18      =	$B6
     72  3000 ????	       00 b7	   var19      =	$B7
     73  3000 ????	       00 b8	   var20      =	$B8
     74  3000 ????	       00 b9	   var21      =	$B9
     75  3000 ????	       00 ba	   var22      =	$BA
     76  3000 ????	       00 bb	   var23      =	$BB
     77  3000 ????	       00 bc	   var24      =	$BC
     78  3000 ????	       00 bd	   var25      =	$BD
     79  3000 ????	       00 be	   var26      =	$BE
     80  3000 ????	       00 bf	   var27      =	$BF
     81  3000 ????	       00 c0	   var28      =	$C0
     82  3000 ????	       00 c1	   var29      =	$C1
     83  3000 ????	       00 c2	   var30      =	$C2
     84  3000 ????	       00 c3	   var31      =	$C3
     85  3000 ????	       00 c4	   var32      =	$C4
     86  3000 ????	       00 c5	   var33      =	$C5
     87  3000 ????	       00 c6	   var34      =	$C6
     88  3000 ????	       00 c7	   var35      =	$C7
     89  3000 ????	       00 c8	   var36      =	$C8
     90  3000 ????	       00 c9	   var37      =	$C9
     91  3000 ????	       00 ca	   var38      =	$CA
     92  3000 ????	       00 cb	   var39      =	$CB
     93  3000 ????	       00 cc	   var40      =	$CC
     94  3000 ????	       00 cd	   var41      =	$CD
     95  3000 ????	       00 ce	   var42      =	$CE
     96  3000 ????	       00 cf	   var43      =	$CF
     97  3000 ????	       00 d0	   var44      =	$D0
     98  3000 ????	       00 d1	   var45      =	$D1
     99  3000 ????	       00 d2	   var46      =	$D2
    100  3000 ????	       00 d3	   var47      =	$D3
    101  3000 ????
    102  3000 ????	       00 d4	   A	      =	$d4
    103  3000 ????	       00 d4	   a	      =	$d4
    104  3000 ????	       00 d5	   B	      =	$d5
    105  3000 ????	       00 d5	   b	      =	$d5
    106  3000 ????	       00 d6	   C	      =	$d6
    107  3000 ????	       00 d6	   c	      =	$d6
    108  3000 ????	       00 d7	   D	      =	$d7
    109  3000 ????	       00 d7	   d	      =	$d7
    110  3000 ????	       00 d8	   E	      =	$d8
    111  3000 ????	       00 d8	   e	      =	$d8
    112  3000 ????	       00 d9	   F	      =	$d9
    113  3000 ????	       00 d9	   f	      =	$d9
    114  3000 ????	       00 da	   G	      =	$da
    115  3000 ????	       00 da	   g	      =	$da
    116  3000 ????	       00 db	   H	      =	$db
    117  3000 ????	       00 db	   h	      =	$db
    118  3000 ????	       00 dc	   I	      =	$dc
    119  3000 ????	       00 dc	   i	      =	$dc
    120  3000 ????	       00 dd	   J	      =	$dd
    121  3000 ????	       00 dd	   j	      =	$dd
    122  3000 ????	       00 de	   K	      =	$de
    123  3000 ????	       00 de	   k	      =	$de
    124  3000 ????	       00 df	   L	      =	$df
    125  3000 ????	       00 df	   l	      =	$df
    126  3000 ????	       00 e0	   M	      =	$e0
    127  3000 ????	       00 e0	   m	      =	$e0
    128  3000 ????	       00 e1	   N	      =	$e1
    129  3000 ????	       00 e1	   n	      =	$e1
    130  3000 ????	       00 e2	   O	      =	$e2
    131  3000 ????	       00 e2	   o	      =	$e2
    132  3000 ????	       00 e3	   P	      =	$e3
    133  3000 ????	       00 e3	   p	      =	$e3
    134  3000 ????	       00 e4	   Q	      =	$e4
    135  3000 ????	       00 e4	   q	      =	$e4
    136  3000 ????	       00 e5	   R	      =	$e5
    137  3000 ????	       00 e5	   r	      =	$e5
    138  3000 ????	       00 e6	   S	      =	$e6
    139  3000 ????	       00 e6	   s	      =	$e6
    140  3000 ????	       00 e7	   T	      =	$e7
    141  3000 ????	       00 e7	   t	      =	$e7
    142  3000 ????	       00 e8	   U	      =	$e8
    143  3000 ????	       00 e8	   u	      =	$e8
    144  3000 ????	       00 e9	   V	      =	$e9
    145  3000 ????	       00 e9	   v	      =	$e9
    146  3000 ????	       00 ea	   W	      =	$ea
    147  3000 ????	       00 ea	   w	      =	$ea
    148  3000 ????	       00 eb	   X	      =	$eb
    149  3000 ????	       00 eb	   x	      =	$eb
    150  3000 ????	       00 ec	   Y	      =	$ec
    151  3000 ????	       00 ec	   y	      =	$ec
    152  3000 ????	       00 ed	   Z	      =	$ed
    153  3000 ????	       00 ed	   z	      =	$ed
    154  3000 ????
    155  3000 ????	       00 ee	   temp7      =	$ee	; This is used to aid in bankswitching
    156  3000 ????	       00 ef	   playfieldpos =	$ef
    157  3000 ????
    158  3000 ????						; available for other uses, or if unused, provide more stack space
    159  3000 ????
    160  3000 ????	       00 f0	   aux1       =	$f0
    161  3000 ????	       00 f1	   aux2       =	$f1
    162  3000 ????	       00 f2	   aux3       =	$f2
    163  3000 ????	       00 f3	   aux4       =	$f3
    164  3000 ????	       00 f4	   aux5       =	$f4
    165  3000 ????	       00 f5	   aux6       =	$f5
    166  3000 ????
    167  3000 ????						; playfield color/height pointers
    168  3000 ????	       00 f0	   pfcolortable =	$f0	; and $d5
    169  3000 ????	       00 f0	   pfheighttable =	$f0	; and $d5
    170  3000 ????						; the above pointers are the same because if color and height are both used together,
    171  3000 ????						; they must used absolute indexed and cannot use pointers
    172  3000 ????
    173  3000 ????	       00 f2	   lifepointer =	$f2	; pointer to "lives" shape
    174  3000 ????						; upper 3 bits of $f2 contain the number of lives
    175  3000 ????	       00 f4	   lifecolor  =	$f4
    176  3000 ????	       00 f3	   lives      =	$f3	; # lives >> 5
    177  3000 ????	       00 f5	   statusbarlength =	$f5	; only uses upper 5 bits; other bits free
    178  3000 ????
    179  3000 ????	       00 f2	   pfscore1   =	$f2	; optional playfield bytes in score
    180  3000 ????	       00 f3	   pfscore2   =	$f3
    181  3000 ????	       00 f4	   pfscorecolor =	$f4
    182  3000 ????
    183  3000 ????	       00 f6	   stack1     =	$f6
    184  3000 ????	       00 f7	   stack2     =	$f7
    185  3000 ????	       00 f8	   stack3     =	$f8
    186  3000 ????	       00 f9	   stack4     =	$f9
    187  3000 ????						; the stack bytes above may be used in the kernel
    188  3000 ????						; stack = F6-F7, F8-F9, FA-FB, FC-FD, FE-FF
    189  3000 ????
    190  3000 ????				      MAC	return
    191  3000 ????				      ifnconst	bankswitch
    192  3000 ????				      rts
    193  3000 ????				      else
    194  3000 ????				      jmp	BS_return
    195  3000 ????				      endif
    196  3000 ????				      ENDM		; auto-return from either a regular or bankswitched module
    197  3000 ????
    198  3000 ????				      ifconst	superchip
    199  3000 ????	       10 d0	   playfieldbase =	$10D0
------- FILE superchip.h LEVEL 3 PASS 3
      0  3000 ????				      include	superchip.h
      1  3000 ????						; Provided under the CC0 license. See the included LICENSE.txt for details.
      2  3000 ????
      3  3000 ????	       f0 00	   write_RAM  =	$F000
      4  3000 ????	       f0 00	   wRAM       =	$F000
      5  3000 ????	       f0 00	   w000       =	$F000
      6  3000 ????	       f0 01	   w001       =	$F001
      7  3000 ????	       f0 02	   w002       =	$F002
      8  3000 ????	       f0 03	   w003       =	$F003
      9  3000 ????	       f0 04	   w004       =	$F004
     10  3000 ????	       f0 05	   w005       =	$F005
     11  3000 ????	       f0 06	   w006       =	$F006
     12  3000 ????	       f0 07	   w007       =	$F007
     13  3000 ????	       f0 08	   w008       =	$F008
     14  3000 ????	       f0 09	   w009       =	$F009
     15  3000 ????	       f0 0a	   w010       =	$F00A
     16  3000 ????	       f0 0b	   w011       =	$F00B
     17  3000 ????	       f0 0c	   w012       =	$F00C
     18  3000 ????	       f0 0d	   w013       =	$F00D
     19  3000 ????	       f0 0e	   w014       =	$F00E
     20  3000 ????	       f0 0f	   w015       =	$F00F
     21  3000 ????	       f0 10	   w016       =	$F010
     22  3000 ????	       f0 11	   w017       =	$F011
     23  3000 ????	       f0 12	   w018       =	$F012
     24  3000 ????	       f0 13	   w019       =	$F013
     25  3000 ????	       f0 14	   w020       =	$F014
     26  3000 ????	       f0 15	   w021       =	$F015
     27  3000 ????	       f0 16	   w022       =	$F016
     28  3000 ????	       f0 17	   w023       =	$F017
     29  3000 ????	       f0 18	   w024       =	$F018
     30  3000 ????	       f0 19	   w025       =	$F019
     31  3000 ????	       f0 1a	   w026       =	$F01A
     32  3000 ????	       f0 1b	   w027       =	$F01B
     33  3000 ????	       f0 1c	   w028       =	$F01C
     34  3000 ????	       f0 1d	   w029       =	$F01D
     35  3000 ????	       f0 1e	   w030       =	$F01E
     36  3000 ????	       f0 1f	   w031       =	$F01F
     37  3000 ????	       f0 20	   w032       =	$F020
     38  3000 ????	       f0 21	   w033       =	$F021
     39  3000 ????	       f0 22	   w034       =	$F022
     40  3000 ????	       f0 23	   w035       =	$F023
     41  3000 ????	       f0 24	   w036       =	$F024
     42  3000 ????	       f0 25	   w037       =	$F025
     43  3000 ????	       f0 26	   w038       =	$F026
     44  3000 ????	       f0 27	   w039       =	$F027
     45  3000 ????	       f0 28	   w040       =	$F028
     46  3000 ????	       f0 29	   w041       =	$F029
     47  3000 ????	       f0 2a	   w042       =	$F02A
     48  3000 ????	       f0 2b	   w043       =	$F02B
     49  3000 ????	       f0 2c	   w044       =	$F02C
     50  3000 ????	       f0 2d	   w045       =	$F02D
     51  3000 ????	       f0 2e	   w046       =	$F02E
     52  3000 ????	       f0 2f	   w047       =	$F02F
     53  3000 ????	       f0 30	   w048       =	$F030
     54  3000 ????	       f0 31	   w049       =	$F031
     55  3000 ????	       f0 32	   w050       =	$F032
     56  3000 ????	       f0 33	   w051       =	$F033
     57  3000 ????	       f0 34	   w052       =	$F034
     58  3000 ????	       f0 35	   w053       =	$F035
     59  3000 ????	       f0 36	   w054       =	$F036
     60  3000 ????	       f0 37	   w055       =	$F037
     61  3000 ????	       f0 38	   w056       =	$F038
     62  3000 ????	       f0 39	   w057       =	$F039
     63  3000 ????	       f0 3a	   w058       =	$F03A
     64  3000 ????	       f0 3b	   w059       =	$F03B
     65  3000 ????	       f0 3c	   w060       =	$F03C
     66  3000 ????	       f0 3d	   w061       =	$F03D
     67  3000 ????	       f0 3e	   w062       =	$F03E
     68  3000 ????	       f0 3f	   w063       =	$F03F
     69  3000 ????	       f0 40	   w064       =	$F040
     70  3000 ????	       f0 41	   w065       =	$F041
     71  3000 ????	       f0 42	   w066       =	$F042
     72  3000 ????	       f0 43	   w067       =	$F043
     73  3000 ????	       f0 44	   w068       =	$F044
     74  3000 ????	       f0 45	   w069       =	$F045
     75  3000 ????	       f0 46	   w070       =	$F046
     76  3000 ????	       f0 47	   w071       =	$F047
     77  3000 ????	       f0 48	   w072       =	$F048
     78  3000 ????	       f0 49	   w073       =	$F049
     79  3000 ????	       f0 4a	   w074       =	$F04A
     80  3000 ????	       f0 4b	   w075       =	$F04B
     81  3000 ????	       f0 4c	   w076       =	$F04C
     82  3000 ????	       f0 4d	   w077       =	$F04D
     83  3000 ????	       f0 4e	   w078       =	$F04E
     84  3000 ????	       f0 4f	   w079       =	$F04F
     85  3000 ????	       f0 50	   w080       =	$F050
     86  3000 ????	       f0 51	   w081       =	$F051
     87  3000 ????	       f0 52	   w082       =	$F052
     88  3000 ????	       f0 53	   w083       =	$F053
     89  3000 ????	       f0 54	   w084       =	$F054
     90  3000 ????	       f0 55	   w085       =	$F055
     91  3000 ????	       f0 56	   w086       =	$F056
     92  3000 ????	       f0 57	   w087       =	$F057
     93  3000 ????	       f0 58	   w088       =	$F058
     94  3000 ????	       f0 59	   w089       =	$F059
     95  3000 ????	       f0 5a	   w090       =	$F05A
     96  3000 ????	       f0 5b	   w091       =	$F05B
     97  3000 ????	       f0 5c	   w092       =	$F05C
     98  3000 ????	       f0 5d	   w093       =	$F05D
     99  3000 ????	       f0 5e	   w094       =	$F05E
    100  3000 ????	       f0 5f	   w095       =	$F05F
    101  3000 ????	       f0 60	   w096       =	$F060
    102  3000 ????	       f0 61	   w097       =	$F061
    103  3000 ????	       f0 62	   w098       =	$F062
    104  3000 ????	       f0 63	   w099       =	$F063
    105  3000 ????	       f0 64	   w100       =	$F064
    106  3000 ????	       f0 65	   w101       =	$F065
    107  3000 ????	       f0 66	   w102       =	$F066
    108  3000 ????	       f0 67	   w103       =	$F067
    109  3000 ????	       f0 68	   w104       =	$F068
    110  3000 ????	       f0 69	   w105       =	$F069
    111  3000 ????	       f0 6a	   w106       =	$F06A
    112  3000 ????	       f0 6b	   w107       =	$F06B
    113  3000 ????	       f0 6c	   w108       =	$F06C
    114  3000 ????	       f0 6d	   w109       =	$F06D
    115  3000 ????	       f0 6e	   w110       =	$F06E
    116  3000 ????	       f0 6f	   w111       =	$F06F
    117  3000 ????	       f0 70	   w112       =	$F070
    118  3000 ????	       f0 71	   w113       =	$F071
    119  3000 ????	       f0 72	   w114       =	$F072
    120  3000 ????	       f0 73	   w115       =	$F073
    121  3000 ????	       f0 74	   w116       =	$F074
    122  3000 ????	       f0 75	   w117       =	$F075
    123  3000 ????	       f0 76	   w118       =	$F076
    124  3000 ????	       f0 77	   w119       =	$F077
    125  3000 ????	       f0 78	   w120       =	$F078
    126  3000 ????	       f0 79	   w121       =	$F079
    127  3000 ????	       f0 7a	   w122       =	$F07A
    128  3000 ????	       f0 7b	   w123       =	$F07B
    129  3000 ????	       f0 7c	   w124       =	$F07C
    130  3000 ????	       f0 7d	   w125       =	$F07D
    131  3000 ????	       f0 7e	   w126       =	$F07E
    132  3000 ????	       f0 7f	   w127       =	$F07F
    133  3000 ????
    134  3000 ????	       f0 80	   read_RAM   =	$F080
    135  3000 ????	       f0 80	   rRAM       =	$F080
    136  3000 ????	       f0 80	   r000       =	$F080
    137  3000 ????	       f0 81	   r001       =	$F081
    138  3000 ????	       f0 82	   r002       =	$F082
    139  3000 ????	       f0 83	   r003       =	$F083
    140  3000 ????	       f0 84	   r004       =	$F084
    141  3000 ????	       f0 85	   r005       =	$F085
    142  3000 ????	       f0 86	   r006       =	$F086
    143  3000 ????	       f0 87	   r007       =	$F087
    144  3000 ????	       f0 88	   r008       =	$F088
    145  3000 ????	       f0 89	   r009       =	$F089
    146  3000 ????	       f0 8a	   r010       =	$F08A
    147  3000 ????	       f0 8b	   r011       =	$F08B
    148  3000 ????	       f0 8c	   r012       =	$F08C
    149  3000 ????	       f0 8d	   r013       =	$F08D
    150  3000 ????	       f0 8e	   r014       =	$F08E
    151  3000 ????	       f0 8f	   r015       =	$F08F
    152  3000 ????	       f0 90	   r016       =	$F090
    153  3000 ????	       f0 91	   r017       =	$F091
    154  3000 ????	       f0 92	   r018       =	$F092
    155  3000 ????	       f0 93	   r019       =	$F093
    156  3000 ????	       f0 94	   r020       =	$F094
    157  3000 ????	       f0 95	   r021       =	$F095
    158  3000 ????	       f0 96	   r022       =	$F096
    159  3000 ????	       f0 97	   r023       =	$F097
    160  3000 ????	       f0 98	   r024       =	$F098
    161  3000 ????	       f0 99	   r025       =	$F099
    162  3000 ????	       f0 9a	   r026       =	$F09A
    163  3000 ????	       f0 9b	   r027       =	$F09B
    164  3000 ????	       f0 9c	   r028       =	$F09C
    165  3000 ????	       f0 9d	   r029       =	$F09D
    166  3000 ????	       f0 9e	   r030       =	$F09E
    167  3000 ????	       f0 9f	   r031       =	$F09F
    168  3000 ????	       f0 a0	   r032       =	$F0A0
    169  3000 ????	       f0 a1	   r033       =	$F0A1
    170  3000 ????	       f0 a2	   r034       =	$F0A2
    171  3000 ????	       f0 a3	   r035       =	$F0A3
    172  3000 ????	       f0 a4	   r036       =	$F0A4
    173  3000 ????	       f0 a5	   r037       =	$F0A5
    174  3000 ????	       f0 a6	   r038       =	$F0A6
    175  3000 ????	       f0 a7	   r039       =	$F0A7
    176  3000 ????	       f0 a8	   r040       =	$F0A8
    177  3000 ????	       f0 a9	   r041       =	$F0A9
    178  3000 ????	       f0 aa	   r042       =	$F0AA
    179  3000 ????	       f0 ab	   r043       =	$F0AB
    180  3000 ????	       f0 ac	   r044       =	$F0AC
    181  3000 ????	       f0 ad	   r045       =	$F0AD
    182  3000 ????	       f0 ae	   r046       =	$F0AE
    183  3000 ????	       f0 af	   r047       =	$F0AF
    184  3000 ????	       f0 b0	   r048       =	$F0B0
    185  3000 ????	       f0 b1	   r049       =	$F0B1
    186  3000 ????	       f0 b2	   r050       =	$F0B2
    187  3000 ????	       f0 b3	   r051       =	$F0B3
    188  3000 ????	       f0 b4	   r052       =	$F0B4
    189  3000 ????	       f0 b5	   r053       =	$F0B5
    190  3000 ????	       f0 b6	   r054       =	$F0B6
    191  3000 ????	       f0 b7	   r055       =	$F0B7
    192  3000 ????	       f0 b8	   r056       =	$F0B8
    193  3000 ????	       f0 b9	   r057       =	$F0B9
    194  3000 ????	       f0 ba	   r058       =	$F0BA
    195  3000 ????	       f0 bb	   r059       =	$F0BB
    196  3000 ????	       f0 bc	   r060       =	$F0BC
    197  3000 ????	       f0 bd	   r061       =	$F0BD
    198  3000 ????	       f0 be	   r062       =	$F0BE
    199  3000 ????	       f0 bf	   r063       =	$F0BF
    200  3000 ????	       f0 c0	   r064       =	$F0C0
    201  3000 ????	       f0 c1	   r065       =	$F0C1
    202  3000 ????	       f0 c2	   r066       =	$F0C2
    203  3000 ????	       f0 c3	   r067       =	$F0C3
    204  3000 ????	       f0 c4	   r068       =	$F0C4
    205  3000 ????	       f0 c5	   r069       =	$F0C5
    206  3000 ????	       f0 c6	   r070       =	$F0C6
    207  3000 ????	       f0 c7	   r071       =	$F0C7
    208  3000 ????	       f0 c8	   r072       =	$F0C8
    209  3000 ????	       f0 c9	   r073       =	$F0C9
    210  3000 ????	       f0 ca	   r074       =	$F0CA
    211  3000 ????	       f0 cb	   r075       =	$F0CB
    212  3000 ????	       f0 cc	   r076       =	$F0CC
    213  3000 ????	       f0 cd	   r077       =	$F0CD
    214  3000 ????	       f0 ce	   r078       =	$F0CE
    215  3000 ????	       f0 cf	   r079       =	$F0CF
    216  3000 ????	       f0 d0	   r080       =	$F0D0
    217  3000 ????	       f0 d1	   r081       =	$F0D1
    218  3000 ????	       f0 d2	   r082       =	$F0D2
    219  3000 ????	       f0 d3	   r083       =	$F0D3
    220  3000 ????	       f0 d4	   r084       =	$F0D4
    221  3000 ????	       f0 d5	   r085       =	$F0D5
    222  3000 ????	       f0 d6	   r086       =	$F0D6
    223  3000 ????	       f0 d7	   r087       =	$F0D7
    224  3000 ????	       f0 d8	   r088       =	$F0D8
    225  3000 ????	       f0 d9	   r089       =	$F0D9
    226  3000 ????	       f0 da	   r090       =	$F0DA
    227  3000 ????	       f0 db	   r091       =	$F0DB
    228  3000 ????	       f0 dc	   r092       =	$F0DC
    229  3000 ????	       f0 dd	   r093       =	$F0DD
    230  3000 ????	       f0 de	   r094       =	$F0DE
    231  3000 ????	       f0 df	   r095       =	$F0DF
    232  3000 ????	       f0 e0	   r096       =	$F0E0
    233  3000 ????	       f0 e1	   r097       =	$F0E1
    234  3000 ????	       f0 e2	   r098       =	$F0E2
    235  3000 ????	       f0 e3	   r099       =	$F0E3
    236  3000 ????	       f0 e4	   r100       =	$F0E4
    237  3000 ????	       f0 e5	   r101       =	$F0E5
    238  3000 ????	       f0 e6	   r102       =	$F0E6
    239  3000 ????	       f0 e7	   r103       =	$F0E7
    240  3000 ????	       f0 e8	   r104       =	$F0E8
    241  3000 ????	       f0 e9	   r105       =	$F0E9
    242  3000 ????	       f0 ea	   r106       =	$F0EA
    243  3000 ????	       f0 eb	   r107       =	$F0EB
    244  3000 ????	       f0 ec	   r108       =	$F0EC
    245  3000 ????	       f0 ed	   r109       =	$F0ED
    246  3000 ????	       f0 ee	   r110       =	$F0EE
    247  3000 ????	       f0 ef	   r111       =	$F0EF
    248  3000 ????	       f0 f0	   r112       =	$F0F0
    249  3000 ????	       f0 f1	   r113       =	$F0F1
    250  3000 ????	       f0 f2	   r114       =	$F0F2
    251  3000 ????	       f0 f3	   r115       =	$F0F3
    252  3000 ????	       f0 f4	   r116       =	$F0F4
    253  3000 ????	       f0 f5	   r117       =	$F0F5
    254  3000 ????	       f0 f6	   r118       =	$F0F6
    255  3000 ????	       f0 f7	   r119       =	$F0F7
    256  3000 ????	       f0 f8	   r120       =	$F0F8
    257  3000 ????	       f0 f9	   r121       =	$F0F9
    258  3000 ????	       f0 fa	   r122       =	$F0FA
    259  3000 ????	       f0 fb	   r123       =	$F0FB
    260  3000 ????	       f0 fc	   r124       =	$F0FC
    261  3000 ????	       f0 fd	   r125       =	$F0FD
    262  3000 ????	       f0 fe	   r126       =	$F0FE
    263  3000 ????	       f0 ff	   r127       =	$F0FF
------- FILE 2600basic.h
    201  3000 ????			  -	      else
    202  3000 ????			  -playfieldbase =	$A4
    203  3000 ????				      endif
    204  3000 ????
    205  3000 ????				      ifnconst	pfhalfwidth
    206  3000 ????	       00 04	   pfwidth    =	4
    207  3000 ????	       00 0e	   PF1L       =	PF1
    208  3000 ????	       00 0f	   PF2L       =	PF2
    209  3000 ????	       00 0e	   PF1R       =	PF1
    210  3000 ????	       00 0f	   PF2R       =	PF2
    211  3000 ????	       00 00	   pfadjust   =	0
    212  3000 ????			  -	      else
    213  3000 ????			  -pfwidth    =	2
    214  3000 ????			  -	      ifconst	pfcenter
    215  3000 ????			  -PF1L       =	$3F	; no effect
    216  3000 ????			  -PF2L       =	PF2
    217  3000 ????			  -PF1R       =	$3F
    218  3000 ????			  -PF2R       =	PF2	; no effect
    219  3000 ????			  -pfadjust   =	1
    220  3000 ????			  -	      else
    221  3000 ????			  -PF1L       =	PF1
    222  3000 ????			  -PF2L       =	PF2
    223  3000 ????			  -PF1R       =	$3F	; no effect
    224  3000 ????			  -PF2R       =	$3F	; no effect
    225  3000 ????			  -pfadjust   =	0
    226  3000 ????			  -	      endif
    227  3000 ????				      endif
    228  3000 ????
    229  3000 ????						; define playfield start based on height
    230  3000 ????			  -	      ifnconst	pfres
    231  3000 ????			  -playfield  =	playfieldbase
    232  3000 ????				      else
    233  3000 ????	       10 f0	   playfield  =	playfieldbase-(pfres-12*(4/pfwidth))*pfwidth
    234  3000 ????				      endif
------- FILE d:\Firmaplus\Firmaplus_intern\Atari\PlusROM\Projekte-batariBasic\CaveApocalypse\C.A.V.E. Apocalypse.bas.asm
------- FILE 2600basic_variable_redefs.h LEVEL 2 PASS 3
      0  3000 ????				      include	"2600basic_variable_redefs.h"
      1  3000 ????						; This file contains variable mapping and other information for the current project.
      2  3000 ????
      3  3000 ????	       00 23	   bscode_length =	35
      4  3000 ????	       00 1d	   _SD_Touch_Enemy_length =	.skipL0371-_SD_Touch_Enemy
      5  3000 ????
      6  3000 ????	       00 21	   _SD_Shoot_Enemy_length =	.skipL0370-_SD_Shoot_Enemy
      7  3000 ????
      8  3000 ????	       00 45	   _SD_Shoot_Miss_length =	.skipL0369-_SD_Shoot_Miss
      9  3000 ????
     10  3000 ????	       00 35	   _SD_Shot_Wall_length =	.skipL0368-_SD_Shot_Wall
     11  3000 ????
     12  3000 ????	       f0 6a	   w_room_definition_start =	w106
     13  3000 ????
     14  3000 ????	       f0 6a	   w_P0_type_and_range =	w106
     15  3000 ????
     16  3000 ????	       f0 ea	   r_P0_type_and_range =	r106
     17  3000 ????
     18  3000 ????	       f0 6b	   w_enemy_y_startpos =	w107
     19  3000 ????
     20  3000 ????	       f0 eb	   r_enemy_y_startpos =	r107
     21  3000 ????
     22  3000 ????	       f0 6c	   w_enemy_x_startpos =	w108
     23  3000 ????
     24  3000 ????	       f0 ec	   r_enemy_x_startpos =	r108
     25  3000 ????
     26  3000 ????	       f0 6d	   w_extra_wall_width =	w109
     27  3000 ????
     28  3000 ????	       f0 ed	   r_extra_wall_width =	r109
     29  3000 ????
     30  3000 ????	       f0 6e	   w_extra_wall_type =	w110
     31  3000 ????
     32  3000 ????	       f0 ee	   r_extra_wall_type =	r110
     33  3000 ????
     34  3000 ????	       f0 6f	   w_extra_wall_startpos =	w111
     35  3000 ????
     36  3000 ????	       f0 ef	   r_extra_wall_startpos =	r111
     37  3000 ????
     38  3000 ????	       00 ec	   _Bit7_M0_Moving =	y
     39  3000 ????
     40  3000 ????	       00 ec	   _Bit6_Flip_P0 =	y
     41  3000 ????
     42  3000 ????	       00 ec	   _Bit1_Wall_Dir =	y
     43  3000 ????
     44  3000 ????	       00 ec	   _Bit0_P0_Dir =	y
     45  3000 ????
     46  3000 ????	       00 ec	   _BitOp_misc =	y
     47  3000 ????
     48  3000 ????	       00 86	   P1y_position =	player1y
     49  3000 ????	       00 e9	   P1y_velocity =	v
     50  3000 ????	       00 91	   M0y_position =	missile0y
     51  3000 ????	       00 e6	   M0y_velocity =	s
     52  3000 ????	       00 df	   roommate_type =	l
     53  3000 ????
     54  3000 ????	       00 de	   roommate_move_x =	k
     55  3000 ????
     56  3000 ????	       00 dd	   extra_wall_move_x =	j
     57  3000 ????
     58  3000 ????	       00 dc	   _Ch0_Counter =	i
     59  3000 ????
     60  3000 ????	       00 db	   _Ch0_Duration =	h
     61  3000 ????
     62  3000 ????	       00 da	   _Ch0_Sound =	g
     63  3000 ????
     64  3000 ????	       00 d9	   P1_facing  =	f
     65  3000 ????
     66  3000 ????	       00 d8	   _Bit3_P1_Dir_Right =	e
     67  3000 ????
     68  3000 ????	       00 d8	   _Bit2_P1_Dir_Left =	e
     69  3000 ????
     70  3000 ????	       00 d8	   _Bit1_P1_Dir_Down =	e
     71  3000 ????
     72  3000 ????	       00 d8	   _Bit0_P1_Dir_Up =	e
     73  3000 ????
     74  3000 ????	       00 d8	   _BitOp_P1_Dir =	e
     75  3000 ????
     76  3000 ????	       00 d7	   _Bit3_M0_Dir_Right =	d
     77  3000 ????
     78  3000 ????	       00 d7	   _Bit2_M0_Dir_Left =	d
     79  3000 ????
     80  3000 ????	       00 d7	   _Bit1_M0_Dir_Down =	d
     81  3000 ????
     82  3000 ????	       00 d7	   _Bit0_M0_Dir_Up =	d
     83  3000 ????
     84  3000 ????	       00 d7	   _BitOp_M0_Dir =	d
     85  3000 ????
     86  3000 ????	       00 d6	   frame_counter =	c
     87  3000 ????
     88  3000 ????	       00 d5	   delay_counter =	b
     89  3000 ????
     90  3000 ????	       00 d4	   request_pending =	a
     91  3000 ????
     92  3000 ????	       00 fe	   _FE	      =	$FE
     93  3000 ????
     94  3000 ????	       00 fc	   _FC	      =	$FC
     95  3000 ????
     96  3000 ????	       00 fa	   _FA	      =	$FA
     97  3000 ????
     98  3000 ????	       00 f8	   _F8	      =	$F8
     99  3000 ????
    100  3000 ????	       00 f6	   _F6	      =	$F6
    101  3000 ????
    102  3000 ????	       00 f4	   _F4	      =	$F4
    103  3000 ????
    104  3000 ????	       00 f2	   _F2	      =	$F2
    105  3000 ????
    106  3000 ????	       00 f0	   _F0	      =	$F0
    107  3000 ????
    108  3000 ????	       00 ee	   _EE	      =	$EE
    109  3000 ????
    110  3000 ????	       00 ec	   _EC	      =	$EC
    111  3000 ????
    112  3000 ????	       00 ea	   _EA	      =	$EA
    113  3000 ????
    114  3000 ????	       00 e8	   _E8	      =	$E8
    115  3000 ????
    116  3000 ????	       00 e6	   _E6	      =	$E6
    117  3000 ????
    118  3000 ????	       00 e4	   _E4	      =	$E4
    119  3000 ????
    120  3000 ????	       00 e2	   _E2	      =	$E2
    121  3000 ????
    122  3000 ????	       00 e0	   _E0	      =	$E0
    123  3000 ????
    124  3000 ????	       00 de	   _DE	      =	$DE
    125  3000 ????
    126  3000 ????	       00 dc	   _DC	      =	$DC
    127  3000 ????
    128  3000 ????	       00 da	   _DA	      =	$DA
    129  3000 ????
    130  3000 ????	       00 d8	   _D8	      =	$D8
    131  3000 ????
    132  3000 ????	       00 d6	   _D6	      =	$D6
    133  3000 ????
    134  3000 ????	       00 d4	   _D4	      =	$D4
    135  3000 ????
    136  3000 ????	       00 d2	   _D2	      =	$D2
    137  3000 ????
    138  3000 ????	       00 d0	   _D0	      =	$D0
    139  3000 ????
    140  3000 ????	       00 ce	   _CE	      =	$CE
    141  3000 ????
    142  3000 ????	       00 cc	   _CC	      =	$CC
    143  3000 ????
    144  3000 ????	       00 ca	   _CA	      =	$CA
    145  3000 ????
    146  3000 ????	       00 c8	   _C8	      =	$C8
    147  3000 ????
    148  3000 ????	       00 c6	   _C6	      =	$C6
    149  3000 ????
    150  3000 ????	       00 c4	   _C4	      =	$C4
    151  3000 ????
    152  3000 ????	       00 c2	   _C2	      =	$C2
    153  3000 ????
    154  3000 ????	       00 c0	   _C0	      =	$C0
    155  3000 ????
    156  3000 ????	       00 be	   _BE	      =	$BE
    157  3000 ????
    158  3000 ????	       00 bc	   _BC	      =	$BC
    159  3000 ????
    160  3000 ????	       00 ba	   _BA	      =	$BA
    161  3000 ????
    162  3000 ????	       00 b8	   _B8	      =	$B8
    163  3000 ????
    164  3000 ????	       00 b6	   _B6	      =	$B6
    165  3000 ????
    166  3000 ????	       00 b4	   _B4	      =	$B4
    167  3000 ????
    168  3000 ????	       00 b2	   _B2	      =	$B2
    169  3000 ????
    170  3000 ????	       00 b0	   _B0	      =	$B0
    171  3000 ????
    172  3000 ????	       00 ae	   _AE	      =	$AE
    173  3000 ????
    174  3000 ????	       00 ac	   _AC	      =	$AC
    175  3000 ????
    176  3000 ????	       00 aa	   _AA	      =	$AA
    177  3000 ????
    178  3000 ????	       00 a8	   _A8	      =	$A8
    179  3000 ????
    180  3000 ????	       00 a6	   _A6	      =	$A6
    181  3000 ????
    182  3000 ????	       00 a4	   _A4	      =	$A4
    183  3000 ????
    184  3000 ????	       00 a2	   _A2	      =	$A2
    185  3000 ????
    186  3000 ????	       00 a0	   _A0	      =	$A0
    187  3000 ????
    188  3000 ????	       00 9e	   _9E	      =	$9E
    189  3000 ????
    190  3000 ????	       00 9c	   _9C	      =	$9C
    191  3000 ????
    192  3000 ????	       00 9a	   _9A	      =	$9A
    193  3000 ????
    194  3000 ????	       00 98	   _98	      =	$98
    195  3000 ????
    196  3000 ????	       00 96	   _96	      =	$96
    197  3000 ????
    198  3000 ????	       00 94	   _94	      =	$94
    199  3000 ????
    200  3000 ????	       00 92	   _92	      =	$92
    201  3000 ????
    202  3000 ????	       00 90	   _90	      =	$90
    203  3000 ????
    204  3000 ????	       00 8e	   _8E	      =	$8E
    205  3000 ????
    206  3000 ????	       00 8c	   _8C	      =	$8C
    207  3000 ????
    208  3000 ????	       00 8a	   _8A	      =	$8A
    209  3000 ????
    210  3000 ????	       00 88	   _88	      =	$88
    211  3000 ????
    212  3000 ????	       00 86	   _86	      =	$86
    213  3000 ????
    214  3000 ????	       00 84	   _84	      =	$84
    215  3000 ????
    216  3000 ????	       00 82	   _82	      =	$82
    217  3000 ????
    218  3000 ????	       00 80	   _80	      =	$80
    219  3000 ????
    220  3000 ????	       00 7e	   _7E	      =	$7E
    221  3000 ????
    222  3000 ????	       00 7c	   _7C	      =	$7C
    223  3000 ????
    224  3000 ????	       00 7a	   _7A	      =	$7A
    225  3000 ????
    226  3000 ????	       00 78	   _78	      =	$78
    227  3000 ????
    228  3000 ????	       00 76	   _76	      =	$76
    229  3000 ????
    230  3000 ????	       00 74	   _74	      =	$74
    231  3000 ????
    232  3000 ????	       00 72	   _72	      =	$72
    233  3000 ????
    234  3000 ????	       00 70	   _70	      =	$70
    235  3000 ????
    236  3000 ????	       00 6e	   _6E	      =	$6E
    237  3000 ????
    238  3000 ????	       00 6c	   _6C	      =	$6C
    239  3000 ????
    240  3000 ????	       00 6a	   _6A	      =	$6A
    241  3000 ????
    242  3000 ????	       00 68	   _68	      =	$68
    243  3000 ????
    244  3000 ????	       00 66	   _66	      =	$66
    245  3000 ????
    246  3000 ????	       00 64	   _64	      =	$64
    247  3000 ????
    248  3000 ????	       00 62	   _62	      =	$62
    249  3000 ????
    250  3000 ????	       00 60	   _60	      =	$60
    251  3000 ????
    252  3000 ????	       00 5e	   _5E	      =	$5E
    253  3000 ????
    254  3000 ????	       00 5c	   _5C	      =	$5C
    255  3000 ????
    256  3000 ????	       00 5a	   _5A	      =	$5A
    257  3000 ????
    258  3000 ????	       00 58	   _58	      =	$58
    259  3000 ????
    260  3000 ????	       00 56	   _56	      =	$56
    261  3000 ????
    262  3000 ????	       00 54	   _54	      =	$54
    263  3000 ????
    264  3000 ????	       00 52	   _52	      =	$52
    265  3000 ????
    266  3000 ????	       00 50	   _50	      =	$50
    267  3000 ????
    268  3000 ????	       00 4e	   _4E	      =	$4E
    269  3000 ????
    270  3000 ????	       00 4c	   _4C	      =	$4C
    271  3000 ????
    272  3000 ????	       00 4a	   _4A	      =	$4A
    273  3000 ????
    274  3000 ????	       00 48	   _48	      =	$48
    275  3000 ????
    276  3000 ????	       00 46	   _46	      =	$46
    277  3000 ????
    278  3000 ????	       00 44	   _44	      =	$44
    279  3000 ????
    280  3000 ????	       00 42	   _42	      =	$42
    281  3000 ????
    282  3000 ????	       00 40	   _40	      =	$40
    283  3000 ????
    284  3000 ????	       00 3e	   _3E	      =	$3E
    285  3000 ????
    286  3000 ????	       00 3c	   _3C	      =	$3C
    287  3000 ????
    288  3000 ????	       00 3a	   _3A	      =	$3A
    289  3000 ????
    290  3000 ????	       00 38	   _38	      =	$38
    291  3000 ????
    292  3000 ????	       00 36	   _36	      =	$36
    293  3000 ????
    294  3000 ????	       00 34	   _34	      =	$34
    295  3000 ????
    296  3000 ????	       00 32	   _32	      =	$32
    297  3000 ????
    298  3000 ????	       00 30	   _30	      =	$30
    299  3000 ????
    300  3000 ????	       00 2e	   _2E	      =	$2E
    301  3000 ????
    302  3000 ????	       00 2c	   _2C	      =	$2C
    303  3000 ????
    304  3000 ????	       00 2a	   _2A	      =	$2A
    305  3000 ????
    306  3000 ????	       00 28	   _28	      =	$28
    307  3000 ????
    308  3000 ????	       00 26	   _26	      =	$26
    309  3000 ????
    310  3000 ????	       00 24	   _24	      =	$24
    311  3000 ????
    312  3000 ????	       00 22	   _22	      =	$22
    313  3000 ????
    314  3000 ????	       00 20	   _20	      =	$20
    315  3000 ????
    316  3000 ????	       00 1e	   _1E	      =	$1E
    317  3000 ????
    318  3000 ????	       00 1c	   _1C	      =	$1C
    319  3000 ????
    320  3000 ????	       00 1a	   _1A	      =	$1A
    321  3000 ????
    322  3000 ????	       00 18	   _18	      =	$18
    323  3000 ????
    324  3000 ????	       00 16	   _16	      =	$16
    325  3000 ????
    326  3000 ????	       00 14	   _14	      =	$14
    327  3000 ????
    328  3000 ????	       00 12	   _12	      =	$12
    329  3000 ????
    330  3000 ????	       00 10	   _10	      =	$10
    331  3000 ????
    332  3000 ????	       00 0e	   _0E	      =	$0E
    333  3000 ????
    334  3000 ????	       00 0c	   _0C	      =	$0C
    335  3000 ????
    336  3000 ????	       00 0a	   _0A	      =	$0A
    337  3000 ????
    338  3000 ????	       00 08	   _08	      =	$08
    339  3000 ????
    340  3000 ????	       00 06	   _06	      =	$06
    341  3000 ????
    342  3000 ????	       00 04	   _04	      =	$04
    343  3000 ????
    344  3000 ????	       00 02	   _02	      =	$02
    345  3000 ????
    346  3000 ????	       00 00	   _00	      =	$00
    347  3000 ????
    348  3000 ????	       00 08	   scback     =	#$08
    349  3000 ????
    350  3000 ????	       00 94	   _M_Edge_Right =	148
    351  3000 ????
    352  3000 ????	       00 0e	   _M_Edge_Left =	14
    353  3000 ????
    354  3000 ????	       00 58	   _M_Edge_Bottom =	88
    355  3000 ????
    356  3000 ????	       00 02	   _M_Edge_Top =	2
    357  3000 ????
    358  3000 ????	       00 4c	   player_max_y =	76
    359  3000 ????
    360  3000 ????	       00 02	   player_min_y =	2
    361  3000 ????
    362  3000 ????	       00 86	   player_max_x =	134
    363  3000 ????
    364  3000 ????	       00 0a	   player_min_x =	10
    365  3000 ????
    366  3000 ????	       00 01	   pfscore    =	1
    367  3000 ????
    368  3000 ????	       00 04	   pfres      =	4
    369  3000 ????
    370  3000 ????	       00 01	   superchip  =	1
    371  3000 ????	       00 01	   bs_mask    =	1
    372  3000 ????	       00 08	   bankswitch =	8
    373  3000 ????	       1f f8	   bankswitch_hotspot =	$1FF8
    374  3000 ????	       00 01	   PFcolors   =	1
    375  3000 ????	       00 01	   player1colors =	1
------- FILE d:\Firmaplus\Firmaplus_intern\Atari\PlusROM\Projekte-batariBasic\CaveApocalypse\C.A.V.E. Apocalypse.bas.asm
      8  3000 ????				      ifconst	bankswitch
      9  3000 ????				      if	bankswitch == 8
     10  1000					      ORG	$1000
     11  1000					      RORG	$D000
     12  1000					      endif
     13  1000				  -	      if	bankswitch == 16
     14  1000				  -	      ORG	$1000
     15  1000				  -	      RORG	$9000
     16  1000					      endif
     17  1000				  -	      if	bankswitch == 32
     18  1000				  -	      ORG	$1000
     19  1000				  -	      RORG	$1000
     20  1000					      endif
     21  1000				  -	      if	bankswitch == 64
     22  1000				  -	      ORG	$1000
     23  1000				  -	      RORG	$1000
     24  1000					      endif
     25  1000				  -	      else
     26  1000				  -	      ORG	$F000
     27  1000					      endif
     28  1000					      repeat	256
     29  1000		       ff		      .byte.b	$ff
     28  1000					      repend
     29  1001		       ff		      .byte.b	$ff
     28  1001					      repend
     29  1002		       ff		      .byte.b	$ff
     28  1002					      repend
     29  1003		       ff		      .byte.b	$ff
     28  1003					      repend
     29  1004		       ff		      .byte.b	$ff
     28  1004					      repend
     29  1005		       ff		      .byte.b	$ff
     28  1005					      repend
     29  1006		       ff		      .byte.b	$ff
     28  1006					      repend
     29  1007		       ff		      .byte.b	$ff
     28  1007					      repend
     29  1008		       ff		      .byte.b	$ff
     28  1008					      repend
     29  1009		       ff		      .byte.b	$ff
     28  1009					      repend
     29  100a		       ff		      .byte.b	$ff
     28  100a					      repend
     29  100b		       ff		      .byte.b	$ff
     28  100b					      repend
     29  100c		       ff		      .byte.b	$ff
     28  100c					      repend
     29  100d		       ff		      .byte.b	$ff
     28  100d					      repend
     29  100e		       ff		      .byte.b	$ff
     28  100e					      repend
     29  100f		       ff		      .byte.b	$ff
     28  100f					      repend
     29  1010		       ff		      .byte.b	$ff
     28  1010					      repend
     29  1011		       ff		      .byte.b	$ff
     28  1011					      repend
     29  1012		       ff		      .byte.b	$ff
     28  1012					      repend
     29  1013		       ff		      .byte.b	$ff
     28  1013					      repend
     29  1014		       ff		      .byte.b	$ff
     28  1014					      repend
     29  1015		       ff		      .byte.b	$ff
     28  1015					      repend
     29  1016		       ff		      .byte.b	$ff
     28  1016					      repend
     29  1017		       ff		      .byte.b	$ff
     28  1017					      repend
     29  1018		       ff		      .byte.b	$ff
     28  1018					      repend
     29  1019		       ff		      .byte.b	$ff
     28  1019					      repend
     29  101a		       ff		      .byte.b	$ff
     28  101a					      repend
     29  101b		       ff		      .byte.b	$ff
     28  101b					      repend
     29  101c		       ff		      .byte.b	$ff
     28  101c					      repend
     29  101d		       ff		      .byte.b	$ff
     28  101d					      repend
     29  101e		       ff		      .byte.b	$ff
     28  101e					      repend
     29  101f		       ff		      .byte.b	$ff
     28  101f					      repend
     29  1020		       ff		      .byte.b	$ff
     28  1020					      repend
     29  1021		       ff		      .byte.b	$ff
     28  1021					      repend
     29  1022		       ff		      .byte.b	$ff
     28  1022					      repend
     29  1023		       ff		      .byte.b	$ff
     28  1023					      repend
     29  1024		       ff		      .byte.b	$ff
     28  1024					      repend
     29  1025		       ff		      .byte.b	$ff
     28  1025					      repend
     29  1026		       ff		      .byte.b	$ff
     28  1026					      repend
     29  1027		       ff		      .byte.b	$ff
     28  1027					      repend
     29  1028		       ff		      .byte.b	$ff
     28  1028					      repend
     29  1029		       ff		      .byte.b	$ff
     28  1029					      repend
     29  102a		       ff		      .byte.b	$ff
     28  102a					      repend
     29  102b		       ff		      .byte.b	$ff
     28  102b					      repend
     29  102c		       ff		      .byte.b	$ff
     28  102c					      repend
     29  102d		       ff		      .byte.b	$ff
     28  102d					      repend
     29  102e		       ff		      .byte.b	$ff
     28  102e					      repend
     29  102f		       ff		      .byte.b	$ff
     28  102f					      repend
     29  1030		       ff		      .byte.b	$ff
     28  1030					      repend
     29  1031		       ff		      .byte.b	$ff
     28  1031					      repend
     29  1032		       ff		      .byte.b	$ff
     28  1032					      repend
     29  1033		       ff		      .byte.b	$ff
     28  1033					      repend
     29  1034		       ff		      .byte.b	$ff
     28  1034					      repend
     29  1035		       ff		      .byte.b	$ff
     28  1035					      repend
     29  1036		       ff		      .byte.b	$ff
     28  1036					      repend
     29  1037		       ff		      .byte.b	$ff
     28  1037					      repend
     29  1038		       ff		      .byte.b	$ff
     28  1038					      repend
     29  1039		       ff		      .byte.b	$ff
     28  1039					      repend
     29  103a		       ff		      .byte.b	$ff
     28  103a					      repend
     29  103b		       ff		      .byte.b	$ff
     28  103b					      repend
     29  103c		       ff		      .byte.b	$ff
     28  103c					      repend
     29  103d		       ff		      .byte.b	$ff
     28  103d					      repend
     29  103e		       ff		      .byte.b	$ff
     28  103e					      repend
     29  103f		       ff		      .byte.b	$ff
     28  103f					      repend
     29  1040		       ff		      .byte.b	$ff
     28  1040					      repend
     29  1041		       ff		      .byte.b	$ff
     28  1041					      repend
     29  1042		       ff		      .byte.b	$ff
     28  1042					      repend
     29  1043		       ff		      .byte.b	$ff
     28  1043					      repend
     29  1044		       ff		      .byte.b	$ff
     28  1044					      repend
     29  1045		       ff		      .byte.b	$ff
     28  1045					      repend
     29  1046		       ff		      .byte.b	$ff
     28  1046					      repend
     29  1047		       ff		      .byte.b	$ff
     28  1047					      repend
     29  1048		       ff		      .byte.b	$ff
     28  1048					      repend
     29  1049		       ff		      .byte.b	$ff
     28  1049					      repend
     29  104a		       ff		      .byte.b	$ff
     28  104a					      repend
     29  104b		       ff		      .byte.b	$ff
     28  104b					      repend
     29  104c		       ff		      .byte.b	$ff
     28  104c					      repend
     29  104d		       ff		      .byte.b	$ff
     28  104d					      repend
     29  104e		       ff		      .byte.b	$ff
     28  104e					      repend
     29  104f		       ff		      .byte.b	$ff
     28  104f					      repend
     29  1050		       ff		      .byte.b	$ff
     28  1050					      repend
     29  1051		       ff		      .byte.b	$ff
     28  1051					      repend
     29  1052		       ff		      .byte.b	$ff
     28  1052					      repend
     29  1053		       ff		      .byte.b	$ff
     28  1053					      repend
     29  1054		       ff		      .byte.b	$ff
     28  1054					      repend
     29  1055		       ff		      .byte.b	$ff
     28  1055					      repend
     29  1056		       ff		      .byte.b	$ff
     28  1056					      repend
     29  1057		       ff		      .byte.b	$ff
     28  1057					      repend
     29  1058		       ff		      .byte.b	$ff
     28  1058					      repend
     29  1059		       ff		      .byte.b	$ff
     28  1059					      repend
     29  105a		       ff		      .byte.b	$ff
     28  105a					      repend
     29  105b		       ff		      .byte.b	$ff
     28  105b					      repend
     29  105c		       ff		      .byte.b	$ff
     28  105c					      repend
     29  105d		       ff		      .byte.b	$ff
     28  105d					      repend
     29  105e		       ff		      .byte.b	$ff
     28  105e					      repend
     29  105f		       ff		      .byte.b	$ff
     28  105f					      repend
     29  1060		       ff		      .byte.b	$ff
     28  1060					      repend
     29  1061		       ff		      .byte.b	$ff
     28  1061					      repend
     29  1062		       ff		      .byte.b	$ff
     28  1062					      repend
     29  1063		       ff		      .byte.b	$ff
     28  1063					      repend
     29  1064		       ff		      .byte.b	$ff
     28  1064					      repend
     29  1065		       ff		      .byte.b	$ff
     28  1065					      repend
     29  1066		       ff		      .byte.b	$ff
     28  1066					      repend
     29  1067		       ff		      .byte.b	$ff
     28  1067					      repend
     29  1068		       ff		      .byte.b	$ff
     28  1068					      repend
     29  1069		       ff		      .byte.b	$ff
     28  1069					      repend
     29  106a		       ff		      .byte.b	$ff
     28  106a					      repend
     29  106b		       ff		      .byte.b	$ff
     28  106b					      repend
     29  106c		       ff		      .byte.b	$ff
     28  106c					      repend
     29  106d		       ff		      .byte.b	$ff
     28  106d					      repend
     29  106e		       ff		      .byte.b	$ff
     28  106e					      repend
     29  106f		       ff		      .byte.b	$ff
     28  106f					      repend
     29  1070		       ff		      .byte.b	$ff
     28  1070					      repend
     29  1071		       ff		      .byte.b	$ff
     28  1071					      repend
     29  1072		       ff		      .byte.b	$ff
     28  1072					      repend
     29  1073		       ff		      .byte.b	$ff
     28  1073					      repend
     29  1074		       ff		      .byte.b	$ff
     28  1074					      repend
     29  1075		       ff		      .byte.b	$ff
     28  1075					      repend
     29  1076		       ff		      .byte.b	$ff
     28  1076					      repend
     29  1077		       ff		      .byte.b	$ff
     28  1077					      repend
     29  1078		       ff		      .byte.b	$ff
     28  1078					      repend
     29  1079		       ff		      .byte.b	$ff
     28  1079					      repend
     29  107a		       ff		      .byte.b	$ff
     28  107a					      repend
     29  107b		       ff		      .byte.b	$ff
     28  107b					      repend
     29  107c		       ff		      .byte.b	$ff
     28  107c					      repend
     29  107d		       ff		      .byte.b	$ff
     28  107d					      repend
     29  107e		       ff		      .byte.b	$ff
     28  107e					      repend
     29  107f		       ff		      .byte.b	$ff
     28  107f					      repend
     29  1080		       ff		      .byte.b	$ff
     28  1080					      repend
     29  1081		       ff		      .byte.b	$ff
     28  1081					      repend
     29  1082		       ff		      .byte.b	$ff
     28  1082					      repend
     29  1083		       ff		      .byte.b	$ff
     28  1083					      repend
     29  1084		       ff		      .byte.b	$ff
     28  1084					      repend
     29  1085		       ff		      .byte.b	$ff
     28  1085					      repend
     29  1086		       ff		      .byte.b	$ff
     28  1086					      repend
     29  1087		       ff		      .byte.b	$ff
     28  1087					      repend
     29  1088		       ff		      .byte.b	$ff
     28  1088					      repend
     29  1089		       ff		      .byte.b	$ff
     28  1089					      repend
     29  108a		       ff		      .byte.b	$ff
     28  108a					      repend
     29  108b		       ff		      .byte.b	$ff
     28  108b					      repend
     29  108c		       ff		      .byte.b	$ff
     28  108c					      repend
     29  108d		       ff		      .byte.b	$ff
     28  108d					      repend
     29  108e		       ff		      .byte.b	$ff
     28  108e					      repend
     29  108f		       ff		      .byte.b	$ff
     28  108f					      repend
     29  1090		       ff		      .byte.b	$ff
     28  1090					      repend
     29  1091		       ff		      .byte.b	$ff
     28  1091					      repend
     29  1092		       ff		      .byte.b	$ff
     28  1092					      repend
     29  1093		       ff		      .byte.b	$ff
     28  1093					      repend
     29  1094		       ff		      .byte.b	$ff
     28  1094					      repend
     29  1095		       ff		      .byte.b	$ff
     28  1095					      repend
     29  1096		       ff		      .byte.b	$ff
     28  1096					      repend
     29  1097		       ff		      .byte.b	$ff
     28  1097					      repend
     29  1098		       ff		      .byte.b	$ff
     28  1098					      repend
     29  1099		       ff		      .byte.b	$ff
     28  1099					      repend
     29  109a		       ff		      .byte.b	$ff
     28  109a					      repend
     29  109b		       ff		      .byte.b	$ff
     28  109b					      repend
     29  109c		       ff		      .byte.b	$ff
     28  109c					      repend
     29  109d		       ff		      .byte.b	$ff
     28  109d					      repend
     29  109e		       ff		      .byte.b	$ff
     28  109e					      repend
     29  109f		       ff		      .byte.b	$ff
     28  109f					      repend
     29  10a0		       ff		      .byte.b	$ff
     28  10a0					      repend
     29  10a1		       ff		      .byte.b	$ff
     28  10a1					      repend
     29  10a2		       ff		      .byte.b	$ff
     28  10a2					      repend
     29  10a3		       ff		      .byte.b	$ff
     28  10a3					      repend
     29  10a4		       ff		      .byte.b	$ff
     28  10a4					      repend
     29  10a5		       ff		      .byte.b	$ff
     28  10a5					      repend
     29  10a6		       ff		      .byte.b	$ff
     28  10a6					      repend
     29  10a7		       ff		      .byte.b	$ff
     28  10a7					      repend
     29  10a8		       ff		      .byte.b	$ff
     28  10a8					      repend
     29  10a9		       ff		      .byte.b	$ff
     28  10a9					      repend
     29  10aa		       ff		      .byte.b	$ff
     28  10aa					      repend
     29  10ab		       ff		      .byte.b	$ff
     28  10ab					      repend
     29  10ac		       ff		      .byte.b	$ff
     28  10ac					      repend
     29  10ad		       ff		      .byte.b	$ff
     28  10ad					      repend
     29  10ae		       ff		      .byte.b	$ff
     28  10ae					      repend
     29  10af		       ff		      .byte.b	$ff
     28  10af					      repend
     29  10b0		       ff		      .byte.b	$ff
     28  10b0					      repend
     29  10b1		       ff		      .byte.b	$ff
     28  10b1					      repend
     29  10b2		       ff		      .byte.b	$ff
     28  10b2					      repend
     29  10b3		       ff		      .byte.b	$ff
     28  10b3					      repend
     29  10b4		       ff		      .byte.b	$ff
     28  10b4					      repend
     29  10b5		       ff		      .byte.b	$ff
     28  10b5					      repend
     29  10b6		       ff		      .byte.b	$ff
     28  10b6					      repend
     29  10b7		       ff		      .byte.b	$ff
     28  10b7					      repend
     29  10b8		       ff		      .byte.b	$ff
     28  10b8					      repend
     29  10b9		       ff		      .byte.b	$ff
     28  10b9					      repend
     29  10ba		       ff		      .byte.b	$ff
     28  10ba					      repend
     29  10bb		       ff		      .byte.b	$ff
     28  10bb					      repend
     29  10bc		       ff		      .byte.b	$ff
     28  10bc					      repend
     29  10bd		       ff		      .byte.b	$ff
     28  10bd					      repend
     29  10be		       ff		      .byte.b	$ff
     28  10be					      repend
     29  10bf		       ff		      .byte.b	$ff
     28  10bf					      repend
     29  10c0		       ff		      .byte.b	$ff
     28  10c0					      repend
     29  10c1		       ff		      .byte.b	$ff
     28  10c1					      repend
     29  10c2		       ff		      .byte.b	$ff
     28  10c2					      repend
     29  10c3		       ff		      .byte.b	$ff
     28  10c3					      repend
     29  10c4		       ff		      .byte.b	$ff
     28  10c4					      repend
     29  10c5		       ff		      .byte.b	$ff
     28  10c5					      repend
     29  10c6		       ff		      .byte.b	$ff
     28  10c6					      repend
     29  10c7		       ff		      .byte.b	$ff
     28  10c7					      repend
     29  10c8		       ff		      .byte.b	$ff
     28  10c8					      repend
     29  10c9		       ff		      .byte.b	$ff
     28  10c9					      repend
     29  10ca		       ff		      .byte.b	$ff
     28  10ca					      repend
     29  10cb		       ff		      .byte.b	$ff
     28  10cb					      repend
     29  10cc		       ff		      .byte.b	$ff
     28  10cc					      repend
     29  10cd		       ff		      .byte.b	$ff
     28  10cd					      repend
     29  10ce		       ff		      .byte.b	$ff
     28  10ce					      repend
     29  10cf		       ff		      .byte.b	$ff
     28  10cf					      repend
     29  10d0		       ff		      .byte.b	$ff
     28  10d0					      repend
     29  10d1		       ff		      .byte.b	$ff
     28  10d1					      repend
     29  10d2		       ff		      .byte.b	$ff
     28  10d2					      repend
     29  10d3		       ff		      .byte.b	$ff
     28  10d3					      repend
     29  10d4		       ff		      .byte.b	$ff
     28  10d4					      repend
     29  10d5		       ff		      .byte.b	$ff
     28  10d5					      repend
     29  10d6		       ff		      .byte.b	$ff
     28  10d6					      repend
     29  10d7		       ff		      .byte.b	$ff
     28  10d7					      repend
     29  10d8		       ff		      .byte.b	$ff
     28  10d8					      repend
     29  10d9		       ff		      .byte.b	$ff
     28  10d9					      repend
     29  10da		       ff		      .byte.b	$ff
     28  10da					      repend
     29  10db		       ff		      .byte.b	$ff
     28  10db					      repend
     29  10dc		       ff		      .byte.b	$ff
     28  10dc					      repend
     29  10dd		       ff		      .byte.b	$ff
     28  10dd					      repend
     29  10de		       ff		      .byte.b	$ff
     28  10de					      repend
     29  10df		       ff		      .byte.b	$ff
     28  10df					      repend
     29  10e0		       ff		      .byte.b	$ff
     28  10e0					      repend
     29  10e1		       ff		      .byte.b	$ff
     28  10e1					      repend
     29  10e2		       ff		      .byte.b	$ff
     28  10e2					      repend
     29  10e3		       ff		      .byte.b	$ff
     28  10e3					      repend
     29  10e4		       ff		      .byte.b	$ff
     28  10e4					      repend
     29  10e5		       ff		      .byte.b	$ff
     28  10e5					      repend
     29  10e6		       ff		      .byte.b	$ff
     28  10e6					      repend
     29  10e7		       ff		      .byte.b	$ff
     28  10e7					      repend
     29  10e8		       ff		      .byte.b	$ff
     28  10e8					      repend
     29  10e9		       ff		      .byte.b	$ff
     28  10e9					      repend
     29  10ea		       ff		      .byte.b	$ff
     28  10ea					      repend
     29  10eb		       ff		      .byte.b	$ff
     28  10eb					      repend
     29  10ec		       ff		      .byte.b	$ff
     28  10ec					      repend
     29  10ed		       ff		      .byte.b	$ff
     28  10ed					      repend
     29  10ee		       ff		      .byte.b	$ff
     28  10ee					      repend
     29  10ef		       ff		      .byte.b	$ff
     28  10ef					      repend
     29  10f0		       ff		      .byte.b	$ff
     28  10f0					      repend
     29  10f1		       ff		      .byte.b	$ff
     28  10f1					      repend
     29  10f2		       ff		      .byte.b	$ff
     28  10f2					      repend
     29  10f3		       ff		      .byte.b	$ff
     28  10f3					      repend
     29  10f4		       ff		      .byte.b	$ff
     28  10f4					      repend
     29  10f5		       ff		      .byte.b	$ff
     28  10f5					      repend
     29  10f6		       ff		      .byte.b	$ff
     28  10f6					      repend
     29  10f7		       ff		      .byte.b	$ff
     28  10f7					      repend
     29  10f8		       ff		      .byte.b	$ff
     28  10f8					      repend
     29  10f9		       ff		      .byte.b	$ff
     28  10f9					      repend
     29  10fa		       ff		      .byte.b	$ff
     28  10fa					      repend
     29  10fb		       ff		      .byte.b	$ff
     28  10fb					      repend
     29  10fc		       ff		      .byte.b	$ff
     28  10fc					      repend
     29  10fd		       ff		      .byte.b	$ff
     28  10fd					      repend
     29  10fe		       ff		      .byte.b	$ff
     28  10fe					      repend
     29  10ff		       ff		      .byte.b	$ff
     30  1100					      repend
     31  1100				   game
     32  1100				   .L00 		;  inline PlusROM_functions.asm
     33  1100
------- FILE PlusROM_functions.asm LEVEL 2 PASS 3
      0  1100					      include	PlusROM_functions.asm
      1  1100		       00 01	   PlusROM_functions =	1
      2  1100		       1f f0	   WriteToBuffer =	$1ff0
      3  1100		       1f f1	   WriteSendBuffer =	$1ff1
      4  1100		       1f f2	   ReceiveBuffer =	$1ff2
      5  1100		       1f f3	   ReceiveBufferSize =	$1ff3
      6  1100
      7  1100					      MAC	set_plusrom_api
      8  1100				   PlusROM_API
      9  1100					      .byte	{1}, 0, {2}, 0
     10  1100					      ENDM		; {1} = path, {2} = domain
     11  1100
------- FILE d:\Firmaplus\Firmaplus_intern\Atari\PlusROM\Projekte-batariBasic\CaveApocalypse\C.A.V.E. Apocalypse.bas.asm
     35  1100
     36  1100				   .
     37  1100							; 
     38  1100
     39  1100				   .L01 		;  set kernel_options pfcolors player1colors
     40  1100
     41  1100				   .L02 		;  set romsize 8kSC
     42  1100
     43  1100				   .L03 		;  set smartbranching on
     44  1100
     45  1100				   .
     46  1100							; 
     47  1100
     48  1100				   .L04 		;  const pfres = 4
     49  1100
     50  1100				   .L05 		;  const pfscore  =  1
     51  1100
     52  1100				   .
     53  1100							; 
     54  1100
     55  1100				   .L06 		;  rem gravity is acceleration (https://atariage.com/forums/topic/226881-gravity/?do=findComment&comment=3017307)
     56  1100
     57  1100				   .L07 		;  rem the smallest fraction is 1/256 rounded up here to 0.004
     58  1100
     59  1100				   .L08 		;  rem assuming gravity is applied each drawscreen this should
     60  1100
     61  1100				   .L09 		;  rem work out to ~7 pixels in 1 second, 28 pixels in 2 seconds
     62  1100
     63  1100				   .L010		;  rem 63 pixels in 3 seconds
     64  1100
     65  1100							;.acceleration.0.004.
     66  1100				   .L011		;  def acceleration = 0.004
     67  1100
     68  1100							;.acc2.0.024.
     69  1100				   .L012		;  def acc2 = 0.024
     70  1100
     71  1100				   .
     72  1100							; 
     73  1100
     74  1100				   .L013		;  const player_min_x	=  10
     75  1100
     76  1100				   .L014		;  const player_max_x	=  134
     77  1100
     78  1100				   .L015		;  const player_min_y	=  2
     79  1100
     80  1100				   .L016		;  const player_max_y	=  76
     81  1100
     82  1100				   .L017		;  const _M_Edge_Top  =  2
     83  1100
     84  1100				   .L018		;  const _M_Edge_Bottom  =  88
     85  1100
     86  1100				   .L019		;  const _M_Edge_Left	=  14
     87  1100
     88  1100				   .L020		;  const _M_Edge_Right  =  148
     89  1100
     90  1100				   .
     91  1100							; 
     92  1100
     93  1100				   .L021		;  const scback  =  #$08
     94  1100
     95  1100				   .
     96  1100							; 
     97  1100
     98  1100				   .
     99  1100							; 
    100  1100
    101  1100				   .
    102  1100							; 
    103  1100
    104  1100				   .L022		;  const _00  =  $00
    105  1100
    106  1100				   .L023		;  const _02  =  $02
    107  1100
    108  1100				   .L024		;  const _04  =  $04
    109  1100
    110  1100				   .L025		;  const _06  =  $06
    111  1100
    112  1100				   .L026		;  const _08  =  $08
    113  1100
    114  1100				   .L027		;  const _0A  =  $0A
    115  1100
    116  1100				   .L028		;  const _0C  =  $0C
    117  1100
    118  1100				   .L029		;  const _0E  =  $0E
    119  1100
    120  1100				   .L030		;  const _10  =  $10
    121  1100
    122  1100				   .L031		;  const _12  =  $12
    123  1100
    124  1100				   .L032		;  const _14  =  $14
    125  1100
    126  1100				   .L033		;  const _16  =  $16
    127  1100
    128  1100				   .L034		;  const _18  =  $18
    129  1100
    130  1100				   .L035		;  const _1A  =  $1A
    131  1100
    132  1100				   .L036		;  const _1C  =  $1C
    133  1100
    134  1100				   .L037		;  const _1E  =  $1E
    135  1100
    136  1100				   .L038		;  const _20  =  $20
    137  1100
    138  1100				   .L039		;  const _22  =  $22
    139  1100
    140  1100				   .L040		;  const _24  =  $24
    141  1100
    142  1100				   .L041		;  const _26  =  $26
    143  1100
    144  1100				   .L042		;  const _28  =  $28
    145  1100
    146  1100				   .L043		;  const _2A  =  $2A
    147  1100
    148  1100				   .L044		;  const _2C  =  $2C
    149  1100
    150  1100				   .L045		;  const _2E  =  $2E
    151  1100
    152  1100				   .L046		;  const _30  =  $30
    153  1100
    154  1100				   .L047		;  const _32  =  $32
    155  1100
    156  1100				   .L048		;  const _34  =  $34
    157  1100
    158  1100				   .L049		;  const _36  =  $36
    159  1100
    160  1100				   .L050		;  const _38  =  $38
    161  1100
    162  1100				   .L051		;  const _3A  =  $3A
    163  1100
    164  1100				   .L052		;  const _3C  =  $3C
    165  1100
    166  1100				   .L053		;  const _3E  =  $3E
    167  1100
    168  1100				   .L054		;  const _40  =  $40
    169  1100
    170  1100				   .L055		;  const _42  =  $42
    171  1100
    172  1100				   .L056		;  const _44  =  $44
    173  1100
    174  1100				   .L057		;  const _46  =  $46
    175  1100
    176  1100				   .L058		;  const _48  =  $48
    177  1100
    178  1100				   .L059		;  const _4A  =  $4A
    179  1100
    180  1100				   .L060		;  const _4C  =  $4C
    181  1100
    182  1100				   .L061		;  const _4E  =  $4E
    183  1100
    184  1100				   .L062		;  const _50  =  $50
    185  1100
    186  1100				   .L063		;  const _52  =  $52
    187  1100
    188  1100				   .L064		;  const _54  =  $54
    189  1100
    190  1100				   .L065		;  const _56  =  $56
    191  1100
    192  1100				   .L066		;  const _58  =  $58
    193  1100
    194  1100				   .L067		;  const _5A  =  $5A
    195  1100
    196  1100				   .L068		;  const _5C  =  $5C
    197  1100
    198  1100				   .L069		;  const _5E  =  $5E
    199  1100
    200  1100				   .L070		;  const _60  =  $60
    201  1100
    202  1100				   .L071		;  const _62  =  $62
    203  1100
    204  1100				   .L072		;  const _64  =  $64
    205  1100
    206  1100				   .L073		;  const _66  =  $66
    207  1100
    208  1100				   .L074		;  const _68  =  $68
    209  1100
    210  1100				   .L075		;  const _6A  =  $6A
    211  1100
    212  1100				   .L076		;  const _6C  =  $6C
    213  1100
    214  1100				   .L077		;  const _6E  =  $6E
    215  1100
    216  1100				   .L078		;  const _70  =  $70
    217  1100
    218  1100				   .L079		;  const _72  =  $72
    219  1100
    220  1100				   .L080		;  const _74  =  $74
    221  1100
    222  1100				   .L081		;  const _76  =  $76
    223  1100
    224  1100				   .L082		;  const _78  =  $78
    225  1100
    226  1100				   .L083		;  const _7A  =  $7A
    227  1100
    228  1100				   .L084		;  const _7C  =  $7C
    229  1100
    230  1100				   .L085		;  const _7E  =  $7E
    231  1100
    232  1100				   .L086		;  const _80  =  $80
    233  1100
    234  1100				   .L087		;  const _82  =  $82
    235  1100
    236  1100				   .L088		;  const _84  =  $84
    237  1100
    238  1100				   .L089		;  const _86  =  $86
    239  1100
    240  1100				   .L090		;  const _88  =  $88
    241  1100
    242  1100				   .L091		;  const _8A  =  $8A
    243  1100
    244  1100				   .L092		;  const _8C  =  $8C
    245  1100
    246  1100				   .L093		;  const _8E  =  $8E
    247  1100
    248  1100				   .L094		;  const _90  =  $90
    249  1100
    250  1100				   .L095		;  const _92  =  $92
    251  1100
    252  1100				   .L096		;  const _94  =  $94
    253  1100
    254  1100				   .L097		;  const _96  =  $96
    255  1100
    256  1100				   .L098		;  const _98  =  $98
    257  1100
    258  1100				   .L099		;  const _9A  =  $9A
    259  1100
    260  1100				   .L0100		;  const _9C  =  $9C
    261  1100
    262  1100				   .L0101		;  const _9E  =  $9E
    263  1100
    264  1100				   .L0102		;  const _A0  =  $A0
    265  1100
    266  1100				   .L0103		;  const _A2  =  $A2
    267  1100
    268  1100				   .L0104		;  const _A4  =  $A4
    269  1100
    270  1100				   .L0105		;  const _A6  =  $A6
    271  1100
    272  1100				   .L0106		;  const _A8  =  $A8
    273  1100
    274  1100				   .L0107		;  const _AA  =  $AA
    275  1100
    276  1100				   .L0108		;  const _AC  =  $AC
    277  1100
    278  1100				   .L0109		;  const _AE  =  $AE
    279  1100
    280  1100				   .L0110		;  const _B0  =  $B0
    281  1100
    282  1100				   .L0111		;  const _B2  =  $B2
    283  1100
    284  1100				   .L0112		;  const _B4  =  $B4
    285  1100
    286  1100				   .L0113		;  const _B6  =  $B6
    287  1100
    288  1100				   .L0114		;  const _B8  =  $B8
    289  1100
    290  1100				   .L0115		;  const _BA  =  $BA
    291  1100
    292  1100				   .L0116		;  const _BC  =  $BC
    293  1100
    294  1100				   .L0117		;  const _BE  =  $BE
    295  1100
    296  1100				   .L0118		;  const _C0  =  $C0
    297  1100
    298  1100				   .L0119		;  const _C2  =  $C2
    299  1100
    300  1100				   .L0120		;  const _C4  =  $C4
    301  1100
    302  1100				   .L0121		;  const _C6  =  $C6
    303  1100
    304  1100				   .L0122		;  const _C8  =  $C8
    305  1100
    306  1100				   .L0123		;  const _CA  =  $CA
    307  1100
    308  1100				   .L0124		;  const _CC  =  $CC
    309  1100
    310  1100				   .L0125		;  const _CE  =  $CE
    311  1100
    312  1100				   .L0126		;  const _D0  =  $D0
    313  1100
    314  1100				   .L0127		;  const _D2  =  $D2
    315  1100
    316  1100				   .L0128		;  const _D4  =  $D4
    317  1100
    318  1100				   .L0129		;  const _D6  =  $D6
    319  1100
    320  1100				   .L0130		;  const _D8  =  $D8
    321  1100
    322  1100				   .L0131		;  const _DA  =  $DA
    323  1100
    324  1100				   .L0132		;  const _DC  =  $DC
    325  1100
    326  1100				   .L0133		;  const _DE  =  $DE
    327  1100
    328  1100				   .L0134		;  const _E0  =  $E0
    329  1100
    330  1100				   .L0135		;  const _E2  =  $E2
    331  1100
    332  1100				   .L0136		;  const _E4  =  $E4
    333  1100
    334  1100				   .L0137		;  const _E6  =  $E6
    335  1100
    336  1100				   .L0138		;  const _E8  =  $E8
    337  1100
    338  1100				   .L0139		;  const _EA  =  $EA
    339  1100
    340  1100				   .L0140		;  const _EC  =  $EC
    341  1100
    342  1100				   .L0141		;  const _EE  =  $EE
    343  1100
    344  1100				   .L0142		;  const _F0  =  $F0
    345  1100
    346  1100				   .L0143		;  const _F2  =  $F2
    347  1100
    348  1100				   .L0144		;  const _F4  =  $F4
    349  1100
    350  1100				   .L0145		;  const _F6  =  $F6
    351  1100
    352  1100				   .L0146		;  const _F8  =  $F8
    353  1100
    354  1100				   .L0147		;  const _FA  =  $FA
    355  1100
    356  1100				   .L0148		;  const _FC  =  $FC
    357  1100
    358  1100				   .L0149		;  const _FE  =  $FE
    359  1100
    360  1100				   .
    361  1100							; 
    362  1100
    363  1100				   .
    364  1100							; 
    365  1100
    366  1100				   .
    367  1100							; 
    368  1100
    369  1100				   .
    370  1100							; 
    371  1100
    372  1100				   .
    373  1100							; 
    374  1100
    375  1100				   .
    376  1100							; 
    377  1100
    378  1100				   .
    379  1100							; 
    380  1100
    381  1100				   .
    382  1100							; 
    383  1100
    384  1100				   .
    385  1100							; 
    386  1100
    387  1100				   .
    388  1100							; 
    389  1100
    390  1100				   .
    391  1100							; 
    392  1100
    393  1100				   .
    394  1100							; 
    395  1100
    396  1100				   .
    397  1100							; 
    398  1100
    399  1100				   .
    400  1100							; 
    401  1100
    402  1100				   .
    403  1100							; 
    404  1100
    405  1100				   .
    406  1100							; 
    407  1100
    408  1100				   .
    409  1100							; 
    410  1100
    411  1100				   .
    412  1100							; 
    413  1100
    414  1100				   .
    415  1100							; 
    416  1100
    417  1100				   .
    418  1100							; 
    419  1100
    420  1100				   .
    421  1100							; 
    422  1100
    423  1100				   .
    424  1100							; 
    425  1100
    426  1100				   .
    427  1100							; 
    428  1100
    429  1100				   .
    430  1100							; 
    431  1100
    432  1100				   .
    433  1100							; 
    434  1100
    435  1100				   .
    436  1100							; 
    437  1100
    438  1100				   .
    439  1100							; 
    440  1100
    441  1100				   .
    442  1100							; 
    443  1100
    444  1100				   .
    445  1100							; 
    446  1100
    447  1100				   .
    448  1100							; 
    449  1100
    450  1100				   .
    451  1100							; 
    452  1100
    453  1100				   .
    454  1100							; 
    455  1100
    456  1100				   .
    457  1100							; 
    458  1100
    459  1100				   .
    460  1100							; 
    461  1100
    462  1100				   .
    463  1100							; 
    464  1100
    465  1100				   .
    466  1100							; 
    467  1100
    468  1100				   .
    469  1100							; 
    470  1100
    471  1100				   .
    472  1100							; 
    473  1100
    474  1100				   .
    475  1100							; 
    476  1100
    477  1100				   .
    478  1100							; 
    479  1100
    480  1100				   .
    481  1100							; 
    482  1100
    483  1100				   .
    484  1100							; 
    485  1100
    486  1100				   .
    487  1100							; 
    488  1100
    489  1100				   .
    490  1100							; 
    491  1100
    492  1100				   .
    493  1100							; 
    494  1100
    495  1100				   .
    496  1100							; 
    497  1100
    498  1100				   .
    499  1100							; 
    500  1100
    501  1100				   .
    502  1100							; 
    503  1100
    504  1100				   .
    505  1100							; 
    506  1100
    507  1100				   .
    508  1100							; 
    509  1100
    510  1100				   .
    511  1100							; 
    512  1100
    513  1100				   .
    514  1100							; 
    515  1100
    516  1100				   .
    517  1100							; 
    518  1100
    519  1100				   .
    520  1100							; 
    521  1100
    522  1100				   .
    523  1100							; 
    524  1100
    525  1100				   .
    526  1100							; 
    527  1100
    528  1100				   .
    529  1100							; 
    530  1100
    531  1100				   .
    532  1100							; 
    533  1100
    534  1100				   .
    535  1100							; 
    536  1100
    537  1100				   .
    538  1100							; 
    539  1100
    540  1100				   .
    541  1100							; 
    542  1100
    543  1100				   .
    544  1100							; 
    545  1100
    546  1100				   .
    547  1100							; 
    548  1100
    549  1100				   .
    550  1100							; 
    551  1100
    552  1100				   .
    553  1100							; 
    554  1100
    555  1100				   .
    556  1100							; 
    557  1100
    558  1100				   .
    559  1100							; 
    560  1100
    561  1100				   .
    562  1100							; 
    563  1100
    564  1100				   .
    565  1100							; 
    566  1100
    567  1100				   .
    568  1100							; 
    569  1100
    570  1100				   .
    571  1100							; 
    572  1100
    573  1100				   .
    574  1100							; 
    575  1100
    576  1100				   .
    577  1100							; 
    578  1100
    579  1100				   .
    580  1100							; 
    581  1100
    582  1100				   .
    583  1100							; 
    584  1100
    585  1100				   .
    586  1100							; 
    587  1100
    588  1100				   .
    589  1100							; 
    590  1100
    591  1100				   .
    592  1100							; 
    593  1100
    594  1100				   .
    595  1100							; 
    596  1100
    597  1100				   .
    598  1100							; 
    599  1100
    600  1100				   .
    601  1100							; 
    602  1100
    603  1100				   .
    604  1100							; 
    605  1100
    606  1100				   .
    607  1100							; 
    608  1100
    609  1100				   .
    610  1100							; 
    611  1100
    612  1100				   .
    613  1100							; 
    614  1100
    615  1100				   .
    616  1100							; 
    617  1100
    618  1100				   .
    619  1100							; 
    620  1100
    621  1100				   .
    622  1100							; 
    623  1100
    624  1100				   .
    625  1100							; 
    626  1100
    627  1100				   .
    628  1100							; 
    629  1100
    630  1100				   .
    631  1100							; 
    632  1100
    633  1100				   .
    634  1100							; 
    635  1100
    636  1100				   .
    637  1100							; 
    638  1100
    639  1100				   .
    640  1100							; 
    641  1100
    642  1100				   .
    643  1100							; 
    644  1100
    645  1100				   .
    646  1100							; 
    647  1100
    648  1100				   .
    649  1100							; 
    650  1100
    651  1100				   .
    652  1100							; 
    653  1100
    654  1100				   .
    655  1100							; 
    656  1100
    657  1100				   .
    658  1100							; 
    659  1100
    660  1100				   .
    661  1100							; 
    662  1100
    663  1100				   .
    664  1100							; 
    665  1100
    666  1100				   .
    667  1100							; 
    668  1100
    669  1100				   .
    670  1100							; 
    671  1100
    672  1100				   .
    673  1100							; 
    674  1100
    675  1100				   .
    676  1100							; 
    677  1100
    678  1100				   .
    679  1100							; 
    680  1100
    681  1100				   .
    682  1100							; 
    683  1100
    684  1100				   .
    685  1100							; 
    686  1100
    687  1100				   .
    688  1100							; 
    689  1100
    690  1100				   .
    691  1100							; 
    692  1100
    693  1100				   .
    694  1100							; 
    695  1100
    696  1100				   .
    697  1100							; 
    698  1100
    699  1100				   .
    700  1100							; 
    701  1100
    702  1100				   .
    703  1100							; 
    704  1100
    705  1100				   .
    706  1100							; 
    707  1100
    708  1100				   .
    709  1100							; 
    710  1100
    711  1100				   .
    712  1100							; 
    713  1100
    714  1100				   .
    715  1100							; 
    716  1100
    717  1100				   .
    718  1100							; 
    719  1100
    720  1100				   .
    721  1100							; 
    722  1100
    723  1100				   .
    724  1100							; 
    725  1100
    726  1100				   .
    727  1100							; 
    728  1100
    729  1100				   .
    730  1100							; 
    731  1100
    732  1100				   .
    733  1100							; 
    734  1100
    735  1100				   .
    736  1100							; 
    737  1100
    738  1100				   .
    739  1100							; 
    740  1100
    741  1100				   .
    742  1100							; 
    743  1100
    744  1100				   .
    745  1100							; 
    746  1100
    747  1100				   .
    748  1100							; 
    749  1100
    750  1100				   .
    751  1100							; 
    752  1100
    753  1100				   .
    754  1100							; 
    755  1100
    756  1100				   .
    757  1100							; 
    758  1100
    759  1100				   .
    760  1100							; 
    761  1100
    762  1100				   .
    763  1100							; 
    764  1100
    765  1100				   .
    766  1100							; 
    767  1100
    768  1100				   .
    769  1100							; 
    770  1100
    771  1100				   .
    772  1100							; 
    773  1100
    774  1100				   .
    775  1100							; 
    776  1100
    777  1100				   .L0150		;  dim request_pending  =  a
    778  1100
    779  1100				   .L0151		;  dim delay_counter  =  b
    780  1100
    781  1100				   .L0152		;  dim frame_counter  =  c
    782  1100
    783  1100				   .
    784  1100							; 
    785  1100
    786  1100				   .L0153		;  dim _BitOp_M0_Dir  =  d
    787  1100
    788  1100				   .L0154		;  dim _Bit0_M0_Dir_Up  =  d
    789  1100
    790  1100				   .L0155		;  dim _Bit1_M0_Dir_Down  =  d
    791  1100
    792  1100				   .L0156		;  dim _Bit2_M0_Dir_Left  =  d
    793  1100
    794  1100				   .L0157		;  dim _Bit3_M0_Dir_Right  =  d
    795  1100
    796  1100				   .
    797  1100							; 
    798  1100
    799  1100				   .L0158		;  dim _BitOp_P1_Dir  =  e
    800  1100
    801  1100				   .L0159		;  dim _Bit0_P1_Dir_Up  =  e
    802  1100
    803  1100				   .L0160		;  dim _Bit1_P1_Dir_Down  =  e
    804  1100
    805  1100				   .L0161		;  dim _Bit2_P1_Dir_Left  =  e
    806  1100
    807  1100				   .L0162		;  dim _Bit3_P1_Dir_Right  =  e
    808  1100
    809  1100				   .L0163		;  dim P1_facing  =  f
    810  1100
    811  1100				   .
    812  1100							; 
    813  1100
    814  1100				   .L0164		;  dim _Ch0_Sound  =  g
    815  1100
    816  1100				   .L0165		;  dim _Ch0_Duration  =  h
    817  1100
    818  1100				   .L0166		;  dim _Ch0_Counter  =  i
    819  1100
    820  1100				   .
    821  1100							; 
    822  1100
    823  1100				   .L0167		;  dim extra_wall_move_x  =  j
    824  1100
    825  1100				   .L0168		;  dim roommate_move_x  =  k
    826  1100
    827  1100				   .L0169		;  dim roommate_type  =  l
    828  1100
    829  1100				   .
    830  1100							; 
    831  1100
    832  1100				   .
    833  1100							; 
    834  1100
    835  1100				   .L0170		;  rem 16 bit velocity
    836  1100
    837  1100				   .L0171		;  dim M0y_velocity  =  s.t
    838  1100
    839  1100				   .L0172		;  rem 16 bit missile0 y position
    840  1100
    841  1100				   .L0173		;  dim M0y_position  =  missile0y.u
    842  1100
    843  1100				   .
    844  1100							; 
    845  1100
    846  1100				   .L0174		;  rem 16 bit velocity
    847  1100
    848  1100				   .L0175		;  dim P1y_velocity  =  v.w
    849  1100
    850  1100				   .L0176		;  rem 16 bit player1 y position
    851  1100
    852  1100				   .L0177		;  dim P1y_position  =  player1y.x
    853  1100
    854  1100				   .
    855  1100							; 
    856  1100
    857  1100				   .L0178		;  rem First nibble of y is for direction
    858  1100
    859  1100				   .L0179		;  dim _BitOp_misc  =	y
    860  1100
    861  1100				   .L0180		;  dim _Bit0_P0_Dir  =  y
    862  1100
    863  1100				   .L0181		;  dim _Bit1_Wall_Dir	=  y
    864  1100
    865  1100				   .L0182		;  dim _Bit6_Flip_P0  =  y
    866  1100
    867  1100				   .L0183		;  dim _Bit7_M0_Moving  =  y
    868  1100
    869  1100				   .
    870  1100							; 
    871  1100
    872  1100				   .
    873  1100							; 
    874  1100
    875  1100				   .L0184		;  dim r_extra_wall_startpos  =  r111
    876  1100
    877  1100				   .L0185		;  dim w_extra_wall_startpos  =  w111
    878  1100
    879  1100				   .L0186		;  dim r_extra_wall_type  =  r110
    880  1100
    881  1100				   .L0187		;  dim w_extra_wall_type  =  w110
    882  1100
    883  1100				   .L0188		;  dim r_extra_wall_width  =  r109
    884  1100
    885  1100				   .L0189		;  dim w_extra_wall_width  =  w109
    886  1100
    887  1100				   .L0190		;  dim r_enemy_x_startpos  =  r108
    888  1100
    889  1100				   .L0191		;  dim w_enemy_x_startpos  =  w108
    890  1100
    891  1100				   .L0192		;  dim r_enemy_y_startpos  =  r107
    892  1100
    893  1100				   .L0193		;  dim w_enemy_y_startpos  =  w107
    894  1100
    895  1100				   .L0194		;  dim r_P0_type_and_range  =	r106
    896  1100
    897  1100				   .L0195		;  dim w_P0_type_and_range  =	w106
    898  1100
    899  1100				   .L0196		;  dim w_room_definition_start  =  w106
    900  1100
    901  1100				   .
    902  1100							; 
    903  1100
    904  1100				   .
    905  1100							; 
    906  1100
    907  1100				   .
    908  1100							; 
    909  1100
    910  1100				   ._Start
    911  1100							; _Start
    912  1100
    913  1100				   .L0197		;  WriteSendBuffer  =	0  :  request_pending  =  1
    914  1100
    915  1100		       a9 00		      LDA	#0
    916  1102		       8d f1 1f 	      STA	WriteSendBuffer
    917  1105		       a9 01		      LDA	#1
    918  1107		       85 d4		      STA	request_pending
    919  1109				   .L0198		;  frame_counter  =  0  :  COLUP0  =  _1C
    920  1109
    921  1109		       a9 00		      LDA	#0
    922  110b		       85 d6		      STA	frame_counter
    923  110d		       a9 1c		      LDA	#_1C
    924  110f		       85 06		      STA	COLUP0
    925  1111				   .L0199		;  score  =  0  :  pfscore1  =  255  :  pfscore2  =  255  :  pfscorecolor  =  _1C  :  scorecolor  =  _0E
    926  1111
    927  1111		       a9 00		      LDA	#$00
    928  1113		       85 95		      STA	score+2
    929  1115		       a9 00		      LDA	#$00
    930  1117		       85 94		      STA	score+1
    931  1119		       a9 00		      LDA	#$00
    932  111b		       85 93		      STA	score
    933  111d		       a9 ff		      LDA	#255
    934  111f		       85 f2		      STA	pfscore1
    935  1121		       85 f3		      STA	pfscore2
    936  1123		       a9 1c		      LDA	#_1C
    937  1125		       85 f4		      STA	pfscorecolor
    938  1127		       a9 0e		      LDA	#_0E
    939  1129		       85 a3		      STA	scorecolor
    940  112b				   .L0200		;  player1x  =  30  :	player1y  =  0
    941  112b
    942  112b		       a9 1e		      LDA	#30
    943  112d		       85 81		      STA	player1x
    944  112f		       a9 00		      LDA	#0
    945  1131		       85 86		      STA	player1y
    946  1133				   .L0201		;  AUDV0  =  0  :  AUDV1  =  0
    947  1133
    948  1133		       a9 00		      LDA	#0
    949  1135		       85 19		      STA	AUDV0
    950  1137		       85 1a		      STA	AUDV1
    951  1139				   .L0202		;  missile0x  =  200  :  missile0y  =	200  :	missile0height	=  1  :  bally	=  0
    952  1139
    953  1139		       a9 c8		      LDA	#200
    954  113b		       85 82		      STA	missile0x
    955  113d		       85 91		      STA	missile0y
    956  113f		       a9 01		      LDA	#1
    957  1141		       85 90		      STA	missile0height
    958  1143		       a9 00		      LDA	#0
    959  1145		       85 89		      STA	bally
    960  1147				   .L0203		;  w_extra_wall_startpos  =  200
    961  1147
    962  1147		       a9 c8		      LDA	#200
    963  1149		       8d 6f f0 	      STA	w_extra_wall_startpos
    964  114c				   .L0204		;  w_enemy_y_startpos	=  200	:  player0y  =	200  :	player0x  =  0
    965  114c
    966  114c		       a9 c8		      LDA	#200
    967  114e		       8d 6b f0 	      STA	w_enemy_y_startpos
    968  1151		       85 85		      STA	player0y
    969  1153		       a9 00		      LDA	#0
    970  1155		       85 80		      STA	player0x
    971  1157				   .
    972  1157							; 
    973  1157
    974  1157				   .L0205		;  pfclear
    975  1157
    976  1157		       a9 00		      LDA	#0
    977  1159		       85 ee		      sta	temp7
    978  115b		       a9 d1		      lda	#>(ret_point1-1)
    979  115d		       48		      pha
    980  115e		       a9 70		      lda	#<(ret_point1-1)
    981  1160		       48		      pha
    982  1161		       a9 f3		      lda	#>(pfclear-1)
    983  1163		       48		      pha
    984  1164		       a9 8f		      lda	#<(pfclear-1)
    985  1166		       48		      pha
    986  1167		       a5 ee		      lda	temp7
    987  1169		       48		      pha
    988  116a		       8a		      txa
    989  116b		       48		      pha
    990  116c		       a2 02		      ldx	#2
    991  116e		       4c e8 ff 	      jmp	BS_jsr
    992  1171				   ret_point1
    993  1171				   .L0206		;  playfield:
    994  1171
    995  1171					      ifconst	pfres
    996  1171		       a2 0b		      ldx	#(3>pfres)*(pfres*pfwidth-1)+(3<=pfres)*11
    997  1173				  -	      else
    998  1173				  -	      ldx	#((3*pfwidth-1)*((3*pfwidth-1)<47))+(47*((3*pfwidth-1)>=47))
    999  1173					      endif
   1000  1173		       4c 82 d1 	      jmp	pflabel0
   1001  1176				   PF_data0
   1002  1176		       ff 0f		      .byte.b	%11111111, %00001111
   1003  1178					      if	(pfwidth>2)
   1004  1178		       1f ff		      .byte.b	%00011111, %11111111
   1005  117a					      endif
   1006  117a		       f8 00		      .byte.b	%11111000, %00000000
   1007  117c					      if	(pfwidth>2)
   1008  117c		       00 fc		      .byte.b	%00000000, %11111100
   1009  117e					      endif
   1010  117e		       ff 0f		      .byte.b	%11111111, %00001111
   1011  1180					      if	(pfwidth>2)
   1012  1180		       1f ff		      .byte.b	%00011111, %11111111
   1013  1182					      endif
   1014  1182				   pflabel0
   1015  1182		       bd 76 d1 	      lda	PF_data0,x
   1016  1185		       9d 70 10 	      sta	playfield-128,x
   1017  1188		       ca		      dex
   1018  1189		       10 f7		      bpl	pflabel0
   1019  118b				   .
   1020  118b							; 
   1021  118b
   1022  118b				   .L0207		;  player1color:
   1023  118b
   1024  118b		       a2 2a		      LDX	#<playercolorL0207_1
   1025  118d		       86 87		      STX	player1color
   1026  118f		       a9 f6		      LDA	#>playercolorL0207_1
   1027  1191		       85 88		      STA	player1color+1
   1028  1193				   .
   1029  1193							; 
   1030  1193
   1031  1193				   ._inital_wait
   1032  1193							; _inital_wait
   1033  1193
   1034  1193				   .
   1035  1193							; 
   1036  1193
   1037  1193				   .
   1038  1193							; 
   1039  1193
   1040  1193				   .
   1041  1193							; 
   1042  1193
   1043  1193				   .
   1044  1193							; 
   1045  1193
   1046  1193				   .
   1047  1193							; 
   1048  1193
   1049  1193				   .
   1050  1193							; 
   1051  1193
   1052  1193				   .
   1053  1193							; 
   1054  1193
   1055  1193				   .
   1056  1193							; 
   1057  1193
   1058  1193				   .
   1059  1193							; 
   1060  1193
   1061  1193				   .
   1062  1193							; 
   1063  1193
   1064  1193				   .L0208		;  pfcolors:
   1065  1193
   1066  1193		       a9 22		      lda	# _22
   1067  1195		       85 08		      sta	COLUPF
   1068  1197					      ifconst	pfres
   1069  1197		       a9 f6		      lda	#>(pfcolorlabel25-132+pfres*pfwidth)
   1070  1199				  -	      else
   1071  1199				  -	      lda	#>(pfcolorlabel25-84)
   1072  1199					      endif
   1073  1199		       85 f1		      sta	pfcolortable+1
   1074  119b					      ifconst	pfres
   1075  119b		       a9 04		      lda	#<(pfcolorlabel25-132+pfres*pfwidth)
   1076  119d				  -	      else
   1077  119d				  -	      lda	#<(pfcolorlabel25-84)
   1078  119d					      endif
   1079  119d		       85 f0		      sta	pfcolortable
   1080  119f				   .
   1081  119f							; 
   1082  119f
   1083  119f				   .L0209		;  COLUBK  =  _00
   1084  119f
   1085  119f		       a9 00		      LDA	#_00
   1086  11a1		       85 09		      STA	COLUBK
   1087  11a3				   .L0210		;  drawscreen
   1088  11a3
   1089  11a3		       85 ee		      sta	temp7
   1090  11a5		       a9 d1		      lda	#>(ret_point2-1)
   1091  11a7		       48		      pha
   1092  11a8		       a9 ba		      lda	#<(ret_point2-1)
   1093  11aa		       48		      pha
   1094  11ab		       a9 f5		      lda	#>(drawscreen-1)
   1095  11ad		       48		      pha
   1096  11ae		       a9 82		      lda	#<(drawscreen-1)
   1097  11b0		       48		      pha
   1098  11b1		       a5 ee		      lda	temp7
   1099  11b3		       48		      pha
   1100  11b4		       8a		      txa
   1101  11b5		       48		      pha
   1102  11b6		       a2 02		      ldx	#2
   1103  11b8		       4c e8 ff 	      jmp	BS_jsr
   1104  11bb				   ret_point2
   1105  11bb				   .L0211		;  if ! joy0fire then goto _inital_wait
   1106  11bb
   1107  11bb		       24 0c		      bit	INPT4
   1108  11bd		       10 03		      BPL	.skipL0211
   1109  11bf				   .condpart0
   1110  11bf		       4c 93 d1 	      jmp	._inital_wait
   1111  11c2
   1112  11c2				   .skipL0211
   1113  11c2				   .
   1114  11c2							; 
   1115  11c2
   1116  11c2				   .L0212		;  player1y  =  player_min_y
   1117  11c2
   1118  11c2		       a9 02		      LDA	#player_min_y
   1119  11c4		       85 86		      STA	player1y
   1120  11c6				   .
   1121  11c6							; 
   1122  11c6
   1123  11c6				   .
   1124  11c6							; 
   1125  11c6
   1126  11c6				   .
   1127  11c6							; 
   1128  11c6
   1129  11c6				   .__Main_Loop
   1130  11c6							; __Main_Loop
   1131  11c6
   1132  11c6				   .L0213		;  pfcolors:
   1133  11c6
   1134  11c6		       a9 22		      lda	# _22
   1135  11c8		       85 08		      sta	COLUPF
   1136  11ca					      ifconst	pfres
   1137  11ca		       a9 f6		      lda	#>(pfcolorlabel25-131+pfres*pfwidth)
   1138  11cc				  -	      else
   1139  11cc				  -	      lda	#>(pfcolorlabel25-83)
   1140  11cc					      endif
   1141  11cc		       85 f1		      sta	pfcolortable+1
   1142  11ce					      ifconst	pfres
   1143  11ce		       a9 05		      lda	#<(pfcolorlabel25-131+pfres*pfwidth)
   1144  11d0				  -	      else
   1145  11d0				  -	      lda	#<(pfcolorlabel25-83)
   1146  11d0					      endif
   1147  11d0		       85 f0		      sta	pfcolortable
   1148  11d2				   .
   1149  11d2							; 
   1150  11d2
   1151  11d2				   .L0214		;  NUSIZ1  =  $05
   1152  11d2
   1153  11d2		       a9 05		      LDA	#$05
   1154  11d4		       85 05		      STA	NUSIZ1
   1155  11d6				   .L0215		;  NUSIZ0  =  $10
   1156  11d6
   1157  11d6		       a9 10		      LDA	#$10
   1158  11d8		       85 04		      STA	NUSIZ0
   1159  11da				   .L0216		;  COLUBK  =  _00
   1160  11da
   1161  11da		       a9 00		      LDA	#_00
   1162  11dc		       85 09		      STA	COLUBK
   1163  11de				   .
   1164  11de							; 
   1165  11de
   1166  11de				   .L0217		;  if switchreset then goto _Start
   1167  11de
   1168  11de		       a9 01		      lda	#1
   1169  11e0		       2c 82 02 	      bit	SWCHB
   1170  11e3		       d0 03		      BNE	.skipL0217
   1171  11e5				   .condpart1
   1172  11e5		       4c 00 d1 	      jmp	._Start
   1173  11e8
   1174  11e8				   .skipL0217
   1175  11e8				   .
   1176  11e8							; 
   1177  11e8
   1178  11e8				   .L0218		;  if frame_counter{2} then player1: 
   1179  11e8
   1180  11e8		       a5 d6		      LDA	frame_counter
   1181  11ea		       29 04		      AND	#4
   1182  11ec		       f0 0c		      BEQ	.skipL0218
   1183  11ee				   .condpart2
   1184  11ee		       a2 84		      LDX	#<player2then_1
   1185  11f0		       86 8c		      STX	player1pointerlo
   1186  11f2		       a9 f6		      LDA	#>player2then_1
   1187  11f4		       85 8d		      STA	player1pointerhi
   1188  11f6		       a9 07		      LDA	#7
   1189  11f8		       85 8f		      STA	player1height
   1190  11fa				   .skipL0218
   1191  11fa				   .L0219		;  if ! frame_counter{2} then player1:
   1192  11fa
   1193  11fa		       a5 d6		      LDA	frame_counter
   1194  11fc		       29 04		      AND	#4
   1195  11fe		       d0 0c		      BNE	.skipL0219
   1196  1200				   .condpart3
   1197  1200		       a2 8c		      LDX	#<player3then_1
   1198  1202		       86 8c		      STX	player1pointerlo
   1199  1204		       a9 f6		      LDA	#>player3then_1
   1200  1206		       85 8d		      STA	player1pointerhi
   1201  1208		       a9 07		      LDA	#7
   1202  120a		       85 8f		      STA	player1height
   1203  120c				   .skipL0219
   1204  120c				   .
   1205  120c							; 
   1206  120c
   1207  120c				   .L0220		;  on roommate_type goto _P0_Enemy_def _P0_Air_Missile_def _P0_Fuel_def _P0_Soldier_def
   1208  120c
   1209  120c		       a6 df		      LDX	roommate_type
   1210  120e		       bd 17 d2 	      LDA	.L0220jumptablehi,x
   1211  1211		       48		      PHA
   1212  1212		       bd 1b d2 	      LDA	.L0220jumptablelo,x
   1213  1215		       48		      PHA
   1214  1216		       60		      RTS
   1215  1217				   .L0220jumptablehi
   1216  1217		       d2		      .byte.b	>(._P0_Enemy_def-1)
   1217  1218		       d2		      .byte.b	>(._P0_Air_Missile_def-1)
   1218  1219		       d2		      .byte.b	>(._P0_Fuel_def-1)
   1219  121a		       d2		      .byte.b	>(._P0_Soldier_def-1)
   1220  121b				   .L0220jumptablelo
   1221  121b		       1e		      .byte.b	<(._P0_Enemy_def-1)
   1222  121c		       45		      .byte.b	<(._P0_Air_Missile_def-1)
   1223  121d		       54		      .byte.b	<(._P0_Fuel_def-1)
   1224  121e		       63		      .byte.b	<(._P0_Soldier_def-1)
   1225  121f				   .
   1226  121f							; 
   1227  121f
   1228  121f				   ._P0_Enemy_def
   1229  121f							; _P0_Enemy_def
   1230  121f
   1231  121f				   .L0221		;  if frame_counter{2} then player0: 
   1232  121f
   1233  121f		       a5 d6		      LDA	frame_counter
   1234  1221		       29 04		      AND	#4
   1235  1223		       f0 0c		      BEQ	.skipL0221
   1236  1225				   .condpart4
   1237  1225		       a2 94		      LDX	#<player4then_0
   1238  1227		       86 8a		      STX	player0pointerlo
   1239  1229		       a9 f6		      LDA	#>player4then_0
   1240  122b		       85 8b		      STA	player0pointerhi
   1241  122d		       a9 06		      LDA	#6
   1242  122f		       85 8e		      STA	player0height
   1243  1231				   .skipL0221
   1244  1231				   .L0222		;  if !frame_counter{2} then player0: 
   1245  1231
   1246  1231		       a5 d6		      LDA	frame_counter
   1247  1233		       29 04		      AND	#4
   1248  1235		       d0 0c		      BNE	.skipL0222
   1249  1237				   .condpart5
   1250  1237		       a2 9b		      LDX	#<player5then_0
   1251  1239		       86 8a		      STX	player0pointerlo
   1252  123b		       a9 f6		      LDA	#>player5then_0
   1253  123d		       85 8b		      STA	player0pointerhi
   1254  123f		       a9 06		      LDA	#6
   1255  1241		       85 8e		      STA	player0height
   1256  1243				   .skipL0222
   1257  1243				   .L0223		;  goto _P0_End_def
   1258  1243
   1259  1243		       4c 88 d2 	      jmp	._P0_End_def
   1260  1246
   1261  1246				   .
   1262  1246							; 
   1263  1246
   1264  1246				   ._P0_Air_Missile_def
   1265  1246							; _P0_Air_Missile_def
   1266  1246
   1267  1246				   .L0224		;  player0: 
   1268  1246
   1269  1246		       a2 a2		      LDX	#<playerL0224_0
   1270  1248		       86 8a		      STX	player0pointerlo
   1271  124a		       a9 f6		      LDA	#>playerL0224_0
   1272  124c		       85 8b		      STA	player0pointerhi
   1273  124e		       a9 0b		      LDA	#11
   1274  1250		       85 8e		      STA	player0height
   1275  1252				   .L0225		;  goto _P0_End_def
   1276  1252
   1277  1252		       4c 88 d2 	      jmp	._P0_End_def
   1278  1255
   1279  1255				   .
   1280  1255							; 
   1281  1255
   1282  1255				   ._P0_Fuel_def
   1283  1255							; _P0_Fuel_def
   1284  1255
   1285  1255				   .L0226		;  player0: 
   1286  1255
   1287  1255		       a2 ae		      LDX	#<playerL0226_0
   1288  1257		       86 8a		      STX	player0pointerlo
   1289  1259		       a9 f6		      LDA	#>playerL0226_0
   1290  125b		       85 8b		      STA	player0pointerhi
   1291  125d		       a9 19		      LDA	#25
   1292  125f		       85 8e		      STA	player0height
   1293  1261				   .L0227		;    goto _P0_End_def
   1294  1261
   1295  1261		       4c 88 d2 	      jmp	._P0_End_def
   1296  1264
   1297  1264				   .
   1298  1264							; 
   1299  1264
   1300  1264				   ._P0_Soldier_def
   1301  1264							; _P0_Soldier_def
   1302  1264
   1303  1264				   .L0228		;    if frame_counter{2} then player0: 
   1304  1264
   1305  1264		       a5 d6		      LDA	frame_counter
   1306  1266		       29 04		      AND	#4
   1307  1268		       f0 0c		      BEQ	.skipL0228
   1308  126a				   .condpart6
   1309  126a		       a2 c8		      LDX	#<player6then_0
   1310  126c		       86 8a		      STX	player0pointerlo
   1311  126e		       a9 f6		      LDA	#>player6then_0
   1312  1270		       85 8b		      STA	player0pointerhi
   1313  1272		       a9 03		      LDA	#3
   1314  1274		       85 8e		      STA	player0height
   1315  1276				   .skipL0228
   1316  1276				   .L0229		;  if !frame_counter{2} then player0: 
   1317  1276
   1318  1276		       a5 d6		      LDA	frame_counter
   1319  1278		       29 04		      AND	#4
   1320  127a		       d0 0c		      BNE	.skipL0229
   1321  127c				   .condpart7
   1322  127c		       a2 cc		      LDX	#<player7then_0
   1323  127e		       86 8a		      STX	player0pointerlo
   1324  1280		       a9 f6		      LDA	#>player7then_0
   1325  1282		       85 8b		      STA	player0pointerhi
   1326  1284		       a9 03		      LDA	#3
   1327  1286		       85 8e		      STA	player0height
   1328  1288				   .skipL0229
   1329  1288				   ._P0_End_def
   1330  1288							; _P0_End_def
   1331  1288
   1332  1288				   .
   1333  1288							; 
   1334  1288
   1335  1288				   .
   1336  1288							; 
   1337  1288
   1338  1288				   .L0230		;  if r_extra_wall_type  <  4 then _Skip_Wall_Movement
   1339  1288
   1340  1288		       ad ee f0 	      LDA	r_extra_wall_type
   1341  128b		       c9 04		      CMP	#4
   1342  128d					      if	((* - ._Skip_Wall_Movement) < 127) && ((* - ._Skip_Wall_Movement) > -128)
   1343  128d		       90 30		      bcc	._Skip_Wall_Movement
   1344  128f				  -	      else
   1345  128f				  -	      bcs	.0skip_Skip_Wall_Movement
   1346  128f				  -	      jmp	._Skip_Wall_Movement
   1347  128f				  -.0skip_Skip_Wall_Movement
   1348  128f					      endif
   1349  128f				   .L0231		;  if _Bit1_Wall_Dir{1} then _Wall_move_left
   1350  128f
   1351  128f		       a5 ec		      LDA	_Bit1_Wall_Dir
   1352  1291		       29 02		      AND	#2
   1353  1293					      if	((* - ._Wall_move_left) < 127) && ((* - ._Wall_move_left) > -128)
   1354  1293		       d0 18		      BNE	._Wall_move_left
   1355  1295				  -	      else
   1356  1295				  -	      beq	.1skip_Wall_move_left
   1357  1295				  -	      jmp	._Wall_move_left
   1358  1295				  -.1skip_Wall_move_left
   1359  1295					      endif
   1360  1295				   .L0232		;  if frame_counter{4} then extra_wall_move_x	=  extra_wall_move_x  +  1  :  if extra_wall_move_x  =	r_extra_wall_type then _Bit1_Wall_Dir{1}  =  1
   1361  1295
   1362  1295		       a5 d6		      LDA	frame_counter
   1363  1297		       29 10		      AND	#16
   1364  1299		       f0 0f		      BEQ	.skipL0232
   1365  129b				   .condpart8
   1366  129b		       e6 dd		      INC	extra_wall_move_x
   1367  129d		       a5 dd		      LDA	extra_wall_move_x
   1368  129f		       cd ee f0 	      CMP	r_extra_wall_type
   1369  12a2		       d0 06		      BNE	.skip8then
   1370  12a4				   .condpart9
   1371  12a4		       a5 ec		      LDA	_Bit1_Wall_Dir
   1372  12a6		       09 02		      ORA	#2
   1373  12a8		       85 ec		      STA	_Bit1_Wall_Dir
   1374  12aa				   .skip8then
   1375  12aa				   .skipL0232
   1376  12aa				   .L0233		;  goto _Skip_Wall_Movement
   1377  12aa
   1378  12aa		       4c bf d2 	      jmp	._Skip_Wall_Movement
   1379  12ad
   1380  12ad				   ._Wall_move_left
   1381  12ad							; _Wall_move_left
   1382  12ad
   1383  12ad				   .L0234		;  if frame_counter{4} then extra_wall_move_x	=  extra_wall_move_x  -  1  :  if !extra_wall_move_x then _Bit1_Wall_Dir{1}  =	0
   1384  12ad
   1385  12ad		       a5 d6		      LDA	frame_counter
   1386  12af		       29 10		      AND	#16
   1387  12b1		       f0 0c		      BEQ	.skipL0234
   1388  12b3				   .condpart10
   1389  12b3		       c6 dd		      DEC	extra_wall_move_x
   1390  12b5		       a5 dd		      LDA	extra_wall_move_x
   1391  12b7		       d0 06		      BNE	.skip10then
   1392  12b9				   .condpart11
   1393  12b9		       a5 ec		      LDA	_Bit1_Wall_Dir
   1394  12bb		       29 fd		      AND	#253
   1395  12bd		       85 ec		      STA	_Bit1_Wall_Dir
   1396  12bf				   .skip10then
   1397  12bf				   .skipL0234
   1398  12bf				   ._Skip_Wall_Movement
   1399  12bf							; _Skip_Wall_Movement
   1400  12bf
   1401  12bf				   .
   1402  12bf							; 
   1403  12bf
   1404  12bf				   .L0235		;  if r_P0_type_and_range  <  4 then _Skip_Enemy_Movement
   1405  12bf
   1406  12bf		       ad ea f0 	      LDA	r_P0_type_and_range
   1407  12c2		       c9 04		      CMP	#4
   1408  12c4					      if	((* - ._Skip_Enemy_Movement) < 127) && ((* - ._Skip_Enemy_Movement) > -128)
   1409  12c4		       90 2f		      bcc	._Skip_Enemy_Movement
   1410  12c6				  -	      else
   1411  12c6				  -	      bcs	.2skip_Skip_Enemy_Movement
   1412  12c6				  -	      jmp	._Skip_Enemy_Movement
   1413  12c6				  -.2skip_Skip_Enemy_Movement
   1414  12c6					      endif
   1415  12c6				   .L0236		;  if _Bit0_P0_Dir{0} then _Enemy_move_left
   1416  12c6
   1417  12c6		       a5 ec		      LDA	_Bit0_P0_Dir
   1418  12c8		       4a		      LSR
   1419  12c9					      if	((* - ._Enemy_move_left) < 127) && ((* - ._Enemy_move_left) > -128)
   1420  12c9		       b0 18		      bcs	._Enemy_move_left
   1421  12cb				  -	      else
   1422  12cb				  -	      bcc	.3skip_Enemy_move_left
   1423  12cb				  -	      jmp	._Enemy_move_left
   1424  12cb				  -.3skip_Enemy_move_left
   1425  12cb					      endif
   1426  12cb				   .L0237		;  if !frame_counter{4} then roommate_move_x  =  roommate_move_x  +  1  :  if roommate_move_x	=  r_P0_type_and_range then _Bit0_P0_Dir{0}  =	1
   1427  12cb
   1428  12cb		       a5 d6		      LDA	frame_counter
   1429  12cd		       29 10		      AND	#16
   1430  12cf		       d0 0f		      BNE	.skipL0237
   1431  12d1				   .condpart12
   1432  12d1		       e6 de		      INC	roommate_move_x
   1433  12d3		       a5 de		      LDA	roommate_move_x
   1434  12d5		       cd ea f0 	      CMP	r_P0_type_and_range
   1435  12d8		       d0 06		      BNE	.skip12then
   1436  12da				   .condpart13
   1437  12da		       a5 ec		      LDA	_Bit0_P0_Dir
   1438  12dc		       09 01		      ORA	#1
   1439  12de		       85 ec		      STA	_Bit0_P0_Dir
   1440  12e0				   .skip12then
   1441  12e0				   .skipL0237
   1442  12e0				   .L0238		;  goto _Skip_Enemy_Movement
   1443  12e0
   1444  12e0		       4c f5 d2 	      jmp	._Skip_Enemy_Movement
   1445  12e3
   1446  12e3				   ._Enemy_move_left
   1447  12e3							; _Enemy_move_left
   1448  12e3
   1449  12e3				   .L0239		;  if !frame_counter{4} then roommate_move_x  =  roommate_move_x  -  1  :  if !roommate_move_x then _Bit0_P0_Dir{0}  =  0
   1450  12e3
   1451  12e3		       a5 d6		      LDA	frame_counter
   1452  12e5		       29 10		      AND	#16
   1453  12e7		       d0 0c		      BNE	.skipL0239
   1454  12e9				   .condpart14
   1455  12e9		       c6 de		      DEC	roommate_move_x
   1456  12eb		       a5 de		      LDA	roommate_move_x
   1457  12ed		       d0 06		      BNE	.skip14then
   1458  12ef				   .condpart15
   1459  12ef		       a5 ec		      LDA	_Bit0_P0_Dir
   1460  12f1		       29 fe		      AND	#254
   1461  12f3		       85 ec		      STA	_Bit0_P0_Dir
   1462  12f5				   .skip14then
   1463  12f5				   .skipL0239
   1464  12f5				   ._Skip_Enemy_Movement
   1465  12f5							; _Skip_Enemy_Movement
   1466  12f5
   1467  12f5				   .
   1468  12f5							; 
   1469  12f5
   1470  12f5				   .L0240		;  frame_counter  =  frame_counter  +	1
   1471  12f5
   1472  12f5		       e6 d6		      INC	frame_counter
   1473  12f7				   .
   1474  12f7							; 
   1475  12f7
   1476  12f7				   .
   1477  12f7							; 
   1478  12f7
   1479  12f7				   .L0241		;  if ReceiveBufferSize  >  17 then goto change_room
   1480  12f7
   1481  12f7		       a9 11		      LDA	#17
   1482  12f9		       cd f3 1f 	      CMP	ReceiveBufferSize
   1483  12fc		       b0 03		      BCS	.skipL0241
   1484  12fe				   .condpart16
   1485  12fe		       4c be d8 	      jmp	.change_room
   1486  1301
   1487  1301				   .skipL0241
   1488  1301				   .
   1489  1301							; 
   1490  1301
   1491  1301				   .L0242		;  if request_pending	||  !pfscore1 then goto _skip_game_action
   1492  1301
   1493  1301		       a5 d4		      LDA	request_pending
   1494  1303		       f0 03		      BEQ	.skipL0242
   1495  1305				   .condpart17
   1496  1305		       4c 0c d3 	      jmp	.condpart18
   1497  1308				   .skipL0242
   1498  1308		       a5 f2		      LDA	pfscore1
   1499  130a		       d0 03		      BNE	.skip0OR
   1500  130c				   .condpart18
   1501  130c		       4c 78 d6 	      jmp	._skip_game_action
   1502  130f
   1503  130f				   .skip0OR
   1504  130f				   .
   1505  130f							; 
   1506  130f
   1507  130f				   .L0243		;  if frame_counter then _Skip_dec_game_counter
   1508  130f
   1509  130f		       a5 d6		      LDA	frame_counter
   1510  1311					      if	((* - ._Skip_dec_game_counter) < 127) && ((* - ._Skip_dec_game_counter) > -128)
   1511  1311		       d0 24		      BNE	._Skip_dec_game_counter
   1512  1313				  -	      else
   1513  1313				  -	      beq	.4skip_Skip_dec_game_counter
   1514  1313				  -	      jmp	._Skip_dec_game_counter
   1515  1313				  -.4skip_Skip_dec_game_counter
   1516  1313					      endif
   1517  1313				   .
   1518  1313							; 
   1519  1313
   1520  1313				   .L0244		;  if !pfscore2 then _Decrease_small_counter
   1521  1313
   1522  1313		       a5 f3		      LDA	pfscore2
   1523  1315					      if	((* - ._Decrease_small_counter) < 127) && ((* - ._Decrease_small_counter) > -128)
   1524  1315		       f0 08		      BEQ	._Decrease_small_counter
   1525  1317				  -	      else
   1526  1317				  -	      bne	.5skip_Decrease_small_counter
   1527  1317				  -	      jmp	._Decrease_small_counter
   1528  1317				  -.5skip_Decrease_small_counter
   1529  1317					      endif
   1530  1317				   .L0245		;  pfscore2  =  pfscore2  /  2
   1531  1317
   1532  1317		       a5 f3		      LDA	pfscore2
   1533  1319		       4a		      lsr
   1534  131a		       85 f3		      STA	pfscore2
   1535  131c				   .L0246		;  goto _Skip_dec_game_counter
   1536  131c
   1537  131c		       4c 37 d3 	      jmp	._Skip_dec_game_counter
   1538  131f
   1539  131f				   ._Decrease_small_counter
   1540  131f							; _Decrease_small_counter
   1541  131f
   1542  131f				   .L0247		;  pfscore1  =  pfscore1  /  2
   1543  131f
   1544  131f		       a5 f2		      LDA	pfscore1
   1545  1321		       4a		      lsr
   1546  1322		       85 f2		      STA	pfscore1
   1547  1324				   .
   1548  1324							; 
   1549  1324
   1550  1324				   .L0248		;  if !pfscore1 then _Ch0_Sound  =  4	:  _Ch0_Duration  =  1	:  _Ch0_Counter  =  0  :  goto _skip_game_action
   1551  1324
   1552  1324		       a5 f2		      LDA	pfscore1
   1553  1326		       d0 0f		      BNE	.skipL0248
   1554  1328				   .condpart19
   1555  1328		       a9 04		      LDA	#4
   1556  132a		       85 da		      STA	_Ch0_Sound
   1557  132c		       a9 01		      LDA	#1
   1558  132e		       85 db		      STA	_Ch0_Duration
   1559  1330		       a9 00		      LDA	#0
   1560  1332		       85 dc		      STA	_Ch0_Counter
   1561  1334		       4c 78 d6 	      jmp	._skip_game_action
   1562  1337
   1563  1337				   .skipL0248
   1564  1337				   .
   1565  1337							; 
   1566  1337
   1567  1337				   ._Skip_dec_game_counter
   1568  1337							; _Skip_dec_game_counter
   1569  1337
   1570  1337				   .L0249		;  if delay_counter  >  0 then delay_counter  =  delay_counter  -  1  :  goto _skip_game_action
   1571  1337
   1572  1337		       a9 00		      LDA	#0
   1573  1339		       c5 d5		      CMP	delay_counter
   1574  133b		       b0 05		      BCS	.skipL0249
   1575  133d				   .condpart20
   1576  133d		       c6 d5		      DEC	delay_counter
   1577  133f		       4c 78 d6 	      jmp	._skip_game_action
   1578  1342
   1579  1342				   .skipL0249
   1580  1342				   .
   1581  1342							; 
   1582  1342
   1583  1342				   .
   1584  1342							; 
   1585  1342
   1586  1342				   .
   1587  1342							; 
   1588  1342
   1589  1342				   .L0250		;  if !joy0fire then goto __Skip_Fire
   1590  1342
   1591  1342		       24 0c		      bit	INPT4
   1592  1344		       10 03		      BPL	.skipL0250
   1593  1346				   .condpart21
   1594  1346		       4c d8 d3 	      jmp	.__Skip_Fire
   1595  1349
   1596  1349				   .skipL0250
   1597  1349				   .
   1598  1349							; 
   1599  1349
   1600  1349				   .
   1601  1349							; 
   1602  1349
   1603  1349				   .L0251		;  if _Bit7_M0_Moving{7} then goto __Skip_Fire
   1604  1349
   1605  1349		       24 ec		      BIT	_Bit7_M0_Moving
   1606  134b		       10 03		      BPL	.skipL0251
   1607  134d				   .condpart22
   1608  134d		       4c d8 d3 	      jmp	.__Skip_Fire
   1609  1350
   1610  1350				   .skipL0251
   1611  1350				   .
   1612  1350							; 
   1613  1350
   1614  1350				   .
   1615  1350							; 
   1616  1350
   1617  1350				   .
   1618  1350							; 
   1619  1350
   1620  1350				   .L0252		;  _BitOp_M0_Dir  =  _BitOp_P1_Dir
   1621  1350
   1622  1350		       a5 d8		      LDA	_BitOp_P1_Dir
   1623  1352		       85 d7		      STA	_BitOp_M0_Dir
   1624  1354				   .
   1625  1354							; 
   1626  1354
   1627  1354				   .
   1628  1354							; 
   1629  1354
   1630  1354				   .L0253		;  if _Bit0_M0_Dir_Up{0} then goto __Skip_Fire
   1631  1354
   1632  1354		       a5 d7		      LDA	_Bit0_M0_Dir_Up
   1633  1356		       4a		      LSR
   1634  1357		       90 03		      BCC	.skipL0253
   1635  1359				   .condpart23
   1636  1359		       4c d8 d3 	      jmp	.__Skip_Fire
   1637  135c
   1638  135c				   .skipL0253
   1639  135c				   .
   1640  135c							; 
   1641  135c
   1642  135c				   .L0254		;  if _BitOp_M0_Dir  =  0  &&	_Bit6_Flip_P0{6} then _BitOp_M0_Dir  =	4
   1643  135c
   1644  135c		       a5 d7		      LDA	_BitOp_M0_Dir
   1645  135e		       c9 00		      CMP	#0
   1646  1360		       d0 08		      BNE	.skipL0254
   1647  1362				   .condpart24
   1648  1362		       24 ec		      BIT	_Bit6_Flip_P0
   1649  1364		       50 04		      BVC	.skip24then
   1650  1366				   .condpart25
   1651  1366		       a9 04		      LDA	#4
   1652  1368		       85 d7		      STA	_BitOp_M0_Dir
   1653  136a				   .skip24then
   1654  136a				   .skipL0254
   1655  136a				   .L0255		;  if _BitOp_M0_Dir  =  0  &&	! _Bit6_Flip_P0{6} then _BitOp_M0_Dir  =  8
   1656  136a
   1657  136a		       a5 d7		      LDA	_BitOp_M0_Dir
   1658  136c		       c9 00		      CMP	#0
   1659  136e		       d0 08		      BNE	.skipL0255
   1660  1370				   .condpart26
   1661  1370		       24 ec		      BIT	_Bit6_Flip_P0
   1662  1372		       70 04		      BVS	.skip26then
   1663  1374				   .condpart27
   1664  1374		       a9 08		      LDA	#8
   1665  1376		       85 d7		      STA	_BitOp_M0_Dir
   1666  1378				   .skip26then
   1667  1378				   .skipL0255
   1668  1378				   .
   1669  1378							; 
   1670  1378
   1671  1378				   .
   1672  1378							; 
   1673  1378
   1674  1378				   .L0256		;  _Bit7_M0_Moving{7}	=  1
   1675  1378
   1676  1378		       a5 ec		      LDA	_Bit7_M0_Moving
   1677  137a		       09 80		      ORA	#128
   1678  137c		       85 ec		      STA	_Bit7_M0_Moving
   1679  137e				   .
   1680  137e							; 
   1681  137e
   1682  137e				   .
   1683  137e							; 
   1684  137e
   1685  137e				   .L0257		;  M0y_velocity  =  0.0  :  u	=  0
   1686  137e
   1687  137e		       a2 00		      LDX	#0
   1688  1380		       86 e7		      STX	t
   1689  1382		       a9 00		      LDA	#0
   1690  1384		       85 e6		      STA	M0y_velocity
   1691  1386		       a9 00		      LDA	#0
   1692  1388		       85 e8		      STA	u
   1693  138a				   .
   1694  138a							; 
   1695  138a
   1696  138a				   .
   1697  138a							; 
   1698  138a
   1699  138a				   .L0258		;  if _Bit1_M0_Dir_Down{1} then missile0x  =  player1x  +  9  :  missile0y  =	player1y  -  1
   1700  138a
   1701  138a		       a5 d7		      LDA	_Bit1_M0_Dir_Down
   1702  138c		       29 02		      AND	#2
   1703  138e		       f0 0e		      BEQ	.skipL0258
   1704  1390				   .condpart28
   1705  1390		       a5 81		      LDA	player1x
   1706  1392		       18		      CLC
   1707  1393		       69 09		      ADC	#9
   1708  1395		       85 82		      STA	missile0x
   1709  1397		       a5 86		      LDA	player1y
   1710  1399		       38		      SEC
   1711  139a		       e9 01		      SBC	#1
   1712  139c		       85 91		      STA	missile0y
   1713  139e				   .skipL0258
   1714  139e				   .L0259		;  if _Bit2_M0_Dir_Left{2} then missile0x  =  player1x  +  2  :  missile0y  =	player1y  -  3
   1715  139e
   1716  139e		       a5 d7		      LDA	_Bit2_M0_Dir_Left
   1717  13a0		       29 04		      AND	#4
   1718  13a2		       f0 0e		      BEQ	.skipL0259
   1719  13a4				   .condpart29
   1720  13a4		       a5 81		      LDA	player1x
   1721  13a6		       18		      CLC
   1722  13a7		       69 02		      ADC	#2
   1723  13a9		       85 82		      STA	missile0x
   1724  13ab		       a5 86		      LDA	player1y
   1725  13ad		       38		      SEC
   1726  13ae		       e9 03		      SBC	#3
   1727  13b0		       85 91		      STA	missile0y
   1728  13b2				   .skipL0259
   1729  13b2				   .L0260		;  if _Bit3_M0_Dir_Right{3} then missile0x  =	player1x  +  16  :  missile0y  =  player1y  -  3
   1730  13b2
   1731  13b2		       a5 d7		      LDA	_Bit3_M0_Dir_Right
   1732  13b4		       29 08		      AND	#8
   1733  13b6		       f0 0e		      BEQ	.skipL0260
   1734  13b8				   .condpart30
   1735  13b8		       a5 81		      LDA	player1x
   1736  13ba		       18		      CLC
   1737  13bb		       69 10		      ADC	#16
   1738  13bd		       85 82		      STA	missile0x
   1739  13bf		       a5 86		      LDA	player1y
   1740  13c1		       38		      SEC
   1741  13c2		       e9 03		      SBC	#3
   1742  13c4		       85 91		      STA	missile0y
   1743  13c6				   .skipL0260
   1744  13c6				   .
   1745  13c6							; 
   1746  13c6
   1747  13c6				   .
   1748  13c6							; 
   1749  13c6
   1750  13c6				   .L0261		;  if _Ch0_Sound  <>  3 then _Ch0_Sound  =  2	:  _Ch0_Duration  =  1	:  _Ch0_Counter  =  0
   1751  13c6
   1752  13c6		       a5 da		      LDA	_Ch0_Sound
   1753  13c8		       c9 03		      CMP	#3
   1754  13ca		       f0 0c		      BEQ	.skipL0261
   1755  13cc				   .condpart31
   1756  13cc		       a9 02		      LDA	#2
   1757  13ce		       85 da		      STA	_Ch0_Sound
   1758  13d0		       a9 01		      LDA	#1
   1759  13d2		       85 db		      STA	_Ch0_Duration
   1760  13d4		       a9 00		      LDA	#0
   1761  13d6		       85 dc		      STA	_Ch0_Counter
   1762  13d8				   .skipL0261
   1763  13d8				   .
   1764  13d8							; 
   1765  13d8
   1766  13d8				   .__Skip_Fire
   1767  13d8							; __Skip_Fire
   1768  13d8
   1769  13d8				   .
   1770  13d8							; 
   1771  13d8
   1772  13d8				   .
   1773  13d8							; 
   1774  13d8
   1775  13d8				   .
   1776  13d8							; 
   1777  13d8
   1778  13d8				   .
   1779  13d8							; 
   1780  13d8
   1781  13d8				   .L0262		;  if !_Bit7_M0_Moving{7} then goto __Skip_Missile
   1782  13d8
   1783  13d8		       24 ec		      BIT	_Bit7_M0_Moving
   1784  13da		       30 03		      BMI	.skipL0262
   1785  13dc				   .condpart32
   1786  13dc		       4c 67 d4 	      jmp	.__Skip_Missile
   1787  13df
   1788  13df				   .skipL0262
   1789  13df				   .
   1790  13df							; 
   1791  13df
   1792  13df				   .
   1793  13df							; 
   1794  13df
   1795  13df				   .L0263		;  if _Bit1_M0_Dir_Down{1} then missile0y  =  missile0y  +  2
   1796  13df
   1797  13df		       a5 d7		      LDA	_Bit1_M0_Dir_Down
   1798  13e1		       29 02		      AND	#2
   1799  13e3		       f0 07		      BEQ	.skipL0263
   1800  13e5				   .condpart33
   1801  13e5		       a5 91		      LDA	missile0y
   1802  13e7		       18		      CLC
   1803  13e8		       69 02		      ADC	#2
   1804  13ea		       85 91		      STA	missile0y
   1805  13ec				   .skipL0263
   1806  13ec				   .L0264		;  if _Bit2_M0_Dir_Left{2} then missile0x  =  missile0x  -  2
   1807  13ec
   1808  13ec		       a5 d7		      LDA	_Bit2_M0_Dir_Left
   1809  13ee		       29 04		      AND	#4
   1810  13f0		       f0 07		      BEQ	.skipL0264
   1811  13f2				   .condpart34
   1812  13f2		       a5 82		      LDA	missile0x
   1813  13f4		       38		      SEC
   1814  13f5		       e9 02		      SBC	#2
   1815  13f7		       85 82		      STA	missile0x
   1816  13f9				   .skipL0264
   1817  13f9				   .L0265		;  if _Bit3_M0_Dir_Right{3} then missile0x  =	missile0x  +  2
   1818  13f9
   1819  13f9		       a5 d7		      LDA	_Bit3_M0_Dir_Right
   1820  13fb		       29 08		      AND	#8
   1821  13fd		       f0 07		      BEQ	.skipL0265
   1822  13ff				   .condpart35
   1823  13ff		       a5 82		      LDA	missile0x
   1824  1401		       18		      CLC
   1825  1402		       69 02		      ADC	#2
   1826  1404		       85 82		      STA	missile0x
   1827  1406				   .skipL0265
   1828  1406				   .
   1829  1406							; 
   1830  1406
   1831  1406				   .L0266		;  rem apply gravity
   1832  1406
   1833  1406				   .L0267		;  M0y_velocity  =  M0y_velocity  +  acc2
   1834  1406
   1835  1406		       a5 e7		      LDA	t
   1836  1408		       18		      CLC
   1837  1409		       69 06		      ADC	#6
   1838  140b		       85 e7		      STA	t
   1839  140d		       a5 e6		      LDA	M0y_velocity
   1840  140f		       69 00		      ADC	#0
   1841  1411		       85 e6		      STA	M0y_velocity
   1842  1413				   .L0268		;  M0y_position  =  M0y_position  +  M0y_velocity
   1843  1413
   1844  1413		       a5 e8		      LDA	u
   1845  1415		       18		      CLC
   1846  1416		       65 e7		      ADC	t
   1847  1418		       85 e8		      STA	u
   1848  141a		       a5 91		      LDA	M0y_position
   1849  141c		       65 e6		      ADC	M0y_velocity
   1850  141e		       85 91		      STA	M0y_position
   1851  1420				   .
   1852  1420							; 
   1853  1420
   1854  1420				   .
   1855  1420							; 
   1856  1420
   1857  1420				   .
   1858  1420							; 
   1859  1420
   1860  1420				   .L0269		;  if missile0y  <  _M_Edge_Top then goto __Delete_Missile
   1861  1420
   1862  1420		       a5 91		      LDA	missile0y
   1863  1422		       c9 02		      CMP	#_M_Edge_Top
   1864  1424		       b0 03		      BCS	.skipL0269
   1865  1426				   .condpart36
   1866  1426		       4c 5b d4 	      jmp	.__Delete_Missile
   1867  1429
   1868  1429				   .skipL0269
   1869  1429				   .L0270		;  if missile0y  >  _M_Edge_Bottom then goto __Delete_Missile
   1870  1429
   1871  1429		       a9 58		      LDA	#_M_Edge_Bottom
   1872  142b		       c5 91		      CMP	missile0y
   1873  142d		       b0 03		      BCS	.skipL0270
   1874  142f				   .condpart37
   1875  142f		       4c 5b d4 	      jmp	.__Delete_Missile
   1876  1432
   1877  1432				   .skipL0270
   1878  1432				   .L0271		;  if missile0x  <  _M_Edge_Left then goto __Delete_Missile
   1879  1432
   1880  1432		       a5 82		      LDA	missile0x
   1881  1434		       c9 0e		      CMP	#_M_Edge_Left
   1882  1436		       b0 03		      BCS	.skipL0271
   1883  1438				   .condpart38
   1884  1438		       4c 5b d4 	      jmp	.__Delete_Missile
   1885  143b
   1886  143b				   .skipL0271
   1887  143b				   .L0272		;  if missile0x  >  _M_Edge_Right then goto __Delete_Missile
   1888  143b
   1889  143b		       a9 94		      LDA	#_M_Edge_Right
   1890  143d		       c5 82		      CMP	missile0x
   1891  143f		       b0 03		      BCS	.skipL0272
   1892  1441				   .condpart39
   1893  1441		       4c 5b d4 	      jmp	.__Delete_Missile
   1894  1444
   1895  1444				   .skipL0272
   1896  1444				   .
   1897  1444							; 
   1898  1444
   1899  1444				   .
   1900  1444							; 
   1901  1444
   1902  1444				   .L0273		;  if !collision(playfield,missile0) then goto __Skip_Missile
   1903  1444
   1904  1444		       24 04		      bit	CXM0FB
   1905  1446		       30 03		      BMI	.skipL0273
   1906  1448				   .condpart40
   1907  1448		       4c 67 d4 	      jmp	.__Skip_Missile
   1908  144b
   1909  144b				   .skipL0273
   1910  144b				   .
   1911  144b							; 
   1912  144b
   1913  144b				   .
   1914  144b							; 
   1915  144b
   1916  144b				   .L0274		;  if _Ch0_Sound  <>  3 then _Ch0_Sound  =  1	:  _Ch0_Duration  =  1	:  _Ch0_Counter  =  0
   1917  144b
   1918  144b		       a5 da		      LDA	_Ch0_Sound
   1919  144d		       c9 03		      CMP	#3
   1920  144f		       f0 0a		      BEQ	.skipL0274
   1921  1451				   .condpart41
   1922  1451		       a9 01		      LDA	#1
   1923  1453		       85 da		      STA	_Ch0_Sound
   1924  1455		       85 db		      STA	_Ch0_Duration
   1925  1457		       a9 00		      LDA	#0
   1926  1459		       85 dc		      STA	_Ch0_Counter
   1927  145b				   .skipL0274
   1928  145b				   .
   1929  145b							; 
   1930  145b
   1931  145b				   .__Delete_Missile
   1932  145b							; __Delete_Missile
   1933  145b
   1934  145b				   .
   1935  145b							; 
   1936  145b
   1937  145b				   .
   1938  145b							; 
   1939  145b
   1940  145b				   .L0275		;  _Bit7_M0_Moving{7}	=  0  :  missile0x  =  200  :  missile0y  =  200
   1941  145b
   1942  145b		       a5 ec		      LDA	_Bit7_M0_Moving
   1943  145d		       29 7f		      AND	#127
   1944  145f		       85 ec		      STA	_Bit7_M0_Moving
   1945  1461		       a9 c8		      LDA	#200
   1946  1463		       85 82		      STA	missile0x
   1947  1465		       85 91		      STA	missile0y
   1948  1467				   .
   1949  1467							; 
   1950  1467
   1951  1467				   .__Skip_Missile
   1952  1467							; __Skip_Missile
   1953  1467
   1954  1467				   .
   1955  1467							; 
   1956  1467
   1957  1467				   .
   1958  1467							; 
   1959  1467
   1960  1467				   .
   1961  1467							; 
   1962  1467
   1963  1467				   .
   1964  1467							; 
   1965  1467
   1966  1467				   .L0276		;  if !collision(player0,missile0) then __Skip_Shot_Enemy
   1967  1467
   1968  1467		       24 00		      bit	CXM0P
   1969  1469					      if	((* - .__Skip_Shot_Enemy) < 127) && ((* - .__Skip_Shot_Enemy) > -128)
   1970  1469		       50 3a		      bvc	.__Skip_Shot_Enemy
   1971  146b				  -	      else
   1972  146b				  -	      bvs	.6skip__Skip_Shot_Enemy
   1973  146b				  -	      jmp	.__Skip_Shot_Enemy
   1974  146b				  -.6skip__Skip_Shot_Enemy
   1975  146b					      endif
   1976  146b				   .
   1977  146b							; 
   1978  146b
   1979  146b				   .
   1980  146b							; 
   1981  146b
   1982  146b				   .L0277		;  _Bit7_M0_Moving{7}	=  0  :  missile0x  =  200  :  missile0y  =  200
   1983  146b
   1984  146b		       a5 ec		      LDA	_Bit7_M0_Moving
   1985  146d		       29 7f		      AND	#127
   1986  146f		       85 ec		      STA	_Bit7_M0_Moving
   1987  1471		       a9 c8		      LDA	#200
   1988  1473		       85 82		      STA	missile0x
   1989  1475		       85 91		      STA	missile0y
   1990  1477				   .
   1991  1477							; 
   1992  1477
   1993  1477				   .L0278		;  if roommate_type  >  1 then __Skip_Shot_Enemy
   1994  1477
   1995  1477		       a9 01		      LDA	#1
   1996  1479		       c5 df		      CMP	roommate_type
   1997  147b					      if	((* - .__Skip_Shot_Enemy) < 127) && ((* - .__Skip_Shot_Enemy) > -128)
   1998  147b		       90 28		      bcc	.__Skip_Shot_Enemy
   1999  147d				  -	      else
   2000  147d				  -	      bcs	.7skip__Skip_Shot_Enemy
   2001  147d				  -	      jmp	.__Skip_Shot_Enemy
   2002  147d				  -.7skip__Skip_Shot_Enemy
   2003  147d					      endif
   2004  147d				   .
   2005  147d							; 
   2006  147d
   2007  147d				   .L0279		;  _Ch0_Sound	=  3  :  _Ch0_Duration	=  1  :  _Ch0_Counter  =  0
   2008  147d
   2009  147d		       a9 03		      LDA	#3
   2010  147f		       85 da		      STA	_Ch0_Sound
   2011  1481		       a9 01		      LDA	#1
   2012  1483		       85 db		      STA	_Ch0_Duration
   2013  1485		       a9 00		      LDA	#0
   2014  1487		       85 dc		      STA	_Ch0_Counter
   2015  1489				   .
   2016  1489							; 
   2017  1489
   2018  1489				   .
   2019  1489							; 
   2020  1489
   2021  1489				   .L0280		;  player0y  =  200  :  w_enemy_y_startpos  =	200  :	score  =  score  +  40
   2022  1489
   2023  1489		       a9 c8		      LDA	#200
   2024  148b		       85 85		      STA	player0y
   2025  148d		       8d 6b f0 	      STA	w_enemy_y_startpos
   2026  1490		       f8		      SED
   2027  1491		       18		      CLC
   2028  1492		       a5 95		      LDA	score+2
   2029  1494		       69 40		      ADC	#$40
   2030  1496		       85 95		      STA	score+2
   2031  1498		       a5 94		      LDA	score+1
   2032  149a		       69 00		      ADC	#$00
   2033  149c		       85 94		      STA	score+1
   2034  149e		       a5 93		      LDA	score
   2035  14a0		       69 00		      ADC	#$00
   2036  14a2		       85 93		      STA	score
   2037  14a4		       d8		      CLD
   2038  14a5				   .
   2039  14a5							; 
   2040  14a5
   2041  14a5				   .__Skip_Shot_Enemy
   2042  14a5							; __Skip_Shot_Enemy
   2043  14a5
   2044  14a5				   .
   2045  14a5							; 
   2046  14a5
   2047  14a5				   .
   2048  14a5							; 
   2049  14a5
   2050  14a5				   .
   2051  14a5							; 
   2052  14a5
   2053  14a5				   .
   2054  14a5							; 
   2055  14a5
   2056  14a5				   .L0281		;  if !collision(ball,missile0) then __Skip_Shot_Extra_Wall
   2057  14a5
   2058  14a5		       24 04		      bit	CXM0FB
   2059  14a7					      if	((* - .__Skip_Shot_Extra_Wall) < 127) && ((* - .__Skip_Shot_Extra_Wall) > -128)
   2060  14a7		       50 3d		      bvc	.__Skip_Shot_Extra_Wall
   2061  14a9				  -	      else
   2062  14a9				  -	      bvs	.8skip__Skip_Shot_Extra_Wall
   2063  14a9				  -	      jmp	.__Skip_Shot_Extra_Wall
   2064  14a9				  -.8skip__Skip_Shot_Extra_Wall
   2065  14a9					      endif
   2066  14a9				   .
   2067  14a9							; 
   2068  14a9
   2069  14a9				   .
   2070  14a9							; 
   2071  14a9
   2072  14a9				   .L0282		;  _Ch0_Sound	=  4  :  _Ch0_Duration	=  1  :  _Ch0_Counter  =  0
   2073  14a9
   2074  14a9		       a9 04		      LDA	#4
   2075  14ab		       85 da		      STA	_Ch0_Sound
   2076  14ad		       a9 01		      LDA	#1
   2077  14af		       85 db		      STA	_Ch0_Duration
   2078  14b1		       a9 00		      LDA	#0
   2079  14b3		       85 dc		      STA	_Ch0_Counter
   2080  14b5				   .
   2081  14b5							; 
   2082  14b5
   2083  14b5				   .
   2084  14b5							; 
   2085  14b5
   2086  14b5				   .L0283		;  _Bit7_M0_Moving{7}	=  0  :  missile0x  =  200  :  missile0y  =  200
   2087  14b5
   2088  14b5		       a5 ec		      LDA	_Bit7_M0_Moving
   2089  14b7		       29 7f		      AND	#127
   2090  14b9		       85 ec		      STA	_Bit7_M0_Moving
   2091  14bb		       a9 c8		      LDA	#200
   2092  14bd		       85 82		      STA	missile0x
   2093  14bf		       85 91		      STA	missile0y
   2094  14c1				   .
   2095  14c1							; 
   2096  14c1
   2097  14c1				   .
   2098  14c1							; 
   2099  14c1
   2100  14c1				   .L0284		;  if r_extra_wall_type  >  3 then __Skip_Shot_Extra_Wall
   2101  14c1
   2102  14c1		       a9 03		      LDA	#3
   2103  14c3		       cd ee f0 	      CMP	r_extra_wall_type
   2104  14c6					      if	((* - .__Skip_Shot_Extra_Wall) < 127) && ((* - .__Skip_Shot_Extra_Wall) > -128)
   2105  14c6		       90 1e		      bcc	.__Skip_Shot_Extra_Wall
   2106  14c8				  -	      else
   2107  14c8				  -	      bcs	.9skip__Skip_Shot_Extra_Wall
   2108  14c8				  -	      jmp	.__Skip_Shot_Extra_Wall
   2109  14c8				  -.9skip__Skip_Shot_Extra_Wall
   2110  14c8					      endif
   2111  14c8				   .L0285		;  w_extra_wall_startpos  =  200  :  bally  =	0  :  score  =	score  +  10
   2112  14c8
   2113  14c8		       a9 c8		      LDA	#200
   2114  14ca		       8d 6f f0 	      STA	w_extra_wall_startpos
   2115  14cd		       a9 00		      LDA	#0
   2116  14cf		       85 89		      STA	bally
   2117  14d1		       f8		      SED
   2118  14d2		       18		      CLC
   2119  14d3		       a5 95		      LDA	score+2
   2120  14d5		       69 10		      ADC	#$10
   2121  14d7		       85 95		      STA	score+2
   2122  14d9		       a5 94		      LDA	score+1
   2123  14db		       69 00		      ADC	#$00
   2124  14dd		       85 94		      STA	score+1
   2125  14df		       a5 93		      LDA	score
   2126  14e1		       69 00		      ADC	#$00
   2127  14e3		       85 93		      STA	score
   2128  14e5		       d8		      CLD
   2129  14e6				   .
   2130  14e6							; 
   2131  14e6
   2132  14e6				   .__Skip_Shot_Extra_Wall
   2133  14e6							; __Skip_Shot_Extra_Wall
   2134  14e6
   2135  14e6				   .
   2136  14e6							; 
   2137  14e6
   2138  14e6				   .
   2139  14e6							; 
   2140  14e6
   2141  14e6				   .
   2142  14e6							; 
   2143  14e6
   2144  14e6				   .L0286		;  if !collision(player1,player0) then goto __Skip_P1_Touched_P0
   2145  14e6
   2146  14e6		       24 07		      bit	CXPPMM
   2147  14e8		       30 03		      BMI	.skipL0286
   2148  14ea				   .condpart42
   2149  14ea		       4c 29 d5 	      jmp	.__Skip_P1_Touched_P0
   2150  14ed
   2151  14ed				   .skipL0286
   2152  14ed				   .
   2153  14ed							; 
   2154  14ed
   2155  14ed				   .
   2156  14ed							; 
   2157  14ed
   2158  14ed				   .L0287		;  if roommate_type  >  1 then __Skip_P1_Touched_Enemy
   2159  14ed
   2160  14ed		       a9 01		      LDA	#1
   2161  14ef		       c5 df		      CMP	roommate_type
   2162  14f1					      if	((* - .__Skip_P1_Touched_Enemy) < 127) && ((* - .__Skip_P1_Touched_Enemy) > -128)
   2163  14f1		       90 15		      bcc	.__Skip_P1_Touched_Enemy
   2164  14f3				  -	      else
   2165  14f3				  -	      bcs	.10skip__Skip_P1_Touched_Enemy
   2166  14f3				  -	      jmp	.__Skip_P1_Touched_Enemy
   2167  14f3				  -.10skip__Skip_P1_Touched_Enemy
   2168  14f3					      endif
   2169  14f3				   .
   2170  14f3							; 
   2171  14f3
   2172  14f3				   .L0288		;  if _Ch0_Sound  <>  4 then _Ch0_Sound  =  4	:  _Ch0_Duration  =  1	:  _Ch0_Counter  =  0
   2173  14f3
   2174  14f3		       a5 da		      LDA	_Ch0_Sound
   2175  14f5		       c9 04		      CMP	#4
   2176  14f7		       f0 0c		      BEQ	.skipL0288
   2177  14f9				   .condpart43
   2178  14f9		       a9 04		      LDA	#4
   2179  14fb		       85 da		      STA	_Ch0_Sound
   2180  14fd		       a9 01		      LDA	#1
   2181  14ff		       85 db		      STA	_Ch0_Duration
   2182  1501		       a9 00		      LDA	#0
   2183  1503		       85 dc		      STA	_Ch0_Counter
   2184  1505				   .skipL0288
   2185  1505				   .L0289		;  goto __Skip_P1_Touched_P0
   2186  1505
   2187  1505		       4c 29 d5 	      jmp	.__Skip_P1_Touched_P0
   2188  1508
   2189  1508				   .__Skip_P1_Touched_Enemy
   2190  1508							; __Skip_P1_Touched_Enemy
   2191  1508
   2192  1508				   .L0290		;  if roommate_type  =  2 then pfscore2  =  pfscore2  *  2  |	1  :  player1y	=  player1y  -	1
   2193  1508
   2194  1508		       a5 df		      LDA	roommate_type
   2195  150a		       c9 02		      CMP	#2
   2196  150c		       d0 09		      BNE	.skipL0290
   2197  150e				   .condpart44
   2198  150e							; complex statement detected
   2199  150e		       a5 f3		      LDA	pfscore2
   2200  1510		       0a		      asl
   2201  1511		       09 01		      ORA	#1
   2202  1513		       85 f3		      STA	pfscore2
   2203  1515		       c6 86		      DEC	player1y
   2204  1517				   .skipL0290
   2205  1517				   .L0291		;  if _Ch0_Sound  <>  3 then _Ch0_Sound  =  3	:  _Ch0_Duration  =  1	:  _Ch0_Counter  =  0
   2206  1517
   2207  1517		       a5 da		      LDA	_Ch0_Sound
   2208  1519		       c9 03		      CMP	#3
   2209  151b		       f0 0c		      BEQ	.skipL0291
   2210  151d				   .condpart45
   2211  151d		       a9 03		      LDA	#3
   2212  151f		       85 da		      STA	_Ch0_Sound
   2213  1521		       a9 01		      LDA	#1
   2214  1523		       85 db		      STA	_Ch0_Duration
   2215  1525		       a9 00		      LDA	#0
   2216  1527		       85 dc		      STA	_Ch0_Counter
   2217  1529				   .skipL0291
   2218  1529				   .__Skip_P1_Touched_P0
   2219  1529							; __Skip_P1_Touched_P0
   2220  1529
   2221  1529				   .
   2222  1529							; 
   2223  1529
   2224  1529				   .
   2225  1529							; 
   2226  1529
   2227  1529				   .L0292		;  if r_extra_wall_startpos  =  200 then goto _Skip_extra_Wall
   2228  1529
   2229  1529		       ad ef f0 	      LDA	r_extra_wall_startpos
   2230  152c		       c9 c8		      CMP	#200
   2231  152e		       d0 03		      BNE	.skipL0292
   2232  1530				   .condpart46
   2233  1530		       4c 4a d5 	      jmp	._Skip_extra_Wall
   2234  1533
   2235  1533				   .skipL0292
   2236  1533				   .L0293		;  ballx  =  r_extra_wall_startpos  +	extra_wall_move_x
   2237  1533
   2238  1533		       ad ef f0 	      LDA	r_extra_wall_startpos
   2239  1536		       18		      CLC
   2240  1537		       65 dd		      ADC	extra_wall_move_x
   2241  1539		       85 84		      STA	ballx
   2242  153b				   .L0294		;  bally  =  47
   2243  153b
   2244  153b		       a9 2f		      LDA	#47
   2245  153d		       85 89		      STA	bally
   2246  153f				   .L0295		;  ballheight	=  23
   2247  153f
   2248  153f		       a9 17		      LDA	#23
   2249  1541		       85 92		      STA	ballheight
   2250  1543				   .L0296		;  CTRLPF  =  r_extra_wall_width  |  1
   2251  1543
   2252  1543		       ad ed f0 	      LDA	r_extra_wall_width
   2253  1546		       09 01		      ORA	#1
   2254  1548		       85 0a		      STA	CTRLPF
   2255  154a				   ._Skip_extra_Wall
   2256  154a							; _Skip_extra_Wall
   2257  154a
   2258  154a				   .
   2259  154a							; 
   2260  154a
   2261  154a				   .
   2262  154a							; 
   2263  154a
   2264  154a				   .L0297		;  if r_enemy_y_startpos  =  200 then goto _Skip_enemy
   2265  154a
   2266  154a		       ad eb f0 	      LDA	r_enemy_y_startpos
   2267  154d		       c9 c8		      CMP	#200
   2268  154f		       d0 03		      BNE	.skipL0297
   2269  1551				   .condpart47
   2270  1551		       4c 61 d5 	      jmp	._Skip_enemy
   2271  1554
   2272  1554				   .skipL0297
   2273  1554				   .L0298		;  player0x  =  r_enemy_x_startpos  +	roommate_move_x
   2274  1554
   2275  1554		       ad ec f0 	      LDA	r_enemy_x_startpos
   2276  1557		       18		      CLC
   2277  1558		       65 de		      ADC	roommate_move_x
   2278  155a		       85 80		      STA	player0x
   2279  155c				   .L0299		;  player0y  =  r_enemy_y_startpos
   2280  155c
   2281  155c		       ad eb f0 	      LDA	r_enemy_y_startpos
   2282  155f		       85 85		      STA	player0y
   2283  1561				   ._Skip_enemy
   2284  1561							; _Skip_enemy
   2285  1561
   2286  1561				   .
   2287  1561							; 
   2288  1561
   2289  1561				   .
   2290  1561							; 
   2291  1561
   2292  1561				   .
   2293  1561							; 
   2294  1561
   2295  1561				   .L0300		;  if collision(player1,playfield)  &&  _Bit2_P1_Dir_Left{2} then player1x  =	player1x  +  1
   2296  1561
   2297  1561		       24 03		      bit	CXP1FB
   2298  1563		       10 08		      BPL	.skipL0300
   2299  1565				   .condpart48
   2300  1565		       a5 d8		      LDA	_Bit2_P1_Dir_Left
   2301  1567		       29 04		      AND	#4
   2302  1569		       f0 02		      BEQ	.skip48then
   2303  156b				   .condpart49
   2304  156b		       e6 81		      INC	player1x
   2305  156d				   .skip48then
   2306  156d				   .skipL0300
   2307  156d				   .L0301		;  if collision(player1,playfield)  &&  _Bit3_P1_Dir_Right{3} then player1x  =  player1x  -  1
   2308  156d
   2309  156d		       24 03		      bit	CXP1FB
   2310  156f		       10 08		      BPL	.skipL0301
   2311  1571				   .condpart50
   2312  1571		       a5 d8		      LDA	_Bit3_P1_Dir_Right
   2313  1573		       29 08		      AND	#8
   2314  1575		       f0 02		      BEQ	.skip50then
   2315  1577				   .condpart51
   2316  1577		       c6 81		      DEC	player1x
   2317  1579				   .skip50then
   2318  1579				   .skipL0301
   2319  1579				   .L0302		;  if collision(player1,playfield)  &&  _Bit0_P1_Dir_Up{0} then player1y  =  player1y	+  1
   2320  1579
   2321  1579		       24 03		      bit	CXP1FB
   2322  157b		       10 07		      BPL	.skipL0302
   2323  157d				   .condpart52
   2324  157d		       a5 d8		      LDA	_Bit0_P1_Dir_Up
   2325  157f		       4a		      LSR
   2326  1580		       90 02		      BCC	.skip52then
   2327  1582				   .condpart53
   2328  1582		       e6 86		      INC	player1y
   2329  1584				   .skip52then
   2330  1584				   .skipL0302
   2331  1584				   .L0303		;  if collision(player1,playfield)  &&  _Bit1_P1_Dir_Down{1} then player1y  =	player1y  -  1
   2332  1584
   2333  1584		       24 03		      bit	CXP1FB
   2334  1586		       10 08		      BPL	.skipL0303
   2335  1588				   .condpart54
   2336  1588		       a5 d8		      LDA	_Bit1_P1_Dir_Down
   2337  158a		       29 02		      AND	#2
   2338  158c		       f0 02		      BEQ	.skip54then
   2339  158e				   .condpart55
   2340  158e		       c6 86		      DEC	player1y
   2341  1590				   .skip54then
   2342  1590				   .skipL0303
   2343  1590				   .
   2344  1590							; 
   2345  1590
   2346  1590				   .L0304		;  _BitOp_P1_Dir  =  _BitOp_P1_Dir  &	$F0
   2347  1590
   2348  1590		       a5 d8		      LDA	_BitOp_P1_Dir
   2349  1592		       29 f0		      AND	#$F0
   2350  1594		       85 d8		      STA	_BitOp_P1_Dir
   2351  1596				   .
   2352  1596							; 
   2353  1596
   2354  1596				   .L0305		;  if joy0up then P1y_velocity  =  0.0  :  player1y  =  player1y  -  1  :  _Bit0_P1_Dir_Up{0}	=  1  :  x  =  0  :  goto skip_gravity
   2355  1596
   2356  1596		       a9 10		      lda	#$10
   2357  1598		       2c 80 02 	      bit	SWCHA
   2358  159b		       d0 17		      BNE	.skipL0305
   2359  159d				   .condpart56
   2360  159d		       a2 00		      LDX	#0
   2361  159f		       86 ea		      STX	w
   2362  15a1		       a9 00		      LDA	#0
   2363  15a3		       85 e9		      STA	P1y_velocity
   2364  15a5		       c6 86		      DEC	player1y
   2365  15a7		       a5 d8		      LDA	_Bit0_P1_Dir_Up
   2366  15a9		       09 01		      ORA	#1
   2367  15ab		       85 d8		      STA	_Bit0_P1_Dir_Up
   2368  15ad		       a9 00		      LDA	#0
   2369  15af		       85 eb		      STA	x
   2370  15b1		       4c fb d5 	      jmp	.skip_gravity
   2371  15b4
   2372  15b4				   .skipL0305
   2373  15b4				   .L0306		;  if joy0down then P1y_velocity  =  0.0  :  player1y	=  player1y  +	1  :  _Bit1_P1_Dir_Down{1}  =  1  :  x	=  0  :  goto skip_gravity
   2374  15b4
   2375  15b4		       a9 20		      lda	#$20
   2376  15b6		       2c 80 02 	      bit	SWCHA
   2377  15b9		       d0 17		      BNE	.skipL0306
   2378  15bb				   .condpart57
   2379  15bb		       a2 00		      LDX	#0
   2380  15bd		       86 ea		      STX	w
   2381  15bf		       a9 00		      LDA	#0
   2382  15c1		       85 e9		      STA	P1y_velocity
   2383  15c3		       e6 86		      INC	player1y
   2384  15c5		       a5 d8		      LDA	_Bit1_P1_Dir_Down
   2385  15c7		       09 02		      ORA	#2
   2386  15c9		       85 d8		      STA	_Bit1_P1_Dir_Down
   2387  15cb		       a9 00		      LDA	#0
   2388  15cd		       85 eb		      STA	x
   2389  15cf		       4c fb d5 	      jmp	.skip_gravity
   2390  15d2
   2391  15d2				   .skipL0306
   2392  15d2				   .
   2393  15d2							; 
   2394  15d2
   2395  15d2				   .L0307		;  if collision(player1,playfield) then P1y_velocity  =  0.0  :  goto skip_gravity
   2396  15d2
   2397  15d2		       24 03		      bit	CXP1FB
   2398  15d4		       10 0b		      BPL	.skipL0307
   2399  15d6				   .condpart58
   2400  15d6		       a2 00		      LDX	#0
   2401  15d8		       86 ea		      STX	w
   2402  15da		       a9 00		      LDA	#0
   2403  15dc		       85 e9		      STA	P1y_velocity
   2404  15de		       4c fb d5 	      jmp	.skip_gravity
   2405  15e1
   2406  15e1				   .skipL0307
   2407  15e1				   .
   2408  15e1							; 
   2409  15e1
   2410  15e1				   .L0308		;  rem apply gravity
   2411  15e1
   2412  15e1				   .L0309		;  P1y_velocity  =  P1y_velocity  +  acceleration
   2413  15e1
   2414  15e1		       a5 ea		      LDA	w
   2415  15e3		       18		      CLC
   2416  15e4		       69 01		      ADC	#1
   2417  15e6		       85 ea		      STA	w
   2418  15e8		       a5 e9		      LDA	P1y_velocity
   2419  15ea		       69 00		      ADC	#0
   2420  15ec		       85 e9		      STA	P1y_velocity
   2421  15ee				   .L0310		;  P1y_position  =  P1y_position  +  P1y_velocity
   2422  15ee
   2423  15ee		       a5 eb		      LDA	x
   2424  15f0		       18		      CLC
   2425  15f1		       65 ea		      ADC	w
   2426  15f3		       85 eb		      STA	x
   2427  15f5		       a5 86		      LDA	P1y_position
   2428  15f7		       65 e9		      ADC	P1y_velocity
   2429  15f9		       85 86		      STA	P1y_position
   2430  15fb				   .
   2431  15fb							; 
   2432  15fb
   2433  15fb				   .skip_gravity
   2434  15fb							; skip_gravity
   2435  15fb
   2436  15fb				   .
   2437  15fb							; 
   2438  15fb
   2439  15fb				   .L0311		;  if joy0left then _Bit6_Flip_P0{6}  =  1  :	_Bit2_P1_Dir_Left{2}  =  1  :  player1x  =  player1x  -  1  :  goto _skip_move
   2440  15fb
   2441  15fb		       2c 80 02 	      bit	SWCHA
   2442  15fe		       70 11		      BVS	.skipL0311
   2443  1600				   .condpart59
   2444  1600		       a5 ec		      LDA	_Bit6_Flip_P0
   2445  1602		       09 40		      ORA	#64
   2446  1604		       85 ec		      STA	_Bit6_Flip_P0
   2447  1606		       a5 d8		      LDA	_Bit2_P1_Dir_Left
   2448  1608		       09 04		      ORA	#4
   2449  160a		       85 d8		      STA	_Bit2_P1_Dir_Left
   2450  160c		       c6 81		      DEC	player1x
   2451  160e		       4c 24 d6 	      jmp	._skip_move
   2452  1611
   2453  1611				   .skipL0311
   2454  1611				   .L0312		;  if joy0right then _Bit6_Flip_P0{6}	=  0  :  _Bit3_P1_Dir_Right{3}	=  1  :  player1x  =  player1x	+  1
   2455  1611
   2456  1611		       2c 80 02 	      bit	SWCHA
   2457  1614		       30 0e		      BMI	.skipL0312
   2458  1616				   .condpart60
   2459  1616		       a5 ec		      LDA	_Bit6_Flip_P0
   2460  1618		       29 bf		      AND	#191
   2461  161a		       85 ec		      STA	_Bit6_Flip_P0
   2462  161c		       a5 d8		      LDA	_Bit3_P1_Dir_Right
   2463  161e		       09 08		      ORA	#8
   2464  1620		       85 d8		      STA	_Bit3_P1_Dir_Right
   2465  1622		       e6 81		      INC	player1x
   2466  1624				   .skipL0312
   2467  1624				   ._skip_move
   2468  1624							; _skip_move
   2469  1624
   2470  1624				   .
   2471  1624							; 
   2472  1624
   2473  1624				   .
   2474  1624							; 
   2475  1624
   2476  1624				   .L0313		;  if player1x  <  player_min_x then player1x	=  player_max_x  :  gosub _send_room_state  :  WriteSendBuffer	=  3  :  goto _skip_game_action
   2477  1624
   2478  1624		       a5 81		      LDA	player1x
   2479  1626		       c9 0a		      CMP	#player_min_x
   2480  1628		       b0 0f		      BCS	.skipL0313
   2481  162a				   .condpart61
   2482  162a		       a9 86		      LDA	#player_max_x
   2483  162c		       85 81		      STA	player1x
   2484  162e		       20 89 d8 	      jsr	._send_room_state
   2485  1631		       a9 03		      LDA	#3
   2486  1633		       8d f1 1f 	      STA	WriteSendBuffer
   2487  1636		       4c 78 d6 	      jmp	._skip_game_action
   2488  1639
   2489  1639				   .skipL0313
   2490  1639				   .L0314		;  if player1y  <  player_min_y then player1y	=  player_max_y  :  gosub _send_room_state  :  WriteSendBuffer	=  4  :  goto _skip_game_action
   2491  1639
   2492  1639		       a5 86		      LDA	player1y
   2493  163b		       c9 02		      CMP	#player_min_y
   2494  163d		       b0 0f		      BCS	.skipL0314
   2495  163f				   .condpart62
   2496  163f		       a9 4c		      LDA	#player_max_y
   2497  1641		       85 86		      STA	player1y
   2498  1643		       20 89 d8 	      jsr	._send_room_state
   2499  1646		       a9 04		      LDA	#4
   2500  1648		       8d f1 1f 	      STA	WriteSendBuffer
   2501  164b		       4c 78 d6 	      jmp	._skip_game_action
   2502  164e
   2503  164e				   .skipL0314
   2504  164e				   .L0315		;  if player1x  >  player_max_x then player1x	=  player_min_x  :  gosub _send_room_state  :  WriteSendBuffer	=  5  :  goto _skip_game_action
   2505  164e
   2506  164e		       a9 86		      LDA	#player_max_x
   2507  1650		       c5 81		      CMP	player1x
   2508  1652		       b0 0f		      BCS	.skipL0315
   2509  1654				   .condpart63
   2510  1654		       a9 0a		      LDA	#player_min_x
   2511  1656		       85 81		      STA	player1x
   2512  1658		       20 89 d8 	      jsr	._send_room_state
   2513  165b		       a9 05		      LDA	#5
   2514  165d		       8d f1 1f 	      STA	WriteSendBuffer
   2515  1660		       4c 78 d6 	      jmp	._skip_game_action
   2516  1663
   2517  1663				   .skipL0315
   2518  1663				   .L0316		;  if player1y  >  player_max_y then player1y	=  player_min_y  :  gosub _send_room_state  :  WriteSendBuffer	=  6  :  goto _skip_game_action
   2519  1663
   2520  1663		       a9 4c		      LDA	#player_max_y
   2521  1665		       c5 86		      CMP	player1y
   2522  1667		       b0 0f		      BCS	.skipL0316
   2523  1669				   .condpart64
   2524  1669		       a9 02		      LDA	#player_min_y
   2525  166b		       85 86		      STA	player1y
   2526  166d		       20 89 d8 	      jsr	._send_room_state
   2527  1670		       a9 06		      LDA	#6
   2528  1672		       8d f1 1f 	      STA	WriteSendBuffer
   2529  1675		       4c 78 d6 	      jmp	._skip_game_action
   2530  1678
   2531  1678				   .skipL0316
   2532  1678				   .
   2533  1678							; 
   2534  1678
   2535  1678				   ._skip_game_action
   2536  1678							; _skip_game_action
   2537  1678
   2538  1678				   .
   2539  1678							; 
   2540  1678
   2541  1678				   .
   2542  1678							; 
   2543  1678
   2544  1678				   .L0317		;  if !_Ch0_Sound then goto __Skip_Ch_0
   2545  1678
   2546  1678		       a5 da		      LDA	_Ch0_Sound
   2547  167a		       d0 03		      BNE	.skipL0317
   2548  167c				   .condpart65
   2549  167c		       4c a2 d7 	      jmp	.__Skip_Ch_0
   2550  167f
   2551  167f				   .skipL0317
   2552  167f				   .
   2553  167f							; 
   2554  167f
   2555  167f				   .
   2556  167f							; 
   2557  167f
   2558  167f				   .L0318		;  _Ch0_Duration  =  _Ch0_Duration  -	1
   2559  167f
   2560  167f		       c6 db		      DEC	_Ch0_Duration
   2561  1681				   .
   2562  1681							; 
   2563  1681
   2564  1681				   .
   2565  1681							; 
   2566  1681
   2567  1681				   .
   2568  1681							; 
   2569  1681
   2570  1681				   .L0319		;  if _Ch0_Duration then goto __Skip_Ch_0
   2571  1681
   2572  1681		       a5 db		      LDA	_Ch0_Duration
   2573  1683		       f0 03		      BEQ	.skipL0319
   2574  1685				   .condpart66
   2575  1685		       4c a2 d7 	      jmp	.__Skip_Ch_0
   2576  1688
   2577  1688				   .skipL0319
   2578  1688				   .
   2579  1688							; 
   2580  1688
   2581  1688				   .
   2582  1688							; 
   2583  1688
   2584  1688				   .
   2585  1688							; 
   2586  1688
   2587  1688				   .
   2588  1688							; 
   2589  1688
   2590  1688				   .L0320		;  if _Ch0_Sound  <>  1 then goto __Skip_Ch0_Sound_001
   2591  1688
   2592  1688		       a5 da		      LDA	_Ch0_Sound
   2593  168a		       c9 01		      CMP	#1
   2594  168c		       f0 03		      BEQ	.skipL0320
   2595  168e				   .condpart67
   2596  168e		       4c cd d6 	      jmp	.__Skip_Ch0_Sound_001
   2597  1691
   2598  1691				   .skipL0320
   2599  1691				   .
   2600  1691							; 
   2601  1691
   2602  1691				   .
   2603  1691							; 
   2604  1691
   2605  1691				   .L0321		;  temp4  =  _SD_Shot_Wall[_Ch0_Counter]
   2606  1691
   2607  1691		       a6 dc		      LDX	_Ch0_Counter
   2608  1693		       bd c8 d7 	      LDA	_SD_Shot_Wall,x
   2609  1696		       85 9f		      STA	temp4
   2610  1698				   .
   2611  1698							; 
   2612  1698
   2613  1698				   .
   2614  1698							; 
   2615  1698
   2616  1698				   .L0322		;  if temp4  =  255 then goto __Clear_Ch_0
   2617  1698
   2618  1698		       a5 9f		      LDA	temp4
   2619  169a		       c9 ff		      CMP	#255
   2620  169c		       d0 03		      BNE	.skipL0322
   2621  169e				   .condpart68
   2622  169e		       4c 9c d7 	      jmp	.__Clear_Ch_0
   2623  16a1
   2624  16a1				   .skipL0322
   2625  16a1				   .
   2626  16a1							; 
   2627  16a1
   2628  16a1				   .
   2629  16a1							; 
   2630  16a1
   2631  16a1				   .L0323		;  _Ch0_Counter  =  _Ch0_Counter  +  1
   2632  16a1
   2633  16a1		       e6 dc		      INC	_Ch0_Counter
   2634  16a3				   .L0324		;  temp5  =  _SD_Shot_Wall[_Ch0_Counter]  :  _Ch0_Counter  =  _Ch0_Counter  +	1
   2635  16a3
   2636  16a3		       a6 dc		      LDX	_Ch0_Counter
   2637  16a5		       bd c8 d7 	      LDA	_SD_Shot_Wall,x
   2638  16a8		       85 a0		      STA	temp5
   2639  16aa		       e6 dc		      INC	_Ch0_Counter
   2640  16ac				   .L0325		;  temp6  =  _SD_Shot_Wall[_Ch0_Counter]  :  _Ch0_Counter  =  _Ch0_Counter  +	1
   2641  16ac
   2642  16ac		       a6 dc		      LDX	_Ch0_Counter
   2643  16ae		       bd c8 d7 	      LDA	_SD_Shot_Wall,x
   2644  16b1		       85 a1		      STA	temp6
   2645  16b3		       e6 dc		      INC	_Ch0_Counter
   2646  16b5				   .
   2647  16b5							; 
   2648  16b5
   2649  16b5				   .
   2650  16b5							; 
   2651  16b5
   2652  16b5				   .L0326		;  AUDV0  =  temp4
   2653  16b5
   2654  16b5		       a5 9f		      LDA	temp4
   2655  16b7		       85 19		      STA	AUDV0
   2656  16b9				   .L0327		;  AUDC0  =  temp5
   2657  16b9
   2658  16b9		       a5 a0		      LDA	temp5
   2659  16bb		       85 15		      STA	AUDC0
   2660  16bd				   .L0328		;  AUDF0  =  temp6
   2661  16bd
   2662  16bd		       a5 a1		      LDA	temp6
   2663  16bf		       85 17		      STA	AUDF0
   2664  16c1				   .
   2665  16c1							; 
   2666  16c1
   2667  16c1				   .
   2668  16c1							; 
   2669  16c1
   2670  16c1				   .L0329		;  _Ch0_Duration  =  _SD_Shot_Wall[_Ch0_Counter]  :  _Ch0_Counter  =  _Ch0_Counter  +	1
   2671  16c1
   2672  16c1		       a6 dc		      LDX	_Ch0_Counter
   2673  16c3		       bd c8 d7 	      LDA	_SD_Shot_Wall,x
   2674  16c6		       85 db		      STA	_Ch0_Duration
   2675  16c8		       e6 dc		      INC	_Ch0_Counter
   2676  16ca				   .
   2677  16ca							; 
   2678  16ca
   2679  16ca				   .
   2680  16ca							; 
   2681  16ca
   2682  16ca				   .L0330		;  goto __Skip_Ch_0
   2683  16ca
   2684  16ca		       4c a2 d7 	      jmp	.__Skip_Ch_0
   2685  16cd
   2686  16cd				   .
   2687  16cd							; 
   2688  16cd
   2689  16cd				   .__Skip_Ch0_Sound_001
   2690  16cd							; __Skip_Ch0_Sound_001
   2691  16cd
   2692  16cd				   .
   2693  16cd							; 
   2694  16cd
   2695  16cd				   .
   2696  16cd							; 
   2697  16cd
   2698  16cd				   .
   2699  16cd							; 
   2700  16cd
   2701  16cd				   .
   2702  16cd							; 
   2703  16cd
   2704  16cd				   .L0331		;  if _Ch0_Sound  <>  2 then goto __Skip_Ch0_Sound_002
   2705  16cd
   2706  16cd		       a5 da		      LDA	_Ch0_Sound
   2707  16cf		       c9 02		      CMP	#2
   2708  16d1		       f0 03		      BEQ	.skipL0331
   2709  16d3				   .condpart69
   2710  16d3		       4c 12 d7 	      jmp	.__Skip_Ch0_Sound_002
   2711  16d6
   2712  16d6				   .skipL0331
   2713  16d6				   .
   2714  16d6							; 
   2715  16d6
   2716  16d6				   .
   2717  16d6							; 
   2718  16d6
   2719  16d6				   .L0332		;  temp4  =  _SD_Shoot_Miss[_Ch0_Counter]
   2720  16d6
   2721  16d6		       a6 dc		      LDX	_Ch0_Counter
   2722  16d8		       bd 00 d8 	      LDA	_SD_Shoot_Miss,x
   2723  16db		       85 9f		      STA	temp4
   2724  16dd				   .
   2725  16dd							; 
   2726  16dd
   2727  16dd				   .
   2728  16dd							; 
   2729  16dd
   2730  16dd				   .L0333		;  if temp4  =  255 then goto __Clear_Ch_0
   2731  16dd
   2732  16dd		       a5 9f		      LDA	temp4
   2733  16df		       c9 ff		      CMP	#255
   2734  16e1		       d0 03		      BNE	.skipL0333
   2735  16e3				   .condpart70
   2736  16e3		       4c 9c d7 	      jmp	.__Clear_Ch_0
   2737  16e6
   2738  16e6				   .skipL0333
   2739  16e6				   .
   2740  16e6							; 
   2741  16e6
   2742  16e6				   .
   2743  16e6							; 
   2744  16e6
   2745  16e6				   .L0334		;  _Ch0_Counter  =  _Ch0_Counter  +  1
   2746  16e6
   2747  16e6		       e6 dc		      INC	_Ch0_Counter
   2748  16e8				   .L0335		;  temp5  =  _SD_Shoot_Miss[_Ch0_Counter]  :  _Ch0_Counter  =	_Ch0_Counter  +  1
   2749  16e8
   2750  16e8		       a6 dc		      LDX	_Ch0_Counter
   2751  16ea		       bd 00 d8 	      LDA	_SD_Shoot_Miss,x
   2752  16ed		       85 a0		      STA	temp5
   2753  16ef		       e6 dc		      INC	_Ch0_Counter
   2754  16f1				   .L0336		;  temp6  =  _SD_Shoot_Miss[_Ch0_Counter]  :  _Ch0_Counter  =	_Ch0_Counter  +  1
   2755  16f1
   2756  16f1		       a6 dc		      LDX	_Ch0_Counter
   2757  16f3		       bd 00 d8 	      LDA	_SD_Shoot_Miss,x
   2758  16f6		       85 a1		      STA	temp6
   2759  16f8		       e6 dc		      INC	_Ch0_Counter
   2760  16fa				   .
   2761  16fa							; 
   2762  16fa
   2763  16fa				   .
   2764  16fa							; 
   2765  16fa
   2766  16fa				   .L0337		;  AUDV0  =  temp4
   2767  16fa
   2768  16fa		       a5 9f		      LDA	temp4
   2769  16fc		       85 19		      STA	AUDV0
   2770  16fe				   .L0338		;  AUDC0  =  temp5
   2771  16fe
   2772  16fe		       a5 a0		      LDA	temp5
   2773  1700		       85 15		      STA	AUDC0
   2774  1702				   .L0339		;  AUDF0  =  temp6
   2775  1702
   2776  1702		       a5 a1		      LDA	temp6
   2777  1704		       85 17		      STA	AUDF0
   2778  1706				   .
   2779  1706							; 
   2780  1706
   2781  1706				   .
   2782  1706							; 
   2783  1706
   2784  1706				   .L0340		;  _Ch0_Duration  =  _SD_Shoot_Miss[_Ch0_Counter]  :  _Ch0_Counter  =	_Ch0_Counter  +  1
   2785  1706
   2786  1706		       a6 dc		      LDX	_Ch0_Counter
   2787  1708		       bd 00 d8 	      LDA	_SD_Shoot_Miss,x
   2788  170b		       85 db		      STA	_Ch0_Duration
   2789  170d		       e6 dc		      INC	_Ch0_Counter
   2790  170f				   .
   2791  170f							; 
   2792  170f
   2793  170f				   .
   2794  170f							; 
   2795  170f
   2796  170f				   .L0341		;  goto __Skip_Ch_0
   2797  170f
   2798  170f		       4c a2 d7 	      jmp	.__Skip_Ch_0
   2799  1712
   2800  1712				   .
   2801  1712							; 
   2802  1712
   2803  1712				   .__Skip_Ch0_Sound_002
   2804  1712							; __Skip_Ch0_Sound_002
   2805  1712
   2806  1712				   .
   2807  1712							; 
   2808  1712
   2809  1712				   .
   2810  1712							; 
   2811  1712
   2812  1712				   .
   2813  1712							; 
   2814  1712
   2815  1712				   .
   2816  1712							; 
   2817  1712
   2818  1712				   .L0342		;  if _Ch0_Sound  <>  3 then goto __Skip_Ch0_Sound_003
   2819  1712
   2820  1712		       a5 da		      LDA	_Ch0_Sound
   2821  1714		       c9 03		      CMP	#3
   2822  1716		       f0 03		      BEQ	.skipL0342
   2823  1718				   .condpart71
   2824  1718		       4c 57 d7 	      jmp	.__Skip_Ch0_Sound_003
   2825  171b
   2826  171b				   .skipL0342
   2827  171b				   .
   2828  171b							; 
   2829  171b
   2830  171b				   .
   2831  171b							; 
   2832  171b
   2833  171b				   .L0343		;  temp4  =  _SD_Shoot_Enemy[_Ch0_Counter]
   2834  171b
   2835  171b		       a6 dc		      LDX	_Ch0_Counter
   2836  171d		       bd 48 d8 	      LDA	_SD_Shoot_Enemy,x
   2837  1720		       85 9f		      STA	temp4
   2838  1722				   .
   2839  1722							; 
   2840  1722
   2841  1722				   .
   2842  1722							; 
   2843  1722
   2844  1722				   .L0344		;  if temp4  =  255 then goto __Clear_Ch_0
   2845  1722
   2846  1722		       a5 9f		      LDA	temp4
   2847  1724		       c9 ff		      CMP	#255
   2848  1726		       d0 03		      BNE	.skipL0344
   2849  1728				   .condpart72
   2850  1728		       4c 9c d7 	      jmp	.__Clear_Ch_0
   2851  172b
   2852  172b				   .skipL0344
   2853  172b				   .
   2854  172b							; 
   2855  172b
   2856  172b				   .
   2857  172b							; 
   2858  172b
   2859  172b				   .L0345		;  _Ch0_Counter  =  _Ch0_Counter  +  1
   2860  172b
   2861  172b		       e6 dc		      INC	_Ch0_Counter
   2862  172d				   .L0346		;  temp5  =  _SD_Shoot_Enemy[_Ch0_Counter]  :	_Ch0_Counter  =  _Ch0_Counter  +  1
   2863  172d
   2864  172d		       a6 dc		      LDX	_Ch0_Counter
   2865  172f		       bd 48 d8 	      LDA	_SD_Shoot_Enemy,x
   2866  1732		       85 a0		      STA	temp5
   2867  1734		       e6 dc		      INC	_Ch0_Counter
   2868  1736				   .L0347		;  temp6  =  _SD_Shoot_Enemy[_Ch0_Counter]  :	_Ch0_Counter  =  _Ch0_Counter  +  1
   2869  1736
   2870  1736		       a6 dc		      LDX	_Ch0_Counter
   2871  1738		       bd 48 d8 	      LDA	_SD_Shoot_Enemy,x
   2872  173b		       85 a1		      STA	temp6
   2873  173d		       e6 dc		      INC	_Ch0_Counter
   2874  173f				   .
   2875  173f							; 
   2876  173f
   2877  173f				   .
   2878  173f							; 
   2879  173f
   2880  173f				   .L0348		;  AUDV0  =  temp4
   2881  173f
   2882  173f		       a5 9f		      LDA	temp4
   2883  1741		       85 19		      STA	AUDV0
   2884  1743				   .L0349		;  AUDC0  =  temp5
   2885  1743
   2886  1743		       a5 a0		      LDA	temp5
   2887  1745		       85 15		      STA	AUDC0
   2888  1747				   .L0350		;  AUDF0  =  temp6
   2889  1747
   2890  1747		       a5 a1		      LDA	temp6
   2891  1749		       85 17		      STA	AUDF0
   2892  174b				   .
   2893  174b							; 
   2894  174b
   2895  174b				   .
   2896  174b							; 
   2897  174b
   2898  174b				   .L0351		;  _Ch0_Duration  =  _SD_Shoot_Enemy[_Ch0_Counter]  :	_Ch0_Counter  =  _Ch0_Counter  +  1
   2899  174b
   2900  174b		       a6 dc		      LDX	_Ch0_Counter
   2901  174d		       bd 48 d8 	      LDA	_SD_Shoot_Enemy,x
   2902  1750		       85 db		      STA	_Ch0_Duration
   2903  1752		       e6 dc		      INC	_Ch0_Counter
   2904  1754				   .
   2905  1754							; 
   2906  1754
   2907  1754				   .
   2908  1754							; 
   2909  1754
   2910  1754				   .L0352		;  goto __Skip_Ch_0
   2911  1754
   2912  1754		       4c a2 d7 	      jmp	.__Skip_Ch_0
   2913  1757
   2914  1757				   .
   2915  1757							; 
   2916  1757
   2917  1757				   .__Skip_Ch0_Sound_003
   2918  1757							; __Skip_Ch0_Sound_003
   2919  1757
   2920  1757				   .
   2921  1757							; 
   2922  1757
   2923  1757				   .
   2924  1757							; 
   2925  1757
   2926  1757				   .
   2927  1757							; 
   2928  1757
   2929  1757				   .
   2930  1757							; 
   2931  1757
   2932  1757				   .L0353		;  if _Ch0_Sound  <>  4 then goto __Skip_Ch0_Sound_004
   2933  1757
   2934  1757		       a5 da		      LDA	_Ch0_Sound
   2935  1759		       c9 04		      CMP	#4
   2936  175b		       f0 03		      BEQ	.skipL0353
   2937  175d				   .condpart73
   2938  175d		       4c 9c d7 	      jmp	.__Skip_Ch0_Sound_004
   2939  1760
   2940  1760				   .skipL0353
   2941  1760				   .
   2942  1760							; 
   2943  1760
   2944  1760				   .
   2945  1760							; 
   2946  1760
   2947  1760				   .L0354		;  temp4  =  _SD_Touch_Enemy[_Ch0_Counter]
   2948  1760
   2949  1760		       a6 dc		      LDX	_Ch0_Counter
   2950  1762		       bd 6c d8 	      LDA	_SD_Touch_Enemy,x
   2951  1765		       85 9f		      STA	temp4
   2952  1767				   .
   2953  1767							; 
   2954  1767
   2955  1767				   .
   2956  1767							; 
   2957  1767
   2958  1767				   .L0355		;  if temp4  =  255 then goto __Clear_Ch_0
   2959  1767
   2960  1767		       a5 9f		      LDA	temp4
   2961  1769		       c9 ff		      CMP	#255
   2962  176b		       d0 03		      BNE	.skipL0355
   2963  176d				   .condpart74
   2964  176d		       4c 9c d7 	      jmp	.__Clear_Ch_0
   2965  1770
   2966  1770				   .skipL0355
   2967  1770				   .
   2968  1770							; 
   2969  1770
   2970  1770				   .
   2971  1770							; 
   2972  1770
   2973  1770				   .L0356		;  _Ch0_Counter  =  _Ch0_Counter  +  1
   2974  1770
   2975  1770		       e6 dc		      INC	_Ch0_Counter
   2976  1772				   .L0357		;  temp5  =  _SD_Touch_Enemy[_Ch0_Counter]  :	_Ch0_Counter  =  _Ch0_Counter  +  1
   2977  1772
   2978  1772		       a6 dc		      LDX	_Ch0_Counter
   2979  1774		       bd 6c d8 	      LDA	_SD_Touch_Enemy,x
   2980  1777		       85 a0		      STA	temp5
   2981  1779		       e6 dc		      INC	_Ch0_Counter
   2982  177b				   .L0358		;  temp6  =  _SD_Touch_Enemy[_Ch0_Counter]  :	_Ch0_Counter  =  _Ch0_Counter  +  1
   2983  177b
   2984  177b		       a6 dc		      LDX	_Ch0_Counter
   2985  177d		       bd 6c d8 	      LDA	_SD_Touch_Enemy,x
   2986  1780		       85 a1		      STA	temp6
   2987  1782		       e6 dc		      INC	_Ch0_Counter
   2988  1784				   .
   2989  1784							; 
   2990  1784
   2991  1784				   .
   2992  1784							; 
   2993  1784
   2994  1784				   .L0359		;  AUDV0  =  temp4
   2995  1784
   2996  1784		       a5 9f		      LDA	temp4
   2997  1786		       85 19		      STA	AUDV0
   2998  1788				   .L0360		;  AUDC0  =  temp5
   2999  1788
   3000  1788		       a5 a0		      LDA	temp5
   3001  178a		       85 15		      STA	AUDC0
   3002  178c				   .L0361		;  AUDF0  =  temp6
   3003  178c
   3004  178c		       a5 a1		      LDA	temp6
   3005  178e		       85 17		      STA	AUDF0
   3006  1790				   .
   3007  1790							; 
   3008  1790
   3009  1790				   .
   3010  1790							; 
   3011  1790
   3012  1790				   .L0362		;  _Ch0_Duration  =  _SD_Touch_Enemy[_Ch0_Counter]  :	_Ch0_Counter  =  _Ch0_Counter  +  1
   3013  1790
   3014  1790		       a6 dc		      LDX	_Ch0_Counter
   3015  1792		       bd 6c d8 	      LDA	_SD_Touch_Enemy,x
   3016  1795		       85 db		      STA	_Ch0_Duration
   3017  1797		       e6 dc		      INC	_Ch0_Counter
   3018  1799				   .
   3019  1799							; 
   3020  1799
   3021  1799				   .
   3022  1799							; 
   3023  1799
   3024  1799				   .L0363		;  goto __Skip_Ch_0
   3025  1799
   3026  1799		       4c a2 d7 	      jmp	.__Skip_Ch_0
   3027  179c
   3028  179c				   .
   3029  179c							; 
   3030  179c
   3031  179c				   .__Skip_Ch0_Sound_004
   3032  179c							; __Skip_Ch0_Sound_004
   3033  179c
   3034  179c				   .
   3035  179c							; 
   3036  179c
   3037  179c				   .
   3038  179c							; 
   3039  179c
   3040  179c				   .__Clear_Ch_0
   3041  179c							; __Clear_Ch_0
   3042  179c
   3043  179c				   .L0364		;  _Ch0_Sound	=  0  :  AUDV0	=  0
   3044  179c
   3045  179c		       a9 00		      LDA	#0
   3046  179e		       85 da		      STA	_Ch0_Sound
   3047  17a0		       85 19		      STA	AUDV0
   3048  17a2				   .
   3049  17a2							; 
   3050  17a2
   3051  17a2				   .
   3052  17a2							; 
   3053  17a2
   3054  17a2				   .__Skip_Ch_0
   3055  17a2							; __Skip_Ch_0
   3056  17a2
   3057  17a2				   .
   3058  17a2							; 
   3059  17a2
   3060  17a2				   .
   3061  17a2							; 
   3062  17a2
   3063  17a2				   .
   3064  17a2							; 
   3065  17a2
   3066  17a2				   .
   3067  17a2							; 
   3068  17a2
   3069  17a2				   .L0365		;  if _Bit6_Flip_P0{6} then REFP1  =  8
   3070  17a2
   3071  17a2		       24 ec		      BIT	_Bit6_Flip_P0
   3072  17a4		       50 04		      BVC	.skipL0365
   3073  17a6				   .condpart75
   3074  17a6		       a9 08		      LDA	#8
   3075  17a8		       85 0c		      STA	REFP1
   3076  17aa				   .skipL0365
   3077  17aa				   .
   3078  17aa							; 
   3079  17aa
   3080  17aa				   .L0366		;  drawscreen
   3081  17aa
   3082  17aa		       85 ee		      sta	temp7
   3083  17ac		       a9 d7		      lda	#>(ret_point3-1)
   3084  17ae		       48		      pha
   3085  17af		       a9 c1		      lda	#<(ret_point3-1)
   3086  17b1		       48		      pha
   3087  17b2		       a9 f5		      lda	#>(drawscreen-1)
   3088  17b4		       48		      pha
   3089  17b5		       a9 82		      lda	#<(drawscreen-1)
   3090  17b7		       48		      pha
   3091  17b8		       a5 ee		      lda	temp7
   3092  17ba		       48		      pha
   3093  17bb		       8a		      txa
   3094  17bc		       48		      pha
   3095  17bd		       a2 02		      ldx	#2
   3096  17bf		       4c e8 ff 	      jmp	BS_jsr
   3097  17c2				   ret_point3
   3098  17c2				   .
   3099  17c2							; 
   3100  17c2
   3101  17c2				   .L0367		;  goto __Main_Loop
   3102  17c2
   3103  17c2		       4c c6 d1 	      jmp	.__Main_Loop
   3104  17c5
   3105  17c5				   .
   3106  17c5							; 
   3107  17c5
   3108  17c5				   .
   3109  17c5							; 
   3110  17c5
   3111  17c5				   .
   3112  17c5							; 
   3113  17c5
   3114  17c5				   .
   3115  17c5							; 
   3116  17c5
   3117  17c5				   .
   3118  17c5							; 
   3119  17c5
   3120  17c5				   .L0368		;  data _SD_Shot_Wall
   3121  17c5
   3122  17c5		       4c fd d7 	      JMP	.skipL0368
   3123  17c8				   _SD_Shot_Wall
   3124  17c8		       08 08 00 	      .byte.b	8,8,0
   3125  17cb
   3126  17cb		       01		      .byte.b	1
   3127  17cc
   3128  17cc		       08 08 01 	      .byte.b	8,8,1
   3129  17cf
   3130  17cf		       01		      .byte.b	1
   3131  17d0
   3132  17d0		       08 0e 01 	      .byte.b	8,14,1
   3133  17d3
   3134  17d3		       01		      .byte.b	1
   3135  17d4
   3136  17d4		       08 08 00 	      .byte.b	8,8,0
   3137  17d7
   3138  17d7		       01		      .byte.b	1
   3139  17d8
   3140  17d8		       08 08 02 	      .byte.b	8,8,2
   3141  17db
   3142  17db		       01		      .byte.b	1
   3143  17dc
   3144  17dc		       08 0e 02 	      .byte.b	8,14,2
   3145  17df
   3146  17df		       01		      .byte.b	1
   3147  17e0
   3148  17e0		       08 08 01 	      .byte.b	8,8,1
   3149  17e3
   3150  17e3		       01		      .byte.b	1
   3151  17e4
   3152  17e4		       07 08 03 	      .byte.b	7,8,3
   3153  17e7
   3154  17e7		       01		      .byte.b	1
   3155  17e8
   3156  17e8		       06 08 02 	      .byte.b	6,8,2
   3157  17eb
   3158  17eb		       01		      .byte.b	1
   3159  17ec
   3160  17ec		       05 08 04 	      .byte.b	5,8,4
   3161  17ef
   3162  17ef		       01		      .byte.b	1
   3163  17f0
   3164  17f0		       04 08 03 	      .byte.b	4,8,3
   3165  17f3
   3166  17f3		       01		      .byte.b	1
   3167  17f4
   3168  17f4		       03 08 05 	      .byte.b	3,8,5
   3169  17f7
   3170  17f7		       01		      .byte.b	1
   3171  17f8
   3172  17f8		       02 0e 04 	      .byte.b	2,14,4
   3173  17fb
   3174  17fb		       04		      .byte.b	4
   3175  17fc
   3176  17fc		       ff		      .byte.b	255
   3177  17fd
   3178  17fd				   .skipL0368
   3179  17fd				   .
   3180  17fd							; 
   3181  17fd
   3182  17fd				   .
   3183  17fd							; 
   3184  17fd
   3185  17fd				   .L0369		;  data _SD_Shoot_Miss
   3186  17fd
   3187  17fd		       4c 45 d8 	      JMP	.skipL0369
   3188  1800				   _SD_Shoot_Miss
   3189  1800		       08 0f 00 	      .byte.b	8,15,0
   3190  1803
   3191  1803		       01		      .byte.b	1
   3192  1804
   3193  1804		       0c 0f 01 	      .byte.b	12,15,1
   3194  1807
   3195  1807		       01		      .byte.b	1
   3196  1808
   3197  1808		       08 07 14 	      .byte.b	8,7,20
   3198  180b
   3199  180b		       01		      .byte.b	1
   3200  180c
   3201  180c		       0a 0f 03 	      .byte.b	10,15,3
   3202  180f
   3203  180f		       01		      .byte.b	1
   3204  1810
   3205  1810		       08 07 16 	      .byte.b	8,7,22
   3206  1813
   3207  1813		       01		      .byte.b	1
   3208  1814
   3209  1814		       0a 0f 05 	      .byte.b	10,15,5
   3210  1817
   3211  1817		       01		      .byte.b	1
   3212  1818
   3213  1818		       08 0f 06 	      .byte.b	8,15,6
   3214  181b
   3215  181b		       01		      .byte.b	1
   3216  181c
   3217  181c		       0a 07 18 	      .byte.b	10,7,24
   3218  181f
   3219  181f		       01		      .byte.b	1
   3220  1820
   3221  1820		       08 0f 08 	      .byte.b	8,15,8
   3222  1823
   3223  1823		       01		      .byte.b	1
   3224  1824
   3225  1824		       09 07 1b 	      .byte.b	9,7,27
   3226  1827
   3227  1827		       01		      .byte.b	1
   3228  1828
   3229  1828		       08 0f 0a 	      .byte.b	8,15,10
   3230  182b
   3231  182b		       01		      .byte.b	1
   3232  182c
   3233  182c		       07 0e 0b 	      .byte.b	7,14,11
   3234  182f
   3235  182f		       01		      .byte.b	1
   3236  1830
   3237  1830		       06 0f 0c 	      .byte.b	6,15,12
   3238  1833
   3239  1833		       01		      .byte.b	1
   3240  1834
   3241  1834		       05 06 0d 	      .byte.b	5,6,13
   3242  1837
   3243  1837		       01		      .byte.b	1
   3244  1838
   3245  1838		       04 0f 0e 	      .byte.b	4,15,14
   3246  183b
   3247  183b		       01		      .byte.b	1
   3248  183c
   3249  183c		       03 06 1b 	      .byte.b	3,6,27
   3250  183f
   3251  183f		       01		      .byte.b	1
   3252  1840
   3253  1840		       02 06 1e 	      .byte.b	2,6,30
   3254  1843
   3255  1843		       08		      .byte.b	8
   3256  1844
   3257  1844		       ff		      .byte.b	255
   3258  1845
   3259  1845				   .skipL0369
   3260  1845				   .
   3261  1845							; 
   3262  1845
   3263  1845				   .
   3264  1845							; 
   3265  1845
   3266  1845				   .L0370		;  data _SD_Shoot_Enemy
   3267  1845
   3268  1845		       4c 69 d8 	      JMP	.skipL0370
   3269  1848				   _SD_Shoot_Enemy
   3270  1848		       0c 04 17 	      .byte.b	12,4,23
   3271  184b
   3272  184b		       04		      .byte.b	4
   3273  184c
   3274  184c		       0a 04 1d 	      .byte.b	10,4,29
   3275  184f
   3276  184f		       04		      .byte.b	4
   3277  1850
   3278  1850		       08 04 17 	      .byte.b	8,4,23
   3279  1853
   3280  1853		       04		      .byte.b	4
   3281  1854
   3282  1854		       06 04 1d 	      .byte.b	6,4,29
   3283  1857
   3284  1857		       04		      .byte.b	4
   3285  1858
   3286  1858		       04 04 17 	      .byte.b	4,4,23
   3287  185b
   3288  185b		       04		      .byte.b	4
   3289  185c
   3290  185c		       03 04 1d 	      .byte.b	3,4,29
   3291  185f
   3292  185f		       04		      .byte.b	4
   3293  1860
   3294  1860		       02 04 17 	      .byte.b	2,4,23
   3295  1863
   3296  1863		       01		      .byte.b	1
   3297  1864
   3298  1864		       01 04 1d 	      .byte.b	1,4,29
   3299  1867
   3300  1867		       01		      .byte.b	1
   3301  1868
   3302  1868		       ff		      .byte.b	255
   3303  1869
   3304  1869				   .skipL0370
   3305  1869				   .
   3306  1869							; 
   3307  1869
   3308  1869				   .
   3309  1869							; 
   3310  1869
   3311  1869				   .L0371		;  data _SD_Touch_Enemy
   3312  1869
   3313  1869		       4c 89 d8 	      JMP	.skipL0371
   3314  186c				   _SD_Touch_Enemy
   3315  186c		       02 07 0b 	      .byte.b	2,7,11
   3316  186f
   3317  186f		       02		      .byte.b	2
   3318  1870
   3319  1870		       0a 07 0c 	      .byte.b	10,7,12
   3320  1873
   3321  1873		       02		      .byte.b	2
   3322  1874
   3323  1874		       08 07 0d 	      .byte.b	8,7,13
   3324  1877
   3325  1877		       02		      .byte.b	2
   3326  1878
   3327  1878		       08 07 0e 	      .byte.b	8,7,14
   3328  187b
   3329  187b		       02		      .byte.b	2
   3330  187c
   3331  187c		       08 07 15 	      .byte.b	8,7,21
   3332  187f
   3333  187f		       08		      .byte.b	8
   3334  1880
   3335  1880		       04 07 16 	      .byte.b	4,7,22
   3336  1883
   3337  1883		       02		      .byte.b	2
   3338  1884
   3339  1884		       02 07 17 	      .byte.b	2,7,23
   3340  1887
   3341  1887		       01		      .byte.b	1
   3342  1888
   3343  1888		       ff		      .byte.b	255
   3344  1889
   3345  1889				   .skipL0371
   3346  1889				   .
   3347  1889							; 
   3348  1889
   3349  1889				   .
   3350  1889							; 
   3351  1889
   3352  1889				   .
   3353  1889							; 
   3354  1889
   3355  1889				   .
   3356  1889							; 
   3357  1889
   3358  1889				   .
   3359  1889							; 
   3360  1889
   3361  1889				   .
   3362  1889							; 
   3363  1889
   3364  1889				   .
   3365  1889							; 
   3366  1889
   3367  1889				   .
   3368  1889							; 
   3369  1889
   3370  1889				   .L0372		;  rem Add the room state of the room we are just leaving to the request to store it at the backend
   3371  1889
   3372  1889				   ._send_room_state
   3373  1889							; _send_room_state
   3374  1889
   3375  1889				   .L0373		;  request_pending  =	1
   3376  1889
   3377  1889		       a9 01		      LDA	#1
   3378  188b		       85 d4		      STA	request_pending
   3379  188d				   .L0374		;  WriteToBuffer  =  r106
   3380  188d
   3381  188d		       ad ea f0 	      LDA	r106
   3382  1890		       8d f0 1f 	      STA	WriteToBuffer
   3383  1893				   .L0375		;  WriteToBuffer  =  r107
   3384  1893
   3385  1893		       ad eb f0 	      LDA	r107
   3386  1896		       8d f0 1f 	      STA	WriteToBuffer
   3387  1899				   .L0376		;  WriteToBuffer  =  r108
   3388  1899
   3389  1899		       ad ec f0 	      LDA	r108
   3390  189c		       8d f0 1f 	      STA	WriteToBuffer
   3391  189f				   .L0377		;  WriteToBuffer  =  r109
   3392  189f
   3393  189f		       ad ed f0 	      LDA	r109
   3394  18a2		       8d f0 1f 	      STA	WriteToBuffer
   3395  18a5				   .L0378		;  WriteToBuffer  =  r110
   3396  18a5
   3397  18a5		       ad ee f0 	      LDA	r110
   3398  18a8		       8d f0 1f 	      STA	WriteToBuffer
   3399  18ab				   .L0379		;  WriteToBuffer  =  r111
   3400  18ab
   3401  18ab		       ad ef f0 	      LDA	r111
   3402  18ae		       8d f0 1f 	      STA	WriteToBuffer
   3403  18b1				   .L0380		;  return
   3404  18b1
   3405  18b1		       ba		      tsx
   3406  18b2		       b5 02		      lda	2,x	; check return address
   3407  18b4		       49 d8		      eor	#(>*)	; vs. current PCH
   3408  18b6		       29 e0		      and	#$E0	;  mask off all but top 3 bits
   3409  18b8		       f0 03		      beq	*+5	; if equal, do normal return
   3410  18ba		       4c da ff 	      JMP	BS_return
   3411  18bd		       60		      RTS
   3412  18be				   .
   3413  18be							; 
   3414  18be
   3415  18be				   .
   3416  18be							; 
   3417  18be
   3418  18be				   .L0381		;  rem loading room (12 pf bytes + ) from backend
   3419  18be
   3420  18be				   .L0382		;  rem and write to playfield RAM 
   3421  18be
   3422  18be				   .change_room
   3423  18be							; change_room
   3424  18be
   3425  18be				   .L0383		;  delay_counter  =  2  :  player0y  =  200
   3426  18be
   3427  18be		       a9 02		      LDA	#2
   3428  18c0		       85 d5		      STA	delay_counter
   3429  18c2		       a9 c8		      LDA	#200
   3430  18c4		       85 85		      STA	player0y
   3431  18c6				   .L0384		;  _BitOp_misc  =  _BitOp_misc  &  %11111100
   3432  18c6
   3433  18c6		       a5 ec		      LDA	_BitOp_misc
   3434  18c8		       29 fc		      AND	#%11111100
   3435  18ca		       85 ec		      STA	_BitOp_misc
   3436  18cc				   .L0385		;  asm
   3437  18cc
   3438  18cc		       a9 00		      LDA	#0
   3439  18ce
   3440  18ce		       85 d4		      STA	request_pending
   3441  18d0
   3442  18d0		       85 89		      STA	bally
   3443  18d2
   3444  18d2		       85 dd		      STA	extra_wall_move_x
   3445  18d4
   3446  18d4		       85 de		      STA	roommate_move_x
   3447  18d6
   3448  18d6		       aa		      TAX
   3449  18d7
   3450  18d7				   .tile_loop
   3451  18d7
   3452  18d7		       ad f2 1f 	      LDA	ReceiveBuffer	; 4
   3453  18da
   3454  18da		       9d 6a f0 	      STA	w_room_definition_start,x	; 5   @9
   3455  18dd
   3456  18dd		       e8		      INX		; 2   @11
   3457  18de
   3458  18de		       ad f3 1f 	      LDA	ReceiveBufferSize	; 4   @15
   3459  18e1
   3460  18e1		       d0 f4		      BNE	.tile_loop	; 2/3 @18
   3461  18e3
   3462  18e3				   .L0386		;  roommate_type  =  r_P0_type_and_range  &  3
   3463  18e3
   3464  18e3		       ad ea f0 	      LDA	r_P0_type_and_range
   3465  18e6		       29 03		      AND	#3
   3466  18e8		       85 df		      STA	roommate_type
   3467  18ea				   .L0387		;  goto _skip_game_action
   3468  18ea
   3469  18ea		       4c 78 d6 	      jmp	._skip_game_action
   3470  18ed
   3471  18ed				   .
   3472  18ed							; 
   3473  18ed
   3474  18ed				   .
   3475  18ed							; 
   3476  18ed
   3477  18ed				   .
   3478  18ed							; 
   3479  18ed
   3480  18ed				   .L0388		;  rem define PlusROM backend URL here
   3481  18ed
   3482  18ed				   .L0389		;  rem don't let your program flow run into this code
   3483  18ed
   3484  18ed				   .L0390		;  asm
   3485  18ed
      0  18ed					      SET_PLUSROM_API	"a.php", "ca.firmaplus.de"
      1  18ed				   PlusROM_API
      2  18ed		       61 2e 70 68*	      .byte.b	"a.php", 0, "ca.firmaplus.de", 0
   3487  1903
   3488  1903				   .
   3489  1903							; 
   3490  1903
   3491  1903				   .L0391		;  bank 2
   3492  1903
   3493  1903					      if	ECHO1
      1742 bytes of ROM space left in bank 1
   3494  1903					      echo	"    ",[(start_bank1 - *)]d , "bytes of ROM space left in bank 1")
   3495  1903					      endif
   3496  1903		       00 01	   ECHO1      =	1
   3497  1fd1					      ORG	$1FF4-bscode_length
   3498  1fd1					      RORG	$DFF4-bscode_length
   3499  1fd1		       a2 ff	   start_bank1 ldx	#$ff
   3500  1fd3				  -	      ifconst	FASTFETCH	; using DPC+
   3501  1fd3				  -	      stx	FASTFETCH
   3502  1fd3					      endif
   3503  1fd3		       9a		      txs
   3504  1fd4				  -	      if	bankswitch == 64
   3505  1fd4				  -	      lda	#(((>(start-1)) & $0F) | $F0)
   3506  1fd4					      else
   3507  1fd4		       a9 f3		      lda	#>(start-1)
   3508  1fd6					      endif
   3509  1fd6		       48		      pha
   3510  1fd7		       a9 51		      lda	#<(start-1)
   3511  1fd9		       48		      pha
   3512  1fda		       48		      pha
   3513  1fdb		       8a		      txa
   3514  1fdc		       48		      pha
   3515  1fdd		       ba		      tsx
   3516  1fde					      if	bankswitch != 64
   3517  1fde		       b5 04		      lda	4,x	; get high byte of return address
   3518  1fe0		       2a		      rol
   3519  1fe1		       2a		      rol
   3520  1fe2		       2a		      rol
   3521  1fe3		       2a		      rol
   3522  1fe4		       29 01		      and	#bs_mask	;1 3 or 7 for F8/F6/F4
   3523  1fe6		       aa		      tax
   3524  1fe7		       e8		      inx
   3525  1fe8				  -	      else
   3526  1fe8				  -	      lda	4,x	; get high byte of return address
   3527  1fe8				  -	      tay
   3528  1fe8				  -	      ora	#$10	; change our bank nibble into a valid rom mirror
   3529  1fe8				  -	      sta	4,x
   3530  1fe8				  -	      tya
   3531  1fe8				  -	      lsr
   3532  1fe8				  -	      lsr
   3533  1fe8				  -	      lsr
   3534  1fe8				  -	      lsr
   3535  1fe8				  -	      tax
   3536  1fe8				  -	      inx
   3537  1fe8					      endif
   3538  1fe8		       bd f7 1f 	      lda	bankswitch_hotspot-1,x
   3539  1feb		       68		      pla
   3540  1fec		       aa		      tax
   3541  1fed		       68		      pla
   3542  1fee		       60		      rts
   3543  1fef				  -	      if	((* & $1FFF) > ((bankswitch_hotspot & $1FFF) - 1))
   3544  1fef				  -	      echo	"WARNING: size parameter in banksw.asm too small - the program probably will not work."
   3545  1fef				  -	      echo	"Change to",[(*-begin_bscode+1)&$FF]d,"and try again."
   3546  1fef					      endif
   3547  1ffc					      ORG	$1FFC
   3548  1ffc					      RORG	$DFFC
   3549  1ffc		       d1 df		      .word.w	(start_bank1 & $ffff)
   3550  1ffe		       d1 df		      .word.w	(start_bank1 & $ffff)
   3551  2000					      ORG	$2000
   3552  2000					      RORG	$F000
   3553  2000					      repeat	256
   3554  2000		       ff		      .byte.b	$ff
   3553  2000					      repend
   3554  2001		       ff		      .byte.b	$ff
   3553  2001					      repend
   3554  2002		       ff		      .byte.b	$ff
   3553  2002					      repend
   3554  2003		       ff		      .byte.b	$ff
   3553  2003					      repend
   3554  2004		       ff		      .byte.b	$ff
   3553  2004					      repend
   3554  2005		       ff		      .byte.b	$ff
   3553  2005					      repend
   3554  2006		       ff		      .byte.b	$ff
   3553  2006					      repend
   3554  2007		       ff		      .byte.b	$ff
   3553  2007					      repend
   3554  2008		       ff		      .byte.b	$ff
   3553  2008					      repend
   3554  2009		       ff		      .byte.b	$ff
   3553  2009					      repend
   3554  200a		       ff		      .byte.b	$ff
   3553  200a					      repend
   3554  200b		       ff		      .byte.b	$ff
   3553  200b					      repend
   3554  200c		       ff		      .byte.b	$ff
   3553  200c					      repend
   3554  200d		       ff		      .byte.b	$ff
   3553  200d					      repend
   3554  200e		       ff		      .byte.b	$ff
   3553  200e					      repend
   3554  200f		       ff		      .byte.b	$ff
   3553  200f					      repend
   3554  2010		       ff		      .byte.b	$ff
   3553  2010					      repend
   3554  2011		       ff		      .byte.b	$ff
   3553  2011					      repend
   3554  2012		       ff		      .byte.b	$ff
   3553  2012					      repend
   3554  2013		       ff		      .byte.b	$ff
   3553  2013					      repend
   3554  2014		       ff		      .byte.b	$ff
   3553  2014					      repend
   3554  2015		       ff		      .byte.b	$ff
   3553  2015					      repend
   3554  2016		       ff		      .byte.b	$ff
   3553  2016					      repend
   3554  2017		       ff		      .byte.b	$ff
   3553  2017					      repend
   3554  2018		       ff		      .byte.b	$ff
   3553  2018					      repend
   3554  2019		       ff		      .byte.b	$ff
   3553  2019					      repend
   3554  201a		       ff		      .byte.b	$ff
   3553  201a					      repend
   3554  201b		       ff		      .byte.b	$ff
   3553  201b					      repend
   3554  201c		       ff		      .byte.b	$ff
   3553  201c					      repend
   3554  201d		       ff		      .byte.b	$ff
   3553  201d					      repend
   3554  201e		       ff		      .byte.b	$ff
   3553  201e					      repend
   3554  201f		       ff		      .byte.b	$ff
   3553  201f					      repend
   3554  2020		       ff		      .byte.b	$ff
   3553  2020					      repend
   3554  2021		       ff		      .byte.b	$ff
   3553  2021					      repend
   3554  2022		       ff		      .byte.b	$ff
   3553  2022					      repend
   3554  2023		       ff		      .byte.b	$ff
   3553  2023					      repend
   3554  2024		       ff		      .byte.b	$ff
   3553  2024					      repend
   3554  2025		       ff		      .byte.b	$ff
   3553  2025					      repend
   3554  2026		       ff		      .byte.b	$ff
   3553  2026					      repend
   3554  2027		       ff		      .byte.b	$ff
   3553  2027					      repend
   3554  2028		       ff		      .byte.b	$ff
   3553  2028					      repend
   3554  2029		       ff		      .byte.b	$ff
   3553  2029					      repend
   3554  202a		       ff		      .byte.b	$ff
   3553  202a					      repend
   3554  202b		       ff		      .byte.b	$ff
   3553  202b					      repend
   3554  202c		       ff		      .byte.b	$ff
   3553  202c					      repend
   3554  202d		       ff		      .byte.b	$ff
   3553  202d					      repend
   3554  202e		       ff		      .byte.b	$ff
   3553  202e					      repend
   3554  202f		       ff		      .byte.b	$ff
   3553  202f					      repend
   3554  2030		       ff		      .byte.b	$ff
   3553  2030					      repend
   3554  2031		       ff		      .byte.b	$ff
   3553  2031					      repend
   3554  2032		       ff		      .byte.b	$ff
   3553  2032					      repend
   3554  2033		       ff		      .byte.b	$ff
   3553  2033					      repend
   3554  2034		       ff		      .byte.b	$ff
   3553  2034					      repend
   3554  2035		       ff		      .byte.b	$ff
   3553  2035					      repend
   3554  2036		       ff		      .byte.b	$ff
   3553  2036					      repend
   3554  2037		       ff		      .byte.b	$ff
   3553  2037					      repend
   3554  2038		       ff		      .byte.b	$ff
   3553  2038					      repend
   3554  2039		       ff		      .byte.b	$ff
   3553  2039					      repend
   3554  203a		       ff		      .byte.b	$ff
   3553  203a					      repend
   3554  203b		       ff		      .byte.b	$ff
   3553  203b					      repend
   3554  203c		       ff		      .byte.b	$ff
   3553  203c					      repend
   3554  203d		       ff		      .byte.b	$ff
   3553  203d					      repend
   3554  203e		       ff		      .byte.b	$ff
   3553  203e					      repend
   3554  203f		       ff		      .byte.b	$ff
   3553  203f					      repend
   3554  2040		       ff		      .byte.b	$ff
   3553  2040					      repend
   3554  2041		       ff		      .byte.b	$ff
   3553  2041					      repend
   3554  2042		       ff		      .byte.b	$ff
   3553  2042					      repend
   3554  2043		       ff		      .byte.b	$ff
   3553  2043					      repend
   3554  2044		       ff		      .byte.b	$ff
   3553  2044					      repend
   3554  2045		       ff		      .byte.b	$ff
   3553  2045					      repend
   3554  2046		       ff		      .byte.b	$ff
   3553  2046					      repend
   3554  2047		       ff		      .byte.b	$ff
   3553  2047					      repend
   3554  2048		       ff		      .byte.b	$ff
   3553  2048					      repend
   3554  2049		       ff		      .byte.b	$ff
   3553  2049					      repend
   3554  204a		       ff		      .byte.b	$ff
   3553  204a					      repend
   3554  204b		       ff		      .byte.b	$ff
   3553  204b					      repend
   3554  204c		       ff		      .byte.b	$ff
   3553  204c					      repend
   3554  204d		       ff		      .byte.b	$ff
   3553  204d					      repend
   3554  204e		       ff		      .byte.b	$ff
   3553  204e					      repend
   3554  204f		       ff		      .byte.b	$ff
   3553  204f					      repend
   3554  2050		       ff		      .byte.b	$ff
   3553  2050					      repend
   3554  2051		       ff		      .byte.b	$ff
   3553  2051					      repend
   3554  2052		       ff		      .byte.b	$ff
   3553  2052					      repend
   3554  2053		       ff		      .byte.b	$ff
   3553  2053					      repend
   3554  2054		       ff		      .byte.b	$ff
   3553  2054					      repend
   3554  2055		       ff		      .byte.b	$ff
   3553  2055					      repend
   3554  2056		       ff		      .byte.b	$ff
   3553  2056					      repend
   3554  2057		       ff		      .byte.b	$ff
   3553  2057					      repend
   3554  2058		       ff		      .byte.b	$ff
   3553  2058					      repend
   3554  2059		       ff		      .byte.b	$ff
   3553  2059					      repend
   3554  205a		       ff		      .byte.b	$ff
   3553  205a					      repend
   3554  205b		       ff		      .byte.b	$ff
   3553  205b					      repend
   3554  205c		       ff		      .byte.b	$ff
   3553  205c					      repend
   3554  205d		       ff		      .byte.b	$ff
   3553  205d					      repend
   3554  205e		       ff		      .byte.b	$ff
   3553  205e					      repend
   3554  205f		       ff		      .byte.b	$ff
   3553  205f					      repend
   3554  2060		       ff		      .byte.b	$ff
   3553  2060					      repend
   3554  2061		       ff		      .byte.b	$ff
   3553  2061					      repend
   3554  2062		       ff		      .byte.b	$ff
   3553  2062					      repend
   3554  2063		       ff		      .byte.b	$ff
   3553  2063					      repend
   3554  2064		       ff		      .byte.b	$ff
   3553  2064					      repend
   3554  2065		       ff		      .byte.b	$ff
   3553  2065					      repend
   3554  2066		       ff		      .byte.b	$ff
   3553  2066					      repend
   3554  2067		       ff		      .byte.b	$ff
   3553  2067					      repend
   3554  2068		       ff		      .byte.b	$ff
   3553  2068					      repend
   3554  2069		       ff		      .byte.b	$ff
   3553  2069					      repend
   3554  206a		       ff		      .byte.b	$ff
   3553  206a					      repend
   3554  206b		       ff		      .byte.b	$ff
   3553  206b					      repend
   3554  206c		       ff		      .byte.b	$ff
   3553  206c					      repend
   3554  206d		       ff		      .byte.b	$ff
   3553  206d					      repend
   3554  206e		       ff		      .byte.b	$ff
   3553  206e					      repend
   3554  206f		       ff		      .byte.b	$ff
   3553  206f					      repend
   3554  2070		       ff		      .byte.b	$ff
   3553  2070					      repend
   3554  2071		       ff		      .byte.b	$ff
   3553  2071					      repend
   3554  2072		       ff		      .byte.b	$ff
   3553  2072					      repend
   3554  2073		       ff		      .byte.b	$ff
   3553  2073					      repend
   3554  2074		       ff		      .byte.b	$ff
   3553  2074					      repend
   3554  2075		       ff		      .byte.b	$ff
   3553  2075					      repend
   3554  2076		       ff		      .byte.b	$ff
   3553  2076					      repend
   3554  2077		       ff		      .byte.b	$ff
   3553  2077					      repend
   3554  2078		       ff		      .byte.b	$ff
   3553  2078					      repend
   3554  2079		       ff		      .byte.b	$ff
   3553  2079					      repend
   3554  207a		       ff		      .byte.b	$ff
   3553  207a					      repend
   3554  207b		       ff		      .byte.b	$ff
   3553  207b					      repend
   3554  207c		       ff		      .byte.b	$ff
   3553  207c					      repend
   3554  207d		       ff		      .byte.b	$ff
   3553  207d					      repend
   3554  207e		       ff		      .byte.b	$ff
   3553  207e					      repend
   3554  207f		       ff		      .byte.b	$ff
   3553  207f					      repend
   3554  2080		       ff		      .byte.b	$ff
   3553  2080					      repend
   3554  2081		       ff		      .byte.b	$ff
   3553  2081					      repend
   3554  2082		       ff		      .byte.b	$ff
   3553  2082					      repend
   3554  2083		       ff		      .byte.b	$ff
   3553  2083					      repend
   3554  2084		       ff		      .byte.b	$ff
   3553  2084					      repend
   3554  2085		       ff		      .byte.b	$ff
   3553  2085					      repend
   3554  2086		       ff		      .byte.b	$ff
   3553  2086					      repend
   3554  2087		       ff		      .byte.b	$ff
   3553  2087					      repend
   3554  2088		       ff		      .byte.b	$ff
   3553  2088					      repend
   3554  2089		       ff		      .byte.b	$ff
   3553  2089					      repend
   3554  208a		       ff		      .byte.b	$ff
   3553  208a					      repend
   3554  208b		       ff		      .byte.b	$ff
   3553  208b					      repend
   3554  208c		       ff		      .byte.b	$ff
   3553  208c					      repend
   3554  208d		       ff		      .byte.b	$ff
   3553  208d					      repend
   3554  208e		       ff		      .byte.b	$ff
   3553  208e					      repend
   3554  208f		       ff		      .byte.b	$ff
   3553  208f					      repend
   3554  2090		       ff		      .byte.b	$ff
   3553  2090					      repend
   3554  2091		       ff		      .byte.b	$ff
   3553  2091					      repend
   3554  2092		       ff		      .byte.b	$ff
   3553  2092					      repend
   3554  2093		       ff		      .byte.b	$ff
   3553  2093					      repend
   3554  2094		       ff		      .byte.b	$ff
   3553  2094					      repend
   3554  2095		       ff		      .byte.b	$ff
   3553  2095					      repend
   3554  2096		       ff		      .byte.b	$ff
   3553  2096					      repend
   3554  2097		       ff		      .byte.b	$ff
   3553  2097					      repend
   3554  2098		       ff		      .byte.b	$ff
   3553  2098					      repend
   3554  2099		       ff		      .byte.b	$ff
   3553  2099					      repend
   3554  209a		       ff		      .byte.b	$ff
   3553  209a					      repend
   3554  209b		       ff		      .byte.b	$ff
   3553  209b					      repend
   3554  209c		       ff		      .byte.b	$ff
   3553  209c					      repend
   3554  209d		       ff		      .byte.b	$ff
   3553  209d					      repend
   3554  209e		       ff		      .byte.b	$ff
   3553  209e					      repend
   3554  209f		       ff		      .byte.b	$ff
   3553  209f					      repend
   3554  20a0		       ff		      .byte.b	$ff
   3553  20a0					      repend
   3554  20a1		       ff		      .byte.b	$ff
   3553  20a1					      repend
   3554  20a2		       ff		      .byte.b	$ff
   3553  20a2					      repend
   3554  20a3		       ff		      .byte.b	$ff
   3553  20a3					      repend
   3554  20a4		       ff		      .byte.b	$ff
   3553  20a4					      repend
   3554  20a5		       ff		      .byte.b	$ff
   3553  20a5					      repend
   3554  20a6		       ff		      .byte.b	$ff
   3553  20a6					      repend
   3554  20a7		       ff		      .byte.b	$ff
   3553  20a7					      repend
   3554  20a8		       ff		      .byte.b	$ff
   3553  20a8					      repend
   3554  20a9		       ff		      .byte.b	$ff
   3553  20a9					      repend
   3554  20aa		       ff		      .byte.b	$ff
   3553  20aa					      repend
   3554  20ab		       ff		      .byte.b	$ff
   3553  20ab					      repend
   3554  20ac		       ff		      .byte.b	$ff
   3553  20ac					      repend
   3554  20ad		       ff		      .byte.b	$ff
   3553  20ad					      repend
   3554  20ae		       ff		      .byte.b	$ff
   3553  20ae					      repend
   3554  20af		       ff		      .byte.b	$ff
   3553  20af					      repend
   3554  20b0		       ff		      .byte.b	$ff
   3553  20b0					      repend
   3554  20b1		       ff		      .byte.b	$ff
   3553  20b1					      repend
   3554  20b2		       ff		      .byte.b	$ff
   3553  20b2					      repend
   3554  20b3		       ff		      .byte.b	$ff
   3553  20b3					      repend
   3554  20b4		       ff		      .byte.b	$ff
   3553  20b4					      repend
   3554  20b5		       ff		      .byte.b	$ff
   3553  20b5					      repend
   3554  20b6		       ff		      .byte.b	$ff
   3553  20b6					      repend
   3554  20b7		       ff		      .byte.b	$ff
   3553  20b7					      repend
   3554  20b8		       ff		      .byte.b	$ff
   3553  20b8					      repend
   3554  20b9		       ff		      .byte.b	$ff
   3553  20b9					      repend
   3554  20ba		       ff		      .byte.b	$ff
   3553  20ba					      repend
   3554  20bb		       ff		      .byte.b	$ff
   3553  20bb					      repend
   3554  20bc		       ff		      .byte.b	$ff
   3553  20bc					      repend
   3554  20bd		       ff		      .byte.b	$ff
   3553  20bd					      repend
   3554  20be		       ff		      .byte.b	$ff
   3553  20be					      repend
   3554  20bf		       ff		      .byte.b	$ff
   3553  20bf					      repend
   3554  20c0		       ff		      .byte.b	$ff
   3553  20c0					      repend
   3554  20c1		       ff		      .byte.b	$ff
   3553  20c1					      repend
   3554  20c2		       ff		      .byte.b	$ff
   3553  20c2					      repend
   3554  20c3		       ff		      .byte.b	$ff
   3553  20c3					      repend
   3554  20c4		       ff		      .byte.b	$ff
   3553  20c4					      repend
   3554  20c5		       ff		      .byte.b	$ff
   3553  20c5					      repend
   3554  20c6		       ff		      .byte.b	$ff
   3553  20c6					      repend
   3554  20c7		       ff		      .byte.b	$ff
   3553  20c7					      repend
   3554  20c8		       ff		      .byte.b	$ff
   3553  20c8					      repend
   3554  20c9		       ff		      .byte.b	$ff
   3553  20c9					      repend
   3554  20ca		       ff		      .byte.b	$ff
   3553  20ca					      repend
   3554  20cb		       ff		      .byte.b	$ff
   3553  20cb					      repend
   3554  20cc		       ff		      .byte.b	$ff
   3553  20cc					      repend
   3554  20cd		       ff		      .byte.b	$ff
   3553  20cd					      repend
   3554  20ce		       ff		      .byte.b	$ff
   3553  20ce					      repend
   3554  20cf		       ff		      .byte.b	$ff
   3553  20cf					      repend
   3554  20d0		       ff		      .byte.b	$ff
   3553  20d0					      repend
   3554  20d1		       ff		      .byte.b	$ff
   3553  20d1					      repend
   3554  20d2		       ff		      .byte.b	$ff
   3553  20d2					      repend
   3554  20d3		       ff		      .byte.b	$ff
   3553  20d3					      repend
   3554  20d4		       ff		      .byte.b	$ff
   3553  20d4					      repend
   3554  20d5		       ff		      .byte.b	$ff
   3553  20d5					      repend
   3554  20d6		       ff		      .byte.b	$ff
   3553  20d6					      repend
   3554  20d7		       ff		      .byte.b	$ff
   3553  20d7					      repend
   3554  20d8		       ff		      .byte.b	$ff
   3553  20d8					      repend
   3554  20d9		       ff		      .byte.b	$ff
   3553  20d9					      repend
   3554  20da		       ff		      .byte.b	$ff
   3553  20da					      repend
   3554  20db		       ff		      .byte.b	$ff
   3553  20db					      repend
   3554  20dc		       ff		      .byte.b	$ff
   3553  20dc					      repend
   3554  20dd		       ff		      .byte.b	$ff
   3553  20dd					      repend
   3554  20de		       ff		      .byte.b	$ff
   3553  20de					      repend
   3554  20df		       ff		      .byte.b	$ff
   3553  20df					      repend
   3554  20e0		       ff		      .byte.b	$ff
   3553  20e0					      repend
   3554  20e1		       ff		      .byte.b	$ff
   3553  20e1					      repend
   3554  20e2		       ff		      .byte.b	$ff
   3553  20e2					      repend
   3554  20e3		       ff		      .byte.b	$ff
   3553  20e3					      repend
   3554  20e4		       ff		      .byte.b	$ff
   3553  20e4					      repend
   3554  20e5		       ff		      .byte.b	$ff
   3553  20e5					      repend
   3554  20e6		       ff		      .byte.b	$ff
   3553  20e6					      repend
   3554  20e7		       ff		      .byte.b	$ff
   3553  20e7					      repend
   3554  20e8		       ff		      .byte.b	$ff
   3553  20e8					      repend
   3554  20e9		       ff		      .byte.b	$ff
   3553  20e9					      repend
   3554  20ea		       ff		      .byte.b	$ff
   3553  20ea					      repend
   3554  20eb		       ff		      .byte.b	$ff
   3553  20eb					      repend
   3554  20ec		       ff		      .byte.b	$ff
   3553  20ec					      repend
   3554  20ed		       ff		      .byte.b	$ff
   3553  20ed					      repend
   3554  20ee		       ff		      .byte.b	$ff
   3553  20ee					      repend
   3554  20ef		       ff		      .byte.b	$ff
   3553  20ef					      repend
   3554  20f0		       ff		      .byte.b	$ff
   3553  20f0					      repend
   3554  20f1		       ff		      .byte.b	$ff
   3553  20f1					      repend
   3554  20f2		       ff		      .byte.b	$ff
   3553  20f2					      repend
   3554  20f3		       ff		      .byte.b	$ff
   3553  20f3					      repend
   3554  20f4		       ff		      .byte.b	$ff
   3553  20f4					      repend
   3554  20f5		       ff		      .byte.b	$ff
   3553  20f5					      repend
   3554  20f6		       ff		      .byte.b	$ff
   3553  20f6					      repend
   3554  20f7		       ff		      .byte.b	$ff
   3553  20f7					      repend
   3554  20f8		       ff		      .byte.b	$ff
   3553  20f8					      repend
   3554  20f9		       ff		      .byte.b	$ff
   3553  20f9					      repend
   3554  20fa		       ff		      .byte.b	$ff
   3553  20fa					      repend
   3554  20fb		       ff		      .byte.b	$ff
   3553  20fb					      repend
   3554  20fc		       ff		      .byte.b	$ff
   3553  20fc					      repend
   3554  20fd		       ff		      .byte.b	$ff
   3553  20fd					      repend
   3554  20fe		       ff		      .byte.b	$ff
   3553  20fe					      repend
   3554  20ff		       ff		      .byte.b	$ff
   3555  2100					      repend
   3556  2100							; Provided under the CC0 license. See the included LICENSE.txt for details.
   3557  2100
   3558  2100							; This is a 2-line kernel!
   3559  2100					      ifnconst	vertical_reflect
   3560  2100				   kernel
   3561  2100					      endif
   3562  2100		       85 02		      sta	WSYNC
   3563  2102		       a9 ff		      lda	#255
   3564  2104		       8d 96 02 	      sta	TIM64T
   3565  2107
   3566  2107		       a9 01		      lda	#1
   3567  2109		       85 27		      sta	VDELBL
   3568  210b		       85 25		      sta	VDELP0
   3569  210d		       a6 92		      ldx	ballheight
   3570  210f		       e8		      inx
   3571  2110		       e8		      inx
   3572  2111		       86 9f		      stx	temp4
   3573  2113		       a5 86		      lda	player1y
   3574  2115		       85 9e		      sta	temp3
   3575  2117
   3576  2117				  -	      ifconst	shakescreen
   3577  2117				  -	      jsr	doshakescreen
   3578  2117					      else
   3579  2117		       a6 90		      ldx	missile0height
   3580  2119		       e8		      inx
   3581  211a					      endif
   3582  211a
   3583  211a		       e8		      inx
   3584  211b		       86 f6		      stx	stack1
   3585  211d
   3586  211d		       a5 89		      lda	bally
   3587  211f		       85 f7		      sta	stack2
   3588  2121
   3589  2121		       a5 85		      lda	player0y
   3590  2123		       a2 00		      ldx	#0
   3591  2125		       85 02		      sta	WSYNC
   3592  2127		       86 1b		      stx	GRP0
   3593  2129		       86 1c		      stx	GRP1
   3594  212b		       86 0e		      stx	PF1L
   3595  212d		       86 0f		      stx	PF2
   3596  212f		       86 2c		      stx	CXCLR
   3597  2131				  -	      ifconst	readpaddle
   3598  2131				  -	      stx	paddle
   3599  2131					      else
      0  2131					      sleep	3
      1  2131				   .CYCLES    SET	3
      2  2131
      3  2131				  -	      IF	.CYCLES < 2
      4  2131				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  2131				  -	      ERR
      6  2131					      ENDIF
      7  2131
      8  2131					      IF	.CYCLES & 1
      9  2131					      IFNCONST	NO_ILLEGAL_OPCODES
     10  2131		       04 00		      nop	0
     11  2133				  -	      ELSE
     12  2133				  -	      bit	VSYNC
     13  2133					      ENDIF
     14  2133				   .CYCLES    SET	.CYCLES - 3
     15  2133					      ENDIF
     16  2133
     17  2133				  -	      REPEAT	.CYCLES / 2
     18  2133				  -	      nop
     19  2133					      REPEND
   3601  2133					      endif
   3602  2133
   3603  2133		       95 9d		      sta	temp2,x
   3604  2135
   3605  2135							;store these so they can be retrieved later
   3606  2135				  -	      ifnconst	pfres
   3607  2135				  -	      ldx	#128-44+(4-pfwidth)*12
   3608  2135					      else
   3609  2135		       a2 74		      ldx	#132-pfres*pfwidth
   3610  2137					      endif
   3611  2137
   3612  2137		       c6 85		      dec	player0y
   3613  2139
   3614  2139		       a5 91		      lda	missile0y
   3615  213b		       85 a0		      sta	temp5
   3616  213d		       a5 88		      lda	missile1y
   3617  213f		       85 a1		      sta	temp6
   3618  2141
   3619  2141		       a5 ef		      lda	playfieldpos
   3620  2143		       85 9c		      sta	temp1
   3621  2145
   3622  2145				  -	      ifconst	pfrowheight
   3623  2145				  -	      lda	#pfrowheight+2
   3624  2145					      else
   3625  2145				  -	      ifnconst	pfres
   3626  2145				  -	      lda	#10
   3627  2145					      else
   3628  2145		       a9 1a		      lda	#(96/pfres)+2	; try to come close to the real size
   3629  2147					      endif
   3630  2147					      endif
   3631  2147		       18		      clc
   3632  2148		       e5 ef		      sbc	playfieldpos
   3633  214a		       85 ef		      sta	playfieldpos
   3634  214c		       4c 78 f1 	      jmp	.startkernel
   3635  214f
   3636  214f				   .skipDrawP0
   3637  214f		       a9 00		      lda	#0
   3638  2151		       a8		      tay
   3639  2152		       4c aa f1 	      jmp	.continueP0
   3640  2155
   3641  2155				   .skipDrawP1
   3642  2155		       a9 00		      lda	#0
   3643  2157		       a8		      tay
   3644  2158		       4c 82 f1 	      jmp	.continueP1
   3645  215b
   3646  215b				   .kerloop		; enter at cycle 59??
   3647  215b
   3648  215b				   continuekernel
      0  215b					      sleep	2
      1  215b				   .CYCLES    SET	2
      2  215b
      3  215b				  -	      IF	.CYCLES < 2
      4  215b				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  215b				  -	      ERR
      6  215b					      ENDIF
      7  215b
      8  215b				  -	      IF	.CYCLES & 1
      9  215b				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  215b				  -	      nop	0
     11  215b				  -	      ELSE
     12  215b				  -	      bit	VSYNC
     13  215b				  -	      ENDIF
     14  215b				  -.CYCLES    SET	.CYCLES - 3
     15  215b					      ENDIF
     16  215b
     17  215b					      REPEAT	.CYCLES / 2
     18  215b		       ea		      nop
     19  215c					      REPEND
   3650  215c				   continuekernel2
   3651  215c		       a5 92		      lda	ballheight
   3652  215e
   3653  215e					      ifconst	pfres
   3654  215e		       bc 7c 10 	      ldy	playfield+pfres*pfwidth-132,x
   3655  2161		       84 0e		      sty	PF1L	;3
   3656  2163		       bc 7d 10 	      ldy	playfield+pfres*pfwidth-131-pfadjust,x
   3657  2166		       84 0f		      sty	PF2L	;3
   3658  2168		       bc 7f 10 	      ldy	playfield+pfres*pfwidth-129,x
   3659  216b		       84 0e		      sty	PF1R	; 3 too early?
   3660  216d		       bc 7e 10 	      ldy	playfield+pfres*pfwidth-130-pfadjust,x
   3661  2170		       84 0f		      sty	PF2R	;3
   3662  2172				  -	      else
   3663  2172				  -	      ldy	playfield-48+pfwidth*12+44-128,x
   3664  2172				  -	      sty	PF1L	;3
   3665  2172				  -	      ldy	playfield-48+pfwidth*12+45-128-pfadjust,x	;4
   3666  2172				  -	      sty	PF2L	;3
   3667  2172				  -	      ldy	playfield-48+pfwidth*12+47-128,x	;4
   3668  2172				  -	      sty	PF1R	; 3 too early?
   3669  2172				  -	      ldy	playfield-48+pfwidth*12+46-128-pfadjust,x	;4
   3670  2172				  -	      sty	PF2R	;3
   3671  2172					      endif
   3672  2172
   3673  2172							; should be playfield+$38 for width=2
   3674  2172
   3675  2172		       c7 89		      dcp	bally
   3676  2174		       2a		      rol
   3677  2175		       2a		      rol
   3678  2176							; rol
   3679  2176							; rol
   3680  2176				   goback
   3681  2176		       85 1f		      sta	ENABL
   3682  2178				   .startkernel
   3683  2178		       a5 8f		      lda	player1height	;3
   3684  217a		       c7 86		      dcp	player1y	;5
   3685  217c		       90 d7		      bcc	.skipDrawP1	;2
   3686  217e		       a4 86		      ldy	player1y	;3
   3687  2180		       b1 8c		      lda	(player1pointer),y	;5; player0pointer must be selected carefully by the compiler
   3688  2182							; so it doesn't cross a page boundary!
   3689  2182
   3690  2182				   .continueP1
   3691  2182		       85 1c		      sta	GRP1	;3
   3692  2184
   3693  2184				  -	      ifnconst	player1colors
   3694  2184				  -	      lda	missile1height	;3
   3695  2184				  -	      dcp	missile1y	;5
   3696  2184				  -	      rol		;2
   3697  2184				  -	      rol		;2
   3698  2184				  -	      sta	ENAM1	;3
   3699  2184					      else
   3700  2184		       b1 87		      lda	(player1color),y
   3701  2186		       85 07		      sta	COLUP1
   3702  2188					      ifnconst	playercolors
      0  2188					      sleep	7
      1  2188				   .CYCLES    SET	7
      2  2188
      3  2188				  -	      IF	.CYCLES < 2
      4  2188				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  2188				  -	      ERR
      6  2188					      ENDIF
      7  2188
      8  2188					      IF	.CYCLES & 1
      9  2188					      IFNCONST	NO_ILLEGAL_OPCODES
     10  2188		       04 00		      nop	0
     11  218a				  -	      ELSE
     12  218a				  -	      bit	VSYNC
     13  218a					      ENDIF
     14  218a				   .CYCLES    SET	.CYCLES - 3
     15  218a					      ENDIF
     16  218a
     17  218a					      REPEAT	.CYCLES / 2
     18  218a		       ea		      nop
     17  218a					      REPEND
     18  218b		       ea		      nop
     19  218c					      REPEND
   3704  218c				  -	      else
   3705  218c				  -	      lda.w	player0colorstore
   3706  218c				  -	      sta	COLUP0
   3707  218c					      endif
   3708  218c					      endif
   3709  218c
   3710  218c					      ifconst	pfres
   3711  218c		       bd 7c 10 	      lda	playfield+pfres*pfwidth-132,x
   3712  218f		       85 0e		      sta	PF1L	;3
   3713  2191		       bd 7d 10 	      lda	playfield+pfres*pfwidth-131-pfadjust,x
   3714  2194		       85 0f		      sta	PF2L	;3
   3715  2196		       bd 7f 10 	      lda	playfield+pfres*pfwidth-129,x
   3716  2199		       85 0e		      sta	PF1R	; 3 too early?
   3717  219b		       bd 7e 10 	      lda	playfield+pfres*pfwidth-130-pfadjust,x
   3718  219e		       85 0f		      sta	PF2R	;3
   3719  21a0				  -	      else
   3720  21a0				  -	      lda	playfield-48+pfwidth*12+44-128,x	;4
   3721  21a0				  -	      sta	PF1L	;3
   3722  21a0				  -	      lda	playfield-48+pfwidth*12+45-128-pfadjust,x	;4
   3723  21a0				  -	      sta	PF2L	;3
   3724  21a0				  -	      lda	playfield-48+pfwidth*12+47-128,x	;4
   3725  21a0				  -	      sta	PF1R	; 3 too early?
   3726  21a0				  -	      lda	playfield-48+pfwidth*12+46-128-pfadjust,x	;4
   3727  21a0				  -	      sta	PF2R	;3
   3728  21a0					      endif
   3729  21a0							; sleep 3
   3730  21a0
   3731  21a0		       a5 8e		      lda	player0height
   3732  21a2		       c7 85		      dcp	player0y
   3733  21a4		       90 a9		      bcc	.skipDrawP0
   3734  21a6		       a4 85		      ldy	player0y
   3735  21a8		       b1 8a		      lda	(player0pointer),y
   3736  21aa				   .continueP0
   3737  21aa		       85 1b		      sta	GRP0
   3738  21ac
   3739  21ac					      ifnconst	no_blank_lines
   3740  21ac					      ifnconst	playercolors
   3741  21ac		       a5 90		      lda	missile0height	;3
   3742  21ae		       c7 91		      dcp	missile0y	;5
   3743  21b0		       e5 f6		      sbc	stack1
   3744  21b2		       85 1d		      sta	ENAM0	;3
   3745  21b4				  -	      else
   3746  21b4				  -	      lda	(player0color),y
   3747  21b4				  -	      sta	player0colorstore
   3748  21b4				  -	      sleep	6
   3749  21b4					      endif
   3750  21b4		       c6 9c		      dec	temp1
   3751  21b6		       d0 a3		      bne	continuekernel
   3752  21b8				  -	      else
   3753  21b8				  -	      dec	temp1
   3754  21b8				  -	      beq	altkernel2
   3755  21b8				  -	      ifconst	readpaddle
   3756  21b8				  -	      ldy	currentpaddle
   3757  21b8				  -	      lda	INPT0,y
   3758  21b8				  -	      bpl	noreadpaddle
   3759  21b8				  -	      inc	paddle
   3760  21b8				  -	      jmp	continuekernel2
   3761  21b8				  -noreadpaddle
   3762  21b8				  -	      sleep	2
   3763  21b8				  -	      jmp	continuekernel
   3764  21b8				  -	      else
   3765  21b8				  -	      ifnconst	playercolors
   3766  21b8				  -	      ifconst	PFcolors
   3767  21b8				  -	      txa
   3768  21b8				  -	      tay
   3769  21b8				  -	      lda	(pfcolortable),y
   3770  21b8				  -	      ifnconst	backgroundchange
   3771  21b8				  -	      sta	COLUPF
   3772  21b8				  -	      else
   3773  21b8				  -	      sta	COLUBK
   3774  21b8				  -	      endif
   3775  21b8				  -	      jmp	continuekernel
   3776  21b8				  -	      else
   3777  21b8				  -	      ifconst	kernelmacrodef
   3778  21b8				  -	      kernelmacro
   3779  21b8				  -	      else
   3780  21b8				  -	      sleep	12
   3781  21b8				  -	      endif
   3782  21b8				  -	      endif
   3783  21b8				  -	      else
   3784  21b8				  -	      lda	(player0color),y
   3785  21b8				  -	      sta	player0colorstore
   3786  21b8				  -	      sleep	4
   3787  21b8				  -	      endif
   3788  21b8				  -	      jmp	continuekernel
   3789  21b8				  -	      endif
   3790  21b8				  -altkernel2
   3791  21b8				  -	      txa
   3792  21b8				  -	      ifnconst	vertical_reflect
   3793  21b8				  -	      sbx	#256-pfwidth
   3794  21b8				  -	      else
   3795  21b8				  -	      sbx	#256-pfwidth/2
   3796  21b8				  -	      endif
   3797  21b8				  -	      bmi	lastkernelline
   3798  21b8				  -	      ifconst	pfrowheight
   3799  21b8				  -	      lda	#pfrowheight
   3800  21b8				  -	      else
   3801  21b8				  -	      ifnconst	pfres
   3802  21b8				  -	      lda	#8
   3803  21b8				  -	      else
   3804  21b8				  -	      lda	#(96/pfres)	; try to come close to the real size
   3805  21b8				  -	      endif
   3806  21b8				  -	      endif
   3807  21b8				  -	      sta	temp1
   3808  21b8				  -	      jmp	continuekernel
   3809  21b8					      endif
   3810  21b8
   3811  21b8				   altkernel
   3812  21b8
   3813  21b8				  -	      ifconst	PFmaskvalue
   3814  21b8				  -	      lda	#PFmaskvalue
   3815  21b8					      else
   3816  21b8		       a9 00		      lda	#0
   3817  21ba					      endif
   3818  21ba		       85 0e		      sta	PF1L
   3819  21bc		       85 0f		      sta	PF2
   3820  21be
   3821  21be
   3822  21be							;sleep 3
   3823  21be
   3824  21be							;28 cycles to fix things
   3825  21be							;minus 11=17
   3826  21be
   3827  21be							; lax temp4
   3828  21be							; clc
   3829  21be		       8a		      txa
   3830  21bf					      ifnconst	vertical_reflect
   3831  21bf		       cb fc		      sbx	#256-pfwidth
   3832  21c1				  -	      else
   3833  21c1				  -	      sbx	#256-pfwidth/2
   3834  21c1					      endif
   3835  21c1
   3836  21c1		       30 12		      bmi	lastkernelline
   3837  21c3
   3838  21c3				  -	      ifconst	PFcolorandheight
   3839  21c3				  -	      ifconst	pfres
   3840  21c3				  -	      ldy	playfieldcolorandheight-131+pfres*pfwidth,x
   3841  21c3				  -	      else
   3842  21c3				  -	      ldy	playfieldcolorandheight-87,x
   3843  21c3				  -	      endif
   3844  21c3				  -	      ifnconst	backgroundchange
   3845  21c3				  -	      sty	COLUPF
   3846  21c3				  -	      else
   3847  21c3				  -	      sty	COLUBK
   3848  21c3				  -	      endif
   3849  21c3				  -	      ifconst	pfres
   3850  21c3				  -	      lda	playfieldcolorandheight-132+pfres*pfwidth,x
   3851  21c3				  -	      else
   3852  21c3				  -	      lda	playfieldcolorandheight-88,x
   3853  21c3				  -	      endif
   3854  21c3				  -	      sta.w	temp1
   3855  21c3					      endif
   3856  21c3				  -	      ifconst	PFheights
   3857  21c3				  -	      lsr
   3858  21c3				  -	      lsr
   3859  21c3				  -	      tay
   3860  21c3				  -	      lda	(pfheighttable),y
   3861  21c3				  -	      sta.w	temp1
   3862  21c3					      endif
   3863  21c3					      ifconst	PFcolors
   3864  21c3		       a8		      tay
   3865  21c4		       b1 f0		      lda	(pfcolortable),y
   3866  21c6					      ifnconst	backgroundchange
   3867  21c6		       85 08		      sta	COLUPF
   3868  21c8				  -	      else
   3869  21c8				  -	      sta	COLUBK
   3870  21c8					      endif
   3871  21c8				  -	      ifconst	pfrowheight
   3872  21c8				  -	      lda	#pfrowheight
   3873  21c8					      else
   3874  21c8				  -	      ifnconst	pfres
   3875  21c8				  -	      lda	#8
   3876  21c8					      else
   3877  21c8		       a9 18		      lda	#(96/pfres)	; try to come close to the real size
   3878  21ca					      endif
   3879  21ca					      endif
   3880  21ca		       85 9c		      sta	temp1
   3881  21cc					      endif
   3882  21cc					      ifnconst	PFcolorandheight
   3883  21cc				  -	      ifnconst	PFcolors
   3884  21cc				  -	      ifnconst	PFheights
   3885  21cc				  -	      ifnconst	no_blank_lines
   3886  21cc				  -			; read paddle 0
   3887  21cc				  -			; lo-res paddle read
   3888  21cc				  -			; bit INPT0
   3889  21cc				  -			; bmi paddleskipread
   3890  21cc				  -			; inc paddle0
   3891  21cc				  -			;donepaddleskip
   3892  21cc				  -	      sleep	10
   3893  21cc				  -	      ifconst	pfrowheight
   3894  21cc				  -	      lda	#pfrowheight
   3895  21cc				  -	      else
   3896  21cc				  -	      ifnconst	pfres
   3897  21cc				  -	      lda	#8
   3898  21cc				  -	      else
   3899  21cc				  -	      lda	#(96/pfres)	; try to come close to the real size
   3900  21cc				  -	      endif
   3901  21cc				  -	      endif
   3902  21cc				  -	      sta	temp1
   3903  21cc				  -	      endif
   3904  21cc				  -	      endif
   3905  21cc					      endif
   3906  21cc					      endif
   3907  21cc
   3908  21cc
   3909  21cc		       a5 92		      lda	ballheight
   3910  21ce		       c7 89		      dcp	bally
   3911  21d0		       e5 9f		      sbc	temp4
   3912  21d2
   3913  21d2
   3914  21d2		       4c 76 f1 	      jmp	goback
   3915  21d5
   3916  21d5
   3917  21d5					      ifnconst	no_blank_lines
   3918  21d5				   lastkernelline
   3919  21d5				  -	      ifnconst	PFcolors
   3920  21d5				  -	      sleep	10
   3921  21d5					      else
   3922  21d5		       a0 7c		      ldy	#124
   3923  21d7		       b1 f0		      lda	(pfcolortable),y
   3924  21d9		       85 08		      sta	COLUPF
   3925  21db					      endif
   3926  21db
   3927  21db				  -	      ifconst	PFheights
   3928  21db				  -	      ldx	#1
   3929  21db				  -			;sleep 4
   3930  21db				  -	      sleep	3	; this was over 1 cycle
   3931  21db					      else
   3932  21db		       a6 ef		      ldx	playfieldpos
   3933  21dd							;sleep 3
      0  21dd					      sleep	2	; this was over 1 cycle
      1  21dd				   .CYCLES    SET	2
      2  21dd
      3  21dd				  -	      IF	.CYCLES < 2
      4  21dd				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  21dd				  -	      ERR
      6  21dd					      ENDIF
      7  21dd
      8  21dd				  -	      IF	.CYCLES & 1
      9  21dd				  -	      IFNCONST	NO_ILLEGAL_OPCODES
     10  21dd				  -	      nop	0
     11  21dd				  -	      ELSE
     12  21dd				  -	      bit	VSYNC
     13  21dd				  -	      ENDIF
     14  21dd				  -.CYCLES    SET	.CYCLES - 3
     15  21dd					      ENDIF
     16  21dd
     17  21dd					      REPEAT	.CYCLES / 2
     18  21dd		       ea		      nop
     19  21de					      REPEND
   3935  21de					      endif
   3936  21de
   3937  21de		       4c 1b f2 	      jmp	enterlastkernel
   3938  21e1
   3939  21e1				  -	      else
   3940  21e1				  -lastkernelline
   3941  21e1				  -
   3942  21e1				  -	      ifconst	PFheights
   3943  21e1				  -	      ldx	#1
   3944  21e1				  -			;sleep 5
   3945  21e1				  -	      sleep	4	; this was over 1 cycle
   3946  21e1				  -	      else
   3947  21e1				  -	      ldx	playfieldpos
   3948  21e1				  -			;sleep 4
   3949  21e1				  -	      sleep	3	; this was over 1 cycle
   3950  21e1				  -	      endif
   3951  21e1				  -
   3952  21e1				  -	      cpx	#0
   3953  21e1				  -	      bne	.enterfromNBL
   3954  21e1				  -	      jmp	no_blank_lines_bailout
   3955  21e1					      endif
   3956  21e1
   3957  21e1					      if	((<*)>$d5)
   3958  2200		       00 00 00 00*	      align	256
   3959  2200					      endif
   3960  2200							; this is a kludge to prevent page wrapping - fix!!!
   3961  2200
   3962  2200				   .skipDrawlastP1
   3963  2200		       a9 00		      lda	#0
   3964  2202		       a8		      tay		; added so we don't cross a page
   3965  2203		       4c 2d f2 	      jmp	.continuelastP1
   3966  2206
   3967  2206				   .endkerloop		; enter at cycle 59??
   3968  2206
   3969  2206		       ea		      nop
   3970  2207
   3971  2207				   .enterfromNBL
   3972  2207					      ifconst	pfres
   3973  2207		       ac fc 10 	      ldy.w	playfield+pfres*pfwidth-4
   3974  220a		       84 0e		      sty	PF1L	;3
   3975  220c		       ac fd 10 	      ldy.w	playfield+pfres*pfwidth-3-pfadjust
   3976  220f		       84 0f		      sty	PF2L	;3
   3977  2211		       ac ff 10 	      ldy.w	playfield+pfres*pfwidth-1
   3978  2214		       84 0e		      sty	PF1R	; possibly too early?
   3979  2216		       ac fe 10 	      ldy.w	playfield+pfres*pfwidth-2-pfadjust
   3980  2219		       84 0f		      sty	PF2R	;3
   3981  221b				  -	      else
   3982  221b				  -	      ldy.w	playfield-48+pfwidth*12+44
   3983  221b				  -	      sty	PF1L	;3
   3984  221b				  -	      ldy.w	playfield-48+pfwidth*12+45-pfadjust
   3985  221b				  -	      sty	PF2L	;3
   3986  221b				  -	      ldy.w	playfield-48+pfwidth*12+47
   3987  221b				  -	      sty	PF1R	; possibly too early?
   3988  221b				  -	      ldy.w	playfield-48+pfwidth*12+46-pfadjust
   3989  221b				  -	      sty	PF2R	;3
   3990  221b					      endif
   3991  221b
   3992  221b				   enterlastkernel
   3993  221b		       a5 92		      lda	ballheight
   3994  221d
   3995  221d							; tya
   3996  221d		       c7 89		      dcp	bally
   3997  221f							; sleep 4
   3998  221f
   3999  221f							; sbc stack3
   4000  221f		       2a		      rol
   4001  2220		       2a		      rol
   4002  2221		       85 1f		      sta	ENABL
   4003  2223
   4004  2223		       a5 8f		      lda	player1height	;3
   4005  2225		       c7 86		      dcp	player1y	;5
   4006  2227		       90 d7		      bcc	.skipDrawlastP1
   4007  2229		       a4 86		      ldy	player1y	;3
   4008  222b		       b1 8c		      lda	(player1pointer),y	;5; player0pointer must be selected carefully by the compiler
   4009  222d							; so it doesn't cross a page boundary!
   4010  222d
   4011  222d				   .continuelastP1
   4012  222d		       85 1c		      sta	GRP1	;3
   4013  222f
   4014  222f				  -	      ifnconst	player1colors
   4015  222f				  -	      lda	missile1height	;3
   4016  222f				  -	      dcp	missile1y	;5
   4017  222f					      else
   4018  222f		       b1 87		      lda	(player1color),y
   4019  2231		       85 07		      sta	COLUP1
   4020  2233					      endif
   4021  2233
   4022  2233		       ca		      dex
   4023  2234							;dec temp4 ; might try putting this above PF writes
   4024  2234		       f0 36		      beq	endkernel
   4025  2236
   4026  2236
   4027  2236					      ifconst	pfres
   4028  2236		       ac fc 10 	      ldy.w	playfield+pfres*pfwidth-4
   4029  2239		       84 0e		      sty	PF1L	;3
   4030  223b		       ac fd 10 	      ldy.w	playfield+pfres*pfwidth-3-pfadjust
   4031  223e		       84 0f		      sty	PF2L	;3
   4032  2240		       ac ff 10 	      ldy.w	playfield+pfres*pfwidth-1
   4033  2243		       84 0e		      sty	PF1R	; possibly too early?
   4034  2245		       ac fe 10 	      ldy.w	playfield+pfres*pfwidth-2-pfadjust
   4035  2248		       84 0f		      sty	PF2R	;3
   4036  224a				  -	      else
   4037  224a				  -	      ldy.w	playfield-48+pfwidth*12+44
   4038  224a				  -	      sty	PF1L	;3
   4039  224a				  -	      ldy.w	playfield-48+pfwidth*12+45-pfadjust
   4040  224a				  -	      sty	PF2L	;3
   4041  224a				  -	      ldy.w	playfield-48+pfwidth*12+47
   4042  224a				  -	      sty	PF1R	; possibly too early?
   4043  224a				  -	      ldy.w	playfield-48+pfwidth*12+46-pfadjust
   4044  224a				  -	      sty	PF2R	;3
   4045  224a					      endif
   4046  224a
   4047  224a				  -	      ifnconst	player1colors
   4048  224a				  -	      rol		;2
   4049  224a				  -	      rol		;2
   4050  224a				  -	      sta	ENAM1	;3
   4051  224a					      else
   4052  224a					      ifnconst	playercolors
      0  224a					      sleep	7
      1  224a				   .CYCLES    SET	7
      2  224a
      3  224a				  -	      IF	.CYCLES < 2
      4  224a				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  224a				  -	      ERR
      6  224a					      ENDIF
      7  224a
      8  224a					      IF	.CYCLES & 1
      9  224a					      IFNCONST	NO_ILLEGAL_OPCODES
     10  224a		       04 00		      nop	0
     11  224c				  -	      ELSE
     12  224c				  -	      bit	VSYNC
     13  224c					      ENDIF
     14  224c				   .CYCLES    SET	.CYCLES - 3
     15  224c					      ENDIF
     16  224c
     17  224c					      REPEAT	.CYCLES / 2
     18  224c		       ea		      nop
     17  224c					      REPEND
     18  224d		       ea		      nop
     19  224e					      REPEND
   4054  224e				  -	      else
   4055  224e				  -	      lda.w	player0colorstore
   4056  224e				  -	      sta	COLUP0
   4057  224e					      endif
   4058  224e					      endif
   4059  224e
   4060  224e		       ad 8e 00 	      lda.w	player0height
   4061  2251		       c7 85		      dcp	player0y
   4062  2253		       90 11		      bcc	.skipDrawlastP0
   4063  2255		       a4 85		      ldy	player0y
   4064  2257		       b1 8a		      lda	(player0pointer),y
   4065  2259				   .continuelastP0
   4066  2259		       85 1b		      sta	GRP0
   4067  225b
   4068  225b
   4069  225b
   4070  225b					      ifnconst	no_blank_lines
   4071  225b		       a5 90		      lda	missile0height	;3
   4072  225d		       c7 91		      dcp	missile0y	;5
   4073  225f		       e5 f6		      sbc	stack1
   4074  2261		       85 1d		      sta	ENAM0	;3
   4075  2263		       4c 06 f2 	      jmp	.endkerloop
   4076  2266				  -	      else
   4077  2266				  -	      ifconst	readpaddle
   4078  2266				  -	      ldy	currentpaddle
   4079  2266				  -	      lda	INPT0,y
   4080  2266				  -	      bpl	noreadpaddle2
   4081  2266				  -	      inc	paddle
   4082  2266				  -	      jmp	.endkerloop
   4083  2266				  -noreadpaddle2
   4084  2266				  -	      sleep	4
   4085  2266				  -	      jmp	.endkerloop
   4086  2266				  -	      else		; no_blank_lines and no paddle reading
   4087  2266				  -	      pla
   4088  2266				  -	      pha		; 14 cycles in 4 bytes
   4089  2266				  -	      pla
   4090  2266				  -	      pha
   4091  2266				  -			; sleep 14
   4092  2266				  -	      jmp	.endkerloop
   4093  2266				  -	      endif
   4094  2266					      endif
   4095  2266
   4096  2266
   4097  2266							; ifconst donepaddleskip
   4098  2266							;paddleskipread
   4099  2266							; this is kind of lame, since it requires 4 cycles from a page boundary crossing
   4100  2266							; plus we get a lo-res paddle read
   4101  2266							; bmi donepaddleskip
   4102  2266							; endif
   4103  2266
   4104  2266				   .skipDrawlastP0
   4105  2266		       a9 00		      lda	#0
   4106  2268		       a8		      tay
   4107  2269		       4c 59 f2 	      jmp	.continuelastP0
   4108  226c
   4109  226c				  -	      ifconst	no_blank_lines
   4110  226c				  -no_blank_lines_bailout
   4111  226c				  -	      ldx	#0
   4112  226c					      endif
   4113  226c
   4114  226c				   endkernel
   4115  226c							; 6 digit score routine
   4116  226c		       86 0e		      stx	PF1
   4117  226e		       86 0f		      stx	PF2
   4118  2270		       86 0d		      stx	PF0
   4119  2272		       18		      clc
   4120  2273
   4121  2273				  -	      ifconst	pfrowheight
   4122  2273				  -	      lda	#pfrowheight+2
   4123  2273					      else
   4124  2273				  -	      ifnconst	pfres
   4125  2273				  -	      lda	#10
   4126  2273					      else
   4127  2273		       a9 1a		      lda	#(96/pfres)+2	; try to come close to the real size
   4128  2275					      endif
   4129  2275					      endif
   4130  2275
   4131  2275		       e5 ef		      sbc	playfieldpos
   4132  2277		       85 ef		      sta	playfieldpos
   4133  2279		       8a		      txa
   4134  227a
   4135  227a				  -	      ifconst	shakescreen
   4136  227a				  -	      bit	shakescreen
   4137  227a				  -	      bmi	noshakescreen2
   4138  227a				  -	      ldx	#$3D
   4139  227a				  -noshakescreen2
   4140  227a					      endif
   4141  227a
   4142  227a		       95 02		      sta	WSYNC,x
   4143  227c
   4144  227c							; STA WSYNC ;first one, need one more
   4145  227c		       85 0b		      sta	REFP0
   4146  227e		       85 0c		      sta	REFP1
   4147  2280		       85 1b		      STA	GRP0
   4148  2282		       85 1c		      STA	GRP1
   4149  2284							; STA PF1
   4150  2284							; STA PF2
   4151  2284		       85 2b		      sta	HMCLR
   4152  2286		       85 1d		      sta	ENAM0
   4153  2288		       85 1e		      sta	ENAM1
   4154  228a		       85 1f		      sta	ENABL
   4155  228c
   4156  228c		       a5 9d		      lda	temp2	;restore variables that were obliterated by kernel
   4157  228e		       85 85		      sta	player0y
   4158  2290		       a5 9e		      lda	temp3
   4159  2292		       85 86		      sta	player1y
   4160  2294				  -	      ifnconst	player1colors
   4161  2294				  -	      lda	temp6
   4162  2294				  -	      sta	missile1y
   4163  2294					      endif
   4164  2294					      ifnconst	playercolors
   4165  2294					      ifnconst	readpaddle
   4166  2294		       a5 a0		      lda	temp5
   4167  2296		       85 91		      sta	missile0y
   4168  2298					      endif
   4169  2298					      endif
   4170  2298		       a5 f7		      lda	stack2
   4171  229a		       85 89		      sta	bally
   4172  229c
   4173  229c							; strangely, this isn't required any more. might have
   4174  229c							; resulted from the no_blank_lines score bounce fix
   4175  229c							;ifconst no_blank_lines
   4176  229c							;sta WSYNC
   4177  229c							;endif
   4178  229c
   4179  229c		       ad 84 02 	      lda	INTIM
   4180  229f		       18		      clc
   4181  22a0					      ifnconst	vblank_time
   4182  22a0		       69 8e		      adc	#43+12+87
   4183  22a2				  -	      else
   4184  22a2				  -	      adc	#vblank_time+12+87
   4185  22a2				  -
   4186  22a2					      endif
   4187  22a2							; sta WSYNC
   4188  22a2		       8d 96 02 	      sta	TIM64T
   4189  22a5
   4190  22a5				  -	      ifconst	minikernel
   4191  22a5				  -	      jsr	minikernel
   4192  22a5					      endif
   4193  22a5
   4194  22a5							; now reassign temp vars for score pointers
   4195  22a5
   4196  22a5							; score pointers contain:
   4197  22a5							; score1-5: lo1,lo2,lo3,lo4,lo5,lo6
   4198  22a5							; swap lo2->temp1
   4199  22a5							; swap lo4->temp3
   4200  22a5							; swap lo6->temp5
   4201  22a5					      ifnconst	noscore
   4202  22a5		       a5 97		      lda	scorepointers+1
   4203  22a7							; ldy temp1
   4204  22a7		       85 9c		      sta	temp1
   4205  22a9							; sty scorepointers+1
   4206  22a9
   4207  22a9		       a5 99		      lda	scorepointers+3
   4208  22ab							; ldy temp3
   4209  22ab		       85 9e		      sta	temp3
   4210  22ad							; sty scorepointers+3
   4211  22ad
   4212  22ad
   4213  22ad		       85 2b		      sta	HMCLR
   4214  22af		       ba		      tsx
   4215  22b0		       86 f6		      stx	stack1
   4216  22b2		       a2 e0		      ldx	#$E0
   4217  22b4		       86 20		      stx	HMP0
   4218  22b6
   4219  22b6		       a5 a3		      LDA	scorecolor
   4220  22b8		       85 06		      STA	COLUP0
   4221  22ba		       85 07		      STA	COLUP1
   4222  22bc				  -	      ifconst	scorefade
   4223  22bc				  -	      STA	stack2
   4224  22bc					      endif
   4225  22bc					      ifconst	pfscore
   4226  22bc		       a5 f4		      lda	pfscorecolor
   4227  22be		       85 08		      sta	COLUPF
   4228  22c0					      endif
   4229  22c0		       85 02		      sta	WSYNC
   4230  22c2		       a2 00		      ldx	#0
   4231  22c4		       86 1b		      STx	GRP0
   4232  22c6		       86 1c		      STx	GRP1	; seems to be needed because of vdel
   4233  22c8
   4234  22c8		       a5 9b		      lda	scorepointers+5
   4235  22ca							; ldy temp5
   4236  22ca		       95 a0		      sta	temp5,x
   4237  22cc							; sty scorepointers+5
   4238  22cc		       a9 ff		      lda	#>scoretable
   4239  22ce		       85 97		      sta	scorepointers+1
   4240  22d0		       85 99		      sta	scorepointers+3
   4241  22d2		       85 9b		      sta	scorepointers+5
   4242  22d4		       85 9d		      sta	temp2
   4243  22d6		       85 9f		      sta	temp4
   4244  22d8		       85 a1		      sta	temp6
   4245  22da		       a0 07		      LDY	#7
   4246  22dc		       84 25		      STY	VDELP0
   4247  22de		       85 10		      STA	RESP0
   4248  22e0		       85 11		      STA	RESP1
   4249  22e2
   4250  22e2
   4251  22e2		       a9 03		      LDA	#$03
   4252  22e4		       85 04		      STA	NUSIZ0
   4253  22e6		       85 05		      STA	NUSIZ1
   4254  22e8		       85 26		      STA	VDELP1
   4255  22ea		       a9 f0		      LDA	#$F0
   4256  22ec		       85 21		      STA	HMP1
   4257  22ee		       b1 96		      lda	(scorepointers),y
   4258  22f0		       85 1b		      sta	GRP0
   4259  22f2		       85 2a		      STA	HMOVE	; cycle 73 ?
   4260  22f4		       4c 09 f3 	      jmp	beginscore
   4261  22f7
   4262  22f7
   4263  22f7					      if	((<*)>$d4)
   4264  2300		       00 00 00 00*	      align	256	; kludge that potentially wastes space! should be fixed!
   4265  2300					      endif
   4266  2300
   4267  2300				   loop2
   4268  2300		       b1 96		      lda	(scorepointers),y	;+5 68 204
   4269  2302		       85 1b		      sta	GRP0	;+3 71 213 D1 -- -- --
   4270  2304					      ifconst	pfscore
   4271  2304		       ad f2 00 	      lda.w	pfscore1
   4272  2307		       85 0e		      sta	PF1
   4273  2309				  -	      else
   4274  2309				  -	      ifconst	scorefade
   4275  2309				  -	      sleep	2
   4276  2309				  -	      dec	stack2	; decrement the temporary scorecolor
   4277  2309				  -	      else
   4278  2309				  -	      sleep	7
   4279  2309				  -	      endif
   4280  2309					      endif
   4281  2309							; cycle 0
   4282  2309				   beginscore
   4283  2309		       b1 9e		      lda	(scorepointers+$8),y	;+5 5 15
   4284  230b		       85 1c		      sta	GRP1	;+3 8 24 D1 D1 D2 --
   4285  230d		       b1 9c		      lda	(scorepointers+$6),y	;+5 13 39
   4286  230f		       85 1b		      sta	GRP0	;+3 16 48 D3 D1 D2 D2
   4287  2311		       b3 98		      lax	(scorepointers+$2),y	;+5 29 87
   4288  2313		       9a		      txs
   4289  2314		       b3 9a		      lax	(scorepointers+$4),y	;+5 36 108
   4290  2316				  -	      ifconst	scorefade
   4291  2316				  -	      lda	stack2
   4292  2316					      else
      0  2316					      sleep	3
      1  2316				   .CYCLES    SET	3
      2  2316
      3  2316				  -	      IF	.CYCLES < 2
      4  2316				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  2316				  -	      ERR
      6  2316					      ENDIF
      7  2316
      8  2316					      IF	.CYCLES & 1
      9  2316					      IFNCONST	NO_ILLEGAL_OPCODES
     10  2316		       04 00		      nop	0
     11  2318				  -	      ELSE
     12  2318				  -	      bit	VSYNC
     13  2318					      ENDIF
     14  2318				   .CYCLES    SET	.CYCLES - 3
     15  2318					      ENDIF
     16  2318
     17  2318				  -	      REPEAT	.CYCLES / 2
     18  2318				  -	      nop
     19  2318					      REPEND
   4294  2318					      endif
   4295  2318
   4296  2318					      ifconst	pfscore
   4297  2318		       a5 f3		      lda	pfscore2
   4298  231a		       85 0e		      sta	PF1
   4299  231c				  -	      else
   4300  231c				  -	      ifconst	scorefade
   4301  231c				  -	      sta	COLUP0
   4302  231c				  -	      sta	COLUP1
   4303  231c				  -	      else
   4304  231c				  -	      sleep	6
   4305  231c				  -	      endif
   4306  231c					      endif
   4307  231c
   4308  231c		       b1 a0		      lda	(scorepointers+$A),y	;+5 21 63
   4309  231e		       86 1c		      stx	GRP1	;+3 44 132 D3 D3 D4 D2!
   4310  2320		       ba		      tsx
   4311  2321		       86 1b		      stx	GRP0	;+3 47 141 D5 D3! D4 D4
   4312  2323		       85 1c		      sta	GRP1	;+3 50 150 D5 D5 D6 D4!
   4313  2325		       84 1b		      sty	GRP0	;+3 53 159 D4* D5! D6 D6
   4314  2327		       88		      dey
   4315  2328		       10 d6		      bpl	loop2	;+2 60 180
   4316  232a
   4317  232a		       a6 f6		      ldx	stack1
   4318  232c		       9a		      txs
   4319  232d							; lda scorepointers+1
   4320  232d		       a4 9c		      ldy	temp1
   4321  232f							; sta temp1
   4322  232f		       84 97		      sty	scorepointers+1
   4323  2331
   4324  2331		       a9 00		      LDA	#0
   4325  2333		       85 0e		      sta	PF1
   4326  2335		       85 1b		      STA	GRP0
   4327  2337		       85 1c		      STA	GRP1
   4328  2339		       85 25		      STA	VDELP0
   4329  233b		       85 26		      STA	VDELP1	;do we need these
   4330  233d		       85 04		      STA	NUSIZ0
   4331  233f		       85 05		      STA	NUSIZ1
   4332  2341
   4333  2341							; lda scorepointers+3
   4334  2341		       a4 9e		      ldy	temp3
   4335  2343							; sta temp3
   4336  2343		       84 99		      sty	scorepointers+3
   4337  2345
   4338  2345							; lda scorepointers+5
   4339  2345		       a4 a0		      ldy	temp5
   4340  2347							; sta temp5
   4341  2347		       84 9b		      sty	scorepointers+5
   4342  2349					      endif		;noscore
   4343  2349		       a9 c2		      LDA	#%11000010
   4344  234b		       85 02		      sta	WSYNC
   4345  234d		       85 01		      STA	VBLANK
      0  234f					      RETURN
      1  234f				  -	      ifnconst	bankswitch
      2  234f				  -	      rts
      3  234f					      else
      4  234f		       4c da ff 	      jmp	BS_return
      5  2352					      endif
   4347  2352
   4348  2352				  -	      ifconst	shakescreen
   4349  2352				  -doshakescreen
   4350  2352				  -	      bit	shakescreen
   4351  2352				  -	      bmi	noshakescreen
   4352  2352				  -	      sta	WSYNC
   4353  2352				  -noshakescreen
   4354  2352				  -	      ldx	missile0height
   4355  2352				  -	      inx
   4356  2352				  -	      rts
   4357  2352					      endif
   4358  2352
   4359  2352							; Provided under the CC0 license. See the included LICENSE.txt for details.
   4360  2352
   4361  2352				   start
   4362  2352		       78		      sei
   4363  2353		       d8		      cld
   4364  2354		       a0 00		      ldy	#0
   4365  2356		       a5 d0		      lda	$D0
   4366  2358		       c9 2c		      cmp	#$2C	;check RAM location #1
   4367  235a		       d0 07		      bne	MachineIs2600
   4368  235c		       a5 d1		      lda	$D1
   4369  235e		       c9 a9		      cmp	#$A9	;check RAM location #2
   4370  2360		       d0 01		      bne	MachineIs2600
   4371  2362		       88		      dey
   4372  2363				   MachineIs2600
   4373  2363		       a2 00		      ldx	#0
   4374  2365		       8a		      txa
   4375  2366				   clearmem
   4376  2366		       e8		      inx
   4377  2367		       9a		      txs
   4378  2368		       48		      pha
   4379  2369		       d0 fb		      bne	clearmem
   4380  236b		       84 9c		      sty	temp1
   4381  236d					      ifnconst	multisprite
   4382  236d				  -	      ifconst	pfrowheight
   4383  236d				  -	      lda	#pfrowheight
   4384  236d					      else
   4385  236d					      ifconst	pfres
   4386  236d		       a9 18		      lda	#(96/pfres)
   4387  236f				  -	      else
   4388  236f				  -	      lda	#8
   4389  236f					      endif
   4390  236f					      endif
   4391  236f		       85 ef		      sta	playfieldpos
   4392  2371					      endif
   4393  2371		       a2 05		      ldx	#5
   4394  2373				   initscore
   4395  2373		       a9 71		      lda	#<scoretable
   4396  2375		       95 96		      sta	scorepointers,x
   4397  2377		       ca		      dex
   4398  2378		       10 f9		      bpl	initscore
   4399  237a		       a9 01		      lda	#1
   4400  237c		       85 0a		      sta	CTRLPF
   4401  237e		       0d 84 02 	      ora	INTIM
   4402  2381		       85 a2		      sta	rand
   4403  2383
   4404  2383				  -	      ifconst	multisprite
   4405  2383				  -	      jsr	multisprite_setup
   4406  2383					      endif
   4407  2383
   4408  2383				  -	      ifnconst	bankswitch
   4409  2383				  -	      jmp	game
   4410  2383					      else
   4411  2383		       a9 d0		      lda	#>(game-1)
   4412  2385		       48		      pha
   4413  2386		       a9 ff		      lda	#<(game-1)
   4414  2388		       48		      pha
   4415  2389		       48		      pha
   4416  238a		       48		      pha
   4417  238b		       a2 01		      ldx	#1
   4418  238d		       4c e8 ff 	      jmp	BS_jsr
   4419  2390					      endif
   4420  2390							; Provided under the CC0 license. See the included LICENSE.txt for details.
   4421  2390
   4422  2390							; playfield drawing routines
   4423  2390							; you get a 32x12 bitmapped display in a single color :)
   4424  2390							; 0-31 and 0-11
   4425  2390
   4426  2390				   pfclear		; clears playfield - or fill with pattern
   4427  2390					      ifconst	pfres
   4428  2390		       a2 0f		      ldx	#pfres*pfwidth-1
   4429  2392				  -	      else
   4430  2392				  -	      ldx	#47-(4-pfwidth)*12	; will this work?
   4431  2392					      endif
   4432  2392				   pfclear_loop
   4433  2392				  -	      ifnconst	superchip
   4434  2392				  -	      sta	playfield,x
   4435  2392					      else
   4436  2392		       9d 70 10 	      sta	playfield-128,x
   4437  2395					      endif
   4438  2395		       ca		      dex
   4439  2396		       10 fa		      bpl	pfclear_loop
      0  2398					      RETURN
      1  2398				  -	      ifnconst	bankswitch
      2  2398				  -	      rts
      3  2398					      else
      4  2398		       4c da ff 	      jmp	BS_return
      5  239b					      endif
   4441  239b
   4442  239b				   setuppointers
   4443  239b		       86 9d		      stx	temp2	; store on.off.flip value
   4444  239d		       aa		      tax		; put x-value in x 
   4445  239e		       4a		      lsr
   4446  239f		       4a		      lsr
   4447  23a0		       4a		      lsr		; divide x pos by 8 
   4448  23a1		       85 9c		      sta	temp1
   4449  23a3		       98		      tya
   4450  23a4		       0a		      asl
   4451  23a5					      if	pfwidth=4
   4452  23a5		       0a		      asl		; multiply y pos by 4
   4453  23a6					      endif		; else multiply by 2
   4454  23a6		       18		      clc
   4455  23a7		       65 9c		      adc	temp1	; add them together to get actual memory location offset
   4456  23a9		       a8		      tay		; put the value in y
   4457  23aa		       a5 9d		      lda	temp2	; restore on.off.flip value
   4458  23ac		       60		      rts
   4459  23ad
   4460  23ad				   pfread
   4461  23ad							;x=xvalue, y=yvalue
   4462  23ad		       20 9b f3 	      jsr	setuppointers
   4463  23b0		       bd 45 f4 	      lda	setbyte,x
   4464  23b3		       39 f0 10 	      and	playfield,y
   4465  23b6		       5d 45 f4 	      eor	setbyte,x
   4466  23b9							; beq readzero
   4467  23b9							; lda #1
   4468  23b9							; readzero
      0  23b9					      RETURN
      1  23b9				  -	      ifnconst	bankswitch
      2  23b9				  -	      rts
      3  23b9					      else
      4  23b9		       4c da ff 	      jmp	BS_return
      5  23bc					      endif
   4470  23bc
   4471  23bc				   pfpixel
   4472  23bc							;x=xvalue, y=yvalue, a=0,1,2
   4473  23bc		       20 9b f3 	      jsr	setuppointers
   4474  23bf
   4475  23bf					      ifconst	bankswitch
   4476  23bf		       a5 9d		      lda	temp2	; load on.off.flip value (0,1, or 2)
   4477  23c1		       f0 0f		      beq	pixelon_r	; if "on" go to on
   4478  23c3		       4a		      lsr
   4479  23c4		       b0 18		      bcs	pixeloff_r	; value is 1 if true
   4480  23c6		       b9 f0 10 	      lda	playfield,y	; if here, it's "flip"
   4481  23c9		       5d 45 f4 	      eor	setbyte,x
   4482  23cc					      ifconst	superchip
   4483  23cc		       99 70 10 	      sta	playfield-128,y
   4484  23cf				  -	      else
   4485  23cf				  -	      sta	playfield,y
   4486  23cf					      endif
      0  23cf					      RETURN
      1  23cf				  -	      ifnconst	bankswitch
      2  23cf				  -	      rts
      3  23cf					      else
      4  23cf		       4c da ff 	      jmp	BS_return
      5  23d2					      endif
   4488  23d2				   pixelon_r
   4489  23d2		       b9 f0 10 	      lda	playfield,y
   4490  23d5		       1d 45 f4 	      ora	setbyte,x
   4491  23d8					      ifconst	superchip
   4492  23d8		       99 70 10 	      sta	playfield-128,y
   4493  23db				  -	      else
   4494  23db				  -	      sta	playfield,y
   4495  23db					      endif
      0  23db					      RETURN
      1  23db				  -	      ifnconst	bankswitch
      2  23db				  -	      rts
      3  23db					      else
      4  23db		       4c da ff 	      jmp	BS_return
      5  23de					      endif
   4497  23de				   pixeloff_r
   4498  23de		       bd 45 f4 	      lda	setbyte,x
   4499  23e1		       49 ff		      eor	#$ff
   4500  23e3		       39 f0 10 	      and	playfield,y
   4501  23e6					      ifconst	superchip
   4502  23e6		       99 70 10 	      sta	playfield-128,y
   4503  23e9				  -	      else
   4504  23e9				  -	      sta	playfield,y
   4505  23e9					      endif
      0  23e9					      RETURN
      1  23e9				  -	      ifnconst	bankswitch
      2  23e9				  -	      rts
      3  23e9					      else
      4  23e9		       4c da ff 	      jmp	BS_return
      5  23ec					      endif
   4507  23ec
   4508  23ec				  -	      else
   4509  23ec				  -	      jmp	plotpoint
   4510  23ec					      endif
   4511  23ec
   4512  23ec				   pfhline
   4513  23ec							;x=xvalue, y=yvalue, a=0,1,2, temp3=endx
   4514  23ec		       20 9b f3 	      jsr	setuppointers
   4515  23ef		       4c f9 f3 	      jmp	noinc
   4516  23f2				   keepgoing
   4517  23f2		       e8		      inx
   4518  23f3		       8a		      txa
   4519  23f4		       29 07		      and	#7
   4520  23f6		       d0 01		      bne	noinc
   4521  23f8		       c8		      iny
   4522  23f9				   noinc
   4523  23f9		       20 1e f4 	      jsr	plotpoint
   4524  23fc		       e4 9e		      cpx	temp3
   4525  23fe		       30 f2		      bmi	keepgoing
      0  2400					      RETURN
      1  2400				  -	      ifnconst	bankswitch
      2  2400				  -	      rts
      3  2400					      else
      4  2400		       4c da ff 	      jmp	BS_return
      5  2403					      endif
   4527  2403
   4528  2403				   pfvline
   4529  2403							;x=xvalue, y=yvalue, a=0,1,2, temp3=endx
   4530  2403		       20 9b f3 	      jsr	setuppointers
   4531  2406		       84 9c		      sty	temp1	; store memory location offset
   4532  2408		       e6 9e		      inc	temp3	; increase final x by 1 
   4533  240a		       a5 9e		      lda	temp3
   4534  240c		       0a		      asl
   4535  240d					      if	pfwidth=4
   4536  240d		       0a		      asl		; multiply by 4
   4537  240e					      endif		; else multiply by 2
   4538  240e		       85 9e		      sta	temp3	; store it
   4539  2410							; Thanks to Michael Rideout for fixing a bug in this code
   4540  2410							; right now, temp1=y=starting memory location, temp3=final
   4541  2410							; x should equal original x value
   4542  2410				   keepgoingy
   4543  2410		       20 1e f4 	      jsr	plotpoint
   4544  2413		       c8		      iny
   4545  2414		       c8		      iny
   4546  2415					      if	pfwidth=4
   4547  2415		       c8		      iny
   4548  2416		       c8		      iny
   4549  2417					      endif
   4550  2417		       c4 9e		      cpy	temp3
   4551  2419		       30 f5		      bmi	keepgoingy
      0  241b					      RETURN
      1  241b				  -	      ifnconst	bankswitch
      2  241b				  -	      rts
      3  241b					      else
      4  241b		       4c da ff 	      jmp	BS_return
      5  241e					      endif
   4553  241e
   4554  241e				   plotpoint
   4555  241e		       a5 9d		      lda	temp2	; load on.off.flip value (0,1, or 2)
   4556  2420		       f0 0d		      beq	pixelon	; if "on" go to on
   4557  2422		       4a		      lsr
   4558  2423		       b0 14		      bcs	pixeloff	; value is 1 if true
   4559  2425		       b9 f0 10 	      lda	playfield,y	; if here, it's "flip"
   4560  2428		       5d 45 f4 	      eor	setbyte,x
   4561  242b					      ifconst	superchip
   4562  242b		       99 70 10 	      sta	playfield-128,y
   4563  242e				  -	      else
   4564  242e				  -	      sta	playfield,y
   4565  242e					      endif
   4566  242e		       60		      rts
   4567  242f				   pixelon
   4568  242f		       b9 f0 10 	      lda	playfield,y
   4569  2432		       1d 45 f4 	      ora	setbyte,x
   4570  2435					      ifconst	superchip
   4571  2435		       99 70 10 	      sta	playfield-128,y
   4572  2438				  -	      else
   4573  2438				  -	      sta	playfield,y
   4574  2438					      endif
   4575  2438		       60		      rts
   4576  2439				   pixeloff
   4577  2439		       bd 45 f4 	      lda	setbyte,x
   4578  243c		       49 ff		      eor	#$ff
   4579  243e		       39 f0 10 	      and	playfield,y
   4580  2441					      ifconst	superchip
   4581  2441		       99 70 10 	      sta	playfield-128,y
   4582  2444				  -	      else
   4583  2444				  -	      sta	playfield,y
   4584  2444					      endif
   4585  2444		       60		      rts
   4586  2445
   4587  2445				   setbyte
   4588  2445					      ifnconst	pfcenter
   4589  2445		       80		      .byte.b	$80
   4590  2446		       40		      .byte.b	$40
   4591  2447		       20		      .byte.b	$20
   4592  2448		       10		      .byte.b	$10
   4593  2449		       08		      .byte.b	$08
   4594  244a		       04		      .byte.b	$04
   4595  244b		       02		      .byte.b	$02
   4596  244c		       01		      .byte.b	$01
   4597  244d					      endif
   4598  244d		       01		      .byte.b	$01
   4599  244e		       02		      .byte.b	$02
   4600  244f		       04		      .byte.b	$04
   4601  2450		       08		      .byte.b	$08
   4602  2451		       10		      .byte.b	$10
   4603  2452		       20		      .byte.b	$20
   4604  2453		       40		      .byte.b	$40
   4605  2454		       80		      .byte.b	$80
   4606  2455		       80		      .byte.b	$80
   4607  2456		       40		      .byte.b	$40
   4608  2457		       20		      .byte.b	$20
   4609  2458		       10		      .byte.b	$10
   4610  2459		       08		      .byte.b	$08
   4611  245a		       04		      .byte.b	$04
   4612  245b		       02		      .byte.b	$02
   4613  245c		       01		      .byte.b	$01
   4614  245d		       01		      .byte.b	$01
   4615  245e		       02		      .byte.b	$02
   4616  245f		       04		      .byte.b	$04
   4617  2460		       08		      .byte.b	$08
   4618  2461		       10		      .byte.b	$10
   4619  2462		       20		      .byte.b	$20
   4620  2463		       40		      .byte.b	$40
   4621  2464		       80		      .byte.b	$80
   4622  2465							; Provided under the CC0 license. See the included LICENSE.txt for details.
   4623  2465
   4624  2465				   pfscroll		;(a=0 left, 1 right, 2 up, 4 down, 6=upup, 12=downdown)
   4625  2465		       d0 2a		      bne	notleft
   4626  2467							;left
   4627  2467					      ifconst	pfres
   4628  2467		       a2 10		      ldx	#pfres*4
   4629  2469				  -	      else
   4630  2469				  -	      ldx	#48
   4631  2469					      endif
   4632  2469				   leftloop
   4633  2469		       bd ef 10 	      lda	playfield-1,x
   4634  246c		       4a		      lsr
   4635  246d
   4636  246d					      ifconst	superchip
   4637  246d		       bd ee 10 	      lda	playfield-2,x
   4638  2470		       2a		      rol
   4639  2471		       9d 6e 10 	      sta	playfield-130,x
   4640  2474		       bd ed 10 	      lda	playfield-3,x
   4641  2477		       6a		      ror
   4642  2478		       9d 6d 10 	      sta	playfield-131,x
   4643  247b		       bd ec 10 	      lda	playfield-4,x
   4644  247e		       2a		      rol
   4645  247f		       9d 6c 10 	      sta	playfield-132,x
   4646  2482		       bd ef 10 	      lda	playfield-1,x
   4647  2485		       6a		      ror
   4648  2486		       9d 6f 10 	      sta	playfield-129,x
   4649  2489				  -	      else
   4650  2489				  -	      rol	playfield-2,x
   4651  2489				  -	      ror	playfield-3,x
   4652  2489				  -	      rol	playfield-4,x
   4653  2489				  -	      ror	playfield-1,x
   4654  2489					      endif
   4655  2489
   4656  2489		       8a		      txa
   4657  248a		       cb 04		      sbx	#4
   4658  248c		       d0 db		      bne	leftloop
      0  248e					      RETURN
      1  248e				  -	      ifnconst	bankswitch
      2  248e				  -	      rts
      3  248e					      else
      4  248e		       4c da ff 	      jmp	BS_return
      5  2491					      endif
   4660  2491
   4661  2491				   notleft
   4662  2491		       4a		      lsr
   4663  2492		       90 2a		      bcc	notright
   4664  2494							;right
   4665  2494
   4666  2494					      ifconst	pfres
   4667  2494		       a2 10		      ldx	#pfres*4
   4668  2496				  -	      else
   4669  2496				  -	      ldx	#48
   4670  2496					      endif
   4671  2496				   rightloop
   4672  2496		       bd ec 10 	      lda	playfield-4,x
   4673  2499		       4a		      lsr
   4674  249a					      ifconst	superchip
   4675  249a		       bd ed 10 	      lda	playfield-3,x
   4676  249d		       2a		      rol
   4677  249e		       9d 6d 10 	      sta	playfield-131,x
   4678  24a1		       bd ee 10 	      lda	playfield-2,x
   4679  24a4		       6a		      ror
   4680  24a5		       9d 6e 10 	      sta	playfield-130,x
   4681  24a8		       bd ef 10 	      lda	playfield-1,x
   4682  24ab		       2a		      rol
   4683  24ac		       9d 6f 10 	      sta	playfield-129,x
   4684  24af		       bd ec 10 	      lda	playfield-4,x
   4685  24b2		       6a		      ror
   4686  24b3		       9d 6c 10 	      sta	playfield-132,x
   4687  24b6				  -	      else
   4688  24b6				  -	      rol	playfield-3,x
   4689  24b6				  -	      ror	playfield-2,x
   4690  24b6				  -	      rol	playfield-1,x
   4691  24b6				  -	      ror	playfield-4,x
   4692  24b6					      endif
   4693  24b6		       8a		      txa
   4694  24b7		       cb 04		      sbx	#4
   4695  24b9		       d0 db		      bne	rightloop
      0  24bb					      RETURN
      1  24bb				  -	      ifnconst	bankswitch
      2  24bb				  -	      rts
      3  24bb					      else
      4  24bb		       4c da ff 	      jmp	BS_return
      5  24be					      endif
   4697  24be
   4698  24be				   notright
   4699  24be		       4a		      lsr
   4700  24bf		       90 5b		      bcc	notup
   4701  24c1							;up
   4702  24c1		       4a		      lsr
   4703  24c2		       90 02		      bcc	onedecup
   4704  24c4		       c6 ef		      dec	playfieldpos
   4705  24c6				   onedecup
   4706  24c6		       c6 ef		      dec	playfieldpos
   4707  24c8		       f0 02		      beq	shiftdown
   4708  24ca		       10 4d		      bpl	noshiftdown2
   4709  24cc				   shiftdown
   4710  24cc				  -	      ifconst	pfrowheight
   4711  24cc				  -	      lda	#pfrowheight
   4712  24cc					      else
   4713  24cc				  -	      ifnconst	pfres
   4714  24cc				  -	      lda	#8
   4715  24cc					      else
   4716  24cc		       a9 18		      lda	#(96/pfres)	; try to come close to the real size
   4717  24ce					      endif
   4718  24ce					      endif
   4719  24ce
   4720  24ce		       85 ef		      sta	playfieldpos
   4721  24d0		       ad f3 10 	      lda	playfield+3
   4722  24d3		       85 9f		      sta	temp4
   4723  24d5		       ad f2 10 	      lda	playfield+2
   4724  24d8		       85 9e		      sta	temp3
   4725  24da		       ad f1 10 	      lda	playfield+1
   4726  24dd		       85 9d		      sta	temp2
   4727  24df		       ad f0 10 	      lda	playfield
   4728  24e2		       85 9c		      sta	temp1
   4729  24e4		       a2 00		      ldx	#0
   4730  24e6				   up2
   4731  24e6		       bd f4 10 	      lda	playfield+4,x
   4732  24e9					      ifconst	superchip
   4733  24e9		       9d 70 10 	      sta	playfield-128,x
   4734  24ec		       bd f5 10 	      lda	playfield+5,x
   4735  24ef		       9d 71 10 	      sta	playfield-127,x
   4736  24f2		       bd f6 10 	      lda	playfield+6,x
   4737  24f5		       9d 72 10 	      sta	playfield-126,x
   4738  24f8		       bd f7 10 	      lda	playfield+7,x
   4739  24fb		       9d 73 10 	      sta	playfield-125,x
   4740  24fe				  -	      else
   4741  24fe				  -	      sta	playfield,x
   4742  24fe				  -	      lda	playfield+5,x
   4743  24fe				  -	      sta	playfield+1,x
   4744  24fe				  -	      lda	playfield+6,x
   4745  24fe				  -	      sta	playfield+2,x
   4746  24fe				  -	      lda	playfield+7,x
   4747  24fe				  -	      sta	playfield+3,x
   4748  24fe					      endif
   4749  24fe		       8a		      txa
   4750  24ff		       cb fc		      sbx	#252
   4751  2501					      ifconst	pfres
   4752  2501		       e0 0c		      cpx	#(pfres-1)*4
   4753  2503				  -	      else
   4754  2503				  -	      cpx	#44
   4755  2503					      endif
   4756  2503		       d0 e1		      bne	up2
   4757  2505
   4758  2505		       a5 9f		      lda	temp4
   4759  2507
   4760  2507					      ifconst	superchip
   4761  2507					      ifconst	pfres
   4762  2507		       8d 7f 10 	      sta	playfield+pfres*4-129
   4763  250a		       a5 9e		      lda	temp3
   4764  250c		       8d 7e 10 	      sta	playfield+pfres*4-130
   4765  250f		       a5 9d		      lda	temp2
   4766  2511		       8d 7d 10 	      sta	playfield+pfres*4-131
   4767  2514		       a5 9c		      lda	temp1
   4768  2516		       8d 7c 10 	      sta	playfield+pfres*4-132
   4769  2519				  -	      else
   4770  2519				  -	      sta	playfield+47-128
   4771  2519				  -	      lda	temp3
   4772  2519				  -	      sta	playfield+46-128
   4773  2519				  -	      lda	temp2
   4774  2519				  -	      sta	playfield+45-128
   4775  2519				  -	      lda	temp1
   4776  2519				  -	      sta	playfield+44-128
   4777  2519					      endif
   4778  2519				  -	      else
   4779  2519				  -	      ifconst	pfres
   4780  2519				  -	      sta	playfield+pfres*4-1
   4781  2519				  -	      lda	temp3
   4782  2519				  -	      sta	playfield+pfres*4-2
   4783  2519				  -	      lda	temp2
   4784  2519				  -	      sta	playfield+pfres*4-3
   4785  2519				  -	      lda	temp1
   4786  2519				  -	      sta	playfield+pfres*4-4
   4787  2519				  -	      else
   4788  2519				  -	      sta	playfield+47
   4789  2519				  -	      lda	temp3
   4790  2519				  -	      sta	playfield+46
   4791  2519				  -	      lda	temp2
   4792  2519				  -	      sta	playfield+45
   4793  2519				  -	      lda	temp1
   4794  2519				  -	      sta	playfield+44
   4795  2519				  -	      endif
   4796  2519					      endif
   4797  2519				   noshiftdown2
      0  2519					      RETURN
      1  2519				  -	      ifnconst	bankswitch
      2  2519				  -	      rts
      3  2519					      else
      4  2519		       4c da ff 	      jmp	BS_return
      5  251c					      endif
   4799  251c
   4800  251c
   4801  251c				   notup
   4802  251c							;down
   4803  251c		       4a		      lsr
   4804  251d		       b0 02		      bcs	oneincup
   4805  251f		       e6 ef		      inc	playfieldpos
   4806  2521				   oneincup
   4807  2521		       e6 ef		      inc	playfieldpos
   4808  2523		       a5 ef		      lda	playfieldpos
   4809  2525
   4810  2525				  -	      ifconst	pfrowheight
   4811  2525				  -	      cmp	#pfrowheight+1
   4812  2525					      else
   4813  2525				  -	      ifnconst	pfres
   4814  2525				  -	      cmp	#9
   4815  2525					      else
   4816  2525		       c9 19		      cmp	#(96/pfres)+1	; try to come close to the real size
   4817  2527					      endif
   4818  2527					      endif
   4819  2527
   4820  2527		       90 4b		      bcc	noshiftdown
   4821  2529		       a9 01		      lda	#1
   4822  252b		       85 ef		      sta	playfieldpos
   4823  252d
   4824  252d					      ifconst	pfres
   4825  252d		       ad ff 10 	      lda	playfield+pfres*4-1
   4826  2530		       85 9f		      sta	temp4
   4827  2532		       ad fe 10 	      lda	playfield+pfres*4-2
   4828  2535		       85 9e		      sta	temp3
   4829  2537		       ad fd 10 	      lda	playfield+pfres*4-3
   4830  253a		       85 9d		      sta	temp2
   4831  253c		       ad fc 10 	      lda	playfield+pfres*4-4
   4832  253f				  -	      else
   4833  253f				  -	      lda	playfield+47
   4834  253f				  -	      sta	temp4
   4835  253f				  -	      lda	playfield+46
   4836  253f				  -	      sta	temp3
   4837  253f				  -	      lda	playfield+45
   4838  253f				  -	      sta	temp2
   4839  253f				  -	      lda	playfield+44
   4840  253f					      endif
   4841  253f
   4842  253f		       85 9c		      sta	temp1
   4843  2541
   4844  2541					      ifconst	pfres
   4845  2541		       a2 0c		      ldx	#(pfres-1)*4
   4846  2543				  -	      else
   4847  2543				  -	      ldx	#44
   4848  2543					      endif
   4849  2543				   down2
   4850  2543		       bd ef 10 	      lda	playfield-1,x
   4851  2546					      ifconst	superchip
   4852  2546		       9d 73 10 	      sta	playfield-125,x
   4853  2549		       bd ee 10 	      lda	playfield-2,x
   4854  254c		       9d 72 10 	      sta	playfield-126,x
   4855  254f		       bd ed 10 	      lda	playfield-3,x
   4856  2552		       9d 71 10 	      sta	playfield-127,x
   4857  2555		       bd ec 10 	      lda	playfield-4,x
   4858  2558		       9d 70 10 	      sta	playfield-128,x
   4859  255b				  -	      else
   4860  255b				  -	      sta	playfield+3,x
   4861  255b				  -	      lda	playfield-2,x
   4862  255b				  -	      sta	playfield+2,x
   4863  255b				  -	      lda	playfield-3,x
   4864  255b				  -	      sta	playfield+1,x
   4865  255b				  -	      lda	playfield-4,x
   4866  255b				  -	      sta	playfield,x
   4867  255b					      endif
   4868  255b		       8a		      txa
   4869  255c		       cb 04		      sbx	#4
   4870  255e		       d0 e3		      bne	down2
   4871  2560
   4872  2560		       a5 9f		      lda	temp4
   4873  2562					      ifconst	superchip
   4874  2562		       8d 73 10 	      sta	playfield-125
   4875  2565		       a5 9e		      lda	temp3
   4876  2567		       8d 72 10 	      sta	playfield-126
   4877  256a		       a5 9d		      lda	temp2
   4878  256c		       8d 71 10 	      sta	playfield-127
   4879  256f		       a5 9c		      lda	temp1
   4880  2571		       8d 70 10 	      sta	playfield-128
   4881  2574				  -	      else
   4882  2574				  -	      sta	playfield+3
   4883  2574				  -	      lda	temp3
   4884  2574				  -	      sta	playfield+2
   4885  2574				  -	      lda	temp2
   4886  2574				  -	      sta	playfield+1
   4887  2574				  -	      lda	temp1
   4888  2574				  -	      sta	playfield
   4889  2574					      endif
   4890  2574				   noshiftdown
      0  2574					      RETURN
      1  2574				  -	      ifnconst	bankswitch
      2  2574				  -	      rts
      3  2574					      else
      4  2574		       4c da ff 	      jmp	BS_return
      5  2577					      endif
   4892  2577							; Provided under the CC0 license. See the included LICENSE.txt for details.
   4893  2577
   4894  2577							;standard routines needed for pretty much all games
   4895  2577							; just the random number generator is left - maybe we should remove this asm file altogether?
   4896  2577							; repositioning code and score pointer setup moved to overscan
   4897  2577							; read switches, joysticks now compiler generated (more efficient)
   4898  2577
   4899  2577				   randomize
   4900  2577		       a5 a2		      lda	rand
   4901  2579		       4a		      lsr
   4902  257a				  -	      ifconst	rand16
   4903  257a				  -	      rol	rand16
   4904  257a					      endif
   4905  257a		       90 02		      bcc	noeor
   4906  257c		       49 b4		      eor	#$B4
   4907  257e				   noeor
   4908  257e		       85 a2		      sta	rand
   4909  2580				  -	      ifconst	rand16
   4910  2580				  -	      eor	rand16
   4911  2580					      endif
      0  2580					      RETURN
      1  2580				  -	      ifnconst	bankswitch
      2  2580				  -	      rts
      3  2580					      else
      4  2580		       4c da ff 	      jmp	BS_return
      5  2583					      endif
   4913  2583							; Provided under the CC0 license. See the included LICENSE.txt for details.
   4914  2583
   4915  2583				   drawscreen
   4916  2583				  -	      ifconst	debugscore
   4917  2583				  -	      ldx	#14
   4918  2583				  -	      lda	INTIM	; display # cycles left in the score
   4919  2583				  -
   4920  2583				  -	      ifconst	mincycles
   4921  2583				  -	      lda	mincycles
   4922  2583				  -	      cmp	INTIM
   4923  2583				  -	      lda	mincycles
   4924  2583				  -	      bcc	nochange
   4925  2583				  -	      lda	INTIM
   4926  2583				  -	      sta	mincycles
   4927  2583				  -nochange
   4928  2583				  -	      endif
   4929  2583				  -
   4930  2583				  -			; cmp #$2B
   4931  2583				  -			; bcs no_cycles_left
   4932  2583				  -	      bmi	cycles_left
   4933  2583				  -	      ldx	#64
   4934  2583				  -	      eor	#$ff	;make negative
   4935  2583				  -cycles_left
   4936  2583				  -	      stx	scorecolor
   4937  2583				  -	      and	#$7f	; clear sign bit
   4938  2583				  -	      tax
   4939  2583				  -	      lda	scorebcd,x
   4940  2583				  -	      sta	score+2
   4941  2583				  -	      lda	scorebcd1,x
   4942  2583				  -	      sta	score+1
   4943  2583				  -	      jmp	done_debugscore
   4944  2583				  -scorebcd
   4945  2583				  -	      .byte	$00, $64, $28, $92, $56, $20, $84, $48, $12, $76, $40
   4946  2583				  -	      .byte	$04, $68, $32, $96, $60, $24, $88, $52, $16, $80, $44
   4947  2583				  -	      .byte	$08, $72, $36, $00, $64, $28, $92, $56, $20, $84, $48
   4948  2583				  -	      .byte	$12, $76, $40, $04, $68, $32, $96, $60, $24, $88
   4949  2583				  -scorebcd1
   4950  2583				  -	      .byte	0, 0, 1, 1, 2, 3, 3, 4, 5, 5, 6
   4951  2583				  -	      .byte	7, 7, 8, 8, 9, $10, $10, $11, $12, $12, $13
   4952  2583				  -	      .byte	$14, $14, $15, $16, $16, $17, $17, $18, $19, $19, $20
   4953  2583				  -	      .byte	$21, $21, $22, $23, $23, $24, $24, $25, $26, $26
   4954  2583				  -done_debugscore
   4955  2583					      endif
   4956  2583
   4957  2583				  -	      ifconst	debugcycles
   4958  2583				  -	      lda	INTIM	; if we go over, it mucks up the background color
   4959  2583				  -			; cmp #$2B
   4960  2583				  -			; BCC overscan
   4961  2583				  -	      bmi	overscan
   4962  2583				  -	      sta	COLUBK
   4963  2583				  -	      bcs	doneoverscan
   4964  2583					      endif
   4965  2583
   4966  2583				   overscan
   4967  2583				  -	      ifconst	interlaced
   4968  2583				  -	      PHP
   4969  2583				  -	      PLA
   4970  2583				  -	      EOR	#4	; flip interrupt bit
   4971  2583				  -	      PHA
   4972  2583				  -	      PLP
   4973  2583				  -	      AND	#4	; isolate the interrupt bit
   4974  2583				  -	      TAX		; save it for later
   4975  2583					      endif
   4976  2583
   4977  2583				   overscanloop
   4978  2583		       ad 84 02 	      lda	INTIM	;wait for sync
   4979  2586		       30 fb		      bmi	overscanloop
   4980  2588				   doneoverscan
   4981  2588
   4982  2588							;do VSYNC
   4983  2588
   4984  2588				  -	      ifconst	interlaced
   4985  2588				  -	      CPX	#4
   4986  2588				  -	      BNE	oddframevsync
   4987  2588					      endif
   4988  2588
   4989  2588		       a9 02		      lda	#2
   4990  258a		       85 02		      sta	WSYNC
   4991  258c		       85 00		      sta	VSYNC
   4992  258e		       85 02		      STA	WSYNC
   4993  2590		       85 02		      STA	WSYNC
   4994  2592		       4a		      lsr
   4995  2593		       85 02		      STA	WSYNC
   4996  2595		       85 00		      STA	VSYNC
   4997  2597		       85 01		      sta	VBLANK
   4998  2599					      ifnconst	overscan_time
   4999  2599		       a9 a5		      lda	#37+128
   5000  259b				  -	      else
   5001  259b				  -	      lda	#overscan_time+128
   5002  259b					      endif
   5003  259b		       8d 96 02 	      sta	TIM64T
   5004  259e
   5005  259e				  -	      ifconst	interlaced
   5006  259e				  -	      jmp	postsync
   5007  259e				  -
   5008  259e				  -oddframevsync
   5009  259e				  -	      sta	WSYNC
   5010  259e				  -
   5011  259e				  -	      LDA	($80,X)	; 11 waste
   5012  259e				  -	      LDA	($80,X)	; 11 waste
   5013  259e				  -	      LDA	($80,X)	; 11 waste
   5014  259e				  -
   5015  259e				  -	      lda	#2
   5016  259e				  -	      sta	VSYNC
   5017  259e				  -	      sta	WSYNC
   5018  259e				  -	      sta	WSYNC
   5019  259e				  -	      sta	WSYNC
   5020  259e				  -
   5021  259e				  -	      LDA	($80,X)	; 11 waste
   5022  259e				  -	      LDA	($80,X)	; 11 waste
   5023  259e				  -	      LDA	($80,X)	; 11 waste
   5024  259e				  -
   5025  259e				  -	      lda	#0
   5026  259e				  -	      sta	VSYNC
   5027  259e				  -	      sta	VBLANK
   5028  259e				  -	      ifnconst	overscan_time
   5029  259e				  -	      lda	#37+128
   5030  259e				  -	      else
   5031  259e				  -	      lda	#overscan_time+128
   5032  259e				  -	      endif
   5033  259e				  -	      sta	TIM64T
   5034  259e				  -
   5035  259e				  -postsync
   5036  259e					      endif
   5037  259e
   5038  259e				  -	      ifconst	legacy
   5039  259e				  -	      if	legacy < 100
   5040  259e				  -	      ldx	#4
   5041  259e				  -adjustloop
   5042  259e				  -	      lda	player0x,x
   5043  259e				  -	      sec
   5044  259e				  -	      sbc	#14	;?
   5045  259e				  -	      sta	player0x,x
   5046  259e				  -	      dex
   5047  259e				  -	      bpl	adjustloop
   5048  259e				  -	      endif
   5049  259e					      endif
   5050  259e				  -	      if	((<*)>$e9)&&((<*)<$fa)
   5051  259e				  -	      repeat	($fa-(<*))
   5052  259e				  -	      nop
   5053  259e				  -	      repend
   5054  259e					      endif
   5055  259e		       85 02		      sta	WSYNC
   5056  25a0		       a2 04		      ldx	#4
      0  25a2					      SLEEP	3
      1  25a2				   .CYCLES    SET	3
      2  25a2
      3  25a2				  -	      IF	.CYCLES < 2
      4  25a2				  -	      ECHO	"MACRO ERROR: 'SLEEP': Duration must be > 1"
      5  25a2				  -	      ERR
      6  25a2					      ENDIF
      7  25a2
      8  25a2					      IF	.CYCLES & 1
      9  25a2					      IFNCONST	NO_ILLEGAL_OPCODES
     10  25a2		       04 00		      nop	0
     11  25a4				  -	      ELSE
     12  25a4				  -	      bit	VSYNC
     13  25a4					      ENDIF
     14  25a4				   .CYCLES    SET	.CYCLES - 3
     15  25a4					      ENDIF
     16  25a4
     17  25a4				  -	      REPEAT	.CYCLES / 2
     18  25a4				  -	      nop
     19  25a4					      REPEND
   5058  25a4				   HorPosLoop		; 5
   5059  25a4		       b5 80		      lda	player0x,X	;+4 9
   5060  25a6		       38		      sec		;+2 11
   5061  25a7				   DivideLoop
   5062  25a7		       e9 0f		      sbc	#15
   5063  25a9		       b0 fc		      bcs	DivideLoop	;+4 15
   5064  25ab		       95 9c		      sta	temp1,X	;+4 19
   5065  25ad		       95 10		      sta	RESP0,X	;+4 23
   5066  25af		       85 02		      sta	WSYNC
   5067  25b1		       ca		      dex
   5068  25b2		       10 f0		      bpl	HorPosLoop	;+5 5
   5069  25b4							; 4
   5070  25b4
   5071  25b4		       a2 04		      ldx	#4
   5072  25b6		       b4 9c		      ldy	temp1,X
   5073  25b8		       b9 14 f5 	      lda	repostable-256,Y
   5074  25bb		       95 20		      sta	HMP0,X	;+14 18
   5075  25bd
   5076  25bd		       ca		      dex
   5077  25be		       b4 9c		      ldy	temp1,X
   5078  25c0		       b9 14 f5 	      lda	repostable-256,Y
   5079  25c3		       95 20		      sta	HMP0,X	;+14 32
   5080  25c5
   5081  25c5		       ca		      dex
   5082  25c6		       b4 9c		      ldy	temp1,X
   5083  25c8		       b9 14 f5 	      lda	repostable-256,Y
   5084  25cb		       95 20		      sta	HMP0,X	;+14 46
   5085  25cd
   5086  25cd		       ca		      dex
   5087  25ce		       b4 9c		      ldy	temp1,X
   5088  25d0		       b9 14 f5 	      lda	repostable-256,Y
   5089  25d3		       95 20		      sta	HMP0,X	;+14 60
   5090  25d5
   5091  25d5		       ca		      dex
   5092  25d6		       b4 9c		      ldy	temp1,X
   5093  25d8		       b9 14 f5 	      lda	repostable-256,Y
   5094  25db		       95 20		      sta	HMP0,X	;+14 74
   5095  25dd
   5096  25dd		       85 02		      sta	WSYNC
   5097  25df
   5098  25df		       85 2a		      sta	HMOVE	;+3 3
   5099  25e1
   5100  25e1
   5101  25e1				  -	      ifconst	legacy
   5102  25e1				  -	      if	legacy < 100
   5103  25e1				  -	      ldx	#4
   5104  25e1				  -adjustloop2
   5105  25e1				  -	      lda	player0x,x
   5106  25e1				  -	      clc
   5107  25e1				  -	      adc	#14	;?
   5108  25e1				  -	      sta	player0x,x
   5109  25e1				  -	      dex
   5110  25e1				  -	      bpl	adjustloop2
   5111  25e1				  -	      endif
   5112  25e1					      endif
   5113  25e1
   5114  25e1
   5115  25e1
   5116  25e1
   5117  25e1							;set score pointers
   5118  25e1		       a7 95		      lax	score+2
   5119  25e3		       20 14 f6 	      jsr	scorepointerset
   5120  25e6		       84 9b		      sty	scorepointers+5
   5121  25e8		       86 98		      stx	scorepointers+2
   5122  25ea		       a7 94		      lax	score+1
   5123  25ec		       20 14 f6 	      jsr	scorepointerset
   5124  25ef		       84 9a		      sty	scorepointers+4
   5125  25f1		       86 97		      stx	scorepointers+1
   5126  25f3		       a7 93		      lax	score
   5127  25f5		       20 14 f6 	      jsr	scorepointerset
   5128  25f8		       84 99		      sty	scorepointers+3
   5129  25fa		       86 96		      stx	scorepointers
   5130  25fc
   5131  25fc				   vblk
   5132  25fc							; run possible vblank bB code
   5133  25fc				  -	      ifconst	vblank_bB_code
   5134  25fc				  -	      jsr	vblank_bB_code
   5135  25fc					      endif
   5136  25fc				   vblk2
   5137  25fc		       ad 84 02 	      LDA	INTIM
   5138  25ff		       30 fb		      bmi	vblk2
   5139  2601		       4c 00 f1 	      jmp	kernel
   5140  2604
   5141  2604
   5142  2604		       80 70 60 50*	      .byte.b	$80,$70,$60,$50,$40,$30,$20,$10,$00
   5143  260d		       f0 e0 d0 c0*	      .byte.b	$F0,$E0,$D0,$C0,$B0,$A0,$90
   5144  2614				   repostable
   5145  2614
   5146  2614				   scorepointerset
   5147  2614		       29 0f		      and	#$0F
   5148  2616		       0a		      asl
   5149  2617		       0a		      asl
   5150  2618		       0a		      asl
   5151  2619		       69 71		      adc	#<scoretable
   5152  261b		       a8		      tay
   5153  261c		       8a		      txa
   5154  261d							; and #$F0
   5155  261d							; lsr
   5156  261d		       4b f0		      asr	#$F0
   5157  261f		       69 71		      adc	#<scoretable
   5158  2621		       aa		      tax
   5159  2622		       60		      rts
   5160  2623							;bB.asm
   5161  2623							; bB.asm file is split here
   5162  2623				   .
   5163  2623							; 
   5164  2623
   5165  2623				   .L0392		;  asm
   5166  2623
   5167  2623				   XXminikernel
   5168  2623
   5169  2623		       85 02		      sta	WSYNC
   5170  2625
   5171  2625		       a5 08		      lda	scback
   5172  2627
   5173  2627		       85 09		      sta	COLUBK
   5174  2629
   5175  2629		       60		      rts
   5176  262a
   5177  262a				  -	      if	(<*) > (<(*+7))
   5178  262a				  -	      repeat	($100-<*)
   5179  262a				  -	      .byte	0
   5180  262a				  -	      repend
   5181  262a					      endif
   5182  262a				   playercolorL0207_1
   5183  262a		       1e		      .byte.b	_1E
   5184  262b		       82		      .byte.b	_82
   5185  262c		       84		      .byte.b	_84
   5186  262d		       46		      .byte.b	_46
   5187  262e		       44		      .byte.b	_44
   5188  262f		       42		      .byte.b	_42
   5189  2630		       12		      .byte.b	_12
   5190  2631		       08		      .byte.b	_08
   5191  2632					      ifconst	pfres
   5192  2632				  -	      if	(<*) > (254-pfres*pfwidth)
   5193  2632				  -	      align	256
   5194  2632					      endif
   5195  2632					      if	(<*) < (136-pfres*pfwidth)
   5196  2632					      repeat	((136-pfres*pfwidth)-(<*))
   5197  2632		       00		      .byte.b	0
   5196  2632					      repend
   5197  2633		       00		      .byte.b	0
   5196  2633					      repend
   5197  2634		       00		      .byte.b	0
   5196  2634					      repend
   5197  2635		       00		      .byte.b	0
   5196  2635					      repend
   5197  2636		       00		      .byte.b	0
   5196  2636					      repend
   5197  2637		       00		      .byte.b	0
   5196  2637					      repend
   5197  2638		       00		      .byte.b	0
   5196  2638					      repend
   5197  2639		       00		      .byte.b	0
   5196  2639					      repend
   5197  263a		       00		      .byte.b	0
   5196  263a					      repend
   5197  263b		       00		      .byte.b	0
   5196  263b					      repend
   5197  263c		       00		      .byte.b	0
   5196  263c					      repend
   5197  263d		       00		      .byte.b	0
   5196  263d					      repend
   5197  263e		       00		      .byte.b	0
   5196  263e					      repend
   5197  263f		       00		      .byte.b	0
   5196  263f					      repend
   5197  2640		       00		      .byte.b	0
   5196  2640					      repend
   5197  2641		       00		      .byte.b	0
   5196  2641					      repend
   5197  2642		       00		      .byte.b	0
   5196  2642					      repend
   5197  2643		       00		      .byte.b	0
   5196  2643					      repend
   5197  2644		       00		      .byte.b	0
   5196  2644					      repend
   5197  2645		       00		      .byte.b	0
   5196  2645					      repend
   5197  2646		       00		      .byte.b	0
   5196  2646					      repend
   5197  2647		       00		      .byte.b	0
   5196  2647					      repend
   5197  2648		       00		      .byte.b	0
   5196  2648					      repend
   5197  2649		       00		      .byte.b	0
   5196  2649					      repend
   5197  264a		       00		      .byte.b	0
   5196  264a					      repend
   5197  264b		       00		      .byte.b	0
   5196  264b					      repend
   5197  264c		       00		      .byte.b	0
   5196  264c					      repend
   5197  264d		       00		      .byte.b	0
   5196  264d					      repend
   5197  264e		       00		      .byte.b	0
   5196  264e					      repend
   5197  264f		       00		      .byte.b	0
   5196  264f					      repend
   5197  2650		       00		      .byte.b	0
   5196  2650					      repend
   5197  2651		       00		      .byte.b	0
   5196  2651					      repend
   5197  2652		       00		      .byte.b	0
   5196  2652					      repend
   5197  2653		       00		      .byte.b	0
   5196  2653					      repend
   5197  2654		       00		      .byte.b	0
   5196  2654					      repend
   5197  2655		       00		      .byte.b	0
   5196  2655					      repend
   5197  2656		       00		      .byte.b	0
   5196  2656					      repend
   5197  2657		       00		      .byte.b	0
   5196  2657					      repend
   5197  2658		       00		      .byte.b	0
   5196  2658					      repend
   5197  2659		       00		      .byte.b	0
   5196  2659					      repend
   5197  265a		       00		      .byte.b	0
   5196  265a					      repend
   5197  265b		       00		      .byte.b	0
   5196  265b					      repend
   5197  265c		       00		      .byte.b	0
   5196  265c					      repend
   5197  265d		       00		      .byte.b	0
   5196  265d					      repend
   5197  265e		       00		      .byte.b	0
   5196  265e					      repend
   5197  265f		       00		      .byte.b	0
   5196  265f					      repend
   5197  2660		       00		      .byte.b	0
   5196  2660					      repend
   5197  2661		       00		      .byte.b	0
   5196  2661					      repend
   5197  2662		       00		      .byte.b	0
   5196  2662					      repend
   5197  2663		       00		      .byte.b	0
   5196  2663					      repend
   5197  2664		       00		      .byte.b	0
   5196  2664					      repend
   5197  2665		       00		      .byte.b	0
   5196  2665					      repend
   5197  2666		       00		      .byte.b	0
   5196  2666					      repend
   5197  2667		       00		      .byte.b	0
   5196  2667					      repend
   5197  2668		       00		      .byte.b	0
   5196  2668					      repend
   5197  2669		       00		      .byte.b	0
   5196  2669					      repend
   5197  266a		       00		      .byte.b	0
   5196  266a					      repend
   5197  266b		       00		      .byte.b	0
   5196  266b					      repend
   5197  266c		       00		      .byte.b	0
   5196  266c					      repend
   5197  266d		       00		      .byte.b	0
   5196  266d					      repend
   5197  266e		       00		      .byte.b	0
   5196  266e					      repend
   5197  266f		       00		      .byte.b	0
   5196  266f					      repend
   5197  2670		       00		      .byte.b	0
   5196  2670					      repend
   5197  2671		       00		      .byte.b	0
   5196  2671					      repend
   5197  2672		       00		      .byte.b	0
   5196  2672					      repend
   5197  2673		       00		      .byte.b	0
   5196  2673					      repend
   5197  2674		       00		      .byte.b	0
   5196  2674					      repend
   5197  2675		       00		      .byte.b	0
   5196  2675					      repend
   5197  2676		       00		      .byte.b	0
   5196  2676					      repend
   5197  2677		       00		      .byte.b	0
   5198  2678					      repend
   5199  2678					      endif
   5200  2678				  -	      else
   5201  2678				  -	      if	(<*) > 206
   5202  2678				  -	      align	256
   5203  2678				  -	      endif
   5204  2678				  -	      if	(<*) < 88
   5205  2678				  -	      repeat	(88-(<*))
   5206  2678				  -	      .byte	0
   5207  2678				  -	      repend
   5208  2678				  -	      endif
   5209  2678					      endif
   5210  2678				   pfcolorlabel25
   5211  2678		       24 24 00 00	      .byte.b	_24, _24,0,0
   5212  267c		       26 26 00 00	      .byte.b	_26, _26,0,0
   5213  2680		       26 00 00 00	      .byte.b	_26,0,0,0
   5214  2684				  -	      if	(<*) > (<(*+7))
   5215  2684				  -	      repeat	($100-<*)
   5216  2684				  -	      .byte	0
   5217  2684				  -	      repend
   5218  2684					      endif
   5219  2684				   player2then_1
   5220  2684		       1b		      .byte.b	%00011011
   5221  2685		       0e		      .byte.b	%00001110
   5222  2686		       1f		      .byte.b	%00011111
   5223  2687		       bd		      .byte.b	%10111101
   5224  2688		       f9		      .byte.b	%11111001
   5225  2689		       9e		      .byte.b	%10011110
   5226  268a		       08		      .byte.b	%00001000
   5227  268b		       7c		      .byte.b	%01111100
   5228  268c				  -	      if	(<*) > (<(*+7))
   5229  268c				  -	      repeat	($100-<*)
   5230  268c				  -	      .byte	0
   5231  268c				  -	      repend
   5232  268c					      endif
   5233  268c				   player3then_1
   5234  268c		       1b		      .byte.b	%00011011
   5235  268d		       0e		      .byte.b	%00001110
   5236  268e		       1f		      .byte.b	%00011111
   5237  268f		       bd		      .byte.b	%10111101
   5238  2690		       f9		      .byte.b	%11111001
   5239  2691		       9e		      .byte.b	%10011110
   5240  2692		       08		      .byte.b	%00001000
   5241  2693		       1f		      .byte.b	%00011111
   5242  2694				  -	      if	(<*) > (<(*+6))
   5243  2694				  -	      repeat	($100-<*)
   5244  2694				  -	      .byte	0
   5245  2694				  -	      repend
   5246  2694					      endif
   5247  2694				   player4then_0
   5248  2694		       55		      .byte.b	%01010101
   5249  2695		       aa		      .byte.b	%10101010
   5250  2696		       ff		      .byte.b	%11111111
   5251  2697		       3c		      .byte.b	%00111100
   5252  2698		       18		      .byte.b	%00011000
   5253  2699		       08		      .byte.b	%00001000
   5254  269a		       04		      .byte.b	%00000100
   5255  269b				  -	      if	(<*) > (<(*+6))
   5256  269b				  -	      repeat	($100-<*)
   5257  269b				  -	      .byte	0
   5258  269b				  -	      repend
   5259  269b					      endif
   5260  269b				   player5then_0
   5261  269b		       aa		      .byte.b	%10101010
   5262  269c		       55		      .byte.b	%01010101
   5263  269d		       ff		      .byte.b	%11111111
   5264  269e		       3c		      .byte.b	%00111100
   5265  269f		       18		      .byte.b	%00011000
   5266  26a0		       08		      .byte.b	%00001000
   5267  26a1		       04		      .byte.b	%00000100
   5268  26a2				  -	      if	(<*) > (<(*+11))
   5269  26a2				  -	      repeat	($100-<*)
   5270  26a2				  -	      .byte	0
   5271  26a2				  -	      repend
   5272  26a2					      endif
   5273  26a2				   playerL0224_0
   5274  26a2		       a0		      .byte.b	%10100000
   5275  26a3		       40		      .byte.b	%01000000
   5276  26a4		       e0		      .byte.b	%11100000
   5277  26a5		       a0		      .byte.b	%10100000
   5278  26a6		       40		      .byte.b	%01000000
   5279  26a7		       00		      .byte.b	%00000000
   5280  26a8		       00		      .byte.b	%00000000
   5281  26a9		       05		      .byte.b	%00000101
   5282  26aa		       02		      .byte.b	%00000010
   5283  26ab		       07		      .byte.b	%00000111
   5284  26ac		       05		      .byte.b	%00000101
   5285  26ad		       02		      .byte.b	%00000010
   5286  26ae				  -	      if	(<*) > (<(*+25))
   5287  26ae				  -	      repeat	($100-<*)
   5288  26ae				  -	      .byte	0
   5289  26ae				  -	      repend
   5290  26ae					      endif
   5291  26ae				   playerL0226_0
   5292  26ae		       38		      .byte.b	%00111000
   5293  26af		       20		      .byte.b	%00100000
   5294  26b0		       20		      .byte.b	%00100000
   5295  26b1		       20		      .byte.b	%00100000
   5296  26b2		       20		      .byte.b	%00100000
   5297  26b3		       00		      .byte.b	%00000000
   5298  26b4		       38		      .byte.b	%00111000
   5299  26b5		       20		      .byte.b	%00100000
   5300  26b6		       30		      .byte.b	%00110000
   5301  26b7		       20		      .byte.b	%00100000
   5302  26b8		       38		      .byte.b	%00111000
   5303  26b9		       00		      .byte.b	%00000000
   5304  26ba		       10		      .byte.b	%00010000
   5305  26bb		       28		      .byte.b	%00101000
   5306  26bc		       28		      .byte.b	%00101000
   5307  26bd		       28		      .byte.b	%00101000
   5308  26be		       28		      .byte.b	%00101000
   5309  26bf		       00		      .byte.b	%00000000
   5310  26c0		       20		      .byte.b	%00100000
   5311  26c1		       20		      .byte.b	%00100000
   5312  26c2		       30		      .byte.b	%00110000
   5313  26c3		       20		      .byte.b	%00100000
   5314  26c4		       ba		      .byte.b	%10111010
   5315  26c5		       82		      .byte.b	%10000010
   5316  26c6		       fe		      .byte.b	%11111110
   5317  26c7		       00		      .byte.b
   5318  26c8				  -	      if	(<*) > (<(*+3))
   5319  26c8				  -	      repeat	($100-<*)
   5320  26c8				  -	      .byte	0
   5321  26c8				  -	      repend
   5322  26c8					      endif
   5323  26c8				   player6then_0
   5324  26c8		       a6		      .byte.b	%10100110
   5325  26c9		       42		      .byte.b	%01000010
   5326  26ca		       c6		      .byte.b	%11000110
   5327  26cb		       42		      .byte.b	%01000010
   5328  26cc				  -	      if	(<*) > (<(*+3))
   5329  26cc				  -	      repeat	($100-<*)
   5330  26cc				  -	      .byte	0
   5331  26cc				  -	      repend
   5332  26cc					      endif
   5333  26cc				   player7then_0
   5334  26cc		       c5		      .byte.b	%11000101
   5335  26cd		       42		      .byte.b	%01000010
   5336  26ce		       c6		      .byte.b	%11000110
   5337  26cf		       42		      .byte.b	%01000010
   5338  26d0					      if	ECHOFIRST
      2209 bytes of ROM space left in bank 2
   5339  26d0					      echo	"    ",[(scoretable - *)]d , "bytes of ROM space left in bank 2")
   5340  26d0					      endif
   5341  26d0		       00 01	   ECHOFIRST  =	1
   5342  26d0
   5343  26d0
   5344  26d0							; Provided under the CC0 license. See the included LICENSE.txt for details.
   5345  26d0
   5346  26d0							; feel free to modify the score graphics - just keep each digit 8 high
   5347  26d0							; and keep the conditional compilation stuff intact
   5348  26d0				  -	      ifconst	ROM2k
   5349  26d0				  -	      ifconst	PlusROM_functions
   5350  26d0				  -	      ORG	$F7AC-16
   5351  26d0				  -	      else
   5352  26d0				  -	      ORG	$F7AC-8
   5353  26d0				  -	      endif
   5354  26d0					      else
   5355  26d0					      ifconst	bankswitch
   5356  26d0					      if	bankswitch == 8
   5357  2f71					      ORG	$2F94-bscode_length
   5358  2f71					      RORG	$FF94-bscode_length
   5359  2f71					      endif
   5360  2f71				  -	      if	bankswitch == 16
   5361  2f71				  -	      ORG	$4F94-bscode_length
   5362  2f71				  -	      RORG	$FF94-bscode_length
   5363  2f71					      endif
   5364  2f71				  -	      if	bankswitch == 32
   5365  2f71				  -	      ORG	$8F94-bscode_length
   5366  2f71				  -	      RORG	$FF94-bscode_length
   5367  2f71					      endif
   5368  2f71				  -	      if	bankswitch == 64
   5369  2f71				  -	      ORG	$10F80-bscode_length
   5370  2f71				  -	      RORG	$1FF80-bscode_length
   5371  2f71					      endif
   5372  2f71				  -	      else
   5373  2f71				  -	      ifconst	PlusROM_functions
   5374  2f71				  -	      ORG	$FF98
   5375  2f71				  -	      else
   5376  2f71				  -	      ORG	$FF9C
   5377  2f71				  -	      endif
   5378  2f71					      endif
   5379  2f71					      endif
   5380  2f71
   5381  2f71							; font equates
   5382  2f71		       00 01	   .21stcentury =	1
   5383  2f71		       00 02	   alarmclock =	2
   5384  2f71		       00 03	   handwritten =	3
   5385  2f71		       00 04	   interrupted =	4
   5386  2f71		       00 05	   retroputer =	5
   5387  2f71		       00 06	   whimsey    =	6
   5388  2f71		       00 07	   tiny       =	7
   5389  2f71		       00 08	   hex	      =	8
   5390  2f71
   5391  2f71				  -	      ifconst	font
   5392  2f71				  -	      if	font == hex
   5393  2f71				  -	      ORG	. - 48
   5394  2f71				  -	      endif
   5395  2f71					      endif
   5396  2f71
   5397  2f71				   scoretable
   5398  2f71
   5399  2f71				  -	      ifconst	font
   5400  2f71				  -	      if	font == .21stcentury
   5401  2f71				  -	      include	"score_graphics.asm.21stcentury"
   5402  2f71				  -	      endif
   5403  2f71				  -	      if	font == alarmclock
   5404  2f71				  -	      include	"score_graphics.asm.alarmclock"
   5405  2f71				  -	      endif
   5406  2f71				  -	      if	font == handwritten
   5407  2f71				  -	      include	"score_graphics.asm.handwritten"
   5408  2f71				  -	      endif
   5409  2f71				  -	      if	font == interrupted
   5410  2f71				  -	      include	"score_graphics.asm.interrupted"
   5411  2f71				  -	      endif
   5412  2f71				  -	      if	font == retroputer
   5413  2f71				  -	      include	"score_graphics.asm.retroputer"
   5414  2f71				  -	      endif
   5415  2f71				  -	      if	font == whimsey
   5416  2f71				  -	      include	"score_graphics.asm.whimsey"
   5417  2f71				  -	      endif
   5418  2f71				  -	      if	font == tiny
   5419  2f71				  -	      include	"score_graphics.asm.tiny"
   5420  2f71				  -	      endif
   5421  2f71				  -	      if	font == hex
   5422  2f71				  -	      include	"score_graphics.asm.hex"
   5423  2f71				  -	      endif
   5424  2f71					      else		; default font
   5425  2f71
   5426  2f71		       3c		      .byte.b	%00111100
   5427  2f72		       66		      .byte.b	%01100110
   5428  2f73		       66		      .byte.b	%01100110
   5429  2f74		       66		      .byte.b	%01100110
   5430  2f75		       66		      .byte.b	%01100110
   5431  2f76		       66		      .byte.b	%01100110
   5432  2f77		       66		      .byte.b	%01100110
   5433  2f78		       3c		      .byte.b	%00111100
   5434  2f79
   5435  2f79		       7e		      .byte.b	%01111110
   5436  2f7a		       18		      .byte.b	%00011000
   5437  2f7b		       18		      .byte.b	%00011000
   5438  2f7c		       18		      .byte.b	%00011000
   5439  2f7d		       18		      .byte.b	%00011000
   5440  2f7e		       38		      .byte.b	%00111000
   5441  2f7f		       18		      .byte.b	%00011000
   5442  2f80		       08		      .byte.b	%00001000
   5443  2f81
   5444  2f81		       7e		      .byte.b	%01111110
   5445  2f82		       60		      .byte.b	%01100000
   5446  2f83		       60		      .byte.b	%01100000
   5447  2f84		       3c		      .byte.b	%00111100
   5448  2f85		       06		      .byte.b	%00000110
   5449  2f86		       06		      .byte.b	%00000110
   5450  2f87		       46		      .byte.b	%01000110
   5451  2f88		       3c		      .byte.b	%00111100
   5452  2f89
   5453  2f89		       3c		      .byte.b	%00111100
   5454  2f8a		       46		      .byte.b	%01000110
   5455  2f8b		       06		      .byte.b	%00000110
   5456  2f8c		       06		      .byte.b	%00000110
   5457  2f8d		       1c		      .byte.b	%00011100
   5458  2f8e		       06		      .byte.b	%00000110
   5459  2f8f		       46		      .byte.b	%01000110
   5460  2f90		       3c		      .byte.b	%00111100
   5461  2f91
   5462  2f91		       0c		      .byte.b	%00001100
   5463  2f92		       0c		      .byte.b	%00001100
   5464  2f93		       7e		      .byte.b	%01111110
   5465  2f94		       4c		      .byte.b	%01001100
   5466  2f95		       4c		      .byte.b	%01001100
   5467  2f96		       2c		      .byte.b	%00101100
   5468  2f97		       1c		      .byte.b	%00011100
   5469  2f98		       0c		      .byte.b	%00001100
   5470  2f99
   5471  2f99		       3c		      .byte.b	%00111100
   5472  2f9a		       46		      .byte.b	%01000110
   5473  2f9b		       06		      .byte.b	%00000110
   5474  2f9c		       06		      .byte.b	%00000110
   5475  2f9d		       3c		      .byte.b	%00111100
   5476  2f9e		       60		      .byte.b	%01100000
   5477  2f9f		       60		      .byte.b	%01100000
   5478  2fa0		       7e		      .byte.b	%01111110
   5479  2fa1
   5480  2fa1		       3c		      .byte.b	%00111100
   5481  2fa2		       66		      .byte.b	%01100110
   5482  2fa3		       66		      .byte.b	%01100110
   5483  2fa4		       66		      .byte.b	%01100110
   5484  2fa5		       7c		      .byte.b	%01111100
   5485  2fa6		       60		      .byte.b	%01100000
   5486  2fa7		       62		      .byte.b	%01100010
   5487  2fa8		       3c		      .byte.b	%00111100
   5488  2fa9
   5489  2fa9		       30		      .byte.b	%00110000
   5490  2faa		       30		      .byte.b	%00110000
   5491  2fab		       30		      .byte.b	%00110000
   5492  2fac		       18		      .byte.b	%00011000
   5493  2fad		       0c		      .byte.b	%00001100
   5494  2fae		       06		      .byte.b	%00000110
   5495  2faf		       42		      .byte.b	%01000010
   5496  2fb0		       3e		      .byte.b	%00111110
   5497  2fb1
   5498  2fb1		       3c		      .byte.b	%00111100
   5499  2fb2		       66		      .byte.b	%01100110
   5500  2fb3		       66		      .byte.b	%01100110
   5501  2fb4		       66		      .byte.b	%01100110
   5502  2fb5		       3c		      .byte.b	%00111100
   5503  2fb6		       66		      .byte.b	%01100110
   5504  2fb7		       66		      .byte.b	%01100110
   5505  2fb8		       3c		      .byte.b	%00111100
   5506  2fb9
   5507  2fb9		       3c		      .byte.b	%00111100
   5508  2fba		       46		      .byte.b	%01000110
   5509  2fbb		       06		      .byte.b	%00000110
   5510  2fbc		       3e		      .byte.b	%00111110
   5511  2fbd		       66		      .byte.b	%01100110
   5512  2fbe		       66		      .byte.b	%01100110
   5513  2fbf		       66		      .byte.b	%01100110
   5514  2fc0		       3c		      .byte.b	%00111100
   5515  2fc1
   5516  2fc1					      ifnconst	DPC_kernel_options
   5517  2fc1
   5518  2fc1		       00		      .byte.b	%00000000
   5519  2fc2		       00		      .byte.b	%00000000
   5520  2fc3		       00		      .byte.b	%00000000
   5521  2fc4		       00		      .byte.b	%00000000
   5522  2fc5		       00		      .byte.b	%00000000
   5523  2fc6		       00		      .byte.b	%00000000
   5524  2fc7		       00		      .byte.b	%00000000
   5525  2fc8		       00		      .byte.b	%00000000
   5526  2fc9
   5527  2fc9					      endif
   5528  2fc9
   5529  2fc9					      endif
   5530  2fc9
   5531  2fc9				  -	      ifconst	ROM2k
   5532  2fc9				  -	      ifconst	PlusROM_functions
   5533  2fc9				  -	      ORG	$F7F0
   5534  2fc9				  -	      .byte	0	; WriteToBuffer
   5535  2fc9				  -	      .byte	0	; WriteSendBuffer
   5536  2fc9				  -	      .byte	0	; ReceiveBuffer
   5537  2fc9				  -	      .byte	$ff	; ReceiveBufferSize (none zero for detection of PlusROM support)
   5538  2fc9				  -	      ORG	$F7FA
   5539  2fc9				  -	      else
   5540  2fc9				  -	      ORG	$F7FC
   5541  2fc9				  -	      endif
   5542  2fc9					      else
   5543  2fc9					      ifconst	bankswitch
   5544  2fc9					      if	bankswitch == 8
   5545  2fd1					      ORG	$2FF4-bscode_length
   5546  2fd1					      RORG	$FFF4-bscode_length
   5547  2fd1					      endif
   5548  2fd1				  -	      if	bankswitch == 16
   5549  2fd1				  -	      ORG	$4FF4-bscode_length
   5550  2fd1				  -	      RORG	$FFF4-bscode_length
   5551  2fd1					      endif
   5552  2fd1				  -	      if	bankswitch == 32
   5553  2fd1				  -	      ORG	$8FF4-bscode_length
   5554  2fd1				  -	      RORG	$FFF4-bscode_length
   5555  2fd1					      endif
   5556  2fd1				  -	      if	bankswitch == 64
   5557  2fd1				  -	      ORG	$10FE0-bscode_length
   5558  2fd1				  -	      RORG	$1FFE0-bscode_length
   5559  2fd1					      endif
   5560  2fd1				  -	      else
   5561  2fd1				  -	      ifconst	PlusROM_functions
   5562  2fd1				  -	      ORG	$FFF0
   5563  2fd1				  -	      .byte	0	; WriteToBuffer
   5564  2fd1				  -	      .byte	0	; WriteSendBuffer
   5565  2fd1				  -	      .byte	0	; ReceiveBuffer
   5566  2fd1				  -	      .byte	$ff	; ReceiveBufferSize (none zero for detection of PlusROM support)
   5567  2fd1				  -	      ORG	$FFFA
   5568  2fd1				  -	      else
   5569  2fd1				  -	      ORG	$FFFC
   5570  2fd1				  -	      endif
   5571  2fd1					      endif
   5572  2fd1					      endif
   5573  2fd1							; Provided under the CC0 license. See the included LICENSE.txt for details.
   5574  2fd1
   5575  2fd1							; every bank has this stuff at the same place
   5576  2fd1							; this code can switch to/from any bank at any entry point
   5577  2fd1							; and can preserve register values
   5578  2fd1							; note: lines not starting with a space are not placed in all banks
   5579  2fd1							;
   5580  2fd1							; line below tells the compiler how long this is - do not remove
   5581  2fd1							;size=35
   5582  2fd1
   5583  2fd1				   begin_bscode
   5584  2fd1		       a2 ff		      ldx	#$ff
   5585  2fd3				  -	      ifconst	FASTFETCH	; using DPC+
   5586  2fd3				  -	      stx	FASTFETCH
   5587  2fd3					      endif
   5588  2fd3		       9a		      txs
   5589  2fd4				  -	      if	bankswitch == 64
   5590  2fd4				  -	      lda	#(((>(start-1)) & $0F) | $F0)
   5591  2fd4					      else
   5592  2fd4		       a9 f3		      lda	#>(start-1)
   5593  2fd6					      endif
   5594  2fd6		       48		      pha
   5595  2fd7		       a9 51		      lda	#<(start-1)
   5596  2fd9		       48		      pha
   5597  2fda
   5598  2fda				   BS_return
   5599  2fda		       48		      pha
   5600  2fdb		       8a		      txa
   5601  2fdc		       48		      pha
   5602  2fdd		       ba		      tsx
   5603  2fde
   5604  2fde					      if	bankswitch != 64
   5605  2fde		       b5 04		      lda	4,x	; get high byte of return address
   5606  2fe0
   5607  2fe0		       2a		      rol
   5608  2fe1		       2a		      rol
   5609  2fe2		       2a		      rol
   5610  2fe3		       2a		      rol
   5611  2fe4		       29 01		      and	#bs_mask	;1 3 or 7 for F8/F6/F4
   5612  2fe6		       aa		      tax
   5613  2fe7		       e8		      inx
   5614  2fe8				  -	      else
   5615  2fe8				  -	      lda	4,x	; get high byte of return address
   5616  2fe8				  -	      tay
   5617  2fe8				  -	      ora	#$10	; change our bank nibble into a valid rom mirror
   5618  2fe8				  -	      sta	4,x
   5619  2fe8				  -	      tya
   5620  2fe8				  -	      lsr
   5621  2fe8				  -	      lsr
   5622  2fe8				  -	      lsr
   5623  2fe8				  -	      lsr
   5624  2fe8				  -	      tax
   5625  2fe8				  -	      inx
   5626  2fe8					      endif
   5627  2fe8
   5628  2fe8				   BS_jsr
   5629  2fe8		       bd f7 1f 	      lda	bankswitch_hotspot-1,x
   5630  2feb		       68		      pla
   5631  2fec		       aa		      tax
   5632  2fed		       68		      pla
   5633  2fee		       60		      rts
   5634  2fef				  -	      if	((* & $1FFF) > ((bankswitch_hotspot & $1FFF) - 1))
   5635  2fef				  -	      echo	"WARNING: size parameter in banksw.asm too small - the program probably will not work."
   5636  2fef				  -	      echo	"Change to",[(*-begin_bscode+1)&$FF]d,"and try again."
   5637  2fef					      endif
   5638  2fef							; Provided under the CC0 license. See the included LICENSE.txt for details.
   5639  2fef
   5640  2fef					      ifconst	bankswitch
   5641  2fef					      if	bankswitch == 8
   5642  2fef					      ifconst	PlusROM_functions
   5643  2ff0					      ORG	$2FF0
   5644  2ff0					      RORG	$FFF0
   5645  2ff0		       00		      .byte.b	0	; WriteToBuffer
   5646  2ff1		       00		      .byte.b	0	; WriteSendBuffer
   5647  2ff2		       00		      .byte.b	0	; ReceiveBuffer
   5648  2ff3		       ff		      .byte.b	$ff	; ReceiveBufferSize (none zero for detection of PlusROM support)
   5649  2ffa					      ORG	$2FFA
   5650  2ffa					      RORG	$FFFA
   5651  2ffa		       ed 18		      .word.w	(PlusROM_API-$C000)
   5652  2ffc				  -	      else
   5653  2ffc				  -	      ORG	$2FFC
   5654  2ffc				  -	      RORG	$FFFC
   5655  2ffc					      endif
   5656  2ffc					      endif
   5657  2ffc				  -	      if	bankswitch == 16
   5658  2ffc				  -	      ifconst	PlusROM_functions
   5659  2ffc				  -	      ORG	$4FF0
   5660  2ffc				  -	      RORG	$FFF0
   5661  2ffc				  -	      .byte	0	; WriteToBuffer
   5662  2ffc				  -	      .byte	0	; WriteSendBuffer
   5663  2ffc				  -	      .byte	0	; ReceiveBuffer
   5664  2ffc				  -	      .byte	$ff	; ReceiveBufferSize (none zero for detection of PlusROM support)
   5665  2ffc				  -	      ORG	$4FFA
   5666  2ffc				  -	      RORG	$FFFA
   5667  2ffc				  -	      .word	(PlusROM_API-$9000)
   5668  2ffc				  -	      else
   5669  2ffc				  -	      ORG	$4FFC
   5670  2ffc				  -	      RORG	$FFFC
   5671  2ffc				  -	      endif
   5672  2ffc					      endif
   5673  2ffc				  -	      if	bankswitch == 32
   5674  2ffc				  -	      ifconst	PlusROM_functions
   5675  2ffc				  -	      ORG	$8FF0
   5676  2ffc				  -	      RORG	$FFF0
   5677  2ffc				  -	      .byte	0	; WriteToBuffer
   5678  2ffc				  -	      .byte	0	; WriteSendBuffer
   5679  2ffc				  -	      .byte	0	; ReceiveBuffer
   5680  2ffc				  -	      .byte	$ff	; ReceiveBufferSize (none zero for detection of PlusROM support)
   5681  2ffc				  -	      ORG	$8FFA
   5682  2ffc				  -	      RORG	$FFFA
   5683  2ffc				  -	      .word	(PlusROM_API-$5000)
   5684  2ffc				  -	      else
   5685  2ffc				  -	      ORG	$8FFC
   5686  2ffc				  -	      RORG	$FFFC
   5687  2ffc				  -	      endif
   5688  2ffc					      endif
   5689  2ffc				  -	      if	bankswitch == 64
   5690  2ffc				  -	      ORG	$10FF0
   5691  2ffc				  -	      RORG	$1FFF0
   5692  2ffc				  -	      lda	$ffe0	; we use wasted space to assist stella with EF format auto-detection
   5693  2ffc				  -	      ORG	$10FF8
   5694  2ffc				  -	      RORG	$1FFF8
   5695  2ffc				  -	      ifconst	superchip
   5696  2ffc				  -	      .byte	"E","F","S","C"
   5697  2ffc				  -	      else
   5698  2ffc				  -	      .byte	"E","F","E","F"
   5699  2ffc				  -	      endif
   5700  2ffc				  -	      ORG	$10FFC
   5701  2ffc				  -	      RORG	$1FFFC
   5702  2ffc					      endif
   5703  2ffc				  -	      else
   5704  2ffc				  -	      ifconst	ROM2k
   5705  2ffc				  -	      ifconst	PlusROM_functions
   5706  2ffc				  -	      ORG	$F7FA
   5707  2ffc				  -	      .word	(PlusROM_API-$E000)
   5708  2ffc				  -	      else
   5709  2ffc				  -	      ORG	$F7FC
   5710  2ffc				  -	      endif
   5711  2ffc				  -	      else
   5712  2ffc				  -	      ifconst	PlusROM_functions
   5713  2ffc				  -	      ORG	$FFFA
   5714  2ffc				  -	      .word	(PlusROM_API-$E000)
   5715  2ffc				  -	      else
   5716  2ffc				  -	      ORG	$FFFC
   5717  2ffc				  -	      endif
   5718  2ffc				  -	      endif
   5719  2ffc					      endif
   5720  2ffc		       52 f3		      .word.w	(start & $ffff)
   5721  2ffe		       52 f3		      .word.w	(start & $ffff)
